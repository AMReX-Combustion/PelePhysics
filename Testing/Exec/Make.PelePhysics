AMREX_HOME        ?= ../../../../../amrex
PELE_HOME         ?= ../../../..
PELE_PHYSICS_HOME ?= $(PELE_HOME)/PelePhysics

TOP := $(PELE_PHYSICS_HOME)

EOS_HOME     ?= $(PELE_PHYSICS_HOME)/Eos
REACTIONS_HOME ?= $(PELE_PHYSICS_HOME)/Reactions
TRAN_HOME    ?= $(PELE_PHYSICS_HOME)/Transport

EBASE = Pele
BL_NO_FORT = TRUE

# EXTERN_CORE is simply a list of the directories we use in Eos, Reactions, Transport and Util
# this list will be searched for runtime parameters
EXTERN_CORE ?=

include $(AMREX_HOME)/Tools/GNUMake/Make.defs

include $(PELE_PHYSICS_HOME)/ThirdParty/Make.ThirdParty

# PeleC uses a coarse grained OMP approach
DEFINES += -DCRSEGRNDOMP

# Need this for DataServices to compile
DEFINES += -DBL_NOLINEVALUES

ifeq ($(USE_ACC), TRUE)
  DEFINES += -DACC
endif

# PelePhysics
PP_SRC_HOME = $(PELE_PHYSICS_HOME)/Source
EXTERN_CORE       += $(PP_SRC_HOME)
INCLUDE_LOCATIONS += $(PP_SRC_HOME)
VPATH_LOCATIONS   += $(PP_SRC_HOME)
Bpack             += $(PP_SRC_HOME)/Make.package
Blocs             += $(PP_SRC_HOME)

# EOS
# Both Fortran and cpp can be loaded for EOS
ifeq ($(Eos_Model),$(filter $(Eos_Model),GammaLaw))
   DEFINES += -DUSE_GAMMALAW_EOS
endif
ifeq ($(Eos_Model),$(filter $(Eos_Model),Fuego))
   DEFINES += -DUSE_FUEGO_EOS
endif
ifeq ($(Eos_Model),$(filter $(Eos_Model),Soave-Redlich-Kwong))
   DEFINES += -DUSE_SRK_EOS
endif
INCLUDE_LOCATIONS += $(EOS_HOME)
VPATH_LOCATIONS   += $(EOS_HOME)
ifeq ($(Eos_Model), Fuego)
  TRANSPORT_TYPE := IDEAL_GAS
else
  ifeq ($(Eos_Model), GammaLaw)
    TRANSPORT_TYPE := IDEAL_GAS
  else
    TRANSPORT_TYPE := REAL_GAS
  endif
endif
Bpack             += $(EOS_HOME)/Make.package
Blocs             += $(EOS_HOME)

# Reactions
include $(REACTIONS_HOME)/Make.package
INCLUDE_LOCATIONS += $(REACTIONS_HOME)
VPATH_LOCATIONS   += $(REACTIONS_HOME)
ifeq ($(Eos_Model), GammaLaw)
  ifneq ($(Chemistry_Model), Null)
    $(error Chemistry_Model definition not compatible with Eos_Model=GammaLaw)
  endif
endif
CHEM_HOME = $(PELE_PHYSICS_HOME)/Support/Fuego/Mechanism/Models/$(Chemistry_Model)
CHEM_ALL  = $(PELE_PHYSICS_HOME)/Support/Fuego/Mechanism/Models
VPATH_LOCATIONS += $(CHEM_HOME) $(CHEM_ALL)
Bpack += $(CHEM_HOME)/Make.package \
         $(CHEM_ALL)/Make.package
Blocs += $(CHEM_HOME) $(CHEM_ALL)
Blocs   += $(PELE_PHYSICS_HOME)/Support/Fuego/Evaluation

# Transport
include $(TRAN_HOME)/Make.package
INCLUDE_LOCATIONS += $(TRAN_HOME)
VPATH_LOCATIONS   += $(TRAN_HOME)
USE_FUEGO = FALSE

Blocs   += $(PELE_PHYSICS_HOME)/Support/Fuego/Mechanism

ifeq ($(Transport_Model), Simple)
  DEFINES += -DUSE_SIMPLE_TRANSPORT
endif
ifeq ($(Transport_Model), EGLib)
  DEFINES += -DEGLIB_TRANSPORT
  USE_FUEGO = TRUE
endif
ifeq ($(Transport_Model), Constant)
  DEFINES += -DUSE_CONSTANT_TRANSPORT
endif
ifeq ($(Transport_Model), Sutherland)
  DEFINES += -DUSE_SUTHERLAND_TRANSPORT
endif

Pdirs   := Base Boundary AmrCore Extern/amrdata
Bdirs   := Source

Bpack	+= $(foreach dir, $(Pdirs), $(AMREX_HOME)/Src/$(dir)/Make.package)
Blocs	+= $(foreach dir, $(Pdirs), $(AMREX_HOME)/Src/$(dir))

Bpack	+= $(foreach dir, $(Bdirs), $(TOP)/Testing/$(dir)/Make.package)
Blocs	+= $(foreach dir, $(Bdirs), $(TOP)/Testing/$(dir))

include $(Bpack)

INCLUDE_LOCATIONS += $(Blocs)
VPATH_LOCATIONS   += $(Blocs)

EXTERN_TEMPLATE := $(PELE_PHYSICS_HOME)/Testing/Source/extern_probin.template

EXTERN_PARAMETERS := $(shell $(AMREX_HOME)/Tools/F_scripts/findparams.py $(EXTERN_CORE))

# job_info support
CEXE_sources += AMReX_buildInfo.cpp
CEXE_headers += $(AMREX_HOME)/Tools/C_scripts/buildInfo.H
INCLUDE_LOCATIONS +=  $(AMREX_HOME)/Tools/C_scripts

MNAMES := EOS=$(EOS_PATH) REACTIONS=$(REACTIONS_PATH)
MNAMES += TRANSPORT=$(TRAN_HOME)
MNAMES += CHEMISTRY=$(Chemistry_Model)

ifeq ($(shell uname),Darwin)
  all: TPLandExec
	install_name_tool -add_rpath $(PELE_PHYSICS_HOME)/ThirdParty/INSTALL/$(configSpecificTPSuffix)/lib $(executable)
	$(SILENT) $(RM) AMReX_buildInfo.cpp
	@echo SUCCESS
else
  all: TPLandExec
	$(SILENT) $(RM) AMReX_buildInfo.cpp
	@echo SUCCESS
endif

TPLandExec: TPL
	@$(MAKE) $(MAKEFLAGS) $(executable)

include $(AMREX_HOME)/Tools/GNUMake/Make.rules

ifeq ($(USE_CUDA),TRUE)
   CXXFLAGS+=-Xptxas --disable-optimizer-constants
endif

clean::
	$(SILENT) $(RM) extern_parameters.cpp extern_parameters.H
	$(SILENT) $(RM) AMReX_buildInfo.cpp

AMReX_buildInfo.cpp:
	$(AMREX_HOME)/Tools/C_scripts/makebuildinfo_C.py \
          --amrex_home "$(AMREX_HOME)" \
          --COMP "$(COMP)" --COMP_VERSION "$(COMP_VERSION)" \
          --FCOMP "$(FCOMP)" --FCOMP_VERSION "$(FCOMP_VERSION)" \
          --MODULES "$(MNAMES)" \
          --GIT "$(TOP) $(AMREX_HOME) $(PELE_PHYSICS_HOME)"

TPL:
	@echo "==> Building SUNDIALS library"
	@cd $(PELE_PHYSICS_HOME)/ThirdParty; make sundials AMREX_HOME=$(AMREX_HOME) USE_HIP=$(USE_HIP) USE_CUDA=$(USE_CUDA) PELE_USE_KLU=$(PELE_USE_KLU) DEBUG=$(DEBUG) COMP=$(HOSTCC) NVCC=$(COMP) CUDA_ARCH=$(CUDA_ARCH)

TPLclean:
	@echo "==> Removing SUNDIALS library"
	@cd $(PELE_PHYSICS_HOME)/ThirdParty; make AMREX_HOME=$(AMREX_HOME) USE_HIP=$(USE_HIP) USE_CUDA=$(USE_CUDA) PELE_USE_KLU=$(PELE_USE_KLU) DEBUG=$(DEBUG) COMP=$(HOSTCC) NVCC=$(COMP)  CUDA_ARCH=$(CUDA_ARCH) clean

TPLrealclean:
	@echo "==> Removing SUNDIALS library"
	@cd $(PELE_PHYSICS_HOME)/ThirdParty; make AMREX_HOME=$(AMREX_HOME) USE_HIP=$(USE_HIP) USE_CUDA=$(USE_CUDA) PELE_USE_KLU=$(PELE_USE_KLU) DEBUG=$(DEBUG) COMP=$(HOSTCC) NVCC=$(COMP) CUDA_ARCH=$(CUDA_ARCH) realclean


#-----------------------------------------------------------------------------
# for debugging.  To see the value of a Makefile variable,
# e.g. Fmlocs, simply do "make print-Fmlocs".  This will
# print out the value.
print-%: ; @echo $* is $($*) ; $(SILENT) $(RM) buildInfo.cpp
