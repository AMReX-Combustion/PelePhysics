#!/usr/bin/wish -f

set Title "[exec uname -n] xnodemon"
set SmallBitmap "gray50"
set NodeStat "/usr/local/nodemon/nodestat"

##############################################################################
# Process arguments
##############################################################################
# Global Variables
set ShowNode 1
set NumRows   10 
set NumCols   10
set prefix    a
set base      1
set SizeChanged 0
set BaseFont "fixed"
# Another good choice is Rom22, but that isn't available everywhere.
set NumColors [ expr { 1 << [ winfo depth . ] } ]

wm title  . "$Title"

##############################################################################
# Create the button bar  
# w is the name of the buttonbar window (e.g., .buttonframe)
##############################################################################
proc CreateButtonBar { w } {
global ShowNode
frame $w -relief raised -borderwidth 2 

button $w.quit    -text "Quit"      -borderwidth 2 -command quit
button $w.refresh -text "Refresh"   -borderwidth 2 -command "refresh .mainframe 1"
button $w.load -text "CPU Load"   -borderwidth 2 -command cpu_load
if { $ShowNode == 0 } { 
button $w.small   -text "Large" -command "large $w.small refresh"
} else { 
button $w.small   -text "Small"     -borderwidth 2 \
	-command "small $w.small refresh"
}
pack append $w $w.refresh  {left expand padx 5 pady 5} 
pack append $w $w.load  {left expand padx 5 pady 5} 
pack append $w $w.small    {left expand padx 5 pady 5} \
               $w.quit     {left expand padx 5 pady 5} 
}

##############################################################################
# Manage the label that shows the location of the mouse by tracking
# <Enter> events. 
# wn is node display window
# w is label display window
##############################################################################
proc CreateLabel { wn w nr nc } {
label $w    -relief flat -borderwidth 0
global base
for {set i 0} {$i < $nc} {incr i} {
	for {set j 0} {$j < $nr} {incr j} {
	    set node [ expr { $i * $nr + $j + $base } ]
	    bind $wn.c$i.r$j <Enter> "displaynodenum $w $node"
	}
    }
}

##############################################################################
# Manage the label that shows the update time
##############################################################################
proc CreateUpdate { w } {
label $w  -relief flat -borderwidth 0
}

##############################################################################
# quit exits by destroying the windows
##############################################################################
proc quit {} {
    exit
}

##############################################################################
# nop is a "no-operation" routine for turning off buttons
##############################################################################
proc nop {  } {}

proc display_details {} {
     nop
}

proc cpu_load {} {
    global ShowNode NumRows NumCols
    catch {destroy .load}
    toplevel .load
    wm title .load "[exec uname -n] CPU Load Average"
    wm iconname .load "CPU Load"
    frame .load.b -relief raised -borderwidth 2 
    frame .load.fr1 -borderwidth 2 
    CreateNodes     .load.fr1 $NumRows $NumCols $ShowNode \
	            "runxterm"
    CreateLabel  .load.fr1 .load.nodenum $NumRows $NumCols
    button .load.b.refresh -text "Refresh"   -borderwidth 2 -command "refresh .load.fr1 2"
    canvas .load.c -width 205 -height 25
    .load.c create oval 1 10 9 18 -fill white
    .load.c create text 28 15 -text "0-0.2"
    .load.c create oval 50 10 58 18 -fill yellow
    .load.c create text 82 15 -text "0.2-0.9"
    .load.c create oval 110 10 118 18 -fill orange
    .load.c create text 142 15 -text "0.9-1.5"
    .load.c create oval 167 10 175 18 -fill red
    .load.c create text 190 15 -text ">1.5"
    pack append .load .load.b  {top fillx} 
    pack append .load .load.fr1  {top expand} 
    pack append .load.b .load.b.refresh  {top fillx} 
    pack append .load.b .load.c  {frame center} 
    autorefresh 10 .load.fr1 2
}


##############################################################################
# Display the node number 
##############################################################################
proc displaynodenum {w n} {
$w configure -text "$n"
}

# Before calling processArgs, the value of NumColors should be set to 
proc processArgs { } {
global ShowNode NumRows NumCols argc argv SmallBitmap NumColors BaseFont
if "$argc > 0" {
    # process arguments
    for {set i 0} {$i < $argc} {incr i} {
        set arg [ lindex $argv $i ]
        case $arg in { 
	{\-small} {
	    set ShowNode 0
            }
	{\-layout} { 
	    incr i
	    set values [ lindex $argv $i ]
	    # find the x
	    set loc [ string first "x" $values ]
	    # if loc < 0, error          
	    set r   [ string range $values 0 [ expr { $loc - 1 } ] ]
	    set c   [ string range $values [ expr { $loc + 1 } ] end ]
	    set NumRows $r
	    set NumCols $c
	    }
	{\-title} {
	    incr i
	    set Title [ lindex $argv $i ]
	    wm title . "$Title"
	    }
	{\-bw} {
	    set NumColors 2
	    }
	{\-font} {
	    incr i
	    set BaseFont [ lindex $argv $i ]
	    }
	}
        }
    }
}

##############################################################################
# Reset all nodes to a base state
##############################################################################
proc resetNodes { w nr nc isbig } {
global SmallBitmap SizeChanged NumColors base
set BG steelblue
set TextFG white
if { $NumColors < 16} { set TextFG black } 
if { $NumColors < 16 } { set BG white }
    for {set i 0} {$i < $nc} {incr i} {
	for {set j 0} {$j < $nr} {incr j} {
	    set node [ expr { $i * $nr + $j + $base } ]
	    $w.c$i.r$j configure -background $BG
	    if {$SizeChanged} {
  	        if {$isbig} {
            $w.c$i.r$j configure -bitmap "" -fg $TextFG -text "($node)" \
			    -height 0 -width 0
	 	} else {
	            $w.c$i.r$j configure -bitmap $SmallBitmap \
			    -height 1 -width 5
 		    }
		}
  	    if {$isbig} {
	        $w.c$i.r$j configure -fg $TextFG -text "NA"
#	        $w.c$i.r$j configure -fg $TextFG -text "($node)"
	 	}
#	    $w.c$i.r$j configure -command "nop"
	}
    }
set SizeChanged 0
}

############################################################################
# Mark all nodes as down and clear the button
# bitmap WAS gray50
############################################################################
proc allDown { w nr nc isbig } {
global SmallBitmap SizeChanged NumColors base

    for {set i 0} {$i < $nc} {incr i} {
	for {set j 0} {$j < $nr} {incr j} {
	    set node [ expr { $i * $nr + $j + $base } ]
	    if { $NumColors < 16 } { 
	        $w.c$i.r$j configure -text "DOWN"
	    } else {
               $w.c$i.r$j configure -command "nop"
            }
	    if {$SizeChanged} {
  	        if {$isbig} {
	            $w.c$i.r$j configure -bitmap "" -text "NA" \
#	            $w.c$i.r$j configure -bitmap "" -text "($node)" \
			    -height 0 -width 0
	 	} else {
	            $w.c$i.r$j configure -bitmap $SmallBitmap \
			    -height 1 -width 5 }
	        }
  	    if {$isbig} {
	        $w.c$i.r$j configure -text "NA"
#	        $w.c$i.r$j configure -text "($node)" }
            }
	}
set SizeChanged 0
}


############################################################################
# Change the cursor to watch
############################################################################
proc SetWatch { w } {
$w configure -cursor watch
update
}

############################################################################
# Change the cursor to original arrow
############################################################################
proc ClearWatch { w } {
$w configure -cursor top_left_arrow
update
}

############################################################################
# Automatically run refresh after n seconds
############################################################################
proc autorefresh { n w mode } {
    catch {refresh $w $mode}
    after [ expr { $n * 1000 } ] "autorefresh $n $w $mode"
}

############################################################################
# Switch the display to the "small" version
############################################################################
proc small { w refresh } {
global ShowNode NumCols NumRows SizeChanged
    $w configure -command "large $w $refresh "
    set ShowNode 0
    set SizeChanged 1
    $w configure -text "Large"
    $refresh .mainframe 1
}

############################################################################
# Switch the display to the "large" version
############################################################################
proc large { w refresh } {
global ShowNode NumCols NumRows SizeChanged
    $w configure -command "small $w $refresh "
    set ShowNode 1
    set SizeChanged 1
    $w configure -text "Small"
    $refresh .mainframe 1
}

############################################################################
# Kill the given pid on the given node
############################################################################
proc dokill {node pid} {
global NodeNameFcn 
set nodename [ $NodeNameFcn $node ]
    catch { exec rsh $nodename -n kill -9 $pid }
}
  
##############################################################################
# Run an xterm on the numbered node
##############################################################################
proc runxterm {node} {
global NodeNameFcn 
set nodename [ $NodeNameFcn $node ]
catch { exec xterm -title $nodename -e rsh $nodename & }
}

##############################################################################
# Put up a message for a window (w is name of the window to be created)
# wintitle is the name of the window
# text is the contents
##############################################################################
proc msgtext {w wintitle text} {
    catch {destroy $w}
    toplevel $w
    wm title $w "$wintitle"
    wm iconname $w "$wintitle"

    frame $w.frame1 -relief raised -bd 2
    button $w.ok -text "OK" -command "destroy $w"
    pack append $w $w.frame1 {top fill} \
	    $w.ok {bottom pady 10 frame center fillx}
    message $w.frame1.m -width 560 -text "$text"
    #    -font *-Times-Medium-R-Normal-*-180-* 
    pack append $w.frame1 $w.frame1.m {frame center}
    }

##############################################################################
# The default node name function
##############################################################################
proc DefaultName { node } {
global prefix base
set node [ expr { $node - 1 } ]
if {$node < 10} { return ${prefix}00$node }
if {$node < 100} { return ${prefix}0$node }
return ${prefix}$node
}

set NodeNameFcn "DefaultName"

##############################################################################
# Create and manipulate a list of items.  
# This is more than a listbox because it provides for a scrollbar, a 
# fixed size, and various markers.  Each entry is a row
##############################################################################
proc CreateList { w } {
global NumColors
frame $w
if { $NumColors < 16 } { 
scrollbar $w.scroll -command "$w.list yview" \
	   -bg white  -fg black -activeforeground black
} else {
scrollbar $w.scroll -command "$w.list yview" \
	   -bg steelblue  -fg steelblue2 -activeforeground steelblue1 
}
listbox $w.list -relief raised -yscroll "$w.scroll set"
pack append $w $w.list { left } $w.scroll { left filly }
#bind $w.list <1> "Listgetselected $w.list"
}

##############################################################################
# Return a list containing the indices of the seleted items
##############################################################################
#proc Listgetselected { w } {
#puts stdout [ $w curselection ]
#}

##############################################################################
# Empty the list of all items
##############################################################################
proc ClearList { w } {
$w.list delete 0 end
}

##############################################################################
# Insert "Text" in the ith row.
# indicate the color 
##############################################################################
proc InsertInList { w i text color } {
$w.list insert $i "$text"
}

##############################################################################
# Create a mouse binding label.  This is actually three labels; 
# you must also bind enter/leave events to select the appropriate text
##############################################################################
proc CreateMouseCmds { w } {
frame $w
label $w.left -relief flat -borderwidth 0 -text ""
label $w.center -relief flat -borderwidth 0 -text ""
label $w.right -relief flat -borderwidth 0 -text ""
pack append $w $w.left { left } $w.center { left } $w.right { left }
}

##############################################################################
# Set the names of the mouse bindings
##############################################################################
proc SetMouseCmds { w left } {
$w.left configure -text "$left"
}

##############################################################################
# Set the names of the mouse bindings for a window (wguard)
##############################################################################
proc SetMouseEL { w wguard left } {
bind $wguard <Enter> "SetMouseCmds $w \"$left\""
bind $wguard <Leave> "SetMouseCmds $w \" \" "
}

##############################################################################
# Setup... 
# Creates an array of buttons, with action b bound to the buttons
# Size is nr rows by nc columns
# Window name is w; the data is arranged by columns into w.c$i and elements of
# those columns are w.c$i.r$j
##############################################################################
proc CreateNodes { w nr nc isbig b } {
global SmallBitmap NumColors base
set TextFG white
if { $NumColors < 16} { set TextFG black } 
for {set i 0} {$i < $nc} {incr i} {
	frame $w.c$i
	for {set j 0} {$j < $nr} {incr j} {
	    set node [ expr { $i * $nr + $j + $base + 1 } ]
	    button $w.c$i.r$j -borderwidth 2 -command "$b $node"
	    bind $w.c$i.r$j <1> "$b $node"
  	    if {$isbig} {
	        $w.c$i.r$j configure -text "$node" -fg $TextFG
	 	} else {
	        $w.c$i.r$j configure -bitmap $SmallBitmap -height 1 -width 5
 		}
	    pack append $w.c$i $w.c$i.r$j {top fillx}
	}
    pack append $w $w.c$i {left filly}
    }
}

##############################################################################
# Convert node name into a row and column.
##############################################################################
proc ConvertToRowCol { nodename nr nc } {
set part [ string range $nodename 0 5 ]
if {$part == "spnode" && [ string length $nodename ] == 9} { 
    set node [ string range $nodename 6 end ]
    # Check that this is a valid node
    # This tries to catch mangled stdin lines 
    if { [ string match "\[0-9\]\[0-9\]\[0-9\]" $node ] == 1 }  {
        while { [ string range $node 0 0 ] == "0" } { 
            set node [ string range $node 1 end ] 
            }
        set c [ expr {($node - $base) / $NumRows} ]
        set r [ expr {$node - $base - $r * $NumRows} ]
        if { $c < $nc && $r < $nr } { } 
        }
    }
return { $r $c }
}

##############################################################################
# GetColor gets a color name and handles the case of black and white
##############################################################################
proc GetColor { name isfor } {
global NumColors 
if { [ winfo depth . ] < 8 } {
    if { $isfor } { return "black" } else { return "white" }
    } else { return $name }
}

##############################################################################
# IsColor returns whether the display is color or not
##############################################################################
proc IsColor {} {
if { [ winfo depth . ] < 8 } { return 0 } else { return 1 }
}


##############################################################################
# Create a dialog for the input of a single string and return that string
##############################################################################
# Given a window name w, and variabls names, values, and actual var names,
# get the new values from the user.  The value is placed in the global
# SingleDialogValue
set SingleDialogValue " "

proc SingleDialogSet { w tailroutine } {
global SingleDialogValue
set SingleDialogValue [$w.dialog.entry get]
$tailroutine $SingleDialogValue
destroy   $w
}

proc SingleDialog { w wtitle label defvalue tailroutine } {
global SingleDialogValue

toplevel $w
bind $w <Return> "SingleDialogSet $w $tailroutine"
wm title $w "$wtitle"
frame $w.dialog
pack append $w $w.dialog { top pady 4 frame e }
label $w.dialog.label -text "$label" -anchor e
entry $w.dialog.entry -width 30 -relief sunken
$w.dialog.entry insert end "$defvalue"
bind $w.dialog.entry <Return> "SingleDialogSet $w $tailroutine"
bind $w.dialog.label <Return> "SingleDialogSet $w $tailroutine"
pack append $w.dialog $w.dialog.entry right $w.dialog.label right

button $w.ok -text OK -command "SingleDialogSet $w $tailroutine"
button $w.cancel -text Cancel -command "destroy $w"
pack append $w $w.ok { bottom left fillx expand } \
            $w.cancel { bottom right fillx expand }
focus $w.dialog.entry
}

processArgs

proc refresh { w mode } {
global NodeStat ShowNode NumCols NumRows LoadScript TotalLoad NumColors prefix base
SetWatch $w
set curtime [ exec  date "+%a %H:%M"]
update
resetNodes $w $NumRows $NumCols $ShowNode
allDown $w $NumRows $NumCols $ShowNode
set tmp_file [open "$NodeStat" r]
set NumDown [ expr { $NumRows * $NumCols } ]
set TotalLoad 0
set MaxLoad   0
set status 0
while {1} {
    gets $tmp_file string
    if {$string == ""} { break }
    scan $string "%s %f" host load
    #set node [ Tcl_GetInt [ string range $host 1 end ] ]
    set strlen [string length $prefix]
    set hnum [ string range $host $strlen end ]
    scan $hnum "%d" node
    set NumDown [ expr { $NumDown - 1 } ]
    set c [ expr {($node - $base) / $NumRows} ]
    set r [ expr {$node - $base - $c * $NumRows} ]
    set color "blue" 
    set fcolor "white"
    if {$load == -1} {
      set color "black"
      set fcolor "white"
    } else {
      if {$mode == 2} {
         set fcolor black
         if {$load < 0.2} {
            set color white
         } elseif {$load < 0.9} {
            set color yellow
         } elseif {$load < 1.5} {
            set color orange
         } else {
            set color red
         }
      } else {
         set color "green"
         set fcolor "black"
      }
    } 
    $w.c$c.r$r configure -background $color -fg $fcolor
    if {$ShowNode} {
      $w.c$c.r$r configure -text $host
    }
  }
close $tmp_file
.updatetime configure -text $curtime
ClearWatch $w
}

frame .mainframe 

CreateButtonBar .buttonframe

CreateNodes     .mainframe $NumRows $NumCols $ShowNode \
	        "runxterm"
frame           .m
CreateLabel     .mainframe .m.nodenum $NumRows $NumCols
CreateUpdate    .updatetime
CreateMouseCmds .m.mouse
#SetMouseEL .m.mouse .mainframe "xterm" "load" "top"
#SetMouseEL .m.mouse .mainframe "xterm" "load" "top"

pack append .m .m.nodenum { left } .m.mouse { right } 
pack append . .buttonframe {top fillx} \
              .mainframe {top fillx} \
	      .updatetime  {bottom fillx} \
	      .m { bottom fillx }

autorefresh 10 .mainframe 1
