#ifndef MECHANISM_H
#define MECHANISM_H

#include <AMReX_Gpu.H>
#include <AMReX_REAL.H>

/* Elements
0  H
1  O
2  C
3  N
*/

// Species
#define H2_ID 0
#define H_ID 1
#define O_ID 2
#define O2_ID 3
#define OH_ID 4
#define H2O_ID 5
#define HO2_ID 6
#define CH3_ID 7
#define CH4_ID 8
#define CO_ID 9
#define CO2_ID 10
#define CH2O_ID 11
#define N2_ID 12

#define NUM_ELEMENTS 4
#define NUM_SPECIES 13
#define NUM_IONS 0
#define NUM_REACTIONS 73

#define NUM_FIT 4

//  ALWAYS on CPU stuff -- can have different def depending on if we are CPU or
//  GPU based. Defined in mechanism.cpp
void atomicWeight(amrex::Real* awt);
//  MISC
void CKAWT(amrex::Real* awt);
void CKNCF(int* ncf);
void CKSYME_STR(amrex::Vector<std::string>& ename);
void CKSYMS_STR(amrex::Vector<std::string>& kname);
void GET_RMAP(int* _rmap);
void CKINU(const int i, int& nspec, int* ki, int* nu);
void CKKFKR(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real* x,
  amrex::Real* q_f,
  amrex::Real* q_r);
void progressRateFR(
  amrex::Real* q_f, amrex::Real* q_r, amrex::Real* sc, amrex::Real T);
//  SPARSE INFORMATION
void SPARSITY_INFO(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST_SIMPLIFIED(int* nJdata, const int* consP);
void
SPARSITY_PREPROC_CSC(int* rowVals, int* colPtrs, const int* consP, int NCELLS);
void SPARSITY_PREPROC_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSC(
  int* rowVals, int* colPtrs, int* indx, const int* consP);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSR(
  int* colVals, int* rowPtr, const int* consP, int base);

// A few mechanism parameters
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKINDX(int& mm, int& kk, int& ii, int& nfit)
{
  mm = 4;
  kk = 13;
  ii = 73;
  nfit = -1; // Why do you need this anyway ?
}

//  inverse molecular weights
AMREX_GPU_CONSTANT const amrex::Real global_imw[13] = {
  0.4960317460317460, // H2
  0.9920634920634921, // H
  0.0625039064941559, // O
  0.0312519532470779, // O2
  0.0587993179279120, // OH
  0.0555092978073827, // H2O
  0.0302975216627280, // HO2
  0.0665114732291320, // CH3
  0.0623324814560868, // CH4
  0.0357015351660121, // CO
  0.0227226249176305, // CO2
  0.0333044694598015, // CH2O
  0.0356964374955379, // N2
};
const amrex::Real h_global_imw[13] = {
  0.4960317460317460, // H2
  0.9920634920634921, // H
  0.0625039064941559, // O
  0.0312519532470779, // O2
  0.0587993179279120, // OH
  0.0555092978073827, // H2O
  0.0302975216627280, // HO2
  0.0665114732291320, // CH3
  0.0623324814560868, // CH4
  0.0357015351660121, // CO
  0.0227226249176305, // CO2
  0.0333044694598015, // CH2O
  0.0356964374955379, // N2
};

//  molecular weights
AMREX_GPU_CONSTANT const amrex::Real global_mw[13] = {
  2.016000,  // H2
  1.008000,  // H
  15.999000, // O
  31.998000, // O2
  17.007000, // OH
  18.015000, // H2O
  33.006000, // HO2
  15.035000, // CH3
  16.043000, // CH4
  28.010000, // CO
  44.009000, // CO2
  30.026000, // CH2O
  28.014000, // N2
};
const amrex::Real h_global_mw[13] = {
  2.016000,  // H2
  1.008000,  // H
  15.999000, // O
  31.998000, // O2
  17.007000, // OH
  18.015000, // H2O
  33.006000, // HO2
  15.035000, // CH3
  16.043000, // CH4
  28.010000, // CO
  44.009000, // CO2
  30.026000, // CH2O
  28.014000, // N2
};

//  inverse molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_imw(amrex::Real* imw_new)
{
  imw_new[0] = 0.4960317460317460;  // H2
  imw_new[1] = 0.9920634920634921;  // H
  imw_new[2] = 0.0625039064941559;  // O
  imw_new[3] = 0.0312519532470779;  // O2
  imw_new[4] = 0.0587993179279120;  // OH
  imw_new[5] = 0.0555092978073827;  // H2O
  imw_new[6] = 0.0302975216627280;  // HO2
  imw_new[7] = 0.0665114732291320;  // CH3
  imw_new[8] = 0.0623324814560868;  // CH4
  imw_new[9] = 0.0357015351660121;  // CO
  imw_new[10] = 0.0227226249176305; // CO2
  imw_new[11] = 0.0333044694598015; // CH2O
  imw_new[12] = 0.0356964374955379; // N2
}

//  inverse molecular weight
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
imw(const int n)
{
#if AMREX_DEVICE_COMPILE
  return global_imw[n];
#else
  return h_global_imw[n];
#endif
}
//  molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_mw(amrex::Real* mw_new)
{
  mw_new[0] = 2.016000;   // H2
  mw_new[1] = 1.008000;   // H
  mw_new[2] = 15.999000;  // O
  mw_new[3] = 31.998000;  // O2
  mw_new[4] = 17.007000;  // OH
  mw_new[5] = 18.015000;  // H2O
  mw_new[6] = 33.006000;  // HO2
  mw_new[7] = 15.035000;  // CH3
  mw_new[8] = 16.043000;  // CH4
  mw_new[9] = 28.010000;  // CO
  mw_new[10] = 44.009000; // CO2
  mw_new[11] = 30.026000; // CH2O
  mw_new[12] = 28.014000; // N2
}

//  molecular weight
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
mw(const int n)
{
#if AMREX_DEVICE_COMPILE
  return global_mw[n];
#else
  return h_global_mw[n];
#endif
}

//  Returns R, Rc, Patm
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRP(amrex::Real& ru, amrex::Real& ruc, amrex::Real& pa)
{
  ru = 8.31446261815324e+07;
  ruc = 1.98721558317399615845;
  pa = 1.01325e+06;
}

// compute Cv/R at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cv_R(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +1.34433112e+00 + 7.98052075e-03 * tc[1] -
                 1.94781510e-05 * tc[2] + 2.01572094e-08 * tc[3] -
                 7.37611761e-12 * tc[4];
    // species 1: H
    species[1] = +1.50000000e+00 + 7.05332819e-13 * tc[1] -
                 1.99591964e-15 * tc[2] + 2.30081632e-18 * tc[3] -
                 9.27732332e-22 * tc[4];
    // species 2: O
    species[2] = +2.16826710e+00 - 3.27931884e-03 * tc[1] +
                 6.64306396e-06 * tc[2] - 6.12806624e-09 * tc[3] +
                 2.11265971e-12 * tc[4];
    // species 3: O2
    species[3] = +2.78245636e+00 - 2.99673416e-03 * tc[1] +
                 9.84730201e-06 * tc[2] - 9.68129509e-09 * tc[3] +
                 3.24372837e-12 * tc[4];
    // species 4: OH
    species[4] = +2.99201543e+00 - 2.40131752e-03 * tc[1] +
                 4.61793841e-06 * tc[2] - 3.88113333e-09 * tc[3] +
                 1.36411470e-12 * tc[4];
    // species 5: H2O
    species[5] = +3.19864056e+00 - 2.03643410e-03 * tc[1] +
                 6.52040211e-06 * tc[2] - 5.48797062e-09 * tc[3] +
                 1.77197817e-12 * tc[4];
    // species 6: HO2
    species[6] = +3.30179801e+00 - 4.74912051e-03 * tc[1] +
                 2.11582891e-05 * tc[2] - 2.42763894e-08 * tc[3] +
                 9.29225124e-12 * tc[4];
    // species 7: CH3
    species[7] = +2.67359040e+00 + 2.01095175e-03 * tc[1] +
                 5.73021856e-06 * tc[2] - 6.87117425e-09 * tc[3] +
                 2.54385734e-12 * tc[4];
    // species 8: CH4
    species[8] = +4.14987613e+00 - 1.36709788e-02 * tc[1] +
                 4.91800599e-05 * tc[2] - 4.84743026e-08 * tc[3] +
                 1.66693956e-11 * tc[4];
    // species 9: CO
    species[9] = +2.57953347e+00 - 6.10353680e-04 * tc[1] +
                 1.01681433e-06 * tc[2] + 9.07005884e-10 * tc[3] -
                 9.04424499e-13 * tc[4];
    // species 10: CO2
    species[10] = +1.35677352e+00 + 8.98459677e-03 * tc[1] -
                  7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                  1.43699548e-13 * tc[4];
    // species 11: CH2O
    species[11] = +3.79372315e+00 - 9.90833369e-03 * tc[1] +
                  3.73220008e-05 * tc[2] - 3.79285261e-08 * tc[3] +
                  1.31772652e-11 * tc[4];
    // species 12: N2
    species[12] = +2.29867700e+00 + 1.40824040e-03 * tc[1] -
                  3.96322200e-06 * tc[2] + 5.64151500e-09 * tc[3] -
                  2.44485400e-12 * tc[4];
  } else {
    // species 0: H2
    species[0] = +2.33727920e+00 - 4.94024731e-05 * tc[1] +
                 4.99456778e-07 * tc[2] - 1.79566394e-10 * tc[3] +
                 2.00255376e-14 * tc[4];
    // species 1: H
    species[1] = +1.50000001e+00 - 2.30842973e-11 * tc[1] +
                 1.61561948e-14 * tc[2] - 4.73515235e-18 * tc[3] +
                 4.98197357e-22 * tc[4];
    // species 2: O
    species[2] = +1.56942078e+00 - 8.59741137e-05 * tc[1] +
                 4.19484589e-08 * tc[2] - 1.00177799e-11 * tc[3] +
                 1.22833691e-15 * tc[4];
    // species 3: O2
    species[3] = +2.28253784e+00 + 1.48308754e-03 * tc[1] -
                 7.57966669e-07 * tc[2] + 2.09470555e-10 * tc[3] -
                 2.16717794e-14 * tc[4];
    // species 4: OH
    species[4] = +2.09288767e+00 + 5.48429716e-04 * tc[1] +
                 1.26505228e-07 * tc[2] - 8.79461556e-11 * tc[3] +
                 1.17412376e-14 * tc[4];
    // species 5: H2O
    species[5] = +2.03399249e+00 + 2.17691804e-03 * tc[1] -
                 1.64072518e-07 * tc[2] - 9.70419870e-11 * tc[3] +
                 1.68200992e-14 * tc[4];
    // species 6: HO2
    species[6] = +3.01721090e+00 + 2.23982013e-03 * tc[1] -
                 6.33658150e-07 * tc[2] + 1.14246370e-10 * tc[3] -
                 1.07908535e-14 * tc[4];
    // species 7: CH3
    species[7] = +1.28571772e+00 + 7.23990037e-03 * tc[1] -
                 2.98714348e-06 * tc[2] + 5.95684644e-10 * tc[3] -
                 4.67154394e-14 * tc[4];
    // species 8: CH4
    species[8] = -9.25148505e-01 + 1.33909467e-02 * tc[1] -
                 5.73285809e-06 * tc[2] + 1.22292535e-09 * tc[3] -
                 1.01815230e-13 * tc[4];
    // species 9: CO
    species[9] = +1.71518561e+00 + 2.06252743e-03 * tc[1] -
                 9.98825771e-07 * tc[2] + 2.30053008e-10 * tc[3] -
                 2.03647716e-14 * tc[4];
    // species 10: CO2
    species[10] = +2.85746029e+00 + 4.41437026e-03 * tc[1] -
                  2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                  4.72084164e-14 * tc[4];
    // species 11: CH2O
    species[11] = +7.60690080e-01 + 9.20000082e-03 * tc[1] -
                  4.42258813e-06 * tc[2] + 1.00641212e-09 * tc[3] -
                  8.83855640e-14 * tc[4];
    // species 12: N2
    species[12] = +1.92664000e+00 + 1.48797680e-03 * tc[1] -
                  5.68476000e-07 * tc[2] + 1.00970380e-10 * tc[3] -
                  6.75335100e-15 * tc[4];
  }
}

// compute Cp/R at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cp_R(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +2.34433112e+00 + 7.98052075e-03 * tc[1] -
                 1.94781510e-05 * tc[2] + 2.01572094e-08 * tc[3] -
                 7.37611761e-12 * tc[4];
    // species 1: H
    species[1] = +2.50000000e+00 + 7.05332819e-13 * tc[1] -
                 1.99591964e-15 * tc[2] + 2.30081632e-18 * tc[3] -
                 9.27732332e-22 * tc[4];
    // species 2: O
    species[2] = +3.16826710e+00 - 3.27931884e-03 * tc[1] +
                 6.64306396e-06 * tc[2] - 6.12806624e-09 * tc[3] +
                 2.11265971e-12 * tc[4];
    // species 3: O2
    species[3] = +3.78245636e+00 - 2.99673416e-03 * tc[1] +
                 9.84730201e-06 * tc[2] - 9.68129509e-09 * tc[3] +
                 3.24372837e-12 * tc[4];
    // species 4: OH
    species[4] = +3.99201543e+00 - 2.40131752e-03 * tc[1] +
                 4.61793841e-06 * tc[2] - 3.88113333e-09 * tc[3] +
                 1.36411470e-12 * tc[4];
    // species 5: H2O
    species[5] = +4.19864056e+00 - 2.03643410e-03 * tc[1] +
                 6.52040211e-06 * tc[2] - 5.48797062e-09 * tc[3] +
                 1.77197817e-12 * tc[4];
    // species 6: HO2
    species[6] = +4.30179801e+00 - 4.74912051e-03 * tc[1] +
                 2.11582891e-05 * tc[2] - 2.42763894e-08 * tc[3] +
                 9.29225124e-12 * tc[4];
    // species 7: CH3
    species[7] = +3.67359040e+00 + 2.01095175e-03 * tc[1] +
                 5.73021856e-06 * tc[2] - 6.87117425e-09 * tc[3] +
                 2.54385734e-12 * tc[4];
    // species 8: CH4
    species[8] = +5.14987613e+00 - 1.36709788e-02 * tc[1] +
                 4.91800599e-05 * tc[2] - 4.84743026e-08 * tc[3] +
                 1.66693956e-11 * tc[4];
    // species 9: CO
    species[9] = +3.57953347e+00 - 6.10353680e-04 * tc[1] +
                 1.01681433e-06 * tc[2] + 9.07005884e-10 * tc[3] -
                 9.04424499e-13 * tc[4];
    // species 10: CO2
    species[10] = +2.35677352e+00 + 8.98459677e-03 * tc[1] -
                  7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                  1.43699548e-13 * tc[4];
    // species 11: CH2O
    species[11] = +4.79372315e+00 - 9.90833369e-03 * tc[1] +
                  3.73220008e-05 * tc[2] - 3.79285261e-08 * tc[3] +
                  1.31772652e-11 * tc[4];
    // species 12: N2
    species[12] = +3.29867700e+00 + 1.40824040e-03 * tc[1] -
                  3.96322200e-06 * tc[2] + 5.64151500e-09 * tc[3] -
                  2.44485400e-12 * tc[4];
  } else {
    // species 0: H2
    species[0] = +3.33727920e+00 - 4.94024731e-05 * tc[1] +
                 4.99456778e-07 * tc[2] - 1.79566394e-10 * tc[3] +
                 2.00255376e-14 * tc[4];
    // species 1: H
    species[1] = +2.50000001e+00 - 2.30842973e-11 * tc[1] +
                 1.61561948e-14 * tc[2] - 4.73515235e-18 * tc[3] +
                 4.98197357e-22 * tc[4];
    // species 2: O
    species[2] = +2.56942078e+00 - 8.59741137e-05 * tc[1] +
                 4.19484589e-08 * tc[2] - 1.00177799e-11 * tc[3] +
                 1.22833691e-15 * tc[4];
    // species 3: O2
    species[3] = +3.28253784e+00 + 1.48308754e-03 * tc[1] -
                 7.57966669e-07 * tc[2] + 2.09470555e-10 * tc[3] -
                 2.16717794e-14 * tc[4];
    // species 4: OH
    species[4] = +3.09288767e+00 + 5.48429716e-04 * tc[1] +
                 1.26505228e-07 * tc[2] - 8.79461556e-11 * tc[3] +
                 1.17412376e-14 * tc[4];
    // species 5: H2O
    species[5] = +3.03399249e+00 + 2.17691804e-03 * tc[1] -
                 1.64072518e-07 * tc[2] - 9.70419870e-11 * tc[3] +
                 1.68200992e-14 * tc[4];
    // species 6: HO2
    species[6] = +4.01721090e+00 + 2.23982013e-03 * tc[1] -
                 6.33658150e-07 * tc[2] + 1.14246370e-10 * tc[3] -
                 1.07908535e-14 * tc[4];
    // species 7: CH3
    species[7] = +2.28571772e+00 + 7.23990037e-03 * tc[1] -
                 2.98714348e-06 * tc[2] + 5.95684644e-10 * tc[3] -
                 4.67154394e-14 * tc[4];
    // species 8: CH4
    species[8] = +7.48514950e-02 + 1.33909467e-02 * tc[1] -
                 5.73285809e-06 * tc[2] + 1.22292535e-09 * tc[3] -
                 1.01815230e-13 * tc[4];
    // species 9: CO
    species[9] = +2.71518561e+00 + 2.06252743e-03 * tc[1] -
                 9.98825771e-07 * tc[2] + 2.30053008e-10 * tc[3] -
                 2.03647716e-14 * tc[4];
    // species 10: CO2
    species[10] = +3.85746029e+00 + 4.41437026e-03 * tc[1] -
                  2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                  4.72084164e-14 * tc[4];
    // species 11: CH2O
    species[11] = +1.76069008e+00 + 9.20000082e-03 * tc[1] -
                  4.42258813e-06 * tc[2] + 1.00641212e-09 * tc[3] -
                  8.83855640e-14 * tc[4];
    // species 12: N2
    species[12] = +2.92664000e+00 + 1.48797680e-03 * tc[1] -
                  5.68476000e-07 * tc[2] + 1.00970380e-10 * tc[3] -
                  6.75335100e-15 * tc[4];
  }
}

// compute the g/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
gibbs(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = -9.179351730000000e+02 * invT + 1.661320882000000e+00 -
                 2.344331120000000e+00 * tc[0] - 3.990260375000000e-03 * tc[1] +
                 3.246358500000000e-06 * tc[2] - 1.679767450000000e-09 * tc[3] +
                 3.688058805000000e-13 * tc[4];
    // species 1: H
    species[1] = +2.547365990000000e+04 * invT + 2.946682853000000e+00 -
                 2.500000000000000e+00 * tc[0] - 3.526664095000000e-13 * tc[1] +
                 3.326532733333333e-16 * tc[2] - 1.917346933333333e-19 * tc[3] +
                 4.638661660000000e-23 * tc[4];
    // species 2: O
    species[2] = +2.912225920000000e+04 * invT + 1.116333640000000e+00 -
                 3.168267100000000e+00 * tc[0] + 1.639659420000000e-03 * tc[1] -
                 1.107177326666667e-06 * tc[2] + 5.106721866666666e-10 * tc[3] -
                 1.056329855000000e-13 * tc[4];
    // species 3: O2
    species[3] = -1.063943560000000e+03 * invT + 1.247806300000001e-01 -
                 3.782456360000000e+00 * tc[0] + 1.498367080000000e-03 * tc[1] -
                 1.641217001666667e-06 * tc[2] + 8.067745908333334e-10 * tc[3] -
                 1.621864185000000e-13 * tc[4];
    // species 4: OH
    species[4] = +3.615080560000000e+03 * invT + 4.095940888000000e+00 -
                 3.992015430000000e+00 * tc[0] + 1.200658760000000e-03 * tc[1] -
                 7.696564016666666e-07 * tc[2] + 3.234277775000000e-10 * tc[3] -
                 6.820573500000000e-14 * tc[4];
    // species 5: H2O
    species[5] = -3.029372670000000e+04 * invT + 5.047672768000000e+00 -
                 4.198640560000000e+00 * tc[0] + 1.018217050000000e-03 * tc[1] -
                 1.086733685000000e-06 * tc[2] + 4.573308850000000e-10 * tc[3] -
                 8.859890850000000e-14 * tc[4];
    // species 6: HO2
    species[6] = +2.948080400000000e+02 * invT + 5.851355599999999e-01 -
                 4.301798010000000e+00 * tc[0] + 2.374560255000000e-03 * tc[1] -
                 3.526381516666666e-06 * tc[2] + 2.023032450000000e-09 * tc[3] -
                 4.646125620000001e-13 * tc[4];
    // species 7: CH3
    species[7] = +1.644499880000000e+04 * invT + 2.069026070000000e+00 -
                 3.673590400000000e+00 * tc[0] - 1.005475875000000e-03 * tc[1] -
                 9.550364266666668e-07 * tc[2] + 5.725978541666666e-10 * tc[3] -
                 1.271928670000000e-13 * tc[4];
    // species 8: CH4
    species[8] = -1.024664760000000e+04 * invT + 9.791179889999999e+00 -
                 5.149876130000000e+00 * tc[0] + 6.835489400000000e-03 * tc[1] -
                 8.196676650000000e-06 * tc[2] + 4.039525216666667e-09 * tc[3] -
                 8.334697800000000e-13 * tc[4];
    // species 9: CO
    species[9] = -1.434408600000000e+04 * invT + 7.112418999999992e-02 -
                 3.579533470000000e+00 * tc[0] + 3.051768400000000e-04 * tc[1] -
                 1.694690550000000e-07 * tc[2] - 7.558382366666667e-11 * tc[3] +
                 4.522122495000000e-14 * tc[4];
    // species 10: CO2
    species[10] = -4.837196970000000e+04 * invT - 7.544278700000000e+00 -
                  2.356773520000000e+00 * tc[0] -
                  4.492298385000000e-03 * tc[1] +
                  1.187260448333333e-06 * tc[2] -
                  2.049325183333333e-10 * tc[3] + 7.184977399999999e-15 * tc[4];
    // species 11: CH2O
    species[11] = -1.430895670000000e+04 * invT + 4.190910250000000e+00 -
                  4.793723150000000e+00 * tc[0] +
                  4.954166845000000e-03 * tc[1] -
                  6.220333466666666e-06 * tc[2] +
                  3.160710508333333e-09 * tc[3] - 6.588632600000000e-13 * tc[4];
    // species 12: N2
    species[12] = -1.020899900000000e+03 * invT - 6.516950000000001e-01 -
                  3.298677000000000e+00 * tc[0] -
                  7.041202000000000e-04 * tc[1] +
                  6.605369999999999e-07 * tc[2] -
                  4.701262500000001e-10 * tc[3] + 1.222427000000000e-13 * tc[4];
  } else {
    // species 0: H2
    species[0] = -9.501589220000000e+02 * invT + 6.542302510000000e+00 -
                 3.337279200000000e+00 * tc[0] + 2.470123655000000e-05 * tc[1] -
                 8.324279633333333e-08 * tc[2] + 1.496386616666667e-11 * tc[3] -
                 1.001276880000000e-15 * tc[4];
    // species 1: H
    species[1] = +2.547365990000000e+04 * invT + 2.946682924000000e+00 -
                 2.500000010000000e+00 * tc[0] + 1.154214865000000e-11 * tc[1] -
                 2.692699133333334e-15 * tc[2] + 3.945960291666667e-19 * tc[3] -
                 2.490986785000000e-23 * tc[4];
    // species 2: O
    species[2] = +2.921757910000000e+04 * invT - 2.214917859999999e+00 -
                 2.569420780000000e+00 * tc[0] + 4.298705685000000e-05 * tc[1] -
                 6.991409816666667e-09 * tc[2] + 8.348149916666666e-13 * tc[3] -
                 6.141684549999999e-17 * tc[4];
    // species 3: O2
    species[3] = -1.088457720000000e+03 * invT - 2.170693450000000e+00 -
                 3.282537840000000e+00 * tc[0] - 7.415437700000000e-04 * tc[1] +
                 1.263277781666667e-07 * tc[2] - 1.745587958333333e-11 * tc[3] +
                 1.083588970000000e-15 * tc[4];
    // species 4: OH
    species[4] = +3.858657000000000e+03 * invT - 1.383808430000000e+00 -
                 3.092887670000000e+00 * tc[0] - 2.742148580000000e-04 * tc[1] -
                 2.108420466666667e-08 * tc[2] + 7.328846300000000e-12 * tc[3] -
                 5.870618800000000e-16 * tc[4];
    // species 5: H2O
    species[5] = -3.000429710000000e+04 * invT - 1.932777610000000e+00 -
                 3.033992490000000e+00 * tc[0] - 1.088459020000000e-03 * tc[1] +
                 2.734541966666666e-08 * tc[2] + 8.086832250000000e-12 * tc[3] -
                 8.410049600000000e-16 * tc[4];
    // species 6: HO2
    species[6] = +1.118567130000000e+02 * invT + 2.321087500000001e-01 -
                 4.017210900000000e+00 * tc[0] - 1.119910065000000e-03 * tc[1] +
                 1.056096916666667e-07 * tc[2] - 9.520530833333334e-12 * tc[3] +
                 5.395426750000000e-16 * tc[4];
    // species 7: CH3
    species[7] = +1.677558430000000e+04 * invT - 6.194354070000000e+00 -
                 2.285717720000000e+00 * tc[0] - 3.619950185000000e-03 * tc[1] +
                 4.978572466666667e-07 * tc[2] - 4.964038700000000e-11 * tc[3] +
                 2.335771970000000e-15 * tc[4];
    // species 8: CH4
    species[8] = -9.468344590000001e+03 * invT - 1.836246650500000e+01 -
                 7.485149500000000e-02 * tc[0] - 6.695473350000000e-03 * tc[1] +
                 9.554763483333333e-07 * tc[2] - 1.019104458333333e-10 * tc[3] +
                 5.090761500000000e-15 * tc[4];
    // species 9: CO
    species[9] = -1.415187240000000e+04 * invT - 5.103502110000000e+00 -
                 2.715185610000000e+00 * tc[0] - 1.031263715000000e-03 * tc[1] +
                 1.664709618333334e-07 * tc[2] - 1.917108400000000e-11 * tc[3] +
                 1.018238580000000e-15 * tc[4];
    // species 10: CO2
    species[10] = -4.875916600000000e+04 * invT + 1.585822230000000e+00 -
                  3.857460290000000e+00 * tc[0] -
                  2.207185130000000e-03 * tc[1] +
                  3.691356733333334e-07 * tc[2] -
                  4.362418233333334e-11 * tc[3] + 2.360420820000000e-15 * tc[4];
    // species 11: CH2O
    species[11] = -1.399583230000000e+04 * invT - 1.189563292000000e+01 -
                  1.760690080000000e+00 * tc[0] -
                  4.600000410000000e-03 * tc[1] +
                  7.370980216666666e-07 * tc[2] -
                  8.386767666666666e-11 * tc[3] + 4.419278200000001e-15 * tc[4];
    // species 12: N2
    species[12] = -9.227977000000000e+02 * invT - 3.053888000000000e+00 -
                  2.926640000000000e+00 * tc[0] -
                  7.439884000000000e-04 * tc[1] +
                  9.474600000000001e-08 * tc[2] -
                  8.414198333333333e-12 * tc[3] + 3.376675500000000e-16 * tc[4];
  }
}

// compute the g/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
gibbs_qss(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: CH2
    species[0] = +4.600404010000000e+04 * invT + 2.200146820000000e+00 -
                 3.762678670000000e+00 * tc[0] - 4.844360715000000e-04 * tc[1] -
                 4.658164016666667e-07 * tc[2] + 3.209092941666667e-10 * tc[3] -
                 8.437085950000000e-14 * tc[4];
    // species 1: CH2(S)
    species[1] = +5.049681630000000e+04 * invT + 4.967723077000000e+00 -
                 4.198604110000000e+00 * tc[0] + 1.183307095000000e-03 * tc[1] -
                 1.372160366666667e-06 * tc[2] + 5.573466508333334e-10 * tc[3] -
                 9.715736850000000e-14 * tc[4];
    // species 2: HCO
    species[2] = +3.839564960000000e+03 * invT + 8.268134100000002e-01 -
                 4.221185840000000e+00 * tc[0] + 1.621962660000000e-03 * tc[1] -
                 2.296657433333333e-06 * tc[2] + 1.109534108333333e-09 * tc[3] -
                 2.168844325000000e-13 * tc[4];
    // species 3: CH2OH
    species[3] = -3.193913670000000e+03 * invT - 1.609133250000000e+00 -
                 3.863889180000000e+00 * tc[0] - 2.798361520000000e-03 * tc[1] -
                 9.887863183333334e-07 * tc[2] + 8.711001000000001e-10 * tc[3] -
                 2.184836390000000e-13 * tc[4];
  } else {
    // species 0: CH2
    species[0] = +4.626360400000000e+04 * invT - 3.297092110000000e+00 -
                 2.874101130000000e+00 * tc[0] - 1.828196460000000e-03 * tc[1] +
                 2.348243283333333e-07 * tc[2] - 2.168162908333333e-11 * tc[3] +
                 9.386378350000000e-16 * tc[4];
    // species 1: CH2(S)
    species[1] = +5.092599970000000e+04 * invT - 6.334463270000000e+00 -
                 2.292038420000000e+00 * tc[0] - 2.327943185000000e-03 * tc[1] +
                 3.353199116666667e-07 * tc[2] - 3.482550000000000e-11 * tc[3] +
                 1.698581825000000e-15 * tc[4];
    // species 2: HCO
    species[2] = +4.011918150000000e+03 * invT - 7.026170540000000e+00 -
                 2.772174380000000e+00 * tc[0] - 2.478477630000000e-03 * tc[1] +
                 4.140760216666667e-07 * tc[2] - 4.909681483333334e-11 * tc[3] +
                 2.667543555000000e-15 * tc[4];
    // species 3: CH2OH
    species[3] = -3.242506270000000e+03 * invT - 2.117766459999999e+00 -
                 3.692665690000000e+00 * tc[0] - 4.322883985000000e-03 * tc[1] +
                 6.251685333333334e-07 * tc[2] - 6.560288633333334e-11 * tc[3] +
                 3.242771005000000e-15 * tc[4];
  }
}

// compute the a/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
helmholtz(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = -9.17935173e+02 * invT + 6.61320882e-01 -
                 2.34433112e+00 * tc[0] - 3.99026037e-03 * tc[1] +
                 3.24635850e-06 * tc[2] - 1.67976745e-09 * tc[3] +
                 3.68805881e-13 * tc[4];
    // species 1: H
    species[1] = +2.54736599e+04 * invT + 1.94668285e+00 -
                 2.50000000e+00 * tc[0] - 3.52666409e-13 * tc[1] +
                 3.32653273e-16 * tc[2] - 1.91734693e-19 * tc[3] +
                 4.63866166e-23 * tc[4];
    // species 2: O
    species[2] = +2.91222592e+04 * invT + 1.16333640e-01 -
                 3.16826710e+00 * tc[0] + 1.63965942e-03 * tc[1] -
                 1.10717733e-06 * tc[2] + 5.10672187e-10 * tc[3] -
                 1.05632985e-13 * tc[4];
    // species 3: O2
    species[3] = -1.06394356e+03 * invT - 8.75219370e-01 -
                 3.78245636e+00 * tc[0] + 1.49836708e-03 * tc[1] -
                 1.64121700e-06 * tc[2] + 8.06774591e-10 * tc[3] -
                 1.62186418e-13 * tc[4];
    // species 4: OH
    species[4] = +3.61508056e+03 * invT + 3.09594089e+00 -
                 3.99201543e+00 * tc[0] + 1.20065876e-03 * tc[1] -
                 7.69656402e-07 * tc[2] + 3.23427778e-10 * tc[3] -
                 6.82057350e-14 * tc[4];
    // species 5: H2O
    species[5] = -3.02937267e+04 * invT + 4.04767277e+00 -
                 4.19864056e+00 * tc[0] + 1.01821705e-03 * tc[1] -
                 1.08673369e-06 * tc[2] + 4.57330885e-10 * tc[3] -
                 8.85989085e-14 * tc[4];
    // species 6: HO2
    species[6] = +2.94808040e+02 * invT - 4.14864440e-01 -
                 4.30179801e+00 * tc[0] + 2.37456025e-03 * tc[1] -
                 3.52638152e-06 * tc[2] + 2.02303245e-09 * tc[3] -
                 4.64612562e-13 * tc[4];
    // species 7: CH3
    species[7] = +1.64449988e+04 * invT + 1.06902607e+00 -
                 3.67359040e+00 * tc[0] - 1.00547588e-03 * tc[1] -
                 9.55036427e-07 * tc[2] + 5.72597854e-10 * tc[3] -
                 1.27192867e-13 * tc[4];
    // species 8: CH4
    species[8] = -1.02466476e+04 * invT + 8.79117989e+00 -
                 5.14987613e+00 * tc[0] + 6.83548940e-03 * tc[1] -
                 8.19667665e-06 * tc[2] + 4.03952522e-09 * tc[3] -
                 8.33469780e-13 * tc[4];
    // species 9: CO
    species[9] = -1.43440860e+04 * invT - 9.28875810e-01 -
                 3.57953347e+00 * tc[0] + 3.05176840e-04 * tc[1] -
                 1.69469055e-07 * tc[2] - 7.55838237e-11 * tc[3] +
                 4.52212249e-14 * tc[4];
    // species 10: CO2
    species[10] = -4.83719697e+04 * invT - 8.54427870e+00 -
                  2.35677352e+00 * tc[0] - 4.49229839e-03 * tc[1] +
                  1.18726045e-06 * tc[2] - 2.04932518e-10 * tc[3] +
                  7.18497740e-15 * tc[4];
    // species 11: CH2O
    species[11] = -1.43089567e+04 * invT + 3.19091025e+00 -
                  4.79372315e+00 * tc[0] + 4.95416684e-03 * tc[1] -
                  6.22033347e-06 * tc[2] + 3.16071051e-09 * tc[3] -
                  6.58863260e-13 * tc[4];
    // species 12: N2
    species[12] = -1.02089990e+03 * invT - 1.65169500e+00 -
                  3.29867700e+00 * tc[0] - 7.04120200e-04 * tc[1] +
                  6.60537000e-07 * tc[2] - 4.70126250e-10 * tc[3] +
                  1.22242700e-13 * tc[4];
  } else {
    // species 0: H2
    species[0] = -9.50158922e+02 * invT + 5.54230251e+00 -
                 3.33727920e+00 * tc[0] + 2.47012365e-05 * tc[1] -
                 8.32427963e-08 * tc[2] + 1.49638662e-11 * tc[3] -
                 1.00127688e-15 * tc[4];
    // species 1: H
    species[1] = +2.54736599e+04 * invT + 1.94668292e+00 -
                 2.50000001e+00 * tc[0] + 1.15421486e-11 * tc[1] -
                 2.69269913e-15 * tc[2] + 3.94596029e-19 * tc[3] -
                 2.49098679e-23 * tc[4];
    // species 2: O
    species[2] = +2.92175791e+04 * invT - 3.21491786e+00 -
                 2.56942078e+00 * tc[0] + 4.29870569e-05 * tc[1] -
                 6.99140982e-09 * tc[2] + 8.34814992e-13 * tc[3] -
                 6.14168455e-17 * tc[4];
    // species 3: O2
    species[3] = -1.08845772e+03 * invT - 3.17069345e+00 -
                 3.28253784e+00 * tc[0] - 7.41543770e-04 * tc[1] +
                 1.26327778e-07 * tc[2] - 1.74558796e-11 * tc[3] +
                 1.08358897e-15 * tc[4];
    // species 4: OH
    species[4] = +3.85865700e+03 * invT - 2.38380843e+00 -
                 3.09288767e+00 * tc[0] - 2.74214858e-04 * tc[1] -
                 2.10842047e-08 * tc[2] + 7.32884630e-12 * tc[3] -
                 5.87061880e-16 * tc[4];
    // species 5: H2O
    species[5] = -3.00042971e+04 * invT - 2.93277761e+00 -
                 3.03399249e+00 * tc[0] - 1.08845902e-03 * tc[1] +
                 2.73454197e-08 * tc[2] + 8.08683225e-12 * tc[3] -
                 8.41004960e-16 * tc[4];
    // species 6: HO2
    species[6] = +1.11856713e+02 * invT - 7.67891250e-01 -
                 4.01721090e+00 * tc[0] - 1.11991006e-03 * tc[1] +
                 1.05609692e-07 * tc[2] - 9.52053083e-12 * tc[3] +
                 5.39542675e-16 * tc[4];
    // species 7: CH3
    species[7] = +1.67755843e+04 * invT - 7.19435407e+00 -
                 2.28571772e+00 * tc[0] - 3.61995018e-03 * tc[1] +
                 4.97857247e-07 * tc[2] - 4.96403870e-11 * tc[3] +
                 2.33577197e-15 * tc[4];
    // species 8: CH4
    species[8] = -9.46834459e+03 * invT - 1.93624665e+01 -
                 7.48514950e-02 * tc[0] - 6.69547335e-03 * tc[1] +
                 9.55476348e-07 * tc[2] - 1.01910446e-10 * tc[3] +
                 5.09076150e-15 * tc[4];
    // species 9: CO
    species[9] = -1.41518724e+04 * invT - 6.10350211e+00 -
                 2.71518561e+00 * tc[0] - 1.03126372e-03 * tc[1] +
                 1.66470962e-07 * tc[2] - 1.91710840e-11 * tc[3] +
                 1.01823858e-15 * tc[4];
    // species 10: CO2
    species[10] = -4.87591660e+04 * invT + 5.85822230e-01 -
                  3.85746029e+00 * tc[0] - 2.20718513e-03 * tc[1] +
                  3.69135673e-07 * tc[2] - 4.36241823e-11 * tc[3] +
                  2.36042082e-15 * tc[4];
    // species 11: CH2O
    species[11] = -1.39958323e+04 * invT - 1.28956329e+01 -
                  1.76069008e+00 * tc[0] - 4.60000041e-03 * tc[1] +
                  7.37098022e-07 * tc[2] - 8.38676767e-11 * tc[3] +
                  4.41927820e-15 * tc[4];
    // species 12: N2
    species[12] = -9.22797700e+02 * invT - 4.05388800e+00 -
                  2.92664000e+00 * tc[0] - 7.43988400e-04 * tc[1] +
                  9.47460000e-08 * tc[2] - 8.41419833e-12 * tc[3] +
                  3.37667550e-16 * tc[4];
  }
}

// compute the e/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesInternalEnergy(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +1.34433112e+00 + 3.99026037e-03 * tc[1] -
                 6.49271700e-06 * tc[2] + 5.03930235e-09 * tc[3] -
                 1.47522352e-12 * tc[4] - 9.17935173e+02 * invT;
    // species 1: H
    species[1] = +1.50000000e+00 + 3.52666409e-13 * tc[1] -
                 6.65306547e-16 * tc[2] + 5.75204080e-19 * tc[3] -
                 1.85546466e-22 * tc[4] + 2.54736599e+04 * invT;
    // species 2: O
    species[2] = +2.16826710e+00 - 1.63965942e-03 * tc[1] +
                 2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
                 4.22531942e-13 * tc[4] + 2.91222592e+04 * invT;
    // species 3: O2
    species[3] = +2.78245636e+00 - 1.49836708e-03 * tc[1] +
                 3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
                 6.48745674e-13 * tc[4] - 1.06394356e+03 * invT;
    // species 4: OH
    species[4] = +2.99201543e+00 - 1.20065876e-03 * tc[1] +
                 1.53931280e-06 * tc[2] - 9.70283332e-10 * tc[3] +
                 2.72822940e-13 * tc[4] + 3.61508056e+03 * invT;
    // species 5: H2O
    species[5] = +3.19864056e+00 - 1.01821705e-03 * tc[1] +
                 2.17346737e-06 * tc[2] - 1.37199266e-09 * tc[3] +
                 3.54395634e-13 * tc[4] - 3.02937267e+04 * invT;
    // species 6: HO2
    species[6] = +3.30179801e+00 - 2.37456025e-03 * tc[1] +
                 7.05276303e-06 * tc[2] - 6.06909735e-09 * tc[3] +
                 1.85845025e-12 * tc[4] + 2.94808040e+02 * invT;
    // species 7: CH3
    species[7] = +2.67359040e+00 + 1.00547588e-03 * tc[1] +
                 1.91007285e-06 * tc[2] - 1.71779356e-09 * tc[3] +
                 5.08771468e-13 * tc[4] + 1.64449988e+04 * invT;
    // species 8: CH4
    species[8] = +4.14987613e+00 - 6.83548940e-03 * tc[1] +
                 1.63933533e-05 * tc[2] - 1.21185757e-08 * tc[3] +
                 3.33387912e-12 * tc[4] - 1.02466476e+04 * invT;
    // species 9: CO
    species[9] = +2.57953347e+00 - 3.05176840e-04 * tc[1] +
                 3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
                 1.80884900e-13 * tc[4] - 1.43440860e+04 * invT;
    // species 10: CO2
    species[10] = +1.35677352e+00 + 4.49229839e-03 * tc[1] -
                  2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                  2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 11: CH2O
    species[11] = +3.79372315e+00 - 4.95416684e-03 * tc[1] +
                  1.24406669e-05 * tc[2] - 9.48213152e-09 * tc[3] +
                  2.63545304e-12 * tc[4] - 1.43089567e+04 * invT;
    // species 12: N2
    species[12] = +2.29867700e+00 + 7.04120200e-04 * tc[1] -
                  1.32107400e-06 * tc[2] + 1.41037875e-09 * tc[3] -
                  4.88970800e-13 * tc[4] - 1.02089990e+03 * invT;
  } else {
    // species 0: H2
    species[0] = +2.33727920e+00 - 2.47012365e-05 * tc[1] +
                 1.66485593e-07 * tc[2] - 4.48915985e-11 * tc[3] +
                 4.00510752e-15 * tc[4] - 9.50158922e+02 * invT;
    // species 1: H
    species[1] = +1.50000001e+00 - 1.15421486e-11 * tc[1] +
                 5.38539827e-15 * tc[2] - 1.18378809e-18 * tc[3] +
                 9.96394714e-23 * tc[4] + 2.54736599e+04 * invT;
    // species 2: O
    species[2] = +1.56942078e+00 - 4.29870569e-05 * tc[1] +
                 1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
                 2.45667382e-16 * tc[4] + 2.92175791e+04 * invT;
    // species 3: O2
    species[3] = +2.28253784e+00 + 7.41543770e-04 * tc[1] -
                 2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
                 4.33435588e-15 * tc[4] - 1.08845772e+03 * invT;
    // species 4: OH
    species[4] = +2.09288767e+00 + 2.74214858e-04 * tc[1] +
                 4.21684093e-08 * tc[2] - 2.19865389e-11 * tc[3] +
                 2.34824752e-15 * tc[4] + 3.85865700e+03 * invT;
    // species 5: H2O
    species[5] = +2.03399249e+00 + 1.08845902e-03 * tc[1] -
                 5.46908393e-08 * tc[2] - 2.42604967e-11 * tc[3] +
                 3.36401984e-15 * tc[4] - 3.00042971e+04 * invT;
    // species 6: HO2
    species[6] = +3.01721090e+00 + 1.11991006e-03 * tc[1] -
                 2.11219383e-07 * tc[2] + 2.85615925e-11 * tc[3] -
                 2.15817070e-15 * tc[4] + 1.11856713e+02 * invT;
    // species 7: CH3
    species[7] = +1.28571772e+00 + 3.61995018e-03 * tc[1] -
                 9.95714493e-07 * tc[2] + 1.48921161e-10 * tc[3] -
                 9.34308788e-15 * tc[4] + 1.67755843e+04 * invT;
    // species 8: CH4
    species[8] = -9.25148505e-01 + 6.69547335e-03 * tc[1] -
                 1.91095270e-06 * tc[2] + 3.05731338e-10 * tc[3] -
                 2.03630460e-14 * tc[4] - 9.46834459e+03 * invT;
    // species 9: CO
    species[9] = +1.71518561e+00 + 1.03126372e-03 * tc[1] -
                 3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
                 4.07295432e-15 * tc[4] - 1.41518724e+04 * invT;
    // species 10: CO2
    species[10] = +2.85746029e+00 + 2.20718513e-03 * tc[1] -
                  7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                  9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 11: CH2O
    species[11] = +7.60690080e-01 + 4.60000041e-03 * tc[1] -
                  1.47419604e-06 * tc[2] + 2.51603030e-10 * tc[3] -
                  1.76771128e-14 * tc[4] - 1.39958323e+04 * invT;
    // species 12: N2
    species[12] = +1.92664000e+00 + 7.43988400e-04 * tc[1] -
                  1.89492000e-07 * tc[2] + 2.52425950e-11 * tc[3] -
                  1.35067020e-15 * tc[4] - 9.22797700e+02 * invT;
  }
}

// compute the h/(RT) at the given temperature (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEnthalpy(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +2.34433112e+00 + 3.99026037e-03 * tc[1] -
                 6.49271700e-06 * tc[2] + 5.03930235e-09 * tc[3] -
                 1.47522352e-12 * tc[4] - 9.17935173e+02 * invT;
    // species 1: H
    species[1] = +2.50000000e+00 + 3.52666409e-13 * tc[1] -
                 6.65306547e-16 * tc[2] + 5.75204080e-19 * tc[3] -
                 1.85546466e-22 * tc[4] + 2.54736599e+04 * invT;
    // species 2: O
    species[2] = +3.16826710e+00 - 1.63965942e-03 * tc[1] +
                 2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
                 4.22531942e-13 * tc[4] + 2.91222592e+04 * invT;
    // species 3: O2
    species[3] = +3.78245636e+00 - 1.49836708e-03 * tc[1] +
                 3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
                 6.48745674e-13 * tc[4] - 1.06394356e+03 * invT;
    // species 4: OH
    species[4] = +3.99201543e+00 - 1.20065876e-03 * tc[1] +
                 1.53931280e-06 * tc[2] - 9.70283332e-10 * tc[3] +
                 2.72822940e-13 * tc[4] + 3.61508056e+03 * invT;
    // species 5: H2O
    species[5] = +4.19864056e+00 - 1.01821705e-03 * tc[1] +
                 2.17346737e-06 * tc[2] - 1.37199266e-09 * tc[3] +
                 3.54395634e-13 * tc[4] - 3.02937267e+04 * invT;
    // species 6: HO2
    species[6] = +4.30179801e+00 - 2.37456025e-03 * tc[1] +
                 7.05276303e-06 * tc[2] - 6.06909735e-09 * tc[3] +
                 1.85845025e-12 * tc[4] + 2.94808040e+02 * invT;
    // species 7: CH3
    species[7] = +3.67359040e+00 + 1.00547588e-03 * tc[1] +
                 1.91007285e-06 * tc[2] - 1.71779356e-09 * tc[3] +
                 5.08771468e-13 * tc[4] + 1.64449988e+04 * invT;
    // species 8: CH4
    species[8] = +5.14987613e+00 - 6.83548940e-03 * tc[1] +
                 1.63933533e-05 * tc[2] - 1.21185757e-08 * tc[3] +
                 3.33387912e-12 * tc[4] - 1.02466476e+04 * invT;
    // species 9: CO
    species[9] = +3.57953347e+00 - 3.05176840e-04 * tc[1] +
                 3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
                 1.80884900e-13 * tc[4] - 1.43440860e+04 * invT;
    // species 10: CO2
    species[10] = +2.35677352e+00 + 4.49229839e-03 * tc[1] -
                  2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                  2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 11: CH2O
    species[11] = +4.79372315e+00 - 4.95416684e-03 * tc[1] +
                  1.24406669e-05 * tc[2] - 9.48213152e-09 * tc[3] +
                  2.63545304e-12 * tc[4] - 1.43089567e+04 * invT;
    // species 12: N2
    species[12] = +3.29867700e+00 + 7.04120200e-04 * tc[1] -
                  1.32107400e-06 * tc[2] + 1.41037875e-09 * tc[3] -
                  4.88970800e-13 * tc[4] - 1.02089990e+03 * invT;
  } else {
    // species 0: H2
    species[0] = +3.33727920e+00 - 2.47012365e-05 * tc[1] +
                 1.66485593e-07 * tc[2] - 4.48915985e-11 * tc[3] +
                 4.00510752e-15 * tc[4] - 9.50158922e+02 * invT;
    // species 1: H
    species[1] = +2.50000001e+00 - 1.15421486e-11 * tc[1] +
                 5.38539827e-15 * tc[2] - 1.18378809e-18 * tc[3] +
                 9.96394714e-23 * tc[4] + 2.54736599e+04 * invT;
    // species 2: O
    species[2] = +2.56942078e+00 - 4.29870569e-05 * tc[1] +
                 1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
                 2.45667382e-16 * tc[4] + 2.92175791e+04 * invT;
    // species 3: O2
    species[3] = +3.28253784e+00 + 7.41543770e-04 * tc[1] -
                 2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
                 4.33435588e-15 * tc[4] - 1.08845772e+03 * invT;
    // species 4: OH
    species[4] = +3.09288767e+00 + 2.74214858e-04 * tc[1] +
                 4.21684093e-08 * tc[2] - 2.19865389e-11 * tc[3] +
                 2.34824752e-15 * tc[4] + 3.85865700e+03 * invT;
    // species 5: H2O
    species[5] = +3.03399249e+00 + 1.08845902e-03 * tc[1] -
                 5.46908393e-08 * tc[2] - 2.42604967e-11 * tc[3] +
                 3.36401984e-15 * tc[4] - 3.00042971e+04 * invT;
    // species 6: HO2
    species[6] = +4.01721090e+00 + 1.11991006e-03 * tc[1] -
                 2.11219383e-07 * tc[2] + 2.85615925e-11 * tc[3] -
                 2.15817070e-15 * tc[4] + 1.11856713e+02 * invT;
    // species 7: CH3
    species[7] = +2.28571772e+00 + 3.61995018e-03 * tc[1] -
                 9.95714493e-07 * tc[2] + 1.48921161e-10 * tc[3] -
                 9.34308788e-15 * tc[4] + 1.67755843e+04 * invT;
    // species 8: CH4
    species[8] = +7.48514950e-02 + 6.69547335e-03 * tc[1] -
                 1.91095270e-06 * tc[2] + 3.05731338e-10 * tc[3] -
                 2.03630460e-14 * tc[4] - 9.46834459e+03 * invT;
    // species 9: CO
    species[9] = +2.71518561e+00 + 1.03126372e-03 * tc[1] -
                 3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
                 4.07295432e-15 * tc[4] - 1.41518724e+04 * invT;
    // species 10: CO2
    species[10] = +3.85746029e+00 + 2.20718513e-03 * tc[1] -
                  7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                  9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 11: CH2O
    species[11] = +1.76069008e+00 + 4.60000041e-03 * tc[1] -
                  1.47419604e-06 * tc[2] + 2.51603030e-10 * tc[3] -
                  1.76771128e-14 * tc[4] - 1.39958323e+04 * invT;
    // species 12: N2
    species[12] = +2.92664000e+00 + 7.43988400e-04 * tc[1] -
                  1.89492000e-07 * tc[2] + 2.52425950e-11 * tc[3] -
                  1.35067020e-15 * tc[4] - 9.22797700e+02 * invT;
  }
}

// compute the h/(RT) at the given temperature (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEnthalpy_qss(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: CH2
    species[0] = +3.76267867e+00 + 4.84436072e-04 * tc[1] +
                 9.31632803e-07 * tc[2] - 9.62727883e-10 * tc[3] +
                 3.37483438e-13 * tc[4] + 4.60040401e+04 * invT;
    // species 1: CH2(S)
    species[1] = +4.19860411e+00 - 1.18330710e-03 * tc[1] +
                 2.74432073e-06 * tc[2] - 1.67203995e-09 * tc[3] +
                 3.88629474e-13 * tc[4] + 5.04968163e+04 * invT;
    // species 2: HCO
    species[2] = +4.22118584e+00 - 1.62196266e-03 * tc[1] +
                 4.59331487e-06 * tc[2] - 3.32860233e-09 * tc[3] +
                 8.67537730e-13 * tc[4] + 3.83956496e+03 * invT;
    // species 3: CH2OH
    species[3] = +3.86388918e+00 + 2.79836152e-03 * tc[1] +
                 1.97757264e-06 * tc[2] - 2.61330030e-09 * tc[3] +
                 8.73934556e-13 * tc[4] - 3.19391367e+03 * invT;
  } else {
    // species 0: CH2
    species[0] = +2.87410113e+00 + 1.82819646e-03 * tc[1] -
                 4.69648657e-07 * tc[2] + 6.50448872e-11 * tc[3] -
                 3.75455134e-15 * tc[4] + 4.62636040e+04 * invT;
    // species 1: CH2(S)
    species[1] = +2.29203842e+00 + 2.32794318e-03 * tc[1] -
                 6.70639823e-07 * tc[2] + 1.04476500e-10 * tc[3] -
                 6.79432730e-15 * tc[4] + 5.09259997e+04 * invT;
    // species 2: HCO
    species[2] = +2.77217438e+00 + 2.47847763e-03 * tc[1] -
                 8.28152043e-07 * tc[2] + 1.47290445e-10 * tc[3] -
                 1.06701742e-14 * tc[4] + 4.01191815e+03 * invT;
    // species 3: CH2OH
    species[3] = +3.69266569e+00 + 4.32288399e-03 * tc[1] -
                 1.25033707e-06 * tc[2] + 1.96808659e-10 * tc[3] -
                 1.29710840e-14 * tc[4] - 3.24250627e+03 * invT;
  }
}

// compute the S/R at the given temperature (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEntropy(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +2.34433112e+00 * tc[0] + 7.98052075e-03 * tc[1] -
                 9.73907550e-06 * tc[2] + 6.71906980e-09 * tc[3] -
                 1.84402940e-12 * tc[4] + 6.83010238e-01;
    // species 1: H
    species[1] = +2.50000000e+00 * tc[0] + 7.05332819e-13 * tc[1] -
                 9.97959820e-16 * tc[2] + 7.66938773e-19 * tc[3] -
                 2.31933083e-22 * tc[4] - 4.46682853e-01;
    // species 2: O
    species[2] = +3.16826710e+00 * tc[0] - 3.27931884e-03 * tc[1] +
                 3.32153198e-06 * tc[2] - 2.04268875e-09 * tc[3] +
                 5.28164927e-13 * tc[4] + 2.05193346e+00;
    // species 3: O2
    species[3] = +3.78245636e+00 * tc[0] - 2.99673416e-03 * tc[1] +
                 4.92365101e-06 * tc[2] - 3.22709836e-09 * tc[3] +
                 8.10932092e-13 * tc[4] + 3.65767573e+00;
    // species 4: OH
    species[4] = +3.99201543e+00 * tc[0] - 2.40131752e-03 * tc[1] +
                 2.30896920e-06 * tc[2] - 1.29371111e-09 * tc[3] +
                 3.41028675e-13 * tc[4] - 1.03925458e-01;
    // species 5: H2O
    species[5] = +4.19864056e+00 * tc[0] - 2.03643410e-03 * tc[1] +
                 3.26020105e-06 * tc[2] - 1.82932354e-09 * tc[3] +
                 4.42994543e-13 * tc[4] - 8.49032208e-01;
    // species 6: HO2
    species[6] = +4.30179801e+00 * tc[0] - 4.74912051e-03 * tc[1] +
                 1.05791445e-05 * tc[2] - 8.09212980e-09 * tc[3] +
                 2.32306281e-12 * tc[4] + 3.71666245e+00;
    // species 7: CH3
    species[7] = +3.67359040e+00 * tc[0] + 2.01095175e-03 * tc[1] +
                 2.86510928e-06 * tc[2] - 2.29039142e-09 * tc[3] +
                 6.35964335e-13 * tc[4] + 1.60456433e+00;
    // species 8: CH4
    species[8] = +5.14987613e+00 * tc[0] - 1.36709788e-02 * tc[1] +
                 2.45900299e-05 * tc[2] - 1.61581009e-08 * tc[3] +
                 4.16734890e-12 * tc[4] - 4.64130376e+00;
    // species 9: CO
    species[9] = +3.57953347e+00 * tc[0] - 6.10353680e-04 * tc[1] +
                 5.08407165e-07 * tc[2] + 3.02335295e-10 * tc[3] -
                 2.26106125e-13 * tc[4] + 3.50840928e+00;
    // species 10: CO2
    species[10] = +2.35677352e+00 * tc[0] + 8.98459677e-03 * tc[1] -
                  3.56178134e-06 * tc[2] + 8.19730073e-10 * tc[3] -
                  3.59248870e-14 * tc[4] + 9.90105222e+00;
    // species 11: CH2O
    species[11] = +4.79372315e+00 * tc[0] - 9.90833369e-03 * tc[1] +
                  1.86610004e-05 * tc[2] - 1.26428420e-08 * tc[3] +
                  3.29431630e-12 * tc[4] + 6.02812900e-01;
    // species 12: N2
    species[12] = +3.29867700e+00 * tc[0] + 1.40824040e-03 * tc[1] -
                  1.98161100e-06 * tc[2] + 1.88050500e-09 * tc[3] -
                  6.11213500e-13 * tc[4] + 3.95037200e+00;
  } else {
    // species 0: H2
    species[0] = +3.33727920e+00 * tc[0] - 4.94024731e-05 * tc[1] +
                 2.49728389e-07 * tc[2] - 5.98554647e-11 * tc[3] +
                 5.00638440e-15 * tc[4] - 3.20502331e+00;
    // species 1: H
    species[1] = +2.50000001e+00 * tc[0] - 2.30842973e-11 * tc[1] +
                 8.07809740e-15 * tc[2] - 1.57838412e-18 * tc[3] +
                 1.24549339e-22 * tc[4] - 4.46682914e-01;
    // species 2: O
    species[2] = +2.56942078e+00 * tc[0] - 8.59741137e-05 * tc[1] +
                 2.09742295e-08 * tc[2] - 3.33925997e-12 * tc[3] +
                 3.07084227e-16 * tc[4] + 4.78433864e+00;
    // species 3: O2
    species[3] = +3.28253784e+00 * tc[0] + 1.48308754e-03 * tc[1] -
                 3.78983334e-07 * tc[2] + 6.98235183e-11 * tc[3] -
                 5.41794485e-15 * tc[4] + 5.45323129e+00;
    // species 4: OH
    species[4] = +3.09288767e+00 * tc[0] + 5.48429716e-04 * tc[1] +
                 6.32526140e-08 * tc[2] - 2.93153852e-11 * tc[3] +
                 2.93530940e-15 * tc[4] + 4.47669610e+00;
    // species 5: H2O
    species[5] = +3.03399249e+00 * tc[0] + 2.17691804e-03 * tc[1] -
                 8.20362590e-08 * tc[2] - 3.23473290e-11 * tc[3] +
                 4.20502480e-15 * tc[4] + 4.96677010e+00;
    // species 6: HO2
    species[6] = +4.01721090e+00 * tc[0] + 2.23982013e-03 * tc[1] -
                 3.16829075e-07 * tc[2] + 3.80821233e-11 * tc[3] -
                 2.69771337e-15 * tc[4] + 3.78510215e+00;
    // species 7: CH3
    species[7] = +2.28571772e+00 * tc[0] + 7.23990037e-03 * tc[1] -
                 1.49357174e-06 * tc[2] + 1.98561548e-10 * tc[3] -
                 1.16788599e-14 * tc[4] + 8.48007179e+00;
    // species 8: CH4
    species[8] = +7.48514950e-02 * tc[0] + 1.33909467e-02 * tc[1] -
                 2.86642905e-06 * tc[2] + 4.07641783e-10 * tc[3] -
                 2.54538075e-14 * tc[4] + 1.84373180e+01;
    // species 9: CO
    species[9] = +2.71518561e+00 * tc[0] + 2.06252743e-03 * tc[1] -
                 4.99412886e-07 * tc[2] + 7.66843360e-11 * tc[3] -
                 5.09119290e-15 * tc[4] + 7.81868772e+00;
    // species 10: CO2
    species[10] = +3.85746029e+00 * tc[0] + 4.41437026e-03 * tc[1] -
                  1.10740702e-06 * tc[2] + 1.74496729e-10 * tc[3] -
                  1.18021041e-14 * tc[4] + 2.27163806e+00;
    // species 11: CH2O
    species[11] = +1.76069008e+00 * tc[0] + 9.20000082e-03 * tc[1] -
                  2.21129406e-06 * tc[2] + 3.35470707e-10 * tc[3] -
                  2.20963910e-14 * tc[4] + 1.36563230e+01;
    // species 12: N2
    species[12] = +2.92664000e+00 * tc[0] + 1.48797680e-03 * tc[1] -
                  2.84238000e-07 * tc[2] + 3.36567933e-11 * tc[3] -
                  1.68833775e-15 * tc[4] + 5.98052800e+00;
  }
}

// Returns the mean specific heat at CP (Eq. 33)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cpbl)
{
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real cpor[13];                               //  temporary storage
  cp_R(cpor, tc);

  // perform dot product
  for (int id = 0; id < 13; ++id) {
    result += x[id] * cpor[id];
  }

  cpbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CP (Eq. 34)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cpbs)
{
  amrex::Real result = 0.0;
  const amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache

  // compute Cp/R at the given temperature

  // species with midpoint at T=1000 kelvin
  if (tT < 1000) {
    // species 0: H2
    result +=
      y[0] *
      (+2.34433112e+00 + 7.98052075e-03 * tc[1] - 1.94781510e-05 * tc[2] +
       2.01572094e-08 * tc[3] - 7.37611761e-12 * tc[4]) *
      0.4960317460317460;
    // species 1: H
    result +=
      y[1] *
      (+2.50000000e+00 + 7.05332819e-13 * tc[1] - 1.99591964e-15 * tc[2] +
       2.30081632e-18 * tc[3] - 9.27732332e-22 * tc[4]) *
      0.9920634920634921;
    // species 2: O
    result +=
      y[2] *
      (+3.16826710e+00 - 3.27931884e-03 * tc[1] + 6.64306396e-06 * tc[2] -
       6.12806624e-09 * tc[3] + 2.11265971e-12 * tc[4]) *
      0.0625039064941559;
    // species 3: O2
    result +=
      y[3] *
      (+3.78245636e+00 - 2.99673416e-03 * tc[1] + 9.84730201e-06 * tc[2] -
       9.68129509e-09 * tc[3] + 3.24372837e-12 * tc[4]) *
      0.0312519532470779;
    // species 4: OH
    result +=
      y[4] *
      (+3.99201543e+00 - 2.40131752e-03 * tc[1] + 4.61793841e-06 * tc[2] -
       3.88113333e-09 * tc[3] + 1.36411470e-12 * tc[4]) *
      0.0587993179279120;
    // species 5: H2O
    result +=
      y[5] *
      (+4.19864056e+00 - 2.03643410e-03 * tc[1] + 6.52040211e-06 * tc[2] -
       5.48797062e-09 * tc[3] + 1.77197817e-12 * tc[4]) *
      0.0555092978073827;
    // species 6: HO2
    result +=
      y[6] *
      (+4.30179801e+00 - 4.74912051e-03 * tc[1] + 2.11582891e-05 * tc[2] -
       2.42763894e-08 * tc[3] + 9.29225124e-12 * tc[4]) *
      0.0302975216627280;
    // species 7: CH3
    result +=
      y[7] *
      (+3.67359040e+00 + 2.01095175e-03 * tc[1] + 5.73021856e-06 * tc[2] -
       6.87117425e-09 * tc[3] + 2.54385734e-12 * tc[4]) *
      0.0665114732291320;
    // species 8: CH4
    result +=
      y[8] *
      (+5.14987613e+00 - 1.36709788e-02 * tc[1] + 4.91800599e-05 * tc[2] -
       4.84743026e-08 * tc[3] + 1.66693956e-11 * tc[4]) *
      0.0623324814560868;
    // species 9: CO
    result +=
      y[9] *
      (+3.57953347e+00 - 6.10353680e-04 * tc[1] + 1.01681433e-06 * tc[2] +
       9.07005884e-10 * tc[3] - 9.04424499e-13 * tc[4]) *
      0.0357015351660121;
    // species 10: CO2
    result +=
      y[10] *
      (+2.35677352e+00 + 8.98459677e-03 * tc[1] - 7.12356269e-06 * tc[2] +
       2.45919022e-09 * tc[3] - 1.43699548e-13 * tc[4]) *
      0.0227226249176305;
    // species 11: CH2O
    result +=
      y[11] *
      (+4.79372315e+00 - 9.90833369e-03 * tc[1] + 3.73220008e-05 * tc[2] -
       3.79285261e-08 * tc[3] + 1.31772652e-11 * tc[4]) *
      0.0333044694598015;
    // species 12: N2
    result +=
      y[12] *
      (+3.29867700e+00 + 1.40824040e-03 * tc[1] - 3.96322200e-06 * tc[2] +
       5.64151500e-09 * tc[3] - 2.44485400e-12 * tc[4]) *
      0.0356964374955379;
  } else {
    // species 0: H2
    result +=
      y[0] *
      (+3.33727920e+00 - 4.94024731e-05 * tc[1] + 4.99456778e-07 * tc[2] -
       1.79566394e-10 * tc[3] + 2.00255376e-14 * tc[4]) *
      0.4960317460317460;
    // species 1: H
    result +=
      y[1] *
      (+2.50000001e+00 - 2.30842973e-11 * tc[1] + 1.61561948e-14 * tc[2] -
       4.73515235e-18 * tc[3] + 4.98197357e-22 * tc[4]) *
      0.9920634920634921;
    // species 2: O
    result +=
      y[2] *
      (+2.56942078e+00 - 8.59741137e-05 * tc[1] + 4.19484589e-08 * tc[2] -
       1.00177799e-11 * tc[3] + 1.22833691e-15 * tc[4]) *
      0.0625039064941559;
    // species 3: O2
    result +=
      y[3] *
      (+3.28253784e+00 + 1.48308754e-03 * tc[1] - 7.57966669e-07 * tc[2] +
       2.09470555e-10 * tc[3] - 2.16717794e-14 * tc[4]) *
      0.0312519532470779;
    // species 4: OH
    result +=
      y[4] *
      (+3.09288767e+00 + 5.48429716e-04 * tc[1] + 1.26505228e-07 * tc[2] -
       8.79461556e-11 * tc[3] + 1.17412376e-14 * tc[4]) *
      0.0587993179279120;
    // species 5: H2O
    result +=
      y[5] *
      (+3.03399249e+00 + 2.17691804e-03 * tc[1] - 1.64072518e-07 * tc[2] -
       9.70419870e-11 * tc[3] + 1.68200992e-14 * tc[4]) *
      0.0555092978073827;
    // species 6: HO2
    result +=
      y[6] *
      (+4.01721090e+00 + 2.23982013e-03 * tc[1] - 6.33658150e-07 * tc[2] +
       1.14246370e-10 * tc[3] - 1.07908535e-14 * tc[4]) *
      0.0302975216627280;
    // species 7: CH3
    result +=
      y[7] *
      (+2.28571772e+00 + 7.23990037e-03 * tc[1] - 2.98714348e-06 * tc[2] +
       5.95684644e-10 * tc[3] - 4.67154394e-14 * tc[4]) *
      0.0665114732291320;
    // species 8: CH4
    result +=
      y[8] *
      (+7.48514950e-02 + 1.33909467e-02 * tc[1] - 5.73285809e-06 * tc[2] +
       1.22292535e-09 * tc[3] - 1.01815230e-13 * tc[4]) *
      0.0623324814560868;
    // species 9: CO
    result +=
      y[9] *
      (+2.71518561e+00 + 2.06252743e-03 * tc[1] - 9.98825771e-07 * tc[2] +
       2.30053008e-10 * tc[3] - 2.03647716e-14 * tc[4]) *
      0.0357015351660121;
    // species 10: CO2
    result +=
      y[10] *
      (+3.85746029e+00 + 4.41437026e-03 * tc[1] - 2.21481404e-06 * tc[2] +
       5.23490188e-10 * tc[3] - 4.72084164e-14 * tc[4]) *
      0.0227226249176305;
    // species 11: CH2O
    result +=
      y[11] *
      (+1.76069008e+00 + 9.20000082e-03 * tc[1] - 4.42258813e-06 * tc[2] +
       1.00641212e-09 * tc[3] - 8.83855640e-14 * tc[4]) *
      0.0333044694598015;
    // species 12: N2
    result +=
      y[12] *
      (+2.92664000e+00 + 1.48797680e-03 * tc[1] - 5.68476000e-07 * tc[2] +
       1.00970380e-10 * tc[3] - 6.75335100e-15 * tc[4]) *
      0.0356964374955379;
  }

  cpbs = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 35)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cvbl)
{
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real cvor[13];                               //  temporary storage
  cv_R(cvor, tc);

  // perform dot product
  for (int id = 0; id < 13; ++id) {
    result += x[id] * cvor[id];
  }

  cvbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 36)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cvbs)
{
  amrex::Real result = 0.0;
  const amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  // compute Cv/R at the given temperature

  // species with midpoint at T=1000 kelvin
  if (tT < 1000) {
    // species 0: H2
    result +=
      y[0] *
      (+1.34433112e+00 + 7.98052075e-03 * tc[1] - 1.94781510e-05 * tc[2] +
       2.01572094e-08 * tc[3] - 7.37611761e-12 * tc[4]) *
      0.4960317460317460;
    // species 1: H
    result +=
      y[1] *
      (+1.50000000e+00 + 7.05332819e-13 * tc[1] - 1.99591964e-15 * tc[2] +
       2.30081632e-18 * tc[3] - 9.27732332e-22 * tc[4]) *
      0.9920634920634921;
    // species 2: O
    result +=
      y[2] *
      (+2.16826710e+00 - 3.27931884e-03 * tc[1] + 6.64306396e-06 * tc[2] -
       6.12806624e-09 * tc[3] + 2.11265971e-12 * tc[4]) *
      0.0625039064941559;
    // species 3: O2
    result +=
      y[3] *
      (+2.78245636e+00 - 2.99673416e-03 * tc[1] + 9.84730201e-06 * tc[2] -
       9.68129509e-09 * tc[3] + 3.24372837e-12 * tc[4]) *
      0.0312519532470779;
    // species 4: OH
    result +=
      y[4] *
      (+2.99201543e+00 - 2.40131752e-03 * tc[1] + 4.61793841e-06 * tc[2] -
       3.88113333e-09 * tc[3] + 1.36411470e-12 * tc[4]) *
      0.0587993179279120;
    // species 5: H2O
    result +=
      y[5] *
      (+3.19864056e+00 - 2.03643410e-03 * tc[1] + 6.52040211e-06 * tc[2] -
       5.48797062e-09 * tc[3] + 1.77197817e-12 * tc[4]) *
      0.0555092978073827;
    // species 6: HO2
    result +=
      y[6] *
      (+3.30179801e+00 - 4.74912051e-03 * tc[1] + 2.11582891e-05 * tc[2] -
       2.42763894e-08 * tc[3] + 9.29225124e-12 * tc[4]) *
      0.0302975216627280;
    // species 7: CH3
    result +=
      y[7] *
      (+2.67359040e+00 + 2.01095175e-03 * tc[1] + 5.73021856e-06 * tc[2] -
       6.87117425e-09 * tc[3] + 2.54385734e-12 * tc[4]) *
      0.0665114732291320;
    // species 8: CH4
    result +=
      y[8] *
      (+4.14987613e+00 - 1.36709788e-02 * tc[1] + 4.91800599e-05 * tc[2] -
       4.84743026e-08 * tc[3] + 1.66693956e-11 * tc[4]) *
      0.0623324814560868;
    // species 9: CO
    result +=
      y[9] *
      (+2.57953347e+00 - 6.10353680e-04 * tc[1] + 1.01681433e-06 * tc[2] +
       9.07005884e-10 * tc[3] - 9.04424499e-13 * tc[4]) *
      0.0357015351660121;
    // species 10: CO2
    result +=
      y[10] *
      (+1.35677352e+00 + 8.98459677e-03 * tc[1] - 7.12356269e-06 * tc[2] +
       2.45919022e-09 * tc[3] - 1.43699548e-13 * tc[4]) *
      0.0227226249176305;
    // species 11: CH2O
    result +=
      y[11] *
      (+3.79372315e+00 - 9.90833369e-03 * tc[1] + 3.73220008e-05 * tc[2] -
       3.79285261e-08 * tc[3] + 1.31772652e-11 * tc[4]) *
      0.0333044694598015;
    // species 12: N2
    result +=
      y[12] *
      (+2.29867700e+00 + 1.40824040e-03 * tc[1] - 3.96322200e-06 * tc[2] +
       5.64151500e-09 * tc[3] - 2.44485400e-12 * tc[4]) *
      0.0356964374955379;
  } else {
    // species 0: H2
    result +=
      y[0] *
      (+2.33727920e+00 - 4.94024731e-05 * tc[1] + 4.99456778e-07 * tc[2] -
       1.79566394e-10 * tc[3] + 2.00255376e-14 * tc[4]) *
      0.4960317460317460;
    // species 1: H
    result +=
      y[1] *
      (+1.50000001e+00 - 2.30842973e-11 * tc[1] + 1.61561948e-14 * tc[2] -
       4.73515235e-18 * tc[3] + 4.98197357e-22 * tc[4]) *
      0.9920634920634921;
    // species 2: O
    result +=
      y[2] *
      (+1.56942078e+00 - 8.59741137e-05 * tc[1] + 4.19484589e-08 * tc[2] -
       1.00177799e-11 * tc[3] + 1.22833691e-15 * tc[4]) *
      0.0625039064941559;
    // species 3: O2
    result +=
      y[3] *
      (+2.28253784e+00 + 1.48308754e-03 * tc[1] - 7.57966669e-07 * tc[2] +
       2.09470555e-10 * tc[3] - 2.16717794e-14 * tc[4]) *
      0.0312519532470779;
    // species 4: OH
    result +=
      y[4] *
      (+2.09288767e+00 + 5.48429716e-04 * tc[1] + 1.26505228e-07 * tc[2] -
       8.79461556e-11 * tc[3] + 1.17412376e-14 * tc[4]) *
      0.0587993179279120;
    // species 5: H2O
    result +=
      y[5] *
      (+2.03399249e+00 + 2.17691804e-03 * tc[1] - 1.64072518e-07 * tc[2] -
       9.70419870e-11 * tc[3] + 1.68200992e-14 * tc[4]) *
      0.0555092978073827;
    // species 6: HO2
    result +=
      y[6] *
      (+3.01721090e+00 + 2.23982013e-03 * tc[1] - 6.33658150e-07 * tc[2] +
       1.14246370e-10 * tc[3] - 1.07908535e-14 * tc[4]) *
      0.0302975216627280;
    // species 7: CH3
    result +=
      y[7] *
      (+1.28571772e+00 + 7.23990037e-03 * tc[1] - 2.98714348e-06 * tc[2] +
       5.95684644e-10 * tc[3] - 4.67154394e-14 * tc[4]) *
      0.0665114732291320;
    // species 8: CH4
    result +=
      y[8] *
      (-9.25148505e-01 + 1.33909467e-02 * tc[1] - 5.73285809e-06 * tc[2] +
       1.22292535e-09 * tc[3] - 1.01815230e-13 * tc[4]) *
      0.0623324814560868;
    // species 9: CO
    result +=
      y[9] *
      (+1.71518561e+00 + 2.06252743e-03 * tc[1] - 9.98825771e-07 * tc[2] +
       2.30053008e-10 * tc[3] - 2.03647716e-14 * tc[4]) *
      0.0357015351660121;
    // species 10: CO2
    result +=
      y[10] *
      (+2.85746029e+00 + 4.41437026e-03 * tc[1] - 2.21481404e-06 * tc[2] +
       5.23490188e-10 * tc[3] - 4.72084164e-14 * tc[4]) *
      0.0227226249176305;
    // species 11: CH2O
    result +=
      y[11] *
      (+7.60690080e-01 + 9.20000082e-03 * tc[1] - 4.42258813e-06 * tc[2] +
       1.00641212e-09 * tc[3] - 8.83855640e-14 * tc[4]) *
      0.0333044694598015;
    // species 12: N2
    result +=
      y[12] *
      (+1.92664000e+00 + 1.48797680e-03 * tc[1] - 5.68476000e-07 * tc[2] +
       1.00970380e-10 * tc[3] - 6.75335100e-15 * tc[4]) *
      0.0356964374955379;
  }

  cvbs = result * 8.31446261815324e+07;
}

// Returns the mean enthalpy of the mixture in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBML(const amrex::Real T, const amrex::Real x[], amrex::Real& hbml)
{
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real hml[13];                                //  temporary storage
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesEnthalpy(hml, tc);

  // perform dot product
  for (int id = 0; id < 13; ++id) {
    result += x[id] * hml[id];
  }

  hbml = result * RT;
}

// Returns mean enthalpy of mixture in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& hbms)
{
  amrex::Real result = 0.0;
  const amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (tT < 1000) {
    // species 0: H2
    result += y[0] *
              (+2.34433112e+00 + 3.99026037e-03 * tc[1] -
               6.49271700e-06 * tc[2] + 5.03930235e-09 * tc[3] -
               1.47522352e-12 * tc[4] - 9.17935173e+02 * invT) *
              0.4960317460317460;
    // species 1: H
    result += y[1] *
              (+2.50000000e+00 + 3.52666409e-13 * tc[1] -
               6.65306547e-16 * tc[2] + 5.75204080e-19 * tc[3] -
               1.85546466e-22 * tc[4] + 2.54736599e+04 * invT) *
              0.9920634920634921;
    // species 2: O
    result += y[2] *
              (+3.16826710e+00 - 1.63965942e-03 * tc[1] +
               2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
               4.22531942e-13 * tc[4] + 2.91222592e+04 * invT) *
              0.0625039064941559;
    // species 3: O2
    result += y[3] *
              (+3.78245636e+00 - 1.49836708e-03 * tc[1] +
               3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
               6.48745674e-13 * tc[4] - 1.06394356e+03 * invT) *
              0.0312519532470779;
    // species 4: OH
    result += y[4] *
              (+3.99201543e+00 - 1.20065876e-03 * tc[1] +
               1.53931280e-06 * tc[2] - 9.70283332e-10 * tc[3] +
               2.72822940e-13 * tc[4] + 3.61508056e+03 * invT) *
              0.0587993179279120;
    // species 5: H2O
    result += y[5] *
              (+4.19864056e+00 - 1.01821705e-03 * tc[1] +
               2.17346737e-06 * tc[2] - 1.37199266e-09 * tc[3] +
               3.54395634e-13 * tc[4] - 3.02937267e+04 * invT) *
              0.0555092978073827;
    // species 6: HO2
    result += y[6] *
              (+4.30179801e+00 - 2.37456025e-03 * tc[1] +
               7.05276303e-06 * tc[2] - 6.06909735e-09 * tc[3] +
               1.85845025e-12 * tc[4] + 2.94808040e+02 * invT) *
              0.0302975216627280;
    // species 7: CH3
    result += y[7] *
              (+3.67359040e+00 + 1.00547588e-03 * tc[1] +
               1.91007285e-06 * tc[2] - 1.71779356e-09 * tc[3] +
               5.08771468e-13 * tc[4] + 1.64449988e+04 * invT) *
              0.0665114732291320;
    // species 8: CH4
    result += y[8] *
              (+5.14987613e+00 - 6.83548940e-03 * tc[1] +
               1.63933533e-05 * tc[2] - 1.21185757e-08 * tc[3] +
               3.33387912e-12 * tc[4] - 1.02466476e+04 * invT) *
              0.0623324814560868;
    // species 9: CO
    result += y[9] *
              (+3.57953347e+00 - 3.05176840e-04 * tc[1] +
               3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
               1.80884900e-13 * tc[4] - 1.43440860e+04 * invT) *
              0.0357015351660121;
    // species 10: CO2
    result += y[10] *
              (+2.35677352e+00 + 4.49229839e-03 * tc[1] -
               2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
               2.87399096e-14 * tc[4] - 4.83719697e+04 * invT) *
              0.0227226249176305;
    // species 11: CH2O
    result += y[11] *
              (+4.79372315e+00 - 4.95416684e-03 * tc[1] +
               1.24406669e-05 * tc[2] - 9.48213152e-09 * tc[3] +
               2.63545304e-12 * tc[4] - 1.43089567e+04 * invT) *
              0.0333044694598015;
    // species 12: N2
    result += y[12] *
              (+3.29867700e+00 + 7.04120200e-04 * tc[1] -
               1.32107400e-06 * tc[2] + 1.41037875e-09 * tc[3] -
               4.88970800e-13 * tc[4] - 1.02089990e+03 * invT) *
              0.0356964374955379;
  } else {
    // species 0: H2
    result += y[0] *
              (+3.33727920e+00 - 2.47012365e-05 * tc[1] +
               1.66485593e-07 * tc[2] - 4.48915985e-11 * tc[3] +
               4.00510752e-15 * tc[4] - 9.50158922e+02 * invT) *
              0.4960317460317460;
    // species 1: H
    result += y[1] *
              (+2.50000001e+00 - 1.15421486e-11 * tc[1] +
               5.38539827e-15 * tc[2] - 1.18378809e-18 * tc[3] +
               9.96394714e-23 * tc[4] + 2.54736599e+04 * invT) *
              0.9920634920634921;
    // species 2: O
    result += y[2] *
              (+2.56942078e+00 - 4.29870569e-05 * tc[1] +
               1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
               2.45667382e-16 * tc[4] + 2.92175791e+04 * invT) *
              0.0625039064941559;
    // species 3: O2
    result += y[3] *
              (+3.28253784e+00 + 7.41543770e-04 * tc[1] -
               2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
               4.33435588e-15 * tc[4] - 1.08845772e+03 * invT) *
              0.0312519532470779;
    // species 4: OH
    result += y[4] *
              (+3.09288767e+00 + 2.74214858e-04 * tc[1] +
               4.21684093e-08 * tc[2] - 2.19865389e-11 * tc[3] +
               2.34824752e-15 * tc[4] + 3.85865700e+03 * invT) *
              0.0587993179279120;
    // species 5: H2O
    result += y[5] *
              (+3.03399249e+00 + 1.08845902e-03 * tc[1] -
               5.46908393e-08 * tc[2] - 2.42604967e-11 * tc[3] +
               3.36401984e-15 * tc[4] - 3.00042971e+04 * invT) *
              0.0555092978073827;
    // species 6: HO2
    result += y[6] *
              (+4.01721090e+00 + 1.11991006e-03 * tc[1] -
               2.11219383e-07 * tc[2] + 2.85615925e-11 * tc[3] -
               2.15817070e-15 * tc[4] + 1.11856713e+02 * invT) *
              0.0302975216627280;
    // species 7: CH3
    result += y[7] *
              (+2.28571772e+00 + 3.61995018e-03 * tc[1] -
               9.95714493e-07 * tc[2] + 1.48921161e-10 * tc[3] -
               9.34308788e-15 * tc[4] + 1.67755843e+04 * invT) *
              0.0665114732291320;
    // species 8: CH4
    result += y[8] *
              (+7.48514950e-02 + 6.69547335e-03 * tc[1] -
               1.91095270e-06 * tc[2] + 3.05731338e-10 * tc[3] -
               2.03630460e-14 * tc[4] - 9.46834459e+03 * invT) *
              0.0623324814560868;
    // species 9: CO
    result += y[9] *
              (+2.71518561e+00 + 1.03126372e-03 * tc[1] -
               3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
               4.07295432e-15 * tc[4] - 1.41518724e+04 * invT) *
              0.0357015351660121;
    // species 10: CO2
    result += y[10] *
              (+3.85746029e+00 + 2.20718513e-03 * tc[1] -
               7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
               9.44168328e-15 * tc[4] - 4.87591660e+04 * invT) *
              0.0227226249176305;
    // species 11: CH2O
    result += y[11] *
              (+1.76069008e+00 + 4.60000041e-03 * tc[1] -
               1.47419604e-06 * tc[2] + 2.51603030e-10 * tc[3] -
               1.76771128e-14 * tc[4] - 1.39958323e+04 * invT) *
              0.0333044694598015;
    // species 12: N2
    result += y[12] *
              (+2.92664000e+00 + 7.43988400e-04 * tc[1] -
               1.89492000e-07 * tc[2] + 2.52425950e-11 * tc[3] -
               1.35067020e-15 * tc[4] - 9.22797700e+02 * invT) *
              0.0356964374955379;
  }

  const amrex::Real RT = 8.31446261815324e+07 * tT; // R*T

  hbms = result * RT;
}

// get mean internal energy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBML(const amrex::Real T, const amrex::Real x[], amrex::Real& ubml)
{
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real uml[13];                                //  temporary energy array
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesInternalEnergy(uml, tc);

  // perform dot product
  for (int id = 0; id < 13; ++id) {
    result += x[id] * uml[id];
  }

  ubml = result * RT;
}

// get mean internal energy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& ubms)
{
  amrex::Real result = 0.0;
  const amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (tT < 1000) {
    // species 0: H2
    result += y[0] *
              (+1.34433112e+00 + 3.99026037e-03 * tc[1] -
               6.49271700e-06 * tc[2] + 5.03930235e-09 * tc[3] -
               1.47522352e-12 * tc[4] - 9.17935173e+02 * invT) *
              0.4960317460317460;
    // species 1: H
    result += y[1] *
              (+1.50000000e+00 + 3.52666409e-13 * tc[1] -
               6.65306547e-16 * tc[2] + 5.75204080e-19 * tc[3] -
               1.85546466e-22 * tc[4] + 2.54736599e+04 * invT) *
              0.9920634920634921;
    // species 2: O
    result += y[2] *
              (+2.16826710e+00 - 1.63965942e-03 * tc[1] +
               2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
               4.22531942e-13 * tc[4] + 2.91222592e+04 * invT) *
              0.0625039064941559;
    // species 3: O2
    result += y[3] *
              (+2.78245636e+00 - 1.49836708e-03 * tc[1] +
               3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
               6.48745674e-13 * tc[4] - 1.06394356e+03 * invT) *
              0.0312519532470779;
    // species 4: OH
    result += y[4] *
              (+2.99201543e+00 - 1.20065876e-03 * tc[1] +
               1.53931280e-06 * tc[2] - 9.70283332e-10 * tc[3] +
               2.72822940e-13 * tc[4] + 3.61508056e+03 * invT) *
              0.0587993179279120;
    // species 5: H2O
    result += y[5] *
              (+3.19864056e+00 - 1.01821705e-03 * tc[1] +
               2.17346737e-06 * tc[2] - 1.37199266e-09 * tc[3] +
               3.54395634e-13 * tc[4] - 3.02937267e+04 * invT) *
              0.0555092978073827;
    // species 6: HO2
    result += y[6] *
              (+3.30179801e+00 - 2.37456025e-03 * tc[1] +
               7.05276303e-06 * tc[2] - 6.06909735e-09 * tc[3] +
               1.85845025e-12 * tc[4] + 2.94808040e+02 * invT) *
              0.0302975216627280;
    // species 7: CH3
    result += y[7] *
              (+2.67359040e+00 + 1.00547588e-03 * tc[1] +
               1.91007285e-06 * tc[2] - 1.71779356e-09 * tc[3] +
               5.08771468e-13 * tc[4] + 1.64449988e+04 * invT) *
              0.0665114732291320;
    // species 8: CH4
    result += y[8] *
              (+4.14987613e+00 - 6.83548940e-03 * tc[1] +
               1.63933533e-05 * tc[2] - 1.21185757e-08 * tc[3] +
               3.33387912e-12 * tc[4] - 1.02466476e+04 * invT) *
              0.0623324814560868;
    // species 9: CO
    result += y[9] *
              (+2.57953347e+00 - 3.05176840e-04 * tc[1] +
               3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
               1.80884900e-13 * tc[4] - 1.43440860e+04 * invT) *
              0.0357015351660121;
    // species 10: CO2
    result += y[10] *
              (+1.35677352e+00 + 4.49229839e-03 * tc[1] -
               2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
               2.87399096e-14 * tc[4] - 4.83719697e+04 * invT) *
              0.0227226249176305;
    // species 11: CH2O
    result += y[11] *
              (+3.79372315e+00 - 4.95416684e-03 * tc[1] +
               1.24406669e-05 * tc[2] - 9.48213152e-09 * tc[3] +
               2.63545304e-12 * tc[4] - 1.43089567e+04 * invT) *
              0.0333044694598015;
    // species 12: N2
    result += y[12] *
              (+2.29867700e+00 + 7.04120200e-04 * tc[1] -
               1.32107400e-06 * tc[2] + 1.41037875e-09 * tc[3] -
               4.88970800e-13 * tc[4] - 1.02089990e+03 * invT) *
              0.0356964374955379;
  } else {
    // species 0: H2
    result += y[0] *
              (+2.33727920e+00 - 2.47012365e-05 * tc[1] +
               1.66485593e-07 * tc[2] - 4.48915985e-11 * tc[3] +
               4.00510752e-15 * tc[4] - 9.50158922e+02 * invT) *
              0.4960317460317460;
    // species 1: H
    result += y[1] *
              (+1.50000001e+00 - 1.15421486e-11 * tc[1] +
               5.38539827e-15 * tc[2] - 1.18378809e-18 * tc[3] +
               9.96394714e-23 * tc[4] + 2.54736599e+04 * invT) *
              0.9920634920634921;
    // species 2: O
    result += y[2] *
              (+1.56942078e+00 - 4.29870569e-05 * tc[1] +
               1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
               2.45667382e-16 * tc[4] + 2.92175791e+04 * invT) *
              0.0625039064941559;
    // species 3: O2
    result += y[3] *
              (+2.28253784e+00 + 7.41543770e-04 * tc[1] -
               2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
               4.33435588e-15 * tc[4] - 1.08845772e+03 * invT) *
              0.0312519532470779;
    // species 4: OH
    result += y[4] *
              (+2.09288767e+00 + 2.74214858e-04 * tc[1] +
               4.21684093e-08 * tc[2] - 2.19865389e-11 * tc[3] +
               2.34824752e-15 * tc[4] + 3.85865700e+03 * invT) *
              0.0587993179279120;
    // species 5: H2O
    result += y[5] *
              (+2.03399249e+00 + 1.08845902e-03 * tc[1] -
               5.46908393e-08 * tc[2] - 2.42604967e-11 * tc[3] +
               3.36401984e-15 * tc[4] - 3.00042971e+04 * invT) *
              0.0555092978073827;
    // species 6: HO2
    result += y[6] *
              (+3.01721090e+00 + 1.11991006e-03 * tc[1] -
               2.11219383e-07 * tc[2] + 2.85615925e-11 * tc[3] -
               2.15817070e-15 * tc[4] + 1.11856713e+02 * invT) *
              0.0302975216627280;
    // species 7: CH3
    result += y[7] *
              (+1.28571772e+00 + 3.61995018e-03 * tc[1] -
               9.95714493e-07 * tc[2] + 1.48921161e-10 * tc[3] -
               9.34308788e-15 * tc[4] + 1.67755843e+04 * invT) *
              0.0665114732291320;
    // species 8: CH4
    result += y[8] *
              (-9.25148505e-01 + 6.69547335e-03 * tc[1] -
               1.91095270e-06 * tc[2] + 3.05731338e-10 * tc[3] -
               2.03630460e-14 * tc[4] - 9.46834459e+03 * invT) *
              0.0623324814560868;
    // species 9: CO
    result += y[9] *
              (+1.71518561e+00 + 1.03126372e-03 * tc[1] -
               3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
               4.07295432e-15 * tc[4] - 1.41518724e+04 * invT) *
              0.0357015351660121;
    // species 10: CO2
    result += y[10] *
              (+2.85746029e+00 + 2.20718513e-03 * tc[1] -
               7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
               9.44168328e-15 * tc[4] - 4.87591660e+04 * invT) *
              0.0227226249176305;
    // species 11: CH2O
    result += y[11] *
              (+7.60690080e-01 + 4.60000041e-03 * tc[1] -
               1.47419604e-06 * tc[2] + 2.51603030e-10 * tc[3] -
               1.76771128e-14 * tc[4] - 1.39958323e+04 * invT) *
              0.0333044694598015;
    // species 12: N2
    result += y[12] *
              (+1.92664000e+00 + 7.43988400e-04 * tc[1] -
               1.89492000e-07 * tc[2] + 2.52425950e-11 * tc[3] -
               1.35067020e-15 * tc[4] - 9.22797700e+02 * invT) *
              0.0356964374955379;
  }

  const amrex::Real RT = 8.31446261815324e+07 * tT; // R*T

  ubms = result * RT;
}

// get mixture entropy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBML(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& sbml)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real sor[13]; //  temporary storage
  speciesEntropy(sor, tc);

  // Compute Eq 42
  for (int id = 0; id < 13; ++id) {
    result += x[id] * (sor[id] - log((x[id] + 1e-100)) - logPratio);
  }

  sbml = result * 8.31446261815324e+07;
}

// get mixture entropy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBMS(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& sbms)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real sor[13]; //  temporary storage
  amrex::Real x[13];   //  need a ytx conversion
  amrex::Real YOW = 0; // See Eq 4, 6 in CK Manual

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 13; i++) {
    YOW += y[i] * imw(i);
  }
  // Now compute y to x conversion
  x[0] = y[0] / (2.016000 * YOW);
  x[1] = y[1] / (1.008000 * YOW);
  x[2] = y[2] / (15.999000 * YOW);
  x[3] = y[3] / (31.998000 * YOW);
  x[4] = y[4] / (17.007000 * YOW);
  x[5] = y[5] / (18.015000 * YOW);
  x[6] = y[6] / (33.006000 * YOW);
  x[7] = y[7] / (15.035000 * YOW);
  x[8] = y[8] / (16.043000 * YOW);
  x[9] = y[9] / (28.010000 * YOW);
  x[10] = y[10] / (44.009000 * YOW);
  x[11] = y[11] / (30.026000 * YOW);
  x[12] = y[12] / (28.014000 * YOW);
  speciesEntropy(sor, tc);
  // Perform computation in Eq 42 and 43
  for (int i = 0; i < 13; i++) {
    result += x[i] * (sor[i] - log((x[i] + 1e-100)) - logPratio);
  }
  // Scale by R/W
  sbms = result * 8.31446261815324e+07 * YOW;
}

//  get temperature given internal energy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_EY(
  const amrex::Real e, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real e1, emin, emax, cv, t1, dt;
  CKUBMS(tmin, y, emin);
  CKUBMS(tmax, y, emax);
  if (e < emin) {
    // Linear Extrapolation below tmin
    CKCVBS(tmin, y, cv);
    t = tmin - (emin - e) / cv;
    ierr = 1;
    return;
  }
  if (e > emax) {
    // Linear Extrapolation above tmax
    CKCVBS(tmax, y, cv);
    t = tmax - (emax - e) / cv;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (emax - emin) * (e - emin);
  }
  for (int i = 0; i < maxiter; ++i) {
    CKUBMS(t1, y, e1);
    CKCVBS(t1, y, cv);
    dt = (e - e1) / cv;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

//  get temperature given enthalpy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_HY(
  const amrex::Real h, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real h1, hmin, hmax, cp, t1, dt;
  CKHBMS(tmin, y, hmin);
  CKHBMS(tmax, y, hmax);
  if (h < hmin) {
    // Linear Extrapolation below tmin
    CKCPBS(tmin, y, cp);
    t = tmin - (hmin - h) / cp;
    ierr = 1;
    return;
  }
  if (h > hmax) {
    // Linear Extrapolation above tmax
    CKCPBS(tmax, y, cp);
    t = tmax - (hmax - h) / cp;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (hmax - hmin) * (h - hmin);
  }
  for (int i = 0; i < maxiter; ++i) {
    CKHBMS(t1, y, h1);
    CKCPBS(t1, y, cp);
    dt = (h - h1) / cp;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

// Compute P = rhoRT/W(x)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPX(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& P)
{
  amrex::Real XW = 0;                      //  To hold mean molecular wt
  XW += x[0] * 2.016000;                   // H2
  XW += x[1] * 1.008000;                   // H
  XW += x[2] * 15.999000;                  // O
  XW += x[3] * 31.998000;                  // O2
  XW += x[4] * 17.007000;                  // OH
  XW += x[5] * 18.015000;                  // H2O
  XW += x[6] * 33.006000;                  // HO2
  XW += x[7] * 15.035000;                  // CH3
  XW += x[8] * 16.043000;                  // CH4
  XW += x[9] * 28.010000;                  // CO
  XW += x[10] * 44.009000;                 // CO2
  XW += x[11] * 30.026000;                 // CH2O
  XW += x[12] * 28.014000;                 // N2
  P = rho * 8.31446261815324e+07 * T / XW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(y)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPY(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& P)
{
  amrex::Real YOW = 0; //  for computing mean MW

  for (int i = 0; i < 13; i++) {
    YOW += y[i] * imw(i);
  }
  P = rho * 8.31446261815324e+07 * T * YOW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(c)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPC(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& P)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 2.016000;   // H2
  W += c[1] * 1.008000;   // H
  W += c[2] * 15.999000;  // O
  W += c[3] * 31.998000;  // O2
  W += c[4] * 17.007000;  // OH
  W += c[5] * 18.015000;  // H2O
  W += c[6] * 33.006000;  // HO2
  W += c[7] * 15.035000;  // CH3
  W += c[8] * 16.043000;  // CH4
  W += c[9] * 28.010000;  // CO
  W += c[10] * 44.009000; // CO2
  W += c[11] * 30.026000; // CH2O
  W += c[12] * 28.014000; // N2

  for (int id = 0; id < 13; ++id) {
    sumC += c[id];
  }
  P = rho * 8.31446261815324e+07 * T * sumC / W; // P = rho*R*T/W
}

// Compute rho = PW(x)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOX(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& rho)
{
  amrex::Real XW = 0;                        //  To hold mean molecular wt
  XW += x[0] * 2.016000;                     // H2
  XW += x[1] * 1.008000;                     // H
  XW += x[2] * 15.999000;                    // O
  XW += x[3] * 31.998000;                    // O2
  XW += x[4] * 17.007000;                    // OH
  XW += x[5] * 18.015000;                    // H2O
  XW += x[6] * 33.006000;                    // HO2
  XW += x[7] * 15.035000;                    // CH3
  XW += x[8] * 16.043000;                    // CH4
  XW += x[9] * 28.010000;                    // CO
  XW += x[10] * 44.009000;                   // CO2
  XW += x[11] * 30.026000;                   // CH2O
  XW += x[12] * 28.014000;                   // N2
  rho = P * XW / (8.31446261815324e+07 * T); // rho = P*W/(R*T)
}

// Compute rho = P*W(y)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOY(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& rho)
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 13; i++) {
    YOW += y[i] * imw(i);
  }

  rho = P / (8.31446261815324e+07 * T * YOW); // rho = P*W/(R*T)
}

// Compute rho = P*W(c)/(R*T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOC(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& rho)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 2.016000;   // H2
  W += c[1] * 1.008000;   // H
  W += c[2] * 15.999000;  // O
  W += c[3] * 31.998000;  // O2
  W += c[4] * 17.007000;  // OH
  W += c[5] * 18.015000;  // H2O
  W += c[6] * 33.006000;  // HO2
  W += c[7] * 15.035000;  // CH3
  W += c[8] * 16.043000;  // CH4
  W += c[9] * 28.010000;  // CO
  W += c[10] * 44.009000; // CO2
  W += c[11] * 30.026000; // CH2O
  W += c[12] * 28.014000; // N2

  for (int id = 0; id < 13; ++id) {
    sumC += c[id];
  }
  rho = P * W / (sumC * T * 8.31446261815324e+07); // rho = PW/(R*T)
}

// get molecular weight for all species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWT(amrex::Real wt[])
{
  get_mw(wt);
}

// given y[species]: mass fractions
// s mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWY(const amrex::Real y[], amrex::Real& wtm)
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 13; i++) {
    YOW += y[i] * imw(i);
  }

  wtm = 1.0 / YOW;
}

// given x[species]: mole fractions
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWX(const amrex::Real x[], amrex::Real& wtm)
{
  amrex::Real XW = 0;      //  see Eq 4 in CK Manual
  XW += x[0] * 2.016000;   // H2
  XW += x[1] * 1.008000;   // H
  XW += x[2] * 15.999000;  // O
  XW += x[3] * 31.998000;  // O2
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 18.015000;  // H2O
  XW += x[6] * 33.006000;  // HO2
  XW += x[7] * 15.035000;  // CH3
  XW += x[8] * 16.043000;  // CH4
  XW += x[9] * 28.010000;  // CO
  XW += x[10] * 44.009000; // CO2
  XW += x[11] * 30.026000; // CH2O
  XW += x[12] * 28.014000; // N2
  wtm = XW;
}

// given c[species]: molar concentration
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWC(const amrex::Real c[], amrex::Real& wtm)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 2.016000;   // H2
  W += c[1] * 1.008000;   // H
  W += c[2] * 15.999000;  // O
  W += c[3] * 31.998000;  // O2
  W += c[4] * 17.007000;  // OH
  W += c[5] * 18.015000;  // H2O
  W += c[6] * 33.006000;  // HO2
  W += c[7] * 15.035000;  // CH3
  W += c[8] * 16.043000;  // CH4
  W += c[9] * 28.010000;  // CO
  W += c[10] * 44.009000; // CO2
  W += c[11] * 30.026000; // CH2O
  W += c[12] * 28.014000; // N2

  for (int id = 0; id < 13; ++id) {
    sumC += c[id];
  }
  //  CK provides no guard against divison by zero
  wtm = W / sumC;
}

// get Cp/R as a function of T
// for all species (Eq 19)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPOR(const amrex::Real T, amrex::Real cpor[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cp_R(cpor, tc);
}

// get H/RT as a function of T
// for all species (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHORT(const amrex::Real T, amrex::Real hort[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEnthalpy(hort, tc);
}

// get S/R as a function of T
// for all species (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSOR(const amrex::Real T, amrex::Real sor[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEntropy(sor, tc);
}

// convert y[species] (mass fracs) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTX(const amrex::Real y[], amrex::Real x[])
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 13; i++) {
    YOW += y[i] * imw(i);
  }

  amrex::Real YOWINV = 1.0 / YOW;

  for (int i = 0; i < 13; i++) {
    x[i] = y[i] * imw(i) * YOWINV;
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real c[])
{
  amrex::Real YOW = 0;
  amrex::Real PWORT;

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 13; i++) {
    c[i] = y[i] * imw(i);
  }
  for (int i = 0; i < 13; i++) {
    YOW += c[i];
  }

  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // Now compute conversion

  for (int i = 0; i < 13; i++) {
    c[i] = PWORT * y[i] * imw(i);
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCR(
  const amrex::Real rho,
  amrex::Real /*T*/,
  const amrex::Real y[],
  amrex::Real c[])
{

  for (int i = 0; i < 13; i++) {
    c[i] = rho * y[i] * imw(i);
  }
}

// convert x[species] (mole fracs) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTY(const amrex::Real x[], amrex::Real y[])
{
  amrex::Real XW = 0; // See Eq 4, 9 in CK Manual
  // Compute mean molecular wt first
  XW += x[0] * 2.016000;   // H2
  XW += x[1] * 1.008000;   // H
  XW += x[2] * 15.999000;  // O
  XW += x[3] * 31.998000;  // O2
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 18.015000;  // H2O
  XW += x[6] * 33.006000;  // HO2
  XW += x[7] * 15.035000;  // CH3
  XW += x[8] * 16.043000;  // CH4
  XW += x[9] * 28.010000;  // CO
  XW += x[10] * 44.009000; // CO2
  XW += x[11] * 30.026000; // CH2O
  XW += x[12] * 28.014000; // N2
  // Now compute conversion
  amrex::Real XWinv = 1.0 / XW;
  y[0] = x[0] * 2.016000 * XWinv;
  y[1] = x[1] * 1.008000 * XWinv;
  y[2] = x[2] * 15.999000 * XWinv;
  y[3] = x[3] * 31.998000 * XWinv;
  y[4] = x[4] * 17.007000 * XWinv;
  y[5] = x[5] * 18.015000 * XWinv;
  y[6] = x[6] * 33.006000 * XWinv;
  y[7] = x[7] * 15.035000 * XWinv;
  y[8] = x[8] * 16.043000 * XWinv;
  y[9] = x[9] * 28.010000 * XWinv;
  y[10] = x[10] * 44.009000 * XWinv;
  y[11] = x[11] * 30.026000 * XWinv;
  y[12] = x[12] * 28.014000 * XWinv;
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real c[])
{
  amrex::Real PORT = P / (8.31446261815324e+07 * T); // P/RT

  // Compute conversion, see Eq 10
  for (int id = 0; id < 13; ++id) {
    c[id] = x[id] * PORT;
  }
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCR(
  const amrex::Real rho,
  const amrex::Real /*T*/,
  const amrex::Real x[],
  amrex::Real c[])
{
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 2.016000;   // H2
  XW += x[1] * 1.008000;   // H
  XW += x[2] * 15.999000;  // O
  XW += x[3] * 31.998000;  // O2
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 18.015000;  // H2O
  XW += x[6] * 33.006000;  // HO2
  XW += x[7] * 15.035000;  // CH3
  XW += x[8] * 16.043000;  // CH4
  XW += x[9] * 28.010000;  // CO
  XW += x[10] * 44.009000; // CO2
  XW += x[11] * 30.026000; // CH2O
  XW += x[12] * 28.014000; // N2
  ROW = rho / XW;

  // Compute conversion, see Eq 11
  for (int id = 0; id < 13; ++id) {
    c[id] = x[id] * ROW;
  }
}

// convert c[species] (molar conc) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTX(const amrex::Real c[], amrex::Real x[])
{
  amrex::Real sumC = 0;

  // compute sum of c
  for (int id = 0; id < 13; ++id) {
    sumC += c[id];
  }

  //  See Eq 13
  amrex::Real sumCinv = 1.0 / sumC;
  for (int id = 0; id < 13; ++id) {
    x[id] = c[id] * sumCinv;
  }
}

// convert c[species] (molar conc) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTY(const amrex::Real c[], amrex::Real y[])
{
  amrex::Real CW = 0; // See Eq 12 in CK Manual
  // compute denominator in eq 12 first
  CW += c[0] * 2.016000;   // H2
  CW += c[1] * 1.008000;   // H
  CW += c[2] * 15.999000;  // O
  CW += c[3] * 31.998000;  // O2
  CW += c[4] * 17.007000;  // OH
  CW += c[5] * 18.015000;  // H2O
  CW += c[6] * 33.006000;  // HO2
  CW += c[7] * 15.035000;  // CH3
  CW += c[8] * 16.043000;  // CH4
  CW += c[9] * 28.010000;  // CO
  CW += c[10] * 44.009000; // CO2
  CW += c[11] * 30.026000; // CH2O
  CW += c[12] * 28.014000; // N2
  // Now compute conversion
  amrex::Real CWinv = 1.0 / CW;
  y[0] = c[0] * 2.016000 * CWinv;
  y[1] = c[1] * 1.008000 * CWinv;
  y[2] = c[2] * 15.999000 * CWinv;
  y[3] = c[3] * 31.998000 * CWinv;
  y[4] = c[4] * 17.007000 * CWinv;
  y[5] = c[5] * 18.015000 * CWinv;
  y[6] = c[6] * 33.006000 * CWinv;
  y[7] = c[7] * 15.035000 * CWinv;
  y[8] = c[8] * 16.043000 * CWinv;
  y[9] = c[9] * 28.010000 * CWinv;
  y[10] = c[10] * 44.009000 * CWinv;
  y[11] = c[11] * 30.026000 * CWinv;
  y[12] = c[12] * 28.014000 * CWinv;
}

// get specific heat at constant volume as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVML(const amrex::Real T, amrex::Real cvml[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cv_R(cvml, tc);

  // convert to chemkin units
  for (int id = 0; id < 13; ++id) {
    cvml[id] *= 8.31446261815324e+07;
  }
}

// get specific heat at constant pressure as a
// function of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPML(const amrex::Real T, amrex::Real cpml[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cp_R(cpml, tc);

  // convert to chemkin units
  for (int id = 0; id < 13; ++id) {
    cpml[id] *= 8.31446261815324e+07;
  }
}

// get internal energy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUML(const amrex::Real T, amrex::Real uml[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesInternalEnergy(uml, tc);

  // convert to chemkin units
  for (int id = 0; id < 13; ++id) {
    uml[id] *= RT;
  }
}

// get enthalpy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHML(const amrex::Real T, amrex::Real hml[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesEnthalpy(hml, tc);

  // convert to chemkin units
  for (int id = 0; id < 13; ++id) {
    hml[id] *= RT;
  }
}

// Returns the standard-state entropies in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSML(const amrex::Real T, amrex::Real sml[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEntropy(sml, tc);

  // convert to chemkin units
  for (int id = 0; id < 13; ++id) {
    sml[id] *= 8.31446261815324e+07;
  }
}

// Returns the specific heats at constant volume
// in mass units (Eq. 29)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVMS(const amrex::Real T, amrex::Real cvms[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cv_R(cvms, tc);
  // multiply by R/molecularweight
  cvms[0] *= 4.124237409798234e+07;  // H2
  cvms[1] *= 8.248474819596468e+07;  // H
  cvms[2] *= 5.196863940342046e+06;  // O
  cvms[3] *= 2.598431970171023e+06;  // O2
  cvms[4] *= 4.888847308845322e+06;  // OH
  cvms[5] *= 4.615299815794193e+06;  // H2O
  cvms[6] *= 2.519076112874398e+06;  // HO2
  cvms[7] *= 5.530071578419182e+06;  // CH3
  cvms[8] *= 5.182610869633635e+06;  // CH4
  cvms[9] *= 2.968390795484913e+06;  // CO
  cvms[10] *= 1.889264154639560e+06; // CO2
  cvms[11] *= 2.769087663409458e+06; // CH2O
  cvms[12] *= 2.967966951578939e+06; // N2
}

// Returns the specific heats at constant pressure
// in mass units (Eq. 26)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPMS(const amrex::Real T, amrex::Real cpms[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cp_R(cpms, tc);
  // multiply by R/molecularweight
  cpms[0] *= 4.124237409798234e+07;  // H2
  cpms[1] *= 8.248474819596468e+07;  // H
  cpms[2] *= 5.196863940342046e+06;  // O
  cpms[3] *= 2.598431970171023e+06;  // O2
  cpms[4] *= 4.888847308845322e+06;  // OH
  cpms[5] *= 4.615299815794193e+06;  // H2O
  cpms[6] *= 2.519076112874398e+06;  // HO2
  cpms[7] *= 5.530071578419182e+06;  // CH3
  cpms[8] *= 5.182610869633635e+06;  // CH4
  cpms[9] *= 2.968390795484913e+06;  // CO
  cpms[10] *= 1.889264154639560e+06; // CO2
  cpms[11] *= 2.769087663409458e+06; // CH2O
  cpms[12] *= 2.967966951578939e+06; // N2
}

// Returns internal energy in mass units (Eq 30.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUMS(const amrex::Real T, amrex::Real ums[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T

  speciesInternalEnergy(ums, tc);

  for (int i = 0; i < 13; i++) {
    ums[i] *= RT * imw(i);
  }
}

// Returns enthalpy in mass units (Eq 27.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHMS(const amrex::Real T, amrex::Real hms[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T

  speciesEnthalpy(hms, tc);

  for (int i = 0; i < 13; i++) {
    hms[i] *= RT * imw(i);
  }
}

// Returns the entropies in mass units (Eq 28.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSMS(const amrex::Real T, amrex::Real sms[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEntropy(sms, tc);
  // multiply by R/molecularweight
  sms[0] *= 4.124237409798234e+07;  // H2
  sms[1] *= 8.248474819596468e+07;  // H
  sms[2] *= 5.196863940342046e+06;  // O
  sms[3] *= 2.598431970171023e+06;  // O2
  sms[4] *= 4.888847308845322e+06;  // OH
  sms[5] *= 4.615299815794193e+06;  // H2O
  sms[6] *= 2.519076112874398e+06;  // HO2
  sms[7] *= 5.530071578419182e+06;  // CH3
  sms[8] *= 5.182610869633635e+06;  // CH4
  sms[9] *= 2.968390795484913e+06;  // CO
  sms[10] *= 1.889264154639560e+06; // CO2
  sms[11] *= 2.769087663409458e+06; // CH2O
  sms[12] *= 2.967966951578939e+06; // N2
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_qss_coeff(
  amrex::Real* k_f,
  amrex::Real* qf,
  amrex::Real* qr,
  const amrex::Real* sc,
  const amrex::Real* tc,
  amrex::Real* g_RT,
  amrex::Real* g_RT_qss)
{
  const amrex::Real invT = 1.0 / tc[1];

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1. / refC;
  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 13; ++i) {
    mixture += sc[i];
  }

  {
    // reaction 0: CH2 + H (+M) <=> CH3 (+M)
    amrex::Real Corr =
      mixture + sc[0] + (6 - 1) * sc[5] + sc[8] + (1.5 - 1) * sc[9] + sc[10];
    const amrex::Real redP =
      Corr / k_f[0] * 3.2e+15 * exp(-3.14 * tc[0] - 618.956498939805 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.32 * exp(-tc[1] * 0.0128205128205128) +
      0.68 * exp(-tc[1] * 0.00050125313283208) + exp(-5590 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[0] = Corr * k_f[0] * (sc[1]);
    qr[0] = Corr * k_f[0] * exp(-(g_RT[1] - g_RT[7] + g_RT_qss[0])) * (refC) *
            (sc[7]);
  }

  {
    // reaction 2: H + HCO (+M) <=> CH2O (+M)
    amrex::Real Corr =
      mixture + sc[0] + (6 - 1) * sc[5] + sc[8] + (1.5 - 1) * sc[9] + sc[10];
    const amrex::Real redP = Corr / k_f[1] * 1350000000000 *
                             exp(-2.57 * tc[0] - 717.083748771726 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2176 * exp(-tc[1] * 0.003690036900369) +
      0.7824 * exp(-tc[1] * 0.000362976406533575) + exp(-6570 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[1] = Corr * k_f[1] * (sc[1]);
    qr[1] = Corr * k_f[1] * exp(-(g_RT[1] - g_RT[11] + g_RT_qss[2])) * (refC) *
            (sc[11]);
  }

  {
    // reaction 3: CH2O + H (+M) <=> CH2OH (+M)
    amrex::Real Corr =
      mixture + sc[0] + (6 - 1) * sc[5] + sc[8] + (1.5 - 1) * sc[9] + sc[10];
    const amrex::Real redP =
      Corr / k_f[2] * 1.27e+20 * exp(-4.82 * tc[0] - 3286.00482770482 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2813 * exp(-tc[1] * 0.00970873786407767) +
      0.7187 * exp(-tc[1] * 0.000774593338497289) + exp(-4160 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[2] = Corr * k_f[2] * (sc[1] * sc[11]);
    qr[2] =
      Corr * k_f[2] * exp(-(g_RT[1] + g_RT[11] - g_RT_qss[3])) * (refC) * (1.0);
  }

  {
    // reaction 17: HCO + H2O <=> CO + H + H2O
    qf[3] = k_f[3] * (sc[5]);
    qr[3] = k_f[3] * exp(-(-g_RT[1] - g_RT[9] + g_RT_qss[2])) * (refCinv) *
            (sc[1] * sc[5] * sc[9]);
  }

  {
    // reaction 18: HCO + M <=> CO + H + M
    const amrex::Real Corr =
      mixture + sc[0] + (0 - 1) * sc[5] + sc[8] + (1.5 - 1) * sc[9] + sc[10];
    qf[4] = Corr * k_f[4] * (1.0);
    qr[4] = Corr * k_f[4] * exp(-(-g_RT[1] - g_RT[9] + g_RT_qss[2])) *
            (refCinv) * (sc[1] * sc[9]);
  }

  {
    // reaction 21: CH2 + O <=> H + HCO
    qf[5] = k_f[5] * (sc[2]);
    qr[5] =
      k_f[5] * exp(-(-g_RT[1] + g_RT[2] + g_RT_qss[0] - g_RT_qss[2])) * (sc[1]);
  }

  {
    // reaction 22: CH2(S) + O <=> CO + H2
    qf[6] = k_f[6] * (sc[2]);
    qr[6] = k_f[6] * exp(-(-g_RT[0] + g_RT[2] - g_RT[9] + g_RT_qss[1])) *
            (sc[0] * sc[9]);
  }

  {
    // reaction 25: HCO + O <=> CO + OH
    qf[7] = k_f[7] * (sc[2]);
    qr[7] = k_f[7] * exp(-(g_RT[2] - g_RT[4] - g_RT[9] + g_RT_qss[2])) *
            (sc[4] * sc[9]);
  }

  {
    // reaction 26: HCO + O <=> CO2 + H
    qf[8] = k_f[8] * (sc[2]);
    qr[8] = k_f[8] * exp(-(-g_RT[1] + g_RT[2] - g_RT[10] + g_RT_qss[2])) *
            (sc[1] * sc[10]);
  }

  {
    // reaction 27: CH2O + O <=> HCO + OH
    qf[9] = k_f[9] * (sc[2] * sc[11]);
    qr[9] =
      k_f[9] * exp(-(g_RT[2] - g_RT[4] + g_RT[11] - g_RT_qss[2])) * (sc[4]);
  }

  {
    // reaction 28: CH2OH + O <=> CH2O + OH
    qf[10] = k_f[10] * (sc[2]);
    qr[10] = k_f[10] * exp(-(g_RT[2] - g_RT[4] - g_RT[11] + g_RT_qss[3])) *
             (sc[4] * sc[11]);
  }

  {
    // reaction 30: CH2O + O2 <=> HCO + HO2
    qf[11] = k_f[11] * (sc[3] * sc[11]);
    qr[11] =
      k_f[11] * exp(-(g_RT[3] - g_RT[6] + g_RT[11] - g_RT_qss[2])) * (sc[6]);
  }

  {
    // reaction 36: H + HCO <=> CO + H2
    qf[12] = k_f[12] * (sc[1]);
    qr[12] = k_f[12] * exp(-(-g_RT[0] + g_RT[1] - g_RT[9] + g_RT_qss[2])) *
             (sc[0] * sc[9]);
  }

  {
    // reaction 37: CH2O + H <=> H2 + HCO
    qf[13] = k_f[13] * (sc[1] * sc[11]);
    qr[13] =
      k_f[13] * exp(-(-g_RT[0] + g_RT[1] + g_RT[11] - g_RT_qss[2])) * (sc[0]);
  }

  {
    // reaction 38: CH2OH + H <=> CH2O + H2
    qf[14] = k_f[14] * (sc[1]);
    qr[14] = k_f[14] * exp(-(-g_RT[0] + g_RT[1] - g_RT[11] + g_RT_qss[3])) *
             (sc[0] * sc[11]);
  }

  {
    // reaction 39: CH2OH + H <=> CH3 + OH
    qf[15] = k_f[15] * (sc[1]);
    qr[15] = k_f[15] * exp(-(g_RT[1] - g_RT[4] - g_RT[7] + g_RT_qss[3])) *
             (sc[4] * sc[7]);
  }

  {
    // reaction 40: CH2OH + H <=> CH2(S) + H2O
    qf[16] = k_f[16] * (sc[1]);
    qr[16] =
      k_f[16] * exp(-(g_RT[1] - g_RT[5] - g_RT_qss[1] + g_RT_qss[3])) * (sc[5]);
  }

  {
    // reaction 44: CH2 + OH <=> CH2O + H
    qf[17] = k_f[17] * (sc[4]);
    qr[17] = k_f[17] * exp(-(-g_RT[1] + g_RT[4] - g_RT[11] + g_RT_qss[0])) *
             (sc[1] * sc[11]);
  }

  {
    // reaction 45: CH2(S) + OH <=> CH2O + H
    qf[18] = k_f[18] * (sc[4]);
    qr[18] = k_f[18] * exp(-(-g_RT[1] + g_RT[4] - g_RT[11] + g_RT_qss[1])) *
             (sc[1] * sc[11]);
  }

  {
    // reaction 46: CH3 + OH <=> CH2 + H2O
    qf[19] = k_f[19] * (sc[4] * sc[7]);
    qr[19] =
      k_f[19] * exp(-(g_RT[4] - g_RT[5] + g_RT[7] - g_RT_qss[0])) * (sc[5]);
  }

  {
    // reaction 47: CH3 + OH <=> CH2(S) + H2O
    qf[20] = k_f[20] * (sc[4] * sc[7]);
    qr[20] =
      k_f[20] * exp(-(g_RT[4] - g_RT[5] + g_RT[7] - g_RT_qss[1])) * (sc[5]);
  }

  {
    // reaction 50: HCO + OH <=> CO + H2O
    qf[21] = k_f[21] * (sc[4]);
    qr[21] = k_f[21] * exp(-(g_RT[4] - g_RT[5] - g_RT[9] + g_RT_qss[2])) *
             (sc[5] * sc[9]);
  }

  {
    // reaction 51: CH2O + OH <=> H2O + HCO
    qf[22] = k_f[22] * (sc[4] * sc[11]);
    qr[22] =
      k_f[22] * exp(-(g_RT[4] - g_RT[5] + g_RT[11] - g_RT_qss[2])) * (sc[5]);
  }

  {
    // reaction 52: CH2OH + OH <=> CH2O + H2O
    qf[23] = k_f[23] * (sc[4]);
    qr[23] = k_f[23] * exp(-(g_RT[4] - g_RT[5] - g_RT[11] + g_RT_qss[3])) *
             (sc[5] * sc[11]);
  }

  {
    // reaction 53: CH2 + HO2 <=> CH2O + OH
    qf[24] = k_f[24] * (sc[6]);
    qr[24] = k_f[24] * exp(-(-g_RT[4] + g_RT[6] - g_RT[11] + g_RT_qss[0])) *
             (sc[4] * sc[11]);
  }

  {
    // reaction 56: CH2 + O2 <=> HCO + OH
    qf[25] = k_f[25] * (sc[3]);
    qr[25] =
      k_f[25] * exp(-(g_RT[3] - g_RT[4] + g_RT_qss[0] - g_RT_qss[2])) * (sc[4]);
  }

  {
    // reaction 57: CH2 + H2 <=> CH3 + H
    qf[26] = k_f[26] * (sc[0]);
    qr[26] = k_f[26] * exp(-(g_RT[0] - g_RT[1] - g_RT[7] + g_RT_qss[0])) *
             (sc[1] * sc[7]);
  }

  {
    // reaction 58: CH2 + CH4 <=> 2 CH3
    qf[27] = k_f[27] * (sc[8]);
    qr[27] = k_f[27] * exp(-(-2.000000 * g_RT[7] + g_RT[8] + g_RT_qss[0])) *
             (sc[7] * sc[7]);
  }

  {
    // reaction 59: CH2(S) + N2 <=> CH2 + N2
    qf[28] = k_f[28] * (sc[12]);
    qr[28] = k_f[28] * exp(-(g_RT[12] - g_RT[12] - g_RT_qss[0] + g_RT_qss[1])) *
             (sc[12]);
  }

  {
    // reaction 60: CH2(S) + O2 <=> CO + H + OH
    qf[29] = k_f[29] * (sc[3]);
    qr[29] = k_f[29] *
             exp(-(-g_RT[1] + g_RT[3] - g_RT[4] - g_RT[9] + g_RT_qss[1])) *
             (refCinv) * (sc[1] * sc[4] * sc[9]);
  }

  {
    // reaction 61: CH2(S) + O2 <=> CO + H2O
    qf[30] = k_f[30] * (sc[3]);
    qr[30] = k_f[30] * exp(-(g_RT[3] - g_RT[5] - g_RT[9] + g_RT_qss[1])) *
             (sc[5] * sc[9]);
  }

  {
    // reaction 62: CH2(S) + H2 <=> CH3 + H
    qf[31] = k_f[31] * (sc[0]);
    qr[31] = k_f[31] * exp(-(g_RT[0] - g_RT[1] - g_RT[7] + g_RT_qss[1])) *
             (sc[1] * sc[7]);
  }

  {
    // reaction 63: CH2(S) + H2O <=> CH2 + H2O
    qf[32] = k_f[32] * (sc[5]);
    qr[32] =
      k_f[32] * exp(-(g_RT[5] - g_RT[5] - g_RT_qss[0] + g_RT_qss[1])) * (sc[5]);
  }

  {
    // reaction 64: CH2(S) + CH4 <=> 2 CH3
    qf[33] = k_f[33] * (sc[8]);
    qr[33] = k_f[33] * exp(-(-2.000000 * g_RT[7] + g_RT[8] + g_RT_qss[1])) *
             (sc[7] * sc[7]);
  }

  {
    // reaction 65: CH2(S) + CO <=> CH2 + CO
    qf[34] = k_f[34] * (sc[9]);
    qr[34] =
      k_f[34] * exp(-(g_RT[9] - g_RT[9] - g_RT_qss[0] + g_RT_qss[1])) * (sc[9]);
  }

  {
    // reaction 66: CH2(S) + CO2 <=> CH2 + CO2
    qf[35] = k_f[35] * (sc[10]);
    qr[35] = k_f[35] * exp(-(g_RT[10] - g_RT[10] - g_RT_qss[0] + g_RT_qss[1])) *
             (sc[10]);
  }

  {
    // reaction 67: CH2(S) + CO2 <=> CH2O + CO
    qf[36] = k_f[36] * (sc[10]);
    qr[36] = k_f[36] * exp(-(-g_RT[9] + g_RT[10] - g_RT[11] + g_RT_qss[1])) *
             (sc[9] * sc[11]);
  }

  {
    // reaction 69: CH3 + HCO <=> CH4 + CO
    qf[37] = k_f[37] * (sc[7]);
    qr[37] = k_f[37] * exp(-(g_RT[7] - g_RT[8] - g_RT[9] + g_RT_qss[2])) *
             (sc[8] * sc[9]);
  }

  {
    // reaction 70: CH2O + CH3 <=> CH4 + HCO
    qf[38] = k_f[38] * (sc[7] * sc[11]);
    qr[38] =
      k_f[38] * exp(-(g_RT[7] - g_RT[8] + g_RT[11] - g_RT_qss[2])) * (sc[8]);
  }

  {
    // reaction 71: HCO + O2 <=> CO + HO2
    qf[39] = k_f[39] * (sc[3]);
    qr[39] = k_f[39] * exp(-(g_RT[3] - g_RT[6] - g_RT[9] + g_RT_qss[2])) *
             (sc[6] * sc[9]);
  }

  {
    // reaction 72: CH2OH + O2 <=> CH2O + HO2
    qf[40] = k_f[40] * (sc[3]);
    qr[40] = k_f[40] * exp(-(g_RT[3] - g_RT[6] - g_RT[11] + g_RT_qss[3])) *
             (sc[6] * sc[11]);
  }

  return;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_k_f_qss(const amrex::Real* tc, amrex::Real invT, amrex::Real* k_f)
{
  // reaction 0: CH2 + H (+M) <=> CH3 (+M)
  k_f[0] = 25000000000 * exp((-0.8) * tc[0]);
  // reaction 2: H + HCO (+M) <=> CH2O (+M)
  k_f[1] = 1090000 * exp((0.48) * tc[0] - (-130.836333109227) * invT);
  // reaction 3: CH2O + H (+M) <=> CH2OH (+M)
  k_f[2] = 540000 * exp((0.454) * tc[0] - (1811.57999689699) * invT);
  // reaction 17: HCO + H2O <=> CO + H + H2O
  k_f[3] = 2244000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
  // reaction 18: HCO + M <=> CO + H + M
  k_f[4] = 187000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
  // reaction 21: CH2 + O <=> H + HCO
  k_f[5] = 80000000;
  // reaction 22: CH2(S) + O <=> CO + H2
  k_f[6] = 15000000;
  // reaction 25: HCO + O <=> CO + OH
  k_f[7] = 30000000;
  // reaction 26: HCO + O <=> CO2 + H
  k_f[8] = 30000000;
  // reaction 27: CH2O + O <=> HCO + OH
  k_f[9] = 39000000 * exp(-(1781.38699694871) * invT);
  // reaction 28: CH2OH + O <=> CH2O + OH
  k_f[10] = 10000000;
  // reaction 30: CH2O + O2 <=> HCO + HO2
  k_f[11] = 100000000 * exp(-(20128.6666321888) * invT);
  // reaction 36: H + HCO <=> CO + H2
  k_f[12] = 73400000;
  // reaction 37: CH2O + H <=> H2 + HCO
  k_f[13] = 23000 * exp((1.05) * tc[0] - (1648.03458051046) * invT);
  // reaction 38: CH2OH + H <=> CH2O + H2
  k_f[14] = 20000000;
  // reaction 39: CH2OH + H <=> CH3 + OH
  k_f[15] = 12000000;
  // reaction 40: CH2OH + H <=> CH2(S) + H2O
  k_f[16] = 6000000;
  // reaction 44: CH2 + OH <=> CH2O + H
  k_f[17] = 20000000;
  // reaction 45: CH2(S) + OH <=> CH2O + H
  k_f[18] = 30000000;
  // reaction 46: CH3 + OH <=> CH2 + H2O
  k_f[19] = 56 * exp((1.6) * tc[0] - (2727.43432866158) * invT);
  // reaction 47: CH3 + OH <=> CH2(S) + H2O
  k_f[20] = 25010000;
  // reaction 50: HCO + OH <=> CO + H2O
  k_f[21] = 50000000;
  // reaction 51: CH2O + OH <=> H2O + HCO
  k_f[22] = 3430 * exp((1.18) * tc[0] - (-224.93784961471) * invT);
  // reaction 52: CH2OH + OH <=> CH2O + H2O
  k_f[23] = 5000000;
  // reaction 53: CH2 + HO2 <=> CH2O + OH
  k_f[24] = 20000000;
  // reaction 56: CH2 + O2 <=> HCO + OH
  k_f[25] = 13200000 * exp(-(754.82499870708) * invT);
  // reaction 57: CH2 + H2 <=> CH3 + H
  k_f[26] = 0.5 * exp((2) * tc[0] - (3638.25649376812) * invT);
  // reaction 58: CH2 + CH4 <=> 2 CH3
  k_f[27] = 2.46 * exp((2) * tc[0] - (4161.60182620503) * invT);
  // reaction 59: CH2(S) + N2 <=> CH2 + N2
  k_f[28] = 15000000 * exp(-(301.929999482832) * invT);
  // reaction 60: CH2(S) + O2 <=> CO + H + OH
  k_f[29] = 28000000;
  // reaction 61: CH2(S) + O2 <=> CO + H2O
  k_f[30] = 12000000;
  // reaction 62: CH2(S) + H2 <=> CH3 + H
  k_f[31] = 70000000;
  // reaction 63: CH2(S) + H2O <=> CH2 + H2O
  k_f[32] = 30000000;
  // reaction 64: CH2(S) + CH4 <=> 2 CH3
  k_f[33] = 16000000 * exp(-(-286.83349950869) * invT);
  // reaction 65: CH2(S) + CO <=> CH2 + CO
  k_f[34] = 9000000;
  // reaction 66: CH2(S) + CO2 <=> CH2 + CO2
  k_f[35] = 7000000;
  // reaction 67: CH2(S) + CO2 <=> CH2O + CO
  k_f[36] = 14000000;
  // reaction 69: CH3 + HCO <=> CH4 + CO
  k_f[37] = 26480000;
  // reaction 70: CH2O + CH3 <=> CH4 + HCO
  k_f[38] = 0.00332 * exp((2.81) * tc[0] - (2948.84966161566) * invT);
  // reaction 71: HCO + O2 <=> CO + HO2
  k_f[39] = 7600000 * exp(-(201.286666321888) * invT);
  // reaction 72: CH2OH + O2 <=> CH2O + HO2
  k_f[40] = 18000000 * exp(-(452.894999224248) * invT);

  return;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_sc_qss(amrex::Real* sc_qss, amrex::Real* qf_co, amrex::Real* qr_co)
{
  amrex::Real epsilon = 1e-12;

  // QSSA coupling between HCO  CH2OH  CH2(S)  CH2
  // QSSA species 2: HCO

  amrex::Real HCO_num = epsilon + 1.0 * qr_co[1] + 1.0 * qr_co[3] +
                        1.0 * qr_co[4] + 1.0 * qr_co[7] + 1.0 * qr_co[8] +
                        1.0 * qf_co[9] + 1.0 * qf_co[11] + 1.0 * qr_co[12] +
                        1.0 * qf_co[13] + 1.0 * qr_co[21] + 1.0 * qf_co[22] +
                        1.0 * qr_co[37] + 1.0 * qf_co[38] + 1.0 * qr_co[39];
  amrex::Real HCO_denom = epsilon - qf_co[1] - qf_co[3] - qf_co[4] - qr_co[5] -
                          qf_co[7] - qf_co[8] - qr_co[9] - qr_co[11] -
                          qf_co[12] - qr_co[13] - qf_co[21] - qr_co[22] -
                          qr_co[25] - qf_co[37] - qr_co[38] - qf_co[39];
  amrex::Real HCO_rhs = -HCO_num / HCO_denom;

  amrex::Real HCO_CH2 =
    (epsilon + 1.0 * qf_co[5] + 1.0 * qf_co[25]) / HCO_denom;

  // QSSA species 3: CH2OH

  amrex::Real CH2OH_num = epsilon + 1.0 * qf_co[2] + 1.0 * qr_co[10] +
                          1.0 * qr_co[14] + 1.0 * qr_co[15] + 1.0 * qr_co[23] +
                          1.0 * qr_co[40];
  amrex::Real CH2OH_denom = epsilon - qr_co[2] - qf_co[10] - qf_co[14] -
                            qf_co[15] - qf_co[16] - qf_co[23] - qf_co[40];
  amrex::Real CH2OH_rhs = -CH2OH_num / CH2OH_denom;

  amrex::Real CH2OH_CH2S = (epsilon + 1.0 * qr_co[16]) / CH2OH_denom;

  // QSSA species 1: CH2(S)

  amrex::Real CH2S_num = epsilon + 1.0 * qr_co[6] + 1.0 * qr_co[18] +
                         1.0 * qf_co[20] + 1.0 * qr_co[29] + 1.0 * qr_co[30] +
                         1.0 * qr_co[31] + 1.0 * qr_co[33] + 1.0 * qr_co[36];
  amrex::Real CH2S_denom = epsilon - qf_co[6] - qr_co[16] - qf_co[18] -
                           qr_co[20] - qf_co[28] - qf_co[29] - qf_co[30] -
                           qf_co[31] - qf_co[32] - qf_co[33] - qf_co[34] -
                           qf_co[35] - qf_co[36];
  amrex::Real CH2S_rhs = -CH2S_num / CH2S_denom;

  amrex::Real CH2S_CH2OH = (epsilon + 1.0 * qf_co[16]) / CH2S_denom;
  amrex::Real CH2S_CH2 = (epsilon + 1.0 * qr_co[28] + 1.0 * qr_co[32] +
                          1.0 * qr_co[34] + 1.0 * qr_co[35]) /
                         CH2S_denom;

  // QSSA species 0: CH2

  amrex::Real CH2_num = epsilon + 1.0 * qr_co[0] + 1.0 * qr_co[17] +
                        1.0 * qf_co[19] + 1.0 * qr_co[24] + 1.0 * qr_co[26] +
                        1.0 * qr_co[27];
  amrex::Real CH2_denom = epsilon - qf_co[0] - qf_co[5] - qf_co[17] -
                          qr_co[19] - qf_co[24] - qf_co[25] - qf_co[26] -
                          qf_co[27] - qr_co[28] - qr_co[32] - qr_co[34] -
                          qr_co[35];
  amrex::Real CH2_rhs = -CH2_num / CH2_denom;

  amrex::Real CH2_HCO =
    (epsilon + 1.0 * qr_co[5] + 1.0 * qr_co[25]) / CH2_denom;
  amrex::Real CH2_CH2S = (epsilon + 1.0 * qf_co[28] + 1.0 * qf_co[32] +
                          1.0 * qf_co[34] + 1.0 * qf_co[35]) /
                         CH2_denom;

  // Putting it all together
  amrex::Real H_0 = CH2_HCO;
  amrex::Real H_1 = CH2S_CH2OH;
  amrex::Real H_2 = CH2_CH2S / (1 - CH2OH_CH2S * H_1);
  sc_qss[0] = ((CH2_rhs - HCO_rhs * H_0) - (CH2S_rhs - CH2OH_rhs * H_1) * H_2) /
              ((1 - HCO_CH2 * H_0) - CH2S_CH2 * H_2);

  sc_qss[1] = ((CH2S_rhs - CH2OH_rhs * H_1) - (CH2S_CH2 * sc_qss[0])) /
              (1 - CH2OH_CH2S * H_1);

  sc_qss[3] = CH2OH_rhs - (+CH2OH_CH2S * sc_qss[1]);

  sc_qss[2] = HCO_rhs - (HCO_CH2 * sc_qss[0]);

  return;
}

// GPU version of productionRate: no more use of thermo namespace vectors
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_qfqr(
  amrex::Real* qf,
  amrex::Real* qr,
  const amrex::Real* sc,
  const amrex::Real* sc_qss,
  const amrex::Real* tc,
  const amrex::Real invT)
{

  // reaction 0: CH2 + H (+M) <=> CH3 (+M)
  qf[0] = sc[1] * sc_qss[0];
  qr[0] = sc[7];

  // reaction 1: CH3 + H (+M) <=> CH4 (+M)
  qf[1] = sc[1] * sc[7];
  qr[1] = sc[8];

  // reaction 2: H + HCO (+M) <=> CH2O (+M)
  qf[2] = sc[1] * sc_qss[2];
  qr[2] = sc[11];

  // reaction 3: CH2O + H (+M) <=> CH2OH (+M)
  qf[3] = sc[1] * sc[11];
  qr[3] = sc_qss[3];

  // reaction 4: CO + H2 (+M) <=> CH2O (+M)
  qf[4] = sc[0] * sc[9];
  qr[4] = sc[11];

  // reaction 5: 2 O + M <=> O2 + M
  qf[5] = (sc[2] * sc[2]);
  qr[5] = sc[3];

  // reaction 6: H + O + M <=> OH + M
  qf[6] = sc[1] * sc[2];
  qr[6] = sc[4];

  // reaction 7: CO + O + M <=> CO2 + M
  qf[7] = sc[2] * sc[9];
  qr[7] = sc[10];

  // reaction 8: H + O2 + M <=> HO2 + M
  qf[8] = sc[1] * sc[3];
  qr[8] = sc[6];

  // reaction 9: H + O2 + O2 <=> HO2 + O2
  qf[9] = sc[1] * (sc[3] * sc[3]);
  qr[9] = sc[3] * sc[6];

  // reaction 10: H + O2 + H2O <=> HO2 + H2O
  qf[10] = sc[1] * sc[3] * sc[5];
  qr[10] = sc[5] * sc[6];

  // reaction 11: H + O2 + N2 <=> HO2 + N2
  qf[11] = sc[1] * sc[3] * sc[12];
  qr[11] = sc[6] * sc[12];

  // reaction 12: 2 H + M <=> H2 + M
  qf[12] = (sc[1] * sc[1]);
  qr[12] = sc[0];

  // reaction 13: 2 H + H2 <=> H2 + H2
  qf[13] = sc[0] * (sc[1] * sc[1]);
  qr[13] = (sc[0] * sc[0]);

  // reaction 14: 2 H + H2O <=> H2 + H2O
  qf[14] = (sc[1] * sc[1]) * sc[5];
  qr[14] = sc[0] * sc[5];

  // reaction 15: 2 H + CO2 <=> H2 + CO2
  qf[15] = (sc[1] * sc[1]) * sc[10];
  qr[15] = sc[0] * sc[10];

  // reaction 16: H + OH + M <=> H2O + M
  qf[16] = sc[1] * sc[4];
  qr[16] = sc[5];

  // reaction 17: HCO + H2O <=> CO + H + H2O
  qf[17] = sc[5] * sc_qss[2];
  qr[17] = sc[1] * sc[5] * sc[9];

  // reaction 18: HCO + M <=> CO + H + M
  qf[18] = sc_qss[2];
  qr[18] = sc[1] * sc[9];

  // reaction 19: H2 + O <=> H + OH
  qf[19] = sc[0] * sc[2];
  qr[19] = sc[1] * sc[4];

  // reaction 20: HO2 + O <=> O2 + OH
  qf[20] = sc[2] * sc[6];
  qr[20] = sc[3] * sc[4];

  // reaction 21: CH2 + O <=> H + HCO
  qf[21] = sc[2] * sc_qss[0];
  qr[21] = sc[1] * sc_qss[2];

  // reaction 22: CH2(S) + O <=> CO + H2
  qf[22] = sc[2] * sc_qss[1];
  qr[22] = sc[0] * sc[9];

  // reaction 23: CH3 + O <=> CH2O + H
  qf[23] = sc[2] * sc[7];
  qr[23] = sc[1] * sc[11];

  // reaction 24: CH4 + O <=> CH3 + OH
  qf[24] = sc[2] * sc[8];
  qr[24] = sc[4] * sc[7];

  // reaction 25: HCO + O <=> CO + OH
  qf[25] = sc[2] * sc_qss[2];
  qr[25] = sc[4] * sc[9];

  // reaction 26: HCO + O <=> CO2 + H
  qf[26] = sc[2] * sc_qss[2];
  qr[26] = sc[1] * sc[10];

  // reaction 27: CH2O + O <=> HCO + OH
  qf[27] = sc[2] * sc[11];
  qr[27] = sc[4] * sc_qss[2];

  // reaction 28: CH2OH + O <=> CH2O + OH
  qf[28] = sc[2] * sc_qss[3];
  qr[28] = sc[4] * sc[11];

  // reaction 29: CO + O2 <=> CO2 + O
  qf[29] = sc[3] * sc[9];
  qr[29] = sc[2] * sc[10];

  // reaction 30: CH2O + O2 <=> HCO + HO2
  qf[30] = sc[3] * sc[11];
  qr[30] = sc[6] * sc_qss[2];

  // reaction 31: H + O2 <=> O + OH
  qf[31] = sc[1] * sc[3];
  qr[31] = sc[2] * sc[4];

  // reaction 32: H + HO2 <=> H2O + O
  qf[32] = sc[1] * sc[6];
  qr[32] = sc[2] * sc[5];

  // reaction 33: H + HO2 <=> H2 + O2
  qf[33] = sc[1] * sc[6];
  qr[33] = sc[0] * sc[3];

  // reaction 34: H + HO2 <=> 2 OH
  qf[34] = sc[1] * sc[6];
  qr[34] = (sc[4] * sc[4]);

  // reaction 35: CH4 + H <=> CH3 + H2
  qf[35] = sc[1] * sc[8];
  qr[35] = sc[0] * sc[7];

  // reaction 36: H + HCO <=> CO + H2
  qf[36] = sc[1] * sc_qss[2];
  qr[36] = sc[0] * sc[9];

  // reaction 37: CH2O + H <=> H2 + HCO
  qf[37] = sc[1] * sc[11];
  qr[37] = sc[0] * sc_qss[2];

  // reaction 38: CH2OH + H <=> CH2O + H2
  qf[38] = sc[1] * sc_qss[3];
  qr[38] = sc[0] * sc[11];

  // reaction 39: CH2OH + H <=> CH3 + OH
  qf[39] = sc[1] * sc_qss[3];
  qr[39] = sc[4] * sc[7];

  // reaction 40: CH2OH + H <=> CH2(S) + H2O
  qf[40] = sc[1] * sc_qss[3];
  qr[40] = sc[5] * sc_qss[1];

  // reaction 41: H2 + OH <=> H + H2O
  qf[41] = sc[0] * sc[4];
  qr[41] = sc[1] * sc[5];

  // reaction 42: 2 OH <=> H2O + O
  qf[42] = (sc[4] * sc[4]);
  qr[42] = sc[2] * sc[5];

  // reaction 43: HO2 + OH <=> H2O + O2
  qf[43] = sc[4] * sc[6];
  qr[43] = sc[3] * sc[5];

  // reaction 44: CH2 + OH <=> CH2O + H
  qf[44] = sc[4] * sc_qss[0];
  qr[44] = sc[1] * sc[11];

  // reaction 45: CH2(S) + OH <=> CH2O + H
  qf[45] = sc[4] * sc_qss[1];
  qr[45] = sc[1] * sc[11];

  // reaction 46: CH3 + OH <=> CH2 + H2O
  qf[46] = sc[4] * sc[7];
  qr[46] = sc[5] * sc_qss[0];

  // reaction 47: CH3 + OH <=> CH2(S) + H2O
  qf[47] = sc[4] * sc[7];
  qr[47] = sc[5] * sc_qss[1];

  // reaction 48: CH4 + OH <=> CH3 + H2O
  qf[48] = sc[4] * sc[8];
  qr[48] = sc[5] * sc[7];

  // reaction 49: CO + OH <=> CO2 + H
  qf[49] = sc[4] * sc[9];
  qr[49] = sc[1] * sc[10];

  // reaction 50: HCO + OH <=> CO + H2O
  qf[50] = sc[4] * sc_qss[2];
  qr[50] = sc[5] * sc[9];

  // reaction 51: CH2O + OH <=> H2O + HCO
  qf[51] = sc[4] * sc[11];
  qr[51] = sc[5] * sc_qss[2];

  // reaction 52: CH2OH + OH <=> CH2O + H2O
  qf[52] = sc[4] * sc_qss[3];
  qr[52] = sc[5] * sc[11];

  // reaction 53: CH2 + HO2 <=> CH2O + OH
  qf[53] = sc[6] * sc_qss[0];
  qr[53] = sc[4] * sc[11];

  // reaction 54: CH3 + HO2 <=> CH4 + O2
  qf[54] = sc[6] * sc[7];
  qr[54] = sc[3] * sc[8];

  // reaction 55: CO + HO2 <=> CO2 + OH
  qf[55] = sc[6] * sc[9];
  qr[55] = sc[4] * sc[10];

  // reaction 56: CH2 + O2 <=> HCO + OH
  qf[56] = sc[3] * sc_qss[0];
  qr[56] = sc[4] * sc_qss[2];

  // reaction 57: CH2 + H2 <=> CH3 + H
  qf[57] = sc[0] * sc_qss[0];
  qr[57] = sc[1] * sc[7];

  // reaction 58: CH2 + CH4 <=> 2 CH3
  qf[58] = sc[8] * sc_qss[0];
  qr[58] = (sc[7] * sc[7]);

  // reaction 59: CH2(S) + N2 <=> CH2 + N2
  qf[59] = sc[12] * sc_qss[1];
  qr[59] = sc[12] * sc_qss[0];

  // reaction 60: CH2(S) + O2 <=> CO + H + OH
  qf[60] = sc[3] * sc_qss[1];
  qr[60] = sc[1] * sc[4] * sc[9];

  // reaction 61: CH2(S) + O2 <=> CO + H2O
  qf[61] = sc[3] * sc_qss[1];
  qr[61] = sc[5] * sc[9];

  // reaction 62: CH2(S) + H2 <=> CH3 + H
  qf[62] = sc[0] * sc_qss[1];
  qr[62] = sc[1] * sc[7];

  // reaction 63: CH2(S) + H2O <=> CH2 + H2O
  qf[63] = sc[5] * sc_qss[1];
  qr[63] = sc[5] * sc_qss[0];

  // reaction 64: CH2(S) + CH4 <=> 2 CH3
  qf[64] = sc[8] * sc_qss[1];
  qr[64] = (sc[7] * sc[7]);

  // reaction 65: CH2(S) + CO <=> CH2 + CO
  qf[65] = sc[9] * sc_qss[1];
  qr[65] = sc[9] * sc_qss[0];

  // reaction 66: CH2(S) + CO2 <=> CH2 + CO2
  qf[66] = sc[10] * sc_qss[1];
  qr[66] = sc[10] * sc_qss[0];

  // reaction 67: CH2(S) + CO2 <=> CH2O + CO
  qf[67] = sc[10] * sc_qss[1];
  qr[67] = sc[9] * sc[11];

  // reaction 68: CH3 + O2 <=> CH2O + OH
  qf[68] = sc[3] * sc[7];
  qr[68] = sc[4] * sc[11];

  // reaction 69: CH3 + HCO <=> CH4 + CO
  qf[69] = sc[7] * sc_qss[2];
  qr[69] = sc[8] * sc[9];

  // reaction 70: CH2O + CH3 <=> CH4 + HCO
  qf[70] = sc[7] * sc[11];
  qr[70] = sc[8] * sc_qss[2];

  // reaction 71: HCO + O2 <=> CO + HO2
  qf[71] = sc[3] * sc_qss[2];
  qr[71] = sc[6] * sc[9];

  // reaction 72: CH2OH + O2 <=> CH2O + HO2
  qf[72] = sc[3] * sc_qss[3];
  qr[72] = sc[6] * sc[11];

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 13; ++i) {
    mixture += sc[i];
  }

  for (int i = 0; i < 4; ++i) {
    mixture += sc_qss[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[13];
  gibbs(g_RT, tc);
  amrex::Real g_RT_qss[4];
  gibbs_qss(g_RT_qss, tc);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 * invT;
  amrex::Real refCinv = 1 / refC;

  // Evaluate the kfs
  amrex::Real k_f, Corr;
  amrex::Real redP, F, logPred, logFcent, troe_c, troe_n, troe, F_troe;

  // reaction 0:  CH2 + H (+M) <=> CH3 (+M)
  k_f = 25000000000 * exp((-0.8) * tc[0]);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[8] + (0.5) * sc[9] + sc[10];
  redP = Corr / k_f * 3.2e+15 * exp(-3.14 * tc[0] - (618.956498939805) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.32) * exp(-tc[1] * 0.0128205128205128) +
    0.68 * exp(-tc[1] * 0.00050125313283208) + exp(-5590 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[0] *= Corr * k_f;
  qr[0] *= Corr * k_f * exp(-(g_RT[1] - g_RT[7] + g_RT_qss[0])) * (refC);
  // reaction 1:  CH3 + H (+M) <=> CH4 (+M)
  k_f = 12700000000 * exp((-0.63) * tc[0] - (192.731983003208) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[8] + (0.5) * sc[9] + sc[10];
  redP =
    Corr / k_f * 2.477e+21 * exp(-4.76 * tc[0] - (1227.84866456352) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.217) * exp(-tc[1] * 0.0135135135135135) +
    0.783 * exp(-tc[1] * 0.000340020401224073) + exp(-6964 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[1] *= Corr * k_f;
  qr[1] *= Corr * k_f * exp(-(g_RT[1] + g_RT[7] - g_RT[8])) * (refC);
  // reaction 2:  H + HCO (+M) <=> CH2O (+M)
  k_f = 1090000 * exp((0.48) * tc[0] - (-130.836333109227) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[8] + (0.5) * sc[9] + sc[10];
  redP =
    Corr / k_f * 1350000000000 * exp(-2.57 * tc[0] - (717.083748771726) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2176) * exp(-tc[1] * 0.003690036900369) +
    0.7824 * exp(-tc[1] * 0.000362976406533575) + exp(-6570 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[2] *= Corr * k_f;
  qr[2] *= Corr * k_f * exp(-(g_RT[1] - g_RT[11] + g_RT_qss[2])) * (refC);
  // reaction 3:  CH2O + H (+M) <=> CH2OH (+M)
  k_f = 540000 * exp((0.454) * tc[0] - (1811.57999689699) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[8] + (0.5) * sc[9] + sc[10];
  redP = Corr / k_f * 1.27e+20 * exp(-4.82 * tc[0] - (3286.00482770482) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2813) * exp(-tc[1] * 0.00970873786407767) +
    0.7187 * exp(-tc[1] * 0.000774593338497289) + exp(-4160 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[3] *= Corr * k_f;
  qr[3] *= Corr * k_f * exp(-(g_RT[1] + g_RT[11] - g_RT_qss[3])) * (refC);
  // reaction 4:  CO + H2 (+M) <=> CH2O (+M)
  k_f = 43 * exp((1.5) * tc[0] - (40056.0465980557) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[8] + (0.5) * sc[9] + sc[10];
  redP = Corr / k_f * 5.07e+15 * exp(-3.42 * tc[0] - (42446.3257606281) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.0679999999999999) * exp(-tc[1] * 0.0050761421319797) +
    0.932 * exp(-tc[1] * 0.000649350649350649) + exp(-10300 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[4] *= Corr * k_f;
  qr[4] *= Corr * k_f * exp(-(g_RT[0] + g_RT[9] - g_RT[11])) * (refC);
  // reaction 5:  2 O + M <=> O2 + M
  k_f = 120000 * exp((-1) * tc[0]);
  Corr = mixture + (1.4) * sc[0] + (14.4) * sc[5] + sc[8] + (0.75) * sc[9] +
         (2.6) * sc[10];
  qf[5] *= Corr * k_f;
  qr[5] *= Corr * k_f * exp(-(2.000000 * g_RT[2] - g_RT[3])) * (refC);
  // reaction 6:  H + O + M <=> OH + M
  k_f = 500000 * exp((-1) * tc[0]);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[8] + (0.5) * sc[9] + sc[10];
  qf[6] *= Corr * k_f;
  qr[6] *= Corr * k_f * exp(-(g_RT[1] + g_RT[2] - g_RT[4])) * (refC);
  // reaction 7:  CO + O + M <=> CO2 + M
  k_f = 602 * exp(-(1509.64999741416) * invT);
  Corr = mixture + sc[0] + (5) * sc[3] + (5) * sc[5] + sc[8] + (0.5) * sc[9] +
         (2.5) * sc[10];
  qf[7] *= Corr * k_f;
  qr[7] *= Corr * k_f * exp(-(g_RT[2] + g_RT[9] - g_RT[10])) * (refC);
  // reaction 8:  H + O2 + M <=> HO2 + M
  k_f = 2800000 * exp((-0.86) * tc[0]);
  Corr = mixture + (-1) * sc[3] + (-1) * sc[5] + (-0.25) * sc[9] +
         (0.5) * sc[10] + (-1) * sc[12];
  qf[8] *= Corr * k_f;
  qr[8] *= Corr * k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC);
  // reaction 9:  H + O2 + O2 <=> HO2 + O2
  k_f = 300000000 * exp((-1.72) * tc[0]);
  qf[9] *= k_f;
  qr[9] *= k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC);
  // reaction 10:  H + O2 + H2O <=> HO2 + H2O
  k_f = 9380000 * exp((-0.76) * tc[0]);
  qf[10] *= k_f;
  qr[10] *= k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC);
  // reaction 11:  H + O2 + N2 <=> HO2 + N2
  k_f = 375000000 * exp((-1.72) * tc[0]);
  qf[11] *= k_f;
  qr[11] *= k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC);
  // reaction 12:  2 H + M <=> H2 + M
  k_f = 1000000 * exp((-1) * tc[0]);
  Corr = mixture + (-1) * sc[0] + (-1) * sc[5] + sc[8] + (-1) * sc[10];
  qf[12] *= Corr * k_f;
  qr[12] *= Corr * k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC);
  // reaction 13:  2 H + H2 <=> H2 + H2
  k_f = 90000 * exp((-0.6) * tc[0]);
  qf[13] *= k_f;
  qr[13] *= k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC);
  // reaction 14:  2 H + H2O <=> H2 + H2O
  k_f = 60000000 * exp((-1.25) * tc[0]);
  qf[14] *= k_f;
  qr[14] *= k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC);
  // reaction 15:  2 H + CO2 <=> H2 + CO2
  k_f = 550000000 * exp((-2) * tc[0]);
  qf[15] *= k_f;
  qr[15] *= k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC);
  // reaction 16:  H + OH + M <=> H2O + M
  k_f = 22000000000 * exp((-2) * tc[0]);
  Corr = mixture + (-0.27) * sc[0] + (2.65) * sc[5] + sc[8];
  qf[16] *= Corr * k_f;
  qr[16] *= Corr * k_f * exp(-(g_RT[1] + g_RT[4] - g_RT[5])) * (refC);
  // reaction 17:  HCO + H2O <=> CO + H + H2O
  k_f = 2244000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
  qf[17] *= k_f;
  qr[17] *= k_f * exp(-(-g_RT[1] - g_RT[9] + g_RT_qss[2])) * (refCinv);
  // reaction 18:  HCO + M <=> CO + H + M
  k_f = 187000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
  Corr = mixture + sc[0] + (-1) * sc[5] + sc[8] + (0.5) * sc[9] + sc[10];
  qf[18] *= Corr * k_f;
  qr[18] *= Corr * k_f * exp(-(-g_RT[1] - g_RT[9] + g_RT_qss[2])) * (refCinv);
  // reaction 19:  H2 + O <=> H + OH
  k_f = 0.05 * exp((2.67) * tc[0] - (3165.23282791169) * invT);
  qf[19] *= k_f;
  qr[19] *= k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[2] - g_RT[4]));
  // reaction 20:  HO2 + O <=> O2 + OH
  k_f = 20000000;
  qf[20] *= k_f;
  qr[20] *= k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[4] + g_RT[6]));
  // reaction 21:  CH2 + O <=> H + HCO
  k_f = 80000000;
  qf[21] *= k_f;
  qr[21] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT_qss[0] - g_RT_qss[2]));
  // reaction 22:  CH2(S) + O <=> CO + H2
  k_f = 15000000;
  qf[22] *= k_f;
  qr[22] *= k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[9] + g_RT_qss[1]));
  // reaction 23:  CH3 + O <=> CH2O + H
  k_f = 84300000;
  qf[23] *= k_f;
  qr[23] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[7] - g_RT[11]));
  // reaction 24:  CH4 + O <=> CH3 + OH
  k_f = 1020 * exp((1.5) * tc[0] - (4327.66332592059) * invT);
  qf[24] *= k_f;
  qr[24] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[7] + g_RT[8]));
  // reaction 25:  HCO + O <=> CO + OH
  k_f = 30000000;
  qf[25] *= k_f;
  qr[25] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[9] + g_RT_qss[2]));
  // reaction 26:  HCO + O <=> CO2 + H
  k_f = 30000000;
  qf[26] *= k_f;
  qr[26] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[10] + g_RT_qss[2]));
  // reaction 27:  CH2O + O <=> HCO + OH
  k_f = 39000000 * exp(-(1781.38699694871) * invT);
  qf[27] *= k_f;
  qr[27] *= k_f * exp(-(g_RT[2] - g_RT[4] + g_RT[11] - g_RT_qss[2]));
  // reaction 28:  CH2OH + O <=> CH2O + OH
  k_f = 10000000;
  qf[28] *= k_f;
  qr[28] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[11] + g_RT_qss[3]));
  // reaction 29:  CO + O2 <=> CO2 + O
  k_f = 2500000 * exp(-(24053.7566254656) * invT);
  qf[29] *= k_f;
  qr[29] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[9] - g_RT[10]));
  // reaction 30:  CH2O + O2 <=> HCO + HO2
  k_f = 100000000 * exp(-(20128.6666321888) * invT);
  qf[30] *= k_f;
  qr[30] *= k_f * exp(-(g_RT[3] - g_RT[6] + g_RT[11] - g_RT_qss[2]));
  // reaction 31:  H + O2 <=> O + OH
  k_f = 83000000 * exp(-(7252.86180424342) * invT);
  qf[31] *= k_f;
  qr[31] *= k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[3] - g_RT[4]));
  // reaction 32:  H + HO2 <=> H2O + O
  k_f = 3970000 * exp(-(337.658382754967) * invT);
  qf[32] *= k_f;
  qr[32] *= k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[5] + g_RT[6]));
  // reaction 33:  H + HO2 <=> H2 + O2
  k_f = 28000000 * exp(-(537.435399079441) * invT);
  qf[33] *= k_f;
  qr[33] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[3] + g_RT[6]));
  // reaction 34:  H + HO2 <=> 2 OH
  k_f = 134000000 * exp(-(319.542582785997) * invT);
  qf[34] *= k_f;
  qr[34] *= k_f * exp(-(g_RT[1] - 2.000000 * g_RT[4] + g_RT[6]));
  // reaction 35:  CH4 + H <=> CH3 + H2
  k_f = 660 * exp((1.62) * tc[0] - (5454.86865732316) * invT);
  qf[35] *= k_f;
  qr[35] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[7] + g_RT[8]));
  // reaction 36:  H + HCO <=> CO + H2
  k_f = 73400000;
  qf[36] *= k_f;
  qr[36] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[9] + g_RT_qss[2]));
  // reaction 37:  CH2O + H <=> H2 + HCO
  k_f = 23000 * exp((1.05) * tc[0] - (1648.03458051046) * invT);
  qf[37] *= k_f;
  qr[37] *= k_f * exp(-(-g_RT[0] + g_RT[1] + g_RT[11] - g_RT_qss[2]));
  // reaction 38:  CH2OH + H <=> CH2O + H2
  k_f = 20000000;
  qf[38] *= k_f;
  qr[38] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[11] + g_RT_qss[3]));
  // reaction 39:  CH2OH + H <=> CH3 + OH
  k_f = 12000000;
  qf[39] *= k_f;
  qr[39] *= k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[7] + g_RT_qss[3]));
  // reaction 40:  CH2OH + H <=> CH2(S) + H2O
  k_f = 6000000;
  qf[40] *= k_f;
  qr[40] *= k_f * exp(-(g_RT[1] - g_RT[5] - g_RT_qss[1] + g_RT_qss[3]));
  // reaction 41:  H2 + OH <=> H + H2O
  k_f = 216 * exp((1.51) * tc[0] - (1726.03316371019) * invT);
  qf[41] *= k_f;
  qr[41] *= k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[4] - g_RT[5]));
  // reaction 42:  2 OH <=> H2O + O
  k_f = 0.0357 * exp((2.4) * tc[0] - (-1061.78716484796) * invT);
  qf[42] *= k_f;
  qr[42] *= k_f * exp(-(-g_RT[2] + 2.000000 * g_RT[4] - g_RT[5]));
  // reaction 43:  HO2 + OH <=> H2O + O2
  k_f = 29000000 * exp(-(-251.60833290236) * invT);
  qf[43] *= k_f;
  qr[43] *= k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[5] + g_RT[6]));
  // reaction 44:  CH2 + OH <=> CH2O + H
  k_f = 20000000;
  qf[44] *= k_f;
  qr[44] *= k_f * exp(-(-g_RT[1] + g_RT[4] - g_RT[11] + g_RT_qss[0]));
  // reaction 45:  CH2(S) + OH <=> CH2O + H
  k_f = 30000000;
  qf[45] *= k_f;
  qr[45] *= k_f * exp(-(-g_RT[1] + g_RT[4] - g_RT[11] + g_RT_qss[1]));
  // reaction 46:  CH3 + OH <=> CH2 + H2O
  k_f = 56 * exp((1.6) * tc[0] - (2727.43432866158) * invT);
  qf[46] *= k_f;
  qr[46] *= k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[7] - g_RT_qss[0]));
  // reaction 47:  CH3 + OH <=> CH2(S) + H2O
  k_f = 25010000;
  qf[47] *= k_f;
  qr[47] *= k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[7] - g_RT_qss[1]));
  // reaction 48:  CH4 + OH <=> CH3 + H2O
  k_f = 100 * exp((1.6) * tc[0] - (1570.03599731073) * invT);
  qf[48] *= k_f;
  qr[48] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[7] + g_RT[8]));
  // reaction 49:  CO + OH <=> CO2 + H
  k_f = 47.6 * exp((1.228) * tc[0] - (35.2251666063304) * invT);
  qf[49] *= k_f;
  qr[49] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[9] - g_RT[10]));
  // reaction 50:  HCO + OH <=> CO + H2O
  k_f = 50000000;
  qf[50] *= k_f;
  qr[50] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[9] + g_RT_qss[2]));
  // reaction 51:  CH2O + OH <=> H2O + HCO
  k_f = 3430 * exp((1.18) * tc[0] - (-224.93784961471) * invT);
  qf[51] *= k_f;
  qr[51] *= k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[11] - g_RT_qss[2]));
  // reaction 52:  CH2OH + OH <=> CH2O + H2O
  k_f = 5000000;
  qf[52] *= k_f;
  qr[52] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[11] + g_RT_qss[3]));
  // reaction 53:  CH2 + HO2 <=> CH2O + OH
  k_f = 20000000;
  qf[53] *= k_f;
  qr[53] *= k_f * exp(-(-g_RT[4] + g_RT[6] - g_RT[11] + g_RT_qss[0]));
  // reaction 54:  CH3 + HO2 <=> CH4 + O2
  k_f = 1000000;
  qf[54] *= k_f;
  qr[54] *= k_f * exp(-(-g_RT[3] + g_RT[6] + g_RT[7] - g_RT[8]));
  // reaction 55:  CO + HO2 <=> CO2 + OH
  k_f = 150000000 * exp(-(11875.9133129914) * invT);
  qf[55] *= k_f;
  qr[55] *= k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[9] - g_RT[10]));
  // reaction 56:  CH2 + O2 <=> HCO + OH
  k_f = 13200000 * exp(-(754.82499870708) * invT);
  qf[56] *= k_f;
  qr[56] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT_qss[0] - g_RT_qss[2]));
  // reaction 57:  CH2 + H2 <=> CH3 + H
  k_f = 0.5 * exp((2) * tc[0] - (3638.25649376812) * invT);
  qf[57] *= k_f;
  qr[57] *= k_f * exp(-(g_RT[0] - g_RT[1] - g_RT[7] + g_RT_qss[0]));
  // reaction 58:  CH2 + CH4 <=> 2 CH3
  k_f = 2.46 * exp((2) * tc[0] - (4161.60182620503) * invT);
  qf[58] *= k_f;
  qr[58] *= k_f * exp(-(-2.000000 * g_RT[7] + g_RT[8] + g_RT_qss[0]));
  // reaction 59:  CH2(S) + N2 <=> CH2 + N2
  k_f = 15000000 * exp(-(301.929999482832) * invT);
  qf[59] *= k_f;
  qr[59] *= k_f * exp(-(g_RT[12] - g_RT[12] - g_RT_qss[0] + g_RT_qss[1]));
  // reaction 60:  CH2(S) + O2 <=> CO + H + OH
  k_f = 28000000;
  qf[60] *= k_f;
  qr[60] *= k_f * exp(-(-g_RT[1] + g_RT[3] - g_RT[4] - g_RT[9] + g_RT_qss[1])) *
            (refCinv);
  // reaction 61:  CH2(S) + O2 <=> CO + H2O
  k_f = 12000000;
  qf[61] *= k_f;
  qr[61] *= k_f * exp(-(g_RT[3] - g_RT[5] - g_RT[9] + g_RT_qss[1]));
  // reaction 62:  CH2(S) + H2 <=> CH3 + H
  k_f = 70000000;
  qf[62] *= k_f;
  qr[62] *= k_f * exp(-(g_RT[0] - g_RT[1] - g_RT[7] + g_RT_qss[1]));
  // reaction 63:  CH2(S) + H2O <=> CH2 + H2O
  k_f = 30000000;
  qf[63] *= k_f;
  qr[63] *= k_f * exp(-(g_RT[5] - g_RT[5] - g_RT_qss[0] + g_RT_qss[1]));
  // reaction 64:  CH2(S) + CH4 <=> 2 CH3
  k_f = 16000000 * exp(-(-286.83349950869) * invT);
  qf[64] *= k_f;
  qr[64] *= k_f * exp(-(-2.000000 * g_RT[7] + g_RT[8] + g_RT_qss[1]));
  // reaction 65:  CH2(S) + CO <=> CH2 + CO
  k_f = 9000000;
  qf[65] *= k_f;
  qr[65] *= k_f * exp(-(g_RT[9] - g_RT[9] - g_RT_qss[0] + g_RT_qss[1]));
  // reaction 66:  CH2(S) + CO2 <=> CH2 + CO2
  k_f = 7000000;
  qf[66] *= k_f;
  qr[66] *= k_f * exp(-(g_RT[10] - g_RT[10] - g_RT_qss[0] + g_RT_qss[1]));
  // reaction 67:  CH2(S) + CO2 <=> CH2O + CO
  k_f = 14000000;
  qf[67] *= k_f;
  qr[67] *= k_f * exp(-(-g_RT[9] + g_RT[10] - g_RT[11] + g_RT_qss[1]));
  // reaction 68:  CH3 + O2 <=> CH2O + OH
  k_f = 36000 * exp(-(4498.75699229419) * invT);
  qf[68] *= k_f;
  qr[68] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[7] - g_RT[11]));
  // reaction 69:  CH3 + HCO <=> CH4 + CO
  k_f = 26480000;
  qf[69] *= k_f;
  qr[69] *= k_f * exp(-(g_RT[7] - g_RT[8] - g_RT[9] + g_RT_qss[2]));
  // reaction 70:  CH2O + CH3 <=> CH4 + HCO
  k_f = 0.00332 * exp((2.81) * tc[0] - (2948.84966161566) * invT);
  qf[70] *= k_f;
  qr[70] *= k_f * exp(-(g_RT[7] - g_RT[8] + g_RT[11] - g_RT_qss[2]));
  // reaction 71:  HCO + O2 <=> CO + HO2
  k_f = 7600000 * exp(-(201.286666321888) * invT);
  qf[71] *= k_f;
  qr[71] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[9] + g_RT_qss[2]));
  // reaction 72:  CH2OH + O2 <=> CH2O + HO2
  k_f = 18000000 * exp(-(452.894999224248) * invT);
  qf[72] *= k_f;
  qr[72] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[11] + g_RT_qss[3]));
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
productionRate(amrex::Real* wdot, const amrex::Real* sc, const amrex::Real T)
{
  const amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  const amrex::Real invT = 1.0 / tc[1];

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1 / refC;

  for (int i = 0; i < 13; ++i) {
    wdot[i] = 0.0;
  }

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 13; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[13];
  gibbs(g_RT, tc);
  amrex::Real g_RT_qss[4];
  gibbs_qss(g_RT_qss, tc);

  amrex::Real sc_qss[4];
  amrex::Real kf_qss[41], qf_qss[41], qr_qss[41];
  // Fill sc_qss here
  comp_k_f_qss(tc, invT, kf_qss);
  comp_qss_coeff(kf_qss, qf_qss, qr_qss, sc, tc, g_RT, g_RT_qss);
  comp_sc_qss(sc_qss, qf_qss, qr_qss);

  {
    // reaction 0:  CH2 + H (+M) <=> CH3 (+M)
    const amrex::Real k_f = 25000000000 * exp((-0.8) * tc[0]);
    amrex::Real Corr =
      mixture + sc[0] + (5) * sc[5] + sc[8] + (0.5) * sc[9] + sc[10];
    const amrex::Real redP =
      Corr / k_f * 3.2e+15 * exp(-3.14 * tc[0] - 618.956498939805 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.32 * exp(-tc[1] * 0.0128205128205128) +
      0.68 * exp(-tc[1] * 0.00050125313283208) + exp(-5590 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc_qss[0]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] - g_RT[7] + g_RT_qss[0])) * (refC) * (sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 1:  CH3 + H (+M) <=> CH4 (+M)
    const amrex::Real k_f =
      12700000000 * exp((-0.63) * tc[0] - (192.731983003208) * invT);
    amrex::Real Corr =
      mixture + sc[0] + (5) * sc[5] + sc[8] + (0.5) * sc[9] + sc[10];
    const amrex::Real redP =
      Corr / k_f * 2.477e+21 * exp(-4.76 * tc[0] - 1227.84866456352 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.217 * exp(-tc[1] * 0.0135135135135135) +
      0.783 * exp(-tc[1] * 0.000340020401224073) + exp(-6964 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[7]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[7] - g_RT[8])) * (refC) * (sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[7] -= qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 2:  H + HCO (+M) <=> CH2O (+M)
    const amrex::Real k_f =
      1090000 * exp((0.48) * tc[0] - (-130.836333109227) * invT);
    amrex::Real Corr =
      mixture + sc[0] + (5) * sc[5] + sc[8] + (0.5) * sc[9] + sc[10];
    const amrex::Real redP =
      Corr / k_f * 1350000000000 * exp(-2.57 * tc[0] - 717.083748771726 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2176 * exp(-tc[1] * 0.003690036900369) +
      0.7824 * exp(-tc[1] * 0.000362976406533575) + exp(-6570 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc_qss[2]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] - g_RT[11] + g_RT_qss[2])) * (refC) * (sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 3:  CH2O + H (+M) <=> CH2OH (+M)
    const amrex::Real k_f =
      540000 * exp((0.454) * tc[0] - (1811.57999689699) * invT);
    amrex::Real Corr =
      mixture + sc[0] + (5) * sc[5] + sc[8] + (0.5) * sc[9] + sc[10];
    const amrex::Real redP =
      Corr / k_f * 1.27e+20 * exp(-4.82 * tc[0] - 3286.00482770482 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2813 * exp(-tc[1] * 0.00970873786407767) +
      0.7187 * exp(-tc[1] * 0.000774593338497289) + exp(-4160 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[11]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[1] + g_RT[11] - g_RT_qss[3])) * (refC) *
                           (sc_qss[3]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 4:  CO + H2 (+M) <=> CH2O (+M)
    const amrex::Real k_f = 43 * exp((1.5) * tc[0] - (40056.0465980557) * invT);
    amrex::Real Corr =
      mixture + sc[0] + (5) * sc[5] + sc[8] + (0.5) * sc[9] + sc[10];
    const amrex::Real redP =
      Corr / k_f * 5.07e+15 * exp(-3.42 * tc[0] - 42446.3257606281 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.0679999999999999 * exp(-tc[1] * 0.0050761421319797) +
      0.932 * exp(-tc[1] * 0.000649350649350649) + exp(-10300 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[0] * sc[9]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[0] + g_RT[9] - g_RT[11])) * (refC) * (sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[9] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 5:  2 O + M <=> O2 + M
    const amrex::Real k_f = 120000 * exp((-1) * tc[0]);
    const amrex::Real Corr = mixture + (1.4) * sc[0] + (14.4) * sc[5] + sc[8] +
                             (0.75) * sc[9] + (2.6) * sc[10];
    const amrex::Real qf = Corr * k_f * ((sc[2] * sc[2]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[2] - g_RT[3])) * (refC) * (sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= 2.000000 * qdot;
    wdot[3] += qdot;
  }

  {
    // reaction 6:  H + O + M <=> OH + M
    const amrex::Real k_f = 500000 * exp((-1) * tc[0]);
    const amrex::Real Corr =
      mixture + sc[0] + (5) * sc[5] + sc[8] + (0.5) * sc[9] + sc[10];
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[2]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[2] - g_RT[4])) * (refC) * (sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 7:  CO + O + M <=> CO2 + M
    const amrex::Real k_f = 602 * exp(-(1509.64999741416) * invT);
    const amrex::Real Corr = mixture + sc[0] + (5) * sc[3] + (5) * sc[5] +
                             sc[8] + (0.5) * sc[9] + (2.5) * sc[10];
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[9]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[9] - g_RT[10])) * (refC) * (sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 8:  H + O2 + M <=> HO2 + M
    const amrex::Real k_f = 2800000 * exp((-0.86) * tc[0]);
    const amrex::Real Corr = mixture + (-1) * sc[3] + (-1) * sc[5] +
                             (-0.25) * sc[9] + (0.5) * sc[10] + (-1) * sc[12];
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[3]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC) * (sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 9:  H + O2 + O2 <=> HO2 + O2
    const amrex::Real k_f = 300000000 * exp((-1.72) * tc[0]);
    const amrex::Real qf = k_f * (sc[1] * (sc[3] * sc[3]));
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC) * (sc[3] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 10:  H + O2 + H2O <=> HO2 + H2O
    const amrex::Real k_f = 9380000 * exp((-0.76) * tc[0]);
    const amrex::Real qf = k_f * (sc[1] * sc[3] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC) * (sc[5] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 11:  H + O2 + N2 <=> HO2 + N2
    const amrex::Real k_f = 375000000 * exp((-1.72) * tc[0]);
    const amrex::Real qf = k_f * (sc[1] * sc[3] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC) * (sc[6] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 12:  2 H + M <=> H2 + M
    const amrex::Real k_f = 1000000 * exp((-1) * tc[0]);
    const amrex::Real Corr =
      mixture + (-1) * sc[0] + (-1) * sc[5] + sc[8] + (-1) * sc[10];
    const amrex::Real qf = Corr * k_f * ((sc[1] * sc[1]));
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC) * (sc[0]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= 2.000000 * qdot;
  }

  {
    // reaction 13:  2 H + H2 <=> H2 + H2
    const amrex::Real k_f = 90000 * exp((-0.6) * tc[0]);
    const amrex::Real qf = k_f * (sc[0] * (sc[1] * sc[1]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC) * ((sc[0] * sc[0]));
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= 2.000000 * qdot;
  }

  {
    // reaction 14:  2 H + H2O <=> H2 + H2O
    const amrex::Real k_f = 60000000 * exp((-1.25) * tc[0]);
    const amrex::Real qf = k_f * ((sc[1] * sc[1]) * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC) * (sc[0] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= 2.000000 * qdot;
  }

  {
    // reaction 15:  2 H + CO2 <=> H2 + CO2
    const amrex::Real k_f = 550000000 * exp((-2) * tc[0]);
    const amrex::Real qf = k_f * ((sc[1] * sc[1]) * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC) * (sc[0] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= 2.000000 * qdot;
  }

  {
    // reaction 16:  H + OH + M <=> H2O + M
    const amrex::Real k_f = 22000000000 * exp((-2) * tc[0]);
    const amrex::Real Corr = mixture + (-0.27) * sc[0] + (2.65) * sc[5] + sc[8];
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[4]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[4] - g_RT[5])) * (refC) * (sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 17:  HCO + H2O <=> CO + H + H2O
    const amrex::Real k_f =
      2244000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc_qss[2]);
    const amrex::Real qr = k_f * exp(-(-g_RT[1] - g_RT[9] + g_RT_qss[2])) *
                           (refCinv) * (sc[1] * sc[5] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 18:  HCO + M <=> CO + H + M
    const amrex::Real k_f =
      187000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
    const amrex::Real Corr =
      mixture + sc[0] + (-1) * sc[5] + sc[8] + (0.5) * sc[9] + sc[10];
    const amrex::Real qf = Corr * k_f * (sc_qss[2]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[1] - g_RT[9] + g_RT_qss[2])) *
                           (refCinv) * (sc[1] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 19:  H2 + O <=> H + OH
    const amrex::Real k_f =
      0.05 * exp((2.67) * tc[0] - (3165.23282791169) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[2]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[2] - g_RT[4])) * (sc[1] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 20:  HO2 + O <=> O2 + OH
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[2] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[4] + g_RT[6])) * (sc[3] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[4] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 21:  CH2 + O <=> H + HCO
    const amrex::Real k_f = 80000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT_qss[0] - g_RT_qss[2])) *
      (sc[1] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
  }

  {
    // reaction 22:  CH2(S) + O <=> CO + H2
    const amrex::Real k_f = 15000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + g_RT[2] - g_RT[9] + g_RT_qss[1])) *
                           (sc[0] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 23:  CH3 + O <=> CH2O + H
    const amrex::Real k_f = 84300000;
    const amrex::Real qf = k_f * (sc[2] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[7] - g_RT[11])) * (sc[1] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[7] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 24:  CH4 + O <=> CH3 + OH
    const amrex::Real k_f =
      1020 * exp((1.5) * tc[0] - (4327.66332592059) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[7] + g_RT[8])) * (sc[4] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[7] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 25:  HCO + O <=> CO + OH
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[9] + g_RT_qss[2])) * (sc[4] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 26:  HCO + O <=> CO2 + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[2] - g_RT[10] + g_RT_qss[2])) *
                           (sc[1] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 27:  CH2O + O <=> HCO + OH
    const amrex::Real k_f = 39000000 * exp(-(1781.38699694871) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[4] + g_RT[11] - g_RT_qss[2])) *
                           (sc[4] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 28:  CH2OH + O <=> CH2O + OH
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[4] - g_RT[11] + g_RT_qss[3])) *
                           (sc[4] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 29:  CO + O2 <=> CO2 + O
    const amrex::Real k_f = 2500000 * exp(-(24053.7566254656) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[9] - g_RT[10])) * (sc[2] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 30:  CH2O + O2 <=> HCO + HO2
    const amrex::Real k_f = 100000000 * exp(-(20128.6666321888) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[6] + g_RT[11] - g_RT_qss[2])) *
                           (sc[6] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 31:  H + O2 <=> O + OH
    const amrex::Real k_f = 83000000 * exp(-(7252.86180424342) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[3] - g_RT[4])) * (sc[2] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 32:  H + HO2 <=> H2O + O
    const amrex::Real k_f = 3970000 * exp(-(337.658382754967) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[5] + g_RT[6])) * (sc[2] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 33:  H + HO2 <=> H2 + O2
    const amrex::Real k_f = 28000000 * exp(-(537.435399079441) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[3] + g_RT[6])) * (sc[0] * sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[3] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 34:  H + HO2 <=> 2 OH
    const amrex::Real k_f = 134000000 * exp(-(319.542582785997) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - 2.000000 * g_RT[4] + g_RT[6])) * ((sc[4] * sc[4]));
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += 2.000000 * qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 35:  CH4 + H <=> CH3 + H2
    const amrex::Real k_f =
      660 * exp((1.62) * tc[0] - (5454.86865732316) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[7] + g_RT[8])) * (sc[0] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[7] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 36:  H + HCO <=> CO + H2
    const amrex::Real k_f = 73400000;
    const amrex::Real qf = k_f * (sc[1] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + g_RT[1] - g_RT[9] + g_RT_qss[2])) *
                           (sc[0] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 37:  CH2O + H <=> H2 + HCO
    const amrex::Real k_f =
      23000 * exp((1.05) * tc[0] - (1648.03458051046) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + g_RT[1] + g_RT[11] - g_RT_qss[2])) *
                           (sc[0] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 38:  CH2OH + H <=> CH2O + H2
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[1] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + g_RT[1] - g_RT[11] + g_RT_qss[3])) *
                           (sc[0] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 39:  CH2OH + H <=> CH3 + OH
    const amrex::Real k_f = 12000000;
    const amrex::Real qf = k_f * (sc[1] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[7] + g_RT_qss[3])) * (sc[4] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 40:  CH2OH + H <=> CH2(S) + H2O
    const amrex::Real k_f = 6000000;
    const amrex::Real qf = k_f * (sc[1] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[5] - g_RT_qss[1] + g_RT_qss[3])) *
      (sc[5] * sc_qss[1]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 41:  H2 + OH <=> H + H2O
    const amrex::Real k_f =
      216 * exp((1.51) * tc[0] - (1726.03316371019) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[4] - g_RT[5])) * (sc[1] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 42:  2 OH <=> H2O + O
    const amrex::Real k_f =
      0.0357 * exp((2.4) * tc[0] - (-1061.78716484796) * invT);
    const amrex::Real qf = k_f * ((sc[4] * sc[4]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + 2.000000 * g_RT[4] - g_RT[5])) * (sc[2] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= 2.000000 * qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 43:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f = 29000000 * exp(-(-251.60833290236) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[5] + g_RT[6])) * (sc[3] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 44:  CH2 + OH <=> CH2O + H
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[0]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[4] - g_RT[11] + g_RT_qss[0])) *
                           (sc[1] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 45:  CH2(S) + OH <=> CH2O + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[4] - g_RT[11] + g_RT_qss[1])) *
                           (sc[1] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 46:  CH3 + OH <=> CH2 + H2O
    const amrex::Real k_f = 56 * exp((1.6) * tc[0] - (2727.43432866158) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[7]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[5] + g_RT[7] - g_RT_qss[0])) *
                           (sc[5] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 47:  CH3 + OH <=> CH2(S) + H2O
    const amrex::Real k_f = 25010000;
    const amrex::Real qf = k_f * (sc[4] * sc[7]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[5] + g_RT[7] - g_RT_qss[1])) *
                           (sc[5] * sc_qss[1]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 48:  CH4 + OH <=> CH3 + H2O
    const amrex::Real k_f =
      100 * exp((1.6) * tc[0] - (1570.03599731073) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[7] + g_RT[8])) * (sc[5] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[7] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 49:  CO + OH <=> CO2 + H
    const amrex::Real k_f =
      47.6 * exp((1.228) * tc[0] - (35.2251666063304) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[9] - g_RT[10])) * (sc[1] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 50:  HCO + OH <=> CO + H2O
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[9] + g_RT_qss[2])) * (sc[5] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 51:  CH2O + OH <=> H2O + HCO
    const amrex::Real k_f =
      3430 * exp((1.18) * tc[0] - (-224.93784961471) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[5] + g_RT[11] - g_RT_qss[2])) *
                           (sc[5] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 52:  CH2OH + OH <=> CH2O + H2O
    const amrex::Real k_f = 5000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[5] - g_RT[11] + g_RT_qss[3])) *
                           (sc[5] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 53:  CH2 + HO2 <=> CH2O + OH
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[6] * sc_qss[0]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[6] - g_RT[11] + g_RT_qss[0])) *
                           (sc[4] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 54:  CH3 + HO2 <=> CH4 + O2
    const amrex::Real k_f = 1000000;
    const amrex::Real qf = k_f * (sc[6] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[6] + g_RT[7] - g_RT[8])) * (sc[3] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[6] -= qdot;
    wdot[7] -= qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 55:  CO + HO2 <=> CO2 + OH
    const amrex::Real k_f = 150000000 * exp(-(11875.9133129914) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[9] - g_RT[10])) * (sc[4] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 56:  CH2 + O2 <=> HCO + OH
    const amrex::Real k_f = 13200000 * exp(-(754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT_qss[0] - g_RT_qss[2])) *
      (sc[4] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 57:  CH2 + H2 <=> CH3 + H
    const amrex::Real k_f = 0.5 * exp((2) * tc[0] - (3638.25649376812) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] - g_RT[7] + g_RT_qss[0])) * (sc[1] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 58:  CH2 + CH4 <=> 2 CH3
    const amrex::Real k_f = 2.46 * exp((2) * tc[0] - (4161.60182620503) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc_qss[0]);
    const amrex::Real qr = k_f *
                           exp(-(-2.000000 * g_RT[7] + g_RT[8] + g_RT_qss[0])) *
                           ((sc[7] * sc[7]));
    const amrex::Real qdot = qf - qr;
    wdot[7] += 2.000000 * qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 59:  CH2(S) + N2 <=> CH2 + N2
    const amrex::Real k_f = 15000000 * exp(-(301.929999482832) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[12] - g_RT[12] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[12] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 60:  CH2(S) + O2 <=> CO + H + OH
    const amrex::Real k_f = 28000000;
    const amrex::Real qf = k_f * (sc[3] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[3] - g_RT[4] - g_RT[9] + g_RT_qss[1])) *
      (refCinv) * (sc[1] * sc[4] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 61:  CH2(S) + O2 <=> CO + H2O
    const amrex::Real k_f = 12000000;
    const amrex::Real qf = k_f * (sc[3] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[5] - g_RT[9] + g_RT_qss[1])) * (sc[5] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[5] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 62:  CH2(S) + H2 <=> CH3 + H
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[0] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] - g_RT[7] + g_RT_qss[1])) * (sc[1] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 63:  CH2(S) + H2O <=> CH2 + H2O
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[5] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[5] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[5] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 64:  CH2(S) + CH4 <=> 2 CH3
    const amrex::Real k_f = 16000000 * exp(-(-286.83349950869) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(-2.000000 * g_RT[7] + g_RT[8] + g_RT_qss[1])) *
                           ((sc[7] * sc[7]));
    const amrex::Real qdot = qf - qr;
    wdot[7] += 2.000000 * qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 65:  CH2(S) + CO <=> CH2 + CO
    const amrex::Real k_f = 9000000;
    const amrex::Real qf = k_f * (sc[9] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[9] - g_RT[9] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[9] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 66:  CH2(S) + CO2 <=> CH2 + CO2
    const amrex::Real k_f = 7000000;
    const amrex::Real qf = k_f * (sc[10] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[10] - g_RT[10] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[10] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 67:  CH2(S) + CO2 <=> CH2O + CO
    const amrex::Real k_f = 14000000;
    const amrex::Real qf = k_f * (sc[10] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[9] + g_RT[10] - g_RT[11] + g_RT_qss[1])) *
      (sc[9] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 68:  CH3 + O2 <=> CH2O + OH
    const amrex::Real k_f = 36000 * exp(-(4498.75699229419) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[7] - g_RT[11])) * (sc[4] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[7] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 69:  CH3 + HCO <=> CH4 + CO
    const amrex::Real k_f = 26480000;
    const amrex::Real qf = k_f * (sc[7] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[7] - g_RT[8] - g_RT[9] + g_RT_qss[2])) * (sc[8] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[7] -= qdot;
    wdot[8] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 70:  CH2O + CH3 <=> CH4 + HCO
    const amrex::Real k_f =
      0.00332 * exp((2.81) * tc[0] - (2948.84966161566) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[7] - g_RT[8] + g_RT[11] - g_RT_qss[2])) *
                           (sc[8] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[7] -= qdot;
    wdot[8] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 71:  HCO + O2 <=> CO + HO2
    const amrex::Real k_f = 7600000 * exp(-(201.286666321888) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[9] + g_RT_qss[2])) * (sc[6] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 72:  CH2OH + O2 <=> CH2O + HO2
    const amrex::Real k_f = 18000000 * exp(-(452.894999224248) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[6] - g_RT[11] + g_RT_qss[3])) *
                           (sc[6] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[11] += qdot;
  }
}

// GPU version of productionRate: no more use of thermo namespace vectors
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
productionRate_light(
  amrex::Real* wdot,
  amrex::Real* sc,
  amrex::Real* g_RT,
  amrex::Real* g_RT_qss,
  amrex::Real* sc_qss,
  amrex::Real* kf_qss,
  amrex::Real* qf_qss,
  amrex::Real* qr_qss,
  const amrex::Real* tc,
  const amrex::Real invT)
{
  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1 / refC;

  for (int i = 0; i < 13; ++i) {
    wdot[i] = 0.0;
  }

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 13; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  gibbs(g_RT, tc);
  gibbs_qss(g_RT_qss, tc);

  // Fill sc_qss here
  comp_k_f_qss(tc, invT, kf_qss);
  comp_qss_coeff(kf_qss, qf_qss, qr_qss, sc, tc, g_RT, g_RT_qss);
  comp_sc_qss(sc_qss, qf_qss, qr_qss);

  {
    // reaction 0:  CH2 + H (+M) <=> CH3 (+M)
    const amrex::Real k_f = 25000000000 * exp((-0.8) * tc[0]);
    amrex::Real Corr =
      mixture + sc[0] + (5) * sc[5] + sc[8] + (0.5) * sc[9] + sc[10];
    const amrex::Real redP =
      Corr / k_f * 3.2e+15 * exp(-3.14 * tc[0] - 618.956498939805 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.32 * exp(-tc[1] * 0.0128205128205128) +
      0.68 * exp(-tc[1] * 0.00050125313283208) + exp(-5590 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc_qss[0]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] - g_RT[7] + g_RT_qss[0])) * (refC) * (sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 1:  CH3 + H (+M) <=> CH4 (+M)
    const amrex::Real k_f =
      12700000000 * exp((-0.63) * tc[0] - (192.731983003208) * invT);
    amrex::Real Corr =
      mixture + sc[0] + (5) * sc[5] + sc[8] + (0.5) * sc[9] + sc[10];
    const amrex::Real redP =
      Corr / k_f * 2.477e+21 * exp(-4.76 * tc[0] - 1227.84866456352 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.217 * exp(-tc[1] * 0.0135135135135135) +
      0.783 * exp(-tc[1] * 0.000340020401224073) + exp(-6964 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[7]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[7] - g_RT[8])) * (refC) * (sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[7] -= qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 2:  H + HCO (+M) <=> CH2O (+M)
    const amrex::Real k_f =
      1090000 * exp((0.48) * tc[0] - (-130.836333109227) * invT);
    amrex::Real Corr =
      mixture + sc[0] + (5) * sc[5] + sc[8] + (0.5) * sc[9] + sc[10];
    const amrex::Real redP =
      Corr / k_f * 1350000000000 * exp(-2.57 * tc[0] - 717.083748771726 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2176 * exp(-tc[1] * 0.003690036900369) +
      0.7824 * exp(-tc[1] * 0.000362976406533575) + exp(-6570 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc_qss[2]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] - g_RT[11] + g_RT_qss[2])) * (refC) * (sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 3:  CH2O + H (+M) <=> CH2OH (+M)
    const amrex::Real k_f =
      540000 * exp((0.454) * tc[0] - (1811.57999689699) * invT);
    amrex::Real Corr =
      mixture + sc[0] + (5) * sc[5] + sc[8] + (0.5) * sc[9] + sc[10];
    const amrex::Real redP =
      Corr / k_f * 1.27e+20 * exp(-4.82 * tc[0] - 3286.00482770482 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2813 * exp(-tc[1] * 0.00970873786407767) +
      0.7187 * exp(-tc[1] * 0.000774593338497289) + exp(-4160 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[11]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[1] + g_RT[11] - g_RT_qss[3])) * (refC) *
                           (sc_qss[3]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 4:  CO + H2 (+M) <=> CH2O (+M)
    const amrex::Real k_f = 43 * exp((1.5) * tc[0] - (40056.0465980557) * invT);
    amrex::Real Corr =
      mixture + sc[0] + (5) * sc[5] + sc[8] + (0.5) * sc[9] + sc[10];
    const amrex::Real redP =
      Corr / k_f * 5.07e+15 * exp(-3.42 * tc[0] - 42446.3257606281 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.0679999999999999 * exp(-tc[1] * 0.0050761421319797) +
      0.932 * exp(-tc[1] * 0.000649350649350649) + exp(-10300 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[0] * sc[9]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[0] + g_RT[9] - g_RT[11])) * (refC) * (sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[9] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 5:  2 O + M <=> O2 + M
    const amrex::Real k_f = 120000 * exp((-1) * tc[0]);
    const amrex::Real Corr = mixture + (1.4) * sc[0] + (14.4) * sc[5] + sc[8] +
                             (0.75) * sc[9] + (2.6) * sc[10];
    const amrex::Real qf = Corr * k_f * ((sc[2] * sc[2]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[2] - g_RT[3])) * (refC) * (sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= 2.000000 * qdot;
    wdot[3] += qdot;
  }

  {
    // reaction 6:  H + O + M <=> OH + M
    const amrex::Real k_f = 500000 * exp((-1) * tc[0]);
    const amrex::Real Corr =
      mixture + sc[0] + (5) * sc[5] + sc[8] + (0.5) * sc[9] + sc[10];
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[2]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[2] - g_RT[4])) * (refC) * (sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 7:  CO + O + M <=> CO2 + M
    const amrex::Real k_f = 602 * exp(-(1509.64999741416) * invT);
    const amrex::Real Corr = mixture + sc[0] + (5) * sc[3] + (5) * sc[5] +
                             sc[8] + (0.5) * sc[9] + (2.5) * sc[10];
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[9]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[9] - g_RT[10])) * (refC) * (sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 8:  H + O2 + M <=> HO2 + M
    const amrex::Real k_f = 2800000 * exp((-0.86) * tc[0]);
    const amrex::Real Corr = mixture + (-1) * sc[3] + (-1) * sc[5] +
                             (-0.25) * sc[9] + (0.5) * sc[10] + (-1) * sc[12];
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[3]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC) * (sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 9:  H + O2 + O2 <=> HO2 + O2
    const amrex::Real k_f = 300000000 * exp((-1.72) * tc[0]);
    const amrex::Real qf = k_f * (sc[1] * (sc[3] * sc[3]));
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC) * (sc[3] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 10:  H + O2 + H2O <=> HO2 + H2O
    const amrex::Real k_f = 9380000 * exp((-0.76) * tc[0]);
    const amrex::Real qf = k_f * (sc[1] * sc[3] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC) * (sc[5] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 11:  H + O2 + N2 <=> HO2 + N2
    const amrex::Real k_f = 375000000 * exp((-1.72) * tc[0]);
    const amrex::Real qf = k_f * (sc[1] * sc[3] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC) * (sc[6] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 12:  2 H + M <=> H2 + M
    const amrex::Real k_f = 1000000 * exp((-1) * tc[0]);
    const amrex::Real Corr =
      mixture + (-1) * sc[0] + (-1) * sc[5] + sc[8] + (-1) * sc[10];
    const amrex::Real qf = Corr * k_f * ((sc[1] * sc[1]));
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC) * (sc[0]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= 2.000000 * qdot;
  }

  {
    // reaction 13:  2 H + H2 <=> H2 + H2
    const amrex::Real k_f = 90000 * exp((-0.6) * tc[0]);
    const amrex::Real qf = k_f * (sc[0] * (sc[1] * sc[1]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC) * ((sc[0] * sc[0]));
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= 2.000000 * qdot;
  }

  {
    // reaction 14:  2 H + H2O <=> H2 + H2O
    const amrex::Real k_f = 60000000 * exp((-1.25) * tc[0]);
    const amrex::Real qf = k_f * ((sc[1] * sc[1]) * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC) * (sc[0] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= 2.000000 * qdot;
  }

  {
    // reaction 15:  2 H + CO2 <=> H2 + CO2
    const amrex::Real k_f = 550000000 * exp((-2) * tc[0]);
    const amrex::Real qf = k_f * ((sc[1] * sc[1]) * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC) * (sc[0] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= 2.000000 * qdot;
  }

  {
    // reaction 16:  H + OH + M <=> H2O + M
    const amrex::Real k_f = 22000000000 * exp((-2) * tc[0]);
    const amrex::Real Corr = mixture + (-0.27) * sc[0] + (2.65) * sc[5] + sc[8];
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[4]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[4] - g_RT[5])) * (refC) * (sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 17:  HCO + H2O <=> CO + H + H2O
    const amrex::Real k_f =
      2244000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc_qss[2]);
    const amrex::Real qr = k_f * exp(-(-g_RT[1] - g_RT[9] + g_RT_qss[2])) *
                           (refCinv) * (sc[1] * sc[5] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 18:  HCO + M <=> CO + H + M
    const amrex::Real k_f =
      187000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
    const amrex::Real Corr =
      mixture + sc[0] + (-1) * sc[5] + sc[8] + (0.5) * sc[9] + sc[10];
    const amrex::Real qf = Corr * k_f * (sc_qss[2]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[1] - g_RT[9] + g_RT_qss[2])) *
                           (refCinv) * (sc[1] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 19:  H2 + O <=> H + OH
    const amrex::Real k_f =
      0.05 * exp((2.67) * tc[0] - (3165.23282791169) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[2]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[2] - g_RT[4])) * (sc[1] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 20:  HO2 + O <=> O2 + OH
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[2] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[4] + g_RT[6])) * (sc[3] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[4] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 21:  CH2 + O <=> H + HCO
    const amrex::Real k_f = 80000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT_qss[0] - g_RT_qss[2])) *
      (sc[1] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
  }

  {
    // reaction 22:  CH2(S) + O <=> CO + H2
    const amrex::Real k_f = 15000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + g_RT[2] - g_RT[9] + g_RT_qss[1])) *
                           (sc[0] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 23:  CH3 + O <=> CH2O + H
    const amrex::Real k_f = 84300000;
    const amrex::Real qf = k_f * (sc[2] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[7] - g_RT[11])) * (sc[1] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[7] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 24:  CH4 + O <=> CH3 + OH
    const amrex::Real k_f =
      1020 * exp((1.5) * tc[0] - (4327.66332592059) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[7] + g_RT[8])) * (sc[4] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[7] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 25:  HCO + O <=> CO + OH
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[9] + g_RT_qss[2])) * (sc[4] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 26:  HCO + O <=> CO2 + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[2] - g_RT[10] + g_RT_qss[2])) *
                           (sc[1] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 27:  CH2O + O <=> HCO + OH
    const amrex::Real k_f = 39000000 * exp(-(1781.38699694871) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[4] + g_RT[11] - g_RT_qss[2])) *
                           (sc[4] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 28:  CH2OH + O <=> CH2O + OH
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[4] - g_RT[11] + g_RT_qss[3])) *
                           (sc[4] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 29:  CO + O2 <=> CO2 + O
    const amrex::Real k_f = 2500000 * exp(-(24053.7566254656) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[9] - g_RT[10])) * (sc[2] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 30:  CH2O + O2 <=> HCO + HO2
    const amrex::Real k_f = 100000000 * exp(-(20128.6666321888) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[6] + g_RT[11] - g_RT_qss[2])) *
                           (sc[6] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 31:  H + O2 <=> O + OH
    const amrex::Real k_f = 83000000 * exp(-(7252.86180424342) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[3] - g_RT[4])) * (sc[2] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 32:  H + HO2 <=> H2O + O
    const amrex::Real k_f = 3970000 * exp(-(337.658382754967) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[5] + g_RT[6])) * (sc[2] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 33:  H + HO2 <=> H2 + O2
    const amrex::Real k_f = 28000000 * exp(-(537.435399079441) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[3] + g_RT[6])) * (sc[0] * sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[3] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 34:  H + HO2 <=> 2 OH
    const amrex::Real k_f = 134000000 * exp(-(319.542582785997) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - 2.000000 * g_RT[4] + g_RT[6])) * ((sc[4] * sc[4]));
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += 2.000000 * qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 35:  CH4 + H <=> CH3 + H2
    const amrex::Real k_f =
      660 * exp((1.62) * tc[0] - (5454.86865732316) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[7] + g_RT[8])) * (sc[0] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[7] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 36:  H + HCO <=> CO + H2
    const amrex::Real k_f = 73400000;
    const amrex::Real qf = k_f * (sc[1] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + g_RT[1] - g_RT[9] + g_RT_qss[2])) *
                           (sc[0] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 37:  CH2O + H <=> H2 + HCO
    const amrex::Real k_f =
      23000 * exp((1.05) * tc[0] - (1648.03458051046) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + g_RT[1] + g_RT[11] - g_RT_qss[2])) *
                           (sc[0] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 38:  CH2OH + H <=> CH2O + H2
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[1] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + g_RT[1] - g_RT[11] + g_RT_qss[3])) *
                           (sc[0] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 39:  CH2OH + H <=> CH3 + OH
    const amrex::Real k_f = 12000000;
    const amrex::Real qf = k_f * (sc[1] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[7] + g_RT_qss[3])) * (sc[4] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 40:  CH2OH + H <=> CH2(S) + H2O
    const amrex::Real k_f = 6000000;
    const amrex::Real qf = k_f * (sc[1] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[5] - g_RT_qss[1] + g_RT_qss[3])) *
      (sc[5] * sc_qss[1]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 41:  H2 + OH <=> H + H2O
    const amrex::Real k_f =
      216 * exp((1.51) * tc[0] - (1726.03316371019) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[4] - g_RT[5])) * (sc[1] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 42:  2 OH <=> H2O + O
    const amrex::Real k_f =
      0.0357 * exp((2.4) * tc[0] - (-1061.78716484796) * invT);
    const amrex::Real qf = k_f * ((sc[4] * sc[4]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + 2.000000 * g_RT[4] - g_RT[5])) * (sc[2] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= 2.000000 * qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 43:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f = 29000000 * exp(-(-251.60833290236) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[5] + g_RT[6])) * (sc[3] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 44:  CH2 + OH <=> CH2O + H
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[0]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[4] - g_RT[11] + g_RT_qss[0])) *
                           (sc[1] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 45:  CH2(S) + OH <=> CH2O + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[4] - g_RT[11] + g_RT_qss[1])) *
                           (sc[1] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 46:  CH3 + OH <=> CH2 + H2O
    const amrex::Real k_f = 56 * exp((1.6) * tc[0] - (2727.43432866158) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[7]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[5] + g_RT[7] - g_RT_qss[0])) *
                           (sc[5] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 47:  CH3 + OH <=> CH2(S) + H2O
    const amrex::Real k_f = 25010000;
    const amrex::Real qf = k_f * (sc[4] * sc[7]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[5] + g_RT[7] - g_RT_qss[1])) *
                           (sc[5] * sc_qss[1]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 48:  CH4 + OH <=> CH3 + H2O
    const amrex::Real k_f =
      100 * exp((1.6) * tc[0] - (1570.03599731073) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[7] + g_RT[8])) * (sc[5] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[7] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 49:  CO + OH <=> CO2 + H
    const amrex::Real k_f =
      47.6 * exp((1.228) * tc[0] - (35.2251666063304) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[9] - g_RT[10])) * (sc[1] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 50:  HCO + OH <=> CO + H2O
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[9] + g_RT_qss[2])) * (sc[5] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 51:  CH2O + OH <=> H2O + HCO
    const amrex::Real k_f =
      3430 * exp((1.18) * tc[0] - (-224.93784961471) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[5] + g_RT[11] - g_RT_qss[2])) *
                           (sc[5] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 52:  CH2OH + OH <=> CH2O + H2O
    const amrex::Real k_f = 5000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[5] - g_RT[11] + g_RT_qss[3])) *
                           (sc[5] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 53:  CH2 + HO2 <=> CH2O + OH
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[6] * sc_qss[0]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[6] - g_RT[11] + g_RT_qss[0])) *
                           (sc[4] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 54:  CH3 + HO2 <=> CH4 + O2
    const amrex::Real k_f = 1000000;
    const amrex::Real qf = k_f * (sc[6] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[6] + g_RT[7] - g_RT[8])) * (sc[3] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[6] -= qdot;
    wdot[7] -= qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 55:  CO + HO2 <=> CO2 + OH
    const amrex::Real k_f = 150000000 * exp(-(11875.9133129914) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[9] - g_RT[10])) * (sc[4] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 56:  CH2 + O2 <=> HCO + OH
    const amrex::Real k_f = 13200000 * exp(-(754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT_qss[0] - g_RT_qss[2])) *
      (sc[4] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 57:  CH2 + H2 <=> CH3 + H
    const amrex::Real k_f = 0.5 * exp((2) * tc[0] - (3638.25649376812) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] - g_RT[7] + g_RT_qss[0])) * (sc[1] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 58:  CH2 + CH4 <=> 2 CH3
    const amrex::Real k_f = 2.46 * exp((2) * tc[0] - (4161.60182620503) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc_qss[0]);
    const amrex::Real qr = k_f *
                           exp(-(-2.000000 * g_RT[7] + g_RT[8] + g_RT_qss[0])) *
                           ((sc[7] * sc[7]));
    const amrex::Real qdot = qf - qr;
    wdot[7] += 2.000000 * qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 59:  CH2(S) + N2 <=> CH2 + N2
    const amrex::Real k_f = 15000000 * exp(-(301.929999482832) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[12] - g_RT[12] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[12] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 60:  CH2(S) + O2 <=> CO + H + OH
    const amrex::Real k_f = 28000000;
    const amrex::Real qf = k_f * (sc[3] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[3] - g_RT[4] - g_RT[9] + g_RT_qss[1])) *
      (refCinv) * (sc[1] * sc[4] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 61:  CH2(S) + O2 <=> CO + H2O
    const amrex::Real k_f = 12000000;
    const amrex::Real qf = k_f * (sc[3] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[5] - g_RT[9] + g_RT_qss[1])) * (sc[5] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[5] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 62:  CH2(S) + H2 <=> CH3 + H
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[0] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] - g_RT[7] + g_RT_qss[1])) * (sc[1] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 63:  CH2(S) + H2O <=> CH2 + H2O
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[5] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[5] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[5] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 64:  CH2(S) + CH4 <=> 2 CH3
    const amrex::Real k_f = 16000000 * exp(-(-286.83349950869) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(-2.000000 * g_RT[7] + g_RT[8] + g_RT_qss[1])) *
                           ((sc[7] * sc[7]));
    const amrex::Real qdot = qf - qr;
    wdot[7] += 2.000000 * qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 65:  CH2(S) + CO <=> CH2 + CO
    const amrex::Real k_f = 9000000;
    const amrex::Real qf = k_f * (sc[9] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[9] - g_RT[9] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[9] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 66:  CH2(S) + CO2 <=> CH2 + CO2
    const amrex::Real k_f = 7000000;
    const amrex::Real qf = k_f * (sc[10] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[10] - g_RT[10] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[10] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 67:  CH2(S) + CO2 <=> CH2O + CO
    const amrex::Real k_f = 14000000;
    const amrex::Real qf = k_f * (sc[10] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[9] + g_RT[10] - g_RT[11] + g_RT_qss[1])) *
      (sc[9] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 68:  CH3 + O2 <=> CH2O + OH
    const amrex::Real k_f = 36000 * exp(-(4498.75699229419) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[7] - g_RT[11])) * (sc[4] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[7] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 69:  CH3 + HCO <=> CH4 + CO
    const amrex::Real k_f = 26480000;
    const amrex::Real qf = k_f * (sc[7] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[7] - g_RT[8] - g_RT[9] + g_RT_qss[2])) * (sc[8] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[7] -= qdot;
    wdot[8] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 70:  CH2O + CH3 <=> CH4 + HCO
    const amrex::Real k_f =
      0.00332 * exp((2.81) * tc[0] - (2948.84966161566) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[7] - g_RT[8] + g_RT[11] - g_RT_qss[2])) *
                           (sc[8] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[7] -= qdot;
    wdot[8] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 71:  HCO + O2 <=> CO + HO2
    const amrex::Real k_f = 7600000 * exp(-(201.286666321888) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[9] + g_RT_qss[2])) * (sc[6] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 72:  CH2OH + O2 <=> CH2O + HO2
    const amrex::Real k_f = 18000000 * exp(-(452.894999224248) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[6] - g_RT[11] + g_RT_qss[3])) *
                           (sc[6] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[11] += qdot;
  }

  return;
}

// compute the production rate for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWC(const amrex::Real T, amrex::Real C[], amrex::Real wdot[])
{

  // convert to SI
  for (int id = 0; id < 13; ++id) {
    C[id] *= 1.0e6;
  }

  // convert to chemkin units
  productionRate(wdot, C, T);

  // convert to chemkin units
  for (int id = 0; id < 13; ++id) {
    C[id] *= 1.0e-6;
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[])
{
  amrex::Real c[13]; // temporary storage
  amrex::Real YOW = 0;
  amrex::Real PWORT;

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 13; i++) {
    YOW += y[i] * imw(i);
  }
  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // multiply by 1e6 so c goes to SI
  PWORT *= 1e6;
  // Now compute conversion (and go to SI)
  for (int i = 0; i < 13; i++) {
    c[i] = PWORT * y[i] * imw(i);
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 13; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[])
{
  amrex::Real c[13]; // temporary storage
  amrex::Real PORT =
    1e6 * P / (8.31446261815324e+07 * T); // 1e6 * P/RT so c goes to SI units

  // Compute conversion, see Eq 10
  for (int id = 0; id < 13; ++id) {
    c[id] = x[id] * PORT;
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 13; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[])
{
  amrex::Real c[13]; // temporary storage

  // See Eq 8 with an extra 1e6 so c goes to SI
  for (int i = 0; i < 13; i++) {
    c[i] = 1e6 * rho * y[i] * imw(i);
  }

  // call productionRate
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 13; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[])
{
  amrex::Real c[13];  // temporary storage
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 2.016000;   // H2
  XW += x[1] * 1.008000;   // H
  XW += x[2] * 15.999000;  // O
  XW += x[3] * 31.998000;  // O2
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 18.015000;  // H2O
  XW += x[6] * 33.006000;  // HO2
  XW += x[7] * 15.035000;  // CH3
  XW += x[8] * 16.043000;  // CH4
  XW += x[9] * 28.010000;  // CO
  XW += x[10] * 44.009000; // CO2
  XW += x[11] * 30.026000; // CH2O
  XW += x[12] * 28.014000; // N2
  // Extra 1e6 factor to take c to SI
  ROW = 1e6 * rho / XW;

  // Compute conversion, see Eq 11
  for (int id = 0; id < 13; ++id) {
    c[id] = x[id] * ROW;
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 13; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

//  species unit charge number
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRG(int kcharge[])
{
  kcharge[0] = 0;  // H2
  kcharge[1] = 0;  // H
  kcharge[2] = 0;  // O
  kcharge[3] = 0;  // O2
  kcharge[4] = 0;  // OH
  kcharge[5] = 0;  // H2O
  kcharge[6] = 0;  // HO2
  kcharge[7] = 0;  // CH3
  kcharge[8] = 0;  // CH4
  kcharge[9] = 0;  // CO
  kcharge[10] = 0; // CO2
  kcharge[11] = 0; // CH2O
  kcharge[12] = 0; // N2
}

//  species charge per unit mass
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRGMASS(amrex::Real zk[])
{

  int kchrg[13];
  CKCHRG(kchrg);

  for (int id = 0; id < 13; ++id) {
    zk[id] = 6.02214076e+23 * 1.60217663e-19 * kchrg[id] * imw(id);
  }
}

// compute d(Cp/R)/dT and d(Cv/R)/dT at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
dcvpRdT(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +7.98052075e-03 - 3.89563020e-05 * tc[1] +
                 6.04716282e-08 * tc[2] - 2.95044704e-11 * tc[3];
    // species 1: H
    species[1] = +7.05332819e-13 - 3.99183928e-15 * tc[1] +
                 6.90244896e-18 * tc[2] - 3.71092933e-21 * tc[3];
    // species 2: O
    species[2] = -3.27931884e-03 + 1.32861279e-05 * tc[1] -
                 1.83841987e-08 * tc[2] + 8.45063884e-12 * tc[3];
    // species 3: O2
    species[3] = -2.99673416e-03 + 1.96946040e-05 * tc[1] -
                 2.90438853e-08 * tc[2] + 1.29749135e-11 * tc[3];
    // species 4: OH
    species[4] = -2.40131752e-03 + 9.23587682e-06 * tc[1] -
                 1.16434000e-08 * tc[2] + 5.45645880e-12 * tc[3];
    // species 5: H2O
    species[5] = -2.03643410e-03 + 1.30408042e-05 * tc[1] -
                 1.64639119e-08 * tc[2] + 7.08791268e-12 * tc[3];
    // species 6: HO2
    species[6] = -4.74912051e-03 + 4.23165782e-05 * tc[1] -
                 7.28291682e-08 * tc[2] + 3.71690050e-11 * tc[3];
    // species 7: CH3
    species[7] = +2.01095175e-03 + 1.14604371e-05 * tc[1] -
                 2.06135228e-08 * tc[2] + 1.01754294e-11 * tc[3];
    // species 8: CH4
    species[8] = -1.36709788e-02 + 9.83601198e-05 * tc[1] -
                 1.45422908e-07 * tc[2] + 6.66775824e-11 * tc[3];
    // species 9: CO
    species[9] = -6.10353680e-04 + 2.03362866e-06 * tc[1] +
                 2.72101765e-09 * tc[2] - 3.61769800e-12 * tc[3];
    // species 10: CO2
    species[10] = +8.98459677e-03 - 1.42471254e-05 * tc[1] +
                  7.37757066e-09 * tc[2] - 5.74798192e-13 * tc[3];
    // species 11: CH2O
    species[11] = -9.90833369e-03 + 7.46440016e-05 * tc[1] -
                  1.13785578e-07 * tc[2] + 5.27090608e-11 * tc[3];
    // species 12: N2
    species[12] = +1.40824040e-03 - 7.92644400e-06 * tc[1] +
                  1.69245450e-08 * tc[2] - 9.77941600e-12 * tc[3];
  } else {
    // species 0: H2
    species[0] = -4.94024731e-05 + 9.98913556e-07 * tc[1] -
                 5.38699182e-10 * tc[2] + 8.01021504e-14 * tc[3];
    // species 1: H
    species[1] = -2.30842973e-11 + 3.23123896e-14 * tc[1] -
                 1.42054571e-17 * tc[2] + 1.99278943e-21 * tc[3];
    // species 2: O
    species[2] = -8.59741137e-05 + 8.38969178e-08 * tc[1] -
                 3.00533397e-11 * tc[2] + 4.91334764e-15 * tc[3];
    // species 3: O2
    species[3] = +1.48308754e-03 - 1.51593334e-06 * tc[1] +
                 6.28411665e-10 * tc[2] - 8.66871176e-14 * tc[3];
    // species 4: OH
    species[4] = +5.48429716e-04 + 2.53010456e-07 * tc[1] -
                 2.63838467e-10 * tc[2] + 4.69649504e-14 * tc[3];
    // species 5: H2O
    species[5] = +2.17691804e-03 - 3.28145036e-07 * tc[1] -
                 2.91125961e-10 * tc[2] + 6.72803968e-14 * tc[3];
    // species 6: HO2
    species[6] = +2.23982013e-03 - 1.26731630e-06 * tc[1] +
                 3.42739110e-10 * tc[2] - 4.31634140e-14 * tc[3];
    // species 7: CH3
    species[7] = +7.23990037e-03 - 5.97428696e-06 * tc[1] +
                 1.78705393e-09 * tc[2] - 1.86861758e-13 * tc[3];
    // species 8: CH4
    species[8] = +1.33909467e-02 - 1.14657162e-05 * tc[1] +
                 3.66877605e-09 * tc[2] - 4.07260920e-13 * tc[3];
    // species 9: CO
    species[9] = +2.06252743e-03 - 1.99765154e-06 * tc[1] +
                 6.90159024e-10 * tc[2] - 8.14590864e-14 * tc[3];
    // species 10: CO2
    species[10] = +4.41437026e-03 - 4.42962808e-06 * tc[1] +
                  1.57047056e-09 * tc[2] - 1.88833666e-13 * tc[3];
    // species 11: CH2O
    species[11] = +9.20000082e-03 - 8.84517626e-06 * tc[1] +
                  3.01923636e-09 * tc[2] - 3.53542256e-13 * tc[3];
    // species 12: N2
    species[12] = +1.48797680e-03 - 1.13695200e-06 * tc[1] +
                  3.02911140e-10 * tc[2] - 2.70134040e-14 * tc[3];
  }
}

// compute an approx to the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian_precond(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real T, const int HP)
{

  // Analytical Jacobian with QSSA is only supported with symbolic
  // implementation. Re-build in ceptr with -qsj flag.
  amrex::Abort();
}

// compute an approx to the reaction Jacobian (for preconditioning)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT_SIMPLIFIED(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real* Tp, const int* HP)
{
  amrex::Real c[13];

  for (int k = 0; k < 13; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian_precond(J, c, *Tp, *HP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 13; k++) {
    J[182 + k] *= 1.e-6;
    J[k * 14 + 13] *= 1.e6;
  }
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian(amrex::Real* J, amrex::Real* sc, amrex::Real T, const int consP)
{
#if defined(PELE_COMPILE_AJACOBIAN) || !defined(AMREX_USE_HIP)
  amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  amrex::Real invT = 1.0 / tc[1];

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1 / refC;
  amrex::Real g_RT[13];
  amrex::Real h_RT[13];
  amrex::Real g_RT_qss[4];
  amrex::Real h_RT_qss[4];
  amrex::Real sc_qss[4];
  amrex::Real kf_qss[41];
  amrex::Real T_pert1, pertT;
  amrex::Real wdot_pert1[13], wdot[13];

  // dwdot/dT by finite difference
  pertT = 1e-2;
  T_pert1 = T + pertT;

  tc[0] = log(T_pert1);
  tc[1] = T_pert1;
  tc[2] = T_pert1 * T_pert1;
  tc[3] = T_pert1 * T_pert1 * T_pert1;
  tc[4] = T_pert1 * T_pert1 * T_pert1 * T_pert1;
  invT = 1.0 / tc[1];
  productionRate_light(
    wdot_pert1, sc, g_RT, g_RT_qss, sc_qss, kf_qss, &J[0], &J[41], tc, invT);
  tc[0] = log(T);
  tc[1] = T;
  tc[2] = T * T;
  tc[3] = T * T * T;
  tc[4] = T * T * T * T;
  invT = 1.0 / tc[1];
  productionRate_light(
    wdot, sc, g_RT, g_RT_qss, sc_qss, kf_qss, &J[0], &J[41], tc, invT);

  // compute the species enthalpy
  speciesEnthalpy(h_RT, tc);
  for (int i = 0; i < 196; i++) {
    J[i] = 0.0;
  }
  // Species terms
  const amrex::Real x2 =
    sc[11] + sc[12] + sc[1] + sc[2] + sc[4] + sc[6] + sc[7] + 2 * sc[8];
  const amrex::Real x6 = 2 * sc[0] + 2 * sc[10] + sc[3] + 1.5 * sc[9] + x2;
  const amrex::Real x7 = 6.0 * sc[5] + x6;
  amrex::Real x10 = -g_RT[11] - g_RT[1] + g_RT_qss[3];
  amrex::Real x11 = -3286.0048277048199 * invT - 4.82 * tc[0];
  amrex::Real x16 = 1.27e+20 * x7 * exp(x11) / kf_qss[2];
  amrex::Real x17 = log(
    0.2813 * exp(-0.0097087378640776708 * tc[1]) +
    0.7187 * exp(-0.00077459333849728897 * tc[1]) + exp(-4160.0 * invT));
  amrex::Real x20 =
    -0.29097730287517898 * x17 + 0.43429448190325198 * log(x16) - 0.4;
  amrex::Real x24 = -0.55155399201712996 * x17 - 0.14 * x20 + 0.75;
  amrex::Real x26 = ((x20) * (x20)) / ((x24) * (x24)) + 1.0;
  amrex::Real x29 =
    exp(M_LN10 * (0.43429448190325198 * x17 / x26)) / (x16 + 1.0);
  amrex::Real x31 = refC * x29 * exp(x10 + x11);
  amrex::Real x34 = -kf_qss[10] * sc[2] - kf_qss[14] * sc[1] -
                    kf_qss[15] * sc[1] - kf_qss[16] * sc[1] -
                    kf_qss[23] * sc[4] - kf_qss[40] * sc[3] -
                    1.27e+20 * x31 * x7 + 10.0e-13;
  const amrex::Real x39 = exp(-g_RT[1] + g_RT[5] + g_RT_qss[1] - g_RT_qss[3]);
  const amrex::Real x43 = (kf_qss[16] * sc[5] * x39 + 10.0e-13) / x34;
  amrex::Real x45 = g_RT[4] - g_RT[5];
  const amrex::Real x47 = exp(-g_RT[7] + g_RT_qss[1] - x45);
  amrex::Real x52 =
    -kf_qss[16] * sc[5] * x39 - kf_qss[18] * sc[4] - kf_qss[20] * sc[5] * x47 -
    kf_qss[28] * sc[12] - kf_qss[29] * sc[3] - kf_qss[30] * sc[3] -
    kf_qss[31] * sc[0] - kf_qss[32] * sc[5] - kf_qss[33] * sc[8] -
    kf_qss[34] * sc[9] - kf_qss[35] * sc[10] - kf_qss[36] * sc[10] -
    kf_qss[6] * sc[2] + 10.0e-13;
  amrex::Real x54 = kf_qss[16] * sc[1] + 10.0e-13;
  amrex::Real x55 = x54 / x52;
  amrex::Real x56 = -x43 * x55 + 1;
  amrex::Real x59 = exp(g_RT_qss[0] - g_RT_qss[1]);
  amrex::Real x64 = kf_qss[28] * sc[12] * x59 + kf_qss[32] * sc[5] * x59 +
                    kf_qss[34] * sc[9] * x59 + kf_qss[35] * sc[10] * x59 +
                    10.0e-13;
  const amrex::Real x66 = x64 / (x52 * x56);
  amrex::Real x67 = g_RT[7] - g_RT[8];
  amrex::Real x69 = g_RT[11] - g_RT_qss[2];
  amrex::Real x76 =
    kf_qss[25] * exp(-g_RT[3] + g_RT[4] - g_RT_qss[0] + g_RT_qss[2]);
  const amrex::Real x80 = exp(g_RT[1] - g_RT[2] - g_RT_qss[0] + g_RT_qss[2]);
  amrex::Real x83 = -717.08374877172605 * invT - 2.57 * tc[0];
  amrex::Real x85 = 1350000000000.0 * exp(x83);
  amrex::Real x88 = log(
    0.2176 * exp(-0.0036900369003690001 * tc[1]) +
    0.7824 * exp(-0.00036297640653357502 * tc[1]) + exp(-6570.0 * invT));
  amrex::Real x91 = -0.29097730287517898 * x88 +
                    0.43429448190325198 * log(x7 * x85 / kf_qss[1]) - 0.4;
  amrex::Real x96 =
    1.7777777777777777 * ((x91) * (x91)) /
      ((-0.73540532268950665 * x88 - 0.18666666666666668 * x91 + 1) *
       (-0.73540532268950665 * x88 - 0.18666666666666668 * x91 + 1)) +
    1.0;
  amrex::Real x99 = exp(M_LN10 * (0.43429448190325198 * x88 / x96)) /
                    (1.0 + x7 * x85 / kf_qss[1]);
  amrex::Real x104 = g_RT[3] - g_RT[6];
  amrex::Real x109 = g_RT[2] - g_RT[4];
  amrex::Real x113 = -g_RT[0] + g_RT[11] + g_RT[1] - g_RT_qss[2];
  amrex::Real x117 = -kf_qss[11] * sc[6] * exp(-x104 - x69) -
                     kf_qss[12] * sc[1] - kf_qss[13] * sc[0] * exp(-x113) -
                     kf_qss[21] * sc[4] - kf_qss[22] * sc[5] * exp(-x45 - x69) -
                     kf_qss[37] * sc[7] - kf_qss[38] * sc[8] * exp(-x67 - x69) -
                     kf_qss[39] * sc[3] - kf_qss[3] * sc[5] - kf_qss[4] * x6 -
                     kf_qss[5] * sc[1] * x80 - kf_qss[7] * sc[2] -
                     kf_qss[8] * sc[2] - kf_qss[9] * sc[4] * exp(-x109 - x69) -
                     sc[1] * x7 * x85 * x99 - sc[4] * x76 + 10.0e-13;
  const amrex::Real x122 =
    (kf_qss[25] * sc[3] + kf_qss[5] * sc[2] + 10.0e-13) / x117;
  amrex::Real x125 = 2.3703703703703702 * ((x91) * (x91)) /
                     ((-0.73540532269 * x88 - 0.18666666666666668 * x91 + 1) *
                      (-0.73540532269 * x88 - 0.18666666666666668 * x91 + 1) *
                      (-0.73540532269 * x88 - 0.18666666666666668 * x91 + 1));
  amrex::Real x126 = 0.43429448190325198 / x7;
  x91 = 1.7777777777777777 * x91 /
        ((-0.73540532268950665 * x88 - 0.18666666666666668 * x91 + 1) *
         (-0.73540532268950665 * x88 - 0.18666666666666668 * x91 + 1));
  amrex::Real x132 = sc[1] * x7 * x85 * x88 * x99 / ((x96) * (x96));
  amrex::Real x133 =
    exp(M_LN10 * (0.43429448190325198 * x88 / x96)) * x7 /
    (kf_qss[1] * ((1.0 + x7 * x85 / kf_qss[1]) * (1.0 + x7 * x85 / kf_qss[1])));
  amrex::Real x136 =
    sc[1] * x133 * exp(-1434.1674975434501 * invT - 5.14 * tc[0]);
  amrex::Real x139 = -2 * kf_qss[4] - 2700000000000.0 * sc[1] * x99 * exp(x83) +
                     x132 * (0.56 * x125 * x126 + 4.0 * x126 * x91) +
                     3.645e+24 * x136;
  amrex::Real x140 = -kf_qss[13] * exp(-x113) + x139;
  amrex::Real x142 = -618.95649893980499 * invT - 3.14 * tc[0];
  amrex::Real x144 = 3200000000000000.0 * exp(x142);
  amrex::Real x147 = log(
    0.32 * exp(-0.012820512820512799 * tc[1]) +
    0.68 * exp(-0.00050125313283207998 * tc[1]) + exp(-5590.0 * invT));
  amrex::Real x150 = -0.29097730287517898 * x147 +
                     0.43429448190325198 * log(x144 * x7 / kf_qss[0]) - 0.4;
  amrex::Real x155 =
    1.7777777777777777 * ((x150) * (x150)) /
      ((-0.73540532268950665 * x147 - 0.18666666666666668 * x150 + 1) *
       (-0.73540532268950665 * x147 - 0.18666666666666668 * x150 + 1)) +
    1.0;
  amrex::Real x158 = exp(M_LN10 * (0.43429448190325198 * x147 / x155)) /
                     (1.0 + x144 * x7 / kf_qss[0]);
  amrex::Real x164 = -kf_qss[17] * sc[4] -
                     kf_qss[19] * sc[5] * exp(-g_RT[7] + g_RT_qss[0] - x45) -
                     kf_qss[24] * sc[6] - kf_qss[25] * sc[3] -
                     kf_qss[26] * sc[0] - kf_qss[27] * sc[8] -
                     kf_qss[28] * sc[12] * x59 - kf_qss[32] * sc[5] * x59 -
                     kf_qss[34] * sc[9] * x59 - kf_qss[35] * sc[10] * x59 -
                     kf_qss[5] * sc[2] - sc[1] * x144 * x158 * x7 + 10.0e-13;
  amrex::Real x166 = kf_qss[5] * sc[1] * x80 + sc[4] * x76 + 10.0e-13;
  amrex::Real x167 = x166 / x164;
  amrex::Real x170 = x167 *
                     (kf_qss[25] * sc[3] + kf_qss[5] * sc[2] + 10.0e-13) /
                     ((x117) * (x117));
  amrex::Real x172 = 2.3703703703703702 * ((x150) * (x150)) /
                     ((-0.73540532269 * x147 - 0.18666666666666668 * x150 + 1) *
                      (-0.73540532269 * x147 - 0.18666666666666668 * x150 + 1) *
                      (-0.73540532269 * x147 - 0.18666666666666668 * x150 + 1));
  x150 = 1.7777777777777777 * x150 /
         ((-0.73540532268950665 * x147 - 0.18666666666666668 * x150 + 1) *
          (-0.73540532268950665 * x147 - 0.18666666666666668 * x150 + 1));
  amrex::Real x176 = sc[1] * x144 * x147 * x158 * x7 / ((x155) * (x155));
  amrex::Real x178 = exp(M_LN10 * (0.43429448190325198 * x147 / x155)) * x7 /
                     (kf_qss[0] * ((1.0 + x144 * x7 / kf_qss[0]) *
                                   (1.0 + x144 * x7 / kf_qss[0])));
  amrex::Real x182 =
    sc[1] * x178 * exp(-1237.91299787961 * invT - 6.28 * tc[0]);
  amrex::Real x183 = -6400000000000000.0 * sc[1] * x158 * exp(x142) +
                     x176 * (4.0 * x126 * x150 + 0.56 * x126 * x172) +
                     2.048e+31 * x182;
  amrex::Real x187 = x122 * x166 / ((x164) * (x164));
  amrex::Real x191 = x126 * x20 / ((x24) * (x24));
  amrex::Real x192 = x126 * ((x20) * (x20)) / ((x24) * (x24) * (x24));
  amrex::Real x195 = 1.27e+20 * x17 * x31 * x7 / ((x26) * (x26));
  x16 = exp(M_LN10 * (0.43429448190325198 * x17 / x26)) /
        (kf_qss[2] * ((x16 + 1.0) * (x16 + 1.0)));
  const amrex::Real x198 = refC * x7;
  amrex::Real x199 =
    x198 * exp(-6572.0096554096399 * invT - 9.64 * tc[0] + x10);
  amrex::Real x201 = 3.2258e+40 * x16 * x199 +
                     x195 * (4.0 * x191 + 0.56 * x192) - 2.54e+20 * x31;
  amrex::Real x203 = (kf_qss[16] * sc[5] * x39 + 10.0e-13) / ((x34) * (x34));
  amrex::Real x204 = x203 * x55;
  amrex::Real x208 = x43 * x54 / ((x52) * (x52));
  amrex::Real x211 = kf_qss[28] * sc[12] + kf_qss[32] * sc[5] +
                     kf_qss[34] * sc[9] + kf_qss[35] * sc[10] + 10.0e-13;
  amrex::Real x214 = x211 * x64 / (x164 * x52 * ((x56) * (x56)));
  amrex::Real x216 = x211 * x66 / ((x164) * (x164));
  amrex::Real x218 = x211 / (x164 * x56);
  amrex::Real x220 = x218 * x64 / ((x52) * (x52));
  const amrex::Real x223 = exp(g_RT[11] - g_RT_qss[3] - x109);
  amrex::Real x227 = kf_qss[40] * exp(g_RT[11] - g_RT_qss[3] - x104);
  const amrex::Real x229 = exp(g_RT[0] + g_RT[11] - g_RT[1] - g_RT_qss[3]);
  const amrex::Real x234 = exp(-g_RT[1] + g_RT[4] + g_RT[7] - g_RT_qss[3]);
  amrex::Real x237 = sc[11] * sc[1];
  amrex::Real x238 = 1.27e+20 * x29 * x7 * exp(x11);
  const amrex::Real x240 = exp(g_RT[11] - g_RT_qss[3] - x45);
  amrex::Real x243 =
    kf_qss[10] * sc[11] * sc[4] * x223 + kf_qss[14] * sc[0] * sc[11] * x229 +
    kf_qss[15] * sc[4] * sc[7] * x234 + kf_qss[23] * sc[11] * sc[5] * x240 +
    sc[11] * sc[6] * x227 + x237 * x238 + 10.0e-13;
  const amrex::Real x244 = x243 / x34;
  const amrex::Real x247 = exp(-g_RT[3] + g_RT[5] + g_RT[9] - g_RT_qss[1]);
  const amrex::Real x251 = exp(g_RT[0] - g_RT[2] + g_RT[9] - g_RT_qss[1]);
  const amrex::Real x255 = -2.0 * g_RT[7] + g_RT[8];
  const amrex::Real x260 = exp(g_RT[11] + g_RT[1] - g_RT[4] - g_RT_qss[1]);
  const amrex::Real x264 = refCinv * sc[1];
  const amrex::Real x265 = sc[9] * x264;
  const amrex::Real x266 =
    exp(g_RT[1] - g_RT[3] + g_RT[4] + g_RT[9] - g_RT_qss[1]);
  const amrex::Real x269 = exp(-g_RT[10] + g_RT[11] + g_RT[9] - g_RT_qss[1]);
  const amrex::Real x274 = exp(-g_RT[0] + g_RT[1] + g_RT[7] - g_RT_qss[1]);
  amrex::Real x277 =
    kf_qss[18] * sc[11] * sc[1] * x260 + kf_qss[20] * sc[4] * sc[7] +
    kf_qss[29] * sc[4] * x265 * x266 + kf_qss[30] * sc[5] * sc[9] * x247 +
    kf_qss[31] * sc[1] * sc[7] * x274 +
    kf_qss[33] * ((sc[7]) * (sc[7])) * exp(-g_RT_qss[1] - x255) +
    kf_qss[36] * sc[11] * sc[9] * x269 + kf_qss[6] * sc[0] * sc[9] * x251 +
    10.0e-13;
  amrex::Real x278 = x244 * x55 - x277 / x52;
  amrex::Real x279 = x278 / (x164 * x56);
  const amrex::Real x284 = exp(g_RT[0] - g_RT[1] + g_RT[9] - g_RT_qss[2]);
  const amrex::Real x288 = exp(g_RT[9] - g_RT_qss[2] - x109);
  amrex::Real x293 = exp(g_RT[1] + g_RT[9] - g_RT_qss[2]);
  const amrex::Real x295 = exp(g_RT[9] - g_RT_qss[2] - x45);
  const amrex::Real x298 = refC * sc[11];
  amrex::Real x300 = x99 * exp(g_RT[11] - g_RT[1] - g_RT_qss[2] + x83);
  amrex::Real x305 = kf_qss[39] * exp(g_RT[9] - g_RT_qss[2] - x104);
  const amrex::Real x308 = exp(g_RT[10] + g_RT[1] - g_RT[2] - g_RT_qss[2]);
  const amrex::Real x313 = exp(g_RT[9] - g_RT_qss[2] - x67);
  amrex::Real x316 =
    kf_qss[11] * sc[11] * sc[3] + kf_qss[12] * sc[0] * sc[9] * x284 +
    kf_qss[13] * sc[11] * sc[1] + kf_qss[21] * sc[5] * sc[9] * x295 +
    kf_qss[22] * sc[11] * sc[4] + kf_qss[37] * sc[8] * sc[9] * x313 +
    kf_qss[38] * sc[11] * sc[7] + kf_qss[3] * sc[5] * x265 * x293 +
    kf_qss[4] * x265 * x293 * x6 + kf_qss[7] * sc[4] * sc[9] * x288 +
    kf_qss[8] * sc[10] * sc[1] * x308 + kf_qss[9] * sc[11] * sc[2] +
    sc[6] * sc[9] * x305 + 1350000000000.0 * x298 * x300 * x7 + 10.0e-13;
  const amrex::Real x317 = x316 / x117;
  const amrex::Real x319 = exp(g_RT[11] + g_RT[1] - g_RT[4] - g_RT_qss[0]);
  amrex::Real x322 = -g_RT[1] + g_RT[7] - g_RT_qss[0];
  const amrex::Real x330 = exp(g_RT[11] + g_RT[4] - g_RT[6] - g_RT_qss[0]);
  amrex::Real x336 =
    kf_qss[26] * exp(-g_RT[0] + g_RT[1] + g_RT[7] - g_RT_qss[0]);
  amrex::Real x339 =
    kf_qss[17] * sc[11] * sc[1] * x319 + kf_qss[19] * sc[4] * sc[7] +
    kf_qss[24] * sc[11] * sc[4] * x330 +
    kf_qss[27] * ((sc[7]) * (sc[7])) * exp(-g_RT_qss[0] - x255) +
    3200000000000000.0 * refC * sc[7] * x158 * x7 * exp(x142 + x322) +
    sc[1] * sc[7] * x336 + 10.0e-13;
  amrex::Real x342 = (x167 * x317 - x211 * x279 - x339 / x164) /
                     ((-x122 * x167 + 1 - x211 * x66 / x164) *
                      (-x122 * x167 + 1 - x211 * x66 / x164));
  const amrex::Real x343 =
    x342 *
    (-kf_qss[31] * x220 + x140 * x170 + x187 * (-kf_qss[26] + x183) +
     x214 * (-kf_qss[31] * x208 + x201 * x204) + x216 * (-kf_qss[26] + x183));
  x155 = 3200000000000000.0 * refC * sc[7] * x147 * x158 * x7 *
         exp(x142 + x322) / ((x155) * (x155));
  amrex::Real x345 = refC * sc[7] * x158 * exp(x142 + x322);
  amrex::Real x346 =
    refC * sc[7] * exp(-1237.91299787961 * invT - 6.28 * tc[0] + x322);
  amrex::Real x348 = -(-x155 * (4.0 * x126 * x150 + 0.56 * x126 * x172) -
                       2.048e+31 * x178 * x346 + 6400000000000000.0 * x345) /
                     x164;
  amrex::Real x349 = x339 / ((x164) * (x164));
  x316 = x316 / ((x117) * (x117));
  amrex::Real x353 = x211 * x278 / (((x164) * (x164)) * x56);
  x166 = x166 * x317 / ((x164) * (x164));
  x96 = 1350000000000.0 * x298 * x300 * x7 * x88 / ((x96) * (x96));
  amrex::Real x356 = x298 * exp(
                              g_RT[11] - g_RT[1] - g_RT_qss[2] -
                              1434.1674975434501 * invT - 5.14 * tc[0]);
  amrex::Real x358 = 2 * kf_qss[4] * x265 * x293 - 3.645e+24 * x133 * x356 +
                     2700000000000.0 * x298 * x300 -
                     x96 * (0.56 * x125 * x126 + 4.0 * x126 * x91);
  x277 = x277 / ((x52) * (x52));
  x243 = x243 / ((x34) * (x34));
  x26 = x17 * x237 * x238 / ((x26) * (x26));
  amrex::Real x366 = x237 * x7 * exp(-6572.0096554096399 * invT - 9.64 * tc[0]);
  amrex::Real x370 = -3.2258e+40 * x16 * x366 +
                     2.54e+20 * x237 * x29 * exp(x11) -
                     x26 * (4.0 * x191 + 0.56 * x192);
  amrex::Real x373 = x244 * x54 / ((x52) * (x52));
  amrex::Real x374 = -kf_qss[31] * x277 + kf_qss[31] * x373 -
                     kf_qss[6] * sc[9] * x251 / x52 - x201 * x243 * x55 +
                     x55 * (kf_qss[14] * sc[11] * x229 + x370) / x34;
  amrex::Real x375 = x211 * x278 / (x164 * ((x56) * (x56)));
  amrex::Real x376 = (1.0 / ((-x122 * x167 + 1 - x211 * x66 / x164)));
  const amrex::Real x377 =
    x376 * (-x140 * x167 * x316 - x166 * (-kf_qss[26] + x183) - x218 * x374 +
            x348 + x349 * (-kf_qss[26] + x183) + x353 * (-kf_qss[26] + x183) +
            x375 * (-kf_qss[31] * x208 + x201 * x204) +
            x167 * (kf_qss[12] * sc[9] * x284 + x358) / x117);
  amrex::Real x382 = -sc[1] * x144 * x158 +
                     x176 * (2.0 * x126 * x150 + 0.28 * x126 * x172) +
                     1.024e+31 * x182;
  x144 = -x144 * x158 * x7 + x382;
  amrex::Real x387 = -1.27e+20 * refC * x29 * exp(x10 + x11) +
                     1.6129e+40 * x16 * x199 +
                     x195 * (2.0 * x126 * x20 / ((x24) * (x24)) + 0.28 * x192);
  amrex::Real x388 = -kf_qss[14] - kf_qss[15] - kf_qss[16] + x387;
  amrex::Real x389 = -kf_qss[16] * x43 / x52 + x204 * x388;
  amrex::Real x391 = -kf_qss[4] - sc[1] * x85 * x99 +
                     x132 * (0.28 * x125 * x126 + 2.0 * x126 * x91) +
                     1.8225e+24 * x136;
  x85 = -kf_qss[12] - kf_qss[5] * x80 + x391 - x7 * x85 * x99;
  const amrex::Real x393 =
    x342 * (-kf_qss[5] * x122 * x80 / x164 + x144 * x187 + x144 * x216 +
            x170 * x85 + x214 * x389);
  x20 = -1.6129e+40 * x16 * x366 + 1.27e+20 * x237 * x29 * exp(x11) -
        x26 * (2.0 * x126 * x20 / ((x24) * (x24)) + 0.28 * x192);
  x24 =
    (kf_qss[16] * x244 / x52 - x243 * x388 * x55 -
     (kf_qss[18] * sc[11] * x260 + kf_qss[29] * refCinv * sc[4] * sc[9] * x266 +
      kf_qss[31] * sc[7] * x274) /
       x52 +
     x55 * (sc[11] * x238 + x20) / x34) /
    x56;
  amrex::Real x403 = kf_qss[4] * x265 * x293 - 1.8225e+24 * x133 * x356 +
                     1350000000000.0 * x298 * x300 -
                     x96 * (0.28 * x125 * x126 + 2.0 * x126 * x91);
  amrex::Real x404 =
    (kf_qss[13] * sc[11] + kf_qss[3] * refCinv * sc[5] * sc[9] * x293 +
     kf_qss[4] * refCinv * sc[9] * x293 * x6 + kf_qss[8] * sc[10] * x308 +
     x403) /
    x117;
  amrex::Real x405 = -x155 * (2.0 * x126 * x150 + 0.28 * x126 * x172) -
                     1.024e+31 * x178 * x346 + 3200000000000000.0 * x345;
  x144 = x376 * (kf_qss[5] * x317 * x80 / x164 - x144 * x166 + x144 * x349 +
                 x144 * x353 - x167 * x316 * x85 + x167 * x404 + x375 * x389 -
                 x211 * x24 / x164 -
                 (kf_qss[17] * sc[11] * x319 + sc[7] * x336 + x405) / x164);
  amrex::Real x407 = -kf_qss[7] - kf_qss[8] + x391;
  amrex::Real x411 = -kf_qss[6] * x208 + x204 * (-kf_qss[10] + x387);
  const amrex::Real x412 = x342 * (-kf_qss[5] * x167 / x117 - kf_qss[6] * x220 +
                                   x170 * x407 + x187 * (-kf_qss[5] + x382) +
                                   x214 * x411 + x216 * (-kf_qss[5] + x382));
  amrex::Real x418 = -kf_qss[6] * x277 + kf_qss[6] * x373 + x20 * x55 / x34 -
                     x243 * x55 * (-kf_qss[10] + x387);
  const amrex::Real x420 =
    x376 *
    (-x166 * (-kf_qss[5] + x382) - x167 * x316 * x407 - x218 * x418 +
     x349 * (-kf_qss[5] + x382) + x353 * (-kf_qss[5] + x382) + x375 * x411 -
     x405 / x164 + x167 * (kf_qss[9] * sc[11] + x403) / x117);
  amrex::Real x424 = -kf_qss[29] - kf_qss[30];
  amrex::Real x425 = x204 * (-kf_qss[40] + x387) + x208 * x424;
  const amrex::Real x426 =
    x342 * (-kf_qss[25] * x167 / x117 + x170 * (-kf_qss[39] + x391) +
            x187 * (-kf_qss[25] + x382) + x214 * x425 +
            x216 * (-kf_qss[25] + x382) + x220 * x424);
  amrex::Real x430 = x20 * x55 / x34 - x243 * x55 * (-kf_qss[40] + x387) +
                     x277 * x424 - x373 * x424;
  const amrex::Real x431 =
    x376 *
    (-x166 * (-kf_qss[25] + x382) - x167 * x316 * (-kf_qss[39] + x391) -
     x218 * x430 + x349 * (-kf_qss[25] + x382) + x353 * (-kf_qss[25] + x382) +
     x375 * x425 - x405 / x164 + x167 * (kf_qss[11] * sc[11] + x403) / x117);
  amrex::Real x432 = -kf_qss[21] - kf_qss[9] * exp(-x109 - x69) + x391 - x76;
  amrex::Real x436 = -kf_qss[18] * x208 + x204 * (-kf_qss[23] + x387);
  const amrex::Real x437 = x342 * (-kf_qss[18] * x220 - x122 * x76 / x164 +
                                   x170 * x432 + x187 * (-kf_qss[17] + x382) +
                                   x214 * x436 + x216 * (-kf_qss[17] + x382));
  amrex::Real x442 =
    -kf_qss[18] * x277 + kf_qss[18] * x373 - x243 * x55 * (-kf_qss[23] + x387) -
    (kf_qss[20] * sc[7] + kf_qss[29] * x265 * x266) / x52 +
    x55 * (kf_qss[10] * sc[11] * x223 + kf_qss[15] * sc[7] * x234 + x20) / x34;
  x76 = x376 *
        (-x166 * (-kf_qss[17] + x382) - x167 * x316 * x432 - x218 * x442 +
         x349 * (-kf_qss[17] + x382) + x353 * (-kf_qss[17] + x382) +
         x375 * x436 + x317 * x76 / x164 -
         (kf_qss[19] * sc[7] + kf_qss[24] * sc[11] * x330 + x405) / x164 +
         x167 * (kf_qss[22] * sc[11] + kf_qss[7] * sc[9] * x288 + x403) / x117);
  amrex::Real x449 =
    -kf_qss[19] * exp(-g_RT[7] + g_RT_qss[0] - x45) - kf_qss[32] * x59 -
    1.92e+16 * sc[1] * x158 * exp(x142) +
    6.144e+31 * sc[1] * x178 * exp(-1237.91299787961 * invT - 6.28 * tc[0]) +
    x176 * (12.0 * x126 * x150 + 1.68 * x126 * x172);
  amrex::Real x452 = 9.6774e+40 * x16 * x199 +
                     x195 * (12.0 * x191 + 1.68 * x192) - 7.62e+20 * x31;
  amrex::Real x453 = -kf_qss[16] * x39 - kf_qss[20] * x47 - kf_qss[32];
  amrex::Real x455 = -kf_qss[16] * x39 * x55 / x34 + x204 * x452 + x208 * x453;
  amrex::Real x460 =
    -kf_qss[22] * exp(-x45 - x69) - kf_qss[3] +
    1.0935e+25 * sc[1] * x133 * exp(-1434.1674975434501 * invT - 5.14 * tc[0]) -
    8100000000000.0 * sc[1] * x99 * exp(x83) +
    x132 * (1.68 * x125 * x126 + 12.0 * x126 * x91);
  const amrex::Real x462 =
    x342 *
    (-kf_qss[32] * x218 * x59 / x52 - kf_qss[32] * x66 / x164 + x170 * x460 +
     x187 * x449 + x214 * x455 + x216 * x449 + x220 * x453);
  amrex::Real x465 =
    (kf_qss[23] * sc[11] * x240 - 9.6774e+40 * x16 * x366 +
     7.62e+20 * x237 * x29 * exp(x11) - x26 * (12.0 * x191 + 1.68 * x192)) /
    x34;
  amrex::Real x466 = -kf_qss[30] * sc[9] * x247 / x52 - x243 * x452 * x55 +
                     x277 * x453 - x373 * x453 + x465 * x55;
  amrex::Real x467 = (kf_qss[21] * sc[9] * x295 + kf_qss[3] * x265 * x293 -
                      1.0935e+25 * x133 * x356 + 8100000000000.0 * x298 * x300 -
                      x96 * (1.68 * x125 * x126 + 12.0 * x126 * x91)) /
                     x117;
  x449 = x376 *
         (-kf_qss[32] * x279 - x166 * x449 - x167 * x316 * x460 + x167 * x467 -
          x218 * x466 + x349 * x449 + x353 * x449 + x375 * x455 -
          (-x155 * (12.0 * x126 * x150 + 1.68 * x126 * x172) -
           6.144e+31 * x178 * x346 + 1.92e+16 * x345) /
            x164);
  amrex::Real x469 = -kf_qss[11] * exp(-x104 - x69) + x391;
  amrex::Real x470 =
    x203 * x211 * x387 * x54 * x64 / (x164 * ((x52) * (x52)) * ((x56) * (x56)));
  const amrex::Real x472 = x342 * (x170 * x469 + x187 * (-kf_qss[24] + x382) +
                                   x216 * (-kf_qss[24] + x382) + x470);
  amrex::Real x478 = -x243 * x387 * x55;
  const amrex::Real x480 = (x478 + x55 * (sc[11] * x227 + x20) / x34) / x56;
  const amrex::Real x481 =
    x376 *
    (-x166 * (-kf_qss[24] + x382) - x167 * x316 * x469 + x204 * x375 * x387 +
     x349 * (-kf_qss[24] + x382) + x353 * (-kf_qss[24] + x382) -
     x211 * x480 / x164 - x405 / x164 + x167 * (sc[9] * x305 + x403) / x117);
  const amrex::Real x484 =
    x342 * (x170 * (-kf_qss[37] + x391) + x187 * x382 + x216 * x382 + x470);
  const amrex::Real x489 =
    (x478 -
     (kf_qss[20] * sc[4] + kf_qss[31] * sc[1] * x274 +
      2.0 * kf_qss[33] * ((sc[7])) * exp(-g_RT_qss[1] - x255)) /
       x52 +
     x55 * (kf_qss[15] * sc[4] * x234 + x20) / x34) /
    x56;
  x336 = x376 *
         (-x166 * x382 - x167 * x316 * (-kf_qss[37] + x391) +
          x204 * x375 * x387 + x349 * x382 + x353 * x382 - x211 * x489 / x164 -
          (kf_qss[19] * sc[4] +
           2.0 * kf_qss[27] * ((sc[7])) * exp(-g_RT_qss[0] - x255) +
           3200000000000000.0 * refC * x158 * x7 * exp(x142 + x322) +
           sc[1] * x336 + x405) /
            x164 +
          x167 * (kf_qss[38] * sc[11] + x403) / x117);
  amrex::Real x492 = -kf_qss[38] * exp(-x67 - x69) + x139;
  const amrex::Real x495 =
    x342 *
    (-kf_qss[33] * x220 + x170 * x492 + x187 * (-kf_qss[27] + x183) +
     x214 * (-kf_qss[33] * x208 + x201 * x204) + x216 * (-kf_qss[27] + x183));
  amrex::Real x499 = -x201 * x243 * x55 + x370 * x55 / x34;
  const amrex::Real x501 =
    x376 * (-x166 * (-kf_qss[27] + x183) - x167 * x316 * x492 -
            x218 * (-kf_qss[33] * x277 + kf_qss[33] * x373 + x499) + x348 +
            x349 * (-kf_qss[27] + x183) + x353 * (-kf_qss[27] + x183) +
            x375 * (-kf_qss[33] * x208 + x201 * x204) +
            x167 * (kf_qss[37] * sc[9] * x313 + x358) / x117);
  x99 = -1.5 * kf_qss[4] - 2025000000000.0 * sc[1] * x99 * exp(x83) +
        x132 * (0.42 * x125 * x126 + 3.0 * x126 * x91) + 2.73375e+24 * x136;
  x132 = -kf_qss[34] * x59 - 4800000000000000.0 * sc[1] * x158 * exp(x142) +
         x176 * (3.0 * x126 * x150 + 0.42 * x126 * x172) + 1.536e+31 * x182;
  x31 = 2.41935e+40 * x16 * x199 + x195 * (3.0 * x191 + 0.42 * x192) -
        1.905e+20 * x31;
  x136 = x342 * (-kf_qss[34] * x218 * x59 / x52 - kf_qss[34] * x220 -
                 kf_qss[34] * x66 / x164 + x132 * x187 + x132 * x216 +
                 x170 * x99 + x214 * (-kf_qss[34] * x208 + x204 * x31));
  x125 = (kf_qss[12] * sc[0] * x284 + kf_qss[21] * sc[5] * x295 +
          kf_qss[37] * sc[8] * x313 + kf_qss[3] * sc[5] * x264 * x293 +
          1.5 * kf_qss[4] * sc[9] * x264 * x293 + kf_qss[4] * x264 * x293 * x6 +
          kf_qss[7] * sc[4] * x288 + sc[6] * x305 - 2.73375e+24 * x133 * x356 +
          2025000000000.0 * x298 * x300 -
          x96 * (0.42 * x125 * x126 + 3.0 * x126 * x91)) /
         x117;
  x29 = (-2.41935e+40 * x16 * x366 + 1.905e+20 * x237 * x29 * exp(x11) -
         x26 * (3.0 * x191 + 0.42 * x192)) /
        x34;
  x91 = -kf_qss[34] * x277 + kf_qss[34] * x373 - x243 * x31 * x55 + x29 * x55 -
        (kf_qss[29] * sc[4] * x264 * x266 + kf_qss[30] * sc[5] * x247 +
         kf_qss[36] * sc[11] * x269 + kf_qss[6] * sc[0] * x251) /
          x52;
  x133 = x376 * (-kf_qss[34] * x279 + x125 * x167 - x132 * x166 + x132 * x349 +
                 x132 * x353 - x167 * x316 * x99 - x218 * x91 +
                 x375 * (-kf_qss[34] * x208 + x204 * x31) -
                 (-x155 * (3.0 * x126 * x150 + 0.42 * x126 * x172) -
                  1.536e+31 * x178 * x346 + 4800000000000000.0 * x345) /
                   x164);
  x142 = -kf_qss[35] * x59 + x183;
  x158 = (-kf_qss[35] - kf_qss[36]) / ((x52) * (x52));
  x172 =
    x342 * (-kf_qss[35] * x218 * x59 / x52 - kf_qss[35] * x66 / x164 +
            x139 * x170 + x142 * x187 + x142 * x211 * x66 / ((x164) * (x164)) +
            x158 * x218 * x64 + x214 * (x158 * x43 * x54 + x201 * x204));
  x150 =
    x376 *
    (-kf_qss[35] * x279 - x139 * x167 * x316 - x142 * x166 + x142 * x349 +
     x142 * x211 * x278 / (((x164) * (x164)) * x56) -
     x218 * (-x158 * x244 * x54 + x277 * (-kf_qss[35] - kf_qss[36]) + x499) +
     x348 + x375 * (x158 * x43 * x54 + x201 * x204) +
     x167 * (kf_qss[8] * sc[1] * x308 + x358) / x117);
  x176 = x342 * (x170 * x391 + x187 * x382 + x216 * x382 + x470);
  x178 = (kf_qss[10] * sc[4] * x223 + kf_qss[14] * sc[0] * x229 +
          kf_qss[23] * sc[5] * x240 + sc[1] * x238 + sc[6] * x227 + x20) /
         x34;
  x182 = (x178 * x55 + x478 -
          (kf_qss[18] * sc[1] * x260 + kf_qss[36] * sc[9] * x269) / x52) /
         x56;
  x183 = (kf_qss[11] * sc[3] + kf_qss[13] * sc[1] + kf_qss[22] * sc[4] +
          kf_qss[38] * sc[7] + kf_qss[9] * sc[2] +
          1350000000000.0 * x198 * x300 + x403) /
         x117;
  x191 =
    x376 *
    (-x166 * x382 + x167 * x183 - x167 * x316 * x391 + x204 * x375 * x387 +
     x349 * x382 + x353 * x382 - x182 * x211 / x164 -
     (kf_qss[17] * sc[1] * x319 + kf_qss[24] * sc[4] * x330 + x405) / x164);
  x192 = -kf_qss[28] * x59 + x382;
  x170 = x342 * (-kf_qss[28] * x218 * x59 / x52 - kf_qss[28] * x220 -
                 kf_qss[28] * x66 / x164 + x170 * x391 + x187 * x192 +
                 x192 * x216 + x214 * (-kf_qss[28] * x208 + x204 * x387));
  x187 =
    x376 *
    (-kf_qss[28] * x279 - x166 * x192 - x167 * x316 * x391 + x192 * x349 +
     x192 * x353 -
     x218 * (-kf_qss[28] * x277 + kf_qss[28] * x373 + x20 * x55 / x34 + x478) +
     x375 * (-kf_qss[28] * x208 + x204 * x387) - x405 / x164 +
     x167 * x403 / x117);
  x195 = (-sc_qss[0] * x64 / x52 + x278) / ((x56) * (x56));
  x16 = x195 * (-kf_qss[31] * x208 + x201 * x204);
  x199 = sc_qss[0] * x64 / ((x52) * (x52));
  x214 = (-kf_qss[31] * x199 + x374) / x56;
  x216 = x195 * x389;
  x218 = x195 * x411;
  x220 = (-kf_qss[6] * x199 + x418) / x56;
  x293 = x195 * x425;
  x300 = (x199 * x424 + x430) / x56;
  x342 = x195 * x436;
  x155 = (-kf_qss[18] * x199 + x442) / x56;
  x345 = x195 * x455;
  x346 = (-kf_qss[32] * sc_qss[0] * x59 / x52 + x199 * x453 + x466) / x56;
  x348 = x195 * x204 * x387;
  x349 = x195 * (-kf_qss[33] * x208 + x201 * x204);
  x353 =
    (-kf_qss[33] * x199 - kf_qss[33] * x277 + kf_qss[33] * x373 + x499) / x56;
  x166 = x195 * (-kf_qss[34] * x208 + x204 * x31);
  x96 = (-kf_qss[34] * sc_qss[0] * x59 / x52 - kf_qss[34] * x199 + x91) / x56;
  x356 = x195 * (x158 * x43 * x54 + x201 * x204);
  x54 = (-kf_qss[35] * sc_qss[0] * x59 / x52 + sc_qss[0] * x158 * x64 -
         x158 * x244 * x54 + x277 * (-kf_qss[35] - kf_qss[36]) + x499) /
        x56;
  x204 = x195 * (-kf_qss[28] * x208 + x204 * x387);
  x55 = (-kf_qss[28] * sc_qss[0] * x59 / x52 - kf_qss[28] * x199 -
         kf_qss[28] * x277 + kf_qss[28] * x373 + x20 * x55 / x34 + x478) /
        x56;
  x59 = sc_qss[0] * (kf_qss[25] * sc[3] + kf_qss[5] * sc[2] + 10.0e-13) /
        ((x117) * (x117));
  x140 = x140 * x316 + x140 * x59 - (kf_qss[12] * sc[9] * x284 + x358) / x117;
  x208 = x316 * x85 - x404 + x59 * x85;
  x277 = -kf_qss[5] * sc_qss[0] / x117 + x316 * x407 + x407 * x59 -
         (kf_qss[9] * sc[11] + x403) / x117;
  x26 = -kf_qss[25] * sc_qss[0] / x117 + x316 * (-kf_qss[39] + x391) +
        x59 * (-kf_qss[39] + x391) - (kf_qss[11] * sc[11] + x403) / x117;
  x366 = x316 * x432 + x432 * x59 -
         (kf_qss[22] * sc[11] + kf_qss[7] * sc[9] * x288 + x403) / x117;
  x373 = x316 * x460 + x460 * x59 - x467;
  x305 = x316 * x469 + x469 * x59 - (sc[9] * x305 + x403) / x117;
  x374 = x316 * (-kf_qss[37] + x391) + x59 * (-kf_qss[37] + x391) -
         (kf_qss[38] * sc[11] + x403) / x117;
  x375 = x316 * x492 + x492 * x59 - (kf_qss[37] * sc[9] * x313 + x358) / x117;
  x382 = -x125 + x316 * x99 + x59 * x99;
  x139 = x139 * x316 + x139 * x59 - (kf_qss[8] * sc[1] * x308 + x358) / x117;
  x358 = -x183 + x316 * x391 + x391 * x59;
  x117 = x316 * x391 + x391 * x59 - x403 / x117;
  x316 = sc_qss[1] * x201 * x203 + x201 * x243 -
         (kf_qss[14] * sc[11] * x229 + x370) / x34;
  x238 = sc_qss[1] * x203 * x388 + x243 * x388 - (sc[11] * x238 + x20) / x34;
  x388 = sc_qss[1] * x203 * (-kf_qss[10] + x387) - x20 / x34 +
         x243 * (-kf_qss[10] + x387);
  x389 = sc_qss[1] * x203 * (-kf_qss[40] + x387) - x20 / x34 +
         x243 * (-kf_qss[40] + x387);
  x391 = sc_qss[1] * x203 * (-kf_qss[23] + x387) + x243 * (-kf_qss[23] + x387) -
         (kf_qss[10] * sc[11] * x223 + kf_qss[15] * sc[7] * x234 + x20) / x34;
  x85 = -kf_qss[16] * sc_qss[1] * x39 / x34 + sc_qss[1] * x203 * x452 +
        x243 * x452 - x465;
  x387 = sc_qss[1] * x203 * x387 + x243 * x387;
  x227 = x387 - (sc[11] * x227 + x20) / x34;
  x403 = x387 - (kf_qss[15] * sc[4] * x234 + x20) / x34;
  x201 = sc_qss[1] * x201 * x203 + x201 * x243 - x370 / x34;
  x203 = sc_qss[1] * x203 * x31 + x243 * x31 - x29;
  x243 = -x178 + x387;
  x34 = -x20 / x34 + x387;
  x113 = 23000.0 * exp(-1648.03458051046 * invT + 1.05 * tc[0] - x113);
  x370 = sc[0] * x113;
  x20 = 80000000.0 * sc[1] * x80;
  x404 = 130.83633310922701 * invT + 0.48 * tc[0];
  x83 = 1238532.11009174 * x7 * exp(-x404 + x83);
  x405 = -0.29097730287517898 * x88 + 0.43429448190325198 * log(x83) - 0.4;
  x407 = 1.7777777777777777 * ((x405) * (x405)) /
           ((-0.18666666666666668 * x405 - 0.73540532268950665 * x88 + 1) *
            (-0.18666666666666668 * x405 - 0.73540532268950665 * x88 + 1)) +
         1.0;
  x411 = exp(M_LN10 * (0.43429448190325198 * x88 / x407)) *
         exp(-586.24741566249895 * invT - 2.09 * tc[0] - x404) / (x83 + 1.0);
  x418 = 1350000000000.0 * sc[1] * x411 * x7;
  x424 = 6000000.0 * sc[5] * x39;
  x425 = exp(-8554.6833186802305 * invT - tc[0]);
  x430 = 187000000000.0 * x425 * x6;
  x432 = 2244000000000.0 * sc[5] * x425;
  x436 = -3286.0048277048204 * invT - 4.82 * tc[0];
  x11 =
    235185185185185.0 * x7 * exp(1811.57999689699 * invT - 0.454 * tc[0] + x11);
  x442 = -0.29097730287517898 * x17 + 0.43429448190325198 * log(x11) - 0.4;
  x452 = 1.7777777777777777 * ((x442) * (x442)) /
           ((-0.73540532268950665 * x17 - 0.18666666666666668 * x442 + 1) *
            (-0.73540532268950665 * x17 - 0.18666666666666668 * x442 + 1)) +
         1.0;
  x453 = exp(M_LN10 * (0.43429448190325198 * x17 / x452)) / (x11 + 1.0);
  x455 = 1.27e+20 * refC * x453 * x7 * exp(x10 + x436);
  x460 = 39000000.0 * exp(-1781.38699694871 * invT - x109 - x69);
  x465 = sc[4] * x460;
  x466 = 13200000.0 * exp(
                        -g_RT[3] + g_RT[4] - g_RT_qss[0] + g_RT_qss[2] -
                        754.82499870708 * invT);
  x467 = sc[4] * x466;
  x469 = 100000000.0 * exp(-20128.666632188801 * invT - x104 - x69);
  x470 = sc[6] * x469;
  x478 = 7600000.0 * sc[3] * exp(-201.28666632188799 * invT);
  x492 = 18000000.0 * sc[3] * exp(-452.89499922424801 * invT);
  x499 = 25010000.0 * sc[5] * x47;
  x99 = 3430.0 * exp(224.93784961470999 * invT + 1.18 * tc[0] - x45 - x69);
  x132 = sc[5] * x99;
  x31 = 32000000.0 * sc[8] * exp(286.83349950869001 * invT);
  x69 = 0.00332 * exp(-2948.8496616156599 * invT + 2.81 * tc[0] - x67 - x69);
  x125 = sc[8] * x69;
  x29 = 16000000.0 * sc[8] * exp(286.83349950869001 * invT);
  x91 = 28000000.0 *
        exp(g_RT[0] - g_RT[1] + g_RT[3] - g_RT[6] - 537.43539907944103 * invT);
  x142 = 0.05 * exp(-3165.23282791169 * invT + 2.67 * tc[0]);
  x158 = 216.0 * sc[4] * exp(-1726.0331637101899 * invT + 1.51 * tc[0]);
  x178 = g_RT[0] - 2.0 * g_RT[1];
  x183 = refC * sc[0];
  x192 = 0.5 * exp(-3638.25649376812 * invT + 2.0 * tc[0]);
  x195 = sc[0] * x192;
  x199 = sc_qss[0] * x122;
  x59 = -x199 - x317;
  x52 = (-sc_qss[0] * x64 / x52 + x278) / x56;
  x56 = 660.0 * exp(
                  g_RT[0] - g_RT[1] + g_RT[7] - g_RT[8] -
                  5454.8686573231598 * invT + 1.62 * tc[0]);
  x64 = exp(-tc[0] + x178);
  x164 = x376 * (x167 * x317 - x211 * x279 - x339 / x164);
  x167 =
    117906976744186.0 * x7 * exp(-2390.2791625723985 * invT - 4.92 * tc[0]);
  x211 = log(
    0.068 * exp(-0.0050761421319797002 * tc[1]) +
    0.932 * exp(-0.00064935064935064902 * tc[1]) + exp(-10300.0 * invT));
  x278 = -0.29097730287517898 * x211 + 0.43429448190325198 * log(x167) - 0.4;
  x279 = 1.7777777777777777 * ((x278) * (x278)) /
           ((-0.73540532268950665 * x211 - 0.18666666666666668 * x278 + 1) *
            (-0.73540532268950665 * x211 - 0.18666666666666668 * x278 + 1)) +
         1.0;
  x339 = exp(M_LN10 * (0.43429448190325198 * x211 / x279)) /
         ((x167 + 1.0) * (x167 + 1.0));
  x376 =
    x298 * x7 *
    exp(
      -g_RT[0] + g_RT[11] - g_RT[9] - 44836.604923200604 * invT - 8.34 * tc[0]);
  x387 = 1.7777777777777777 * x126 * x278 /
         ((-0.73540532268950665 * x211 - 0.18666666666666668 * x278 + 1) *
          (-0.73540532268950665 * x211 - 0.18666666666666668 * x278 + 1));
  x278 = 2.3703703703703702 * x126 * ((x278) * (x278)) /
         ((-0.73540532269 * x211 - 0.18666666666666668 * x278 + 1) *
          (-0.73540532269 * x211 - 0.18666666666666668 * x278 + 1) *
          (-0.73540532269 * x211 - 0.18666666666666668 * x278 + 1));
  amrex::Real x821 = -42446.325760628104 * invT - 3.42 * tc[0];
  x167 = exp(M_LN10 * (0.43429448190325198 * x211 / x279)) / (x167 + 1.0);
  const amrex::Real x823 = x167 * exp(-g_RT[0] + g_RT[11] - g_RT[9] + x821);
  const amrex::Real x827 =
    5070000000000000.0 * x211 * x298 * x7 * x823 / ((x279) * (x279));
  const amrex::Real x830 =
    sc[0] * sc[9] * x7 * exp(-44836.604923200604 * invT - 8.34 * tc[0]);
  const amrex::Real x834 = sc[0] * sc[9] * x167 * exp(x821);
  x211 = 5070000000000000.0 * x211 * x7 * x834 / ((x279) * (x279));
  x279 = x211 * (0.56 * x278 + 4.0 * x387) + 1.014e+16 * x298 * x823 -
         1.19557674418605e+30 * x339 * x376 +
         1.19557674418605e+30 * x339 * x830 -
         x827 * (0.56 * x278 + 4.0 * x387) - 1.014e+16 * x834;
  x821 = 5070000000000000.0 * x167 * x7 * exp(x821);
  x167 = 73400000.0 * sc[1] * x140 - 15000000.0 * sc[2] * x16 +
         15000000.0 * sc[2] * x214 - 15000000.0 * sc[9] * x251 -
         73400000.0 * sc[9] * x284 - sc[9] * x821;
  const amrex::Real x853 = 28000000.0 * exp(-537.43539907944103 * invT);
  const amrex::Real x855 =
    0.05 *
    exp(-g_RT[0] + g_RT[1] - 3165.23282791169 * invT + 2.67 * tc[0] - x109);
  const amrex::Real x857 = 0.5 * exp(
                                   -g_RT[0] + g_RT[1] + g_RT[7] - g_RT_qss[0] -
                                   3638.25649376812 * invT + 2.0 * tc[0]);
  const amrex::Real x859 =
    216.0 *
    exp(-g_RT[0] + g_RT[1] - 1726.0331637101899 * invT + 1.51 * tc[0] - x45);
  const amrex::Real x862 = exp(-tc[0]);
  const amrex::Real x868 = exp(-2.0 * tc[0]);
  const amrex::Real x873 =
    660.0 * sc[8] * exp(-5454.8686573231598 * invT + 1.62 * tc[0]);
  const amrex::Real x880 =
    23000.0 * exp(-1648.03458051046 * invT + 1.05 * tc[0]);
  const amrex::Real x890 =
    x211 * (0.28 * x278 + 2.0 * x387) + 5070000000000000.0 * x298 * x823 -
    5.9778837209302301e+29 * x339 * x376 +
    5.9778837209302301e+29 * x339 * x830 - x827 * (0.28 * x278 + 2.0 * x387) -
    5070000000000000.0 * x834;
  const amrex::Real x891 =
    1000000.0 * ((sc[1]) * (sc[1])) * x862 - 1000000.0 * x183 * x64 + x890;
  const amrex::Real x897 =
    73400000.0 * sc[1] * x208 - 15000000.0 * sc[2] * x216 +
    15000000.0 * sc[2] * x24 - 73400000.0 * x199 - 73400000.0 * x317;
  const amrex::Real x898 = sc_qss[1] * x43;
  const amrex::Real x930 =
    216.0 * sc[0] * exp(-1726.0331637101899 * invT + 1.51 * tc[0]);
  const amrex::Real x959 =
    73400000.0 * sc[1] * x373 - 15000000.0 * sc[2] * x345 +
    15000000.0 * sc[2] * x346 + x211 * (1.68 * x278 + 12.0 * x387) +
    3.042e+16 * x298 * x823 - 3.5867302325581401e+30 * x339 * x376 +
    3.5867302325581401e+30 * x339 * x830 - x827 * (1.68 * x278 + 12.0 * x387) -
    3.042e+16 * x834;
  const amrex::Real x969 =
    70000000.0 * sc[0] * x348 - 15000000.0 * sc[2] * x348 + x891;
  const amrex::Real x988 =
    660.0 * sc[1] * exp(-5454.8686573231598 * invT + 1.62 * tc[0]);
  const amrex::Real x1019 =
    -15000000.0 * sc[0] * x251 - 73400000.0 * sc[0] * x284 - sc[0] * x821 +
    73400000.0 * sc[1] * x382 - 15000000.0 * sc[2] * x166 +
    15000000.0 * sc[2] * x96 + x211 * (0.42 * x278 + 3.0 * x387) +
    7605000000000000.0 * x298 * x823 - 8.9668255813953501e+29 * x339 * x376 +
    8.9668255813953501e+29 * x339 * x830 - x827 * (0.42 * x278 + 3.0 * x387) -
    7605000000000000.0 * x834;
  amrex::Real x1059 =
    128000.0 * x7 * exp(-618.95649893980499 * invT - 2.34 * tc[0]);
  amrex::Real x1060 =
    -0.29097730287517898 * x147 + 0.43429448190325198 * log(x1059) - 0.4;
  amrex::Real x1064 =
    1.7777777777777777 * ((x1060) * (x1060)) /
      ((-0.18666666666666668 * x1060 - 0.73540532268950665 * x147 + 1) *
       (-0.18666666666666668 * x1060 - 0.73540532268950665 * x147 + 1)) +
    1.0;
  amrex::Real x1067 =
    exp(M_LN10 * (0.43429448190325198 * x147 / x1064)) / (x1059 + 1.0);
  const amrex::Real x1069 =
    3200000000000000.0 * x1067 * exp(-618.95649893980499 * invT - 3.14 * tc[0]);
  const amrex::Real x1070 = sc[1] * x1069 * x7;
  const amrex::Real x1077 = -g_RT[1] - g_RT[3] + g_RT[6];
  const amrex::Real x1081 = refC * sc[6] * exp(-0.86 * tc[0] + x1077);
  const amrex::Real x1083 = sc[1] * sc[3];
  const amrex::Real x1084 = exp(-0.86 * tc[0]);
  const amrex::Real x1087 = 2800000.0 * x1081 - 2800000.0 * x1083 * x1084;
  const amrex::Real x1090 = exp(-g_RT[1] - 2.0 * tc[0] - x45);
  const amrex::Real x1091 = refC * sc[5] * x1090;
  const amrex::Real x1093 = sc[1] * sc[4] * x868;
  const amrex::Real x1095 = sc[2] * x142 - 28000000.0 * sc[3] * x16 +
                            28000000.0 * sc[3] * x214 + 16060000000.0 * x1091 -
                            16060000000.0 * x1093;
  amrex::Real x1099 =
    195039370078.74 * x7 * exp(-1035.1166815603121 * invT - 4.13 * tc[0]);
  amrex::Real x1100 = log(
    0.217 * exp(-0.0135135135135135 * tc[1]) +
    0.783 * exp(-0.00034002040122407302 * tc[1]) + exp(-6964.0 * invT));
  amrex::Real x1102 =
    -0.29097730287517898 * x1100 + 0.43429448190325198 * log(x1099) - 0.4;
  amrex::Real x1104 = -0.55155399201712996 * x1100 - 0.14 * x1102 + 0.75;
  const amrex::Real x1109 =
    exp(
      M_LN10 * (0.43429448190325198 * x1100 /
                (((x1102) * (x1102)) / ((x1104) * (x1104)) + 1.0))) /
    (x1099 + 1.0);
  const amrex::Real x1110 = -1227.8486645635121 * invT - 4.76 * tc[0];
  const amrex::Real x1114 = sc[1] * sc[7] * x1109 * exp(x1110);
  const amrex::Real x1117 =
    sc[1] * sc[7] * exp(-2262.965346123824 * invT - 8.89 * tc[0]);
  x1099 = exp(
            M_LN10 * (0.43429448190325198 * x1100 /
                      (((x1102) * (x1102)) / ((x1104) * (x1104)) + 1.0))) *
          x7 / ((x1099 + 1.0) * (x1099 + 1.0));
  const amrex::Real x1124 = x1102 * x126 / ((x1104) * (x1104));
  const amrex::Real x1126 =
    ((x1102) * (x1102)) * x126 / ((x1104) * (x1104) * (x1104));
  x1100 = x1100 * x7 /
          ((((x1102) * (x1102)) / ((x1104) * (x1104)) + 1.0) *
           (((x1102) * (x1102)) / ((x1104) * (x1104)) + 1.0));
  amrex::Real x1128 = x1100 * (4.0 * x1124 + 0.56 * x1126);
  const amrex::Real x1131 = exp(-g_RT[1] + x1110 - x67);
  const amrex::Real x1134 = refC * sc[8] * x1109 * x1131;
  const amrex::Real x1138 =
    refC * sc[8] *
    exp(-g_RT[1] - 2262.965346123824 * invT - 8.89 * tc[0] - x67);
  amrex::Real x1140 = 9.6622503937007901e+32 * x1099 * x1117 -
                      9.6622503937007901e+32 * x1099 * x1138 +
                      2.477e+21 * x1114 * x1128 - 4.954e+21 * x1114 -
                      2.477e+21 * x1128 * x1134 + 4.954e+21 * x1134;
  const amrex::Real x1141 = -70000000.0 * sc[0] * x16 +
                            70000000.0 * sc[0] * x214 + x1140 + x164 * x192 -
                            x195 * x343 + x195 * x377 + 70000000.0 * x52;
  amrex::Real x1148 = 2.3703703703703702 * x126 * ((x442) * (x442)) /
                      ((-0.73540532269 * x17 - 0.18666666666666668 * x442 + 1) *
                       (-0.73540532269 * x17 - 0.18666666666666668 * x442 + 1) *
                       (-0.73540532269 * x17 - 0.18666666666666668 * x442 + 1));
  x442 = 1.7777777777777777 * x126 * x442 /
         ((-0.73540532268950665 * x17 - 0.18666666666666668 * x442 + 1) *
          (-0.73540532268950665 * x17 - 0.18666666666666668 * x442 + 1));
  const amrex::Real x1151 = -x244 - x898;
  amrex::Real x1152 = x1151 * x453 * exp(x10 + x436);
  amrex::Real x1155 = 1.27e+20 * refC * x1152 * x17 * x7 / ((x452) * (x452));
  amrex::Real x1157 =
    x237 * x7 * exp(-4760.4296585126494 * invT - 10.094 * tc[0]);
  x11 = exp(M_LN10 * (0.43429448190325198 * x17 / x452)) /
        ((x11 + 1.0) * (x11 + 1.0));
  x436 = x453 * exp(x436);
  x17 = 1.27e+20 * x17 * x237 * x436 * x7 / ((x452) * (x452));
  x10 = x1151 * x198 * exp(-4760.4296585126494 * invT - 10.094 * tc[0] + x10);
  x452 = 2.54e+20 * refC * x1152 - 5.9737037037037004e+34 * x10 * x11 +
         5.9737037037037004e+34 * x11 * x1157 -
         x1155 * (0.56 * x1148 + 4.0 * x442) +
         x17 * (0.56 * x1148 + 4.0 * x442) - 2.54e+20 * x237 * x436;
  x453 = -30000000.0 * sc[4] * x16 + 30000000.0 * sc[4] * x214 -
         20000000.0 * sc[4] * x343 + 20000000.0 * sc[4] * x377 + x113 * x59 +
         x140 * x370 + x316 * x455 + x452;
  const amrex::Real x1166 = exp(M_LN10 * (0.43429448190325198 * x88 / x407)) /
                            ((x83 + 1.0) * (x83 + 1.0));
  const amrex::Real x1168 =
    x298 * x7 *
    exp(
      g_RT[11] - g_RT[1] - g_RT_qss[2] - 1303.33116443422 * invT -
      4.66 * tc[0] - 2 * x404);
  amrex::Real x1172 = 2.3703703703703702 * ((x405) * (x405)) /
                      ((-0.18666666666666668 * x405 - 0.73540532269 * x88 + 1) *
                       (-0.18666666666666668 * x405 - 0.73540532269 * x88 + 1) *
                       (-0.18666666666666668 * x405 - 0.73540532269 * x88 + 1));
  x405 = 1.7777777777777777 * x405 /
         ((-0.18666666666666668 * x405 - 0.73540532268950665 * x88 + 1) *
          (-0.18666666666666668 * x405 - 0.73540532268950665 * x88 + 1));
  amrex::Real x1174 = 0.56 * x1172 * x126 + 4.0 * x126 * x405;
  x83 = exp(M_LN10 * (0.43429448190325198 * x88 / x407)) *
        exp(
          g_RT[11] - g_RT[1] - g_RT_qss[2] - 586.24741566249895 * invT -
          2.09 * tc[0] - x404) /
        (x83 + 1.0);
  const amrex::Real x1179 =
    1350000000000.0 * x298 * x7 * x83 * x88 / ((x407) * (x407));
  const amrex::Real x1182 =
    1.7777777777777777 * x1060 * x126 /
    ((-0.18666666666666668 * x1060 - 0.73540532268950665 * x147 + 1) *
     (-0.18666666666666668 * x1060 - 0.73540532268950665 * x147 + 1));
  x1060 = 2.3703703703703702 * ((x1060) * (x1060)) * x126 /
          ((-0.18666666666666668 * x1060 - 0.73540532269 * x147 + 1) *
           (-0.18666666666666668 * x1060 - 0.73540532269 * x147 + 1) *
           (-0.18666666666666668 * x1060 - 0.73540532269 * x147 + 1));
  const amrex::Real x1189 =
    sc[1] * x1069 * x147 * x164 * x7 / ((x1064) * (x1064));
  x88 = 1350000000000.0 * sc[1] * x411 * x59 * x7 * x88 / ((x407) * (x407));
  x404 =
    sc[1] * x59 * x7 * exp(-1303.33116443422 * invT - 4.66 * tc[0] - 2 * x404);
  x407 = sc[1] * x1067 * x164 * exp(-618.95649893980499 * invT - 3.14 * tc[0]);
  const amrex::Real x1203 =
    refC * sc[7] * x1067 *
    exp(-618.95649893980499 * invT - 3.14 * tc[0] + x322);
  x1059 = exp(M_LN10 * (0.43429448190325198 * x147 / x1064)) /
          ((x1059 + 1.0) * (x1059 + 1.0));
  const amrex::Real x1207 =
    sc[7] * x198 * exp(-1237.91299787961 * invT - 5.48 * tc[0] + x322);
  x322 = 3200000000000000.0 * x1067 * x198 *
         exp(-618.95649893980499 * invT - 3.14 * tc[0] + x322);
  x1067 = sc[7] * x147 * x322 / ((x1064) * (x1064));
  const amrex::Real x1214 =
    sc[1] * x164 * x7 * exp(-1237.91299787961 * invT - 5.48 * tc[0]);
  const amrex::Real x1219 = refC * sc[4] * exp(-g_RT[1] - tc[0] - x109);
  const amrex::Real x1221 = sc[1] * sc[2] * x862;
  amrex::Real x1225 =
    exp(g_RT[1] + g_RT[9] - g_RT_qss[2] - 8554.6833186802305 * invT - tc[0]);
  const amrex::Real x1227 =
    -374000000000.0 * x1225 * x265 + 374000000000.0 * x425 * x59;
  const amrex::Real x1228 =
    -2700000000000.0 * sc[1] * x411 * x59 - 8.192e+20 * x1059 * x1207 +
    8.192e+20 * x1059 * x1214 - x1067 * (0.56 * x1060 + 4.0 * x1182) -
    3.3440366972477102e+18 * x1166 * x1168 +
    3.3440366972477102e+18 * x1166 * x404 - x1174 * x1179 + x1174 * x88 +
    x1189 * (0.56 * x1060 + 4.0 * x1182) + 6400000000000000.0 * x1203 +
    1000000.0 * x1219 - 1000000.0 * x1221 + x1227 +
    2700000000000.0 * x298 * x83 - 6400000000000000.0 * x407;
  const amrex::Real x1236 = 28000000.0 * sc[4] * x266;
  const amrex::Real x1253 = 47.6 * exp(
                                     g_RT[10] + g_RT[1] - g_RT[4] - g_RT[9] -
                                     35.225166606330397 * invT + 1.228 * tc[0]);
  const amrex::Real x1257 = 3970000.0 * exp(-337.65838275496702 * invT);
  const amrex::Real x1262 =
    -sc[6] * x1257 - sc[6] * x853 -
    134000000.0 * sc[6] * exp(-319.54258278599701 * invT);
  const amrex::Real x1263 = sc[0] + 1.5 * sc[10] + sc[11] + sc[1] + sc[2] +
                            sc[4] + sc[6] + sc[7] + sc[8] + 0.75 * sc[9];
  const amrex::Real x1267 = 83000000.0 * exp(-7252.86180424342 * invT);
  const amrex::Real x1270 = exp(-1.72 * tc[0]);
  const amrex::Real x1275 = 9380000.0 * exp(-0.76 * tc[0]);
  const amrex::Real x1278 = -375000000.0 * sc[12] * sc[3] * x1270 -
                            300000000.0 * ((sc[3]) * (sc[3])) * x1270 -
                            sc[3] * sc[5] * x1275 -
                            2800000.0 * sc[3] * x1084 * x1263 - sc[3] * x1267;
  const amrex::Real x1281 = -2244000000000.0 * refCinv * sc[5] * sc[9] * x1225 -
                            187000000000.0 * refCinv * sc[9] * x1225 * x6 +
                            x208 * x430 + x208 * x432;
  const amrex::Real x1285 =
    -70000000.0 * sc[0] * x216 + 70000000.0 * sc[0] * x24 -
    2.477e+21 * sc[7] * x1109 * x7 * exp(x1110) - 70000000.0 * sc[7] * x274 -
    sc[7] * x857 + x144 * x195 - x195 * x393;
  const amrex::Real x1286 = 16060000000.0 * sc[0] + 22000000000.0 * sc[10] +
                            22000000000.0 * sc[3] + 80300000000.0 * sc[5] +
                            22000000000.0 * sc[9] + 22000000000.0 * x2;
  const amrex::Real x1288 = -28000000.0 * sc[3] * x216 +
                            28000000.0 * sc[3] * x24 - sc[4] * x1286 * x868 -
                            sc[4] * x855;
  const amrex::Real x1292 =
    84300000.0 * exp(g_RT[11] + g_RT[1] - g_RT[2] - g_RT[7]);
  const amrex::Real x1299 =
    -sc[11] * x1292 - 30000000.0 * sc[11] * x260 - 20000000.0 * sc[11] * x319 -
    1.27e+20 * sc[11] * x436 * x7 - sc[11] * x880 + 20000000.0 * sc[4] * x144 -
    30000000.0 * sc[4] * x216 + 30000000.0 * sc[4] * x24 -
    20000000.0 * sc[4] * x393 + x208 * x370 + x238 * x455;
  const amrex::Real x1303 = 2.477e+21 * x1100 * x1134;
  x1100 = 2.477e+21 * x1100 * x1114;
  const amrex::Real x1308 = 4.83112519685039e+32 * x1099 * x1117 -
                            4.83112519685039e+32 * x1099 * x1138 +
                            x1100 * (2.0 * x1124 + 0.28 * x1126) -
                            2.477e+21 * x1114 + 2.477e+21 * x1134 -
                            x1303 * (2.0 * x1124 + 0.28 * x1126);
  const amrex::Real x1311 =
    1.27e+20 * refC * x1152 - 2.9868518518518502e+34 * x10 * x11 +
    2.9868518518518502e+34 * x11 * x1157 - x1155 * (0.28 * x1148 + 2.0 * x442) +
    x17 * (0.28 * x1148 + 2.0 * x442) - 1.27e+20 * x237 * x436;
  amrex::Real x1323 = 0.28 * x1172 * x126 + 2.0 * x126 * x405;
  const amrex::Real x1326 = 500000.0 * refC * exp(-g_RT[1] - tc[0] - x109);
  const amrex::Real x1330 =
    -187000000000.0 * x1225 * x265 + 187000000000.0 * x425 * x59;
  const amrex::Real x1333 = 22000000000.0 * x1091 - 22000000000.0 * x1093;
  const amrex::Real x1335 =
    -2000000.0 * ((sc[1]) * (sc[1])) * x862 - sc[1] * x1069 * x164 -
    1350000000000.0 * sc[1] * x411 * x59 + sc[4] * x1326 -
    4.096e+20 * x1059 * x1207 + 4.096e+20 * x1059 * x1214 -
    x1067 * (0.28 * x1060 + 2.0 * x1182) -
    1.67201834862385e+18 * x1166 * x1168 + 1.67201834862385e+18 * x1166 * x404 -
    x1179 * x1323 + x1189 * (0.28 * x1060 + 2.0 * x1182) +
    3200000000000000.0 * x1203 - 500000.0 * x1221 + x1323 * x88 + x1330 +
    x1333 + 2000000.0 * x183 * x64 + 1350000000000.0 * x298 * x83;
  const amrex::Real x1340 =
    3970000.0 *
    exp(-g_RT[1] + g_RT[2] + g_RT[5] - g_RT[6] - 337.65838275496702 * invT);
  const amrex::Real x1342 =
    83000000.0 *
    exp(-g_RT[1] + g_RT[2] - g_RT[3] + g_RT[4] - 7252.86180424342 * invT);
  const amrex::Real x1356 =
    30000000.0 * sc[2] * x277 - 30000000.0 * x199 - 30000000.0 * x317;
  const amrex::Real x1365 =
    -30000000.0 * sc[4] * x218 + 30000000.0 * sc[4] * x220 -
    20000000.0 * sc[4] * x412 + 20000000.0 * sc[4] * x420 + 84300000.0 * sc[7] +
    x277 * x370 + x388 * x455;
  const amrex::Real x1378 = exp(-1.72 * tc[0] + x1077);
  const amrex::Real x1384 =
    300000000.0 * refC * sc[6] * x1378 - 375000000.0 * sc[12] * sc[1] * x1270 -
    sc[1] * sc[5] * x1275 - 2800000.0 * sc[1] * x1084 * x1263 - sc[1] * x1267 -
    600000000.0 * x1083 * x1270;
  const amrex::Real x1391 =
    -30000000.0 * sc[4] * x293 + 30000000.0 * sc[4] * x300 -
    20000000.0 * sc[4] * x426 + 20000000.0 * sc[4] * x431 + x26 * x370 +
    x389 * x455;
  const amrex::Real x1393 =
    47.6 * sc[9] * exp(-35.225166606330397 * invT + 1.228 * tc[0]);
  const amrex::Real x1395 =
    sc[4] * exp(-g_RT[1] + 2.0 * g_RT[4] - g_RT[6] - 319.54258278599701 * invT);
  const amrex::Real x1420 =
    30000000.0 * sc[4] * x155 - 30000000.0 * sc[4] * x342 -
    20000000.0 * sc[4] * x437 + 20000000.0 * sc[4] * x76 + 20000000.0 * x164 +
    x366 * x370 + x391 * x455 + 30000000.0 * x52;
  const amrex::Real x1422 = -sc[1] * x1286 * x868 - sc[1] * x855 +
                            28000000.0 * sc[3] * x155 -
                            28000000.0 * sc[3] * x342;
  const amrex::Real x1428 = 1.68 * x1172 * x126 + 12.0 * x126 * x405;
  x147 = x147 * (1.68 * x1060 + 12.0 * x1182) / ((x1064) * (x1064));
  x1064 = 9380000.0 * exp(-0.76 * tc[0] + x1077);
  const amrex::Real x1457 = 30000000.0 * sc[2] * x373 -
                            2244000000000.0 * x1225 * x265 + x373 * x430 +
                            x373 * x432 + 2244000000000.0 * x425 * x59;
  x1102 = 1.68 * ((x1102) * (x1102)) * x126 / ((x1104) * (x1104) * (x1104)) +
          12.0 * x1124;
  x1104 = -70000000.0 * sc[0] * x345 + 70000000.0 * sc[0] * x346 +
          2.8986751181102398e+33 * x1099 * x1117 -
          2.8986751181102398e+33 * x1099 * x1138 + x1100 * x1102 -
          x1102 * x1303 - 1.4862e+22 * x1114 + 1.4862e+22 * x1134 +
          x195 * x449 - x195 * x462;
  const amrex::Real x1470 = refC * x1090 * x1286 - 28000000.0 * sc[3] * x345 +
                            28000000.0 * sc[3] * x346 + 80300000000.0 * x1091 -
                            80300000000.0 * x1093;
  const amrex::Real x1477 =
    7.62e+20 * refC * x1152 - 30000000.0 * sc[4] * x345 +
    30000000.0 * sc[4] * x346 + 20000000.0 * sc[4] * x449 -
    20000000.0 * sc[4] * x462 - 1.7921111111111101e+35 * x10 * x11 +
    1.7921111111111101e+35 * x11 * x1157 -
    x1155 * (1.68 * x1148 + 12.0 * x442) + x17 * (1.68 * x1148 + 12.0 * x442) -
    7.62e+20 * x237 * x436 + x370 * x373 + x455 * x85;
  const amrex::Real x1486 =
    -sc[1] * x1257 - sc[1] * x853 -
    134000000.0 * sc[1] * exp(-319.54258278599701 * invT);
  const amrex::Real x1493 =
    375000000.0 * refC * sc[12] * x1378 + 300000000.0 * refC * sc[3] * x1378 +
    refC * sc[5] * x1064 +
    2800000.0 * refC * x1263 * exp(-0.86 * tc[0] + x1077);
  const amrex::Real x1498 = -28000000.0 * sc[3] * x348;
  const amrex::Real x1503 =
    -20000000.0 * sc[4] * x472 + 30000000.0 * sc[4] * x480 +
    20000000.0 * sc[4] * x481 + x227 * x455 + x305 * x370;
  const amrex::Real x1508 = -70000000.0 * sc[0] * x348 -
                            30000000.0 * sc[4] * x348 + x1087 + x1308 + x1311 +
                            x1335 - x348 * x424;
  const amrex::Real x1524 =
    84300000.0 * sc[2] + 20000000.0 * sc[4] * x336 - 20000000.0 * sc[4] * x484 +
    30000000.0 * sc[4] * x489 + x370 * x374 + x403 * x455;
  const amrex::Real x1526 =
    70000000.0 * sc[0] * x489 - 2.477e+21 * sc[1] * x1109 * x7 * exp(x1110) -
    70000000.0 * sc[1] * x274 - sc[1] * x857 + x195 * x336 - x195 * x484;
  const amrex::Real x1542 =
    -70000000.0 * sc[0] * x349 + 70000000.0 * sc[0] * x353 +
    2.477e+21 * x1109 * x1131 * x198 + x1140 - x195 * x495 + x195 * x501;
  const amrex::Real x1548 =
    -30000000.0 * sc[4] * x349 + 30000000.0 * sc[4] * x353 -
    20000000.0 * sc[4] * x495 + 20000000.0 * sc[4] * x501 + x201 * x455 +
    x370 * x375 + x452;
  const amrex::Real x1550 =
    47.6 * sc[4] * exp(-35.225166606330397 * invT + 1.228 * tc[0]);
  x126 = 0.42 * x1172 * x126 + 3.0 * x126 * x405;
  x1172 = 3.7155e+21 * refC * sc[8] * x1109 * x1131 -
          70000000.0 * sc[0] * x166 + 70000000.0 * sc[0] * x96 -
          3.7155e+21 * sc[1] * sc[7] * x1109 * exp(x1110) +
          7.2466877952755894e+32 * x1099 * x1117 -
          7.2466877952755894e+32 * x1099 * x1138 +
          x1100 * (3.0 * x1124 + 0.42 * x1126) -
          x1303 * (3.0 * x1124 + 0.42 * x1126) + x133 * x195 - x136 * x195;
  x405 = 30000000.0 * sc[2] * x382 - 2244000000000.0 * sc[5] * x1225 * x264 -
         187000000000.0 * x1225 * x264 * x6 - 280500000000.0 * x1225 * x265 +
         x382 * x430 + x382 * x432 + 280500000000.0 * x425 * x59;
  x237 = 1.905e+20 * refC * x1152 + 20000000.0 * sc[4] * x133 -
         20000000.0 * sc[4] * x136 - 30000000.0 * sc[4] * x166 +
         30000000.0 * sc[4] * x96 - 4.4802777777777799e+34 * x10 * x11 +
         4.4802777777777799e+34 * x11 * x1157 -
         x1155 * (0.42 * x1148 + 3.0 * x442) +
         x17 * (0.42 * x1148 + 3.0 * x442) + x203 * x455 -
         1.905e+20 * x237 * x436 + x370 * x382;
  x1140 = -70000000.0 * sc[0] * x356 + 70000000.0 * sc[0] * x54 + x1140 +
          x150 * x195 - x172 * x195;
  x1148 = 20000000.0 * sc[4] * x150 - 20000000.0 * sc[4] * x172 -
          30000000.0 * sc[4] * x356 + 30000000.0 * sc[4] * x54 + x139 * x370 +
          x201 * x455 + x452;
  x442 = -sc[1] * x1292 - 30000000.0 * sc[1] * x260 -
         20000000.0 * sc[1] * x319 - 1.27e+20 * sc[1] * x436 * x7 -
         sc[1] * x880 - 20000000.0 * sc[4] * x176 + 30000000.0 * sc[4] * x182 +
         20000000.0 * sc[4] * x191 + x243 * x455 + x358 * x370;
  x1152 = -70000000.0 * sc[0] * x204 + 70000000.0 * sc[0] * x55 + x1308 -
          x170 * x195 + x187 * x195;
  x1155 = -20000000.0 * sc[4] * x170 + 20000000.0 * sc[4] * x187 -
          30000000.0 * sc[4] * x204 + 30000000.0 * sc[4] * x55 + x117 * x370 +
          x1311 + x34 * x455;
  x1157 = exp(-2.0 * g_RT[2] + g_RT[3] - tc[0]);
  x11 = refC * sc[3] * x1157;
  x436 = ((sc[2]) * (sc[2])) * x862;
  x17 = exp(-1509.64999741416 * invT);
  x10 = sc[2] * sc[9] * x17;
  x452 = exp(g_RT[10] - g_RT[2] - g_RT[9] - 1509.64999741416 * invT);
  x1225 = refC * sc[10] * x452;
  const amrex::Real x1686 = sc[4] * x1326 - 602.0 * x10 + 240000.0 * x11 -
                            500000.0 * x1221 + 602.0 * x1225 - 240000.0 * x436;
  const amrex::Real x1690 =
    2500000.0 *
    exp(g_RT[10] + g_RT[2] - g_RT[3] - g_RT[9] - 24053.756625465601 * invT);
  const amrex::Real x1694 =
    1020.0 * exp(-4327.6633259205901 * invT + 1.5 * tc[0]);
  const amrex::Real x1697 = 1204.0 * sc[0] + 2107.0 * sc[10] + 3612.0 * sc[3] +
                            3612.0 * sc[5] + 903.0 * sc[9] + 602.0 * x2;
  const amrex::Real x1706 =
    2.4 * sc[0] + 3.6 * sc[10] + sc[3] + 15.4 * sc[5] + 1.75 * sc[9] + x2;
  const amrex::Real x1709 = exp(
    g_RT[2] - 2.0 * g_RT[4] + g_RT[5] + 1061.78716484796 * invT + 2.4 * tc[0]);
  const amrex::Real x1713 = 39000000.0 * exp(-1781.38699694871 * invT);
  const amrex::Real x1717 = 2500000.0 * sc[9] * exp(-24053.756625465601 * invT);
  const amrex::Real x1719 = 20000000.0 * exp(g_RT[3] - g_RT[6] - x109);
  x109 =
    1020.0 *
    exp(g_RT[7] - g_RT[8] - 4327.6633259205901 * invT + 1.5 * tc[0] - x109);
  const amrex::Real x1737 = sc[4] * exp(1061.78716484796 * invT + 2.4 * tc[0]);
  const amrex::Real x1759 = 2500000.0 * sc[3] * exp(-24053.756625465601 * invT);
  const amrex::Real x1783 = 13200000.0 * sc[3] * exp(-754.82499870708 * invT);
  const amrex::Real x1799 = -120000.0 * x11 + 120000.0 * x436;
  x67 = 1000000.0 * exp(g_RT[3] - g_RT[6] - x67);
  const amrex::Real x1813 =
    29000000.0 * exp(g_RT[3] - g_RT[6] + 251.60833290235999 * invT - x45);
  const amrex::Real x1823 = 36000.0 * exp(-4498.7569922941902 * invT);
  const amrex::Real x1834 = 100000000.0 * exp(-20128.666632188801 * invT);
  const amrex::Real x1841 = 29000000.0 * sc[6] * exp(251.60833290235999 * invT);
  const amrex::Real x1846 =
    36000.0 *
    exp(g_RT[11] - g_RT[3] + g_RT[4] - g_RT[7] - 4498.7569922941902 * invT);
  const amrex::Real x1864 = 29000000.0 * sc[4] * exp(251.60833290235999 * invT);
  const amrex::Real x1865 =
    18000000.0 * exp(g_RT[11] - g_RT_qss[3] - 452.89499922424801 * invT - x104);
  x104 =
    7600000.0 * exp(g_RT[9] - g_RT_qss[2] - 201.28666632188799 * invT - x104);
  const amrex::Real x1947 =
    56.0 *
    exp(-g_RT[7] + g_RT_qss[0] - 2727.4343286615799 * invT + 1.6 * tc[0] - x45);
  const amrex::Real x1948 = sc[5] * x1947;
  const amrex::Real x1953 = 12000000.0 * sc[1] * x316 - x16 * x499 -
                            x1948 * x343 + x1948 * x377 + x214 * x499;
  const amrex::Real x1957 = -sc[4] * x1326 + 500000.0 * x1221 + x1333;
  const amrex::Real x1963 = 12000000.0 * sc[1] * x238 + x144 * x1948 -
                            x1948 * x393 - x216 * x499 + x24 * x499 -
                            12000000.0 * x244 - 12000000.0 * x898;
  const amrex::Real x1975 = 12000000.0 * sc[1] * x388 + sc[8] * x1694 -
                            x1948 * x412 + x1948 * x420 - x218 * x499 +
                            x220 * x499;
  const amrex::Real x1979 = 10000000.0 * sc[2] * x388 -
                            20000000.0 * sc[6] * x412 +
                            20000000.0 * sc[6] * x420 + x132 * x277 -
                            10000000.0 * x244 - 10000000.0 * x898;
  const amrex::Real x1986 = 12000000.0 * sc[1] * x389 - x1948 * x426 +
                            x1948 * x431 - x293 * x499 + x300 * x499;
  const amrex::Real x1990 =
    10000000.0 * sc[2] * x389 - 20000000.0 * sc[6] * x426 +
    20000000.0 * sc[6] * x431 + sc[7] * x1823 + x132 * x26;
  const amrex::Real x1994 =
    100.0 * sc[8] * exp(-1570.03599731073 * invT + 1.6 * tc[0]);
  const amrex::Real x2004 =
    150000000.0 *
    exp(g_RT[10] + g_RT[4] - g_RT[6] - g_RT[9] - 11875.913312991401 * invT);
  const amrex::Real x2010 =
    56.0 * exp(-2727.4343286615799 * invT + 1.6 * tc[0]);
  const amrex::Real x2015 = 12000000.0 * sc[1] * x391 - sc[7] * x109 -
                            sc[7] * x2010 - 12000000.0 * sc[7] * x234 -
                            25010000.0 * sc[7] + x155 * x499 - x1948 * x437 +
                            x1948 * x76 - x342 * x499;
  const amrex::Real x2016 =
    3430.0 * exp(224.93784961470999 * invT + 1.18 * tc[0]);
  const amrex::Real x2022 =
    -sc[11] * x1846 - sc[11] * x2016 - 10000000.0 * sc[11] * x223 -
    20000000.0 * sc[11] * x330 + 10000000.0 * sc[2] * x391 -
    20000000.0 * sc[6] * x437 + 20000000.0 * sc[6] * x76 + x132 * x366;
  x45 = 100.0 *
        exp(g_RT[7] - g_RT[8] - 1570.03599731073 * invT + 1.6 * tc[0] - x45);
  const amrex::Real x2037 = 12000000.0 * sc[1] * x85 + x164 * x1947 +
                            x1948 * x449 - x1948 * x462 - x345 * x499 +
                            x346 * x499 + 25010000.0 * x47 * x52;
  const amrex::Real x2042 = 10000000.0 * sc[2] * x85 +
                            20000000.0 * sc[6] * x449 -
                            20000000.0 * sc[6] * x462 + x132 * x373 + x59 * x99;
  const amrex::Real x2046 = 150000000.0 * exp(-11875.913312991401 * invT);
  const amrex::Real x2054 = 12000000.0 * sc[1] * x227 - x1948 * x472 +
                            x1948 * x481 - x348 * x499 + x480 * x499;
  const amrex::Real x2059 =
    10000000.0 * sc[2] * x227 - 20000000.0 * sc[6] * x472 +
    20000000.0 * sc[6] * x481 + x132 * x305 + 20000000.0 * x164;
  const amrex::Real x2067 = 10000000.0 * sc[2] * x403 + sc[3] * x1823 +
                            20000000.0 * sc[6] * x336 -
                            20000000.0 * sc[6] * x484 + x132 * x374;
  const amrex::Real x2073 = 12000000.0 * sc[1] * x403 - sc[4] * x109 -
                            sc[4] * x2010 - 12000000.0 * sc[4] * x234 -
                            25010000.0 * sc[4] + x1948 * x336 - x1948 * x484 +
                            x489 * x499;
  const amrex::Real x2074 =
    100.0 * sc[4] * exp(-1570.03599731073 * invT + 1.6 * tc[0]);
  const amrex::Real x2079 =
    12000000.0 * sc[1] * x201 + 10000000.0 * sc[2] * x201 -
    5000000.0 * sc[4] * x201 - 1000000.0 * x1219 + 1000000.0 * x1221;
  const amrex::Real x2088 =
    sc[2] * x1694 - x1948 * x495 + x1948 * x501 - x349 * x499 + x353 * x499;
  const amrex::Real x2098 = 12000000.0 * sc[1] * x203 + x133 * x1948 -
                            x136 * x1948 - x166 * x499 + x499 * x96;
  const amrex::Real x2128 =
    10000000.0 * sc[2] * x243 - sc[4] * x1846 - sc[4] * x2016 -
    10000000.0 * sc[4] * x223 - 20000000.0 * sc[4] * x330 -
    20000000.0 * sc[6] * x176 + 20000000.0 * sc[6] * x191 + x132 * x358;
  const amrex::Real x2139 = 12000000.0 * sc[1] * x34 - x170 * x1948 +
                            x187 * x1948 - x204 * x499 + x499 * x55;
  const amrex::Real x2140 = -22000000000.0 * x1091 + 22000000000.0 * x1093;
  const amrex::Real x2146 =
    -12000000.0 * sc[3] * x348 + x2140 + x348 * x424 + x348 * x499;
  const amrex::Real x2151 = -2800000.0 * x1081 + 2800000.0 * x1083 * x1084;
  const amrex::Real x2162 = -4161.6018262050302 * invT + 2.0 * tc[0];
  const amrex::Real x2165 = 4.92 * sc[8] * exp(x2162);
  const amrex::Real x2168 =
    8.192e+20 * x1059 * x1207 - 8.192e+20 * x1059 * x1214 +
    x1067 * (0.56 * x1060 + 4.0 * x1182) -
    x1189 * (0.56 * x1060 + 4.0 * x1182) - 6400000000000000.0 * x1203 +
    6400000000000000.0 * x407;
  const amrex::Real x2171 =
    sc[1] * x1069 * x164 + 4.096e+20 * x1059 * x1207 -
    4.096e+20 * x1059 * x1214 + x1067 * (0.28 * x1060 + 2.0 * x1182) -
    x1189 * (0.28 * x1060 + 2.0 * x1182) - 3200000000000000.0 * x1203;
  const amrex::Real x2183 =
    -70000000.0 * sc[0] * x348 + x1308 + x2171 - x31 * x348;
  const amrex::Real x2191 =
    0.00332 * exp(-2948.8496616156599 * invT + 2.81 * tc[0]);
  const amrex::Real x2214 = 2.46 * sc[8] * exp(x2162);
  x1128 = -9.6622503937007901e+32 * x1099 * x1117 +
          9.6622503937007901e+32 * x1099 * x1138 - 2.477e+21 * x1114 * x1128 +
          4.954e+21 * x1114 + 2.477e+21 * x1128 * x1134 - 4.954e+21 * x1134;
  const amrex::Real x2216 = -4.83112519685039e+32 * x1099 * x1117 +
                            4.83112519685039e+32 * x1099 * x1138 -
                            x1100 * (2.0 * x1124 + 0.28 * x1126) +
                            2.477e+21 * x1114 - 2.477e+21 * x1134 +
                            x1303 * (2.0 * x1124 + 0.28 * x1126);
  const amrex::Real x2227 = -602.0 * x10 + 602.0 * x1225 + x1330 + x890;
  const amrex::Real x2245 = -14000000.0 * sc[10] * x348;
  const amrex::Real x2246 =
    -15000000.0 * sc[2] * x348 - 40000000.0 * sc[3] * x348 + x2227;
  const amrex::Real x2269 = 602.0 * x10 - 602.0 * x1225;
  x1174 = 2700000000000.0 * sc[1] * x411 * x59 +
          3.3440366972477102e+18 * x1166 * x1168 -
          3.3440366972477102e+18 * x1166 * x404 + x1174 * x1179 - x1174 * x88 -
          x211 * (0.56 * x278 + 4.0 * x387) - 1.014e+16 * x298 * x823 -
          2700000000000.0 * x298 * x83 + 1.19557674418605e+30 * x339 * x376 -
          1.19557674418605e+30 * x339 * x830 +
          x827 * (0.56 * x278 + 4.0 * x387) + 1.014e+16 * x834;
  x1323 = 1350000000000.0 * sc[1] * x411 * x59 +
          1.67201834862385e+18 * x1166 * x1168 -
          1.67201834862385e+18 * x1166 * x404 + x1179 * x1323 - x1323 * x88 -
          x211 * (0.28 * x278 + 2.0 * x387) - 5070000000000000.0 * x298 * x823 -
          1350000000000.0 * x298 * x83 + 5.9778837209302301e+29 * x339 * x376 -
          5.9778837209302301e+29 * x339 * x830 +
          x827 * (0.28 * x278 + 2.0 * x387) + 5070000000000000.0 * x834;
  // Write the full Jacobian expression...
  J[0] = -550000000.0 * refC * sc[10] * exp(-2.0 * tc[0] + x178) -
         60000000.0 * refC * sc[5] * exp(-1.25 * tc[0] + x178) -
         1000000.0 * refC * x64 * (sc[3] + sc[9] + x2) +
         70000000.0 * sc[0] * x16 - 70000000.0 * sc[0] * x214 -
         20000000.0 * sc[11] * x229 +
         90000.0 * ((sc[1]) * (sc[1])) * exp(-0.6 * tc[0]) +
         20000000.0 * sc[1] * x316 - sc[2] * x142 - sc[3] * x91 - sc[7] * x56 -
         x113 * x59 - x140 * x370 - x158 - x164 * x192 + x167 -
         180000.0 * x183 * exp(-0.6 * tc[0] + x178) + x195 * x343 -
         x195 * x377 + x279 - 70000000.0 * x52 +
         (70000000.0 * sc[0] * x66 - 73400000.0 * sc[1] * x122 -
          15000000.0 * sc[2] * x66 + x122 * x370) *
           (-x343 + x377) +
         (-20000000.0 * sc[1] * x43) * (-x16 + x214 + (-x66) * (-x343 + x377));
  J[14] = 180000.0 * sc[0] * sc[1] * exp(-0.6 * tc[0]) +
          70000000.0 * sc[0] * x216 - 70000000.0 * sc[0] * x24 +
          1100000000.0 * sc[10] * sc[1] * x868 + sc[11] * x880 +
          120000000.0 * sc[1] * sc[5] * exp(-1.25 * tc[0]) +
          20000000.0 * sc[1] * x238 +
          2000000.0 * sc[1] * x862 * (sc[3] + sc[9] + x2) + sc[4] * x855 +
          sc[5] * x859 + sc[6] * x853 + 70000000.0 * sc[7] * x274 +
          sc[7] * x857 - x144 * x195 + x195 * x393 - x208 * x370 -
          20000000.0 * x244 + x873 + x891 + x897 - 20000000.0 * x898 +
          (70000000.0 * sc[0] * x66 - 73400000.0 * sc[1] * x122 -
           15000000.0 * sc[2] * x66 + x122 * x370) *
            (x144 - x393) +
          (-20000000.0 * sc[1] * x43) * (-x216 + x24 + (-x66) * (x144 - x393));
  J[28] =
    -sc[0] * x142 + 70000000.0 * sc[0] * x218 - 70000000.0 * sc[0] * x220 +
    73400000.0 * sc[1] * x277 + 20000000.0 * sc[1] * x388 -
    15000000.0 * sc[2] * x218 + 15000000.0 * sc[2] * x220 + x195 * x412 -
    x195 * x420 - x277 * x370 + 15000000.0 * x52 + x891 +
    (70000000.0 * sc[0] * x66 - 73400000.0 * sc[1] * x122 -
     15000000.0 * sc[2] * x66 + x122 * x370) *
      (-x412 + x420) +
    (-20000000.0 * sc[1] * x43) * (-x218 + x220 + (-x66) * (-x412 + x420));
  J[42] =
    70000000.0 * sc[0] * x293 - 70000000.0 * sc[0] * x300 - sc[0] * x91 +
    73400000.0 * sc[1] * x26 + 20000000.0 * sc[1] * x389 -
    15000000.0 * sc[2] * x293 + 15000000.0 * sc[2] * x300 + x195 * x426 -
    x195 * x431 - x26 * x370 + x891 +
    (70000000.0 * sc[0] * x66 - 73400000.0 * sc[1] * x122 -
     15000000.0 * sc[2] * x66 + x122 * x370) *
      (-x426 + x431) +
    (-20000000.0 * sc[1] * x43) * (-x293 + x300 + (-x66) * (-x426 + x431));
  J[56] = -70000000.0 * sc[0] * x155 + 70000000.0 * sc[0] * x342 +
          73400000.0 * sc[1] * x366 + 20000000.0 * sc[1] * x391 + sc[1] * x855 +
          15000000.0 * sc[2] * x155 - 15000000.0 * sc[2] * x342 + x195 * x437 -
          x195 * x76 - x366 * x370 + x891 - x930 +
          (70000000.0 * sc[0] * x66 - 73400000.0 * sc[1] * x122 -
           15000000.0 * sc[2] * x66 + x122 * x370) *
            (-x437 + x76) +
          (-20000000.0 * sc[1] * x43) * (x155 - x342 + (-x66) * (-x437 + x76));
  J[70] = 70000000.0 * sc[0] * x345 - 70000000.0 * sc[0] * x346 +
          60000000.0 * ((sc[1]) * (sc[1])) * exp(-1.25 * tc[0]) +
          20000000.0 * sc[1] * x85 + sc[1] * x859 -
          60000000.0 * x183 * exp(-1.25 * tc[0] + x178) - x195 * x449 +
          x195 * x462 - x370 * x373 + x959 +
          (70000000.0 * sc[0] * x66 - 73400000.0 * sc[1] * x122 -
           15000000.0 * sc[2] * x66 + x122 * x370) *
            (x449 - x462) +
          (-20000000.0 * sc[1] * x43) * (-x345 + x346 + (-x66) * (x449 - x462));
  J[84] =
    -70000000.0 * sc[0] * x480 + 20000000.0 * sc[1] * x227 +
    73400000.0 * sc[1] * x305 + sc[1] * x853 + 15000000.0 * sc[2] * x480 +
    x195 * x472 - x195 * x481 - x305 * x370 + x969 +
    (70000000.0 * sc[0] * x66 - 73400000.0 * sc[1] * x122 -
     15000000.0 * sc[2] * x66 + x122 * x370) *
      (-x472 + x481) +
    (-20000000.0 * sc[1] * x43) * (-x348 + x480 + (-x66) * (-x472 + x481));
  J[98] = -70000000.0 * sc[0] * x489 - sc[0] * x56 + 70000000.0 * sc[1] * x274 +
          73400000.0 * sc[1] * x374 + 20000000.0 * sc[1] * x403 + sc[1] * x857 +
          15000000.0 * sc[2] * x489 - x195 * x336 + x195 * x484 - x370 * x374 +
          x969 +
          (70000000.0 * sc[0] * x66 - 73400000.0 * sc[1] * x122 -
           15000000.0 * sc[2] * x66 + x122 * x370) *
            (x336 - x484) +
          (-20000000.0 * sc[1] * x43) * (-x348 + x489 + (-x66) * (x336 - x484));
  J[112] =
    70000000.0 * sc[0] * x349 - 70000000.0 * sc[0] * x353 +
    2000000.0 * ((sc[1]) * (sc[1])) * x862 + 20000000.0 * sc[1] * x201 +
    73400000.0 * sc[1] * x375 - 15000000.0 * sc[2] * x349 +
    15000000.0 * sc[2] * x353 - 2000000.0 * x183 * x64 + x195 * x495 -
    x195 * x501 + x279 - x370 * x375 + x988 +
    (70000000.0 * sc[0] * x66 - 73400000.0 * sc[1] * x122 -
     15000000.0 * sc[2] * x66 + x122 * x370) *
      (-x495 + x501) +
    (-20000000.0 * sc[1] * x43) * (-x349 + x353 + (-x66) * (-x495 + x501));
  J[126] = 70000000.0 * sc[0] * x166 - 70000000.0 * sc[0] * x96 +
           1000000.0 * ((sc[1]) * (sc[1])) * x862 + 20000000.0 * sc[1] * x203 +
           x1019 - x133 * x195 + x136 * x195 - 1000000.0 * x183 * x64 -
           x370 * x382 +
           (70000000.0 * sc[0] * x66 - 73400000.0 * sc[1] * x122 -
            15000000.0 * sc[2] * x66 + x122 * x370) *
             (x133 - x136) +
           (-20000000.0 * sc[1] * x43) * (-x166 + x96 + (-x66) * (x133 - x136));
  J[140] = 70000000.0 * sc[0] * x356 - 70000000.0 * sc[0] * x54 +
           550000000.0 * ((sc[1]) * (sc[1])) * x868 +
           73400000.0 * sc[1] * x139 + 20000000.0 * sc[1] * x201 -
           15000000.0 * sc[2] * x356 + 15000000.0 * sc[2] * x54 - x139 * x370 -
           x150 * x195 + x172 * x195 -
           550000000.0 * x183 * exp(-2.0 * tc[0] + x178) + x279 +
           (70000000.0 * sc[0] * x66 - 73400000.0 * sc[1] * x122 -
            15000000.0 * sc[2] * x66 + x122 * x370) *
             (x150 - x172) +
           (-20000000.0 * sc[1] * x43) * (-x356 + x54 + (-x66) * (x150 - x172));
  J[154] =
    -70000000.0 * sc[0] * x182 - 20000000.0 * sc[0] * x229 +
    20000000.0 * sc[1] * x243 + 73400000.0 * sc[1] * x358 + sc[1] * x880 +
    15000000.0 * sc[2] * x182 + x176 * x195 - x191 * x195 +
    5070000000000000.0 * x198 * x823 - x358 * x370 + x969 +
    (70000000.0 * sc[0] * x66 - 73400000.0 * sc[1] * x122 -
     15000000.0 * sc[2] * x66 + x122 * x370) *
      (-x176 + x191) +
    (-20000000.0 * sc[1] * x43) * (x182 - x348 + (-x66) * (-x176 + x191));
  J[168] =
    70000000.0 * sc[0] * x204 - 70000000.0 * sc[0] * x55 +
    73400000.0 * sc[1] * x117 + 20000000.0 * sc[1] * x34 -
    15000000.0 * sc[2] * x204 + 15000000.0 * sc[2] * x55 - x117 * x370 +
    x170 * x195 - x187 * x195 + x891 +
    (70000000.0 * sc[0] * x66 - 73400000.0 * sc[1] * x122 -
     15000000.0 * sc[2] * x66 + x122 * x370) *
      (-x170 + x187) +
    (-20000000.0 * sc[1] * x43) * (-x204 + x55 + (-x66) * (-x170 + x187));
  J[1] = 1100000000.0 * refC * sc[10] * exp(-2.0 * tc[0] + x178) +
         120000000.0 * refC * sc[5] * exp(-1.25 * tc[0] + x178) +
         2000000.0 * refC * x64 * (sc[3] + sc[9] + x2) +
         20000000.0 * sc[11] * x229 -
         180000.0 * ((sc[1]) * (sc[1])) * exp(-0.6 * tc[0]) -
         73400000.0 * sc[1] * x140 - 38000000.0 * sc[1] * x316 +
         30000000.0 * sc[2] * x140 - 80000000.0 * sc[2] * x343 +
         80000000.0 * sc[2] * x377 + sc[3] * x91 + sc[7] * x56 +
         73400000.0 * sc[9] * x284 + x1070 * x343 - x1070 * x377 + x1087 +
         x1095 + x1141 + x1228 - x140 * x20 - x140 * x418 + x140 * x430 +
         x140 * x432 + x158 - x16 * x424 +
         360000.0 * x183 * exp(-0.6 * tc[0] + x178) + x214 * x424 + x453 +
         (-70000000.0 * sc[0] * x66 + 73400000.0 * sc[1] * x122 -
          30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 -
          30000000.0 * sc[4] * x66 + x122 * x20 - x122 * x370 + x122 * x418 -
          x122 * x430 - x122 * x432 - x424 * x66) *
           (-x343 + x377) +
         (38000000.0 * sc[1] * x43 - x43 * x455) *
           (-x16 + x214 + (-x66) * (-x343 + x377));
  J[15] =
    -refCinv * sc[9] * x1236 - 360000.0 * sc[0] * sc[1] * exp(-0.6 * tc[0]) -
    2200000000.0 * sc[10] * sc[1] * x868 - sc[10] * x1253 -
    30000000.0 * sc[10] * x308 -
    240000000.0 * sc[1] * sc[5] * exp(-1.25 * tc[0]) -
    73400000.0 * sc[1] * x208 - 38000000.0 * sc[1] * x238 -
    4000000.0 * sc[1] * x862 * (sc[3] + sc[9] + x2) +
    80000000.0 * sc[2] * x144 + 30000000.0 * sc[2] * x208 -
    80000000.0 * sc[2] * x393 - 500000.0 * sc[2] * x7 * x862 - sc[5] * x859 -
    x1069 * x164 * x7 - x1070 * x144 + x1070 * x393 + x1087 + x1262 + x1278 +
    x1281 + x1285 + x1288 + x1299 + x1308 + x1311 + x1335 + 73400000.0 * x199 -
    x20 * x208 - x208 * x418 - x216 * x424 + x24 * x424 + 38000000.0 * x244 +
    73400000.0 * x317 - 1350000000000.0 * x411 * x59 * x7 -
    80000000.0 * x59 * x80 - x873 + 38000000.0 * x898 +
    (-70000000.0 * sc[0] * x66 + 73400000.0 * sc[1] * x122 -
     30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 -
     30000000.0 * sc[4] * x66 + x122 * x20 - x122 * x370 + x122 * x418 -
     x122 * x430 - x122 * x432 - x424 * x66) *
      (x144 - x393) +
    (38000000.0 * sc[1] * x43 - x43 * x455) *
      (-x216 + x24 + (-x66) * (x144 - x393));
  J[29] = sc[0] * x142 - 70000000.0 * sc[0] * x218 + 70000000.0 * sc[0] * x220 -
          73400000.0 * sc[1] * x277 - 38000000.0 * sc[1] * x388 -
          500000.0 * sc[1] * x7 * x862 - 80000000.0 * sc[2] * x412 +
          80000000.0 * sc[2] * x420 - 28000000.0 * sc[3] * x218 +
          28000000.0 * sc[3] * x220 + sc[4] * x1342 + sc[5] * x1340 +
          2244000000000.0 * sc[5] * x277 * x425 + x1070 * x412 - x1070 * x420 +
          x1087 + x1308 + x1311 + x1335 + x1356 + x1365 + 80000000.0 * x164 -
          x195 * x412 + x195 * x420 - x20 * x277 - x218 * x424 + x220 * x424 -
          x277 * x418 + 187000000000.0 * x277 * x425 * x6 +
          (-70000000.0 * sc[0] * x66 + 73400000.0 * sc[1] * x122 -
           30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 -
           30000000.0 * sc[4] * x66 + x122 * x20 - x122 * x370 + x122 * x418 -
           x122 * x430 - x122 * x432 - x424 * x66) *
            (-x412 + x420) +
          (38000000.0 * sc[1] * x43 - x43 * x455) *
            (-x218 + x220 + (-x66) * (-x412 + x420));
  J[43] = -70000000.0 * sc[0] * x293 + 70000000.0 * sc[0] * x300 + sc[0] * x91 -
          73400000.0 * sc[1] * x26 - 38000000.0 * sc[1] * x389 +
          30000000.0 * sc[2] * x26 - 80000000.0 * sc[2] * x426 +
          80000000.0 * sc[2] * x431 - 28000000.0 * sc[3] * x293 +
          28000000.0 * sc[3] * x300 + x1070 * x426 - x1070 * x431 + x1308 +
          x1311 + x1335 + x1384 + x1391 - x195 * x426 + x195 * x431 -
          x20 * x26 - x26 * x418 + x26 * x430 + x26 * x432 - x293 * x424 +
          x300 * x424 + 28000000.0 * x52 +
          (-70000000.0 * sc[0] * x66 + 73400000.0 * sc[1] * x122 -
           30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 -
           30000000.0 * sc[4] * x66 + x122 * x20 - x122 * x370 + x122 * x418 -
           x122 * x430 - x122 * x432 - x424 * x66) *
            (-x426 + x431) +
          (38000000.0 * sc[1] * x43 - x43 * x455) *
            (-x293 + x300 + (-x66) * (-x426 + x431));
  J[57] = 70000000.0 * sc[0] * x155 - 70000000.0 * sc[0] * x342 -
          73400000.0 * sc[1] * x366 - 38000000.0 * sc[1] * x391 +
          sc[2] * x1342 + 30000000.0 * sc[2] * x366 -
          80000000.0 * sc[2] * x437 + 80000000.0 * sc[2] * x76 +
          12000000.0 * sc[7] * x234 + x1070 * x437 - x1070 * x76 + x1087 +
          x1308 + x1311 + x1326 * x7 + x1335 + x1393 + 268000000.0 * x1395 +
          x1420 + x1422 + x155 * x424 - x195 * x437 + x195 * x76 - x20 * x366 -
          28000000.0 * x265 * x266 - x342 * x424 - x366 * x418 + x366 * x430 +
          x366 * x432 + x930 +
          (-70000000.0 * sc[0] * x66 + 73400000.0 * sc[1] * x122 -
           30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 -
           30000000.0 * sc[4] * x66 + x122 * x20 - x122 * x370 + x122 * x418 -
           x122 * x430 - x122 * x432 - x424 * x66) *
            (-x437 + x76) +
          (38000000.0 * sc[1] * x43 - x43 * x455) *
            (x155 - x342 + (-x66) * (-x437 + x76));
  J[71] = refC * sc[6] * x1064 -
          120000000.0 * ((sc[1]) * (sc[1])) * exp(-1.25 * tc[0]) +
          sc[1] * x1069 * x147 * x164 * x7 - 73400000.0 * sc[1] * x373 -
          8100000000000.0 * sc[1] * x411 * x59 - 38000000.0 * sc[1] * x85 -
          sc[1] * x859 + sc[2] * x1340 + 80000000.0 * sc[2] * x449 -
          80000000.0 * sc[2] * x462 - sc[7] * x147 * x322 -
          2.4576e+21 * x1059 * x1207 + 2.4576e+21 * x1059 * x1214 -
          x1070 * x449 + x1070 * x462 - x1083 * x1275 + x1104 -
          1.0032110091743101e+19 * x1166 * x1168 +
          1.0032110091743101e+19 * x1166 * x404 - x1179 * x1428 +
          1.92e+16 * x1203 + 3000000.0 * x1219 - 3000000.0 * x1221 +
          x1428 * x88 + x1457 + x1470 + x1477 +
          120000000.0 * x183 * exp(-1.25 * tc[0] + x178) - x20 * x373 +
          8100000000000.0 * x298 * x83 - x345 * x424 + x346 * x424 -
          x373 * x418 + 6000000.0 * x39 * x52 - 1.92e+16 * x407 +
          (-70000000.0 * sc[0] * x66 + 73400000.0 * sc[1] * x122 -
           30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 -
           30000000.0 * sc[4] * x66 + x122 * x20 - x122 * x370 + x122 * x418 -
           x122 * x430 - x122 * x432 - x424 * x66) *
            (x449 - x462) +
          (38000000.0 * sc[1] * x43 - x43 * x455) *
            (-x345 + x346 + (-x66) * (x449 - x462));
  J[85] = 70000000.0 * sc[0] * x480 - 38000000.0 * sc[1] * x227 -
          73400000.0 * sc[1] * x305 + 30000000.0 * sc[2] * x305 -
          80000000.0 * sc[2] * x472 + 80000000.0 * sc[2] * x481 +
          28000000.0 * sc[3] * x480 + 2244000000000.0 * sc[5] * x305 * x425 +
          x1070 * x472 - x1070 * x481 + x1486 + x1493 + x1498 + x1503 + x1508 -
          x195 * x472 + x195 * x481 - x20 * x305 - x305 * x418 +
          187000000000.0 * x305 * x425 * x6 + x424 * x480 +
          (-70000000.0 * sc[0] * x66 + 73400000.0 * sc[1] * x122 -
           30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 -
           30000000.0 * sc[4] * x66 + x122 * x20 - x122 * x370 + x122 * x418 -
           x122 * x430 - x122 * x432 - x424 * x66) *
            (-x472 + x481) +
          (38000000.0 * sc[1] * x43 - x43 * x455) *
            (-x348 + x480 + (-x66) * (-x472 + x481));
  J[99] = sc[0] * x56 - 73400000.0 * sc[1] * x374 - 38000000.0 * sc[1] * x403 +
          80000000.0 * sc[2] * x336 + 30000000.0 * sc[2] * x374 -
          80000000.0 * sc[2] * x484 + 28000000.0 * sc[3] * x489 +
          12000000.0 * sc[4] * x234 - x1070 * x336 + x1070 * x484 + x1498 +
          x1508 + x1524 + x1526 - x20 * x374 + x322 - x374 * x418 +
          x374 * x430 + x374 * x432 + x424 * x489 +
          (-70000000.0 * sc[0] * x66 + 73400000.0 * sc[1] * x122 -
           30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 -
           30000000.0 * sc[4] * x66 + x122 * x20 - x122 * x370 + x122 * x418 -
           x122 * x430 - x122 * x432 - x424 * x66) *
            (x336 - x484) +
          (38000000.0 * sc[1] * x43 - x43 * x455) *
            (-x348 + x489 + (-x66) * (x336 - x484));
  J[113] = -4000000.0 * ((sc[1]) * (sc[1])) * x862 - 38000000.0 * sc[1] * x201 -
           73400000.0 * sc[1] * x375 + 30000000.0 * sc[2] * x375 -
           80000000.0 * sc[2] * x495 + 80000000.0 * sc[2] * x501 -
           28000000.0 * sc[3] * x349 + 28000000.0 * sc[3] * x353 +
           x1070 * x495 - x1070 * x501 + x1087 + 44000000000.0 * x1091 -
           44000000000.0 * x1093 + x1228 + x1542 + x1548 +
           4000000.0 * x183 * x64 - x20 * x375 - x349 * x424 + x353 * x424 -
           x375 * x418 + x375 * x430 + x375 * x432 - x988 +
           (-70000000.0 * sc[0] * x66 + 73400000.0 * sc[1] * x122 -
            30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 -
            30000000.0 * sc[4] * x66 + x122 * x20 - x122 * x370 + x122 * x418 -
            x122 * x430 - x122 * x432 - x424 * x66) *
             (-x495 + x501) +
           (38000000.0 * sc[1] * x43 - x43 * x455) *
             (-x349 + x353 + (-x66) * (-x495 + x501));
  J[127] = 73400000.0 * sc[0] * x284 - 2000000.0 * ((sc[1]) * (sc[1])) * x862 -
           38000000.0 * sc[1] * x203 - 73400000.0 * sc[1] * x382 -
           2025000000000.0 * sc[1] * x411 * x59 + 80000000.0 * sc[2] * x133 -
           80000000.0 * sc[2] * x136 - 28000000.0 * sc[3] * x166 +
           28000000.0 * sc[3] * x96 - 6.144e+20 * x1059 * x1207 +
           6.144e+20 * x1059 * x1214 - x1067 * (0.42 * x1060 + 3.0 * x1182) -
           x1070 * x133 + x1070 * x136 + 2100000.0 * x1081 -
           2100000.0 * x1083 * x1084 - 2.5080275229357798e+18 * x1166 * x1168 +
           2.5080275229357798e+18 * x1166 * x404 + x1172 - x1179 * x126 +
           x1189 * (0.42 * x1060 + 3.0 * x1182) + 4800000000000000.0 * x1203 +
           750000.0 * x1219 - 750000.0 * x1221 - x1236 * x264 + x126 * x88 +
           x1333 + x1550 - x166 * x424 + 2000000.0 * x183 * x64 - x20 * x382 +
           x237 + 2025000000000.0 * x298 * x83 - x382 * x418 + x405 -
           4800000000000000.0 * x407 + x424 * x96 +
           (-70000000.0 * sc[0] * x66 + 73400000.0 * sc[1] * x122 -
            30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 -
            30000000.0 * sc[4] * x66 + x122 * x20 - x122 * x370 + x122 * x418 -
            x122 * x430 - x122 * x432 - x424 * x66) *
             (x133 - x136) +
           (38000000.0 * sc[1] * x43 - x43 * x455) *
             (-x166 + x96 + (-x66) * (x133 - x136));
  J[141] = -1100000000.0 * ((sc[1]) * (sc[1])) * x868 - sc[1] * x1253 -
           73400000.0 * sc[1] * x139 - 38000000.0 * sc[1] * x201 -
           30000000.0 * sc[1] * x308 + 30000000.0 * sc[2] * x139 +
           80000000.0 * sc[2] * x150 - 80000000.0 * sc[2] * x172 -
           28000000.0 * sc[3] * x356 + 28000000.0 * sc[3] * x54 - x1070 * x150 +
           x1070 * x172 + 4200000.0 * x1081 - 4200000.0 * x1083 * x1084 +
           x1140 + x1148 + x1228 + x1333 - x139 * x20 - x139 * x418 +
           x139 * x430 + x139 * x432 +
           1100000000.0 * x183 * exp(-2.0 * tc[0] + x178) - x356 * x424 +
           x424 * x54 +
           (-70000000.0 * sc[0] * x66 + 73400000.0 * sc[1] * x122 -
            30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 -
            30000000.0 * sc[4] * x66 + x122 * x20 - x122 * x370 + x122 * x418 -
            x122 * x430 - x122 * x432 - x424 * x66) *
             (x150 - x172) +
           (38000000.0 * sc[1] * x43 - x43 * x455) *
             (-x356 + x54 + (-x66) * (x150 - x172));
  J[155] = 70000000.0 * sc[0] * x182 + 20000000.0 * sc[0] * x229 -
           38000000.0 * sc[1] * x243 - 73400000.0 * sc[1] * x358 -
           80000000.0 * sc[2] * x176 + 80000000.0 * sc[2] * x191 +
           30000000.0 * sc[2] * x358 + 28000000.0 * sc[3] * x182 +
           x1070 * x176 - x1070 * x191 + x1498 + x1508 - x176 * x195 +
           x182 * x424 + x191 * x195 + 1350000000000.0 * x198 * x83 -
           x20 * x358 - x358 * x418 + x358 * x430 + x358 * x432 + x442 +
           (-70000000.0 * sc[0] * x66 + 73400000.0 * sc[1] * x122 -
            30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 -
            30000000.0 * sc[4] * x66 + x122 * x20 - x122 * x370 + x122 * x418 -
            x122 * x430 - x122 * x432 - x424 * x66) *
             (-x176 + x191) +
           (38000000.0 * sc[1] * x43 - x43 * x455) *
             (x182 - x348 + (-x66) * (-x176 + x191));
  J[169] = 375000000.0 * refC * sc[6] * x1378 - 73400000.0 * sc[1] * x117 -
           38000000.0 * sc[1] * x34 + 30000000.0 * sc[2] * x117 -
           80000000.0 * sc[2] * x170 + 80000000.0 * sc[2] * x187 -
           28000000.0 * sc[3] * x204 + 28000000.0 * sc[3] * x55 + x1070 * x170 -
           x1070 * x187 - 375000000.0 * x1083 * x1270 + x1152 + x1155 -
           x117 * x20 - x117 * x418 + x117 * x430 + x117 * x432 + x1335 -
           x204 * x424 + x424 * x55 +
           (-70000000.0 * sc[0] * x66 + 73400000.0 * sc[1] * x122 -
            30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 -
            30000000.0 * sc[4] * x66 + x122 * x20 - x122 * x370 + x122 * x418 -
            x122 * x430 - x122 * x432 - x424 * x66) *
             (-x170 + x187) +
           (38000000.0 * sc[1] * x43 - x43 * x455) *
             (-x204 + x55 + (-x66) * (-x170 + x187));
  J[2] = -60000000.0 * sc[2] * x140 - sc[2] * x142 + 15000000.0 * sc[2] * x16 -
         15000000.0 * sc[2] * x214 - 10000000.0 * sc[2] * x316 +
         80000000.0 * sc[2] * x343 - 80000000.0 * sc[2] * x377 +
         15000000.0 * sc[9] * x251 - 1204.0 * x10 + 576000.0 * x11 +
         1000000.0 * x1219 - 1000000.0 * x1221 + 1204.0 * x1225 + x140 * x20 +
         x140 * x465 - 576000.0 * x436 +
         (60000000.0 * sc[2] * x122 + 15000000.0 * sc[2] * x66 - x122 * x20 -
          x122 * x465) *
           (-x343 + x377) +
         (10000000.0 * sc[2] * x43) * (-x16 + x214 + (-x66) * (-x343 + x377));
  J[16] = 30000000.0 * sc[10] * x308 + sc[11] * x1292 -
          80000000.0 * sc[2] * x144 - 60000000.0 * sc[2] * x208 +
          15000000.0 * sc[2] * x216 - 10000000.0 * sc[2] * x238 -
          15000000.0 * sc[2] * x24 + 80000000.0 * sc[2] * x393 -
          500000.0 * sc[2] * x7 * x862 + sc[3] * x1267 + sc[4] * x855 +
          sc[6] * x1257 + x1686 + x20 * x208 + x208 * x465 +
          80000000.0 * x59 * x80 +
          (60000000.0 * sc[2] * x122 + 15000000.0 * sc[2] * x66 - x122 * x20 -
           x122 * x465) *
            (x144 - x393) +
          (10000000.0 * sc[2] * x43) * (-x216 + x24 + (-x66) * (x144 - x393));
  J[30] = -sc[0] * x142 - sc[10] * x1690 - sc[11] * x1713 -
          500000.0 * sc[1] * x7 * x862 - 480000.0 * sc[2] * x1706 * x862 +
          15000000.0 * sc[2] * x218 - 15000000.0 * sc[2] * x220 -
          60000000.0 * sc[2] * x277 - 10000000.0 * sc[2] * x388 +
          80000000.0 * sc[2] * x412 - 80000000.0 * sc[2] * x420 -
          sc[4] * x1342 - sc[5] * x1340 - 0.0357 * sc[5] * x1709 -
          20000000.0 * sc[6] - 84300000.0 * sc[7] - sc[8] * x1694 -
          sc[9] * x1697 * x17 - 80000000.0 * x164 + x1686 + 60000000.0 * x199 +
          x20 * x277 + 10000000.0 * x244 + x277 * x465 + 60000000.0 * x317 -
          15000000.0 * x52 + 10000000.0 * x898 +
          (60000000.0 * sc[2] * x122 + 15000000.0 * sc[2] * x66 - x122 * x20 -
           x122 * x465) *
            (-x412 + x420) +
          (10000000.0 * sc[2] * x43) * (-x218 + x220 + (-x66) * (-x412 + x420));
  J[44] = 240000.0 * refC * x1157 * x1706 + sc[1] * x1267 -
          60000000.0 * sc[2] * x26 + 15000000.0 * sc[2] * x293 -
          15000000.0 * sc[2] * x300 - 10000000.0 * sc[2] * x389 +
          80000000.0 * sc[2] * x426 - 80000000.0 * sc[2] * x431 +
          sc[4] * x1326 + sc[4] * x1719 - 3612.0 * x10 + 240000.0 * x11 -
          500000.0 * x1221 + 3612.0 * x1225 + x1717 + x20 * x26 + x26 * x465 -
          240000.0 * x436 +
          (60000000.0 * sc[2] * x122 + 15000000.0 * sc[2] * x66 - x122 * x20 -
           x122 * x465) *
            (-x426 + x431) +
          (10000000.0 * sc[2] * x43) * (-x293 + x300 + (-x66) * (-x426 + x431));
  J[58] = 10000000.0 * sc[11] * x223 + sc[1] * x855 - sc[2] * x1342 -
          15000000.0 * sc[2] * x155 + 15000000.0 * sc[2] * x342 -
          60000000.0 * sc[2] * x366 - 10000000.0 * sc[2] * x391 +
          80000000.0 * sc[2] * x437 - 80000000.0 * sc[2] * x76 + sc[3] * x1719 +
          sc[7] * x109 + 30000000.0 * sc[9] * x288 + x1326 * x7 + x1686 +
          0.0714 * x1737 + x20 * x366 + x366 * x465 + x460 * x59 +
          (60000000.0 * sc[2] * x122 + 15000000.0 * sc[2] * x66 - x122 * x20 -
           x122 * x465) *
            (-x437 + x76) +
          (10000000.0 * sc[2] * x43) * (x155 - x342 + (-x66) * (-x437 + x76));
  J[72] = -sc[2] * x1340 - 0.0357 * sc[2] * x1709 + 15000000.0 * sc[2] * x345 -
          15000000.0 * sc[2] * x346 - 60000000.0 * sc[2] * x373 -
          80000000.0 * sc[2] * x449 + 80000000.0 * sc[2] * x462 -
          10000000.0 * sc[2] * x85 - 3612.0 * x10 + 3696000.0 * x11 +
          3000000.0 * x1219 - 3000000.0 * x1221 + 3612.0 * x1225 + x20 * x373 +
          x373 * x465 - 3696000.0 * x436 +
          (60000000.0 * sc[2] * x122 + 15000000.0 * sc[2] * x66 - x122 * x20 -
           x122 * x465) *
            (x449 - x462) +
          (10000000.0 * sc[2] * x43) * (-x345 + x346 + (-x66) * (x449 - x462));
  J[86] = sc[1] * x1257 - 10000000.0 * sc[2] * x227 -
          60000000.0 * sc[2] * x305 + 15000000.0 * sc[2] * x348 +
          80000000.0 * sc[2] * x472 - 15000000.0 * sc[2] * x480 -
          80000000.0 * sc[2] * x481 - 20000000.0 * sc[2] + x1686 + x20 * x305 +
          x305 * x465 +
          (60000000.0 * sc[2] * x122 + 15000000.0 * sc[2] * x66 - x122 * x20 -
           x122 * x465) *
            (-x472 + x481) +
          (10000000.0 * sc[2] * x43) * (-x348 + x480 + (-x66) * (-x472 + x481));
  J[100] = -80000000.0 * sc[2] * x336 + 15000000.0 * sc[2] * x348 -
           60000000.0 * sc[2] * x374 - 10000000.0 * sc[2] * x403 +
           80000000.0 * sc[2] * x484 - 15000000.0 * sc[2] * x489 -
           84300000.0 * sc[2] + sc[4] * x109 + x1686 + x20 * x374 +
           x374 * x465 +
           (60000000.0 * sc[2] * x122 + 15000000.0 * sc[2] * x66 - x122 * x20 -
            x122 * x465) *
             (x336 - x484) +
           (10000000.0 * sc[2] * x43) * (-x348 + x489 + (-x66) * (x336 - x484));
  J[114] =
    -sc[2] * x1694 - 10000000.0 * sc[2] * x201 + 15000000.0 * sc[2] * x349 -
    15000000.0 * sc[2] * x353 - 60000000.0 * sc[2] * x375 +
    80000000.0 * sc[2] * x495 - 80000000.0 * sc[2] * x501 - 1204.0 * x10 +
    480000.0 * x11 + 1000000.0 * x1219 - 1000000.0 * x1221 + 1204.0 * x1225 +
    x20 * x375 + x375 * x465 - 480000.0 * x436 +
    (60000000.0 * sc[2] * x122 + 15000000.0 * sc[2] * x66 - x122 * x20 -
     x122 * x465) *
      (-x495 + x501) +
    (10000000.0 * sc[2] * x43) * (-x349 + x353 + (-x66) * (-x495 + x501));
  J[128] = 15000000.0 * sc[0] * x251 - 80000000.0 * sc[2] * x133 +
           80000000.0 * sc[2] * x136 + 15000000.0 * sc[2] * x166 -
           sc[2] * x1697 * x17 - 10000000.0 * sc[2] * x203 -
           60000000.0 * sc[2] * x382 - 15000000.0 * sc[2] * x96 +
           30000000.0 * sc[4] * x288 - 903.0 * x10 + 420000.0 * x11 +
           750000.0 * x1219 - 750000.0 * x1221 + 903.0 * x1225 + x1759 +
           x20 * x382 + x382 * x465 - 420000.0 * x436 +
           (60000000.0 * sc[2] * x122 + 15000000.0 * sc[2] * x66 - x122 * x20 -
            x122 * x465) *
             (x133 - x136) +
           (10000000.0 * sc[2] * x43) * (-x166 + x96 + (-x66) * (x133 - x136));
  J[142] = refC * x1697 * x452 + 30000000.0 * sc[1] * x308 -
           60000000.0 * sc[2] * x139 - 80000000.0 * sc[2] * x150 -
           sc[2] * x1690 + 80000000.0 * sc[2] * x172 -
           10000000.0 * sc[2] * x201 + 15000000.0 * sc[2] * x356 -
           15000000.0 * sc[2] * x54 - 2107.0 * x10 + 864000.0 * x11 +
           1000000.0 * x1219 - 1000000.0 * x1221 + 2107.0 * x1225 + x139 * x20 +
           x139 * x465 - 864000.0 * x436 +
           (60000000.0 * sc[2] * x122 + 15000000.0 * sc[2] * x66 - x122 * x20 -
            x122 * x465) *
             (x150 - x172) +
           (10000000.0 * sc[2] * x43) * (-x356 + x54 + (-x66) * (x150 - x172));
  J[156] = sc[1] * x1292 - sc[2] * x1713 + 80000000.0 * sc[2] * x176 -
           15000000.0 * sc[2] * x182 - 80000000.0 * sc[2] * x191 -
           10000000.0 * sc[2] * x243 + 15000000.0 * sc[2] * x348 -
           60000000.0 * sc[2] * x358 + 10000000.0 * sc[4] * x223 + x1686 +
           x20 * x358 + x358 * x465 +
           (60000000.0 * sc[2] * x122 + 15000000.0 * sc[2] * x66 - x122 * x20 -
            x122 * x465) *
             (-x176 + x191) +
           (10000000.0 * sc[2] * x43) * (x182 - x348 + (-x66) * (-x176 + x191));
  J[170] = -60000000.0 * sc[2] * x117 + 80000000.0 * sc[2] * x170 -
           80000000.0 * sc[2] * x187 + 15000000.0 * sc[2] * x204 -
           10000000.0 * sc[2] * x34 - 15000000.0 * sc[2] * x55 + x117 * x20 +
           x117 * x465 + x1686 +
           (60000000.0 * sc[2] * x122 + 15000000.0 * sc[2] * x66 - x122 * x20 -
            x122 * x465) *
             (-x170 + x187) +
           (10000000.0 * sc[2] * x43) * (-x204 + x55 + (-x66) * (-x170 + x187));
  J[3] = 40000000.0 * sc[3] * x16 - 40000000.0 * sc[3] * x214 - sc[3] * x91 +
         x1087 - 288000.0 * x11 + x140 * x467 + x140 * x470 - x140 * x478 +
         x1783 * x343 - x1783 * x377 - x316 * x492 + 288000.0 * x436 +
         (40000000.0 * sc[3] * x66 - x122 * x467 - x122 * x470 + x122 * x478) *
           (-x343 + x377) +
         (x43 * x492) * (-x16 + x214 + (-x66) * (-x343 + x377));
  J[17] = refCinv * sc[9] * x1236 + 40000000.0 * sc[3] * x216 -
          40000000.0 * sc[3] * x24 + sc[6] * x853 + x1087 + x1278 -
          x144 * x1783 + x1783 * x393 + x1799 + x208 * x467 + x208 * x470 -
          x208 * x478 - x238 * x492 +
          (40000000.0 * sc[3] * x66 - x122 * x467 - x122 * x470 + x122 * x478) *
            (x144 - x393) +
          (x43 * x492) * (-x216 + x24 + (-x66) * (x144 - x393));
  J[31] = sc[10] * x1690 + 240000.0 * sc[2] * x1706 * x862 +
          40000000.0 * sc[3] * x218 - 40000000.0 * sc[3] * x220 +
          sc[4] * x1342 + 20000000.0 * sc[6] + x1087 + x1783 * x412 -
          x1783 * x420 + x1799 + x277 * x467 + x277 * x470 - x277 * x478 -
          x388 * x492 +
          (40000000.0 * sc[3] * x66 - x122 * x467 - x122 * x470 + x122 * x478) *
            (-x412 + x420) +
          (x43 * x492) * (-x218 + x220 + (-x66) * (-x412 + x420));
  J[45] = -120000.0 * refC * x1157 * x1706 - sc[0] * x91 - sc[11] * x1834 +
          40000000.0 * sc[3] * x293 - 40000000.0 * sc[3] * x300 -
          sc[4] * x1719 - sc[5] * x1813 - sc[7] * x1823 - sc[8] * x67 -
          18000000.0 * x1151 * exp(-452.89499922424801 * invT) + x1384 -
          13200000.0 * x164 * exp(-754.82499870708 * invT) - x1717 +
          x1783 * x426 - x1783 * x431 + x1799 + x26 * x467 + x26 * x470 -
          x26 * x478 - x389 * x492 - 40000000.0 * x52 -
          7600000.0 * x59 * exp(-201.28666632188799 * invT) +
          (40000000.0 * sc[3] * x66 - x122 * x467 - x122 * x470 + x122 * x478) *
            (-x426 + x431) +
          (x43 * x492) * (-x293 + x300 + (-x66) * (-x426 + x431));
  J[59] = sc[11] * x1846 + sc[2] * x1342 - 40000000.0 * sc[3] * x155 -
          sc[3] * x1719 + 40000000.0 * sc[3] * x342 + x1087 + x1783 * x437 -
          x1783 * x76 + x1799 + x1841 + 28000000.0 * x265 * x266 + x366 * x467 +
          x366 * x470 - x366 * x478 - x391 * x492 + x466 * x59 +
          (40000000.0 * sc[3] * x66 - x122 * x467 - x122 * x470 + x122 * x478) *
            (-x437 + x76) +
          (x43 * x492) * (x155 - x342 + (-x66) * (-x437 + x76));
  J[73] = refC * sc[6] * x1064 - sc[3] * x1813 + 40000000.0 * sc[3] * x345 -
          40000000.0 * sc[3] * x346 + 12000000.0 * sc[9] * x247 -
          x1083 * x1275 - 1848000.0 * x11 - x1783 * x449 + x1783 * x462 +
          x373 * x467 + x373 * x470 - x373 * x478 + 1848000.0 * x436 -
          x492 * x85 +
          (40000000.0 * sc[3] * x66 - x122 * x467 - x122 * x470 + x122 * x478) *
            (x449 - x462) +
          (x43 * x492) * (-x345 + x346 + (-x66) * (x449 - x462));
  J[87] = sc[11] * x1865 + sc[1] * x853 + 20000000.0 * sc[2] +
          40000000.0 * sc[3] * x348 - 40000000.0 * sc[3] * x480 +
          1000000.0 * sc[7] + sc[9] * x104 + x1087 + x1493 + x1783 * x472 -
          x1783 * x481 + x1799 + x1864 - x227 * x492 + x305 * x467 +
          x305 * x470 - x305 * x478 + x469 * x59 +
          (40000000.0 * sc[3] * x66 - x122 * x467 - x122 * x470 + x122 * x478) *
            (-x472 + x481) +
          (x43 * x492) * (-x348 + x480 + (-x66) * (-x472 + x481));
  J[101] =
    -sc[3] * x1823 + 40000000.0 * sc[3] * x348 - 40000000.0 * sc[3] * x489 +
    1000000.0 * sc[6] + x1087 - x1783 * x336 + x1783 * x484 + x1799 +
    x374 * x467 + x374 * x470 - x374 * x478 - x403 * x492 +
    (40000000.0 * sc[3] * x66 - x122 * x467 - x122 * x470 + x122 * x478) *
      (x336 - x484) +
    (x43 * x492) * (-x348 + x489 + (-x66) * (x336 - x484));
  J[115] =
    40000000.0 * sc[3] * x349 - 40000000.0 * sc[3] * x353 - sc[3] * x67 +
    x1087 - 240000.0 * x11 + x1783 * x495 - x1783 * x501 - x201 * x492 +
    x375 * x467 + x375 * x470 - x375 * x478 + 240000.0 * x436 +
    (40000000.0 * sc[3] * x66 - x122 * x467 - x122 * x470 + x122 * x478) *
      (-x495 + x501) +
    (x43 * x492) * (-x349 + x353 + (-x66) * (-x495 + x501));
  J[129] =
    40000000.0 * sc[3] * x166 - 40000000.0 * sc[3] * x96 +
    12000000.0 * sc[5] * x247 + sc[6] * x104 + 2100000.0 * x1081 -
    2100000.0 * x1083 * x1084 - 210000.0 * x11 + x1236 * x264 - x133 * x1783 +
    x136 * x1783 - x1759 - x203 * x492 + x382 * x467 + x382 * x470 -
    x382 * x478 + 210000.0 * x436 +
    (40000000.0 * sc[3] * x66 - x122 * x467 - x122 * x470 + x122 * x478) *
      (x133 - x136) +
    (x43 * x492) * (-x166 + x96 + (-x66) * (x133 - x136));
  J[143] =
    sc[2] * x1690 + 40000000.0 * sc[3] * x356 - 40000000.0 * sc[3] * x54 +
    4200000.0 * x1081 - 4200000.0 * x1083 * x1084 - 432000.0 * x11 +
    x139 * x467 + x139 * x470 - x139 * x478 - x150 * x1783 + x172 * x1783 -
    x201 * x492 + 432000.0 * x436 +
    (40000000.0 * sc[3] * x66 - x122 * x467 - x122 * x470 + x122 * x478) *
      (x150 - x172) +
    (x43 * x492) * (-x356 + x54 + (-x66) * (x150 - x172));
  J[157] =
    -40000000.0 * sc[3] * x182 - sc[3] * x1834 + 40000000.0 * sc[3] * x348 +
    sc[4] * x1846 + sc[6] * x1865 + x1087 + x176 * x1783 - x1783 * x191 +
    x1799 - x243 * x492 + x358 * x467 + x358 * x470 - x358 * x478 +
    (40000000.0 * sc[3] * x66 - x122 * x467 - x122 * x470 + x122 * x478) *
      (-x176 + x191) +
    (x43 * x492) * (x182 - x348 + (-x66) * (-x176 + x191));
  J[171] =
    375000000.0 * refC * sc[6] * x1378 + 40000000.0 * sc[3] * x204 -
    40000000.0 * sc[3] * x55 - 375000000.0 * x1083 * x1270 + x117 * x467 +
    x117 * x470 - x117 * x478 + x170 * x1783 - x1783 * x187 + x1799 -
    x34 * x492 +
    (40000000.0 * sc[3] * x66 - x122 * x467 - x122 * x470 + x122 * x478) *
      (-x170 + x187) +
    (x43 * x492) * (-x204 + x55 + (-x66) * (-x170 + x187));
  J[4] = 30000000.0 * sc[2] * x140 + 10000000.0 * sc[2] * x316 -
         50000000.0 * sc[4] * x140 + 30000000.0 * sc[4] * x16 -
         30000000.0 * sc[4] * x214 - 5000000.0 * sc[4] * x316 +
         20000000.0 * sc[4] * x343 - 20000000.0 * sc[4] * x377 -
         20000000.0 * sc[6] * x343 + 20000000.0 * sc[6] * x377 + x1095 -
         1000000.0 * x1219 + 1000000.0 * x1221 + x132 * x140 - x140 * x465 -
         x140 * x467 - x158 - x1783 * x343 + x1783 * x377 + x1953 +
         (-30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 +
          50000000.0 * sc[4] * x122 + 30000000.0 * sc[4] * x66 - x122 * x132 +
          x122 * x465 + x122 * x467 - x499 * x66) *
           (-x343 + x377) +
         (-12000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 +
          5000000.0 * sc[4] * x43) *
           (-x16 + x214 + (-x66) * (-x343 + x377));
  J[18] = -refCinv * sc[9] * x1236 + sc[10] * x1253 +
          30000000.0 * sc[11] * x260 + 20000000.0 * sc[11] * x319 +
          30000000.0 * sc[2] * x208 + 10000000.0 * sc[2] * x238 +
          500000.0 * sc[2] * x7 * x862 + sc[3] * x1267 -
          20000000.0 * sc[4] * x144 - 50000000.0 * sc[4] * x208 +
          30000000.0 * sc[4] * x216 - 5000000.0 * sc[4] * x238 -
          30000000.0 * sc[4] * x24 + 20000000.0 * sc[4] * x393 + sc[5] * x859 +
          20000000.0 * sc[6] * x144 - 20000000.0 * sc[6] * x393 +
          268000000.0 * sc[6] * exp(-319.54258278599701 * invT) + x1288 +
          x132 * x208 + x144 * x1783 - x1783 * x393 + x1957 + x1963 -
          x208 * x465 - x208 * x467 +
          (-30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 +
           50000000.0 * sc[4] * x122 + 30000000.0 * sc[4] * x66 - x122 * x132 +
           x122 * x465 + x122 * x467 - x499 * x66) *
            (x144 - x393) +
          (-12000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 +
           5000000.0 * sc[4] * x43) *
            (-x216 + x24 + (-x66) * (x144 - x393));
  J[32] = sc[0] * x142 + sc[11] * x1713 + 500000.0 * sc[1] * x7 * x862 -
          28000000.0 * sc[3] * x218 + 28000000.0 * sc[3] * x220 -
          sc[4] * x1342 + 30000000.0 * sc[4] * x218 -
          30000000.0 * sc[4] * x220 - 50000000.0 * sc[4] * x277 -
          5000000.0 * sc[4] * x388 + 20000000.0 * sc[4] * x412 -
          20000000.0 * sc[4] * x420 + 0.0714 * sc[5] * x1709 +
          20000000.0 * sc[6] + x1356 - x1783 * x412 + x1783 * x420 + x1957 +
          x1975 + x1979 - x277 * x465 - x277 * x467 +
          (-30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 +
           50000000.0 * sc[4] * x122 + 30000000.0 * sc[4] * x66 - x122 * x132 +
           x122 * x465 + x122 * x467 - x499 * x66) *
            (-x412 + x420) +
          (-12000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 +
           5000000.0 * sc[4] * x43) *
            (-x218 + x220 + (-x66) * (-x412 + x420));
  J[46] = sc[1] * x1267 + 30000000.0 * sc[2] * x26 - 28000000.0 * sc[3] * x293 +
          28000000.0 * sc[3] * x300 - sc[4] * x1719 - 50000000.0 * sc[4] * x26 +
          30000000.0 * sc[4] * x293 - 30000000.0 * sc[4] * x300 -
          5000000.0 * sc[4] * x389 + 20000000.0 * sc[4] * x426 -
          20000000.0 * sc[4] * x431 + sc[5] * x1813 +
          13200000.0 * x164 * exp(-754.82499870708 * invT) - x1783 * x426 +
          x1783 * x431 + x1957 + x1986 + x1990 - x26 * x465 - x26 * x467 +
          28000000.0 * x52 +
          (-30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 +
           50000000.0 * sc[4] * x122 + 30000000.0 * sc[4] * x66 - x122 * x132 +
           x122 * x465 + x122 * x467 - x499 * x66) *
            (-x426 + x431) +
          (-12000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 +
           5000000.0 * sc[4] * x43) *
            (-x293 + x300 + (-x66) * (-x426 + x431));
  J[60] = -sc[10] * x2004 - sc[2] * x1342 + 30000000.0 * sc[2] * x366 -
          sc[3] * x1719 - 30000000.0 * sc[4] * x155 +
          30000000.0 * sc[4] * x342 - 50000000.0 * sc[4] * x366 -
          5000000.0 * sc[4] * x391 + 20000000.0 * sc[4] * x437 -
          20000000.0 * sc[4] * x76 - 30000000.0 * sc[9] * x288 - x1326 * x7 -
          x1393 - 536000000.0 * x1395 + x1422 - 20000000.0 * x164 -
          0.1428 * x1737 - x1783 * x437 + x1783 * x76 - x1841 + x1957 +
          50000000.0 * x199 - x1994 + x2015 + x2022 + 5000000.0 * x244 -
          28000000.0 * x265 * x266 + 50000000.0 * x317 - x366 * x465 -
          x366 * x467 - x460 * x59 - x466 * x59 - 30000000.0 * x52 +
          5000000.0 * x898 - x930 +
          (-30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 +
           50000000.0 * sc[4] * x122 + 30000000.0 * sc[4] * x66 - x122 * x132 +
           x122 * x465 + x122 * x467 - x499 * x66) *
            (-x437 + x76) +
          (-12000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 +
           5000000.0 * sc[4] * x43) *
            (x155 - x342 + (-x66) * (-x437 + x76));
  J[74] = 5000000.0 * sc[11] * x240 + sc[1] * x859 + 0.0714 * sc[2] * x1709 +
          30000000.0 * sc[2] * x373 + sc[3] * x1813 +
          30000000.0 * sc[4] * x345 - 30000000.0 * sc[4] * x346 -
          50000000.0 * sc[4] * x373 - 20000000.0 * sc[4] * x449 +
          20000000.0 * sc[4] * x462 - 5000000.0 * sc[4] * x85 + sc[7] * x45 +
          50000000.0 * sc[9] * x295 - 3000000.0 * x1219 + 3000000.0 * x1221 +
          x1470 + x1783 * x449 - x1783 * x462 + x2037 + x2042 - x373 * x465 -
          x373 * x467 +
          (-30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 +
           50000000.0 * sc[4] * x122 + 30000000.0 * sc[4] * x66 - x122 * x132 +
           x122 * x465 + x122 * x467 - x499 * x66) *
            (x449 - x462) +
          (-12000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 +
           5000000.0 * sc[4] * x43) *
            (-x345 + x346 + (-x66) * (x449 - x462));
  J[88] = 268000000.0 * sc[1] * exp(-319.54258278599701 * invT) +
          30000000.0 * sc[2] * x305 + 20000000.0 * sc[2] +
          28000000.0 * sc[3] * x480 - 5000000.0 * sc[4] * x227 -
          50000000.0 * sc[4] * x305 + 30000000.0 * sc[4] * x348 +
          20000000.0 * sc[4] * x472 - 30000000.0 * sc[4] * x480 -
          20000000.0 * sc[4] * x481 + sc[9] * x2046 + x1498 - x1783 * x472 +
          x1783 * x481 - x1864 + x1957 + x2054 + x2059 - x305 * x465 -
          x305 * x467 +
          (-30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 +
           50000000.0 * sc[4] * x122 + 30000000.0 * sc[4] * x66 - x122 * x132 +
           x122 * x465 + x122 * x467 - x499 * x66) *
            (-x472 + x481) +
          (-12000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 +
           5000000.0 * sc[4] * x43) *
            (-x348 + x480 + (-x66) * (-x472 + x481));
  J[102] = 30000000.0 * sc[2] * x374 + 28000000.0 * sc[3] * x489 -
           20000000.0 * sc[4] * x336 + 30000000.0 * sc[4] * x348 -
           50000000.0 * sc[4] * x374 - 5000000.0 * sc[4] * x403 +
           20000000.0 * sc[4] * x484 - 30000000.0 * sc[4] * x489 + sc[5] * x45 +
           x1498 + x1783 * x336 - x1783 * x484 + x1957 + x2067 + x2073 -
           x348 * x499 - x374 * x465 - x374 * x467 +
           (-30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 +
            50000000.0 * sc[4] * x122 + 30000000.0 * sc[4] * x66 - x122 * x132 +
            x122 * x465 + x122 * x467 - x499 * x66) *
             (x336 - x484) +
           (-12000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 +
            5000000.0 * sc[4] * x43) *
             (-x348 + x489 + (-x66) * (x336 - x484));
  J[116] = 30000000.0 * sc[2] * x375 - 28000000.0 * sc[3] * x349 +
           28000000.0 * sc[3] * x353 + 30000000.0 * sc[4] * x349 -
           30000000.0 * sc[4] * x353 - 50000000.0 * sc[4] * x375 +
           20000000.0 * sc[4] * x495 - 20000000.0 * sc[4] * x501 -
           20000000.0 * sc[6] * x495 + 20000000.0 * sc[6] * x501 +
           44000000000.0 * x1091 - 44000000000.0 * x1093 + x132 * x375 -
           x1783 * x495 + x1783 * x501 - x2074 + x2079 + x2088 - x375 * x465 -
           x375 * x467 +
           (-30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 +
            50000000.0 * sc[4] * x122 + 30000000.0 * sc[4] * x66 - x122 * x132 +
            x122 * x465 + x122 * x467 - x499 * x66) *
             (-x495 + x501) +
           (-12000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 +
            5000000.0 * sc[4] * x43) *
             (-x349 + x353 + (-x66) * (-x495 + x501));
  J[130] = 10000000.0 * sc[2] * x203 + 30000000.0 * sc[2] * x382 -
           28000000.0 * sc[3] * x166 + 28000000.0 * sc[3] * x96 -
           20000000.0 * sc[4] * x133 + 20000000.0 * sc[4] * x136 +
           30000000.0 * sc[4] * x166 - 5000000.0 * sc[4] * x203 -
           30000000.0 * sc[4] * x288 - 50000000.0 * sc[4] * x382 -
           30000000.0 * sc[4] * x96 + 50000000.0 * sc[5] * x295 +
           20000000.0 * sc[6] * x133 - 20000000.0 * sc[6] * x136 +
           sc[6] * x2046 - 750000.0 * x1219 + 750000.0 * x1221 - x1236 * x264 +
           x132 * x382 + x133 * x1783 + x1333 - x136 * x1783 - x1550 + x2098 -
           x382 * x465 - x382 * x467 +
           (-30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 +
            50000000.0 * sc[4] * x122 + 30000000.0 * sc[4] * x66 - x122 * x132 +
            x122 * x465 + x122 * x467 - x499 * x66) *
             (x133 - x136) +
           (-12000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 +
            5000000.0 * sc[4] * x43) *
             (-x166 + x96 + (-x66) * (x133 - x136));
  J[144] = sc[1] * x1253 + 30000000.0 * sc[2] * x139 -
           28000000.0 * sc[3] * x356 + 28000000.0 * sc[3] * x54 -
           50000000.0 * sc[4] * x139 - 20000000.0 * sc[4] * x150 +
           20000000.0 * sc[4] * x172 - sc[4] * x2004 +
           30000000.0 * sc[4] * x356 - 30000000.0 * sc[4] * x54 +
           20000000.0 * sc[6] * x150 - 20000000.0 * sc[6] * x172 + x132 * x139 +
           x1333 - x139 * x465 - x139 * x467 + x150 * x1783 + x150 * x1948 -
           x172 * x1783 - x172 * x1948 + x2079 - x356 * x499 + x499 * x54 +
           (-30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 +
            50000000.0 * sc[4] * x122 + 30000000.0 * sc[4] * x66 - x122 * x132 +
            x122 * x465 + x122 * x467 - x499 * x66) *
             (x150 - x172) +
           (-12000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 +
            5000000.0 * sc[4] * x43) *
             (-x356 + x54 + (-x66) * (x150 - x172));
  J[158] = 12000000.0 * sc[1] * x243 + 30000000.0 * sc[1] * x260 +
           20000000.0 * sc[1] * x319 + sc[2] * x1713 +
           30000000.0 * sc[2] * x358 + 28000000.0 * sc[3] * x182 +
           20000000.0 * sc[4] * x176 - 30000000.0 * sc[4] * x182 -
           20000000.0 * sc[4] * x191 - 5000000.0 * sc[4] * x243 +
           30000000.0 * sc[4] * x348 - 50000000.0 * sc[4] * x358 +
           5000000.0 * sc[5] * x240 + x1498 - x176 * x1783 - x176 * x1948 +
           x1783 * x191 + x182 * x499 + x191 * x1948 + x1957 + x2128 -
           x348 * x499 - x358 * x465 - x358 * x467 +
           (-30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 +
            50000000.0 * sc[4] * x122 + 30000000.0 * sc[4] * x66 - x122 * x132 +
            x122 * x465 + x122 * x467 - x499 * x66) *
             (-x176 + x191) +
           (-12000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 +
            5000000.0 * sc[4] * x43) *
             (x182 - x348 + (-x66) * (-x176 + x191));
  J[172] = 30000000.0 * sc[2] * x117 + 10000000.0 * sc[2] * x34 -
           28000000.0 * sc[3] * x204 + 28000000.0 * sc[3] * x55 -
           50000000.0 * sc[4] * x117 + 20000000.0 * sc[4] * x170 -
           20000000.0 * sc[4] * x187 + 30000000.0 * sc[4] * x204 -
           5000000.0 * sc[4] * x34 - 30000000.0 * sc[4] * x55 -
           20000000.0 * sc[6] * x170 + 20000000.0 * sc[6] * x187 + x117 * x132 -
           x117 * x465 - x117 * x467 - x170 * x1783 + x1783 * x187 + x1957 +
           x2139 +
           (-30000000.0 * sc[2] * x122 - 28000000.0 * sc[3] * x66 +
            50000000.0 * sc[4] * x122 + 30000000.0 * sc[4] * x66 - x122 * x132 +
            x122 * x465 + x122 * x467 - x499 * x66) *
             (-x170 + x187) +
           (-12000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 +
            5000000.0 * sc[4] * x43) *
             (-x204 + x55 + (-x66) * (-x170 + x187));
  J[5] = 6000000.0 * sc[1] * x316 - 12000000.0 * sc[3] * x16 +
         12000000.0 * sc[3] * x214 + 50000000.0 * sc[4] * x140 +
         5000000.0 * sc[4] * x316 - 16060000000.0 * x1091 +
         16060000000.0 * x1093 - x132 * x140 + x158 + x16 * x424 + x16 * x499 +
         x1948 * x343 - x1948 * x377 - x214 * x424 - x214 * x499 +
         (-12000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 + x122 * x132 +
          x424 * x66 + x499 * x66) *
           (-x343 + x377) +
         (-6000000.0 * sc[1] * x43 - 5000000.0 * sc[4] * x43) *
           (-x16 + x214 + (-x66) * (-x343 + x377));
  J[19] = 6000000.0 * sc[1] * x238 - 12000000.0 * sc[3] * x216 +
          12000000.0 * sc[3] * x24 + sc[4] * x1286 * x868 +
          50000000.0 * sc[4] * x208 + 5000000.0 * sc[4] * x238 - sc[5] * x859 +
          sc[6] * x1257 - x132 * x208 - x144 * x1948 + x1948 * x393 + x2140 +
          x216 * x424 + x216 * x499 - x24 * x424 - x24 * x499 -
          6000000.0 * x244 - 6000000.0 * x898 +
          (-12000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 + x122 * x132 +
           x424 * x66 + x499 * x66) *
            (x144 - x393) +
          (-6000000.0 * sc[1] * x43 - 5000000.0 * sc[4] * x43) *
            (-x216 + x24 + (-x66) * (x144 - x393));
  J[33] = 6000000.0 * sc[1] * x388 - 12000000.0 * sc[3] * x218 +
          12000000.0 * sc[3] * x220 + 50000000.0 * sc[4] * x277 +
          5000000.0 * sc[4] * x388 - sc[5] * x1340 - 0.0357 * sc[5] * x1709 -
          x132 * x277 + x1948 * x412 - x1948 * x420 + x2140 + x218 * x424 +
          x218 * x499 - x220 * x424 - x220 * x499 +
          (-12000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 + x122 * x132 +
           x424 * x66 + x499 * x66) *
            (-x412 + x420) +
          (-6000000.0 * sc[1] * x43 - 5000000.0 * sc[4] * x43) *
            (-x218 + x220 + (-x66) * (-x412 + x420));
  J[47] = 6000000.0 * sc[1] * x389 - 12000000.0 * sc[3] * x293 +
          12000000.0 * sc[3] * x300 + 50000000.0 * sc[4] * x26 +
          5000000.0 * sc[4] * x389 - sc[5] * x1813 - x132 * x26 + x1948 * x426 -
          x1948 * x431 + x2140 + x293 * x424 + x293 * x499 - x300 * x424 -
          x300 * x499 + 12000000.0 * x52 +
          (-12000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 + x122 * x132 +
           x424 * x66 + x499 * x66) *
            (-x426 + x431) +
          (-6000000.0 * sc[1] * x43 - 5000000.0 * sc[4] * x43) *
            (-x293 + x300 + (-x66) * (-x426 + x431));
  J[61] = sc[11] * x2016 + sc[1] * x1286 * x868 + 6000000.0 * sc[1] * x391 +
          12000000.0 * sc[3] * x155 - 12000000.0 * sc[3] * x342 +
          50000000.0 * sc[4] * x366 + 5000000.0 * sc[4] * x391 + sc[7] * x2010 +
          25010000.0 * sc[7] - x132 * x366 - x155 * x424 - x155 * x499 +
          0.0714 * x1737 + x1841 + x1948 * x437 - x1948 * x76 -
          50000000.0 * x199 + x1994 + x2140 - 5000000.0 * x244 -
          50000000.0 * x317 + x342 * x424 + x342 * x499 - 5000000.0 * x898 +
          x930 +
          (-12000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 + x122 * x132 +
           x424 * x66 + x499 * x66) *
            (-x437 + x76) +
          (-6000000.0 * sc[1] * x43 - 5000000.0 * sc[4] * x43) *
            (x155 - x342 + (-x66) * (-x437 + x76));
  J[75] = -refC * x1090 * x1286 - 5000000.0 * sc[11] * x240 +
          6000000.0 * sc[1] * x85 - sc[1] * x859 - sc[2] * x1340 -
          0.0357 * sc[2] * x1709 - sc[3] * x1813 - 12000000.0 * sc[3] * x345 +
          12000000.0 * sc[3] * x346 + 50000000.0 * sc[4] * x373 +
          5000000.0 * sc[4] * x85 - sc[7] * x45 - 12000000.0 * sc[9] * x247 -
          50000000.0 * sc[9] * x295 - 80300000000.0 * x1091 +
          80300000000.0 * x1093 - x132 * x373 - x164 * x1947 - x1948 * x449 +
          x1948 * x462 + x345 * x424 + x345 * x499 - x346 * x424 - x346 * x499 -
          6000000.0 * x39 * x52 - 25010000.0 * x47 * x52 - x59 * x99 +
          (-12000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 + x122 * x132 +
           x424 * x66 + x499 * x66) *
            (x449 - x462) +
          (-6000000.0 * sc[1] * x43 - 5000000.0 * sc[4] * x43) *
            (-x345 + x346 + (-x66) * (x449 - x462));
  J[89] = sc[1] * x1257 + 6000000.0 * sc[1] * x227 + 12000000.0 * sc[3] * x480 +
          5000000.0 * sc[4] * x227 + 50000000.0 * sc[4] * x305 - x132 * x305 +
          x1864 + x1948 * x472 - x1948 * x481 + x2146 - x424 * x480 -
          x480 * x499 +
          (-12000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 + x122 * x132 +
           x424 * x66 + x499 * x66) *
            (-x472 + x481) +
          (-6000000.0 * sc[1] * x43 - 5000000.0 * sc[4] * x43) *
            (-x348 + x480 + (-x66) * (-x472 + x481));
  J[103] = 6000000.0 * sc[1] * x403 + 12000000.0 * sc[3] * x489 +
           sc[4] * x2010 + 50000000.0 * sc[4] * x374 +
           5000000.0 * sc[4] * x403 + 25010000.0 * sc[4] - sc[5] * x45 -
           x132 * x374 - x1948 * x336 + x1948 * x484 + x2146 - x424 * x489 -
           x489 * x499 +
           (-12000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 +
            x122 * x132 + x424 * x66 + x499 * x66) *
             (x336 - x484) +
           (-6000000.0 * sc[1] * x43 - 5000000.0 * sc[4] * x43) *
             (-x348 + x489 + (-x66) * (x336 - x484));
  J[117] = 6000000.0 * sc[1] * x201 - 12000000.0 * sc[3] * x349 +
           12000000.0 * sc[3] * x353 + 5000000.0 * sc[4] * x201 +
           50000000.0 * sc[4] * x375 - 44000000000.0 * x1091 +
           44000000000.0 * x1093 - x132 * x375 + x1948 * x495 - x1948 * x501 +
           x2074 + x349 * x424 + x349 * x499 - x353 * x424 - x353 * x499 +
           (-12000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 +
            x122 * x132 + x424 * x66 + x499 * x66) *
             (-x495 + x501) +
           (-6000000.0 * sc[1] * x43 - 5000000.0 * sc[4] * x43) *
             (-x349 + x353 + (-x66) * (-x495 + x501));
  J[131] = 6000000.0 * sc[1] * x203 - 12000000.0 * sc[3] * x166 +
           12000000.0 * sc[3] * x96 + 5000000.0 * sc[4] * x203 +
           50000000.0 * sc[4] * x382 - 12000000.0 * sc[5] * x247 -
           50000000.0 * sc[5] * x295 - x132 * x382 - x133 * x1948 +
           x136 * x1948 + x166 * x424 + x166 * x499 + x2140 - x424 * x96 -
           x499 * x96 +
           (-12000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 +
            x122 * x132 + x424 * x66 + x499 * x66) *
             (x133 - x136) +
           (-6000000.0 * sc[1] * x43 - 5000000.0 * sc[4] * x43) *
             (-x166 + x96 + (-x66) * (x133 - x136));
  J[145] = 6000000.0 * sc[1] * x201 - 12000000.0 * sc[3] * x356 +
           12000000.0 * sc[3] * x54 + 50000000.0 * sc[4] * x139 +
           5000000.0 * sc[4] * x201 - x132 * x139 - x150 * x1948 +
           x172 * x1948 + x2140 + x356 * x424 + x356 * x499 - x424 * x54 -
           x499 * x54 +
           (-12000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 +
            x122 * x132 + x424 * x66 + x499 * x66) *
             (x150 - x172) +
           (-6000000.0 * sc[1] * x43 - 5000000.0 * sc[4] * x43) *
             (-x356 + x54 + (-x66) * (x150 - x172));
  J[159] = 6000000.0 * sc[1] * x243 + 12000000.0 * sc[3] * x182 +
           sc[4] * x2016 + 5000000.0 * sc[4] * x243 +
           50000000.0 * sc[4] * x358 - 5000000.0 * sc[5] * x240 - x132 * x358 +
           x176 * x1948 - x182 * x424 - x182 * x499 - x191 * x1948 + x2146 +
           (-12000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 +
            x122 * x132 + x424 * x66 + x499 * x66) *
             (-x176 + x191) +
           (-6000000.0 * sc[1] * x43 - 5000000.0 * sc[4] * x43) *
             (x182 - x348 + (-x66) * (-x176 + x191));
  J[173] = 6000000.0 * sc[1] * x34 - 12000000.0 * sc[3] * x204 +
           12000000.0 * sc[3] * x55 + 50000000.0 * sc[4] * x117 +
           5000000.0 * sc[4] * x34 - x117 * x132 + x170 * x1948 - x187 * x1948 +
           x204 * x424 + x204 * x499 + x2140 - x424 * x55 - x499 * x55 +
           (-12000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 +
            x122 * x132 + x424 * x66 + x499 * x66) *
             (-x170 + x187) +
           (-6000000.0 * sc[1] * x43 - 5000000.0 * sc[4] * x43) *
             (-x204 + x55 + (-x66) * (-x170 + x187));
  J[6] = sc[3] * x91 + 20000000.0 * sc[6] * x343 - 20000000.0 * sc[6] * x377 -
         x140 * x470 + x140 * x478 + x2151 + x316 * x492 +
         (x122 * x470 - x122 * x478) * (-x343 + x377) +
         (-x43 * x492) * (-x16 + x214 + (-x66) * (-x343 + x377));
  J[20] = 375000000.0 * sc[12] * sc[3] * x1270 +
          300000000.0 * ((sc[3]) * (sc[3])) * x1270 + sc[3] * sc[5] * x1275 +
          2800000.0 * sc[3] * x1084 * x1263 - 20000000.0 * sc[6] * x144 +
          20000000.0 * sc[6] * x393 + x1262 - x208 * x470 + x208 * x478 +
          x2151 + x238 * x492 + (x122 * x470 - x122 * x478) * (x144 - x393) +
          (-x43 * x492) * (-x216 + x24 + (-x66) * (x144 - x393));
  J[34] = sc[5] * x1340 + 20000000.0 * sc[6] * x412 -
          20000000.0 * sc[6] * x420 - 20000000.0 * sc[6] + x2151 - x277 * x470 +
          x277 * x478 + x388 * x492 +
          (x122 * x470 - x122 * x478) * (-x412 + x420) +
          (-x43 * x492) * (-x218 + x220 + (-x66) * (-x412 + x420));
  J[48] = -300000000.0 * refC * sc[6] * x1378 + sc[0] * x91 + sc[11] * x1834 +
          375000000.0 * sc[12] * sc[1] * x1270 + sc[1] * sc[5] * x1275 +
          2800000.0 * sc[1] * x1084 * x1263 + sc[4] * x1719 + sc[5] * x1813 +
          20000000.0 * sc[6] * x426 - 20000000.0 * sc[6] * x431 + sc[8] * x67 +
          600000000.0 * x1083 * x1270 +
          18000000.0 * x1151 * exp(-452.89499922424801 * invT) - x26 * x470 +
          x26 * x478 + x389 * x492 +
          7600000.0 * x59 * exp(-201.28666632188799 * invT) +
          (x122 * x470 - x122 * x478) * (-x426 + x431) +
          (-x43 * x492) * (-x293 + x300 + (-x66) * (-x426 + x431));
  J[62] = sc[10] * x2004 + 20000000.0 * sc[11] * x330 + sc[3] * x1719 +
          20000000.0 * sc[6] * x437 - 20000000.0 * sc[6] * x76 +
          268000000.0 * x1395 - x1841 + x2151 - x366 * x470 + x366 * x478 +
          x391 * x492 + (x122 * x470 - x122 * x478) * (-x437 + x76) +
          (-x43 * x492) * (x155 - x342 + (-x66) * (-x437 + x76));
  J[76] = -refC * sc[6] * x1064 + sc[2] * x1340 + sc[3] * x1813 -
          20000000.0 * sc[6] * x449 + 20000000.0 * sc[6] * x462 +
          x1083 * x1275 - x373 * x470 + x373 * x478 + x492 * x85 +
          (x122 * x470 - x122 * x478) * (x449 - x462) +
          (-x43 * x492) * (-x345 + x346 + (-x66) * (x449 - x462));
  J[90] = -375000000.0 * refC * sc[12] * x1378 -
          300000000.0 * refC * sc[3] * x1378 - refC * sc[5] * x1064 -
          2800000.0 * refC * x1263 * exp(-0.86 * tc[0] + x1077) -
          sc[11] * x1865 - 20000000.0 * sc[2] + 20000000.0 * sc[6] * x472 -
          20000000.0 * sc[6] * x481 - 1000000.0 * sc[7] - sc[9] * x104 -
          sc[9] * x2046 + x1486 - 20000000.0 * x164 - x1864 + x2151 +
          x227 * x492 - x305 * x470 + x305 * x478 - x469 * x59 +
          (x122 * x470 - x122 * x478) * (-x472 + x481) +
          (-x43 * x492) * (-x348 + x480 + (-x66) * (-x472 + x481));
  J[104] = -20000000.0 * sc[6] * x336 + 20000000.0 * sc[6] * x484 -
           1000000.0 * sc[6] + x2151 - x374 * x470 + x374 * x478 + x403 * x492 +
           (x122 * x470 - x122 * x478) * (x336 - x484) +
           (-x43 * x492) * (-x348 + x489 + (-x66) * (x336 - x484));
  J[118] = sc[3] * x67 + 20000000.0 * sc[6] * x495 - 20000000.0 * sc[6] * x501 +
           x201 * x492 + x2151 - x375 * x470 + x375 * x478 +
           (x122 * x470 - x122 * x478) * (-x495 + x501) +
           (-x43 * x492) * (-x349 + x353 + (-x66) * (-x495 + x501));
  J[132] = -sc[6] * x104 - 20000000.0 * sc[6] * x133 +
           20000000.0 * sc[6] * x136 - sc[6] * x2046 - 2100000.0 * x1081 +
           2100000.0 * x1083 * x1084 + x203 * x492 - x382 * x470 + x382 * x478 +
           (x122 * x470 - x122 * x478) * (x133 - x136) +
           (-x43 * x492) * (-x166 + x96 + (-x66) * (x133 - x136));
  J[146] = sc[4] * x2004 - 20000000.0 * sc[6] * x150 +
           20000000.0 * sc[6] * x172 - 4200000.0 * x1081 +
           4200000.0 * x1083 * x1084 - x139 * x470 + x139 * x478 + x201 * x492 +
           (x122 * x470 - x122 * x478) * (x150 - x172) +
           (-x43 * x492) * (-x356 + x54 + (-x66) * (x150 - x172));
  J[160] = sc[3] * x1834 + 20000000.0 * sc[4] * x330 +
           20000000.0 * sc[6] * x176 - sc[6] * x1865 -
           20000000.0 * sc[6] * x191 + x2151 + x243 * x492 - x358 * x470 +
           x358 * x478 + (x122 * x470 - x122 * x478) * (-x176 + x191) +
           (-x43 * x492) * (x182 - x348 + (-x66) * (-x176 + x191));
  J[174] = -375000000.0 * refC * sc[6] * x1378 + 20000000.0 * sc[6] * x170 -
           20000000.0 * sc[6] * x187 + 375000000.0 * x1083 * x1270 -
           x117 * x470 + x117 * x478 + x34 * x492 +
           (x122 * x470 - x122 * x478) * (-x170 + x187) +
           (-x43 * x492) * (-x204 + x55 + (-x66) * (-x170 + x187));
  J[7] = -26480000.0 * sc[7] * x140 - sc[7] * x56 - x1070 * x343 +
         x1070 * x377 + x1141 + x125 * x140 - x16 * x31 + x1953 + x214 * x31 -
         x2165 * x343 + x2165 * x377 + x2168 +
         (-70000000.0 * sc[0] * x66 + 26480000.0 * sc[7] * x122 - x122 * x125 -
          x31 * x66 - x499 * x66) *
           (-x343 + x377) +
         (-12000000.0 * sc[1] * x43) * (-x16 + x214 + (-x66) * (-x343 + x377));
  J[21] = sc[11] * x1292 - 26480000.0 * sc[7] * x208 + x1069 * x164 * x7 +
          x1070 * x144 - x1070 * x393 + x125 * x208 + x1285 + x1308 +
          x144 * x2165 + x1963 - x216 * x31 - x2165 * x393 + x2171 + x24 * x31 +
          x873 +
          (-70000000.0 * sc[0] * x66 + 26480000.0 * sc[7] * x122 - x122 * x125 -
           x31 * x66 - x499 * x66) *
            (x144 - x393) +
          (-12000000.0 * sc[1] * x43) * (-x216 + x24 + (-x66) * (x144 - x393));
  J[35] =
    -70000000.0 * sc[0] * x218 + 70000000.0 * sc[0] * x220 -
    26480000.0 * sc[7] * x277 - 84300000.0 * sc[7] - x1070 * x412 +
    x1070 * x420 + x125 * x277 + x1308 - x195 * x412 + x195 * x420 + x1975 -
    x2165 * x412 + x2165 * x420 + x2171 - x218 * x31 + x220 * x31 +
    (-70000000.0 * sc[0] * x66 + 26480000.0 * sc[7] * x122 - x122 * x125 -
     x31 * x66 - x499 * x66) *
      (-x412 + x420) +
    (-12000000.0 * sc[1] * x43) * (-x218 + x220 + (-x66) * (-x412 + x420));
  J[49] =
    -70000000.0 * sc[0] * x293 + 70000000.0 * sc[0] * x300 - sc[7] * x1823 -
    26480000.0 * sc[7] * x26 + sc[8] * x67 - x1070 * x426 + x1070 * x431 +
    x125 * x26 + x1308 - x195 * x426 + x195 * x431 + x1986 - x2165 * x426 +
    x2165 * x431 + x2171 - x293 * x31 + x300 * x31 +
    (-70000000.0 * sc[0] * x66 + 26480000.0 * sc[7] * x122 - x122 * x125 -
     x31 * x66 - x499 * x66) *
      (-x426 + x431) +
    (-12000000.0 * sc[1] * x43) * (-x293 + x300 + (-x66) * (-x426 + x431));
  J[63] = 70000000.0 * sc[0] * x155 - 70000000.0 * sc[0] * x342 +
          sc[11] * x1846 - 26480000.0 * sc[7] * x366 - x1070 * x437 +
          x1070 * x76 + x125 * x366 + x1308 + x155 * x31 - x195 * x437 +
          x195 * x76 + x1994 + x2015 - x2165 * x437 + x2165 * x76 + x2171 -
          x31 * x342 +
          (-70000000.0 * sc[0] * x66 + 26480000.0 * sc[7] * x122 - x122 * x125 -
           x31 * x66 - x499 * x66) *
            (-x437 + x76) +
          (-12000000.0 * sc[1] * x43) * (x155 - x342 + (-x66) * (-x437 + x76));
  J[77] = -sc[1] * x1069 * x147 * x164 * x7 + sc[7] * x147 * x322 -
          26480000.0 * sc[7] * x373 - sc[7] * x45 + 2.4576e+21 * x1059 * x1207 -
          2.4576e+21 * x1059 * x1214 + x1070 * x449 - x1070 * x462 + x1104 -
          1.92e+16 * x1203 + x125 * x373 + x2037 + x2165 * x449 - x2165 * x462 -
          x31 * x345 + x31 * x346 + 1.92e+16 * x407 +
          (-70000000.0 * sc[0] * x66 + 26480000.0 * sc[7] * x122 - x122 * x125 -
           x31 * x66 - x499 * x66) *
            (x449 - x462) +
          (-12000000.0 * sc[1] * x43) * (-x345 + x346 + (-x66) * (x449 - x462));
  J[91] =
    70000000.0 * sc[0] * x480 - 26480000.0 * sc[7] * x305 - 1000000.0 * sc[7] -
    x1070 * x472 + x1070 * x481 + x125 * x305 - x195 * x472 + x195 * x481 +
    x2054 - x2165 * x472 + x2165 * x481 + x2183 + x31 * x480 +
    (-70000000.0 * sc[0] * x66 + 26480000.0 * sc[7] * x122 - x122 * x125 -
     x31 * x66 - x499 * x66) *
      (-x472 + x481) +
    (-12000000.0 * sc[1] * x43) * (-x348 + x480 + (-x66) * (-x472 + x481));
  J[105] =
    -sc[0] * x56 - sc[11] * x2191 - 84300000.0 * sc[2] - sc[3] * x1823 -
    sc[5] * x45 - 1000000.0 * sc[6] - 26480000.0 * sc[7] * x374 -
    9.84 * sc[7] * exp(-g_RT_qss[0] + x2162 - x255) -
    64000000.0 * sc[7] * exp(-g_RT_qss[1] + 286.83349950869001 * invT - x255) +
    x1070 * x336 - x1070 * x484 + x125 * x374 + x1526 + 26480000.0 * x199 +
    x2073 + x2165 * x336 - x2165 * x484 + x2183 + x31 * x489 +
    26480000.0 * x317 - x322 - x348 * x499 +
    (-70000000.0 * sc[0] * x66 + 26480000.0 * sc[7] * x122 - x122 * x125 -
     x31 * x66 - x499 * x66) *
      (x336 - x484) +
    (-12000000.0 * sc[1] * x43) * (-x348 + x489 + (-x66) * (x336 - x484));
  J[119] =
    12000000.0 * sc[1] * x201 + sc[3] * x67 - 26480000.0 * sc[7] * x375 +
    26480000.0 * sc[9] * x313 - x1070 * x495 + x1070 * x501 + x125 * x375 +
    x1542 + 4.92 * x164 * exp(x2162) + x2074 + x2088 - x2165 * x495 +
    x2165 * x501 + x2168 - x31 * x349 + x31 * x353 +
    32000000.0 * x52 * exp(286.83349950869001 * invT) + x59 * x69 + x988 +
    (-70000000.0 * sc[0] * x66 + 26480000.0 * sc[7] * x122 - x122 * x125 -
     x31 * x66 - x499 * x66) *
      (-x495 + x501) +
    (-12000000.0 * sc[1] * x43) * (-x349 + x353 + (-x66) * (-x495 + x501));
  J[133] = -26480000.0 * sc[7] * x382 + 26480000.0 * sc[8] * x313 +
           6.144e+20 * x1059 * x1207 - 6.144e+20 * x1059 * x1214 +
           x1067 * (0.42 * x1060 + 3.0 * x1182) + x1070 * x133 - x1070 * x136 +
           x1172 - x1189 * (0.42 * x1060 + 3.0 * x1182) -
           4800000000000000.0 * x1203 + x125 * x382 + x133 * x2165 -
           x136 * x2165 - x166 * x31 + x2098 + x31 * x96 +
           4800000000000000.0 * x407 +
           (-70000000.0 * sc[0] * x66 + 26480000.0 * sc[7] * x122 -
            x122 * x125 - x31 * x66 - x499 * x66) *
             (x133 - x136) +
           (-12000000.0 * sc[1] * x43) * (-x166 + x96 + (-x66) * (x133 - x136));
  J[147] = 12000000.0 * sc[1] * x201 - 26480000.0 * sc[7] * x139 +
           x1070 * x150 - x1070 * x172 + x1140 + x125 * x139 + x150 * x1948 +
           x150 * x2165 - x172 * x1948 - x172 * x2165 + x2168 - x31 * x356 +
           x31 * x54 - x356 * x499 + x499 * x54 +
           (-70000000.0 * sc[0] * x66 + 26480000.0 * sc[7] * x122 -
            x122 * x125 - x31 * x66 - x499 * x66) *
             (x150 - x172) +
           (-12000000.0 * sc[1] * x43) * (-x356 + x54 + (-x66) * (x150 - x172));
  J[161] =
    70000000.0 * sc[0] * x182 + sc[1] * x1292 + 12000000.0 * sc[1] * x243 +
    sc[4] * x1846 - sc[7] * x2191 - 26480000.0 * sc[7] * x358 - x1070 * x176 +
    x1070 * x191 + x125 * x358 - x176 * x1948 - x176 * x195 - x176 * x2165 +
    x182 * x31 + x182 * x499 + x191 * x1948 + x191 * x195 + x191 * x2165 +
    x2183 - x348 * x499 +
    (-70000000.0 * sc[0] * x66 + 26480000.0 * sc[7] * x122 - x122 * x125 -
     x31 * x66 - x499 * x66) *
      (-x176 + x191) +
    (-12000000.0 * sc[1] * x43) * (x182 - x348 + (-x66) * (-x176 + x191));
  J[175] =
    -26480000.0 * sc[7] * x117 - x1070 * x170 + x1070 * x187 + x1152 +
    x117 * x125 - x170 * x2165 + x187 * x2165 - x204 * x31 + x2139 + x2171 +
    x31 * x55 +
    (-70000000.0 * sc[0] * x66 + 26480000.0 * sc[7] * x122 - x122 * x125 -
     x31 * x66 - x499 * x66) *
      (-x170 + x187) +
    (-12000000.0 * sc[1] * x43) * (-x204 + x55 + (-x66) * (-x170 + x187));
  J[8] =
    26480000.0 * sc[7] * x140 + sc[7] * x56 + x1128 - x125 * x140 + x16 * x29 -
    x214 * x29 + x2214 * x343 - x2214 * x377 +
    (-26480000.0 * sc[7] * x122 + x122 * x125 + x29 * x66) * (-x343 + x377);
  J[22] =
    2.477e+21 * sc[7] * x1109 * x7 * exp(x1110) + 26480000.0 * sc[7] * x208 -
    x125 * x208 - x144 * x2214 + x216 * x29 + x2214 * x393 + x2216 - x24 * x29 -
    x873 +
    (-26480000.0 * sc[7] * x122 + x122 * x125 + x29 * x66) * (x144 - x393);
  J[36] =
    26480000.0 * sc[7] * x277 - sc[8] * x1694 - x125 * x277 + x218 * x29 -
    x220 * x29 + x2214 * x412 - x2214 * x420 + x2216 +
    (-26480000.0 * sc[7] * x122 + x122 * x125 + x29 * x66) * (-x412 + x420);
  J[50] =
    26480000.0 * sc[7] * x26 - sc[8] * x67 - x125 * x26 + x2214 * x426 -
    x2214 * x431 + x2216 + x29 * x293 - x29 * x300 +
    (-26480000.0 * sc[7] * x122 + x122 * x125 + x29 * x66) * (-x426 + x431);
  J[64] =
    sc[7] * x109 + 26480000.0 * sc[7] * x366 - x125 * x366 - x155 * x29 -
    x1994 + x2214 * x437 - x2214 * x76 + x2216 + x29 * x342 +
    (-26480000.0 * sc[7] * x122 + x122 * x125 + x29 * x66) * (-x437 + x76);
  J[78] =
    26480000.0 * sc[7] * x373 + sc[7] * x45 -
    2.8986751181102398e+33 * x1099 * x1117 +
    2.8986751181102398e+33 * x1099 * x1138 - x1100 * x1102 + x1102 * x1303 +
    1.4862e+22 * x1114 - 1.4862e+22 * x1134 - x125 * x373 - x2214 * x449 +
    x2214 * x462 + x29 * x345 - x29 * x346 +
    (-26480000.0 * sc[7] * x122 + x122 * x125 + x29 * x66) * (x449 - x462);
  J[92] =
    26480000.0 * sc[7] * x305 + 1000000.0 * sc[7] - x125 * x305 + x2214 * x472 -
    x2214 * x481 + x2216 + x29 * x348 - x29 * x480 +
    (-26480000.0 * sc[7] * x122 + x122 * x125 + x29 * x66) * (-x472 + x481);
  J[106] =
    sc[0] * x56 + sc[11] * x2191 + 2.477e+21 * sc[1] * x1109 * x7 * exp(x1110) +
    sc[4] * x109 + sc[5] * x45 + 1000000.0 * sc[6] + 26480000.0 * sc[7] * x374 +
    4.92 * sc[7] * exp(-g_RT_qss[0] + x2162 - x255) +
    32000000.0 * sc[7] * exp(-g_RT_qss[1] + 286.83349950869001 * invT - x255) -
    x125 * x374 - 26480000.0 * x199 - x2214 * x336 + x2214 * x484 + x2216 +
    x29 * x348 - x29 * x489 - 26480000.0 * x317 +
    (-26480000.0 * sc[7] * x122 + x122 * x125 + x29 * x66) * (x336 - x484);
  J[120] =
    -sc[2] * x1694 - sc[3] * x67 + 26480000.0 * sc[7] * x375 -
    26480000.0 * sc[9] * x313 - 2.477e+21 * x1109 * x1131 * x198 + x1128 -
    x125 * x375 - 2.46 * x164 * exp(x2162) - x2074 + x2214 * x495 -
    x2214 * x501 + x29 * x349 - x29 * x353 -
    16000000.0 * x52 * exp(286.83349950869001 * invT) - x59 * x69 - x988 +
    (-26480000.0 * sc[7] * x122 + x122 * x125 + x29 * x66) * (-x495 + x501);
  J[134] =
    -3.7155e+21 * refC * sc[8] * x1109 * x1131 +
    3.7155e+21 * sc[1] * sc[7] * x1109 * exp(x1110) +
    26480000.0 * sc[7] * x382 - 26480000.0 * sc[8] * x313 -
    7.2466877952755894e+32 * x1099 * x1117 +
    7.2466877952755894e+32 * x1099 * x1138 -
    x1100 * (3.0 * x1124 + 0.42 * x1126) - x125 * x382 +
    x1303 * (3.0 * x1124 + 0.42 * x1126) - x133 * x2214 + x136 * x2214 +
    x166 * x29 - x29 * x96 +
    (-26480000.0 * sc[7] * x122 + x122 * x125 + x29 * x66) * (x133 - x136);
  J[148] =
    26480000.0 * sc[7] * x139 + x1128 - x125 * x139 - x150 * x2214 +
    x172 * x2214 + x29 * x356 - x29 * x54 +
    (-26480000.0 * sc[7] * x122 + x122 * x125 + x29 * x66) * (x150 - x172);
  J[162] =
    sc[7] * x2191 + 26480000.0 * sc[7] * x358 - x125 * x358 + x176 * x2214 -
    x182 * x29 - x191 * x2214 + x2216 + x29 * x348 +
    (-26480000.0 * sc[7] * x122 + x122 * x125 + x29 * x66) * (-x176 + x191);
  J[176] =
    26480000.0 * sc[7] * x117 - x117 * x125 + x170 * x2214 - x187 * x2214 +
    x204 * x29 + x2216 - x29 * x55 +
    (-26480000.0 * sc[7] * x122 + x122 * x125 + x29 * x66) * (-x170 + x187);
  J[9] = -14000000.0 * sc[10] * x16 + 14000000.0 * sc[10] * x214 +
         30000000.0 * sc[2] * x140 - 40000000.0 * sc[3] * x16 +
         40000000.0 * sc[3] * x214 + 50000000.0 * sc[4] * x140 +
         26480000.0 * sc[7] * x140 - 1204.0 * x10 + 1204.0 * x1225 + x1227 +
         x140 * x430 + x140 * x432 + x140 * x478 + x167 + x279 +
         (-14000000.0 * sc[10] * x66 - 73400000.0 * sc[1] * x122 -
          30000000.0 * sc[2] * x122 - 15000000.0 * sc[2] * x66 -
          40000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 -
          26480000.0 * sc[7] * x122 - x122 * x430 - x122 * x432 - x122 * x478) *
           (-x343 + x377);
  J[23] =
    -refCinv * sc[9] * x1236 + sc[10] * x1253 - 14000000.0 * sc[10] * x216 +
    14000000.0 * sc[10] * x24 + 30000000.0 * sc[2] * x208 -
    40000000.0 * sc[3] * x216 + 40000000.0 * sc[3] * x24 +
    50000000.0 * sc[4] * x208 + 26480000.0 * sc[7] * x208 + x1281 +
    x208 * x478 + x2227 + x897 +
    (-14000000.0 * sc[10] * x66 - 73400000.0 * sc[1] * x122 -
     30000000.0 * sc[2] * x122 - 15000000.0 * sc[2] * x66 -
     40000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 -
     26480000.0 * sc[7] * x122 - x122 * x430 - x122 * x432 - x122 * x478) *
      (x144 - x393);
  J[37] =
    sc[10] * x1690 - 14000000.0 * sc[10] * x218 + 14000000.0 * sc[10] * x220 +
    73400000.0 * sc[1] * x277 - 15000000.0 * sc[2] * x218 +
    15000000.0 * sc[2] * x220 - 40000000.0 * sc[3] * x218 +
    40000000.0 * sc[3] * x220 + 50000000.0 * sc[4] * x277 +
    2244000000000.0 * sc[5] * x277 * x425 + 26480000.0 * sc[7] * x277 -
    sc[9] * x1697 * x17 + x1356 + x2227 + 187000000000.0 * x277 * x425 * x6 +
    x277 * x478 + 15000000.0 * x52 +
    (-14000000.0 * sc[10] * x66 - 73400000.0 * sc[1] * x122 -
     30000000.0 * sc[2] * x122 - 15000000.0 * sc[2] * x66 -
     40000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 -
     26480000.0 * sc[7] * x122 - x122 * x430 - x122 * x432 - x122 * x478) *
      (-x412 + x420);
  J[51] =
    -14000000.0 * sc[10] * x293 + 14000000.0 * sc[10] * x300 +
    73400000.0 * sc[1] * x26 + 30000000.0 * sc[2] * x26 -
    15000000.0 * sc[2] * x293 + 15000000.0 * sc[2] * x300 -
    40000000.0 * sc[3] * x293 + 40000000.0 * sc[3] * x300 +
    50000000.0 * sc[4] * x26 + 26480000.0 * sc[7] * x26 - 3612.0 * x10 +
    3612.0 * x1225 + x1330 - x1717 + x26 * x430 + x26 * x432 + x26 * x478 +
    40000000.0 * x52 + 7600000.0 * x59 * exp(-201.28666632188799 * invT) +
    x890 +
    (-14000000.0 * sc[10] * x66 - 73400000.0 * sc[1] * x122 -
     30000000.0 * sc[2] * x122 - 15000000.0 * sc[2] * x66 -
     40000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 -
     26480000.0 * sc[7] * x122 - x122 * x430 - x122 * x432 - x122 * x478) *
      (-x426 + x431);
  J[65] =
    14000000.0 * sc[10] * x155 + sc[10] * x2004 - 14000000.0 * sc[10] * x342 +
    73400000.0 * sc[1] * x366 + 15000000.0 * sc[2] * x155 -
    15000000.0 * sc[2] * x342 + 30000000.0 * sc[2] * x366 +
    40000000.0 * sc[3] * x155 - 40000000.0 * sc[3] * x342 +
    50000000.0 * sc[4] * x366 + 26480000.0 * sc[7] * x366 -
    30000000.0 * sc[9] * x288 - x1393 - 50000000.0 * x199 + x2227 -
    28000000.0 * x265 * x266 - 50000000.0 * x317 + x366 * x430 + x366 * x432 +
    x366 * x478 +
    (-14000000.0 * sc[10] * x66 - 73400000.0 * sc[1] * x122 -
     30000000.0 * sc[2] * x122 - 15000000.0 * sc[2] * x66 -
     40000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 -
     26480000.0 * sc[7] * x122 - x122 * x430 - x122 * x432 - x122 * x478) *
      (-x437 + x76);
  J[79] =
    -14000000.0 * sc[10] * x345 + 14000000.0 * sc[10] * x346 -
    40000000.0 * sc[3] * x345 + 40000000.0 * sc[3] * x346 +
    50000000.0 * sc[4] * x373 + 26480000.0 * sc[7] * x373 -
    12000000.0 * sc[9] * x247 - 50000000.0 * sc[9] * x295 - 3612.0 * x10 +
    3612.0 * x1225 + x1457 + x373 * x478 + x959 +
    (-14000000.0 * sc[10] * x66 - 73400000.0 * sc[1] * x122 -
     30000000.0 * sc[2] * x122 - 15000000.0 * sc[2] * x66 -
     40000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 -
     26480000.0 * sc[7] * x122 - x122 * x430 - x122 * x432 - x122 * x478) *
      (x449 - x462);
  J[93] =
    14000000.0 * sc[10] * x480 + 73400000.0 * sc[1] * x305 +
    30000000.0 * sc[2] * x305 + 15000000.0 * sc[2] * x480 +
    40000000.0 * sc[3] * x480 + 50000000.0 * sc[4] * x305 +
    2244000000000.0 * sc[5] * x305 * x425 + 26480000.0 * sc[7] * x305 -
    sc[9] * x104 - sc[9] * x2046 + x2245 + x2246 +
    187000000000.0 * x305 * x425 * x6 + x305 * x478 +
    (-14000000.0 * sc[10] * x66 - 73400000.0 * sc[1] * x122 -
     30000000.0 * sc[2] * x122 - 15000000.0 * sc[2] * x66 -
     40000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 -
     26480000.0 * sc[7] * x122 - x122 * x430 - x122 * x432 - x122 * x478) *
      (-x472 + x481);
  J[107] =
    14000000.0 * sc[10] * x489 + 73400000.0 * sc[1] * x374 +
    30000000.0 * sc[2] * x374 + 15000000.0 * sc[2] * x489 +
    40000000.0 * sc[3] * x489 + 50000000.0 * sc[4] * x374 +
    26480000.0 * sc[7] * x374 - 26480000.0 * x199 + x2245 + x2246 -
    26480000.0 * x317 + x374 * x430 + x374 * x432 + x374 * x478 +
    (-14000000.0 * sc[10] * x66 - 73400000.0 * sc[1] * x122 -
     30000000.0 * sc[2] * x122 - 15000000.0 * sc[2] * x66 -
     40000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 -
     26480000.0 * sc[7] * x122 - x122 * x430 - x122 * x432 - x122 * x478) *
      (x336 - x484);
  J[121] =
    -14000000.0 * sc[10] * x349 + 14000000.0 * sc[10] * x353 +
    73400000.0 * sc[1] * x375 - 15000000.0 * sc[2] * x349 +
    15000000.0 * sc[2] * x353 + 30000000.0 * sc[2] * x375 -
    40000000.0 * sc[3] * x349 + 40000000.0 * sc[3] * x353 +
    50000000.0 * sc[4] * x375 + 26480000.0 * sc[7] * x375 -
    26480000.0 * sc[9] * x313 - 1204.0 * x10 + 1204.0 * x1225 + x1227 + x279 +
    x375 * x430 + x375 * x432 + x375 * x478 +
    (-14000000.0 * sc[10] * x66 - 73400000.0 * sc[1] * x122 -
     30000000.0 * sc[2] * x122 - 15000000.0 * sc[2] * x66 -
     40000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 -
     26480000.0 * sc[7] * x122 - x122 * x430 - x122 * x432 - x122 * x478) *
      (-x495 + x501);
  J[135] =
    -14000000.0 * sc[10] * x166 + 14000000.0 * sc[10] * x96 -
    14000000.0 * sc[11] * x269 - sc[2] * x1697 * x17 -
    40000000.0 * sc[3] * x166 + 40000000.0 * sc[3] * x96 -
    30000000.0 * sc[4] * x288 + 50000000.0 * sc[4] * x382 -
    12000000.0 * sc[5] * x247 - 50000000.0 * sc[5] * x295 - sc[6] * x104 -
    sc[6] * x2046 + 26480000.0 * sc[7] * x382 - 26480000.0 * sc[8] * x313 -
    903.0 * x10 + x1019 + 903.0 * x1225 - x1236 * x264 - x1550 - x1759 +
    x382 * x478 + x405 +
    (-14000000.0 * sc[10] * x66 - 73400000.0 * sc[1] * x122 -
     30000000.0 * sc[2] * x122 - 15000000.0 * sc[2] * x66 -
     40000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 -
     26480000.0 * sc[7] * x122 - x122 * x430 - x122 * x432 - x122 * x478) *
      (x133 - x136);
  J[149] =
    refC * x1697 * x452 - 14000000.0 * sc[10] * x356 +
    14000000.0 * sc[10] * x54 + sc[1] * x1253 + 73400000.0 * sc[1] * x139 +
    30000000.0 * sc[2] * x139 + sc[2] * x1690 - 15000000.0 * sc[2] * x356 +
    15000000.0 * sc[2] * x54 - 40000000.0 * sc[3] * x356 +
    40000000.0 * sc[3] * x54 + 50000000.0 * sc[4] * x139 + sc[4] * x2004 +
    26480000.0 * sc[7] * x139 - 2107.0 * x10 + 2107.0 * x1225 + x1227 +
    x139 * x430 + x139 * x432 + x139 * x478 + x279 + 14000000.0 * x52 +
    (-14000000.0 * sc[10] * x66 - 73400000.0 * sc[1] * x122 -
     30000000.0 * sc[2] * x122 - 15000000.0 * sc[2] * x66 -
     40000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 -
     26480000.0 * sc[7] * x122 - x122 * x430 - x122 * x432 - x122 * x478) *
      (x150 - x172);
  J[163] =
    14000000.0 * sc[10] * x182 + 73400000.0 * sc[1] * x358 +
    15000000.0 * sc[2] * x182 + 30000000.0 * sc[2] * x358 +
    40000000.0 * sc[3] * x182 + 50000000.0 * sc[4] * x358 +
    26480000.0 * sc[7] * x358 - 14000000.0 * sc[9] * x269 +
    5070000000000000.0 * x198 * x823 + x2245 + x2246 + x358 * x430 +
    x358 * x432 + x358 * x478 +
    (-14000000.0 * sc[10] * x66 - 73400000.0 * sc[1] * x122 -
     30000000.0 * sc[2] * x122 - 15000000.0 * sc[2] * x66 -
     40000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 -
     26480000.0 * sc[7] * x122 - x122 * x430 - x122 * x432 - x122 * x478) *
      (-x176 + x191);
  J[177] =
    -14000000.0 * sc[10] * x204 + 14000000.0 * sc[10] * x55 +
    73400000.0 * sc[1] * x117 + 30000000.0 * sc[2] * x117 -
    15000000.0 * sc[2] * x204 + 15000000.0 * sc[2] * x55 -
    40000000.0 * sc[3] * x204 + 40000000.0 * sc[3] * x55 +
    50000000.0 * sc[4] * x117 + 26480000.0 * sc[7] * x117 + x117 * x430 +
    x117 * x432 + x117 * x478 + x2227 +
    (-14000000.0 * sc[10] * x66 - 73400000.0 * sc[1] * x122 -
     30000000.0 * sc[2] * x122 - 15000000.0 * sc[2] * x66 -
     40000000.0 * sc[3] * x66 - 50000000.0 * sc[4] * x122 -
     26480000.0 * sc[7] * x122 - x122 * x430 - x122 * x432 - x122 * x478) *
      (-x170 + x187);
  J[10] =
    14000000.0 * sc[10] * x16 - 14000000.0 * sc[10] * x214 +
    30000000.0 * sc[2] * x140 + 1204.0 * x10 - 1204.0 * x1225 +
    (14000000.0 * sc[10] * x66 - 30000000.0 * sc[2] * x122) * (-x343 + x377);
  J[24] =
    -sc[10] * x1253 + 14000000.0 * sc[10] * x216 - 14000000.0 * sc[10] * x24 -
    30000000.0 * sc[10] * x308 + 30000000.0 * sc[2] * x208 + x2269 +
    (14000000.0 * sc[10] * x66 - 30000000.0 * sc[2] * x122) * (x144 - x393);
  J[38] =
    -sc[10] * x1690 + 14000000.0 * sc[10] * x218 - 14000000.0 * sc[10] * x220 +
    sc[9] * x1697 * x17 + x1356 + x2269 +
    (14000000.0 * sc[10] * x66 - 30000000.0 * sc[2] * x122) * (-x412 + x420);
  J[52] =
    14000000.0 * sc[10] * x293 - 14000000.0 * sc[10] * x300 +
    30000000.0 * sc[2] * x26 + 3612.0 * x10 - 3612.0 * x1225 + x1717 +
    (14000000.0 * sc[10] * x66 - 30000000.0 * sc[2] * x122) * (-x426 + x431);
  J[66] =
    -14000000.0 * sc[10] * x155 - sc[10] * x2004 + 14000000.0 * sc[10] * x342 +
    30000000.0 * sc[2] * x366 + x1393 + x2269 +
    (14000000.0 * sc[10] * x66 - 30000000.0 * sc[2] * x122) * (-x437 + x76);
  J[80] =
    14000000.0 * sc[10] * x345 - 14000000.0 * sc[10] * x346 +
    30000000.0 * sc[2] * x373 + 3612.0 * x10 - 3612.0 * x1225 +
    (14000000.0 * sc[10] * x66 - 30000000.0 * sc[2] * x122) * (x449 - x462);
  J[94] =
    14000000.0 * sc[10] * x348 - 14000000.0 * sc[10] * x480 +
    30000000.0 * sc[2] * x305 + sc[9] * x2046 + x2269 +
    (14000000.0 * sc[10] * x66 - 30000000.0 * sc[2] * x122) * (-x472 + x481);
  J[108] =
    14000000.0 * sc[10] * x348 - 14000000.0 * sc[10] * x489 +
    30000000.0 * sc[2] * x374 + x2269 +
    (14000000.0 * sc[10] * x66 - 30000000.0 * sc[2] * x122) * (x336 - x484);
  J[122] =
    14000000.0 * sc[10] * x349 - 14000000.0 * sc[10] * x353 +
    30000000.0 * sc[2] * x375 + 1204.0 * x10 - 1204.0 * x1225 +
    (14000000.0 * sc[10] * x66 - 30000000.0 * sc[2] * x122) * (-x495 + x501);
  J[136] =
    14000000.0 * sc[10] * x166 - 14000000.0 * sc[10] * x96 +
    14000000.0 * sc[11] * x269 + sc[2] * x1697 * x17 +
    30000000.0 * sc[2] * x382 + sc[6] * x2046 + 903.0 * x10 - 903.0 * x1225 +
    x1550 + x1759 +
    (14000000.0 * sc[10] * x66 - 30000000.0 * sc[2] * x122) * (x133 - x136);
  J[150] =
    -refC * x1697 * x452 + 14000000.0 * sc[10] * x356 -
    14000000.0 * sc[10] * x54 - sc[1] * x1253 - 30000000.0 * sc[1] * x308 +
    30000000.0 * sc[2] * x139 - sc[2] * x1690 - sc[4] * x2004 + 2107.0 * x10 -
    2107.0 * x1225 - 14000000.0 * x52 +
    (14000000.0 * sc[10] * x66 - 30000000.0 * sc[2] * x122) * (x150 - x172);
  J[164] =
    -14000000.0 * sc[10] * x182 + 14000000.0 * sc[10] * x348 +
    30000000.0 * sc[2] * x358 + 14000000.0 * sc[9] * x269 + x2269 +
    (14000000.0 * sc[10] * x66 - 30000000.0 * sc[2] * x122) * (-x176 + x191);
  J[178] =
    14000000.0 * sc[10] * x204 - 14000000.0 * sc[10] * x55 +
    30000000.0 * sc[2] * x117 + x2269 +
    (14000000.0 * sc[10] * x66 - 30000000.0 * sc[2] * x122) * (-x170 + x187);
  J[11] =
    -14000000.0 * sc[10] * x16 + 14000000.0 * sc[10] * x214 -
    20000000.0 * sc[11] * x229 + 20000000.0 * sc[1] * x316 +
    10000000.0 * sc[2] * x316 + 5000000.0 * sc[4] * x316 -
    20000000.0 * sc[6] * x343 + 20000000.0 * sc[6] * x377 + sc[9] * x821 +
    x1174 + x125 * x140 + x132 * x140 + x140 * x418 + x140 * x465 +
    x140 * x470 + x316 * x492 + x453 +
    (-14000000.0 * sc[10] * x66 - 30000000.0 * sc[4] * x66 - x122 * x125 -
     x122 * x132 - x122 * x370 - x122 * x418 - x122 * x465 - x122 * x470) *
      (-x343 + x377) +
    (-20000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 -
     5000000.0 * sc[4] * x43 - x43 * x455 - x43 * x492) *
      (-x16 + x214 + (-x66) * (-x343 + x377));
  J[25] =
    -14000000.0 * sc[10] * x216 + 14000000.0 * sc[10] * x24 +
    20000000.0 * sc[1] * x238 + 10000000.0 * sc[2] * x238 +
    5000000.0 * sc[4] * x238 + 20000000.0 * sc[6] * x144 -
    20000000.0 * sc[6] * x393 + x125 * x208 + x1299 + x1311 + x132 * x208 +
    x1323 + x208 * x418 + x208 * x465 + x208 * x470 + x238 * x492 -
    20000000.0 * x244 + 1350000000000.0 * x411 * x59 * x7 - 20000000.0 * x898 +
    (-14000000.0 * sc[10] * x66 - 30000000.0 * sc[4] * x66 - x122 * x125 -
     x122 * x132 - x122 * x370 - x122 * x418 - x122 * x465 - x122 * x470) *
      (x144 - x393) +
    (-20000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 -
     5000000.0 * sc[4] * x43 - x43 * x455 - x43 * x492) *
      (-x216 + x24 + (-x66) * (x144 - x393));
  J[39] =
    -14000000.0 * sc[10] * x218 + 14000000.0 * sc[10] * x220 - sc[11] * x1713 +
    20000000.0 * sc[1] * x388 + 5000000.0 * sc[4] * x388 + x125 * x277 + x1311 +
    x1323 + x1365 + x1979 + x277 * x418 + x277 * x465 + x277 * x470 +
    x388 * x492 +
    (-14000000.0 * sc[10] * x66 - 30000000.0 * sc[4] * x66 - x122 * x125 -
     x122 * x132 - x122 * x370 - x122 * x418 - x122 * x465 - x122 * x470) *
      (-x412 + x420) +
    (-20000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 -
     5000000.0 * sc[4] * x43 - x43 * x455 - x43 * x492) *
      (-x218 + x220 + (-x66) * (-x412 + x420));
  J[53] =
    -14000000.0 * sc[10] * x293 + 14000000.0 * sc[10] * x300 - sc[11] * x1834 +
    20000000.0 * sc[1] * x389 + 5000000.0 * sc[4] * x389 +
    18000000.0 * x1151 * exp(-452.89499922424801 * invT) + x125 * x26 + x1311 +
    x1323 + x1391 + x1990 + x26 * x418 + x26 * x465 + x26 * x470 + x389 * x492 +
    (-14000000.0 * sc[10] * x66 - 30000000.0 * sc[4] * x66 - x122 * x125 -
     x122 * x132 - x122 * x370 - x122 * x418 - x122 * x465 - x122 * x470) *
      (-x426 + x431) +
    (-20000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 -
     5000000.0 * sc[4] * x43 - x43 * x455 - x43 * x492) *
      (-x293 + x300 + (-x66) * (-x426 + x431));
  J[67] =
    14000000.0 * sc[10] * x155 - 14000000.0 * sc[10] * x342 +
    20000000.0 * sc[1] * x391 + 5000000.0 * sc[4] * x391 + x125 * x366 + x1311 +
    x1323 + x1420 + x2022 - 5000000.0 * x244 + x366 * x418 + x366 * x465 +
    x366 * x470 + x391 * x492 + x460 * x59 - 5000000.0 * x898 +
    (-14000000.0 * sc[10] * x66 - 30000000.0 * sc[4] * x66 - x122 * x125 -
     x122 * x132 - x122 * x370 - x122 * x418 - x122 * x465 - x122 * x470) *
      (-x437 + x76) +
    (-20000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 -
     5000000.0 * sc[4] * x43 - x43 * x455 - x43 * x492) *
      (x155 - x342 + (-x66) * (-x437 + x76));
  J[81] =
    -14000000.0 * sc[10] * x345 + 14000000.0 * sc[10] * x346 -
    5000000.0 * sc[11] * x240 + 8100000000000.0 * sc[1] * x411 * x59 +
    20000000.0 * sc[1] * x85 + 5000000.0 * sc[4] * x85 +
    1.0032110091743101e+19 * x1166 * x1168 -
    1.0032110091743101e+19 * x1166 * x404 + x1179 * x1428 + x125 * x373 -
    x1428 * x88 + x1477 + x2042 - x211 * (1.68 * x278 + 12.0 * x387) -
    3.042e+16 * x298 * x823 - 8100000000000.0 * x298 * x83 +
    3.5867302325581401e+30 * x339 * x376 -
    3.5867302325581401e+30 * x339 * x830 + x373 * x418 + x373 * x465 +
    x373 * x470 + x492 * x85 + x827 * (1.68 * x278 + 12.0 * x387) +
    3.042e+16 * x834 +
    (-14000000.0 * sc[10] * x66 - 30000000.0 * sc[4] * x66 - x122 * x125 -
     x122 * x132 - x122 * x370 - x122 * x418 - x122 * x465 - x122 * x470) *
      (x449 - x462) +
    (-20000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 -
     5000000.0 * sc[4] * x43 - x43 * x455 - x43 * x492) *
      (-x345 + x346 + (-x66) * (x449 - x462));
  J[95] =
    14000000.0 * sc[10] * x480 - sc[11] * x1865 + 20000000.0 * sc[1] * x227 +
    5000000.0 * sc[4] * x227 - 30000000.0 * sc[4] * x348 + x125 * x305 + x1311 +
    x1323 + x1503 + x2059 + x2245 + x227 * x492 + x305 * x418 + x305 * x465 +
    x305 * x470 + x469 * x59 +
    (-14000000.0 * sc[10] * x66 - 30000000.0 * sc[4] * x66 - x122 * x125 -
     x122 * x132 - x122 * x370 - x122 * x418 - x122 * x465 - x122 * x470) *
      (-x472 + x481) +
    (-20000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 -
     5000000.0 * sc[4] * x43 - x43 * x455 - x43 * x492) *
      (-x348 + x480 + (-x66) * (-x472 + x481));
  J[109] =
    14000000.0 * sc[10] * x489 - sc[11] * x2191 + 20000000.0 * sc[1] * x403 -
    30000000.0 * sc[4] * x348 + 5000000.0 * sc[4] * x403 + x125 * x374 + x1311 +
    x1323 + x1524 + x2067 + x2245 + x374 * x418 + x374 * x465 + x374 * x470 +
    x403 * x492 +
    (-14000000.0 * sc[10] * x66 - 30000000.0 * sc[4] * x66 - x122 * x125 -
     x122 * x132 - x122 * x370 - x122 * x418 - x122 * x465 - x122 * x470) *
      (x336 - x484) +
    (-20000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 -
     5000000.0 * sc[4] * x43 - x43 * x455 - x43 * x492) *
      (-x348 + x489 + (-x66) * (x336 - x484));
  J[123] =
    -14000000.0 * sc[10] * x349 + 14000000.0 * sc[10] * x353 +
    20000000.0 * sc[1] * x201 + 10000000.0 * sc[2] * x201 +
    5000000.0 * sc[4] * x201 - 20000000.0 * sc[6] * x495 +
    20000000.0 * sc[6] * x501 + x1174 + x125 * x375 + x132 * x375 + x1548 +
    x201 * x492 + x375 * x418 + x375 * x465 + x375 * x470 + x59 * x69 +
    (-14000000.0 * sc[10] * x66 - 30000000.0 * sc[4] * x66 - x122 * x125 -
     x122 * x132 - x122 * x370 - x122 * x418 - x122 * x465 - x122 * x470) *
      (-x495 + x501) +
    (-20000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 -
     5000000.0 * sc[4] * x43 - x43 * x455 - x43 * x492) *
      (-x349 + x353 + (-x66) * (-x495 + x501));
  J[137] =
    sc[0] * x821 - 14000000.0 * sc[10] * x166 + 14000000.0 * sc[10] * x96 -
    14000000.0 * sc[11] * x269 + 20000000.0 * sc[1] * x203 +
    2025000000000.0 * sc[1] * x411 * x59 + 10000000.0 * sc[2] * x203 +
    5000000.0 * sc[4] * x203 + 20000000.0 * sc[6] * x133 -
    20000000.0 * sc[6] * x136 + 2.5080275229357798e+18 * x1166 * x1168 -
    2.5080275229357798e+18 * x1166 * x404 + x1179 * x126 + x125 * x382 -
    x126 * x88 + x132 * x382 + x203 * x492 - x211 * (0.42 * x278 + 3.0 * x387) +
    x237 - 7605000000000000.0 * x298 * x823 - 2025000000000.0 * x298 * x83 +
    8.9668255813953501e+29 * x339 * x376 -
    8.9668255813953501e+29 * x339 * x830 + x382 * x418 + x382 * x465 +
    x382 * x470 + x827 * (0.42 * x278 + 3.0 * x387) +
    7605000000000000.0 * x834 +
    (-14000000.0 * sc[10] * x66 - 30000000.0 * sc[4] * x66 - x122 * x125 -
     x122 * x132 - x122 * x370 - x122 * x418 - x122 * x465 - x122 * x470) *
      (x133 - x136) +
    (-20000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 -
     5000000.0 * sc[4] * x43 - x43 * x455 - x43 * x492) *
      (-x166 + x96 + (-x66) * (x133 - x136));
  J[151] =
    -14000000.0 * sc[10] * x356 + 14000000.0 * sc[10] * x54 +
    20000000.0 * sc[1] * x201 + 10000000.0 * sc[2] * x201 +
    5000000.0 * sc[4] * x201 + 20000000.0 * sc[6] * x150 -
    20000000.0 * sc[6] * x172 + x1148 + x1174 + x125 * x139 + x132 * x139 +
    x139 * x418 + x139 * x465 + x139 * x470 + x201 * x492 + 14000000.0 * x52 +
    (-14000000.0 * sc[10] * x66 - 30000000.0 * sc[4] * x66 - x122 * x125 -
     x122 * x132 - x122 * x370 - x122 * x418 - x122 * x465 - x122 * x470) *
      (x150 - x172) +
    (-20000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 -
     5000000.0 * sc[4] * x43 - x43 * x455 - x43 * x492) *
      (-x356 + x54 + (-x66) * (x150 - x172));
  J[165] =
    -20000000.0 * sc[0] * x229 + 14000000.0 * sc[10] * x182 +
    20000000.0 * sc[1] * x243 - sc[2] * x1713 - sc[3] * x1834 +
    5000000.0 * sc[4] * x243 - 30000000.0 * sc[4] * x348 -
    5000000.0 * sc[5] * x240 - sc[6] * x1865 - sc[7] * x2191 -
    14000000.0 * sc[9] * x269 + x125 * x358 + x1311 + x1323 -
    5070000000000000.0 * x198 * x823 - 1350000000000.0 * x198 * x83 + x2128 +
    x2245 + x243 * x492 + x358 * x418 + x358 * x465 + x358 * x470 + x442 +
    (-14000000.0 * sc[10] * x66 - 30000000.0 * sc[4] * x66 - x122 * x125 -
     x122 * x132 - x122 * x370 - x122 * x418 - x122 * x465 - x122 * x470) *
      (-x176 + x191) +
    (-20000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 -
     5000000.0 * sc[4] * x43 - x43 * x455 - x43 * x492) *
      (x182 - x348 + (-x66) * (-x176 + x191));
  J[179] =
    -14000000.0 * sc[10] * x204 + 14000000.0 * sc[10] * x55 +
    20000000.0 * sc[1] * x34 + 10000000.0 * sc[2] * x34 +
    5000000.0 * sc[4] * x34 - 20000000.0 * sc[6] * x170 +
    20000000.0 * sc[6] * x187 + x1155 + x117 * x125 + x117 * x132 +
    x117 * x418 + x117 * x465 + x117 * x470 + x1323 + x34 * x492 +
    (-14000000.0 * sc[10] * x66 - 30000000.0 * sc[4] * x66 - x122 * x125 -
     x122 * x132 - x122 * x370 - x122 * x418 - x122 * x465 - x122 * x470) *
      (-x170 + x187) +
    (-20000000.0 * sc[1] * x43 - 10000000.0 * sc[2] * x43 -
     5000000.0 * sc[4] * x43 - x43 * x455 - x43 * x492) *
      (-x204 + x55 + (-x66) * (-x170 + x187));
  J[12] = 0;
  J[26] = 0;
  J[40] = 0;
  J[54] = 0;
  J[68] = 0;
  J[82] = 0;
  J[96] = 0;
  J[110] = 0;
  J[124] = 0;
  J[138] = 0;
  J[152] = 0;
  J[166] = 0;
  J[180] = 0;

  for (int k = 0; k < 13; k++) {
    J[182 + k] = (wdot_pert1[k] - wdot[k]) / (pertT);
  }
  amrex::Real c_R[13], dcRdT[13], e_RT[13];
  amrex::Real* eh_RT;
  if (consP == 1) {
    cp_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    speciesInternalEnergy(e_RT, tc);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 13; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[182 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 13; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 13; ++m) {
      dehmixdc += eh_RT[m] * J[k * 14 + m];
    }
    J[k * 14 + 13] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[195] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
#else
  amrex::Abort();
#endif
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT(
  amrex::Real* J,
  const amrex::Real* sc,
  const amrex::Real* Tp,
  const int* consP)
{
  amrex::Real c[13];

  for (int k = 0; k < 13; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian(J, c, *Tp, *consP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 13; k++) {
    J[182 + k] *= 1.e-6;
    J[k * 14 + 13] *= 1.e6;
  }
}

// Transport function declarations

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENIMC(int* LENIMC)
{
  *LENIMC = 54;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENRMC(int* LENRMC)
{
  *LENRMC = 3666;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNO(int* NO)
{
  *NO = 4;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKK(int* KK)
{
  *KK = 13;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLITE(int* NLITE)
{
  *NLITE = 2;
}

// Patm in ergs/cm3
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPATM(amrex::Real* PATM)
{
  *PATM = 0.1013250000000000E+07;
}

// the molecular weights in g/mol
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetWT(amrex::Real* WT)
{
  WT[0] = 2.01600000E+00;
  WT[1] = 1.00800000E+00;
  WT[2] = 1.59990000E+01;
  WT[3] = 3.19980000E+01;
  WT[4] = 1.70070000E+01;
  WT[5] = 1.80150000E+01;
  WT[6] = 3.30060000E+01;
  WT[7] = 1.50350000E+01;
  WT[8] = 1.60430000E+01;
  WT[9] = 2.80100000E+01;
  WT[10] = 4.40090000E+01;
  WT[11] = 3.00260000E+01;
  WT[12] = 2.80140000E+01;
}

// the lennard-jones potential well depth eps/kb in K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetEPS(amrex::Real* EPS)
{
  EPS[0] = 3.80000000E+01;
  EPS[1] = 1.45000000E+02;
  EPS[2] = 8.00000000E+01;
  EPS[3] = 1.07400000E+02;
  EPS[4] = 8.00000000E+01;
  EPS[5] = 5.72400000E+02;
  EPS[6] = 1.07400000E+02;
  EPS[7] = 1.44000000E+02;
  EPS[8] = 1.41400000E+02;
  EPS[9] = 9.81000000E+01;
  EPS[10] = 2.44000000E+02;
  EPS[11] = 4.98000000E+02;
  EPS[12] = 9.75300000E+01;
}

// the lennard-jones collision diameter in Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetSIG(amrex::Real* SIG)
{
  SIG[0] = 2.92000000E+00;
  SIG[1] = 2.05000000E+00;
  SIG[2] = 2.75000000E+00;
  SIG[3] = 3.45800000E+00;
  SIG[4] = 2.75000000E+00;
  SIG[5] = 2.60500000E+00;
  SIG[6] = 3.45800000E+00;
  SIG[7] = 3.80000000E+00;
  SIG[8] = 3.74600000E+00;
  SIG[9] = 3.65000000E+00;
  SIG[10] = 3.76300000E+00;
  SIG[11] = 3.59000000E+00;
  SIG[12] = 3.62100000E+00;
}

// the dipole moment in Debye
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetDIP(amrex::Real* DIP)
{
  DIP[0] = 0.00000000E+00;
  DIP[1] = 0.00000000E+00;
  DIP[2] = 0.00000000E+00;
  DIP[3] = 0.00000000E+00;
  DIP[4] = 0.00000000E+00;
  DIP[5] = 1.84400000E+00;
  DIP[6] = 0.00000000E+00;
  DIP[7] = 0.00000000E+00;
  DIP[8] = 0.00000000E+00;
  DIP[9] = 0.00000000E+00;
  DIP[10] = 0.00000000E+00;
  DIP[11] = 0.00000000E+00;
  DIP[12] = 0.00000000E+00;
}

// the polarizability in cubic Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPOL(amrex::Real* POL)
{
  POL[0] = 7.90000000E-01;
  POL[1] = 0.00000000E+00;
  POL[2] = 0.00000000E+00;
  POL[3] = 1.60000000E+00;
  POL[4] = 0.00000000E+00;
  POL[5] = 0.00000000E+00;
  POL[6] = 0.00000000E+00;
  POL[7] = 0.00000000E+00;
  POL[8] = 2.60000000E+00;
  POL[9] = 1.95000000E+00;
  POL[10] = 2.65000000E+00;
  POL[11] = 0.00000000E+00;
  POL[12] = 1.76000000E+00;
}

// the rotational relaxation collision number at 298 K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetZROT(amrex::Real* ZROT)
{
  ZROT[0] = 2.80000000E+02;
  ZROT[1] = 0.00000000E+00;
  ZROT[2] = 0.00000000E+00;
  ZROT[3] = 3.80000000E+00;
  ZROT[4] = 0.00000000E+00;
  ZROT[5] = 4.00000000E+00;
  ZROT[6] = 1.00000000E+00;
  ZROT[7] = 0.00000000E+00;
  ZROT[8] = 1.30000000E+01;
  ZROT[9] = 1.80000000E+00;
  ZROT[10] = 2.10000000E+00;
  ZROT[11] = 2.00000000E+00;
  ZROT[12] = 4.00000000E+00;
}

// 0: monoatomic, 1: linear, 2: nonlinear
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLIN(int* NLIN)
{
  NLIN[0] = 1;
  NLIN[1] = 0;
  NLIN[2] = 0;
  NLIN[3] = 1;
  NLIN[4] = 1;
  NLIN[5] = 2;
  NLIN[6] = 2;
  NLIN[7] = 1;
  NLIN[8] = 2;
  NLIN[9] = 1;
  NLIN[10] = 1;
  NLIN[11] = 2;
  NLIN[12] = 1;
}

// Poly fits for the viscosities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFETA(amrex::Real* COFETA)
{
  COFETA[0] = -1.37549291E+01;
  COFETA[1] = 9.65530587E-01;
  COFETA[2] = -4.45720114E-02;
  COFETA[3] = 2.05871810E-03;
  COFETA[4] = -1.98744352E+01;
  COFETA[5] = 3.41660514E+00;
  COFETA[6] = -3.63206306E-01;
  COFETA[7] = 1.58671021E-02;
  COFETA[8] = -1.48001711E+01;
  COFETA[9] = 1.79491990E+00;
  COFETA[10] = -1.54008440E-01;
  COFETA[11] = 6.86719439E-03;
  COFETA[12] = -1.68118998E+01;
  COFETA[13] = 2.52362554E+00;
  COFETA[14] = -2.49309128E-01;
  COFETA[15] = 1.10211025E-02;
  COFETA[16] = -1.47696217E+01;
  COFETA[17] = 1.79491990E+00;
  COFETA[18] = -1.54008440E-01;
  COFETA[19] = 6.86719439E-03;
  COFETA[20] = -1.17770995E+01;
  COFETA[21] = -8.26744826E-01;
  COFETA[22] = 3.39009392E-01;
  COFETA[23] = -2.00674472E-02;
  COFETA[24] = -1.67963918E+01;
  COFETA[25] = 2.52362554E+00;
  COFETA[26] = -2.49309128E-01;
  COFETA[27] = 1.10211025E-02;
  COFETA[28] = -1.97154229E+01;
  COFETA[29] = 3.40193237E+00;
  COFETA[30] = -3.61470464E-01;
  COFETA[31] = 1.57990760E-02;
  COFETA[32] = -1.95453436E+01;
  COFETA[33] = 3.36385478E+00;
  COFETA[34] = -3.56948469E-01;
  COFETA[35] = 1.56210922E-02;
  COFETA[36] = -1.63031343E+01;
  COFETA[37] = 2.26143219E+00;
  COFETA[38] = -2.15114671E-01;
  COFETA[39] = 9.53461976E-03;
  COFETA[40] = -2.36749638E+01;
  COFETA[41] = 4.99775518E+00;
  COFETA[42] = -5.52687718E-01;
  COFETA[43] = 2.34353338E-02;
  COFETA[44] = -2.11136150E+01;
  COFETA[45] = 3.26961843E+00;
  COFETA[46] = -2.51355092E-01;
  COFETA[47] = 7.35605058E-03;
  COFETA[48] = -1.62526676E+01;
  COFETA[49] = 2.24839597E+00;
  COFETA[50] = -2.13428438E-01;
  COFETA[51] = 9.46192413E-03;
}

// Poly fits for the conductivities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFLAM(amrex::Real* COFLAM)
{
  COFLAM[0] = 1.15898853E+01;
  COFLAM[1] = -1.52427526E+00;
  COFLAM[2] = 2.72840485E-01;
  COFLAM[3] = -1.03392506E-02;
  COFLAM[4] = -3.24554543E-01;
  COFLAM[5] = 3.41660514E+00;
  COFLAM[6] = -3.63206306E-01;
  COFLAM[7] = 1.58671021E-02;
  COFLAM[8] = 1.98515155E+00;
  COFLAM[9] = 1.79491990E+00;
  COFLAM[10] = -1.54008440E-01;
  COFLAM[11] = 6.86719439E-03;
  COFLAM[12] = -3.01283106E+00;
  COFLAM[13] = 3.37554996E+00;
  COFLAM[14] = -3.43353130E-01;
  COFLAM[15] = 1.51043449E-02;
  COFLAM[16] = 1.53490842E+01;
  COFLAM[17] = -3.77957911E+00;
  COFLAM[18] = 6.13516199E-01;
  COFLAM[19] = -2.72295607E-02;
  COFLAM[20] = 2.28195672E+01;
  COFLAM[21] = -8.72278727E+00;
  COFLAM[22] = 1.49300458E+00;
  COFLAM[23] = -7.41523911E-02;
  COFLAM[24] = 5.56033781E-01;
  COFLAM[25] = 1.59073629E+00;
  COFLAM[26] = -5.28054537E-02;
  COFLAM[27] = 4.07605156E-04;
  COFLAM[28] = 1.20629294E+01;
  COFLAM[29] = -3.78115762E+00;
  COFLAM[30] = 7.80383737E-01;
  COFLAM[31] = -4.14880733E-02;
  COFLAM[32] = 8.43904098E+00;
  COFLAM[33] = -2.78020359E+00;
  COFLAM[34] = 7.09313628E-01;
  COFLAM[35] = -4.04300952E-02;
  COFLAM[36] = 9.92460061E+00;
  COFLAM[37] = -2.28317864E+00;
  COFLAM[38] = 4.73113319E-01;
  COFLAM[39] = -2.40056449E-02;
  COFLAM[40] = -1.24047472E+01;
  COFLAM[41] = 6.34783072E+00;
  COFLAM[42] = -6.37857831E-01;
  COFLAM[43] = 2.37613806E-02;
  COFLAM[44] = 9.52224700E-02;
  COFLAM[45] = -1.75633398E-02;
  COFLAM[46] = 3.86704385E-01;
  COFLAM[47] = -2.84751875E-02;
  COFLAM[48] = 1.15506870E+01;
  COFLAM[49] = -2.91452034E+00;
  COFLAM[50] = 5.55043078E-01;
  COFLAM[51] = -2.75172223E-02;
}

// Poly fits for the diffusion coefficients, dim NO*KK*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFD(amrex::Real* COFD)
{
  COFD[0] = -1.02395385E+01;
  COFD[1] = 2.15403244E+00;
  COFD[2] = -6.97480266E-02;
  COFD[3] = 3.23666871E-03;
  COFD[4] = -1.11808845E+01;
  COFD[5] = 2.66936727E+00;
  COFD[6] = -1.34411514E-01;
  COFD[7] = 5.92957488E-03;
  COFD[8] = -1.06250314E+01;
  COFD[9] = 2.15849701E+00;
  COFD[10] = -6.53886401E-02;
  COFD[11] = 2.81453370E-03;
  COFD[12] = -1.15797897E+01;
  COFD[13] = 2.43235504E+00;
  COFD[14] = -1.02890179E-01;
  COFD[15] = 4.52903603E-03;
  COFD[16] = -1.06283588E+01;
  COFD[17] = 2.15849701E+00;
  COFD[18] = -6.53886401E-02;
  COFD[19] = 2.81453370E-03;
  COFD[20] = -1.68759075E+01;
  COFD[21] = 4.49460341E+00;
  COFD[22] = -3.64766179E-01;
  COFD[23] = 1.56457173E-02;
  COFD[24] = -1.15806955E+01;
  COFD[25] = 2.43235504E+00;
  COFD[26] = -1.02890179E-01;
  COFD[27] = 4.52903603E-03;
  COFD[28] = -1.22583533E+01;
  COFD[29] = 2.66488613E+00;
  COFD[30] = -1.33839930E-01;
  COFD[31] = 5.90524087E-03;
  COFD[32] = -1.22114409E+01;
  COFD[33] = 2.65215786E+00;
  COFD[34] = -1.32206766E-01;
  COFD[35] = 5.83532580E-03;
  COFD[36] = -1.13541221E+01;
  COFD[37] = 2.31999438E+00;
  COFD[38] = -8.75064804E-02;
  COFD[39] = 3.82656365E-03;
  COFD[40] = -1.35545391E+01;
  COFD[41] = 3.13878730E+00;
  COFD[42] = -1.94980335E-01;
  COFD[43] = 8.53744486E-03;
  COFD[44] = -1.57172268E+01;
  COFD[45] = 3.96062263E+00;
  COFD[46] = -2.98964970E-01;
  COFD[47] = 1.29322565E-02;
  COFD[48] = -1.13253618E+01;
  COFD[49] = 2.31195095E+00;
  COFD[50] = -8.63988037E-02;
  COFD[51] = 3.77573452E-03;
  COFD[52] = -1.11808845E+01;
  COFD[53] = 2.66936727E+00;
  COFD[54] = -1.34411514E-01;
  COFD[55] = 5.92957488E-03;
  COFD[56] = -1.43693219E+01;
  COFD[57] = 4.03992999E+00;
  COFD[58] = -3.08044800E-01;
  COFD[59] = 1.32757775E-02;
  COFD[60] = -1.31860264E+01;
  COFD[61] = 3.38003453E+00;
  COFD[62] = -2.25783856E-01;
  COFD[63] = 9.85028660E-03;
  COFD[64] = -1.43713019E+01;
  COFD[65] = 3.70920439E+00;
  COFD[66] = -2.67274113E-01;
  COFD[67] = 1.15967481E-02;
  COFD[68] = -1.31877859E+01;
  COFD[69] = 3.38003453E+00;
  COFD[70] = -2.25783856E-01;
  COFD[71] = 9.85028660E-03;
  COFD[72] = -1.93611201E+01;
  COFD[73] = 5.51579726E+00;
  COFD[74] = -4.76061961E-01;
  COFD[75] = 1.96329391E-02;
  COFD[76] = -1.43717684E+01;
  COFD[77] = 3.70920439E+00;
  COFD[78] = -2.67274113E-01;
  COFD[79] = 1.15967481E-02;
  COFD[80] = -1.53791907E+01;
  COFD[81] = 4.03496578E+00;
  COFD[82] = -3.07489899E-01;
  COFD[83] = 1.32554084E-02;
  COFD[84] = -1.53241298E+01;
  COFD[85] = 4.02249494E+00;
  COFD[86] = -3.06112211E-01;
  COFD[87] = 1.32056535E-02;
  COFD[88] = -1.40524219E+01;
  COFD[89] = 3.56261348E+00;
  COFD[90] = -2.48287981E-01;
  COFD[91] = 1.07752947E-02;
  COFD[92] = -1.72994129E+01;
  COFD[93] = 4.71931868E+00;
  COFD[94] = -3.91258152E-01;
  COFD[95] = 1.66866639E-02;
  COFD[96] = -1.95318517E+01;
  COFD[97] = 5.47046983E+00;
  COFD[98] = -4.74577605E-01;
  COFD[99] = 1.97408822E-02;
  COFD[100] = -1.40298991E+01;
  COFD[101] = 3.55837688E+00;
  COFD[102] = -2.47785790E-01;
  COFD[103] = 1.07555332E-02;
  COFD[104] = -1.06250314E+01;
  COFD[105] = 2.15849701E+00;
  COFD[106] = -6.53886401E-02;
  COFD[107] = 2.81453370E-03;
  COFD[108] = -1.31860264E+01;
  COFD[109] = 3.38003453E+00;
  COFD[110] = -2.25783856E-01;
  COFD[111] = 9.85028660E-03;
  COFD[112] = -1.29877255E+01;
  COFD[113] = 2.80841511E+00;
  COFD[114] = -1.52629888E-01;
  COFD[115] = 6.72604927E-03;
  COFD[116] = -1.40864784E+01;
  COFD[117] = 3.07458927E+00;
  COFD[118] = -1.86899591E-01;
  COFD[119] = 8.19829781E-03;
  COFD[120] = -1.30027669E+01;
  COFD[121] = 2.80841511E+00;
  COFD[122] = -1.52629888E-01;
  COFD[123] = 6.72604927E-03;
  COFD[124] = -1.91096700E+01;
  COFD[125] = 5.02608697E+00;
  COFD[126] = -4.26959993E-01;
  COFD[127] = 1.80709910E-02;
  COFD[128] = -1.40915944E+01;
  COFD[129] = 3.07458927E+00;
  COFD[130] = -1.86899591E-01;
  COFD[131] = 8.19829781E-03;
  COFD[132] = -1.48358026E+01;
  COFD[133] = 3.37160686E+00;
  COFD[134] = -2.24698307E-01;
  COFD[135] = 9.80357301E-03;
  COFD[136] = -1.47765660E+01;
  COFD[137] = 3.34934830E+00;
  COFD[138] = -2.21831026E-01;
  COFD[139] = 9.68019791E-03;
  COFD[140] = -1.39007309E+01;
  COFD[141] = 2.99164244E+00;
  COFD[142] = -1.76293106E-01;
  COFD[143] = 7.74575100E-03;
  COFD[144] = -1.67115471E+01;
  COFD[145] = 3.98859394E+00;
  COFD[146] = -3.02316219E-01;
  COFD[147] = 1.30661099E-02;
  COFD[148] = -1.91105534E+01;
  COFD[149] = 4.87977047E+00;
  COFD[150] = -4.10448693E-01;
  COFD[151] = 1.74535827E-02;
  COFD[152] = -1.38756380E+01;
  COFD[153] = 2.98558426E+00;
  COFD[154] = -1.75507216E-01;
  COFD[155] = 7.71173691E-03;
  COFD[156] = -1.15797897E+01;
  COFD[157] = 2.43235504E+00;
  COFD[158] = -1.02890179E-01;
  COFD[159] = 4.52903603E-03;
  COFD[160] = -1.43713019E+01;
  COFD[161] = 3.70920439E+00;
  COFD[162] = -2.67274113E-01;
  COFD[163] = 1.15967481E-02;
  COFD[164] = -1.40864784E+01;
  COFD[165] = 3.07458927E+00;
  COFD[166] = -1.86899591E-01;
  COFD[167] = 8.19829781E-03;
  COFD[168] = -1.53110597E+01;
  COFD[169] = 3.37317428E+00;
  COFD[170] = -2.24900439E-01;
  COFD[171] = 9.81228151E-03;
  COFD[172] = -1.41066358E+01;
  COFD[173] = 3.07458927E+00;
  COFD[174] = -1.86899591E-01;
  COFD[175] = 8.19829781E-03;
  COFD[176] = -2.10639926E+01;
  COFD[177] = 5.50980703E+00;
  COFD[178] = -4.78335492E-01;
  COFD[179] = 1.98515434E-02;
  COFD[180] = -1.53187536E+01;
  COFD[181] = 3.37317428E+00;
  COFD[182] = -2.24900439E-01;
  COFD[183] = 9.81228151E-03;
  COFD[184] = -1.60662884E+01;
  COFD[185] = 3.69744368E+00;
  COFD[186] = -2.65754489E-01;
  COFD[187] = 1.15311681E-02;
  COFD[188] = -1.59878735E+01;
  COFD[189] = 3.66478157E+00;
  COFD[190] = -2.61506432E-01;
  COFD[191] = 1.13466231E-02;
  COFD[192] = -1.50371688E+01;
  COFD[193] = 3.26249588E+00;
  COFD[194] = -2.10658287E-01;
  COFD[195] = 9.20032462E-03;
  COFD[196] = -1.81197250E+01;
  COFD[197] = 4.33684042E+00;
  COFD[198] = -3.44981265E-01;
  COFD[199] = 1.48142449E-02;
  COFD[200] = -2.05196205E+01;
  COFD[201] = 5.21473296E+00;
  COFD[202] = -4.48646311E-01;
  COFD[203] = 1.89013813E-02;
  COFD[204] = -1.50096252E+01;
  COFD[205] = 3.25515933E+00;
  COFD[206] = -2.09710110E-01;
  COFD[207] = 9.15941830E-03;
  COFD[208] = -1.06283588E+01;
  COFD[209] = 2.15849701E+00;
  COFD[210] = -6.53886401E-02;
  COFD[211] = 2.81453370E-03;
  COFD[212] = -1.31877859E+01;
  COFD[213] = 3.38003453E+00;
  COFD[214] = -2.25783856E-01;
  COFD[215] = 9.85028660E-03;
  COFD[216] = -1.30027669E+01;
  COFD[217] = 2.80841511E+00;
  COFD[218] = -1.52629888E-01;
  COFD[219] = 6.72604927E-03;
  COFD[220] = -1.41066358E+01;
  COFD[221] = 3.07458927E+00;
  COFD[222] = -1.86899591E-01;
  COFD[223] = 8.19829781E-03;
  COFD[224] = -1.30182749E+01;
  COFD[225] = 2.80841511E+00;
  COFD[226] = -1.52629888E-01;
  COFD[227] = 6.72604927E-03;
  COFD[228] = -1.91256173E+01;
  COFD[229] = 5.02608697E+00;
  COFD[230] = -4.26959993E-01;
  COFD[231] = 1.80709910E-02;
  COFD[232] = -1.41119635E+01;
  COFD[233] = 3.07458927E+00;
  COFD[234] = -1.86899591E-01;
  COFD[235] = 8.19829781E-03;
  COFD[236] = -1.48503699E+01;
  COFD[237] = 3.37160686E+00;
  COFD[238] = -2.24698307E-01;
  COFD[239] = 9.80357301E-03;
  COFD[240] = -1.47916284E+01;
  COFD[241] = 3.34934830E+00;
  COFD[242] = -2.21831026E-01;
  COFD[243] = 9.68019791E-03;
  COFD[244] = -1.39199573E+01;
  COFD[245] = 2.99164244E+00;
  COFD[246] = -1.76293106E-01;
  COFD[247] = 7.74575100E-03;
  COFD[248] = -1.67337674E+01;
  COFD[249] = 3.98859394E+00;
  COFD[250] = -3.02316219E-01;
  COFD[251] = 1.30661099E-02;
  COFD[252] = -1.91302705E+01;
  COFD[253] = 4.87977047E+00;
  COFD[254] = -4.10448693E-01;
  COFD[255] = 1.74535827E-02;
  COFD[256] = -1.38948654E+01;
  COFD[257] = 2.98558426E+00;
  COFD[258] = -1.75507216E-01;
  COFD[259] = 7.71173691E-03;
  COFD[260] = -1.68759075E+01;
  COFD[261] = 4.49460341E+00;
  COFD[262] = -3.64766179E-01;
  COFD[263] = 1.56457173E-02;
  COFD[264] = -1.93611201E+01;
  COFD[265] = 5.51579726E+00;
  COFD[266] = -4.76061961E-01;
  COFD[267] = 1.96329391E-02;
  COFD[268] = -1.91096700E+01;
  COFD[269] = 5.02608697E+00;
  COFD[270] = -4.26959993E-01;
  COFD[271] = 1.80709910E-02;
  COFD[272] = -2.10639926E+01;
  COFD[273] = 5.50980703E+00;
  COFD[274] = -4.78335492E-01;
  COFD[275] = 1.98515434E-02;
  COFD[276] = -1.91256173E+01;
  COFD[277] = 5.02608697E+00;
  COFD[278] = -4.26959993E-01;
  COFD[279] = 1.80709910E-02;
  COFD[280] = -1.31492509E+01;
  COFD[281] = 1.48004045E+00;
  COFD[282] = 1.60499956E-01;
  COFD[283] = -1.19765871E-02;
  COFD[284] = -2.04177394E+01;
  COFD[285] = 5.31457079E+00;
  COFD[286] = -4.58216496E-01;
  COFD[287] = 1.91825910E-02;
  COFD[288] = -2.10691956E+01;
  COFD[289] = 5.51604369E+00;
  COFD[290] = -4.76337283E-01;
  COFD[291] = 1.96544379E-02;
  COFD[292] = -2.12953626E+01;
  COFD[293] = 5.52385262E+00;
  COFD[294] = -4.69683817E-01;
  COFD[295] = 1.90677254E-02;
  COFD[296] = -2.08943723E+01;
  COFD[297] = 5.44718673E+00;
  COFD[298] = -4.72082974E-01;
  COFD[299] = 1.96531328E-02;
  COFD[300] = -2.12021420E+01;
  COFD[301] = 5.20775027E+00;
  COFD[302] = -4.07348285E-01;
  COFD[303] = 1.55473262E-02;
  COFD[304] = -1.87236049E+01;
  COFD[305] = 4.00967621E+00;
  COFD[306] = -2.21153539E-01;
  COFD[307] = 6.31528745E-03;
  COFD[308] = -2.08123331E+01;
  COFD[309] = 5.42470175E+00;
  COFD[310] = -4.69700438E-01;
  COFD[311] = 1.95706912E-02;
  COFD[312] = -1.15806955E+01;
  COFD[313] = 2.43235504E+00;
  COFD[314] = -1.02890179E-01;
  COFD[315] = 4.52903603E-03;
  COFD[316] = -1.43717684E+01;
  COFD[317] = 3.70920439E+00;
  COFD[318] = -2.67274113E-01;
  COFD[319] = 1.15967481E-02;
  COFD[320] = -1.40915944E+01;
  COFD[321] = 3.07458927E+00;
  COFD[322] = -1.86899591E-01;
  COFD[323] = 8.19829781E-03;
  COFD[324] = -1.53187536E+01;
  COFD[325] = 3.37317428E+00;
  COFD[326] = -2.24900439E-01;
  COFD[327] = 9.81228151E-03;
  COFD[328] = -1.41119635E+01;
  COFD[329] = 3.07458927E+00;
  COFD[330] = -1.86899591E-01;
  COFD[331] = 8.19829781E-03;
  COFD[332] = -2.04177394E+01;
  COFD[333] = 5.31457079E+00;
  COFD[334] = -4.58216496E-01;
  COFD[335] = 1.91825910E-02;
  COFD[336] = -1.53265677E+01;
  COFD[337] = 3.37317428E+00;
  COFD[338] = -2.24900439E-01;
  COFD[339] = 9.81228151E-03;
  COFD[340] = -1.60711937E+01;
  COFD[341] = 3.69744368E+00;
  COFD[342] = -2.65754489E-01;
  COFD[343] = 1.15311681E-02;
  COFD[344] = -1.59929990E+01;
  COFD[345] = 3.66478157E+00;
  COFD[346] = -2.61506432E-01;
  COFD[347] = 1.13466231E-02;
  COFD[348] = -1.50443476E+01;
  COFD[349] = 3.26249588E+00;
  COFD[350] = -2.10658287E-01;
  COFD[351] = 9.20032462E-03;
  COFD[352] = -1.81286456E+01;
  COFD[353] = 4.33684042E+00;
  COFD[354] = -3.44981265E-01;
  COFD[355] = 1.48142449E-02;
  COFD[356] = -2.05270679E+01;
  COFD[357] = 5.21473296E+00;
  COFD[358] = -4.48646311E-01;
  COFD[359] = 1.89013813E-02;
  COFD[360] = -1.50168047E+01;
  COFD[361] = 3.25515933E+00;
  COFD[362] = -2.09710110E-01;
  COFD[363] = 9.15941830E-03;
  COFD[364] = -1.22583533E+01;
  COFD[365] = 2.66488613E+00;
  COFD[366] = -1.33839930E-01;
  COFD[367] = 5.90524087E-03;
  COFD[368] = -1.53791907E+01;
  COFD[369] = 4.03496578E+00;
  COFD[370] = -3.07489899E-01;
  COFD[371] = 1.32554084E-02;
  COFD[372] = -1.48358026E+01;
  COFD[373] = 3.37160686E+00;
  COFD[374] = -2.24698307E-01;
  COFD[375] = 9.80357301E-03;
  COFD[376] = -1.60662884E+01;
  COFD[377] = 3.69744368E+00;
  COFD[378] = -2.65754489E-01;
  COFD[379] = 1.15311681E-02;
  COFD[380] = -1.48503699E+01;
  COFD[381] = 3.37160686E+00;
  COFD[382] = -2.24698307E-01;
  COFD[383] = 9.80357301E-03;
  COFD[384] = -2.10691956E+01;
  COFD[385] = 5.51604369E+00;
  COFD[386] = -4.76337283E-01;
  COFD[387] = 1.96544379E-02;
  COFD[388] = -1.60711937E+01;
  COFD[389] = 3.69744368E+00;
  COFD[390] = -2.65754489E-01;
  COFD[391] = 1.15311681E-02;
  COFD[392] = -1.69251551E+01;
  COFD[393] = 4.03028423E+00;
  COFD[394] = -3.06976249E-01;
  COFD[395] = 1.32370318E-02;
  COFD[396] = -1.68880017E+01;
  COFD[397] = 4.01759713E+00;
  COFD[398] = -3.05560618E-01;
  COFD[399] = 1.31852111E-02;
  COFD[400] = -1.57272832E+01;
  COFD[401] = 3.55756440E+00;
  COFD[402] = -2.47689003E-01;
  COFD[403] = 1.07517019E-02;
  COFD[404] = -1.90110170E+01;
  COFD[405] = 4.70842146E+00;
  COFD[406] = -3.89924637E-01;
  COFD[407] = 1.66320934E-02;
  COFD[408] = -2.12140281E+01;
  COFD[409] = 5.46309033E+00;
  COFD[410] = -4.73777184E-01;
  COFD[411] = 1.97122249E-02;
  COFD[412] = -1.57070757E+01;
  COFD[413] = 3.55327776E+00;
  COFD[414] = -2.47179250E-01;
  COFD[415] = 1.07315653E-02;
  COFD[416] = -1.22114409E+01;
  COFD[417] = 2.65215786E+00;
  COFD[418] = -1.32206766E-01;
  COFD[419] = 5.83532580E-03;
  COFD[420] = -1.53241298E+01;
  COFD[421] = 4.02249494E+00;
  COFD[422] = -3.06112211E-01;
  COFD[423] = 1.32056535E-02;
  COFD[424] = -1.47765660E+01;
  COFD[425] = 3.34934830E+00;
  COFD[426] = -2.21831026E-01;
  COFD[427] = 9.68019791E-03;
  COFD[428] = -1.59878735E+01;
  COFD[429] = 3.66478157E+00;
  COFD[430] = -2.61506432E-01;
  COFD[431] = 1.13466231E-02;
  COFD[432] = -1.47916284E+01;
  COFD[433] = 3.34934830E+00;
  COFD[434] = -2.21831026E-01;
  COFD[435] = 9.68019791E-03;
  COFD[436] = -2.12953626E+01;
  COFD[437] = 5.52385262E+00;
  COFD[438] = -4.69683817E-01;
  COFD[439] = 1.90677254E-02;
  COFD[440] = -1.59929990E+01;
  COFD[441] = 3.66478157E+00;
  COFD[442] = -2.61506432E-01;
  COFD[443] = 1.13466231E-02;
  COFD[444] = -1.68880017E+01;
  COFD[445] = 4.01759713E+00;
  COFD[446] = -3.05560618E-01;
  COFD[447] = 1.31852111E-02;
  COFD[448] = -1.68532873E+01;
  COFD[449] = 4.00572564E+00;
  COFD[450] = -3.04255586E-01;
  COFD[451] = 1.31384083E-02;
  COFD[452] = -1.56953785E+01;
  COFD[453] = 3.54443207E+00;
  COFD[454] = -2.46133003E-01;
  COFD[455] = 1.06905018E-02;
  COFD[456] = -1.89594762E+01;
  COFD[457] = 4.68735220E+00;
  COFD[458] = -3.87449514E-01;
  COFD[459] = 1.65352261E-02;
  COFD[460] = -2.11618589E+01;
  COFD[461] = 5.44451952E+00;
  COFD[462] = -4.71804032E-01;
  COFD[463] = 1.96436657E-02;
  COFD[464] = -1.56756124E+01;
  COFD[465] = 3.54035770E+00;
  COFD[466] = -2.45653442E-01;
  COFD[467] = 1.06717969E-02;
  COFD[468] = -1.13541221E+01;
  COFD[469] = 2.31999438E+00;
  COFD[470] = -8.75064804E-02;
  COFD[471] = 3.82656365E-03;
  COFD[472] = -1.40524219E+01;
  COFD[473] = 3.56261348E+00;
  COFD[474] = -2.48287981E-01;
  COFD[475] = 1.07752947E-02;
  COFD[476] = -1.39007309E+01;
  COFD[477] = 2.99164244E+00;
  COFD[478] = -1.76293106E-01;
  COFD[479] = 7.74575100E-03;
  COFD[480] = -1.50371688E+01;
  COFD[481] = 3.26249588E+00;
  COFD[482] = -2.10658287E-01;
  COFD[483] = 9.20032462E-03;
  COFD[484] = -1.39199573E+01;
  COFD[485] = 2.99164244E+00;
  COFD[486] = -1.76293106E-01;
  COFD[487] = 7.74575100E-03;
  COFD[488] = -2.08943723E+01;
  COFD[489] = 5.44718673E+00;
  COFD[490] = -4.72082974E-01;
  COFD[491] = 1.96531328E-02;
  COFD[492] = -1.50443476E+01;
  COFD[493] = 3.26249588E+00;
  COFD[494] = -2.10658287E-01;
  COFD[495] = 9.20032462E-03;
  COFD[496] = -1.57272832E+01;
  COFD[497] = 3.55756440E+00;
  COFD[498] = -2.47689003E-01;
  COFD[499] = 1.07517019E-02;
  COFD[500] = -1.56953785E+01;
  COFD[501] = 3.54443207E+00;
  COFD[502] = -2.46133003E-01;
  COFD[503] = 1.06905018E-02;
  COFD[504] = -1.48061406E+01;
  COFD[505] = 3.16912473E+00;
  COFD[506] = -1.98792456E-01;
  COFD[507] = 8.69726395E-03;
  COFD[508] = -1.77672912E+01;
  COFD[509] = 4.20234040E+00;
  COFD[510] = -3.28057658E-01;
  COFD[511] = 1.41006192E-02;
  COFD[512] = -2.02444913E+01;
  COFD[513] = 5.11785645E+00;
  COFD[514] = -4.37867828E-01;
  COFD[515] = 1.85047543E-02;
  COFD[516] = -1.47850505E+01;
  COFD[517] = 3.16433919E+00;
  COFD[518] = -1.98191564E-01;
  COFD[519] = 8.67209742E-03;
  COFD[520] = -1.35545391E+01;
  COFD[521] = 3.13878730E+00;
  COFD[522] = -1.94980335E-01;
  COFD[523] = 8.53744486E-03;
  COFD[524] = -1.72994129E+01;
  COFD[525] = 4.71931868E+00;
  COFD[526] = -3.91258152E-01;
  COFD[527] = 1.66866639E-02;
  COFD[528] = -1.67115471E+01;
  COFD[529] = 3.98859394E+00;
  COFD[530] = -3.02316219E-01;
  COFD[531] = 1.30661099E-02;
  COFD[532] = -1.81197250E+01;
  COFD[533] = 4.33684042E+00;
  COFD[534] = -3.44981265E-01;
  COFD[535] = 1.48142449E-02;
  COFD[536] = -1.67337674E+01;
  COFD[537] = 3.98859394E+00;
  COFD[538] = -3.02316219E-01;
  COFD[539] = 1.30661099E-02;
  COFD[540] = -2.12021420E+01;
  COFD[541] = 5.20775027E+00;
  COFD[542] = -4.07348285E-01;
  COFD[543] = 1.55473262E-02;
  COFD[544] = -1.81286456E+01;
  COFD[545] = 4.33684042E+00;
  COFD[546] = -3.44981265E-01;
  COFD[547] = 1.48142449E-02;
  COFD[548] = -1.90110170E+01;
  COFD[549] = 4.70842146E+00;
  COFD[550] = -3.89924637E-01;
  COFD[551] = 1.66320934E-02;
  COFD[552] = -1.89594762E+01;
  COFD[553] = 4.68735220E+00;
  COFD[554] = -3.87449514E-01;
  COFD[555] = 1.65352261E-02;
  COFD[556] = -1.77672912E+01;
  COFD[557] = 4.20234040E+00;
  COFD[558] = -3.28057658E-01;
  COFD[559] = 1.41006192E-02;
  COFD[560] = -2.10907633E+01;
  COFD[561] = 5.29211327E+00;
  COFD[562] = -4.56068366E-01;
  COFD[563] = 1.91195062E-02;
  COFD[564] = -2.20860863E+01;
  COFD[565] = 5.52171573E+00;
  COFD[566] = -4.63284984E-01;
  COFD[567] = 1.85570924E-02;
  COFD[568] = -1.77350630E+01;
  COFD[569] = 4.19328271E+00;
  COFD[570] = -3.26911461E-01;
  COFD[571] = 1.40520357E-02;
  COFD[572] = -1.57172268E+01;
  COFD[573] = 3.96062263E+00;
  COFD[574] = -2.98964970E-01;
  COFD[575] = 1.29322565E-02;
  COFD[576] = -1.95318517E+01;
  COFD[577] = 5.47046983E+00;
  COFD[578] = -4.74577605E-01;
  COFD[579] = 1.97408822E-02;
  COFD[580] = -1.91105534E+01;
  COFD[581] = 4.87977047E+00;
  COFD[582] = -4.10448693E-01;
  COFD[583] = 1.74535827E-02;
  COFD[584] = -2.05196205E+01;
  COFD[585] = 5.21473296E+00;
  COFD[586] = -4.48646311E-01;
  COFD[587] = 1.89013813E-02;
  COFD[588] = -1.91302705E+01;
  COFD[589] = 4.87977047E+00;
  COFD[590] = -4.10448693E-01;
  COFD[591] = 1.74535827E-02;
  COFD[592] = -1.87236049E+01;
  COFD[593] = 4.00967621E+00;
  COFD[594] = -2.21153539E-01;
  COFD[595] = 6.31528745E-03;
  COFD[596] = -2.05270679E+01;
  COFD[597] = 5.21473296E+00;
  COFD[598] = -4.48646311E-01;
  COFD[599] = 1.89013813E-02;
  COFD[600] = -2.12140281E+01;
  COFD[601] = 5.46309033E+00;
  COFD[602] = -4.73777184E-01;
  COFD[603] = 1.97122249E-02;
  COFD[604] = -2.11618589E+01;
  COFD[605] = 5.44451952E+00;
  COFD[606] = -4.71804032E-01;
  COFD[607] = 1.96436657E-02;
  COFD[608] = -2.02444913E+01;
  COFD[609] = 5.11785645E+00;
  COFD[610] = -4.37867828E-01;
  COFD[611] = 1.85047543E-02;
  COFD[612] = -2.20860863E+01;
  COFD[613] = 5.52171573E+00;
  COFD[614] = -4.63284984E-01;
  COFD[615] = 1.85570924E-02;
  COFD[616] = -1.99154422E+01;
  COFD[617] = 4.38041133E+00;
  COFD[618] = -2.77538214E-01;
  COFD[619] = 9.06748822E-03;
  COFD[620] = -2.02136057E+01;
  COFD[621] = 5.10993120E+00;
  COFD[622] = -4.36931630E-01;
  COFD[623] = 1.84677592E-02;
  COFD[624] = -1.13253618E+01;
  COFD[625] = 2.31195095E+00;
  COFD[626] = -8.63988037E-02;
  COFD[627] = 3.77573452E-03;
  COFD[628] = -1.40298991E+01;
  COFD[629] = 3.55837688E+00;
  COFD[630] = -2.47785790E-01;
  COFD[631] = 1.07555332E-02;
  COFD[632] = -1.38756380E+01;
  COFD[633] = 2.98558426E+00;
  COFD[634] = -1.75507216E-01;
  COFD[635] = 7.71173691E-03;
  COFD[636] = -1.50096252E+01;
  COFD[637] = 3.25515933E+00;
  COFD[638] = -2.09710110E-01;
  COFD[639] = 9.15941830E-03;
  COFD[640] = -1.38948654E+01;
  COFD[641] = 2.98558426E+00;
  COFD[642] = -1.75507216E-01;
  COFD[643] = 7.71173691E-03;
  COFD[644] = -2.08123331E+01;
  COFD[645] = 5.42470175E+00;
  COFD[646] = -4.69700438E-01;
  COFD[647] = 1.95706912E-02;
  COFD[648] = -1.50168047E+01;
  COFD[649] = 3.25515933E+00;
  COFD[650] = -2.09710110E-01;
  COFD[651] = 9.15941830E-03;
  COFD[652] = -1.57070757E+01;
  COFD[653] = 3.55327776E+00;
  COFD[654] = -2.47179250E-01;
  COFD[655] = 1.07315653E-02;
  COFD[656] = -1.56756124E+01;
  COFD[657] = 3.54035770E+00;
  COFD[658] = -2.45653442E-01;
  COFD[659] = 1.06717969E-02;
  COFD[660] = -1.47850505E+01;
  COFD[661] = 3.16433919E+00;
  COFD[662] = -1.98191564E-01;
  COFD[663] = 8.67209742E-03;
  COFD[664] = -1.77350630E+01;
  COFD[665] = 4.19328271E+00;
  COFD[666] = -3.26911461E-01;
  COFD[667] = 1.40520357E-02;
  COFD[668] = -2.02136057E+01;
  COFD[669] = 5.10993120E+00;
  COFD[670] = -4.36931630E-01;
  COFD[671] = 1.84677592E-02;
  COFD[672] = -1.47639411E+01;
  COFD[673] = 3.15955654E+00;
  COFD[674] = -1.97590757E-01;
  COFD[675] = 8.64692156E-03;
}

// List of specs with small weight, dim NLITE
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKTDIF(int* KTDIF)
{
  KTDIF[0] = 0;
  KTDIF[1] = 1;
}

// Poly fits for thermal diff ratios, dim NO*NLITE*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFTD(amrex::Real* COFTD)
{
  COFTD[0] = 0.00000000E+00;
  COFTD[1] = 0.00000000E+00;
  COFTD[2] = 0.00000000E+00;
  COFTD[3] = 0.00000000E+00;
  COFTD[4] = -1.52534742E-01;
  COFTD[5] = -5.46404022E-05;
  COFTD[6] = 2.93412470E-08;
  COFTD[7] = -4.87091914E-12;
  COFTD[8] = 4.15577509E-01;
  COFTD[9] = 1.09736860E-05;
  COFTD[10] = -3.96016410E-09;
  COFTD[11] = 1.14412838E-12;
  COFTD[12] = 4.42736017E-01;
  COFTD[13] = 7.11765887E-05;
  COFTD[14] = -3.84765396E-08;
  COFTD[15] = 6.86318682E-12;
  COFTD[16] = 4.21927217E-01;
  COFTD[17] = 1.11413555E-05;
  COFTD[18] = -4.02067239E-09;
  COFTD[19] = 1.16160979E-12;
  COFTD[20] = 6.02021050E-02;
  COFTD[21] = 5.61555733E-04;
  COFTD[22] = -2.55370065E-07;
  COFTD[23] = 3.63385926E-11;
  COFTD[24] = 4.44449675E-01;
  COFTD[25] = 7.14520855E-05;
  COFTD[26] = -3.86254673E-08;
  COFTD[27] = 6.88975155E-12;
  COFTD[28] = 3.50272421E-01;
  COFTD[29] = 1.23583915E-04;
  COFTD[30] = -6.63969060E-08;
  COFTD[31] = 1.10354999E-11;
  COFTD[32] = 3.58655012E-01;
  COFTD[33] = 1.21524029E-04;
  COFTD[34] = -6.53752231E-08;
  COFTD[35] = 1.09001717E-11;
  COFTD[36] = 4.44650439E-01;
  COFTD[37] = 5.06628083E-05;
  COFTD[38] = -2.69818971E-08;
  COFTD[39] = 5.01286176E-12;
  COFTD[40] = 3.25740914E-01;
  COFTD[41] = 3.03631979E-04;
  COFTD[42] = -1.55289598E-07;
  COFTD[43] = 2.41465297E-11;
  COFTD[44] = 1.62149345E-01;
  COFTD[45] = 5.03434613E-04;
  COFTD[46] = -2.39391657E-07;
  COFTD[47] = 3.50983128E-11;
  COFTD[48] = 4.45261429E-01;
  COFTD[49] = 4.94696577E-05;
  COFTD[50] = -2.63023124E-08;
  COFTD[51] = 4.90305626E-12;
  COFTD[52] = 1.52534742E-01;
  COFTD[53] = 5.46404022E-05;
  COFTD[54] = -2.93412470E-08;
  COFTD[55] = 4.87091914E-12;
  COFTD[56] = 0.00000000E+00;
  COFTD[57] = 0.00000000E+00;
  COFTD[58] = 0.00000000E+00;
  COFTD[59] = 0.00000000E+00;
  COFTD[60] = 2.70008280E-01;
  COFTD[61] = 3.61552588E-04;
  COFTD[62] = -1.80743499E-07;
  COFTD[63] = 2.75319341E-11;
  COFTD[64] = 2.20482081E-01;
  COFTD[65] = 4.80162630E-04;
  COFTD[66] = -2.32927140E-07;
  COFTD[67] = 3.46469239E-11;
  COFTD[68] = 2.72039997E-01;
  COFTD[69] = 3.64273144E-04;
  COFTD[70] = -1.82103531E-07;
  COFTD[71] = 2.77391022E-11;
  COFTD[72] = -1.41882969E-01;
  COFTD[73] = 7.66554625E-04;
  COFTD[74] = -3.06548330E-07;
  COFTD[75] = 4.02957302E-11;
  COFTD[76] = 2.20907136E-01;
  COFTD[77] = 4.81088308E-04;
  COFTD[78] = -2.33376187E-07;
  COFTD[79] = 3.47137178E-11;
  COFTD[80] = 1.40109849E-01;
  COFTD[81] = 5.30876682E-04;
  COFTD[82] = -2.49898194E-07;
  COFTD[83] = 3.63822692E-11;
  COFTD[84] = 1.45433118E-01;
  COFTD[85] = 5.30347483E-04;
  COFTD[86] = -2.50118653E-07;
  COFTD[87] = 3.64613999E-11;
  COFTD[88] = 2.39409087E-01;
  COFTD[89] = 4.47195587E-04;
  COFTD[90] = -2.18950923E-07;
  COFTD[91] = 3.27972343E-11;
  COFTD[92] = 2.44368810E-02;
  COFTD[93] = 7.18240808E-04;
  COFTD[94] = -3.19717751E-07;
  COFTD[95] = 4.48827629E-11;
  COFTD[96] = -1.24938974E-01;
  COFTD[97] = 7.98385053E-04;
  COFTD[98] = -3.25757471E-07;
  COFTD[99] = 4.33526419E-11;
  COFTD[100] = 2.40744276E-01;
  COFTD[101] = 4.45343183E-04;
  COFTD[102] = -2.18173742E-07;
  COFTD[103] = 3.26958310E-11;
}

// compute the critical parameters for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS(
  amrex::Real* Tci, amrex::Real* ai, amrex::Real* bi, amrex::Real* acentric_i)
{

  amrex::Real EPS[13];
  amrex::Real SIG[13];
  amrex::Real wt[13];
  amrex::Real Rcst = 83.144598; // in bar [CGS] !
  amrex::Real avogadro = 6.02214199e23;
  amrex::Real boltzmann = 1.3806503e-16; // we work in CGS

  egtransetEPS(EPS);
  egtransetSIG(SIG);
  get_mw(wt);

  // species 0: H2
  // Imported from NIST
  Tci[0] = 33.145000;
  ai[0] = 1e6 * 0.42748 * Rcst * Rcst * Tci[0] * Tci[0] /
          (2.015880 * 2.015880 * 12.964000);
  bi[0] = 0.08664 * Rcst * Tci[0] / (2.015880 * 12.964000);
  acentric_i[0] = -0.219000;

  // species 1: H
  Tci[1] = 1.316 * EPS[1];
  ai[1] = (5.55 * avogadro * avogadro * EPS[1] * boltzmann * 1e-24 * SIG[1] *
           SIG[1] * SIG[1]) /
          (wt[1] * wt[1]);
  bi[1] = 0.855 * avogadro * 1e-24 * SIG[1] * SIG[1] * SIG[1] / (wt[1]);
  acentric_i[1] = 0.0;

  // species 2: O
  Tci[2] = 1.316 * EPS[2];
  ai[2] = (5.55 * avogadro * avogadro * EPS[2] * boltzmann * 1e-24 * SIG[2] *
           SIG[2] * SIG[2]) /
          (wt[2] * wt[2]);
  bi[2] = 0.855 * avogadro * 1e-24 * SIG[2] * SIG[2] * SIG[2] / (wt[2]);
  acentric_i[2] = 0.0;

  // species 3: O2
  // Imported from NIST
  Tci[3] = 154.581000;
  ai[3] = 1e6 * 0.42748 * Rcst * Rcst * Tci[3] * Tci[3] /
          (31.998800 * 31.998800 * 50.430466);
  bi[3] = 0.08664 * Rcst * Tci[3] / (31.998800 * 50.430466);
  acentric_i[3] = 0.022200;

  // species 4: OH
  Tci[4] = 1.316 * EPS[4];
  ai[4] = (5.55 * avogadro * avogadro * EPS[4] * boltzmann * 1e-24 * SIG[4] *
           SIG[4] * SIG[4]) /
          (wt[4] * wt[4]);
  bi[4] = 0.855 * avogadro * 1e-24 * SIG[4] * SIG[4] * SIG[4] / (wt[4]);
  acentric_i[4] = 0.0;

  // species 5: H2O
  // Imported from NIST
  Tci[5] = 647.096000;
  ai[5] = 1e6 * 0.42748 * Rcst * Rcst * Tci[5] * Tci[5] /
          (18.015340 * 18.015340 * 220.640000);
  bi[5] = 0.08664 * Rcst * Tci[5] / (18.015340 * 220.640000);
  acentric_i[5] = 0.344300;

  // species 6: HO2
  Tci[6] = 1.316 * EPS[6];
  ai[6] = (5.55 * avogadro * avogadro * EPS[6] * boltzmann * 1e-24 * SIG[6] *
           SIG[6] * SIG[6]) /
          (wt[6] * wt[6]);
  bi[6] = 0.855 * avogadro * 1e-24 * SIG[6] * SIG[6] * SIG[6] / (wt[6]);
  acentric_i[6] = 0.0;

  // species 7: CH3
  Tci[7] = 1.316 * EPS[7];
  ai[7] = (5.55 * avogadro * avogadro * EPS[7] * boltzmann * 1e-24 * SIG[7] *
           SIG[7] * SIG[7]) /
          (wt[7] * wt[7]);
  bi[7] = 0.855 * avogadro * 1e-24 * SIG[7] * SIG[7] * SIG[7] / (wt[7]);
  acentric_i[7] = 0.0;

  // species 8: CH4
  // Imported from NIST
  Tci[8] = 190.560000;
  ai[8] = 1e6 * 0.42748 * Rcst * Rcst * Tci[8] * Tci[8] /
          (16.043030 * 16.043030 * 45.990000);
  bi[8] = 0.08664 * Rcst * Tci[8] / (16.043030 * 45.990000);
  acentric_i[8] = 0.011000;

  // species 9: CO
  // Imported from NIST
  Tci[9] = 132.850000;
  ai[9] = 1e6 * 0.42748 * Rcst * Rcst * Tci[9] * Tci[9] /
          (28.010000 * 28.010000 * 34.940000);
  bi[9] = 0.08664 * Rcst * Tci[9] / (28.010000 * 34.940000);
  acentric_i[9] = 0.045000;

  // species 10: CO2
  // Imported from NIST
  Tci[10] = 304.120000;
  ai[10] = 1e6 * 0.42748 * Rcst * Rcst * Tci[10] * Tci[10] /
           (44.009950 * 44.009950 * 73.740000);
  bi[10] = 0.08664 * Rcst * Tci[10] / (44.009950 * 73.740000);
  acentric_i[10] = 0.225000;

  // species 11: CH2O
  Tci[11] = 1.316 * EPS[11];
  ai[11] = (5.55 * avogadro * avogadro * EPS[11] * boltzmann * 1e-24 * SIG[11] *
            SIG[11] * SIG[11]) /
           (wt[11] * wt[11]);
  bi[11] = 0.855 * avogadro * 1e-24 * SIG[11] * SIG[11] * SIG[11] / (wt[11]);
  acentric_i[11] = 0.0;

  // species 12: N2
  // Imported from NIST
  Tci[12] = 126.192000;
  ai[12] = 1e6 * 0.42748 * Rcst * Rcst * Tci[12] * Tci[12] /
           (28.013400 * 28.013400 * 33.958000);
  bi[12] = 0.08664 * Rcst * Tci[12] / (28.013400 * 33.958000);
  acentric_i[12] = 0.037200;
}

// compute the critical parameter quantities for each species for SRK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS_SRK(
  amrex::Real* sqrtOneOverTc,
  amrex::Real* sqrtAsti,
  amrex::Real* Bi,
  amrex::Real* Fomega)
{

  // species 0: H2
  // Imported from NIST
  sqrtOneOverTc[0] = 1.7369646834812e-01;
  sqrtAsti[0] = 2.4824229305911e+05;
  Bi[0] = 9.1362254169923e+00;
  Fomega[0] = 1.3798618890700e-01;

  // species 1: H
  // Computed from Lennard-Jones
  sqrtOneOverTc[1] = 7.2391579785311e-02;
  sqrtAsti[1] = 5.8451221185793e+05;
  Bi[1] = 4.4006634563410e+00;
  Fomega[1] = 4.8508000000000e-01;

  // species 2: O
  // Computed from Lennard-Jones
  sqrtOneOverTc[2] = 9.7460146948181e-02;
  sqrtAsti[2] = 4.2500156012386e+04;
  Bi[2] = 6.6930234851885e-01;
  Fomega[2] = 4.8508000000000e-01;

  // species 3: O2
  // Imported from NIST
  sqrtOneOverTc[3] = 8.0430717653241e-02;
  sqrtAsti[3] = 3.6980081924740e+04;
  Bi[3] = 6.9005216444999e-01;
  Fomega[3] = 5.1945301904908e-01;

  // species 4: OH
  // Computed from Lennard-Jones
  sqrtOneOverTc[4] = 9.7460146948181e-02;
  sqrtAsti[4] = 3.9981183985545e+04;
  Bi[4] = 6.2963299076575e-01;
  Fomega[4] = 4.8508000000000e-01;

  // species 5: H2O
  // Imported from NIST
  sqrtOneOverTc[5] = 3.9311140369715e-02;
  sqrtAsti[5] = 1.3145468419592e+05;
  Bi[5] = 1.1727204136223e+00;
  Fomega[5] = 1.0013577274636e+00;

  // species 6: HO2
  // Computed from Lennard-Jones
  sqrtOneOverTc[6] = 8.4114315417892e-02;
  sqrtAsti[6] = 3.3657825710980e+04;
  Bi[6] = 6.4505861132042e-01;
  Fomega[6] = 4.8508000000000e-01;

  // species 7: CH3
  // Computed from Lennard-Jones
  sqrtOneOverTc[7] = 7.2642504557751e-02;
  sqrtAsti[7] = 9.8558148656101e+04;
  Bi[7] = 1.8791630452967e+00;
  Fomega[7] = 4.8508000000000e-01;

  // species 8: CH4
  // Imported from NIST
  sqrtOneOverTc[8] = 7.2440948474968e-02;
  sqrtAsti[8] = 9.5215046085708e+04;
  Bi[8] = 1.8605203320660e+00;
  Fomega[8] = 5.0213035482700e-01;

  // species 9: CO
  // Imported from NIST
  sqrtOneOverTc[9] = 8.6759935530451e-02;
  sqrtAsti[9] = 4.3619324712923e+04;
  Bi[9] = 9.7786303823350e-01;
  Fomega[9] = 5.5459948367500e-01;

  // species 10: CO2
  // Imported from NIST
  sqrtOneOverTc[10] = 5.7342616962522e-02;
  sqrtAsti[10] = 4.3745610142919e+04;
  Bi[10] = 6.7506167841745e-01;
  Fomega[10] = 8.2653709187500e-01;

  // species 11: CH2O
  // Computed from Lennard-Jones
  sqrtOneOverTc[11] = 3.9062261583604e-02;
  sqrtAsti[11] = 8.4274889632487e+04;
  Bi[11] = 7.9341968505345e-01;
  Fomega[11] = 4.8508000000000e-01;

  // species 12: N2
  // Imported from NIST
  sqrtOneOverTc[12] = 8.9019282240563e-02;
  sqrtAsti[12] = 4.2022983929562e+04;
  Bi[12] = 9.5560052221563e-01;
  Fomega[12] = 5.4259343186608e-01;
}

// gauss-jordan solver external routine
// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort("sgjsolve not implemented, choose a different solver ");
}

// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve_simplified(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort(
    "sgjsolve_simplified not implemented, choose a different solver ");
}

#endif
