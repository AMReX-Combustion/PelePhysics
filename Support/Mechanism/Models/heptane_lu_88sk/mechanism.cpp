#include "mechanism.H"
const int rmap[729] = {
  0,   27,  40,  43,  89,  102, 105, 44,  69,  70,  151, 21,  22,  41,  42,
  51,  52,  96,  97,  98,  99,  100, 101, 196, 197, 311, 312, 319, 320, 343,
  344, 440, 441, 1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,
  13,  14,  15,  16,  17,  18,  19,  20,  23,  24,  25,  26,  28,  29,  30,
  31,  32,  33,  34,  35,  36,  37,  38,  39,  45,  46,  47,  48,  49,  50,
  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,
  68,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,
  85,  86,  87,  88,  90,  91,  92,  93,  94,  95,  103, 104, 106, 107, 108,
  109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
  124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
  139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154,
  155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
  170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,
  185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201,
  202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216,
  217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
  232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
  247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
  262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
  277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
  292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306,
  307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325,
  326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340,
  341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357,
  358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372,
  373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387,
  388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
  403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417,
  418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432,
  433, 434, 435, 436, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449,
  450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464,
  465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479,
  480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494,
  495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509,
  510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524,
  525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
  540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
  555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
  570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
  585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599,
  600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
  615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
  630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644,
  645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659,
  660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674,
  675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
  690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704,
  705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
  720, 721, 722, 723, 724, 725, 726, 727, 728};

// Returns 0-based map of reaction order
void
GET_RMAP(int* _rmap)
{
  for (int j = 0; j < 729; ++j) {
    _rmap[j] = rmap[j];
  }
}

// Returns a count of species in a reaction, and their indices
// and stoichiometric coefficients. (Eq 50)
void
CKINU(const int i, int& nspec, int ki[], int nu[])
{
  const int ns[729] = {
    3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4,
    4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4,
    4, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 3, 3, 2, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2,
    2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 4, 4, 3, 3, 4,
    4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 4, 4, 3, 3, 5,
    5, 4, 4, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3,
    3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3,
    4, 4, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 3, 3, 5, 4,
    4, 4, 4, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 4, 4, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 3, 3, 3, 3, 4, 2, 2, 4, 4, 4, 4, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 5,
    5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 5, 4, 4, 4, 4, 4, 5,
    4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3,
    3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 4, 4, 5, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 2,
    2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5,
    5, 5, 5, 5};
  const int kiv[3645] = {
    9,  0,  10, 0,  0,  10, 0,  9,  1,  0,  9,  1,  10, 0,  0,  10, 4,  9,  5,
    0,  9,  5,  10, 4,  0,  10, 2,  9,  4,  0,  9,  4,  10, 2,  0,  15, 9,  17,
    10, 0,  17, 10, 15, 9,  0,  7,  4,  6,  5,  0,  6,  5,  7,  4,  0,  6,  4,
    8,  0,  0,  8,  0,  6,  4,  0,  0,  3,  2,  4,  0,  2,  4,  0,  3,  0,  1,
    2,  0,  4,  0,  0,  4,  1,  2,  0,  5,  2,  4,  0,  0,  4,  5,  2,  0,  0,
    1,  4,  0,  5,  0,  0,  5,  1,  4,  0,  7,  6,  0,  0,  0,  6,  0,  7,  0,
    0,  12, 4,  5,  11, 0,  5,  11, 12, 4,  0,  16, 2,  9,  7,  0,  9,  7,  16,
    2,  0,  16, 0,  17, 0,  0,  15, 0,  17, 1,  0,  17, 1,  15, 0,  0,  17, 3,
    16, 11, 0,  16, 11, 17, 3,  0,  15, 4,  17, 5,  0,  17, 5,  15, 4,  0,  15,
    2,  17, 4,  0,  17, 4,  15, 2,  0,  9,  11, 14, 4,  0,  14, 4,  9,  11, 0,
    6,  11, 8,  4,  0,  8,  4,  6,  11, 0,  9,  15, 0,  0,  0,  5,  0,  4,  0,
    0,  0,  4,  5,  0,  0,  0,  3,  11, 0,  0,  6,  2,  8,  0,  0,  6,  3,  8,
    2,  0,  8,  2,  6,  3,  0,  0,  7,  6,  1,  0,  6,  1,  0,  7,  0,  7,  2,
    6,  4,  0,  6,  4,  7,  2,  0,  13, 0,  7,  0,  0,  0,  7,  13, 0,  0,  13,
    4,  5,  7,  0,  5,  7,  13, 4,  0,  13, 0,  1,  7,  0,  1,  7,  13, 0,  0,
    13, 2,  7,  4,  0,  7,  4,  13, 2,  0,  9,  4,  13, 1,  0,  13, 1,  9,  4,
    0,  9,  2,  13, 0,  0,  13, 0,  9,  2,  0,  9,  3,  14, 2,  0,  14, 2,  9,
    3,  0,  13, 9,  10, 7,  0,  10, 7,  13, 9,  0,  9,  7,  10, 6,  0,  10, 6,
    9,  7,  0,  14, 13, 0,  0,  0,  16, 18, 1,  0,  0,  11, 2,  3,  4,  0,  3,
    4,  11, 2,  0,  7,  11, 13, 3,  0,  13, 3,  7,  11, 0,  14, 3,  13, 11, 0,
    13, 11, 14, 3,  0,  9,  11, 10, 3,  0,  10, 3,  9,  11, 0,  7,  3,  6,  11,
    0,  6,  11, 7,  3,  0,  0,  11, 4,  0,  0,  4,  0,  11, 0,  0,  0,  11, 1,
    3,  0,  1,  3,  0,  11, 0,  11, 4,  5,  3,  0,  5,  3,  11, 4,  0,  12, 3,
    11, 0,  0,  11, 12, 3,  0,  0,  4,  12, 0,  0,  0,  0,  12, 5,  4,  0,  5,
    4,  0,  12, 0,  10, 11, 9,  12, 0,  9,  12, 10, 11, 0,  13, 11, 12, 7,  0,
    12, 7,  13, 11, 0,  4,  0,  2,  0,  0,  0,  2,  4,  0,  0,  3,  2,  0,  0,
    0,  2,  3,  0,  0,  0,  1,  0,  0,  0,  0,  0,  1,  0,  0,  0,  19, 0,  16,
    0,  0,  19, 17, 16, 0,  0,  16, 19, 17, 0,  0,  18, 0,  19, 0,  0,  16, 0,
    19, 1,  0,  19, 1,  16, 0,  0,  16, 4,  19, 5,  0,  19, 5,  16, 4,  0,  18,
    3,  21, 4,  0,  21, 4,  18, 3,  0,  19, 3,  18, 11, 0,  18, 11, 19, 3,  0,
    12, 2,  11, 4,  0,  11, 4,  12, 2,  0,  18, 2,  0,  21, 0,  0,  21, 18, 2,
    0,  18, 4,  20, 0,  0,  20, 0,  18, 4,  0,  20, 0,  9,  6,  0,  9,  6,  20,
    0,  0,  20, 2,  21, 4,  0,  21, 4,  20, 2,  0,  20, 4,  5,  21, 0,  5,  21,
    20, 4,  0,  20, 0,  1,  21, 0,  1,  21, 20, 0,  0,  21, 4,  7,  0,  0,  7,
    21, 4,  0,  0,  0,  21, 50, 6,  0,  50, 6,  0,  21, 0,  21, 2,  6,  0,  0,
    15, 3,  17, 11, 0,  17, 11, 15, 3,  0,  15, 11, 17, 12, 0,  17, 12, 15, 11,
    0,  19, 9,  18, 10, 0,  18, 10, 19, 9,  0,  17, 9,  16, 10, 0,  16, 10, 17,
    9,  0,  19, 0,  18, 1,  0,  18, 1,  19, 0,  0,  17, 0,  9,  0,  0,  9,  17,
    0,  0,  0,  19, 3,  13, 7,  0,  13, 7,  19, 3,  0,  15, 17, 0,  0,  0,  17,
    0,  15, 0,  0,  16, 9,  19, 10, 0,  19, 10, 16, 9,  0,  22, 9,  6,  0,  0,
    24, 9,  7,  0,  0,  9,  7,  24, 0,  0,  24, 3,  22, 11, 0,  22, 11, 24, 3,
    0,  24, 4,  22, 5,  0,  22, 5,  24, 4,  0,  24, 0,  22, 1,  0,  22, 1,  24,
    0,  0,  24, 2,  22, 4,  0,  22, 4,  24, 2,  0,  24, 11, 22, 12, 0,  22, 12,
    24, 11, 0,  9,  24, 22, 10, 0,  22, 10, 9,  24, 0,  47, 18, 9,  0,  0,  18,
    9,  47, 0,  0,  26, 19, 9,  0,  0,  19, 9,  26, 0,  0,  18, 9,  25, 0,  0,
    25, 0,  18, 9,  0,  26, 47, 0,  0,  0,  47, 0,  26, 0,  0,  26, 2,  20, 9,
    0,  20, 9,  0,  26, 2,  26, 2,  17, 7,  0,  17, 7,  26, 2,  0,  26, 11, 47,
    12, 0,  47, 12, 26, 11, 0,  26, 4,  47, 5,  0,  47, 5,  26, 4,  0,  27, 19,
    0,  0,  0,  19, 27, 0,  0,  0,  27, 4,  17, 20, 0,  17, 20, 27, 4,  0,  27,
    4,  47, 13, 0,  47, 13, 27, 4,  0,  27, 4,  19, 24, 0,  19, 24, 27, 4,  0,
    27, 2,  16, 20, 0,  16, 20, 27, 2,  0,  27, 2,  25, 13, 0,  25, 13, 27, 2,
    0,  16, 3,  19, 11, 0,  19, 11, 16, 3,  0,  13, 6,  1,  0,  0,  6,  1,  13,
    0,  0,  28, 16, 9,  0,  0,  16, 9,  28, 0,  0,  28, 26, 0,  0,  0,  26, 0,
    28, 0,  0,  28, 3,  26, 11, 0,  26, 11, 28, 3,  0,  26, 2,  47, 4,  0,  47,
    4,  26, 2,  0,  26, 0,  47, 1,  0,  47, 1,  26, 0,  0,  26, 0,  16, 9,  0,
    16, 9,  26, 0,  0,  35, 16, 47, 0,  0,  35, 27, 9,  0,  0,  27, 9,  35, 0,
    0,  29, 27, 0,  0,  0,  27, 0,  29, 0,  0,  29, 19, 16, 0,  0,  19, 16, 29,
    0,  0,  27, 30, 29, 0,  0,  29, 27, 30, 0,  0,  29, 9,  27, 10, 0,  27, 10,
    29, 9,  0,  47, 29, 26, 27, 0,  26, 27, 47, 29, 0,  29, 3,  27, 11, 0,  27,
    11, 29, 3,  0,  29, 0,  27, 1,  0,  27, 1,  29, 0,  0,  17, 29, 15, 27, 0,
    15, 27, 17, 29, 0,  17, 29, 16, 30, 0,  16, 30, 17, 29, 0,  19, 29, 16, 27,
    0,  16, 27, 19, 29, 0,  30, 47, 9,  0,  0,  47, 9,  30, 0,  0,  30, 19, 17,
    0,  0,  19, 17, 30, 0,  0,  30, 29, 0,  0,  0,  29, 0,  30, 0,  0,  30, 9,
    29, 10, 0,  29, 10, 30, 9,  0,  30, 0,  29, 1,  0,  29, 1,  30, 0,  0,  30,
    4,  29, 5,  0,  29, 5,  30, 4,  0,  47, 30, 26, 29, 0,  26, 29, 47, 30, 0,
    30, 11, 29, 12, 0,  29, 12, 30, 11, 0,  30, 3,  29, 11, 0,  29, 11, 30, 3,
    0,  31, 16, 17, 0,  0,  16, 17, 31, 0,  0,  31, 30, 0,  0,  0,  30, 0,  31,
    0,  0,  3,  31, 30, 11, 0,  30, 11, 3,  31, 0,  32, 20, 9,  0,  0,  20, 9,
    32, 0,  0,  34, 17, 6,  0,  0,  17, 6,  34, 0,  0,  33, 0,  34, 1,  0,  34,
    1,  33, 0,  0,  33, 2,  34, 4,  0,  34, 4,  33, 2,  0,  33, 4,  34, 5,  0,
    34, 5,  33, 4,  0,  33, 9,  34, 10, 0,  34, 10, 33, 9,  0,  33, 11, 34, 12,
    0,  34, 12, 33, 11, 0,  17, 33, 34, 15, 0,  34, 15, 17, 33, 0,  33, 17, 7,
    0,  0,  17, 7,  33, 0,  0,  33, 3,  34, 11, 0,  34, 11, 33, 3,  0,  19, 33,
    16, 34, 0,  16, 34, 19, 33, 0,  33, 47, 34, 26, 0,  34, 26, 33, 47, 0,  36,
    17, 47, 0,  0,  17, 47, 36, 0,  0,  36, 0,  35, 1,  0,  35, 1,  36, 0,  0,
    36, 2,  35, 4,  0,  35, 4,  36, 2,  0,  36, 2,  7,  31, 0,  36, 2,  22, 28,
    0,  36, 4,  35, 5,  0,  35, 5,  36, 4,  0,  36, 4,  13, 31, 0,  36, 4,  24,
    28, 0,  36, 9,  35, 10, 0,  35, 10, 36, 9,  0,  0,  12, 1,  11, 0,  1,  11,
    0,  12, 0,  7,  2,  8,  0,  0,  8,  0,  7,  2,  0,  22, 0,  20, 1,  0,  20,
    1,  22, 0,  0,  22, 2,  20, 4,  0,  20, 4,  22, 2,  0,  9,  22, 20, 10, 0,
    20, 10, 9,  22, 0,  16, 2,  23, 0,  0,  23, 0,  16, 2,  0,  17, 2,  24, 0,
    0,  24, 0,  17, 2,  0,  19, 16, 27, 0,  0,  27, 0,  19, 16, 0,  37, 13, 9,
    0,  0,  13, 9,  37, 0,  0,  37, 3,  24, 11, 0,  24, 11, 37, 3,  0,  12, 3,
    11, 0,  0,  11, 12, 3,  0,  0,  19, 3,  23, 2,  0,  23, 2,  19, 3,  0,  38,
    9,  3,  0,  0,  9,  3,  38, 0,  0,  39, 14, 4,  0,  0,  14, 4,  39, 0,  0,
    49, 3,  6,  0,  21, 13, 38, 39, 7,  0,  39, 7,  13, 38, 0,  16, 38, 19, 39,
    0,  19, 39, 16, 38, 0,  38, 10, 9,  39, 0,  9,  39, 38, 10, 0,  17, 11, 37,
    4,  0,  37, 4,  17, 11, 0,  9,  38, 14, 0,  0,  14, 9,  38, 0,  0,  17, 38,
    37, 14, 0,  37, 14, 17, 38, 0,  38, 11, 39, 3,  0,  39, 3,  38, 11, 0,  12,
    4,  5,  11, 0,  5,  11, 12, 4,  0,  38, 14, 3,  0,  0,  15, 38, 17, 39, 0,
    17, 39, 15, 38, 0,  37, 24, 0,  0,  0,  24, 0,  37, 0,  0,  24, 38, 22, 39,
    0,  22, 39, 24, 38, 0,  40, 19, 6,  0,  0,  19, 6,  40, 0,  0,  41, 4,  40,
    5,  0,  40, 5,  41, 4,  0,  41, 0,  40, 1,  0,  40, 1,  41, 0,  0,  41, 2,
    40, 4,  0,  40, 4,  41, 2,  0,  41, 11, 40, 12, 0,  40, 12, 41, 11, 0,  41,
    9,  40, 10, 0,  40, 10, 41, 9,  0,  41, 38, 40, 39, 0,  40, 39, 41, 38, 0,
    42, 41, 0,  0,  0,  41, 0,  42, 0,  0,  42, 19, 13, 0,  0,  19, 13, 42, 0,
    0,  42, 3,  41, 11, 0,  41, 11, 42, 3,  0,  47, 11, 42, 4,  0,  42, 4,  47,
    11, 0,  47, 38, 42, 14, 0,  42, 14, 47, 38, 0,  26, 38, 47, 39, 0,  47, 39,
    26, 38, 0,  9,  4,  50, 5,  0,  50, 5,  9,  4,  0,  43, 19, 24, 0,  0,  19,
    24, 43, 0,  0,  43, 41, 9,  0,  0,  41, 9,  43, 0,  0,  29, 11, 43, 4,  0,
    43, 4,  29, 11, 0,  29, 38, 43, 14, 0,  43, 14, 29, 38, 0,  30, 4,  13, 28,
    0,  13, 28, 30, 4,  0,  30, 2,  26, 13, 0,  26, 13, 30, 2,  0,  30, 2,  16,
    24, 0,  16, 24, 30, 2,  0,  30, 2,  17, 22, 0,  17, 22, 30, 2,  0,  30, 4,
    17, 24, 0,  17, 24, 30, 4,  0,  30, 4,  15, 22, 0,  15, 22, 30, 4,  0,  30,
    2,  34, 9,  0,  34, 9,  30, 2,  0,  30, 4,  33, 9,  0,  33, 9,  30, 4,  0,
    30, 4,  34, 10, 0,  34, 10, 30, 4,  0,  30, 38, 29, 39, 0,  29, 39, 30, 38,
    0,  44, 45, 3,  0,  0,  45, 3,  44, 0,  0,  44, 51, 4,  0,  0,  51, 4,  44,
    0,  0,  45, 26, 13, 4,  0,  46, 45, 0,  0,  0,  45, 46, 0,  0,  0,  33, 38,
    34, 39, 0,  34, 39, 33, 38, 0,  33, 29, 34, 30, 0,  34, 30, 33, 29, 0,  25,
    11, 16, 6,  4,  16, 6,  4,  25, 11, 25, 11, 48, 12, 0,  48, 12, 25, 11, 0,
    26, 3,  47, 11, 0,  47, 11, 26, 3,  0,  26, 9,  47, 10, 0,  47, 10, 26, 9,
    0,  17, 26, 15, 47, 0,  15, 47, 17, 26, 0,  47, 11, 19, 13, 4,  19, 13, 4,
    47, 11, 47, 0,  25, 1,  0,  25, 1,  47, 0,  0,  47, 9,  25, 10, 0,  25, 10,
    47, 9,  0,  17, 47, 15, 25, 0,  15, 25, 17, 47, 0,  17, 47, 16, 26, 0,  16,
    26, 17, 47, 0,  19, 47, 16, 25, 0,  16, 25, 19, 47, 0,  25, 26, 47, 0,  0,
    47, 25, 26, 0,  0,  47, 3,  41, 4,  0,  41, 4,  47, 3,  0,  25, 48, 0,  0,
    0,  48, 0,  25, 0,  0,  25, 3,  48, 11, 0,  48, 11, 25, 3,  0,  48, 0,  49,
    1,  0,  49, 1,  48, 0,  0,  25, 4,  48, 5,  0,  48, 5,  25, 4,  0,  25, 2,
    16, 6,  0,  16, 6,  25, 2,  0,  49, 4,  18, 7,  0,  18, 7,  49, 4,  0,  47,
    25, 0,  0,  0,  25, 0,  47, 0,  0,  25, 0,  48, 1,  0,  48, 1,  25, 0,  0,
    25, 9,  48, 10, 0,  48, 10, 25, 9,  0,  25, 47, 48, 26, 0,  48, 26, 25, 47,
    0,  48, 4,  49, 5,  0,  49, 5,  48, 4,  0,  48, 3,  20, 7,  0,  20, 7,  48,
    3,  0,  46, 3,  31, 0,  0,  3,  31, 46, 0,  0,  23, 20, 0,  0,  0,  20, 0,
    23, 0,  0,  23, 3,  13, 6,  4,  51, 23, 24, 4,  0,  47, 3,  25, 11, 0,  25,
    11, 47, 3,  0,  47, 3,  23, 13, 0,  23, 13, 47, 3,  0,  47, 3,  18, 13, 4,
    21, 3,  8,  7,  0,  8,  7,  21, 3,  0,  9,  3,  13, 4,  0,  13, 4,  9,  3,
    0,  16, 1,  9,  0,  0,  9,  16, 1,  0,  0,  52, 3,  11, 53, 0,  11, 53, 52,
    3,  0,  52, 4,  5,  53, 0,  5,  53, 52, 4,  0,  0,  52, 1,  53, 0,  1,  53,
    0,  52, 0,  52, 2,  53, 4,  0,  53, 4,  52, 2,  0,  11, 52, 12, 53, 0,  12,
    53, 11, 52, 0,  9,  52, 10, 53, 0,  10, 53, 9,  52, 0,  38, 52, 39, 53, 0,
    39, 53, 38, 52, 0,  53, 6,  28, 0,  0,  6,  28, 53, 0,  0,  54, 17, 20, 0,
    0,  17, 20, 54, 0,  0,  55, 20, 28, 0,  0,  20, 28, 55, 0,  0,  56, 3,  11,
    57, 0,  11, 57, 56, 3,  0,  56, 4,  5,  57, 0,  5,  57, 56, 4,  0,  0,  56,
    1,  57, 0,  1,  57, 0,  56, 0,  56, 2,  57, 4,  0,  57, 4,  56, 2,  0,  11,
    56, 12, 57, 0,  12, 57, 11, 56, 0,  9,  56, 10, 57, 0,  10, 57, 9,  56, 0,
    38, 56, 39, 57, 0,  39, 57, 38, 56, 0,  57, 6,  31, 0,  0,  6,  31, 57, 0,
    0,  50, 10, 9,  0,  0,  9,  50, 10, 0,  0,  15, 50, 17, 9,  0,  17, 9,  15,
    50, 0,  50, 3,  6,  0,  4,  50, 1,  9,  0,  0,  9,  0,  50, 1,  0,  50, 2,
    6,  0,  0,  50, 4,  13, 0,  0,  13, 0,  50, 4,  0,  50, 8,  13, 6,  0,  13,
    6,  50, 8,  0,  50, 9,  16, 0,  0,  16, 0,  50, 9,  0,  50, 20, 16, 6,  0,
    16, 6,  50, 20, 0,  58, 59, 0,  0,  0,  59, 0,  58, 0,  0,  58, 60, 0,  0,
    0,  60, 0,  58, 0,  0,  58, 61, 0,  0,  0,  61, 0,  58, 0,  0,  58, 62, 0,
    0,  0,  62, 0,  58, 0,  0,  58, 28, 31, 0,  0,  28, 31, 58, 0,  0,  0,  58,
    59, 1,  0,  59, 1,  0,  58, 0,  0,  58, 60, 1,  0,  60, 1,  0,  58, 0,  0,
    58, 61, 1,  0,  61, 1,  0,  58, 0,  0,  58, 62, 1,  0,  62, 1,  0,  58, 0,
    58, 2,  59, 4,  0,  59, 4,  58, 2,  0,  58, 2,  60, 4,  0,  60, 4,  58, 2,
    0,  58, 2,  61, 4,  0,  61, 4,  58, 2,  0,  58, 2,  62, 4,  0,  62, 4,  58,
    2,  0,  58, 4,  59, 5,  0,  59, 5,  58, 4,  0,  58, 4,  60, 5,  0,  60, 5,
    58, 4,  0,  58, 4,  61, 5,  0,  61, 5,  58, 4,  0,  58, 4,  62, 5,  0,  62,
    5,  58, 4,  0,  11, 58, 59, 12, 0,  59, 12, 11, 58, 0,  11, 58, 60, 12, 0,
    60, 12, 11, 58, 0,  11, 58, 61, 12, 0,  61, 12, 11, 58, 0,  11, 58, 62, 12,
    0,  62, 12, 11, 58, 0,  9,  58, 59, 10, 0,  59, 10, 9,  58, 0,  9,  58, 60,
    10, 0,  60, 10, 9,  58, 0,  9,  58, 61, 10, 0,  61, 10, 9,  58, 0,  9,  58,
    62, 10, 0,  62, 10, 9,  58, 0,  58, 3,  59, 11, 0,  59, 11, 58, 3,  0,  58,
    3,  60, 11, 0,  60, 11, 58, 3,  0,  58, 3,  61, 11, 0,  61, 11, 58, 3,  0,
    58, 3,  62, 11, 0,  62, 11, 58, 3,  0,  17, 58, 15, 59, 0,  15, 59, 17, 58,
    0,  17, 58, 15, 60, 0,  15, 60, 17, 58, 0,  17, 58, 15, 61, 0,  15, 61, 17,
    58, 0,  17, 58, 15, 62, 0,  15, 62, 17, 58, 0,  19, 58, 16, 59, 0,  16, 59,
    19, 58, 0,  19, 58, 16, 60, 0,  16, 60, 19, 58, 0,  19, 58, 16, 61, 0,  16,
    61, 19, 58, 0,  19, 58, 16, 62, 0,  16, 62, 19, 58, 0,  38, 58, 59, 39, 0,
    59, 39, 38, 58, 0,  38, 58, 60, 39, 0,  60, 39, 38, 58, 0,  38, 58, 61, 39,
    0,  61, 39, 38, 58, 0,  38, 58, 62, 39, 0,  62, 39, 38, 58, 0,  59, 58, 60,
    58, 0,  60, 58, 59, 58, 0,  59, 58, 61, 58, 0,  61, 58, 59, 58, 0,  59, 58,
    62, 58, 0,  62, 58, 59, 58, 0,  60, 58, 61, 58, 0,  61, 58, 60, 58, 0,  60,
    58, 62, 58, 0,  62, 58, 60, 58, 0,  61, 58, 62, 58, 0,  62, 58, 61, 58, 0,
    60, 26, 31, 0,  0,  26, 31, 60, 0,  0,  60, 63, 0,  0,  0,  63, 0,  60, 0,
    0,  61, 30, 28, 0,  0,  30, 28, 61, 0,  0,  61, 63, 0,  0,  0,  63, 0,  61,
    0,  0,  61, 64, 0,  0,  0,  64, 0,  61, 0,  0,  62, 17, 36, 0,  0,  17, 36,
    62, 0,  0,  62, 64, 0,  0,  0,  64, 0,  62, 0,  0,  60, 3,  63, 11, 0,  63,
    11, 60, 3,  0,  61, 3,  63, 11, 0,  63, 11, 61, 3,  0,  61, 3,  64, 11, 0,
    64, 11, 61, 3,  0,  62, 3,  64, 11, 0,  64, 11, 62, 3,  0,  59, 61, 0,  0,
    0,  61, 59, 0,  0,  0,  59, 62, 0,  0,  0,  62, 59, 0,  0,  0,  60, 61, 0,
    0,  0,  61, 60, 0,  0,  0,  59, 60, 0,  0,  0,  60, 59, 0,  0,  0,  63, 4,
    33, 31, 0,  64, 4,  33, 31, 0,  63, 2,  36, 24, 0,  64, 2,  36, 24, 0,  63,
    29, 28, 0,  0,  29, 28, 63, 0,  0,  64, 29, 28, 0,  0,  29, 28, 64, 0,  0,
    65, 59, 3,  0,  0,  59, 3,  65, 0,  0,  66, 60, 3,  0,  0,  60, 3,  66, 0,
    0,  67, 61, 3,  0,  0,  61, 3,  67, 0,  0,  68, 62, 3,  0,  0,  62, 3,  68,
    0,  0,  65, 69, 0,  0,  0,  69, 65, 0,  0,  0,  66, 70, 0,  0,  0,  70, 66,
    0,  0,  0,  66, 71, 0,  0,  0,  71, 66, 0,  0,  0,  67, 72, 0,  0,  0,  72,
    67, 0,  0,  0,  67, 73, 0,  0,  0,  73, 67, 0,  0,  0,  67, 74, 0,  0,  0,
    74, 67, 0,  0,  0,  68, 75, 0,  0,  0,  75, 68, 0,  0,  0,  68, 76, 0,  0,
    0,  76, 68, 0,  0,  0,  70, 63, 11, 0,  0,  63, 11, 70, 0,  0,  72, 63, 11,
    0,  0,  63, 11, 72, 0,  0,  73, 64, 11, 0,  0,  64, 11, 73, 0,  0,  76, 64,
    11, 0,  0,  64, 11, 76, 0,  0,  69, 81, 4,  0,  0,  71, 82, 4,  0,  0,  75,
    82, 4,  0,  0,  71, 36, 24, 4,  0,  74, 33, 30, 4,  0,  75, 26, 52, 4,  0,
    77, 69, 3,  0,  0,  69, 3,  77, 0,  0,  78, 71, 3,  0,  0,  71, 3,  78, 0,
    0,  79, 74, 3,  0,  0,  74, 3,  79, 0,  0,  80, 75, 3,  0,  0,  75, 3,  80,
    0,  0,  77, 83, 4,  0,  0,  83, 4,  77, 0,  0,  78, 84, 4,  0,  0,  84, 4,
    78, 0,  0,  79, 85, 4,  0,  0,  85, 4,  79, 0,  0,  80, 86, 4,  0,  0,  86,
    4,  80, 0,  0,  83, 23, 56, 4,  0,  84, 32, 52, 4,  0,  85, 33, 54, 4,  0,
    86, 24, 55, 4,  0,  82, 4,  36, 22, 5,  81, 4,  16, 5,  57, 82, 4,  26, 5,
    53, 82, 11, 36, 22, 12, 81, 11, 16, 12, 57, 82, 11, 26, 12, 53};
  const int nuv[3645] = {
    -1, -1, 1, 0, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 2,  0, 0, -2, 1,  1, 0, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  0, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -2, 1,  0, 0, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, -1, 1,  0, 0,
    -1, -1, 1, 0, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, 1,  1,  0, 0, -1, 1,  1, 0, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 2,  0, 0, -2, 1,  1, 0, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 2,  0, 0,
    -2, 1,  1, 0, 0, -2, 1,  0,  0, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, 1,  1, 0, 0, -1, -1, 1,  0, 0, -1, 2,  0, 0, 0, -2, 1,  0,  0, 0,
    -1, 2,  0, 0, 0, -2, 1,  0,  0, 0, -1, -1, 1, 0, 0, -1, -1, 2,  0, 0,
    -2, 1,  1, 0, 0, -1, -1, 1,  0, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 2, 0, 0, -2, 1,  1,  0, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 2, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 2,  0, 0,
    -2, 1,  1, 0, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, 1,  1,  0, 0,
    -1, 1,  1, 0, 0, -1, -1, 1,  0, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, 1,  1, 0, 0, -1, -1, 1,  0, 0,
    -1, 1,  1, 0, 0, -1, -1, 1,  0, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, 1,  1, 0, 0, -1, -1, 1,  0, 0, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, 2,  0, 0, 0, -2, 1,  0,  0, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, 1,  1, 0, 0, -1, -1, 1,  0, 0, -1, 1,  1, 0, 0, -1, -1, 1,  0, 0,
    -1, 1,  1, 0, 0, -1, -1, 1,  0, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, 1,  1, 0, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, -1, 2,  0, 0, -2, 1,  1, 0, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 2,  0, 0,
    -2, 1,  1, 0, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, -1, 1,  1, 1,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 2, 0, 0, -2, 1,  1,  0, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -2, 2,  1, 0, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, 1,  1,  1, 0,
    -1, 1,  0, 0, 0, -1, 1,  0,  0, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 2, 0, 0, -2, 1,  1,  0, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, 1,  1, 0, 0, -1, -1, 1,  0, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, 1,  1, 0, 0, -1, -1, 1,  0, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, 1,  1, 0, 0, -1, -1, 1,  0, 0, -1, 1,  1, 0, 0, -1, -1, 1,  0, 0,
    -1, -1, 1, 1, 1, -1, 1,  1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 1, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 2,  0, 0,
    -2, 1,  1, 0, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, -1, 2,  0, 0, -2, 1,  1, 0, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 1, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 2, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, 1,  0,  0, 0, -1, 1,  0, 0, 0, -1, 1,  0,  0, 0,
    -1, 1,  0, 0, 0, -1, 1,  0,  0, 0, -1, 1,  0, 0, 0, -1, 1,  0,  0, 0,
    -1, 1,  0, 0, 0, -1, -1, 1,  1, 0, -1, -1, 1, 1, 0, -1, -1, 1,  1, 0,
    -1, -1, 1, 1, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, 1,  0,  0, 0, -1, 1,  0, 0, 0, -1, 1,  0,  0, 0,
    -1, 1,  0, 0, 0, -1, 1,  0,  0, 0, -1, 1,  0, 0, 0, -1, 1,  0,  0, 0,
    -1, 1,  0, 0, 0, -1, 1,  0,  0, 0, -1, 1,  0, 0, 0, -1, 1,  0,  0, 0,
    -1, 1,  0, 0, 0, -1, 1,  0,  0, 0, -1, 1,  0, 0, 0, -1, 1,  0,  0, 0,
    -1, 1,  0, 0, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, 1,  1,  0, 0, -1, 1,  1, 0, 0, -1, 1,  1,  0, 0,
    -1, 1,  1, 1, 0, -1, 1,  1,  1, 0, -1, 1,  1, 1, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, 1,  1,  0, 0,
    -1, -1, 1, 0, 0, -1, 1,  1,  0, 0, -1, -1, 1, 0, 0, -1, 1,  1,  1, 0,
    -1, 1,  1, 1, 0, -1, 1,  1,  1, 0, -1, 1,  1, 1, 0, -1, -1, 1,  1, 1,
    -1, -1, 1, 1, 1, -1, -1, 1,  1, 1, -1, -1, 1, 1, 1, -1, -1, 1,  1, 1,
    -1, -1, 1, 1, 1};
  if (i < 1) {
    // Return max num species per reaction
    nspec = 5;
  } else {
    if (i > 729) {
      nspec = -1;
    } else {
      nspec = ns[i - 1];
      for (int j = 0; j < nspec; ++j) {
        ki[j] = kiv[(i - 1) * 5 + j] + 1;
        nu[j] = nuv[(i - 1) * 5 + j];
      }
    }
  }
}

// Returns the progress rates of each reactions
// Given P, T, and mole fractions
void
CKKFKR(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real q_f[],
  amrex::Real q_r[])
{
  amrex::Real c[88]; // temporary storage
  amrex::Real PORT =
    1e6 * P / (8.31446261815324e+07 * T); // 1e6 * P/RT so c goes to SI units

  // Compute conversion, see Eq 10
  for (int id = 0; id < 88; ++id) {
    c[id] = x[id] * PORT;
  }

  // convert to chemkin units
  progressRateFR(q_f, q_r, c, T);

  // convert to chemkin units
  for (int id = 0; id < 729; ++id) {
    q_f[id] *= 1.0e-6;
    q_r[id] *= 1.0e-6;
  }
}

// compute the progress rate for each reaction
// USES progressRate : todo switch to GPU
void
progressRateFR(
  amrex::Real* q_f, amrex::Real* q_r, amrex::Real* sc, amrex::Real T)
{
  const amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  amrex::Real invT = 1.0 / tc[1];
  // compute the Gibbs free energy
  amrex::Real g_RT[88];
  gibbs(g_RT, tc);

  amrex::Real sc_qss[1];
  comp_qfqr(q_f, q_r, sc, sc_qss, tc, invT);
}

// save atomic weights into array
void
atomicWeight(amrex::Real* awt)
{
  awt[0] = 1.008000;  // H
  awt[1] = 12.011000; // C
  awt[2] = 15.999000; // O
  awt[3] = 14.007000; // N
}

// get atomic weight for all elements
void
CKAWT(amrex::Real* awt)
{
  atomicWeight(awt);
}

// Returns the elemental composition
// of the speciesi (mdim is num of elements)
void
CKNCF(int* ncf)
{
  int kd = 4;
  // Zero ncf
  for (int id = 0; id < kd * 88; ++id) {
    ncf[id] = 0;
  }

  // h
  ncf[0 * kd + 0] = 1; // H

  // h2
  ncf[1 * kd + 0] = 2; // H

  // o
  ncf[2 * kd + 2] = 1; // O

  // o2
  ncf[3 * kd + 2] = 2; // O

  // oh
  ncf[4 * kd + 0] = 1; // H
  ncf[4 * kd + 2] = 1; // O

  // h2o
  ncf[5 * kd + 0] = 2; // H
  ncf[5 * kd + 2] = 1; // O

  // co
  ncf[6 * kd + 1] = 1; // C
  ncf[6 * kd + 2] = 1; // O

  // hco
  ncf[7 * kd + 1] = 1; // C
  ncf[7 * kd + 0] = 1; // H
  ncf[7 * kd + 2] = 1; // O

  // co2
  ncf[8 * kd + 1] = 1; // C
  ncf[8 * kd + 2] = 2; // O

  // ch3
  ncf[9 * kd + 1] = 1; // C
  ncf[9 * kd + 0] = 3; // H

  // ch4
  ncf[10 * kd + 1] = 1; // C
  ncf[10 * kd + 0] = 4; // H

  // ho2
  ncf[11 * kd + 0] = 1; // H
  ncf[11 * kd + 2] = 2; // O

  // h2o2
  ncf[12 * kd + 0] = 2; // H
  ncf[12 * kd + 2] = 2; // O

  // ch2o
  ncf[13 * kd + 1] = 1; // C
  ncf[13 * kd + 0] = 2; // H
  ncf[13 * kd + 2] = 1; // O

  // ch3o
  ncf[14 * kd + 1] = 1; // C
  ncf[14 * kd + 0] = 3; // H
  ncf[14 * kd + 2] = 1; // O

  // c2h6
  ncf[15 * kd + 1] = 2; // C
  ncf[15 * kd + 0] = 6; // H

  // c2h4
  ncf[16 * kd + 1] = 2; // C
  ncf[16 * kd + 0] = 4; // H

  // c2h5
  ncf[17 * kd + 1] = 2; // C
  ncf[17 * kd + 0] = 5; // H

  // c2h2
  ncf[18 * kd + 1] = 2; // C
  ncf[18 * kd + 0] = 2; // H

  // c2h3
  ncf[19 * kd + 1] = 2; // C
  ncf[19 * kd + 0] = 3; // H

  // ch2co
  ncf[20 * kd + 1] = 2; // C
  ncf[20 * kd + 0] = 2; // H
  ncf[20 * kd + 2] = 1; // O

  // hcco
  ncf[21 * kd + 1] = 2; // C
  ncf[21 * kd + 0] = 1; // H
  ncf[21 * kd + 2] = 1; // O

  // ch3co
  ncf[22 * kd + 1] = 2; // C
  ncf[22 * kd + 0] = 3; // H
  ncf[22 * kd + 2] = 1; // O

  // ch2cho
  ncf[23 * kd + 1] = 2; // C
  ncf[23 * kd + 0] = 3; // H
  ncf[23 * kd + 2] = 1; // O

  // ch3cho
  ncf[24 * kd + 1] = 2; // C
  ncf[24 * kd + 0] = 4; // H
  ncf[24 * kd + 2] = 1; // O

  // c3h4-a
  ncf[25 * kd + 1] = 3; // C
  ncf[25 * kd + 0] = 4; // H

  // c3h6
  ncf[26 * kd + 1] = 3; // C
  ncf[26 * kd + 0] = 6; // H

  // c4h6
  ncf[27 * kd + 1] = 4; // C
  ncf[27 * kd + 0] = 6; // H

  // nc3h7
  ncf[28 * kd + 1] = 3; // C
  ncf[28 * kd + 0] = 7; // H

  // c4h7
  ncf[29 * kd + 1] = 4; // C
  ncf[29 * kd + 0] = 7; // H

  // c4h8-1
  ncf[30 * kd + 1] = 4; // C
  ncf[30 * kd + 0] = 8; // H

  // pc4h9
  ncf[31 * kd + 1] = 4; // C
  ncf[31 * kd + 0] = 9; // H

  // ch3coch2
  ncf[32 * kd + 1] = 3; // C
  ncf[32 * kd + 0] = 5; // H
  ncf[32 * kd + 2] = 1; // O

  // c2h5cho
  ncf[33 * kd + 1] = 3; // C
  ncf[33 * kd + 0] = 6; // H
  ncf[33 * kd + 2] = 1; // O

  // c2h5co
  ncf[34 * kd + 1] = 3; // C
  ncf[34 * kd + 0] = 5; // H
  ncf[34 * kd + 2] = 1; // O

  // c5h9
  ncf[35 * kd + 1] = 5; // C
  ncf[35 * kd + 0] = 9; // H

  // c5h10-1
  ncf[36 * kd + 1] = 5;  // C
  ncf[36 * kd + 0] = 10; // H

  // c2h5o
  ncf[37 * kd + 1] = 2; // C
  ncf[37 * kd + 0] = 5; // H
  ncf[37 * kd + 2] = 1; // O

  // ch3o2
  ncf[38 * kd + 1] = 1; // C
  ncf[38 * kd + 0] = 3; // H
  ncf[38 * kd + 2] = 2; // O

  // ch3o2h
  ncf[39 * kd + 1] = 1; // C
  ncf[39 * kd + 0] = 4; // H
  ncf[39 * kd + 2] = 2; // O

  // c2h3co
  ncf[40 * kd + 1] = 3; // C
  ncf[40 * kd + 0] = 3; // H
  ncf[40 * kd + 2] = 1; // O

  // c2h3cho
  ncf[41 * kd + 1] = 3; // C
  ncf[41 * kd + 0] = 4; // H
  ncf[41 * kd + 2] = 1; // O

  // c3h5o
  ncf[42 * kd + 1] = 3; // C
  ncf[42 * kd + 0] = 5; // H
  ncf[42 * kd + 2] = 1; // O

  // c4h7o
  ncf[43 * kd + 1] = 4; // C
  ncf[43 * kd + 0] = 7; // H
  ncf[43 * kd + 2] = 1; // O

  // c4h8ooh1-3o2
  ncf[44 * kd + 1] = 4; // C
  ncf[44 * kd + 0] = 9; // H
  ncf[44 * kd + 2] = 4; // O

  // c4h8ooh1-3
  ncf[45 * kd + 1] = 4; // C
  ncf[45 * kd + 0] = 9; // H
  ncf[45 * kd + 2] = 2; // O

  // pc4h9o2
  ncf[46 * kd + 1] = 4; // C
  ncf[46 * kd + 0] = 9; // H
  ncf[46 * kd + 2] = 2; // O

  // c3h5-a
  ncf[47 * kd + 1] = 3; // C
  ncf[47 * kd + 0] = 5; // H

  // c3h3
  ncf[48 * kd + 1] = 3; // C
  ncf[48 * kd + 0] = 3; // H

  // c3h2
  ncf[49 * kd + 1] = 3; // C
  ncf[49 * kd + 0] = 2; // H

  // ch2(s)
  ncf[50 * kd + 1] = 1; // C
  ncf[50 * kd + 0] = 2; // H

  // nc4ket13
  ncf[51 * kd + 1] = 4; // C
  ncf[51 * kd + 0] = 8; // H
  ncf[51 * kd + 2] = 3; // O

  // nc3h7cho
  ncf[52 * kd + 1] = 4; // C
  ncf[52 * kd + 0] = 8; // H
  ncf[52 * kd + 2] = 1; // O

  // nc3h7co
  ncf[53 * kd + 1] = 4; // C
  ncf[53 * kd + 0] = 7; // H
  ncf[53 * kd + 2] = 1; // O

  // c2h5coch2
  ncf[54 * kd + 1] = 4; // C
  ncf[54 * kd + 0] = 7; // H
  ncf[54 * kd + 2] = 1; // O

  // nc3h7coch2
  ncf[55 * kd + 1] = 5; // C
  ncf[55 * kd + 0] = 9; // H
  ncf[55 * kd + 2] = 1; // O

  // nc4h9cho
  ncf[56 * kd + 1] = 5;  // C
  ncf[56 * kd + 0] = 10; // H
  ncf[56 * kd + 2] = 1;  // O

  // nc4h9co
  ncf[57 * kd + 1] = 5; // C
  ncf[57 * kd + 0] = 9; // H
  ncf[57 * kd + 2] = 1; // O

  // nc7h16
  ncf[58 * kd + 1] = 7;  // C
  ncf[58 * kd + 0] = 16; // H

  // c7h15-1
  ncf[59 * kd + 1] = 7;  // C
  ncf[59 * kd + 0] = 15; // H

  // c7h15-2
  ncf[60 * kd + 1] = 7;  // C
  ncf[60 * kd + 0] = 15; // H

  // c7h15-3
  ncf[61 * kd + 1] = 7;  // C
  ncf[61 * kd + 0] = 15; // H

  // c7h15-4
  ncf[62 * kd + 1] = 7;  // C
  ncf[62 * kd + 0] = 15; // H

  // c7h14-2
  ncf[63 * kd + 1] = 7;  // C
  ncf[63 * kd + 0] = 14; // H

  // c7h14-3
  ncf[64 * kd + 1] = 7;  // C
  ncf[64 * kd + 0] = 14; // H

  // c7h15o2-1
  ncf[65 * kd + 1] = 7;  // C
  ncf[65 * kd + 0] = 15; // H
  ncf[65 * kd + 2] = 2;  // O

  // c7h15o2-2
  ncf[66 * kd + 1] = 7;  // C
  ncf[66 * kd + 0] = 15; // H
  ncf[66 * kd + 2] = 2;  // O

  // c7h15o2-3
  ncf[67 * kd + 1] = 7;  // C
  ncf[67 * kd + 0] = 15; // H
  ncf[67 * kd + 2] = 2;  // O

  // c7h15o2-4
  ncf[68 * kd + 1] = 7;  // C
  ncf[68 * kd + 0] = 15; // H
  ncf[68 * kd + 2] = 2;  // O

  // c7h14ooh1-3
  ncf[69 * kd + 1] = 7;  // C
  ncf[69 * kd + 0] = 15; // H
  ncf[69 * kd + 2] = 2;  // O

  // c7h14ooh2-3
  ncf[70 * kd + 1] = 7;  // C
  ncf[70 * kd + 0] = 15; // H
  ncf[70 * kd + 2] = 2;  // O

  // c7h14ooh2-4
  ncf[71 * kd + 1] = 7;  // C
  ncf[71 * kd + 0] = 15; // H
  ncf[71 * kd + 2] = 2;  // O

  // c7h14ooh3-2
  ncf[72 * kd + 1] = 7;  // C
  ncf[72 * kd + 0] = 15; // H
  ncf[72 * kd + 2] = 2;  // O

  // c7h14ooh3-4
  ncf[73 * kd + 1] = 7;  // C
  ncf[73 * kd + 0] = 15; // H
  ncf[73 * kd + 2] = 2;  // O

  // c7h14ooh3-5
  ncf[74 * kd + 1] = 7;  // C
  ncf[74 * kd + 0] = 15; // H
  ncf[74 * kd + 2] = 2;  // O

  // c7h14ooh4-2
  ncf[75 * kd + 1] = 7;  // C
  ncf[75 * kd + 0] = 15; // H
  ncf[75 * kd + 2] = 2;  // O

  // c7h14ooh4-3
  ncf[76 * kd + 1] = 7;  // C
  ncf[76 * kd + 0] = 15; // H
  ncf[76 * kd + 2] = 2;  // O

  // c7h14ooh1-3o2
  ncf[77 * kd + 1] = 7;  // C
  ncf[77 * kd + 0] = 15; // H
  ncf[77 * kd + 2] = 4;  // O

  // c7h14ooh2-4o2
  ncf[78 * kd + 1] = 7;  // C
  ncf[78 * kd + 0] = 15; // H
  ncf[78 * kd + 2] = 4;  // O

  // c7h14ooh3-5o2
  ncf[79 * kd + 1] = 7;  // C
  ncf[79 * kd + 0] = 15; // H
  ncf[79 * kd + 2] = 4;  // O

  // c7h14ooh4-2o2
  ncf[80 * kd + 1] = 7;  // C
  ncf[80 * kd + 0] = 15; // H
  ncf[80 * kd + 2] = 4;  // O

  // c7h14o1-3
  ncf[81 * kd + 1] = 7;  // C
  ncf[81 * kd + 0] = 14; // H
  ncf[81 * kd + 2] = 1;  // O

  // c7h14o2-4
  ncf[82 * kd + 1] = 7;  // C
  ncf[82 * kd + 0] = 14; // H
  ncf[82 * kd + 2] = 1;  // O

  // nc7ket13
  ncf[83 * kd + 1] = 7;  // C
  ncf[83 * kd + 0] = 14; // H
  ncf[83 * kd + 2] = 3;  // O

  // nc7ket24
  ncf[84 * kd + 1] = 7;  // C
  ncf[84 * kd + 0] = 14; // H
  ncf[84 * kd + 2] = 3;  // O

  // nc7ket35
  ncf[85 * kd + 1] = 7;  // C
  ncf[85 * kd + 0] = 14; // H
  ncf[85 * kd + 2] = 3;  // O

  // nc7ket42
  ncf[86 * kd + 1] = 7;  // C
  ncf[86 * kd + 0] = 14; // H
  ncf[86 * kd + 2] = 3;  // O

  // n2
  ncf[87 * kd + 3] = 2; // N
}

// Returns the vector of strings of element names
void
CKSYME_STR(amrex::Vector<std::string>& ename)
{
  ename.resize(4);
  ename[0] = "H";
  ename[1] = "C";
  ename[2] = "O";
  ename[3] = "N";
}

// Returns the vector of strings of species names
void
CKSYMS_STR(amrex::Vector<std::string>& kname)
{
  kname.resize(88);
  kname[0] = "h";
  kname[1] = "h2";
  kname[2] = "o";
  kname[3] = "o2";
  kname[4] = "oh";
  kname[5] = "h2o";
  kname[6] = "co";
  kname[7] = "hco";
  kname[8] = "co2";
  kname[9] = "ch3";
  kname[10] = "ch4";
  kname[11] = "ho2";
  kname[12] = "h2o2";
  kname[13] = "ch2o";
  kname[14] = "ch3o";
  kname[15] = "c2h6";
  kname[16] = "c2h4";
  kname[17] = "c2h5";
  kname[18] = "c2h2";
  kname[19] = "c2h3";
  kname[20] = "ch2co";
  kname[21] = "hcco";
  kname[22] = "ch3co";
  kname[23] = "ch2cho";
  kname[24] = "ch3cho";
  kname[25] = "c3h4-a";
  kname[26] = "c3h6";
  kname[27] = "c4h6";
  kname[28] = "nc3h7";
  kname[29] = "c4h7";
  kname[30] = "c4h8-1";
  kname[31] = "pc4h9";
  kname[32] = "ch3coch2";
  kname[33] = "c2h5cho";
  kname[34] = "c2h5co";
  kname[35] = "c5h9";
  kname[36] = "c5h10-1";
  kname[37] = "c2h5o";
  kname[38] = "ch3o2";
  kname[39] = "ch3o2h";
  kname[40] = "c2h3co";
  kname[41] = "c2h3cho";
  kname[42] = "c3h5o";
  kname[43] = "c4h7o";
  kname[44] = "c4h8ooh1-3o2";
  kname[45] = "c4h8ooh1-3";
  kname[46] = "pc4h9o2";
  kname[47] = "c3h5-a";
  kname[48] = "c3h3";
  kname[49] = "c3h2";
  kname[50] = "ch2(s)";
  kname[51] = "nc4ket13";
  kname[52] = "nc3h7cho";
  kname[53] = "nc3h7co";
  kname[54] = "c2h5coch2";
  kname[55] = "nc3h7coch2";
  kname[56] = "nc4h9cho";
  kname[57] = "nc4h9co";
  kname[58] = "nc7h16";
  kname[59] = "c7h15-1";
  kname[60] = "c7h15-2";
  kname[61] = "c7h15-3";
  kname[62] = "c7h15-4";
  kname[63] = "c7h14-2";
  kname[64] = "c7h14-3";
  kname[65] = "c7h15o2-1";
  kname[66] = "c7h15o2-2";
  kname[67] = "c7h15o2-3";
  kname[68] = "c7h15o2-4";
  kname[69] = "c7h14ooh1-3";
  kname[70] = "c7h14ooh2-3";
  kname[71] = "c7h14ooh2-4";
  kname[72] = "c7h14ooh3-2";
  kname[73] = "c7h14ooh3-4";
  kname[74] = "c7h14ooh3-5";
  kname[75] = "c7h14ooh4-2";
  kname[76] = "c7h14ooh4-3";
  kname[77] = "c7h14ooh1-3o2";
  kname[78] = "c7h14ooh2-4o2";
  kname[79] = "c7h14ooh3-5o2";
  kname[80] = "c7h14ooh4-2o2";
  kname[81] = "c7h14o1-3";
  kname[82] = "c7h14o2-4";
  kname[83] = "nc7ket13";
  kname[84] = "nc7ket24";
  kname[85] = "nc7ket35";
  kname[86] = "nc7ket42";
  kname[87] = "n2";
}

// compute the sparsity pattern of the chemistry Jacobian
void
SPARSITY_INFO(int* nJdata, const int* consP, int NCELLS)
{
  amrex::GpuArray<amrex::Real, 7921> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 88> conc = {0.0};
  for (int n = 0; n < 88; n++) {
    conc[n] = 1.0 / 88.000000;
  }
  aJacobian(Jac.data(), conc.data(), 1500.0, *consP);

  int nJdata_tmp = 0;
  for (int k = 0; k < 89; k++) {
    for (int l = 0; l < 89; l++) {
      if (Jac[89 * k + l] != 0.0) {
        nJdata_tmp = nJdata_tmp + 1;
      }
    }
  }

  *nJdata = NCELLS * nJdata_tmp;
}

// compute the sparsity pattern of the system Jacobian
void
SPARSITY_INFO_SYST(int* nJdata, const int* consP, int NCELLS)
{
  amrex::GpuArray<amrex::Real, 7921> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 88> conc = {0.0};
  for (int n = 0; n < 88; n++) {
    conc[n] = 1.0 / 88.000000;
  }
  aJacobian(Jac.data(), conc.data(), 1500.0, *consP);

  int nJdata_tmp = 0;
  for (int k = 0; k < 89; k++) {
    for (int l = 0; l < 89; l++) {
      if (k == l) {
        nJdata_tmp = nJdata_tmp + 1;
      } else {
        if (Jac[89 * k + l] != 0.0) {
          nJdata_tmp = nJdata_tmp + 1;
        }
      }
    }
  }

  *nJdata = NCELLS * nJdata_tmp;
}

// compute the sparsity pattern of the simplified (for preconditioning) system
// Jacobian
void
SPARSITY_INFO_SYST_SIMPLIFIED(int* nJdata, const int* consP)
{
  amrex::GpuArray<amrex::Real, 7921> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 88> conc = {0.0};
  for (int n = 0; n < 88; n++) {
    conc[n] = 1.0 / 88.000000;
  }
  aJacobian_precond(Jac.data(), conc.data(), 1500.0, *consP);

  int nJdata_tmp = 0;
  for (int k = 0; k < 89; k++) {
    for (int l = 0; l < 89; l++) {
      if (k == l) {
        nJdata_tmp = nJdata_tmp + 1;
      } else {
        if (Jac[89 * k + l] != 0.0) {
          nJdata_tmp = nJdata_tmp + 1;
        }
      }
    }
  }

  nJdata[0] = nJdata_tmp;
}

// compute the sparsity pattern of the chemistry Jacobian in CSC format -- base
// 0
void
SPARSITY_PREPROC_CSC(int* rowVals, int* colPtrs, const int* consP, int NCELLS)
{
  amrex::GpuArray<amrex::Real, 7921> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 88> conc = {0.0};
  for (int n = 0; n < 88; n++) {
    conc[n] = 1.0 / 88.000000;
  }
  aJacobian(Jac.data(), conc.data(), 1500.0, *consP);

  colPtrs[0] = 0;
  int nJdata_tmp = 0;
  for (int nc = 0; nc < NCELLS; nc++) {
    int offset_row = nc * 89;
    int offset_col = nc * 89;
    for (int k = 0; k < 89; k++) {
      for (int l = 0; l < 89; l++) {
        if (Jac[89 * k + l] != 0.0) {
          rowVals[nJdata_tmp] = l + offset_row;
          nJdata_tmp = nJdata_tmp + 1;
        }
      }
      colPtrs[offset_col + (k + 1)] = nJdata_tmp;
    }
  }
}

// compute the sparsity pattern of the chemistry Jacobian in CSR format -- base
// 0
void
SPARSITY_PREPROC_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base)
{
  amrex::GpuArray<amrex::Real, 7921> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 88> conc = {0.0};
  for (int n = 0; n < 88; n++) {
    conc[n] = 1.0 / 88.000000;
  }
  aJacobian(Jac.data(), conc.data(), 1500.0, *consP);

  if (base == 1) {
    rowPtrs[0] = 1;
    int nJdata_tmp = 1;
    for (int nc = 0; nc < NCELLS; nc++) {
      int offset = nc * 89;
      for (int l = 0; l < 89; l++) {
        for (int k = 0; k < 89; k++) {
          if (Jac[89 * k + l] != 0.0) {
            colVals[nJdata_tmp - 1] = k + 1 + offset;
            nJdata_tmp = nJdata_tmp + 1;
          }
        }
        rowPtrs[offset + (l + 1)] = nJdata_tmp;
      }
    }
  } else {
    rowPtrs[0] = 0;
    int nJdata_tmp = 0;
    for (int nc = 0; nc < NCELLS; nc++) {
      int offset = nc * 89;
      for (int l = 0; l < 89; l++) {
        for (int k = 0; k < 89; k++) {
          if (Jac[89 * k + l] != 0.0) {
            colVals[nJdata_tmp] = k + offset;
            nJdata_tmp = nJdata_tmp + 1;
          }
        }
        rowPtrs[offset + (l + 1)] = nJdata_tmp;
      }
    }
  }
}

// compute the sparsity pattern of the system Jacobian
// CSR format BASE is user choice
void
SPARSITY_PREPROC_SYST_CSR(
  int* colVals, int* rowPtr, const int* consP, int NCELLS, int base)
{
  amrex::GpuArray<amrex::Real, 7921> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 88> conc = {0.0};
  for (int n = 0; n < 88; n++) {
    conc[n] = 1.0 / 88.000000;
  }
  aJacobian(Jac.data(), conc.data(), 1500.0, *consP);

  if (base == 1) {
    rowPtr[0] = 1;
    int nJdata_tmp = 1;
    for (int nc = 0; nc < NCELLS; nc++) {
      int offset = nc * 89;
      for (int l = 0; l < 89; l++) {
        for (int k = 0; k < 89; k++) {
          if (k == l) {
            colVals[nJdata_tmp - 1] = l + 1 + offset;
            nJdata_tmp = nJdata_tmp + 1;
          } else {
            if (Jac[89 * k + l] != 0.0) {
              colVals[nJdata_tmp - 1] = k + 1 + offset;
              nJdata_tmp = nJdata_tmp + 1;
            }
          }
        }
        rowPtr[offset + (l + 1)] = nJdata_tmp;
      }
    }
  } else {
    rowPtr[0] = 0;
    int nJdata_tmp = 0;
    for (int nc = 0; nc < NCELLS; nc++) {
      int offset = nc * 89;
      for (int l = 0; l < 89; l++) {
        for (int k = 0; k < 89; k++) {
          if (k == l) {
            colVals[nJdata_tmp] = l + offset;
            nJdata_tmp = nJdata_tmp + 1;
          } else {
            if (Jac[89 * k + l] != 0.0) {
              colVals[nJdata_tmp] = k + offset;
              nJdata_tmp = nJdata_tmp + 1;
            }
          }
        }
        rowPtr[offset + (l + 1)] = nJdata_tmp;
      }
    }
  }
}

// compute the sparsity pattern of the simplified (for precond) system Jacobian
// on CPU BASE 0
void
SPARSITY_PREPROC_SYST_SIMPLIFIED_CSC(
  int* rowVals, int* colPtrs, int* indx, const int* consP)
{
  amrex::GpuArray<amrex::Real, 7921> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 88> conc = {0.0};
  for (int n = 0; n < 88; n++) {
    conc[n] = 1.0 / 88.000000;
  }
  aJacobian_precond(Jac.data(), conc.data(), 1500.0, *consP);

  colPtrs[0] = 0;
  int nJdata_tmp = 0;
  for (int k = 0; k < 89; k++) {
    for (int l = 0; l < 89; l++) {
      if (k == l) {
        rowVals[nJdata_tmp] = l;
        indx[nJdata_tmp] = 89 * k + l;
        nJdata_tmp = nJdata_tmp + 1;
      } else {
        if (Jac[89 * k + l] != 0.0) {
          rowVals[nJdata_tmp] = l;
          indx[nJdata_tmp] = 89 * k + l;
          nJdata_tmp = nJdata_tmp + 1;
        }
      }
    }
    colPtrs[k + 1] = nJdata_tmp;
  }
}

// compute the sparsity pattern of the simplified (for precond) system Jacobian
// CSR format BASE is under choice
void
SPARSITY_PREPROC_SYST_SIMPLIFIED_CSR(
  int* colVals, int* rowPtr, const int* consP, int base)
{
  amrex::GpuArray<amrex::Real, 7921> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 88> conc = {0.0};
  for (int n = 0; n < 88; n++) {
    conc[n] = 1.0 / 88.000000;
  }
  aJacobian_precond(Jac.data(), conc.data(), 1500.0, *consP);

  if (base == 1) {
    rowPtr[0] = 1;
    int nJdata_tmp = 1;
    for (int l = 0; l < 89; l++) {
      for (int k = 0; k < 89; k++) {
        if (k == l) {
          colVals[nJdata_tmp - 1] = l + 1;
          nJdata_tmp = nJdata_tmp + 1;
        } else {
          if (Jac[89 * k + l] != 0.0) {
            colVals[nJdata_tmp - 1] = k + 1;
            nJdata_tmp = nJdata_tmp + 1;
          }
        }
      }
      rowPtr[l + 1] = nJdata_tmp;
    }
  } else {
    rowPtr[0] = 0;
    int nJdata_tmp = 0;
    for (int l = 0; l < 89; l++) {
      for (int k = 0; k < 89; k++) {
        if (k == l) {
          colVals[nJdata_tmp] = l;
          nJdata_tmp = nJdata_tmp + 1;
        } else {
          if (Jac[89 * k + l] != 0.0) {
            colVals[nJdata_tmp] = k;
            nJdata_tmp = nJdata_tmp + 1;
          }
        }
      }
      rowPtr[l + 1] = nJdata_tmp;
    }
  }
}
