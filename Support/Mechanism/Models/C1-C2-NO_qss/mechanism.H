#ifndef MECHANISM_H
#define MECHANISM_H

#include <AMReX_Gpu.H>
#include <AMReX_REAL.H>

/* Elements
0  Ar
1  N
2  H
3  O
4  C
*/

// Species
#define AR_ID 0
#define N2_ID 1
#define H_ID 2
#define O_ID 3
#define OH_ID 4
#define HO2_ID 5
#define H2_ID 6
#define H2O_ID 7
#define H2O2_ID 8
#define O2_ID 9
#define CH3_ID 10
#define CH4_ID 11
#define HCO_ID 12
#define CH2O_ID 13
#define CH3O_ID 14
#define CH3OH_ID 15
#define CO_ID 16
#define CO2_ID 17
#define C2H2_ID 18
#define C2H3_ID 19
#define C2H4_ID 20
#define C2H5_ID 21
#define C2H6_ID 22
#define HCCO_ID 23
#define CH2CO_ID 24
#define CH2CHO_ID 25
#define CH2OCH2_ID 26
#define aC3H4_ID 27
#define aC3H5_ID 28
#define C3H6_ID 29
#define nC3H7_ID 30
#define C4H81_ID 31
#define N_ID 32
#define NO2_ID 33
#define HCNO_ID 34
#define HNCO_ID 35
#define NCO_ID 36
#define CH3O2_ID 37

#define NUM_ELEMENTS 5
#define NUM_SPECIES 38
#define NUM_IONS 0
#define NUM_REACTIONS 269

#define NUM_FIT 4

//  ALWAYS on CPU stuff -- can have different def depending on if we are CPU or
//  GPU based. Defined in mechanism.cpp
void atomicWeight(amrex::Real* awt);
//  MISC
void CKAWT(amrex::Real* awt);
void CKNCF(int* ncf);
void CKSYME_STR(amrex::Vector<std::string>& ename);
void CKSYMS_STR(amrex::Vector<std::string>& kname);
void GET_RMAP(int* _rmap);
void CKINU(int* i, int* nspec, int* ki, int* nu);
void CKKFKR(
  amrex::Real* P,
  amrex::Real* T,
  amrex::Real* x,
  amrex::Real* q_f,
  amrex::Real* q_r);
void progressRateFR(
  amrex::Real* q_f, amrex::Real* q_r, amrex::Real* sc, amrex::Real T);
//  SPARSE INFORMATION
void SPARSITY_INFO(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST_SIMPLIFIED(int* nJdata, const int* consP);
void
SPARSITY_PREPROC_CSC(int* rowVals, int* colPtrs, const int* consP, int NCELLS);
void SPARSITY_PREPROC_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSC(
  int* rowVals, int* colPtrs, int* indx, const int* consP);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSR(
  int* colVals, int* rowPtr, const int* consP, int base);

// A few mechanism parameters
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKINDX(int& mm, int& kk, int& ii, int& nfit)
{
  mm = 5;
  kk = 38;
  ii = 269;
  nfit = -1; // Why do you need this anyway ?
}

//  inverse molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_imw(amrex::Real* imw_new)
{
  imw_new[0] = 1.0 / 39.950000;  // AR
  imw_new[1] = 1.0 / 28.014000;  // N2
  imw_new[2] = 1.0 / 1.008000;   // H
  imw_new[3] = 1.0 / 15.999000;  // O
  imw_new[4] = 1.0 / 17.007000;  // OH
  imw_new[5] = 1.0 / 33.006000;  // HO2
  imw_new[6] = 1.0 / 2.016000;   // H2
  imw_new[7] = 1.0 / 18.015000;  // H2O
  imw_new[8] = 1.0 / 34.014000;  // H2O2
  imw_new[9] = 1.0 / 31.998000;  // O2
  imw_new[10] = 1.0 / 15.035000; // CH3
  imw_new[11] = 1.0 / 16.043000; // CH4
  imw_new[12] = 1.0 / 29.018000; // HCO
  imw_new[13] = 1.0 / 30.026000; // CH2O
  imw_new[14] = 1.0 / 31.034000; // CH3O
  imw_new[15] = 1.0 / 32.042000; // CH3OH
  imw_new[16] = 1.0 / 28.010000; // CO
  imw_new[17] = 1.0 / 44.009000; // CO2
  imw_new[18] = 1.0 / 26.038000; // C2H2
  imw_new[19] = 1.0 / 27.046000; // C2H3
  imw_new[20] = 1.0 / 28.054000; // C2H4
  imw_new[21] = 1.0 / 29.062000; // C2H5
  imw_new[22] = 1.0 / 30.070000; // C2H6
  imw_new[23] = 1.0 / 41.029000; // HCCO
  imw_new[24] = 1.0 / 42.037000; // CH2CO
  imw_new[25] = 1.0 / 43.045000; // CH2CHO
  imw_new[26] = 1.0 / 44.053000; // CH2OCH2
  imw_new[27] = 1.0 / 40.065000; // aC3H4
  imw_new[28] = 1.0 / 41.073000; // aC3H5
  imw_new[29] = 1.0 / 42.081000; // C3H6
  imw_new[30] = 1.0 / 43.089000; // nC3H7
  imw_new[31] = 1.0 / 56.108000; // C4H81
  imw_new[32] = 1.0 / 14.007000; // N
  imw_new[33] = 1.0 / 46.005000; // NO2
  imw_new[34] = 1.0 / 43.025000; // HCNO
  imw_new[35] = 1.0 / 43.025000; // HNCO
  imw_new[36] = 1.0 / 42.017000; // NCO
  imw_new[37] = 1.0 / 47.033000; // CH3O2
}

//  molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_mw(amrex::Real* mw_new)
{
  mw_new[0] = 39.950000;  // AR
  mw_new[1] = 28.014000;  // N2
  mw_new[2] = 1.008000;   // H
  mw_new[3] = 15.999000;  // O
  mw_new[4] = 17.007000;  // OH
  mw_new[5] = 33.006000;  // HO2
  mw_new[6] = 2.016000;   // H2
  mw_new[7] = 18.015000;  // H2O
  mw_new[8] = 34.014000;  // H2O2
  mw_new[9] = 31.998000;  // O2
  mw_new[10] = 15.035000; // CH3
  mw_new[11] = 16.043000; // CH4
  mw_new[12] = 29.018000; // HCO
  mw_new[13] = 30.026000; // CH2O
  mw_new[14] = 31.034000; // CH3O
  mw_new[15] = 32.042000; // CH3OH
  mw_new[16] = 28.010000; // CO
  mw_new[17] = 44.009000; // CO2
  mw_new[18] = 26.038000; // C2H2
  mw_new[19] = 27.046000; // C2H3
  mw_new[20] = 28.054000; // C2H4
  mw_new[21] = 29.062000; // C2H5
  mw_new[22] = 30.070000; // C2H6
  mw_new[23] = 41.029000; // HCCO
  mw_new[24] = 42.037000; // CH2CO
  mw_new[25] = 43.045000; // CH2CHO
  mw_new[26] = 44.053000; // CH2OCH2
  mw_new[27] = 40.065000; // aC3H4
  mw_new[28] = 41.073000; // aC3H5
  mw_new[29] = 42.081000; // C3H6
  mw_new[30] = 43.089000; // nC3H7
  mw_new[31] = 56.108000; // C4H81
  mw_new[32] = 14.007000; // N
  mw_new[33] = 46.005000; // NO2
  mw_new[34] = 43.025000; // HCNO
  mw_new[35] = 43.025000; // HNCO
  mw_new[36] = 42.017000; // NCO
  mw_new[37] = 47.033000; // CH3O2
}

//  Returns R, Rc, Patm
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRP(amrex::Real& ru, amrex::Real& ruc, amrex::Real& pa)
{
  ru = 8.31446261815324e+07;
  ruc = 1.98721558317399615845;
  pa = 1.01325e+06;
}

// compute Cv/R at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cv_R(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with no change at a midpoint T
  // species 0: AR
  species[0] = +1.50000000e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 1: N2
    species[1] = +2.29867700e+00 + 1.40824040e-03 * tc[1] -
                 3.96322200e-06 * tc[2] + 5.64151500e-09 * tc[3] -
                 2.44485400e-12 * tc[4];
    // species 2: H
    species[2] = +1.50000000e+00 + 7.05332819e-13 * tc[1] -
                 1.99591964e-15 * tc[2] + 2.30081632e-18 * tc[3] -
                 9.27732332e-22 * tc[4];
    // species 3: O
    species[3] = +2.16826710e+00 - 3.27931884e-03 * tc[1] +
                 6.64306396e-06 * tc[2] - 6.12806624e-09 * tc[3] +
                 2.11265971e-12 * tc[4];
    // species 4: OH
    species[4] = +3.12530561e+00 - 3.22544939e-03 * tc[1] +
                 6.52764691e-06 * tc[2] - 5.79853643e-09 * tc[3] +
                 2.06237379e-12 * tc[4];
    // species 5: HO2
    species[5] = +3.30179801e+00 - 4.74912051e-03 * tc[1] +
                 2.11582891e-05 * tc[2] - 2.42763894e-08 * tc[3] +
                 9.29225124e-12 * tc[4];
    // species 6: H2
    species[6] = +1.34433112e+00 + 7.98052075e-03 * tc[1] -
                 1.94781510e-05 * tc[2] + 2.01572094e-08 * tc[3] -
                 7.37611761e-12 * tc[4];
    // species 7: H2O
    species[7] = +3.19864056e+00 - 2.03643410e-03 * tc[1] +
                 6.52040211e-06 * tc[2] - 5.48797062e-09 * tc[3] +
                 1.77197817e-12 * tc[4];
    // species 8: H2O2
    species[8] = +3.27611269e+00 - 5.42822417e-04 * tc[1] +
                 1.67335701e-05 * tc[2] - 2.15770813e-08 * tc[3] +
                 8.62454363e-12 * tc[4];
    // species 9: O2
    species[9] = +2.78245636e+00 - 2.99673416e-03 * tc[1] +
                 9.84730201e-06 * tc[2] - 9.68129509e-09 * tc[3] +
                 3.24372837e-12 * tc[4];
    // species 10: CH3
    species[10] = +2.67359040e+00 + 2.01095175e-03 * tc[1] +
                  5.73021856e-06 * tc[2] - 6.87117425e-09 * tc[3] +
                  2.54385734e-12 * tc[4];
    // species 11: CH4
    species[11] = +4.14987613e+00 - 1.36709788e-02 * tc[1] +
                  4.91800599e-05 * tc[2] - 4.84743026e-08 * tc[3] +
                  1.66693956e-11 * tc[4];
    // species 12: HCO
    species[12] = +3.22118584e+00 - 3.24392532e-03 * tc[1] +
                  1.37799446e-05 * tc[2] - 1.33144093e-08 * tc[3] +
                  4.33768865e-12 * tc[4];
    // species 13: CH2O
    species[13] = +3.79372315e+00 - 9.90833369e-03 * tc[1] +
                  3.73220008e-05 * tc[2] - 3.79285261e-08 * tc[3] +
                  1.31772652e-11 * tc[4];
    // species 14: CH3O
    species[14] = +2.71180502e+00 - 2.80463306e-03 * tc[1] +
                  3.76550971e-05 * tc[2] - 4.73072089e-08 * tc[3] +
                  1.86588420e-11 * tc[4];
    // species 15: CH3OH
    species[15] = +4.71539582e+00 - 1.52309129e-02 * tc[1] +
                  6.52441155e-05 * tc[2] - 7.10806889e-08 * tc[3] +
                  2.61352698e-11 * tc[4];
    // species 16: CO
    species[16] = +2.57953347e+00 - 6.10353680e-04 * tc[1] +
                  1.01681433e-06 * tc[2] + 9.07005884e-10 * tc[3] -
                  9.04424499e-13 * tc[4];
    // species 17: CO2
    species[17] = +1.35677352e+00 + 8.98459677e-03 * tc[1] -
                  7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                  1.43699548e-13 * tc[4];
    // species 18: C2H2
    species[18] = -1.91318906e-01 + 2.33615629e-02 * tc[1] -
                  3.55171815e-05 * tc[2] + 2.80152437e-08 * tc[3] -
                  8.50072974e-12 * tc[4];
    // species 19: C2H3
    species[19] = +2.21246645e+00 + 1.51479162e-03 * tc[1] +
                  2.59209412e-05 * tc[2] - 3.57657847e-08 * tc[3] +
                  1.47150873e-11 * tc[4];
    // species 20: C2H4
    species[20] = +2.95920148e+00 - 7.57052247e-03 * tc[1] +
                  5.70990292e-05 * tc[2] - 6.91588753e-08 * tc[3] +
                  2.69884373e-11 * tc[4];
    // species 21: C2H5
    species[21] = +3.30646568e+00 - 4.18658892e-03 * tc[1] +
                  4.97142807e-05 * tc[2] - 5.99126606e-08 * tc[3] +
                  2.30509004e-11 * tc[4];
    // species 22: C2H6
    species[22] = +3.29142492e+00 - 5.50154270e-03 * tc[1] +
                  5.99438288e-05 * tc[2] - 7.08466285e-08 * tc[3] +
                  2.68685771e-11 * tc[4];
    // species 23: HCCO
    species[23] = +1.25172140e+00 + 1.76550210e-02 * tc[1] -
                  2.37291010e-05 * tc[2] + 1.72757590e-08 * tc[3] -
                  5.06648110e-12 * tc[4];
    // species 24: CH2CO
    species[24] = +1.13583630e+00 + 1.81188721e-02 * tc[1] -
                  1.73947474e-05 * tc[2] + 9.34397568e-09 * tc[3] -
                  2.01457615e-12 * tc[4];
    // species 25: CH2CHO
    species[25] = +2.40906240e+00 + 1.07385740e-02 * tc[1] +
                  1.89149250e-06 * tc[2] - 7.15858310e-09 * tc[3] +
                  2.86738510e-12 * tc[4];
    // species 26: CH2OCH2
    species[26] = +2.75905320e+00 - 9.44121800e-03 * tc[1] +
                  8.03097210e-05 * tc[2] - 1.00807880e-07 * tc[3] +
                  4.00399210e-11 * tc[4];
    // species 27: aC3H4
    species[27] = +1.61304450e+00 + 1.21225750e-02 * tc[1] +
                  1.85398800e-05 * tc[2] - 3.45251490e-08 * tc[3] +
                  1.53350790e-11 * tc[4];
    // species 28: aC3H5
    species[28] = +3.63183500e-01 + 1.98138210e-02 * tc[1] +
                  1.24970600e-05 * tc[2] - 3.33555550e-08 * tc[3] +
                  1.58465710e-11 * tc[4];
    // species 29: C3H6
    species[29] = +4.93307000e-01 + 2.09251800e-02 * tc[1] +
                  4.48679400e-06 * tc[2] - 1.66891200e-08 * tc[3] +
                  7.15814600e-12 * tc[4];
    // species 30: nC3H7
    species[30] = +4.91173000e-02 + 2.60089730e-02 * tc[1] +
                  2.35425160e-06 * tc[2] - 1.95951320e-08 * tc[3] +
                  9.37202070e-12 * tc[4];
    // species 31: C4H81
    species[31] = +1.81138000e-01 + 3.08533800e-02 * tc[1] +
                  5.08652470e-06 * tc[2] - 2.46548880e-08 * tc[3] +
                  1.11101930e-11 * tc[4];
    // species 32: N
    species[32] = +1.50000000e+00 + 0.00000000e+00 * tc[1] +
                  0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                  0.00000000e+00 * tc[4];
    // species 33: NO2
    species[33] = +2.94403120e+00 - 1.58542900e-03 * tc[1] +
                  1.66578120e-05 * tc[2] - 2.04754260e-08 * tc[3] +
                  7.83505640e-12 * tc[4];
    // species 36: NCO
    species[36] = +1.82693080e+00 + 8.80516880e-03 * tc[1] -
                  8.38661340e-06 * tc[2] + 4.80169640e-09 * tc[3] -
                  1.33135950e-12 * tc[4];
    // species 37: CH3O2
    species[37] = +7.35339000e-01 + 2.22003400e-02 * tc[1] -
                  1.88414600e-05 * tc[2] + 9.50131400e-09 * tc[3] -
                  2.21726900e-12 * tc[4];
  } else {
    // species 1: N2
    species[1] = +1.92664000e+00 + 1.48797680e-03 * tc[1] -
                 5.68476000e-07 * tc[2] + 1.00970380e-10 * tc[3] -
                 6.75335100e-15 * tc[4];
    // species 2: H
    species[2] = +1.50000001e+00 - 2.30842973e-11 * tc[1] +
                 1.61561948e-14 * tc[2] - 4.73515235e-18 * tc[3] +
                 4.98197357e-22 * tc[4];
    // species 3: O
    species[3] = +1.56942078e+00 - 8.59741137e-05 * tc[1] +
                 4.19484589e-08 * tc[2] - 1.00177799e-11 * tc[3] +
                 1.22833691e-15 * tc[4];
    // species 4: OH
    species[4] = +1.86472886e+00 + 1.05650448e-03 * tc[1] -
                 2.59082758e-07 * tc[2] + 3.05218674e-11 * tc[3] -
                 1.33195876e-15 * tc[4];
    // species 5: HO2
    species[5] = +3.01721090e+00 + 2.23982013e-03 * tc[1] -
                 6.33658150e-07 * tc[2] + 1.14246370e-10 * tc[3] -
                 1.07908535e-14 * tc[4];
    // species 6: H2
    species[6] = +2.33727920e+00 - 4.94024731e-05 * tc[1] +
                 4.99456778e-07 * tc[2] - 1.79566394e-10 * tc[3] +
                 2.00255376e-14 * tc[4];
    // species 7: H2O
    species[7] = +2.03399249e+00 + 2.17691804e-03 * tc[1] -
                 1.64072518e-07 * tc[2] - 9.70419870e-11 * tc[3] +
                 1.68200992e-14 * tc[4];
    // species 8: H2O2
    species[8] = +3.16500285e+00 + 4.90831694e-03 * tc[1] -
                 1.90139225e-06 * tc[2] + 3.71185986e-10 * tc[3] -
                 2.87908305e-14 * tc[4];
    // species 9: O2
    species[9] = +2.28253784e+00 + 1.48308754e-03 * tc[1] -
                 7.57966669e-07 * tc[2] + 2.09470555e-10 * tc[3] -
                 2.16717794e-14 * tc[4];
    // species 10: CH3
    species[10] = +1.28571772e+00 + 7.23990037e-03 * tc[1] -
                  2.98714348e-06 * tc[2] + 5.95684644e-10 * tc[3] -
                  4.67154394e-14 * tc[4];
    // species 11: CH4
    species[11] = -9.25148505e-01 + 1.33909467e-02 * tc[1] -
                  5.73285809e-06 * tc[2] + 1.22292535e-09 * tc[3] -
                  1.01815230e-13 * tc[4];
    // species 12: HCO
    species[12] = +1.77217438e+00 + 4.95695526e-03 * tc[1] -
                  2.48445613e-06 * tc[2] + 5.89161778e-10 * tc[3] -
                  5.33508711e-14 * tc[4];
    // species 13: CH2O
    species[13] = +7.60690080e-01 + 9.20000082e-03 * tc[1] -
                  4.42258813e-06 * tc[2] + 1.00641212e-09 * tc[3] -
                  8.83855640e-14 * tc[4];
    // species 14: CH3O
    species[14] = +3.75779238e+00 + 7.44142474e-03 * tc[1] -
                  2.69705176e-06 * tc[2] + 4.38090504e-10 * tc[3] -
                  2.63537098e-14 * tc[4];
    // species 15: CH3OH
    species[15] = +7.89707910e-01 + 1.40938292e-02 * tc[1] -
                  6.36500835e-06 * tc[2] + 1.38171085e-09 * tc[3] -
                  1.17060220e-13 * tc[4];
    // species 16: CO
    species[16] = +1.71518561e+00 + 2.06252743e-03 * tc[1] -
                  9.98825771e-07 * tc[2] + 2.30053008e-10 * tc[3] -
                  2.03647716e-14 * tc[4];
    // species 17: CO2
    species[17] = +2.85746029e+00 + 4.41437026e-03 * tc[1] -
                  2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                  4.72084164e-14 * tc[4];
    // species 18: C2H2
    species[18] = +3.14756964e+00 + 5.96166664e-03 * tc[1] -
                  2.37294852e-06 * tc[2] + 4.67412171e-10 * tc[3] -
                  3.61235213e-14 * tc[4];
    // species 19: C2H3
    species[19] = +2.01672400e+00 + 1.03302292e-02 * tc[1] -
                  4.68082349e-06 * tc[2] + 1.01763288e-09 * tc[3] -
                  8.62607041e-14 * tc[4];
    // species 20: C2H4
    species[20] = +1.03611116e+00 + 1.46454151e-02 * tc[1] -
                  6.71077915e-06 * tc[2] + 1.47222923e-09 * tc[3] -
                  1.25706061e-13 * tc[4];
    // species 21: C2H5
    species[21] = +9.54656420e-01 + 1.73972722e-02 * tc[1] -
                  7.98206668e-06 * tc[2] + 1.75217689e-09 * tc[3] -
                  1.49641576e-13 * tc[4];
    // species 22: C2H6
    species[22] = +7.18815000e-02 + 2.16852677e-02 * tc[1] -
                  1.00256067e-05 * tc[2] + 2.21412001e-09 * tc[3] -
                  1.90002890e-13 * tc[4];
    // species 23: HCCO
    species[23] = +4.62820580e+00 + 4.08534010e-03 * tc[1] -
                  1.59345470e-06 * tc[2] + 2.86260520e-10 * tc[3] -
                  1.94078320e-14 * tc[4];
    // species 24: CH2CO
    species[24] = +3.51129732e+00 + 9.00359745e-03 * tc[1] -
                  4.16939635e-06 * tc[2] + 9.23345882e-10 * tc[3] -
                  7.94838201e-14 * tc[4];
    // species 25: CH2CHO
    species[25] = +4.97566990e+00 + 8.13059140e-03 * tc[1] -
                  2.74362450e-06 * tc[2] + 4.07030410e-10 * tc[3] -
                  2.17601710e-14 * tc[4];
    // species 26: CH2OCH2
    species[26] = +4.48876410e+00 + 1.20461900e-02 * tc[1] -
                  4.33369310e-06 * tc[2] + 7.00283110e-10 * tc[3] -
                  4.19490880e-14 * tc[4];
    // species 27: aC3H4
    species[27] = +5.31687220e+00 + 1.11337280e-02 * tc[1] -
                  3.96293780e-06 * tc[2] + 6.35642380e-10 * tc[3] -
                  3.78755400e-14 * tc[4];
    // species 28: aC3H5
    species[28] = +5.50078770e+00 + 1.43247310e-02 * tc[1] -
                  5.67816320e-06 * tc[2] + 1.10808010e-09 * tc[3] -
                  9.03638870e-14 * tc[4];
    // species 29: C3H6
    species[29] = +5.73225700e+00 + 1.49083400e-02 * tc[1] -
                  4.94989900e-06 * tc[2] + 7.21202200e-10 * tc[3] -
                  3.76620400e-14 * tc[4];
    // species 30: nC3H7
    species[30] = +6.70974790e+00 + 1.60314850e-02 * tc[1] -
                  5.27202380e-06 * tc[2] + 7.58883520e-10 * tc[3] -
                  3.88627190e-14 * tc[4];
    // species 31: C4H81
    species[31] = +1.05358410e+00 + 3.43505070e-02 * tc[1] -
                  1.58831970e-05 * tc[2] + 3.30896620e-09 * tc[3] -
                  2.53610450e-13 * tc[4];
    // species 32: N
    species[32] = +1.41594290e+00 + 1.74890650e-04 * tc[1] -
                  1.19023690e-07 * tc[2] + 3.02262450e-11 * tc[3] -
                  2.03609820e-15 * tc[4];
    // species 33: NO2
    species[33] = +3.88475420e+00 + 2.17239560e-03 * tc[1] -
                  8.28069060e-07 * tc[2] + 1.57475100e-10 * tc[3] -
                  1.05108950e-14 * tc[4];
    // species 36: NCO
    species[36] = +4.15218450e+00 + 2.30517610e-03 * tc[1] -
                  8.80331530e-07 * tc[2] + 1.47890980e-10 * tc[3] -
                  9.09779960e-15 * tc[4];
    // species 37: CH3O2
    species[37] = +7.00891500e+00 + 5.46924100e-03 * tc[1] -
                  1.24339200e-06 * tc[2] + 1.49181300e-10 * tc[3] -
                  7.61853300e-15 * tc[4];
  }

  // species with midpoint at T=1382 kelvin
  if (T < 1382) {
    // species 34: HCNO
    species[34] = +1.64727989e+00 + 1.27505342e-02 * tc[1] -
                  1.04794236e-05 * tc[2] + 4.41432836e-09 * tc[3] -
                  7.57521466e-13 * tc[4];
  } else {
    // species 34: HCNO
    species[34] = +5.59860456e+00 + 3.02778626e-03 * tc[1] -
                  1.07704346e-06 * tc[2] + 1.71666528e-10 * tc[3] -
                  1.01439391e-14 * tc[4];
  }

  // species with midpoint at T=1478 kelvin
  if (T < 1478) {
    // species 35: HNCO
    species[35] = +2.63096317e+00 + 7.30282357e-03 * tc[1] -
                  2.28050003e-06 * tc[2] - 6.61271298e-10 * tc[3] +
                  3.62235752e-13 * tc[4];
  } else {
    // species 35: HNCO
    species[35] = +5.22395134e+00 + 3.17864004e-03 * tc[1] -
                  1.09378755e-06 * tc[2] + 1.70735163e-10 * tc[3] -
                  9.95021955e-15 * tc[4];
  }
}

// compute Cp/R at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cp_R(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with no change at a midpoint T
  // species 0: AR
  species[0] = +2.50000000e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 1: N2
    species[1] = +3.29867700e+00 + 1.40824040e-03 * tc[1] -
                 3.96322200e-06 * tc[2] + 5.64151500e-09 * tc[3] -
                 2.44485400e-12 * tc[4];
    // species 2: H
    species[2] = +2.50000000e+00 + 7.05332819e-13 * tc[1] -
                 1.99591964e-15 * tc[2] + 2.30081632e-18 * tc[3] -
                 9.27732332e-22 * tc[4];
    // species 3: O
    species[3] = +3.16826710e+00 - 3.27931884e-03 * tc[1] +
                 6.64306396e-06 * tc[2] - 6.12806624e-09 * tc[3] +
                 2.11265971e-12 * tc[4];
    // species 4: OH
    species[4] = +4.12530561e+00 - 3.22544939e-03 * tc[1] +
                 6.52764691e-06 * tc[2] - 5.79853643e-09 * tc[3] +
                 2.06237379e-12 * tc[4];
    // species 5: HO2
    species[5] = +4.30179801e+00 - 4.74912051e-03 * tc[1] +
                 2.11582891e-05 * tc[2] - 2.42763894e-08 * tc[3] +
                 9.29225124e-12 * tc[4];
    // species 6: H2
    species[6] = +2.34433112e+00 + 7.98052075e-03 * tc[1] -
                 1.94781510e-05 * tc[2] + 2.01572094e-08 * tc[3] -
                 7.37611761e-12 * tc[4];
    // species 7: H2O
    species[7] = +4.19864056e+00 - 2.03643410e-03 * tc[1] +
                 6.52040211e-06 * tc[2] - 5.48797062e-09 * tc[3] +
                 1.77197817e-12 * tc[4];
    // species 8: H2O2
    species[8] = +4.27611269e+00 - 5.42822417e-04 * tc[1] +
                 1.67335701e-05 * tc[2] - 2.15770813e-08 * tc[3] +
                 8.62454363e-12 * tc[4];
    // species 9: O2
    species[9] = +3.78245636e+00 - 2.99673416e-03 * tc[1] +
                 9.84730201e-06 * tc[2] - 9.68129509e-09 * tc[3] +
                 3.24372837e-12 * tc[4];
    // species 10: CH3
    species[10] = +3.67359040e+00 + 2.01095175e-03 * tc[1] +
                  5.73021856e-06 * tc[2] - 6.87117425e-09 * tc[3] +
                  2.54385734e-12 * tc[4];
    // species 11: CH4
    species[11] = +5.14987613e+00 - 1.36709788e-02 * tc[1] +
                  4.91800599e-05 * tc[2] - 4.84743026e-08 * tc[3] +
                  1.66693956e-11 * tc[4];
    // species 12: HCO
    species[12] = +4.22118584e+00 - 3.24392532e-03 * tc[1] +
                  1.37799446e-05 * tc[2] - 1.33144093e-08 * tc[3] +
                  4.33768865e-12 * tc[4];
    // species 13: CH2O
    species[13] = +4.79372315e+00 - 9.90833369e-03 * tc[1] +
                  3.73220008e-05 * tc[2] - 3.79285261e-08 * tc[3] +
                  1.31772652e-11 * tc[4];
    // species 14: CH3O
    species[14] = +3.71180502e+00 - 2.80463306e-03 * tc[1] +
                  3.76550971e-05 * tc[2] - 4.73072089e-08 * tc[3] +
                  1.86588420e-11 * tc[4];
    // species 15: CH3OH
    species[15] = +5.71539582e+00 - 1.52309129e-02 * tc[1] +
                  6.52441155e-05 * tc[2] - 7.10806889e-08 * tc[3] +
                  2.61352698e-11 * tc[4];
    // species 16: CO
    species[16] = +3.57953347e+00 - 6.10353680e-04 * tc[1] +
                  1.01681433e-06 * tc[2] + 9.07005884e-10 * tc[3] -
                  9.04424499e-13 * tc[4];
    // species 17: CO2
    species[17] = +2.35677352e+00 + 8.98459677e-03 * tc[1] -
                  7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                  1.43699548e-13 * tc[4];
    // species 18: C2H2
    species[18] = +8.08681094e-01 + 2.33615629e-02 * tc[1] -
                  3.55171815e-05 * tc[2] + 2.80152437e-08 * tc[3] -
                  8.50072974e-12 * tc[4];
    // species 19: C2H3
    species[19] = +3.21246645e+00 + 1.51479162e-03 * tc[1] +
                  2.59209412e-05 * tc[2] - 3.57657847e-08 * tc[3] +
                  1.47150873e-11 * tc[4];
    // species 20: C2H4
    species[20] = +3.95920148e+00 - 7.57052247e-03 * tc[1] +
                  5.70990292e-05 * tc[2] - 6.91588753e-08 * tc[3] +
                  2.69884373e-11 * tc[4];
    // species 21: C2H5
    species[21] = +4.30646568e+00 - 4.18658892e-03 * tc[1] +
                  4.97142807e-05 * tc[2] - 5.99126606e-08 * tc[3] +
                  2.30509004e-11 * tc[4];
    // species 22: C2H6
    species[22] = +4.29142492e+00 - 5.50154270e-03 * tc[1] +
                  5.99438288e-05 * tc[2] - 7.08466285e-08 * tc[3] +
                  2.68685771e-11 * tc[4];
    // species 23: HCCO
    species[23] = +2.25172140e+00 + 1.76550210e-02 * tc[1] -
                  2.37291010e-05 * tc[2] + 1.72757590e-08 * tc[3] -
                  5.06648110e-12 * tc[4];
    // species 24: CH2CO
    species[24] = +2.13583630e+00 + 1.81188721e-02 * tc[1] -
                  1.73947474e-05 * tc[2] + 9.34397568e-09 * tc[3] -
                  2.01457615e-12 * tc[4];
    // species 25: CH2CHO
    species[25] = +3.40906240e+00 + 1.07385740e-02 * tc[1] +
                  1.89149250e-06 * tc[2] - 7.15858310e-09 * tc[3] +
                  2.86738510e-12 * tc[4];
    // species 26: CH2OCH2
    species[26] = +3.75905320e+00 - 9.44121800e-03 * tc[1] +
                  8.03097210e-05 * tc[2] - 1.00807880e-07 * tc[3] +
                  4.00399210e-11 * tc[4];
    // species 27: aC3H4
    species[27] = +2.61304450e+00 + 1.21225750e-02 * tc[1] +
                  1.85398800e-05 * tc[2] - 3.45251490e-08 * tc[3] +
                  1.53350790e-11 * tc[4];
    // species 28: aC3H5
    species[28] = +1.36318350e+00 + 1.98138210e-02 * tc[1] +
                  1.24970600e-05 * tc[2] - 3.33555550e-08 * tc[3] +
                  1.58465710e-11 * tc[4];
    // species 29: C3H6
    species[29] = +1.49330700e+00 + 2.09251800e-02 * tc[1] +
                  4.48679400e-06 * tc[2] - 1.66891200e-08 * tc[3] +
                  7.15814600e-12 * tc[4];
    // species 30: nC3H7
    species[30] = +1.04911730e+00 + 2.60089730e-02 * tc[1] +
                  2.35425160e-06 * tc[2] - 1.95951320e-08 * tc[3] +
                  9.37202070e-12 * tc[4];
    // species 31: C4H81
    species[31] = +1.18113800e+00 + 3.08533800e-02 * tc[1] +
                  5.08652470e-06 * tc[2] - 2.46548880e-08 * tc[3] +
                  1.11101930e-11 * tc[4];
    // species 32: N
    species[32] = +2.50000000e+00 + 0.00000000e+00 * tc[1] +
                  0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                  0.00000000e+00 * tc[4];
    // species 33: NO2
    species[33] = +3.94403120e+00 - 1.58542900e-03 * tc[1] +
                  1.66578120e-05 * tc[2] - 2.04754260e-08 * tc[3] +
                  7.83505640e-12 * tc[4];
    // species 36: NCO
    species[36] = +2.82693080e+00 + 8.80516880e-03 * tc[1] -
                  8.38661340e-06 * tc[2] + 4.80169640e-09 * tc[3] -
                  1.33135950e-12 * tc[4];
    // species 37: CH3O2
    species[37] = +1.73533900e+00 + 2.22003400e-02 * tc[1] -
                  1.88414600e-05 * tc[2] + 9.50131400e-09 * tc[3] -
                  2.21726900e-12 * tc[4];
  } else {
    // species 1: N2
    species[1] = +2.92664000e+00 + 1.48797680e-03 * tc[1] -
                 5.68476000e-07 * tc[2] + 1.00970380e-10 * tc[3] -
                 6.75335100e-15 * tc[4];
    // species 2: H
    species[2] = +2.50000001e+00 - 2.30842973e-11 * tc[1] +
                 1.61561948e-14 * tc[2] - 4.73515235e-18 * tc[3] +
                 4.98197357e-22 * tc[4];
    // species 3: O
    species[3] = +2.56942078e+00 - 8.59741137e-05 * tc[1] +
                 4.19484589e-08 * tc[2] - 1.00177799e-11 * tc[3] +
                 1.22833691e-15 * tc[4];
    // species 4: OH
    species[4] = +2.86472886e+00 + 1.05650448e-03 * tc[1] -
                 2.59082758e-07 * tc[2] + 3.05218674e-11 * tc[3] -
                 1.33195876e-15 * tc[4];
    // species 5: HO2
    species[5] = +4.01721090e+00 + 2.23982013e-03 * tc[1] -
                 6.33658150e-07 * tc[2] + 1.14246370e-10 * tc[3] -
                 1.07908535e-14 * tc[4];
    // species 6: H2
    species[6] = +3.33727920e+00 - 4.94024731e-05 * tc[1] +
                 4.99456778e-07 * tc[2] - 1.79566394e-10 * tc[3] +
                 2.00255376e-14 * tc[4];
    // species 7: H2O
    species[7] = +3.03399249e+00 + 2.17691804e-03 * tc[1] -
                 1.64072518e-07 * tc[2] - 9.70419870e-11 * tc[3] +
                 1.68200992e-14 * tc[4];
    // species 8: H2O2
    species[8] = +4.16500285e+00 + 4.90831694e-03 * tc[1] -
                 1.90139225e-06 * tc[2] + 3.71185986e-10 * tc[3] -
                 2.87908305e-14 * tc[4];
    // species 9: O2
    species[9] = +3.28253784e+00 + 1.48308754e-03 * tc[1] -
                 7.57966669e-07 * tc[2] + 2.09470555e-10 * tc[3] -
                 2.16717794e-14 * tc[4];
    // species 10: CH3
    species[10] = +2.28571772e+00 + 7.23990037e-03 * tc[1] -
                  2.98714348e-06 * tc[2] + 5.95684644e-10 * tc[3] -
                  4.67154394e-14 * tc[4];
    // species 11: CH4
    species[11] = +7.48514950e-02 + 1.33909467e-02 * tc[1] -
                  5.73285809e-06 * tc[2] + 1.22292535e-09 * tc[3] -
                  1.01815230e-13 * tc[4];
    // species 12: HCO
    species[12] = +2.77217438e+00 + 4.95695526e-03 * tc[1] -
                  2.48445613e-06 * tc[2] + 5.89161778e-10 * tc[3] -
                  5.33508711e-14 * tc[4];
    // species 13: CH2O
    species[13] = +1.76069008e+00 + 9.20000082e-03 * tc[1] -
                  4.42258813e-06 * tc[2] + 1.00641212e-09 * tc[3] -
                  8.83855640e-14 * tc[4];
    // species 14: CH3O
    species[14] = +4.75779238e+00 + 7.44142474e-03 * tc[1] -
                  2.69705176e-06 * tc[2] + 4.38090504e-10 * tc[3] -
                  2.63537098e-14 * tc[4];
    // species 15: CH3OH
    species[15] = +1.78970791e+00 + 1.40938292e-02 * tc[1] -
                  6.36500835e-06 * tc[2] + 1.38171085e-09 * tc[3] -
                  1.17060220e-13 * tc[4];
    // species 16: CO
    species[16] = +2.71518561e+00 + 2.06252743e-03 * tc[1] -
                  9.98825771e-07 * tc[2] + 2.30053008e-10 * tc[3] -
                  2.03647716e-14 * tc[4];
    // species 17: CO2
    species[17] = +3.85746029e+00 + 4.41437026e-03 * tc[1] -
                  2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                  4.72084164e-14 * tc[4];
    // species 18: C2H2
    species[18] = +4.14756964e+00 + 5.96166664e-03 * tc[1] -
                  2.37294852e-06 * tc[2] + 4.67412171e-10 * tc[3] -
                  3.61235213e-14 * tc[4];
    // species 19: C2H3
    species[19] = +3.01672400e+00 + 1.03302292e-02 * tc[1] -
                  4.68082349e-06 * tc[2] + 1.01763288e-09 * tc[3] -
                  8.62607041e-14 * tc[4];
    // species 20: C2H4
    species[20] = +2.03611116e+00 + 1.46454151e-02 * tc[1] -
                  6.71077915e-06 * tc[2] + 1.47222923e-09 * tc[3] -
                  1.25706061e-13 * tc[4];
    // species 21: C2H5
    species[21] = +1.95465642e+00 + 1.73972722e-02 * tc[1] -
                  7.98206668e-06 * tc[2] + 1.75217689e-09 * tc[3] -
                  1.49641576e-13 * tc[4];
    // species 22: C2H6
    species[22] = +1.07188150e+00 + 2.16852677e-02 * tc[1] -
                  1.00256067e-05 * tc[2] + 2.21412001e-09 * tc[3] -
                  1.90002890e-13 * tc[4];
    // species 23: HCCO
    species[23] = +5.62820580e+00 + 4.08534010e-03 * tc[1] -
                  1.59345470e-06 * tc[2] + 2.86260520e-10 * tc[3] -
                  1.94078320e-14 * tc[4];
    // species 24: CH2CO
    species[24] = +4.51129732e+00 + 9.00359745e-03 * tc[1] -
                  4.16939635e-06 * tc[2] + 9.23345882e-10 * tc[3] -
                  7.94838201e-14 * tc[4];
    // species 25: CH2CHO
    species[25] = +5.97566990e+00 + 8.13059140e-03 * tc[1] -
                  2.74362450e-06 * tc[2] + 4.07030410e-10 * tc[3] -
                  2.17601710e-14 * tc[4];
    // species 26: CH2OCH2
    species[26] = +5.48876410e+00 + 1.20461900e-02 * tc[1] -
                  4.33369310e-06 * tc[2] + 7.00283110e-10 * tc[3] -
                  4.19490880e-14 * tc[4];
    // species 27: aC3H4
    species[27] = +6.31687220e+00 + 1.11337280e-02 * tc[1] -
                  3.96293780e-06 * tc[2] + 6.35642380e-10 * tc[3] -
                  3.78755400e-14 * tc[4];
    // species 28: aC3H5
    species[28] = +6.50078770e+00 + 1.43247310e-02 * tc[1] -
                  5.67816320e-06 * tc[2] + 1.10808010e-09 * tc[3] -
                  9.03638870e-14 * tc[4];
    // species 29: C3H6
    species[29] = +6.73225700e+00 + 1.49083400e-02 * tc[1] -
                  4.94989900e-06 * tc[2] + 7.21202200e-10 * tc[3] -
                  3.76620400e-14 * tc[4];
    // species 30: nC3H7
    species[30] = +7.70974790e+00 + 1.60314850e-02 * tc[1] -
                  5.27202380e-06 * tc[2] + 7.58883520e-10 * tc[3] -
                  3.88627190e-14 * tc[4];
    // species 31: C4H81
    species[31] = +2.05358410e+00 + 3.43505070e-02 * tc[1] -
                  1.58831970e-05 * tc[2] + 3.30896620e-09 * tc[3] -
                  2.53610450e-13 * tc[4];
    // species 32: N
    species[32] = +2.41594290e+00 + 1.74890650e-04 * tc[1] -
                  1.19023690e-07 * tc[2] + 3.02262450e-11 * tc[3] -
                  2.03609820e-15 * tc[4];
    // species 33: NO2
    species[33] = +4.88475420e+00 + 2.17239560e-03 * tc[1] -
                  8.28069060e-07 * tc[2] + 1.57475100e-10 * tc[3] -
                  1.05108950e-14 * tc[4];
    // species 36: NCO
    species[36] = +5.15218450e+00 + 2.30517610e-03 * tc[1] -
                  8.80331530e-07 * tc[2] + 1.47890980e-10 * tc[3] -
                  9.09779960e-15 * tc[4];
    // species 37: CH3O2
    species[37] = +8.00891500e+00 + 5.46924100e-03 * tc[1] -
                  1.24339200e-06 * tc[2] + 1.49181300e-10 * tc[3] -
                  7.61853300e-15 * tc[4];
  }

  // species with midpoint at T=1382 kelvin
  if (T < 1382) {
    // species 34: HCNO
    species[34] = +2.64727989e+00 + 1.27505342e-02 * tc[1] -
                  1.04794236e-05 * tc[2] + 4.41432836e-09 * tc[3] -
                  7.57521466e-13 * tc[4];
  } else {
    // species 34: HCNO
    species[34] = +6.59860456e+00 + 3.02778626e-03 * tc[1] -
                  1.07704346e-06 * tc[2] + 1.71666528e-10 * tc[3] -
                  1.01439391e-14 * tc[4];
  }

  // species with midpoint at T=1478 kelvin
  if (T < 1478) {
    // species 35: HNCO
    species[35] = +3.63096317e+00 + 7.30282357e-03 * tc[1] -
                  2.28050003e-06 * tc[2] - 6.61271298e-10 * tc[3] +
                  3.62235752e-13 * tc[4];
  } else {
    // species 35: HNCO
    species[35] = +6.22395134e+00 + 3.17864004e-03 * tc[1] -
                  1.09378755e-06 * tc[2] + 1.70735163e-10 * tc[3] -
                  9.95021955e-15 * tc[4];
  }
}

// compute the g/(RT) at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
gibbs(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1 / T;

  // species with no change at a midpoint T
  // species 0: AR
  species[0] = -7.453750000000000e+02 * invT - 1.866000000000000e+00 -
               2.500000000000000e+00 * tc[0] - 0.000000000000000e+00 * tc[1] -
               0.000000000000000e+00 * tc[2] - 0.000000000000000e+00 * tc[3] -
               0.000000000000000e+00 * tc[4];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 1: N2
    species[1] = -1.020899900000000e+03 * invT - 6.516950000000001e-01 -
                 3.298677000000000e+00 * tc[0] - 7.041202000000000e-04 * tc[1] +
                 6.605369999999999e-07 * tc[2] - 4.701262500000001e-10 * tc[3] +
                 1.222427000000000e-13 * tc[4];
    // species 2: H
    species[2] = +2.547365990000000e+04 * invT + 2.946682853000000e+00 -
                 2.500000000000000e+00 * tc[0] - 3.526664095000000e-13 * tc[1] +
                 3.326532733333333e-16 * tc[2] - 1.917346933333333e-19 * tc[3] +
                 4.638661660000000e-23 * tc[4];
    // species 3: O
    species[3] = +2.912225920000000e+04 * invT + 1.116333640000000e+00 -
                 3.168267100000000e+00 * tc[0] + 1.639659420000000e-03 * tc[1] -
                 1.107177326666667e-06 * tc[2] + 5.106721866666666e-10 * tc[3] -
                 1.056329855000000e-13 * tc[4];
    // species 4: OH
    species[4] = +3.381538120000000e+03 * invT + 4.815738570000000e+00 -
                 4.125305610000000e+00 * tc[0] + 1.612724695000000e-03 * tc[1] -
                 1.087941151666667e-06 * tc[2] + 4.832113691666666e-10 * tc[3] -
                 1.031186895000000e-13 * tc[4];
    // species 5: HO2
    species[5] = +2.948080400000000e+02 * invT + 5.851355599999999e-01 -
                 4.301798010000000e+00 * tc[0] + 2.374560255000000e-03 * tc[1] -
                 3.526381516666666e-06 * tc[2] + 2.023032450000000e-09 * tc[3] -
                 4.646125620000001e-13 * tc[4];
    // species 6: H2
    species[6] = -9.179351730000000e+02 * invT + 1.661320882000000e+00 -
                 2.344331120000000e+00 * tc[0] - 3.990260375000000e-03 * tc[1] +
                 3.246358500000000e-06 * tc[2] - 1.679767450000000e-09 * tc[3] +
                 3.688058805000000e-13 * tc[4];
    // species 7: H2O
    species[7] = -3.029372670000000e+04 * invT + 5.047672768000000e+00 -
                 4.198640560000000e+00 * tc[0] + 1.018217050000000e-03 * tc[1] -
                 1.086733685000000e-06 * tc[2] + 4.573308850000000e-10 * tc[3] -
                 8.859890850000000e-14 * tc[4];
    // species 8: H2O2
    species[8] = -1.770258210000000e+04 * invT + 8.410619499999998e-01 -
                 4.276112690000000e+00 * tc[0] + 2.714112085000000e-04 * tc[1] -
                 2.788928350000000e-06 * tc[2] + 1.798090108333333e-09 * tc[3] -
                 4.312271815000000e-13 * tc[4];
    // species 9: O2
    species[9] = -1.063943560000000e+03 * invT + 1.247806300000001e-01 -
                 3.782456360000000e+00 * tc[0] + 1.498367080000000e-03 * tc[1] -
                 1.641217001666667e-06 * tc[2] + 8.067745908333334e-10 * tc[3] -
                 1.621864185000000e-13 * tc[4];
    // species 10: CH3
    species[10] = +1.644499880000000e+04 * invT + 2.069026070000000e+00 -
                  3.673590400000000e+00 * tc[0] -
                  1.005475875000000e-03 * tc[1] -
                  9.550364266666668e-07 * tc[2] +
                  5.725978541666666e-10 * tc[3] - 1.271928670000000e-13 * tc[4];
    // species 11: CH4
    species[11] = -1.024664760000000e+04 * invT + 9.791179889999999e+00 -
                  5.149876130000000e+00 * tc[0] +
                  6.835489400000000e-03 * tc[1] -
                  8.196676650000000e-06 * tc[2] +
                  4.039525216666667e-09 * tc[3] - 8.334697800000000e-13 * tc[4];
    // species 12: HCO
    species[12] = +3.839564960000000e+03 * invT + 8.268134100000002e-01 -
                  4.221185840000000e+00 * tc[0] +
                  1.621962660000000e-03 * tc[1] -
                  2.296657433333333e-06 * tc[2] +
                  1.109534108333333e-09 * tc[3] - 2.168844325000000e-13 * tc[4];
    // species 13: CH2O
    species[13] = -1.430895670000000e+04 * invT + 4.190910250000000e+00 -
                  4.793723150000000e+00 * tc[0] +
                  4.954166845000000e-03 * tc[1] -
                  6.220333466666666e-06 * tc[2] +
                  3.160710508333333e-09 * tc[3] - 6.588632600000000e-13 * tc[4];
    // species 14: CH3O
    species[14] = +1.295697600000000e+03 * invT - 2.860603620000000e+00 -
                  3.711805020000000e+00 * tc[0] +
                  1.402316530000000e-03 * tc[1] -
                  6.275849516666667e-06 * tc[2] +
                  3.942267408333333e-09 * tc[3] - 9.329421000000001e-13 * tc[4];
    // species 15: CH3OH
    species[15] = -2.564276560000000e+04 * invT + 7.219494050000001e+00 -
                  5.715395820000000e+00 * tc[0] +
                  7.615456450000000e-03 * tc[1] -
                  1.087401925000000e-05 * tc[2] +
                  5.923390741666667e-09 * tc[3] - 1.306763490000000e-12 * tc[4];
    // species 16: CO
    species[16] = -1.434408600000000e+04 * invT + 7.112418999999992e-02 -
                  3.579533470000000e+00 * tc[0] +
                  3.051768400000000e-04 * tc[1] -
                  1.694690550000000e-07 * tc[2] -
                  7.558382366666667e-11 * tc[3] + 4.522122495000000e-14 * tc[4];
    // species 17: CO2
    species[17] = -4.837196970000000e+04 * invT - 7.544278700000000e+00 -
                  2.356773520000000e+00 * tc[0] -
                  4.492298385000000e-03 * tc[1] +
                  1.187260448333333e-06 * tc[2] -
                  2.049325183333333e-10 * tc[3] + 7.184977399999999e-15 * tc[4];
    // species 18: C2H2
    species[18] = +2.642898070000000e+04 * invT - 1.313102400600000e+01 -
                  8.086810940000000e-01 * tc[0] -
                  1.168078145000000e-02 * tc[1] +
                  5.919530250000000e-06 * tc[2] -
                  2.334603641666667e-09 * tc[3] + 4.250364870000000e-13 * tc[4];
    // species 19: C2H3
    species[19] = +3.485984680000000e+04 * invT - 5.298073800000000e+00 -
                  3.212466450000000e+00 * tc[0] -
                  7.573958100000000e-04 * tc[1] -
                  4.320156866666666e-06 * tc[2] +
                  2.980482058333333e-09 * tc[3] - 7.357543650000000e-13 * tc[4];
    // species 20: C2H4
    species[20] = +5.089775930000000e+03 * invT - 1.381294799999999e-01 -
                  3.959201480000000e+00 * tc[0] +
                  3.785261235000000e-03 * tc[1] -
                  9.516504866666667e-06 * tc[2] +
                  5.763239608333333e-09 * tc[3] - 1.349421865000000e-12 * tc[4];
    // species 21: C2H5
    species[21] = +1.284162650000000e+04 * invT - 4.007435600000004e-01 -
                  4.306465680000000e+00 * tc[0] +
                  2.093294460000000e-03 * tc[1] -
                  8.285713450000000e-06 * tc[2] +
                  4.992721716666666e-09 * tc[3] - 1.152545020000000e-12 * tc[4];
    // species 22: C2H6
    species[22] = -1.152220550000000e+04 * invT + 1.624601760000000e+00 -
                  4.291424920000000e+00 * tc[0] +
                  2.750771350000000e-03 * tc[1] -
                  9.990638133333334e-06 * tc[2] +
                  5.903885708333334e-09 * tc[3] - 1.343428855000000e-12 * tc[4];
    // species 23: HCCO
    species[23] = +2.005944900000000e+04 * invT - 1.023869560000000e+01 -
                  2.251721400000000e+00 * tc[0] -
                  8.827510500000000e-03 * tc[1] +
                  3.954850166666666e-06 * tc[2] -
                  1.439646583333334e-09 * tc[3] + 2.533240550000000e-13 * tc[4];
    // species 24: CH2CO
    species[24] = -7.270000000000000e+03 * invT - 1.007981170000000e+01 -
                  2.135836300000000e+00 * tc[0] -
                  9.059436050000000e-03 * tc[1] +
                  2.899124566666666e-06 * tc[2] -
                  7.786646400000000e-10 * tc[3] + 1.007288075000000e-13 * tc[4];
    // species 25: CH2CHO
    species[25] = +6.200000000000000e+01 * invT - 6.162391100000001e+00 -
                  3.409062400000000e+00 * tc[0] -
                  5.369287000000000e-03 * tc[1] -
                  3.152487500000000e-07 * tc[2] +
                  5.965485916666667e-10 * tc[3] - 1.433692550000000e-13 * tc[4];
    // species 26: CH2OCH2
    species[26] = -7.560814300000000e+03 * invT - 4.090694300000001e+00 -
                  3.759053200000000e+00 * tc[0] +
                  4.720609000000000e-03 * tc[1] -
                  1.338495350000000e-05 * tc[2] +
                  8.400656666666666e-09 * tc[3] - 2.001996050000000e-12 * tc[4];
    // species 27: aC3H4
    species[27] = +2.154156700000000e+04 * invT - 7.613094500000000e+00 -
                  2.613044500000000e+00 * tc[0] -
                  6.061287500000000e-03 * tc[1] -
                  3.089980000000000e-06 * tc[2] +
                  2.877095750000000e-09 * tc[3] - 7.667539500000001e-13 * tc[4];
    // species 28: aC3H5
    species[28] = +1.924562900000000e+04 * invT - 1.581003050000000e+01 -
                  1.363183500000000e+00 * tc[0] -
                  9.906910499999999e-03 * tc[1] -
                  2.082843333333333e-06 * tc[2] +
                  2.779629583333333e-09 * tc[3] - 7.923285500000000e-13 * tc[4];
    // species 29: C3H6
    species[29] = +1.074826000000000e+03 * invT - 1.465203300000000e+01 -
                  1.493307000000000e+00 * tc[0] -
                  1.046259000000000e-02 * tc[1] -
                  7.477990000000000e-07 * tc[2] +
                  1.390760000000000e-09 * tc[3] - 3.579073000000000e-13 * tc[4];
    // species 30: nC3H7
    species[30] = +1.031234600000000e+04 * invT - 2.008691670000000e+01 -
                  1.049117300000000e+00 * tc[0] -
                  1.300448650000000e-02 * tc[1] -
                  3.923752666666667e-07 * tc[2] +
                  1.632927666666667e-09 * tc[3] - 4.686010350000000e-13 * tc[4];
    // species 31: C4H81
    species[31] = -1.790400400000000e+03 * invT - 1.988133100000000e+01 -
                  1.181138000000000e+00 * tc[0] -
                  1.542669000000000e-02 * tc[1] -
                  8.477541166666667e-07 * tc[2] +
                  2.054574000000000e-09 * tc[3] - 5.555096499999999e-13 * tc[4];
    // species 32: N
    species[32] = +5.610463700000000e+04 * invT - 1.693908700000000e+00 -
                  2.500000000000000e+00 * tc[0] -
                  0.000000000000000e+00 * tc[1] -
                  0.000000000000000e+00 * tc[2] -
                  0.000000000000000e+00 * tc[3] - 0.000000000000000e+00 * tc[4];
    // species 33: NO2
    species[33] = +2.896617900000000e+03 * invT - 2.367960500000000e+00 -
                  3.944031200000000e+00 * tc[0] +
                  7.927145000000000e-04 * tc[1] -
                  2.776302000000000e-06 * tc[2] +
                  1.706285500000000e-09 * tc[3] - 3.917528200000000e-13 * tc[4];
    // species 36: NCO
    species[36] = +1.468247700000000e+04 * invT - 6.723533800000000e+00 -
                  2.826930800000000e+00 * tc[0] -
                  4.402584400000000e-03 * tc[1] +
                  1.397768900000000e-06 * tc[2] -
                  4.001413666666666e-10 * tc[3] + 6.656797500000001e-14 * tc[4];
    // species 37: CH3O2
    species[37] = +7.400789000000000e+02 * invT - 1.422992100000000e+01 -
                  1.735339000000000e+00 * tc[0] -
                  1.110017000000000e-02 * tc[1] +
                  3.140243333333333e-06 * tc[2] -
                  7.917761666666666e-10 * tc[3] + 1.108634500000000e-13 * tc[4];
  } else {
    // species 1: N2
    species[1] = -9.227977000000000e+02 * invT - 3.053888000000000e+00 -
                 2.926640000000000e+00 * tc[0] - 7.439884000000000e-04 * tc[1] +
                 9.474600000000001e-08 * tc[2] - 8.414198333333333e-12 * tc[3] +
                 3.376675500000000e-16 * tc[4];
    // species 2: H
    species[2] = +2.547365990000000e+04 * invT + 2.946682924000000e+00 -
                 2.500000010000000e+00 * tc[0] + 1.154214865000000e-11 * tc[1] -
                 2.692699133333334e-15 * tc[2] + 3.945960291666667e-19 * tc[3] -
                 2.490986785000000e-23 * tc[4];
    // species 3: O
    species[3] = +2.921757910000000e+04 * invT - 2.214917859999999e+00 -
                 2.569420780000000e+00 * tc[0] + 4.298705685000000e-05 * tc[1] -
                 6.991409816666667e-09 * tc[2] + 8.348149916666666e-13 * tc[3] -
                 6.141684549999999e-17 * tc[4];
    // species 4: OH
    species[4] = +3.718857740000000e+03 * invT - 2.836911870000000e+00 -
                 2.864728860000000e+00 * tc[0] - 5.282522400000000e-04 * tc[1] +
                 4.318045966666667e-08 * tc[2] - 2.543488950000000e-12 * tc[3] +
                 6.659793800000000e-17 * tc[4];
    // species 5: HO2
    species[5] = +1.118567130000000e+02 * invT + 2.321087500000001e-01 -
                 4.017210900000000e+00 * tc[0] - 1.119910065000000e-03 * tc[1] +
                 1.056096916666667e-07 * tc[2] - 9.520530833333334e-12 * tc[3] +
                 5.395426750000000e-16 * tc[4];
    // species 6: H2
    species[6] = -9.501589220000000e+02 * invT + 6.542302510000000e+00 -
                 3.337279200000000e+00 * tc[0] + 2.470123655000000e-05 * tc[1] -
                 8.324279633333333e-08 * tc[2] + 1.496386616666667e-11 * tc[3] -
                 1.001276880000000e-15 * tc[4];
    // species 7: H2O
    species[7] = -3.000429710000000e+04 * invT - 1.932777610000000e+00 -
                 3.033992490000000e+00 * tc[0] - 1.088459020000000e-03 * tc[1] +
                 2.734541966666666e-08 * tc[2] + 8.086832250000000e-12 * tc[3] -
                 8.410049600000000e-16 * tc[4];
    // species 8: H2O2
    species[8] = -1.786178770000000e+04 * invT + 1.248846229999999e+00 -
                 4.165002850000000e+00 * tc[0] - 2.454158470000000e-03 * tc[1] +
                 3.168987083333333e-07 * tc[2] - 3.093216550000000e-11 * tc[3] +
                 1.439541525000000e-15 * tc[4];
    // species 9: O2
    species[9] = -1.088457720000000e+03 * invT - 2.170693450000000e+00 -
                 3.282537840000000e+00 * tc[0] - 7.415437700000000e-04 * tc[1] +
                 1.263277781666667e-07 * tc[2] - 1.745587958333333e-11 * tc[3] +
                 1.083588970000000e-15 * tc[4];
    // species 10: CH3
    species[10] = +1.677558430000000e+04 * invT - 6.194354070000000e+00 -
                  2.285717720000000e+00 * tc[0] -
                  3.619950185000000e-03 * tc[1] +
                  4.978572466666667e-07 * tc[2] -
                  4.964038700000000e-11 * tc[3] + 2.335771970000000e-15 * tc[4];
    // species 11: CH4
    species[11] = -9.468344590000001e+03 * invT - 1.836246650500000e+01 -
                  7.485149500000000e-02 * tc[0] -
                  6.695473350000000e-03 * tc[1] +
                  9.554763483333333e-07 * tc[2] -
                  1.019104458333333e-10 * tc[3] + 5.090761500000000e-15 * tc[4];
    // species 12: HCO
    species[12] = +4.011918150000000e+03 * invT - 7.026170540000000e+00 -
                  2.772174380000000e+00 * tc[0] -
                  2.478477630000000e-03 * tc[1] +
                  4.140760216666667e-07 * tc[2] -
                  4.909681483333334e-11 * tc[3] + 2.667543555000000e-15 * tc[4];
    // species 13: CH2O
    species[13] = -1.399583230000000e+04 * invT - 1.189563292000000e+01 -
                  1.760690080000000e+00 * tc[0] -
                  4.600000410000000e-03 * tc[1] +
                  7.370980216666666e-07 * tc[2] -
                  8.386767666666666e-11 * tc[3] + 4.419278200000001e-15 * tc[4];
    // species 14: CH3O
    species[14] = +3.781119400000000e+02 * invT + 6.724592660000000e+00 -
                  4.757792380000000e+00 * tc[0] -
                  3.720712370000000e-03 * tc[1] +
                  4.495086266666666e-07 * tc[2] -
                  3.650754200000000e-11 * tc[3] + 1.317685490000000e-15 * tc[4];
    // species 15: CH3OH
    species[15] = -2.537487470000000e+04 * invT - 1.271265439000000e+01 -
                  1.789707910000000e+00 * tc[0] -
                  7.046914600000000e-03 * tc[1] +
                  1.060834725000000e-06 * tc[2] -
                  1.151425708333333e-10 * tc[3] + 5.853011000000000e-15 * tc[4];
    // species 16: CO
    species[16] = -1.415187240000000e+04 * invT - 5.103502110000000e+00 -
                  2.715185610000000e+00 * tc[0] -
                  1.031263715000000e-03 * tc[1] +
                  1.664709618333334e-07 * tc[2] -
                  1.917108400000000e-11 * tc[3] + 1.018238580000000e-15 * tc[4];
    // species 17: CO2
    species[17] = -4.875916600000000e+04 * invT + 1.585822230000000e+00 -
                  3.857460290000000e+00 * tc[0] -
                  2.207185130000000e-03 * tc[1] +
                  3.691356733333334e-07 * tc[2] -
                  4.362418233333334e-11 * tc[3] + 2.360420820000000e-15 * tc[4];
    // species 18: C2H2
    species[18] = +2.593599920000000e+04 * invT + 5.377850850000001e+00 -
                  4.147569640000000e+00 * tc[0] -
                  2.980833320000000e-03 * tc[1] +
                  3.954914200000000e-07 * tc[2] -
                  3.895101425000000e-11 * tc[3] + 1.806176065000000e-15 * tc[4];
    // species 19: C2H3
    species[19] = +3.461287390000000e+04 * invT - 4.770599780000000e+00 -
                  3.016724000000000e+00 * tc[0] -
                  5.165114600000000e-03 * tc[1] +
                  7.801372483333333e-07 * tc[2] -
                  8.480274000000000e-11 * tc[3] + 4.313035205000000e-15 * tc[4];
    // species 20: C2H4
    species[20] = +4.939886140000000e+03 * invT - 8.269258140000002e+00 -
                  2.036111160000000e+00 * tc[0] -
                  7.322707550000000e-03 * tc[1] +
                  1.118463191666667e-06 * tc[2] -
                  1.226857691666667e-10 * tc[3] + 6.285303050000000e-15 * tc[4];
    // species 21: C2H5
    species[21] = +1.285752000000000e+04 * invT - 1.150777788000000e+01 -
                  1.954656420000000e+00 * tc[0] -
                  8.698636100000001e-03 * tc[1] +
                  1.330344446666667e-06 * tc[2] -
                  1.460147408333333e-10 * tc[3] + 7.482078800000000e-15 * tc[4];
    // species 22: C2H6
    species[22] = -1.142639320000000e+04 * invT - 1.404372920000000e+01 -
                  1.071881500000000e+00 * tc[0] -
                  1.084263385000000e-02 * tc[1] +
                  1.670934450000000e-06 * tc[2] -
                  1.845100008333333e-10 * tc[3] + 9.500144500000000e-15 * tc[4];
    // species 23: HCCO
    species[23] = +1.932721500000000e+04 * invT + 9.558465300000000e+00 -
                  5.628205800000000e+00 * tc[0] -
                  2.042670050000000e-03 * tc[1] +
                  2.655757833333333e-07 * tc[2] -
                  2.385504333333333e-11 * tc[3] + 9.703915999999999e-16 * tc[4];
    // species 24: CH2CO
    species[24] = -7.778500000000000e+03 * invT + 3.879050115000000e+00 -
                  4.511297320000000e+00 * tc[0] -
                  4.501798725000000e-03 * tc[1] +
                  6.948993916666666e-07 * tc[2] -
                  7.694549016666667e-11 * tc[3] + 3.974191005000000e-15 * tc[4];
    // species 25: CH2CHO
    species[25] = -9.695000000000000e+02 * invT + 1.100775780000000e+01 -
                  5.975669900000000e+00 * tc[0] -
                  4.065295700000000e-03 * tc[1] +
                  4.572707500000000e-07 * tc[2] -
                  3.391920083333333e-11 * tc[3] + 1.088008550000000e-15 * tc[4];
    // species 26: CH2OCH2
    species[26] = -9.180425100000000e+03 * invT + 1.256872460000000e+01 -
                  5.488764100000000e+00 * tc[0] -
                  6.023095000000000e-03 * tc[1] +
                  7.222821833333333e-07 * tc[2] -
                  5.835692583333333e-11 * tc[3] + 2.097454400000000e-15 * tc[4];
    // species 27: aC3H4
    species[27] = +2.011749500000000e+04 * invT + 1.731263820000000e+01 -
                  6.316872200000000e+00 * tc[0] -
                  5.566864000000000e-03 * tc[1] +
                  6.604896333333332e-07 * tc[2] -
                  5.297019833333334e-11 * tc[3] + 1.893777000000000e-15 * tc[4];
    // species 28: aC3H5
    species[28] = +1.748244900000000e+04 * invT + 1.774383770000000e+01 -
                  6.500787700000000e+00 * tc[0] -
                  7.162365500000000e-03 * tc[1] +
                  9.463605333333332e-07 * tc[2] -
                  9.234000833333333e-11 * tc[3] + 4.518194349999999e-15 * tc[4];
    // species 29: C3H6
    species[29] = -9.235703000000000e+02 * invT + 2.004560700000000e+01 -
                  6.732257000000000e+00 * tc[0] -
                  7.454170000000000e-03 * tc[1] +
                  8.249831666666666e-07 * tc[2] -
                  6.010018333333334e-11 * tc[3] + 1.883102000000000e-15 * tc[4];
    // species 30: nC3H7
    species[30] = +7.976223600000000e+03 * invT + 2.322504490000000e+01 -
                  7.709747900000000e+00 * tc[0] -
                  8.015742500000001e-03 * tc[1] +
                  8.786706333333332e-07 * tc[2] -
                  6.324029333333334e-11 * tc[3] + 1.943135950000000e-15 * tc[4];
    // species 31: C4H81
    species[31] = -2.139723100000000e+03 * invT - 1.348961690000000e+01 -
                  2.053584100000000e+00 * tc[0] -
                  1.717525350000000e-02 * tc[1] +
                  2.647199500000000e-06 * tc[2] -
                  2.757471833333334e-10 * tc[3] + 1.268052250000000e-14 * tc[4];
    // species 32: N
    species[32] = +5.613377300000000e+04 * invT - 2.233666700000000e+00 -
                  2.415942900000000e+00 * tc[0] -
                  8.744532500000000e-05 * tc[1] +
                  1.983728166666667e-08 * tc[2] -
                  2.518853750000000e-12 * tc[3] + 1.018049100000000e-16 * tc[4];
    // species 33: NO2
    species[33] = +2.316498300000000e+03 * invT + 5.002171150000000e+00 -
                  4.884754200000000e+00 * tc[0] -
                  1.086197800000000e-03 * tc[1] +
                  1.380115100000000e-07 * tc[2] -
                  1.312292500000000e-11 * tc[3] + 5.255447500000000e-16 * tc[4];
    // species 36: NCO
    species[36] = +1.400412300000000e+04 * invT + 7.696450499999999e+00 -
                  5.152184500000000e+00 * tc[0] -
                  1.152588050000000e-03 * tc[1] +
                  1.467219216666667e-07 * tc[2] -
                  1.232424833333333e-11 * tc[3] + 4.548899800000000e-16 * tc[4];
    // species 37: CH3O2
    species[37] = -1.137869000000000e+03 * invT + 2.488295500000000e+01 -
                  8.008915000000000e+00 * tc[0] -
                  2.734620500000000e-03 * tc[1] +
                  2.072320000000000e-07 * tc[2] -
                  1.243177500000000e-11 * tc[3] + 3.809266500000000e-16 * tc[4];
  }

  // species with midpoint at T=1382 kelvin
  if (T < 1382) {
    // species 34: HCNO
    species[34] = +1.929902520000000e+04 * invT - 8.086017310000001e+00 -
                  2.647279890000000e+00 * tc[0] -
                  6.375267100000000e-03 * tc[1] +
                  1.746570600000000e-06 * tc[2] -
                  3.678606966666667e-10 * tc[3] + 3.787607330000000e-14 * tc[4];
  } else {
    // species 34: HCNO
    species[34] = +1.796613390000000e+04 * invT + 1.692926446000000e+01 -
                  6.598604560000000e+00 * tc[0] -
                  1.513893130000000e-03 * tc[1] +
                  1.795072433333333e-07 * tc[2] -
                  1.430554400000000e-11 * tc[3] + 5.071969550000000e-16 * tc[4];
  }

  // species with midpoint at T=1478 kelvin
  if (T < 1478) {
    // species 35: HNCO
    species[35] = -1.558736360000000e+04 * invT - 2.563614100000000e+00 -
                  3.630963170000000e+00 * tc[0] -
                  3.651411785000000e-03 * tc[1] +
                  3.800833383333333e-07 * tc[2] +
                  5.510594150000000e-11 * tc[3] - 1.811178760000000e-14 * tc[4];
  } else {
    // species 35: HNCO
    species[35] = -1.665993440000000e+04 * invT + 1.460619875000000e+01 -
                  6.223951340000000e+00 * tc[0] -
                  1.589320020000000e-03 * tc[1] +
                  1.822979250000000e-07 * tc[2] -
                  1.422793025000000e-11 * tc[3] + 4.975109775000000e-16 * tc[4];
  }
}

// compute the g/(RT) at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
gibbs_qss(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: C
    species[0] = +8.544388320000000e+04 * invT - 1.977068930000000e+00 -
                 2.554239550000000e+00 * tc[0] + 1.607688620000000e-04 * tc[1] -
                 1.222987075000000e-07 * tc[2] + 6.101957408333333e-11 * tc[3] -
                 1.332607230000000e-14 * tc[4];
    // species 1: CH
    species[1] = +7.079729340000000e+04 * invT + 1.405805570000000e+00 -
                 3.489816650000000e+00 * tc[0] - 1.619177705000000e-04 * tc[1] +
                 2.814984416666667e-07 * tc[2] - 2.635144391666666e-10 * tc[3] +
                 7.030453350000001e-14 * tc[4];
    // species 2: CH2
    species[2] = +4.600404010000000e+04 * invT + 2.200146820000000e+00 -
                 3.762678670000000e+00 * tc[0] - 4.844360715000000e-04 * tc[1] -
                 4.658164016666667e-07 * tc[2] + 3.209092941666667e-10 * tc[3] -
                 8.437085950000000e-14 * tc[4];
    // species 3: CH2*
    species[3] = +5.049681630000000e+04 * invT + 4.967723077000000e+00 -
                 4.198604110000000e+00 * tc[0] + 1.183307095000000e-03 * tc[1] -
                 1.372160366666667e-06 * tc[2] + 5.573466508333334e-10 * tc[3] -
                 9.715736850000000e-14 * tc[4];
    // species 4: H2CC
    species[4] = +4.862179400000000e+04 * invT - 2.638842700000001e+00 -
                 3.281548300000000e+00 * tc[0] - 3.488239550000000e-03 * tc[1] +
                 3.975874000000000e-07 * tc[2] + 1.008702666666667e-10 * tc[3] -
                 4.909477250000000e-14 * tc[4];
    // species 5: NO
    species[5] = +9.844623000000000e+03 * invT + 1.937629900000000e+00 -
                 4.218476300000000e+00 * tc[0] + 2.319488000000000e-03 * tc[1] -
                 1.840170333333333e-06 * tc[2] + 7.780112833333333e-10 * tc[3] -
                 1.401788500000000e-13 * tc[4];
  } else {
    // species 0: C
    species[0] = +8.545129530000000e+04 * invT - 2.308834850000000e+00 -
                 2.492668880000000e+00 * tc[0] - 2.399446420000000e-05 * tc[1] +
                 1.207225033333333e-08 * tc[2] - 3.119091908333333e-12 * tc[3] +
                 2.436389465000000e-16 * tc[4];
    // species 1: CH
    species[1] = +7.101243640000001e+04 * invT - 2.606515260000000e+00 -
                 2.878464730000000e+00 * tc[0] - 4.854568405000000e-04 * tc[1] -
                 2.407427583333333e-08 * tc[2] + 1.089065408333333e-11 * tc[3] -
                 8.803969149999999e-16 * tc[4];
    // species 2: CH2
    species[2] = +4.626360400000000e+04 * invT - 3.297092110000000e+00 -
                 2.874101130000000e+00 * tc[0] - 1.828196460000000e-03 * tc[1] +
                 2.348243283333333e-07 * tc[2] - 2.168162908333333e-11 * tc[3] +
                 9.386378350000000e-16 * tc[4];
    // species 3: CH2*
    species[3] = +5.092599970000000e+04 * invT - 6.334463270000000e+00 -
                 2.292038420000000e+00 * tc[0] - 2.327943185000000e-03 * tc[1] +
                 3.353199116666667e-07 * tc[2] - 3.482550000000000e-11 * tc[3] +
                 1.698581825000000e-15 * tc[4];
    // species 4: H2CC
    species[4] = +4.831668800000000e+04 * invT + 3.637796990000000e+00 -
                 4.278034000000000e+00 * tc[0] - 2.378140200000000e-03 * tc[1] +
                 2.716834833333333e-07 * tc[2] - 2.121900500000000e-11 * tc[3] +
                 7.443189499999999e-16 * tc[4];
    // species 5: NO
    species[5] = +9.920974600000000e+03 * invT - 3.108697100000001e+00 -
                 3.260605600000000e+00 * tc[0] - 5.955521500000000e-04 * tc[1] +
                 7.152841333333333e-08 * tc[2] - 5.788139083333334e-12 * tc[3] +
                 2.016804950000000e-16 * tc[4];
  }
}

// compute the a/(RT) at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
helmholtz(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1 / T;

  // species with no change at a midpoint T
  // species 0: AR
  species[0] = -7.45375000e+02 * invT - 2.86600000e+00 -
               2.50000000e+00 * tc[0] - 0.00000000e+00 * tc[1] -
               0.00000000e+00 * tc[2] - 0.00000000e+00 * tc[3] -
               0.00000000e+00 * tc[4];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 1: N2
    species[1] = -1.02089990e+03 * invT - 1.65169500e+00 -
                 3.29867700e+00 * tc[0] - 7.04120200e-04 * tc[1] +
                 6.60537000e-07 * tc[2] - 4.70126250e-10 * tc[3] +
                 1.22242700e-13 * tc[4];
    // species 2: H
    species[2] = +2.54736599e+04 * invT + 1.94668285e+00 -
                 2.50000000e+00 * tc[0] - 3.52666409e-13 * tc[1] +
                 3.32653273e-16 * tc[2] - 1.91734693e-19 * tc[3] +
                 4.63866166e-23 * tc[4];
    // species 3: O
    species[3] = +2.91222592e+04 * invT + 1.16333640e-01 -
                 3.16826710e+00 * tc[0] + 1.63965942e-03 * tc[1] -
                 1.10717733e-06 * tc[2] + 5.10672187e-10 * tc[3] -
                 1.05632985e-13 * tc[4];
    // species 4: OH
    species[4] = +3.38153812e+03 * invT + 3.81573857e+00 -
                 4.12530561e+00 * tc[0] + 1.61272470e-03 * tc[1] -
                 1.08794115e-06 * tc[2] + 4.83211369e-10 * tc[3] -
                 1.03118689e-13 * tc[4];
    // species 5: HO2
    species[5] = +2.94808040e+02 * invT - 4.14864440e-01 -
                 4.30179801e+00 * tc[0] + 2.37456025e-03 * tc[1] -
                 3.52638152e-06 * tc[2] + 2.02303245e-09 * tc[3] -
                 4.64612562e-13 * tc[4];
    // species 6: H2
    species[6] = -9.17935173e+02 * invT + 6.61320882e-01 -
                 2.34433112e+00 * tc[0] - 3.99026037e-03 * tc[1] +
                 3.24635850e-06 * tc[2] - 1.67976745e-09 * tc[3] +
                 3.68805881e-13 * tc[4];
    // species 7: H2O
    species[7] = -3.02937267e+04 * invT + 4.04767277e+00 -
                 4.19864056e+00 * tc[0] + 1.01821705e-03 * tc[1] -
                 1.08673369e-06 * tc[2] + 4.57330885e-10 * tc[3] -
                 8.85989085e-14 * tc[4];
    // species 8: H2O2
    species[8] = -1.77025821e+04 * invT - 1.58938050e-01 -
                 4.27611269e+00 * tc[0] + 2.71411208e-04 * tc[1] -
                 2.78892835e-06 * tc[2] + 1.79809011e-09 * tc[3] -
                 4.31227182e-13 * tc[4];
    // species 9: O2
    species[9] = -1.06394356e+03 * invT - 8.75219370e-01 -
                 3.78245636e+00 * tc[0] + 1.49836708e-03 * tc[1] -
                 1.64121700e-06 * tc[2] + 8.06774591e-10 * tc[3] -
                 1.62186418e-13 * tc[4];
    // species 10: CH3
    species[10] = +1.64449988e+04 * invT + 1.06902607e+00 -
                  3.67359040e+00 * tc[0] - 1.00547588e-03 * tc[1] -
                  9.55036427e-07 * tc[2] + 5.72597854e-10 * tc[3] -
                  1.27192867e-13 * tc[4];
    // species 11: CH4
    species[11] = -1.02466476e+04 * invT + 8.79117989e+00 -
                  5.14987613e+00 * tc[0] + 6.83548940e-03 * tc[1] -
                  8.19667665e-06 * tc[2] + 4.03952522e-09 * tc[3] -
                  8.33469780e-13 * tc[4];
    // species 12: HCO
    species[12] = +3.83956496e+03 * invT - 1.73186590e-01 -
                  4.22118584e+00 * tc[0] + 1.62196266e-03 * tc[1] -
                  2.29665743e-06 * tc[2] + 1.10953411e-09 * tc[3] -
                  2.16884432e-13 * tc[4];
    // species 13: CH2O
    species[13] = -1.43089567e+04 * invT + 3.19091025e+00 -
                  4.79372315e+00 * tc[0] + 4.95416684e-03 * tc[1] -
                  6.22033347e-06 * tc[2] + 3.16071051e-09 * tc[3] -
                  6.58863260e-13 * tc[4];
    // species 14: CH3O
    species[14] = +1.29569760e+03 * invT - 3.86060362e+00 -
                  3.71180502e+00 * tc[0] + 1.40231653e-03 * tc[1] -
                  6.27584952e-06 * tc[2] + 3.94226741e-09 * tc[3] -
                  9.32942100e-13 * tc[4];
    // species 15: CH3OH
    species[15] = -2.56427656e+04 * invT + 6.21949405e+00 -
                  5.71539582e+00 * tc[0] + 7.61545645e-03 * tc[1] -
                  1.08740193e-05 * tc[2] + 5.92339074e-09 * tc[3] -
                  1.30676349e-12 * tc[4];
    // species 16: CO
    species[16] = -1.43440860e+04 * invT - 9.28875810e-01 -
                  3.57953347e+00 * tc[0] + 3.05176840e-04 * tc[1] -
                  1.69469055e-07 * tc[2] - 7.55838237e-11 * tc[3] +
                  4.52212249e-14 * tc[4];
    // species 17: CO2
    species[17] = -4.83719697e+04 * invT - 8.54427870e+00 -
                  2.35677352e+00 * tc[0] - 4.49229839e-03 * tc[1] +
                  1.18726045e-06 * tc[2] - 2.04932518e-10 * tc[3] +
                  7.18497740e-15 * tc[4];
    // species 18: C2H2
    species[18] = +2.64289807e+04 * invT - 1.41310240e+01 -
                  8.08681094e-01 * tc[0] - 1.16807815e-02 * tc[1] +
                  5.91953025e-06 * tc[2] - 2.33460364e-09 * tc[3] +
                  4.25036487e-13 * tc[4];
    // species 19: C2H3
    species[19] = +3.48598468e+04 * invT - 6.29807380e+00 -
                  3.21246645e+00 * tc[0] - 7.57395810e-04 * tc[1] -
                  4.32015687e-06 * tc[2] + 2.98048206e-09 * tc[3] -
                  7.35754365e-13 * tc[4];
    // species 20: C2H4
    species[20] = +5.08977593e+03 * invT - 1.13812948e+00 -
                  3.95920148e+00 * tc[0] + 3.78526124e-03 * tc[1] -
                  9.51650487e-06 * tc[2] + 5.76323961e-09 * tc[3] -
                  1.34942187e-12 * tc[4];
    // species 21: C2H5
    species[21] = +1.28416265e+04 * invT - 1.40074356e+00 -
                  4.30646568e+00 * tc[0] + 2.09329446e-03 * tc[1] -
                  8.28571345e-06 * tc[2] + 4.99272172e-09 * tc[3] -
                  1.15254502e-12 * tc[4];
    // species 22: C2H6
    species[22] = -1.15222055e+04 * invT + 6.24601760e-01 -
                  4.29142492e+00 * tc[0] + 2.75077135e-03 * tc[1] -
                  9.99063813e-06 * tc[2] + 5.90388571e-09 * tc[3] -
                  1.34342886e-12 * tc[4];
    // species 23: HCCO
    species[23] = +2.00594490e+04 * invT - 1.12386956e+01 -
                  2.25172140e+00 * tc[0] - 8.82751050e-03 * tc[1] +
                  3.95485017e-06 * tc[2] - 1.43964658e-09 * tc[3] +
                  2.53324055e-13 * tc[4];
    // species 24: CH2CO
    species[24] = -7.27000000e+03 * invT - 1.10798117e+01 -
                  2.13583630e+00 * tc[0] - 9.05943605e-03 * tc[1] +
                  2.89912457e-06 * tc[2] - 7.78664640e-10 * tc[3] +
                  1.00728807e-13 * tc[4];
    // species 25: CH2CHO
    species[25] = +6.20000000e+01 * invT - 7.16239110e+00 -
                  3.40906240e+00 * tc[0] - 5.36928700e-03 * tc[1] -
                  3.15248750e-07 * tc[2] + 5.96548592e-10 * tc[3] -
                  1.43369255e-13 * tc[4];
    // species 26: CH2OCH2
    species[26] = -7.56081430e+03 * invT - 5.09069430e+00 -
                  3.75905320e+00 * tc[0] + 4.72060900e-03 * tc[1] -
                  1.33849535e-05 * tc[2] + 8.40065667e-09 * tc[3] -
                  2.00199605e-12 * tc[4];
    // species 27: aC3H4
    species[27] = +2.15415670e+04 * invT - 8.61309450e+00 -
                  2.61304450e+00 * tc[0] - 6.06128750e-03 * tc[1] -
                  3.08998000e-06 * tc[2] + 2.87709575e-09 * tc[3] -
                  7.66753950e-13 * tc[4];
    // species 28: aC3H5
    species[28] = +1.92456290e+04 * invT - 1.68100305e+01 -
                  1.36318350e+00 * tc[0] - 9.90691050e-03 * tc[1] -
                  2.08284333e-06 * tc[2] + 2.77962958e-09 * tc[3] -
                  7.92328550e-13 * tc[4];
    // species 29: C3H6
    species[29] = +1.07482600e+03 * invT - 1.56520330e+01 -
                  1.49330700e+00 * tc[0] - 1.04625900e-02 * tc[1] -
                  7.47799000e-07 * tc[2] + 1.39076000e-09 * tc[3] -
                  3.57907300e-13 * tc[4];
    // species 30: nC3H7
    species[30] = +1.03123460e+04 * invT - 2.10869167e+01 -
                  1.04911730e+00 * tc[0] - 1.30044865e-02 * tc[1] -
                  3.92375267e-07 * tc[2] + 1.63292767e-09 * tc[3] -
                  4.68601035e-13 * tc[4];
    // species 31: C4H81
    species[31] = -1.79040040e+03 * invT - 2.08813310e+01 -
                  1.18113800e+00 * tc[0] - 1.54266900e-02 * tc[1] -
                  8.47754117e-07 * tc[2] + 2.05457400e-09 * tc[3] -
                  5.55509650e-13 * tc[4];
    // species 32: N
    species[32] = +5.61046370e+04 * invT - 2.69390870e+00 -
                  2.50000000e+00 * tc[0] - 0.00000000e+00 * tc[1] -
                  0.00000000e+00 * tc[2] - 0.00000000e+00 * tc[3] -
                  0.00000000e+00 * tc[4];
    // species 33: NO2
    species[33] = +2.89661790e+03 * invT - 3.36796050e+00 -
                  3.94403120e+00 * tc[0] + 7.92714500e-04 * tc[1] -
                  2.77630200e-06 * tc[2] + 1.70628550e-09 * tc[3] -
                  3.91752820e-13 * tc[4];
    // species 36: NCO
    species[36] = +1.46824770e+04 * invT - 7.72353380e+00 -
                  2.82693080e+00 * tc[0] - 4.40258440e-03 * tc[1] +
                  1.39776890e-06 * tc[2] - 4.00141367e-10 * tc[3] +
                  6.65679750e-14 * tc[4];
    // species 37: CH3O2
    species[37] = +7.40078900e+02 * invT - 1.52299210e+01 -
                  1.73533900e+00 * tc[0] - 1.11001700e-02 * tc[1] +
                  3.14024333e-06 * tc[2] - 7.91776167e-10 * tc[3] +
                  1.10863450e-13 * tc[4];
  } else {
    // species 1: N2
    species[1] = -9.22797700e+02 * invT - 4.05388800e+00 -
                 2.92664000e+00 * tc[0] - 7.43988400e-04 * tc[1] +
                 9.47460000e-08 * tc[2] - 8.41419833e-12 * tc[3] +
                 3.37667550e-16 * tc[4];
    // species 2: H
    species[2] = +2.54736599e+04 * invT + 1.94668292e+00 -
                 2.50000001e+00 * tc[0] + 1.15421486e-11 * tc[1] -
                 2.69269913e-15 * tc[2] + 3.94596029e-19 * tc[3] -
                 2.49098679e-23 * tc[4];
    // species 3: O
    species[3] = +2.92175791e+04 * invT - 3.21491786e+00 -
                 2.56942078e+00 * tc[0] + 4.29870569e-05 * tc[1] -
                 6.99140982e-09 * tc[2] + 8.34814992e-13 * tc[3] -
                 6.14168455e-17 * tc[4];
    // species 4: OH
    species[4] = +3.71885774e+03 * invT - 3.83691187e+00 -
                 2.86472886e+00 * tc[0] - 5.28252240e-04 * tc[1] +
                 4.31804597e-08 * tc[2] - 2.54348895e-12 * tc[3] +
                 6.65979380e-17 * tc[4];
    // species 5: HO2
    species[5] = +1.11856713e+02 * invT - 7.67891250e-01 -
                 4.01721090e+00 * tc[0] - 1.11991006e-03 * tc[1] +
                 1.05609692e-07 * tc[2] - 9.52053083e-12 * tc[3] +
                 5.39542675e-16 * tc[4];
    // species 6: H2
    species[6] = -9.50158922e+02 * invT + 5.54230251e+00 -
                 3.33727920e+00 * tc[0] + 2.47012365e-05 * tc[1] -
                 8.32427963e-08 * tc[2] + 1.49638662e-11 * tc[3] -
                 1.00127688e-15 * tc[4];
    // species 7: H2O
    species[7] = -3.00042971e+04 * invT - 2.93277761e+00 -
                 3.03399249e+00 * tc[0] - 1.08845902e-03 * tc[1] +
                 2.73454197e-08 * tc[2] + 8.08683225e-12 * tc[3] -
                 8.41004960e-16 * tc[4];
    // species 8: H2O2
    species[8] = -1.78617877e+04 * invT + 2.48846230e-01 -
                 4.16500285e+00 * tc[0] - 2.45415847e-03 * tc[1] +
                 3.16898708e-07 * tc[2] - 3.09321655e-11 * tc[3] +
                 1.43954153e-15 * tc[4];
    // species 9: O2
    species[9] = -1.08845772e+03 * invT - 3.17069345e+00 -
                 3.28253784e+00 * tc[0] - 7.41543770e-04 * tc[1] +
                 1.26327778e-07 * tc[2] - 1.74558796e-11 * tc[3] +
                 1.08358897e-15 * tc[4];
    // species 10: CH3
    species[10] = +1.67755843e+04 * invT - 7.19435407e+00 -
                  2.28571772e+00 * tc[0] - 3.61995018e-03 * tc[1] +
                  4.97857247e-07 * tc[2] - 4.96403870e-11 * tc[3] +
                  2.33577197e-15 * tc[4];
    // species 11: CH4
    species[11] = -9.46834459e+03 * invT - 1.93624665e+01 -
                  7.48514950e-02 * tc[0] - 6.69547335e-03 * tc[1] +
                  9.55476348e-07 * tc[2] - 1.01910446e-10 * tc[3] +
                  5.09076150e-15 * tc[4];
    // species 12: HCO
    species[12] = +4.01191815e+03 * invT - 8.02617054e+00 -
                  2.77217438e+00 * tc[0] - 2.47847763e-03 * tc[1] +
                  4.14076022e-07 * tc[2] - 4.90968148e-11 * tc[3] +
                  2.66754356e-15 * tc[4];
    // species 13: CH2O
    species[13] = -1.39958323e+04 * invT - 1.28956329e+01 -
                  1.76069008e+00 * tc[0] - 4.60000041e-03 * tc[1] +
                  7.37098022e-07 * tc[2] - 8.38676767e-11 * tc[3] +
                  4.41927820e-15 * tc[4];
    // species 14: CH3O
    species[14] = +3.78111940e+02 * invT + 5.72459266e+00 -
                  4.75779238e+00 * tc[0] - 3.72071237e-03 * tc[1] +
                  4.49508627e-07 * tc[2] - 3.65075420e-11 * tc[3] +
                  1.31768549e-15 * tc[4];
    // species 15: CH3OH
    species[15] = -2.53748747e+04 * invT - 1.37126544e+01 -
                  1.78970791e+00 * tc[0] - 7.04691460e-03 * tc[1] +
                  1.06083472e-06 * tc[2] - 1.15142571e-10 * tc[3] +
                  5.85301100e-15 * tc[4];
    // species 16: CO
    species[16] = -1.41518724e+04 * invT - 6.10350211e+00 -
                  2.71518561e+00 * tc[0] - 1.03126372e-03 * tc[1] +
                  1.66470962e-07 * tc[2] - 1.91710840e-11 * tc[3] +
                  1.01823858e-15 * tc[4];
    // species 17: CO2
    species[17] = -4.87591660e+04 * invT + 5.85822230e-01 -
                  3.85746029e+00 * tc[0] - 2.20718513e-03 * tc[1] +
                  3.69135673e-07 * tc[2] - 4.36241823e-11 * tc[3] +
                  2.36042082e-15 * tc[4];
    // species 18: C2H2
    species[18] = +2.59359992e+04 * invT + 4.37785085e+00 -
                  4.14756964e+00 * tc[0] - 2.98083332e-03 * tc[1] +
                  3.95491420e-07 * tc[2] - 3.89510143e-11 * tc[3] +
                  1.80617607e-15 * tc[4];
    // species 19: C2H3
    species[19] = +3.46128739e+04 * invT - 5.77059978e+00 -
                  3.01672400e+00 * tc[0] - 5.16511460e-03 * tc[1] +
                  7.80137248e-07 * tc[2] - 8.48027400e-11 * tc[3] +
                  4.31303520e-15 * tc[4];
    // species 20: C2H4
    species[20] = +4.93988614e+03 * invT - 9.26925814e+00 -
                  2.03611116e+00 * tc[0] - 7.32270755e-03 * tc[1] +
                  1.11846319e-06 * tc[2] - 1.22685769e-10 * tc[3] +
                  6.28530305e-15 * tc[4];
    // species 21: C2H5
    species[21] = +1.28575200e+04 * invT - 1.25077779e+01 -
                  1.95465642e+00 * tc[0] - 8.69863610e-03 * tc[1] +
                  1.33034445e-06 * tc[2] - 1.46014741e-10 * tc[3] +
                  7.48207880e-15 * tc[4];
    // species 22: C2H6
    species[22] = -1.14263932e+04 * invT - 1.50437292e+01 -
                  1.07188150e+00 * tc[0] - 1.08426339e-02 * tc[1] +
                  1.67093445e-06 * tc[2] - 1.84510001e-10 * tc[3] +
                  9.50014450e-15 * tc[4];
    // species 23: HCCO
    species[23] = +1.93272150e+04 * invT + 8.55846530e+00 -
                  5.62820580e+00 * tc[0] - 2.04267005e-03 * tc[1] +
                  2.65575783e-07 * tc[2] - 2.38550433e-11 * tc[3] +
                  9.70391600e-16 * tc[4];
    // species 24: CH2CO
    species[24] = -7.77850000e+03 * invT + 2.87905011e+00 -
                  4.51129732e+00 * tc[0] - 4.50179872e-03 * tc[1] +
                  6.94899392e-07 * tc[2] - 7.69454902e-11 * tc[3] +
                  3.97419100e-15 * tc[4];
    // species 25: CH2CHO
    species[25] = -9.69500000e+02 * invT + 1.00077578e+01 -
                  5.97566990e+00 * tc[0] - 4.06529570e-03 * tc[1] +
                  4.57270750e-07 * tc[2] - 3.39192008e-11 * tc[3] +
                  1.08800855e-15 * tc[4];
    // species 26: CH2OCH2
    species[26] = -9.18042510e+03 * invT + 1.15687246e+01 -
                  5.48876410e+00 * tc[0] - 6.02309500e-03 * tc[1] +
                  7.22282183e-07 * tc[2] - 5.83569258e-11 * tc[3] +
                  2.09745440e-15 * tc[4];
    // species 27: aC3H4
    species[27] = +2.01174950e+04 * invT + 1.63126382e+01 -
                  6.31687220e+00 * tc[0] - 5.56686400e-03 * tc[1] +
                  6.60489633e-07 * tc[2] - 5.29701983e-11 * tc[3] +
                  1.89377700e-15 * tc[4];
    // species 28: aC3H5
    species[28] = +1.74824490e+04 * invT + 1.67438377e+01 -
                  6.50078770e+00 * tc[0] - 7.16236550e-03 * tc[1] +
                  9.46360533e-07 * tc[2] - 9.23400083e-11 * tc[3] +
                  4.51819435e-15 * tc[4];
    // species 29: C3H6
    species[29] = -9.23570300e+02 * invT + 1.90456070e+01 -
                  6.73225700e+00 * tc[0] - 7.45417000e-03 * tc[1] +
                  8.24983167e-07 * tc[2] - 6.01001833e-11 * tc[3] +
                  1.88310200e-15 * tc[4];
    // species 30: nC3H7
    species[30] = +7.97622360e+03 * invT + 2.22250449e+01 -
                  7.70974790e+00 * tc[0] - 8.01574250e-03 * tc[1] +
                  8.78670633e-07 * tc[2] - 6.32402933e-11 * tc[3] +
                  1.94313595e-15 * tc[4];
    // species 31: C4H81
    species[31] = -2.13972310e+03 * invT - 1.44896169e+01 -
                  2.05358410e+00 * tc[0] - 1.71752535e-02 * tc[1] +
                  2.64719950e-06 * tc[2] - 2.75747183e-10 * tc[3] +
                  1.26805225e-14 * tc[4];
    // species 32: N
    species[32] = +5.61337730e+04 * invT - 3.23366670e+00 -
                  2.41594290e+00 * tc[0] - 8.74453250e-05 * tc[1] +
                  1.98372817e-08 * tc[2] - 2.51885375e-12 * tc[3] +
                  1.01804910e-16 * tc[4];
    // species 33: NO2
    species[33] = +2.31649830e+03 * invT + 4.00217115e+00 -
                  4.88475420e+00 * tc[0] - 1.08619780e-03 * tc[1] +
                  1.38011510e-07 * tc[2] - 1.31229250e-11 * tc[3] +
                  5.25544750e-16 * tc[4];
    // species 36: NCO
    species[36] = +1.40041230e+04 * invT + 6.69645050e+00 -
                  5.15218450e+00 * tc[0] - 1.15258805e-03 * tc[1] +
                  1.46721922e-07 * tc[2] - 1.23242483e-11 * tc[3] +
                  4.54889980e-16 * tc[4];
    // species 37: CH3O2
    species[37] = -1.13786900e+03 * invT + 2.38829550e+01 -
                  8.00891500e+00 * tc[0] - 2.73462050e-03 * tc[1] +
                  2.07232000e-07 * tc[2] - 1.24317750e-11 * tc[3] +
                  3.80926650e-16 * tc[4];
  }

  // species with midpoint at T=1382 kelvin
  if (T < 1382) {
    // species 34: HCNO
    species[34] = +1.92990252e+04 * invT - 9.08601731e+00 -
                  2.64727989e+00 * tc[0] - 6.37526710e-03 * tc[1] +
                  1.74657060e-06 * tc[2] - 3.67860697e-10 * tc[3] +
                  3.78760733e-14 * tc[4];
  } else {
    // species 34: HCNO
    species[34] = +1.79661339e+04 * invT + 1.59292645e+01 -
                  6.59860456e+00 * tc[0] - 1.51389313e-03 * tc[1] +
                  1.79507243e-07 * tc[2] - 1.43055440e-11 * tc[3] +
                  5.07196955e-16 * tc[4];
  }

  // species with midpoint at T=1478 kelvin
  if (T < 1478) {
    // species 35: HNCO
    species[35] = -1.55873636e+04 * invT - 3.56361410e+00 -
                  3.63096317e+00 * tc[0] - 3.65141179e-03 * tc[1] +
                  3.80083338e-07 * tc[2] + 5.51059415e-11 * tc[3] -
                  1.81117876e-14 * tc[4];
  } else {
    // species 35: HNCO
    species[35] = -1.66599344e+04 * invT + 1.36061988e+01 -
                  6.22395134e+00 * tc[0] - 1.58932002e-03 * tc[1] +
                  1.82297925e-07 * tc[2] - 1.42279302e-11 * tc[3] +
                  4.97510977e-16 * tc[4];
  }
}

// compute the e/(RT) at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesInternalEnergy(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1 / T;

  // species with no change at a midpoint T
  // species 0: AR
  species[0] = +1.50000000e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4] - 7.45375000e+02 * invT;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 1: N2
    species[1] = +2.29867700e+00 + 7.04120200e-04 * tc[1] -
                 1.32107400e-06 * tc[2] + 1.41037875e-09 * tc[3] -
                 4.88970800e-13 * tc[4] - 1.02089990e+03 * invT;
    // species 2: H
    species[2] = +1.50000000e+00 + 3.52666409e-13 * tc[1] -
                 6.65306547e-16 * tc[2] + 5.75204080e-19 * tc[3] -
                 1.85546466e-22 * tc[4] + 2.54736599e+04 * invT;
    // species 3: O
    species[3] = +2.16826710e+00 - 1.63965942e-03 * tc[1] +
                 2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
                 4.22531942e-13 * tc[4] + 2.91222592e+04 * invT;
    // species 4: OH
    species[4] = +3.12530561e+00 - 1.61272470e-03 * tc[1] +
                 2.17588230e-06 * tc[2] - 1.44963411e-09 * tc[3] +
                 4.12474758e-13 * tc[4] + 3.38153812e+03 * invT;
    // species 5: HO2
    species[5] = +3.30179801e+00 - 2.37456025e-03 * tc[1] +
                 7.05276303e-06 * tc[2] - 6.06909735e-09 * tc[3] +
                 1.85845025e-12 * tc[4] + 2.94808040e+02 * invT;
    // species 6: H2
    species[6] = +1.34433112e+00 + 3.99026037e-03 * tc[1] -
                 6.49271700e-06 * tc[2] + 5.03930235e-09 * tc[3] -
                 1.47522352e-12 * tc[4] - 9.17935173e+02 * invT;
    // species 7: H2O
    species[7] = +3.19864056e+00 - 1.01821705e-03 * tc[1] +
                 2.17346737e-06 * tc[2] - 1.37199266e-09 * tc[3] +
                 3.54395634e-13 * tc[4] - 3.02937267e+04 * invT;
    // species 8: H2O2
    species[8] = +3.27611269e+00 - 2.71411208e-04 * tc[1] +
                 5.57785670e-06 * tc[2] - 5.39427032e-09 * tc[3] +
                 1.72490873e-12 * tc[4] - 1.77025821e+04 * invT;
    // species 9: O2
    species[9] = +2.78245636e+00 - 1.49836708e-03 * tc[1] +
                 3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
                 6.48745674e-13 * tc[4] - 1.06394356e+03 * invT;
    // species 10: CH3
    species[10] = +2.67359040e+00 + 1.00547588e-03 * tc[1] +
                  1.91007285e-06 * tc[2] - 1.71779356e-09 * tc[3] +
                  5.08771468e-13 * tc[4] + 1.64449988e+04 * invT;
    // species 11: CH4
    species[11] = +4.14987613e+00 - 6.83548940e-03 * tc[1] +
                  1.63933533e-05 * tc[2] - 1.21185757e-08 * tc[3] +
                  3.33387912e-12 * tc[4] - 1.02466476e+04 * invT;
    // species 12: HCO
    species[12] = +3.22118584e+00 - 1.62196266e-03 * tc[1] +
                  4.59331487e-06 * tc[2] - 3.32860233e-09 * tc[3] +
                  8.67537730e-13 * tc[4] + 3.83956496e+03 * invT;
    // species 13: CH2O
    species[13] = +3.79372315e+00 - 4.95416684e-03 * tc[1] +
                  1.24406669e-05 * tc[2] - 9.48213152e-09 * tc[3] +
                  2.63545304e-12 * tc[4] - 1.43089567e+04 * invT;
    // species 14: CH3O
    species[14] = +2.71180502e+00 - 1.40231653e-03 * tc[1] +
                  1.25516990e-05 * tc[2] - 1.18268022e-08 * tc[3] +
                  3.73176840e-12 * tc[4] + 1.29569760e+03 * invT;
    // species 15: CH3OH
    species[15] = +4.71539582e+00 - 7.61545645e-03 * tc[1] +
                  2.17480385e-05 * tc[2] - 1.77701722e-08 * tc[3] +
                  5.22705396e-12 * tc[4] - 2.56427656e+04 * invT;
    // species 16: CO
    species[16] = +2.57953347e+00 - 3.05176840e-04 * tc[1] +
                  3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
                  1.80884900e-13 * tc[4] - 1.43440860e+04 * invT;
    // species 17: CO2
    species[17] = +1.35677352e+00 + 4.49229839e-03 * tc[1] -
                  2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                  2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 18: C2H2
    species[18] = -1.91318906e-01 + 1.16807815e-02 * tc[1] -
                  1.18390605e-05 * tc[2] + 7.00381092e-09 * tc[3] -
                  1.70014595e-12 * tc[4] + 2.64289807e+04 * invT;
    // species 19: C2H3
    species[19] = +2.21246645e+00 + 7.57395810e-04 * tc[1] +
                  8.64031373e-06 * tc[2] - 8.94144617e-09 * tc[3] +
                  2.94301746e-12 * tc[4] + 3.48598468e+04 * invT;
    // species 20: C2H4
    species[20] = +2.95920148e+00 - 3.78526124e-03 * tc[1] +
                  1.90330097e-05 * tc[2] - 1.72897188e-08 * tc[3] +
                  5.39768746e-12 * tc[4] + 5.08977593e+03 * invT;
    // species 21: C2H5
    species[21] = +3.30646568e+00 - 2.09329446e-03 * tc[1] +
                  1.65714269e-05 * tc[2] - 1.49781651e-08 * tc[3] +
                  4.61018008e-12 * tc[4] + 1.28416265e+04 * invT;
    // species 22: C2H6
    species[22] = +3.29142492e+00 - 2.75077135e-03 * tc[1] +
                  1.99812763e-05 * tc[2] - 1.77116571e-08 * tc[3] +
                  5.37371542e-12 * tc[4] - 1.15222055e+04 * invT;
    // species 23: HCCO
    species[23] = +1.25172140e+00 + 8.82751050e-03 * tc[1] -
                  7.90970033e-06 * tc[2] + 4.31893975e-09 * tc[3] -
                  1.01329622e-12 * tc[4] + 2.00594490e+04 * invT;
    // species 24: CH2CO
    species[24] = +1.13583630e+00 + 9.05943605e-03 * tc[1] -
                  5.79824913e-06 * tc[2] + 2.33599392e-09 * tc[3] -
                  4.02915230e-13 * tc[4] - 7.27000000e+03 * invT;
    // species 25: CH2CHO
    species[25] = +2.40906240e+00 + 5.36928700e-03 * tc[1] +
                  6.30497500e-07 * tc[2] - 1.78964578e-09 * tc[3] +
                  5.73477020e-13 * tc[4] + 6.20000000e+01 * invT;
    // species 26: CH2OCH2
    species[26] = +2.75905320e+00 - 4.72060900e-03 * tc[1] +
                  2.67699070e-05 * tc[2] - 2.52019700e-08 * tc[3] +
                  8.00798420e-12 * tc[4] - 7.56081430e+03 * invT;
    // species 27: aC3H4
    species[27] = +1.61304450e+00 + 6.06128750e-03 * tc[1] +
                  6.17996000e-06 * tc[2] - 8.63128725e-09 * tc[3] +
                  3.06701580e-12 * tc[4] + 2.15415670e+04 * invT;
    // species 28: aC3H5
    species[28] = +3.63183500e-01 + 9.90691050e-03 * tc[1] +
                  4.16568667e-06 * tc[2] - 8.33888875e-09 * tc[3] +
                  3.16931420e-12 * tc[4] + 1.92456290e+04 * invT;
    // species 29: C3H6
    species[29] = +4.93307000e-01 + 1.04625900e-02 * tc[1] +
                  1.49559800e-06 * tc[2] - 4.17228000e-09 * tc[3] +
                  1.43162920e-12 * tc[4] + 1.07482600e+03 * invT;
    // species 30: nC3H7
    species[30] = +4.91173000e-02 + 1.30044865e-02 * tc[1] +
                  7.84750533e-07 * tc[2] - 4.89878300e-09 * tc[3] +
                  1.87440414e-12 * tc[4] + 1.03123460e+04 * invT;
    // species 31: C4H81
    species[31] = +1.81138000e-01 + 1.54266900e-02 * tc[1] +
                  1.69550823e-06 * tc[2] - 6.16372200e-09 * tc[3] +
                  2.22203860e-12 * tc[4] - 1.79040040e+03 * invT;
    // species 32: N
    species[32] = +1.50000000e+00 + 0.00000000e+00 * tc[1] +
                  0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                  0.00000000e+00 * tc[4] + 5.61046370e+04 * invT;
    // species 33: NO2
    species[33] = +2.94403120e+00 - 7.92714500e-04 * tc[1] +
                  5.55260400e-06 * tc[2] - 5.11885650e-09 * tc[3] +
                  1.56701128e-12 * tc[4] + 2.89661790e+03 * invT;
    // species 36: NCO
    species[36] = +1.82693080e+00 + 4.40258440e-03 * tc[1] -
                  2.79553780e-06 * tc[2] + 1.20042410e-09 * tc[3] -
                  2.66271900e-13 * tc[4] + 1.46824770e+04 * invT;
    // species 37: CH3O2
    species[37] = +7.35339000e-01 + 1.11001700e-02 * tc[1] -
                  6.28048667e-06 * tc[2] + 2.37532850e-09 * tc[3] -
                  4.43453800e-13 * tc[4] + 7.40078900e+02 * invT;
  } else {
    // species 1: N2
    species[1] = +1.92664000e+00 + 7.43988400e-04 * tc[1] -
                 1.89492000e-07 * tc[2] + 2.52425950e-11 * tc[3] -
                 1.35067020e-15 * tc[4] - 9.22797700e+02 * invT;
    // species 2: H
    species[2] = +1.50000001e+00 - 1.15421486e-11 * tc[1] +
                 5.38539827e-15 * tc[2] - 1.18378809e-18 * tc[3] +
                 9.96394714e-23 * tc[4] + 2.54736599e+04 * invT;
    // species 3: O
    species[3] = +1.56942078e+00 - 4.29870569e-05 * tc[1] +
                 1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
                 2.45667382e-16 * tc[4] + 2.92175791e+04 * invT;
    // species 4: OH
    species[4] = +1.86472886e+00 + 5.28252240e-04 * tc[1] -
                 8.63609193e-08 * tc[2] + 7.63046685e-12 * tc[3] -
                 2.66391752e-16 * tc[4] + 3.71885774e+03 * invT;
    // species 5: HO2
    species[5] = +3.01721090e+00 + 1.11991006e-03 * tc[1] -
                 2.11219383e-07 * tc[2] + 2.85615925e-11 * tc[3] -
                 2.15817070e-15 * tc[4] + 1.11856713e+02 * invT;
    // species 6: H2
    species[6] = +2.33727920e+00 - 2.47012365e-05 * tc[1] +
                 1.66485593e-07 * tc[2] - 4.48915985e-11 * tc[3] +
                 4.00510752e-15 * tc[4] - 9.50158922e+02 * invT;
    // species 7: H2O
    species[7] = +2.03399249e+00 + 1.08845902e-03 * tc[1] -
                 5.46908393e-08 * tc[2] - 2.42604967e-11 * tc[3] +
                 3.36401984e-15 * tc[4] - 3.00042971e+04 * invT;
    // species 8: H2O2
    species[8] = +3.16500285e+00 + 2.45415847e-03 * tc[1] -
                 6.33797417e-07 * tc[2] + 9.27964965e-11 * tc[3] -
                 5.75816610e-15 * tc[4] - 1.78617877e+04 * invT;
    // species 9: O2
    species[9] = +2.28253784e+00 + 7.41543770e-04 * tc[1] -
                 2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
                 4.33435588e-15 * tc[4] - 1.08845772e+03 * invT;
    // species 10: CH3
    species[10] = +1.28571772e+00 + 3.61995018e-03 * tc[1] -
                  9.95714493e-07 * tc[2] + 1.48921161e-10 * tc[3] -
                  9.34308788e-15 * tc[4] + 1.67755843e+04 * invT;
    // species 11: CH4
    species[11] = -9.25148505e-01 + 6.69547335e-03 * tc[1] -
                  1.91095270e-06 * tc[2] + 3.05731338e-10 * tc[3] -
                  2.03630460e-14 * tc[4] - 9.46834459e+03 * invT;
    // species 12: HCO
    species[12] = +1.77217438e+00 + 2.47847763e-03 * tc[1] -
                  8.28152043e-07 * tc[2] + 1.47290445e-10 * tc[3] -
                  1.06701742e-14 * tc[4] + 4.01191815e+03 * invT;
    // species 13: CH2O
    species[13] = +7.60690080e-01 + 4.60000041e-03 * tc[1] -
                  1.47419604e-06 * tc[2] + 2.51603030e-10 * tc[3] -
                  1.76771128e-14 * tc[4] - 1.39958323e+04 * invT;
    // species 14: CH3O
    species[14] = +3.75779238e+00 + 3.72071237e-03 * tc[1] -
                  8.99017253e-07 * tc[2] + 1.09522626e-10 * tc[3] -
                  5.27074196e-15 * tc[4] + 3.78111940e+02 * invT;
    // species 15: CH3OH
    species[15] = +7.89707910e-01 + 7.04691460e-03 * tc[1] -
                  2.12166945e-06 * tc[2] + 3.45427713e-10 * tc[3] -
                  2.34120440e-14 * tc[4] - 2.53748747e+04 * invT;
    // species 16: CO
    species[16] = +1.71518561e+00 + 1.03126372e-03 * tc[1] -
                  3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
                  4.07295432e-15 * tc[4] - 1.41518724e+04 * invT;
    // species 17: CO2
    species[17] = +2.85746029e+00 + 2.20718513e-03 * tc[1] -
                  7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                  9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 18: C2H2
    species[18] = +3.14756964e+00 + 2.98083332e-03 * tc[1] -
                  7.90982840e-07 * tc[2] + 1.16853043e-10 * tc[3] -
                  7.22470426e-15 * tc[4] + 2.59359992e+04 * invT;
    // species 19: C2H3
    species[19] = +2.01672400e+00 + 5.16511460e-03 * tc[1] -
                  1.56027450e-06 * tc[2] + 2.54408220e-10 * tc[3] -
                  1.72521408e-14 * tc[4] + 3.46128739e+04 * invT;
    // species 20: C2H4
    species[20] = +1.03611116e+00 + 7.32270755e-03 * tc[1] -
                  2.23692638e-06 * tc[2] + 3.68057308e-10 * tc[3] -
                  2.51412122e-14 * tc[4] + 4.93988614e+03 * invT;
    // species 21: C2H5
    species[21] = +9.54656420e-01 + 8.69863610e-03 * tc[1] -
                  2.66068889e-06 * tc[2] + 4.38044223e-10 * tc[3] -
                  2.99283152e-14 * tc[4] + 1.28575200e+04 * invT;
    // species 22: C2H6
    species[22] = +7.18815000e-02 + 1.08426339e-02 * tc[1] -
                  3.34186890e-06 * tc[2] + 5.53530003e-10 * tc[3] -
                  3.80005780e-14 * tc[4] - 1.14263932e+04 * invT;
    // species 23: HCCO
    species[23] = +4.62820580e+00 + 2.04267005e-03 * tc[1] -
                  5.31151567e-07 * tc[2] + 7.15651300e-11 * tc[3] -
                  3.88156640e-15 * tc[4] + 1.93272150e+04 * invT;
    // species 24: CH2CO
    species[24] = +3.51129732e+00 + 4.50179872e-03 * tc[1] -
                  1.38979878e-06 * tc[2] + 2.30836470e-10 * tc[3] -
                  1.58967640e-14 * tc[4] - 7.77850000e+03 * invT;
    // species 25: CH2CHO
    species[25] = +4.97566990e+00 + 4.06529570e-03 * tc[1] -
                  9.14541500e-07 * tc[2] + 1.01757603e-10 * tc[3] -
                  4.35203420e-15 * tc[4] - 9.69500000e+02 * invT;
    // species 26: CH2OCH2
    species[26] = +4.48876410e+00 + 6.02309500e-03 * tc[1] -
                  1.44456437e-06 * tc[2] + 1.75070777e-10 * tc[3] -
                  8.38981760e-15 * tc[4] - 9.18042510e+03 * invT;
    // species 27: aC3H4
    species[27] = +5.31687220e+00 + 5.56686400e-03 * tc[1] -
                  1.32097927e-06 * tc[2] + 1.58910595e-10 * tc[3] -
                  7.57510800e-15 * tc[4] + 2.01174950e+04 * invT;
    // species 28: aC3H5
    species[28] = +5.50078770e+00 + 7.16236550e-03 * tc[1] -
                  1.89272107e-06 * tc[2] + 2.77020025e-10 * tc[3] -
                  1.80727774e-14 * tc[4] + 1.74824490e+04 * invT;
    // species 29: C3H6
    species[29] = +5.73225700e+00 + 7.45417000e-03 * tc[1] -
                  1.64996633e-06 * tc[2] + 1.80300550e-10 * tc[3] -
                  7.53240800e-15 * tc[4] - 9.23570300e+02 * invT;
    // species 30: nC3H7
    species[30] = +6.70974790e+00 + 8.01574250e-03 * tc[1] -
                  1.75734127e-06 * tc[2] + 1.89720880e-10 * tc[3] -
                  7.77254380e-15 * tc[4] + 7.97622360e+03 * invT;
    // species 31: C4H81
    species[31] = +1.05358410e+00 + 1.71752535e-02 * tc[1] -
                  5.29439900e-06 * tc[2] + 8.27241550e-10 * tc[3] -
                  5.07220900e-14 * tc[4] - 2.13972310e+03 * invT;
    // species 32: N
    species[32] = +1.41594290e+00 + 8.74453250e-05 * tc[1] -
                  3.96745633e-08 * tc[2] + 7.55656125e-12 * tc[3] -
                  4.07219640e-16 * tc[4] + 5.61337730e+04 * invT;
    // species 33: NO2
    species[33] = +3.88475420e+00 + 1.08619780e-03 * tc[1] -
                  2.76023020e-07 * tc[2] + 3.93687750e-11 * tc[3] -
                  2.10217900e-15 * tc[4] + 2.31649830e+03 * invT;
    // species 36: NCO
    species[36] = +4.15218450e+00 + 1.15258805e-03 * tc[1] -
                  2.93443843e-07 * tc[2] + 3.69727450e-11 * tc[3] -
                  1.81955992e-15 * tc[4] + 1.40041230e+04 * invT;
    // species 37: CH3O2
    species[37] = +7.00891500e+00 + 2.73462050e-03 * tc[1] -
                  4.14464000e-07 * tc[2] + 3.72953250e-11 * tc[3] -
                  1.52370660e-15 * tc[4] - 1.13786900e+03 * invT;
  }

  // species with midpoint at T=1382 kelvin
  if (T < 1382) {
    // species 34: HCNO
    species[34] = +1.64727989e+00 + 6.37526710e-03 * tc[1] -
                  3.49314120e-06 * tc[2] + 1.10358209e-09 * tc[3] -
                  1.51504293e-13 * tc[4] + 1.92990252e+04 * invT;
  } else {
    // species 34: HCNO
    species[34] = +5.59860456e+00 + 1.51389313e-03 * tc[1] -
                  3.59014487e-07 * tc[2] + 4.29166320e-11 * tc[3] -
                  2.02878782e-15 * tc[4] + 1.79661339e+04 * invT;
  }

  // species with midpoint at T=1478 kelvin
  if (T < 1478) {
    // species 35: HNCO
    species[35] = +2.63096317e+00 + 3.65141179e-03 * tc[1] -
                  7.60166677e-07 * tc[2] - 1.65317825e-10 * tc[3] +
                  7.24471504e-14 * tc[4] - 1.55873636e+04 * invT;
  } else {
    // species 35: HNCO
    species[35] = +5.22395134e+00 + 1.58932002e-03 * tc[1] -
                  3.64595850e-07 * tc[2] + 4.26837908e-11 * tc[3] -
                  1.99004391e-15 * tc[4] - 1.66599344e+04 * invT;
  }
}

// compute the h/(RT) at the given temperature (Eq 20)
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEnthalpy(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1 / T;

  // species with no change at a midpoint T
  // species 0: AR
  species[0] = +2.50000000e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4] - 7.45375000e+02 * invT;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 1: N2
    species[1] = +3.29867700e+00 + 7.04120200e-04 * tc[1] -
                 1.32107400e-06 * tc[2] + 1.41037875e-09 * tc[3] -
                 4.88970800e-13 * tc[4] - 1.02089990e+03 * invT;
    // species 2: H
    species[2] = +2.50000000e+00 + 3.52666409e-13 * tc[1] -
                 6.65306547e-16 * tc[2] + 5.75204080e-19 * tc[3] -
                 1.85546466e-22 * tc[4] + 2.54736599e+04 * invT;
    // species 3: O
    species[3] = +3.16826710e+00 - 1.63965942e-03 * tc[1] +
                 2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
                 4.22531942e-13 * tc[4] + 2.91222592e+04 * invT;
    // species 4: OH
    species[4] = +4.12530561e+00 - 1.61272470e-03 * tc[1] +
                 2.17588230e-06 * tc[2] - 1.44963411e-09 * tc[3] +
                 4.12474758e-13 * tc[4] + 3.38153812e+03 * invT;
    // species 5: HO2
    species[5] = +4.30179801e+00 - 2.37456025e-03 * tc[1] +
                 7.05276303e-06 * tc[2] - 6.06909735e-09 * tc[3] +
                 1.85845025e-12 * tc[4] + 2.94808040e+02 * invT;
    // species 6: H2
    species[6] = +2.34433112e+00 + 3.99026037e-03 * tc[1] -
                 6.49271700e-06 * tc[2] + 5.03930235e-09 * tc[3] -
                 1.47522352e-12 * tc[4] - 9.17935173e+02 * invT;
    // species 7: H2O
    species[7] = +4.19864056e+00 - 1.01821705e-03 * tc[1] +
                 2.17346737e-06 * tc[2] - 1.37199266e-09 * tc[3] +
                 3.54395634e-13 * tc[4] - 3.02937267e+04 * invT;
    // species 8: H2O2
    species[8] = +4.27611269e+00 - 2.71411208e-04 * tc[1] +
                 5.57785670e-06 * tc[2] - 5.39427032e-09 * tc[3] +
                 1.72490873e-12 * tc[4] - 1.77025821e+04 * invT;
    // species 9: O2
    species[9] = +3.78245636e+00 - 1.49836708e-03 * tc[1] +
                 3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
                 6.48745674e-13 * tc[4] - 1.06394356e+03 * invT;
    // species 10: CH3
    species[10] = +3.67359040e+00 + 1.00547588e-03 * tc[1] +
                  1.91007285e-06 * tc[2] - 1.71779356e-09 * tc[3] +
                  5.08771468e-13 * tc[4] + 1.64449988e+04 * invT;
    // species 11: CH4
    species[11] = +5.14987613e+00 - 6.83548940e-03 * tc[1] +
                  1.63933533e-05 * tc[2] - 1.21185757e-08 * tc[3] +
                  3.33387912e-12 * tc[4] - 1.02466476e+04 * invT;
    // species 12: HCO
    species[12] = +4.22118584e+00 - 1.62196266e-03 * tc[1] +
                  4.59331487e-06 * tc[2] - 3.32860233e-09 * tc[3] +
                  8.67537730e-13 * tc[4] + 3.83956496e+03 * invT;
    // species 13: CH2O
    species[13] = +4.79372315e+00 - 4.95416684e-03 * tc[1] +
                  1.24406669e-05 * tc[2] - 9.48213152e-09 * tc[3] +
                  2.63545304e-12 * tc[4] - 1.43089567e+04 * invT;
    // species 14: CH3O
    species[14] = +3.71180502e+00 - 1.40231653e-03 * tc[1] +
                  1.25516990e-05 * tc[2] - 1.18268022e-08 * tc[3] +
                  3.73176840e-12 * tc[4] + 1.29569760e+03 * invT;
    // species 15: CH3OH
    species[15] = +5.71539582e+00 - 7.61545645e-03 * tc[1] +
                  2.17480385e-05 * tc[2] - 1.77701722e-08 * tc[3] +
                  5.22705396e-12 * tc[4] - 2.56427656e+04 * invT;
    // species 16: CO
    species[16] = +3.57953347e+00 - 3.05176840e-04 * tc[1] +
                  3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
                  1.80884900e-13 * tc[4] - 1.43440860e+04 * invT;
    // species 17: CO2
    species[17] = +2.35677352e+00 + 4.49229839e-03 * tc[1] -
                  2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                  2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 18: C2H2
    species[18] = +8.08681094e-01 + 1.16807815e-02 * tc[1] -
                  1.18390605e-05 * tc[2] + 7.00381092e-09 * tc[3] -
                  1.70014595e-12 * tc[4] + 2.64289807e+04 * invT;
    // species 19: C2H3
    species[19] = +3.21246645e+00 + 7.57395810e-04 * tc[1] +
                  8.64031373e-06 * tc[2] - 8.94144617e-09 * tc[3] +
                  2.94301746e-12 * tc[4] + 3.48598468e+04 * invT;
    // species 20: C2H4
    species[20] = +3.95920148e+00 - 3.78526124e-03 * tc[1] +
                  1.90330097e-05 * tc[2] - 1.72897188e-08 * tc[3] +
                  5.39768746e-12 * tc[4] + 5.08977593e+03 * invT;
    // species 21: C2H5
    species[21] = +4.30646568e+00 - 2.09329446e-03 * tc[1] +
                  1.65714269e-05 * tc[2] - 1.49781651e-08 * tc[3] +
                  4.61018008e-12 * tc[4] + 1.28416265e+04 * invT;
    // species 22: C2H6
    species[22] = +4.29142492e+00 - 2.75077135e-03 * tc[1] +
                  1.99812763e-05 * tc[2] - 1.77116571e-08 * tc[3] +
                  5.37371542e-12 * tc[4] - 1.15222055e+04 * invT;
    // species 23: HCCO
    species[23] = +2.25172140e+00 + 8.82751050e-03 * tc[1] -
                  7.90970033e-06 * tc[2] + 4.31893975e-09 * tc[3] -
                  1.01329622e-12 * tc[4] + 2.00594490e+04 * invT;
    // species 24: CH2CO
    species[24] = +2.13583630e+00 + 9.05943605e-03 * tc[1] -
                  5.79824913e-06 * tc[2] + 2.33599392e-09 * tc[3] -
                  4.02915230e-13 * tc[4] - 7.27000000e+03 * invT;
    // species 25: CH2CHO
    species[25] = +3.40906240e+00 + 5.36928700e-03 * tc[1] +
                  6.30497500e-07 * tc[2] - 1.78964578e-09 * tc[3] +
                  5.73477020e-13 * tc[4] + 6.20000000e+01 * invT;
    // species 26: CH2OCH2
    species[26] = +3.75905320e+00 - 4.72060900e-03 * tc[1] +
                  2.67699070e-05 * tc[2] - 2.52019700e-08 * tc[3] +
                  8.00798420e-12 * tc[4] - 7.56081430e+03 * invT;
    // species 27: aC3H4
    species[27] = +2.61304450e+00 + 6.06128750e-03 * tc[1] +
                  6.17996000e-06 * tc[2] - 8.63128725e-09 * tc[3] +
                  3.06701580e-12 * tc[4] + 2.15415670e+04 * invT;
    // species 28: aC3H5
    species[28] = +1.36318350e+00 + 9.90691050e-03 * tc[1] +
                  4.16568667e-06 * tc[2] - 8.33888875e-09 * tc[3] +
                  3.16931420e-12 * tc[4] + 1.92456290e+04 * invT;
    // species 29: C3H6
    species[29] = +1.49330700e+00 + 1.04625900e-02 * tc[1] +
                  1.49559800e-06 * tc[2] - 4.17228000e-09 * tc[3] +
                  1.43162920e-12 * tc[4] + 1.07482600e+03 * invT;
    // species 30: nC3H7
    species[30] = +1.04911730e+00 + 1.30044865e-02 * tc[1] +
                  7.84750533e-07 * tc[2] - 4.89878300e-09 * tc[3] +
                  1.87440414e-12 * tc[4] + 1.03123460e+04 * invT;
    // species 31: C4H81
    species[31] = +1.18113800e+00 + 1.54266900e-02 * tc[1] +
                  1.69550823e-06 * tc[2] - 6.16372200e-09 * tc[3] +
                  2.22203860e-12 * tc[4] - 1.79040040e+03 * invT;
    // species 32: N
    species[32] = +2.50000000e+00 + 0.00000000e+00 * tc[1] +
                  0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                  0.00000000e+00 * tc[4] + 5.61046370e+04 * invT;
    // species 33: NO2
    species[33] = +3.94403120e+00 - 7.92714500e-04 * tc[1] +
                  5.55260400e-06 * tc[2] - 5.11885650e-09 * tc[3] +
                  1.56701128e-12 * tc[4] + 2.89661790e+03 * invT;
    // species 36: NCO
    species[36] = +2.82693080e+00 + 4.40258440e-03 * tc[1] -
                  2.79553780e-06 * tc[2] + 1.20042410e-09 * tc[3] -
                  2.66271900e-13 * tc[4] + 1.46824770e+04 * invT;
    // species 37: CH3O2
    species[37] = +1.73533900e+00 + 1.11001700e-02 * tc[1] -
                  6.28048667e-06 * tc[2] + 2.37532850e-09 * tc[3] -
                  4.43453800e-13 * tc[4] + 7.40078900e+02 * invT;
  } else {
    // species 1: N2
    species[1] = +2.92664000e+00 + 7.43988400e-04 * tc[1] -
                 1.89492000e-07 * tc[2] + 2.52425950e-11 * tc[3] -
                 1.35067020e-15 * tc[4] - 9.22797700e+02 * invT;
    // species 2: H
    species[2] = +2.50000001e+00 - 1.15421486e-11 * tc[1] +
                 5.38539827e-15 * tc[2] - 1.18378809e-18 * tc[3] +
                 9.96394714e-23 * tc[4] + 2.54736599e+04 * invT;
    // species 3: O
    species[3] = +2.56942078e+00 - 4.29870569e-05 * tc[1] +
                 1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
                 2.45667382e-16 * tc[4] + 2.92175791e+04 * invT;
    // species 4: OH
    species[4] = +2.86472886e+00 + 5.28252240e-04 * tc[1] -
                 8.63609193e-08 * tc[2] + 7.63046685e-12 * tc[3] -
                 2.66391752e-16 * tc[4] + 3.71885774e+03 * invT;
    // species 5: HO2
    species[5] = +4.01721090e+00 + 1.11991006e-03 * tc[1] -
                 2.11219383e-07 * tc[2] + 2.85615925e-11 * tc[3] -
                 2.15817070e-15 * tc[4] + 1.11856713e+02 * invT;
    // species 6: H2
    species[6] = +3.33727920e+00 - 2.47012365e-05 * tc[1] +
                 1.66485593e-07 * tc[2] - 4.48915985e-11 * tc[3] +
                 4.00510752e-15 * tc[4] - 9.50158922e+02 * invT;
    // species 7: H2O
    species[7] = +3.03399249e+00 + 1.08845902e-03 * tc[1] -
                 5.46908393e-08 * tc[2] - 2.42604967e-11 * tc[3] +
                 3.36401984e-15 * tc[4] - 3.00042971e+04 * invT;
    // species 8: H2O2
    species[8] = +4.16500285e+00 + 2.45415847e-03 * tc[1] -
                 6.33797417e-07 * tc[2] + 9.27964965e-11 * tc[3] -
                 5.75816610e-15 * tc[4] - 1.78617877e+04 * invT;
    // species 9: O2
    species[9] = +3.28253784e+00 + 7.41543770e-04 * tc[1] -
                 2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
                 4.33435588e-15 * tc[4] - 1.08845772e+03 * invT;
    // species 10: CH3
    species[10] = +2.28571772e+00 + 3.61995018e-03 * tc[1] -
                  9.95714493e-07 * tc[2] + 1.48921161e-10 * tc[3] -
                  9.34308788e-15 * tc[4] + 1.67755843e+04 * invT;
    // species 11: CH4
    species[11] = +7.48514950e-02 + 6.69547335e-03 * tc[1] -
                  1.91095270e-06 * tc[2] + 3.05731338e-10 * tc[3] -
                  2.03630460e-14 * tc[4] - 9.46834459e+03 * invT;
    // species 12: HCO
    species[12] = +2.77217438e+00 + 2.47847763e-03 * tc[1] -
                  8.28152043e-07 * tc[2] + 1.47290445e-10 * tc[3] -
                  1.06701742e-14 * tc[4] + 4.01191815e+03 * invT;
    // species 13: CH2O
    species[13] = +1.76069008e+00 + 4.60000041e-03 * tc[1] -
                  1.47419604e-06 * tc[2] + 2.51603030e-10 * tc[3] -
                  1.76771128e-14 * tc[4] - 1.39958323e+04 * invT;
    // species 14: CH3O
    species[14] = +4.75779238e+00 + 3.72071237e-03 * tc[1] -
                  8.99017253e-07 * tc[2] + 1.09522626e-10 * tc[3] -
                  5.27074196e-15 * tc[4] + 3.78111940e+02 * invT;
    // species 15: CH3OH
    species[15] = +1.78970791e+00 + 7.04691460e-03 * tc[1] -
                  2.12166945e-06 * tc[2] + 3.45427713e-10 * tc[3] -
                  2.34120440e-14 * tc[4] - 2.53748747e+04 * invT;
    // species 16: CO
    species[16] = +2.71518561e+00 + 1.03126372e-03 * tc[1] -
                  3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
                  4.07295432e-15 * tc[4] - 1.41518724e+04 * invT;
    // species 17: CO2
    species[17] = +3.85746029e+00 + 2.20718513e-03 * tc[1] -
                  7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                  9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 18: C2H2
    species[18] = +4.14756964e+00 + 2.98083332e-03 * tc[1] -
                  7.90982840e-07 * tc[2] + 1.16853043e-10 * tc[3] -
                  7.22470426e-15 * tc[4] + 2.59359992e+04 * invT;
    // species 19: C2H3
    species[19] = +3.01672400e+00 + 5.16511460e-03 * tc[1] -
                  1.56027450e-06 * tc[2] + 2.54408220e-10 * tc[3] -
                  1.72521408e-14 * tc[4] + 3.46128739e+04 * invT;
    // species 20: C2H4
    species[20] = +2.03611116e+00 + 7.32270755e-03 * tc[1] -
                  2.23692638e-06 * tc[2] + 3.68057308e-10 * tc[3] -
                  2.51412122e-14 * tc[4] + 4.93988614e+03 * invT;
    // species 21: C2H5
    species[21] = +1.95465642e+00 + 8.69863610e-03 * tc[1] -
                  2.66068889e-06 * tc[2] + 4.38044223e-10 * tc[3] -
                  2.99283152e-14 * tc[4] + 1.28575200e+04 * invT;
    // species 22: C2H6
    species[22] = +1.07188150e+00 + 1.08426339e-02 * tc[1] -
                  3.34186890e-06 * tc[2] + 5.53530003e-10 * tc[3] -
                  3.80005780e-14 * tc[4] - 1.14263932e+04 * invT;
    // species 23: HCCO
    species[23] = +5.62820580e+00 + 2.04267005e-03 * tc[1] -
                  5.31151567e-07 * tc[2] + 7.15651300e-11 * tc[3] -
                  3.88156640e-15 * tc[4] + 1.93272150e+04 * invT;
    // species 24: CH2CO
    species[24] = +4.51129732e+00 + 4.50179872e-03 * tc[1] -
                  1.38979878e-06 * tc[2] + 2.30836470e-10 * tc[3] -
                  1.58967640e-14 * tc[4] - 7.77850000e+03 * invT;
    // species 25: CH2CHO
    species[25] = +5.97566990e+00 + 4.06529570e-03 * tc[1] -
                  9.14541500e-07 * tc[2] + 1.01757603e-10 * tc[3] -
                  4.35203420e-15 * tc[4] - 9.69500000e+02 * invT;
    // species 26: CH2OCH2
    species[26] = +5.48876410e+00 + 6.02309500e-03 * tc[1] -
                  1.44456437e-06 * tc[2] + 1.75070777e-10 * tc[3] -
                  8.38981760e-15 * tc[4] - 9.18042510e+03 * invT;
    // species 27: aC3H4
    species[27] = +6.31687220e+00 + 5.56686400e-03 * tc[1] -
                  1.32097927e-06 * tc[2] + 1.58910595e-10 * tc[3] -
                  7.57510800e-15 * tc[4] + 2.01174950e+04 * invT;
    // species 28: aC3H5
    species[28] = +6.50078770e+00 + 7.16236550e-03 * tc[1] -
                  1.89272107e-06 * tc[2] + 2.77020025e-10 * tc[3] -
                  1.80727774e-14 * tc[4] + 1.74824490e+04 * invT;
    // species 29: C3H6
    species[29] = +6.73225700e+00 + 7.45417000e-03 * tc[1] -
                  1.64996633e-06 * tc[2] + 1.80300550e-10 * tc[3] -
                  7.53240800e-15 * tc[4] - 9.23570300e+02 * invT;
    // species 30: nC3H7
    species[30] = +7.70974790e+00 + 8.01574250e-03 * tc[1] -
                  1.75734127e-06 * tc[2] + 1.89720880e-10 * tc[3] -
                  7.77254380e-15 * tc[4] + 7.97622360e+03 * invT;
    // species 31: C4H81
    species[31] = +2.05358410e+00 + 1.71752535e-02 * tc[1] -
                  5.29439900e-06 * tc[2] + 8.27241550e-10 * tc[3] -
                  5.07220900e-14 * tc[4] - 2.13972310e+03 * invT;
    // species 32: N
    species[32] = +2.41594290e+00 + 8.74453250e-05 * tc[1] -
                  3.96745633e-08 * tc[2] + 7.55656125e-12 * tc[3] -
                  4.07219640e-16 * tc[4] + 5.61337730e+04 * invT;
    // species 33: NO2
    species[33] = +4.88475420e+00 + 1.08619780e-03 * tc[1] -
                  2.76023020e-07 * tc[2] + 3.93687750e-11 * tc[3] -
                  2.10217900e-15 * tc[4] + 2.31649830e+03 * invT;
    // species 36: NCO
    species[36] = +5.15218450e+00 + 1.15258805e-03 * tc[1] -
                  2.93443843e-07 * tc[2] + 3.69727450e-11 * tc[3] -
                  1.81955992e-15 * tc[4] + 1.40041230e+04 * invT;
    // species 37: CH3O2
    species[37] = +8.00891500e+00 + 2.73462050e-03 * tc[1] -
                  4.14464000e-07 * tc[2] + 3.72953250e-11 * tc[3] -
                  1.52370660e-15 * tc[4] - 1.13786900e+03 * invT;
  }

  // species with midpoint at T=1382 kelvin
  if (T < 1382) {
    // species 34: HCNO
    species[34] = +2.64727989e+00 + 6.37526710e-03 * tc[1] -
                  3.49314120e-06 * tc[2] + 1.10358209e-09 * tc[3] -
                  1.51504293e-13 * tc[4] + 1.92990252e+04 * invT;
  } else {
    // species 34: HCNO
    species[34] = +6.59860456e+00 + 1.51389313e-03 * tc[1] -
                  3.59014487e-07 * tc[2] + 4.29166320e-11 * tc[3] -
                  2.02878782e-15 * tc[4] + 1.79661339e+04 * invT;
  }

  // species with midpoint at T=1478 kelvin
  if (T < 1478) {
    // species 35: HNCO
    species[35] = +3.63096317e+00 + 3.65141179e-03 * tc[1] -
                  7.60166677e-07 * tc[2] - 1.65317825e-10 * tc[3] +
                  7.24471504e-14 * tc[4] - 1.55873636e+04 * invT;
  } else {
    // species 35: HNCO
    species[35] = +6.22395134e+00 + 1.58932002e-03 * tc[1] -
                  3.64595850e-07 * tc[2] + 4.26837908e-11 * tc[3] -
                  1.99004391e-15 * tc[4] - 1.66599344e+04 * invT;
  }
}

// compute the h/(RT) at the given temperature (Eq 20)
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEnthalpy_qss(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: C
    species[0] = +2.55423955e+00 - 1.60768862e-04 * tc[1] +
                 2.44597415e-07 * tc[2] - 1.83058722e-10 * tc[3] +
                 5.33042892e-14 * tc[4] + 8.54438832e+04 * invT;
    // species 1: CH
    species[1] = +3.48981665e+00 + 1.61917771e-04 * tc[1] -
                 5.62996883e-07 * tc[2] + 7.90543317e-10 * tc[3] -
                 2.81218134e-13 * tc[4] + 7.07972934e+04 * invT;
    // species 2: CH2
    species[2] = +3.76267867e+00 + 4.84436072e-04 * tc[1] +
                 9.31632803e-07 * tc[2] - 9.62727883e-10 * tc[3] +
                 3.37483438e-13 * tc[4] + 4.60040401e+04 * invT;
    // species 3: CH2*
    species[3] = +4.19860411e+00 - 1.18330710e-03 * tc[1] +
                 2.74432073e-06 * tc[2] - 1.67203995e-09 * tc[3] +
                 3.88629474e-13 * tc[4] + 5.04968163e+04 * invT;
    // species 4: H2CC
    species[4] = +3.28154830e+00 + 3.48823955e-03 * tc[1] -
                 7.95174800e-07 * tc[2] - 3.02610800e-10 * tc[3] +
                 1.96379090e-13 * tc[4] + 4.86217940e+04 * invT;
    // species 5: NO
    species[5] = +4.21847630e+00 - 2.31948800e-03 * tc[1] +
                 3.68034067e-06 * tc[2] - 2.33403385e-09 * tc[3] +
                 5.60715400e-13 * tc[4] + 9.84462300e+03 * invT;
  } else {
    // species 0: C
    species[0] = +2.49266888e+00 + 2.39944642e-05 * tc[1] -
                 2.41445007e-08 * tc[2] + 9.35727573e-12 * tc[3] -
                 9.74555786e-16 * tc[4] + 8.54512953e+04 * invT;
    // species 1: CH
    species[1] = +2.87846473e+00 + 4.85456840e-04 * tc[1] +
                 4.81485517e-08 * tc[2] - 3.26719623e-11 * tc[3] +
                 3.52158766e-15 * tc[4] + 7.10124364e+04 * invT;
    // species 2: CH2
    species[2] = +2.87410113e+00 + 1.82819646e-03 * tc[1] -
                 4.69648657e-07 * tc[2] + 6.50448872e-11 * tc[3] -
                 3.75455134e-15 * tc[4] + 4.62636040e+04 * invT;
    // species 3: CH2*
    species[3] = +2.29203842e+00 + 2.32794318e-03 * tc[1] -
                 6.70639823e-07 * tc[2] + 1.04476500e-10 * tc[3] -
                 6.79432730e-15 * tc[4] + 5.09259997e+04 * invT;
    // species 4: H2CC
    species[4] = +4.27803400e+00 + 2.37814020e-03 * tc[1] -
                 5.43366967e-07 * tc[2] + 6.36570150e-11 * tc[3] -
                 2.97727580e-15 * tc[4] + 4.83166880e+04 * invT;
    // species 5: NO
    species[5] = +3.26060560e+00 + 5.95552150e-04 * tc[1] -
                 1.43056827e-07 * tc[2] + 1.73644173e-11 * tc[3] -
                 8.06721980e-16 * tc[4] + 9.92097460e+03 * invT;
  }
}

// compute the S/R at the given temperature (Eq 21)
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEntropy(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with no change at a midpoint T
  // species 0: AR
  species[0] = +2.50000000e+00 * tc[0] + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4] + 4.36600000e+00;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 1: N2
    species[1] = +3.29867700e+00 * tc[0] + 1.40824040e-03 * tc[1] -
                 1.98161100e-06 * tc[2] + 1.88050500e-09 * tc[3] -
                 6.11213500e-13 * tc[4] + 3.95037200e+00;
    // species 2: H
    species[2] = +2.50000000e+00 * tc[0] + 7.05332819e-13 * tc[1] -
                 9.97959820e-16 * tc[2] + 7.66938773e-19 * tc[3] -
                 2.31933083e-22 * tc[4] - 4.46682853e-01;
    // species 3: O
    species[3] = +3.16826710e+00 * tc[0] - 3.27931884e-03 * tc[1] +
                 3.32153198e-06 * tc[2] - 2.04268875e-09 * tc[3] +
                 5.28164927e-13 * tc[4] + 2.05193346e+00;
    // species 4: OH
    species[4] = +4.12530561e+00 * tc[0] - 3.22544939e-03 * tc[1] +
                 3.26382346e-06 * tc[2] - 1.93284548e-09 * tc[3] +
                 5.15593447e-13 * tc[4] - 6.90432960e-01;
    // species 5: HO2
    species[5] = +4.30179801e+00 * tc[0] - 4.74912051e-03 * tc[1] +
                 1.05791445e-05 * tc[2] - 8.09212980e-09 * tc[3] +
                 2.32306281e-12 * tc[4] + 3.71666245e+00;
    // species 6: H2
    species[6] = +2.34433112e+00 * tc[0] + 7.98052075e-03 * tc[1] -
                 9.73907550e-06 * tc[2] + 6.71906980e-09 * tc[3] -
                 1.84402940e-12 * tc[4] + 6.83010238e-01;
    // species 7: H2O
    species[7] = +4.19864056e+00 * tc[0] - 2.03643410e-03 * tc[1] +
                 3.26020105e-06 * tc[2] - 1.82932354e-09 * tc[3] +
                 4.42994543e-13 * tc[4] - 8.49032208e-01;
    // species 8: H2O2
    species[8] = +4.27611269e+00 * tc[0] - 5.42822417e-04 * tc[1] +
                 8.36678505e-06 * tc[2] - 7.19236043e-09 * tc[3] +
                 2.15613591e-12 * tc[4] + 3.43505074e+00;
    // species 9: O2
    species[9] = +3.78245636e+00 * tc[0] - 2.99673416e-03 * tc[1] +
                 4.92365101e-06 * tc[2] - 3.22709836e-09 * tc[3] +
                 8.10932092e-13 * tc[4] + 3.65767573e+00;
    // species 10: CH3
    species[10] = +3.67359040e+00 * tc[0] + 2.01095175e-03 * tc[1] +
                  2.86510928e-06 * tc[2] - 2.29039142e-09 * tc[3] +
                  6.35964335e-13 * tc[4] + 1.60456433e+00;
    // species 11: CH4
    species[11] = +5.14987613e+00 * tc[0] - 1.36709788e-02 * tc[1] +
                  2.45900299e-05 * tc[2] - 1.61581009e-08 * tc[3] +
                  4.16734890e-12 * tc[4] - 4.64130376e+00;
    // species 12: HCO
    species[12] = +4.22118584e+00 * tc[0] - 3.24392532e-03 * tc[1] +
                  6.88997230e-06 * tc[2] - 4.43813643e-09 * tc[3] +
                  1.08442216e-12 * tc[4] + 3.39437243e+00;
    // species 13: CH2O
    species[13] = +4.79372315e+00 * tc[0] - 9.90833369e-03 * tc[1] +
                  1.86610004e-05 * tc[2] - 1.26428420e-08 * tc[3] +
                  3.29431630e-12 * tc[4] + 6.02812900e-01;
    // species 14: CH3O
    species[14] = +3.71180502e+00 * tc[0] - 2.80463306e-03 * tc[1] +
                  1.88275486e-05 * tc[2] - 1.57690696e-08 * tc[3] +
                  4.66471050e-12 * tc[4] + 6.57240864e+00;
    // species 15: CH3OH
    species[15] = +5.71539582e+00 * tc[0] - 1.52309129e-02 * tc[1] +
                  3.26220578e-05 * tc[2] - 2.36935630e-08 * tc[3] +
                  6.53381745e-12 * tc[4] - 1.50409823e+00;
    // species 16: CO
    species[16] = +3.57953347e+00 * tc[0] - 6.10353680e-04 * tc[1] +
                  5.08407165e-07 * tc[2] + 3.02335295e-10 * tc[3] -
                  2.26106125e-13 * tc[4] + 3.50840928e+00;
    // species 17: CO2
    species[17] = +2.35677352e+00 * tc[0] + 8.98459677e-03 * tc[1] -
                  3.56178134e-06 * tc[2] + 8.19730073e-10 * tc[3] -
                  3.59248870e-14 * tc[4] + 9.90105222e+00;
    // species 18: C2H2
    species[18] = +8.08681094e-01 * tc[0] + 2.33615629e-02 * tc[1] -
                  1.77585907e-05 * tc[2] + 9.33841457e-09 * tc[3] -
                  2.12518243e-12 * tc[4] + 1.39397051e+01;
    // species 19: C2H3
    species[19] = +3.21246645e+00 * tc[0] + 1.51479162e-03 * tc[1] +
                  1.29604706e-05 * tc[2] - 1.19219282e-08 * tc[3] +
                  3.67877182e-12 * tc[4] + 8.51054025e+00;
    // species 20: C2H4
    species[20] = +3.95920148e+00 * tc[0] - 7.57052247e-03 * tc[1] +
                  2.85495146e-05 * tc[2] - 2.30529584e-08 * tc[3] +
                  6.74710933e-12 * tc[4] + 4.09733096e+00;
    // species 21: C2H5
    species[21] = +4.30646568e+00 * tc[0] - 4.18658892e-03 * tc[1] +
                  2.48571403e-05 * tc[2] - 1.99708869e-08 * tc[3] +
                  5.76272510e-12 * tc[4] + 4.70720924e+00;
    // species 22: C2H6
    species[22] = +4.29142492e+00 * tc[0] - 5.50154270e-03 * tc[1] +
                  2.99719144e-05 * tc[2] - 2.36155428e-08 * tc[3] +
                  6.71714427e-12 * tc[4] + 2.66682316e+00;
    // species 23: HCCO
    species[23] = +2.25172140e+00 * tc[0] + 1.76550210e-02 * tc[1] -
                  1.18645505e-05 * tc[2] + 5.75858633e-09 * tc[3] -
                  1.26662028e-12 * tc[4] + 1.24904170e+01;
    // species 24: CH2CO
    species[24] = +2.13583630e+00 * tc[0] + 1.81188721e-02 * tc[1] -
                  8.69737370e-06 * tc[2] + 3.11465856e-09 * tc[3] -
                  5.03644037e-13 * tc[4] + 1.22156480e+01;
    // species 25: CH2CHO
    species[25] = +3.40906240e+00 * tc[0] + 1.07385740e-02 * tc[1] +
                  9.45746250e-07 * tc[2] - 2.38619437e-09 * tc[3] +
                  7.16846275e-13 * tc[4] + 9.57145350e+00;
    // species 26: CH2OCH2
    species[26] = +3.75905320e+00 * tc[0] - 9.44121800e-03 * tc[1] +
                  4.01548605e-05 * tc[2] - 3.36026267e-08 * tc[3] +
                  1.00099802e-11 * tc[4] + 7.84974750e+00;
    // species 27: aC3H4
    species[27] = +2.61304450e+00 * tc[0] + 1.21225750e-02 * tc[1] +
                  9.26994000e-06 * tc[2] - 1.15083830e-08 * tc[3] +
                  3.83376975e-12 * tc[4] + 1.02261390e+01;
    // species 28: aC3H5
    species[28] = +1.36318350e+00 * tc[0] + 1.98138210e-02 * tc[1] +
                  6.24853000e-06 * tc[2] - 1.11185183e-08 * tc[3] +
                  3.96164275e-12 * tc[4] + 1.71732140e+01;
    // species 29: C3H6
    species[29] = +1.49330700e+00 * tc[0] + 2.09251800e-02 * tc[1] +
                  2.24339700e-06 * tc[2] - 5.56304000e-09 * tc[3] +
                  1.78953650e-12 * tc[4] + 1.61453400e+01;
    // species 30: nC3H7
    species[30] = +1.04911730e+00 * tc[0] + 2.60089730e-02 * tc[1] +
                  1.17712580e-06 * tc[2] - 6.53171067e-09 * tc[3] +
                  2.34300518e-12 * tc[4] + 2.11360340e+01;
    // species 31: C4H81
    species[31] = +1.18113800e+00 * tc[0] + 3.08533800e-02 * tc[1] +
                  2.54326235e-06 * tc[2] - 8.21829600e-09 * tc[3] +
                  2.77754825e-12 * tc[4] + 2.10624690e+01;
    // species 32: N
    species[32] = +2.50000000e+00 * tc[0] + 0.00000000e+00 * tc[1] +
                  0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                  0.00000000e+00 * tc[4] + 4.19390870e+00;
    // species 33: NO2
    species[33] = +3.94403120e+00 * tc[0] - 1.58542900e-03 * tc[1] +
                  8.32890600e-06 * tc[2] - 6.82514200e-09 * tc[3] +
                  1.95876410e-12 * tc[4] + 6.31199170e+00;
    // species 36: NCO
    species[36] = +2.82693080e+00 * tc[0] + 8.80516880e-03 * tc[1] -
                  4.19330670e-06 * tc[2] + 1.60056547e-09 * tc[3] -
                  3.32839875e-13 * tc[4] + 9.55046460e+00;
    // species 37: CH3O2
    species[37] = +1.73533900e+00 * tc[0] + 2.22003400e-02 * tc[1] -
                  9.42073000e-06 * tc[2] + 3.16710467e-09 * tc[3] -
                  5.54317250e-13 * tc[4] + 1.59652600e+01;
  } else {
    // species 1: N2
    species[1] = +2.92664000e+00 * tc[0] + 1.48797680e-03 * tc[1] -
                 2.84238000e-07 * tc[2] + 3.36567933e-11 * tc[3] -
                 1.68833775e-15 * tc[4] + 5.98052800e+00;
    // species 2: H
    species[2] = +2.50000001e+00 * tc[0] - 2.30842973e-11 * tc[1] +
                 8.07809740e-15 * tc[2] - 1.57838412e-18 * tc[3] +
                 1.24549339e-22 * tc[4] - 4.46682914e-01;
    // species 3: O
    species[3] = +2.56942078e+00 * tc[0] - 8.59741137e-05 * tc[1] +
                 2.09742295e-08 * tc[2] - 3.33925997e-12 * tc[3] +
                 3.07084227e-16 * tc[4] + 4.78433864e+00;
    // species 4: OH
    species[4] = +2.86472886e+00 * tc[0] + 1.05650448e-03 * tc[1] -
                 1.29541379e-07 * tc[2] + 1.01739558e-11 * tc[3] -
                 3.32989690e-16 * tc[4] + 5.70164073e+00;
    // species 5: HO2
    species[5] = +4.01721090e+00 * tc[0] + 2.23982013e-03 * tc[1] -
                 3.16829075e-07 * tc[2] + 3.80821233e-11 * tc[3] -
                 2.69771337e-15 * tc[4] + 3.78510215e+00;
    // species 6: H2
    species[6] = +3.33727920e+00 * tc[0] - 4.94024731e-05 * tc[1] +
                 2.49728389e-07 * tc[2] - 5.98554647e-11 * tc[3] +
                 5.00638440e-15 * tc[4] - 3.20502331e+00;
    // species 7: H2O
    species[7] = +3.03399249e+00 * tc[0] + 2.17691804e-03 * tc[1] -
                 8.20362590e-08 * tc[2] - 3.23473290e-11 * tc[3] +
                 4.20502480e-15 * tc[4] + 4.96677010e+00;
    // species 8: H2O2
    species[8] = +4.16500285e+00 * tc[0] + 4.90831694e-03 * tc[1] -
                 9.50696125e-07 * tc[2] + 1.23728662e-10 * tc[3] -
                 7.19770763e-15 * tc[4] + 2.91615662e+00;
    // species 9: O2
    species[9] = +3.28253784e+00 * tc[0] + 1.48308754e-03 * tc[1] -
                 3.78983334e-07 * tc[2] + 6.98235183e-11 * tc[3] -
                 5.41794485e-15 * tc[4] + 5.45323129e+00;
    // species 10: CH3
    species[10] = +2.28571772e+00 * tc[0] + 7.23990037e-03 * tc[1] -
                  1.49357174e-06 * tc[2] + 1.98561548e-10 * tc[3] -
                  1.16788599e-14 * tc[4] + 8.48007179e+00;
    // species 11: CH4
    species[11] = +7.48514950e-02 * tc[0] + 1.33909467e-02 * tc[1] -
                  2.86642905e-06 * tc[2] + 4.07641783e-10 * tc[3] -
                  2.54538075e-14 * tc[4] + 1.84373180e+01;
    // species 12: HCO
    species[12] = +2.77217438e+00 * tc[0] + 4.95695526e-03 * tc[1] -
                  1.24222806e-06 * tc[2] + 1.96387259e-10 * tc[3] -
                  1.33377178e-14 * tc[4] + 9.79834492e+00;
    // species 13: CH2O
    species[13] = +1.76069008e+00 * tc[0] + 9.20000082e-03 * tc[1] -
                  2.21129406e-06 * tc[2] + 3.35470707e-10 * tc[3] -
                  2.20963910e-14 * tc[4] + 1.36563230e+01;
    // species 14: CH3O
    species[14] = +4.75779238e+00 * tc[0] + 7.44142474e-03 * tc[1] -
                  1.34852588e-06 * tc[2] + 1.46030168e-10 * tc[3] -
                  6.58842745e-15 * tc[4] - 1.96680028e+00;
    // species 15: CH3OH
    species[15] = +1.78970791e+00 * tc[0] + 1.40938292e-02 * tc[1] -
                  3.18250418e-06 * tc[2] + 4.60570283e-10 * tc[3] -
                  2.92650550e-14 * tc[4] + 1.45023623e+01;
    // species 16: CO
    species[16] = +2.71518561e+00 * tc[0] + 2.06252743e-03 * tc[1] -
                  4.99412886e-07 * tc[2] + 7.66843360e-11 * tc[3] -
                  5.09119290e-15 * tc[4] + 7.81868772e+00;
    // species 17: CO2
    species[17] = +3.85746029e+00 * tc[0] + 4.41437026e-03 * tc[1] -
                  1.10740702e-06 * tc[2] + 1.74496729e-10 * tc[3] -
                  1.18021041e-14 * tc[4] + 2.27163806e+00;
    // species 18: C2H2
    species[18] = +4.14756964e+00 * tc[0] + 5.96166664e-03 * tc[1] -
                  1.18647426e-06 * tc[2] + 1.55804057e-10 * tc[3] -
                  9.03088033e-15 * tc[4] - 1.23028121e+00;
    // species 19: C2H3
    species[19] = +3.01672400e+00 * tc[0] + 1.03302292e-02 * tc[1] -
                  2.34041174e-06 * tc[2] + 3.39210960e-10 * tc[3] -
                  2.15651760e-14 * tc[4] + 7.78732378e+00;
    // species 20: C2H4
    species[20] = +2.03611116e+00 * tc[0] + 1.46454151e-02 * tc[1] -
                  3.35538958e-06 * tc[2] + 4.90743077e-10 * tc[3] -
                  3.14265152e-14 * tc[4] + 1.03053693e+01;
    // species 21: C2H5
    species[21] = +1.95465642e+00 * tc[0] + 1.73972722e-02 * tc[1] -
                  3.99103334e-06 * tc[2] + 5.84058963e-10 * tc[3] -
                  3.74103940e-14 * tc[4] + 1.34624343e+01;
    // species 22: C2H6
    species[22] = +1.07188150e+00 * tc[0] + 2.16852677e-02 * tc[1] -
                  5.01280335e-06 * tc[2] + 7.38040003e-10 * tc[3] -
                  4.75007225e-14 * tc[4] + 1.51156107e+01;
    // species 23: HCCO
    species[23] = +5.62820580e+00 * tc[0] + 4.08534010e-03 * tc[1] -
                  7.96727350e-07 * tc[2] + 9.54201733e-11 * tc[3] -
                  4.85195800e-15 * tc[4] - 3.93025950e+00;
    // species 24: CH2CO
    species[24] = +4.51129732e+00 * tc[0] + 9.00359745e-03 * tc[1] -
                  2.08469817e-06 * tc[2] + 3.07781961e-10 * tc[3] -
                  1.98709550e-14 * tc[4] + 6.32247205e-01;
    // species 25: CH2CHO
    species[25] = +5.97566990e+00 * tc[0] + 8.13059140e-03 * tc[1] -
                  1.37181225e-06 * tc[2] + 1.35676803e-10 * tc[3] -
                  5.44004275e-15 * tc[4] - 5.03208790e+00;
    // species 26: CH2OCH2
    species[26] = +5.48876410e+00 * tc[0] + 1.20461900e-02 * tc[1] -
                  2.16684655e-06 * tc[2] + 2.33427703e-10 * tc[3] -
                  1.04872720e-14 * tc[4] - 7.07996050e+00;
    // species 27: aC3H4
    species[27] = +6.31687220e+00 * tc[0] + 1.11337280e-02 * tc[1] -
                  1.98146890e-06 * tc[2] + 2.11880793e-10 * tc[3] -
                  9.46888500e-15 * tc[4] - 1.09957660e+01;
    // species 28: aC3H5
    species[28] = +6.50078770e+00 * tc[0] + 1.43247310e-02 * tc[1] -
                  2.83908160e-06 * tc[2] + 3.69360033e-10 * tc[3] -
                  2.25909717e-14 * tc[4] - 1.12430500e+01;
    // species 29: C3H6
    species[29] = +6.73225700e+00 * tc[0] + 1.49083400e-02 * tc[1] -
                  2.47494950e-06 * tc[2] + 2.40400733e-10 * tc[3] -
                  9.41551000e-15 * tc[4] - 1.33133500e+01;
    // species 30: nC3H7
    species[30] = +7.70974790e+00 * tc[0] + 1.60314850e-02 * tc[1] -
                  2.63601190e-06 * tc[2] + 2.52961173e-10 * tc[3] -
                  9.71567975e-15 * tc[4] - 1.55152970e+01;
    // species 31: C4H81
    species[31] = +2.05358410e+00 * tc[0] + 3.43505070e-02 * tc[1] -
                  7.94159850e-06 * tc[2] + 1.10298873e-09 * tc[3] -
                  6.34026125e-14 * tc[4] + 1.55432010e+01;
    // species 32: N
    species[32] = +2.41594290e+00 * tc[0] + 1.74890650e-04 * tc[1] -
                  5.95118450e-08 * tc[2] + 1.00754150e-11 * tc[3] -
                  5.09024550e-16 * tc[4] + 4.64960960e+00;
    // species 33: NO2
    species[33] = +4.88475420e+00 * tc[0] + 2.17239560e-03 * tc[1] -
                  4.14034530e-07 * tc[2] + 5.24917000e-11 * tc[3] -
                  2.62772375e-15 * tc[4] - 1.17416950e-01;
    // species 36: NCO
    species[36] = +5.15218450e+00 * tc[0] + 2.30517610e-03 * tc[1] -
                  4.40165765e-07 * tc[2] + 4.92969933e-11 * tc[3] -
                  2.27444990e-15 * tc[4] - 2.54426600e+00;
    // species 37: CH3O2
    species[37] = +8.00891500e+00 * tc[0] + 5.46924100e-03 * tc[1] -
                  6.21696000e-07 * tc[2] + 4.97271000e-11 * tc[3] -
                  1.90463325e-15 * tc[4] - 1.68740400e+01;
  }

  // species with midpoint at T=1382 kelvin
  if (T < 1382) {
    // species 34: HCNO
    species[34] = +2.64727989e+00 * tc[0] + 1.27505342e-02 * tc[1] -
                  5.23971180e-06 * tc[2] + 1.47144279e-09 * tc[3] -
                  1.89380367e-13 * tc[4] + 1.07332972e+01;
  } else {
    // species 34: HCNO
    species[34] = +6.59860456e+00 * tc[0] + 3.02778626e-03 * tc[1] -
                  5.38521730e-07 * tc[2] + 5.72221760e-11 * tc[3] -
                  2.53598478e-15 * tc[4] - 1.03306599e+01;
  }

  // species with midpoint at T=1478 kelvin
  if (T < 1478) {
    // species 35: HNCO
    species[35] = +3.63096317e+00 * tc[0] + 7.30282357e-03 * tc[1] -
                  1.14025001e-06 * tc[2] - 2.20423766e-10 * tc[3] +
                  9.05589380e-14 * tc[4] + 6.19457727e+00;
  } else {
    // species 35: HNCO
    species[35] = +6.22395134e+00 * tc[0] + 3.17864004e-03 * tc[1] -
                  5.46893775e-07 * tc[2] + 5.69117210e-11 * tc[3] -
                  2.48755489e-15 * tc[4] - 8.38224741e+00;
  }
}

// Returns the mean specific heat at CP (Eq. 33)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cpbl)
{
  int id; // loop counter
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real cpor[38];                               //  temporary storage
  cp_R(cpor, tc);

  // perform dot product
  for (id = 0; id < 38; ++id) {
    result += x[id] * cpor[id];
  }

  cpbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CP (Eq. 34)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cpbs)
{
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real cpor[38], tresult[38];                  //  temporary storage
  amrex::Real imw[38];

  get_imw(imw);

  cp_R(cpor, tc);

  for (int i = 0; i < 38; i++) {
    tresult[i] = cpor[i] * y[i] * imw[i];
  }
  for (const auto& tr : tresult) {
    result += tr;
  }

  cpbs = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 35)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cvbl)
{
  int id; // loop counter
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real cvor[38];                               //  temporary storage
  cv_R(cvor, tc);

  // perform dot product
  for (id = 0; id < 38; ++id) {
    result += x[id] * cvor[id];
  }

  cvbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 36)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cvbs)
{
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real cvor[38];                               //  temporary storage
  amrex::Real imw[38];

  get_imw(imw);

  cv_R(cvor, tc);

  // multiply by y/molecularweight
  result += cvor[0] * y[0] * imw[0];    // AR
  result += cvor[1] * y[1] * imw[1];    // N2
  result += cvor[2] * y[2] * imw[2];    // H
  result += cvor[3] * y[3] * imw[3];    // O
  result += cvor[4] * y[4] * imw[4];    // OH
  result += cvor[5] * y[5] * imw[5];    // HO2
  result += cvor[6] * y[6] * imw[6];    // H2
  result += cvor[7] * y[7] * imw[7];    // H2O
  result += cvor[8] * y[8] * imw[8];    // H2O2
  result += cvor[9] * y[9] * imw[9];    // O2
  result += cvor[10] * y[10] * imw[10]; // CH3
  result += cvor[11] * y[11] * imw[11]; // CH4
  result += cvor[12] * y[12] * imw[12]; // HCO
  result += cvor[13] * y[13] * imw[13]; // CH2O
  result += cvor[14] * y[14] * imw[14]; // CH3O
  result += cvor[15] * y[15] * imw[15]; // CH3OH
  result += cvor[16] * y[16] * imw[16]; // CO
  result += cvor[17] * y[17] * imw[17]; // CO2
  result += cvor[18] * y[18] * imw[18]; // C2H2
  result += cvor[19] * y[19] * imw[19]; // C2H3
  result += cvor[20] * y[20] * imw[20]; // C2H4
  result += cvor[21] * y[21] * imw[21]; // C2H5
  result += cvor[22] * y[22] * imw[22]; // C2H6
  result += cvor[23] * y[23] * imw[23]; // HCCO
  result += cvor[24] * y[24] * imw[24]; // CH2CO
  result += cvor[25] * y[25] * imw[25]; // CH2CHO
  result += cvor[26] * y[26] * imw[26]; // CH2OCH2
  result += cvor[27] * y[27] * imw[27]; // aC3H4
  result += cvor[28] * y[28] * imw[28]; // aC3H5
  result += cvor[29] * y[29] * imw[29]; // C3H6
  result += cvor[30] * y[30] * imw[30]; // nC3H7
  result += cvor[31] * y[31] * imw[31]; // C4H81
  result += cvor[32] * y[32] * imw[32]; // N
  result += cvor[33] * y[33] * imw[33]; // NO2
  result += cvor[34] * y[34] * imw[34]; // HCNO
  result += cvor[35] * y[35] * imw[35]; // HNCO
  result += cvor[36] * y[36] * imw[36]; // NCO
  result += cvor[37] * y[37] * imw[37]; // CH3O2

  cvbs = result * 8.31446261815324e+07;
}

// Returns the mean enthalpy of the mixture in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBML(const amrex::Real T, const amrex::Real x[], amrex::Real& hbml)
{
  int id; // loop counter
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real hml[38];                                //  temporary storage
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesEnthalpy(hml, tc);

  // perform dot product
  for (id = 0; id < 38; ++id) {
    result += x[id] * hml[id];
  }

  hbml = result * RT;
}

// Returns mean enthalpy of mixture in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& hbms)
{
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real hml[38], tmp[38];                       //  temporary storage
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  amrex::Real imw[38];

  get_imw(imw);

  speciesEnthalpy(hml, tc);

  int id;
  for (id = 0; id < 38; ++id) {
    tmp[id] = y[id] * hml[id] * imw[id];
  }
  for (id = 0; id < 38; ++id) {
    result += tmp[id];
  }

  hbms = result * RT;
}

// get mean internal energy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBML(const amrex::Real T, const amrex::Real x[], amrex::Real& ubml)
{
  int id; // loop counter
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real uml[38];                                //  temporary energy array
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesInternalEnergy(uml, tc);

  // perform dot product
  for (id = 0; id < 38; ++id) {
    result += x[id] * uml[id];
  }

  ubml = result * RT;
}

// get mean internal energy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& ubms)
{
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real ums[38];                                //  temporary energy array
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  amrex::Real imw[38];

  get_imw(imw);

  speciesInternalEnergy(ums, tc);

  // perform dot product + scaling by wt
  result += y[0] * ums[0] * imw[0];    // AR
  result += y[1] * ums[1] * imw[1];    // N2
  result += y[2] * ums[2] * imw[2];    // H
  result += y[3] * ums[3] * imw[3];    // O
  result += y[4] * ums[4] * imw[4];    // OH
  result += y[5] * ums[5] * imw[5];    // HO2
  result += y[6] * ums[6] * imw[6];    // H2
  result += y[7] * ums[7] * imw[7];    // H2O
  result += y[8] * ums[8] * imw[8];    // H2O2
  result += y[9] * ums[9] * imw[9];    // O2
  result += y[10] * ums[10] * imw[10]; // CH3
  result += y[11] * ums[11] * imw[11]; // CH4
  result += y[12] * ums[12] * imw[12]; // HCO
  result += y[13] * ums[13] * imw[13]; // CH2O
  result += y[14] * ums[14] * imw[14]; // CH3O
  result += y[15] * ums[15] * imw[15]; // CH3OH
  result += y[16] * ums[16] * imw[16]; // CO
  result += y[17] * ums[17] * imw[17]; // CO2
  result += y[18] * ums[18] * imw[18]; // C2H2
  result += y[19] * ums[19] * imw[19]; // C2H3
  result += y[20] * ums[20] * imw[20]; // C2H4
  result += y[21] * ums[21] * imw[21]; // C2H5
  result += y[22] * ums[22] * imw[22]; // C2H6
  result += y[23] * ums[23] * imw[23]; // HCCO
  result += y[24] * ums[24] * imw[24]; // CH2CO
  result += y[25] * ums[25] * imw[25]; // CH2CHO
  result += y[26] * ums[26] * imw[26]; // CH2OCH2
  result += y[27] * ums[27] * imw[27]; // aC3H4
  result += y[28] * ums[28] * imw[28]; // aC3H5
  result += y[29] * ums[29] * imw[29]; // C3H6
  result += y[30] * ums[30] * imw[30]; // nC3H7
  result += y[31] * ums[31] * imw[31]; // C4H81
  result += y[32] * ums[32] * imw[32]; // N
  result += y[33] * ums[33] * imw[33]; // NO2
  result += y[34] * ums[34] * imw[34]; // HCNO
  result += y[35] * ums[35] * imw[35]; // HNCO
  result += y[36] * ums[36] * imw[36]; // NCO
  result += y[37] * ums[37] * imw[37]; // CH3O2

  ubms = result * RT;
}

// get mixture entropy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBML(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& sbml)
{
  int id; // loop counter
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real sor[38]; //  temporary storage
  speciesEntropy(sor, tc);

  // Compute Eq 42
  for (id = 0; id < 38; ++id) {
    result += x[id] * (sor[id] - log((x[id] + 1e-100)) - logPratio);
  }

  sbml = result * 8.31446261815324e+07;
}

// get mixture entropy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBMS(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& sbms)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real sor[38]; //  temporary storage
  amrex::Real x[38];   //  need a ytx conversion
  amrex::Real YOW = 0; // See Eq 4, 6 in CK Manual
  amrex::Real imw[38];

  get_imw(imw);

  // Compute inverse of mean molecular wt first
  YOW += y[0] * imw[0];   // AR
  YOW += y[1] * imw[1];   // N2
  YOW += y[2] * imw[2];   // H
  YOW += y[3] * imw[3];   // O
  YOW += y[4] * imw[4];   // OH
  YOW += y[5] * imw[5];   // HO2
  YOW += y[6] * imw[6];   // H2
  YOW += y[7] * imw[7];   // H2O
  YOW += y[8] * imw[8];   // H2O2
  YOW += y[9] * imw[9];   // O2
  YOW += y[10] * imw[10]; // CH3
  YOW += y[11] * imw[11]; // CH4
  YOW += y[12] * imw[12]; // HCO
  YOW += y[13] * imw[13]; // CH2O
  YOW += y[14] * imw[14]; // CH3O
  YOW += y[15] * imw[15]; // CH3OH
  YOW += y[16] * imw[16]; // CO
  YOW += y[17] * imw[17]; // CO2
  YOW += y[18] * imw[18]; // C2H2
  YOW += y[19] * imw[19]; // C2H3
  YOW += y[20] * imw[20]; // C2H4
  YOW += y[21] * imw[21]; // C2H5
  YOW += y[22] * imw[22]; // C2H6
  YOW += y[23] * imw[23]; // HCCO
  YOW += y[24] * imw[24]; // CH2CO
  YOW += y[25] * imw[25]; // CH2CHO
  YOW += y[26] * imw[26]; // CH2OCH2
  YOW += y[27] * imw[27]; // aC3H4
  YOW += y[28] * imw[28]; // aC3H5
  YOW += y[29] * imw[29]; // C3H6
  YOW += y[30] * imw[30]; // nC3H7
  YOW += y[31] * imw[31]; // C4H81
  YOW += y[32] * imw[32]; // N
  YOW += y[33] * imw[33]; // NO2
  YOW += y[34] * imw[34]; // HCNO
  YOW += y[35] * imw[35]; // HNCO
  YOW += y[36] * imw[36]; // NCO
  YOW += y[37] * imw[37]; // CH3O2
  // Now compute y to x conversion
  x[0] = y[0] / (39.950000 * YOW);
  x[1] = y[1] / (28.014000 * YOW);
  x[2] = y[2] / (1.008000 * YOW);
  x[3] = y[3] / (15.999000 * YOW);
  x[4] = y[4] / (17.007000 * YOW);
  x[5] = y[5] / (33.006000 * YOW);
  x[6] = y[6] / (2.016000 * YOW);
  x[7] = y[7] / (18.015000 * YOW);
  x[8] = y[8] / (34.014000 * YOW);
  x[9] = y[9] / (31.998000 * YOW);
  x[10] = y[10] / (15.035000 * YOW);
  x[11] = y[11] / (16.043000 * YOW);
  x[12] = y[12] / (29.018000 * YOW);
  x[13] = y[13] / (30.026000 * YOW);
  x[14] = y[14] / (31.034000 * YOW);
  x[15] = y[15] / (32.042000 * YOW);
  x[16] = y[16] / (28.010000 * YOW);
  x[17] = y[17] / (44.009000 * YOW);
  x[18] = y[18] / (26.038000 * YOW);
  x[19] = y[19] / (27.046000 * YOW);
  x[20] = y[20] / (28.054000 * YOW);
  x[21] = y[21] / (29.062000 * YOW);
  x[22] = y[22] / (30.070000 * YOW);
  x[23] = y[23] / (41.029000 * YOW);
  x[24] = y[24] / (42.037000 * YOW);
  x[25] = y[25] / (43.045000 * YOW);
  x[26] = y[26] / (44.053000 * YOW);
  x[27] = y[27] / (40.065000 * YOW);
  x[28] = y[28] / (41.073000 * YOW);
  x[29] = y[29] / (42.081000 * YOW);
  x[30] = y[30] / (43.089000 * YOW);
  x[31] = y[31] / (56.108000 * YOW);
  x[32] = y[32] / (14.007000 * YOW);
  x[33] = y[33] / (46.005000 * YOW);
  x[34] = y[34] / (43.025000 * YOW);
  x[35] = y[35] / (43.025000 * YOW);
  x[36] = y[36] / (42.017000 * YOW);
  x[37] = y[37] / (47.033000 * YOW);
  speciesEntropy(sor, tc);
  // Perform computation in Eq 42 and 43
  result += x[0] * (sor[0] - log((x[0] + 1e-100)) - logPratio);
  result += x[1] * (sor[1] - log((x[1] + 1e-100)) - logPratio);
  result += x[2] * (sor[2] - log((x[2] + 1e-100)) - logPratio);
  result += x[3] * (sor[3] - log((x[3] + 1e-100)) - logPratio);
  result += x[4] * (sor[4] - log((x[4] + 1e-100)) - logPratio);
  result += x[5] * (sor[5] - log((x[5] + 1e-100)) - logPratio);
  result += x[6] * (sor[6] - log((x[6] + 1e-100)) - logPratio);
  result += x[7] * (sor[7] - log((x[7] + 1e-100)) - logPratio);
  result += x[8] * (sor[8] - log((x[8] + 1e-100)) - logPratio);
  result += x[9] * (sor[9] - log((x[9] + 1e-100)) - logPratio);
  result += x[10] * (sor[10] - log((x[10] + 1e-100)) - logPratio);
  result += x[11] * (sor[11] - log((x[11] + 1e-100)) - logPratio);
  result += x[12] * (sor[12] - log((x[12] + 1e-100)) - logPratio);
  result += x[13] * (sor[13] - log((x[13] + 1e-100)) - logPratio);
  result += x[14] * (sor[14] - log((x[14] + 1e-100)) - logPratio);
  result += x[15] * (sor[15] - log((x[15] + 1e-100)) - logPratio);
  result += x[16] * (sor[16] - log((x[16] + 1e-100)) - logPratio);
  result += x[17] * (sor[17] - log((x[17] + 1e-100)) - logPratio);
  result += x[18] * (sor[18] - log((x[18] + 1e-100)) - logPratio);
  result += x[19] * (sor[19] - log((x[19] + 1e-100)) - logPratio);
  result += x[20] * (sor[20] - log((x[20] + 1e-100)) - logPratio);
  result += x[21] * (sor[21] - log((x[21] + 1e-100)) - logPratio);
  result += x[22] * (sor[22] - log((x[22] + 1e-100)) - logPratio);
  result += x[23] * (sor[23] - log((x[23] + 1e-100)) - logPratio);
  result += x[24] * (sor[24] - log((x[24] + 1e-100)) - logPratio);
  result += x[25] * (sor[25] - log((x[25] + 1e-100)) - logPratio);
  result += x[26] * (sor[26] - log((x[26] + 1e-100)) - logPratio);
  result += x[27] * (sor[27] - log((x[27] + 1e-100)) - logPratio);
  result += x[28] * (sor[28] - log((x[28] + 1e-100)) - logPratio);
  result += x[29] * (sor[29] - log((x[29] + 1e-100)) - logPratio);
  result += x[30] * (sor[30] - log((x[30] + 1e-100)) - logPratio);
  result += x[31] * (sor[31] - log((x[31] + 1e-100)) - logPratio);
  result += x[32] * (sor[32] - log((x[32] + 1e-100)) - logPratio);
  result += x[33] * (sor[33] - log((x[33] + 1e-100)) - logPratio);
  result += x[34] * (sor[34] - log((x[34] + 1e-100)) - logPratio);
  result += x[35] * (sor[35] - log((x[35] + 1e-100)) - logPratio);
  result += x[36] * (sor[36] - log((x[36] + 1e-100)) - logPratio);
  result += x[37] * (sor[37] - log((x[37] + 1e-100)) - logPratio);
  // Scale by R/W
  sbms = result * 8.31446261815324e+07 * YOW;
}

//  get temperature given internal energy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_EY(
  const amrex::Real e, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real e1, emin, emax, cv, t1, dt;
  int i; //  loop counter
  CKUBMS(tmin, y, emin);
  CKUBMS(tmax, y, emax);
  if (e < emin) {
    // Linear Extrapolation below tmin
    CKCVBS(tmin, y, cv);
    t = tmin - (emin - e) / cv;
    ierr = 1;
    return;
  }
  if (e > emax) {
    // Linear Extrapolation above tmax
    CKCVBS(tmax, y, cv);
    t = tmax - (emax - e) / cv;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (emax - emin) * (e - emin);
  }
  for (i = 0; i < maxiter; ++i) {
    CKUBMS(t1, y, e1);
    CKCVBS(t1, y, cv);
    dt = (e - e1) / cv;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

//  get temperature given enthalpy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_HY(
  const amrex::Real h, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real h1, hmin, hmax, cp, t1, dt;
  int i; //  loop counter
  CKHBMS(tmin, y, hmin);
  CKHBMS(tmax, y, hmax);
  if (h < hmin) {
    // Linear Extrapolation below tmin
    CKCPBS(tmin, y, cp);
    t = tmin - (hmin - h) / cp;
    ierr = 1;
    return;
  }
  if (h > hmax) {
    // Linear Extrapolation above tmax
    CKCPBS(tmax, y, cp);
    t = tmax - (hmax - h) / cp;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (hmax - hmin) * (h - hmin);
  }
  for (i = 0; i < maxiter; ++i) {
    CKHBMS(t1, y, h1);
    CKCPBS(t1, y, cp);
    dt = (h - h1) / cp;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

// Compute P = rhoRT/W(x)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPX(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& P)
{
  amrex::Real XW = 0;                      //  To hold mean molecular wt
  XW += x[0] * 39.950000;                  // AR
  XW += x[1] * 28.014000;                  // N2
  XW += x[2] * 1.008000;                   // H
  XW += x[3] * 15.999000;                  // O
  XW += x[4] * 17.007000;                  // OH
  XW += x[5] * 33.006000;                  // HO2
  XW += x[6] * 2.016000;                   // H2
  XW += x[7] * 18.015000;                  // H2O
  XW += x[8] * 34.014000;                  // H2O2
  XW += x[9] * 31.998000;                  // O2
  XW += x[10] * 15.035000;                 // CH3
  XW += x[11] * 16.043000;                 // CH4
  XW += x[12] * 29.018000;                 // HCO
  XW += x[13] * 30.026000;                 // CH2O
  XW += x[14] * 31.034000;                 // CH3O
  XW += x[15] * 32.042000;                 // CH3OH
  XW += x[16] * 28.010000;                 // CO
  XW += x[17] * 44.009000;                 // CO2
  XW += x[18] * 26.038000;                 // C2H2
  XW += x[19] * 27.046000;                 // C2H3
  XW += x[20] * 28.054000;                 // C2H4
  XW += x[21] * 29.062000;                 // C2H5
  XW += x[22] * 30.070000;                 // C2H6
  XW += x[23] * 41.029000;                 // HCCO
  XW += x[24] * 42.037000;                 // CH2CO
  XW += x[25] * 43.045000;                 // CH2CHO
  XW += x[26] * 44.053000;                 // CH2OCH2
  XW += x[27] * 40.065000;                 // aC3H4
  XW += x[28] * 41.073000;                 // aC3H5
  XW += x[29] * 42.081000;                 // C3H6
  XW += x[30] * 43.089000;                 // nC3H7
  XW += x[31] * 56.108000;                 // C4H81
  XW += x[32] * 14.007000;                 // N
  XW += x[33] * 46.005000;                 // NO2
  XW += x[34] * 43.025000;                 // HCNO
  XW += x[35] * 43.025000;                 // HNCO
  XW += x[36] * 42.017000;                 // NCO
  XW += x[37] * 47.033000;                 // CH3O2
  P = rho * 8.31446261815324e+07 * T / XW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(y)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPY(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& P)
{
  amrex::Real YOW = 0; //  for computing mean MW
  amrex::Real imw[38];

  get_imw(imw);

  YOW += y[0] * imw[0];                     // AR
  YOW += y[1] * imw[1];                     // N2
  YOW += y[2] * imw[2];                     // H
  YOW += y[3] * imw[3];                     // O
  YOW += y[4] * imw[4];                     // OH
  YOW += y[5] * imw[5];                     // HO2
  YOW += y[6] * imw[6];                     // H2
  YOW += y[7] * imw[7];                     // H2O
  YOW += y[8] * imw[8];                     // H2O2
  YOW += y[9] * imw[9];                     // O2
  YOW += y[10] * imw[10];                   // CH3
  YOW += y[11] * imw[11];                   // CH4
  YOW += y[12] * imw[12];                   // HCO
  YOW += y[13] * imw[13];                   // CH2O
  YOW += y[14] * imw[14];                   // CH3O
  YOW += y[15] * imw[15];                   // CH3OH
  YOW += y[16] * imw[16];                   // CO
  YOW += y[17] * imw[17];                   // CO2
  YOW += y[18] * imw[18];                   // C2H2
  YOW += y[19] * imw[19];                   // C2H3
  YOW += y[20] * imw[20];                   // C2H4
  YOW += y[21] * imw[21];                   // C2H5
  YOW += y[22] * imw[22];                   // C2H6
  YOW += y[23] * imw[23];                   // HCCO
  YOW += y[24] * imw[24];                   // CH2CO
  YOW += y[25] * imw[25];                   // CH2CHO
  YOW += y[26] * imw[26];                   // CH2OCH2
  YOW += y[27] * imw[27];                   // aC3H4
  YOW += y[28] * imw[28];                   // aC3H5
  YOW += y[29] * imw[29];                   // C3H6
  YOW += y[30] * imw[30];                   // nC3H7
  YOW += y[31] * imw[31];                   // C4H81
  YOW += y[32] * imw[32];                   // N
  YOW += y[33] * imw[33];                   // NO2
  YOW += y[34] * imw[34];                   // HCNO
  YOW += y[35] * imw[35];                   // HNCO
  YOW += y[36] * imw[36];                   // NCO
  YOW += y[37] * imw[37];                   // CH3O2
  P = rho * 8.31446261815324e+07 * T * YOW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(c)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPC(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& P)
{
  int id; // loop counter
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 39.950000;  // AR
  W += c[1] * 28.014000;  // N2
  W += c[2] * 1.008000;   // H
  W += c[3] * 15.999000;  // O
  W += c[4] * 17.007000;  // OH
  W += c[5] * 33.006000;  // HO2
  W += c[6] * 2.016000;   // H2
  W += c[7] * 18.015000;  // H2O
  W += c[8] * 34.014000;  // H2O2
  W += c[9] * 31.998000;  // O2
  W += c[10] * 15.035000; // CH3
  W += c[11] * 16.043000; // CH4
  W += c[12] * 29.018000; // HCO
  W += c[13] * 30.026000; // CH2O
  W += c[14] * 31.034000; // CH3O
  W += c[15] * 32.042000; // CH3OH
  W += c[16] * 28.010000; // CO
  W += c[17] * 44.009000; // CO2
  W += c[18] * 26.038000; // C2H2
  W += c[19] * 27.046000; // C2H3
  W += c[20] * 28.054000; // C2H4
  W += c[21] * 29.062000; // C2H5
  W += c[22] * 30.070000; // C2H6
  W += c[23] * 41.029000; // HCCO
  W += c[24] * 42.037000; // CH2CO
  W += c[25] * 43.045000; // CH2CHO
  W += c[26] * 44.053000; // CH2OCH2
  W += c[27] * 40.065000; // aC3H4
  W += c[28] * 41.073000; // aC3H5
  W += c[29] * 42.081000; // C3H6
  W += c[30] * 43.089000; // nC3H7
  W += c[31] * 56.108000; // C4H81
  W += c[32] * 14.007000; // N
  W += c[33] * 46.005000; // NO2
  W += c[34] * 43.025000; // HCNO
  W += c[35] * 43.025000; // HNCO
  W += c[36] * 42.017000; // NCO
  W += c[37] * 47.033000; // CH3O2

  for (id = 0; id < 38; ++id) {
    sumC += c[id];
  }
  P = rho * 8.31446261815324e+07 * T * sumC / W; // P = rho*R*T/W
}

// Compute rho = PW(x)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOX(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& rho)
{
  amrex::Real XW = 0;                        //  To hold mean molecular wt
  XW += x[0] * 39.950000;                    // AR
  XW += x[1] * 28.014000;                    // N2
  XW += x[2] * 1.008000;                     // H
  XW += x[3] * 15.999000;                    // O
  XW += x[4] * 17.007000;                    // OH
  XW += x[5] * 33.006000;                    // HO2
  XW += x[6] * 2.016000;                     // H2
  XW += x[7] * 18.015000;                    // H2O
  XW += x[8] * 34.014000;                    // H2O2
  XW += x[9] * 31.998000;                    // O2
  XW += x[10] * 15.035000;                   // CH3
  XW += x[11] * 16.043000;                   // CH4
  XW += x[12] * 29.018000;                   // HCO
  XW += x[13] * 30.026000;                   // CH2O
  XW += x[14] * 31.034000;                   // CH3O
  XW += x[15] * 32.042000;                   // CH3OH
  XW += x[16] * 28.010000;                   // CO
  XW += x[17] * 44.009000;                   // CO2
  XW += x[18] * 26.038000;                   // C2H2
  XW += x[19] * 27.046000;                   // C2H3
  XW += x[20] * 28.054000;                   // C2H4
  XW += x[21] * 29.062000;                   // C2H5
  XW += x[22] * 30.070000;                   // C2H6
  XW += x[23] * 41.029000;                   // HCCO
  XW += x[24] * 42.037000;                   // CH2CO
  XW += x[25] * 43.045000;                   // CH2CHO
  XW += x[26] * 44.053000;                   // CH2OCH2
  XW += x[27] * 40.065000;                   // aC3H4
  XW += x[28] * 41.073000;                   // aC3H5
  XW += x[29] * 42.081000;                   // C3H6
  XW += x[30] * 43.089000;                   // nC3H7
  XW += x[31] * 56.108000;                   // C4H81
  XW += x[32] * 14.007000;                   // N
  XW += x[33] * 46.005000;                   // NO2
  XW += x[34] * 43.025000;                   // HCNO
  XW += x[35] * 43.025000;                   // HNCO
  XW += x[36] * 42.017000;                   // NCO
  XW += x[37] * 47.033000;                   // CH3O2
  rho = P * XW / (8.31446261815324e+07 * T); // rho = P*W/(R*T)
}

// Compute rho = P*W(y)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOY(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& rho)
{
  amrex::Real YOW = 0;
  amrex::Real tmp[38];
  amrex::Real imw[38];

  get_imw(imw);

  for (int i = 0; i < 38; i++) {
    tmp[i] = y[i] * imw[i];
  }
  for (const auto& tp : tmp) {
    YOW += tp;
  }

  rho = P / (8.31446261815324e+07 * T * YOW); // rho = P*W/(R*T)
}

// Compute rho = P*W(c)/(R*T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOC(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& rho)
{
  int id; // loop counter
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 39.950000;  // AR
  W += c[1] * 28.014000;  // N2
  W += c[2] * 1.008000;   // H
  W += c[3] * 15.999000;  // O
  W += c[4] * 17.007000;  // OH
  W += c[5] * 33.006000;  // HO2
  W += c[6] * 2.016000;   // H2
  W += c[7] * 18.015000;  // H2O
  W += c[8] * 34.014000;  // H2O2
  W += c[9] * 31.998000;  // O2
  W += c[10] * 15.035000; // CH3
  W += c[11] * 16.043000; // CH4
  W += c[12] * 29.018000; // HCO
  W += c[13] * 30.026000; // CH2O
  W += c[14] * 31.034000; // CH3O
  W += c[15] * 32.042000; // CH3OH
  W += c[16] * 28.010000; // CO
  W += c[17] * 44.009000; // CO2
  W += c[18] * 26.038000; // C2H2
  W += c[19] * 27.046000; // C2H3
  W += c[20] * 28.054000; // C2H4
  W += c[21] * 29.062000; // C2H5
  W += c[22] * 30.070000; // C2H6
  W += c[23] * 41.029000; // HCCO
  W += c[24] * 42.037000; // CH2CO
  W += c[25] * 43.045000; // CH2CHO
  W += c[26] * 44.053000; // CH2OCH2
  W += c[27] * 40.065000; // aC3H4
  W += c[28] * 41.073000; // aC3H5
  W += c[29] * 42.081000; // C3H6
  W += c[30] * 43.089000; // nC3H7
  W += c[31] * 56.108000; // C4H81
  W += c[32] * 14.007000; // N
  W += c[33] * 46.005000; // NO2
  W += c[34] * 43.025000; // HCNO
  W += c[35] * 43.025000; // HNCO
  W += c[36] * 42.017000; // NCO
  W += c[37] * 47.033000; // CH3O2

  for (id = 0; id < 38; ++id) {
    sumC += c[id];
  }
  rho = P * W / (sumC * T * 8.31446261815324e+07); // rho = PW/(R*T)
}

// get molecular weight for all species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWT(amrex::Real wt[])
{
  get_mw(wt);
}

// given y[species]: mass fractions
// s mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWY(const amrex::Real y[], amrex::Real& wtm)
{
  amrex::Real YOW = 0;
  amrex::Real tmp[38];
  amrex::Real imw[38];

  get_imw(imw);

  for (int i = 0; i < 38; i++) {
    tmp[i] = y[i] * imw[i];
  }
  for (const auto& tp : tmp) {
    YOW += tp;
  }

  wtm = 1.0 / YOW;
}

// given x[species]: mole fractions
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWX(const amrex::Real x[], amrex::Real& wtm)
{
  amrex::Real XW = 0;      //  see Eq 4 in CK Manual
  XW += x[0] * 39.950000;  // AR
  XW += x[1] * 28.014000;  // N2
  XW += x[2] * 1.008000;   // H
  XW += x[3] * 15.999000;  // O
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 33.006000;  // HO2
  XW += x[6] * 2.016000;   // H2
  XW += x[7] * 18.015000;  // H2O
  XW += x[8] * 34.014000;  // H2O2
  XW += x[9] * 31.998000;  // O2
  XW += x[10] * 15.035000; // CH3
  XW += x[11] * 16.043000; // CH4
  XW += x[12] * 29.018000; // HCO
  XW += x[13] * 30.026000; // CH2O
  XW += x[14] * 31.034000; // CH3O
  XW += x[15] * 32.042000; // CH3OH
  XW += x[16] * 28.010000; // CO
  XW += x[17] * 44.009000; // CO2
  XW += x[18] * 26.038000; // C2H2
  XW += x[19] * 27.046000; // C2H3
  XW += x[20] * 28.054000; // C2H4
  XW += x[21] * 29.062000; // C2H5
  XW += x[22] * 30.070000; // C2H6
  XW += x[23] * 41.029000; // HCCO
  XW += x[24] * 42.037000; // CH2CO
  XW += x[25] * 43.045000; // CH2CHO
  XW += x[26] * 44.053000; // CH2OCH2
  XW += x[27] * 40.065000; // aC3H4
  XW += x[28] * 41.073000; // aC3H5
  XW += x[29] * 42.081000; // C3H6
  XW += x[30] * 43.089000; // nC3H7
  XW += x[31] * 56.108000; // C4H81
  XW += x[32] * 14.007000; // N
  XW += x[33] * 46.005000; // NO2
  XW += x[34] * 43.025000; // HCNO
  XW += x[35] * 43.025000; // HNCO
  XW += x[36] * 42.017000; // NCO
  XW += x[37] * 47.033000; // CH3O2
  wtm = XW;
}

// given c[species]: molar concentration
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWC(const amrex::Real c[], amrex::Real& wtm)
{
  int id; // loop counter
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 39.950000;  // AR
  W += c[1] * 28.014000;  // N2
  W += c[2] * 1.008000;   // H
  W += c[3] * 15.999000;  // O
  W += c[4] * 17.007000;  // OH
  W += c[5] * 33.006000;  // HO2
  W += c[6] * 2.016000;   // H2
  W += c[7] * 18.015000;  // H2O
  W += c[8] * 34.014000;  // H2O2
  W += c[9] * 31.998000;  // O2
  W += c[10] * 15.035000; // CH3
  W += c[11] * 16.043000; // CH4
  W += c[12] * 29.018000; // HCO
  W += c[13] * 30.026000; // CH2O
  W += c[14] * 31.034000; // CH3O
  W += c[15] * 32.042000; // CH3OH
  W += c[16] * 28.010000; // CO
  W += c[17] * 44.009000; // CO2
  W += c[18] * 26.038000; // C2H2
  W += c[19] * 27.046000; // C2H3
  W += c[20] * 28.054000; // C2H4
  W += c[21] * 29.062000; // C2H5
  W += c[22] * 30.070000; // C2H6
  W += c[23] * 41.029000; // HCCO
  W += c[24] * 42.037000; // CH2CO
  W += c[25] * 43.045000; // CH2CHO
  W += c[26] * 44.053000; // CH2OCH2
  W += c[27] * 40.065000; // aC3H4
  W += c[28] * 41.073000; // aC3H5
  W += c[29] * 42.081000; // C3H6
  W += c[30] * 43.089000; // nC3H7
  W += c[31] * 56.108000; // C4H81
  W += c[32] * 14.007000; // N
  W += c[33] * 46.005000; // NO2
  W += c[34] * 43.025000; // HCNO
  W += c[35] * 43.025000; // HNCO
  W += c[36] * 42.017000; // NCO
  W += c[37] * 47.033000; // CH3O2

  for (id = 0; id < 38; ++id) {
    sumC += c[id];
  }
  //  CK provides no guard against divison by zero
  wtm = W / sumC;
}

// get Cp/R as a function of T
// for all species (Eq 19)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPOR(const amrex::Real T, amrex::Real cpor[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cp_R(cpor, tc);
}

// get H/RT as a function of T
// for all species (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHORT(const amrex::Real T, amrex::Real hort[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEnthalpy(hort, tc);
}

// get S/R as a function of T
// for all species (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSOR(const amrex::Real T, amrex::Real sor[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEntropy(sor, tc);
}

// convert y[species] (mass fracs) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTX(const amrex::Real y[], amrex::Real x[])
{
  amrex::Real YOW = 0;
  amrex::Real tmp[38];
  amrex::Real imw[38];

  get_imw(imw);

  for (int i = 0; i < 38; i++) {
    tmp[i] = y[i] * imw[i];
  }
  for (const auto& tp : tmp) {
    YOW += tp;
  }

  amrex::Real YOWINV = 1.0 / YOW;

  for (int i = 0; i < 38; i++) {
    x[i] = y[i] * imw[i] * YOWINV;
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real c[])
{
  amrex::Real YOW = 0;
  amrex::Real PWORT;
  amrex::Real imw[38];

  get_imw(imw);

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 38; i++) {
    c[i] = y[i] * imw[i];
  }
  for (int i = 0; i < 38; i++) {
    YOW += c[i];
  }

  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // Now compute conversion

  for (int i = 0; i < 38; i++) {
    c[i] = PWORT * y[i] * imw[i];
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCR(
  const amrex::Real rho,
  amrex::Real /*T*/,
  const amrex::Real y[],
  amrex::Real c[])
{
  amrex::Real imw[38];

  get_imw(imw);

  for (int i = 0; i < 38; i++) {
    c[i] = rho * y[i] * imw[i];
  }
}

// convert x[species] (mole fracs) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTY(const amrex::Real x[], amrex::Real y[])
{
  amrex::Real XW = 0; // See Eq 4, 9 in CK Manual
  // Compute mean molecular wt first
  XW += x[0] * 39.950000;  // AR
  XW += x[1] * 28.014000;  // N2
  XW += x[2] * 1.008000;   // H
  XW += x[3] * 15.999000;  // O
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 33.006000;  // HO2
  XW += x[6] * 2.016000;   // H2
  XW += x[7] * 18.015000;  // H2O
  XW += x[8] * 34.014000;  // H2O2
  XW += x[9] * 31.998000;  // O2
  XW += x[10] * 15.035000; // CH3
  XW += x[11] * 16.043000; // CH4
  XW += x[12] * 29.018000; // HCO
  XW += x[13] * 30.026000; // CH2O
  XW += x[14] * 31.034000; // CH3O
  XW += x[15] * 32.042000; // CH3OH
  XW += x[16] * 28.010000; // CO
  XW += x[17] * 44.009000; // CO2
  XW += x[18] * 26.038000; // C2H2
  XW += x[19] * 27.046000; // C2H3
  XW += x[20] * 28.054000; // C2H4
  XW += x[21] * 29.062000; // C2H5
  XW += x[22] * 30.070000; // C2H6
  XW += x[23] * 41.029000; // HCCO
  XW += x[24] * 42.037000; // CH2CO
  XW += x[25] * 43.045000; // CH2CHO
  XW += x[26] * 44.053000; // CH2OCH2
  XW += x[27] * 40.065000; // aC3H4
  XW += x[28] * 41.073000; // aC3H5
  XW += x[29] * 42.081000; // C3H6
  XW += x[30] * 43.089000; // nC3H7
  XW += x[31] * 56.108000; // C4H81
  XW += x[32] * 14.007000; // N
  XW += x[33] * 46.005000; // NO2
  XW += x[34] * 43.025000; // HCNO
  XW += x[35] * 43.025000; // HNCO
  XW += x[36] * 42.017000; // NCO
  XW += x[37] * 47.033000; // CH3O2
  // Now compute conversion
  amrex::Real XWinv = 1.0 / XW;
  y[0] = x[0] * 39.950000 * XWinv;
  y[1] = x[1] * 28.014000 * XWinv;
  y[2] = x[2] * 1.008000 * XWinv;
  y[3] = x[3] * 15.999000 * XWinv;
  y[4] = x[4] * 17.007000 * XWinv;
  y[5] = x[5] * 33.006000 * XWinv;
  y[6] = x[6] * 2.016000 * XWinv;
  y[7] = x[7] * 18.015000 * XWinv;
  y[8] = x[8] * 34.014000 * XWinv;
  y[9] = x[9] * 31.998000 * XWinv;
  y[10] = x[10] * 15.035000 * XWinv;
  y[11] = x[11] * 16.043000 * XWinv;
  y[12] = x[12] * 29.018000 * XWinv;
  y[13] = x[13] * 30.026000 * XWinv;
  y[14] = x[14] * 31.034000 * XWinv;
  y[15] = x[15] * 32.042000 * XWinv;
  y[16] = x[16] * 28.010000 * XWinv;
  y[17] = x[17] * 44.009000 * XWinv;
  y[18] = x[18] * 26.038000 * XWinv;
  y[19] = x[19] * 27.046000 * XWinv;
  y[20] = x[20] * 28.054000 * XWinv;
  y[21] = x[21] * 29.062000 * XWinv;
  y[22] = x[22] * 30.070000 * XWinv;
  y[23] = x[23] * 41.029000 * XWinv;
  y[24] = x[24] * 42.037000 * XWinv;
  y[25] = x[25] * 43.045000 * XWinv;
  y[26] = x[26] * 44.053000 * XWinv;
  y[27] = x[27] * 40.065000 * XWinv;
  y[28] = x[28] * 41.073000 * XWinv;
  y[29] = x[29] * 42.081000 * XWinv;
  y[30] = x[30] * 43.089000 * XWinv;
  y[31] = x[31] * 56.108000 * XWinv;
  y[32] = x[32] * 14.007000 * XWinv;
  y[33] = x[33] * 46.005000 * XWinv;
  y[34] = x[34] * 43.025000 * XWinv;
  y[35] = x[35] * 43.025000 * XWinv;
  y[36] = x[36] * 42.017000 * XWinv;
  y[37] = x[37] * 47.033000 * XWinv;
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real c[])
{
  int id;                                            // loop counter
  amrex::Real PORT = P / (8.31446261815324e+07 * T); // P/RT

  // Compute conversion, see Eq 10
  for (id = 0; id < 38; ++id) {
    c[id] = x[id] * PORT;
  }
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCR(
  const amrex::Real rho,
  const amrex::Real /*T*/,
  const amrex::Real x[],
  amrex::Real c[])
{
  int id;             // loop counter
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 39.950000;  // AR
  XW += x[1] * 28.014000;  // N2
  XW += x[2] * 1.008000;   // H
  XW += x[3] * 15.999000;  // O
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 33.006000;  // HO2
  XW += x[6] * 2.016000;   // H2
  XW += x[7] * 18.015000;  // H2O
  XW += x[8] * 34.014000;  // H2O2
  XW += x[9] * 31.998000;  // O2
  XW += x[10] * 15.035000; // CH3
  XW += x[11] * 16.043000; // CH4
  XW += x[12] * 29.018000; // HCO
  XW += x[13] * 30.026000; // CH2O
  XW += x[14] * 31.034000; // CH3O
  XW += x[15] * 32.042000; // CH3OH
  XW += x[16] * 28.010000; // CO
  XW += x[17] * 44.009000; // CO2
  XW += x[18] * 26.038000; // C2H2
  XW += x[19] * 27.046000; // C2H3
  XW += x[20] * 28.054000; // C2H4
  XW += x[21] * 29.062000; // C2H5
  XW += x[22] * 30.070000; // C2H6
  XW += x[23] * 41.029000; // HCCO
  XW += x[24] * 42.037000; // CH2CO
  XW += x[25] * 43.045000; // CH2CHO
  XW += x[26] * 44.053000; // CH2OCH2
  XW += x[27] * 40.065000; // aC3H4
  XW += x[28] * 41.073000; // aC3H5
  XW += x[29] * 42.081000; // C3H6
  XW += x[30] * 43.089000; // nC3H7
  XW += x[31] * 56.108000; // C4H81
  XW += x[32] * 14.007000; // N
  XW += x[33] * 46.005000; // NO2
  XW += x[34] * 43.025000; // HCNO
  XW += x[35] * 43.025000; // HNCO
  XW += x[36] * 42.017000; // NCO
  XW += x[37] * 47.033000; // CH3O2
  ROW = rho / XW;

  // Compute conversion, see Eq 11
  for (id = 0; id < 38; ++id) {
    c[id] = x[id] * ROW;
  }
}

// convert c[species] (molar conc) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTX(const amrex::Real c[], amrex::Real x[])
{
  int id; // loop counter
  amrex::Real sumC = 0;

  // compute sum of c
  for (id = 0; id < 38; ++id) {
    sumC += c[id];
  }

  //  See Eq 13
  amrex::Real sumCinv = 1.0 / sumC;
  for (id = 0; id < 38; ++id) {
    x[id] = c[id] * sumCinv;
  }
}

// convert c[species] (molar conc) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTY(const amrex::Real c[], amrex::Real y[])
{
  amrex::Real CW = 0; // See Eq 12 in CK Manual
  // compute denominator in eq 12 first
  CW += c[0] * 39.950000;  // AR
  CW += c[1] * 28.014000;  // N2
  CW += c[2] * 1.008000;   // H
  CW += c[3] * 15.999000;  // O
  CW += c[4] * 17.007000;  // OH
  CW += c[5] * 33.006000;  // HO2
  CW += c[6] * 2.016000;   // H2
  CW += c[7] * 18.015000;  // H2O
  CW += c[8] * 34.014000;  // H2O2
  CW += c[9] * 31.998000;  // O2
  CW += c[10] * 15.035000; // CH3
  CW += c[11] * 16.043000; // CH4
  CW += c[12] * 29.018000; // HCO
  CW += c[13] * 30.026000; // CH2O
  CW += c[14] * 31.034000; // CH3O
  CW += c[15] * 32.042000; // CH3OH
  CW += c[16] * 28.010000; // CO
  CW += c[17] * 44.009000; // CO2
  CW += c[18] * 26.038000; // C2H2
  CW += c[19] * 27.046000; // C2H3
  CW += c[20] * 28.054000; // C2H4
  CW += c[21] * 29.062000; // C2H5
  CW += c[22] * 30.070000; // C2H6
  CW += c[23] * 41.029000; // HCCO
  CW += c[24] * 42.037000; // CH2CO
  CW += c[25] * 43.045000; // CH2CHO
  CW += c[26] * 44.053000; // CH2OCH2
  CW += c[27] * 40.065000; // aC3H4
  CW += c[28] * 41.073000; // aC3H5
  CW += c[29] * 42.081000; // C3H6
  CW += c[30] * 43.089000; // nC3H7
  CW += c[31] * 56.108000; // C4H81
  CW += c[32] * 14.007000; // N
  CW += c[33] * 46.005000; // NO2
  CW += c[34] * 43.025000; // HCNO
  CW += c[35] * 43.025000; // HNCO
  CW += c[36] * 42.017000; // NCO
  CW += c[37] * 47.033000; // CH3O2
  // Now compute conversion
  amrex::Real CWinv = 1.0 / CW;
  y[0] = c[0] * 39.950000 * CWinv;
  y[1] = c[1] * 28.014000 * CWinv;
  y[2] = c[2] * 1.008000 * CWinv;
  y[3] = c[3] * 15.999000 * CWinv;
  y[4] = c[4] * 17.007000 * CWinv;
  y[5] = c[5] * 33.006000 * CWinv;
  y[6] = c[6] * 2.016000 * CWinv;
  y[7] = c[7] * 18.015000 * CWinv;
  y[8] = c[8] * 34.014000 * CWinv;
  y[9] = c[9] * 31.998000 * CWinv;
  y[10] = c[10] * 15.035000 * CWinv;
  y[11] = c[11] * 16.043000 * CWinv;
  y[12] = c[12] * 29.018000 * CWinv;
  y[13] = c[13] * 30.026000 * CWinv;
  y[14] = c[14] * 31.034000 * CWinv;
  y[15] = c[15] * 32.042000 * CWinv;
  y[16] = c[16] * 28.010000 * CWinv;
  y[17] = c[17] * 44.009000 * CWinv;
  y[18] = c[18] * 26.038000 * CWinv;
  y[19] = c[19] * 27.046000 * CWinv;
  y[20] = c[20] * 28.054000 * CWinv;
  y[21] = c[21] * 29.062000 * CWinv;
  y[22] = c[22] * 30.070000 * CWinv;
  y[23] = c[23] * 41.029000 * CWinv;
  y[24] = c[24] * 42.037000 * CWinv;
  y[25] = c[25] * 43.045000 * CWinv;
  y[26] = c[26] * 44.053000 * CWinv;
  y[27] = c[27] * 40.065000 * CWinv;
  y[28] = c[28] * 41.073000 * CWinv;
  y[29] = c[29] * 42.081000 * CWinv;
  y[30] = c[30] * 43.089000 * CWinv;
  y[31] = c[31] * 56.108000 * CWinv;
  y[32] = c[32] * 14.007000 * CWinv;
  y[33] = c[33] * 46.005000 * CWinv;
  y[34] = c[34] * 43.025000 * CWinv;
  y[35] = c[35] * 43.025000 * CWinv;
  y[36] = c[36] * 42.017000 * CWinv;
  y[37] = c[37] * 47.033000 * CWinv;
}

// get specific heat at constant volume as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVML(const amrex::Real T, amrex::Real cvml[])
{
  int id;             // loop counter
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cv_R(cvml, tc);

  // convert to chemkin units
  for (id = 0; id < 38; ++id) {
    cvml[id] *= 8.31446261815324e+07;
  }
}

// get specific heat at constant pressure as a
// function of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPML(const amrex::Real T, amrex::Real cpml[])
{
  int id;             // loop counter
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cp_R(cpml, tc);

  // convert to chemkin units
  for (id = 0; id < 38; ++id) {
    cpml[id] *= 8.31446261815324e+07;
  }
}

// get internal energy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUML(const amrex::Real T, amrex::Real uml[])
{
  int id;             // loop counter
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesInternalEnergy(uml, tc);

  // convert to chemkin units
  for (id = 0; id < 38; ++id) {
    uml[id] *= RT;
  }
}

// get enthalpy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHML(const amrex::Real T, amrex::Real hml[])
{
  int id;             // loop counter
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesEnthalpy(hml, tc);

  // convert to chemkin units
  for (id = 0; id < 38; ++id) {
    hml[id] *= RT;
  }
}

// Returns the standard-state entropies in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSML(const amrex::Real T, amrex::Real sml[])
{
  int id;             // loop counter
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEntropy(sml, tc);

  // convert to chemkin units
  for (id = 0; id < 38; ++id) {
    sml[id] *= 8.31446261815324e+07;
  }
}

// Returns the specific heats at constant volume
// in mass units (Eq. 29)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVMS(const amrex::Real T, amrex::Real cvms[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cv_R(cvms, tc);
  // multiply by R/molecularweight
  cvms[0] *= 2.081217176008320e+06;  // AR
  cvms[1] *= 2.967966951578939e+06;  // N2
  cvms[2] *= 8.248474819596468e+07;  // H
  cvms[3] *= 5.196863940342046e+06;  // O
  cvms[4] *= 4.888847308845322e+06;  // OH
  cvms[5] *= 2.519076112874398e+06;  // HO2
  cvms[6] *= 4.124237409798234e+07;  // H2
  cvms[7] *= 4.615299815794193e+06;  // H2O
  cvms[8] *= 2.444423654422661e+06;  // H2O2
  cvms[9] *= 2.598431970171023e+06;  // O2
  cvms[10] *= 5.530071578419182e+06; // CH3
  cvms[11] *= 5.182610869633635e+06; // CH4
  cvms[12] *= 2.865277627042952e+06; // HCO
  cvms[13] *= 2.769087663409458e+06; // CH2O
  cvms[14] *= 2.679146297013998e+06; // CH3O
  cvms[15] *= 2.594863809423020e+06; // CH3OH
  cvms[16] *= 2.968390795484913e+06; // CO
  cvms[17] *= 1.889264154639560e+06; // CO2
  cvms[18] *= 3.193203248388218e+06; // C2H2
  cvms[19] *= 3.074193085170909e+06; // C2H3
  cvms[20] *= 2.963735160103101e+06; // C2H4
  cvms[21] *= 2.860939583701480e+06; // C2H5
  cvms[22] *= 2.765035789209591e+06; // C2H6
  cvms[23] *= 2.026484344769124e+06; // HCCO
  cvms[24] *= 1.977891528451897e+06; // CH2CO
  cvms[25] *= 1.931574542491170e+06; // CH2CHO
  cvms[26] *= 1.887377163451579e+06; // CH2OCH2
  cvms[27] *= 2.075243384039246e+06; // aC3H4
  cvms[28] *= 2.024313446340233e+06; // aC3H5
  cvms[29] *= 1.975823440068734e+06; // C3H6
  cvms[30] *= 1.929602130045543e+06; // nC3H7
  cvms[31] *= 1.481867580051551e+06; // C4H81
  cvms[32] *= 5.935933903157878e+06; // N
  cvms[33] *= 1.807295428356318e+06; // NO2
  cvms[34] *= 1.932472427229109e+06; // HCNO
  cvms[35] *= 1.932472427229109e+06; // HNCO
  cvms[36] *= 1.978833000488669e+06; // NCO
  cvms[37] *= 1.767793382976472e+06; // CH3O2
}

// Returns the specific heats at constant pressure
// in mass units (Eq. 26)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPMS(const amrex::Real T, amrex::Real cpms[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cp_R(cpms, tc);
  // multiply by R/molecularweight
  cpms[0] *= 2.081217176008320e+06;  // AR
  cpms[1] *= 2.967966951578939e+06;  // N2
  cpms[2] *= 8.248474819596468e+07;  // H
  cpms[3] *= 5.196863940342046e+06;  // O
  cpms[4] *= 4.888847308845322e+06;  // OH
  cpms[5] *= 2.519076112874398e+06;  // HO2
  cpms[6] *= 4.124237409798234e+07;  // H2
  cpms[7] *= 4.615299815794193e+06;  // H2O
  cpms[8] *= 2.444423654422661e+06;  // H2O2
  cpms[9] *= 2.598431970171023e+06;  // O2
  cpms[10] *= 5.530071578419182e+06; // CH3
  cpms[11] *= 5.182610869633635e+06; // CH4
  cpms[12] *= 2.865277627042952e+06; // HCO
  cpms[13] *= 2.769087663409458e+06; // CH2O
  cpms[14] *= 2.679146297013998e+06; // CH3O
  cpms[15] *= 2.594863809423020e+06; // CH3OH
  cpms[16] *= 2.968390795484913e+06; // CO
  cpms[17] *= 1.889264154639560e+06; // CO2
  cpms[18] *= 3.193203248388218e+06; // C2H2
  cpms[19] *= 3.074193085170909e+06; // C2H3
  cpms[20] *= 2.963735160103101e+06; // C2H4
  cpms[21] *= 2.860939583701480e+06; // C2H5
  cpms[22] *= 2.765035789209591e+06; // C2H6
  cpms[23] *= 2.026484344769124e+06; // HCCO
  cpms[24] *= 1.977891528451897e+06; // CH2CO
  cpms[25] *= 1.931574542491170e+06; // CH2CHO
  cpms[26] *= 1.887377163451579e+06; // CH2OCH2
  cpms[27] *= 2.075243384039246e+06; // aC3H4
  cpms[28] *= 2.024313446340233e+06; // aC3H5
  cpms[29] *= 1.975823440068734e+06; // C3H6
  cpms[30] *= 1.929602130045543e+06; // nC3H7
  cpms[31] *= 1.481867580051551e+06; // C4H81
  cpms[32] *= 5.935933903157878e+06; // N
  cpms[33] *= 1.807295428356318e+06; // NO2
  cpms[34] *= 1.932472427229109e+06; // HCNO
  cpms[35] *= 1.932472427229109e+06; // HNCO
  cpms[36] *= 1.978833000488669e+06; // NCO
  cpms[37] *= 1.767793382976472e+06; // CH3O2
}

// Returns internal energy in mass units (Eq 30.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUMS(const amrex::Real T, amrex::Real ums[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  amrex::Real imw[38];

  get_imw(imw);

  speciesInternalEnergy(ums, tc);

  for (int i = 0; i < 38; i++) {
    ums[i] *= RT * imw[i];
  }
}

// Returns enthalpy in mass units (Eq 27.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHMS(const amrex::Real T, amrex::Real hms[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  amrex::Real imw[38];

  get_imw(imw);

  speciesEnthalpy(hms, tc);

  for (int i = 0; i < 38; i++) {
    hms[i] *= RT * imw[i];
  }
}

// Returns the entropies in mass units (Eq 28.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSMS(const amrex::Real T, amrex::Real sms[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEntropy(sms, tc);
  // multiply by R/molecularweight
  sms[0] *= 2.081217176008320e+06;  // AR
  sms[1] *= 2.967966951578939e+06;  // N2
  sms[2] *= 8.248474819596468e+07;  // H
  sms[3] *= 5.196863940342046e+06;  // O
  sms[4] *= 4.888847308845322e+06;  // OH
  sms[5] *= 2.519076112874398e+06;  // HO2
  sms[6] *= 4.124237409798234e+07;  // H2
  sms[7] *= 4.615299815794193e+06;  // H2O
  sms[8] *= 2.444423654422661e+06;  // H2O2
  sms[9] *= 2.598431970171023e+06;  // O2
  sms[10] *= 5.530071578419182e+06; // CH3
  sms[11] *= 5.182610869633635e+06; // CH4
  sms[12] *= 2.865277627042952e+06; // HCO
  sms[13] *= 2.769087663409458e+06; // CH2O
  sms[14] *= 2.679146297013998e+06; // CH3O
  sms[15] *= 2.594863809423020e+06; // CH3OH
  sms[16] *= 2.968390795484913e+06; // CO
  sms[17] *= 1.889264154639560e+06; // CO2
  sms[18] *= 3.193203248388218e+06; // C2H2
  sms[19] *= 3.074193085170909e+06; // C2H3
  sms[20] *= 2.963735160103101e+06; // C2H4
  sms[21] *= 2.860939583701480e+06; // C2H5
  sms[22] *= 2.765035789209591e+06; // C2H6
  sms[23] *= 2.026484344769124e+06; // HCCO
  sms[24] *= 1.977891528451897e+06; // CH2CO
  sms[25] *= 1.931574542491170e+06; // CH2CHO
  sms[26] *= 1.887377163451579e+06; // CH2OCH2
  sms[27] *= 2.075243384039246e+06; // aC3H4
  sms[28] *= 2.024313446340233e+06; // aC3H5
  sms[29] *= 1.975823440068734e+06; // C3H6
  sms[30] *= 1.929602130045543e+06; // nC3H7
  sms[31] *= 1.481867580051551e+06; // C4H81
  sms[32] *= 5.935933903157878e+06; // N
  sms[33] *= 1.807295428356318e+06; // NO2
  sms[34] *= 1.932472427229109e+06; // HCNO
  sms[35] *= 1.932472427229109e+06; // HNCO
  sms[36] *= 1.978833000488669e+06; // NCO
  sms[37] *= 1.767793382976472e+06; // CH3O2
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_qss_coeff(
  amrex::Real* k_f,
  amrex::Real* qf,
  amrex::Real* qr,
  const amrex::Real* sc,
  const amrex::Real* tc,
  amrex::Real* g_RT,
  amrex::Real* g_RT_qss)
{
  const amrex::Real invT = 1.0 / tc[1];

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1. / refC;
  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 38; ++i) {
    mixture += sc[i];
  }

  {
    // reaction 3: CH + CO (+M) <=> HCCO (+M)
    amrex::Real Corr = mixture + (0.7 - 1) * sc[0] + sc[6] + (6 - 1) * sc[7] +
                       sc[11] + (1.5 - 1) * sc[16] + sc[17] + (3 - 1) * sc[22];
    const amrex::Real redP =
      Corr / k_f[0] * 2.69e+16 * exp(-3.74 * tc[0] - 974.227464997937 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4243 * exp(-tc[1] * 0.00421940928270042) +
      0.5757 * exp(-tc[1] * 0.000605326876513317) + exp(-5069 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[0] = Corr * k_f[0] * (sc[16]);
    qr[0] = Corr * k_f[0] * exp(-(g_RT[16] - g_RT[23] + g_RT_qss[1])) * (refC) *
            (sc[23]);
  }

  {
    // reaction 5: CH2 + H (+M) <=> CH3 (+M)
    amrex::Real Corr = mixture + (0.7 - 1) * sc[0] + sc[6] + (6 - 1) * sc[7] +
                       sc[11] + (1.5 - 1) * sc[16] + sc[17] + (3 - 1) * sc[22];
    const amrex::Real redP =
      Corr / k_f[1] * 3.2e+15 * exp(-3.14 * tc[0] - 618.956498939805 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.32 * exp(-tc[1] * 0.0128205128205128) +
      0.68 * exp(-tc[1] * 0.00050125313283208) + exp(-5590 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[1] = Corr * k_f[1] * (sc[2]);
    qr[1] = Corr * k_f[1] * exp(-(g_RT[2] - g_RT[10] + g_RT_qss[2])) * (refC) *
            (sc[10]);
  }

  {
    // reaction 6: CH2 + CO (+M) <=> CH2CO (+M)
    amrex::Real Corr = mixture + (0.7 - 1) * sc[0] + sc[6] + (6 - 1) * sc[7] +
                       sc[11] + (1.5 - 1) * sc[16] + sc[17] + (3 - 1) * sc[22];
    const amrex::Real redP =
      Corr / k_f[2] * 2.69e+21 * exp(-5.11 * tc[0] - 3570.32224388449 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4093 * exp(-tc[1] * 0.00363636363636364) +
      0.5907 * exp(-tc[1] * 0.000815660685154976) + exp(-5185 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[2] = Corr * k_f[2] * (sc[16]);
    qr[2] = Corr * k_f[2] * exp(-(g_RT[16] - g_RT[24] + g_RT_qss[2])) * (refC) *
            (sc[24]);
  }

  {
    // reaction 7: CH2* + H2O (+M) <=> CH3OH (+M)
    amrex::Real Corr = mixture + sc[6] + (6 - 1) * sc[7] + sc[11] +
                       (1.5 - 1) * sc[16] + sc[17] + (3 - 1) * sc[22];
    const amrex::Real redP =
      Corr / k_f[3] * 2.7e+26 * exp(-6.3 * tc[0] - 1559.97166399463 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.8493 * exp(-tc[1] * 0.00746268656716418) +
      0.1507 * exp(-tc[1] * 0.000419639110365086) + exp(-7265 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[3] = Corr * k_f[3] * (sc[7]);
    qr[3] = Corr * k_f[3] * exp(-(g_RT[7] - g_RT[15] + g_RT_qss[3])) * (refC) *
            (sc[15]);
  }

  {
    // reaction 17: C2H4 (+M) <=> H2 + H2CC (+M)
    amrex::Real Corr = mixture + (0.7 - 1) * sc[0] + sc[6] + (6 - 1) * sc[7] +
                       sc[11] + (1.5 - 1) * sc[16] + sc[17] + (3 - 1) * sc[22];
    const amrex::Real redP =
      Corr / k_f[4] * 7e+44 * exp(-9.31 * tc[0] - 50251.2162472593 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2655 * exp(-tc[1] * 0.00555555555555556) +
      0.7345 * exp(-tc[1] * 0.000966183574879227) + exp(-5417 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[4] = Corr * k_f[4] * (sc[20]);
    qr[4] = Corr * k_f[4] * exp(-(-g_RT[6] + g_RT[20] - g_RT_qss[4])) *
            (refCinv) * (sc[6]);
  }

  {
    // reaction 26: C2H2 (+M) <=> H2CC (+M)
    amrex::Real Corr = mixture + sc[6] + (6 - 1) * sc[7] + sc[11] +
                       (1.5 - 1) * sc[16] + sc[17] + (2.5 - 1) * sc[18] +
                       (2.5 - 1) * sc[20] + (3 - 1) * sc[22];
    const amrex::Real redP =
      Corr / k_f[5] * 2450000000 * exp(-0.64 * tc[0] - 25009.8682904946 * invT);
    Corr = redP / (1.0 + redP);
    qf[5] = Corr * k_f[5] * (sc[18]);
    qr[5] = Corr * k_f[5] * exp(-(g_RT[18] - g_RT_qss[4])) * (1.0);
  }

  {
    // reaction 36: NO + O + M <=> NO2 + M
    const amrex::Real Corr = mixture + (0.7 - 1) * sc[0] + sc[6] +
                             (6 - 1) * sc[7] + sc[11] + (1.5 - 1) * sc[16] +
                             sc[17] + (3 - 1) * sc[22];
    qf[6] = Corr * k_f[6] * (sc[3]);
    qr[6] = Corr * k_f[6] * exp(-(g_RT[3] - g_RT[33] + g_RT_qss[5])) * (refC) *
            (sc[33]);
  }

  {
    // reaction 67: C + OH <=> CO + H
    qf[7] = k_f[7] * (sc[4]);
    qr[7] = k_f[7] * exp(-(-g_RT[2] + g_RT[4] - g_RT[16] + g_RT_qss[0])) *
            (sc[2] * sc[16]);
  }

  {
    // reaction 68: C + O2 <=> CO + O
    qf[8] = k_f[8] * (sc[9]);
    qr[8] = k_f[8] * exp(-(-g_RT[3] + g_RT[9] - g_RT[16] + g_RT_qss[0])) *
            (sc[3] * sc[16]);
  }

  {
    // reaction 69: CH + H <=> C + H2
    qf[9] = k_f[9] * (sc[2]);
    qr[9] =
      k_f[9] * exp(-(g_RT[2] - g_RT[6] - g_RT_qss[0] + g_RT_qss[1])) * (sc[6]);
  }

  {
    // reaction 70: CH + O <=> CO + H
    qf[10] = k_f[10] * (sc[3]);
    qr[10] = k_f[10] * exp(-(-g_RT[2] + g_RT[3] - g_RT[16] + g_RT_qss[1])) *
             (sc[2] * sc[16]);
  }

  {
    // reaction 71: CH + OH <=> H + HCO
    qf[11] = k_f[11] * (sc[4]);
    qr[11] = k_f[11] * exp(-(-g_RT[2] + g_RT[4] - g_RT[12] + g_RT_qss[1])) *
             (sc[2] * sc[12]);
  }

  {
    // reaction 72: CH + H2 <=> CH2 + H
    qf[12] = k_f[12] * (sc[6]);
    qr[12] = k_f[12] * exp(-(-g_RT[2] + g_RT[6] + g_RT_qss[1] - g_RT_qss[2])) *
             (sc[2]);
  }

  {
    // reaction 73: CH + H2O <=> CH2O + H
    qf[13] = k_f[13] * (sc[7]);
    qr[13] = k_f[13] * exp(-(-g_RT[2] + g_RT[7] - g_RT[13] + g_RT_qss[1])) *
             (sc[2] * sc[13]);
  }

  {
    // reaction 74: CH + O2 <=> HCO + O
    qf[14] = k_f[14] * (sc[9]);
    qr[14] = k_f[14] * exp(-(-g_RT[3] + g_RT[9] - g_RT[12] + g_RT_qss[1])) *
             (sc[3] * sc[12]);
  }

  {
    // reaction 75: CH + CO2 <=> CO + HCO
    qf[15] = k_f[15] * (sc[17]);
    qr[15] = k_f[15] * exp(-(-g_RT[12] - g_RT[16] + g_RT[17] + g_RT_qss[1])) *
             (sc[12] * sc[16]);
  }

  {
    // reaction 76: CH2 + O <=> H + HCO
    qf[16] = k_f[16] * (sc[3]);
    qr[16] = k_f[16] * exp(-(-g_RT[2] + g_RT[3] - g_RT[12] + g_RT_qss[2])) *
             (sc[2] * sc[12]);
  }

  {
    // reaction 77: CH2 + OH <=> CH2O + H
    qf[17] = k_f[17] * (sc[4]);
    qr[17] = k_f[17] * exp(-(-g_RT[2] + g_RT[4] - g_RT[13] + g_RT_qss[2])) *
             (sc[2] * sc[13]);
  }

  {
    // reaction 78: CH2 + OH <=> CH + H2O
    qf[18] = k_f[18] * (sc[4]);
    qr[18] =
      k_f[18] * exp(-(g_RT[4] - g_RT[7] - g_RT_qss[1] + g_RT_qss[2])) * (sc[7]);
  }

  {
    // reaction 79: CH2 + H2 <=> CH3 + H
    qf[19] = k_f[19] * (sc[6]);
    qr[19] = k_f[19] * exp(-(-g_RT[2] + g_RT[6] - g_RT[10] + g_RT_qss[2])) *
             (sc[2] * sc[10]);
  }

  {
    // reaction 80: CH2 + O2 <=> HCO + OH
    qf[20] = k_f[20] * (sc[9]);
    qr[20] = k_f[20] * exp(-(-g_RT[4] + g_RT[9] - g_RT[12] + g_RT_qss[2])) *
             (sc[4] * sc[12]);
  }

  {
    // reaction 81: CH2 + O2 <=> CO2 + 2 H
    qf[21] = k_f[21] * (sc[9]);
    qr[21] = k_f[21] *
             exp(-(-2.000000 * g_RT[2] + g_RT[9] - g_RT[17] + g_RT_qss[2])) *
             (refCinv) * (sc[2] * sc[2] * sc[17]);
  }

  {
    // reaction 82: CH2 + HO2 <=> CH2O + OH
    qf[22] = k_f[22] * (sc[5]);
    qr[22] = k_f[22] * exp(-(-g_RT[4] + g_RT[5] - g_RT[13] + g_RT_qss[2])) *
             (sc[4] * sc[13]);
  }

  {
    // reaction 83: CH + CH2 <=> C2H2 + H
    // Remove forward reaction
    // qf[23] = k_f[23] * (1.0);
    qf[23] = 0.0;
    qr[23] = k_f[23] * exp(-(-g_RT[2] - g_RT[18] + g_RT_qss[1] + g_RT_qss[2])) *
             (sc[2] * sc[18]);
  }

  {
    // reaction 84: 2 CH2 <=> C2H2 + H2
    // Remove forward reaction
    // qf[24] = k_f[24] * (1.0);
    qf[24] = 0.0;
    qr[24] = k_f[24] * exp(-(-g_RT[6] - g_RT[18] + 2.000000 * g_RT_qss[2])) *
             (sc[6] * sc[18]);
  }

  {
    // reaction 85: CH2* + N2 <=> CH2 + N2
    qf[25] = k_f[25] * (sc[1]);
    qr[25] =
      k_f[25] * exp(-(g_RT[1] - g_RT[1] - g_RT_qss[2] + g_RT_qss[3])) * (sc[1]);
  }

  {
    // reaction 86: AR + CH2* <=> AR + CH2
    qf[26] = k_f[26] * (sc[0]);
    qr[26] =
      k_f[26] * exp(-(g_RT[0] - g_RT[0] - g_RT_qss[2] + g_RT_qss[3])) * (sc[0]);
  }

  {
    // reaction 87: CH2* + H <=> CH + H2
    qf[27] = k_f[27] * (sc[2]);
    qr[27] =
      k_f[27] * exp(-(g_RT[2] - g_RT[6] - g_RT_qss[1] + g_RT_qss[3])) * (sc[6]);
  }

  {
    // reaction 88: CH2* + O <=> CO + H2
    qf[28] = k_f[28] * (sc[3]);
    qr[28] = k_f[28] * exp(-(g_RT[3] - g_RT[6] - g_RT[16] + g_RT_qss[3])) *
             (sc[6] * sc[16]);
  }

  {
    // reaction 89: CH2* + O <=> H + HCO
    qf[29] = k_f[29] * (sc[3]);
    qr[29] = k_f[29] * exp(-(-g_RT[2] + g_RT[3] - g_RT[12] + g_RT_qss[3])) *
             (sc[2] * sc[12]);
  }

  {
    // reaction 90: CH2* + OH <=> CH2O + H
    qf[30] = k_f[30] * (sc[4]);
    qr[30] = k_f[30] * exp(-(-g_RT[2] + g_RT[4] - g_RT[13] + g_RT_qss[3])) *
             (sc[2] * sc[13]);
  }

  {
    // reaction 91: CH2* + H2 <=> CH3 + H
    qf[31] = k_f[31] * (sc[6]);
    qr[31] = k_f[31] * exp(-(-g_RT[2] + g_RT[6] - g_RT[10] + g_RT_qss[3])) *
             (sc[2] * sc[10]);
  }

  {
    // reaction 92: CH2* + O2 <=> CO + H + OH
    qf[32] = k_f[32] * (sc[9]);
    qr[32] = k_f[32] *
             exp(-(-g_RT[2] - g_RT[4] + g_RT[9] - g_RT[16] + g_RT_qss[3])) *
             (refCinv) * (sc[2] * sc[4] * sc[16]);
  }

  {
    // reaction 93: CH2* + O2 <=> CO + H2O
    qf[33] = k_f[33] * (sc[9]);
    qr[33] = k_f[33] * exp(-(-g_RT[7] + g_RT[9] - g_RT[16] + g_RT_qss[3])) *
             (sc[7] * sc[16]);
  }

  {
    // reaction 94: CH2* + H2O <=> CH2 + H2O
    qf[34] = k_f[34] * (sc[7]);
    qr[34] =
      k_f[34] * exp(-(g_RT[7] - g_RT[7] - g_RT_qss[2] + g_RT_qss[3])) * (sc[7]);
  }

  {
    // reaction 95: CH2* + CO <=> CH2 + CO
    qf[35] = k_f[35] * (sc[16]);
    qr[35] = k_f[35] * exp(-(g_RT[16] - g_RT[16] - g_RT_qss[2] + g_RT_qss[3])) *
             (sc[16]);
  }

  {
    // reaction 96: CH2* + CO2 <=> CH2 + CO2
    qf[36] = k_f[36] * (sc[17]);
    qr[36] = k_f[36] * exp(-(g_RT[17] - g_RT[17] - g_RT_qss[2] + g_RT_qss[3])) *
             (sc[17]);
  }

  {
    // reaction 97: CH2* + CO2 <=> CH2O + CO
    qf[37] = k_f[37] * (sc[17]);
    qr[37] = k_f[37] * exp(-(-g_RT[13] - g_RT[16] + g_RT[17] + g_RT_qss[3])) *
             (sc[13] * sc[16]);
  }

  {
    // reaction 103: CH + CH2O <=> CH2CO + H
    qf[38] = k_f[38] * (sc[13]);
    qr[38] = k_f[38] * exp(-(-g_RT[2] + g_RT[13] - g_RT[24] + g_RT_qss[1])) *
             (sc[2] * sc[24]);
  }

  {
    // reaction 105: CH3 + OH <=> CH2 + H2O
    qf[39] = k_f[39] * (sc[4] * sc[10]);
    qr[39] =
      k_f[39] * exp(-(g_RT[4] - g_RT[7] + g_RT[10] - g_RT_qss[2])) * (sc[7]);
  }

  {
    // reaction 106: CH3 + OH <=> CH2* + H2O
    qf[40] = k_f[40] * (sc[4] * sc[10]);
    qr[40] =
      k_f[40] * exp(-(g_RT[4] - g_RT[7] + g_RT[10] - g_RT_qss[3])) * (sc[7]);
  }

  {
    // reaction 112: C + CH3 <=> C2H2 + H
    qf[41] = k_f[41] * (sc[10]);
    qr[41] = k_f[41] * exp(-(-g_RT[2] + g_RT[10] - g_RT[18] + g_RT_qss[0])) *
             (sc[2] * sc[18]);
  }

  {
    // reaction 113: CH + CH3 <=> C2H3 + H
    qf[42] = k_f[42] * (sc[10]);
    qr[42] = k_f[42] * exp(-(-g_RT[2] + g_RT[10] - g_RT[19] + g_RT_qss[1])) *
             (sc[2] * sc[19]);
  }

  {
    // reaction 116: CH2 + CH3 <=> C2H4 + H
    qf[43] = k_f[43] * (sc[10]);
    qr[43] = k_f[43] * exp(-(-g_RT[2] + g_RT[10] - g_RT[20] + g_RT_qss[2])) *
             (sc[2] * sc[20]);
  }

  {
    // reaction 117: CH2* + CH3 <=> C2H4 + H
    qf[44] = k_f[44] * (sc[10]);
    qr[44] = k_f[44] * exp(-(-g_RT[2] + g_RT[10] - g_RT[20] + g_RT_qss[3])) *
             (sc[2] * sc[20]);
  }

  {
    // reaction 122: CH3O + H <=> CH2* + H2O
    qf[45] = k_f[45] * (sc[2] * sc[14]);
    qr[45] =
      k_f[45] * exp(-(g_RT[2] - g_RT[7] + g_RT[14] - g_RT_qss[3])) * (sc[7]);
  }

  {
    // reaction 129: CH + CH4 <=> C2H4 + H
    qf[46] = k_f[46] * (sc[11]);
    qr[46] = k_f[46] * exp(-(-g_RT[2] + g_RT[11] - g_RT[20] + g_RT_qss[1])) *
             (sc[2] * sc[20]);
  }

  {
    // reaction 130: CH2 + CH4 <=> 2 CH3
    qf[47] = k_f[47] * (sc[11]);
    qr[47] = k_f[47] * exp(-(-2.000000 * g_RT[10] + g_RT[11] + g_RT_qss[2])) *
             (sc[10] * sc[10]);
  }

  {
    // reaction 131: CH2* + CH4 <=> 2 CH3
    qf[48] = k_f[48] * (sc[11]);
    qr[48] = k_f[48] * exp(-(-2.000000 * g_RT[10] + g_RT[11] + g_RT_qss[3])) *
             (sc[10] * sc[10]);
  }

  {
    // reaction 136: H + HCCO <=> CH2* + CO
    qf[49] = k_f[49] * (sc[2] * sc[23]);
    qr[49] =
      k_f[49] * exp(-(g_RT[2] - g_RT[16] + g_RT[23] - g_RT_qss[3])) * (sc[16]);
  }

  {
    // reaction 139: CH + HCCO <=> C2H2 + CO
    qf[50] = k_f[50] * (sc[23]);
    qr[50] = k_f[50] * exp(-(-g_RT[16] - g_RT[18] + g_RT[23] + g_RT_qss[1])) *
             (sc[16] * sc[18]);
  }

  {
    // reaction 140: CH2 + HCCO <=> C2H3 + CO
    qf[51] = k_f[51] * (sc[23]);
    qr[51] = k_f[51] * exp(-(-g_RT[16] - g_RT[19] + g_RT[23] + g_RT_qss[2])) *
             (sc[16] * sc[19]);
  }

  {
    // reaction 142: C2H2 + O <=> CH2 + CO
    qf[52] = k_f[52] * (sc[3] * sc[18]);
    qr[52] =
      k_f[52] * exp(-(g_RT[3] - g_RT[16] + g_RT[18] - g_RT_qss[2])) * (sc[16]);
  }

  {
    // reaction 149: H + H2CC <=> C2H2 + H
    qf[53] = k_f[53] * (sc[2]);
    qr[53] = k_f[53] * exp(-(g_RT[2] - g_RT[2] - g_RT[18] + g_RT_qss[4])) *
             (sc[2] * sc[18]);
  }

  {
    // reaction 150: H2CC + OH <=> CH2CO + H
    qf[54] = k_f[54] * (sc[4]);
    qr[54] = k_f[54] * exp(-(-g_RT[2] + g_RT[4] - g_RT[24] + g_RT_qss[4])) *
             (sc[2] * sc[24]);
  }

  {
    // reaction 151: H2CC + O2 <=> 2 HCO
    qf[55] = k_f[55] * (sc[9]);
    qr[55] = k_f[55] * exp(-(g_RT[9] - 2.000000 * g_RT[12] + g_RT_qss[4])) *
             (sc[12] * sc[12]);
  }

  {
    // reaction 155: CH2CO + O <=> CH2 + CO2
    qf[56] = k_f[56] * (sc[3] * sc[24]);
    qr[56] =
      k_f[56] * exp(-(g_RT[3] - g_RT[17] + g_RT[24] - g_RT_qss[2])) * (sc[17]);
  }

  {
    // reaction 158: C2H3 + H <=> H2 + H2CC
    qf[57] = k_f[57] * (sc[2] * sc[19]);
    qr[57] =
      k_f[57] * exp(-(g_RT[2] - g_RT[6] + g_RT[19] - g_RT_qss[4])) * (sc[6]);
  }

  {
    // reaction 185: C2H4 + O <=> CH2 + CH2O
    qf[58] = k_f[58] * (sc[3] * sc[20]);
    qr[58] =
      k_f[58] * exp(-(g_RT[3] - g_RT[13] + g_RT[20] - g_RT_qss[2])) * (sc[13]);
  }

  {
    // reaction 188: C2H4 + CH <=> H + aC3H4
    qf[59] = k_f[59] * (sc[20]);
    qr[59] = k_f[59] * exp(-(-g_RT[2] + g_RT[20] - g_RT[27] + g_RT_qss[1])) *
             (sc[2] * sc[27]);
  }

  {
    // reaction 189: C2H4 + CH2 <=> H + aC3H5
    qf[60] = k_f[60] * (sc[20]);
    qr[60] = k_f[60] * exp(-(-g_RT[2] + g_RT[20] - g_RT[28] + g_RT_qss[2])) *
             (sc[2] * sc[28]);
  }

  {
    // reaction 190: C2H4 + CH2* <=> CH4 + H2CC
    qf[61] = k_f[61] * (sc[20]);
    qr[61] = k_f[61] *
             exp(-(-g_RT[11] + g_RT[20] + g_RT_qss[3] - g_RT_qss[4])) *
             (sc[11]);
  }

  {
    // reaction 191: C2H4 + CH2* <=> H + aC3H5
    qf[62] = k_f[62] * (sc[20]);
    qr[62] = k_f[62] * exp(-(-g_RT[2] + g_RT[20] - g_RT[28] + g_RT_qss[3])) *
             (sc[2] * sc[28]);
  }

  {
    // reaction 207: C2H6 + CH2* <=> C2H5 + CH3
    qf[63] = k_f[63] * (sc[22]);
    qr[63] = k_f[63] * exp(-(-g_RT[10] - g_RT[21] + g_RT[22] + g_RT_qss[3])) *
             (sc[10] * sc[21]);
  }

  {
    // reaction 243: N + NO <=> N2 + O
    qf[64] = k_f[64] * (sc[32]);
    qr[64] = k_f[64] * exp(-(-g_RT[1] - g_RT[3] + g_RT[32] + g_RT_qss[5])) *
             (sc[1] * sc[3]);
  }

  {
    // reaction 244: N + O2 <=> NO + O
    qf[65] = k_f[65] * (sc[9] * sc[32]);
    qr[65] =
      k_f[65] * exp(-(-g_RT[3] + g_RT[9] + g_RT[32] - g_RT_qss[5])) * (sc[3]);
  }

  {
    // reaction 245: N + OH <=> H + NO
    qf[66] = k_f[66] * (sc[4] * sc[32]);
    qr[66] =
      k_f[66] * exp(-(-g_RT[2] + g_RT[4] + g_RT[32] - g_RT_qss[5])) * (sc[2]);
  }

  {
    // reaction 246: HO2 + NO <=> NO2 + OH
    qf[67] = k_f[67] * (sc[5]);
    qr[67] = k_f[67] * exp(-(-g_RT[4] + g_RT[5] - g_RT[33] + g_RT_qss[5])) *
             (sc[4] * sc[33]);
  }

  {
    // reaction 247: NO2 + O <=> NO + O2
    qf[68] = k_f[68] * (sc[3] * sc[33]);
    qr[68] =
      k_f[68] * exp(-(g_RT[3] - g_RT[9] + g_RT[33] - g_RT_qss[5])) * (sc[9]);
  }

  {
    // reaction 248: H + NO2 <=> NO + OH
    qf[69] = k_f[69] * (sc[2] * sc[33]);
    qr[69] =
      k_f[69] * exp(-(g_RT[2] - g_RT[4] + g_RT[33] - g_RT_qss[5])) * (sc[4]);
  }

  {
    // reaction 249: NCO + O <=> CO + NO
    qf[70] = k_f[70] * (sc[3] * sc[36]);
    qr[70] =
      k_f[70] * exp(-(g_RT[3] - g_RT[16] + g_RT[36] - g_RT_qss[5])) * (sc[16]);
  }

  {
    // reaction 250: NCO + OH <=> CO + H + NO
    qf[71] = k_f[71] * (sc[4] * sc[36]);
    qr[71] = k_f[71] *
             exp(-(-g_RT[2] + g_RT[4] - g_RT[16] + g_RT[36] - g_RT_qss[5])) *
             (refCinv) * (sc[2] * sc[16]);
  }

  {
    // reaction 252: NCO + O2 <=> CO2 + NO
    qf[72] = k_f[72] * (sc[9] * sc[36]);
    qr[72] =
      k_f[72] * exp(-(g_RT[9] - g_RT[17] + g_RT[36] - g_RT_qss[5])) * (sc[17]);
  }

  {
    // reaction 253: NCO + NO <=> CO2 + N2
    qf[73] = k_f[73] * (sc[36]);
    qr[73] = k_f[73] * exp(-(-g_RT[1] - g_RT[17] + g_RT[36] + g_RT_qss[5])) *
             (sc[1] * sc[17]);
  }

  {
    // reaction 254: C + NO <=> CO + N
    // Remove forward reaction
    // qf[74] = k_f[74] * (1.0);
    qf[74] = 0.0;
    qr[74] = k_f[74] *
             exp(-(-g_RT[16] - g_RT[32] + g_RT_qss[0] + g_RT_qss[5])) *
             (sc[16] * sc[32]);
  }

  {
    // reaction 255: CH + NO <=> H + NCO
    // Remove forward reaction
    // qf[75] = k_f[75] * (1.0);
    qf[75] = 0.0;
    qr[75] = k_f[75] * exp(-(-g_RT[2] - g_RT[36] + g_RT_qss[1] + g_RT_qss[5])) *
             (sc[2] * sc[36]);
  }

  {
    // reaction 256: CH + NO <=> HCO + N
    // Remove forward reaction
    // qf[76] = k_f[76] * (1.0);
    qf[76] = 0.0;
    qr[76] = k_f[76] *
             exp(-(-g_RT[12] - g_RT[32] + g_RT_qss[1] + g_RT_qss[5])) *
             (sc[12] * sc[32]);
  }

  {
    // reaction 257: CH2 + NO <=> H + HNCO
    // Remove forward reaction
    // qf[77] = k_f[77] * (1.0);
    qf[77] = 0.0;
    qr[77] = k_f[77] * exp(-(-g_RT[2] - g_RT[35] + g_RT_qss[2] + g_RT_qss[5])) *
             (sc[2] * sc[35]);
  }

  {
    // reaction 258: CH2 + NO <=> H + HCNO
    // Remove forward reaction
    // qf[78] = k_f[78] * (1.0);
    qf[78] = 0.0;
    qr[78] = k_f[78] * exp(-(-g_RT[2] - g_RT[34] + g_RT_qss[2] + g_RT_qss[5])) *
             (sc[2] * sc[34]);
  }

  {
    // reaction 259: CH2* + NO <=> H + HNCO
    // Remove forward reaction
    // qf[79] = k_f[79] * (1.0);
    qf[79] = 0.0;
    qr[79] = k_f[79] * exp(-(-g_RT[2] - g_RT[35] + g_RT_qss[3] + g_RT_qss[5])) *
             (sc[2] * sc[35]);
  }

  {
    // reaction 260: CH2* + NO <=> H + HCNO
    // Remove forward reaction
    // qf[80] = k_f[80] * (1.0);
    qf[80] = 0.0;
    qr[80] = k_f[80] * exp(-(-g_RT[2] - g_RT[34] + g_RT_qss[3] + g_RT_qss[5])) *
             (sc[2] * sc[34]);
  }

  {
    // reaction 265: HCCO + NO <=> CO + HCNO
    qf[81] = k_f[81] * (sc[23]);
    qr[81] = k_f[81] * exp(-(-g_RT[16] + g_RT[23] - g_RT[34] + g_RT_qss[5])) *
             (sc[16] * sc[34]);
  }

  {
    // reaction 266: CO2 + N <=> CO + NO
    qf[82] = k_f[82] * (sc[17] * sc[32]);
    qr[82] = k_f[82] * exp(-(-g_RT[16] + g_RT[17] + g_RT[32] - g_RT_qss[5])) *
             (sc[16]);
  }

  {
    // reaction 267: CH3 + NO2 <=> CH3O + NO
    qf[83] = k_f[83] * (sc[10] * sc[33]);
    qr[83] =
      k_f[83] * exp(-(g_RT[10] - g_RT[14] + g_RT[33] - g_RT_qss[5])) * (sc[14]);
  }

  {
    // reaction 268: CH3O2 + NO <=> CH3O + NO2
    qf[84] = k_f[84] * (sc[37]);
    qr[84] = k_f[84] * exp(-(-g_RT[14] - g_RT[33] + g_RT[37] + g_RT_qss[5])) *
             (sc[14] * sc[33]);
  }

  return;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_k_f_qss(const amrex::Real* tc, amrex::Real invT, amrex::Real* k_f)
{
  // reaction 3: CH + CO (+M) <=> HCCO (+M)
  k_f[0] = 50000000;
  // reaction 5: CH2 + H (+M) <=> CH3 (+M)
  k_f[1] = 25000000000 * exp((-0.8) * tc[0]);
  // reaction 6: CH2 + CO (+M) <=> CH2CO (+M)
  k_f[2] = 810000 * exp((0.5) * tc[0] - (2269.50716277929) * invT);
  // reaction 7: CH2* + H2O (+M) <=> CH3OH (+M)
  k_f[3] = 20000000;
  // reaction 17: C2H4 (+M) <=> H2 + H2CC (+M)
  k_f[4] = 8000000000000 * exp((0.44) * tc[0] - (44670.543423485) * invT);
  // reaction 26: C2H2 (+M) <=> H2CC (+M)
  k_f[5] = 800000000000000 * exp((-0.52) * tc[0] - (25538.2457895895) * invT);
  // reaction 36: NO + O + M <=> NO2 + M
  k_f[6] = 106000000 * exp((-1.41) * tc[0]);
  // reaction 67: C + OH <=> CO + H
  k_f[7] = 50000000;
  // reaction 68: C + O2 <=> CO + O
  k_f[8] = 58000000 * exp(-(289.852799503519) * invT);
  // reaction 69: CH + H <=> C + H2
  k_f[9] = 110000000;
  // reaction 70: CH + O <=> CO + H
  k_f[10] = 57000000;
  // reaction 71: CH + OH <=> H + HCO
  k_f[11] = 30000000;
  // reaction 72: CH + H2 <=> CH2 + H
  k_f[12] = 110.7 * exp((1.79) * tc[0] - (840.371831893882) * invT);
  // reaction 73: CH + H2O <=> CH2O + H
  k_f[13] = 5710000 * exp(-(-379.928582682563) * invT);
  // reaction 74: CH + O2 <=> HCO + O
  k_f[14] = 33000000;
  // reaction 75: CH + CO2 <=> CO + HCO
  k_f[15] = 3400000 * exp(-(347.219499405257) * invT);
  // reaction 76: CH2 + O <=> H + HCO
  k_f[16] = 80000000;
  // reaction 77: CH2 + OH <=> CH2O + H
  k_f[17] = 20000000;
  // reaction 78: CH2 + OH <=> CH + H2O
  k_f[18] = 11.3 * exp((2) * tc[0] - (1509.64999741416) * invT);
  // reaction 79: CH2 + H2 <=> CH3 + H
  k_f[19] = 0.5 * exp((2) * tc[0] - (3638.25649376812) * invT);
  // reaction 80: CH2 + O2 <=> HCO + OH
  k_f[20] = 10600000 * exp(-(754.82499870708) * invT);
  // reaction 81: CH2 + O2 <=> CO2 + 2 H
  k_f[21] = 2640000 * exp(-(754.82499870708) * invT);
  // reaction 82: CH2 + HO2 <=> CH2O + OH
  k_f[22] = 20000000;
  // reaction 83: CH + CH2 <=> C2H2 + H
  k_f[23] = 40000000;
  // reaction 84: 2 CH2 <=> C2H2 + H2
  k_f[24] = 32000000;
  // reaction 85: CH2* + N2 <=> CH2 + N2
  k_f[25] = 15000000 * exp(-(301.929999482832) * invT);
  // reaction 86: AR + CH2* <=> AR + CH2
  k_f[26] = 9000000 * exp(-(301.929999482832) * invT);
  // reaction 87: CH2* + H <=> CH + H2
  k_f[27] = 30000000;
  // reaction 88: CH2* + O <=> CO + H2
  k_f[28] = 15000000;
  // reaction 89: CH2* + O <=> H + HCO
  k_f[29] = 15000000;
  // reaction 90: CH2* + OH <=> CH2O + H
  k_f[30] = 30000000;
  // reaction 91: CH2* + H2 <=> CH3 + H
  k_f[31] = 70000000;
  // reaction 92: CH2* + O2 <=> CO + H + OH
  k_f[32] = 28000000;
  // reaction 93: CH2* + O2 <=> CO + H2O
  k_f[33] = 12000000;
  // reaction 94: CH2* + H2O <=> CH2 + H2O
  k_f[34] = 30000000;
  // reaction 95: CH2* + CO <=> CH2 + CO
  k_f[35] = 9000000;
  // reaction 96: CH2* + CO2 <=> CH2 + CO2
  k_f[36] = 7000000;
  // reaction 97: CH2* + CO2 <=> CH2O + CO
  k_f[37] = 14000000;
  // reaction 103: CH + CH2O <=> CH2CO + H
  k_f[38] = 94600000 * exp(-(-259.156582889431) * invT);
  // reaction 105: CH3 + OH <=> CH2 + H2O
  k_f[39] = 56 * exp((1.6) * tc[0] - (2727.43432866158) * invT);
  // reaction 106: CH3 + OH <=> CH2* + H2O
  k_f[40] = 25010000;
  // reaction 112: C + CH3 <=> C2H2 + H
  k_f[41] = 50000000;
  // reaction 113: CH + CH3 <=> C2H3 + H
  k_f[42] = 30000000;
  // reaction 116: CH2 + CH3 <=> C2H4 + H
  k_f[43] = 40000000;
  // reaction 117: CH2* + CH3 <=> C2H4 + H
  k_f[44] = 12000000 * exp(-(-286.83349950869) * invT);
  // reaction 122: CH3O + H <=> CH2* + H2O
  k_f[45] = 16000000;
  // reaction 129: CH + CH4 <=> C2H4 + H
  k_f[46] = 60000000;
  // reaction 130: CH2 + CH4 <=> 2 CH3
  k_f[47] = 2.46 * exp((2) * tc[0] - (4161.60182620503) * invT);
  // reaction 131: CH2* + CH4 <=> 2 CH3
  k_f[48] = 16000000 * exp(-(-286.83349950869) * invT);
  // reaction 136: H + HCCO <=> CH2* + CO
  k_f[49] = 100000000;
  // reaction 139: CH + HCCO <=> C2H2 + CO
  k_f[50] = 50000000;
  // reaction 140: CH2 + HCCO <=> C2H3 + CO
  k_f[51] = 30000000;
  // reaction 142: C2H2 + O <=> CH2 + CO
  k_f[52] = 4.08 * exp((2) * tc[0] - (956.111665028967) * invT);
  // reaction 149: H + H2CC <=> C2H2 + H
  k_f[53] = 100000000;
  // reaction 150: H2CC + OH <=> CH2CO + H
  k_f[54] = 20000000;
  // reaction 151: H2CC + O2 <=> 2 HCO
  k_f[55] = 10000000;
  // reaction 155: CH2CO + O <=> CH2 + CO2
  k_f[56] = 1750000 * exp(-(679.342498836372) * invT);
  // reaction 158: C2H3 + H <=> H2 + H2CC
  k_f[57] = 60000000;
  // reaction 185: C2H4 + O <=> CH2 + CH2O
  k_f[58] = 0.384 * exp((1.83) * tc[0] - (110.707666477038) * invT);
  // reaction 188: C2H4 + CH <=> H + aC3H4
  k_f[59] = 30000000;
  // reaction 189: C2H4 + CH2 <=> H + aC3H5
  k_f[60] = 20000000 * exp(-(3019.29999482832) * invT);
  // reaction 190: C2H4 + CH2* <=> CH4 + H2CC
  k_f[61] = 50000000;
  // reaction 191: C2H4 + CH2* <=> H + aC3H5
  k_f[62] = 50000000;
  // reaction 207: C2H6 + CH2* <=> C2H5 + CH3
  k_f[63] = 40000000 * exp(-(-276.769166192596) * invT);
  // reaction 243: N + NO <=> N2 + O
  k_f[64] = 27000000 * exp(-(178.641916360675) * invT);
  // reaction 244: N + O2 <=> NO + O
  k_f[65] = 9000 * exp((1) * tc[0] - (3270.90832773068) * invT);
  // reaction 245: N + OH <=> H + NO
  k_f[66] = 33600000 * exp(-(193.738416334817) * invT);
  // reaction 246: HO2 + NO <=> NO2 + OH
  k_f[67] = 2110000 * exp(-(-241.543999586265) * invT);
  // reaction 247: NO2 + O <=> NO + O2
  k_f[68] = 3900000 * exp(-(-120.771999793133) * invT);
  // reaction 248: H + NO2 <=> NO + OH
  k_f[69] = 132000000 * exp(-(181.157999689699) * invT);
  // reaction 249: NCO + O <=> CO + NO
  k_f[70] = 2000000000 * exp((-0.5) * tc[0]);
  // reaction 250: NCO + OH <=> CO + H + NO
  k_f[71] = 8300000 * exp((-0.1) * tc[0] - (37986.8196682667) * invT);
  // reaction 252: NCO + O2 <=> CO2 + NO
  k_f[72] = 2000000 * exp(-(10064.3333160944) * invT);
  // reaction 253: NCO + NO <=> CO2 + N2
  k_f[73] = 3800000000000 * exp((-2) * tc[0] - (402.573332643776) * invT);
  // reaction 254: C + NO <=> CO + N
  k_f[74] = 29000000;
  // reaction 255: CH + NO <=> H + NCO
  k_f[75] = 16200000;
  // reaction 256: CH + NO <=> HCO + N
  k_f[76] = 24600000;
  // reaction 257: CH2 + NO <=> H + HNCO
  k_f[77] = 310000000000 * exp((-1.38) * tc[0] - (639.085165571994) * invT);
  // reaction 258: CH2 + NO <=> H + HCNO
  k_f[78] = 38000000 * exp((-0.36) * tc[0] - (291.865666166737) * invT);
  // reaction 259: CH2* + NO <=> H + HNCO
  k_f[79] = 310000000000 * exp((-1.38) * tc[0] - (639.085165571994) * invT);
  // reaction 260: CH2* + NO <=> H + HCNO
  k_f[80] = 38000000 * exp((-0.36) * tc[0] - (291.865666166737) * invT);
  // reaction 265: HCCO + NO <=> CO + HCNO
  k_f[81] = 55000 * exp(-(920.886498422637) * invT);
  // reaction 266: CO2 + N <=> CO + NO
  k_f[82] = 3000000 * exp(-(5686.34832359333) * invT);
  // reaction 267: CH3 + NO2 <=> CH3O + NO
  k_f[83] = 15100000 * exp((-0.05) * tc[0]);
  // reaction 268: CH3O2 + NO <=> CH3O + NO2
  k_f[84] = 1690000 * exp(-(-286.83349950869) * invT);

  return;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_sc_qss(amrex::Real* sc_qss, amrex::Real* qf_co, amrex::Real* qr_co)
{
  amrex::Real epsilon = 1e-12;

  // QSSA species 5: NO

  amrex::Real NO_num =
    epsilon + 1.0 * qr_co[6] + 1.0 * qr_co[64] + 1.0 * qf_co[65] +
    1.0 * qf_co[66] + 1.0 * qr_co[67] + 1.0 * qf_co[68] + 1.0 * qf_co[69] +
    1.0 * qf_co[70] + 1.0 * qf_co[71] + 1.0 * qf_co[72] + 1.0 * qr_co[73] +
    1.0 * qr_co[74] + 1.0 * qr_co[75] + 1.0 * qr_co[76] + 1.0 * qr_co[77] +
    1.0 * qr_co[78] + 1.0 * qr_co[79] + 1.0 * qr_co[80] + 1.0 * qr_co[81] +
    1.0 * qf_co[82] + 1.0 * qf_co[83] + 1.0 * qr_co[84];
  amrex::Real NO_denom = epsilon - qf_co[6] - qf_co[64] - qr_co[65] -
                         qr_co[66] - qf_co[67] - qr_co[68] - qr_co[69] -
                         qr_co[70] - qr_co[71] - qr_co[72] - qf_co[73] -
                         qf_co[81] - qr_co[82] - qr_co[83] - qf_co[84];

  sc_qss[5] = -NO_num / NO_denom;

  // QSSA coupling between H2CC  CH2*  CH2  CH  C
  // QSSA species 4: H2CC

  amrex::Real H2CC_num = epsilon + 1.0 * qf_co[4] + 1.0 * qf_co[5] +
                         1.0 * qr_co[53] + 1.0 * qr_co[54] + 1.0 * qr_co[55] +
                         1.0 * qf_co[57];
  amrex::Real H2CC_denom = epsilon - qr_co[4] - qr_co[5] - qf_co[53] -
                           qf_co[54] - qf_co[55] - qr_co[57] - qr_co[61];
  amrex::Real H2CC_rhs = -H2CC_num / H2CC_denom;

  amrex::Real H2CC_CH2D = (epsilon + 1.0 * qf_co[61]) / H2CC_denom;

  // QSSA species 3: CH2*

  amrex::Real CH2D_num = epsilon + 1.0 * qr_co[3] + 1.0 * qr_co[28] +
                         1.0 * qr_co[29] + 1.0 * qr_co[30] + 1.0 * qr_co[31] +
                         1.0 * qr_co[32] + 1.0 * qr_co[33] + 1.0 * qr_co[37] +
                         1.0 * qf_co[40] + 1.0 * qr_co[44] + 1.0 * qf_co[45] +
                         1.0 * qr_co[48] + 1.0 * qf_co[49] + 1.0 * qr_co[62] +
                         1.0 * qr_co[63] + 1.0 * qr_co[79] + 1.0 * qr_co[80];
  amrex::Real CH2D_denom =
    epsilon - qf_co[3] - qf_co[25] - qf_co[26] - qf_co[27] - qf_co[28] -
    qf_co[29] - qf_co[30] - qf_co[31] - qf_co[32] - qf_co[33] - qf_co[34] -
    qf_co[35] - qf_co[36] - qf_co[37] - qr_co[40] - qf_co[44] - qr_co[45] -
    qf_co[48] - qr_co[49] - qf_co[61] - qf_co[62] - qf_co[63];
  amrex::Real CH2D_rhs = -CH2D_num / CH2D_denom;

  amrex::Real CH2D_H2CC = (epsilon + 1.0 * qr_co[61]) / CH2D_denom;
  amrex::Real CH2D_CH2 = (epsilon + 1.0 * qr_co[25] + 1.0 * qr_co[26] +
                          1.0 * qr_co[34] + 1.0 * qr_co[35] + 1.0 * qr_co[36]) /
                         CH2D_denom;
  amrex::Real CH2D_CH = (epsilon + 1.0 * qr_co[27]) / CH2D_denom;

  // QSSA species 2: CH2

  amrex::Real CH2_num = epsilon + 1.0 * qr_co[1] + 1.0 * qr_co[2] +
                        1.0 * qr_co[16] + 1.0 * qr_co[17] + 1.0 * qr_co[19] +
                        1.0 * qr_co[20] + 1.0 * qr_co[21] + 1.0 * qr_co[22] +
                        1.0 * qr_co[23] + 2.0 * qr_co[24] + 1.0 * qf_co[39] +
                        1.0 * qr_co[43] + 1.0 * qr_co[47] + 1.0 * qr_co[51] +
                        1.0 * qf_co[52] + 1.0 * qf_co[56] + 1.0 * qf_co[58] +
                        1.0 * qr_co[60] + 1.0 * qr_co[77] + 1.0 * qr_co[78];
  amrex::Real CH2_denom =
    epsilon - qf_co[1] - qf_co[2] - qr_co[12] - qf_co[16] - qf_co[17] -
    qf_co[18] - qf_co[19] - qf_co[20] - qf_co[21] - qf_co[22] - qf_co[24] -
    qr_co[25] - qr_co[26] - qr_co[34] - qr_co[35] - qr_co[36] - qr_co[39] -
    qf_co[43] - qf_co[47] - qf_co[51] - qr_co[52] - qr_co[56] - qr_co[58] -
    qf_co[60];
  amrex::Real CH2_rhs = -CH2_num / CH2_denom;

  amrex::Real CH2_CH2D = (epsilon + 1.0 * qf_co[25] + 1.0 * qf_co[26] +
                          1.0 * qf_co[34] + 1.0 * qf_co[35] + 1.0 * qf_co[36]) /
                         CH2_denom;
  amrex::Real CH2_CH =
    (epsilon + 1.0 * qf_co[12] + 1.0 * qr_co[18]) / CH2_denom;

  // QSSA species 1: CH

  amrex::Real CH_num = epsilon + 1.0 * qr_co[0] + 1.0 * qr_co[10] +
                       1.0 * qr_co[11] + 1.0 * qr_co[13] + 1.0 * qr_co[14] +
                       1.0 * qr_co[15] + 1.0 * qr_co[23] + 1.0 * qr_co[38] +
                       1.0 * qr_co[42] + 1.0 * qr_co[46] + 1.0 * qr_co[50] +
                       1.0 * qr_co[59] + 1.0 * qr_co[75] + 1.0 * qr_co[76];
  amrex::Real CH_denom = epsilon - qf_co[0] - qf_co[9] - qf_co[10] - qf_co[11] -
                         qf_co[12] - qf_co[13] - qf_co[14] - qf_co[15] -
                         qr_co[18] - qr_co[27] - qf_co[38] - qf_co[42] -
                         qf_co[46] - qf_co[50] - qf_co[59];
  amrex::Real CH_rhs = -CH_num / CH_denom;

  amrex::Real CH_CH2D = (epsilon + 1.0 * qf_co[27]) / CH_denom;
  amrex::Real CH_CH2 = (epsilon + 1.0 * qr_co[12] + 1.0 * qf_co[18]) / CH_denom;
  amrex::Real CH_C = (epsilon + 1.0 * qr_co[9]) / CH_denom;

  // QSSA species 0: C

  amrex::Real C_num = epsilon + 1.0 * qr_co[7] + 1.0 * qr_co[8] +
                      1.0 * qr_co[41] + 1.0 * qr_co[74];
  amrex::Real C_denom = epsilon - qf_co[7] - qf_co[8] - qr_co[9] - qf_co[41];
  amrex::Real C_rhs = -C_num / C_denom;

  amrex::Real C_CH = (epsilon + 1.0 * qf_co[9]) / C_denom;

  // Putting it all together
  amrex::Real H_0 = CH2D_H2CC;
  amrex::Real H_1 = CH2_CH2D / (1 - H2CC_CH2D * H_0);
  amrex::Real H_2 = CH_CH2D / (1 - H2CC_CH2D * H_0);
  amrex::Real H_3 = (CH_CH2 - CH2D_CH2 * H_2) / (1 - CH2D_CH2 * H_1);
  amrex::Real H_4 =
    C_CH / ((1 - CH2D_CH * H_2) - (CH2_CH - CH2D_CH * H_1) * H_3);
  sc_qss[0] = (C_rhs - ((CH_rhs - (CH2D_rhs - H2CC_rhs * H_0) * H_2) -
                        (CH2_rhs - (CH2D_rhs - H2CC_rhs * H_0) * H_1) * H_3) *
                         H_4) /
              (1 - CH_C * H_4);

  sc_qss[1] = (((CH_rhs - (CH2D_rhs - H2CC_rhs * H_0) * H_2) -
                (CH2_rhs - (CH2D_rhs - H2CC_rhs * H_0) * H_1) * H_3) -
               (CH_C * sc_qss[0])) /
              ((1 - CH2D_CH * H_2) - (CH2_CH - CH2D_CH * H_1) * H_3);

  sc_qss[2] = ((CH2_rhs - (CH2D_rhs - H2CC_rhs * H_0) * H_1) -
               (+(CH2_CH - CH2D_CH * H_1) * sc_qss[1])) /
              (1 - CH2D_CH2 * H_1);

  sc_qss[3] = ((CH2D_rhs - H2CC_rhs * H_0) -
               (+CH2D_CH * sc_qss[1] + CH2D_CH2 * sc_qss[2])) /
              (1 - H2CC_CH2D * H_0);

  sc_qss[4] = H2CC_rhs - (+H2CC_CH2D * sc_qss[3]);

  return;
}

// GPU version of productionRate: no more use of thermo namespace vectors
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_qfqr(
  amrex::Real* qf,
  amrex::Real* qr,
  const amrex::Real* sc,
  const amrex::Real* sc_qss,
  const amrex::Real* tc,
  const amrex::Real invT)
{

  // reaction 0: H + O2 (+M) <=> HO2 (+M)
  qf[0] = sc[2] * sc[9];
  qr[0] = sc[5];

  // reaction 1: 2 OH (+M) <=> H2O2 (+M)
  qf[1] = (sc[4] * sc[4]);
  qr[1] = sc[8];

  // reaction 2: CO + H2 (+M) <=> CH2O (+M)
  qf[2] = sc[6] * sc[16];
  qr[2] = sc[13];

  // reaction 3: CH + CO (+M) <=> HCCO (+M)
  qf[3] = sc[16] * sc_qss[1];
  qr[3] = sc[23];

  // reaction 4: H + HCO (+M) <=> CH2O (+M)
  qf[4] = sc[2] * sc[12];
  qr[4] = sc[13];

  // reaction 5: CH2 + H (+M) <=> CH3 (+M)
  qf[5] = sc[2] * sc_qss[2];
  qr[5] = sc[10];

  // reaction 6: CH2 + CO (+M) <=> CH2CO (+M)
  qf[6] = sc[16] * sc_qss[2];
  qr[6] = sc[24];

  // reaction 7: CH2* + H2O (+M) <=> CH3OH (+M)
  qf[7] = sc[7] * sc_qss[3];
  qr[7] = sc[15];

  // reaction 8: CH2O + H (+M) <=> CH3O (+M)
  qf[8] = sc[2] * sc[13];
  qr[8] = sc[14];

  // reaction 9: CH3 + H (+M) <=> CH4 (+M)
  qf[9] = sc[2] * sc[10];
  qr[9] = sc[11];

  // reaction 10: CH3 + OH (+M) <=> CH3OH (+M)
  qf[10] = sc[4] * sc[10];
  qr[10] = sc[15];

  // reaction 11: 2 CH3 (+M) <=> C2H6 (+M)
  qf[11] = (sc[10] * sc[10]);
  qr[11] = sc[22];

  // reaction 12: CH3O + H (+M) <=> CH3OH (+M)
  qf[12] = sc[2] * sc[14];
  qr[12] = sc[15];

  // reaction 13: C2H3 (+M) <=> C2H2 + H (+M)
  qf[13] = sc[19];
  qr[13] = sc[2] * sc[18];

  // reaction 14: CH2CO + H (+M) <=> CH2CHO (+M)
  qf[14] = sc[2] * sc[24];
  qr[14] = sc[25];

  // reaction 15: C2H3 + H (+M) <=> C2H4 (+M)
  qf[15] = sc[2] * sc[19];
  qr[15] = sc[20];

  // reaction 16: C2H3 + CH3 (+M) <=> C3H6 (+M)
  qf[16] = sc[10] * sc[19];
  qr[16] = sc[29];

  // reaction 17: C2H4 (+M) <=> H2 + H2CC (+M)
  qf[17] = sc[20];
  qr[17] = sc[6] * sc_qss[4];

  // reaction 18: C2H4 + H (+M) <=> C2H5 (+M)
  qf[18] = sc[2] * sc[20];
  qr[18] = sc[21];

  // reaction 19: C2H5 + H (+M) <=> C2H6 (+M)
  qf[19] = sc[2] * sc[21];
  qr[19] = sc[22];

  // reaction 20: C2H3 + C2H5 (+M) <=> C4H81 (+M)
  qf[20] = sc[19] * sc[21];
  qr[20] = sc[31];

  // reaction 21: CH3 + O2 (+M) <=> CH3O2 (+M)
  qf[21] = sc[9] * sc[10];
  qr[21] = sc[37];

  // reaction 22: H + aC3H5 (+M) <=> C3H6 (+M)
  qf[22] = sc[2] * sc[28];
  qr[22] = sc[29];

  // reaction 23: CH3 + aC3H5 (+M) <=> C4H81 (+M)
  qf[23] = sc[10] * sc[28];
  qr[23] = sc[31];

  // reaction 24: C3H6 + H (+M) <=> nC3H7 (+M)
  qf[24] = sc[2] * sc[29];
  qr[24] = sc[30];

  // reaction 25: CO + O (+M) <=> CO2 (+M)
  qf[25] = sc[3] * sc[16];
  qr[25] = sc[17];

  // reaction 26: C2H2 (+M) <=> H2CC (+M)
  qf[26] = sc[18];
  qr[26] = sc_qss[4];

  // reaction 27: 2 H + M <=> H2 + M
  qf[27] = (sc[2] * sc[2]);
  qr[27] = sc[6];

  // reaction 28: 2 H + H2 <=> H2 + H2
  qf[28] = (sc[2] * sc[2]) * sc[6];
  qr[28] = (sc[6] * sc[6]);

  // reaction 29: 2 H + H2O <=> H2 + H2O
  qf[29] = (sc[2] * sc[2]) * sc[7];
  qr[29] = sc[6] * sc[7];

  // reaction 30: 2 H + CO2 <=> H2 + CO2
  qf[30] = (sc[2] * sc[2]) * sc[17];
  qr[30] = sc[6] * sc[17];

  // reaction 31: H + OH + M <=> H2O + M
  qf[31] = sc[2] * sc[4];
  qr[31] = sc[7];

  // reaction 32: H + O + M <=> OH + M
  qf[32] = sc[2] * sc[3];
  qr[32] = sc[4];

  // reaction 33: 2 O + M <=> O2 + M
  qf[33] = (sc[3] * sc[3]);
  qr[33] = sc[9];

  // reaction 34: HCO + M <=> CO + H + M
  qf[34] = sc[12];
  qr[34] = sc[2] * sc[16];

  // reaction 35: HCO + H2O <=> CO + H + H2O
  qf[35] = sc[7] * sc[12];
  qr[35] = sc[2] * sc[7] * sc[16];

  // reaction 36: NO + O + M <=> NO2 + M
  qf[36] = sc[3] * sc_qss[5];
  qr[36] = sc[33];

  // reaction 37: NCO + M <=> CO + N + M
  qf[37] = sc[36];
  qr[37] = sc[16] * sc[32];

  // reaction 38: H + O2 <=> O + OH
  qf[38] = sc[2] * sc[9];
  qr[38] = sc[3] * sc[4];

  // reaction 39: H2 + O <=> H + OH
  qf[39] = sc[3] * sc[6];
  qr[39] = sc[2] * sc[4];

  // reaction 40: H2 + OH <=> H + H2O
  qf[40] = sc[4] * sc[6];
  qr[40] = sc[2] * sc[7];

  // reaction 41: 2 OH <=> H2O + O
  qf[41] = (sc[4] * sc[4]);
  qr[41] = sc[3] * sc[7];

  // reaction 42: H2 + O2 <=> H + HO2
  qf[42] = sc[6] * sc[9];
  qr[42] = sc[2] * sc[5];

  // reaction 43: H + HO2 <=> H2O + O
  qf[43] = sc[2] * sc[5];
  qr[43] = sc[3] * sc[7];

  // reaction 44: H + HO2 <=> 2 OH
  qf[44] = sc[2] * sc[5];
  qr[44] = (sc[4] * sc[4]);

  // reaction 45: HO2 + O <=> O2 + OH
  qf[45] = sc[3] * sc[5];
  qr[45] = sc[4] * sc[9];

  // reaction 46: 2 HO2 <=> H2O2 + O2
  qf[46] = (sc[5] * sc[5]);
  qr[46] = sc[8] * sc[9];

  // reaction 47: 2 HO2 <=> H2O2 + O2
  qf[47] = (sc[5] * sc[5]);
  qr[47] = sc[8] * sc[9];

  // reaction 48: HO2 + OH <=> H2O + O2
  qf[48] = sc[4] * sc[5];
  qr[48] = sc[7] * sc[9];

  // reaction 49: HO2 + OH <=> H2O + O2
  qf[49] = sc[4] * sc[5];
  qr[49] = sc[7] * sc[9];

  // reaction 50: HO2 + OH <=> H2O + O2
  qf[50] = sc[4] * sc[5];
  qr[50] = sc[7] * sc[9];

  // reaction 51: HO2 + OH <=> H2O + O2
  qf[51] = sc[4] * sc[5];
  qr[51] = sc[7] * sc[9];

  // reaction 52: HO2 + OH <=> H2O + O2
  qf[52] = sc[4] * sc[5];
  qr[52] = sc[7] * sc[9];

  // reaction 53: H + H2O2 <=> H2 + HO2
  qf[53] = sc[2] * sc[8];
  qr[53] = sc[5] * sc[6];

  // reaction 54: H + H2O2 <=> H2O + OH
  qf[54] = sc[2] * sc[8];
  qr[54] = sc[4] * sc[7];

  // reaction 55: H2O2 + O <=> HO2 + OH
  qf[55] = sc[3] * sc[8];
  qr[55] = sc[4] * sc[5];

  // reaction 56: H2O2 + OH <=> H2O + HO2
  qf[56] = sc[4] * sc[8];
  qr[56] = sc[5] * sc[7];

  // reaction 57: H2O2 + OH <=> H2O + HO2
  qf[57] = sc[4] * sc[8];
  qr[57] = sc[5] * sc[7];

  // reaction 58: CO + OH <=> CO2 + H
  qf[58] = sc[4] * sc[16];
  qr[58] = sc[2] * sc[17];

  // reaction 59: CO + OH <=> CO2 + H
  qf[59] = sc[4] * sc[16];
  qr[59] = sc[2] * sc[17];

  // reaction 60: CO + O2 <=> CO2 + O
  qf[60] = sc[9] * sc[16];
  qr[60] = sc[3] * sc[17];

  // reaction 61: CO + HO2 <=> CO2 + OH
  qf[61] = sc[5] * sc[16];
  qr[61] = sc[4] * sc[17];

  // reaction 62: H + HCO <=> CO + H2
  qf[62] = sc[2] * sc[12];
  qr[62] = sc[6] * sc[16];

  // reaction 63: HCO + O <=> CO + OH
  qf[63] = sc[3] * sc[12];
  qr[63] = sc[4] * sc[16];

  // reaction 64: HCO + O <=> CO2 + H
  qf[64] = sc[3] * sc[12];
  qr[64] = sc[2] * sc[17];

  // reaction 65: HCO + OH <=> CO + H2O
  qf[65] = sc[4] * sc[12];
  qr[65] = sc[7] * sc[16];

  // reaction 66: HCO + O2 <=> CO + HO2
  qf[66] = sc[9] * sc[12];
  qr[66] = sc[5] * sc[16];

  // reaction 67: C + OH <=> CO + H
  qf[67] = sc[4] * sc_qss[0];
  qr[67] = sc[2] * sc[16];

  // reaction 68: C + O2 <=> CO + O
  qf[68] = sc[9] * sc_qss[0];
  qr[68] = sc[3] * sc[16];

  // reaction 69: CH + H <=> C + H2
  qf[69] = sc[2] * sc_qss[1];
  qr[69] = sc[6] * sc_qss[0];

  // reaction 70: CH + O <=> CO + H
  qf[70] = sc[3] * sc_qss[1];
  qr[70] = sc[2] * sc[16];

  // reaction 71: CH + OH <=> H + HCO
  qf[71] = sc[4] * sc_qss[1];
  qr[71] = sc[2] * sc[12];

  // reaction 72: CH + H2 <=> CH2 + H
  qf[72] = sc[6] * sc_qss[1];
  qr[72] = sc[2] * sc_qss[2];

  // reaction 73: CH + H2O <=> CH2O + H
  qf[73] = sc[7] * sc_qss[1];
  qr[73] = sc[2] * sc[13];

  // reaction 74: CH + O2 <=> HCO + O
  qf[74] = sc[9] * sc_qss[1];
  qr[74] = sc[3] * sc[12];

  // reaction 75: CH + CO2 <=> CO + HCO
  qf[75] = sc[17] * sc_qss[1];
  qr[75] = sc[12] * sc[16];

  // reaction 76: CH2 + O <=> H + HCO
  qf[76] = sc[3] * sc_qss[2];
  qr[76] = sc[2] * sc[12];

  // reaction 77: CH2 + OH <=> CH2O + H
  qf[77] = sc[4] * sc_qss[2];
  qr[77] = sc[2] * sc[13];

  // reaction 78: CH2 + OH <=> CH + H2O
  qf[78] = sc[4] * sc_qss[2];
  qr[78] = sc[7] * sc_qss[1];

  // reaction 79: CH2 + H2 <=> CH3 + H
  qf[79] = sc[6] * sc_qss[2];
  qr[79] = sc[2] * sc[10];

  // reaction 80: CH2 + O2 <=> HCO + OH
  qf[80] = sc[9] * sc_qss[2];
  qr[80] = sc[4] * sc[12];

  // reaction 81: CH2 + O2 <=> CO2 + 2 H
  qf[81] = sc[9] * sc_qss[2];
  qr[81] = (sc[2] * sc[2]) * sc[17];

  // reaction 82: CH2 + HO2 <=> CH2O + OH
  qf[82] = sc[5] * sc_qss[2];
  qr[82] = sc[4] * sc[13];

  // reaction 83: CH + CH2 <=> C2H2 + H
  qf[83] = sc_qss[1] * sc_qss[2];
  qr[83] = sc[2] * sc[18];

  // reaction 84: 2 CH2 <=> C2H2 + H2
  qf[84] = sc_qss[2] * sc_qss[2];
  qr[84] = sc[6] * sc[18];

  // reaction 85: CH2* + N2 <=> CH2 + N2
  qf[85] = sc[1] * sc_qss[3];
  qr[85] = sc[1] * sc_qss[2];

  // reaction 86: AR + CH2* <=> AR + CH2
  qf[86] = sc[0] * sc_qss[3];
  qr[86] = sc[0] * sc_qss[2];

  // reaction 87: CH2* + H <=> CH + H2
  qf[87] = sc[2] * sc_qss[3];
  qr[87] = sc[6] * sc_qss[1];

  // reaction 88: CH2* + O <=> CO + H2
  qf[88] = sc[3] * sc_qss[3];
  qr[88] = sc[6] * sc[16];

  // reaction 89: CH2* + O <=> H + HCO
  qf[89] = sc[3] * sc_qss[3];
  qr[89] = sc[2] * sc[12];

  // reaction 90: CH2* + OH <=> CH2O + H
  qf[90] = sc[4] * sc_qss[3];
  qr[90] = sc[2] * sc[13];

  // reaction 91: CH2* + H2 <=> CH3 + H
  qf[91] = sc[6] * sc_qss[3];
  qr[91] = sc[2] * sc[10];

  // reaction 92: CH2* + O2 <=> CO + H + OH
  qf[92] = sc[9] * sc_qss[3];
  qr[92] = sc[2] * sc[4] * sc[16];

  // reaction 93: CH2* + O2 <=> CO + H2O
  qf[93] = sc[9] * sc_qss[3];
  qr[93] = sc[7] * sc[16];

  // reaction 94: CH2* + H2O <=> CH2 + H2O
  qf[94] = sc[7] * sc_qss[3];
  qr[94] = sc[7] * sc_qss[2];

  // reaction 95: CH2* + CO <=> CH2 + CO
  qf[95] = sc[16] * sc_qss[3];
  qr[95] = sc[16] * sc_qss[2];

  // reaction 96: CH2* + CO2 <=> CH2 + CO2
  qf[96] = sc[17] * sc_qss[3];
  qr[96] = sc[17] * sc_qss[2];

  // reaction 97: CH2* + CO2 <=> CH2O + CO
  qf[97] = sc[17] * sc_qss[3];
  qr[97] = sc[13] * sc[16];

  // reaction 98: CH2O + H <=> H2 + HCO
  qf[98] = sc[2] * sc[13];
  qr[98] = sc[6] * sc[12];

  // reaction 99: CH2O + O <=> HCO + OH
  qf[99] = sc[3] * sc[13];
  qr[99] = sc[4] * sc[12];

  // reaction 100: CH2O + OH <=> H2O + HCO
  qf[100] = sc[4] * sc[13];
  qr[100] = sc[7] * sc[12];

  // reaction 101: CH2O + O2 <=> HCO + HO2
  qf[101] = sc[9] * sc[13];
  qr[101] = sc[5] * sc[12];

  // reaction 102: CH2O + HO2 <=> H2O2 + HCO
  qf[102] = sc[5] * sc[13];
  qr[102] = sc[8] * sc[12];

  // reaction 103: CH + CH2O <=> CH2CO + H
  qf[103] = sc[13] * sc_qss[1];
  qr[103] = sc[2] * sc[24];

  // reaction 104: CH3 + O <=> CH2O + H
  qf[104] = sc[3] * sc[10];
  qr[104] = sc[2] * sc[13];

  // reaction 105: CH3 + OH <=> CH2 + H2O
  qf[105] = sc[4] * sc[10];
  qr[105] = sc[7] * sc_qss[2];

  // reaction 106: CH3 + OH <=> CH2* + H2O
  qf[106] = sc[4] * sc[10];
  qr[106] = sc[7] * sc_qss[3];

  // reaction 107: CH3 + O2 <=> CH3O + O
  qf[107] = sc[9] * sc[10];
  qr[107] = sc[3] * sc[14];

  // reaction 108: CH3 + O2 <=> CH2O + OH
  qf[108] = sc[9] * sc[10];
  qr[108] = sc[4] * sc[13];

  // reaction 109: CH3 + HO2 <=> CH4 + O2
  qf[109] = sc[5] * sc[10];
  qr[109] = sc[9] * sc[11];

  // reaction 110: CH3 + HO2 <=> CH3O + OH
  qf[110] = sc[5] * sc[10];
  qr[110] = sc[4] * sc[14];

  // reaction 111: CH3 + H2O2 <=> CH4 + HO2
  qf[111] = sc[8] * sc[10];
  qr[111] = sc[5] * sc[11];

  // reaction 112: C + CH3 <=> C2H2 + H
  qf[112] = sc[10] * sc_qss[0];
  qr[112] = sc[2] * sc[18];

  // reaction 113: CH + CH3 <=> C2H3 + H
  qf[113] = sc[10] * sc_qss[1];
  qr[113] = sc[2] * sc[19];

  // reaction 114: CH3 + HCO <=> CH4 + CO
  qf[114] = sc[10] * sc[12];
  qr[114] = sc[11] * sc[16];

  // reaction 115: CH2O + CH3 <=> CH4 + HCO
  qf[115] = sc[10] * sc[13];
  qr[115] = sc[11] * sc[12];

  // reaction 116: CH2 + CH3 <=> C2H4 + H
  qf[116] = sc[10] * sc_qss[2];
  qr[116] = sc[2] * sc[20];

  // reaction 117: CH2* + CH3 <=> C2H4 + H
  qf[117] = sc[10] * sc_qss[3];
  qr[117] = sc[2] * sc[20];

  // reaction 118: 2 CH3 <=> C2H5 + H
  qf[118] = (sc[10] * sc[10]);
  qr[118] = sc[2] * sc[21];

  // reaction 119: CH3 + HCCO <=> C2H4 + CO
  qf[119] = sc[10] * sc[23];
  qr[119] = sc[16] * sc[20];

  // reaction 120: CH3O + H <=> CH2O + H2
  qf[120] = sc[2] * sc[14];
  qr[120] = sc[6] * sc[13];

  // reaction 121: CH3O + H <=> CH3 + OH
  qf[121] = sc[2] * sc[14];
  qr[121] = sc[4] * sc[10];

  // reaction 122: CH3O + H <=> CH2* + H2O
  qf[122] = sc[2] * sc[14];
  qr[122] = sc[7] * sc_qss[3];

  // reaction 123: CH3O + O <=> CH2O + OH
  qf[123] = sc[3] * sc[14];
  qr[123] = sc[4] * sc[13];

  // reaction 124: CH3O + OH <=> CH2O + H2O
  qf[124] = sc[4] * sc[14];
  qr[124] = sc[7] * sc[13];

  // reaction 125: CH3O + O2 <=> CH2O + HO2
  qf[125] = sc[9] * sc[14];
  qr[125] = sc[5] * sc[13];

  // reaction 126: CH4 + H <=> CH3 + H2
  qf[126] = sc[2] * sc[11];
  qr[126] = sc[6] * sc[10];

  // reaction 127: CH4 + O <=> CH3 + OH
  qf[127] = sc[3] * sc[11];
  qr[127] = sc[4] * sc[10];

  // reaction 128: CH4 + OH <=> CH3 + H2O
  qf[128] = sc[4] * sc[11];
  qr[128] = sc[7] * sc[10];

  // reaction 129: CH + CH4 <=> C2H4 + H
  qf[129] = sc[11] * sc_qss[1];
  qr[129] = sc[2] * sc[20];

  // reaction 130: CH2 + CH4 <=> 2 CH3
  qf[130] = sc[11] * sc_qss[2];
  qr[130] = (sc[10] * sc[10]);

  // reaction 131: CH2* + CH4 <=> 2 CH3
  qf[131] = sc[11] * sc_qss[3];
  qr[131] = (sc[10] * sc[10]);

  // reaction 132: CH3OH + H <=> CH3O + H2
  qf[132] = sc[2] * sc[15];
  qr[132] = sc[6] * sc[14];

  // reaction 133: CH3OH + O <=> CH3O + OH
  qf[133] = sc[3] * sc[15];
  qr[133] = sc[4] * sc[14];

  // reaction 134: CH3OH + OH <=> CH3O + H2O
  qf[134] = sc[4] * sc[15];
  qr[134] = sc[7] * sc[14];

  // reaction 135: CH3 + CH3OH <=> CH3O + CH4
  qf[135] = sc[10] * sc[15];
  qr[135] = sc[11] * sc[14];

  // reaction 136: H + HCCO <=> CH2* + CO
  qf[136] = sc[2] * sc[23];
  qr[136] = sc[16] * sc_qss[3];

  // reaction 137: HCCO + O <=> 2 CO + H
  qf[137] = sc[3] * sc[23];
  qr[137] = sc[2] * (sc[16] * sc[16]);

  // reaction 138: HCCO + O2 <=> 2 CO + OH
  qf[138] = sc[9] * sc[23];
  qr[138] = sc[4] * (sc[16] * sc[16]);

  // reaction 139: CH + HCCO <=> C2H2 + CO
  qf[139] = sc[23] * sc_qss[1];
  qr[139] = sc[16] * sc[18];

  // reaction 140: CH2 + HCCO <=> C2H3 + CO
  qf[140] = sc[23] * sc_qss[2];
  qr[140] = sc[16] * sc[19];

  // reaction 141: 2 HCCO <=> C2H2 + 2 CO
  qf[141] = (sc[23] * sc[23]);
  qr[141] = (sc[16] * sc[16]) * sc[18];

  // reaction 142: C2H2 + O <=> CH2 + CO
  qf[142] = sc[3] * sc[18];
  qr[142] = sc[16] * sc_qss[2];

  // reaction 143: C2H2 + O <=> H + HCCO
  qf[143] = sc[3] * sc[18];
  qr[143] = sc[2] * sc[23];

  // reaction 144: C2H2 + OH <=> CH2CO + H
  qf[144] = sc[4] * sc[18];
  qr[144] = sc[2] * sc[24];

  // reaction 145: C2H2 + OH <=> CH3 + CO
  qf[145] = sc[4] * sc[18];
  qr[145] = sc[10] * sc[16];

  // reaction 146: C2H2 + HCO <=> C2H3 + CO
  qf[146] = sc[12] * sc[18];
  qr[146] = sc[16] * sc[19];

  // reaction 147: C2H2 + CH3 <=> H + aC3H4
  qf[147] = sc[10] * sc[18];
  qr[147] = sc[2] * sc[27];

  // reaction 148: C2H2 + CH3 <=> aC3H5
  qf[148] = sc[10] * sc[18];
  qr[148] = sc[28];

  // reaction 149: H + H2CC <=> C2H2 + H
  qf[149] = sc[2] * sc_qss[4];
  qr[149] = sc[2] * sc[18];

  // reaction 150: H2CC + OH <=> CH2CO + H
  qf[150] = sc[4] * sc_qss[4];
  qr[150] = sc[2] * sc[24];

  // reaction 151: H2CC + O2 <=> 2 HCO
  qf[151] = sc[9] * sc_qss[4];
  qr[151] = (sc[12] * sc[12]);

  // reaction 152: CH2CO + H <=> H2 + HCCO
  qf[152] = sc[2] * sc[24];
  qr[152] = sc[6] * sc[23];

  // reaction 153: CH2CO + H <=> CH3 + CO
  qf[153] = sc[2] * sc[24];
  qr[153] = sc[10] * sc[16];

  // reaction 154: CH2CO + O <=> HCCO + OH
  qf[154] = sc[3] * sc[24];
  qr[154] = sc[4] * sc[23];

  // reaction 155: CH2CO + O <=> CH2 + CO2
  qf[155] = sc[3] * sc[24];
  qr[155] = sc[17] * sc_qss[2];

  // reaction 156: CH2CO + OH <=> H2O + HCCO
  qf[156] = sc[4] * sc[24];
  qr[156] = sc[7] * sc[23];

  // reaction 157: C2H3 + H <=> C2H2 + H2
  qf[157] = sc[2] * sc[19];
  qr[157] = sc[6] * sc[18];

  // reaction 158: C2H3 + H <=> H2 + H2CC
  qf[158] = sc[2] * sc[19];
  qr[158] = sc[6] * sc_qss[4];

  // reaction 159: C2H3 + O <=> CH2CO + H
  qf[159] = sc[3] * sc[19];
  qr[159] = sc[2] * sc[24];

  // reaction 160: C2H3 + O <=> CH3 + CO
  qf[160] = sc[3] * sc[19];
  qr[160] = sc[10] * sc[16];

  // reaction 161: C2H3 + OH <=> C2H2 + H2O
  qf[161] = sc[4] * sc[19];
  qr[161] = sc[7] * sc[18];

  // reaction 162: C2H3 + O2 <=> C2H2 + HO2
  qf[162] = sc[9] * sc[19];
  qr[162] = sc[5] * sc[18];

  // reaction 163: C2H3 + O2 <=> CH2CHO + O
  qf[163] = sc[9] * sc[19];
  qr[163] = sc[3] * sc[25];

  // reaction 164: C2H3 + O2 <=> CH2O + HCO
  qf[164] = sc[9] * sc[19];
  qr[164] = sc[12] * sc[13];

  // reaction 165: C2H3 + HO2 <=> CH2CHO + OH
  qf[165] = sc[5] * sc[19];
  qr[165] = sc[4] * sc[25];

  // reaction 166: C2H3 + H2O2 <=> C2H4 + HO2
  qf[166] = sc[8] * sc[19];
  qr[166] = sc[5] * sc[20];

  // reaction 167: C2H3 + HCO <=> C2H4 + CO
  qf[167] = sc[12] * sc[19];
  qr[167] = sc[16] * sc[20];

  // reaction 168: C2H3 + CH3 <=> C2H2 + CH4
  qf[168] = sc[10] * sc[19];
  qr[168] = sc[11] * sc[18];

  // reaction 169: C2H3 + CH3 <=> H + aC3H5
  qf[169] = sc[10] * sc[19];
  qr[169] = sc[2] * sc[28];

  // reaction 170: 2 C2H3 <=> C2H2 + C2H4
  qf[170] = (sc[19] * sc[19]);
  qr[170] = sc[18] * sc[20];

  // reaction 171: CH2CHO <=> CH3 + CO
  qf[171] = sc[25];
  qr[171] = sc[10] * sc[16];

  // reaction 172: CH2CHO + H <=> CH3 + HCO
  qf[172] = sc[2] * sc[25];
  qr[172] = sc[10] * sc[12];

  // reaction 173: CH2CHO + H <=> CH2CO + H2
  qf[173] = sc[2] * sc[25];
  qr[173] = sc[6] * sc[24];

  // reaction 174: CH2CHO + O <=> CH2CO + OH
  qf[174] = sc[3] * sc[25];
  qr[174] = sc[4] * sc[24];

  // reaction 175: CH2CHO + OH <=> CH2CO + H2O
  qf[175] = sc[4] * sc[25];
  qr[175] = sc[7] * sc[24];

  // reaction 176: CH2CHO + O2 <=> CH2CO + HO2
  qf[176] = sc[9] * sc[25];
  qr[176] = sc[5] * sc[24];

  // reaction 177: CH2CHO + O2 <=> CH2O + CO + OH
  qf[177] = sc[9] * sc[25];
  qr[177] = sc[4] * sc[13] * sc[16];

  // reaction 178: CH2OCH2 <=> CH3 + HCO
  qf[178] = sc[26];
  qr[178] = sc[10] * sc[12];

  // reaction 179: CH2OCH2 <=> CH4 + CO
  qf[179] = sc[26];
  qr[179] = sc[11] * sc[16];

  // reaction 180: CH2OCH2 + H <=> C2H3 + H2O
  qf[180] = sc[2] * sc[26];
  qr[180] = sc[7] * sc[19];

  // reaction 181: CH2OCH2 + H <=> C2H4 + OH
  qf[181] = sc[2] * sc[26];
  qr[181] = sc[4] * sc[20];

  // reaction 182: C2H4 + H <=> C2H3 + H2
  qf[182] = sc[2] * sc[20];
  qr[182] = sc[6] * sc[19];

  // reaction 183: C2H4 + O <=> C2H3 + OH
  qf[183] = sc[3] * sc[20];
  qr[183] = sc[4] * sc[19];

  // reaction 184: C2H4 + O <=> CH3 + HCO
  qf[184] = sc[3] * sc[20];
  qr[184] = sc[10] * sc[12];

  // reaction 185: C2H4 + O <=> CH2 + CH2O
  qf[185] = sc[3] * sc[20];
  qr[185] = sc[13] * sc_qss[2];

  // reaction 186: C2H4 + OH <=> C2H3 + H2O
  qf[186] = sc[4] * sc[20];
  qr[186] = sc[7] * sc[19];

  // reaction 187: C2H4 + HCO <=> C2H5 + CO
  qf[187] = sc[12] * sc[20];
  qr[187] = sc[16] * sc[21];

  // reaction 188: C2H4 + CH <=> H + aC3H4
  qf[188] = sc[20] * sc_qss[1];
  qr[188] = sc[2] * sc[27];

  // reaction 189: C2H4 + CH2 <=> H + aC3H5
  qf[189] = sc[20] * sc_qss[2];
  qr[189] = sc[2] * sc[28];

  // reaction 190: C2H4 + CH2* <=> CH4 + H2CC
  qf[190] = sc[20] * sc_qss[3];
  qr[190] = sc[11] * sc_qss[4];

  // reaction 191: C2H4 + CH2* <=> H + aC3H5
  qf[191] = sc[20] * sc_qss[3];
  qr[191] = sc[2] * sc[28];

  // reaction 192: C2H4 + CH3 <=> C2H3 + CH4
  qf[192] = sc[10] * sc[20];
  qr[192] = sc[11] * sc[19];

  // reaction 193: C2H4 + CH3 <=> nC3H7
  qf[193] = sc[10] * sc[20];
  qr[193] = sc[30];

  // reaction 194: C2H4 + O2 <=> C2H3 + HO2
  qf[194] = sc[9] * sc[20];
  qr[194] = sc[5] * sc[19];

  // reaction 195: C2H4 + HO2 <=> CH2OCH2 + OH
  qf[195] = sc[5] * sc[20];
  qr[195] = sc[4] * sc[26];

  // reaction 196: C2H5 + H <=> C2H4 + H2
  qf[196] = sc[2] * sc[21];
  qr[196] = sc[6] * sc[20];

  // reaction 197: C2H5 + O <=> CH2O + CH3
  qf[197] = sc[3] * sc[21];
  qr[197] = sc[10] * sc[13];

  // reaction 198: C2H5 + O2 <=> C2H4 + HO2
  qf[198] = sc[9] * sc[21];
  qr[198] = sc[5] * sc[20];

  // reaction 199: C2H5 + HO2 <=> C2H6 + O2
  qf[199] = sc[5] * sc[21];
  qr[199] = sc[9] * sc[22];

  // reaction 200: C2H5 + HO2 <=> C2H4 + H2O2
  qf[200] = sc[5] * sc[21];
  qr[200] = sc[8] * sc[20];

  // reaction 201: C2H5 + HO2 <=> CH2O + CH3 + OH
  qf[201] = sc[5] * sc[21];
  qr[201] = sc[4] * sc[10] * sc[13];

  // reaction 202: C2H5 + H2O2 <=> C2H6 + HO2
  qf[202] = sc[8] * sc[21];
  qr[202] = sc[5] * sc[22];

  // reaction 203: C2H3 + C2H5 <=> CH3 + aC3H5
  qf[203] = sc[19] * sc[21];
  qr[203] = sc[10] * sc[28];

  // reaction 204: C2H6 + H <=> C2H5 + H2
  qf[204] = sc[2] * sc[22];
  qr[204] = sc[6] * sc[21];

  // reaction 205: C2H6 + O <=> C2H5 + OH
  qf[205] = sc[3] * sc[22];
  qr[205] = sc[4] * sc[21];

  // reaction 206: C2H6 + OH <=> C2H5 + H2O
  qf[206] = sc[4] * sc[22];
  qr[206] = sc[7] * sc[21];

  // reaction 207: C2H6 + CH2* <=> C2H5 + CH3
  qf[207] = sc[22] * sc_qss[3];
  qr[207] = sc[10] * sc[21];

  // reaction 208: C2H6 + CH3 <=> C2H5 + CH4
  qf[208] = sc[10] * sc[22];
  qr[208] = sc[11] * sc[21];

  // reaction 209: CH3O2 + HO2 <=> CH2O + H2O + O2
  qf[209] = sc[5] * sc[37];
  qr[209] = sc[7] * sc[9] * sc[13];

  // reaction 210: 2 CH3O2 <=> CH2O + CH3OH + O2
  qf[210] = (sc[37] * sc[37]);
  qr[210] = sc[9] * sc[13] * sc[15];

  // reaction 211: 2 CH3O2 <=> 2 CH3O + O2
  qf[211] = (sc[37] * sc[37]);
  qr[211] = sc[9] * (sc[14] * sc[14]);

  // reaction 212: CH3 + CH3O2 <=> 2 CH3O
  qf[212] = sc[10] * sc[37];
  qr[212] = (sc[14] * sc[14]);

  // reaction 213: CH3O2 + OH <=> CH3OH + O2
  qf[213] = sc[4] * sc[37];
  qr[213] = sc[9] * sc[15];

  // reaction 214: CH3O2 + H <=> CH3O + OH
  qf[214] = sc[2] * sc[37];
  qr[214] = sc[4] * sc[14];

  // reaction 215: CH3O2 + O <=> CH3O + O2
  qf[215] = sc[3] * sc[37];
  qr[215] = sc[9] * sc[14];

  // reaction 216: H + aC3H4 <=> aC3H5
  qf[216] = sc[2] * sc[27];
  qr[216] = sc[28];

  // reaction 217: O + aC3H4 <=> C2H4 + CO
  qf[217] = sc[3] * sc[27];
  qr[217] = sc[16] * sc[20];

  // reaction 218: H + aC3H5 <=> H2 + aC3H4
  qf[218] = sc[2] * sc[28];
  qr[218] = sc[6] * sc[27];

  // reaction 219: OH + aC3H5 <=> H2O + aC3H4
  qf[219] = sc[4] * sc[28];
  qr[219] = sc[7] * sc[27];

  // reaction 220: O2 + aC3H5 <=> HO2 + aC3H4
  qf[220] = sc[9] * sc[28];
  qr[220] = sc[5] * sc[27];

  // reaction 221: HO2 + aC3H5 <=> C3H6 + O2
  qf[221] = sc[5] * sc[28];
  qr[221] = sc[9] * sc[29];

  // reaction 222: HO2 + aC3H5 <=> C2H3 + CH2O + OH
  qf[222] = sc[5] * sc[28];
  qr[222] = sc[4] * sc[13] * sc[19];

  // reaction 223: HCO + aC3H5 <=> C3H6 + CO
  qf[223] = sc[12] * sc[28];
  qr[223] = sc[16] * sc[29];

  // reaction 224: CH3 + aC3H5 <=> CH4 + aC3H4
  qf[224] = sc[10] * sc[28];
  qr[224] = sc[11] * sc[27];

  // reaction 225: C3H6 + H <=> C2H4 + CH3
  qf[225] = sc[2] * sc[29];
  qr[225] = sc[10] * sc[20];

  // reaction 226: C3H6 + H <=> H2 + aC3H5
  qf[226] = sc[2] * sc[29];
  qr[226] = sc[6] * sc[28];

  // reaction 227: C3H6 + O <=> CH2CO + CH3 + H
  qf[227] = sc[3] * sc[29];
  qr[227] = sc[2] * sc[10] * sc[24];

  // reaction 228: C3H6 + O <=> C2H5 + HCO
  qf[228] = sc[3] * sc[29];
  qr[228] = sc[12] * sc[21];

  // reaction 229: C3H6 + O <=> OH + aC3H5
  qf[229] = sc[3] * sc[29];
  qr[229] = sc[4] * sc[28];

  // reaction 230: C3H6 + OH <=> H2O + aC3H5
  qf[230] = sc[4] * sc[29];
  qr[230] = sc[7] * sc[28];

  // reaction 231: C3H6 + HO2 <=> H2O2 + aC3H5
  qf[231] = sc[5] * sc[29];
  qr[231] = sc[8] * sc[28];

  // reaction 232: C3H6 + CH3 <=> CH4 + aC3H5
  qf[232] = sc[10] * sc[29];
  qr[232] = sc[11] * sc[28];

  // reaction 233: H + nC3H7 <=> C2H5 + CH3
  qf[233] = sc[2] * sc[30];
  qr[233] = sc[10] * sc[21];

  // reaction 234: H + nC3H7 <=> C3H6 + H2
  qf[234] = sc[2] * sc[30];
  qr[234] = sc[6] * sc[29];

  // reaction 235: O + nC3H7 <=> C2H5 + CH2O
  qf[235] = sc[3] * sc[30];
  qr[235] = sc[13] * sc[21];

  // reaction 236: OH + nC3H7 <=> C3H6 + H2O
  qf[236] = sc[4] * sc[30];
  qr[236] = sc[7] * sc[29];

  // reaction 237: O2 + nC3H7 <=> C3H6 + HO2
  qf[237] = sc[9] * sc[30];
  qr[237] = sc[5] * sc[29];

  // reaction 238: HO2 + nC3H7 <=> C2H5 + CH2O + OH
  qf[238] = sc[5] * sc[30];
  qr[238] = sc[4] * sc[13] * sc[21];

  // reaction 239: CH3 + nC3H7 <=> C3H6 + CH4
  qf[239] = sc[10] * sc[30];
  qr[239] = sc[11] * sc[29];

  // reaction 240: C4H81 + H <=> C2H4 + C2H5
  qf[240] = sc[2] * sc[31];
  qr[240] = sc[20] * sc[21];

  // reaction 241: C4H81 + H <=> C3H6 + CH3
  qf[241] = sc[2] * sc[31];
  qr[241] = sc[10] * sc[29];

  // reaction 242: C4H81 + O <=> HCO + nC3H7
  qf[242] = sc[3] * sc[31];
  qr[242] = sc[12] * sc[30];

  // reaction 243: N + NO <=> N2 + O
  qf[243] = sc[32] * sc_qss[5];
  qr[243] = sc[1] * sc[3];

  // reaction 244: N + O2 <=> NO + O
  qf[244] = sc[9] * sc[32];
  qr[244] = sc[3] * sc_qss[5];

  // reaction 245: N + OH <=> H + NO
  qf[245] = sc[4] * sc[32];
  qr[245] = sc[2] * sc_qss[5];

  // reaction 246: HO2 + NO <=> NO2 + OH
  qf[246] = sc[5] * sc_qss[5];
  qr[246] = sc[4] * sc[33];

  // reaction 247: NO2 + O <=> NO + O2
  qf[247] = sc[3] * sc[33];
  qr[247] = sc[9] * sc_qss[5];

  // reaction 248: H + NO2 <=> NO + OH
  qf[248] = sc[2] * sc[33];
  qr[248] = sc[4] * sc_qss[5];

  // reaction 249: NCO + O <=> CO + NO
  qf[249] = sc[3] * sc[36];
  qr[249] = sc[16] * sc_qss[5];

  // reaction 250: NCO + OH <=> CO + H + NO
  qf[250] = sc[4] * sc[36];
  qr[250] = sc[2] * sc[16] * sc_qss[5];

  // reaction 251: N + NCO <=> CO + N2
  qf[251] = sc[32] * sc[36];
  qr[251] = sc[1] * sc[16];

  // reaction 252: NCO + O2 <=> CO2 + NO
  qf[252] = sc[9] * sc[36];
  qr[252] = sc[17] * sc_qss[5];

  // reaction 253: NCO + NO <=> CO2 + N2
  qf[253] = sc[36] * sc_qss[5];
  qr[253] = sc[1] * sc[17];

  // reaction 254: C + NO <=> CO + N
  qf[254] = sc_qss[0] * sc_qss[5];
  qr[254] = sc[16] * sc[32];

  // reaction 255: CH + NO <=> H + NCO
  qf[255] = sc_qss[1] * sc_qss[5];
  qr[255] = sc[2] * sc[36];

  // reaction 256: CH + NO <=> HCO + N
  qf[256] = sc_qss[1] * sc_qss[5];
  qr[256] = sc[12] * sc[32];

  // reaction 257: CH2 + NO <=> H + HNCO
  qf[257] = sc_qss[2] * sc_qss[5];
  qr[257] = sc[2] * sc[35];

  // reaction 258: CH2 + NO <=> H + HCNO
  qf[258] = sc_qss[2] * sc_qss[5];
  qr[258] = sc[2] * sc[34];

  // reaction 259: CH2* + NO <=> H + HNCO
  qf[259] = sc_qss[3] * sc_qss[5];
  qr[259] = sc[2] * sc[35];

  // reaction 260: CH2* + NO <=> H + HCNO
  qf[260] = sc_qss[3] * sc_qss[5];
  qr[260] = sc[2] * sc[34];

  // reaction 261: HNCO + O <=> NCO + OH
  qf[261] = sc[3] * sc[35];
  qr[261] = sc[4] * sc[36];

  // reaction 262: H + HNCO <=> H2 + NCO
  qf[262] = sc[2] * sc[35];
  qr[262] = sc[6] * sc[36];

  // reaction 263: HNCO + OH <=> H2O + NCO
  qf[263] = sc[4] * sc[35];
  qr[263] = sc[7] * sc[36];

  // reaction 264: H + HCNO <=> H + HNCO
  qf[264] = sc[2] * sc[34];
  qr[264] = sc[2] * sc[35];

  // reaction 265: HCCO + NO <=> CO + HCNO
  qf[265] = sc[23] * sc_qss[5];
  qr[265] = sc[16] * sc[34];

  // reaction 266: CO2 + N <=> CO + NO
  qf[266] = sc[17] * sc[32];
  qr[266] = sc[16] * sc_qss[5];

  // reaction 267: CH3 + NO2 <=> CH3O + NO
  qf[267] = sc[10] * sc[33];
  qr[267] = sc[14] * sc_qss[5];

  // reaction 268: CH3O2 + NO <=> CH3O + NO2
  qf[268] = sc[37] * sc_qss[5];
  qr[268] = sc[14] * sc[33];

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 38; ++i) {
    mixture += sc[i];
  }

  for (int i = 0; i < 6; ++i) {
    mixture += sc_qss[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[38];
  gibbs(g_RT, tc);
  amrex::Real g_RT_qss[6];
  gibbs_qss(g_RT_qss, tc);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 * invT;
  amrex::Real refCinv = 1 / refC;

  // Evaluate the kfs
  amrex::Real k_f, Corr;
  amrex::Real redP, F, logPred, logFcent, troe_c, troe_n, troe, F_troe;

  // reaction 0:  H + O2 (+M) <=> HO2 (+M)
  k_f = 5116000 * exp((0.44) * tc[0]);
  Corr = mixture + (-0.6) * sc[0] + (10.89) * sc[7] + (-0.15) * sc[9] +
         (0.0900000000000001) * sc[16] + (1.18) * sc[17];
  redP = Corr / k_f * 63280000 * exp(-1.4 * tc[0]);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent =
    log10((0.5) * exp(-tc[1] * 1e+30) + 0.5 * exp(-tc[1] * 1e-30) + 0.0);
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[0] *= Corr * k_f;
  qr[0] *= Corr * k_f * exp(-(g_RT[2] - g_RT[5] + g_RT[9])) * (refC);
  // reaction 1:  2 OH (+M) <=> H2O2 (+M)
  k_f = 111000000 * exp((-0.37) * tc[0]);
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + (0.75) * sc[16] +
         (2.6) * sc[17];
  redP = Corr / k_f * 201000 * exp(-0.584 * tc[0] - (-1153.87581469022) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2654) * exp(-tc[1] * 0.0106382978723404) +
    0.7346 * exp(-tc[1] * 0.000569476082004556) + exp(-5182 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[1] *= Corr * k_f;
  qr[1] *= Corr * k_f * exp(-(2.000000 * g_RT[4] - g_RT[8])) * (refC);
  // reaction 2:  CO + H2 (+M) <=> CH2O (+M)
  k_f = 43 * exp((1.5) * tc[0] - (40056.0465980557) * invT);
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
         (0.5) * sc[16] + sc[17] + (2) * sc[22];
  redP = Corr / k_f * 5.07e+15 * exp(-3.42 * tc[0] - (42446.3257606281) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.0679999999999999) * exp(-tc[1] * 0.0050761421319797) +
    0.932 * exp(-tc[1] * 0.000649350649350649) + exp(-10300 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[2] *= Corr * k_f;
  qr[2] *= Corr * k_f * exp(-(g_RT[6] - g_RT[13] + g_RT[16])) * (refC);
  // reaction 3:  CH + CO (+M) <=> HCCO (+M)
  k_f = 50000000;
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
         (0.5) * sc[16] + sc[17] + (2) * sc[22];
  redP = Corr / k_f * 2.69e+16 * exp(-3.74 * tc[0] - (974.227464997937) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.4243) * exp(-tc[1] * 0.00421940928270042) +
    0.5757 * exp(-tc[1] * 0.000605326876513317) + exp(-5069 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[3] *= Corr * k_f;
  qr[3] *= Corr * k_f * exp(-(g_RT[16] - g_RT[23] + g_RT_qss[1])) * (refC);
  // reaction 4:  H + HCO (+M) <=> CH2O (+M)
  k_f = 1090000 * exp((0.48) * tc[0] - (-130.836333109227) * invT);
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
         (0.5) * sc[16] + sc[17] + (2) * sc[22];
  redP =
    Corr / k_f * 1350000000000 * exp(-2.57 * tc[0] - (717.083748771726) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2176) * exp(-tc[1] * 0.003690036900369) +
    0.7824 * exp(-tc[1] * 0.000362976406533575) + exp(-6570 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[4] *= Corr * k_f;
  qr[4] *= Corr * k_f * exp(-(g_RT[2] + g_RT[12] - g_RT[13])) * (refC);
  // reaction 5:  CH2 + H (+M) <=> CH3 (+M)
  k_f = 25000000000 * exp((-0.8) * tc[0]);
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
         (0.5) * sc[16] + sc[17] + (2) * sc[22];
  redP = Corr / k_f * 3.2e+15 * exp(-3.14 * tc[0] - (618.956498939805) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.32) * exp(-tc[1] * 0.0128205128205128) +
    0.68 * exp(-tc[1] * 0.00050125313283208) + exp(-5590 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[5] *= Corr * k_f;
  qr[5] *= Corr * k_f * exp(-(g_RT[2] - g_RT[10] + g_RT_qss[2])) * (refC);
  // reaction 6:  CH2 + CO (+M) <=> CH2CO (+M)
  k_f = 810000 * exp((0.5) * tc[0] - (2269.50716277929) * invT);
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
         (0.5) * sc[16] + sc[17] + (2) * sc[22];
  redP = Corr / k_f * 2.69e+21 * exp(-5.11 * tc[0] - (3570.32224388449) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.4093) * exp(-tc[1] * 0.00363636363636364) +
    0.5907 * exp(-tc[1] * 0.000815660685154976) + exp(-5185 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[6] *= Corr * k_f;
  qr[6] *= Corr * k_f * exp(-(g_RT[16] - g_RT[24] + g_RT_qss[2])) * (refC);
  // reaction 7:  CH2* + H2O (+M) <=> CH3OH (+M)
  k_f = 20000000;
  Corr = mixture + sc[6] + (5) * sc[7] + sc[11] + (0.5) * sc[16] + sc[17] +
         (2) * sc[22];
  redP = Corr / k_f * 2.7e+26 * exp(-6.3 * tc[0] - (1559.97166399463) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.8493) * exp(-tc[1] * 0.00746268656716418) +
    0.1507 * exp(-tc[1] * 0.000419639110365086) + exp(-7265 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[7] *= Corr * k_f;
  qr[7] *= Corr * k_f * exp(-(g_RT[7] - g_RT[15] + g_RT_qss[3])) * (refC);
  // reaction 8:  CH2O + H (+M) <=> CH3O (+M)
  k_f = 540000 * exp((0.454) * tc[0] - (1308.36333109227) * invT);
  Corr = mixture + sc[6] + (5) * sc[7] + sc[11] + (0.5) * sc[16] + sc[17] +
         (2) * sc[22];
  redP = Corr / k_f * 2.2e+18 * exp(-4.8 * tc[0] - (2797.88466187424) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.242) * exp(-tc[1] * 0.0106382978723404) +
    0.758 * exp(-tc[1] * 0.000643086816720257) + exp(-4200 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[8] *= Corr * k_f;
  qr[8] *= Corr * k_f * exp(-(g_RT[2] + g_RT[13] - g_RT[14])) * (refC);
  // reaction 9:  CH3 + H (+M) <=> CH4 (+M)
  k_f = 12700000000 * exp((-0.63) * tc[0] - (192.731983003208) * invT);
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
         (0.5) * sc[16] + sc[17] + (2) * sc[22];
  redP =
    Corr / k_f * 2.477e+21 * exp(-4.76 * tc[0] - (1227.84866456352) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.217) * exp(-tc[1] * 0.0135135135135135) +
    0.783 * exp(-tc[1] * 0.000340020401224073) + exp(-6964 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[9] *= Corr * k_f;
  qr[9] *= Corr * k_f * exp(-(g_RT[2] + g_RT[10] - g_RT[11])) * (refC);
  // reaction 10:  CH3 + OH (+M) <=> CH3OH (+M)
  k_f = 63000000;
  Corr = mixture + sc[6] + (5) * sc[7] + sc[11] + (0.5) * sc[16] + sc[17] +
         (2) * sc[22];
  redP = Corr / k_f * 2.7e+26 * exp(-6.3 * tc[0] - (1559.97166399463) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.7895) * exp(-tc[1] * 0.0119760479041916) +
    0.2105 * exp(-tc[1] * 0.000185253797702853) + exp(-8370 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[10] *= Corr * k_f;
  qr[10] *= Corr * k_f * exp(-(g_RT[4] + g_RT[10] - g_RT[15])) * (refC);
  // reaction 11:  2 CH3 (+M) <=> C2H6 (+M)
  k_f = 21200000000 * exp((-0.97) * tc[0] - (311.994332798926) * invT);
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
         (0.5) * sc[16] + sc[17] + (2) * sc[22];
  redP = Corr / k_f * 1.77e+38 * exp(-9.67 * tc[0] - (3130.00766130536) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.4675) * exp(-tc[1] * 0.00662251655629139) +
    0.5325 * exp(-tc[1] * 0.000963391136801541) + exp(-4970 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[11] *= Corr * k_f;
  qr[11] *= Corr * k_f * exp(-(2.000000 * g_RT[10] - g_RT[22])) * (refC);
  // reaction 12:  CH3O + H (+M) <=> CH3OH (+M)
  k_f = 50000000;
  Corr = mixture + sc[6] + (5) * sc[7] + sc[11] + (0.5) * sc[16] + sc[17] +
         (2) * sc[22];
  redP = Corr / k_f * 8.6e+16 * exp(-4 * tc[0] - (1522.23041405928) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.1098) * exp(-tc[1] * 0.00694444444444444) +
    0.8902 * exp(-tc[1] * 0.000352360817477097) + exp(-45569 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[12] *= Corr * k_f;
  qr[12] *= Corr * k_f * exp(-(g_RT[2] + g_RT[14] - g_RT[15])) * (refC);
  // reaction 13:  C2H3 (+M) <=> C2H2 + H (+M)
  k_f = 386000000 * exp((1.62) * tc[0] - (18643.2716780664) * invT);
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
         (0.5) * sc[16] + sc[17] + (2) * sc[18] + (2) * sc[20] + (2) * sc[22];
  redP = Corr / k_f * 2.565e+21 * exp(-3.4 * tc[0] - (18014.5125184767) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (-0.9816) * exp(-tc[1] * 0.000185745862510913) +
    1.9816 * exp(-tc[1] * 0.232926488400261) + exp(0.0795 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[13] *= Corr * k_f;
  qr[13] *= Corr * k_f * exp(-(-g_RT[2] - g_RT[18] + g_RT[19])) * (refCinv);
  // reaction 14:  CH2CO + H (+M) <=> CH2CHO (+M)
  k_f = 330000000 * exp((-0.06) * tc[0] - (4277.34165934012) * invT);
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
         (0.5) * sc[16] + sc[17] + (2) * sc[18] + (2) * sc[20] + (2) * sc[22];
  redP = Corr / k_f * 3.8e+29 * exp(-7.64 * tc[0] - (5988.27832307616) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.663) * exp(-tc[1] * 0.000585823081429408) +
    0.337 * exp(-tc[1] * 0.0003125) + exp(-4131 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[14] *= Corr * k_f;
  qr[14] *= Corr * k_f * exp(-(g_RT[2] + g_RT[24] - g_RT[25])) * (refC);
  // reaction 15:  C2H3 + H (+M) <=> C2H4 (+M)
  k_f = 6080000 * exp((0.27) * tc[0] - (140.900666425322) * invT);
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
         (0.5) * sc[16] + sc[17] + (2) * sc[18] + (2) * sc[20] + (2) * sc[22];
  redP = Corr / k_f * 1.4e+18 * exp(-3.86 * tc[0] - (1670.67933047167) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.218) * exp(-tc[1] * 0.00481927710843374) +
    0.782 * exp(-tc[1] * 0.000375516334960571) + exp(-6095 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[15] *= Corr * k_f;
  qr[15] *= Corr * k_f * exp(-(g_RT[2] + g_RT[19] - g_RT[20])) * (refC);
  // reaction 16:  C2H3 + CH3 (+M) <=> C3H6 (+M)
  k_f = 25000000;
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
         (0.5) * sc[16] + sc[17] + (2) * sc[18] + (2) * sc[20] + (2) * sc[22];
  redP =
    Corr / k_f * 4.27e+46 * exp(-11.94 * tc[0] - (4916.32618157895) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.825) * exp(-tc[1] * 0.000745934656124124) +
    0.175 * exp(-tc[1] * 1.66666666666667e-05) + exp(-10139.8 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[16] *= Corr * k_f;
  qr[16] *= Corr * k_f * exp(-(g_RT[10] + g_RT[19] - g_RT[29])) * (refC);
  // reaction 17:  C2H4 (+M) <=> H2 + H2CC (+M)
  k_f = 8000000000000 * exp((0.44) * tc[0] - (44670.543423485) * invT);
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
         (0.5) * sc[16] + sc[17] + (2) * sc[22];
  redP = Corr / k_f * 7e+44 * exp(-9.31 * tc[0] - (50251.2162472593) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2655) * exp(-tc[1] * 0.00555555555555556) +
    0.7345 * exp(-tc[1] * 0.000966183574879227) + exp(-5417 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[17] *= Corr * k_f;
  qr[17] *= Corr * k_f * exp(-(-g_RT[6] + g_RT[20] - g_RT_qss[4])) * (refCinv);
  // reaction 18:  C2H4 + H (+M) <=> C2H5 (+M)
  k_f = 1367 * exp((1.463) * tc[0] - (681.858582165395) * invT);
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
         (0.5) * sc[16] + sc[17] + (2) * sc[22];
  redP =
    Corr / k_f * 2.027e+27 * exp(-6.642 * tc[0] - (2903.05694502743) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (1.569) * exp(-tc[1] * 0.00334448160535117) +
    -0.569 * exp(-tc[1] * 0.000109325461900077) + exp(152.4 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[18] *= Corr * k_f;
  qr[18] *= Corr * k_f * exp(-(g_RT[2] + g_RT[20] - g_RT[21])) * (refC);
  // reaction 19:  C2H5 + H (+M) <=> C2H6 (+M)
  k_f = 521000000000 * exp((-0.99) * tc[0] - (795.082331971457) * invT);
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
         (0.5) * sc[16] + sc[17] + (2) * sc[22];
  redP = Corr / k_f * 1.99e+29 * exp(-7.08 * tc[0] - (3364.00341090455) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.1578) * exp(-tc[1] * 0.008) +
    0.8422 * exp(-tc[1] * 0.000450653447498873) + exp(-6882 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[19] *= Corr * k_f;
  qr[19] *= Corr * k_f * exp(-(g_RT[2] + g_RT[21] - g_RT[22])) * (refC);
  // reaction 20:  C2H3 + C2H5 (+M) <=> C4H81 (+M)
  k_f = 15000000;
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
         (0.5) * sc[16] + sc[17] + (2) * sc[22];
  redP = Corr / k_f * 1.55e+44 * exp(-11.79 * tc[0] - (4521.1501339225) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.802) * exp(-tc[1] * 0.000439000834101585) +
    0.198 * exp(-tc[1] * 1.66666666666667e-05) + exp(-5723.2 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[20] *= Corr * k_f;
  qr[20] *= Corr * k_f * exp(-(g_RT[19] + g_RT[21] - g_RT[31])) * (refC);
  // reaction 21:  CH3 + O2 (+M) <=> CH3O2 (+M)
  k_f = 783 * exp((1.2) * tc[0]);
  Corr = mixture;
  redP = Corr / k_f * 58000000000000 * exp(-3.3 * tc[0]);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent =
    log10((0.336) * exp(-tc[1] * 1e-05) + 0.664 * exp(-tc[1] * 0.1) + 0.0);
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[21] *= Corr * k_f;
  qr[21] *= Corr * k_f * exp(-(g_RT[9] + g_RT[10] - g_RT[37])) * (refC);
  // reaction 22:  H + aC3H5 (+M) <=> C3H6 (+M)
  k_f = 200000000;
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
         (0.5) * sc[16] + sc[17] + (2) * sc[22];
  redP = Corr / k_f * 1.33e+48 * exp(-12 * tc[0] - (3003.09641818941) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.98) * exp(-tc[1] * 0.000911909538573774) +
    0.02 * exp(-tc[1] * 0.000911909538573774) + exp(-6859.5 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[22] *= Corr * k_f;
  qr[22] *= Corr * k_f * exp(-(g_RT[2] + g_RT[28] - g_RT[29])) * (refC);
  // reaction 23:  CH3 + aC3H5 (+M) <=> C4H81 (+M)
  k_f = 100000000 * exp((-0.32) * tc[0] - (-131.993731440578) * invT);
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
         (0.5) * sc[16] + sc[17] + (2) * sc[22];
  redP = Corr / k_f * 3.91e+48 * exp(-12.81 * tc[0] - (3145.1041612795) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.896) * exp(-tc[1] * 0.00062266500622665) +
    0.104 * exp(-tc[1] * 1.66666666666667e-05) + exp(-6118.4 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[23] *= Corr * k_f;
  qr[23] *= Corr * k_f * exp(-(g_RT[10] + g_RT[28] - g_RT[31])) * (refC);
  // reaction 24:  C3H6 + H (+M) <=> nC3H7 (+M)
  k_f = 13300000 * exp(-(1640.83858218945) * invT);
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
         (0.5) * sc[16] + sc[17] + (2) * sc[22];
  redP = Corr / k_f * 6.26e+26 * exp(-6.66 * tc[0] - (3522.51666063304) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(+exp(-tc[1] * 0.000763358778625954) + exp(-48097 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[24] *= Corr * k_f;
  qr[24] *= Corr * k_f * exp(-(g_RT[2] + g_RT[29] - g_RT[30])) * (refC);
  // reaction 25:  CO + O (+M) <=> CO2 (+M)
  k_f = 13620 * exp(-(1199.66853127845) * invT);
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (11) * sc[7] + (0.75) * sc[16] +
         (2.6) * sc[17];
  redP =
    Corr / k_f * 1173000000000 * exp(-2.79 * tc[0] - (2108.98104638758) * invT);
  Corr = redP / (1. + redP);
  qf[25] *= Corr * k_f;
  qr[25] *= Corr * k_f * exp(-(g_RT[3] + g_RT[16] - g_RT[17])) * (refC);
  // reaction 26:  C2H2 (+M) <=> H2CC (+M)
  k_f = 800000000000000 * exp((-0.52) * tc[0] - (25538.2457895895) * invT);
  Corr = mixture + sc[6] + (5) * sc[7] + sc[11] + (0.5) * sc[16] + sc[17] +
         (1.5) * sc[18] + (1.5) * sc[20] + (2) * sc[22];
  redP =
    Corr / k_f * 2450000000 * exp(-0.64 * tc[0] - (25009.8682904946) * invT);
  Corr = redP / (1. + redP);
  qf[26] *= Corr * k_f;
  qr[26] *= Corr * k_f * exp(-(g_RT[18] - g_RT_qss[4]));
  // reaction 27:  2 H + M <=> H2 + M
  k_f = 1780000 * exp((-1) * tc[0]);
  Corr =
    mixture + (-0.37) * sc[0] + (-1) * sc[6] + (-1) * sc[7] + (-1) * sc[17];
  qf[27] *= Corr * k_f;
  qr[27] *= Corr * k_f * exp(-(2.000000 * g_RT[2] - g_RT[6])) * (refC);
  // reaction 28:  2 H + H2 <=> H2 + H2
  k_f = 90000 * exp((-0.6) * tc[0]);
  qf[28] *= k_f;
  qr[28] *= k_f * exp(-(2.000000 * g_RT[2] - g_RT[6])) * (refC);
  // reaction 29:  2 H + H2O <=> H2 + H2O
  k_f = 56240000 * exp((-1.25) * tc[0]);
  qf[29] *= k_f;
  qr[29] *= k_f * exp(-(2.000000 * g_RT[2] - g_RT[6])) * (refC);
  // reaction 30:  2 H + CO2 <=> H2 + CO2
  k_f = 550000000 * exp((-2) * tc[0]);
  qf[30] *= k_f;
  qr[30] *= k_f * exp(-(2.000000 * g_RT[2] - g_RT[6])) * (refC);
  // reaction 31:  H + OH + M <=> H2O + M
  k_f = 44000000000 * exp((-2) * tc[0]);
  Corr = mixture + (-0.62) * sc[0] + sc[6] + (5.3) * sc[7] + (0.75) * sc[16] +
         (2.6) * sc[17];
  qf[31] *= Corr * k_f;
  qr[31] *= Corr * k_f * exp(-(g_RT[2] + g_RT[4] - g_RT[7])) * (refC);
  // reaction 32:  H + O + M <=> OH + M
  k_f = 9428000 * exp((-1) * tc[0]);
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (11) * sc[7] + (0.75) * sc[16] +
         (2.6) * sc[17];
  qf[32] *= Corr * k_f;
  qr[32] *= Corr * k_f * exp(-(g_RT[2] + g_RT[3] - g_RT[4])) * (refC);
  // reaction 33:  2 O + M <=> O2 + M
  k_f = 120000 * exp((-1) * tc[0]);
  Corr = mixture + (-0.17) * sc[0] + (1.4) * sc[6] + (14.4) * sc[7] +
         (0.75) * sc[16] + (2.6) * sc[17];
  qf[33] *= Corr * k_f;
  qr[33] *= Corr * k_f * exp(-(2.000000 * g_RT[3] - g_RT[9])) * (refC);
  // reaction 34:  HCO + M <=> CO + H + M
  k_f = 187000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
  Corr = mixture + sc[6] + (-1) * sc[7] + (0.75) * sc[16] + (2.6) * sc[17];
  qf[34] *= Corr * k_f;
  qr[34] *= Corr * k_f * exp(-(-g_RT[2] + g_RT[12] - g_RT[16])) * (refCinv);
  // reaction 35:  HCO + H2O <=> CO + H + H2O
  k_f = 2244000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
  qf[35] *= k_f;
  qr[35] *= k_f * exp(-(-g_RT[2] + g_RT[12] - g_RT[16])) * (refCinv);
  // reaction 36:  NO + O + M <=> NO2 + M
  k_f = 106000000 * exp((-1.41) * tc[0]);
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
         (0.5) * sc[16] + sc[17] + (2) * sc[22];
  qf[36] *= Corr * k_f;
  qr[36] *= Corr * k_f * exp(-(g_RT[3] - g_RT[33] + g_RT_qss[5])) * (refC);
  // reaction 37:  NCO + M <=> CO + N + M
  k_f = 310000000 * exp(-(27198.8607867451) * invT);
  Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
         (0.5) * sc[16] + sc[17] + (2) * sc[22];
  qf[37] *= Corr * k_f;
  qr[37] *= Corr * k_f * exp(-(-g_RT[16] - g_RT[32] + g_RT[36])) * (refCinv);
  // reaction 38:  H + O2 <=> O + OH
  k_f = 26440000000 * exp((-0.6707) * tc[0] - (8575.31520197823) * invT);
  qf[38] *= k_f;
  qr[38] *= k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[4] + g_RT[9]));
  // reaction 39:  H2 + O <=> H + OH
  k_f = 0.04589 * exp((2.7) * tc[0] - (3150.13632793755) * invT);
  qf[39] *= k_f;
  qr[39] *= k_f * exp(-(-g_RT[2] + g_RT[3] - g_RT[4] + g_RT[6]));
  // reaction 40:  H2 + OH <=> H + H2O
  k_f = 173.4 * exp((1.51) * tc[0] - (1726.03316371019) * invT);
  qf[40] *= k_f;
  qr[40] *= k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[6] - g_RT[7]));
  // reaction 41:  2 OH <=> H2O + O
  k_f = 0.03973 * exp((2.4) * tc[0] - (-1061.78716484796) * invT);
  qf[41] *= k_f;
  qr[41] *= k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[4] - g_RT[7]));
  // reaction 42:  H2 + O2 <=> H + HO2
  k_f = 0.5916 * exp((2.433) * tc[0] - (26923.0980538841) * invT);
  qf[42] *= k_f;
  qr[42] *= k_f * exp(-(-g_RT[2] - g_RT[5] + g_RT[6] + g_RT[9]));
  // reaction 43:  H + HO2 <=> H2O + O
  k_f = 3970000 * exp(-(337.658382754967) * invT);
  qf[43] *= k_f;
  qr[43] *= k_f * exp(-(g_RT[2] - g_RT[3] + g_RT[5] - g_RT[7]));
  // reaction 44:  H + HO2 <=> 2 OH
  k_f = 74850000 * exp(-(148.448916412392) * invT);
  qf[44] *= k_f;
  qr[44] *= k_f * exp(-(g_RT[2] - 2.000000 * g_RT[4] + g_RT[5]));
  // reaction 45:  HO2 + O <=> O2 + OH
  k_f = 40000000;
  qf[45] *= k_f;
  qr[45] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[5] - g_RT[9]));
  // reaction 46:  2 HO2 <=> H2O2 + O2
  k_f = 130000 * exp(-(-820.243165261693) * invT);
  qf[46] *= k_f;
  qr[46] *= k_f * exp(-(2.000000 * g_RT[5] - g_RT[8] - g_RT[9]));
  // reaction 47:  2 HO2 <=> H2O2 + O2
  k_f = 365800000 * exp(-(6038.59998965664) * invT);
  qf[47] *= k_f;
  qr[47] *= k_f * exp(-(2.000000 * g_RT[5] - g_RT[8] - g_RT[9]));
  // reaction 48:  HO2 + OH <=> H2O + O2
  k_f = 1410000000000 * exp((-1.76) * tc[0] - (30.1929999482832) * invT);
  qf[48] *= k_f;
  qr[48] *= k_f * exp(-(g_RT[4] + g_RT[5] - g_RT[7] - g_RT[9]));
  // reaction 49:  HO2 + OH <=> H2O + O2
  k_f = 1.12e+79 * exp((-22.3) * tc[0] - (13536.528310147) * invT);
  qf[49] *= k_f;
  qr[49] *= k_f * exp(-(g_RT[4] + g_RT[5] - g_RT[7] - g_RT[9]));
  // reaction 50:  HO2 + OH <=> H2O + O2
  k_f = 5.37e+64 * exp((-16.72) * tc[0] - (16555.8283049753) * invT);
  qf[50] *= k_f;
  qr[50] *= k_f * exp(-(g_RT[4] + g_RT[5] - g_RT[7] - g_RT[9]));
  // reaction 51:  HO2 + OH <=> H2O + O2
  k_f = 2510000 * exp((2) * tc[0] - (20128.6666321888) * invT);
  qf[51] *= k_f;
  qr[51] *= k_f * exp(-(g_RT[4] + g_RT[5] - g_RT[7] - g_RT[9]));
  // reaction 52:  HO2 + OH <=> H2O + O2
  k_f = 1e+130 * exp((-40) * tc[0] - (17511.9399700042) * invT);
  qf[52] *= k_f;
  qr[52] *= k_f * exp(-(g_RT[4] + g_RT[5] - g_RT[7] - g_RT[9]));
  // reaction 53:  H + H2O2 <=> H2 + HO2
  k_f = 6.05 * exp((2) * tc[0] - (2616.72666218454) * invT);
  qf[53] *= k_f;
  qr[53] *= k_f * exp(-(g_RT[2] - g_RT[5] - g_RT[6] + g_RT[8]));
  // reaction 54:  H + H2O2 <=> H2O + OH
  k_f = 24100000 * exp(-(1997.77016324474) * invT);
  qf[54] *= k_f;
  qr[54] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[7] + g_RT[8]));
  // reaction 55:  H2O2 + O <=> HO2 + OH
  k_f = 9.63 * exp((2) * tc[0] - (1997.77016324474) * invT);
  qf[55] *= k_f;
  qr[55] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[5] + g_RT[8]));
  // reaction 56:  H2O2 + OH <=> H2O + HO2
  k_f = 2000000 * exp(-(214.873516298615) * invT);
  qf[56] *= k_f;
  qr[56] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[7] + g_RT[8]));
  // reaction 57:  H2O2 + OH <=> H2O + HO2
  k_f = 2.67e+35 * exp((-7) * tc[0] - (18920.9466342575) * invT);
  qf[57] *= k_f;
  qr[57] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[7] + g_RT[8]));
  // reaction 58:  CO + OH <=> CO2 + H
  k_f = 0.07046 * exp((2.053) * tc[0] - (-178.979071526765) * invT);
  qf[58] *= k_f;
  qr[58] *= k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[16] - g_RT[17]));
  // reaction 59:  CO + OH <=> CO2 + H
  k_f = 5757000 * exp((-0.664) * tc[0] - (166.98238621398) * invT);
  qf[59] *= k_f;
  qr[59] *= k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[16] - g_RT[17]));
  // reaction 60:  CO + O2 <=> CO2 + O
  k_f = 1119000 * exp(-(24003.4349588851) * invT);
  qf[60] *= k_f;
  qr[60] *= k_f * exp(-(-g_RT[3] + g_RT[9] + g_RT[16] - g_RT[17]));
  // reaction 61:  CO + HO2 <=> CO2 + OH
  k_f = 0.157 * exp((2.18) * tc[0] - (9029.02038003442) * invT);
  qf[61] *= k_f;
  qr[61] *= k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[16] - g_RT[17]));
  // reaction 62:  H + HCO <=> CO + H2
  k_f = 120000000;
  qf[62] *= k_f;
  qr[62] *= k_f * exp(-(g_RT[2] - g_RT[6] + g_RT[12] - g_RT[16]));
  // reaction 63:  HCO + O <=> CO + OH
  k_f = 30000000;
  qf[63] *= k_f;
  qr[63] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[12] - g_RT[16]));
  // reaction 64:  HCO + O <=> CO2 + H
  k_f = 30000000;
  qf[64] *= k_f;
  qr[64] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[12] - g_RT[17]));
  // reaction 65:  HCO + OH <=> CO + H2O
  k_f = 30200000;
  qf[65] *= k_f;
  qr[65] *= k_f * exp(-(g_RT[4] - g_RT[7] + g_RT[12] - g_RT[16]));
  // reaction 66:  HCO + O2 <=> CO + HO2
  k_f = 12040 * exp((0.807) * tc[0] - (-365.838516040031) * invT);
  qf[66] *= k_f;
  qr[66] *= k_f * exp(-(-g_RT[5] + g_RT[9] + g_RT[12] - g_RT[16]));
  // reaction 67:  C + OH <=> CO + H
  k_f = 50000000;
  qf[67] *= k_f;
  qr[67] *= k_f * exp(-(-g_RT[2] + g_RT[4] - g_RT[16] + g_RT_qss[0]));
  // reaction 68:  C + O2 <=> CO + O
  k_f = 58000000 * exp(-(289.852799503519) * invT);
  qf[68] *= k_f;
  qr[68] *= k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[16] + g_RT_qss[0]));
  // reaction 69:  CH + H <=> C + H2
  k_f = 110000000;
  qf[69] *= k_f;
  qr[69] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT_qss[0] + g_RT_qss[1]));
  // reaction 70:  CH + O <=> CO + H
  k_f = 57000000;
  qf[70] *= k_f;
  qr[70] *= k_f * exp(-(-g_RT[2] + g_RT[3] - g_RT[16] + g_RT_qss[1]));
  // reaction 71:  CH + OH <=> H + HCO
  k_f = 30000000;
  qf[71] *= k_f;
  qr[71] *= k_f * exp(-(-g_RT[2] + g_RT[4] - g_RT[12] + g_RT_qss[1]));
  // reaction 72:  CH + H2 <=> CH2 + H
  k_f = 110.7 * exp((1.79) * tc[0] - (840.371831893882) * invT);
  qf[72] *= k_f;
  qr[72] *= k_f * exp(-(-g_RT[2] + g_RT[6] + g_RT_qss[1] - g_RT_qss[2]));
  // reaction 73:  CH + H2O <=> CH2O + H
  k_f = 5710000 * exp(-(-379.928582682563) * invT);
  qf[73] *= k_f;
  qr[73] *= k_f * exp(-(-g_RT[2] + g_RT[7] - g_RT[13] + g_RT_qss[1]));
  // reaction 74:  CH + O2 <=> HCO + O
  k_f = 33000000;
  qf[74] *= k_f;
  qr[74] *= k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[12] + g_RT_qss[1]));
  // reaction 75:  CH + CO2 <=> CO + HCO
  k_f = 3400000 * exp(-(347.219499405257) * invT);
  qf[75] *= k_f;
  qr[75] *= k_f * exp(-(-g_RT[12] - g_RT[16] + g_RT[17] + g_RT_qss[1]));
  // reaction 76:  CH2 + O <=> H + HCO
  k_f = 80000000;
  qf[76] *= k_f;
  qr[76] *= k_f * exp(-(-g_RT[2] + g_RT[3] - g_RT[12] + g_RT_qss[2]));
  // reaction 77:  CH2 + OH <=> CH2O + H
  k_f = 20000000;
  qf[77] *= k_f;
  qr[77] *= k_f * exp(-(-g_RT[2] + g_RT[4] - g_RT[13] + g_RT_qss[2]));
  // reaction 78:  CH2 + OH <=> CH + H2O
  k_f = 11.3 * exp((2) * tc[0] - (1509.64999741416) * invT);
  qf[78] *= k_f;
  qr[78] *= k_f * exp(-(g_RT[4] - g_RT[7] - g_RT_qss[1] + g_RT_qss[2]));
  // reaction 79:  CH2 + H2 <=> CH3 + H
  k_f = 0.5 * exp((2) * tc[0] - (3638.25649376812) * invT);
  qf[79] *= k_f;
  qr[79] *= k_f * exp(-(-g_RT[2] + g_RT[6] - g_RT[10] + g_RT_qss[2]));
  // reaction 80:  CH2 + O2 <=> HCO + OH
  k_f = 10600000 * exp(-(754.82499870708) * invT);
  qf[80] *= k_f;
  qr[80] *= k_f * exp(-(-g_RT[4] + g_RT[9] - g_RT[12] + g_RT_qss[2]));
  // reaction 81:  CH2 + O2 <=> CO2 + 2 H
  k_f = 2640000 * exp(-(754.82499870708) * invT);
  qf[81] *= k_f;
  qr[81] *= k_f *
            exp(-(-2.000000 * g_RT[2] + g_RT[9] - g_RT[17] + g_RT_qss[2])) *
            (refCinv);
  // reaction 82:  CH2 + HO2 <=> CH2O + OH
  k_f = 20000000;
  qf[82] *= k_f;
  qr[82] *= k_f * exp(-(-g_RT[4] + g_RT[5] - g_RT[13] + g_RT_qss[2]));
  // reaction 83:  CH + CH2 <=> C2H2 + H
  k_f = 40000000;
  qf[83] *= k_f;
  qr[83] *= k_f * exp(-(-g_RT[2] - g_RT[18] + g_RT_qss[1] + g_RT_qss[2]));
  // reaction 84:  2 CH2 <=> C2H2 + H2
  k_f = 32000000;
  qf[84] *= k_f;
  qr[84] *= k_f * exp(-(-g_RT[6] - g_RT[18] + 2.000000 * g_RT_qss[2]));
  // reaction 85:  CH2* + N2 <=> CH2 + N2
  k_f = 15000000 * exp(-(301.929999482832) * invT);
  qf[85] *= k_f;
  qr[85] *= k_f * exp(-(g_RT[1] - g_RT[1] - g_RT_qss[2] + g_RT_qss[3]));
  // reaction 86:  AR + CH2* <=> AR + CH2
  k_f = 9000000 * exp(-(301.929999482832) * invT);
  qf[86] *= k_f;
  qr[86] *= k_f * exp(-(g_RT[0] - g_RT[0] - g_RT_qss[2] + g_RT_qss[3]));
  // reaction 87:  CH2* + H <=> CH + H2
  k_f = 30000000;
  qf[87] *= k_f;
  qr[87] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT_qss[1] + g_RT_qss[3]));
  // reaction 88:  CH2* + O <=> CO + H2
  k_f = 15000000;
  qf[88] *= k_f;
  qr[88] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[16] + g_RT_qss[3]));
  // reaction 89:  CH2* + O <=> H + HCO
  k_f = 15000000;
  qf[89] *= k_f;
  qr[89] *= k_f * exp(-(-g_RT[2] + g_RT[3] - g_RT[12] + g_RT_qss[3]));
  // reaction 90:  CH2* + OH <=> CH2O + H
  k_f = 30000000;
  qf[90] *= k_f;
  qr[90] *= k_f * exp(-(-g_RT[2] + g_RT[4] - g_RT[13] + g_RT_qss[3]));
  // reaction 91:  CH2* + H2 <=> CH3 + H
  k_f = 70000000;
  qf[91] *= k_f;
  qr[91] *= k_f * exp(-(-g_RT[2] + g_RT[6] - g_RT[10] + g_RT_qss[3]));
  // reaction 92:  CH2* + O2 <=> CO + H + OH
  k_f = 28000000;
  qf[92] *= k_f;
  qr[92] *= k_f *
            exp(-(-g_RT[2] - g_RT[4] + g_RT[9] - g_RT[16] + g_RT_qss[3])) *
            (refCinv);
  // reaction 93:  CH2* + O2 <=> CO + H2O
  k_f = 12000000;
  qf[93] *= k_f;
  qr[93] *= k_f * exp(-(-g_RT[7] + g_RT[9] - g_RT[16] + g_RT_qss[3]));
  // reaction 94:  CH2* + H2O <=> CH2 + H2O
  k_f = 30000000;
  qf[94] *= k_f;
  qr[94] *= k_f * exp(-(g_RT[7] - g_RT[7] - g_RT_qss[2] + g_RT_qss[3]));
  // reaction 95:  CH2* + CO <=> CH2 + CO
  k_f = 9000000;
  qf[95] *= k_f;
  qr[95] *= k_f * exp(-(g_RT[16] - g_RT[16] - g_RT_qss[2] + g_RT_qss[3]));
  // reaction 96:  CH2* + CO2 <=> CH2 + CO2
  k_f = 7000000;
  qf[96] *= k_f;
  qr[96] *= k_f * exp(-(g_RT[17] - g_RT[17] - g_RT_qss[2] + g_RT_qss[3]));
  // reaction 97:  CH2* + CO2 <=> CH2O + CO
  k_f = 14000000;
  qf[97] *= k_f;
  qr[97] *= k_f * exp(-(-g_RT[13] - g_RT[16] + g_RT[17] + g_RT_qss[3]));
  // reaction 98:  CH2O + H <=> H2 + HCO
  k_f = 23000 * exp((1.05) * tc[0] - (1648.03458051046) * invT);
  qf[98] *= k_f;
  qr[98] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[12] + g_RT[13]));
  // reaction 99:  CH2O + O <=> HCO + OH
  k_f = 39000000 * exp(-(1781.38699694871) * invT);
  qf[99] *= k_f;
  qr[99] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[12] + g_RT[13]));
  // reaction 100:  CH2O + OH <=> H2O + HCO
  k_f = 3430 * exp((1.18) * tc[0] - (-224.93784961471) * invT);
  qf[100] *= k_f;
  qr[100] *= k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[12] + g_RT[13]));
  // reaction 101:  CH2O + O2 <=> HCO + HO2
  k_f = 100000000 * exp(-(20128.6666321888) * invT);
  qf[101] *= k_f;
  qr[101] *= k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[12] + g_RT[13]));
  // reaction 102:  CH2O + HO2 <=> H2O2 + HCO
  k_f = 1000000 * exp(-(4025.73332643776) * invT);
  qf[102] *= k_f;
  qr[102] *= k_f * exp(-(g_RT[5] - g_RT[8] - g_RT[12] + g_RT[13]));
  // reaction 103:  CH + CH2O <=> CH2CO + H
  k_f = 94600000 * exp(-(-259.156582889431) * invT);
  qf[103] *= k_f;
  qr[103] *= k_f * exp(-(-g_RT[2] + g_RT[13] - g_RT[24] + g_RT_qss[1]));
  // reaction 104:  CH3 + O <=> CH2O + H
  k_f = 84300000;
  qf[104] *= k_f;
  qr[104] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[10] - g_RT[13]));
  // reaction 105:  CH3 + OH <=> CH2 + H2O
  k_f = 56 * exp((1.6) * tc[0] - (2727.43432866158) * invT);
  qf[105] *= k_f;
  qr[105] *= k_f * exp(-(g_RT[4] - g_RT[7] + g_RT[10] - g_RT_qss[2]));
  // reaction 106:  CH3 + OH <=> CH2* + H2O
  k_f = 25010000;
  qf[106] *= k_f;
  qr[106] *= k_f * exp(-(g_RT[4] - g_RT[7] + g_RT[10] - g_RT_qss[3]));
  // reaction 107:  CH3 + O2 <=> CH3O + O
  k_f = 30830000 * exp(-(14492.6399751759) * invT);
  qf[107] *= k_f;
  qr[107] *= k_f * exp(-(-g_RT[3] + g_RT[9] + g_RT[10] - g_RT[14]));
  // reaction 108:  CH3 + O2 <=> CH2O + OH
  k_f = 36000 * exp(-(4498.75699229419) * invT);
  qf[108] *= k_f;
  qr[108] *= k_f * exp(-(-g_RT[4] + g_RT[9] + g_RT[10] - g_RT[13]));
  // reaction 109:  CH3 + HO2 <=> CH4 + O2
  k_f = 1000000;
  qf[109] *= k_f;
  qr[109] *= k_f * exp(-(g_RT[5] - g_RT[9] + g_RT[10] - g_RT[11]));
  // reaction 110:  CH3 + HO2 <=> CH3O + OH
  k_f = 13400000;
  qf[110] *= k_f;
  qr[110] *= k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[10] - g_RT[14]));
  // reaction 111:  CH3 + H2O2 <=> CH4 + HO2
  k_f = 0.0245 * exp((2.47) * tc[0] - (2606.66232886845) * invT);
  qf[111] *= k_f;
  qr[111] *= k_f * exp(-(-g_RT[5] + g_RT[8] + g_RT[10] - g_RT[11]));
  // reaction 112:  C + CH3 <=> C2H2 + H
  k_f = 50000000;
  qf[112] *= k_f;
  qr[112] *= k_f * exp(-(-g_RT[2] + g_RT[10] - g_RT[18] + g_RT_qss[0]));
  // reaction 113:  CH + CH3 <=> C2H3 + H
  k_f = 30000000;
  qf[113] *= k_f;
  qr[113] *= k_f * exp(-(-g_RT[2] + g_RT[10] - g_RT[19] + g_RT_qss[1]));
  // reaction 114:  CH3 + HCO <=> CH4 + CO
  k_f = 8480000;
  qf[114] *= k_f;
  qr[114] *= k_f * exp(-(g_RT[10] - g_RT[11] + g_RT[12] - g_RT[16]));
  // reaction 115:  CH2O + CH3 <=> CH4 + HCO
  k_f = 0.00332 * exp((2.81) * tc[0] - (2948.84966161566) * invT);
  qf[115] *= k_f;
  qr[115] *= k_f * exp(-(g_RT[10] - g_RT[11] - g_RT[12] + g_RT[13]));
  // reaction 116:  CH2 + CH3 <=> C2H4 + H
  k_f = 40000000;
  qf[116] *= k_f;
  qr[116] *= k_f * exp(-(-g_RT[2] + g_RT[10] - g_RT[20] + g_RT_qss[2]));
  // reaction 117:  CH2* + CH3 <=> C2H4 + H
  k_f = 12000000 * exp(-(-286.83349950869) * invT);
  qf[117] *= k_f;
  qr[117] *= k_f * exp(-(-g_RT[2] + g_RT[10] - g_RT[20] + g_RT_qss[3]));
  // reaction 118:  2 CH3 <=> C2H5 + H
  k_f = 4990000 * exp((0.1) * tc[0] - (5334.09665753003) * invT);
  qf[118] *= k_f;
  qr[118] *= k_f * exp(-(-g_RT[2] + 2.000000 * g_RT[10] - g_RT[21]));
  // reaction 119:  CH3 + HCCO <=> C2H4 + CO
  k_f = 50000000;
  qf[119] *= k_f;
  qr[119] *= k_f * exp(-(g_RT[10] - g_RT[16] - g_RT[20] + g_RT[23]));
  // reaction 120:  CH3O + H <=> CH2O + H2
  k_f = 20000000;
  qf[120] *= k_f;
  qr[120] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[13] + g_RT[14]));
  // reaction 121:  CH3O + H <=> CH3 + OH
  k_f = 32000000;
  qf[121] *= k_f;
  qr[121] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[10] + g_RT[14]));
  // reaction 122:  CH3O + H <=> CH2* + H2O
  k_f = 16000000;
  qf[122] *= k_f;
  qr[122] *= k_f * exp(-(g_RT[2] - g_RT[7] + g_RT[14] - g_RT_qss[3]));
  // reaction 123:  CH3O + O <=> CH2O + OH
  k_f = 10000000;
  qf[123] *= k_f;
  qr[123] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[13] + g_RT[14]));
  // reaction 124:  CH3O + OH <=> CH2O + H2O
  k_f = 5000000;
  qf[124] *= k_f;
  qr[124] *= k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[13] + g_RT[14]));
  // reaction 125:  CH3O + O2 <=> CH2O + HO2
  k_f = 4.28e-19 * exp((7.6) * tc[0] - (-1776.35483029066) * invT);
  qf[125] *= k_f;
  qr[125] *= k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[13] + g_RT[14]));
  // reaction 126:  CH4 + H <=> CH3 + H2
  k_f = 660 * exp((1.62) * tc[0] - (5454.86865732316) * invT);
  qf[126] *= k_f;
  qr[126] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[10] + g_RT[11]));
  // reaction 127:  CH4 + O <=> CH3 + OH
  k_f = 1020 * exp((1.5) * tc[0] - (4327.66332592059) * invT);
  qf[127] *= k_f;
  qr[127] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[10] + g_RT[11]));
  // reaction 128:  CH4 + OH <=> CH3 + H2O
  k_f = 100 * exp((1.6) * tc[0] - (1570.03599731073) * invT);
  qf[128] *= k_f;
  qr[128] *= k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[10] + g_RT[11]));
  // reaction 129:  CH + CH4 <=> C2H4 + H
  k_f = 60000000;
  qf[129] *= k_f;
  qr[129] *= k_f * exp(-(-g_RT[2] + g_RT[11] - g_RT[20] + g_RT_qss[1]));
  // reaction 130:  CH2 + CH4 <=> 2 CH3
  k_f = 2.46 * exp((2) * tc[0] - (4161.60182620503) * invT);
  qf[130] *= k_f;
  qr[130] *= k_f * exp(-(-2.000000 * g_RT[10] + g_RT[11] + g_RT_qss[2]));
  // reaction 131:  CH2* + CH4 <=> 2 CH3
  k_f = 16000000 * exp(-(-286.83349950869) * invT);
  qf[131] *= k_f;
  qr[131] *= k_f * exp(-(-2.000000 * g_RT[10] + g_RT[11] + g_RT_qss[3]));
  // reaction 132:  CH3OH + H <=> CH3O + H2
  k_f = 4.2 * exp((2.1) * tc[0] - (2450.66516246898) * invT);
  qf[132] *= k_f;
  qr[132] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[14] + g_RT[15]));
  // reaction 133:  CH3OH + O <=> CH3O + OH
  k_f = 0.13 * exp((2.5) * tc[0] - (2516.0833290236) * invT);
  qf[133] *= k_f;
  qr[133] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[14] + g_RT[15]));
  // reaction 134:  CH3OH + OH <=> CH3O + H2O
  k_f = 6.3 * exp((2) * tc[0] - (754.82499870708) * invT);
  qf[134] *= k_f;
  qr[134] *= k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[14] + g_RT[15]));
  // reaction 135:  CH3 + CH3OH <=> CH3O + CH4
  k_f = 10 * exp((1.5) * tc[0] - (5001.97365809891) * invT);
  qf[135] *= k_f;
  qr[135] *= k_f * exp(-(g_RT[10] - g_RT[11] - g_RT[14] + g_RT[15]));
  // reaction 136:  H + HCCO <=> CH2* + CO
  k_f = 100000000;
  qf[136] *= k_f;
  qr[136] *= k_f * exp(-(g_RT[2] - g_RT[16] + g_RT[23] - g_RT_qss[3]));
  // reaction 137:  HCCO + O <=> 2 CO + H
  k_f = 100000000;
  qf[137] *= k_f;
  qr[137] *= k_f * exp(-(-g_RT[2] + g_RT[3] - 2.000000 * g_RT[16] + g_RT[23])) *
             (refCinv);
  // reaction 138:  HCCO + O2 <=> 2 CO + OH
  k_f = 1600000 * exp(-(429.747032597231) * invT);
  qf[138] *= k_f;
  qr[138] *= k_f * exp(-(-g_RT[4] + g_RT[9] - 2.000000 * g_RT[16] + g_RT[23])) *
             (refCinv);
  // reaction 139:  CH + HCCO <=> C2H2 + CO
  k_f = 50000000;
  qf[139] *= k_f;
  qr[139] *= k_f * exp(-(-g_RT[16] - g_RT[18] + g_RT[23] + g_RT_qss[1]));
  // reaction 140:  CH2 + HCCO <=> C2H3 + CO
  k_f = 30000000;
  qf[140] *= k_f;
  qr[140] *= k_f * exp(-(-g_RT[16] - g_RT[19] + g_RT[23] + g_RT_qss[2]));
  // reaction 141:  2 HCCO <=> C2H2 + 2 CO
  k_f = 10000000;
  qf[141] *= k_f;
  qr[141] *= k_f *
             exp(-(-2.000000 * g_RT[16] - g_RT[18] + 2.000000 * g_RT[23])) *
             (refCinv);
  // reaction 142:  C2H2 + O <=> CH2 + CO
  k_f = 4.08 * exp((2) * tc[0] - (956.111665028967) * invT);
  qf[142] *= k_f;
  qr[142] *= k_f * exp(-(g_RT[3] - g_RT[16] + g_RT[18] - g_RT_qss[2]));
  // reaction 143:  C2H2 + O <=> H + HCCO
  k_f = 16.32 * exp((2) * tc[0] - (956.111665028967) * invT);
  qf[143] *= k_f;
  qr[143] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[18] - g_RT[23]));
  // reaction 144:  C2H2 + OH <=> CH2CO + H
  k_f = 2.18e-10 * exp((4.5) * tc[0] - (-503.21666580472) * invT);
  qf[144] *= k_f;
  qr[144] *= k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[18] - g_RT[24]));
  // reaction 145:  C2H2 + OH <=> CH3 + CO
  k_f = 4.83e-10 * exp((4) * tc[0] - (-1006.43333160944) * invT);
  qf[145] *= k_f;
  qr[145] *= k_f * exp(-(g_RT[4] - g_RT[10] - g_RT[16] + g_RT[18]));
  // reaction 146:  C2H2 + HCO <=> C2H3 + CO
  k_f = 10 * exp((2) * tc[0] - (3019.29999482832) * invT);
  qf[146] *= k_f;
  qr[146] *= k_f * exp(-(g_RT[12] - g_RT[16] + g_RT[18] - g_RT[19]));
  // reaction 147:  C2H2 + CH3 <=> H + aC3H4
  k_f = 5140 * exp((0.86) * tc[0] - (11147.758797572) * invT);
  qf[147] *= k_f;
  qr[147] *= k_f * exp(-(-g_RT[2] + g_RT[10] + g_RT[18] - g_RT[27]));
  // reaction 148:  C2H2 + CH3 <=> aC3H5
  k_f = 2.68e+47 * exp((-12.82) * tc[0] - (17979.9314692026) * invT);
  qf[148] *= k_f;
  qr[148] *= k_f * exp(-(g_RT[10] + g_RT[18] - g_RT[28])) * (refC);
  // reaction 149:  H + H2CC <=> C2H2 + H
  k_f = 100000000;
  qf[149] *= k_f;
  qr[149] *= k_f * exp(-(g_RT[2] - g_RT[2] - g_RT[18] + g_RT_qss[4]));
  // reaction 150:  H2CC + OH <=> CH2CO + H
  k_f = 20000000;
  qf[150] *= k_f;
  qr[150] *= k_f * exp(-(-g_RT[2] + g_RT[4] - g_RT[24] + g_RT_qss[4]));
  // reaction 151:  H2CC + O2 <=> 2 HCO
  k_f = 10000000;
  qf[151] *= k_f;
  qr[151] *= k_f * exp(-(g_RT[9] - 2.000000 * g_RT[12] + g_RT_qss[4]));
  // reaction 152:  CH2CO + H <=> H2 + HCCO
  k_f = 50000000 * exp(-(4025.73332643776) * invT);
  qf[152] *= k_f;
  qr[152] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[23] + g_RT[24]));
  // reaction 153:  CH2CO + H <=> CH3 + CO
  k_f = 1500 * exp((1.43) * tc[0] - (1353.6528310147) * invT);
  qf[153] *= k_f;
  qr[153] *= k_f * exp(-(g_RT[2] - g_RT[10] - g_RT[16] + g_RT[24]));
  // reaction 154:  CH2CO + O <=> HCCO + OH
  k_f = 10000000 * exp(-(4025.73332643776) * invT);
  qf[154] *= k_f;
  qr[154] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[23] + g_RT[24]));
  // reaction 155:  CH2CO + O <=> CH2 + CO2
  k_f = 1750000 * exp(-(679.342498836372) * invT);
  qf[155] *= k_f;
  qr[155] *= k_f * exp(-(g_RT[3] - g_RT[17] + g_RT[24] - g_RT_qss[2]));
  // reaction 156:  CH2CO + OH <=> H2O + HCCO
  k_f = 7500000 * exp(-(1006.43333160944) * invT);
  qf[156] *= k_f;
  qr[156] *= k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[23] + g_RT[24]));
  // reaction 157:  C2H3 + H <=> C2H2 + H2
  k_f = 90000000;
  qf[157] *= k_f;
  qr[157] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[18] + g_RT[19]));
  // reaction 158:  C2H3 + H <=> H2 + H2CC
  k_f = 60000000;
  qf[158] *= k_f;
  qr[158] *= k_f * exp(-(g_RT[2] - g_RT[6] + g_RT[19] - g_RT_qss[4]));
  // reaction 159:  C2H3 + O <=> CH2CO + H
  k_f = 48000000;
  qf[159] *= k_f;
  qr[159] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[19] - g_RT[24]));
  // reaction 160:  C2H3 + O <=> CH3 + CO
  k_f = 48000000;
  qf[160] *= k_f;
  qr[160] *= k_f * exp(-(g_RT[3] - g_RT[10] - g_RT[16] + g_RT[19]));
  // reaction 161:  C2H3 + OH <=> C2H2 + H2O
  k_f = 30110000;
  qf[161] *= k_f;
  qr[161] *= k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[18] + g_RT[19]));
  // reaction 162:  C2H3 + O2 <=> C2H2 + HO2
  k_f = 1.34 * exp((1.61) * tc[0] - (-192.93326966953) * invT);
  qf[162] *= k_f;
  qr[162] *= k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[18] + g_RT[19]));
  // reaction 163:  C2H3 + O2 <=> CH2CHO + O
  k_f = 300000 * exp((0.29) * tc[0] - (5.53538332385192) * invT);
  qf[163] *= k_f;
  qr[163] *= k_f * exp(-(-g_RT[3] + g_RT[9] + g_RT[19] - g_RT[25]));
  // reaction 164:  C2H3 + O2 <=> CH2O + HCO
  k_f = 46000000000 * exp((-1.39) * tc[0] - (508.248832462767) * invT);
  qf[164] *= k_f;
  qr[164] *= k_f * exp(-(g_RT[9] - g_RT[12] - g_RT[13] + g_RT[19]));
  // reaction 165:  C2H3 + HO2 <=> CH2CHO + OH
  k_f = 10000000;
  qf[165] *= k_f;
  qr[165] *= k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[19] - g_RT[25]));
  // reaction 166:  C2H3 + H2O2 <=> C2H4 + HO2
  k_f = 12100 * exp(-(-299.917132819613) * invT);
  qf[166] *= k_f;
  qr[166] *= k_f * exp(-(-g_RT[5] + g_RT[8] + g_RT[19] - g_RT[20]));
  // reaction 167:  C2H3 + HCO <=> C2H4 + CO
  k_f = 90330000;
  qf[167] *= k_f;
  qr[167] *= k_f * exp(-(g_RT[12] - g_RT[16] + g_RT[19] - g_RT[20]));
  // reaction 168:  C2H3 + CH3 <=> C2H2 + CH4
  k_f = 392000;
  qf[168] *= k_f;
  qr[168] *= k_f * exp(-(g_RT[10] - g_RT[11] - g_RT[18] + g_RT[19]));
  // reaction 169:  C2H3 + CH3 <=> H + aC3H5
  k_f = 1.5e+18 * exp((-2.83) * tc[0] - (9368.88788395227) * invT);
  qf[169] *= k_f;
  qr[169] *= k_f * exp(-(-g_RT[2] + g_RT[10] + g_RT[19] - g_RT[28]));
  // reaction 170:  2 C2H3 <=> C2H2 + C2H4
  k_f = 960000;
  qf[170] *= k_f;
  qr[170] *= k_f * exp(-(-g_RT[18] + 2.000000 * g_RT[19] - g_RT[20]));
  // reaction 171:  CH2CHO <=> CH3 + CO
  k_f = 7.8e+41 * exp((-9.147) * tc[0] - (23600.8616262414) * invT);
  qf[171] *= k_f;
  qr[171] *= k_f * exp(-(-g_RT[10] - g_RT[16] + g_RT[25])) * (refCinv);
  // reaction 172:  CH2CHO + H <=> CH3 + HCO
  k_f = 90000000;
  qf[172] *= k_f;
  qr[172] *= k_f * exp(-(g_RT[2] - g_RT[10] - g_RT[12] + g_RT[25]));
  // reaction 173:  CH2CHO + H <=> CH2CO + H2
  k_f = 20000000 * exp(-(2012.86666321888) * invT);
  qf[173] *= k_f;
  qr[173] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[24] + g_RT[25]));
  // reaction 174:  CH2CHO + O <=> CH2CO + OH
  k_f = 20000000 * exp(-(2012.86666321888) * invT);
  qf[174] *= k_f;
  qr[174] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[24] + g_RT[25]));
  // reaction 175:  CH2CHO + OH <=> CH2CO + H2O
  k_f = 10000000 * exp(-(1006.43333160944) * invT);
  qf[175] *= k_f;
  qr[175] *= k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[24] + g_RT[25]));
  // reaction 176:  CH2CHO + O2 <=> CH2CO + HO2
  k_f = 140000;
  qf[176] *= k_f;
  qr[176] *= k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[24] + g_RT[25]));
  // reaction 177:  CH2CHO + O2 <=> CH2O + CO + OH
  k_f = 18000;
  qf[177] *= k_f;
  qr[177] *= k_f * exp(-(-g_RT[4] + g_RT[9] - g_RT[13] - g_RT[16] + g_RT[25])) *
             (refCinv);
  // reaction 178:  CH2OCH2 <=> CH3 + HCO
  k_f = 36300000000000 * exp(-(28783.99328403) * invT);
  qf[178] *= k_f;
  qr[178] *= k_f * exp(-(-g_RT[10] - g_RT[12] + g_RT[26])) * (refCinv);
  // reaction 179:  CH2OCH2 <=> CH4 + CO
  k_f = 12100000000000 * exp(-(28783.99328403) * invT);
  qf[179] *= k_f;
  qr[179] *= k_f * exp(-(-g_RT[11] - g_RT[16] + g_RT[26])) * (refCinv);
  // reaction 180:  CH2OCH2 + H <=> C2H3 + H2O
  k_f = 5000 * exp(-(2516.0833290236) * invT);
  qf[180] *= k_f;
  qr[180] *= k_f * exp(-(g_RT[2] - g_RT[7] - g_RT[19] + g_RT[26]));
  // reaction 181:  CH2OCH2 + H <=> C2H4 + OH
  k_f = 95100 * exp(-(2516.0833290236) * invT);
  qf[181] *= k_f;
  qr[181] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[20] + g_RT[26]));
  // reaction 182:  C2H4 + H <=> C2H3 + H2
  k_f = 50.7 * exp((1.9) * tc[0] - (6516.65582217112) * invT);
  qf[182] *= k_f;
  qr[182] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[19] + g_RT[20]));
  // reaction 183:  C2H4 + O <=> C2H3 + OH
  k_f = 15.1 * exp((1.9) * tc[0] - (1882.03033010965) * invT);
  qf[183] *= k_f;
  qr[183] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[19] + g_RT[20]));
  // reaction 184:  C2H4 + O <=> CH3 + HCO
  k_f = 19.2 * exp((1.83) * tc[0] - (110.707666477038) * invT);
  qf[184] *= k_f;
  qr[184] *= k_f * exp(-(g_RT[3] - g_RT[10] - g_RT[12] + g_RT[20]));
  // reaction 185:  C2H4 + O <=> CH2 + CH2O
  k_f = 0.384 * exp((1.83) * tc[0] - (110.707666477038) * invT);
  qf[185] *= k_f;
  qr[185] *= k_f * exp(-(g_RT[3] - g_RT[13] + g_RT[20] - g_RT_qss[2]));
  // reaction 186:  C2H4 + OH <=> C2H3 + H2O
  k_f = 3.6 * exp((2) * tc[0] - (1258.0416645118) * invT);
  qf[186] *= k_f;
  qr[186] *= k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[19] + g_RT[20]));
  // reaction 187:  C2H4 + HCO <=> C2H5 + CO
  k_f = 10 * exp((2) * tc[0] - (4025.73332643776) * invT);
  qf[187] *= k_f;
  qr[187] *= k_f * exp(-(g_RT[12] - g_RT[16] + g_RT[20] - g_RT[21]));
  // reaction 188:  C2H4 + CH <=> H + aC3H4
  k_f = 30000000;
  qf[188] *= k_f;
  qr[188] *= k_f * exp(-(-g_RT[2] + g_RT[20] - g_RT[27] + g_RT_qss[1]));
  // reaction 189:  C2H4 + CH2 <=> H + aC3H5
  k_f = 20000000 * exp(-(3019.29999482832) * invT);
  qf[189] *= k_f;
  qr[189] *= k_f * exp(-(-g_RT[2] + g_RT[20] - g_RT[28] + g_RT_qss[2]));
  // reaction 190:  C2H4 + CH2* <=> CH4 + H2CC
  k_f = 50000000;
  qf[190] *= k_f;
  qr[190] *= k_f * exp(-(-g_RT[11] + g_RT[20] + g_RT_qss[3] - g_RT_qss[4]));
  // reaction 191:  C2H4 + CH2* <=> H + aC3H5
  k_f = 50000000;
  qf[191] *= k_f;
  qr[191] *= k_f * exp(-(-g_RT[2] + g_RT[20] - g_RT[28] + g_RT_qss[3]));
  // reaction 192:  C2H4 + CH3 <=> C2H3 + CH4
  k_f = 0.227 * exp((2) * tc[0] - (4629.59332540342) * invT);
  qf[192] *= k_f;
  qr[192] *= k_f * exp(-(g_RT[10] - g_RT[11] - g_RT[19] + g_RT[20]));
  // reaction 193:  C2H4 + CH3 <=> nC3H7
  k_f = 330000 * exp(-(3874.76832669634) * invT);
  qf[193] *= k_f;
  qr[193] *= k_f * exp(-(g_RT[10] + g_RT[20] - g_RT[30])) * (refC);
  // reaction 194:  C2H4 + O2 <=> C2H3 + HO2
  k_f = 42200000 * exp(-(30595.573280927) * invT);
  qf[194] *= k_f;
  qr[194] *= k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[19] + g_RT[20]));
  // reaction 195:  C2H4 + HO2 <=> CH2OCH2 + OH
  k_f = 2820000 * exp(-(8605.00498526071) * invT);
  qf[195] *= k_f;
  qr[195] *= k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[20] - g_RT[26]));
  // reaction 196:  C2H5 + H <=> C2H4 + H2
  k_f = 2000000;
  qf[196] *= k_f;
  qr[196] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[20] + g_RT[21]));
  // reaction 197:  C2H5 + O <=> CH2O + CH3
  k_f = 16040000;
  qf[197] *= k_f;
  qr[197] *= k_f * exp(-(g_RT[3] - g_RT[10] - g_RT[13] + g_RT[21]));
  // reaction 198:  C2H5 + O2 <=> C2H4 + HO2
  k_f = 20000;
  qf[198] *= k_f;
  qr[198] *= k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[20] + g_RT[21]));
  // reaction 199:  C2H5 + HO2 <=> C2H6 + O2
  k_f = 300000;
  qf[199] *= k_f;
  qr[199] *= k_f * exp(-(g_RT[5] - g_RT[9] + g_RT[21] - g_RT[22]));
  // reaction 200:  C2H5 + HO2 <=> C2H4 + H2O2
  k_f = 300000;
  qf[200] *= k_f;
  qr[200] *= k_f * exp(-(g_RT[5] - g_RT[8] - g_RT[20] + g_RT[21]));
  // reaction 201:  C2H5 + HO2 <=> CH2O + CH3 + OH
  k_f = 24000000;
  qf[201] *= k_f;
  qr[201] *= k_f * exp(-(-g_RT[4] + g_RT[5] - g_RT[10] - g_RT[13] + g_RT[21])) *
             (refCinv);
  // reaction 202:  C2H5 + H2O2 <=> C2H6 + HO2
  k_f = 8700 * exp(-(490.133032493797) * invT);
  qf[202] *= k_f;
  qr[202] *= k_f * exp(-(-g_RT[5] + g_RT[8] + g_RT[21] - g_RT[22]));
  // reaction 203:  C2H3 + C2H5 <=> CH3 + aC3H5
  k_f = 3.9e+26 * exp((-5.22) * tc[0] - (9937.0194996458) * invT);
  qf[203] *= k_f;
  qr[203] *= k_f * exp(-(-g_RT[10] + g_RT[19] + g_RT[21] - g_RT[28]));
  // reaction 204:  C2H6 + H <=> C2H5 + H2
  k_f = 115 * exp((1.9) * tc[0] - (3789.22149350954) * invT);
  qf[204] *= k_f;
  qr[204] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[21] + g_RT[22]));
  // reaction 205:  C2H6 + O <=> C2H5 + OH
  k_f = 89.8 * exp((1.92) * tc[0] - (2863.30282842885) * invT);
  qf[205] *= k_f;
  qr[205] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[21] + g_RT[22]));
  // reaction 206:  C2H6 + OH <=> C2H5 + H2O
  k_f = 3.54 * exp((2.12) * tc[0] - (437.798499250106) * invT);
  qf[206] *= k_f;
  qr[206] *= k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[21] + g_RT[22]));
  // reaction 207:  C2H6 + CH2* <=> C2H5 + CH3
  k_f = 40000000 * exp(-(-276.769166192596) * invT);
  qf[207] *= k_f;
  qr[207] *= k_f * exp(-(-g_RT[10] - g_RT[21] + g_RT[22] + g_RT_qss[3]));
  // reaction 208:  C2H6 + CH3 <=> C2H5 + CH4
  k_f = 6.14 * exp((1.74) * tc[0] - (5258.61415765932) * invT);
  qf[208] *= k_f;
  qr[208] *= k_f * exp(-(g_RT[10] - g_RT[11] - g_RT[21] + g_RT[22]));
  // reaction 209:  CH3O2 + HO2 <=> CH2O + H2O + O2
  k_f = 18000 * exp(-(-720.103048766554) * invT);
  qf[209] *= k_f;
  qr[209] *=
    k_f * exp(-(g_RT[5] - g_RT[7] - g_RT[9] - g_RT[13] + g_RT[37])) * (refCinv);
  // reaction 210:  2 CH3O2 <=> CH2O + CH3OH + O2
  k_f = 1046 * exp(-(-1806.04461357314) * invT);
  qf[210] *= k_f;
  qr[210] *= k_f *
             exp(-(-g_RT[9] - g_RT[13] - g_RT[15] + 2.000000 * g_RT[37])) *
             (refCinv);
  // reaction 211:  2 CH3O2 <=> 2 CH3O + O2
  k_f = 77410 * exp(-(-30.6962166140879) * invT);
  qf[211] *= k_f;
  qr[211] *= k_f *
             exp(-(-g_RT[9] - 2.000000 * g_RT[14] + 2.000000 * g_RT[37])) *
             (refCinv);
  // reaction 212:  CH3 + CH3O2 <=> 2 CH3O
  k_f = 1000000 * exp(-(-710.038715450459) * invT);
  qf[212] *= k_f;
  qr[212] *= k_f * exp(-(g_RT[10] - 2.000000 * g_RT[14] + g_RT[37]));
  // reaction 213:  CH3O2 + OH <=> CH3OH + O2
  k_f = 60000000;
  qf[213] *= k_f;
  qr[213] *= k_f * exp(-(g_RT[4] - g_RT[9] - g_RT[15] + g_RT[37]));
  // reaction 214:  CH3O2 + H <=> CH3O + OH
  k_f = 96000000;
  qf[214] *= k_f;
  qr[214] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[14] + g_RT[37]));
  // reaction 215:  CH3O2 + O <=> CH3O + O2
  k_f = 36000000;
  qf[215] *= k_f;
  qr[215] *= k_f * exp(-(g_RT[3] - g_RT[9] - g_RT[14] + g_RT[37]));
  // reaction 216:  H + aC3H4 <=> aC3H5
  k_f = 1.52e+53 * exp((-13.54) * tc[0] - (13561.1859267714) * invT);
  qf[216] *= k_f;
  qr[216] *= k_f * exp(-(g_RT[2] + g_RT[27] - g_RT[28])) * (refC);
  // reaction 217:  O + aC3H4 <=> C2H4 + CO
  k_f = 20 * exp((1.8) * tc[0] - (503.21666580472) * invT);
  qf[217] *= k_f;
  qr[217] *= k_f * exp(-(g_RT[3] - g_RT[16] - g_RT[20] + g_RT[27]));
  // reaction 218:  H + aC3H5 <=> H2 + aC3H4
  k_f = 18000000;
  qf[218] *= k_f;
  qr[218] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[27] + g_RT[28]));
  // reaction 219:  OH + aC3H5 <=> H2O + aC3H4
  k_f = 6000000;
  qf[219] *= k_f;
  qr[219] *= k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[27] + g_RT[28]));
  // reaction 220:  O2 + aC3H5 <=> HO2 + aC3H4
  k_f = 4990000000 * exp((-1.4) * tc[0] - (11286.1433806683) * invT);
  qf[220] *= k_f;
  qr[220] *= k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[27] + g_RT[28]));
  // reaction 221:  HO2 + aC3H5 <=> C3H6 + O2
  k_f = 2660000;
  qf[221] *= k_f;
  qr[221] *= k_f * exp(-(g_RT[5] - g_RT[9] + g_RT[28] - g_RT[29]));
  // reaction 222:  HO2 + aC3H5 <=> C2H3 + CH2O + OH
  k_f = 6600000;
  qf[222] *= k_f;
  qr[222] *= k_f * exp(-(-g_RT[4] + g_RT[5] - g_RT[13] - g_RT[19] + g_RT[28])) *
             (refCinv);
  // reaction 223:  HCO + aC3H5 <=> C3H6 + CO
  k_f = 60000000;
  qf[223] *= k_f;
  qr[223] *= k_f * exp(-(g_RT[12] - g_RT[16] + g_RT[28] - g_RT[29]));
  // reaction 224:  CH3 + aC3H5 <=> CH4 + aC3H4
  k_f = 3000000 * exp((-0.32) * tc[0] - (-65.9213832204183) * invT);
  qf[224] *= k_f;
  qr[224] *= k_f * exp(-(g_RT[10] - g_RT[11] - g_RT[27] + g_RT[28]));
  // reaction 225:  C3H6 + H <=> C2H4 + CH3
  k_f = 8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  qf[225] *= k_f;
  qr[225] *= k_f * exp(-(g_RT[2] - g_RT[10] - g_RT[20] + g_RT[29]));
  // reaction 226:  C3H6 + H <=> H2 + aC3H5
  k_f = 0.173 * exp((2.5) * tc[0] - (1253.00949785375) * invT);
  qf[226] *= k_f;
  qr[226] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[28] + g_RT[29]));
  // reaction 227:  C3H6 + O <=> CH2CO + CH3 + H
  k_f = 80 * exp((1.65) * tc[0] - (164.551849718143) * invT);
  qf[227] *= k_f;
  qr[227] *= k_f * exp(-(-g_RT[2] + g_RT[3] - g_RT[10] - g_RT[24] + g_RT[29])) *
             (refCinv);
  // reaction 228:  C3H6 + O <=> C2H5 + HCO
  k_f = 35 * exp((1.65) * tc[0] - (-489.126599162188) * invT);
  qf[228] *= k_f;
  qr[228] *= k_f * exp(-(g_RT[3] - g_RT[12] - g_RT[21] + g_RT[29]));
  // reaction 229:  C3H6 + O <=> OH + aC3H5
  k_f = 180000 * exp((0.7) * tc[0] - (2958.91399493175) * invT);
  qf[229] *= k_f;
  qr[229] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[28] + g_RT[29]));
  // reaction 230:  C3H6 + OH <=> H2O + aC3H5
  k_f = 3.1 * exp((2) * tc[0] - (-149.958566409806) * invT);
  qf[230] *= k_f;
  qr[230] *= k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[28] + g_RT[29]));
  // reaction 231:  C3H6 + HO2 <=> H2O2 + aC3H5
  k_f = 0.0096 * exp((2.6) * tc[0] - (6999.74382134365) * invT);
  qf[231] *= k_f;
  qr[231] *= k_f * exp(-(g_RT[5] - g_RT[8] - g_RT[28] + g_RT[29]));
  // reaction 232:  C3H6 + CH3 <=> CH4 + aC3H5
  k_f = 2.2e-06 * exp((3.5) * tc[0] - (2855.75457844178) * invT);
  qf[232] *= k_f;
  qr[232] *= k_f * exp(-(g_RT[10] - g_RT[11] - g_RT[28] + g_RT[29]));
  // reaction 233:  H + nC3H7 <=> C2H5 + CH3
  k_f = 3.7e+18 * exp((-2.92) * tc[0] - (6292.72440588802) * invT);
  qf[233] *= k_f;
  qr[233] *= k_f * exp(-(g_RT[2] - g_RT[10] - g_RT[21] + g_RT[30]));
  // reaction 234:  H + nC3H7 <=> C3H6 + H2
  k_f = 1800000;
  qf[234] *= k_f;
  qr[234] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[29] + g_RT[30]));
  // reaction 235:  O + nC3H7 <=> C2H5 + CH2O
  k_f = 96000000;
  qf[235] *= k_f;
  qr[235] *= k_f * exp(-(g_RT[3] - g_RT[13] - g_RT[21] + g_RT[30]));
  // reaction 236:  OH + nC3H7 <=> C3H6 + H2O
  k_f = 24000000;
  qf[236] *= k_f;
  qr[236] *= k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[29] + g_RT[30]));
  // reaction 237:  O2 + nC3H7 <=> C3H6 + HO2
  k_f = 90000;
  qf[237] *= k_f;
  qr[237] *= k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[29] + g_RT[30]));
  // reaction 238:  HO2 + nC3H7 <=> C2H5 + CH2O + OH
  k_f = 24000000;
  qf[238] *= k_f;
  qr[238] *= k_f * exp(-(-g_RT[4] + g_RT[5] - g_RT[13] - g_RT[21] + g_RT[30])) *
             (refCinv);
  // reaction 239:  CH3 + nC3H7 <=> C3H6 + CH4
  k_f = 11000000;
  qf[239] *= k_f;
  qr[239] *= k_f * exp(-(g_RT[10] - g_RT[11] - g_RT[29] + g_RT[30]));
  // reaction 240:  C4H81 + H <=> C2H4 + C2H5
  k_f = 1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  qf[240] *= k_f;
  qr[240] *= k_f * exp(-(g_RT[2] - g_RT[20] - g_RT[21] + g_RT[31]));
  // reaction 241:  C4H81 + H <=> C3H6 + CH3
  k_f = 3.2e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  qf[241] *= k_f;
  qr[241] *= k_f * exp(-(g_RT[2] - g_RT[10] - g_RT[29] + g_RT[31]));
  // reaction 242:  C4H81 + O <=> HCO + nC3H7
  k_f = 330 * exp((1.45) * tc[0] - (-202.293099653497) * invT);
  qf[242] *= k_f;
  qr[242] *= k_f * exp(-(g_RT[3] - g_RT[12] - g_RT[30] + g_RT[31]));
  // reaction 243:  N + NO <=> N2 + O
  k_f = 27000000 * exp(-(178.641916360675) * invT);
  qf[243] *= k_f;
  qr[243] *= k_f * exp(-(-g_RT[1] - g_RT[3] + g_RT[32] + g_RT_qss[5]));
  // reaction 244:  N + O2 <=> NO + O
  k_f = 9000 * exp((1) * tc[0] - (3270.90832773068) * invT);
  qf[244] *= k_f;
  qr[244] *= k_f * exp(-(-g_RT[3] + g_RT[9] + g_RT[32] - g_RT_qss[5]));
  // reaction 245:  N + OH <=> H + NO
  k_f = 33600000 * exp(-(193.738416334817) * invT);
  qf[245] *= k_f;
  qr[245] *= k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[32] - g_RT_qss[5]));
  // reaction 246:  HO2 + NO <=> NO2 + OH
  k_f = 2110000 * exp(-(-241.543999586265) * invT);
  qf[246] *= k_f;
  qr[246] *= k_f * exp(-(-g_RT[4] + g_RT[5] - g_RT[33] + g_RT_qss[5]));
  // reaction 247:  NO2 + O <=> NO + O2
  k_f = 3900000 * exp(-(-120.771999793133) * invT);
  qf[247] *= k_f;
  qr[247] *= k_f * exp(-(g_RT[3] - g_RT[9] + g_RT[33] - g_RT_qss[5]));
  // reaction 248:  H + NO2 <=> NO + OH
  k_f = 132000000 * exp(-(181.157999689699) * invT);
  qf[248] *= k_f;
  qr[248] *= k_f * exp(-(g_RT[2] - g_RT[4] + g_RT[33] - g_RT_qss[5]));
  // reaction 249:  NCO + O <=> CO + NO
  k_f = 2000000000 * exp((-0.5) * tc[0]);
  qf[249] *= k_f;
  qr[249] *= k_f * exp(-(g_RT[3] - g_RT[16] + g_RT[36] - g_RT_qss[5]));
  // reaction 250:  NCO + OH <=> CO + H + NO
  k_f = 8300000 * exp((-0.1) * tc[0] - (37986.8196682667) * invT);
  qf[250] *= k_f;
  qr[250] *= k_f *
             exp(-(-g_RT[2] + g_RT[4] - g_RT[16] + g_RT[36] - g_RT_qss[5])) *
             (refCinv);
  // reaction 251:  N + NCO <=> CO + N2
  k_f = 20000000;
  qf[251] *= k_f;
  qr[251] *= k_f * exp(-(-g_RT[1] - g_RT[16] + g_RT[32] + g_RT[36]));
  // reaction 252:  NCO + O2 <=> CO2 + NO
  k_f = 2000000 * exp(-(10064.3333160944) * invT);
  qf[252] *= k_f;
  qr[252] *= k_f * exp(-(g_RT[9] - g_RT[17] + g_RT[36] - g_RT_qss[5]));
  // reaction 253:  NCO + NO <=> CO2 + N2
  k_f = 3800000000000 * exp((-2) * tc[0] - (402.573332643776) * invT);
  qf[253] *= k_f;
  qr[253] *= k_f * exp(-(-g_RT[1] - g_RT[17] + g_RT[36] + g_RT_qss[5]));
  // reaction 254:  C + NO <=> CO + N
  k_f = 29000000;
  qf[254] *= k_f;
  qr[254] *= k_f * exp(-(-g_RT[16] - g_RT[32] + g_RT_qss[0] + g_RT_qss[5]));
  // reaction 255:  CH + NO <=> H + NCO
  k_f = 16200000;
  qf[255] *= k_f;
  qr[255] *= k_f * exp(-(-g_RT[2] - g_RT[36] + g_RT_qss[1] + g_RT_qss[5]));
  // reaction 256:  CH + NO <=> HCO + N
  k_f = 24600000;
  qf[256] *= k_f;
  qr[256] *= k_f * exp(-(-g_RT[12] - g_RT[32] + g_RT_qss[1] + g_RT_qss[5]));
  // reaction 257:  CH2 + NO <=> H + HNCO
  k_f = 310000000000 * exp((-1.38) * tc[0] - (639.085165571994) * invT);
  qf[257] *= k_f;
  qr[257] *= k_f * exp(-(-g_RT[2] - g_RT[35] + g_RT_qss[2] + g_RT_qss[5]));
  // reaction 258:  CH2 + NO <=> H + HCNO
  k_f = 38000000 * exp((-0.36) * tc[0] - (291.865666166737) * invT);
  qf[258] *= k_f;
  qr[258] *= k_f * exp(-(-g_RT[2] - g_RT[34] + g_RT_qss[2] + g_RT_qss[5]));
  // reaction 259:  CH2* + NO <=> H + HNCO
  k_f = 310000000000 * exp((-1.38) * tc[0] - (639.085165571994) * invT);
  qf[259] *= k_f;
  qr[259] *= k_f * exp(-(-g_RT[2] - g_RT[35] + g_RT_qss[3] + g_RT_qss[5]));
  // reaction 260:  CH2* + NO <=> H + HCNO
  k_f = 38000000 * exp((-0.36) * tc[0] - (291.865666166737) * invT);
  qf[260] *= k_f;
  qr[260] *= k_f * exp(-(-g_RT[2] - g_RT[34] + g_RT_qss[3] + g_RT_qss[5]));
  // reaction 261:  HNCO + O <=> NCO + OH
  k_f = 2.2 * exp((2.11) * tc[0] - (24065.3306087791) * invT);
  qf[261] *= k_f;
  qr[261] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[35] - g_RT[36]));
  // reaction 262:  H + HNCO <=> H2 + NCO
  k_f = 90 * exp((1.7) * tc[0] - (29266.0748498709) * invT);
  qf[262] *= k_f;
  qr[262] *= k_f * exp(-(g_RT[2] - g_RT[6] + g_RT[35] - g_RT[36]));
  // reaction 263:  HNCO + OH <=> H2O + NCO
  k_f = 33 * exp((1.5) * tc[0] - (1811.57999689699) * invT);
  qf[263] *= k_f;
  qr[263] *= k_f * exp(-(g_RT[4] - g_RT[7] + g_RT[35] - g_RT[36]));
  // reaction 264:  H + HCNO <=> H + HNCO
  k_f = 2100000000 * exp((-0.69) * tc[0] - (1434.16749754345) * invT);
  qf[264] *= k_f;
  qr[264] *= k_f * exp(-(g_RT[2] - g_RT[2] + g_RT[34] - g_RT[35]));
  // reaction 265:  HCCO + NO <=> CO + HCNO
  k_f = 55000 * exp(-(920.886498422637) * invT);
  qf[265] *= k_f;
  qr[265] *= k_f * exp(-(-g_RT[16] + g_RT[23] - g_RT[34] + g_RT_qss[5]));
  // reaction 266:  CO2 + N <=> CO + NO
  k_f = 3000000 * exp(-(5686.34832359333) * invT);
  qf[266] *= k_f;
  qr[266] *= k_f * exp(-(-g_RT[16] + g_RT[17] + g_RT[32] - g_RT_qss[5]));
  // reaction 267:  CH3 + NO2 <=> CH3O + NO
  k_f = 15100000 * exp((-0.05) * tc[0]);
  qf[267] *= k_f;
  qr[267] *= k_f * exp(-(g_RT[10] - g_RT[14] + g_RT[33] - g_RT_qss[5]));
  // reaction 268:  CH3O2 + NO <=> CH3O + NO2
  k_f = 1690000 * exp(-(-286.83349950869) * invT);
  qf[268] *= k_f;
  qr[268] *= k_f * exp(-(-g_RT[14] - g_RT[33] + g_RT[37] + g_RT_qss[5]));
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
productionRate(amrex::Real* wdot, const amrex::Real* sc, const amrex::Real T)
{
  const amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  const amrex::Real invT = 1.0 / tc[1];

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1 / refC;

  for (int i = 0; i < 38; ++i) {
    wdot[i] = 0.0;
  }

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 38; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[38];
  gibbs(g_RT, tc);
  amrex::Real g_RT_qss[6];
  gibbs_qss(g_RT_qss, tc);

  amrex::Real sc_qss[6];
  amrex::Real kf_qss[85], qf_qss[85], qr_qss[85];
  // Fill sc_qss here
  comp_k_f_qss(tc, invT, kf_qss);
  comp_qss_coeff(kf_qss, qf_qss, qr_qss, sc, tc, g_RT, g_RT_qss);
  comp_sc_qss(sc_qss, qf_qss, qr_qss);

  {
    // reaction 0:  H + O2 (+M) <=> HO2 (+M)
    const amrex::Real k_f = 5116000 * exp((0.44) * tc[0]);
    amrex::Real Corr = mixture + (-0.6) * sc[0] + (10.89) * sc[7] +
                       (-0.15) * sc[9] + (0.0900000000000001) * sc[16] +
                       (1.18) * sc[17];
    const amrex::Real redP = Corr / k_f * 63280000 * exp(-1.4 * tc[0]);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(0.5 * exp(-tc[1] * 1e+30) + 0.5 * exp(-tc[1] * 1e-30) + 0.0);
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[9]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] - g_RT[5] + g_RT[9])) * (refC) * (sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[5] += qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 1:  2 OH (+M) <=> H2O2 (+M)
    const amrex::Real k_f = 111000000 * exp((-0.37) * tc[0]);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] +
                       (0.75) * sc[16] + (2.6) * sc[17];
    const amrex::Real redP =
      Corr / k_f * 201000 * exp(-0.584 * tc[0] - -1153.87581469022 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2654 * exp(-tc[1] * 0.0106382978723404) +
      0.7346 * exp(-tc[1] * 0.000569476082004556) + exp(-5182 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * ((sc[4] * sc[4]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[4] - g_RT[8])) * (refC) * (sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= 2.000000 * qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 2:  CO + H2 (+M) <=> CH2O (+M)
    const amrex::Real k_f = 43 * exp((1.5) * tc[0] - (40056.0465980557) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 5.07e+15 * exp(-3.42 * tc[0] - 42446.3257606281 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.0679999999999999 * exp(-tc[1] * 0.0050761421319797) +
      0.932 * exp(-tc[1] * 0.000649350649350649) + exp(-10300 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[6] * sc[16]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[6] - g_RT[13] + g_RT[16])) * (refC) * (sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[13] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 3:  CH + CO (+M) <=> HCCO (+M)
    const amrex::Real k_f = 50000000;
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 2.69e+16 * exp(-3.74 * tc[0] - 974.227464997937 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4243 * exp(-tc[1] * 0.00421940928270042) +
      0.5757 * exp(-tc[1] * 0.000605326876513317) + exp(-5069 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[16] * sc_qss[1]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[16] - g_RT[23] + g_RT_qss[1])) * (refC) *
                           (sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[16] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 4:  H + HCO (+M) <=> CH2O (+M)
    const amrex::Real k_f =
      1090000 * exp((0.48) * tc[0] - (-130.836333109227) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 1350000000000 * exp(-2.57 * tc[0] - 717.083748771726 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2176 * exp(-tc[1] * 0.003690036900369) +
      0.7824 * exp(-tc[1] * 0.000362976406533575) + exp(-6570 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[12]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[12] - g_RT[13])) * (refC) * (sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 5:  CH2 + H (+M) <=> CH3 (+M)
    const amrex::Real k_f = 25000000000 * exp((-0.8) * tc[0]);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 3.2e+15 * exp(-3.14 * tc[0] - 618.956498939805 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.32 * exp(-tc[1] * 0.0128205128205128) +
      0.68 * exp(-tc[1] * 0.00050125313283208) + exp(-5590 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc_qss[2]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] - g_RT[10] + g_RT_qss[2])) * (refC) * (sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 6:  CH2 + CO (+M) <=> CH2CO (+M)
    const amrex::Real k_f =
      810000 * exp((0.5) * tc[0] - (2269.50716277929) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 2.69e+21 * exp(-5.11 * tc[0] - 3570.32224388449 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4093 * exp(-tc[1] * 0.00363636363636364) +
      0.5907 * exp(-tc[1] * 0.000815660685154976) + exp(-5185 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[16] * sc_qss[2]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[16] - g_RT[24] + g_RT_qss[2])) * (refC) *
                           (sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[16] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 7:  CH2* + H2O (+M) <=> CH3OH (+M)
    const amrex::Real k_f = 20000000;
    amrex::Real Corr = mixture + sc[6] + (5) * sc[7] + sc[11] + (0.5) * sc[16] +
                       sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 2.7e+26 * exp(-6.3 * tc[0] - 1559.97166399463 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.8493 * exp(-tc[1] * 0.00746268656716418) +
      0.1507 * exp(-tc[1] * 0.000419639110365086) + exp(-7265 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[7] * sc_qss[3]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[7] - g_RT[15] + g_RT_qss[3])) * (refC) * (sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[7] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 8:  CH2O + H (+M) <=> CH3O (+M)
    const amrex::Real k_f =
      540000 * exp((0.454) * tc[0] - (1308.36333109227) * invT);
    amrex::Real Corr = mixture + sc[6] + (5) * sc[7] + sc[11] + (0.5) * sc[16] +
                       sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 2.2e+18 * exp(-4.8 * tc[0] - 2797.88466187424 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.242 * exp(-tc[1] * 0.0106382978723404) +
      0.758 * exp(-tc[1] * 0.000643086816720257) + exp(-4200 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[13]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[13] - g_RT[14])) * (refC) * (sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[13] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 9:  CH3 + H (+M) <=> CH4 (+M)
    const amrex::Real k_f =
      12700000000 * exp((-0.63) * tc[0] - (192.731983003208) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 2.477e+21 * exp(-4.76 * tc[0] - 1227.84866456352 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.217 * exp(-tc[1] * 0.0135135135135135) +
      0.783 * exp(-tc[1] * 0.000340020401224073) + exp(-6964 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[10]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[10] - g_RT[11])) * (refC) * (sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[10] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 10:  CH3 + OH (+M) <=> CH3OH (+M)
    const amrex::Real k_f = 63000000;
    amrex::Real Corr = mixture + sc[6] + (5) * sc[7] + sc[11] + (0.5) * sc[16] +
                       sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 2.7e+26 * exp(-6.3 * tc[0] - 1559.97166399463 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.7895 * exp(-tc[1] * 0.0119760479041916) +
      0.2105 * exp(-tc[1] * 0.000185253797702853) + exp(-8370 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[4] * sc[10]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[4] + g_RT[10] - g_RT[15])) * (refC) * (sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[10] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 11:  2 CH3 (+M) <=> C2H6 (+M)
    const amrex::Real k_f =
      21200000000 * exp((-0.97) * tc[0] - (311.994332798926) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 1.77e+38 * exp(-9.67 * tc[0] - 3130.00766130536 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4675 * exp(-tc[1] * 0.00662251655629139) +
      0.5325 * exp(-tc[1] * 0.000963391136801541) + exp(-4970 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * ((sc[10] * sc[10]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[10] - g_RT[22])) * (refC) * (sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= 2.000000 * qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 12:  CH3O + H (+M) <=> CH3OH (+M)
    const amrex::Real k_f = 50000000;
    amrex::Real Corr = mixture + sc[6] + (5) * sc[7] + sc[11] + (0.5) * sc[16] +
                       sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 8.6e+16 * exp(-4 * tc[0] - 1522.23041405928 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.1098 * exp(-tc[1] * 0.00694444444444444) +
      0.8902 * exp(-tc[1] * 0.000352360817477097) + exp(-45569 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[14]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[14] - g_RT[15])) * (refC) * (sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 13:  C2H3 (+M) <=> C2H2 + H (+M)
    const amrex::Real k_f =
      386000000 * exp((1.62) * tc[0] - (18643.2716780664) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[18] + (2) * sc[20] +
                       (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 2.565e+21 * exp(-3.4 * tc[0] - 18014.5125184767 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      -0.9816 * exp(-tc[1] * 0.000185745862510913) +
      1.9816 * exp(-tc[1] * 0.232926488400261) + exp(0.0795 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[2] - g_RT[18] + g_RT[19])) *
                           (refCinv) * (sc[2] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[18] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 14:  CH2CO + H (+M) <=> CH2CHO (+M)
    const amrex::Real k_f =
      330000000 * exp((-0.06) * tc[0] - (4277.34165934012) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[18] + (2) * sc[20] +
                       (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 3.8e+29 * exp(-7.64 * tc[0] - 5988.27832307616 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.663 * exp(-tc[1] * 0.000585823081429408) +
      0.337 * exp(-tc[1] * 0.0003125) + exp(-4131 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[24]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[24] - g_RT[25])) * (refC) * (sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[24] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 15:  C2H3 + H (+M) <=> C2H4 (+M)
    const amrex::Real k_f =
      6080000 * exp((0.27) * tc[0] - (140.900666425322) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[18] + (2) * sc[20] +
                       (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 1.4e+18 * exp(-3.86 * tc[0] - 1670.67933047167 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.218 * exp(-tc[1] * 0.00481927710843374) +
      0.782 * exp(-tc[1] * 0.000375516334960571) + exp(-6095 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[19]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[19] - g_RT[20])) * (refC) * (sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[19] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 16:  C2H3 + CH3 (+M) <=> C3H6 (+M)
    const amrex::Real k_f = 25000000;
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[18] + (2) * sc[20] +
                       (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 4.27e+46 * exp(-11.94 * tc[0] - 4916.32618157895 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.825 * exp(-tc[1] * 0.000745934656124124) +
      0.175 * exp(-tc[1] * 1.66666666666667e-05) + exp(-10139.8 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[10] * sc[19]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[10] + g_RT[19] - g_RT[29])) * (refC) * (sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[19] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 17:  C2H4 (+M) <=> H2 + H2CC (+M)
    const amrex::Real k_f =
      8000000000000 * exp((0.44) * tc[0] - (44670.543423485) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 7e+44 * exp(-9.31 * tc[0] - 50251.2162472593 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2655 * exp(-tc[1] * 0.00555555555555556) +
      0.7345 * exp(-tc[1] * 0.000966183574879227) + exp(-5417 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[20]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[6] + g_RT[20] - g_RT_qss[4])) *
                           (refCinv) * (sc[6] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 18:  C2H4 + H (+M) <=> C2H5 (+M)
    const amrex::Real k_f =
      1367 * exp((1.463) * tc[0] - (681.858582165395) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 2.027e+27 * exp(-6.642 * tc[0] - 2903.05694502743 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      1.569 * exp(-tc[1] * 0.00334448160535117) +
      -0.569 * exp(-tc[1] * 0.000109325461900077) + exp(152.4 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[20]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[20] - g_RT[21])) * (refC) * (sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[20] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 19:  C2H5 + H (+M) <=> C2H6 (+M)
    const amrex::Real k_f =
      521000000000 * exp((-0.99) * tc[0] - (795.082331971457) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 1.99e+29 * exp(-7.08 * tc[0] - 3364.00341090455 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.1578 * exp(-tc[1] * 0.008) +
      0.8422 * exp(-tc[1] * 0.000450653447498873) + exp(-6882 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[21]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[21] - g_RT[22])) * (refC) * (sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[21] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 20:  C2H3 + C2H5 (+M) <=> C4H81 (+M)
    const amrex::Real k_f = 15000000;
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 1.55e+44 * exp(-11.79 * tc[0] - 4521.1501339225 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.802 * exp(-tc[1] * 0.000439000834101585) +
      0.198 * exp(-tc[1] * 1.66666666666667e-05) + exp(-5723.2 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19] * sc[21]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[19] + g_RT[21] - g_RT[31])) * (refC) * (sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[19] -= qdot;
    wdot[21] -= qdot;
    wdot[31] += qdot;
  }

  {
    // reaction 21:  CH3 + O2 (+M) <=> CH3O2 (+M)
    const amrex::Real k_f = 783 * exp((1.2) * tc[0]);
    amrex::Real Corr = mixture;
    const amrex::Real redP = Corr / k_f * 58000000000000 * exp(-3.3 * tc[0]);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(0.336 * exp(-tc[1] * 1e-05) + 0.664 * exp(-tc[1] * 0.1) + 0.0);
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[9] * sc[10]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[9] + g_RT[10] - g_RT[37])) * (refC) * (sc[37]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[10] -= qdot;
    wdot[37] += qdot;
  }

  {
    // reaction 22:  H + aC3H5 (+M) <=> C3H6 (+M)
    const amrex::Real k_f = 200000000;
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 1.33e+48 * exp(-12 * tc[0] - 3003.09641818941 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.98 * exp(-tc[1] * 0.000911909538573774) +
      0.02 * exp(-tc[1] * 0.000911909538573774) + exp(-6859.5 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[28]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[28] - g_RT[29])) * (refC) * (sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[28] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 23:  CH3 + aC3H5 (+M) <=> C4H81 (+M)
    const amrex::Real k_f =
      100000000 * exp((-0.32) * tc[0] - (-131.993731440578) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 3.91e+48 * exp(-12.81 * tc[0] - 3145.1041612795 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.896 * exp(-tc[1] * 0.00062266500622665) +
      0.104 * exp(-tc[1] * 1.66666666666667e-05) + exp(-6118.4 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[10] * sc[28]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[10] + g_RT[28] - g_RT[31])) * (refC) * (sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[28] -= qdot;
    wdot[31] += qdot;
  }

  {
    // reaction 24:  C3H6 + H (+M) <=> nC3H7 (+M)
    const amrex::Real k_f = 13300000 * exp(-(1640.83858218945) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 6.26e+26 * exp(-6.66 * tc[0] - 3522.51666063304 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-tc[1] * 0.000763358778625954) + exp(-48097 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[29]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[29] - g_RT[30])) * (refC) * (sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[29] -= qdot;
    wdot[30] += qdot;
  }

  {
    // reaction 25:  CO + O (+M) <=> CO2 (+M)
    const amrex::Real k_f = 13620 * exp(-(1199.66853127845) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (11) * sc[7] +
                       (0.75) * sc[16] + (2.6) * sc[17];
    const amrex::Real redP =
      Corr / k_f * 1173000000000 * exp(-2.79 * tc[0] - 2108.98104638758 * invT);
    Corr = redP / (1.0 + redP);
    const amrex::Real qf = Corr * k_f * (sc[3] * sc[16]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[3] + g_RT[16] - g_RT[17])) * (refC) * (sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 26:  C2H2 (+M) <=> H2CC (+M)
    const amrex::Real k_f =
      800000000000000 * exp((-0.52) * tc[0] - (25538.2457895895) * invT);
    amrex::Real Corr = mixture + sc[6] + (5) * sc[7] + sc[11] + (0.5) * sc[16] +
                       sc[17] + (1.5) * sc[18] + (1.5) * sc[20] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 2450000000 * exp(-0.64 * tc[0] - 25009.8682904946 * invT);
    Corr = redP / (1.0 + redP);
    const amrex::Real qf = Corr * k_f * (sc[18]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[18] - g_RT_qss[4])) * (sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[18] -= qdot;
  }

  {
    // reaction 27:  2 H + M <=> H2 + M
    const amrex::Real k_f = 1780000 * exp((-1) * tc[0]);
    const amrex::Real Corr =
      mixture + (-0.37) * sc[0] + (-1) * sc[6] + (-1) * sc[7] + (-1) * sc[17];
    const amrex::Real qf = Corr * k_f * ((sc[2] * sc[2]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[2] - g_RT[6])) * (refC) * (sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= 2.000000 * qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 28:  2 H + H2 <=> H2 + H2
    const amrex::Real k_f = 90000 * exp((-0.6) * tc[0]);
    const amrex::Real qf = k_f * ((sc[2] * sc[2]) * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[2] - g_RT[6])) * (refC) * ((sc[6] * sc[6]));
    const amrex::Real qdot = qf - qr;
    wdot[2] -= 2.000000 * qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 29:  2 H + H2O <=> H2 + H2O
    const amrex::Real k_f = 56240000 * exp((-1.25) * tc[0]);
    const amrex::Real qf = k_f * ((sc[2] * sc[2]) * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[2] - g_RT[6])) * (refC) * (sc[6] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= 2.000000 * qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 30:  2 H + CO2 <=> H2 + CO2
    const amrex::Real k_f = 550000000 * exp((-2) * tc[0]);
    const amrex::Real qf = k_f * ((sc[2] * sc[2]) * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[2] - g_RT[6])) * (refC) * (sc[6] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= 2.000000 * qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 31:  H + OH + M <=> H2O + M
    const amrex::Real k_f = 44000000000 * exp((-2) * tc[0]);
    const amrex::Real Corr = mixture + (-0.62) * sc[0] + sc[6] + (5.3) * sc[7] +
                             (0.75) * sc[16] + (2.6) * sc[17];
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[4]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[4] - g_RT[7])) * (refC) * (sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] -= qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 32:  H + O + M <=> OH + M
    const amrex::Real k_f = 9428000 * exp((-1) * tc[0]);
    const amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (11) * sc[7] +
                             (0.75) * sc[16] + (2.6) * sc[17];
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[3]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[3] - g_RT[4])) * (refC) * (sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 33:  2 O + M <=> O2 + M
    const amrex::Real k_f = 120000 * exp((-1) * tc[0]);
    const amrex::Real Corr = mixture + (-0.17) * sc[0] + (1.4) * sc[6] +
                             (14.4) * sc[7] + (0.75) * sc[16] + (2.6) * sc[17];
    const amrex::Real qf = Corr * k_f * ((sc[3] * sc[3]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[3] - g_RT[9])) * (refC) * (sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= 2.000000 * qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 34:  HCO + M <=> CO + H + M
    const amrex::Real k_f =
      187000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
    const amrex::Real Corr =
      mixture + sc[6] + (-1) * sc[7] + (0.75) * sc[16] + (2.6) * sc[17];
    const amrex::Real qf = Corr * k_f * (sc[12]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[2] + g_RT[12] - g_RT[16])) *
                           (refCinv) * (sc[2] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[12] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 35:  HCO + H2O <=> CO + H + H2O
    const amrex::Real k_f =
      2244000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[12]);
    const amrex::Real qr = k_f * exp(-(-g_RT[2] + g_RT[12] - g_RT[16])) *
                           (refCinv) * (sc[2] * sc[7] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[12] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 36:  NO + O + M <=> NO2 + M
    const amrex::Real k_f = 106000000 * exp((-1.41) * tc[0]);
    const amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] +
                             sc[11] + (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real qf = Corr * k_f * (sc[3] * sc_qss[5]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[3] - g_RT[33] + g_RT_qss[5])) * (refC) * (sc[33]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[33] += qdot;
  }

  {
    // reaction 37:  NCO + M <=> CO + N + M
    const amrex::Real k_f = 310000000 * exp(-(27198.8607867451) * invT);
    const amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] +
                             sc[11] + (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real qf = Corr * k_f * (sc[36]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[16] - g_RT[32] + g_RT[36])) * (refCinv) *
                           (sc[16] * sc[32]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[32] += qdot;
    wdot[36] -= qdot;
  }

  {
    // reaction 38:  H + O2 <=> O + OH
    const amrex::Real k_f =
      26440000000 * exp((-0.6707) * tc[0] - (8575.31520197823) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[4] + g_RT[9])) * (sc[3] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[4] += qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 39:  H2 + O <=> H + OH
    const amrex::Real k_f =
      0.04589 * exp((2.7) * tc[0] - (3150.13632793755) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] - g_RT[4] + g_RT[6])) * (sc[2] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 40:  H2 + OH <=> H + H2O
    const amrex::Real k_f =
      173.4 * exp((1.51) * tc[0] - (1726.03316371019) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[6] - g_RT[7])) * (sc[2] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[6] -= qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 41:  2 OH <=> H2O + O
    const amrex::Real k_f =
      0.03973 * exp((2.4) * tc[0] - (-1061.78716484796) * invT);
    const amrex::Real qf = k_f * ((sc[4] * sc[4]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[4] - g_RT[7])) * (sc[3] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= 2.000000 * qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 42:  H2 + O2 <=> H + HO2
    const amrex::Real k_f =
      0.5916 * exp((2.433) * tc[0] - (26923.0980538841) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] - g_RT[5] + g_RT[6] + g_RT[9])) * (sc[2] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 43:  H + HO2 <=> H2O + O
    const amrex::Real k_f = 3970000 * exp(-(337.658382754967) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[3] + g_RT[5] - g_RT[7])) * (sc[3] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[5] -= qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 44:  H + HO2 <=> 2 OH
    const amrex::Real k_f = 74850000 * exp(-(148.448916412392) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - 2.000000 * g_RT[4] + g_RT[5])) * ((sc[4] * sc[4]));
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += 2.000000 * qdot;
    wdot[5] -= qdot;
  }

  {
    // reaction 45:  HO2 + O <=> O2 + OH
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[3] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[5] - g_RT[9])) * (sc[4] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 46:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f = 130000 * exp(-(-820.243165261693) * invT);
    const amrex::Real qf = k_f * ((sc[5] * sc[5]));
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[5] - g_RT[8] - g_RT[9])) * (sc[8] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= 2.000000 * qdot;
    wdot[8] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 47:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f = 365800000 * exp(-(6038.59998965664) * invT);
    const amrex::Real qf = k_f * ((sc[5] * sc[5]));
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[5] - g_RT[8] - g_RT[9])) * (sc[8] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= 2.000000 * qdot;
    wdot[8] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 48:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      1410000000000 * exp((-1.76) * tc[0] - (30.1929999482832) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] + g_RT[5] - g_RT[7] - g_RT[9])) * (sc[7] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] -= qdot;
    wdot[7] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 49:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      1.12e+79 * exp((-22.3) * tc[0] - (13536.528310147) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] + g_RT[5] - g_RT[7] - g_RT[9])) * (sc[7] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] -= qdot;
    wdot[7] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 50:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      5.37e+64 * exp((-16.72) * tc[0] - (16555.8283049753) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] + g_RT[5] - g_RT[7] - g_RT[9])) * (sc[7] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] -= qdot;
    wdot[7] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 51:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      2510000 * exp((2) * tc[0] - (20128.6666321888) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] + g_RT[5] - g_RT[7] - g_RT[9])) * (sc[7] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] -= qdot;
    wdot[7] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 52:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      1e+130 * exp((-40) * tc[0] - (17511.9399700042) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] + g_RT[5] - g_RT[7] - g_RT[9])) * (sc[7] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] -= qdot;
    wdot[7] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 53:  H + H2O2 <=> H2 + HO2
    const amrex::Real k_f = 6.05 * exp((2) * tc[0] - (2616.72666218454) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[5] - g_RT[6] + g_RT[8])) * (sc[5] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[5] += qdot;
    wdot[6] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 54:  H + H2O2 <=> H2O + OH
    const amrex::Real k_f = 24100000 * exp(-(1997.77016324474) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[7] + g_RT[8])) * (sc[4] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[7] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 55:  H2O2 + O <=> HO2 + OH
    const amrex::Real k_f = 9.63 * exp((2) * tc[0] - (1997.77016324474) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[5] + g_RT[8])) * (sc[4] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[5] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 56:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f = 2000000 * exp(-(214.873516298615) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[7] + g_RT[8])) * (sc[5] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[7] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 57:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f =
      2.67e+35 * exp((-7) * tc[0] - (18920.9466342575) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[7] + g_RT[8])) * (sc[5] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[7] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 58:  CO + OH <=> CO2 + H
    const amrex::Real k_f =
      0.07046 * exp((2.053) * tc[0] - (-178.979071526765) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[16] - g_RT[17])) * (sc[2] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 59:  CO + OH <=> CO2 + H
    const amrex::Real k_f =
      5757000 * exp((-0.664) * tc[0] - (166.98238621398) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[16] - g_RT[17])) * (sc[2] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 60:  CO + O2 <=> CO2 + O
    const amrex::Real k_f = 1119000 * exp(-(24003.4349588851) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[9] + g_RT[16] - g_RT[17])) * (sc[3] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 61:  CO + HO2 <=> CO2 + OH
    const amrex::Real k_f =
      0.157 * exp((2.18) * tc[0] - (9029.02038003442) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[16] - g_RT[17])) * (sc[4] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 62:  H + HCO <=> CO + H2
    const amrex::Real k_f = 120000000;
    const amrex::Real qf = k_f * (sc[2] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] + g_RT[12] - g_RT[16])) * (sc[6] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[12] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 63:  HCO + O <=> CO + OH
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[3] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[12] - g_RT[16])) * (sc[4] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[12] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 64:  HCO + O <=> CO2 + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[3] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[12] - g_RT[17])) * (sc[2] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[12] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 65:  HCO + OH <=> CO + H2O
    const amrex::Real k_f = 30200000;
    const amrex::Real qf = k_f * (sc[4] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] + g_RT[12] - g_RT[16])) * (sc[7] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[12] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 66:  HCO + O2 <=> CO + HO2
    const amrex::Real k_f =
      12040 * exp((0.807) * tc[0] - (-365.838516040031) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] + g_RT[12] - g_RT[16])) * (sc[5] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[12] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 67:  C + OH <=> CO + H
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[0]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[4] - g_RT[16] + g_RT_qss[0])) *
                           (sc[2] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 68:  C + O2 <=> CO + O
    const amrex::Real k_f = 58000000 * exp(-(289.852799503519) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc_qss[0]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[3] + g_RT[9] - g_RT[16] + g_RT_qss[0])) *
                           (sc[3] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 69:  CH + H <=> C + H2
    const amrex::Real k_f = 110000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[6] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 70:  CH + O <=> CO + H
    const amrex::Real k_f = 57000000;
    const amrex::Real qf = k_f * (sc[3] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[3] - g_RT[16] + g_RT_qss[1])) *
                           (sc[2] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 71:  CH + OH <=> H + HCO
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[4] - g_RT[12] + g_RT_qss[1])) *
                           (sc[2] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 72:  CH + H2 <=> CH2 + H
    const amrex::Real k_f =
      110.7 * exp((1.79) * tc[0] - (840.371831893882) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[6] + g_RT_qss[1] - g_RT_qss[2])) *
      (sc[2] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 73:  CH + H2O <=> CH2O + H
    const amrex::Real k_f = 5710000 * exp(-(-379.928582682563) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[7] - g_RT[13] + g_RT_qss[1])) *
                           (sc[2] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[7] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 74:  CH + O2 <=> HCO + O
    const amrex::Real k_f = 33000000;
    const amrex::Real qf = k_f * (sc[9] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[3] + g_RT[9] - g_RT[12] + g_RT_qss[1])) *
                           (sc[3] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 75:  CH + CO2 <=> CO + HCO
    const amrex::Real k_f = 3400000 * exp(-(347.219499405257) * invT);
    const amrex::Real qf = k_f * (sc[17] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[12] - g_RT[16] + g_RT[17] + g_RT_qss[1])) *
      (sc[12] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[16] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 76:  CH2 + O <=> H + HCO
    const amrex::Real k_f = 80000000;
    const amrex::Real qf = k_f * (sc[3] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[3] - g_RT[12] + g_RT_qss[2])) *
                           (sc[2] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 77:  CH2 + OH <=> CH2O + H
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[4] - g_RT[13] + g_RT_qss[2])) *
                           (sc[2] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 78:  CH2 + OH <=> CH + H2O
    const amrex::Real k_f = 11.3 * exp((2) * tc[0] - (1509.64999741416) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT_qss[1] + g_RT_qss[2])) *
      (sc[7] * sc_qss[1]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 79:  CH2 + H2 <=> CH3 + H
    const amrex::Real k_f = 0.5 * exp((2) * tc[0] - (3638.25649376812) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[6] - g_RT[10] + g_RT_qss[2])) *
                           (sc[2] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[6] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 80:  CH2 + O2 <=> HCO + OH
    const amrex::Real k_f = 10600000 * exp(-(754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[9] - g_RT[12] + g_RT_qss[2])) *
                           (sc[4] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[9] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 81:  CH2 + O2 <=> CO2 + 2 H
    const amrex::Real k_f = 2640000 * exp(-(754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-2.000000 * g_RT[2] + g_RT[9] - g_RT[17] + g_RT_qss[2])) *
      (refCinv) * ((sc[2] * sc[2]) * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += 2.000000 * qdot;
    wdot[9] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 82:  CH2 + HO2 <=> CH2O + OH
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[5] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[5] - g_RT[13] + g_RT_qss[2])) *
                           (sc[4] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 83:  CH + CH2 <=> C2H2 + H
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc_qss[1] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] - g_RT[18] + g_RT_qss[1] + g_RT_qss[2])) *
      (sc[2] * sc[18]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[2] += qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 84:  2 CH2 <=> C2H2 + H2
    const amrex::Real k_f = 32000000;
    const amrex::Real qf = k_f * (sc_qss[2] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] - g_RT[18] + 2.000000 * g_RT_qss[2])) *
      (sc[6] * sc[18]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[6] += qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 85:  CH2* + N2 <=> CH2 + N2
    const amrex::Real k_f = 15000000 * exp(-(301.929999482832) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[1] - g_RT_qss[2] + g_RT_qss[3])) *
      (sc[1] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[1] += qdot;
  }

  {
    // reaction 86:  AR + CH2* <=> AR + CH2
    const amrex::Real k_f = 9000000 * exp(-(301.929999482832) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[0] - g_RT_qss[2] + g_RT_qss[3])) *
      (sc[0] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[0] += qdot;
  }

  {
    // reaction 87:  CH2* + H <=> CH + H2
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT_qss[1] + g_RT_qss[3])) *
      (sc[6] * sc_qss[1]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 88:  CH2* + O <=> CO + H2
    const amrex::Real k_f = 15000000;
    const amrex::Real qf = k_f * (sc[3] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[6] - g_RT[16] + g_RT_qss[3])) *
                           (sc[6] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 89:  CH2* + O <=> H + HCO
    const amrex::Real k_f = 15000000;
    const amrex::Real qf = k_f * (sc[3] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[3] - g_RT[12] + g_RT_qss[3])) *
                           (sc[2] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 90:  CH2* + OH <=> CH2O + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[4] - g_RT[13] + g_RT_qss[3])) *
                           (sc[2] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 91:  CH2* + H2 <=> CH3 + H
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[6] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[6] - g_RT[10] + g_RT_qss[3])) *
                           (sc[2] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[6] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 92:  CH2* + O2 <=> CO + H + OH
    const amrex::Real k_f = 28000000;
    const amrex::Real qf = k_f * (sc[9] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] - g_RT[4] + g_RT[9] - g_RT[16] + g_RT_qss[3])) *
      (refCinv) * (sc[2] * sc[4] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] += qdot;
    wdot[9] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 93:  CH2* + O2 <=> CO + H2O
    const amrex::Real k_f = 12000000;
    const amrex::Real qf = k_f * (sc[9] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[7] + g_RT[9] - g_RT[16] + g_RT_qss[3])) *
                           (sc[7] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[7] += qdot;
    wdot[9] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 94:  CH2* + H2O <=> CH2 + H2O
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[7] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[7] - g_RT[7] - g_RT_qss[2] + g_RT_qss[3])) *
      (sc[7] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[7] -= qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 95:  CH2* + CO <=> CH2 + CO
    const amrex::Real k_f = 9000000;
    const amrex::Real qf = k_f * (sc[16] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[16] - g_RT[16] - g_RT_qss[2] + g_RT_qss[3])) *
      (sc[16] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[16] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 96:  CH2* + CO2 <=> CH2 + CO2
    const amrex::Real k_f = 7000000;
    const amrex::Real qf = k_f * (sc[17] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[17] - g_RT[17] - g_RT_qss[2] + g_RT_qss[3])) *
      (sc[17] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[17] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 97:  CH2* + CO2 <=> CH2O + CO
    const amrex::Real k_f = 14000000;
    const amrex::Real qf = k_f * (sc[17] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[13] - g_RT[16] + g_RT[17] + g_RT_qss[3])) *
      (sc[13] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[16] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 98:  CH2O + H <=> H2 + HCO
    const amrex::Real k_f =
      23000 * exp((1.05) * tc[0] - (1648.03458051046) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[12] + g_RT[13])) * (sc[6] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 99:  CH2O + O <=> HCO + OH
    const amrex::Real k_f = 39000000 * exp(-(1781.38699694871) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[12] + g_RT[13])) * (sc[4] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 100:  CH2O + OH <=> H2O + HCO
    const amrex::Real k_f =
      3430 * exp((1.18) * tc[0] - (-224.93784961471) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[12] + g_RT[13])) * (sc[7] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 101:  CH2O + O2 <=> HCO + HO2
    const amrex::Real k_f = 100000000 * exp(-(20128.6666321888) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[12] + g_RT[13])) * (sc[5] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 102:  CH2O + HO2 <=> H2O2 + HCO
    const amrex::Real k_f = 1000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[8] - g_RT[12] + g_RT[13])) * (sc[8] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[8] += qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 103:  CH + CH2O <=> CH2CO + H
    const amrex::Real k_f = 94600000 * exp(-(-259.156582889431) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[13] - g_RT[24] + g_RT_qss[1])) *
      (sc[2] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[13] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 104:  CH3 + O <=> CH2O + H
    const amrex::Real k_f = 84300000;
    const amrex::Real qf = k_f * (sc[3] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[10] - g_RT[13])) * (sc[2] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[10] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 105:  CH3 + OH <=> CH2 + H2O
    const amrex::Real k_f = 56 * exp((1.6) * tc[0] - (2727.43432866158) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[10]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[7] + g_RT[10] - g_RT_qss[2])) *
                           (sc[7] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 106:  CH3 + OH <=> CH2* + H2O
    const amrex::Real k_f = 25010000;
    const amrex::Real qf = k_f * (sc[4] * sc[10]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[7] + g_RT[10] - g_RT_qss[3])) *
                           (sc[7] * sc_qss[3]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 107:  CH3 + O2 <=> CH3O + O
    const amrex::Real k_f = 30830000 * exp(-(14492.6399751759) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[9] + g_RT[10] - g_RT[14])) * (sc[3] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[10] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 108:  CH3 + O2 <=> CH2O + OH
    const amrex::Real k_f = 36000 * exp(-(4498.75699229419) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[9] + g_RT[10] - g_RT[13])) * (sc[4] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[9] -= qdot;
    wdot[10] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 109:  CH3 + HO2 <=> CH4 + O2
    const amrex::Real k_f = 1000000;
    const amrex::Real qf = k_f * (sc[5] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[9] + g_RT[10] - g_RT[11])) * (sc[9] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 110:  CH3 + HO2 <=> CH3O + OH
    const amrex::Real k_f = 13400000;
    const amrex::Real qf = k_f * (sc[5] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[10] - g_RT[14])) * (sc[4] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[10] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 111:  CH3 + H2O2 <=> CH4 + HO2
    const amrex::Real k_f =
      0.0245 * exp((2.47) * tc[0] - (2606.66232886845) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[8] + g_RT[10] - g_RT[11])) * (sc[5] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[8] -= qdot;
    wdot[10] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 112:  C + CH3 <=> C2H2 + H
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[10] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[10] - g_RT[18] + g_RT_qss[0])) *
      (sc[2] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[10] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 113:  CH + CH3 <=> C2H3 + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[10] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[10] - g_RT[19] + g_RT_qss[1])) *
      (sc[2] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[10] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 114:  CH3 + HCO <=> CH4 + CO
    const amrex::Real k_f = 8480000;
    const amrex::Real qf = k_f * (sc[10] * sc[12]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] + g_RT[12] - g_RT[16])) *
                           (sc[11] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 115:  CH2O + CH3 <=> CH4 + HCO
    const amrex::Real k_f =
      0.00332 * exp((2.81) * tc[0] - (2948.84966161566) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[12] + g_RT[13])) *
                           (sc[11] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 116:  CH2 + CH3 <=> C2H4 + H
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[10] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[10] - g_RT[20] + g_RT_qss[2])) *
      (sc[2] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[10] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 117:  CH2* + CH3 <=> C2H4 + H
    const amrex::Real k_f = 12000000 * exp(-(-286.83349950869) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[10] - g_RT[20] + g_RT_qss[3])) *
      (sc[2] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[10] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 118:  2 CH3 <=> C2H5 + H
    const amrex::Real k_f =
      4990000 * exp((0.1) * tc[0] - (5334.09665753003) * invT);
    const amrex::Real qf = k_f * ((sc[10] * sc[10]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + 2.000000 * g_RT[10] - g_RT[21])) *
                           (sc[2] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[10] -= 2.000000 * qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 119:  CH3 + HCCO <=> C2H4 + CO
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[10] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[16] - g_RT[20] + g_RT[23])) *
                           (sc[16] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[16] += qdot;
    wdot[20] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 120:  CH3O + H <=> CH2O + H2
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[2] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[13] + g_RT[14])) * (sc[6] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[13] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 121:  CH3O + H <=> CH3 + OH
    const amrex::Real k_f = 32000000;
    const amrex::Real qf = k_f * (sc[2] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[10] + g_RT[14])) * (sc[4] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[10] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 122:  CH3O + H <=> CH2* + H2O
    const amrex::Real k_f = 16000000;
    const amrex::Real qf = k_f * (sc[2] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[7] + g_RT[14] - g_RT_qss[3])) *
                           (sc[7] * sc_qss[3]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[7] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 123:  CH3O + O <=> CH2O + OH
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[3] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[13] + g_RT[14])) * (sc[4] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[13] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 124:  CH3O + OH <=> CH2O + H2O
    const amrex::Real k_f = 5000000;
    const amrex::Real qf = k_f * (sc[4] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[13] + g_RT[14])) * (sc[7] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[13] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 125:  CH3O + O2 <=> CH2O + HO2
    const amrex::Real k_f =
      4.28e-19 * exp((7.6) * tc[0] - (-1776.35483029066) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[13] + g_RT[14])) * (sc[5] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[13] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 126:  CH4 + H <=> CH3 + H2
    const amrex::Real k_f =
      660 * exp((1.62) * tc[0] - (5454.86865732316) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[10] + g_RT[11])) * (sc[6] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[10] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 127:  CH4 + O <=> CH3 + OH
    const amrex::Real k_f =
      1020 * exp((1.5) * tc[0] - (4327.66332592059) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[10] + g_RT[11])) * (sc[4] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[10] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 128:  CH4 + OH <=> CH3 + H2O
    const amrex::Real k_f =
      100 * exp((1.6) * tc[0] - (1570.03599731073) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[10] + g_RT[11])) * (sc[7] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[10] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 129:  CH + CH4 <=> C2H4 + H
    const amrex::Real k_f = 60000000;
    const amrex::Real qf = k_f * (sc[11] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[11] - g_RT[20] + g_RT_qss[1])) *
      (sc[2] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[11] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 130:  CH2 + CH4 <=> 2 CH3
    const amrex::Real k_f = 2.46 * exp((2) * tc[0] - (4161.60182620503) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-2.000000 * g_RT[10] + g_RT[11] + g_RT_qss[2])) *
      ((sc[10] * sc[10]));
    const amrex::Real qdot = qf - qr;
    wdot[10] += 2.000000 * qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 131:  CH2* + CH4 <=> 2 CH3
    const amrex::Real k_f = 16000000 * exp(-(-286.83349950869) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(-2.000000 * g_RT[10] + g_RT[11] + g_RT_qss[3])) *
      ((sc[10] * sc[10]));
    const amrex::Real qdot = qf - qr;
    wdot[10] += 2.000000 * qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 132:  CH3OH + H <=> CH3O + H2
    const amrex::Real k_f =
      4.2 * exp((2.1) * tc[0] - (2450.66516246898) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[14] + g_RT[15])) * (sc[6] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[14] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 133:  CH3OH + O <=> CH3O + OH
    const amrex::Real k_f =
      0.13 * exp((2.5) * tc[0] - (2516.0833290236) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[14] + g_RT[15])) * (sc[4] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[14] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 134:  CH3OH + OH <=> CH3O + H2O
    const amrex::Real k_f = 6.3 * exp((2) * tc[0] - (754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[14] + g_RT[15])) * (sc[7] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[14] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 135:  CH3 + CH3OH <=> CH3O + CH4
    const amrex::Real k_f = 10 * exp((1.5) * tc[0] - (5001.97365809891) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[14] + g_RT[15])) *
                           (sc[11] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[14] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 136:  H + HCCO <=> CH2* + CO
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[2] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[16] + g_RT[23] - g_RT_qss[3])) *
                           (sc[16] * sc_qss[3]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[16] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 137:  HCCO + O <=> 2 CO + H
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[3] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] - 2.000000 * g_RT[16] + g_RT[23])) *
      (refCinv) * (sc[2] * (sc[16] * sc[16]));
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[16] += 2.000000 * qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 138:  HCCO + O2 <=> 2 CO + OH
    const amrex::Real k_f = 1600000 * exp(-(429.747032597231) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[9] - 2.000000 * g_RT[16] + g_RT[23])) *
      (refCinv) * (sc[4] * (sc[16] * sc[16]));
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[9] -= qdot;
    wdot[16] += 2.000000 * qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 139:  CH + HCCO <=> C2H2 + CO
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[23] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[16] - g_RT[18] + g_RT[23] + g_RT_qss[1])) *
      (sc[16] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[18] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 140:  CH2 + HCCO <=> C2H3 + CO
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[23] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[16] - g_RT[19] + g_RT[23] + g_RT_qss[2])) *
      (sc[16] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[19] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 141:  2 HCCO <=> C2H2 + 2 CO
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * ((sc[23] * sc[23]));
    const amrex::Real qr =
      k_f * exp(-(-2.000000 * g_RT[16] - g_RT[18] + 2.000000 * g_RT[23])) *
      (refCinv) * ((sc[16] * sc[16]) * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += 2.000000 * qdot;
    wdot[18] += qdot;
    wdot[23] -= 2.000000 * qdot;
  }

  {
    // reaction 142:  C2H2 + O <=> CH2 + CO
    const amrex::Real k_f = 4.08 * exp((2) * tc[0] - (956.111665028967) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[16] + g_RT[18] - g_RT_qss[2])) *
                           (sc[16] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[16] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 143:  C2H2 + O <=> H + HCCO
    const amrex::Real k_f =
      16.32 * exp((2) * tc[0] - (956.111665028967) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[18] - g_RT[23])) * (sc[2] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[18] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 144:  C2H2 + OH <=> CH2CO + H
    const amrex::Real k_f =
      2.18e-10 * exp((4.5) * tc[0] - (-503.21666580472) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[18] - g_RT[24])) * (sc[2] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[18] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 145:  C2H2 + OH <=> CH3 + CO
    const amrex::Real k_f =
      4.83e-10 * exp((4) * tc[0] - (-1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[10] - g_RT[16] + g_RT[18])) *
                           (sc[10] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[10] += qdot;
    wdot[16] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 146:  C2H2 + HCO <=> C2H3 + CO
    const amrex::Real k_f = 10 * exp((2) * tc[0] - (3019.29999482832) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[16] + g_RT[18] - g_RT[19])) *
                           (sc[16] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[16] += qdot;
    wdot[18] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 147:  C2H2 + CH3 <=> H + aC3H4
    const amrex::Real k_f =
      5140 * exp((0.86) * tc[0] - (11147.758797572) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[10] + g_RT[18] - g_RT[27])) *
                           (sc[2] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[10] -= qdot;
    wdot[18] -= qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 148:  C2H2 + CH3 <=> aC3H5
    const amrex::Real k_f =
      2.68e+47 * exp((-12.82) * tc[0] - (17979.9314692026) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[10] + g_RT[18] - g_RT[28])) * (refC) * (sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[18] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 149:  H + H2CC <=> C2H2 + H
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[4]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[2] - g_RT[18] + g_RT_qss[4])) *
                           (sc[2] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[2] += qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 150:  H2CC + OH <=> CH2CO + H
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[4]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[4] - g_RT[24] + g_RT_qss[4])) *
                           (sc[2] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 151:  H2CC + O2 <=> 2 HCO
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[9] * sc_qss[4]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - 2.000000 * g_RT[12] + g_RT_qss[4])) *
                           ((sc[12] * sc[12]));
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[12] += 2.000000 * qdot;
  }

  {
    // reaction 152:  CH2CO + H <=> H2 + HCCO
    const amrex::Real k_f = 50000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[23] + g_RT[24])) * (sc[6] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 153:  CH2CO + H <=> CH3 + CO
    const amrex::Real k_f =
      1500 * exp((1.43) * tc[0] - (1353.6528310147) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[10] - g_RT[16] + g_RT[24])) *
                           (sc[10] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[10] += qdot;
    wdot[16] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 154:  CH2CO + O <=> HCCO + OH
    const amrex::Real k_f = 10000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[23] + g_RT[24])) * (sc[4] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 155:  CH2CO + O <=> CH2 + CO2
    const amrex::Real k_f = 1750000 * exp(-(679.342498836372) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[17] + g_RT[24] - g_RT_qss[2])) *
                           (sc[17] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[17] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 156:  CH2CO + OH <=> H2O + HCCO
    const amrex::Real k_f = 7500000 * exp(-(1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[23] + g_RT[24])) * (sc[7] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 157:  C2H3 + H <=> C2H2 + H2
    const amrex::Real k_f = 90000000;
    const amrex::Real qf = k_f * (sc[2] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[18] + g_RT[19])) * (sc[6] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[18] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 158:  C2H3 + H <=> H2 + H2CC
    const amrex::Real k_f = 60000000;
    const amrex::Real qf = k_f * (sc[2] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[6] + g_RT[19] - g_RT_qss[4])) *
                           (sc[6] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 159:  C2H3 + O <=> CH2CO + H
    const amrex::Real k_f = 48000000;
    const amrex::Real qf = k_f * (sc[3] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[19] - g_RT[24])) * (sc[2] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[19] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 160:  C2H3 + O <=> CH3 + CO
    const amrex::Real k_f = 48000000;
    const amrex::Real qf = k_f * (sc[3] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[10] - g_RT[16] + g_RT[19])) *
                           (sc[10] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[10] += qdot;
    wdot[16] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 161:  C2H3 + OH <=> C2H2 + H2O
    const amrex::Real k_f = 30110000;
    const amrex::Real qf = k_f * (sc[4] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[18] + g_RT[19])) * (sc[7] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[18] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 162:  C2H3 + O2 <=> C2H2 + HO2
    const amrex::Real k_f =
      1.34 * exp((1.61) * tc[0] - (-192.93326966953) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[18] + g_RT[19])) * (sc[5] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[18] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 163:  C2H3 + O2 <=> CH2CHO + O
    const amrex::Real k_f =
      300000 * exp((0.29) * tc[0] - (5.53538332385192) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[9] + g_RT[19] - g_RT[25])) * (sc[3] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[19] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 164:  C2H3 + O2 <=> CH2O + HCO
    const amrex::Real k_f =
      46000000000 * exp((-1.39) * tc[0] - (508.248832462767) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[12] - g_RT[13] + g_RT[19])) *
                           (sc[12] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[12] += qdot;
    wdot[13] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 165:  C2H3 + HO2 <=> CH2CHO + OH
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[5] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[19] - g_RT[25])) * (sc[4] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[19] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 166:  C2H3 + H2O2 <=> C2H4 + HO2
    const amrex::Real k_f = 12100 * exp(-(-299.917132819613) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[8] + g_RT[19] - g_RT[20])) * (sc[5] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[8] -= qdot;
    wdot[19] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 167:  C2H3 + HCO <=> C2H4 + CO
    const amrex::Real k_f = 90330000;
    const amrex::Real qf = k_f * (sc[12] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[16] + g_RT[19] - g_RT[20])) *
                           (sc[16] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[16] += qdot;
    wdot[19] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 168:  C2H3 + CH3 <=> C2H2 + CH4
    const amrex::Real k_f = 392000;
    const amrex::Real qf = k_f * (sc[10] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[18] + g_RT[19])) *
                           (sc[11] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[18] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 169:  C2H3 + CH3 <=> H + aC3H5
    const amrex::Real k_f =
      1.5e+18 * exp((-2.83) * tc[0] - (9368.88788395227) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[10] + g_RT[19] - g_RT[28])) *
                           (sc[2] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[10] -= qdot;
    wdot[19] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 170:  2 C2H3 <=> C2H2 + C2H4
    const amrex::Real k_f = 960000;
    const amrex::Real qf = k_f * ((sc[19] * sc[19]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[18] + 2.000000 * g_RT[19] - g_RT[20])) *
                           (sc[18] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[18] += qdot;
    wdot[19] -= 2.000000 * qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 171:  CH2CHO <=> CH3 + CO
    const amrex::Real k_f =
      7.8e+41 * exp((-9.147) * tc[0] - (23600.8616262414) * invT);
    const amrex::Real qf = k_f * (sc[25]);
    const amrex::Real qr = k_f * exp(-(-g_RT[10] - g_RT[16] + g_RT[25])) *
                           (refCinv) * (sc[10] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[16] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 172:  CH2CHO + H <=> CH3 + HCO
    const amrex::Real k_f = 90000000;
    const amrex::Real qf = k_f * (sc[2] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[10] - g_RT[12] + g_RT[25])) *
                           (sc[10] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[10] += qdot;
    wdot[12] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 173:  CH2CHO + H <=> CH2CO + H2
    const amrex::Real k_f = 20000000 * exp(-(2012.86666321888) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[24] + g_RT[25])) * (sc[6] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[24] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 174:  CH2CHO + O <=> CH2CO + OH
    const amrex::Real k_f = 20000000 * exp(-(2012.86666321888) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[24] + g_RT[25])) * (sc[4] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[24] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 175:  CH2CHO + OH <=> CH2CO + H2O
    const amrex::Real k_f = 10000000 * exp(-(1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[24] + g_RT[25])) * (sc[7] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[24] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 176:  CH2CHO + O2 <=> CH2CO + HO2
    const amrex::Real k_f = 140000;
    const amrex::Real qf = k_f * (sc[9] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[24] + g_RT[25])) * (sc[5] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[24] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 177:  CH2CHO + O2 <=> CH2O + CO + OH
    const amrex::Real k_f = 18000;
    const amrex::Real qf = k_f * (sc[9] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[9] - g_RT[13] - g_RT[16] + g_RT[25])) *
      (refCinv) * (sc[4] * sc[13] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[9] -= qdot;
    wdot[13] += qdot;
    wdot[16] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 178:  CH2OCH2 <=> CH3 + HCO
    const amrex::Real k_f = 36300000000000 * exp(-(28783.99328403) * invT);
    const amrex::Real qf = k_f * (sc[26]);
    const amrex::Real qr = k_f * exp(-(-g_RT[10] - g_RT[12] + g_RT[26])) *
                           (refCinv) * (sc[10] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[12] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 179:  CH2OCH2 <=> CH4 + CO
    const amrex::Real k_f = 12100000000000 * exp(-(28783.99328403) * invT);
    const amrex::Real qf = k_f * (sc[26]);
    const amrex::Real qr = k_f * exp(-(-g_RT[11] - g_RT[16] + g_RT[26])) *
                           (refCinv) * (sc[11] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[16] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 180:  CH2OCH2 + H <=> C2H3 + H2O
    const amrex::Real k_f = 5000 * exp(-(2516.0833290236) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[7] - g_RT[19] + g_RT[26])) * (sc[7] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[7] += qdot;
    wdot[19] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 181:  CH2OCH2 + H <=> C2H4 + OH
    const amrex::Real k_f = 95100 * exp(-(2516.0833290236) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[20] + g_RT[26])) * (sc[4] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[20] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 182:  C2H4 + H <=> C2H3 + H2
    const amrex::Real k_f =
      50.7 * exp((1.9) * tc[0] - (6516.65582217112) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[19] + g_RT[20])) * (sc[6] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 183:  C2H4 + O <=> C2H3 + OH
    const amrex::Real k_f =
      15.1 * exp((1.9) * tc[0] - (1882.03033010965) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[19] + g_RT[20])) * (sc[4] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 184:  C2H4 + O <=> CH3 + HCO
    const amrex::Real k_f =
      19.2 * exp((1.83) * tc[0] - (110.707666477038) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[10] - g_RT[12] + g_RT[20])) *
                           (sc[10] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[10] += qdot;
    wdot[12] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 185:  C2H4 + O <=> CH2 + CH2O
    const amrex::Real k_f =
      0.384 * exp((1.83) * tc[0] - (110.707666477038) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[13] + g_RT[20] - g_RT_qss[2])) *
                           (sc[13] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[13] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 186:  C2H4 + OH <=> C2H3 + H2O
    const amrex::Real k_f = 3.6 * exp((2) * tc[0] - (1258.0416645118) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[19] + g_RT[20])) * (sc[7] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 187:  C2H4 + HCO <=> C2H5 + CO
    const amrex::Real k_f = 10 * exp((2) * tc[0] - (4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[16] + g_RT[20] - g_RT[21])) *
                           (sc[16] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[16] += qdot;
    wdot[20] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 188:  C2H4 + CH <=> H + aC3H4
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[20] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[20] - g_RT[27] + g_RT_qss[1])) *
      (sc[2] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[20] -= qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 189:  C2H4 + CH2 <=> H + aC3H5
    const amrex::Real k_f = 20000000 * exp(-(3019.29999482832) * invT);
    const amrex::Real qf = k_f * (sc[20] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[20] - g_RT[28] + g_RT_qss[2])) *
      (sc[2] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[20] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 190:  C2H4 + CH2* <=> CH4 + H2CC
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[20] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[11] + g_RT[20] + g_RT_qss[3] - g_RT_qss[4])) *
      (sc[11] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 191:  C2H4 + CH2* <=> H + aC3H5
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[20] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[20] - g_RT[28] + g_RT_qss[3])) *
      (sc[2] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[20] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 192:  C2H4 + CH3 <=> C2H3 + CH4
    const amrex::Real k_f =
      0.227 * exp((2) * tc[0] - (4629.59332540342) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[19] + g_RT[20])) *
                           (sc[11] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 193:  C2H4 + CH3 <=> nC3H7
    const amrex::Real k_f = 330000 * exp(-(3874.76832669634) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[10] + g_RT[20] - g_RT[30])) * (refC) * (sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[20] -= qdot;
    wdot[30] += qdot;
  }

  {
    // reaction 194:  C2H4 + O2 <=> C2H3 + HO2
    const amrex::Real k_f = 42200000 * exp(-(30595.573280927) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[19] + g_RT[20])) * (sc[5] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 195:  C2H4 + HO2 <=> CH2OCH2 + OH
    const amrex::Real k_f = 2820000 * exp(-(8605.00498526071) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[20] - g_RT[26])) * (sc[4] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[20] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 196:  C2H5 + H <=> C2H4 + H2
    const amrex::Real k_f = 2000000;
    const amrex::Real qf = k_f * (sc[2] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[20] + g_RT[21])) * (sc[6] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[20] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 197:  C2H5 + O <=> CH2O + CH3
    const amrex::Real k_f = 16040000;
    const amrex::Real qf = k_f * (sc[3] * sc[21]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[10] - g_RT[13] + g_RT[21])) *
                           (sc[10] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[10] += qdot;
    wdot[13] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 198:  C2H5 + O2 <=> C2H4 + HO2
    const amrex::Real k_f = 20000;
    const amrex::Real qf = k_f * (sc[9] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[20] + g_RT[21])) * (sc[5] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[20] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 199:  C2H5 + HO2 <=> C2H6 + O2
    const amrex::Real k_f = 300000;
    const amrex::Real qf = k_f * (sc[5] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[9] + g_RT[21] - g_RT[22])) * (sc[9] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[9] += qdot;
    wdot[21] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 200:  C2H5 + HO2 <=> C2H4 + H2O2
    const amrex::Real k_f = 300000;
    const amrex::Real qf = k_f * (sc[5] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[8] - g_RT[20] + g_RT[21])) * (sc[8] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[8] += qdot;
    wdot[20] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 201:  C2H5 + HO2 <=> CH2O + CH3 + OH
    const amrex::Real k_f = 24000000;
    const amrex::Real qf = k_f * (sc[5] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[5] - g_RT[10] - g_RT[13] + g_RT[21])) *
      (refCinv) * (sc[4] * sc[10] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[10] += qdot;
    wdot[13] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 202:  C2H5 + H2O2 <=> C2H6 + HO2
    const amrex::Real k_f = 8700 * exp(-(490.133032493797) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[8] + g_RT[21] - g_RT[22])) * (sc[5] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[8] -= qdot;
    wdot[21] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 203:  C2H3 + C2H5 <=> CH3 + aC3H5
    const amrex::Real k_f =
      3.9e+26 * exp((-5.22) * tc[0] - (9937.0194996458) * invT);
    const amrex::Real qf = k_f * (sc[19] * sc[21]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[19] + g_RT[21] - g_RT[28])) *
                           (sc[10] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[19] -= qdot;
    wdot[21] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 204:  C2H6 + H <=> C2H5 + H2
    const amrex::Real k_f =
      115 * exp((1.9) * tc[0] - (3789.22149350954) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[21] + g_RT[22])) * (sc[6] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 205:  C2H6 + O <=> C2H5 + OH
    const amrex::Real k_f =
      89.8 * exp((1.92) * tc[0] - (2863.30282842885) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[21] + g_RT[22])) * (sc[4] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 206:  C2H6 + OH <=> C2H5 + H2O
    const amrex::Real k_f =
      3.54 * exp((2.12) * tc[0] - (437.798499250106) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[21] + g_RT[22])) * (sc[7] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 207:  C2H6 + CH2* <=> C2H5 + CH3
    const amrex::Real k_f = 40000000 * exp(-(-276.769166192596) * invT);
    const amrex::Real qf = k_f * (sc[22] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[10] - g_RT[21] + g_RT[22] + g_RT_qss[3])) *
      (sc[10] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 208:  C2H6 + CH3 <=> C2H5 + CH4
    const amrex::Real k_f =
      6.14 * exp((1.74) * tc[0] - (5258.61415765932) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[21] + g_RT[22])) *
                           (sc[11] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 209:  CH3O2 + HO2 <=> CH2O + H2O + O2
    const amrex::Real k_f = 18000 * exp(-(-720.103048766554) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[37]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[7] - g_RT[9] - g_RT[13] + g_RT[37])) *
      (refCinv) * (sc[7] * sc[9] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[7] += qdot;
    wdot[9] += qdot;
    wdot[13] += qdot;
    wdot[37] -= qdot;
  }

  {
    // reaction 210:  2 CH3O2 <=> CH2O + CH3OH + O2
    const amrex::Real k_f = 1046 * exp(-(-1806.04461357314) * invT);
    const amrex::Real qf = k_f * ((sc[37] * sc[37]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[9] - g_RT[13] - g_RT[15] + 2.000000 * g_RT[37])) *
      (refCinv) * (sc[9] * sc[13] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[13] += qdot;
    wdot[15] += qdot;
    wdot[37] -= 2.000000 * qdot;
  }

  {
    // reaction 211:  2 CH3O2 <=> 2 CH3O + O2
    const amrex::Real k_f = 77410 * exp(-(-30.6962166140879) * invT);
    const amrex::Real qf = k_f * ((sc[37] * sc[37]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[9] - 2.000000 * g_RT[14] + 2.000000 * g_RT[37])) *
      (refCinv) * (sc[9] * (sc[14] * sc[14]));
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[14] += 2.000000 * qdot;
    wdot[37] -= 2.000000 * qdot;
  }

  {
    // reaction 212:  CH3 + CH3O2 <=> 2 CH3O
    const amrex::Real k_f = 1000000 * exp(-(-710.038715450459) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[37]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - 2.000000 * g_RT[14] + g_RT[37])) *
                           ((sc[14] * sc[14]));
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[14] += 2.000000 * qdot;
    wdot[37] -= qdot;
  }

  {
    // reaction 213:  CH3O2 + OH <=> CH3OH + O2
    const amrex::Real k_f = 60000000;
    const amrex::Real qf = k_f * (sc[4] * sc[37]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[9] - g_RT[15] + g_RT[37])) * (sc[9] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[9] += qdot;
    wdot[15] += qdot;
    wdot[37] -= qdot;
  }

  {
    // reaction 214:  CH3O2 + H <=> CH3O + OH
    const amrex::Real k_f = 96000000;
    const amrex::Real qf = k_f * (sc[2] * sc[37]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[14] + g_RT[37])) * (sc[4] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[14] += qdot;
    wdot[37] -= qdot;
  }

  {
    // reaction 215:  CH3O2 + O <=> CH3O + O2
    const amrex::Real k_f = 36000000;
    const amrex::Real qf = k_f * (sc[3] * sc[37]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[9] - g_RT[14] + g_RT[37])) * (sc[9] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[9] += qdot;
    wdot[14] += qdot;
    wdot[37] -= qdot;
  }

  {
    // reaction 216:  H + aC3H4 <=> aC3H5
    const amrex::Real k_f =
      1.52e+53 * exp((-13.54) * tc[0] - (13561.1859267714) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] + g_RT[27] - g_RT[28])) * (refC) * (sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[27] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 217:  O + aC3H4 <=> C2H4 + CO
    const amrex::Real k_f = 20 * exp((1.8) * tc[0] - (503.21666580472) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[27]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[16] - g_RT[20] + g_RT[27])) *
                           (sc[16] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[16] += qdot;
    wdot[20] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 218:  H + aC3H5 <=> H2 + aC3H4
    const amrex::Real k_f = 18000000;
    const amrex::Real qf = k_f * (sc[2] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[27] + g_RT[28])) * (sc[6] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[27] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 219:  OH + aC3H5 <=> H2O + aC3H4
    const amrex::Real k_f = 6000000;
    const amrex::Real qf = k_f * (sc[4] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[27] + g_RT[28])) * (sc[7] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[27] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 220:  O2 + aC3H5 <=> HO2 + aC3H4
    const amrex::Real k_f =
      4990000000 * exp((-1.4) * tc[0] - (11286.1433806683) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[27] + g_RT[28])) * (sc[5] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[27] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 221:  HO2 + aC3H5 <=> C3H6 + O2
    const amrex::Real k_f = 2660000;
    const amrex::Real qf = k_f * (sc[5] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[9] + g_RT[28] - g_RT[29])) * (sc[9] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[9] += qdot;
    wdot[28] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 222:  HO2 + aC3H5 <=> C2H3 + CH2O + OH
    const amrex::Real k_f = 6600000;
    const amrex::Real qf = k_f * (sc[5] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[5] - g_RT[13] - g_RT[19] + g_RT[28])) *
      (refCinv) * (sc[4] * sc[13] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[13] += qdot;
    wdot[19] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 223:  HCO + aC3H5 <=> C3H6 + CO
    const amrex::Real k_f = 60000000;
    const amrex::Real qf = k_f * (sc[12] * sc[28]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[16] + g_RT[28] - g_RT[29])) *
                           (sc[16] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[16] += qdot;
    wdot[28] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 224:  CH3 + aC3H5 <=> CH4 + aC3H4
    const amrex::Real k_f =
      3000000 * exp((-0.32) * tc[0] - (-65.9213832204183) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[28]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[27] + g_RT[28])) *
                           (sc[11] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[27] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 225:  C3H6 + H <=> C2H4 + CH3
    const amrex::Real k_f =
      8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[29]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[10] - g_RT[20] + g_RT[29])) *
                           (sc[10] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[10] += qdot;
    wdot[20] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 226:  C3H6 + H <=> H2 + aC3H5
    const amrex::Real k_f =
      0.173 * exp((2.5) * tc[0] - (1253.00949785375) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[28] + g_RT[29])) * (sc[6] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[28] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 227:  C3H6 + O <=> CH2CO + CH3 + H
    const amrex::Real k_f =
      80 * exp((1.65) * tc[0] - (164.551849718143) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] - g_RT[10] - g_RT[24] + g_RT[29])) *
      (refCinv) * (sc[2] * sc[10] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[10] += qdot;
    wdot[24] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 228:  C3H6 + O <=> C2H5 + HCO
    const amrex::Real k_f =
      35 * exp((1.65) * tc[0] - (-489.126599162188) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[29]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[12] - g_RT[21] + g_RT[29])) *
                           (sc[12] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[12] += qdot;
    wdot[21] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 229:  C3H6 + O <=> OH + aC3H5
    const amrex::Real k_f =
      180000 * exp((0.7) * tc[0] - (2958.91399493175) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[28] + g_RT[29])) * (sc[4] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[28] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 230:  C3H6 + OH <=> H2O + aC3H5
    const amrex::Real k_f = 3.1 * exp((2) * tc[0] - (-149.958566409806) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[28] + g_RT[29])) * (sc[7] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[28] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 231:  C3H6 + HO2 <=> H2O2 + aC3H5
    const amrex::Real k_f =
      0.0096 * exp((2.6) * tc[0] - (6999.74382134365) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[8] - g_RT[28] + g_RT[29])) * (sc[8] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[8] += qdot;
    wdot[28] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 232:  C3H6 + CH3 <=> CH4 + aC3H5
    const amrex::Real k_f =
      2.2e-06 * exp((3.5) * tc[0] - (2855.75457844178) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[29]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[28] + g_RT[29])) *
                           (sc[11] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[28] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 233:  H + nC3H7 <=> C2H5 + CH3
    const amrex::Real k_f =
      3.7e+18 * exp((-2.92) * tc[0] - (6292.72440588802) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[30]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[10] - g_RT[21] + g_RT[30])) *
                           (sc[10] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[10] += qdot;
    wdot[21] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 234:  H + nC3H7 <=> C3H6 + H2
    const amrex::Real k_f = 1800000;
    const amrex::Real qf = k_f * (sc[2] * sc[30]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[29] + g_RT[30])) * (sc[6] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[29] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 235:  O + nC3H7 <=> C2H5 + CH2O
    const amrex::Real k_f = 96000000;
    const amrex::Real qf = k_f * (sc[3] * sc[30]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[13] - g_RT[21] + g_RT[30])) *
                           (sc[13] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[13] += qdot;
    wdot[21] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 236:  OH + nC3H7 <=> C3H6 + H2O
    const amrex::Real k_f = 24000000;
    const amrex::Real qf = k_f * (sc[4] * sc[30]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[29] + g_RT[30])) * (sc[7] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[29] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 237:  O2 + nC3H7 <=> C3H6 + HO2
    const amrex::Real k_f = 90000;
    const amrex::Real qf = k_f * (sc[9] * sc[30]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[29] + g_RT[30])) * (sc[5] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[29] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 238:  HO2 + nC3H7 <=> C2H5 + CH2O + OH
    const amrex::Real k_f = 24000000;
    const amrex::Real qf = k_f * (sc[5] * sc[30]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[5] - g_RT[13] - g_RT[21] + g_RT[30])) *
      (refCinv) * (sc[4] * sc[13] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[13] += qdot;
    wdot[21] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 239:  CH3 + nC3H7 <=> C3H6 + CH4
    const amrex::Real k_f = 11000000;
    const amrex::Real qf = k_f * (sc[10] * sc[30]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[29] + g_RT[30])) *
                           (sc[11] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[29] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 240:  C4H81 + H <=> C2H4 + C2H5
    const amrex::Real k_f =
      1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[31]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[20] - g_RT[21] + g_RT[31])) *
                           (sc[20] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[20] += qdot;
    wdot[21] += qdot;
    wdot[31] -= qdot;
  }

  {
    // reaction 241:  C4H81 + H <=> C3H6 + CH3
    const amrex::Real k_f =
      3.2e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[31]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[10] - g_RT[29] + g_RT[31])) *
                           (sc[10] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[10] += qdot;
    wdot[29] += qdot;
    wdot[31] -= qdot;
  }

  {
    // reaction 242:  C4H81 + O <=> HCO + nC3H7
    const amrex::Real k_f =
      330 * exp((1.45) * tc[0] - (-202.293099653497) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[31]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[12] - g_RT[30] + g_RT[31])) *
                           (sc[12] * sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[12] += qdot;
    wdot[30] += qdot;
    wdot[31] -= qdot;
  }

  {
    // reaction 243:  N + NO <=> N2 + O
    const amrex::Real k_f = 27000000 * exp(-(178.641916360675) * invT);
    const amrex::Real qf = k_f * (sc[32] * sc_qss[5]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] - g_RT[3] + g_RT[32] + g_RT_qss[5])) *
                           (sc[1] * sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] += qdot;
    wdot[32] -= qdot;
  }

  {
    // reaction 244:  N + O2 <=> NO + O
    const amrex::Real k_f = 9000 * exp((1) * tc[0] - (3270.90832773068) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[32]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[3] + g_RT[9] + g_RT[32] - g_RT_qss[5])) *
                           (sc[3] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[32] -= qdot;
  }

  {
    // reaction 245:  N + OH <=> H + NO
    const amrex::Real k_f = 33600000 * exp(-(193.738416334817) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[32]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[4] + g_RT[32] - g_RT_qss[5])) *
                           (sc[2] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[32] -= qdot;
  }

  {
    // reaction 246:  HO2 + NO <=> NO2 + OH
    const amrex::Real k_f = 2110000 * exp(-(-241.543999586265) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc_qss[5]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[5] - g_RT[33] + g_RT_qss[5])) *
                           (sc[4] * sc[33]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[33] += qdot;
  }

  {
    // reaction 247:  NO2 + O <=> NO + O2
    const amrex::Real k_f = 3900000 * exp(-(-120.771999793133) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[33]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[9] + g_RT[33] - g_RT_qss[5])) *
                           (sc[9] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[9] += qdot;
    wdot[33] -= qdot;
  }

  {
    // reaction 248:  H + NO2 <=> NO + OH
    const amrex::Real k_f = 132000000 * exp(-(181.157999689699) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[33]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[4] + g_RT[33] - g_RT_qss[5])) *
                           (sc[4] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[33] -= qdot;
  }

  {
    // reaction 249:  NCO + O <=> CO + NO
    const amrex::Real k_f = 2000000000 * exp((-0.5) * tc[0]);
    const amrex::Real qf = k_f * (sc[3] * sc[36]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[16] + g_RT[36] - g_RT_qss[5])) *
                           (sc[16] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[16] += qdot;
    wdot[36] -= qdot;
  }

  {
    // reaction 250:  NCO + OH <=> CO + H + NO
    const amrex::Real k_f =
      8300000 * exp((-0.1) * tc[0] - (37986.8196682667) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[36]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] - g_RT[16] + g_RT[36] - g_RT_qss[5])) *
      (refCinv) * (sc[2] * sc[16] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[16] += qdot;
    wdot[36] -= qdot;
  }

  {
    // reaction 251:  N + NCO <=> CO + N2
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[32] * sc[36]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] - g_RT[16] + g_RT[32] + g_RT[36])) *
                           (sc[1] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[16] += qdot;
    wdot[32] -= qdot;
    wdot[36] -= qdot;
  }

  {
    // reaction 252:  NCO + O2 <=> CO2 + NO
    const amrex::Real k_f = 2000000 * exp(-(10064.3333160944) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[36]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[17] + g_RT[36] - g_RT_qss[5])) *
                           (sc[17] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[17] += qdot;
    wdot[36] -= qdot;
  }

  {
    // reaction 253:  NCO + NO <=> CO2 + N2
    const amrex::Real k_f =
      3800000000000 * exp((-2) * tc[0] - (402.573332643776) * invT);
    const amrex::Real qf = k_f * (sc[36] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] - g_RT[17] + g_RT[36] + g_RT_qss[5])) *
      (sc[1] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[17] += qdot;
    wdot[36] -= qdot;
  }

  {
    // reaction 254:  C + NO <=> CO + N
    const amrex::Real k_f = 29000000;
    const amrex::Real qf = k_f * (sc_qss[0] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[16] - g_RT[32] + g_RT_qss[0] + g_RT_qss[5])) *
      (sc[16] * sc[32]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[16] += qdot;
    wdot[32] += qdot;
  }

  {
    // reaction 255:  CH + NO <=> H + NCO
    const amrex::Real k_f = 16200000;
    const amrex::Real qf = k_f * (sc_qss[1] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] - g_RT[36] + g_RT_qss[1] + g_RT_qss[5])) *
      (sc[2] * sc[36]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[2] += qdot;
    wdot[36] += qdot;
  }

  {
    // reaction 256:  CH + NO <=> HCO + N
    const amrex::Real k_f = 24600000;
    const amrex::Real qf = k_f * (sc_qss[1] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[12] - g_RT[32] + g_RT_qss[1] + g_RT_qss[5])) *
      (sc[12] * sc[32]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[12] += qdot;
    wdot[32] += qdot;
  }

  {
    // reaction 257:  CH2 + NO <=> H + HNCO
    const amrex::Real k_f =
      310000000000 * exp((-1.38) * tc[0] - (639.085165571994) * invT);
    const amrex::Real qf = k_f * (sc_qss[2] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] - g_RT[35] + g_RT_qss[2] + g_RT_qss[5])) *
      (sc[2] * sc[35]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[2] += qdot;
    wdot[35] += qdot;
  }

  {
    // reaction 258:  CH2 + NO <=> H + HCNO
    const amrex::Real k_f =
      38000000 * exp((-0.36) * tc[0] - (291.865666166737) * invT);
    const amrex::Real qf = k_f * (sc_qss[2] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] - g_RT[34] + g_RT_qss[2] + g_RT_qss[5])) *
      (sc[2] * sc[34]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[2] += qdot;
    wdot[34] += qdot;
  }

  {
    // reaction 259:  CH2* + NO <=> H + HNCO
    const amrex::Real k_f =
      310000000000 * exp((-1.38) * tc[0] - (639.085165571994) * invT);
    const amrex::Real qf = k_f * (sc_qss[3] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] - g_RT[35] + g_RT_qss[3] + g_RT_qss[5])) *
      (sc[2] * sc[35]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[2] += qdot;
    wdot[35] += qdot;
  }

  {
    // reaction 260:  CH2* + NO <=> H + HCNO
    const amrex::Real k_f =
      38000000 * exp((-0.36) * tc[0] - (291.865666166737) * invT);
    const amrex::Real qf = k_f * (sc_qss[3] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] - g_RT[34] + g_RT_qss[3] + g_RT_qss[5])) *
      (sc[2] * sc[34]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[2] += qdot;
    wdot[34] += qdot;
  }

  {
    // reaction 261:  HNCO + O <=> NCO + OH
    const amrex::Real k_f =
      2.2 * exp((2.11) * tc[0] - (24065.3306087791) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[35]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[35] - g_RT[36])) * (sc[4] * sc[36]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[35] -= qdot;
    wdot[36] += qdot;
  }

  {
    // reaction 262:  H + HNCO <=> H2 + NCO
    const amrex::Real k_f = 90 * exp((1.7) * tc[0] - (29266.0748498709) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[35]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] + g_RT[35] - g_RT[36])) * (sc[6] * sc[36]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[35] -= qdot;
    wdot[36] += qdot;
  }

  {
    // reaction 263:  HNCO + OH <=> H2O + NCO
    const amrex::Real k_f = 33 * exp((1.5) * tc[0] - (1811.57999689699) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[35]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] + g_RT[35] - g_RT[36])) * (sc[7] * sc[36]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[35] -= qdot;
    wdot[36] += qdot;
  }

  {
    // reaction 264:  H + HCNO <=> H + HNCO
    const amrex::Real k_f =
      2100000000 * exp((-0.69) * tc[0] - (1434.16749754345) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[34]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[2] + g_RT[34] - g_RT[35])) * (sc[2] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[2] += qdot;
    wdot[34] -= qdot;
    wdot[35] += qdot;
  }

  {
    // reaction 265:  HCCO + NO <=> CO + HCNO
    const amrex::Real k_f = 55000 * exp(-(920.886498422637) * invT);
    const amrex::Real qf = k_f * (sc[23] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[16] + g_RT[23] - g_RT[34] + g_RT_qss[5])) *
      (sc[16] * sc[34]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[23] -= qdot;
    wdot[34] += qdot;
  }

  {
    // reaction 266:  CO2 + N <=> CO + NO
    const amrex::Real k_f = 3000000 * exp(-(5686.34832359333) * invT);
    const amrex::Real qf = k_f * (sc[17] * sc[32]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[16] + g_RT[17] + g_RT[32] - g_RT_qss[5])) *
      (sc[16] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[17] -= qdot;
    wdot[32] -= qdot;
  }

  {
    // reaction 267:  CH3 + NO2 <=> CH3O + NO
    const amrex::Real k_f = 15100000 * exp((-0.05) * tc[0]);
    const amrex::Real qf = k_f * (sc[10] * sc[33]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[10] - g_RT[14] + g_RT[33] - g_RT_qss[5])) *
      (sc[14] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[14] += qdot;
    wdot[33] -= qdot;
  }

  {
    // reaction 268:  CH3O2 + NO <=> CH3O + NO2
    const amrex::Real k_f = 1690000 * exp(-(-286.83349950869) * invT);
    const amrex::Real qf = k_f * (sc[37] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[14] - g_RT[33] + g_RT[37] + g_RT_qss[5])) *
      (sc[14] * sc[33]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[33] += qdot;
    wdot[37] -= qdot;
  }
}

// GPU version of productionRate: no more use of thermo namespace vectors
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
productionRate_light(
  amrex::Real* wdot,
  amrex::Real* sc,
  amrex::Real* g_RT,
  amrex::Real* g_RT_qss,
  amrex::Real* sc_qss,
  amrex::Real* kf_qss,
  amrex::Real* qf_qss,
  amrex::Real* qr_qss,
  const amrex::Real* tc,
  const amrex::Real invT)
{
  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1 / refC;

  for (int i = 0; i < 38; ++i) {
    wdot[i] = 0.0;
  }

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 38; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  gibbs(g_RT, tc);
  gibbs_qss(g_RT_qss, tc);

  // Fill sc_qss here
  comp_k_f_qss(tc, invT, kf_qss);
  comp_qss_coeff(kf_qss, qf_qss, qr_qss, sc, tc, g_RT, g_RT_qss);
  comp_sc_qss(sc_qss, qf_qss, qr_qss);

  {
    // reaction 0:  H + O2 (+M) <=> HO2 (+M)
    const amrex::Real k_f = 5116000 * exp((0.44) * tc[0]);
    amrex::Real Corr = mixture + (-0.6) * sc[0] + (10.89) * sc[7] +
                       (-0.15) * sc[9] + (0.0900000000000001) * sc[16] +
                       (1.18) * sc[17];
    const amrex::Real redP =
      Corr / k_f * 63280000 * exp(-1.4 * tc[0] - 0 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(0.5 * exp(-tc[1] * 1e+30) + 0.5 * exp(-tc[1] * 1e-30) + 0.0);
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[9]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] - g_RT[5] + g_RT[9])) * (refC) * (sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[5] += qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 1:  2 OH (+M) <=> H2O2 (+M)
    const amrex::Real k_f = 111000000 * exp((-0.37) * tc[0]);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] +
                       (0.75) * sc[16] + (2.6) * sc[17];
    const amrex::Real redP =
      Corr / k_f * 201000 * exp(-0.584 * tc[0] - -1153.87581469022 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2654 * exp(-tc[1] * 0.0106382978723404) +
      0.7346 * exp(-tc[1] * 0.000569476082004556) + exp(-5182 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * ((sc[4] * sc[4]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[4] - g_RT[8])) * (refC) * (sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= 2.000000 * qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 2:  CO + H2 (+M) <=> CH2O (+M)
    const amrex::Real k_f = 43 * exp((1.5) * tc[0] - (40056.0465980557) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 5.07e+15 * exp(-3.42 * tc[0] - 42446.3257606281 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.0679999999999999 * exp(-tc[1] * 0.0050761421319797) +
      0.932 * exp(-tc[1] * 0.000649350649350649) + exp(-10300 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[6] * sc[16]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[6] - g_RT[13] + g_RT[16])) * (refC) * (sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[13] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 3:  CH + CO (+M) <=> HCCO (+M)
    const amrex::Real k_f = 50000000;
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 2.69e+16 * exp(-3.74 * tc[0] - 974.227464997937 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4243 * exp(-tc[1] * 0.00421940928270042) +
      0.5757 * exp(-tc[1] * 0.000605326876513317) + exp(-5069 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[16] * sc_qss[1]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[16] - g_RT[23] + g_RT_qss[1])) * (refC) *
                           (sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[16] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 4:  H + HCO (+M) <=> CH2O (+M)
    const amrex::Real k_f =
      1090000 * exp((0.48) * tc[0] - (-130.836333109227) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 1350000000000 * exp(-2.57 * tc[0] - 717.083748771726 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2176 * exp(-tc[1] * 0.003690036900369) +
      0.7824 * exp(-tc[1] * 0.000362976406533575) + exp(-6570 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[12]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[12] - g_RT[13])) * (refC) * (sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 5:  CH2 + H (+M) <=> CH3 (+M)
    const amrex::Real k_f = 25000000000 * exp((-0.8) * tc[0]);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 3.2e+15 * exp(-3.14 * tc[0] - 618.956498939805 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.32 * exp(-tc[1] * 0.0128205128205128) +
      0.68 * exp(-tc[1] * 0.00050125313283208) + exp(-5590 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc_qss[2]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] - g_RT[10] + g_RT_qss[2])) * (refC) * (sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 6:  CH2 + CO (+M) <=> CH2CO (+M)
    const amrex::Real k_f =
      810000 * exp((0.5) * tc[0] - (2269.50716277929) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 2.69e+21 * exp(-5.11 * tc[0] - 3570.32224388449 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4093 * exp(-tc[1] * 0.00363636363636364) +
      0.5907 * exp(-tc[1] * 0.000815660685154976) + exp(-5185 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[16] * sc_qss[2]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[16] - g_RT[24] + g_RT_qss[2])) * (refC) *
                           (sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[16] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 7:  CH2* + H2O (+M) <=> CH3OH (+M)
    const amrex::Real k_f = 20000000;
    amrex::Real Corr = mixture + sc[6] + (5) * sc[7] + sc[11] + (0.5) * sc[16] +
                       sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 2.7e+26 * exp(-6.3 * tc[0] - 1559.97166399463 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.8493 * exp(-tc[1] * 0.00746268656716418) +
      0.1507 * exp(-tc[1] * 0.000419639110365086) + exp(-7265 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[7] * sc_qss[3]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[7] - g_RT[15] + g_RT_qss[3])) * (refC) * (sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[7] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 8:  CH2O + H (+M) <=> CH3O (+M)
    const amrex::Real k_f =
      540000 * exp((0.454) * tc[0] - (1308.36333109227) * invT);
    amrex::Real Corr = mixture + sc[6] + (5) * sc[7] + sc[11] + (0.5) * sc[16] +
                       sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 2.2e+18 * exp(-4.8 * tc[0] - 2797.88466187424 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.242 * exp(-tc[1] * 0.0106382978723404) +
      0.758 * exp(-tc[1] * 0.000643086816720257) + exp(-4200 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[13]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[13] - g_RT[14])) * (refC) * (sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[13] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 9:  CH3 + H (+M) <=> CH4 (+M)
    const amrex::Real k_f =
      12700000000 * exp((-0.63) * tc[0] - (192.731983003208) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 2.477e+21 * exp(-4.76 * tc[0] - 1227.84866456352 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.217 * exp(-tc[1] * 0.0135135135135135) +
      0.783 * exp(-tc[1] * 0.000340020401224073) + exp(-6964 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[10]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[10] - g_RT[11])) * (refC) * (sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[10] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 10:  CH3 + OH (+M) <=> CH3OH (+M)
    const amrex::Real k_f = 63000000;
    amrex::Real Corr = mixture + sc[6] + (5) * sc[7] + sc[11] + (0.5) * sc[16] +
                       sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 2.7e+26 * exp(-6.3 * tc[0] - 1559.97166399463 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.7895 * exp(-tc[1] * 0.0119760479041916) +
      0.2105 * exp(-tc[1] * 0.000185253797702853) + exp(-8370 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[4] * sc[10]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[4] + g_RT[10] - g_RT[15])) * (refC) * (sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[10] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 11:  2 CH3 (+M) <=> C2H6 (+M)
    const amrex::Real k_f =
      21200000000 * exp((-0.97) * tc[0] - (311.994332798926) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 1.77e+38 * exp(-9.67 * tc[0] - 3130.00766130536 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4675 * exp(-tc[1] * 0.00662251655629139) +
      0.5325 * exp(-tc[1] * 0.000963391136801541) + exp(-4970 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * ((sc[10] * sc[10]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[10] - g_RT[22])) * (refC) * (sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= 2.000000 * qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 12:  CH3O + H (+M) <=> CH3OH (+M)
    const amrex::Real k_f = 50000000;
    amrex::Real Corr = mixture + sc[6] + (5) * sc[7] + sc[11] + (0.5) * sc[16] +
                       sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 8.6e+16 * exp(-4 * tc[0] - 1522.23041405928 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.1098 * exp(-tc[1] * 0.00694444444444444) +
      0.8902 * exp(-tc[1] * 0.000352360817477097) + exp(-45569 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[14]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[14] - g_RT[15])) * (refC) * (sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 13:  C2H3 (+M) <=> C2H2 + H (+M)
    const amrex::Real k_f =
      386000000 * exp((1.62) * tc[0] - (18643.2716780664) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[18] + (2) * sc[20] +
                       (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 2.565e+21 * exp(-3.4 * tc[0] - 18014.5125184767 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      -0.9816 * exp(-tc[1] * 0.000185745862510913) +
      1.9816 * exp(-tc[1] * 0.232926488400261) + exp(0.0795 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[2] - g_RT[18] + g_RT[19])) *
                           (refCinv) * (sc[2] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[18] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 14:  CH2CO + H (+M) <=> CH2CHO (+M)
    const amrex::Real k_f =
      330000000 * exp((-0.06) * tc[0] - (4277.34165934012) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[18] + (2) * sc[20] +
                       (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 3.8e+29 * exp(-7.64 * tc[0] - 5988.27832307616 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.663 * exp(-tc[1] * 0.000585823081429408) +
      0.337 * exp(-tc[1] * 0.0003125) + exp(-4131 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[24]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[24] - g_RT[25])) * (refC) * (sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[24] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 15:  C2H3 + H (+M) <=> C2H4 (+M)
    const amrex::Real k_f =
      6080000 * exp((0.27) * tc[0] - (140.900666425322) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[18] + (2) * sc[20] +
                       (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 1.4e+18 * exp(-3.86 * tc[0] - 1670.67933047167 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.218 * exp(-tc[1] * 0.00481927710843374) +
      0.782 * exp(-tc[1] * 0.000375516334960571) + exp(-6095 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[19]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[19] - g_RT[20])) * (refC) * (sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[19] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 16:  C2H3 + CH3 (+M) <=> C3H6 (+M)
    const amrex::Real k_f = 25000000;
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[18] + (2) * sc[20] +
                       (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 4.27e+46 * exp(-11.94 * tc[0] - 4916.32618157895 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.825 * exp(-tc[1] * 0.000745934656124124) +
      0.175 * exp(-tc[1] * 1.66666666666667e-05) + exp(-10139.8 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[10] * sc[19]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[10] + g_RT[19] - g_RT[29])) * (refC) * (sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[19] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 17:  C2H4 (+M) <=> H2 + H2CC (+M)
    const amrex::Real k_f =
      8000000000000 * exp((0.44) * tc[0] - (44670.543423485) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 7e+44 * exp(-9.31 * tc[0] - 50251.2162472593 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2655 * exp(-tc[1] * 0.00555555555555556) +
      0.7345 * exp(-tc[1] * 0.000966183574879227) + exp(-5417 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[20]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[6] + g_RT[20] - g_RT_qss[4])) *
                           (refCinv) * (sc[6] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 18:  C2H4 + H (+M) <=> C2H5 (+M)
    const amrex::Real k_f =
      1367 * exp((1.463) * tc[0] - (681.858582165395) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 2.027e+27 * exp(-6.642 * tc[0] - 2903.05694502743 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      1.569 * exp(-tc[1] * 0.00334448160535117) +
      -0.569 * exp(-tc[1] * 0.000109325461900077) + exp(152.4 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[20]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[20] - g_RT[21])) * (refC) * (sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[20] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 19:  C2H5 + H (+M) <=> C2H6 (+M)
    const amrex::Real k_f =
      521000000000 * exp((-0.99) * tc[0] - (795.082331971457) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 1.99e+29 * exp(-7.08 * tc[0] - 3364.00341090455 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.1578 * exp(-tc[1] * 0.008) +
      0.8422 * exp(-tc[1] * 0.000450653447498873) + exp(-6882 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[21]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[21] - g_RT[22])) * (refC) * (sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[21] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 20:  C2H3 + C2H5 (+M) <=> C4H81 (+M)
    const amrex::Real k_f = 15000000;
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 1.55e+44 * exp(-11.79 * tc[0] - 4521.1501339225 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.802 * exp(-tc[1] * 0.000439000834101585) +
      0.198 * exp(-tc[1] * 1.66666666666667e-05) + exp(-5723.2 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19] * sc[21]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[19] + g_RT[21] - g_RT[31])) * (refC) * (sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[19] -= qdot;
    wdot[21] -= qdot;
    wdot[31] += qdot;
  }

  {
    // reaction 21:  CH3 + O2 (+M) <=> CH3O2 (+M)
    const amrex::Real k_f = 783 * exp((1.2) * tc[0]);
    amrex::Real Corr = mixture;
    const amrex::Real redP =
      Corr / k_f * 58000000000000 * exp(-3.3 * tc[0] - 0 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(0.336 * exp(-tc[1] * 1e-05) + 0.664 * exp(-tc[1] * 0.1) + 0.0);
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[9] * sc[10]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[9] + g_RT[10] - g_RT[37])) * (refC) * (sc[37]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[10] -= qdot;
    wdot[37] += qdot;
  }

  {
    // reaction 22:  H + aC3H5 (+M) <=> C3H6 (+M)
    const amrex::Real k_f = 200000000;
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 1.33e+48 * exp(-12 * tc[0] - 3003.09641818941 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.98 * exp(-tc[1] * 0.000911909538573774) +
      0.02 * exp(-tc[1] * 0.000911909538573774) + exp(-6859.5 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[28]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[28] - g_RT[29])) * (refC) * (sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[28] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 23:  CH3 + aC3H5 (+M) <=> C4H81 (+M)
    const amrex::Real k_f =
      100000000 * exp((-0.32) * tc[0] - (-131.993731440578) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 3.91e+48 * exp(-12.81 * tc[0] - 3145.1041612795 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.896 * exp(-tc[1] * 0.00062266500622665) +
      0.104 * exp(-tc[1] * 1.66666666666667e-05) + exp(-6118.4 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[10] * sc[28]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[10] + g_RT[28] - g_RT[31])) * (refC) * (sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[28] -= qdot;
    wdot[31] += qdot;
  }

  {
    // reaction 24:  C3H6 + H (+M) <=> nC3H7 (+M)
    const amrex::Real k_f = 13300000 * exp(-(1640.83858218945) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] + sc[11] +
                       (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 6.26e+26 * exp(-6.66 * tc[0] - 3522.51666063304 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-tc[1] * 0.000763358778625954) + exp(-48097 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[29]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[29] - g_RT[30])) * (refC) * (sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[29] -= qdot;
    wdot[30] += qdot;
  }

  {
    // reaction 25:  CO + O (+M) <=> CO2 (+M)
    const amrex::Real k_f = 13620 * exp(-(1199.66853127845) * invT);
    amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (11) * sc[7] +
                       (0.75) * sc[16] + (2.6) * sc[17];
    const amrex::Real redP =
      Corr / k_f * 1173000000000 * exp(-2.79 * tc[0] - 2108.98104638758 * invT);
    Corr = redP / (1.0 + redP);
    const amrex::Real qf = Corr * k_f * (sc[3] * sc[16]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[3] + g_RT[16] - g_RT[17])) * (refC) * (sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 26:  C2H2 (+M) <=> H2CC (+M)
    const amrex::Real k_f =
      800000000000000 * exp((-0.52) * tc[0] - (25538.2457895895) * invT);
    amrex::Real Corr = mixture + sc[6] + (5) * sc[7] + sc[11] + (0.5) * sc[16] +
                       sc[17] + (1.5) * sc[18] + (1.5) * sc[20] + (2) * sc[22];
    const amrex::Real redP =
      Corr / k_f * 2450000000 * exp(-0.64 * tc[0] - 25009.8682904946 * invT);
    Corr = redP / (1.0 + redP);
    const amrex::Real qf = Corr * k_f * (sc[18]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[18] - g_RT_qss[4])) * (sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[18] -= qdot;
  }

  {
    // reaction 27:  2 H + M <=> H2 + M
    const amrex::Real k_f = 1780000 * exp((-1) * tc[0]);
    const amrex::Real Corr =
      mixture + (-0.37) * sc[0] + (-1) * sc[6] + (-1) * sc[7] + (-1) * sc[17];
    const amrex::Real qf = Corr * k_f * ((sc[2] * sc[2]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[2] - g_RT[6])) * (refC) * (sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= 2.000000 * qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 28:  2 H + H2 <=> H2 + H2
    const amrex::Real k_f = 90000 * exp((-0.6) * tc[0]);
    const amrex::Real qf = k_f * ((sc[2] * sc[2]) * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[2] - g_RT[6])) * (refC) * ((sc[6] * sc[6]));
    const amrex::Real qdot = qf - qr;
    wdot[2] -= 2.000000 * qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 29:  2 H + H2O <=> H2 + H2O
    const amrex::Real k_f = 56240000 * exp((-1.25) * tc[0]);
    const amrex::Real qf = k_f * ((sc[2] * sc[2]) * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[2] - g_RT[6])) * (refC) * (sc[6] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= 2.000000 * qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 30:  2 H + CO2 <=> H2 + CO2
    const amrex::Real k_f = 550000000 * exp((-2) * tc[0]);
    const amrex::Real qf = k_f * ((sc[2] * sc[2]) * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[2] - g_RT[6])) * (refC) * (sc[6] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= 2.000000 * qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 31:  H + OH + M <=> H2O + M
    const amrex::Real k_f = 44000000000 * exp((-2) * tc[0]);
    const amrex::Real Corr = mixture + (-0.62) * sc[0] + sc[6] + (5.3) * sc[7] +
                             (0.75) * sc[16] + (2.6) * sc[17];
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[4]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[4] - g_RT[7])) * (refC) * (sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] -= qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 32:  H + O + M <=> OH + M
    const amrex::Real k_f = 9428000 * exp((-1) * tc[0]);
    const amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (11) * sc[7] +
                             (0.75) * sc[16] + (2.6) * sc[17];
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[3]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[3] - g_RT[4])) * (refC) * (sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 33:  2 O + M <=> O2 + M
    const amrex::Real k_f = 120000 * exp((-1) * tc[0]);
    const amrex::Real Corr = mixture + (-0.17) * sc[0] + (1.4) * sc[6] +
                             (14.4) * sc[7] + (0.75) * sc[16] + (2.6) * sc[17];
    const amrex::Real qf = Corr * k_f * ((sc[3] * sc[3]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[3] - g_RT[9])) * (refC) * (sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= 2.000000 * qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 34:  HCO + M <=> CO + H + M
    const amrex::Real k_f =
      187000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
    const amrex::Real Corr =
      mixture + sc[6] + (-1) * sc[7] + (0.75) * sc[16] + (2.6) * sc[17];
    const amrex::Real qf = Corr * k_f * (sc[12]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[2] + g_RT[12] - g_RT[16])) *
                           (refCinv) * (sc[2] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[12] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 35:  HCO + H2O <=> CO + H + H2O
    const amrex::Real k_f =
      2244000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[12]);
    const amrex::Real qr = k_f * exp(-(-g_RT[2] + g_RT[12] - g_RT[16])) *
                           (refCinv) * (sc[2] * sc[7] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[12] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 36:  NO + O + M <=> NO2 + M
    const amrex::Real k_f = 106000000 * exp((-1.41) * tc[0]);
    const amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] +
                             sc[11] + (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real qf = Corr * k_f * (sc[3] * sc_qss[5]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[3] - g_RT[33] + g_RT_qss[5])) * (refC) * (sc[33]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[33] += qdot;
  }

  {
    // reaction 37:  NCO + M <=> CO + N + M
    const amrex::Real k_f = 310000000 * exp(-(27198.8607867451) * invT);
    const amrex::Real Corr = mixture + (-0.3) * sc[0] + sc[6] + (5) * sc[7] +
                             sc[11] + (0.5) * sc[16] + sc[17] + (2) * sc[22];
    const amrex::Real qf = Corr * k_f * (sc[36]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[16] - g_RT[32] + g_RT[36])) * (refCinv) *
                           (sc[16] * sc[32]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[32] += qdot;
    wdot[36] -= qdot;
  }

  {
    // reaction 38:  H + O2 <=> O + OH
    const amrex::Real k_f =
      26440000000 * exp((-0.6707) * tc[0] - (8575.31520197823) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[4] + g_RT[9])) * (sc[3] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[4] += qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 39:  H2 + O <=> H + OH
    const amrex::Real k_f =
      0.04589 * exp((2.7) * tc[0] - (3150.13632793755) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] - g_RT[4] + g_RT[6])) * (sc[2] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 40:  H2 + OH <=> H + H2O
    const amrex::Real k_f =
      173.4 * exp((1.51) * tc[0] - (1726.03316371019) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[6] - g_RT[7])) * (sc[2] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[6] -= qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 41:  2 OH <=> H2O + O
    const amrex::Real k_f =
      0.03973 * exp((2.4) * tc[0] - (-1061.78716484796) * invT);
    const amrex::Real qf = k_f * ((sc[4] * sc[4]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[4] - g_RT[7])) * (sc[3] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= 2.000000 * qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 42:  H2 + O2 <=> H + HO2
    const amrex::Real k_f =
      0.5916 * exp((2.433) * tc[0] - (26923.0980538841) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] - g_RT[5] + g_RT[6] + g_RT[9])) * (sc[2] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 43:  H + HO2 <=> H2O + O
    const amrex::Real k_f = 3970000 * exp(-(337.658382754967) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[3] + g_RT[5] - g_RT[7])) * (sc[3] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[5] -= qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 44:  H + HO2 <=> 2 OH
    const amrex::Real k_f = 74850000 * exp(-(148.448916412392) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - 2.000000 * g_RT[4] + g_RT[5])) * ((sc[4] * sc[4]));
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += 2.000000 * qdot;
    wdot[5] -= qdot;
  }

  {
    // reaction 45:  HO2 + O <=> O2 + OH
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[3] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[5] - g_RT[9])) * (sc[4] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 46:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f = 130000 * exp(-(-820.243165261693) * invT);
    const amrex::Real qf = k_f * ((sc[5] * sc[5]));
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[5] - g_RT[8] - g_RT[9])) * (sc[8] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= 2.000000 * qdot;
    wdot[8] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 47:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f = 365800000 * exp(-(6038.59998965664) * invT);
    const amrex::Real qf = k_f * ((sc[5] * sc[5]));
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[5] - g_RT[8] - g_RT[9])) * (sc[8] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= 2.000000 * qdot;
    wdot[8] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 48:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      1410000000000 * exp((-1.76) * tc[0] - (30.1929999482832) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] + g_RT[5] - g_RT[7] - g_RT[9])) * (sc[7] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] -= qdot;
    wdot[7] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 49:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      1.12e+79 * exp((-22.3) * tc[0] - (13536.528310147) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] + g_RT[5] - g_RT[7] - g_RT[9])) * (sc[7] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] -= qdot;
    wdot[7] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 50:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      5.37e+64 * exp((-16.72) * tc[0] - (16555.8283049753) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] + g_RT[5] - g_RT[7] - g_RT[9])) * (sc[7] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] -= qdot;
    wdot[7] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 51:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      2510000 * exp((2) * tc[0] - (20128.6666321888) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] + g_RT[5] - g_RT[7] - g_RT[9])) * (sc[7] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] -= qdot;
    wdot[7] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 52:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      1e+130 * exp((-40) * tc[0] - (17511.9399700042) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] + g_RT[5] - g_RT[7] - g_RT[9])) * (sc[7] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] -= qdot;
    wdot[7] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 53:  H + H2O2 <=> H2 + HO2
    const amrex::Real k_f = 6.05 * exp((2) * tc[0] - (2616.72666218454) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[5] - g_RT[6] + g_RT[8])) * (sc[5] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[5] += qdot;
    wdot[6] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 54:  H + H2O2 <=> H2O + OH
    const amrex::Real k_f = 24100000 * exp(-(1997.77016324474) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[7] + g_RT[8])) * (sc[4] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[7] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 55:  H2O2 + O <=> HO2 + OH
    const amrex::Real k_f = 9.63 * exp((2) * tc[0] - (1997.77016324474) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[5] + g_RT[8])) * (sc[4] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[5] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 56:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f = 2000000 * exp(-(214.873516298615) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[7] + g_RT[8])) * (sc[5] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[7] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 57:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f =
      2.67e+35 * exp((-7) * tc[0] - (18920.9466342575) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[7] + g_RT[8])) * (sc[5] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[7] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 58:  CO + OH <=> CO2 + H
    const amrex::Real k_f =
      0.07046 * exp((2.053) * tc[0] - (-178.979071526765) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[16] - g_RT[17])) * (sc[2] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 59:  CO + OH <=> CO2 + H
    const amrex::Real k_f =
      5757000 * exp((-0.664) * tc[0] - (166.98238621398) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[16] - g_RT[17])) * (sc[2] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 60:  CO + O2 <=> CO2 + O
    const amrex::Real k_f = 1119000 * exp(-(24003.4349588851) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[9] + g_RT[16] - g_RT[17])) * (sc[3] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 61:  CO + HO2 <=> CO2 + OH
    const amrex::Real k_f =
      0.157 * exp((2.18) * tc[0] - (9029.02038003442) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[16] - g_RT[17])) * (sc[4] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 62:  H + HCO <=> CO + H2
    const amrex::Real k_f = 120000000;
    const amrex::Real qf = k_f * (sc[2] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] + g_RT[12] - g_RT[16])) * (sc[6] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[12] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 63:  HCO + O <=> CO + OH
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[3] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[12] - g_RT[16])) * (sc[4] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[12] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 64:  HCO + O <=> CO2 + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[3] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[12] - g_RT[17])) * (sc[2] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[12] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 65:  HCO + OH <=> CO + H2O
    const amrex::Real k_f = 30200000;
    const amrex::Real qf = k_f * (sc[4] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] + g_RT[12] - g_RT[16])) * (sc[7] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[12] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 66:  HCO + O2 <=> CO + HO2
    const amrex::Real k_f =
      12040 * exp((0.807) * tc[0] - (-365.838516040031) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] + g_RT[12] - g_RT[16])) * (sc[5] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[12] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 67:  C + OH <=> CO + H
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[0]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[4] - g_RT[16] + g_RT_qss[0])) *
                           (sc[2] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 68:  C + O2 <=> CO + O
    const amrex::Real k_f = 58000000 * exp(-(289.852799503519) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc_qss[0]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[3] + g_RT[9] - g_RT[16] + g_RT_qss[0])) *
                           (sc[3] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 69:  CH + H <=> C + H2
    const amrex::Real k_f = 110000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[6] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 70:  CH + O <=> CO + H
    const amrex::Real k_f = 57000000;
    const amrex::Real qf = k_f * (sc[3] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[3] - g_RT[16] + g_RT_qss[1])) *
                           (sc[2] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 71:  CH + OH <=> H + HCO
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[4] - g_RT[12] + g_RT_qss[1])) *
                           (sc[2] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 72:  CH + H2 <=> CH2 + H
    const amrex::Real k_f =
      110.7 * exp((1.79) * tc[0] - (840.371831893882) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[6] + g_RT_qss[1] - g_RT_qss[2])) *
      (sc[2] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 73:  CH + H2O <=> CH2O + H
    const amrex::Real k_f = 5710000 * exp(-(-379.928582682563) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[7] - g_RT[13] + g_RT_qss[1])) *
                           (sc[2] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[7] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 74:  CH + O2 <=> HCO + O
    const amrex::Real k_f = 33000000;
    const amrex::Real qf = k_f * (sc[9] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[3] + g_RT[9] - g_RT[12] + g_RT_qss[1])) *
                           (sc[3] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 75:  CH + CO2 <=> CO + HCO
    const amrex::Real k_f = 3400000 * exp(-(347.219499405257) * invT);
    const amrex::Real qf = k_f * (sc[17] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[12] - g_RT[16] + g_RT[17] + g_RT_qss[1])) *
      (sc[12] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[16] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 76:  CH2 + O <=> H + HCO
    const amrex::Real k_f = 80000000;
    const amrex::Real qf = k_f * (sc[3] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[3] - g_RT[12] + g_RT_qss[2])) *
                           (sc[2] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 77:  CH2 + OH <=> CH2O + H
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[4] - g_RT[13] + g_RT_qss[2])) *
                           (sc[2] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 78:  CH2 + OH <=> CH + H2O
    const amrex::Real k_f = 11.3 * exp((2) * tc[0] - (1509.64999741416) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT_qss[1] + g_RT_qss[2])) *
      (sc[7] * sc_qss[1]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 79:  CH2 + H2 <=> CH3 + H
    const amrex::Real k_f = 0.5 * exp((2) * tc[0] - (3638.25649376812) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[6] - g_RT[10] + g_RT_qss[2])) *
                           (sc[2] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[6] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 80:  CH2 + O2 <=> HCO + OH
    const amrex::Real k_f = 10600000 * exp(-(754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[9] - g_RT[12] + g_RT_qss[2])) *
                           (sc[4] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[9] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 81:  CH2 + O2 <=> CO2 + 2 H
    const amrex::Real k_f = 2640000 * exp(-(754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-2.000000 * g_RT[2] + g_RT[9] - g_RT[17] + g_RT_qss[2])) *
      (refCinv) * ((sc[2] * sc[2]) * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += 2.000000 * qdot;
    wdot[9] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 82:  CH2 + HO2 <=> CH2O + OH
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[5] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[5] - g_RT[13] + g_RT_qss[2])) *
                           (sc[4] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 83:  CH + CH2 <=> C2H2 + H
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc_qss[1] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] - g_RT[18] + g_RT_qss[1] + g_RT_qss[2])) *
      (sc[2] * sc[18]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[2] += qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 84:  2 CH2 <=> C2H2 + H2
    const amrex::Real k_f = 32000000;
    const amrex::Real qf = k_f * (sc_qss[2] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] - g_RT[18] + 2.000000 * g_RT_qss[2])) *
      (sc[6] * sc[18]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[6] += qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 85:  CH2* + N2 <=> CH2 + N2
    const amrex::Real k_f = 15000000 * exp(-(301.929999482832) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[1] - g_RT_qss[2] + g_RT_qss[3])) *
      (sc[1] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[1] += qdot;
  }

  {
    // reaction 86:  AR + CH2* <=> AR + CH2
    const amrex::Real k_f = 9000000 * exp(-(301.929999482832) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[0] - g_RT_qss[2] + g_RT_qss[3])) *
      (sc[0] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[0] += qdot;
  }

  {
    // reaction 87:  CH2* + H <=> CH + H2
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT_qss[1] + g_RT_qss[3])) *
      (sc[6] * sc_qss[1]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 88:  CH2* + O <=> CO + H2
    const amrex::Real k_f = 15000000;
    const amrex::Real qf = k_f * (sc[3] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[6] - g_RT[16] + g_RT_qss[3])) *
                           (sc[6] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 89:  CH2* + O <=> H + HCO
    const amrex::Real k_f = 15000000;
    const amrex::Real qf = k_f * (sc[3] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[3] - g_RT[12] + g_RT_qss[3])) *
                           (sc[2] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 90:  CH2* + OH <=> CH2O + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[4] - g_RT[13] + g_RT_qss[3])) *
                           (sc[2] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 91:  CH2* + H2 <=> CH3 + H
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[6] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[6] - g_RT[10] + g_RT_qss[3])) *
                           (sc[2] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[6] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 92:  CH2* + O2 <=> CO + H + OH
    const amrex::Real k_f = 28000000;
    const amrex::Real qf = k_f * (sc[9] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] - g_RT[4] + g_RT[9] - g_RT[16] + g_RT_qss[3])) *
      (refCinv) * (sc[2] * sc[4] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] += qdot;
    wdot[9] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 93:  CH2* + O2 <=> CO + H2O
    const amrex::Real k_f = 12000000;
    const amrex::Real qf = k_f * (sc[9] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[7] + g_RT[9] - g_RT[16] + g_RT_qss[3])) *
                           (sc[7] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[7] += qdot;
    wdot[9] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 94:  CH2* + H2O <=> CH2 + H2O
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[7] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[7] - g_RT[7] - g_RT_qss[2] + g_RT_qss[3])) *
      (sc[7] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[7] -= qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 95:  CH2* + CO <=> CH2 + CO
    const amrex::Real k_f = 9000000;
    const amrex::Real qf = k_f * (sc[16] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[16] - g_RT[16] - g_RT_qss[2] + g_RT_qss[3])) *
      (sc[16] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[16] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 96:  CH2* + CO2 <=> CH2 + CO2
    const amrex::Real k_f = 7000000;
    const amrex::Real qf = k_f * (sc[17] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[17] - g_RT[17] - g_RT_qss[2] + g_RT_qss[3])) *
      (sc[17] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[17] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 97:  CH2* + CO2 <=> CH2O + CO
    const amrex::Real k_f = 14000000;
    const amrex::Real qf = k_f * (sc[17] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[13] - g_RT[16] + g_RT[17] + g_RT_qss[3])) *
      (sc[13] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[16] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 98:  CH2O + H <=> H2 + HCO
    const amrex::Real k_f =
      23000 * exp((1.05) * tc[0] - (1648.03458051046) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[12] + g_RT[13])) * (sc[6] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 99:  CH2O + O <=> HCO + OH
    const amrex::Real k_f = 39000000 * exp(-(1781.38699694871) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[12] + g_RT[13])) * (sc[4] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 100:  CH2O + OH <=> H2O + HCO
    const amrex::Real k_f =
      3430 * exp((1.18) * tc[0] - (-224.93784961471) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[12] + g_RT[13])) * (sc[7] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 101:  CH2O + O2 <=> HCO + HO2
    const amrex::Real k_f = 100000000 * exp(-(20128.6666321888) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[12] + g_RT[13])) * (sc[5] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 102:  CH2O + HO2 <=> H2O2 + HCO
    const amrex::Real k_f = 1000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[8] - g_RT[12] + g_RT[13])) * (sc[8] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[8] += qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 103:  CH + CH2O <=> CH2CO + H
    const amrex::Real k_f = 94600000 * exp(-(-259.156582889431) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[13] - g_RT[24] + g_RT_qss[1])) *
      (sc[2] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[13] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 104:  CH3 + O <=> CH2O + H
    const amrex::Real k_f = 84300000;
    const amrex::Real qf = k_f * (sc[3] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[10] - g_RT[13])) * (sc[2] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[10] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 105:  CH3 + OH <=> CH2 + H2O
    const amrex::Real k_f = 56 * exp((1.6) * tc[0] - (2727.43432866158) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[10]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[7] + g_RT[10] - g_RT_qss[2])) *
                           (sc[7] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 106:  CH3 + OH <=> CH2* + H2O
    const amrex::Real k_f = 25010000;
    const amrex::Real qf = k_f * (sc[4] * sc[10]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[7] + g_RT[10] - g_RT_qss[3])) *
                           (sc[7] * sc_qss[3]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 107:  CH3 + O2 <=> CH3O + O
    const amrex::Real k_f = 30830000 * exp(-(14492.6399751759) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[9] + g_RT[10] - g_RT[14])) * (sc[3] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[10] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 108:  CH3 + O2 <=> CH2O + OH
    const amrex::Real k_f = 36000 * exp(-(4498.75699229419) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[9] + g_RT[10] - g_RT[13])) * (sc[4] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[9] -= qdot;
    wdot[10] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 109:  CH3 + HO2 <=> CH4 + O2
    const amrex::Real k_f = 1000000;
    const amrex::Real qf = k_f * (sc[5] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[9] + g_RT[10] - g_RT[11])) * (sc[9] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 110:  CH3 + HO2 <=> CH3O + OH
    const amrex::Real k_f = 13400000;
    const amrex::Real qf = k_f * (sc[5] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[10] - g_RT[14])) * (sc[4] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[10] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 111:  CH3 + H2O2 <=> CH4 + HO2
    const amrex::Real k_f =
      0.0245 * exp((2.47) * tc[0] - (2606.66232886845) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[8] + g_RT[10] - g_RT[11])) * (sc[5] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[8] -= qdot;
    wdot[10] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 112:  C + CH3 <=> C2H2 + H
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[10] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[10] - g_RT[18] + g_RT_qss[0])) *
      (sc[2] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[10] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 113:  CH + CH3 <=> C2H3 + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[10] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[10] - g_RT[19] + g_RT_qss[1])) *
      (sc[2] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[10] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 114:  CH3 + HCO <=> CH4 + CO
    const amrex::Real k_f = 8480000;
    const amrex::Real qf = k_f * (sc[10] * sc[12]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] + g_RT[12] - g_RT[16])) *
                           (sc[11] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 115:  CH2O + CH3 <=> CH4 + HCO
    const amrex::Real k_f =
      0.00332 * exp((2.81) * tc[0] - (2948.84966161566) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[12] + g_RT[13])) *
                           (sc[11] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 116:  CH2 + CH3 <=> C2H4 + H
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[10] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[10] - g_RT[20] + g_RT_qss[2])) *
      (sc[2] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[10] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 117:  CH2* + CH3 <=> C2H4 + H
    const amrex::Real k_f = 12000000 * exp(-(-286.83349950869) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[10] - g_RT[20] + g_RT_qss[3])) *
      (sc[2] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[10] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 118:  2 CH3 <=> C2H5 + H
    const amrex::Real k_f =
      4990000 * exp((0.1) * tc[0] - (5334.09665753003) * invT);
    const amrex::Real qf = k_f * ((sc[10] * sc[10]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + 2.000000 * g_RT[10] - g_RT[21])) *
                           (sc[2] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[10] -= 2.000000 * qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 119:  CH3 + HCCO <=> C2H4 + CO
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[10] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[16] - g_RT[20] + g_RT[23])) *
                           (sc[16] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[16] += qdot;
    wdot[20] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 120:  CH3O + H <=> CH2O + H2
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[2] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[13] + g_RT[14])) * (sc[6] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[13] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 121:  CH3O + H <=> CH3 + OH
    const amrex::Real k_f = 32000000;
    const amrex::Real qf = k_f * (sc[2] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[10] + g_RT[14])) * (sc[4] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[10] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 122:  CH3O + H <=> CH2* + H2O
    const amrex::Real k_f = 16000000;
    const amrex::Real qf = k_f * (sc[2] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[7] + g_RT[14] - g_RT_qss[3])) *
                           (sc[7] * sc_qss[3]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[7] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 123:  CH3O + O <=> CH2O + OH
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[3] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[13] + g_RT[14])) * (sc[4] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[13] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 124:  CH3O + OH <=> CH2O + H2O
    const amrex::Real k_f = 5000000;
    const amrex::Real qf = k_f * (sc[4] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[13] + g_RT[14])) * (sc[7] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[13] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 125:  CH3O + O2 <=> CH2O + HO2
    const amrex::Real k_f =
      4.28e-19 * exp((7.6) * tc[0] - (-1776.35483029066) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[13] + g_RT[14])) * (sc[5] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[13] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 126:  CH4 + H <=> CH3 + H2
    const amrex::Real k_f =
      660 * exp((1.62) * tc[0] - (5454.86865732316) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[10] + g_RT[11])) * (sc[6] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[10] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 127:  CH4 + O <=> CH3 + OH
    const amrex::Real k_f =
      1020 * exp((1.5) * tc[0] - (4327.66332592059) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[10] + g_RT[11])) * (sc[4] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[10] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 128:  CH4 + OH <=> CH3 + H2O
    const amrex::Real k_f =
      100 * exp((1.6) * tc[0] - (1570.03599731073) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[10] + g_RT[11])) * (sc[7] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[10] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 129:  CH + CH4 <=> C2H4 + H
    const amrex::Real k_f = 60000000;
    const amrex::Real qf = k_f * (sc[11] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[11] - g_RT[20] + g_RT_qss[1])) *
      (sc[2] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[11] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 130:  CH2 + CH4 <=> 2 CH3
    const amrex::Real k_f = 2.46 * exp((2) * tc[0] - (4161.60182620503) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-2.000000 * g_RT[10] + g_RT[11] + g_RT_qss[2])) *
      ((sc[10] * sc[10]));
    const amrex::Real qdot = qf - qr;
    wdot[10] += 2.000000 * qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 131:  CH2* + CH4 <=> 2 CH3
    const amrex::Real k_f = 16000000 * exp(-(-286.83349950869) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(-2.000000 * g_RT[10] + g_RT[11] + g_RT_qss[3])) *
      ((sc[10] * sc[10]));
    const amrex::Real qdot = qf - qr;
    wdot[10] += 2.000000 * qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 132:  CH3OH + H <=> CH3O + H2
    const amrex::Real k_f =
      4.2 * exp((2.1) * tc[0] - (2450.66516246898) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[14] + g_RT[15])) * (sc[6] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[14] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 133:  CH3OH + O <=> CH3O + OH
    const amrex::Real k_f =
      0.13 * exp((2.5) * tc[0] - (2516.0833290236) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[14] + g_RT[15])) * (sc[4] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[14] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 134:  CH3OH + OH <=> CH3O + H2O
    const amrex::Real k_f = 6.3 * exp((2) * tc[0] - (754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[14] + g_RT[15])) * (sc[7] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[14] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 135:  CH3 + CH3OH <=> CH3O + CH4
    const amrex::Real k_f = 10 * exp((1.5) * tc[0] - (5001.97365809891) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[14] + g_RT[15])) *
                           (sc[11] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[14] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 136:  H + HCCO <=> CH2* + CO
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[2] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[16] + g_RT[23] - g_RT_qss[3])) *
                           (sc[16] * sc_qss[3]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[16] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 137:  HCCO + O <=> 2 CO + H
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[3] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] - 2.000000 * g_RT[16] + g_RT[23])) *
      (refCinv) * (sc[2] * (sc[16] * sc[16]));
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[16] += 2.000000 * qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 138:  HCCO + O2 <=> 2 CO + OH
    const amrex::Real k_f = 1600000 * exp(-(429.747032597231) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[9] - 2.000000 * g_RT[16] + g_RT[23])) *
      (refCinv) * (sc[4] * (sc[16] * sc[16]));
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[9] -= qdot;
    wdot[16] += 2.000000 * qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 139:  CH + HCCO <=> C2H2 + CO
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[23] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[16] - g_RT[18] + g_RT[23] + g_RT_qss[1])) *
      (sc[16] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[18] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 140:  CH2 + HCCO <=> C2H3 + CO
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[23] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[16] - g_RT[19] + g_RT[23] + g_RT_qss[2])) *
      (sc[16] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[19] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 141:  2 HCCO <=> C2H2 + 2 CO
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * ((sc[23] * sc[23]));
    const amrex::Real qr =
      k_f * exp(-(-2.000000 * g_RT[16] - g_RT[18] + 2.000000 * g_RT[23])) *
      (refCinv) * ((sc[16] * sc[16]) * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += 2.000000 * qdot;
    wdot[18] += qdot;
    wdot[23] -= 2.000000 * qdot;
  }

  {
    // reaction 142:  C2H2 + O <=> CH2 + CO
    const amrex::Real k_f = 4.08 * exp((2) * tc[0] - (956.111665028967) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[16] + g_RT[18] - g_RT_qss[2])) *
                           (sc[16] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[16] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 143:  C2H2 + O <=> H + HCCO
    const amrex::Real k_f =
      16.32 * exp((2) * tc[0] - (956.111665028967) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[18] - g_RT[23])) * (sc[2] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[18] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 144:  C2H2 + OH <=> CH2CO + H
    const amrex::Real k_f =
      2.18e-10 * exp((4.5) * tc[0] - (-503.21666580472) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[18] - g_RT[24])) * (sc[2] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[18] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 145:  C2H2 + OH <=> CH3 + CO
    const amrex::Real k_f =
      4.83e-10 * exp((4) * tc[0] - (-1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[10] - g_RT[16] + g_RT[18])) *
                           (sc[10] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[10] += qdot;
    wdot[16] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 146:  C2H2 + HCO <=> C2H3 + CO
    const amrex::Real k_f = 10 * exp((2) * tc[0] - (3019.29999482832) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[16] + g_RT[18] - g_RT[19])) *
                           (sc[16] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[16] += qdot;
    wdot[18] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 147:  C2H2 + CH3 <=> H + aC3H4
    const amrex::Real k_f =
      5140 * exp((0.86) * tc[0] - (11147.758797572) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[10] + g_RT[18] - g_RT[27])) *
                           (sc[2] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[10] -= qdot;
    wdot[18] -= qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 148:  C2H2 + CH3 <=> aC3H5
    const amrex::Real k_f =
      2.68e+47 * exp((-12.82) * tc[0] - (17979.9314692026) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[10] + g_RT[18] - g_RT[28])) * (refC) * (sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[18] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 149:  H + H2CC <=> C2H2 + H
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[4]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[2] - g_RT[18] + g_RT_qss[4])) *
                           (sc[2] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[2] += qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 150:  H2CC + OH <=> CH2CO + H
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[4]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[4] - g_RT[24] + g_RT_qss[4])) *
                           (sc[2] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 151:  H2CC + O2 <=> 2 HCO
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[9] * sc_qss[4]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - 2.000000 * g_RT[12] + g_RT_qss[4])) *
                           ((sc[12] * sc[12]));
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[12] += 2.000000 * qdot;
  }

  {
    // reaction 152:  CH2CO + H <=> H2 + HCCO
    const amrex::Real k_f = 50000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[23] + g_RT[24])) * (sc[6] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 153:  CH2CO + H <=> CH3 + CO
    const amrex::Real k_f =
      1500 * exp((1.43) * tc[0] - (1353.6528310147) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[10] - g_RT[16] + g_RT[24])) *
                           (sc[10] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[10] += qdot;
    wdot[16] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 154:  CH2CO + O <=> HCCO + OH
    const amrex::Real k_f = 10000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[23] + g_RT[24])) * (sc[4] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 155:  CH2CO + O <=> CH2 + CO2
    const amrex::Real k_f = 1750000 * exp(-(679.342498836372) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[17] + g_RT[24] - g_RT_qss[2])) *
                           (sc[17] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[17] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 156:  CH2CO + OH <=> H2O + HCCO
    const amrex::Real k_f = 7500000 * exp(-(1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[23] + g_RT[24])) * (sc[7] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 157:  C2H3 + H <=> C2H2 + H2
    const amrex::Real k_f = 90000000;
    const amrex::Real qf = k_f * (sc[2] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[18] + g_RT[19])) * (sc[6] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[18] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 158:  C2H3 + H <=> H2 + H2CC
    const amrex::Real k_f = 60000000;
    const amrex::Real qf = k_f * (sc[2] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[6] + g_RT[19] - g_RT_qss[4])) *
                           (sc[6] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 159:  C2H3 + O <=> CH2CO + H
    const amrex::Real k_f = 48000000;
    const amrex::Real qf = k_f * (sc[3] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[19] - g_RT[24])) * (sc[2] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[19] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 160:  C2H3 + O <=> CH3 + CO
    const amrex::Real k_f = 48000000;
    const amrex::Real qf = k_f * (sc[3] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[10] - g_RT[16] + g_RT[19])) *
                           (sc[10] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[10] += qdot;
    wdot[16] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 161:  C2H3 + OH <=> C2H2 + H2O
    const amrex::Real k_f = 30110000;
    const amrex::Real qf = k_f * (sc[4] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[18] + g_RT[19])) * (sc[7] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[18] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 162:  C2H3 + O2 <=> C2H2 + HO2
    const amrex::Real k_f =
      1.34 * exp((1.61) * tc[0] - (-192.93326966953) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[18] + g_RT[19])) * (sc[5] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[18] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 163:  C2H3 + O2 <=> CH2CHO + O
    const amrex::Real k_f =
      300000 * exp((0.29) * tc[0] - (5.53538332385192) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[9] + g_RT[19] - g_RT[25])) * (sc[3] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[19] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 164:  C2H3 + O2 <=> CH2O + HCO
    const amrex::Real k_f =
      46000000000 * exp((-1.39) * tc[0] - (508.248832462767) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[12] - g_RT[13] + g_RT[19])) *
                           (sc[12] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[12] += qdot;
    wdot[13] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 165:  C2H3 + HO2 <=> CH2CHO + OH
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[5] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[19] - g_RT[25])) * (sc[4] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[19] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 166:  C2H3 + H2O2 <=> C2H4 + HO2
    const amrex::Real k_f = 12100 * exp(-(-299.917132819613) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[8] + g_RT[19] - g_RT[20])) * (sc[5] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[8] -= qdot;
    wdot[19] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 167:  C2H3 + HCO <=> C2H4 + CO
    const amrex::Real k_f = 90330000;
    const amrex::Real qf = k_f * (sc[12] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[16] + g_RT[19] - g_RT[20])) *
                           (sc[16] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[16] += qdot;
    wdot[19] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 168:  C2H3 + CH3 <=> C2H2 + CH4
    const amrex::Real k_f = 392000;
    const amrex::Real qf = k_f * (sc[10] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[18] + g_RT[19])) *
                           (sc[11] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[18] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 169:  C2H3 + CH3 <=> H + aC3H5
    const amrex::Real k_f =
      1.5e+18 * exp((-2.83) * tc[0] - (9368.88788395227) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[10] + g_RT[19] - g_RT[28])) *
                           (sc[2] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[10] -= qdot;
    wdot[19] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 170:  2 C2H3 <=> C2H2 + C2H4
    const amrex::Real k_f = 960000;
    const amrex::Real qf = k_f * ((sc[19] * sc[19]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[18] + 2.000000 * g_RT[19] - g_RT[20])) *
                           (sc[18] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[18] += qdot;
    wdot[19] -= 2.000000 * qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 171:  CH2CHO <=> CH3 + CO
    const amrex::Real k_f =
      7.8e+41 * exp((-9.147) * tc[0] - (23600.8616262414) * invT);
    const amrex::Real qf = k_f * (sc[25]);
    const amrex::Real qr = k_f * exp(-(-g_RT[10] - g_RT[16] + g_RT[25])) *
                           (refCinv) * (sc[10] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[16] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 172:  CH2CHO + H <=> CH3 + HCO
    const amrex::Real k_f = 90000000;
    const amrex::Real qf = k_f * (sc[2] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[10] - g_RT[12] + g_RT[25])) *
                           (sc[10] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[10] += qdot;
    wdot[12] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 173:  CH2CHO + H <=> CH2CO + H2
    const amrex::Real k_f = 20000000 * exp(-(2012.86666321888) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[24] + g_RT[25])) * (sc[6] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[24] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 174:  CH2CHO + O <=> CH2CO + OH
    const amrex::Real k_f = 20000000 * exp(-(2012.86666321888) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[24] + g_RT[25])) * (sc[4] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[24] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 175:  CH2CHO + OH <=> CH2CO + H2O
    const amrex::Real k_f = 10000000 * exp(-(1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[24] + g_RT[25])) * (sc[7] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[24] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 176:  CH2CHO + O2 <=> CH2CO + HO2
    const amrex::Real k_f = 140000;
    const amrex::Real qf = k_f * (sc[9] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[24] + g_RT[25])) * (sc[5] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[24] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 177:  CH2CHO + O2 <=> CH2O + CO + OH
    const amrex::Real k_f = 18000;
    const amrex::Real qf = k_f * (sc[9] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[9] - g_RT[13] - g_RT[16] + g_RT[25])) *
      (refCinv) * (sc[4] * sc[13] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[9] -= qdot;
    wdot[13] += qdot;
    wdot[16] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 178:  CH2OCH2 <=> CH3 + HCO
    const amrex::Real k_f = 36300000000000 * exp(-(28783.99328403) * invT);
    const amrex::Real qf = k_f * (sc[26]);
    const amrex::Real qr = k_f * exp(-(-g_RT[10] - g_RT[12] + g_RT[26])) *
                           (refCinv) * (sc[10] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[12] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 179:  CH2OCH2 <=> CH4 + CO
    const amrex::Real k_f = 12100000000000 * exp(-(28783.99328403) * invT);
    const amrex::Real qf = k_f * (sc[26]);
    const amrex::Real qr = k_f * exp(-(-g_RT[11] - g_RT[16] + g_RT[26])) *
                           (refCinv) * (sc[11] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[16] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 180:  CH2OCH2 + H <=> C2H3 + H2O
    const amrex::Real k_f = 5000 * exp(-(2516.0833290236) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[7] - g_RT[19] + g_RT[26])) * (sc[7] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[7] += qdot;
    wdot[19] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 181:  CH2OCH2 + H <=> C2H4 + OH
    const amrex::Real k_f = 95100 * exp(-(2516.0833290236) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[20] + g_RT[26])) * (sc[4] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[20] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 182:  C2H4 + H <=> C2H3 + H2
    const amrex::Real k_f =
      50.7 * exp((1.9) * tc[0] - (6516.65582217112) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[19] + g_RT[20])) * (sc[6] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 183:  C2H4 + O <=> C2H3 + OH
    const amrex::Real k_f =
      15.1 * exp((1.9) * tc[0] - (1882.03033010965) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[19] + g_RT[20])) * (sc[4] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 184:  C2H4 + O <=> CH3 + HCO
    const amrex::Real k_f =
      19.2 * exp((1.83) * tc[0] - (110.707666477038) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[10] - g_RT[12] + g_RT[20])) *
                           (sc[10] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[10] += qdot;
    wdot[12] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 185:  C2H4 + O <=> CH2 + CH2O
    const amrex::Real k_f =
      0.384 * exp((1.83) * tc[0] - (110.707666477038) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[13] + g_RT[20] - g_RT_qss[2])) *
                           (sc[13] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[13] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 186:  C2H4 + OH <=> C2H3 + H2O
    const amrex::Real k_f = 3.6 * exp((2) * tc[0] - (1258.0416645118) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[19] + g_RT[20])) * (sc[7] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 187:  C2H4 + HCO <=> C2H5 + CO
    const amrex::Real k_f = 10 * exp((2) * tc[0] - (4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[16] + g_RT[20] - g_RT[21])) *
                           (sc[16] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[16] += qdot;
    wdot[20] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 188:  C2H4 + CH <=> H + aC3H4
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[20] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[20] - g_RT[27] + g_RT_qss[1])) *
      (sc[2] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[20] -= qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 189:  C2H4 + CH2 <=> H + aC3H5
    const amrex::Real k_f = 20000000 * exp(-(3019.29999482832) * invT);
    const amrex::Real qf = k_f * (sc[20] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[20] - g_RT[28] + g_RT_qss[2])) *
      (sc[2] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[20] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 190:  C2H4 + CH2* <=> CH4 + H2CC
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[20] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[11] + g_RT[20] + g_RT_qss[3] - g_RT_qss[4])) *
      (sc[11] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 191:  C2H4 + CH2* <=> H + aC3H5
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[20] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[20] - g_RT[28] + g_RT_qss[3])) *
      (sc[2] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[20] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 192:  C2H4 + CH3 <=> C2H3 + CH4
    const amrex::Real k_f =
      0.227 * exp((2) * tc[0] - (4629.59332540342) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[19] + g_RT[20])) *
                           (sc[11] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 193:  C2H4 + CH3 <=> nC3H7
    const amrex::Real k_f = 330000 * exp(-(3874.76832669634) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[10] + g_RT[20] - g_RT[30])) * (refC) * (sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[20] -= qdot;
    wdot[30] += qdot;
  }

  {
    // reaction 194:  C2H4 + O2 <=> C2H3 + HO2
    const amrex::Real k_f = 42200000 * exp(-(30595.573280927) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[19] + g_RT[20])) * (sc[5] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 195:  C2H4 + HO2 <=> CH2OCH2 + OH
    const amrex::Real k_f = 2820000 * exp(-(8605.00498526071) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[20] - g_RT[26])) * (sc[4] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[20] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 196:  C2H5 + H <=> C2H4 + H2
    const amrex::Real k_f = 2000000;
    const amrex::Real qf = k_f * (sc[2] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[20] + g_RT[21])) * (sc[6] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[20] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 197:  C2H5 + O <=> CH2O + CH3
    const amrex::Real k_f = 16040000;
    const amrex::Real qf = k_f * (sc[3] * sc[21]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[10] - g_RT[13] + g_RT[21])) *
                           (sc[10] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[10] += qdot;
    wdot[13] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 198:  C2H5 + O2 <=> C2H4 + HO2
    const amrex::Real k_f = 20000;
    const amrex::Real qf = k_f * (sc[9] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[20] + g_RT[21])) * (sc[5] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[20] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 199:  C2H5 + HO2 <=> C2H6 + O2
    const amrex::Real k_f = 300000;
    const amrex::Real qf = k_f * (sc[5] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[9] + g_RT[21] - g_RT[22])) * (sc[9] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[9] += qdot;
    wdot[21] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 200:  C2H5 + HO2 <=> C2H4 + H2O2
    const amrex::Real k_f = 300000;
    const amrex::Real qf = k_f * (sc[5] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[8] - g_RT[20] + g_RT[21])) * (sc[8] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[8] += qdot;
    wdot[20] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 201:  C2H5 + HO2 <=> CH2O + CH3 + OH
    const amrex::Real k_f = 24000000;
    const amrex::Real qf = k_f * (sc[5] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[5] - g_RT[10] - g_RT[13] + g_RT[21])) *
      (refCinv) * (sc[4] * sc[10] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[10] += qdot;
    wdot[13] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 202:  C2H5 + H2O2 <=> C2H6 + HO2
    const amrex::Real k_f = 8700 * exp(-(490.133032493797) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[8] + g_RT[21] - g_RT[22])) * (sc[5] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[8] -= qdot;
    wdot[21] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 203:  C2H3 + C2H5 <=> CH3 + aC3H5
    const amrex::Real k_f =
      3.9e+26 * exp((-5.22) * tc[0] - (9937.0194996458) * invT);
    const amrex::Real qf = k_f * (sc[19] * sc[21]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[19] + g_RT[21] - g_RT[28])) *
                           (sc[10] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[19] -= qdot;
    wdot[21] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 204:  C2H6 + H <=> C2H5 + H2
    const amrex::Real k_f =
      115 * exp((1.9) * tc[0] - (3789.22149350954) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[21] + g_RT[22])) * (sc[6] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 205:  C2H6 + O <=> C2H5 + OH
    const amrex::Real k_f =
      89.8 * exp((1.92) * tc[0] - (2863.30282842885) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[21] + g_RT[22])) * (sc[4] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 206:  C2H6 + OH <=> C2H5 + H2O
    const amrex::Real k_f =
      3.54 * exp((2.12) * tc[0] - (437.798499250106) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[21] + g_RT[22])) * (sc[7] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 207:  C2H6 + CH2* <=> C2H5 + CH3
    const amrex::Real k_f = 40000000 * exp(-(-276.769166192596) * invT);
    const amrex::Real qf = k_f * (sc[22] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[10] - g_RT[21] + g_RT[22] + g_RT_qss[3])) *
      (sc[10] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 208:  C2H6 + CH3 <=> C2H5 + CH4
    const amrex::Real k_f =
      6.14 * exp((1.74) * tc[0] - (5258.61415765932) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[21] + g_RT[22])) *
                           (sc[11] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 209:  CH3O2 + HO2 <=> CH2O + H2O + O2
    const amrex::Real k_f = 18000 * exp(-(-720.103048766554) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[37]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[7] - g_RT[9] - g_RT[13] + g_RT[37])) *
      (refCinv) * (sc[7] * sc[9] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[7] += qdot;
    wdot[9] += qdot;
    wdot[13] += qdot;
    wdot[37] -= qdot;
  }

  {
    // reaction 210:  2 CH3O2 <=> CH2O + CH3OH + O2
    const amrex::Real k_f = 1046 * exp(-(-1806.04461357314) * invT);
    const amrex::Real qf = k_f * ((sc[37] * sc[37]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[9] - g_RT[13] - g_RT[15] + 2.000000 * g_RT[37])) *
      (refCinv) * (sc[9] * sc[13] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[13] += qdot;
    wdot[15] += qdot;
    wdot[37] -= 2.000000 * qdot;
  }

  {
    // reaction 211:  2 CH3O2 <=> 2 CH3O + O2
    const amrex::Real k_f = 77410 * exp(-(-30.6962166140879) * invT);
    const amrex::Real qf = k_f * ((sc[37] * sc[37]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[9] - 2.000000 * g_RT[14] + 2.000000 * g_RT[37])) *
      (refCinv) * (sc[9] * (sc[14] * sc[14]));
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[14] += 2.000000 * qdot;
    wdot[37] -= 2.000000 * qdot;
  }

  {
    // reaction 212:  CH3 + CH3O2 <=> 2 CH3O
    const amrex::Real k_f = 1000000 * exp(-(-710.038715450459) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[37]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - 2.000000 * g_RT[14] + g_RT[37])) *
                           ((sc[14] * sc[14]));
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[14] += 2.000000 * qdot;
    wdot[37] -= qdot;
  }

  {
    // reaction 213:  CH3O2 + OH <=> CH3OH + O2
    const amrex::Real k_f = 60000000;
    const amrex::Real qf = k_f * (sc[4] * sc[37]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[9] - g_RT[15] + g_RT[37])) * (sc[9] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[9] += qdot;
    wdot[15] += qdot;
    wdot[37] -= qdot;
  }

  {
    // reaction 214:  CH3O2 + H <=> CH3O + OH
    const amrex::Real k_f = 96000000;
    const amrex::Real qf = k_f * (sc[2] * sc[37]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[14] + g_RT[37])) * (sc[4] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[14] += qdot;
    wdot[37] -= qdot;
  }

  {
    // reaction 215:  CH3O2 + O <=> CH3O + O2
    const amrex::Real k_f = 36000000;
    const amrex::Real qf = k_f * (sc[3] * sc[37]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[9] - g_RT[14] + g_RT[37])) * (sc[9] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[9] += qdot;
    wdot[14] += qdot;
    wdot[37] -= qdot;
  }

  {
    // reaction 216:  H + aC3H4 <=> aC3H5
    const amrex::Real k_f =
      1.52e+53 * exp((-13.54) * tc[0] - (13561.1859267714) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] + g_RT[27] - g_RT[28])) * (refC) * (sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[27] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 217:  O + aC3H4 <=> C2H4 + CO
    const amrex::Real k_f = 20 * exp((1.8) * tc[0] - (503.21666580472) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[27]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[16] - g_RT[20] + g_RT[27])) *
                           (sc[16] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[16] += qdot;
    wdot[20] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 218:  H + aC3H5 <=> H2 + aC3H4
    const amrex::Real k_f = 18000000;
    const amrex::Real qf = k_f * (sc[2] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[27] + g_RT[28])) * (sc[6] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[27] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 219:  OH + aC3H5 <=> H2O + aC3H4
    const amrex::Real k_f = 6000000;
    const amrex::Real qf = k_f * (sc[4] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[27] + g_RT[28])) * (sc[7] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[27] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 220:  O2 + aC3H5 <=> HO2 + aC3H4
    const amrex::Real k_f =
      4990000000 * exp((-1.4) * tc[0] - (11286.1433806683) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[27] + g_RT[28])) * (sc[5] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[27] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 221:  HO2 + aC3H5 <=> C3H6 + O2
    const amrex::Real k_f = 2660000;
    const amrex::Real qf = k_f * (sc[5] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[9] + g_RT[28] - g_RT[29])) * (sc[9] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[9] += qdot;
    wdot[28] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 222:  HO2 + aC3H5 <=> C2H3 + CH2O + OH
    const amrex::Real k_f = 6600000;
    const amrex::Real qf = k_f * (sc[5] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[5] - g_RT[13] - g_RT[19] + g_RT[28])) *
      (refCinv) * (sc[4] * sc[13] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[13] += qdot;
    wdot[19] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 223:  HCO + aC3H5 <=> C3H6 + CO
    const amrex::Real k_f = 60000000;
    const amrex::Real qf = k_f * (sc[12] * sc[28]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[16] + g_RT[28] - g_RT[29])) *
                           (sc[16] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[16] += qdot;
    wdot[28] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 224:  CH3 + aC3H5 <=> CH4 + aC3H4
    const amrex::Real k_f =
      3000000 * exp((-0.32) * tc[0] - (-65.9213832204183) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[28]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[27] + g_RT[28])) *
                           (sc[11] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[27] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 225:  C3H6 + H <=> C2H4 + CH3
    const amrex::Real k_f =
      8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[29]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[10] - g_RT[20] + g_RT[29])) *
                           (sc[10] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[10] += qdot;
    wdot[20] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 226:  C3H6 + H <=> H2 + aC3H5
    const amrex::Real k_f =
      0.173 * exp((2.5) * tc[0] - (1253.00949785375) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[28] + g_RT[29])) * (sc[6] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[28] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 227:  C3H6 + O <=> CH2CO + CH3 + H
    const amrex::Real k_f =
      80 * exp((1.65) * tc[0] - (164.551849718143) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] - g_RT[10] - g_RT[24] + g_RT[29])) *
      (refCinv) * (sc[2] * sc[10] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[10] += qdot;
    wdot[24] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 228:  C3H6 + O <=> C2H5 + HCO
    const amrex::Real k_f =
      35 * exp((1.65) * tc[0] - (-489.126599162188) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[29]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[12] - g_RT[21] + g_RT[29])) *
                           (sc[12] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[12] += qdot;
    wdot[21] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 229:  C3H6 + O <=> OH + aC3H5
    const amrex::Real k_f =
      180000 * exp((0.7) * tc[0] - (2958.91399493175) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[28] + g_RT[29])) * (sc[4] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[28] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 230:  C3H6 + OH <=> H2O + aC3H5
    const amrex::Real k_f = 3.1 * exp((2) * tc[0] - (-149.958566409806) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[28] + g_RT[29])) * (sc[7] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[28] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 231:  C3H6 + HO2 <=> H2O2 + aC3H5
    const amrex::Real k_f =
      0.0096 * exp((2.6) * tc[0] - (6999.74382134365) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[8] - g_RT[28] + g_RT[29])) * (sc[8] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[8] += qdot;
    wdot[28] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 232:  C3H6 + CH3 <=> CH4 + aC3H5
    const amrex::Real k_f =
      2.2e-06 * exp((3.5) * tc[0] - (2855.75457844178) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[29]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[28] + g_RT[29])) *
                           (sc[11] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[28] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 233:  H + nC3H7 <=> C2H5 + CH3
    const amrex::Real k_f =
      3.7e+18 * exp((-2.92) * tc[0] - (6292.72440588802) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[30]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[10] - g_RT[21] + g_RT[30])) *
                           (sc[10] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[10] += qdot;
    wdot[21] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 234:  H + nC3H7 <=> C3H6 + H2
    const amrex::Real k_f = 1800000;
    const amrex::Real qf = k_f * (sc[2] * sc[30]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[29] + g_RT[30])) * (sc[6] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[29] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 235:  O + nC3H7 <=> C2H5 + CH2O
    const amrex::Real k_f = 96000000;
    const amrex::Real qf = k_f * (sc[3] * sc[30]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[13] - g_RT[21] + g_RT[30])) *
                           (sc[13] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[13] += qdot;
    wdot[21] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 236:  OH + nC3H7 <=> C3H6 + H2O
    const amrex::Real k_f = 24000000;
    const amrex::Real qf = k_f * (sc[4] * sc[30]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[29] + g_RT[30])) * (sc[7] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[29] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 237:  O2 + nC3H7 <=> C3H6 + HO2
    const amrex::Real k_f = 90000;
    const amrex::Real qf = k_f * (sc[9] * sc[30]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + g_RT[9] - g_RT[29] + g_RT[30])) * (sc[5] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[9] -= qdot;
    wdot[29] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 238:  HO2 + nC3H7 <=> C2H5 + CH2O + OH
    const amrex::Real k_f = 24000000;
    const amrex::Real qf = k_f * (sc[5] * sc[30]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[5] - g_RT[13] - g_RT[21] + g_RT[30])) *
      (refCinv) * (sc[4] * sc[13] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[13] += qdot;
    wdot[21] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 239:  CH3 + nC3H7 <=> C3H6 + CH4
    const amrex::Real k_f = 11000000;
    const amrex::Real qf = k_f * (sc[10] * sc[30]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[29] + g_RT[30])) *
                           (sc[11] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[29] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 240:  C4H81 + H <=> C2H4 + C2H5
    const amrex::Real k_f =
      1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[31]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[20] - g_RT[21] + g_RT[31])) *
                           (sc[20] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[20] += qdot;
    wdot[21] += qdot;
    wdot[31] -= qdot;
  }

  {
    // reaction 241:  C4H81 + H <=> C3H6 + CH3
    const amrex::Real k_f =
      3.2e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[31]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[10] - g_RT[29] + g_RT[31])) *
                           (sc[10] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[10] += qdot;
    wdot[29] += qdot;
    wdot[31] -= qdot;
  }

  {
    // reaction 242:  C4H81 + O <=> HCO + nC3H7
    const amrex::Real k_f =
      330 * exp((1.45) * tc[0] - (-202.293099653497) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[31]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[12] - g_RT[30] + g_RT[31])) *
                           (sc[12] * sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[12] += qdot;
    wdot[30] += qdot;
    wdot[31] -= qdot;
  }

  {
    // reaction 243:  N + NO <=> N2 + O
    const amrex::Real k_f = 27000000 * exp(-(178.641916360675) * invT);
    const amrex::Real qf = k_f * (sc[32] * sc_qss[5]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] - g_RT[3] + g_RT[32] + g_RT_qss[5])) *
                           (sc[1] * sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] += qdot;
    wdot[32] -= qdot;
  }

  {
    // reaction 244:  N + O2 <=> NO + O
    const amrex::Real k_f = 9000 * exp((1) * tc[0] - (3270.90832773068) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[32]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[3] + g_RT[9] + g_RT[32] - g_RT_qss[5])) *
                           (sc[3] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[32] -= qdot;
  }

  {
    // reaction 245:  N + OH <=> H + NO
    const amrex::Real k_f = 33600000 * exp(-(193.738416334817) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[32]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[4] + g_RT[32] - g_RT_qss[5])) *
                           (sc[2] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[32] -= qdot;
  }

  {
    // reaction 246:  HO2 + NO <=> NO2 + OH
    const amrex::Real k_f = 2110000 * exp(-(-241.543999586265) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc_qss[5]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[5] - g_RT[33] + g_RT_qss[5])) *
                           (sc[4] * sc[33]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[33] += qdot;
  }

  {
    // reaction 247:  NO2 + O <=> NO + O2
    const amrex::Real k_f = 3900000 * exp(-(-120.771999793133) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[33]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[9] + g_RT[33] - g_RT_qss[5])) *
                           (sc[9] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[9] += qdot;
    wdot[33] -= qdot;
  }

  {
    // reaction 248:  H + NO2 <=> NO + OH
    const amrex::Real k_f = 132000000 * exp(-(181.157999689699) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[33]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[4] + g_RT[33] - g_RT_qss[5])) *
                           (sc[4] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[33] -= qdot;
  }

  {
    // reaction 249:  NCO + O <=> CO + NO
    const amrex::Real k_f = 2000000000 * exp((-0.5) * tc[0]);
    const amrex::Real qf = k_f * (sc[3] * sc[36]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[16] + g_RT[36] - g_RT_qss[5])) *
                           (sc[16] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[16] += qdot;
    wdot[36] -= qdot;
  }

  {
    // reaction 250:  NCO + OH <=> CO + H + NO
    const amrex::Real k_f =
      8300000 * exp((-0.1) * tc[0] - (37986.8196682667) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[36]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] - g_RT[16] + g_RT[36] - g_RT_qss[5])) *
      (refCinv) * (sc[2] * sc[16] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[16] += qdot;
    wdot[36] -= qdot;
  }

  {
    // reaction 251:  N + NCO <=> CO + N2
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[32] * sc[36]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] - g_RT[16] + g_RT[32] + g_RT[36])) *
                           (sc[1] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[16] += qdot;
    wdot[32] -= qdot;
    wdot[36] -= qdot;
  }

  {
    // reaction 252:  NCO + O2 <=> CO2 + NO
    const amrex::Real k_f = 2000000 * exp(-(10064.3333160944) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[36]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[17] + g_RT[36] - g_RT_qss[5])) *
                           (sc[17] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[17] += qdot;
    wdot[36] -= qdot;
  }

  {
    // reaction 253:  NCO + NO <=> CO2 + N2
    const amrex::Real k_f =
      3800000000000 * exp((-2) * tc[0] - (402.573332643776) * invT);
    const amrex::Real qf = k_f * (sc[36] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] - g_RT[17] + g_RT[36] + g_RT_qss[5])) *
      (sc[1] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[17] += qdot;
    wdot[36] -= qdot;
  }

  {
    // reaction 254:  C + NO <=> CO + N
    const amrex::Real k_f = 29000000;
    const amrex::Real qf = k_f * (sc_qss[0] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[16] - g_RT[32] + g_RT_qss[0] + g_RT_qss[5])) *
      (sc[16] * sc[32]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[16] += qdot;
    wdot[32] += qdot;
  }

  {
    // reaction 255:  CH + NO <=> H + NCO
    const amrex::Real k_f = 16200000;
    const amrex::Real qf = k_f * (sc_qss[1] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] - g_RT[36] + g_RT_qss[1] + g_RT_qss[5])) *
      (sc[2] * sc[36]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[2] += qdot;
    wdot[36] += qdot;
  }

  {
    // reaction 256:  CH + NO <=> HCO + N
    const amrex::Real k_f = 24600000;
    const amrex::Real qf = k_f * (sc_qss[1] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[12] - g_RT[32] + g_RT_qss[1] + g_RT_qss[5])) *
      (sc[12] * sc[32]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[12] += qdot;
    wdot[32] += qdot;
  }

  {
    // reaction 257:  CH2 + NO <=> H + HNCO
    const amrex::Real k_f =
      310000000000 * exp((-1.38) * tc[0] - (639.085165571994) * invT);
    const amrex::Real qf = k_f * (sc_qss[2] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] - g_RT[35] + g_RT_qss[2] + g_RT_qss[5])) *
      (sc[2] * sc[35]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[2] += qdot;
    wdot[35] += qdot;
  }

  {
    // reaction 258:  CH2 + NO <=> H + HCNO
    const amrex::Real k_f =
      38000000 * exp((-0.36) * tc[0] - (291.865666166737) * invT);
    const amrex::Real qf = k_f * (sc_qss[2] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] - g_RT[34] + g_RT_qss[2] + g_RT_qss[5])) *
      (sc[2] * sc[34]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[2] += qdot;
    wdot[34] += qdot;
  }

  {
    // reaction 259:  CH2* + NO <=> H + HNCO
    const amrex::Real k_f =
      310000000000 * exp((-1.38) * tc[0] - (639.085165571994) * invT);
    const amrex::Real qf = k_f * (sc_qss[3] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] - g_RT[35] + g_RT_qss[3] + g_RT_qss[5])) *
      (sc[2] * sc[35]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[2] += qdot;
    wdot[35] += qdot;
  }

  {
    // reaction 260:  CH2* + NO <=> H + HCNO
    const amrex::Real k_f =
      38000000 * exp((-0.36) * tc[0] - (291.865666166737) * invT);
    const amrex::Real qf = k_f * (sc_qss[3] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] - g_RT[34] + g_RT_qss[3] + g_RT_qss[5])) *
      (sc[2] * sc[34]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[2] += qdot;
    wdot[34] += qdot;
  }

  {
    // reaction 261:  HNCO + O <=> NCO + OH
    const amrex::Real k_f =
      2.2 * exp((2.11) * tc[0] - (24065.3306087791) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[35]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[35] - g_RT[36])) * (sc[4] * sc[36]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[35] -= qdot;
    wdot[36] += qdot;
  }

  {
    // reaction 262:  H + HNCO <=> H2 + NCO
    const amrex::Real k_f = 90 * exp((1.7) * tc[0] - (29266.0748498709) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[35]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] + g_RT[35] - g_RT[36])) * (sc[6] * sc[36]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[35] -= qdot;
    wdot[36] += qdot;
  }

  {
    // reaction 263:  HNCO + OH <=> H2O + NCO
    const amrex::Real k_f = 33 * exp((1.5) * tc[0] - (1811.57999689699) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[35]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] + g_RT[35] - g_RT[36])) * (sc[7] * sc[36]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[35] -= qdot;
    wdot[36] += qdot;
  }

  {
    // reaction 264:  H + HCNO <=> H + HNCO
    const amrex::Real k_f =
      2100000000 * exp((-0.69) * tc[0] - (1434.16749754345) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[34]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[2] + g_RT[34] - g_RT[35])) * (sc[2] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[2] += qdot;
    wdot[34] -= qdot;
    wdot[35] += qdot;
  }

  {
    // reaction 265:  HCCO + NO <=> CO + HCNO
    const amrex::Real k_f = 55000 * exp(-(920.886498422637) * invT);
    const amrex::Real qf = k_f * (sc[23] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[16] + g_RT[23] - g_RT[34] + g_RT_qss[5])) *
      (sc[16] * sc[34]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[23] -= qdot;
    wdot[34] += qdot;
  }

  {
    // reaction 266:  CO2 + N <=> CO + NO
    const amrex::Real k_f = 3000000 * exp(-(5686.34832359333) * invT);
    const amrex::Real qf = k_f * (sc[17] * sc[32]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[16] + g_RT[17] + g_RT[32] - g_RT_qss[5])) *
      (sc[16] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[17] -= qdot;
    wdot[32] -= qdot;
  }

  {
    // reaction 267:  CH3 + NO2 <=> CH3O + NO
    const amrex::Real k_f = 15100000 * exp((-0.05) * tc[0]);
    const amrex::Real qf = k_f * (sc[10] * sc[33]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[10] - g_RT[14] + g_RT[33] - g_RT_qss[5])) *
      (sc[14] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[14] += qdot;
    wdot[33] -= qdot;
  }

  {
    // reaction 268:  CH3O2 + NO <=> CH3O + NO2
    const amrex::Real k_f = 1690000 * exp(-(-286.83349950869) * invT);
    const amrex::Real qf = k_f * (sc[37] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[14] - g_RT[33] + g_RT[37] + g_RT_qss[5])) *
      (sc[14] * sc[33]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[33] += qdot;
    wdot[37] -= qdot;
  }

  return;
}

// compute the production rate for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWC(const amrex::Real T, amrex::Real C[], amrex::Real wdot[])
{
  int id; // loop counter

  // convert to SI
  for (id = 0; id < 38; ++id) {
    C[id] *= 1.0e6;
  }

  // convert to chemkin units
  productionRate(wdot, C, T);

  // convert to chemkin units
  for (id = 0; id < 38; ++id) {
    C[id] *= 1.0e-6;
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[])
{
  int id;            // loop counter
  amrex::Real c[38]; // temporary storage
  amrex::Real YOW = 0;
  amrex::Real PWORT;
  amrex::Real imw[38];

  get_imw(imw);

  // Compute inverse of mean molecular wt first
  YOW += y[0] * imw[0];   // AR
  YOW += y[1] * imw[1];   // N2
  YOW += y[2] * imw[2];   // H
  YOW += y[3] * imw[3];   // O
  YOW += y[4] * imw[4];   // OH
  YOW += y[5] * imw[5];   // HO2
  YOW += y[6] * imw[6];   // H2
  YOW += y[7] * imw[7];   // H2O
  YOW += y[8] * imw[8];   // H2O2
  YOW += y[9] * imw[9];   // O2
  YOW += y[10] * imw[10]; // CH3
  YOW += y[11] * imw[11]; // CH4
  YOW += y[12] * imw[12]; // HCO
  YOW += y[13] * imw[13]; // CH2O
  YOW += y[14] * imw[14]; // CH3O
  YOW += y[15] * imw[15]; // CH3OH
  YOW += y[16] * imw[16]; // CO
  YOW += y[17] * imw[17]; // CO2
  YOW += y[18] * imw[18]; // C2H2
  YOW += y[19] * imw[19]; // C2H3
  YOW += y[20] * imw[20]; // C2H4
  YOW += y[21] * imw[21]; // C2H5
  YOW += y[22] * imw[22]; // C2H6
  YOW += y[23] * imw[23]; // HCCO
  YOW += y[24] * imw[24]; // CH2CO
  YOW += y[25] * imw[25]; // CH2CHO
  YOW += y[26] * imw[26]; // CH2OCH2
  YOW += y[27] * imw[27]; // aC3H4
  YOW += y[28] * imw[28]; // aC3H5
  YOW += y[29] * imw[29]; // C3H6
  YOW += y[30] * imw[30]; // nC3H7
  YOW += y[31] * imw[31]; // C4H81
  YOW += y[32] * imw[32]; // N
  YOW += y[33] * imw[33]; // NO2
  YOW += y[34] * imw[34]; // HCNO
  YOW += y[35] * imw[35]; // HNCO
  YOW += y[36] * imw[36]; // NCO
  YOW += y[37] * imw[37]; // CH3O2
  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // multiply by 1e6 so c goes to SI
  PWORT *= 1e6;
  // Now compute conversion (and go to SI)
  c[0] = PWORT * y[0] * imw[0];
  c[1] = PWORT * y[1] * imw[1];
  c[2] = PWORT * y[2] * imw[2];
  c[3] = PWORT * y[3] * imw[3];
  c[4] = PWORT * y[4] * imw[4];
  c[5] = PWORT * y[5] * imw[5];
  c[6] = PWORT * y[6] * imw[6];
  c[7] = PWORT * y[7] * imw[7];
  c[8] = PWORT * y[8] * imw[8];
  c[9] = PWORT * y[9] * imw[9];
  c[10] = PWORT * y[10] * imw[10];
  c[11] = PWORT * y[11] * imw[11];
  c[12] = PWORT * y[12] * imw[12];
  c[13] = PWORT * y[13] * imw[13];
  c[14] = PWORT * y[14] * imw[14];
  c[15] = PWORT * y[15] * imw[15];
  c[16] = PWORT * y[16] * imw[16];
  c[17] = PWORT * y[17] * imw[17];
  c[18] = PWORT * y[18] * imw[18];
  c[19] = PWORT * y[19] * imw[19];
  c[20] = PWORT * y[20] * imw[20];
  c[21] = PWORT * y[21] * imw[21];
  c[22] = PWORT * y[22] * imw[22];
  c[23] = PWORT * y[23] * imw[23];
  c[24] = PWORT * y[24] * imw[24];
  c[25] = PWORT * y[25] * imw[25];
  c[26] = PWORT * y[26] * imw[26];
  c[27] = PWORT * y[27] * imw[27];
  c[28] = PWORT * y[28] * imw[28];
  c[29] = PWORT * y[29] * imw[29];
  c[30] = PWORT * y[30] * imw[30];
  c[31] = PWORT * y[31] * imw[31];
  c[32] = PWORT * y[32] * imw[32];
  c[33] = PWORT * y[33] * imw[33];
  c[34] = PWORT * y[34] * imw[34];
  c[35] = PWORT * y[35] * imw[35];
  c[36] = PWORT * y[36] * imw[36];
  c[37] = PWORT * y[37] * imw[37];

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (id = 0; id < 38; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[])
{
  int id;            // loop counter
  amrex::Real c[38]; // temporary storage
  amrex::Real PORT =
    1e6 * P / (8.31446261815324e+07 * T); // 1e6 * P/RT so c goes to SI units

  // Compute conversion, see Eq 10
  for (id = 0; id < 38; ++id) {
    c[id] = x[id] * PORT;
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (id = 0; id < 38; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[])
{
  int id;            // loop counter
  amrex::Real c[38]; // temporary storage
  amrex::Real imw[38];

  get_imw(imw);

  // See Eq 8 with an extra 1e6 so c goes to SI
  c[0] = 1e6 * rho * y[0] * imw[0];
  c[1] = 1e6 * rho * y[1] * imw[1];
  c[2] = 1e6 * rho * y[2] * imw[2];
  c[3] = 1e6 * rho * y[3] * imw[3];
  c[4] = 1e6 * rho * y[4] * imw[4];
  c[5] = 1e6 * rho * y[5] * imw[5];
  c[6] = 1e6 * rho * y[6] * imw[6];
  c[7] = 1e6 * rho * y[7] * imw[7];
  c[8] = 1e6 * rho * y[8] * imw[8];
  c[9] = 1e6 * rho * y[9] * imw[9];
  c[10] = 1e6 * rho * y[10] * imw[10];
  c[11] = 1e6 * rho * y[11] * imw[11];
  c[12] = 1e6 * rho * y[12] * imw[12];
  c[13] = 1e6 * rho * y[13] * imw[13];
  c[14] = 1e6 * rho * y[14] * imw[14];
  c[15] = 1e6 * rho * y[15] * imw[15];
  c[16] = 1e6 * rho * y[16] * imw[16];
  c[17] = 1e6 * rho * y[17] * imw[17];
  c[18] = 1e6 * rho * y[18] * imw[18];
  c[19] = 1e6 * rho * y[19] * imw[19];
  c[20] = 1e6 * rho * y[20] * imw[20];
  c[21] = 1e6 * rho * y[21] * imw[21];
  c[22] = 1e6 * rho * y[22] * imw[22];
  c[23] = 1e6 * rho * y[23] * imw[23];
  c[24] = 1e6 * rho * y[24] * imw[24];
  c[25] = 1e6 * rho * y[25] * imw[25];
  c[26] = 1e6 * rho * y[26] * imw[26];
  c[27] = 1e6 * rho * y[27] * imw[27];
  c[28] = 1e6 * rho * y[28] * imw[28];
  c[29] = 1e6 * rho * y[29] * imw[29];
  c[30] = 1e6 * rho * y[30] * imw[30];
  c[31] = 1e6 * rho * y[31] * imw[31];
  c[32] = 1e6 * rho * y[32] * imw[32];
  c[33] = 1e6 * rho * y[33] * imw[33];
  c[34] = 1e6 * rho * y[34] * imw[34];
  c[35] = 1e6 * rho * y[35] * imw[35];
  c[36] = 1e6 * rho * y[36] * imw[36];
  c[37] = 1e6 * rho * y[37] * imw[37];

  // call productionRate
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (id = 0; id < 38; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[])
{
  int id;             // loop counter
  amrex::Real c[38];  // temporary storage
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 39.950000;  // AR
  XW += x[1] * 28.014000;  // N2
  XW += x[2] * 1.008000;   // H
  XW += x[3] * 15.999000;  // O
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 33.006000;  // HO2
  XW += x[6] * 2.016000;   // H2
  XW += x[7] * 18.015000;  // H2O
  XW += x[8] * 34.014000;  // H2O2
  XW += x[9] * 31.998000;  // O2
  XW += x[10] * 15.035000; // CH3
  XW += x[11] * 16.043000; // CH4
  XW += x[12] * 29.018000; // HCO
  XW += x[13] * 30.026000; // CH2O
  XW += x[14] * 31.034000; // CH3O
  XW += x[15] * 32.042000; // CH3OH
  XW += x[16] * 28.010000; // CO
  XW += x[17] * 44.009000; // CO2
  XW += x[18] * 26.038000; // C2H2
  XW += x[19] * 27.046000; // C2H3
  XW += x[20] * 28.054000; // C2H4
  XW += x[21] * 29.062000; // C2H5
  XW += x[22] * 30.070000; // C2H6
  XW += x[23] * 41.029000; // HCCO
  XW += x[24] * 42.037000; // CH2CO
  XW += x[25] * 43.045000; // CH2CHO
  XW += x[26] * 44.053000; // CH2OCH2
  XW += x[27] * 40.065000; // aC3H4
  XW += x[28] * 41.073000; // aC3H5
  XW += x[29] * 42.081000; // C3H6
  XW += x[30] * 43.089000; // nC3H7
  XW += x[31] * 56.108000; // C4H81
  XW += x[32] * 14.007000; // N
  XW += x[33] * 46.005000; // NO2
  XW += x[34] * 43.025000; // HCNO
  XW += x[35] * 43.025000; // HNCO
  XW += x[36] * 42.017000; // NCO
  XW += x[37] * 47.033000; // CH3O2
  // Extra 1e6 factor to take c to SI
  ROW = 1e6 * rho / XW;

  // Compute conversion, see Eq 11
  for (id = 0; id < 38; ++id) {
    c[id] = x[id] * ROW;
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (id = 0; id < 38; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

//  species unit charge number
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRG(int kcharge[])
{
  kcharge[0] = 0;  // AR
  kcharge[1] = 0;  // N2
  kcharge[2] = 0;  // H
  kcharge[3] = 0;  // O
  kcharge[4] = 0;  // OH
  kcharge[5] = 0;  // HO2
  kcharge[6] = 0;  // H2
  kcharge[7] = 0;  // H2O
  kcharge[8] = 0;  // H2O2
  kcharge[9] = 0;  // O2
  kcharge[10] = 0; // CH3
  kcharge[11] = 0; // CH4
  kcharge[12] = 0; // HCO
  kcharge[13] = 0; // CH2O
  kcharge[14] = 0; // CH3O
  kcharge[15] = 0; // CH3OH
  kcharge[16] = 0; // CO
  kcharge[17] = 0; // CO2
  kcharge[18] = 0; // C2H2
  kcharge[19] = 0; // C2H3
  kcharge[20] = 0; // C2H4
  kcharge[21] = 0; // C2H5
  kcharge[22] = 0; // C2H6
  kcharge[23] = 0; // HCCO
  kcharge[24] = 0; // CH2CO
  kcharge[25] = 0; // CH2CHO
  kcharge[26] = 0; // CH2OCH2
  kcharge[27] = 0; // aC3H4
  kcharge[28] = 0; // aC3H5
  kcharge[29] = 0; // C3H6
  kcharge[30] = 0; // nC3H7
  kcharge[31] = 0; // C4H81
  kcharge[32] = 0; // N
  kcharge[33] = 0; // NO2
  kcharge[34] = 0; // HCNO
  kcharge[35] = 0; // HNCO
  kcharge[36] = 0; // NCO
  kcharge[37] = 0; // CH3O2
}

//  species charge per unit mass
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRGMASS(amrex::Real zk[])
{
  amrex::Real imw[38];
  get_imw(imw);

  int kchrg[38];
  CKCHRG(kchrg);

  for (int id = 0; id < 38; ++id) {
    zk[id] = 6.02214076e+23 * 1.60217663e-19 * kchrg[id] * imw[id];
  }
}

// compute d(Cp/R)/dT and d(Cv/R)/dT at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
dcvpRdT(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with no change at a midpoint T
  // species 0: AR
  species[0] = +0.00000000e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 1: N2
    species[1] = +1.40824040e-03 - 7.92644400e-06 * tc[1] +
                 1.69245450e-08 * tc[2] - 9.77941600e-12 * tc[3];
    // species 2: H
    species[2] = +7.05332819e-13 - 3.99183928e-15 * tc[1] +
                 6.90244896e-18 * tc[2] - 3.71092933e-21 * tc[3];
    // species 3: O
    species[3] = -3.27931884e-03 + 1.32861279e-05 * tc[1] -
                 1.83841987e-08 * tc[2] + 8.45063884e-12 * tc[3];
    // species 4: OH
    species[4] = -3.22544939e-03 + 1.30552938e-05 * tc[1] -
                 1.73956093e-08 * tc[2] + 8.24949516e-12 * tc[3];
    // species 5: HO2
    species[5] = -4.74912051e-03 + 4.23165782e-05 * tc[1] -
                 7.28291682e-08 * tc[2] + 3.71690050e-11 * tc[3];
    // species 6: H2
    species[6] = +7.98052075e-03 - 3.89563020e-05 * tc[1] +
                 6.04716282e-08 * tc[2] - 2.95044704e-11 * tc[3];
    // species 7: H2O
    species[7] = -2.03643410e-03 + 1.30408042e-05 * tc[1] -
                 1.64639119e-08 * tc[2] + 7.08791268e-12 * tc[3];
    // species 8: H2O2
    species[8] = -5.42822417e-04 + 3.34671402e-05 * tc[1] -
                 6.47312439e-08 * tc[2] + 3.44981745e-11 * tc[3];
    // species 9: O2
    species[9] = -2.99673416e-03 + 1.96946040e-05 * tc[1] -
                 2.90438853e-08 * tc[2] + 1.29749135e-11 * tc[3];
    // species 10: CH3
    species[10] = +2.01095175e-03 + 1.14604371e-05 * tc[1] -
                  2.06135228e-08 * tc[2] + 1.01754294e-11 * tc[3];
    // species 11: CH4
    species[11] = -1.36709788e-02 + 9.83601198e-05 * tc[1] -
                  1.45422908e-07 * tc[2] + 6.66775824e-11 * tc[3];
    // species 12: HCO
    species[12] = -3.24392532e-03 + 2.75598892e-05 * tc[1] -
                  3.99432279e-08 * tc[2] + 1.73507546e-11 * tc[3];
    // species 13: CH2O
    species[13] = -9.90833369e-03 + 7.46440016e-05 * tc[1] -
                  1.13785578e-07 * tc[2] + 5.27090608e-11 * tc[3];
    // species 14: CH3O
    species[14] = -2.80463306e-03 + 7.53101942e-05 * tc[1] -
                  1.41921627e-07 * tc[2] + 7.46353680e-11 * tc[3];
    // species 15: CH3OH
    species[15] = -1.52309129e-02 + 1.30488231e-04 * tc[1] -
                  2.13242067e-07 * tc[2] + 1.04541079e-10 * tc[3];
    // species 16: CO
    species[16] = -6.10353680e-04 + 2.03362866e-06 * tc[1] +
                  2.72101765e-09 * tc[2] - 3.61769800e-12 * tc[3];
    // species 17: CO2
    species[17] = +8.98459677e-03 - 1.42471254e-05 * tc[1] +
                  7.37757066e-09 * tc[2] - 5.74798192e-13 * tc[3];
    // species 18: C2H2
    species[18] = +2.33615629e-02 - 7.10343630e-05 * tc[1] +
                  8.40457311e-08 * tc[2] - 3.40029190e-11 * tc[3];
    // species 19: C2H3
    species[19] = +1.51479162e-03 + 5.18418824e-05 * tc[1] -
                  1.07297354e-07 * tc[2] + 5.88603492e-11 * tc[3];
    // species 20: C2H4
    species[20] = -7.57052247e-03 + 1.14198058e-04 * tc[1] -
                  2.07476626e-07 * tc[2] + 1.07953749e-10 * tc[3];
    // species 21: C2H5
    species[21] = -4.18658892e-03 + 9.94285614e-05 * tc[1] -
                  1.79737982e-07 * tc[2] + 9.22036016e-11 * tc[3];
    // species 22: C2H6
    species[22] = -5.50154270e-03 + 1.19887658e-04 * tc[1] -
                  2.12539886e-07 * tc[2] + 1.07474308e-10 * tc[3];
    // species 23: HCCO
    species[23] = +1.76550210e-02 - 4.74582020e-05 * tc[1] +
                  5.18272770e-08 * tc[2] - 2.02659244e-11 * tc[3];
    // species 24: CH2CO
    species[24] = +1.81188721e-02 - 3.47894948e-05 * tc[1] +
                  2.80319270e-08 * tc[2] - 8.05830460e-12 * tc[3];
    // species 25: CH2CHO
    species[25] = +1.07385740e-02 + 3.78298500e-06 * tc[1] -
                  2.14757493e-08 * tc[2] + 1.14695404e-11 * tc[3];
    // species 26: CH2OCH2
    species[26] = -9.44121800e-03 + 1.60619442e-04 * tc[1] -
                  3.02423640e-07 * tc[2] + 1.60159684e-10 * tc[3];
    // species 27: aC3H4
    species[27] = +1.21225750e-02 + 3.70797600e-05 * tc[1] -
                  1.03575447e-07 * tc[2] + 6.13403160e-11 * tc[3];
    // species 28: aC3H5
    species[28] = +1.98138210e-02 + 2.49941200e-05 * tc[1] -
                  1.00066665e-07 * tc[2] + 6.33862840e-11 * tc[3];
    // species 29: C3H6
    species[29] = +2.09251800e-02 + 8.97358800e-06 * tc[1] -
                  5.00673600e-08 * tc[2] + 2.86325840e-11 * tc[3];
    // species 30: nC3H7
    species[30] = +2.60089730e-02 + 4.70850320e-06 * tc[1] -
                  5.87853960e-08 * tc[2] + 3.74880828e-11 * tc[3];
    // species 31: C4H81
    species[31] = +3.08533800e-02 + 1.01730494e-05 * tc[1] -
                  7.39646640e-08 * tc[2] + 4.44407720e-11 * tc[3];
    // species 32: N
    species[32] = +0.00000000e+00 + 0.00000000e+00 * tc[1] +
                  0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3];
    // species 33: NO2
    species[33] = -1.58542900e-03 + 3.33156240e-05 * tc[1] -
                  6.14262780e-08 * tc[2] + 3.13402256e-11 * tc[3];
    // species 36: NCO
    species[36] = +8.80516880e-03 - 1.67732268e-05 * tc[1] +
                  1.44050892e-08 * tc[2] - 5.32543800e-12 * tc[3];
    // species 37: CH3O2
    species[37] = +2.22003400e-02 - 3.76829200e-05 * tc[1] +
                  2.85039420e-08 * tc[2] - 8.86907600e-12 * tc[3];
  } else {
    // species 1: N2
    species[1] = +1.48797680e-03 - 1.13695200e-06 * tc[1] +
                 3.02911140e-10 * tc[2] - 2.70134040e-14 * tc[3];
    // species 2: H
    species[2] = -2.30842973e-11 + 3.23123896e-14 * tc[1] -
                 1.42054571e-17 * tc[2] + 1.99278943e-21 * tc[3];
    // species 3: O
    species[3] = -8.59741137e-05 + 8.38969178e-08 * tc[1] -
                 3.00533397e-11 * tc[2] + 4.91334764e-15 * tc[3];
    // species 4: OH
    species[4] = +1.05650448e-03 - 5.18165516e-07 * tc[1] +
                 9.15656022e-11 * tc[2] - 5.32783504e-15 * tc[3];
    // species 5: HO2
    species[5] = +2.23982013e-03 - 1.26731630e-06 * tc[1] +
                 3.42739110e-10 * tc[2] - 4.31634140e-14 * tc[3];
    // species 6: H2
    species[6] = -4.94024731e-05 + 9.98913556e-07 * tc[1] -
                 5.38699182e-10 * tc[2] + 8.01021504e-14 * tc[3];
    // species 7: H2O
    species[7] = +2.17691804e-03 - 3.28145036e-07 * tc[1] -
                 2.91125961e-10 * tc[2] + 6.72803968e-14 * tc[3];
    // species 8: H2O2
    species[8] = +4.90831694e-03 - 3.80278450e-06 * tc[1] +
                 1.11355796e-09 * tc[2] - 1.15163322e-13 * tc[3];
    // species 9: O2
    species[9] = +1.48308754e-03 - 1.51593334e-06 * tc[1] +
                 6.28411665e-10 * tc[2] - 8.66871176e-14 * tc[3];
    // species 10: CH3
    species[10] = +7.23990037e-03 - 5.97428696e-06 * tc[1] +
                  1.78705393e-09 * tc[2] - 1.86861758e-13 * tc[3];
    // species 11: CH4
    species[11] = +1.33909467e-02 - 1.14657162e-05 * tc[1] +
                  3.66877605e-09 * tc[2] - 4.07260920e-13 * tc[3];
    // species 12: HCO
    species[12] = +4.95695526e-03 - 4.96891226e-06 * tc[1] +
                  1.76748533e-09 * tc[2] - 2.13403484e-13 * tc[3];
    // species 13: CH2O
    species[13] = +9.20000082e-03 - 8.84517626e-06 * tc[1] +
                  3.01923636e-09 * tc[2] - 3.53542256e-13 * tc[3];
    // species 14: CH3O
    species[14] = +7.44142474e-03 - 5.39410352e-06 * tc[1] +
                  1.31427151e-09 * tc[2] - 1.05414839e-13 * tc[3];
    // species 15: CH3OH
    species[15] = +1.40938292e-02 - 1.27300167e-05 * tc[1] +
                  4.14513255e-09 * tc[2] - 4.68240880e-13 * tc[3];
    // species 16: CO
    species[16] = +2.06252743e-03 - 1.99765154e-06 * tc[1] +
                  6.90159024e-10 * tc[2] - 8.14590864e-14 * tc[3];
    // species 17: CO2
    species[17] = +4.41437026e-03 - 4.42962808e-06 * tc[1] +
                  1.57047056e-09 * tc[2] - 1.88833666e-13 * tc[3];
    // species 18: C2H2
    species[18] = +5.96166664e-03 - 4.74589704e-06 * tc[1] +
                  1.40223651e-09 * tc[2] - 1.44494085e-13 * tc[3];
    // species 19: C2H3
    species[19] = +1.03302292e-02 - 9.36164698e-06 * tc[1] +
                  3.05289864e-09 * tc[2] - 3.45042816e-13 * tc[3];
    // species 20: C2H4
    species[20] = +1.46454151e-02 - 1.34215583e-05 * tc[1] +
                  4.41668769e-09 * tc[2] - 5.02824244e-13 * tc[3];
    // species 21: C2H5
    species[21] = +1.73972722e-02 - 1.59641334e-05 * tc[1] +
                  5.25653067e-09 * tc[2] - 5.98566304e-13 * tc[3];
    // species 22: C2H6
    species[22] = +2.16852677e-02 - 2.00512134e-05 * tc[1] +
                  6.64236003e-09 * tc[2] - 7.60011560e-13 * tc[3];
    // species 23: HCCO
    species[23] = +4.08534010e-03 - 3.18690940e-06 * tc[1] +
                  8.58781560e-10 * tc[2] - 7.76313280e-14 * tc[3];
    // species 24: CH2CO
    species[24] = +9.00359745e-03 - 8.33879270e-06 * tc[1] +
                  2.77003765e-09 * tc[2] - 3.17935280e-13 * tc[3];
    // species 25: CH2CHO
    species[25] = +8.13059140e-03 - 5.48724900e-06 * tc[1] +
                  1.22109123e-09 * tc[2] - 8.70406840e-14 * tc[3];
    // species 26: CH2OCH2
    species[26] = +1.20461900e-02 - 8.66738620e-06 * tc[1] +
                  2.10084933e-09 * tc[2] - 1.67796352e-13 * tc[3];
    // species 27: aC3H4
    species[27] = +1.11337280e-02 - 7.92587560e-06 * tc[1] +
                  1.90692714e-09 * tc[2] - 1.51502160e-13 * tc[3];
    // species 28: aC3H5
    species[28] = +1.43247310e-02 - 1.13563264e-05 * tc[1] +
                  3.32424030e-09 * tc[2] - 3.61455548e-13 * tc[3];
    // species 29: C3H6
    species[29] = +1.49083400e-02 - 9.89979800e-06 * tc[1] +
                  2.16360660e-09 * tc[2] - 1.50648160e-13 * tc[3];
    // species 30: nC3H7
    species[30] = +1.60314850e-02 - 1.05440476e-05 * tc[1] +
                  2.27665056e-09 * tc[2] - 1.55450876e-13 * tc[3];
    // species 31: C4H81
    species[31] = +3.43505070e-02 - 3.17663940e-05 * tc[1] +
                  9.92689860e-09 * tc[2] - 1.01444180e-12 * tc[3];
    // species 32: N
    species[32] = +1.74890650e-04 - 2.38047380e-07 * tc[1] +
                  9.06787350e-11 * tc[2] - 8.14439280e-15 * tc[3];
    // species 33: NO2
    species[33] = +2.17239560e-03 - 1.65613812e-06 * tc[1] +
                  4.72425300e-10 * tc[2] - 4.20435800e-14 * tc[3];
    // species 36: NCO
    species[36] = +2.30517610e-03 - 1.76066306e-06 * tc[1] +
                  4.43672940e-10 * tc[2] - 3.63911984e-14 * tc[3];
    // species 37: CH3O2
    species[37] = +5.46924100e-03 - 2.48678400e-06 * tc[1] +
                  4.47543900e-10 * tc[2] - 3.04741320e-14 * tc[3];
  }

  // species with midpoint at T=1382 kelvin
  if (T < 1382) {
    // species 34: HCNO
    species[34] = +1.27505342e-02 - 2.09588472e-05 * tc[1] +
                  1.32429851e-08 * tc[2] - 3.03008586e-12 * tc[3];
  } else {
    // species 34: HCNO
    species[34] = +3.02778626e-03 - 2.15408692e-06 * tc[1] +
                  5.14999584e-10 * tc[2] - 4.05757564e-14 * tc[3];
  }

  // species with midpoint at T=1478 kelvin
  if (T < 1478) {
    // species 35: HNCO
    species[35] = +7.30282357e-03 - 4.56100006e-06 * tc[1] -
                  1.98381389e-09 * tc[2] + 1.44894301e-12 * tc[3];
  } else {
    // species 35: HNCO
    species[35] = +3.17864004e-03 - 2.18757510e-06 * tc[1] +
                  5.12205489e-10 * tc[2] - 3.98008782e-14 * tc[3];
  }
}

// compute an approx to the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian_precond(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real T, const int HP)
{

  // Analytical Jacobian with QSSA is only supported with symbolic
  // implementation. Re-build in ceptr with -qsj flag.
  amrex::Abort();
}

// compute an approx to the reaction Jacobian (for preconditioning)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT_SIMPLIFIED(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real* Tp, const int* HP)
{
  amrex::Real c[38];

  for (int k = 0; k < 38; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian_precond(J, c, *Tp, *HP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 38; k++) {
    J[1482 + k] *= 1.e-6;
    J[k * 39 + 38] *= 1.e6;
  }
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian(amrex::Real* J, amrex::Real* sc, amrex::Real T, const int consP)
{
#if defined(PELE_COMPILE_AJACOBIAN) || !defined(AMREX_USE_HIP)
  amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  amrex::Real invT = 1.0 / tc[1];

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1 / refC;
  amrex::Real g_RT[38];
  amrex::Real h_RT[38];
  amrex::Real g_RT_qss[6];
  amrex::Real h_RT_qss[6];
  amrex::Real sc_qss[6];
  amrex::Real kf_qss[85];
  amrex::Real T_pert1, pertT;
  amrex::Real wdot_pert1[38], wdot[38];

  // dwdot/dT by finite difference
  pertT = 1e-2;
  T_pert1 = T + pertT;

  tc[0] = log(T_pert1);
  tc[1] = T_pert1;
  tc[2] = T_pert1 * T_pert1;
  tc[3] = T_pert1 * T_pert1 * T_pert1;
  tc[4] = T_pert1 * T_pert1 * T_pert1 * T_pert1;
  invT = 1.0 / tc[1];
  productionRate_light(
    wdot_pert1, sc, g_RT, g_RT_qss, sc_qss, kf_qss, &J[0], &J[85], tc, invT);
  tc[0] = log(T);
  tc[1] = T;
  tc[2] = T * T;
  tc[3] = T * T * T;
  tc[4] = T * T * T * T;
  invT = 1.0 / tc[1];
  productionRate_light(
    wdot, sc, g_RT, g_RT_qss, sc_qss, kf_qss, &J[0], &J[85], tc, invT);

  // compute the species enthalpy
  speciesEnthalpy(h_RT, tc);
  for (int i = 0; i < 1521; i++) {
    J[i] = 0.0;
  }
  // Species terms
  amrex::Real x2 = g_RT[2] - g_RT[6];
  const amrex::Real x3 = exp(g_RT_qss[1] - g_RT_qss[3] - x2);
  amrex::Real x6 = kf_qss[27] * sc[6] * x3 + 10.0e-13;
  const amrex::Real x12 = exp(-g_RT[19] - g_RT[2] + g_RT[6] + g_RT_qss[4]);
  amrex::Real x14 = sc[10] + sc[12] + sc[13] + sc[14] + sc[15] + sc[19] +
                    sc[1] + sc[21] + sc[23] + sc[24] + sc[25] + sc[26] +
                    sc[27] + sc[28] + sc[29] + sc[2] + sc[30] + sc[31] +
                    sc[32] + sc[33] + sc[34] + sc[35] + sc[36] + sc[37] +
                    sc[3] + sc[4] + sc[5] + sc[8] + sc[9];
  amrex::Real x15 = 2 * sc[11] + 1.5 * sc[16] + 2 * sc[17] + 3.0 * sc[22];
  const amrex::Real x21 =
    sc[0] + 2.5 * sc[18] + 2.5 * sc[20] + 2 * sc[6] + 6.0 * sc[7] + x14 + x15;
  const amrex::Real x22 = -g_RT[18] + g_RT_qss[4];
  amrex::Real x27 = 1.0 + 2450000000.0 * x21 *
                            exp(-25009.8682904946 * invT - 0.64 * tc[0]) /
                            kf_qss[5];
  amrex::Real x29 = exp(-25009.8682904946 * invT - 0.64 * tc[0] + x22) / x27;
  amrex::Real x32 = 0.7 * sc[0] + 2 * sc[6] + 6.0 * sc[7];
  const amrex::Real x35 = sc[18] + sc[20] + x14 + x15 + x32;
  amrex::Real x38 = -g_RT[20] + g_RT[6] + g_RT_qss[4];
  amrex::Real x39 = -50251.216247259297 * invT - 9.31 * tc[0];
  amrex::Real x42 = 7.0e+44 * exp(x39);
  amrex::Real x45 = log(
    0.2655 * exp(-0.0055555555555555601 * tc[1]) +
    0.7345 * exp(-0.00096618357487922703 * tc[1]) + exp(-5417.0 * invT));
  amrex::Real x48 = -0.29097730287517898 * x45 +
                    0.43429448190325198 * log(x35 * x42 / kf_qss[4]) - 0.4;
  amrex::Real x54 =
    1.7777777777777777 * ((x48) * (x48)) /
      ((-0.73540532268950665 * x45 - 0.18666666666666668 * x48 + 1) *
       (-0.73540532268950665 * x45 - 0.18666666666666668 * x48 + 1)) +
    1.0;
  amrex::Real x58 = exp(M_LN10 * (0.43429448190325198 * x45 / x54)) /
                    (1.0 + x35 * x42 / kf_qss[4]);
  amrex::Real x60 = refCinv * sc[6] * x58 * exp(x38 + x39);
  const amrex::Real x65 = exp(g_RT[11] - g_RT[20] - g_RT_qss[3] + g_RT_qss[4]);
  const amrex::Real x68 = -kf_qss[53] * sc[2] - kf_qss[54] * sc[4] -
                          kf_qss[55] * sc[9] - kf_qss[57] * sc[6] * x12 -
                          kf_qss[61] * sc[11] * x65 - 2450000000.0 * x21 * x29 -
                          7.0e+44 * x35 * x60 + 10.0e-13;
  const amrex::Real x70 = (kf_qss[61] * sc[20] + 10.0e-13) / x68;
  const amrex::Real x77 = exp(-g_RT[14] - g_RT[2] + g_RT[7] + g_RT_qss[3]);
  const amrex::Real x81 = exp(g_RT[16] - g_RT[23] - g_RT[2] + g_RT_qss[3]);
  amrex::Real x85 = g_RT[4] - g_RT[7];
  const amrex::Real x87 = exp(-g_RT[10] + g_RT_qss[3] - x85);
  const amrex::Real x91 = exp(-1559.97166399463 * invT - 6.3 * tc[0]);
  amrex::Real x92 =
    sc[0] + sc[18] + sc[20] + 2 * sc[6] + 6.0 * sc[7] + x14 + x15;
  const amrex::Real x94 = 2.7e+26 * x91 * x92;
  amrex::Real x97 = log(
    0.8493 * exp(-0.0074626865671641798 * tc[1]) +
    0.1507 * exp(-0.00041963911036508602 * tc[1]) + exp(-7265.0 * invT));
  amrex::Real x99 = -0.29097730287517898 * x97 +
                    0.43429448190325198 * log(x94 / kf_qss[3]) - 0.4;
  amrex::Real x102 = -0.55155399201712996 * x97 - 0.14 * x99 + 0.75;
  amrex::Real x104 = 1.0 + ((x99) * (x99)) / ((x102) * (x102));
  amrex::Real x108 =
    exp(M_LN10 * (0.43429448190325198 * x97 / x104)) / (1.0 + x94 / kf_qss[3]);
  amrex::Real x111 =
    -kf_qss[25] * sc[1] - kf_qss[26] * sc[0] - kf_qss[27] * sc[2] -
    kf_qss[28] * sc[3] - kf_qss[29] * sc[3] - kf_qss[30] * sc[4] -
    kf_qss[31] * sc[6] - kf_qss[32] * sc[9] - kf_qss[33] * sc[9] -
    kf_qss[34] * sc[7] - kf_qss[35] * sc[16] - kf_qss[36] * sc[17] -
    kf_qss[37] * sc[17] - kf_qss[40] * sc[7] * x87 - kf_qss[44] * sc[10] -
    kf_qss[45] * sc[7] * x77 - kf_qss[48] * sc[11] - kf_qss[49] * sc[16] * x81 -
    kf_qss[61] * sc[20] - kf_qss[62] * sc[20] - kf_qss[63] * sc[22] -
    sc[7] * x108 * x94 + 10.0e-13;
  amrex::Real x114 = (kf_qss[61] * sc[11] * x65 + 10.0e-13) / x111;
  amrex::Real x116 = (1.0 / ((-x114 * x70 + 1)));
  const amrex::Real x118 = x116 * x6 / x111;
  amrex::Real x125 =
    kf_qss[12] * exp(g_RT[2] - g_RT[6] - g_RT_qss[1] + g_RT_qss[2]);
  amrex::Real x135 = exp(g_RT_qss[2] - g_RT_qss[3]);
  amrex::Real x145 = -3570.32224388449 * invT - 5.11 * tc[0];
  amrex::Real x147 = 2.69e+21 * exp(x145);
  amrex::Real x150 = log(
    0.4093 * exp(-0.0036363636363636398 * tc[1]) +
    0.5907 * exp(-0.000815660685154976 * tc[1]) + exp(-5185.0 * invT));
  amrex::Real x152 = -0.29097730287517898 * x150 +
                     0.43429448190325198 * log(x147 * x35 / kf_qss[2]) - 0.4;
  amrex::Real x157 =
    1.7777777777777777 * ((x152) * (x152)) /
      ((-0.73540532268950665 * x150 - 0.18666666666666668 * x152 + 1) *
       (-0.73540532268950665 * x150 - 0.18666666666666668 * x152 + 1)) +
    1.0;
  amrex::Real x161 = exp(M_LN10 * (0.43429448190325198 * x150 / x157)) /
                     (1.0 + x147 * x35 / kf_qss[2]);
  amrex::Real x169 = -618.95649893980499 * invT - 3.14 * tc[0];
  amrex::Real x171 = 3200000000000000.0 * exp(x169);
  amrex::Real x174 = log(
    0.32 * exp(-0.012820512820512799 * tc[1]) +
    0.68 * exp(-0.00050125313283207998 * tc[1]) + exp(-5590.0 * invT));
  amrex::Real x176 = -0.29097730287517898 * x174 +
                     0.43429448190325198 * log(x171 * x35 / kf_qss[1]) - 0.4;
  amrex::Real x181 =
    1.7777777777777777 * ((x176) * (x176)) /
      ((-0.73540532268950665 * x174 - 0.18666666666666668 * x176 + 1) *
       (-0.73540532268950665 * x174 - 0.18666666666666668 * x176 + 1)) +
    1.0;
  amrex::Real x185 = exp(M_LN10 * (0.43429448190325198 * x174 / x181)) /
                     (1.0 + x171 * x35 / kf_qss[1]);
  amrex::Real x189 =
    -kf_qss[16] * sc[3] - kf_qss[17] * sc[4] - kf_qss[18] * sc[4] -
    kf_qss[19] * sc[6] - kf_qss[20] * sc[9] - kf_qss[21] * sc[9] -
    kf_qss[22] * sc[5] - kf_qss[25] * sc[1] * x135 - kf_qss[26] * sc[0] * x135 -
    kf_qss[34] * sc[7] * x135 - kf_qss[35] * sc[16] * x135 -
    kf_qss[36] * sc[17] * x135 -
    kf_qss[39] * sc[7] * exp(-g_RT[10] + g_RT_qss[2] - x85) -
    kf_qss[43] * sc[10] - kf_qss[47] * sc[11] - kf_qss[51] * sc[23] -
    kf_qss[52] * sc[16] * exp(g_RT[16] - g_RT[18] - g_RT[3] + g_RT_qss[2]) -
    kf_qss[56] * sc[17] * exp(g_RT[17] - g_RT[24] - g_RT[3] + g_RT_qss[2]) -
    kf_qss[58] * sc[13] * exp(g_RT[13] - g_RT[20] - g_RT[3] + g_RT_qss[2]) -
    kf_qss[60] * sc[20] - sc[16] * x147 * x161 * x35 - sc[2] * x125 -
    sc[2] * x171 * x185 * x35 + 10.0e-13;
  amrex::Real x191 = kf_qss[25] * sc[1] + kf_qss[26] * sc[0] +
                     kf_qss[34] * sc[7] + kf_qss[35] * sc[16] +
                     kf_qss[36] * sc[17] + 10.0e-13;
  amrex::Real x195 = kf_qss[18] * exp(g_RT_qss[1] - g_RT_qss[2] - x85);
  amrex::Real x200 =
    -x118 * x191 / x189 + (kf_qss[12] * sc[6] + sc[7] * x195 + 10.0e-13) / x189;
  amrex::Real x201 = kf_qss[25] * sc[1] * x135 + kf_qss[26] * sc[0] * x135 +
                     kf_qss[34] * sc[7] * x135 + kf_qss[35] * sc[16] * x135 +
                     kf_qss[36] * sc[17] * x135 + 10.0e-13;
  const amrex::Real x202 = x116 * x201 / x111;
  amrex::Real x203 = 1 - x191 * x202 / x189;
  amrex::Real x206 = -974.22746499793698 * invT - 3.74 * tc[0];
  amrex::Real x209 = 2.69e+16 * x35 * exp(x206);
  amrex::Real x212 = log(
    0.4243 * exp(-0.0042194092827004199 * tc[1]) +
    0.5757 * exp(-0.000605326876513317 * tc[1]) + exp(-5069.0 * invT));
  amrex::Real x214 = -0.29097730287517898 * x212 +
                     0.43429448190325198 * log(x209 / kf_qss[0]) - 0.4;
  amrex::Real x216 = -0.55155399201712996 * x212 - 0.14 * x214 + 0.75;
  amrex::Real x219 = ((x214) * (x214)) / ((x216) * (x216)) + 1.0;
  amrex::Real x223 = exp(M_LN10 * (0.43429448190325198 * x212 / x219)) /
                     (1.0 + x209 / kf_qss[0]);
  amrex::Real x226 =
    -kf_qss[10] * sc[3] - kf_qss[11] * sc[4] - kf_qss[12] * sc[6] -
    kf_qss[13] * sc[7] - kf_qss[14] * sc[9] - kf_qss[15] * sc[17] -
    kf_qss[27] * sc[6] * x3 - kf_qss[38] * sc[13] - kf_qss[42] * sc[10] -
    kf_qss[46] * sc[11] - kf_qss[50] * sc[23] - kf_qss[59] * sc[20] -
    kf_qss[9] * sc[2] - sc[16] * x209 * x223 - sc[7] * x195 + 10.0e-13;
  amrex::Real x228 = kf_qss[27] * sc[2] + 10.0e-13;
  amrex::Real x231 =
    -x202 * x228 / x226 + (kf_qss[18] * sc[4] + sc[2] * x125 + 10.0e-13) / x226;
  amrex::Real x232 = x231 / x203;
  amrex::Real x233 = -x118 * x228 / x226 - x200 * x232 + 1;
  const amrex::Real x235 = exp(g_RT_qss[0] - g_RT_qss[1] - x2);
  amrex::Real x238 = kf_qss[9] * sc[6] * x235 + 10.0e-13;
  const amrex::Real x240 = x238 / (x226 * x233);
  const amrex::Real x241 =
    (x118 * x191 / x189 -
     (kf_qss[12] * sc[6] + sc[7] * x195 + 10.0e-13) / x189) /
    x203;
  amrex::Real x242 = -kf_qss[41] * sc[10] - kf_qss[7] * sc[4] -
                     kf_qss[8] * sc[9] - kf_qss[9] * sc[6] * x235 + 10.0e-13;
  amrex::Real x244 = kf_qss[9] * sc[2] + 10.0e-13;
  amrex::Real x247 = (1.0 / ((-x240 * x244 / x242 + 1)));
  const amrex::Real x249 = 0.43429448190325198 / x35;
  amrex::Real x253 = ((x214) * (x214)) / ((x216) * (x216) * (x216));
  amrex::Real x256 = x214 / ((x216) * (x216));
  amrex::Real x259 = sc[16] * x209 * x212 * x223 / ((x219) * (x219));
  amrex::Real x261 = sc[16] * x223 * exp(x206);
  const amrex::Real x263 =
    sc[16] * x35 * exp(-1948.4549299958701 * invT - 7.48 * tc[0]);
  amrex::Real x264 =
    exp(M_LN10 * (0.43429448190325198 * x212 / x219)) /
    (kf_qss[0] * ((1.0 + x209 / kf_qss[0]) * (1.0 + x209 / kf_qss[0])));
  amrex::Real x266 = x259 * (0.196 * x249 * x253 + 1.4 * x249 * x256) -
                     1.883e+16 * x261 + 5.06527e+32 * x263 * x264;
  amrex::Real x269 = x118 * x228 / ((x226) * (x226));
  amrex::Real x279 =
    0.86858896380650397 * x99 / (((x102) * (x102)) * x92) +
    0.121602454932911 * ((x99) * (x99)) / (((x102) * (x102) * (x102)) * x92);
  amrex::Real x281 = sc[7] * x108 * x94 * x97 / ((x104) * (x104));
  const amrex::Real x284 =
    sc[7] * x92 * exp(-3119.9433279892601 * invT - 12.6 * tc[0]);
  amrex::Real x285 =
    exp(M_LN10 * (0.43429448190325198 * x97 / x104)) /
    (kf_qss[3] * ((1.0 + x94 / kf_qss[3]) * (1.0 + x94 / kf_qss[3])));
  amrex::Real x288 =
    -2.7e+26 * sc[7] * x108 * x91 + x279 * x281 + 7.29e+52 * x284 * x285;
  amrex::Real x289 = -kf_qss[26] + x288;
  amrex::Real x291 = x116 * x228 / x226;
  amrex::Real x294 = x291 * x6 / ((x111) * (x111));
  amrex::Real x296 =
    x70 * (kf_qss[61] * sc[11] * x65 + 10.0e-13) / ((x111) * (x111));
  amrex::Real x297 = exp(M_LN10 * (0.43429448190325198 * x45 / x54)) * x35 /
                     (kf_qss[4] * ((1.0 + x35 * x42 / kf_qss[4]) *
                                   (1.0 + x35 * x42 / kf_qss[4])));
  amrex::Real x302 = 2.3703703703703702 * ((x48) * (x48)) /
                     ((-0.73540532269 * x45 - 0.18666666666666668 * x48 + 1) *
                      (-0.73540532269 * x45 - 0.18666666666666668 * x48 + 1) *
                      (-0.73540532269 * x45 - 0.18666666666666668 * x48 + 1));
  x48 = 1.7777777777777777 * x48 /
        ((-0.73540532268950665 * x45 - 0.18666666666666668 * x48 + 1) *
         (-0.73540532268950665 * x45 - 0.18666666666666668 * x48 + 1));
  amrex::Real x306 = 7.0e+44 * x35 * x45 * x60 / ((x54) * (x54));
  amrex::Real x309 = x21 *
                     exp(-50019.736580989098 * invT - 1.28 * tc[0] + x22) /
                     (kf_qss[5] * ((x27) * (x27)));
  amrex::Real x311 = 3.43e+89 * refCinv * sc[6] * x297 *
                       exp(-100502.432494519 * invT - 18.62 * tc[0] + x38) -
                     2450000000.0 * x29 +
                     x306 * (0.196 * x249 * x302 + 1.4 * x249 * x48) +
                     6.0025e+18 * x309 - 4.9e+44 * x60;
  amrex::Real x314 = x114 * (kf_qss[61] * sc[20] + 10.0e-13) / ((x68) * (x68));
  amrex::Real x315 = x289 * x296 + x311 * x314;
  amrex::Real x316 = (1.0 / ((-x114 * x70 + 1) * (-x114 * x70 + 1)));
  amrex::Real x319 = x228 * x316 * x6 / (x111 * x226);
  amrex::Real x320 = exp(M_LN10 * (0.43429448190325198 * x174 / x181)) * x35 /
                     (kf_qss[1] * ((1.0 + x171 * x35 / kf_qss[1]) *
                                   (1.0 + x171 * x35 / kf_qss[1])));
  amrex::Real x326 = 2.3703703703703702 * ((x176) * (x176)) /
                     ((-0.73540532269 * x174 - 0.18666666666666668 * x176 + 1) *
                      (-0.73540532269 * x174 - 0.18666666666666668 * x176 + 1) *
                      (-0.73540532269 * x174 - 0.18666666666666668 * x176 + 1));
  x176 = 1.7777777777777777 * x176 /
         ((-0.73540532268950665 * x174 - 0.18666666666666668 * x176 + 1) *
          (-0.73540532268950665 * x174 - 0.18666666666666668 * x176 + 1));
  amrex::Real x332 = sc[2] * x171 * x174 * x185 * x35 / ((x181) * (x181));
  amrex::Real x336 =
    1.7777777777777777 * x152 /
    ((-0.73540532268950665 * x150 - 0.18666666666666668 * x152 + 1) *
     (-0.73540532268950665 * x150 - 0.18666666666666668 * x152 + 1));
  x152 = 2.3703703703703702 * ((x152) * (x152)) /
         ((-0.73540532269 * x150 - 0.18666666666666668 * x152 + 1) *
          (-0.73540532269 * x150 - 0.18666666666666668 * x152 + 1) *
          (-0.73540532269 * x150 - 0.18666666666666668 * x152 + 1));
  amrex::Real x340 = sc[16] * x147 * x150 * x161 * x35 / ((x157) * (x157));
  amrex::Real x341 = exp(M_LN10 * (0.43429448190325198 * x150 / x157)) * x35 /
                     (kf_qss[2] * ((1.0 + x147 * x35 / kf_qss[2]) *
                                   (1.0 + x147 * x35 / kf_qss[2])));
  amrex::Real x344 =
    sc[16] * x341 * exp(-7140.6444877689701 * invT - 10.22 * tc[0]);
  amrex::Real x347 =
    -kf_qss[26] * x135 - 1.883e+21 * sc[16] * x161 * exp(x145) -
    2240000000000000.0 * sc[2] * x185 * exp(x169) +
    7.168e+30 * sc[2] * x320 * exp(-1237.91299787961 * invT - 6.28 * tc[0]) +
    x332 * (1.4 * x176 * x249 + 0.196 * x249 * x326) +
    x340 * (0.196 * x152 * x249 + 1.4 * x249 * x336) + 5.06527e+42 * x344;
  amrex::Real x350 = x191 * x202 / ((x189) * (x189));
  amrex::Real x353 = x191 * x201 * x316 / (x111 * x189);
  amrex::Real x355 = x116 * x191 / x189;
  amrex::Real x357 = x201 * x355 / ((x111) * (x111));
  amrex::Real x358 = x116 * x191 / (x111 * x189);
  amrex::Real x359 = -kf_qss[26] * x135 * x358 - kf_qss[26] * x202 / x189 +
                     x289 * x357 + x315 * x353 + x347 * x350;
  amrex::Real x362 = x200 * x231 / ((x203) * (x203));
  amrex::Real x363 = x118 * x191 / ((x189) * (x189));
  amrex::Real x365 = x191 * x316 * x6 / (x111 * x189);
  amrex::Real x366 =
    (kf_qss[12] * sc[6] + sc[7] * x195 + 10.0e-13) / ((x189) * (x189));
  amrex::Real x367 = x355 * x6 / ((x111) * (x111));
  amrex::Real x368 = -kf_qss[26] * x118 / x189 + x289 * x367 + x315 * x365 +
                     x347 * x363 - x347 * x366;
  amrex::Real x369 = x202 * x228 / ((x226) * (x226));
  amrex::Real x370 =
    (kf_qss[18] * sc[4] + sc[2] * x125 + 10.0e-13) / ((x226) * (x226));
  amrex::Real x371 = x201 * x228 * x316 / (x111 * x226);
  amrex::Real x372 = x116 * x228 / (x111 * x226);
  amrex::Real x373 = x201 * x291 / ((x111) * (x111));
  amrex::Real x374 = -kf_qss[26] * x135 * x372 + x266 * x369 - x266 * x370 +
                     x289 * x373 + x315 * x371;
  amrex::Real x375 = x200 / x203;
  amrex::Real x376 = -x232 * x368 + x266 * x269 + x289 * x294 + x315 * x319 +
                     x359 * x362 - x374 * x375;
  const amrex::Real x378 = exp(g_RT[18] - g_RT_qss[4]);
  amrex::Real x384 = exp(-25009.8682904946 * invT - 0.64 * tc[0]) / x27;
  amrex::Real x387 = -g_RT[2] + g_RT[4];
  const amrex::Real x389 = exp(g_RT[24] - g_RT_qss[4] - x387);
  const amrex::Real x393 = exp(2.0 * g_RT[12] - g_RT[9] - g_RT_qss[4]);
  const amrex::Real x395 =
    kf_qss[53] * sc[18] * sc[2] * x378 + kf_qss[54] * sc[24] * sc[2] * x389 +
    kf_qss[55] * ((sc[12]) * (sc[12])) * x393 + kf_qss[57] * sc[19] * sc[2] +
    2450000000.0 * sc[18] * x21 * x384 + sc[20] * x35 * x42 * x58 + 10.0e-13;
  const amrex::Real x399 = exp(-g_RT[20] + g_RT[28] + g_RT[2] - g_RT_qss[3]);
  amrex::Real x406 =
    kf_qss[44] * exp(-g_RT[10] + g_RT[20] + g_RT[2] - g_RT_qss[3]);
  const amrex::Real x410 = exp(g_RT[10] + g_RT[2] - g_RT[6] - g_RT_qss[3]);
  const amrex::Real x415 = -2.0 * g_RT[10] + g_RT[11];
  const amrex::Real x421 =
    exp(g_RT[16] + g_RT[2] + g_RT[4] - g_RT[9] - g_RT_qss[3]);
  const amrex::Real x423 = refCinv * sc[16];
  const amrex::Real x424 = sc[2] * x423;
  const amrex::Real x426 = refC * x92;
  const amrex::Real x429 = exp(
    g_RT[15] - g_RT[7] - g_RT_qss[3] - 1559.97166399463 * invT - 6.3 * tc[0]);
  const amrex::Real x434 = exp(g_RT[16] + g_RT[7] - g_RT[9] - g_RT_qss[3]);
  const amrex::Real x439 = exp(g_RT[13] + g_RT[16] - g_RT[17] - g_RT_qss[3]);
  const amrex::Real x442 = exp(g_RT[16] - g_RT[3] + g_RT[6] - g_RT_qss[3]);
  const amrex::Real x446 = exp(g_RT[13] - g_RT_qss[3] - x387);
  const amrex::Real x453 = exp(g_RT[12] + g_RT[2] - g_RT[3] - g_RT_qss[3]);
  amrex::Real x459 =
    kf_qss[63] * exp(g_RT[10] + g_RT[21] - g_RT[22] - g_RT_qss[3]);
  amrex::Real x465 =
    kf_qss[79] * exp(g_RT[2] + g_RT[35] - g_RT_qss[3] - g_RT_qss[5]);
  amrex::Real x467 = -g_RT[34] + g_RT_qss[5];
  amrex::Real x469 = kf_qss[80] * exp(g_RT[2] - g_RT_qss[3] - x467);
  amrex::Real x472 =
    kf_qss[28] * sc[16] * sc[6] * x442 + kf_qss[29] * sc[12] * sc[2] * x453 +
    kf_qss[30] * sc[13] * sc[2] * x446 + kf_qss[31] * sc[10] * sc[2] * x410 +
    kf_qss[32] * sc[4] * x421 * x424 + kf_qss[33] * sc[16] * sc[7] * x434 +
    kf_qss[37] * sc[13] * sc[16] * x439 + kf_qss[40] * sc[10] * sc[4] +
    kf_qss[45] * sc[14] * sc[2] +
    kf_qss[48] * ((sc[10]) * (sc[10])) * exp(-g_RT_qss[3] - x415) +
    kf_qss[49] * sc[23] * sc[2] + kf_qss[62] * sc[28] * sc[2] * x399 +
    sc[10] * sc[21] * x459 + 2.7e+26 * sc[15] * x108 * x426 * x429 +
    sc[20] * sc[2] * x406 + sc[2] * sc[34] * x469 + sc[2] * sc[35] * x465 +
    10.0e-13;
  amrex::Real x473 = x114 * x395 / x68 - x472 / x111;
  amrex::Real x477 =
    kf_qss[20] * exp(g_RT[12] + g_RT[4] - g_RT[9] - g_RT_qss[2]);
  const amrex::Real x482 = exp(g_RT[12] + g_RT[2] - g_RT[3] - g_RT_qss[2]);
  amrex::Real x489 = kf_qss[21] * refCinv *
                     exp(g_RT[17] + 2.0 * g_RT[2] - g_RT[9] - g_RT_qss[2]);
  const amrex::Real x492 = exp(g_RT[18] + g_RT[6] - 2.0 * g_RT_qss[2]);
  amrex::Real x496 = g_RT[10] - g_RT[2] - g_RT_qss[2];
  const amrex::Real x500 = sc[10] * x35;
  const amrex::Real x503 = refC * x35;
  amrex::Real x505 = -g_RT[16] + g_RT[24] - g_RT_qss[2];
  amrex::Real x506 = x161 * exp(x145 + x505);
  amrex::Real x510 =
    kf_qss[19] * exp(g_RT[10] + g_RT[2] - g_RT[6] - g_RT_qss[2]);
  amrex::Real x513 = -g_RT[4] + g_RT[5];
  const amrex::Real x514 = exp(g_RT[13] - g_RT_qss[2] - x513);
  const amrex::Real x518 = exp(g_RT[16] + g_RT[19] - g_RT[23] - g_RT_qss[2]);
  const amrex::Real x521 = exp(g_RT[13] - g_RT_qss[2] - x387);
  amrex::Real x525 =
    kf_qss[60] * exp(-g_RT[20] + g_RT[28] + g_RT[2] - g_RT_qss[2]);
  const amrex::Real x527 = exp(-g_RT[10] + g_RT[20] + g_RT[2] - g_RT_qss[2]);
  amrex::Real x532 = exp(g_RT[18] + g_RT[2] - g_RT_qss[1] - g_RT_qss[2]);
  amrex::Real x537 = kf_qss[78] * exp(g_RT[2] - g_RT_qss[2] - x467);
  amrex::Real x540 =
    kf_qss[77] * exp(g_RT[2] + g_RT[35] - g_RT_qss[2] - g_RT_qss[5]);
  amrex::Real x543 =
    kf_qss[16] * sc[12] * sc[2] * x482 + kf_qss[17] * sc[13] * sc[2] * x521 +
    kf_qss[22] * sc[13] * sc[4] * x514 + kf_qss[23] * sc[18] * sc[2] * x532 +
    2.0 * kf_qss[24] * sc[18] * sc[6] * x492 + kf_qss[39] * sc[10] * sc[4] +
    kf_qss[43] * sc[20] * sc[2] * x527 +
    kf_qss[47] * ((sc[10]) * (sc[10])) * exp(-g_RT_qss[2] - x415) +
    kf_qss[51] * sc[16] * sc[19] * x518 + kf_qss[52] * sc[18] * sc[3] +
    kf_qss[56] * sc[24] * sc[3] + kf_qss[58] * sc[20] * sc[3] +
    3200000000000000.0 * refC * x185 * x500 * exp(x169 + x496) +
    sc[10] * sc[2] * x510 + sc[12] * sc[4] * x477 +
    sc[17] * ((sc[2]) * (sc[2])) * x489 + 2.69e+21 * sc[24] * x503 * x506 +
    sc[28] * sc[2] * x525 + sc[2] * sc[34] * x537 + sc[2] * sc[35] * x540 +
    10.0e-13;
  amrex::Real x544 = -x355 * x473 - x543 / x189;
  const amrex::Real x545 = exp(g_RT[16] + g_RT[18] - g_RT[23] - g_RT_qss[1]);
  amrex::Real x549 = -g_RT[3] + g_RT[9];
  const amrex::Real x551 = exp(g_RT[12] - g_RT_qss[1] - x549);
  const amrex::Real x556 =
    refC * exp(-g_RT[16] + g_RT[23] - g_RT_qss[1] + x206);
  amrex::Real x558 = sc[23] * x223 * x556;
  amrex::Real x563 =
    kf_qss[13] * exp(g_RT[13] + g_RT[2] - g_RT[7] - g_RT_qss[1]);
  const amrex::Real x565 = exp(-g_RT[10] + g_RT[19] + g_RT[2] - g_RT_qss[1]);
  amrex::Real x569 =
    kf_qss[38] * exp(-g_RT[13] + g_RT[24] + g_RT[2] - g_RT_qss[1]);
  amrex::Real x572 =
    kf_qss[15] * exp(g_RT[12] + g_RT[16] - g_RT[17] - g_RT_qss[1]);
  const amrex::Real x574 = exp(g_RT[12] - g_RT_qss[1] - x387);
  const amrex::Real x577 = exp(-g_RT[11] + g_RT[20] + g_RT[2] - g_RT_qss[1]);
  const amrex::Real x580 = exp(g_RT[16] + g_RT[2] - g_RT[3] - g_RT_qss[1]);
  const amrex::Real x584 = exp(-g_RT[20] + g_RT[27] + g_RT[2] - g_RT_qss[1]);
  const amrex::Real x588 = exp(g_RT[12] + g_RT[32] - g_RT_qss[1] - g_RT_qss[5]);
  const amrex::Real x592 = exp(g_RT[2] + g_RT[36] - g_RT_qss[1] - g_RT_qss[5]);
  amrex::Real x596 =
    kf_qss[10] * sc[16] * sc[2] * x580 + kf_qss[11] * sc[12] * sc[2] * x574 +
    kf_qss[14] * sc[12] * sc[3] * x551 + kf_qss[23] * sc[18] * sc[2] * x532 +
    kf_qss[42] * sc[19] * sc[2] * x565 + kf_qss[46] * sc[20] * sc[2] * x577 +
    kf_qss[50] * sc[16] * sc[18] * x545 + kf_qss[59] * sc[27] * sc[2] * x584 +
    kf_qss[75] * sc[2] * sc[36] * x592 + kf_qss[76] * sc[12] * sc[32] * x588 +
    sc[12] * sc[16] * x572 + sc[13] * sc[2] * x563 + sc[24] * sc[2] * x569 +
    2.69e+16 * x35 * x558 + 10.0e-13;
  amrex::Real x597 = -x232 * x544 - x291 * x473 - x596 / x226;
  amrex::Real x600 = x244 * x597 / (((x233) * (x233)) * x242);
  amrex::Real x602 = x228 * x316 * x473 / x226;
  x472 = x472 / ((x111) * (x111));
  x104 = 2.7e+26 * sc[15] * x108 * x426 * x429 * x97 / ((x104) * (x104));
  const amrex::Real x606 = sc[15] * x426 *
                           exp(
                             g_RT[15] - g_RT[7] - g_RT_qss[3] -
                             3119.9433279892601 * invT - 12.6 * tc[0]);
  const amrex::Real x607 = refC * sc[15];
  x279 = -x104 * x279 + 2.7e+26 * x108 * x429 * x607 - 7.29e+52 * x285 * x606;
  x54 = sc[20] * x35 * x42 * x45 * x58 / ((x54) * (x54));
  x27 = sc[18] * x21 * exp(-50019.736580989098 * invT - 1.28 * tc[0]) /
        (kf_qss[5] * ((x27) * (x27)));
  amrex::Real x616 =
    (2450000000.0 * sc[18] * x384 -
     3.43e+89 * sc[20] * x297 * exp(-100502.432494519 * invT - 18.62 * tc[0]) +
     4.9e+44 * sc[20] * x58 * exp(x39) - 6.0025e+18 * x27 -
     x54 * (0.196 * x249 * x302 + 1.4 * x249 * x48)) /
    x68;
  amrex::Real x617 = x395 / ((x68) * (x68));
  amrex::Real x619 =
    x395 * (kf_qss[61] * sc[11] * x65 + 10.0e-13) / (((x111) * (x111)) * x68);
  amrex::Real x620 =
    -x114 * x311 * x617 + x114 * x616 + x289 * x472 - x289 * x619 - x279 / x111;
  x596 = x596 / ((x226) * (x226));
  x219 = 2.69e+16 * x212 * x35 * x558 / ((x219) * (x219));
  const amrex::Real x623 = sc[23] * x503 *
                           exp(
                             -g_RT[16] + g_RT[23] - g_RT_qss[1] -
                             1948.4549299958701 * invT - 7.48 * tc[0]);
  x543 = x543 / ((x189) * (x189));
  amrex::Real x627 = x116 * x191 * x473 / ((x189) * (x189));
  amrex::Real x628 = x191 * x316 * x473 / x189;
  x157 = 2.69e+21 * sc[24] * x150 * x503 * x506 / ((x157) * (x157));
  const amrex::Real x631 = refC * sc[24];
  amrex::Real x633 =
    x341 * x631 * exp(-7140.6444877689701 * invT - 10.22 * tc[0] + x505);
  x181 = 3200000000000000.0 * refC * x174 * x185 * x500 * exp(x169 + x496) /
         ((x181) * (x181));
  amrex::Real x638 = refC * sc[10] * exp(x169 + x496);
  x347 = -kf_qss[26] * x116 * x473 / x189 + x315 * x628 + x347 * x543 +
         x347 * x627 - x355 * x620 -
         (-7.168e+30 * refC * sc[10] * x320 *
            exp(-1237.91299787961 * invT - 6.28 * tc[0] + x496) -
          x157 * (0.196 * x152 * x249 + 1.4 * x249 * x336) -
          x181 * (1.4 * x176 * x249 + 0.196 * x249 * x326) +
          2240000000000000.0 * x185 * x638 + 1.883e+21 * x506 * x631 -
          5.06527e+42 * x633) /
           x189;
  amrex::Real x641 = x544 / x203;
  amrex::Real x642 = x116 * x228 * x473 / ((x226) * (x226));
  x231 = x231 * x544 / ((x203) * (x203));
  x374 = x231 * x359 - x232 * x347 + x266 * x596 + x266 * x642 - x291 * x620 +
         x315 * x602 - x374 * x641 -
         (-x219 * (0.196 * x249 * x253 + 1.4 * x249 * x256) -
          5.06527e+32 * x264 * x623 + 1.883e+16 * x558) /
           x226;
  amrex::Real x646 = x244 / (x233 * x242);
  const amrex::Real x647 = x247 * (-x374 * x646 + x376 * x600);
  amrex::Real x649 = x238 * x646 / ((x226) * (x226));
  amrex::Real x650 = x238 * x244 / (x226 * ((x233) * (x233)) * x242);
  const amrex::Real x652 = exp(g_RT[16] - g_RT_qss[0] - x387);
  const amrex::Real x655 = exp(-g_RT[10] + g_RT[18] + g_RT[2] - g_RT_qss[0]);
  amrex::Real x659 = kf_qss[8] * exp(g_RT[16] - g_RT_qss[0] - x549);
  const amrex::Real x662 = exp(g_RT[16] + g_RT[32] - g_RT_qss[0] - g_RT_qss[5]);
  amrex::Real x666 =
    kf_qss[41] * sc[18] * sc[2] * x655 + kf_qss[74] * sc[16] * sc[32] * x662 +
    kf_qss[7] * sc[16] * sc[2] * x652 + sc[16] * sc[3] * x659 + 10.0e-13;
  amrex::Real x668 = (-x597 * x646 - x666 / x242) /
                     ((-x240 * x244 / x242 + 1) * (-x240 * x244 / x242 + 1));
  const amrex::Real x669 = x668 * (x266 * x649 + x376 * x650);
  amrex::Real x670 = -kf_qss[25] + x288;
  amrex::Real x671 = 0.121602454932911 / x35;
  amrex::Real x672 = 0.86858896380650397 / x35;
  amrex::Real x674 = refCinv * sc[6] * x297 *
                     exp(-100502.432494519 * invT - 18.62 * tc[0] + x38);
  amrex::Real x676 = -2450000000.0 * x29 + x306 * (x302 * x671 + x48 * x672) +
                     6.0025e+18 * x309 - 7.0e+44 * x60 + 4.9e+89 * x674;
  amrex::Real x678 = x296 * x670 + x314 * x676;
  amrex::Real x681 =
    x259 *
      (((x214) * (x214)) * x671 / ((x216) * (x216) * (x216)) + x256 * x672) -
    2.69e+16 * x261 + 7.2361e+32 * x263 * x264;
  amrex::Real x686 =
    sc[2] * x320 * exp(-1237.91299787961 * invT - 6.28 * tc[0]);
  amrex::Real x687 = -sc[16] * x147 * x161 - sc[2] * x171 * x185 +
                     x332 * (x176 * x672 + x326 * x671) +
                     x340 * (x152 * x671 + x336 * x672) + 7.2361e+42 * x344 +
                     1.024e+31 * x686;
  amrex::Real x688 = -kf_qss[25] * x135 + x687;
  amrex::Real x689 = -kf_qss[25] * x135 * x358 - kf_qss[25] * x202 / x189 +
                     x350 * x688 + x353 * x678 + x357 * x670;
  amrex::Real x690 = -kf_qss[25] * x118 / x189 + x363 * x688 + x365 * x678 -
                     x366 * x688 + x367 * x670;
  amrex::Real x691 = x202 * x228 * x681 / ((x226) * (x226)) - x370 * x681;
  amrex::Real x693 =
    x118 * x228 * x681 / ((x226) * (x226)) - x232 * x690 + x294 * x670 +
    x319 * x678 + x362 * x689 -
    x375 * (-kf_qss[25] * x135 * x372 + x371 * x678 + x373 * x670 + x691);
  x297 = sc[20] * x297 * exp(-100502.432494519 * invT - 18.62 * tc[0]);
  amrex::Real x695 =
    sc[20] * x42 * x58 - 4.9e+89 * x297 - x54 * (x302 * x671 + x48 * x672);
  amrex::Real x696 = 2450000000.0 * sc[18] * x384 - 6.0025e+18 * x27 + x695;
  amrex::Real x701 = -x114 * x617 * x676 + x114 * x696 / x68;
  amrex::Real x703 = x472 * x670 - x619 * x670 + x701 - x279 / x111;
  x320 =
    refC * sc[10] * x320 * exp(-1237.91299787961 * invT - 6.28 * tc[0] + x496);
  amrex::Real x705 = -x157 * (x152 * x671 + x336 * x672) -
                     x181 * (x176 * x672 + x326 * x671) +
                     3200000000000000.0 * x185 * x638 - 1.024e+31 * x320 +
                     2.69e+21 * x506 * x631 - 7.2361e+42 * x633;
  x688 = -kf_qss[25] * x116 * x473 / x189 - x355 * x703 + x543 * x688 +
         x627 * x688 + x628 * x678 - x705 / x189;
  amrex::Real x708 =
    -x219 *
      (((x214) * (x214)) * x671 / ((x216) * (x216) * (x216)) + x256 * x672) -
    7.2361e+32 * x264 * x623 + 2.69e+16 * x558;
  amrex::Real x709 = -x708 / x226;
  amrex::Real x710 =
    x116 * x228 * x473 * x681 / ((x226) * (x226)) + x596 * x681;
  amrex::Real x712 =
    x231 * x689 - x232 * x688 - x291 * x703 + x602 * x678 -
    x641 * (-kf_qss[25] * x135 * x372 + x371 * x678 + x373 * x670 + x691) +
    x709 + x710;
  const amrex::Real x713 = x247 * (x600 * x693 - x646 * x712);
  const amrex::Real x715 = x668 * (x649 * x681 + x650 * x693);
  amrex::Real x716 = -kf_qss[9] + x681;
  amrex::Real x717 = -kf_qss[27] + x288;
  amrex::Real x719 = x296 * x717 + x314 * (-kf_qss[53] + x676);
  amrex::Real x721 = -kf_qss[27] * x202 / x226 + x125 / x226 + x369 * x716 -
                     x370 * x716 + x371 * x719 + x373 * x717;
  x125 = -x125 - x171 * x185 * x35 + x687;
  x171 = x125 * x350 + x353 * x719 + x357 * x717;
  amrex::Real x725 =
    -kf_qss[27] * x118 / x226 + x171 * x362 -
    x232 * (x125 * x363 - x125 * x366 + x365 * x719 + x367 * x717) +
    x269 * x716 + x294 * x717 + x319 * x719 - x375 * x721;
  amrex::Real x730 =
    -x114 * x617 * (-kf_qss[53] + x676) +
    x114 *
      (kf_qss[53] * sc[18] * x378 + kf_qss[54] * sc[24] * x389 +
       kf_qss[57] * sc[19] + x696) /
      x68 +
    x472 * x717 - x619 * x717 -
    (kf_qss[29] * sc[12] * x453 + kf_qss[30] * sc[13] * x446 +
     kf_qss[31] * sc[10] * x410 + kf_qss[32] * sc[4] * x421 * x423 +
     kf_qss[45] * sc[14] + kf_qss[49] * sc[23] + kf_qss[62] * sc[28] * x399 +
     sc[20] * x406 + sc[34] * x469 + sc[35] * x465 + x279) /
      x111;
  amrex::Real x732 = x125 * x543 + x125 * x627 - x355 * x730 + x628 * x719 -
                     (kf_qss[16] * sc[12] * x482 + kf_qss[17] * sc[13] * x521 +
                      kf_qss[23] * sc[18] * x532 + kf_qss[43] * sc[20] * x527 +
                      sc[10] * x510 + 2.0 * sc[17] * ((sc[2])) * x489 +
                      sc[28] * x525 + sc[34] * x537 + sc[35] * x540 + x705) /
                       x189;
  x721 = -kf_qss[27] * x116 * x473 / x226 + x171 * x231 - x232 * x732 -
         x291 * x730 + x596 * x716 + x602 * x719 - x641 * x721 + x642 * x716 -
         (kf_qss[10] * sc[16] * x580 + kf_qss[11] * sc[12] * x574 +
          kf_qss[23] * sc[18] * x532 + kf_qss[42] * sc[19] * x565 +
          kf_qss[46] * sc[20] * x577 + kf_qss[59] * sc[27] * x584 +
          kf_qss[75] * sc[36] * x592 + sc[13] * x563 + sc[24] * x569 + x708) /
           x226;
  const amrex::Real x734 =
    x247 * (-kf_qss[9] * x597 / (x233 * x242) + x600 * x725 - x646 * x721 -
            (kf_qss[41] * sc[18] * x655 + kf_qss[7] * sc[16] * x652) / x242);
  const amrex::Real x735 =
    x668 * (-kf_qss[9] * x240 / x242 + x649 * x716 + x650 * x725);
  amrex::Real x736 = -kf_qss[10] + x681;
  amrex::Real x737 = -kf_qss[28] - kf_qss[29] + x288;
  amrex::Real x738 = x296 * x737 + x314 * x676;
  amrex::Real x740 = x350 * (-kf_qss[16] + x687) + x353 * x738 + x357 * x737;
  amrex::Real x741 = x363 * (-kf_qss[16] + x687) + x365 * x738 -
                     x366 * (-kf_qss[16] + x687) + x367 * x737;
  amrex::Real x743 =
    -x232 * x741 + x269 * x736 + x294 * x737 + x319 * x738 + x362 * x740 -
    x375 * (x369 * x736 - x370 * x736 + x371 * x738 + x373 * x737);
  amrex::Real x744 = x472 * x737 - x619 * x737 + x701 - x279 / x111;
  amrex::Real x745 =
    -x355 * x744 + x543 * (-kf_qss[16] + x687) + x627 * (-kf_qss[16] + x687) +
    x628 * x738 -
    (kf_qss[52] * sc[18] + kf_qss[56] * sc[24] + kf_qss[58] * sc[20] + x705) /
      x189;
  amrex::Real x746 =
    x231 * x740 - x232 * x745 - x291 * x744 + x596 * x736 + x602 * x738 -
    x641 * (x369 * x736 - x370 * x736 + x371 * x738 + x373 * x737) +
    x642 * x736 - (kf_qss[14] * sc[12] * x551 + x708) / x226;
  const amrex::Real x747 =
    x247 * (-sc[16] * x659 / x242 + x600 * x743 - x646 * x746);
  const amrex::Real x748 = x668 * (x649 * x736 + x650 * x743);
  x244 = x244 / ((x242) * (x242));
  amrex::Real x754 = -kf_qss[30] + x288;
  amrex::Real x756 = x296 * x754 + x314 * (-kf_qss[54] + x676);
  amrex::Real x757 = -kf_qss[11] + x681;
  amrex::Real x758 = -kf_qss[17] - kf_qss[18] + x687;
  amrex::Real x759 = x350 * x758 + x353 * x756 + x357 * x754;
  amrex::Real x761 =
    kf_qss[18] / x226 + x369 * x757 - x370 * x757 + x371 * x756 + x373 * x754;
  amrex::Real x762 =
    -x232 * (x363 * x758 + x365 * x756 - x366 * x758 + x367 * x754) +
    x269 * x757 + x294 * x754 + x319 * x756 + x362 * x759 - x375 * x761;
  amrex::Real x765 =
    -x114 * x617 * (-kf_qss[54] + x676) + x114 * x696 / x68 + x472 * x754 -
    x619 * x754 -
    (kf_qss[32] * x421 * x424 + kf_qss[40] * sc[10] + x279) / x111;
  amrex::Real x766 =
    -x355 * x765 + x543 * x758 + x627 * x758 + x628 * x756 -
    (kf_qss[22] * sc[13] * x514 + kf_qss[39] * sc[10] + sc[12] * x477 + x705) /
      x189;
  x761 = x231 * x759 - x232 * x766 - x291 * x765 + x596 * x757 + x602 * x756 -
         x641 * x761 + x642 * x757 + x709;
  const amrex::Real x768 =
    x247 * (-kf_qss[7] * x666 / ((x242) * (x242)) -
            kf_qss[7] * x244 * x597 / x233 + x600 * x762 - x646 * x761);
  const amrex::Real x770 =
    x668 * (-kf_qss[7] * x240 * x244 + x649 * x757 + x650 * x762);
  amrex::Real x771 = -kf_qss[22] + x687;
  amrex::Real x773 = x288 * x296 + x314 * x676;
  amrex::Real x775 = x288 * x357 + x353 * x773;
  amrex::Real x779 = x288 * x367 + x365 * x773;
  amrex::Real x782 = x288 * x373 + x371 * x773;
  amrex::Real x786 = x118 * x228 * x681 / ((x226) * (x226)) + x288 * x294 +
                     x319 * x773 - x375 * (x691 + x782);
  amrex::Real x787 = -x232 * (x363 * x771 - x366 * x771 + x779) +
                     x362 * (x350 * x771 + x775) + x786;
  amrex::Real x792 = x288 * x472 - x288 * x619 - x279 / x111;
  amrex::Real x796 = x628 * x773 - x705 / x189;
  amrex::Real x797 = -x355 * (x701 + x792) + x796;
  amrex::Real x799 =
    x231 * (x350 * x771 + x775) - x232 * (x543 * x771 + x627 * x771 + x797) -
    x291 * (x701 + x792) + x602 * x773 - x641 * (x691 + x782) + x709 + x710;
  const amrex::Real x800 = x247 * (x600 * x787 - x646 * x799);
  const amrex::Real x801 = x668 * (x649 * x681 + x650 * x787);
  amrex::Real x805 = x259 * (0.56 * x249 * x253 + 4.0 * x249 * x256) -
                     5.38e+16 * x261 + 1.44722e+33 * x263 * x264;
  amrex::Real x806 = -kf_qss[12] - kf_qss[27] * x3 + x805;
  amrex::Real x808 = 0.43429448190325198 / x92;
  amrex::Real x809 = x808 * x99 / ((x102) * (x102));
  x99 = x808 * ((x99) * (x99)) / ((x102) * (x102) * (x102));
  x102 = -5.4e+26 * sc[7] * x108 * x91 + x281 * (4.0 * x809 + 0.56 * x99) +
         1.458e+53 * x284 * x285;
  amrex::Real x814 = -kf_qss[31] + x102;
  amrex::Real x818 = -x104 * (4.0 * x809 + 0.56 * x99) +
                     5.4e+26 * x108 * x429 * x607 - 1.458e+53 * x285 * x606;
  amrex::Real x821 =
    (4900000000.0 * sc[18] * x384 + 1.4e+45 * sc[20] * x58 * exp(x39) -
     1.2005e+19 * x27 - 9.8e+89 * x297 -
     x54 * (0.56 * x249 * x302 + 4.0 * x249 * x48)) /
    x68;
  amrex::Real x824 = -4900000000.0 * x29 +
                     x306 * (0.56 * x249 * x302 + 4.0 * x249 * x48) +
                     1.2005e+19 * x309 - 1.4e+45 * x60 + 9.8e+89 * x674;
  amrex::Real x825 =
    -kf_qss[57] * x12 - 7.0e+44 * refCinv * x35 * x58 * exp(x38 + x39) + x824;
  amrex::Real x827 = -x114 * x617 * x825 + x114 * x821 + x472 * x814 -
                     x619 * x814 - (kf_qss[28] * sc[16] * x442 + x818) / x111;
  amrex::Real x831 = -x157 * (0.56 * x152 * x249 + 4.0 * x249 * x336) -
                     x181 * (4.0 * x176 * x249 + 0.56 * x249 * x326) +
                     6400000000000000.0 * x185 * x638 - 2.048e+31 * x320 +
                     5.38e+21 * x506 * x631 - 1.44722e+43 * x633;
  amrex::Real x832 = -5.38e+21 * sc[16] * x161 * exp(x145) -
                     6400000000000000.0 * sc[2] * x185 * exp(x169) +
                     x332 * (4.0 * x176 * x249 + 0.56 * x249 * x326) +
                     x340 * (0.56 * x152 * x249 + 4.0 * x249 * x336) +
                     1.44722e+43 * x344 + 2.048e+31 * x686;
  amrex::Real x834 = x296 * x814 + x314 * x825;
  amrex::Real x835 = -x355 * x827 + x543 * (-kf_qss[19] + x832) +
                     x627 * (-kf_qss[19] + x832) + x628 * x834 -
                     (2.0 * kf_qss[24] * sc[18] * x492 + x831) / x189;
  amrex::Real x837 = -(-x219 * (0.56 * x249 * x253 + 4.0 * x249 * x256) -
                       1.44722e+33 * x264 * x623 + 5.38e+16 * x558) /
                     x226;
  amrex::Real x838 = x350 * (-kf_qss[19] + x832) + x353 * x834 + x357 * x814;
  amrex::Real x839 =
    x231 * x838 - x232 * x835 - x291 * x827 + x596 * x806 + x602 * x834 -
    x641 * (x369 * x806 - x370 * x806 + x371 * x834 + x373 * x814) +
    x642 * x806 + x837;
  amrex::Real x840 = kf_qss[12] / x189 - kf_qss[27] * x3 * x358 +
                     x363 * (-kf_qss[19] + x832) + x365 * x834 -
                     x366 * (-kf_qss[19] + x832) + x367 * x814;
  amrex::Real x841 =
    -kf_qss[27] * x3 * x372 - x232 * x840 + x269 * x806 + x294 * x814 +
    x319 * x834 + x362 * x838 -
    x375 * (x369 * x806 - x370 * x806 + x371 * x834 + x373 * x814);
  const amrex::Real x842 =
    x247 * (-kf_qss[9] * x235 * x666 / ((x242) * (x242)) -
            kf_qss[9] * x235 * x244 * x597 / x233 + x600 * x841 - x646 * x839);
  const amrex::Real x844 =
    x668 * (-kf_qss[9] * x235 * x240 * x244 - kf_qss[9] * x235 * x646 / x226 +
            x649 * x806 + x650 * x841);
  amrex::Real x849 = -kf_qss[13] - 1.614e+17 * sc[16] * x223 * exp(x206) -
                     x195 + x259 * (1.68 * x249 * x253 + 12.0 * x249 * x256) +
                     4.34166e+33 * x263 * x264;
  amrex::Real x851 = -kf_qss[34] - kf_qss[40] * x87 - kf_qss[45] * x77 -
                     1.62e+27 * sc[7] * x108 * x91 - x108 * x94 +
                     x281 * (12.0 * x809 + 1.68 * x99) +
                     4.374e+53 * x284 * x285;
  amrex::Real x855 =
    -kf_qss[34] * x135 - kf_qss[39] * exp(-g_RT[10] + g_RT_qss[2] - x85) -
    1.614e+22 * sc[16] * x161 * exp(x145) +
    4.34166e+43 * sc[16] * x341 *
      exp(-7140.6444877689701 * invT - 10.22 * tc[0]) -
    1.92e+16 * sc[2] * x185 * exp(x169) +
    x332 * (12.0 * x176 * x249 + 1.68 * x249 * x326) +
    x340 * (1.68 * x152 * x249 + 12.0 * x249 * x336) + 6.144e+31 * x686;
  amrex::Real x860 = -4.2e+45 * refCinv * sc[6] * x58 * exp(x38 + x39) -
                     14700000000.0 * x29 +
                     x306 * (1.68 * x249 * x302 + 12.0 * x249 * x48) +
                     3.6015e+19 * x309 + 2.94e+90 * x674;
  amrex::Real x861 = x296 * x851 + x314 * x860;
  amrex::Real x862 = -kf_qss[34] * x135 * x358 - kf_qss[34] * x202 / x189 +
                     x350 * x855 + x353 * x861 + x357 * x851;
  x195 = -kf_qss[34] * x118 / x189 + x363 * x855 + x365 * x861 - x366 * x855 +
         x367 * x851 + x195 / x189;
  amrex::Real x864 = -kf_qss[34] * x135 * x372 + x369 * x849 - x370 * x849 +
                     x371 * x861 + x373 * x851;
  amrex::Real x865 = -x195 * x232 + x269 * x849 + x294 * x851 + x319 * x861 +
                     x362 * x862 - x375 * x864;
  amrex::Real x867 =
    (14700000000.0 * sc[18] * x384 + 4.2e+45 * sc[20] * x58 * exp(x39) -
     3.6015e+19 * x27 - 2.94e+90 * x297 -
     x54 * (1.68 * x249 * x302 + 12.0 * x249 * x48)) /
    x68;
  amrex::Real x870 =
    -x114 * x617 * x860 + x114 * x867 + x472 * x851 - x619 * x851 -
    (kf_qss[33] * sc[16] * x434 - x104 * (12.0 * x809 + 1.68 * x99) +
     1.62e+27 * x108 * x429 * x607 - 4.374e+53 * x285 * x606) /
      x111;
  x341 = -kf_qss[34] * x116 * x473 / x189 - x355 * x870 + x543 * x855 +
         x627 * x855 + x628 * x861 -
         (-x157 * (1.68 * x152 * x249 + 12.0 * x249 * x336) -
          x181 * (12.0 * x176 * x249 + 1.68 * x249 * x326) +
          1.92e+16 * x185 * x638 - 6.144e+31 * x320 -
          4.34166e+43 * x341 * x631 *
            exp(-7140.6444877689701 * invT - 10.22 * tc[0] + x505) +
          1.614e+22 * x506 * x631) /
           x189;
  x855 = x231 * x862 - x232 * x341 - x291 * x870 + x596 * x849 + x602 * x861 -
         x641 * x864 + x642 * x849 -
         (1.614e+17 * sc[23] * x223 * x556 -
          x219 * (1.68 * x249 * x253 + 12.0 * x249 * x256) -
          4.34166e+33 * x264 * x623) /
           x226;
  x864 = x247 * (x600 * x865 - x646 * x855);
  const amrex::Real x875 = x668 * (x649 * x849 + x650 * x865);
  amrex::Real x878 = x288 * x367 + x363 * x687 - x366 * x687;
  x786 = -x232 * (x365 * x773 + x878) + x362 * (x350 * x687 + x775) + x786;
  amrex::Real x881 = x600 * x786;
  amrex::Real x882 =
    x231 * (x350 * x687 + x775) + x602 * x773 - x641 * (x691 + x782);
  amrex::Real x883 = x709 + x710 + x882;
  amrex::Real x884 = x543 * x687 + x627 * x687;
  amrex::Real x886 = -x232 * (x797 + x884) - x291 * (x701 + x792);
  const amrex::Real x888 = x247 * (-x646 * (x883 + x886) + x881);
  const amrex::Real x889 = x668 * (x649 * x681 + x650 * x786);
  amrex::Real x892 = -kf_qss[32] - kf_qss[33] + x288;
  amrex::Real x894 = x296 * x892 + x314 * (-kf_qss[55] + x676);
  amrex::Real x895 = -kf_qss[20] - kf_qss[21] + x687;
  amrex::Real x896 = x350 * x895 + x353 * x894 + x357 * x892;
  amrex::Real x897 = -kf_qss[14] + x681;
  amrex::Real x900 =
    -x232 * (x363 * x895 + x365 * x894 - x366 * x895 + x367 * x892) +
    x269 * x897 + x294 * x892 + x319 * x894 + x362 * x896 -
    x375 * (x369 * x897 - x370 * x897 + x371 * x894 + x373 * x892);
  amrex::Real x902 = -x114 * x617 * (-kf_qss[55] + x676) + x114 * x696 / x68 +
                     x472 * x892 - x619 * x892 - x279 / x111;
  amrex::Real x903 =
    -x355 * x902 + x543 * x895 + x627 * x895 + x628 * x894 - x705 / x189;
  amrex::Real x904 =
    x231 * x896 - x232 * x903 - x291 * x902 + x596 * x897 + x602 * x894 -
    x641 * (x369 * x897 - x370 * x897 + x371 * x894 + x373 * x892) +
    x642 * x897 + x709;
  const amrex::Real x905 =
    x247 * (-kf_qss[8] * x666 / ((x242) * (x242)) -
            kf_qss[8] * x244 * x597 / x233 + x600 * x900 - x646 * x904);
  const amrex::Real x906 =
    x668 * (-kf_qss[8] * x240 * x244 + x649 * x897 + x650 * x900);
  amrex::Real x908 = -kf_qss[42] + x681;
  amrex::Real x910 = -kf_qss[44] + x288;
  amrex::Real x911 = x296 * x910 + x314 * x676;
  amrex::Real x912 = x363 * (-kf_qss[43] + x687) + x365 * x911 -
                     x366 * (-kf_qss[43] + x687) + x367 * x910;
  amrex::Real x913 = x350 * (-kf_qss[43] + x687) + x353 * x911 + x357 * x910;
  amrex::Real x915 =
    -x232 * x912 + x269 * x908 + x294 * x910 + x319 * x911 + x362 * x913 -
    x375 * (x369 * x908 - x370 * x908 + x371 * x911 + x373 * x910);
  amrex::Real x917 = x472 * x910 - x619 * x910 + x701 -
                     (kf_qss[31] * sc[2] * x410 + kf_qss[40] * sc[4] +
                      2.0 * kf_qss[48] * ((sc[10])) * exp(-g_RT_qss[3] - x415) +
                      sc[21] * x459 + x279) /
                       x111;
  x510 =
    -x355 * x917 + x543 * (-kf_qss[43] + x687) + x627 * (-kf_qss[43] + x687) +
    x628 * x911 -
    (kf_qss[39] * sc[4] +
     2.0 * kf_qss[47] * ((sc[10])) * exp(-g_RT_qss[2] - x415) + sc[2] * x510 +
     3200000000000000.0 * x185 * x503 * exp(x169 + x496) + x705) /
      x189;
  x709 = x231 * x913 - x232 * x510 - x291 * x917 + x596 * x908 + x602 * x911 -
         x641 * (x369 * x908 - x370 * x908 + x371 * x911 + x373 * x910) +
         x642 * x908 + x709;
  const amrex::Real x920 =
    x247 * (-kf_qss[41] * x666 / ((x242) * (x242)) -
            kf_qss[41] * x244 * x597 / x233 + x600 * x915 - x646 * x709);
  x244 = x668 * (-kf_qss[41] * x240 * x244 + x649 * x908 + x650 * x915);
  amrex::Real x922 = -kf_qss[48] + x102;
  amrex::Real x925 = -kf_qss[61] * x65 * x70 / x111 + x296 * x922 +
                     x314 * (-kf_qss[61] * x65 + x824);
  amrex::Real x926 = -kf_qss[46] + x805;
  amrex::Real x928 = x350 * (-kf_qss[47] + x832) + x353 * x925 + x357 * x922;
  amrex::Real x929 = x363 * (-kf_qss[47] + x832) + x365 * x925 -
                     x366 * (-kf_qss[47] + x832) + x367 * x922;
  amrex::Real x931 =
    -x232 * x929 + x269 * x926 + x294 * x922 + x319 * x925 + x362 * x928 -
    x375 * (x369 * x926 - x370 * x926 + x371 * x925 + x373 * x922);
  amrex::Real x934 = kf_qss[61] * x395 * x65 / (x111 * x68) -
                     x114 * x617 * (-kf_qss[61] * x65 + x824) + x114 * x821 +
                     x472 * x922 - x619 * x922 - x818 / x111;
  amrex::Real x935 = -x355 * x934 + x543 * (-kf_qss[47] + x832) +
                     x627 * (-kf_qss[47] + x832) + x628 * x925 - x831 / x189;
  amrex::Real x936 =
    x231 * x928 - x232 * x935 - x291 * x934 + x596 * x926 + x602 * x925 -
    x641 * (x369 * x926 - x370 * x926 + x371 * x925 + x373 * x922) +
    x642 * x926 + x837;
  const amrex::Real x937 = x247 * (x600 * x931 - x646 * x936);
  const amrex::Real x938 = x668 * (x649 * x926 + x650 * x931);
  amrex::Real x941 =
    -x114 * x617 * x676 +
    x114 * (2.0 * kf_qss[55] * ((sc[12])) * x393 + x696) / x68 + x288 * x472 -
    x288 * x619 - (kf_qss[29] * sc[2] * x453 + x279) / x111;
  amrex::Real x944 = x628 * x773 + x884;
  x477 = -x355 * x941 + x944 -
         (kf_qss[16] * sc[2] * x482 + sc[4] * x477 + x705) / x189;
  amrex::Real x947 = -x232 * x477 - x291 * x941 + x710 + x882 -
                     (kf_qss[11] * sc[2] * x574 + kf_qss[14] * sc[3] * x551 +
                      kf_qss[76] * sc[32] * x588 + sc[16] * x572 + x708) /
                       x226;
  const amrex::Real x948 = x247 * (-x646 * x947 + x881);
  amrex::Real x949 = -kf_qss[38] + x681;
  amrex::Real x952 =
    -kf_qss[58] * exp(g_RT[13] - g_RT[20] - g_RT[3] + g_RT_qss[2]) + x687;
  amrex::Real x956 =
    x118 * x228 * x949 / ((x226) * (x226)) -
    x232 * (x363 * x952 - x366 * x952 + x779) + x288 * x294 + x319 * x773 +
    x362 * (x350 * x952 + x775) -
    x375 * (x202 * x228 * x949 / ((x226) * (x226)) - x370 * x949 + x782);
  amrex::Real x957 = x288 * x472 - x288 * x619 + x701;
  amrex::Real x958 =
    x957 -
    (kf_qss[30] * sc[2] * x446 + kf_qss[37] * sc[16] * x439 + x279) / x111;
  amrex::Real x959 =
    -x355 * x958 + x543 * x952 + x627 * x952 + x628 * x773 -
    (kf_qss[17] * sc[2] * x521 + kf_qss[22] * sc[4] * x514 + x705) / x189;
  x563 = x116 * x228 * x473 * x949 / ((x226) * (x226)) +
         x231 * (x350 * x952 + x775) - x232 * x959 - x291 * x958 + x596 * x949 +
         x602 * x773 -
         x641 * (x202 * x228 * x949 / ((x226) * (x226)) - x370 * x949 + x782) -
         (sc[2] * x563 + x708) / x226;
  const amrex::Real x961 = x247 * (-x563 * x646 + x600 * x956);
  const amrex::Real x962 =
    x668 * (x650 * x956 + x238 * x646 * x949 / ((x226) * (x226)));
  amrex::Real x963 = x957 - (kf_qss[45] * sc[2] + x279) / x111;
  amrex::Real x966 = -x232 * (-x355 * x963 + x796 + x884) - x291 * x963 + x883;
  const amrex::Real x967 = x247 * (-x646 * x966 + x881);
  amrex::Real x968 = x957 - (2.7e+26 * x108 * x426 * x429 + x279) / x111;
  amrex::Real x970 = -x232 * (-x355 * x968 + x796 + x884) - x291 * x968 + x883;
  const amrex::Real x971 = x247 * (-x646 * x970 + x881);
  amrex::Real x977 = -x209 * x223 +
                     x259 * (0.42 * x249 * x253 + 3.0 * x249 * x256) -
                     4.035e+16 * x261 + 1.085415e+33 * x263 * x264;
  x147 = -kf_qss[35] * x135 -
         kf_qss[52] * exp(g_RT[16] - g_RT[18] - g_RT[3] + g_RT_qss[2]) -
         4.035e+21 * sc[16] * x161 * exp(x145) -
         4800000000000000.0 * sc[2] * x185 * exp(x169) - x147 * x161 * x35 +
         x332 * (3.0 * x176 * x249 + 0.42 * x249 * x326) +
         x340 * (0.42 * x152 * x249 + 3.0 * x249 * x336) + 1.085415e+43 * x344 +
         1.536e+31 * x686;
  amrex::Real x983 =
    -kf_qss[35] - kf_qss[49] * x81 - 4.05e+26 * sc[7] * x108 * x91 +
    x281 * (3.0 * x809 + 0.42 * x99) + 1.0935e+53 * x284 * x285;
  amrex::Real x987 = -3675000000.0 * x29 +
                     x306 * (0.42 * x249 * x302 + 3.0 * x249 * x48) +
                     9.00375e+18 * x309 - 1.05e+45 * x60 + 7.35e+89 * x674;
  amrex::Real x988 = x296 * x983 + x314 * x987;
  amrex::Real x989 = -kf_qss[35] * x135 * x358 - kf_qss[35] * x202 / x189 +
                     x147 * x350 + x353 * x988 + x357 * x983;
  amrex::Real x990 = -kf_qss[35] * x118 / x189 + x147 * x363 - x147 * x366 +
                     x365 * x988 + x367 * x983;
  amrex::Real x991 = -kf_qss[35] * x135 * x372 + x369 * x977 - x370 * x977 +
                     x371 * x988 + x373 * x983;
  amrex::Real x992 = -x232 * x990 + x269 * x977 + x294 * x983 + x319 * x988 +
                     x362 * x989 - x375 * x991;
  const amrex::Real x994 = refCinv * sc[2];
  amrex::Real x998 =
    (3675000000.0 * sc[18] * x384 + 1.05e+45 * sc[20] * x58 * exp(x39) -
     9.00375e+18 * x27 - 7.35e+89 * x297 -
     x54 * (0.42 * x249 * x302 + 3.0 * x249 * x48)) /
    x68;
  amrex::Real x1000 =
    -x114 * x617 * x987 + x114 * x998 + x472 * x983 - x619 * x983 -
    (kf_qss[28] * sc[6] * x442 + kf_qss[32] * sc[4] * x421 * x994 +
     kf_qss[33] * sc[7] * x434 + kf_qss[37] * sc[13] * x439 -
     x104 * (3.0 * x809 + 0.42 * x99) + 4.05e+26 * x108 * x429 * x607 -
     1.0935e+53 * x285 * x606) /
      x111;
  x147 = -kf_qss[35] * x116 * x473 / x189 - x1000 * x355 + x147 * x543 +
         x147 * x627 + x628 * x988 -
         (kf_qss[51] * sc[19] * x518 -
          x157 * (0.42 * x152 * x249 + 3.0 * x249 * x336) -
          x181 * (3.0 * x176 * x249 + 0.42 * x249 * x326) +
          4800000000000000.0 * x185 * x638 - 1.536e+31 * x320 +
          4.035e+21 * x506 * x631 - 1.085415e+43 * x633) /
           x189;
  x256 = -x1000 * x291 - x147 * x232 + x231 * x989 + x596 * x977 + x602 * x988 -
         x641 * x991 + x642 * x977 -
         (kf_qss[10] * sc[2] * x580 + kf_qss[50] * sc[18] * x545 +
          sc[12] * x572 - x219 * (0.42 * x249 * x253 + 3.0 * x249 * x256) -
          1.085415e+33 * x264 * x623 + 4.035e+16 * x558) /
           x226;
  x572 =
    x247 *
    (-x256 * x646 + x600 * x992 -
     (kf_qss[74] * sc[32] * x662 + kf_qss[7] * sc[2] * x652 + sc[3] * x659) /
       x242);
  x659 = x668 * (x649 * x977 + x650 * x992);
  x102 = -kf_qss[36] - kf_qss[37] + x102;
  x991 = x102 * x296 + x314 * x824;
  x832 = -kf_qss[36] * x135 -
         kf_qss[56] * exp(g_RT[17] - g_RT[24] - g_RT[3] + g_RT_qss[2]) + x832;
  x358 = -kf_qss[36] * x135 * x358 - kf_qss[36] * x202 / x189 + x102 * x357 +
         x350 * x832 + x353 * x991;
  amrex::Real x1011 = -kf_qss[36] * x118 / x189 + x102 * x367 + x363 * x832 +
                      x365 * x991 - x366 * x832;
  x805 = -kf_qss[15] + x805;
  x372 = -kf_qss[36] * x135 * x372 + x102 * x373 + x369 * x805 - x370 * x805 +
         x371 * x991;
  amrex::Real x1014 = -x1011 * x232 + x102 * x294 + x269 * x805 + x319 * x991 +
                      x358 * x362 - x372 * x375;
  x818 =
    x102 * x472 - x102 * x619 - x114 * x617 * x824 + x114 * x821 - x818 / x111;
  x489 = -kf_qss[36] * x116 * x473 / x189 - x355 * x818 + x543 * x832 +
         x627 * x832 + x191 * x316 * x473 * x991 / x189 -
         (((sc[2]) * (sc[2])) * x489 + x831) / x189;
  x831 = x231 * x358 - x232 * x489 - x291 * x818 - x372 * x641 + x596 * x805 +
         x642 * x805 + x837 + x228 * x316 * x473 * x991 / x226;
  x837 = x247 * (x1014 * x600 - x646 * x831);
  x832 = x668 * (x1014 * x650 + x649 * x805);
  x372 = -6125000000.0 * x29 + x306 * (x302 * x671 + x48 * x672) +
         1.500625e+19 * x309 - 7.0e+44 * x60 + 4.9e+89 * x674;
  amrex::Real x1024 = x288 * x296 + x314 * x372;
  amrex::Real x1026 = x1024 * x353 + x288 * x357 + x350 * x687;
  amrex::Real x1028 = x1024 * x319 + x1026 * x362 +
                      x118 * x228 * x681 / ((x226) * (x226)) -
                      x232 * (x1024 * x365 + x878) + x288 * x294 -
                      x375 * (x1024 * x371 + x288 * x373 + x691);
  x695 = 6125000000.0 * sc[18] * x384 - 1.500625e+19 * x27 + x695;
  amrex::Real x1034 =
    -x114 * x372 * x617 +
    x114 * (kf_qss[53] * sc[2] * x378 + 2450000000.0 * x21 * x384 + x695) /
      x68 +
    x792;
  amrex::Real x1035 =
    x1024 * x628 - x1034 * x355 + x884 -
    (kf_qss[23] * sc[2] * x532 + 2.0 * kf_qss[24] * sc[6] * x492 +
     kf_qss[52] * sc[3] + x705) /
      x189;
  x691 = x1024 * x602 + x1026 * x231 - x1034 * x291 - x1035 * x232 -
         x641 * (x1024 * x371 + x288 * x373 + x691) + x710 -
         (kf_qss[23] * sc[2] * x532 + kf_qss[50] * sc[16] * x545 + x708) / x226;
  const amrex::Real x1037 =
    x247 * (-kf_qss[41] * sc[2] * x655 / x242 + x1028 * x600 - x646 * x691);
  const amrex::Real x1038 = x668 * (x1028 * x650 + x649 * x681);
  amrex::Real x1041 =
    -x114 * x617 * x676 + x114 * (kf_qss[57] * sc[2] + x696) / x68 + x792;
  amrex::Real x1043 =
    -x1041 * x291 -
    x232 * (-x1041 * x355 + x944 - (kf_qss[51] * sc[16] * x518 + x705) / x189) +
    x710 + x882 - (kf_qss[42] * sc[2] * x565 + x708) / x226;
  const amrex::Real x1044 = x247 * (-x1043 * x646 + x881);
  amrex::Real x1045 = -kf_qss[59] + x681;
  amrex::Real x1047 = -kf_qss[61] - kf_qss[62] + x288;
  amrex::Real x1048 = -kf_qss[61] * x114 / x68 + x1047 * x296 + x314 * x372;
  amrex::Real x1051 = x1047 * x357 + x1048 * x353 + x350 * (-kf_qss[60] + x687);
  amrex::Real x1052 = x1047 * x367 + x1048 * x365 +
                      x363 * (-kf_qss[60] + x687) - x366 * (-kf_qss[60] + x687);
  amrex::Real x1053 =
    x1045 * x269 + x1047 * x294 + x1048 * x319 + x1051 * x362 - x1052 * x232 -
    x375 * (x1045 * x369 - x1045 * x370 + x1047 * x373 + x1048 * x371);
  x406 = x1047 * x472 - x1047 * x619 - x114 * x372 * x617 +
         x114 * (x35 * x42 * x58 + x695) / x68 - (sc[2] * x406 + x279) / x111;
  x628 = x1048 * x628 - x355 * x406 + x543 * (-kf_qss[60] + x687) +
         x627 * (-kf_qss[60] + x687) -
         (kf_qss[43] * sc[2] * x527 + kf_qss[58] * sc[3] + x705) / x189;
  amrex::Real x1058 =
    x1045 * x596 + x1045 * x642 + x1048 * x602 + x1051 * x231 - x232 * x628 -
    x291 * x406 -
    x641 * (x1045 * x369 - x1045 * x370 + x1047 * x373 + x1048 * x371) -
    (kf_qss[46] * sc[2] * x577 + x708) / x226;
  const amrex::Real x1059 = x247 * (x1053 * x600 - x1058 * x646);
  const amrex::Real x1060 = x668 * (x1045 * x649 + x1053 * x650);
  x459 = x957 - (sc[10] * x459 + x279) / x111;
  amrex::Real x1063 = -x232 * (-x355 * x459 + x796 + x884) - x291 * x459 + x883;
  const amrex::Real x1064 = x247 * (-x1063 * x646 + x881);
  x259 = x259 * (6.0 * x214 * x249 / ((x216) * (x216)) + 0.84 * x249 * x253) -
         8.07e+16 * x261 + 2.17083e+33 * x263 * x264;
  x261 = -kf_qss[63] - 8.1e+26 * sc[7] * x108 * x91 +
         x281 * (6.0 * x809 + 0.84 * x99) + 2.187e+53 * x284 * x285;
  x161 = -8.07e+21 * sc[16] * x161 * exp(x145) -
         9600000000000000.0 * sc[2] * x185 * exp(x169) +
         x332 * (6.0 * x176 * x249 + 0.84 * x249 * x326) +
         x340 * (0.84 * x152 * x249 + 6.0 * x249 * x336) + 2.17083e+43 * x344 +
         3.072e+31 * x686;
  x29 = -7350000000.0 * x29 + x306 * (0.84 * x249 * x302 + 6.0 * x249 * x48) +
        1.80075e+19 * x309 - 2.1e+45 * x60 + 1.47e+90 * x674;
  x60 = x261 * x296 + x29 * x314;
  x169 = x161 * x350 + x261 * x357 + x353 * x60;
  x281 = x169 * x362 -
         x232 * (x161 * x363 - x161 * x366 + x261 * x367 + x365 * x60) +
         x259 * x269 + x261 * x294 + x319 * x60 -
         x375 * (x259 * x369 - x259 * x370 + x261 * x373 + x371 * x60);
  x296 = (7350000000.0 * sc[18] * x384 + 2.1e+45 * sc[20] * x58 * exp(x39) -
          1.80075e+19 * x27 - 1.47e+90 * x297 -
          x54 * (0.84 * x249 * x302 + 6.0 * x249 * x48)) /
         x68;
  x108 = -x114 * x29 * x617 + x114 * x296 + x261 * x472 - x261 * x619 -
         (-x104 * (6.0 * x809 + 0.84 * x99) + 8.1e+26 * x108 * x429 * x607 -
          2.187e+53 * x285 * x606) /
           x111;
  x185 = -x108 * x355 + x161 * x543 + x161 * x627 +
         x191 * x316 * x473 * x60 / x189 -
         (-x157 * (0.84 * x152 * x249 + 6.0 * x249 * x336) -
          x181 * (6.0 * x176 * x249 + 0.84 * x249 * x326) +
          9600000000000000.0 * x185 * x638 - 3.072e+31 * x320 +
          8.07e+21 * x506 * x631 - 2.17083e+43 * x633) /
           x189;
  x191 = -x108 * x291 + x169 * x231 - x185 * x232 + x259 * x596 + x259 * x642 -
         x641 * (x259 * x369 - x259 * x370 + x261 * x373 + x371 * x60) +
         x228 * x316 * x473 * x60 / x226 -
         (-x219 * (6.0 * x214 * x249 / ((x216) * (x216)) + 0.84 * x249 * x253) -
          2.17083e+33 * x264 * x623 + 8.07e+16 * x558) /
           x226;
  x214 = x247 * (-x191 * x646 + x281 * x600);
  x216 = x668 * (x259 * x649 + x281 * x650);
  x228 = -kf_qss[50] + x681;
  x253 = -kf_qss[51] + x687;
  x264 = x228 * x269 - x232 * (x253 * x363 - x253 * x366 + x779) + x288 * x294 +
         x319 * x773 + x362 * (x253 * x350 + x775) -
         x375 * (x228 * x369 - x228 * x370 + x782);
  x269 = x957 - (kf_qss[49] * sc[2] + x279) / x111;
  x223 = x228 * x596 + x228 * x642 + x231 * (x253 * x350 + x775) -
         x232 * (x253 * x543 + x253 * x627 - x269 * x355 + x796) - x269 * x291 +
         x602 * x773 - x641 * (x228 * x369 - x228 * x370 + x782) -
         (2.69e+16 * x223 * x35 * x556 + x708) / x226;
  x285 = x247 * (-x223 * x646 + x264 * x600);
  x294 = x668 * (x228 * x649 + x264 * x650);
  x114 = -x114 * x617 * x676 + x114 * (kf_qss[54] * sc[2] * x389 + x696) / x68 +
         x792;
  x302 = -x114 * x355 + x944 -
         (kf_qss[56] * sc[3] + 2.69e+21 * x503 * x506 + x705) / x189;
  x48 = -x114 * x291 - x232 * x302 + x710 + x882 - (sc[2] * x569 + x708) / x226;
  x306 = x247 * (-x48 * x646 + x881);
  x309 =
    x247 *
    (-x646 * (x710 + x882 + x886 - (kf_qss[59] * sc[2] * x584 + x708) / x226) +
     x881);
  x314 = x957 - (kf_qss[62] * sc[2] * x399 + x279) / x111;
  x319 = -x314 * x355 + x944 - (sc[2] * x525 + x705) / x189;
  x326 = x247 * (-x646 * (-x232 * x319 - x291 * x314 + x883) + x881);
  x176 =
    x247 *
    (-kf_qss[74] * sc[16] * x662 / x242 -
     x646 * (x710 + x882 + x886 - (kf_qss[76] * sc[12] * x588 + x708) / x226) +
     x881);
  x332 = x957 - (sc[2] * x469 + x279) / x111;
  x336 = -x332 * x355 + x944 - (sc[2] * x537 + x705) / x189;
  x152 = x247 * (-x646 * (-x232 * x336 - x291 * x332 + x883) + x881);
  x340 = x957 - (sc[2] * x465 + x279) / x111;
  x344 = -x340 * x355 + x944 - (sc[2] * x540 + x705) / x189;
  x353 = x247 * (-x646 * (-x232 * x344 - x291 * x340 + x883) + x881);
  x357 =
    x247 *
    (-x646 * (x710 + x882 + x886 - (kf_qss[75] * sc[2] * x592 + x708) / x226) +
     x881);
  x362 = g_RT[33] - g_RT_qss[5];
  x369 = g_RT[32] - g_RT_qss[5];
  x370 = g_RT[36] - g_RT_qss[5];
  x371 = kf_qss[71] * exp(g_RT[16] - x370 - x387);
  x373 = -kf_qss[64] * sc[32] - kf_qss[65] * sc[3] * exp(-x369 - x549) -
         kf_qss[66] * sc[2] * exp(-x369 - x387) - kf_qss[67] * sc[5] -
         kf_qss[68] * sc[9] * exp(-g_RT[3] + g_RT[9] - x362) -
         kf_qss[69] * sc[4] * exp(-g_RT[2] + g_RT[4] - x362) -
         kf_qss[6] * sc[3] * x35 -
         kf_qss[70] * sc[16] * exp(g_RT[16] - g_RT[3] - x370) -
         kf_qss[72] * sc[17] * exp(g_RT[17] - g_RT[9] - x370) -
         kf_qss[73] * sc[36] - kf_qss[81] * sc[23] -
         kf_qss[82] * sc[16] * exp(g_RT[16] - g_RT[17] - x369) -
         kf_qss[83] * sc[14] * exp(-g_RT[10] + g_RT[14] - x362) -
         kf_qss[84] * sc[37] - sc[2] * x371 * x423 + 10.0e-13;
  x375 = -g_RT[33] + g_RT_qss[5];
  x506 = kf_qss[6] * refC * sc[33] * exp(-g_RT[3] - x375);
  x525 = kf_qss[64] * exp(g_RT[1] - g_RT[32] + g_RT[3] - g_RT_qss[5]);
  x558 = kf_qss[73] * exp(g_RT[17] + g_RT[1] - g_RT[36] - g_RT_qss[5]);
  x569 = kf_qss[81] * exp(g_RT[16] - g_RT[23] - x467);
  x600 = kf_qss[84] * exp(g_RT[14] - g_RT[37] - x375);
  x602 = kf_qss[65] * sc[32] * sc[9] + kf_qss[66] * sc[32] * sc[4] +
         kf_qss[67] * sc[33] * sc[4] * exp(-x375 - x513) +
         kf_qss[68] * sc[33] * sc[3] + kf_qss[69] * sc[2] * sc[33] +
         kf_qss[6] * refC * sc[33] * x35 * exp(-g_RT[3] - x375) +
         kf_qss[70] * sc[36] * sc[3] + kf_qss[71] * sc[36] * sc[4] +
         kf_qss[72] * sc[36] * sc[9] + kf_qss[74] * sc[16] * sc[32] * x662 +
         kf_qss[75] * sc[2] * sc[36] * x592 +
         kf_qss[76] * sc[12] * sc[32] * x588 + kf_qss[82] * sc[17] * sc[32] +
         kf_qss[83] * sc[10] * sc[33] + sc[14] * sc[33] * x600 +
         sc[16] * sc[34] * x569 + sc[17] * sc[1] * x558 + sc[1] * sc[3] * x525 +
         sc[2] * sc[34] * x469 + sc[2] * sc[34] * x537 + sc[2] * sc[35] * x465 +
         sc[2] * sc[35] * x540 + 10.0e-13;
  x472 = x602 / ((x373) * (x373));
  x104 = kf_qss[6] * sc[3] * x472;
  x279 = (sc[17] * x558 + sc[3] * x525 + x506) / x373;
  x54 = (kf_qss[69] * sc[33] + kf_qss[75] * sc[36] * x592 + sc[34] * x469 +
         sc[34] * x537 + sc[35] * x465 + sc[35] * x540 + x506) /
        x373;
  x27 = -kf_qss[6] * sc[3];
  x619 = x472 * (-kf_qss[66] * exp(-x369 - x387) + x27 - x371 * x423);
  x596 =
    (kf_qss[68] * sc[33] + kf_qss[70] * sc[36] + sc[1] * x525 + x506) / x373;
  x219 = x472 * (-kf_qss[65] * exp(-x369 - x549) - kf_qss[6] * x35 + x27);
  x157 = (kf_qss[66] * sc[32] + kf_qss[67] * sc[33] * exp(-x375 - x513) +
          kf_qss[71] * sc[36] + x506) /
         x373;
  x633 = x472 * (-kf_qss[69] * exp(-g_RT[2] + g_RT[4] - x362) + x27);
  x181 = x472 * (-kf_qss[67] + x27);
  x638 = -x104 - x506 / x373;
  x641 = (kf_qss[65] * sc[32] + kf_qss[72] * sc[36] + x506) / x373;
  x642 = x472 * (-kf_qss[68] * exp(-g_RT[3] + g_RT[9] - x362) + x27);
  x231 = (kf_qss[83] * sc[33] + x506) / x373;
  x649 = (kf_qss[76] * sc[32] * x588 + x506) / x373;
  x650 = (sc[33] * x600 + x506) / x373;
  x668 = x472 * (-kf_qss[83] * exp(-g_RT[10] + g_RT[14] - x362) + x27);
  x674 = (kf_qss[74] * sc[32] * x662 + sc[34] * x569 + 1.5 * x506) / x373;
  x686 = x472 * (-1.5 * kf_qss[6] * sc[3] -
                 kf_qss[70] * exp(g_RT[16] - g_RT[3] - x370) -
                 kf_qss[82] * exp(g_RT[16] - g_RT[17] - x369) - x371 * x994);
  x297 = (kf_qss[82] * sc[32] + sc[1] * x558 + 2 * x506) / x373;
  x320 = x472 *
         (-2 * kf_qss[6] * sc[3] - kf_qss[72] * exp(g_RT[17] - g_RT[9] - x370));
  x782 = x472 * (-kf_qss[81] + x27);
  x809 = (kf_qss[65] * sc[9] + kf_qss[66] * sc[4] + kf_qss[74] * sc[16] * x662 +
          kf_qss[76] * sc[12] * x588 + kf_qss[82] * sc[17] + x506) /
         x373;
  x99 = x472 * (-kf_qss[64] + x27);
  x881 = (kf_qss[67] * sc[4] * exp(-x375 - x513) + kf_qss[68] * sc[3] +
          kf_qss[69] * sc[2] + kf_qss[6] * refC * x35 * exp(-g_RT[3] - x375) +
          kf_qss[83] * sc[10] + sc[14] * x600 + x506) /
         x373;
  x469 = (sc[16] * x569 + sc[2] * x469 + sc[2] * x537 + x506) / x373;
  x465 = (sc[2] * x465 + sc[2] * x540 + x506) / x373;
  x537 = (kf_qss[70] * sc[3] + kf_qss[71] * sc[4] + kf_qss[72] * sc[9] +
          kf_qss[75] * sc[2] * x592 + x506) /
         x373;
  x540 = x472 * (-kf_qss[73] + x27);
  x957 = x472 * (-kf_qss[84] + x27);
  x371 = (-sc_qss[0] * x238 / x226 + x597) / ((x233) * (x233));
  x376 = x371 * x376;
  x525 = sc_qss[0] * x238 / ((x226) * (x226));
  x266 = (x266 * x525 + x374) / x233;
  x374 = x371 * x693;
  x681 = x525 * x681;
  x693 = (x681 + x712) / x233;
  x712 = x371 * x725;
  x716 = (x525 * x716 + x721) / x233;
  x725 = x371 * x743;
  x721 = (x525 * x736 + x746) / x233;
  x736 = x371 * x762;
  x743 = (x525 * x757 + x761) / x233;
  x746 = x371 * x787;
  x757 = (x681 + x799) / x233;
  x762 = x371 * x841;
  x761 = (-kf_qss[9] * sc_qss[0] * x235 / x226 + x525 * x806 + x839) / x233;
  x787 = x371 * x865;
  x799 = (x525 * x849 + x855) / x233;
  x806 = x371 * x786;
  x839 = (x681 + x883 + x886) / x233;
  x841 = x371 * x900;
  x849 = (x525 * x897 + x904) / x233;
  x865 = x371 * x915;
  x855 = (x525 * x908 + x709) / x233;
  x786 = x371 * x931;
  x897 = (x525 * x926 + x936) / x233;
  x900 = (x681 + x947) / x233;
  x904 = x371 * x956;
  x908 = (sc_qss[0] * x238 * x949 / ((x226) * (x226)) + x563) / x233;
  x915 = (x681 + x966) / x233;
  x709 = (x681 + x970) / x233;
  x926 = x371 * x992;
  x931 = (x256 + x525 * x977) / x233;
  x936 = x1014 * x371;
  x947 = (x525 * x805 + x831) / x233;
  x949 = x1028 * x371;
  x956 = (x681 + x691) / x233;
  x563 = (x1043 + x681) / x233;
  x966 = x1053 * x371;
  x970 = (x1045 * x525 + x1058) / x233;
  x977 = (x1063 + x681) / x233;
  x992 = x281 * x371;
  x256 = (x191 + x259 * x525) / x233;
  x805 = x264 * x371;
  x1014 = (x223 + x228 * x525) / x233;
  x831 = (x48 + x681) / x233;
  x1028 =
    (x681 + x710 + x882 + x886 - (kf_qss[59] * sc[2] * x584 + x708) / x226) /
    x233;
  x691 = (-x232 * x319 - x291 * x314 + x681 + x883) / x233;
  x1043 =
    (x681 + x710 + x882 + x886 - (kf_qss[76] * sc[12] * x588 + x708) / x226) /
    x233;
  x1045 = (-x232 * x336 - x291 * x332 + x681 + x883) / x233;
  x232 = (-x232 * x344 - x291 * x340 + x681 + x883) / x233;
  x291 =
    (x681 + x710 + x882 + x886 - (kf_qss[75] * sc[2] * x592 + x708) / x226) /
    x233;
  x708 = (-sc_qss[1] * x200 + x544) / ((x203) * (x203));
  x359 = x359 * x708;
  x368 = (-sc_qss[1] * x368 + x347) / x203;
  x347 = x689 * x708;
  x689 = (-sc_qss[1] * x690 + x688) / x203;
  x690 = x171 * x708;
  x688 = (-sc_qss[1] * (x125 * x363 - x125 * x366 + x365 * x719 + x367 * x717) +
          x732) /
         x203;
  x710 = x708 * x740;
  x125 = (-sc_qss[1] * x741 + x745) / x203;
  x171 = x708 * x759;
  x732 = (-sc_qss[1] * (x363 * x758 + x365 * x756 - x366 * x758 + x367 * x754) +
          x766) /
         x203;
  x740 = x708 * (x350 * x771 + x775);
  x741 = (-sc_qss[1] * (x363 * x771 - x366 * x771 + x779) + x543 * x771 +
          x627 * x771 + x797) /
         x203;
  x745 = x708 * x838;
  x758 = (-sc_qss[1] * x840 + x835) / x203;
  x759 = x708 * x862;
  x766 = (-sc_qss[1] * x195 + x341) / x203;
  x687 = x708 * (x350 * x687 + x775);
  x771 = -sc_qss[1] * (x365 * x773 + x878);
  x797 = (x771 + x797 + x884) / x203;
  x835 = -x687 + x797;
  x838 = x708 * x896;
  x840 = (-sc_qss[1] * (x363 * x895 + x365 * x894 - x366 * x895 + x367 * x892) +
          x903) /
         x203;
  x862 = x708 * x913;
  x195 = (-sc_qss[1] * x912 + x510) / x203;
  x341 = x708 * x928;
  x882 = (-sc_qss[1] * x929 + x935) / x203;
  x883 = (x477 + x771) / x203;
  x886 = x708 * (x350 * x952 + x775);
  x895 = (-sc_qss[1] * (x363 * x952 - x366 * x952 + x779) + x959) / x203;
  x896 = (-x355 * x963 + x771 + x796 + x884) / x203;
  x903 = (-x355 * x968 + x771 + x796 + x884) / x203;
  x912 = x708 * x989;
  x913 = (-sc_qss[1] * x990 + x147) / x203;
  x510 = x358 * x708;
  x928 = (-sc_qss[1] * x1011 + x489) / x203;
  x929 = x1026 * x708;
  x878 = (-sc_qss[1] * (x1024 * x365 + x878) + x1035) / x203;
  x189 =
    (-x1041 * x355 + x771 + x944 - (kf_qss[51] * sc[16] * x518 + x705) / x189) /
    x203;
  x705 = x1051 * x708;
  x935 = (-sc_qss[1] * x1052 + x628) / x203;
  x884 = (-x355 * x459 + x771 + x796 + x884) / x203;
  x944 = x169 * x708;
  x365 = (-sc_qss[1] * (x161 * x363 - x161 * x366 + x261 * x367 + x365 * x60) +
          x185) /
         x203;
  x350 = x708 * (x253 * x350 + x775);
  x355 = (-sc_qss[1] * (x253 * x363 - x253 * x366 + x779) + x253 * x543 +
          x253 * x627 - x269 * x355 + x796) /
         x203;
  x363 = (x302 + x771) / x203;
  x366 = (x319 + x771) / x203;
  x367 = (x336 + x771) / x203;
  x543 = (x344 + x771) / x203;
  x316 = x316 * (-sc_qss[1] * x6 / x111 - sc_qss[2] * x201 / x111 + x473);
  x315 = x315 * x316;
  x627 = sc_qss[1] * x6 / ((x111) * (x111));
  x775 = sc_qss[2] * x201 / ((x111) * (x111));
  x289 = x116 * (-kf_qss[26] * sc_qss[2] * x135 / x111 + x289 * x627 +
                 x289 * x775 + x620);
  x620 = x316 * x678;
  x670 = x116 * (-kf_qss[25] * sc_qss[2] * x135 / x111 + x627 * x670 +
                 x670 * x775 + x703);
  x678 = x316 * x719;
  x703 = x116 * (x627 * x717 + x717 * x775 + x730);
  x717 = x316 * x738;
  x719 = x116 * (x627 * x737 + x737 * x775 + x744);
  x730 = x316 * x756;
  x737 = x116 * (x627 * x754 + x754 * x775 + x765);
  x738 = x316 * x773;
  x288 = x288 * x627 + x288 * x775;
  x701 = x116 * (x288 + x701 + x792);
  x744 = x701 - x738;
  x754 = x316 * x834;
  x756 = x116 * (-kf_qss[27] * sc_qss[1] * x3 / x111 + x627 * x814 +
                 x775 * x814 + x827);
  x765 = x316 * x861;
  x773 = x116 * (-kf_qss[34] * sc_qss[2] * x135 / x111 + x627 * x851 +
                 x775 * x851 + x870);
  x779 = x316 * x894;
  x792 = x116 * (x627 * x892 + x775 * x892 + x902);
  x796 = x316 * x911;
  x814 = x116 * (x627 * x910 + x775 * x910 + x917);
  x827 = x316 * x925;
  x834 = x116 * (x627 * x922 + x775 * x922 + x934);
  x851 = x116 * (x288 + x941);
  x861 = x116 * (x288 + x958);
  x870 = x116 * (x288 + x963);
  x892 = x116 * (x288 + x968);
  x894 = x316 * x988;
  x902 = x116 * (-kf_qss[35] * sc_qss[2] * x135 / x111 + x1000 + x627 * x983 +
                 x775 * x983);
  x910 = x316 * x991;
  x135 = x116 * (-kf_qss[36] * sc_qss[2] * x135 / x111 + x102 * x627 +
                 x102 * x775 + x818);
  x911 = x1024 * x316;
  x917 = x116 * (x1034 + x288);
  x922 = x116 * (x1041 + x288);
  x925 = x1048 * x316;
  x934 = x116 * (x1047 * x627 + x1047 * x775 + x406);
  x941 = x116 * (x288 + x459);
  x477 = x316 * x60;
  x952 = x116 * (x108 + x261 * x627 + x261 * x775);
  x958 = x116 * (x269 + x288);
  x959 = x116 * (x114 + x288);
  x963 = x116 * (x288 + x314);
  x968 = x116 * (x288 + x332);
  x983 = x116 * (x288 + x340);
  x988 = sc_qss[3] * (kf_qss[61] * sc[20] + 10.0e-13) / ((x68) * (x68));
  x311 = x311 * x617 + x311 * x988 - x616;
  x616 = x617 * x676 + x676 * x988 - x696 / x68;
  x989 = x617 * (-kf_qss[53] + x676) + x988 * (-kf_qss[53] + x676) -
         (kf_qss[53] * sc[18] * x378 + kf_qss[54] * sc[24] * x389 +
          kf_qss[57] * sc[19] + x696) /
           x68;
  x990 = x617 * (-kf_qss[54] + x676) + x988 * (-kf_qss[54] + x676) - x696 / x68;
  x825 = x617 * x825 - x821 + x825 * x988;
  x860 = x617 * x860 + x860 * x988 - x867;
  x867 = x617 * (-kf_qss[55] + x676) + x988 * (-kf_qss[55] + x676) - x696 / x68;
  x1000 = x617 * (-kf_qss[61] * x65 + x824) - x821 +
          x988 * (-kf_qss[61] * x65 + x824);
  x147 = x617 * x676 + x676 * x988 -
         (2.0 * kf_qss[55] * ((sc[12])) * x393 + x696) / x68;
  x987 = x617 * x987 + x987 * x988 - x998;
  x821 = x617 * x824 - x821 + x824 * x988;
  x384 = x372 * x617 + x372 * x988 -
         (kf_qss[53] * sc[2] * x378 + 2450000000.0 * x21 * x384 + x695) / x68;
  x824 = x617 * x676 + x676 * x988 - (kf_qss[57] * sc[2] + x696) / x68;
  x42 = -kf_qss[61] * sc_qss[3] / x68 + x372 * x617 + x372 * x988 -
        (x35 * x42 * x58 + x695) / x68;
  x58 = x29 * x617 + x29 * x988 - x296;
  x617 = x617 * x676 + x676 * x988 - (kf_qss[54] * sc[2] * x389 + x696) / x68;
  x676 = 94600000.0 * sc[13] * exp(259.15658288943098 * invT);
  x696 = 110.7 * exp(-840.37183189388202 * invT + 1.79 * tc[0]);
  x998 = sc[6] * x696;
  x102 = sc[6] * x3;
  x991 = 5710000.0 * sc[7] * exp(379.92858268256299 * invT);
  x358 = 100000000.0 * sc[16] * x81;
  x1011 = sc[9] * exp(-754.82499870708 * invT);
  x818 = 128000.0 * x35 * exp(-618.95649893980499 * invT - 2.34 * tc[0]);
  x489 = -0.29097730287517898 * x174 + 0.43429448190325198 * log(x818) - 0.4;
  x372 = -0.55155399201712996 * x174 - 0.14 * x489 + 0.75;
  x1024 = exp(
    M_LN10 * (0.43429448190325198 * x174 /
              (1.0 + ((x489) * (x489)) / ((x372) * (x372)))));
  x1026 = x1024 * exp(-618.95649893980499 * invT - 3.14 * tc[0]) / (x818 + 1.0);
  x695 = 3200000000000000.0 * sc[2] * x1026 * x35;
  x1034 = 110.7 * exp(
                    g_RT[2] - g_RT[6] - g_RT_qss[1] + g_RT_qss[2] -
                    840.37183189388202 * invT + 1.79 * tc[0]);
  x1035 = sc[2] * x1034;
  x1041 = 16000000.0 * sc[7] * x77;
  x1047 = 20000000.0 * sc[20] * exp(-3019.29999482832 * invT);
  x1048 = exp(286.83349950869001 * invT);
  x1051 = 12000000.0 * sc[10] * x1048;
  x1052 = 0.5 * sc[6] * exp(-3638.25649376812 * invT + 2.0 * tc[0]);
  x1053 = 60000000.0 * sc[6] * x12;
  x406 = 1750000.0 * exp(
                       g_RT[17] - g_RT[24] - g_RT[3] + g_RT_qss[2] -
                       679.34249883637199 * invT);
  x628 = sc[17] * x406;
  x1058 = -110.707666477038 * invT + 1.83 * tc[0];
  x459 = 0.384 * exp(g_RT[13] - g_RT[20] - g_RT[3] + g_RT_qss[2] + x1058);
  x1063 = sc[13] * x459;
  x259 = 4.08 * exp(
                  g_RT[16] - g_RT[18] - g_RT[3] + g_RT_qss[2] -
                  956.11166502896697 * invT + 2.0 * tc[0]);
  x261 = sc[16] * x259;
  x161 = 11.3 * exp(
                  g_RT_qss[1] - g_RT_qss[2] - 1509.64999741416 * invT +
                  2.0 * tc[0] - x85);
  x29 = sc[7] * x161;
  x60 = 11.3 * sc[4] * exp(-1509.64999741416 * invT + 2.0 * tc[0]);
  x169 = 56.0 * exp(
                  -g_RT[10] + g_RT_qss[2] - 2727.4343286615799 * invT +
                  1.6 * tc[0] - x85);
  x281 = sc[7] * x169;
  x296 = 25010000.0 * sc[7] * x87;
  x108 = -44670.543423485004 * invT + 0.44 * tc[0];
  x39 = 8.75e+31 * x35 * exp(-x108 + x39);
  x185 = -0.29097730287517898 * x45 + 0.43429448190325198 * log(x39) - 0.4;
  x191 = -0.14 * x185 - 0.55155399201712996 * x45 + 0.75;
  x228 = exp(
    M_LN10 * (0.43429448190325198 * x45 /
              (((x185) * (x185)) / ((x191) * (x191)) + 1.0)));
  x253 =
    exp(-94921.759670744301 * invT - 8.87 * tc[0] - x108 + x38) / (x39 + 1.0);
  x264 = 7.0e+44 * refCinv * sc[6] * x228 * x253 * x35;
  x269 = -0.29097730287517898 * x97 +
         0.43429448190325198 * log(1.35e+19 * x91 * x92) - 0.4;
  x223 = -0.14 * x269 - 0.55155399201712996 * x97 + 0.75;
  x114 = exp(
           M_LN10 * (0.43429448190325198 * x97 /
                     (1.0 + ((x269) * (x269)) / ((x223) * (x223))))) /
         (1.35e+19 * x91 * x92 + 1.0);
  x302 = sc[7] * x114 * x94;
  x48 = -4161.6018262050302 * invT + 2.0 * tc[0];
  x314 = 4.92 * sc[11] * exp(x48);
  x319 = 40000000.0 * sc[22] * exp(276.769166192596 * invT);
  x332 = 32000000.0 * sc[11] * x1048;
  x336 = 2.46 * sc[11] * exp(x48);
  x340 = 16000000.0 * sc[11] * x1048;
  x344 = 50000000.0 * sc[11] * x65;
  x558 = 3400000.0 * sc[17] * exp(-347.21949940525701 * invT);
  x569 = -0.29097730287517898 * x212 +
         0.43429448190325198 * log(538000000.0 * x35 * exp(x206)) - 0.4;
  x600 = -0.55155399201712996 * x212 - 0.14 * x569 + 0.75;
  x27 = exp(
          M_LN10 * (0.43429448190325198 * x212 /
                    (((x569) * (x569)) / ((x600) * (x600)) + 1.0))) /
        (538000000.0 * x35 * exp(x206) + 1.0);
  x371 = sc[16] * x209 * x27;
  x525 = -2269.50716277929 * invT + 0.5 * tc[0];
  x145 = 3320987654320990.0 * x35 * exp(x145 - x525);
  x681 = -0.29097730287517898 * x150 + 0.43429448190325198 * log(x145) - 0.4;
  x708 = -0.55155399201712996 * x150 - 0.14 * x681 + 0.75;
  x771 = exp(
    M_LN10 * (0.43429448190325198 * x150 /
              (((x681) * (x681)) / ((x708) * (x708)) + 1.0)));
  x316 =
    x771 * exp(-5839.82940666378 * invT - 4.61 * tc[0] - x525) / (x145 + 1.0);
  x627 = 2.69e+21 * sc[16] * x316 * x35;
  x775 = -25009.868290494604 * invT - 0.64 * tc[0];
  x288 = 3.0625e-6 * x21 * exp(528.37749909489867 * invT - 0.12 * tc[0]) + 1.0;
  x988 = 2450000000.0 * x21 * exp(x22 + x775) / x288;
  const amrex::Real x1694 = -402.57333264377598 * invT - 2.0 * tc[0];
  const amrex::Real x1696 = x104 * exp(x1694);
  const amrex::Real x1699 = -g_RT[3] - x375;
  const amrex::Real x1700 = kf_qss[6] * refC * sc[33] / x373;
  const amrex::Real x1701 = x1700 * exp(x1694 + x1699);
  const amrex::Real x1706 = x104 * exp(-178.641916360675 * invT);
  const amrex::Real x1710 = x1700 * exp(-178.641916360675 * invT + x1699);
  const amrex::Real x1714 =
    20000000.0 * exp(g_RT[16] + g_RT[1] - g_RT[32] - g_RT[36]);
  const amrex::Real x1718 = 27000000.0 * sc[32] * exp(-178.641916360675 * invT);
  const amrex::Real x1722 = 3800000000000.0 * sc[36] * exp(x1694);
  const amrex::Real x1725 = -x104 * x1718 - x104 * x1722;
  const amrex::Real x1726 =
    3800000000000.0 * exp(g_RT[17] + g_RT[1] - g_RT[36] - g_RT_qss[5] + x1694);
  const amrex::Real x1730 =
    27000000.0 *
    exp(g_RT[1] - g_RT[32] + g_RT[3] - g_RT_qss[5] - 178.641916360675 * invT);
  const amrex::Real x1755 = 27000000.0 * sc[32] * x1710;
  const amrex::Real x1757 = 3800000000000.0 * sc[36] * x1701;
  const amrex::Real x1763 =
    -7600000000000.0 * sc[36] * x1696 - 7600000000000.0 * sc[36] * x1701;
  const amrex::Real x1767 =
    -54000000.0 * sc[32] * x1706 - 54000000.0 * sc[32] * x1710;
  const amrex::Real x1777 = x1725 - x1755 - x1757;
  x602 = x602 / x373;
  const amrex::Real x1855 = 110000000.0 * sc[6] * x235;
  const amrex::Real x1862 =
    x1024 * exp(-618.95649893980499 * invT - 3.14 * tc[0] + x496) /
    (x818 + 1.0);
  const amrex::Real x1863 = refC * sc[10] * x1862;
  const amrex::Real x1869 =
    x249 * ((x489) * (x489)) / ((x372) * (x372) * (x372));
  const amrex::Real x1870 =
    0.196 * x1869 + 1.4 * x249 * x489 / ((x372) * (x372));
  x174 = x174 / ((1.0 + ((x489) * (x489)) / ((x372) * (x372))) *
                 (1.0 + ((x489) * (x489)) / ((x372) * (x372))));
  const amrex::Real x1874 = 3200000000000000.0 * refC * x174 * x1862 * x500;
  x200 = (-sc_qss[1] * x200 + x544) / x203;
  x203 = sc[2] * x1026 * x200;
  x544 = x1024 / ((x818 + 1.0) * (x818 + 1.0));
  x496 = refC * x500 * exp(-1237.91299787961 * invT - 5.48 * tc[0] + x496);
  x818 = exp(-tc[0]);
  x1024 = -2.0 * g_RT[2] + g_RT[6];
  const amrex::Real x1895 = refC * sc[6] * exp(-tc[0] + x1024);
  const amrex::Real x1899 =
    sc[2] * x200 * x35 * exp(-1237.91299787961 * invT - 5.48 * tc[0]);
  const amrex::Real x1903 =
    3200000000000000.0 * sc[2] * x1026 * x174 * x200 * x35;
  const amrex::Real x1907 = -193.738416334817 * invT - x369 - x387;
  const amrex::Real x1909 = sc[2] * x1700 * exp(x1699 + x1907);
  const amrex::Real x1913 = sc[2] * x104 * exp(x1907);
  const amrex::Real x1920 =
    -g_RT[2] + g_RT[4] - 181.15799968969901 * invT - x362;
  const amrex::Real x1922 = x104 * exp(x1920);
  const amrex::Real x1925 = x1700 * exp(x1699 + x1920);
  const amrex::Real x1928 = -3003.0964181894101 * invT - 12.0 * tc[0];
  amrex::Real x1932 =
    log(exp(-0.00091190953857377404 * tc[1]) + exp(-6859.5 * invT));
  amrex::Real x1933 = -0.29097730287517898 * x1932 +
                      0.43429448190325198 * log(6.65e+39 * x35 * exp(x1928)) -
                      0.4;
  amrex::Real x1934 = -0.55155399201712996 * x1932 - 0.14 * x1933 + 0.75;
  const amrex::Real x1940 =
    exp(
      M_LN10 * (0.43429448190325198 * x1932 /
                (((x1933) * (x1933)) / ((x1934) * (x1934)) + 1.0))) /
    (6.65e+39 * x35 * exp(x1928) + 1.0);
  const amrex::Real x1946 =
    2.2612923285657754e-80 *
    exp(
      M_LN10 * (0.43429448190325198 * x1932 /
                (((x1933) * (x1933)) / ((x1934) * (x1934)) + 1.0))) /
    ((x35 * exp(x1928) + 1.5037593984962406e-40) *
     (x35 * exp(x1928) + 1.5037593984962406e-40));
  const amrex::Real x1951 = sc[29] * x503 *
                            exp(
                              -g_RT[28] + g_RT[29] - g_RT[2] -
                              6006.1928363788102 * invT - 24.0 * tc[0]);
  const amrex::Real x1954 = exp(-g_RT[28] + g_RT[29] - g_RT[2] + x1928);
  const amrex::Real x1959 = ((x1933) * (x1933)) / ((x1934) * (x1934) * (x1934));
  const amrex::Real x1960 = x1933 / ((x1934) * (x1934));
  x1932 = x1932 / ((((x1933) * (x1933)) / ((x1934) * (x1934)) + 1.0) *
                   (((x1933) * (x1933)) / ((x1934) * (x1934)) + 1.0));
  x1933 = x1932 * (0.196 * x1959 * x249 + 1.4 * x1960 * x249);
  x1934 = 1.33e+48 * x1940 * x1954 * x503;
  const amrex::Real x1968 =
    sc[28] * sc[2] * x35 * exp(-6006.1928363788102 * invT - 24.0 * tc[0]);
  const amrex::Real x1971 = 1.33e+48 * x1940 * x35 * exp(x1928);
  const amrex::Real x1975 =
    9.31e+47 * refC * sc[29] * x1940 * x1954 + 50000000.0 * sc[20] * x289 -
    50000000.0 * sc[20] * x315 + sc[28] * sc[2] * x1933 * x1971 -
    9.31e+47 * sc[28] * sc[2] * x1940 * exp(x1928) - sc[29] * x1933 * x1934 -
    x1047 * x359 + x1047 * x368 - 6.19115e+87 * x1946 * x1951 +
    6.19115e+87 * x1946 * x1968;
  amrex::Real x1982 =
    log(exp(-0.00076335877862595397 * tc[1]) + exp(-48097.0 * invT));
  amrex::Real x1984 =
    4.7067669172932297e+19 * x35 * exp(-1881.67807844359 * invT - 6.66 * tc[0]);
  amrex::Real x1985 =
    -0.29097730287517898 * x1982 + 0.43429448190325198 * log(x1984) - 0.4;
  amrex::Real x1986 = -0.55155399201712996 * x1982 - 0.14 * x1985 + 0.75;
  amrex::Real x1990 = exp(
    M_LN10 * (0.43429448190325198 * x1982 /
              (((x1985) * (x1985)) / ((x1986) * (x1986)) + 1.0)));
  const amrex::Real x1994 = sc[29] * sc[2] * x1990 *
                            exp(-3522.5166606330399 * invT - 6.66 * tc[0]) /
                            (x1984 + 1.0);
  const amrex::Real x1996 = x1990 / ((x1984 + 1.0) * (x1984 + 1.0));
  const amrex::Real x2001 =
    sc[30] * x503 *
    exp(
      -g_RT[29] - g_RT[2] + g_RT[30] - 5404.19473907663 * invT - 13.32 * tc[0]);
  const amrex::Real x2005 = ((x1985) * (x1985)) / ((x1986) * (x1986) * (x1986));
  const amrex::Real x2006 = x1985 / ((x1986) * (x1986));
  x1982 = x1982 / ((((x1985) * (x1985)) / ((x1986) * (x1986)) + 1.0) *
                   (((x1985) * (x1985)) / ((x1986) * (x1986)) + 1.0));
  x1985 = x1982 * (0.196 * x2005 * x249 + 1.4 * x2006 * x249);
  x1986 = x1990 *
          exp(
            -g_RT[29] - g_RT[2] + g_RT[30] - 3522.5166606330399 * invT -
            6.66 * tc[0]) /
          (x1984 + 1.0);
  const amrex::Real x2011 = 6.26e+26 * x1986 * x503;
  const amrex::Real x2014 =
    sc[29] * sc[2] * x35 * exp(-5404.19473907663 * invT - 13.32 * tc[0]);
  const amrex::Real x2018 = 6.26e+26 * x1994 * x35;
  const amrex::Real x2021 = refC * sc[30] * x1986;
  const amrex::Real x2023 =
    -sc[30] * x1985 * x2011 + x1985 * x2018 - 4.382e+26 * x1994 -
    2.0625052631578899e+46 * x1996 * x2001 +
    2.0625052631578899e+46 * x1996 * x2014 + 4.382e+26 * x2021;
  const amrex::Real x2027 = x92 * exp(-1522.2304140592801 * invT - 4.0 * tc[0]);
  amrex::Real x2029 = log(
    0.1098 * exp(-0.0069444444444444397 * tc[1]) +
    0.8902 * exp(-0.000352360817477097 * tc[1]) + exp(-45569.0 * invT));
  amrex::Real x2030 = -0.29097730287517898 * x2029 +
                      0.43429448190325198 * log(1720000000.0 * x2027) - 0.4;
  amrex::Real x2032 = -0.55155399201712996 * x2029 - 0.14 * x2030 + 0.75;
  const amrex::Real x2037 =
    exp(
      M_LN10 * (0.43429448190325198 * x2029 /
                (((x2030) * (x2030)) / ((x2032) * (x2032)) + 1.0))) /
    (1720000000.0 * x2027 + 1.0);
  const amrex::Real x2040 =
    sc[2] * exp(-1522.2304140592801 * invT - 4.0 * tc[0]);
  const amrex::Real x2042 =
    3.3802055164954029e-19 *
    exp(
      M_LN10 * (0.43429448190325198 * x2029 /
                (((x2030) * (x2030)) / ((x2032) * (x2032)) + 1.0))) /
    ((x2027 + 5.813953488372093e-10) * (x2027 + 5.813953488372093e-10));
  const amrex::Real x2045 =
    sc[15] * x426 *
    exp(
      -g_RT[14] + g_RT[15] - g_RT[2] - 3044.4608281185501 * invT - 8.0 * tc[0]);
  x2029 = x2029 / ((((x2030) * (x2030)) / ((x2032) * (x2032)) + 1.0) *
                   (((x2030) * (x2030)) / ((x2032) * (x2032)) + 1.0));
  amrex::Real x2053 =
    x2029 * (0.121602454932911 * ((x2030) * (x2030)) /
               (((x2032) * (x2032) * (x2032)) * x92) +
             0.86858896380650397 * x2030 / (((x2032) * (x2032)) * x92));
  const amrex::Real x2054 = exp(
    -g_RT[14] + g_RT[15] - g_RT[2] - 1522.2304140592801 * invT - 4.0 * tc[0]);
  const amrex::Real x2055 = 8.6e+16 * x2037 * x2054 * x426;
  const amrex::Real x2058 = 8.6e+16 * sc[14] * x2027 * x2037;
  const amrex::Real x2062 =
    sc[14] * sc[2] * x92 * exp(-3044.4608281185501 * invT - 8.0 * tc[0]);
  const amrex::Real x2067 =
    -8.6e+16 * sc[14] * x2037 * x2040 - sc[15] * x2053 * x2055 +
    sc[2] * x2053 * x2058 + 8.6e+16 * x2037 * x2054 * x607 -
    1.4792e+26 * x2042 * x2045 + 1.4792e+26 * x2042 * x2062;
  amrex::Real x2071 = -18643.271678066401 * invT + 1.62 * tc[0];
  x15 = 3.0 * sc[18] + 3.0 * sc[20] + x14 + x15 + x32;
  const amrex::Real x2075 =
    6645077720207.25 * x15 *
    exp(-18014.512518476698 * invT - 3.4 * tc[0] - x2071);
  amrex::Real x2076 = log(
    exp(0.0795 * invT) + 1.9816 * exp(-0.23292648840026101 * tc[1]) -
    0.9816 * exp(-0.000185745862510913 * tc[1]));
  amrex::Real x2077 =
    -0.29097730287517898 * x2076 + 0.43429448190325198 * log(x2075) - 0.4;
  amrex::Real x2078 = -0.55155399201712996 * x2076 - 0.14 * x2077 + 0.75;
  amrex::Real x2082 = exp(
    M_LN10 * (0.43429448190325198 * x2076 /
              (((x2077) * (x2077)) / ((x2078) * (x2078)) + 1.0)));
  const amrex::Real x2087 =
    exp(-36657.7841965431 * invT - 1.78 * tc[0] - x2071) / (x2075 + 1.0);
  const amrex::Real x2088 = sc[19] * x2082 * x2087;
  const amrex::Real x2091 = x15 / ((x2075 + 1.0) * (x2075 + 1.0));
  const amrex::Real x2093 =
    sc[19] * x2082 * exp(-54672.296715019897 * invT - 5.18 * tc[0] - 2 * x2071);
  const amrex::Real x2098 =
    sc[18] * x2082 * x994 *
    exp(
      g_RT[18] - g_RT[19] + g_RT[2] - 54672.296715019897 * invT - 5.18 * tc[0] -
      2 * x2071);
  const amrex::Real x2106 = 0.43429448190325198 * ((x2077) * (x2077)) /
                            (x15 * ((x2078) * (x2078) * (x2078)));
  const amrex::Real x2108 =
    0.43429448190325198 * x2077 / (x15 * ((x2078) * (x2078)));
  x2076 = x2076 / ((((x2077) * (x2077)) / ((x2078) * (x2078)) + 1.0) *
                   (((x2077) * (x2077)) / ((x2078) * (x2078)) + 1.0));
  const amrex::Real x2113 = 2.565e+21 * x15 * x2076 * x2088;
  const amrex::Real x2116 = 2.565e+21 * x15 * x2082;
  x2071 = exp(
    g_RT[18] - g_RT[19] + g_RT[2] - 36657.7841965431 * invT - 1.78 * tc[0] -
    x2071);
  const amrex::Real x2118 = sc[18] * x2071 / (x2075 + 1.0);
  const amrex::Real x2121 = x2076 * x2116 * x2118 * x994;
  const amrex::Real x2124 = x2082 * x2118 * x994;
  const amrex::Real x2126 =
    50000000.0 * sc[10] * x647 - 50000000.0 * sc[10] * x669 +
    1.7955e+21 * x2088 - 1.1931237046632101e+34 * x2091 * x2093 +
    1.1931237046632101e+34 * x2091 * x2098 -
    x2113 * (0.196 * x2106 + 1.4 * x2108) +
    x2121 * (0.196 * x2106 + 1.4 * x2108) - 1.7955e+21 * x2124;
  amrex::Real x2130 = log(
    0.663 * exp(-0.00058582308142940799 * tc[1]) +
    0.337 * exp(-0.0003125 * tc[1]) + exp(-4131.0 * invT));
  amrex::Real x2134 = 1.1515151515151501e+21 * x15 *
                      exp(-1710.9366637360399 * invT - 7.58 * tc[0]);
  amrex::Real x2135 =
    -0.29097730287517898 * x2130 + 0.43429448190325198 * log(x2134) - 0.4;
  amrex::Real x2137 = -0.55155399201712996 * x2130 - 0.14 * x2135 + 0.75;
  const amrex::Real x2142 =
    exp(
      M_LN10 * (0.43429448190325198 * x2130 /
                (((x2135) * (x2135)) / ((x2137) * (x2137)) + 1.0))) /
    ((x2134 + 1.0) * (x2134 + 1.0));
  const amrex::Real x2148 = refC * sc[25] * x15 *
                            exp(
                              -g_RT[24] + g_RT[25] - g_RT[2] -
                              7699.2149868121596 * invT - 15.22 * tc[0]);
  const amrex::Real x2151 = -5988.2783230761797 * invT - 7.64 * tc[0];
  const amrex::Real x2153 = sc[24] * exp(x2151);
  x2134 = exp(
            M_LN10 * (0.43429448190325198 * x2130 /
                      (((x2135) * (x2135)) / ((x2137) * (x2137)) + 1.0))) /
          (x2134 + 1.0);
  const amrex::Real x2158 = 3.8e+29 * sc[2] * x15 * x2134 * x2153;
  const amrex::Real x2162 =
    0.43429448190325198 * x2135 / (x15 * ((x2137) * (x2137)));
  const amrex::Real x2164 = 0.43429448190325198 * ((x2135) * (x2135)) /
                            (x15 * ((x2137) * (x2137) * (x2137)));
  x2130 = x2130 / ((((x2135) * (x2135)) / ((x2137) * (x2137)) + 1.0) *
                   (((x2135) * (x2135)) / ((x2137) * (x2137)) + 1.0));
  const amrex::Real x2166 = x2130 * (1.4 * x2162 + 0.196 * x2164);
  const amrex::Real x2169 =
    refC * sc[25] * exp(-g_RT[24] + g_RT[25] - g_RT[2] + x2151);
  const amrex::Real x2170 = x2134 * x2169;
  const amrex::Real x2174 = 3.8e+29 * x15 * x2170;
  const amrex::Real x2177 = sc[2] * x2134 * x2153;
  const amrex::Real x2179 =
    sc[24] * sc[2] * x15 * exp(-7699.2149868121596 * invT - 15.22 * tc[0]);
  const amrex::Real x2184 =
    20000000.0 * sc[4] * x311 - 3.0630303030303001e+50 * x2142 * x2148 +
    3.0630303030303001e+50 * x2142 * x2179 + x2158 * x2166 - x2166 * x2174 +
    2.66e+29 * x2170 - 2.66e+29 * x2177 + x266 * x676 - x376 * x676;
  amrex::Real x2188 = 3.8195777351247603e+17 * x35 *
                      exp(-2568.9210789330928 * invT - 6.09 * tc[0]);
  amrex::Real x2189 = log(
    0.1578 * exp(-0.008 * tc[1]) + 0.8422 * exp(-0.000450653447498873 * tc[1]) +
    exp(-6882.0 * invT));
  amrex::Real x2190 =
    -0.29097730287517898 * x2189 + 0.43429448190325198 * log(x2188) - 0.4;
  amrex::Real x2194 =
    1.7777777777777777 * ((x2190) * (x2190)) /
      ((-0.73540532268950665 * x2189 - 0.18666666666666668 * x2190 + 1) *
       (-0.73540532268950665 * x2189 - 0.18666666666666668 * x2190 + 1)) +
    1.0;
  const amrex::Real x2197 =
    exp(M_LN10 * (0.43429448190325198 * x2189 / x2194)) / (x2188 + 1.0);
  const amrex::Real x2201 = -3364.0034109045528 * invT - 7.08 * tc[0];
  const amrex::Real x2202 = exp(-g_RT[21] + g_RT[22] - g_RT[2] + x2201);
  const amrex::Real x2205 = refC * sc[22] * x2197 * x2202;
  amrex::Real x2208 =
    1.7777777777777777 * x2190 /
    ((-0.73540532268950665 * x2189 - 0.18666666666666668 * x2190 + 1) *
     (-0.73540532268950665 * x2189 - 0.18666666666666668 * x2190 + 1));
  x2190 = 2.3703703703703702 * ((x2190) * (x2190)) /
          ((-0.73540532269 * x2189 - 0.18666666666666668 * x2190 + 1) *
           (-0.73540532269 * x2189 - 0.18666666666666668 * x2190 + 1) *
           (-0.73540532269 * x2189 - 0.18666666666666668 * x2190 + 1));
  const amrex::Real x2210 = 0.196 * x2190 * x249 + 1.4 * x2208 * x249;
  const amrex::Real x2215 = 1.99e+29 * refC * sc[22] * x2189 * x2197 * x2202 *
                            x35 / ((x2194) * (x2194));
  const amrex::Real x2219 = sc[21] * sc[2] * exp(x2201);
  const amrex::Real x2223 =
    1.99e+29 * x2189 * x2197 * x2219 * x35 / ((x2194) * (x2194));
  x2188 = exp(M_LN10 * (0.43429448190325198 * x2189 / x2194)) * x35 /
          ((x2188 + 1.0) * (x2188 + 1.0));
  x2189 = refC * sc[22] *
          exp(
            -g_RT[21] + g_RT[22] - g_RT[2] - 5932.9244898376455 * invT -
            13.17 * tc[0]);
  x2194 = sc[21] * sc[2] * exp(-5932.9244898376455 * invT - 13.17 * tc[0]);
  const amrex::Real x2233 = -5.32067178502879e+46 * x2188 * x2189 +
                            5.32067178502879e+46 * x2188 * x2194 -
                            1.393e+29 * x2197 * x2219 + 1.393e+29 * x2205 -
                            x2210 * x2215 + x2210 * x2223;
  const amrex::Real x2234 =
    15000000.0 * sc[3] * x289 - 15000000.0 * sc[3] * x315;
  amrex::Real x2236 = log(
    0.2176 * exp(-0.0036900369003690001 * tc[1]) +
    0.7824 * exp(-0.00036297640653357502 * tc[1]) + exp(-6570.0 * invT));
  amrex::Real x2240 =
    1238532.11009174 * x35 * exp(-847.92008188095303 * invT - 3.05 * tc[0]);
  amrex::Real x2241 =
    -0.29097730287517898 * x2236 + 0.43429448190325198 * log(x2240) - 0.4;
  amrex::Real x2243 = -0.55155399201712996 * x2236 - 0.14 * x2241 + 0.75;
  const amrex::Real x2248 =
    exp(
      M_LN10 * (0.43429448190325198 * x2236 /
                (((x2241) * (x2241)) / ((x2243) * (x2243)) + 1.0))) /
    (x2240 + 1.0);
  const amrex::Real x2249 = -717.08374877172594 * invT - 2.57 * tc[0];
  const amrex::Real x2253 = sc[12] * sc[2] * x2248 * exp(x2249);
  const amrex::Real x2256 = x2241 / ((x2243) * (x2243));
  const amrex::Real x2257 = ((x2241) * (x2241)) / ((x2243) * (x2243) * (x2243));
  const amrex::Real x2258 =
    x2236 / ((((x2241) * (x2241)) / ((x2243) * (x2243)) + 1.0) *
             (((x2241) * (x2241)) / ((x2243) * (x2243)) + 1.0));
  const amrex::Real x2259 = x2258 * (1.4 * x2256 * x249 + 0.196 * x2257 * x249);
  amrex::Real x2262 = exp(-g_RT[12] + g_RT[13] - g_RT[2] + x2249);
  const amrex::Real x2264 = 1350000000000.0 * x2248 * x2262 * x503;
  x2236 = exp(
            M_LN10 * (0.43429448190325198 * x2236 /
                      (((x2241) * (x2241)) / ((x2243) * (x2243)) + 1.0))) /
          ((x2240 + 1.0) * (x2240 + 1.0));
  x2240 = sc[12] * sc[2] * x35 * exp(-1565.003830652674 * invT - 5.62 * tc[0]);
  x2241 =
    sc[13] * x503 *
    exp(
      -g_RT[12] + g_RT[13] - g_RT[2] - 1565.003830652674 * invT - 5.62 * tc[0]);
  x2243 = refC * sc[13] * x2248 * x2262;
  const amrex::Real x2282 = 1350000000000.0 * x2253 * x35;
  const amrex::Real x2285 =
    -sc[13] * x2259 * x2264 - 80000000.0 * sc[3] * x359 +
    80000000.0 * sc[3] * x368 + 30000000.0 * sc[4] * x266 -
    30000000.0 * sc[4] * x376 + 1.1704128440366999e+18 * x2236 * x2240 -
    1.1704128440366999e+18 * x2236 * x2241 + 945000000000.0 * x2243 -
    945000000000.0 * x2253 + x2259 * x2282;
  amrex::Real x2286 = log(0.5 + 0.5 * exp(-1.0e+30 * tc[1]));
  amrex::Real x2288 = 0.4 * sc[0] + sc[10] + sc[11] + sc[12] + sc[13] + sc[14] +
                      sc[15] + 1.09 * sc[16] + 2.18 * sc[17] + sc[18] + sc[19] +
                      sc[1] + sc[20] + sc[21] + sc[22] + sc[23] + sc[24] +
                      sc[25] + sc[26] + sc[27] + sc[28] + sc[29] + sc[2] +
                      sc[30] + sc[31] + sc[32] + sc[33] + sc[34] + sc[35] +
                      sc[36] + sc[37] + sc[3] + sc[4] + sc[5] + sc[6] +
                      11.89 * sc[7] + sc[8] + 0.85 * sc[9];
  amrex::Real x2290 =
    -0.29097730287517898 * x2286 +
    0.43429448190325198 * log(12.369038311180599 * x2288 * exp(-1.84 * tc[0])) -
    0.4;
  amrex::Real x2291 = -0.55155399201712996 * x2286 - 0.14 * x2290 + 0.75;
  const amrex::Real x2297 =
    exp(
      M_LN10 * (0.43429448190325198 * x2286 /
                (((x2290) * (x2290)) / ((x2291) * (x2291)) + 1.0))) /
    (12.369038311180599 * x2288 * exp(-1.84 * tc[0]) + 1.0);
  amrex::Real x2299 = -g_RT[5] + g_RT[9];
  const amrex::Real x2303 = exp(-g_RT[2] - 1.4 * tc[0] - x2299);
  const amrex::Real x2305 = refC * sc[5] * x2303;
  const amrex::Real x2311 = 0.43429448190325198 * ((x2290) * (x2290)) /
                            (x2288 * ((x2291) * (x2291) * (x2291)));
  const amrex::Real x2312 =
    0.43429448190325198 * x2290 / (x2288 * ((x2291) * (x2291)));
  const amrex::Real x2315 = 63280000.0 * x2288 * x2297;
  const amrex::Real x2316 = x2286 * x2315 /
                            ((((x2290) * (x2290)) / ((x2291) * (x2291)) + 1.0) *
                             (((x2290) * (x2290)) / ((x2291) * (x2291)) + 1.0));
  x2286 = 0.0065362421105963058 *
          exp(
            M_LN10 * (0.43429448190325198 * x2286 /
                      (((x2290) * (x2290)) / ((x2291) * (x2291)) + 1.0))) *
          x2288 /
          ((x2288 * exp(-1.84 * tc[0]) + 0.080847029077117646) *
           (x2288 * exp(-1.84 * tc[0]) + 0.080847029077117646));
  const amrex::Real x2322 = refC * sc[5] * exp(-g_RT[2] - 3.24 * tc[0] - x2299);
  const amrex::Real x2324 = exp(-1.4 * tc[0]);
  const amrex::Real x2326 = sc[2] * sc[9] * x2324;
  const amrex::Real x2333 =
    313085097.732604 * sc[2] * sc[9] * x2286 * exp(-3.24 * tc[0]) -
    313085097.732604 * x2286 * x2322 + 25312000.0 * x2297 * x2305 -
    25312000.0 * x2297 * x2326 - x2305 * x2316 * (0.112 * x2311 + 0.8 * x2312) +
    x2316 * x2326 * (0.112 * x2311 + 0.8 * x2312);
  amrex::Real x2339 =
    230263157894.737 * x15 * exp(-1529.778664046348 * invT - 4.13 * tc[0]);
  amrex::Real x2340 = log(
    0.218 * exp(-0.0048192771084337397 * tc[1]) +
    0.782 * exp(-0.000375516334960571 * tc[1]) + exp(-6095.0 * invT));
  amrex::Real x2341 =
    -0.29097730287517898 * x2340 + 0.43429448190325198 * log(x2339) - 0.4;
  amrex::Real x2343 = -0.55155399201712996 * x2340 - 0.14 * x2341 + 0.75;
  const amrex::Real x2348 =
    exp(
      M_LN10 * (0.43429448190325198 * x2340 /
                (((x2341) * (x2341)) / ((x2343) * (x2343)) + 1.0))) /
    (x2339 + 1.0);
  amrex::Real x2349 = -1670.679330471668 * invT - 3.86 * tc[0];
  const amrex::Real x2352 = sc[19] * sc[2] * exp(x2349);
  const amrex::Real x2358 =
    0.43429448190325198 * x2341 / (x15 * ((x2343) * (x2343)));
  const amrex::Real x2360 = 0.43429448190325198 * ((x2341) * (x2341)) /
                            (x15 * ((x2343) * (x2343) * (x2343)));
  amrex::Real x2362 =
    x2340 / ((((x2341) * (x2341)) / ((x2343) * (x2343)) + 1.0) *
             (((x2341) * (x2341)) / ((x2343) * (x2343)) + 1.0));
  const amrex::Real x2364 = 1.4e+18 * x2348 * exp(x2349);
  const amrex::Real x2367 = sc[19] * sc[2] * x15 * x2362 * x2364;
  x2339 = exp(
            M_LN10 * (0.43429448190325198 * x2340 /
                      (((x2341) * (x2341)) / ((x2343) * (x2343)) + 1.0))) /
          ((x2339 + 1.0) * (x2339 + 1.0));
  x2340 = refC * sc[20] * x15 *
          exp(
            -g_RT[19] + g_RT[20] - g_RT[2] - 3200.4579945180158 * invT -
            7.99 * tc[0]);
  x2349 = refC * exp(-g_RT[19] + g_RT[20] - g_RT[2] + x2349);
  const amrex::Real x2378 = sc[20] * x2349;
  const amrex::Real x2381 = 1.4e+18 * x15 * x2348 * x2362 * x2378;
  const amrex::Real x2386 =
    sc[19] * sc[2] * x15 * exp(-3200.4579945180158 * invT - 7.99 * tc[0]);
  const amrex::Real x2389 =
    30000000.0 * sc[10] * x266 - 30000000.0 * sc[10] * x376 + x1053 * x311 -
    2.25657894736842e+29 * x2339 * x2340 +
    2.25657894736842e+29 * x2339 * x2386 - 9.8e+17 * x2348 * x2352 +
    9.8e+17 * x2348 * x2378 + x2367 * (1.4 * x2358 + 0.196 * x2360) -
    x2381 * (1.4 * x2358 + 0.196 * x2360);
  amrex::Real x2399 =
    4074074074074.07 * x92 * exp(-1489.5213307819699 * invT - 5.254 * tc[0]);
  amrex::Real x2401 = log(
    0.242 * exp(-0.010638297872340399 * tc[1]) +
    0.758 * exp(-0.00064308681672025703 * tc[1]) + exp(-4200.0 * invT));
  amrex::Real x2402 =
    -0.29097730287517898 * x2401 + 0.43429448190325198 * log(x2399) - 0.4;
  amrex::Real x2404 = -0.55155399201712996 * x2401 - 0.14 * x2402 + 0.75;
  const amrex::Real x2409 =
    exp(
      M_LN10 * (0.43429448190325198 * x2401 /
                (((x2402) * (x2402)) / ((x2404) * (x2404)) + 1.0))) /
    ((x2399 + 1.0) * (x2399 + 1.0));
  const amrex::Real x2411 =
    sc[13] * sc[2] * x92 * exp(-4287.4059926562095 * invT - 10.054 * tc[0]);
  const amrex::Real x2415 =
    0.43429448190325198 * x2402 / (((x2404) * (x2404)) * x92);
  const amrex::Real x2416 = 0.43429448190325198 * ((x2402) * (x2402)) /
                            (((x2404) * (x2404) * (x2404)) * x92);
  amrex::Real x2418 =
    x2401 / ((((x2402) * (x2402)) / ((x2404) * (x2404)) + 1.0) *
             (((x2402) * (x2402)) / ((x2404) * (x2404)) + 1.0));
  const amrex::Real x2421 = -2797.8846618742396 * invT - 4.8 * tc[0];
  amrex::Real x2422 = exp(-g_RT[13] + g_RT[14] - g_RT[2] + x2421);
  x2399 = exp(
            M_LN10 * (0.43429448190325198 * x2401 /
                      (((x2402) * (x2402)) / ((x2404) * (x2404)) + 1.0))) /
          (x2399 + 1.0);
  x2401 = 2.2e+18 * x2399 * x2422 * x426;
  x2402 = sc[14] * x2401 * x2418;
  x2404 = sc[14] * x426 *
          exp(
            -g_RT[13] + g_RT[14] - g_RT[2] - 4287.4059926562095 * invT -
            10.054 * tc[0]);
  const amrex::Real x2435 = sc[13] * sc[2] * exp(x2421);
  const amrex::Real x2437 = 2.2e+18 * x2399 * x92;
  const amrex::Real x2439 = x2418 * x2435 * x2437;
  const amrex::Real x2443 = 2.2e+18 * refC * sc[14] * x2399 * x2422 -
                            2.2e+18 * x2399 * x2435 -
                            x2402 * (2.0 * x2415 + 0.28 * x2416) -
                            8.9629629629629601e+30 * x2404 * x2409 +
                            8.9629629629629601e+30 * x2409 * x2411 +
                            x2439 * (2.0 * x2415 + 0.28 * x2416);
  const amrex::Real x2444 =
    30000000.0 * sc[4] * x289 - 30000000.0 * sc[4] * x315 -
    20000000.0 * sc[4] * x359 + 20000000.0 * sc[4] * x368 + x2443 +
    x266 * x991 - x376 * x991;
  amrex::Real x2451 =
    1.4828090709583e+24 * x35 * exp(-2221.1983628620351 * invT - 8.105 * tc[0]);
  amrex::Real x2452 = log(
    exp(152.4 * invT) + 1.569 * exp(-0.0033444816053511701 * tc[1]) -
    0.569 * exp(-0.000109325461900077 * tc[1]));
  amrex::Real x2453 =
    -0.29097730287517898 * x2452 + 0.43429448190325198 * log(x2451) - 0.4;
  amrex::Real x2456 = -0.55155399201712996 * x2452 - 0.14 * x2453 + 0.75;
  const amrex::Real x2457 = ((x2453) * (x2453)) / ((x2456) * (x2456) * (x2456));
  const amrex::Real x2459 = x2453 / ((x2456) * (x2456));
  const amrex::Real x2460 = 0.196 * x2457 * x249 + 1.4 * x2459 * x249;
  amrex::Real x2462 =
    x2452 / ((((x2453) * (x2453)) / ((x2456) * (x2456)) + 1.0) *
             (((x2453) * (x2453)) / ((x2456) * (x2456)) + 1.0));
  const amrex::Real x2463 = -2903.0569450274247 * invT - 6.642 * tc[0];
  const amrex::Real x2468 =
    exp(
      M_LN10 * (0.43429448190325198 * x2452 /
                (((x2453) * (x2453)) / ((x2456) * (x2456)) + 1.0))) /
    (x2451 + 1.0);
  const amrex::Real x2471 = 2.027e+27 * sc[20] * x2468 * x35 * exp(x2463);
  const amrex::Real x2473 = sc[2] * x2462 * x2471;
  const amrex::Real x2477 = -g_RT[20] + g_RT[21] - g_RT[2];
  const amrex::Real x2481 = refC * sc[21] * x2468 * exp(x2463 + x2477);
  x2451 = exp(
            M_LN10 * (0.43429448190325198 * x2452 /
                      (((x2453) * (x2453)) / ((x2456) * (x2456)) + 1.0))) /
          ((x2451 + 1.0) * (x2451 + 1.0));
  x2452 =
    sc[20] * sc[2] * x35 * exp(-5124.2553078894598 * invT - 14.747 * tc[0]);
  x2453 = refC * sc[21] * x35 *
          exp(-5124.2553078894598 * invT - 14.747 * tc[0] + x2477);
  x2456 = sc[20] * sc[2] * exp(x2463);
  const amrex::Real x2498 = 2.027e+27 * x2462 * x2481 * x35;
  const amrex::Real x2500 =
    -40000000.0 * sc[10] * x359 + 40000000.0 * sc[10] * x368 +
    60000000.0 * sc[11] * x266 - 60000000.0 * sc[11] * x376 + x1051 * x289 -
    x1051 * x315 + 2.10395779078274e+51 * x2451 * x2452 -
    2.10395779078274e+51 * x2451 * x2453 - 1.4189e+27 * x2456 * x2468 +
    x2460 * x2473 - x2460 * x2498 + 1.4189e+27 * x2481;
  const amrex::Real x2502 = sc[2] * sc[3] * x818;
  const amrex::Real x2504 = refC * exp(-g_RT[2] - g_RT[3] + g_RT[4] - tc[0]);
  const amrex::Real x2505 = sc[4] * x2504;
  const amrex::Real x2508 = exp(-2.0 * tc[0]);
  const amrex::Real x2510 = sc[2] * sc[4] * x2508;
  const amrex::Real x2512 = refC * exp(-g_RT[2] - 2.0 * tc[0] - x85);
  const amrex::Real x2513 = sc[7] * x2512;
  amrex::Real x2522 =
    g_RT[16] - 37986.819668266697 * invT - 0.1 * tc[0] - x370 - x387;
  const amrex::Real x2524 = x1700 * x424 * exp(x1699 + x2522);
  const amrex::Real x2529 = x104 * x424 * exp(x2522);
  const amrex::Real x2532 = exp(-8554.6833186802305 * invT - tc[0]);
  const amrex::Real x2536 =
    exp(-g_RT[12] + g_RT[16] + g_RT[2] - 8554.6833186802305 * invT - tc[0]);
  const amrex::Real x2539 =
    187000000000.0 * sc[12] * x2532 - 187000000000.0 * x2536 * x424;
  const amrex::Real x2540 =
    57000000.0 * sc[3] * x266 - 57000000.0 * sc[3] * x376 +
    50000000.0 * sc[4] * x647 - 50000000.0 * sc[4] * x669 + 5810000.0 * x2524 +
    5810000.0 * x2529 + x2539;
  amrex::Real x2546 =
    195039370078.74 * x35 * exp(-1035.1166815603121 * invT - 4.13 * tc[0]);
  amrex::Real x2547 = log(
    0.217 * exp(-0.0135135135135135 * tc[1]) +
    0.783 * exp(-0.00034002040122407302 * tc[1]) + exp(-6964.0 * invT));
  amrex::Real x2548 =
    -0.29097730287517898 * x2547 + 0.43429448190325198 * log(x2546) - 0.4;
  amrex::Real x2551 = -0.55155399201712996 * x2547 - 0.14 * x2548 + 0.75;
  const amrex::Real x2552 = ((x2548) * (x2548)) / ((x2551) * (x2551) * (x2551));
  const amrex::Real x2555 = x2548 / ((x2551) * (x2551));
  const amrex::Real x2558 =
    x2547 / ((((x2548) * (x2548)) / ((x2551) * (x2551)) + 1.0) *
             (((x2548) * (x2548)) / ((x2551) * (x2551)) + 1.0));
  const amrex::Real x2559 = x2558 * (0.196 * x249 * x2552 + 1.4 * x249 * x2555);
  const amrex::Real x2562 =
    exp(
      M_LN10 * (0.43429448190325198 * x2547 /
                (((x2548) * (x2548)) / ((x2551) * (x2551)) + 1.0))) /
    (x2546 + 1.0);
  const amrex::Real x2564 = -1227.8486645635121 * invT - 4.76 * tc[0];
  const amrex::Real x2566 = sc[2] * exp(x2564);
  const amrex::Real x2568 = 2.477e+21 * x2562 * x2566 * x500;
  amrex::Real x2570 = g_RT[10] - g_RT[11];
  const amrex::Real x2572 = exp(-g_RT[2] + x2564 - x2570);
  const amrex::Real x2575 = refC * sc[11] * x2562 * x2572;
  const amrex::Real x2579 = 2.477e+21 * sc[11] * x2562 * x2572 * x503;
  x2546 = exp(
            M_LN10 * (0.43429448190325198 * x2547 /
                      (((x2548) * (x2548)) / ((x2551) * (x2551)) + 1.0))) /
          ((x2546 + 1.0) * (x2546 + 1.0));
  x2547 = sc[11] * x503 *
          exp(-g_RT[2] - 2262.965346123824 * invT - 8.89 * tc[0] - x2570);
  x2548 = sc[10] * x2562 * x2566;
  x2551 = sc[2] * x500 * exp(-2262.965346123824 * invT - 8.89 * tc[0]);
  const amrex::Real x2593 =
    70000000.0 * sc[6] * x289 - 70000000.0 * sc[6] * x315 - x1052 * x359 +
    x1052 * x368 - 3.3817876377952801e+32 * x2546 * x2547 +
    3.3817876377952801e+32 * x2546 * x2551 - 1.7339e+21 * x2548 +
    x2559 * x2568 - x2559 * x2579 + 1.7339e+21 * x2575;
  const amrex::Real x2603 = 33600000.0 * sc[2] * exp(x1907);
  const amrex::Real x2615 = 132000000.0 * sc[4] * exp(x1920);
  const amrex::Real x2617 = -x104 * x2615;
  const amrex::Real x2636 =
    -15000000.0 * sc[3] * x620 + 15000000.0 * sc[3] * x670;
  const amrex::Real x2651 =
    -20000000.0 * sc[4] * x347 - 30000000.0 * sc[4] * x620 +
    30000000.0 * sc[4] * x670 + 20000000.0 * sc[4] * x689 - x374 * x991 +
    x693 * x991;
  const amrex::Real x2658 =
    -40000000.0 * sc[10] * x347 + 40000000.0 * sc[10] * x689 -
    60000000.0 * sc[11] * x374 + 60000000.0 * sc[11] * x693 - x1051 * x620 +
    x1051 * x670;
  const amrex::Real x2661 = -44000000000.0 * x2510 + 44000000000.0 * x2513;
  const amrex::Real x2668 = 8300000.0 * x424 * exp(x2522);
  const amrex::Real x2670 =
    -57000000.0 * sc[3] * x374 + 57000000.0 * sc[3] * x693 +
    50000000.0 * sc[4] * x713 - 50000000.0 * sc[4] * x715 + x2668 * x279;
  amrex::Real x2681 = 0.28 * x249 * x2552 + 2.0 * x249 * x2555;
  const amrex::Real x2687 = 2.477e+21 * refC * sc[11] * x2562 * x2572 -
                            2.477e+21 * sc[10] * x2562 * x2566 -
                            4.83112519685039e+32 * x2546 * x2547 +
                            4.83112519685039e+32 * x2546 * x2551 +
                            x2558 * x2568 * x2681 - x2558 * x2579 * x2681;
  const amrex::Real x2688 = -70000000.0 * sc[6] * x620 +
                            70000000.0 * sc[6] * x670 - x1052 * x347 +
                            x1052 * x689 + x2687;
  const amrex::Real x2689 = x104 * x2668;
  const amrex::Real x2691 = sc[28] * sc[2] * x1940 * exp(x1928);
  const amrex::Real x2695 = sc[29] * x1932 * x1934;
  x1932 = sc[28] * sc[2] * x1932 * x1971;
  const amrex::Real x2700 = refC * sc[29] * x1940 * x1954;
  amrex::Real x2702 = x1932 * (x1959 * x671 + x1960 * x672) -
                      8.8445e+87 * x1946 * x1951 + 8.8445e+87 * x1946 * x1968 -
                      1.33e+48 * x2691 - x2695 * (x1959 * x671 + x1960 * x672) +
                      1.33e+48 * x2700;
  x2077 = 0.121602454932911 * ((x2077) * (x2077)) /
            (x15 * ((x2078) * (x2078) * (x2078))) +
          0.86858896380650397 * x2077 / (x15 * ((x2078) * (x2078)));
  x2078 = -x2077 * x2113 + x2077 * x2121 - 2.565e+21 * x2082 * x2118 * x994 +
          2.565e+21 * x2088 - 1.70446243523316e+34 * x2091 * x2093 +
          1.70446243523316e+34 * x2091 * x2098;
  x2135 = 0.121602454932911 * ((x2135) * (x2135)) /
            (x15 * ((x2137) * (x2137) * (x2137))) +
          0.86858896380650397 * x2135 / (x15 * ((x2137) * (x2137)));
  x2137 = x2130 * x2135 * x2158 - x2130 * x2135 * x2174 -
          4.3757575757575802e+50 * x2142 * x2148 +
          4.3757575757575802e+50 * x2142 * x2179 + 3.8e+29 * x2170 -
          3.8e+29 * x2177;
  x2341 = 0.121602454932911 * ((x2341) * (x2341)) /
            (x15 * ((x2343) * (x2343) * (x2343))) +
          0.86858896380650397 * x2341 / (x15 * ((x2343) * (x2343)));
  x2343 = -sc[19] * sc[2] * x2364 - 3.2236842105263198e+29 * x2339 * x2340 +
          3.2236842105263198e+29 * x2339 * x2386 + x2341 * x2367 -
          x2341 * x2381 + 1.4e+18 * x2348 * x2378;
  const amrex::Real x2734 =
    20000000.0 * sc[4] * x616 + x1053 * x616 + x2078 + x2137 + x2343 + x2702;
  const amrex::Real x2736 = x249 * x489 / ((x372) * (x372));
  const amrex::Real x2738 =
    3200000000000000.0 * refC * x174 * x1862 * x500 *
    (0.28 * x249 * ((x489) * (x489)) / ((x372) * (x372) * (x372)) +
     2.0 * x2736);
  x489 = 3200000000000000.0 * sc[2] * x1026 * x174 * x200 * x35 *
         (0.28 * x249 * ((x489) * (x489)) / ((x372) * (x372) * (x372)) +
          2.0 * x2736);
  x372 = x496 * x544;
  x174 = x1899 * x544;
  const amrex::Real x2750 = sc[30] * x1982 * x2011;
  const amrex::Real x2757 = 6.26e+26 * refC * sc[30] * x1986 +
                            x1982 * x2018 * (x2005 * x671 + x2006 * x672) -
                            6.26e+26 * x1994 -
                            2.9464360902255599e+46 * x1996 * x2001 +
                            2.9464360902255599e+46 * x1996 * x2014 -
                            x2750 * (x2005 * x671 + x2006 * x672);
  const amrex::Real x2763 = 1.99e+29 * refC * sc[22] * x2197 * x2202 -
                            7.6009596928982695e+46 * x2188 * x2189 +
                            7.6009596928982695e+46 * x2188 * x2194 -
                            1.99e+29 * x2197 * x2219 -
                            x2215 * (x2190 * x671 + x2208 * x672) +
                            x2223 * (x2190 * x671 + x2208 * x672);
  amrex::Real x2764 = x2258 * (x2256 * x672 + x2257 * x671);
  const amrex::Real x2771 =
    -sc[13] * x2264 * x2764 + 1.67201834862385e+18 * x2236 * x2240 -
    1.67201834862385e+18 * x2236 * x2241 + 1350000000000.0 * x2243 -
    1350000000000.0 * x2253 + x2282 * x2764;
  x2288 = x2316 * (2.0 * x2312 + 0.121602454932911 * ((x2290) * (x2290)) /
                                   (x2288 * ((x2291) * (x2291) * (x2291))));
  x2290 = sc[2] * sc[9] * x2286 * exp(-3.24 * tc[0]);
  x2291 = -782712744.331509 * x2286 * x2322 - x2288 * x2305 + x2288 * x2326 +
          782712744.331509 * x2290 + 63280000.0 * x2297 * x2305 -
          63280000.0 * x2297 * x2326;
  const amrex::Real x2784 = -9428000.0 * x2502 + 9428000.0 * x2505;
  const amrex::Real x2785 =
    -3560000.0 * ((sc[2]) * (sc[2])) * x818 + 3560000.0 * x1895;
  const amrex::Real x2787 = 4.096e+20 * x174 + 3200000000000000.0 * x1863 -
                            3200000000000000.0 * x203 + x2291 - x2738 + x2757 +
                            x2763 + x2771 + x2784 + x2785 - 4.096e+20 * x372 +
                            x489;
  const amrex::Real x2796 =
    3.00565398683248e+51 * x2451 * x2452 -
    3.00565398683248e+51 * x2451 * x2453 - 2.027e+27 * x2456 * x2468 +
    x2473 * (x2457 * x671 + x2459 * x672) + 2.027e+27 * x2481 -
    x2498 * (x2457 * x671 + x2459 * x672);
  const amrex::Real x2805 = exp(-5625.96232369677 * invT - 2.39 * tc[0]);
  const amrex::Real x2812 =
    115.0 * sc[22] * exp(-3789.2214935095399 * invT + 1.9 * tc[0]);
  const amrex::Real x2816 =
    4.2 * sc[15] * exp(-2450.6651624689798 * invT + 2.1 * tc[0]);
  const amrex::Real x2819 =
    173.4 *
    exp(g_RT[2] - g_RT[6] - 1726.0331637101899 * invT + 1.51 * tc[0] - x85);
  amrex::Real x2823 =
    sc[11] + 1.75 * sc[16] + 3.6 * sc[17] + sc[18] + sc[20] + sc[22] + x14;
  const amrex::Real x2824 = 0.7 * sc[0] + 2 * sc[6] + 12.0 * sc[7] + x2823;
  const amrex::Real x2838 = refCinv * exp(
                                        g_RT[17] + 2.0 * g_RT[2] - g_RT[9] -
                                        g_RT_qss[2] - 754.82499870708 * invT);
  const amrex::Real x2845 = exp(2.0 * g_RT[16] - g_RT[23] + g_RT[2] - g_RT[3]);
  const amrex::Real x2846 = refCinv * ((sc[16]) * (sc[16]));
  const amrex::Real x2855 =
    0.63 * sc[0] + sc[11] + sc[16] + sc[18] + sc[20] + sc[22] + x14;
  const amrex::Real x2869 = sc[26] * exp(-2516.0833290236001 * invT);
  x226 = (-sc_qss[0] * x238 / x226 + x597) / x233;
  x233 = exp(
    g_RT[2] + g_RT[35] - g_RT_qss[2] - g_RT_qss[5] - 639.08516557199403 * invT -
    1.38 * tc[0]);
  x238 = 90.0 * sc[35] * exp(-29266.0748498709 * invT + 1.7 * tc[0]);
  const amrex::Real x2881 = exp(
    g_RT[2] + g_RT[35] - g_RT_qss[3] - g_RT_qss[5] - 639.08516557199403 * invT -
    1.38 * tc[0]);
  const amrex::Real x2884 = exp(
    g_RT[2] - g_RT_qss[3] - 291.86566616673701 * invT - 0.36 * tc[0] - x467);
  const amrex::Real x2886 = exp(
    g_RT[2] - g_RT_qss[2] - 291.86566616673701 * invT - 0.36 * tc[0] - x467);
  const amrex::Real x2889 =
    1.52e+53 * exp(-13561.185926771401 * invT - 13.54 * tc[0]);
  const amrex::Real x2895 =
    5140.0 * exp(
               -g_RT[10] - g_RT[18] + g_RT[27] + g_RT[2] -
               11147.758797572 * invT + 0.86 * tc[0]);
  const amrex::Real x2898 = -30000000.0 * sc[20] * x712 +
                            30000000.0 * sc[20] * x716 - sc[27] * x2889 -
                            sc[27] * x2895 - 30000000.0 * sc[27] * x584;
  const amrex::Real x2900 =
    6.05 * exp(-2616.7266621845401 * invT + 2.0 * tc[0]);
  const amrex::Real x2903 = 24100000.0 * exp(-1997.7701632447399 * invT);
  const amrex::Real x2907 =
    3.7e+18 * exp(-6292.7244058880196 * invT - 2.92 * tc[0]);
  const amrex::Real x2915 = 3970000.0 * exp(-337.65838275496702 * invT);
  const amrex::Real x2918 =
    0.5916 *
    exp(g_RT[2] - g_RT[6] - 26923.098053884099 * invT + 2.433 * tc[0] - x2299);
  const amrex::Real x2920 =
    -sc[5] * x2915 - sc[5] * x2918 -
    74850000.0 * sc[5] * exp(-148.44891641239201 * invT);
  const amrex::Real x2923 = 132000000.0 * exp(-181.15799968969901 * invT);
  const amrex::Real x2928 =
    660.0 * sc[11] * exp(-5454.8686573231598 * invT + 1.62 * tc[0]);
  const amrex::Real x2931 = 16.32 * exp(
                                      -g_RT[18] + g_RT[23] + g_RT[2] - g_RT[3] -
                                      956.11166502896697 * invT + 2.0 * tc[0]);
  const amrex::Real x2939 =
    5757000.0 *
    exp(
      -g_RT[16] + g_RT[17] - 166.98238621397999 * invT - 0.664 * tc[0] - x387);
  const amrex::Real x2941 = exp(-g_RT[12] + g_RT[17] + g_RT[2] - g_RT[3]);
  const amrex::Real x2944 =
    0.07046 *
    exp(
      -g_RT[16] + g_RT[17] + 178.97907152676501 * invT + 2.053 * tc[0] - x387);
  const amrex::Real x2953 =
    1.5e+18 * exp(
                -g_RT[10] - g_RT[19] + g_RT[28] + g_RT[2] -
                9368.8878839522695 * invT - 2.83 * tc[0]);
  const amrex::Real x2956 =
    exp(-g_RT[20] + g_RT[28] + g_RT[2] - g_RT_qss[2] - 3019.29999482832 * invT);
  const amrex::Real x2961 = -sc[28] * x1971 - sc[28] * x2953 -
                            20000000.0 * sc[28] * x2956 -
                            50000000.0 * sc[28] * x399 - 18000000.0 * sc[28] +
                            x1047 * x688 - x1047 * x690;
  const amrex::Real x2965 =
    0.173 * sc[29] * exp(-1253.00949785375 * invT + 2.5 * tc[0]);
  x1984 = 6.26e+26 * x1990 * x35 *
          exp(-3522.5166606330399 * invT - 6.66 * tc[0]) / (x1984 + 1.0);
  x1990 = exp(
    -2.0 * g_RT[10] + g_RT[21] + g_RT[2] - 5334.0966575300299 * invT +
    0.1 * tc[0]);
  const amrex::Real x2978 = -4990000.0 * sc[21] * x1990 -
                            1.99e+29 * sc[21] * x2197 * x35 * exp(x2201) -
                            2000000.0 * sc[21];
  const amrex::Real x2984 =
    -refCinv * x2116 * x2118 + 50000000.0 * sc[10] * x734 -
    50000000.0 * sc[10] * x735 - 40000000.0 * sc[18] * x532 -
    50000000.0 * sc[18] * x655;
  const amrex::Real x2987 = exp(-4025.7333264377598 * invT);
  const amrex::Real x2990 = refCinv * sc[10];
  const amrex::Real x2994 =
    80.0 * exp(
             g_RT[10] + g_RT[24] - g_RT[29] + g_RT[2] - g_RT[3] -
             164.55184971814299 * invT + 1.65 * tc[0]);
  const amrex::Real x3001 =
    94600000.0 *
    exp(
      -g_RT[13] + g_RT[24] + g_RT[2] - g_RT_qss[1] + 259.15658288943098 * invT);
  x387 =
    2.18e-10 *
    exp(-g_RT[18] + g_RT[24] + 503.21666580471998 * invT + 4.5 * tc[0] - x387);
  const amrex::Real x3012 =
    1500.0 * sc[24] * exp(-1353.6528310147 * invT + 1.43 * tc[0]);
  const amrex::Real x3013 =
    48000000.0 * exp(-g_RT[19] + g_RT[24] + g_RT[2] - g_RT[3]);
  const amrex::Real x3016 =
    -50000000.0 * sc[24] * x2987 - sc[24] * x2990 * x2994 - sc[24] * x3001 -
    sc[24] * x3013 - sc[24] * x387 - 20000000.0 * sc[24] * x389 +
    20000000.0 * sc[4] * x989 - 3.8e+29 * x15 * x2134 * x2153 - x3012 -
    x676 * x712 + x676 * x716;
  const amrex::Real x3029 =
    -1350000000000.0 * sc[12] * x2248 * x35 * exp(x2249) -
    15000000.0 * sc[12] * x453 - 80000000.0 * sc[12] * x482 -
    30000000.0 * sc[12] * x574 - 120000000.0 * sc[12] +
    80000000.0 * sc[3] * x688 - 80000000.0 * sc[3] * x690 -
    30000000.0 * sc[4] * x712 + 30000000.0 * sc[4] * x716;
  const amrex::Real x3032 =
    26440000000.0 * sc[9] * exp(-8575.3152019782301 * invT - 0.6707 * tc[0]);
  const amrex::Real x3042 = -30000000.0 * sc[10] * x712 +
                            30000000.0 * sc[10] * x716 - sc[19] * x15 * x2364 -
                            30000000.0 * sc[19] * x565 - 150000000.0 * sc[19] +
                            x1053 * x989;
  const amrex::Real x3044 =
    84300000.0 * exp(-g_RT[10] + g_RT[13] + g_RT[2] - g_RT[3]);
  const amrex::Real x3049 =
    5710000.0 *
    exp(g_RT[13] + g_RT[2] - g_RT[7] - g_RT_qss[1] + 379.92858268256299 * invT);
  const amrex::Real x3055 =
    23000.0 * exp(-1648.03458051046 * invT + 1.05 * tc[0]);
  const amrex::Real x3059 =
    -sc[13] * x2437 * exp(x2421) - sc[13] * x3044 - sc[13] * x3049 -
    sc[13] * x3055 - 30000000.0 * sc[13] * x446 - 20000000.0 * sc[13] * x521 -
    30000000.0 * sc[4] * x678 + 20000000.0 * sc[4] * x688 -
    20000000.0 * sc[4] * x690 + 30000000.0 * sc[4] * x703 - x712 * x991 +
    x716 * x991;
  const amrex::Real x3065 =
    12000000.0 *
    exp(
      -g_RT[10] + g_RT[20] + g_RT[2] - g_RT_qss[3] + 286.83349950869001 * invT);
  const amrex::Real x3070 =
    50.7 * sc[20] * exp(-6516.6558221711202 * invT + 1.9 * tc[0]);
  const amrex::Real x3073 =
    40000000.0 * sc[10] * x688 - 40000000.0 * sc[10] * x690 -
    60000000.0 * sc[11] * x712 + 60000000.0 * sc[11] * x716 - sc[20] * x3065 -
    40000000.0 * sc[20] * x527 - 60000000.0 * sc[20] * x577 - x1051 * x678 +
    x1051 * x703 - x2471 - x3070;
  amrex::Real x3074 = g_RT[3] - g_RT[4];
  const amrex::Real x3076 =
    0.04589 *
    exp(g_RT[2] - g_RT[6] - 3150.13632793755 * invT + 2.7 * tc[0] - x3074);
  const amrex::Real x3079 = 16720000000.0 * sc[0] + 88000000000.0 * sc[6] +
                            277200000000.0 * sc[7] + 44000000000.0 * x2823;
  const amrex::Real x3081 = -sc[4] * x2508 * x3079 - sc[4] * x3076 -
                            28000000.0 * sc[9] * x678 +
                            28000000.0 * sc[9] * x703;
  const amrex::Real x3092 =
    187000000000.0 * sc[0] + 374000000000.0 * sc[6] + 187000000000.0 * x2823;
  const amrex::Real x3100 =
    -57000000.0 * sc[16] * x580 - 50000000.0 * sc[16] * x652 -
    15000000.0 * sc[3] * x678 + 15000000.0 * sc[3] * x703 -
    57000000.0 * sc[3] * x712 + 57000000.0 * sc[3] * x716 +
    50000000.0 * sc[4] * x734 - 50000000.0 * sc[4] * x735 -
    2244000000000.0 * sc[7] * x2536 * x423 - x2536 * x3092 * x423 +
    x2668 * x54 - x2668 * x619 + 8300000.0 * x423 * x602 * exp(x2522);
  const amrex::Real x3102 = exp(-2012.8666632188799 * invT);
  const amrex::Real x3104 = 20000000.0 * sc[25] * x3102;
  x6 = x116 * (-sc_qss[1] * x6 / x111 - sc_qss[2] * x201 / x111 + x473);
  x111 = 0.5 * exp(
                 g_RT[10] + g_RT[2] - g_RT[6] - g_RT_qss[2] -
                 3638.25649376812 * invT + 2.0 * tc[0]);
  x116 = -sc[10] * x111 - 70000000.0 * sc[10] * x410 -
         70000000.0 * sc[6] * x678 + 70000000.0 * sc[6] * x703 + x1052 * x688 -
         x1052 * x690 - 2.477e+21 * x2562 * x500 * exp(x2564);
  x201 = x2067 + x2078 + x2137 + x2343 + x2443 + x2687 + x2702 + x2796;
  x473 =
    3970000.0 *
    exp(-g_RT[2] + g_RT[3] - g_RT[5] + g_RT[7] - 337.65838275496702 * invT);
  const amrex::Real x3130 =
    26440000000.0 *
    exp(-g_RT[2] + g_RT[4] - 8575.3152019782301 * invT - 0.6707 * tc[0] - x549);
  const amrex::Real x3161 = exp(-956.11166502896697 * invT + 2.0 * tc[0]);
  const amrex::Real x3175 =
    80.0 * exp(-164.55184971814299 * invT + 1.65 * tc[0]);
  const amrex::Real x3180 =
    -15000000.0 * sc[3] * x717 + 15000000.0 * sc[3] * x719 + 15000000.0 * x6;
  const amrex::Real x3186 =
    80000000.0 * sc[3] * x125 - 80000000.0 * sc[3] * x710 +
    30000000.0 * sc[4] * x721 - 30000000.0 * sc[4] * x725 + 80000000.0 * x200;
  const amrex::Real x3196 =
    40000000.0 * sc[10] * x125 - 40000000.0 * sc[10] * x710 +
    60000000.0 * sc[11] * x721 - 60000000.0 * sc[11] * x725 - x1051 * x717 +
    x1051 * x719;
  const amrex::Real x3204 =
    84300000.0 * sc[10] + 20000000.0 * sc[4] * x125 -
    20000000.0 * sc[4] * x710 - 30000000.0 * sc[4] * x717 +
    30000000.0 * sc[4] * x719 + x721 * x991 - x725 * x991;
  const amrex::Real x3205 =
    0.04589 * exp(-3150.13632793755 * invT + 2.7 * tc[0]);
  const amrex::Real x3215 =
    57000000.0 * sc[3] * x721 - 57000000.0 * sc[3] * x725 +
    50000000.0 * sc[4] * x747 - 50000000.0 * sc[4] * x748 - x219 * x2668 +
    57000000.0 * x226 + x2668 * x596;
  const amrex::Real x3223 =
    95100.0 *
    exp(g_RT[20] - g_RT[26] - g_RT[2] + g_RT[4] - 2516.0833290236001 * invT);
  const amrex::Real x3225 =
    96000000.0 * exp(g_RT[14] - g_RT[2] - g_RT[37] + g_RT[4]);
  const amrex::Real x3227 =
    24100000.0 *
    exp(-g_RT[2] + g_RT[4] + g_RT[7] - g_RT[8] - 1997.7701632447399 * invT);
  const amrex::Real x3230 =
    sc[4] * exp(-g_RT[2] + 2.0 * g_RT[4] - g_RT[5] - 148.44891641239201 * invT);
  const amrex::Real x3234 =
    173.4 * sc[6] * exp(-1726.0331637101899 * invT + 1.51 * tc[0]);
  const amrex::Real x3248 = 33600000.0 * exp(-193.738416334817 * invT);
  const amrex::Real x3271 =
    0.07046 * exp(178.97907152676501 * invT + 2.053 * tc[0]);
  const amrex::Real x3273 =
    5757000.0 * exp(-166.98238621397999 * invT - 0.664 * tc[0]);
  const amrex::Real x3279 =
    32000000.0 * exp(g_RT[10] - g_RT[14] - g_RT[2] + g_RT[4]);
  const amrex::Real x3286 =
    2.18e-10 * exp(503.21666580471998 * invT + 4.5 * tc[0]);
  const amrex::Real x3293 = sc[18] * x3286 + 20000000.0 * sc[4] * x990 -
                            20000000.0 * sc_qss[3] * x70 -
                            20000000.0 * x395 / x68 - x676 * x736 + x676 * x743;
  const amrex::Real x3294 =
    -15000000.0 * sc[3] * x730 + 15000000.0 * sc[3] * x737;
  const amrex::Real x3300 =
    -80000000.0 * sc[3] * x171 + 80000000.0 * sc[3] * x732 -
    30000000.0 * sc[4] * x736 + 30000000.0 * sc[4] * x743 + 30000000.0 * x226;
  const amrex::Real x3311 =
    -40000000.0 * sc[10] * x171 + 40000000.0 * sc[10] * x732 -
    60000000.0 * sc[11] * x736 + 60000000.0 * sc[11] * x743 - x1051 * x730 +
    x1051 * x737;
  const amrex::Real x3319 =
    -20000000.0 * sc[4] * x171 - 30000000.0 * sc[4] * x730 +
    20000000.0 * sc[4] * x732 + 30000000.0 * sc[4] * x737 + 20000000.0 * x200 +
    30000000.0 * x6 - x736 * x991 + x743 * x991;
  x242 = x247 * (-x597 * x646 - x666 / x242);
  x247 = 8300000.0 * exp(-37986.819668266697 * invT - 0.1 * tc[0]);
  x597 = sc[36] * x247 - 57000000.0 * sc[3] * x736 + 57000000.0 * sc[3] * x743 +
         50000000.0 * sc[4] * x768 - 50000000.0 * sc[4] * x770 + x157 * x2668 +
         50000000.0 * x242 - x2668 * x633;
  x646 = -sc[2] * x2508 * x3079 - sc[2] * x3076 - 28000000.0 * sc[9] * x730 +
         28000000.0 * sc[9] * x737;
  x666 = -g_RT[5] + g_RT[8];
  const amrex::Real x3340 =
    6.05 * exp(-2616.7266621845401 * invT + 2.0 * tc[0] - x2 - x666);
  const amrex::Real x3361 = -132000000.0 * sc[4] * x1925;
  const amrex::Real x3366 = -50000000.0 * sc[20] * x738;
  const amrex::Real x3367 = 50000000.0 * sc[20] * x701 + x3366;
  const amrex::Real x3389 = -x1051 * x738 + x2796;
  const amrex::Real x3391 = -40000000.0 * sc[10] * x740 +
                            40000000.0 * sc[10] * x741 -
                            60000000.0 * sc[11] * x746 +
                            60000000.0 * sc[11] * x757 + x1051 * x701 + x3389;
  const amrex::Real x3398 = -30000000.0 * sc[4] * x738 + x2443;
  const amrex::Real x3400 =
    30000000.0 * sc[4] * x701 - 20000000.0 * sc[4] * x740 +
    20000000.0 * sc[4] * x741 + x3398 - x746 * x991 + x757 * x991;
  const amrex::Real x3403 =
    -sc[2] * x2915 - sc[2] * x2918 -
    74850000.0 * sc[2] * exp(-148.44891641239201 * invT);
  const amrex::Real x3409 =
    -57000000.0 * sc[3] * x746 + 57000000.0 * sc[3] * x757 +
    50000000.0 * sc[4] * x800 - 50000000.0 * sc[4] * x801 - x181 * x2668;
  const amrex::Real x3418 = -x358 * x738;
  const amrex::Real x3423 = -x1041 * x738 + x2067;
  const amrex::Real x3424 = x1041 * x701 + x3423;
  const amrex::Real x3425 = -15000000.0 * sc[3] * x738;
  const amrex::Real x3426 = 15000000.0 * sc[3] * x701 + x3425;
  const amrex::Real x3427 = -28000000.0 * sc[9] * x738;
  const amrex::Real x3431 = -30000000.0 * sc[2] * x701 +
                            30000000.0 * sc[2] * x738 +
                            28000000.0 * sc[9] * x701 + x2661 + x2787 + x3418 +
                            x3424 + x3426 + x3427 + x358 * x701;
  const amrex::Real x3433 = -70000000.0 * sc[6] * x738 + x2687;
  const amrex::Real x3440 =
    exp(g_RT[24] - g_RT[25] - 2012.8666632188799 * invT - x2);
  const amrex::Real x3442 =
    1800000.0 * exp(g_RT[29] - g_RT[2] - g_RT[30] + g_RT[6]);
  const amrex::Real x3446 =
    0.5916 * sc[9] * exp(-26923.098053884099 * invT + 2.433 * tc[0]);
  const amrex::Real x3447 =
    115.0 *
    exp(g_RT[21] - g_RT[22] - 3789.2214935095399 * invT + 1.9 * tc[0] - x2);
  const amrex::Real x3450 = 0.173 * exp(
                                      g_RT[28] - g_RT[29] - g_RT[2] + g_RT[6] -
                                      1253.00949785375 * invT + 2.5 * tc[0]);
  const amrex::Real x3452 = 4.2 * exp(
                                    g_RT[14] - g_RT[15] - g_RT[2] + g_RT[6] -
                                    2450.6651624689798 * invT + 2.1 * tc[0]);
  const amrex::Real x3455 = 2000000.0 * exp(g_RT[20] - g_RT[21] - x2);
  const amrex::Real x3457 =
    173.4 * sc[4] * exp(-1726.0331637101899 * invT + 1.51 * tc[0]);
  const amrex::Real x3473 =
    90.0 *
    exp(-g_RT[35] + g_RT[36] - 29266.0748498709 * invT + 1.7 * tc[0] - x2);
  const amrex::Real x3491 =
    660.0 *
    exp(g_RT[10] - g_RT[11] - 5454.8686573231598 * invT + 1.62 * tc[0] - x2);
  const amrex::Real x3501 = 18000000.0 * exp(g_RT[27] - g_RT[28] - x2);
  amrex::Real x3505 = x2130 * (4.0 * x2162 + 0.56 * x2164);
  const amrex::Real x3511 = -8.7515151515151504e+50 * x2142 * x2148 +
                            8.7515151515151504e+50 * x2142 * x2179 +
                            x2158 * x3505 + 7.6e+29 * x2170 - x2174 * x3505 -
                            7.6e+29 * x2177;
  const amrex::Real x3516 = exp(g_RT[13] - g_RT[14] - g_RT[2] + g_RT[6]);
  const amrex::Real x3520 = sc[14] * x2037 * x2040;
  const amrex::Real x3525 =
    0.43429448190325198 * x2030 / (((x2032) * (x2032)) * x92);
  x2030 = 0.43429448190325198 * ((x2030) * (x2030)) /
          (((x2032) * (x2032) * (x2032)) * x92);
  x2032 = sc[15] * x2029 * x2055;
  const amrex::Real x3530 = x2037 * x2054 * x607;
  x2029 = sc[2] * x2029 * x2058;
  const amrex::Real x3535 =
    x2029 * (0.56 * x2030 + 4.0 * x3525) -
    x2032 * (0.56 * x2030 + 4.0 * x3525) - 2.9584e+26 * x2042 * x2045 +
    2.9584e+26 * x2042 * x2062 - 1.72e+17 * x3520 + 1.72e+17 * x3530;
  const amrex::Real x3539 =
    exp(g_RT[23] - g_RT[24] - g_RT[2] + g_RT[6] - 4025.7333264377598 * invT);
  const amrex::Real x3547 =
    120000000.0 * exp(-g_RT[12] + g_RT[16] - g_RT[2] + g_RT[6]);
  const amrex::Real x3551 = sc[13] * x2258 * x2264;
  amrex::Real x3561 =
    2700000000000.0 * refC * sc[13] * x2248 * x2262 -
    2700000000000.0 * sc[12] * sc[2] * x2248 * exp(x2249) +
    3.3440366972477102e+18 * x2236 * x2240 -
    3.3440366972477102e+18 * x2236 * x2241 +
    x2258 * x2282 * (4.0 * x2256 * x249 + 0.56 * x2257 * x249) -
    x3551 * (4.0 * x2256 * x249 + 0.56 * x2257 * x249);
  const amrex::Real x3562 =
    sc[16] * x3547 - 80000000.0 * sc[3] * x745 + 80000000.0 * sc[3] * x758 +
    30000000.0 * sc[4] * x761 - 30000000.0 * sc[4] * x762 + x3561;
  const amrex::Real x3563 =
    90000000.0 * exp(g_RT[18] - g_RT[19] - g_RT[2] + g_RT[6]);
  const amrex::Real x3566 = -sc_qss[3] * x70 - x395 / x68;
  const amrex::Real x3570 = 30000000.0 * sc[10] * x761 -
                            30000000.0 * sc[10] * x762 + sc[18] * x3563 +
                            x1053 * x825 + 60000000.0 * x12 * x3566;
  const amrex::Real x3572 =
    23000.0 *
    exp(g_RT[12] - g_RT[13] - 1648.03458051046 * invT + 1.05 * tc[0] - x2);
  const amrex::Real x3580 =
    sc[12] * x3572 - 20000000.0 * sc[4] * x745 - 30000000.0 * sc[4] * x754 +
    30000000.0 * sc[4] * x756 + 20000000.0 * sc[4] * x758 + x761 * x991 -
    x762 * x991;
  x2 = 50.7 *
       exp(g_RT[19] - g_RT[20] - 6516.6558221711202 * invT + 1.9 * tc[0] - x2);
  const amrex::Real x3590 =
    -40000000.0 * sc[10] * x745 + 40000000.0 * sc[10] * x758 +
    60000000.0 * sc[11] * x761 - 60000000.0 * sc[11] * x762 + sc[19] * x2 -
    x1051 * x754 + x1051 * x756;
  const amrex::Real x3597 = sc[3] * x3205 - 28000000.0 * sc[9] * x754 +
                            28000000.0 * sc[9] * x756 - 88000000000.0 * x2510 +
                            88000000000.0 * x2513;
  amrex::Real x3607 = 16600000.0 * x1700 * x424 * exp(x1699 + x2522);
  amrex::Real x3608 = 16600000.0 * x104 * x424 * exp(x2522);
  const amrex::Real x3610 =
    374000000000.0 * sc[12] * x2532 - 15000000.0 * sc[3] * x754 +
    15000000.0 * sc[3] * x756 + 57000000.0 * sc[3] * x761 -
    57000000.0 * sc[3] * x762 + 50000000.0 * sc[4] * x842 -
    50000000.0 * sc[4] * x844 - 374000000000.0 * x2536 * x424 + x3607 + x3608;
  const amrex::Real x3617 =
    -70000000.0 * sc[6] * x754 + 70000000.0 * sc[6] * x756 - x1052 * x745 +
    x1052 * x758 + 0.5 * x200 * exp(-3638.25649376812 * invT + 2.0 * tc[0]) +
    70000000.0 * x6;
  const amrex::Real x3631 =
    x1932 * (0.56 * x1959 * x249 + 4.0 * x1960 * x249) -
    1.7689e+88 * x1946 * x1951 + 1.7689e+88 * x1946 * x1968 - 2.66e+48 * x2691 -
    x2695 * (0.56 * x1959 * x249 + 4.0 * x1960 * x249) + 2.66e+48 * x2700;
  x2076 = x2076 * (0.56 * x2106 + 4.0 * x2108);
  const amrex::Real x3639 =
    -2.565e+21 * x15 * x2076 * x2088 + x2076 * x2116 * x2118 * x994 +
    5.13e+21 * x2088 - 3.4089248704663201e+34 * x2091 * x2093 +
    3.4089248704663201e+34 * x2091 * x2098 - 5.13e+21 * x2124;
  const amrex::Real x3647 = -6.4473684210526297e+29 * x2339 * x2340 +
                            6.4473684210526297e+29 * x2339 * x2386 -
                            2.8e+18 * x2348 * x2352 + 2.8e+18 * x2348 * x2378 +
                            x2367 * (4.0 * x2358 + 0.56 * x2360) -
                            x2381 * (4.0 * x2358 + 0.56 * x2360);
  const amrex::Real x3657 =
    4.4e+18 * refC * sc[14] * x2399 * x2422 - 4.4e+18 * x2399 * x2435 -
    x2402 * (4.0 * x2415 + 0.56 * x2416) -
    1.79259259259259e+31 * x2404 * x2409 +
    1.79259259259259e+31 * x2409 * x2411 + x2439 * (4.0 * x2415 + 0.56 * x2416);
  x2462 = x2462 * (0.56 * x2457 * x249 + 4.0 * x2459 * x249);
  const amrex::Real x3665 =
    sc[2] * x2462 * x2471 + 6.0113079736649601e+51 * x2451 * x2452 -
    6.0113079736649601e+51 * x2451 * x2453 - 4.054e+27 * x2456 * x2468 -
    2.027e+27 * x2462 * x2481 * x35 + 4.054e+27 * x2481;
  amrex::Real x3668 = x2558 * (0.56 * x249 * x2552 + 4.0 * x249 * x2555);
  const amrex::Real x3676 = 4.954e+21 * refC * sc[11] * x2562 * x2572 -
                            4.954e+21 * sc[10] * x2562 * x2566 -
                            9.6622503937007901e+32 * x2546 * x2547 +
                            9.6622503937007901e+32 * x2546 * x2551 +
                            x2568 * x3668 - x2579 * x3668;
  amrex::Real x3691 =
    x1982 * x2018 * (0.56 * x2005 * x249 + 4.0 * x2006 * x249) -
    1.252e+27 * x1994 - 5.8928721804511299e+46 * x1996 * x2001 +
    5.8928721804511299e+46 * x1996 * x2014 + 1.252e+27 * x2021 -
    x2750 * (0.56 * x2005 * x249 + 4.0 * x2006 * x249);
  amrex::Real x3700 = -1.5201919385796501e+47 * x2188 * x2189 +
                      1.5201919385796501e+47 * x2188 * x2194 -
                      3.98e+29 * x2197 * x2219 + 3.98e+29 * x2205 -
                      x2215 * (0.56 * x2190 * x249 + 4.0 * x2208 * x249) +
                      x2223 * (0.56 * x2190 * x249 + 4.0 * x2208 * x249);
  const amrex::Real x3701 = 8.192e+20 * x174 + 6400000000000000.0 * x1863 -
                            x1874 * (0.56 * x1869 + 4.0 * x2736) +
                            x1903 * (0.56 * x1869 + 4.0 * x2736) -
                            6400000000000000.0 * x203 + x3691 + x3700 -
                            8.192e+20 * x372;
  const amrex::Real x3702 = -264000000.0 * sc[4] * x1922 -
                            264000000.0 * sc[4] * x1925 + 67200000.0 * x1909 +
                            67200000.0 * x1913 + x3631 + x3639 + x3647 + x3657 +
                            x3665 + x3676 + x3701;
  const amrex::Real x3729 =
    5000.0 *
    exp(g_RT[19] - g_RT[26] - g_RT[2] + g_RT[7] - 2516.0833290236001 * invT);
  const amrex::Real x3754 =
    -50000000.0 * sc[20] * x765 + 50000000.0 * sc[20] * x773 - x1047 * x759 +
    x1047 * x766 + x1932 * (1.68 * x1959 * x249 + 12.0 * x1960 * x249) -
    5.3067e+88 * x1946 * x1951 + 5.3067e+88 * x1946 * x1968 - 7.98e+48 * x2691 -
    x2695 * (1.68 * x1959 * x249 + 12.0 * x1960 * x249) + 7.98e+48 * x2700;
  const amrex::Real x3765 =
    50000000.0 * sc[10] * x864 - 50000000.0 * sc[10] * x875 +
    1.539e+22 * x2088 - 1.0226774611399e+35 * x2091 * x2093 +
    1.0226774611399e+35 * x2091 * x2098 -
    x2113 * (1.68 * x2106 + 12.0 * x2108) +
    x2121 * (1.68 * x2106 + 12.0 * x2108) - 1.539e+22 * x2124;
  const amrex::Real x3774 =
    x1982 * x2018 * (1.68 * x2005 * x249 + 12.0 * x2006 * x249) -
    3.756e+27 * x1994 - 1.7678616541353401e+47 * x1996 * x2001 +
    1.7678616541353401e+47 * x1996 * x2014 + 3.756e+27 * x2021 -
    x2750 * (1.68 * x2005 * x249 + 12.0 * x2006 * x249);
  const amrex::Real x3780 = x2130 * (12.0 * x2162 + 1.68 * x2164);
  const amrex::Real x3785 =
    20000000.0 * sc[4] * x860 - 2.6254545454545501e+51 * x2142 * x2148 +
    2.6254545454545501e+51 * x2142 * x2179 + x2158 * x3780 + 2.28e+30 * x2170 -
    x2174 * x3780 - 2.28e+30 * x2177 - x676 * x787 + x676 * x799;
  const amrex::Real x3789 = 1.68 * x2190 * x249 + 12.0 * x2208 * x249;
  const amrex::Real x3794 = -4.5605758157389599e+47 * x2188 * x2189 +
                            4.5605758157389599e+47 * x2188 * x2194 -
                            1.194e+30 * x2197 * x2219 + 1.194e+30 * x2205 -
                            x2215 * x3789 + x2223 * x3789;
  const amrex::Real x3807 =
    -x1041 * x765 + x1041 * x773 + x2029 * (1.68 * x2030 + 12.0 * x3525) -
    x2032 * (1.68 * x2030 + 12.0 * x3525) - 8.8752e+26 * x2042 * x2045 +
    8.8752e+26 * x2042 * x2062 - 5.16e+17 * x3520 + 5.16e+17 * x3530 +
    16000000.0 * x6 * x77;
  const amrex::Real x3808 =
    -15000000.0 * sc[3] * x765 + 15000000.0 * sc[3] * x773;
  const amrex::Real x3820 =
    -80000000.0 * sc[3] * x759 + 80000000.0 * sc[3] * x766 -
    30000000.0 * sc[4] * x787 + 30000000.0 * sc[4] * x799 +
    1.0032110091743101e+19 * x2236 * x2240 -
    1.0032110091743101e+19 * x2236 * x2241 + 8100000000000.0 * x2243 -
    8100000000000.0 * x2253 +
    x2258 * x2282 * (12.0 * x2256 * x249 + 1.68 * x2257 * x249) -
    x3551 * (12.0 * x2256 * x249 + 1.68 * x2257 * x249);
  x2362 = x2362 * (12.0 * x2358 + 1.68 * x2360);
  const amrex::Real x3832 =
    -30000000.0 * sc[10] * x787 + 30000000.0 * sc[10] * x799 +
    sc[19] * sc[2] * x15 * x2362 * x2364 + x1053 * x860 -
    1.4e+18 * x15 * x2348 * x2362 * x2378 -
    1.9342105263157899e+30 * x2339 * x2340 +
    1.9342105263157899e+30 * x2339 * x2386 - 8.4e+18 * x2348 * x2352 +
    8.4e+18 * x2348 * x2378;
  const amrex::Real x3846 =
    -40000000.0 * sc[10] * x759 + 40000000.0 * sc[10] * x766 -
    60000000.0 * sc[11] * x787 + 60000000.0 * sc[11] * x799 - x1051 * x765 +
    x1051 * x773 + 1.80339239209949e+52 * x2451 * x2452 -
    1.80339239209949e+52 * x2451 * x2453 - 1.2162e+28 * x2456 * x2468 +
    x2473 * (1.68 * x2457 * x249 + 12.0 * x2459 * x249) + 1.2162e+28 * x2481 -
    x2498 * (1.68 * x2457 * x249 + 12.0 * x2459 * x249);
  const amrex::Real x3854 =
    -9306454530.10164 * x2286 * x2322 + 9306454530.10164 * x2290 +
    752399200.0 * x2297 * x2305 - 752399200.0 * x2297 * x2326 -
    x2305 * x2316 * (3.3292 * x2311 + 23.78 * x2312) +
    x2316 * x2326 * (3.3292 * x2311 + 23.78 * x2312);
  x2418 = x2418 * (12.0 * x2415 + 1.68 * x2416);
  const amrex::Real x3859 = refC * sc[14] * x2399 * x2422;
  const amrex::Real x3872 =
    -sc[14] * x2401 * x2418 - 20000000.0 * sc[4] * x759 -
    30000000.0 * sc[4] * x765 + 20000000.0 * sc[4] * x766 +
    30000000.0 * sc[4] * x773 +
    5710000.0 * x226 * exp(379.92858268256299 * invT) -
    1.32e+19 * x2399 * x2435 - 5.3777777777777801e+31 * x2404 * x2409 +
    5.3777777777777801e+31 * x2409 * x2411 + x2418 * x2435 * x2437 +
    1.32e+19 * x3859 - x787 * x991 + x799 * x991;
  const amrex::Real x3884 =
    2244000000000.0 * sc[12] * x2532 - 57000000.0 * sc[3] * x787 +
    57000000.0 * sc[3] * x799 + 50000000.0 * sc[4] * x864 -
    50000000.0 * sc[4] * x875 + 49800000.0 * x2524 + 49800000.0 * x2529 -
    2244000000000.0 * x2536 * x424;
  const amrex::Real x3896 =
    -70000000.0 * sc[6] * x765 + 70000000.0 * sc[6] * x773 - x1052 * x759 +
    x1052 * x766 - 2.8986751181102398e+33 * x2546 * x2547 +
    2.8986751181102398e+33 * x2546 * x2551 - 1.4862e+22 * x2548 +
    x2558 * x2568 * (1.68 * x249 * x2552 + 12.0 * x249 * x2555) -
    x2558 * x2579 * (1.68 * x249 * x2552 + 12.0 * x249 * x2555) +
    1.4862e+22 * x2575;
  const amrex::Real x3900 = -28000000.0 * sc[9] * x765 +
                            28000000.0 * sc[9] * x773 - 277200000000.0 * x2510 +
                            x2512 * x3079 + 277200000000.0 * x2513;
  const amrex::Real x3906 =
    -57000000.0 * sc[3] * x806 - 50000000.0 * sc[4] * x889;
  const amrex::Real x3908 = 8300000.0 * x2524 + x2539 + x2689 + x3906;
  const amrex::Real x3911 =
    57000000.0 * sc[3] * x839 + 50000000.0 * sc[4] * x888;
  const amrex::Real x3919 = 110000000.0 * sc[2] * x806 -
                            5280000.0 * x1011 * x687 -
                            30000000.0 * x102 * x806 + x1035 * x687 -
                            x1855 * x889 + x687 * x695 - x806 * x998;
  const amrex::Real x3921 =
    30000000.0 * sc[2] * x738 + x104 * x2603 + x2661 + x2787 + x3427;
  const amrex::Real x3924 = 33600000.0 * x1909 + x2617 + x3361 + x3921;
  const amrex::Real x3930 = -x1047 * x687 + x2702;
  const amrex::Real x3934 = -x1052 * x687 + x3433;
  const amrex::Real x3936 =
    70000000.0 * sc[6] * x701 + 5280000.0 * x1011 * x797 - x1035 * x797 +
    x1047 * x797 + x1052 * x797 + x3367 + x3930 + x3934 - x695 * x797;
  const amrex::Real x3937 = -30000000.0 * sc[2] * x701 +
                            28000000.0 * sc[9] * x701 + x3418 + x3424 + x3426 +
                            x358 * x701 + x3936;
  const amrex::Real x3945 = -30000000.0 * sc[20] * x806;
  const amrex::Real x3946 = 30000000.0 * sc[20] * x839 + x3945;
  const amrex::Real x3949 = -50000000.0 * sc[10] * x889 + x2078;
  const amrex::Real x3954 = 20000000.0 * sc[4] * x616 + x2137 - x676 * x806;
  const amrex::Real x3960 =
    -80000000.0 * sc[3] * x687 - 30000000.0 * sc[4] * x806;
  const amrex::Real x3961 = 80000000.0 * sc[3] * x797 + x3960;
  const amrex::Real x3965 = -30000000.0 * sc[10] * x806 + x1053 * x616 + x2343;
  const amrex::Real x3970 = -20000000.0 * sc[4] * x687 - x806 * x991;
  const amrex::Real x3971 =
    30000000.0 * sc[4] * x701 + 20000000.0 * sc[4] * x797 + x3398 + x3970;
  const amrex::Real x3977 =
    -40000000.0 * sc[10] * x687 - 60000000.0 * sc[11] * x806;
  const amrex::Real x3978 =
    40000000.0 * sc[10] * x797 + x1051 * x701 + x3389 + x3977;
  const amrex::Real x3980 =
    30000000.0 * sc[10] * x839 + 50000000.0 * sc[10] * x888 +
    60000000.0 * sc[11] * x839 - 110000000.0 * sc[2] * x839 +
    30000000.0 * sc[4] * x839 + 30000000.0 * x102 * x839 + x1855 * x888 +
    x3946 + x3949 + x3954 + x3961 + x3965 + x3971 + x3978 + x676 * x839 +
    x839 * x991 + x839 * x998;
  const amrex::Real x3982 = x3908 + x3911 + x3919 + x3924 + x3937 + x3980;
  const amrex::Real x3983 =
    0.5916 * sc[6] * exp(-26923.098053884099 * invT + 2.433 * tc[0]);
  const amrex::Real x3986 = x200 * exp(-754.82499870708 * invT);
  const amrex::Real x4024 =
    -15000000.0 * sc[3] * x779 + 15000000.0 * sc[3] * x792;
  const amrex::Real x4040 =
    -40000000.0 * sc[10] * x838 + 40000000.0 * sc[10] * x840 -
    60000000.0 * sc[11] * x841 + 60000000.0 * sc[11] * x849 - x1051 * x779 +
    x1051 * x792;
  const amrex::Real x4047 =
    -30000000.0 * sc[4] * x779 + 30000000.0 * sc[4] * x792 -
    20000000.0 * sc[4] * x838 + 20000000.0 * sc[4] * x840 - x841 * x991 +
    x849 * x991;
  const amrex::Real x4055 =
    -57000000.0 * sc[3] * x841 + 57000000.0 * sc[3] * x849 +
    50000000.0 * sc[4] * x905 - 50000000.0 * sc[4] * x906 + x2668 * x641 -
    x2668 * x642;
  const amrex::Real x4070 =
    26440000000.0 * sc[2] * exp(-8575.3152019782301 * invT - 0.6707 * tc[0]);
  const amrex::Real x4071 =
    -sc[2] * x2315 * x2324 - 665305832.681783 * x2286 * x2322 +
    665305832.681783 * x2290 + 53788000.0 * x2297 * x2305 -
    53788000.0 * x2297 * x2326 - x2305 * x2316 * (0.238 * x2311 + 1.7 * x2312) +
    x2316 * x2326 * (0.238 * x2311 + 1.7 * x2312) - x4070;
  const amrex::Real x4074 =
    90000000.0 * exp(g_RT[10] + g_RT[12] - g_RT[25] - g_RT[2]);
  const amrex::Real x4077 =
    3.7e+18 * exp(
                g_RT[10] + g_RT[21] - g_RT[2] - g_RT[30] -
                6292.7244058880196 * invT - 2.92 * tc[0]);
  const amrex::Real x4079 =
    3.2e+16 * exp(
                g_RT[10] + g_RT[29] - g_RT[2] - g_RT[31] -
                5625.96232369677 * invT - 2.39 * tc[0]);
  const amrex::Real x4083 =
    8000000000000000.0 * exp(
                           g_RT[10] + g_RT[20] - g_RT[29] - g_RT[2] -
                           5625.96232369677 * invT - 2.39 * tc[0]);
  const amrex::Real x4085 =
    sc[10] * exp(-5334.0966575300299 * invT + 0.1 * tc[0]);
  const amrex::Real x4105 =
    5140.0 * exp(-11147.758797572 * invT + 0.86 * tc[0]);
  amrex::Real x4115 = 1500.0 * exp(
                                 g_RT[10] + g_RT[16] - g_RT[24] - g_RT[2] -
                                 1353.6528310147 * invT + 1.43 * tc[0]);
  const amrex::Real x4121 =
    sc[16] * x4115 - sc[24] * x2994 * x994 + x676 * x855 - x676 * x865;
  const amrex::Real x4123 =
    1.5e+18 * exp(-9368.8878839522695 * invT - 2.83 * tc[0]);
  const amrex::Real x4135 =
    -15000000.0 * sc[3] * x796 + 15000000.0 * sc[3] * x814;
  const amrex::Real x4151 =
    84300000.0 * sc[3] + 20000000.0 * sc[4] * x195 - 30000000.0 * sc[4] * x796 +
    30000000.0 * sc[4] * x814 - 20000000.0 * sc[4] * x862 + x855 * x991 -
    x865 * x991;
  const amrex::Real x4161 =
    40000000.0 * sc[10] * x195 - 40000000.0 * sc[10] * x862 +
    60000000.0 * sc[11] * x855 - 60000000.0 * sc[11] * x865 +
    12000000.0 * x1048 * x6 - x1051 * x796 + x1051 * x814 + 40000000.0 * x200;
  const amrex::Real x4168 =
    57000000.0 * sc[3] * x855 - 57000000.0 * sc[3] * x865 -
    50000000.0 * sc[4] * x244 + 50000000.0 * sc[4] * x920 + x231 * x2668;
  const amrex::Real x4176 = -sc[2] * x111 - 70000000.0 * sc[2] * x410 -
                            70000000.0 * sc[6] * x796 +
                            70000000.0 * sc[6] * x814 + x1052 * x195 -
                            x1052 * x862 - 2.477e+21 * x2562 * x2566 * x35;
  const amrex::Real x4179 =
    660.0 * sc[2] * exp(-5454.8686573231598 * invT + 1.62 * tc[0]);
  const amrex::Real x4214 =
    -15000000.0 * sc[3] * x827 + 15000000.0 * sc[3] * x834;
  const amrex::Real x4219 =
    -80000000.0 * sc[3] * x341 + 80000000.0 * sc[3] * x882 -
    30000000.0 * sc[4] * x786 + 30000000.0 * sc[4] * x897 + x3561;
  const amrex::Real x4230 =
    -20000000.0 * sc[4] * x341 - 30000000.0 * sc[4] * x827 +
    30000000.0 * sc[4] * x834 + 20000000.0 * sc[4] * x882 - x786 * x991 +
    x897 * x991;
  const amrex::Real x4238 =
    -40000000.0 * sc[10] * x341 + 40000000.0 * sc[10] * x882 -
    60000000.0 * sc[11] * x786 + 60000000.0 * sc[11] * x897 - x1051 * x827 +
    x1051 * x834 + 60000000.0 * x226;
  const amrex::Real x4244 =
    -57000000.0 * sc[3] * x786 + 57000000.0 * sc[3] * x897 +
    50000000.0 * sc[4] * x937 - 50000000.0 * sc[4] * x938 + x3607 + x3608;
  const amrex::Real x4249 = -70000000.0 * sc[6] * x827 +
                            70000000.0 * sc[6] * x834 - x1052 * x341 +
                            x1052 * x882 + 2.477e+21 * x2562 * x2572 * x503;
  const amrex::Real x4294 =
    -1350000000000.0 * sc[2] * x2248 * x35 * exp(x2249) -
    15000000.0 * sc[2] * x453 - 80000000.0 * sc[2] * x482 -
    30000000.0 * sc[2] * x574 - 120000000.0 * sc[2] +
    80000000.0 * sc[3] * x883 + 30000000.0 * sc[4] * x900;
  const amrex::Real x4295 = x2539 + x2689 + x3906;
  const amrex::Real x4302 =
    15000000.0 * sc[3] * x851 + 57000000.0 * sc[3] * x900 +
    50000000.0 * sc[4] * x948 + 2244000000000.0 * sc[7] * x2532 +
    x2532 * x3092 + x2668 * x649 + x3425;
  const amrex::Real x4310 = x3366 + x3389 + x3398 + x3418 + x3423 + x3930 +
                            x3934 + x3960 + x3970 + x3977;
  const amrex::Real x4314 =
    -30000000.0 * sc[10] * x806 + x2137 + x2343 + x3919 + x3949 - x676 * x806;
  const amrex::Real x4353 =
    -80000000.0 * sc[3] * x886 + 80000000.0 * sc[3] * x895 -
    30000000.0 * sc[4] * x904 + 30000000.0 * sc[4] * x908 + x2264;
  const amrex::Real x4362 =
    -40000000.0 * sc[10] * x886 + 40000000.0 * sc[10] * x895 -
    60000000.0 * sc[11] * x904 + 60000000.0 * sc[11] * x908 + x1051 * x861;
  const amrex::Real x4368 =
    15000000.0 * sc[3] * x861 - 57000000.0 * sc[3] * x904 +
    57000000.0 * sc[3] * x908 + 50000000.0 * sc[4] * x961 -
    50000000.0 * sc[4] * x962 + 8300000.0 * x2524 + x2539 + x2689;
  const amrex::Real x4381 =
    -sc[2] * x2437 * exp(x2421) - sc[2] * x3044 - sc[2] * x3049 -
    sc[2] * x3055 - 30000000.0 * sc[2] * x446 - 20000000.0 * sc[2] * x521 +
    30000000.0 * sc[4] * x861 - 20000000.0 * sc[4] * x886 +
    20000000.0 * sc[4] * x895 - x904 * x991 + x908 * x991;
  const amrex::Real x4432 = 57000000.0 * sc[3] * x915 +
                            50000000.0 * sc[4] * x967 + x2539 + x2668 * x650 -
                            x2668 * x668 + x3906;
  const amrex::Real x4438 =
    4.2 * sc[2] * exp(-2450.6651624689798 * invT + 2.1 * tc[0]);
  const amrex::Real x4525 =
    -50000000.0 * sc[20] * x894 + 50000000.0 * sc[20] * x902 - x1047 * x912 +
    x1047 * x913 + x1932 * (0.42 * x1959 * x249 + 3.0 * x1960 * x249) -
    1.326675e+88 * x1946 * x1951 + 1.326675e+88 * x1946 * x1968 -
    1.995e+48 * x2691 - x2695 * (0.42 * x1959 * x249 + 3.0 * x1960 * x249) +
    1.995e+48 * x2700;
  const amrex::Real x4535 =
    -x1041 * x894 + x1041 * x902 + x2029 * (0.42 * x2030 + 3.0 * x3525) -
    x2032 * (0.42 * x2030 + 3.0 * x3525) - 2.2188e+26 * x2042 * x2045 +
    2.2188e+26 * x2042 * x2062 - 1.29e+17 * x3520 + 1.29e+17 * x3530;
  const amrex::Real x4543 =
    x1982 * x2018 * (0.42 * x2005 * x249 + 3.0 * x2006 * x249) -
    9.39e+26 * x1994 - 4.4196541353383503e+46 * x1996 * x2001 +
    4.4196541353383503e+46 * x1996 * x2014 + 9.39e+26 * x2021 -
    x2750 * (0.42 * x2005 * x249 + 3.0 * x2006 * x249);
  const amrex::Real x4548 = 0.42 * x2190 * x249 + 3.0 * x2208 * x249;
  const amrex::Real x4552 = 2.985e+29 * refC * sc[22] * x2197 * x2202 -
                            1.14014395393474e+47 * x2188 * x2189 +
                            1.14014395393474e+47 * x2188 * x2194 -
                            2.985e+29 * x2197 * x2219 - x2215 * x4548 +
                            x2223 * x4548;
  const amrex::Real x4565 =
    sc[10] * x4115 - 5.7e+29 * sc[2] * x2134 * x2153 +
    20000000.0 * sc[4] * x987 + x2130 * x2158 * (3.0 * x2162 + 0.42 * x2164) -
    x2130 * x2174 * (3.0 * x2162 + 0.42 * x2164) + 5.7e+29 * x2134 * x2169 -
    6.5636363636363603e+50 * x2142 * x2148 +
    6.5636363636363603e+50 * x2142 * x2179 - x676 * x926 + x676 * x931;
  const amrex::Real x4575 =
    50000000.0 * sc[10] * x572 - 50000000.0 * sc[10] * x659 +
    3.8475e+21 * x2088 - 2.5566936528497398e+34 * x2091 * x2093 +
    2.5566936528497398e+34 * x2091 * x2098 -
    x2113 * (0.42 * x2106 + 3.0 * x2108) +
    x2121 * (0.42 * x2106 + 3.0 * x2108) - 3.8475e+21 * x2124;
  const amrex::Real x4597 =
    -80000000.0 * sc[3] * x912 + 80000000.0 * sc[3] * x913 -
    30000000.0 * sc[4] * x926 + 30000000.0 * sc[4] * x931 + sc[6] * x3547 +
    2.5080275229357798e+18 * x2236 * x2240 -
    2.5080275229357798e+18 * x2236 * x2241 + 2025000000000.0 * x2243 -
    2025000000000.0 * x2253 +
    x2258 * x2282 * (3.0 * x2256 * x249 + 0.42 * x2257 * x249) -
    x3551 * (3.0 * x2256 * x249 + 0.42 * x2257 * x249);
  const amrex::Real x4609 =
    -30000000.0 * sc[10] * x926 + 30000000.0 * sc[10] * x931 + x1053 * x987 -
    4.8355263157894698e+29 * x2339 * x2340 +
    4.8355263157894698e+29 * x2339 * x2386 - 2.1e+18 * x2348 * x2352 +
    2.1e+18 * x2348 * x2378 + x2367 * (3.0 * x2358 + 0.42 * x2360) -
    x2381 * (3.0 * x2358 + 0.42 * x2360);
  const amrex::Real x4623 =
    -30000000.0 * sc[4] * x894 + 30000000.0 * sc[4] * x902 -
    20000000.0 * sc[4] * x912 + 20000000.0 * sc[4] * x913 -
    3.3e+18 * x2399 * x2435 - x2402 * (3.0 * x2415 + 0.42 * x2416) -
    1.3444444444444401e+31 * x2404 * x2409 +
    1.3444444444444401e+31 * x2409 * x2411 +
    x2439 * (3.0 * x2415 + 0.42 * x2416) + 3.3e+18 * x3859 - x926 * x991 +
    x931 * x991;
  const amrex::Real x4632 =
    -853156891.321345 * x2286 * x2322 + 853156891.321345 * x2290 +
    68975200.0 * x2297 * x2305 - 68975200.0 * x2297 * x2326 -
    x2305 * x2316 * (0.3052 * x2311 + 2.18 * x2312) +
    x2316 * x2326 * (0.3052 * x2311 + 2.18 * x2312);
  const amrex::Real x4647 =
    -40000000.0 * sc[10] * x912 + 40000000.0 * sc[10] * x913 -
    60000000.0 * sc[11] * x926 + 60000000.0 * sc[11] * x931 - x1051 * x894 +
    x1051 * x902 + 4.5084809802487197e+51 * x2451 * x2452 -
    4.5084809802487197e+51 * x2451 * x2453 - 3.0405e+27 * x2456 * x2468 +
    x2473 * (0.42 * x2457 * x249 + 3.0 * x2459 * x249) + 3.0405e+27 * x2481 -
    x2498 * (0.42 * x2457 * x249 + 3.0 * x2459 * x249);
  const amrex::Real x4655 = x2558 * (0.42 * x249 * x2552 + 3.0 * x249 * x2555);
  const amrex::Real x4665 =
    -70000000.0 * sc[6] * x894 + 70000000.0 * sc[6] * x902 - x1052 * x912 +
    x1052 * x913 - 7.2466877952755894e+32 * x2546 * x2547 +
    7.2466877952755894e+32 * x2546 * x2551 - 3.7155e+21 * x2548 +
    x2568 * x4655 + 3.7155e+21 * x2575 - x2579 * x4655;
  const amrex::Real x4679 =
    327250000000.0 * sc[12] * x2532 - 57000000.0 * sc[2] * x580 -
    50000000.0 * sc[2] * x652 - 57000000.0 * sc[3] * x926 +
    57000000.0 * sc[3] * x931 + 50000000.0 * sc[4] * x572 -
    50000000.0 * sc[4] * x659 - 2244000000000.0 * sc[7] * x2536 * x994 -
    x2536 * x3092 * x994 - 327250000000.0 * x2536 * x424 + x2668 * x674 -
    x2668 * x686 + 8300000.0 * x602 * x994 * exp(x2522);
  const amrex::Real x4708 = 50000000.0 * sc[20] * x135 -
                            50000000.0 * sc[20] * x910 - x1047 * x510 +
                            x1047 * x928 + x3631;
  x3561 = -80000000.0 * sc[3] * x510 + 80000000.0 * sc[3] * x928 -
          30000000.0 * sc[4] * x936 + 30000000.0 * sc[4] * x947 + x3561;
  const amrex::Real x4743 =
    -1706313782.64269 * x2286 * x2322 + 1706313782.64269 * x2290 +
    137950400.0 * x2297 * x2305 - 137950400.0 * x2297 * x2326 -
    x2305 * x2316 * (0.6104 * x2311 + 4.36 * x2312) +
    x2316 * x2326 * (0.6104 * x2311 + 4.36 * x2312);
  const amrex::Real x4750 =
    30000000.0 * sc[4] * x135 - 20000000.0 * sc[4] * x510 -
    30000000.0 * sc[4] * x910 + 20000000.0 * sc[4] * x928 + x3657 -
    x936 * x991 + x947 * x991;
  const amrex::Real x4757 =
    -40000000.0 * sc[10] * x510 + 40000000.0 * sc[10] * x928 -
    60000000.0 * sc[11] * x936 + 60000000.0 * sc[11] * x947 + x1051 * x135 -
    x1051 * x910 + x3665;
  const amrex::Real x4772 =
    673200000000.0 * sc[12] * x2532 - 57000000.0 * sc[3] * x936 +
    57000000.0 * sc[3] * x947 - 50000000.0 * sc[4] * x832 +
    50000000.0 * sc[4] * x837 - 673200000000.0 * x2536 * x424 + x2668 * x297 -
    x2668 * x320;
  const amrex::Real x4777 = 70000000.0 * sc[6] * x135 -
                            70000000.0 * sc[6] * x910 - x1052 * x510 +
                            x1052 * x928 + x3676;
  const amrex::Real x4812 =
    -15000000.0 * sc[3] * x911 + 15000000.0 * sc[3] * x917;
  const amrex::Real x4824 =
    20000000.0 * sc[4] * x878 - 30000000.0 * sc[4] * x911 +
    30000000.0 * sc[4] * x917 - 20000000.0 * sc[4] * x929 - x949 * x991 +
    x956 * x991;
  const amrex::Real x4831 =
    40000000.0 * sc[10] * x878 - 40000000.0 * sc[10] * x929 -
    60000000.0 * sc[11] * x949 + 60000000.0 * sc[11] * x956 - x1051 * x911 +
    x1051 * x917;
  const amrex::Real x4850 =
    7.695e+21 * x2088 - 5.1133873056994796e+34 * x2091 * x2093 +
    5.1133873056994796e+34 * x2091 * x2098 -
    x2113 * (0.84 * x2106 + 6.0 * x2108) +
    x2121 * (0.84 * x2106 + 6.0 * x2108) - 7.695e+21 * x2124;
  x532 = 50000000.0 * sc[10] * x1037 - 50000000.0 * sc[10] * x1038 -
         40000000.0 * sc[2] * x532 - 50000000.0 * sc[2] * x655 -
         x2071 * x2116 * x994 / (x2075 + 1.0) + x4850;
  const amrex::Real x4862 = -70000000.0 * sc[6] * x911 +
                            70000000.0 * sc[6] * x917 + x1052 * x878 -
                            x1052 * x929 + x2687;
  const amrex::Real x4871 = x2130 * x2158 * (6.0 * x2162 + 0.84 * x2164) -
                            x2130 * x2174 * (6.0 * x2162 + 0.84 * x2164) -
                            1.3127272727272701e+51 * x2142 * x2148 +
                            1.3127272727272701e+51 * x2142 * x2179 +
                            1.14e+30 * x2170 - 1.14e+30 * x2177;
  const amrex::Real x4881 = -9.6710526315789494e+29 * x2339 * x2340 +
                            9.6710526315789494e+29 * x2339 * x2386 -
                            4.2e+18 * x2348 * x2352 + 4.2e+18 * x2348 * x2378 +
                            x2367 * (6.0 * x2358 + 0.84 * x2360) -
                            x2381 * (6.0 * x2358 + 0.84 * x2360);
  const amrex::Real x4882 = x104 * x2603 + 33600000.0 * x1909 + x2067 + x2443 +
                            8300000.0 * x2524 + x2539 + x2617 + x2661 + x2689 +
                            x2702 + x2787 + x2796 + x3361 + x4871 + x4881;
  const amrex::Real x4924 = 30000000.0 * sc[10] * x563 - sc[2] * x15 * x2364 -
                            30000000.0 * sc[2] * x565 - 150000000.0 * sc[2] +
                            x1053 * x824;
  const amrex::Real x4934 =
    1.6e+16 * exp(
                g_RT[20] + g_RT[21] - g_RT[2] - g_RT[31] -
                5625.96232369677 * invT - 2.39 * tc[0]);
  const amrex::Real x4966 =
    -50000000.0 * sc[20] * x925 + 50000000.0 * sc[20] * x934 - x1047 * x705 +
    x1047 * x935 + 20000000.0 * x200 * exp(-3019.29999482832 * invT) +
    50000000.0 * x6;
  const amrex::Real x4974 =
    -15000000.0 * sc[3] * x925 + 15000000.0 * sc[3] * x934;
  const amrex::Real x4986 =
    -20000000.0 * sc[4] * x705 - 30000000.0 * sc[4] * x925 +
    30000000.0 * sc[4] * x934 + 20000000.0 * sc[4] * x935 - x966 * x991 +
    x970 * x991;
  const amrex::Real x4991 = -30000000.0 * sc[10] * x966 +
                            30000000.0 * sc[10] * x970 + x1053 * x42 +
                            1.4e+18 * x15 * x2348 * x2349;
  const amrex::Real x4996 =
    50.7 * sc[2] * exp(-6516.6558221711202 * invT + 1.9 * tc[0]);
  const amrex::Real x5004 =
    -40000000.0 * sc[10] * x705 + 40000000.0 * sc[10] * x935 -
    60000000.0 * sc[11] * x966 + 60000000.0 * sc[11] * x970 -
    2.027e+27 * sc[2] * x2468 * x35 * exp(x2463) - sc[2] * x3065 -
    40000000.0 * sc[2] * x527 - 60000000.0 * sc[2] * x577 - x1051 * x925 +
    x1051 * x934 - x4996;
  const amrex::Real x5014 = -70000000.0 * sc[6] * x925 +
                            70000000.0 * sc[6] * x934 - x1052 * x705 +
                            x1052 * x935 + x2687;
  const amrex::Real x5048 = 40000000.0 * sc[10] * x884 +
                            60000000.0 * sc[11] * x977 + x1051 * x941 +
                            2.027e+27 * x2468 * x503 * exp(x2463 + x2477);
  const amrex::Real x5051 = -4990000.0 * sc[2] * x1990 -
                            1.99e+29 * sc[2] * x2197 * x35 * exp(x2201) -
                            2000000.0 * sc[2];
  const amrex::Real x5058 = x3919 + x3949 + x3954 + x3965;
  const amrex::Real x5060 =
    115.0 * sc[2] * exp(-3789.2214935095399 * invT + 1.9 * tc[0]);
  const amrex::Real x5105 =
    -50000000.0 * sc[20] * x477 + 50000000.0 * sc[20] * x952 + x1047 * x365 -
    x1047 * x944 + x1932 * (0.84 * x1959 * x249 + 6.0 * x1960 * x249) -
    2.65335e+88 * x1946 * x1951 + 2.65335e+88 * x1946 * x1968 -
    3.99e+48 * x2691 - x2695 * (0.84 * x1959 * x249 + 6.0 * x1960 * x249) +
    3.99e+48 * x2700;
  const amrex::Real x5115 = x1982 * (0.84 * x2005 * x249 + 6.0 * x2006 * x249);
  const amrex::Real x5119 = -sc[30] * x2011 * x5115 - 1.878e+27 * x1994 -
                            8.8393082706766904e+46 * x1996 * x2001 +
                            8.8393082706766904e+46 * x1996 * x2014 +
                            x2018 * x5115 + 1.878e+27 * x2021;
  const amrex::Real x5130 =
    -2.58e+17 * sc[14] * x2037 * x2040 - x1041 * x477 + x1041 * x952 +
    x2029 * (0.84 * x2030 + 6.0 * x3525) -
    x2032 * (0.84 * x2030 + 6.0 * x3525) + 2.58e+17 * x2037 * x2054 * x607 -
    4.4376e+26 * x2042 * x2045 + 4.4376e+26 * x2042 * x2062;
  const amrex::Real x5135 =
    -15000000.0 * sc[3] * x477 + 15000000.0 * sc[3] * x952;
  const amrex::Real x5147 =
    80000000.0 * sc[3] * x365 - 80000000.0 * sc[3] * x944 +
    30000000.0 * sc[4] * x256 - 30000000.0 * sc[4] * x992 +
    5.0160550458715597e+18 * x2236 * x2240 -
    5.0160550458715597e+18 * x2236 * x2241 + 4050000000000.0 * x2243 -
    4050000000000.0 * x2253 +
    x2258 * x2282 * (6.0 * x2256 * x249 + 0.84 * x2257 * x249) -
    x3551 * (6.0 * x2256 * x249 + 0.84 * x2257 * x249);
  const amrex::Real x5152 = 0.84 * x2190 * x249 + 6.0 * x2208 * x249;
  const amrex::Real x5156 =
    -2.2802879078694799e+47 * x2188 * x2189 +
    2.2802879078694799e+47 * x2188 * x2194 + 1.99e+29 * x2197 * x2202 * x503 -
    5.97e+29 * x2197 * x2219 + 5.97e+29 * x2205 - x2215 * x5152 + x2223 * x5152;
  const amrex::Real x5175 =
    20000000.0 * sc[4] * x365 - 30000000.0 * sc[4] * x477 -
    20000000.0 * sc[4] * x944 + 30000000.0 * sc[4] * x952 -
    6.6e+18 * x2399 * x2435 - x2402 * (6.0 * x2415 + 0.84 * x2416) -
    2.6888888888888901e+31 * x2404 * x2409 +
    2.6888888888888901e+31 * x2409 * x2411 +
    x2439 * (6.0 * x2415 + 0.84 * x2416) + x256 * x991 + 6.6e+18 * x3859 -
    x991 * x992;
  const amrex::Real x5190 =
    6.081e+27 * refC * sc[21] * x2468 * exp(x2463 + x2477) +
    40000000.0 * sc[10] * x365 - 40000000.0 * sc[10] * x944 +
    60000000.0 * sc[11] * x256 - 60000000.0 * sc[11] * x992 - x1051 * x477 +
    x1051 * x952 + 9.0169619604974394e+51 * x2451 * x2452 -
    9.0169619604974394e+51 * x2451 * x2453 - 6.081e+27 * x2456 * x2468 +
    x2473 * (0.84 * x2457 * x249 + 6.0 * x2459 * x249) -
    x2498 * (0.84 * x2457 * x249 + 6.0 * x2459 * x249);
  const amrex::Real x5198 =
    57000000.0 * sc[3] * x256 - 57000000.0 * sc[3] * x992 +
    50000000.0 * sc[4] * x214 - 50000000.0 * sc[4] * x216 + 24900000.0 * x2524 +
    24900000.0 * x2529;
  const amrex::Real x5201 = x2558 * (0.84 * x249 * x2552 + 6.0 * x249 * x2555);
  const amrex::Real x5211 =
    -70000000.0 * sc[6] * x477 + 70000000.0 * sc[6] * x952 + x1052 * x365 -
    x1052 * x944 - 1.4493375590551199e+33 * x2546 * x2547 +
    1.4493375590551199e+33 * x2546 * x2551 - 7.431e+21 * x2548 + x2568 * x5201 +
    7.431e+21 * x2575 - x2579 * x5201;
  const amrex::Real x5263 =
    -20000000.0 * sc[4] * x350 + 20000000.0 * sc[4] * x355 +
    30000000.0 * sc[4] * x958 + x1014 * x991 - x805 * x991;
  const amrex::Real x5269 =
    -40000000.0 * sc[10] * x350 + 40000000.0 * sc[10] * x355 +
    60000000.0 * sc[11] * x1014 - 60000000.0 * sc[11] * x805 + x1051 * x958;
  const amrex::Real x5275 =
    57000000.0 * sc[3] * x1014 - 57000000.0 * sc[3] * x805 +
    50000000.0 * sc[4] * x285 - 50000000.0 * sc[4] * x294 - x2668 * x782;
  const amrex::Real x5315 =
    1500.0 * sc[2] * exp(-1353.6528310147 * invT + 1.43 * tc[0]);
  const amrex::Real x5324 =
    -3.8e+29 * sc[2] * x15 * x2134 * exp(x2151) - 50000000.0 * sc[2] * x2987 -
    sc[2] * x2990 * x2994 - sc[2] * x3001 - sc[2] * x3013 - sc[2] * x387 -
    20000000.0 * sc[2] * x389 + 20000000.0 * sc[4] * x617 - x5315 + x676 * x831;
  const amrex::Real x5331 =
    3.8e+29 * refC * x15 * x2134 * exp(-g_RT[24] + g_RT[25] - g_RT[2] + x2151);
  const amrex::Real x5335 = sc[2] * exp(-2516.0833290236001 * invT);
  const amrex::Real x5351 = 30000000.0 * sc[20] * x1028 - sc[2] * x2889 -
                            sc[2] * x2895 - 30000000.0 * sc[2] * x584 + x3945;
  const amrex::Real x5375 = 1.52e+53 * refC *
                            exp(
                              -g_RT[27] + g_RT[28] - g_RT[2] -
                              13561.185926771401 * invT - 13.54 * tc[0]);
  const amrex::Real x5391 =
    -sc[2] * x1971 - sc[2] * x2953 - 20000000.0 * sc[2] * x2956 -
    50000000.0 * sc[2] * x399 - 18000000.0 * sc[2] + x1047 * x366;
  const amrex::Real x5405 =
    0.173 * sc[2] * exp(-1253.00949785375 * invT + 2.5 * tc[0]);
  const amrex::Real x5510 =
    90.0 * sc[2] * exp(-29266.0748498709 * invT + 1.7 * tc[0]);
  const amrex::Real x5560 = 57000000.0 * sc[3] * x291 + sc[4] * x247 +
                            50000000.0 * sc[4] * x357 + x2668 * x537 -
                            x2668 * x540;
  amrex::Real x5569 = -3270.90832773068 * invT + tc[0] - x369 - x549;
  const amrex::Real x5574 = kf_qss[6] * ((sc[3]) * (sc[3])) * x472 * exp(x5569);
  const amrex::Real x5576 =
    kf_qss[6] * refC * sc[33] * sc[3] * exp(x1699 + x5569) / x373;
  const amrex::Real x5580 = refC * sc[33] * exp(-1.41 * tc[0] + x1699);
  const amrex::Real x5583 =
    kf_qss[6] * ((sc[3]) * (sc[3])) * x35 * x472 * exp(-1.41 * tc[0]);
  const amrex::Real x5586 = sc[3] * x602 * exp(-1.41 * tc[0]);
  const amrex::Real x5588 = refC * exp(-2.0 * g_RT[3] + g_RT[9] - tc[0]);
  const amrex::Real x5589 = sc[9] * x5588;
  const amrex::Real x5590 = ((sc[3]) * (sc[3])) * x818;
  const amrex::Real x5591 = kf_qss[6] * sc[3] * x35 / x373;
  const amrex::Real x5593 = g_RT[16] - g_RT[3] - 0.5 * tc[0] - x370;
  const amrex::Real x5596 = sc[16] * x104 * exp(x5593);
  const amrex::Real x5598 = sc[16] * x1700 * exp(x1699 + x5593);
  const amrex::Real x5602 =
    -g_RT[3] + g_RT[9] + 120.77199979313301 * invT - x362;
  const amrex::Real x5603 = x1700 * exp(x1699 + x5602);
  const amrex::Real x5604 = sc[9] * x5603;
  const amrex::Real x5607 = x104 * exp(x5602);
  const amrex::Real x5625 =
    58000000.0 * sc[9] * exp(-289.85279950351901 * invT);
  amrex::Real x5628 =
    86123348.0176211 * x2824 * exp(-909.31251510912796 * invT - 2.79 * tc[0]) +
    1.0;
  const amrex::Real x5629 = x2824 / ((x5628) * (x5628));
  const amrex::Real x5632 =
    sc[16] * sc[3] * exp(-3018.29356149671 * invT - 5.58 * tc[0]);
  const amrex::Real x5636 =
    refC * sc[17] *
    exp(
      -g_RT[16] + g_RT[17] - g_RT[3] - 3018.29356149671 * invT - 5.58 * tc[0]);
  const amrex::Real x5642 =
    sc[16] * sc[3] * exp(-2108.9810463875801 * invT - 2.79 * tc[0]) / x5628;
  const amrex::Real x5645 = exp(
                              -g_RT[16] + g_RT[17] - g_RT[3] -
                              2108.9810463875801 * invT - 2.79 * tc[0]) /
                            x5628;
  const amrex::Real x5646 = refC * sc[17] * x5645;
  const amrex::Real x5648 = x5625 * x647 - x5625 * x669 +
                            7.0715881057268703e+19 * x5629 * x5632 -
                            7.0715881057268703e+19 * x5629 * x5636 -
                            821100000000.0 * x5642 + 821100000000.0 * x5646;
  x5569 = 9000.0 * exp(x5569);
  const amrex::Real x5650 = sc[3] * x5569;
  const amrex::Real x5653 = 106000000.0 * sc[3] * x35 * exp(-1.41 * tc[0]);
  const amrex::Real x5656 = 2000000000.0 * sc[16] * exp(x5593);
  const amrex::Real x5658 = -x104 * x5656;
  const amrex::Real x5662 = 3900000.0 * sc[9] * exp(x5602);
  const amrex::Real x5664 = -x104 * x5662;
  const amrex::Real x5681 = kf_qss[6] * ((sc[3]) * (sc[3])) * x472 * x5569 -
                            x104 * x1718 + 106000000.0 * x5583;
  const amrex::Real x5686 = 1.0102268722467e+20 * x5629 * x5632 -
                            1.0102268722467e+20 * x5629 * x5636 -
                            1173000000000.0 * x5642 + 1173000000000.0 * x5646;
  const amrex::Real x5689 = x2784 + 240000.0 * x5589 - 240000.0 * x5590;
  const amrex::Real x5691 =
    106000000.0 * x5580 + 106000000.0 * x5586 + x5686 + x5689;
  const amrex::Real x5723 =
    20.0 * sc[27] * exp(-503.21666580471998 * invT + 1.8 * tc[0]);
  const amrex::Real x5726 =
    9.63 * exp(-1997.7701632447399 * invT + 2.0 * tc[0]);
  const amrex::Real x5731 =
    300000.0 *
    exp(-g_RT[19] + g_RT[25] - 5.5353833238519199 * invT + 0.29 * tc[0] - x549);
  const amrex::Real x5740 =
    330.0 * sc[31] * exp(202.29309965349699 * invT + 1.45 * tc[0]);
  const amrex::Real x5747 =
    89.8 * sc[22] * exp(-2863.3028284288498 * invT + 1.92 * tc[0]);
  const amrex::Real x5751 =
    1020.0 * exp(-4327.6633259205901 * invT + 1.5 * tc[0]);
  const amrex::Real x5756 =
    0.13 * sc[15] * exp(-2516.0833290236001 * invT + 2.5 * tc[0]);
  const amrex::Real x5759 =
    1119000.0 * exp(-g_RT[16] + g_RT[17] - 24003.4349588851 * invT - x549);
  const amrex::Real x5767 = 39000000.0 * exp(-1781.38699694871 * invT);
  const amrex::Real x5776 = 0.83 * sc[0] + 2.4 * sc[6] + 15.4 * sc[7] + x2823;
  const amrex::Real x5780 =
    2.2 * exp(-24065.330608779099 * invT + 2.11 * tc[0]);
  const amrex::Real x5785 = 2000000000.0 * exp(-0.5 * tc[0]);
  const amrex::Real x5791 = 3900000.0 * exp(120.77199979313301 * invT);
  const amrex::Real x5799 =
    180000.0 * sc[29] * exp(-2958.91399493175 * invT + 0.7 * tc[0]);
  const amrex::Real x5802 =
    35.0 * sc[29] * exp(489.12659916218797 * invT + 1.65 * tc[0]);
  const amrex::Real x5806 =
    30830000.0 *
    exp(-g_RT[10] + g_RT[14] + g_RT[3] - g_RT[9] - 14492.6399751759 * invT);
  const amrex::Real x5812 = 1750000.0 * exp(-679.34249883637199 * invT);
  const amrex::Real x5815 =
    -10000000.0 * sc[24] * x2987 - sc[24] * x5812 + x125 * x628 - x628 * x710;
  const amrex::Real x5817 = exp(
    g_RT[3] - 2.0 * g_RT[4] + g_RT[7] + 1061.78716484796 * invT + 2.4 * tc[0]);
  const amrex::Real x5829 =
    15.1 * sc[20] * exp(-1882.0303301096501 * invT + 1.9 * tc[0]);
  const amrex::Real x5834 =
    -19.584 * sc[20] * exp(x1058) + x1063 * x125 - x1063 * x710 - x5829;
  x5628 = 1173000000000.0 * x2824 *
          exp(-2108.9810463875801 * invT - 2.79 * tc[0]) / x5628;
  x549 =
    58000000.0 * exp(g_RT[16] - g_RT_qss[0] - 289.85279950351901 * invT - x549);
  const amrex::Real x5842 =
    -sc[16] * x549 - sc[16] * x5628 + x5625 * x747 - x5625 * x748;
  const amrex::Real x5843 =
    2.2 *
    exp(
      -g_RT[35] + g_RT[36] - 24065.330608779099 * invT + 2.11 * tc[0] - x3074);
  const amrex::Real x5845 =
    exp(g_RT[24] - g_RT[25] - 2012.8666632188799 * invT - x3074);
  const amrex::Real x5847 =
    9.63 * exp(-1997.7701632447399 * invT + 2.0 * tc[0] - x3074 - x666);
  const amrex::Real x5849 =
    89.8 *
    exp(g_RT[21] - g_RT[22] - 2863.3028284288498 * invT + 1.92 * tc[0] - x3074);
  const amrex::Real x5851 =
    1020.0 *
    exp(g_RT[10] - g_RT[11] - 4327.6633259205901 * invT + 1.5 * tc[0] - x3074);
  const amrex::Real x5854 =
    180000.0 *
    exp(g_RT[28] - g_RT[29] - 2958.91399493175 * invT + 0.7 * tc[0] - x3074);
  const amrex::Real x5857 =
    0.13 *
    exp(g_RT[14] - g_RT[15] - 2516.0833290236001 * invT + 2.5 * tc[0] - x3074);
  const amrex::Real x5861 =
    10000000.0 * sc[13] * exp(g_RT[13] - g_RT[14] - x3074);
  const amrex::Real x5862 = 40000000.0 * exp(-g_RT[3] + g_RT[9] - x513);
  const amrex::Real x5864 =
    39000000.0 * exp(g_RT[12] - g_RT[13] - 1781.38699694871 * invT - x3074);
  const amrex::Real x5866 = sc[4] * exp(1061.78716484796 * invT + 2.4 * tc[0]);
  const amrex::Real x5883 =
    10000000.0 * exp(g_RT[23] - g_RT[24] - 4025.7333264377598 * invT - x3074);
  const amrex::Real x5890 = 30000000.0 * exp(-g_RT[12] + g_RT[16] - x3074);
  const amrex::Real x5895 =
    15.1 *
    exp(g_RT[19] - g_RT[20] - 1882.0303301096501 * invT + 1.9 * tc[0] - x3074);
  const amrex::Real x5923 = -30000000.0 * sc[3] * x701;
  const amrex::Real x5926 =
    -x1755 + 9000.0 * x5576 + 106000000.0 * x5580 * x5591;
  const amrex::Real x5931 = 30000000.0 * sc[3] * x738 + 106000000.0 * x5580 +
                            106000000.0 * x5586 + x5689;
  const amrex::Real x5964 =
    -7800000.0 * sc[9] * x5607 + x1767 + 18000.0 * x5574 + 18000.0 * x5576 +
    212000000.0 * x5580 * x5591 + 212000000.0 * x5580 + 212000000.0 * x5583 +
    212000000.0 * x5586 - 4000000000.0 * x5596 - 4000000000.0 * x5598 -
    7800000.0 * x5604;
  const amrex::Real x5972 = x5625 * x842 - x5625 * x844 +
                            2.0204537444933901e+20 * x5629 * x5632 -
                            2.0204537444933901e+20 * x5629 * x5636 -
                            2346000000000.0 * x5642 + 2346000000000.0 * x5646;
  const amrex::Real x6005 = x5625 * x864 - x5625 * x875 +
                            1.2122722466960399e+21 * x5629 * x5632 -
                            1.2122722466960399e+21 * x5629 * x5636 -
                            14076000000000.0 * x5642 + 14076000000000.0 * x5646;
  const amrex::Real x6010 = -x628 * x687;
  const amrex::Real x6011 =
    80000000.0 * sc[3] * x687 + 57000000.0 * sc[3] * x806 + x6010;
  const amrex::Real x6012 = x5681 + x5931 + x6011;
  const amrex::Real x6015 =
    -2000000000.0 * x5598 - 3900000.0 * x5604 + x5658 + x5664;
  const amrex::Real x6018 = -33000000.0 * sc[9] * x806;
  const amrex::Real x6023 = -x5625 * x889 + x5686;
  const amrex::Real x6027 = -x261 * x687;
  const amrex::Real x6032 = -x1063 * x687;
  const amrex::Real x6034 = -80000000.0 * sc[3] * x797 + x1063 * x797 +
                            x261 * x797 + x6027 + x6032 + x628 * x797;
  const amrex::Real x6035 = -57000000.0 * sc[3] * x839 +
                            33000000.0 * sc[9] * x839 + x5625 * x888 + x6018 +
                            x6023 + x6034;
  const amrex::Real x6037 = x5923 + x5926 + x6012 + x6015 + x6035;
  const amrex::Real x6039 =
    300000.0 * sc[19] * exp(-5.5353833238519199 * invT + 0.29 * tc[0]);
  const amrex::Real x6040 =
    36000000.0 * exp(g_RT[14] - g_RT[37] - g_RT[3] + g_RT[9]);
  const amrex::Real x6043 = 1119000.0 * sc[16] * exp(-24003.4349588851 * invT);
  const amrex::Real x6044 = 30830000.0 * exp(-14492.6399751759 * invT);
  const amrex::Real x6048 = 9000.0 * exp(-3270.90832773068 * invT + tc[0]);
  const amrex::Real x6080 =
    16040000.0 * exp(g_RT[10] + g_RT[13] - g_RT[21] - g_RT[3]);
  const amrex::Real x6083 =
    48000000.0 * exp(g_RT[10] + g_RT[16] - g_RT[19] - g_RT[3]);
  const amrex::Real x6101 =
    19.2 * exp(g_RT[10] + g_RT[12] - g_RT[20] - g_RT[3] + x1058);
  const amrex::Real x6128 = 330.0 * exp(
                                      g_RT[12] + g_RT[30] - g_RT[31] - g_RT[3] +
                                      202.29309965349699 * invT + 1.45 * tc[0]);
  const amrex::Real x6132 = 35.0 * exp(
                                     g_RT[12] + g_RT[21] - g_RT[29] - g_RT[3] +
                                     489.12659916218797 * invT + 1.65 * tc[0]);
  const amrex::Real x6152 =
    96000000.0 * exp(g_RT[13] + g_RT[21] - g_RT[30] - g_RT[3]);
  x3074 = 10000000.0 * sc[4] * exp(g_RT[13] - g_RT[14] - x3074);
  const amrex::Real x6201 =
    0.13 * sc[3] * exp(-2516.0833290236001 * invT + 2.5 * tc[0]);
  const amrex::Real x6209 = 20.0 * exp(
                                     g_RT[16] + g_RT[20] - g_RT[27] - g_RT[3] -
                                     503.21666580471998 * invT + 1.8 * tc[0]);
  const amrex::Real x6211 = 1119000.0 * sc[9] * exp(-24003.4349588851 * invT);
  const amrex::Real x6249 = -sc[3] * x549 - sc[3] * x5628 + x5625 * x572 -
                            x5625 * x659 +
                            1.7678970264317202e+20 * x5629 * x5632 -
                            1.7678970264317202e+20 * x5629 * x5636 -
                            2052750000000.0 * x5642 + 2052750000000.0 * x5646;
  const amrex::Real x6282 = 1173000000000.0 * refC * x2824 * x5645 -
                            x5625 * x832 + x5625 * x837 +
                            3.6368167400881101e+20 * x5629 * x5632 -
                            3.6368167400881101e+20 * x5629 * x5636 -
                            4222800000000.0 * x5642 + 4222800000000.0 * x5646;
  const amrex::Real x6299 =
    300000.0 * sc[9] * exp(-5.5353833238519199 * invT + 0.29 * tc[0]);
  const amrex::Real x6306 =
    x5926 + x6012 + x6015 + x6018 + x6023 + x6027 + x6032;
  const amrex::Real x6325 =
    15.1 * sc[3] * exp(-1882.0303301096501 * invT + 1.9 * tc[0]);
  const amrex::Real x6327 =
    -19.584 * sc[3] * exp(x1058) - x1063 * x705 + x1063 * x935 - x6325;
  const amrex::Real x6338 =
    89.8 * sc[3] * exp(-2863.3028284288498 * invT + 1.92 * tc[0]);
  const amrex::Real x6407 =
    20.0 * sc[3] * exp(-503.21666580471998 * invT + 1.8 * tc[0]);
  const amrex::Real x6419 =
    180000.0 * sc[3] * exp(-2958.91399493175 * invT + 0.7 * tc[0]);
  const amrex::Real x6420 =
    35.0 * sc[3] * exp(489.12659916218797 * invT + 1.65 * tc[0]);
  const amrex::Real x6423 =
    330.0 * sc[3] * exp(202.29309965349699 * invT + 1.45 * tc[0]);
  x32 = x2823 + x32;
  x2823 = log(
    0.2654 * exp(-0.010638297872340399 * tc[1]) +
    0.7346 * exp(-0.000569476082004556 * tc[1]) + exp(-5182.0 * invT));
  amrex::Real x6504 = 0.0018108108108108099 * x32 *
                      exp(1153.8758146902201 * invT - 0.214 * tc[0]);
  amrex::Real x6505 =
    -0.29097730287517898 * x2823 + 0.43429448190325198 * log(x6504) - 0.4;
  amrex::Real x6506 = -0.55155399201712996 * x2823 - 0.14 * x6505 + 0.75;
  amrex::Real x6509 = ((x6505) * (x6505)) / ((x6506) * (x6506)) + 1.0;
  const amrex::Real x6512 =
    exp(M_LN10 * (0.43429448190325198 * x2823 / x6509)) * x32 /
    ((x6504 + 1.0) * (x6504 + 1.0));
  const amrex::Real x6517 =
    refC * sc[8] *
    exp(-2.0 * g_RT[4] + g_RT[8] + 2307.7516293804401 * invT - 0.798 * tc[0]);
  const amrex::Real x6518 = x6512 * x6517;
  const amrex::Real x6521 =
    exp(M_LN10 * (0.43429448190325198 * x2823 / x6509)) *
    exp(-2.0 * g_RT[4] + g_RT[8] + 1153.8758146902201 * invT - 0.584 * tc[0]) /
    (x6504 + 1.0);
  const amrex::Real x6522 = refC * sc[8] * x6521;
  const amrex::Real x6526 = 0.43429448190325198 * ((x6505) * (x6505)) /
                            (x32 * ((x6506) * (x6506) * (x6506)));
  const amrex::Real x6528 =
    0.43429448190325198 * x6505 / (x32 * ((x6506) * (x6506)));
  const amrex::Real x6532 =
    402000.0 * x2823 * x32 * x6522 / ((x6509) * (x6509));
  const amrex::Real x6535 = ((sc[4]) * (sc[4])) * x6512 *
                            exp(2307.7516293804401 * invT - 0.798 * tc[0]);
  x6504 = exp(M_LN10 * (0.43429448190325198 * x2823 / x6509)) *
          exp(1153.8758146902201 * invT - 0.584 * tc[0]) / (x6504 + 1.0);
  const amrex::Real x6537 = ((sc[4]) * (sc[4])) * x6504;
  const amrex::Real x6542 =
    402000.0 * x2823 * x32 * x6537 / ((x6509) * (x6509));
  const amrex::Real x6549 =
    1477000.0 * sc[5] * x104 * exp(241.54399958626499 * invT);
  const amrex::Real x6550 = x1700 * exp(241.54399958626499 * invT + x1699);
  amrex::Real x6562 = log(
    0.7895 * exp(-0.0119760479041916 * tc[1]) +
    0.2105 * exp(-0.00018525379770285299 * tc[1]) + exp(-8370.0 * invT));
  amrex::Real x6563 =
    -0.29097730287517898 * x6562 +
    0.43429448190325198 * log(4.2857142857142902e+18 * x91 * x92) - 0.4;
  amrex::Real x6565 = -0.55155399201712996 * x6562 - 0.14 * x6563 + 0.75;
  const amrex::Real x6566 =
    ((x6563) * (x6563)) * x808 / ((x6565) * (x6565) * (x6565));
  const amrex::Real x6568 = x6563 * x808 / ((x6565) * (x6565));
  const amrex::Real x6570 =
    x6562 / ((((x6563) * (x6563)) / ((x6565) * (x6565)) + 1.0) *
             (((x6563) * (x6563)) / ((x6565) * (x6565)) + 1.0));
  amrex::Real x6571 = x6570 * (0.28 * x6566 + 2.0 * x6568);
  const amrex::Real x6576 =
    exp(
      M_LN10 * (0.43429448190325198 * x6562 /
                (((x6563) * (x6563)) / ((x6565) * (x6565)) + 1.0))) /
    (4.2857142857142902e+18 * x91 * x92 + 1.0);
  const amrex::Real x6577 =
    x6576 *
    exp(-g_RT[10] + g_RT[15] - g_RT[4] - 1559.97166399463 * invT - 6.3 * tc[0]);
  const amrex::Real x6579 = 2.7e+26 * sc[15] * x426 * x6577;
  const amrex::Real x6582 = sc[10] * sc[4] * x6576;
  const amrex::Real x6586 = sc[10] * sc[4] * x6576 * x94;
  x6562 =
    5.444444444444433e-38 *
    exp(
      M_LN10 * (0.43429448190325198 * x6562 /
                (((x6563) * (x6563)) / ((x6565) * (x6565)) + 1.0))) /
    ((x91 * x92 + 2.333333333333331e-19) * (x91 * x92 + 2.333333333333331e-19));
  x6563 = sc[10] * sc[4] * x92 * exp(-3119.9433279892601 * invT - 12.6 * tc[0]);
  x6565 = sc[15] * x426 *
          exp(
            -g_RT[10] + g_RT[15] - g_RT[4] - 3119.9433279892601 * invT -
            12.6 * tc[0]);
  const amrex::Real x6597 =
    2.7e+26 * x607 * x6577 + 1.15714285714286e+45 * x6562 * x6563 -
    1.15714285714286e+45 * x6562 * x6565 - x6571 * x6579 + x6571 * x6586 -
    2.7e+26 * x6582 * x91;
  const amrex::Real x6598 =
    -x281 * x359 + x281 * x368 + x289 * x296 - x296 * x315 + x6597;
  const amrex::Real x6603 = -x104 * x2603;
  const amrex::Real x6608 = 2110000.0 * sc[5] * exp(241.54399958626499 * invT);
  const amrex::Real x6609 = x104 * x6608;
  const amrex::Real x6621 =
    -x281 * x347 + x281 * x689 - x296 * x620 + x296 * x670 + x6597;
  x6505 = 0.121602454932911 * ((x6505) * (x6505)) /
            (x32 * ((x6506) * (x6506) * (x6506))) +
          0.86858896380650397 * x6505 / (x32 * ((x6506) * (x6506)));
  x6506 = 9428000.0 * x2502 - 9428000.0 * x2505 - x6505 * x6532 +
          x6505 * x6542 - 727.94594594594605 * x6518 + 402000.0 * x6522 +
          727.94594594594605 * x6535 - 402000.0 * x6537;
  const amrex::Real x6627 = -20000000.0 * sc[4] * x616 + x6506;
  const amrex::Real x6636 =
    -x2668 * x54 + x2668 * x619 - 8300000.0 * x423 * x602 * exp(x2522);
  const amrex::Real x6644 = x2661 + x6597;
  const amrex::Real x6651 =
    32000000.0 * sc[14] + x281 * x688 - x281 * x690 - x296 * x678 + x296 * x703;
  const amrex::Real x6671 =
    sc[11] * x5751 + x125 * x281 - x281 * x710 - x296 * x717 + x296 * x719;
  const amrex::Real x6673 =
    2820000.0 * exp(-g_RT[20] + g_RT[26] - 8605.0049852607099 * invT - x513);
  const amrex::Real x6677 = 33.0 * exp(-1811.57999689699 * invT + 1.5 * tc[0]);
  const amrex::Real x6684 =
    3.54 * sc[22] * exp(-437.79849925010598 * invT + 2.12 * tc[0]);
  const amrex::Real x6688 =
    100.0 * sc[11] * exp(-1570.03599731073 * invT + 1.6 * tc[0]);
  const amrex::Real x6692 =
    0.157 *
    exp(-g_RT[16] + g_RT[17] - 9029.0203800344207 * invT + 2.18 * tc[0] - x513);
  const amrex::Real x6696 = 3.1 * exp(149.958566409806 * invT + 2.0 * tc[0]);
  const amrex::Real x6700 = 6.3 * exp(-754.82499870708 * invT + 2.0 * tc[0]);
  const amrex::Real x6706 =
    18000.0 * exp(g_RT[13] + g_RT[16] - g_RT[25] + g_RT[4] - g_RT[9]);
  const amrex::Real x6711 = exp(
    2.0 * g_RT[16] - g_RT[23] + g_RT[4] - g_RT[9] - 429.747032597231 * invT);
  const amrex::Real x6721 = exp(-1006.43333160944 * invT);
  const amrex::Real x6725 =
    10000000.0 * sc[25] * exp(-g_RT[19] + g_RT[25] - x513);
  const amrex::Real x6728 =
    2.67e+35 * exp(-18920.9466342575 * invT - 7.0 * tc[0]);
  const amrex::Real x6731 = 2000000.0 * exp(-214.87351629861499 * invT);
  const amrex::Real x6735 =
    -sc[36] * x247 - sc[36] * x5843 - x157 * x2668 + x2668 * x633;
  const amrex::Real x6738 =
    2110000.0 * exp(241.54399958626499 * invT - x375 - x513);
  const amrex::Real x6745 =
    4.83e-10 * sc[18] * exp(1006.43333160944 * invT + 4.0 * tc[0]);
  const amrex::Real x6749 = exp(g_RT[13] + g_RT[21] - g_RT[30] - x513);
  const amrex::Real x6750 = refCinv * sc[13];
  const amrex::Real x6752 = 24000000.0 * sc[21] * x6749 * x6750;
  const amrex::Real x6756 = 13400000.0 * exp(-g_RT[10] + g_RT[14] - x513);
  const amrex::Real x6758 =
    -sc[14] * x3225 - sc[14] * x5857 - sc[14] * x6756 - 5000000.0 * sc[14];
  const amrex::Real x6762 =
    10600000.0 *
    exp(g_RT[12] + g_RT[4] - g_RT[9] - g_RT_qss[2] - 754.82499870708 * invT);
  const amrex::Real x6765 = -sc[12] * x5864 - sc[12] * x6762 -
                            30200000.0 * sc[12] - 10600000.0 * x1011 * x171 +
                            10600000.0 * x1011 * x732;
  const amrex::Real x6767 =
    1.0e+130 * exp(-17511.939970004201 * invT - 40.0 * tc[0]);
  const amrex::Real x6770 =
    1.12e+79 * exp(-13536.528310147 * invT - 22.3 * tc[0]);
  const amrex::Real x6773 =
    1410000000000.0 * exp(-30.192999948283202 * invT - 1.76 * tc[0]);
  const amrex::Real x6776 =
    2510000.0 * exp(-20128.666632188801 * invT + 2.0 * tc[0]);
  const amrex::Real x6779 =
    5.37e+64 * exp(-16555.828304975301 * invT - 16.72 * tc[0]);
  const amrex::Real x6781 = -sc[5] * x5847 - sc[5] * x6767 - sc[5] * x6770 -
                            sc[5] * x6773 - sc[5] * x6776 - sc[5] * x6779;
  amrex::Real x6783 = exp(g_RT[13] + g_RT[19] - g_RT[28] - x513);
  const amrex::Real x6785 = 6600000.0 * sc[19] * x6750 * x6783;
  const amrex::Real x6789 = 3.6 * exp(-1258.0416645118 * invT + 2.0 * tc[0]);
  const amrex::Real x6796 =
    3430.0 * sc[13] * exp(224.93784961470999 * invT + 1.18 * tc[0]);
  const amrex::Real x6797 = exp(g_RT[10] + g_RT[13] - g_RT[21] - x513);
  const amrex::Real x6801 =
    36000.0 *
    exp(-g_RT[10] + g_RT[13] + g_RT[4] - g_RT[9] - 4498.7569922941902 * invT);
  const amrex::Real x6804 = -24000000.0 * sc[13] * x2990 * x6797 -
                            20000000.0 * sc[13] * x514 - sc[13] * x6801 -
                            20000000.0 * sc[5] * x171 +
                            20000000.0 * sc[5] * x732 - x5861 - x6796;
  const amrex::Real x6808 = -sc[16] * x3271 - sc[16] * x3273 - sc[16] * x5890 -
                            28000000.0 * x421 * x424;
  const amrex::Real x6812 =
    56.0 * exp(-2727.4343286615799 * invT + 1.6 * tc[0]);
  const amrex::Real x6816 =
    -sc[10] * x3279 - sc[10] * x5851 - sc[10] * x6576 * x94 - sc[10] * x6812 -
    25010000.0 * sc[10] - x171 * x281 + x281 * x732 - x296 * x730 + x296 * x737;
  const amrex::Real x6821 =
    0.157 * sc[16] * exp(-9029.0203800344207 * invT + 2.18 * tc[0]);
  const amrex::Real x6826 = 2820000.0 * exp(-8605.0049852607099 * invT);
  const amrex::Real x6833 = sc[5] * x6550;
  const amrex::Real x6840 =
    2000000.0 * exp(-214.87351629861499 * invT - x666 - x85);
  const amrex::Real x6842 =
    2.67e+35 * exp(-18920.9466342575 * invT - 7.0 * tc[0] - x666 - x85);
  const amrex::Real x6849 = 24000000.0 * sc[21] + 6600000.0 * sc[28] +
                            24000000.0 * sc[30] - 20000000.0 * sc[5] * x740 +
                            20000000.0 * sc[5] * x741 + 20000000.0 * x200;
  const amrex::Real x6853 = -x296 * x738;
  const amrex::Real x6861 = -sc[4] * x5847 - sc[4] * x6767 - sc[4] * x6770 -
                            sc[4] * x6773 - sc[4] * x6776 - sc[4] * x6779;
  const amrex::Real x6879 = sc[5] * x104 * exp(241.54399958626499 * invT);
  const amrex::Real x6892 =
    5.4e+26 * x607 * x6577 + 2.3142857142857099e+45 * x6562 * x6563 -
    2.3142857142857099e+45 * x6562 * x6565 -
    x6570 * x6579 * (0.56 * x6566 + 4.0 * x6568) +
    x6570 * x6586 * (0.56 * x6566 + 4.0 * x6568) - 5.4e+26 * x6582 * x91;
  const amrex::Real x6893 = 264000000.0 * sc[4] * x1922 +
                            264000000.0 * sc[4] * x1925 - 67200000.0 * x1909 -
                            67200000.0 * x1913 - x3607 - x3608 -
                            4220000.0 * x6833 - 4220000.0 * x6879 + x6892;
  const amrex::Real x6900 =
    10000000.0 * exp(g_RT[24] - g_RT[25] - 1006.43333160944 * invT - x85);
  const amrex::Real x6903 = 24000000.0 * exp(g_RT[29] - g_RT[30] - x85);
  const amrex::Real x6905 =
    3.54 *
    exp(g_RT[21] - g_RT[22] - 437.79849925010598 * invT + 2.12 * tc[0] - x85);
  const amrex::Real x6907 =
    100.0 *
    exp(g_RT[10] - g_RT[11] - 1570.03599731073 * invT + 1.6 * tc[0] - x85);
  const amrex::Real x6909 = 6000000.0 * exp(g_RT[27] - g_RT[28] - x85);
  const amrex::Real x6911 =
    3.1 *
    exp(g_RT[28] - g_RT[29] + 149.958566409806 * invT + 2.0 * tc[0] - x85);
  const amrex::Real x6913 =
    7500000.0 * exp(g_RT[23] - g_RT[24] - 1006.43333160944 * invT - x85);
  const amrex::Real x6915 = 5000000.0 * exp(g_RT[13] - g_RT[14] - x85);
  const amrex::Real x6917 =
    exp(g_RT[14] - g_RT[15] - 754.82499870708 * invT + 2.0 * tc[0] - x85);
  const amrex::Real x6919 = 30110000.0 * exp(g_RT[18] - g_RT[19] - x85);
  const amrex::Real x6921 =
    3.6 * exp(g_RT[19] - g_RT[20] - 1258.0416645118 * invT + 2.0 * tc[0] - x85);
  const amrex::Real x6927 =
    33.0 *
    exp(-g_RT[35] + g_RT[36] - 1811.57999689699 * invT + 1.5 * tc[0] - x85);
  amrex::Real x6941 = -g_RT[5] + g_RT[9] - x85;
  const amrex::Real x6942 =
    1410000000000.0 * exp(-30.192999948283202 * invT - 1.76 * tc[0] + x6941);
  const amrex::Real x6944 =
    1.12e+79 * exp(-13536.528310147 * invT - 22.3 * tc[0] + x6941);
  const amrex::Real x6946 =
    5.37e+64 * exp(-16555.828304975301 * invT - 16.72 * tc[0] + x6941);
  const amrex::Real x6948 =
    1.0e+130 * exp(-17511.939970004201 * invT - 40.0 * tc[0] + x6941);
  x6941 = 2510000.0 * exp(-20128.666632188801 * invT + 2.0 * tc[0] + x6941);
  const amrex::Real x6953 = 30200000.0 * exp(-g_RT[12] + g_RT[16] - x85);
  x85 =
    3430.0 *
    exp(g_RT[12] - g_RT[13] + 224.93784961470999 * invT + 1.18 * tc[0] - x85);
  const amrex::Real x6975 =
    x169 * x200 - x281 * x759 + x281 * x766 - x296 * x765 + x296 * x773 +
    25010000.0 * x6 * x87 + 1.62e+27 * x607 * x6577 +
    6.9428571428571398e+45 * x6562 * x6563 -
    6.9428571428571398e+45 * x6562 * x6565 -
    x6570 * x6579 * (1.68 * x6566 + 12.0 * x6568) +
    x6570 * x6586 * (1.68 * x6566 + 12.0 * x6568) - 1.62e+27 * x6582 * x91;
  const amrex::Real x6981 = -x281 * x687 + x6853;
  const amrex::Real x6986 = 132000000.0 * sc[4] * x1925 - 33600000.0 * x1909 -
                            8300000.0 * x2524 - x2689 + x6603 - x6609 -
                            2110000.0 * x6833;
  const amrex::Real x6987 = x3427 + x6981 + x6986;
  const amrex::Real x6995 = 20000000.0 * sc[4] * x687 +
                            30000000.0 * sc[4] * x806 +
                            50000000.0 * sc[4] * x889 - x29 * x806 + x60 * x687;
  const amrex::Real x6996 =
    30000000.0 * sc[4] * x738 + x104 * x2615 + x6627 + x6644 + x6995;
  const amrex::Real x6998 = -10600000.0 * x1011 * x687;
  const amrex::Real x7001 = -20000000.0 * sc[5] * x687;
  const amrex::Real x7006 =
    -30000000.0 * sc[4] * x701 - 20000000.0 * sc[4] * x797 +
    20000000.0 * sc[5] * x797 + 28000000.0 * sc[9] * x701 +
    10600000.0 * x1011 * x797 + x281 * x797 + x296 * x701 - x60 * x797 + x6998 +
    x7001;
  const amrex::Real x7007 = -30000000.0 * sc[4] * x839 -
                            50000000.0 * sc[4] * x888 + x29 * x839 + x6996 +
                            x7006;
  const amrex::Real x7009 =
    60000000.0 * exp(g_RT[15] - g_RT[37] - g_RT[4] + g_RT[9]);
  const amrex::Real x7014 = exp(-429.747032597231 * invT);
  const amrex::Real x7032 = 36000.0 * exp(-4498.7569922941902 * invT);
  const amrex::Real x7042 =
    4.83e-10 * exp(
                 g_RT[10] + g_RT[16] - g_RT[18] - g_RT[4] +
                 1006.43333160944 * invT + 4.0 * tc[0]);
  const amrex::Real x7070 =
    -sc[4] * x3279 - sc[4] * x5851 - sc[4] * x6576 * x94 - sc[4] * x6812 -
    25010000.0 * sc[4] + x195 * x281 - x281 * x862 - x296 * x796 + x296 * x814;
  const amrex::Real x7071 =
    100.0 * sc[4] * exp(-1570.03599731073 * invT + 1.6 * tc[0]);
  const amrex::Real x7086 =
    sc[3] * x5751 - x281 * x341 + x281 * x882 - x296 * x827 + x296 * x834;
  const amrex::Real x7097 = x104 * x2615 + x6506 + x6644;
  const amrex::Real x7106 = 24000000.0 * refCinv * sc[21] * sc[4] * x6749;
  const amrex::Real x7118 = -24000000.0 * sc[4] * x2990 * x6797 - x281 * x886 +
                            x281 * x895 + x296 * x861;
  const amrex::Real x7119 = 6600000.0 * refCinv * sc[19] * sc[4] * x6783;
  const amrex::Real x7121 =
    3430.0 * sc[4] * exp(224.93784961470999 * invT + 1.18 * tc[0]);
  const amrex::Real x7129 = -sc[4] * x423 * x6706 - 20000000.0 * sc[4] * x514 -
                            sc[4] * x6801 - 20000000.0 * sc[5] * x886 +
                            20000000.0 * sc[5] * x895 - x3074 - x7119 - x7121;
  const amrex::Real x7141 =
    -sc[4] * x3225 - sc[4] * x5857 - sc[4] * x6756 - 5000000.0 * sc[4];
  const amrex::Real x7144 =
    30000000.0 * sc[4] * x738 + x3427 + x6627 + x6644 + x6981 + x6995;
  const amrex::Real x7162 =
    0.157 * sc[5] * exp(-9029.0203800344207 * invT + 2.18 * tc[0]);
  x2522 = -x2668 * x674 + x2668 * x686 - 8300000.0 * x602 * x994 * exp(x2522);
  const amrex::Real x7183 = -sc[4] * x3271 - sc[4] * x3273 -
                            28000000.0 * sc[4] * x421 * x994 - sc[4] * x5890;
  const amrex::Real x7196 =
    -x281 * x912 + x281 * x913 - x296 * x894 + x296 * x902 +
    4.05e+26 * x607 * x6577 + 1.73571428571429e+45 * x6562 * x6563 -
    1.73571428571429e+45 * x6562 * x6565 -
    x6570 * x6579 * (0.42 * x6566 + 3.0 * x6568) +
    x6570 * x6586 * (0.42 * x6566 + 3.0 * x6568) - 4.05e+26 * x6582 * x91;
  const amrex::Real x7218 =
    x135 * x296 - x281 * x510 + x281 * x928 - x296 * x910 + x6892;
  const amrex::Real x7229 =
    4.83e-10 * sc[4] * exp(1006.43333160944 * invT + 4.0 * tc[0]);
  x6783 = 6600000.0 * sc[4] * x6750 * x6783;
  const amrex::Real x7280 =
    3.54 * sc[4] * exp(-437.79849925010598 * invT + 2.12 * tc[0]);
  const amrex::Real x7287 = -100800000.0 * sc[2] * x104 * exp(x1907) -
                            100800000.0 * sc[2] * x1700 * exp(x1699 + x1907);
  const amrex::Real x7299 = x6570 * (0.84 * x6566 + 6.0 * x6568);
  const amrex::Real x7307 =
    x281 * x365 - x281 * x944 - x296 * x477 + x296 * x952 +
    8.1e+26 * x607 * x6577 + 3.4714285714285699e+45 * x6562 * x6563 -
    3.4714285714285699e+45 * x6562 * x6565 - x6579 * x7299 -
    8.1e+26 * x6582 * x91 + x6586 * x7299;
  x513 = 10000000.0 * sc[4] * exp(-g_RT[19] + g_RT[25] - x513);
  x247 = -sc[4] * x247 - sc[4] * x5843 - x2668 * x537 + x2668 * x540;
  x2288 = 782712744.331509 * x2286 * x2322 + x2288 * x2305 - x2288 * x2326 -
          782712744.331509 * x2290 - 63280000.0 * x2297 * x2305 +
          63280000.0 * x2297 * x2326;
  const amrex::Real x7417 =
    4990000000.0 *
    exp(g_RT[27] - g_RT[28] - 11286.1433806683 * invT - 1.4 * tc[0] - x2299);
  const amrex::Real x7422 = 18000.0 * sc[37] * exp(720.10304876655402 * invT);
  const amrex::Real x7425 =
    8700.0 * exp(-g_RT[21] + g_RT[22] - 490.13303249379697 * invT - x666);
  const amrex::Real x7429 =
    0.0245 * exp(-2606.66232886845 * invT + 2.47 * tc[0] - x2570 - x666);
  const amrex::Real x7434 =
    1.34 *
    exp(g_RT[18] - g_RT[19] + 192.93326966953001 * invT + 1.61 * tc[0] - x2299);
  const amrex::Real x7437 = 140000.0 * exp(g_RT[24] - g_RT[25] - x2299);
  const amrex::Real x7442 =
    100000000.0 * exp(g_RT[12] - g_RT[13] - 20128.666632188801 * invT - x2299);
  const amrex::Real x7451 = x2288 + 2110000.0 * x6833;
  const amrex::Real x7452 = 90000.0 * exp(g_RT[29] - g_RT[30] - x2299);
  const amrex::Real x7456 =
    0.0096 * sc[29] * exp(-6999.7438213436499 * invT + 2.6 * tc[0]);
  const amrex::Real x7460 =
    42200000.0 * exp(g_RT[19] - g_RT[20] - 30595.573280927001 * invT - x2299);
  const amrex::Real x7463 = 20000.0 * exp(g_RT[20] - g_RT[21] - x2299);
  x666 = 12100.0 * exp(-g_RT[19] + g_RT[20] + 299.91713281961302 * invT - x666);
  const amrex::Real x7471 =
    4.28e-19 *
    exp(g_RT[13] - g_RT[14] + 1776.3548302906599 * invT + 7.6 * tc[0] - x2299);
  x2299 = 12040.0 * exp(
                      -g_RT[12] + g_RT[16] + 365.83851604003098 * invT +
                      0.807 * tc[0] - x2299);
  const amrex::Real x7480 = exp(
    g_RT[13] - g_RT[37] - g_RT[5] + g_RT[7] + g_RT[9] +
    720.10304876655402 * invT);
  const amrex::Real x7485 = 8700.0 * sc[21] * exp(-490.13303249379697 * invT);
  const amrex::Real x7487 =
    0.0245 * sc[10] * exp(-2606.66232886845 * invT + 2.47 * tc[0]);
  const amrex::Real x7489 = 0.0096 * exp(
                                       g_RT[28] - g_RT[29] - g_RT[5] + g_RT[8] -
                                       6999.7438213436499 * invT + 2.6 * tc[0]);
  const amrex::Real x7491 =
    300000.0 * exp(g_RT[20] - g_RT[21] - g_RT[5] + g_RT[8]);
  const amrex::Real x7493 =
    1000000.0 *
    exp(g_RT[12] - g_RT[13] - g_RT[5] + g_RT[8] - 4025.7333264377598 * invT);
  const amrex::Real x7496 = 12100.0 * sc[19] * exp(299.91713281961302 * invT);
  const amrex::Real x7498 =
    exp(-2.0 * g_RT[5] + g_RT[8] + g_RT[9] - 6038.59998965664 * invT);
  const amrex::Real x7500 =
    exp(-2.0 * g_RT[5] + g_RT[8] + g_RT[9] + 820.24316526169298 * invT);
  const amrex::Real x7502 = -20000000.0 * sc[5] * x797;
  const amrex::Real x7504 = 20000000.0 * sc[5] * x687 + x6609 + x7451;
  const amrex::Real x7508 =
    4990000000.0 * sc[28] * exp(-11286.1433806683 * invT - 1.4 * tc[0]);
  const amrex::Real x7511 =
    2660000.0 * exp(-g_RT[28] + g_RT[29] - g_RT[5] + g_RT[9]);
  const amrex::Real x7514 =
    1.34 * sc[19] * exp(192.93326966953001 * invT + 1.61 * tc[0]);
  const amrex::Real x7517 =
    300000.0 * exp(-g_RT[21] + g_RT[22] - g_RT[5] + g_RT[9]);
  const amrex::Real x7519 = 100000000.0 * exp(-20128.666632188801 * invT);
  const amrex::Real x7521 = 1000000.0 * exp(-g_RT[5] + g_RT[9] - x2570);
  const amrex::Real x7524 =
    4.28e-19 * sc[14] * exp(1776.3548302906599 * invT + 7.6 * tc[0]);
  const amrex::Real x7526 =
    12040.0 * sc[12] * exp(365.83851604003098 * invT + 0.807 * tc[0]);
  const amrex::Real x7528 =
    42200000.0 * sc[20] * exp(-30595.573280927001 * invT);
  const amrex::Real x7531 =
    0.0245 * sc[8] * exp(-2606.66232886845 * invT + 2.47 * tc[0]);
  const amrex::Real x7538 =
    12040.0 * sc[9] * exp(365.83851604003098 * invT + 0.807 * tc[0]);
  const amrex::Real x7539 = 20000000.0 * sc[5] * x687 + x2288;
  const amrex::Real x7541 = 18000.0 * refCinv * sc[7] * sc[9] * x7480;
  const amrex::Real x7548 =
    4.28e-19 * sc[9] * exp(1776.3548302906599 * invT + 7.6 * tc[0]);
  const amrex::Real x7553 =
    1.34 * sc[9] * exp(192.93326966953001 * invT + 1.61 * tc[0]);
  const amrex::Real x7554 = 12100.0 * sc[8] * exp(299.91713281961302 * invT);
  const amrex::Real x7557 =
    42200000.0 * sc[9] * exp(-30595.573280927001 * invT);
  const amrex::Real x7564 = 8700.0 * sc[8] * exp(-490.13303249379697 * invT);
  const amrex::Real x7573 =
    4990000000.0 * sc[9] * exp(-11286.1433806683 * invT - 1.4 * tc[0]);
  const amrex::Real x7577 =
    0.0096 * sc[5] * exp(-6999.7438213436499 * invT + 2.6 * tc[0]);
  const amrex::Real x7583 = 18000.0 * sc[5] * exp(720.10304876655402 * invT);
  const amrex::Real x7586 = x185 / ((x191) * (x191));
  const amrex::Real x7587 = ((x185) * (x185)) / ((x191) * (x191) * (x191));
  const amrex::Real x7588 = 1.4 * x249 * x7586 + 0.196 * x249 * x7587;
  x45 = x45 / ((((x185) * (x185)) / ((x191) * (x191)) + 1.0) *
               (((x185) * (x185)) / ((x191) * (x191)) + 1.0));
  x185 = exp(-94921.759670744301 * invT - 8.87 * tc[0] - x108) / (x39 + 1.0);
  x191 = sc[20] * x185 * x228;
  const amrex::Real x7595 = 7.0e+44 * x191 * x35 * x45;
  const amrex::Real x7600 = refCinv * sc[6] * x228 * x253 * x3566;
  const amrex::Real x7604 = 7.0e+44 * x35 * x45 * x7600;
  x39 = x35 / ((x39 + 1.0) * (x39 + 1.0));
  const amrex::Real x7608 =
    sc[20] * x228 * exp(-145172.975918004 * invT - 18.18 * tc[0] - 2 * x108);
  x38 = refCinv * sc[6] * x228 * x3566 *
        exp(-145172.975918004 * invT - 18.18 * tc[0] - 2 * x108 + x38);
  x108 =
    sc[13] * x503 *
    exp(
      g_RT[13] - g_RT[16] - g_RT[6] - 44836.604923200604 * invT - 8.34 * tc[0]);
  amrex::Real x7620 =
    117906976744186.0 * x35 * exp(-2390.2791625723985 * invT - 4.92 * tc[0]);
  amrex::Real x7621 = log(
    0.068 * exp(-0.0050761421319797002 * tc[1]) +
    0.932 * exp(-0.00064935064935064902 * tc[1]) + exp(-10300.0 * invT));
  amrex::Real x7622 =
    -0.29097730287517898 * x7621 + 0.43429448190325198 * log(x7620) - 0.4;
  amrex::Real x7623 = -0.55155399201712996 * x7621 - 0.14 * x7622 + 0.75;
  const amrex::Real x7629 =
    exp(
      M_LN10 * (0.43429448190325198 * x7621 /
                (((x7622) * (x7622)) / ((x7623) * (x7623)) + 1.0))) /
    ((x7620 + 1.0) * (x7620 + 1.0));
  const amrex::Real x7633 =
    sc[16] * sc[6] * x35 * exp(-44836.604923200604 * invT - 8.34 * tc[0]);
  x7620 = exp(
            M_LN10 * (0.43429448190325198 * x7621 /
                      (((x7622) * (x7622)) / ((x7623) * (x7623)) + 1.0))) /
          (x7620 + 1.0);
  const amrex::Real x7636 = -42446.325760628104 * invT - 3.42 * tc[0];
  const amrex::Real x7639 = sc[16] * sc[6] * x7620 * exp(x7636);
  const amrex::Real x7642 =
    x249 * ((x7622) * (x7622)) / ((x7623) * (x7623) * (x7623));
  const amrex::Real x7643 = x249 * x7622 / ((x7623) * (x7623));
  x7621 = x7621 / ((((x7622) * (x7622)) / ((x7623) * (x7623)) + 1.0) *
                   (((x7622) * (x7622)) / ((x7623) * (x7623)) + 1.0));
  x7622 = 5070000000000000.0 * x35 * x7639;
  x7623 = exp(g_RT[13] - g_RT[16] - g_RT[6] + x7636);
  const amrex::Real x7652 = refC * sc[13] * x7620 * x7623;
  const amrex::Real x7655 = 5070000000000000.0 * sc[13] * x503 * x7620 * x7623;
  const amrex::Real x7658 = -4.1845186046511603e+29 * x108 * x7629 +
                            x7621 * x7622 * (0.196 * x7642 + 1.4 * x7643) -
                            x7621 * x7655 * (0.196 * x7642 + 1.4 * x7643) +
                            4.1845186046511603e+29 * x7629 * x7633 -
                            3549000000000000.0 * x7639 +
                            3549000000000000.0 * x7652;
  x45 = x45 * (x671 * x7587 + x672 * x7586);
  const amrex::Real x7666 =
    1780000.0 * ((sc[2]) * (sc[2])) * x818 - 1780000.0 * x1895;
  amrex::Real x7671 = x7621 * (0.28 * x7642 + 2.0 * x7643);
  amrex::Real x7676 = -5.9778837209302301e+29 * x108 * x7629 + x7622 * x7671 +
                      5.9778837209302301e+29 * x7629 * x7633 -
                      5070000000000000.0 * x7639 + 5070000000000000.0 * x7652 -
                      x7655 * x7671;
  const amrex::Real x7677 = -7.0e+44 * x191 * x35 * x45 + 7.0e+44 * x191 +
                            7.0e+44 * x35 * x45 * x7600 +
                            6.125e+76 * x38 * x39 - 6.125e+76 * x39 * x7608 -
                            7.0e+44 * x7600 + x7666 + x7676;
  const amrex::Real x7678 = -x1053 * x616 - x264 * x616 + x7677;
  const amrex::Real x7685 =
    -30000000.0 * sc[2] * x738 + 70000000.0 * sc[6] * x738 + x7678;
  amrex::Real x7720 = -1.19557674418605e+30 * x108 * x7629 +
                      x7621 * x7622 * (0.56 * x7642 + 4.0 * x7643) -
                      x7621 * x7655 * (0.56 * x7642 + 4.0 * x7643) +
                      1.19557674418605e+30 * x7629 * x7633 - 1.014e+16 * x7639 +
                      1.014e+16 * x7652;
  const amrex::Real x7721 =
    1.4e+45 * x191 + 1.225e+77 * x38 * x39 - 1.225e+77 * x39 * x7608 -
    x7595 * (4.0 * x249 * x7586 + 0.56 * x249 * x7587) - 1.4e+45 * x7600 +
    x7604 * (4.0 * x249 * x7586 + 0.56 * x249 * x7587) + x7720;
  const amrex::Real x7722 = 5070000000000000.0 * x35 * x7620 * exp(x7636);
  const amrex::Real x7739 = x7621 * (1.68 * x7642 + 12.0 * x7643);
  const amrex::Real x7744 =
    3.042e+16 * refC * sc[13] * x7620 * x7623 -
    3.042e+16 * sc[16] * sc[6] * x7620 * exp(x7636) -
    3.5867302325581401e+30 * x108 * x7629 + x7622 * x7739 +
    3.5867302325581401e+30 * x7629 * x7633 - x7655 * x7739;
  const amrex::Real x7745 = -110000000.0 * sc[2] * x806 +
                            30000000.0 * x102 * x806 - x1035 * x687 +
                            x1052 * x687 + x1855 * x889 + x806 * x998;
  const amrex::Real x7747 = 30000000.0 * sc[2] * x701 -
                            70000000.0 * sc[6] * x701 + x1035 * x797 -
                            x1052 * x797 + x3426 + x7685 + x7745;
  const amrex::Real x7748 = 110000000.0 * sc[2] * x839 -
                            30000000.0 * x102 * x839 - x1855 * x888 + x7747 -
                            x839 * x998;
  const amrex::Real x7754 =
    -30000000.0 * sc[2] * x738 + 70000000.0 * sc[6] * x738 + x7677 + x7745;
  const amrex::Real x7771 = x7621 * (0.42 * x7642 + 3.0 * x7643);
  const amrex::Real x7777 =
    -sc[6] * x3547 - 15000000.0 * sc[6] * x442 - sc[6] * x7722 -
    8.9668255813953501e+29 * x108 * x7629 + x7622 * x7771 +
    8.9668255813953501e+29 * x7629 * x7633 - 7605000000000000.0 * x7639 +
    7605000000000000.0 * x7652 - x7655 * x7771;
  const amrex::Real x7799 = x7621 * (0.84 * x7642 + 6.0 * x7643);
  const amrex::Real x7803 =
    -1.79336511627907e+30 * x108 * x7629 + x7622 * x7799 +
    1.79336511627907e+30 * x7629 * x7633 - 1.521e+16 * x7639 +
    1.521e+16 * x7652 - x7655 * x7799;
  amrex::Real x7815 =
    0.86858896380650397 * x269 / (((x223) * (x223)) * x92) +
    0.121602454932911 * ((x269) * (x269)) / (((x223) * (x223) * (x223)) * x92);
  amrex::Real x7816 = x97 / ((1.0 + ((x269) * (x269)) / ((x223) * (x223))) *
                             (1.0 + ((x269) * (x269)) / ((x223) * (x223))));
  const amrex::Real x7818 = sc[7] * x114 * x6;
  const amrex::Real x7820 = x7816 * x7818 * x94;
  const amrex::Real x7824 = 2.7e+26 * x114 * x426 * x429;
  const amrex::Real x7826 = sc[15] * x7816 * x7824;
  x92 = 5.4869684499314126e-39 *
        exp(
          M_LN10 * (0.43429448190325198 * x97 /
                    (1.0 + ((x269) * (x269)) / ((x223) * (x223))))) /
        ((x91 * x92 + 7.4074074074074074e-20) *
         (x91 * x92 + 7.4074074074074074e-20));
  x97 = x284 * x6 * x92;
  const amrex::Real x7836 =
    2.7e+26 * x114 * x429 * x607 - 3.645e+45 * x606 * x92 + x7815 * x7820 -
    x7815 * x7826 - 2.7e+26 * x7818 * x91 + 3.645e+45 * x97;
  const amrex::Real x7840 =
    44000000000.0 * x2510 - 44000000000.0 * x2513 + x7836;
  const amrex::Real x7850 = -12000000.0 * sc[9] * x738 + x1041 * x738 +
                            x296 * x738 + x302 * x738 + x7840;
  const amrex::Real x7852 =
    12000000.0 * sc[9] * x701 - x1041 * x701 - x296 * x701 - x302 * x701;
  const amrex::Real x7853 = sc[4] * x6767 + sc[4] * x6770 + sc[4] * x6773 +
                            sc[4] * x6776 + sc[4] * x6779 + x7422;
  amrex::Real x7861 = ((x269) * (x269)) * x808 / ((x223) * (x223) * (x223));
  x7816 = x7816 * (0.56 * x7861 + 4.0 * x269 * x808 / ((x223) * (x223)));
  const amrex::Real x7866 = -sc[15] * x7816 * x7824 +
                            5.4e+26 * x114 * x429 * x607 -
                            7.29e+45 * x606 * x92 + x7816 * x7818 * x94 -
                            5.4e+26 * x7818 * x91 + 7.29e+45 * x97;
  const amrex::Real x7880 =
    1.68 * x7861 + 12.0 * x269 * x808 / ((x223) * (x223));
  const amrex::Real x7892 = -18000.0 * sc[9] * x6750 * x7480 - sc[9] * x6941 -
                            sc[9] * x6942 - sc[9] * x6944 - sc[9] * x6946 -
                            sc[9] * x6948;
  const amrex::Real x7895 =
    x281 * x687 + x29 * x806 - x60 * x687 + x7850 + x806 * x991;
  const amrex::Real x7896 = -x281 * x797 + x60 * x797 + x7852 + x7895;
  const amrex::Real x7897 = -x29 * x839 + x7896 - x839 * x991;
  const amrex::Real x7901 = -18000.0 * sc[7] * x6750 * x7480 - sc[7] * x6941 -
                            sc[7] * x6942 - sc[7] * x6944 - sc[7] * x6946 -
                            sc[7] * x6948;
  const amrex::Real x7917 =
    0.42 * x7861 + 3.0 * x269 * x808 / ((x223) * (x223));
  x808 = 0.84 * x7861 + 6.0 * x269 * x808 / ((x223) * (x223));
  x269 = 201000.0 * x2823 * x32 * x6522 / ((x6509) * (x6509));
  x223 = 201000.0 * x2823 * x32 * x6537 / ((x6509) * (x6509));
  x2823 = -x223 * x6505 + x269 * x6505 + 363.97297297297303 * x6518 -
          201000.0 * x6522 - 363.97297297297303 * x6535 + 201000.0 * x6537;
  x6509 = 300000.0 * sc[21] +
          260000.0 * sc[5] * exp(820.24316526169298 * invT) +
          731600000.0 * sc[5] * exp(-6038.59998965664 * invT);
  x370 = g_RT[17] - g_RT[9] - 10064.3333160944 * invT - x370;
  x6505 = sc[17] * x1700 * exp(x1699 + x370);
  x7861 = sc[17] * x104 * exp(x370);
  x14 = sc[0] + sc[11] + sc[16] + sc[17] + sc[18] + sc[20] + sc[22] + sc[6] +
        sc[7] + x14;
  amrex::Real x7999 = 74074074074.0741 * x14 * exp(-4.5 * tc[0]);
  amrex::Real x8000 =
    log(0.664 * exp(-0.1 * tc[1]) + 0.336 * exp(-1.0e-5 * tc[1]));
  amrex::Real x8001 =
    -0.29097730287517898 * x8000 + 0.43429448190325198 * log(x7999) - 0.4;
  amrex::Real x8003 = -0.55155399201712996 * x8000 - 0.14 * x8001 + 0.75;
  amrex::Real x8006 = exp(
    M_LN10 * (0.43429448190325198 * x8000 /
              (((x8001) * (x8001)) / ((x8003) * (x8003)) + 1.0)));
  const amrex::Real x8009 = 58000000000000.0 * x8006 *
                            exp(-g_RT[10] + g_RT[37] - g_RT[9] - 3.3 * tc[0]) /
                            (x7999 + 1.0);
  const amrex::Real x8012 =
    58000000000000.0 * x8006 * exp(-3.3 * tc[0]) / (x7999 + 1.0);
  x8000 = x8000 *
          (0.121602454932911 * ((x8001) * (x8001)) /
             (x14 * ((x8003) * (x8003) * (x8003))) +
           0.86858896380650397 * x8001 / (x14 * ((x8003) * (x8003)))) /
          ((((x8001) * (x8001)) / ((x8003) * (x8003)) + 1.0) *
           (((x8001) * (x8001)) / ((x8003) * (x8003)) + 1.0));
  x8001 = 4.2962962962963002e+24 * sc[10] * sc[9] * x14 * x8006 *
          exp(-7.8 * tc[0]) / ((x7999 + 1.0) * (x7999 + 1.0));
  x7999 = 4.2962962962963002e+24 * refC * sc[37] * x14 * x8006 *
          exp(-g_RT[10] + g_RT[37] - g_RT[9] - 7.8 * tc[0]) /
          ((x7999 + 1.0) * (x7999 + 1.0));
  x8003 = -refC * sc[37] * x14 * x8000 * x8009 + refC * sc[37] * x8009 +
          sc[10] * sc[9] * x14 * x8000 * x8012 - sc[10] * sc[9] * x8012 -
          x7999 + x8001;
  x8006 = -kf_qss[6] * ((sc[3]) * (sc[3])) * x472 * x5569;
  const amrex::Real x8030 = 2000000.0 * sc[17] * exp(x370);
  const amrex::Real x8032 = -x104 * x8030;
  const amrex::Real x8036 = x2291 - 120000.0 * x5589 + 120000.0 * x5590 + x8003;
  const amrex::Real x8037 = -10000000.0 * sc[9] * x616 + x8036;
  const amrex::Real x8038 = x104 * x5662 + x8037;
  const amrex::Real x8068 = -40000000.0 * sc[9] * x701;
  const amrex::Real x8070 = 40000000.0 * sc[9] * x738 + 3900000.0 * x5604;
  const amrex::Real x8078 = 7800000.0 * sc[9] * x5607 - 18000.0 * x5574 -
                            18000.0 * x5576 + 7800000.0 * x5604 -
                            4000000.0 * x6505 - 4000000.0 * x7861;
  const amrex::Real x8087 = -9000.0 * x5576 - 2000000.0 * x6505 + x8006 + x8032;
  const amrex::Real x8088 =
    33000000.0 * sc[9] * x806 + 13240000.0 * x1011 * x687 + x5625 * x889;
  const amrex::Real x8092 =
    -33000000.0 * sc[9] * x839 - 13240000.0 * x1011 * x797 - x5625 * x888;
  const amrex::Real x8094 = x8038 + x8068 + x8070 + x8087 + x8088 + x8092;
  const amrex::Real x8113 =
    refCinv *
    exp(2.0 * g_RT[14] - 2.0 * g_RT[37] + g_RT[9] + 30.696216614087898 * invT);
  const amrex::Real x8117 = 2000000.0 * exp(-10064.3333160944 * invT);
  const amrex::Real x8123 = exp(
    g_RT[13] + g_RT[15] - 2.0 * g_RT[37] + g_RT[9] + 1806.0446135731399 * invT);
  const amrex::Real x8129 =
    46000000000.0 * sc[19] * exp(-508.24883246276698 * invT - 1.39 * tc[0]);
  const amrex::Real x8142 =
    46000000000.0 * exp(
                      g_RT[12] + g_RT[13] - g_RT[19] - g_RT[9] -
                      508.24883246276698 * invT - 1.39 * tc[0]);
  const amrex::Real x8158 = -1046.0 * refCinv * sc[15] * sc[9] * x8123;
  const amrex::Real x8193 =
    46000000000.0 * sc[9] * exp(-508.24883246276698 * invT - 1.39 * tc[0]);
  const amrex::Real x8206 = -6000000.0 * sc[17] * x104 * exp(x370) -
                            6000000.0 * sc[17] * x1700 * exp(x1699 + x370);
  amrex::Real x8251 = -311.994332798926 * invT - 0.97 * tc[0];
  amrex::Real x8255 = 8.3490566037735897e+27 * x35 *
                      exp(-3130.0076613053602 * invT - 9.67 * tc[0] - x8251);
  amrex::Real x8256 = log(
    0.4675 * exp(-0.0066225165562913899 * tc[1]) +
    0.5325 * exp(-0.00096339113680154098 * tc[1]) + exp(-4970.0 * invT));
  amrex::Real x8257 =
    -0.29097730287517898 * x8256 + 0.43429448190325198 * log(x8255) - 0.4;
  amrex::Real x8258 = -0.55155399201712996 * x8256 - 0.14 * x8257 + 0.75;
  amrex::Real x8262 = exp(
    M_LN10 * (0.43429448190325198 * x8256 /
              (((x8257) * (x8257)) / ((x8258) * (x8258)) + 1.0)));
  const amrex::Real x8265 =
    x8262 * exp(-3442.0019941042801 * invT - 10.64 * tc[0] - x8251) /
    (x8255 + 1.0);
  const amrex::Real x8266 = ((sc[10]) * (sc[10])) * x8265;
  const amrex::Real x8268 =
    x8262 *
    exp(
      -2.0 * g_RT[10] + g_RT[22] - 3442.0019941042801 * invT - 10.64 * tc[0] -
      x8251) /
    (x8255 + 1.0);
  const amrex::Real x8269 = refC * sc[22] * x8268;
  x8255 = x35 * x8262 / ((x8255 + 1.0) * (x8255 + 1.0));
  x8262 = refC * sc[22] *
          exp(
            -2.0 * g_RT[10] + g_RT[22] - 6572.0096554096399 * invT -
            20.31 * tc[0] - 2 * x8251);
  const amrex::Real x8273 = x8255 * x8262;
  const amrex::Real x8275 = ((x8257) * (x8257)) / ((x8258) * (x8258) * (x8258));
  const amrex::Real x8276 = x8257 / ((x8258) * (x8258));
  const amrex::Real x8278 = 0.196 * x249 * x8275 + 1.4 * x249 * x8276;
  x8256 = x35 * x8256 /
          ((((x8257) * (x8257)) / ((x8258) * (x8258)) + 1.0) *
           (((x8257) * (x8257)) / ((x8258) * (x8258)) + 1.0));
  x8257 = 3.54e+38 * x8256 * x8266;
  x8258 = 3.54e+38 * x8256 * x8269;
  x8251 = ((sc[10]) * (sc[10])) *
          exp(-6572.0096554096399 * invT - 20.31 * tc[0] - 2 * x8251);
  const amrex::Real x8285 = x8251 * x8255;
  x362 = -g_RT[10] + g_RT[14] - 0.05 * tc[0] - x362;
  const amrex::Real x8288 = x1700 * exp(x1699 + x362);
  const amrex::Real x8292 = x104 * exp(x362);
  amrex::Real x8300 =
    3.91e+40 * x35 * exp(-3277.0978927200781 * invT - 12.49 * tc[0]);
  amrex::Real x8302 = log(
    0.896 * exp(-0.00062266500622664995 * tc[1]) +
    0.104 * exp(-1.6666666666666701e-5 * tc[1]) + exp(-6118.4 * invT));
  amrex::Real x8303 =
    -0.29097730287517898 * x8302 + 0.43429448190325198 * log(x8300) - 0.4;
  amrex::Real x8305 = -0.55155399201712996 * x8302 - 0.14 * x8303 + 0.75;
  const amrex::Real x8310 =
    exp(
      M_LN10 * (0.43429448190325198 * x8302 /
                (((x8303) * (x8303)) / ((x8305) * (x8305)) + 1.0))) /
    ((x8300 + 1.0) * (x8300 + 1.0));
  const amrex::Real x8315 = sc[31] * x503 *
                            exp(
                              -g_RT[10] - g_RT[28] + g_RT[31] -
                              6422.2020539995756 * invT - 25.3 * tc[0]);
  x8300 = exp(
            M_LN10 * (0.43429448190325198 * x8302 /
                      (((x8303) * (x8303)) / ((x8305) * (x8305)) + 1.0))) /
          (x8300 + 1.0);
  const amrex::Real x8319 = -3145.1041612794979 * invT - 12.81 * tc[0];
  const amrex::Real x8320 = exp(-g_RT[10] - g_RT[28] + g_RT[31] + x8319);
  const amrex::Real x8323 = refC * sc[31] * x8300 * x8320;
  amrex::Real x8330 =
    x249 * ((x8303) * (x8303)) / ((x8305) * (x8305) * (x8305));
  x8302 = x8302 / ((((x8303) * (x8303)) / ((x8305) * (x8305)) + 1.0) *
                   (((x8303) * (x8303)) / ((x8305) * (x8305)) + 1.0));
  const amrex::Real x8332 =
    x8302 * (1.4 * x249 * x8303 / ((x8305) * (x8305)) + 0.196 * x8330);
  const amrex::Real x8334 = sc[28] * exp(x8319);
  const amrex::Real x8337 = 3.91e+48 * x500 * x8300 * x8334;
  const amrex::Real x8340 = sc[10] * x8300 * x8334;
  const amrex::Real x8342 =
    sc[28] * x500 * exp(-6422.2020539995756 * invT - 25.3 * tc[0]);
  const amrex::Real x8347 = 3.91e+48 * sc[31] * x503 * x8300 * x8320;
  const amrex::Real x8349 = -1.070167e+89 * x8310 * x8315 +
                            1.070167e+89 * x8310 * x8342 + 2.737e+48 * x8323 +
                            x8332 * x8337 - x8332 * x8347 - 2.737e+48 * x8340;
  amrex::Real x8355 = x15 * exp(-4916.3261815789501 * invT - 11.94 * tc[0]);
  amrex::Real x8357 = log(
    0.825 * exp(-0.00074593465612412396 * tc[1]) +
    0.175 * exp(-1.6666666666666701e-5 * tc[1]) + exp(-10139.8 * invT));
  amrex::Real x8358 = -0.29097730287517898 * x8357 +
                      0.43429448190325198 * log(1.708e+39 * x8355) - 0.4;
  amrex::Real x8360 = -0.55155399201712996 * x8357 - 0.14 * x8358 + 0.75;
  const amrex::Real x8365 =
    exp(
      M_LN10 * (0.43429448190325198 * x8357 /
                (((x8358) * (x8358)) / ((x8360) * (x8360)) + 1.0))) /
    (1.708e+39 * x8355 + 1.0);
  const amrex::Real x8367 =
    sc[10] * sc[19] * exp(-4916.3261815789501 * invT - 11.94 * tc[0]);
  const amrex::Real x8370 =
    3.4278694009181206e-79 *
    exp(
      M_LN10 * (0.43429448190325198 * x8357 /
                (((x8358) * (x8358)) / ((x8360) * (x8360)) + 1.0))) /
    ((x8355 + 5.85480093676815e-40) * (x8355 + 5.85480093676815e-40));
  const amrex::Real x8373 = refC * sc[29] * x15 *
                            exp(
                              -g_RT[10] - g_RT[19] + g_RT[29] -
                              9832.6523631579003 * invT - 23.88 * tc[0]);
  const amrex::Real x8376 = exp(
    -g_RT[10] - g_RT[19] + g_RT[29] - 4916.3261815789501 * invT -
    11.94 * tc[0]);
  const amrex::Real x8378 = refC * sc[29] * x8365 * x8376;
  const amrex::Real x8380 =
    sc[10] * sc[19] * x15 * exp(-9832.6523631579003 * invT - 23.88 * tc[0]);
  const amrex::Real x8386 =
    0.43429448190325198 * x8358 / (x15 * ((x8360) * (x8360)));
  const amrex::Real x8388 = 0.43429448190325198 * ((x8358) * (x8358)) /
                            (x15 * ((x8360) * (x8360) * (x8360)));
  x8357 = x8357 / ((((x8358) * (x8358)) / ((x8360) * (x8360)) + 1.0) *
                   (((x8358) * (x8358)) / ((x8360) * (x8360)) + 1.0));
  x8355 = 4.27e+46 * x8355 * x8365;
  const amrex::Real x8394 = sc[10] * sc[19] * x8355 * x8357;
  amrex::Real x8396 = 4.27e+46 * refC * sc[29] * x8365 * x8376;
  const amrex::Real x8398 = x15 * x8357 * x8396;
  const amrex::Real x8400 = -2.989e+46 * x8365 * x8367 -
                            5.105212e+85 * x8370 * x8373 +
                            5.105212e+85 * x8370 * x8380 + 2.989e+46 * x8378 +
                            x8394 * (1.4 * x8386 + 0.196 * x8388) -
                            x8398 * (1.4 * x8386 + 0.196 * x8388);
  const amrex::Real x8402 = 15100000.0 * sc[14] * exp(x362);
  const amrex::Real x8404 = -x104 * x8402;
  amrex::Real x8414 = 0.28 * x249 * x8275 + 2.0 * x249 * x8276;
  amrex::Real x8423 =
    x8302 * (x671 * ((x8303) * (x8303)) / ((x8305) * (x8305) * (x8305)) +
             x672 * x8303 / ((x8305) * (x8305)));
  const amrex::Real x8427 =
    3.91e+48 * refC * sc[31] * x8300 * x8320 -
    3.91e+48 * sc[10] * x8300 * x8334 - 1.52881e+89 * x8310 * x8315 +
    1.52881e+89 * x8310 * x8342 + x8337 * x8423 - x8347 * x8423;
  x8358 = 0.121602454932911 * ((x8358) * (x8358)) /
            (x15 * ((x8360) * (x8360) * (x8360))) +
          0.86858896380650397 * x8358 / (x15 * ((x8360) * (x8360)));
  x8360 = x8358 * x8394 - x8358 * x8398 - 4.27e+46 * x8365 * x8367 -
          7.29316e+85 * x8370 * x8373 + 7.29316e+85 * x8370 * x8380 + x8396;
  const amrex::Real x8436 =
    -4.096e+20 * x174 - 3200000000000000.0 * x1863 + 3200000000000000.0 * x203 +
    x2738 + 4.096e+20 * x372 - x489 + x8003 + x8257 * x8414 - x8258 * x8414 -
    3.54e+38 * x8266 + 3.54e+38 * x8269 - 2.9555660377358502e+66 * x8273 +
    2.9555660377358502e+66 * x8285 + x8360 + x8427;
  const amrex::Real x8461 = 15100000.0 * sc[14] * x8288;
  const amrex::Real x8468 =
    x1051 * x738 - x319 * x738 - x332 * x738 + x6597 + x8436;
  const amrex::Real x8476 =
    -30200000.0 * sc[14] * x8288 - 30200000.0 * sc[14] * x8292;
  amrex::Real x8477 = 0.56 * x249 * x8275 + 4.0 * x249 * x8276;
  amrex::Real x8483 = 4.0 * x249 * x8303 / ((x8305) * (x8305)) + 0.56 * x8330;
  const amrex::Real x8490 = 7.82e+48 * refC * sc[31] * x8300 * x8320 -
                            7.82e+48 * sc[10] * x8300 * x8334 +
                            x8302 * x8337 * x8483 - x8302 * x8347 * x8483 -
                            3.05762e+89 * x8310 * x8315 +
                            3.05762e+89 * x8310 * x8342;
  x8357 = x8357 * (4.0 * x8386 + 0.56 * x8388);
  amrex::Real x8498 = sc[10] * sc[19] * x8355 * x8357 - x15 * x8357 * x8396 -
                      8.54e+46 * x8365 * x8367 - 1.458632e+86 * x8370 * x8373 +
                      1.458632e+86 * x8370 * x8380 + 8.54e+46 * x8378;
  const amrex::Real x8499 =
    -8.192e+20 * x174 - 6400000000000000.0 * x1863 +
    x1874 * (0.56 * x1869 + 4.0 * x2736) -
    x1903 * (0.56 * x1869 + 4.0 * x2736) + 6400000000000000.0 * x203 +
    8.192e+20 * x372 + x8003 + x8257 * x8477 - x8258 * x8477 -
    7.08e+38 * x8266 + 7.08e+38 * x8269 - 5.9111320754717004e+66 * x8273 +
    5.9111320754717004e+66 * x8285 + x8490 + x8498;
  const amrex::Real x8510 =
    12.0 * x249 * x8303 / ((x8305) * (x8305)) + 1.68 * x8330;
  const amrex::Real x8513 = x8302 * x8337 * x8510 - x8302 * x8347 * x8510 -
                            9.17286e+89 * x8310 * x8315 +
                            9.17286e+89 * x8310 * x8342 + 2.346e+49 * x8323 -
                            2.346e+49 * x8340;
  const amrex::Real x8524 = -2.562e+47 * x8365 * x8367 -
                            4.375896e+86 * x8370 * x8373 +
                            4.375896e+86 * x8370 * x8380 + 2.562e+47 * x8378 +
                            x8394 * (12.0 * x8386 + 1.68 * x8388) -
                            x8398 * (12.0 * x8386 + 1.68 * x8388);
  const amrex::Real x8525 = x8404 - x8461;
  const amrex::Real x8526 =
    40000000.0 * sc[10] * x687 + 30000000.0 * sc[10] * x806 +
    50000000.0 * sc[10] * x889 - x314 * x687 - x687 * x695;
  const amrex::Real x8528 =
    -40000000.0 * sc[10] * x797 + 70000000.0 * sc[6] * x701 - x1051 * x701 +
    x1052 * x797 + x281 * x797 + x296 * x701 + x314 * x797 + x319 * x701 +
    x332 * x701 + x3934 + x695 * x797 + x6981 + x8468 + x8526;
  const amrex::Real x8530 =
    -30000000.0 * sc[10] * x839 - 50000000.0 * sc[10] * x888;
  const amrex::Real x8531 = x8525 + x8528 + x8530;
  const amrex::Real x8541 = exp(710.03871545045899 * invT);
  const amrex::Real x8546 =
    6.14 * sc[22] * exp(-5258.61415765932 * invT + 1.74 * tc[0]);
  const amrex::Real x8550 =
    10.0 * exp(-5001.9736580989102 * invT + 1.5 * tc[0]);
  const amrex::Real x8557 = 15100000.0 * exp(-0.05 * tc[0]);
  const amrex::Real x8562 =
    3000000.0 * sc[28] * exp(65.921383220418306 * invT - 0.32 * tc[0]);
  const amrex::Real x8565 =
    3.9e+26 * exp(
                g_RT[10] - g_RT[19] - g_RT[21] + g_RT[28] -
                9937.0194996457994 * invT - 5.22 * tc[0]);
  const amrex::Real x8570 =
    2.68e+47 * exp(-17979.931469202598 * invT - 12.82 * tc[0]);
  const amrex::Real x8574 =
    2.2e-6 * exp(-2855.7545784417798 * invT + 3.5 * tc[0]);
  const amrex::Real x8580 =
    36300000000000.0 *
    exp(g_RT[10] + g_RT[12] - g_RT[26] - 28783.993284029999 * invT);
  const amrex::Real x8582 = -refCinv * sc[12] * x8580 - sc[12] * x4074 -
                            sc[12] * x6101 - 8480000.0 * sc[12];
  const amrex::Real x8583 =
    40000000.0 *
    exp(g_RT[10] + g_RT[21] - g_RT[22] - g_RT_qss[3] + 276.769166192596 * invT);
  const amrex::Real x8587 =
    -sc[21] * x4077 - sc[21] * x8583 - x319 * x796 + x319 * x814;
  const amrex::Real x8593 =
    0.00332 * sc[13] * exp(-2948.8496616156599 * invT + 2.81 * tc[0]);
  const amrex::Real x8596 = 330000.0 * exp(-3874.76832669634 * invT);
  const amrex::Real x8599 =
    0.227 * exp(-4629.5933254034198 * invT + 2.0 * tc[0]);
  const amrex::Real x8603 =
    7.8e+41 *
    exp(
      g_RT[10] + g_RT[16] - g_RT[25] - 23600.8616262414 * invT - 9.147 * tc[0]);
  const amrex::Real x8605 =
    -sc[16] * x4115 - sc[16] * x6083 - sc[16] * x7042 - x423 * x8603;
  const amrex::Real x8606 = 11000000.0 * exp(g_RT[29] - g_RT[30] - x2570);
  const amrex::Real x8608 =
    6.14 *
    exp(g_RT[21] - g_RT[22] - 5258.61415765932 * invT + 1.74 * tc[0] - x2570);
  const amrex::Real x8610 =
    3000000.0 *
    exp(g_RT[27] - g_RT[28] + 65.921383220418306 * invT - 0.32 * tc[0] - x2570);
  const amrex::Real x8612 =
    2.2e-6 *
    exp(g_RT[28] - g_RT[29] - 2855.7545784417798 * invT + 3.5 * tc[0] - x2570);
  const amrex::Real x8614 =
    10.0 *
    exp(g_RT[14] - g_RT[15] - 5001.9736580989102 * invT + 1.5 * tc[0] - x2570);
  const amrex::Real x8616 = 8480000.0 * exp(-g_RT[12] + g_RT[16] - x2570);
  const amrex::Real x8618 = 392000.0 * exp(g_RT[18] - g_RT[19] - x2570);
  const amrex::Real x8620 =
    0.00332 *
    exp(g_RT[12] - g_RT[13] - 2948.8496616156599 * invT + 2.81 * tc[0] - x2570);
  x2570 =
    0.227 *
    exp(g_RT[19] - g_RT[20] - 4629.5933254034198 * invT + 2.0 * tc[0] - x2570);
  const amrex::Real x8634 =
    -sc[10] * x4074 - sc[10] * x6101 - 8480000.0 * sc[10] - x2990 * x8580;
  const amrex::Real x8636 = x3934 + x6981 + x8468 + x8526;
  const amrex::Real x8638 =
    0.00332 * sc[10] * exp(-2948.8496616156599 * invT + 2.81 * tc[0]);
  const amrex::Real x8641 =
    sc[14] *
    exp(-g_RT[10] + 2.0 * g_RT[14] - g_RT[37] + 710.03871545045899 * invT);
  const amrex::Real x8653 =
    50000000.0 * exp(-g_RT[10] + g_RT[16] + g_RT[20] - g_RT[23]);
  const amrex::Real x8666 =
    3.0 * x249 * x8303 / ((x8305) * (x8305)) + 0.42 * x8330;
  const amrex::Real x8672 = x8302 * x8337 * x8666 - x8302 * x8347 * x8666 -
                            2.293215e+89 * x8310 * x8315 +
                            2.293215e+89 * x8310 * x8342 + 5.865e+48 * x8323 -
                            5.865e+48 * x8340;
  const amrex::Real x8683 =
    -6.405e+46 * x8365 * x8367 - 1.093974e+86 * x8370 * x8373 +
    1.093974e+86 * x8370 * x8380 + 6.405e+46 * x8378 +
    x8394 * (3.0 * x8386 + 0.42 * x8388) - x8398 * (3.0 * x8386 + 0.42 * x8388);
  x4115 = -sc[10] * x4115 - sc[10] * x6083 - sc[10] * x7042 - x2990 * x8603;
  const amrex::Real x8705 =
    -1.281e+47 * x8365 * x8367 - 2.187948e+86 * x8370 * x8373 +
    2.187948e+86 * x8370 * x8380 + 1.281e+47 * x8378 +
    x8394 * (6.0 * x8386 + 0.84 * x8388) - x8398 * (6.0 * x8386 + 0.84 * x8388);
  const amrex::Real x8707 =
    -4.096e+20 * x174 - 3200000000000000.0 * x1863 + 3200000000000000.0 * x203 +
    x2738 + 4.096e+20 * x372 - x489 + x6597 + x8003 + x8257 * x8414 -
    x8258 * x8414 - 3.54e+38 * x8266 + 3.54e+38 * x8269 -
    2.9555660377358502e+66 * x8273 + 2.9555660377358502e+66 * x8285 + x8427 +
    x8525 + x8705;
  const amrex::Real x8709 =
    3.9e+26 * sc[21] * exp(-9937.0194996457994 * invT - 5.22 * tc[0]);
  const amrex::Real x8723 =
    3.9e+26 * sc[19] * exp(-9937.0194996457994 * invT - 5.22 * tc[0]);
  const amrex::Real x8729 =
    6.14 * sc[10] * exp(-5258.61415765932 * invT + 1.74 * tc[0]);
  x8303 = x8302 * (6.0 * x249 * x8303 / ((x8305) * (x8305)) + 0.84 * x8330);
  x8305 = x8303 * x8337 - x8303 * x8347 - 4.58643e+89 * x8310 * x8315 +
          4.58643e+89 * x8310 * x8342 + 1.173e+49 * x8323 - 1.173e+49 * x8340;
  x8330 = 7.8e+41 * exp(-23600.8616262414 * invT - 9.147 * tc[0]);
  const amrex::Real x8762 = 2.68e+47 * refC *
                            exp(
                              -g_RT[10] - g_RT[18] + g_RT[28] -
                              17979.931469202598 * invT - 12.82 * tc[0]);
  const amrex::Real x8767 =
    3000000.0 * sc[10] * exp(65.921383220418306 * invT - 0.32 * tc[0]);
  const amrex::Real x8776 =
    330000.0 * refC *
    exp(-g_RT[10] - g_RT[20] + g_RT[30] - 3874.76832669634 * invT);
  x2681 = -2.477e+21 * refC * sc[11] * x2562 * x2572 +
          2.477e+21 * sc[10] * x2562 * x2566 +
          4.83112519685039e+32 * x2546 * x2547 -
          4.83112519685039e+32 * x2546 * x2551 - x2558 * x2568 * x2681 +
          x2558 * x2579 * x2681;
  const amrex::Real x8800 = x2681 - x344 * x616;
  x3668 = -4.954e+21 * refC * sc[11] * x2562 * x2572 +
          4.954e+21 * sc[10] * x2562 * x2566 +
          9.6622503937007901e+32 * x2546 * x2547 -
          9.6622503937007901e+32 * x2546 * x2551 - x2568 * x3668 +
          x2579 * x3668;
  const amrex::Real x8811 = 60000000.0 * sc[11] * x806 + x336 * x687 -
                            x336 * x797 + x3367 - x340 * x701 + x340 * x738 +
                            x8800;
  const amrex::Real x8812 = -60000000.0 * sc[11] * x839 + x8811;
  const amrex::Real x8825 =
    12100000000000.0 *
    exp(g_RT[11] + g_RT[16] - g_RT[26] - 28783.993284029999 * invT);
  const amrex::Real x8830 =
    60000000.0 * sc[11] * x806 + x2681 + x336 * x687 + x340 * x738;
  const amrex::Real x8833 =
    60000000.0 * sc[11] * x806 + x336 * x687 + x3366 + x340 * x738 + x8800;
  const amrex::Real x8850 =
    -187000000000.0 * sc[12] * x2532 + 187000000000.0 * x2536 * x424;
  const amrex::Real x8855 = 20000000.0 * sc[9] * x616 + x2771 + x8850;
  const amrex::Real x8879 = -x558 * x806;
  const amrex::Real x8883 = 30000000.0 * sc[4] * x839 +
                            33000000.0 * sc[9] * x839 +
                            10600000.0 * x1011 * x797 + x3426 + x3961 +
                            x558 * x839 + x6018 + x6998 + x8855 + x8879;
  const amrex::Real x8899 = 10.0 * exp(-3019.29999482832 * invT + 2.0 * tc[0]);
  const amrex::Real x8906 =
    10.0 * exp(-4025.7333264377598 * invT + 2.0 * tc[0]);
  const amrex::Real x8915 =
    3400000.0 *
    exp(
      g_RT[12] + g_RT[16] - g_RT[17] - g_RT_qss[1] - 347.21949940525701 * invT);
  const amrex::Real x8925 = x3425 + x3960 + x6018 + x6998 + x8855 + x8879;
  const amrex::Real x8928 =
    60000000.0 * exp(-g_RT[12] + g_RT[16] - g_RT[28] + g_RT[29]);
  const amrex::Real x8930 =
    10.0 * exp(
             -g_RT[12] + g_RT[16] - g_RT[18] + g_RT[19] -
             3019.29999482832 * invT + 2.0 * tc[0]);
  const amrex::Real x8932 =
    10.0 * exp(
             -g_RT[12] + g_RT[16] - g_RT[20] + g_RT[21] -
             4025.7333264377598 * invT + 2.0 * tc[0]);
  const amrex::Real x8934 =
    90330000.0 * exp(-g_RT[12] + g_RT[16] - g_RT[19] + g_RT[20]);
  const amrex::Real x8939 = -sc[12] * x8915 - 15000000.0 * sc[3] * x894 +
                            15000000.0 * sc[3] * x902 - x558 * x926 +
                            x558 * x931;
  const amrex::Real x8943 = 15000000.0 * sc[3] * x135 -
                            15000000.0 * sc[3] * x910 +
                            3400000.0 * x226 * exp(-347.21949940525701 * invT) -
                            x558 * x936 + x558 * x947;
  x2764 = sc[13] * x2264 * x2764 + 5.9778837209302301e+29 * x108 * x7629 -
          1.67201834862385e+18 * x2236 * x2240 +
          1.67201834862385e+18 * x2236 * x2241 - 1350000000000.0 * x2243 +
          1350000000000.0 * x2253 - x2282 * x2764 - x7622 * x7671 -
          5.9778837209302301e+29 * x7629 * x7633 + 5070000000000000.0 * x7639 -
          5070000000000000.0 * x7652 + x7655 * x7671;
  x7671 = -14000000.0 * sc[17] * x738;
  x2262 = -2700000000000.0 * refC * sc[13] * x2248 * x2262 +
          2700000000000.0 * sc[12] * sc[2] * x2248 * exp(x2249) +
          1.19557674418605e+30 * x108 * x7629 -
          3.3440366972477102e+18 * x2236 * x2240 +
          3.3440366972477102e+18 * x2236 * x2241 -
          x2258 * x2282 * (4.0 * x2256 * x249 + 0.56 * x2257 * x249) +
          x3551 * (4.0 * x2256 * x249 + 0.56 * x2257 * x249) -
          x7621 * x7622 * (0.56 * x7642 + 4.0 * x7643) +
          x7621 * x7655 * (0.56 * x7642 + 4.0 * x7643) -
          1.19557674418605e+30 * x7629 * x7633 + 1.014e+16 * x7639 -
          1.014e+16 * x7652;
  const amrex::Real x9018 = 14000000.0 * sc[17] * x701 +
                            20000000.0 * sc[5] * x797 + x1063 * x687 -
                            x1063 * x797 + x2764 + x676 * x806 + x7001 + x7671;
  const amrex::Real x9019 = x3971 - x676 * x839 + x839 * x991 + x9018;
  const amrex::Real x9031 = x1063 * x687 + x2764 + x3398 + x3970 + x676 * x806;
  const amrex::Real x9033 = x7001 + x7671 + x9031;
  const amrex::Real x9073 =
    sc[37] * x1700 * exp(286.83349950869001 * invT + x1699);
  const amrex::Real x9075 = sc[37] * x104 * x1048;
  const amrex::Real x9078 = -2.2e+18 * refC * sc[14] * x2399 * x2422 +
                            2.2e+18 * x2399 * x2435 +
                            x2402 * (2.0 * x2415 + 0.28 * x2416) +
                            8.9629629629629601e+30 * x2404 * x2409 -
                            8.9629629629629601e+30 * x2409 * x2411 -
                            x2439 * (2.0 * x2415 + 0.28 * x2416);
  const amrex::Real x9081 = 1690000.0 * sc[37] * x1048;
  const amrex::Real x9083 = -x104 * x9081;
  const amrex::Real x9086 = x104 * x8402 + x9078;
  x2422 = -4.4e+18 * refC * sc[14] * x2399 * x2422 + 4.4e+18 * x2399 * x2435 +
          x2402 * (4.0 * x2415 + 0.56 * x2416) +
          1.79259259259259e+31 * x2404 * x2409 -
          1.79259259259259e+31 * x2409 * x2411 -
          x2439 * (4.0 * x2415 + 0.56 * x2416);
  const amrex::Real x9107 = 30200000.0 * sc[14] * x8288 +
                            30200000.0 * sc[14] * x8292 + x2422 -
                            3380000.0 * x9073 - 3380000.0 * x9075;
  const amrex::Real x9112 = x8461 - 1690000.0 * x9073 + x9083 + x9086;
  x375 =
    1690000.0 * exp(g_RT[14] - g_RT[37] + 286.83349950869001 * invT - x375);
  x2053 = 8.6e+16 * sc[14] * x2037 * x2040 + sc[15] * x2053 * x2055 -
          sc[2] * x2053 * x2058 - 2.7e+26 * x114 * x429 * x607 -
          8.6e+16 * x2037 * x2054 * x607 + 1.4792e+26 * x2042 * x2045 -
          1.4792e+26 * x2042 * x2062 + 3.645e+45 * x606 * x92 -
          2.7e+26 * x607 * x6577 - 1.15714285714286e+45 * x6562 * x6563 +
          1.15714285714286e+45 * x6562 * x6565 + x6571 * x6579 - x6571 * x6586 +
          2.7e+26 * x6582 * x91 - x7815 * x7820 + x7815 * x7826 +
          2.7e+26 * x7818 * x91 - 3.645e+45 * x97;
  x6571 = x2053 - x302 * x738;
  x7815 = x302 * x701 + x6571;
  x7816 = sc[15] * x7816 * x7824 - 5.4e+26 * x114 * x429 * x607 -
          x2029 * (0.56 * x2030 + 4.0 * x3525) +
          x2032 * (0.56 * x2030 + 4.0 * x3525) + 2.9584e+26 * x2042 * x2045 -
          2.9584e+26 * x2042 * x2062 + 1.72e+17 * x3520 - 1.72e+17 * x3530 +
          7.29e+45 * x606 * x92 - 5.4e+26 * x607 * x6577 -
          2.3142857142857099e+45 * x6562 * x6563 +
          2.3142857142857099e+45 * x6562 * x6565 +
          x6570 * x6579 * (0.56 * x6566 + 4.0 * x6568) -
          x6570 * x6586 * (0.56 * x6566 + 4.0 * x6568) + 5.4e+26 * x6582 * x91 -
          x7816 * x7818 * x94 + 5.4e+26 * x7818 * x91 - 7.29e+45 * x97;
  amrex::Real x9165 = x681 / ((x708) * (x708));
  amrex::Real x9166 = ((x681) * (x681)) / ((x708) * (x708) * (x708));
  const amrex::Real x9167 = 1.4 * x249 * x9165 + 0.196 * x249 * x9166;
  x150 = x150 / ((((x681) * (x681)) / ((x708) * (x708)) + 1.0) *
                 (((x681) * (x681)) / ((x708) * (x708)) + 1.0));
  x681 = sc[16] * x200 * x316;
  x708 = 2.69e+21 * x150 * x35 * x681;
  const amrex::Real x9175 = sc[23] * x27 * x556;
  const amrex::Real x9177 =
    3.4548997388095799e-18 *
    exp(
      M_LN10 * (0.43429448190325198 * x212 /
                (((x569) * (x569)) / ((x600) * (x600)) + 1.0))) /
    ((x35 * exp(x206) + 1.8587360594795538e-9) *
     (x35 * exp(x206) + 1.8587360594795538e-9));
  const amrex::Real x9178 = x623 * x9177;
  x206 = sc[16] * x226 * x27 * exp(x206);
  const amrex::Real x9185 = x569 / ((x600) * (x600));
  const amrex::Real x9187 = ((x569) * (x569)) / ((x600) * (x600) * (x600));
  const amrex::Real x9188 = 1.4 * x249 * x9185 + 0.196 * x249 * x9187;
  x212 = x212 / ((((x569) * (x569)) / ((x600) * (x600)) + 1.0) *
                 (((x569) * (x569)) / ((x600) * (x600)) + 1.0));
  x209 = x209 * x226 * x27;
  const amrex::Real x9192 = sc[16] * x209 * x212;
  const amrex::Real x9196 =
    exp(g_RT[16] - g_RT[17] - 5686.34832359333 * invT - x369);
  const amrex::Real x9199 =
    x771 * exp(-5839.82940666378 * invT - 4.61 * tc[0] + x505 - x525) /
    (x145 + 1.0);
  const amrex::Real x9202 = 2.69e+21 * sc[24] * x150 * x503 * x9199;
  const amrex::Real x9205 = x226 * x263 * x9177;
  x145 = x771 / ((x145 + 1.0) * (x145 + 1.0));
  x771 = sc[16] * x200 * x35 *
         exp(-9410.1516505482596 * invT - 9.72 * tc[0] - 2 * x525);
  const amrex::Real x9213 = x631 * x9199;
  x505 = sc[24] * x503 *
         exp(-9410.1516505482596 * invT - 9.72 * tc[0] + x505 - 2 * x525);
  x525 = 2.69e+16 * x212 * x35 * x9175;
  x369 =
    x1700 * exp(g_RT[16] - g_RT[17] - 5686.34832359333 * invT + x1699 - x369);
  const amrex::Real x9227 = exp(-920.88649842263703 * invT);
  const amrex::Real x9229 = sc[23] * x104 * x9227;
  const amrex::Real x9234 =
    sc[23] * x1700 * exp(-920.88649842263703 * invT + x1699);
  const amrex::Real x9239 = sc[36] * exp(-27198.860786745099 * invT);
  const amrex::Real x9241 =
    exp(g_RT[16] + g_RT[32] - g_RT[36] - 27198.860786745099 * invT);
  const amrex::Real x9243 = sc[32] * x423 * x9241;
  const amrex::Real x9253 = 3000000.0 * sc[16] * x9196;
  const amrex::Real x9260 = 55000.0 * sc[23] * x9227;
  const amrex::Real x9262 = -x104 * x9260;
  x212 = x212 *
         (((x569) * (x569)) * x671 / ((x600) * (x600) * (x600)) + x672 * x9185);
  amrex::Real x9279 = x671 * x9166 + x672 * x9165;
  const amrex::Real x9283 = x145 * x771;
  const amrex::Real x9286 = x145 * x505;
  const amrex::Real x9294 = 310000000.0 * x9239 - 310000000.0 * x9243;
  const amrex::Real x9295 =
    sc[16] * x209 * x212 - 2.69e+16 * x206 - 2.69e+16 * x212 * x35 * x9175 -
    2.69e+21 * x681 + x708 * x9279 + x7676 + 2.69e+16 * x9175 -
    1.44722e+25 * x9178 - x9202 * x9279 + 1.44722e+25 * x9205 +
    2.69e+21 * x9213 + 8.9334567901234601e+36 * x9283 -
    8.9334567901234601e+36 * x9286 + x9294;
  const amrex::Real x9296 = x104 * x5656 + x104 * x9253 + x9295;
  const amrex::Real x9297 = x2539 + x5686;
  const amrex::Real x9364 = sc[16] * x369;
  const amrex::Real x9366 = -40000000.0 * sc[9] * x738 + x358 * x738 +
                            2000000000.0 * x5598 + 3000000.0 * x9364;
  const amrex::Real x9367 = 14000000.0 * sc[17] * x701 +
                            40000000.0 * sc[9] * x701 - x358 * x701 + x7671 +
                            x9366;
  const amrex::Real x9381 = sc[16] * x104 * x9196;
  const amrex::Real x9385 =
    110000.0 * sc[23] * x1700 * exp(-920.88649842263703 * invT + x1699);
  const amrex::Real x9386 = -110000.0 * sc[23] * x104 * x9227 - x9385;
  x7720 = -5.38e+16 * x206 - x525 * (4.0 * x249 * x9185 + 0.56 * x249 * x9187) -
          5.38e+21 * x681 + x708 * (4.0 * x249 * x9165 + 0.56 * x249 * x9166) +
          x7720 + 5.38e+16 * x9175 - 2.89444e+25 * x9178 +
          x9192 * (4.0 * x249 * x9185 + 0.56 * x249 * x9187) -
          x9202 * (4.0 * x249 * x9165 + 0.56 * x249 * x9166) +
          2.89444e+25 * x9205 + 5.38e+21 * x9213 + 620000000.0 * x9239 -
          620000000.0 * x9243 + 1.7866913580246899e+37 * x9283 -
          1.7866913580246899e+37 * x9286;
  x150 = x150 * (12.0 * x249 * x9165 + 1.68 * x249 * x9166);
  const amrex::Real x9427 = 330000.0 * kf_qss[6] * refC * sc[23] * sc[33] *
                            exp(-920.88649842263703 * invT + x1699) / x373;
  const amrex::Real x9438 = -55000.0 * x9234 + x9262;
  const amrex::Real x9443 = -30000000.0 * sc[23] * x687;
  const amrex::Real x9446 = x261 * x687 + x371 * x806 + x627 * x687 + x9443;
  const amrex::Real x9447 =
    30000000.0 * sc[23] * x797 - x261 * x797 - x627 * x797 + x9446;
  const amrex::Real x9451 = -50000000.0 * sc[23] * x806;
  const amrex::Real x9454 = 50000000.0 * sc[23] * x839 + x3426 - x371 * x839 +
                            x558 * x839 + x5625 * x888 + x6023 + x8879 + x9451;
  const amrex::Real x9455 =
    x3908 + x3911 + x9296 + x9367 + x9438 + x9447 + x9454;
  const amrex::Real x9503 = -40000000.0 * sc[9] * x738 + x358 * x738;
  const amrex::Real x9543 = 3.0 * x249 * x9165 + 0.42 * x249 * x9166;
  const amrex::Real x9550 = exp(2.0 * g_RT[16] + g_RT[18] - 2.0 * g_RT[23]);
  x467 = 55000.0 * exp(g_RT[16] - g_RT[23] - 920.88649842263703 * invT - x467);
  const amrex::Real x9579 = -310000000.0 * refCinv * sc[32] * x35 * x9241 -
                            29000000.0 * sc[32] * x662 + 465000000.0 * x9239 -
                            465000000.0 * x9243;
  const amrex::Real x9589 = -30000000.0 * sc[19] * x518 - sc[19] * x8930 -
                            30000000.0 * sc[23] * x912 +
                            30000000.0 * sc[23] * x913;
  const amrex::Real x9597 = 3000000.0 * exp(-5686.34832359333 * invT);
  const amrex::Real x9652 = 6.0 * x249 * x9165 + 0.84 * x249 * x9166;
  x569 = 6.0 * x249 * x569 / ((x600) * (x600)) + 0.84 * x249 * x9187;
  x600 = sc[16] * x209 * x212 + 14000000.0 * sc[17] * x701 +
         40000000.0 * sc[9] * x701 - 2.69e+16 * x206 -
         2.69e+16 * x212 * x35 * x9175 + x2539 - x358 * x701 + x3906 + x6023 -
         2.69e+21 * x681 + x708 * x9279 + x7671 + x7676 + 2.69e+16 * x9175 -
         1.44722e+25 * x9178 - x9202 * x9279 + 1.44722e+25 * x9205 +
         2.69e+21 * x9213 + 8.9334567901234601e+36 * x9283 -
         8.9334567901234601e+36 * x9286 + x9447 + x9451 + x9503;
  x7676 = -x104 * x9253;
  const amrex::Real x9758 = -1.0102268722467e+20 * x5629 * x5632 +
                            1.0102268722467e+20 * x5629 * x5636 +
                            1173000000000.0 * x5642 - 1173000000000.0 * x5646;
  const amrex::Real x9759 = -x104 * x1722 + x104 * x8030 + x9758;
  const amrex::Real x9765 = -14000000.0 * sc[17] * x701;
  const amrex::Real x9766 =
    14000000.0 * sc[17] * x738 - x1757 + 2000000.0 * x6505;
  const amrex::Real x9773 = x7676 - 3000000.0 * x9364 + x9759;
  const amrex::Real x9774 =
    -2640000.0 * x1011 * x687 + x558 * x806 + x628 * x687;
  const amrex::Real x9775 = 2640000.0 * x1011 * x797 - x628 * x797 + x9774;
  const amrex::Real x9778 = -x558 * x839 + x9765 + x9766 + x9773 + x9775;
  const amrex::Real x9803 = -24481.490791399599 * invT - 0.76 * tc[0];
  const amrex::Real x9805 = x21 * x3566 * exp(x22 + x9803) / ((x288) * (x288));
  const amrex::Real x9807 = sc[18] * x21 * exp(x9803) / ((x288) * (x288));
  const amrex::Real x9809 = exp(x775) / x288;
  const amrex::Real x9810 = -2450000000.0 * sc[18] * x9809 - 7503.125 * x9805 +
                            7503.125 * x9807 +
                            2450000000.0 * x3566 * exp(x22 + x775) / x288;
  const amrex::Real x9811 = 100000000.0 * sc[2] * x616 + x616 * x988 + x9810;
  const amrex::Real x9814 = x3566 * exp(x22 + x775) / x288;
  const amrex::Real x9816 = -4900000000.0 * sc[18] * x9809 - 15006.25 * x9805 +
                            15006.25 * x9807 + 4900000000.0 * x9814;
  const amrex::Real x9819 = 50000000.0 * sc[10] * x888 +
                            50000000.0 * sc[23] * x839 + x261 * x797 + x3949 +
                            x6027 + x9451 + x9811;
  const amrex::Real x9823 = exp(g_RT[18] - 2.0 * g_RT[19] + g_RT[20]);
  const amrex::Real x9832 = x261 * x797 + x3949 + x6027 + x9451 + x9811;
  const amrex::Real x9835 =
    x35 * exp(-4521.1501339224997 * invT - 11.79 * tc[0]);
  amrex::Real x9837 = log(
    0.802 * exp(-0.00043900083410158499 * tc[1]) +
    0.198 * exp(-1.6666666666666701e-5 * tc[1]) + exp(-5723.2 * invT));
  amrex::Real x9838 = -0.29097730287517898 * x9837 +
                      0.43429448190325198 * log(1.03333333333333e+37 * x9835) -
                      0.4;
  amrex::Real x9840 = -0.55155399201712996 * x9837 - 0.14 * x9838 + 0.75;
  const amrex::Real x9845 =
    9.3652445369407457e-75 *
    exp(
      M_LN10 * (0.43429448190325198 * x9837 /
                (((x9838) * (x9838)) / ((x9840) * (x9840)) + 1.0))) /
    ((x9835 + 9.67741935483874e-38) * (x9835 + 9.67741935483874e-38));
  const amrex::Real x9847 =
    sc[19] * sc[21] * x35 * exp(-9042.3002678450102 * invT - 23.58 * tc[0]);
  const amrex::Real x9850 =
    exp(
      M_LN10 * (0.43429448190325198 * x9837 /
                (((x9838) * (x9838)) / ((x9840) * (x9840)) + 1.0))) /
    (1.03333333333333e+37 * x9835 + 1.0);
  const amrex::Real x9852 = exp(
    -g_RT[19] - g_RT[21] + g_RT[31] - 4521.1501339224997 * invT -
    11.79 * tc[0]);
  const amrex::Real x9854 = refC * sc[31] * x9850 * x9852;
  const amrex::Real x9856 = sc[31] * x503 *
                            exp(
                              -g_RT[19] - g_RT[21] + g_RT[31] -
                              9042.3002678450102 * invT - 23.58 * tc[0]);
  const amrex::Real x9859 =
    sc[21] * exp(-4521.1501339224997 * invT - 11.79 * tc[0]);
  const amrex::Real x9861 = sc[19] * x9850 * x9859;
  amrex::Real x9866 = x249 * x9838 / ((x9840) * (x9840));
  amrex::Real x9867 =
    x249 * ((x9838) * (x9838)) / ((x9840) * (x9840) * (x9840));
  x9837 = x9837 / ((((x9838) * (x9838)) / ((x9840) * (x9840)) + 1.0) *
                   (((x9838) * (x9838)) / ((x9840) * (x9840)) + 1.0));
  const amrex::Real x9869 = x9837 * (1.4 * x9866 + 0.196 * x9867);
  const amrex::Real x9873 = 1.55e+44 * sc[31] * x503 * x9850 * x9852;
  const amrex::Real x9877 = 1.55e+44 * sc[19] * sc[21] * x9835 * x9850;
  const amrex::Real x9879 = 1.1211666666666701e+81 * x9845 * x9847 -
                            1.1211666666666701e+81 * x9845 * x9856 +
                            1.085e+44 * x9854 - 1.085e+44 * x9861 -
                            x9869 * x9873 + x9869 * x9877;
  amrex::Real x9884 = x9837 * (2.0 * x9866 + 0.28 * x9867);
  const amrex::Real x9888 =
    1.55e+44 * refC * sc[31] * x9850 * x9852 -
    1.55e+44 * sc[19] * x9850 * x9859 + 1.6016666666666699e+81 * x9845 * x9847 -
    1.6016666666666699e+81 * x9845 * x9856 - x9873 * x9884 + x9877 * x9884;
  x2082 = x2077 * x2113 - x2077 * x2121 + 2.565e+21 * x2082 * x2118 * x994 -
          2.565e+21 * x2088 + 1.70446243523316e+34 * x2091 * x2093 -
          1.70446243523316e+34 * x2091 * x2098 + x8360 + x9888;
  x2077 = x1053 * x616 + x2082 + x2343;
  x8360 = -x9837 * x9873 * (4.0 * x9866 + 0.56 * x9867) +
          x9837 * x9877 * (4.0 * x9866 + 0.56 * x9867) +
          3.2033333333333302e+81 * x9845 * x9847 -
          3.2033333333333302e+81 * x9845 * x9856 + 3.1e+44 * x9854 -
          3.1e+44 * x9861;
  x2076 = 2.565e+21 * x15 * x2076 * x2088 - x2076 * x2116 * x2118 * x994 -
          5.13e+21 * x2088 + 3.4089248704663201e+34 * x2091 * x2093 -
          3.4089248704663201e+34 * x2091 * x2098 + 5.13e+21 * x2124 + x8360 +
          x8498;
  x8498 = 12.0 * x249 * x9838 / ((x9840) * (x9840)) + 1.68 * x9867;
  x9838 = 9.3e+44 * refC * sc[31] * x9850 * x9852 -
          9.3e+44 * sc[19] * x9850 * x9859 - x8498 * x9837 * x9873 +
          x8498 * x9837 * x9877 + 9.61e+81 * x9845 * x9847 -
          9.61e+81 * x9845 * x9856;
  x9840 = x2082 + x3965 + x9443;
  const amrex::Real x9916 =
    30000000.0 * sc[10] * x839 + 30000000.0 * sc[23] * x797 + x9840;
  const amrex::Real x9917 = -30000000.0 * sc[10] * x806 + x2082 + x2343 + x9443;
  const amrex::Real x9920 = x9837 * (3.0 * x9866 + 0.42 * x9867);
  const amrex::Real x9925 = 2.4025e+81 * x9845 * x9847 -
                            2.4025e+81 * x9845 * x9856 + 2.325e+44 * x9854 -
                            2.325e+44 * x9861 - x9873 * x9920 + x9877 * x9920;
  const amrex::Real x9927 =
    -7.695e+21 * x2088 + 5.1133873056994796e+34 * x2091 * x2093 -
    5.1133873056994796e+34 * x2091 * x2098 +
    x2113 * (0.84 * x2106 + 6.0 * x2108) -
    x2121 * (0.84 * x2106 + 6.0 * x2108) + 7.695e+21 * x2124 + x8705;
  const amrex::Real x9935 = x9837 * (6.0 * x9866 + 0.84 * x9867);
  const amrex::Real x9939 = 4.805e+81 * x9845 * x9847 -
                            4.805e+81 * x9845 * x9856 + 4.65e+44 * x9854 -
                            4.65e+44 * x9861 - x9873 * x9935 + x9877 * x9935;
  x45 = 7.0e+44 * x191 * x35 * x45 - 7.0e+44 * x191 -
        7.0e+44 * x35 * x45 * x7600 - 6.125e+76 * x38 * x39 +
        6.125e+76 * x39 * x7608 + 7.0e+44 * x7600;
  x2341 = sc[19] * sc[2] * x2364 + 3.2236842105263198e+29 * x2339 * x2340 -
          3.2236842105263198e+29 * x2339 * x2386 - x2341 * x2367 +
          x2341 * x2381 - 1.4e+18 * x2348 * x2378 + x45;
  const amrex::Real x9942 = x2341 + x264 * x616 + x344 * x616;
  const amrex::Real x9949 =
    -1.4e+45 * x191 + 6.4473684210526297e+29 * x2339 * x2340 -
    6.4473684210526297e+29 * x2339 * x2386 + 2.8e+18 * x2348 * x2352 -
    2.8e+18 * x2348 * x2378 - x2367 * (4.0 * x2358 + 0.56 * x2360) +
    x2381 * (4.0 * x2358 + 0.56 * x2360) - 1.225e+77 * x38 * x39 +
    1.225e+77 * x39 * x7608 +
    x7595 * (4.0 * x249 * x7586 + 0.56 * x249 * x7587) + 1.4e+45 * x7600 -
    x7604 * (4.0 * x249 * x7586 + 0.56 * x249 * x7587);
  const amrex::Real x9951 = 30000000.0 * sc[20] * x806 + x1047 * x687;
  const amrex::Real x9952 = -100000000.0 * sc[20] * x701 +
                            100000000.0 * sc[20] * x738 - x1047 * x797 +
                            x1063 * x797 + x6032 + x9942 + x9951;
  const amrex::Real x9953 =
    60000000.0 * sc[11] * x839 - 30000000.0 * sc[20] * x839 + x3978 + x9952;
  const amrex::Real x9959 =
    100000000.0 * sc[20] * x738 + x3389 + x3977 + x6032 + x9942 + x9951;
  const amrex::Real x9960 = 9.6710526315789494e+29 * x2339 * x2340 -
                            9.6710526315789494e+29 * x2339 * x2386 +
                            4.2e+18 * x2348 * x2352 - 4.2e+18 * x2348 * x2378 -
                            x2367 * (6.0 * x2358 + 0.84 * x2360) +
                            x2381 * (6.0 * x2358 + 0.84 * x2360);
  const amrex::Real x9966 =
    -3.00565398683248e+51 * x2451 * x2452 +
    3.00565398683248e+51 * x2451 * x2453 + 2.027e+27 * x2456 * x2468 -
    x2473 * (x2457 * x671 + x2459 * x672) - 2.027e+27 * x2481 +
    x2498 * (x2457 * x671 + x2459 * x672) + x2763 + x9888;
  const amrex::Real x9967 = -x319 * x738 + x9966;
  const amrex::Real x9968 = x319 * x701 + x9967;
  x2462 = -sc[2] * x2462 * x2471 - 6.0113079736649601e+51 * x2451 * x2452 +
          6.0113079736649601e+51 * x2451 * x2453 + 4.054e+27 * x2456 * x2468 +
          2.027e+27 * x2462 * x2481 * x35 - 4.054e+27 * x2481 + x3700 + x8360;
  x3700 = 1.77e+38 * x8256 * x8266;
  x8256 = 1.77e+38 * x8256 * x8269;
  x8414 = -1.99e+29 * refC * sc[22] * x2197 * x2202 +
          7.6009596928982695e+46 * x2188 * x2189 -
          7.6009596928982695e+46 * x2188 * x2194 + 1.99e+29 * x2197 * x2219 +
          x2215 * (x2190 * x671 + x2208 * x672) -
          x2223 * (x2190 * x671 + x2208 * x672) - x3700 * x8414 +
          x8256 * x8414 + 1.77e+38 * x8266 - 1.77e+38 * x8269 +
          1.47778301886792e+66 * x8273 - 1.47778301886792e+66 * x8285;
  x8360 = x319 * x738 + x8414;
  const amrex::Real x9976 = -x319 * x701 + x8360;
  x2208 = 1.5201919385796501e+47 * x2188 * x2189 -
          1.5201919385796501e+47 * x2188 * x2194 + 3.98e+29 * x2197 * x2219 -
          3.98e+29 * x2205 +
          x2215 * (0.56 * x2190 * x249 + 4.0 * x2208 * x249) -
          x2223 * (0.56 * x2190 * x249 + 4.0 * x2208 * x249) - x3700 * x8477 +
          x8256 * x8477 + 3.54e+38 * x8266 - 3.54e+38 * x8269 +
          2.9555660377358502e+66 * x8273 - 2.9555660377358502e+66 * x8285;
  x2190 = -sc[16] * x209 * x212 + 2.69e+16 * x206 +
          2.69e+16 * x212 * x35 * x9175 - 2.69e+16 * x9175 +
          1.44722e+25 * x9178 - 1.44722e+25 * x9205;
  x8477 = 5.38e+16 * x206 + x525 * (4.0 * x249 * x9185 + 0.56 * x249 * x9187) -
          5.38e+16 * x9175 + 2.89444e+25 * x9178 -
          x9192 * (4.0 * x249 * x9185 + 0.56 * x249 * x9187) -
          2.89444e+25 * x9205;
  x212 = 30000000.0 * sc[23] * x687 + 50000000.0 * sc[23] * x806 - x371 * x806;
  const amrex::Real x9985 =
    -30000000.0 * sc[23] * x797 + x212 + x2190 + x3418 + x358 * x701;
  const amrex::Real x9989 = -50000000.0 * sc[23] * x839 + x104 * x9260 +
                            x371 * x839 + 55000.0 * x9234 + x9985;
  const amrex::Real x9992 = x104 * x9260 + x2190 + 55000.0 * x9234;
  x9279 = 2.69e+21 * x681 - x708 * x9279 + x9202 * x9279 - 2.69e+21 * x9213 -
          8.9334567901234601e+36 * x9283 + 8.9334567901234601e+36 * x9286;
  const amrex::Real x9996 = 20000000.0 * sc[4] * x616 + x2137 + x9279;
  x9165 = 5.38e+21 * x681 - x708 * (4.0 * x249 * x9165 + 0.56 * x249 * x9166) +
          x9202 * (4.0 * x249 * x9165 + 0.56 * x249 * x9166) -
          5.38e+21 * x9213 - 1.7866913580246899e+37 * x9283 +
          1.7866913580246899e+37 * x9286;
  x9166 = -x627 * x687 + x9279;
  const amrex::Real x10002 = x6010 + x627 * x797 + x628 * x797 + x9166;
  const amrex::Real x10003 = x10002 + x3954 + x676 * x839;
  const amrex::Real x10004 = x2137 + x6010 - x676 * x806 + x9166;
  x2135 = -x2130 * x2135 * x2158 + x2130 * x2135 * x2174 +
          4.3757575757575802e+50 * x2142 * x2148 -
          4.3757575757575802e+50 * x2142 * x2179 - 3.8e+29 * x2170 +
          3.8e+29 * x2177;
  x3505 = 8.7515151515151504e+50 * x2142 * x2148 -
          8.7515151515151504e+50 * x2142 * x2179 - x2158 * x3505 -
          7.6e+29 * x2170 + x2174 * x3505 + 7.6e+29 * x2177;
  const amrex::Real x10011 = -x2130 * x2158 * (6.0 * x2162 + 0.84 * x2164) +
                             x2130 * x2174 * (6.0 * x2162 + 0.84 * x2164) +
                             1.3127272727272701e+51 * x2142 * x2148 -
                             1.3127272727272701e+51 * x2142 * x2179 -
                             1.14e+30 * x2170 + 1.14e+30 * x2177;
  x2702 = x2702 + x8427;
  const amrex::Real x10014 = x1047 * x797 + x3367 + x3930 + x8427;
  const amrex::Real x10016 = x3366 + x3930 + x8427;
  const amrex::Real x10017 =
    -x1932 * (x1959 * x671 + x1960 * x672) + 8.8445e+87 * x1946 * x1951 -
    8.8445e+87 * x1946 * x1968 + 1.33e+48 * x2691 +
    x2695 * (x1959 * x671 + x1960 * x672) - 1.33e+48 * x2700 + x2757;
  x8358 = x10017 - x8358 * x8394 + x8358 * x8398 + 4.27e+46 * x8365 * x8367 +
          7.29316e+85 * x8370 * x8373 - 7.29316e+85 * x8370 * x8380 - x8396;
  x3691 =
    -sc[10] * sc[19] * x8355 * x8357 + x15 * x8357 * x8396 -
    x1932 * (0.56 * x1959 * x249 + 4.0 * x1960 * x249) +
    1.7689e+88 * x1946 * x1951 - 1.7689e+88 * x1946 * x1968 + 2.66e+48 * x2691 +
    x2695 * (0.56 * x1959 * x249 + 4.0 * x1960 * x249) - 2.66e+48 * x2700 +
    x3691 + 8.54e+46 * x8365 * x8367 + 1.458632e+86 * x8370 * x8373 -
    1.458632e+86 * x8370 * x8380 - 8.54e+46 * x8378;
  x8396 = 1.281e+47 * x8365 * x8367 + 2.187948e+86 * x8370 * x8373 -
          2.187948e+86 * x8370 * x8380 - 1.281e+47 * x8378 -
          x8394 * (6.0 * x8386 + 0.84 * x8388) +
          x8398 * (6.0 * x8386 + 0.84 * x8388);
  x671 = -6.26e+26 * refC * sc[30] * x1986 -
         x1982 * x2018 * (x2005 * x671 + x2006 * x672) + 6.26e+26 * x1994 +
         2.9464360902255599e+46 * x1996 * x2001 -
         2.9464360902255599e+46 * x1996 * x2014 +
         x2750 * (x2005 * x671 + x2006 * x672);
  x672 = -x1982 * x2018 * (0.56 * x2005 * x249 + 4.0 * x2006 * x249) +
         1.252e+27 * x1994 + 5.8928721804511299e+46 * x1996 * x2001 -
         5.8928721804511299e+46 * x1996 * x2014 - 1.252e+27 * x2021 +
         x2750 * (0.56 * x2005 * x249 + 4.0 * x2006 * x249);
  x1986 =
    -3.91e+48 * refC * sc[31] * x8300 * x8320 -
    1.55e+44 * refC * sc[31] * x9850 * x9852 +
    3.91e+48 * sc[10] * x8300 * x8334 + 1.55e+44 * sc[19] * x9850 * x9859 +
    1.52881e+89 * x8310 * x8315 - 1.52881e+89 * x8310 * x8342 - x8337 * x8423 +
    x8347 * x8423 - 1.6016666666666699e+81 * x9845 * x9847 +
    1.6016666666666699e+81 * x9845 * x9856 + x9873 * x9884 - x9877 * x9884;
  x8423 =
    -7.82e+48 * refC * sc[31] * x8300 * x8320 +
    7.82e+48 * sc[10] * x8300 * x8334 - x8302 * x8337 * x8483 +
    x8302 * x8347 * x8483 + 3.05762e+89 * x8310 * x8315 -
    3.05762e+89 * x8310 * x8342 + x9837 * x9873 * (4.0 * x9866 + 0.56 * x9867) -
    x9837 * x9877 * (4.0 * x9866 + 0.56 * x9867) -
    3.2033333333333302e+81 * x9845 * x9847 +
    3.2033333333333302e+81 * x9845 * x9856 - 3.1e+44 * x9854 + 3.1e+44 * x9861;
  x8483 = x104 * x1718 + x9294;
  x8357 = 54000000.0 * sc[32] * x1706 + 54000000.0 * sc[32] * x1710 -
          67200000.0 * x1909 - 67200000.0 * x1913 - 18000.0 * x5574 -
          18000.0 * x5576 + 620000000.0 * x9239 - 620000000.0 * x9243 -
          6000000.0 * x9364 - 6000000.0 * x9381;
  x9866 = x1755 - 33600000.0 * x1909 - 9000.0 * x5576 + x6603 + x7676 + x8006 +
          x8483 - 3000000.0 * x9364;
  x9867 = -106000000.0 * x5580 - 106000000.0 * x5586;
  x9884 = -106000000.0 * x5583 + x9867;
  const amrex::Real x10038 =
    -264000000.0 * sc[4] * x1922 - 264000000.0 * sc[4] * x1925 -
    7800000.0 * sc[9] * x5607 - 212000000.0 * x5580 * x5591 -
    212000000.0 * x5580 - 212000000.0 * x5583 - 212000000.0 * x5586 -
    7800000.0 * x5604 - 4220000.0 * x6833 - 4220000.0 * x6879 + x8476 -
    3380000.0 * x9073 - 3380000.0 * x9075;
  const amrex::Real x10039 =
    x2617 + x3361 - 106000000.0 * x5580 * x5591 - 3900000.0 * x5604 + x5664 -
    x6609 - 2110000.0 * x6833 + x8525 - 1690000.0 * x9073 + x9083 + x9884;
  const amrex::Real x10040 = -1434.1674975434501 * invT - 0.69 * tc[0];
  const amrex::Real x10043 = exp(-g_RT[34] + g_RT[35] + x10040);
  const amrex::Real x10048 = -310000000.0 * x9239 + 310000000.0 * x9243;
  const amrex::Real x10049 = x10048 + x104 * x1722;
  x3607 = 7600000000000.0 * sc[36] * x1696 + 7600000000000.0 * sc[36] * x1701 -
          x3607 - x3608 - 4000000000.0 * x5596 - 4000000000.0 * x5598 -
          4000000.0 * x6505 - 4000000.0 * x7861 - 620000000.0 * x9239 +
          620000000.0 * x9243;
  x3608 = x10049 + x1757 - 8300000.0 * x2524 - x2689 - 2000000000.0 * x5598 +
          x5658 - 2000000.0 * x6505 + x8032;
  x8000 = refC * sc[37] * x14 * x8000 * x8009 - refC * sc[37] * x8009 -
          sc[10] * sc[9] * x14 * x8000 * x8012 + sc[10] * sc[9] * x8012 +
          x7999 - x8001;
  x8001 = x104 * x9081 + x8000;
  x7999 = x8001 + 1690000.0 * x9073;
  // Write the full Jacobian expression...
  J[0] = 0;
  J[39] = 0;
  J[78] = 0;
  J[117] = 0;
  J[156] = 0;
  J[195] = 0;
  J[234] = 0;
  J[273] = 0;
  J[312] = 0;
  J[351] = 0;
  J[390] = 0;
  J[429] = 0;
  J[468] = 0;
  J[507] = 0;
  J[546] = 0;
  J[585] = 0;
  J[624] = 0;
  J[663] = 0;
  J[702] = 0;
  J[741] = 0;
  J[780] = 0;
  J[819] = 0;
  J[858] = 0;
  J[897] = 0;
  J[936] = 0;
  J[975] = 0;
  J[1014] = 0;
  J[1053] = 0;
  J[1092] = 0;
  J[1131] = 0;
  J[1170] = 0;
  J[1209] = 0;
  J[1248] = 0;
  J[1287] = 0;
  J[1326] = 0;
  J[1365] = 0;
  J[1404] = 0;
  J[1443] = 0;
  J[1] = -18900000.0 * sc[32] * x1706 - 18900000.0 * sc[32] * x1710 -
         2660000000000.0 * sc[36] * x1696 - 2660000000000.0 * sc[36] * x1701;
  J[40] = -sc[16] * x1714 - sc[17] * x1726 - sc[3] * x1730 - x1718 * x279 -
          x1722 * x279 + x1725;
  J[79] = -x1718 * x54 + x1718 * x619 - x1722 * x54 + x1722 * x619;
  J[118] =
    -sc[1] * x1730 + x1718 * x219 - x1718 * x596 + x1722 * x219 - x1722 * x596;
  J[157] = -x157 * x1718 - x157 * x1722 + x1718 * x633 + x1722 * x633;
  J[196] = x1718 * x181 + x1722 * x181 - x1755 - x1757;
  J[235] = x1763 + x1767;
  J[274] = -162000000.0 * sc[32] * x1706 - 162000000.0 * sc[32] * x1710 -
           22800000000000.0 * sc[36] * x1696 -
           22800000000000.0 * sc[36] * x1701;
  J[313] = x1777;
  J[352] = -x1718 * x641 + x1718 * x642 - x1722 * x641 + x1722 * x642;
  J[391] = -x1718 * x231 - x1722 * x231 + x1725;
  J[430] = x1763 + x1767;
  J[469] = -x1718 * x649 - x1722 * x649 + x1725;
  J[508] = x1777;
  J[547] = -x1718 * x650 + x1718 * x668 - x1722 * x650 + x1722 * x668;
  J[586] = x1777;
  J[625] =
    -sc[1] * x1714 - x1718 * x674 + x1718 * x686 - x1722 * x674 + x1722 * x686;
  J[664] =
    -sc[1] * x1726 - x1718 * x297 + x1718 * x320 - x1722 * x297 + x1722 * x320;
  J[703] = x1777;
  J[742] = x1777;
  J[781] = x1777;
  J[820] = x1777;
  J[859] = -81000000.0 * sc[32] * x1706 - 81000000.0 * sc[32] * x1710 -
           11400000000000.0 * sc[36] * x1696 -
           11400000000000.0 * sc[36] * x1701;
  J[898] = x1718 * x782 + x1722 * x782 - x1755 - x1757;
  J[937] = x1777;
  J[976] = x1777;
  J[1015] = x1777;
  J[1054] = x1777;
  J[1093] = x1777;
  J[1132] = x1777;
  J[1171] = x1777;
  J[1210] = x1777;
  J[1249] = 20000000.0 * sc[36] - x1718 * x809 + x1718 * x99 - x1722 * x809 +
            x1722 * x99 - 27000000.0 * x602 * exp(-178.641916360675 * invT);
  J[1288] = -x1718 * x881 - x1722 * x881 + x1725;
  J[1327] = -x1718 * x469 - x1722 * x469 + x1725;
  J[1366] = -x1718 * x465 - x1722 * x465 + x1725;
  J[1405] = 20000000.0 * sc[32] - x1718 * x537 + x1718 * x540 - x1722 * x537 +
            x1722 * x540 - 3800000000000.0 * x602 * exp(x1694);
  J[1444] = x1718 * x957 + x1722 * x957 - x1755 - x1757;
  J[2] =
    30000000.0 * sc[20] * x266 - 30000000.0 * sc[20] * x376 -
    2242800.0 * ((sc[2]) * (sc[2])) * x818 - 110000000.0 * sc[2] * x266 -
    30000000.0 * sc[2] * x289 + 30000000.0 * sc[2] * x315 +
    110000000.0 * sc[2] * x376 - 92400000.0 * sc[4] * x1922 -
    92400000.0 * sc[4] * x1925 + 28000000.0 * sc[9] * x289 -
    28000000.0 * sc[9] * x315 - 5280000.0 * x1011 * x359 +
    5280000.0 * x1011 * x368 + 30000000.0 * x102 * x266 -
    30000000.0 * x102 * x376 + x1035 * x359 - x1035 * x368 + x1041 * x289 -
    x1041 * x315 + x1855 * x647 - x1855 * x669 + 2240000000000000.0 * x1863 -
    x1870 * x1874 + x1870 * x1903 + 2242800.0 * x1895 +
    2.8672e+20 * x1899 * x544 + 23520000.0 * x1909 + 23520000.0 * x1913 +
    x1975 + x2023 - 2240000000000000.0 * x203 + x2067 + x2126 + x2184 + x2233 +
    x2234 + x2285 + x2333 + x2389 + x2444 + x2500 - 6599600.0 * x2502 +
    6599600.0 * x2505 - 16720000000.0 * x2510 + 16720000000.0 * x2513 + x2540 +
    x2593 + x266 * x998 + x289 * x358 - x315 * x358 + x359 * x695 -
    x368 * x695 - x376 * x998 - 2.8672e+20 * x496 * x544 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x647 - x669) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (x266 - x376 + (-x240) * (x647 - x669)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (x289 - x315 + (-x118) * (x266 - x376 + (-x240) * (x647 - x669)) +
       (-x202) *
         (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669))));
  J[41] = -30000000.0 * sc[10] * x374 + 30000000.0 * sc[10] * x693 +
          50000000.0 * sc[10] * x713 - 50000000.0 * sc[10] * x715 -
          30000000.0 * sc[20] * x374 - 50000000.0 * sc[20] * x620 +
          50000000.0 * sc[20] * x670 + 30000000.0 * sc[20] * x693 +
          110000000.0 * sc[2] * x374 + 30000000.0 * sc[2] * x620 -
          30000000.0 * sc[2] * x670 - 110000000.0 * sc[2] * x693 -
          80000000.0 * sc[3] * x347 + 80000000.0 * sc[3] * x689 -
          30000000.0 * sc[4] * x374 + 30000000.0 * sc[4] * x693 -
          28000000.0 * sc[9] * x620 + 28000000.0 * sc[9] * x670 -
          5280000.0 * x1011 * x347 + 5280000.0 * x1011 * x689 -
          30000000.0 * x102 * x374 + 30000000.0 * x102 * x693 + x1035 * x347 -
          x1035 * x689 + x104 * x2603 - x1041 * x620 + x1041 * x670 -
          x1047 * x347 + x1047 * x689 + x1855 * x713 - x1855 * x715 + x2067 +
          x2443 + x2539 + x2603 * x279 - x2615 * x279 + x2617 + x2636 + x2651 +
          x2658 + x2661 + x2670 + x2688 + x2689 + x2734 + x2787 + x2796 +
          x347 * x695 - x358 * x620 + x358 * x670 - x374 * x676 - x374 * x998 +
          x676 * x693 - x689 * x695 + x693 * x998 +
          (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
           30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
           57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
           30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
            (x713 - x715) +
          (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
           30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
           80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
           20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
           28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
           x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 -
           x118 * x358 - x241 * x695) *
            (-x374 + x693 + (-x240) * (x713 - x715)) +
          (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
           15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
           70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 -
           x1041 * x202 - x1051 * x202 - x202 * x358) *
            (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715))) +
          (-20000000.0 * sc[4] * x70 - x1053 * x70) *
            (-x620 + x670 + (-x118) * (-x374 + x693 + (-x240) * (x713 - x715)) +
             (-x202) * (-x347 + x689 +
                        (x241) * (-x374 + x693 + (-x240) * (x713 - x715))));
  J[80] =
    -68000000.0 * sc[14] - 2200000000.0 * sc[17] * sc[2] * x2508 -
    10560000.0 * sc[17] * sc[2] * x2838 - sc[17] * x2939 -
    30000000.0 * sc[17] * x2941 - sc[17] * x2944 - 50000000.0 * sc[20] * x678 +
    50000000.0 * sc[20] * x703 - sc[23] * x2931 - 100000000.0 * sc[23] -
    90000000.0 * sc[25] - sc[29] * x1984 - 8000000000000000.0 * sc[29] * x2805 -
    360000.0 * sc[2] * sc[6] * exp(-0.6 * tc[0]) -
    224960000.0 * sc[2] * sc[7] * exp(-1.25 * tc[0]) -
    7120000.0 * sc[2] * x2855 * x818 + 30000000.0 * sc[2] * x678 -
    30000000.0 * sc[2] * x703 + 110000000.0 * sc[2] * x712 -
    110000000.0 * sc[2] * x716 - sc[30] * x2907 - 1800000.0 * sc[30] -
    4.8e+16 * sc[31] * x2805 - sc[33] * x2923 - 38000000.0 * sc[34] * x2884 -
    38000000.0 * sc[34] * x2886 - 310000000000.0 * sc[35] * x233 -
    310000000000.0 * sc[35] * x2881 - 16200000.0 * sc[36] * x592 -
    96000000.0 * sc[37] - 9428000.0 * sc[3] * x2824 * x818 -
    28000000.0 * sc[4] * x421 * x423 - sc[7] * x2819 - sc[8] * x2900 -
    sc[8] * x2903 - sc[9] * x2315 * x2324 + 5280000.0 * x1011 * x688 -
    5280000.0 * x1011 * x690 - 30000000.0 * x102 * x712 +
    30000000.0 * x102 * x716 - 3200000000000000.0 * x1026 * x200 * x35 -
    x1034 * x200 - x1035 * x688 + x1035 * x690 - x1041 * x678 + x1041 * x703 +
    x116 + x1855 * x734 - x1855 * x735 + x201 - x2058 - 110000000.0 * x226 -
    x238 + x2539 + x2603 * x54 - x2603 * x619 - x2615 * x54 + x2615 * x619 +
    x2661 + x2787 - x2812 - x2816 - 100000000.0 * x2845 * x2846 -
    100100.0 * x2869 + x2898 + x2920 - x2928 + x2961 - x2965 + x2978 + x2984 +
    x3016 + x3029 - x3032 + x3042 + x3059 + x3073 + x3081 + x3100 - x3104 -
    x358 * x678 + x358 * x703 - 30000000.0 * x6 +
    33600000.0 * x602 * exp(x1907) - x688 * x695 + x690 * x695 - x712 * x998 +
    x716 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x734 - x735) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x712 + x716 + (-x240) * (x734 - x735)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x678 + x703 + (-x118) * (-x712 + x716 + (-x240) * (x734 - x735)) +
       (-x202) *
         (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735))));
  J[119] =
    30000000.0 * sc[10] * x721 - 30000000.0 * sc[10] * x725 +
    50000000.0 * sc[10] * x747 - 50000000.0 * sc[10] * x748 +
    30000000.0 * sc[12] + 16.32 * sc[18] * x3161 + 48000000.0 * sc[19] -
    50000000.0 * sc[20] * x717 + 50000000.0 * sc[20] * x719 +
    30000000.0 * sc[20] * x721 - 30000000.0 * sc[20] * x725 +
    100000000.0 * sc[23] + sc[29] * x3175 - 9428000.0 * sc[2] * x2824 * x818 +
    30000000.0 * sc[2] * x717 - 30000000.0 * sc[2] * x719 -
    110000000.0 * sc[2] * x721 + 110000000.0 * sc[2] * x725 + sc[4] * x3130 +
    sc[6] * x3205 - 70000000.0 * sc[6] * x717 + 70000000.0 * sc[6] * x719 +
    sc[7] * x473 + 16000000.0 * sc[7] * x719 * x77 - 28000000.0 * sc[9] * x717 +
    28000000.0 * sc[9] * x719 + 5280000.0 * x1011 * x125 -
    5280000.0 * x1011 * x710 + 30000000.0 * x102 * x721 -
    30000000.0 * x102 * x725 - x1035 * x125 + x1035 * x710 - x1041 * x717 +
    x1047 * x125 - x1047 * x710 + x1052 * x125 - x1052 * x710 - x125 * x695 +
    x1855 * x747 - x1855 * x748 + x2067 - x219 * x2603 + x219 * x2615 + x2443 +
    x2539 + x2603 * x596 - x2615 * x596 + x2661 + x2687 + x2734 + x2787 +
    x2796 + x3180 + x3186 + x3196 + x3204 + x3215 - x358 * x717 + x358 * x719 +
    x676 * x721 - x676 * x725 + x695 * x710 + x721 * x998 - x725 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x747 - x748) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (x721 - x725 + (-x240) * (x747 - x748)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x717 + x719 + (-x118) * (x721 - x725 + (-x240) * (x747 - x748)) +
       (-x202) *
         (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748))));
  J[158] =
    sc[10] * x3279 - 30000000.0 * sc[10] * x736 + 30000000.0 * sc[10] * x743 +
    50000000.0 * sc[10] * x768 - 50000000.0 * sc[10] * x770 + sc[14] * x3225 +
    sc[16] * x3271 + sc[16] * x3273 + sc[20] * x3223 -
    50000000.0 * sc[20] * x730 - 30000000.0 * sc[20] * x736 +
    50000000.0 * sc[20] * x737 + 30000000.0 * sc[20] * x743 +
    30000000.0 * sc[2] * x730 + 110000000.0 * sc[2] * x736 -
    30000000.0 * sc[2] * x737 - 110000000.0 * sc[2] * x743 + sc[32] * x3248 +
    sc[3] * x3130 - 70000000.0 * sc[6] * x730 + 70000000.0 * sc[6] * x737 +
    sc[7] * x3227 - 5280000.0 * x1011 * x171 + 5280000.0 * x1011 * x732 -
    30000000.0 * x102 * x736 + 30000000.0 * x102 * x743 + x1035 * x171 -
    x1035 * x732 - x1041 * x730 + x1041 * x737 - x1047 * x171 + x1047 * x732 -
    x1052 * x171 + x1052 * x732 + x1053 * x990 + x157 * x2603 - x157 * x2615 +
    x171 * x695 + x1855 * x768 - x1855 * x770 + x201 +
    9428000.0 * x2504 * x2824 + x2539 - x2603 * x633 + x2615 * x633 + x2661 +
    x2787 + 149700000.0 * x3230 + x3234 + x3293 + x3294 + x3300 + x3311 +
    x3319 - x358 * x730 + x358 * x737 - 28000000.0 * x421 * x424 + x597 -
    132000000.0 * x602 * exp(x1920) + x646 - x695 * x732 - x736 * x998 +
    x743 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x768 - x770) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x736 + x743 + (-x240) * (x768 - x770)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x730 + x737 + (-x118) * (-x736 + x743 + (-x240) * (x768 - x770)) +
       (-x202) *
         (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770))));
  J[197] =
    refC * x2303 * x2315 - 30000000.0 * sc[10] * x746 +
    30000000.0 * sc[10] * x757 + 50000000.0 * sc[10] * x800 -
    50000000.0 * sc[10] * x801 - 30000000.0 * sc[20] * x746 +
    30000000.0 * sc[20] * x757 + 110000000.0 * sc[2] * x746 -
    110000000.0 * sc[2] * x757 - 80000000.0 * sc[3] * x740 +
    80000000.0 * sc[3] * x741 - 30000000.0 * sc[4] * x746 +
    30000000.0 * sc[4] * x757 + sc[6] * x3340 + 70000000.0 * sc[6] * x701 -
    5280000.0 * x1011 * x740 + 5280000.0 * x1011 * x741 -
    30000000.0 * x102 * x746 + 30000000.0 * x102 * x757 + x1035 * x740 -
    x1035 * x741 - x1047 * x740 + x1047 * x741 - x1052 * x740 + x1052 * x741 -
    x181 * x2603 + x181 * x2615 + x1855 * x800 - x1855 * x801 +
    33600000.0 * x1909 + 8300000.0 * x2524 + x2539 + x2734 + x3361 + x3367 +
    x3391 + x3400 + x3403 + x3409 + x3431 + x3433 - x676 * x746 + x676 * x757 +
    x695 * x740 - x695 * x741 - x746 * x998 + x757 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x800 - x801) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x746 + x757 + (-x240) * (x800 - x801)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (x744 + (-x118) * (-x746 + x757 + (-x240) * (x800 - x801)) +
       (-x202) *
         (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801))));
  J[236] =
    1100000000.0 * refC * sc[17] * exp(-2.0 * tc[0] + x1024) +
    360000.0 * refC * sc[6] * exp(-0.6 * tc[0] + x1024) +
    112480000.0 * refC * sc[7] * exp(-1.25 * tc[0] + x1024) +
    3560000.0 * refC * x2855 * exp(-tc[0] + x1024) + sc[10] * x3491 +
    50000000.0 * sc[10] * x842 - 50000000.0 * sc[10] * x844 +
    20000000.0 * sc[13] * x3516 + sc[14] * x3452 + sc[20] * x3455 -
    50000000.0 * sc[20] * x754 + 50000000.0 * sc[20] * x756 +
    30000000.0 * sc[20] * x761 - 30000000.0 * sc[20] * x762 + sc[21] * x3447 +
    50000000.0 * sc[23] * x3539 + 20000000.0 * sc[24] * x3440 + sc[27] * x3501 +
    sc[28] * x3450 + sc[29] * x3442 -
    180000.0 * ((sc[2]) * (sc[2])) * exp(-0.6 * tc[0]) +
    30000000.0 * sc[2] * x754 - 30000000.0 * sc[2] * x756 -
    110000000.0 * sc[2] * x761 + 110000000.0 * sc[2] * x762 + sc[36] * x3473 +
    20000000.0 * sc[4] * x825 + sc[5] * x3340 - 5280000.0 * x1011 * x745 +
    5280000.0 * x1011 * x758 + 30000000.0 * x102 * x761 -
    30000000.0 * x102 * x762 + x1035 * x745 - x1035 * x758 - x1041 * x754 +
    x1041 * x756 - x1047 * x745 + x1047 * x758 + x1855 * x842 - x1855 * x844 +
    30000000.0 * x226 * x3 + x226 * x696 + x2291 + 110000000.0 * x235 * x242 -
    18856000.0 * x2502 + 18856000.0 * x2505 + x3446 + x3457 + x3511 + x3535 +
    x3562 + x3570 - x358 * x754 + x358 * x756 + x3580 + x3590 + x3597 + x3610 +
    x3617 + x3702 + x676 * x761 - x676 * x762 + x695 * x745 - x695 * x758 +
    x761 * x998 - x762 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x842 - x844) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (x761 - x762 + (-x240) * (x842 - x844)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x754 + x756 + (-x118) * (x761 - x762 + (-x240) * (x842 - x844)) +
       (-x202) *
         (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844))));
  J[275] =
    112480000.0 * refC * sc[6] * exp(-1.25 * tc[0] + x1024) + sc[19] * x3729 -
    30000000.0 * sc[20] * x787 + 30000000.0 * sc[20] * x799 -
    112480000.0 * ((sc[2]) * (sc[2])) * exp(-1.25 * tc[0]) - sc[2] * x2819 +
    30000000.0 * sc[2] * x765 - 30000000.0 * sc[2] * x773 +
    110000000.0 * sc[2] * x787 - 110000000.0 * sc[2] * x799 + sc[3] * x473 -
    792000000.0 * sc[4] * x1922 - 792000000.0 * sc[4] * x1925 + sc[4] * x3227 -
    5280000.0 * x1011 * x759 + 5280000.0 * x1011 * x766 -
    30000000.0 * x102 * x787 + 30000000.0 * x102 * x799 + x1035 * x759 -
    x1035 * x766 + 2.4576e+21 * x174 + x1855 * x864 - x1855 * x875 +
    1.92e+16 * x1863 - x1874 * (1.68 * x1869 + 12.0 * x2736) +
    x1903 * (1.68 * x1869 + 12.0 * x2736) + 201600000.0 * x1909 +
    201600000.0 * x1913 - 1.92e+16 * x203 - 113136000.0 * x2502 +
    113136000.0 * x2505 - x358 * x765 + x358 * x773 - 2.4576e+21 * x372 +
    x3754 + x3765 + x3774 + x3785 + x3794 + x3807 + x3808 + x3820 + x3832 +
    x3846 + x3854 + x3872 + x3884 + x3896 + x3900 + x695 * x759 - x695 * x766 -
    x787 * x998 + x799 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x864 - x875) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x787 + x799 + (-x240) * (x864 - x875)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x765 + x773 + (-x118) * (-x787 + x799 + (-x240) * (x864 - x875)) +
       (-x202) *
         (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875))));
  J[314] =
    -sc[2] * x2900 - sc[2] * x2903 + x3982 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x888 - x889) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[353] =
    -30000000.0 * sc[10] * x841 + 30000000.0 * sc[10] * x849 +
    50000000.0 * sc[10] * x905 - 50000000.0 * sc[10] * x906 -
    50000000.0 * sc[20] * x779 + 50000000.0 * sc[20] * x792 -
    30000000.0 * sc[20] * x841 + 30000000.0 * sc[20] * x849 +
    30000000.0 * sc[2] * x779 - 30000000.0 * sc[2] * x792 +
    110000000.0 * sc[2] * x841 - 110000000.0 * sc[2] * x849 -
    80000000.0 * sc[3] * x838 + 80000000.0 * sc[3] * x840 -
    30000000.0 * sc[4] * x841 + 30000000.0 * sc[4] * x849 +
    20000000.0 * sc[4] * x867 - 70000000.0 * sc[6] * x779 +
    70000000.0 * sc[6] * x792 - 28000000.0 * sc[9] * x779 +
    28000000.0 * sc[9] * x792 - 5280000.0 * x1011 * x838 +
    5280000.0 * x1011 * x840 - 30000000.0 * x102 * x841 +
    30000000.0 * x102 * x849 + x1035 * x838 - x1035 * x840 - x1041 * x779 +
    x1041 * x792 - x1047 * x838 + x1047 * x840 - x1052 * x838 + x1052 * x840 +
    x1053 * x867 + 4.096e+20 * x174 + x1855 * x905 - x1855 * x906 +
    3200000000000000.0 * x1863 + x201 - 3200000000000000.0 * x203 + x2539 +
    x2603 * x641 - x2603 * x642 - x2615 * x641 + x2615 * x642 + x2661 - x2738 +
    x2757 + x2763 + x2771 + x2784 + x2785 - x358 * x779 + x358 * x792 -
    4.096e+20 * x372 + x3983 + 5280000.0 * x3986 + x4024 + x4040 + x4047 +
    x4055 + x4071 + x489 + 28000000.0 * x6 - x676 * x841 + x676 * x849 +
    x695 * x838 - x695 * x840 - x841 * x998 + x849 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x905 - x906) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x841 + x849 + (-x240) * (x905 - x906)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x779 + x792 + (-x118) * (-x841 + x849 + (-x240) * (x905 - x906)) +
       (-x202) *
         (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906))));
  J[392] =
    -50000000.0 * sc[10] * x244 + 30000000.0 * sc[10] * x855 -
    30000000.0 * sc[10] * x865 + 50000000.0 * sc[10] * x920 + sc[12] * x4074 +
    sc[18] * x4105 + sc[19] * x4123 + sc[20] * x4083 -
    50000000.0 * sc[20] * x796 + 50000000.0 * sc[20] * x814 +
    30000000.0 * sc[20] * x855 - 30000000.0 * sc[20] * x865 + sc[21] * x4077 +
    sc[29] * x4079 + 30000000.0 * sc[2] * x796 - 30000000.0 * sc[2] * x814 -
    110000000.0 * sc[2] * x855 + 110000000.0 * sc[2] * x865 +
    80000000.0 * sc[3] * x195 - 80000000.0 * sc[3] * x862 + sc[4] * x3279 +
    30000000.0 * sc[4] * x855 - 30000000.0 * sc[4] * x865 + sc[6] * x3491 +
    16000000.0 * sc[7] * x77 * x814 - 28000000.0 * sc[9] * x796 +
    28000000.0 * sc[9] * x814 + 5280000.0 * x1011 * x195 -
    5280000.0 * x1011 * x862 + 30000000.0 * x102 * x855 -
    30000000.0 * x102 * x865 - x1035 * x195 + x1035 * x862 + x104 * x2603 -
    x1041 * x796 + x1047 * x195 - x1047 * x862 - x1855 * x244 + x1855 * x920 +
    3200000000000000.0 * x1862 * x503 - x195 * x695 + x2067 +
    30000000.0 * x226 + x231 * x2603 - x231 * x2615 + 50000000.0 * x242 +
    x2443 + x2539 + x2617 + x2661 + x2687 + x2689 + x2734 + x2787 + x2796 -
    x358 * x796 + x358 * x814 + 9980000.0 * x4085 + x4121 + x4135 + x4151 +
    x4161 + x4168 + x4176 + x695 * x862 + x855 * x998 - x865 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (-x244 + x920) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (x855 - x865 + (-x240) * (-x244 + x920)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x796 + x814 + (-x118) * (x855 - x865 + (-x240) * (-x244 + x920)) +
       (-x202) *
         (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920))));
  J[431] =
    -30000000.0 * sc[10] * x786 + 30000000.0 * sc[10] * x897 +
    50000000.0 * sc[10] * x937 - 50000000.0 * sc[10] * x938 -
    30000000.0 * sc[20] * x786 - 50000000.0 * sc[20] * x827 +
    50000000.0 * sc[20] * x834 + 30000000.0 * sc[20] * x897 +
    110000000.0 * sc[2] * x786 + 30000000.0 * sc[2] * x827 -
    30000000.0 * sc[2] * x834 - 110000000.0 * sc[2] * x897 +
    20000000.0 * sc[4] * x1000 - 28000000.0 * sc[9] * x827 +
    28000000.0 * sc[9] * x834 + x1000 * x1053 - 5280000.0 * x1011 * x341 +
    5280000.0 * x1011 * x882 - 30000000.0 * x102 * x786 +
    30000000.0 * x102 * x897 + x1035 * x341 - x1035 * x882 - x1041 * x827 +
    x1041 * x834 - x1047 * x341 + x1047 * x882 + x1855 * x937 - x1855 * x938 +
    x2291 + x2539 + x2661 + x2784 + x2785 + x341 * x695 + x3511 + x3535 -
    x358 * x827 + x358 * x834 + x3702 - x4179 + x4214 + x4219 + x4230 + x4238 +
    x4244 + x4249 - x676 * x786 + x676 * x897 - x695 * x882 - x786 * x998 +
    x897 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x937 - x938) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x786 + x897 + (-x240) * (x937 - x938)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x827 + x834 + (-x118) * (-x786 + x897 + (-x240) * (x937 - x938)) +
       (-x202) *
         (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938))));
  J[470] =
    sc[10] * x4074 + 40000000.0 * sc[10] * x883 + 30000000.0 * sc[10] * x900 +
    50000000.0 * sc[10] * x948 + 60000000.0 * sc[11] * x900 +
    50000000.0 * sc[20] * x851 + 30000000.0 * sc[20] * x900 -
    30000000.0 * sc[2] * x851 - 110000000.0 * sc[2] * x900 +
    30000000.0 * sc[3] + 20000000.0 * sc[4] * x147 + 30000000.0 * sc[4] * x851 +
    20000000.0 * sc[4] * x883 + sc[6] * x3572 + 70000000.0 * sc[6] * x851 +
    28000000.0 * sc[9] * x851 + 5280000.0 * x1011 * x883 +
    30000000.0 * x102 * x900 - x1035 * x883 + x1041 * x851 + x1047 * x883 +
    x1051 * x851 + x1052 * x883 + x1053 * x147 + x1855 * x948 + x2603 * x649 -
    x2615 * x649 + x2617 + x358 * x851 + x3921 + x3945 + x4294 + x4295 + x4302 +
    x4310 + x4314 + x676 * x900 - x695 * x883 + x900 * x991 + x900 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (-x889 + x948) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x806 + x900 + (-x240) * (-x889 + x948)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x738 + x851 + (-x118) * (-x806 + x900 + (-x240) * (-x889 + x948)) +
       (-x202) *
         (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948))));
  J[509] =
    -30000000.0 * sc[10] * x904 + 30000000.0 * sc[10] * x908 +
    50000000.0 * sc[10] * x961 - 50000000.0 * sc[10] * x962 +
    50000000.0 * sc[20] * x861 - 30000000.0 * sc[20] * x904 +
    30000000.0 * sc[20] * x908 - 30000000.0 * sc[2] * x861 +
    110000000.0 * sc[2] * x904 - 110000000.0 * sc[2] * x908 +
    20000000.0 * sc[6] * x3516 + 70000000.0 * sc[6] * x861 +
    28000000.0 * sc[9] * x861 - 5280000.0 * x1011 * x886 +
    5280000.0 * x1011 * x895 - 30000000.0 * x102 * x904 +
    30000000.0 * x102 * x908 + x1035 * x886 - x1035 * x895 + x1041 * x861 -
    x1047 * x886 + x1047 * x895 - x1052 * x886 + x1052 * x895 + x1855 * x961 -
    x1855 * x962 + 94600000.0 * x226 * exp(259.15658288943098 * invT) + x2734 +
    x3366 + x3389 + x3398 + x3418 + x3423 + x3425 + x3433 + x358 * x861 +
    x3924 + x4353 + x4362 + x4368 + x4381 - x676 * x904 + x676 * x908 +
    x695 * x886 - x695 * x895 - x904 * x998 + x908 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x961 - x962) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x904 + x908 + (-x240) * (x961 - x962)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x738 + x861 + (-x118) * (-x904 + x908 + (-x240) * (x961 - x962)) +
       (-x202) *
         (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962))));
  J[548] =
    40000000.0 * sc[10] * x896 + 30000000.0 * sc[10] * x915 +
    50000000.0 * sc[10] * x967 + 60000000.0 * sc[11] * x915 +
    50000000.0 * sc[20] * x870 + 30000000.0 * sc[20] * x915 -
    8.6e+16 * sc[2] * x2027 * x2037 + 30000000.0 * sc[2] * x738 -
    30000000.0 * sc[2] * x870 - 110000000.0 * sc[2] * x915 -
    68000000.0 * sc[2] + 15000000.0 * sc[3] * x870 + 80000000.0 * sc[3] * x896 +
    sc[4] * x3225 + 30000000.0 * sc[4] * x870 + 20000000.0 * sc[4] * x896 +
    30000000.0 * sc[4] * x915 + sc[6] * x3452 + 70000000.0 * sc[6] * x870 +
    28000000.0 * sc[9] * x870 + 5280000.0 * x1011 * x896 +
    30000000.0 * x102 * x915 - x1035 * x896 + x1041 * x870 + x1047 * x896 +
    x1051 * x870 + x1052 * x896 + x1855 * x967 + x2401 + x2603 * x650 -
    x2603 * x668 - x2615 * x650 + x2615 * x668 + x2661 + x2787 + x3366 + x3389 +
    x3398 + x3418 + x3423 + x3425 + x3427 + x358 * x870 + x3919 + x3930 +
    x3934 + x3945 + x3949 + x3954 + x3960 + x3965 + x3970 + x3977 + x4432 +
    x676 * x915 - x695 * x896 + x915 * x991 + x915 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (-x889 + x967) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x806 + x915 + (-x240) * (-x889 + x967)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x738 + x870 + (-x118) * (-x806 + x915 + (-x240) * (-x889 + x967)) +
       (-x202) *
         (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967))));
  J[587] =
    30000000.0 * sc[10] * x709 + 40000000.0 * sc[10] * x903 +
    50000000.0 * sc[10] * x971 + 60000000.0 * sc[11] * x709 +
    30000000.0 * sc[20] * x709 + 50000000.0 * sc[20] * x892 -
    110000000.0 * sc[2] * x709 - 30000000.0 * sc[2] * x892 +
    57000000.0 * sc[3] * x709 + 15000000.0 * sc[3] * x892 +
    80000000.0 * sc[3] * x903 + 30000000.0 * sc[4] * x709 +
    30000000.0 * sc[4] * x892 + 20000000.0 * sc[4] * x903 +
    50000000.0 * sc[4] * x971 + 70000000.0 * sc[6] * x892 +
    28000000.0 * sc[9] * x892 + 5280000.0 * x1011 * x903 +
    30000000.0 * x102 * x709 - x1035 * x903 + x1041 * x892 + x1047 * x903 +
    x1051 * x892 + x1052 * x903 + x1855 * x971 + x2055 + x3366 + x3389 + x3398 +
    x3418 + x3423 + x3425 + x358 * x892 + x3908 + x3919 + x3924 + x3930 +
    x3934 + x3945 + x3949 + x3954 + x3960 + x3965 + x3970 + x3977 - x4438 +
    x676 * x709 - x695 * x903 + x709 * x991 + x709 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (-x889 + x971) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (x709 - x806 + (-x240) * (-x889 + x971)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x738 + x892 + (-x118) * (x709 - x806 + (-x240) * (-x889 + x971)) +
       (-x202) *
         (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971))));
  J[626] =
    -30000000.0 * sc[20] * x926 + 30000000.0 * sc[20] * x931 +
    30000000.0 * sc[2] * x894 - 30000000.0 * sc[2] * x902 +
    110000000.0 * sc[2] * x926 - 110000000.0 * sc[2] * x931 -
    15000000.0 * sc[3] * x894 + 15000000.0 * sc[3] * x902 + sc[4] * x3271 +
    sc[4] * x3273 - 28000000.0 * sc[4] * x421 * x994 -
    28000000.0 * sc[9] * x894 + 28000000.0 * sc[9] * x902 -
    5280000.0 * x1011 * x912 + 5280000.0 * x1011 * x913 -
    30000000.0 * x102 * x926 + 30000000.0 * x102 * x931 + x1035 * x912 -
    x1035 * x913 + 6.144e+20 * x174 + x1855 * x572 - x1855 * x659 +
    4800000000000000.0 * x1863 - x1874 * (0.42 * x1869 + 3.0 * x2736) +
    x1903 * (0.42 * x1869 + 3.0 * x2736) - 4800000000000000.0 * x203 -
    16499000.0 * x2502 + 16499000.0 * x2505 - 77000000000.0 * x2510 +
    77000000000.0 * x2513 + x2603 * x674 - x2603 * x686 - x2615 * x674 +
    x2615 * x686 + x2785 - 200000000.0 * x2845 * x424 - x358 * x894 +
    x358 * x902 - 6.144e+20 * x372 + x4525 + x4535 + x4543 + x4552 + x4565 +
    x4575 + x4597 + x4609 + x4623 + x4632 + x4647 + x4665 + x4679 +
    100000000.0 * x6 * x81 + x695 * x912 - x695 * x913 - x926 * x998 +
    x931 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x572 - x659) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x926 + x931 + (-x240) * (x572 - x659)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x894 + x902 + (-x118) * (-x926 + x931 + (-x240) * (x572 - x659)) +
       (-x202) *
         (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659))));
  J[665] =
    1100000000.0 * refC * sc[6] * exp(-2.0 * tc[0] + x1024) -
    50000000.0 * sc[10] * x832 + 50000000.0 * sc[10] * x837 -
    30000000.0 * sc[10] * x936 + 30000000.0 * sc[10] * x947 -
    30000000.0 * sc[20] * x936 + 30000000.0 * sc[20] * x947 -
    1100000000.0 * ((sc[2]) * (sc[2])) * x2508 -
    5280000.0 * ((sc[2]) * (sc[2])) * x2838 - 30000000.0 * sc[2] * x135 -
    sc[2] * x2939 - 30000000.0 * sc[2] * x2941 - sc[2] * x2944 +
    30000000.0 * sc[2] * x910 + 110000000.0 * sc[2] * x936 -
    110000000.0 * sc[2] * x947 + 15000000.0 * sc[3] * x135 -
    15000000.0 * sc[3] * x910 + 20000000.0 * sc[4] * x821 +
    28000000.0 * sc[9] * x135 - 28000000.0 * sc[9] * x910 -
    5280000.0 * x1011 * x510 + 5280000.0 * x1011 * x928 -
    30000000.0 * x102 * x936 + 30000000.0 * x102 * x947 + x1035 * x510 -
    x1035 * x928 + x1041 * x135 - x1041 * x910 + x1053 * x821 + x135 * x358 -
    x1855 * x832 + x1855 * x837 - 33940800.0 * x2502 + 33940800.0 * x2505 -
    158400000000.0 * x2510 + 158400000000.0 * x2513 + x2603 * x297 -
    x2603 * x320 - x2615 * x297 + x2615 * x320 + x3511 + x3535 + x3561 -
    x358 * x910 + x3639 + x3647 + x3701 + x4708 + x4743 + x4750 + x4757 +
    x4772 + x4777 + x510 * x695 - x676 * x936 + x676 * x947 - x695 * x928 -
    x936 * x998 + x947 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (-x832 + x837) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x936 + x947 + (-x240) * (-x832 + x837)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (x135 - x910 + (-x118) * (-x936 + x947 + (-x240) * (-x832 + x837)) +
       (-x202) *
         (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837))));
  J[704] =
    sc[10] * x4105 - 30000000.0 * sc[10] * x949 + 30000000.0 * sc[10] * x956 -
    50000000.0 * sc[20] * x911 + 50000000.0 * sc[20] * x917 -
    30000000.0 * sc[20] * x949 + 30000000.0 * sc[20] * x956 +
    30000000.0 * sc[2] * x911 - 30000000.0 * sc[2] * x917 +
    110000000.0 * sc[2] * x949 - 110000000.0 * sc[2] * x956 +
    16.32 * sc[3] * x3161 + 80000000.0 * sc[3] * x878 -
    80000000.0 * sc[3] * x929 - 57000000.0 * sc[3] * x949 +
    57000000.0 * sc[3] * x956 + 50000000.0 * sc[4] * x1037 -
    50000000.0 * sc[4] * x1038 + sc[4] * x3286 + 20000000.0 * sc[4] * x384 -
    30000000.0 * sc[4] * x949 + 30000000.0 * sc[4] * x956 + sc[6] * x3563 -
    28000000.0 * sc[9] * x911 + 28000000.0 * sc[9] * x917 +
    5280000.0 * x1011 * x878 - 5280000.0 * x1011 * x929 -
    30000000.0 * x102 * x949 + 30000000.0 * x102 * x956 - x1035 * x878 +
    x1035 * x929 + x1037 * x1855 - x1038 * x1855 - x1041 * x911 + x1041 * x917 +
    x1047 * x878 - x1047 * x929 + x1053 * x384 - x358 * x911 + x358 * x917 +
    x4812 + x4824 + x4831 + x4862 + x4882 + x532 - x676 * x949 + x676 * x956 -
    x695 * x878 + x695 * x929 - x949 * x998 + x956 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x1037 - x1038) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x911 + x917 + (-x118) * (-x949 + x956 + (-x240) * (x1037 - x1038)) +
       (-x202) *
         (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038))));
  J[743] =
    50000000.0 * sc[10] * x1044 + 40000000.0 * sc[10] * x189 + sc[10] * x4123 +
    60000000.0 * sc[11] * x563 + 30000000.0 * sc[20] * x563 +
    50000000.0 * sc[20] * x922 - 110000000.0 * sc[2] * x563 -
    30000000.0 * sc[2] * x922 + 80000000.0 * sc[3] * x189 +
    57000000.0 * sc[3] * x563 + 15000000.0 * sc[3] * x922 + 48000000.0 * sc[3] +
    50000000.0 * sc[4] * x1044 + 20000000.0 * sc[4] * x189 +
    30000000.0 * sc[4] * x563 + 20000000.0 * sc[4] * x824 +
    30000000.0 * sc[4] * x922 + sc[6] * x2 + 70000000.0 * sc[6] * x922 +
    sc[7] * x3729 + 28000000.0 * sc[9] * x922 + 5280000.0 * x1011 * x189 +
    30000000.0 * x102 * x563 - x1035 * x189 + x1041 * x922 + x1044 * x1855 +
    x1047 * x189 + x1051 * x922 + x1052 * x189 - x189 * x695 + x2087 * x2116 +
    x3425 + x358 * x922 + x3908 + x3924 + x3945 + x4310 + x4314 + x4924 +
    x563 * x676 + x563 * x991 + x563 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x1044 - x889) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (x563 - x806 + (-x240) * (x1044 - x889)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x738 + x922 + (-x118) * (x563 - x806 + (-x240) * (x1044 - x889)) +
       (-x202) *
         (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889))));
  J[782] =
    50000000.0 * sc[10] * x1059 - 50000000.0 * sc[10] * x1060 + sc[10] * x4083 -
    30000000.0 * sc[20] * x966 + 30000000.0 * sc[20] * x970 + sc[21] * x4934 +
    30000000.0 * sc[2] * x925 - 30000000.0 * sc[2] * x934 +
    110000000.0 * sc[2] * x966 - 110000000.0 * sc[2] * x970 -
    80000000.0 * sc[3] * x705 + 80000000.0 * sc[3] * x935 -
    57000000.0 * sc[3] * x966 + 57000000.0 * sc[3] * x970 +
    50000000.0 * sc[4] * x1059 - 50000000.0 * sc[4] * x1060 + sc[4] * x3223 +
    20000000.0 * sc[4] * x42 - 30000000.0 * sc[4] * x966 +
    30000000.0 * sc[4] * x970 + sc[6] * x3455 - 28000000.0 * sc[9] * x925 +
    28000000.0 * sc[9] * x934 - 5280000.0 * x1011 * x705 +
    5280000.0 * x1011 * x935 - 30000000.0 * x102 * x966 +
    30000000.0 * x102 * x970 + x1035 * x705 - x1035 * x935 - x1041 * x925 +
    x1041 * x934 + x1059 * x1855 - x1060 * x1855 + 30000000.0 * x226 -
    x358 * x925 + x358 * x934 + x4850 + x4882 + x4966 + x4974 + x4986 + x4991 +
    x5004 + x5014 - x676 * x966 + x676 * x970 + x695 * x705 - x695 * x935 -
    x966 * x998 + x970 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x1059 - x1060) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x925 + x934 + (-x118) * (-x966 + x970 + (-x240) * (x1059 - x1060)) +
       (-x202) *
         (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060))));
  J[821] =
    50000000.0 * sc[10] * x1064 + sc[10] * x4077 + 30000000.0 * sc[10] * x977 +
    sc[20] * x4934 + 50000000.0 * sc[20] * x941 + 30000000.0 * sc[20] * x977 -
    30000000.0 * sc[2] * x941 - 110000000.0 * sc[2] * x977 +
    80000000.0 * sc[3] * x884 + 15000000.0 * sc[3] * x941 +
    57000000.0 * sc[3] * x977 + 50000000.0 * sc[4] * x1064 +
    20000000.0 * sc[4] * x884 + 30000000.0 * sc[4] * x941 +
    30000000.0 * sc[4] * x977 + sc[6] * x3447 + 70000000.0 * sc[6] * x941 +
    28000000.0 * sc[9] * x941 + 5280000.0 * x1011 * x884 +
    30000000.0 * x102 * x977 - x1035 * x884 + x1041 * x941 + x1047 * x884 +
    x1052 * x884 + x1064 * x1855 + x3425 + x358 * x941 + x3908 + x3924 + x3945 +
    x4310 + x5048 + x5051 + x5058 + x676 * x977 - x695 * x884 + x977 * x991 +
    x977 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x1064 - x889) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x738 + x941 + (-x118) * (-x806 + x977 + (-x240) * (x1064 - x889)) +
       (-x202) *
         (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889))));
  J[860] =
    50000000.0 * sc[10] * x214 - 50000000.0 * sc[10] * x216 +
    30000000.0 * sc[10] * x256 - 30000000.0 * sc[10] * x992 +
    30000000.0 * sc[20] * x256 - 30000000.0 * sc[20] * x992 +
    100800000.0 * sc[2] * x104 * exp(x1907) +
    100800000.0 * sc[2] * x1700 * exp(x1699 + x1907) -
    110000000.0 * sc[2] * x256 + 30000000.0 * sc[2] * x477 -
    30000000.0 * sc[2] * x952 + 110000000.0 * sc[2] * x992 -
    396000000.0 * sc[4] * x1922 - 396000000.0 * sc[4] * x1925 +
    20000000.0 * sc[4] * x58 - 28000000.0 * sc[9] * x477 +
    28000000.0 * sc[9] * x952 + 5280000.0 * x1011 * x365 -
    5280000.0 * x1011 * x944 + 30000000.0 * x102 * x256 -
    30000000.0 * x102 * x992 - x1035 * x365 + x1035 * x944 + x1053 * x58 +
    1.2288e+21 * x174 + x1855 * x214 - x1855 * x216 +
    9600000000000000.0 * x1863 - x1874 * (0.84 * x1869 + 6.0 * x2736) +
    x1903 * (0.84 * x1869 + 6.0 * x2736) - 9600000000000000.0 * x203 + x2291 +
    x2539 + x256 * x676 + x256 * x998 + x2661 + x2784 + x2785 - x358 * x477 +
    x358 * x952 - x365 * x695 - 1.2288e+21 * x372 + x4850 + x4871 + x4881 -
    x5060 + x5105 + x5119 + x5130 + x5135 + x5147 + x5156 + x5175 + x5190 +
    x5198 + x5211 - x676 * x992 + x695 * x944 - x992 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x214 - x216) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (x256 - x992 + (-x240) * (x214 - x216)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x477 + x952 + (-x118) * (x256 - x992 + (-x240) * (x214 - x216)) +
       (-x202) *
         (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216))));
  J[899] =
    30000000.0 * sc[10] * x1014 + 50000000.0 * sc[10] * x285 -
    50000000.0 * sc[10] * x294 - 30000000.0 * sc[10] * x805 +
    30000000.0 * sc[20] * x1014 - 30000000.0 * sc[20] * x805 +
    50000000.0 * sc[20] * x958 - 110000000.0 * sc[2] * x1014 - sc[2] * x2931 +
    30000000.0 * sc[2] * x738 + 110000000.0 * sc[2] * x805 -
    30000000.0 * sc[2] * x958 - 100000000.0 * sc[2] -
    80000000.0 * sc[3] * x350 + 80000000.0 * sc[3] * x355 +
    15000000.0 * sc[3] * x958 + 100000000.0 * sc[3] +
    30000000.0 * sc[4] * x1014 - 30000000.0 * sc[4] * x805 +
    50000000.0 * sc[6] * x3539 + 70000000.0 * sc[6] * x958 +
    28000000.0 * sc[9] * x958 - 5280000.0 * x1011 * x350 +
    5280000.0 * x1011 * x355 + 30000000.0 * x1014 * x102 + x1014 * x676 +
    x1014 * x998 - 30000000.0 * x102 * x805 + x1035 * x350 - x1035 * x355 +
    x1041 * x958 - x1047 * x350 + x1047 * x355 - x1052 * x350 + x1052 * x355 +
    x1855 * x285 - x1855 * x294 + 33600000.0 * x1909 + 8300000.0 * x2524 +
    x2539 - x2603 * x782 + x2615 * x782 + x2661 + x2734 + x2787 + x3361 +
    x3366 + x3389 + x3398 + x3418 + x3423 + x3425 + x3427 + x3433 +
    x350 * x695 - x355 * x695 + x358 * x958 + x5263 + x5269 + x5275 -
    x676 * x805 - x805 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x285 - x294) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (x1014 - x805 + (-x240) * (x285 - x294)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x738 + x958 + (-x118) * (x1014 - x805 + (-x240) * (x285 - x294)) +
       (-x202) *
         (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294))));
  J[938] =
    50000000.0 * sc[10] * x306 + 40000000.0 * sc[10] * x363 +
    30000000.0 * sc[10] * x831 + 60000000.0 * sc[11] * x831 +
    30000000.0 * sc[20] * x831 + 50000000.0 * sc[20] * x959 -
    110000000.0 * sc[2] * x831 - 30000000.0 * sc[2] * x959 +
    80000000.0 * sc[3] * x363 + 57000000.0 * sc[3] * x831 +
    15000000.0 * sc[3] * x959 + 50000000.0 * sc[4] * x306 +
    20000000.0 * sc[4] * x363 + 30000000.0 * sc[4] * x831 +
    30000000.0 * sc[4] * x959 + 20000000.0 * sc[6] * x3440 +
    70000000.0 * sc[6] * x959 + 28000000.0 * sc[9] * x959 +
    5280000.0 * x1011 * x363 + 30000000.0 * x102 * x831 - x1035 * x363 +
    x1041 * x959 + x1047 * x363 + x1051 * x959 + x1052 * x363 + x1053 * x617 +
    x1855 * x306 + x3366 + x3389 + x3398 + x3418 + x3423 + x3425 + x358 * x959 -
    x363 * x695 + x3908 + x3924 + x3930 + x3934 + x3945 + x3960 + x3970 +
    x3977 + x4314 + x5324 + x831 * x991 + x831 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x306 - x889) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x806 + x831 + (-x240) * (x306 - x889)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x738 + x959 + (-x118) * (-x806 + x831 + (-x240) * (x306 - x889)) +
       (-x202) *
         (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889))));
  J[977] =
    -20000000.0 * sc[2] * x3102 - 90000000.0 * sc[2] + x3982 + x5331 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x888 - x889) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1016] =
    x3982 - 100100.0 * x5335 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x888 - x889) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1055] =
    30000000.0 * sc[10] * x1028 + 50000000.0 * sc[10] * x309 +
    60000000.0 * sc[11] * x1028 - 110000000.0 * sc[2] * x1028 +
    57000000.0 * sc[3] * x1028 + 30000000.0 * sc[4] * x1028 +
    50000000.0 * sc[4] * x309 + sc[6] * x3501 + 30000000.0 * x102 * x1028 +
    x1028 * x676 + x1028 * x991 + x1028 * x998 + x1855 * x309 + x3908 + x3924 +
    x3937 + x3961 + x3971 + x3978 + x5058 + x5351 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x309 - x889) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (x1028 - x806 + (-x240) * (x309 - x889)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (x744 + (-x118) * (x1028 - x806 + (-x240) * (x309 - x889)) +
       (-x202) * (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889))));
  J[1094] =
    50000000.0 * sc[10] * x326 + 40000000.0 * sc[10] * x366 +
    30000000.0 * sc[10] * x691 + 60000000.0 * sc[11] * x691 +
    30000000.0 * sc[20] * x691 + 50000000.0 * sc[20] * x963 -
    110000000.0 * sc[2] * x691 - 30000000.0 * sc[2] * x963 +
    80000000.0 * sc[3] * x366 + 57000000.0 * sc[3] * x691 +
    15000000.0 * sc[3] * x963 + 50000000.0 * sc[4] * x326 +
    20000000.0 * sc[4] * x366 + 30000000.0 * sc[4] * x691 +
    30000000.0 * sc[4] * x963 + sc[6] * x3450 + 70000000.0 * sc[6] * x963 +
    28000000.0 * sc[9] * x963 + 5280000.0 * x1011 * x366 +
    30000000.0 * x102 * x691 - x1035 * x366 + x1041 * x963 + x1051 * x963 +
    x1052 * x366 + x1855 * x326 + x3425 + x358 * x963 - x366 * x695 + x3908 +
    x3924 + x3945 + x4310 + x5058 + x5375 + x5391 + x676 * x691 + x691 * x991 +
    x691 * x998 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x326 - x889) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (x691 - x806 + (-x240) * (x326 - x889)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x738 + x963 + (-x118) * (x691 - x806 + (-x240) * (x326 - x889)) +
       (-x202) *
         (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889))));
  J[1133] =
    sc[10] * x4079 - sc[2] * x1984 - 8000000000000000.0 * sc[2] * x2805 +
    sc[3] * x3175 + sc[6] * x3442 + x1934 + x3982 - x5405 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x888 - x889) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1172] =
    -sc[2] * x2907 - 1800000.0 * sc[2] + x2011 + x3982 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x888 - x889) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1211] =
    -4.8e+16 * sc[2] * x2805 + x3982 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x888 - x889) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1250] =
    30000000.0 * sc[10] * x1043 + 50000000.0 * sc[10] * x176 +
    60000000.0 * sc[11] * x1043 + 30000000.0 * sc[20] * x1043 -
    110000000.0 * sc[2] * x1043 + 57000000.0 * sc[3] * x1043 +
    30000000.0 * sc[4] * x1043 + 50000000.0 * sc[4] * x176 + sc[4] * x3248 +
    30000000.0 * x102 * x1043 + x1043 * x676 + x1043 * x991 + x1043 * x998 +
    x176 * x1855 + x2539 + x2603 * x809 - x2603 * x99 - x2615 * x809 +
    x2615 * x99 + x2668 * x809 - x2668 * x99 + x3431 + x3906 + x3936 + x3945 +
    x3961 + x3971 + x3978 + x5058 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x176 - x889) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (x1043 - x806 + (-x240) * (x176 - x889)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (x744 + (-x118) * (x1043 - x806 + (-x240) * (x176 - x889)) +
       (-x202) * (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889))));
  J[1289] =
    -sc[2] * x2923 + x2603 * x881 - x2615 * x881 + x2617 + x2668 * x881 +
    x3911 + x3919 + x3921 + x3937 + x3980 + x4295 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x888 - x889) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1328] =
    30000000.0 * sc[10] * x1045 + 50000000.0 * sc[10] * x152 +
    40000000.0 * sc[10] * x367 + 60000000.0 * sc[11] * x1045 +
    30000000.0 * sc[20] * x1045 + 50000000.0 * sc[20] * x968 -
    110000000.0 * sc[2] * x1045 - 38000000.0 * sc[2] * x2884 -
    38000000.0 * sc[2] * x2886 + 30000000.0 * sc[2] * x738 -
    30000000.0 * sc[2] * x968 + 57000000.0 * sc[3] * x1045 +
    80000000.0 * sc[3] * x367 + 15000000.0 * sc[3] * x968 +
    30000000.0 * sc[4] * x1045 + 50000000.0 * sc[4] * x152 +
    20000000.0 * sc[4] * x367 + 30000000.0 * sc[4] * x968 +
    70000000.0 * sc[6] * x968 + 28000000.0 * sc[9] * x968 +
    5280000.0 * x1011 * x367 + 30000000.0 * x102 * x1045 - x1035 * x367 +
    x104 * x2603 + x1041 * x968 + x1045 * x676 + x1045 * x991 + x1045 * x998 +
    x1047 * x367 + x1051 * x968 + x1052 * x367 + x152 * x1855 + x2603 * x469 -
    x2615 * x469 + x2617 + x2661 + x2668 * x469 + x2787 + x3425 + x3427 +
    x358 * x968 - x367 * x695 + x3945 + x4295 + x4310 + x5058 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x152 - x889) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (x1045 - x806 + (-x240) * (x152 - x889)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x738 + x968 + (-x118) * (x1045 - x806 + (-x240) * (x152 - x889)) +
       (-x202) *
         (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889))));
  J[1367] =
    30000000.0 * sc[10] * x232 + 50000000.0 * sc[10] * x353 +
    40000000.0 * sc[10] * x543 + 60000000.0 * sc[11] * x232 +
    30000000.0 * sc[20] * x232 + 50000000.0 * sc[20] * x983 -
    110000000.0 * sc[2] * x232 - 310000000000.0 * sc[2] * x233 -
    310000000000.0 * sc[2] * x2881 - 30000000.0 * sc[2] * x983 +
    57000000.0 * sc[3] * x232 + 80000000.0 * sc[3] * x543 +
    15000000.0 * sc[3] * x983 + 30000000.0 * sc[4] * x232 +
    50000000.0 * sc[4] * x353 + 20000000.0 * sc[4] * x543 +
    30000000.0 * sc[4] * x983 + 70000000.0 * sc[6] * x983 +
    28000000.0 * sc[9] * x983 + 5280000.0 * x1011 * x543 +
    30000000.0 * x102 * x232 - x1035 * x543 + x1041 * x983 + x1047 * x543 +
    x1051 * x983 + x1052 * x543 + x1855 * x353 + x232 * x676 + x232 * x991 +
    x232 * x998 + x2603 * x465 - x2615 * x465 + x2617 + x2668 * x465 + x3366 +
    x3389 + x3398 + x3418 + x3423 + x3425 + x358 * x983 + x3921 + x3930 +
    x3934 + x3945 + x3960 + x3970 + x3977 + x4295 + x5058 - x543 * x695 -
    x5510 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x353 - x889) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (x232 - x806 + (-x240) * (x353 - x889)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (-x738 + x983 + (-x118) * (x232 - x806 + (-x240) * (x353 - x889)) +
       (-x202) *
         (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889))));
  J[1406] =
    30000000.0 * sc[10] * x291 + 50000000.0 * sc[10] * x357 +
    60000000.0 * sc[11] * x291 + 30000000.0 * sc[20] * x291 -
    110000000.0 * sc[2] * x291 - 16200000.0 * sc[2] * x592 +
    30000000.0 * sc[4] * x291 + sc[6] * x3473 + 30000000.0 * x102 * x291 +
    x1855 * x357 + x2539 + x2603 * x537 - x2603 * x540 - x2615 * x537 +
    x2615 * x540 + x291 * x676 + x291 * x991 + x291 * x998 + x3431 + x3906 +
    x3936 + x3945 + x3961 + x3971 + x3978 + x5058 + x5560 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x357 - x889) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (x291 - x806 + (-x240) * (x357 - x889)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (x744 + (-x118) * (x291 - x806 + (-x240) * (x357 - x889)) +
       (-x202) * (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889))));
  J[1445] =
    -96000000.0 * sc[2] + 33600000.0 * x1909 + 8300000.0 * x2524 + x2539 -
    x2603 * x957 + x2615 * x957 - x2668 * x957 + x3361 + x3431 + x3906 + x3911 +
    x3919 + x3936 + x3980 +
    (-30000000.0 * sc[10] * x240 - 60000000.0 * sc[11] * x240 -
     30000000.0 * sc[20] * x240 + 110000000.0 * sc[2] * x240 -
     57000000.0 * sc[3] * x240 - 30000000.0 * sc[4] * x240 -
     30000000.0 * x102 * x240 - x240 * x676 - x240 * x991 - x240 * x998) *
      (x888 - x889) +
    (40000000.0 * sc[10] * x241 - 50000000.0 * sc[20] * x118 +
     30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     80000000.0 * sc[3] * x241 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 - 70000000.0 * sc[6] * x118 -
     28000000.0 * sc[9] * x118 + 5280000.0 * x1011 * x241 - x1035 * x241 -
     x1041 * x118 + x1047 * x241 - x1051 * x118 + x1052 * x241 - x118 * x358 -
     x241 * x695) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-50000000.0 * sc[20] * x202 + 30000000.0 * sc[2] * x202 -
     15000000.0 * sc[3] * x202 - 30000000.0 * sc[4] * x202 -
     70000000.0 * sc[6] * x202 - 28000000.0 * sc[9] * x202 - x1041 * x202 -
     x1051 * x202 - x202 * x358) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-20000000.0 * sc[4] * x70 - x1053 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[3] =
    -18900000.0 * sc[32] * x1706 - 18900000.0 * sc[32] * x1710 -
    57000000.0 * sc[3] * x266 - 30000000.0 * sc[3] * x289 +
    30000000.0 * sc[3] * x315 + 80000000.0 * sc[3] * x359 -
    80000000.0 * sc[3] * x368 + 57000000.0 * sc[3] * x376 +
    33000000.0 * sc[9] * x266 - 33000000.0 * sc[9] * x376 -
    2730000.0 * sc[9] * x5607 - x1063 * x359 + x1063 * x368 -
    6599600.0 * x2502 + 6599600.0 * x2505 - x261 * x359 + x261 * x368 -
    x359 * x628 + x368 * x628 + 6300.0 * x5574 + 6300.0 * x5576 +
    74200000.0 * x5580 * x5591 + 74200000.0 * x5580 + 74200000.0 * x5583 +
    74200000.0 * x5586 + 199200.0 * x5589 - 199200.0 * x5590 -
    1400000000.0 * x5596 - 1400000000.0 * x5598 - 2730000.0 * x5604 + x5648 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x647 - x669) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (x266 - x376 + (-x240) * (x647 - x669)) +
    (30000000.0 * sc[3] * x202) *
      (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669)));
  J[42] =
    -sc[3] * x1730 + 80000000.0 * sc[3] * x347 + 57000000.0 * sc[3] * x374 +
    30000000.0 * sc[3] * x620 - 30000000.0 * sc[3] * x670 -
    80000000.0 * sc[3] * x689 - 57000000.0 * sc[3] * x693 -
    33000000.0 * sc[9] * x374 + 33000000.0 * sc[9] * x693 - x1063 * x347 +
    x1063 * x689 - x1718 * x279 - x261 * x347 + x261 * x689 + x279 * x5650 +
    x279 * x5653 - x279 * x5656 - x279 * x5662 - x347 * x628 + x5625 * x713 -
    x5625 * x715 + x5658 + x5664 + x5681 + x5691 + x628 * x689 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x713 - x715) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x374 + x693 + (-x240) * (x713 - x715)) +
    (30000000.0 * sc[3] * x202) *
      (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715)));
  J[81] =
    15000000.0 * sc[12] * x453 + 80000000.0 * sc[12] * x482 + sc[13] * x3044 +
    57000000.0 * sc[16] * x580 + 30000000.0 * sc[17] * x2941 + sc[23] * x2931 +
    sc[24] * x2990 * x2994 + sc[24] * x3013 - 9428000.0 * sc[3] * x2824 * x818 +
    30000000.0 * sc[3] * x678 - 80000000.0 * sc[3] * x688 +
    80000000.0 * sc[3] * x690 - 30000000.0 * sc[3] * x703 +
    57000000.0 * sc[3] * x712 - 57000000.0 * sc[3] * x716 + sc[4] * x3076 +
    sc[5] * x2915 - 33000000.0 * sc[9] * x712 + 33000000.0 * sc[9] * x716 +
    x1063 * x688 - x1063 * x690 - x1718 * x54 + x1718 * x619 + x261 * x688 -
    x261 * x690 + 100000000.0 * x2845 * x2846 + x3032 + x54 * x5650 +
    x54 * x5653 - x54 * x5656 - x54 * x5662 + x5625 * x734 - x5625 * x735 -
    x5650 * x619 - x5653 * x619 + x5656 * x619 + x5662 * x619 + x5691 +
    x628 * x688 - x628 * x690 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x734 - x735) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x712 + x716 + (-x240) * (x734 - x735)) +
    (30000000.0 * sc[3] * x202) *
      (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735)));
  J[120] =
    -84300000.0 * sc[10] - sc[11] * x5751 - 33000000.0 * sc[12] * x551 -
    60000000.0 * sc[12] - sc[13] * x5767 - sc[14] * x5806 -
    10000000.0 * sc[14] - sc[17] * x5759 - 20.4 * sc[18] * x3161 -
    96000000.0 * sc[19] - sc[1] * x1730 - 16040000.0 * sc[21] -
    100000000.0 * sc[23] - sc[25] * x5731 - sc[29] * x3175 -
    9428000.0 * sc[2] * x2824 * x818 - 96000000.0 * sc[30] - sc[33] * x5791 -
    sc[35] * x5780 - sc[36] * x5785 - 36000000.0 * sc[37] -
    80000000.0 * sc[3] * x125 - 480000.0 * sc[3] * x5776 * x818 +
    80000000.0 * sc[3] * x710 + 30000000.0 * sc[3] * x717 -
    30000000.0 * sc[3] * x719 - 57000000.0 * sc[3] * x721 +
    57000000.0 * sc[3] * x725 - sc[4] * x3130 - 40000000.0 * sc[5] -
    sc[6] * x3205 - sc[7] * x473 - 0.03973 * sc[7] * x5817 - sc[8] * x5726 +
    33000000.0 * sc[9] * x721 - 33000000.0 * sc[9] * x725 + x125 * x261 +
    x1718 * x219 - x1718 * x596 - 80000000.0 * x200 - x219 * x5650 -
    x219 * x5653 + x219 * x5656 + x219 * x5662 - 57000000.0 * x226 -
    x261 * x710 - x3104 + 106000000.0 * x35 * x602 * exp(-1.41 * tc[0]) +
    x5569 * x602 + x5650 * x596 + x5653 * x596 - x5656 * x596 - x5662 * x596 +
    x5691 - x5723 - x5740 - x5747 - x5756 - x5799 - x5802 + x5815 + x5834 +
    x5842 - 30000000.0 * x6 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x747 - x748) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (x721 - x725 + (-x240) * (x747 - x748)) +
    (30000000.0 * sc[3] * x202) *
      (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748)));
  J[159] =
    sc[10] * x5851 + sc[12] * x5864 + sc[14] * x5857 + sc[16] * x5890 +
    sc[19] * x5895 + sc[21] * x5849 + sc[23] * x5883 +
    20000000.0 * sc[24] * x5845 + sc[28] * x5854 + sc[2] * x3076 +
    sc[36] * x5843 + 80000000.0 * sc[3] * x171 - sc[3] * x3130 +
    30000000.0 * sc[3] * x730 - 80000000.0 * sc[3] * x732 +
    57000000.0 * sc[3] * x736 - 30000000.0 * sc[3] * x737 -
    57000000.0 * sc[3] * x743 + sc[5] * x5847 + sc[9] * x5862 -
    33000000.0 * sc[9] * x736 + 33000000.0 * sc[9] * x743 - x1063 * x171 +
    x1063 * x732 - x157 * x1718 + x157 * x5650 + x157 * x5653 - x157 * x5656 -
    x157 * x5662 - x171 * x261 - x171 * x628 + x1718 * x633 +
    9428000.0 * x2504 * x2824 + x261 * x732 + x5625 * x768 - x5625 * x770 -
    x5650 * x633 - x5653 * x633 + x5656 * x633 + x5662 * x633 + x5691 + x5861 +
    0.07946 * x5866 + x628 * x732 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x768 - x770) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x736 + x743 + (-x240) * (x768 - x770)) +
    (30000000.0 * sc[3] * x202) *
      (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770)));
  J[198] =
    sc[2] * x2915 + 80000000.0 * sc[3] * x740 - 80000000.0 * sc[3] * x741 +
    57000000.0 * sc[3] * x746 - 57000000.0 * sc[3] * x757 - 40000000.0 * sc[3] +
    sc[4] * x5847 - 33000000.0 * sc[9] * x746 + 33000000.0 * sc[9] * x757 -
    x1063 * x740 + x1063 * x741 + x1718 * x181 - x181 * x5650 - x181 * x5653 +
    x181 * x5656 + x181 * x5662 - x261 * x740 + x261 * x741 -
    2000000000.0 * x5598 - 3900000.0 * x5604 + x5625 * x800 - x5625 * x801 +
    x5686 + x5923 + x5926 + x5931 - x628 * x740 + x628 * x741 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x800 - x801) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x746 + x757 + (-x240) * (x800 - x801)) +
    (30000000.0 * sc[3] * x202) *
      (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801)));
  J[237] =
    15000000.0 * sc[16] * x442 - sc[3] * x3205 + 80000000.0 * sc[3] * x745 +
    30000000.0 * sc[3] * x754 - 30000000.0 * sc[3] * x756 -
    80000000.0 * sc[3] * x758 - 57000000.0 * sc[3] * x761 +
    57000000.0 * sc[3] * x762 + 33000000.0 * sc[9] * x761 -
    33000000.0 * sc[9] * x762 - x1063 * x745 + x1063 * x758 -
    18856000.0 * x2502 + 18856000.0 * x2505 - x261 * x745 + x261 * x758 +
    576000.0 * x5589 - 576000.0 * x5590 + x5964 + x5972 - x628 * x745 +
    x628 * x758 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x842 - x844) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (x761 - x762 + (-x240) * (x842 - x844)) +
    (30000000.0 * sc[3] * x202) *
      (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844)));
  J[276] =
    -162000000.0 * sc[32] * x1706 - 162000000.0 * sc[32] * x1710 -
    sc[3] * x473 - 0.03973 * sc[3] * x5817 + 80000000.0 * sc[3] * x759 +
    30000000.0 * sc[3] * x765 - 80000000.0 * sc[3] * x766 -
    30000000.0 * sc[3] * x773 + 57000000.0 * sc[3] * x787 -
    57000000.0 * sc[3] * x799 - 23400000.0 * sc[9] * x5603 -
    23400000.0 * sc[9] * x5607 - 33000000.0 * sc[9] * x787 +
    33000000.0 * sc[9] * x799 - x1063 * x759 + x1063 * x766 -
    113136000.0 * x2502 + 113136000.0 * x2505 - x261 * x759 + x261 * x766 +
    54000.0 * x5574 + 54000.0 * x5576 + 636000000.0 * x5580 * x5591 +
    636000000.0 * x5580 + 636000000.0 * x5583 + 636000000.0 * x5586 +
    3696000.0 * x5589 - 3696000.0 * x5590 - 12000000000.0 * x5596 -
    12000000000.0 * x5598 + x6005 - x628 * x759 + x628 * x766 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x864 - x875) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x787 + x799 + (-x240) * (x864 - x875)) +
    (30000000.0 * sc[3] * x202) *
      (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875)));
  J[315] =
    -sc[3] * x5726 + x6037 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x888 - x889) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (30000000.0 * sc[3] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[354] =
    sc[10] * x6044 + sc[14] * x6040 + sc[32] * x6048 +
    30000000.0 * sc[3] * x779 - 30000000.0 * sc[3] * x792 +
    80000000.0 * sc[3] * x838 - 80000000.0 * sc[3] * x840 +
    57000000.0 * sc[3] * x841 - 57000000.0 * sc[3] * x849 + sc[4] * x5862 -
    33000000.0 * sc[9] * x841 + 33000000.0 * sc[9] * x849 - x1063 * x838 +
    x1063 * x840 - x1718 * x641 + x1718 * x642 + 33000000.0 * x226 +
    58000000.0 * x242 * exp(-289.85279950351901 * invT) - x261 * x838 +
    x261 * x840 + x4070 + 240000.0 * x5588 * x5776 + x5625 * x905 -
    x5625 * x906 + x5650 * x641 - x5650 * x642 + x5653 * x641 - x5653 * x642 -
    x5656 * x641 + x5656 * x642 - x5662 * x641 + x5662 * x642 + x5691 -
    3900000.0 * x602 * exp(x5602) + x6039 + x6043 - x628 * x838 + x628 * x840 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x905 - x906) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x841 + x849 + (-x240) * (x905 - x906)) +
    (30000000.0 * sc[3] * x202) *
      (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906)));
  J[393] =
    sc[12] * x6101 + sc[13] * x6080 + sc[16] * x6083 + sc[24] * x2994 * x994 -
    80000000.0 * sc[3] * x195 + 30000000.0 * sc[3] * x796 -
    30000000.0 * sc[3] * x814 - 57000000.0 * sc[3] * x855 +
    80000000.0 * sc[3] * x862 + 57000000.0 * sc[3] * x865 - 84300000.0 * sc[3] +
    sc[4] * x5851 + sc[9] * x6044 + 33000000.0 * sc[9] * x855 -
    33000000.0 * sc[9] * x865 + x1063 * x195 - x1063 * x862 - x1718 * x231 +
    x195 * x261 + x195 * x628 + x231 * x5650 + x231 * x5653 - x231 * x5656 -
    x231 * x5662 - x244 * x5625 - x261 * x862 + x5625 * x920 + x5658 + x5664 +
    x5681 + x5691 - x628 * x862 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (-x244 + x920) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (x855 - x865 + (-x240) * (-x244 + x920)) +
    (30000000.0 * sc[3] * x202) *
      (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920)));
  J[432] =
    80000000.0 * sc[3] * x341 - sc[3] * x5751 + 57000000.0 * sc[3] * x786 +
    30000000.0 * sc[3] * x827 - 30000000.0 * sc[3] * x834 -
    80000000.0 * sc[3] * x882 - 57000000.0 * sc[3] * x897 -
    33000000.0 * sc[9] * x786 + 33000000.0 * sc[9] * x897 - x1063 * x341 +
    x1063 * x882 - x261 * x341 + x261 * x882 - x341 * x628 + x5625 * x937 -
    x5625 * x938 + x5686 + x5689 + x5964 + x628 * x882 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x937 - x938) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x786 + x897 + (-x240) * (x937 - x938)) +
    (30000000.0 * sc[3] * x202) *
      (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938)));
  J[471] =
    sc[10] * x6101 + sc[21] * x6132 + 15000000.0 * sc[2] * x453 +
    80000000.0 * sc[2] * x482 + sc[30] * x6128 - 33000000.0 * sc[3] * x551 -
    30000000.0 * sc[3] * x851 - 80000000.0 * sc[3] * x883 -
    57000000.0 * sc[3] * x900 - 60000000.0 * sc[3] + sc[4] * x5864 +
    33000000.0 * sc[9] * x900 + x1063 * x883 - x1718 * x649 + x261 * x883 +
    x5625 * x948 + x5650 * x649 + x5653 * x649 - x5656 * x649 + x5658 -
    x5662 * x649 + x5664 + x6012 + x6018 + x6023 + x6027 + x6032 + x628 * x883 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (-x889 + x948) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x806 + x900 + (-x240) * (-x889 + x948)) +
    (30000000.0 * sc[3] * x202) *
      (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948)));
  J[510] =
    sc[10] * x6080 + sc[21] * x6152 + sc[2] * x3044 - sc[3] * x5767 -
    30000000.0 * sc[3] * x861 + 80000000.0 * sc[3] * x886 -
    80000000.0 * sc[3] * x895 + 57000000.0 * sc[3] * x904 -
    57000000.0 * sc[3] * x908 - 33000000.0 * sc[9] * x904 +
    33000000.0 * sc[9] * x908 - x1063 * x886 + x1063 * x895 + x200 * x459 -
    x261 * x886 + x261 * x895 + x3074 + x5625 * x961 - x5625 * x962 + x5681 +
    x5686 + x5926 + x5931 + x6015 - x628 * x886 + x628 * x895 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x961 - x962) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x904 + x908 + (-x240) * (x961 - x962)) +
    (30000000.0 * sc[3] * x202) *
      (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962)));
  J[549] =
    -sc[3] * x5806 - 30000000.0 * sc[3] * x870 - 80000000.0 * sc[3] * x896 -
    57000000.0 * sc[3] * x915 - 10000000.0 * sc[3] + sc[4] * x5857 +
    sc[9] * x6040 + 33000000.0 * sc[9] * x915 + x1063 * x896 - x1718 * x650 +
    x1718 * x668 + x261 * x896 + x5625 * x967 + x5650 * x650 - x5650 * x668 +
    x5653 * x650 - x5653 * x668 - x5656 * x650 + x5656 * x668 - x5662 * x650 +
    x5662 * x668 + x5931 + x6011 + x6018 + x6023 + x6027 + x6032 + x628 * x896 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (-x889 + x967) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x806 + x915 + (-x240) * (-x889 + x967)) +
    (30000000.0 * sc[3] * x202) *
      (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967)));
  J[588] =
    80000000.0 * sc[3] * x687 - 57000000.0 * sc[3] * x709 +
    57000000.0 * sc[3] * x806 - 30000000.0 * sc[3] * x892 -
    80000000.0 * sc[3] * x903 + 33000000.0 * sc[9] * x709 + x1063 * x903 +
    x261 * x903 + x5625 * x971 + x5681 + x5926 + x5931 + x6010 + x6015 + x6018 +
    x6023 + x6027 + x6032 - x6201 + x628 * x903 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (-x889 + x971) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (x709 - x806 + (-x240) * (-x889 + x971)) +
    (30000000.0 * sc[3] * x202) *
      (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971)));
  J[627] =
    sc[10] * x6083 + sc[20] * x6209 + 57000000.0 * sc[2] * x580 +
    30000000.0 * sc[3] * x894 - 30000000.0 * sc[3] * x902 +
    80000000.0 * sc[3] * x912 - 80000000.0 * sc[3] * x913 +
    57000000.0 * sc[3] * x926 - 57000000.0 * sc[3] * x931 + sc[4] * x5890 +
    15000000.0 * sc[6] * x442 - 33000000.0 * sc[9] * x926 +
    33000000.0 * sc[9] * x931 - x1063 * x912 + x1063 * x913 - x1718 * x674 +
    x1718 * x686 + x200 * x259 - 16499000.0 * x2502 + 16499000.0 * x2505 -
    x261 * x912 + x261 * x913 + 200000000.0 * x2845 * x424 +
    159000000.0 * x5580 + 159000000.0 * x5586 + 420000.0 * x5589 -
    420000.0 * x5590 + x5650 * x674 - x5650 * x686 + x5653 * x674 -
    x5653 * x686 - x5656 * x674 + x5656 * x686 - x5662 * x674 + x5662 * x686 -
    2000000000.0 * x602 * exp(x5593) + x6211 + x6249 - x628 * x912 +
    x628 * x913 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x572 - x659) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x926 + x931 + (-x240) * (x572 - x659)) +
    (30000000.0 * sc[3] * x202) *
      (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659)));
  J[666] =
    30000000.0 * sc[2] * x2941 - 30000000.0 * sc[3] * x135 +
    80000000.0 * sc[3] * x510 - sc[3] * x5759 + 30000000.0 * sc[3] * x910 -
    80000000.0 * sc[3] * x928 + 57000000.0 * sc[3] * x936 -
    57000000.0 * sc[3] * x947 - 33000000.0 * sc[9] * x936 +
    33000000.0 * sc[9] * x947 - x1063 * x510 + x1063 * x928 - x1718 * x297 +
    x1718 * x320 + x200 * x406 - 33940800.0 * x2502 + 33940800.0 * x2505 -
    x261 * x510 + x261 * x928 + x297 * x5650 + x297 * x5653 - x297 * x5656 -
    x297 * x5662 - x320 * x5650 - x320 * x5653 + x320 * x5656 + x320 * x5662 -
    x510 * x628 + 212000000.0 * x5580 + 212000000.0 * x5586 + 864000.0 * x5589 -
    864000.0 * x5590 + x628 * x928 + x6282 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (-x832 + x837) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x936 + x947 + (-x240) * (-x832 + x837)) +
    (30000000.0 * sc[3] * x202) *
      (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837)));
  J[705] =
    -20.4 * sc[3] * x3161 - 80000000.0 * sc[3] * x878 +
    30000000.0 * sc[3] * x911 - 30000000.0 * sc[3] * x917 +
    80000000.0 * sc[3] * x929 + 57000000.0 * sc[3] * x949 -
    57000000.0 * sc[3] * x956 - 33000000.0 * sc[9] * x949 +
    33000000.0 * sc[9] * x956 + x1037 * x5625 - x1038 * x5625 + x1063 * x878 -
    x1063 * x929 + x261 * x878 - x261 * x929 + x5681 + x5691 + x5926 + x6015 +
    x628 * x878 - x628 * x929 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x1037 - x1038) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (30000000.0 * sc[3] * x202) *
      (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038)));
  J[744] =
    -80000000.0 * sc[3] * x189 - 57000000.0 * sc[3] * x563 -
    30000000.0 * sc[3] * x922 - 96000000.0 * sc[3] + sc[4] * x5895 +
    33000000.0 * sc[9] * x563 + x1044 * x5625 + x1063 * x189 + x189 * x261 +
    x189 * x628 + x6299 + x6306 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x1044 - x889) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (x563 - x806 + (-x240) * (x1044 - x889)) +
    (30000000.0 * sc[3] * x202) *
      (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889)));
  J[783] =
    sc[16] * x6209 + 80000000.0 * sc[3] * x705 + 30000000.0 * sc[3] * x925 -
    30000000.0 * sc[3] * x934 - 80000000.0 * sc[3] * x935 +
    57000000.0 * sc[3] * x966 - 57000000.0 * sc[3] * x970 -
    33000000.0 * sc[9] * x966 + 33000000.0 * sc[9] * x970 + x1059 * x5625 -
    x1060 * x5625 - x261 * x705 + x261 * x935 + x5681 + x5691 + x5926 + x6015 -
    x628 * x705 + x628 * x935 + x6327 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x1059 - x1060) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (30000000.0 * sc[3] * x202) *
      (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060)));
  J[822] =
    sc[12] * x6132 + sc[13] * x6152 - 80000000.0 * sc[3] * x884 -
    30000000.0 * sc[3] * x941 - 57000000.0 * sc[3] * x977 - 16040000.0 * sc[3] +
    sc[4] * x5849 + 33000000.0 * sc[9] * x977 + x1063 * x884 + x1064 * x5625 +
    x261 * x884 + x628 * x884 + x6306 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x1064 - x889) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (30000000.0 * sc[3] * x202) *
      (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889)));
  J[861] =
    -81000000.0 * sc[32] * x1706 - 81000000.0 * sc[32] * x1710 -
    57000000.0 * sc[3] * x256 - 80000000.0 * sc[3] * x365 +
    30000000.0 * sc[3] * x477 + 80000000.0 * sc[3] * x944 -
    30000000.0 * sc[3] * x952 + 57000000.0 * sc[3] * x992 +
    33000000.0 * sc[9] * x256 - 11700000.0 * sc[9] * x5603 -
    11700000.0 * sc[9] * x5607 - 33000000.0 * sc[9] * x992 + x1063 * x365 -
    x1063 * x944 + x214 * x5625 - x216 * x5625 + x261 * x365 - x261 * x944 +
    x365 * x628 + 27000.0 * x5574 + 27000.0 * x5576 +
    318000000.0 * x5580 * x5591 + 318000000.0 * x5580 + 318000000.0 * x5583 +
    318000000.0 * x5586 - 6000000000.0 * x5596 - 6000000000.0 * x5598 + x5686 +
    x5689 - x628 * x944 - x6338 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x214 - x216) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (x256 - x992 + (-x240) * (x214 - x216)) +
    (30000000.0 * sc[3] * x202) *
      (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216)));
  J[900] =
    sc[2] * x2931 - 57000000.0 * sc[3] * x1014 + 80000000.0 * sc[3] * x350 -
    80000000.0 * sc[3] * x355 + 57000000.0 * sc[3] * x805 -
    30000000.0 * sc[3] * x958 - 100000000.0 * sc[3] + sc[4] * x5883 +
    33000000.0 * sc[9] * x1014 - 33000000.0 * sc[9] * x805 - x1063 * x350 +
    x1063 * x355 + x1718 * x782 - x261 * x350 + x261 * x355 + x285 * x5625 -
    x294 * x5625 - x350 * x628 + x355 * x628 - 2000000000.0 * x5598 -
    3900000.0 * x5604 - x5650 * x782 - x5653 * x782 + x5656 * x782 +
    x5662 * x782 + x5686 + x5926 + x5931 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x285 - x294) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (x1014 - x805 + (-x240) * (x285 - x294)) +
    (30000000.0 * sc[3] * x202) *
      (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294)));
  J[939] =
    sc[2] * x2990 * x2994 + sc[2] * x3013 - 10000000.0 * sc[3] * x2987 -
    80000000.0 * sc[3] * x363 - sc[3] * x5812 - 57000000.0 * sc[3] * x831 -
    30000000.0 * sc[3] * x959 + 20000000.0 * sc[4] * x5845 +
    33000000.0 * sc[9] * x831 + x1063 * x363 + x261 * x363 + x306 * x5625 +
    x363 * x628 + x5926 + x6012 + x6015 + x6018 + x6023 + x6027 + x6032 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x306 - x889) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x806 + x831 + (-x240) * (x306 - x889)) +
    (30000000.0 * sc[3] * x202) *
      (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889)));
  J[978] =
    -20000000.0 * sc[3] * x3102 - sc[3] * x5731 + x6037 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x888 - x889) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (30000000.0 * sc[3] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1017] =
    x6037 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x888 - x889) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (30000000.0 * sc[3] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1056] =
    -57000000.0 * sc[3] * x1028 + 33000000.0 * sc[9] * x1028 + x309 * x5625 +
    x5923 + x5926 + x6012 + x6015 + x6018 + x6023 + x6034 - x6407 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x309 - x889) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (x1028 - x806 + (-x240) * (x309 - x889)) +
    (30000000.0 * sc[3] * x202) *
      (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889)));
  J[1095] =
    -80000000.0 * sc[3] * x366 - 57000000.0 * sc[3] * x691 -
    30000000.0 * sc[3] * x963 + sc[4] * x5854 + 33000000.0 * sc[9] * x691 +
    x1063 * x366 + x261 * x366 + x326 * x5625 + x366 * x628 + x6306 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x326 - x889) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (x691 - x806 + (-x240) * (x326 - x889)) +
    (30000000.0 * sc[3] * x202) *
      (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889)));
  J[1134] =
    -sc[3] * x3175 + x6037 - x6419 - x6420 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x888 - x889) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (30000000.0 * sc[3] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1173] =
    sc[12] * x6128 - 96000000.0 * sc[3] + x6037 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x888 - x889) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (30000000.0 * sc[3] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1212] =
    x6037 - x6423 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x888 - x889) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (30000000.0 * sc[3] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1251] =
    -57000000.0 * sc[3] * x1043 + 33000000.0 * sc[9] * x1043 + sc[9] * x6048 -
    x1718 * x809 + x1718 * x99 + x176 * x5625 + x5650 * x809 - x5650 * x99 +
    x5653 * x809 - x5653 * x99 - x5656 * x809 + x5656 * x99 - x5662 * x809 +
    x5662 * x99 + x5923 + x5931 + x6011 + x6018 -
    27000000.0 * x602 * exp(-178.641916360675 * invT) + x6023 + x6034 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x176 - x889) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (x1043 - x806 + (-x240) * (x176 - x889)) +
    (30000000.0 * sc[3] * x202) *
      (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889)));
  J[1290] =
    106000000.0 * refC * x35 * exp(-1.41 * tc[0] + x1699) - sc[3] * x5791 -
    x1718 * x881 + x5650 * x881 + x5653 * x881 - x5656 * x881 + x5658 -
    x5662 * x881 + x5664 + x5923 + x6012 + x6035 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x888 - x889) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (30000000.0 * sc[3] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1329] =
    -57000000.0 * sc[3] * x1045 - 80000000.0 * sc[3] * x367 -
    30000000.0 * sc[3] * x968 + 33000000.0 * sc[9] * x1045 + x1063 * x367 +
    x152 * x5625 - x1718 * x469 + x261 * x367 + x367 * x628 + x469 * x5650 +
    x469 * x5653 - x469 * x5656 - x469 * x5662 + x5658 + x5664 + x6012 + x6018 +
    x6023 + x6027 + x6032 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x152 - x889) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (x1045 - x806 + (-x240) * (x152 - x889)) +
    (30000000.0 * sc[3] * x202) *
      (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889)));
  J[1368] =
    -57000000.0 * sc[3] * x232 - 80000000.0 * sc[3] * x543 - sc[3] * x5780 -
    30000000.0 * sc[3] * x983 + 33000000.0 * sc[9] * x232 + x1063 * x543 -
    x1718 * x465 + x261 * x543 + x353 * x5625 + x465 * x5650 + x465 * x5653 -
    x465 * x5656 - x465 * x5662 + x543 * x628 + x5658 + x5664 + x6012 + x6018 +
    x6023 + x6027 + x6032 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x353 - x889) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (x232 - x806 + (-x240) * (x353 - x889)) +
    (30000000.0 * sc[3] * x202) *
      (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889)));
  J[1407] =
    -57000000.0 * sc[3] * x291 - sc[3] * x5785 + sc[4] * x5843 +
    33000000.0 * sc[9] * x291 - x1718 * x537 + x1718 * x540 + x357 * x5625 +
    x537 * x5650 + x537 * x5653 - x537 * x5656 - x537 * x5662 - x540 * x5650 -
    x540 * x5653 + x540 * x5656 + x540 * x5662 + x5923 + x5931 + x6011 + x6018 +
    x6023 + x6034 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x357 - x889) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (x291 - x806 + (-x240) * (x357 - x889)) +
    (30000000.0 * sc[3] * x202) *
      (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889)));
  J[1446] =
    -36000000.0 * sc[3] + x1718 * x957 - 2000000000.0 * x5598 -
    3900000.0 * x5604 - x5650 * x957 - x5653 * x957 + x5656 * x957 +
    x5662 * x957 + x5923 + x5926 + x5931 + x6011 + x6035 +
    (57000000.0 * sc[3] * x240 - 33000000.0 * sc[9] * x240) * (x888 - x889) +
    (30000000.0 * sc[3] * x118 - 80000000.0 * sc[3] * x241 + x1063 * x241 +
     x241 * x261 + x241 * x628) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (30000000.0 * sc[3] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[4] = 92400000.0 * sc[4] * x1922 + 92400000.0 * sc[4] * x1925 -
         30000000.0 * sc[4] * x266 - 30000000.0 * sc[4] * x289 -
         20000000.0 * sc[4] * x311 + 30000000.0 * sc[4] * x315 +
         20000000.0 * sc[4] * x359 - 20000000.0 * sc[4] * x368 +
         30000000.0 * sc[4] * x376 - 50000000.0 * sc[4] * x647 +
         50000000.0 * sc[4] * x669 - 20000000.0 * sc[5] * x359 +
         20000000.0 * sc[5] * x368 - 1477000.0 * sc[5] * x6550 +
         28000000.0 * sc[9] * x289 - 28000000.0 * sc[9] * x315 -
         10600000.0 * x1011 * x359 + 10600000.0 * x1011 * x368 -
         23520000.0 * x1909 - 23520000.0 * x1913 + 6599600.0 * x2502 -
         6599600.0 * x2505 - 16720000000.0 * x2510 + 16720000000.0 * x2513 -
         5810000.0 * x2524 - 5810000.0 * x2529 + x266 * x29 - x29 * x376 +
         x359 * x60 - x368 * x60 - 509.562162162162 * x6518 + 281400.0 * x6522 -
         x6532 * (0.196 * x6526 + 1.4 * x6528) + 509.562162162162 * x6535 -
         281400.0 * x6537 + x6542 * (0.196 * x6526 + 1.4 * x6528) - x6549 +
         x6598 + (30000000.0 * sc[4] * x240 - x240 * x29) * (x647 - x669) +
         (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
          20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
          10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
           (x266 - x376 + (-x240) * (x647 - x669)) +
         (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
           (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669))) +
         (20000000.0 * sc[4] * x70) *
           (x289 - x315 + (-x118) * (x266 - x376 + (-x240) * (x647 - x669)) +
            (-x202) * (-x359 + x368 +
                       (x241) * (x266 - x376 + (-x240) * (x647 - x669))));
  J[43] =
    20000000.0 * sc[4] * x347 + 30000000.0 * sc[4] * x374 +
    30000000.0 * sc[4] * x620 - 30000000.0 * sc[4] * x670 -
    20000000.0 * sc[4] * x689 - 30000000.0 * sc[4] * x693 -
    50000000.0 * sc[4] * x713 + 50000000.0 * sc[4] * x715 -
    20000000.0 * sc[5] * x347 + 20000000.0 * sc[5] * x689 -
    28000000.0 * sc[9] * x620 + 28000000.0 * sc[9] * x670 -
    10600000.0 * x1011 * x347 + 10600000.0 * x1011 * x689 + x104 * x2615 -
    x2603 * x279 + x2615 * x279 + x2661 - x2668 * x279 - x2689 - x279 * x6608 -
    x29 * x374 + x29 * x693 + x347 * x60 - x60 * x689 + x6603 - x6609 + x6621 +
    x6627 + (30000000.0 * sc[4] * x240 - x240 * x29) * (x713 - x715) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x374 + x693 + (-x240) * (x713 - x715)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715))) +
    (20000000.0 * sc[4] * x70) *
      (-x620 + x670 + (-x118) * (-x374 + x693 + (-x240) * (x713 - x715)) +
       (-x202) *
         (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715))));
  J[82] =
    30000000.0 * sc[12] * x574 + 30000000.0 * sc[13] * x446 +
    20000000.0 * sc[13] * x521 + 50000000.0 * sc[16] * x652 + sc[17] * x2939 +
    sc[17] * x2944 + sc[24] * x387 + 20000000.0 * sc[24] * x389 +
    sc[33] * x2923 + 96000000.0 * sc[37] + 9428000.0 * sc[3] * x2824 * x818 -
    28000000.0 * sc[4] * x421 * x423 + 30000000.0 * sc[4] * x678 -
    20000000.0 * sc[4] * x688 + 20000000.0 * sc[4] * x690 -
    30000000.0 * sc[4] * x703 + 30000000.0 * sc[4] * x712 -
    30000000.0 * sc[4] * x716 - 50000000.0 * sc[4] * x734 +
    50000000.0 * sc[4] * x735 - 20000000.0 * sc[4] * x989 +
    20000000.0 * sc[5] * x688 - 20000000.0 * sc[5] * x690 +
    149700000.0 * sc[5] * exp(-148.44891641239201 * invT) + sc[7] * x2819 +
    sc[8] * x2903 + 10600000.0 * x1011 * x688 - 10600000.0 * x1011 * x690 -
    x2603 * x54 + x2603 * x619 + x2615 * x54 - x2615 * x619 + 95100.0 * x2869 -
    x29 * x712 + x29 * x716 + x3032 + x3081 - x54 * x6608 - x60 * x688 +
    x60 * x690 - 33600000.0 * x602 * exp(x1907) + x619 * x6608 + x6506 + x6636 +
    x6644 + x6651 + (30000000.0 * sc[4] * x240 - x240 * x29) * (x734 - x735) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x712 + x716 + (-x240) * (x734 - x735)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735))) +
    (20000000.0 * sc[4] * x70) *
      (-x678 + x703 + (-x118) * (-x712 + x716 + (-x240) * (x734 - x735)) +
       (-x202) *
         (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735))));
  J[121] =
    30000000.0 * sc[12] + sc[13] * x5767 + 10000000.0 * sc[14] +
    10000000.0 * sc[24] * x2987 + 9428000.0 * sc[2] * x2824 * x818 +
    sc[35] * x5780 - 20000000.0 * sc[4] * x125 - sc[4] * x3130 +
    20000000.0 * sc[4] * x710 + 30000000.0 * sc[4] * x717 -
    30000000.0 * sc[4] * x719 - 30000000.0 * sc[4] * x721 +
    30000000.0 * sc[4] * x725 - 50000000.0 * sc[4] * x747 +
    50000000.0 * sc[4] * x748 + 20000000.0 * sc[5] * x125 -
    20000000.0 * sc[5] * x710 + 40000000.0 * sc[5] + sc[6] * x3205 +
    0.07946 * sc[7] * x5817 + sc[8] * x5726 - 28000000.0 * sc[9] * x717 +
    28000000.0 * sc[9] * x719 + 10600000.0 * x1011 * x125 -
    10600000.0 * x1011 * x710 - x125 * x60 + x219 * x2603 - x219 * x2615 +
    x219 * x2668 + x219 * x6608 - x2603 * x596 + x2615 * x596 - x2668 * x596 +
    x29 * x721 - x29 * x725 + x3104 + x5747 + x5756 + x5799 + x5829 -
    x596 * x6608 + x60 * x710 + x6627 + x6644 + x6671 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x747 - x748) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (x721 - x725 + (-x240) * (x747 - x748)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748))) +
    (20000000.0 * sc[4] * x70) *
      (-x717 + x719 + (-x118) * (x721 - x725 + (-x240) * (x747 - x748)) +
       (-x202) *
         (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748))));
  J[160] =
    -sc[13] * x423 * x6706 - sc[15] * x6700 - sc[17] * x6692 - sc[18] * x3286 -
    sc[19] * x5895 - 30110000.0 * sc[19] - sc[20] * x3223 - sc[20] * x6789 -
    sc[21] * x5849 - sc[23] * x5883 - 20000000.0 * sc[24] * x5845 -
    7500000.0 * sc[24] * x6721 - 10000000.0 * sc[25] * x6721 - sc[26] * x6673 -
    sc[28] * x5854 - 6000000.0 * sc[28] - sc[29] * x6696 - 24000000.0 * sc[30] -
    sc[32] * x3248 - sc[33] * x6738 - sc[35] * x6677 - 60000000.0 * sc[37] -
    sc[3] * x3130 + 20000000.0 * sc[4] * x171 - 804000.0 * sc[4] * x32 * x6504 +
    30000000.0 * sc[4] * x730 - 20000000.0 * sc[4] * x732 +
    30000000.0 * sc[4] * x736 - 30000000.0 * sc[4] * x737 -
    30000000.0 * sc[4] * x743 - 50000000.0 * sc[4] * x768 +
    50000000.0 * sc[4] * x770 - 20000000.0 * sc[4] * x990 - sc[7] * x3227 -
    sc[8] * x6728 - sc[8] * x6731 - sc[9] * x5862 +
    20000000.0 * sc_qss[3] * x70 - x157 * x2603 + x157 * x2615 - x157 * x6608 +
    x171 * x60 - 11.3 * x200 * exp(-1509.64999741416 * invT + 2.0 * tc[0]) -
    20000000.0 * x200 - 30000000.0 * x226 - 50000000.0 * x242 -
    9428000.0 * x2504 * x2824 + x2603 * x633 - x2615 * x633 -
    1600000.0 * x2846 * x6711 - x29 * x736 + x29 * x743 - 299400000.0 * x3230 -
    x3234 + 20000000.0 * x395 / x68 - 0.15892 * x5866 - 30000000.0 * x6 -
    x60 * x732 + 132000000.0 * x602 * exp(x1920) + x633 * x6608 + x646 + x6506 +
    x6644 - x6684 - x6688 - x6725 + x6735 - x6745 - x6752 + x6758 + x6765 +
    x6781 - x6785 + x6804 + x6808 + x6816 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x768 - x770) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x736 + x743 + (-x240) * (x768 - x770)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770))) +
    (20000000.0 * sc[4] * x70) *
      (-x730 + x737 + (-x118) * (-x736 + x743 + (-x240) * (x768 - x770)) +
       (-x202) *
         (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770))));
  J[199] =
    13400000.0 * sc[10] + 10000000.0 * sc[19] + sc[20] * x6826 +
    149700000.0 * sc[2] * exp(-148.44891641239201 * invT) + 40000000.0 * sc[3] +
    132000000.0 * sc[4] * x1925 - 30000000.0 * sc[4] * x701 +
    30000000.0 * sc[4] * x738 + 20000000.0 * sc[4] * x740 -
    20000000.0 * sc[4] * x741 + 30000000.0 * sc[4] * x746 -
    30000000.0 * sc[4] * x757 - 50000000.0 * sc[4] * x800 +
    50000000.0 * sc[4] * x801 + sc[7] * x6840 + sc[7] * x6842 +
    28000000.0 * sc[9] * x701 - 10600000.0 * x1011 * x740 +
    10600000.0 * x1011 * x741 + x181 * x2603 - x181 * x2615 + x181 * x2668 +
    x181 * x6608 - 33600000.0 * x1909 - 8300000.0 * x2524 - x281 * x740 +
    x281 * x741 - x29 * x746 + x29 * x757 + x296 * x701 + x3427 + x60 * x740 -
    x60 * x741 - 2110000.0 * x602 * exp(241.54399958626499 * invT) + x6627 +
    x6644 + x6821 - 2110000.0 * x6833 + x6849 + x6853 + x6861 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x800 - x801) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x746 + x757 + (-x240) * (x800 - x801)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801))) +
    (20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (-x746 + x757 + (-x240) * (x800 - x801)) +
       (-x202) *
         (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801))));
  J[238] =
    1455.8918918918901 * ((sc[4]) * (sc[4])) * x6512 *
      exp(2307.7516293804401 * invT - 0.798 * tc[0]) +
    20000000.0 * sc[4] * x745 + 30000000.0 * sc[4] * x754 -
    30000000.0 * sc[4] * x756 - 20000000.0 * sc[4] * x758 -
    30000000.0 * sc[4] * x761 + 30000000.0 * sc[4] * x762 -
    20000000.0 * sc[4] * x825 - 50000000.0 * sc[4] * x842 +
    50000000.0 * sc[4] * x844 - 20000000.0 * sc[5] * x745 +
    20000000.0 * sc[5] * x758 - 10600000.0 * x1011 * x745 +
    10600000.0 * x1011 * x758 + 18856000.0 * x2502 - 18856000.0 * x2505 -
    x281 * x745 + x281 * x758 + x29 * x761 - x29 * x762 - x296 * x754 +
    x296 * x756 - x3457 + x3597 + x60 * x745 - x60 * x758 -
    1455.8918918918901 * x6512 * x6517 + 804000.0 * x6522 -
    x6532 * (0.56 * x6526 + 4.0 * x6528) - 804000.0 * x6537 +
    x6542 * (0.56 * x6526 + 4.0 * x6528) + x6893 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x842 - x844) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (x761 - x762 + (-x240) * (x842 - x844)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844))) +
    (20000000.0 * sc[4] * x70) *
      (-x754 + x756 + (-x118) * (x761 - x762 + (-x240) * (x842 - x844)) +
       (-x202) *
         (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844))));
  J[277] =
    sc[10] * x6907 + sc[12] * x85 + sc[13] * x6915 + 6.3 * sc[14] * x6917 +
    sc[16] * x6953 + sc[18] * x6919 + sc[19] * x6921 + sc[21] * x6905 +
    sc[23] * x6913 + sc[24] * x6900 + sc[27] * x6909 + sc[28] * x6911 +
    sc[29] * x6903 + sc[2] * x2819 + sc[36] * x6927 + 0.07946 * sc[3] * x5817 +
    792000000.0 * sc[4] * x1922 + 792000000.0 * sc[4] * x1925 - sc[4] * x3227 +
    20000000.0 * sc[4] * x759 + 30000000.0 * sc[4] * x765 -
    20000000.0 * sc[4] * x766 - 30000000.0 * sc[4] * x773 +
    30000000.0 * sc[4] * x787 - 30000000.0 * sc[4] * x799 -
    20000000.0 * sc[4] * x860 - 50000000.0 * sc[4] * x864 +
    50000000.0 * sc[4] * x875 + sc[5] * x6840 + sc[5] * x6842 -
    20000000.0 * sc[5] * x759 + 20000000.0 * sc[5] * x766 + sc[9] * x6941 +
    sc[9] * x6942 + sc[9] * x6944 + sc[9] * x6946 + sc[9] * x6948 -
    10600000.0 * x1011 * x759 + 10600000.0 * x1011 * x766 + x161 * x226 -
    201600000.0 * x1909 - 201600000.0 * x1913 + 113136000.0 * x2502 -
    113136000.0 * x2505 - 49800000.0 * x2524 - 49800000.0 * x2529 - x29 * x787 +
    x29 * x799 + x3900 + x60 * x759 - x60 * x766 - 4367.6756756756804 * x6518 +
    2412000.0 * x6522 - x6532 * (1.68 * x6526 + 12.0 * x6528) +
    4367.6756756756804 * x6535 - 2412000.0 * x6537 +
    x6542 * (1.68 * x6526 + 12.0 * x6528) - 12660000.0 * x6833 -
    12660000.0 * x6879 + x6975 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x864 - x875) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x787 + x799 + (-x240) * (x864 - x875)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875))) +
    (20000000.0 * sc[4] * x70) *
      (-x765 + x773 + (-x118) * (-x787 + x799 + (-x240) * (x864 - x875)) +
       (-x202) *
         (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875))));
  J[316] =
    402000.0 * refC * x32 * x6521 + sc[2] * x2903 + sc[3] * x5726 -
    sc[4] * x6728 - sc[4] * x6731 + x6987 + x7007 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x888 - x889) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[355] =
    sc[10] * x7032 + sc[15] * x7009 + 1600000.0 * sc[23] * x7014 +
    18000.0 * sc[25] - sc[4] * x5862 + 30000000.0 * sc[4] * x779 -
    30000000.0 * sc[4] * x792 + 20000000.0 * sc[4] * x838 -
    20000000.0 * sc[4] * x840 + 30000000.0 * sc[4] * x841 -
    30000000.0 * sc[4] * x849 - 20000000.0 * sc[4] * x867 -
    50000000.0 * sc[4] * x905 + 50000000.0 * sc[4] * x906 -
    20000000.0 * sc[5] * x838 + 20000000.0 * sc[5] * x840 + sc[7] * x6941 +
    sc[7] * x6942 + sc[7] * x6944 + sc[7] * x6946 + sc[7] * x6948 -
    28000000.0 * sc[9] * x779 + 28000000.0 * sc[9] * x792 -
    10600000.0 * x1011 * x838 + 10600000.0 * x1011 * x840 - x2603 * x641 +
    x2603 * x642 + x2615 * x641 - x2615 * x642 - x2668 * x641 + x2668 * x642 -
    x281 * x838 + x281 * x840 - x29 * x841 + x29 * x849 - x296 * x779 +
    x296 * x792 + 10600000.0 * x3986 + x4070 + 28000000.0 * x6 + x60 * x838 -
    x60 * x840 - x641 * x6608 + x642 * x6608 + x6506 + x6644 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x905 - x906) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x841 + x849 + (-x240) * (x905 - x906)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906))) +
    (20000000.0 * sc[4] * x70) *
      (-x779 + x792 + (-x118) * (-x841 + x849 + (-x240) * (x905 - x906)) +
       (-x202) *
         (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906))));
  J[394] =
    sc[16] * x7042 - 20000000.0 * sc[4] * x195 + 50000000.0 * sc[4] * x244 -
    24000000.0 * sc[4] * x6750 * x6797 + 30000000.0 * sc[4] * x796 -
    30000000.0 * sc[4] * x814 - 30000000.0 * sc[4] * x855 +
    20000000.0 * sc[4] * x862 + 30000000.0 * sc[4] * x865 -
    50000000.0 * sc[4] * x920 + 20000000.0 * sc[5] * x195 -
    20000000.0 * sc[5] * x862 + 13400000.0 * sc[5] + sc[7] * x6907 +
    sc[9] * x7032 - 28000000.0 * sc[9] * x796 + 28000000.0 * sc[9] * x814 +
    10600000.0 * x1011 * x195 - 10600000.0 * x1011 * x862 + x104 * x2615 -
    x195 * x60 - x231 * x2603 + x231 * x2615 - x231 * x2668 - x231 * x6608 -
    x2689 + x29 * x855 - x29 * x865 + x60 * x862 + x6603 - x6609 + x6627 +
    x6644 + x7070 + (30000000.0 * sc[4] * x240 - x240 * x29) * (-x244 + x920) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (x855 - x865 + (-x240) * (-x244 + x920)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920))) +
    (20000000.0 * sc[4] * x70) *
      (-x796 + x814 + (-x118) * (x855 - x865 + (-x240) * (-x244 + x920)) +
       (-x202) *
         (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920))));
  J[433] =
    -20000000.0 * sc[4] * x1000 + 20000000.0 * sc[4] * x341 +
    30000000.0 * sc[4] * x786 + 30000000.0 * sc[4] * x827 -
    30000000.0 * sc[4] * x834 - 20000000.0 * sc[4] * x882 -
    30000000.0 * sc[4] * x897 - 50000000.0 * sc[4] * x937 +
    50000000.0 * sc[4] * x938 - 20000000.0 * sc[5] * x341 +
    20000000.0 * sc[5] * x882 - 28000000.0 * sc[9] * x827 +
    28000000.0 * sc[9] * x834 - 10600000.0 * x1011 * x341 +
    10600000.0 * x1011 * x882 + x2661 - x29 * x786 + x29 * x897 + x341 * x60 -
    x60 * x882 + x6506 + x6893 - x7071 + x7086 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x937 - x938) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x786 + x897 + (-x240) * (x937 - x938)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938))) +
    (20000000.0 * sc[4] * x70) *
      (-x827 + x834 + (-x118) * (-x786 + x897 + (-x240) * (x937 - x938)) +
       (-x202) *
         (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938))));
  J[472] =
    30000000.0 * sc[2] * x574 + 30000000.0 * sc[3] - 20000000.0 * sc[4] * x147 -
    sc[4] * x5864 - sc[4] * x6762 + 30000000.0 * sc[4] * x738 -
    30000000.0 * sc[4] * x851 - 20000000.0 * sc[4] * x883 -
    30000000.0 * sc[4] * x900 - 50000000.0 * sc[4] * x948 - 30200000.0 * sc[4] +
    20000000.0 * sc[5] * x883 + sc[7] * x85 + 28000000.0 * sc[9] * x851 +
    10600000.0 * x1011 * x883 - x2603 * x649 + x2615 * x649 - x2668 * x649 -
    x2689 + x281 * x883 + x29 * x900 + x296 * x851 + x3427 - x60 * x883 -
    x649 * x6608 + x6603 - x6609 + x6981 + x6995 + x6998 + x7001 + x7097 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (-x889 + x948) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x806 + x900 + (-x240) * (-x889 + x948)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948))) +
    (20000000.0 * sc[4] * x70) *
      (-x738 + x851 + (-x118) * (-x806 + x900 + (-x240) * (-x889 + x948)) +
       (-x202) *
         (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948))));
  J[511] =
    30000000.0 * sc[2] * x446 + 20000000.0 * sc[2] * x521 + sc[3] * x5767 +
    30000000.0 * sc[4] * x738 - 30000000.0 * sc[4] * x861 +
    20000000.0 * sc[4] * x886 - 20000000.0 * sc[4] * x895 +
    30000000.0 * sc[4] * x904 - 30000000.0 * sc[4] * x908 -
    50000000.0 * sc[4] * x961 + 50000000.0 * sc[4] * x962 + sc[7] * x6915 +
    28000000.0 * sc[9] * x861 - 10600000.0 * x1011 * x886 +
    10600000.0 * x1011 * x895 + x104 * x2615 - x29 * x904 + x29 * x908 + x3427 +
    x60 * x886 - x60 * x895 + x6627 + x6644 + x6853 + x6986 - x7106 + x7118 +
    x7129 + (30000000.0 * sc[4] * x240 - x240 * x29) * (x961 - x962) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x904 + x908 + (-x240) * (x961 - x962)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962))) +
    (20000000.0 * sc[4] * x70) *
      (-x738 + x861 + (-x118) * (-x904 + x908 + (-x240) * (x961 - x962)) +
       (-x202) *
         (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962))));
  J[550] =
    32000000.0 * sc[2] + 10000000.0 * sc[3] - 30000000.0 * sc[4] * x870 -
    20000000.0 * sc[4] * x896 - 30000000.0 * sc[4] * x915 -
    50000000.0 * sc[4] * x967 + 20000000.0 * sc[5] * x896 +
    6.3 * sc[7] * x6917 + 28000000.0 * sc[9] * x870 +
    10600000.0 * x1011 * x896 - x2603 * x650 + x2603 * x668 + x2615 * x650 -
    x2615 * x668 - x2668 * x650 + x2668 * x668 + x281 * x896 + x29 * x915 +
    x296 * x870 - x60 * x896 - x650 * x6608 + x6608 * x668 + x6998 + x7001 +
    x7141 + x7144 + (30000000.0 * sc[4] * x240 - x240 * x29) * (-x889 + x967) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x806 + x915 + (-x240) * (-x889 + x967)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967))) +
    (20000000.0 * sc[4] * x70) *
      (-x738 + x870 + (-x118) * (-x806 + x915 + (-x240) * (-x889 + x967)) +
       (-x202) *
         (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967))));
  J[589] =
    -sc[4] * x6700 - 30000000.0 * sc[4] * x709 - 30000000.0 * sc[4] * x892 -
    20000000.0 * sc[4] * x903 - 50000000.0 * sc[4] * x971 +
    20000000.0 * sc[5] * x903 + sc[9] * x7009 + 28000000.0 * sc[9] * x892 +
    10600000.0 * x1011 * x903 + x281 * x903 + x29 * x709 + x296 * x892 +
    2.7e+26 * x426 * x6577 - x60 * x903 + x6201 + x6987 + x6996 + x6998 +
    x7001 + (30000000.0 * sc[4] * x240 - x240 * x29) * (-x889 + x971) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (x709 - x806 + (-x240) * (-x889 + x971)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971))) +
    (20000000.0 * sc[4] * x70) *
      (-x738 + x892 + (-x118) * (x709 - x806 + (-x240) * (-x889 + x971)) +
       (-x202) *
         (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971))));
  J[628] =
    sc[10] * x7042 + 50000000.0 * sc[2] * x652 -
    3200000.0 * sc[4] * x423 * x6711 - 50000000.0 * sc[4] * x572 +
    50000000.0 * sc[4] * x659 - sc[4] * x6706 * x6750 +
    30000000.0 * sc[4] * x894 - 30000000.0 * sc[4] * x902 +
    20000000.0 * sc[4] * x912 - 20000000.0 * sc[4] * x913 +
    30000000.0 * sc[4] * x926 - 30000000.0 * sc[4] * x931 -
    20000000.0 * sc[4] * x987 - 20000000.0 * sc[5] * x912 +
    20000000.0 * sc[5] * x913 + sc[7] * x6953 - 28000000.0 * sc[9] * x894 +
    28000000.0 * sc[9] * x902 - 10600000.0 * x1011 * x912 +
    10600000.0 * x1011 * x913 + 16499000.0 * x2502 - 16499000.0 * x2505 -
    77000000000.0 * x2510 + 77000000000.0 * x2513 + x2522 - x2603 * x674 +
    x2603 * x686 + x2615 * x674 - x2615 * x686 - x29 * x926 + x29 * x931 +
    x60 * x912 - x60 * x913 - 1273.90540540541 * x6518 + 703500.0 * x6522 -
    x6532 * (0.49 * x6526 + 3.5 * x6528) + 1273.90540540541 * x6535 -
    703500.0 * x6537 + x6542 * (0.49 * x6526 + 3.5 * x6528) - x6608 * x674 +
    x6608 * x686 + x7162 + x7183 + x7196 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x572 - x659) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x926 + x931 + (-x240) * (x572 - x659)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659))) +
    (20000000.0 * sc[4] * x70) *
      (-x894 + x902 + (-x118) * (-x926 + x931 + (-x240) * (x572 - x659)) +
       (-x202) *
         (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659))));
  J[667] =
    sc[2] * x2939 + sc[2] * x2944 - 30000000.0 * sc[4] * x135 +
    20000000.0 * sc[4] * x510 - sc[4] * x6692 - 20000000.0 * sc[4] * x821 +
    50000000.0 * sc[4] * x832 - 50000000.0 * sc[4] * x837 +
    30000000.0 * sc[4] * x910 - 20000000.0 * sc[4] * x928 +
    30000000.0 * sc[4] * x936 - 30000000.0 * sc[4] * x947 -
    20000000.0 * sc[5] * x510 + 20000000.0 * sc[5] * x928 +
    28000000.0 * sc[9] * x135 - 28000000.0 * sc[9] * x910 -
    10600000.0 * x1011 * x510 + 10600000.0 * x1011 * x928 + 33940800.0 * x2502 -
    33940800.0 * x2505 - 158400000000.0 * x2510 + 158400000000.0 * x2513 -
    x2603 * x297 + x2603 * x320 + x2615 * x297 - x2615 * x320 - x2668 * x297 +
    x2668 * x320 - x29 * x936 + x29 * x947 - x297 * x6608 + x320 * x6608 +
    x510 * x60 - x60 * x928 - 2620.6054054054098 * x6518 + 1447200.0 * x6522 -
    x6532 * (1.008 * x6526 + 7.2 * x6528) + 2620.6054054054098 * x6535 -
    1447200.0 * x6537 + x6542 * (1.008 * x6526 + 7.2 * x6528) + x7218 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (-x832 + x837) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x936 + x947 + (-x240) * (-x832 + x837)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837))) +
    (20000000.0 * sc[4] * x70) *
      (x135 - x910 + (-x118) * (-x936 + x947 + (-x240) * (-x832 + x837)) +
       (-x202) *
         (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837))));
  J[706] =
    -50000000.0 * sc[4] * x1037 + 50000000.0 * sc[4] * x1038 - sc[4] * x3286 -
    20000000.0 * sc[4] * x384 - 20000000.0 * sc[4] * x878 +
    30000000.0 * sc[4] * x911 - 30000000.0 * sc[4] * x917 +
    20000000.0 * sc[4] * x929 + 30000000.0 * sc[4] * x949 -
    30000000.0 * sc[4] * x956 + 20000000.0 * sc[5] * x878 -
    20000000.0 * sc[5] * x929 + sc[7] * x6919 - 28000000.0 * sc[9] * x911 +
    28000000.0 * sc[9] * x917 + 10600000.0 * x1011 * x878 -
    10600000.0 * x1011 * x929 + x281 * x878 - x281 * x929 - x29 * x949 +
    x29 * x956 - x296 * x911 + x296 * x917 - x60 * x878 + x60 * x929 + x6986 +
    x7097 - x7229 + (30000000.0 * sc[4] * x240 - x240 * x29) * (x1037 - x1038) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038))) +
    (20000000.0 * sc[4] * x70) *
      (-x911 + x917 + (-x118) * (-x949 + x956 + (-x240) * (x1037 - x1038)) +
       (-x202) *
         (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038))));
  J[745] =
    -50000000.0 * sc[4] * x1044 - 20000000.0 * sc[4] * x189 -
    30000000.0 * sc[4] * x563 - sc[4] * x5895 + 30000000.0 * sc[4] * x738 -
    20000000.0 * sc[4] * x824 - 30000000.0 * sc[4] * x922 - 30110000.0 * sc[4] +
    20000000.0 * sc[5] * x189 + 10000000.0 * sc[5] + sc[7] * x6921 +
    28000000.0 * sc[9] * x922 + 10600000.0 * x1011 * x189 + x189 * x281 -
    x189 * x60 + x29 * x563 + x296 * x922 - x6783 + x6987 + x6995 + x6998 +
    x7001 + x7097 + (30000000.0 * sc[4] * x240 - x240 * x29) * (x1044 - x889) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (x563 - x806 + (-x240) * (x1044 - x889)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889))) +
    (20000000.0 * sc[4] * x70) *
      (-x738 + x922 + (-x118) * (x563 - x806 + (-x240) * (x1044 - x889)) +
       (-x202) *
         (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889))));
  J[784] =
    -50000000.0 * sc[4] * x1059 + 50000000.0 * sc[4] * x1060 - sc[4] * x3223 -
    20000000.0 * sc[4] * x42 - sc[4] * x6789 + 20000000.0 * sc[4] * x705 +
    30000000.0 * sc[4] * x925 - 30000000.0 * sc[4] * x934 -
    20000000.0 * sc[4] * x935 + 30000000.0 * sc[4] * x966 -
    30000000.0 * sc[4] * x970 + sc[5] * x6826 - 20000000.0 * sc[5] * x705 +
    20000000.0 * sc[5] * x935 - 28000000.0 * sc[9] * x925 +
    28000000.0 * sc[9] * x934 - 10600000.0 * x1011 * x705 +
    10600000.0 * x1011 * x935 - x281 * x705 + x281 * x935 - x29 * x966 +
    x29 * x970 - x296 * x925 + x296 * x934 + x60 * x705 - x60 * x935 + x6325 +
    x6986 + x7097 + (30000000.0 * sc[4] * x240 - x240 * x29) * (x1059 - x1060) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060))) +
    (20000000.0 * sc[4] * x70) *
      (-x925 + x934 + (-x118) * (-x966 + x970 + (-x240) * (x1059 - x1060)) +
       (-x202) *
         (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060))));
  J[823] =
    -50000000.0 * sc[4] * x1064 - sc[4] * x5849 -
    24000000.0 * sc[4] * x6749 * x6750 - 20000000.0 * sc[4] * x884 -
    30000000.0 * sc[4] * x941 - 30000000.0 * sc[4] * x977 +
    20000000.0 * sc[5] * x884 + 24000000.0 * sc[5] + sc[7] * x6905 +
    28000000.0 * sc[9] * x941 + 10600000.0 * x1011 * x884 + x281 * x884 +
    x29 * x977 + x296 * x941 - x60 * x884 + x6987 + x6996 + x6998 + x7001 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x1064 - x889) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889))) +
    (20000000.0 * sc[4] * x70) *
      (-x738 + x941 + (-x118) * (-x806 + x977 + (-x240) * (x1064 - x889)) +
       (-x202) *
         (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889))));
  J[862] =
    396000000.0 * sc[4] * x1922 + 396000000.0 * sc[4] * x1925 -
    50000000.0 * sc[4] * x214 + 50000000.0 * sc[4] * x216 -
    30000000.0 * sc[4] * x256 - 20000000.0 * sc[4] * x365 +
    30000000.0 * sc[4] * x477 - 20000000.0 * sc[4] * x58 +
    20000000.0 * sc[4] * x944 - 30000000.0 * sc[4] * x952 +
    30000000.0 * sc[4] * x992 + 20000000.0 * sc[5] * x365 -
    20000000.0 * sc[5] * x944 - 28000000.0 * sc[9] * x477 +
    28000000.0 * sc[9] * x952 + 10600000.0 * x1011 * x365 -
    10600000.0 * x1011 * x944 - 24900000.0 * x2524 - 24900000.0 * x2529 +
    x256 * x29 + x2661 - x29 * x992 - x365 * x60 + x60 * x944 + x6338 + x6506 -
    6330000.0 * x6833 - 6330000.0 * x6879 - x7280 + x7287 + x7307 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x214 - x216) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (x256 - x992 + (-x240) * (x214 - x216)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216))) +
    (20000000.0 * sc[4] * x70) *
      (-x477 + x952 + (-x118) * (x256 - x992 + (-x240) * (x214 - x216)) +
       (-x202) *
         (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216))));
  J[901] =
    -30000000.0 * sc[4] * x1014 + 132000000.0 * sc[4] * x1925 -
    50000000.0 * sc[4] * x285 + 50000000.0 * sc[4] * x294 +
    20000000.0 * sc[4] * x350 - 20000000.0 * sc[4] * x355 - sc[4] * x5883 +
    30000000.0 * sc[4] * x738 + 30000000.0 * sc[4] * x805 -
    30000000.0 * sc[4] * x958 - 20000000.0 * sc[5] * x350 +
    20000000.0 * sc[5] * x355 + sc[7] * x6913 + 1600000.0 * sc[9] * x7014 +
    28000000.0 * sc[9] * x958 - 10600000.0 * x1011 * x350 +
    10600000.0 * x1011 * x355 + x1014 * x29 - 33600000.0 * x1909 -
    8300000.0 * x2524 + x2603 * x782 - x2615 * x782 + x2668 * x782 -
    x281 * x350 + x281 * x355 - x29 * x805 + x296 * x958 + x3427 + x350 * x60 -
    x355 * x60 + x6608 * x782 + x6627 + x6644 - 2110000.0 * x6833 + x6853 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x285 - x294) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (x1014 - x805 + (-x240) * (x285 - x294)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294))) +
    (20000000.0 * sc[4] * x70) *
      (-x738 + x958 + (-x118) * (x1014 - x805 + (-x240) * (x285 - x294)) +
       (-x202) *
         (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294))));
  J[940] =
    sc[2] * x387 + 20000000.0 * sc[2] * x389 + 10000000.0 * sc[3] * x2987 -
    50000000.0 * sc[4] * x306 - 20000000.0 * sc[4] * x363 -
    20000000.0 * sc[4] * x5845 - 20000000.0 * sc[4] * x617 -
    7500000.0 * sc[4] * x6721 + 30000000.0 * sc[4] * x738 -
    30000000.0 * sc[4] * x831 - 30000000.0 * sc[4] * x959 +
    20000000.0 * sc[5] * x363 + sc[7] * x6900 + 28000000.0 * sc[9] * x959 +
    10600000.0 * x1011 * x363 + x281 * x363 + x29 * x831 + x296 * x959 -
    x363 * x60 + x6987 + x6995 + x6998 + x7001 + x7097 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x306 - x889) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x806 + x831 + (-x240) * (x306 - x889)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889))) +
    (20000000.0 * sc[4] * x70) *
      (-x738 + x959 + (-x118) * (-x806 + x831 + (-x240) * (x306 - x889)) +
       (-x202) *
         (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889))));
  J[979] =
    20000000.0 * sc[3] * x3102 - 10000000.0 * sc[4] * x6721 + 18000.0 * sc[9] -
    x513 + x6987 + x7007 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x888 - x889) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1018] =
    -sc[4] * x6673 + 95100.0 * x5335 + x6987 + x7007 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x888 - x889) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1057] =
    -30000000.0 * sc[4] * x1028 - 50000000.0 * sc[4] * x309 + sc[7] * x6909 +
    x1028 * x29 + x6987 + x6996 + x7006 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x309 - x889) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (x1028 - x806 + (-x240) * (x309 - x889)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889))) +
    (20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (x1028 - x806 + (-x240) * (x309 - x889)) +
       (-x202) * (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889))));
  J[1096] =
    -50000000.0 * sc[4] * x326 - 20000000.0 * sc[4] * x366 - sc[4] * x5854 -
    30000000.0 * sc[4] * x691 - 30000000.0 * sc[4] * x963 - 6000000.0 * sc[4] +
    20000000.0 * sc[5] * x366 + 6600000.0 * sc[5] + sc[7] * x6911 +
    28000000.0 * sc[9] * x963 + 10600000.0 * x1011 * x366 + x281 * x366 +
    x29 * x691 + x296 * x963 - x366 * x60 + x6987 + x6996 + x6998 + x7001 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x326 - x889) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (x691 - x806 + (-x240) * (x326 - x889)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889))) +
    (20000000.0 * sc[4] * x70) *
      (-x738 + x963 + (-x118) * (x691 - x806 + (-x240) * (x326 - x889)) +
       (-x202) *
         (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889))));
  J[1135] =
    -sc[4] * x6696 + sc[7] * x6903 + x6419 + x6987 + x7007 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x888 - x889) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1174] =
    -24000000.0 * sc[4] + 24000000.0 * sc[5] + x6987 + x7007 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x888 - x889) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1213] =
    x6987 + x7007 + (30000000.0 * sc[4] * x240 - x240 * x29) * (x888 - x889) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1252] =
    -30000000.0 * sc[4] * x1043 - 50000000.0 * sc[4] * x176 - sc[4] * x3248 +
    x1043 * x29 - x2603 * x809 + x2603 * x99 + x2615 * x809 - x2615 * x99 -
    x2668 * x809 + x2668 * x99 - x6608 * x809 + x6608 * x99 + x7006 + x7144 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x176 - x889) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (x1043 - x806 + (-x240) * (x176 - x889)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889))) +
    (20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (x1043 - x806 + (-x240) * (x176 - x889)) +
       (-x202) * (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889))));
  J[1291] =
    sc[2] * x2923 - sc[4] * x6738 - x2603 * x881 + x2615 * x881 - x2668 * x881 -
    x2689 + x3427 + x6603 - x6608 * x881 - x6609 + x6981 + x7007 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x888 - x889) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1330] =
    -30000000.0 * sc[4] * x1045 - 50000000.0 * sc[4] * x152 -
    20000000.0 * sc[4] * x367 - 30000000.0 * sc[4] * x968 +
    20000000.0 * sc[5] * x367 + 28000000.0 * sc[9] * x968 +
    10600000.0 * x1011 * x367 + x1045 * x29 - x2603 * x469 + x2615 * x469 -
    x2668 * x469 - x2689 + x281 * x367 + x296 * x968 + x3427 - x367 * x60 -
    x469 * x6608 + x6603 - x6609 + x6981 + x6996 + x6998 + x7001 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x152 - x889) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (x1045 - x806 + (-x240) * (x152 - x889)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889))) +
    (20000000.0 * sc[4] * x70) *
      (-x738 + x968 + (-x118) * (x1045 - x806 + (-x240) * (x152 - x889)) +
       (-x202) *
         (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889))));
  J[1369] =
    sc[3] * x5780 - 30000000.0 * sc[4] * x232 - 50000000.0 * sc[4] * x353 -
    20000000.0 * sc[4] * x543 - sc[4] * x6677 - 30000000.0 * sc[4] * x983 +
    20000000.0 * sc[5] * x543 + 28000000.0 * sc[9] * x983 +
    10600000.0 * x1011 * x543 + x232 * x29 - x2603 * x465 + x2615 * x465 -
    x2668 * x465 - x2689 + x281 * x543 + x296 * x983 + x3427 - x465 * x6608 -
    x543 * x60 + x6603 - x6609 + x6981 + x6996 + x6998 + x7001 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x353 - x889) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (x232 - x806 + (-x240) * (x353 - x889)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889))) +
    (20000000.0 * sc[4] * x70) *
      (-x738 + x983 + (-x118) * (x232 - x806 + (-x240) * (x353 - x889)) +
       (-x202) *
         (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889))));
  J[1408] =
    -30000000.0 * sc[4] * x291 - 50000000.0 * sc[4] * x357 + sc[7] * x6927 +
    x247 - x2603 * x537 + x2603 * x540 + x2615 * x537 - x2615 * x540 +
    x29 * x291 - x537 * x6608 + x540 * x6608 + x7006 + x7144 +
    (30000000.0 * sc[4] * x240 - x240 * x29) * (x357 - x889) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (x291 - x806 + (-x240) * (x357 - x889)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889))) +
    (20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (x291 - x806 + (-x240) * (x357 - x889)) +
       (-x202) * (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889))));
  J[1447] =
    96000000.0 * sc[2] + 132000000.0 * sc[4] * x1925 -
    30000000.0 * sc[4] * x839 - 50000000.0 * sc[4] * x888 - 60000000.0 * sc[4] -
    33600000.0 * x1909 - 8300000.0 * x2524 + x2603 * x957 - x2615 * x957 +
    x2668 * x957 + x29 * x839 + x6608 * x957 - 2110000.0 * x6833 + x7006 +
    x7144 + (30000000.0 * sc[4] * x240 - x240 * x29) * (x888 - x889) +
    (30000000.0 * sc[4] * x118 - 20000000.0 * sc[4] * x241 +
     20000000.0 * sc[5] * x241 - 28000000.0 * sc[9] * x118 +
     10600000.0 * x1011 * x241 - x118 * x296 + x241 * x281 - x241 * x60) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (30000000.0 * sc[4] * x202 - 28000000.0 * sc[9] * x202 - x202 * x296) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[5] = -313085097.732604 * sc[2] * sc[9] * x2286 * exp(-3.24 * tc[0]) +
         20000000.0 * sc[5] * x359 - 20000000.0 * sc[5] * x368 +
         1477000.0 * sc[5] * x6550 + 313085097.732604 * x2286 * x2322 -
         25312000.0 * x2297 * x2305 + 25312000.0 * x2297 * x2326 +
         x2305 * x2316 * (0.112 * x2311 + 0.8 * x2312) -
         x2316 * x2326 * (0.112 * x2311 + 0.8 * x2312) + x6549 +
         (-20000000.0 * sc[5] * x241) * (x266 - x376 + (-x240) * (x647 - x669));
  J[44] =
    20000000.0 * sc[5] * x347 - 20000000.0 * sc[5] * x689 + x2288 +
    x279 * x6608 + x6609 +
    (-20000000.0 * sc[5] * x241) * (-x374 + x693 + (-x240) * (x713 - x715));
  J[83] =
    -20000000.0 * sc[5] * x688 + 20000000.0 * sc[5] * x690 + sc[8] * x2900 +
    sc[9] * x2315 * x2324 + x2288 + x2920 + x54 * x6608 - x619 * x6608 +
    (-20000000.0 * sc[5] * x241) * (-x712 + x716 + (-x240) * (x734 - x735));
  J[122] =
    -20000000.0 * sc[5] * x125 + 20000000.0 * sc[5] * x710 -
    40000000.0 * sc[5] + sc[7] * x473 + sc[8] * x5726 - x219 * x6608 + x2288 +
    x596 * x6608 +
    (-20000000.0 * sc[5] * x241) * (x721 - x725 + (-x240) * (x747 - x748));
  J[161] =
    24000000.0 * sc[13] * x2990 * x6797 + 20000000.0 * sc[13] * x514 +
    sc[14] * x6756 + sc[17] * x6692 + sc[26] * x6673 + sc[33] * x6738 +
    20000000.0 * sc[5] * x171 - 20000000.0 * sc[5] * x732 + sc[8] * x6728 +
    sc[8] * x6731 + sc[9] * x5862 + x157 * x6608 + x2288 + 149700000.0 * x3230 -
    x633 * x6608 + x6725 + x6752 + x6781 + x6785 +
    (-20000000.0 * sc[5] * x241) * (-x736 + x743 + (-x240) * (x768 - x770));
  J[200] =
    -refC * x2303 * x2315 - 14400000.0 * sc[10] - sc[11] * x7429 -
    sc[12] * x7442 - 1000000.0 * sc[13] * x2987 - sc[13] * x7471 -
    sc[16] * x2299 - sc[18] * x7434 - sc[19] * x7460 - 10000000.0 * sc[19] -
    sc[20] * x666 - sc[20] * x6826 - sc[20] * x7463 - 24600000.0 * sc[21] -
    sc[22] * x7425 - sc[24] * x7437 - sc[27] * x7417 - 9260000.0 * sc[28] -
    sc[29] * x7452 - 24000000.0 * sc[30] - 40000000.0 * sc[3] +
    20000000.0 * sc[5] * x740 - 20000000.0 * sc[5] * x741 -
    520000.0 * sc[5] * exp(820.24316526169298 * invT) -
    1463200000.0 * sc[5] * exp(-6038.59998965664 * invT) - sc[6] * x3340 -
    sc[7] * x6840 - sc[7] * x6842 - x181 * x6608 - 20000000.0 * x200 + x3403 +
    2110000.0 * x602 * exp(241.54399958626499 * invT) - x6821 + x6861 - x7422 +
    x7451 - x7456 +
    (-20000000.0 * sc[5] * x241) * (-x746 + x757 + (-x240) * (x800 - x801));
  J[239] =
    -sc[5] * x3340 + 20000000.0 * sc[5] * x745 - 20000000.0 * sc[5] * x758 +
    x2288 + x3446 + 4220000.0 * x6833 + 4220000.0 * x6879 +
    (-20000000.0 * sc[5] * x241) * (x761 - x762 + (-x240) * (x842 - x844));
  J[278] =
    sc[3] * x473 - sc[5] * x6840 - sc[5] * x6842 + 20000000.0 * sc[5] * x759 -
    20000000.0 * sc[5] * x766 + 18000.0 * sc[9] * x6750 * x7480 +
    sc[9] * x6941 + sc[9] * x6942 + sc[9] * x6944 + sc[9] * x6946 +
    sc[9] * x6948 + 9306454530.10164 * x2286 * x2322 -
    9306454530.10164 * x2290 - 752399200.0 * x2297 * x2305 +
    752399200.0 * x2297 * x2326 +
    x2305 * x2316 * (3.3292 * x2311 + 23.78 * x2312) -
    x2316 * x2326 * (3.3292 * x2311 + 23.78 * x2312) + 12660000.0 * x6833 +
    12660000.0 * x6879 +
    (-20000000.0 * sc[5] * x241) * (-x787 + x799 + (-x240) * (x864 - x875));
  J[317] =
    sc[12] * x7493 + sc[20] * x7491 + sc[28] * x7489 + sc[2] * x2900 +
    sc[3] * x5726 + sc[4] * x6728 + sc[4] * x6731 +
    731600000.0 * sc[9] * x7498 + 260000.0 * sc[9] * x7500 + x7485 + x7487 +
    x7496 + x7502 + x7504 +
    (-20000000.0 * sc[5] * x241) * (-x806 + x839 + (-x240) * (x888 - x889));
  J[356] =
    sc[11] * x7521 + sc[13] * x7519 + 20000.0 * sc[21] + sc[22] * x7517 +
    140000.0 * sc[25] + sc[29] * x7511 + sc[2] * x2315 * x2324 +
    90000.0 * sc[30] + sc[4] * x5862 + 20000000.0 * sc[5] * x838 -
    20000000.0 * sc[5] * x840 + 18000.0 * sc[7] * x6750 * x7480 +
    sc[7] * x6941 + sc[7] * x6942 + sc[7] * x6944 + sc[7] * x6946 +
    sc[7] * x6948 + 731600000.0 * sc[8] * x7498 + 260000.0 * sc[8] * x7500 +
    665305832.681783 * x2286 * x2322 - 665305832.681783 * x2290 -
    53788000.0 * x2297 * x2305 + 53788000.0 * x2297 * x2326 +
    x2305 * x2316 * (0.238 * x2311 + 1.7 * x2312) -
    x2316 * x2326 * (0.238 * x2311 + 1.7 * x2312) + x3983 + x641 * x6608 -
    x642 * x6608 + x7508 + x7514 + x7524 + x7526 + x7528 +
    (-20000000.0 * sc[5] * x241) * (-x841 + x849 + (-x240) * (x905 - x906));
  J[395] =
    24000000.0 * sc[4] * x6750 * x6797 - 20000000.0 * sc[5] * x195 +
    20000000.0 * sc[5] * x862 - 14400000.0 * sc[5] + x2288 + x231 * x6608 +
    x6609 + x7531 +
    (-20000000.0 * sc[5] * x241) * (x855 - x865 + (-x240) * (-x244 + x920));
  J[434] =
    20000000.0 * sc[5] * x341 - sc[5] * x7429 - 20000000.0 * sc[5] * x882 +
    sc[9] * x7521 + x2288 + 4220000.0 * x6833 + 4220000.0 * x6879 +
    (-20000000.0 * sc[5] * x241) * (-x786 + x897 + (-x240) * (x937 - x938));
  J[473] =
    -sc[5] * x7442 - 20000000.0 * sc[5] * x883 + sc[8] * x7493 + x649 * x6608 +
    x6609 + x7538 + x7539 +
    (-20000000.0 * sc[5] * x241) * (-x806 + x900 + (-x240) * (-x889 + x948));
  J[512] =
    24000000.0 * sc[4] * x2990 * x6797 + 20000000.0 * sc[4] * x514 -
    1000000.0 * sc[5] * x2987 - sc[5] * x7471 + 20000000.0 * sc[5] * x886 -
    20000000.0 * sc[5] * x895 + sc[9] * x7519 + x6609 + x7106 + x7119 + x7451 +
    x7541 +
    (-20000000.0 * sc[5] * x241) * (-x904 + x908 + (-x240) * (x961 - x962));
  J[551] =
    sc[4] * x6756 - 20000000.0 * sc[5] * x896 + x650 * x6608 - x6608 * x668 +
    x7539 + x7548 +
    (-20000000.0 * sc[5] * x241) * (-x806 + x915 + (-x240) * (-x889 + x967));
  J[590] =
    -20000000.0 * sc[5] * x903 + x7504 +
    (-20000000.0 * sc[5] * x241) * (x709 - x806 + (-x240) * (-x889 + x971));
  J[629] =
    -sc[5] * x2299 + 20000000.0 * sc[5] * x912 - 20000000.0 * sc[5] * x913 +
    853156891.321345 * x2286 * x2322 - 853156891.321345 * x2290 -
    68975200.0 * x2297 * x2305 + 68975200.0 * x2297 * x2326 +
    x2305 * x2316 * (0.3052 * x2311 + 2.18 * x2312) -
    x2316 * x2326 * (0.3052 * x2311 + 2.18 * x2312) + x6608 * x674 -
    x6608 * x686 - x7162 +
    (-20000000.0 * sc[5] * x241) * (-x926 + x931 + (-x240) * (x572 - x659));
  J[668] =
    sc[4] * x6692 + 20000000.0 * sc[5] * x510 - 20000000.0 * sc[5] * x928 +
    1706313782.64269 * x2286 * x2322 - 1706313782.64269 * x2290 -
    137950400.0 * x2297 * x2305 + 137950400.0 * x2297 * x2326 +
    x2305 * x2316 * (0.6104 * x2311 + 4.36 * x2312) -
    x2316 * x2326 * (0.6104 * x2311 + 4.36 * x2312) + x297 * x6608 -
    x320 * x6608 +
    (-20000000.0 * sc[5] * x241) * (-x936 + x947 + (-x240) * (-x832 + x837));
  J[707] =
    -sc[5] * x7434 - 20000000.0 * sc[5] * x878 + 20000000.0 * sc[5] * x929 +
    x6609 + x7451 +
    (-20000000.0 * sc[5] * x241) * (-x949 + x956 + (-x240) * (x1037 - x1038));
  J[746] =
    -20000000.0 * sc[5] * x189 - sc[5] * x7460 - 10000000.0 * sc[5] + x6783 +
    x7504 + x7553 + x7554 +
    (-20000000.0 * sc[5] * x241) * (x563 - x806 + (-x240) * (x1044 - x889));
  J[785] =
    -sc[5] * x666 - sc[5] * x6826 + 20000000.0 * sc[5] * x705 - sc[5] * x7463 -
    20000000.0 * sc[5] * x935 + sc[8] * x7491 + x6609 + x7451 + x7557 +
    (-20000000.0 * sc[5] * x241) * (-x966 + x970 + (-x240) * (x1059 - x1060));
  J[824] =
    24000000.0 * sc[4] * x6749 * x6750 - 20000000.0 * sc[5] * x884 -
    24600000.0 * sc[5] + 20000.0 * sc[9] + x7504 + x7564 +
    (-20000000.0 * sc[5] * x241) * (-x806 + x977 + (-x240) * (x1064 - x889));
  J[863] =
    -20000000.0 * sc[5] * x365 - sc[5] * x7425 + 20000000.0 * sc[5] * x944 +
    sc[9] * x7517 + x2288 + 6330000.0 * x6833 + 6330000.0 * x6879 +
    (-20000000.0 * sc[5] * x241) * (x256 - x992 + (-x240) * (x214 - x216));
  J[902] =
    20000000.0 * sc[5] * x350 - 20000000.0 * sc[5] * x355 - x6608 * x782 +
    x7451 +
    (-20000000.0 * sc[5] * x241) * (x1014 - x805 + (-x240) * (x285 - x294));
  J[941] =
    -20000000.0 * sc[5] * x363 - sc[5] * x7437 + x7504 +
    (-20000000.0 * sc[5] * x241) * (-x806 + x831 + (-x240) * (x306 - x889));
  J[980] =
    140000.0 * sc[9] + x513 + x7502 + x7504 +
    (-20000000.0 * sc[5] * x241) * (-x806 + x839 + (-x240) * (x888 - x889));
  J[1019] =
    sc[4] * x6673 + x7502 + x7504 +
    (-20000000.0 * sc[5] * x241) * (-x806 + x839 + (-x240) * (x888 - x889));
  J[1058] =
    -sc[5] * x7417 + x7502 + x7504 +
    (-20000000.0 * sc[5] * x241) * (x1028 - x806 + (-x240) * (x309 - x889));
  J[1097] =
    -20000000.0 * sc[5] * x366 - 9260000.0 * sc[5] + sc[8] * x7489 + x7504 +
    x7573 +
    (-20000000.0 * sc[5] * x241) * (x691 - x806 + (-x240) * (x326 - x889));
  J[1136] =
    -sc[5] * x7452 + sc[9] * x7511 + x7502 + x7504 - x7577 +
    (-20000000.0 * sc[5] * x241) * (-x806 + x839 + (-x240) * (x888 - x889));
  J[1175] =
    -24000000.0 * sc[5] + 90000.0 * sc[9] + x7502 + x7504 +
    (-20000000.0 * sc[5] * x241) * (-x806 + x839 + (-x240) * (x888 - x889));
  J[1214] =
    x7502 + x7504 +
    (-20000000.0 * sc[5] * x241) * (-x806 + x839 + (-x240) * (x888 - x889));
  J[1253] =
    x6608 * x809 - x6608 * x99 + x7502 + x7539 +
    (-20000000.0 * sc[5] * x241) * (x1043 - x806 + (-x240) * (x176 - x889));
  J[1292] =
    sc[4] * x6738 + x6608 * x881 + x6609 + x7502 + x7539 +
    (-20000000.0 * sc[5] * x241) * (-x806 + x839 + (-x240) * (x888 - x889));
  J[1331] =
    -20000000.0 * sc[5] * x367 + x469 * x6608 + x6609 + x7539 +
    (-20000000.0 * sc[5] * x241) * (x1045 - x806 + (-x240) * (x152 - x889));
  J[1370] =
    -20000000.0 * sc[5] * x543 + x465 * x6608 + x6609 + x7539 +
    (-20000000.0 * sc[5] * x241) * (x232 - x806 + (-x240) * (x353 - x889));
  J[1409] =
    x537 * x6608 - x540 * x6608 + x7502 + x7539 +
    (-20000000.0 * sc[5] * x241) * (x291 - x806 + (-x240) * (x357 - x889));
  J[1448] =
    20000000.0 * sc[5] * x687 - x6608 * x957 + x7451 + x7502 - x7583 +
    (-20000000.0 * sc[5] * x241) * (-x806 + x839 + (-x240) * (x888 - x889));
  J[6] =
    1121400.0 * ((sc[2]) * (sc[2])) * x818 + 110000000.0 * sc[2] * x266 +
    30000000.0 * sc[2] * x289 - 30000000.0 * sc[2] * x315 -
    110000000.0 * sc[2] * x376 - 70000000.0 * sc[6] * x289 +
    70000000.0 * sc[6] * x315 - 30000000.0 * x102 * x266 +
    30000000.0 * x102 * x376 - x1035 * x359 + x1035 * x368 + x1052 * x359 -
    x1052 * x368 - x1053 * x311 - x1855 * x647 + x1855 * x669 -
    1121400.0 * x1895 + 4.9e+44 * x191 + x2234 - x264 * x311 - x266 * x998 +
    x376 * x998 + 4.2875e+76 * x38 * x39 - 4.2875e+76 * x39 * x7608 -
    x7588 * x7595 + x7588 * x7604 - 4.9e+44 * x7600 + x7658 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x647 - x669) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (x266 - x376 + (-x240) * (x647 - x669)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669))) +
    (x1053 * x70 + x264 * x70) *
      (x289 - x315 + (-x118) * (x266 - x376 + (-x240) * (x647 - x669)) +
       (-x202) *
         (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669))));
  J[45] =
    -110000000.0 * sc[2] * x374 - 30000000.0 * sc[2] * x620 +
    30000000.0 * sc[2] * x670 + 110000000.0 * sc[2] * x693 +
    70000000.0 * sc[6] * x620 - 70000000.0 * sc[6] * x670 +
    30000000.0 * x102 * x374 - 30000000.0 * x102 * x693 - x1035 * x347 +
    x1035 * x689 + x1052 * x347 - x1052 * x689 - x1855 * x713 + x1855 * x715 +
    x2636 + x374 * x998 - x693 * x998 + x7678 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x713 - x715) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x374 + x693 + (-x240) * (x713 - x715)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715))) +
    (x1053 * x70 + x264 * x70) *
      (-x620 + x670 + (-x118) * (-x374 + x693 + (-x240) * (x713 - x715)) +
       (-x202) *
         (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715))));
  J[84] =
    sc[10] * x111 + 70000000.0 * sc[10] * x410 + 120000000.0 * sc[12] +
    sc[13] * x3055 + 20000000.0 * sc[14] +
    1100000000.0 * sc[17] * sc[2] * x2508 + 150000000.0 * sc[19] +
    2000000.0 * sc[21] + 50000000.0 * sc[24] * x2987 + 18000000.0 * sc[28] +
    180000.0 * sc[2] * sc[6] * exp(-0.6 * tc[0]) +
    112480000.0 * sc[2] * sc[7] * exp(-1.25 * tc[0]) +
    3560000.0 * sc[2] * x2855 * x818 - 30000000.0 * sc[2] * x678 +
    30000000.0 * sc[2] * x703 - 110000000.0 * sc[2] * x712 +
    110000000.0 * sc[2] * x716 + 1800000.0 * sc[30] -
    15000000.0 * sc[3] * x678 + 15000000.0 * sc[3] * x703 + sc[4] * x3076 +
    sc[5] * x2918 + 70000000.0 * sc[6] * x678 - 70000000.0 * sc[6] * x703 +
    sc[7] * x2819 + sc[8] * x2900 + 30000000.0 * x102 * x712 -
    30000000.0 * x102 * x716 + x1034 * x200 + x1035 * x688 - x1035 * x690 -
    x1052 * x688 + x1052 * x690 - x1053 * x989 - x1855 * x734 + x1855 * x735 +
    110000000.0 * x226 + x238 - x264 * x989 + x2812 + x2816 + x2928 + x2965 +
    x3070 + x3104 + 30000000.0 * x6 + x712 * x998 - x716 * x998 + x7677 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x734 - x735) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x712 + x716 + (-x240) * (x734 - x735)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735))) +
    (x1053 * x70 + x264 * x70) *
      (-x678 + x703 + (-x118) * (-x712 + x716 + (-x240) * (x734 - x735)) +
       (-x202) *
         (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735))));
  J[123] =
    -30000000.0 * sc[2] * x717 + 30000000.0 * sc[2] * x719 +
    110000000.0 * sc[2] * x721 - 110000000.0 * sc[2] * x725 - sc[6] * x3205 +
    70000000.0 * sc[6] * x717 - 70000000.0 * sc[6] * x719 -
    30000000.0 * x102 * x721 + 30000000.0 * x102 * x725 + x1035 * x125 -
    x1035 * x710 - x1052 * x125 + x1052 * x710 - x1855 * x747 + x1855 * x748 +
    x3180 - x721 * x998 + x725 * x998 + x7678 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x747 - x748) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (x721 - x725 + (-x240) * (x747 - x748)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748))) +
    (x1053 * x70 + x264 * x70) *
      (-x717 + x719 + (-x118) * (x721 - x725 + (-x240) * (x747 - x748)) +
       (-x202) *
         (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748))));
  J[162] =
    sc[2] * x3076 - 30000000.0 * sc[2] * x730 - 110000000.0 * sc[2] * x736 +
    30000000.0 * sc[2] * x737 + 110000000.0 * sc[2] * x743 +
    70000000.0 * sc[6] * x730 - 70000000.0 * sc[6] * x737 +
    30000000.0 * x102 * x736 - 30000000.0 * x102 * x743 - x1035 * x171 +
    x1035 * x732 + x1052 * x171 - x1052 * x732 - x1053 * x990 - x1855 * x768 +
    x1855 * x770 - x264 * x990 - x3234 + x3294 + x736 * x998 - x743 * x998 +
    x7677 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x768 - x770) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x736 + x743 + (-x240) * (x768 - x770)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770))) +
    (x1053 * x70 + x264 * x70) *
      (-x730 + x737 + (-x118) * (-x736 + x743 + (-x240) * (x768 - x770)) +
       (-x202) *
         (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770))));
  J[201] =
    sc[2] * x2918 + 30000000.0 * sc[2] * x701 - 110000000.0 * sc[2] * x746 +
    110000000.0 * sc[2] * x757 - sc[6] * x3340 - 70000000.0 * sc[6] * x701 +
    30000000.0 * x102 * x746 - 30000000.0 * x102 * x757 - x1035 * x740 +
    x1035 * x741 + x1052 * x740 - x1052 * x741 - x1855 * x800 + x1855 * x801 +
    x3426 + x746 * x998 - x757 * x998 + x7685 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x800 - x801) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x746 + x757 + (-x240) * (x800 - x801)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801))) +
    (x1053 * x70 + x264 * x70) *
      (x744 + (-x118) * (-x746 + x757 + (-x240) * (x800 - x801)) +
       (-x202) *
         (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801))));
  J[240] =
    -550000000.0 * refC * sc[17] * exp(-2.0 * tc[0] + x1024) -
    180000.0 * refC * sc[6] * exp(-0.6 * tc[0] + x1024) -
    56240000.0 * refC * sc[7] * exp(-1.25 * tc[0] + x1024) -
    1780000.0 * refC * x2855 * exp(-tc[0] + x1024) -
    7.0e+44 * refCinv * x228 * x253 * x35 * x3566 - sc[10] * x3491 -
    sc[12] * x3572 - 20000000.0 * sc[13] * x3516 - sc[14] * x3452 -
    sc[16] * x3547 - 15000000.0 * sc[16] * x442 - sc[16] * x7722 -
    sc[18] * x3563 - 32000000.0 * sc[18] * x492 - sc[19] * x2 - sc[20] * x3455 -
    sc[21] * x3447 - 50000000.0 * sc[23] * x3539 - 20000000.0 * sc[24] * x3440 -
    sc[27] * x3501 - sc[28] * x3450 - sc[29] * x3442 +
    90000.0 * ((sc[2]) * (sc[2])) * exp(-0.6 * tc[0]) -
    30000000.0 * sc[2] * x754 + 30000000.0 * sc[2] * x756 +
    110000000.0 * sc[2] * x761 - 110000000.0 * sc[2] * x762 - sc[36] * x3473 -
    sc[3] * x3205 - 15000000.0 * sc[3] * x754 + 15000000.0 * sc[3] * x756 -
    sc[5] * x3340 + 70000000.0 * sc[6] * x754 - 70000000.0 * sc[6] * x756 -
    30000000.0 * x102 * x761 + 30000000.0 * x102 * x762 - x1035 * x745 +
    x1035 * x758 + x1052 * x745 - x1052 * x758 - x1053 * x825 -
    60000000.0 * x12 * x3566 - x1855 * x842 + x1855 * x844 -
    0.5 * x200 * exp(-3638.25649376812 * invT + 2.0 * tc[0]) -
    30000000.0 * x226 * x3 - x226 * x696 - 110000000.0 * x235 * x242 -
    x264 * x825 - x3446 - x3457 - 70000000.0 * x6 - x761 * x998 + x762 * x998 +
    x7721 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x842 - x844) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (x761 - x762 + (-x240) * (x842 - x844)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844))) +
    (x1053 * x70 + x264 * x70) *
      (-x754 + x756 + (-x118) * (x761 - x762 + (-x240) * (x842 - x844)) +
       (-x202) *
         (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844))));
  J[279] =
    -56240000.0 * refC * sc[6] * exp(-1.25 * tc[0] + x1024) -
    4.2e+45 * refCinv * sc[6] * x228 * x253 * x3566 +
    4.2e+45 * sc[20] * x185 * x228 +
    56240000.0 * ((sc[2]) * (sc[2])) * exp(-1.25 * tc[0]) + sc[2] * x2819 -
    30000000.0 * sc[2] * x765 + 30000000.0 * sc[2] * x773 -
    110000000.0 * sc[2] * x787 + 110000000.0 * sc[2] * x799 +
    70000000.0 * sc[6] * x765 - 70000000.0 * sc[6] * x773 +
    30000000.0 * x102 * x787 - 30000000.0 * x102 * x799 - x1035 * x759 +
    x1035 * x766 + x1052 * x759 - x1052 * x766 - x1053 * x860 - x1855 * x864 +
    x1855 * x875 - x264 * x860 + 3.675e+77 * x38 * x39 + x3808 -
    3.675e+77 * x39 * x7608 -
    x7595 * (12.0 * x249 * x7586 + 1.68 * x249 * x7587) +
    x7604 * (12.0 * x249 * x7586 + 1.68 * x249 * x7587) + x7744 + x787 * x998 -
    x799 * x998 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x864 - x875) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x787 + x799 + (-x240) * (x864 - x875)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875))) +
    (x1053 * x70 + x264 * x70) *
      (-x765 + x773 + (-x118) * (-x787 + x799 + (-x240) * (x864 - x875)) +
       (-x202) *
         (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875))));
  J[318] =
    sc[2] * x2900 + x7748 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x888 - x889) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (x1053 * x70 + x264 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[357] =
    -30000000.0 * sc[2] * x779 + 30000000.0 * sc[2] * x792 -
    110000000.0 * sc[2] * x841 + 110000000.0 * sc[2] * x849 +
    70000000.0 * sc[6] * x779 - 70000000.0 * sc[6] * x792 +
    30000000.0 * x102 * x841 - 30000000.0 * x102 * x849 - x1035 * x838 +
    x1035 * x840 + x1052 * x838 - x1052 * x840 - x1053 * x867 - x1855 * x905 +
    x1855 * x906 - x264 * x867 - x3983 + x4024 + x7677 + x841 * x998 -
    x849 * x998 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x905 - x906) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x841 + x849 + (-x240) * (x905 - x906)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906))) +
    (x1053 * x70 + x264 * x70) *
      (-x779 + x792 + (-x118) * (-x841 + x849 + (-x240) * (x905 - x906)) +
       (-x202) *
         (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906))));
  J[396] =
    sc[2] * x111 + 70000000.0 * sc[2] * x410 - 30000000.0 * sc[2] * x796 +
    30000000.0 * sc[2] * x814 + 110000000.0 * sc[2] * x855 -
    110000000.0 * sc[2] * x865 - sc[6] * x3491 + 70000000.0 * sc[6] * x796 -
    70000000.0 * sc[6] * x814 - 30000000.0 * x102 * x855 +
    30000000.0 * x102 * x865 + x1035 * x195 - x1035 * x862 - x1052 * x195 +
    x1052 * x862 + x1855 * x244 - x1855 * x920 + x4135 + x7678 - x855 * x998 +
    x865 * x998 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (-x244 + x920) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (x855 - x865 + (-x240) * (-x244 + x920)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920))) +
    (x1053 * x70 + x264 * x70) *
      (-x796 + x814 + (-x118) * (x855 - x865 + (-x240) * (-x244 + x920)) +
       (-x202) *
         (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920))));
  J[435] =
    -110000000.0 * sc[2] * x786 - 30000000.0 * sc[2] * x827 +
    30000000.0 * sc[2] * x834 + 110000000.0 * sc[2] * x897 +
    70000000.0 * sc[6] * x827 - 70000000.0 * sc[6] * x834 - x1000 * x1053 -
    x1000 * x264 + 30000000.0 * x102 * x786 - 30000000.0 * x102 * x897 -
    x1035 * x341 + x1035 * x882 + x1052 * x341 - x1052 * x882 - x1855 * x937 +
    x1855 * x938 + x4179 + x4214 + x7666 + x7721 + x786 * x998 - x897 * x998 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x937 - x938) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x786 + x897 + (-x240) * (x937 - x938)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938))) +
    (x1053 * x70 + x264 * x70) *
      (-x827 + x834 + (-x118) * (-x786 + x897 + (-x240) * (x937 - x938)) +
       (-x202) *
         (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938))));
  J[474] =
    30000000.0 * sc[2] * x851 + 110000000.0 * sc[2] * x900 +
    120000000.0 * sc[2] + 15000000.0 * sc[3] * x851 - sc[6] * x3572 -
    70000000.0 * sc[6] * x851 - 30000000.0 * x102 * x900 + x1035 * x883 -
    x1052 * x883 - x1053 * x147 - x147 * x264 - x1855 * x948 + x3425 + x7754 -
    x900 * x998 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (-x889 + x948) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x806 + x900 + (-x240) * (-x889 + x948)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948))) +
    (x1053 * x70 + x264 * x70) *
      (-x738 + x851 + (-x118) * (-x806 + x900 + (-x240) * (-x889 + x948)) +
       (-x202) *
         (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948))));
  J[513] =
    sc[2] * x3055 + 30000000.0 * sc[2] * x861 - 110000000.0 * sc[2] * x904 +
    110000000.0 * sc[2] * x908 + 15000000.0 * sc[3] * x861 -
    20000000.0 * sc[6] * x3516 - 70000000.0 * sc[6] * x861 +
    30000000.0 * x102 * x904 - 30000000.0 * x102 * x908 - x1035 * x886 +
    x1035 * x895 + x1052 * x886 - x1052 * x895 - x1855 * x961 + x1855 * x962 +
    x3425 + 5070000000000000.0 * x503 * x7620 * x7623 + x7685 + x904 * x998 -
    x908 * x998 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x961 - x962) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x904 + x908 + (-x240) * (x961 - x962)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962))) +
    (x1053 * x70 + x264 * x70) *
      (-x738 + x861 + (-x118) * (-x904 + x908 + (-x240) * (x961 - x962)) +
       (-x202) *
         (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962))));
  J[552] =
    30000000.0 * sc[2] * x870 + 110000000.0 * sc[2] * x915 +
    20000000.0 * sc[2] + 15000000.0 * sc[3] * x870 - sc[6] * x3452 -
    70000000.0 * sc[6] * x870 - 30000000.0 * x102 * x915 + x1035 * x896 -
    x1052 * x896 - x1855 * x967 + x3425 + x7685 + x7745 - x915 * x998 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (-x889 + x967) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x806 + x915 + (-x240) * (-x889 + x967)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967))) +
    (x1053 * x70 + x264 * x70) *
      (-x738 + x870 + (-x118) * (-x806 + x915 + (-x240) * (-x889 + x967)) +
       (-x202) *
         (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967))));
  J[591] =
    110000000.0 * sc[2] * x709 + 30000000.0 * sc[2] * x892 +
    15000000.0 * sc[3] * x892 - 70000000.0 * sc[6] * x892 -
    30000000.0 * x102 * x709 + x1035 * x903 - x1052 * x903 - x1855 * x971 +
    x3425 + x4438 - x709 * x998 + x7685 + x7745 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (-x889 + x971) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (x709 - x806 + (-x240) * (-x889 + x971)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971))) +
    (x1053 * x70 + x264 * x70) *
      (-x738 + x892 + (-x118) * (x709 - x806 + (-x240) * (-x889 + x971)) +
       (-x202) *
         (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971))));
  J[630] =
    -30000000.0 * sc[2] * x894 + 30000000.0 * sc[2] * x902 -
    110000000.0 * sc[2] * x926 + 110000000.0 * sc[2] * x931 -
    15000000.0 * sc[3] * x894 + 15000000.0 * sc[3] * x902 +
    70000000.0 * sc[6] * x894 - 70000000.0 * sc[6] * x902 +
    30000000.0 * x102 * x926 - 30000000.0 * x102 * x931 - x1035 * x912 +
    x1035 * x913 + x1052 * x912 - x1052 * x913 - x1053 * x987 - x1855 * x572 +
    x1855 * x659 + 1.05e+45 * x191 - x264 * x987 + 9.1875e+76 * x38 * x39 -
    9.1875e+76 * x39 * x7608 -
    x7595 * (3.0 * x249 * x7586 + 0.42 * x249 * x7587) - 1.05e+45 * x7600 +
    x7604 * (3.0 * x249 * x7586 + 0.42 * x249 * x7587) + x7666 + x7777 +
    x926 * x998 - x931 * x998 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x572 - x659) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x926 + x931 + (-x240) * (x572 - x659)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659))) +
    (x1053 * x70 + x264 * x70) *
      (-x894 + x902 + (-x118) * (-x926 + x931 + (-x240) * (x572 - x659)) +
       (-x202) *
         (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659))));
  J[669] =
    -550000000.0 * refC * sc[6] * exp(-2.0 * tc[0] + x1024) +
    550000000.0 * ((sc[2]) * (sc[2])) * x2508 + 30000000.0 * sc[2] * x135 -
    30000000.0 * sc[2] * x910 - 110000000.0 * sc[2] * x936 +
    110000000.0 * sc[2] * x947 + 15000000.0 * sc[3] * x135 -
    15000000.0 * sc[3] * x910 - 70000000.0 * sc[6] * x135 +
    70000000.0 * sc[6] * x910 + 30000000.0 * x102 * x936 -
    30000000.0 * x102 * x947 - x1035 * x510 + x1035 * x928 + x1052 * x510 -
    x1052 * x928 - x1053 * x821 + x1855 * x832 - x1855 * x837 - x264 * x821 +
    x7721 + x936 * x998 - x947 * x998 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (-x832 + x837) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x936 + x947 + (-x240) * (-x832 + x837)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837))) +
    (x1053 * x70 + x264 * x70) *
      (x135 - x910 + (-x118) * (-x936 + x947 + (-x240) * (-x832 + x837)) +
       (-x202) *
         (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837))));
  J[708] =
    -30000000.0 * sc[2] * x911 + 30000000.0 * sc[2] * x917 -
    110000000.0 * sc[2] * x949 + 110000000.0 * sc[2] * x956 - sc[6] * x3563 -
    32000000.0 * sc[6] * x492 + 70000000.0 * sc[6] * x911 -
    70000000.0 * sc[6] * x917 + 30000000.0 * x102 * x949 -
    30000000.0 * x102 * x956 + x1035 * x878 - x1035 * x929 - x1037 * x1855 +
    x1038 * x1855 - x1052 * x878 + x1052 * x929 - x1053 * x384 - x264 * x384 +
    x4812 + x7677 + x949 * x998 - x956 * x998 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x1037 - x1038) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038))) +
    (x1053 * x70 + x264 * x70) *
      (-x911 + x917 + (-x118) * (-x949 + x956 + (-x240) * (x1037 - x1038)) +
       (-x202) *
         (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038))));
  J[747] =
    110000000.0 * sc[2] * x563 + 30000000.0 * sc[2] * x922 +
    150000000.0 * sc[2] + 15000000.0 * sc[3] * x922 - sc[6] * x2 -
    70000000.0 * sc[6] * x922 - 30000000.0 * x102 * x563 + x1035 * x189 -
    x1044 * x1855 - x1052 * x189 - x1053 * x824 - x264 * x824 + x3425 -
    x563 * x998 + x7754 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x1044 - x889) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (x563 - x806 + (-x240) * (x1044 - x889)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889))) +
    (x1053 * x70 + x264 * x70) *
      (-x738 + x922 + (-x118) * (x563 - x806 + (-x240) * (x1044 - x889)) +
       (-x202) *
         (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889))));
  J[786] =
    -30000000.0 * sc[2] * x925 + 30000000.0 * sc[2] * x934 -
    110000000.0 * sc[2] * x966 + 110000000.0 * sc[2] * x970 - sc[6] * x3455 +
    70000000.0 * sc[6] * x925 - 70000000.0 * sc[6] * x934 +
    30000000.0 * x102 * x966 - 30000000.0 * x102 * x970 - x1035 * x705 +
    x1035 * x935 + x1052 * x705 - x1052 * x935 - x1053 * x42 - x1059 * x1855 +
    x1060 * x1855 + 7.0e+44 * x185 * x228 * x35 - x264 * x42 + x4974 + x4996 +
    x7677 + x966 * x998 - x970 * x998 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x1059 - x1060) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060))) +
    (x1053 * x70 + x264 * x70) *
      (-x925 + x934 + (-x118) * (-x966 + x970 + (-x240) * (x1059 - x1060)) +
       (-x202) *
         (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060))));
  J[825] =
    30000000.0 * sc[2] * x941 + 110000000.0 * sc[2] * x977 + 2000000.0 * sc[2] +
    15000000.0 * sc[3] * x941 - sc[6] * x3447 - 70000000.0 * sc[6] * x941 -
    30000000.0 * x102 * x977 + x1035 * x884 - x1052 * x884 - x1064 * x1855 +
    x3425 + x7685 + x7745 - x977 * x998 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x1064 - x889) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889))) +
    (x1053 * x70 + x264 * x70) *
      (-x738 + x941 + (-x118) * (-x806 + x977 + (-x240) * (x1064 - x889)) +
       (-x202) *
         (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889))));
  J[864] =
    110000000.0 * sc[2] * x256 - 30000000.0 * sc[2] * x477 +
    30000000.0 * sc[2] * x952 - 110000000.0 * sc[2] * x992 +
    70000000.0 * sc[6] * x477 - 70000000.0 * sc[6] * x952 -
    30000000.0 * x102 * x256 + 30000000.0 * x102 * x992 + x1035 * x365 -
    x1035 * x944 - x1052 * x365 + x1052 * x944 - x1053 * x58 - x1855 * x214 +
    x1855 * x216 + 2.1e+45 * x191 - x256 * x998 - x264 * x58 +
    1.8375e+77 * x38 * x39 - 1.8375e+77 * x39 * x7608 + x5060 + x5135 -
    x7595 * (6.0 * x249 * x7586 + 0.84 * x249 * x7587) - 2.1e+45 * x7600 +
    x7604 * (6.0 * x249 * x7586 + 0.84 * x249 * x7587) + x7666 + x7803 +
    x992 * x998 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x214 - x216) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (x256 - x992 + (-x240) * (x214 - x216)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216))) +
    (x1053 * x70 + x264 * x70) *
      (-x477 + x952 + (-x118) * (x256 - x992 + (-x240) * (x214 - x216)) +
       (-x202) *
         (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216))));
  J[903] =
    110000000.0 * sc[2] * x1014 - 110000000.0 * sc[2] * x805 +
    30000000.0 * sc[2] * x958 + 15000000.0 * sc[3] * x958 -
    50000000.0 * sc[6] * x3539 - 70000000.0 * sc[6] * x958 -
    30000000.0 * x1014 * x102 - x1014 * x998 + 30000000.0 * x102 * x805 -
    x1035 * x350 + x1035 * x355 + x1052 * x350 - x1052 * x355 - x1855 * x285 +
    x1855 * x294 + x3425 + x7685 + x805 * x998 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x285 - x294) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (x1014 - x805 + (-x240) * (x285 - x294)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294))) +
    (x1053 * x70 + x264 * x70) *
      (-x738 + x958 + (-x118) * (x1014 - x805 + (-x240) * (x285 - x294)) +
       (-x202) *
         (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294))));
  J[942] =
    50000000.0 * sc[2] * x2987 + 110000000.0 * sc[2] * x831 +
    30000000.0 * sc[2] * x959 + 15000000.0 * sc[3] * x959 -
    20000000.0 * sc[6] * x3440 - 70000000.0 * sc[6] * x959 -
    30000000.0 * x102 * x831 + x1035 * x363 - x1052 * x363 - x1053 * x617 -
    x1855 * x306 - x264 * x617 + x3425 + x7754 - x831 * x998 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x306 - x889) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x806 + x831 + (-x240) * (x306 - x889)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889))) +
    (x1053 * x70 + x264 * x70) *
      (-x738 + x959 + (-x118) * (-x806 + x831 + (-x240) * (x306 - x889)) +
       (-x202) *
         (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889))));
  J[981] =
    20000000.0 * sc[2] * x3102 + x7748 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x888 - x889) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (x1053 * x70 + x264 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1020] =
    x7748 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x888 - x889) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (x1053 * x70 + x264 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1059] =
    110000000.0 * sc[2] * x1028 - sc[6] * x3501 - 30000000.0 * x102 * x1028 -
    x1028 * x998 - x1855 * x309 + x7747 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x309 - x889) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (x1028 - x806 + (-x240) * (x309 - x889)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889))) +
    (x1053 * x70 + x264 * x70) *
      (x744 + (-x118) * (x1028 - x806 + (-x240) * (x309 - x889)) +
       (-x202) * (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889))));
  J[1098] =
    110000000.0 * sc[2] * x691 + 30000000.0 * sc[2] * x963 +
    18000000.0 * sc[2] + 15000000.0 * sc[3] * x963 - sc[6] * x3450 -
    70000000.0 * sc[6] * x963 - 30000000.0 * x102 * x691 + x1035 * x366 -
    x1052 * x366 - x1855 * x326 + x3425 - x691 * x998 + x7685 + x7745 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x326 - x889) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (x691 - x806 + (-x240) * (x326 - x889)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889))) +
    (x1053 * x70 + x264 * x70) *
      (-x738 + x963 + (-x118) * (x691 - x806 + (-x240) * (x326 - x889)) +
       (-x202) *
         (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889))));
  J[1137] =
    -sc[6] * x3442 + x5405 + x7748 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x888 - x889) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (x1053 * x70 + x264 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1176] =
    1800000.0 * sc[2] + x7748 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x888 - x889) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (x1053 * x70 + x264 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1215] =
    x7748 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x888 - x889) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (x1053 * x70 + x264 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1254] =
    110000000.0 * sc[2] * x1043 - 30000000.0 * x102 * x1043 - x1043 * x998 -
    x176 * x1855 + x7747 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x176 - x889) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (x1043 - x806 + (-x240) * (x176 - x889)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889))) +
    (x1053 * x70 + x264 * x70) *
      (x744 + (-x118) * (x1043 - x806 + (-x240) * (x176 - x889)) +
       (-x202) * (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889))));
  J[1293] =
    x7748 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x888 - x889) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (x1053 * x70 + x264 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1332] =
    110000000.0 * sc[2] * x1045 + 30000000.0 * sc[2] * x968 +
    15000000.0 * sc[3] * x968 - 70000000.0 * sc[6] * x968 -
    30000000.0 * x102 * x1045 + x1035 * x367 - x1045 * x998 - x1052 * x367 -
    x152 * x1855 + x3425 + x7685 + x7745 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x152 - x889) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (x1045 - x806 + (-x240) * (x152 - x889)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889))) +
    (x1053 * x70 + x264 * x70) *
      (-x738 + x968 + (-x118) * (x1045 - x806 + (-x240) * (x152 - x889)) +
       (-x202) *
         (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889))));
  J[1371] =
    110000000.0 * sc[2] * x232 + 30000000.0 * sc[2] * x983 +
    15000000.0 * sc[3] * x983 - 70000000.0 * sc[6] * x983 -
    30000000.0 * x102 * x232 + x1035 * x543 - x1052 * x543 - x1855 * x353 -
    x232 * x998 + x3425 + x5510 + x7685 + x7745 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x353 - x889) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (x232 - x806 + (-x240) * (x353 - x889)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889))) +
    (x1053 * x70 + x264 * x70) *
      (-x738 + x983 + (-x118) * (x232 - x806 + (-x240) * (x353 - x889)) +
       (-x202) *
         (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889))));
  J[1410] =
    110000000.0 * sc[2] * x291 - sc[6] * x3473 - 30000000.0 * x102 * x291 -
    x1855 * x357 - x291 * x998 + x7747 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x357 - x889) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (x291 - x806 + (-x240) * (x357 - x889)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889))) +
    (x1053 * x70 + x264 * x70) *
      (x744 + (-x118) * (x291 - x806 + (-x240) * (x357 - x889)) +
       (-x202) * (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889))));
  J[1449] =
    x7748 +
    (-110000000.0 * sc[2] * x240 + 30000000.0 * x102 * x240 + x240 * x998) *
      (x888 - x889) +
    (-30000000.0 * sc[2] * x118 - 15000000.0 * sc[3] * x118 +
     70000000.0 * sc[6] * x118 + x1035 * x241 - x1052 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-30000000.0 * sc[2] * x202 - 15000000.0 * sc[3] * x202 +
     70000000.0 * sc[6] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (x1053 * x70 + x264 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[7] =
    12000000.0 * sc[9] * x289 - 12000000.0 * sc[9] * x315 - x1041 * x289 +
    x1041 * x315 + 16720000000.0 * x2510 - 16720000000.0 * x2513 - x266 * x29 -
    x266 * x991 + x281 * x359 - x281 * x368 - x289 * x296 - x289 * x302 +
    x29 * x376 + x296 * x315 + x302 * x315 - x359 * x60 + x368 * x60 +
    x376 * x991 + x7836 + (x240 * x29 + x240 * x991) * (x647 - x669) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (x266 - x376 + (-x240) * (x647 - x669)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669)));
  J[46] =
    -12000000.0 * sc[9] * x620 + 12000000.0 * sc[9] * x670 + x1041 * x620 -
    x1041 * x670 + x281 * x347 - x281 * x689 + x29 * x374 - x29 * x693 +
    x296 * x620 - x296 * x670 + x302 * x620 - x302 * x670 - x347 * x60 +
    x374 * x991 + x60 * x689 - x693 * x991 + x7840 +
    (x240 * x29 + x240 * x991) * (x713 - x715) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x374 + x693 + (-x240) * (x713 - x715)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715)));
  J[85] =
    sc[13] * x3049 + 16000000.0 * sc[14] + sc[4] * x2508 * x3079 +
    sc[5] * x2915 - sc[7] * x2819 + sc[8] * x2903 - 12000000.0 * sc[9] * x678 +
    12000000.0 * sc[9] * x703 + x1041 * x678 - x1041 * x703 - x281 * x688 +
    x281 * x690 + 5000.0 * x2869 + x29 * x712 - x29 * x716 + x296 * x678 -
    x296 * x703 + x302 * x678 - x302 * x703 + x60 * x688 - x60 * x690 +
    x712 * x991 - x716 * x991 + x7840 +
    (x240 * x29 + x240 * x991) * (x734 - x735) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x712 + x716 + (-x240) * (x734 - x735)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735)));
  J[124] =
    -sc[7] * x473 - 0.03973 * sc[7] * x5817 - 16000000.0 * sc[7] * x719 * x77 -
    12000000.0 * sc[9] * x717 + 12000000.0 * sc[9] * x719 + x1041 * x717 -
    x125 * x281 + x125 * x60 + x281 * x710 - x29 * x721 + x29 * x725 +
    x296 * x717 - x296 * x719 + x302 * x717 - x302 * x719 - x60 * x710 -
    x721 * x991 + x725 * x991 + x7840 +
    (x240 * x29 + x240 * x991) * (x747 - x748) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (x721 - x725 + (-x240) * (x747 - x748)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748)));
  J[163] =
    sc[10] * x6812 + 25010000.0 * sc[10] + 30200000.0 * sc[12] +
    5000000.0 * sc[14] + sc[15] * x6700 + 30110000.0 * sc[19] + sc[20] * x6789 +
    7500000.0 * sc[24] * x6721 + 10000000.0 * sc[25] * x6721 +
    6000000.0 * sc[28] + sc[29] * x6696 + sc[2] * x2508 * x3079 +
    24000000.0 * sc[30] + sc[35] * x6677 + sc[5] * x6767 + sc[5] * x6770 +
    sc[5] * x6773 + sc[5] * x6776 + sc[5] * x6779 - sc[7] * x3227 +
    sc[8] * x6728 + sc[8] * x6731 - 12000000.0 * sc[9] * x730 +
    12000000.0 * sc[9] * x737 + x1041 * x730 - x1041 * x737 + x171 * x281 -
    x171 * x60 + 11.3 * x200 * exp(-1509.64999741416 * invT + 2.0 * tc[0]) -
    x281 * x732 + x29 * x736 - x29 * x743 + x296 * x730 - x296 * x737 +
    x302 * x730 - x302 * x737 + x3234 + 0.07946 * x5866 + x60 * x732 + x6684 +
    x6688 + x6796 + x736 * x991 - x743 * x991 + x7840 +
    (x240 * x29 + x240 * x991) * (x768 - x770) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x736 + x743 + (-x240) * (x768 - x770)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770)));
  J[202] =
    sc[2] * x2915 - sc[7] * x6840 - sc[7] * x6842 + x281 * x740 - x281 * x741 +
    x29 * x746 - x29 * x757 - x60 * x740 + x60 * x741 + x746 * x991 -
    x757 * x991 + x7850 + x7852 + x7853 +
    (x240 * x29 + x240 * x991) * (x800 - x801) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x746 + x757 + (-x240) * (x800 - x801)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801)));
  J[241] =
    -12000000.0 * sc[9] * x754 + 12000000.0 * sc[9] * x756 + x1041 * x754 -
    x1041 * x756 + 88000000000.0 * x2510 - 88000000000.0 * x2513 + x281 * x745 -
    x281 * x758 - x29 * x761 + x29 * x762 + x296 * x754 - x296 * x756 +
    x302 * x754 - x302 * x756 + x3457 - x60 * x745 + x60 * x758 - x761 * x991 +
    x762 * x991 + x7866 + (x240 * x29 + x240 * x991) * (x842 - x844) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (x761 - x762 + (-x240) * (x842 - x844)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844)));
  J[280] =
    -sc[10] * x6907 - sc[12] * x85 - sc[13] * x6915 - 6.3 * sc[14] * x6917 -
    12000000.0 * sc[16] * x434 - sc[16] * x6953 - sc[18] * x6919 -
    sc[19] * x3729 - sc[19] * x6921 - sc[21] * x6905 - sc[23] * x6913 -
    sc[24] * x6900 - sc[27] * x6909 - sc[28] * x6911 - sc[29] * x6903 -
    sc[2] * x2819 - sc[36] * x6927 - sc[3] * x473 - 0.03973 * sc[3] * x5817 -
    sc[4] * x3227 - sc[5] * x6840 - sc[5] * x6842 - 12000000.0 * sc[9] * x765 +
    12000000.0 * sc[9] * x773 + x1041 * x765 - x1041 * x773 +
    1.62e+27 * x114 * x429 * x607 - x114 * x6 * x94 - x161 * x226 -
    x169 * x200 - 5710000.0 * x226 * exp(379.92858268256299 * invT) +
    277200000000.0 * x2510 - x2512 * x3079 - 277200000000.0 * x2513 +
    x281 * x759 - x281 * x766 + 2.187e+46 * x284 * x6 * x92 + x29 * x787 -
    x29 * x799 + x296 * x765 - x296 * x773 + x302 * x765 - x302 * x773 -
    16000000.0 * x6 * x77 - 25010000.0 * x6 * x87 - x60 * x759 + x60 * x766 -
    2.187e+46 * x606 * x92 - 1.62e+27 * x7818 * x91 + x7820 * x7880 -
    x7826 * x7880 + x787 * x991 + x7892 - x799 * x991 +
    (x240 * x29 + x240 * x991) * (x864 - x875) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x787 + x799 + (-x240) * (x864 - x875)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875)));
  J[319] =
    sc[2] * x2903 + sc[4] * x6728 + sc[4] * x6731 + x7897 +
    (x240 * x29 + x240 * x991) * (x888 - x889) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[358] =
    -12000000.0 * sc[9] * x779 + 12000000.0 * sc[9] * x792 + x1041 * x779 -
    x1041 * x792 + x281 * x838 - x281 * x840 + x29 * x841 - x29 * x849 +
    x296 * x779 - x296 * x792 + x302 * x779 - x302 * x792 + 12000000.0 * x6 -
    x60 * x838 + x60 * x840 + x7840 + x7901 + x841 * x991 - x849 * x991 +
    (x240 * x29 + x240 * x991) * (x905 - x906) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x841 + x849 + (-x240) * (x905 - x906)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906)));
  J[397] =
    sc[4] * x6812 + 25010000.0 * sc[4] - sc[7] * x6907 -
    16000000.0 * sc[7] * x77 * x814 - 12000000.0 * sc[9] * x796 +
    12000000.0 * sc[9] * x814 + x1041 * x796 - x195 * x281 + x195 * x60 +
    x281 * x862 - x29 * x855 + x29 * x865 + x296 * x796 - x296 * x814 +
    x302 * x796 - x302 * x814 - x60 * x862 + x7840 - x855 * x991 + x865 * x991 +
    (x240 * x29 + x240 * x991) * (-x244 + x920) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (x855 - x865 + (-x240) * (-x244 + x920)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920)));
  J[436] =
    -12000000.0 * sc[9] * x827 + 12000000.0 * sc[9] * x834 + x1041 * x827 -
    x1041 * x834 + 44000000000.0 * x2510 - 44000000000.0 * x2513 + x281 * x341 -
    x281 * x882 + x29 * x786 - x29 * x897 + x296 * x827 - x296 * x834 +
    x302 * x827 - x302 * x834 - x341 * x60 + x60 * x882 + x7071 + x786 * x991 +
    x7866 - x897 * x991 + (x240 * x29 + x240 * x991) * (x937 - x938) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x786 + x897 + (-x240) * (x937 - x938)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938)));
  J[475] =
    30200000.0 * sc[4] - sc[7] * x85 + 12000000.0 * sc[9] * x851 -
    x1041 * x851 - x281 * x883 - x29 * x900 - x296 * x851 - x302 * x851 +
    x60 * x883 + x7895 - x900 * x991 +
    (x240 * x29 + x240 * x991) * (-x889 + x948) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x806 + x900 + (-x240) * (-x889 + x948)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948)));
  J[514] =
    sc[2] * x3049 - sc[7] * x6915 + 12000000.0 * sc[9] * x861 - x1041 * x861 +
    x281 * x886 - x281 * x895 + x29 * x904 - x29 * x908 - x296 * x861 -
    x302 * x861 - x60 * x886 + x60 * x895 + x7121 - x7541 + x7850 +
    x904 * x991 - x908 * x991 + (x240 * x29 + x240 * x991) * (x961 - x962) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x904 + x908 + (-x240) * (x961 - x962)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962)));
  J[553] =
    16000000.0 * sc[2] + 5000000.0 * sc[4] - 6.3 * sc[7] * x6917 +
    12000000.0 * sc[9] * x870 - x1041 * x870 - x281 * x896 - x29 * x915 -
    x296 * x870 - x302 * x870 + x60 * x896 + x7895 - x915 * x991 +
    (x240 * x29 + x240 * x991) * (-x889 + x967) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x806 + x915 + (-x240) * (-x889 + x967)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967)));
  J[592] =
    sc[4] * x6700 + 12000000.0 * sc[9] * x892 - x1041 * x892 - x281 * x903 -
    x29 * x709 - x296 * x892 - x302 * x892 + x60 * x903 - x709 * x991 + x7824 +
    x7895 + (x240 * x29 + x240 * x991) * (-x889 + x971) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (x709 - x806 + (-x240) * (-x889 + x971)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971)));
  J[631] =
    -12000000.0 * sc[7] * x434 - sc[7] * x6953 - 12000000.0 * sc[9] * x894 +
    12000000.0 * sc[9] * x902 + x1041 * x894 - x1041 * x902 +
    4.05e+26 * x114 * x429 * x607 + 77000000000.0 * x2510 -
    77000000000.0 * x2513 + x281 * x912 - x281 * x913 + x29 * x926 -
    x29 * x931 + x296 * x894 - x296 * x902 + x302 * x894 - x302 * x902 -
    x60 * x912 + x60 * x913 - 5.4675e+45 * x606 * x92 - 4.05e+26 * x7818 * x91 +
    x7820 * x7917 - x7826 * x7917 + x926 * x991 - x931 * x991 +
    5.4675e+45 * x97 + (x240 * x29 + x240 * x991) * (x572 - x659) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x926 + x931 + (-x240) * (x572 - x659)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659)));
  J[670] =
    12000000.0 * sc[9] * x135 - 12000000.0 * sc[9] * x910 - x1041 * x135 +
    x1041 * x910 - x135 * x296 - x135 * x302 + 158400000000.0 * x2510 -
    158400000000.0 * x2513 + x281 * x510 - x281 * x928 + x29 * x936 -
    x29 * x947 + x296 * x910 + x302 * x910 - x510 * x60 + x60 * x928 + x7866 +
    x936 * x991 - x947 * x991 + (x240 * x29 + x240 * x991) * (-x832 + x837) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x936 + x947 + (-x240) * (-x832 + x837)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837)));
  J[709] =
    -sc[7] * x6919 - 12000000.0 * sc[9] * x911 + 12000000.0 * sc[9] * x917 +
    x1041 * x911 - x1041 * x917 - x281 * x878 + x281 * x929 + x29 * x949 -
    x29 * x956 + x296 * x911 - x296 * x917 + x302 * x911 - x302 * x917 +
    x60 * x878 - x60 * x929 + x7840 + x949 * x991 - x956 * x991 +
    (x240 * x29 + x240 * x991) * (x1037 - x1038) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038)));
  J[748] =
    30110000.0 * sc[4] - sc[7] * x3729 - sc[7] * x6921 +
    12000000.0 * sc[9] * x922 - x1041 * x922 - x189 * x281 + x189 * x60 -
    x29 * x563 - x296 * x922 - x302 * x922 - x563 * x991 + x7895 +
    (x240 * x29 + x240 * x991) * (x1044 - x889) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (x563 - x806 + (-x240) * (x1044 - x889)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889)));
  J[787] =
    sc[4] * x6789 - 12000000.0 * sc[9] * x925 + 12000000.0 * sc[9] * x934 +
    x1041 * x925 - x1041 * x934 + x281 * x705 - x281 * x935 + x29 * x966 -
    x29 * x970 + x296 * x925 - x296 * x934 + x302 * x925 - x302 * x934 -
    x60 * x705 + x60 * x935 + x7840 + x966 * x991 - x970 * x991 +
    (x240 * x29 + x240 * x991) * (x1059 - x1060) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060)));
  J[826] =
    -sc[7] * x6905 + 12000000.0 * sc[9] * x941 - x1041 * x941 - x281 * x884 -
    x29 * x977 - x296 * x941 - x302 * x941 + x60 * x884 + x7895 - x977 * x991 +
    (x240 * x29 + x240 * x991) * (x1064 - x889) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889)));
  J[865] =
    -12000000.0 * sc[9] * x477 + 12000000.0 * sc[9] * x952 + x1041 * x477 -
    x1041 * x952 + 8.1e+26 * x114 * x429 * x607 + 44000000000.0 * x2510 -
    44000000000.0 * x2513 - x256 * x29 - x256 * x991 - x281 * x365 +
    x281 * x944 + x29 * x992 + x296 * x477 - x296 * x952 + x302 * x477 -
    x302 * x952 + x365 * x60 - x60 * x944 - 1.0935e+46 * x606 * x92 + x7280 -
    8.1e+26 * x7818 * x91 + x7820 * x808 - x7826 * x808 + 1.0935e+46 * x97 +
    x991 * x992 + (x240 * x29 + x240 * x991) * (x214 - x216) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (x256 - x992 + (-x240) * (x214 - x216)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216)));
  J[904] =
    -sc[7] * x6913 + 12000000.0 * sc[9] * x958 - x1014 * x29 - x1014 * x991 -
    x1041 * x958 + x281 * x350 - x281 * x355 + x29 * x805 - x296 * x958 -
    x302 * x958 - x350 * x60 + x355 * x60 + x7850 + x805 * x991 +
    (x240 * x29 + x240 * x991) * (x285 - x294) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (x1014 - x805 + (-x240) * (x285 - x294)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294)));
  J[943] =
    7500000.0 * sc[4] * x6721 - sc[7] * x6900 + 12000000.0 * sc[9] * x959 -
    x1041 * x959 - x281 * x363 - x29 * x831 - x296 * x959 - x302 * x959 +
    x363 * x60 + x7895 - x831 * x991 +
    (x240 * x29 + x240 * x991) * (x306 - x889) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x806 + x831 + (-x240) * (x306 - x889)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889)));
  J[982] =
    10000000.0 * sc[4] * x6721 + x7897 +
    (x240 * x29 + x240 * x991) * (x888 - x889) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1021] =
    5000.0 * x5335 + x7897 + (x240 * x29 + x240 * x991) * (x888 - x889) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1060] =
    -sc[7] * x6909 - x1028 * x29 - x1028 * x991 + x7896 +
    (x240 * x29 + x240 * x991) * (x309 - x889) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (x1028 - x806 + (-x240) * (x309 - x889)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889)));
  J[1099] =
    6000000.0 * sc[4] - sc[7] * x6911 + 12000000.0 * sc[9] * x963 -
    x1041 * x963 - x281 * x366 - x29 * x691 - x296 * x963 - x302 * x963 +
    x366 * x60 - x691 * x991 + x7895 +
    (x240 * x29 + x240 * x991) * (x326 - x889) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (x691 - x806 + (-x240) * (x326 - x889)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889)));
  J[1138] =
    sc[4] * x6696 - sc[7] * x6903 + x7897 +
    (x240 * x29 + x240 * x991) * (x888 - x889) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1177] =
    24000000.0 * sc[4] + x7897 + (x240 * x29 + x240 * x991) * (x888 - x889) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1216] =
    x7897 + (x240 * x29 + x240 * x991) * (x888 - x889) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1255] =
    -x1043 * x29 - x1043 * x991 + x7896 +
    (x240 * x29 + x240 * x991) * (x176 - x889) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (x1043 - x806 + (-x240) * (x176 - x889)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889)));
  J[1294] =
    x7897 + (x240 * x29 + x240 * x991) * (x888 - x889) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1333] =
    12000000.0 * sc[9] * x968 - x1041 * x968 - x1045 * x29 - x1045 * x991 -
    x281 * x367 - x296 * x968 - x302 * x968 + x367 * x60 + x7895 +
    (x240 * x29 + x240 * x991) * (x152 - x889) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (x1045 - x806 + (-x240) * (x152 - x889)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889)));
  J[1372] =
    sc[4] * x6677 + 12000000.0 * sc[9] * x983 - x1041 * x983 - x232 * x29 -
    x232 * x991 - x281 * x543 - x296 * x983 - x302 * x983 + x543 * x60 + x7895 +
    (x240 * x29 + x240 * x991) * (x353 - x889) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (x232 - x806 + (-x240) * (x353 - x889)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889)));
  J[1411] =
    -sc[7] * x6927 - x29 * x291 - x291 * x991 + x7896 +
    (x240 * x29 + x240 * x991) * (x357 - x889) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (x291 - x806 + (-x240) * (x357 - x889)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889)));
  J[1450] =
    x7583 + x7897 + (x240 * x29 + x240 * x991) * (x888 - x889) +
    (-12000000.0 * sc[9] * x118 + x1041 * x118 + x118 * x296 + x118 * x302 -
     x241 * x281 + x241 * x60) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-12000000.0 * sc[9] * x202 + x1041 * x202 + x202 * x296 + x202 * x302) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[8] = -x223 * (0.196 * x6526 + 1.4 * x6528) +
         x269 * (0.196 * x6526 + 1.4 * x6528) + 254.781081081081 * x6518 -
         140700.0 * x6522 - 254.781081081081 * x6535 + 140700.0 * x6537;
  J[47] = x2823;
  J[86] = -sc[8] * x2900 - sc[8] * x2903 + x2823;
  J[125] = -sc[8] * x5726 + x2823;
  J[164] = 402000.0 * sc[4] * x32 * x6504 + sc[5] * x5847 + sc[7] * x3227 -
           sc[8] * x6728 - sc[8] * x6731 + x2823;
  J[203] = sc[11] * x7429 + 1000000.0 * sc[13] * x2987 + sc[20] * x666 +
           sc[22] * x7425 + sc[4] * x5847 + sc[6] * x3340 + sc[7] * x6840 +
           sc[7] * x6842 + x2823 + x6509 + x7456;
  J[242] = sc[5] * x3340 - x223 * (0.56 * x6526 + 4.0 * x6528) +
           x269 * (0.56 * x6526 + 4.0 * x6528) + 727.94594594594605 * x6518 -
           402000.0 * x6522 - 727.94594594594605 * x6535 + 402000.0 * x6537;
  J[281] = sc[4] * x3227 + sc[5] * x6840 + sc[5] * x6842 -
           x223 * (1.68 * x6526 + 12.0 * x6528) +
           x269 * (1.68 * x6526 + 12.0 * x6528) + 2183.8378378378402 * x6518 -
           1206000.0 * x6522 - 2183.8378378378402 * x6535 + 1206000.0 * x6537;
  J[320] = -201000.0 * refC * x32 * x6521 - sc[12] * x7493 - sc[20] * x7491 -
           sc[28] * x7489 - sc[2] * x2900 - sc[2] * x2903 - sc[3] * x5726 -
           sc[4] * x6728 - sc[4] * x6731 - 365800000.0 * sc[9] * x7498 -
           130000.0 * sc[9] * x7500 + x2823 - x7485 - x7487 - x7496;
  J[359] = -365800000.0 * sc[8] * x7498 - 130000.0 * sc[8] * x7500 + x2823;
  J[398] = x2823 - x7531;
  J[437] = sc[5] * x7429 + x2823;
  J[476] = -sc[8] * x7493 + x2823;
  J[515] = 1000000.0 * sc[5] * x2987 + x2823;
  J[554] = x2823;
  J[593] = x2823;
  J[632] = -x223 * (0.49 * x6526 + 3.5 * x6528) +
           x269 * (0.49 * x6526 + 3.5 * x6528) + 636.95270270270305 * x6518 -
           351750.0 * x6522 - 636.95270270270305 * x6535 + 351750.0 * x6537;
  J[671] = -x223 * (1.008 * x6526 + 7.2 * x6528) +
           x269 * (1.008 * x6526 + 7.2 * x6528) + 1310.3027027026999 * x6518 -
           723600.0 * x6522 - 1310.3027027026999 * x6535 + 723600.0 * x6537;
  J[710] = x2823;
  J[749] = x2823 - x7554;
  J[788] = sc[5] * x666 - sc[8] * x7491 + x2823;
  J[827] = 300000.0 * sc[5] + x2823 - x7564;
  J[866] = sc[5] * x7425 + x2823;
  J[905] = x2823;
  J[944] = x2823;
  J[983] = x2823;
  J[1022] = x2823;
  J[1061] = x2823;
  J[1100] = -sc[8] * x7489 + x2823;
  J[1139] = x2823 + x7577;
  J[1178] = x2823;
  J[1217] = x2823;
  J[1256] = x2823;
  J[1295] = x2823;
  J[1334] = x2823;
  J[1373] = x2823;
  J[1412] = x2823;
  J[1451] = x2823;
  J[9] =
    -33000000.0 * sc[9] * x266 - 40000000.0 * sc[9] * x289 -
    10000000.0 * sc[9] * x311 + 40000000.0 * sc[9] * x315 +
    33000000.0 * sc[9] * x376 + 2730000.0 * sc[9] * x5607 +
    13240000.0 * x1011 * x359 - 13240000.0 * x1011 * x368 + x2333 -
    6300.0 * x5574 - 6300.0 * x5576 - 99600.0 * x5589 + 99600.0 * x5590 +
    2730000.0 * x5604 - x5625 * x647 + x5625 * x669 - 1400000.0 * x6505 -
    1400000.0 * x7861 + x8003 + (33000000.0 * sc[9] * x240) * (x647 - x669) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (x266 - x376 + (-x240) * (x647 - x669)) +
    (40000000.0 * sc[9] * x202) *
      (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669))) +
    (10000000.0 * sc[9] * x70) *
      (x289 - x315 + (-x118) * (x266 - x376 + (-x240) * (x647 - x669)) +
       (-x202) *
         (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669))));
  J[48] = 33000000.0 * sc[9] * x374 + 40000000.0 * sc[9] * x620 -
          40000000.0 * sc[9] * x670 - 33000000.0 * sc[9] * x693 +
          13240000.0 * x1011 * x347 - 13240000.0 * x1011 * x689 - x279 * x5650 +
          x279 * x5662 - x279 * x8030 - x5625 * x713 + x5625 * x715 + x8006 +
          x8032 + x8038 + (33000000.0 * sc[9] * x240) * (x713 - x715) +
          (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
            (-x374 + x693 + (-x240) * (x713 - x715)) +
          (40000000.0 * sc[9] * x202) *
            (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715))) +
          (10000000.0 * sc[9] * x70) *
            (-x620 + x670 + (-x118) * (-x374 + x693 + (-x240) * (x713 - x715)) +
             (-x202) * (-x347 + x689 +
                        (x241) * (-x374 + x693 + (-x240) * (x713 - x715))));
  J[87] =
    5280000.0 * sc[17] * sc[2] * x2838 + 28000000.0 * sc[4] * x421 * x423 +
    sc[5] * x2918 - sc[9] * x2315 * x2324 + 40000000.0 * sc[9] * x678 -
    40000000.0 * sc[9] * x703 + 33000000.0 * sc[9] * x712 -
    33000000.0 * sc[9] * x716 - 10000000.0 * sc[9] * x989 -
    13240000.0 * x1011 * x688 + 13240000.0 * x1011 * x690 - x3032 -
    x54 * x5650 + x54 * x5662 - x54 * x8030 - x5625 * x734 + x5625 * x735 +
    x5650 * x619 - x5662 * x619 + x619 * x8030 + x8036 +
    (33000000.0 * sc[9] * x240) * (x734 - x735) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x712 + x716 + (-x240) * (x734 - x735)) +
    (40000000.0 * sc[9] * x202) *
      (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735))) +
    (10000000.0 * sc[9] * x70) *
      (-x678 + x703 + (-x118) * (-x712 + x716 + (-x240) * (x734 - x735)) +
       (-x202) *
         (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735))));
  J[126] =
    33000000.0 * sc[12] * x551 + sc[14] * x5806 + sc[16] * x549 +
    sc[17] * x5759 + sc[25] * x5731 + sc[33] * x5791 + 36000000.0 * sc[37] +
    240000.0 * sc[3] * x5776 * x818 + sc[4] * x3130 + 40000000.0 * sc[5] +
    40000000.0 * sc[9] * x717 - 40000000.0 * sc[9] * x719 -
    33000000.0 * sc[9] * x721 + 33000000.0 * sc[9] * x725 -
    13240000.0 * x1011 * x125 + 13240000.0 * x1011 * x710 + x219 * x5650 -
    x219 * x5662 + x219 * x8030 - x5569 * x602 - x5625 * x747 + x5625 * x748 -
    x5650 * x596 + x5662 * x596 - x596 * x8030 + x8037 +
    (33000000.0 * sc[9] * x240) * (x747 - x748) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (x721 - x725 + (-x240) * (x747 - x748)) +
    (40000000.0 * sc[9] * x202) *
      (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748))) +
    (10000000.0 * sc[9] * x70) *
      (-x717 + x719 + (-x118) * (x721 - x725 + (-x240) * (x747 - x748)) +
       (-x202) *
         (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748))));
  J[165] =
    sc[12] * x6762 + sc[13] * x423 * x6706 + sc[13] * x6801 +
    60000000.0 * sc[37] + sc[3] * x3130 + sc[5] * x6767 + sc[5] * x6770 +
    sc[5] * x6773 + sc[5] * x6776 + sc[5] * x6779 - sc[9] * x5862 +
    40000000.0 * sc[9] * x730 + 33000000.0 * sc[9] * x736 -
    40000000.0 * sc[9] * x737 - 33000000.0 * sc[9] * x743 -
    10000000.0 * sc[9] * x990 + 13240000.0 * x1011 * x171 -
    13240000.0 * x1011 * x732 - x157 * x5650 + x157 * x5662 - x157 * x8030 +
    1600000.0 * x2846 * x6711 + 28000000.0 * x421 * x424 - x5625 * x768 +
    x5625 * x770 + x5650 * x633 - x5662 * x633 + x633 * x8030 + x8036 +
    (33000000.0 * sc[9] * x240) * (x768 - x770) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x736 + x743 + (-x240) * (x768 - x770)) +
    (40000000.0 * sc[9] * x202) *
      (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770))) +
    (10000000.0 * sc[9] * x70) *
      (-x730 + x737 + (-x118) * (-x736 + x743 + (-x240) * (x768 - x770)) +
       (-x202) *
         (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770))));
  J[204] =
    refC * x2303 * x2315 + 1000000.0 * sc[10] + sc[12] * x7442 +
    sc[13] * x7471 + sc[16] * x2299 + sc[18] * x7434 + sc[19] * x7460 +
    sc[20] * x7463 + sc[24] * x7437 + sc[27] * x7417 + 2660000.0 * sc[28] +
    sc[29] * x7452 + sc[2] * x2918 + 40000000.0 * sc[3] +
    33000000.0 * sc[9] * x746 - 33000000.0 * sc[9] * x757 +
    13240000.0 * x1011 * x740 - 13240000.0 * x1011 * x741 + x181 * x5650 -
    x181 * x5662 + x181 * x8030 - 9000.0 * x5576 - x5625 * x800 + x5625 * x801 -
    2000000.0 * x6505 + x6509 + x7853 + x8037 + x8068 + x8070 +
    (33000000.0 * sc[9] * x240) * (x800 - x801) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x746 + x757 + (-x240) * (x800 - x801)) +
    (40000000.0 * sc[9] * x202) *
      (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801))) +
    (10000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (-x746 + x757 + (-x240) * (x800 - x801)) +
       (-x202) *
         (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801))));
  J[243] = 40000000.0 * sc[9] * x754 - 40000000.0 * sc[9] * x756 -
           33000000.0 * sc[9] * x761 + 33000000.0 * sc[9] * x762 -
           10000000.0 * sc[9] * x825 + 13240000.0 * x1011 * x745 -
           13240000.0 * x1011 * x758 + x2291 - x3446 - 288000.0 * x5589 +
           288000.0 * x5590 - x5625 * x842 + x5625 * x844 + x8003 + x8078 +
           (33000000.0 * sc[9] * x240) * (x842 - x844) +
           (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
             (x761 - x762 + (-x240) * (x842 - x844)) +
           (40000000.0 * sc[9] * x202) *
             (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844))) +
           (10000000.0 * sc[9] * x70) *
             (-x754 + x756 + (-x118) * (x761 - x762 + (-x240) * (x842 - x844)) +
              (-x202) * (-x745 + x758 +
                         (x241) * (x761 - x762 + (-x240) * (x842 - x844))));
  J[282] =
    12000000.0 * sc[16] * x434 + 23400000.0 * sc[9] * x5603 +
    23400000.0 * sc[9] * x5607 + 40000000.0 * sc[9] * x765 -
    40000000.0 * sc[9] * x773 + 33000000.0 * sc[9] * x787 -
    33000000.0 * sc[9] * x799 - 10000000.0 * sc[9] * x860 +
    13240000.0 * x1011 * x759 - 13240000.0 * x1011 * x766 + x3854 -
    54000.0 * x5574 - 54000.0 * x5576 - 1848000.0 * x5589 + 1848000.0 * x5590 -
    x5625 * x864 + x5625 * x875 - 12000000.0 * x6505 - 12000000.0 * x7861 +
    x7892 + x8003 + (33000000.0 * sc[9] * x240) * (x864 - x875) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x787 + x799 + (-x240) * (x864 - x875)) +
    (40000000.0 * sc[9] * x202) *
      (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875))) +
    (10000000.0 * sc[9] * x70) *
      (-x765 + x773 + (-x118) * (-x787 + x799 + (-x240) * (x864 - x875)) +
       (-x202) *
         (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875))));
  J[321] =
    -365800000.0 * sc[9] * x7498 - 130000.0 * sc[9] * x7500 + x8094 +
    (33000000.0 * sc[9] * x240) * (x888 - x889) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (40000000.0 * sc[9] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (10000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[360] =
    -sc[10] * x14 * x8012 - sc[10] * x6044 - sc[10] * x7032 - sc[11] * x7521 -
    sc[13] * x7519 - 77410.0 * ((sc[14]) * (sc[14])) * x8113 - sc[14] * x6040 -
    1046.0 * sc[15] * x6750 * x8123 - sc[15] * x7009 - 20000.0 * sc[21] -
    sc[22] * x7517 - 1600000.0 * sc[23] * x7014 - 158000.0 * sc[25] -
    sc[29] * x7511 - 90000.0 * sc[30] - sc[32] * x6048 - sc[36] * x8117 -
    sc[4] * x5862 - 365800000.0 * sc[8] * x7498 - 130000.0 * sc[8] * x7500 +
    40000000.0 * sc[9] * x779 - 40000000.0 * sc[9] * x792 +
    33000000.0 * sc[9] * x841 - 33000000.0 * sc[9] * x849 -
    10000000.0 * sc[9] * x867 + 10000000.0 * sc_qss[3] * x70 +
    13240000.0 * x1011 * x838 - 13240000.0 * x1011 * x840 - 33000000.0 * x226 -
    58000000.0 * x242 * exp(-289.85279950351901 * invT) +
    10000000.0 * x395 / x68 - x3983 - 13240000.0 * x3986 + x4071 -
    120000.0 * x5588 * x5776 - 120000.0 * x5589 + 120000.0 * x5590 -
    x5625 * x905 + x5625 * x906 - x5650 * x641 + x5650 * x642 + x5662 * x641 -
    x5662 * x642 - 40000000.0 * x6 + 3900000.0 * x602 * exp(x5602) - x6039 -
    x6043 - x641 * x8030 + x642 * x8030 - x7508 - x7514 - x7524 - x7526 -
    x7528 + x7901 + x8003 - x8129 +
    (33000000.0 * sc[9] * x240) * (x905 - x906) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x841 + x849 + (-x240) * (x905 - x906)) +
    (40000000.0 * sc[9] * x202) *
      (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906))) +
    (10000000.0 * sc[9] * x70) *
      (-x779 + x792 + (-x118) * (-x841 + x849 + (-x240) * (x905 - x906)) +
       (-x202) *
         (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906))));
  J[399] =
    1000000.0 * sc[5] - sc[9] * x14 * x8012 - sc[9] * x6044 - sc[9] * x7032 +
    40000000.0 * sc[9] * x796 - 40000000.0 * sc[9] * x814 -
    33000000.0 * sc[9] * x855 + 33000000.0 * sc[9] * x865 -
    13240000.0 * x1011 * x195 + 13240000.0 * x1011 * x862 - x231 * x5650 +
    x231 * x5662 - x231 * x8030 + x244 * x5625 - x5625 * x920 + x8006 + x8032 +
    x8038 + (33000000.0 * sc[9] * x240) * (-x244 + x920) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (x855 - x865 + (-x240) * (-x244 + x920)) +
    (40000000.0 * sc[9] * x202) *
      (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920))) +
    (10000000.0 * sc[9] * x70) *
      (-x796 + x814 + (-x118) * (x855 - x865 + (-x240) * (-x244 + x920)) +
       (-x202) *
         (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920))));
  J[438] =
    -10000000.0 * sc[9] * x1000 - sc[9] * x7521 + 33000000.0 * sc[9] * x786 +
    40000000.0 * sc[9] * x827 - 40000000.0 * sc[9] * x834 -
    33000000.0 * sc[9] * x897 + 13240000.0 * x1011 * x341 -
    13240000.0 * x1011 * x882 - x5625 * x937 + x5625 * x938 + x8036 + x8078 +
    (33000000.0 * sc[9] * x240) * (x937 - x938) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x786 + x897 + (-x240) * (x937 - x938)) +
    (40000000.0 * sc[9] * x202) *
      (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938))) +
    (10000000.0 * sc[9] * x70) *
      (-x827 + x834 + (-x118) * (-x786 + x897 + (-x240) * (x937 - x938)) +
       (-x202) *
         (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938))));
  J[477] =
    20000000.0 * sc[12] * x393 + sc[13] * x8142 + 33000000.0 * sc[3] * x551 +
    sc[4] * x6762 + sc[5] * x7442 - 10000000.0 * sc[9] * x147 +
    40000000.0 * sc[9] * x738 - 40000000.0 * sc[9] * x851 -
    33000000.0 * sc[9] * x900 - 13240000.0 * x1011 * x883 + x104 * x5662 -
    x5625 * x948 - x5650 * x649 + x5662 * x649 - x649 * x8030 - x7538 + x8006 +
    x8032 + x8036 + x8088 + (33000000.0 * sc[9] * x240) * (-x889 + x948) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x806 + x900 + (-x240) * (-x889 + x948)) +
    (40000000.0 * sc[9] * x202) *
      (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948))) +
    (10000000.0 * sc[9] * x70) *
      (-x738 + x851 + (-x118) * (-x806 + x900 + (-x240) * (-x889 + x948)) +
       (-x202) *
         (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948))));
  J[516] =
    sc[12] * x8142 + sc[4] * x423 * x6706 + sc[4] * x6801 + sc[5] * x7471 -
    sc[9] * x7519 - 40000000.0 * sc[9] * x861 + 33000000.0 * sc[9] * x904 -
    33000000.0 * sc[9] * x908 + 13240000.0 * x1011 * x886 -
    13240000.0 * x1011 * x895 - x5625 * x961 + x5625 * x962 - x7541 + x8038 +
    x8070 + x8087 + x8158 + (33000000.0 * sc[9] * x240) * (x961 - x962) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x904 + x908 + (-x240) * (x961 - x962)) +
    (40000000.0 * sc[9] * x202) *
      (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962))) +
    (10000000.0 * sc[9] * x70) *
      (-x738 + x861 + (-x118) * (-x904 + x908 + (-x240) * (x961 - x962)) +
       (-x202) *
         (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962))));
  J[555] =
    -154820.0 * sc[14] * sc[9] * x8113 + sc[3] * x5806 - sc[9] * x6040 +
    40000000.0 * sc[9] * x738 - 40000000.0 * sc[9] * x870 -
    33000000.0 * sc[9] * x915 - 13240000.0 * x1011 * x896 - x5625 * x967 -
    x5650 * x650 + x5650 * x668 + x5662 * x650 - x5662 * x668 - x650 * x8030 +
    x668 * x8030 - x7548 + x8037 + x8088 +
    (33000000.0 * sc[9] * x240) * (-x889 + x967) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x806 + x915 + (-x240) * (-x889 + x967)) +
    (40000000.0 * sc[9] * x202) *
      (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967))) +
    (10000000.0 * sc[9] * x70) *
      (-x738 + x870 + (-x118) * (-x806 + x915 + (-x240) * (-x889 + x967)) +
       (-x202) *
         (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967))));
  J[594] =
    -1046.0 * sc[9] * x6750 * x8123 - sc[9] * x7009 -
    33000000.0 * sc[9] * x709 - 40000000.0 * sc[9] * x892 -
    13240000.0 * x1011 * x903 - x5625 * x971 + x8038 + x8070 + x8087 + x8088 +
    (33000000.0 * sc[9] * x240) * (-x889 + x971) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (x709 - x806 + (-x240) * (-x889 + x971)) +
    (40000000.0 * sc[9] * x202) *
      (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971))) +
    (10000000.0 * sc[9] * x70) *
      (-x738 + x892 + (-x118) * (x709 - x806 + (-x240) * (-x889 + x971)) +
       (-x202) *
         (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971))));
  J[633] =
    sc[3] * x549 + 28000000.0 * sc[4] * x421 * x994 +
    3200000.0 * sc[4] * x423 * x6711 + sc[4] * x6706 * x6750 + sc[5] * x2299 +
    12000000.0 * sc[7] * x434 + 40000000.0 * sc[9] * x894 -
    40000000.0 * sc[9] * x902 + 33000000.0 * sc[9] * x926 -
    33000000.0 * sc[9] * x931 - 10000000.0 * sc[9] * x987 +
    13240000.0 * x1011 * x912 - 13240000.0 * x1011 * x913 + x4632 -
    210000.0 * x5589 + 210000.0 * x5590 - x5625 * x572 + x5625 * x659 -
    x5650 * x674 + x5650 * x686 + x5662 * x674 - x5662 * x686 - x6211 -
    x674 * x8030 + x686 * x8030 + x8003 +
    (33000000.0 * sc[9] * x240) * (x572 - x659) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x926 + x931 + (-x240) * (x572 - x659)) +
    (40000000.0 * sc[9] * x202) *
      (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659))) +
    (10000000.0 * sc[9] * x70) *
      (-x894 + x902 + (-x118) * (-x926 + x931 + (-x240) * (x572 - x659)) +
       (-x202) *
         (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659))));
  J[672] =
    2640000.0 * ((sc[2]) * (sc[2])) * x2838 + sc[3] * x5759 -
    40000000.0 * sc[9] * x135 - 10000000.0 * sc[9] * x821 +
    40000000.0 * sc[9] * x910 + 33000000.0 * sc[9] * x936 -
    33000000.0 * sc[9] * x947 + 13240000.0 * x1011 * x510 -
    13240000.0 * x1011 * x928 - x297 * x5650 + x297 * x5662 - x297 * x8030 +
    x320 * x5650 - x320 * x5662 + x320 * x8030 + x4743 - 432000.0 * x5589 +
    432000.0 * x5590 + x5625 * x832 - x5625 * x837 -
    2000000.0 * x602 * exp(x370) + x8003 +
    (33000000.0 * sc[9] * x240) * (-x832 + x837) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x936 + x947 + (-x240) * (-x832 + x837)) +
    (40000000.0 * sc[9] * x202) *
      (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837))) +
    (10000000.0 * sc[9] * x70) *
      (x135 - x910 + (-x118) * (-x936 + x947 + (-x240) * (-x832 + x837)) +
       (-x202) *
         (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837))));
  J[711] =
    sc[5] * x7434 - 10000000.0 * sc[9] * x384 + 40000000.0 * sc[9] * x911 -
    40000000.0 * sc[9] * x917 + 33000000.0 * sc[9] * x949 -
    33000000.0 * sc[9] * x956 - 13240000.0 * x1011 * x878 +
    13240000.0 * x1011 * x929 - x1037 * x5625 + x1038 * x5625 + x104 * x5662 +
    3900000.0 * x5604 + x8036 + x8087 +
    (33000000.0 * sc[9] * x240) * (x1037 - x1038) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (40000000.0 * sc[9] * x202) *
      (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038))) +
    (10000000.0 * sc[9] * x70) *
      (-x911 + x917 + (-x118) * (-x949 + x956 + (-x240) * (x1037 - x1038)) +
       (-x202) *
         (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038))));
  J[750] =
    sc[5] * x7460 - 33000000.0 * sc[9] * x563 - 10000000.0 * sc[9] * x824 -
    40000000.0 * sc[9] * x922 - 13240000.0 * x1011 * x189 + x104 * x5662 -
    x1044 * x5625 - x6299 - x7553 + x8036 + x8070 + x8087 + x8088 - x8193 +
    (33000000.0 * sc[9] * x240) * (x1044 - x889) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (x563 - x806 + (-x240) * (x1044 - x889)) +
    (40000000.0 * sc[9] * x202) *
      (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889))) +
    (10000000.0 * sc[9] * x70) *
      (-x738 + x922 + (-x118) * (x563 - x806 + (-x240) * (x1044 - x889)) +
       (-x202) *
         (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889))));
  J[789] =
    sc[5] * x7463 - 10000000.0 * sc[9] * x42 + 40000000.0 * sc[9] * x925 -
    40000000.0 * sc[9] * x934 + 33000000.0 * sc[9] * x966 -
    33000000.0 * sc[9] * x970 + 13240000.0 * x1011 * x705 -
    13240000.0 * x1011 * x935 + x104 * x5662 - x1059 * x5625 + x1060 * x5625 +
    3900000.0 * x5604 - x7557 + x8036 + x8087 +
    (33000000.0 * sc[9] * x240) * (x1059 - x1060) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (40000000.0 * sc[9] * x202) *
      (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060))) +
    (10000000.0 * sc[9] * x70) *
      (-x925 + x934 + (-x118) * (-x966 + x970 + (-x240) * (x1059 - x1060)) +
       (-x202) *
         (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060))));
  J[828] =
    300000.0 * sc[5] - 40000000.0 * sc[9] * x941 - 33000000.0 * sc[9] * x977 -
    20000.0 * sc[9] - 13240000.0 * x1011 * x884 - x1064 * x5625 + x8038 +
    x8070 + x8087 + x8088 + (33000000.0 * sc[9] * x240) * (x1064 - x889) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (40000000.0 * sc[9] * x202) *
      (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889))) +
    (10000000.0 * sc[9] * x70) *
      (-x738 + x941 + (-x118) * (-x806 + x977 + (-x240) * (x1064 - x889)) +
       (-x202) *
         (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889))));
  J[867] = -33000000.0 * sc[9] * x256 + 40000000.0 * sc[9] * x477 +
           11700000.0 * sc[9] * x5603 + 11700000.0 * sc[9] * x5607 -
           10000000.0 * sc[9] * x58 - sc[9] * x7517 -
           40000000.0 * sc[9] * x952 + 33000000.0 * sc[9] * x992 -
           13240000.0 * x1011 * x365 + 13240000.0 * x1011 * x944 -
           x214 * x5625 + x216 * x5625 - 27000.0 * x5574 - 27000.0 * x5576 +
           x8036 + x8206 + (33000000.0 * sc[9] * x240) * (x214 - x216) +
           (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
             (x256 - x992 + (-x240) * (x214 - x216)) +
           (40000000.0 * sc[9] * x202) *
             (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216))) +
           (10000000.0 * sc[9] * x70) *
             (-x477 + x952 + (-x118) * (x256 - x992 + (-x240) * (x214 - x216)) +
              (-x202) * (x365 - x944 +
                         (x241) * (x256 - x992 + (-x240) * (x214 - x216))));
  J[906] =
    -33000000.0 * sc[9] * x1014 - 1600000.0 * sc[9] * x7014 +
    33000000.0 * sc[9] * x805 - 40000000.0 * sc[9] * x958 +
    13240000.0 * x1011 * x350 - 13240000.0 * x1011 * x355 - x285 * x5625 +
    x294 * x5625 - 9000.0 * x5576 + x5650 * x782 - x5662 * x782 -
    2000000.0 * x6505 + x782 * x8030 + x8037 + x8070 +
    (33000000.0 * sc[9] * x240) * (x285 - x294) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (x1014 - x805 + (-x240) * (x285 - x294)) +
    (40000000.0 * sc[9] * x202) *
      (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294))) +
    (10000000.0 * sc[9] * x70) *
      (-x738 + x958 + (-x118) * (x1014 - x805 + (-x240) * (x285 - x294)) +
       (-x202) *
         (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294))));
  J[945] =
    sc[5] * x7437 - 10000000.0 * sc[9] * x617 - 33000000.0 * sc[9] * x831 -
    40000000.0 * sc[9] * x959 - 13240000.0 * x1011 * x363 + x104 * x5662 -
    x306 * x5625 + x8036 + x8070 + x8087 + x8088 +
    (33000000.0 * sc[9] * x240) * (x306 - x889) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x806 + x831 + (-x240) * (x306 - x889)) +
    (40000000.0 * sc[9] * x202) *
      (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889))) +
    (10000000.0 * sc[9] * x70) *
      (-x738 + x959 + (-x118) * (-x806 + x831 + (-x240) * (x306 - x889)) +
       (-x202) *
         (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889))));
  J[984] =
    sc[3] * x5731 - 158000.0 * sc[9] + x8094 +
    (33000000.0 * sc[9] * x240) * (x888 - x889) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (40000000.0 * sc[9] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (10000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1023] =
    x8094 + (33000000.0 * sc[9] * x240) * (x888 - x889) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (40000000.0 * sc[9] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (10000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1062] =
    sc[5] * x7417 - 33000000.0 * sc[9] * x1028 - 13240000.0 * x1011 * x797 -
    x309 * x5625 + x8038 + x8068 + x8070 + x8087 + x8088 +
    (33000000.0 * sc[9] * x240) * (x309 - x889) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (x1028 - x806 + (-x240) * (x309 - x889)) +
    (40000000.0 * sc[9] * x202) *
      (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889))) +
    (10000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (x1028 - x806 + (-x240) * (x309 - x889)) +
       (-x202) * (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889))));
  J[1101] =
    2660000.0 * sc[5] - 33000000.0 * sc[9] * x691 - 40000000.0 * sc[9] * x963 -
    13240000.0 * x1011 * x366 - x326 * x5625 - x7573 + x8038 + x8070 + x8087 +
    x8088 + (33000000.0 * sc[9] * x240) * (x326 - x889) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (x691 - x806 + (-x240) * (x326 - x889)) +
    (40000000.0 * sc[9] * x202) *
      (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889))) +
    (10000000.0 * sc[9] * x70) *
      (-x738 + x963 + (-x118) * (x691 - x806 + (-x240) * (x326 - x889)) +
       (-x202) *
         (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889))));
  J[1140] =
    sc[5] * x7452 - sc[9] * x7511 + x8094 +
    (33000000.0 * sc[9] * x240) * (x888 - x889) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (40000000.0 * sc[9] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (10000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1179] =
    -90000.0 * sc[9] + x8094 + (33000000.0 * sc[9] * x240) * (x888 - x889) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (40000000.0 * sc[9] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (10000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1218] =
    x8094 + (33000000.0 * sc[9] * x240) * (x888 - x889) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (40000000.0 * sc[9] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (10000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1257] =
    -33000000.0 * sc[9] * x1043 - sc[9] * x6048 + 40000000.0 * sc[9] * x738 -
    13240000.0 * x1011 * x797 - x176 * x5625 - x5650 * x809 + x5650 * x99 +
    x5662 * x809 - x5662 * x99 - x8030 * x809 + x8030 * x99 + x8037 + x8068 +
    x8088 + (33000000.0 * sc[9] * x240) * (x176 - x889) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (x1043 - x806 + (-x240) * (x176 - x889)) +
    (40000000.0 * sc[9] * x202) *
      (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889))) +
    (10000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (x1043 - x806 + (-x240) * (x176 - x889)) +
       (-x202) * (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889))));
  J[1296] =
    sc[3] * x5791 + 40000000.0 * sc[9] * x738 - x5650 * x881 + x5662 * x881 +
    x8006 - x8030 * x881 + x8032 + x8038 + x8068 + x8088 + x8092 +
    (33000000.0 * sc[9] * x240) * (x888 - x889) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (40000000.0 * sc[9] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (10000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1335] =
    -33000000.0 * sc[9] * x1045 + 40000000.0 * sc[9] * x738 -
    40000000.0 * sc[9] * x968 - 13240000.0 * x1011 * x367 - x152 * x5625 -
    x469 * x5650 + x469 * x5662 - x469 * x8030 + x8006 + x8032 + x8038 + x8088 +
    (33000000.0 * sc[9] * x240) * (x152 - x889) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (x1045 - x806 + (-x240) * (x152 - x889)) +
    (40000000.0 * sc[9] * x202) *
      (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889))) +
    (10000000.0 * sc[9] * x70) *
      (-x738 + x968 + (-x118) * (x1045 - x806 + (-x240) * (x152 - x889)) +
       (-x202) *
         (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889))));
  J[1374] =
    -33000000.0 * sc[9] * x232 + 40000000.0 * sc[9] * x738 -
    40000000.0 * sc[9] * x983 - 13240000.0 * x1011 * x543 - x353 * x5625 -
    x465 * x5650 + x465 * x5662 - x465 * x8030 + x8006 + x8032 + x8038 + x8088 +
    (33000000.0 * sc[9] * x240) * (x353 - x889) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (x232 - x806 + (-x240) * (x353 - x889)) +
    (40000000.0 * sc[9] * x202) *
      (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889))) +
    (10000000.0 * sc[9] * x70) *
      (-x738 + x983 + (-x118) * (x232 - x806 + (-x240) * (x353 - x889)) +
       (-x202) *
         (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889))));
  J[1413] =
    -33000000.0 * sc[9] * x291 + 40000000.0 * sc[9] * x738 - sc[9] * x8117 -
    13240000.0 * x1011 * x797 - x357 * x5625 - x537 * x5650 + x537 * x5662 -
    x537 * x8030 + x540 * x5650 - x540 * x5662 + x540 * x8030 + x8037 + x8068 +
    x8088 + (33000000.0 * sc[9] * x240) * (x357 - x889) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (x291 - x806 + (-x240) * (x357 - x889)) +
    (40000000.0 * sc[9] * x202) *
      (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889))) +
    (10000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (x291 - x806 + (-x240) * (x357 - x889)) +
       (-x202) * (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889))));
  J[1452] =
    refC * x14 * x8009 + 154820.0 * sc[37] * exp(30.696216614087898 * invT) +
    2092.0 * sc[37] * exp(1806.0446135731399 * invT) + 36000000.0 * sc[3] +
    60000000.0 * sc[4] - 9000.0 * x5576 + x5650 * x957 - x5662 * x957 -
    2000000.0 * x6505 + x7583 + x8030 * x957 + x8037 + x8068 + x8070 + x8088 +
    x8092 + (33000000.0 * sc[9] * x240) * (x888 - x889) +
    (40000000.0 * sc[9] * x118 - 13240000.0 * x1011 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (40000000.0 * sc[9] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (10000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[10] = -30000000.0 * sc[10] * x266 + 40000000.0 * sc[10] * x359 -
          40000000.0 * sc[10] * x368 + 30000000.0 * sc[10] * x376 -
          50000000.0 * sc[10] * x647 + 50000000.0 * sc[10] * x669 -
          10570000.0 * sc[14] * x8288 - 10570000.0 * sc[14] * x8292 -
          x1051 * x289 + x1051 * x315 - 2240000000000000.0 * x1863 +
          x1870 * x1874 - x1870 * x1903 - 2.8672e+20 * x1899 * x544 +
          2240000000000000.0 * x203 + x2593 + x289 * x319 + x289 * x332 -
          x314 * x359 + x314 * x368 - x315 * x319 - x315 * x332 - x359 * x695 +
          x368 * x695 + 2.8672e+20 * x496 * x544 + x6598 + x8003 +
          x8257 * x8278 - x8258 * x8278 - 2.478e+38 * x8266 +
          2.478e+38 * x8269 - 2.0688962264150902e+66 * x8273 +
          2.0688962264150902e+66 * x8285 + x8349 + x8400 +
          (30000000.0 * sc[10] * x240) * (x647 - x669) +
          (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
           x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
           x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
            (x266 - x376 + (-x240) * (x647 - x669)) +
          (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
           x202 * x319 - x202 * x332) *
            (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669)));
  J[49] = 40000000.0 * sc[10] * x347 + 30000000.0 * sc[10] * x374 -
          40000000.0 * sc[10] * x689 - 30000000.0 * sc[10] * x693 -
          50000000.0 * sc[10] * x713 + 50000000.0 * sc[10] * x715 +
          x1051 * x620 - x1051 * x670 + x2688 - x279 * x8402 - x314 * x347 +
          x314 * x689 - x319 * x620 + x319 * x670 - x332 * x620 + x332 * x670 -
          x347 * x695 + x6621 + x689 * x695 + x8404 + x8436 +
          (30000000.0 * sc[10] * x240) * (x713 - x715) +
          (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
           x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
           x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
            (-x374 + x693 + (-x240) * (x713 - x715)) +
          (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
           x202 * x319 - x202 * x332) *
            (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715)));
  J[88] =
    -40000000.0 * sc[10] * x688 + 40000000.0 * sc[10] * x690 +
    30000000.0 * sc[10] * x712 - 30000000.0 * sc[10] * x716 -
    50000000.0 * sc[10] * x734 + 50000000.0 * sc[10] * x735 + sc[13] * x3044 +
    50000000.0 * sc[18] * x655 + 30000000.0 * sc[19] * x565 + sc[20] * x3065 +
    40000000.0 * sc[20] * x527 + 9980000.0 * sc[21] * x1990 -
    sc[24] * x2990 * x2994 + 90000000.0 * sc[25] + sc[27] * x2895 +
    sc[28] * x2953 + 8000000000000000.0 * sc[29] * x2805 + sc[30] * x2907 +
    3.2e+16 * sc[31] * x2805 + 3200000000000000.0 * x1026 * x200 * x35 +
    x1051 * x678 - x1051 * x703 + x116 + x2687 + x2928 + x3012 + x314 * x688 -
    x314 * x690 - x319 * x678 + x319 * x703 - x332 * x678 + x332 * x703 -
    x54 * x8402 + x619 * x8402 + x6597 + x6651 + x688 * x695 - x690 * x695 +
    x8436 + (30000000.0 * sc[10] * x240) * (x734 - x735) +
    (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 + x1051 * x118 +
     x1052 * x241 - x118 * x296 - x118 * x319 - x118 * x332 + x241 * x281 +
     x241 * x314 + x241 * x695) *
      (-x712 + x716 + (-x240) * (x734 - x735)) +
    (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 - x202 * x319 -
     x202 * x332) *
      (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735)));
  J[127] = -40000000.0 * sc[10] * x125 + 40000000.0 * sc[10] * x710 -
           30000000.0 * sc[10] * x721 + 30000000.0 * sc[10] * x725 -
           50000000.0 * sc[10] * x747 + 50000000.0 * sc[10] * x748 -
           84300000.0 * sc[10] + sc[14] * x5806 + 48000000.0 * sc[19] +
           19.2 * sc[20] * exp(x1058) + 16040000.0 * sc[21] + sc[29] * x3175 -
           70000000.0 * sc[6] * x717 + 70000000.0 * sc[6] * x719 +
           x1051 * x717 - x1051 * x719 + x1052 * x125 - x1052 * x710 +
           x125 * x314 + x125 * x695 + x219 * x8402 + x2687 - x314 * x710 -
           x319 * x717 + x319 * x719 - x332 * x717 + x332 * x719 -
           x596 * x8402 + x6597 + x6671 - x695 * x710 + x8436 +
           (30000000.0 * sc[10] * x240) * (x747 - x748) +
           (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
            x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
            x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
             (x721 - x725 + (-x240) * (x747 - x748)) +
           (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
            x202 * x319 - x202 * x332) *
             (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748)));
  J[166] =
    40000000.0 * sc[10] * x171 - 40000000.0 * sc[10] * x732 +
    30000000.0 * sc[10] * x736 - 30000000.0 * sc[10] * x743 -
    50000000.0 * sc[10] * x768 + 50000000.0 * sc[10] * x770 -
    24000000.0 * sc[13] * x2990 * x6797 + sc[13] * x6801 + sc[14] * x6756 -
    70000000.0 * sc[6] * x730 + 70000000.0 * sc[6] * x737 + x1051 * x730 -
    x1051 * x737 - x1052 * x171 + x1052 * x732 - x157 * x8402 - x171 * x314 -
    x171 * x695 + x2687 + x314 * x732 - x319 * x730 + x319 * x737 -
    x332 * x730 + x332 * x737 + x633 * x8402 + x6597 + x6688 + x6745 + x6816 +
    x695 * x732 + x8436 + (30000000.0 * sc[10] * x240) * (x768 - x770) +
    (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 + x1051 * x118 +
     x1052 * x241 - x118 * x296 - x118 * x319 - x118 * x332 + x241 * x281 +
     x241 * x314 + x241 * x695) *
      (-x736 + x743 + (-x240) * (x768 - x770)) +
    (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 - x202 * x319 -
     x202 * x332) *
      (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770)));
  J[205] = 40000000.0 * sc[10] * x740 - 40000000.0 * sc[10] * x741 +
           30000000.0 * sc[10] * x746 - 30000000.0 * sc[10] * x757 -
           50000000.0 * sc[10] * x800 + 50000000.0 * sc[10] * x801 -
           14400000.0 * sc[10] + sc[11] * x7429 + 24000000.0 * sc[21] +
           70000000.0 * sc[6] * x701 - x1051 * x701 - x1052 * x740 +
           x1052 * x741 + x181 * x8402 - x281 * x740 + x281 * x741 +
           x296 * x701 - x314 * x740 + x314 * x741 + x319 * x701 + x332 * x701 +
           x3433 + x6853 - x695 * x740 + x695 * x741 - x8461 + x8468 +
           (30000000.0 * sc[10] * x240) * (x800 - x801) +
           (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
            x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
            x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
             (-x746 + x757 + (-x240) * (x800 - x801)) +
           (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
            x202 * x319 - x202 * x332) *
             (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801)));
  J[244] = -sc[10] * x3491 + 40000000.0 * sc[10] * x745 -
           40000000.0 * sc[10] * x758 - 30000000.0 * sc[10] * x761 +
           30000000.0 * sc[10] * x762 - 50000000.0 * sc[10] * x842 +
           50000000.0 * sc[10] * x844 + x1051 * x754 - x1051 * x756 -
           x281 * x745 + x281 * x758 - x296 * x754 + x296 * x756 - x314 * x745 +
           x314 * x758 - x319 * x754 + x319 * x756 - x332 * x754 + x332 * x756 +
           x3617 + x3676 + x6892 - x695 * x745 + x695 * x758 + x8476 + x8499 +
           (30000000.0 * sc[10] * x240) * (x842 - x844) +
           (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
            x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
            x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
             (x761 - x762 + (-x240) * (x842 - x844)) +
           (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
            x202 * x319 - x202 * x332) *
             (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844)));
  J[283] = -sc[10] * x6907 + 40000000.0 * sc[10] * x759 -
           40000000.0 * sc[10] * x766 + 30000000.0 * sc[10] * x787 -
           30000000.0 * sc[10] * x799 - 50000000.0 * sc[10] * x864 +
           50000000.0 * sc[10] * x875 - 90600000.0 * sc[14] * x8288 -
           90600000.0 * sc[14] * x8292 + x1051 * x765 - x1051 * x773 -
           2.4576e+21 * x174 - 1.92e+16 * x1863 +
           x1874 * (1.68 * x1869 + 12.0 * x2736) -
           x1903 * (1.68 * x1869 + 12.0 * x2736) + 1.92e+16 * x203 -
           x314 * x759 + x314 * x766 - x319 * x765 + x319 * x773 - x332 * x765 +
           x332 * x773 + 2.4576e+21 * x372 + x3896 - x695 * x759 + x695 * x766 +
           x6975 + x8003 + x8257 * (1.68 * x249 * x8275 + 12.0 * x249 * x8276) -
           x8258 * (1.68 * x249 * x8275 + 12.0 * x249 * x8276) -
           2.124e+39 * x8266 + 2.124e+39 * x8269 -
           1.77333962264151e+67 * x8273 + 1.77333962264151e+67 * x8285 + x8513 +
           x8524 + (30000000.0 * sc[10] * x240) * (x864 - x875) +
           (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
            x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
            x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
             (-x787 + x799 + (-x240) * (x864 - x875)) +
           (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
            x202 * x319 - x202 * x332) *
             (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875)));
  J[322] = -x7487 + x8531 + (30000000.0 * sc[10] * x240) * (x888 - x889) +
           (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
            x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
            x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
             (-x806 + x839 + (-x240) * (x888 - x889)) +
           (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
            x202 * x319 - x202 * x332) *
             (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[361] = -sc[10] * x14 * x8012 - sc[10] * x6044 - sc[10] * x7032 +
           40000000.0 * sc[10] * x838 - 40000000.0 * sc[10] * x840 +
           30000000.0 * sc[10] * x841 - 30000000.0 * sc[10] * x849 -
           50000000.0 * sc[10] * x905 + 50000000.0 * sc[10] * x906 +
           sc[11] * x7521 - 70000000.0 * sc[6] * x779 +
           70000000.0 * sc[6] * x792 + x1051 * x779 - x1051 * x792 -
           x1052 * x838 + x1052 * x840 + x2687 - x281 * x838 + x281 * x840 -
           x296 * x779 + x296 * x792 - x314 * x838 + x314 * x840 - x319 * x779 +
           x319 * x792 - x332 * x779 + x332 * x792 - x641 * x8402 +
           x642 * x8402 + x6597 - x695 * x838 + x695 * x840 + x8436 +
           (30000000.0 * sc[10] * x240) * (x905 - x906) +
           (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
            x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
            x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
             (-x841 + x849 + (-x240) * (x905 - x906)) +
           (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
            x202 * x319 - x202 * x332) *
             (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906)));
  J[400] =
    -40000000.0 * sc[10] * x195 + 50000000.0 * sc[10] * x244 -
    30000000.0 * sc[10] * x855 + 40000000.0 * sc[10] * x862 +
    30000000.0 * sc[10] * x865 - 50000000.0 * sc[10] * x920 -
    9.84 * sc[10] * exp(-g_RT_qss[2] - x415 + x48) -
    64000000.0 * sc[10] * exp(-g_RT_qss[3] + 286.83349950869001 * invT - x415) -
    sc[13] * x6080 - sc[15] * x8550 - sc[18] * x4105 - sc[18] * x8570 -
    sc[19] * x4123 - sc[19] * x8355 - 392000.0 * sc[19] - sc[20] * x4083 -
    sc[20] * x8596 - sc[20] * x8599 - 50000000.0 * sc[23] -
    sc[24] * x2994 * x994 - sc[28] * x8565 - sc[29] * x4079 - sc[29] * x8574 -
    11000000.0 * sc[30] - sc[33] * x8557 - 1000000.0 * sc[37] * x8541 -
    84300000.0 * sc[3] - 24000000.0 * sc[4] * x6750 * x6797 -
    14400000.0 * sc[5] - sc[6] * x3491 - sc[7] * x6907 - sc[9] * x14 * x8012 -
    sc[9] * x6044 - sc[9] * x7032 - 12000000.0 * x1048 * x6 + x1051 * x796 -
    x1051 * x814 - 3200000000000000.0 * x1862 * x503 + x195 * x314 +
    x195 * x695 - 40000000.0 * x200 - 30000000.0 * x226 - x231 * x8402 -
    50000000.0 * x242 + x2687 - x314 * x862 - x332 * x796 + x332 * x814 -
    3.91e+48 * x35 * x8300 * x8334 - 19960000.0 * x4085 + x4176 -
    7.08e+38 * x500 * x8265 + x6597 - x695 * x862 + x7070 - x7531 + x8404 +
    x8436 - x8546 - x8562 + x8582 + x8587 - x8593 + x8605 +
    (30000000.0 * sc[10] * x240) * (-x244 + x920) +
    (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 + x1051 * x118 +
     x1052 * x241 - x118 * x296 - x118 * x319 - x118 * x332 + x241 * x281 +
     x241 * x314 + x241 * x695) *
      (x855 - x865 + (-x240) * (-x244 + x920)) +
    (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 - x202 * x319 -
     x202 * x332) *
      (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920)));
  J[439] = 40000000.0 * sc[10] * x341 + 30000000.0 * sc[10] * x786 -
           40000000.0 * sc[10] * x882 - 30000000.0 * sc[10] * x897 -
           50000000.0 * sc[10] * x937 + 50000000.0 * sc[10] * x938 +
           sc[12] * x8620 + sc[14] * x8614 + sc[16] * x8616 + sc[18] * x8618 +
           sc[19] * x2570 + sc[21] * x8608 + sc[27] * x8610 + sc[28] * x8612 +
           sc[29] * x8606 + sc[5] * x7429 + sc[9] * x7521 +
           32000000.0 * x1048 * x6 + x1051 * x827 - x1051 * x834 +
           4.92 * x200 * exp(x48) - x314 * x341 + x314 * x882 - x319 * x827 +
           x319 * x834 - x332 * x827 + x332 * x834 - x341 * x695 + x3676 +
           x4179 + x4249 + x6892 + x695 * x882 + x7071 + x7086 + x8476 + x8499 +
           (30000000.0 * sc[10] * x240) * (x937 - x938) +
           (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
            x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
            x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
             (-x786 + x897 + (-x240) * (x937 - x938)) +
           (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
            x202 * x319 - x202 * x332) *
             (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938)));
  J[478] =
    -40000000.0 * sc[10] * x883 - 30000000.0 * sc[10] * x900 -
    50000000.0 * sc[10] * x948 + sc[11] * x8620 + 70000000.0 * sc[6] * x851 -
    x1051 * x851 + x1052 * x883 + x281 * x883 + x296 * x851 + x314 * x883 +
    x319 * x851 + x332 * x851 - x649 * x8402 + x695 * x883 + x8404 + x8634 +
    x8636 + (30000000.0 * sc[10] * x240) * (-x889 + x948) +
    (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 + x1051 * x118 +
     x1052 * x241 - x118 * x296 - x118 * x319 - x118 * x332 + x241 * x281 +
     x241 * x314 + x241 * x695) *
      (-x806 + x900 + (-x240) * (-x889 + x948)) +
    (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 - x202 * x319 -
     x202 * x332) *
      (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948)));
  J[517] =
    -sc[10] * x6080 + 40000000.0 * sc[10] * x886 - 40000000.0 * sc[10] * x895 +
    30000000.0 * sc[10] * x904 - 30000000.0 * sc[10] * x908 -
    50000000.0 * sc[10] * x961 + 50000000.0 * sc[10] * x962 + sc[2] * x3044 +
    sc[4] * x6801 + 70000000.0 * sc[6] * x861 - x1051 * x861 - x1052 * x886 +
    x1052 * x895 - x314 * x886 + x314 * x895 + x319 * x861 + x332 * x861 +
    x3433 + x6853 - x695 * x886 + x695 * x895 + x7118 + x8468 + x8525 - x8638 +
    (30000000.0 * sc[10] * x240) * (x961 - x962) +
    (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 + x1051 * x118 +
     x1052 * x241 - x118 * x296 - x118 * x319 - x118 * x332 + x241 * x281 +
     x241 * x314 + x241 * x695) *
      (-x904 + x908 + (-x240) * (x961 - x962)) +
    (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 - x202 * x319 -
     x202 * x332) *
      (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962)));
  J[556] =
    -40000000.0 * sc[10] * x896 - 30000000.0 * sc[10] * x915 -
    50000000.0 * sc[10] * x967 + sc[11] * x8614 + 32000000.0 * sc[2] +
    sc[3] * x5806 + sc[4] * x6756 + 70000000.0 * sc[6] * x870 - x1051 * x870 +
    x1052 * x896 + x281 * x896 + x296 * x870 + x314 * x896 + x319 * x870 +
    x332 * x870 - 15100000.0 * x602 * exp(x362) - x650 * x8402 + x668 * x8402 +
    x695 * x896 + x8636 + 2000000.0 * x8641 +
    (30000000.0 * sc[10] * x240) * (-x889 + x967) +
    (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 + x1051 * x118 +
     x1052 * x241 - x118 * x296 - x118 * x319 - x118 * x332 + x241 * x281 +
     x241 * x314 + x241 * x695) *
      (-x806 + x915 + (-x240) * (-x889 + x967)) +
    (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 - x202 * x319 -
     x202 * x332) *
      (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967)));
  J[595] = -30000000.0 * sc[10] * x709 - sc[10] * x8550 -
           40000000.0 * sc[10] * x903 - 50000000.0 * sc[10] * x971 +
           70000000.0 * sc[6] * x892 - x1051 * x892 + x1052 * x903 +
           x281 * x903 + x296 * x892 + x314 * x903 + x319 * x892 + x332 * x892 +
           2.7e+26 * x426 * x6577 + x695 * x903 + x8525 + x8636 +
           (30000000.0 * sc[10] * x240) * (-x889 + x971) +
           (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
            x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
            x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
             (x709 - x806 + (-x240) * (-x889 + x971)) +
           (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
            x202 * x319 - x202 * x332) *
             (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971)));
  J[634] = -50000000.0 * sc[10] * x572 + 50000000.0 * sc[10] * x659 +
           40000000.0 * sc[10] * x912 - 40000000.0 * sc[10] * x913 +
           30000000.0 * sc[10] * x926 - 30000000.0 * sc[10] * x931 +
           sc[11] * x8616 + sc[20] * x8653 + x1051 * x894 - x1051 * x902 -
           6.144e+20 * x174 - 4800000000000000.0 * x1863 +
           x1874 * (0.42 * x1869 + 3.0 * x2736) -
           x1903 * (0.42 * x1869 + 3.0 * x2736) + 4800000000000000.0 * x203 -
           x314 * x912 + x314 * x913 - x319 * x894 + x319 * x902 - x332 * x894 +
           x332 * x902 + 6.144e+20 * x372 + x4115 + x4665 - x674 * x8402 +
           x686 * x8402 - x695 * x912 + x695 * x913 + x7196 + x8003 +
           4.4333490566037699e+66 * x8251 * x8255 -
           4.4333490566037699e+66 * x8255 * x8262 +
           x8257 * (0.42 * x249 * x8275 + 3.0 * x249 * x8276) -
           x8258 * (0.42 * x249 * x8275 + 3.0 * x249 * x8276) -
           5.31e+38 * x8266 + 5.31e+38 * x8269 + x8672 + x8683 +
           (30000000.0 * sc[10] * x240) * (x572 - x659) +
           (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
            x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
            x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
             (-x926 + x931 + (-x240) * (x572 - x659)) +
           (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
            x202 * x319 - x202 * x332) *
             (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659)));
  J[673] =
    40000000.0 * sc[10] * x510 + 50000000.0 * sc[10] * x832 -
    50000000.0 * sc[10] * x837 - 40000000.0 * sc[10] * x928 +
    30000000.0 * sc[10] * x936 - 30000000.0 * sc[10] * x947 - x1051 * x135 +
    x1051 * x910 + x135 * x319 + x135 * x332 - x297 * x8402 - x314 * x510 +
    x314 * x928 - x319 * x910 + x320 * x8402 - x332 * x910 + x4777 -
    x510 * x695 + x695 * x928 + x7218 + x8499 +
    (30000000.0 * sc[10] * x240) * (-x832 + x837) +
    (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 + x1051 * x118 +
     x1052 * x241 - x118 * x296 - x118 * x319 - x118 * x332 + x241 * x281 +
     x241 * x314 + x241 * x695) *
      (-x936 + x947 + (-x240) * (-x832 + x837)) +
    (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 - x202 * x319 -
     x202 * x332) *
      (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837)));
  J[712] =
    -50000000.0 * sc[10] * x1037 + 50000000.0 * sc[10] * x1038 -
    sc[10] * x4105 - sc[10] * x8570 - 40000000.0 * sc[10] * x878 +
    40000000.0 * sc[10] * x929 + 30000000.0 * sc[10] * x949 -
    30000000.0 * sc[10] * x956 + sc[11] * x8618 + 50000000.0 * sc[2] * x655 +
    x1051 * x911 - x1051 * x917 + x281 * x878 - x281 * x929 - x296 * x911 +
    x296 * x917 + x314 * x878 - x314 * x929 - x319 * x911 + x319 * x917 -
    x332 * x911 + x332 * x917 + x4862 + x695 * x878 - x695 * x929 + x7229 +
    x8707 + (30000000.0 * sc[10] * x240) * (x1037 - x1038) +
    (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 + x1051 * x118 +
     x1052 * x241 - x118 * x296 - x118 * x319 - x118 * x332 + x241 * x281 +
     x241 * x314 + x241 * x695) *
      (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 - x202 * x319 -
     x202 * x332) *
      (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038)));
  J[751] = -50000000.0 * sc[10] * x1044 - 40000000.0 * sc[10] * x189 -
           sc[10] * x4123 - 30000000.0 * sc[10] * x563 - sc[10] * x8355 -
           392000.0 * sc[10] + sc[11] * x2570 + 30000000.0 * sc[2] * x565 +
           48000000.0 * sc[3] + 70000000.0 * sc[6] * x922 - x1051 * x922 +
           x1052 * x189 + x189 * x281 + x189 * x314 + x189 * x695 +
           x296 * x922 + x319 * x922 + x332 * x922 + x8525 + x8636 + x8709 +
           (30000000.0 * sc[10] * x240) * (x1044 - x889) +
           (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
            x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
            x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
             (x563 - x806 + (-x240) * (x1044 - x889)) +
           (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
            x202 * x319 - x202 * x332) *
             (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889)));
  J[790] =
    -50000000.0 * sc[10] * x1059 + 50000000.0 * sc[10] * x1060 -
    sc[10] * x4083 + 40000000.0 * sc[10] * x705 - sc[10] * x8596 -
    sc[10] * x8599 - 40000000.0 * sc[10] * x935 + 30000000.0 * sc[10] * x966 -
    30000000.0 * sc[10] * x970 + sc[16] * x8653 + sc[2] * x3065 +
    40000000.0 * sc[2] * x527 + 19.2 * sc[3] * exp(x1058) + x1051 * x925 -
    x1051 * x934 - x281 * x705 + x281 * x935 - x296 * x925 + x296 * x934 -
    x314 * x705 + x314 * x935 - x319 * x925 + x319 * x934 - x332 * x925 +
    x332 * x934 + x5014 - x695 * x705 + x695 * x935 + x8707 +
    (30000000.0 * sc[10] * x240) * (x1059 - x1060) +
    (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 + x1051 * x118 +
     x1052 * x241 - x118 * x296 - x118 * x319 - x118 * x332 + x241 * x281 +
     x241 * x314 + x241 * x695) *
      (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 - x202 * x319 -
     x202 * x332) *
      (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060)));
  J[829] =
    -50000000.0 * sc[10] * x1064 - sc[10] * x4077 - sc[10] * x8583 -
    40000000.0 * sc[10] * x884 - 30000000.0 * sc[10] * x977 + sc[11] * x8608 +
    9980000.0 * sc[2] * x1990 + 16040000.0 * sc[3] + 24000000.0 * sc[5] +
    70000000.0 * sc[6] * x941 - x1051 * x941 + x1052 * x884 + x281 * x884 +
    x296 * x941 + x314 * x884 + x319 * x941 + x332 * x941 + x695 * x884 +
    x8525 + x8636 + x8723 + (30000000.0 * sc[10] * x240) * (x1064 - x889) +
    (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 + x1051 * x118 +
     x1052 * x241 - x118 * x296 - x118 * x319 - x118 * x332 + x241 * x281 +
     x241 * x314 + x241 * x695) *
      (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 - x202 * x319 -
     x202 * x332) *
      (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889)));
  J[868] =
    -50000000.0 * sc[10] * x214 + 50000000.0 * sc[10] * x216 -
    30000000.0 * sc[10] * x256 - 40000000.0 * sc[10] * x365 +
    40000000.0 * sc[10] * x944 + 30000000.0 * sc[10] * x992 -
    45300000.0 * sc[14] * x8288 - 45300000.0 * sc[14] * x8292 + x1051 * x477 -
    x1051 * x952 - 1.2288e+21 * x174 - 9600000000000000.0 * x1863 +
    x1874 * (0.84 * x1869 + 6.0 * x2736) -
    x1903 * (0.84 * x1869 + 6.0 * x2736) + 9600000000000000.0 * x203 +
    x314 * x365 - x314 * x944 - x319 * x477 + x319 * x952 - x332 * x477 +
    x332 * x952 + x365 * x695 + 1.2288e+21 * x372 + 3.54e+38 * x503 * x8268 +
    x5211 + 40000000.0 * x6 * exp(276.769166192596 * invT) - x695 * x944 +
    x7307 + x8003 + x8257 * (0.84 * x249 * x8275 + 6.0 * x249 * x8276) -
    x8258 * (0.84 * x249 * x8275 + 6.0 * x249 * x8276) - 1.062e+39 * x8266 +
    1.062e+39 * x8269 - 8.8666981132075502e+66 * x8273 +
    8.8666981132075502e+66 * x8285 + x8305 + x8705 - x8729 +
    (30000000.0 * sc[10] * x240) * (x214 - x216) +
    (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 + x1051 * x118 +
     x1052 * x241 - x118 * x296 - x118 * x319 - x118 * x332 + x241 * x281 +
     x241 * x314 + x241 * x695) *
      (x256 - x992 + (-x240) * (x214 - x216)) +
    (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 - x202 * x319 -
     x202 * x332) *
      (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216)));
  J[907] = -30000000.0 * sc[10] * x1014 - 50000000.0 * sc[10] * x285 +
           50000000.0 * sc[10] * x294 + 40000000.0 * sc[10] * x350 -
           40000000.0 * sc[10] * x355 + 30000000.0 * sc[10] * x805 -
           50000000.0 * sc[10] + 70000000.0 * sc[6] * x958 - x1051 * x958 -
           x1052 * x350 + x1052 * x355 - x281 * x350 + x281 * x355 +
           x296 * x958 - x314 * x350 + x314 * x355 + x319 * x958 + x332 * x958 +
           x3433 - x350 * x695 + x355 * x695 + x6853 + x782 * x8402 - x8461 +
           x8468 + (30000000.0 * sc[10] * x240) * (x285 - x294) +
           (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
            x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
            x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
             (x1014 - x805 + (-x240) * (x285 - x294)) +
           (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
            x202 * x319 - x202 * x332) *
             (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294)));
  J[946] = -50000000.0 * sc[10] * x306 - 40000000.0 * sc[10] * x363 -
           30000000.0 * sc[10] * x831 - sc[2] * x2990 * x2994 +
           70000000.0 * sc[6] * x959 - x1051 * x959 + x1052 * x363 +
           x281 * x363 + x296 * x959 + x314 * x363 + x319 * x959 + x332 * x959 +
           x363 * x695 + x5315 + x8525 + x8636 +
           (30000000.0 * sc[10] * x240) * (x306 - x889) +
           (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
            x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
            x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
             (-x806 + x831 + (-x240) * (x306 - x889)) +
           (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
            x202 * x319 - x202 * x332) *
             (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889)));
  J[985] = 90000000.0 * sc[2] + x8330 + x8531 +
           (30000000.0 * sc[10] * x240) * (x888 - x889) +
           (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
            x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
            x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
             (-x806 + x839 + (-x240) * (x888 - x889)) +
           (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
            x202 * x319 - x202 * x332) *
             (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1024] = x8531 + 36300000000000.0 * exp(-28783.993284029999 * invT) +
            (30000000.0 * sc[10] * x240) * (x888 - x889) +
            (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
             x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
             x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
              (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
             x202 * x319 - x202 * x332) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1063] = -30000000.0 * sc[10] * x1028 - 50000000.0 * sc[10] * x309 +
            sc[11] * x8610 + sc[2] * x2895 + x8525 + x8528 +
            (30000000.0 * sc[10] * x240) * (x309 - x889) +
            (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
             x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
             x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
              (x1028 - x806 + (-x240) * (x309 - x889)) +
            (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
             x202 * x319 - x202 * x332) *
              (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889)));
  J[1102] = -50000000.0 * sc[10] * x326 - 40000000.0 * sc[10] * x366 -
            30000000.0 * sc[10] * x691 - sc[10] * x8565 + sc[11] * x8612 +
            sc[2] * x2953 + 70000000.0 * sc[6] * x963 - x1051 * x963 +
            x1052 * x366 + x281 * x366 + x296 * x963 + x314 * x366 +
            x319 * x963 + x332 * x963 + x366 * x695 -
            3.91e+48 * x500 * x8300 * exp(x8319) + x8525 + x8636 + x8762 -
            x8767 + (30000000.0 * sc[10] * x240) * (x326 - x889) +
            (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
             x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
             x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
              (x691 - x806 + (-x240) * (x326 - x889)) +
            (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
             x202 * x319 - x202 * x332) *
              (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889)));
  J[1141] = 4.27e+46 * refC * x15 * x8365 * x8376 - sc[10] * x4079 -
            sc[10] * x8574 + sc[11] * x8606 +
            8000000000000000.0 * sc[2] * x2805 + sc[3] * x3175 + x8531 +
            (30000000.0 * sc[10] * x240) * (x888 - x889) +
            (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
             x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
             x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
              (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
             x202 * x319 - x202 * x332) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1180] = -11000000.0 * sc[10] + sc[2] * x2907 + x8531 + x8776 +
            (30000000.0 * sc[10] * x240) * (x888 - x889) +
            (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
             x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
             x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
              (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
             x202 * x319 - x202 * x332) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1219] = 3.2e+16 * sc[2] * x2805 + 3.91e+48 * x503 * x8300 * x8320 + x8531 +
            (30000000.0 * sc[10] * x240) * (x888 - x889) +
            (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
             x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
             x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
              (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
             x202 * x319 - x202 * x332) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1258] = -30000000.0 * sc[10] * x1043 - 50000000.0 * sc[10] * x176 -
            x809 * x8402 + x8402 * x99 + x8528 +
            (30000000.0 * sc[10] * x240) * (x176 - x889) +
            (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
             x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
             x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
              (x1043 - x806 + (-x240) * (x176 - x889)) +
            (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
             x202 * x319 - x202 * x332) *
              (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889)));
  J[1297] = -sc[10] * x8557 - x8402 * x881 + x8404 + x8528 + x8530 +
            (30000000.0 * sc[10] * x240) * (x888 - x889) +
            (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
             x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
             x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
              (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
             x202 * x319 - x202 * x332) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1336] = -30000000.0 * sc[10] * x1045 - 50000000.0 * sc[10] * x152 -
            40000000.0 * sc[10] * x367 + 70000000.0 * sc[6] * x968 -
            x1051 * x968 + x1052 * x367 + x281 * x367 + x296 * x968 +
            x314 * x367 + x319 * x968 + x332 * x968 + x367 * x695 + x3934 -
            x469 * x8402 + x6981 + x8404 + x8468 + x8526 +
            (30000000.0 * sc[10] * x240) * (x152 - x889) +
            (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
             x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
             x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
              (x1045 - x806 + (-x240) * (x152 - x889)) +
            (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
             x202 * x319 - x202 * x332) *
              (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889)));
  J[1375] = -30000000.0 * sc[10] * x232 - 50000000.0 * sc[10] * x353 -
            40000000.0 * sc[10] * x543 + 70000000.0 * sc[6] * x983 -
            x1051 * x983 + x1052 * x543 + x281 * x543 + x296 * x983 +
            x314 * x543 + x319 * x983 + x332 * x983 - x465 * x8402 +
            x543 * x695 + x8404 + x8636 +
            (30000000.0 * sc[10] * x240) * (x353 - x889) +
            (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
             x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
             x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
              (x232 - x806 + (-x240) * (x353 - x889)) +
            (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
             x202 * x319 - x202 * x332) *
              (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889)));
  J[1414] = -30000000.0 * sc[10] * x291 - 50000000.0 * sc[10] * x357 -
            x537 * x8402 + x540 * x8402 + x8528 +
            (30000000.0 * sc[10] * x240) * (x357 - x889) +
            (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
             x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
             x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
              (x291 - x806 + (-x240) * (x357 - x889)) +
            (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
             x202 * x319 - x202 * x332) *
              (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889)));
  J[1453] = refC * x14 * x8009 - 1000000.0 * sc[10] * x8541 + x8402 * x957 -
            x8461 + x8528 + x8530 +
            (30000000.0 * sc[10] * x240) * (x888 - x889) +
            (-40000000.0 * sc[10] * x241 - 70000000.0 * sc[6] * x118 +
             x1051 * x118 + x1052 * x241 - x118 * x296 - x118 * x319 -
             x118 * x332 + x241 * x281 + x241 * x314 + x241 * x695) *
              (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-70000000.0 * sc[6] * x202 + x1051 * x202 - x202 * x296 -
             x202 * x319 - x202 * x332) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[11] = -60000000.0 * sc[11] * x266 + 60000000.0 * sc[11] * x376 +
          50000000.0 * sc[20] * x289 - 50000000.0 * sc[20] * x315 +
          3.3817876377952801e+32 * x2546 * x2547 -
          3.3817876377952801e+32 * x2546 * x2551 + 1.7339e+21 * x2548 -
          x2559 * x2568 + x2559 * x2579 - 1.7339e+21 * x2575 - x289 * x340 -
          x311 * x344 + x315 * x340 + x336 * x359 - x336 * x368 +
          (60000000.0 * sc[11] * x240) * (x647 - x669) +
          (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
            (x266 - x376 + (-x240) * (x647 - x669)) +
          (-50000000.0 * sc[20] * x202 + x202 * x340) *
            (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669))) +
          (x344 * x70) *
            (x289 - x315 + (-x118) * (x266 - x376 + (-x240) * (x647 - x669)) +
             (-x202) * (-x359 + x368 +
                        (x241) * (x266 - x376 + (-x240) * (x647 - x669))));
  J[50] = 60000000.0 * sc[11] * x374 - 60000000.0 * sc[11] * x693 -
          50000000.0 * sc[20] * x620 + 50000000.0 * sc[20] * x670 +
          x336 * x347 - x336 * x689 + x340 * x620 - x340 * x670 + x8800 +
          (60000000.0 * sc[11] * x240) * (x713 - x715) +
          (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
            (-x374 + x693 + (-x240) * (x713 - x715)) +
          (-50000000.0 * sc[20] * x202 + x202 * x340) *
            (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715))) +
          (x344 * x70) *
            (-x620 + x670 + (-x118) * (-x374 + x693 + (-x240) * (x713 - x715)) +
             (-x202) * (-x347 + x689 +
                        (x241) * (-x374 + x693 + (-x240) * (x713 - x715))));
  J[89] =
    60000000.0 * sc[11] * x712 - 60000000.0 * sc[11] * x716 +
    60000000.0 * sc[20] * x577 - 50000000.0 * sc[20] * x678 +
    50000000.0 * sc[20] * x703 + 2.477e+21 * x2562 * x500 * exp(x2564) + x2681 -
    x2928 - x336 * x688 + x336 * x690 + x340 * x678 - x340 * x703 -
    x344 * x989 + (60000000.0 * sc[11] * x240) * (x734 - x735) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x712 + x716 + (-x240) * (x734 - x735)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735))) +
    (x344 * x70) *
      (-x678 + x703 + (-x118) * (-x712 + x716 + (-x240) * (x734 - x735)) +
       (-x202) *
         (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735))));
  J[128] = -16000000.0 * sc[11] * x1048 * x719 - sc[11] * x5751 -
           60000000.0 * sc[11] * x721 + 60000000.0 * sc[11] * x725 -
           50000000.0 * sc[20] * x717 + 50000000.0 * sc[20] * x719 -
           x125 * x336 + x336 * x710 + x340 * x717 + x8800 +
           (60000000.0 * sc[11] * x240) * (x747 - x748) +
           (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
             (x721 - x725 + (-x240) * (x747 - x748)) +
           (-50000000.0 * sc[20] * x202 + x202 * x340) *
             (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748))) +
           (x344 * x70) *
             (-x717 + x719 + (-x118) * (x721 - x725 + (-x240) * (x747 - x748)) +
              (-x202) * (x125 - x710 +
                         (x241) * (x721 - x725 + (-x240) * (x747 - x748))));
  J[167] =
    sc[10] * x5851 + 60000000.0 * sc[11] * x736 - 60000000.0 * sc[11] * x743 -
    50000000.0 * sc[20] * x730 + 50000000.0 * sc[20] * x737 + x171 * x336 +
    x2681 - x336 * x732 + x340 * x730 - x340 * x737 - x344 * x990 - x6688 +
    (60000000.0 * sc[11] * x240) * (x768 - x770) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x736 + x743 + (-x240) * (x768 - x770)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770))) +
    (x344 * x70) *
      (-x730 + x737 + (-x118) * (-x736 + x743 + (-x240) * (x768 - x770)) +
       (-x202) *
         (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770))));
  J[206] =
    1000000.0 * sc[10] - sc[11] * x7429 + 60000000.0 * sc[11] * x746 -
    60000000.0 * sc[11] * x757 + x336 * x740 - x336 * x741 + x3367 -
    x340 * x701 + x340 * x738 + x8800 +
    (60000000.0 * sc[11] * x240) * (x800 - x801) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x746 + x757 + (-x240) * (x800 - x801)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801))) +
    (x344 * x70) *
      (x744 + (-x118) * (-x746 + x757 + (-x240) * (x800 - x801)) +
       (-x202) *
         (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801))));
  J[245] =
    sc[10] * x3491 - 60000000.0 * sc[11] * x761 + 60000000.0 * sc[11] * x762 -
    50000000.0 * sc[20] * x754 + 50000000.0 * sc[20] * x756 + x336 * x745 -
    x336 * x758 + x340 * x754 - x340 * x756 - x344 * x825 + x3668 +
    (60000000.0 * sc[11] * x240) * (x842 - x844) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (x761 - x762 + (-x240) * (x842 - x844)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844))) +
    (x344 * x70) *
      (-x754 + x756 + (-x118) * (x761 - x762 + (-x240) * (x842 - x844)) +
       (-x202) *
         (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844))));
  J[284] =
    sc[10] * x6907 + 60000000.0 * sc[11] * x787 - 60000000.0 * sc[11] * x799 -
    50000000.0 * sc[20] * x765 + 50000000.0 * sc[20] * x773 +
    2.8986751181102398e+33 * x2546 * x2547 -
    2.8986751181102398e+33 * x2546 * x2551 + 1.4862e+22 * x2548 -
    x2558 * x2568 * (1.68 * x249 * x2552 + 12.0 * x249 * x2555) +
    x2558 * x2579 * (1.68 * x249 * x2552 + 12.0 * x249 * x2555) -
    1.4862e+22 * x2575 + x336 * x759 - x336 * x766 + x340 * x765 - x340 * x773 -
    x344 * x860 + (60000000.0 * sc[11] * x240) * (x864 - x875) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x787 + x799 + (-x240) * (x864 - x875)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875))) +
    (x344 * x70) *
      (-x765 + x773 + (-x118) * (-x787 + x799 + (-x240) * (x864 - x875)) +
       (-x202) *
         (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875))));
  J[323] =
    x7487 + x8812 + (60000000.0 * sc[11] * x240) * (x888 - x889) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (x344 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[362] =
    -sc[11] * x7521 + 60000000.0 * sc[11] * x841 - 60000000.0 * sc[11] * x849 -
    50000000.0 * sc[20] * x779 + 50000000.0 * sc[20] * x792 + x2681 +
    x336 * x838 - x336 * x840 + x340 * x779 - x340 * x792 - x344 * x867 +
    (60000000.0 * sc[11] * x240) * (x905 - x906) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x841 + x849 + (-x240) * (x905 - x906)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906))) +
    (x344 * x70) *
      (-x779 + x792 + (-x118) * (-x841 + x849 + (-x240) * (x905 - x906)) +
       (-x202) *
         (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906))));
  J[401] =
    4.92 * sc[10] * exp(-g_RT_qss[2] - x415 + x48) +
    32000000.0 * sc[10] * exp(-g_RT_qss[3] + 286.83349950869001 * invT - x415) -
    16000000.0 * sc[11] * x1048 * x814 - 60000000.0 * sc[11] * x855 +
    60000000.0 * sc[11] * x865 + 8480000.0 * sc[12] + sc[15] * x8550 +
    392000.0 * sc[19] - 50000000.0 * sc[20] * x796 +
    50000000.0 * sc[20] * x814 + sc[20] * x8599 + sc[29] * x8574 +
    11000000.0 * sc[30] + sc[4] * x5851 + 1000000.0 * sc[5] + sc[6] * x3491 +
    sc[7] * x6907 - x195 * x336 + 2.477e+21 * x2562 * x2566 * x35 +
    x336 * x862 + x340 * x796 + x7531 + x8546 + x8562 + x8593 + x8800 +
    (60000000.0 * sc[11] * x240) * (-x244 + x920) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (x855 - x865 + (-x240) * (-x244 + x920)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920))) +
    (x344 * x70) *
      (-x796 + x814 + (-x118) * (x855 - x865 + (-x240) * (-x244 + x920)) +
       (-x202) *
         (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920))));
  J[440] =
    60000000.0 * sc[11] * x786 - 60000000.0 * sc[11] * x897 - sc[12] * x8620 -
    sc[14] * x8614 - sc[16] * x8616 - sc[18] * x8618 - sc[19] * x2570 -
    50000000.0 * sc[20] * x827 + 50000000.0 * sc[20] * x834 - sc[21] * x8608 -
    sc[27] * x8610 - sc[28] * x8612 - sc[29] * x8606 - sc[3] * x5751 -
    sc[5] * x7429 - sc[9] * x7521 - x1000 * x344 - 16000000.0 * x1048 * x6 -
    2.46 * x200 * exp(x48) - 60000000.0 * x226 -
    2.477e+21 * x2562 * x2572 * x503 + x336 * x341 - x336 * x882 + x340 * x827 -
    x340 * x834 - 50000000.0 * x3566 * x65 + x3668 - x4179 - x423 * x8825 -
    x7071 + (60000000.0 * sc[11] * x240) * (x937 - x938) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x786 + x897 + (-x240) * (x937 - x938)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938))) +
    (x344 * x70) *
      (-x827 + x834 + (-x118) * (-x786 + x897 + (-x240) * (x937 - x938)) +
       (-x202) *
         (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938))));
  J[479] =
    8480000.0 * sc[10] - sc[11] * x8620 - 60000000.0 * sc[11] * x900 +
    50000000.0 * sc[20] * x851 - x147 * x344 - x336 * x883 + x3366 -
    x340 * x851 + x8830 + (60000000.0 * sc[11] * x240) * (-x889 + x948) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x806 + x900 + (-x240) * (-x889 + x948)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948))) +
    (x344 * x70) *
      (-x738 + x851 + (-x118) * (-x806 + x900 + (-x240) * (-x889 + x948)) +
       (-x202) *
         (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948))));
  J[518] =
    60000000.0 * sc[11] * x904 - 60000000.0 * sc[11] * x908 +
    50000000.0 * sc[20] * x861 + x336 * x886 - x336 * x895 + x3366 +
    x340 * x738 - x340 * x861 + x8638 + x8800 +
    (60000000.0 * sc[11] * x240) * (x961 - x962) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x904 + x908 + (-x240) * (x961 - x962)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962))) +
    (x344 * x70) *
      (-x738 + x861 + (-x118) * (-x904 + x908 + (-x240) * (x961 - x962)) +
       (-x202) *
         (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962))));
  J[557] =
    -sc[11] * x8614 - 60000000.0 * sc[11] * x915 + 50000000.0 * sc[20] * x870 -
    x336 * x896 - x340 * x870 + x8833 +
    (60000000.0 * sc[11] * x240) * (-x889 + x967) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x806 + x915 + (-x240) * (-x889 + x967)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967))) +
    (x344 * x70) *
      (-x738 + x870 + (-x118) * (-x806 + x915 + (-x240) * (-x889 + x967)) +
       (-x202) *
         (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967))));
  J[596] =
    sc[10] * x8550 - 60000000.0 * sc[11] * x709 + 50000000.0 * sc[20] * x892 -
    x336 * x903 - x340 * x892 + x8833 +
    (60000000.0 * sc[11] * x240) * (-x889 + x971) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (x709 - x806 + (-x240) * (-x889 + x971)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971))) +
    (x344 * x70) *
      (-x738 + x892 + (-x118) * (x709 - x806 + (-x240) * (-x889 + x971)) +
       (-x202) *
         (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971))));
  J[635] =
    -refCinv * sc[11] * x8825 - sc[11] * x8616 + 60000000.0 * sc[11] * x926 -
    60000000.0 * sc[11] * x931 - 50000000.0 * sc[20] * x894 +
    50000000.0 * sc[20] * x902 + 7.2466877952755894e+32 * x2546 * x2547 -
    7.2466877952755894e+32 * x2546 * x2551 + 3.7155e+21 * x2548 -
    x2568 * x4655 - 3.7155e+21 * x2575 + x2579 * x4655 + x336 * x912 -
    x336 * x913 + x340 * x894 - x340 * x902 - x344 * x987 +
    (60000000.0 * sc[11] * x240) * (x572 - x659) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x926 + x931 + (-x240) * (x572 - x659)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659))) +
    (x344 * x70) *
      (-x894 + x902 + (-x118) * (-x926 + x931 + (-x240) * (x572 - x659)) +
       (-x202) *
         (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659))));
  J[674] =
    60000000.0 * sc[11] * x936 - 60000000.0 * sc[11] * x947 +
    50000000.0 * sc[20] * x135 - 50000000.0 * sc[20] * x910 - x135 * x340 +
    x336 * x510 - x336 * x928 + x340 * x910 - x344 * x821 + x3668 +
    (60000000.0 * sc[11] * x240) * (-x832 + x837) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x936 + x947 + (-x240) * (-x832 + x837)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837))) +
    (x344 * x70) *
      (x135 - x910 + (-x118) * (-x936 + x947 + (-x240) * (-x832 + x837)) +
       (-x202) *
         (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837))));
  J[713] =
    -sc[11] * x8618 + 60000000.0 * sc[11] * x949 - 60000000.0 * sc[11] * x956 -
    50000000.0 * sc[20] * x911 + 50000000.0 * sc[20] * x917 + x2681 -
    x336 * x878 + x336 * x929 + x340 * x911 - x340 * x917 - x344 * x384 +
    (60000000.0 * sc[11] * x240) * (x1037 - x1038) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038))) +
    (x344 * x70) *
      (-x911 + x917 + (-x118) * (-x949 + x956 + (-x240) * (x1037 - x1038)) +
       (-x202) *
         (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038))));
  J[752] =
    392000.0 * sc[10] - sc[11] * x2570 - 60000000.0 * sc[11] * x563 +
    50000000.0 * sc[20] * x922 - x189 * x336 + x3366 - x340 * x922 -
    x344 * x824 + x8830 + (60000000.0 * sc[11] * x240) * (x1044 - x889) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (x563 - x806 + (-x240) * (x1044 - x889)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889))) +
    (x344 * x70) *
      (-x738 + x922 + (-x118) * (x563 - x806 + (-x240) * (x1044 - x889)) +
       (-x202) *
         (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889))));
  J[791] =
    sc[10] * x8599 + 60000000.0 * sc[11] * x966 - 60000000.0 * sc[11] * x970 -
    50000000.0 * sc[20] * x925 + 50000000.0 * sc[20] * x934 +
    60000000.0 * sc[2] * x577 + x2681 + x336 * x705 - x336 * x935 +
    x340 * x925 - x340 * x934 - x344 * x42 + 50000000.0 * x6 +
    (60000000.0 * sc[11] * x240) * (x1059 - x1060) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060))) +
    (x344 * x70) *
      (-x925 + x934 + (-x118) * (-x966 + x970 + (-x240) * (x1059 - x1060)) +
       (-x202) *
         (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060))));
  J[830] =
    -sc[11] * x8608 - 60000000.0 * sc[11] * x977 + 50000000.0 * sc[20] * x941 -
    x336 * x884 - x340 * x941 + x8833 +
    (60000000.0 * sc[11] * x240) * (x1064 - x889) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889))) +
    (x344 * x70) *
      (-x738 + x941 + (-x118) * (-x806 + x977 + (-x240) * (x1064 - x889)) +
       (-x202) *
         (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889))));
  J[869] = -60000000.0 * sc[11] * x256 + 60000000.0 * sc[11] * x992 -
           50000000.0 * sc[20] * x477 + 50000000.0 * sc[20] * x952 +
           1.4493375590551199e+33 * x2546 * x2547 -
           1.4493375590551199e+33 * x2546 * x2551 + 7.431e+21 * x2548 -
           x2568 * x5201 - 7.431e+21 * x2575 + x2579 * x5201 - x336 * x365 +
           x336 * x944 + x340 * x477 - x340 * x952 - x344 * x58 + x8729 +
           (60000000.0 * sc[11] * x240) * (x214 - x216) +
           (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
             (x256 - x992 + (-x240) * (x214 - x216)) +
           (-50000000.0 * sc[20] * x202 + x202 * x340) *
             (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216))) +
           (x344 * x70) *
             (-x477 + x952 + (-x118) * (x256 - x992 + (-x240) * (x214 - x216)) +
              (-x202) * (x365 - x944 +
                         (x241) * (x256 - x992 + (-x240) * (x214 - x216))));
  J[908] =
    -60000000.0 * sc[11] * x1014 + 60000000.0 * sc[11] * x805 +
    50000000.0 * sc[20] * x958 + x336 * x350 - x336 * x355 + x3366 +
    x340 * x738 - x340 * x958 + x8800 +
    (60000000.0 * sc[11] * x240) * (x285 - x294) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (x1014 - x805 + (-x240) * (x285 - x294)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294))) +
    (x344 * x70) *
      (-x738 + x958 + (-x118) * (x1014 - x805 + (-x240) * (x285 - x294)) +
       (-x202) *
         (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294))));
  J[947] =
    -60000000.0 * sc[11] * x831 + 50000000.0 * sc[20] * x959 - x336 * x363 +
    x3366 - x340 * x959 - x344 * x617 + x8830 +
    (60000000.0 * sc[11] * x240) * (x306 - x889) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x806 + x831 + (-x240) * (x306 - x889)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889))) +
    (x344 * x70) *
      (-x738 + x959 + (-x118) * (-x806 + x831 + (-x240) * (x306 - x889)) +
       (-x202) *
         (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889))));
  J[986] =
    x8812 + (60000000.0 * sc[11] * x240) * (x888 - x889) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (x344 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1025] =
    x8812 + 12100000000000.0 * exp(-28783.993284029999 * invT) +
    (60000000.0 * sc[11] * x240) * (x888 - x889) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (x344 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1064] =
    -60000000.0 * sc[11] * x1028 - sc[11] * x8610 + x8811 +
    (60000000.0 * sc[11] * x240) * (x309 - x889) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (x1028 - x806 + (-x240) * (x309 - x889)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889))) +
    (x344 * x70) *
      (x744 + (-x118) * (x1028 - x806 + (-x240) * (x309 - x889)) +
       (-x202) * (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889))));
  J[1103] =
    -60000000.0 * sc[11] * x691 - sc[11] * x8612 + 50000000.0 * sc[20] * x963 -
    x336 * x366 - x340 * x963 + x8767 + x8833 +
    (60000000.0 * sc[11] * x240) * (x326 - x889) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (x691 - x806 + (-x240) * (x326 - x889)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889))) +
    (x344 * x70) *
      (-x738 + x963 + (-x118) * (x691 - x806 + (-x240) * (x326 - x889)) +
       (-x202) *
         (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889))));
  J[1142] =
    sc[10] * x8574 - sc[11] * x8606 + x8812 +
    (60000000.0 * sc[11] * x240) * (x888 - x889) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (x344 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1181] =
    11000000.0 * sc[10] + x8812 + (60000000.0 * sc[11] * x240) * (x888 - x889) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (x344 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1220] =
    x8812 + (60000000.0 * sc[11] * x240) * (x888 - x889) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (x344 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1259] =
    -60000000.0 * sc[11] * x1043 + x8811 +
    (60000000.0 * sc[11] * x240) * (x176 - x889) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (x1043 - x806 + (-x240) * (x176 - x889)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889))) +
    (x344 * x70) *
      (x744 + (-x118) * (x1043 - x806 + (-x240) * (x176 - x889)) +
       (-x202) * (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889))));
  J[1298] =
    x8812 + (60000000.0 * sc[11] * x240) * (x888 - x889) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (x344 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1337] =
    -60000000.0 * sc[11] * x1045 + 50000000.0 * sc[20] * x968 - x336 * x367 -
    x340 * x968 + x8833 + (60000000.0 * sc[11] * x240) * (x152 - x889) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (x1045 - x806 + (-x240) * (x152 - x889)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889))) +
    (x344 * x70) *
      (-x738 + x968 + (-x118) * (x1045 - x806 + (-x240) * (x152 - x889)) +
       (-x202) *
         (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889))));
  J[1376] =
    -60000000.0 * sc[11] * x232 + 50000000.0 * sc[20] * x983 - x336 * x543 -
    x340 * x983 + x8833 + (60000000.0 * sc[11] * x240) * (x353 - x889) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (x232 - x806 + (-x240) * (x353 - x889)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889))) +
    (x344 * x70) *
      (-x738 + x983 + (-x118) * (x232 - x806 + (-x240) * (x353 - x889)) +
       (-x202) *
         (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889))));
  J[1415] =
    -60000000.0 * sc[11] * x291 + x8811 +
    (60000000.0 * sc[11] * x240) * (x357 - x889) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (x291 - x806 + (-x240) * (x357 - x889)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889))) +
    (x344 * x70) *
      (x744 + (-x118) * (x291 - x806 + (-x240) * (x357 - x889)) +
       (-x202) * (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889))));
  J[1454] =
    x8812 + (60000000.0 * sc[11] * x240) * (x888 - x889) +
    (-50000000.0 * sc[20] * x118 + x118 * x340 - x241 * x336) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-50000000.0 * sc[20] * x202 + x202 * x340) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (x344 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[12] =
    33000000.0 * sc[9] * x266 + 20000000.0 * sc[9] * x311 -
    33000000.0 * sc[9] * x376 - 10600000.0 * x1011 * x359 +
    10600000.0 * x1011 * x368 + x2234 + x2285 + x266 * x558 - x376 * x558 +
    x8850 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x647 - x669) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (x266 - x376 + (-x240) * (x647 - x669)) +
    (-15000000.0 * sc[3] * x202) *
      (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669))) +
    (-20000000.0 * sc[9] * x70) *
      (x289 - x315 + (-x118) * (x266 - x376 + (-x240) * (x647 - x669)) +
       (-x202) *
         (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669))));
  J[51] =
    -80000000.0 * sc[3] * x347 + 80000000.0 * sc[3] * x689 -
    30000000.0 * sc[4] * x374 + 30000000.0 * sc[4] * x693 -
    33000000.0 * sc[9] * x374 + 33000000.0 * sc[9] * x693 -
    10600000.0 * x1011 * x347 + 10600000.0 * x1011 * x689 + x2636 -
    x374 * x558 + x558 * x693 + x8855 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x713 - x715) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x374 + x693 + (-x240) * (x713 - x715)) +
    (-15000000.0 * sc[3] * x202) *
      (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715))) +
    (-20000000.0 * sc[9] * x70) *
      (-x620 + x670 + (-x118) * (-x374 + x693 + (-x240) * (x713 - x715)) +
       (-x202) *
         (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715))));
  J[90] =
    sc[13] * x3055 + 30000000.0 * sc[17] * x2941 + 90000000.0 * sc[25] -
    15000000.0 * sc[3] * x678 + 15000000.0 * sc[3] * x703 +
    2244000000000.0 * sc[7] * x2536 * x423 - 33000000.0 * sc[9] * x712 +
    33000000.0 * sc[9] * x716 + 20000000.0 * sc[9] * x989 +
    10600000.0 * x1011 * x688 - 10600000.0 * x1011 * x690 +
    x2536 * x3092 * x423 + x2771 + x3029 - x558 * x712 + x558 * x716 + x8850 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x734 - x735) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x712 + x716 + (-x240) * (x734 - x735)) +
    (-15000000.0 * sc[3] * x202) *
      (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735))) +
    (-20000000.0 * sc[9] * x70) *
      (-x678 + x703 + (-x118) * (-x712 + x716 + (-x240) * (x734 - x735)) +
       (-x202) *
         (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735))));
  J[129] =
    -33000000.0 * sc[12] * x551 - 60000000.0 * sc[12] + sc[13] * x5767 +
    19.2 * sc[20] * exp(x1058) + 33000000.0 * sc[9] * x721 -
    33000000.0 * sc[9] * x725 + 10600000.0 * x1011 * x125 -
    10600000.0 * x1011 * x710 + x3180 + x3186 + x558 * x721 - x558 * x725 +
    x5740 + x5802 + x8855 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x747 - x748) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (x721 - x725 + (-x240) * (x747 - x748)) +
    (-15000000.0 * sc[3] * x202) *
      (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748))) +
    (-20000000.0 * sc[9] * x70) *
      (-x717 + x719 + (-x118) * (x721 - x725 + (-x240) * (x747 - x748)) +
       (-x202) *
         (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748))));
  J[168] =
    sc[16] * x5890 - 33000000.0 * sc[9] * x736 + 33000000.0 * sc[9] * x743 +
    20000000.0 * sc[9] * x990 + x2771 + x3294 + x3300 - x558 * x736 +
    x558 * x743 + x6765 + x6796 + x8850 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x768 - x770) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x736 + x743 + (-x240) * (x768 - x770)) +
    (-15000000.0 * sc[3] * x202) *
      (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770))) +
    (-20000000.0 * sc[9] * x70) *
      (-x730 + x737 + (-x118) * (-x736 + x743 + (-x240) * (x768 - x770)) +
       (-x202) *
         (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770))));
  J[207] =
    -sc[12] * x7442 + 1000000.0 * sc[13] * x2987 + sc[16] * x2299 -
    80000000.0 * sc[3] * x740 + 80000000.0 * sc[3] * x741 -
    30000000.0 * sc[4] * x746 + 30000000.0 * sc[4] * x757 -
    33000000.0 * sc[9] * x746 + 33000000.0 * sc[9] * x757 -
    10600000.0 * x1011 * x740 + 10600000.0 * x1011 * x741 + x3426 -
    x558 * x746 + x558 * x757 + x8855 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x800 - x801) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x746 + x757 + (-x240) * (x800 - x801)) +
    (-15000000.0 * sc[3] * x202) *
      (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801))) +
    (-20000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (-x746 + x757 + (-x240) * (x800 - x801)) +
       (-x202) *
         (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801))));
  J[246] =
    -374000000000.0 * sc[12] * x2532 - sc[12] * x3572 -
    15000000.0 * sc[3] * x754 + 15000000.0 * sc[3] * x756 +
    33000000.0 * sc[9] * x761 - 33000000.0 * sc[9] * x762 +
    20000000.0 * sc[9] * x825 - 10600000.0 * x1011 * x745 +
    10600000.0 * x1011 * x758 + 374000000000.0 * x2536 * x424 + x3562 +
    x558 * x761 - x558 * x762 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x842 - x844) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (x761 - x762 + (-x240) * (x842 - x844)) +
    (-15000000.0 * sc[3] * x202) *
      (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844))) +
    (-20000000.0 * sc[9] * x70) *
      (-x754 + x756 + (-x118) * (x761 - x762 + (-x240) * (x842 - x844)) +
       (-x202) *
         (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844))));
  J[285] =
    -2244000000000.0 * sc[12] * x2532 - sc[12] * x85 + sc[16] * x6953 -
    33000000.0 * sc[9] * x787 + 33000000.0 * sc[9] * x799 +
    20000000.0 * sc[9] * x860 - 10600000.0 * x1011 * x759 +
    10600000.0 * x1011 * x766 + 2244000000000.0 * x2536 * x424 + x3808 + x3820 -
    x558 * x787 + x558 * x799 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x864 - x875) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x787 + x799 + (-x240) * (x864 - x875)) +
    (-15000000.0 * sc[3] * x202) *
      (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875))) +
    (-20000000.0 * sc[9] * x70) *
      (-x765 + x773 + (-x118) * (-x787 + x799 + (-x240) * (x864 - x875)) +
       (-x202) *
         (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875))));
  J[324] =
    -sc[12] * x7493 + x8883 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x888 - x889) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-15000000.0 * sc[3] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-20000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[363] =
    sc[13] * x7519 - 80000000.0 * sc[3] * x838 + 80000000.0 * sc[3] * x840 -
    30000000.0 * sc[4] * x841 + 30000000.0 * sc[4] * x849 -
    33000000.0 * sc[9] * x841 + 33000000.0 * sc[9] * x849 +
    20000000.0 * sc[9] * x867 - 20000000.0 * sc_qss[3] * x70 -
    10600000.0 * x1011 * x838 + 10600000.0 * x1011 * x840 + 33000000.0 * x226 +
    x2771 - 20000000.0 * x395 / x68 + 10600000.0 * x3986 + x4024 - x558 * x841 +
    x558 * x849 - x7526 + x8129 + x8850 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x905 - x906) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x841 + x849 + (-x240) * (x905 - x906)) +
    (-15000000.0 * sc[3] * x202) *
      (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906))) +
    (-20000000.0 * sc[9] * x70) *
      (-x779 + x792 + (-x118) * (-x841 + x849 + (-x240) * (x905 - x906)) +
       (-x202) *
         (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906))));
  J[402] =
    80000000.0 * sc[3] * x195 - 80000000.0 * sc[3] * x862 +
    30000000.0 * sc[4] * x855 - 30000000.0 * sc[4] * x865 +
    33000000.0 * sc[9] * x855 - 33000000.0 * sc[9] * x865 +
    10600000.0 * x1011 * x195 - 10600000.0 * x1011 * x862 + x4135 +
    x558 * x855 - x558 * x865 + x8582 + x8593 + x8855 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (-x244 + x920) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (x855 - x865 + (-x240) * (-x244 + x920)) +
    (-15000000.0 * sc[3] * x202) *
      (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920))) +
    (-20000000.0 * sc[9] * x70) *
      (-x796 + x814 + (-x118) * (x855 - x865 + (-x240) * (-x244 + x920)) +
       (-x202) *
         (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920))));
  J[441] =
    -sc[12] * x8620 + sc[16] * x8616 + 20000000.0 * sc[9] * x1000 -
    33000000.0 * sc[9] * x786 + 33000000.0 * sc[9] * x897 -
    10600000.0 * x1011 * x341 + 10600000.0 * x1011 * x882 + x4214 + x4219 -
    x558 * x786 + x558 * x897 + x8850 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x937 - x938) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x786 + x897 + (-x240) * (x937 - x938)) +
    (-15000000.0 * sc[3] * x202) *
      (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938))) +
    (-20000000.0 * sc[9] * x70) *
      (-x827 + x834 + (-x118) * (-x786 + x897 + (-x240) * (x937 - x938)) +
       (-x202) *
         (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938))));
  J[480] =
    -sc[11] * x8620 - 40000000.0 * sc[12] * x393 - sc[13] * x8142 -
    sc[16] * x8915 - sc[18] * x8899 - 90330000.0 * sc[19] - sc[20] * x8906 -
    sc[21] * x6132 - 60000000.0 * sc[28] - sc[30] * x6128 -
    24600000.0 * sc[32] * x588 - 33000000.0 * sc[3] * x551 +
    15000000.0 * sc[3] * x851 - 60000000.0 * sc[3] - sc[4] * x5864 -
    sc[4] * x6762 - 30200000.0 * sc[4] - sc[5] * x7442 - sc[6] * x3572 -
    2244000000000.0 * sc[7] * x2532 - sc[7] * x85 - sc[8] * x7493 +
    20000000.0 * sc[9] * x147 + 33000000.0 * sc[9] * x900 +
    10600000.0 * x1011 * x883 - x2532 * x3092 + x2771 + x3425 + x3960 + x4294 +
    x558 * x900 + x6018 + x6998 - x7538 + x8634 + x8850 + x8879 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (-x889 + x948) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x806 + x900 + (-x240) * (-x889 + x948)) +
    (-15000000.0 * sc[3] * x202) *
      (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948))) +
    (-20000000.0 * sc[9] * x70) *
      (-x738 + x851 + (-x118) * (-x806 + x900 + (-x240) * (-x889 + x948)) +
       (-x202) *
         (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948))));
  J[519] =
    -sc[12] * x8142 + sc[2] * x3055 + sc[3] * x5767 +
    15000000.0 * sc[3] * x861 + 1000000.0 * sc[5] * x2987 + sc[9] * x7519 -
    33000000.0 * sc[9] * x904 + 33000000.0 * sc[9] * x908 -
    10600000.0 * x1011 * x886 + 10600000.0 * x1011 * x895 + x3425 + x4353 -
    x558 * x904 + x558 * x908 + x7121 + x8638 + x8855 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x961 - x962) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x904 + x908 + (-x240) * (x961 - x962)) +
    (-15000000.0 * sc[3] * x202) *
      (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962))) +
    (-20000000.0 * sc[9] * x70) *
      (-x738 + x861 + (-x118) * (-x904 + x908 + (-x240) * (x961 - x962)) +
       (-x202) *
         (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962))));
  J[558] =
    15000000.0 * sc[3] * x870 + 80000000.0 * sc[3] * x896 +
    30000000.0 * sc[4] * x915 + 33000000.0 * sc[9] * x915 +
    10600000.0 * x1011 * x896 + x3425 + x3960 + x558 * x915 + x6018 + x6998 +
    x8855 + x8879 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (-x889 + x967) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x806 + x915 + (-x240) * (-x889 + x967)) +
    (-15000000.0 * sc[3] * x202) *
      (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967))) +
    (-20000000.0 * sc[9] * x70) *
      (-x738 + x870 + (-x118) * (-x806 + x915 + (-x240) * (-x889 + x967)) +
       (-x202) *
         (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967))));
  J[597] =
    15000000.0 * sc[3] * x892 + 80000000.0 * sc[3] * x903 +
    30000000.0 * sc[4] * x709 + 33000000.0 * sc[9] * x709 +
    10600000.0 * x1011 * x903 + x558 * x709 + x8925 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (-x889 + x971) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (x709 - x806 + (-x240) * (-x889 + x971)) +
    (-15000000.0 * sc[3] * x202) *
      (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971))) +
    (-20000000.0 * sc[9] * x70) *
      (-x738 + x892 + (-x118) * (x709 - x806 + (-x240) * (-x889 + x971)) +
       (-x202) *
         (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971))));
  J[636] =
    sc[11] * x8616 - 327250000000.0 * sc[12] * x2532 + sc[19] * x8930 +
    sc[20] * x8934 + sc[21] * x8932 + sc[29] * x8928 + sc[4] * x5890 +
    sc[5] * x2299 + 2244000000000.0 * sc[7] * x2536 * x994 + sc[7] * x6953 -
    33000000.0 * sc[9] * x926 + 33000000.0 * sc[9] * x931 +
    20000000.0 * sc[9] * x987 - 10600000.0 * x1011 * x912 +
    10600000.0 * x1011 * x913 + x2536 * x3092 * x994 +
    327250000000.0 * x2536 * x424 + x4597 + x8939 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x572 - x659) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x926 + x931 + (-x240) * (x572 - x659)) +
    (-15000000.0 * sc[3] * x202) *
      (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659))) +
    (-20000000.0 * sc[9] * x70) *
      (-x894 + x902 + (-x118) * (-x926 + x931 + (-x240) * (x572 - x659)) +
       (-x202) *
         (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659))));
  J[675] =
    -673200000000.0 * sc[12] * x2532 + 30000000.0 * sc[2] * x2941 +
    20000000.0 * sc[9] * x821 - 33000000.0 * sc[9] * x936 +
    33000000.0 * sc[9] * x947 - 10600000.0 * x1011 * x510 +
    10600000.0 * x1011 * x928 + 673200000000.0 * x2536 * x424 + x3561 + x8943 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (-x832 + x837) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x936 + x947 + (-x240) * (-x832 + x837)) +
    (-15000000.0 * sc[3] * x202) *
      (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837))) +
    (-20000000.0 * sc[9] * x70) *
      (x135 - x910 + (-x118) * (-x936 + x947 + (-x240) * (-x832 + x837)) +
       (-x202) *
         (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837))));
  J[714] =
    -sc[12] * x8899 + 80000000.0 * sc[3] * x878 - 80000000.0 * sc[3] * x929 -
    30000000.0 * sc[4] * x949 + 30000000.0 * sc[4] * x956 +
    20000000.0 * sc[9] * x384 - 33000000.0 * sc[9] * x949 +
    33000000.0 * sc[9] * x956 + 10600000.0 * x1011 * x878 -
    10600000.0 * x1011 * x929 + x2771 + x4812 - x558 * x949 + x558 * x956 +
    x8850 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x1037 - x1038) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (-15000000.0 * sc[3] * x202) *
      (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038))) +
    (-20000000.0 * sc[9] * x70) *
      (-x911 + x917 + (-x118) * (-x949 + x956 + (-x240) * (x1037 - x1038)) +
       (-x202) *
         (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038))));
  J[753] =
    -90330000.0 * sc[12] + sc[16] * x8930 + 80000000.0 * sc[3] * x189 +
    15000000.0 * sc[3] * x922 + 30000000.0 * sc[4] * x563 +
    33000000.0 * sc[9] * x563 + 20000000.0 * sc[9] * x824 +
    10600000.0 * x1011 * x189 + x2771 + x3425 + x3960 + x558 * x563 + x6018 +
    x6998 + x8193 + x8850 + x8879 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x1044 - x889) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (x563 - x806 + (-x240) * (x1044 - x889)) +
    (-15000000.0 * sc[3] * x202) *
      (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889))) +
    (-20000000.0 * sc[9] * x70) *
      (-x738 + x922 + (-x118) * (x563 - x806 + (-x240) * (x1044 - x889)) +
       (-x202) *
         (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889))));
  J[792] =
    -sc[12] * x8906 + sc[16] * x8934 - 80000000.0 * sc[3] * x705 +
    80000000.0 * sc[3] * x935 + 19.2 * sc[3] * exp(x1058) -
    30000000.0 * sc[4] * x966 + 30000000.0 * sc[4] * x970 +
    20000000.0 * sc[9] * x42 - 33000000.0 * sc[9] * x966 +
    33000000.0 * sc[9] * x970 - 10600000.0 * x1011 * x705 +
    10600000.0 * x1011 * x935 + x2771 + x4974 - x558 * x966 + x558 * x970 +
    x8850 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x1059 - x1060) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (-15000000.0 * sc[3] * x202) *
      (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060))) +
    (-20000000.0 * sc[9] * x70) *
      (-x925 + x934 + (-x118) * (-x966 + x970 + (-x240) * (x1059 - x1060)) +
       (-x202) *
         (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060))));
  J[831] =
    -sc[12] * x6132 + sc[16] * x8932 + 80000000.0 * sc[3] * x884 +
    15000000.0 * sc[3] * x941 + 30000000.0 * sc[4] * x977 +
    33000000.0 * sc[9] * x977 + 10600000.0 * x1011 * x884 + x558 * x977 +
    x8925 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x1064 - x889) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (-15000000.0 * sc[3] * x202) *
      (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889))) +
    (-20000000.0 * sc[9] * x70) *
      (-x738 + x941 + (-x118) * (-x806 + x977 + (-x240) * (x1064 - x889)) +
       (-x202) *
         (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889))));
  J[870] =
    33000000.0 * sc[9] * x256 + 20000000.0 * sc[9] * x58 -
    33000000.0 * sc[9] * x992 + 10600000.0 * x1011 * x365 -
    10600000.0 * x1011 * x944 + x256 * x558 + x5135 + x5147 - x558 * x992 +
    x8850 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x214 - x216) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (x256 - x992 + (-x240) * (x214 - x216)) +
    (-15000000.0 * sc[3] * x202) *
      (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216))) +
    (-20000000.0 * sc[9] * x70) *
      (-x477 + x952 + (-x118) * (x256 - x992 + (-x240) * (x214 - x216)) +
       (-x202) *
         (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216))));
  J[909] =
    -80000000.0 * sc[3] * x350 + 80000000.0 * sc[3] * x355 +
    15000000.0 * sc[3] * x958 + 30000000.0 * sc[4] * x1014 -
    30000000.0 * sc[4] * x805 + 33000000.0 * sc[9] * x1014 -
    33000000.0 * sc[9] * x805 - 10600000.0 * x1011 * x350 +
    10600000.0 * x1011 * x355 + x1014 * x558 + x3425 - x558 * x805 + x8855 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x285 - x294) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (x1014 - x805 + (-x240) * (x285 - x294)) +
    (-15000000.0 * sc[3] * x202) *
      (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294))) +
    (-20000000.0 * sc[9] * x70) *
      (-x738 + x958 + (-x118) * (x1014 - x805 + (-x240) * (x285 - x294)) +
       (-x202) *
         (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294))));
  J[948] =
    80000000.0 * sc[3] * x363 + 15000000.0 * sc[3] * x959 +
    30000000.0 * sc[4] * x831 + 20000000.0 * sc[9] * x617 +
    33000000.0 * sc[9] * x831 + 10600000.0 * x1011 * x363 + x2771 + x3425 +
    x3960 + x558 * x831 + x6018 + x6998 + x8850 + x8879 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x306 - x889) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x806 + x831 + (-x240) * (x306 - x889)) +
    (-15000000.0 * sc[3] * x202) *
      (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889))) +
    (-20000000.0 * sc[9] * x70) *
      (-x738 + x959 + (-x118) * (-x806 + x831 + (-x240) * (x306 - x889)) +
       (-x202) *
         (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889))));
  J[987] =
    90000000.0 * sc[2] + x8883 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x888 - x889) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-15000000.0 * sc[3] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-20000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1026] =
    x8883 + 36300000000000.0 * exp(-28783.993284029999 * invT) +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x888 - x889) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-15000000.0 * sc[3] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-20000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1065] =
    30000000.0 * sc[4] * x1028 + 33000000.0 * sc[9] * x1028 +
    10600000.0 * x1011 * x797 + x1028 * x558 + x3426 + x3961 + x6018 + x6998 +
    x8855 + x8879 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x309 - x889) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (x1028 - x806 + (-x240) * (x309 - x889)) +
    (-15000000.0 * sc[3] * x202) *
      (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889))) +
    (-20000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (x1028 - x806 + (-x240) * (x309 - x889)) +
       (-x202) * (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889))));
  J[1104] =
    -60000000.0 * sc[12] + 80000000.0 * sc[3] * x366 +
    15000000.0 * sc[3] * x963 + 30000000.0 * sc[4] * x691 +
    33000000.0 * sc[9] * x691 + 10600000.0 * x1011 * x366 + x558 * x691 +
    x8925 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x326 - x889) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (x691 - x806 + (-x240) * (x326 - x889)) +
    (-15000000.0 * sc[3] * x202) *
      (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889))) +
    (-20000000.0 * sc[9] * x70) *
      (-x738 + x963 + (-x118) * (x691 - x806 + (-x240) * (x326 - x889)) +
       (-x202) *
         (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889))));
  J[1143] =
    sc[16] * x8928 + x6420 + x8883 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x888 - x889) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-15000000.0 * sc[3] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-20000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1182] =
    -sc[12] * x6128 + x8883 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x888 - x889) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-15000000.0 * sc[3] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-20000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1221] =
    x6423 + x8883 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x888 - x889) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-15000000.0 * sc[3] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-20000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1260] =
    -24600000.0 * sc[12] * x588 + 30000000.0 * sc[4] * x1043 +
    33000000.0 * sc[9] * x1043 + 10600000.0 * x1011 * x797 + x1043 * x558 +
    x3426 + x3961 + x6018 + x6998 + x8855 + x8879 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x176 - x889) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (x1043 - x806 + (-x240) * (x176 - x889)) +
    (-15000000.0 * sc[3] * x202) *
      (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889))) +
    (-20000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (x1043 - x806 + (-x240) * (x176 - x889)) +
       (-x202) * (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889))));
  J[1299] =
    x8883 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x888 - x889) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-15000000.0 * sc[3] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-20000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1338] =
    80000000.0 * sc[3] * x367 + 15000000.0 * sc[3] * x968 +
    30000000.0 * sc[4] * x1045 + 33000000.0 * sc[9] * x1045 +
    10600000.0 * x1011 * x367 + x1045 * x558 + x8925 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x152 - x889) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (x1045 - x806 + (-x240) * (x152 - x889)) +
    (-15000000.0 * sc[3] * x202) *
      (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889))) +
    (-20000000.0 * sc[9] * x70) *
      (-x738 + x968 + (-x118) * (x1045 - x806 + (-x240) * (x152 - x889)) +
       (-x202) *
         (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889))));
  J[1377] =
    80000000.0 * sc[3] * x543 + 15000000.0 * sc[3] * x983 +
    30000000.0 * sc[4] * x232 + 33000000.0 * sc[9] * x232 +
    10600000.0 * x1011 * x543 + x232 * x558 + x8925 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x353 - x889) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (x232 - x806 + (-x240) * (x353 - x889)) +
    (-15000000.0 * sc[3] * x202) *
      (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889))) +
    (-20000000.0 * sc[9] * x70) *
      (-x738 + x983 + (-x118) * (x232 - x806 + (-x240) * (x353 - x889)) +
       (-x202) *
         (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889))));
  J[1416] =
    30000000.0 * sc[4] * x291 + 33000000.0 * sc[9] * x291 +
    10600000.0 * x1011 * x797 + x291 * x558 + x3426 + x3961 + x6018 + x6998 +
    x8855 + x8879 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x357 - x889) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (x291 - x806 + (-x240) * (x357 - x889)) +
    (-15000000.0 * sc[3] * x202) *
      (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889))) +
    (-20000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (x291 - x806 + (-x240) * (x357 - x889)) +
       (-x202) * (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889))));
  J[1455] =
    x8883 +
    (-30000000.0 * sc[4] * x240 - 33000000.0 * sc[9] * x240 - x240 * x558) *
      (x888 - x889) +
    (-15000000.0 * sc[3] * x118 + 80000000.0 * sc[3] * x241 +
     10600000.0 * x1011 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-15000000.0 * sc[3] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-20000000.0 * sc[9] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[13] =
    sc[13] * x2259 * x2264 + 14000000.0 * sc[17] * x289 -
    14000000.0 * sc[17] * x315 - 20000000.0 * sc[5] * x359 +
    20000000.0 * sc[5] * x368 + x1063 * x359 - x1063 * x368 +
    4.1845186046511603e+29 * x108 * x7629 -
    1.1704128440366999e+18 * x2236 * x2240 +
    1.1704128440366999e+18 * x2236 * x2241 - 945000000000.0 * x2243 +
    945000000000.0 * x2253 - x2259 * x2282 + x2444 - x266 * x676 + x376 * x676 -
    x7621 * x7622 * (0.196 * x7642 + 1.4 * x7643) +
    x7621 * x7655 * (0.196 * x7642 + 1.4 * x7643) -
    4.1845186046511603e+29 * x7629 * x7633 + 3549000000000000.0 * x7639 -
    3549000000000000.0 * x7652 + (x240 * x676 - x240 * x991) * (x647 - x669) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (x266 - x376 + (-x240) * (x647 - x669)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669)));
  J[52] =
    -14000000.0 * sc[17] * x620 + 14000000.0 * sc[17] * x670 -
    20000000.0 * sc[5] * x347 + 20000000.0 * sc[5] * x689 + x1063 * x347 -
    x1063 * x689 + x2443 + x2651 + x2764 + x374 * x676 - x676 * x693 +
    (x240 * x676 - x240 * x991) * (x713 - x715) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x374 + x693 + (-x240) * (x713 - x715)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715)));
  J[91] =
    1350000000000.0 * sc[12] * x2248 * x35 * exp(x2249) + 20000000.0 * sc[14] -
    14000000.0 * sc[17] * x678 + 14000000.0 * sc[17] * x703 + sc[24] * x3001 +
    20000000.0 * sc[5] * x688 - 20000000.0 * sc[5] * x690 - x1063 * x688 +
    x1063 * x690 + x2443 + x2764 + x3059 + x676 * x712 - x676 * x716 +
    (x240 * x676 - x240 * x991) * (x734 - x735) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x712 + x716 + (-x240) * (x734 - x735)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735)));
  J[130] =
    -sc[13] * x5767 + 10000000.0 * sc[14] - 14000000.0 * sc[17] * x717 +
    14000000.0 * sc[17] * x719 + 0.384 * sc[20] * exp(x1058) +
    16040000.0 * sc[21] + 96000000.0 * sc[30] + 20000000.0 * sc[5] * x125 -
    20000000.0 * sc[5] * x710 - x1063 * x125 + x1063 * x710 + x2443 + x2764 +
    x3204 - x676 * x721 + x676 * x725 +
    (x240 * x676 - x240 * x991) * (x747 - x748) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (x721 - x725 + (-x240) * (x747 - x748)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748)));
  J[169] =
    sc[12] * x5864 - sc[13] * x423 * x6706 + 5000000.0 * sc[14] -
    14000000.0 * sc[17] * x730 + 14000000.0 * sc[17] * x737 + x1063 * x171 -
    x1063 * x732 + x2443 + x2764 + x3319 - x6752 + x676 * x736 - x676 * x743 -
    x6785 + x6804 + (x240 * x676 - x240 * x991) * (x768 - x770) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x736 + x743 + (-x240) * (x768 - x770)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770)));
  J[208] =
    sc[12] * x7442 - 1000000.0 * sc[13] * x2987 - sc[13] * x7471 +
    14000000.0 * sc[17] * x701 + x1063 * x740 - x1063 * x741 + x2764 + x3400 +
    x676 * x746 - x676 * x757 + x6849 + x7422 + x7671 +
    (x240 * x676 - x240 * x991) * (x800 - x801) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x746 + x757 + (-x240) * (x800 - x801)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801)));
  J[247] =
    -20000000.0 * sc[13] * x3516 + sc[16] * x7722 - 14000000.0 * sc[17] * x754 +
    14000000.0 * sc[17] * x756 - 20000000.0 * sc[5] * x745 +
    20000000.0 * sc[5] * x758 + x1063 * x745 - x1063 * x758 + x2262 + x3580 +
    x3657 - x676 * x761 + x676 * x762 +
    (x240 * x676 - x240 * x991) * (x842 - x844) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (x761 - x762 + (-x240) * (x842 - x844)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844)));
  J[286] =
    -3.042e+16 * refC * sc[13] * x7620 * x7623 + sc[12] * x85 - sc[13] * x6915 +
    3.042e+16 * sc[16] * sc[6] * x7620 * exp(x7636) -
    14000000.0 * sc[17] * x765 + 14000000.0 * sc[17] * x773 -
    20000000.0 * sc[5] * x759 + 20000000.0 * sc[5] * x766 -
    18000.0 * sc[9] * x6750 * x7480 + x1063 * x759 - x1063 * x766 +
    3.5867302325581401e+30 * x108 * x7629 -
    1.0032110091743101e+19 * x2236 * x2240 +
    1.0032110091743101e+19 * x2236 * x2241 - 8100000000000.0 * x2243 +
    8100000000000.0 * x2253 -
    x2258 * x2282 * (12.0 * x2256 * x249 + 1.68 * x2257 * x249) +
    x3551 * (12.0 * x2256 * x249 + 1.68 * x2257 * x249) + x3872 + x676 * x787 -
    x676 * x799 - x7622 * x7739 - 3.5867302325581401e+30 * x7629 * x7633 +
    x7655 * x7739 + (x240 * x676 - x240 * x991) * (x864 - x875) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x787 + x799 + (-x240) * (x864 - x875)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875)));
  J[325] =
    sc[12] * x7493 + x9019 + (x240 * x676 - x240 * x991) * (x888 - x889) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[364] =
    sc[10] * x7032 - sc[13] * x7519 - 1046.0 * sc[15] * x6750 * x8123 -
    14000000.0 * sc[17] * x779 + 14000000.0 * sc[17] * x792 + 18000.0 * sc[25] -
    20000000.0 * sc[5] * x838 + 20000000.0 * sc[5] * x840 -
    18000.0 * sc[7] * x6750 * x7480 + x1063 * x838 - x1063 * x840 + x2443 +
    x2764 + x4047 + x676 * x841 - x676 * x849 + x7524 + x8129 +
    (x240 * x676 - x240 * x991) * (x905 - x906) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x841 + x849 + (-x240) * (x905 - x906)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906)));
  J[403] =
    -sc[13] * x6080 - 14000000.0 * sc[17] * x796 + 14000000.0 * sc[17] * x814 -
    24000000.0 * sc[4] * x6750 * x6797 + 20000000.0 * sc[5] * x195 -
    20000000.0 * sc[5] * x862 + sc[9] * x7032 - x1063 * x195 + x1063 * x862 +
    x2443 + x2764 + x4151 - x676 * x855 + x676 * x865 - x8593 +
    (x240 * x676 - x240 * x991) * (-x244 + x920) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (x855 - x865 + (-x240) * (-x244 + x920)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920)));
  J[442] =
    sc[12] * x8620 - 14000000.0 * sc[17] * x827 + 14000000.0 * sc[17] * x834 -
    20000000.0 * sc[5] * x341 + 20000000.0 * sc[5] * x882 + x1063 * x341 -
    x1063 * x882 + x2262 + x3657 + x4230 + x676 * x786 - x676 * x897 +
    (x240 * x676 - x240 * x991) * (x937 - x938) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x786 + x897 + (-x240) * (x937 - x938)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938)));
  J[481] =
    sc[11] * x8620 - sc[13] * x8142 + 14000000.0 * sc[17] * x851 +
    1350000000000.0 * sc[2] * x2248 * x35 * exp(x2249) + sc[4] * x5864 +
    30000000.0 * sc[4] * x851 + 20000000.0 * sc[4] * x883 + sc[5] * x7442 +
    20000000.0 * sc[5] * x883 + sc[6] * x3572 + sc[7] * x85 + sc[8] * x7493 -
    x1063 * x883 - x676 * x900 + x900 * x991 + x9033 +
    (x240 * x676 - x240 * x991) * (-x889 + x948) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x806 + x900 + (-x240) * (-x889 + x948)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948)));
  J[520] =
    -sc[10] * x6080 - sc[12] * x8142 - 14000000.0 * sc[16] * x439 +
    14000000.0 * sc[17] * x861 - sc[21] * x6152 - sc[3] * x5767 -
    24000000.0 * sc[4] * x2990 * x6797 - 1000000.0 * sc[5] * x2987 -
    sc[5] * x7471 - 20000000.0 * sc[6] * x3516 - sc[7] * x6915 - sc[9] * x7519 +
    x1063 * x886 - x1063 * x895 - x200 * x459 -
    94600000.0 * x226 * exp(259.15658288943098 * invT) - x2264 + x2764 + x3398 +
    x4381 - 5070000000000000.0 * x503 * x7620 * x7623 + x676 * x904 -
    x676 * x908 - x7106 + x7129 - x7541 + x7671 + x8158 - x8638 +
    (x240 * x676 - x240 * x991) * (x961 - x962) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x904 + x908 + (-x240) * (x961 - x962)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962)));
  J[559] =
    14000000.0 * sc[17] * x870 + 20000000.0 * sc[2] + 10000000.0 * sc[3] +
    30000000.0 * sc[4] * x870 + 20000000.0 * sc[4] * x896 + 5000000.0 * sc[4] +
    20000000.0 * sc[5] * x896 - x1063 * x896 + x2401 - x676 * x915 + x7548 +
    x9033 + x915 * x991 + (x240 * x676 - x240 * x991) * (-x889 + x967) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x806 + x915 + (-x240) * (-x889 + x967)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967)));
  J[598] =
    14000000.0 * sc[17] * x892 + 30000000.0 * sc[4] * x892 +
    20000000.0 * sc[4] * x903 + 20000000.0 * sc[5] * x903 -
    1046.0 * sc[9] * x6750 * x8123 - x1063 * x903 - x676 * x709 + x709 * x991 +
    x9033 + (x240 * x676 - x240 * x991) * (-x889 + x971) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (x709 - x806 + (-x240) * (-x889 + x971)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971)));
  J[637] =
    -14000000.0 * sc[13] * x439 - 14000000.0 * sc[17] * x894 +
    14000000.0 * sc[17] * x902 - sc[4] * x6706 * x6750 -
    20000000.0 * sc[5] * x912 + 20000000.0 * sc[5] * x913 + sc[6] * x7722 +
    x1063 * x912 - x1063 * x913 + 8.9668255813953501e+29 * x108 * x7629 -
    2.5080275229357798e+18 * x2236 * x2240 +
    2.5080275229357798e+18 * x2236 * x2241 - 2025000000000.0 * x2243 +
    2025000000000.0 * x2253 -
    x2258 * x2282 * (3.0 * x2256 * x249 + 0.42 * x2257 * x249) +
    x3551 * (3.0 * x2256 * x249 + 0.42 * x2257 * x249) + x4623 + x676 * x926 -
    x676 * x931 - x7622 * x7771 - 8.9668255813953501e+29 * x7629 * x7633 +
    7605000000000000.0 * x7639 - 7605000000000000.0 * x7652 + x7655 * x7771 +
    (x240 * x676 - x240 * x991) * (x572 - x659) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x926 + x931 + (-x240) * (x572 - x659)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659)));
  J[676] =
    14000000.0 * sc[17] * x135 - 14000000.0 * sc[17] * x910 -
    20000000.0 * sc[5] * x510 + 20000000.0 * sc[5] * x928 + x1063 * x510 -
    x1063 * x928 + x2262 + x4750 + 14000000.0 * x6 + x676 * x936 - x676 * x947 +
    (x240 * x676 - x240 * x991) * (-x832 + x837) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x936 + x947 + (-x240) * (-x832 + x837)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837)));
  J[715] =
    -14000000.0 * sc[17] * x911 + 14000000.0 * sc[17] * x917 +
    20000000.0 * sc[5] * x878 - 20000000.0 * sc[5] * x929 - x1063 * x878 +
    x1063 * x929 + x2443 + x2764 + x4824 + x676 * x949 - x676 * x956 +
    (x240 * x676 - x240 * x991) * (x1037 - x1038) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038)));
  J[754] =
    14000000.0 * sc[17] * x922 + 20000000.0 * sc[4] * x189 +
    30000000.0 * sc[4] * x922 + 20000000.0 * sc[5] * x189 - x1063 * x189 -
    x563 * x676 + x563 * x991 - x6783 + x8193 + x9033 +
    (x240 * x676 - x240 * x991) * (x1044 - x889) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (x563 - x806 + (-x240) * (x1044 - x889)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889)));
  J[793] =
    -14000000.0 * sc[17] * x925 + 14000000.0 * sc[17] * x934 +
    0.384 * sc[3] * exp(x1058) - 20000000.0 * sc[5] * x705 +
    20000000.0 * sc[5] * x935 + x1063 * x705 - x1063 * x935 + x2443 + x2764 +
    x4986 + x676 * x966 - x676 * x970 +
    (x240 * x676 - x240 * x991) * (x1059 - x1060) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060)));
  J[832] =
    -sc[13] * x6152 + 14000000.0 * sc[17] * x941 + 16040000.0 * sc[3] -
    24000000.0 * sc[4] * x6749 * x6750 + 20000000.0 * sc[4] * x884 +
    30000000.0 * sc[4] * x941 + 20000000.0 * sc[5] * x884 + 24000000.0 * sc[5] -
    x1063 * x884 - x676 * x977 + x9033 + x977 * x991 +
    (x240 * x676 - x240 * x991) * (x1064 - x889) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889)));
  J[871] =
    -14000000.0 * sc[17] * x477 + 14000000.0 * sc[17] * x952 +
    20000000.0 * sc[5] * x365 - 20000000.0 * sc[5] * x944 - x1063 * x365 +
    x1063 * x944 + 1.79336511627907e+30 * x108 * x7629 -
    5.0160550458715597e+18 * x2236 * x2240 +
    5.0160550458715597e+18 * x2236 * x2241 - 4050000000000.0 * x2243 +
    4050000000000.0 * x2253 -
    x2258 * x2282 * (6.0 * x2256 * x249 + 0.84 * x2257 * x249) - x256 * x676 +
    x3551 * (6.0 * x2256 * x249 + 0.84 * x2257 * x249) + x5175 + x676 * x992 -
    x7622 * x7799 - 1.79336511627907e+30 * x7629 * x7633 + 1.521e+16 * x7639 -
    1.521e+16 * x7652 + x7655 * x7799 +
    (x240 * x676 - x240 * x991) * (x214 - x216) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (x256 - x992 + (-x240) * (x214 - x216)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216)));
  J[910] =
    14000000.0 * sc[17] * x958 - 20000000.0 * sc[5] * x350 +
    20000000.0 * sc[5] * x355 - x1014 * x676 + x1063 * x350 - x1063 * x355 +
    x2764 + x3398 + x5263 + x676 * x805 + x7671 +
    (x240 * x676 - x240 * x991) * (x285 - x294) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (x1014 - x805 + (-x240) * (x285 - x294)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294)));
  J[949] =
    14000000.0 * sc[17] * x959 + sc[2] * x3001 + 20000000.0 * sc[4] * x363 +
    30000000.0 * sc[4] * x959 + 20000000.0 * sc[5] * x363 - x1063 * x363 -
    x676 * x831 + x831 * x991 + x9033 +
    (x240 * x676 - x240 * x991) * (x306 - x889) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x806 + x831 + (-x240) * (x306 - x889)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889)));
  J[988] =
    18000.0 * sc[9] + x9019 + (x240 * x676 - x240 * x991) * (x888 - x889) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1027] =
    x9019 + (x240 * x676 - x240 * x991) * (x888 - x889) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1066] =
    -x1028 * x676 + x1028 * x991 + x3971 + x9018 +
    (x240 * x676 - x240 * x991) * (x309 - x889) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (x1028 - x806 + (-x240) * (x309 - x889)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889)));
  J[1105] =
    14000000.0 * sc[17] * x963 + 20000000.0 * sc[4] * x366 +
    30000000.0 * sc[4] * x963 + 20000000.0 * sc[5] * x366 + 6600000.0 * sc[5] -
    x1063 * x366 - x676 * x691 + x691 * x991 + x7001 + x7671 + x9031 +
    (x240 * x676 - x240 * x991) * (x326 - x889) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (x691 - x806 + (-x240) * (x326 - x889)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889)));
  J[1144] =
    x9019 + (x240 * x676 - x240 * x991) * (x888 - x889) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1183] =
    96000000.0 * sc[3] + 24000000.0 * sc[5] + x9019 +
    (x240 * x676 - x240 * x991) * (x888 - x889) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1222] =
    x9019 + (x240 * x676 - x240 * x991) * (x888 - x889) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1261] =
    -x1043 * x676 + x1043 * x991 + x3971 + x9018 +
    (x240 * x676 - x240 * x991) * (x176 - x889) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (x1043 - x806 + (-x240) * (x176 - x889)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889)));
  J[1300] =
    x9019 + (x240 * x676 - x240 * x991) * (x888 - x889) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1339] =
    14000000.0 * sc[17] * x968 + 20000000.0 * sc[4] * x367 +
    30000000.0 * sc[4] * x968 + 20000000.0 * sc[5] * x367 - x1045 * x676 +
    x1045 * x991 - x1063 * x367 + x7001 + x7671 + x9031 +
    (x240 * x676 - x240 * x991) * (x152 - x889) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (x1045 - x806 + (-x240) * (x152 - x889)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889)));
  J[1378] =
    14000000.0 * sc[17] * x983 + 20000000.0 * sc[4] * x543 +
    30000000.0 * sc[4] * x983 + 20000000.0 * sc[5] * x543 - x1063 * x543 +
    x1063 * x687 - x232 * x676 + x232 * x991 + x2764 + x3398 + x3970 +
    x676 * x806 + x7001 + x7671 + (x240 * x676 - x240 * x991) * (x353 - x889) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (x232 - x806 + (-x240) * (x353 - x889)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889)));
  J[1417] =
    -x291 * x676 + x291 * x991 + x3971 + x9018 +
    (x240 * x676 - x240 * x991) * (x357 - x889) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (x291 - x806 + (-x240) * (x357 - x889)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889)));
  J[1456] =
    2092.0 * sc[37] * exp(1806.0446135731399 * invT) + x7583 + x9019 +
    (x240 * x676 - x240 * x991) * (x888 - x889) +
    (-14000000.0 * sc[17] * x118 - 30000000.0 * sc[4] * x118 +
     20000000.0 * sc[4] * x241 + 20000000.0 * sc[5] * x241 - x1063 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-14000000.0 * sc[17] * x202 - 30000000.0 * sc[4] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[14] = 10570000.0 * sc[14] * x8288 + 10570000.0 * sc[14] * x8292 +
          x1041 * x289 - x1041 * x315 + x2067 - 1183000.0 * x9073 -
          1183000.0 * x9075 + x9078 +
          (-x1041 * x118) * (x266 - x376 + (-x240) * (x647 - x669)) +
          (-x1041 * x202) *
            (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669)));
  J[53] = -x1041 * x620 + x1041 * x670 + x2067 + x279 * x8402 - x279 * x9081 +
          x9083 + x9086 +
          (-x1041 * x118) * (-x374 + x693 + (-x240) * (x713 - x715)) +
          (-x1041 * x202) *
            (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715)));
  J[92] = sc[13] * x2437 * exp(x2421) - 68000000.0 * sc[14] +
          96000000.0 * sc[37] - x1041 * x678 + x1041 * x703 - x2058 + x2067 +
          x2816 + x54 * x8402 - x54 * x9081 - x619 * x8402 + x619 * x9081 +
          x9078 + (-x1041 * x118) * (-x712 + x716 + (-x240) * (x734 - x735)) +
          (-x1041 * x202) *
            (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735)));
  J[131] = -sc[14] * x5806 - 10000000.0 * sc[14] + 36000000.0 * sc[37] +
           16000000.0 * sc[7] * x719 * x77 - x1041 * x717 + x2067 -
           x219 * x8402 + x219 * x9081 + x5756 + x596 * x8402 - x596 * x9081 +
           x9078 + (-x1041 * x118) * (x721 - x725 + (-x240) * (x747 - x748)) +
           (-x1041 * x202) *
             (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748)));
  J[170] = sc[10] * x3279 + sc[15] * x6700 - x1041 * x730 + x1041 * x737 +
           x157 * x8402 - x157 * x9081 + x2067 + x5861 - x633 * x8402 +
           x633 * x9081 + x6758 + x9078 +
           (-x1041 * x118) * (-x736 + x743 + (-x240) * (x768 - x770)) +
           (-x1041 * x202) *
             (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770)));
  J[209] = 13400000.0 * sc[10] + sc[13] * x7471 - x181 * x8402 + x181 * x9081 +
           x3424 + x8461 - 1690000.0 * x9073 + x9078 +
           (-x1041 * x118) * (-x746 + x757 + (-x240) * (x800 - x801)) +
           (-x1041 * x202) *
             (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801)));
  J[248] = 20000000.0 * sc[13] * x3516 - sc[14] * x3452 - x1041 * x754 +
           x1041 * x756 + x3535 + x9107 +
           (-x1041 * x118) * (x761 - x762 + (-x240) * (x842 - x844)) +
           (-x1041 * x202) *
             (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844)));
  J[287] = sc[13] * x6915 + sc[14] * x2401 * x2418 - 6.3 * sc[14] * x6917 +
           90600000.0 * sc[14] * x8288 + 90600000.0 * sc[14] * x8292 +
           1.32e+19 * x2399 * x2435 + 5.3777777777777801e+31 * x2404 * x2409 -
           5.3777777777777801e+31 * x2409 * x2411 - x2418 * x2435 * x2437 +
           x3807 - 1.32e+19 * x3859 - 10140000.0 * x9073 - 10140000.0 * x9075 +
           (-x1041 * x118) * (-x787 + x799 + (-x240) * (x864 - x875)) +
           (-x1041 * x202) *
             (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875)));
  J[326] = x3424 + x9112 +
           (-x1041 * x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
           (-x1041 * x202) *
             (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[365] = sc[10] * x6044 - 154820.0 * ((sc[14]) * (sc[14])) * x8113 -
           sc[14] * x6040 - x1041 * x779 + x1041 * x792 + x2067 + x641 * x8402 -
           x641 * x9081 - x642 * x8402 + x642 * x9081 - x7524 + x9078 +
           (-x1041 * x118) * (-x841 + x849 + (-x240) * (x905 - x906)) +
           (-x1041 * x202) *
             (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906)));
  J[404] = sc[15] * x8550 + sc[33] * x8557 + 2000000.0 * sc[37] * x8541 +
           sc[4] * x3279 + 13400000.0 * sc[5] +
           16000000.0 * sc[7] * x77 * x814 + sc[9] * x6044 - x1041 * x796 +
           x2067 + x231 * x8402 - x231 * x9081 + x9083 + x9086 +
           (-x1041 * x118) * (x855 - x865 + (-x240) * (-x244 + x920)) +
           (-x1041 * x202) *
             (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920)));
  J[443] = -sc[14] * x8614 - x1041 * x827 + x1041 * x834 + x3535 + x9107 +
           (-x1041 * x118) * (-x786 + x897 + (-x240) * (x937 - x938)) +
           (-x1041 * x202) *
             (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938)));
  J[482] =
    x1041 * x851 + x3423 + x649 * x8402 - x649 * x9081 + x9083 + x9086 +
    (-x1041 * x118) * (-x806 + x900 + (-x240) * (-x889 + x948)) +
    (-x1041 * x202) *
      (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948)));
  J[521] = sc[2] * x2437 * exp(x2421) + sc[5] * x7471 +
           20000000.0 * sc[6] * x3516 + sc[7] * x6915 + x1041 * x861 + x3074 +
           x3423 + x9112 +
           (-x1041 * x118) * (-x904 + x908 + (-x240) * (x961 - x962)) +
           (-x1041 * x202) *
             (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962)));
  J[560] =
    -sc[11] * x8614 - 309640.0 * sc[14] * sc[9] * x8113 -
    8.6e+16 * sc[2] * x2027 * x2037 - 68000000.0 * sc[2] - sc[33] * x375 -
    sc[3] * x5806 - 10000000.0 * sc[3] - sc[6] * x3452 - 6.3 * sc[7] * x6917 -
    sc[9] * x6040 + x1041 * x870 - x2401 + x3423 +
    15100000.0 * x602 * exp(x362) + x650 * x8402 - x650 * x9081 - x668 * x8402 +
    x668 * x9081 + x7141 - x7548 - 4000000.0 * x8641 + x9078 +
    (-x1041 * x118) * (-x806 + x915 + (-x240) * (-x889 + x967)) +
    (-x1041 * x202) *
      (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967)));
  J[599] = sc[10] * x8550 + sc[4] * x6700 + x1041 * x892 + x2055 + x3423 +
           x4438 + x6201 + x9112 +
           (-x1041 * x118) * (x709 - x806 + (-x240) * (-x889 + x971)) +
           (-x1041 * x202) *
             (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971)));
  J[638] = 3.3e+18 * x2399 * x2435 + x2402 * (3.0 * x2415 + 0.42 * x2416) +
           1.3444444444444401e+31 * x2404 * x2409 -
           1.3444444444444401e+31 * x2409 * x2411 -
           x2439 * (3.0 * x2415 + 0.42 * x2416) - 3.3e+18 * x3859 + x4535 +
           x674 * x8402 - x674 * x9081 - x686 * x8402 + x686 * x9081 +
           (-x1041 * x118) * (-x926 + x931 + (-x240) * (x572 - x659)) +
           (-x1041 * x202) *
             (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659)));
  J[677] =
    x1041 * x135 - x1041 * x910 + x2422 + x297 * x8402 - x297 * x9081 -
    x320 * x8402 + x320 * x9081 + x3535 +
    (-x1041 * x118) * (-x936 + x947 + (-x240) * (-x832 + x837)) +
    (-x1041 * x202) *
      (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837)));
  J[716] =
    -x1041 * x911 + x1041 * x917 + x2067 + x9112 +
    (-x1041 * x118) * (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (-x1041 * x202) *
      (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038)));
  J[755] = x1041 * x922 + x3423 + x9112 +
           (-x1041 * x118) * (x563 - x806 + (-x240) * (x1044 - x889)) +
           (-x1041 * x202) *
             (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889)));
  J[794] =
    -x1041 * x925 + x1041 * x934 + x2067 + x9112 +
    (-x1041 * x118) * (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (-x1041 * x202) *
      (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060)));
  J[833] =
    x1041 * x941 + x3423 + x9112 +
    (-x1041 * x118) * (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (-x1041 * x202) *
      (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889)));
  J[872] = 45300000.0 * sc[14] * x8288 + 45300000.0 * sc[14] * x8292 +
           6.6e+18 * x2399 * x2435 + x2402 * (6.0 * x2415 + 0.84 * x2416) +
           2.6888888888888901e+31 * x2404 * x2409 -
           2.6888888888888901e+31 * x2409 * x2411 -
           x2439 * (6.0 * x2415 + 0.84 * x2416) - 6.6e+18 * x3859 + x5130 -
           5070000.0 * x9073 - 5070000.0 * x9075 +
           (-x1041 * x118) * (x256 - x992 + (-x240) * (x214 - x216)) +
           (-x1041 * x202) *
             (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216)));
  J[911] = x1041 * x958 + x3423 - x782 * x8402 + x782 * x9081 + x8461 -
           1690000.0 * x9073 + x9078 +
           (-x1041 * x118) * (x1014 - x805 + (-x240) * (x285 - x294)) +
           (-x1041 * x202) *
             (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294)));
  J[950] = x1041 * x959 + x3423 + x9112 +
           (-x1041 * x118) * (-x806 + x831 + (-x240) * (x306 - x889)) +
           (-x1041 * x202) *
             (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889)));
  J[989] = x3424 + x9112 +
           (-x1041 * x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
           (-x1041 * x202) *
             (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1028] = x3424 + x9112 +
            (-x1041 * x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-x1041 * x202) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1067] = x3424 + x9112 +
            (-x1041 * x118) * (x1028 - x806 + (-x240) * (x309 - x889)) +
            (-x1041 * x202) *
              (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889)));
  J[1106] = x1041 * x963 + x3423 + x9112 +
            (-x1041 * x118) * (x691 - x806 + (-x240) * (x326 - x889)) +
            (-x1041 * x202) *
              (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889)));
  J[1145] = x3424 + x9112 +
            (-x1041 * x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-x1041 * x202) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1184] = x3424 + x9112 +
            (-x1041 * x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-x1041 * x202) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1223] = x3424 + x9112 +
            (-x1041 * x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-x1041 * x202) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1262] = x3424 + x809 * x8402 - x809 * x9081 - x8402 * x99 + x9078 +
            x9081 * x99 +
            (-x1041 * x118) * (x1043 - x806 + (-x240) * (x176 - x889)) +
            (-x1041 * x202) *
              (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889)));
  J[1301] = sc[10] * x8557 - sc[14] * x375 + x3424 + x8402 * x881 -
            x881 * x9081 + x9083 + x9086 +
            (-x1041 * x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-x1041 * x202) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1340] = x1041 * x968 + x3423 + x469 * x8402 - x469 * x9081 + x9083 + x9086 +
            (-x1041 * x118) * (x1045 - x806 + (-x240) * (x152 - x889)) +
            (-x1041 * x202) *
              (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889)));
  J[1379] = x1041 * x983 + x3423 + x465 * x8402 - x465 * x9081 + x9083 + x9086 +
            (-x1041 * x118) * (x232 - x806 + (-x240) * (x353 - x889)) +
            (-x1041 * x202) *
              (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889)));
  J[1418] =
    x3424 + x537 * x8402 - x537 * x9081 - x540 * x8402 + x540 * x9081 + x9078 +
    (-x1041 * x118) * (x291 - x806 + (-x240) * (x357 - x889)) +
    (-x1041 * x202) * (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889)));
  J[1457] = 2000000.0 * sc[10] * x8541 + 96000000.0 * sc[2] +
            309640.0 * sc[37] * exp(30.696216614087898 * invT) +
            36000000.0 * sc[3] - 1690000.0 * x1048 * x602 + x3424 -
            x8402 * x957 + x8461 - 1690000.0 * x9073 + x9078 + x9081 * x957 +
            (-x1041 * x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-x1041 * x202) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[15] = x2053 + x289 * x302 - x302 * x315 +
          (-x118 * x302) * (x266 - x376 + (-x240) * (x647 - x669)) +
          (-x202 * x302) *
            (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669)));
  J[54] = x2053 - x302 * x620 + x302 * x670 +
          (-x118 * x302) * (-x374 + x693 + (-x240) * (x713 - x715)) +
          (-x202 * x302) *
            (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715)));
  J[93] = x2053 + x2058 - x2816 - x302 * x678 + x302 * x703 +
          (-x118 * x302) * (-x712 + x716 + (-x240) * (x734 - x735)) +
          (-x202 * x302) *
            (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735)));
  J[132] = x2053 - x302 * x717 + x302 * x719 - x5756 +
           (-x118 * x302) * (x721 - x725 + (-x240) * (x747 - x748)) +
           (-x202 * x302) *
             (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748)));
  J[171] = sc[10] * x6576 * x94 + sc[14] * x5857 - sc[15] * x6700 +
           60000000.0 * sc[37] + x2053 - x302 * x730 + x302 * x737 +
           (-x118 * x302) * (-x736 + x743 + (-x240) * (x768 - x770)) +
           (-x202 * x302) *
             (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770)));
  J[210] = x7815 + (-x118 * x302) * (-x746 + x757 + (-x240) * (x800 - x801)) +
           (-x202 * x302) *
             (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801)));
  J[249] = sc[14] * x3452 - x302 * x754 + x302 * x756 + x7816 +
           (-x118 * x302) * (x761 - x762 + (-x240) * (x842 - x844)) +
           (-x202 * x302) *
             (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844)));
  J[288] =
    6.3 * sc[14] * x6917 - 1.62e+27 * x114 * x429 * x607 + x114 * x6 * x94 -
    x2029 * (1.68 * x2030 + 12.0 * x3525) +
    x2032 * (1.68 * x2030 + 12.0 * x3525) + 8.8752e+26 * x2042 * x2045 -
    8.8752e+26 * x2042 * x2062 - 2.187e+46 * x284 * x6 * x92 - x302 * x765 +
    x302 * x773 + 5.16e+17 * x3520 - 5.16e+17 * x3530 + 2.187e+46 * x606 * x92 -
    1.62e+27 * x607 * x6577 - 6.9428571428571398e+45 * x6562 * x6563 +
    6.9428571428571398e+45 * x6562 * x6565 +
    x6570 * x6579 * (1.68 * x6566 + 12.0 * x6568) -
    x6570 * x6586 * (1.68 * x6566 + 12.0 * x6568) + 1.62e+27 * x6582 * x91 +
    1.62e+27 * x7818 * x91 - x7820 * x7880 + x7826 * x7880 +
    (-x118 * x302) * (-x787 + x799 + (-x240) * (x864 - x875)) +
    (-x202 * x302) *
      (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875)));
  J[327] =
    x7815 + (-x118 * x302) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x302) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[366] = -1046.0 * sc[15] * x6750 * x8123 - sc[15] * x7009 + x2053 -
           x302 * x779 + x302 * x792 +
           (-x118 * x302) * (-x841 + x849 + (-x240) * (x905 - x906)) +
           (-x202 * x302) *
             (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906)));
  J[405] = -sc[15] * x8550 + sc[4] * x6576 * x94 + x2053 - x302 * x796 +
           x302 * x814 +
           (-x118 * x302) * (x855 - x865 + (-x240) * (-x244 + x920)) +
           (-x202 * x302) *
             (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920)));
  J[444] = sc[14] * x8614 - x302 * x827 + x302 * x834 + x7816 +
           (-x118 * x302) * (-x786 + x897 + (-x240) * (x937 - x938)) +
           (-x202 * x302) *
             (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938)));
  J[483] =
    x302 * x851 + x6571 +
    (-x118 * x302) * (-x806 + x900 + (-x240) * (-x889 + x948)) +
    (-x202 * x302) *
      (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948)));
  J[522] = x302 * x861 + x6571 + x8158 +
           (-x118 * x302) * (-x904 + x908 + (-x240) * (x961 - x962)) +
           (-x202 * x302) *
             (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962)));
  J[561] =
    sc[11] * x8614 + 8.6e+16 * sc[2] * x2027 * x2037 + sc[4] * x5857 +
    sc[6] * x3452 + 6.3 * sc[7] * x6917 + x302 * x870 + x6571 +
    (-x118 * x302) * (-x806 + x915 + (-x240) * (-x889 + x967)) +
    (-x202 * x302) *
      (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967)));
  J[600] = -sc[10] * x8550 - sc[4] * x6700 - 1046.0 * sc[9] * x6750 * x8123 -
           sc[9] * x7009 - x2055 + x302 * x892 - 2.7e+26 * x426 * x6577 -
           x4438 - x6201 + x6571 - x7824 +
           (-x118 * x302) * (x709 - x806 + (-x240) * (-x889 + x971)) +
           (-x202 * x302) *
             (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971)));
  J[639] =
    -4.05e+26 * x114 * x429 * x607 - x2029 * (0.42 * x2030 + 3.0 * x3525) +
    x2032 * (0.42 * x2030 + 3.0 * x3525) + 2.2188e+26 * x2042 * x2045 -
    2.2188e+26 * x2042 * x2062 - x302 * x894 + x302 * x902 + 1.29e+17 * x3520 -
    1.29e+17 * x3530 + 5.4675e+45 * x606 * x92 - 4.05e+26 * x607 * x6577 -
    1.73571428571429e+45 * x6562 * x6563 +
    1.73571428571429e+45 * x6562 * x6565 +
    x6570 * x6579 * (0.42 * x6566 + 3.0 * x6568) -
    x6570 * x6586 * (0.42 * x6566 + 3.0 * x6568) + 4.05e+26 * x6582 * x91 +
    4.05e+26 * x7818 * x91 - x7820 * x7917 + x7826 * x7917 - 5.4675e+45 * x97 +
    (-x118 * x302) * (-x926 + x931 + (-x240) * (x572 - x659)) +
    (-x202 * x302) *
      (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659)));
  J[678] =
    x135 * x302 - x302 * x910 + x7816 +
    (-x118 * x302) * (-x936 + x947 + (-x240) * (-x832 + x837)) +
    (-x202 * x302) *
      (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837)));
  J[717] =
    x2053 - x302 * x911 + x302 * x917 +
    (-x118 * x302) * (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (-x202 * x302) *
      (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038)));
  J[756] = x302 * x922 + x6571 +
           (-x118 * x302) * (x563 - x806 + (-x240) * (x1044 - x889)) +
           (-x202 * x302) *
             (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889)));
  J[795] =
    x2053 - x302 * x925 + x302 * x934 +
    (-x118 * x302) * (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (-x202 * x302) *
      (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060)));
  J[834] =
    x302 * x941 + x6571 +
    (-x118 * x302) * (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (-x202 * x302) *
      (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889)));
  J[873] = 2.58e+17 * sc[14] * x2037 * x2040 - 8.1e+26 * x114 * x429 * x607 -
           x2029 * (0.84 * x2030 + 6.0 * x3525) +
           x2032 * (0.84 * x2030 + 6.0 * x3525) -
           2.58e+17 * x2037 * x2054 * x607 + 4.4376e+26 * x2042 * x2045 -
           4.4376e+26 * x2042 * x2062 - x302 * x477 + x302 * x952 +
           1.0935e+46 * x606 * x92 - 8.1e+26 * x607 * x6577 -
           3.4714285714285699e+45 * x6562 * x6563 +
           3.4714285714285699e+45 * x6562 * x6565 + x6579 * x7299 +
           8.1e+26 * x6582 * x91 - x6586 * x7299 + 8.1e+26 * x7818 * x91 -
           x7820 * x808 + x7826 * x808 - 1.0935e+46 * x97 +
           (-x118 * x302) * (x256 - x992 + (-x240) * (x214 - x216)) +
           (-x202 * x302) *
             (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216)));
  J[912] = x302 * x958 + x6571 +
           (-x118 * x302) * (x1014 - x805 + (-x240) * (x285 - x294)) +
           (-x202 * x302) *
             (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294)));
  J[951] = x302 * x959 + x6571 +
           (-x118 * x302) * (-x806 + x831 + (-x240) * (x306 - x889)) +
           (-x202 * x302) *
             (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889)));
  J[990] =
    x7815 + (-x118 * x302) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x302) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1029] =
    x7815 + (-x118 * x302) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x302) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1068] =
    x7815 + (-x118 * x302) * (x1028 - x806 + (-x240) * (x309 - x889)) +
    (-x202 * x302) * (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889)));
  J[1107] = x302 * x963 + x6571 +
            (-x118 * x302) * (x691 - x806 + (-x240) * (x326 - x889)) +
            (-x202 * x302) *
              (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889)));
  J[1146] =
    x7815 + (-x118 * x302) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x302) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1185] =
    x7815 + (-x118 * x302) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x302) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1224] =
    x7815 + (-x118 * x302) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x302) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1263] =
    x7815 + (-x118 * x302) * (x1043 - x806 + (-x240) * (x176 - x889)) +
    (-x202 * x302) * (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889)));
  J[1302] =
    x7815 + (-x118 * x302) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x302) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1341] = x302 * x968 + x6571 +
            (-x118 * x302) * (x1045 - x806 + (-x240) * (x152 - x889)) +
            (-x202 * x302) *
              (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889)));
  J[1380] = x302 * x983 + x6571 +
            (-x118 * x302) * (x232 - x806 + (-x240) * (x353 - x889)) +
            (-x202 * x302) *
              (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889)));
  J[1419] =
    x7815 + (-x118 * x302) * (x291 - x806 + (-x240) * (x357 - x889)) +
    (-x202 * x302) * (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889)));
  J[1458] =
    2092.0 * sc[37] * exp(1806.0446135731399 * invT) + 60000000.0 * sc[4] +
    x7815 + (-x118 * x302) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x302) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[16] = 2100000.0 * sc[16] * x104 * x9196 + 2100000.0 * sc[16] * x369 +
          14000000.0 * sc[17] * x289 - 14000000.0 * sc[17] * x315 +
          50000000.0 * sc[23] * x266 - 30000000.0 * sc[23] * x359 +
          30000000.0 * sc[23] * x368 - 50000000.0 * sc[23] * x376 +
          40000000.0 * sc[9] * x289 - 40000000.0 * sc[9] * x315 -
          6.2534197530864195e+36 * x145 * x505 +
          6.2534197530864195e+36 * x145 * x771 - 1.883e+16 * x206 + x2234 +
          x2540 + x261 * x359 - x261 * x368 - x266 * x371 + x266 * x558 -
          x289 * x358 + x315 * x358 + x359 * x627 - x368 * x627 + x371 * x376 -
          x376 * x558 - x525 * x9188 + 1400000000.0 * x5596 +
          1400000000.0 * x5598 + x5648 - 1.883e+21 * x681 + x708 * x9167 +
          x7658 - x9167 * x9202 + 1.883e+16 * x9175 - 1.013054e+25 * x9178 +
          x9188 * x9192 + 1.013054e+25 * x9205 + 1.883e+21 * x9213 -
          38500.0 * x9229 - 38500.0 * x9234 + 217000000.0 * x9239 -
          217000000.0 * x9243 +
          (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
           x240 * x371 - x240 * x558) *
            (x647 - x669) +
          (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
           15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 + x118 * x358 -
           x241 * x261 - x241 * x627) *
            (x266 - x376 + (-x240) * (x647 - x669)) +
          (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
           40000000.0 * sc[9] * x202 + x202 * x358) *
            (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669)));
  J[55] = -sc[16] * x1714 - 14000000.0 * sc[17] * x620 +
          14000000.0 * sc[17] * x670 - 30000000.0 * sc[23] * x347 -
          50000000.0 * sc[23] * x374 + 30000000.0 * sc[23] * x689 +
          50000000.0 * sc[23] * x693 - 40000000.0 * sc[9] * x620 +
          40000000.0 * sc[9] * x670 + x261 * x347 - x261 * x689 + x2636 +
          x2670 + x2689 + x279 * x5656 + x279 * x9253 - x279 * x9260 +
          x347 * x627 + x358 * x620 - x358 * x670 + x371 * x374 - x371 * x693 -
          x374 * x558 + x558 * x693 + x5625 * x713 - x5625 * x715 -
          x627 * x689 + x9262 + x9296 + x9297 +
          (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
           x240 * x371 - x240 * x558) *
            (x713 - x715) +
          (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
           15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 + x118 * x358 -
           x241 * x261 - x241 * x627) *
            (-x374 + x693 + (-x240) * (x713 - x715)) +
          (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
           40000000.0 * sc[9] * x202 + x202 * x358) *
            (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715)));
  J[94] = 120000000.0 * sc[12] + sc[17] * x2939 + sc[17] * x2944 -
          14000000.0 * sc[17] * x678 + 14000000.0 * sc[17] * x703 +
          30000000.0 * sc[23] * x688 - 30000000.0 * sc[23] * x690 -
          50000000.0 * sc[23] * x712 + 50000000.0 * sc[23] * x716 +
          100000000.0 * sc[23] - 28000000.0 * sc[4] * x421 * x423 -
          40000000.0 * sc[9] * x678 + 40000000.0 * sc[9] * x703 - x261 * x688 +
          x261 * x690 - 200000000.0 * x2845 * x2846 + x3012 + x3100 +
          x358 * x678 - x358 * x703 + x371 * x712 - x371 * x716 + x54 * x5656 +
          x54 * x9253 - x54 * x9260 - x558 * x712 + x558 * x716 + x5625 * x734 -
          x5625 * x735 - x5656 * x619 - x619 * x9253 + x619 * x9260 -
          x627 * x688 + x627 * x690 + x9295 + x9297 +
          (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
           x240 * x371 - x240 * x558) *
            (x734 - x735) +
          (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
           15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 + x118 * x358 -
           x241 * x261 - x241 * x627) *
            (-x712 + x716 + (-x240) * (x734 - x735)) +
          (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
           40000000.0 * sc[9] * x202 + x202 * x358) *
            (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735)));
  J[133] = 30000000.0 * sc[12] + sc[17] * x5759 - 14000000.0 * sc[17] * x717 +
           14000000.0 * sc[17] * x719 + 4.08 * sc[18] * x3161 +
           48000000.0 * sc[19] + 30000000.0 * sc[23] * x125 -
           30000000.0 * sc[23] * x710 + 50000000.0 * sc[23] * x721 -
           50000000.0 * sc[23] * x725 + 200000000.0 * sc[23] + sc[36] * x5785 -
           40000000.0 * sc[9] * x717 + 40000000.0 * sc[9] * x719 - x125 * x261 -
           x125 * x627 - x219 * x5656 - x219 * x9253 + x219 * x9260 +
           x261 * x710 + x3180 + x3215 + x358 * x717 - x358 * x719 -
           x371 * x721 + x371 * x725 + x558 * x721 - x558 * x725 +
           x5656 * x596 + x5723 + x5842 + x596 * x9253 - x596 * x9260 +
           x627 * x710 + x9295 + x9297 +
           (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
            x240 * x371 - x240 * x558) *
             (x747 - x748) +
           (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
            15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
            x118 * x358 - x241 * x261 - x241 * x627) *
             (x721 - x725 + (-x240) * (x747 - x748)) +
           (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
            40000000.0 * sc[9] * x202 + x202 * x358) *
             (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748)));
  J[172] = 30200000.0 * sc[12] - sc[13] * x423 * x6706 + sc[17] * x6692 -
           14000000.0 * sc[17] * x730 + 14000000.0 * sc[17] * x737 -
           30000000.0 * sc[23] * x171 + 30000000.0 * sc[23] * x732 -
           50000000.0 * sc[23] * x736 + 50000000.0 * sc[23] * x743 -
           40000000.0 * sc[9] * x730 + 40000000.0 * sc[9] * x737 +
           x157 * x5656 + x157 * x9253 - x157 * x9260 + x171 * x261 +
           x171 * x627 - x261 * x732 - 3200000.0 * x2846 * x6711 + x3294 +
           x358 * x730 - x358 * x737 + x371 * x736 - x371 * x743 - x558 * x736 +
           x558 * x743 + x5625 * x768 - x5625 * x770 - x5656 * x633 + x597 -
           x627 * x732 - x633 * x9253 + x633 * x9260 + x6745 + x6808 + x9295 +
           x9297 +
           (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
            x240 * x371 - x240 * x558) *
             (x768 - x770) +
           (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
            15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
            x118 * x358 - x241 * x261 - x241 * x627) *
             (-x736 + x743 + (-x240) * (x768 - x770)) +
           (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
            40000000.0 * sc[9] * x202 + x202 * x358) *
             (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770)));
  J[211] = -sc[16] * x2299 - 30000000.0 * sc[23] * x740 +
           30000000.0 * sc[23] * x741 - 50000000.0 * sc[23] * x746 +
           50000000.0 * sc[23] * x757 - x181 * x5656 - x181 * x9253 +
           x181 * x9260 + 8300000.0 * x2524 + x261 * x740 - x261 * x741 +
           x3409 + x3426 + x371 * x746 - x371 * x757 - x558 * x746 +
           x558 * x757 + x5625 * x800 - x5625 * x801 + x627 * x740 -
           x627 * x741 - x6821 - 55000.0 * x9234 + x9295 + x9297 + x9367 +
           (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
            x240 * x371 - x240 * x558) *
             (x800 - x801) +
           (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
            15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
            x118 * x358 - x241 * x261 - x241 * x627) *
             (-x746 + x757 + (-x240) * (x800 - x801)) +
           (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
            40000000.0 * sc[9] * x202 + x202 * x358) *
             (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801)));
  J[250] = -sc[16] * x3547 - 15000000.0 * sc[16] * x442 - sc[16] * x7722 -
           14000000.0 * sc[17] * x754 + 14000000.0 * sc[17] * x756 -
           30000000.0 * sc[23] * x745 + 30000000.0 * sc[23] * x758 +
           50000000.0 * sc[23] * x761 - 50000000.0 * sc[23] * x762 -
           40000000.0 * sc[9] * x754 + 40000000.0 * sc[9] * x756 + x261 * x745 -
           x261 * x758 + x358 * x754 - x358 * x756 + x3610 - x371 * x761 +
           x371 * x762 + x558 * x761 - x558 * x762 + 4000000000.0 * x5596 +
           4000000000.0 * x5598 + x5972 + x627 * x745 - x627 * x758 + x7720 +
           6000000.0 * x9364 + 6000000.0 * x9381 + x9386 +
           (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
            x240 * x371 - x240 * x558) *
             (x842 - x844) +
           (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
            15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
            x118 * x358 - x241 * x261 - x241 * x627) *
             (x761 - x762 + (-x240) * (x842 - x844)) +
           (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
            40000000.0 * sc[9] * x202 + x202 * x358) *
             (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844)));
  J[289] =
    -12000000.0 * sc[16] * x434 - sc[16] * x6953 - 14000000.0 * sc[17] * x765 +
    14000000.0 * sc[17] * x773 - 30000000.0 * sc[23] * x759 +
    30000000.0 * sc[23] * x766 - 50000000.0 * sc[23] * x787 +
    50000000.0 * sc[23] * x799 - 2.69e+21 * sc[24] * x150 * x503 * x9199 -
    40000000.0 * sc[9] * x765 + 40000000.0 * sc[9] * x773 +
    2.69e+21 * x150 * x35 * x681 - 1.614e+17 * x206 + x261 * x759 -
    x261 * x766 + x358 * x765 - x358 * x773 + x371 * x787 - x371 * x799 +
    x3808 + x3884 - x525 * (12.0 * x249 * x9185 + 1.68 * x249 * x9187) -
    x558 * x787 + x558 * x799 + 12000000000.0 * x5596 + 12000000000.0 * x5598 +
    x6005 + x627 * x759 - x627 * x766 + 1.614e+22 * x631 * x9199 -
    1.614e+22 * x681 + x7744 + 1.614e+17 * x9175 - 8.68332e+25 * x9178 +
    x9192 * (12.0 * x249 * x9185 + 1.68 * x249 * x9187) + 8.68332e+25 * x9205 -
    330000.0 * x9229 + 1860000000.0 * x9239 - 1860000000.0 * x9243 +
    5.3600740740740798e+37 * x9283 - 5.3600740740740798e+37 * x9286 +
    18000000.0 * x9364 + 18000000.0 * x9381 - x9427 +
    (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 + x240 * x371 -
     x240 * x558) *
      (x864 - x875) +
    (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
     15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 + x118 * x358 -
     x241 * x261 - x241 * x627) *
      (-x787 + x799 + (-x240) * (x864 - x875)) +
    (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
     40000000.0 * sc[9] * x202 + x202 * x358) *
      (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875)));
  J[328] = x9455 +
           (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
            x240 * x371 - x240 * x558) *
             (x888 - x889) +
           (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
            15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
            x118 * x358 - x241 * x261 - x241 * x627) *
             (-x806 + x839 + (-x240) * (x888 - x889)) +
           (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
            40000000.0 * sc[9] * x202 + x202 * x358) *
             (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[367] = -14000000.0 * sc[17] * x779 + 14000000.0 * sc[17] * x792 +
           3200000.0 * sc[23] * x7014 - 30000000.0 * sc[23] * x838 +
           30000000.0 * sc[23] * x840 - 50000000.0 * sc[23] * x841 +
           50000000.0 * sc[23] * x849 + 18000.0 * sc[25] -
           40000000.0 * sc[9] * x779 + 40000000.0 * sc[9] * x792 +
           58000000.0 * x242 * exp(-289.85279950351901 * invT) + x261 * x838 -
           x261 * x840 + x358 * x779 - x358 * x792 + x371 * x841 - x371 * x849 +
           x4024 + x4055 - x558 * x841 + x558 * x849 + x5625 * x905 -
           x5625 * x906 + x5656 * x641 - x5656 * x642 + 40000000.0 * x6 -
           x6043 + x627 * x838 - x627 * x840 + x641 * x9253 - x641 * x9260 -
           x642 * x9253 + x642 * x9260 + x7526 + x9295 + x9297 +
           (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
            x240 * x371 - x240 * x558) *
             (x905 - x906) +
           (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
            15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
            x118 * x358 - x241 * x261 - x241 * x627) *
             (-x841 + x849 + (-x240) * (x905 - x906)) +
           (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
            40000000.0 * sc[9] * x202 + x202 * x358) *
             (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906)));
  J[406] = 8480000.0 * sc[12] - 14000000.0 * sc[17] * x796 +
           14000000.0 * sc[17] * x814 + 30000000.0 * sc[23] * x195 +
           50000000.0 * sc[23] * x855 - 30000000.0 * sc[23] * x862 -
           50000000.0 * sc[23] * x865 + 50000000.0 * sc[23] -
           40000000.0 * sc[9] * x796 + 40000000.0 * sc[9] * x814 - x195 * x261 -
           x195 * x627 + x231 * x5656 + x231 * x9253 - x231 * x9260 -
           x244 * x5625 + x261 * x862 + x2689 + x358 * x796 - x358 * x814 -
           x371 * x855 + x371 * x865 + x4135 + x4168 + x558 * x855 -
           x558 * x865 + x5625 * x920 + x627 * x862 + x8605 + x9262 + x9296 +
           x9297 +
           (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
            x240 * x371 - x240 * x558) *
             (-x244 + x920) +
           (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
            15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
            x118 * x358 - x241 * x261 - x241 * x627) *
             (x855 - x865 + (-x240) * (-x244 + x920)) +
           (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
            40000000.0 * sc[9] * x202 + x202 * x358) *
             (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920)));
  J[445] = -sc[16] * x8616 - 14000000.0 * sc[17] * x827 +
           14000000.0 * sc[17] * x834 - 30000000.0 * sc[23] * x341 -
           50000000.0 * sc[23] * x786 + 30000000.0 * sc[23] * x882 +
           50000000.0 * sc[23] * x897 - 40000000.0 * sc[9] * x827 +
           40000000.0 * sc[9] * x834 + x261 * x341 - x261 * x882 + x341 * x627 +
           x358 * x827 - x358 * x834 + x371 * x786 - x371 * x897 + x4214 -
           x423 * x8825 + x4244 - x558 * x786 + x558 * x897 +
           4000000000.0 * x5596 + 4000000000.0 * x5598 + x5625 * x937 -
           x5625 * x938 - x627 * x882 + x7720 + x9297 + 6000000.0 * x9364 +
           6000000.0 * x9381 + x9386 +
           (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
            x240 * x371 - x240 * x558) *
             (x937 - x938) +
           (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
            15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
            x118 * x358 - x241 * x261 - x241 * x627) *
             (-x786 + x897 + (-x240) * (x937 - x938)) +
           (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
            40000000.0 * sc[9] * x202 + x202 * x358) *
             (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938)));
  J[484] =
    8480000.0 * sc[10] - sc[16] * x8915 + 14000000.0 * sc[17] * x851 +
    sc[18] * x8899 + 90330000.0 * sc[19] + sc[20] * x8906 +
    30000000.0 * sc[23] * x883 + 50000000.0 * sc[23] * x900 +
    60000000.0 * sc[28] + 120000000.0 * sc[2] + 30000000.0 * sc[3] +
    30200000.0 * sc[4] + 40000000.0 * sc[9] * x851 - x261 * x883 - x358 * x851 -
    x371 * x900 + x4295 + x4302 + x558 * x900 + x5625 * x948 + x5656 * x649 +
    x6023 - x627 * x883 + x649 * x9253 - x649 * x9260 + x7538 + x7671 + x8879 +
    x9262 + x9296 + x9446 + x9451 + x9503 +
    (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 + x240 * x371 -
     x240 * x558) *
      (-x889 + x948) +
    (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
     15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 + x118 * x358 -
     x241 * x261 - x241 * x627) *
      (-x806 + x900 + (-x240) * (-x889 + x948)) +
    (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
     40000000.0 * sc[9] * x202 + x202 * x358) *
      (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948)));
  J[523] = -14000000.0 * sc[16] * x439 + 14000000.0 * sc[17] * x861 -
           30000000.0 * sc[23] * x886 + 30000000.0 * sc[23] * x895 -
           50000000.0 * sc[23] * x904 + 50000000.0 * sc[23] * x908 -
           sc[4] * x423 * x6706 + 40000000.0 * sc[9] * x861 + x261 * x886 -
           x261 * x895 + x3425 - x358 * x861 + x371 * x904 - x371 * x908 +
           x4368 + 5070000000000000.0 * x503 * x7620 * x7623 - x558 * x904 +
           x558 * x908 + x5625 * x961 - x5625 * x962 + x5686 + x627 * x886 -
           x627 * x895 + x7671 + x9296 + x9366 + x9438 +
           (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
            x240 * x371 - x240 * x558) *
             (x961 - x962) +
           (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
            15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
            x118 * x358 - x241 * x261 - x241 * x627) *
             (-x904 + x908 + (-x240) * (x961 - x962)) +
           (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
            40000000.0 * sc[9] * x202 + x202 * x358) *
             (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962)));
  J[562] =
    14000000.0 * sc[17] * x870 + 30000000.0 * sc[23] * x896 +
    50000000.0 * sc[23] * x915 + 15000000.0 * sc[3] * x870 +
    40000000.0 * sc[9] * x870 - x261 * x896 + x3425 - x358 * x870 -
    x371 * x915 + x4432 + x558 * x915 + x5625 * x967 + x5656 * x650 -
    x5656 * x668 + x6023 - x627 * x896 + x650 * x9253 - x650 * x9260 -
    x668 * x9253 + x668 * x9260 + x7671 + x8879 + x9295 + x9446 + x9451 +
    x9503 +
    (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 + x240 * x371 -
     x240 * x558) *
      (-x889 + x967) +
    (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
     15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 + x118 * x358 -
     x241 * x261 - x241 * x627) *
      (-x806 + x915 + (-x240) * (-x889 + x967)) +
    (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
     40000000.0 * sc[9] * x202 + x202 * x358) *
      (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967)));
  J[601] = 14000000.0 * sc[17] * x892 + 50000000.0 * sc[23] * x709 +
           30000000.0 * sc[23] * x903 + 57000000.0 * sc[3] * x709 +
           15000000.0 * sc[3] * x892 + 50000000.0 * sc[4] * x971 +
           40000000.0 * sc[9] * x892 + x261 * x687 - x261 * x903 + x3425 -
           x358 * x892 - x371 * x709 + x371 * x806 + x3908 + x558 * x709 +
           x5625 * x971 + x6023 + x627 * x687 - x627 * x903 + x7671 + x8879 +
           x9296 + x9366 + x9438 + x9443 + x9451 +
           (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
            x240 * x371 - x240 * x558) *
             (-x889 + x971) +
           (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
            15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
            x118 * x358 - x241 * x261 - x241 * x627) *
             (x709 - x806 + (-x240) * (-x889 + x971)) +
           (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
            40000000.0 * sc[9] * x202 + x202 * x358) *
             (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971)));
  J[640] =
    -refCinv * sc[11] * x8825 - sc[11] * x8616 - 14000000.0 * sc[13] * x439 -
    14000000.0 * sc[17] * x894 + 14000000.0 * sc[17] * x902 -
    40000000.0 * sc[18] * x423 * x9550 - 50000000.0 * sc[18] * x545 -
    sc[1] * x1714 - sc[20] * x6209 - sc[20] * x8653 - sc[20] * x8934 -
    sc[21] * x8932 - 50000000.0 * sc[23] * x926 + 50000000.0 * sc[23] * x931 -
    sc[29] * x8928 - sc[34] * x467 - 6400000.0 * sc[4] * x423 * x6711 -
    sc[4] * x6706 * x6750 - sc[5] * x2299 - 12000000.0 * sc[7] * x434 -
    sc[7] * x6953 - 40000000.0 * sc[9] * x894 + 40000000.0 * sc[9] * x902 -
    x200 * x259 - 2.69e+21 * x200 * x316 * x35 - 4.035e+16 * x206 - x209 +
    2.17083e+25 * x226 * x263 * x9177 + x261 * x912 - x261 * x913 -
    400000000.0 * x2845 * x424 + x358 * x894 - x358 * x902 + x371 * x926 -
    x371 * x931 + x4115 + x4679 -
    x525 * (3.0 * x249 * x9185 + 0.42 * x249 * x9187) + x5656 * x674 -
    x5656 * x686 - 100000000.0 * x6 * x81 + 3000000.0 * x602 * x9196 +
    2000000000.0 * x602 * exp(x5593) - x6211 - 2.17083e+25 * x623 * x9177 +
    x6249 + x627 * x912 - x627 * x913 + x674 * x9253 - x674 * x9260 -
    4.035e+21 * x681 - x686 * x9253 + x686 * x9260 + x708 * x9543 - x7162 +
    x7183 + x7777 + x8939 + 4.035e+16 * x9175 +
    x9192 * (3.0 * x249 * x9185 + 0.42 * x249 * x9187) - x9202 * x9543 +
    4.035e+21 * x9213 + 1.34001851851852e+37 * x9283 -
    1.34001851851852e+37 * x9286 + x9579 + x9589 +
    (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 + x240 * x371 -
     x240 * x558) *
      (x572 - x659) +
    (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
     15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 + x118 * x358 -
     x241 * x261 - x241 * x627) *
      (-x926 + x931 + (-x240) * (x572 - x659)) +
    (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
     40000000.0 * sc[9] * x202 + x202 * x358) *
      (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659)));
  J[679] =
    14000000.0 * sc[17] * x135 - 14000000.0 * sc[17] * x910 -
    30000000.0 * sc[23] * x510 + 30000000.0 * sc[23] * x928 -
    50000000.0 * sc[23] * x936 + 50000000.0 * sc[23] * x947 + sc[2] * x2939 +
    sc[2] * x2944 + sc[32] * x9597 + sc[3] * x5759 + sc[4] * x6692 +
    40000000.0 * sc[9] * x135 - 40000000.0 * sc[9] * x910 - x135 * x358 +
    x261 * x510 - x261 * x928 + x297 * x5656 + x297 * x9253 - x297 * x9260 -
    x320 * x5656 - x320 * x9253 + x320 * x9260 + x358 * x910 + x371 * x936 -
    x371 * x947 + x4772 + x510 * x627 + 14000000.0 * x6 - x627 * x928 + x6282 +
    x7720 + x8943 +
    (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 + x240 * x371 -
     x240 * x558) *
      (-x832 + x837) +
    (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
     15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 + x118 * x358 -
     x241 * x261 - x241 * x627) *
      (-x936 + x947 + (-x240) * (-x832 + x837)) +
    (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
     40000000.0 * sc[9] * x202 + x202 * x358) *
      (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837)));
  J[718] =
    sc[12] * x8899 - 50000000.0 * sc[16] * x545 - 14000000.0 * sc[17] * x911 +
    14000000.0 * sc[17] * x917 + 30000000.0 * sc[23] * x878 -
    30000000.0 * sc[23] * x929 - 50000000.0 * sc[23] * x949 +
    50000000.0 * sc[23] * x956 + 4.08 * sc[3] * x3161 -
    57000000.0 * sc[3] * x949 + 57000000.0 * sc[3] * x956 +
    50000000.0 * sc[4] * x1037 - 50000000.0 * sc[4] * x1038 -
    40000000.0 * sc[9] * x911 + 40000000.0 * sc[9] * x917 + x1037 * x5625 -
    x1038 * x5625 + 8300000.0 * x2524 - x261 * x878 + x261 * x929 + x2689 -
    20000000.0 * x2846 * x9550 + x358 * x911 - x358 * x917 + x371 * x949 -
    x371 * x956 + x4812 - x558 * x949 + x558 * x956 + 2000000000.0 * x5598 -
    x627 * x878 + x627 * x929 + x7229 + x9296 + x9297 + 3000000.0 * x9364 +
    x9438 +
    (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 + x240 * x371 -
     x240 * x558) *
      (x1037 - x1038) +
    (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
     15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 + x118 * x358 -
     x241 * x261 - x241 * x627) *
      (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
     40000000.0 * sc[9] * x202 + x202 * x358) *
      (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038)));
  J[757] = 90330000.0 * sc[12] - 30000000.0 * sc[16] * x518 - sc[16] * x8930 +
           14000000.0 * sc[17] * x922 + 30000000.0 * sc[23] * x189 +
           50000000.0 * sc[23] * x563 + 57000000.0 * sc[3] * x563 +
           15000000.0 * sc[3] * x922 + 48000000.0 * sc[3] +
           50000000.0 * sc[4] * x1044 + 40000000.0 * sc[9] * x922 +
           x1044 * x5625 - x189 * x261 - x189 * x627 + x3425 - x358 * x922 -
           x371 * x563 + x3908 + x558 * x563 + x6023 + x7671 + x8879 + x9296 +
           x9366 + x9438 + x9446 + x9451 +
           (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
            x240 * x371 - x240 * x558) *
             (x1044 - x889) +
           (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
            15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
            x118 * x358 - x241 * x261 - x241 * x627) *
             (x563 - x806 + (-x240) * (x1044 - x889)) +
           (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
            40000000.0 * sc[9] * x202 + x202 * x358) *
             (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889)));
  J[796] =
    sc[12] * x8906 - sc[16] * x6209 - sc[16] * x8653 - sc[16] * x8934 -
    14000000.0 * sc[17] * x925 + 14000000.0 * sc[17] * x934 -
    30000000.0 * sc[23] * x705 + 30000000.0 * sc[23] * x935 -
    50000000.0 * sc[23] * x966 + 50000000.0 * sc[23] * x970 -
    57000000.0 * sc[3] * x966 + 57000000.0 * sc[3] * x970 +
    50000000.0 * sc[4] * x1059 - 50000000.0 * sc[4] * x1060 -
    40000000.0 * sc[9] * x925 + 40000000.0 * sc[9] * x934 + x1059 * x5625 -
    x1060 * x5625 + 8300000.0 * x2524 + x261 * x705 - x261 * x935 + x2689 +
    x358 * x925 - x358 * x934 + x371 * x966 - x371 * x970 + x4974 -
    x558 * x966 + x558 * x970 + 2000000000.0 * x5598 + x627 * x705 -
    x627 * x935 + x9296 + x9297 + 3000000.0 * x9364 + x9438 +
    (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 + x240 * x371 -
     x240 * x558) *
      (x1059 - x1060) +
    (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
     15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 + x118 * x358 -
     x241 * x261 - x241 * x627) *
      (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
     40000000.0 * sc[9] * x202 + x202 * x358) *
      (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060)));
  J[835] =
    -sc[16] * x8932 + 14000000.0 * sc[17] * x941 + 30000000.0 * sc[23] * x884 +
    50000000.0 * sc[23] * x977 + 15000000.0 * sc[3] * x941 +
    57000000.0 * sc[3] * x977 + 50000000.0 * sc[4] * x1064 +
    40000000.0 * sc[9] * x941 + x1064 * x5625 - x261 * x884 + x3425 -
    x358 * x941 - x371 * x977 + x3908 + x558 * x977 + x6023 - x627 * x884 +
    x7671 + x8879 + x9296 + x9366 + x9438 + x9446 + x9451 +
    (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 + x240 * x371 -
     x240 * x558) *
      (x1064 - x889) +
    (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
     15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 + x118 * x358 -
     x241 * x261 - x241 * x627) *
      (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
     40000000.0 * sc[9] * x202 + x202 * x358) *
      (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889)));
  J[874] = -8.07e+21 * sc[16] * x200 * x316 - 14000000.0 * sc[17] * x477 +
           14000000.0 * sc[17] * x952 + 50000000.0 * sc[23] * x256 +
           30000000.0 * sc[23] * x365 - 30000000.0 * sc[23] * x944 -
           50000000.0 * sc[23] * x992 - 40000000.0 * sc[9] * x477 +
           40000000.0 * sc[9] * x952 - 8.07e+16 * x206 + x214 * x5625 -
           x216 * x5625 - x256 * x371 + x256 * x558 - x261 * x365 +
           x261 * x944 + x358 * x477 - x358 * x952 - x365 * x627 + x371 * x992 +
           x5135 + x5198 - x525 * x569 - x558 * x992 + 6000000000.0 * x5596 +
           6000000000.0 * x5598 + x569 * x9192 + x627 * x944 + x708 * x9652 +
           x7803 + 8.07e+16 * x9175 - 4.34166e+25 * x9178 - x9202 * x9652 +
           4.34166e+25 * x9205 + 8.07e+21 * x9213 - 165000.0 * x9229 -
           165000.0 * x9234 + 930000000.0 * x9239 - 930000000.0 * x9243 +
           2.6800370370370399e+37 * x9283 - 2.6800370370370399e+37 * x9286 +
           x9297 + 9000000.0 * x9364 + 9000000.0 * x9381 +
           (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
            x240 * x371 - x240 * x558) *
             (x214 - x216) +
           (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
            15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
            x118 * x358 - x241 * x261 - x241 * x627) *
             (x256 - x992 + (-x240) * (x214 - x216)) +
           (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
            40000000.0 * sc[9] * x202 + x202 * x358) *
             (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216)));
  J[913] =
    50000000.0 * sc[10] + 14000000.0 * sc[17] * x958 +
    50000000.0 * sc[23] * x1014 - 30000000.0 * sc[23] * x350 +
    30000000.0 * sc[23] * x355 - 50000000.0 * sc[23] * x805 +
    40000000.0 * sc[23] + 100000000.0 * sc[2] + 15000000.0 * sc[3] * x958 +
    200000000.0 * sc[3] + 3200000.0 * sc[9] * x7014 +
    40000000.0 * sc[9] * x958 - x1014 * x371 + x1014 * x558 +
    30000000.0 * x200 + 50000000.0 * x226 + 8300000.0 * x2524 + x261 * x350 -
    x261 * x355 + 2.69e+16 * x27 * x35 * x556 + x285 * x5625 - x294 * x5625 +
    x3425 + x350 * x627 - x355 * x627 - x358 * x958 + x371 * x805 + x5275 -
    x558 * x805 - x5656 * x782 - 55000.0 * x602 * x9227 + x7671 - x782 * x9253 +
    x782 * x9260 - 55000.0 * x9234 + x9295 + x9297 + x9366 +
    (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 + x240 * x371 -
     x240 * x558) *
      (x285 - x294) +
    (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
     15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 + x118 * x358 -
     x241 * x261 - x241 * x627) *
      (x1014 - x805 + (-x240) * (x285 - x294)) +
    (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
     40000000.0 * sc[9] * x202 + x202 * x358) *
      (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294)));
  J[952] = 14000000.0 * sc[17] * x959 + 30000000.0 * sc[23] * x363 +
           50000000.0 * sc[23] * x831 + 57000000.0 * sc[3] * x831 +
           15000000.0 * sc[3] * x959 + 50000000.0 * sc[4] * x306 +
           40000000.0 * sc[9] * x959 - x261 * x363 + x306 * x5625 + x3425 -
           x358 * x959 - x363 * x627 - x371 * x831 + x3908 +
           2.69e+21 * x503 * x9199 + x5315 + x558 * x831 + x6023 + x7671 +
           x8879 + x9296 + x9366 + x9438 + x9446 + x9451 +
           (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
            x240 * x371 - x240 * x558) *
             (x306 - x889) +
           (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
            15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
            x118 * x358 - x241 * x261 - x241 * x627) *
             (-x806 + x831 + (-x240) * (x306 - x889)) +
           (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
            40000000.0 * sc[9] * x202 + x202 * x358) *
             (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889)));
  J[991] = 18000.0 * sc[9] + x8330 + x9455 +
           (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
            x240 * x371 - x240 * x558) *
             (x888 - x889) +
           (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
            15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
            x118 * x358 - x241 * x261 - x241 * x627) *
             (-x806 + x839 + (-x240) * (x888 - x889)) +
           (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
            40000000.0 * sc[9] * x202 + x202 * x358) *
             (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1030] = x9455 + 12100000000000.0 * exp(-28783.993284029999 * invT) +
            (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
             x240 * x371 - x240 * x558) *
              (x888 - x889) +
            (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
             15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
             x118 * x358 - x241 * x261 - x241 * x627) *
              (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
             40000000.0 * sc[9] * x202 + x202 * x358) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1069] = 50000000.0 * sc[23] * x1028 + 57000000.0 * sc[3] * x1028 +
            50000000.0 * sc[4] * x309 - x1028 * x371 + x1028 * x558 +
            x309 * x5625 + x3426 + x3908 + x6023 + x6407 + x8879 + x9296 +
            x9367 + x9438 + x9447 + x9451 +
            (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
             x240 * x371 - x240 * x558) *
              (x309 - x889) +
            (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
             15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
             x118 * x358 - x241 * x261 - x241 * x627) *
              (x1028 - x806 + (-x240) * (x309 - x889)) +
            (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
             40000000.0 * sc[9] * x202 + x202 * x358) *
              (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889)));
  J[1108] = 60000000.0 * sc[12] + 14000000.0 * sc[17] * x963 +
            30000000.0 * sc[23] * x366 + 50000000.0 * sc[23] * x691 +
            57000000.0 * sc[3] * x691 + 15000000.0 * sc[3] * x963 +
            50000000.0 * sc[4] * x326 + 40000000.0 * sc[9] * x963 -
            x261 * x366 + x326 * x5625 + x3425 - x358 * x963 - x366 * x627 -
            x371 * x691 + x3908 + x558 * x691 + x6023 + x7671 + x8879 + x9296 +
            x9366 + x9438 + x9446 + x9451 +
            (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
             x240 * x371 - x240 * x558) *
              (x326 - x889) +
            (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
             15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
             x118 * x358 - x241 * x261 - x241 * x627) *
              (x691 - x806 + (-x240) * (x326 - x889)) +
            (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
             40000000.0 * sc[9] * x202 + x202 * x358) *
              (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889)));
  J[1147] = -sc[16] * x8928 + x9455 +
            (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
             x240 * x371 - x240 * x558) *
              (x888 - x889) +
            (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
             15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
             x118 * x358 - x241 * x261 - x241 * x627) *
              (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
             40000000.0 * sc[9] * x202 + x202 * x358) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1186] = x9455 +
            (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
             x240 * x371 - x240 * x558) *
              (x888 - x889) +
            (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
             15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
             x118 * x358 - x241 * x261 - x241 * x627) *
              (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
             40000000.0 * sc[9] * x202 + x202 * x358) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1225] = x9455 +
            (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
             x240 * x371 - x240 * x558) *
              (x888 - x889) +
            (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
             15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
             x118 * x358 - x241 * x261 - x241 * x627) *
              (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
             40000000.0 * sc[9] * x202 + x202 * x358) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1264] = -29000000.0 * sc[16] * x662 + sc[17] * x9597 +
            50000000.0 * sc[23] * x1043 + 20000000.0 * sc[36] +
            57000000.0 * sc[3] * x1043 + 50000000.0 * sc[4] * x176 -
            x1043 * x371 + x1043 * x558 + x176 * x5625 + x2668 * x809 -
            x2668 * x99 + x3426 - 310000000.0 * x35 * x423 * x9241 +
            x5656 * x809 - x5656 * x99 + x600 + x809 * x9253 - x809 * x9260 +
            x8879 - x9253 * x99 + x9260 * x99 + x9294 +
            (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
             x240 * x371 - x240 * x558) *
              (x176 - x889) +
            (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
             15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
             x118 * x358 - x241 * x261 - x241 * x627) *
              (x1043 - x806 + (-x240) * (x176 - x889)) +
            (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
             40000000.0 * sc[9] * x202 + x202 * x358) *
              (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889)));
  J[1303] = 14000000.0 * sc[17] * x701 + 40000000.0 * sc[9] * x701 +
            x2668 * x881 - x358 * x701 + x3911 + x4295 + x5656 * x881 + x7671 +
            x881 * x9253 - x881 * x9260 + x9262 + x9296 + x9447 + x9454 +
            x9503 +
            (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
             x240 * x371 - x240 * x558) *
              (x888 - x889) +
            (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
             15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
             x118 * x358 - x241 * x261 - x241 * x627) *
              (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
             40000000.0 * sc[9] * x202 + x202 * x358) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1342] = -sc[16] * x467 + 14000000.0 * sc[17] * x968 +
            50000000.0 * sc[23] * x1045 + 30000000.0 * sc[23] * x367 +
            57000000.0 * sc[3] * x1045 + 15000000.0 * sc[3] * x968 +
            50000000.0 * sc[4] * x152 + 40000000.0 * sc[9] * x968 -
            x1045 * x371 + x1045 * x558 + x152 * x5625 - x261 * x367 +
            x2668 * x469 + x3425 - x358 * x968 - x367 * x627 + x4295 +
            x469 * x5656 + x469 * x9253 - x469 * x9260 + x6023 + x7671 + x8879 +
            x9262 + x9296 + x9446 + x9451 + x9503 +
            (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
             x240 * x371 - x240 * x558) *
              (x152 - x889) +
            (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
             15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
             x118 * x358 - x241 * x261 - x241 * x627) *
              (x1045 - x806 + (-x240) * (x152 - x889)) +
            (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
             40000000.0 * sc[9] * x202 + x202 * x358) *
              (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889)));
  J[1381] = 14000000.0 * sc[17] * x983 + 50000000.0 * sc[23] * x232 +
            30000000.0 * sc[23] * x543 + 57000000.0 * sc[3] * x232 +
            15000000.0 * sc[3] * x983 + 50000000.0 * sc[4] * x353 +
            40000000.0 * sc[9] * x983 - x232 * x371 + x232 * x558 -
            x261 * x543 + x2668 * x465 + x3425 + x353 * x5625 - x358 * x983 +
            x4295 + x465 * x5656 + x465 * x9253 - x465 * x9260 - x543 * x627 +
            x6023 + x7671 + x8879 + x9262 + x9296 + x9446 + x9451 + x9503 +
            (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
             x240 * x371 - x240 * x558) *
              (x353 - x889) +
            (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
             15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
             x118 * x358 - x241 * x261 - x241 * x627) *
              (x232 - x806 + (-x240) * (x353 - x889)) +
            (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
             40000000.0 * sc[9] * x202 + x202 * x358) *
              (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889)));
  J[1420] = 50000000.0 * sc[23] * x291 + 20000000.0 * sc[32] + sc[3] * x5785 -
            x291 * x371 + x291 * x558 + x3426 +
            310000000.0 * x35 * exp(-27198.860786745099 * invT) + x357 * x5625 +
            x537 * x5656 + x537 * x9253 - x537 * x9260 - x540 * x5656 -
            x540 * x9253 + x540 * x9260 + x5560 + x600 + x8879 + x9294 +
            (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
             x240 * x371 - x240 * x558) *
              (x357 - x889) +
            (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
             15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
             x118 * x358 - x241 * x261 - x241 * x627) *
              (x291 - x806 + (-x240) * (x357 - x889)) +
            (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
             40000000.0 * sc[9] * x202 + x202 * x358) *
              (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889)));
  J[1459] = 8300000.0 * x2524 + x2539 - x2668 * x957 + x3906 + x3911 -
            x5656 * x957 - 55000.0 * x9234 - x9253 * x957 + x9260 * x957 +
            x9295 + x9367 + x9447 + x9454 +
            (-50000000.0 * sc[23] * x240 - 57000000.0 * sc[3] * x240 +
             x240 * x371 - x240 * x558) *
              (x888 - x889) +
            (-14000000.0 * sc[17] * x118 + 30000000.0 * sc[23] * x241 -
             15000000.0 * sc[3] * x118 - 40000000.0 * sc[9] * x118 +
             x118 * x358 - x241 * x261 - x241 * x627) *
              (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-14000000.0 * sc[17] * x202 - 15000000.0 * sc[3] * x202 -
             40000000.0 * sc[9] * x202 + x202 * x358) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[17] =
    -2100000.0 * sc[16] * x104 * x9196 - 2100000.0 * sc[16] * x369 -
    14000000.0 * sc[17] * x289 + 14000000.0 * sc[17] * x315 -
    2660000000000.0 * sc[36] * x1696 - 2660000000000.0 * sc[36] * x1701 -
    2640000.0 * x1011 * x359 + 2640000.0 * x1011 * x368 - x266 * x558 +
    x359 * x628 - x368 * x628 + x376 * x558 -
    7.0715881057268703e+19 * x5629 * x5632 +
    7.0715881057268703e+19 * x5629 * x5636 + 821100000000.0 * x5642 -
    821100000000.0 * x5646 + 1400000.0 * x6505 + 1400000.0 * x7861 +
    (x240 * x558) * (x647 - x669) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (x266 - x376 + (-x240) * (x647 - x669)) +
    (14000000.0 * sc[17] * x202) *
      (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669)));
  J[56] =
    -sc[17] * x1726 + 14000000.0 * sc[17] * x620 - 14000000.0 * sc[17] * x670 -
    2640000.0 * x1011 * x347 + 2640000.0 * x1011 * x689 - x1722 * x279 +
    x279 * x8030 - x279 * x9253 + x347 * x628 + x374 * x558 - x558 * x693 -
    x628 * x689 + x7676 + x9759 + (x240 * x558) * (x713 - x715) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x374 + x693 + (-x240) * (x713 - x715)) +
    (14000000.0 * sc[17] * x202) *
      (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715)));
  J[95] =
    -5280000.0 * sc[17] * sc[2] * x2838 - sc[17] * x2939 -
    30000000.0 * sc[17] * x2941 - sc[17] * x2944 + 14000000.0 * sc[17] * x678 -
    14000000.0 * sc[17] * x703 + 2640000.0 * x1011 * x688 -
    2640000.0 * x1011 * x690 - x1722 * x54 + x1722 * x619 + x54 * x8030 -
    x54 * x9253 + x558 * x712 - x558 * x716 - x619 * x8030 + x619 * x9253 -
    x628 * x688 + x628 * x690 + x9758 + (x240 * x558) * (x734 - x735) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x712 + x716 + (-x240) * (x734 - x735)) +
    (14000000.0 * sc[17] * x202) *
      (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735)));
  J[134] =
    30000000.0 * sc[12] + sc[16] * x5628 - sc[17] * x5759 +
    14000000.0 * sc[17] * x717 - 14000000.0 * sc[17] * x719 + sc[24] * x5812 +
    2640000.0 * x1011 * x125 - 2640000.0 * x1011 * x710 - x125 * x628 +
    x1722 * x219 - x1722 * x596 - x219 * x8030 + x219 * x9253 - x558 * x721 +
    x558 * x725 + x596 * x8030 - x596 * x9253 + x628 * x710 + x9758 +
    (x240 * x558) * (x747 - x748) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (x721 - x725 + (-x240) * (x747 - x748)) +
    (14000000.0 * sc[17] * x202) *
      (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748)));
  J[173] =
    sc[16] * x3271 + sc[16] * x3273 - sc[17] * x6692 +
    14000000.0 * sc[17] * x730 - 14000000.0 * sc[17] * x737 -
    2640000.0 * x1011 * x171 + 2640000.0 * x1011 * x732 - x157 * x1722 +
    x157 * x8030 - x157 * x9253 + x171 * x628 + x1722 * x633 + x558 * x736 -
    x558 * x743 - x628 * x732 - x633 * x8030 + x633 * x9253 + x9758 +
    (x240 * x558) * (x768 - x770) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x736 + x743 + (-x240) * (x768 - x770)) +
    (14000000.0 * sc[17] * x202) *
      (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770)));
  J[212] =
    -2640000.0 * x1011 * x740 + 2640000.0 * x1011 * x741 + x1722 * x181 -
    x181 * x8030 + x181 * x9253 + x558 * x746 - x558 * x757 + x628 * x740 -
    x628 * x741 + x6821 - 3000000.0 * x9364 + x9758 + x9765 + x9766 +
    (x240 * x558) * (x800 - x801) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x746 + x757 + (-x240) * (x800 - x801)) +
    (14000000.0 * sc[17] * x202) *
      (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801)));
  J[251] =
    14000000.0 * sc[17] * x754 - 14000000.0 * sc[17] * x756 -
    2640000.0 * x1011 * x745 + 2640000.0 * x1011 * x758 + x1763 - x558 * x761 +
    x558 * x762 - 2.0204537444933901e+20 * x5629 * x5632 +
    2.0204537444933901e+20 * x5629 * x5636 + 2346000000000.0 * x5642 -
    2346000000000.0 * x5646 + x628 * x745 - x628 * x758 + 4000000.0 * x6505 +
    4000000.0 * x7861 - 6000000.0 * x9364 - 6000000.0 * x9381 +
    (x240 * x558) * (x842 - x844) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (x761 - x762 + (-x240) * (x842 - x844)) +
    (14000000.0 * sc[17] * x202) *
      (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844)));
  J[290] =
    14000000.0 * sc[17] * x765 - 14000000.0 * sc[17] * x773 -
    22800000000000.0 * sc[36] * x1696 - 22800000000000.0 * sc[36] * x1701 -
    2640000.0 * x1011 * x759 + 2640000.0 * x1011 * x766 + x558 * x787 -
    x558 * x799 - 1.2122722466960399e+21 * x5629 * x5632 +
    1.2122722466960399e+21 * x5629 * x5636 + 14076000000000.0 * x5642 -
    14076000000000.0 * x5646 + x628 * x759 - x628 * x766 + 12000000.0 * x6505 +
    12000000.0 * x7861 - 18000000.0 * x9364 - 18000000.0 * x9381 +
    (x240 * x558) * (x864 - x875) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x787 + x799 + (-x240) * (x864 - x875)) +
    (14000000.0 * sc[17] * x202) *
      (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875)));
  J[329] =
    x9778 + (x240 * x558) * (x888 - x889) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (14000000.0 * sc[17] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[368] =
    14000000.0 * sc[17] * x779 - 14000000.0 * sc[17] * x792 + sc[36] * x8117 -
    2640000.0 * x1011 * x838 + 2640000.0 * x1011 * x840 - x1722 * x641 +
    x1722 * x642 + 2640000.0 * x3986 + x558 * x841 - x558 * x849 + x6043 +
    x628 * x838 - x628 * x840 + x641 * x8030 - x641 * x9253 - x642 * x8030 +
    x642 * x9253 + x9758 + (x240 * x558) * (x905 - x906) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x841 + x849 + (-x240) * (x905 - x906)) +
    (14000000.0 * sc[17] * x202) *
      (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906)));
  J[407] =
    14000000.0 * sc[17] * x796 - 14000000.0 * sc[17] * x814 +
    2640000.0 * x1011 * x195 - 2640000.0 * x1011 * x862 - x1722 * x231 -
    x195 * x628 + x231 * x8030 - x231 * x9253 - x558 * x855 + x558 * x865 +
    x628 * x862 + x7676 + x9759 + (x240 * x558) * (-x244 + x920) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (x855 - x865 + (-x240) * (-x244 + x920)) +
    (14000000.0 * sc[17] * x202) *
      (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920)));
  J[446] =
    14000000.0 * sc[17] * x827 - 14000000.0 * sc[17] * x834 -
    2640000.0 * x1011 * x341 + 2640000.0 * x1011 * x882 + x1763 + x341 * x628 +
    x558 * x786 - x558 * x897 - x628 * x882 + 4000000.0 * x6505 +
    4000000.0 * x7861 - 6000000.0 * x9364 - 6000000.0 * x9381 + x9758 +
    (x240 * x558) * (x937 - x938) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x786 + x897 + (-x240) * (x937 - x938)) +
    (14000000.0 * sc[17] * x202) *
      (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938)));
  J[485] =
    sc[16] * x8915 + 14000000.0 * sc[17] * x738 - 14000000.0 * sc[17] * x851 +
    30000000.0 * sc[3] + 2640000.0 * x1011 * x883 - x1722 * x649 - x558 * x900 -
    x628 * x883 + x649 * x8030 - x649 * x9253 + x7676 + x9759 + x9774 +
    (x240 * x558) * (-x889 + x948) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x806 + x900 + (-x240) * (-x889 + x948)) +
    (14000000.0 * sc[17] * x202) *
      (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948)));
  J[524] =
    14000000.0 * sc[16] * x439 - 14000000.0 * sc[17] * x861 -
    2640000.0 * x1011 * x886 + 2640000.0 * x1011 * x895 + x558 * x904 -
    x558 * x908 + x628 * x886 - x628 * x895 + x9766 + x9773 +
    (x240 * x558) * (x961 - x962) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x904 + x908 + (-x240) * (x961 - x962)) +
    (14000000.0 * sc[17] * x202) *
      (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962)));
  J[563] =
    14000000.0 * sc[17] * x738 - 14000000.0 * sc[17] * x870 +
    2640000.0 * x1011 * x896 - x1722 * x650 + x1722 * x668 - x558 * x915 -
    x628 * x896 + x650 * x8030 - x650 * x9253 - x668 * x8030 + x668 * x9253 +
    x9758 + x9774 + (x240 * x558) * (-x889 + x967) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x806 + x915 + (-x240) * (-x889 + x967)) +
    (14000000.0 * sc[17] * x202) *
      (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967)));
  J[602] =
    -14000000.0 * sc[17] * x892 + 2640000.0 * x1011 * x903 - x558 * x709 -
    x628 * x903 + x9766 + x9773 + x9774 + (x240 * x558) * (-x889 + x971) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (x709 - x806 + (-x240) * (-x889 + x971)) +
    (14000000.0 * sc[17] * x202) *
      (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971)));
  J[641] =
    sc[12] * x8915 + 14000000.0 * sc[13] * x439 + 14000000.0 * sc[17] * x894 -
    14000000.0 * sc[17] * x902 + sc[3] * x5628 + sc[4] * x3271 + sc[4] * x3273 -
    2640000.0 * x1011 * x912 + 2640000.0 * x1011 * x913 - x1722 * x674 +
    x1722 * x686 + x558 * x926 - x558 * x931 -
    1.7678970264317202e+20 * x5629 * x5632 +
    1.7678970264317202e+20 * x5629 * x5636 + 2052750000000.0 * x5642 -
    2052750000000.0 * x5646 - 3000000.0 * x602 * x9196 + x6211 + x628 * x912 -
    x628 * x913 + x674 * x8030 - x674 * x9253 - x686 * x8030 + x686 * x9253 +
    x7162 + (x240 * x558) * (x572 - x659) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x926 + x931 + (-x240) * (x572 - x659)) +
    (14000000.0 * sc[17] * x202) *
      (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659)));
  J[680] =
    -1173000000000.0 * refC * x2824 * x5645 - 14000000.0 * sc[17] * x135 +
    14000000.0 * sc[17] * x910 - sc[1] * x1726 -
    2640000.0 * ((sc[2]) * (sc[2])) * x2838 - sc[2] * x2939 -
    30000000.0 * sc[2] * x2941 - sc[2] * x2944 - sc[32] * x9597 -
    sc[3] * x5759 - sc[4] * x6692 - 2640000.0 * x1011 * x510 +
    2640000.0 * x1011 * x928 - x1722 * x297 + x1722 * x320 - x200 * x406 -
    3400000.0 * x226 * exp(-347.21949940525701 * invT) + x297 * x8030 -
    x297 * x9253 - x320 * x8030 + x320 * x9253 + x510 * x628 + x558 * x936 -
    x558 * x947 - 3.6368167400881101e+20 * x5629 * x5632 +
    3.6368167400881101e+20 * x5629 * x5636 + 4222800000000.0 * x5642 -
    4222800000000.0 * x5646 - 14000000.0 * x6 + 2000000.0 * x602 * exp(x370) -
    x628 * x928 + (x240 * x558) * (-x832 + x837) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x936 + x947 + (-x240) * (-x832 + x837)) +
    (14000000.0 * sc[17] * x202) *
      (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837)));
  J[719] =
    14000000.0 * sc[17] * x911 - 14000000.0 * sc[17] * x917 +
    2640000.0 * x1011 * x878 - 2640000.0 * x1011 * x929 - x1757 + x558 * x949 -
    x558 * x956 - x628 * x878 + x628 * x929 + 2000000.0 * x6505 + x9773 +
    (x240 * x558) * (x1037 - x1038) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (14000000.0 * sc[17] * x202) *
      (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038)));
  J[758] =
    -14000000.0 * sc[17] * x922 + 2640000.0 * x1011 * x189 - x189 * x628 -
    x558 * x563 + x9766 + x9773 + x9774 + (x240 * x558) * (x1044 - x889) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (x563 - x806 + (-x240) * (x1044 - x889)) +
    (14000000.0 * sc[17] * x202) *
      (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889)));
  J[797] =
    14000000.0 * sc[17] * x925 - 14000000.0 * sc[17] * x934 -
    2640000.0 * x1011 * x705 + 2640000.0 * x1011 * x935 - x1757 + x558 * x966 -
    x558 * x970 + x628 * x705 - x628 * x935 + 2000000.0 * x6505 + x9773 +
    (x240 * x558) * (x1059 - x1060) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (14000000.0 * sc[17] * x202) *
      (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060)));
  J[836] =
    -14000000.0 * sc[17] * x941 + 2640000.0 * x1011 * x884 - x558 * x977 -
    x628 * x884 + x9766 + x9773 + x9774 + (x240 * x558) * (x1064 - x889) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (14000000.0 * sc[17] * x202) *
      (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889)));
  J[875] =
    6000000.0 * sc[17] * x104 * exp(x370) +
    6000000.0 * sc[17] * x1700 * exp(x1699 + x370) +
    14000000.0 * sc[17] * x477 - 14000000.0 * sc[17] * x952 -
    11400000000000.0 * sc[36] * x1696 - 11400000000000.0 * sc[36] * x1701 +
    2640000.0 * x1011 * x365 - 2640000.0 * x1011 * x944 - x256 * x558 -
    x365 * x628 + x558 * x992 + x628 * x944 - 9000000.0 * x9364 -
    9000000.0 * x9381 + x9758 + (x240 * x558) * (x214 - x216) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (x256 - x992 + (-x240) * (x214 - x216)) +
    (14000000.0 * sc[17] * x202) *
      (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216)));
  J[914] =
    -14000000.0 * sc[17] * x958 - 2640000.0 * x1011 * x350 +
    2640000.0 * x1011 * x355 - x1014 * x558 + x1722 * x782 + x350 * x628 -
    x355 * x628 + x558 * x805 - x782 * x8030 + x782 * x9253 -
    3000000.0 * x9364 + x9758 + x9766 + (x240 * x558) * (x285 - x294) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (x1014 - x805 + (-x240) * (x285 - x294)) +
    (14000000.0 * sc[17] * x202) *
      (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294)));
  J[953] =
    -14000000.0 * sc[17] * x959 + sc[3] * x5812 + 2640000.0 * x1011 * x363 -
    x363 * x628 - x558 * x831 + x9766 + x9773 + x9774 +
    (x240 * x558) * (x306 - x889) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x806 + x831 + (-x240) * (x306 - x889)) +
    (14000000.0 * sc[17] * x202) *
      (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889)));
  J[992] =
    x9778 + (x240 * x558) * (x888 - x889) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (14000000.0 * sc[17] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1031] =
    x9778 + (x240 * x558) * (x888 - x889) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (14000000.0 * sc[17] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1070] =
    -x1028 * x558 + x9765 + x9766 + x9773 + x9775 +
    (x240 * x558) * (x309 - x889) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (x1028 - x806 + (-x240) * (x309 - x889)) +
    (14000000.0 * sc[17] * x202) *
      (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889)));
  J[1109] =
    -14000000.0 * sc[17] * x963 + 2640000.0 * x1011 * x366 - x366 * x628 -
    x558 * x691 + x9766 + x9773 + x9774 + (x240 * x558) * (x326 - x889) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (x691 - x806 + (-x240) * (x326 - x889)) +
    (14000000.0 * sc[17] * x202) *
      (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889)));
  J[1148] =
    x9778 + (x240 * x558) * (x888 - x889) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (14000000.0 * sc[17] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1187] =
    x9778 + (x240 * x558) * (x888 - x889) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (14000000.0 * sc[17] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1226] =
    x9778 + (x240 * x558) * (x888 - x889) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (14000000.0 * sc[17] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1265] =
    14000000.0 * sc[17] * x738 - sc[17] * x9597 - x1043 * x558 - x1722 * x809 +
    x1722 * x99 + x8030 * x809 - x8030 * x99 - x809 * x9253 + x9253 * x99 +
    x9758 + x9765 + x9775 + (x240 * x558) * (x176 - x889) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (x1043 - x806 + (-x240) * (x176 - x889)) +
    (14000000.0 * sc[17] * x202) *
      (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889)));
  J[1304] =
    14000000.0 * sc[17] * x738 - x1722 * x881 - x558 * x839 + x7676 +
    x8030 * x881 - x881 * x9253 + x9759 + x9765 + x9775 +
    (x240 * x558) * (x888 - x889) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (14000000.0 * sc[17] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1343] =
    14000000.0 * sc[17] * x738 - 14000000.0 * sc[17] * x968 +
    2640000.0 * x1011 * x367 - x1045 * x558 - x1722 * x469 - x367 * x628 +
    x469 * x8030 - x469 * x9253 + x7676 + x9759 + x9774 +
    (x240 * x558) * (x152 - x889) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (x1045 - x806 + (-x240) * (x152 - x889)) +
    (14000000.0 * sc[17] * x202) *
      (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889)));
  J[1382] =
    14000000.0 * sc[17] * x738 - 14000000.0 * sc[17] * x983 +
    2640000.0 * x1011 * x543 - x1722 * x465 - x232 * x558 + x465 * x8030 -
    x465 * x9253 - x543 * x628 + x7676 + x9759 + x9774 +
    (x240 * x558) * (x353 - x889) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (x232 - x806 + (-x240) * (x353 - x889)) +
    (14000000.0 * sc[17] * x202) *
      (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889)));
  J[1421] =
    14000000.0 * sc[17] * x738 + sc[9] * x8117 - x1722 * x537 + x1722 * x540 -
    x291 * x558 + x537 * x8030 - x537 * x9253 - x540 * x8030 + x540 * x9253 -
    3800000000000.0 * x602 * exp(x1694) + x9758 + x9765 + x9775 +
    (x240 * x558) * (x357 - x889) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (x291 - x806 + (-x240) * (x357 - x889)) +
    (14000000.0 * sc[17] * x202) *
      (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889)));
  J[1460] =
    x1722 * x957 - x558 * x839 - x8030 * x957 + x9253 * x957 -
    3000000.0 * x9364 + x9758 + x9765 + x9766 + x9775 +
    (x240 * x558) * (x888 - x889) +
    (14000000.0 * sc[17] * x118 + 2640000.0 * x1011 * x241 - x241 * x628) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (14000000.0 * sc[17] * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[18] = 50000000.0 * sc[23] * x266 - 50000000.0 * sc[23] * x376 +
          100000000.0 * sc[2] * x311 + x2126 - x261 * x359 + x261 * x368 +
          x311 * x988 + x9810 + (-50000000.0 * sc[23] * x240) * (x647 - x669) +
          (x241 * x261) * (x266 - x376 + (-x240) * (x647 - x669)) +
          (-100000000.0 * sc[2] * x70 - x70 * x988) *
            (x289 - x315 + (-x118) * (x266 - x376 + (-x240) * (x647 - x669)) +
             (-x202) * (-x359 + x368 +
                        (x241) * (x266 - x376 + (-x240) * (x647 - x669))));
  J[57] = 50000000.0 * sc[10] * x713 - 50000000.0 * sc[10] * x715 -
          50000000.0 * sc[23] * x374 + 50000000.0 * sc[23] * x693 + x2078 -
          x261 * x347 + x261 * x689 + x9811 +
          (-50000000.0 * sc[23] * x240) * (x713 - x715) +
          (x241 * x261) * (-x374 + x693 + (-x240) * (x713 - x715)) +
          (-100000000.0 * sc[2] * x70 - x70 * x988) *
            (-x620 + x670 + (-x118) * (-x374 + x693 + (-x240) * (x713 - x715)) +
             (-x202) * (-x347 + x689 +
                        (x241) * (-x374 + x693 + (-x240) * (x713 - x715))));
  J[96] = -100000000.0 * sc[18] * x378 + 90000000.0 * sc[19] + sc[23] * x2931 -
          50000000.0 * sc[23] * x712 + 50000000.0 * sc[23] * x716 +
          sc[24] * x387 + sc[27] * x2895 + 100000000.0 * sc[2] * x989 -
          100000000.0 * sc_qss[3] * x70 + x2078 + x261 * x688 - x261 * x690 +
          x2984 - 100000000.0 * x395 / x68 + x9810 + x988 * x989 +
          (-50000000.0 * sc[23] * x240) * (x734 - x735) +
          (x241 * x261) * (-x712 + x716 + (-x240) * (x734 - x735)) +
          (-100000000.0 * sc[2] * x70 - x70 * x988) *
            (-x678 + x703 + (-x118) * (-x712 + x716 + (-x240) * (x734 - x735)) +
             (-x202) * (x688 - x690 +
                        (x241) * (-x712 + x716 + (-x240) * (x734 - x735))));
  J[135] = 50000000.0 * sc[10] * x747 - 50000000.0 * sc[10] * x748 -
           20.4 * sc[18] * x3161 + 50000000.0 * sc[23] * x721 -
           50000000.0 * sc[23] * x725 + x125 * x261 + x2078 - x261 * x710 +
           x9811 + (-50000000.0 * sc[23] * x240) * (x747 - x748) +
           (x241 * x261) * (x721 - x725 + (-x240) * (x747 - x748)) +
           (-100000000.0 * sc[2] * x70 - x70 * x988) *
             (-x717 + x719 + (-x118) * (x721 - x725 + (-x240) * (x747 - x748)) +
              (-x202) * (x125 - x710 +
                         (x241) * (x721 - x725 + (-x240) * (x747 - x748))));
  J[174] =
    50000000.0 * sc[10] * x768 - 50000000.0 * sc[10] * x770 - sc[18] * x3286 +
    30110000.0 * sc[19] - 50000000.0 * sc[23] * x736 +
    50000000.0 * sc[23] * x743 + 100000000.0 * sc[2] * x990 - x171 * x261 +
    x2078 + x261 * x732 - x6745 + x9810 + x988 * x990 +
    (-50000000.0 * sc[23] * x240) * (x768 - x770) +
    (x241 * x261) * (-x736 + x743 + (-x240) * (x768 - x770)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (-x730 + x737 + (-x118) * (-x736 + x743 + (-x240) * (x768 - x770)) +
       (-x202) *
         (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770))));
  J[213] = 50000000.0 * sc[10] * x800 - 50000000.0 * sc[10] * x801 -
           sc[18] * x7434 - 50000000.0 * sc[23] * x746 +
           50000000.0 * sc[23] * x757 + x2078 - x261 * x740 + x261 * x741 +
           x9811 + (-50000000.0 * sc[23] * x240) * (x800 - x801) +
           (x241 * x261) * (-x746 + x757 + (-x240) * (x800 - x801)) +
           (-100000000.0 * sc[2] * x70 - x70 * x988) *
             (x744 + (-x118) * (-x746 + x757 + (-x240) * (x800 - x801)) +
              (-x202) * (-x740 + x741 +
                         (x241) * (-x746 + x757 + (-x240) * (x800 - x801))));
  J[252] = 50000000.0 * sc[10] * x842 - 50000000.0 * sc[10] * x844 -
           sc[18] * x3563 - 32000000.0 * sc[18] * x492 +
           50000000.0 * sc[23] * x761 - 50000000.0 * sc[23] * x762 +
           100000000.0 * sc[2] * x825 - x261 * x745 + x261 * x758 + x3639 +
           x825 * x988 + x9816 + (-50000000.0 * sc[23] * x240) * (x842 - x844) +
           (x241 * x261) * (x761 - x762 + (-x240) * (x842 - x844)) +
           (-100000000.0 * sc[2] * x70 - x70 * x988) *
             (-x754 + x756 + (-x118) * (x761 - x762 + (-x240) * (x842 - x844)) +
              (-x202) * (-x745 + x758 +
                         (x241) * (x761 - x762 + (-x240) * (x842 - x844))));
  J[291] =
    -sc[18] * x6919 - 14700000000.0 * sc[18] * x9809 -
    50000000.0 * sc[23] * x787 + 50000000.0 * sc[23] * x799 +
    100000000.0 * sc[2] * x860 - x261 * x759 + x261 * x766 + x3765 +
    x860 * x988 - 45018.75 * x9805 + 45018.75 * x9807 + 14700000000.0 * x9814 +
    (-50000000.0 * sc[23] * x240) * (x864 - x875) +
    (x241 * x261) * (-x787 + x799 + (-x240) * (x864 - x875)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (-x765 + x773 + (-x118) * (-x787 + x799 + (-x240) * (x864 - x875)) +
       (-x202) *
         (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875))));
  J[330] =
    x9819 + (-50000000.0 * sc[23] * x240) * (x888 - x889) +
    (x241 * x261) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[369] =
    50000000.0 * sc[10] * x905 - 50000000.0 * sc[10] * x906 -
    50000000.0 * sc[23] * x841 + 50000000.0 * sc[23] * x849 +
    100000000.0 * sc[2] * x867 + x2078 - x261 * x838 + x261 * x840 + x7514 +
    x867 * x988 + x9810 + (-50000000.0 * sc[23] * x240) * (x905 - x906) +
    (x241 * x261) * (-x841 + x849 + (-x240) * (x905 - x906)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (-x779 + x792 + (-x118) * (-x841 + x849 + (-x240) * (x905 - x906)) +
       (-x202) *
         (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906))));
  J[408] =
    -50000000.0 * sc[10] * x244 + 50000000.0 * sc[10] * x920 + sc[16] * x7042 -
    sc[18] * x4105 - sc[18] * x8570 + 392000.0 * sc[19] +
    50000000.0 * sc[23] * x855 - 50000000.0 * sc[23] * x865 + x195 * x261 +
    x2078 + 50000000.0 * x242 - x261 * x862 + x9811 +
    (-50000000.0 * sc[23] * x240) * (-x244 + x920) +
    (x241 * x261) * (x855 - x865 + (-x240) * (-x244 + x920)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (-x796 + x814 + (-x118) * (x855 - x865 + (-x240) * (-x244 + x920)) +
       (-x202) *
         (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920))));
  J[447] =
    50000000.0 * sc[10] * x937 - 50000000.0 * sc[10] * x938 - sc[18] * x8618 -
    50000000.0 * sc[23] * x786 + 50000000.0 * sc[23] * x897 +
    100000000.0 * sc[2] * x1000 + x1000 * x988 - x261 * x341 + x261 * x882 +
    x3639 + x9816 + (-50000000.0 * sc[23] * x240) * (x937 - x938) +
    (x241 * x261) * (-x786 + x897 + (-x240) * (x937 - x938)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (-x827 + x834 + (-x118) * (-x786 + x897 + (-x240) * (x937 - x938)) +
       (-x202) *
         (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938))));
  J[486] =
    50000000.0 * sc[10] * x948 - sc[18] * x8899 + 50000000.0 * sc[23] * x900 +
    100000000.0 * sc[2] * x147 + x147 * x988 + x261 * x883 + x3949 + x6027 +
    x9451 + x9810 + (-50000000.0 * sc[23] * x240) * (-x889 + x948) +
    (x241 * x261) * (-x806 + x900 + (-x240) * (-x889 + x948)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (-x738 + x851 + (-x118) * (-x806 + x900 + (-x240) * (-x889 + x948)) +
       (-x202) *
         (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948))));
  J[525] =
    50000000.0 * sc[10] * x961 - 50000000.0 * sc[10] * x962 -
    50000000.0 * sc[23] * x904 + 50000000.0 * sc[23] * x908 + x2078 -
    x261 * x886 + x261 * x895 + x9811 +
    (-50000000.0 * sc[23] * x240) * (x961 - x962) +
    (x241 * x261) * (-x904 + x908 + (-x240) * (x961 - x962)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (-x738 + x861 + (-x118) * (-x904 + x908 + (-x240) * (x961 - x962)) +
       (-x202) *
         (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962))));
  J[564] =
    50000000.0 * sc[10] * x967 + 50000000.0 * sc[23] * x915 + x261 * x896 +
    x3949 + x6027 + x9451 + x9811 +
    (-50000000.0 * sc[23] * x240) * (-x889 + x967) +
    (x241 * x261) * (-x806 + x915 + (-x240) * (-x889 + x967)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (-x738 + x870 + (-x118) * (-x806 + x915 + (-x240) * (-x889 + x967)) +
       (-x202) *
         (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967))));
  J[603] =
    50000000.0 * sc[10] * x971 + 50000000.0 * sc[23] * x709 + x261 * x903 +
    x3949 + x6027 + x9451 + x9811 +
    (-50000000.0 * sc[23] * x240) * (-x889 + x971) +
    (x241 * x261) * (x709 - x806 + (-x240) * (-x889 + x971)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (-x738 + x892 + (-x118) * (x709 - x806 + (-x240) * (-x889 + x971)) +
       (-x202) *
         (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971))));
  J[642] =
    sc[10] * x7042 - 20000000.0 * sc[18] * x423 * x9550 -
    50000000.0 * sc[18] * x545 - 3675000000.0 * sc[18] * x9809 +
    sc[19] * x8930 - 50000000.0 * sc[23] * x926 + 50000000.0 * sc[23] * x931 +
    100000000.0 * sc[2] * x987 + x200 * x259 - x261 * x912 + x261 * x913 +
    x4575 - 11254.6875 * x9805 + 11254.6875 * x9807 + 3675000000.0 * x9814 +
    x987 * x988 + (-50000000.0 * sc[23] * x240) * (x572 - x659) +
    (x241 * x261) * (-x926 + x931 + (-x240) * (x572 - x659)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (-x894 + x902 + (-x118) * (-x926 + x931 + (-x240) * (x572 - x659)) +
       (-x202) *
         (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659))));
  J[681] =
    -50000000.0 * sc[10] * x832 + 50000000.0 * sc[10] * x837 -
    50000000.0 * sc[23] * x936 + 50000000.0 * sc[23] * x947 +
    100000000.0 * sc[2] * x821 - x261 * x510 + x261 * x928 + x3639 +
    x821 * x988 + x9816 + (-50000000.0 * sc[23] * x240) * (-x832 + x837) +
    (x241 * x261) * (-x936 + x947 + (-x240) * (-x832 + x837)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (x135 - x910 + (-x118) * (-x936 + x947 + (-x240) * (-x832 + x837)) +
       (-x202) *
         (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837))));
  J[720] =
    -sc[10] * x4105 - sc[10] * x8570 - sc[11] * x8618 - sc[12] * x8899 -
    50000000.0 * sc[16] * x545 - 6125000000.0 * sc[18] * x9809 -
    960000.0 * sc[20] * x9823 - 50000000.0 * sc[23] * x949 +
    50000000.0 * sc[23] * x956 - 100000000.0 * sc[2] * x378 +
    100000000.0 * sc[2] * x384 - 20.4 * sc[3] * x3161 - sc[4] * x3286 -
    sc[5] * x7434 - sc[6] * x3563 - 32000000.0 * sc[6] * x492 - sc[7] * x6919 -
    2450000000.0 * x21 * exp(x775) / x288 + x261 * x878 - x261 * x929 -
    10000000.0 * x2846 * x9550 + x384 * x988 + x532 - x7229 -
    18757.8125 * x9805 + 18757.8125 * x9807 + 6125000000.0 * x9814 +
    (-50000000.0 * sc[23] * x240) * (x1037 - x1038) +
    (x241 * x261) * (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (-x911 + x917 + (-x118) * (-x949 + x956 + (-x240) * (x1037 - x1038)) +
       (-x202) *
         (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038))));
  J[759] =
    50000000.0 * sc[10] * x1044 + 392000.0 * sc[10] + sc[16] * x8930 +
    1920000.0 * sc[19] + 50000000.0 * sc[23] * x563 +
    100000000.0 * sc[2] * x824 + 90000000.0 * sc[2] + 30110000.0 * sc[4] +
    x189 * x261 + x2087 * x2116 + x3949 + x6027 + x7553 + x824 * x988 + x9451 +
    x9810 + (-50000000.0 * sc[23] * x240) * (x1044 - x889) +
    (x241 * x261) * (x563 - x806 + (-x240) * (x1044 - x889)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (-x738 + x922 + (-x118) * (x563 - x806 + (-x240) * (x1044 - x889)) +
       (-x202) *
         (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889))));
  J[798] =
    50000000.0 * sc[10] * x1059 - 50000000.0 * sc[10] * x1060 -
    6125000000.0 * sc[18] * x9809 - 960000.0 * sc[18] * x9823 -
    50000000.0 * sc[23] * x966 + 50000000.0 * sc[23] * x970 +
    100000000.0 * sc[2] * x42 - x261 * x705 + x261 * x935 + x42 * x988 + x4850 -
    18757.8125 * x9805 + 18757.8125 * x9807 + 6125000000.0 * x9814 +
    (-50000000.0 * sc[23] * x240) * (x1059 - x1060) +
    (x241 * x261) * (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (-x925 + x934 + (-x118) * (-x966 + x970 + (-x240) * (x1059 - x1060)) +
       (-x202) *
         (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060))));
  J[837] =
    50000000.0 * sc[10] * x1064 + 50000000.0 * sc[23] * x977 + x261 * x884 +
    x3949 + x6027 + x9451 + x9811 +
    (-50000000.0 * sc[23] * x240) * (x1064 - x889) +
    (x241 * x261) * (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (-x738 + x941 + (-x118) * (-x806 + x977 + (-x240) * (x1064 - x889)) +
       (-x202) *
         (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889))));
  J[876] =
    50000000.0 * sc[10] * x214 - 50000000.0 * sc[10] * x216 +
    22509.375 * sc[18] * x21 * exp(x9803) / ((x288) * (x288)) -
    7350000000.0 * sc[18] * x9809 + 50000000.0 * sc[23] * x256 -
    50000000.0 * sc[23] * x992 + 100000000.0 * sc[2] * x58 -
    22509.375 * x21 * x3566 * exp(x22 + x9803) / ((x288) * (x288)) +
    x261 * x365 - x261 * x944 + x4850 + x58 * x988 + 7350000000.0 * x9814 +
    (-50000000.0 * sc[23] * x240) * (x214 - x216) +
    (x241 * x261) * (x256 - x992 + (-x240) * (x214 - x216)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (-x477 + x952 + (-x118) * (x256 - x992 + (-x240) * (x214 - x216)) +
       (-x202) *
         (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216))));
  J[915] =
    50000000.0 * sc[10] * x285 - 50000000.0 * sc[10] * x294 +
    50000000.0 * sc[23] * x1014 - 50000000.0 * sc[23] * x805 +
    20000000.0 * sc[23] + sc[2] * x2931 + x2078 + 50000000.0 * x226 -
    x261 * x350 + x261 * x355 + x9811 +
    (-50000000.0 * sc[23] * x240) * (x285 - x294) +
    (x241 * x261) * (x1014 - x805 + (-x240) * (x285 - x294)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (-x738 + x958 + (-x118) * (x1014 - x805 + (-x240) * (x285 - x294)) +
       (-x202) *
         (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294))));
  J[954] =
    50000000.0 * sc[10] * x306 + 50000000.0 * sc[23] * x831 + sc[2] * x387 +
    100000000.0 * sc[2] * x617 + x261 * x363 + x3949 + x6027 + x617 * x988 +
    x9451 + x9810 + (-50000000.0 * sc[23] * x240) * (x306 - x889) +
    (x241 * x261) * (-x806 + x831 + (-x240) * (x306 - x889)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (-x738 + x959 + (-x118) * (-x806 + x831 + (-x240) * (x306 - x889)) +
       (-x202) *
         (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889))));
  J[993] =
    x9819 + (-50000000.0 * sc[23] * x240) * (x888 - x889) +
    (x241 * x261) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1032] =
    x9819 + (-50000000.0 * sc[23] * x240) * (x888 - x889) +
    (x241 * x261) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1071] =
    50000000.0 * sc[10] * x309 + 50000000.0 * sc[23] * x1028 + sc[2] * x2895 +
    x9832 + (-50000000.0 * sc[23] * x240) * (x309 - x889) +
    (x241 * x261) * (x1028 - x806 + (-x240) * (x309 - x889)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (x744 + (-x118) * (x1028 - x806 + (-x240) * (x309 - x889)) +
       (-x202) * (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889))));
  J[1110] =
    50000000.0 * sc[10] * x326 + 50000000.0 * sc[23] * x691 + x261 * x366 +
    x3949 + x6027 + x8762 + x9451 + x9811 +
    (-50000000.0 * sc[23] * x240) * (x326 - x889) +
    (x241 * x261) * (x691 - x806 + (-x240) * (x326 - x889)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (-x738 + x963 + (-x118) * (x691 - x806 + (-x240) * (x326 - x889)) +
       (-x202) *
         (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889))));
  J[1149] =
    x9819 + (-50000000.0 * sc[23] * x240) * (x888 - x889) +
    (x241 * x261) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1188] =
    x9819 + (-50000000.0 * sc[23] * x240) * (x888 - x889) +
    (x241 * x261) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1227] =
    x9819 + (-50000000.0 * sc[23] * x240) * (x888 - x889) +
    (x241 * x261) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1266] =
    50000000.0 * sc[10] * x176 + 50000000.0 * sc[23] * x1043 + x9832 +
    (-50000000.0 * sc[23] * x240) * (x176 - x889) +
    (x241 * x261) * (x1043 - x806 + (-x240) * (x176 - x889)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (x744 + (-x118) * (x1043 - x806 + (-x240) * (x176 - x889)) +
       (-x202) * (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889))));
  J[1305] =
    x9819 + (-50000000.0 * sc[23] * x240) * (x888 - x889) +
    (x241 * x261) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1344] =
    50000000.0 * sc[10] * x152 + 50000000.0 * sc[23] * x1045 + x261 * x367 +
    x3949 + x6027 + x9451 + x9811 +
    (-50000000.0 * sc[23] * x240) * (x152 - x889) +
    (x241 * x261) * (x1045 - x806 + (-x240) * (x152 - x889)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (-x738 + x968 + (-x118) * (x1045 - x806 + (-x240) * (x152 - x889)) +
       (-x202) *
         (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889))));
  J[1383] =
    50000000.0 * sc[10] * x353 + 50000000.0 * sc[23] * x232 + x261 * x543 +
    x3949 + x6027 + x9451 + x9811 +
    (-50000000.0 * sc[23] * x240) * (x353 - x889) +
    (x241 * x261) * (x232 - x806 + (-x240) * (x353 - x889)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (-x738 + x983 + (-x118) * (x232 - x806 + (-x240) * (x353 - x889)) +
       (-x202) *
         (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889))));
  J[1422] =
    50000000.0 * sc[10] * x357 + 50000000.0 * sc[23] * x291 + x9832 +
    (-50000000.0 * sc[23] * x240) * (x357 - x889) +
    (x241 * x261) * (x291 - x806 + (-x240) * (x357 - x889)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (x744 + (-x118) * (x291 - x806 + (-x240) * (x357 - x889)) +
       (-x202) * (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889))));
  J[1461] =
    x9819 + (-50000000.0 * sc[23] * x240) * (x888 - x889) +
    (x241 * x261) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-100000000.0 * sc[2] * x70 - x70 * x988) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[19] =
    -30000000.0 * sc[23] * x359 + 30000000.0 * sc[23] * x368 -
    1.7955e+21 * x2088 + 1.1931237046632101e+34 * x2091 * x2093 -
    1.1931237046632101e+34 * x2091 * x2098 +
    x2113 * (0.196 * x2106 + 1.4 * x2108) -
    x2121 * (0.196 * x2106 + 1.4 * x2108) + 1.7955e+21 * x2124 + x2389 + x8400 +
    x9879 + (-30000000.0 * sc[10] * x240) * (x647 - x669) +
    (30000000.0 * sc[23] * x241) * (x266 - x376 + (-x240) * (x647 - x669)) +
    (-x1053 * x70) *
      (x289 - x315 + (-x118) * (x266 - x376 + (-x240) * (x647 - x669)) +
       (-x202) *
         (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669))));
  J[58] =
    -30000000.0 * sc[10] * x374 + 30000000.0 * sc[10] * x693 -
    30000000.0 * sc[23] * x347 + 30000000.0 * sc[23] * x689 + x2077 +
    (-30000000.0 * sc[10] * x240) * (x713 - x715) +
    (30000000.0 * sc[23] * x241) * (-x374 + x693 + (-x240) * (x713 - x715)) +
    (-x1053 * x70) *
      (-x620 + x670 + (-x118) * (-x374 + x693 + (-x240) * (x713 - x715)) +
       (-x202) *
         (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715))));
  J[97] =
    refCinv * x2116 * x2118 + 30000000.0 * sc[23] * x688 -
    30000000.0 * sc[23] * x690 + sc[24] * x3013 + sc[28] * x2953 + x2082 +
    x2343 + 5000.0 * x2869 + x3042 + x3070 +
    (-30000000.0 * sc[10] * x240) * (x734 - x735) +
    (30000000.0 * sc[23] * x241) * (-x712 + x716 + (-x240) * (x734 - x735)) +
    (-x1053 * x70) *
      (-x678 + x703 + (-x118) * (-x712 + x716 + (-x240) * (x734 - x735)) +
       (-x202) *
         (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735))));
  J[136] =
    30000000.0 * sc[10] * x721 - 30000000.0 * sc[10] * x725 -
    96000000.0 * sc[19] + 30000000.0 * sc[23] * x125 -
    30000000.0 * sc[23] * x710 + sc[25] * x5731 + x2077 + x5829 +
    (-30000000.0 * sc[10] * x240) * (x747 - x748) +
    (30000000.0 * sc[23] * x241) * (x721 - x725 + (-x240) * (x747 - x748)) +
    (-x1053 * x70) *
      (-x717 + x719 + (-x118) * (x721 - x725 + (-x240) * (x747 - x748)) +
       (-x202) *
         (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748))));
  J[175] =
    -30000000.0 * sc[10] * x736 + 30000000.0 * sc[10] * x743 - sc[19] * x5895 -
    30110000.0 * sc[19] + sc[20] * x6789 - 30000000.0 * sc[23] * x171 +
    30000000.0 * sc[23] * x732 + x1053 * x990 + x2082 + x2343 + x6725 - x6785 +
    (-30000000.0 * sc[10] * x240) * (x768 - x770) +
    (30000000.0 * sc[23] * x241) * (-x736 + x743 + (-x240) * (x768 - x770)) +
    (-x1053 * x70) *
      (-x730 + x737 + (-x118) * (-x736 + x743 + (-x240) * (x768 - x770)) +
       (-x202) *
         (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770))));
  J[214] =
    -30000000.0 * sc[10] * x746 + 30000000.0 * sc[10] * x757 + sc[18] * x7434 -
    sc[19] * x7460 - 10000000.0 * sc[19] + sc[20] * x666 -
    30000000.0 * sc[23] * x740 + 30000000.0 * sc[23] * x741 +
    6600000.0 * sc[28] + x2077 + (-30000000.0 * sc[10] * x240) * (x800 - x801) +
    (30000000.0 * sc[23] * x241) * (-x746 + x757 + (-x240) * (x800 - x801)) +
    (-x1053 * x70) *
      (x744 + (-x118) * (-x746 + x757 + (-x240) * (x800 - x801)) +
       (-x202) *
         (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801))));
  J[253] =
    -sc[19] * x2 - 30000000.0 * sc[23] * x745 + 30000000.0 * sc[23] * x758 +
    x2076 + x3570 + x3647 + (-30000000.0 * sc[10] * x240) * (x842 - x844) +
    (30000000.0 * sc[23] * x241) * (x761 - x762 + (-x240) * (x842 - x844)) +
    (-x1053 * x70) *
      (-x754 + x756 + (-x118) * (x761 - x762 + (-x240) * (x842 - x844)) +
       (-x202) *
         (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844))));
  J[292] =
    sc[18] * x6919 - sc[19] * x3729 - sc[19] * x6921 -
    30000000.0 * sc[23] * x759 + 30000000.0 * sc[23] * x766 -
    1.539e+22 * x2088 + 1.0226774611399e+35 * x2091 * x2093 -
    1.0226774611399e+35 * x2091 * x2098 +
    x2113 * (1.68 * x2106 + 12.0 * x2108) -
    x2121 * (1.68 * x2106 + 12.0 * x2108) + 1.539e+22 * x2124 + x3832 + x8524 +
    x9838 + (-30000000.0 * sc[10] * x240) * (x864 - x875) +
    (30000000.0 * sc[23] * x241) * (-x787 + x799 + (-x240) * (x864 - x875)) +
    (-x1053 * x70) *
      (-x765 + x773 + (-x118) * (-x787 + x799 + (-x240) * (x864 - x875)) +
       (-x202) *
         (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875))));
  J[331] =
    -x7496 + x9916 + (-30000000.0 * sc[10] * x240) * (x888 - x889) +
    (30000000.0 * sc[23] * x241) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x1053 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[370] =
    -30000000.0 * sc[10] * x841 + 30000000.0 * sc[10] * x849 -
    30000000.0 * sc[23] * x838 + 30000000.0 * sc[23] * x840 + x1053 * x867 +
    x2082 + x2343 - x6039 - x7514 + x7528 - x8129 +
    (-30000000.0 * sc[10] * x240) * (x905 - x906) +
    (30000000.0 * sc[23] * x241) * (-x841 + x849 + (-x240) * (x905 - x906)) +
    (-x1053 * x70) *
      (-x779 + x792 + (-x118) * (-x841 + x849 + (-x240) * (x905 - x906)) +
       (-x202) *
         (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906))));
  J[409] =
    30000000.0 * sc[10] * x855 - 30000000.0 * sc[10] * x865 + sc[16] * x6083 -
    sc[19] * x4123 - sc[19] * x8355 - 392000.0 * sc[19] + sc[20] * x8599 +
    30000000.0 * sc[23] * x195 - 30000000.0 * sc[23] * x862 + sc[28] * x8565 +
    x2077 + 30000000.0 * x226 + (-30000000.0 * sc[10] * x240) * (-x244 + x920) +
    (30000000.0 * sc[23] * x241) * (x855 - x865 + (-x240) * (-x244 + x920)) +
    (-x1053 * x70) *
      (-x796 + x814 + (-x118) * (x855 - x865 + (-x240) * (-x244 + x920)) +
       (-x202) *
         (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920))));
  J[448] =
    -30000000.0 * sc[10] * x786 + 30000000.0 * sc[10] * x897 + sc[18] * x8618 -
    sc[19] * x2570 - 30000000.0 * sc[23] * x341 + 30000000.0 * sc[23] * x882 +
    x1000 * x1053 + x2076 + x3647 +
    (-30000000.0 * sc[10] * x240) * (x937 - x938) +
    (30000000.0 * sc[23] * x241) * (-x786 + x897 + (-x240) * (x937 - x938)) +
    (-x1053 * x70) *
      (-x827 + x834 + (-x118) * (-x786 + x897 + (-x240) * (x937 - x938)) +
       (-x202) *
         (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938))));
  J[487] =
    30000000.0 * sc[10] * x900 + sc[13] * x8142 + sc[18] * x8899 -
    90330000.0 * sc[19] + 30000000.0 * sc[23] * x883 + x1053 * x147 + x9917 +
    (-30000000.0 * sc[10] * x240) * (-x889 + x948) +
    (30000000.0 * sc[23] * x241) * (-x806 + x900 + (-x240) * (-x889 + x948)) +
    (-x1053 * x70) *
      (-x738 + x851 + (-x118) * (-x806 + x900 + (-x240) * (-x889 + x948)) +
       (-x202) *
         (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948))));
  J[526] =
    -30000000.0 * sc[10] * x904 + 30000000.0 * sc[10] * x908 + sc[12] * x8142 -
    30000000.0 * sc[23] * x886 + 30000000.0 * sc[23] * x895 + x2077 - x7119 +
    (-30000000.0 * sc[10] * x240) * (x961 - x962) +
    (30000000.0 * sc[23] * x241) * (-x904 + x908 + (-x240) * (x961 - x962)) +
    (-x1053 * x70) *
      (-x738 + x861 + (-x118) * (-x904 + x908 + (-x240) * (x961 - x962)) +
       (-x202) *
         (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962))));
  J[565] =
    30000000.0 * sc[10] * x915 + 30000000.0 * sc[23] * x896 + x2082 + x3965 +
    x9443 + (-30000000.0 * sc[10] * x240) * (-x889 + x967) +
    (30000000.0 * sc[23] * x241) * (-x806 + x915 + (-x240) * (-x889 + x967)) +
    (-x1053 * x70) *
      (-x738 + x870 + (-x118) * (-x806 + x915 + (-x240) * (-x889 + x967)) +
       (-x202) *
         (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967))));
  J[604] =
    30000000.0 * sc[10] * x709 + 30000000.0 * sc[23] * x903 + x2082 + x3965 +
    x9443 + (-30000000.0 * sc[10] * x240) * (-x889 + x971) +
    (30000000.0 * sc[23] * x241) * (x709 - x806 + (-x240) * (-x889 + x971)) +
    (-x1053 * x70) *
      (-x738 + x892 + (-x118) * (x709 - x806 + (-x240) * (-x889 + x971)) +
       (-x202) *
         (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971))));
  J[643] =
    sc[10] * x6083 + sc[20] * x8934 - 3.8475e+21 * x2088 +
    2.5566936528497398e+34 * x2091 * x2093 -
    2.5566936528497398e+34 * x2091 * x2098 +
    x2113 * (0.42 * x2106 + 3.0 * x2108) -
    x2121 * (0.42 * x2106 + 3.0 * x2108) + 3.8475e+21 * x2124 + x4609 + x8683 +
    x9589 + x9925 + (-30000000.0 * sc[10] * x240) * (x572 - x659) +
    (30000000.0 * sc[23] * x241) * (-x926 + x931 + (-x240) * (x572 - x659)) +
    (-x1053 * x70) *
      (-x894 + x902 + (-x118) * (-x926 + x931 + (-x240) * (x572 - x659)) +
       (-x202) *
         (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659))));
  J[682] =
    -30000000.0 * sc[10] * x936 + 30000000.0 * sc[10] * x947 -
    30000000.0 * sc[23] * x510 + 30000000.0 * sc[23] * x928 + x1053 * x821 +
    x2076 + x3647 + (-30000000.0 * sc[10] * x240) * (-x832 + x837) +
    (30000000.0 * sc[23] * x241) * (-x936 + x947 + (-x240) * (-x832 + x837)) +
    (-x1053 * x70) *
      (x135 - x910 + (-x118) * (-x936 + x947 + (-x240) * (-x832 + x837)) +
       (-x202) *
         (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837))));
  J[721] =
    -30000000.0 * sc[10] * x949 + 30000000.0 * sc[10] * x956 + sc[11] * x8618 +
    sc[12] * x8899 + 1920000.0 * sc[20] * x9823 + 30000000.0 * sc[23] * x878 -
    30000000.0 * sc[23] * x929 + sc[5] * x7434 + sc[6] * x3563 + sc[7] * x6919 +
    x1053 * x384 + x2071 * x2116 * x994 / (x2075 + 1.0) + x4881 + x9888 +
    x9927 + (-30000000.0 * sc[10] * x240) * (x1037 - x1038) +
    (30000000.0 * sc[23] * x241) * (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (-x1053 * x70) *
      (-x911 + x917 + (-x118) * (-x949 + x956 + (-x240) * (x1037 - x1038)) +
       (-x202) *
         (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038))));
  J[760] =
    -sc[10] * x4123 - sc[10] * x8355 - 392000.0 * sc[10] - sc[11] * x2570 -
    90330000.0 * sc[12] - 30000000.0 * sc[16] * x518 - sc[16] * x8930 -
    3840000.0 * sc[19] - 1.55e+44 * sc[21] * x9835 * x9850 +
    30000000.0 * sc[23] * x189 - 96000000.0 * sc[3] - sc[4] * x5895 -
    30110000.0 * sc[4] - sc[5] * x7460 - 10000000.0 * sc[5] - sc[6] * x2 -
    sc[7] * x3729 - sc[7] * x6921 - x2087 * x2116 + x4924 - x6299 - x6783 -
    x7553 - x7554 - x8193 - x8709 + x9917 +
    (-30000000.0 * sc[10] * x240) * (x1044 - x889) +
    (30000000.0 * sc[23] * x241) * (x563 - x806 + (-x240) * (x1044 - x889)) +
    (-x1053 * x70) *
      (-x738 + x922 + (-x118) * (x563 - x806 + (-x240) * (x1044 - x889)) +
       (-x202) *
         (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889))));
  J[799] =
    sc[10] * x8599 + sc[16] * x8934 + 1920000.0 * sc[18] * x9823 -
    30000000.0 * sc[23] * x705 + 30000000.0 * sc[23] * x935 + sc[4] * x6789 +
    sc[5] * x666 + x4881 + x4991 + x4996 + x6325 + x7557 + x9888 + x9927 +
    (-30000000.0 * sc[10] * x240) * (x1059 - x1060) +
    (30000000.0 * sc[23] * x241) * (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (-x1053 * x70) *
      (-x925 + x934 + (-x118) * (-x966 + x970 + (-x240) * (x1059 - x1060)) +
       (-x202) *
         (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060))));
  J[838] =
    30000000.0 * sc[10] * x977 - 1.55e+44 * sc[19] * x9835 * x9850 +
    30000000.0 * sc[23] * x884 - x8723 + x9840 +
    (-30000000.0 * sc[10] * x240) * (x1064 - x889) +
    (30000000.0 * sc[23] * x241) * (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (-x1053 * x70) *
      (-x738 + x941 + (-x118) * (-x806 + x977 + (-x240) * (x1064 - x889)) +
       (-x202) *
         (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889))));
  J[877] =
    30000000.0 * sc[10] * x256 - 30000000.0 * sc[10] * x992 +
    30000000.0 * sc[23] * x365 - 30000000.0 * sc[23] * x944 + x1053 * x58 +
    x4881 + x9927 + x9939 + (-30000000.0 * sc[10] * x240) * (x214 - x216) +
    (30000000.0 * sc[23] * x241) * (x256 - x992 + (-x240) * (x214 - x216)) +
    (-x1053 * x70) *
      (-x477 + x952 + (-x118) * (x256 - x992 + (-x240) * (x214 - x216)) +
       (-x202) *
         (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216))));
  J[916] =
    30000000.0 * sc[10] * x1014 - 30000000.0 * sc[10] * x805 -
    30000000.0 * sc[23] * x350 + 30000000.0 * sc[23] * x355 +
    30000000.0 * x200 + x2077 + (-30000000.0 * sc[10] * x240) * (x285 - x294) +
    (30000000.0 * sc[23] * x241) * (x1014 - x805 + (-x240) * (x285 - x294)) +
    (-x1053 * x70) *
      (-x738 + x958 + (-x118) * (x1014 - x805 + (-x240) * (x285 - x294)) +
       (-x202) *
         (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294))));
  J[955] =
    30000000.0 * sc[10] * x831 + 30000000.0 * sc[23] * x363 + sc[2] * x3013 +
    x1053 * x617 + x9917 + (-30000000.0 * sc[10] * x240) * (x306 - x889) +
    (30000000.0 * sc[23] * x241) * (-x806 + x831 + (-x240) * (x306 - x889)) +
    (-x1053 * x70) *
      (-x738 + x959 + (-x118) * (-x806 + x831 + (-x240) * (x306 - x889)) +
       (-x202) *
         (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889))));
  J[994] =
    sc[3] * x5731 + x513 + x9916 +
    (-30000000.0 * sc[10] * x240) * (x888 - x889) +
    (30000000.0 * sc[23] * x241) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x1053 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1033] =
    5000.0 * x5335 + x9916 + (-30000000.0 * sc[10] * x240) * (x888 - x889) +
    (30000000.0 * sc[23] * x241) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x1053 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1072] =
    30000000.0 * sc[10] * x1028 + 30000000.0 * sc[23] * x797 + x9840 +
    (-30000000.0 * sc[10] * x240) * (x309 - x889) +
    (30000000.0 * sc[23] * x241) * (x1028 - x806 + (-x240) * (x309 - x889)) +
    (-x1053 * x70) *
      (x744 + (-x118) * (x1028 - x806 + (-x240) * (x309 - x889)) +
       (-x202) * (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889))));
  J[1111] =
    30000000.0 * sc[10] * x691 + sc[10] * x8565 + 30000000.0 * sc[23] * x366 +
    sc[2] * x2953 + 6600000.0 * sc[5] + x9840 +
    (-30000000.0 * sc[10] * x240) * (x326 - x889) +
    (30000000.0 * sc[23] * x241) * (x691 - x806 + (-x240) * (x326 - x889)) +
    (-x1053 * x70) *
      (-x738 + x963 + (-x118) * (x691 - x806 + (-x240) * (x326 - x889)) +
       (-x202) *
         (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889))));
  J[1150] =
    4.27e+46 * refC * x15 * x8365 * x8376 + x9916 +
    (-30000000.0 * sc[10] * x240) * (x888 - x889) +
    (30000000.0 * sc[23] * x241) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x1053 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1189] =
    x9916 + (-30000000.0 * sc[10] * x240) * (x888 - x889) +
    (30000000.0 * sc[23] * x241) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x1053 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1228] =
    1.55e+44 * x503 * x9850 * x9852 + x9916 +
    (-30000000.0 * sc[10] * x240) * (x888 - x889) +
    (30000000.0 * sc[23] * x241) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x1053 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1267] =
    30000000.0 * sc[10] * x1043 + 30000000.0 * sc[23] * x797 + x9840 +
    (-30000000.0 * sc[10] * x240) * (x176 - x889) +
    (30000000.0 * sc[23] * x241) * (x1043 - x806 + (-x240) * (x176 - x889)) +
    (-x1053 * x70) *
      (x744 + (-x118) * (x1043 - x806 + (-x240) * (x176 - x889)) +
       (-x202) * (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889))));
  J[1306] =
    x9916 + (-30000000.0 * sc[10] * x240) * (x888 - x889) +
    (30000000.0 * sc[23] * x241) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x1053 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1345] =
    30000000.0 * sc[10] * x1045 + 30000000.0 * sc[23] * x367 + x9840 +
    (-30000000.0 * sc[10] * x240) * (x152 - x889) +
    (30000000.0 * sc[23] * x241) * (x1045 - x806 + (-x240) * (x152 - x889)) +
    (-x1053 * x70) *
      (-x738 + x968 + (-x118) * (x1045 - x806 + (-x240) * (x152 - x889)) +
       (-x202) *
         (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889))));
  J[1384] =
    30000000.0 * sc[10] * x232 + 30000000.0 * sc[23] * x543 + x9840 +
    (-30000000.0 * sc[10] * x240) * (x353 - x889) +
    (30000000.0 * sc[23] * x241) * (x232 - x806 + (-x240) * (x353 - x889)) +
    (-x1053 * x70) *
      (-x738 + x983 + (-x118) * (x232 - x806 + (-x240) * (x353 - x889)) +
       (-x202) *
         (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889))));
  J[1423] =
    30000000.0 * sc[10] * x291 + 30000000.0 * sc[23] * x797 + x9840 +
    (-30000000.0 * sc[10] * x240) * (x357 - x889) +
    (30000000.0 * sc[23] * x241) * (x291 - x806 + (-x240) * (x357 - x889)) +
    (-x1053 * x70) *
      (x744 + (-x118) * (x291 - x806 + (-x240) * (x357 - x889)) +
       (-x202) * (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889))));
  J[1462] =
    x9916 + (-30000000.0 * sc[10] * x240) * (x888 - x889) +
    (30000000.0 * sc[23] * x241) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x1053 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[20] =
    -30000000.0 * sc[20] * x266 - 100000000.0 * sc[20] * x289 +
    100000000.0 * sc[20] * x315 + 30000000.0 * sc[20] * x376 + x1047 * x359 -
    x1047 * x368 - x1063 * x359 + x1063 * x368 - 4.9e+44 * x191 +
    2.25657894736842e+29 * x2339 * x2340 -
    2.25657894736842e+29 * x2339 * x2386 + 9.8e+17 * x2348 * x2352 -
    9.8e+17 * x2348 * x2378 - x2367 * (1.4 * x2358 + 0.196 * x2360) +
    x2381 * (1.4 * x2358 + 0.196 * x2360) + x2500 + x264 * x311 + x311 * x344 -
    4.2875e+76 * x38 * x39 + 4.2875e+76 * x39 * x7608 + x7588 * x7595 -
    x7588 * x7604 + 4.9e+44 * x7600 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x647 - x669) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (x266 - x376 + (-x240) * (x647 - x669)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669))) +
    (-x264 * x70 - x344 * x70) *
      (x289 - x315 + (-x118) * (x266 - x376 + (-x240) * (x647 - x669)) +
       (-x202) *
         (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669))));
  J[59] =
    30000000.0 * sc[20] * x374 + 100000000.0 * sc[20] * x620 -
    100000000.0 * sc[20] * x670 - 30000000.0 * sc[20] * x693 + x1047 * x347 -
    x1047 * x689 - x1063 * x347 + x1063 * x689 + x2658 + x2796 + x9942 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x713 - x715) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x374 + x693 + (-x240) * (x713 - x715)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715))) +
    (-x264 * x70 - x344 * x70) *
      (-x620 + x670 + (-x118) * (-x374 + x693 + (-x240) * (x713 - x715)) +
       (-x202) *
         (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715))));
  J[98] =
    sc[19] * x15 * x2364 + 100000000.0 * sc[20] * x678 -
    100000000.0 * sc[20] * x703 + 30000000.0 * sc[20] * x712 -
    30000000.0 * sc[20] * x716 + 2000000.0 * sc[21] +
    30000000.0 * sc[27] * x584 + 20000000.0 * sc[28] * x2956 +
    50000000.0 * sc[28] * x399 + 8000000000000000.0 * sc[29] * x2805 +
    1.6e+16 * sc[31] * x2805 - x1047 * x688 + x1047 * x690 + x1063 * x688 -
    x1063 * x690 + x2341 + x264 * x989 + x2796 + 95100.0 * x2869 + x3073 +
    x344 * x989 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x734 - x735) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x712 + x716 + (-x240) * (x734 - x735)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735))) +
    (-x264 * x70 - x344 * x70) *
      (-x678 + x703 + (-x118) * (-x712 + x716 + (-x240) * (x734 - x735)) +
       (-x202) *
         (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735))));
  J[137] =
    100000000.0 * sc[20] * x717 - 100000000.0 * sc[20] * x719 -
    30000000.0 * sc[20] * x721 + 30000000.0 * sc[20] * x725 - x1047 * x125 +
    x1047 * x710 + x2796 + x3196 + x5723 + x5834 + x9942 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x747 - x748) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (x721 - x725 + (-x240) * (x747 - x748)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748))) +
    (-x264 * x70 - x344 * x70) *
      (-x717 + x719 + (-x118) * (x721 - x725 + (-x240) * (x747 - x748)) +
       (-x202) *
         (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748))));
  J[176] =
    sc[19] * x5895 - sc[20] * x3223 - sc[20] * x6789 +
    100000000.0 * sc[20] * x730 + 30000000.0 * sc[20] * x736 -
    100000000.0 * sc[20] * x737 - 30000000.0 * sc[20] * x743 + sc[26] * x6673 +
    x1047 * x171 - x1047 * x732 - x1063 * x171 + x1063 * x732 + x2341 +
    x264 * x990 + x2796 + x3311 + x344 * x990 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x768 - x770) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x736 + x743 + (-x240) * (x768 - x770)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770))) +
    (-x264 * x70 - x344 * x70) *
      (-x730 + x737 + (-x118) * (-x736 + x743 + (-x240) * (x768 - x770)) +
       (-x202) *
         (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770))));
  J[215] =
    sc[19] * x7460 - sc[20] * x666 - sc[20] * x6826 -
    100000000.0 * sc[20] * x701 + 100000000.0 * sc[20] * x738 +
    30000000.0 * sc[20] * x746 - sc[20] * x7463 - 30000000.0 * sc[20] * x757 +
    300000.0 * sc[21] + x1047 * x740 - x1047 * x741 - x1063 * x740 +
    x1063 * x741 + x3391 + x9942 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x800 - x801) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x746 + x757 + (-x240) * (x800 - x801)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801))) +
    (-x264 * x70 - x344 * x70) *
      (x744 + (-x118) * (-x746 + x757 + (-x240) * (x800 - x801)) +
       (-x202) *
         (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801))));
  J[254] =
    7.0e+44 * refCinv * x228 * x253 * x35 * x3566 - sc[20] * x3455 +
    100000000.0 * sc[20] * x754 - 100000000.0 * sc[20] * x756 -
    30000000.0 * sc[20] * x761 + 30000000.0 * sc[20] * x762 + x1047 * x745 -
    x1047 * x758 - x1063 * x745 + x1063 * x758 + x264 * x825 + x344 * x825 +
    x3590 + x3665 + x9949 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x842 - x844) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (x761 - x762 + (-x240) * (x842 - x844)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844))) +
    (-x264 * x70 - x344 * x70) *
      (-x754 + x756 + (-x118) * (x761 - x762 + (-x240) * (x842 - x844)) +
       (-x202) *
         (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844))));
  J[293] =
    4.2e+45 * refCinv * sc[6] * x228 * x253 * x3566 -
    sc[19] * sc[2] * x15 * x2362 * x2364 + sc[19] * x6921 -
    4.2e+45 * sc[20] * x185 * x228 + 100000000.0 * sc[20] * x765 -
    100000000.0 * sc[20] * x773 + 30000000.0 * sc[20] * x787 -
    30000000.0 * sc[20] * x799 + x1047 * x759 - x1047 * x766 - x1063 * x759 +
    x1063 * x766 + 1.4e+18 * x15 * x2348 * x2362 * x2378 +
    1.9342105263157899e+30 * x2339 * x2340 -
    1.9342105263157899e+30 * x2339 * x2386 + 8.4e+18 * x2348 * x2352 -
    8.4e+18 * x2348 * x2378 + x264 * x860 + x344 * x860 -
    3.675e+77 * x38 * x39 + x3846 + 3.675e+77 * x39 * x7608 +
    x7595 * (12.0 * x249 * x7586 + 1.68 * x249 * x7587) -
    x7604 * (12.0 * x249 * x7586 + 1.68 * x249 * x7587) +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x864 - x875) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x787 + x799 + (-x240) * (x864 - x875)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875))) +
    (-x264 * x70 - x344 * x70) *
      (-x765 + x773 + (-x118) * (-x787 + x799 + (-x240) * (x864 - x875)) +
       (-x202) *
         (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875))));
  J[332] =
    -sc[20] * x7491 + x7496 + x9953 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x888 - x889) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-x264 * x70 - x344 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[371] =
    100000000.0 * sc[20] * x779 - 100000000.0 * sc[20] * x792 +
    30000000.0 * sc[20] * x841 - 30000000.0 * sc[20] * x849 + 20000.0 * sc[21] +
    x1047 * x838 - x1047 * x840 - x1063 * x838 + x1063 * x840 + x2341 +
    x264 * x867 + x2796 + x344 * x867 + x4040 - x7528 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x905 - x906) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x841 + x849 + (-x240) * (x905 - x906)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906))) +
    (-x264 * x70 - x344 * x70) *
      (-x779 + x792 + (-x118) * (-x841 + x849 + (-x240) * (x905 - x906)) +
       (-x202) *
         (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906))));
  J[410] =
    sc[12] * x6101 - sc[20] * x4083 + 100000000.0 * sc[20] * x796 -
    100000000.0 * sc[20] * x814 - 30000000.0 * sc[20] * x855 - sc[20] * x8596 -
    sc[20] * x8599 + 30000000.0 * sc[20] * x865 + 50000000.0 * sc[23] -
    x1047 * x195 + x1047 * x862 + x1063 * x195 - x1063 * x862 + x2796 + x4161 +
    x9942 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) *
      (-x244 + x920) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (x855 - x865 + (-x240) * (-x244 + x920)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920))) +
    (-x264 * x70 - x344 * x70) *
      (-x796 + x814 + (-x118) * (x855 - x865 + (-x240) * (-x244 + x920)) +
       (-x202) *
         (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920))));
  J[449] =
    sc[19] * x2570 + 30000000.0 * sc[20] * x786 + 100000000.0 * sc[20] * x827 -
    100000000.0 * sc[20] * x834 - 30000000.0 * sc[20] * x897 + x1000 * x264 +
    x1000 * x344 + x1047 * x341 - x1047 * x882 - x1063 * x341 + x1063 * x882 +
    50000000.0 * x3566 * x65 + x3665 + x4238 + x9949 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x937 - x938) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x786 + x897 + (-x240) * (x937 - x938)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938))) +
    (-x264 * x70 - x344 * x70) *
      (-x827 + x834 + (-x118) * (-x786 + x897 + (-x240) * (x937 - x938)) +
       (-x202) *
         (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938))));
  J[488] =
    sc[10] * x6101 + 40000000.0 * sc[10] * x883 + 60000000.0 * sc[11] * x900 +
    90330000.0 * sc[19] + 100000000.0 * sc[20] * x738 -
    100000000.0 * sc[20] * x851 - sc[20] * x8906 - 30000000.0 * sc[20] * x900 -
    x1047 * x883 + x1051 * x851 + x1063 * x883 + x147 * x264 + x147 * x344 +
    x2341 + x3389 + x3977 + x6032 + x9951 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) *
      (-x889 + x948) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x806 + x900 + (-x240) * (-x889 + x948)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948))) +
    (-x264 * x70 - x344 * x70) *
      (-x738 + x851 + (-x118) * (-x806 + x900 + (-x240) * (-x889 + x948)) +
       (-x202) *
         (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948))));
  J[527] =
    100000000.0 * sc[20] * x738 - 100000000.0 * sc[20] * x861 +
    30000000.0 * sc[20] * x904 - 30000000.0 * sc[20] * x908 + x1047 * x886 -
    x1047 * x895 - x1063 * x886 + x1063 * x895 + x200 * x459 + x3389 + x4362 +
    x9942 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x961 - x962) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x904 + x908 + (-x240) * (x961 - x962)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962))) +
    (-x264 * x70 - x344 * x70) *
      (-x738 + x861 + (-x118) * (-x904 + x908 + (-x240) * (x961 - x962)) +
       (-x202) *
         (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962))));
  J[566] =
    40000000.0 * sc[10] * x896 + 60000000.0 * sc[11] * x915 -
    100000000.0 * sc[20] * x870 - 30000000.0 * sc[20] * x915 - x1047 * x896 +
    x1051 * x870 + x1063 * x896 + x9959 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) *
      (-x889 + x967) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x806 + x915 + (-x240) * (-x889 + x967)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967))) +
    (-x264 * x70 - x344 * x70) *
      (-x738 + x870 + (-x118) * (-x806 + x915 + (-x240) * (-x889 + x967)) +
       (-x202) *
         (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967))));
  J[605] =
    40000000.0 * sc[10] * x903 + 60000000.0 * sc[11] * x709 -
    30000000.0 * sc[20] * x709 - 100000000.0 * sc[20] * x892 - x1047 * x903 +
    x1051 * x892 + x1063 * x903 + x9959 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) *
      (-x889 + x971) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (x709 - x806 + (-x240) * (-x889 + x971)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971))) +
    (-x264 * x70 - x344 * x70) *
      (-x738 + x892 + (-x118) * (x709 - x806 + (-x240) * (-x889 + x971)) +
       (-x202) *
         (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971))));
  J[644] =
    -sc[20] * x6209 - sc[20] * x8653 - sc[20] * x8934 +
    100000000.0 * sc[20] * x894 - 100000000.0 * sc[20] * x902 +
    30000000.0 * sc[20] * x926 - 30000000.0 * sc[20] * x931 + sc[21] * x8932 +
    x1047 * x912 - x1047 * x913 - x1063 * x912 + x1063 * x913 -
    1.05e+45 * x191 + 4.8355263157894698e+29 * x2339 * x2340 -
    4.8355263157894698e+29 * x2339 * x2386 + 2.1e+18 * x2348 * x2352 -
    2.1e+18 * x2348 * x2378 - x2367 * (3.0 * x2358 + 0.42 * x2360) +
    x2381 * (3.0 * x2358 + 0.42 * x2360) + x264 * x987 + x344 * x987 -
    9.1875e+76 * x38 * x39 + 9.1875e+76 * x39 * x7608 + x4647 +
    x7595 * (3.0 * x249 * x7586 + 0.42 * x249 * x7587) + 1.05e+45 * x7600 -
    x7604 * (3.0 * x249 * x7586 + 0.42 * x249 * x7587) +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x572 - x659) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x926 + x931 + (-x240) * (x572 - x659)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659))) +
    (-x264 * x70 - x344 * x70) *
      (-x894 + x902 + (-x118) * (-x926 + x931 + (-x240) * (x572 - x659)) +
       (-x202) *
         (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659))));
  J[683] =
    -100000000.0 * sc[20] * x135 + 100000000.0 * sc[20] * x910 +
    30000000.0 * sc[20] * x936 - 30000000.0 * sc[20] * x947 + x1047 * x510 -
    x1047 * x928 - x1063 * x510 + x1063 * x928 + x264 * x821 + x344 * x821 +
    x4757 + x9949 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) *
      (-x832 + x837) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x936 + x947 + (-x240) * (-x832 + x837)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837))) +
    (-x264 * x70 - x344 * x70) *
      (x135 - x910 + (-x118) * (-x936 + x947 + (-x240) * (-x832 + x837)) +
       (-x202) *
         (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837))));
  J[722] =
    100000000.0 * sc[20] * x911 - 100000000.0 * sc[20] * x917 +
    30000000.0 * sc[20] * x949 - 30000000.0 * sc[20] * x956 -
    960000.0 * sc[20] * x9823 - x1047 * x878 + x1047 * x929 + x1063 * x878 -
    x1063 * x929 + x264 * x384 + x2796 + x344 * x384 + x45 + x4831 + x9960 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) *
      (x1037 - x1038) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038))) +
    (-x264 * x70 - x344 * x70) *
      (-x911 + x917 + (-x118) * (-x949 + x956 + (-x240) * (x1037 - x1038)) +
       (-x202) *
         (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038))));
  J[761] =
    40000000.0 * sc[10] * x189 + sc[11] * x2570 + 60000000.0 * sc[11] * x563 +
    90330000.0 * sc[12] + 1920000.0 * sc[19] - 30000000.0 * sc[20] * x563 +
    100000000.0 * sc[20] * x738 - 100000000.0 * sc[20] * x922 +
    sc[2] * x15 * x2364 + sc[4] * x5895 + sc[5] * x7460 + sc[6] * x2 +
    sc[7] * x6921 - x1047 * x189 + x1051 * x922 + x1063 * x189 + x2341 +
    x264 * x824 + x3389 + x344 * x824 + x3977 + x6032 + x7554 + x9951 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) *
      (x1044 - x889) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (x563 - x806 + (-x240) * (x1044 - x889)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889))) +
    (-x264 * x70 - x344 * x70) *
      (-x738 + x922 + (-x118) * (x563 - x806 + (-x240) * (x1044 - x889)) +
       (-x202) *
         (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889))));
  J[800] =
    -sc[10] * x4083 - sc[10] * x8596 - sc[10] * x8599 - sc[12] * x8906 -
    sc[16] * x6209 - sc[16] * x8653 - sc[16] * x8934 -
    960000.0 * sc[18] * x9823 + 100000000.0 * sc[20] * x925 -
    100000000.0 * sc[20] * x934 + 30000000.0 * sc[20] * x966 -
    30000000.0 * sc[20] * x970 - sc[21] * x4934 - sc[4] * x3223 -
    sc[4] * x6789 - sc[5] * x666 - sc[5] * x6826 - sc[5] * x7463 -
    sc[6] * x3455 - sc[8] * x7491 + x1047 * x705 - x1047 * x935 -
    1.4e+18 * x15 * x2348 * x2349 - 7.0e+44 * x185 * x228 * x35 -
    20000000.0 * x200 * exp(-3019.29999482832 * invT) - 30000000.0 * x226 +
    x264 * x42 + x2796 + x344 * x42 + x45 + x5004 - 100000000.0 * x6 + x6327 -
    x7557 + x9960 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) *
      (x1059 - x1060) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060))) +
    (-x264 * x70 - x344 * x70) *
      (-x925 + x934 + (-x118) * (-x966 + x970 + (-x240) * (x1059 - x1060)) +
       (-x202) *
         (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060))));
  J[839] =
    sc[16] * x8932 - sc[20] * x4934 - 100000000.0 * sc[20] * x941 -
    30000000.0 * sc[20] * x977 + 2000000.0 * sc[2] + 300000.0 * sc[5] +
    20000.0 * sc[9] - x1047 * x884 + x1063 * x884 + x5048 + x9959 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) *
      (x1064 - x889) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889))) +
    (-x264 * x70 - x344 * x70) *
      (-x738 + x941 + (-x118) * (-x806 + x977 + (-x240) * (x1064 - x889)) +
       (-x202) *
         (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889))));
  J[878] =
    -30000000.0 * sc[20] * x256 + 100000000.0 * sc[20] * x477 -
    100000000.0 * sc[20] * x952 + 30000000.0 * sc[20] * x992 - x1047 * x365 +
    x1047 * x944 + x1063 * x365 - x1063 * x944 - 2.1e+45 * x191 + x264 * x58 +
    x344 * x58 - 1.8375e+77 * x38 * x39 + 1.8375e+77 * x39 * x7608 + x5190 +
    x7595 * (6.0 * x249 * x7586 + 0.84 * x249 * x7587) + 2.1e+45 * x7600 -
    x7604 * (6.0 * x249 * x7586 + 0.84 * x249 * x7587) + x9960 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x214 - x216) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (x256 - x992 + (-x240) * (x214 - x216)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216))) +
    (-x264 * x70 - x344 * x70) *
      (-x477 + x952 + (-x118) * (x256 - x992 + (-x240) * (x214 - x216)) +
       (-x202) *
         (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216))));
  J[917] =
    50000000.0 * sc[10] - 30000000.0 * sc[20] * x1014 +
    100000000.0 * sc[20] * x738 + 30000000.0 * sc[20] * x805 -
    100000000.0 * sc[20] * x958 + x1047 * x350 - x1047 * x355 - x1063 * x350 +
    x1063 * x355 + x3389 + x5269 + x9942 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x285 - x294) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (x1014 - x805 + (-x240) * (x285 - x294)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294))) +
    (-x264 * x70 - x344 * x70) *
      (-x738 + x958 + (-x118) * (x1014 - x805 + (-x240) * (x285 - x294)) +
       (-x202) *
         (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294))));
  J[956] =
    40000000.0 * sc[10] * x363 + 60000000.0 * sc[11] * x831 +
    100000000.0 * sc[20] * x738 - 30000000.0 * sc[20] * x831 -
    100000000.0 * sc[20] * x959 - x1047 * x363 + x1051 * x959 + x1063 * x363 +
    x2341 + x264 * x617 + x3389 + x344 * x617 + x3977 + x6032 + x9951 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x306 - x889) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x806 + x831 + (-x240) * (x306 - x889)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889))) +
    (-x264 * x70 - x344 * x70) *
      (-x738 + x959 + (-x118) * (-x806 + x831 + (-x240) * (x306 - x889)) +
       (-x202) *
         (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889))));
  J[995] =
    x9953 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x888 - x889) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-x264 * x70 - x344 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1034] =
    sc[4] * x6673 + 95100.0 * x5335 + x9953 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x888 - x889) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-x264 * x70 - x344 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1073] =
    60000000.0 * sc[11] * x1028 - 30000000.0 * sc[20] * x1028 +
    30000000.0 * sc[2] * x584 + x3978 + x6407 + x9952 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x309 - x889) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (x1028 - x806 + (-x240) * (x309 - x889)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889))) +
    (-x264 * x70 - x344 * x70) *
      (x744 + (-x118) * (x1028 - x806 + (-x240) * (x309 - x889)) +
       (-x202) * (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889))));
  J[1112] =
    40000000.0 * sc[10] * x366 + 60000000.0 * sc[11] * x691 -
    30000000.0 * sc[20] * x691 - 100000000.0 * sc[20] * x963 +
    20000000.0 * sc[2] * x2956 + 50000000.0 * sc[2] * x399 - x1047 * x366 +
    x1051 * x963 + x1063 * x366 + x9959 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x326 - x889) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (x691 - x806 + (-x240) * (x326 - x889)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889))) +
    (-x264 * x70 - x344 * x70) *
      (-x738 + x963 + (-x118) * (x691 - x806 + (-x240) * (x326 - x889)) +
       (-x202) *
         (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889))));
  J[1151] =
    8000000000000000.0 * sc[2] * x2805 + x9953 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x888 - x889) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-x264 * x70 - x344 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1190] =
    x8776 + x9953 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x888 - x889) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-x264 * x70 - x344 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1229] =
    1.6e+16 * sc[2] * x2805 + x9953 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x888 - x889) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-x264 * x70 - x344 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1268] =
    60000000.0 * sc[11] * x1043 - 30000000.0 * sc[20] * x1043 + x3978 + x9952 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x176 - x889) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (x1043 - x806 + (-x240) * (x176 - x889)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889))) +
    (-x264 * x70 - x344 * x70) *
      (x744 + (-x118) * (x1043 - x806 + (-x240) * (x176 - x889)) +
       (-x202) * (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889))));
  J[1307] =
    x9953 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x888 - x889) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-x264 * x70 - x344 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1346] =
    40000000.0 * sc[10] * x367 + 60000000.0 * sc[11] * x1045 -
    30000000.0 * sc[20] * x1045 + 100000000.0 * sc[20] * x738 -
    100000000.0 * sc[20] * x968 - x1047 * x367 + x1051 * x968 + x1063 * x367 +
    x3389 + x3977 + x6032 + x9942 + x9951 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x152 - x889) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (x1045 - x806 + (-x240) * (x152 - x889)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889))) +
    (-x264 * x70 - x344 * x70) *
      (-x738 + x968 + (-x118) * (x1045 - x806 + (-x240) * (x152 - x889)) +
       (-x202) *
         (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889))));
  J[1385] =
    40000000.0 * sc[10] * x543 + 60000000.0 * sc[11] * x232 -
    30000000.0 * sc[20] * x232 - 100000000.0 * sc[20] * x983 - x1047 * x543 +
    x1051 * x983 + x1063 * x543 + x9959 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x353 - x889) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (x232 - x806 + (-x240) * (x353 - x889)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889))) +
    (-x264 * x70 - x344 * x70) *
      (-x738 + x983 + (-x118) * (x232 - x806 + (-x240) * (x353 - x889)) +
       (-x202) *
         (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889))));
  J[1424] =
    60000000.0 * sc[11] * x291 - 30000000.0 * sc[20] * x291 + x3978 + x9952 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x357 - x889) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (x291 - x806 + (-x240) * (x357 - x889)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889))) +
    (-x264 * x70 - x344 * x70) *
      (x744 + (-x118) * (x291 - x806 + (-x240) * (x357 - x889)) +
       (-x202) * (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889))));
  J[1463] =
    x9953 +
    (-60000000.0 * sc[11] * x240 + 30000000.0 * sc[20] * x240) * (x888 - x889) +
    (40000000.0 * sc[10] * x241 + 100000000.0 * sc[20] * x118 - x1047 * x241 -
     x1051 * x118 + x1063 * x241) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (100000000.0 * sc[20] * x202 - x1051 * x202) *
      (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))) +
    (-x264 * x70 - x344 * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[21] = x2233 - 2.10395779078274e+51 * x2451 * x2452 +
          2.10395779078274e+51 * x2451 * x2453 + 1.4189e+27 * x2456 * x2468 -
          x2460 * x2473 + x2460 * x2498 - 1.4189e+27 * x2481 + x289 * x319 -
          x315 * x319 + x9879 +
          (-x118 * x319) * (x266 - x376 + (-x240) * (x647 - x669)) +
          (-x202 * x319) *
            (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669)));
  J[60] = -x319 * x620 + x319 * x670 + x9966 +
          (-x118 * x319) * (-x374 + x693 + (-x240) * (x713 - x715)) +
          (-x202 * x319) *
            (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715)));
  J[99] = sc[30] * x2907 + 1.6e+16 * sc[31] * x2805 + x2471 + x2812 + x2978 -
          x319 * x678 + x319 * x703 + x9966 +
          (-x118 * x319) * (-x712 + x716 + (-x240) * (x734 - x735)) +
          (-x202 * x319) *
            (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735)));
  J[138] = -16040000.0 * sc[21] + 96000000.0 * sc[30] - x319 * x717 +
           x319 * x719 + x5747 + x5802 + x9966 +
           (-x118 * x319) * (x721 - x725 + (-x240) * (x747 - x748)) +
           (-x202 * x319) *
             (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748)));
  J[177] = 24000000.0 * sc[13] * x2990 * x6797 - sc[21] * x5849 - x319 * x730 +
           x319 * x737 + x6684 - x6752 + x9966 +
           (-x118 * x319) * (-x736 + x743 + (-x240) * (x768 - x770)) +
           (-x202 * x319) *
             (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770)));
  J[216] = sc[20] * x7463 - 24600000.0 * sc[21] + sc[22] * x7425 +
           24000000.0 * sc[30] + x9968 +
           (-x118 * x319) * (-x746 + x757 + (-x240) * (x800 - x801)) +
           (-x202 * x319) *
             (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801)));
  J[255] = sc[20] * x3455 - sc[21] * x3447 + x2462 - x319 * x754 + x319 * x756 +
           (-x118 * x319) * (x761 - x762 + (-x240) * (x842 - x844)) +
           (-x202 * x319) *
             (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844)));
  J[294] = -sc[21] * x6905 - 1.80339239209949e+52 * x2451 * x2452 +
           1.80339239209949e+52 * x2451 * x2453 + 1.2162e+28 * x2456 * x2468 -
           x2473 * (1.68 * x2457 * x249 + 12.0 * x2459 * x249) -
           1.2162e+28 * x2481 +
           x2498 * (1.68 * x2457 * x249 + 12.0 * x2459 * x249) - x319 * x765 +
           x319 * x773 + x3794 + x9838 +
           (-x118 * x319) * (-x787 + x799 + (-x240) * (x864 - x875)) +
           (-x202 * x319) *
             (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875)));
  J[333] =
    sc[20] * x7491 - x7485 + x9968 +
    (-x118 * x319) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x319) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[372] = -20000.0 * sc[21] + sc[22] * x7517 - x319 * x779 + x319 * x792 +
           x9966 + (-x118 * x319) * (-x841 + x849 + (-x240) * (x905 - x906)) +
           (-x202 * x319) *
             (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906)));
  J[411] = sc[13] * x6080 + sc[28] * x8565 +
           24000000.0 * sc[4] * x6750 * x6797 + 9980000.0 * x4085 + x8546 +
           x8587 + x9966 +
           (-x118 * x319) * (x855 - x865 + (-x240) * (-x244 + x920)) +
           (-x202 * x319) *
             (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920)));
  J[450] = -sc[21] * x8608 + x2462 - x319 * x827 + x319 * x834 +
           (-x118 * x319) * (-x786 + x897 + (-x240) * (x937 - x938)) +
           (-x202 * x319) *
             (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938)));
  J[489] =
    sc[20] * x8906 - sc[21] * x6132 + x319 * x851 + x9967 +
    (-x118 * x319) * (-x806 + x900 + (-x240) * (-x889 + x948)) +
    (-x202 * x319) *
      (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948)));
  J[528] = sc[10] * x6080 - sc[21] * x6152 +
           24000000.0 * sc[4] * x2990 * x6797 + x319 * x861 - x7106 + x9967 +
           (-x118 * x319) * (-x904 + x908 + (-x240) * (x961 - x962)) +
           (-x202 * x319) *
             (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962)));
  J[567] =
    x319 * x870 + x9967 +
    (-x118 * x319) * (-x806 + x915 + (-x240) * (-x889 + x967)) +
    (-x202 * x319) *
      (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967)));
  J[606] = x319 * x892 + x9967 +
           (-x118 * x319) * (x709 - x806 + (-x240) * (-x889 + x971)) +
           (-x202 * x319) *
             (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971)));
  J[645] = -sc[21] * x8932 - 4.5084809802487197e+51 * x2451 * x2452 +
           4.5084809802487197e+51 * x2451 * x2453 + 3.0405e+27 * x2456 * x2468 -
           x2473 * (0.42 * x2457 * x249 + 3.0 * x2459 * x249) -
           3.0405e+27 * x2481 +
           x2498 * (0.42 * x2457 * x249 + 3.0 * x2459 * x249) - x319 * x894 +
           x319 * x902 + x4552 + x9925 +
           (-x118 * x319) * (-x926 + x931 + (-x240) * (x572 - x659)) +
           (-x202 * x319) *
             (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659)));
  J[684] =
    x135 * x319 + x2462 - x319 * x910 +
    (-x118 * x319) * (-x936 + x947 + (-x240) * (-x832 + x837)) +
    (-x202 * x319) *
      (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837)));
  J[723] =
    -x319 * x911 + x319 * x917 + x9966 +
    (-x118 * x319) * (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (-x202 * x319) *
      (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038)));
  J[762] = -1.55e+44 * sc[21] * x9835 * x9850 + x319 * x922 - x8709 + x9967 +
           (-x118 * x319) * (x563 - x806 + (-x240) * (x1044 - x889)) +
           (-x202 * x319) *
             (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889)));
  J[801] =
    sc[12] * x8906 - sc[21] * x4934 +
    2.027e+27 * sc[2] * x2468 * x35 * exp(x2463) + sc[5] * x7463 +
    sc[6] * x3455 + sc[8] * x7491 - x319 * x925 + x319 * x934 + x9966 +
    (-x118 * x319) * (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (-x202 * x319) *
      (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060)));
  J[840] =
    -sc[10] * x4077 - sc[10] * x8583 - sc[11] * x8608 - sc[12] * x6132 -
    sc[13] * x6152 - sc[16] * x8932 - 1.55e+44 * sc[19] * x9835 * x9850 -
    sc[20] * x4934 - 16040000.0 * sc[3] - sc[4] * x5849 -
    24000000.0 * sc[4] * x6749 * x6750 - 24600000.0 * sc[5] - sc[6] * x3447 -
    sc[7] * x6905 - 20000.0 * sc[9] -
    2.027e+27 * x2468 * x503 * exp(x2463 + x2477) + x319 * x941 + x5051 -
    x7564 - x8723 + x9967 +
    (-x118 * x319) * (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (-x202 * x319) *
      (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889)));
  J[879] =
    -6.081e+27 * refC * sc[21] * x2468 * exp(x2463 + x2477) + sc[5] * x7425 +
    sc[9] * x7517 - 9.0169619604974394e+51 * x2451 * x2452 +
    9.0169619604974394e+51 * x2451 * x2453 + 6.081e+27 * x2456 * x2468 -
    x2473 * (0.84 * x2457 * x249 + 6.0 * x2459 * x249) +
    x2498 * (0.84 * x2457 * x249 + 6.0 * x2459 * x249) - x319 * x477 +
    x319 * x952 + x5060 + x5156 +
    40000000.0 * x6 * exp(276.769166192596 * invT) + x6338 + x7280 + x8729 +
    x9939 + (-x118 * x319) * (x256 - x992 + (-x240) * (x214 - x216)) +
    (-x202 * x319) *
      (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216)));
  J[918] = x319 * x958 + x9967 +
           (-x118 * x319) * (x1014 - x805 + (-x240) * (x285 - x294)) +
           (-x202 * x319) *
             (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294)));
  J[957] = x319 * x959 + x9967 +
           (-x118 * x319) * (-x806 + x831 + (-x240) * (x306 - x889)) +
           (-x202 * x319) *
             (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889)));
  J[996] =
    x9968 + (-x118 * x319) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x319) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1035] =
    x9968 + (-x118 * x319) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x319) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1074] =
    x9968 + (-x118 * x319) * (x1028 - x806 + (-x240) * (x309 - x889)) +
    (-x202 * x319) * (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889)));
  J[1113] = sc[10] * x8565 + x319 * x963 + x9967 +
            (-x118 * x319) * (x691 - x806 + (-x240) * (x326 - x889)) +
            (-x202 * x319) *
              (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889)));
  J[1152] =
    x6420 + x9968 + (-x118 * x319) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x319) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1191] =
    sc[2] * x2907 + 96000000.0 * sc[3] + 24000000.0 * sc[5] + x9968 +
    (-x118 * x319) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x319) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1230] =
    1.6e+16 * sc[2] * x2805 + 1.55e+44 * x503 * x9850 * x9852 + x9968 +
    (-x118 * x319) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x319) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1269] =
    x9968 + (-x118 * x319) * (x1043 - x806 + (-x240) * (x176 - x889)) +
    (-x202 * x319) * (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889)));
  J[1308] =
    x9968 + (-x118 * x319) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x319) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1347] = x319 * x968 + x9967 +
            (-x118 * x319) * (x1045 - x806 + (-x240) * (x152 - x889)) +
            (-x202 * x319) *
              (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889)));
  J[1386] = x319 * x983 + x9967 +
            (-x118 * x319) * (x232 - x806 + (-x240) * (x353 - x889)) +
            (-x202 * x319) *
              (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889)));
  J[1425] =
    x9968 + (-x118 * x319) * (x291 - x806 + (-x240) * (x357 - x889)) +
    (-x202 * x319) * (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889)));
  J[1464] =
    x9968 + (-x118 * x319) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x319) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[22] = 5.32067178502879e+46 * x2188 * x2189 -
          5.32067178502879e+46 * x2188 * x2194 + 1.393e+29 * x2197 * x2219 -
          1.393e+29 * x2205 + x2210 * x2215 - x2210 * x2223 - x289 * x319 +
          x315 * x319 - x3700 * x8278 + x8256 * x8278 + 1.239e+38 * x8266 -
          1.239e+38 * x8269 + 1.0344481132075499e+66 * x8273 -
          1.0344481132075499e+66 * x8285 +
          (x118 * x319) * (x266 - x376 + (-x240) * (x647 - x669)) +
          (x202 * x319) *
            (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669)));
  J[61] = x319 * x620 - x319 * x670 + x8414 +
          (x118 * x319) * (-x374 + x693 + (-x240) * (x713 - x715)) +
          (x202 * x319) *
            (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715)));
  J[100] = 1.99e+29 * sc[21] * x2197 * x35 * exp(x2201) - x2812 + x319 * x678 -
           x319 * x703 + x8414 +
           (x118 * x319) * (-x712 + x716 + (-x240) * (x734 - x735)) +
           (x202 * x319) *
             (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735)));
  J[139] = x319 * x717 - x319 * x719 - x5747 + x8414 +
           (x118 * x319) * (x721 - x725 + (-x240) * (x747 - x748)) +
           (x202 * x319) *
             (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748)));
  J[178] = sc[21] * x5849 + x319 * x730 - x319 * x737 - x6684 + x8414 +
           (x118 * x319) * (-x736 + x743 + (-x240) * (x768 - x770)) +
           (x202 * x319) *
             (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770)));
  J[217] = 300000.0 * sc[21] - sc[22] * x7425 + x9976 +
           (x118 * x319) * (-x746 + x757 + (-x240) * (x800 - x801)) +
           (x202 * x319) *
             (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801)));
  J[256] = sc[21] * x3447 + x2208 + x319 * x754 - x319 * x756 +
           (x118 * x319) * (x761 - x762 + (-x240) * (x842 - x844)) +
           (x202 * x319) *
             (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844)));
  J[295] = sc[21] * x6905 + 4.5605758157389599e+47 * x2188 * x2189 -
           4.5605758157389599e+47 * x2188 * x2194 + 1.194e+30 * x2197 * x2219 -
           1.194e+30 * x2205 + x2215 * x3789 - x2223 * x3789 + x319 * x765 -
           x319 * x773 - x3700 * (1.68 * x249 * x8275 + 12.0 * x249 * x8276) +
           x8256 * (1.68 * x249 * x8275 + 12.0 * x249 * x8276) +
           1.062e+39 * x8266 - 1.062e+39 * x8269 +
           8.8666981132075502e+66 * x8273 - 8.8666981132075502e+66 * x8285 +
           (x118 * x319) * (-x787 + x799 + (-x240) * (x864 - x875)) +
           (x202 * x319) *
             (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875)));
  J[334] =
    x7485 + x9976 + (x118 * x319) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (x202 * x319) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[373] = -sc[22] * x7517 + x319 * x779 - x319 * x792 + x8414 +
           (x118 * x319) * (-x841 + x849 + (-x240) * (x905 - x906)) +
           (x202 * x319) *
             (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906)));
  J[412] = sc[21] * x8583 + x319 * x796 - x319 * x814 +
           3.54e+38 * x500 * x8265 + x8414 - x8546 +
           (x118 * x319) * (x855 - x865 + (-x240) * (-x244 + x920)) +
           (x202 * x319) *
             (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920)));
  J[451] = sc[21] * x8608 + x2208 + x319 * x827 - x319 * x834 +
           (x118 * x319) * (-x786 + x897 + (-x240) * (x937 - x938)) +
           (x202 * x319) *
             (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938)));
  J[490] = -x319 * x851 + x8360 +
           (x118 * x319) * (-x806 + x900 + (-x240) * (-x889 + x948)) +
           (x202 * x319) * (-x687 + x883 +
                            (x241) * (-x806 + x900 + (-x240) * (-x889 + x948)));
  J[529] = -x319 * x861 + x8360 +
           (x118 * x319) * (-x904 + x908 + (-x240) * (x961 - x962)) +
           (x202 * x319) *
             (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962)));
  J[568] = -x319 * x870 + x8360 +
           (x118 * x319) * (-x806 + x915 + (-x240) * (-x889 + x967)) +
           (x202 * x319) * (-x687 + x896 +
                            (x241) * (-x806 + x915 + (-x240) * (-x889 + x967)));
  J[607] = -x319 * x892 + x8360 +
           (x118 * x319) * (x709 - x806 + (-x240) * (-x889 + x971)) +
           (x202 * x319) *
             (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971)));
  J[646] = -2.985e+29 * refC * sc[22] * x2197 * x2202 +
           1.14014395393474e+47 * x2188 * x2189 -
           1.14014395393474e+47 * x2188 * x2194 + 2.985e+29 * x2197 * x2219 +
           x2215 * x4548 - x2223 * x4548 + x319 * x894 - x319 * x902 -
           x3700 * (0.42 * x249 * x8275 + 3.0 * x249 * x8276) +
           x8256 * (0.42 * x249 * x8275 + 3.0 * x249 * x8276) +
           2.655e+38 * x8266 - 2.655e+38 * x8269 +
           2.2166745283018902e+66 * x8273 - 2.2166745283018902e+66 * x8285 +
           (x118 * x319) * (-x926 + x931 + (-x240) * (x572 - x659)) +
           (x202 * x319) *
             (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659)));
  J[685] = -x135 * x319 + x2208 + x319 * x910 +
           (x118 * x319) * (-x936 + x947 + (-x240) * (-x832 + x837)) +
           (x202 * x319) * (-x510 + x928 +
                            (x241) * (-x936 + x947 + (-x240) * (-x832 + x837)));
  J[724] =
    x319 * x911 - x319 * x917 + x8414 +
    (x118 * x319) * (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (x202 * x319) *
      (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038)));
  J[763] = -x319 * x922 + x8360 +
           (x118 * x319) * (x563 - x806 + (-x240) * (x1044 - x889)) +
           (x202 * x319) *
             (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889)));
  J[802] =
    x319 * x925 - x319 * x934 + x8414 +
    (x118 * x319) * (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (x202 * x319) *
      (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060)));
  J[841] =
    sc[10] * x8583 + sc[11] * x8608 +
    1.99e+29 * sc[2] * x2197 * x35 * exp(x2201) + sc[4] * x5849 +
    300000.0 * sc[5] + sc[6] * x3447 + sc[7] * x6905 - x319 * x941 + x7564 +
    x8360 + (x118 * x319) * (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (x202 * x319) *
      (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889)));
  J[880] = -sc[5] * x7425 - sc[9] * x7517 +
           2.2802879078694799e+47 * x2188 * x2189 -
           2.2802879078694799e+47 * x2188 * x2194 -
           1.99e+29 * x2197 * x2202 * x503 + 5.97e+29 * x2197 * x2219 -
           5.97e+29 * x2205 + x2215 * x5152 - x2223 * x5152 + x319 * x477 -
           x319 * x952 - x3700 * (0.84 * x249 * x8275 + 6.0 * x249 * x8276) -
           1.77e+38 * x503 * x8268 - x5060 -
           40000000.0 * x6 * exp(276.769166192596 * invT) - x6338 - x7280 -
           4.4333490566037699e+66 * x8251 * x8255 +
           4.4333490566037699e+66 * x8255 * x8262 +
           x8256 * (0.84 * x249 * x8275 + 6.0 * x249 * x8276) +
           5.31e+38 * x8266 - 5.31e+38 * x8269 - x8729 +
           (x118 * x319) * (x256 - x992 + (-x240) * (x214 - x216)) +
           (x202 * x319) *
             (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216)));
  J[919] = -x319 * x958 + x8360 +
           (x118 * x319) * (x1014 - x805 + (-x240) * (x285 - x294)) +
           (x202 * x319) *
             (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294)));
  J[958] = -x319 * x959 + x8360 +
           (x118 * x319) * (-x806 + x831 + (-x240) * (x306 - x889)) +
           (x202 * x319) *
             (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889)));
  J[997] =
    x9976 + (x118 * x319) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (x202 * x319) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1036] =
    x9976 + (x118 * x319) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (x202 * x319) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1075] =
    x9976 + (x118 * x319) * (x1028 - x806 + (-x240) * (x309 - x889)) +
    (x202 * x319) * (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889)));
  J[1114] = -x319 * x963 + x8360 +
            (x118 * x319) * (x691 - x806 + (-x240) * (x326 - x889)) +
            (x202 * x319) *
              (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889)));
  J[1153] =
    x9976 + (x118 * x319) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (x202 * x319) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1192] =
    x9976 + (x118 * x319) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (x202 * x319) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1231] =
    x9976 + (x118 * x319) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (x202 * x319) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1270] =
    x9976 + (x118 * x319) * (x1043 - x806 + (-x240) * (x176 - x889)) +
    (x202 * x319) * (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889)));
  J[1309] =
    x9976 + (x118 * x319) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (x202 * x319) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1348] = -x319 * x968 + x8360 +
            (x118 * x319) * (x1045 - x806 + (-x240) * (x152 - x889)) +
            (x202 * x319) *
              (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889)));
  J[1387] = -x319 * x983 + x8360 +
            (x118 * x319) * (x232 - x806 + (-x240) * (x353 - x889)) +
            (x202 * x319) *
              (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889)));
  J[1426] =
    x9976 + (x118 * x319) * (x291 - x806 + (-x240) * (x357 - x889)) +
    (x202 * x319) * (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889)));
  J[1465] =
    x9976 + (x118 * x319) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (x202 * x319) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[23] = -50000000.0 * sc[23] * x266 + 30000000.0 * sc[23] * x359 -
          30000000.0 * sc[23] * x368 + 50000000.0 * sc[23] * x376 +
          1.883e+16 * x206 + x266 * x371 + x289 * x358 - x315 * x358 -
          x371 * x376 + x525 * x9188 - 1.883e+16 * x9175 +
          1.013054e+25 * x9178 - x9188 * x9192 - 1.013054e+25 * x9205 +
          38500.0 * x9229 + 38500.0 * x9234 +
          (50000000.0 * sc[23] * x240 - x240 * x371) * (x647 - x669) +
          (-30000000.0 * sc[23] * x241 - x118 * x358) *
            (x266 - x376 + (-x240) * (x647 - x669)) +
          (-x202 * x358) *
            (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669)));
  J[62] = 30000000.0 * sc[23] * x347 + 50000000.0 * sc[23] * x374 -
          30000000.0 * sc[23] * x689 - 50000000.0 * sc[23] * x693 +
          x104 * x9260 + x2190 + x279 * x9260 - x358 * x620 + x358 * x670 -
          x371 * x374 + x371 * x693 +
          (50000000.0 * sc[23] * x240 - x240 * x371) * (x713 - x715) +
          (-30000000.0 * sc[23] * x241 - x118 * x358) *
            (-x374 + x693 + (-x240) * (x713 - x715)) +
          (-x202 * x358) *
            (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715)));
  J[101] = -sc[23] * x2931 - 30000000.0 * sc[23] * x688 +
           30000000.0 * sc[23] * x690 + 50000000.0 * sc[23] * x712 -
           50000000.0 * sc[23] * x716 - 100000000.0 * sc[23] +
           50000000.0 * sc[24] * x2987 + x2190 + 100000000.0 * x2845 * x2846 -
           x358 * x678 + x358 * x703 - x371 * x712 + x371 * x716 + x54 * x9260 -
           x619 * x9260 +
           (50000000.0 * sc[23] * x240 - x240 * x371) * (x734 - x735) +
           (-30000000.0 * sc[23] * x241 - x118 * x358) *
             (-x712 + x716 + (-x240) * (x734 - x735)) +
           (-x202 * x358) *
             (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735)));
  J[140] = 16.32 * sc[18] * x3161 - 30000000.0 * sc[23] * x125 +
           30000000.0 * sc[23] * x710 - 50000000.0 * sc[23] * x721 +
           50000000.0 * sc[23] * x725 - 100000000.0 * sc[23] +
           10000000.0 * sc[24] * x2987 - x219 * x9260 + x2190 - x358 * x717 +
           x358 * x719 + x371 * x721 - x371 * x725 + x596 * x9260 +
           (50000000.0 * sc[23] * x240 - x240 * x371) * (x747 - x748) +
           (-30000000.0 * sc[23] * x241 - x118 * x358) *
             (x721 - x725 + (-x240) * (x747 - x748)) +
           (-x202 * x358) *
             (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748)));
  J[179] = 30000000.0 * sc[23] * x171 - sc[23] * x5883 -
           30000000.0 * sc[23] * x732 + 50000000.0 * sc[23] * x736 -
           50000000.0 * sc[23] * x743 + 7500000.0 * sc[24] * x6721 +
           x157 * x9260 + x2190 + 1600000.0 * x2846 * x6711 - x358 * x730 +
           x358 * x737 - x371 * x736 + x371 * x743 - x633 * x9260 +
           (50000000.0 * sc[23] * x240 - x240 * x371) * (x768 - x770) +
           (-30000000.0 * sc[23] * x241 - x118 * x358) *
             (-x736 + x743 + (-x240) * (x768 - x770)) +
           (-x202 * x358) *
             (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770)));
  J[218] = 30000000.0 * sc[23] * x740 - 30000000.0 * sc[23] * x741 +
           50000000.0 * sc[23] * x746 - 50000000.0 * sc[23] * x757 -
           x181 * x9260 + x2190 + x3418 + x358 * x701 - x371 * x746 +
           x371 * x757 + 55000.0 * x9234 +
           (50000000.0 * sc[23] * x240 - x240 * x371) * (x800 - x801) +
           (-30000000.0 * sc[23] * x241 - x118 * x358) *
             (-x746 + x757 + (-x240) * (x800 - x801)) +
           (-x202 * x358) *
             (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801)));
  J[257] = 110000.0 * sc[23] * x104 * x9227 - 50000000.0 * sc[23] * x3539 +
           30000000.0 * sc[23] * x745 - 30000000.0 * sc[23] * x758 -
           50000000.0 * sc[23] * x761 + 50000000.0 * sc[23] * x762 -
           x358 * x754 + x358 * x756 + x371 * x761 - x371 * x762 + x8477 +
           x9385 + (50000000.0 * sc[23] * x240 - x240 * x371) * (x842 - x844) +
           (-30000000.0 * sc[23] * x241 - x118 * x358) *
             (x761 - x762 + (-x240) * (x842 - x844)) +
           (-x202 * x358) *
             (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844)));
  J[296] =
    -sc[23] * x6913 + 30000000.0 * sc[23] * x759 - 30000000.0 * sc[23] * x766 +
    50000000.0 * sc[23] * x787 - 50000000.0 * sc[23] * x799 + 1.614e+17 * x206 -
    x358 * x765 + x358 * x773 - x371 * x787 + x371 * x799 +
    x525 * (12.0 * x249 * x9185 + 1.68 * x249 * x9187) - 1.614e+17 * x9175 +
    8.68332e+25 * x9178 - x9192 * (12.0 * x249 * x9185 + 1.68 * x249 * x9187) -
    8.68332e+25 * x9205 + 330000.0 * x9229 + x9427 +
    (50000000.0 * sc[23] * x240 - x240 * x371) * (x864 - x875) +
    (-30000000.0 * sc[23] * x241 - x118 * x358) *
      (-x787 + x799 + (-x240) * (x864 - x875)) +
    (-x202 * x358) *
      (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875)));
  J[335] =
    x9989 + (50000000.0 * sc[23] * x240 - x240 * x371) * (x888 - x889) +
    (-30000000.0 * sc[23] * x241 - x118 * x358) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x358) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[374] = -1600000.0 * sc[23] * x7014 + 30000000.0 * sc[23] * x838 -
           30000000.0 * sc[23] * x840 + 50000000.0 * sc[23] * x841 -
           50000000.0 * sc[23] * x849 + x2190 - x358 * x779 + x358 * x792 -
           x371 * x841 + x371 * x849 + x641 * x9260 - x642 * x9260 +
           (50000000.0 * sc[23] * x240 - x240 * x371) * (x905 - x906) +
           (-30000000.0 * sc[23] * x241 - x118 * x358) *
             (-x841 + x849 + (-x240) * (x905 - x906)) +
           (-x202 * x358) *
             (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906)));
  J[413] = -30000000.0 * sc[23] * x195 - 50000000.0 * sc[23] * x855 +
           30000000.0 * sc[23] * x862 + 50000000.0 * sc[23] * x865 -
           50000000.0 * sc[23] + x104 * x9260 + x2190 + x231 * x9260 -
           x358 * x796 + x358 * x814 + x371 * x855 - x371 * x865 +
           (50000000.0 * sc[23] * x240 - x240 * x371) * (-x244 + x920) +
           (-30000000.0 * sc[23] * x241 - x118 * x358) *
             (x855 - x865 + (-x240) * (-x244 + x920)) +
           (-x202 * x358) *
             (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920)));
  J[452] = 110000.0 * sc[23] * x104 * x9227 + 30000000.0 * sc[23] * x341 +
           50000000.0 * sc[23] * x786 - 30000000.0 * sc[23] * x882 -
           50000000.0 * sc[23] * x897 - x358 * x827 + x358 * x834 -
           x371 * x786 + x371 * x897 + x8477 + x9385 +
           (50000000.0 * sc[23] * x240 - x240 * x371) * (x937 - x938) +
           (-30000000.0 * sc[23] * x241 - x118 * x358) *
             (-x786 + x897 + (-x240) * (x937 - x938)) +
           (-x202 * x358) *
             (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938)));
  J[491] =
    -30000000.0 * sc[23] * x883 - 50000000.0 * sc[23] * x900 + x104 * x9260 +
    x212 + x2190 + x3418 + x358 * x851 + x371 * x900 + x649 * x9260 +
    (50000000.0 * sc[23] * x240 - x240 * x371) * (-x889 + x948) +
    (-30000000.0 * sc[23] * x241 - x118 * x358) *
      (-x806 + x900 + (-x240) * (-x889 + x948)) +
    (-x202 * x358) *
      (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948)));
  J[530] = 30000000.0 * sc[23] * x886 - 30000000.0 * sc[23] * x895 +
           50000000.0 * sc[23] * x904 - 50000000.0 * sc[23] * x908 + x3418 +
           x358 * x861 - x371 * x904 + x371 * x908 + x9992 +
           (50000000.0 * sc[23] * x240 - x240 * x371) * (x961 - x962) +
           (-30000000.0 * sc[23] * x241 - x118 * x358) *
             (-x904 + x908 + (-x240) * (x961 - x962)) +
           (-x202 * x358) *
             (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962)));
  J[569] =
    -30000000.0 * sc[23] * x896 - 50000000.0 * sc[23] * x915 + x212 + x2190 +
    x3418 + x358 * x870 + x371 * x915 + x650 * x9260 - x668 * x9260 +
    (50000000.0 * sc[23] * x240 - x240 * x371) * (-x889 + x967) +
    (-30000000.0 * sc[23] * x241 - x118 * x358) *
      (-x806 + x915 + (-x240) * (-x889 + x967)) +
    (-x202 * x358) *
      (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967)));
  J[608] = -50000000.0 * sc[23] * x709 - 30000000.0 * sc[23] * x903 + x212 +
           x3418 + x358 * x892 + x371 * x709 + x9992 +
           (50000000.0 * sc[23] * x240 - x240 * x371) * (-x889 + x971) +
           (-30000000.0 * sc[23] * x241 - x118 * x358) *
             (x709 - x806 + (-x240) * (-x889 + x971)) +
           (-x202 * x358) *
             (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971)));
  J[647] =
    40000000.0 * sc[18] * x423 * x9550 + 50000000.0 * sc[18] * x545 +
    30000000.0 * sc[19] * x518 + sc[20] * x8653 + 30000000.0 * sc[23] * x912 -
    30000000.0 * sc[23] * x913 + 50000000.0 * sc[23] * x926 -
    50000000.0 * sc[23] * x931 + sc[34] * x467 +
    3200000.0 * sc[4] * x423 * x6711 + 4.035e+16 * x206 + x209 -
    2.17083e+25 * x226 * x263 * x9177 + 200000000.0 * x2845 * x424 -
    x358 * x894 + x358 * x902 - x371 * x926 + x371 * x931 +
    x525 * (3.0 * x249 * x9185 + 0.42 * x249 * x9187) + 100000000.0 * x6 * x81 +
    2.17083e+25 * x623 * x9177 + x674 * x9260 - x686 * x9260 -
    4.035e+16 * x9175 - x9192 * (3.0 * x249 * x9185 + 0.42 * x249 * x9187) +
    (50000000.0 * sc[23] * x240 - x240 * x371) * (x572 - x659) +
    (-30000000.0 * sc[23] * x241 - x118 * x358) *
      (-x926 + x931 + (-x240) * (x572 - x659)) +
    (-x202 * x358) *
      (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659)));
  J[686] =
    30000000.0 * sc[23] * x510 - 30000000.0 * sc[23] * x928 +
    50000000.0 * sc[23] * x936 - 50000000.0 * sc[23] * x947 + x135 * x358 +
    x297 * x9260 - x320 * x9260 - x358 * x910 - x371 * x936 + x371 * x947 +
    x8477 + (50000000.0 * sc[23] * x240 - x240 * x371) * (-x832 + x837) +
    (-30000000.0 * sc[23] * x241 - x118 * x358) *
      (-x936 + x947 + (-x240) * (-x832 + x837)) +
    (-x202 * x358) *
      (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837)));
  J[725] =
    50000000.0 * sc[16] * x545 - 30000000.0 * sc[23] * x878 +
    30000000.0 * sc[23] * x929 + 50000000.0 * sc[23] * x949 -
    50000000.0 * sc[23] * x956 + 16.32 * sc[3] * x3161 +
    20000000.0 * x2846 * x9550 - x358 * x911 + x358 * x917 - x371 * x949 +
    x371 * x956 + x9992 +
    (50000000.0 * sc[23] * x240 - x240 * x371) * (x1037 - x1038) +
    (-30000000.0 * sc[23] * x241 - x118 * x358) *
      (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (-x202 * x358) *
      (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038)));
  J[764] = 30000000.0 * sc[16] * x518 - 30000000.0 * sc[23] * x189 -
           50000000.0 * sc[23] * x563 + x212 + x3418 + x358 * x922 +
           x371 * x563 + x9992 +
           (50000000.0 * sc[23] * x240 - x240 * x371) * (x1044 - x889) +
           (-30000000.0 * sc[23] * x241 - x118 * x358) *
             (x563 - x806 + (-x240) * (x1044 - x889)) +
           (-x202 * x358) *
             (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889)));
  J[803] =
    sc[16] * x8653 + 30000000.0 * sc[23] * x705 - 30000000.0 * sc[23] * x935 +
    50000000.0 * sc[23] * x966 - 50000000.0 * sc[23] * x970 - x358 * x925 +
    x358 * x934 - x371 * x966 + x371 * x970 + x9992 +
    (50000000.0 * sc[23] * x240 - x240 * x371) * (x1059 - x1060) +
    (-30000000.0 * sc[23] * x241 - x118 * x358) *
      (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (-x202 * x358) *
      (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060)));
  J[842] =
    -30000000.0 * sc[23] * x884 - 50000000.0 * sc[23] * x977 + x212 + x3418 +
    x358 * x941 + x371 * x977 + x9992 +
    (50000000.0 * sc[23] * x240 - x240 * x371) * (x1064 - x889) +
    (-30000000.0 * sc[23] * x241 - x118 * x358) *
      (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (-x202 * x358) *
      (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889)));
  J[881] = -50000000.0 * sc[23] * x256 - 30000000.0 * sc[23] * x365 +
           30000000.0 * sc[23] * x944 + 50000000.0 * sc[23] * x992 +
           8.07e+16 * x206 + x256 * x371 - x358 * x477 + x358 * x952 -
           x371 * x992 + x525 * x569 - x569 * x9192 - 8.07e+16 * x9175 +
           4.34166e+25 * x9178 - 4.34166e+25 * x9205 + 165000.0 * x9229 +
           165000.0 * x9234 +
           (50000000.0 * sc[23] * x240 - x240 * x371) * (x214 - x216) +
           (-30000000.0 * sc[23] * x241 - x118 * x358) *
             (x256 - x992 + (-x240) * (x214 - x216)) +
           (-x202 * x358) *
             (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216)));
  J[920] = -50000000.0 * sc[10] - 50000000.0 * sc[23] * x1014 +
           30000000.0 * sc[23] * x350 - 30000000.0 * sc[23] * x355 +
           50000000.0 * sc[23] * x805 - 40000000.0 * sc[23] - sc[2] * x2931 -
           100000000.0 * sc[2] - 100000000.0 * sc[3] - sc[4] * x5883 -
           50000000.0 * sc[6] * x3539 - sc[7] * x6913 -
           1600000.0 * sc[9] * x7014 + x1014 * x371 - 30000000.0 * x200 +
           x2190 - 50000000.0 * x226 - 2.69e+16 * x27 * x35 * x556 + x3418 +
           x358 * x958 - x371 * x805 + 55000.0 * x602 * x9227 - x782 * x9260 +
           55000.0 * x9234 +
           (50000000.0 * sc[23] * x240 - x240 * x371) * (x285 - x294) +
           (-30000000.0 * sc[23] * x241 - x118 * x358) *
             (x1014 - x805 + (-x240) * (x285 - x294)) +
           (-x202 * x358) *
             (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294)));
  J[959] = -30000000.0 * sc[23] * x363 - 50000000.0 * sc[23] * x831 +
           50000000.0 * sc[2] * x2987 + 10000000.0 * sc[3] * x2987 +
           7500000.0 * sc[4] * x6721 + x212 + x3418 + x358 * x959 +
           x371 * x831 + x9992 +
           (50000000.0 * sc[23] * x240 - x240 * x371) * (x306 - x889) +
           (-30000000.0 * sc[23] * x241 - x118 * x358) *
             (-x806 + x831 + (-x240) * (x306 - x889)) +
           (-x202 * x358) *
             (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889)));
  J[998] =
    x9989 + (50000000.0 * sc[23] * x240 - x240 * x371) * (x888 - x889) +
    (-30000000.0 * sc[23] * x241 - x118 * x358) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x358) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1037] =
    x9989 + (50000000.0 * sc[23] * x240 - x240 * x371) * (x888 - x889) +
    (-30000000.0 * sc[23] * x241 - x118 * x358) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x358) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1076] =
    -50000000.0 * sc[23] * x1028 + x1028 * x371 + x104 * x9260 +
    55000.0 * x9234 + x9985 +
    (50000000.0 * sc[23] * x240 - x240 * x371) * (x309 - x889) +
    (-30000000.0 * sc[23] * x241 - x118 * x358) *
      (x1028 - x806 + (-x240) * (x309 - x889)) +
    (-x202 * x358) * (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889)));
  J[1115] = -30000000.0 * sc[23] * x366 - 50000000.0 * sc[23] * x691 + x212 +
            x3418 + x358 * x963 + x371 * x691 + x9992 +
            (50000000.0 * sc[23] * x240 - x240 * x371) * (x326 - x889) +
            (-30000000.0 * sc[23] * x241 - x118 * x358) *
              (x691 - x806 + (-x240) * (x326 - x889)) +
            (-x202 * x358) *
              (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889)));
  J[1154] =
    x9989 + (50000000.0 * sc[23] * x240 - x240 * x371) * (x888 - x889) +
    (-30000000.0 * sc[23] * x241 - x118 * x358) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x358) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1193] =
    x9989 + (50000000.0 * sc[23] * x240 - x240 * x371) * (x888 - x889) +
    (-30000000.0 * sc[23] * x241 - x118 * x358) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x358) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1232] =
    x9989 + (50000000.0 * sc[23] * x240 - x240 * x371) * (x888 - x889) +
    (-30000000.0 * sc[23] * x241 - x118 * x358) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x358) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1271] =
    -50000000.0 * sc[23] * x1043 + x1043 * x371 + x809 * x9260 - x9260 * x99 +
    x9985 + (50000000.0 * sc[23] * x240 - x240 * x371) * (x176 - x889) +
    (-30000000.0 * sc[23] * x241 - x118 * x358) *
      (x1043 - x806 + (-x240) * (x176 - x889)) +
    (-x202 * x358) * (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889)));
  J[1310] =
    -50000000.0 * sc[23] * x839 + x104 * x9260 + x371 * x839 + x881 * x9260 +
    x9985 + (50000000.0 * sc[23] * x240 - x240 * x371) * (x888 - x889) +
    (-30000000.0 * sc[23] * x241 - x118 * x358) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x358) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1349] = sc[16] * x467 - 50000000.0 * sc[23] * x1045 -
            30000000.0 * sc[23] * x367 + x104 * x9260 + x1045 * x371 + x212 +
            x2190 + x3418 + x358 * x968 + x469 * x9260 +
            (50000000.0 * sc[23] * x240 - x240 * x371) * (x152 - x889) +
            (-30000000.0 * sc[23] * x241 - x118 * x358) *
              (x1045 - x806 + (-x240) * (x152 - x889)) +
            (-x202 * x358) *
              (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889)));
  J[1388] = -50000000.0 * sc[23] * x232 - 30000000.0 * sc[23] * x543 +
            x104 * x9260 + x212 + x2190 + x232 * x371 + x3418 + x358 * x983 +
            x465 * x9260 +
            (50000000.0 * sc[23] * x240 - x240 * x371) * (x353 - x889) +
            (-30000000.0 * sc[23] * x241 - x118 * x358) *
              (x232 - x806 + (-x240) * (x353 - x889)) +
            (-x202 * x358) *
              (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889)));
  J[1427] =
    -50000000.0 * sc[23] * x291 + x291 * x371 + x537 * x9260 - x540 * x9260 +
    x9985 + (50000000.0 * sc[23] * x240 - x240 * x371) * (x357 - x889) +
    (-30000000.0 * sc[23] * x241 - x118 * x358) *
      (x291 - x806 + (-x240) * (x357 - x889)) +
    (-x202 * x358) * (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889)));
  J[1466] =
    -50000000.0 * sc[23] * x839 + x371 * x839 + 55000.0 * x9234 - x9260 * x957 +
    x9985 + (50000000.0 * sc[23] * x240 - x240 * x371) * (x888 - x889) +
    (-30000000.0 * sc[23] * x241 - x118 * x358) *
      (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-x202 * x358) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[24] =
    6.2534197530864195e+36 * x145 * x505 -
    6.2534197530864195e+36 * x145 * x771 + x2184 - x359 * x627 - x359 * x628 +
    x368 * x627 + x368 * x628 + 1.883e+21 * x681 - x708 * x9167 +
    x9167 * x9202 - 1.883e+21 * x9213 + (-x240 * x676) * (x647 - x669) +
    (x241 * x627 + x241 * x628) * (x266 - x376 + (-x240) * (x647 - x669)) +
    (-20000000.0 * sc[4] * x70) *
      (x289 - x315 + (-x118) * (x266 - x376 + (-x240) * (x647 - x669)) +
       (-x202) *
         (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669))));
  J[63] =
    -x347 * x627 - x347 * x628 - x374 * x676 + x627 * x689 + x628 * x689 +
    x676 * x693 + x9996 + (-x240 * x676) * (x713 - x715) +
    (x241 * x627 + x241 * x628) * (-x374 + x693 + (-x240) * (x713 - x715)) +
    (-20000000.0 * sc[4] * x70) *
      (-x620 + x670 + (-x118) * (-x374 + x693 + (-x240) * (x713 - x715)) +
       (-x202) *
         (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715))));
  J[102] =
    x2137 + x3016 + x3104 + x627 * x688 - x627 * x690 + x628 * x688 -
    x628 * x690 + x9279 + (-x240 * x676) * (x734 - x735) +
    (x241 * x627 + x241 * x628) * (-x712 + x716 + (-x240) * (x734 - x735)) +
    (-20000000.0 * sc[4] * x70) *
      (-x678 + x703 + (-x118) * (-x712 + x716 + (-x240) * (x734 - x735)) +
       (-x202) *
         (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735))));
  J[141] =
    48000000.0 * sc[19] + sc[29] * x3175 + x125 * x627 + x3104 + x5815 -
    x627 * x710 + x676 * x721 - x676 * x725 + x9996 +
    (-x240 * x676) * (x747 - x748) +
    (x241 * x627 + x241 * x628) * (x721 - x725 + (-x240) * (x747 - x748)) +
    (-20000000.0 * sc[4] * x70) *
      (-x717 + x719 + (-x118) * (x721 - x725 + (-x240) * (x747 - x748)) +
       (-x202) *
         (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748))));
  J[180] =
    sc[23] * x5883 - 20000000.0 * sc[24] * x5845 - 7500000.0 * sc[24] * x6721 +
    10000000.0 * sc[25] * x6721 - x171 * x627 - x171 * x628 + x2137 + x3293 +
    x627 * x732 + x628 * x732 + x9279 + (-x240 * x676) * (x768 - x770) +
    (x241 * x627 + x241 * x628) * (-x736 + x743 + (-x240) * (x768 - x770)) +
    (-20000000.0 * sc[4] * x70) *
      (-x730 + x737 + (-x118) * (-x736 + x743 + (-x240) * (x768 - x770)) +
       (-x202) *
         (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770))));
  J[219] =
    -sc[24] * x7437 - x627 * x740 + x627 * x741 - x628 * x740 + x628 * x741 -
    x676 * x746 + x676 * x757 + x9996 + (-x240 * x676) * (x800 - x801) +
    (x241 * x627 + x241 * x628) * (-x746 + x757 + (-x240) * (x800 - x801)) +
    (-20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (-x746 + x757 + (-x240) * (x800 - x801)) +
       (-x202) *
         (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801))));
  J[258] =
    50000000.0 * sc[23] * x3539 - 20000000.0 * sc[24] * x3440 +
    20000000.0 * sc[4] * x825 + x3511 - x627 * x745 + x627 * x758 -
    x628 * x745 + x628 * x758 + x676 * x761 - x676 * x762 + x9165 +
    (-x240 * x676) * (x842 - x844) +
    (x241 * x627 + x241 * x628) * (x761 - x762 + (-x240) * (x842 - x844)) +
    (-20000000.0 * sc[4] * x70) *
      (-x754 + x756 + (-x118) * (x761 - x762 + (-x240) * (x842 - x844)) +
       (-x202) *
         (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844))));
  J[297] =
    sc[23] * x6913 + 2.69e+21 * sc[24] * x150 * x503 * x9199 - sc[24] * x6900 -
    2.69e+21 * x150 * x35 * x681 + x3785 - x627 * x759 + x627 * x766 -
    x628 * x759 + x628 * x766 - 1.614e+22 * x631 * x9199 + 1.614e+22 * x681 -
    5.3600740740740798e+37 * x9283 + 5.3600740740740798e+37 * x9286 +
    (-x240 * x676) * (x864 - x875) +
    (x241 * x627 + x241 * x628) * (-x787 + x799 + (-x240) * (x864 - x875)) +
    (-20000000.0 * sc[4] * x70) *
      (-x765 + x773 + (-x118) * (-x787 + x799 + (-x240) * (x864 - x875)) +
       (-x202) *
         (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875))));
  J[336] =
    x10003 + (-x240 * x676) * (x888 - x889) +
    (x241 * x627 + x241 * x628) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[375] =
    140000.0 * sc[25] + 20000000.0 * sc[4] * x867 + x2137 - x627 * x838 +
    x627 * x840 - x628 * x838 + x628 * x840 - x676 * x841 + x676 * x849 +
    x9279 + (-x240 * x676) * (x905 - x906) +
    (x241 * x627 + x241 * x628) * (-x841 + x849 + (-x240) * (x905 - x906)) +
    (-20000000.0 * sc[4] * x70) *
      (-x779 + x792 + (-x118) * (-x841 + x849 + (-x240) * (x905 - x906)) +
       (-x202) *
         (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906))));
  J[414] =
    x195 * x627 + x195 * x628 + x4121 - x627 * x862 - x628 * x862 + x9996 +
    (-x240 * x676) * (-x244 + x920) +
    (x241 * x627 + x241 * x628) * (x855 - x865 + (-x240) * (-x244 + x920)) +
    (-20000000.0 * sc[4] * x70) *
      (-x796 + x814 + (-x118) * (x855 - x865 + (-x240) * (-x244 + x920)) +
       (-x202) *
         (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920))));
  J[453] =
    20000000.0 * sc[4] * x1000 - x341 * x627 - x341 * x628 + x3511 +
    x627 * x882 + x628 * x882 - x676 * x786 + x676 * x897 + x9165 +
    (-x240 * x676) * (x937 - x938) +
    (x241 * x627 + x241 * x628) * (-x786 + x897 + (-x240) * (x937 - x938)) +
    (-20000000.0 * sc[4] * x70) *
      (-x827 + x834 + (-x118) * (-x786 + x897 + (-x240) * (x937 - x938)) +
       (-x202) *
         (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938))));
  J[492] =
    20000000.0 * sc[4] * x147 + x10004 + x627 * x883 + x628 * x883 +
    x676 * x900 + (-x240 * x676) * (-x889 + x948) +
    (x241 * x627 + x241 * x628) * (-x806 + x900 + (-x240) * (-x889 + x948)) +
    (-20000000.0 * sc[4] * x70) *
      (-x738 + x851 + (-x118) * (-x806 + x900 + (-x240) * (-x889 + x948)) +
       (-x202) *
         (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948))));
  J[531] =
    94600000.0 * x226 * exp(259.15658288943098 * invT) - x627 * x886 +
    x627 * x895 - x628 * x886 + x628 * x895 - x676 * x904 + x676 * x908 +
    x9996 + (-x240 * x676) * (x961 - x962) +
    (x241 * x627 + x241 * x628) * (-x904 + x908 + (-x240) * (x961 - x962)) +
    (-20000000.0 * sc[4] * x70) *
      (-x738 + x861 + (-x118) * (-x904 + x908 + (-x240) * (x961 - x962)) +
       (-x202) *
         (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962))));
  J[570] =
    x3954 + x6010 + x627 * x896 + x628 * x896 + x676 * x915 + x9166 +
    (-x240 * x676) * (-x889 + x967) +
    (x241 * x627 + x241 * x628) * (-x806 + x915 + (-x240) * (-x889 + x967)) +
    (-20000000.0 * sc[4] * x70) *
      (-x738 + x870 + (-x118) * (-x806 + x915 + (-x240) * (-x889 + x967)) +
       (-x202) *
         (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967))));
  J[609] =
    x3954 + x6010 + x627 * x903 + x628 * x903 + x676 * x709 + x9166 +
    (-x240 * x676) * (-x889 + x971) +
    (x241 * x627 + x241 * x628) * (x709 - x806 + (-x240) * (-x889 + x971)) +
    (-20000000.0 * sc[4] * x70) *
      (-x738 + x892 + (-x118) * (x709 - x806 + (-x240) * (-x889 + x971)) +
       (-x202) *
         (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971))));
  J[648] =
    2.69e+21 * x200 * x316 * x35 + x4565 - x627 * x912 + x627 * x913 -
    x628 * x912 + x628 * x913 + 4.035e+21 * x681 - x708 * x9543 +
    x9202 * x9543 - 4.035e+21 * x9213 - 1.34001851851852e+37 * x9283 +
    1.34001851851852e+37 * x9286 + (-x240 * x676) * (x572 - x659) +
    (x241 * x627 + x241 * x628) * (-x926 + x931 + (-x240) * (x572 - x659)) +
    (-20000000.0 * sc[4] * x70) *
      (-x894 + x902 + (-x118) * (-x926 + x931 + (-x240) * (x572 - x659)) +
       (-x202) *
         (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659))));
  J[687] =
    20000000.0 * sc[4] * x821 + x200 * x406 + x3511 - x510 * x627 -
    x510 * x628 + x627 * x928 + x628 * x928 - x676 * x936 + x676 * x947 +
    x9165 + (-x240 * x676) * (-x832 + x837) +
    (x241 * x627 + x241 * x628) * (-x936 + x947 + (-x240) * (-x832 + x837)) +
    (-20000000.0 * sc[4] * x70) *
      (x135 - x910 + (-x118) * (-x936 + x947 + (-x240) * (-x832 + x837)) +
       (-x202) *
         (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837))));
  J[726] =
    sc[4] * x3286 + 20000000.0 * sc[4] * x384 + x4871 + x627 * x878 -
    x627 * x929 + x628 * x878 - x628 * x929 - x676 * x949 + x676 * x956 +
    x9279 + (-x240 * x676) * (x1037 - x1038) +
    (x241 * x627 + x241 * x628) * (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (-20000000.0 * sc[4] * x70) *
      (-x911 + x917 + (-x118) * (-x949 + x956 + (-x240) * (x1037 - x1038)) +
       (-x202) *
         (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038))));
  J[765] =
    48000000.0 * sc[3] + 20000000.0 * sc[4] * x824 + x10004 + x189 * x627 +
    x189 * x628 + x563 * x676 + (-x240 * x676) * (x1044 - x889) +
    (x241 * x627 + x241 * x628) * (x563 - x806 + (-x240) * (x1044 - x889)) +
    (-20000000.0 * sc[4] * x70) *
      (-x738 + x922 + (-x118) * (x563 - x806 + (-x240) * (x1044 - x889)) +
       (-x202) *
         (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889))));
  J[804] =
    20000000.0 * sc[4] * x42 + x4871 - x627 * x705 + x627 * x935 - x628 * x705 +
    x628 * x935 - x676 * x966 + x676 * x970 + x9279 +
    (-x240 * x676) * (x1059 - x1060) +
    (x241 * x627 + x241 * x628) * (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (-20000000.0 * sc[4] * x70) *
      (-x925 + x934 + (-x118) * (-x966 + x970 + (-x240) * (x1059 - x1060)) +
       (-x202) *
         (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060))));
  J[843] =
    x3954 + x6010 + x627 * x884 + x628 * x884 + x676 * x977 + x9166 +
    (-x240 * x676) * (x1064 - x889) +
    (x241 * x627 + x241 * x628) * (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (-20000000.0 * sc[4] * x70) *
      (-x738 + x941 + (-x118) * (-x806 + x977 + (-x240) * (x1064 - x889)) +
       (-x202) *
         (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889))));
  J[882] =
    8.07e+21 * sc[16] * x200 * x316 + 20000000.0 * sc[4] * x58 + x256 * x676 +
    x365 * x627 + x365 * x628 + x4871 - x627 * x944 - x628 * x944 -
    x676 * x992 - x708 * x9652 + x9202 * x9652 - 8.07e+21 * x9213 -
    2.6800370370370399e+37 * x9283 + 2.6800370370370399e+37 * x9286 +
    (-x240 * x676) * (x214 - x216) +
    (x241 * x627 + x241 * x628) * (x256 - x992 + (-x240) * (x214 - x216)) +
    (-20000000.0 * sc[4] * x70) *
      (-x477 + x952 + (-x118) * (x256 - x992 + (-x240) * (x214 - x216)) +
       (-x202) *
         (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216))));
  J[921] =
    sc[4] * x5883 + 50000000.0 * sc[6] * x3539 + sc[7] * x6913 + x1014 * x676 -
    x350 * x627 - x350 * x628 + x355 * x627 + x355 * x628 - x676 * x805 +
    x9996 + (-x240 * x676) * (x285 - x294) +
    (x241 * x627 + x241 * x628) * (x1014 - x805 + (-x240) * (x285 - x294)) +
    (-20000000.0 * sc[4] * x70) *
      (-x738 + x958 + (-x118) * (x1014 - x805 + (-x240) * (x285 - x294)) +
       (-x202) *
         (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294))));
  J[960] =
    -10000000.0 * sc[3] * x2987 - sc[3] * x5812 - 20000000.0 * sc[4] * x5845 -
    7500000.0 * sc[4] * x6721 - sc[5] * x7437 - 20000000.0 * sc[6] * x3440 -
    sc[7] * x6900 + x10004 + x363 * x627 + x363 * x628 -
    2.69e+21 * x503 * x9199 + x5324 + (-x240 * x676) * (x306 - x889) +
    (x241 * x627 + x241 * x628) * (-x806 + x831 + (-x240) * (x306 - x889)) +
    (-20000000.0 * sc[4] * x70) *
      (-x738 + x959 + (-x118) * (-x806 + x831 + (-x240) * (x306 - x889)) +
       (-x202) *
         (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889))));
  J[999] =
    20000000.0 * sc[2] * x3102 + 20000000.0 * sc[3] * x3102 +
    10000000.0 * sc[4] * x6721 + 140000.0 * sc[9] + x10003 + x5331 +
    (-x240 * x676) * (x888 - x889) +
    (x241 * x627 + x241 * x628) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1038] =
    x10003 + (-x240 * x676) * (x888 - x889) +
    (x241 * x627 + x241 * x628) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1077] =
    x10002 + x1028 * x676 + x3954 + (-x240 * x676) * (x309 - x889) +
    (x241 * x627 + x241 * x628) * (x1028 - x806 + (-x240) * (x309 - x889)) +
    (-20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (x1028 - x806 + (-x240) * (x309 - x889)) +
       (-x202) * (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889))));
  J[1116] =
    x366 * x627 + x366 * x628 + x3954 + x6010 + x676 * x691 + x9166 +
    (-x240 * x676) * (x326 - x889) +
    (x241 * x627 + x241 * x628) * (x691 - x806 + (-x240) * (x326 - x889)) +
    (-20000000.0 * sc[4] * x70) *
      (-x738 + x963 + (-x118) * (x691 - x806 + (-x240) * (x326 - x889)) +
       (-x202) *
         (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889))));
  J[1155] =
    sc[3] * x3175 + x10003 + (-x240 * x676) * (x888 - x889) +
    (x241 * x627 + x241 * x628) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1194] =
    x10003 + (-x240 * x676) * (x888 - x889) +
    (x241 * x627 + x241 * x628) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1233] =
    x10003 + (-x240 * x676) * (x888 - x889) +
    (x241 * x627 + x241 * x628) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1272] =
    x10002 + x1043 * x676 + x3954 + (-x240 * x676) * (x176 - x889) +
    (x241 * x627 + x241 * x628) * (x1043 - x806 + (-x240) * (x176 - x889)) +
    (-20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (x1043 - x806 + (-x240) * (x176 - x889)) +
       (-x202) * (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889))));
  J[1311] =
    x10003 + (-x240 * x676) * (x888 - x889) +
    (x241 * x627 + x241 * x628) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[1350] =
    x1045 * x676 + x367 * x627 + x367 * x628 + x3954 + x6010 + x9166 +
    (-x240 * x676) * (x152 - x889) +
    (x241 * x627 + x241 * x628) * (x1045 - x806 + (-x240) * (x152 - x889)) +
    (-20000000.0 * sc[4] * x70) *
      (-x738 + x968 + (-x118) * (x1045 - x806 + (-x240) * (x152 - x889)) +
       (-x202) *
         (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889))));
  J[1389] =
    x232 * x676 + x3954 + x543 * x627 + x543 * x628 + x6010 + x9166 +
    (-x240 * x676) * (x353 - x889) +
    (x241 * x627 + x241 * x628) * (x232 - x806 + (-x240) * (x353 - x889)) +
    (-20000000.0 * sc[4] * x70) *
      (-x738 + x983 + (-x118) * (x232 - x806 + (-x240) * (x353 - x889)) +
       (-x202) *
         (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889))));
  J[1428] =
    x10002 + x291 * x676 + x3954 + (-x240 * x676) * (x357 - x889) +
    (x241 * x627 + x241 * x628) * (x291 - x806 + (-x240) * (x357 - x889)) +
    (-20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (x291 - x806 + (-x240) * (x357 - x889)) +
       (-x202) * (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889))));
  J[1467] =
    x10003 + (-x240 * x676) * (x888 - x889) +
    (x241 * x627 + x241 * x628) * (-x806 + x839 + (-x240) * (x888 - x889)) +
    (-20000000.0 * sc[4] * x70) *
      (x744 + (-x118) * (-x806 + x839 + (-x240) * (x888 - x889)) +
       (-x202) * (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889))));
  J[25] = 3.0630303030303001e+50 * x2142 * x2148 -
          3.0630303030303001e+50 * x2142 * x2179 - x2158 * x2166 +
          x2166 * x2174 - 2.66e+29 * x2170 + 2.66e+29 * x2177;
  J[64] = x2135;
  J[103] = -90000000.0 * sc[25] + 3.8e+29 * x15 * x2134 * x2153 + x2135 - x3104;
  J[142] = -sc[25] * x5731 + x2135 - x3104;
  J[181] = sc[13] * x423 * x6706 + 20000000.0 * sc[24] * x5845 -
           10000000.0 * sc[25] * x6721 + x2135 - x6725;
  J[220] = 10000000.0 * sc[19] + sc[24] * x7437 + x2135;
  J[259] = 20000000.0 * sc[24] * x3440 + x3505;
  J[298] = sc[24] * x6900 + 2.6254545454545501e+51 * x2142 * x2148 -
           2.6254545454545501e+51 * x2142 * x2179 - x2158 * x3780 -
           2.28e+30 * x2170 + x2174 * x3780 + 2.28e+30 * x2177;
  J[337] = x2135;
  J[376] = -158000.0 * sc[25] + x2135 + x6039;
  J[415] = sc[12] * x4074 + x2135 + x423 * x8603;
  J[454] = x3505;
  J[493] = sc[10] * x4074 + x2135;
  J[532] = sc[4] * x423 * x6706 + x2135;
  J[571] = x2135;
  J[610] = x2135;
  J[649] = 5.7e+29 * sc[2] * x2134 * x2153 + sc[4] * x6706 * x6750 -
           x2130 * x2158 * (3.0 * x2162 + 0.42 * x2164) +
           x2130 * x2174 * (3.0 * x2162 + 0.42 * x2164) -
           5.7e+29 * x2134 * x2169 + 6.5636363636363603e+50 * x2142 * x2148 -
           6.5636363636363603e+50 * x2142 * x2179 + x2990 * x8603;
  J[688] = x3505;
  J[727] = x10011;
  J[766] = 10000000.0 * sc[5] + x2135 + x6299;
  J[805] = x10011;
  J[844] = x2135;
  J[883] = x10011;
  J[922] = x2135;
  J[961] = 3.8e+29 * sc[2] * x15 * x2134 * exp(x2151) +
           20000000.0 * sc[4] * x5845 + sc[5] * x7437 +
           20000000.0 * sc[6] * x3440 + sc[7] * x6900 + x2135;
  J[1000] = -20000000.0 * sc[2] * x3102 - 90000000.0 * sc[2] -
            20000000.0 * sc[3] * x3102 - sc[3] * x5731 -
            10000000.0 * sc[4] * x6721 - 158000.0 * sc[9] + x2135 - x513 -
            x5331 - x8330;
  J[1039] = x2135;
  J[1078] = x2135;
  J[1117] = x2135;
  J[1156] = x2135;
  J[1195] = x2135;
  J[1234] = x2135;
  J[1273] = x2135;
  J[1312] = x2135;
  J[1351] = x2135;
  J[1390] = x2135;
  J[1429] = x2135;
  J[1468] = x2135;
  J[26] = 0;
  J[65] = 0;
  J[104] = -100100.0 * x2869;
  J[143] = 0;
  J[182] = sc[20] * x3223 - sc[26] * x6673;
  J[221] = sc[20] * x6826;
  J[260] = 0;
  J[299] = sc[19] * x3729;
  J[338] = 0;
  J[377] = 0;
  J[416] = refCinv * sc[12] * x8580;
  J[455] = x423 * x8825;
  J[494] = x2990 * x8580;
  J[533] = 0;
  J[572] = 0;
  J[611] = 0;
  J[650] = refCinv * sc[11] * x8825;
  J[689] = 0;
  J[728] = 0;
  J[767] = sc[7] * x3729;
  J[806] = sc[4] * x3223 + sc[5] * x6826;
  J[845] = 0;
  J[884] = 0;
  J[923] = 0;
  J[962] = 0;
  J[1001] = 0;
  J[1040] = -sc[4] * x6673 - 100100.0 * x5335 -
            48400000000000.0 * exp(-28783.993284029999 * invT);
  J[1079] = 0;
  J[1118] = 0;
  J[1157] = 0;
  J[1196] = 0;
  J[1235] = 0;
  J[1274] = 0;
  J[1313] = 0;
  J[1352] = 0;
  J[1391] = 0;
  J[1430] = 0;
  J[1469] = 0;
  J[27] = 30000000.0 * sc[20] * x266 - 30000000.0 * sc[20] * x376 +
          (-30000000.0 * sc[20] * x240) * (x647 - x669);
  J[66] = -30000000.0 * sc[20] * x374 + 30000000.0 * sc[20] * x693 +
          (-30000000.0 * sc[20] * x240) * (x713 - x715);
  J[105] =
    18000000.0 * sc[28] + x2898 + (-30000000.0 * sc[20] * x240) * (x734 - x735);
  J[144] = 30000000.0 * sc[20] * x721 - 30000000.0 * sc[20] * x725 - x5723 +
           (-30000000.0 * sc[20] * x240) * (x747 - x748);
  J[183] = -30000000.0 * sc[20] * x736 + 30000000.0 * sc[20] * x743 +
           6000000.0 * sc[28] + (-30000000.0 * sc[20] * x240) * (x768 - x770);
  J[222] = -30000000.0 * sc[20] * x746 + 30000000.0 * sc[20] * x757 -
           sc[27] * x7417 + (-30000000.0 * sc[20] * x240) * (x800 - x801);
  J[261] = 30000000.0 * sc[20] * x761 - 30000000.0 * sc[20] * x762 -
           sc[27] * x3501 + (-30000000.0 * sc[20] * x240) * (x842 - x844);
  J[300] = -30000000.0 * sc[20] * x787 + 30000000.0 * sc[20] * x799 -
           sc[27] * x6909 + (-30000000.0 * sc[20] * x240) * (x864 - x875);
  J[339] = x3946 + (-30000000.0 * sc[20] * x240) * (x888 - x889);
  J[378] = -30000000.0 * sc[20] * x841 + 30000000.0 * sc[20] * x849 + x7508 +
           (-30000000.0 * sc[20] * x240) * (x905 - x906);
  J[417] = sc[18] * x4105 + 30000000.0 * sc[20] * x855 -
           30000000.0 * sc[20] * x865 + x8562 +
           (-30000000.0 * sc[20] * x240) * (-x244 + x920);
  J[456] = -30000000.0 * sc[20] * x786 + 30000000.0 * sc[20] * x897 -
           sc[27] * x8610 + (-30000000.0 * sc[20] * x240) * (x937 - x938);
  J[495] = 30000000.0 * sc[20] * x900 + x3945 +
           (-30000000.0 * sc[20] * x240) * (-x889 + x948);
  J[534] = -30000000.0 * sc[20] * x904 + 30000000.0 * sc[20] * x908 +
           (-30000000.0 * sc[20] * x240) * (x961 - x962);
  J[573] = 30000000.0 * sc[20] * x915 + x3945 +
           (-30000000.0 * sc[20] * x240) * (-x889 + x967);
  J[612] = 30000000.0 * sc[20] * x709 + x3945 +
           (-30000000.0 * sc[20] * x240) * (-x889 + x971);
  J[651] = sc[20] * x6209 - 30000000.0 * sc[20] * x926 +
           30000000.0 * sc[20] * x931 +
           (-30000000.0 * sc[20] * x240) * (x572 - x659);
  J[690] = -30000000.0 * sc[20] * x936 + 30000000.0 * sc[20] * x947 +
           (-30000000.0 * sc[20] * x240) * (-x832 + x837);
  J[729] = sc[10] * x4105 - 30000000.0 * sc[20] * x949 +
           30000000.0 * sc[20] * x956 +
           (-30000000.0 * sc[20] * x240) * (x1037 - x1038);
  J[768] = 30000000.0 * sc[20] * x563 + x3945 +
           (-30000000.0 * sc[20] * x240) * (x1044 - x889);
  J[807] = sc[16] * x6209 - 30000000.0 * sc[20] * x966 +
           30000000.0 * sc[20] * x970 + 30000000.0 * x226 +
           (-30000000.0 * sc[20] * x240) * (x1059 - x1060);
  J[846] = 30000000.0 * sc[20] * x977 + x3945 +
           (-30000000.0 * sc[20] * x240) * (x1064 - x889);
  J[885] = 30000000.0 * sc[20] * x256 - 30000000.0 * sc[20] * x992 +
           (-30000000.0 * sc[20] * x240) * (x214 - x216);
  J[924] = 30000000.0 * sc[20] * x1014 - 30000000.0 * sc[20] * x805 +
           (-30000000.0 * sc[20] * x240) * (x285 - x294);
  J[963] = 30000000.0 * sc[20] * x831 + x3945 +
           (-30000000.0 * sc[20] * x240) * (x306 - x889);
  J[1002] = x3946 + (-30000000.0 * sc[20] * x240) * (x888 - x889);
  J[1041] = x3946 + (-30000000.0 * sc[20] * x240) * (x888 - x889);
  J[1080] = -sc[11] * x8610 - sc[5] * x7417 - sc[6] * x3501 - sc[7] * x6909 +
            x5351 - x6407 + (-30000000.0 * sc[20] * x240) * (x309 - x889);
  J[1119] = 30000000.0 * sc[20] * x691 + 18000000.0 * sc[2] +
            6000000.0 * sc[4] + x3945 + x5375 + x7573 + x8767 +
            (-30000000.0 * sc[20] * x240) * (x326 - x889);
  J[1158] = x3946 + (-30000000.0 * sc[20] * x240) * (x888 - x889);
  J[1197] = x3946 + (-30000000.0 * sc[20] * x240) * (x888 - x889);
  J[1236] = x3946 + (-30000000.0 * sc[20] * x240) * (x888 - x889);
  J[1275] = 30000000.0 * sc[20] * x1043 + x3945 +
            (-30000000.0 * sc[20] * x240) * (x176 - x889);
  J[1314] = x3946 + (-30000000.0 * sc[20] * x240) * (x888 - x889);
  J[1353] = 30000000.0 * sc[20] * x1045 + x3945 +
            (-30000000.0 * sc[20] * x240) * (x152 - x889);
  J[1392] = 30000000.0 * sc[20] * x232 + x3945 +
            (-30000000.0 * sc[20] * x240) * (x353 - x889);
  J[1431] = 30000000.0 * sc[20] * x291 + x3945 +
            (-30000000.0 * sc[20] * x240) * (x357 - x889);
  J[1470] = x3946 + (-30000000.0 * sc[20] * x240) * (x888 - x889);
  J[28] = x1975 + x8349 +
          (-50000000.0 * sc[20] * x118 + x1047 * x241) *
            (x266 - x376 + (-x240) * (x647 - x669)) +
          (-50000000.0 * sc[20] * x202) *
            (-x359 + x368 + (x241) * (x266 - x376 + (-x240) * (x647 - x669)));
  J[67] = -50000000.0 * sc[20] * x620 + 50000000.0 * sc[20] * x670 -
          x1047 * x347 + x1047 * x689 + x2702 +
          (-50000000.0 * sc[20] * x118 + x1047 * x241) *
            (-x374 + x693 + (-x240) * (x713 - x715)) +
          (-50000000.0 * sc[20] * x202) *
            (-x347 + x689 + (x241) * (-x374 + x693 + (-x240) * (x713 - x715)));
  J[106] = -50000000.0 * sc[20] * x678 + 50000000.0 * sc[20] * x703 +
           sc[27] * x2889 + x2702 + x2961 + x2965 +
           (-50000000.0 * sc[20] * x118 + x1047 * x241) *
             (-x712 + x716 + (-x240) * (x734 - x735)) +
           (-50000000.0 * sc[20] * x202) *
             (x688 - x690 + (x241) * (-x712 + x716 + (-x240) * (x734 - x735)));
  J[145] = -50000000.0 * sc[20] * x717 + 50000000.0 * sc[20] * x719 +
           x1047 * x125 - x1047 * x710 + x2702 + x5799 +
           (-50000000.0 * sc[20] * x118 + x1047 * x241) *
             (x721 - x725 + (-x240) * (x747 - x748)) +
           (-50000000.0 * sc[20] * x202) *
             (x125 - x710 + (x241) * (x721 - x725 + (-x240) * (x747 - x748)));
  J[184] = -50000000.0 * sc[20] * x730 + 50000000.0 * sc[20] * x737 -
           sc[28] * x5854 - 6000000.0 * sc[28] + sc[29] * x6696 - x1047 * x171 +
           x1047 * x732 + x2702 + x6785 +
           (-50000000.0 * sc[20] * x118 + x1047 * x241) *
             (-x736 + x743 + (-x240) * (x768 - x770)) +
           (-50000000.0 * sc[20] * x202) *
             (-x171 + x732 + (x241) * (-x736 + x743 + (-x240) * (x768 - x770)));
  J[223] = sc[27] * x7417 - 9260000.0 * sc[28] - x1047 * x740 + x1047 * x741 +
           x2702 + x3367 + x7456 +
           (-50000000.0 * sc[20] * x118 + x1047 * x241) *
             (-x746 + x757 + (-x240) * (x800 - x801)) +
           (-50000000.0 * sc[20] * x202) *
             (-x740 + x741 + (x241) * (-x746 + x757 + (-x240) * (x800 - x801)));
  J[262] = -50000000.0 * sc[20] * x754 + 50000000.0 * sc[20] * x756 +
           sc[27] * x3501 - sc[28] * x3450 - x1047 * x745 + x1047 * x758 +
           x3631 + x8490 +
           (-50000000.0 * sc[20] * x118 + x1047 * x241) *
             (x761 - x762 + (-x240) * (x842 - x844)) +
           (-50000000.0 * sc[20] * x202) *
             (-x745 + x758 + (x241) * (x761 - x762 + (-x240) * (x842 - x844)));
  J[301] = sc[27] * x6909 - sc[28] * x6911 + x3754 + x8513 +
           (-50000000.0 * sc[20] * x118 + x1047 * x241) *
             (-x787 + x799 + (-x240) * (x864 - x875)) +
           (-50000000.0 * sc[20] * x202) *
             (-x759 + x766 + (x241) * (-x787 + x799 + (-x240) * (x864 - x875)));
  J[340] = -sc[28] * x7489 + x10014 +
           (-50000000.0 * sc[20] * x118 + x1047 * x241) *
             (-x806 + x839 + (-x240) * (x888 - x889)) +
           (-50000000.0 * sc[20] * x202) *
             (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[379] = -50000000.0 * sc[20] * x779 + 50000000.0 * sc[20] * x792 +
           sc[29] * x7511 - x1047 * x838 + x1047 * x840 + x2702 - x7508 +
           (-50000000.0 * sc[20] * x118 + x1047 * x241) *
             (-x841 + x849 + (-x240) * (x905 - x906)) +
           (-50000000.0 * sc[20] * x202) *
             (-x838 + x840 + (x241) * (-x841 + x849 + (-x240) * (x905 - x906)));
  J[418] = sc[18] * x8570 + sc[19] * x4123 - 50000000.0 * sc[20] * x796 +
           50000000.0 * sc[20] * x814 - sc[28] * x8565 + sc[29] * x8574 +
           x1047 * x195 - x1047 * x862 + x2702 -
           3.91e+48 * x35 * x8300 * x8334 - x8562 +
           (-50000000.0 * sc[20] * x118 + x1047 * x241) *
             (x855 - x865 + (-x240) * (-x244 + x920)) +
           (-50000000.0 * sc[20] * x202) *
             (x195 - x862 + (x241) * (x855 - x865 + (-x240) * (-x244 + x920)));
  J[457] = -50000000.0 * sc[20] * x827 + 50000000.0 * sc[20] * x834 +
           sc[27] * x8610 - sc[28] * x8612 - x1047 * x341 + x1047 * x882 +
           x3631 + x8490 +
           (-50000000.0 * sc[20] * x118 + x1047 * x241) *
             (-x786 + x897 + (-x240) * (x937 - x938)) +
           (-50000000.0 * sc[20] * x202) *
             (-x341 + x882 + (x241) * (-x786 + x897 + (-x240) * (x937 - x938)));
  J[496] =
    50000000.0 * sc[20] * x851 - 60000000.0 * sc[28] + x10016 + x1047 * x883 +
    (-50000000.0 * sc[20] * x118 + x1047 * x241) *
      (-x806 + x900 + (-x240) * (-x889 + x948)) +
    (-50000000.0 * sc[20] * x202) *
      (-x687 + x883 + (x241) * (-x806 + x900 + (-x240) * (-x889 + x948)));
  J[535] = 50000000.0 * sc[20] * x861 - x1047 * x886 + x1047 * x895 + x2702 +
           x3366 + x7119 +
           (-50000000.0 * sc[20] * x118 + x1047 * x241) *
             (-x904 + x908 + (-x240) * (x961 - x962)) +
           (-50000000.0 * sc[20] * x202) *
             (-x886 + x895 + (x241) * (-x904 + x908 + (-x240) * (x961 - x962)));
  J[574] =
    50000000.0 * sc[20] * x870 + x10016 + x1047 * x896 +
    (-50000000.0 * sc[20] * x118 + x1047 * x241) *
      (-x806 + x915 + (-x240) * (-x889 + x967)) +
    (-50000000.0 * sc[20] * x202) *
      (-x687 + x896 + (x241) * (-x806 + x915 + (-x240) * (-x889 + x967)));
  J[613] = 50000000.0 * sc[20] * x892 + x10016 + x1047 * x903 +
           (-50000000.0 * sc[20] * x118 + x1047 * x241) *
             (x709 - x806 + (-x240) * (-x889 + x971)) +
           (-50000000.0 * sc[20] * x202) *
             (-x687 + x903 + (x241) * (x709 - x806 + (-x240) * (-x889 + x971)));
  J[652] = sc[29] * x8928 + x4525 + x8672 +
           (-50000000.0 * sc[20] * x118 + x1047 * x241) *
             (-x926 + x931 + (-x240) * (x572 - x659)) +
           (-50000000.0 * sc[20] * x202) *
             (-x912 + x913 + (x241) * (-x926 + x931 + (-x240) * (x572 - x659)));
  J[691] =
    x4708 + x8490 +
    (-50000000.0 * sc[20] * x118 + x1047 * x241) *
      (-x936 + x947 + (-x240) * (-x832 + x837)) +
    (-50000000.0 * sc[20] * x202) *
      (-x510 + x928 + (x241) * (-x936 + x947 + (-x240) * (-x832 + x837)));
  J[730] =
    sc[10] * x8570 - 50000000.0 * sc[20] * x911 + 50000000.0 * sc[20] * x917 +
    x1047 * x878 - x1047 * x929 + x2702 +
    (-50000000.0 * sc[20] * x118 + x1047 * x241) *
      (-x949 + x956 + (-x240) * (x1037 - x1038)) +
    (-50000000.0 * sc[20] * x202) *
      (x878 - x929 + (x241) * (-x949 + x956 + (-x240) * (x1037 - x1038)));
  J[769] = sc[10] * x4123 + 50000000.0 * sc[20] * x922 + x10016 + x1047 * x189 +
           x6783 + x8709 +
           (-50000000.0 * sc[20] * x118 + x1047 * x241) *
             (x563 - x806 + (-x240) * (x1044 - x889)) +
           (-50000000.0 * sc[20] * x202) *
             (x189 - x687 + (x241) * (x563 - x806 + (-x240) * (x1044 - x889)));
  J[808] =
    x2702 + x4966 +
    (-50000000.0 * sc[20] * x118 + x1047 * x241) *
      (-x966 + x970 + (-x240) * (x1059 - x1060)) +
    (-50000000.0 * sc[20] * x202) *
      (-x705 + x935 + (x241) * (-x966 + x970 + (-x240) * (x1059 - x1060)));
  J[847] =
    50000000.0 * sc[20] * x941 + x10016 + x1047 * x884 + x8723 +
    (-50000000.0 * sc[20] * x118 + x1047 * x241) *
      (-x806 + x977 + (-x240) * (x1064 - x889)) +
    (-50000000.0 * sc[20] * x202) *
      (-x687 + x884 + (x241) * (-x806 + x977 + (-x240) * (x1064 - x889)));
  J[886] = x5105 + x8305 +
           (-50000000.0 * sc[20] * x118 + x1047 * x241) *
             (x256 - x992 + (-x240) * (x214 - x216)) +
           (-50000000.0 * sc[20] * x202) *
             (x365 - x944 + (x241) * (x256 - x992 + (-x240) * (x214 - x216)));
  J[925] = 50000000.0 * sc[20] * x958 - x1047 * x350 + x1047 * x355 + x2702 +
           x3366 +
           (-50000000.0 * sc[20] * x118 + x1047 * x241) *
             (x1014 - x805 + (-x240) * (x285 - x294)) +
           (-50000000.0 * sc[20] * x202) *
             (-x350 + x355 + (x241) * (x1014 - x805 + (-x240) * (x285 - x294)));
  J[964] = 50000000.0 * sc[20] * x959 + x1047 * x363 + x3366 + x3930 + x8427 +
           (-50000000.0 * sc[20] * x118 + x1047 * x241) *
             (-x806 + x831 + (-x240) * (x306 - x889)) +
           (-50000000.0 * sc[20] * x202) *
             (x363 - x687 + (x241) * (-x806 + x831 + (-x240) * (x306 - x889)));
  J[1003] = x10014 +
            (-50000000.0 * sc[20] * x118 + x1047 * x241) *
              (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-50000000.0 * sc[20] * x202) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1042] = x10014 +
            (-50000000.0 * sc[20] * x118 + x1047 * x241) *
              (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-50000000.0 * sc[20] * x202) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1081] = sc[11] * x8610 + sc[2] * x2889 + sc[5] * x7417 + sc[6] * x3501 +
            sc[7] * x6909 + x10014 +
            (-50000000.0 * sc[20] * x118 + x1047 * x241) *
              (x1028 - x806 + (-x240) * (x309 - x889)) +
            (-50000000.0 * sc[20] * x202) *
              (x835 + (x241) * (x1028 - x806 + (-x240) * (x309 - x889)));
  J[1120] = -sc[10] * x8565 - sc[11] * x8612 - 60000000.0 * sc[12] +
            50000000.0 * sc[20] * x963 - sc[4] * x5854 - 6000000.0 * sc[4] -
            9260000.0 * sc[5] - sc[6] * x3450 - sc[7] * x6911 - sc[8] * x7489 +
            x10016 - 3.91e+48 * x500 * x8300 * exp(x8319) - x5375 + x5391 -
            x7573 - x8762 - x8767 +
            (-50000000.0 * sc[20] * x118 + x1047 * x241) *
              (x691 - x806 + (-x240) * (x326 - x889)) +
            (-50000000.0 * sc[20] * x202) *
              (x366 - x687 + (x241) * (x691 - x806 + (-x240) * (x326 - x889)));
  J[1159] = sc[10] * x8574 + sc[16] * x8928 + sc[4] * x6696 + sc[9] * x7511 +
            x10014 + x1934 + x5405 + x6419 + x7577 +
            (-50000000.0 * sc[20] * x118 + x1047 * x241) *
              (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-50000000.0 * sc[20] * x202) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1198] = x10014 +
            (-50000000.0 * sc[20] * x118 + x1047 * x241) *
              (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-50000000.0 * sc[20] * x202) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1237] = x10014 + 3.91e+48 * x503 * x8300 * x8320 +
            (-50000000.0 * sc[20] * x118 + x1047 * x241) *
              (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-50000000.0 * sc[20] * x202) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1276] = x10014 +
            (-50000000.0 * sc[20] * x118 + x1047 * x241) *
              (x1043 - x806 + (-x240) * (x176 - x889)) +
            (-50000000.0 * sc[20] * x202) *
              (x835 + (x241) * (x1043 - x806 + (-x240) * (x176 - x889)));
  J[1315] = x10014 +
            (-50000000.0 * sc[20] * x118 + x1047 * x241) *
              (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-50000000.0 * sc[20] * x202) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[1354] = 50000000.0 * sc[20] * x968 + x10016 + x1047 * x367 +
            (-50000000.0 * sc[20] * x118 + x1047 * x241) *
              (x1045 - x806 + (-x240) * (x152 - x889)) +
            (-50000000.0 * sc[20] * x202) *
              (x367 - x687 + (x241) * (x1045 - x806 + (-x240) * (x152 - x889)));
  J[1393] = 50000000.0 * sc[20] * x983 + x10016 + x1047 * x543 +
            (-50000000.0 * sc[20] * x118 + x1047 * x241) *
              (x232 - x806 + (-x240) * (x353 - x889)) +
            (-50000000.0 * sc[20] * x202) *
              (x543 - x687 + (x241) * (x232 - x806 + (-x240) * (x353 - x889)));
  J[1432] = x10014 +
            (-50000000.0 * sc[20] * x118 + x1047 * x241) *
              (x291 - x806 + (-x240) * (x357 - x889)) +
            (-50000000.0 * sc[20] * x202) *
              (x835 + (x241) * (x291 - x806 + (-x240) * (x357 - x889)));
  J[1471] = x10014 +
            (-50000000.0 * sc[20] * x118 + x1047 * x241) *
              (-x806 + x839 + (-x240) * (x888 - x889)) +
            (-50000000.0 * sc[20] * x202) *
              (x835 + (x241) * (-x806 + x839 + (-x240) * (x888 - x889)));
  J[29] = -9.31e+47 * refC * sc[29] * x1940 * x1954 -
          sc[28] * sc[2] * x1933 * x1971 +
          9.31e+47 * sc[28] * sc[2] * x1940 * exp(x1928) +
          sc[29] * x1933 * x1934 + 6.19115e+87 * x1946 * x1951 -
          6.19115e+87 * x1946 * x1968 + x2023 + 2.989e+46 * x8365 * x8367 +
          5.105212e+85 * x8370 * x8373 - 5.105212e+85 * x8370 * x8380 -
          2.989e+46 * x8378 - x8394 * (1.4 * x8386 + 0.196 * x8388) +
          x8398 * (1.4 * x8386 + 0.196 * x8388);
  J[68] = x8358;
  J[107] = sc[24] * x2990 * x2994 + sc[28] * x1971 - sc[29] * x1984 -
           8000000000000000.0 * sc[29] * x2805 + 1800000.0 * sc[30] +
           3.2e+16 * sc[31] * x2805 - x2965 + x8358;
  J[146] = -sc[29] * x3175 - x5799 - x5802 + x8358;
  J[185] = sc[28] * x5854 - sc[29] * x6696 + 24000000.0 * sc[30] + x8358;
  J[224] = 2660000.0 * sc[28] - sc[29] * x7452 - x7456 + x8358;
  J[263] = sc[28] * x3450 - sc[29] * x3442 + x3691;
  J[302] = sc[28] * x6911 - sc[29] * x6903 -
           x1932 * (1.68 * x1959 * x249 + 12.0 * x1960 * x249) +
           5.3067e+88 * x1946 * x1951 - 5.3067e+88 * x1946 * x1968 +
           7.98e+48 * x2691 +
           x2695 * (1.68 * x1959 * x249 + 12.0 * x1960 * x249) -
           7.98e+48 * x2700 + x3774 + 2.562e+47 * x8365 * x8367 +
           4.375896e+86 * x8370 * x8373 - 4.375896e+86 * x8370 * x8380 -
           2.562e+47 * x8378 - x8394 * (12.0 * x8386 + 1.68 * x8388) +
           x8398 * (12.0 * x8386 + 1.68 * x8388);
  J[341] = sc[28] * x7489 + x8358;
  J[380] = -sc[29] * x7511 + 90000.0 * sc[30] + x8358;
  J[419] = sc[19] * x8355 + sc[20] * x4083 + sc[24] * x2994 * x994 -
           sc[29] * x4079 - sc[29] * x8574 + 11000000.0 * sc[30] + x8358;
  J[458] = sc[28] * x8612 - sc[29] * x8606 + x3691;
  J[497] = sc[21] * x6132 + 60000000.0 * sc[28] + x8358;
  J[536] = x8358;
  J[575] = x8358;
  J[614] = x8358;
  J[653] =
    -sc[29] * x8928 - x1932 * (0.42 * x1959 * x249 + 3.0 * x1960 * x249) +
    1.326675e+88 * x1946 * x1951 - 1.326675e+88 * x1946 * x1968 +
    1.995e+48 * x2691 + x2695 * (0.42 * x1959 * x249 + 3.0 * x1960 * x249) -
    1.995e+48 * x2700 + x4543 + 6.405e+46 * x8365 * x8367 +
    1.093974e+86 * x8370 * x8373 - 1.093974e+86 * x8370 * x8380 -
    6.405e+46 * x8378 - x8394 * (3.0 * x8386 + 0.42 * x8388) +
    x8398 * (3.0 * x8386 + 0.42 * x8388);
  J[692] = x3691;
  J[731] = x10017 + x8396;
  J[770] = sc[10] * x8355 + x8358;
  J[809] = sc[10] * x4083 + x10017 + x8396;
  J[848] = sc[12] * x6132 + x8358;
  J[887] = -x1932 * (0.84 * x1959 * x249 + 6.0 * x1960 * x249) +
           2.65335e+88 * x1946 * x1951 - 2.65335e+88 * x1946 * x1968 +
           3.99e+48 * x2691 +
           x2695 * (0.84 * x1959 * x249 + 6.0 * x1960 * x249) -
           3.99e+48 * x2700 + x5119 + x8396;
  J[926] = x8358;
  J[965] = sc[2] * x2990 * x2994 + x8358;
  J[1004] = x8358;
  J[1043] = x8358;
  J[1082] = x8358;
  J[1121] = sc[11] * x8612 + 60000000.0 * sc[12] + sc[2] * x1971 +
            sc[4] * x5854 + 2660000.0 * sc[5] + sc[6] * x3450 + sc[7] * x6911 +
            sc[8] * x7489 + x8358;
  J[1160] = -4.27e+46 * refC * x15 * x8365 * x8376 - sc[10] * x4079 -
            sc[10] * x8574 - sc[11] * x8606 - sc[16] * x8928 - sc[2] * x1984 -
            8000000000000000.0 * sc[2] * x2805 - sc[3] * x3175 - sc[4] * x6696 -
            sc[5] * x7452 - sc[6] * x3442 - sc[7] * x6903 - sc[9] * x7511 -
            x1934 - x5405 - x6419 - x6420 - x7577 + x8358;
  J[1199] = 11000000.0 * sc[10] + 1800000.0 * sc[2] + 24000000.0 * sc[4] +
            90000.0 * sc[9] + x2011 + x8358;
  J[1238] = 3.2e+16 * sc[2] * x2805 + x8358;
  J[1277] = x8358;
  J[1316] = x8358;
  J[1355] = x8358;
  J[1394] = x8358;
  J[1433] = x8358;
  J[1472] = x8358;
  J[30] = sc[30] * x1985 * x2011 - x1985 * x2018 + 4.382e+26 * x1994 +
          2.0625052631578899e+46 * x1996 * x2001 -
          2.0625052631578899e+46 * x1996 * x2014 - 4.382e+26 * x2021;
  J[69] = x671;
  J[108] = sc[29] * x1984 - sc[30] * x2907 - 1800000.0 * sc[30] + x671;
  J[147] = -96000000.0 * sc[30] + x5740 + x671;
  J[186] = -24000000.0 * sc[30] + x671 + x6752;
  J[225] = sc[29] * x7452 - 24000000.0 * sc[30] + x671;
  J[264] = sc[29] * x3442 + x672;
  J[303] = sc[29] * x6903 -
           x1982 * x2018 * (1.68 * x2005 * x249 + 12.0 * x2006 * x249) +
           3.756e+27 * x1994 + 1.7678616541353401e+47 * x1996 * x2001 -
           1.7678616541353401e+47 * x1996 * x2014 - 3.756e+27 * x2021 +
           x2750 * (1.68 * x2005 * x249 + 12.0 * x2006 * x249);
  J[342] = x671;
  J[381] = -90000.0 * sc[30] + x671;
  J[420] = sc[20] * x8596 + sc[21] * x4077 - 11000000.0 * sc[30] + x671;
  J[459] = sc[29] * x8606 + x672;
  J[498] = -sc[30] * x6128 + x671;
  J[537] = sc[21] * x6152 + x671 + x7106;
  J[576] = x671;
  J[615] = x671;
  J[654] = -x1982 * x2018 * (0.42 * x2005 * x249 + 3.0 * x2006 * x249) +
           9.39e+26 * x1994 + 4.4196541353383503e+46 * x1996 * x2001 -
           4.4196541353383503e+46 * x1996 * x2014 - 9.39e+26 * x2021 +
           x2750 * (0.42 * x2005 * x249 + 3.0 * x2006 * x249);
  J[693] = x672;
  J[732] = x671;
  J[771] = x671;
  J[810] = sc[10] * x8596 + x671;
  J[849] =
    sc[10] * x4077 + sc[13] * x6152 + 24000000.0 * sc[4] * x6749 * x6750 + x671;
  J[888] = sc[30] * x2011 * x5115 + 1.878e+27 * x1994 +
           8.8393082706766904e+46 * x1996 * x2001 -
           8.8393082706766904e+46 * x1996 * x2014 - x2018 * x5115 -
           1.878e+27 * x2021;
  J[927] = x671;
  J[966] = x671;
  J[1005] = x671;
  J[1044] = x671;
  J[1083] = x671;
  J[1122] = x671;
  J[1161] = sc[11] * x8606 + sc[2] * x1984 + sc[5] * x7452 + sc[6] * x3442 +
            sc[7] * x6903 + x671;
  J[1200] = -11000000.0 * sc[10] - sc[12] * x6128 - sc[2] * x2907 -
            1800000.0 * sc[2] - 96000000.0 * sc[3] - 24000000.0 * sc[4] -
            24000000.0 * sc[5] - 90000.0 * sc[9] - x2011 + x671 - x8776;
  J[1239] = x6423 + x671;
  J[1278] = x671;
  J[1317] = x671;
  J[1356] = x671;
  J[1395] = x671;
  J[1434] = x671;
  J[1473] = x671;
  J[31] = 1.070167e+89 * x8310 * x8315 - 1.070167e+89 * x8310 * x8342 -
          2.737e+48 * x8323 - x8332 * x8337 + x8332 * x8347 +
          2.737e+48 * x8340 - 1.1211666666666701e+81 * x9845 * x9847 +
          1.1211666666666701e+81 * x9845 * x9856 - 1.085e+44 * x9854 +
          1.085e+44 * x9861 + x9869 * x9873 - x9869 * x9877;
  J[70] = x1986;
  J[109] = -4.8e+16 * sc[31] * x2805 + x1986;
  J[148] = x1986 - x5740;
  J[187] = x1986;
  J[226] = x1986;
  J[265] = x8423;
  J[304] = -9.3e+44 * refC * sc[31] * x9850 * x9852 +
           9.3e+44 * sc[19] * x9850 * x9859 - x8302 * x8337 * x8510 +
           x8302 * x8347 * x8510 + 9.17286e+89 * x8310 * x8315 -
           9.17286e+89 * x8310 * x8342 - 2.346e+49 * x8323 + 2.346e+49 * x8340 +
           x8498 * x9837 * x9873 - x8498 * x9837 * x9877 -
           9.61e+81 * x9845 * x9847 + 9.61e+81 * x9845 * x9856;
  J[343] = x1986;
  J[382] = x1986;
  J[421] = sc[29] * x4079 + x1986 + 3.91e+48 * x35 * x8300 * x8334;
  J[460] = x8423;
  J[499] = sc[30] * x6128 + x1986;
  J[538] = x1986;
  J[577] = x1986;
  J[616] = x1986;
  J[655] = -x8302 * x8337 * x8666 + x8302 * x8347 * x8666 +
           2.293215e+89 * x8310 * x8315 - 2.293215e+89 * x8310 * x8342 -
           5.865e+48 * x8323 + 5.865e+48 * x8340 - 2.4025e+81 * x9845 * x9847 +
           2.4025e+81 * x9845 * x9856 - 2.325e+44 * x9854 + 2.325e+44 * x9861 +
           x9873 * x9920 - x9877 * x9920;
  J[694] = x8423;
  J[733] = x1986;
  J[772] = 1.55e+44 * sc[21] * x9835 * x9850 + x1986;
  J[811] = sc[21] * x4934 + x1986;
  J[850] = 1.55e+44 * sc[19] * x9835 * x9850 + sc[20] * x4934 + x1986;
  J[889] = -x8303 * x8337 + x8303 * x8347 + 4.58643e+89 * x8310 * x8315 -
           4.58643e+89 * x8310 * x8342 - 1.173e+49 * x8323 + 1.173e+49 * x8340 -
           4.805e+81 * x9845 * x9847 + 4.805e+81 * x9845 * x9856 -
           4.65e+44 * x9854 + 4.65e+44 * x9861 + x9873 * x9935 - x9877 * x9935;
  J[928] = x1986;
  J[967] = x1986;
  J[1006] = x1986;
  J[1045] = x1986;
  J[1084] = x1986;
  J[1123] = x1986 + 3.91e+48 * x500 * x8300 * exp(x8319);
  J[1162] = sc[10] * x4079 + x1986;
  J[1201] = sc[12] * x6128 + x1986;
  J[1240] = -4.8e+16 * sc[2] * x2805 + x1986 - 3.91e+48 * x503 * x8300 * x8320 -
            1.55e+44 * x503 * x9850 * x9852 - x6423;
  J[1279] = x1986;
  J[1318] = x1986;
  J[1357] = x1986;
  J[1396] = x1986;
  J[1435] = x1986;
  J[1474] = x1986;
  J[32] = -2100000.0 * sc[16] * x104 * x9196 - 2100000.0 * sc[16] * x369 +
          18900000.0 * sc[32] * x1706 + 18900000.0 * sc[32] * x1710 -
          23520000.0 * x1909 - 23520000.0 * x1913 - 6300.0 * x5574 -
          6300.0 * x5576 + 217000000.0 * x9239 - 217000000.0 * x9243;
  J[71] = sc[16] * x1714 + sc[3] * x1730 + x1718 * x279 - x2603 * x279 -
          x279 * x5650 - x279 * x9253 + x6603 + x7676 + x8006 + x8483;
  J[110] = x1718 * x54 - x1718 * x619 - x2603 * x54 + x2603 * x619 -
           x54 * x5650 - x54 * x9253 + x5650 * x619 -
           33600000.0 * x602 * exp(x1907) + x619 * x9253 + x9294;
  J[149] = sc[1] * x1730 - x1718 * x219 + x1718 * x596 + x219 * x2603 +
           x219 * x5650 + x219 * x9253 - x2603 * x596 - x5569 * x602 -
           x5650 * x596 - x596 * x9253 + x9294;
  J[188] = -sc[32] * x3248 + x157 * x1718 - x157 * x2603 - x157 * x5650 -
           x157 * x9253 - x1718 * x633 + x2603 * x633 + x5650 * x633 +
           x633 * x9253 + x9294;
  J[227] = -x1718 * x181 + x1755 + x181 * x2603 + x181 * x5650 + x181 * x9253 -
           33600000.0 * x1909 - 9000.0 * x5576 + x9294 - 3000000.0 * x9364;
  J[266] = x8357;
  J[305] = 162000000.0 * sc[32] * x1706 + 162000000.0 * sc[32] * x1710 -
           201600000.0 * x1909 - 201600000.0 * x1913 - 54000.0 * x5574 -
           54000.0 * x5576 + 1860000000.0 * x9239 - 1860000000.0 * x9243 -
           18000000.0 * x9364 - 18000000.0 * x9381;
  J[344] = x9866;
  J[383] = -sc[32] * x6048 + x1718 * x641 - x1718 * x642 - x2603 * x641 +
           x2603 * x642 - x5650 * x641 + x5650 * x642 - x641 * x9253 +
           x642 * x9253 + x9294;
  J[422] = x1718 * x231 - x231 * x2603 - x231 * x5650 - x231 * x9253 + x6603 +
           x7676 + x8006 + x8483;
  J[461] = x8357;
  J[500] = -24600000.0 * sc[32] * x588 + x1718 * x649 - x2603 * x649 -
           x5650 * x649 - x649 * x9253 + x6603 + x7676 + x8006 + x8483;
  J[539] = x9866;
  J[578] = x1718 * x650 - x1718 * x668 - x2603 * x650 + x2603 * x668 -
           x5650 * x650 + x5650 * x668 - x650 * x9253 + x668 * x9253 + x9294;
  J[617] = x9866;
  J[656] = sc[1] * x1714 + x1718 * x674 - x1718 * x686 - x2603 * x674 +
           x2603 * x686 - x5650 * x674 + x5650 * x686 -
           3000000.0 * x602 * x9196 - x674 * x9253 + x686 * x9253 + x9579;
  J[695] = -sc[32] * x9597 + x1718 * x297 - x1718 * x320 - x2603 * x297 +
           x2603 * x320 - x297 * x5650 - x297 * x9253 + x320 * x5650 +
           x320 * x9253 + 620000000.0 * x9239 - 620000000.0 * x9243;
  J[734] = x9866;
  J[773] = x9866;
  J[812] = x9866;
  J[851] = x9866;
  J[890] = 81000000.0 * sc[32] * x1706 + 81000000.0 * sc[32] * x1710 -
           27000.0 * x5574 - 27000.0 * x5576 + x7287 + 930000000.0 * x9239 -
           930000000.0 * x9243 - 9000000.0 * x9364 - 9000000.0 * x9381;
  J[929] = -x1718 * x782 + x1755 - 33600000.0 * x1909 + x2603 * x782 -
           9000.0 * x5576 + x5650 * x782 + x782 * x9253 + x9294 -
           3000000.0 * x9364;
  J[968] = x9866;
  J[1007] = x9866;
  J[1046] = x9866;
  J[1085] = x9866;
  J[1124] = x9866;
  J[1163] = x9866;
  J[1202] = x9866;
  J[1241] = x9866;
  J[1280] = -24600000.0 * sc[12] * x588 - 29000000.0 * sc[16] * x662 -
            sc[17] * x9597 - 20000000.0 * sc[36] - sc[4] * x3248 -
            sc[9] * x6048 + x1718 * x809 - x1718 * x99 - x2603 * x809 +
            x2603 * x99 - 310000000.0 * x35 * x423 * x9241 - x5650 * x809 +
            x5650 * x99 + 27000000.0 * x602 * exp(-178.641916360675 * invT) -
            x809 * x9253 + x9253 * x99 + x9294;
  J[1319] = x1718 * x881 - x2603 * x881 - x5650 * x881 + x6603 + x7676 + x8006 +
            x8483 - x881 * x9253;
  J[1358] = x1718 * x469 - x2603 * x469 - x469 * x5650 - x469 * x9253 + x6603 +
            x7676 + x8006 + x8483;
  J[1397] = x1718 * x465 - x2603 * x465 - x465 * x5650 - x465 * x9253 + x6603 +
            x7676 + x8006 + x8483;
  J[1436] = -20000000.0 * sc[32] + x1718 * x537 - x1718 * x540 - x2603 * x537 +
            x2603 * x540 + 310000000.0 * x35 * exp(-27198.860786745099 * invT) -
            x537 * x5650 - x537 * x9253 + x540 * x5650 + x540 * x9253 + x9294;
  J[1475] = -x1718 * x957 + x1755 - 33600000.0 * x1909 + x2603 * x957 -
            9000.0 * x5576 + x5650 * x957 + x9253 * x957 + x9294 -
            3000000.0 * x9364;
  J[33] = -10570000.0 * sc[14] * x8288 - 10570000.0 * sc[14] * x8292 -
          92400000.0 * sc[4] * x1922 - 92400000.0 * sc[4] * x1925 -
          1477000.0 * sc[5] * x6550 - 2730000.0 * sc[9] * x5607 -
          74200000.0 * x5580 * x5591 - 74200000.0 * x5580 - 74200000.0 * x5583 -
          74200000.0 * x5586 - 2730000.0 * x5604 - x6549 - 1183000.0 * x9073 -
          1183000.0 * x9075;
  J[72] = -x2615 * x279 + x2617 - x279 * x5653 - x279 * x5662 - x279 * x6608 -
          x279 * x8402 - x279 * x9081 + x5664 - x6609 + x8404 + x9083 + x9884;
  J[111] = -sc[33] * x2923 - x2615 * x54 + x2615 * x619 - x54 * x5653 -
           x54 * x5662 - x54 * x6608 - x54 * x8402 - x54 * x9081 +
           x5653 * x619 + x5662 * x619 + x619 * x6608 + x619 * x8402 +
           x619 * x9081 + x9867;
  J[150] = -sc[33] * x5791 + x219 * x2615 + x219 * x5653 + x219 * x5662 +
           x219 * x6608 + x219 * x8402 + x219 * x9081 - x2615 * x596 -
           106000000.0 * x35 * x602 * exp(-1.41 * tc[0]) - x5653 * x596 -
           x5662 * x596 - x596 * x6608 - x596 * x8402 - x596 * x9081 + x9867;
  J[189] = -sc[33] * x6738 - x157 * x2615 - x157 * x5653 - x157 * x5662 -
           x157 * x6608 - x157 * x8402 - x157 * x9081 + x2615 * x633 +
           x5653 * x633 + x5662 * x633 - 132000000.0 * x602 * exp(x1920) +
           x633 * x6608 + x633 * x8402 + x633 * x9081 + x9867;
  J[228] = x181 * x2615 + x181 * x5653 + x181 * x5662 + x181 * x6608 +
           x181 * x8402 + x181 * x9081 + x3361 - 106000000.0 * x5580 * x5591 -
           3900000.0 * x5604 -
           2110000.0 * x602 * exp(241.54399958626499 * invT) -
           2110000.0 * x6833 - x8461 - 1690000.0 * x9073 + x9867;
  J[267] = x10038;
  J[306] = -90600000.0 * sc[14] * x8288 - 90600000.0 * sc[14] * x8292 -
           792000000.0 * sc[4] * x1922 - 792000000.0 * sc[4] * x1925 -
           23400000.0 * sc[9] * x5603 - 23400000.0 * sc[9] * x5607 -
           636000000.0 * x5580 * x5591 - 636000000.0 * x5580 -
           636000000.0 * x5583 - 636000000.0 * x5586 - 12660000.0 * x6833 -
           12660000.0 * x6879 - 10140000.0 * x9073 - 10140000.0 * x9075;
  J[345] = x10039;
  J[384] = -x2615 * x641 + x2615 * x642 - x5653 * x641 + x5653 * x642 -
           x5662 * x641 + x5662 * x642 - 3900000.0 * x602 * exp(x5602) -
           x641 * x6608 - x641 * x8402 - x641 * x9081 + x642 * x6608 +
           x642 * x8402 + x642 * x9081 + x9867;
  J[423] = -sc[33] * x8557 - x231 * x2615 - x231 * x5653 - x231 * x5662 -
           x231 * x6608 - x231 * x8402 - x231 * x9081 + x2617 + x5664 - x6609 +
           x8404 + x9083 + x9884;
  J[462] = x10038;
  J[501] = -x2615 * x649 + x2617 - x5653 * x649 - x5662 * x649 + x5664 -
           x649 * x6608 - x649 * x8402 - x649 * x9081 - x6609 + x8404 + x9083 +
           x9884;
  J[540] = x10039;
  J[579] = -sc[33] * x375 - x2615 * x650 + x2615 * x668 - x5653 * x650 +
           x5653 * x668 - x5662 * x650 + x5662 * x668 -
           15100000.0 * x602 * exp(x362) - x650 * x6608 - x650 * x8402 -
           x650 * x9081 + x6608 * x668 + x668 * x8402 + x668 * x9081 + x9867;
  J[618] = x10039;
  J[657] = -x2615 * x674 + x2615 * x686 - 159000000.0 * x5580 -
           159000000.0 * x5586 - x5653 * x674 + x5653 * x686 - x5662 * x674 +
           x5662 * x686 - x6608 * x674 + x6608 * x686 - x674 * x8402 -
           x674 * x9081 + x686 * x8402 + x686 * x9081;
  J[696] = -x2615 * x297 + x2615 * x320 - x297 * x5653 - x297 * x5662 -
           x297 * x6608 - x297 * x8402 - x297 * x9081 + x320 * x5653 +
           x320 * x5662 + x320 * x6608 + x320 * x8402 + x320 * x9081 -
           212000000.0 * x5580 - 212000000.0 * x5586;
  J[735] = x10039;
  J[774] = x10039;
  J[813] = x10039;
  J[852] = x10039;
  J[891] = -45300000.0 * sc[14] * x8288 - 45300000.0 * sc[14] * x8292 -
           396000000.0 * sc[4] * x1922 - 396000000.0 * sc[4] * x1925 -
           11700000.0 * sc[9] * x5603 - 11700000.0 * sc[9] * x5607 -
           318000000.0 * x5580 * x5591 - 318000000.0 * x5580 -
           318000000.0 * x5583 - 318000000.0 * x5586 - 6330000.0 * x6833 -
           6330000.0 * x6879 - 5070000.0 * x9073 - 5070000.0 * x9075;
  J[930] = x2615 * x782 + x3361 - 106000000.0 * x5580 * x5591 -
           3900000.0 * x5604 + x5653 * x782 + x5662 * x782 + x6608 * x782 -
           2110000.0 * x6833 + x782 * x8402 + x782 * x9081 - x8461 -
           1690000.0 * x9073 + x9867;
  J[969] = x10039;
  J[1008] = x10039;
  J[1047] = x10039;
  J[1086] = x10039;
  J[1125] = x10039;
  J[1164] = x10039;
  J[1203] = x10039;
  J[1242] = x10039;
  J[1281] = -x2615 * x809 + x2615 * x99 - x5653 * x809 + x5653 * x99 -
            x5662 * x809 + x5662 * x99 - x6608 * x809 + x6608 * x99 -
            x809 * x8402 - x809 * x9081 + x8402 * x99 + x9081 * x99 + x9867;
  J[1320] = -106000000.0 * refC * x35 * exp(-1.41 * tc[0] + x1699) -
            sc[10] * x8557 - sc[14] * x375 - sc[2] * x2923 - sc[3] * x5791 -
            sc[4] * x6738 - x2615 * x881 + x2617 - x5653 * x881 - x5662 * x881 +
            x5664 - x6608 * x881 - x6609 - x8402 * x881 + x8404 - x881 * x9081 +
            x9083 + x9884;
  J[1359] = -x2615 * x469 + x2617 - x469 * x5653 - x469 * x5662 - x469 * x6608 -
            x469 * x8402 - x469 * x9081 + x5664 - x6609 + x8404 + x9083 + x9884;
  J[1398] = -x2615 * x465 + x2617 - x465 * x5653 - x465 * x5662 - x465 * x6608 -
            x465 * x8402 - x465 * x9081 + x5664 - x6609 + x8404 + x9083 + x9884;
  J[1437] = -x2615 * x537 + x2615 * x540 - x537 * x5653 - x537 * x5662 -
            x537 * x6608 - x537 * x8402 - x537 * x9081 + x540 * x5653 +
            x540 * x5662 + x540 * x6608 + x540 * x8402 + x540 * x9081 + x9867;
  J[1476] = -1690000.0 * x1048 * x602 + x2615 * x957 + x3361 -
            106000000.0 * x5580 * x5591 - 3900000.0 * x5604 + x5653 * x957 +
            x5662 * x957 + x6608 * x957 - 2110000.0 * x6833 + x8402 * x957 -
            x8461 - 1690000.0 * x9073 + x9081 * x957 + x9867;
  J[34] = -38500.0 * x9229 - 38500.0 * x9234;
  J[73] = -x279 * x9260 + x9262;
  J[112] = -38000000.0 * sc[34] * x2884 - 38000000.0 * sc[34] * x2886 -
           2100000000.0 * sc[34] * exp(x10040) +
           2100000000.0 * sc[35] * x10043 - x54 * x9260 + x619 * x9260;
  J[151] = x219 * x9260 - x596 * x9260;
  J[190] = -x157 * x9260 + x633 * x9260;
  J[229] = x181 * x9260 - 55000.0 * x9234;
  J[268] = x9386;
  J[307] = -330000.0 * x9229 - x9427;
  J[346] = x9438;
  J[385] = -x641 * x9260 + x642 * x9260;
  J[424] = -x231 * x9260 + x9262;
  J[463] = x9386;
  J[502] = -x649 * x9260 + x9262;
  J[541] = x9438;
  J[580] = -x650 * x9260 + x668 * x9260;
  J[619] = x9438;
  J[658] = -sc[34] * x467 - x674 * x9260 + x686 * x9260;
  J[697] = -x297 * x9260 + x320 * x9260;
  J[736] = x9438;
  J[775] = x9438;
  J[814] = x9438;
  J[853] = x9438;
  J[892] = -165000.0 * x9229 - 165000.0 * x9234;
  J[931] = -55000.0 * x602 * x9227 + x782 * x9260 - 55000.0 * x9234;
  J[970] = x9438;
  J[1009] = x9438;
  J[1048] = x9438;
  J[1087] = x9438;
  J[1126] = x9438;
  J[1165] = x9438;
  J[1204] = x9438;
  J[1243] = x9438;
  J[1282] = -x809 * x9260 + x9260 * x99;
  J[1321] = -x881 * x9260 + x9262;
  J[1360] = -sc[16] * x467 - 38000000.0 * sc[2] * x2884 -
            38000000.0 * sc[2] * x2886 - 2100000000.0 * sc[2] * exp(x10040) -
            x469 * x9260 + x9262;
  J[1399] = 2100000000.0 * sc[2] * x10043 - x465 * x9260 + x9262;
  J[1438] = -x537 * x9260 + x540 * x9260;
  J[1477] = -55000.0 * x9234 + x9260 * x957;
  J[35] = 0;
  J[74] = 0;
  J[113] = 2100000000.0 * sc[34] * exp(x10040) -
           2100000000.0 * sc[35] * x10043 - 310000000000.0 * sc[35] * x233 -
           310000000000.0 * sc[35] * x2881 - x238;
  J[152] = -sc[35] * x5780;
  J[191] = -sc[35] * x6677 + sc[36] * x5843;
  J[230] = 0;
  J[269] = sc[36] * x3473;
  J[308] = sc[36] * x6927;
  J[347] = 0;
  J[386] = 0;
  J[425] = 0;
  J[464] = 0;
  J[503] = 0;
  J[542] = 0;
  J[581] = 0;
  J[620] = 0;
  J[659] = 0;
  J[698] = 0;
  J[737] = 0;
  J[776] = 0;
  J[815] = 0;
  J[854] = 0;
  J[893] = 0;
  J[932] = 0;
  J[971] = 0;
  J[1010] = 0;
  J[1049] = 0;
  J[1088] = 0;
  J[1127] = 0;
  J[1166] = 0;
  J[1205] = 0;
  J[1244] = 0;
  J[1283] = 0;
  J[1322] = 0;
  J[1361] = 2100000000.0 * sc[2] * exp(x10040);
  J[1400] = -2100000000.0 * sc[2] * x10043 - 310000000000.0 * sc[2] * x233 -
            310000000000.0 * sc[2] * x2881 - sc[3] * x5780 - sc[4] * x6677 -
            x5510;
  J[1439] = sc[4] * x5843 + sc[6] * x3473 + sc[7] * x6927;
  J[1478] = 0;
  J[36] = 2660000000000.0 * sc[36] * x1696 + 2660000000000.0 * sc[36] * x1701 -
          5810000.0 * x2524 - 5810000.0 * x2529 - 1400000000.0 * x5596 -
          1400000000.0 * x5598 - 1400000.0 * x6505 - 1400000.0 * x7861 -
          217000000.0 * x9239 + 217000000.0 * x9243;
  J[75] = sc[16] * x1714 + sc[17] * x1726 + x10049 + x1722 * x279 -
          x2668 * x279 - x2689 - x279 * x5656 - x279 * x8030 + x5658 + x8032;
  J[114] = -16200000.0 * sc[36] * x592 + x10048 + x1722 * x54 - x1722 * x619 +
           x238 - x54 * x5656 - x54 * x8030 + x5656 * x619 + x619 * x8030 +
           x6636;
  J[153] = sc[35] * x5780 - sc[36] * x5785 + x10048 - x1722 * x219 +
           x1722 * x596 + x219 * x2668 + x219 * x5656 + x219 * x8030 -
           x2668 * x596 - x5656 * x596 - x596 * x8030;
  J[192] = sc[35] * x6677 + x10048 + x157 * x1722 - x157 * x5656 -
           x157 * x8030 - x1722 * x633 + x5656 * x633 + x633 * x8030 + x6735;
  J[231] = x10048 - x1722 * x181 + x1757 + x181 * x2668 + x181 * x5656 +
           x181 * x8030 - 8300000.0 * x2524 - 2000000000.0 * x5598 -
           2000000.0 * x6505;
  J[270] = -sc[36] * x3473 + x3607;
  J[309] = 22800000000000.0 * sc[36] * x1696 +
           22800000000000.0 * sc[36] * x1701 - sc[36] * x6927 -
           49800000.0 * x2524 - 49800000.0 * x2529 - 12000000000.0 * x5596 -
           12000000000.0 * x5598 - 12000000.0 * x6505 - 12000000.0 * x7861 -
           1860000000.0 * x9239 + 1860000000.0 * x9243;
  J[348] = x3608;
  J[387] = -sc[36] * x8117 + x10048 + x1722 * x641 - x1722 * x642 -
           x2668 * x641 + x2668 * x642 - x5656 * x641 + x5656 * x642 -
           x641 * x8030 + x642 * x8030;
  J[426] = x10049 + x1722 * x231 - x231 * x2668 - x231 * x5656 - x231 * x8030 -
           x2689 + x5658 + x8032;
  J[465] = x3607;
  J[504] = x10049 + x1722 * x649 - x2668 * x649 - x2689 - x5656 * x649 + x5658 -
           x649 * x8030 + x8032;
  J[543] = x3608;
  J[582] = x10048 + x1722 * x650 - x1722 * x668 - x2668 * x650 + x2668 * x668 -
           x5656 * x650 + x5656 * x668 - x650 * x8030 + x668 * x8030;
  J[621] = x3608;
  J[660] = 310000000.0 * refCinv * sc[32] * x35 * x9241 + sc[1] * x1714 +
           x1722 * x674 - x1722 * x686 + x2522 - x5656 * x674 + x5656 * x686 -
           2000000000.0 * x602 * exp(x5593) - x674 * x8030 + x686 * x8030 -
           465000000.0 * x9239 + 465000000.0 * x9243;
  J[699] = sc[1] * x1726 + x1722 * x297 - x1722 * x320 - x2668 * x297 +
           x2668 * x320 - x297 * x5656 - x297 * x8030 + x320 * x5656 +
           x320 * x8030 - 2000000.0 * x602 * exp(x370) - 620000000.0 * x9239 +
           620000000.0 * x9243;
  J[738] = x3608;
  J[777] = x3608;
  J[816] = x3608;
  J[855] = x3608;
  J[894] = 11400000000000.0 * sc[36] * x1696 +
           11400000000000.0 * sc[36] * x1701 - 24900000.0 * x2524 -
           24900000.0 * x2529 - 6000000000.0 * x5596 - 6000000000.0 * x5598 +
           x8206 - 930000000.0 * x9239 + 930000000.0 * x9243;
  J[933] = x10048 - x1722 * x782 + x1757 - 8300000.0 * x2524 + x2668 * x782 -
           2000000000.0 * x5598 + x5656 * x782 - 2000000.0 * x6505 +
           x782 * x8030;
  J[972] = x3608;
  J[1011] = x3608;
  J[1050] = x3608;
  J[1089] = x3608;
  J[1128] = x3608;
  J[1167] = x3608;
  J[1206] = x3608;
  J[1245] = x3608;
  J[1284] = -20000000.0 * sc[36] + x10048 + x1722 * x809 - x1722 * x99 -
            x2668 * x809 + x2668 * x99 + 310000000.0 * x35 * x423 * x9241 -
            x5656 * x809 + x5656 * x99 - x8030 * x809 + x8030 * x99;
  J[1323] = x10049 + x1722 * x881 - x2668 * x881 - x2689 - x5656 * x881 +
            x5658 - x8030 * x881 + x8032;
  J[1362] = x10049 + x1722 * x469 - x2668 * x469 - x2689 - x469 * x5656 -
            x469 * x8030 + x5658 + x8032;
  J[1401] = sc[3] * x5780 + sc[4] * x6677 + x10049 + x1722 * x465 -
            x2668 * x465 - x2689 - x465 * x5656 - x465 * x8030 + x5510 + x5658 +
            x8032;
  J[1440] = -16200000.0 * sc[2] * x592 - 20000000.0 * sc[32] - sc[3] * x5785 -
            sc[6] * x3473 - sc[7] * x6927 - sc[9] * x8117 + x10048 +
            x1722 * x537 - x1722 * x540 + x247 -
            310000000.0 * x35 * exp(-27198.860786745099 * invT) - x537 * x5656 -
            x537 * x8030 + x540 * x5656 + x540 * x8030 +
            3800000000000.0 * x602 * exp(x1694);
  J[1479] = x10048 - x1722 * x957 + x1757 - 8300000.0 * x2524 + x2668 * x957 -
            2000000000.0 * x5598 + x5656 * x957 - 2000000.0 * x6505 +
            x8030 * x957;
  J[37] = x8000 + 1183000.0 * x9073 + 1183000.0 * x9075;
  J[76] = x279 * x9081 + x8001;
  J[115] = -96000000.0 * sc[37] + x54 * x9081 - x619 * x9081 + x8000;
  J[154] = -36000000.0 * sc[37] - x219 * x9081 + x596 * x9081 + x8000;
  J[193] =
    sc[14] * x3225 - 60000000.0 * sc[37] + x157 * x9081 - x633 * x9081 + x8000;
  J[232] = -x181 * x9081 - x7422 + x8000 + 1690000.0 * x9073;
  J[271] = x8000 + 3380000.0 * x9073 + 3380000.0 * x9075;
  J[310] = 18000.0 * sc[9] * x6750 * x7480 + x8000 + 10140000.0 * x9073 +
           10140000.0 * x9075;
  J[349] = x7999;
  J[388] = sc[10] * x14 * x8012 + 154820.0 * ((sc[14]) * (sc[14])) * x8113 +
           sc[14] * x6040 + 2092.0 * sc[15] * x6750 * x8123 + sc[15] * x7009 +
           18000.0 * sc[7] * x6750 * x7480 + x641 * x9081 - x642 * x9081 +
           x8000;
  J[427] =
    -1000000.0 * sc[37] * x8541 + sc[9] * x14 * x8012 + x231 * x9081 + x8001;
  J[466] = x8000 + 3380000.0 * x9073 + 3380000.0 * x9075;
  J[505] = x649 * x9081 + x8001;
  J[544] = 2092.0 * refCinv * sc[15] * sc[9] * x8123 + x7541 + x7999;
  J[583] = 309640.0 * sc[14] * sc[9] * x8113 + sc[33] * x375 + sc[4] * x3225 +
           sc[9] * x6040 + x650 * x9081 - x668 * x9081 + x8000 +
           2000000.0 * x8641;
  J[622] = 2092.0 * sc[9] * x6750 * x8123 + sc[9] * x7009 + x7999;
  J[661] = x674 * x9081 - x686 * x9081 + x8000;
  J[700] = x297 * x9081 - x320 * x9081 + x8000;
  J[739] = x7999;
  J[778] = x7999;
  J[817] = x7999;
  J[856] = x7999;
  J[895] = x8000 + 5070000.0 * x9073 + 5070000.0 * x9075;
  J[934] = -x782 * x9081 + x8000 + 1690000.0 * x9073;
  J[973] = x7999;
  J[1012] = x7999;
  J[1051] = x7999;
  J[1090] = x7999;
  J[1129] = x7999;
  J[1168] = x7999;
  J[1207] = x7999;
  J[1246] = x7999;
  J[1285] = x8000 + x809 * x9081 - x9081 * x99;
  J[1324] = sc[14] * x375 + x8001 + x881 * x9081;
  J[1363] = x469 * x9081 + x8001;
  J[1402] = x465 * x9081 + x8001;
  J[1441] = x537 * x9081 - x540 * x9081 + x8000;
  J[1480] = -refC * x14 * x8009 - 1000000.0 * sc[10] * x8541 -
            96000000.0 * sc[2] -
            309640.0 * sc[37] * exp(30.696216614087898 * invT) -
            4184.0 * sc[37] * exp(1806.0446135731399 * invT) -
            36000000.0 * sc[3] - 60000000.0 * sc[4] + 1690000.0 * x1048 * x602 -
            x7583 + x8000 + 1690000.0 * x9073 - x9081 * x957;

  for (int k = 0; k < 38; k++) {
    J[1482 + k] = (wdot_pert1[k] - wdot[k]) / (pertT);
  }
  amrex::Real c_R[38], dcRdT[38], e_RT[38];
  amrex::Real* eh_RT;
  if (consP == 1) {
    cp_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    speciesInternalEnergy(e_RT, tc);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 38; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[1482 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 38; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 38; ++m) {
      dehmixdc += eh_RT[m] * J[k * 39 + m];
    }
    J[k * 39 + 38] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[1520] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
#else
  amrex::Abort();
#endif
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT(
  amrex::Real* J,
  const amrex::Real* sc,
  const amrex::Real* Tp,
  const int* consP)
{
  amrex::Real c[38];

  for (int k = 0; k < 38; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian(J, c, *Tp, *consP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 38; k++) {
    J[1482 + k] *= 1.e-6;
    J[k * 39 + 38] *= 1.e6;
  }
}

// Transport function declarations

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENIMC(int* LENIMC)
{
  *LENIMC = 154;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENRMC(int* LENRMC)
{
  *LENRMC = 28766;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNO(int* NO)
{
  *NO = 4;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKK(int* KK)
{
  *KK = 38;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLITE(int* NLITE)
{
  *NLITE = 2;
}

// Patm in ergs/cm3
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPATM(amrex::Real* PATM)
{
  *PATM = 0.1013250000000000E+07;
}

// the molecular weights in g/mol
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetWT(amrex::Real* WT)
{
  WT[0] = 3.99500000E+01;
  WT[1] = 2.80140000E+01;
  WT[2] = 1.00800000E+00;
  WT[3] = 1.59990000E+01;
  WT[4] = 1.70070000E+01;
  WT[5] = 3.30060000E+01;
  WT[6] = 2.01600000E+00;
  WT[7] = 1.80150000E+01;
  WT[8] = 3.40140000E+01;
  WT[9] = 3.19980000E+01;
  WT[10] = 1.50350000E+01;
  WT[11] = 1.60430000E+01;
  WT[12] = 2.90180000E+01;
  WT[13] = 3.00260000E+01;
  WT[14] = 3.10340000E+01;
  WT[15] = 3.20420000E+01;
  WT[16] = 2.80100000E+01;
  WT[17] = 4.40090000E+01;
  WT[18] = 2.60380000E+01;
  WT[19] = 2.70460000E+01;
  WT[20] = 2.80540000E+01;
  WT[21] = 2.90620000E+01;
  WT[22] = 3.00700000E+01;
  WT[23] = 4.10290000E+01;
  WT[24] = 4.20370000E+01;
  WT[25] = 4.30450000E+01;
  WT[26] = 4.40530000E+01;
  WT[27] = 4.00650000E+01;
  WT[28] = 4.10730000E+01;
  WT[29] = 4.20810000E+01;
  WT[30] = 4.30890000E+01;
  WT[31] = 5.61080000E+01;
  WT[32] = 1.40070000E+01;
  WT[33] = 4.60050000E+01;
  WT[34] = 4.30250000E+01;
  WT[35] = 4.30250000E+01;
  WT[36] = 4.20170000E+01;
  WT[37] = 4.70330000E+01;
}

// the lennard-jones potential well depth eps/kb in K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetEPS(amrex::Real* EPS)
{
  EPS[0] = 1.36500000E+02;
  EPS[1] = 9.75300000E+01;
  EPS[2] = 1.45000000E+02;
  EPS[3] = 8.00000000E+01;
  EPS[4] = 8.00000000E+01;
  EPS[5] = 1.07400000E+02;
  EPS[6] = 3.80000000E+01;
  EPS[7] = 5.72400000E+02;
  EPS[8] = 1.07400000E+02;
  EPS[9] = 1.07400000E+02;
  EPS[10] = 1.44000000E+02;
  EPS[11] = 1.41400000E+02;
  EPS[12] = 4.98000000E+02;
  EPS[13] = 4.98000000E+02;
  EPS[14] = 4.17000000E+02;
  EPS[15] = 4.81800000E+02;
  EPS[16] = 9.81000000E+01;
  EPS[17] = 2.44000000E+02;
  EPS[18] = 2.09000000E+02;
  EPS[19] = 2.09000000E+02;
  EPS[20] = 2.80800000E+02;
  EPS[21] = 2.52300000E+02;
  EPS[22] = 2.52300000E+02;
  EPS[23] = 1.50000000E+02;
  EPS[24] = 4.36000000E+02;
  EPS[25] = 4.36000000E+02;
  EPS[26] = 2.52000000E+02;
  EPS[27] = 2.52000000E+02;
  EPS[28] = 2.66800000E+02;
  EPS[29] = 2.66800000E+02;
  EPS[30] = 2.66800000E+02;
  EPS[31] = 3.57000000E+02;
  EPS[32] = 7.14000000E+01;
  EPS[33] = 2.00000000E+02;
  EPS[34] = 2.32400000E+02;
  EPS[35] = 2.32400000E+02;
  EPS[36] = 2.32400000E+02;
  EPS[37] = 4.81800000E+02;
}

// the lennard-jones collision diameter in Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetSIG(amrex::Real* SIG)
{
  SIG[0] = 3.33000000E+00;
  SIG[1] = 3.62100000E+00;
  SIG[2] = 2.05000000E+00;
  SIG[3] = 2.75000000E+00;
  SIG[4] = 2.75000000E+00;
  SIG[5] = 3.45800000E+00;
  SIG[6] = 2.92000000E+00;
  SIG[7] = 2.60500000E+00;
  SIG[8] = 3.45800000E+00;
  SIG[9] = 3.45800000E+00;
  SIG[10] = 3.80000000E+00;
  SIG[11] = 3.74600000E+00;
  SIG[12] = 3.59000000E+00;
  SIG[13] = 3.59000000E+00;
  SIG[14] = 3.69000000E+00;
  SIG[15] = 3.62600000E+00;
  SIG[16] = 3.65000000E+00;
  SIG[17] = 3.76300000E+00;
  SIG[18] = 4.10000000E+00;
  SIG[19] = 4.10000000E+00;
  SIG[20] = 3.97100000E+00;
  SIG[21] = 4.30200000E+00;
  SIG[22] = 4.30200000E+00;
  SIG[23] = 2.50000000E+00;
  SIG[24] = 3.97000000E+00;
  SIG[25] = 3.97000000E+00;
  SIG[26] = 4.76000000E+00;
  SIG[27] = 4.76000000E+00;
  SIG[28] = 4.98200000E+00;
  SIG[29] = 4.98200000E+00;
  SIG[30] = 4.98200000E+00;
  SIG[31] = 5.17600000E+00;
  SIG[32] = 3.29800000E+00;
  SIG[33] = 3.50000000E+00;
  SIG[34] = 3.82800000E+00;
  SIG[35] = 3.82800000E+00;
  SIG[36] = 3.82800000E+00;
  SIG[37] = 3.62600000E+00;
}

// the dipole moment in Debye
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetDIP(amrex::Real* DIP)
{
  DIP[0] = 0.00000000E+00;
  DIP[1] = 0.00000000E+00;
  DIP[2] = 0.00000000E+00;
  DIP[3] = 0.00000000E+00;
  DIP[4] = 0.00000000E+00;
  DIP[5] = 0.00000000E+00;
  DIP[6] = 0.00000000E+00;
  DIP[7] = 1.84400000E+00;
  DIP[8] = 0.00000000E+00;
  DIP[9] = 0.00000000E+00;
  DIP[10] = 0.00000000E+00;
  DIP[11] = 0.00000000E+00;
  DIP[12] = 0.00000000E+00;
  DIP[13] = 0.00000000E+00;
  DIP[14] = 1.70000000E+00;
  DIP[15] = 0.00000000E+00;
  DIP[16] = 0.00000000E+00;
  DIP[17] = 0.00000000E+00;
  DIP[18] = 0.00000000E+00;
  DIP[19] = 0.00000000E+00;
  DIP[20] = 0.00000000E+00;
  DIP[21] = 0.00000000E+00;
  DIP[22] = 0.00000000E+00;
  DIP[23] = 0.00000000E+00;
  DIP[24] = 0.00000000E+00;
  DIP[25] = 0.00000000E+00;
  DIP[26] = 0.00000000E+00;
  DIP[27] = 0.00000000E+00;
  DIP[28] = 0.00000000E+00;
  DIP[29] = 0.00000000E+00;
  DIP[30] = 0.00000000E+00;
  DIP[31] = 0.00000000E+00;
  DIP[32] = 0.00000000E+00;
  DIP[33] = 0.00000000E+00;
  DIP[34] = 0.00000000E+00;
  DIP[35] = 0.00000000E+00;
  DIP[36] = 0.00000000E+00;
  DIP[37] = 0.00000000E+00;
}

// the polarizability in cubic Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPOL(amrex::Real* POL)
{
  POL[0] = 0.00000000E+00;
  POL[1] = 1.76000000E+00;
  POL[2] = 0.00000000E+00;
  POL[3] = 0.00000000E+00;
  POL[4] = 0.00000000E+00;
  POL[5] = 0.00000000E+00;
  POL[6] = 7.90000000E-01;
  POL[7] = 0.00000000E+00;
  POL[8] = 0.00000000E+00;
  POL[9] = 1.60000000E+00;
  POL[10] = 0.00000000E+00;
  POL[11] = 2.60000000E+00;
  POL[12] = 0.00000000E+00;
  POL[13] = 0.00000000E+00;
  POL[14] = 0.00000000E+00;
  POL[15] = 0.00000000E+00;
  POL[16] = 1.95000000E+00;
  POL[17] = 2.65000000E+00;
  POL[18] = 0.00000000E+00;
  POL[19] = 0.00000000E+00;
  POL[20] = 0.00000000E+00;
  POL[21] = 0.00000000E+00;
  POL[22] = 0.00000000E+00;
  POL[23] = 0.00000000E+00;
  POL[24] = 0.00000000E+00;
  POL[25] = 0.00000000E+00;
  POL[26] = 0.00000000E+00;
  POL[27] = 0.00000000E+00;
  POL[28] = 0.00000000E+00;
  POL[29] = 0.00000000E+00;
  POL[30] = 0.00000000E+00;
  POL[31] = 0.00000000E+00;
  POL[32] = 0.00000000E+00;
  POL[33] = 0.00000000E+00;
  POL[34] = 0.00000000E+00;
  POL[35] = 0.00000000E+00;
  POL[36] = 0.00000000E+00;
  POL[37] = 0.00000000E+00;
}

// the rotational relaxation collision number at 298 K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetZROT(amrex::Real* ZROT)
{
  ZROT[0] = 0.00000000E+00;
  ZROT[1] = 4.00000000E+00;
  ZROT[2] = 0.00000000E+00;
  ZROT[3] = 0.00000000E+00;
  ZROT[4] = 0.00000000E+00;
  ZROT[5] = 1.00000000E+00;
  ZROT[6] = 2.80000000E+02;
  ZROT[7] = 4.00000000E+00;
  ZROT[8] = 3.80000000E+00;
  ZROT[9] = 3.80000000E+00;
  ZROT[10] = 0.00000000E+00;
  ZROT[11] = 1.30000000E+01;
  ZROT[12] = 0.00000000E+00;
  ZROT[13] = 2.00000000E+00;
  ZROT[14] = 2.00000000E+00;
  ZROT[15] = 1.00000000E+00;
  ZROT[16] = 1.80000000E+00;
  ZROT[17] = 2.10000000E+00;
  ZROT[18] = 2.50000000E+00;
  ZROT[19] = 1.00000000E+00;
  ZROT[20] = 1.50000000E+00;
  ZROT[21] = 1.50000000E+00;
  ZROT[22] = 1.50000000E+00;
  ZROT[23] = 1.00000000E+00;
  ZROT[24] = 2.00000000E+00;
  ZROT[25] = 2.00000000E+00;
  ZROT[26] = 1.00000000E+00;
  ZROT[27] = 1.00000000E+00;
  ZROT[28] = 1.00000000E+00;
  ZROT[29] = 1.00000000E+00;
  ZROT[30] = 1.00000000E+00;
  ZROT[31] = 1.00000000E+00;
  ZROT[32] = 0.00000000E+00;
  ZROT[33] = 1.00000000E+00;
  ZROT[34] = 1.00000000E+00;
  ZROT[35] = 1.00000000E+00;
  ZROT[36] = 1.00000000E+00;
  ZROT[37] = 1.00000000E+00;
}

// 0: monoatomic, 1: linear, 2: nonlinear
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLIN(int* NLIN)
{
  NLIN[0] = 0;
  NLIN[1] = 1;
  NLIN[2] = 0;
  NLIN[3] = 0;
  NLIN[4] = 1;
  NLIN[5] = 2;
  NLIN[6] = 1;
  NLIN[7] = 2;
  NLIN[8] = 2;
  NLIN[9] = 1;
  NLIN[10] = 1;
  NLIN[11] = 2;
  NLIN[12] = 2;
  NLIN[13] = 2;
  NLIN[14] = 2;
  NLIN[15] = 2;
  NLIN[16] = 1;
  NLIN[17] = 1;
  NLIN[18] = 1;
  NLIN[19] = 2;
  NLIN[20] = 2;
  NLIN[21] = 2;
  NLIN[22] = 2;
  NLIN[23] = 2;
  NLIN[24] = 2;
  NLIN[25] = 2;
  NLIN[26] = 1;
  NLIN[27] = 1;
  NLIN[28] = 2;
  NLIN[29] = 2;
  NLIN[30] = 2;
  NLIN[31] = 2;
  NLIN[32] = 0;
  NLIN[33] = 2;
  NLIN[34] = 2;
  NLIN[35] = 2;
  NLIN[36] = 1;
  NLIN[37] = 2;
}

// Poly fits for the viscosities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFETA(amrex::Real* COFETA)
{
  COFETA[0] = -1.90422662E+01;
  COFETA[1] = 3.47025711E+00;
  COFETA[2] = -3.75102111E-01;
  COFETA[3] = 1.66086076E-02;
  COFETA[4] = -1.65695492E+01;
  COFETA[5] = 2.39056562E+00;
  COFETA[6] = -2.34558144E-01;
  COFETA[7] = 1.05024037E-02;
  COFETA[8] = -2.04078253E+01;
  COFETA[9] = 3.65436395E+00;
  COFETA[10] = -3.98339635E-01;
  COFETA[11] = 1.75883009E-02;
  COFETA[12] = -1.50926370E+01;
  COFETA[13] = 1.92606504E+00;
  COFETA[14] = -1.73487476E-01;
  COFETA[15] = 7.82572931E-03;
  COFETA[16] = -1.50620876E+01;
  COFETA[17] = 1.92606504E+00;
  COFETA[18] = -1.73487476E-01;
  COFETA[19] = 7.82572931E-03;
  COFETA[20] = -1.71463359E+01;
  COFETA[21] = 2.68036374E+00;
  COFETA[22] = -2.72570227E-01;
  COFETA[23] = 1.21650964E-02;
  COFETA[24] = -1.38347555E+01;
  COFETA[25] = 1.00106621E+00;
  COFETA[26] = -4.98105694E-02;
  COFETA[27] = 2.31450475E-03;
  COFETA[28] = -1.05420930E+01;
  COFETA[29] = -1.37777266E+00;
  COFETA[30] = 4.20502561E-01;
  COFETA[31] = -2.40627344E-02;
  COFETA[32] = -1.71312945E+01;
  COFETA[33] = 2.68036374E+00;
  COFETA[34] = -2.72570227E-01;
  COFETA[35] = 1.21650964E-02;
  COFETA[36] = -1.71618439E+01;
  COFETA[37] = 2.68036374E+00;
  COFETA[38] = -2.72570227E-01;
  COFETA[39] = 1.21650964E-02;
  COFETA[40] = -2.02316522E+01;
  COFETA[41] = 3.63241793E+00;
  COFETA[42] = -3.95581049E-01;
  COFETA[43] = 1.74725495E-02;
  COFETA[44] = -2.00094678E+01;
  COFETA[45] = 3.57220167E+00;
  COFETA[46] = -3.87936446E-01;
  COFETA[47] = 1.71483254E-02;
  COFETA[48] = -1.98501400E+01;
  COFETA[49] = 2.69480162E+00;
  COFETA[50] = -1.65880845E-01;
  COFETA[51] = 3.14504769E-03;
  COFETA[52] = -1.98330663E+01;
  COFETA[53] = 2.69480162E+00;
  COFETA[54] = -1.65880845E-01;
  COFETA[55] = 3.14504769E-03;
  COFETA[56] = -1.99945964E+01;
  COFETA[57] = 2.86923161E+00;
  COFETA[58] = -2.03325438E-01;
  COFETA[59] = 5.39055928E-03;
  COFETA[60] = -2.05644597E+01;
  COFETA[61] = 3.03946431E+00;
  COFETA[62] = -2.16994867E-01;
  COFETA[63] = 5.61394012E-03;
  COFETA[64] = -1.66188439E+01;
  COFETA[65] = 2.40307799E+00;
  COFETA[66] = -2.36167638E-01;
  COFETA[67] = 1.05714061E-02;
  COFETA[68] = -2.40015087E+01;
  COFETA[69] = 5.14359547E+00;
  COFETA[70] = -5.74269731E-01;
  COFETA[71] = 2.44937679E-02;
  COFETA[72] = -2.33666497E+01;
  COFETA[73] = 4.80350223E+00;
  COFETA[74] = -5.38341336E-01;
  COFETA[75] = 2.32747213E-02;
  COFETA[76] = -2.33476586E+01;
  COFETA[77] = 4.80350223E+00;
  COFETA[78] = -5.38341336E-01;
  COFETA[79] = 2.32747213E-02;
  COFETA[80] = -2.50655480E+01;
  COFETA[81] = 5.33982977E+00;
  COFETA[82] = -5.89982992E-01;
  COFETA[83] = 2.47780650E-02;
  COFETA[84] = -2.46581444E+01;
  COFETA[85] = 5.19497183E+00;
  COFETA[86] = -5.78827339E-01;
  COFETA[87] = 2.46050921E-02;
  COFETA[88] = -2.46410962E+01;
  COFETA[89] = 5.19497183E+00;
  COFETA[90] = -5.78827339E-01;
  COFETA[91] = 2.46050921E-02;
  COFETA[92] = -1.92183918E+01;
  COFETA[93] = 3.75164499E+00;
  COFETA[94] = -4.10390993E-01;
  COFETA[95] = 1.80861665E-02;
  COFETA[96] = -2.23395728E+01;
  COFETA[97] = 3.86433912E+00;
  COFETA[98] = -3.41553983E-01;
  COFETA[99] = 1.17083447E-02;
  COFETA[100] = -2.23277248E+01;
  COFETA[101] = 3.86433912E+00;
  COFETA[102] = -3.41553983E-01;
  COFETA[103] = 1.17083447E-02;
  COFETA[104] = -2.46420702E+01;
  COFETA[105] = 5.19146996E+00;
  COFETA[106] = -5.78430696E-01;
  COFETA[107] = 2.45902122E-02;
  COFETA[108] = -2.46895153E+01;
  COFETA[109] = 5.19146996E+00;
  COFETA[110] = -5.78430696E-01;
  COFETA[111] = 2.45902122E-02;
  COFETA[112] = -2.51527894E+01;
  COFETA[113] = 5.30723075E+00;
  COFETA[114] = -5.89742369E-01;
  COFETA[115] = 2.49294033E-02;
  COFETA[116] = -2.51406667E+01;
  COFETA[117] = 5.30723075E+00;
  COFETA[118] = -5.89742369E-01;
  COFETA[119] = 2.49294033E-02;
  COFETA[120] = -2.51288310E+01;
  COFETA[121] = 5.30723075E+00;
  COFETA[122] = -5.89742369E-01;
  COFETA[123] = 2.49294033E-02;
  COFETA[124] = -2.48316268E+01;
  COFETA[125] = 4.94595777E+00;
  COFETA[126] = -5.12278955E-01;
  COFETA[127] = 2.03286378E-02;
  COFETA[128] = -1.49299043E+01;
  COFETA[129] = 1.69625877E+00;
  COFETA[130] = -1.42936462E-01;
  COFETA[131] = 6.47223426E-03;
  COFETA[132] = -2.24069409E+01;
  COFETA[133] = 4.68007883E+00;
  COFETA[134] = -5.23982071E-01;
  COFETA[135] = 2.27205629E-02;
  COFETA[136] = -2.38129571E+01;
  COFETA[137] = 5.08149651E+00;
  COFETA[138] = -5.69446240E-01;
  COFETA[139] = 2.44183705E-02;
  COFETA[140] = -2.38129571E+01;
  COFETA[141] = 5.08149651E+00;
  COFETA[142] = -5.69446240E-01;
  COFETA[143] = 2.44183705E-02;
  COFETA[144] = -2.38248106E+01;
  COFETA[145] = 5.08149651E+00;
  COFETA[146] = -5.69446240E-01;
  COFETA[147] = 2.44183705E-02;
  COFETA[148] = -2.03725587E+01;
  COFETA[149] = 3.03946431E+00;
  COFETA[150] = -2.16994867E-01;
  COFETA[151] = 5.61394012E-03;
}

// Poly fits for the conductivities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFLAM(amrex::Real* COFLAM)
{
  COFLAM[0] = -3.17204599E+00;
  COFLAM[1] = 3.47025711E+00;
  COFLAM[2] = -3.75102111E-01;
  COFLAM[3] = 1.66086076E-02;
  COFLAM[4] = 1.29305954E+01;
  COFLAM[5] = -3.52816965E+00;
  COFLAM[6] = 6.45498434E-01;
  COFLAM[7] = -3.19375023E-02;
  COFLAM[8] = -8.57944636E-01;
  COFLAM[9] = 3.65436395E+00;
  COFLAM[10] = -3.98339635E-01;
  COFLAM[11] = 1.75883009E-02;
  COFLAM[12] = 1.69268564E+00;
  COFLAM[13] = 1.92606504E+00;
  COFLAM[14] = -1.73487476E-01;
  COFLAM[15] = 7.82572931E-03;
  COFLAM[16] = 1.50119775E+01;
  COFLAM[17] = -3.63267617E+00;
  COFLAM[18] = 5.92838774E-01;
  COFLAM[19] = -2.62920291E-02;
  COFLAM[20] = -1.12959874E+00;
  COFLAM[21] = 2.34014328E+00;
  COFLAM[22] = -1.63245076E-01;
  COFLAM[23] = 5.80319843E-03;
  COFLAM[24] = 9.24082480E+00;
  COFLAM[25] = -4.69567526E-01;
  COFLAM[26] = 1.15980102E-01;
  COFLAM[27] = -2.61033156E-03;
  COFLAM[28] = 2.33729836E+01;
  COFLAM[29] = -8.96536178E+00;
  COFLAM[30] = 1.52828630E+00;
  COFLAM[31] = -7.58551616E-02;
  COFLAM[32] = 8.84006318E-01;
  COFLAM[33] = 1.31525455E+00;
  COFLAM[34] = 1.91773906E-02;
  COFLAM[35] = -4.41642314E-03;
  COFLAM[36] = -1.93717634E+00;
  COFLAM[37] = 2.89110257E+00;
  COFLAM[38] = -2.71096988E-01;
  COFLAM[39] = 1.15344939E-02;
  COFLAM[40] = 1.39937895E+01;
  COFLAM[41] = -4.64256403E+00;
  COFLAM[42] = 9.07728510E-01;
  COFLAM[43] = -4.77274380E-02;
  COFLAM[44] = 1.33091614E+01;
  COFLAM[45] = -4.96140250E+00;
  COFLAM[46] = 1.03295495E+00;
  COFLAM[47] = -5.63420011E-02;
  COFLAM[48] = 6.30244184E+00;
  COFLAM[49] = -2.22810729E+00;
  COFLAM[50] = 6.37340380E-01;
  COFLAM[51] = -3.81055943E-02;
  COFLAM[52] = 5.39305623E+00;
  COFLAM[53] = -2.39312259E+00;
  COFLAM[54] = 7.39585006E-01;
  COFLAM[55] = -4.58435469E-02;
  COFLAM[56] = -1.10587028E+01;
  COFLAM[57] = 4.78793775E+00;
  COFLAM[58] = -2.82998801E-01;
  COFLAM[59] = 2.34922792E-03;
  COFLAM[60] = -1.83490841E+00;
  COFLAM[61] = 5.55822580E-01;
  COFLAM[62] = 3.51309961E-01;
  COFLAM[63] = -2.85527493E-02;
  COFLAM[64] = 1.18777275E+01;
  COFLAM[65] = -3.15463597E+00;
  COFLAM[66] = 6.01972754E-01;
  COFLAM[67] = -3.03211015E-02;
  COFLAM[68] = -1.13649201E+01;
  COFLAM[69] = 5.88177354E+00;
  COFLAM[70] = -5.68651792E-01;
  COFLAM[71] = 2.03561484E-02;
  COFLAM[72] = -7.70164041E+00;
  COFLAM[73] = 4.56884430E+00;
  COFLAM[74] = -4.04747578E-01;
  COFLAM[75] = 1.40841066E-02;
  COFLAM[76] = -9.10383958E+00;
  COFLAM[77] = 4.54798776E+00;
  COFLAM[78] = -3.18114363E-01;
  COFLAM[79] = 6.59577260E-03;
  COFLAM[80] = -1.46152767E+01;
  COFLAM[81] = 6.36251222E+00;
  COFLAM[82] = -5.03831917E-01;
  COFLAM[83] = 1.26120967E-02;
  COFLAM[84] = -8.95009242E+00;
  COFLAM[85] = 4.02514973E+00;
  COFLAM[86] = -1.84063835E-01;
  COFLAM[87] = -1.94055121E-03;
  COFLAM[88] = -1.09902158E+01;
  COFLAM[89] = 4.70647555E+00;
  COFLAM[90] = -2.52272322E-01;
  COFLAM[91] = 1.75186734E-04;
  COFLAM[92] = -5.96382011E+00;
  COFLAM[93] = 4.39355990E+00;
  COFLAM[94] = -3.97598235E-01;
  COFLAM[95] = 1.39749618E-02;
  COFLAM[96] = -8.32870491E+00;
  COFLAM[97] = 3.97067241E+00;
  COFLAM[98] = -2.21252281E-01;
  COFLAM[99] = 1.47870386E-03;
  COFLAM[100] = -6.27424897E+00;
  COFLAM[101] = 2.90471284E+00;
  COFLAM[102] = -4.35144336E-02;
  COFLAM[103] = -7.77922743E-03;
  COFLAM[104] = -2.77092071E+01;
  COFLAM[105] = 1.17665995E+01;
  COFLAM[106] = -1.26344181E+00;
  COFLAM[107] = 4.79446321E-02;
  COFLAM[108] = -1.58786816E+01;
  COFLAM[109] = 7.19465933E+00;
  COFLAM[110] = -6.71633277E-01;
  COFLAM[111] = 2.23916634E-02;
  COFLAM[112] = -2.14189910E+01;
  COFLAM[113] = 9.40840962E+00;
  COFLAM[114] = -9.66247319E-01;
  COFLAM[115] = 3.55085303E-02;
  COFLAM[116] = -1.70514626E+01;
  COFLAM[117] = 7.35906672E+00;
  COFLAM[118] = -6.52820712E-01;
  COFLAM[119] = 1.99982085E-02;
  COFLAM[120] = -1.92766749E+01;
  COFLAM[121] = 8.39485888E+00;
  COFLAM[122] = -8.05424342E-01;
  COFLAM[123] = 2.74026959E-02;
  COFLAM[124] = -1.45831859E+01;
  COFLAM[125] = 5.90742404E+00;
  COFLAM[126] = -3.94364795E-01;
  COFLAM[127] = 5.56233024E-03;
  COFLAM[128] = 1.98838734E+00;
  COFLAM[129] = 1.69625877E+00;
  COFLAM[130] = -1.42936462E-01;
  COFLAM[131] = 6.47223426E-03;
  COFLAM[132] = -1.39111470E+01;
  COFLAM[133] = 7.26782640E+00;
  COFLAM[134] = -7.97501361E-01;
  COFLAM[135] = 3.25210608E-02;
  COFLAM[136] = -1.18051789E+01;
  COFLAM[137] = 6.05433413E+00;
  COFLAM[138] = -5.78395161E-01;
  COFLAM[139] = 2.02076896E-02;
  COFLAM[140] = -6.28657099E+00;
  COFLAM[141] = 3.68588787E+00;
  COFLAM[142] = -2.44665089E-01;
  COFLAM[143] = 4.69898271E-03;
  COFLAM[144] = -1.12094227E+01;
  COFLAM[145] = 5.94941207E+00;
  COFLAM[146] = -5.91419381E-01;
  COFLAM[147] = 2.18094760E-02;
  COFLAM[148] = -1.89905217E+01;
  COFLAM[149] = 8.67271919E+00;
  COFLAM[150] = -9.03524932E-01;
  COFLAM[151] = 3.48741085E-02;
}

// Poly fits for the diffusion coefficients, dim NO*KK*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFD(amrex::Real* COFD)
{
  COFD[0] = -1.72274176E+01;
  COFD[1] = 4.09361913E+00;
  COFD[2] = -3.19258125E-01;
  COFD[3] = 1.39526981E-02;
  COFD[4] = -1.59877962E+01;
  COFD[5] = 3.63340763E+00;
  COFD[6] = -2.60307961E-01;
  COFD[7] = 1.14256954E-02;
  COFD[8] = -1.54738770E+01;
  COFD[9] = 4.15765300E+00;
  COFD[10] = -3.27126237E-01;
  COFD[11] = 1.42762611E-02;
  COFD[12] = -1.49610523E+01;
  COFD[13] = 3.41988961E+00;
  COFD[14] = -2.33128386E-01;
  COFD[15] = 1.02689994E-02;
  COFD[16] = -1.49826737E+01;
  COFD[17] = 3.41988961E+00;
  COFD[18] = -2.33128386E-01;
  COFD[19] = 1.02689994E-02;
  COFD[20] = -1.62465647E+01;
  COFD[21] = 3.72612300E+00;
  COFD[22] = -2.71663673E-01;
  COFD[23] = 1.18889643E-02;
  COFD[24] = -1.23130320E+01;
  COFD[25] = 2.74418790E+00;
  COFD[26] = -1.46230156E-01;
  COFD[27] = 6.53948886E-03;
  COFD[28] = -2.12755915E+01;
  COFD[29] = 5.60381989E+00;
  COFD[30] = -4.91225459E-01;
  COFD[31] = 2.04487844E-02;
  COFD[32] = -1.62547451E+01;
  COFD[33] = 3.72612300E+00;
  COFD[34] = -2.71663673E-01;
  COFD[35] = 1.18889643E-02;
  COFD[36] = -1.62380132E+01;
  COFD[37] = 3.72612300E+00;
  COFD[38] = -2.71663673E-01;
  COFD[39] = 1.18889643E-02;
  COFD[40] = -1.72197029E+01;
  COFD[41] = 4.14993355E+00;
  COFD[42] = -3.26168062E-01;
  COFD[43] = 1.42364115E-02;
  COFD[44] = -1.71754233E+01;
  COFD[45] = 4.13131681E+00;
  COFD[46] = -3.23897559E-01;
  COFD[47] = 1.41438222E-02;
  COFD[48] = -2.14255154E+01;
  COFD[49] = 5.52240865E+00;
  COFD[50] = -4.84699537E-01;
  COFD[51] = 2.03247833E-02;
  COFD[52] = -2.14353342E+01;
  COFD[53] = 5.52240865E+00;
  COFD[54] = -4.84699537E-01;
  COFD[55] = 2.03247833E-02;
  COFD[56] = -2.10026942E+01;
  COFD[57] = 5.38326647E+00;
  COFD[58] = -4.71201048E-01;
  COFD[59] = 1.99207516E-02;
  COFD[60] = -2.13502433E+01;
  COFD[61] = 5.48617067E+00;
  COFD[62] = -4.80816776E-01;
  COFD[63] = 2.01887868E-02;
  COFD[64] = -1.60074270E+01;
  COFD[65] = 3.63723937E+00;
  COFD[66] = -2.60754222E-01;
  COFD[67] = 1.14428814E-02;
  COFD[68] = -1.93483786E+01;
  COFD[69] = 4.79506290E+00;
  COFD[70] = -4.04621659E-01;
  COFD[71] = 1.74244230E-02;
  COFD[72] = -1.87717415E+01;
  COFD[73] = 4.61078776E+00;
  COFD[74] = -3.82625667E-01;
  COFD[75] = 1.65478601E-02;
  COFD[76] = -1.87831526E+01;
  COFD[77] = 4.61078776E+00;
  COFD[78] = -3.82625667E-01;
  COFD[79] = 1.65478601E-02;
  COFD[80] = -1.98040420E+01;
  COFD[81] = 4.97569695E+00;
  COFD[82] = -4.26123307E-01;
  COFD[83] = 1.82788664E-02;
  COFD[84] = -1.94928919E+01;
  COFD[85] = 4.83189721E+00;
  COFD[86] = -4.08932249E-01;
  COFD[87] = 1.75924650E-02;
  COFD[88] = -1.95026899E+01;
  COFD[89] = 4.83189721E+00;
  COFD[90] = -4.08932249E-01;
  COFD[91] = 1.75924650E-02;
  COFD[92] = -1.72570708E+01;
  COFD[93] = 4.19757624E+00;
  COFD[94] = -3.32087529E-01;
  COFD[95] = 1.44827462E-02;
  COFD[96] = -2.12451070E+01;
  COFD[97] = 5.40444222E+00;
  COFD[98] = -4.72708609E-01;
  COFD[99] = 1.99362392E-02;
  COFD[100] = -2.12508452E+01;
  COFD[101] = 5.40444222E+00;
  COFD[102] = -4.72708609E-01;
  COFD[103] = 1.99362392E-02;
  COFD[104] = -1.97155668E+01;
  COFD[105] = 4.83069339E+00;
  COFD[106] = -4.08794086E-01;
  COFD[107] = 1.75872010E-02;
  COFD[108] = -1.96924408E+01;
  COFD[109] = 4.83069339E+00;
  COFD[110] = -4.08794086E-01;
  COFD[111] = 1.75872010E-02;
  COFD[112] = -1.99687862E+01;
  COFD[113] = 4.90643348E+00;
  COFD[114] = -4.17847566E-01;
  COFD[115] = 1.79485301E-02;
  COFD[116] = -1.99747268E+01;
  COFD[117] = 4.90643348E+00;
  COFD[118] = -4.17847566E-01;
  COFD[119] = 1.79485301E-02;
  COFD[120] = -1.99804559E+01;
  COFD[121] = 4.90643348E+00;
  COFD[122] = -4.17847566E-01;
  COFD[123] = 1.79485301E-02;
  COFD[124] = -2.10640502E+01;
  COFD[125] = 5.23527231E+00;
  COFD[126] = -4.55448724E-01;
  COFD[127] = 1.93756364E-02;
  COFD[128] = -1.47042106E+01;
  COFD[129] = 3.27505697E+00;
  COFD[130] = -2.14306851E-01;
  COFD[131] = 9.45219335E-03;
  COFD[132] = -1.85744784E+01;
  COFD[133] = 4.54507313E+00;
  COFD[134] = -3.74508073E-01;
  COFD[135] = 1.62126770E-02;
  COFD[136] = -1.91975554E+01;
  COFD[137] = 4.73837374E+00;
  COFD[138] = -3.97916523E-01;
  COFD[139] = 1.71599378E-02;
  COFD[140] = -1.91975554E+01;
  COFD[141] = 4.73837374E+00;
  COFD[142] = -3.97916523E-01;
  COFD[143] = 1.71599378E-02;
  COFD[144] = -1.91918132E+01;
  COFD[145] = 4.73837374E+00;
  COFD[146] = -3.97916523E-01;
  COFD[147] = 1.71599378E-02;
  COFD[148] = -2.14475654E+01;
  COFD[149] = 5.48617067E+00;
  COFD[150] = -4.80816776E-01;
  COFD[151] = 2.01887868E-02;
  COFD[152] = -1.59877962E+01;
  COFD[153] = 3.63340763E+00;
  COFD[154] = -2.60307961E-01;
  COFD[155] = 1.14256954E-02;
  COFD[156] = -1.49828551E+01;
  COFD[157] = 3.25781069E+00;
  COFD[158] = -2.12199367E-01;
  COFD[159] = 9.36657283E-03;
  COFD[160] = -1.42894603E+01;
  COFD[161] = 3.67490723E+00;
  COFD[162] = -2.65114792E-01;
  COFD[163] = 1.16092671E-02;
  COFD[164] = -1.40756909E+01;
  COFD[165] = 3.07549274E+00;
  COFD[166] = -1.88889344E-01;
  COFD[167] = 8.37152866E-03;
  COFD[168] = -1.40949183E+01;
  COFD[169] = 3.07549274E+00;
  COFD[170] = -1.88889344E-01;
  COFD[171] = 8.37152866E-03;
  COFD[172] = -1.52486292E+01;
  COFD[173] = 3.35922578E+00;
  COFD[174] = -2.25181399E-01;
  COFD[175] = 9.92132878E-03;
  COFD[176] = -1.16906458E+01;
  COFD[177] = 2.47469981E+00;
  COFD[178] = -1.10436257E-01;
  COFD[179] = 4.95273813E-03;
  COFD[180] = -2.10643264E+01;
  COFD[181] = 5.53614864E+00;
  COFD[182] = -4.86046753E-01;
  COFD[183] = 2.03659193E-02;
  COFD[184] = -1.52554785E+01;
  COFD[185] = 3.35922578E+00;
  COFD[186] = -2.25181399E-01;
  COFD[187] = 9.92132878E-03;
  COFD[188] = -1.52414498E+01;
  COFD[189] = 3.35922578E+00;
  COFD[190] = -2.25181399E-01;
  COFD[191] = 9.92132878E-03;
  COFD[192] = -1.59633426E+01;
  COFD[193] = 3.66853818E+00;
  COFD[194] = -2.64346221E-01;
  COFD[195] = 1.15784613E-02;
  COFD[196] = -1.59327344E+01;
  COFD[197] = 3.65620899E+00;
  COFD[198] = -2.62933804E-01;
  COFD[199] = 1.15253223E-02;
  COFD[200] = -2.04750606E+01;
  COFD[201] = 5.23112374E+00;
  COFD[202] = -4.54967682E-01;
  COFD[203] = 1.93570423E-02;
  COFD[204] = -2.04833743E+01;
  COFD[205] = 5.23112374E+00;
  COFD[206] = -4.54967682E-01;
  COFD[207] = 1.93570423E-02;
  COFD[208] = -2.02268939E+01;
  COFD[209] = 5.13632099E+00;
  COFD[210] = -4.44839130E-01;
  COFD[211] = 1.90058356E-02;
  COFD[212] = -2.03844292E+01;
  COFD[213] = 5.18856872E+00;
  COFD[214] = -4.50001829E-01;
  COFD[215] = 1.91636142E-02;
  COFD[216] = -1.50031706E+01;
  COFD[217] = 3.26223357E+00;
  COFD[218] = -2.12746642E-01;
  COFD[219] = 9.38912883E-03;
  COFD[220] = -1.81432499E+01;
  COFD[221] = 4.37565431E+00;
  COFD[222] = -3.53906025E-01;
  COFD[223] = 1.53760786E-02;
  COFD[224] = -1.76002073E+01;
  COFD[225] = 4.19171952E+00;
  COFD[226] = -3.31354810E-01;
  COFD[227] = 1.44520623E-02;
  COFD[228] = -1.76099599E+01;
  COFD[229] = 4.19171952E+00;
  COFD[230] = -3.31354810E-01;
  COFD[231] = 1.44520623E-02;
  COFD[232] = -1.85864196E+01;
  COFD[233] = 4.54915847E+00;
  COFD[234] = -3.75000738E-01;
  COFD[235] = 1.62324821E-02;
  COFD[236] = -1.83166409E+01;
  COFD[237] = 4.42045763E+00;
  COFD[238] = -3.59451578E-01;
  COFD[239] = 1.56056164E-02;
  COFD[240] = -1.83249359E+01;
  COFD[241] = 4.42045763E+00;
  COFD[242] = -3.59451578E-01;
  COFD[243] = 1.56056164E-02;
  COFD[244] = -1.59884349E+01;
  COFD[245] = 3.72220402E+00;
  COFD[246] = -2.71150591E-01;
  COFD[247] = 1.18665265E-02;
  COFD[248] = -2.02646659E+01;
  COFD[249] = 5.10426133E+00;
  COFD[250] = -4.41256919E-01;
  COFD[251] = 1.88737290E-02;
  COFD[252] = -2.02693704E+01;
  COFD[253] = 5.10426133E+00;
  COFD[254] = -4.41256919E-01;
  COFD[255] = 1.88737290E-02;
  COFD[256] = -1.85159963E+01;
  COFD[257] = 4.41886064E+00;
  COFD[258] = -3.59254256E-01;
  COFD[259] = 1.55974661E-02;
  COFD[260] = -1.84970149E+01;
  COFD[261] = 4.41886064E+00;
  COFD[262] = -3.59254256E-01;
  COFD[263] = 1.55974661E-02;
  COFD[264] = -1.87434421E+01;
  COFD[265] = 4.48550694E+00;
  COFD[266] = -3.67277454E-01;
  COFD[267] = 1.59194755E-02;
  COFD[268] = -1.87483223E+01;
  COFD[269] = 4.48550694E+00;
  COFD[270] = -3.67277454E-01;
  COFD[271] = 1.59194755E-02;
  COFD[272] = -1.87530190E+01;
  COFD[273] = 4.48550694E+00;
  COFD[274] = -3.67277454E-01;
  COFD[275] = 1.59194755E-02;
  COFD[276] = -1.98610465E+01;
  COFD[277] = 4.84231878E+00;
  COFD[278] = -4.10101001E-01;
  COFD[279] = 1.76356687E-02;
  COFD[280] = -1.39186828E+01;
  COFD[281] = 2.97137588E+00;
  COFD[282] = -1.75491257E-01;
  COFD[283] = 7.79646773E-03;
  COFD[284] = -1.74272359E+01;
  COFD[285] = 4.14166966E+00;
  COFD[286] = -3.25149462E-01;
  COFD[287] = 1.41943811E-02;
  COFD[288] = -1.79721047E+01;
  COFD[289] = 4.30841971E+00;
  COFD[290] = -3.45524579E-01;
  COFD[291] = 1.50265381E-02;
  COFD[292] = -1.79721047E+01;
  COFD[293] = 4.30841971E+00;
  COFD[294] = -3.45524579E-01;
  COFD[295] = 1.50265381E-02;
  COFD[296] = -1.79673967E+01;
  COFD[297] = 4.30841971E+00;
  COFD[298] = -3.45524579E-01;
  COFD[299] = 1.50265381E-02;
  COFD[300] = -2.04649116E+01;
  COFD[301] = 5.18856872E+00;
  COFD[302] = -4.50001829E-01;
  COFD[303] = 1.91636142E-02;
  COFD[304] = -1.54738770E+01;
  COFD[305] = 4.15765300E+00;
  COFD[306] = -3.27126237E-01;
  COFD[307] = 1.42762611E-02;
  COFD[308] = -1.42894603E+01;
  COFD[309] = 3.67490723E+00;
  COFD[310] = -2.65114792E-01;
  COFD[311] = 1.16092671E-02;
  COFD[312] = -1.47968875E+01;
  COFD[313] = 4.23027636E+00;
  COFD[314] = -3.36139991E-01;
  COFD[315] = 1.46507621E-02;
  COFD[316] = -1.34230419E+01;
  COFD[317] = 3.48624238E+00;
  COFD[318] = -2.41554467E-01;
  COFD[319] = 1.06263545E-02;
  COFD[320] = -1.34248014E+01;
  COFD[321] = 3.48624238E+00;
  COFD[322] = -2.41554467E-01;
  COFD[323] = 1.06263545E-02;
  COFD[324] = -1.46554904E+01;
  COFD[325] = 3.83606243E+00;
  COFD[326] = -2.86076532E-01;
  COFD[327] = 1.25205829E-02;
  COFD[328] = -1.14366544E+01;
  COFD[329] = 2.78323501E+00;
  COFD[330] = -1.51214064E-01;
  COFD[331] = 6.75150012E-03;
  COFD[332] = -1.95739720E+01;
  COFD[333] = 5.61113230E+00;
  COFD[334] = -4.90190187E-01;
  COFD[335] = 2.03260675E-02;
  COFD[336] = -1.46559297E+01;
  COFD[337] = 3.83606243E+00;
  COFD[338] = -2.86076532E-01;
  COFD[339] = 1.25205829E-02;
  COFD[340] = -1.46550238E+01;
  COFD[341] = 3.83606243E+00;
  COFD[342] = -2.86076532E-01;
  COFD[343] = 1.25205829E-02;
  COFD[344] = -1.57995045E+01;
  COFD[345] = 4.22225052E+00;
  COFD[346] = -3.35156428E-01;
  COFD[347] = 1.46104855E-02;
  COFD[348] = -1.57199190E+01;
  COFD[349] = 4.19936335E+00;
  COFD[350] = -3.32311009E-01;
  COFD[351] = 1.44921003E-02;
  COFD[352] = -1.97544605E+01;
  COFD[353] = 5.56931926E+00;
  COFD[354] = -4.89105511E-01;
  COFD[355] = 2.04493129E-02;
  COFD[356] = -1.97550243E+01;
  COFD[357] = 5.56931926E+00;
  COFD[358] = -4.89105511E-01;
  COFD[359] = 2.04493129E-02;
  COFD[360] = -1.92718738E+01;
  COFD[361] = 5.41172124E+00;
  COFD[362] = -4.73213887E-01;
  COFD[363] = 1.99405473E-02;
  COFD[364] = -1.96866259E+01;
  COFD[365] = 5.54637286E+00;
  COFD[366] = -4.87070324E-01;
  COFD[367] = 2.03983467E-02;
  COFD[368] = -1.43151328E+01;
  COFD[369] = 3.68038508E+00;
  COFD[370] = -2.65779346E-01;
  COFD[371] = 1.16360771E-02;
  COFD[372] = -1.76147183E+01;
  COFD[373] = 4.86049500E+00;
  COFD[374] = -4.12200578E-01;
  COFD[375] = 1.77160971E-02;
  COFD[376] = -1.72232379E+01;
  COFD[377] = 4.69060745E+00;
  COFD[378] = -3.92369888E-01;
  COFD[379] = 1.69459661E-02;
  COFD[380] = -1.72239329E+01;
  COFD[381] = 4.69060745E+00;
  COFD[382] = -3.92369888E-01;
  COFD[383] = 1.69459661E-02;
  COFD[384] = -1.82252070E+01;
  COFD[385] = 5.05237312E+00;
  COFD[386] = -4.35182396E-01;
  COFD[387] = 1.86363074E-02;
  COFD[388] = -1.79339484E+01;
  COFD[389] = 4.91373893E+00;
  COFD[390] = -4.18747629E-01;
  COFD[391] = 1.79856610E-02;
  COFD[392] = -1.79345106E+01;
  COFD[393] = 4.91373893E+00;
  COFD[394] = -4.18747629E-01;
  COFD[395] = 1.79856610E-02;
  COFD[396] = -1.54460977E+01;
  COFD[397] = 4.26819983E+00;
  COFD[398] = -3.40766379E-01;
  COFD[399] = 1.48393361E-02;
  COFD[400] = -1.94688845E+01;
  COFD[401] = 5.43830787E+00;
  COFD[402] = -4.75472880E-01;
  COFD[403] = 1.99909996E-02;
  COFD[404] = -1.94691588E+01;
  COFD[405] = 5.43830787E+00;
  COFD[406] = -4.75472880E-01;
  COFD[407] = 1.99909996E-02;
  COFD[408] = -1.80736227E+01;
  COFD[409] = 4.91182086E+00;
  COFD[410] = -4.18511339E-01;
  COFD[411] = 1.79759141E-02;
  COFD[412] = -1.80725106E+01;
  COFD[413] = 4.91182086E+00;
  COFD[414] = -4.18511339E-01;
  COFD[415] = 1.79759141E-02;
  COFD[416] = -1.83539845E+01;
  COFD[417] = 4.98756925E+00;
  COFD[418] = -4.27526072E-01;
  COFD[419] = 1.83341755E-02;
  COFD[420] = -1.83542714E+01;
  COFD[421] = 4.98756925E+00;
  COFD[422] = -4.27526072E-01;
  COFD[423] = 1.83341755E-02;
  COFD[424] = -1.83545451E+01;
  COFD[425] = 4.98756925E+00;
  COFD[426] = -4.27526072E-01;
  COFD[427] = 1.83341755E-02;
  COFD[428] = -1.94091316E+01;
  COFD[429] = 5.32291505E+00;
  COFD[430] = -4.65883522E-01;
  COFD[431] = 1.97916109E-02;
  COFD[432] = -1.32522938E+01;
  COFD[433] = 3.34156587E+00;
  COFD[434] = -2.22853306E-01;
  COFD[435] = 9.81883417E-03;
  COFD[436] = -1.68734802E+01;
  COFD[437] = 4.63687143E+00;
  COFD[438] = -3.85900861E-01;
  COFD[439] = 1.66856798E-02;
  COFD[440] = -1.74816690E+01;
  COFD[441] = 4.80792005E+00;
  COFD[442] = -4.06126584E-01;
  COFD[443] = 1.74831083E-02;
  COFD[444] = -1.74816690E+01;
  COFD[445] = 4.80792005E+00;
  COFD[446] = -4.06126584E-01;
  COFD[447] = 1.74831083E-02;
  COFD[448] = -1.74813945E+01;
  COFD[449] = 4.80792005E+00;
  COFD[450] = -4.06126584E-01;
  COFD[451] = 1.74831083E-02;
  COFD[452] = -1.96915102E+01;
  COFD[453] = 5.54637286E+00;
  COFD[454] = -4.87070324E-01;
  COFD[455] = 2.03983467E-02;
  COFD[456] = -1.49610523E+01;
  COFD[457] = 3.41988961E+00;
  COFD[458] = -2.33128386E-01;
  COFD[459] = 1.02689994E-02;
  COFD[460] = -1.40756909E+01;
  COFD[461] = 3.07549274E+00;
  COFD[462] = -1.88889344E-01;
  COFD[463] = 8.37152866E-03;
  COFD[464] = -1.34230419E+01;
  COFD[465] = 3.48624238E+00;
  COFD[466] = -2.41554467E-01;
  COFD[467] = 1.06263545E-02;
  COFD[468] = -1.32093517E+01;
  COFD[469] = 2.90778936E+00;
  COFD[470] = -1.67388544E-01;
  COFD[471] = 7.45220609E-03;
  COFD[472] = -1.32243932E+01;
  COFD[473] = 2.90778936E+00;
  COFD[474] = -1.67388544E-01;
  COFD[475] = 7.45220609E-03;
  COFD[476] = -1.43190281E+01;
  COFD[477] = 3.17651319E+00;
  COFD[478] = -2.02028974E-01;
  COFD[479] = 8.94232502E-03;
  COFD[480] = -1.09595844E+01;
  COFD[481] = 2.30836460E+00;
  COFD[482] = -8.76339315E-02;
  COFD[483] = 3.90878445E-03;
  COFD[484] = -1.94093476E+01;
  COFD[485] = 5.16013126E+00;
  COFD[486] = -4.46824543E-01;
  COFD[487] = 1.90464887E-02;
  COFD[488] = -1.43238892E+01;
  COFD[489] = 3.17651319E+00;
  COFD[490] = -2.02028974E-01;
  COFD[491] = 8.94232502E-03;
  COFD[492] = -1.43139120E+01;
  COFD[493] = 3.17651319E+00;
  COFD[494] = -2.02028974E-01;
  COFD[495] = 8.94232502E-03;
  COFD[496] = -1.50766073E+01;
  COFD[497] = 3.47945612E+00;
  COFD[498] = -2.40703722E-01;
  COFD[499] = 1.05907441E-02;
  COFD[500] = -1.50270285E+01;
  COFD[501] = 3.46140064E+00;
  COFD[502] = -2.38440092E-01;
  COFD[503] = 1.04960087E-02;
  COFD[504] = -1.94313018E+01;
  COFD[505] = 5.02567894E+00;
  COFD[506] = -4.32045169E-01;
  COFD[507] = 1.85132214E-02;
  COFD[508] = -1.94373032E+01;
  COFD[509] = 5.02567894E+00;
  COFD[510] = -4.32045169E-01;
  COFD[511] = 1.85132214E-02;
  COFD[512] = -1.88179325E+01;
  COFD[513] = 4.79683898E+00;
  COFD[514] = -4.04829719E-01;
  COFD[515] = 1.74325475E-02;
  COFD[516] = -1.93364494E+01;
  COFD[517] = 4.98286777E+00;
  COFD[518] = -4.26970814E-01;
  COFD[519] = 1.83122917E-02;
  COFD[520] = -1.40998907E+01;
  COFD[521] = 3.08120012E+00;
  COFD[522] = -1.89629903E-01;
  COFD[523] = 8.40361952E-03;
  COFD[524] = -1.70534750E+01;
  COFD[525] = 4.14240922E+00;
  COFD[526] = -3.25239774E-01;
  COFD[527] = 1.41980687E-02;
  COFD[528] = -1.65488277E+01;
  COFD[529] = 3.95035840E+00;
  COFD[530] = -3.00959418E-01;
  COFD[531] = 1.31692593E-02;
  COFD[532] = -1.65559708E+01;
  COFD[533] = 3.95035840E+00;
  COFD[534] = -3.00959418E-01;
  COFD[535] = 1.31692593E-02;
  COFD[536] = -1.74792034E+01;
  COFD[537] = 4.29676909E+00;
  COFD[538] = -3.44085306E-01;
  COFD[539] = 1.49671135E-02;
  COFD[540] = -1.72496558E+01;
  COFD[541] = 4.17889917E+00;
  COFD[542] = -3.29752510E-01;
  COFD[543] = 1.43850275E-02;
  COFD[544] = -1.72556425E+01;
  COFD[545] = 4.17889917E+00;
  COFD[546] = -3.29752510E-01;
  COFD[547] = 1.43850275E-02;
  COFD[548] = -1.49500258E+01;
  COFD[549] = 3.52327209E+00;
  COFD[550] = -2.46286208E-01;
  COFD[551] = 1.08285963E-02;
  COFD[552] = -1.90883170E+01;
  COFD[553] = 4.84384483E+00;
  COFD[554] = -4.10265575E-01;
  COFD[555] = 1.76414287E-02;
  COFD[556] = -1.90915553E+01;
  COFD[557] = 4.84384483E+00;
  COFD[558] = -4.10265575E-01;
  COFD[559] = 1.76414287E-02;
  COFD[560] = -1.74362915E+01;
  COFD[561] = 4.17761385E+00;
  COFD[562] = -3.29594803E-01;
  COFD[563] = 1.43785522E-02;
  COFD[564] = -1.74232048E+01;
  COFD[565] = 4.17761385E+00;
  COFD[566] = -3.29594803E-01;
  COFD[567] = 1.43785522E-02;
  COFD[568] = -1.76774947E+01;
  COFD[569] = 4.24719726E+00;
  COFD[570] = -3.38206061E-01;
  COFD[571] = 1.47350654E-02;
  COFD[572] = -1.76808635E+01;
  COFD[573] = 4.24719726E+00;
  COFD[574] = -3.38206061E-01;
  COFD[575] = 1.47350654E-02;
  COFD[576] = -1.76840960E+01;
  COFD[577] = 4.24719726E+00;
  COFD[578] = -3.38206061E-01;
  COFD[579] = 1.47350654E-02;
  COFD[580] = -1.87878758E+01;
  COFD[581] = 4.61260432E+00;
  COFD[582] = -3.82854484E-01;
  COFD[583] = 1.65575163E-02;
  COFD[584] = -1.31034501E+01;
  COFD[585] = 2.80913567E+00;
  COFD[586] = -1.54536855E-01;
  COFD[587] = 6.89359313E-03;
  COFD[588] = -1.62772129E+01;
  COFD[589] = 3.88250968E+00;
  COFD[590] = -2.92155848E-01;
  COFD[591] = 1.27867850E-02;
  COFD[592] = -1.69259507E+01;
  COFD[593] = 4.09077642E+00;
  COFD[594] = -3.18894990E-01;
  COFD[595] = 1.39371445E-02;
  COFD[596] = -1.69259507E+01;
  COFD[597] = 4.09077642E+00;
  COFD[598] = -3.18894990E-01;
  COFD[599] = 1.39371445E-02;
  COFD[600] = -1.69227098E+01;
  COFD[601] = 4.09077642E+00;
  COFD[602] = -3.18894990E-01;
  COFD[603] = 1.39371445E-02;
  COFD[604] = -1.93925565E+01;
  COFD[605] = 4.98286777E+00;
  COFD[606] = -4.26970814E-01;
  COFD[607] = 1.83122917E-02;
  COFD[608] = -1.49826737E+01;
  COFD[609] = 3.41988961E+00;
  COFD[610] = -2.33128386E-01;
  COFD[611] = 1.02689994E-02;
  COFD[612] = -1.40949183E+01;
  COFD[613] = 3.07549274E+00;
  COFD[614] = -1.88889344E-01;
  COFD[615] = 8.37152866E-03;
  COFD[616] = -1.34248014E+01;
  COFD[617] = 3.48624238E+00;
  COFD[618] = -2.41554467E-01;
  COFD[619] = 1.06263545E-02;
  COFD[620] = -1.32243932E+01;
  COFD[621] = 2.90778936E+00;
  COFD[622] = -1.67388544E-01;
  COFD[623] = 7.45220609E-03;
  COFD[624] = -1.32399011E+01;
  COFD[625] = 2.90778936E+00;
  COFD[626] = -1.67388544E-01;
  COFD[627] = 7.45220609E-03;
  COFD[628] = -1.43393972E+01;
  COFD[629] = 3.17651319E+00;
  COFD[630] = -2.02028974E-01;
  COFD[631] = 8.94232502E-03;
  COFD[632] = -1.09629118E+01;
  COFD[633] = 2.30836460E+00;
  COFD[634] = -8.76339315E-02;
  COFD[635] = 3.90878445E-03;
  COFD[636] = -1.94252948E+01;
  COFD[637] = 5.16013126E+00;
  COFD[638] = -4.46824543E-01;
  COFD[639] = 1.90464887E-02;
  COFD[640] = -1.43444614E+01;
  COFD[641] = 3.17651319E+00;
  COFD[642] = -2.02028974E-01;
  COFD[643] = 8.94232502E-03;
  COFD[644] = -1.43340695E+01;
  COFD[645] = 3.17651319E+00;
  COFD[646] = -2.02028974E-01;
  COFD[647] = 8.94232502E-03;
  COFD[648] = -1.50911746E+01;
  COFD[649] = 3.47945612E+00;
  COFD[650] = -2.40703722E-01;
  COFD[651] = 1.05907441E-02;
  COFD[652] = -1.50420909E+01;
  COFD[653] = 3.46140064E+00;
  COFD[654] = -2.38440092E-01;
  COFD[655] = 1.04960087E-02;
  COFD[656] = -1.94507789E+01;
  COFD[657] = 5.02567894E+00;
  COFD[658] = -4.32045169E-01;
  COFD[659] = 1.85132214E-02;
  COFD[660] = -1.94570202E+01;
  COFD[661] = 5.02567894E+00;
  COFD[662] = -4.32045169E-01;
  COFD[663] = 1.85132214E-02;
  COFD[664] = -1.88378792E+01;
  COFD[665] = 4.79683898E+00;
  COFD[666] = -4.04829719E-01;
  COFD[667] = 1.74325475E-02;
  COFD[668] = -1.93566163E+01;
  COFD[669] = 4.98286777E+00;
  COFD[670] = -4.26970814E-01;
  COFD[671] = 1.83122917E-02;
  COFD[672] = -1.41191170E+01;
  COFD[673] = 3.08120012E+00;
  COFD[674] = -1.89629903E-01;
  COFD[675] = 8.40361952E-03;
  COFD[676] = -1.70756953E+01;
  COFD[677] = 4.14240922E+00;
  COFD[678] = -3.25239774E-01;
  COFD[679] = 1.41980687E-02;
  COFD[680] = -1.65675292E+01;
  COFD[681] = 3.95035840E+00;
  COFD[682] = -3.00959418E-01;
  COFD[683] = 1.31692593E-02;
  COFD[684] = -1.65749465E+01;
  COFD[685] = 3.95035840E+00;
  COFD[686] = -3.00959418E-01;
  COFD[687] = 1.31692593E-02;
  COFD[688] = -1.74984410E+01;
  COFD[689] = 4.29676909E+00;
  COFD[690] = -3.44085306E-01;
  COFD[691] = 1.49671135E-02;
  COFD[692] = -1.72691436E+01;
  COFD[693] = 4.17889917E+00;
  COFD[694] = -3.29752510E-01;
  COFD[695] = 1.43850275E-02;
  COFD[696] = -1.72753698E+01;
  COFD[697] = 4.17889917E+00;
  COFD[698] = -3.29752510E-01;
  COFD[699] = 1.43850275E-02;
  COFD[700] = -1.49718147E+01;
  COFD[701] = 3.52327209E+00;
  COFD[702] = -2.46286208E-01;
  COFD[703] = 1.08285963E-02;
  COFD[704] = -1.91102567E+01;
  COFD[705] = 4.84384483E+00;
  COFD[706] = -4.10265575E-01;
  COFD[707] = 1.76414287E-02;
  COFD[708] = -1.91136407E+01;
  COFD[709] = 4.84384483E+00;
  COFD[710] = -4.10265575E-01;
  COFD[711] = 1.76414287E-02;
  COFD[712] = -1.74585179E+01;
  COFD[713] = 4.17761385E+00;
  COFD[714] = -3.29594803E-01;
  COFD[715] = 1.43785522E-02;
  COFD[716] = -1.74448444E+01;
  COFD[717] = 4.17761385E+00;
  COFD[718] = -3.29594803E-01;
  COFD[719] = 1.43785522E-02;
  COFD[720] = -1.76992903E+01;
  COFD[721] = 4.24719726E+00;
  COFD[722] = -3.38206061E-01;
  COFD[723] = 1.47350654E-02;
  COFD[724] = -1.77028097E+01;
  COFD[725] = 4.24719726E+00;
  COFD[726] = -3.38206061E-01;
  COFD[727] = 1.47350654E-02;
  COFD[728] = -1.77061877E+01;
  COFD[729] = 4.24719726E+00;
  COFD[730] = -3.38206061E-01;
  COFD[731] = 1.47350654E-02;
  COFD[732] = -1.88114840E+01;
  COFD[733] = 4.61260432E+00;
  COFD[734] = -3.82854484E-01;
  COFD[735] = 1.65575163E-02;
  COFD[736] = -1.31174788E+01;
  COFD[737] = 2.80913567E+00;
  COFD[738] = -1.54536855E-01;
  COFD[739] = 6.89359313E-03;
  COFD[740] = -1.62996992E+01;
  COFD[741] = 3.88250968E+00;
  COFD[742] = -2.92155848E-01;
  COFD[743] = 1.27867850E-02;
  COFD[744] = -1.69480333E+01;
  COFD[745] = 4.09077642E+00;
  COFD[746] = -3.18894990E-01;
  COFD[747] = 1.39371445E-02;
  COFD[748] = -1.69480333E+01;
  COFD[749] = 4.09077642E+00;
  COFD[750] = -3.18894990E-01;
  COFD[751] = 1.39371445E-02;
  COFD[752] = -1.69446466E+01;
  COFD[753] = 4.09077642E+00;
  COFD[754] = -3.18894990E-01;
  COFD[755] = 1.39371445E-02;
  COFD[756] = -1.94151732E+01;
  COFD[757] = 4.98286777E+00;
  COFD[758] = -4.26970814E-01;
  COFD[759] = 1.83122917E-02;
  COFD[760] = -1.62465647E+01;
  COFD[761] = 3.72612300E+00;
  COFD[762] = -2.71663673E-01;
  COFD[763] = 1.18889643E-02;
  COFD[764] = -1.52486292E+01;
  COFD[765] = 3.35922578E+00;
  COFD[766] = -2.25181399E-01;
  COFD[767] = 9.92132878E-03;
  COFD[768] = -1.46554904E+01;
  COFD[769] = 3.83606243E+00;
  COFD[770] = -2.86076532E-01;
  COFD[771] = 1.25205829E-02;
  COFD[772] = -1.43190281E+01;
  COFD[773] = 3.17651319E+00;
  COFD[774] = -2.02028974E-01;
  COFD[775] = 8.94232502E-03;
  COFD[776] = -1.43393972E+01;
  COFD[777] = 3.17651319E+00;
  COFD[778] = -2.02028974E-01;
  COFD[779] = 8.94232502E-03;
  COFD[780] = -1.55666313E+01;
  COFD[781] = 3.48070094E+00;
  COFD[782] = -2.40859499E-01;
  COFD[783] = 1.05972514E-02;
  COFD[784] = -1.18998160E+01;
  COFD[785] = 2.57507000E+00;
  COFD[786] = -1.24033737E-01;
  COFD[787] = 5.56694959E-03;
  COFD[788] = -2.06463656E+01;
  COFD[789] = 5.41688482E+00;
  COFD[790] = -4.73387188E-01;
  COFD[791] = 1.99280175E-02;
  COFD[792] = -1.55740954E+01;
  COFD[793] = 3.48070094E+00;
  COFD[794] = -2.40859499E-01;
  COFD[795] = 1.05972514E-02;
  COFD[796] = -1.55588172E+01;
  COFD[797] = 3.48070094E+00;
  COFD[798] = -2.40859499E-01;
  COFD[799] = 1.05972514E-02;
  COFD[800] = -1.63542358E+01;
  COFD[801] = 3.82388595E+00;
  COFD[802] = -2.84480724E-01;
  COFD[803] = 1.24506311E-02;
  COFD[804] = -1.62775683E+01;
  COFD[805] = 3.79163564E+00;
  COFD[806] = -2.80257365E-01;
  COFD[807] = 1.22656902E-02;
  COFD[808] = -2.08277510E+01;
  COFD[809] = 5.35267674E+00;
  COFD[810] = -4.69010505E-01;
  COFD[811] = 1.98979152E-02;
  COFD[812] = -2.08367641E+01;
  COFD[813] = 5.35267674E+00;
  COFD[814] = -4.69010505E-01;
  COFD[815] = 1.98979152E-02;
  COFD[816] = -2.02637913E+01;
  COFD[817] = 5.14984081E+00;
  COFD[818] = -4.46093018E-01;
  COFD[819] = 1.90396647E-02;
  COFD[820] = -2.07672755E+01;
  COFD[821] = 5.32244593E+00;
  COFD[822] = -4.65829403E-01;
  COFD[823] = 1.97895274E-02;
  COFD[824] = -1.52792799E+01;
  COFD[825] = 3.36790500E+00;
  COFD[826] = -2.26321740E-01;
  COFD[827] = 9.97135055E-03;
  COFD[828] = -1.84777509E+01;
  COFD[829] = 4.49330851E+00;
  COFD[830] = -3.68208715E-01;
  COFD[831] = 1.59565402E-02;
  COFD[832] = -1.78903850E+01;
  COFD[833] = 4.29613154E+00;
  COFD[834] = -3.44012526E-01;
  COFD[835] = 1.49643715E-02;
  COFD[836] = -1.79009121E+01;
  COFD[837] = 4.29613154E+00;
  COFD[838] = -3.44012526E-01;
  COFD[839] = 1.49643715E-02;
  COFD[840] = -1.89616566E+01;
  COFD[841] = 4.68595732E+00;
  COFD[842] = -3.91842840E-01;
  COFD[843] = 1.69262542E-02;
  COFD[844] = -1.86409085E+01;
  COFD[845] = 4.53572533E+00;
  COFD[846] = -3.73386925E-01;
  COFD[847] = 1.61678881E-02;
  COFD[848] = -1.86499019E+01;
  COFD[849] = 4.53572533E+00;
  COFD[850] = -3.73386925E-01;
  COFD[851] = 1.61678881E-02;
  COFD[852] = -1.64255877E+01;
  COFD[853] = 3.89309916E+00;
  COFD[854] = -2.93528188E-01;
  COFD[855] = 1.28463177E-02;
  COFD[856] = -2.05272244E+01;
  COFD[857] = 5.18417470E+00;
  COFD[858] = -4.49491573E-01;
  COFD[859] = 1.91438508E-02;
  COFD[860] = -2.05324009E+01;
  COFD[861] = 5.18417470E+00;
  COFD[862] = -4.49491573E-01;
  COFD[863] = 1.91438508E-02;
  COFD[864] = -1.88512637E+01;
  COFD[865] = 4.53427279E+00;
  COFD[866] = -3.73213513E-01;
  COFD[867] = 1.61609973E-02;
  COFD[868] = -1.88303884E+01;
  COFD[869] = 4.53427279E+00;
  COFD[870] = -3.73213513E-01;
  COFD[871] = 1.61609973E-02;
  COFD[872] = -1.91208247E+01;
  COFD[873] = 4.61801405E+00;
  COFD[874] = -3.83535652E-01;
  COFD[875] = 1.65862513E-02;
  COFD[876] = -1.91261897E+01;
  COFD[877] = 4.61801405E+00;
  COFD[878] = -3.83535652E-01;
  COFD[879] = 1.65862513E-02;
  COFD[880] = -1.91313579E+01;
  COFD[881] = 4.61801405E+00;
  COFD[882] = -3.83535652E-01;
  COFD[883] = 1.65862513E-02;
  COFD[884] = -2.02566153E+01;
  COFD[885] = 4.97613338E+00;
  COFD[886] = -4.26175206E-01;
  COFD[887] = 1.82809270E-02;
  COFD[888] = -1.41301009E+01;
  COFD[889] = 3.05837263E+00;
  COFD[890] = -1.86672802E-01;
  COFD[891] = 8.27575734E-03;
  COFD[892] = -1.77428141E+01;
  COFD[893] = 4.25438185E+00;
  COFD[894] = -3.39084808E-01;
  COFD[895] = 1.47709916E-02;
  COFD[896] = -1.83348590E+01;
  COFD[897] = 4.43878381E+00;
  COFD[898] = -3.61697624E-01;
  COFD[899] = 1.56975581E-02;
  COFD[900] = -1.83348590E+01;
  COFD[901] = 4.43878381E+00;
  COFD[902] = -3.61697624E-01;
  COFD[903] = 1.56975581E-02;
  COFD[904] = -1.83296787E+01;
  COFD[905] = 4.43878381E+00;
  COFD[906] = -3.61697624E-01;
  COFD[907] = 1.56975581E-02;
  COFD[908] = -2.08554822E+01;
  COFD[909] = 5.32244593E+00;
  COFD[910] = -4.65829403E-01;
  COFD[911] = 1.97895274E-02;
  COFD[912] = -1.23130320E+01;
  COFD[913] = 2.74418790E+00;
  COFD[914] = -1.46230156E-01;
  COFD[915] = 6.53948886E-03;
  COFD[916] = -1.16906458E+01;
  COFD[917] = 2.47469981E+00;
  COFD[918] = -1.10436257E-01;
  COFD[919] = 4.95273813E-03;
  COFD[920] = -1.14366544E+01;
  COFD[921] = 2.78323501E+00;
  COFD[922] = -1.51214064E-01;
  COFD[923] = 6.75150012E-03;
  COFD[924] = -1.09595844E+01;
  COFD[925] = 2.30836460E+00;
  COFD[926] = -8.76339315E-02;
  COFD[927] = 3.90878445E-03;
  COFD[928] = -1.09629118E+01;
  COFD[929] = 2.30836460E+00;
  COFD[930] = -8.76339315E-02;
  COFD[931] = 3.90878445E-03;
  COFD[932] = -1.18998160E+01;
  COFD[933] = 2.57507000E+00;
  COFD[934] = -1.24033737E-01;
  COFD[935] = 5.56694959E-03;
  COFD[936] = -1.03270769E+01;
  COFD[937] = 2.19285409E+00;
  COFD[938] = -7.54492786E-02;
  COFD[939] = 3.51398213E-03;
  COFD[940] = -1.71983144E+01;
  COFD[941] = 4.63881440E+00;
  COFD[942] = -3.86139677E-01;
  COFD[943] = 1.66955099E-02;
  COFD[944] = -1.19006697E+01;
  COFD[945] = 2.57507000E+00;
  COFD[946] = -1.24033737E-01;
  COFD[947] = 5.56694959E-03;
  COFD[948] = -1.18989101E+01;
  COFD[949] = 2.57507000E+00;
  COFD[950] = -1.24033737E-01;
  COFD[951] = 5.56694959E-03;
  COFD[952] = -1.25141403E+01;
  COFD[953] = 2.77873601E+00;
  COFD[954] = -1.50637360E-01;
  COFD[955] = 6.72684281E-03;
  COFD[956] = -1.24693714E+01;
  COFD[957] = 2.76686648E+00;
  COFD[958] = -1.49120141E-01;
  COFD[959] = 6.66220432E-03;
  COFD[960] = -1.60517517E+01;
  COFD[961] = 4.11188603E+00;
  COFD[962] = -3.21540884E-01;
  COFD[963] = 1.40482564E-02;
  COFD[964] = -1.60528433E+01;
  COFD[965] = 4.11188603E+00;
  COFD[966] = -3.21540884E-01;
  COFD[967] = 1.40482564E-02;
  COFD[968] = -1.58456453E+01;
  COFD[969] = 4.02074796E+00;
  COFD[970] = -3.10018539E-01;
  COFD[971] = 1.35599559E-02;
  COFD[972] = -1.59537397E+01;
  COFD[973] = 4.07051484E+00;
  COFD[974] = -3.16303109E-01;
  COFD[975] = 1.38259377E-02;
  COFD[976] = -1.17159884E+01;
  COFD[977] = 2.48123210E+00;
  COFD[978] = -1.11322604E-01;
  COFD[979] = 4.99282389E-03;
  COFD[980] = -1.37794466E+01;
  COFD[981] = 3.23973858E+00;
  COFD[982] = -2.09989036E-01;
  COFD[983] = 9.27667906E-03;
  COFD[984] = -1.34709956E+01;
  COFD[985] = 3.09379603E+00;
  COFD[986] = -1.91268635E-01;
  COFD[987] = 8.47480224E-03;
  COFD[988] = -1.34723365E+01;
  COFD[989] = 3.09379603E+00;
  COFD[990] = -1.91268635E-01;
  COFD[991] = 8.47480224E-03;
  COFD[992] = -1.42229344E+01;
  COFD[993] = 3.38669384E+00;
  COFD[994] = -2.28784122E-01;
  COFD[995] = 1.00790953E-02;
  COFD[996] = -1.39914049E+01;
  COFD[997] = 3.26384506E+00;
  COFD[998] = -2.12947087E-01;
  COFD[999] = 9.39743888E-03;
  COFD[1000] = -1.39924933E+01;
  COFD[1001] = 3.26384506E+00;
  COFD[1002] = -2.12947087E-01;
  COFD[1003] = 9.39743888E-03;
  COFD[1004] = -1.22004476E+01;
  COFD[1005] = 2.80725489E+00;
  COFD[1006] = -1.54291406E-01;
  COFD[1007] = 6.88290911E-03;
  COFD[1008] = -1.57035004E+01;
  COFD[1009] = 3.93614244E+00;
  COFD[1010] = -2.99111497E-01;
  COFD[1011] = 1.30888229E-02;
  COFD[1012] = -1.57040365E+01;
  COFD[1013] = 3.93614244E+00;
  COFD[1014] = -2.99111497E-01;
  COFD[1015] = 1.30888229E-02;
  COFD[1016] = -1.41229493E+01;
  COFD[1017] = 3.26291213E+00;
  COFD[1018] = -2.12831025E-01;
  COFD[1019] = 9.39262629E-03;
  COFD[1020] = -1.41207761E+01;
  COFD[1021] = 3.26291213E+00;
  COFD[1022] = -2.12831025E-01;
  COFD[1023] = 9.39262629E-03;
  COFD[1024] = -1.43129867E+01;
  COFD[1025] = 3.31177824E+00;
  COFD[1026] = -2.18945280E-01;
  COFD[1027] = 9.64764419E-03;
  COFD[1028] = -1.43135474E+01;
  COFD[1029] = 3.31177824E+00;
  COFD[1030] = -2.18945280E-01;
  COFD[1031] = 9.64764419E-03;
  COFD[1032] = -1.43140824E+01;
  COFD[1033] = 3.31177824E+00;
  COFD[1034] = -2.18945280E-01;
  COFD[1035] = 9.64764419E-03;
  COFD[1036] = -1.52614345E+01;
  COFD[1037] = 3.64565939E+00;
  COFD[1038] = -2.61726871E-01;
  COFD[1039] = 1.14799244E-02;
  COFD[1040] = -1.08473079E+01;
  COFD[1041] = 2.19094415E+00;
  COFD[1042] = -7.11992510E-02;
  COFD[1043] = 3.14105973E-03;
  COFD[1044] = -1.31911433E+01;
  COFD[1045] = 3.04970299E+00;
  COFD[1046] = -1.85555523E-01;
  COFD[1047] = 8.22773480E-03;
  COFD[1048] = -1.36889460E+01;
  COFD[1049] = 3.19999740E+00;
  COFD[1050] = -2.04999020E-01;
  COFD[1051] = 9.06766105E-03;
  COFD[1052] = -1.36889460E+01;
  COFD[1053] = 3.19999740E+00;
  COFD[1054] = -2.04999020E-01;
  COFD[1055] = 9.06766105E-03;
  COFD[1056] = -1.36884094E+01;
  COFD[1057] = 3.19999740E+00;
  COFD[1058] = -2.04999020E-01;
  COFD[1059] = 9.06766105E-03;
  COFD[1060] = -1.59632633E+01;
  COFD[1061] = 4.07051484E+00;
  COFD[1062] = -3.16303109E-01;
  COFD[1063] = 1.38259377E-02;
  COFD[1064] = -2.12755915E+01;
  COFD[1065] = 5.60381989E+00;
  COFD[1066] = -4.91225459E-01;
  COFD[1067] = 2.04487844E-02;
  COFD[1068] = -2.10643264E+01;
  COFD[1069] = 5.53614864E+00;
  COFD[1070] = -4.86046753E-01;
  COFD[1071] = 2.03659193E-02;
  COFD[1072] = -1.95739720E+01;
  COFD[1073] = 5.61113230E+00;
  COFD[1074] = -4.90190187E-01;
  COFD[1075] = 2.03260675E-02;
  COFD[1076] = -1.94093476E+01;
  COFD[1077] = 5.16013126E+00;
  COFD[1078] = -4.46824543E-01;
  COFD[1079] = 1.90464887E-02;
  COFD[1080] = -1.94252948E+01;
  COFD[1081] = 5.16013126E+00;
  COFD[1082] = -4.46824543E-01;
  COFD[1083] = 1.90464887E-02;
  COFD[1084] = -2.06463656E+01;
  COFD[1085] = 5.41688482E+00;
  COFD[1086] = -4.73387188E-01;
  COFD[1087] = 1.99280175E-02;
  COFD[1088] = -1.71983144E+01;
  COFD[1089] = 4.63881440E+00;
  COFD[1090] = -3.86139677E-01;
  COFD[1091] = 1.66955099E-02;
  COFD[1092] = -1.19157788E+01;
  COFD[1093] = 9.28952533E-01;
  COFD[1094] = 2.42107483E-01;
  COFD[1095] = -1.59824150E-02;
  COFD[1096] = -2.06516251E+01;
  COFD[1097] = 5.41688482E+00;
  COFD[1098] = -4.73387188E-01;
  COFD[1099] = 1.99280175E-02;
  COFD[1100] = -2.12652444E+01;
  COFD[1101] = 5.59961822E+00;
  COFD[1102] = -4.91624856E-01;
  COFD[1103] = 2.05035546E-02;
  COFD[1104] = -2.12831283E+01;
  COFD[1105] = 5.61184117E+00;
  COFD[1106] = -4.90532156E-01;
  COFD[1107] = 2.03507922E-02;
  COFD[1108] = -2.14087360E+01;
  COFD[1109] = 5.57281993E+00;
  COFD[1110] = -4.76690860E-01;
  COFD[1111] = 1.94000702E-02;
  COFD[1112] = -1.77498465E+01;
  COFD[1113] = 3.57475686E+00;
  COFD[1114] = -1.56396297E-01;
  COFD[1115] = 3.12157721E-03;
  COFD[1116] = -1.77563175E+01;
  COFD[1117] = 3.57475686E+00;
  COFD[1118] = -1.56396297E-01;
  COFD[1119] = 3.12157721E-03;
  COFD[1120] = -1.65295191E+01;
  COFD[1121] = 2.97569077E+00;
  COFD[1122] = -6.75650795E-02;
  COFD[1123] = -1.08649440E-03;
  COFD[1124] = -1.80253593E+01;
  COFD[1125] = 3.69199168E+00;
  COFD[1126] = -1.74005516E-01;
  COFD[1127] = 3.97694372E-03;
  COFD[1128] = -2.11388255E+01;
  COFD[1129] = 5.55529689E+00;
  COFD[1130] = -4.87942530E-01;
  COFD[1131] = 2.04249057E-02;
  COFD[1132] = -2.07653629E+01;
  COFD[1133] = 5.01091988E+00;
  COFD[1134] = -3.77985581E-01;
  COFD[1135] = 1.40968617E-02;
  COFD[1136] = -2.15095920E+01;
  COFD[1137] = 5.46737673E+00;
  COFD[1138] = -4.55696085E-01;
  COFD[1139] = 1.81982625E-02;
  COFD[1140] = -2.15172712E+01;
  COFD[1141] = 5.46737673E+00;
  COFD[1142] = -4.55696085E-01;
  COFD[1143] = 1.81982625E-02;
  COFD[1144] = -2.08812277E+01;
  COFD[1145] = 5.08859217E+00;
  COFD[1146] = -3.90525428E-01;
  COFD[1147] = 1.47376395E-02;
  COFD[1148] = -2.12597258E+01;
  COFD[1149] = 5.24930667E+00;
  COFD[1150] = -4.17435088E-01;
  COFD[1151] = 1.61434424E-02;
  COFD[1152] = -2.12661812E+01;
  COFD[1153] = 5.24930667E+00;
  COFD[1154] = -4.17435088E-01;
  COFD[1155] = 1.61434424E-02;
  COFD[1156] = -2.10440599E+01;
  COFD[1157] = 5.59806282E+00;
  COFD[1158] = -4.87109535E-01;
  COFD[1159] = 2.01370226E-02;
  COFD[1160] = -1.87383877E+01;
  COFD[1161] = 3.96926341E+00;
  COFD[1162] = -2.16412264E-01;
  COFD[1163] = 6.06012078E-03;
  COFD[1164] = -1.87419126E+01;
  COFD[1165] = 3.96926341E+00;
  COFD[1166] = -2.16412264E-01;
  COFD[1167] = 6.06012078E-03;
  COFD[1168] = -2.14597040E+01;
  COFD[1169] = 5.25056135E+00;
  COFD[1170] = -4.17658192E-01;
  COFD[1171] = 1.61554773E-02;
  COFD[1172] = -2.14454635E+01;
  COFD[1173] = 5.25056135E+00;
  COFD[1174] = -4.17658192E-01;
  COFD[1175] = 1.61554773E-02;
  COFD[1176] = -2.13847376E+01;
  COFD[1177] = 5.17440955E+00;
  COFD[1178] = -4.04678430E-01;
  COFD[1179] = 1.54706350E-02;
  COFD[1180] = -2.13884026E+01;
  COFD[1181] = 5.17440955E+00;
  COFD[1182] = -4.04678430E-01;
  COFD[1183] = 1.54706350E-02;
  COFD[1184] = -2.13919213E+01;
  COFD[1185] = 5.17440955E+00;
  COFD[1186] = -4.04678430E-01;
  COFD[1187] = 1.54706350E-02;
  COFD[1188] = -2.03437771E+01;
  COFD[1189] = 4.57152878E+00;
  COFD[1190] = -3.08371263E-01;
  COFD[1191] = 1.05838559E-02;
  COFD[1192] = -1.92450630E+01;
  COFD[1193] = 5.05708283E+00;
  COFD[1194] = -4.35739290E-01;
  COFD[1195] = 1.86583205E-02;
  COFD[1196] = -2.14542455E+01;
  COFD[1197] = 5.49993732E+00;
  COFD[1198] = -4.62042917E-01;
  COFD[1199] = 1.85577413E-02;
  COFD[1200] = -2.13622755E+01;
  COFD[1201] = 5.35901292E+00;
  COFD[1202] = -4.36172487E-01;
  COFD[1203] = 1.71345319E-02;
  COFD[1204] = -2.13622755E+01;
  COFD[1205] = 5.35901292E+00;
  COFD[1206] = -4.36172487E-01;
  COFD[1207] = 1.71345319E-02;
  COFD[1208] = -2.13587478E+01;
  COFD[1209] = 5.35901292E+00;
  COFD[1210] = -4.36172487E-01;
  COFD[1211] = 1.71345319E-02;
  COFD[1212] = -1.80862788E+01;
  COFD[1213] = 3.69199168E+00;
  COFD[1214] = -1.74005516E-01;
  COFD[1215] = 3.97694372E-03;
  COFD[1216] = -1.62547451E+01;
  COFD[1217] = 3.72612300E+00;
  COFD[1218] = -2.71663673E-01;
  COFD[1219] = 1.18889643E-02;
  COFD[1220] = -1.52554785E+01;
  COFD[1221] = 3.35922578E+00;
  COFD[1222] = -2.25181399E-01;
  COFD[1223] = 9.92132878E-03;
  COFD[1224] = -1.46559297E+01;
  COFD[1225] = 3.83606243E+00;
  COFD[1226] = -2.86076532E-01;
  COFD[1227] = 1.25205829E-02;
  COFD[1228] = -1.43238892E+01;
  COFD[1229] = 3.17651319E+00;
  COFD[1230] = -2.02028974E-01;
  COFD[1231] = 8.94232502E-03;
  COFD[1232] = -1.43444614E+01;
  COFD[1233] = 3.17651319E+00;
  COFD[1234] = -2.02028974E-01;
  COFD[1235] = 8.94232502E-03;
  COFD[1236] = -1.55740954E+01;
  COFD[1237] = 3.48070094E+00;
  COFD[1238] = -2.40859499E-01;
  COFD[1239] = 1.05972514E-02;
  COFD[1240] = -1.19006697E+01;
  COFD[1241] = 2.57507000E+00;
  COFD[1242] = -1.24033737E-01;
  COFD[1243] = 5.56694959E-03;
  COFD[1244] = -2.06516251E+01;
  COFD[1245] = 5.41688482E+00;
  COFD[1246] = -4.73387188E-01;
  COFD[1247] = 1.99280175E-02;
  COFD[1248] = -1.55816727E+01;
  COFD[1249] = 3.48070094E+00;
  COFD[1250] = -2.40859499E-01;
  COFD[1251] = 1.05972514E-02;
  COFD[1252] = -1.55661647E+01;
  COFD[1253] = 3.48070094E+00;
  COFD[1254] = -2.40859499E-01;
  COFD[1255] = 1.05972514E-02;
  COFD[1256] = -1.63588948E+01;
  COFD[1257] = 3.82388595E+00;
  COFD[1258] = -2.84480724E-01;
  COFD[1259] = 1.24506311E-02;
  COFD[1260] = -1.62824385E+01;
  COFD[1261] = 3.79163564E+00;
  COFD[1262] = -2.80257365E-01;
  COFD[1263] = 1.22656902E-02;
  COFD[1264] = -2.08347318E+01;
  COFD[1265] = 5.35267674E+00;
  COFD[1266] = -4.69010505E-01;
  COFD[1267] = 1.98979152E-02;
  COFD[1268] = -2.08438728E+01;
  COFD[1269] = 5.35267674E+00;
  COFD[1270] = -4.69010505E-01;
  COFD[1271] = 1.98979152E-02;
  COFD[1272] = -2.02710239E+01;
  COFD[1273] = 5.14984081E+00;
  COFD[1274] = -4.46093018E-01;
  COFD[1275] = 1.90396647E-02;
  COFD[1276] = -2.07746282E+01;
  COFD[1277] = 5.32244593E+00;
  COFD[1278] = -4.65829403E-01;
  COFD[1279] = 1.97895274E-02;
  COFD[1280] = -1.52861287E+01;
  COFD[1281] = 3.36790500E+00;
  COFD[1282] = -2.26321740E-01;
  COFD[1283] = 9.97135055E-03;
  COFD[1284] = -1.84862906E+01;
  COFD[1285] = 4.49330851E+00;
  COFD[1286] = -3.68208715E-01;
  COFD[1287] = 1.59565402E-02;
  COFD[1288] = -1.78969625E+01;
  COFD[1289] = 4.29613154E+00;
  COFD[1290] = -3.44012526E-01;
  COFD[1291] = 1.49643715E-02;
  COFD[1292] = -1.79076305E+01;
  COFD[1293] = 4.29613154E+00;
  COFD[1294] = -3.44012526E-01;
  COFD[1295] = 1.49643715E-02;
  COFD[1296] = -1.89685112E+01;
  COFD[1297] = 4.68595732E+00;
  COFD[1298] = -3.91842840E-01;
  COFD[1299] = 1.69262542E-02;
  COFD[1300] = -1.86478950E+01;
  COFD[1301] = 4.53572533E+00;
  COFD[1302] = -3.73386925E-01;
  COFD[1303] = 1.61678881E-02;
  COFD[1304] = -1.86570161E+01;
  COFD[1305] = 4.53572533E+00;
  COFD[1306] = -3.73386925E-01;
  COFD[1307] = 1.61678881E-02;
  COFD[1308] = -1.64338675E+01;
  COFD[1309] = 3.89309916E+00;
  COFD[1310] = -2.93528188E-01;
  COFD[1311] = 1.28463177E-02;
  COFD[1312] = -2.05355943E+01;
  COFD[1313] = 5.18417470E+00;
  COFD[1314] = -4.49491573E-01;
  COFD[1315] = 1.91438508E-02;
  COFD[1316] = -2.05408587E+01;
  COFD[1317] = 5.18417470E+00;
  COFD[1318] = -4.49491573E-01;
  COFD[1319] = 1.91438508E-02;
  COFD[1320] = -1.88598070E+01;
  COFD[1321] = 4.53427279E+00;
  COFD[1322] = -3.73213513E-01;
  COFD[1323] = 1.61609973E-02;
  COFD[1324] = -1.88385796E+01;
  COFD[1325] = 4.53427279E+00;
  COFD[1326] = -3.73213513E-01;
  COFD[1327] = 1.61609973E-02;
  COFD[1328] = -1.91291085E+01;
  COFD[1329] = 4.61801405E+00;
  COFD[1330] = -3.83535652E-01;
  COFD[1331] = 1.65862513E-02;
  COFD[1332] = -1.91345636E+01;
  COFD[1333] = 4.61801405E+00;
  COFD[1334] = -3.83535652E-01;
  COFD[1335] = 1.65862513E-02;
  COFD[1336] = -1.91398195E+01;
  COFD[1337] = 4.61801405E+00;
  COFD[1338] = -3.83535652E-01;
  COFD[1339] = 1.65862513E-02;
  COFD[1340] = -2.02660328E+01;
  COFD[1341] = 4.97613338E+00;
  COFD[1342] = -4.26175206E-01;
  COFD[1343] = 1.82809270E-02;
  COFD[1344] = -1.41345352E+01;
  COFD[1345] = 3.05837263E+00;
  COFD[1346] = -1.86672802E-01;
  COFD[1347] = 8.27575734E-03;
  COFD[1348] = -1.77515170E+01;
  COFD[1349] = 4.25438185E+00;
  COFD[1350] = -3.39084808E-01;
  COFD[1351] = 1.47709916E-02;
  COFD[1352] = -1.83433151E+01;
  COFD[1353] = 4.43878381E+00;
  COFD[1354] = -3.61697624E-01;
  COFD[1355] = 1.56975581E-02;
  COFD[1356] = -1.83433151E+01;
  COFD[1357] = 4.43878381E+00;
  COFD[1358] = -3.61697624E-01;
  COFD[1359] = 1.56975581E-02;
  COFD[1360] = -1.83380469E+01;
  COFD[1361] = 4.43878381E+00;
  COFD[1362] = -3.61697624E-01;
  COFD[1363] = 1.56975581E-02;
  COFD[1364] = -2.08642660E+01;
  COFD[1365] = 5.32244593E+00;
  COFD[1366] = -4.65829403E-01;
  COFD[1367] = 1.97895274E-02;
  COFD[1368] = -1.62380132E+01;
  COFD[1369] = 3.72612300E+00;
  COFD[1370] = -2.71663673E-01;
  COFD[1371] = 1.18889643E-02;
  COFD[1372] = -1.52414498E+01;
  COFD[1373] = 3.35922578E+00;
  COFD[1374] = -2.25181399E-01;
  COFD[1375] = 9.92132878E-03;
  COFD[1376] = -1.46550238E+01;
  COFD[1377] = 3.83606243E+00;
  COFD[1378] = -2.86076532E-01;
  COFD[1379] = 1.25205829E-02;
  COFD[1380] = -1.43139120E+01;
  COFD[1381] = 3.17651319E+00;
  COFD[1382] = -2.02028974E-01;
  COFD[1383] = 8.94232502E-03;
  COFD[1384] = -1.43340695E+01;
  COFD[1385] = 3.17651319E+00;
  COFD[1386] = -2.02028974E-01;
  COFD[1387] = 8.94232502E-03;
  COFD[1388] = -1.55588172E+01;
  COFD[1389] = 3.48070094E+00;
  COFD[1390] = -2.40859499E-01;
  COFD[1391] = 1.05972514E-02;
  COFD[1392] = -1.18989101E+01;
  COFD[1393] = 2.57507000E+00;
  COFD[1394] = -1.24033737E-01;
  COFD[1395] = 5.56694959E-03;
  COFD[1396] = -2.12652444E+01;
  COFD[1397] = 5.59961822E+00;
  COFD[1398] = -4.91624856E-01;
  COFD[1399] = 2.05035546E-02;
  COFD[1400] = -1.55661647E+01;
  COFD[1401] = 3.48070094E+00;
  COFD[1402] = -2.40859499E-01;
  COFD[1403] = 1.05972514E-02;
  COFD[1404] = -1.55511233E+01;
  COFD[1405] = 3.48070094E+00;
  COFD[1406] = -2.40859499E-01;
  COFD[1407] = 1.05972514E-02;
  COFD[1408] = -1.63493305E+01;
  COFD[1409] = 3.82388595E+00;
  COFD[1410] = -2.84480724E-01;
  COFD[1411] = 1.24506311E-02;
  COFD[1412] = -1.62724429E+01;
  COFD[1413] = 3.79163564E+00;
  COFD[1414] = -2.80257365E-01;
  COFD[1415] = 1.22656902E-02;
  COFD[1416] = -2.08204356E+01;
  COFD[1417] = 5.35267674E+00;
  COFD[1418] = -4.69010505E-01;
  COFD[1419] = 1.98979152E-02;
  COFD[1420] = -2.08293167E+01;
  COFD[1421] = 5.35267674E+00;
  COFD[1422] = -4.69010505E-01;
  COFD[1423] = 1.98979152E-02;
  COFD[1424] = -2.04928875E+01;
  COFD[1425] = 5.22397941E+00;
  COFD[1426] = -4.54138181E-01;
  COFD[1427] = 1.93249289E-02;
  COFD[1428] = -2.07595763E+01;
  COFD[1429] = 5.32244593E+00;
  COFD[1430] = -4.65829403E-01;
  COFD[1431] = 1.97895274E-02;
  COFD[1432] = -1.52721010E+01;
  COFD[1433] = 3.36790500E+00;
  COFD[1434] = -2.26321740E-01;
  COFD[1435] = 9.97135055E-03;
  COFD[1436] = -1.84688303E+01;
  COFD[1437] = 4.49330851E+00;
  COFD[1438] = -3.68208715E-01;
  COFD[1439] = 1.59565402E-02;
  COFD[1440] = -1.78834868E+01;
  COFD[1441] = 4.29613154E+00;
  COFD[1442] = -3.44012526E-01;
  COFD[1443] = 1.49643715E-02;
  COFD[1444] = -1.78938681E+01;
  COFD[1445] = 4.29613154E+00;
  COFD[1446] = -3.44012526E-01;
  COFD[1447] = 1.49643715E-02;
  COFD[1448] = -1.89544717E+01;
  COFD[1449] = 4.68595732E+00;
  COFD[1450] = -3.91842840E-01;
  COFD[1451] = 1.69262542E-02;
  COFD[1452] = -1.86335873E+01;
  COFD[1453] = 4.53572533E+00;
  COFD[1454] = -3.73386925E-01;
  COFD[1455] = 1.61678881E-02;
  COFD[1456] = -1.86424488E+01;
  COFD[1457] = 4.53572533E+00;
  COFD[1458] = -3.73386925E-01;
  COFD[1459] = 1.61678881E-02;
  COFD[1460] = -1.64169341E+01;
  COFD[1461] = 3.89309916E+00;
  COFD[1462] = -2.93528188E-01;
  COFD[1463] = 1.28463177E-02;
  COFD[1464] = -2.05184780E+01;
  COFD[1465] = 5.18417470E+00;
  COFD[1466] = -4.49491573E-01;
  COFD[1467] = 1.91438508E-02;
  COFD[1468] = -2.05235643E+01;
  COFD[1469] = 5.18417470E+00;
  COFD[1470] = -4.49491573E-01;
  COFD[1471] = 1.91438508E-02;
  COFD[1472] = -1.88423393E+01;
  COFD[1473] = 4.53427279E+00;
  COFD[1474] = -3.73213513E-01;
  COFD[1475] = 1.61609973E-02;
  COFD[1476] = -1.88218258E+01;
  COFD[1477] = 4.53427279E+00;
  COFD[1478] = -3.73213513E-01;
  COFD[1479] = 1.61609973E-02;
  COFD[1480] = -1.91121670E+01;
  COFD[1481] = 4.61801405E+00;
  COFD[1482] = -3.83535652E-01;
  COFD[1483] = 1.65862513E-02;
  COFD[1484] = -1.91174394E+01;
  COFD[1485] = 4.61801405E+00;
  COFD[1486] = -3.83535652E-01;
  COFD[1487] = 1.65862513E-02;
  COFD[1488] = -1.91225175E+01;
  COFD[1489] = 4.61801405E+00;
  COFD[1490] = -3.83535652E-01;
  COFD[1491] = 1.65862513E-02;
  COFD[1492] = -2.02467952E+01;
  COFD[1493] = 4.97613338E+00;
  COFD[1494] = -4.26175206E-01;
  COFD[1495] = 1.82809270E-02;
  COFD[1496] = -1.41254300E+01;
  COFD[1497] = 3.05837263E+00;
  COFD[1498] = -1.86672802E-01;
  COFD[1499] = 8.27575734E-03;
  COFD[1500] = -1.77337260E+01;
  COFD[1501] = 4.25438185E+00;
  COFD[1502] = -3.39084808E-01;
  COFD[1503] = 1.47709916E-02;
  COFD[1504] = -1.83260242E+01;
  COFD[1505] = 4.43878381E+00;
  COFD[1506] = -3.61697624E-01;
  COFD[1507] = 1.56975581E-02;
  COFD[1508] = -1.83260242E+01;
  COFD[1509] = 4.43878381E+00;
  COFD[1510] = -3.61697624E-01;
  COFD[1511] = 1.56975581E-02;
  COFD[1512] = -1.83209342E+01;
  COFD[1513] = 4.43878381E+00;
  COFD[1514] = -3.61697624E-01;
  COFD[1515] = 1.56975581E-02;
  COFD[1516] = -2.08463112E+01;
  COFD[1517] = 5.32244593E+00;
  COFD[1518] = -4.65829403E-01;
  COFD[1519] = 1.97895274E-02;
  COFD[1520] = -1.72197029E+01;
  COFD[1521] = 4.14993355E+00;
  COFD[1522] = -3.26168062E-01;
  COFD[1523] = 1.42364115E-02;
  COFD[1524] = -1.59633426E+01;
  COFD[1525] = 3.66853818E+00;
  COFD[1526] = -2.64346221E-01;
  COFD[1527] = 1.15784613E-02;
  COFD[1528] = -1.57995045E+01;
  COFD[1529] = 4.22225052E+00;
  COFD[1530] = -3.35156428E-01;
  COFD[1531] = 1.46104855E-02;
  COFD[1532] = -1.50766073E+01;
  COFD[1533] = 3.47945612E+00;
  COFD[1534] = -2.40703722E-01;
  COFD[1535] = 1.05907441E-02;
  COFD[1536] = -1.50911746E+01;
  COFD[1537] = 3.47945612E+00;
  COFD[1538] = -2.40703722E-01;
  COFD[1539] = 1.05907441E-02;
  COFD[1540] = -1.63542358E+01;
  COFD[1541] = 3.82388595E+00;
  COFD[1542] = -2.84480724E-01;
  COFD[1543] = 1.24506311E-02;
  COFD[1544] = -1.25141403E+01;
  COFD[1545] = 2.77873601E+00;
  COFD[1546] = -1.50637360E-01;
  COFD[1547] = 6.72684281E-03;
  COFD[1548] = -2.12831283E+01;
  COFD[1549] = 5.61184117E+00;
  COFD[1550] = -4.90532156E-01;
  COFD[1551] = 2.03507922E-02;
  COFD[1552] = -1.63588948E+01;
  COFD[1553] = 3.82388595E+00;
  COFD[1554] = -2.84480724E-01;
  COFD[1555] = 1.24506311E-02;
  COFD[1556] = -1.63493305E+01;
  COFD[1557] = 3.82388595E+00;
  COFD[1558] = -2.84480724E-01;
  COFD[1559] = 1.24506311E-02;
  COFD[1560] = -1.73374523E+01;
  COFD[1561] = 4.21416723E+00;
  COFD[1562] = -3.34163932E-01;
  COFD[1563] = 1.45697432E-02;
  COFD[1564] = -1.72738845E+01;
  COFD[1565] = 4.19029808E+00;
  COFD[1566] = -3.31177076E-01;
  COFD[1567] = 1.44446234E-02;
  COFD[1568] = -2.14391914E+01;
  COFD[1569] = 5.56531152E+00;
  COFD[1570] = -4.88789821E-01;
  COFD[1571] = 2.04437116E-02;
  COFD[1572] = -2.14449532E+01;
  COFD[1573] = 5.56531152E+00;
  COFD[1574] = -4.88789821E-01;
  COFD[1575] = 2.04437116E-02;
  COFD[1576] = -2.09612533E+01;
  COFD[1577] = 5.40870099E+00;
  COFD[1578] = -4.73017610E-01;
  COFD[1579] = 1.99399066E-02;
  COFD[1580] = -2.13777287E+01;
  COFD[1581] = 5.54007827E+00;
  COFD[1582] = -4.86434511E-01;
  COFD[1583] = 2.03779006E-02;
  COFD[1584] = -1.59862997E+01;
  COFD[1585] = 3.67388294E+00;
  COFD[1586] = -2.64990709E-01;
  COFD[1587] = 1.16042706E-02;
  COFD[1588] = -1.93276406E+01;
  COFD[1589] = 4.85015581E+00;
  COFD[1590] = -4.10945109E-01;
  COFD[1591] = 1.76651398E-02;
  COFD[1592] = -1.88463801E+01;
  COFD[1593] = 4.68393046E+00;
  COFD[1594] = -3.91610863E-01;
  COFD[1595] = 1.69174645E-02;
  COFD[1596] = -1.88532484E+01;
  COFD[1597] = 4.68393046E+00;
  COFD[1598] = -3.91610863E-01;
  COFD[1599] = 1.69174645E-02;
  COFD[1600] = -1.98646724E+01;
  COFD[1601] = 5.04367502E+00;
  COFD[1602] = -4.34153325E-01;
  COFD[1603] = 1.85956055E-02;
  COFD[1604] = -1.95494660E+01;
  COFD[1605] = 4.90255048E+00;
  COFD[1606] = -4.17368501E-01;
  COFD[1607] = 1.79287358E-02;
  COFD[1608] = -1.95552136E+01;
  COFD[1609] = 4.90255048E+00;
  COFD[1610] = -4.17368501E-01;
  COFD[1611] = 1.79287358E-02;
  COFD[1612] = -1.72828280E+01;
  COFD[1613] = 4.26063341E+00;
  COFD[1614] = -3.39848064E-01;
  COFD[1615] = 1.48021313E-02;
  COFD[1616] = -2.11606942E+01;
  COFD[1617] = 5.42846112E+00;
  COFD[1618] = -4.74321870E-01;
  COFD[1619] = 1.99459749E-02;
  COFD[1620] = -2.11637883E+01;
  COFD[1621] = 5.42846112E+00;
  COFD[1622] = -4.74321870E-01;
  COFD[1623] = 1.99459749E-02;
  COFD[1624] = -1.97157118E+01;
  COFD[1625] = 4.90059208E+00;
  COFD[1626] = -4.17126126E-01;
  COFD[1627] = 1.79186848E-02;
  COFD[1628] = -1.97032058E+01;
  COFD[1629] = 4.90059208E+00;
  COFD[1630] = -4.17126126E-01;
  COFD[1631] = 1.79186848E-02;
  COFD[1632] = -1.99803480E+01;
  COFD[1633] = 4.97875278E+00;
  COFD[1634] = -4.26485475E-01;
  COFD[1635] = 1.82931933E-02;
  COFD[1636] = -1.99835677E+01;
  COFD[1637] = 4.97875278E+00;
  COFD[1638] = -4.26485475E-01;
  COFD[1639] = 1.82931933E-02;
  COFD[1640] = -1.99866562E+01;
  COFD[1641] = 4.97875278E+00;
  COFD[1642] = -4.26485475E-01;
  COFD[1643] = 1.82931933E-02;
  COFD[1644] = -2.10572526E+01;
  COFD[1645] = 5.31360223E+00;
  COFD[1646] = -4.64787000E-01;
  COFD[1647] = 1.97483720E-02;
  COFD[1648] = -1.48128541E+01;
  COFD[1649] = 3.33113524E+00;
  COFD[1650] = -2.21479057E-01;
  COFD[1651] = 9.75837737E-03;
  COFD[1652] = -1.86130101E+01;
  COFD[1653] = 4.62613551E+00;
  COFD[1654] = -3.84556396E-01;
  COFD[1655] = 1.66292467E-02;
  COFD[1656] = -1.91935972E+01;
  COFD[1657] = 4.80030220E+00;
  COFD[1658] = -4.05235041E-01;
  COFD[1659] = 1.74483531E-02;
  COFD[1660] = -1.91935972E+01;
  COFD[1661] = 4.80030220E+00;
  COFD[1662] = -4.05235041E-01;
  COFD[1663] = 1.74483531E-02;
  COFD[1664] = -1.91905006E+01;
  COFD[1665] = 4.80030220E+00;
  COFD[1666] = -4.05235041E-01;
  COFD[1667] = 1.74483531E-02;
  COFD[1668] = -2.14314067E+01;
  COFD[1669] = 5.54007827E+00;
  COFD[1670] = -4.86434511E-01;
  COFD[1671] = 2.03779006E-02;
  COFD[1672] = -1.71754233E+01;
  COFD[1673] = 4.13131681E+00;
  COFD[1674] = -3.23897559E-01;
  COFD[1675] = 1.41438222E-02;
  COFD[1676] = -1.59327344E+01;
  COFD[1677] = 3.65620899E+00;
  COFD[1678] = -2.62933804E-01;
  COFD[1679] = 1.15253223E-02;
  COFD[1680] = -1.57199190E+01;
  COFD[1681] = 4.19936335E+00;
  COFD[1682] = -3.32311009E-01;
  COFD[1683] = 1.44921003E-02;
  COFD[1684] = -1.50270285E+01;
  COFD[1685] = 3.46140064E+00;
  COFD[1686] = -2.38440092E-01;
  COFD[1687] = 1.04960087E-02;
  COFD[1688] = -1.50420909E+01;
  COFD[1689] = 3.46140064E+00;
  COFD[1690] = -2.38440092E-01;
  COFD[1691] = 1.04960087E-02;
  COFD[1692] = -1.62775683E+01;
  COFD[1693] = 3.79163564E+00;
  COFD[1694] = -2.80257365E-01;
  COFD[1695] = 1.22656902E-02;
  COFD[1696] = -1.24693714E+01;
  COFD[1697] = 2.76686648E+00;
  COFD[1698] = -1.49120141E-01;
  COFD[1699] = 6.66220432E-03;
  COFD[1700] = -2.14087360E+01;
  COFD[1701] = 5.57281993E+00;
  COFD[1702] = -4.76690860E-01;
  COFD[1703] = 1.94000702E-02;
  COFD[1704] = -1.62824385E+01;
  COFD[1705] = 3.79163564E+00;
  COFD[1706] = -2.80257365E-01;
  COFD[1707] = 1.22656902E-02;
  COFD[1708] = -1.62724429E+01;
  COFD[1709] = 3.79163564E+00;
  COFD[1710] = -2.80257365E-01;
  COFD[1711] = 1.22656902E-02;
  COFD[1712] = -1.72738845E+01;
  COFD[1713] = 4.19029808E+00;
  COFD[1714] = -3.31177076E-01;
  COFD[1715] = 1.44446234E-02;
  COFD[1716] = -1.72167712E+01;
  COFD[1717] = 4.16886779E+00;
  COFD[1718] = -3.28518156E-01;
  COFD[1719] = 1.43341626E-02;
  COFD[1720] = -2.14022312E+01;
  COFD[1721] = 5.55346617E+00;
  COFD[1722] = -4.87783156E-01;
  COFD[1723] = 2.04210886E-02;
  COFD[1724] = -2.14082433E+01;
  COFD[1725] = 5.55346617E+00;
  COFD[1726] = -4.87783156E-01;
  COFD[1727] = 2.04210886E-02;
  COFD[1728] = -2.11381493E+01;
  COFD[1729] = 5.45574448E+00;
  COFD[1730] = -4.77436163E-01;
  COFD[1731] = 2.00644599E-02;
  COFD[1732] = -2.13319769E+01;
  COFD[1733] = 5.52422470E+00;
  COFD[1734] = -4.84872944E-01;
  COFD[1735] = 2.03298213E-02;
  COFD[1736] = -1.59525075E+01;
  COFD[1737] = 3.66023858E+00;
  COFD[1738] = -2.63401043E-01;
  COFD[1739] = 1.15432000E-02;
  COFD[1740] = -1.92867532E+01;
  COFD[1741] = 4.83375900E+00;
  COFD[1742] = -4.09146560E-01;
  COFD[1743] = 1.76006599E-02;
  COFD[1744] = -1.87897289E+01;
  COFD[1745] = 4.66162351E+00;
  COFD[1746] = -3.88920477E-01;
  COFD[1747] = 1.68089648E-02;
  COFD[1748] = -1.87968842E+01;
  COFD[1749] = 4.66162351E+00;
  COFD[1750] = -3.88920477E-01;
  COFD[1751] = 1.68089648E-02;
  COFD[1752] = -1.98075051E+01;
  COFD[1753] = 5.02169524E+00;
  COFD[1754] = -4.31582804E-01;
  COFD[1755] = 1.84953568E-02;
  COFD[1756] = -1.94763687E+01;
  COFD[1757] = 4.87333294E+00;
  COFD[1758] = -4.13769241E-01;
  COFD[1759] = 1.77802244E-02;
  COFD[1760] = -1.94823661E+01;
  COFD[1761] = 4.87333294E+00;
  COFD[1762] = -4.13769241E-01;
  COFD[1763] = 1.77802244E-02;
  COFD[1764] = -1.72316133E+01;
  COFD[1765] = 4.24011069E+00;
  COFD[1766] = -3.37339810E-01;
  COFD[1767] = 1.46996679E-02;
  COFD[1768] = -2.11309194E+01;
  COFD[1769] = 5.41773516E+00;
  COFD[1770] = -4.73414338E-01;
  COFD[1771] = 1.99258685E-02;
  COFD[1772] = -2.11341641E+01;
  COFD[1773] = 5.41773516E+00;
  COFD[1774] = -4.73414338E-01;
  COFD[1775] = 1.99258685E-02;
  COFD[1776] = -1.96464488E+01;
  COFD[1777] = 4.87149639E+00;
  COFD[1778] = -4.13544849E-01;
  COFD[1779] = 1.77710516E-02;
  COFD[1780] = -1.96333360E+01;
  COFD[1781] = 4.87149639E+00;
  COFD[1782] = -4.13544849E-01;
  COFD[1783] = 1.77710516E-02;
  COFD[1784] = -1.99235836E+01;
  COFD[1785] = 4.95514826E+00;
  COFD[1786] = -4.23691395E-01;
  COFD[1787] = 1.81828318E-02;
  COFD[1788] = -1.99269591E+01;
  COFD[1789] = 4.95514826E+00;
  COFD[1790] = -4.23691395E-01;
  COFD[1791] = 1.81828318E-02;
  COFD[1792] = -1.99301980E+01;
  COFD[1793] = 4.95514826E+00;
  COFD[1794] = -4.23691395E-01;
  COFD[1795] = 1.81828318E-02;
  COFD[1796] = -2.09912989E+01;
  COFD[1797] = 5.28557747E+00;
  COFD[1798] = -4.61402384E-01;
  COFD[1799] = 1.96111546E-02;
  COFD[1800] = -1.47473013E+01;
  COFD[1801] = 3.30594991E+00;
  COFD[1802] = -2.18182207E-01;
  COFD[1803] = 9.61429447E-03;
  COFD[1804] = -1.85418525E+01;
  COFD[1805] = 4.59643893E+00;
  COFD[1806] = -3.80823304E-01;
  COFD[1807] = 1.64720603E-02;
  COFD[1808] = -1.91463450E+01;
  COFD[1809] = 4.78094221E+00;
  COFD[1810] = -4.02985837E-01;
  COFD[1811] = 1.73614221E-02;
  COFD[1812] = -1.91463450E+01;
  COFD[1813] = 4.78094221E+00;
  COFD[1814] = -4.02985837E-01;
  COFD[1815] = 1.73614221E-02;
  COFD[1816] = -1.91430977E+01;
  COFD[1817] = 4.78094221E+00;
  COFD[1818] = -4.02985837E-01;
  COFD[1819] = 1.73614221E-02;
  COFD[1820] = -2.13881929E+01;
  COFD[1821] = 5.52422470E+00;
  COFD[1822] = -4.84872944E-01;
  COFD[1823] = 2.03298213E-02;
  COFD[1824] = -2.14255154E+01;
  COFD[1825] = 5.52240865E+00;
  COFD[1826] = -4.84699537E-01;
  COFD[1827] = 2.03247833E-02;
  COFD[1828] = -2.04750606E+01;
  COFD[1829] = 5.23112374E+00;
  COFD[1830] = -4.54967682E-01;
  COFD[1831] = 1.93570423E-02;
  COFD[1832] = -1.97544605E+01;
  COFD[1833] = 5.56931926E+00;
  COFD[1834] = -4.89105511E-01;
  COFD[1835] = 2.04493129E-02;
  COFD[1836] = -1.94313018E+01;
  COFD[1837] = 5.02567894E+00;
  COFD[1838] = -4.32045169E-01;
  COFD[1839] = 1.85132214E-02;
  COFD[1840] = -1.94507789E+01;
  COFD[1841] = 5.02567894E+00;
  COFD[1842] = -4.32045169E-01;
  COFD[1843] = 1.85132214E-02;
  COFD[1844] = -2.08277510E+01;
  COFD[1845] = 5.35267674E+00;
  COFD[1846] = -4.69010505E-01;
  COFD[1847] = 1.98979152E-02;
  COFD[1848] = -1.60517517E+01;
  COFD[1849] = 4.11188603E+00;
  COFD[1850] = -3.21540884E-01;
  COFD[1851] = 1.40482564E-02;
  COFD[1852] = -1.77498465E+01;
  COFD[1853] = 3.57475686E+00;
  COFD[1854] = -1.56396297E-01;
  COFD[1855] = 3.12157721E-03;
  COFD[1856] = -2.08347318E+01;
  COFD[1857] = 5.35267674E+00;
  COFD[1858] = -4.69010505E-01;
  COFD[1859] = 1.98979152E-02;
  COFD[1860] = -2.08204356E+01;
  COFD[1861] = 5.35267674E+00;
  COFD[1862] = -4.69010505E-01;
  COFD[1863] = 1.98979152E-02;
  COFD[1864] = -2.14391914E+01;
  COFD[1865] = 5.56531152E+00;
  COFD[1866] = -4.88789821E-01;
  COFD[1867] = 2.04437116E-02;
  COFD[1868] = -2.14022312E+01;
  COFD[1869] = 5.55346617E+00;
  COFD[1870] = -4.87783156E-01;
  COFD[1871] = 2.04210886E-02;
  COFD[1872] = -1.90328637E+01;
  COFD[1873] = 3.99221757E+00;
  COFD[1874] = -2.19854880E-01;
  COFD[1875] = 6.22736279E-03;
  COFD[1876] = -1.90413276E+01;
  COFD[1877] = 3.99221757E+00;
  COFD[1878] = -2.19854880E-01;
  COFD[1879] = 6.22736279E-03;
  COFD[1880] = -2.01801599E+01;
  COFD[1881] = 4.53183330E+00;
  COFD[1882] = -3.02186760E-01;
  COFD[1883] = 1.02756490E-02;
  COFD[1884] = -1.93125597E+01;
  COFD[1885] = 4.10954793E+00;
  COFD[1886] = -2.37523329E-01;
  COFD[1887] = 7.08858141E-03;
  COFD[1888] = -2.05045498E+01;
  COFD[1889] = 5.23843909E+00;
  COFD[1890] = -4.55815614E-01;
  COFD[1891] = 1.93898040E-02;
  COFD[1892] = -2.19215472E+01;
  COFD[1893] = 5.45216133E+00;
  COFD[1894] = -4.52916925E-01;
  COFD[1895] = 1.80456400E-02;
  COFD[1896] = -2.19956299E+01;
  COFD[1897] = 5.55935694E+00;
  COFD[1898] = -4.74154740E-01;
  COFD[1899] = 1.92584304E-02;
  COFD[1900] = -2.20055495E+01;
  COFD[1901] = 5.55935694E+00;
  COFD[1902] = -4.74154740E-01;
  COFD[1903] = 1.92584304E-02;
  COFD[1904] = -2.16296327E+01;
  COFD[1905] = 5.29019717E+00;
  COFD[1906] = -4.24502606E-01;
  COFD[1907] = 1.65197343E-02;
  COFD[1908] = -2.19229146E+01;
  COFD[1909] = 5.41841631E+00;
  COFD[1910] = -4.46818971E-01;
  COFD[1911] = 1.77127652E-02;
  COFD[1912] = -2.19313596E+01;
  COFD[1913] = 5.41841631E+00;
  COFD[1914] = -4.46818971E-01;
  COFD[1915] = 1.77127652E-02;
  COFD[1916] = -2.14204113E+01;
  COFD[1917] = 5.59268435E+00;
  COFD[1918] = -4.91232974E-01;
  COFD[1919] = 2.05064746E-02;
  COFD[1920] = -2.00914970E+01;
  COFD[1921] = 4.41511629E+00;
  COFD[1922] = -2.84086963E-01;
  COFD[1923] = 9.37586971E-03;
  COFD[1924] = -2.00963017E+01;
  COFD[1925] = 4.41511629E+00;
  COFD[1926] = -2.84086963E-01;
  COFD[1927] = 9.37586971E-03;
  COFD[1928] = -2.21305345E+01;
  COFD[1929] = 5.41958743E+00;
  COFD[1930] = -4.47031040E-01;
  COFD[1931] = 1.77243470E-02;
  COFD[1932] = -2.21111508E+01;
  COFD[1933] = 5.41958743E+00;
  COFD[1934] = -4.47031040E-01;
  COFD[1935] = 1.77243470E-02;
  COFD[1936] = -2.20848512E+01;
  COFD[1937] = 5.36053938E+00;
  COFD[1938] = -4.36434519E-01;
  COFD[1939] = 1.71484255E-02;
  COFD[1940] = -2.20898344E+01;
  COFD[1941] = 5.36053938E+00;
  COFD[1942] = -4.36434519E-01;
  COFD[1943] = 1.71484255E-02;
  COFD[1944] = -2.20946312E+01;
  COFD[1945] = 5.36053938E+00;
  COFD[1946] = -4.36434519E-01;
  COFD[1947] = 1.71484255E-02;
  COFD[1948] = -2.13240709E+01;
  COFD[1949] = 4.87252053E+00;
  COFD[1950] = -3.56127804E-01;
  COFD[1951] = 1.29948788E-02;
  COFD[1952] = -1.91058045E+01;
  COFD[1953] = 4.86821670E+00;
  COFD[1954] = -4.13144121E-01;
  COFD[1955] = 1.77546701E-02;
  COFD[1956] = -2.19815087E+01;
  COFD[1957] = 5.58446511E+00;
  COFD[1958] = -4.79399331E-01;
  COFD[1959] = 1.95652693E-02;
  COFD[1960] = -2.19914948E+01;
  COFD[1961] = 5.49642957E+00;
  COFD[1962] = -4.61132993E-01;
  COFD[1963] = 1.85004773E-02;
  COFD[1964] = -2.19914948E+01;
  COFD[1965] = 5.49642957E+00;
  COFD[1966] = -4.61132993E-01;
  COFD[1967] = 1.85004773E-02;
  COFD[1968] = -2.19866865E+01;
  COFD[1969] = 5.49642957E+00;
  COFD[1970] = -4.61132993E-01;
  COFD[1971] = 1.85004773E-02;
  COFD[1972] = -1.93946871E+01;
  COFD[1973] = 4.10954793E+00;
  COFD[1974] = -2.37523329E-01;
  COFD[1975] = 7.08858141E-03;
  COFD[1976] = -2.14353342E+01;
  COFD[1977] = 5.52240865E+00;
  COFD[1978] = -4.84699537E-01;
  COFD[1979] = 2.03247833E-02;
  COFD[1980] = -2.04833743E+01;
  COFD[1981] = 5.23112374E+00;
  COFD[1982] = -4.54967682E-01;
  COFD[1983] = 1.93570423E-02;
  COFD[1984] = -1.97550243E+01;
  COFD[1985] = 5.56931926E+00;
  COFD[1986] = -4.89105511E-01;
  COFD[1987] = 2.04493129E-02;
  COFD[1988] = -1.94373032E+01;
  COFD[1989] = 5.02567894E+00;
  COFD[1990] = -4.32045169E-01;
  COFD[1991] = 1.85132214E-02;
  COFD[1992] = -1.94570202E+01;
  COFD[1993] = 5.02567894E+00;
  COFD[1994] = -4.32045169E-01;
  COFD[1995] = 1.85132214E-02;
  COFD[1996] = -2.08367641E+01;
  COFD[1997] = 5.35267674E+00;
  COFD[1998] = -4.69010505E-01;
  COFD[1999] = 1.98979152E-02;
  COFD[2000] = -1.60528433E+01;
  COFD[2001] = 4.11188603E+00;
  COFD[2002] = -3.21540884E-01;
  COFD[2003] = 1.40482564E-02;
  COFD[2004] = -1.77563175E+01;
  COFD[2005] = 3.57475686E+00;
  COFD[2006] = -1.56396297E-01;
  COFD[2007] = 3.12157721E-03;
  COFD[2008] = -2.08438728E+01;
  COFD[2009] = 5.35267674E+00;
  COFD[2010] = -4.69010505E-01;
  COFD[2011] = 1.98979152E-02;
  COFD[2012] = -2.08293167E+01;
  COFD[2013] = 5.35267674E+00;
  COFD[2014] = -4.69010505E-01;
  COFD[2015] = 1.98979152E-02;
  COFD[2016] = -2.14449532E+01;
  COFD[2017] = 5.56531152E+00;
  COFD[2018] = -4.88789821E-01;
  COFD[2019] = 2.04437116E-02;
  COFD[2020] = -2.14082433E+01;
  COFD[2021] = 5.55346617E+00;
  COFD[2022] = -4.87783156E-01;
  COFD[2023] = 2.04210886E-02;
  COFD[2024] = -1.90413276E+01;
  COFD[2025] = 3.99221757E+00;
  COFD[2026] = -2.19854880E-01;
  COFD[2027] = 6.22736279E-03;
  COFD[2028] = -1.90499374E+01;
  COFD[2029] = 3.99221757E+00;
  COFD[2030] = -2.19854880E-01;
  COFD[2031] = 6.22736279E-03;
  COFD[2032] = -2.01889105E+01;
  COFD[2033] = 4.53183330E+00;
  COFD[2034] = -3.02186760E-01;
  COFD[2035] = 1.02756490E-02;
  COFD[2036] = -1.93214466E+01;
  COFD[2037] = 4.10954793E+00;
  COFD[2038] = -2.37523329E-01;
  COFD[2039] = 7.08858141E-03;
  COFD[2040] = -2.05128629E+01;
  COFD[2041] = 5.23843909E+00;
  COFD[2042] = -4.55815614E-01;
  COFD[2043] = 1.93898040E-02;
  COFD[2044] = -2.19317665E+01;
  COFD[2045] = 5.45216133E+00;
  COFD[2046] = -4.52916925E-01;
  COFD[2047] = 1.80456400E-02;
  COFD[2048] = -2.20036321E+01;
  COFD[2049] = 5.55935694E+00;
  COFD[2050] = -4.74154740E-01;
  COFD[2051] = 1.92584304E-02;
  COFD[2052] = -2.20137133E+01;
  COFD[2053] = 5.55935694E+00;
  COFD[2054] = -4.74154740E-01;
  COFD[2055] = 1.92584304E-02;
  COFD[2056] = -2.16379525E+01;
  COFD[2057] = 5.29019717E+00;
  COFD[2058] = -4.24502606E-01;
  COFD[2059] = 1.65197343E-02;
  COFD[2060] = -2.19313850E+01;
  COFD[2061] = 5.41841631E+00;
  COFD[2062] = -4.46818971E-01;
  COFD[2063] = 1.77127652E-02;
  COFD[2064] = -2.19399756E+01;
  COFD[2065] = 5.41841631E+00;
  COFD[2066] = -4.46818971E-01;
  COFD[2067] = 1.77127652E-02;
  COFD[2068] = -2.14303411E+01;
  COFD[2069] = 5.59268435E+00;
  COFD[2070] = -4.91232974E-01;
  COFD[2071] = 2.05064746E-02;
  COFD[2072] = -2.01015275E+01;
  COFD[2073] = 4.41511629E+00;
  COFD[2074] = -2.84086963E-01;
  COFD[2075] = 9.37586971E-03;
  COFD[2076] = -2.01064300E+01;
  COFD[2077] = 4.41511629E+00;
  COFD[2078] = -2.84086963E-01;
  COFD[2079] = 9.37586971E-03;
  COFD[2080] = -2.21407579E+01;
  COFD[2081] = 5.41958743E+00;
  COFD[2082] = -4.47031040E-01;
  COFD[2083] = 1.77243470E-02;
  COFD[2084] = -2.21209816E+01;
  COFD[2085] = 5.41958743E+00;
  COFD[2086] = -4.47031040E-01;
  COFD[2087] = 1.77243470E-02;
  COFD[2088] = -2.20947854E+01;
  COFD[2089] = 5.36053938E+00;
  COFD[2090] = -4.36434519E-01;
  COFD[2091] = 1.71484255E-02;
  COFD[2092] = -2.20998692E+01;
  COFD[2093] = 5.36053938E+00;
  COFD[2094] = -4.36434519E-01;
  COFD[2095] = 1.71484255E-02;
  COFD[2096] = -2.21047637E+01;
  COFD[2097] = 5.36053938E+00;
  COFD[2098] = -4.36434519E-01;
  COFD[2099] = 1.71484255E-02;
  COFD[2100] = -2.13352587E+01;
  COFD[2101] = 4.87252053E+00;
  COFD[2102] = -3.56127804E-01;
  COFD[2103] = 1.29948788E-02;
  COFD[2104] = -1.91112992E+01;
  COFD[2105] = 4.86821670E+00;
  COFD[2106] = -4.13144121E-01;
  COFD[2107] = 1.77546701E-02;
  COFD[2108] = -2.19919092E+01;
  COFD[2109] = 5.58446511E+00;
  COFD[2110] = -4.79399331E-01;
  COFD[2111] = 1.95652693E-02;
  COFD[2112] = -2.20016211E+01;
  COFD[2113] = 5.49642957E+00;
  COFD[2114] = -4.61132993E-01;
  COFD[2115] = 1.85004773E-02;
  COFD[2116] = -2.20016211E+01;
  COFD[2117] = 5.49642957E+00;
  COFD[2118] = -4.61132993E-01;
  COFD[2119] = 1.85004773E-02;
  COFD[2120] = -2.19967149E+01;
  COFD[2121] = 5.49642957E+00;
  COFD[2122] = -4.61132993E-01;
  COFD[2123] = 1.85004773E-02;
  COFD[2124] = -1.94051772E+01;
  COFD[2125] = 4.10954793E+00;
  COFD[2126] = -2.37523329E-01;
  COFD[2127] = 7.08858141E-03;
  COFD[2128] = -2.10026942E+01;
  COFD[2129] = 5.38326647E+00;
  COFD[2130] = -4.71201048E-01;
  COFD[2131] = 1.99207516E-02;
  COFD[2132] = -2.02268939E+01;
  COFD[2133] = 5.13632099E+00;
  COFD[2134] = -4.44839130E-01;
  COFD[2135] = 1.90058356E-02;
  COFD[2136] = -1.92718738E+01;
  COFD[2137] = 5.41172124E+00;
  COFD[2138] = -4.73213887E-01;
  COFD[2139] = 1.99405473E-02;
  COFD[2140] = -1.88179325E+01;
  COFD[2141] = 4.79683898E+00;
  COFD[2142] = -4.04829719E-01;
  COFD[2143] = 1.74325475E-02;
  COFD[2144] = -1.88378792E+01;
  COFD[2145] = 4.79683898E+00;
  COFD[2146] = -4.04829719E-01;
  COFD[2147] = 1.74325475E-02;
  COFD[2148] = -2.02637913E+01;
  COFD[2149] = 5.14984081E+00;
  COFD[2150] = -4.46093018E-01;
  COFD[2151] = 1.90396647E-02;
  COFD[2152] = -1.58456453E+01;
  COFD[2153] = 4.02074796E+00;
  COFD[2154] = -3.10018539E-01;
  COFD[2155] = 1.35599559E-02;
  COFD[2156] = -1.65295191E+01;
  COFD[2157] = 2.97569077E+00;
  COFD[2158] = -6.75650795E-02;
  COFD[2159] = -1.08649440E-03;
  COFD[2160] = -2.02710239E+01;
  COFD[2161] = 5.14984081E+00;
  COFD[2162] = -4.46093018E-01;
  COFD[2163] = 1.90396647E-02;
  COFD[2164] = -2.04928875E+01;
  COFD[2165] = 5.22397941E+00;
  COFD[2166] = -4.54138181E-01;
  COFD[2167] = 1.93249289E-02;
  COFD[2168] = -2.09612533E+01;
  COFD[2169] = 5.40870099E+00;
  COFD[2170] = -4.73017610E-01;
  COFD[2171] = 1.99399066E-02;
  COFD[2172] = -2.11381493E+01;
  COFD[2173] = 5.45574448E+00;
  COFD[2174] = -4.77436163E-01;
  COFD[2175] = 2.00644599E-02;
  COFD[2176] = -2.01801599E+01;
  COFD[2177] = 4.53183330E+00;
  COFD[2178] = -3.02186760E-01;
  COFD[2179] = 1.02756490E-02;
  COFD[2180] = -2.01889105E+01;
  COFD[2181] = 4.53183330E+00;
  COFD[2182] = -3.02186760E-01;
  COFD[2183] = 1.02756490E-02;
  COFD[2184] = -1.95876943E+01;
  COFD[2185] = 4.27642977E+00;
  COFD[2186] = -2.68040785E-01;
  COFD[2187] = 8.77649540E-03;
  COFD[2188] = -2.03598994E+01;
  COFD[2189] = 4.60682543E+00;
  COFD[2190] = -3.13971634E-01;
  COFD[2191] = 1.08661011E-02;
  COFD[2192] = -2.02642156E+01;
  COFD[2193] = 5.14499744E+00;
  COFD[2194] = -4.45694433E-01;
  COFD[2195] = 1.90318647E-02;
  COFD[2196] = -2.20420967E+01;
  COFD[2197] = 5.52708328E+00;
  COFD[2198] = -4.68000799E-01;
  COFD[2199] = 1.89131903E-02;
  COFD[2200] = -2.19491665E+01;
  COFD[2201] = 5.59157589E+00;
  COFD[2202] = -4.85617912E-01;
  COFD[2203] = 2.00461138E-02;
  COFD[2204] = -2.19594037E+01;
  COFD[2205] = 5.59157589E+00;
  COFD[2206] = -4.85617912E-01;
  COFD[2207] = 2.00461138E-02;
  COFD[2208] = -2.19670810E+01;
  COFD[2209] = 5.48847873E+00;
  COFD[2210] = -4.59558930E-01;
  COFD[2211] = 1.84107961E-02;
  COFD[2212] = -2.21069995E+01;
  COFD[2213] = 5.55072945E+00;
  COFD[2214] = -4.72525345E-01;
  COFD[2215] = 1.91674202E-02;
  COFD[2216] = -2.21157308E+01;
  COFD[2217] = 5.55072945E+00;
  COFD[2218] = -4.72525345E-01;
  COFD[2219] = 1.91674202E-02;
  COFD[2220] = -2.09241584E+01;
  COFD[2221] = 5.42316225E+00;
  COFD[2222] = -4.73702801E-01;
  COFD[2223] = 1.99217718E-02;
  COFD[2224] = -2.09222393E+01;
  COFD[2225] = 4.82184721E+00;
  COFD[2226] = -3.48128875E-01;
  COFD[2227] = 1.25918978E-02;
  COFD[2228] = -2.09272370E+01;
  COFD[2229] = 4.82184721E+00;
  COFD[2230] = -3.48128875E-01;
  COFD[2231] = 1.25918978E-02;
  COFD[2232] = -2.23161833E+01;
  COFD[2233] = 5.55166300E+00;
  COFD[2234] = -4.72702482E-01;
  COFD[2235] = 1.91773349E-02;
  COFD[2236] = -2.22960253E+01;
  COFD[2237] = 5.55166300E+00;
  COFD[2238] = -4.72702482E-01;
  COFD[2239] = 1.91773349E-02;
  COFD[2240] = -2.23054103E+01;
  COFD[2241] = 5.50872500E+00;
  COFD[2242] = -4.64427323E-01;
  COFD[2243] = 1.87105612E-02;
  COFD[2244] = -2.23105918E+01;
  COFD[2245] = 5.50872500E+00;
  COFD[2246] = -4.64427323E-01;
  COFD[2247] = 1.87105612E-02;
  COFD[2248] = -2.23155813E+01;
  COFD[2249] = 5.50872500E+00;
  COFD[2250] = -4.64427323E-01;
  COFD[2251] = 1.87105612E-02;
  COFD[2252] = -2.19973126E+01;
  COFD[2253] = 5.21365421E+00;
  COFD[2254] = -4.11227771E-01;
  COFD[2255] = 1.58122118E-02;
  COFD[2256] = -1.85699398E+01;
  COFD[2257] = 4.67076124E+00;
  COFD[2258] = -3.90022427E-01;
  COFD[2259] = 1.68533953E-02;
  COFD[2260] = -2.19270866E+01;
  COFD[2261] = 5.60963444E+00;
  COFD[2262] = -4.89805286E-01;
  COFD[2263] = 2.03017681E-02;
  COFD[2264] = -2.20823256E+01;
  COFD[2265] = 5.58518321E+00;
  COFD[2266] = -4.80534235E-01;
  COFD[2267] = 1.96556393E-02;
  COFD[2268] = -2.20823256E+01;
  COFD[2269] = 5.58518321E+00;
  COFD[2270] = -4.80534235E-01;
  COFD[2271] = 1.96556393E-02;
  COFD[2272] = -2.20773242E+01;
  COFD[2273] = 5.58518321E+00;
  COFD[2274] = -4.80534235E-01;
  COFD[2275] = 1.96556393E-02;
  COFD[2276] = -2.04451868E+01;
  COFD[2277] = 4.60682543E+00;
  COFD[2278] = -3.13971634E-01;
  COFD[2279] = 1.08661011E-02;
  COFD[2280] = -2.13502433E+01;
  COFD[2281] = 5.48617067E+00;
  COFD[2282] = -4.80816776E-01;
  COFD[2283] = 2.01887868E-02;
  COFD[2284] = -2.03844292E+01;
  COFD[2285] = 5.18856872E+00;
  COFD[2286] = -4.50001829E-01;
  COFD[2287] = 1.91636142E-02;
  COFD[2288] = -1.96866259E+01;
  COFD[2289] = 5.54637286E+00;
  COFD[2290] = -4.87070324E-01;
  COFD[2291] = 2.03983467E-02;
  COFD[2292] = -1.93364494E+01;
  COFD[2293] = 4.98286777E+00;
  COFD[2294] = -4.26970814E-01;
  COFD[2295] = 1.83122917E-02;
  COFD[2296] = -1.93566163E+01;
  COFD[2297] = 4.98286777E+00;
  COFD[2298] = -4.26970814E-01;
  COFD[2299] = 1.83122917E-02;
  COFD[2300] = -2.07672755E+01;
  COFD[2301] = 5.32244593E+00;
  COFD[2302] = -4.65829403E-01;
  COFD[2303] = 1.97895274E-02;
  COFD[2304] = -1.59537397E+01;
  COFD[2305] = 4.07051484E+00;
  COFD[2306] = -3.16303109E-01;
  COFD[2307] = 1.38259377E-02;
  COFD[2308] = -1.80253593E+01;
  COFD[2309] = 3.69199168E+00;
  COFD[2310] = -1.74005516E-01;
  COFD[2311] = 3.97694372E-03;
  COFD[2312] = -2.07746282E+01;
  COFD[2313] = 5.32244593E+00;
  COFD[2314] = -4.65829403E-01;
  COFD[2315] = 1.97895274E-02;
  COFD[2316] = -2.07595763E+01;
  COFD[2317] = 5.32244593E+00;
  COFD[2318] = -4.65829403E-01;
  COFD[2319] = 1.97895274E-02;
  COFD[2320] = -2.13777287E+01;
  COFD[2321] = 5.54007827E+00;
  COFD[2322] = -4.86434511E-01;
  COFD[2323] = 2.03779006E-02;
  COFD[2324] = -2.13319769E+01;
  COFD[2325] = 5.52422470E+00;
  COFD[2326] = -4.84872944E-01;
  COFD[2327] = 2.03298213E-02;
  COFD[2328] = -1.93125597E+01;
  COFD[2329] = 4.10954793E+00;
  COFD[2330] = -2.37523329E-01;
  COFD[2331] = 7.08858141E-03;
  COFD[2332] = -1.93214466E+01;
  COFD[2333] = 4.10954793E+00;
  COFD[2334] = -2.37523329E-01;
  COFD[2335] = 7.08858141E-03;
  COFD[2336] = -2.03598994E+01;
  COFD[2337] = 4.60682543E+00;
  COFD[2338] = -3.13971634E-01;
  COFD[2339] = 1.08661011E-02;
  COFD[2340] = -1.95785091E+01;
  COFD[2341] = 4.22062499E+00;
  COFD[2342] = -2.54326872E-01;
  COFD[2343] = 7.91017784E-03;
  COFD[2344] = -2.04144534E+01;
  COFD[2345] = 5.19614628E+00;
  COFD[2346] = -4.50889164E-01;
  COFD[2347] = 1.91983328E-02;
  COFD[2348] = -2.20063523E+01;
  COFD[2349] = 5.48540187E+00;
  COFD[2350] = -4.58962148E-01;
  COFD[2351] = 1.83770355E-02;
  COFD[2352] = -2.20488281E+01;
  COFD[2353] = 5.58129885E+00;
  COFD[2354] = -4.78532921E-01;
  COFD[2355] = 1.95095699E-02;
  COFD[2356] = -2.20592159E+01;
  COFD[2357] = 5.58129885E+00;
  COFD[2358] = -4.78532921E-01;
  COFD[2359] = 1.95095699E-02;
  COFD[2360] = -2.17419173E+01;
  COFD[2361] = 5.33732875E+00;
  COFD[2362] = -4.32453425E-01;
  COFD[2363] = 1.69373833E-02;
  COFD[2364] = -2.20028153E+01;
  COFD[2365] = 5.45178028E+00;
  COFD[2366] = -4.52847771E-01;
  COFD[2367] = 1.80418544E-02;
  COFD[2368] = -2.20116826E+01;
  COFD[2369] = 5.45178028E+00;
  COFD[2370] = -4.52847771E-01;
  COFD[2371] = 1.80418544E-02;
  COFD[2372] = -2.13796243E+01;
  COFD[2373] = 5.56978987E+00;
  COFD[2374] = -4.89141980E-01;
  COFD[2375] = 2.04499210E-02;
  COFD[2376] = -2.03036345E+01;
  COFD[2377] = 4.50250781E+00;
  COFD[2378] = -2.97622106E-01;
  COFD[2379] = 1.00481473E-02;
  COFD[2380] = -2.03087248E+01;
  COFD[2381] = 4.50250781E+00;
  COFD[2382] = -2.97622106E-01;
  COFD[2383] = 1.00481473E-02;
  COFD[2384] = -2.22150651E+01;
  COFD[2385] = 5.45297208E+00;
  COFD[2386] = -4.53064157E-01;
  COFD[2387] = 1.80537024E-02;
  COFD[2388] = -2.21945357E+01;
  COFD[2389] = 5.45297208E+00;
  COFD[2390] = -4.53064157E-01;
  COFD[2391] = 1.80537024E-02;
  COFD[2392] = -2.21793407E+01;
  COFD[2393] = 5.39861129E+00;
  COFD[2394] = -4.43119198E-01;
  COFD[2395] = 1.75075657E-02;
  COFD[2396] = -2.21846173E+01;
  COFD[2397] = 5.39861129E+00;
  COFD[2398] = -4.43119198E-01;
  COFD[2399] = 1.75075657E-02;
  COFD[2400] = -2.21896993E+01;
  COFD[2401] = 5.39861129E+00;
  COFD[2402] = -4.43119198E-01;
  COFD[2403] = 1.75075657E-02;
  COFD[2404] = -2.15116655E+01;
  COFD[2405] = 4.94878244E+00;
  COFD[2406] = -3.68158605E-01;
  COFD[2407] = 1.36008797E-02;
  COFD[2408] = -1.90218811E+01;
  COFD[2409] = 4.83076737E+00;
  COFD[2410] = -4.08802573E-01;
  COFD[2411] = 1.75875241E-02;
  COFD[2412] = -2.19932273E+01;
  COFD[2413] = 5.58514538E+00;
  COFD[2414] = -4.80745077E-01;
  COFD[2415] = 1.96733087E-02;
  COFD[2416] = -2.20212539E+01;
  COFD[2417] = 5.50583166E+00;
  COFD[2418] = -4.63753262E-01;
  COFD[2419] = 1.86693462E-02;
  COFD[2420] = -2.20212539E+01;
  COFD[2421] = 5.50583166E+00;
  COFD[2422] = -4.63753262E-01;
  COFD[2423] = 1.86693462E-02;
  COFD[2424] = -2.20161598E+01;
  COFD[2425] = 5.50583166E+00;
  COFD[2426] = -4.63753262E-01;
  COFD[2427] = 1.86693462E-02;
  COFD[2428] = -1.96653091E+01;
  COFD[2429] = 4.22062499E+00;
  COFD[2430] = -2.54326872E-01;
  COFD[2431] = 7.91017784E-03;
  COFD[2432] = -1.60074270E+01;
  COFD[2433] = 3.63723937E+00;
  COFD[2434] = -2.60754222E-01;
  COFD[2435] = 1.14428814E-02;
  COFD[2436] = -1.50031706E+01;
  COFD[2437] = 3.26223357E+00;
  COFD[2438] = -2.12746642E-01;
  COFD[2439] = 9.38912883E-03;
  COFD[2440] = -1.43151328E+01;
  COFD[2441] = 3.68038508E+00;
  COFD[2442] = -2.65779346E-01;
  COFD[2443] = 1.16360771E-02;
  COFD[2444] = -1.40998907E+01;
  COFD[2445] = 3.08120012E+00;
  COFD[2446] = -1.89629903E-01;
  COFD[2447] = 8.40361952E-03;
  COFD[2448] = -1.41191170E+01;
  COFD[2449] = 3.08120012E+00;
  COFD[2450] = -1.89629903E-01;
  COFD[2451] = 8.40361952E-03;
  COFD[2452] = -1.52792799E+01;
  COFD[2453] = 3.36790500E+00;
  COFD[2454] = -2.26321740E-01;
  COFD[2455] = 9.97135055E-03;
  COFD[2456] = -1.17159884E+01;
  COFD[2457] = 2.48123210E+00;
  COFD[2458] = -1.11322604E-01;
  COFD[2459] = 4.99282389E-03;
  COFD[2460] = -2.11388255E+01;
  COFD[2461] = 5.55529689E+00;
  COFD[2462] = -4.87942530E-01;
  COFD[2463] = 2.04249057E-02;
  COFD[2464] = -1.52861287E+01;
  COFD[2465] = 3.36790500E+00;
  COFD[2466] = -2.26321740E-01;
  COFD[2467] = 9.97135055E-03;
  COFD[2468] = -1.52721010E+01;
  COFD[2469] = 3.36790500E+00;
  COFD[2470] = -2.26321740E-01;
  COFD[2471] = 9.97135055E-03;
  COFD[2472] = -1.59862997E+01;
  COFD[2473] = 3.67388294E+00;
  COFD[2474] = -2.64990709E-01;
  COFD[2475] = 1.16042706E-02;
  COFD[2476] = -1.59525075E+01;
  COFD[2477] = 3.66023858E+00;
  COFD[2478] = -2.63401043E-01;
  COFD[2479] = 1.15432000E-02;
  COFD[2480] = -2.05045498E+01;
  COFD[2481] = 5.23843909E+00;
  COFD[2482] = -4.55815614E-01;
  COFD[2483] = 1.93898040E-02;
  COFD[2484] = -2.05128629E+01;
  COFD[2485] = 5.23843909E+00;
  COFD[2486] = -4.55815614E-01;
  COFD[2487] = 1.93898040E-02;
  COFD[2488] = -2.02642156E+01;
  COFD[2489] = 5.14499744E+00;
  COFD[2490] = -4.45694433E-01;
  COFD[2491] = 1.90318647E-02;
  COFD[2492] = -2.04144534E+01;
  COFD[2493] = 5.19614628E+00;
  COFD[2494] = -4.50889164E-01;
  COFD[2495] = 1.91983328E-02;
  COFD[2496] = -1.50233391E+01;
  COFD[2497] = 3.26660767E+00;
  COFD[2498] = -2.13287177E-01;
  COFD[2499] = 9.41137857E-03;
  COFD[2500] = -1.81735675E+01;
  COFD[2501] = 4.38391495E+00;
  COFD[2502] = -3.54941287E-01;
  COFD[2503] = 1.54195107E-02;
  COFD[2504] = -1.76285583E+01;
  COFD[2505] = 4.19935698E+00;
  COFD[2506] = -3.32310212E-01;
  COFD[2507] = 1.44920670E-02;
  COFD[2508] = -1.76383102E+01;
  COFD[2509] = 4.19935698E+00;
  COFD[2510] = -3.32310212E-01;
  COFD[2511] = 1.44920670E-02;
  COFD[2512] = -1.86157710E+01;
  COFD[2513] = 4.55689508E+00;
  COFD[2514] = -3.75937921E-01;
  COFD[2515] = 1.62703488E-02;
  COFD[2516] = -1.83455387E+01;
  COFD[2517] = 4.42828044E+00;
  COFD[2518] = -3.60417833E-01;
  COFD[2519] = 1.56455103E-02;
  COFD[2520] = -1.83538331E+01;
  COFD[2521] = 4.42828044E+00;
  COFD[2522] = -3.60417833E-01;
  COFD[2523] = 1.56455103E-02;
  COFD[2524] = -1.60261598E+01;
  COFD[2525] = 3.73312045E+00;
  COFD[2526] = -2.72579779E-01;
  COFD[2527] = 1.19290272E-02;
  COFD[2528] = -2.02922626E+01;
  COFD[2529] = 5.11106992E+00;
  COFD[2530] = -4.42047129E-01;
  COFD[2531] = 1.89042990E-02;
  COFD[2532] = -2.02969667E+01;
  COFD[2533] = 5.11106992E+00;
  COFD[2534] = -4.42047129E-01;
  COFD[2535] = 1.89042990E-02;
  COFD[2536] = -1.85444853E+01;
  COFD[2537] = 4.42668307E+00;
  COFD[2538] = -3.60220573E-01;
  COFD[2539] = 1.56373683E-02;
  COFD[2540] = -1.85255055E+01;
  COFD[2541] = 4.42668307E+00;
  COFD[2542] = -3.60220573E-01;
  COFD[2543] = 1.56373683E-02;
  COFD[2544] = -1.87684982E+01;
  COFD[2545] = 4.49191492E+00;
  COFD[2546] = -3.68041771E-01;
  COFD[2547] = 1.59498676E-02;
  COFD[2548] = -1.87733780E+01;
  COFD[2549] = 4.49191492E+00;
  COFD[2550] = -3.68041771E-01;
  COFD[2551] = 1.59498676E-02;
  COFD[2552] = -1.87780743E+01;
  COFD[2553] = 4.49191492E+00;
  COFD[2554] = -3.68041771E-01;
  COFD[2555] = 1.59498676E-02;
  COFD[2556] = -1.98832169E+01;
  COFD[2557] = 4.84731557E+00;
  COFD[2558] = -4.10638352E-01;
  COFD[2559] = 1.76543886E-02;
  COFD[2560] = -1.39388102E+01;
  COFD[2561] = 2.97564184E+00;
  COFD[2562] = -1.76025309E-01;
  COFD[2563] = 7.81869993E-03;
  COFD[2564] = -1.74527809E+01;
  COFD[2565] = 4.14792932E+00;
  COFD[2566] = -3.25920382E-01;
  COFD[2567] = 1.42261620E-02;
  COFD[2568] = -1.80021491E+01;
  COFD[2569] = 4.31656593E+00;
  COFD[2570] = -3.46539554E-01;
  COFD[2571] = 1.50688196E-02;
  COFD[2572] = -1.80021491E+01;
  COFD[2573] = 4.31656593E+00;
  COFD[2574] = -3.46539554E-01;
  COFD[2575] = 1.50688196E-02;
  COFD[2576] = -1.79974415E+01;
  COFD[2577] = 4.31656593E+00;
  COFD[2578] = -3.46539554E-01;
  COFD[2579] = 1.50688196E-02;
  COFD[2580] = -2.04949292E+01;
  COFD[2581] = 5.19614628E+00;
  COFD[2582] = -4.50889164E-01;
  COFD[2583] = 1.91983328E-02;
  COFD[2584] = -1.93483786E+01;
  COFD[2585] = 4.79506290E+00;
  COFD[2586] = -4.04621659E-01;
  COFD[2587] = 1.74244230E-02;
  COFD[2588] = -1.81432499E+01;
  COFD[2589] = 4.37565431E+00;
  COFD[2590] = -3.53906025E-01;
  COFD[2591] = 1.53760786E-02;
  COFD[2592] = -1.76147183E+01;
  COFD[2593] = 4.86049500E+00;
  COFD[2594] = -4.12200578E-01;
  COFD[2595] = 1.77160971E-02;
  COFD[2596] = -1.70534750E+01;
  COFD[2597] = 4.14240922E+00;
  COFD[2598] = -3.25239774E-01;
  COFD[2599] = 1.41980687E-02;
  COFD[2600] = -1.70756953E+01;
  COFD[2601] = 4.14240922E+00;
  COFD[2602] = -3.25239774E-01;
  COFD[2603] = 1.41980687E-02;
  COFD[2604] = -1.84777509E+01;
  COFD[2605] = 4.49330851E+00;
  COFD[2606] = -3.68208715E-01;
  COFD[2607] = 1.59565402E-02;
  COFD[2608] = -1.37794466E+01;
  COFD[2609] = 3.23973858E+00;
  COFD[2610] = -2.09989036E-01;
  COFD[2611] = 9.27667906E-03;
  COFD[2612] = -2.07653629E+01;
  COFD[2613] = 5.01091988E+00;
  COFD[2614] = -3.77985581E-01;
  COFD[2615] = 1.40968617E-02;
  COFD[2616] = -1.84862906E+01;
  COFD[2617] = 4.49330851E+00;
  COFD[2618] = -3.68208715E-01;
  COFD[2619] = 1.59565402E-02;
  COFD[2620] = -1.84688303E+01;
  COFD[2621] = 4.49330851E+00;
  COFD[2622] = -3.68208715E-01;
  COFD[2623] = 1.59565402E-02;
  COFD[2624] = -1.93276406E+01;
  COFD[2625] = 4.85015581E+00;
  COFD[2626] = -4.10945109E-01;
  COFD[2627] = 1.76651398E-02;
  COFD[2628] = -1.92867532E+01;
  COFD[2629] = 4.83375900E+00;
  COFD[2630] = -4.09146560E-01;
  COFD[2631] = 1.76006599E-02;
  COFD[2632] = -2.19215472E+01;
  COFD[2633] = 5.45216133E+00;
  COFD[2634] = -4.52916925E-01;
  COFD[2635] = 1.80456400E-02;
  COFD[2636] = -2.19317665E+01;
  COFD[2637] = 5.45216133E+00;
  COFD[2638] = -4.52916925E-01;
  COFD[2639] = 1.80456400E-02;
  COFD[2640] = -2.20420967E+01;
  COFD[2641] = 5.52708328E+00;
  COFD[2642] = -4.68000799E-01;
  COFD[2643] = 1.89131903E-02;
  COFD[2644] = -2.20063523E+01;
  COFD[2645] = 5.48540187E+00;
  COFD[2646] = -4.58962148E-01;
  COFD[2647] = 1.83770355E-02;
  COFD[2648] = -1.81735675E+01;
  COFD[2649] = 4.38391495E+00;
  COFD[2650] = -3.54941287E-01;
  COFD[2651] = 1.54195107E-02;
  COFD[2652] = -2.13425604E+01;
  COFD[2653] = 5.40460130E+00;
  COFD[2654] = -4.72718910E-01;
  COFD[2655] = 1.99362717E-02;
  COFD[2656] = -2.09191230E+01;
  COFD[2657] = 5.30153901E+00;
  COFD[2658] = -4.63335119E-01;
  COFD[2659] = 1.96897053E-02;
  COFD[2660] = -2.09309702E+01;
  COFD[2661] = 5.30153901E+00;
  COFD[2662] = -4.63335119E-01;
  COFD[2663] = 1.96897053E-02;
  COFD[2664] = -2.16802565E+01;
  COFD[2665] = 5.52918296E+00;
  COFD[2666] = -4.85360709E-01;
  COFD[2667] = 2.03448006E-02;
  COFD[2668] = -2.14224440E+01;
  COFD[2669] = 5.41729961E+00;
  COFD[2670] = -4.73400281E-01;
  COFD[2671] = 1.99269567E-02;
  COFD[2672] = -2.14326420E+01;
  COFD[2673] = 5.41729961E+00;
  COFD[2674] = -4.73400281E-01;
  COFD[2675] = 1.99269567E-02;
  COFD[2676] = -1.94485902E+01;
  COFD[2677] = 4.91446566E+00;
  COFD[2678] = -4.18837152E-01;
  COFD[2679] = 1.79893537E-02;
  COFD[2680] = -2.22116629E+01;
  COFD[2681] = 5.54251230E+00;
  COFD[2682] = -4.70946314E-01;
  COFD[2683] = 1.90785869E-02;
  COFD[2684] = -2.22176875E+01;
  COFD[2685] = 5.54251230E+00;
  COFD[2686] = -4.70946314E-01;
  COFD[2687] = 1.90785869E-02;
  COFD[2688] = -2.16458314E+01;
  COFD[2689] = 5.41694410E+00;
  COFD[2690] = -4.73389041E-01;
  COFD[2691] = 1.99278645E-02;
  COFD[2692] = -2.16215581E+01;
  COFD[2693] = 5.41694410E+00;
  COFD[2694] = -4.73389041E-01;
  COFD[2695] = 1.99278645E-02;
  COFD[2696] = -2.18590684E+01;
  COFD[2697] = 5.47368915E+00;
  COFD[2698] = -4.79424291E-01;
  COFD[2699] = 2.01372920E-02;
  COFD[2700] = -2.18653022E+01;
  COFD[2701] = 5.47368915E+00;
  COFD[2702] = -4.79424291E-01;
  COFD[2703] = 2.01372920E-02;
  COFD[2704] = -2.18713176E+01;
  COFD[2705] = 5.47368915E+00;
  COFD[2706] = -4.79424291E-01;
  COFD[2707] = 2.01372920E-02;
  COFD[2708] = -2.25018696E+01;
  COFD[2709] = 5.59178974E+00;
  COFD[2710] = -4.85668031E-01;
  COFD[2711] = 2.00491907E-02;
  COFD[2712] = -1.67983988E+01;
  COFD[2713] = 4.00828594E+00;
  COFD[2714] = -3.08414344E-01;
  COFD[2715] = 1.34907430E-02;
  COFD[2716] = -2.07349578E+01;
  COFD[2717] = 5.23705932E+00;
  COFD[2718] = -4.55655792E-01;
  COFD[2719] = 1.93836339E-02;
  COFD[2720] = -2.12614490E+01;
  COFD[2721] = 5.38135645E+00;
  COFD[2722] = -4.71058360E-01;
  COFD[2723] = 1.99188046E-02;
  COFD[2724] = -2.12614490E+01;
  COFD[2725] = 5.38135645E+00;
  COFD[2726] = -4.71058360E-01;
  COFD[2727] = 1.99188046E-02;
  COFD[2728] = -2.12554201E+01;
  COFD[2729] = 5.38135645E+00;
  COFD[2730] = -4.71058360E-01;
  COFD[2731] = 1.99188046E-02;
  COFD[2732] = -2.21082949E+01;
  COFD[2733] = 5.48540187E+00;
  COFD[2734] = -4.58962148E-01;
  COFD[2735] = 1.83770355E-02;
  COFD[2736] = -1.87717415E+01;
  COFD[2737] = 4.61078776E+00;
  COFD[2738] = -3.82625667E-01;
  COFD[2739] = 1.65478601E-02;
  COFD[2740] = -1.76002073E+01;
  COFD[2741] = 4.19171952E+00;
  COFD[2742] = -3.31354810E-01;
  COFD[2743] = 1.44520623E-02;
  COFD[2744] = -1.72232379E+01;
  COFD[2745] = 4.69060745E+00;
  COFD[2746] = -3.92369888E-01;
  COFD[2747] = 1.69459661E-02;
  COFD[2748] = -1.65488277E+01;
  COFD[2749] = 3.95035840E+00;
  COFD[2750] = -3.00959418E-01;
  COFD[2751] = 1.31692593E-02;
  COFD[2752] = -1.65675292E+01;
  COFD[2753] = 3.95035840E+00;
  COFD[2754] = -3.00959418E-01;
  COFD[2755] = 1.31692593E-02;
  COFD[2756] = -1.78903850E+01;
  COFD[2757] = 4.29613154E+00;
  COFD[2758] = -3.44012526E-01;
  COFD[2759] = 1.49643715E-02;
  COFD[2760] = -1.34709956E+01;
  COFD[2761] = 3.09379603E+00;
  COFD[2762] = -1.91268635E-01;
  COFD[2763] = 8.47480224E-03;
  COFD[2764] = -2.15095920E+01;
  COFD[2765] = 5.46737673E+00;
  COFD[2766] = -4.55696085E-01;
  COFD[2767] = 1.81982625E-02;
  COFD[2768] = -1.78969625E+01;
  COFD[2769] = 4.29613154E+00;
  COFD[2770] = -3.44012526E-01;
  COFD[2771] = 1.49643715E-02;
  COFD[2772] = -1.78834868E+01;
  COFD[2773] = 4.29613154E+00;
  COFD[2774] = -3.44012526E-01;
  COFD[2775] = 1.49643715E-02;
  COFD[2776] = -1.88463801E+01;
  COFD[2777] = 4.68393046E+00;
  COFD[2778] = -3.91610863E-01;
  COFD[2779] = 1.69174645E-02;
  COFD[2780] = -1.87897289E+01;
  COFD[2781] = 4.66162351E+00;
  COFD[2782] = -3.88920477E-01;
  COFD[2783] = 1.68089648E-02;
  COFD[2784] = -2.19956299E+01;
  COFD[2785] = 5.55935694E+00;
  COFD[2786] = -4.74154740E-01;
  COFD[2787] = 1.92584304E-02;
  COFD[2788] = -2.20036321E+01;
  COFD[2789] = 5.55935694E+00;
  COFD[2790] = -4.74154740E-01;
  COFD[2791] = 1.92584304E-02;
  COFD[2792] = -2.19491665E+01;
  COFD[2793] = 5.59157589E+00;
  COFD[2794] = -4.85617912E-01;
  COFD[2795] = 2.00461138E-02;
  COFD[2796] = -2.20488281E+01;
  COFD[2797] = 5.58129885E+00;
  COFD[2798] = -4.78532921E-01;
  COFD[2799] = 1.95095699E-02;
  COFD[2800] = -1.76285583E+01;
  COFD[2801] = 4.19935698E+00;
  COFD[2802] = -3.32310212E-01;
  COFD[2803] = 1.44920670E-02;
  COFD[2804] = -2.09191230E+01;
  COFD[2805] = 5.30153901E+00;
  COFD[2806] = -4.63335119E-01;
  COFD[2807] = 1.96897053E-02;
  COFD[2808] = -2.03766918E+01;
  COFD[2809] = 5.13263469E+00;
  COFD[2810] = -4.44457285E-01;
  COFD[2811] = 1.89932102E-02;
  COFD[2812] = -2.03860971E+01;
  COFD[2813] = 5.13263469E+00;
  COFD[2814] = -4.44457285E-01;
  COFD[2815] = 1.89932102E-02;
  COFD[2816] = -2.12121345E+01;
  COFD[2817] = 5.39823225E+00;
  COFD[2818] = -4.72294645E-01;
  COFD[2819] = 1.99340225E-02;
  COFD[2820] = -2.10864229E+01;
  COFD[2821] = 5.34286099E+00;
  COFD[2822] = -4.68100992E-01;
  COFD[2823] = 1.98731399E-02;
  COFD[2824] = -2.10944068E+01;
  COFD[2825] = 5.34286099E+00;
  COFD[2826] = -4.68100992E-01;
  COFD[2827] = 1.98731399E-02;
  COFD[2828] = -1.88646025E+01;
  COFD[2829] = 4.72476764E+00;
  COFD[2830] = -3.96306836E-01;
  COFD[2831] = 1.70964541E-02;
  COFD[2832] = -2.21065263E+01;
  COFD[2833] = 5.58360799E+00;
  COFD[2834] = -4.82701436E-01;
  COFD[2835] = 1.98437922E-02;
  COFD[2836] = -2.21110249E+01;
  COFD[2837] = 5.58360799E+00;
  COFD[2838] = -4.82701436E-01;
  COFD[2839] = 1.98437922E-02;
  COFD[2840] = -2.12766837E+01;
  COFD[2841] = 5.34173603E+00;
  COFD[2842] = -4.67980991E-01;
  COFD[2843] = 1.98689682E-02;
  COFD[2844] = -2.12585287E+01;
  COFD[2845] = 5.34173603E+00;
  COFD[2846] = -4.67980991E-01;
  COFD[2847] = 1.98689682E-02;
  COFD[2848] = -2.14323161E+01;
  COFD[2849] = 5.37331605E+00;
  COFD[2850] = -4.70491203E-01;
  COFD[2851] = 1.99134666E-02;
  COFD[2852] = -2.14369847E+01;
  COFD[2853] = 5.37331605E+00;
  COFD[2854] = -4.70491203E-01;
  COFD[2855] = 1.99134666E-02;
  COFD[2856] = -2.14414758E+01;
  COFD[2857] = 5.37331605E+00;
  COFD[2858] = -4.70491203E-01;
  COFD[2859] = 1.99134666E-02;
  COFD[2860] = -2.22817317E+01;
  COFD[2861] = 5.59185582E+00;
  COFD[2862] = -4.91155812E-01;
  COFD[2863] = 2.05043018E-02;
  COFD[2864] = -1.61614949E+01;
  COFD[2865] = 3.75910622E+00;
  COFD[2866] = -2.75986578E-01;
  COFD[2867] = 1.20782843E-02;
  COFD[2868] = -2.02024001E+01;
  COFD[2869] = 5.08408346E+00;
  COFD[2870] = -4.38907391E-01;
  COFD[2871] = 1.87824789E-02;
  COFD[2872] = -2.07294288E+01;
  COFD[2873] = 5.23116678E+00;
  COFD[2874] = -4.54972675E-01;
  COFD[2875] = 1.93572354E-02;
  COFD[2876] = -2.07294288E+01;
  COFD[2877] = 5.23116678E+00;
  COFD[2878] = -4.54972675E-01;
  COFD[2879] = 1.93572354E-02;
  COFD[2880] = -2.07249267E+01;
  COFD[2881] = 5.23116678E+00;
  COFD[2882] = -4.54972675E-01;
  COFD[2883] = 1.93572354E-02;
  COFD[2884] = -2.21259240E+01;
  COFD[2885] = 5.58129885E+00;
  COFD[2886] = -4.78532921E-01;
  COFD[2887] = 1.95095699E-02;
  COFD[2888] = -1.87831526E+01;
  COFD[2889] = 4.61078776E+00;
  COFD[2890] = -3.82625667E-01;
  COFD[2891] = 1.65478601E-02;
  COFD[2892] = -1.76099599E+01;
  COFD[2893] = 4.19171952E+00;
  COFD[2894] = -3.31354810E-01;
  COFD[2895] = 1.44520623E-02;
  COFD[2896] = -1.72239329E+01;
  COFD[2897] = 4.69060745E+00;
  COFD[2898] = -3.92369888E-01;
  COFD[2899] = 1.69459661E-02;
  COFD[2900] = -1.65559708E+01;
  COFD[2901] = 3.95035840E+00;
  COFD[2902] = -3.00959418E-01;
  COFD[2903] = 1.31692593E-02;
  COFD[2904] = -1.65749465E+01;
  COFD[2905] = 3.95035840E+00;
  COFD[2906] = -3.00959418E-01;
  COFD[2907] = 1.31692593E-02;
  COFD[2908] = -1.79009121E+01;
  COFD[2909] = 4.29613154E+00;
  COFD[2910] = -3.44012526E-01;
  COFD[2911] = 1.49643715E-02;
  COFD[2912] = -1.34723365E+01;
  COFD[2913] = 3.09379603E+00;
  COFD[2914] = -1.91268635E-01;
  COFD[2915] = 8.47480224E-03;
  COFD[2916] = -2.15172712E+01;
  COFD[2917] = 5.46737673E+00;
  COFD[2918] = -4.55696085E-01;
  COFD[2919] = 1.81982625E-02;
  COFD[2920] = -1.79076305E+01;
  COFD[2921] = 4.29613154E+00;
  COFD[2922] = -3.44012526E-01;
  COFD[2923] = 1.49643715E-02;
  COFD[2924] = -1.78938681E+01;
  COFD[2925] = 4.29613154E+00;
  COFD[2926] = -3.44012526E-01;
  COFD[2927] = 1.49643715E-02;
  COFD[2928] = -1.88532484E+01;
  COFD[2929] = 4.68393046E+00;
  COFD[2930] = -3.91610863E-01;
  COFD[2931] = 1.69174645E-02;
  COFD[2932] = -1.87968842E+01;
  COFD[2933] = 4.66162351E+00;
  COFD[2934] = -3.88920477E-01;
  COFD[2935] = 1.68089648E-02;
  COFD[2936] = -2.20055495E+01;
  COFD[2937] = 5.55935694E+00;
  COFD[2938] = -4.74154740E-01;
  COFD[2939] = 1.92584304E-02;
  COFD[2940] = -2.20137133E+01;
  COFD[2941] = 5.55935694E+00;
  COFD[2942] = -4.74154740E-01;
  COFD[2943] = 1.92584304E-02;
  COFD[2944] = -2.19594037E+01;
  COFD[2945] = 5.59157589E+00;
  COFD[2946] = -4.85617912E-01;
  COFD[2947] = 2.00461138E-02;
  COFD[2948] = -2.20592159E+01;
  COFD[2949] = 5.58129885E+00;
  COFD[2950] = -4.78532921E-01;
  COFD[2951] = 1.95095699E-02;
  COFD[2952] = -1.76383102E+01;
  COFD[2953] = 4.19935698E+00;
  COFD[2954] = -3.32310212E-01;
  COFD[2955] = 1.44920670E-02;
  COFD[2956] = -2.09309702E+01;
  COFD[2957] = 5.30153901E+00;
  COFD[2958] = -4.63335119E-01;
  COFD[2959] = 1.96897053E-02;
  COFD[2960] = -2.03860971E+01;
  COFD[2961] = 5.13263469E+00;
  COFD[2962] = -4.44457285E-01;
  COFD[2963] = 1.89932102E-02;
  COFD[2964] = -2.03956828E+01;
  COFD[2965] = 5.13263469E+00;
  COFD[2966] = -4.44457285E-01;
  COFD[2967] = 1.89932102E-02;
  COFD[2968] = -2.12218938E+01;
  COFD[2969] = 5.39823225E+00;
  COFD[2970] = -4.72294645E-01;
  COFD[2971] = 1.99340225E-02;
  COFD[2972] = -2.10963496E+01;
  COFD[2973] = 5.34286099E+00;
  COFD[2974] = -4.68100992E-01;
  COFD[2975] = 1.98731399E-02;
  COFD[2976] = -2.11044949E+01;
  COFD[2977] = 5.34286099E+00;
  COFD[2978] = -4.68100992E-01;
  COFD[2979] = 1.98731399E-02;
  COFD[2980] = -1.88761346E+01;
  COFD[2981] = 4.72476764E+00;
  COFD[2982] = -3.96306836E-01;
  COFD[2983] = 1.70964541E-02;
  COFD[2984] = -2.21181680E+01;
  COFD[2985] = 5.58360799E+00;
  COFD[2986] = -4.82701436E-01;
  COFD[2987] = 1.98437922E-02;
  COFD[2988] = -2.21227731E+01;
  COFD[2989] = 5.58360799E+00;
  COFD[2990] = -4.82701436E-01;
  COFD[2991] = 1.98437922E-02;
  COFD[2992] = -2.12885353E+01;
  COFD[2993] = 5.34173603E+00;
  COFD[2994] = -4.67980991E-01;
  COFD[2995] = 1.98689682E-02;
  COFD[2996] = -2.12699528E+01;
  COFD[2997] = 5.34173603E+00;
  COFD[2998] = -4.67980991E-01;
  COFD[2999] = 1.98689682E-02;
  COFD[3000] = -2.14438531E+01;
  COFD[3001] = 5.37331605E+00;
  COFD[3002] = -4.70491203E-01;
  COFD[3003] = 1.99134666E-02;
  COFD[3004] = -2.14486311E+01;
  COFD[3005] = 5.37331605E+00;
  COFD[3006] = -4.70491203E-01;
  COFD[3007] = 1.99134666E-02;
  COFD[3008] = -2.14532286E+01;
  COFD[3009] = 5.37331605E+00;
  COFD[3010] = -4.70491203E-01;
  COFD[3011] = 1.99134666E-02;
  COFD[3012] = -2.22946247E+01;
  COFD[3013] = 5.59185582E+00;
  COFD[3014] = -4.91155812E-01;
  COFD[3015] = 2.05043018E-02;
  COFD[3016] = -1.61680559E+01;
  COFD[3017] = 3.75910622E+00;
  COFD[3018] = -2.75986578E-01;
  COFD[3019] = 1.20782843E-02;
  COFD[3020] = -2.02144438E+01;
  COFD[3021] = 5.08408346E+00;
  COFD[3022] = -4.38907391E-01;
  COFD[3023] = 1.87824789E-02;
  COFD[3024] = -2.07411749E+01;
  COFD[3025] = 5.23116678E+00;
  COFD[3026] = -4.54972675E-01;
  COFD[3027] = 1.93572354E-02;
  COFD[3028] = -2.07411749E+01;
  COFD[3029] = 5.23116678E+00;
  COFD[3030] = -4.54972675E-01;
  COFD[3031] = 1.93572354E-02;
  COFD[3032] = -2.07365663E+01;
  COFD[3033] = 5.23116678E+00;
  COFD[3034] = -4.54972675E-01;
  COFD[3035] = 1.93572354E-02;
  COFD[3036] = -2.21380648E+01;
  COFD[3037] = 5.58129885E+00;
  COFD[3038] = -4.78532921E-01;
  COFD[3039] = 1.95095699E-02;
  COFD[3040] = -1.98040420E+01;
  COFD[3041] = 4.97569695E+00;
  COFD[3042] = -4.26123307E-01;
  COFD[3043] = 1.82788664E-02;
  COFD[3044] = -1.85864196E+01;
  COFD[3045] = 4.54915847E+00;
  COFD[3046] = -3.75000738E-01;
  COFD[3047] = 1.62324821E-02;
  COFD[3048] = -1.82252070E+01;
  COFD[3049] = 5.05237312E+00;
  COFD[3050] = -4.35182396E-01;
  COFD[3051] = 1.86363074E-02;
  COFD[3052] = -1.74792034E+01;
  COFD[3053] = 4.29676909E+00;
  COFD[3054] = -3.44085306E-01;
  COFD[3055] = 1.49671135E-02;
  COFD[3056] = -1.74984410E+01;
  COFD[3057] = 4.29676909E+00;
  COFD[3058] = -3.44085306E-01;
  COFD[3059] = 1.49671135E-02;
  COFD[3060] = -1.89616566E+01;
  COFD[3061] = 4.68595732E+00;
  COFD[3062] = -3.91842840E-01;
  COFD[3063] = 1.69262542E-02;
  COFD[3064] = -1.42229344E+01;
  COFD[3065] = 3.38669384E+00;
  COFD[3066] = -2.28784122E-01;
  COFD[3067] = 1.00790953E-02;
  COFD[3068] = -2.08812277E+01;
  COFD[3069] = 5.08859217E+00;
  COFD[3070] = -3.90525428E-01;
  COFD[3071] = 1.47376395E-02;
  COFD[3072] = -1.89685112E+01;
  COFD[3073] = 4.68595732E+00;
  COFD[3074] = -3.91842840E-01;
  COFD[3075] = 1.69262542E-02;
  COFD[3076] = -1.89544717E+01;
  COFD[3077] = 4.68595732E+00;
  COFD[3078] = -3.91842840E-01;
  COFD[3079] = 1.69262542E-02;
  COFD[3080] = -1.98646724E+01;
  COFD[3081] = 5.04367502E+00;
  COFD[3082] = -4.34153325E-01;
  COFD[3083] = 1.85956055E-02;
  COFD[3084] = -1.98075051E+01;
  COFD[3085] = 5.02169524E+00;
  COFD[3086] = -4.31582804E-01;
  COFD[3087] = 1.84953568E-02;
  COFD[3088] = -2.16296327E+01;
  COFD[3089] = 5.29019717E+00;
  COFD[3090] = -4.24502606E-01;
  COFD[3091] = 1.65197343E-02;
  COFD[3092] = -2.16379525E+01;
  COFD[3093] = 5.29019717E+00;
  COFD[3094] = -4.24502606E-01;
  COFD[3095] = 1.65197343E-02;
  COFD[3096] = -2.19670810E+01;
  COFD[3097] = 5.48847873E+00;
  COFD[3098] = -4.59558930E-01;
  COFD[3099] = 1.84107961E-02;
  COFD[3100] = -2.17419173E+01;
  COFD[3101] = 5.33732875E+00;
  COFD[3102] = -4.32453425E-01;
  COFD[3103] = 1.69373833E-02;
  COFD[3104] = -1.86157710E+01;
  COFD[3105] = 4.55689508E+00;
  COFD[3106] = -3.75937921E-01;
  COFD[3107] = 1.62703488E-02;
  COFD[3108] = -2.16802565E+01;
  COFD[3109] = 5.52918296E+00;
  COFD[3110] = -4.85360709E-01;
  COFD[3111] = 2.03448006E-02;
  COFD[3112] = -2.12121345E+01;
  COFD[3113] = 5.39823225E+00;
  COFD[3114] = -4.72294645E-01;
  COFD[3115] = 1.99340225E-02;
  COFD[3116] = -2.12218938E+01;
  COFD[3117] = 5.39823225E+00;
  COFD[3118] = -4.72294645E-01;
  COFD[3119] = 1.99340225E-02;
  COFD[3120] = -2.19327379E+01;
  COFD[3121] = 5.60638188E+00;
  COFD[3122] = -4.91272522E-01;
  COFD[3123] = 2.04396264E-02;
  COFD[3124] = -2.18190524E+01;
  COFD[3125] = 5.55753905E+00;
  COFD[3126] = -4.88136714E-01;
  COFD[3127] = 2.04294957E-02;
  COFD[3128] = -2.18273535E+01;
  COFD[3129] = 5.55753905E+00;
  COFD[3130] = -4.88136714E-01;
  COFD[3131] = 2.04294957E-02;
  COFD[3132] = -1.99081518E+01;
  COFD[3133] = 5.09311649E+00;
  COFD[3134] = -4.39965178E-01;
  COFD[3135] = 1.88238537E-02;
  COFD[3136] = -2.20453687E+01;
  COFD[3137] = 5.44448440E+00;
  COFD[3138] = -4.51529024E-01;
  COFD[3139] = 1.79698119E-02;
  COFD[3140] = -2.20500773E+01;
  COFD[3141] = 5.44448440E+00;
  COFD[3142] = -4.51529024E-01;
  COFD[3143] = 1.79698119E-02;
  COFD[3144] = -2.20153774E+01;
  COFD[3145] = 5.55674298E+00;
  COFD[3146] = -4.88067739E-01;
  COFD[3147] = 2.04278640E-02;
  COFD[3148] = -2.19963797E+01;
  COFD[3149] = 5.55674298E+00;
  COFD[3150] = -4.88067739E-01;
  COFD[3151] = 2.04278640E-02;
  COFD[3152] = -2.21885121E+01;
  COFD[3153] = 5.59472344E+00;
  COFD[3154] = -4.91421518E-01;
  COFD[3155] = 2.05117088E-02;
  COFD[3156] = -2.21933965E+01;
  COFD[3157] = 5.59472344E+00;
  COFD[3158] = -4.91421518E-01;
  COFD[3159] = 2.05117088E-02;
  COFD[3160] = -2.21980972E+01;
  COFD[3161] = 5.59472344E+00;
  COFD[3162] = -4.91421518E-01;
  COFD[3163] = 2.05117088E-02;
  COFD[3164] = -2.25171753E+01;
  COFD[3165] = 5.58249828E+00;
  COFD[3166] = -4.78873376E-01;
  COFD[3167] = 1.95316774E-02;
  COFD[3168] = -1.72409761E+01;
  COFD[3169] = 4.17190426E+00;
  COFD[3170] = -3.28894681E-01;
  COFD[3171] = 1.43498101E-02;
  COFD[3172] = -2.10998079E+01;
  COFD[3173] = 5.37657006E+00;
  COFD[3174] = -4.70707921E-01;
  COFD[3175] = 1.99145326E-02;
  COFD[3176] = -2.15270515E+01;
  COFD[3177] = 5.47662534E+00;
  COFD[3178] = -4.79750189E-01;
  COFD[3179] = 2.01492627E-02;
  COFD[3180] = -2.15270515E+01;
  COFD[3181] = 5.47662534E+00;
  COFD[3182] = -4.79750189E-01;
  COFD[3183] = 2.01492627E-02;
  COFD[3184] = -2.15223395E+01;
  COFD[3185] = 5.47662534E+00;
  COFD[3186] = -4.79750189E-01;
  COFD[3187] = 2.01492627E-02;
  COFD[3188] = -2.18224662E+01;
  COFD[3189] = 5.33732875E+00;
  COFD[3190] = -4.32453425E-01;
  COFD[3191] = 1.69373833E-02;
  COFD[3192] = -1.94928919E+01;
  COFD[3193] = 4.83189721E+00;
  COFD[3194] = -4.08932249E-01;
  COFD[3195] = 1.75924650E-02;
  COFD[3196] = -1.83166409E+01;
  COFD[3197] = 4.42045763E+00;
  COFD[3198] = -3.59451578E-01;
  COFD[3199] = 1.56056164E-02;
  COFD[3200] = -1.79339484E+01;
  COFD[3201] = 4.91373893E+00;
  COFD[3202] = -4.18747629E-01;
  COFD[3203] = 1.79856610E-02;
  COFD[3204] = -1.72496558E+01;
  COFD[3205] = 4.17889917E+00;
  COFD[3206] = -3.29752510E-01;
  COFD[3207] = 1.43850275E-02;
  COFD[3208] = -1.72691436E+01;
  COFD[3209] = 4.17889917E+00;
  COFD[3210] = -3.29752510E-01;
  COFD[3211] = 1.43850275E-02;
  COFD[3212] = -1.86409085E+01;
  COFD[3213] = 4.53572533E+00;
  COFD[3214] = -3.73386925E-01;
  COFD[3215] = 1.61678881E-02;
  COFD[3216] = -1.39914049E+01;
  COFD[3217] = 3.26384506E+00;
  COFD[3218] = -2.12947087E-01;
  COFD[3219] = 9.39743888E-03;
  COFD[3220] = -2.12597258E+01;
  COFD[3221] = 5.24930667E+00;
  COFD[3222] = -4.17435088E-01;
  COFD[3223] = 1.61434424E-02;
  COFD[3224] = -1.86478950E+01;
  COFD[3225] = 4.53572533E+00;
  COFD[3226] = -3.73386925E-01;
  COFD[3227] = 1.61678881E-02;
  COFD[3228] = -1.86335873E+01;
  COFD[3229] = 4.53572533E+00;
  COFD[3230] = -3.73386925E-01;
  COFD[3231] = 1.61678881E-02;
  COFD[3232] = -1.95494660E+01;
  COFD[3233] = 4.90255048E+00;
  COFD[3234] = -4.17368501E-01;
  COFD[3235] = 1.79287358E-02;
  COFD[3236] = -1.94763687E+01;
  COFD[3237] = 4.87333294E+00;
  COFD[3238] = -4.13769241E-01;
  COFD[3239] = 1.77802244E-02;
  COFD[3240] = -2.19229146E+01;
  COFD[3241] = 5.41841631E+00;
  COFD[3242] = -4.46818971E-01;
  COFD[3243] = 1.77127652E-02;
  COFD[3244] = -2.19313850E+01;
  COFD[3245] = 5.41841631E+00;
  COFD[3246] = -4.46818971E-01;
  COFD[3247] = 1.77127652E-02;
  COFD[3248] = -2.21069995E+01;
  COFD[3249] = 5.55072945E+00;
  COFD[3250] = -4.72525345E-01;
  COFD[3251] = 1.91674202E-02;
  COFD[3252] = -2.20028153E+01;
  COFD[3253] = 5.45178028E+00;
  COFD[3254] = -4.52847771E-01;
  COFD[3255] = 1.80418544E-02;
  COFD[3256] = -1.83455387E+01;
  COFD[3257] = 4.42828044E+00;
  COFD[3258] = -3.60417833E-01;
  COFD[3259] = 1.56455103E-02;
  COFD[3260] = -2.14224440E+01;
  COFD[3261] = 5.41729961E+00;
  COFD[3262] = -4.73400281E-01;
  COFD[3263] = 1.99269567E-02;
  COFD[3264] = -2.10864229E+01;
  COFD[3265] = 5.34286099E+00;
  COFD[3266] = -4.68100992E-01;
  COFD[3267] = 1.98731399E-02;
  COFD[3268] = -2.10963496E+01;
  COFD[3269] = 5.34286099E+00;
  COFD[3270] = -4.68100992E-01;
  COFD[3271] = 1.98731399E-02;
  COFD[3272] = -2.18190524E+01;
  COFD[3273] = 5.55753905E+00;
  COFD[3274] = -4.88136714E-01;
  COFD[3275] = 2.04294957E-02;
  COFD[3276] = -2.15575647E+01;
  COFD[3277] = 5.44803850E+00;
  COFD[3278] = -4.76610560E-01;
  COFD[3279] = 2.00355294E-02;
  COFD[3280] = -2.15660162E+01;
  COFD[3281] = 5.44803850E+00;
  COFD[3282] = -4.76610560E-01;
  COFD[3283] = 2.00355294E-02;
  COFD[3284] = -1.96309007E+01;
  COFD[3285] = 4.95923807E+00;
  COFD[3286] = -4.24176182E-01;
  COFD[3287] = 1.82020215E-02;
  COFD[3288] = -2.22059507E+01;
  COFD[3289] = 5.51722375E+00;
  COFD[3290] = -4.66081431E-01;
  COFD[3291] = 1.88044011E-02;
  COFD[3292] = -2.22107598E+01;
  COFD[3293] = 5.51722375E+00;
  COFD[3294] = -4.66081431E-01;
  COFD[3295] = 1.88044011E-02;
  COFD[3296] = -2.17498669E+01;
  COFD[3297] = 5.44645703E+00;
  COFD[3298] = -4.76428229E-01;
  COFD[3299] = 2.00285047E-02;
  COFD[3300] = -2.17304659E+01;
  COFD[3301] = 5.44645703E+00;
  COFD[3302] = -4.76428229E-01;
  COFD[3303] = 2.00285047E-02;
  COFD[3304] = -2.19883773E+01;
  COFD[3305] = 5.51276597E+00;
  COFD[3306] = -4.83701824E-01;
  COFD[3307] = 2.02915297E-02;
  COFD[3308] = -2.19933650E+01;
  COFD[3309] = 5.51276597E+00;
  COFD[3310] = -4.83701824E-01;
  COFD[3311] = 2.02915297E-02;
  COFD[3312] = -2.19981661E+01;
  COFD[3313] = 5.51276597E+00;
  COFD[3314] = -4.83701824E-01;
  COFD[3315] = 2.02915297E-02;
  COFD[3316] = -2.25007852E+01;
  COFD[3317] = 5.58206320E+00;
  COFD[3318] = -4.82956809E-01;
  COFD[3319] = 1.98731634E-02;
  COFD[3320] = -1.70022486E+01;
  COFD[3321] = 4.05099737E+00;
  COFD[3322] = -3.13841660E-01;
  COFD[3323] = 1.37218854E-02;
  COFD[3324] = -2.08992599E+01;
  COFD[3325] = 5.28495077E+00;
  COFD[3326] = -4.61326381E-01;
  COFD[3327] = 1.96080621E-02;
  COFD[3328] = -2.13502458E+01;
  COFD[3329] = 5.39784038E+00;
  COFD[3330] = -4.72269379E-01;
  COFD[3331] = 1.99339592E-02;
  COFD[3332] = -2.13502458E+01;
  COFD[3333] = 5.39784038E+00;
  COFD[3334] = -4.72269379E-01;
  COFD[3335] = 1.99339592E-02;
  COFD[3336] = -2.13454331E+01;
  COFD[3337] = 5.39784038E+00;
  COFD[3338] = -4.72269379E-01;
  COFD[3339] = 1.99339592E-02;
  COFD[3340] = -2.20850137E+01;
  COFD[3341] = 5.45178028E+00;
  COFD[3342] = -4.52847771E-01;
  COFD[3343] = 1.80418544E-02;
  COFD[3344] = -1.95026899E+01;
  COFD[3345] = 4.83189721E+00;
  COFD[3346] = -4.08932249E-01;
  COFD[3347] = 1.75924650E-02;
  COFD[3348] = -1.83249359E+01;
  COFD[3349] = 4.42045763E+00;
  COFD[3350] = -3.59451578E-01;
  COFD[3351] = 1.56056164E-02;
  COFD[3352] = -1.79345106E+01;
  COFD[3353] = 4.91373893E+00;
  COFD[3354] = -4.18747629E-01;
  COFD[3355] = 1.79856610E-02;
  COFD[3356] = -1.72556425E+01;
  COFD[3357] = 4.17889917E+00;
  COFD[3358] = -3.29752510E-01;
  COFD[3359] = 1.43850275E-02;
  COFD[3360] = -1.72753698E+01;
  COFD[3361] = 4.17889917E+00;
  COFD[3362] = -3.29752510E-01;
  COFD[3363] = 1.43850275E-02;
  COFD[3364] = -1.86499019E+01;
  COFD[3365] = 4.53572533E+00;
  COFD[3366] = -3.73386925E-01;
  COFD[3367] = 1.61678881E-02;
  COFD[3368] = -1.39924933E+01;
  COFD[3369] = 3.26384506E+00;
  COFD[3370] = -2.12947087E-01;
  COFD[3371] = 9.39743888E-03;
  COFD[3372] = -2.12661812E+01;
  COFD[3373] = 5.24930667E+00;
  COFD[3374] = -4.17435088E-01;
  COFD[3375] = 1.61434424E-02;
  COFD[3376] = -1.86570161E+01;
  COFD[3377] = 4.53572533E+00;
  COFD[3378] = -3.73386925E-01;
  COFD[3379] = 1.61678881E-02;
  COFD[3380] = -1.86424488E+01;
  COFD[3381] = 4.53572533E+00;
  COFD[3382] = -3.73386925E-01;
  COFD[3383] = 1.61678881E-02;
  COFD[3384] = -1.95552136E+01;
  COFD[3385] = 4.90255048E+00;
  COFD[3386] = -4.17368501E-01;
  COFD[3387] = 1.79287358E-02;
  COFD[3388] = -1.94823661E+01;
  COFD[3389] = 4.87333294E+00;
  COFD[3390] = -4.13769241E-01;
  COFD[3391] = 1.77802244E-02;
  COFD[3392] = -2.19313596E+01;
  COFD[3393] = 5.41841631E+00;
  COFD[3394] = -4.46818971E-01;
  COFD[3395] = 1.77127652E-02;
  COFD[3396] = -2.19399756E+01;
  COFD[3397] = 5.41841631E+00;
  COFD[3398] = -4.46818971E-01;
  COFD[3399] = 1.77127652E-02;
  COFD[3400] = -2.21157308E+01;
  COFD[3401] = 5.55072945E+00;
  COFD[3402] = -4.72525345E-01;
  COFD[3403] = 1.91674202E-02;
  COFD[3404] = -2.20116826E+01;
  COFD[3405] = 5.45178028E+00;
  COFD[3406] = -4.52847771E-01;
  COFD[3407] = 1.80418544E-02;
  COFD[3408] = -1.83538331E+01;
  COFD[3409] = 4.42828044E+00;
  COFD[3410] = -3.60417833E-01;
  COFD[3411] = 1.56455103E-02;
  COFD[3412] = -2.14326420E+01;
  COFD[3413] = 5.41729961E+00;
  COFD[3414] = -4.73400281E-01;
  COFD[3415] = 1.99269567E-02;
  COFD[3416] = -2.10944068E+01;
  COFD[3417] = 5.34286099E+00;
  COFD[3418] = -4.68100992E-01;
  COFD[3419] = 1.98731399E-02;
  COFD[3420] = -2.11044949E+01;
  COFD[3421] = 5.34286099E+00;
  COFD[3422] = -4.68100992E-01;
  COFD[3423] = 1.98731399E-02;
  COFD[3424] = -2.18273535E+01;
  COFD[3425] = 5.55753905E+00;
  COFD[3426] = -4.88136714E-01;
  COFD[3427] = 2.04294957E-02;
  COFD[3428] = -2.15660162E+01;
  COFD[3429] = 5.44803850E+00;
  COFD[3430] = -4.76610560E-01;
  COFD[3431] = 2.00355294E-02;
  COFD[3432] = -2.15746130E+01;
  COFD[3433] = 5.44803850E+00;
  COFD[3434] = -4.76610560E-01;
  COFD[3435] = 2.00355294E-02;
  COFD[3436] = -1.96408096E+01;
  COFD[3437] = 4.95923807E+00;
  COFD[3438] = -4.24176182E-01;
  COFD[3439] = 1.82020215E-02;
  COFD[3440] = -2.22159601E+01;
  COFD[3441] = 5.51722375E+00;
  COFD[3442] = -4.66081431E-01;
  COFD[3443] = 1.88044011E-02;
  COFD[3444] = -2.22208668E+01;
  COFD[3445] = 5.51722375E+00;
  COFD[3446] = -4.66081431E-01;
  COFD[3447] = 1.88044011E-02;
  COFD[3448] = -2.17600690E+01;
  COFD[3449] = 5.44645703E+00;
  COFD[3450] = -4.76428229E-01;
  COFD[3451] = 2.00285047E-02;
  COFD[3452] = -2.17402758E+01;
  COFD[3453] = 5.44645703E+00;
  COFD[3454] = -4.76428229E-01;
  COFD[3455] = 2.00285047E-02;
  COFD[3456] = -2.19982906E+01;
  COFD[3457] = 5.51276597E+00;
  COFD[3458] = -4.83701824E-01;
  COFD[3459] = 2.02915297E-02;
  COFD[3460] = -2.20033786E+01;
  COFD[3461] = 5.51276597E+00;
  COFD[3462] = -4.83701824E-01;
  COFD[3463] = 2.02915297E-02;
  COFD[3464] = -2.20082773E+01;
  COFD[3465] = 5.51276597E+00;
  COFD[3466] = -4.83701824E-01;
  COFD[3467] = 2.02915297E-02;
  COFD[3468] = -2.25119507E+01;
  COFD[3469] = 5.58206320E+00;
  COFD[3470] = -4.82956809E-01;
  COFD[3471] = 1.98731634E-02;
  COFD[3472] = -1.70077296E+01;
  COFD[3473] = 4.05099737E+00;
  COFD[3474] = -3.13841660E-01;
  COFD[3475] = 1.37218854E-02;
  COFD[3476] = -2.09096388E+01;
  COFD[3477] = 5.28495077E+00;
  COFD[3478] = -4.61326381E-01;
  COFD[3479] = 1.96080621E-02;
  COFD[3480] = -2.13603509E+01;
  COFD[3481] = 5.39784038E+00;
  COFD[3482] = -4.72269379E-01;
  COFD[3483] = 1.99339592E-02;
  COFD[3484] = -2.13603509E+01;
  COFD[3485] = 5.39784038E+00;
  COFD[3486] = -4.72269379E-01;
  COFD[3487] = 1.99339592E-02;
  COFD[3488] = -2.13554405E+01;
  COFD[3489] = 5.39784038E+00;
  COFD[3490] = -4.72269379E-01;
  COFD[3491] = 1.99339592E-02;
  COFD[3492] = -2.20954821E+01;
  COFD[3493] = 5.45178028E+00;
  COFD[3494] = -4.52847771E-01;
  COFD[3495] = 1.80418544E-02;
  COFD[3496] = -1.72570708E+01;
  COFD[3497] = 4.19757624E+00;
  COFD[3498] = -3.32087529E-01;
  COFD[3499] = 1.44827462E-02;
  COFD[3500] = -1.59884349E+01;
  COFD[3501] = 3.72220402E+00;
  COFD[3502] = -2.71150591E-01;
  COFD[3503] = 1.18665265E-02;
  COFD[3504] = -1.54460977E+01;
  COFD[3505] = 4.26819983E+00;
  COFD[3506] = -3.40766379E-01;
  COFD[3507] = 1.48393361E-02;
  COFD[3508] = -1.49500258E+01;
  COFD[3509] = 3.52327209E+00;
  COFD[3510] = -2.46286208E-01;
  COFD[3511] = 1.08285963E-02;
  COFD[3512] = -1.49718147E+01;
  COFD[3513] = 3.52327209E+00;
  COFD[3514] = -2.46286208E-01;
  COFD[3515] = 1.08285963E-02;
  COFD[3516] = -1.64255877E+01;
  COFD[3517] = 3.89309916E+00;
  COFD[3518] = -2.93528188E-01;
  COFD[3519] = 1.28463177E-02;
  COFD[3520] = -1.22004476E+01;
  COFD[3521] = 2.80725489E+00;
  COFD[3522] = -1.54291406E-01;
  COFD[3523] = 6.88290911E-03;
  COFD[3524] = -2.10440599E+01;
  COFD[3525] = 5.59806282E+00;
  COFD[3526] = -4.87109535E-01;
  COFD[3527] = 2.01370226E-02;
  COFD[3528] = -1.64338675E+01;
  COFD[3529] = 3.89309916E+00;
  COFD[3530] = -2.93528188E-01;
  COFD[3531] = 1.28463177E-02;
  COFD[3532] = -1.64169341E+01;
  COFD[3533] = 3.89309916E+00;
  COFD[3534] = -2.93528188E-01;
  COFD[3535] = 1.28463177E-02;
  COFD[3536] = -1.72828280E+01;
  COFD[3537] = 4.26063341E+00;
  COFD[3538] = -3.39848064E-01;
  COFD[3539] = 1.48021313E-02;
  COFD[3540] = -1.72316133E+01;
  COFD[3541] = 4.24011069E+00;
  COFD[3542] = -3.37339810E-01;
  COFD[3543] = 1.46996679E-02;
  COFD[3544] = -2.14204113E+01;
  COFD[3545] = 5.59268435E+00;
  COFD[3546] = -4.91232974E-01;
  COFD[3547] = 2.05064746E-02;
  COFD[3548] = -2.14303411E+01;
  COFD[3549] = 5.59268435E+00;
  COFD[3550] = -4.91232974E-01;
  COFD[3551] = 2.05064746E-02;
  COFD[3552] = -2.09241584E+01;
  COFD[3553] = 5.42316225E+00;
  COFD[3554] = -4.73702801E-01;
  COFD[3555] = 1.99217718E-02;
  COFD[3556] = -2.13796243E+01;
  COFD[3557] = 5.56978987E+00;
  COFD[3558] = -4.89141980E-01;
  COFD[3559] = 2.04499210E-02;
  COFD[3560] = -1.60261598E+01;
  COFD[3561] = 3.73312045E+00;
  COFD[3562] = -2.72579779E-01;
  COFD[3563] = 1.19290272E-02;
  COFD[3564] = -1.94485902E+01;
  COFD[3565] = 4.91446566E+00;
  COFD[3566] = -4.18837152E-01;
  COFD[3567] = 1.79893537E-02;
  COFD[3568] = -1.88646025E+01;
  COFD[3569] = 4.72476764E+00;
  COFD[3570] = -3.96306836E-01;
  COFD[3571] = 1.70964541E-02;
  COFD[3572] = -1.88761346E+01;
  COFD[3573] = 4.72476764E+00;
  COFD[3574] = -3.96306836E-01;
  COFD[3575] = 1.70964541E-02;
  COFD[3576] = -1.99081518E+01;
  COFD[3577] = 5.09311649E+00;
  COFD[3578] = -4.39965178E-01;
  COFD[3579] = 1.88238537E-02;
  COFD[3580] = -1.96309007E+01;
  COFD[3581] = 4.95923807E+00;
  COFD[3582] = -4.24176182E-01;
  COFD[3583] = 1.82020215E-02;
  COFD[3584] = -1.96408096E+01;
  COFD[3585] = 4.95923807E+00;
  COFD[3586] = -4.24176182E-01;
  COFD[3587] = 1.82020215E-02;
  COFD[3588] = -1.72414795E+01;
  COFD[3589] = 4.29808578E+00;
  COFD[3590] = -3.44235570E-01;
  COFD[3591] = 1.49727727E-02;
  COFD[3592] = -2.12621849E+01;
  COFD[3593] = 5.47935225E+00;
  COFD[3594] = -4.80056796E-01;
  COFD[3595] = 2.01607180E-02;
  COFD[3596] = -2.12680019E+01;
  COFD[3597] = 5.47935225E+00;
  COFD[3598] = -4.80056796E-01;
  COFD[3599] = 2.01607180E-02;
  COFD[3600] = -1.98678674E+01;
  COFD[3601] = 4.95769834E+00;
  COFD[3602] = -4.23993658E-01;
  COFD[3603] = 1.81947960E-02;
  COFD[3604] = -1.98444255E+01;
  COFD[3605] = 4.95769834E+00;
  COFD[3606] = -4.23993658E-01;
  COFD[3607] = 1.81947960E-02;
  COFD[3608] = -2.01223105E+01;
  COFD[3609] = 5.03101171E+00;
  COFD[3610] = -4.32665019E-01;
  COFD[3611] = 1.85372086E-02;
  COFD[3612] = -2.01283319E+01;
  COFD[3613] = 5.03101171E+00;
  COFD[3614] = -4.32665019E-01;
  COFD[3615] = 1.85372086E-02;
  COFD[3616] = -2.01341398E+01;
  COFD[3617] = 5.03101171E+00;
  COFD[3618] = -4.32665019E-01;
  COFD[3619] = 1.85372086E-02;
  COFD[3620] = -2.12151921E+01;
  COFD[3621] = 5.35335833E+00;
  COFD[3622] = -4.69065665E-01;
  COFD[3623] = 1.98989604E-02;
  COFD[3624] = -1.47490941E+01;
  COFD[3625] = 3.39229020E+00;
  COFD[3626] = -2.29520232E-01;
  COFD[3627] = 1.01114311E-02;
  COFD[3628] = -1.86961022E+01;
  COFD[3629] = 4.67999453E+00;
  COFD[3630] = -3.91135253E-01;
  COFD[3631] = 1.68982388E-02;
  COFD[3632] = -1.92638665E+01;
  COFD[3633] = 4.84335373E+00;
  COFD[3634] = -4.10212751E-01;
  COFD[3635] = 1.76395874E-02;
  COFD[3636] = -1.92638665E+01;
  COFD[3637] = 4.84335373E+00;
  COFD[3638] = -4.10212751E-01;
  COFD[3639] = 1.76395874E-02;
  COFD[3640] = -1.92580454E+01;
  COFD[3641] = 4.84335373E+00;
  COFD[3642] = -4.10212751E-01;
  COFD[3643] = 1.76395874E-02;
  COFD[3644] = -2.14782205E+01;
  COFD[3645] = 5.56978987E+00;
  COFD[3646] = -4.89141980E-01;
  COFD[3647] = 2.04499210E-02;
  COFD[3648] = -2.12451070E+01;
  COFD[3649] = 5.40444222E+00;
  COFD[3650] = -4.72708609E-01;
  COFD[3651] = 1.99362392E-02;
  COFD[3652] = -2.02646659E+01;
  COFD[3653] = 5.10426133E+00;
  COFD[3654] = -4.41256919E-01;
  COFD[3655] = 1.88737290E-02;
  COFD[3656] = -1.94688845E+01;
  COFD[3657] = 5.43830787E+00;
  COFD[3658] = -4.75472880E-01;
  COFD[3659] = 1.99909996E-02;
  COFD[3660] = -1.90883170E+01;
  COFD[3661] = 4.84384483E+00;
  COFD[3662] = -4.10265575E-01;
  COFD[3663] = 1.76414287E-02;
  COFD[3664] = -1.91102567E+01;
  COFD[3665] = 4.84384483E+00;
  COFD[3666] = -4.10265575E-01;
  COFD[3667] = 1.76414287E-02;
  COFD[3668] = -2.05272244E+01;
  COFD[3669] = 5.18417470E+00;
  COFD[3670] = -4.49491573E-01;
  COFD[3671] = 1.91438508E-02;
  COFD[3672] = -1.57035004E+01;
  COFD[3673] = 3.93614244E+00;
  COFD[3674] = -2.99111497E-01;
  COFD[3675] = 1.30888229E-02;
  COFD[3676] = -1.87383877E+01;
  COFD[3677] = 3.96926341E+00;
  COFD[3678] = -2.16412264E-01;
  COFD[3679] = 6.06012078E-03;
  COFD[3680] = -2.05355943E+01;
  COFD[3681] = 5.18417470E+00;
  COFD[3682] = -4.49491573E-01;
  COFD[3683] = 1.91438508E-02;
  COFD[3684] = -2.05184780E+01;
  COFD[3685] = 5.18417470E+00;
  COFD[3686] = -4.49491573E-01;
  COFD[3687] = 1.91438508E-02;
  COFD[3688] = -2.11606942E+01;
  COFD[3689] = 5.42846112E+00;
  COFD[3690] = -4.74321870E-01;
  COFD[3691] = 1.99459749E-02;
  COFD[3692] = -2.11309194E+01;
  COFD[3693] = 5.41773516E+00;
  COFD[3694] = -4.73414338E-01;
  COFD[3695] = 1.99258685E-02;
  COFD[3696] = -2.00914970E+01;
  COFD[3697] = 4.41511629E+00;
  COFD[3698] = -2.84086963E-01;
  COFD[3699] = 9.37586971E-03;
  COFD[3700] = -2.01015275E+01;
  COFD[3701] = 4.41511629E+00;
  COFD[3702] = -2.84086963E-01;
  COFD[3703] = 9.37586971E-03;
  COFD[3704] = -2.09222393E+01;
  COFD[3705] = 4.82184721E+00;
  COFD[3706] = -3.48128875E-01;
  COFD[3707] = 1.25918978E-02;
  COFD[3708] = -2.03036345E+01;
  COFD[3709] = 4.50250781E+00;
  COFD[3710] = -2.97622106E-01;
  COFD[3711] = 1.00481473E-02;
  COFD[3712] = -2.02922626E+01;
  COFD[3713] = 5.11106992E+00;
  COFD[3714] = -4.42047129E-01;
  COFD[3715] = 1.89042990E-02;
  COFD[3716] = -2.22116629E+01;
  COFD[3717] = 5.54251230E+00;
  COFD[3718] = -4.70946314E-01;
  COFD[3719] = 1.90785869E-02;
  COFD[3720] = -2.21065263E+01;
  COFD[3721] = 5.58360799E+00;
  COFD[3722] = -4.82701436E-01;
  COFD[3723] = 1.98437922E-02;
  COFD[3724] = -2.21181680E+01;
  COFD[3725] = 5.58360799E+00;
  COFD[3726] = -4.82701436E-01;
  COFD[3727] = 1.98437922E-02;
  COFD[3728] = -2.20453687E+01;
  COFD[3729] = 5.44448440E+00;
  COFD[3730] = -4.51529024E-01;
  COFD[3731] = 1.79698119E-02;
  COFD[3732] = -2.22059507E+01;
  COFD[3733] = 5.51722375E+00;
  COFD[3734] = -4.66081431E-01;
  COFD[3735] = 1.88044011E-02;
  COFD[3736] = -2.22159601E+01;
  COFD[3737] = 5.51722375E+00;
  COFD[3738] = -4.66081431E-01;
  COFD[3739] = 1.88044011E-02;
  COFD[3740] = -2.12621849E+01;
  COFD[3741] = 5.47935225E+00;
  COFD[3742] = -4.80056796E-01;
  COFD[3743] = 2.01607180E-02;
  COFD[3744] = -2.09002680E+01;
  COFD[3745] = 4.72895031E+00;
  COFD[3746] = -3.33332771E-01;
  COFD[3747] = 1.18431478E-02;
  COFD[3748] = -2.09061569E+01;
  COFD[3749] = 4.72895031E+00;
  COFD[3750] = -3.33332771E-01;
  COFD[3751] = 1.18431478E-02;
  COFD[3752] = -2.24268993E+01;
  COFD[3753] = 5.51805678E+00;
  COFD[3754] = -4.66245334E-01;
  COFD[3755] = 1.88137363E-02;
  COFD[3756] = -2.24031695E+01;
  COFD[3757] = 5.51805678E+00;
  COFD[3758] = -4.66245334E-01;
  COFD[3759] = 1.88137363E-02;
  COFD[3760] = -2.24554479E+01;
  COFD[3761] = 5.49330641E+00;
  COFD[3762] = -4.60498247E-01;
  COFD[3763] = 1.84639199E-02;
  COFD[3764] = -2.24615428E+01;
  COFD[3765] = 5.49330641E+00;
  COFD[3766] = -4.60498247E-01;
  COFD[3767] = 1.84639199E-02;
  COFD[3768] = -2.24674225E+01;
  COFD[3769] = 5.49330641E+00;
  COFD[3770] = -4.60498247E-01;
  COFD[3771] = 1.84639199E-02;
  COFD[3772] = -2.20355105E+01;
  COFD[3773] = 5.14570932E+00;
  COFD[3774] = -3.99877142E-01;
  COFD[3775] = 1.52199557E-02;
  COFD[3776] = -1.88275407E+01;
  COFD[3777] = 4.71729964E+00;
  COFD[3778] = -3.95432573E-01;
  COFD[3779] = 1.70623691E-02;
  COFD[3780] = -2.20848195E+01;
  COFD[3781] = 5.59135292E+00;
  COFD[3782] = -4.85565630E-01;
  COFD[3783] = 2.00429035E-02;
  COFD[3784] = -2.22648022E+01;
  COFD[3785] = 5.57944619E+00;
  COFD[3786] = -4.78032626E-01;
  COFD[3787] = 1.94775370E-02;
  COFD[3788] = -2.22648022E+01;
  COFD[3789] = 5.57944619E+00;
  COFD[3790] = -4.78032626E-01;
  COFD[3791] = 1.94775370E-02;
  COFD[3792] = -2.22589092E+01;
  COFD[3793] = 5.57944619E+00;
  COFD[3794] = -4.78032626E-01;
  COFD[3795] = 1.94775370E-02;
  COFD[3796] = -2.04033902E+01;
  COFD[3797] = 4.50250781E+00;
  COFD[3798] = -2.97622106E-01;
  COFD[3799] = 1.00481473E-02;
  COFD[3800] = -2.12508452E+01;
  COFD[3801] = 5.40444222E+00;
  COFD[3802] = -4.72708609E-01;
  COFD[3803] = 1.99362392E-02;
  COFD[3804] = -2.02693704E+01;
  COFD[3805] = 5.10426133E+00;
  COFD[3806] = -4.41256919E-01;
  COFD[3807] = 1.88737290E-02;
  COFD[3808] = -1.94691588E+01;
  COFD[3809] = 5.43830787E+00;
  COFD[3810] = -4.75472880E-01;
  COFD[3811] = 1.99909996E-02;
  COFD[3812] = -1.90915553E+01;
  COFD[3813] = 4.84384483E+00;
  COFD[3814] = -4.10265575E-01;
  COFD[3815] = 1.76414287E-02;
  COFD[3816] = -1.91136407E+01;
  COFD[3817] = 4.84384483E+00;
  COFD[3818] = -4.10265575E-01;
  COFD[3819] = 1.76414287E-02;
  COFD[3820] = -2.05324009E+01;
  COFD[3821] = 5.18417470E+00;
  COFD[3822] = -4.49491573E-01;
  COFD[3823] = 1.91438508E-02;
  COFD[3824] = -1.57040365E+01;
  COFD[3825] = 3.93614244E+00;
  COFD[3826] = -2.99111497E-01;
  COFD[3827] = 1.30888229E-02;
  COFD[3828] = -1.87419126E+01;
  COFD[3829] = 3.96926341E+00;
  COFD[3830] = -2.16412264E-01;
  COFD[3831] = 6.06012078E-03;
  COFD[3832] = -2.05408587E+01;
  COFD[3833] = 5.18417470E+00;
  COFD[3834] = -4.49491573E-01;
  COFD[3835] = 1.91438508E-02;
  COFD[3836] = -2.05235643E+01;
  COFD[3837] = 5.18417470E+00;
  COFD[3838] = -4.49491573E-01;
  COFD[3839] = 1.91438508E-02;
  COFD[3840] = -2.11637883E+01;
  COFD[3841] = 5.42846112E+00;
  COFD[3842] = -4.74321870E-01;
  COFD[3843] = 1.99459749E-02;
  COFD[3844] = -2.11341641E+01;
  COFD[3845] = 5.41773516E+00;
  COFD[3846] = -4.73414338E-01;
  COFD[3847] = 1.99258685E-02;
  COFD[3848] = -2.00963017E+01;
  COFD[3849] = 4.41511629E+00;
  COFD[3850] = -2.84086963E-01;
  COFD[3851] = 9.37586971E-03;
  COFD[3852] = -2.01064300E+01;
  COFD[3853] = 4.41511629E+00;
  COFD[3854] = -2.84086963E-01;
  COFD[3855] = 9.37586971E-03;
  COFD[3856] = -2.09272370E+01;
  COFD[3857] = 4.82184721E+00;
  COFD[3858] = -3.48128875E-01;
  COFD[3859] = 1.25918978E-02;
  COFD[3860] = -2.03087248E+01;
  COFD[3861] = 4.50250781E+00;
  COFD[3862] = -2.97622106E-01;
  COFD[3863] = 1.00481473E-02;
  COFD[3864] = -2.02969667E+01;
  COFD[3865] = 5.11106992E+00;
  COFD[3866] = -4.42047129E-01;
  COFD[3867] = 1.89042990E-02;
  COFD[3868] = -2.22176875E+01;
  COFD[3869] = 5.54251230E+00;
  COFD[3870] = -4.70946314E-01;
  COFD[3871] = 1.90785869E-02;
  COFD[3872] = -2.21110249E+01;
  COFD[3873] = 5.58360799E+00;
  COFD[3874] = -4.82701436E-01;
  COFD[3875] = 1.98437922E-02;
  COFD[3876] = -2.21227731E+01;
  COFD[3877] = 5.58360799E+00;
  COFD[3878] = -4.82701436E-01;
  COFD[3879] = 1.98437922E-02;
  COFD[3880] = -2.20500773E+01;
  COFD[3881] = 5.44448440E+00;
  COFD[3882] = -4.51529024E-01;
  COFD[3883] = 1.79698119E-02;
  COFD[3884] = -2.22107598E+01;
  COFD[3885] = 5.51722375E+00;
  COFD[3886] = -4.66081431E-01;
  COFD[3887] = 1.88044011E-02;
  COFD[3888] = -2.22208668E+01;
  COFD[3889] = 5.51722375E+00;
  COFD[3890] = -4.66081431E-01;
  COFD[3891] = 1.88044011E-02;
  COFD[3892] = -2.12680019E+01;
  COFD[3893] = 5.47935225E+00;
  COFD[3894] = -4.80056796E-01;
  COFD[3895] = 2.01607180E-02;
  COFD[3896] = -2.09061569E+01;
  COFD[3897] = 4.72895031E+00;
  COFD[3898] = -3.33332771E-01;
  COFD[3899] = 1.18431478E-02;
  COFD[3900] = -2.09121160E+01;
  COFD[3901] = 4.72895031E+00;
  COFD[3902] = -3.33332771E-01;
  COFD[3903] = 1.18431478E-02;
  COFD[3904] = -2.24329269E+01;
  COFD[3905] = 5.51805678E+00;
  COFD[3906] = -4.66245334E-01;
  COFD[3907] = 1.88137363E-02;
  COFD[3908] = -2.24089162E+01;
  COFD[3909] = 5.51805678E+00;
  COFD[3910] = -4.66245334E-01;
  COFD[3911] = 1.88137363E-02;
  COFD[3912] = -2.24612680E+01;
  COFD[3913] = 5.49330641E+00;
  COFD[3914] = -4.60498247E-01;
  COFD[3915] = 1.84639199E-02;
  COFD[3916] = -2.24674347E+01;
  COFD[3917] = 5.49330641E+00;
  COFD[3918] = -4.60498247E-01;
  COFD[3919] = 1.84639199E-02;
  COFD[3920] = -2.24733846E+01;
  COFD[3921] = 5.49330641E+00;
  COFD[3922] = -4.60498247E-01;
  COFD[3923] = 1.84639199E-02;
  COFD[3924] = -2.20422494E+01;
  COFD[3925] = 5.14570932E+00;
  COFD[3926] = -3.99877142E-01;
  COFD[3927] = 1.52199557E-02;
  COFD[3928] = -1.88304756E+01;
  COFD[3929] = 4.71729964E+00;
  COFD[3930] = -3.95432573E-01;
  COFD[3931] = 1.70623691E-02;
  COFD[3932] = -2.20909755E+01;
  COFD[3933] = 5.59135292E+00;
  COFD[3934] = -4.85565630E-01;
  COFD[3935] = 2.00429035E-02;
  COFD[3936] = -2.22707599E+01;
  COFD[3937] = 5.57944619E+00;
  COFD[3938] = -4.78032626E-01;
  COFD[3939] = 1.94775370E-02;
  COFD[3940] = -2.22707599E+01;
  COFD[3941] = 5.57944619E+00;
  COFD[3942] = -4.78032626E-01;
  COFD[3943] = 1.94775370E-02;
  COFD[3944] = -2.22647966E+01;
  COFD[3945] = 5.57944619E+00;
  COFD[3946] = -4.78032626E-01;
  COFD[3947] = 1.94775370E-02;
  COFD[3948] = -2.04096115E+01;
  COFD[3949] = 4.50250781E+00;
  COFD[3950] = -2.97622106E-01;
  COFD[3951] = 1.00481473E-02;
  COFD[3952] = -1.97155668E+01;
  COFD[3953] = 4.83069339E+00;
  COFD[3954] = -4.08794086E-01;
  COFD[3955] = 1.75872010E-02;
  COFD[3956] = -1.85159963E+01;
  COFD[3957] = 4.41886064E+00;
  COFD[3958] = -3.59254256E-01;
  COFD[3959] = 1.55974661E-02;
  COFD[3960] = -1.80736227E+01;
  COFD[3961] = 4.91182086E+00;
  COFD[3962] = -4.18511339E-01;
  COFD[3963] = 1.79759141E-02;
  COFD[3964] = -1.74362915E+01;
  COFD[3965] = 4.17761385E+00;
  COFD[3966] = -3.29594803E-01;
  COFD[3967] = 1.43785522E-02;
  COFD[3968] = -1.74585179E+01;
  COFD[3969] = 4.17761385E+00;
  COFD[3970] = -3.29594803E-01;
  COFD[3971] = 1.43785522E-02;
  COFD[3972] = -1.88512637E+01;
  COFD[3973] = 4.53427279E+00;
  COFD[3974] = -3.73213513E-01;
  COFD[3975] = 1.61609973E-02;
  COFD[3976] = -1.41229493E+01;
  COFD[3977] = 3.26291213E+00;
  COFD[3978] = -2.12831025E-01;
  COFD[3979] = 9.39262629E-03;
  COFD[3980] = -2.14597040E+01;
  COFD[3981] = 5.25056135E+00;
  COFD[3982] = -4.17658192E-01;
  COFD[3983] = 1.61554773E-02;
  COFD[3984] = -1.88598070E+01;
  COFD[3985] = 4.53427279E+00;
  COFD[3986] = -3.73213513E-01;
  COFD[3987] = 1.61609973E-02;
  COFD[3988] = -1.88423393E+01;
  COFD[3989] = 4.53427279E+00;
  COFD[3990] = -3.73213513E-01;
  COFD[3991] = 1.61609973E-02;
  COFD[3992] = -1.97157118E+01;
  COFD[3993] = 4.90059208E+00;
  COFD[3994] = -4.17126126E-01;
  COFD[3995] = 1.79186848E-02;
  COFD[3996] = -1.96464488E+01;
  COFD[3997] = 4.87149639E+00;
  COFD[3998] = -4.13544849E-01;
  COFD[3999] = 1.77710516E-02;
  COFD[4000] = -2.21305345E+01;
  COFD[4001] = 5.41958743E+00;
  COFD[4002] = -4.47031040E-01;
  COFD[4003] = 1.77243470E-02;
  COFD[4004] = -2.21407579E+01;
  COFD[4005] = 5.41958743E+00;
  COFD[4006] = -4.47031040E-01;
  COFD[4007] = 1.77243470E-02;
  COFD[4008] = -2.23161833E+01;
  COFD[4009] = 5.55166300E+00;
  COFD[4010] = -4.72702482E-01;
  COFD[4011] = 1.91773349E-02;
  COFD[4012] = -2.22150651E+01;
  COFD[4013] = 5.45297208E+00;
  COFD[4014] = -4.53064157E-01;
  COFD[4015] = 1.80537024E-02;
  COFD[4016] = -1.85444853E+01;
  COFD[4017] = 4.42668307E+00;
  COFD[4018] = -3.60220573E-01;
  COFD[4019] = 1.56373683E-02;
  COFD[4020] = -2.16458314E+01;
  COFD[4021] = 5.41694410E+00;
  COFD[4022] = -4.73389041E-01;
  COFD[4023] = 1.99278645E-02;
  COFD[4024] = -2.12766837E+01;
  COFD[4025] = 5.34173603E+00;
  COFD[4026] = -4.67980991E-01;
  COFD[4027] = 1.98689682E-02;
  COFD[4028] = -2.12885353E+01;
  COFD[4029] = 5.34173603E+00;
  COFD[4030] = -4.67980991E-01;
  COFD[4031] = 1.98689682E-02;
  COFD[4032] = -2.20153774E+01;
  COFD[4033] = 5.55674298E+00;
  COFD[4034] = -4.88067739E-01;
  COFD[4035] = 2.04278640E-02;
  COFD[4036] = -2.17498669E+01;
  COFD[4037] = 5.44645703E+00;
  COFD[4038] = -4.76428229E-01;
  COFD[4039] = 2.00285047E-02;
  COFD[4040] = -2.17600690E+01;
  COFD[4041] = 5.44645703E+00;
  COFD[4042] = -4.76428229E-01;
  COFD[4043] = 2.00285047E-02;
  COFD[4044] = -1.98678674E+01;
  COFD[4045] = 4.95769834E+00;
  COFD[4046] = -4.23993658E-01;
  COFD[4047] = 1.81947960E-02;
  COFD[4048] = -2.24268993E+01;
  COFD[4049] = 5.51805678E+00;
  COFD[4050] = -4.66245334E-01;
  COFD[4051] = 1.88137363E-02;
  COFD[4052] = -2.24329269E+01;
  COFD[4053] = 5.51805678E+00;
  COFD[4054] = -4.66245334E-01;
  COFD[4055] = 1.88137363E-02;
  COFD[4056] = -2.19581328E+01;
  COFD[4057] = 5.44470367E+00;
  COFD[4058] = -4.76221201E-01;
  COFD[4059] = 2.00203068E-02;
  COFD[4060] = -2.19338477E+01;
  COFD[4061] = 5.44470367E+00;
  COFD[4062] = -4.76221201E-01;
  COFD[4063] = 2.00203068E-02;
  COFD[4064] = -2.21917451E+01;
  COFD[4065] = 5.51146842E+00;
  COFD[4066] = -4.83562214E-01;
  COFD[4067] = 2.02866024E-02;
  COFD[4068] = -2.21979820E+01;
  COFD[4069] = 5.51146842E+00;
  COFD[4070] = -4.83562214E-01;
  COFD[4071] = 2.02866024E-02;
  COFD[4072] = -2.22040003E+01;
  COFD[4073] = 5.51146842E+00;
  COFD[4074] = -4.83562214E-01;
  COFD[4075] = 2.02866024E-02;
  COFD[4076] = -2.27209132E+01;
  COFD[4077] = 5.58204407E+00;
  COFD[4078] = -4.83002356E-01;
  COFD[4079] = 1.98770691E-02;
  COFD[4080] = -1.71740753E+01;
  COFD[4081] = 4.04958641E+00;
  COFD[4082] = -3.13664243E-01;
  COFD[4083] = 1.37144097E-02;
  COFD[4084] = -2.11249323E+01;
  COFD[4085] = 5.28304555E+00;
  COFD[4086] = -4.61095222E-01;
  COFD[4087] = 1.95986518E-02;
  COFD[4088] = -2.15712184E+01;
  COFD[4089] = 5.39732073E+00;
  COFD[4090] = -4.72235834E-01;
  COFD[4091] = 1.99338718E-02;
  COFD[4092] = -2.15712184E+01;
  COFD[4093] = 5.39732073E+00;
  COFD[4094] = -4.72235834E-01;
  COFD[4095] = 1.99338718E-02;
  COFD[4096] = -2.15651865E+01;
  COFD[4097] = 5.39732073E+00;
  COFD[4098] = -4.72235834E-01;
  COFD[4099] = 1.99338718E-02;
  COFD[4100] = -2.23170553E+01;
  COFD[4101] = 5.45297208E+00;
  COFD[4102] = -4.53064157E-01;
  COFD[4103] = 1.80537024E-02;
  COFD[4104] = -1.96924408E+01;
  COFD[4105] = 4.83069339E+00;
  COFD[4106] = -4.08794086E-01;
  COFD[4107] = 1.75872010E-02;
  COFD[4108] = -1.84970149E+01;
  COFD[4109] = 4.41886064E+00;
  COFD[4110] = -3.59254256E-01;
  COFD[4111] = 1.55974661E-02;
  COFD[4112] = -1.80725106E+01;
  COFD[4113] = 4.91182086E+00;
  COFD[4114] = -4.18511339E-01;
  COFD[4115] = 1.79759141E-02;
  COFD[4116] = -1.74232048E+01;
  COFD[4117] = 4.17761385E+00;
  COFD[4118] = -3.29594803E-01;
  COFD[4119] = 1.43785522E-02;
  COFD[4120] = -1.74448444E+01;
  COFD[4121] = 4.17761385E+00;
  COFD[4122] = -3.29594803E-01;
  COFD[4123] = 1.43785522E-02;
  COFD[4124] = -1.88303884E+01;
  COFD[4125] = 4.53427279E+00;
  COFD[4126] = -3.73213513E-01;
  COFD[4127] = 1.61609973E-02;
  COFD[4128] = -1.41207761E+01;
  COFD[4129] = 3.26291213E+00;
  COFD[4130] = -2.12831025E-01;
  COFD[4131] = 9.39262629E-03;
  COFD[4132] = -2.14454635E+01;
  COFD[4133] = 5.25056135E+00;
  COFD[4134] = -4.17658192E-01;
  COFD[4135] = 1.61554773E-02;
  COFD[4136] = -1.88385796E+01;
  COFD[4137] = 4.53427279E+00;
  COFD[4138] = -3.73213513E-01;
  COFD[4139] = 1.61609973E-02;
  COFD[4140] = -1.88218258E+01;
  COFD[4141] = 4.53427279E+00;
  COFD[4142] = -3.73213513E-01;
  COFD[4143] = 1.61609973E-02;
  COFD[4144] = -1.97032058E+01;
  COFD[4145] = 4.90059208E+00;
  COFD[4146] = -4.17126126E-01;
  COFD[4147] = 1.79186848E-02;
  COFD[4148] = -1.96333360E+01;
  COFD[4149] = 4.87149639E+00;
  COFD[4150] = -4.13544849E-01;
  COFD[4151] = 1.77710516E-02;
  COFD[4152] = -2.21111508E+01;
  COFD[4153] = 5.41958743E+00;
  COFD[4154] = -4.47031040E-01;
  COFD[4155] = 1.77243470E-02;
  COFD[4156] = -2.21209816E+01;
  COFD[4157] = 5.41958743E+00;
  COFD[4158] = -4.47031040E-01;
  COFD[4159] = 1.77243470E-02;
  COFD[4160] = -2.22960253E+01;
  COFD[4161] = 5.55166300E+00;
  COFD[4162] = -4.72702482E-01;
  COFD[4163] = 1.91773349E-02;
  COFD[4164] = -2.21945357E+01;
  COFD[4165] = 5.45297208E+00;
  COFD[4166] = -4.53064157E-01;
  COFD[4167] = 1.80537024E-02;
  COFD[4168] = -1.85255055E+01;
  COFD[4169] = 4.42668307E+00;
  COFD[4170] = -3.60220573E-01;
  COFD[4171] = 1.56373683E-02;
  COFD[4172] = -2.16215581E+01;
  COFD[4173] = 5.41694410E+00;
  COFD[4174] = -4.73389041E-01;
  COFD[4175] = 1.99278645E-02;
  COFD[4176] = -2.12585287E+01;
  COFD[4177] = 5.34173603E+00;
  COFD[4178] = -4.67980991E-01;
  COFD[4179] = 1.98689682E-02;
  COFD[4180] = -2.12699528E+01;
  COFD[4181] = 5.34173603E+00;
  COFD[4182] = -4.67980991E-01;
  COFD[4183] = 1.98689682E-02;
  COFD[4184] = -2.19963797E+01;
  COFD[4185] = 5.55674298E+00;
  COFD[4186] = -4.88067739E-01;
  COFD[4187] = 2.04278640E-02;
  COFD[4188] = -2.17304659E+01;
  COFD[4189] = 5.44645703E+00;
  COFD[4190] = -4.76428229E-01;
  COFD[4191] = 2.00285047E-02;
  COFD[4192] = -2.17402758E+01;
  COFD[4193] = 5.44645703E+00;
  COFD[4194] = -4.76428229E-01;
  COFD[4195] = 2.00285047E-02;
  COFD[4196] = -1.98444255E+01;
  COFD[4197] = 4.95769834E+00;
  COFD[4198] = -4.23993658E-01;
  COFD[4199] = 1.81947960E-02;
  COFD[4200] = -2.24031695E+01;
  COFD[4201] = 5.51805678E+00;
  COFD[4202] = -4.66245334E-01;
  COFD[4203] = 1.88137363E-02;
  COFD[4204] = -2.24089162E+01;
  COFD[4205] = 5.51805678E+00;
  COFD[4206] = -4.66245334E-01;
  COFD[4207] = 1.88137363E-02;
  COFD[4208] = -2.19338477E+01;
  COFD[4209] = 5.44470367E+00;
  COFD[4210] = -4.76221201E-01;
  COFD[4211] = 2.00203068E-02;
  COFD[4212] = -2.19106877E+01;
  COFD[4213] = 5.44470367E+00;
  COFD[4214] = -4.76221201E-01;
  COFD[4215] = 2.00203068E-02;
  COFD[4216] = -2.21682905E+01;
  COFD[4217] = 5.51146842E+00;
  COFD[4218] = -4.83562214E-01;
  COFD[4219] = 2.02866024E-02;
  COFD[4220] = -2.21742398E+01;
  COFD[4221] = 5.51146842E+00;
  COFD[4222] = -4.83562214E-01;
  COFD[4223] = 2.02866024E-02;
  COFD[4224] = -2.21799775E+01;
  COFD[4225] = 5.51146842E+00;
  COFD[4226] = -4.83562214E-01;
  COFD[4227] = 2.02866024E-02;
  COFD[4228] = -2.26937831E+01;
  COFD[4229] = 5.58204407E+00;
  COFD[4230] = -4.83002356E-01;
  COFD[4231] = 1.98770691E-02;
  COFD[4232] = -1.71622104E+01;
  COFD[4233] = 4.04958641E+00;
  COFD[4234] = -3.13664243E-01;
  COFD[4235] = 1.37144097E-02;
  COFD[4236] = -2.11001336E+01;
  COFD[4237] = 5.28304555E+00;
  COFD[4238] = -4.61095222E-01;
  COFD[4239] = 1.95986518E-02;
  COFD[4240] = -2.15472132E+01;
  COFD[4241] = 5.39732073E+00;
  COFD[4242] = -4.72235834E-01;
  COFD[4243] = 1.99338718E-02;
  COFD[4244] = -2.15472132E+01;
  COFD[4245] = 5.39732073E+00;
  COFD[4246] = -4.72235834E-01;
  COFD[4247] = 1.99338718E-02;
  COFD[4248] = -2.15414624E+01;
  COFD[4249] = 5.39732073E+00;
  COFD[4250] = -4.72235834E-01;
  COFD[4251] = 1.99338718E-02;
  COFD[4252] = -2.22919953E+01;
  COFD[4253] = 5.45297208E+00;
  COFD[4254] = -4.53064157E-01;
  COFD[4255] = 1.80537024E-02;
  COFD[4256] = -1.99687862E+01;
  COFD[4257] = 4.90643348E+00;
  COFD[4258] = -4.17847566E-01;
  COFD[4259] = 1.79485301E-02;
  COFD[4260] = -1.87434421E+01;
  COFD[4261] = 4.48550694E+00;
  COFD[4262] = -3.67277454E-01;
  COFD[4263] = 1.59194755E-02;
  COFD[4264] = -1.83539845E+01;
  COFD[4265] = 4.98756925E+00;
  COFD[4266] = -4.27526072E-01;
  COFD[4267] = 1.83341755E-02;
  COFD[4268] = -1.76774947E+01;
  COFD[4269] = 4.24719726E+00;
  COFD[4270] = -3.38206061E-01;
  COFD[4271] = 1.47350654E-02;
  COFD[4272] = -1.76992903E+01;
  COFD[4273] = 4.24719726E+00;
  COFD[4274] = -3.38206061E-01;
  COFD[4275] = 1.47350654E-02;
  COFD[4276] = -1.91208247E+01;
  COFD[4277] = 4.61801405E+00;
  COFD[4278] = -3.83535652E-01;
  COFD[4279] = 1.65862513E-02;
  COFD[4280] = -1.43129867E+01;
  COFD[4281] = 3.31177824E+00;
  COFD[4282] = -2.18945280E-01;
  COFD[4283] = 9.64764419E-03;
  COFD[4284] = -2.13847376E+01;
  COFD[4285] = 5.17440955E+00;
  COFD[4286] = -4.04678430E-01;
  COFD[4287] = 1.54706350E-02;
  COFD[4288] = -1.91291085E+01;
  COFD[4289] = 4.61801405E+00;
  COFD[4290] = -3.83535652E-01;
  COFD[4291] = 1.65862513E-02;
  COFD[4292] = -1.91121670E+01;
  COFD[4293] = 4.61801405E+00;
  COFD[4294] = -3.83535652E-01;
  COFD[4295] = 1.65862513E-02;
  COFD[4296] = -1.99803480E+01;
  COFD[4297] = 4.97875278E+00;
  COFD[4298] = -4.26485475E-01;
  COFD[4299] = 1.82931933E-02;
  COFD[4300] = -1.99235836E+01;
  COFD[4301] = 4.95514826E+00;
  COFD[4302] = -4.23691395E-01;
  COFD[4303] = 1.81828318E-02;
  COFD[4304] = -2.20848512E+01;
  COFD[4305] = 5.36053938E+00;
  COFD[4306] = -4.36434519E-01;
  COFD[4307] = 1.71484255E-02;
  COFD[4308] = -2.20947854E+01;
  COFD[4309] = 5.36053938E+00;
  COFD[4310] = -4.36434519E-01;
  COFD[4311] = 1.71484255E-02;
  COFD[4312] = -2.23054103E+01;
  COFD[4313] = 5.50872500E+00;
  COFD[4314] = -4.64427323E-01;
  COFD[4315] = 1.87105612E-02;
  COFD[4316] = -2.21793407E+01;
  COFD[4317] = 5.39861129E+00;
  COFD[4318] = -4.43119198E-01;
  COFD[4319] = 1.75075657E-02;
  COFD[4320] = -1.87684982E+01;
  COFD[4321] = 4.49191492E+00;
  COFD[4322] = -3.68041771E-01;
  COFD[4323] = 1.59498676E-02;
  COFD[4324] = -2.18590684E+01;
  COFD[4325] = 5.47368915E+00;
  COFD[4326] = -4.79424291E-01;
  COFD[4327] = 2.01372920E-02;
  COFD[4328] = -2.14323161E+01;
  COFD[4329] = 5.37331605E+00;
  COFD[4330] = -4.70491203E-01;
  COFD[4331] = 1.99134666E-02;
  COFD[4332] = -2.14438531E+01;
  COFD[4333] = 5.37331605E+00;
  COFD[4334] = -4.70491203E-01;
  COFD[4335] = 1.99134666E-02;
  COFD[4336] = -2.21885121E+01;
  COFD[4337] = 5.59472344E+00;
  COFD[4338] = -4.91421518E-01;
  COFD[4339] = 2.05117088E-02;
  COFD[4340] = -2.19883773E+01;
  COFD[4341] = 5.51276597E+00;
  COFD[4342] = -4.83701824E-01;
  COFD[4343] = 2.02915297E-02;
  COFD[4344] = -2.19982906E+01;
  COFD[4345] = 5.51276597E+00;
  COFD[4346] = -4.83701824E-01;
  COFD[4347] = 2.02915297E-02;
  COFD[4348] = -2.01223105E+01;
  COFD[4349] = 5.03101171E+00;
  COFD[4350] = -4.32665019E-01;
  COFD[4351] = 1.85372086E-02;
  COFD[4352] = -2.24554479E+01;
  COFD[4353] = 5.49330641E+00;
  COFD[4354] = -4.60498247E-01;
  COFD[4355] = 1.84639199E-02;
  COFD[4356] = -2.24612680E+01;
  COFD[4357] = 5.49330641E+00;
  COFD[4358] = -4.60498247E-01;
  COFD[4359] = 1.84639199E-02;
  COFD[4360] = -2.21917451E+01;
  COFD[4361] = 5.51146842E+00;
  COFD[4362] = -4.83562214E-01;
  COFD[4363] = 2.02866024E-02;
  COFD[4364] = -2.21682905E+01;
  COFD[4365] = 5.51146842E+00;
  COFD[4366] = -4.83562214E-01;
  COFD[4367] = 2.02866024E-02;
  COFD[4368] = -2.23842793E+01;
  COFD[4369] = 5.56066804E+00;
  COFD[4370] = -4.88405706E-01;
  COFD[4371] = 2.04357330E-02;
  COFD[4372] = -2.23903039E+01;
  COFD[4373] = 5.56066804E+00;
  COFD[4374] = -4.88405706E-01;
  COFD[4375] = 2.04357330E-02;
  COFD[4376] = -2.23961150E+01;
  COFD[4377] = 5.56066804E+00;
  COFD[4378] = -4.88405706E-01;
  COFD[4379] = 2.04357330E-02;
  COFD[4380] = -2.28056945E+01;
  COFD[4381] = 5.58523510E+00;
  COFD[4382] = -4.81201481E-01;
  COFD[4383] = 1.97107111E-02;
  COFD[4384] = -1.74072739E+01;
  COFD[4385] = 4.11838823E+00;
  COFD[4386] = -3.22329602E-01;
  COFD[4387] = 1.40802468E-02;
  COFD[4388] = -2.13633121E+01;
  COFD[4389] = 5.35135690E+00;
  COFD[4390] = -4.68903699E-01;
  COFD[4391] = 1.98958921E-02;
  COFD[4392] = -2.17012465E+01;
  COFD[4393] = 5.41948945E+00;
  COFD[4394] = -4.73474138E-01;
  COFD[4395] = 1.99217500E-02;
  COFD[4396] = -2.17012465E+01;
  COFD[4397] = 5.41948945E+00;
  COFD[4398] = -4.73474138E-01;
  COFD[4399] = 1.99217500E-02;
  COFD[4400] = -2.16954222E+01;
  COFD[4401] = 5.41948945E+00;
  COFD[4402] = -4.73474138E-01;
  COFD[4403] = 1.99217500E-02;
  COFD[4404] = -2.22779882E+01;
  COFD[4405] = 5.39861129E+00;
  COFD[4406] = -4.43119198E-01;
  COFD[4407] = 1.75075657E-02;
  COFD[4408] = -1.99747268E+01;
  COFD[4409] = 4.90643348E+00;
  COFD[4410] = -4.17847566E-01;
  COFD[4411] = 1.79485301E-02;
  COFD[4412] = -1.87483223E+01;
  COFD[4413] = 4.48550694E+00;
  COFD[4414] = -3.67277454E-01;
  COFD[4415] = 1.59194755E-02;
  COFD[4416] = -1.83542714E+01;
  COFD[4417] = 4.98756925E+00;
  COFD[4418] = -4.27526072E-01;
  COFD[4419] = 1.83341755E-02;
  COFD[4420] = -1.76808635E+01;
  COFD[4421] = 4.24719726E+00;
  COFD[4422] = -3.38206061E-01;
  COFD[4423] = 1.47350654E-02;
  COFD[4424] = -1.77028097E+01;
  COFD[4425] = 4.24719726E+00;
  COFD[4426] = -3.38206061E-01;
  COFD[4427] = 1.47350654E-02;
  COFD[4428] = -1.91261897E+01;
  COFD[4429] = 4.61801405E+00;
  COFD[4430] = -3.83535652E-01;
  COFD[4431] = 1.65862513E-02;
  COFD[4432] = -1.43135474E+01;
  COFD[4433] = 3.31177824E+00;
  COFD[4434] = -2.18945280E-01;
  COFD[4435] = 9.64764419E-03;
  COFD[4436] = -2.13884026E+01;
  COFD[4437] = 5.17440955E+00;
  COFD[4438] = -4.04678430E-01;
  COFD[4439] = 1.54706350E-02;
  COFD[4440] = -1.91345636E+01;
  COFD[4441] = 4.61801405E+00;
  COFD[4442] = -3.83535652E-01;
  COFD[4443] = 1.65862513E-02;
  COFD[4444] = -1.91174394E+01;
  COFD[4445] = 4.61801405E+00;
  COFD[4446] = -3.83535652E-01;
  COFD[4447] = 1.65862513E-02;
  COFD[4448] = -1.99835677E+01;
  COFD[4449] = 4.97875278E+00;
  COFD[4450] = -4.26485475E-01;
  COFD[4451] = 1.82931933E-02;
  COFD[4452] = -1.99269591E+01;
  COFD[4453] = 4.95514826E+00;
  COFD[4454] = -4.23691395E-01;
  COFD[4455] = 1.81828318E-02;
  COFD[4456] = -2.20898344E+01;
  COFD[4457] = 5.36053938E+00;
  COFD[4458] = -4.36434519E-01;
  COFD[4459] = 1.71484255E-02;
  COFD[4460] = -2.20998692E+01;
  COFD[4461] = 5.36053938E+00;
  COFD[4462] = -4.36434519E-01;
  COFD[4463] = 1.71484255E-02;
  COFD[4464] = -2.23105918E+01;
  COFD[4465] = 5.50872500E+00;
  COFD[4466] = -4.64427323E-01;
  COFD[4467] = 1.87105612E-02;
  COFD[4468] = -2.21846173E+01;
  COFD[4469] = 5.39861129E+00;
  COFD[4470] = -4.43119198E-01;
  COFD[4471] = 1.75075657E-02;
  COFD[4472] = -1.87733780E+01;
  COFD[4473] = 4.49191492E+00;
  COFD[4474] = -3.68041771E-01;
  COFD[4475] = 1.59498676E-02;
  COFD[4476] = -2.18653022E+01;
  COFD[4477] = 5.47368915E+00;
  COFD[4478] = -4.79424291E-01;
  COFD[4479] = 2.01372920E-02;
  COFD[4480] = -2.14369847E+01;
  COFD[4481] = 5.37331605E+00;
  COFD[4482] = -4.70491203E-01;
  COFD[4483] = 1.99134666E-02;
  COFD[4484] = -2.14486311E+01;
  COFD[4485] = 5.37331605E+00;
  COFD[4486] = -4.70491203E-01;
  COFD[4487] = 1.99134666E-02;
  COFD[4488] = -2.21933965E+01;
  COFD[4489] = 5.59472344E+00;
  COFD[4490] = -4.91421518E-01;
  COFD[4491] = 2.05117088E-02;
  COFD[4492] = -2.19933650E+01;
  COFD[4493] = 5.51276597E+00;
  COFD[4494] = -4.83701824E-01;
  COFD[4495] = 2.02915297E-02;
  COFD[4496] = -2.20033786E+01;
  COFD[4497] = 5.51276597E+00;
  COFD[4498] = -4.83701824E-01;
  COFD[4499] = 2.02915297E-02;
  COFD[4500] = -2.01283319E+01;
  COFD[4501] = 5.03101171E+00;
  COFD[4502] = -4.32665019E-01;
  COFD[4503] = 1.85372086E-02;
  COFD[4504] = -2.24615428E+01;
  COFD[4505] = 5.49330641E+00;
  COFD[4506] = -4.60498247E-01;
  COFD[4507] = 1.84639199E-02;
  COFD[4508] = -2.24674347E+01;
  COFD[4509] = 5.49330641E+00;
  COFD[4510] = -4.60498247E-01;
  COFD[4511] = 1.84639199E-02;
  COFD[4512] = -2.21979820E+01;
  COFD[4513] = 5.51146842E+00;
  COFD[4514] = -4.83562214E-01;
  COFD[4515] = 2.02866024E-02;
  COFD[4516] = -2.21742398E+01;
  COFD[4517] = 5.51146842E+00;
  COFD[4518] = -4.83562214E-01;
  COFD[4519] = 2.02866024E-02;
  COFD[4520] = -2.23903039E+01;
  COFD[4521] = 5.56066804E+00;
  COFD[4522] = -4.88405706E-01;
  COFD[4523] = 2.04357330E-02;
  COFD[4524] = -2.23964020E+01;
  COFD[4525] = 5.56066804E+00;
  COFD[4526] = -4.88405706E-01;
  COFD[4527] = 2.04357330E-02;
  COFD[4528] = -2.24022848E+01;
  COFD[4529] = 5.56066804E+00;
  COFD[4530] = -4.88405706E-01;
  COFD[4531] = 2.04357330E-02;
  COFD[4532] = -2.28126577E+01;
  COFD[4533] = 5.58523510E+00;
  COFD[4534] = -4.81201481E-01;
  COFD[4535] = 1.97107111E-02;
  COFD[4536] = -1.74103290E+01;
  COFD[4537] = 4.11838823E+00;
  COFD[4538] = -3.22329602E-01;
  COFD[4539] = 1.40802468E-02;
  COFD[4540] = -2.13696801E+01;
  COFD[4541] = 5.35135690E+00;
  COFD[4542] = -4.68903699E-01;
  COFD[4543] = 1.98958921E-02;
  COFD[4544] = -2.17074118E+01;
  COFD[4545] = 5.41948945E+00;
  COFD[4546] = -4.73474138E-01;
  COFD[4547] = 1.99217500E-02;
  COFD[4548] = -2.17074118E+01;
  COFD[4549] = 5.41948945E+00;
  COFD[4550] = -4.73474138E-01;
  COFD[4551] = 1.99217500E-02;
  COFD[4552] = -2.17015156E+01;
  COFD[4553] = 5.41948945E+00;
  COFD[4554] = -4.73474138E-01;
  COFD[4555] = 1.99217500E-02;
  COFD[4556] = -2.22844229E+01;
  COFD[4557] = 5.39861129E+00;
  COFD[4558] = -4.43119198E-01;
  COFD[4559] = 1.75075657E-02;
  COFD[4560] = -1.99804559E+01;
  COFD[4561] = 4.90643348E+00;
  COFD[4562] = -4.17847566E-01;
  COFD[4563] = 1.79485301E-02;
  COFD[4564] = -1.87530190E+01;
  COFD[4565] = 4.48550694E+00;
  COFD[4566] = -3.67277454E-01;
  COFD[4567] = 1.59194755E-02;
  COFD[4568] = -1.83545451E+01;
  COFD[4569] = 4.98756925E+00;
  COFD[4570] = -4.27526072E-01;
  COFD[4571] = 1.83341755E-02;
  COFD[4572] = -1.76840960E+01;
  COFD[4573] = 4.24719726E+00;
  COFD[4574] = -3.38206061E-01;
  COFD[4575] = 1.47350654E-02;
  COFD[4576] = -1.77061877E+01;
  COFD[4577] = 4.24719726E+00;
  COFD[4578] = -3.38206061E-01;
  COFD[4579] = 1.47350654E-02;
  COFD[4580] = -1.91313579E+01;
  COFD[4581] = 4.61801405E+00;
  COFD[4582] = -3.83535652E-01;
  COFD[4583] = 1.65862513E-02;
  COFD[4584] = -1.43140824E+01;
  COFD[4585] = 3.31177824E+00;
  COFD[4586] = -2.18945280E-01;
  COFD[4587] = 9.64764419E-03;
  COFD[4588] = -2.13919213E+01;
  COFD[4589] = 5.17440955E+00;
  COFD[4590] = -4.04678430E-01;
  COFD[4591] = 1.54706350E-02;
  COFD[4592] = -1.91398195E+01;
  COFD[4593] = 4.61801405E+00;
  COFD[4594] = -3.83535652E-01;
  COFD[4595] = 1.65862513E-02;
  COFD[4596] = -1.91225175E+01;
  COFD[4597] = 4.61801405E+00;
  COFD[4598] = -3.83535652E-01;
  COFD[4599] = 1.65862513E-02;
  COFD[4600] = -1.99866562E+01;
  COFD[4601] = 4.97875278E+00;
  COFD[4602] = -4.26485475E-01;
  COFD[4603] = 1.82931933E-02;
  COFD[4604] = -1.99301980E+01;
  COFD[4605] = 4.95514826E+00;
  COFD[4606] = -4.23691395E-01;
  COFD[4607] = 1.81828318E-02;
  COFD[4608] = -2.20946312E+01;
  COFD[4609] = 5.36053938E+00;
  COFD[4610] = -4.36434519E-01;
  COFD[4611] = 1.71484255E-02;
  COFD[4612] = -2.21047637E+01;
  COFD[4613] = 5.36053938E+00;
  COFD[4614] = -4.36434519E-01;
  COFD[4615] = 1.71484255E-02;
  COFD[4616] = -2.23155813E+01;
  COFD[4617] = 5.50872500E+00;
  COFD[4618] = -4.64427323E-01;
  COFD[4619] = 1.87105612E-02;
  COFD[4620] = -2.21896993E+01;
  COFD[4621] = 5.39861129E+00;
  COFD[4622] = -4.43119198E-01;
  COFD[4623] = 1.75075657E-02;
  COFD[4624] = -1.87780743E+01;
  COFD[4625] = 4.49191492E+00;
  COFD[4626] = -3.68041771E-01;
  COFD[4627] = 1.59498676E-02;
  COFD[4628] = -2.18713176E+01;
  COFD[4629] = 5.47368915E+00;
  COFD[4630] = -4.79424291E-01;
  COFD[4631] = 2.01372920E-02;
  COFD[4632] = -2.14414758E+01;
  COFD[4633] = 5.37331605E+00;
  COFD[4634] = -4.70491203E-01;
  COFD[4635] = 1.99134666E-02;
  COFD[4636] = -2.14532286E+01;
  COFD[4637] = 5.37331605E+00;
  COFD[4638] = -4.70491203E-01;
  COFD[4639] = 1.99134666E-02;
  COFD[4640] = -2.21980972E+01;
  COFD[4641] = 5.59472344E+00;
  COFD[4642] = -4.91421518E-01;
  COFD[4643] = 2.05117088E-02;
  COFD[4644] = -2.19981661E+01;
  COFD[4645] = 5.51276597E+00;
  COFD[4646] = -4.83701824E-01;
  COFD[4647] = 2.02915297E-02;
  COFD[4648] = -2.20082773E+01;
  COFD[4649] = 5.51276597E+00;
  COFD[4650] = -4.83701824E-01;
  COFD[4651] = 2.02915297E-02;
  COFD[4652] = -2.01341398E+01;
  COFD[4653] = 5.03101171E+00;
  COFD[4654] = -4.32665019E-01;
  COFD[4655] = 1.85372086E-02;
  COFD[4656] = -2.24674225E+01;
  COFD[4657] = 5.49330641E+00;
  COFD[4658] = -4.60498247E-01;
  COFD[4659] = 1.84639199E-02;
  COFD[4660] = -2.24733846E+01;
  COFD[4661] = 5.49330641E+00;
  COFD[4662] = -4.60498247E-01;
  COFD[4663] = 1.84639199E-02;
  COFD[4664] = -2.22040003E+01;
  COFD[4665] = 5.51146842E+00;
  COFD[4666] = -4.83562214E-01;
  COFD[4667] = 2.02866024E-02;
  COFD[4668] = -2.21799775E+01;
  COFD[4669] = 5.51146842E+00;
  COFD[4670] = -4.83562214E-01;
  COFD[4671] = 2.02866024E-02;
  COFD[4672] = -2.23961150E+01;
  COFD[4673] = 5.56066804E+00;
  COFD[4674] = -4.88405706E-01;
  COFD[4675] = 2.04357330E-02;
  COFD[4676] = -2.24022848E+01;
  COFD[4677] = 5.56066804E+00;
  COFD[4678] = -4.88405706E-01;
  COFD[4679] = 2.04357330E-02;
  COFD[4680] = -2.24082377E+01;
  COFD[4681] = 5.56066804E+00;
  COFD[4682] = -4.88405706E-01;
  COFD[4683] = 2.04357330E-02;
  COFD[4684] = -2.28193866E+01;
  COFD[4685] = 5.58523510E+00;
  COFD[4686] = -4.81201481E-01;
  COFD[4687] = 1.97107111E-02;
  COFD[4688] = -1.74132586E+01;
  COFD[4689] = 4.11838823E+00;
  COFD[4690] = -3.22329602E-01;
  COFD[4691] = 1.40802468E-02;
  COFD[4692] = -2.13758266E+01;
  COFD[4693] = 5.35135690E+00;
  COFD[4694] = -4.68903699E-01;
  COFD[4695] = 1.98958921E-02;
  COFD[4696] = -2.17133603E+01;
  COFD[4697] = 5.41948945E+00;
  COFD[4698] = -4.73474138E-01;
  COFD[4699] = 1.99217500E-02;
  COFD[4700] = -2.17133603E+01;
  COFD[4701] = 5.41948945E+00;
  COFD[4702] = -4.73474138E-01;
  COFD[4703] = 1.99217500E-02;
  COFD[4704] = -2.17073940E+01;
  COFD[4705] = 5.41948945E+00;
  COFD[4706] = -4.73474138E-01;
  COFD[4707] = 1.99217500E-02;
  COFD[4708] = -2.22906347E+01;
  COFD[4709] = 5.39861129E+00;
  COFD[4710] = -4.43119198E-01;
  COFD[4711] = 1.75075657E-02;
  COFD[4712] = -2.10640502E+01;
  COFD[4713] = 5.23527231E+00;
  COFD[4714] = -4.55448724E-01;
  COFD[4715] = 1.93756364E-02;
  COFD[4716] = -1.98610465E+01;
  COFD[4717] = 4.84231878E+00;
  COFD[4718] = -4.10101001E-01;
  COFD[4719] = 1.76356687E-02;
  COFD[4720] = -1.94091316E+01;
  COFD[4721] = 5.32291505E+00;
  COFD[4722] = -4.65883522E-01;
  COFD[4723] = 1.97916109E-02;
  COFD[4724] = -1.87878758E+01;
  COFD[4725] = 4.61260432E+00;
  COFD[4726] = -3.82854484E-01;
  COFD[4727] = 1.65575163E-02;
  COFD[4728] = -1.88114840E+01;
  COFD[4729] = 4.61260432E+00;
  COFD[4730] = -3.82854484E-01;
  COFD[4731] = 1.65575163E-02;
  COFD[4732] = -2.02566153E+01;
  COFD[4733] = 4.97613338E+00;
  COFD[4734] = -4.26175206E-01;
  COFD[4735] = 1.82809270E-02;
  COFD[4736] = -1.52614345E+01;
  COFD[4737] = 3.64565939E+00;
  COFD[4738] = -2.61726871E-01;
  COFD[4739] = 1.14799244E-02;
  COFD[4740] = -2.03437771E+01;
  COFD[4741] = 4.57152878E+00;
  COFD[4742] = -3.08371263E-01;
  COFD[4743] = 1.05838559E-02;
  COFD[4744] = -2.02660328E+01;
  COFD[4745] = 4.97613338E+00;
  COFD[4746] = -4.26175206E-01;
  COFD[4747] = 1.82809270E-02;
  COFD[4748] = -2.02467952E+01;
  COFD[4749] = 4.97613338E+00;
  COFD[4750] = -4.26175206E-01;
  COFD[4751] = 1.82809270E-02;
  COFD[4752] = -2.10572526E+01;
  COFD[4753] = 5.31360223E+00;
  COFD[4754] = -4.64787000E-01;
  COFD[4755] = 1.97483720E-02;
  COFD[4756] = -2.09912989E+01;
  COFD[4757] = 5.28557747E+00;
  COFD[4758] = -4.61402384E-01;
  COFD[4759] = 1.96111546E-02;
  COFD[4760] = -2.13240709E+01;
  COFD[4761] = 4.87252053E+00;
  COFD[4762] = -3.56127804E-01;
  COFD[4763] = 1.29948788E-02;
  COFD[4764] = -2.13352587E+01;
  COFD[4765] = 4.87252053E+00;
  COFD[4766] = -3.56127804E-01;
  COFD[4767] = 1.29948788E-02;
  COFD[4768] = -2.19973126E+01;
  COFD[4769] = 5.21365421E+00;
  COFD[4770] = -4.11227771E-01;
  COFD[4771] = 1.58122118E-02;
  COFD[4772] = -2.15116655E+01;
  COFD[4773] = 4.94878244E+00;
  COFD[4774] = -3.68158605E-01;
  COFD[4775] = 1.36008797E-02;
  COFD[4776] = -1.98832169E+01;
  COFD[4777] = 4.84731557E+00;
  COFD[4778] = -4.10638352E-01;
  COFD[4779] = 1.76543886E-02;
  COFD[4780] = -2.25018696E+01;
  COFD[4781] = 5.59178974E+00;
  COFD[4782] = -4.85668031E-01;
  COFD[4783] = 2.00491907E-02;
  COFD[4784] = -2.22817317E+01;
  COFD[4785] = 5.59185582E+00;
  COFD[4786] = -4.91155812E-01;
  COFD[4787] = 2.05043018E-02;
  COFD[4788] = -2.22946247E+01;
  COFD[4789] = 5.59185582E+00;
  COFD[4790] = -4.91155812E-01;
  COFD[4791] = 2.05043018E-02;
  COFD[4792] = -2.25171753E+01;
  COFD[4793] = 5.58249828E+00;
  COFD[4794] = -4.78873376E-01;
  COFD[4795] = 1.95316774E-02;
  COFD[4796] = -2.25007852E+01;
  COFD[4797] = 5.58206320E+00;
  COFD[4798] = -4.82956809E-01;
  COFD[4799] = 1.98731634E-02;
  COFD[4800] = -2.25119507E+01;
  COFD[4801] = 5.58206320E+00;
  COFD[4802] = -4.82956809E-01;
  COFD[4803] = 1.98731634E-02;
  COFD[4804] = -2.12151921E+01;
  COFD[4805] = 5.35335833E+00;
  COFD[4806] = -4.69065665E-01;
  COFD[4807] = 1.98989604E-02;
  COFD[4808] = -2.20355105E+01;
  COFD[4809] = 5.14570932E+00;
  COFD[4810] = -3.99877142E-01;
  COFD[4811] = 1.52199557E-02;
  COFD[4812] = -2.20422494E+01;
  COFD[4813] = 5.14570932E+00;
  COFD[4814] = -3.99877142E-01;
  COFD[4815] = 1.52199557E-02;
  COFD[4816] = -2.27209132E+01;
  COFD[4817] = 5.58204407E+00;
  COFD[4818] = -4.83002356E-01;
  COFD[4819] = 1.98770691E-02;
  COFD[4820] = -2.26937831E+01;
  COFD[4821] = 5.58204407E+00;
  COFD[4822] = -4.83002356E-01;
  COFD[4823] = 1.98770691E-02;
  COFD[4824] = -2.28056945E+01;
  COFD[4825] = 5.58523510E+00;
  COFD[4826] = -4.81201481E-01;
  COFD[4827] = 1.97107111E-02;
  COFD[4828] = -2.28126577E+01;
  COFD[4829] = 5.58523510E+00;
  COFD[4830] = -4.81201481E-01;
  COFD[4831] = 1.97107111E-02;
  COFD[4832] = -2.28193866E+01;
  COFD[4833] = 5.58523510E+00;
  COFD[4834] = -4.81201481E-01;
  COFD[4835] = 1.97107111E-02;
  COFD[4836] = -2.27786027E+01;
  COFD[4837] = 5.40563818E+00;
  COFD[4838] = -4.44444322E-01;
  COFD[4839] = 1.75813146E-02;
  COFD[4840] = -1.84519686E+01;
  COFD[4841] = 4.46362510E+00;
  COFD[4842] = -3.64693797E-01;
  COFD[4843] = 1.58180537E-02;
  COFD[4844] = -2.22184984E+01;
  COFD[4845] = 5.56261157E+00;
  COFD[4846] = -4.88568348E-01;
  COFD[4847] = 2.04392305E-02;
  COFD[4848] = -2.25129068E+01;
  COFD[4849] = 5.61124534E+00;
  COFD[4850] = -4.90219613E-01;
  COFD[4851] = 2.03279325E-02;
  COFD[4852] = -2.25129068E+01;
  COFD[4853] = 5.61124534E+00;
  COFD[4854] = -4.90219613E-01;
  COFD[4855] = 2.03279325E-02;
  COFD[4856] = -2.25061634E+01;
  COFD[4857] = 5.61124534E+00;
  COFD[4858] = -4.90219613E-01;
  COFD[4859] = 2.03279325E-02;
  COFD[4860] = -2.16250380E+01;
  COFD[4861] = 4.94878244E+00;
  COFD[4862] = -3.68158605E-01;
  COFD[4863] = 1.36008797E-02;
  COFD[4864] = -1.47042106E+01;
  COFD[4865] = 3.27505697E+00;
  COFD[4866] = -2.14306851E-01;
  COFD[4867] = 9.45219335E-03;
  COFD[4868] = -1.39186828E+01;
  COFD[4869] = 2.97137588E+00;
  COFD[4870] = -1.75491257E-01;
  COFD[4871] = 7.79646773E-03;
  COFD[4872] = -1.32522938E+01;
  COFD[4873] = 3.34156587E+00;
  COFD[4874] = -2.22853306E-01;
  COFD[4875] = 9.81883417E-03;
  COFD[4876] = -1.31034501E+01;
  COFD[4877] = 2.80913567E+00;
  COFD[4878] = -1.54536855E-01;
  COFD[4879] = 6.89359313E-03;
  COFD[4880] = -1.31174788E+01;
  COFD[4881] = 2.80913567E+00;
  COFD[4882] = -1.54536855E-01;
  COFD[4883] = 6.89359313E-03;
  COFD[4884] = -1.41301009E+01;
  COFD[4885] = 3.05837263E+00;
  COFD[4886] = -1.86672802E-01;
  COFD[4887] = 8.27575734E-03;
  COFD[4888] = -1.08473079E+01;
  COFD[4889] = 2.19094415E+00;
  COFD[4890] = -7.11992510E-02;
  COFD[4891] = 3.14105973E-03;
  COFD[4892] = -1.92450630E+01;
  COFD[4893] = 5.05708283E+00;
  COFD[4894] = -4.35739290E-01;
  COFD[4895] = 1.86583205E-02;
  COFD[4896] = -1.41345352E+01;
  COFD[4897] = 3.05837263E+00;
  COFD[4898] = -1.86672802E-01;
  COFD[4899] = 8.27575734E-03;
  COFD[4900] = -1.41254300E+01;
  COFD[4901] = 3.05837263E+00;
  COFD[4902] = -1.86672802E-01;
  COFD[4903] = 8.27575734E-03;
  COFD[4904] = -1.48128541E+01;
  COFD[4905] = 3.33113524E+00;
  COFD[4906] = -2.21479057E-01;
  COFD[4907] = 9.75837737E-03;
  COFD[4908] = -1.47473013E+01;
  COFD[4909] = 3.30594991E+00;
  COFD[4910] = -2.18182207E-01;
  COFD[4911] = 9.61429447E-03;
  COFD[4912] = -1.91058045E+01;
  COFD[4913] = 4.86821670E+00;
  COFD[4914] = -4.13144121E-01;
  COFD[4915] = 1.77546701E-02;
  COFD[4916] = -1.91112992E+01;
  COFD[4917] = 4.86821670E+00;
  COFD[4918] = -4.13144121E-01;
  COFD[4919] = 1.77546701E-02;
  COFD[4920] = -1.85699398E+01;
  COFD[4921] = 4.67076124E+00;
  COFD[4922] = -3.90022427E-01;
  COFD[4923] = 1.68533953E-02;
  COFD[4924] = -1.90218811E+01;
  COFD[4925] = 4.83076737E+00;
  COFD[4926] = -4.08802573E-01;
  COFD[4927] = 1.75875241E-02;
  COFD[4928] = -1.39388102E+01;
  COFD[4929] = 2.97564184E+00;
  COFD[4930] = -1.76025309E-01;
  COFD[4931] = 7.81869993E-03;
  COFD[4932] = -1.67983988E+01;
  COFD[4933] = 4.00828594E+00;
  COFD[4934] = -3.08414344E-01;
  COFD[4935] = 1.34907430E-02;
  COFD[4936] = -1.61614949E+01;
  COFD[4937] = 3.75910622E+00;
  COFD[4938] = -2.75986578E-01;
  COFD[4939] = 1.20782843E-02;
  COFD[4940] = -1.61680559E+01;
  COFD[4941] = 3.75910622E+00;
  COFD[4942] = -2.75986578E-01;
  COFD[4943] = 1.20782843E-02;
  COFD[4944] = -1.72409761E+01;
  COFD[4945] = 4.17190426E+00;
  COFD[4946] = -3.28894681E-01;
  COFD[4947] = 1.43498101E-02;
  COFD[4948] = -1.70022486E+01;
  COFD[4949] = 4.05099737E+00;
  COFD[4950] = -3.13841660E-01;
  COFD[4951] = 1.37218854E-02;
  COFD[4952] = -1.70077296E+01;
  COFD[4953] = 4.05099737E+00;
  COFD[4954] = -3.13841660E-01;
  COFD[4955] = 1.37218854E-02;
  COFD[4956] = -1.47490941E+01;
  COFD[4957] = 3.39229020E+00;
  COFD[4958] = -2.29520232E-01;
  COFD[4959] = 1.01114311E-02;
  COFD[4960] = -1.88275407E+01;
  COFD[4961] = 4.71729964E+00;
  COFD[4962] = -3.95432573E-01;
  COFD[4963] = 1.70623691E-02;
  COFD[4964] = -1.88304756E+01;
  COFD[4965] = 4.71729964E+00;
  COFD[4966] = -3.95432573E-01;
  COFD[4967] = 1.70623691E-02;
  COFD[4968] = -1.71740753E+01;
  COFD[4969] = 4.04958641E+00;
  COFD[4970] = -3.13664243E-01;
  COFD[4971] = 1.37144097E-02;
  COFD[4972] = -1.71622104E+01;
  COFD[4973] = 4.04958641E+00;
  COFD[4974] = -3.13664243E-01;
  COFD[4975] = 1.37144097E-02;
  COFD[4976] = -1.74072739E+01;
  COFD[4977] = 4.11838823E+00;
  COFD[4978] = -3.22329602E-01;
  COFD[4979] = 1.40802468E-02;
  COFD[4980] = -1.74103290E+01;
  COFD[4981] = 4.11838823E+00;
  COFD[4982] = -3.22329602E-01;
  COFD[4983] = 1.40802468E-02;
  COFD[4984] = -1.74132586E+01;
  COFD[4985] = 4.11838823E+00;
  COFD[4986] = -3.22329602E-01;
  COFD[4987] = 1.40802468E-02;
  COFD[4988] = -1.84519686E+01;
  COFD[4989] = 4.46362510E+00;
  COFD[4990] = -3.64693797E-01;
  COFD[4991] = 1.58180537E-02;
  COFD[4992] = -1.30341700E+01;
  COFD[4993] = 2.73155251E+00;
  COFD[4994] = -1.44594082E-01;
  COFD[4995] = 6.46883252E-03;
  COFD[4996] = -1.58784406E+01;
  COFD[4997] = 3.68407693E+00;
  COFD[4998] = -2.66228170E-01;
  COFD[4999] = 1.16542305E-02;
  COFD[5000] = -1.66287739E+01;
  COFD[5001] = 3.93849401E+00;
  COFD[5002] = -2.99416642E-01;
  COFD[5003] = 1.31020815E-02;
  COFD[5004] = -1.66287739E+01;
  COFD[5005] = 3.93849401E+00;
  COFD[5006] = -2.99416642E-01;
  COFD[5007] = 1.31020815E-02;
  COFD[5008] = -1.66258365E+01;
  COFD[5009] = 3.93849401E+00;
  COFD[5010] = -2.99416642E-01;
  COFD[5011] = 1.31020815E-02;
  COFD[5012] = -1.90728704E+01;
  COFD[5013] = 4.83076737E+00;
  COFD[5014] = -4.08802573E-01;
  COFD[5015] = 1.75875241E-02;
  COFD[5016] = -1.85744784E+01;
  COFD[5017] = 4.54507313E+00;
  COFD[5018] = -3.74508073E-01;
  COFD[5019] = 1.62126770E-02;
  COFD[5020] = -1.74272359E+01;
  COFD[5021] = 4.14166966E+00;
  COFD[5022] = -3.25149462E-01;
  COFD[5023] = 1.41943811E-02;
  COFD[5024] = -1.68734802E+01;
  COFD[5025] = 4.63687143E+00;
  COFD[5026] = -3.85900861E-01;
  COFD[5027] = 1.66856798E-02;
  COFD[5028] = -1.62772129E+01;
  COFD[5029] = 3.88250968E+00;
  COFD[5030] = -2.92155848E-01;
  COFD[5031] = 1.27867850E-02;
  COFD[5032] = -1.62996992E+01;
  COFD[5033] = 3.88250968E+00;
  COFD[5034] = -2.92155848E-01;
  COFD[5035] = 1.27867850E-02;
  COFD[5036] = -1.77428141E+01;
  COFD[5037] = 4.25438185E+00;
  COFD[5038] = -3.39084808E-01;
  COFD[5039] = 1.47709916E-02;
  COFD[5040] = -1.31911433E+01;
  COFD[5041] = 3.04970299E+00;
  COFD[5042] = -1.85555523E-01;
  COFD[5043] = 8.22773480E-03;
  COFD[5044] = -2.14542455E+01;
  COFD[5045] = 5.49993732E+00;
  COFD[5046] = -4.62042917E-01;
  COFD[5047] = 1.85577413E-02;
  COFD[5048] = -1.77515170E+01;
  COFD[5049] = 4.25438185E+00;
  COFD[5050] = -3.39084808E-01;
  COFD[5051] = 1.47709916E-02;
  COFD[5052] = -1.77337260E+01;
  COFD[5053] = 4.25438185E+00;
  COFD[5054] = -3.39084808E-01;
  COFD[5055] = 1.47709916E-02;
  COFD[5056] = -1.86130101E+01;
  COFD[5057] = 4.62613551E+00;
  COFD[5058] = -3.84556396E-01;
  COFD[5059] = 1.66292467E-02;
  COFD[5060] = -1.85418525E+01;
  COFD[5061] = 4.59643893E+00;
  COFD[5062] = -3.80823304E-01;
  COFD[5063] = 1.64720603E-02;
  COFD[5064] = -2.19815087E+01;
  COFD[5065] = 5.58446511E+00;
  COFD[5066] = -4.79399331E-01;
  COFD[5067] = 1.95652693E-02;
  COFD[5068] = -2.19919092E+01;
  COFD[5069] = 5.58446511E+00;
  COFD[5070] = -4.79399331E-01;
  COFD[5071] = 1.95652693E-02;
  COFD[5072] = -2.19270866E+01;
  COFD[5073] = 5.60963444E+00;
  COFD[5074] = -4.89805286E-01;
  COFD[5075] = 2.03017681E-02;
  COFD[5076] = -2.19932273E+01;
  COFD[5077] = 5.58514538E+00;
  COFD[5078] = -4.80745077E-01;
  COFD[5079] = 1.96733087E-02;
  COFD[5080] = -1.74527809E+01;
  COFD[5081] = 4.14792932E+00;
  COFD[5082] = -3.25920382E-01;
  COFD[5083] = 1.42261620E-02;
  COFD[5084] = -2.07349578E+01;
  COFD[5085] = 5.23705932E+00;
  COFD[5086] = -4.55655792E-01;
  COFD[5087] = 1.93836339E-02;
  COFD[5088] = -2.02024001E+01;
  COFD[5089] = 5.08408346E+00;
  COFD[5090] = -4.38907391E-01;
  COFD[5091] = 1.87824789E-02;
  COFD[5092] = -2.02144438E+01;
  COFD[5093] = 5.08408346E+00;
  COFD[5094] = -4.38907391E-01;
  COFD[5095] = 1.87824789E-02;
  COFD[5096] = -2.10998079E+01;
  COFD[5097] = 5.37657006E+00;
  COFD[5098] = -4.70707921E-01;
  COFD[5099] = 1.99145326E-02;
  COFD[5100] = -2.08992599E+01;
  COFD[5101] = 5.28495077E+00;
  COFD[5102] = -4.61326381E-01;
  COFD[5103] = 1.96080621E-02;
  COFD[5104] = -2.09096388E+01;
  COFD[5105] = 5.28495077E+00;
  COFD[5106] = -4.61326381E-01;
  COFD[5107] = 1.96080621E-02;
  COFD[5108] = -1.86961022E+01;
  COFD[5109] = 4.67999453E+00;
  COFD[5110] = -3.91135253E-01;
  COFD[5111] = 1.68982388E-02;
  COFD[5112] = -2.20848195E+01;
  COFD[5113] = 5.59135292E+00;
  COFD[5114] = -4.85565630E-01;
  COFD[5115] = 2.00429035E-02;
  COFD[5116] = -2.20909755E+01;
  COFD[5117] = 5.59135292E+00;
  COFD[5118] = -4.85565630E-01;
  COFD[5119] = 2.00429035E-02;
  COFD[5120] = -2.11249323E+01;
  COFD[5121] = 5.28304555E+00;
  COFD[5122] = -4.61095222E-01;
  COFD[5123] = 1.95986518E-02;
  COFD[5124] = -2.11001336E+01;
  COFD[5125] = 5.28304555E+00;
  COFD[5126] = -4.61095222E-01;
  COFD[5127] = 1.95986518E-02;
  COFD[5128] = -2.13633121E+01;
  COFD[5129] = 5.35135690E+00;
  COFD[5130] = -4.68903699E-01;
  COFD[5131] = 1.98958921E-02;
  COFD[5132] = -2.13696801E+01;
  COFD[5133] = 5.35135690E+00;
  COFD[5134] = -4.68903699E-01;
  COFD[5135] = 1.98958921E-02;
  COFD[5136] = -2.13758266E+01;
  COFD[5137] = 5.35135690E+00;
  COFD[5138] = -4.68903699E-01;
  COFD[5139] = 1.98958921E-02;
  COFD[5140] = -2.22184984E+01;
  COFD[5141] = 5.56261157E+00;
  COFD[5142] = -4.88568348E-01;
  COFD[5143] = 2.04392305E-02;
  COFD[5144] = -1.58784406E+01;
  COFD[5145] = 3.68407693E+00;
  COFD[5146] = -2.66228170E-01;
  COFD[5147] = 1.16542305E-02;
  COFD[5148] = -2.00443658E+01;
  COFD[5149] = 5.03042083E+00;
  COFD[5150] = -4.32596342E-01;
  COFD[5151] = 1.85345510E-02;
  COFD[5152] = -2.05658427E+01;
  COFD[5153] = 5.17526774E+00;
  COFD[5154] = -4.48472252E-01;
  COFD[5155] = 1.91050891E-02;
  COFD[5156] = -2.05658427E+01;
  COFD[5157] = 5.17526774E+00;
  COFD[5158] = -4.48472252E-01;
  COFD[5159] = 1.91050891E-02;
  COFD[5160] = -2.05596825E+01;
  COFD[5161] = 5.17526774E+00;
  COFD[5162] = -4.48472252E-01;
  COFD[5163] = 1.91050891E-02;
  COFD[5164] = -2.20972799E+01;
  COFD[5165] = 5.58514538E+00;
  COFD[5166] = -4.80745077E-01;
  COFD[5167] = 1.96733087E-02;
  COFD[5168] = -1.91975554E+01;
  COFD[5169] = 4.73837374E+00;
  COFD[5170] = -3.97916523E-01;
  COFD[5171] = 1.71599378E-02;
  COFD[5172] = -1.79721047E+01;
  COFD[5173] = 4.30841971E+00;
  COFD[5174] = -3.45524579E-01;
  COFD[5175] = 1.50265381E-02;
  COFD[5176] = -1.74816690E+01;
  COFD[5177] = 4.80792005E+00;
  COFD[5178] = -4.06126584E-01;
  COFD[5179] = 1.74831083E-02;
  COFD[5180] = -1.69259507E+01;
  COFD[5181] = 4.09077642E+00;
  COFD[5182] = -3.18894990E-01;
  COFD[5183] = 1.39371445E-02;
  COFD[5184] = -1.69480333E+01;
  COFD[5185] = 4.09077642E+00;
  COFD[5186] = -3.18894990E-01;
  COFD[5187] = 1.39371445E-02;
  COFD[5188] = -1.83348590E+01;
  COFD[5189] = 4.43878381E+00;
  COFD[5190] = -3.61697624E-01;
  COFD[5191] = 1.56975581E-02;
  COFD[5192] = -1.36889460E+01;
  COFD[5193] = 3.19999740E+00;
  COFD[5194] = -2.04999020E-01;
  COFD[5195] = 9.06766105E-03;
  COFD[5196] = -2.13622755E+01;
  COFD[5197] = 5.35901292E+00;
  COFD[5198] = -4.36172487E-01;
  COFD[5199] = 1.71345319E-02;
  COFD[5200] = -1.83433151E+01;
  COFD[5201] = 4.43878381E+00;
  COFD[5202] = -3.61697624E-01;
  COFD[5203] = 1.56975581E-02;
  COFD[5204] = -1.83260242E+01;
  COFD[5205] = 4.43878381E+00;
  COFD[5206] = -3.61697624E-01;
  COFD[5207] = 1.56975581E-02;
  COFD[5208] = -1.91935972E+01;
  COFD[5209] = 4.80030220E+00;
  COFD[5210] = -4.05235041E-01;
  COFD[5211] = 1.74483531E-02;
  COFD[5212] = -1.91463450E+01;
  COFD[5213] = 4.78094221E+00;
  COFD[5214] = -4.02985837E-01;
  COFD[5215] = 1.73614221E-02;
  COFD[5216] = -2.19914948E+01;
  COFD[5217] = 5.49642957E+00;
  COFD[5218] = -4.61132993E-01;
  COFD[5219] = 1.85004773E-02;
  COFD[5220] = -2.20016211E+01;
  COFD[5221] = 5.49642957E+00;
  COFD[5222] = -4.61132993E-01;
  COFD[5223] = 1.85004773E-02;
  COFD[5224] = -2.20823256E+01;
  COFD[5225] = 5.58518321E+00;
  COFD[5226] = -4.80534235E-01;
  COFD[5227] = 1.96556393E-02;
  COFD[5228] = -2.20212539E+01;
  COFD[5229] = 5.50583166E+00;
  COFD[5230] = -4.63753262E-01;
  COFD[5231] = 1.86693462E-02;
  COFD[5232] = -1.80021491E+01;
  COFD[5233] = 4.31656593E+00;
  COFD[5234] = -3.46539554E-01;
  COFD[5235] = 1.50688196E-02;
  COFD[5236] = -2.12614490E+01;
  COFD[5237] = 5.38135645E+00;
  COFD[5238] = -4.71058360E-01;
  COFD[5239] = 1.99188046E-02;
  COFD[5240] = -2.07294288E+01;
  COFD[5241] = 5.23116678E+00;
  COFD[5242] = -4.54972675E-01;
  COFD[5243] = 1.93572354E-02;
  COFD[5244] = -2.07411749E+01;
  COFD[5245] = 5.23116678E+00;
  COFD[5246] = -4.54972675E-01;
  COFD[5247] = 1.93572354E-02;
  COFD[5248] = -2.15270515E+01;
  COFD[5249] = 5.47662534E+00;
  COFD[5250] = -4.79750189E-01;
  COFD[5251] = 2.01492627E-02;
  COFD[5252] = -2.13502458E+01;
  COFD[5253] = 5.39784038E+00;
  COFD[5254] = -4.72269379E-01;
  COFD[5255] = 1.99339592E-02;
  COFD[5256] = -2.13603509E+01;
  COFD[5257] = 5.39784038E+00;
  COFD[5258] = -4.72269379E-01;
  COFD[5259] = 1.99339592E-02;
  COFD[5260] = -1.92638665E+01;
  COFD[5261] = 4.84335373E+00;
  COFD[5262] = -4.10212751E-01;
  COFD[5263] = 1.76395874E-02;
  COFD[5264] = -2.22648022E+01;
  COFD[5265] = 5.57944619E+00;
  COFD[5266] = -4.78032626E-01;
  COFD[5267] = 1.94775370E-02;
  COFD[5268] = -2.22707599E+01;
  COFD[5269] = 5.57944619E+00;
  COFD[5270] = -4.78032626E-01;
  COFD[5271] = 1.94775370E-02;
  COFD[5272] = -2.15712184E+01;
  COFD[5273] = 5.39732073E+00;
  COFD[5274] = -4.72235834E-01;
  COFD[5275] = 1.99338718E-02;
  COFD[5276] = -2.15472132E+01;
  COFD[5277] = 5.39732073E+00;
  COFD[5278] = -4.72235834E-01;
  COFD[5279] = 1.99338718E-02;
  COFD[5280] = -2.17012465E+01;
  COFD[5281] = 5.41948945E+00;
  COFD[5282] = -4.73474138E-01;
  COFD[5283] = 1.99217500E-02;
  COFD[5284] = -2.17074118E+01;
  COFD[5285] = 5.41948945E+00;
  COFD[5286] = -4.73474138E-01;
  COFD[5287] = 1.99217500E-02;
  COFD[5288] = -2.17133603E+01;
  COFD[5289] = 5.41948945E+00;
  COFD[5290] = -4.73474138E-01;
  COFD[5291] = 1.99217500E-02;
  COFD[5292] = -2.25129068E+01;
  COFD[5293] = 5.61124534E+00;
  COFD[5294] = -4.90219613E-01;
  COFD[5295] = 2.03279325E-02;
  COFD[5296] = -1.66287739E+01;
  COFD[5297] = 3.93849401E+00;
  COFD[5298] = -2.99416642E-01;
  COFD[5299] = 1.31020815E-02;
  COFD[5300] = -2.05658427E+01;
  COFD[5301] = 5.17526774E+00;
  COFD[5302] = -4.48472252E-01;
  COFD[5303] = 1.91050891E-02;
  COFD[5304] = -2.11796262E+01;
  COFD[5305] = 5.35817304E+00;
  COFD[5306] = -4.69455306E-01;
  COFD[5307] = 1.99063292E-02;
  COFD[5308] = -2.11796262E+01;
  COFD[5309] = 5.35817304E+00;
  COFD[5310] = -4.69455306E-01;
  COFD[5311] = 1.99063292E-02;
  COFD[5312] = -2.11736643E+01;
  COFD[5313] = 5.35817304E+00;
  COFD[5314] = -4.69455306E-01;
  COFD[5315] = 1.99063292E-02;
  COFD[5316] = -2.21221184E+01;
  COFD[5317] = 5.50583166E+00;
  COFD[5318] = -4.63753262E-01;
  COFD[5319] = 1.86693462E-02;
  COFD[5320] = -1.91975554E+01;
  COFD[5321] = 4.73837374E+00;
  COFD[5322] = -3.97916523E-01;
  COFD[5323] = 1.71599378E-02;
  COFD[5324] = -1.79721047E+01;
  COFD[5325] = 4.30841971E+00;
  COFD[5326] = -3.45524579E-01;
  COFD[5327] = 1.50265381E-02;
  COFD[5328] = -1.74816690E+01;
  COFD[5329] = 4.80792005E+00;
  COFD[5330] = -4.06126584E-01;
  COFD[5331] = 1.74831083E-02;
  COFD[5332] = -1.69259507E+01;
  COFD[5333] = 4.09077642E+00;
  COFD[5334] = -3.18894990E-01;
  COFD[5335] = 1.39371445E-02;
  COFD[5336] = -1.69480333E+01;
  COFD[5337] = 4.09077642E+00;
  COFD[5338] = -3.18894990E-01;
  COFD[5339] = 1.39371445E-02;
  COFD[5340] = -1.83348590E+01;
  COFD[5341] = 4.43878381E+00;
  COFD[5342] = -3.61697624E-01;
  COFD[5343] = 1.56975581E-02;
  COFD[5344] = -1.36889460E+01;
  COFD[5345] = 3.19999740E+00;
  COFD[5346] = -2.04999020E-01;
  COFD[5347] = 9.06766105E-03;
  COFD[5348] = -2.13622755E+01;
  COFD[5349] = 5.35901292E+00;
  COFD[5350] = -4.36172487E-01;
  COFD[5351] = 1.71345319E-02;
  COFD[5352] = -1.83433151E+01;
  COFD[5353] = 4.43878381E+00;
  COFD[5354] = -3.61697624E-01;
  COFD[5355] = 1.56975581E-02;
  COFD[5356] = -1.83260242E+01;
  COFD[5357] = 4.43878381E+00;
  COFD[5358] = -3.61697624E-01;
  COFD[5359] = 1.56975581E-02;
  COFD[5360] = -1.91935972E+01;
  COFD[5361] = 4.80030220E+00;
  COFD[5362] = -4.05235041E-01;
  COFD[5363] = 1.74483531E-02;
  COFD[5364] = -1.91463450E+01;
  COFD[5365] = 4.78094221E+00;
  COFD[5366] = -4.02985837E-01;
  COFD[5367] = 1.73614221E-02;
  COFD[5368] = -2.19914948E+01;
  COFD[5369] = 5.49642957E+00;
  COFD[5370] = -4.61132993E-01;
  COFD[5371] = 1.85004773E-02;
  COFD[5372] = -2.20016211E+01;
  COFD[5373] = 5.49642957E+00;
  COFD[5374] = -4.61132993E-01;
  COFD[5375] = 1.85004773E-02;
  COFD[5376] = -2.20823256E+01;
  COFD[5377] = 5.58518321E+00;
  COFD[5378] = -4.80534235E-01;
  COFD[5379] = 1.96556393E-02;
  COFD[5380] = -2.20212539E+01;
  COFD[5381] = 5.50583166E+00;
  COFD[5382] = -4.63753262E-01;
  COFD[5383] = 1.86693462E-02;
  COFD[5384] = -1.80021491E+01;
  COFD[5385] = 4.31656593E+00;
  COFD[5386] = -3.46539554E-01;
  COFD[5387] = 1.50688196E-02;
  COFD[5388] = -2.12614490E+01;
  COFD[5389] = 5.38135645E+00;
  COFD[5390] = -4.71058360E-01;
  COFD[5391] = 1.99188046E-02;
  COFD[5392] = -2.07294288E+01;
  COFD[5393] = 5.23116678E+00;
  COFD[5394] = -4.54972675E-01;
  COFD[5395] = 1.93572354E-02;
  COFD[5396] = -2.07411749E+01;
  COFD[5397] = 5.23116678E+00;
  COFD[5398] = -4.54972675E-01;
  COFD[5399] = 1.93572354E-02;
  COFD[5400] = -2.15270515E+01;
  COFD[5401] = 5.47662534E+00;
  COFD[5402] = -4.79750189E-01;
  COFD[5403] = 2.01492627E-02;
  COFD[5404] = -2.13502458E+01;
  COFD[5405] = 5.39784038E+00;
  COFD[5406] = -4.72269379E-01;
  COFD[5407] = 1.99339592E-02;
  COFD[5408] = -2.13603509E+01;
  COFD[5409] = 5.39784038E+00;
  COFD[5410] = -4.72269379E-01;
  COFD[5411] = 1.99339592E-02;
  COFD[5412] = -1.92638665E+01;
  COFD[5413] = 4.84335373E+00;
  COFD[5414] = -4.10212751E-01;
  COFD[5415] = 1.76395874E-02;
  COFD[5416] = -2.22648022E+01;
  COFD[5417] = 5.57944619E+00;
  COFD[5418] = -4.78032626E-01;
  COFD[5419] = 1.94775370E-02;
  COFD[5420] = -2.22707599E+01;
  COFD[5421] = 5.57944619E+00;
  COFD[5422] = -4.78032626E-01;
  COFD[5423] = 1.94775370E-02;
  COFD[5424] = -2.15712184E+01;
  COFD[5425] = 5.39732073E+00;
  COFD[5426] = -4.72235834E-01;
  COFD[5427] = 1.99338718E-02;
  COFD[5428] = -2.15472132E+01;
  COFD[5429] = 5.39732073E+00;
  COFD[5430] = -4.72235834E-01;
  COFD[5431] = 1.99338718E-02;
  COFD[5432] = -2.17012465E+01;
  COFD[5433] = 5.41948945E+00;
  COFD[5434] = -4.73474138E-01;
  COFD[5435] = 1.99217500E-02;
  COFD[5436] = -2.17074118E+01;
  COFD[5437] = 5.41948945E+00;
  COFD[5438] = -4.73474138E-01;
  COFD[5439] = 1.99217500E-02;
  COFD[5440] = -2.17133603E+01;
  COFD[5441] = 5.41948945E+00;
  COFD[5442] = -4.73474138E-01;
  COFD[5443] = 1.99217500E-02;
  COFD[5444] = -2.25129068E+01;
  COFD[5445] = 5.61124534E+00;
  COFD[5446] = -4.90219613E-01;
  COFD[5447] = 2.03279325E-02;
  COFD[5448] = -1.66287739E+01;
  COFD[5449] = 3.93849401E+00;
  COFD[5450] = -2.99416642E-01;
  COFD[5451] = 1.31020815E-02;
  COFD[5452] = -2.05658427E+01;
  COFD[5453] = 5.17526774E+00;
  COFD[5454] = -4.48472252E-01;
  COFD[5455] = 1.91050891E-02;
  COFD[5456] = -2.11796262E+01;
  COFD[5457] = 5.35817304E+00;
  COFD[5458] = -4.69455306E-01;
  COFD[5459] = 1.99063292E-02;
  COFD[5460] = -2.11796262E+01;
  COFD[5461] = 5.35817304E+00;
  COFD[5462] = -4.69455306E-01;
  COFD[5463] = 1.99063292E-02;
  COFD[5464] = -2.11736643E+01;
  COFD[5465] = 5.35817304E+00;
  COFD[5466] = -4.69455306E-01;
  COFD[5467] = 1.99063292E-02;
  COFD[5468] = -2.21221184E+01;
  COFD[5469] = 5.50583166E+00;
  COFD[5470] = -4.63753262E-01;
  COFD[5471] = 1.86693462E-02;
  COFD[5472] = -1.91918132E+01;
  COFD[5473] = 4.73837374E+00;
  COFD[5474] = -3.97916523E-01;
  COFD[5475] = 1.71599378E-02;
  COFD[5476] = -1.79673967E+01;
  COFD[5477] = 4.30841971E+00;
  COFD[5478] = -3.45524579E-01;
  COFD[5479] = 1.50265381E-02;
  COFD[5480] = -1.74813945E+01;
  COFD[5481] = 4.80792005E+00;
  COFD[5482] = -4.06126584E-01;
  COFD[5483] = 1.74831083E-02;
  COFD[5484] = -1.69227098E+01;
  COFD[5485] = 4.09077642E+00;
  COFD[5486] = -3.18894990E-01;
  COFD[5487] = 1.39371445E-02;
  COFD[5488] = -1.69446466E+01;
  COFD[5489] = 4.09077642E+00;
  COFD[5490] = -3.18894990E-01;
  COFD[5491] = 1.39371445E-02;
  COFD[5492] = -1.83296787E+01;
  COFD[5493] = 4.43878381E+00;
  COFD[5494] = -3.61697624E-01;
  COFD[5495] = 1.56975581E-02;
  COFD[5496] = -1.36884094E+01;
  COFD[5497] = 3.19999740E+00;
  COFD[5498] = -2.04999020E-01;
  COFD[5499] = 9.06766105E-03;
  COFD[5500] = -2.13587478E+01;
  COFD[5501] = 5.35901292E+00;
  COFD[5502] = -4.36172487E-01;
  COFD[5503] = 1.71345319E-02;
  COFD[5504] = -1.83380469E+01;
  COFD[5505] = 4.43878381E+00;
  COFD[5506] = -3.61697624E-01;
  COFD[5507] = 1.56975581E-02;
  COFD[5508] = -1.83209342E+01;
  COFD[5509] = 4.43878381E+00;
  COFD[5510] = -3.61697624E-01;
  COFD[5511] = 1.56975581E-02;
  COFD[5512] = -1.91905006E+01;
  COFD[5513] = 4.80030220E+00;
  COFD[5514] = -4.05235041E-01;
  COFD[5515] = 1.74483531E-02;
  COFD[5516] = -1.91430977E+01;
  COFD[5517] = 4.78094221E+00;
  COFD[5518] = -4.02985837E-01;
  COFD[5519] = 1.73614221E-02;
  COFD[5520] = -2.19866865E+01;
  COFD[5521] = 5.49642957E+00;
  COFD[5522] = -4.61132993E-01;
  COFD[5523] = 1.85004773E-02;
  COFD[5524] = -2.19967149E+01;
  COFD[5525] = 5.49642957E+00;
  COFD[5526] = -4.61132993E-01;
  COFD[5527] = 1.85004773E-02;
  COFD[5528] = -2.20773242E+01;
  COFD[5529] = 5.58518321E+00;
  COFD[5530] = -4.80534235E-01;
  COFD[5531] = 1.96556393E-02;
  COFD[5532] = -2.20161598E+01;
  COFD[5533] = 5.50583166E+00;
  COFD[5534] = -4.63753262E-01;
  COFD[5535] = 1.86693462E-02;
  COFD[5536] = -1.79974415E+01;
  COFD[5537] = 4.31656593E+00;
  COFD[5538] = -3.46539554E-01;
  COFD[5539] = 1.50688196E-02;
  COFD[5540] = -2.12554201E+01;
  COFD[5541] = 5.38135645E+00;
  COFD[5542] = -4.71058360E-01;
  COFD[5543] = 1.99188046E-02;
  COFD[5544] = -2.07249267E+01;
  COFD[5545] = 5.23116678E+00;
  COFD[5546] = -4.54972675E-01;
  COFD[5547] = 1.93572354E-02;
  COFD[5548] = -2.07365663E+01;
  COFD[5549] = 5.23116678E+00;
  COFD[5550] = -4.54972675E-01;
  COFD[5551] = 1.93572354E-02;
  COFD[5552] = -2.15223395E+01;
  COFD[5553] = 5.47662534E+00;
  COFD[5554] = -4.79750189E-01;
  COFD[5555] = 2.01492627E-02;
  COFD[5556] = -2.13454331E+01;
  COFD[5557] = 5.39784038E+00;
  COFD[5558] = -4.72269379E-01;
  COFD[5559] = 1.99339592E-02;
  COFD[5560] = -2.13554405E+01;
  COFD[5561] = 5.39784038E+00;
  COFD[5562] = -4.72269379E-01;
  COFD[5563] = 1.99339592E-02;
  COFD[5564] = -1.92580454E+01;
  COFD[5565] = 4.84335373E+00;
  COFD[5566] = -4.10212751E-01;
  COFD[5567] = 1.76395874E-02;
  COFD[5568] = -2.22589092E+01;
  COFD[5569] = 5.57944619E+00;
  COFD[5570] = -4.78032626E-01;
  COFD[5571] = 1.94775370E-02;
  COFD[5572] = -2.22647966E+01;
  COFD[5573] = 5.57944619E+00;
  COFD[5574] = -4.78032626E-01;
  COFD[5575] = 1.94775370E-02;
  COFD[5576] = -2.15651865E+01;
  COFD[5577] = 5.39732073E+00;
  COFD[5578] = -4.72235834E-01;
  COFD[5579] = 1.99338718E-02;
  COFD[5580] = -2.15414624E+01;
  COFD[5581] = 5.39732073E+00;
  COFD[5582] = -4.72235834E-01;
  COFD[5583] = 1.99338718E-02;
  COFD[5584] = -2.16954222E+01;
  COFD[5585] = 5.41948945E+00;
  COFD[5586] = -4.73474138E-01;
  COFD[5587] = 1.99217500E-02;
  COFD[5588] = -2.17015156E+01;
  COFD[5589] = 5.41948945E+00;
  COFD[5590] = -4.73474138E-01;
  COFD[5591] = 1.99217500E-02;
  COFD[5592] = -2.17073940E+01;
  COFD[5593] = 5.41948945E+00;
  COFD[5594] = -4.73474138E-01;
  COFD[5595] = 1.99217500E-02;
  COFD[5596] = -2.25061634E+01;
  COFD[5597] = 5.61124534E+00;
  COFD[5598] = -4.90219613E-01;
  COFD[5599] = 2.03279325E-02;
  COFD[5600] = -1.66258365E+01;
  COFD[5601] = 3.93849401E+00;
  COFD[5602] = -2.99416642E-01;
  COFD[5603] = 1.31020815E-02;
  COFD[5604] = -2.05596825E+01;
  COFD[5605] = 5.17526774E+00;
  COFD[5606] = -4.48472252E-01;
  COFD[5607] = 1.91050891E-02;
  COFD[5608] = -2.11736643E+01;
  COFD[5609] = 5.35817304E+00;
  COFD[5610] = -4.69455306E-01;
  COFD[5611] = 1.99063292E-02;
  COFD[5612] = -2.11736643E+01;
  COFD[5613] = 5.35817304E+00;
  COFD[5614] = -4.69455306E-01;
  COFD[5615] = 1.99063292E-02;
  COFD[5616] = -2.11677727E+01;
  COFD[5617] = 5.35817304E+00;
  COFD[5618] = -4.69455306E-01;
  COFD[5619] = 1.99063292E-02;
  COFD[5620] = -2.21158928E+01;
  COFD[5621] = 5.50583166E+00;
  COFD[5622] = -4.63753262E-01;
  COFD[5623] = 1.86693462E-02;
  COFD[5624] = -2.14475654E+01;
  COFD[5625] = 5.48617067E+00;
  COFD[5626] = -4.80816776E-01;
  COFD[5627] = 2.01887868E-02;
  COFD[5628] = -2.04649116E+01;
  COFD[5629] = 5.18856872E+00;
  COFD[5630] = -4.50001829E-01;
  COFD[5631] = 1.91636142E-02;
  COFD[5632] = -1.96915102E+01;
  COFD[5633] = 5.54637286E+00;
  COFD[5634] = -4.87070324E-01;
  COFD[5635] = 2.03983467E-02;
  COFD[5636] = -1.93925565E+01;
  COFD[5637] = 4.98286777E+00;
  COFD[5638] = -4.26970814E-01;
  COFD[5639] = 1.83122917E-02;
  COFD[5640] = -1.94151732E+01;
  COFD[5641] = 4.98286777E+00;
  COFD[5642] = -4.26970814E-01;
  COFD[5643] = 1.83122917E-02;
  COFD[5644] = -2.08554822E+01;
  COFD[5645] = 5.32244593E+00;
  COFD[5646] = -4.65829403E-01;
  COFD[5647] = 1.97895274E-02;
  COFD[5648] = -1.59632633E+01;
  COFD[5649] = 4.07051484E+00;
  COFD[5650] = -3.16303109E-01;
  COFD[5651] = 1.38259377E-02;
  COFD[5652] = -1.80862788E+01;
  COFD[5653] = 3.69199168E+00;
  COFD[5654] = -1.74005516E-01;
  COFD[5655] = 3.97694372E-03;
  COFD[5656] = -2.08642660E+01;
  COFD[5657] = 5.32244593E+00;
  COFD[5658] = -4.65829403E-01;
  COFD[5659] = 1.97895274E-02;
  COFD[5660] = -2.08463112E+01;
  COFD[5661] = 5.32244593E+00;
  COFD[5662] = -4.65829403E-01;
  COFD[5663] = 1.97895274E-02;
  COFD[5664] = -2.14314067E+01;
  COFD[5665] = 5.54007827E+00;
  COFD[5666] = -4.86434511E-01;
  COFD[5667] = 2.03779006E-02;
  COFD[5668] = -2.13881929E+01;
  COFD[5669] = 5.52422470E+00;
  COFD[5670] = -4.84872944E-01;
  COFD[5671] = 2.03298213E-02;
  COFD[5672] = -1.93946871E+01;
  COFD[5673] = 4.10954793E+00;
  COFD[5674] = -2.37523329E-01;
  COFD[5675] = 7.08858141E-03;
  COFD[5676] = -1.94051772E+01;
  COFD[5677] = 4.10954793E+00;
  COFD[5678] = -2.37523329E-01;
  COFD[5679] = 7.08858141E-03;
  COFD[5680] = -2.04451868E+01;
  COFD[5681] = 4.60682543E+00;
  COFD[5682] = -3.13971634E-01;
  COFD[5683] = 1.08661011E-02;
  COFD[5684] = -1.96653091E+01;
  COFD[5685] = 4.22062499E+00;
  COFD[5686] = -2.54326872E-01;
  COFD[5687] = 7.91017784E-03;
  COFD[5688] = -2.04949292E+01;
  COFD[5689] = 5.19614628E+00;
  COFD[5690] = -4.50889164E-01;
  COFD[5691] = 1.91983328E-02;
  COFD[5692] = -2.21082949E+01;
  COFD[5693] = 5.48540187E+00;
  COFD[5694] = -4.58962148E-01;
  COFD[5695] = 1.83770355E-02;
  COFD[5696] = -2.21259240E+01;
  COFD[5697] = 5.58129885E+00;
  COFD[5698] = -4.78532921E-01;
  COFD[5699] = 1.95095699E-02;
  COFD[5700] = -2.21380648E+01;
  COFD[5701] = 5.58129885E+00;
  COFD[5702] = -4.78532921E-01;
  COFD[5703] = 1.95095699E-02;
  COFD[5704] = -2.18224662E+01;
  COFD[5705] = 5.33732875E+00;
  COFD[5706] = -4.32453425E-01;
  COFD[5707] = 1.69373833E-02;
  COFD[5708] = -2.20850137E+01;
  COFD[5709] = 5.45178028E+00;
  COFD[5710] = -4.52847771E-01;
  COFD[5711] = 1.80418544E-02;
  COFD[5712] = -2.20954821E+01;
  COFD[5713] = 5.45178028E+00;
  COFD[5714] = -4.52847771E-01;
  COFD[5715] = 1.80418544E-02;
  COFD[5716] = -2.14782205E+01;
  COFD[5717] = 5.56978987E+00;
  COFD[5718] = -4.89141980E-01;
  COFD[5719] = 2.04499210E-02;
  COFD[5720] = -2.04033902E+01;
  COFD[5721] = 4.50250781E+00;
  COFD[5722] = -2.97622106E-01;
  COFD[5723] = 1.00481473E-02;
  COFD[5724] = -2.04096115E+01;
  COFD[5725] = 4.50250781E+00;
  COFD[5726] = -2.97622106E-01;
  COFD[5727] = 1.00481473E-02;
  COFD[5728] = -2.23170553E+01;
  COFD[5729] = 5.45297208E+00;
  COFD[5730] = -4.53064157E-01;
  COFD[5731] = 1.80537024E-02;
  COFD[5732] = -2.22919953E+01;
  COFD[5733] = 5.45297208E+00;
  COFD[5734] = -4.53064157E-01;
  COFD[5735] = 1.80537024E-02;
  COFD[5736] = -2.22779882E+01;
  COFD[5737] = 5.39861129E+00;
  COFD[5738] = -4.43119198E-01;
  COFD[5739] = 1.75075657E-02;
  COFD[5740] = -2.22844229E+01;
  COFD[5741] = 5.39861129E+00;
  COFD[5742] = -4.43119198E-01;
  COFD[5743] = 1.75075657E-02;
  COFD[5744] = -2.22906347E+01;
  COFD[5745] = 5.39861129E+00;
  COFD[5746] = -4.43119198E-01;
  COFD[5747] = 1.75075657E-02;
  COFD[5748] = -2.16250380E+01;
  COFD[5749] = 4.94878244E+00;
  COFD[5750] = -3.68158605E-01;
  COFD[5751] = 1.36008797E-02;
  COFD[5752] = -1.90728704E+01;
  COFD[5753] = 4.83076737E+00;
  COFD[5754] = -4.08802573E-01;
  COFD[5755] = 1.75875241E-02;
  COFD[5756] = -2.20972799E+01;
  COFD[5757] = 5.58514538E+00;
  COFD[5758] = -4.80745077E-01;
  COFD[5759] = 1.96733087E-02;
  COFD[5760] = -2.21221184E+01;
  COFD[5761] = 5.50583166E+00;
  COFD[5762] = -4.63753262E-01;
  COFD[5763] = 1.86693462E-02;
  COFD[5764] = -2.21221184E+01;
  COFD[5765] = 5.50583166E+00;
  COFD[5766] = -4.63753262E-01;
  COFD[5767] = 1.86693462E-02;
  COFD[5768] = -2.21158928E+01;
  COFD[5769] = 5.50583166E+00;
  COFD[5770] = -4.63753262E-01;
  COFD[5771] = 1.86693462E-02;
  COFD[5772] = -1.97704101E+01;
  COFD[5773] = 4.22062499E+00;
  COFD[5774] = -2.54326872E-01;
  COFD[5775] = 7.91017784E-03;
}

// List of specs with small weight, dim NLITE
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKTDIF(int* KTDIF)
{
  KTDIF[0] = 2;
  KTDIF[1] = 6;
}

// Poly fits for thermal diff ratios, dim NO*NLITE*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFTD(amrex::Real* COFTD)
{
  COFTD[0] = 1.22194046E-01;
  COFTD[1] = 6.90321836E-04;
  COFTD[2] = -3.64845249E-07;
  COFTD[3] = 6.03055495E-11;
  COFTD[4] = 2.01521521E-01;
  COFTD[5] = 5.62743751E-04;
  COFTD[6] = -3.08519054E-07;
  COFTD[7] = 5.22805672E-11;
  COFTD[8] = 0.00000000E+00;
  COFTD[9] = 0.00000000E+00;
  COFTD[10] = 0.00000000E+00;
  COFTD[11] = 0.00000000E+00;
  COFTD[12] = 2.35281489E-01;
  COFTD[13] = 4.65667373E-04;
  COFTD[14] = -2.60938016E-07;
  COFTD[15] = 4.49268709E-11;
  COFTD[16] = 2.37051899E-01;
  COFTD[17] = 4.69171356E-04;
  COFTD[18] = -2.62901483E-07;
  COFTD[19] = 4.52649298E-11;
  COFTD[20] = 1.80186380E-01;
  COFTD[21] = 6.02880848E-04;
  COFTD[22] = -3.27062078E-07;
  COFTD[23] = 5.50169005E-11;
  COFTD[24] = 1.44152190E-01;
  COFTD[25] = 7.99993584E-05;
  COFTD[26] = -4.89707442E-08;
  COFTD[27] = 9.14277269E-12;
  COFTD[28] = -1.74351746E-01;
  COFTD[29] = 8.62242165E-04;
  COFTD[30] = -3.79543417E-07;
  COFTD[31] = 5.60259034E-11;
  COFTD[32] = 1.80513126E-01;
  COFTD[33] = 6.03974096E-04;
  COFTD[34] = -3.27655164E-07;
  COFTD[35] = 5.51166667E-11;
  COFTD[36] = 1.79839678E-01;
  COFTD[37] = 6.01720824E-04;
  COFTD[38] = -3.26432767E-07;
  COFTD[39] = 5.49110406E-11;
  COFTD[40] = 1.00038655E-01;
  COFTD[41] = 6.50465703E-04;
  COFTD[42] = -3.41777446E-07;
  COFTD[43] = 5.62776574E-11;
  COFTD[44] = 1.05123703E-01;
  COFTD[45] = 6.50663360E-04;
  COFTD[46] = -3.42563171E-07;
  COFTD[47] = 5.64801866E-11;
  COFTD[48] = -1.60980730E-01;
  COFTD[49] = 9.03804574E-04;
  COFTD[50] = -4.06926592E-07;
  COFTD[51] = 6.09200234E-11;
  COFTD[52] = -1.61357064E-01;
  COFTD[53] = 9.05917454E-04;
  COFTD[54] = -4.07877889E-07;
  COFTD[55] = 6.10624399E-11;
  COFTD[56] = -1.31244138E-01;
  COFTD[57] = 9.03898764E-04;
  COFTD[58] = -4.17830295E-07;
  COFTD[59] = 6.35723824E-11;
  COFTD[60] = -1.56651155E-01;
  COFTD[61] = 9.09787277E-04;
  COFTD[62] = -4.11713122E-07;
  COFTD[63] = 6.18309211E-11;
  COFTD[64] = 2.00119185E-01;
  COFTD[65] = 5.64791694E-04;
  COFTD[66] = -3.09444383E-07;
  COFTD[67] = 5.24137469E-11;
  COFTD[68] = -2.00308977E-02;
  COFTD[69] = 8.50438113E-04;
  COFTD[70] = -4.21063477E-07;
  COFTD[71] = 6.67958138E-11;
  COFTD[72] = 1.63244604E-02;
  COFTD[73] = 7.90131000E-04;
  COFTD[74] = -3.98291254E-07;
  COFTD[75] = 6.38849501E-11;
  COFTD[76] = 1.63717030E-02;
  COFTD[77] = 7.92417622E-04;
  COFTD[78] = -3.99443901E-07;
  COFTD[79] = 6.40698319E-11;
  COFTD[80] = -5.08743421E-02;
  COFTD[81] = 8.54340362E-04;
  COFTD[82] = -4.15925370E-07;
  COFTD[83] = 6.53061561E-11;
  COFTD[84] = -2.71689899E-02;
  COFTD[85] = 8.37231102E-04;
  COFTD[86] = -4.12886635E-07;
  COFTD[87] = 6.53403612E-11;
  COFTD[88] = -2.72323151E-02;
  COFTD[89] = 8.39182512E-04;
  COFTD[90] = -4.13848987E-07;
  COFTD[91] = 6.54926559E-11;
  COFTD[92] = 9.86932164E-02;
  COFTD[93] = 7.20973229E-04;
  COFTD[94] = -3.77134366E-07;
  COFTD[95] = 6.19201176E-11;
  COFTD[96] = -1.41640200E-01;
  COFTD[97] = 9.21402335E-04;
  COFTD[98] = -4.23209196E-07;
  COFTD[99] = 6.41398937E-11;
  COFTD[100] = -1.41799447E-01;
  COFTD[101] = 9.22438273E-04;
  COFTD[102] = -4.23685013E-07;
  COFTD[103] = 6.42120066E-11;
  COFTD[104] = -2.75427946E-02;
  COFTD[105] = 8.57010907E-04;
  COFTD[106] = -4.22700941E-07;
  COFTD[107] = 6.68992754E-11;
  COFTD[108] = -2.74175456E-02;
  COFTD[109] = 8.53113705E-04;
  COFTD[110] = -4.20778735E-07;
  COFTD[111] = 6.65950553E-11;
  COFTD[112] = -4.05264355E-02;
  COFTD[113] = 8.65034494E-04;
  COFTD[114] = -4.23754623E-07;
  COFTD[115] = 6.67873033E-11;
  COFTD[116] = -4.05741399E-02;
  COFTD[117] = 8.66052741E-04;
  COFTD[118] = -4.24253431E-07;
  COFTD[119] = 6.68659197E-11;
  COFTD[120] = -4.06196633E-02;
  COFTD[121] = 8.67024435E-04;
  COFTD[122] = -4.24729436E-07;
  COFTD[123] = 6.69409420E-11;
  COFTD[124] = -1.04603590E-01;
  COFTD[125] = 9.18546258E-04;
  COFTD[126] = -4.33739512E-07;
  COFTD[127] = 6.68534077E-11;
  COFTD[128] = 2.55342069E-01;
  COFTD[129] = 4.18633590E-04;
  COFTD[130] = -2.37591519E-07;
  COFTD[131] = 4.13090729E-11;
  COFTD[132] = 2.76047505E-02;
  COFTD[133] = 8.06199937E-04;
  COFTD[134] = -4.08431546E-07;
  COFTD[135] = 6.57152296E-11;
  COFTD[136] = -8.56133817E-03;
  COFTD[137] = 8.39199736E-04;
  COFTD[138] = -4.17878599E-07;
  COFTD[139] = 6.65229395E-11;
  COFTD[140] = -8.56133817E-03;
  COFTD[141] = 8.39199736E-04;
  COFTD[142] = -4.17878599E-07;
  COFTD[143] = 6.65229395E-11;
  COFTD[144] = -8.55171436E-03;
  COFTD[145] = 8.38256391E-04;
  COFTD[146] = -4.17408861E-07;
  COFTD[147] = 6.64481610E-11;
  COFTD[148] = -1.59826602E-01;
  COFTD[149] = 9.28229412E-04;
  COFTD[150] = -4.20058885E-07;
  COFTD[151] = 6.30842846E-11;
  COFTD[152] = 4.01013632E-01;
  COFTD[153] = 1.97253232E-04;
  COFTD[154] = -1.21698396E-07;
  COFTD[155] = 2.29409318E-11;
  COFTD[156] = 4.31330748E-01;
  COFTD[157] = 9.20535689E-05;
  COFTD[158] = -5.94508898E-08;
  COFTD[159] = 1.21437846E-11;
  COFTD[160] = -1.44152190E-01;
  COFTD[161] = -7.99993584E-05;
  COFTD[162] = 4.89707442E-08;
  COFTD[163] = -9.14277269E-12;
  COFTD[164] = 4.06676789E-01;
  COFTD[165] = 3.84699853E-05;
  COFTD[166] = -2.54843294E-08;
  COFTD[167] = 5.86294132E-12;
  COFTD[168] = 4.12890501E-01;
  COFTD[169] = 3.90577773E-05;
  COFTD[170] = -2.58737105E-08;
  COFTD[171] = 5.95252260E-12;
  COFTD[172] = 4.28228101E-01;
  COFTD[173] = 1.20872486E-04;
  COFTD[174] = -7.70263335E-08;
  COFTD[175] = 1.52677960E-11;
  COFTD[176] = 0.00000000E+00;
  COFTD[177] = 0.00000000E+00;
  COFTD[178] = 0.00000000E+00;
  COFTD[179] = 0.00000000E+00;
  COFTD[180] = 2.27466103E-02;
  COFTD[181] = 6.73071543E-04;
  COFTD[182] = -3.40932103E-07;
  COFTD[183] = 5.48493184E-11;
  COFTD[184] = 4.29786829E-01;
  COFTD[185] = 1.21312456E-04;
  COFTD[186] = -7.73067054E-08;
  COFTD[187] = 1.53233700E-11;
  COFTD[188] = 4.26576987E-01;
  COFTD[189] = 1.20406440E-04;
  COFTD[190] = -7.67293441E-08;
  COFTD[191] = 1.52089282E-11;
  COFTD[192] = 3.31188133E-01;
  COFTD[193] = 1.81325042E-04;
  COFTD[194] = -1.11095367E-07;
  COFTD[195] = 2.07634046E-11;
  COFTD[196] = 3.39554500E-01;
  COFTD[197] = 1.79333587E-04;
  COFTD[198] = -1.10134815E-07;
  COFTD[199] = 2.06425572E-11;
  COFTD[200] = 1.22118967E-01;
  COFTD[201] = 6.18369499E-04;
  COFTD[202] = -3.28420406E-07;
  COFTD[203] = 5.44599896E-11;
  COFTD[204] = 1.22692619E-01;
  COFTD[205] = 6.21274281E-04;
  COFTD[206] = -3.29963157E-07;
  COFTD[207] = 5.47158146E-11;
  COFTD[208] = 1.40313353E-01;
  COFTD[209] = 6.01262661E-04;
  COFTD[210] = -3.21913277E-07;
  COFTD[211] = 5.36675963E-11;
  COFTD[212] = 1.31423336E-01;
  COFTD[213] = 6.16425772E-04;
  COFTD[214] = -3.28569556E-07;
  COFTD[215] = 5.46150455E-11;
  COFTD[216] = 4.30602469E-01;
  COFTD[217] = 9.35955212E-05;
  COFTD[218] = -6.03979306E-08;
  COFTD[219] = 1.23114290E-11;
  COFTD[220] = 2.93190141E-01;
  COFTD[221] = 4.01428114E-04;
  COFTD[222] = -2.30704675E-07;
  COFTD[223] = 4.05174676E-11;
  COFTD[224] = 3.05611370E-01;
  COFTD[225] = 3.24503916E-04;
  COFTD[226] = -1.89888419E-07;
  COFTD[227] = 3.38661408E-11;
  COFTD[228] = 3.07390533E-01;
  COFTD[229] = 3.26393065E-04;
  COFTD[230] = -1.90993884E-07;
  COFTD[231] = 3.40632978E-11;
  COFTD[232] = 2.49016176E-01;
  COFTD[233] = 4.29034331E-04;
  COFTD[234] = -2.42667349E-07;
  COFTD[235] = 4.20799172E-11;
  COFTD[236] = 2.72758271E-01;
  COFTD[237] = 3.94400799E-04;
  COFTD[238] = -2.25799420E-07;
  COFTD[239] = 3.95323710E-11;
  COFTD[240] = 2.74035711E-01;
  COFTD[241] = 3.96247941E-04;
  COFTD[242] = -2.26856932E-07;
  COFTD[243] = 3.97175174E-11;
  COFTD[244] = 3.86105710E-01;
  COFTD[245] = 2.28759408E-04;
  COFTD[246] = -1.39424407E-07;
  COFTD[247] = 2.58988578E-11;
  COFTD[248] = 1.59288295E-01;
  COFTD[249] = 6.02831194E-04;
  COFTD[250] = -3.24836171E-07;
  COFTD[251] = 5.43906658E-11;
  COFTD[252] = 1.59647280E-01;
  COFTD[253] = 6.04189783E-04;
  COFTD[254] = -3.25568248E-07;
  COFTD[255] = 5.45132450E-11;
  COFTD[256] = 2.86248296E-01;
  COFTD[257] = 4.13104248E-04;
  COFTD[258] = -2.36539521E-07;
  COFTD[259] = 4.14172737E-11;
  COFTD[260] = 2.83646335E-01;
  COFTD[261] = 4.09349182E-04;
  COFTD[262] = -2.34389406E-07;
  COFTD[263] = 4.10407959E-11;
  COFTD[264] = 2.71945062E-01;
  COFTD[265] = 4.30812732E-04;
  COFTD[266] = -2.45083425E-07;
  COFTD[267] = 4.26911430E-11;
  COFTD[268] = 2.72586795E-01;
  COFTD[269] = 4.31829359E-04;
  COFTD[270] = -2.45661770E-07;
  COFTD[271] = 4.27918850E-11;
  COFTD[272] = 2.73199845E-01;
  COFTD[273] = 4.32800547E-04;
  COFTD[274] = -2.46214265E-07;
  COFTD[275] = 4.28881244E-11;
  COFTD[276] = 2.11500700E-01;
  COFTD[277] = 5.48074004E-04;
  COFTD[278] = -3.01848819E-07;
  COFTD[279] = 5.13162676E-11;
  COFTD[280] = 4.01448263E-01;
  COFTD[281] = 1.54560270E-05;
  COFTD[282] = -1.02502613E-08;
  COFTD[283] = 2.97445074E-12;
  COFTD[284] = 3.35876848E-01;
  COFTD[285] = 3.31390958E-04;
  COFTD[286] = -1.94934498E-07;
  COFTD[287] = 3.49299774E-11;
  COFTD[288] = 3.02943823E-01;
  COFTD[289] = 3.83064991E-04;
  COFTD[290] = -2.21391159E-07;
  COFTD[291] = 3.90635860E-11;
  COFTD[292] = 3.02943823E-01;
  COFTD[293] = 3.83064991E-04;
  COFTD[294] = -2.21391159E-07;
  COFTD[295] = 3.90635860E-11;
  COFTD[296] = 3.02261978E-01;
  COFTD[297] = 3.82202815E-04;
  COFTD[298] = -2.20892867E-07;
  COFTD[299] = 3.89756643E-11;
  COFTD[300] = 1.36817150E-01;
  COFTD[301] = 6.41724825E-04;
  COFTD[302] = -3.42054551E-07;
  COFTD[303] = 5.68565302E-11;
}

// compute the critical parameters for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS(
  amrex::Real* Tci, amrex::Real* ai, amrex::Real* bi, amrex::Real* acentric_i)
{

  amrex::Real EPS[38];
  amrex::Real SIG[38];
  amrex::Real wt[38];
  amrex::Real Rcst = 83.144598; // in bar [CGS] !
  amrex::Real avogadro = 6.02214199e23;
  amrex::Real boltzmann = 1.3806503e-16; // we work in CGS

  egtransetEPS(EPS);
  egtransetSIG(SIG);
  get_mw(wt);

  // species 0: AR
  // Imported from NIST
  Tci[0] = 150.860000;
  ai[0] = 1e6 * 0.42748 * Rcst * Rcst * Tci[0] * Tci[0] /
          (39.948000 * 39.948000 * 48.980000);
  bi[0] = 0.08664 * Rcst * Tci[0] / (39.948000 * 48.980000);
  acentric_i[0] = -0.002000;

  // species 1: N2
  // Imported from NIST
  Tci[1] = 126.192000;
  ai[1] = 1e6 * 0.42748 * Rcst * Rcst * Tci[1] * Tci[1] /
          (28.013400 * 28.013400 * 33.958000);
  bi[1] = 0.08664 * Rcst * Tci[1] / (28.013400 * 33.958000);
  acentric_i[1] = 0.037200;

  // species 2: H
  Tci[2] = 1.316 * EPS[2];
  ai[2] = (5.55 * avogadro * avogadro * EPS[2] * boltzmann * 1e-24 * SIG[2] *
           SIG[2] * SIG[2]) /
          (wt[2] * wt[2]);
  bi[2] = 0.855 * avogadro * 1e-24 * SIG[2] * SIG[2] * SIG[2] / (wt[2]);
  acentric_i[2] = 0.0;

  // species 3: O
  Tci[3] = 1.316 * EPS[3];
  ai[3] = (5.55 * avogadro * avogadro * EPS[3] * boltzmann * 1e-24 * SIG[3] *
           SIG[3] * SIG[3]) /
          (wt[3] * wt[3]);
  bi[3] = 0.855 * avogadro * 1e-24 * SIG[3] * SIG[3] * SIG[3] / (wt[3]);
  acentric_i[3] = 0.0;

  // species 4: OH
  Tci[4] = 1.316 * EPS[4];
  ai[4] = (5.55 * avogadro * avogadro * EPS[4] * boltzmann * 1e-24 * SIG[4] *
           SIG[4] * SIG[4]) /
          (wt[4] * wt[4]);
  bi[4] = 0.855 * avogadro * 1e-24 * SIG[4] * SIG[4] * SIG[4] / (wt[4]);
  acentric_i[4] = 0.0;

  // species 5: HO2
  Tci[5] = 1.316 * EPS[5];
  ai[5] = (5.55 * avogadro * avogadro * EPS[5] * boltzmann * 1e-24 * SIG[5] *
           SIG[5] * SIG[5]) /
          (wt[5] * wt[5]);
  bi[5] = 0.855 * avogadro * 1e-24 * SIG[5] * SIG[5] * SIG[5] / (wt[5]);
  acentric_i[5] = 0.0;

  // species 6: H2
  // Imported from NIST
  Tci[6] = 33.145000;
  ai[6] = 1e6 * 0.42748 * Rcst * Rcst * Tci[6] * Tci[6] /
          (2.015880 * 2.015880 * 12.964000);
  bi[6] = 0.08664 * Rcst * Tci[6] / (2.015880 * 12.964000);
  acentric_i[6] = -0.219000;

  // species 7: H2O
  // Imported from NIST
  Tci[7] = 647.096000;
  ai[7] = 1e6 * 0.42748 * Rcst * Rcst * Tci[7] * Tci[7] /
          (18.015340 * 18.015340 * 220.640000);
  bi[7] = 0.08664 * Rcst * Tci[7] / (18.015340 * 220.640000);
  acentric_i[7] = 0.344300;

  // species 8: H2O2
  Tci[8] = 1.316 * EPS[8];
  ai[8] = (5.55 * avogadro * avogadro * EPS[8] * boltzmann * 1e-24 * SIG[8] *
           SIG[8] * SIG[8]) /
          (wt[8] * wt[8]);
  bi[8] = 0.855 * avogadro * 1e-24 * SIG[8] * SIG[8] * SIG[8] / (wt[8]);
  acentric_i[8] = 0.0;

  // species 9: O2
  // Imported from NIST
  Tci[9] = 154.581000;
  ai[9] = 1e6 * 0.42748 * Rcst * Rcst * Tci[9] * Tci[9] /
          (31.998800 * 31.998800 * 50.430466);
  bi[9] = 0.08664 * Rcst * Tci[9] / (31.998800 * 50.430466);
  acentric_i[9] = 0.022200;

  // species 10: CH3
  Tci[10] = 1.316 * EPS[10];
  ai[10] = (5.55 * avogadro * avogadro * EPS[10] * boltzmann * 1e-24 * SIG[10] *
            SIG[10] * SIG[10]) /
           (wt[10] * wt[10]);
  bi[10] = 0.855 * avogadro * 1e-24 * SIG[10] * SIG[10] * SIG[10] / (wt[10]);
  acentric_i[10] = 0.0;

  // species 11: CH4
  // Imported from NIST
  Tci[11] = 190.560000;
  ai[11] = 1e6 * 0.42748 * Rcst * Rcst * Tci[11] * Tci[11] /
           (16.043030 * 16.043030 * 45.990000);
  bi[11] = 0.08664 * Rcst * Tci[11] / (16.043030 * 45.990000);
  acentric_i[11] = 0.011000;

  // species 12: HCO
  Tci[12] = 1.316 * EPS[12];
  ai[12] = (5.55 * avogadro * avogadro * EPS[12] * boltzmann * 1e-24 * SIG[12] *
            SIG[12] * SIG[12]) /
           (wt[12] * wt[12]);
  bi[12] = 0.855 * avogadro * 1e-24 * SIG[12] * SIG[12] * SIG[12] / (wt[12]);
  acentric_i[12] = 0.0;

  // species 13: CH2O
  Tci[13] = 1.316 * EPS[13];
  ai[13] = (5.55 * avogadro * avogadro * EPS[13] * boltzmann * 1e-24 * SIG[13] *
            SIG[13] * SIG[13]) /
           (wt[13] * wt[13]);
  bi[13] = 0.855 * avogadro * 1e-24 * SIG[13] * SIG[13] * SIG[13] / (wt[13]);
  acentric_i[13] = 0.0;

  // species 14: CH3O
  Tci[14] = 1.316 * EPS[14];
  ai[14] = (5.55 * avogadro * avogadro * EPS[14] * boltzmann * 1e-24 * SIG[14] *
            SIG[14] * SIG[14]) /
           (wt[14] * wt[14]);
  bi[14] = 0.855 * avogadro * 1e-24 * SIG[14] * SIG[14] * SIG[14] / (wt[14]);
  acentric_i[14] = 0.0;

  // species 15: CH3OH
  // Imported from NIST
  Tci[15] = 512.640000;
  ai[15] = 1e6 * 0.42748 * Rcst * Rcst * Tci[15] * Tci[15] /
           (32.042000 * 32.042000 * 80.970000);
  bi[15] = 0.08664 * Rcst * Tci[15] / (32.042000 * 80.970000);
  acentric_i[15] = 0.565000;

  // species 16: CO
  // Imported from NIST
  Tci[16] = 132.850000;
  ai[16] = 1e6 * 0.42748 * Rcst * Rcst * Tci[16] * Tci[16] /
           (28.010000 * 28.010000 * 34.940000);
  bi[16] = 0.08664 * Rcst * Tci[16] / (28.010000 * 34.940000);
  acentric_i[16] = 0.045000;

  // species 17: CO2
  // Imported from NIST
  Tci[17] = 304.120000;
  ai[17] = 1e6 * 0.42748 * Rcst * Rcst * Tci[17] * Tci[17] /
           (44.009950 * 44.009950 * 73.740000);
  bi[17] = 0.08664 * Rcst * Tci[17] / (44.009950 * 73.740000);
  acentric_i[17] = 0.225000;

  // species 18: C2H2
  // Imported from NIST
  Tci[18] = 308.300000;
  ai[18] = 1e6 * 0.42748 * Rcst * Rcst * Tci[18] * Tci[18] /
           (26.038000 * 26.038000 * 61.140000);
  bi[18] = 0.08664 * Rcst * Tci[18] / (26.038000 * 61.140000);
  acentric_i[18] = 0.189000;

  // species 19: C2H3
  Tci[19] = 1.316 * EPS[19];
  ai[19] = (5.55 * avogadro * avogadro * EPS[19] * boltzmann * 1e-24 * SIG[19] *
            SIG[19] * SIG[19]) /
           (wt[19] * wt[19]);
  bi[19] = 0.855 * avogadro * 1e-24 * SIG[19] * SIG[19] * SIG[19] / (wt[19]);
  acentric_i[19] = 0.0;

  // species 20: C2H4
  // Imported from NIST
  Tci[20] = 282.340000;
  ai[20] = 1e6 * 0.42748 * Rcst * Rcst * Tci[20] * Tci[20] /
           (28.054000 * 28.054000 * 50.410000);
  bi[20] = 0.08664 * Rcst * Tci[20] / (28.054000 * 50.410000);
  acentric_i[20] = 0.087000;

  // species 21: C2H5
  Tci[21] = 1.316 * EPS[21];
  ai[21] = (5.55 * avogadro * avogadro * EPS[21] * boltzmann * 1e-24 * SIG[21] *
            SIG[21] * SIG[21]) /
           (wt[21] * wt[21]);
  bi[21] = 0.855 * avogadro * 1e-24 * SIG[21] * SIG[21] * SIG[21] / (wt[21]);
  acentric_i[21] = 0.0;

  // species 22: C2H6
  // Imported from NIST
  Tci[22] = 305.320000;
  ai[22] = 1e6 * 0.42748 * Rcst * Rcst * Tci[22] * Tci[22] /
           (30.070120 * 30.070120 * 48.720000);
  bi[22] = 0.08664 * Rcst * Tci[22] / (30.070120 * 48.720000);
  acentric_i[22] = 0.099000;

  // species 23: HCCO
  Tci[23] = 1.316 * EPS[23];
  ai[23] = (5.55 * avogadro * avogadro * EPS[23] * boltzmann * 1e-24 * SIG[23] *
            SIG[23] * SIG[23]) /
           (wt[23] * wt[23]);
  bi[23] = 0.855 * avogadro * 1e-24 * SIG[23] * SIG[23] * SIG[23] / (wt[23]);
  acentric_i[23] = 0.0;

  // species 24: CH2CO
  Tci[24] = 1.316 * EPS[24];
  ai[24] = (5.55 * avogadro * avogadro * EPS[24] * boltzmann * 1e-24 * SIG[24] *
            SIG[24] * SIG[24]) /
           (wt[24] * wt[24]);
  bi[24] = 0.855 * avogadro * 1e-24 * SIG[24] * SIG[24] * SIG[24] / (wt[24]);
  acentric_i[24] = 0.0;

  // species 25: CH2CHO
  Tci[25] = 1.316 * EPS[25];
  ai[25] = (5.55 * avogadro * avogadro * EPS[25] * boltzmann * 1e-24 * SIG[25] *
            SIG[25] * SIG[25]) /
           (wt[25] * wt[25]);
  bi[25] = 0.855 * avogadro * 1e-24 * SIG[25] * SIG[25] * SIG[25] / (wt[25]);
  acentric_i[25] = 0.0;

  // species 26: CH2OCH2
  Tci[26] = 1.316 * EPS[26];
  ai[26] = (5.55 * avogadro * avogadro * EPS[26] * boltzmann * 1e-24 * SIG[26] *
            SIG[26] * SIG[26]) /
           (wt[26] * wt[26]);
  bi[26] = 0.855 * avogadro * 1e-24 * SIG[26] * SIG[26] * SIG[26] / (wt[26]);
  acentric_i[26] = 0.0;

  // species 27: aC3H4
  Tci[27] = 1.316 * EPS[27];
  ai[27] = (5.55 * avogadro * avogadro * EPS[27] * boltzmann * 1e-24 * SIG[27] *
            SIG[27] * SIG[27]) /
           (wt[27] * wt[27]);
  bi[27] = 0.855 * avogadro * 1e-24 * SIG[27] * SIG[27] * SIG[27] / (wt[27]);
  acentric_i[27] = 0.0;

  // species 28: aC3H5
  Tci[28] = 1.316 * EPS[28];
  ai[28] = (5.55 * avogadro * avogadro * EPS[28] * boltzmann * 1e-24 * SIG[28] *
            SIG[28] * SIG[28]) /
           (wt[28] * wt[28]);
  bi[28] = 0.855 * avogadro * 1e-24 * SIG[28] * SIG[28] * SIG[28] / (wt[28]);
  acentric_i[28] = 0.0;

  // species 29: C3H6
  Tci[29] = 1.316 * EPS[29];
  ai[29] = (5.55 * avogadro * avogadro * EPS[29] * boltzmann * 1e-24 * SIG[29] *
            SIG[29] * SIG[29]) /
           (wt[29] * wt[29]);
  bi[29] = 0.855 * avogadro * 1e-24 * SIG[29] * SIG[29] * SIG[29] / (wt[29]);
  acentric_i[29] = 0.0;

  // species 30: nC3H7
  Tci[30] = 1.316 * EPS[30];
  ai[30] = (5.55 * avogadro * avogadro * EPS[30] * boltzmann * 1e-24 * SIG[30] *
            SIG[30] * SIG[30]) /
           (wt[30] * wt[30]);
  bi[30] = 0.855 * avogadro * 1e-24 * SIG[30] * SIG[30] * SIG[30] / (wt[30]);
  acentric_i[30] = 0.0;

  // species 31: C4H81
  Tci[31] = 1.316 * EPS[31];
  ai[31] = (5.55 * avogadro * avogadro * EPS[31] * boltzmann * 1e-24 * SIG[31] *
            SIG[31] * SIG[31]) /
           (wt[31] * wt[31]);
  bi[31] = 0.855 * avogadro * 1e-24 * SIG[31] * SIG[31] * SIG[31] / (wt[31]);
  acentric_i[31] = 0.0;

  // species 32: N
  Tci[32] = 1.316 * EPS[32];
  ai[32] = (5.55 * avogadro * avogadro * EPS[32] * boltzmann * 1e-24 * SIG[32] *
            SIG[32] * SIG[32]) /
           (wt[32] * wt[32]);
  bi[32] = 0.855 * avogadro * 1e-24 * SIG[32] * SIG[32] * SIG[32] / (wt[32]);
  acentric_i[32] = 0.0;

  // species 33: NO2
  Tci[33] = 1.316 * EPS[33];
  ai[33] = (5.55 * avogadro * avogadro * EPS[33] * boltzmann * 1e-24 * SIG[33] *
            SIG[33] * SIG[33]) /
           (wt[33] * wt[33]);
  bi[33] = 0.855 * avogadro * 1e-24 * SIG[33] * SIG[33] * SIG[33] / (wt[33]);
  acentric_i[33] = 0.0;

  // species 34: HCNO
  Tci[34] = 1.316 * EPS[34];
  ai[34] = (5.55 * avogadro * avogadro * EPS[34] * boltzmann * 1e-24 * SIG[34] *
            SIG[34] * SIG[34]) /
           (wt[34] * wt[34]);
  bi[34] = 0.855 * avogadro * 1e-24 * SIG[34] * SIG[34] * SIG[34] / (wt[34]);
  acentric_i[34] = 0.0;

  // species 35: HNCO
  Tci[35] = 1.316 * EPS[35];
  ai[35] = (5.55 * avogadro * avogadro * EPS[35] * boltzmann * 1e-24 * SIG[35] *
            SIG[35] * SIG[35]) /
           (wt[35] * wt[35]);
  bi[35] = 0.855 * avogadro * 1e-24 * SIG[35] * SIG[35] * SIG[35] / (wt[35]);
  acentric_i[35] = 0.0;

  // species 36: NCO
  Tci[36] = 1.316 * EPS[36];
  ai[36] = (5.55 * avogadro * avogadro * EPS[36] * boltzmann * 1e-24 * SIG[36] *
            SIG[36] * SIG[36]) /
           (wt[36] * wt[36]);
  bi[36] = 0.855 * avogadro * 1e-24 * SIG[36] * SIG[36] * SIG[36] / (wt[36]);
  acentric_i[36] = 0.0;

  // species 37: CH3O2
  Tci[37] = 1.316 * EPS[37];
  ai[37] = (5.55 * avogadro * avogadro * EPS[37] * boltzmann * 1e-24 * SIG[37] *
            SIG[37] * SIG[37]) /
           (wt[37] * wt[37]);
  bi[37] = 0.855 * avogadro * 1e-24 * SIG[37] * SIG[37] * SIG[37] / (wt[37]);
  acentric_i[37] = 0.0;
}

// gauss-jordan solver external routine
// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort("sgjsolve not implemented, choose a different solver ");
}

// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve_simplified(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort(
    "sgjsolve_simplified not implemented, choose a different solver ");
}

#endif
