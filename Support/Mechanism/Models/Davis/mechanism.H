#ifndef MECHANISM_H
#define MECHANISM_H

#include <AMReX_Gpu.H>
#include <AMReX_REAL.H>

/* Elements
0  O
1  H
2  C
3  N
4  Ar
5  He
*/

// Species
#define H2_ID 0
#define H_ID 1
#define AR_ID 2
#define N2_ID 3
#define HE_ID 4
#define O_ID 5
#define OH_ID 6
#define HCO_ID 7
#define HO2_ID 8
#define H2O_ID 9
#define CO_ID 10
#define O2_ID 11
#define H2O2_ID 12
#define CO2_ID 13

#define NUM_ELEMENTS 6
#define NUM_SPECIES 14
#define NUM_IONS 0
#define NUM_REACTIONS 38

#define NUM_FIT 4

//  ALWAYS on CPU stuff -- can have different def depending on if we are CPU or
//  GPU based. Defined in mechanism.cpp
void atomicWeight(amrex::Real* awt);
//  MISC
void CKAWT(amrex::Real* awt);
void CKNCF(int* ncf);
void CKSYME_STR(amrex::Vector<std::string>& ename);
void CKSYMS_STR(amrex::Vector<std::string>& kname);
void GET_RMAP(int* _rmap);
void CKINU(const int i, int& nspec, int* ki, int* nu);
void CKKFKR(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real* x,
  amrex::Real* q_f,
  amrex::Real* q_r);
void progressRateFR(
  amrex::Real* q_f, amrex::Real* q_r, amrex::Real* sc, amrex::Real T);
//  SPARSE INFORMATION
void SPARSITY_INFO(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST_SIMPLIFIED(int* nJdata, const int* consP);
void
SPARSITY_PREPROC_CSC(int* rowVals, int* colPtrs, const int* consP, int NCELLS);
void SPARSITY_PREPROC_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSC(
  int* rowVals, int* colPtrs, int* indx, const int* consP);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSR(
  int* colVals, int* rowPtr, const int* consP, int base);

// A few mechanism parameters
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKINDX(int& mm, int& kk, int& ii, int& nfit)
{
  mm = 6;
  kk = 14;
  ii = 38;
  nfit = -1; // Why do you need this anyway ?
}

//  inverse molecular weights
AMREX_GPU_CONSTANT const amrex::Real global_imw[14] = {
  0.4960317460317460, // H2
  0.9920634920634921, // H
  0.0250312891113892, // AR
  0.0356964374955379, // N2
  0.2498374807187924, // HE
  0.0625039064941559, // O
  0.0587993179279120, // OH
  0.0344613688055690, // HCO
  0.0302975216627280, // HO2
  0.0555092978073827, // H2O
  0.0357015351660121, // CO
  0.0312519532470779, // O2
  0.0293996589639560, // H2O2
  0.0227226249176305, // CO2
};
const amrex::Real h_global_imw[14] = {
  0.4960317460317460, // H2
  0.9920634920634921, // H
  0.0250312891113892, // AR
  0.0356964374955379, // N2
  0.2498374807187924, // HE
  0.0625039064941559, // O
  0.0587993179279120, // OH
  0.0344613688055690, // HCO
  0.0302975216627280, // HO2
  0.0555092978073827, // H2O
  0.0357015351660121, // CO
  0.0312519532470779, // O2
  0.0293996589639560, // H2O2
  0.0227226249176305, // CO2
};

//  molecular weights
AMREX_GPU_CONSTANT const amrex::Real global_mw[14] = {
  2.016000,  // H2
  1.008000,  // H
  39.950000, // AR
  28.014000, // N2
  4.002602,  // HE
  15.999000, // O
  17.007000, // OH
  29.018000, // HCO
  33.006000, // HO2
  18.015000, // H2O
  28.010000, // CO
  31.998000, // O2
  34.014000, // H2O2
  44.009000, // CO2
};
const amrex::Real h_global_mw[14] = {
  2.016000,  // H2
  1.008000,  // H
  39.950000, // AR
  28.014000, // N2
  4.002602,  // HE
  15.999000, // O
  17.007000, // OH
  29.018000, // HCO
  33.006000, // HO2
  18.015000, // H2O
  28.010000, // CO
  31.998000, // O2
  34.014000, // H2O2
  44.009000, // CO2
};

//  inverse molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_imw(amrex::Real* imw_new)
{
  imw_new[0] = 0.4960317460317460;  // H2
  imw_new[1] = 0.9920634920634921;  // H
  imw_new[2] = 0.0250312891113892;  // AR
  imw_new[3] = 0.0356964374955379;  // N2
  imw_new[4] = 0.2498374807187924;  // HE
  imw_new[5] = 0.0625039064941559;  // O
  imw_new[6] = 0.0587993179279120;  // OH
  imw_new[7] = 0.0344613688055690;  // HCO
  imw_new[8] = 0.0302975216627280;  // HO2
  imw_new[9] = 0.0555092978073827;  // H2O
  imw_new[10] = 0.0357015351660121; // CO
  imw_new[11] = 0.0312519532470779; // O2
  imw_new[12] = 0.0293996589639560; // H2O2
  imw_new[13] = 0.0227226249176305; // CO2
}

//  inverse molecular weight
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
imw(const int n)
{
#if AMREX_DEVICE_COMPILE
  return global_imw[n];
#else
  return h_global_imw[n];
#endif
}
//  molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_mw(amrex::Real* mw_new)
{
  mw_new[0] = 2.016000;   // H2
  mw_new[1] = 1.008000;   // H
  mw_new[2] = 39.950000;  // AR
  mw_new[3] = 28.014000;  // N2
  mw_new[4] = 4.002602;   // HE
  mw_new[5] = 15.999000;  // O
  mw_new[6] = 17.007000;  // OH
  mw_new[7] = 29.018000;  // HCO
  mw_new[8] = 33.006000;  // HO2
  mw_new[9] = 18.015000;  // H2O
  mw_new[10] = 28.010000; // CO
  mw_new[11] = 31.998000; // O2
  mw_new[12] = 34.014000; // H2O2
  mw_new[13] = 44.009000; // CO2
}

//  molecular weight
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
mw(const int n)
{
#if AMREX_DEVICE_COMPILE
  return global_mw[n];
#else
  return h_global_mw[n];
#endif
}

//  Returns R, Rc, Patm
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRP(amrex::Real& ru, amrex::Real& ruc, amrex::Real& pa)
{
  ru = 8.31446261815324e+07;
  ruc = 1.98721558317399615845;
  pa = 1.01325e+06;
}

// compute Cv/R at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cv_R(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +1.34433112e+00 + 7.98052075e-03 * tc[1] -
                 1.94781510e-05 * tc[2] + 2.01572094e-08 * tc[3] -
                 7.37611761e-12 * tc[4];
    // species 1: H
    species[1] = +1.50000000e+00 + 7.05332819e-13 * tc[1] -
                 1.99591964e-15 * tc[2] + 2.30081632e-18 * tc[3] -
                 9.27732332e-22 * tc[4];
    // species 3: N2
    species[3] = +2.29867700e+00 + 1.40824040e-03 * tc[1] -
                 3.96322200e-06 * tc[2] + 5.64151500e-09 * tc[3] -
                 2.44485400e-12 * tc[4];
    // species 5: O
    species[5] = +2.16826710e+00 - 3.27931884e-03 * tc[1] +
                 6.64306396e-06 * tc[2] - 6.12806624e-09 * tc[3] +
                 2.11265971e-12 * tc[4];
    // species 6: OH
    species[6] = +3.12530561e+00 - 3.22544939e-03 * tc[1] +
                 6.52764691e-06 * tc[2] - 5.79853643e-09 * tc[3] +
                 2.06237379e-12 * tc[4];
    // species 7: HCO
    species[7] = +3.22118584e+00 - 3.24392532e-03 * tc[1] +
                 1.37799446e-05 * tc[2] - 1.33144093e-08 * tc[3] +
                 4.33768865e-12 * tc[4];
    // species 8: HO2
    species[8] = +3.30179801e+00 - 4.74912051e-03 * tc[1] +
                 2.11582891e-05 * tc[2] - 2.42763894e-08 * tc[3] +
                 9.29225124e-12 * tc[4];
    // species 9: H2O
    species[9] = +3.19864056e+00 - 2.03643410e-03 * tc[1] +
                 6.52040211e-06 * tc[2] - 5.48797062e-09 * tc[3] +
                 1.77197817e-12 * tc[4];
    // species 10: CO
    species[10] = +2.57953347e+00 - 6.10353680e-04 * tc[1] +
                  1.01681433e-06 * tc[2] + 9.07005884e-10 * tc[3] -
                  9.04424499e-13 * tc[4];
    // species 11: O2
    species[11] = +2.78245636e+00 - 2.99673416e-03 * tc[1] +
                  9.84730201e-06 * tc[2] - 9.68129509e-09 * tc[3] +
                  3.24372837e-12 * tc[4];
    // species 12: H2O2
    species[12] = +3.27611269e+00 - 5.42822417e-04 * tc[1] +
                  1.67335701e-05 * tc[2] - 2.15770813e-08 * tc[3] +
                  8.62454363e-12 * tc[4];
    // species 13: CO2
    species[13] = +1.35677352e+00 + 8.98459677e-03 * tc[1] -
                  7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                  1.43699548e-13 * tc[4];
  } else {
    // species 0: H2
    species[0] = +2.33727920e+00 - 4.94024731e-05 * tc[1] +
                 4.99456778e-07 * tc[2] - 1.79566394e-10 * tc[3] +
                 2.00255376e-14 * tc[4];
    // species 1: H
    species[1] = +1.50000001e+00 - 2.30842973e-11 * tc[1] +
                 1.61561948e-14 * tc[2] - 4.73515235e-18 * tc[3] +
                 4.98197357e-22 * tc[4];
    // species 3: N2
    species[3] = +1.92664000e+00 + 1.48797680e-03 * tc[1] -
                 5.68476000e-07 * tc[2] + 1.00970380e-10 * tc[3] -
                 6.75335100e-15 * tc[4];
    // species 5: O
    species[5] = +1.56942078e+00 - 8.59741137e-05 * tc[1] +
                 4.19484589e-08 * tc[2] - 1.00177799e-11 * tc[3] +
                 1.22833691e-15 * tc[4];
    // species 6: OH
    species[6] = +1.86472886e+00 + 1.05650448e-03 * tc[1] -
                 2.59082758e-07 * tc[2] + 3.05218674e-11 * tc[3] -
                 1.33195876e-15 * tc[4];
    // species 7: HCO
    species[7] = +1.77217438e+00 + 4.95695526e-03 * tc[1] -
                 2.48445613e-06 * tc[2] + 5.89161778e-10 * tc[3] -
                 5.33508711e-14 * tc[4];
    // species 8: HO2
    species[8] = +3.01721090e+00 + 2.23982013e-03 * tc[1] -
                 6.33658150e-07 * tc[2] + 1.14246370e-10 * tc[3] -
                 1.07908535e-14 * tc[4];
    // species 9: H2O
    species[9] = +2.03399249e+00 + 2.17691804e-03 * tc[1] -
                 1.64072518e-07 * tc[2] - 9.70419870e-11 * tc[3] +
                 1.68200992e-14 * tc[4];
    // species 10: CO
    species[10] = +1.71518561e+00 + 2.06252743e-03 * tc[1] -
                  9.98825771e-07 * tc[2] + 2.30053008e-10 * tc[3] -
                  2.03647716e-14 * tc[4];
    // species 11: O2
    species[11] = +2.28253784e+00 + 1.48308754e-03 * tc[1] -
                  7.57966669e-07 * tc[2] + 2.09470555e-10 * tc[3] -
                  2.16717794e-14 * tc[4];
    // species 12: H2O2
    species[12] = +3.16500285e+00 + 4.90831694e-03 * tc[1] -
                  1.90139225e-06 * tc[2] + 3.71185986e-10 * tc[3] -
                  2.87908305e-14 * tc[4];
    // species 13: CO2
    species[13] = +2.85746029e+00 + 4.41437026e-03 * tc[1] -
                  2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                  4.72084164e-14 * tc[4];
  }

  // species with no change at a midpoint T
  // species 2: AR
  species[2] = +1.50000000e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4];

  // species with no change at a midpoint T
  // species 4: HE
  species[4] = +1.50000000e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4];
}

// compute Cp/R at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cp_R(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +2.34433112e+00 + 7.98052075e-03 * tc[1] -
                 1.94781510e-05 * tc[2] + 2.01572094e-08 * tc[3] -
                 7.37611761e-12 * tc[4];
    // species 1: H
    species[1] = +2.50000000e+00 + 7.05332819e-13 * tc[1] -
                 1.99591964e-15 * tc[2] + 2.30081632e-18 * tc[3] -
                 9.27732332e-22 * tc[4];
    // species 3: N2
    species[3] = +3.29867700e+00 + 1.40824040e-03 * tc[1] -
                 3.96322200e-06 * tc[2] + 5.64151500e-09 * tc[3] -
                 2.44485400e-12 * tc[4];
    // species 5: O
    species[5] = +3.16826710e+00 - 3.27931884e-03 * tc[1] +
                 6.64306396e-06 * tc[2] - 6.12806624e-09 * tc[3] +
                 2.11265971e-12 * tc[4];
    // species 6: OH
    species[6] = +4.12530561e+00 - 3.22544939e-03 * tc[1] +
                 6.52764691e-06 * tc[2] - 5.79853643e-09 * tc[3] +
                 2.06237379e-12 * tc[4];
    // species 7: HCO
    species[7] = +4.22118584e+00 - 3.24392532e-03 * tc[1] +
                 1.37799446e-05 * tc[2] - 1.33144093e-08 * tc[3] +
                 4.33768865e-12 * tc[4];
    // species 8: HO2
    species[8] = +4.30179801e+00 - 4.74912051e-03 * tc[1] +
                 2.11582891e-05 * tc[2] - 2.42763894e-08 * tc[3] +
                 9.29225124e-12 * tc[4];
    // species 9: H2O
    species[9] = +4.19864056e+00 - 2.03643410e-03 * tc[1] +
                 6.52040211e-06 * tc[2] - 5.48797062e-09 * tc[3] +
                 1.77197817e-12 * tc[4];
    // species 10: CO
    species[10] = +3.57953347e+00 - 6.10353680e-04 * tc[1] +
                  1.01681433e-06 * tc[2] + 9.07005884e-10 * tc[3] -
                  9.04424499e-13 * tc[4];
    // species 11: O2
    species[11] = +3.78245636e+00 - 2.99673416e-03 * tc[1] +
                  9.84730201e-06 * tc[2] - 9.68129509e-09 * tc[3] +
                  3.24372837e-12 * tc[4];
    // species 12: H2O2
    species[12] = +4.27611269e+00 - 5.42822417e-04 * tc[1] +
                  1.67335701e-05 * tc[2] - 2.15770813e-08 * tc[3] +
                  8.62454363e-12 * tc[4];
    // species 13: CO2
    species[13] = +2.35677352e+00 + 8.98459677e-03 * tc[1] -
                  7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                  1.43699548e-13 * tc[4];
  } else {
    // species 0: H2
    species[0] = +3.33727920e+00 - 4.94024731e-05 * tc[1] +
                 4.99456778e-07 * tc[2] - 1.79566394e-10 * tc[3] +
                 2.00255376e-14 * tc[4];
    // species 1: H
    species[1] = +2.50000001e+00 - 2.30842973e-11 * tc[1] +
                 1.61561948e-14 * tc[2] - 4.73515235e-18 * tc[3] +
                 4.98197357e-22 * tc[4];
    // species 3: N2
    species[3] = +2.92664000e+00 + 1.48797680e-03 * tc[1] -
                 5.68476000e-07 * tc[2] + 1.00970380e-10 * tc[3] -
                 6.75335100e-15 * tc[4];
    // species 5: O
    species[5] = +2.56942078e+00 - 8.59741137e-05 * tc[1] +
                 4.19484589e-08 * tc[2] - 1.00177799e-11 * tc[3] +
                 1.22833691e-15 * tc[4];
    // species 6: OH
    species[6] = +2.86472886e+00 + 1.05650448e-03 * tc[1] -
                 2.59082758e-07 * tc[2] + 3.05218674e-11 * tc[3] -
                 1.33195876e-15 * tc[4];
    // species 7: HCO
    species[7] = +2.77217438e+00 + 4.95695526e-03 * tc[1] -
                 2.48445613e-06 * tc[2] + 5.89161778e-10 * tc[3] -
                 5.33508711e-14 * tc[4];
    // species 8: HO2
    species[8] = +4.01721090e+00 + 2.23982013e-03 * tc[1] -
                 6.33658150e-07 * tc[2] + 1.14246370e-10 * tc[3] -
                 1.07908535e-14 * tc[4];
    // species 9: H2O
    species[9] = +3.03399249e+00 + 2.17691804e-03 * tc[1] -
                 1.64072518e-07 * tc[2] - 9.70419870e-11 * tc[3] +
                 1.68200992e-14 * tc[4];
    // species 10: CO
    species[10] = +2.71518561e+00 + 2.06252743e-03 * tc[1] -
                  9.98825771e-07 * tc[2] + 2.30053008e-10 * tc[3] -
                  2.03647716e-14 * tc[4];
    // species 11: O2
    species[11] = +3.28253784e+00 + 1.48308754e-03 * tc[1] -
                  7.57966669e-07 * tc[2] + 2.09470555e-10 * tc[3] -
                  2.16717794e-14 * tc[4];
    // species 12: H2O2
    species[12] = +4.16500285e+00 + 4.90831694e-03 * tc[1] -
                  1.90139225e-06 * tc[2] + 3.71185986e-10 * tc[3] -
                  2.87908305e-14 * tc[4];
    // species 13: CO2
    species[13] = +3.85746029e+00 + 4.41437026e-03 * tc[1] -
                  2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                  4.72084164e-14 * tc[4];
  }

  // species with no change at a midpoint T
  // species 2: AR
  species[2] = +2.50000000e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4];

  // species with no change at a midpoint T
  // species 4: HE
  species[4] = +2.50000000e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4];
}

// compute the g/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
gibbs(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = -9.179351730000000e+02 * invT + 1.661320882000000e+00 -
                 2.344331120000000e+00 * tc[0] - 3.990260375000000e-03 * tc[1] +
                 3.246358500000000e-06 * tc[2] - 1.679767450000000e-09 * tc[3] +
                 3.688058805000000e-13 * tc[4];
    // species 1: H
    species[1] = +2.547365990000000e+04 * invT + 2.946682853000000e+00 -
                 2.500000000000000e+00 * tc[0] - 3.526664095000000e-13 * tc[1] +
                 3.326532733333333e-16 * tc[2] - 1.917346933333333e-19 * tc[3] +
                 4.638661660000000e-23 * tc[4];
    // species 3: N2
    species[3] = -1.020899900000000e+03 * invT - 6.516950000000001e-01 -
                 3.298677000000000e+00 * tc[0] - 7.041202000000000e-04 * tc[1] +
                 6.605369999999999e-07 * tc[2] - 4.701262500000001e-10 * tc[3] +
                 1.222427000000000e-13 * tc[4];
    // species 5: O
    species[5] = +2.912225920000000e+04 * invT + 1.116333640000000e+00 -
                 3.168267100000000e+00 * tc[0] + 1.639659420000000e-03 * tc[1] -
                 1.107177326666667e-06 * tc[2] + 5.106721866666666e-10 * tc[3] -
                 1.056329855000000e-13 * tc[4];
    // species 6: OH
    species[6] = +3.381538120000000e+03 * invT + 4.815738570000000e+00 -
                 4.125305610000000e+00 * tc[0] + 1.612724695000000e-03 * tc[1] -
                 1.087941151666667e-06 * tc[2] + 4.832113691666666e-10 * tc[3] -
                 1.031186895000000e-13 * tc[4];
    // species 7: HCO
    species[7] = +3.839564960000000e+03 * invT + 8.268134100000002e-01 -
                 4.221185840000000e+00 * tc[0] + 1.621962660000000e-03 * tc[1] -
                 2.296657433333333e-06 * tc[2] + 1.109534108333333e-09 * tc[3] -
                 2.168844325000000e-13 * tc[4];
    // species 8: HO2
    species[8] = +2.948080400000000e+02 * invT + 5.851355599999999e-01 -
                 4.301798010000000e+00 * tc[0] + 2.374560255000000e-03 * tc[1] -
                 3.526381516666666e-06 * tc[2] + 2.023032450000000e-09 * tc[3] -
                 4.646125620000001e-13 * tc[4];
    // species 9: H2O
    species[9] = -3.029372670000000e+04 * invT + 5.047672768000000e+00 -
                 4.198640560000000e+00 * tc[0] + 1.018217050000000e-03 * tc[1] -
                 1.086733685000000e-06 * tc[2] + 4.573308850000000e-10 * tc[3] -
                 8.859890850000000e-14 * tc[4];
    // species 10: CO
    species[10] = -1.434408600000000e+04 * invT + 7.112418999999992e-02 -
                  3.579533470000000e+00 * tc[0] +
                  3.051768400000000e-04 * tc[1] -
                  1.694690550000000e-07 * tc[2] -
                  7.558382366666667e-11 * tc[3] + 4.522122495000000e-14 * tc[4];
    // species 11: O2
    species[11] = -1.063943560000000e+03 * invT + 1.247806300000001e-01 -
                  3.782456360000000e+00 * tc[0] +
                  1.498367080000000e-03 * tc[1] -
                  1.641217001666667e-06 * tc[2] +
                  8.067745908333334e-10 * tc[3] - 1.621864185000000e-13 * tc[4];
    // species 12: H2O2
    species[12] = -1.770258210000000e+04 * invT + 8.410619499999998e-01 -
                  4.276112690000000e+00 * tc[0] +
                  2.714112085000000e-04 * tc[1] -
                  2.788928350000000e-06 * tc[2] +
                  1.798090108333333e-09 * tc[3] - 4.312271815000000e-13 * tc[4];
    // species 13: CO2
    species[13] = -4.837196970000000e+04 * invT - 7.544278700000000e+00 -
                  2.356773520000000e+00 * tc[0] -
                  4.492298385000000e-03 * tc[1] +
                  1.187260448333333e-06 * tc[2] -
                  2.049325183333333e-10 * tc[3] + 7.184977399999999e-15 * tc[4];
  } else {
    // species 0: H2
    species[0] = -9.501589220000000e+02 * invT + 6.542302510000000e+00 -
                 3.337279200000000e+00 * tc[0] + 2.470123655000000e-05 * tc[1] -
                 8.324279633333333e-08 * tc[2] + 1.496386616666667e-11 * tc[3] -
                 1.001276880000000e-15 * tc[4];
    // species 1: H
    species[1] = +2.547365990000000e+04 * invT + 2.946682924000000e+00 -
                 2.500000010000000e+00 * tc[0] + 1.154214865000000e-11 * tc[1] -
                 2.692699133333334e-15 * tc[2] + 3.945960291666667e-19 * tc[3] -
                 2.490986785000000e-23 * tc[4];
    // species 3: N2
    species[3] = -9.227977000000000e+02 * invT - 3.053888000000000e+00 -
                 2.926640000000000e+00 * tc[0] - 7.439884000000000e-04 * tc[1] +
                 9.474600000000001e-08 * tc[2] - 8.414198333333333e-12 * tc[3] +
                 3.376675500000000e-16 * tc[4];
    // species 5: O
    species[5] = +2.921757910000000e+04 * invT - 2.214917859999999e+00 -
                 2.569420780000000e+00 * tc[0] + 4.298705685000000e-05 * tc[1] -
                 6.991409816666667e-09 * tc[2] + 8.348149916666666e-13 * tc[3] -
                 6.141684549999999e-17 * tc[4];
    // species 6: OH
    species[6] = +3.718857740000000e+03 * invT - 2.836911870000000e+00 -
                 2.864728860000000e+00 * tc[0] - 5.282522400000000e-04 * tc[1] +
                 4.318045966666667e-08 * tc[2] - 2.543488950000000e-12 * tc[3] +
                 6.659793800000000e-17 * tc[4];
    // species 7: HCO
    species[7] = +4.011918150000000e+03 * invT - 7.026170540000000e+00 -
                 2.772174380000000e+00 * tc[0] - 2.478477630000000e-03 * tc[1] +
                 4.140760216666667e-07 * tc[2] - 4.909681483333334e-11 * tc[3] +
                 2.667543555000000e-15 * tc[4];
    // species 8: HO2
    species[8] = +1.118567130000000e+02 * invT + 2.321087500000001e-01 -
                 4.017210900000000e+00 * tc[0] - 1.119910065000000e-03 * tc[1] +
                 1.056096916666667e-07 * tc[2] - 9.520530833333334e-12 * tc[3] +
                 5.395426750000000e-16 * tc[4];
    // species 9: H2O
    species[9] = -3.000429710000000e+04 * invT - 1.932777610000000e+00 -
                 3.033992490000000e+00 * tc[0] - 1.088459020000000e-03 * tc[1] +
                 2.734541966666666e-08 * tc[2] + 8.086832250000000e-12 * tc[3] -
                 8.410049600000000e-16 * tc[4];
    // species 10: CO
    species[10] = -1.415187240000000e+04 * invT - 5.103502110000000e+00 -
                  2.715185610000000e+00 * tc[0] -
                  1.031263715000000e-03 * tc[1] +
                  1.664709618333334e-07 * tc[2] -
                  1.917108400000000e-11 * tc[3] + 1.018238580000000e-15 * tc[4];
    // species 11: O2
    species[11] = -1.088457720000000e+03 * invT - 2.170693450000000e+00 -
                  3.282537840000000e+00 * tc[0] -
                  7.415437700000000e-04 * tc[1] +
                  1.263277781666667e-07 * tc[2] -
                  1.745587958333333e-11 * tc[3] + 1.083588970000000e-15 * tc[4];
    // species 12: H2O2
    species[12] = -1.786178770000000e+04 * invT + 1.248846229999999e+00 -
                  4.165002850000000e+00 * tc[0] -
                  2.454158470000000e-03 * tc[1] +
                  3.168987083333333e-07 * tc[2] -
                  3.093216550000000e-11 * tc[3] + 1.439541525000000e-15 * tc[4];
    // species 13: CO2
    species[13] = -4.875916600000000e+04 * invT + 1.585822230000000e+00 -
                  3.857460290000000e+00 * tc[0] -
                  2.207185130000000e-03 * tc[1] +
                  3.691356733333334e-07 * tc[2] -
                  4.362418233333334e-11 * tc[3] + 2.360420820000000e-15 * tc[4];
  }

  // species with no change at a midpoint T
  // species 2: AR
  species[2] = -7.453750000000000e+02 * invT - 1.866000000000000e+00 -
               2.500000000000000e+00 * tc[0] - 0.000000000000000e+00 * tc[1] -
               0.000000000000000e+00 * tc[2] - 0.000000000000000e+00 * tc[3] -
               0.000000000000000e+00 * tc[4];

  // species with no change at a midpoint T
  // species 4: HE
  species[4] = -7.453750000000000e+02 * invT + 1.571276026000000e+00 -
               2.500000000000000e+00 * tc[0] - 0.000000000000000e+00 * tc[1] -
               0.000000000000000e+00 * tc[2] - 0.000000000000000e+00 * tc[3] -
               0.000000000000000e+00 * tc[4];
}

// compute the a/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
helmholtz(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = -9.17935173e+02 * invT + 6.61320882e-01 -
                 2.34433112e+00 * tc[0] - 3.99026037e-03 * tc[1] +
                 3.24635850e-06 * tc[2] - 1.67976745e-09 * tc[3] +
                 3.68805881e-13 * tc[4];
    // species 1: H
    species[1] = +2.54736599e+04 * invT + 1.94668285e+00 -
                 2.50000000e+00 * tc[0] - 3.52666409e-13 * tc[1] +
                 3.32653273e-16 * tc[2] - 1.91734693e-19 * tc[3] +
                 4.63866166e-23 * tc[4];
    // species 3: N2
    species[3] = -1.02089990e+03 * invT - 1.65169500e+00 -
                 3.29867700e+00 * tc[0] - 7.04120200e-04 * tc[1] +
                 6.60537000e-07 * tc[2] - 4.70126250e-10 * tc[3] +
                 1.22242700e-13 * tc[4];
    // species 5: O
    species[5] = +2.91222592e+04 * invT + 1.16333640e-01 -
                 3.16826710e+00 * tc[0] + 1.63965942e-03 * tc[1] -
                 1.10717733e-06 * tc[2] + 5.10672187e-10 * tc[3] -
                 1.05632985e-13 * tc[4];
    // species 6: OH
    species[6] = +3.38153812e+03 * invT + 3.81573857e+00 -
                 4.12530561e+00 * tc[0] + 1.61272470e-03 * tc[1] -
                 1.08794115e-06 * tc[2] + 4.83211369e-10 * tc[3] -
                 1.03118689e-13 * tc[4];
    // species 7: HCO
    species[7] = +3.83956496e+03 * invT - 1.73186590e-01 -
                 4.22118584e+00 * tc[0] + 1.62196266e-03 * tc[1] -
                 2.29665743e-06 * tc[2] + 1.10953411e-09 * tc[3] -
                 2.16884432e-13 * tc[4];
    // species 8: HO2
    species[8] = +2.94808040e+02 * invT - 4.14864440e-01 -
                 4.30179801e+00 * tc[0] + 2.37456025e-03 * tc[1] -
                 3.52638152e-06 * tc[2] + 2.02303245e-09 * tc[3] -
                 4.64612562e-13 * tc[4];
    // species 9: H2O
    species[9] = -3.02937267e+04 * invT + 4.04767277e+00 -
                 4.19864056e+00 * tc[0] + 1.01821705e-03 * tc[1] -
                 1.08673369e-06 * tc[2] + 4.57330885e-10 * tc[3] -
                 8.85989085e-14 * tc[4];
    // species 10: CO
    species[10] = -1.43440860e+04 * invT - 9.28875810e-01 -
                  3.57953347e+00 * tc[0] + 3.05176840e-04 * tc[1] -
                  1.69469055e-07 * tc[2] - 7.55838237e-11 * tc[3] +
                  4.52212249e-14 * tc[4];
    // species 11: O2
    species[11] = -1.06394356e+03 * invT - 8.75219370e-01 -
                  3.78245636e+00 * tc[0] + 1.49836708e-03 * tc[1] -
                  1.64121700e-06 * tc[2] + 8.06774591e-10 * tc[3] -
                  1.62186418e-13 * tc[4];
    // species 12: H2O2
    species[12] = -1.77025821e+04 * invT - 1.58938050e-01 -
                  4.27611269e+00 * tc[0] + 2.71411208e-04 * tc[1] -
                  2.78892835e-06 * tc[2] + 1.79809011e-09 * tc[3] -
                  4.31227182e-13 * tc[4];
    // species 13: CO2
    species[13] = -4.83719697e+04 * invT - 8.54427870e+00 -
                  2.35677352e+00 * tc[0] - 4.49229839e-03 * tc[1] +
                  1.18726045e-06 * tc[2] - 2.04932518e-10 * tc[3] +
                  7.18497740e-15 * tc[4];
  } else {
    // species 0: H2
    species[0] = -9.50158922e+02 * invT + 5.54230251e+00 -
                 3.33727920e+00 * tc[0] + 2.47012365e-05 * tc[1] -
                 8.32427963e-08 * tc[2] + 1.49638662e-11 * tc[3] -
                 1.00127688e-15 * tc[4];
    // species 1: H
    species[1] = +2.54736599e+04 * invT + 1.94668292e+00 -
                 2.50000001e+00 * tc[0] + 1.15421486e-11 * tc[1] -
                 2.69269913e-15 * tc[2] + 3.94596029e-19 * tc[3] -
                 2.49098679e-23 * tc[4];
    // species 3: N2
    species[3] = -9.22797700e+02 * invT - 4.05388800e+00 -
                 2.92664000e+00 * tc[0] - 7.43988400e-04 * tc[1] +
                 9.47460000e-08 * tc[2] - 8.41419833e-12 * tc[3] +
                 3.37667550e-16 * tc[4];
    // species 5: O
    species[5] = +2.92175791e+04 * invT - 3.21491786e+00 -
                 2.56942078e+00 * tc[0] + 4.29870569e-05 * tc[1] -
                 6.99140982e-09 * tc[2] + 8.34814992e-13 * tc[3] -
                 6.14168455e-17 * tc[4];
    // species 6: OH
    species[6] = +3.71885774e+03 * invT - 3.83691187e+00 -
                 2.86472886e+00 * tc[0] - 5.28252240e-04 * tc[1] +
                 4.31804597e-08 * tc[2] - 2.54348895e-12 * tc[3] +
                 6.65979380e-17 * tc[4];
    // species 7: HCO
    species[7] = +4.01191815e+03 * invT - 8.02617054e+00 -
                 2.77217438e+00 * tc[0] - 2.47847763e-03 * tc[1] +
                 4.14076022e-07 * tc[2] - 4.90968148e-11 * tc[3] +
                 2.66754356e-15 * tc[4];
    // species 8: HO2
    species[8] = +1.11856713e+02 * invT - 7.67891250e-01 -
                 4.01721090e+00 * tc[0] - 1.11991006e-03 * tc[1] +
                 1.05609692e-07 * tc[2] - 9.52053083e-12 * tc[3] +
                 5.39542675e-16 * tc[4];
    // species 9: H2O
    species[9] = -3.00042971e+04 * invT - 2.93277761e+00 -
                 3.03399249e+00 * tc[0] - 1.08845902e-03 * tc[1] +
                 2.73454197e-08 * tc[2] + 8.08683225e-12 * tc[3] -
                 8.41004960e-16 * tc[4];
    // species 10: CO
    species[10] = -1.41518724e+04 * invT - 6.10350211e+00 -
                  2.71518561e+00 * tc[0] - 1.03126372e-03 * tc[1] +
                  1.66470962e-07 * tc[2] - 1.91710840e-11 * tc[3] +
                  1.01823858e-15 * tc[4];
    // species 11: O2
    species[11] = -1.08845772e+03 * invT - 3.17069345e+00 -
                  3.28253784e+00 * tc[0] - 7.41543770e-04 * tc[1] +
                  1.26327778e-07 * tc[2] - 1.74558796e-11 * tc[3] +
                  1.08358897e-15 * tc[4];
    // species 12: H2O2
    species[12] = -1.78617877e+04 * invT + 2.48846230e-01 -
                  4.16500285e+00 * tc[0] - 2.45415847e-03 * tc[1] +
                  3.16898708e-07 * tc[2] - 3.09321655e-11 * tc[3] +
                  1.43954153e-15 * tc[4];
    // species 13: CO2
    species[13] = -4.87591660e+04 * invT + 5.85822230e-01 -
                  3.85746029e+00 * tc[0] - 2.20718513e-03 * tc[1] +
                  3.69135673e-07 * tc[2] - 4.36241823e-11 * tc[3] +
                  2.36042082e-15 * tc[4];
  }

  // species with no change at a midpoint T
  // species 2: AR
  species[2] = -7.45375000e+02 * invT - 2.86600000e+00 -
               2.50000000e+00 * tc[0] - 0.00000000e+00 * tc[1] -
               0.00000000e+00 * tc[2] - 0.00000000e+00 * tc[3] -
               0.00000000e+00 * tc[4];

  // species with no change at a midpoint T
  // species 4: HE
  species[4] = -7.45375000e+02 * invT + 5.71276026e-01 -
               2.50000000e+00 * tc[0] - 0.00000000e+00 * tc[1] -
               0.00000000e+00 * tc[2] - 0.00000000e+00 * tc[3] -
               0.00000000e+00 * tc[4];
}

// compute the e/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesInternalEnergy(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +1.34433112e+00 + 3.99026037e-03 * tc[1] -
                 6.49271700e-06 * tc[2] + 5.03930235e-09 * tc[3] -
                 1.47522352e-12 * tc[4] - 9.17935173e+02 * invT;
    // species 1: H
    species[1] = +1.50000000e+00 + 3.52666409e-13 * tc[1] -
                 6.65306547e-16 * tc[2] + 5.75204080e-19 * tc[3] -
                 1.85546466e-22 * tc[4] + 2.54736599e+04 * invT;
    // species 3: N2
    species[3] = +2.29867700e+00 + 7.04120200e-04 * tc[1] -
                 1.32107400e-06 * tc[2] + 1.41037875e-09 * tc[3] -
                 4.88970800e-13 * tc[4] - 1.02089990e+03 * invT;
    // species 5: O
    species[5] = +2.16826710e+00 - 1.63965942e-03 * tc[1] +
                 2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
                 4.22531942e-13 * tc[4] + 2.91222592e+04 * invT;
    // species 6: OH
    species[6] = +3.12530561e+00 - 1.61272470e-03 * tc[1] +
                 2.17588230e-06 * tc[2] - 1.44963411e-09 * tc[3] +
                 4.12474758e-13 * tc[4] + 3.38153812e+03 * invT;
    // species 7: HCO
    species[7] = +3.22118584e+00 - 1.62196266e-03 * tc[1] +
                 4.59331487e-06 * tc[2] - 3.32860233e-09 * tc[3] +
                 8.67537730e-13 * tc[4] + 3.83956496e+03 * invT;
    // species 8: HO2
    species[8] = +3.30179801e+00 - 2.37456025e-03 * tc[1] +
                 7.05276303e-06 * tc[2] - 6.06909735e-09 * tc[3] +
                 1.85845025e-12 * tc[4] + 2.94808040e+02 * invT;
    // species 9: H2O
    species[9] = +3.19864056e+00 - 1.01821705e-03 * tc[1] +
                 2.17346737e-06 * tc[2] - 1.37199266e-09 * tc[3] +
                 3.54395634e-13 * tc[4] - 3.02937267e+04 * invT;
    // species 10: CO
    species[10] = +2.57953347e+00 - 3.05176840e-04 * tc[1] +
                  3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
                  1.80884900e-13 * tc[4] - 1.43440860e+04 * invT;
    // species 11: O2
    species[11] = +2.78245636e+00 - 1.49836708e-03 * tc[1] +
                  3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
                  6.48745674e-13 * tc[4] - 1.06394356e+03 * invT;
    // species 12: H2O2
    species[12] = +3.27611269e+00 - 2.71411208e-04 * tc[1] +
                  5.57785670e-06 * tc[2] - 5.39427032e-09 * tc[3] +
                  1.72490873e-12 * tc[4] - 1.77025821e+04 * invT;
    // species 13: CO2
    species[13] = +1.35677352e+00 + 4.49229839e-03 * tc[1] -
                  2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                  2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
  } else {
    // species 0: H2
    species[0] = +2.33727920e+00 - 2.47012365e-05 * tc[1] +
                 1.66485593e-07 * tc[2] - 4.48915985e-11 * tc[3] +
                 4.00510752e-15 * tc[4] - 9.50158922e+02 * invT;
    // species 1: H
    species[1] = +1.50000001e+00 - 1.15421486e-11 * tc[1] +
                 5.38539827e-15 * tc[2] - 1.18378809e-18 * tc[3] +
                 9.96394714e-23 * tc[4] + 2.54736599e+04 * invT;
    // species 3: N2
    species[3] = +1.92664000e+00 + 7.43988400e-04 * tc[1] -
                 1.89492000e-07 * tc[2] + 2.52425950e-11 * tc[3] -
                 1.35067020e-15 * tc[4] - 9.22797700e+02 * invT;
    // species 5: O
    species[5] = +1.56942078e+00 - 4.29870569e-05 * tc[1] +
                 1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
                 2.45667382e-16 * tc[4] + 2.92175791e+04 * invT;
    // species 6: OH
    species[6] = +1.86472886e+00 + 5.28252240e-04 * tc[1] -
                 8.63609193e-08 * tc[2] + 7.63046685e-12 * tc[3] -
                 2.66391752e-16 * tc[4] + 3.71885774e+03 * invT;
    // species 7: HCO
    species[7] = +1.77217438e+00 + 2.47847763e-03 * tc[1] -
                 8.28152043e-07 * tc[2] + 1.47290445e-10 * tc[3] -
                 1.06701742e-14 * tc[4] + 4.01191815e+03 * invT;
    // species 8: HO2
    species[8] = +3.01721090e+00 + 1.11991006e-03 * tc[1] -
                 2.11219383e-07 * tc[2] + 2.85615925e-11 * tc[3] -
                 2.15817070e-15 * tc[4] + 1.11856713e+02 * invT;
    // species 9: H2O
    species[9] = +2.03399249e+00 + 1.08845902e-03 * tc[1] -
                 5.46908393e-08 * tc[2] - 2.42604967e-11 * tc[3] +
                 3.36401984e-15 * tc[4] - 3.00042971e+04 * invT;
    // species 10: CO
    species[10] = +1.71518561e+00 + 1.03126372e-03 * tc[1] -
                  3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
                  4.07295432e-15 * tc[4] - 1.41518724e+04 * invT;
    // species 11: O2
    species[11] = +2.28253784e+00 + 7.41543770e-04 * tc[1] -
                  2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
                  4.33435588e-15 * tc[4] - 1.08845772e+03 * invT;
    // species 12: H2O2
    species[12] = +3.16500285e+00 + 2.45415847e-03 * tc[1] -
                  6.33797417e-07 * tc[2] + 9.27964965e-11 * tc[3] -
                  5.75816610e-15 * tc[4] - 1.78617877e+04 * invT;
    // species 13: CO2
    species[13] = +2.85746029e+00 + 2.20718513e-03 * tc[1] -
                  7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                  9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
  }

  // species with no change at a midpoint T
  // species 2: AR
  species[2] = +1.50000000e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4] - 7.45375000e+02 * invT;

  // species with no change at a midpoint T
  // species 4: HE
  species[4] = +1.50000000e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4] - 7.45375000e+02 * invT;
}

// compute the h/(RT) at the given temperature (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEnthalpy(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +2.34433112e+00 + 3.99026037e-03 * tc[1] -
                 6.49271700e-06 * tc[2] + 5.03930235e-09 * tc[3] -
                 1.47522352e-12 * tc[4] - 9.17935173e+02 * invT;
    // species 1: H
    species[1] = +2.50000000e+00 + 3.52666409e-13 * tc[1] -
                 6.65306547e-16 * tc[2] + 5.75204080e-19 * tc[3] -
                 1.85546466e-22 * tc[4] + 2.54736599e+04 * invT;
    // species 3: N2
    species[3] = +3.29867700e+00 + 7.04120200e-04 * tc[1] -
                 1.32107400e-06 * tc[2] + 1.41037875e-09 * tc[3] -
                 4.88970800e-13 * tc[4] - 1.02089990e+03 * invT;
    // species 5: O
    species[5] = +3.16826710e+00 - 1.63965942e-03 * tc[1] +
                 2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
                 4.22531942e-13 * tc[4] + 2.91222592e+04 * invT;
    // species 6: OH
    species[6] = +4.12530561e+00 - 1.61272470e-03 * tc[1] +
                 2.17588230e-06 * tc[2] - 1.44963411e-09 * tc[3] +
                 4.12474758e-13 * tc[4] + 3.38153812e+03 * invT;
    // species 7: HCO
    species[7] = +4.22118584e+00 - 1.62196266e-03 * tc[1] +
                 4.59331487e-06 * tc[2] - 3.32860233e-09 * tc[3] +
                 8.67537730e-13 * tc[4] + 3.83956496e+03 * invT;
    // species 8: HO2
    species[8] = +4.30179801e+00 - 2.37456025e-03 * tc[1] +
                 7.05276303e-06 * tc[2] - 6.06909735e-09 * tc[3] +
                 1.85845025e-12 * tc[4] + 2.94808040e+02 * invT;
    // species 9: H2O
    species[9] = +4.19864056e+00 - 1.01821705e-03 * tc[1] +
                 2.17346737e-06 * tc[2] - 1.37199266e-09 * tc[3] +
                 3.54395634e-13 * tc[4] - 3.02937267e+04 * invT;
    // species 10: CO
    species[10] = +3.57953347e+00 - 3.05176840e-04 * tc[1] +
                  3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
                  1.80884900e-13 * tc[4] - 1.43440860e+04 * invT;
    // species 11: O2
    species[11] = +3.78245636e+00 - 1.49836708e-03 * tc[1] +
                  3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
                  6.48745674e-13 * tc[4] - 1.06394356e+03 * invT;
    // species 12: H2O2
    species[12] = +4.27611269e+00 - 2.71411208e-04 * tc[1] +
                  5.57785670e-06 * tc[2] - 5.39427032e-09 * tc[3] +
                  1.72490873e-12 * tc[4] - 1.77025821e+04 * invT;
    // species 13: CO2
    species[13] = +2.35677352e+00 + 4.49229839e-03 * tc[1] -
                  2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                  2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
  } else {
    // species 0: H2
    species[0] = +3.33727920e+00 - 2.47012365e-05 * tc[1] +
                 1.66485593e-07 * tc[2] - 4.48915985e-11 * tc[3] +
                 4.00510752e-15 * tc[4] - 9.50158922e+02 * invT;
    // species 1: H
    species[1] = +2.50000001e+00 - 1.15421486e-11 * tc[1] +
                 5.38539827e-15 * tc[2] - 1.18378809e-18 * tc[3] +
                 9.96394714e-23 * tc[4] + 2.54736599e+04 * invT;
    // species 3: N2
    species[3] = +2.92664000e+00 + 7.43988400e-04 * tc[1] -
                 1.89492000e-07 * tc[2] + 2.52425950e-11 * tc[3] -
                 1.35067020e-15 * tc[4] - 9.22797700e+02 * invT;
    // species 5: O
    species[5] = +2.56942078e+00 - 4.29870569e-05 * tc[1] +
                 1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
                 2.45667382e-16 * tc[4] + 2.92175791e+04 * invT;
    // species 6: OH
    species[6] = +2.86472886e+00 + 5.28252240e-04 * tc[1] -
                 8.63609193e-08 * tc[2] + 7.63046685e-12 * tc[3] -
                 2.66391752e-16 * tc[4] + 3.71885774e+03 * invT;
    // species 7: HCO
    species[7] = +2.77217438e+00 + 2.47847763e-03 * tc[1] -
                 8.28152043e-07 * tc[2] + 1.47290445e-10 * tc[3] -
                 1.06701742e-14 * tc[4] + 4.01191815e+03 * invT;
    // species 8: HO2
    species[8] = +4.01721090e+00 + 1.11991006e-03 * tc[1] -
                 2.11219383e-07 * tc[2] + 2.85615925e-11 * tc[3] -
                 2.15817070e-15 * tc[4] + 1.11856713e+02 * invT;
    // species 9: H2O
    species[9] = +3.03399249e+00 + 1.08845902e-03 * tc[1] -
                 5.46908393e-08 * tc[2] - 2.42604967e-11 * tc[3] +
                 3.36401984e-15 * tc[4] - 3.00042971e+04 * invT;
    // species 10: CO
    species[10] = +2.71518561e+00 + 1.03126372e-03 * tc[1] -
                  3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
                  4.07295432e-15 * tc[4] - 1.41518724e+04 * invT;
    // species 11: O2
    species[11] = +3.28253784e+00 + 7.41543770e-04 * tc[1] -
                  2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
                  4.33435588e-15 * tc[4] - 1.08845772e+03 * invT;
    // species 12: H2O2
    species[12] = +4.16500285e+00 + 2.45415847e-03 * tc[1] -
                  6.33797417e-07 * tc[2] + 9.27964965e-11 * tc[3] -
                  5.75816610e-15 * tc[4] - 1.78617877e+04 * invT;
    // species 13: CO2
    species[13] = +3.85746029e+00 + 2.20718513e-03 * tc[1] -
                  7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                  9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
  }

  // species with no change at a midpoint T
  // species 2: AR
  species[2] = +2.50000000e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4] - 7.45375000e+02 * invT;

  // species with no change at a midpoint T
  // species 4: HE
  species[4] = +2.50000000e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4] - 7.45375000e+02 * invT;
}

// compute the S/R at the given temperature (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEntropy(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +2.34433112e+00 * tc[0] + 7.98052075e-03 * tc[1] -
                 9.73907550e-06 * tc[2] + 6.71906980e-09 * tc[3] -
                 1.84402940e-12 * tc[4] + 6.83010238e-01;
    // species 1: H
    species[1] = +2.50000000e+00 * tc[0] + 7.05332819e-13 * tc[1] -
                 9.97959820e-16 * tc[2] + 7.66938773e-19 * tc[3] -
                 2.31933083e-22 * tc[4] - 4.46682853e-01;
    // species 3: N2
    species[3] = +3.29867700e+00 * tc[0] + 1.40824040e-03 * tc[1] -
                 1.98161100e-06 * tc[2] + 1.88050500e-09 * tc[3] -
                 6.11213500e-13 * tc[4] + 3.95037200e+00;
    // species 5: O
    species[5] = +3.16826710e+00 * tc[0] - 3.27931884e-03 * tc[1] +
                 3.32153198e-06 * tc[2] - 2.04268875e-09 * tc[3] +
                 5.28164927e-13 * tc[4] + 2.05193346e+00;
    // species 6: OH
    species[6] = +4.12530561e+00 * tc[0] - 3.22544939e-03 * tc[1] +
                 3.26382346e-06 * tc[2] - 1.93284548e-09 * tc[3] +
                 5.15593447e-13 * tc[4] - 6.90432960e-01;
    // species 7: HCO
    species[7] = +4.22118584e+00 * tc[0] - 3.24392532e-03 * tc[1] +
                 6.88997230e-06 * tc[2] - 4.43813643e-09 * tc[3] +
                 1.08442216e-12 * tc[4] + 3.39437243e+00;
    // species 8: HO2
    species[8] = +4.30179801e+00 * tc[0] - 4.74912051e-03 * tc[1] +
                 1.05791445e-05 * tc[2] - 8.09212980e-09 * tc[3] +
                 2.32306281e-12 * tc[4] + 3.71666245e+00;
    // species 9: H2O
    species[9] = +4.19864056e+00 * tc[0] - 2.03643410e-03 * tc[1] +
                 3.26020105e-06 * tc[2] - 1.82932354e-09 * tc[3] +
                 4.42994543e-13 * tc[4] - 8.49032208e-01;
    // species 10: CO
    species[10] = +3.57953347e+00 * tc[0] - 6.10353680e-04 * tc[1] +
                  5.08407165e-07 * tc[2] + 3.02335295e-10 * tc[3] -
                  2.26106125e-13 * tc[4] + 3.50840928e+00;
    // species 11: O2
    species[11] = +3.78245636e+00 * tc[0] - 2.99673416e-03 * tc[1] +
                  4.92365101e-06 * tc[2] - 3.22709836e-09 * tc[3] +
                  8.10932092e-13 * tc[4] + 3.65767573e+00;
    // species 12: H2O2
    species[12] = +4.27611269e+00 * tc[0] - 5.42822417e-04 * tc[1] +
                  8.36678505e-06 * tc[2] - 7.19236043e-09 * tc[3] +
                  2.15613591e-12 * tc[4] + 3.43505074e+00;
    // species 13: CO2
    species[13] = +2.35677352e+00 * tc[0] + 8.98459677e-03 * tc[1] -
                  3.56178134e-06 * tc[2] + 8.19730073e-10 * tc[3] -
                  3.59248870e-14 * tc[4] + 9.90105222e+00;
  } else {
    // species 0: H2
    species[0] = +3.33727920e+00 * tc[0] - 4.94024731e-05 * tc[1] +
                 2.49728389e-07 * tc[2] - 5.98554647e-11 * tc[3] +
                 5.00638440e-15 * tc[4] - 3.20502331e+00;
    // species 1: H
    species[1] = +2.50000001e+00 * tc[0] - 2.30842973e-11 * tc[1] +
                 8.07809740e-15 * tc[2] - 1.57838412e-18 * tc[3] +
                 1.24549339e-22 * tc[4] - 4.46682914e-01;
    // species 3: N2
    species[3] = +2.92664000e+00 * tc[0] + 1.48797680e-03 * tc[1] -
                 2.84238000e-07 * tc[2] + 3.36567933e-11 * tc[3] -
                 1.68833775e-15 * tc[4] + 5.98052800e+00;
    // species 5: O
    species[5] = +2.56942078e+00 * tc[0] - 8.59741137e-05 * tc[1] +
                 2.09742295e-08 * tc[2] - 3.33925997e-12 * tc[3] +
                 3.07084227e-16 * tc[4] + 4.78433864e+00;
    // species 6: OH
    species[6] = +2.86472886e+00 * tc[0] + 1.05650448e-03 * tc[1] -
                 1.29541379e-07 * tc[2] + 1.01739558e-11 * tc[3] -
                 3.32989690e-16 * tc[4] + 5.70164073e+00;
    // species 7: HCO
    species[7] = +2.77217438e+00 * tc[0] + 4.95695526e-03 * tc[1] -
                 1.24222806e-06 * tc[2] + 1.96387259e-10 * tc[3] -
                 1.33377178e-14 * tc[4] + 9.79834492e+00;
    // species 8: HO2
    species[8] = +4.01721090e+00 * tc[0] + 2.23982013e-03 * tc[1] -
                 3.16829075e-07 * tc[2] + 3.80821233e-11 * tc[3] -
                 2.69771337e-15 * tc[4] + 3.78510215e+00;
    // species 9: H2O
    species[9] = +3.03399249e+00 * tc[0] + 2.17691804e-03 * tc[1] -
                 8.20362590e-08 * tc[2] - 3.23473290e-11 * tc[3] +
                 4.20502480e-15 * tc[4] + 4.96677010e+00;
    // species 10: CO
    species[10] = +2.71518561e+00 * tc[0] + 2.06252743e-03 * tc[1] -
                  4.99412886e-07 * tc[2] + 7.66843360e-11 * tc[3] -
                  5.09119290e-15 * tc[4] + 7.81868772e+00;
    // species 11: O2
    species[11] = +3.28253784e+00 * tc[0] + 1.48308754e-03 * tc[1] -
                  3.78983334e-07 * tc[2] + 6.98235183e-11 * tc[3] -
                  5.41794485e-15 * tc[4] + 5.45323129e+00;
    // species 12: H2O2
    species[12] = +4.16500285e+00 * tc[0] + 4.90831694e-03 * tc[1] -
                  9.50696125e-07 * tc[2] + 1.23728662e-10 * tc[3] -
                  7.19770763e-15 * tc[4] + 2.91615662e+00;
    // species 13: CO2
    species[13] = +3.85746029e+00 * tc[0] + 4.41437026e-03 * tc[1] -
                  1.10740702e-06 * tc[2] + 1.74496729e-10 * tc[3] -
                  1.18021041e-14 * tc[4] + 2.27163806e+00;
  }

  // species with no change at a midpoint T
  // species 2: AR
  species[2] = +2.50000000e+00 * tc[0] + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4] + 4.36600000e+00;

  // species with no change at a midpoint T
  // species 4: HE
  species[4] = +2.50000000e+00 * tc[0] + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
               0.00000000e+00 * tc[4] + 9.28723974e-01;
}

// Returns the mean specific heat at CP (Eq. 33)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cpbl)
{
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real cpor[14];                               //  temporary storage
  cp_R(cpor, tc);

  // perform dot product
  for (int id = 0; id < 14; ++id) {
    result += x[id] * cpor[id];
  }

  cpbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CP (Eq. 34)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cpbs)
{
  amrex::Real result = 0.0;
  const amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache

  // compute Cp/R at the given temperature

  // species with midpoint at T=1000 kelvin
  if (tT < 1000) {
    // species 0: H2
    result +=
      y[0] *
      (+2.34433112e+00 + 7.98052075e-03 * tc[1] - 1.94781510e-05 * tc[2] +
       2.01572094e-08 * tc[3] - 7.37611761e-12 * tc[4]) *
      0.4960317460317460;
    // species 1: H
    result +=
      y[1] *
      (+2.50000000e+00 + 7.05332819e-13 * tc[1] - 1.99591964e-15 * tc[2] +
       2.30081632e-18 * tc[3] - 9.27732332e-22 * tc[4]) *
      0.9920634920634921;
    // species 3: N2
    result +=
      y[3] *
      (+3.29867700e+00 + 1.40824040e-03 * tc[1] - 3.96322200e-06 * tc[2] +
       5.64151500e-09 * tc[3] - 2.44485400e-12 * tc[4]) *
      0.0356964374955379;
    // species 5: O
    result +=
      y[5] *
      (+3.16826710e+00 - 3.27931884e-03 * tc[1] + 6.64306396e-06 * tc[2] -
       6.12806624e-09 * tc[3] + 2.11265971e-12 * tc[4]) *
      0.0625039064941559;
    // species 6: OH
    result +=
      y[6] *
      (+4.12530561e+00 - 3.22544939e-03 * tc[1] + 6.52764691e-06 * tc[2] -
       5.79853643e-09 * tc[3] + 2.06237379e-12 * tc[4]) *
      0.0587993179279120;
    // species 7: HCO
    result +=
      y[7] *
      (+4.22118584e+00 - 3.24392532e-03 * tc[1] + 1.37799446e-05 * tc[2] -
       1.33144093e-08 * tc[3] + 4.33768865e-12 * tc[4]) *
      0.0344613688055690;
    // species 8: HO2
    result +=
      y[8] *
      (+4.30179801e+00 - 4.74912051e-03 * tc[1] + 2.11582891e-05 * tc[2] -
       2.42763894e-08 * tc[3] + 9.29225124e-12 * tc[4]) *
      0.0302975216627280;
    // species 9: H2O
    result +=
      y[9] *
      (+4.19864056e+00 - 2.03643410e-03 * tc[1] + 6.52040211e-06 * tc[2] -
       5.48797062e-09 * tc[3] + 1.77197817e-12 * tc[4]) *
      0.0555092978073827;
    // species 10: CO
    result +=
      y[10] *
      (+3.57953347e+00 - 6.10353680e-04 * tc[1] + 1.01681433e-06 * tc[2] +
       9.07005884e-10 * tc[3] - 9.04424499e-13 * tc[4]) *
      0.0357015351660121;
    // species 11: O2
    result +=
      y[11] *
      (+3.78245636e+00 - 2.99673416e-03 * tc[1] + 9.84730201e-06 * tc[2] -
       9.68129509e-09 * tc[3] + 3.24372837e-12 * tc[4]) *
      0.0312519532470779;
    // species 12: H2O2
    result +=
      y[12] *
      (+4.27611269e+00 - 5.42822417e-04 * tc[1] + 1.67335701e-05 * tc[2] -
       2.15770813e-08 * tc[3] + 8.62454363e-12 * tc[4]) *
      0.0293996589639560;
    // species 13: CO2
    result +=
      y[13] *
      (+2.35677352e+00 + 8.98459677e-03 * tc[1] - 7.12356269e-06 * tc[2] +
       2.45919022e-09 * tc[3] - 1.43699548e-13 * tc[4]) *
      0.0227226249176305;
  } else {
    // species 0: H2
    result +=
      y[0] *
      (+3.33727920e+00 - 4.94024731e-05 * tc[1] + 4.99456778e-07 * tc[2] -
       1.79566394e-10 * tc[3] + 2.00255376e-14 * tc[4]) *
      0.4960317460317460;
    // species 1: H
    result +=
      y[1] *
      (+2.50000001e+00 - 2.30842973e-11 * tc[1] + 1.61561948e-14 * tc[2] -
       4.73515235e-18 * tc[3] + 4.98197357e-22 * tc[4]) *
      0.9920634920634921;
    // species 3: N2
    result +=
      y[3] *
      (+2.92664000e+00 + 1.48797680e-03 * tc[1] - 5.68476000e-07 * tc[2] +
       1.00970380e-10 * tc[3] - 6.75335100e-15 * tc[4]) *
      0.0356964374955379;
    // species 5: O
    result +=
      y[5] *
      (+2.56942078e+00 - 8.59741137e-05 * tc[1] + 4.19484589e-08 * tc[2] -
       1.00177799e-11 * tc[3] + 1.22833691e-15 * tc[4]) *
      0.0625039064941559;
    // species 6: OH
    result +=
      y[6] *
      (+2.86472886e+00 + 1.05650448e-03 * tc[1] - 2.59082758e-07 * tc[2] +
       3.05218674e-11 * tc[3] - 1.33195876e-15 * tc[4]) *
      0.0587993179279120;
    // species 7: HCO
    result +=
      y[7] *
      (+2.77217438e+00 + 4.95695526e-03 * tc[1] - 2.48445613e-06 * tc[2] +
       5.89161778e-10 * tc[3] - 5.33508711e-14 * tc[4]) *
      0.0344613688055690;
    // species 8: HO2
    result +=
      y[8] *
      (+4.01721090e+00 + 2.23982013e-03 * tc[1] - 6.33658150e-07 * tc[2] +
       1.14246370e-10 * tc[3] - 1.07908535e-14 * tc[4]) *
      0.0302975216627280;
    // species 9: H2O
    result +=
      y[9] *
      (+3.03399249e+00 + 2.17691804e-03 * tc[1] - 1.64072518e-07 * tc[2] -
       9.70419870e-11 * tc[3] + 1.68200992e-14 * tc[4]) *
      0.0555092978073827;
    // species 10: CO
    result +=
      y[10] *
      (+2.71518561e+00 + 2.06252743e-03 * tc[1] - 9.98825771e-07 * tc[2] +
       2.30053008e-10 * tc[3] - 2.03647716e-14 * tc[4]) *
      0.0357015351660121;
    // species 11: O2
    result +=
      y[11] *
      (+3.28253784e+00 + 1.48308754e-03 * tc[1] - 7.57966669e-07 * tc[2] +
       2.09470555e-10 * tc[3] - 2.16717794e-14 * tc[4]) *
      0.0312519532470779;
    // species 12: H2O2
    result +=
      y[12] *
      (+4.16500285e+00 + 4.90831694e-03 * tc[1] - 1.90139225e-06 * tc[2] +
       3.71185986e-10 * tc[3] - 2.87908305e-14 * tc[4]) *
      0.0293996589639560;
    // species 13: CO2
    result +=
      y[13] *
      (+3.85746029e+00 + 4.41437026e-03 * tc[1] - 2.21481404e-06 * tc[2] +
       5.23490188e-10 * tc[3] - 4.72084164e-14 * tc[4]) *
      0.0227226249176305;
  }

  // species with no change at a midpoint T
  // species 2: AR
  result += y[2] *
            (+2.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
             0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4]) *
            0.0250312891113892;

  // species with no change at a midpoint T
  // species 4: HE
  result += y[4] *
            (+2.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
             0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4]) *
            0.2498374807187924;

  cpbs = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 35)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cvbl)
{
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real cvor[14];                               //  temporary storage
  cv_R(cvor, tc);

  // perform dot product
  for (int id = 0; id < 14; ++id) {
    result += x[id] * cvor[id];
  }

  cvbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 36)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cvbs)
{
  amrex::Real result = 0.0;
  const amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  // compute Cv/R at the given temperature

  // species with midpoint at T=1000 kelvin
  if (tT < 1000) {
    // species 0: H2
    result +=
      y[0] *
      (+1.34433112e+00 + 7.98052075e-03 * tc[1] - 1.94781510e-05 * tc[2] +
       2.01572094e-08 * tc[3] - 7.37611761e-12 * tc[4]) *
      0.4960317460317460;
    // species 1: H
    result +=
      y[1] *
      (+1.50000000e+00 + 7.05332819e-13 * tc[1] - 1.99591964e-15 * tc[2] +
       2.30081632e-18 * tc[3] - 9.27732332e-22 * tc[4]) *
      0.9920634920634921;
    // species 3: N2
    result +=
      y[3] *
      (+2.29867700e+00 + 1.40824040e-03 * tc[1] - 3.96322200e-06 * tc[2] +
       5.64151500e-09 * tc[3] - 2.44485400e-12 * tc[4]) *
      0.0356964374955379;
    // species 5: O
    result +=
      y[5] *
      (+2.16826710e+00 - 3.27931884e-03 * tc[1] + 6.64306396e-06 * tc[2] -
       6.12806624e-09 * tc[3] + 2.11265971e-12 * tc[4]) *
      0.0625039064941559;
    // species 6: OH
    result +=
      y[6] *
      (+3.12530561e+00 - 3.22544939e-03 * tc[1] + 6.52764691e-06 * tc[2] -
       5.79853643e-09 * tc[3] + 2.06237379e-12 * tc[4]) *
      0.0587993179279120;
    // species 7: HCO
    result +=
      y[7] *
      (+3.22118584e+00 - 3.24392532e-03 * tc[1] + 1.37799446e-05 * tc[2] -
       1.33144093e-08 * tc[3] + 4.33768865e-12 * tc[4]) *
      0.0344613688055690;
    // species 8: HO2
    result +=
      y[8] *
      (+3.30179801e+00 - 4.74912051e-03 * tc[1] + 2.11582891e-05 * tc[2] -
       2.42763894e-08 * tc[3] + 9.29225124e-12 * tc[4]) *
      0.0302975216627280;
    // species 9: H2O
    result +=
      y[9] *
      (+3.19864056e+00 - 2.03643410e-03 * tc[1] + 6.52040211e-06 * tc[2] -
       5.48797062e-09 * tc[3] + 1.77197817e-12 * tc[4]) *
      0.0555092978073827;
    // species 10: CO
    result +=
      y[10] *
      (+2.57953347e+00 - 6.10353680e-04 * tc[1] + 1.01681433e-06 * tc[2] +
       9.07005884e-10 * tc[3] - 9.04424499e-13 * tc[4]) *
      0.0357015351660121;
    // species 11: O2
    result +=
      y[11] *
      (+2.78245636e+00 - 2.99673416e-03 * tc[1] + 9.84730201e-06 * tc[2] -
       9.68129509e-09 * tc[3] + 3.24372837e-12 * tc[4]) *
      0.0312519532470779;
    // species 12: H2O2
    result +=
      y[12] *
      (+3.27611269e+00 - 5.42822417e-04 * tc[1] + 1.67335701e-05 * tc[2] -
       2.15770813e-08 * tc[3] + 8.62454363e-12 * tc[4]) *
      0.0293996589639560;
    // species 13: CO2
    result +=
      y[13] *
      (+1.35677352e+00 + 8.98459677e-03 * tc[1] - 7.12356269e-06 * tc[2] +
       2.45919022e-09 * tc[3] - 1.43699548e-13 * tc[4]) *
      0.0227226249176305;
  } else {
    // species 0: H2
    result +=
      y[0] *
      (+2.33727920e+00 - 4.94024731e-05 * tc[1] + 4.99456778e-07 * tc[2] -
       1.79566394e-10 * tc[3] + 2.00255376e-14 * tc[4]) *
      0.4960317460317460;
    // species 1: H
    result +=
      y[1] *
      (+1.50000001e+00 - 2.30842973e-11 * tc[1] + 1.61561948e-14 * tc[2] -
       4.73515235e-18 * tc[3] + 4.98197357e-22 * tc[4]) *
      0.9920634920634921;
    // species 3: N2
    result +=
      y[3] *
      (+1.92664000e+00 + 1.48797680e-03 * tc[1] - 5.68476000e-07 * tc[2] +
       1.00970380e-10 * tc[3] - 6.75335100e-15 * tc[4]) *
      0.0356964374955379;
    // species 5: O
    result +=
      y[5] *
      (+1.56942078e+00 - 8.59741137e-05 * tc[1] + 4.19484589e-08 * tc[2] -
       1.00177799e-11 * tc[3] + 1.22833691e-15 * tc[4]) *
      0.0625039064941559;
    // species 6: OH
    result +=
      y[6] *
      (+1.86472886e+00 + 1.05650448e-03 * tc[1] - 2.59082758e-07 * tc[2] +
       3.05218674e-11 * tc[3] - 1.33195876e-15 * tc[4]) *
      0.0587993179279120;
    // species 7: HCO
    result +=
      y[7] *
      (+1.77217438e+00 + 4.95695526e-03 * tc[1] - 2.48445613e-06 * tc[2] +
       5.89161778e-10 * tc[3] - 5.33508711e-14 * tc[4]) *
      0.0344613688055690;
    // species 8: HO2
    result +=
      y[8] *
      (+3.01721090e+00 + 2.23982013e-03 * tc[1] - 6.33658150e-07 * tc[2] +
       1.14246370e-10 * tc[3] - 1.07908535e-14 * tc[4]) *
      0.0302975216627280;
    // species 9: H2O
    result +=
      y[9] *
      (+2.03399249e+00 + 2.17691804e-03 * tc[1] - 1.64072518e-07 * tc[2] -
       9.70419870e-11 * tc[3] + 1.68200992e-14 * tc[4]) *
      0.0555092978073827;
    // species 10: CO
    result +=
      y[10] *
      (+1.71518561e+00 + 2.06252743e-03 * tc[1] - 9.98825771e-07 * tc[2] +
       2.30053008e-10 * tc[3] - 2.03647716e-14 * tc[4]) *
      0.0357015351660121;
    // species 11: O2
    result +=
      y[11] *
      (+2.28253784e+00 + 1.48308754e-03 * tc[1] - 7.57966669e-07 * tc[2] +
       2.09470555e-10 * tc[3] - 2.16717794e-14 * tc[4]) *
      0.0312519532470779;
    // species 12: H2O2
    result +=
      y[12] *
      (+3.16500285e+00 + 4.90831694e-03 * tc[1] - 1.90139225e-06 * tc[2] +
       3.71185986e-10 * tc[3] - 2.87908305e-14 * tc[4]) *
      0.0293996589639560;
    // species 13: CO2
    result +=
      y[13] *
      (+2.85746029e+00 + 4.41437026e-03 * tc[1] - 2.21481404e-06 * tc[2] +
       5.23490188e-10 * tc[3] - 4.72084164e-14 * tc[4]) *
      0.0227226249176305;
  }

  // species with no change at a midpoint T
  // species 2: AR
  result += y[2] *
            (+1.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
             0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4]) *
            0.0250312891113892;

  // species with no change at a midpoint T
  // species 4: HE
  result += y[4] *
            (+1.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
             0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4]) *
            0.2498374807187924;

  cvbs = result * 8.31446261815324e+07;
}

// Returns the mean enthalpy of the mixture in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBML(const amrex::Real T, const amrex::Real x[], amrex::Real& hbml)
{
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real hml[14];                                //  temporary storage
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesEnthalpy(hml, tc);

  // perform dot product
  for (int id = 0; id < 14; ++id) {
    result += x[id] * hml[id];
  }

  hbml = result * RT;
}

// Returns mean enthalpy of mixture in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& hbms)
{
  amrex::Real result = 0.0;
  const amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (tT < 1000) {
    // species 0: H2
    result += y[0] *
              (+2.34433112e+00 + 3.99026037e-03 * tc[1] -
               6.49271700e-06 * tc[2] + 5.03930235e-09 * tc[3] -
               1.47522352e-12 * tc[4] - 9.17935173e+02 * invT) *
              0.4960317460317460;
    // species 1: H
    result += y[1] *
              (+2.50000000e+00 + 3.52666409e-13 * tc[1] -
               6.65306547e-16 * tc[2] + 5.75204080e-19 * tc[3] -
               1.85546466e-22 * tc[4] + 2.54736599e+04 * invT) *
              0.9920634920634921;
    // species 3: N2
    result += y[3] *
              (+3.29867700e+00 + 7.04120200e-04 * tc[1] -
               1.32107400e-06 * tc[2] + 1.41037875e-09 * tc[3] -
               4.88970800e-13 * tc[4] - 1.02089990e+03 * invT) *
              0.0356964374955379;
    // species 5: O
    result += y[5] *
              (+3.16826710e+00 - 1.63965942e-03 * tc[1] +
               2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
               4.22531942e-13 * tc[4] + 2.91222592e+04 * invT) *
              0.0625039064941559;
    // species 6: OH
    result += y[6] *
              (+4.12530561e+00 - 1.61272470e-03 * tc[1] +
               2.17588230e-06 * tc[2] - 1.44963411e-09 * tc[3] +
               4.12474758e-13 * tc[4] + 3.38153812e+03 * invT) *
              0.0587993179279120;
    // species 7: HCO
    result += y[7] *
              (+4.22118584e+00 - 1.62196266e-03 * tc[1] +
               4.59331487e-06 * tc[2] - 3.32860233e-09 * tc[3] +
               8.67537730e-13 * tc[4] + 3.83956496e+03 * invT) *
              0.0344613688055690;
    // species 8: HO2
    result += y[8] *
              (+4.30179801e+00 - 2.37456025e-03 * tc[1] +
               7.05276303e-06 * tc[2] - 6.06909735e-09 * tc[3] +
               1.85845025e-12 * tc[4] + 2.94808040e+02 * invT) *
              0.0302975216627280;
    // species 9: H2O
    result += y[9] *
              (+4.19864056e+00 - 1.01821705e-03 * tc[1] +
               2.17346737e-06 * tc[2] - 1.37199266e-09 * tc[3] +
               3.54395634e-13 * tc[4] - 3.02937267e+04 * invT) *
              0.0555092978073827;
    // species 10: CO
    result += y[10] *
              (+3.57953347e+00 - 3.05176840e-04 * tc[1] +
               3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
               1.80884900e-13 * tc[4] - 1.43440860e+04 * invT) *
              0.0357015351660121;
    // species 11: O2
    result += y[11] *
              (+3.78245636e+00 - 1.49836708e-03 * tc[1] +
               3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
               6.48745674e-13 * tc[4] - 1.06394356e+03 * invT) *
              0.0312519532470779;
    // species 12: H2O2
    result += y[12] *
              (+4.27611269e+00 - 2.71411208e-04 * tc[1] +
               5.57785670e-06 * tc[2] - 5.39427032e-09 * tc[3] +
               1.72490873e-12 * tc[4] - 1.77025821e+04 * invT) *
              0.0293996589639560;
    // species 13: CO2
    result += y[13] *
              (+2.35677352e+00 + 4.49229839e-03 * tc[1] -
               2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
               2.87399096e-14 * tc[4] - 4.83719697e+04 * invT) *
              0.0227226249176305;
  } else {
    // species 0: H2
    result += y[0] *
              (+3.33727920e+00 - 2.47012365e-05 * tc[1] +
               1.66485593e-07 * tc[2] - 4.48915985e-11 * tc[3] +
               4.00510752e-15 * tc[4] - 9.50158922e+02 * invT) *
              0.4960317460317460;
    // species 1: H
    result += y[1] *
              (+2.50000001e+00 - 1.15421486e-11 * tc[1] +
               5.38539827e-15 * tc[2] - 1.18378809e-18 * tc[3] +
               9.96394714e-23 * tc[4] + 2.54736599e+04 * invT) *
              0.9920634920634921;
    // species 3: N2
    result += y[3] *
              (+2.92664000e+00 + 7.43988400e-04 * tc[1] -
               1.89492000e-07 * tc[2] + 2.52425950e-11 * tc[3] -
               1.35067020e-15 * tc[4] - 9.22797700e+02 * invT) *
              0.0356964374955379;
    // species 5: O
    result += y[5] *
              (+2.56942078e+00 - 4.29870569e-05 * tc[1] +
               1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
               2.45667382e-16 * tc[4] + 2.92175791e+04 * invT) *
              0.0625039064941559;
    // species 6: OH
    result += y[6] *
              (+2.86472886e+00 + 5.28252240e-04 * tc[1] -
               8.63609193e-08 * tc[2] + 7.63046685e-12 * tc[3] -
               2.66391752e-16 * tc[4] + 3.71885774e+03 * invT) *
              0.0587993179279120;
    // species 7: HCO
    result += y[7] *
              (+2.77217438e+00 + 2.47847763e-03 * tc[1] -
               8.28152043e-07 * tc[2] + 1.47290445e-10 * tc[3] -
               1.06701742e-14 * tc[4] + 4.01191815e+03 * invT) *
              0.0344613688055690;
    // species 8: HO2
    result += y[8] *
              (+4.01721090e+00 + 1.11991006e-03 * tc[1] -
               2.11219383e-07 * tc[2] + 2.85615925e-11 * tc[3] -
               2.15817070e-15 * tc[4] + 1.11856713e+02 * invT) *
              0.0302975216627280;
    // species 9: H2O
    result += y[9] *
              (+3.03399249e+00 + 1.08845902e-03 * tc[1] -
               5.46908393e-08 * tc[2] - 2.42604967e-11 * tc[3] +
               3.36401984e-15 * tc[4] - 3.00042971e+04 * invT) *
              0.0555092978073827;
    // species 10: CO
    result += y[10] *
              (+2.71518561e+00 + 1.03126372e-03 * tc[1] -
               3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
               4.07295432e-15 * tc[4] - 1.41518724e+04 * invT) *
              0.0357015351660121;
    // species 11: O2
    result += y[11] *
              (+3.28253784e+00 + 7.41543770e-04 * tc[1] -
               2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
               4.33435588e-15 * tc[4] - 1.08845772e+03 * invT) *
              0.0312519532470779;
    // species 12: H2O2
    result += y[12] *
              (+4.16500285e+00 + 2.45415847e-03 * tc[1] -
               6.33797417e-07 * tc[2] + 9.27964965e-11 * tc[3] -
               5.75816610e-15 * tc[4] - 1.78617877e+04 * invT) *
              0.0293996589639560;
    // species 13: CO2
    result += y[13] *
              (+3.85746029e+00 + 2.20718513e-03 * tc[1] -
               7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
               9.44168328e-15 * tc[4] - 4.87591660e+04 * invT) *
              0.0227226249176305;
  }

  // species with no change at a midpoint T
  // species 2: AR
  result +=
    y[2] *
    (+2.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
     0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4] - 7.45375000e+02 * invT) *
    0.0250312891113892;

  // species with no change at a midpoint T
  // species 4: HE
  result +=
    y[4] *
    (+2.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
     0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4] - 7.45375000e+02 * invT) *
    0.2498374807187924;

  const amrex::Real RT = 8.31446261815324e+07 * tT; // R*T

  hbms = result * RT;
}

// get mean internal energy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBML(const amrex::Real T, const amrex::Real x[], amrex::Real& ubml)
{
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real uml[14];                                //  temporary energy array
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesInternalEnergy(uml, tc);

  // perform dot product
  for (int id = 0; id < 14; ++id) {
    result += x[id] * uml[id];
  }

  ubml = result * RT;
}

// get mean internal energy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& ubms)
{
  amrex::Real result = 0.0;
  const amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (tT < 1000) {
    // species 0: H2
    result += y[0] *
              (+1.34433112e+00 + 3.99026037e-03 * tc[1] -
               6.49271700e-06 * tc[2] + 5.03930235e-09 * tc[3] -
               1.47522352e-12 * tc[4] - 9.17935173e+02 * invT) *
              0.4960317460317460;
    // species 1: H
    result += y[1] *
              (+1.50000000e+00 + 3.52666409e-13 * tc[1] -
               6.65306547e-16 * tc[2] + 5.75204080e-19 * tc[3] -
               1.85546466e-22 * tc[4] + 2.54736599e+04 * invT) *
              0.9920634920634921;
    // species 3: N2
    result += y[3] *
              (+2.29867700e+00 + 7.04120200e-04 * tc[1] -
               1.32107400e-06 * tc[2] + 1.41037875e-09 * tc[3] -
               4.88970800e-13 * tc[4] - 1.02089990e+03 * invT) *
              0.0356964374955379;
    // species 5: O
    result += y[5] *
              (+2.16826710e+00 - 1.63965942e-03 * tc[1] +
               2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
               4.22531942e-13 * tc[4] + 2.91222592e+04 * invT) *
              0.0625039064941559;
    // species 6: OH
    result += y[6] *
              (+3.12530561e+00 - 1.61272470e-03 * tc[1] +
               2.17588230e-06 * tc[2] - 1.44963411e-09 * tc[3] +
               4.12474758e-13 * tc[4] + 3.38153812e+03 * invT) *
              0.0587993179279120;
    // species 7: HCO
    result += y[7] *
              (+3.22118584e+00 - 1.62196266e-03 * tc[1] +
               4.59331487e-06 * tc[2] - 3.32860233e-09 * tc[3] +
               8.67537730e-13 * tc[4] + 3.83956496e+03 * invT) *
              0.0344613688055690;
    // species 8: HO2
    result += y[8] *
              (+3.30179801e+00 - 2.37456025e-03 * tc[1] +
               7.05276303e-06 * tc[2] - 6.06909735e-09 * tc[3] +
               1.85845025e-12 * tc[4] + 2.94808040e+02 * invT) *
              0.0302975216627280;
    // species 9: H2O
    result += y[9] *
              (+3.19864056e+00 - 1.01821705e-03 * tc[1] +
               2.17346737e-06 * tc[2] - 1.37199266e-09 * tc[3] +
               3.54395634e-13 * tc[4] - 3.02937267e+04 * invT) *
              0.0555092978073827;
    // species 10: CO
    result += y[10] *
              (+2.57953347e+00 - 3.05176840e-04 * tc[1] +
               3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
               1.80884900e-13 * tc[4] - 1.43440860e+04 * invT) *
              0.0357015351660121;
    // species 11: O2
    result += y[11] *
              (+2.78245636e+00 - 1.49836708e-03 * tc[1] +
               3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
               6.48745674e-13 * tc[4] - 1.06394356e+03 * invT) *
              0.0312519532470779;
    // species 12: H2O2
    result += y[12] *
              (+3.27611269e+00 - 2.71411208e-04 * tc[1] +
               5.57785670e-06 * tc[2] - 5.39427032e-09 * tc[3] +
               1.72490873e-12 * tc[4] - 1.77025821e+04 * invT) *
              0.0293996589639560;
    // species 13: CO2
    result += y[13] *
              (+1.35677352e+00 + 4.49229839e-03 * tc[1] -
               2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
               2.87399096e-14 * tc[4] - 4.83719697e+04 * invT) *
              0.0227226249176305;
  } else {
    // species 0: H2
    result += y[0] *
              (+2.33727920e+00 - 2.47012365e-05 * tc[1] +
               1.66485593e-07 * tc[2] - 4.48915985e-11 * tc[3] +
               4.00510752e-15 * tc[4] - 9.50158922e+02 * invT) *
              0.4960317460317460;
    // species 1: H
    result += y[1] *
              (+1.50000001e+00 - 1.15421486e-11 * tc[1] +
               5.38539827e-15 * tc[2] - 1.18378809e-18 * tc[3] +
               9.96394714e-23 * tc[4] + 2.54736599e+04 * invT) *
              0.9920634920634921;
    // species 3: N2
    result += y[3] *
              (+1.92664000e+00 + 7.43988400e-04 * tc[1] -
               1.89492000e-07 * tc[2] + 2.52425950e-11 * tc[3] -
               1.35067020e-15 * tc[4] - 9.22797700e+02 * invT) *
              0.0356964374955379;
    // species 5: O
    result += y[5] *
              (+1.56942078e+00 - 4.29870569e-05 * tc[1] +
               1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
               2.45667382e-16 * tc[4] + 2.92175791e+04 * invT) *
              0.0625039064941559;
    // species 6: OH
    result += y[6] *
              (+1.86472886e+00 + 5.28252240e-04 * tc[1] -
               8.63609193e-08 * tc[2] + 7.63046685e-12 * tc[3] -
               2.66391752e-16 * tc[4] + 3.71885774e+03 * invT) *
              0.0587993179279120;
    // species 7: HCO
    result += y[7] *
              (+1.77217438e+00 + 2.47847763e-03 * tc[1] -
               8.28152043e-07 * tc[2] + 1.47290445e-10 * tc[3] -
               1.06701742e-14 * tc[4] + 4.01191815e+03 * invT) *
              0.0344613688055690;
    // species 8: HO2
    result += y[8] *
              (+3.01721090e+00 + 1.11991006e-03 * tc[1] -
               2.11219383e-07 * tc[2] + 2.85615925e-11 * tc[3] -
               2.15817070e-15 * tc[4] + 1.11856713e+02 * invT) *
              0.0302975216627280;
    // species 9: H2O
    result += y[9] *
              (+2.03399249e+00 + 1.08845902e-03 * tc[1] -
               5.46908393e-08 * tc[2] - 2.42604967e-11 * tc[3] +
               3.36401984e-15 * tc[4] - 3.00042971e+04 * invT) *
              0.0555092978073827;
    // species 10: CO
    result += y[10] *
              (+1.71518561e+00 + 1.03126372e-03 * tc[1] -
               3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
               4.07295432e-15 * tc[4] - 1.41518724e+04 * invT) *
              0.0357015351660121;
    // species 11: O2
    result += y[11] *
              (+2.28253784e+00 + 7.41543770e-04 * tc[1] -
               2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
               4.33435588e-15 * tc[4] - 1.08845772e+03 * invT) *
              0.0312519532470779;
    // species 12: H2O2
    result += y[12] *
              (+3.16500285e+00 + 2.45415847e-03 * tc[1] -
               6.33797417e-07 * tc[2] + 9.27964965e-11 * tc[3] -
               5.75816610e-15 * tc[4] - 1.78617877e+04 * invT) *
              0.0293996589639560;
    // species 13: CO2
    result += y[13] *
              (+2.85746029e+00 + 2.20718513e-03 * tc[1] -
               7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
               9.44168328e-15 * tc[4] - 4.87591660e+04 * invT) *
              0.0227226249176305;
  }

  // species with no change at a midpoint T
  // species 2: AR
  result +=
    y[2] *
    (+1.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
     0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4] - 7.45375000e+02 * invT) *
    0.0250312891113892;

  // species with no change at a midpoint T
  // species 4: HE
  result +=
    y[4] *
    (+1.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
     0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4] - 7.45375000e+02 * invT) *
    0.2498374807187924;

  const amrex::Real RT = 8.31446261815324e+07 * tT; // R*T

  ubms = result * RT;
}

// get mixture entropy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBML(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& sbml)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real sor[14]; //  temporary storage
  speciesEntropy(sor, tc);

  // Compute Eq 42
  for (int id = 0; id < 14; ++id) {
    result += x[id] * (sor[id] - log((x[id] + 1e-100)) - logPratio);
  }

  sbml = result * 8.31446261815324e+07;
}

// get mixture entropy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBMS(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& sbms)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real sor[14]; //  temporary storage
  amrex::Real x[14];   //  need a ytx conversion
  amrex::Real YOW = 0; // See Eq 4, 6 in CK Manual

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 14; i++) {
    YOW += y[i] * imw(i);
  }
  // Now compute y to x conversion
  x[0] = y[0] / (2.016000 * YOW);
  x[1] = y[1] / (1.008000 * YOW);
  x[2] = y[2] / (39.950000 * YOW);
  x[3] = y[3] / (28.014000 * YOW);
  x[4] = y[4] / (4.002602 * YOW);
  x[5] = y[5] / (15.999000 * YOW);
  x[6] = y[6] / (17.007000 * YOW);
  x[7] = y[7] / (29.018000 * YOW);
  x[8] = y[8] / (33.006000 * YOW);
  x[9] = y[9] / (18.015000 * YOW);
  x[10] = y[10] / (28.010000 * YOW);
  x[11] = y[11] / (31.998000 * YOW);
  x[12] = y[12] / (34.014000 * YOW);
  x[13] = y[13] / (44.009000 * YOW);
  speciesEntropy(sor, tc);
  // Perform computation in Eq 42 and 43
  for (int i = 0; i < 14; i++) {
    result += x[i] * (sor[i] - log((x[i] + 1e-100)) - logPratio);
  }
  // Scale by R/W
  sbms = result * 8.31446261815324e+07 * YOW;
}

//  get temperature given internal energy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_EY(
  const amrex::Real e, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real e1, emin, emax, cv, t1, dt;
  CKUBMS(tmin, y, emin);
  CKUBMS(tmax, y, emax);
  if (e < emin) {
    // Linear Extrapolation below tmin
    CKCVBS(tmin, y, cv);
    t = tmin - (emin - e) / cv;
    ierr = 1;
    return;
  }
  if (e > emax) {
    // Linear Extrapolation above tmax
    CKCVBS(tmax, y, cv);
    t = tmax - (emax - e) / cv;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (emax - emin) * (e - emin);
  }
  for (int i = 0; i < maxiter; ++i) {
    CKUBMS(t1, y, e1);
    CKCVBS(t1, y, cv);
    dt = (e - e1) / cv;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

//  get temperature given enthalpy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_HY(
  const amrex::Real h, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real h1, hmin, hmax, cp, t1, dt;
  CKHBMS(tmin, y, hmin);
  CKHBMS(tmax, y, hmax);
  if (h < hmin) {
    // Linear Extrapolation below tmin
    CKCPBS(tmin, y, cp);
    t = tmin - (hmin - h) / cp;
    ierr = 1;
    return;
  }
  if (h > hmax) {
    // Linear Extrapolation above tmax
    CKCPBS(tmax, y, cp);
    t = tmax - (hmax - h) / cp;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (hmax - hmin) * (h - hmin);
  }
  for (int i = 0; i < maxiter; ++i) {
    CKHBMS(t1, y, h1);
    CKCPBS(t1, y, cp);
    dt = (h - h1) / cp;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

// Compute P = rhoRT/W(x)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPX(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& P)
{
  amrex::Real XW = 0;                      //  To hold mean molecular wt
  XW += x[0] * 2.016000;                   // H2
  XW += x[1] * 1.008000;                   // H
  XW += x[2] * 39.950000;                  // AR
  XW += x[3] * 28.014000;                  // N2
  XW += x[4] * 4.002602;                   // HE
  XW += x[5] * 15.999000;                  // O
  XW += x[6] * 17.007000;                  // OH
  XW += x[7] * 29.018000;                  // HCO
  XW += x[8] * 33.006000;                  // HO2
  XW += x[9] * 18.015000;                  // H2O
  XW += x[10] * 28.010000;                 // CO
  XW += x[11] * 31.998000;                 // O2
  XW += x[12] * 34.014000;                 // H2O2
  XW += x[13] * 44.009000;                 // CO2
  P = rho * 8.31446261815324e+07 * T / XW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(y)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPY(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& P)
{
  amrex::Real YOW = 0; //  for computing mean MW

  for (int i = 0; i < 14; i++) {
    YOW += y[i] * imw(i);
  }
  P = rho * 8.31446261815324e+07 * T * YOW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(c)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPC(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& P)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 2.016000;   // H2
  W += c[1] * 1.008000;   // H
  W += c[2] * 39.950000;  // AR
  W += c[3] * 28.014000;  // N2
  W += c[4] * 4.002602;   // HE
  W += c[5] * 15.999000;  // O
  W += c[6] * 17.007000;  // OH
  W += c[7] * 29.018000;  // HCO
  W += c[8] * 33.006000;  // HO2
  W += c[9] * 18.015000;  // H2O
  W += c[10] * 28.010000; // CO
  W += c[11] * 31.998000; // O2
  W += c[12] * 34.014000; // H2O2
  W += c[13] * 44.009000; // CO2

  for (int id = 0; id < 14; ++id) {
    sumC += c[id];
  }
  P = rho * 8.31446261815324e+07 * T * sumC / W; // P = rho*R*T/W
}

// Compute rho = PW(x)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOX(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& rho)
{
  amrex::Real XW = 0;                        //  To hold mean molecular wt
  XW += x[0] * 2.016000;                     // H2
  XW += x[1] * 1.008000;                     // H
  XW += x[2] * 39.950000;                    // AR
  XW += x[3] * 28.014000;                    // N2
  XW += x[4] * 4.002602;                     // HE
  XW += x[5] * 15.999000;                    // O
  XW += x[6] * 17.007000;                    // OH
  XW += x[7] * 29.018000;                    // HCO
  XW += x[8] * 33.006000;                    // HO2
  XW += x[9] * 18.015000;                    // H2O
  XW += x[10] * 28.010000;                   // CO
  XW += x[11] * 31.998000;                   // O2
  XW += x[12] * 34.014000;                   // H2O2
  XW += x[13] * 44.009000;                   // CO2
  rho = P * XW / (8.31446261815324e+07 * T); // rho = P*W/(R*T)
}

// Compute rho = P*W(y)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOY(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& rho)
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 14; i++) {
    YOW += y[i] * imw(i);
  }

  rho = P / (8.31446261815324e+07 * T * YOW); // rho = P*W/(R*T)
}

// Compute rho = P*W(c)/(R*T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOC(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& rho)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 2.016000;   // H2
  W += c[1] * 1.008000;   // H
  W += c[2] * 39.950000;  // AR
  W += c[3] * 28.014000;  // N2
  W += c[4] * 4.002602;   // HE
  W += c[5] * 15.999000;  // O
  W += c[6] * 17.007000;  // OH
  W += c[7] * 29.018000;  // HCO
  W += c[8] * 33.006000;  // HO2
  W += c[9] * 18.015000;  // H2O
  W += c[10] * 28.010000; // CO
  W += c[11] * 31.998000; // O2
  W += c[12] * 34.014000; // H2O2
  W += c[13] * 44.009000; // CO2

  for (int id = 0; id < 14; ++id) {
    sumC += c[id];
  }
  rho = P * W / (sumC * T * 8.31446261815324e+07); // rho = PW/(R*T)
}

// get molecular weight for all species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWT(amrex::Real wt[])
{
  get_mw(wt);
}

// given y[species]: mass fractions
// s mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWY(const amrex::Real y[], amrex::Real& wtm)
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 14; i++) {
    YOW += y[i] * imw(i);
  }

  wtm = 1.0 / YOW;
}

// given x[species]: mole fractions
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWX(const amrex::Real x[], amrex::Real& wtm)
{
  amrex::Real XW = 0;      //  see Eq 4 in CK Manual
  XW += x[0] * 2.016000;   // H2
  XW += x[1] * 1.008000;   // H
  XW += x[2] * 39.950000;  // AR
  XW += x[3] * 28.014000;  // N2
  XW += x[4] * 4.002602;   // HE
  XW += x[5] * 15.999000;  // O
  XW += x[6] * 17.007000;  // OH
  XW += x[7] * 29.018000;  // HCO
  XW += x[8] * 33.006000;  // HO2
  XW += x[9] * 18.015000;  // H2O
  XW += x[10] * 28.010000; // CO
  XW += x[11] * 31.998000; // O2
  XW += x[12] * 34.014000; // H2O2
  XW += x[13] * 44.009000; // CO2
  wtm = XW;
}

// given c[species]: molar concentration
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWC(const amrex::Real c[], amrex::Real& wtm)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 2.016000;   // H2
  W += c[1] * 1.008000;   // H
  W += c[2] * 39.950000;  // AR
  W += c[3] * 28.014000;  // N2
  W += c[4] * 4.002602;   // HE
  W += c[5] * 15.999000;  // O
  W += c[6] * 17.007000;  // OH
  W += c[7] * 29.018000;  // HCO
  W += c[8] * 33.006000;  // HO2
  W += c[9] * 18.015000;  // H2O
  W += c[10] * 28.010000; // CO
  W += c[11] * 31.998000; // O2
  W += c[12] * 34.014000; // H2O2
  W += c[13] * 44.009000; // CO2

  for (int id = 0; id < 14; ++id) {
    sumC += c[id];
  }
  //  CK provides no guard against divison by zero
  wtm = W / sumC;
}

// get Cp/R as a function of T
// for all species (Eq 19)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPOR(const amrex::Real T, amrex::Real cpor[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cp_R(cpor, tc);
}

// get H/RT as a function of T
// for all species (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHORT(const amrex::Real T, amrex::Real hort[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEnthalpy(hort, tc);
}

// get S/R as a function of T
// for all species (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSOR(const amrex::Real T, amrex::Real sor[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEntropy(sor, tc);
}

// convert y[species] (mass fracs) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTX(const amrex::Real y[], amrex::Real x[])
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 14; i++) {
    YOW += y[i] * imw(i);
  }

  amrex::Real YOWINV = 1.0 / YOW;

  for (int i = 0; i < 14; i++) {
    x[i] = y[i] * imw(i) * YOWINV;
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real c[])
{
  amrex::Real YOW = 0;
  amrex::Real PWORT;

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 14; i++) {
    c[i] = y[i] * imw(i);
  }
  for (int i = 0; i < 14; i++) {
    YOW += c[i];
  }

  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // Now compute conversion

  for (int i = 0; i < 14; i++) {
    c[i] = PWORT * y[i] * imw(i);
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCR(
  const amrex::Real rho,
  amrex::Real /*T*/,
  const amrex::Real y[],
  amrex::Real c[])
{

  for (int i = 0; i < 14; i++) {
    c[i] = rho * y[i] * imw(i);
  }
}

// convert x[species] (mole fracs) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTY(const amrex::Real x[], amrex::Real y[])
{
  amrex::Real XW = 0; // See Eq 4, 9 in CK Manual
  // Compute mean molecular wt first
  XW += x[0] * 2.016000;   // H2
  XW += x[1] * 1.008000;   // H
  XW += x[2] * 39.950000;  // AR
  XW += x[3] * 28.014000;  // N2
  XW += x[4] * 4.002602;   // HE
  XW += x[5] * 15.999000;  // O
  XW += x[6] * 17.007000;  // OH
  XW += x[7] * 29.018000;  // HCO
  XW += x[8] * 33.006000;  // HO2
  XW += x[9] * 18.015000;  // H2O
  XW += x[10] * 28.010000; // CO
  XW += x[11] * 31.998000; // O2
  XW += x[12] * 34.014000; // H2O2
  XW += x[13] * 44.009000; // CO2
  // Now compute conversion
  amrex::Real XWinv = 1.0 / XW;
  y[0] = x[0] * 2.016000 * XWinv;
  y[1] = x[1] * 1.008000 * XWinv;
  y[2] = x[2] * 39.950000 * XWinv;
  y[3] = x[3] * 28.014000 * XWinv;
  y[4] = x[4] * 4.002602 * XWinv;
  y[5] = x[5] * 15.999000 * XWinv;
  y[6] = x[6] * 17.007000 * XWinv;
  y[7] = x[7] * 29.018000 * XWinv;
  y[8] = x[8] * 33.006000 * XWinv;
  y[9] = x[9] * 18.015000 * XWinv;
  y[10] = x[10] * 28.010000 * XWinv;
  y[11] = x[11] * 31.998000 * XWinv;
  y[12] = x[12] * 34.014000 * XWinv;
  y[13] = x[13] * 44.009000 * XWinv;
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real c[])
{
  amrex::Real PORT = P / (8.31446261815324e+07 * T); // P/RT

  // Compute conversion, see Eq 10
  for (int id = 0; id < 14; ++id) {
    c[id] = x[id] * PORT;
  }
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCR(
  const amrex::Real rho,
  const amrex::Real /*T*/,
  const amrex::Real x[],
  amrex::Real c[])
{
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 2.016000;   // H2
  XW += x[1] * 1.008000;   // H
  XW += x[2] * 39.950000;  // AR
  XW += x[3] * 28.014000;  // N2
  XW += x[4] * 4.002602;   // HE
  XW += x[5] * 15.999000;  // O
  XW += x[6] * 17.007000;  // OH
  XW += x[7] * 29.018000;  // HCO
  XW += x[8] * 33.006000;  // HO2
  XW += x[9] * 18.015000;  // H2O
  XW += x[10] * 28.010000; // CO
  XW += x[11] * 31.998000; // O2
  XW += x[12] * 34.014000; // H2O2
  XW += x[13] * 44.009000; // CO2
  ROW = rho / XW;

  // Compute conversion, see Eq 11
  for (int id = 0; id < 14; ++id) {
    c[id] = x[id] * ROW;
  }
}

// convert c[species] (molar conc) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTX(const amrex::Real c[], amrex::Real x[])
{
  amrex::Real sumC = 0;

  // compute sum of c
  for (int id = 0; id < 14; ++id) {
    sumC += c[id];
  }

  //  See Eq 13
  amrex::Real sumCinv = 1.0 / sumC;
  for (int id = 0; id < 14; ++id) {
    x[id] = c[id] * sumCinv;
  }
}

// convert c[species] (molar conc) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTY(const amrex::Real c[], amrex::Real y[])
{
  amrex::Real CW = 0; // See Eq 12 in CK Manual
  // compute denominator in eq 12 first
  CW += c[0] * 2.016000;   // H2
  CW += c[1] * 1.008000;   // H
  CW += c[2] * 39.950000;  // AR
  CW += c[3] * 28.014000;  // N2
  CW += c[4] * 4.002602;   // HE
  CW += c[5] * 15.999000;  // O
  CW += c[6] * 17.007000;  // OH
  CW += c[7] * 29.018000;  // HCO
  CW += c[8] * 33.006000;  // HO2
  CW += c[9] * 18.015000;  // H2O
  CW += c[10] * 28.010000; // CO
  CW += c[11] * 31.998000; // O2
  CW += c[12] * 34.014000; // H2O2
  CW += c[13] * 44.009000; // CO2
  // Now compute conversion
  amrex::Real CWinv = 1.0 / CW;
  y[0] = c[0] * 2.016000 * CWinv;
  y[1] = c[1] * 1.008000 * CWinv;
  y[2] = c[2] * 39.950000 * CWinv;
  y[3] = c[3] * 28.014000 * CWinv;
  y[4] = c[4] * 4.002602 * CWinv;
  y[5] = c[5] * 15.999000 * CWinv;
  y[6] = c[6] * 17.007000 * CWinv;
  y[7] = c[7] * 29.018000 * CWinv;
  y[8] = c[8] * 33.006000 * CWinv;
  y[9] = c[9] * 18.015000 * CWinv;
  y[10] = c[10] * 28.010000 * CWinv;
  y[11] = c[11] * 31.998000 * CWinv;
  y[12] = c[12] * 34.014000 * CWinv;
  y[13] = c[13] * 44.009000 * CWinv;
}

// get specific heat at constant volume as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVML(const amrex::Real T, amrex::Real cvml[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cv_R(cvml, tc);

  // convert to chemkin units
  for (int id = 0; id < 14; ++id) {
    cvml[id] *= 8.31446261815324e+07;
  }
}

// get specific heat at constant pressure as a
// function of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPML(const amrex::Real T, amrex::Real cpml[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cp_R(cpml, tc);

  // convert to chemkin units
  for (int id = 0; id < 14; ++id) {
    cpml[id] *= 8.31446261815324e+07;
  }
}

// get internal energy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUML(const amrex::Real T, amrex::Real uml[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesInternalEnergy(uml, tc);

  // convert to chemkin units
  for (int id = 0; id < 14; ++id) {
    uml[id] *= RT;
  }
}

// get enthalpy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHML(const amrex::Real T, amrex::Real hml[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesEnthalpy(hml, tc);

  // convert to chemkin units
  for (int id = 0; id < 14; ++id) {
    hml[id] *= RT;
  }
}

// Returns the standard-state entropies in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSML(const amrex::Real T, amrex::Real sml[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEntropy(sml, tc);

  // convert to chemkin units
  for (int id = 0; id < 14; ++id) {
    sml[id] *= 8.31446261815324e+07;
  }
}

// Returns the specific heats at constant volume
// in mass units (Eq. 29)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVMS(const amrex::Real T, amrex::Real cvms[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cv_R(cvms, tc);
  // multiply by R/molecularweight
  cvms[0] *= 4.124237409798234e+07;  // H2
  cvms[1] *= 8.248474819596468e+07;  // H
  cvms[2] *= 2.081217176008320e+06;  // AR
  cvms[3] *= 2.967966951578939e+06;  // N2
  cvms[4] *= 2.077264394049980e+07;  // HE
  cvms[5] *= 5.196863940342046e+06;  // O
  cvms[6] *= 4.888847308845322e+06;  // OH
  cvms[7] *= 2.865277627042952e+06;  // HCO
  cvms[8] *= 2.519076112874398e+06;  // HO2
  cvms[9] *= 4.615299815794193e+06;  // H2O
  cvms[10] *= 2.968390795484913e+06; // CO
  cvms[11] *= 2.598431970171023e+06; // O2
  cvms[12] *= 2.444423654422661e+06; // H2O2
  cvms[13] *= 1.889264154639560e+06; // CO2
}

// Returns the specific heats at constant pressure
// in mass units (Eq. 26)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPMS(const amrex::Real T, amrex::Real cpms[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cp_R(cpms, tc);
  // multiply by R/molecularweight
  cpms[0] *= 4.124237409798234e+07;  // H2
  cpms[1] *= 8.248474819596468e+07;  // H
  cpms[2] *= 2.081217176008320e+06;  // AR
  cpms[3] *= 2.967966951578939e+06;  // N2
  cpms[4] *= 2.077264394049980e+07;  // HE
  cpms[5] *= 5.196863940342046e+06;  // O
  cpms[6] *= 4.888847308845322e+06;  // OH
  cpms[7] *= 2.865277627042952e+06;  // HCO
  cpms[8] *= 2.519076112874398e+06;  // HO2
  cpms[9] *= 4.615299815794193e+06;  // H2O
  cpms[10] *= 2.968390795484913e+06; // CO
  cpms[11] *= 2.598431970171023e+06; // O2
  cpms[12] *= 2.444423654422661e+06; // H2O2
  cpms[13] *= 1.889264154639560e+06; // CO2
}

// Returns internal energy in mass units (Eq 30.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUMS(const amrex::Real T, amrex::Real ums[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T

  speciesInternalEnergy(ums, tc);

  for (int i = 0; i < 14; i++) {
    ums[i] *= RT * imw(i);
  }
}

// Returns enthalpy in mass units (Eq 27.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHMS(const amrex::Real T, amrex::Real hms[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T

  speciesEnthalpy(hms, tc);

  for (int i = 0; i < 14; i++) {
    hms[i] *= RT * imw(i);
  }
}

// Returns the entropies in mass units (Eq 28.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSMS(const amrex::Real T, amrex::Real sms[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEntropy(sms, tc);
  // multiply by R/molecularweight
  sms[0] *= 4.124237409798234e+07;  // H2
  sms[1] *= 8.248474819596468e+07;  // H
  sms[2] *= 2.081217176008320e+06;  // AR
  sms[3] *= 2.967966951578939e+06;  // N2
  sms[4] *= 2.077264394049980e+07;  // HE
  sms[5] *= 5.196863940342046e+06;  // O
  sms[6] *= 4.888847308845322e+06;  // OH
  sms[7] *= 2.865277627042952e+06;  // HCO
  sms[8] *= 2.519076112874398e+06;  // HO2
  sms[9] *= 4.615299815794193e+06;  // H2O
  sms[10] *= 2.968390795484913e+06; // CO
  sms[11] *= 2.598431970171023e+06; // O2
  sms[12] *= 2.444423654422661e+06; // H2O2
  sms[13] *= 1.889264154639560e+06; // CO2
}

// GPU version of productionRate: no more use of thermo namespace vectors
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_qfqr(
  amrex::Real* qf,
  amrex::Real* qr,
  const amrex::Real* sc,
  const amrex::Real* /*sc_qss*/,
  const amrex::Real* tc,
  const amrex::Real invT)
{

  // reaction 11: H + O2 (+M) <=> HO2 (+M)
  qf[0] = sc[1] * sc[11];
  qr[0] = sc[8];

  // reaction 13: 2 OH (+M) <=> H2O2 (+M)
  qf[1] = (sc[6] * sc[6]);
  qr[1] = sc[12];

  // reaction 26: CO + O (+M) <=> CO2 (+M)
  qf[2] = sc[5] * sc[10];
  qr[2] = sc[13];

  // reaction 4: 2 H + M <=> H2 + M
  qf[3] = (sc[1] * sc[1]);
  qr[3] = sc[0];

  // reaction 5: 2 H + H2 <=> H2 + H2
  qf[4] = sc[0] * (sc[1] * sc[1]);
  qr[4] = (sc[0] * sc[0]);

  // reaction 6: 2 H + H2O <=> H2 + H2O
  qf[5] = (sc[1] * sc[1]) * sc[9];
  qr[5] = sc[0] * sc[9];

  // reaction 7: 2 H + CO2 <=> H2 + CO2
  qf[6] = (sc[1] * sc[1]) * sc[13];
  qr[6] = sc[0] * sc[13];

  // reaction 8: H + OH + M <=> H2O + M
  qf[7] = sc[1] * sc[6];
  qr[7] = sc[9];

  // reaction 9: H + O + M <=> OH + M
  qf[8] = sc[1] * sc[5];
  qr[8] = sc[6];

  // reaction 10: 2 O + M <=> O2 + M
  qf[9] = (sc[5] * sc[5]);
  qr[9] = sc[11];

  // reaction 35: HCO + M <=> CO + H + M
  qf[10] = sc[7];
  qr[10] = sc[1] * sc[10];

  // reaction 36: HCO + H2O <=> CO + H + H2O
  qf[11] = sc[7] * sc[9];
  qr[11] = sc[1] * sc[9] * sc[10];

  // reaction 0: H + O2 <=> O + OH
  qf[12] = sc[1] * sc[11];
  qr[12] = sc[5] * sc[6];

  // reaction 1: H2 + O <=> H + OH
  qf[13] = sc[0] * sc[5];
  qr[13] = sc[1] * sc[6];

  // reaction 2: H2 + OH <=> H + H2O
  qf[14] = sc[0] * sc[6];
  qr[14] = sc[1] * sc[9];

  // reaction 3: 2 OH <=> H2O + O
  qf[15] = (sc[6] * sc[6]);
  qr[15] = sc[5] * sc[9];

  // reaction 12: H2 + O2 <=> H + HO2
  qf[16] = sc[0] * sc[11];
  qr[16] = sc[1] * sc[8];

  // reaction 14: H + HO2 <=> H2O + O
  qf[17] = sc[1] * sc[8];
  qr[17] = sc[5] * sc[9];

  // reaction 15: H + HO2 <=> 2 OH
  qf[18] = sc[1] * sc[8];
  qr[18] = (sc[6] * sc[6]);

  // reaction 16: HO2 + O <=> O2 + OH
  qf[19] = sc[5] * sc[8];
  qr[19] = sc[6] * sc[11];

  // reaction 17: HO2 + OH <=> H2O + O2
  qf[20] = sc[6] * sc[8];
  qr[20] = sc[9] * sc[11];

  // reaction 18: HO2 + OH <=> H2O + O2
  qf[21] = sc[6] * sc[8];
  qr[21] = sc[9] * sc[11];

  // reaction 19: 2 HO2 <=> H2O2 + O2
  qf[22] = (sc[8] * sc[8]);
  qr[22] = sc[11] * sc[12];

  // reaction 20: 2 HO2 <=> H2O2 + O2
  qf[23] = (sc[8] * sc[8]);
  qr[23] = sc[11] * sc[12];

  // reaction 21: H + H2O2 <=> H2 + HO2
  qf[24] = sc[1] * sc[12];
  qr[24] = sc[0] * sc[8];

  // reaction 22: H + H2O2 <=> H2O + OH
  qf[25] = sc[1] * sc[12];
  qr[25] = sc[6] * sc[9];

  // reaction 23: H2O2 + O <=> HO2 + OH
  qf[26] = sc[5] * sc[12];
  qr[26] = sc[6] * sc[8];

  // reaction 24: H2O2 + OH <=> H2O + HO2
  qf[27] = sc[6] * sc[12];
  qr[27] = sc[8] * sc[9];

  // reaction 25: H2O2 + OH <=> H2O + HO2
  qf[28] = sc[6] * sc[12];
  qr[28] = sc[8] * sc[9];

  // reaction 27: CO + OH <=> CO2 + H
  qf[29] = sc[6] * sc[10];
  qr[29] = sc[1] * sc[13];

  // reaction 28: CO + OH <=> CO2 + H
  qf[30] = sc[6] * sc[10];
  qr[30] = sc[1] * sc[13];

  // reaction 29: CO + O2 <=> CO2 + O
  qf[31] = sc[10] * sc[11];
  qr[31] = sc[5] * sc[13];

  // reaction 30: CO + HO2 <=> CO2 + OH
  qf[32] = sc[8] * sc[10];
  qr[32] = sc[6] * sc[13];

  // reaction 31: H + HCO <=> CO + H2
  qf[33] = sc[1] * sc[7];
  qr[33] = sc[0] * sc[10];

  // reaction 32: HCO + O <=> CO + OH
  qf[34] = sc[5] * sc[7];
  qr[34] = sc[6] * sc[10];

  // reaction 33: HCO + O <=> CO2 + H
  qf[35] = sc[5] * sc[7];
  qr[35] = sc[1] * sc[13];

  // reaction 34: HCO + OH <=> CO + H2O
  qf[36] = sc[6] * sc[7];
  qr[36] = sc[9] * sc[10];

  // reaction 37: HCO + O2 <=> CO + HO2
  qf[37] = sc[7] * sc[11];
  qr[37] = sc[8] * sc[10];

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 14; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[14];
  gibbs(g_RT, tc);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 * invT;
  amrex::Real refCinv = 1 / refC;

  // Evaluate the kfs
  amrex::Real k_f, Corr;
  amrex::Real redP, F, logPred, logFcent, troe_c, troe_n, troe, F_troe;

  // reaction 0:  H + O2 <=> O + OH
  k_f = 26440000000 * exp((-0.6707) * tc[0] - (8575.31520197823) * invT);
  qf[12] *= k_f;
  qr[12] *= k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[6] + g_RT[11]));
  // reaction 1:  H2 + O <=> H + OH
  k_f = 0.04589 * exp((2.7) * tc[0] - (3150.13632793755) * invT);
  qf[13] *= k_f;
  qr[13] *= k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[5] - g_RT[6]));
  // reaction 2:  H2 + OH <=> H + H2O
  k_f = 173.4 * exp((1.51) * tc[0] - (1726.03316371019) * invT);
  qf[14] *= k_f;
  qr[14] *= k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[6] - g_RT[9]));
  // reaction 3:  2 OH <=> H2O + O
  k_f = 0.03973 * exp((2.4) * tc[0] - (-1061.78716484796) * invT);
  qf[15] *= k_f;
  qr[15] *= k_f * exp(-(-g_RT[5] + 2.000000 * g_RT[6] - g_RT[9]));
  // reaction 4:  2 H + M <=> H2 + M
  k_f = 1780000 * exp((-1) * tc[0]);
  Corr = mixture + (-1) * sc[0] + (-0.37) * sc[2] + (-0.37) * sc[4] +
         (-1) * sc[9] + (-1) * sc[13];
  qf[3] *= Corr * k_f;
  qr[3] *= Corr * k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC);
  // reaction 5:  2 H + H2 <=> H2 + H2
  k_f = 90000 * exp((-0.6) * tc[0]);
  qf[4] *= k_f;
  qr[4] *= k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC);
  // reaction 6:  2 H + H2O <=> H2 + H2O
  k_f = 56240000 * exp((-1.25) * tc[0]);
  qf[5] *= k_f;
  qr[5] *= k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC);
  // reaction 7:  2 H + CO2 <=> H2 + CO2
  k_f = 550000000 * exp((-2) * tc[0]);
  qf[6] *= k_f;
  qr[6] *= k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC);
  // reaction 8:  H + OH + M <=> H2O + M
  k_f = 44000000000 * exp((-2) * tc[0]);
  Corr = mixture + sc[0] + (-0.62) * sc[2] + (-0.62) * sc[4] + (5.3) * sc[9] +
         (0.75) * sc[10] + (2.6) * sc[13];
  qf[7] *= Corr * k_f;
  qr[7] *= Corr * k_f * exp(-(g_RT[1] + g_RT[6] - g_RT[9])) * (refC);
  // reaction 9:  H + O + M <=> OH + M
  k_f = 9428000 * exp((-1) * tc[0]);
  Corr = mixture + sc[0] + (-0.3) * sc[2] + (-0.3) * sc[4] + (11) * sc[9] +
         (0.75) * sc[10] + (2.6) * sc[13];
  qf[8] *= Corr * k_f;
  qr[8] *= Corr * k_f * exp(-(g_RT[1] + g_RT[5] - g_RT[6])) * (refC);
  // reaction 10:  2 O + M <=> O2 + M
  k_f = 120000 * exp((-1) * tc[0]);
  Corr = mixture + (1.4) * sc[0] + (-0.17) * sc[2] + (-0.17) * sc[4] +
         (14.4) * sc[9] + (0.75) * sc[10] + (2.6) * sc[13];
  qf[9] *= Corr * k_f;
  qr[9] *= Corr * k_f * exp(-(2.000000 * g_RT[5] - g_RT[11])) * (refC);
  // reaction 11:  H + O2 (+M) <=> HO2 (+M)
  k_f = 5116000 * exp((0.44) * tc[0]);
  Corr = mixture + (-0.25) * sc[0] + (-0.6) * sc[2] + (-0.54) * sc[4] +
         (10.89) * sc[9] + (0.0900000000000001) * sc[10] + (-0.15) * sc[11] +
         (1.18) * sc[13];
  redP = Corr / k_f * 63280000 * exp(-1.4 * tc[0]);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent =
    log10((0.5) * exp(-tc[1] * 1e+30) + 0.5 * exp(-tc[1] * 1e-30) + 0.0);
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[0] *= Corr * k_f;
  qr[0] *= Corr * k_f * exp(-(g_RT[1] - g_RT[8] + g_RT[11])) * (refC);
  // reaction 12:  H2 + O2 <=> H + HO2
  k_f = 0.5916 * exp((2.433) * tc[0] - (26923.0980538841) * invT);
  qf[16] *= k_f;
  qr[16] *= k_f * exp(-(g_RT[0] - g_RT[1] - g_RT[8] + g_RT[11]));
  // reaction 13:  2 OH (+M) <=> H2O2 (+M)
  k_f = 111000000 * exp((-0.37) * tc[0]);
  Corr = mixture + sc[0] + (-0.3) * sc[2] + (-0.3) * sc[4] + (5) * sc[9] +
         (0.75) * sc[10] + (2.6) * sc[13];
  redP = Corr / k_f * 201000 * exp(-0.584 * tc[0] - (-1153.87581469022) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2654) * exp(-tc[1] * 0.0106382978723404) +
    0.7346 * exp(-tc[1] * 0.000569476082004556) + exp(-5182 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[1] *= Corr * k_f;
  qr[1] *= Corr * k_f * exp(-(2.000000 * g_RT[6] - g_RT[12])) * (refC);
  // reaction 14:  H + HO2 <=> H2O + O
  k_f = 3970000 * exp(-(337.658382754967) * invT);
  qf[17] *= k_f;
  qr[17] *= k_f * exp(-(g_RT[1] - g_RT[5] + g_RT[8] - g_RT[9]));
  // reaction 15:  H + HO2 <=> 2 OH
  k_f = 74850000 * exp(-(148.448916412392) * invT);
  qf[18] *= k_f;
  qr[18] *= k_f * exp(-(g_RT[1] - 2.000000 * g_RT[6] + g_RT[8]));
  // reaction 16:  HO2 + O <=> O2 + OH
  k_f = 40000000;
  qf[19] *= k_f;
  qr[19] *= k_f * exp(-(g_RT[5] - g_RT[6] + g_RT[8] - g_RT[11]));
  // reaction 17:  HO2 + OH <=> H2O + O2
  k_f = 23750000 * exp(-(-251.60833290236) * invT);
  qf[20] *= k_f;
  qr[20] *= k_f * exp(-(g_RT[6] + g_RT[8] - g_RT[9] - g_RT[11]));
  // reaction 18:  HO2 + OH <=> H2O + O2
  k_f = 10000000000 * exp(-(8720.74481839579) * invT);
  qf[21] *= k_f;
  qr[21] *= k_f * exp(-(g_RT[6] + g_RT[8] - g_RT[9] - g_RT[11]));
  // reaction 19:  2 HO2 <=> H2O2 + O2
  k_f = 130000 * exp(-(-820.243165261693) * invT);
  qf[22] *= k_f;
  qr[22] *= k_f * exp(-(2.000000 * g_RT[8] - g_RT[11] - g_RT[12]));
  // reaction 20:  2 HO2 <=> H2O2 + O2
  k_f = 365800000 * exp(-(6038.59998965664) * invT);
  qf[23] *= k_f;
  qr[23] *= k_f * exp(-(2.000000 * g_RT[8] - g_RT[11] - g_RT[12]));
  // reaction 21:  H + H2O2 <=> H2 + HO2
  k_f = 6.05 * exp((2) * tc[0] - (2616.72666218454) * invT);
  qf[24] *= k_f;
  qr[24] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[8] + g_RT[12]));
  // reaction 22:  H + H2O2 <=> H2O + OH
  k_f = 24100000 * exp(-(1997.77016324474) * invT);
  qf[25] *= k_f;
  qr[25] *= k_f * exp(-(g_RT[1] - g_RT[6] - g_RT[9] + g_RT[12]));
  // reaction 23:  H2O2 + O <=> HO2 + OH
  k_f = 9.63 * exp((2) * tc[0] - (1997.77016324474) * invT);
  qf[26] *= k_f;
  qr[26] *= k_f * exp(-(g_RT[5] - g_RT[6] - g_RT[8] + g_RT[12]));
  // reaction 24:  H2O2 + OH <=> H2O + HO2
  k_f = 2000000 * exp(-(214.873516298615) * invT);
  qf[27] *= k_f;
  qr[27] *= k_f * exp(-(g_RT[6] - g_RT[8] - g_RT[9] + g_RT[12]));
  // reaction 25:  H2O2 + OH <=> H2O + HO2
  k_f = 2.67e+35 * exp((-7) * tc[0] - (18920.9466342575) * invT);
  qf[28] *= k_f;
  qr[28] *= k_f * exp(-(g_RT[6] - g_RT[8] - g_RT[9] + g_RT[12]));
  // reaction 26:  CO + O (+M) <=> CO2 (+M)
  k_f = 13620 * exp(-(1199.66853127845) * invT);
  Corr = mixture + sc[0] + (-0.3) * sc[2] + (-0.3) * sc[4] + (11) * sc[9] +
         (0.75) * sc[10] + (2.6) * sc[13];
  redP =
    Corr / k_f * 1173000000000 * exp(-2.79 * tc[0] - (2108.98104638758) * invT);
  Corr = redP / (1. + redP);
  qf[2] *= Corr * k_f;
  qr[2] *= Corr * k_f * exp(-(g_RT[5] + g_RT[10] - g_RT[13])) * (refC);
  // reaction 27:  CO + OH <=> CO2 + H
  k_f = 800000 * exp((0.14) * tc[0] - (3699.6489269963) * invT);
  qf[29] *= k_f;
  qr[29] *= k_f * exp(-(-g_RT[1] + g_RT[6] + g_RT[10] - g_RT[13]));
  // reaction 28:  CO + OH <=> CO2 + H
  k_f = 87840 * exp((0.03) * tc[0] - (-8.05146665287551) * invT);
  qf[30] *= k_f;
  qr[30] *= k_f * exp(-(-g_RT[1] + g_RT[6] + g_RT[10] - g_RT[13]));
  // reaction 29:  CO + O2 <=> CO2 + O
  k_f = 1119000 * exp(-(24003.4349588851) * invT);
  qf[31] *= k_f;
  qr[31] *= k_f * exp(-(-g_RT[5] + g_RT[10] + g_RT[11] - g_RT[13]));
  // reaction 30:  CO + HO2 <=> CO2 + OH
  k_f = 30100000 * exp(-(11573.9833135086) * invT);
  qf[32] *= k_f;
  qr[32] *= k_f * exp(-(-g_RT[6] + g_RT[8] + g_RT[10] - g_RT[13]));
  // reaction 31:  H + HCO <=> CO + H2
  k_f = 120000000;
  qf[33] *= k_f;
  qr[33] *= k_f * exp(-(-g_RT[0] + g_RT[1] + g_RT[7] - g_RT[10]));
  // reaction 32:  HCO + O <=> CO + OH
  k_f = 30000000;
  qf[34] *= k_f;
  qr[34] *= k_f * exp(-(g_RT[5] - g_RT[6] + g_RT[7] - g_RT[10]));
  // reaction 33:  HCO + O <=> CO2 + H
  k_f = 30000000;
  qf[35] *= k_f;
  qr[35] *= k_f * exp(-(-g_RT[1] + g_RT[5] + g_RT[7] - g_RT[13]));
  // reaction 34:  HCO + OH <=> CO + H2O
  k_f = 30200000;
  qf[36] *= k_f;
  qr[36] *= k_f * exp(-(g_RT[6] + g_RT[7] - g_RT[9] - g_RT[10]));
  // reaction 35:  HCO + M <=> CO + H + M
  k_f = 187000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
  Corr = mixture + sc[0] + (-1) * sc[9] + (0.75) * sc[10] + (2.6) * sc[13];
  qf[10] *= Corr * k_f;
  qr[10] *= Corr * k_f * exp(-(-g_RT[1] + g_RT[7] - g_RT[10])) * (refCinv);
  // reaction 36:  HCO + H2O <=> CO + H + H2O
  k_f = 2244000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
  qf[11] *= k_f;
  qr[11] *= k_f * exp(-(-g_RT[1] + g_RT[7] - g_RT[10])) * (refCinv);
  // reaction 37:  HCO + O2 <=> CO + HO2
  k_f = 12040 * exp((0.807) * tc[0] - (-365.838516040031) * invT);
  qf[37] *= k_f;
  qr[37] *= k_f * exp(-(g_RT[7] - g_RT[8] - g_RT[10] + g_RT[11]));
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
productionRate(amrex::Real* wdot, const amrex::Real* sc, const amrex::Real T)
{
  const amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  const amrex::Real invT = 1.0 / tc[1];

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1 / refC;

  for (int i = 0; i < 14; ++i) {
    wdot[i] = 0.0;
  }

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 14; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[14];
  gibbs(g_RT, tc);

  {
    // reaction 11:  H + O2 (+M) <=> HO2 (+M)
    const amrex::Real k_f = 5116000 * exp((0.44) * tc[0]);
    amrex::Real Corr = mixture + (-0.25) * sc[0] + (-0.6) * sc[2] +
                       (-0.54) * sc[4] + (10.89) * sc[9] +
                       (0.0900000000000001) * sc[10] + (-0.15) * sc[11] +
                       (1.18) * sc[13];
    const amrex::Real redP = Corr / k_f * 63280000 * exp(-1.4 * tc[0]);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(0.5 * exp(-tc[1] * 1e+30) + 0.5 * exp(-tc[1] * 1e-30) + 0.0);
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[11]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] - g_RT[8] + g_RT[11])) * (refC) * (sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[8] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 13:  2 OH (+M) <=> H2O2 (+M)
    const amrex::Real k_f = 111000000 * exp((-0.37) * tc[0]);
    amrex::Real Corr = mixture + sc[0] + (-0.3) * sc[2] + (-0.3) * sc[4] +
                       (5) * sc[9] + (0.75) * sc[10] + (2.6) * sc[13];
    const amrex::Real redP =
      Corr / k_f * 201000 * exp(-0.584 * tc[0] - -1153.87581469022 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2654 * exp(-tc[1] * 0.0106382978723404) +
      0.7346 * exp(-tc[1] * 0.000569476082004556) + exp(-5182 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * ((sc[6] * sc[6]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[6] - g_RT[12])) * (refC) * (sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= 2.000000 * qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 26:  CO + O (+M) <=> CO2 (+M)
    const amrex::Real k_f = 13620 * exp(-(1199.66853127845) * invT);
    amrex::Real Corr = mixture + sc[0] + (-0.3) * sc[2] + (-0.3) * sc[4] +
                       (11) * sc[9] + (0.75) * sc[10] + (2.6) * sc[13];
    const amrex::Real redP =
      Corr / k_f * 1173000000000 * exp(-2.79 * tc[0] - 2108.98104638758 * invT);
    Corr = redP / (1.0 + redP);
    const amrex::Real qf = Corr * k_f * (sc[5] * sc[10]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[5] + g_RT[10] - g_RT[13])) * (refC) * (sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[10] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 4:  2 H + M <=> H2 + M
    const amrex::Real k_f = 1780000 * exp((-1) * tc[0]);
    const amrex::Real Corr = mixture + (-1) * sc[0] + (-0.37) * sc[2] +
                             (-0.37) * sc[4] + (-1) * sc[9] + (-1) * sc[13];
    const amrex::Real qf = Corr * k_f * ((sc[1] * sc[1]));
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC) * (sc[0]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= 2.000000 * qdot;
  }

  {
    // reaction 5:  2 H + H2 <=> H2 + H2
    const amrex::Real k_f = 90000 * exp((-0.6) * tc[0]);
    const amrex::Real qf = k_f * (sc[0] * (sc[1] * sc[1]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC) * ((sc[0] * sc[0]));
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= 2.000000 * qdot;
  }

  {
    // reaction 6:  2 H + H2O <=> H2 + H2O
    const amrex::Real k_f = 56240000 * exp((-1.25) * tc[0]);
    const amrex::Real qf = k_f * ((sc[1] * sc[1]) * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC) * (sc[0] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= 2.000000 * qdot;
  }

  {
    // reaction 7:  2 H + CO2 <=> H2 + CO2
    const amrex::Real k_f = 550000000 * exp((-2) * tc[0]);
    const amrex::Real qf = k_f * ((sc[1] * sc[1]) * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC) * (sc[0] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= 2.000000 * qdot;
  }

  {
    // reaction 8:  H + OH + M <=> H2O + M
    const amrex::Real k_f = 44000000000 * exp((-2) * tc[0]);
    const amrex::Real Corr = mixture + sc[0] + (-0.62) * sc[2] +
                             (-0.62) * sc[4] + (5.3) * sc[9] + (0.75) * sc[10] +
                             (2.6) * sc[13];
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[6]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[6] - g_RT[9])) * (refC) * (sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[6] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 9:  H + O + M <=> OH + M
    const amrex::Real k_f = 9428000 * exp((-1) * tc[0]);
    const amrex::Real Corr = mixture + sc[0] + (-0.3) * sc[2] + (-0.3) * sc[4] +
                             (11) * sc[9] + (0.75) * sc[10] + (2.6) * sc[13];
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[5]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[5] - g_RT[6])) * (refC) * (sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 10:  2 O + M <=> O2 + M
    const amrex::Real k_f = 120000 * exp((-1) * tc[0]);
    const amrex::Real Corr = mixture + (1.4) * sc[0] + (-0.17) * sc[2] +
                             (-0.17) * sc[4] + (14.4) * sc[9] +
                             (0.75) * sc[10] + (2.6) * sc[13];
    const amrex::Real qf = Corr * k_f * ((sc[5] * sc[5]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[5] - g_RT[11])) * (refC) * (sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= 2.000000 * qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 35:  HCO + M <=> CO + H + M
    const amrex::Real k_f =
      187000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
    const amrex::Real Corr =
      mixture + sc[0] + (-1) * sc[9] + (0.75) * sc[10] + (2.6) * sc[13];
    const amrex::Real qf = Corr * k_f * (sc[7]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[1] + g_RT[7] - g_RT[10])) *
                           (refCinv) * (sc[1] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[7] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 36:  HCO + H2O <=> CO + H + H2O
    const amrex::Real k_f =
      2244000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[9]);
    const amrex::Real qr = k_f * exp(-(-g_RT[1] + g_RT[7] - g_RT[10])) *
                           (refCinv) * (sc[1] * sc[9] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[7] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 0:  H + O2 <=> O + OH
    const amrex::Real k_f =
      26440000000 * exp((-0.6707) * tc[0] - (8575.31520197823) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[6] + g_RT[11])) * (sc[5] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[6] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 1:  H2 + O <=> H + OH
    const amrex::Real k_f =
      0.04589 * exp((2.7) * tc[0] - (3150.13632793755) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[5] - g_RT[6])) * (sc[1] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[5] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 2:  H2 + OH <=> H + H2O
    const amrex::Real k_f =
      173.4 * exp((1.51) * tc[0] - (1726.03316371019) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[6] - g_RT[9])) * (sc[1] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[6] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 3:  2 OH <=> H2O + O
    const amrex::Real k_f =
      0.03973 * exp((2.4) * tc[0] - (-1061.78716484796) * invT);
    const amrex::Real qf = k_f * ((sc[6] * sc[6]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] + 2.000000 * g_RT[6] - g_RT[9])) * (sc[5] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[6] -= 2.000000 * qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 12:  H2 + O2 <=> H + HO2
    const amrex::Real k_f =
      0.5916 * exp((2.433) * tc[0] - (26923.0980538841) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] - g_RT[8] + g_RT[11])) * (sc[1] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[8] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 14:  H + HO2 <=> H2O + O
    const amrex::Real k_f = 3970000 * exp(-(337.658382754967) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[5] + g_RT[8] - g_RT[9])) * (sc[5] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[8] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 15:  H + HO2 <=> 2 OH
    const amrex::Real k_f = 74850000 * exp(-(148.448916412392) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - 2.000000 * g_RT[6] + g_RT[8])) * ((sc[6] * sc[6]));
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[6] += 2.000000 * qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 16:  HO2 + O <=> O2 + OH
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[5] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[6] + g_RT[8] - g_RT[11])) * (sc[6] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[6] += qdot;
    wdot[8] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 17:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f = 23750000 * exp(-(-251.60833290236) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] + g_RT[8] - g_RT[9] - g_RT[11])) * (sc[9] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[8] -= qdot;
    wdot[9] += qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 18:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f = 10000000000 * exp(-(8720.74481839579) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] + g_RT[8] - g_RT[9] - g_RT[11])) * (sc[9] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[8] -= qdot;
    wdot[9] += qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 19:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f = 130000 * exp(-(-820.243165261693) * invT);
    const amrex::Real qf = k_f * ((sc[8] * sc[8]));
    const amrex::Real qr = k_f *
                           exp(-(2.000000 * g_RT[8] - g_RT[11] - g_RT[12])) *
                           (sc[11] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= 2.000000 * qdot;
    wdot[11] += qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 20:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f = 365800000 * exp(-(6038.59998965664) * invT);
    const amrex::Real qf = k_f * ((sc[8] * sc[8]));
    const amrex::Real qr = k_f *
                           exp(-(2.000000 * g_RT[8] - g_RT[11] - g_RT[12])) *
                           (sc[11] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= 2.000000 * qdot;
    wdot[11] += qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 21:  H + H2O2 <=> H2 + HO2
    const amrex::Real k_f = 6.05 * exp((2) * tc[0] - (2616.72666218454) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[8] + g_RT[12])) * (sc[0] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[8] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 22:  H + H2O2 <=> H2O + OH
    const amrex::Real k_f = 24100000 * exp(-(1997.77016324474) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[6] - g_RT[9] + g_RT[12])) * (sc[6] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[6] += qdot;
    wdot[9] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 23:  H2O2 + O <=> HO2 + OH
    const amrex::Real k_f = 9.63 * exp((2) * tc[0] - (1997.77016324474) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[6] - g_RT[8] + g_RT[12])) * (sc[6] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[6] += qdot;
    wdot[8] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 24:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f = 2000000 * exp(-(214.873516298615) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] - g_RT[8] - g_RT[9] + g_RT[12])) * (sc[8] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[8] += qdot;
    wdot[9] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 25:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f =
      2.67e+35 * exp((-7) * tc[0] - (18920.9466342575) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] - g_RT[8] - g_RT[9] + g_RT[12])) * (sc[8] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[8] += qdot;
    wdot[9] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 27:  CO + OH <=> CO2 + H
    const amrex::Real k_f =
      800000 * exp((0.14) * tc[0] - (3699.6489269963) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[6] + g_RT[10] - g_RT[13])) * (sc[1] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[6] -= qdot;
    wdot[10] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 28:  CO + OH <=> CO2 + H
    const amrex::Real k_f =
      87840 * exp((0.03) * tc[0] - (-8.05146665287551) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[6] + g_RT[10] - g_RT[13])) * (sc[1] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[6] -= qdot;
    wdot[10] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 29:  CO + O2 <=> CO2 + O
    const amrex::Real k_f = 1119000 * exp(-(24003.4349588851) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[5] + g_RT[10] + g_RT[11] - g_RT[13])) *
                           (sc[5] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[10] -= qdot;
    wdot[11] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 30:  CO + HO2 <=> CO2 + OH
    const amrex::Real k_f = 30100000 * exp(-(11573.9833135086) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[8] + g_RT[10] - g_RT[13])) * (sc[6] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[8] -= qdot;
    wdot[10] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 31:  H + HCO <=> CO + H2
    const amrex::Real k_f = 120000000;
    const amrex::Real qf = k_f * (sc[1] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] + g_RT[7] - g_RT[10])) * (sc[0] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[7] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 32:  HCO + O <=> CO + OH
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[5] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[6] + g_RT[7] - g_RT[10])) * (sc[6] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 33:  HCO + O <=> CO2 + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[5] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[5] + g_RT[7] - g_RT[13])) * (sc[1] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[5] -= qdot;
    wdot[7] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 34:  HCO + OH <=> CO + H2O
    const amrex::Real k_f = 30200000;
    const amrex::Real qf = k_f * (sc[6] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] + g_RT[7] - g_RT[9] - g_RT[10])) * (sc[9] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[7] -= qdot;
    wdot[9] += qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 37:  HCO + O2 <=> CO + HO2
    const amrex::Real k_f =
      12040 * exp((0.807) * tc[0] - (-365.838516040031) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[7] - g_RT[8] - g_RT[10] + g_RT[11])) * (sc[8] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[7] -= qdot;
    wdot[8] += qdot;
    wdot[10] += qdot;
    wdot[11] -= qdot;
  }
}

// compute the production rate for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWC(const amrex::Real T, amrex::Real C[], amrex::Real wdot[])
{

  // convert to SI
  for (int id = 0; id < 14; ++id) {
    C[id] *= 1.0e6;
  }

  // convert to chemkin units
  productionRate(wdot, C, T);

  // convert to chemkin units
  for (int id = 0; id < 14; ++id) {
    C[id] *= 1.0e-6;
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[])
{
  amrex::Real c[14]; // temporary storage
  amrex::Real YOW = 0;
  amrex::Real PWORT;

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 14; i++) {
    YOW += y[i] * imw(i);
  }
  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // multiply by 1e6 so c goes to SI
  PWORT *= 1e6;
  // Now compute conversion (and go to SI)
  for (int i = 0; i < 14; i++) {
    c[i] = PWORT * y[i] * imw(i);
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 14; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[])
{
  amrex::Real c[14]; // temporary storage
  amrex::Real PORT =
    1e6 * P / (8.31446261815324e+07 * T); // 1e6 * P/RT so c goes to SI units

  // Compute conversion, see Eq 10
  for (int id = 0; id < 14; ++id) {
    c[id] = x[id] * PORT;
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 14; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[])
{
  amrex::Real c[14]; // temporary storage

  // See Eq 8 with an extra 1e6 so c goes to SI
  for (int i = 0; i < 14; i++) {
    c[i] = 1e6 * rho * y[i] * imw(i);
  }

  // call productionRate
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 14; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[])
{
  amrex::Real c[14];  // temporary storage
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 2.016000;   // H2
  XW += x[1] * 1.008000;   // H
  XW += x[2] * 39.950000;  // AR
  XW += x[3] * 28.014000;  // N2
  XW += x[4] * 4.002602;   // HE
  XW += x[5] * 15.999000;  // O
  XW += x[6] * 17.007000;  // OH
  XW += x[7] * 29.018000;  // HCO
  XW += x[8] * 33.006000;  // HO2
  XW += x[9] * 18.015000;  // H2O
  XW += x[10] * 28.010000; // CO
  XW += x[11] * 31.998000; // O2
  XW += x[12] * 34.014000; // H2O2
  XW += x[13] * 44.009000; // CO2
  // Extra 1e6 factor to take c to SI
  ROW = 1e6 * rho / XW;

  // Compute conversion, see Eq 11
  for (int id = 0; id < 14; ++id) {
    c[id] = x[id] * ROW;
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 14; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

//  species unit charge number
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRG(int kcharge[])
{
  kcharge[0] = 0;  // H2
  kcharge[1] = 0;  // H
  kcharge[2] = 0;  // AR
  kcharge[3] = 0;  // N2
  kcharge[4] = 0;  // HE
  kcharge[5] = 0;  // O
  kcharge[6] = 0;  // OH
  kcharge[7] = 0;  // HCO
  kcharge[8] = 0;  // HO2
  kcharge[9] = 0;  // H2O
  kcharge[10] = 0; // CO
  kcharge[11] = 0; // O2
  kcharge[12] = 0; // H2O2
  kcharge[13] = 0; // CO2
}

//  species charge per unit mass
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRGMASS(amrex::Real zk[])
{

  int kchrg[14];
  CKCHRG(kchrg);

  for (int id = 0; id < 14; ++id) {
    zk[id] = 6.02214076e+23 * 1.60217663e-19 * kchrg[id] * imw(id);
  }
}

// compute d(Cp/R)/dT and d(Cv/R)/dT at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
dcvpRdT(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +7.98052075e-03 - 3.89563020e-05 * tc[1] +
                 6.04716282e-08 * tc[2] - 2.95044704e-11 * tc[3];
    // species 1: H
    species[1] = +7.05332819e-13 - 3.99183928e-15 * tc[1] +
                 6.90244896e-18 * tc[2] - 3.71092933e-21 * tc[3];
    // species 3: N2
    species[3] = +1.40824040e-03 - 7.92644400e-06 * tc[1] +
                 1.69245450e-08 * tc[2] - 9.77941600e-12 * tc[3];
    // species 5: O
    species[5] = -3.27931884e-03 + 1.32861279e-05 * tc[1] -
                 1.83841987e-08 * tc[2] + 8.45063884e-12 * tc[3];
    // species 6: OH
    species[6] = -3.22544939e-03 + 1.30552938e-05 * tc[1] -
                 1.73956093e-08 * tc[2] + 8.24949516e-12 * tc[3];
    // species 7: HCO
    species[7] = -3.24392532e-03 + 2.75598892e-05 * tc[1] -
                 3.99432279e-08 * tc[2] + 1.73507546e-11 * tc[3];
    // species 8: HO2
    species[8] = -4.74912051e-03 + 4.23165782e-05 * tc[1] -
                 7.28291682e-08 * tc[2] + 3.71690050e-11 * tc[3];
    // species 9: H2O
    species[9] = -2.03643410e-03 + 1.30408042e-05 * tc[1] -
                 1.64639119e-08 * tc[2] + 7.08791268e-12 * tc[3];
    // species 10: CO
    species[10] = -6.10353680e-04 + 2.03362866e-06 * tc[1] +
                  2.72101765e-09 * tc[2] - 3.61769800e-12 * tc[3];
    // species 11: O2
    species[11] = -2.99673416e-03 + 1.96946040e-05 * tc[1] -
                  2.90438853e-08 * tc[2] + 1.29749135e-11 * tc[3];
    // species 12: H2O2
    species[12] = -5.42822417e-04 + 3.34671402e-05 * tc[1] -
                  6.47312439e-08 * tc[2] + 3.44981745e-11 * tc[3];
    // species 13: CO2
    species[13] = +8.98459677e-03 - 1.42471254e-05 * tc[1] +
                  7.37757066e-09 * tc[2] - 5.74798192e-13 * tc[3];
  } else {
    // species 0: H2
    species[0] = -4.94024731e-05 + 9.98913556e-07 * tc[1] -
                 5.38699182e-10 * tc[2] + 8.01021504e-14 * tc[3];
    // species 1: H
    species[1] = -2.30842973e-11 + 3.23123896e-14 * tc[1] -
                 1.42054571e-17 * tc[2] + 1.99278943e-21 * tc[3];
    // species 3: N2
    species[3] = +1.48797680e-03 - 1.13695200e-06 * tc[1] +
                 3.02911140e-10 * tc[2] - 2.70134040e-14 * tc[3];
    // species 5: O
    species[5] = -8.59741137e-05 + 8.38969178e-08 * tc[1] -
                 3.00533397e-11 * tc[2] + 4.91334764e-15 * tc[3];
    // species 6: OH
    species[6] = +1.05650448e-03 - 5.18165516e-07 * tc[1] +
                 9.15656022e-11 * tc[2] - 5.32783504e-15 * tc[3];
    // species 7: HCO
    species[7] = +4.95695526e-03 - 4.96891226e-06 * tc[1] +
                 1.76748533e-09 * tc[2] - 2.13403484e-13 * tc[3];
    // species 8: HO2
    species[8] = +2.23982013e-03 - 1.26731630e-06 * tc[1] +
                 3.42739110e-10 * tc[2] - 4.31634140e-14 * tc[3];
    // species 9: H2O
    species[9] = +2.17691804e-03 - 3.28145036e-07 * tc[1] -
                 2.91125961e-10 * tc[2] + 6.72803968e-14 * tc[3];
    // species 10: CO
    species[10] = +2.06252743e-03 - 1.99765154e-06 * tc[1] +
                  6.90159024e-10 * tc[2] - 8.14590864e-14 * tc[3];
    // species 11: O2
    species[11] = +1.48308754e-03 - 1.51593334e-06 * tc[1] +
                  6.28411665e-10 * tc[2] - 8.66871176e-14 * tc[3];
    // species 12: H2O2
    species[12] = +4.90831694e-03 - 3.80278450e-06 * tc[1] +
                  1.11355796e-09 * tc[2] - 1.15163322e-13 * tc[3];
    // species 13: CO2
    species[13] = +4.41437026e-03 - 4.42962808e-06 * tc[1] +
                  1.57047056e-09 * tc[2] - 1.88833666e-13 * tc[3];
  }

  // species with no change at a midpoint T
  // species 2: AR
  species[2] = +0.00000000e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3];

  // species with no change at a midpoint T
  // species 4: HE
  species[4] = +0.00000000e+00 + 0.00000000e+00 * tc[1] +
               0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3];
}

// compute an approx to the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian_precond(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real T, const int HP)
{

#if defined(PELE_COMPILE_AJACOBIAN) || !defined(AMREX_USE_HIP)
  for (int i = 0; i < 225; i++) {
    J[i] = 0.0;
  }

  amrex::Real wdot[14];
  for (auto& val : wdot) {
    val = 0.0;
  }

  const amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  amrex::Real invT = 1.0 / tc[1];
  amrex::Real invT2 = invT * invT;

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 / T;
  amrex::Real refCinv = 1.0 / refC;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int k = 0; k < 14; ++k) {
    mixture += sc[k];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[14];
  gibbs(g_RT, tc);

  // compute the species enthalpy
  amrex::Real h_RT[14];
  speciesEnthalpy(h_RT, tc);

  amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
  amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
  amrex::Real dqdci, dcdc_fac, dqdc[14];
  amrex::Real Pr, fPr, F, k_0, logPr;
  amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
  amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
  amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
  amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
  const amrex::Real ln10 = log(10.0);
  const amrex::Real log10e = 1.0 / log(10.0);
  // reaction 11: H + O2 (+M) <=> HO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0.75 - 1) * sc[0] + (0.4 - 1) * sc[2] +
          (0.46 - 1) * sc[4] + (11.89 - 1) * sc[9] + (1.09 - 1) * sc[10] +
          (0.85 - 1) * sc[11] + (2.18 - 1) * sc[13];
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 5116000 * exp(0.44 * tc[0]);
  dlnkfdT = 0.44 * invT;
  // pressure-fall-off
  k_0 = 6.328e+19 * exp(-1.4 * tc[0]);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.4 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5) * exp(-T / 1e-30);
  Fcent2 = 0.5 * exp(-T / 1e+30);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1e+30);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[8];
  Kc = refCinv * exp(g_RT[1] - g_RT[8] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[11]) + (h_RT[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[8] += q;  // HO2
  wdot[11] -= q; // O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 0.75 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[11];
  dqdc[2] = 0.4 * dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = 0.46 * dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac - k_r;
  dqdc[9] = 11.89 * dcdc_fac;
  dqdc[10] = 1.09 * dcdc_fac;
  dqdc[11] = 0.85 * dcdc_fac + k_f * sc[1];
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2.18 * dcdc_fac;
  for (int k = 0; k < 14; k++) {
    J[15 * k + 1] -= dqdc[k];
    J[15 * k + 8] += dqdc[k];
    J[15 * k + 11] -= dqdc[k];
  }
  J[211] -= dqdT; // dwdot[H]/dT
  J[218] += dqdT; // dwdot[HO2]/dT
  J[221] -= dqdT; // dwdot[O2]/dT

  // reaction 13: 2 OH (+M) <=> H2O2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (0.7 - 1) * sc[2] + (0.7 - 1) * sc[4] +
          (6 - 1) * sc[9] + (1.75 - 1) * sc[10] + (3.6 - 1) * sc[13];
  // forward
  phi_f = (sc[6] * sc[6]);
  k_f = 111000000 * exp(-0.37 * tc[0]);
  dlnkfdT = -0.37 * invT;
  // pressure-fall-off
  k_0 = 2.01e+17 * exp(-0.584 * tc[0] - (-1153.87581469022) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -0.584 * invT + (-1153.87581469022) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7346) * exp(-T / 94);
  Fcent2 = 0.7346 * exp(-T / 1756);
  Fcent3 = exp(-5182 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 94 - Fcent2 / 1756 + Fcent3 * 5182 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[12];
  Kc = refCinv * exp(2.000000 * g_RT[6] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[6]) + (h_RT[12]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[6] -= 2 * q; // OH
  wdot[12] += q;    // H2O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = 0.7 * dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = 0.7 * dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac + k_f * 2.000000 * sc[6];
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = 6 * dcdc_fac;
  dqdc[10] = 1.75 * dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac - k_r;
  dqdc[13] = 3.6 * dcdc_fac;
  for (int k = 0; k < 14; k++) {
    J[15 * k + 6] += -2 * dqdc[k];
    J[15 * k + 12] += dqdc[k];
  }
  J[216] += -2 * dqdT; // dwdot[OH]/dT
  J[222] += dqdT;      // dwdot[H2O2]/dT

  // reaction 26: CO + O (+M) <=> CO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (0.7 - 1) * sc[2] + (0.7 - 1) * sc[4] +
          (12 - 1) * sc[9] + (1.75 - 1) * sc[10] + (3.6 - 1) * sc[13];
  // forward
  phi_f = sc[5] * sc[10];
  k_f = 13620 * exp(-(1199.66853127845) * invT);
  dlnkfdT = (1199.66853127845) * invT2;
  // pressure-fall-off
  k_0 = 1.173e+24 * exp(-2.79 * tc[0] - (2108.98104638758) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.79 * invT + (2108.98104638758) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  // dlogFdlogPr is 0.0 and unused
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[13];
  Kc = refCinv * exp(g_RT[5] + g_RT[10] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[10]) + (h_RT[13]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[5] -= q;  // O
  wdot[10] -= q; // CO
  wdot[13] += q; // CO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = 0.7 * dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = 0.7 * dcdc_fac;
  dqdc[5] = dcdc_fac + k_f * sc[10];
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = 12 * dcdc_fac;
  dqdc[10] = 1.75 * dcdc_fac + k_f * sc[5];
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 3.6 * dcdc_fac - k_r;
  for (int k = 0; k < 14; k++) {
    J[15 * k + 5] -= dqdc[k];
    J[15 * k + 10] -= dqdc[k];
    J[15 * k + 13] += dqdc[k];
  }
  J[215] -= dqdT; // dwdot[O]/dT
  J[220] -= dqdT; // dwdot[CO]/dT
  J[223] += dqdT; // dwdot[CO2]/dT

  // reaction 4: 2 H + M <=> H2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0 - 1) * sc[0] + (0.63 - 1) * sc[2] + (0.63 - 1) * sc[4] +
          (0 - 1) * sc[9] + (0 - 1) * sc[13];
  // forward
  phi_f = (sc[1] * sc[1]);
  k_f = 1780000 * exp(-1 * tc[0]);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[0];
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[1]) + (h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = -k_r;
  dqdc[1] = q_nocor + k_f * 2.000000 * sc[1];
  dqdc[2] = 0.63 * q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = 0.63 * q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = 0.0;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 0.0;
  for (int k = 0; k < 14; k++) {
    J[15 * k + 0] += dqdc[k];
    J[15 * k + 1] += -2 * dqdc[k];
  }
  J[210] += dqdT;      // dwdot[H2]/dT
  J[211] += -2 * dqdT; // dwdot[H]/dT

  // reaction 5: 2 H + H2 <=> H2 + H2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * (sc[1] * sc[1]);
  k_f = 90000 * exp(-0.6 * tc[0]);
  dlnkfdT = -0.6 * invT;
  // reverse
  phi_r = (sc[0] * sc[0]);
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[0] + 2.000000 * h_RT[1]) + (2.000000 * h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // d()/d[H2]
  dqdci = +k_f * sc[1] * sc[1] - k_r * 2.000000 * sc[0];
  J[0] += dqdci;      // dwdot[H2]/d[H2]
  J[1] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[0] * 2.000000 * sc[1];
  J[15] += dqdci;      // dwdot[H2]/d[H]
  J[16] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/dT
  J[210] += dqdT;      // dwdot[H2]/dT
  J[211] += -2 * dqdT; // dwdot[H]/dT

  // reaction 6: 2 H + H2O <=> H2 + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[9];
  k_f = 56240000 * exp(-1.25 * tc[0]);
  dlnkfdT = -1.25 * invT;
  // reverse
  phi_r = sc[0] * sc[9];
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[9]) + (h_RT[0] + h_RT[9]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // d()/d[H2]
  dqdci = -k_r * sc[9];
  J[0] += dqdci;      // dwdot[H2]/d[H2]
  J[1] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[9];
  J[15] += dqdci;      // dwdot[H2]/d[H]
  J[16] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * sc[1] * sc[1] - k_r * sc[0];
  J[135] += dqdci;      // dwdot[H2]/d[H2O]
  J[136] += -2 * dqdci; // dwdot[H]/d[H2O]
  // d()/dT
  J[210] += dqdT;      // dwdot[H2]/dT
  J[211] += -2 * dqdT; // dwdot[H]/dT

  // reaction 7: 2 H + CO2 <=> H2 + CO2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[13];
  k_f = 550000000 * exp(-2 * tc[0]);
  dlnkfdT = -2 * invT;
  // reverse
  phi_r = sc[0] * sc[13];
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[13]) + (h_RT[0] + h_RT[13]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // d()/d[H2]
  dqdci = -k_r * sc[13];
  J[0] += dqdci;      // dwdot[H2]/d[H2]
  J[1] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[13];
  J[15] += dqdci;      // dwdot[H2]/d[H]
  J[16] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/d[CO2]
  dqdci = +k_f * sc[1] * sc[1] - k_r * sc[0];
  J[195] += dqdci;      // dwdot[H2]/d[CO2]
  J[196] += -2 * dqdci; // dwdot[H]/d[CO2]
  // d()/dT
  J[210] += dqdT;      // dwdot[H2]/dT
  J[211] += -2 * dqdT; // dwdot[H]/dT

  // reaction 8: H + OH + M <=> H2O + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (0.38 - 1) * sc[2] + (0.38 - 1) * sc[4] +
          (6.3 - 1) * sc[9] + (1.75 - 1) * sc[10] + (3.6 - 1) * sc[13];
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 44000000000 * exp(-2 * tc[0]);
  dlnkfdT = -2 * invT;
  // reverse
  phi_r = sc[9];
  Kc = refCinv * exp(g_RT[1] + g_RT[6] - g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (h_RT[9]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[6] -= q; // OH
  wdot[9] += q; // H2O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2 * q_nocor;
  dqdc[1] = q_nocor + k_f * sc[6];
  dqdc[2] = 0.38 * q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = 0.38 * q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor + k_f * sc[1];
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = 6.3 * q_nocor - k_r;
  dqdc[10] = 1.75 * q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 3.6 * q_nocor;
  for (int k = 0; k < 14; k++) {
    J[15 * k + 1] -= dqdc[k];
    J[15 * k + 6] -= dqdc[k];
    J[15 * k + 9] += dqdc[k];
  }
  J[211] -= dqdT; // dwdot[H]/dT
  J[216] -= dqdT; // dwdot[OH]/dT
  J[219] += dqdT; // dwdot[H2O]/dT

  // reaction 9: H + O + M <=> OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (0.7 - 1) * sc[2] + (0.7 - 1) * sc[4] +
          (12 - 1) * sc[9] + (1.75 - 1) * sc[10] + (3.6 - 1) * sc[13];
  // forward
  phi_f = sc[1] * sc[5];
  k_f = 9428000 * exp(-1 * tc[0]);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[6];
  Kc = refCinv * exp(g_RT[1] + g_RT[5] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[5]) + (h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[5] -= q; // O
  wdot[6] += q; // OH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2 * q_nocor;
  dqdc[1] = q_nocor + k_f * sc[5];
  dqdc[2] = 0.7 * q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = 0.7 * q_nocor;
  dqdc[5] = q_nocor + k_f * sc[1];
  dqdc[6] = q_nocor - k_r;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = 12 * q_nocor;
  dqdc[10] = 1.75 * q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 3.6 * q_nocor;
  for (int k = 0; k < 14; k++) {
    J[15 * k + 1] -= dqdc[k];
    J[15 * k + 5] -= dqdc[k];
    J[15 * k + 6] += dqdc[k];
  }
  J[211] -= dqdT; // dwdot[H]/dT
  J[215] -= dqdT; // dwdot[O]/dT
  J[216] += dqdT; // dwdot[OH]/dT

  // reaction 10: 2 O + M <=> O2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.4 - 1) * sc[0] + (0.83 - 1) * sc[2] +
          (0.83 - 1) * sc[4] + (15.4 - 1) * sc[9] + (1.75 - 1) * sc[10] +
          (3.6 - 1) * sc[13];
  // forward
  phi_f = (sc[5] * sc[5]);
  k_f = 120000 * exp(-1 * tc[0]);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[11];
  Kc = refCinv * exp(2.000000 * g_RT[5] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[5]) + (h_RT[11]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= 2 * q; // O
  wdot[11] += q;    // O2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2.4 * q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = 0.83 * q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = 0.83 * q_nocor;
  dqdc[5] = q_nocor + k_f * 2.000000 * sc[5];
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = 15.4 * q_nocor;
  dqdc[10] = 1.75 * q_nocor;
  dqdc[11] = q_nocor - k_r;
  dqdc[12] = q_nocor;
  dqdc[13] = 3.6 * q_nocor;
  for (int k = 0; k < 14; k++) {
    J[15 * k + 5] += -2 * dqdc[k];
    J[15 * k + 11] += dqdc[k];
  }
  J[215] += -2 * dqdT; // dwdot[O]/dT
  J[221] += dqdT;      // dwdot[O2]/dT

  // reaction 35: HCO + M <=> CO + H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (0 - 1) * sc[9] + (1.75 - 1) * sc[10] +
          (3.6 - 1) * sc[13];
  // forward
  phi_f = sc[7];
  k_f = 187000000000 * exp(-1 * tc[0] - (8554.68331868023) * invT);
  dlnkfdT = -1 * invT + (8554.68331868023) * invT2;
  // reverse
  phi_r = sc[1] * sc[10];
  Kc = refC * exp(-g_RT[1] + g_RT[7] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7]) + (h_RT[1] + h_RT[10]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[7] -= q;  // HCO
  wdot[10] += q; // CO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2 * q_nocor;
  dqdc[1] = q_nocor - k_r * sc[10];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor + k_f;
  dqdc[8] = q_nocor;
  dqdc[9] = 0.0;
  dqdc[10] = 1.75 * q_nocor - k_r * sc[1];
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 3.6 * q_nocor;
  for (int k = 0; k < 14; k++) {
    J[15 * k + 1] += dqdc[k];
    J[15 * k + 7] -= dqdc[k];
    J[15 * k + 10] += dqdc[k];
  }
  J[211] += dqdT; // dwdot[H]/dT
  J[217] -= dqdT; // dwdot[HCO]/dT
  J[220] += dqdT; // dwdot[CO]/dT

  // reaction 36: HCO + H2O <=> CO + H + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[9];
  k_f = 2244000000000 * exp(-1 * tc[0] - (8554.68331868023) * invT);
  dlnkfdT = -1 * invT + (8554.68331868023) * invT2;
  // reverse
  phi_r = sc[1] * sc[9] * sc[10];
  Kc = refC * exp(-g_RT[1] + g_RT[7] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[7] + h_RT[9]) + (h_RT[1] + h_RT[9] + h_RT[10]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[7] -= q;  // HCO
  wdot[10] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[9] * sc[10];
  J[16] += dqdci; // dwdot[H]/d[H]
  J[22] -= dqdci; // dwdot[HCO]/d[H]
  J[25] += dqdci; // dwdot[CO]/d[H]
  // d()/d[HCO]
  dqdci = +k_f * sc[9];
  J[106] += dqdci; // dwdot[H]/d[HCO]
  J[112] -= dqdci; // dwdot[HCO]/d[HCO]
  J[115] += dqdci; // dwdot[CO]/d[HCO]
  // d()/d[H2O]
  dqdci = +k_f * sc[7] - k_r * sc[1] * sc[10];
  J[136] += dqdci; // dwdot[H]/d[H2O]
  J[142] -= dqdci; // dwdot[HCO]/d[H2O]
  J[145] += dqdci; // dwdot[CO]/d[H2O]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * sc[9];
  J[151] += dqdci; // dwdot[H]/d[CO]
  J[157] -= dqdci; // dwdot[HCO]/d[CO]
  J[160] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[211] += dqdT; // dwdot[H]/dT
  J[217] -= dqdT; // dwdot[HCO]/dT
  J[220] += dqdT; // dwdot[CO]/dT

  // reaction 0: H + O2 <=> O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 26440000000 * exp(-0.6707 * tc[0] - (8575.31520197823) * invT);
  dlnkfdT = -0.6707 * invT + (8575.31520197823) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[6] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[11]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // O
  wdot[6] += q;  // OH
  wdot[11] -= q; // O2
  // d()/d[H]
  dqdci = +k_f * sc[11];
  J[16] -= dqdci; // dwdot[H]/d[H]
  J[20] += dqdci; // dwdot[O]/d[H]
  J[21] += dqdci; // dwdot[OH]/d[H]
  J[26] -= dqdci; // dwdot[O2]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[6];
  J[76] -= dqdci; // dwdot[H]/d[O]
  J[80] += dqdci; // dwdot[O]/d[O]
  J[81] += dqdci; // dwdot[OH]/d[O]
  J[86] -= dqdci; // dwdot[O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[5];
  J[91] -= dqdci;  // dwdot[H]/d[OH]
  J[95] += dqdci;  // dwdot[O]/d[OH]
  J[96] += dqdci;  // dwdot[OH]/d[OH]
  J[101] -= dqdci; // dwdot[O2]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[1];
  J[166] -= dqdci; // dwdot[H]/d[O2]
  J[170] += dqdci; // dwdot[O]/d[O2]
  J[171] += dqdci; // dwdot[OH]/d[O2]
  J[176] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[211] -= dqdT; // dwdot[H]/dT
  J[215] += dqdT; // dwdot[O]/dT
  J[216] += dqdT; // dwdot[OH]/dT
  J[221] -= dqdT; // dwdot[O2]/dT

  // reaction 1: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[5];
  k_f = 0.04589 * exp(2.7 * tc[0] - (3150.13632793755) * invT);
  dlnkfdT = 2.7 * invT + (3150.13632793755) * invT2;
  // reverse
  phi_r = sc[1] * sc[6];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[5] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[5]) + (h_RT[1] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // H2
  wdot[1] += q; // H
  wdot[5] -= q; // O
  wdot[6] += q; // OH
  // d()/d[H2]
  dqdci = +k_f * sc[5];
  J[0] -= dqdci; // dwdot[H2]/d[H2]
  J[1] += dqdci; // dwdot[H]/d[H2]
  J[5] -= dqdci; // dwdot[O]/d[H2]
  J[6] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[6];
  J[15] -= dqdci; // dwdot[H2]/d[H]
  J[16] += dqdci; // dwdot[H]/d[H]
  J[20] -= dqdci; // dwdot[O]/d[H]
  J[21] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[0];
  J[75] -= dqdci; // dwdot[H2]/d[O]
  J[76] += dqdci; // dwdot[H]/d[O]
  J[80] -= dqdci; // dwdot[O]/d[O]
  J[81] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[1];
  J[90] -= dqdci; // dwdot[H2]/d[OH]
  J[91] += dqdci; // dwdot[H]/d[OH]
  J[95] -= dqdci; // dwdot[O]/d[OH]
  J[96] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[210] -= dqdT; // dwdot[H2]/dT
  J[211] += dqdT; // dwdot[H]/dT
  J[215] -= dqdT; // dwdot[O]/dT
  J[216] += dqdT; // dwdot[OH]/dT

  // reaction 2: H2 + OH <=> H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[6];
  k_f = 173.4 * exp(1.51 * tc[0] - (1726.03316371019) * invT);
  dlnkfdT = 1.51 * invT + (1726.03316371019) * invT2;
  // reverse
  phi_r = sc[1] * sc[9];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[6] - g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[6]) + (h_RT[1] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // H2
  wdot[1] += q; // H
  wdot[6] -= q; // OH
  wdot[9] += q; // H2O
  // d()/d[H2]
  dqdci = +k_f * sc[6];
  J[0] -= dqdci; // dwdot[H2]/d[H2]
  J[1] += dqdci; // dwdot[H]/d[H2]
  J[6] -= dqdci; // dwdot[OH]/d[H2]
  J[9] += dqdci; // dwdot[H2O]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[9];
  J[15] -= dqdci; // dwdot[H2]/d[H]
  J[16] += dqdci; // dwdot[H]/d[H]
  J[21] -= dqdci; // dwdot[OH]/d[H]
  J[24] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[0];
  J[90] -= dqdci; // dwdot[H2]/d[OH]
  J[91] += dqdci; // dwdot[H]/d[OH]
  J[96] -= dqdci; // dwdot[OH]/d[OH]
  J[99] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[1];
  J[135] -= dqdci; // dwdot[H2]/d[H2O]
  J[136] += dqdci; // dwdot[H]/d[H2O]
  J[141] -= dqdci; // dwdot[OH]/d[H2O]
  J[144] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[210] -= dqdT; // dwdot[H2]/dT
  J[211] += dqdT; // dwdot[H]/dT
  J[216] -= dqdT; // dwdot[OH]/dT
  J[219] += dqdT; // dwdot[H2O]/dT

  // reaction 3: 2 OH <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[6] * sc[6]);
  k_f = 0.03973 * exp(2.4 * tc[0] - (-1061.78716484796) * invT);
  dlnkfdT = 2.4 * invT + (-1061.78716484796) * invT2;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(-g_RT[5] + 2.000000 * g_RT[6] - g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[6]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;     // O
  wdot[6] -= 2 * q; // OH
  wdot[9] += q;     // H2O
  // d()/d[O]
  dqdci = -k_r * sc[9];
  J[80] += dqdci;      // dwdot[O]/d[O]
  J[81] += -2 * dqdci; // dwdot[OH]/d[O]
  J[84] += dqdci;      // dwdot[H2O]/d[O]
  // d()/d[OH]
  dqdci = +k_f * 2.000000 * sc[6];
  J[95] += dqdci;      // dwdot[O]/d[OH]
  J[96] += -2 * dqdci; // dwdot[OH]/d[OH]
  J[99] += dqdci;      // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[5];
  J[140] += dqdci;      // dwdot[O]/d[H2O]
  J[141] += -2 * dqdci; // dwdot[OH]/d[H2O]
  J[144] += dqdci;      // dwdot[H2O]/d[H2O]
  // d()/dT
  J[215] += dqdT;      // dwdot[O]/dT
  J[216] += -2 * dqdT; // dwdot[OH]/dT
  J[219] += dqdT;      // dwdot[H2O]/dT

  // reaction 12: H2 + O2 <=> H + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[11];
  k_f = 0.5916 * exp(2.433 * tc[0] - (26923.0980538841) * invT);
  dlnkfdT = 2.433 * invT + (26923.0980538841) * invT2;
  // reverse
  phi_r = sc[1] * sc[8];
  Kc = exp(g_RT[0] - g_RT[1] - g_RT[8] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[11]) + (h_RT[1] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[8] += q;  // HO2
  wdot[11] -= q; // O2
  // d()/d[H2]
  dqdci = +k_f * sc[11];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[8] += dqdci;  // dwdot[HO2]/d[H2]
  J[11] -= dqdci; // dwdot[O2]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[8];
  J[15] -= dqdci; // dwdot[H2]/d[H]
  J[16] += dqdci; // dwdot[H]/d[H]
  J[23] += dqdci; // dwdot[HO2]/d[H]
  J[26] -= dqdci; // dwdot[O2]/d[H]
  // d()/d[HO2]
  dqdci = -k_r * sc[1];
  J[120] -= dqdci; // dwdot[H2]/d[HO2]
  J[121] += dqdci; // dwdot[H]/d[HO2]
  J[128] += dqdci; // dwdot[HO2]/d[HO2]
  J[131] -= dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[0];
  J[165] -= dqdci; // dwdot[H2]/d[O2]
  J[166] += dqdci; // dwdot[H]/d[O2]
  J[173] += dqdci; // dwdot[HO2]/d[O2]
  J[176] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[210] -= dqdT; // dwdot[H2]/dT
  J[211] += dqdT; // dwdot[H]/dT
  J[218] += dqdT; // dwdot[HO2]/dT
  J[221] -= dqdT; // dwdot[O2]/dT

  // reaction 14: H + HO2 <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[8];
  k_f = 3970000 * exp(-(337.658382754967) * invT);
  dlnkfdT = (337.658382754967) * invT2;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(g_RT[1] - g_RT[5] + g_RT[8] - g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[8]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[5] += q; // O
  wdot[8] -= q; // HO2
  wdot[9] += q; // H2O
  // d()/d[H]
  dqdci = +k_f * sc[8];
  J[16] -= dqdci; // dwdot[H]/d[H]
  J[20] += dqdci; // dwdot[O]/d[H]
  J[23] -= dqdci; // dwdot[HO2]/d[H]
  J[24] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[9];
  J[76] -= dqdci; // dwdot[H]/d[O]
  J[80] += dqdci; // dwdot[O]/d[O]
  J[83] -= dqdci; // dwdot[HO2]/d[O]
  J[84] += dqdci; // dwdot[H2O]/d[O]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[121] -= dqdci; // dwdot[H]/d[HO2]
  J[125] += dqdci; // dwdot[O]/d[HO2]
  J[128] -= dqdci; // dwdot[HO2]/d[HO2]
  J[129] += dqdci; // dwdot[H2O]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[5];
  J[136] -= dqdci; // dwdot[H]/d[H2O]
  J[140] += dqdci; // dwdot[O]/d[H2O]
  J[143] -= dqdci; // dwdot[HO2]/d[H2O]
  J[144] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[211] -= dqdT; // dwdot[H]/dT
  J[215] += dqdT; // dwdot[O]/dT
  J[218] -= dqdT; // dwdot[HO2]/dT
  J[219] += dqdT; // dwdot[H2O]/dT

  // reaction 15: H + HO2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[8];
  k_f = 74850000 * exp(-(148.448916412392) * invT);
  dlnkfdT = (148.448916412392) * invT2;
  // reverse
  phi_r = (sc[6] * sc[6]);
  Kc = exp(g_RT[1] - 2.000000 * g_RT[6] + g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[8]) + (2.000000 * h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;     // H
  wdot[6] += 2 * q; // OH
  wdot[8] -= q;     // HO2
  // d()/d[H]
  dqdci = +k_f * sc[8];
  J[16] -= dqdci;     // dwdot[H]/d[H]
  J[21] += 2 * dqdci; // dwdot[OH]/d[H]
  J[23] -= dqdci;     // dwdot[HO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[6];
  J[91] -= dqdci;     // dwdot[H]/d[OH]
  J[96] += 2 * dqdci; // dwdot[OH]/d[OH]
  J[98] -= dqdci;     // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[121] -= dqdci;     // dwdot[H]/d[HO2]
  J[126] += 2 * dqdci; // dwdot[OH]/d[HO2]
  J[128] -= dqdci;     // dwdot[HO2]/d[HO2]
  // d()/dT
  J[211] -= dqdT;     // dwdot[H]/dT
  J[216] += 2 * dqdT; // dwdot[OH]/dT
  J[218] -= dqdT;     // dwdot[HO2]/dT

  // reaction 16: HO2 + O <=> O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[8];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[11];
  Kc = exp(g_RT[5] - g_RT[6] + g_RT[8] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[8]) + (h_RT[6] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // O
  wdot[6] += q;  // OH
  wdot[8] -= q;  // HO2
  wdot[11] += q; // O2
  // d()/d[O]
  dqdci = +k_f * sc[8];
  J[80] -= dqdci; // dwdot[O]/d[O]
  J[81] += dqdci; // dwdot[OH]/d[O]
  J[83] -= dqdci; // dwdot[HO2]/d[O]
  J[86] += dqdci; // dwdot[O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[95] -= dqdci;  // dwdot[O]/d[OH]
  J[96] += dqdci;  // dwdot[OH]/d[OH]
  J[98] -= dqdci;  // dwdot[HO2]/d[OH]
  J[101] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[5];
  J[125] -= dqdci; // dwdot[O]/d[HO2]
  J[126] += dqdci; // dwdot[OH]/d[HO2]
  J[128] -= dqdci; // dwdot[HO2]/d[HO2]
  J[131] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[6];
  J[170] -= dqdci; // dwdot[O]/d[O2]
  J[171] += dqdci; // dwdot[OH]/d[O2]
  J[173] -= dqdci; // dwdot[HO2]/d[O2]
  J[176] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[215] -= dqdT; // dwdot[O]/dT
  J[216] += dqdT; // dwdot[OH]/dT
  J[218] -= dqdT; // dwdot[HO2]/dT
  J[221] += dqdT; // dwdot[O2]/dT

  // reaction 17: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[8];
  k_f = 23750000 * exp(-(-251.60833290236) * invT);
  dlnkfdT = (-251.60833290236) * invT2;
  // reverse
  phi_r = sc[9] * sc[11];
  Kc = exp(g_RT[6] + g_RT[8] - g_RT[9] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[8]) + (h_RT[9] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // OH
  wdot[8] -= q;  // HO2
  wdot[9] += q;  // H2O
  wdot[11] += q; // O2
  // d()/d[OH]
  dqdci = +k_f * sc[8];
  J[96] -= dqdci;  // dwdot[OH]/d[OH]
  J[98] -= dqdci;  // dwdot[HO2]/d[OH]
  J[99] += dqdci;  // dwdot[H2O]/d[OH]
  J[101] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[6];
  J[126] -= dqdci; // dwdot[OH]/d[HO2]
  J[128] -= dqdci; // dwdot[HO2]/d[HO2]
  J[129] += dqdci; // dwdot[H2O]/d[HO2]
  J[131] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[141] -= dqdci; // dwdot[OH]/d[H2O]
  J[143] -= dqdci; // dwdot[HO2]/d[H2O]
  J[144] += dqdci; // dwdot[H2O]/d[H2O]
  J[146] += dqdci; // dwdot[O2]/d[H2O]
  // d()/d[O2]
  dqdci = -k_r * sc[9];
  J[171] -= dqdci; // dwdot[OH]/d[O2]
  J[173] -= dqdci; // dwdot[HO2]/d[O2]
  J[174] += dqdci; // dwdot[H2O]/d[O2]
  J[176] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[216] -= dqdT; // dwdot[OH]/dT
  J[218] -= dqdT; // dwdot[HO2]/dT
  J[219] += dqdT; // dwdot[H2O]/dT
  J[221] += dqdT; // dwdot[O2]/dT

  // reaction 18: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[8];
  k_f = 10000000000 * exp(-(8720.74481839579) * invT);
  dlnkfdT = (8720.74481839579) * invT2;
  // reverse
  phi_r = sc[9] * sc[11];
  Kc = exp(g_RT[6] + g_RT[8] - g_RT[9] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[8]) + (h_RT[9] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // OH
  wdot[8] -= q;  // HO2
  wdot[9] += q;  // H2O
  wdot[11] += q; // O2
  // d()/d[OH]
  dqdci = +k_f * sc[8];
  J[96] -= dqdci;  // dwdot[OH]/d[OH]
  J[98] -= dqdci;  // dwdot[HO2]/d[OH]
  J[99] += dqdci;  // dwdot[H2O]/d[OH]
  J[101] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[6];
  J[126] -= dqdci; // dwdot[OH]/d[HO2]
  J[128] -= dqdci; // dwdot[HO2]/d[HO2]
  J[129] += dqdci; // dwdot[H2O]/d[HO2]
  J[131] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[141] -= dqdci; // dwdot[OH]/d[H2O]
  J[143] -= dqdci; // dwdot[HO2]/d[H2O]
  J[144] += dqdci; // dwdot[H2O]/d[H2O]
  J[146] += dqdci; // dwdot[O2]/d[H2O]
  // d()/d[O2]
  dqdci = -k_r * sc[9];
  J[171] -= dqdci; // dwdot[OH]/d[O2]
  J[173] -= dqdci; // dwdot[HO2]/d[O2]
  J[174] += dqdci; // dwdot[H2O]/d[O2]
  J[176] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[216] -= dqdT; // dwdot[OH]/dT
  J[218] -= dqdT; // dwdot[HO2]/dT
  J[219] += dqdT; // dwdot[H2O]/dT
  J[221] += dqdT; // dwdot[O2]/dT

  // reaction 19: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[8] * sc[8]);
  k_f = 130000 * exp(-(-820.243165261693) * invT);
  dlnkfdT = (-820.243165261693) * invT2;
  // reverse
  phi_r = sc[11] * sc[12];
  Kc = exp(2.000000 * g_RT[8] - g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[8]) + (h_RT[11] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= 2 * q; // HO2
  wdot[11] += q;    // O2
  wdot[12] += q;    // H2O2
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[8];
  J[128] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[131] += dqdci;      // dwdot[O2]/d[HO2]
  J[132] += dqdci;      // dwdot[H2O2]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[12];
  J[173] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[176] += dqdci;      // dwdot[O2]/d[O2]
  J[177] += dqdci;      // dwdot[H2O2]/d[O2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[11];
  J[188] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[191] += dqdci;      // dwdot[O2]/d[H2O2]
  J[192] += dqdci;      // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[218] += -2 * dqdT; // dwdot[HO2]/dT
  J[221] += dqdT;      // dwdot[O2]/dT
  J[222] += dqdT;      // dwdot[H2O2]/dT

  // reaction 20: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[8] * sc[8]);
  k_f = 365800000 * exp(-(6038.59998965664) * invT);
  dlnkfdT = (6038.59998965664) * invT2;
  // reverse
  phi_r = sc[11] * sc[12];
  Kc = exp(2.000000 * g_RT[8] - g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[8]) + (h_RT[11] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= 2 * q; // HO2
  wdot[11] += q;    // O2
  wdot[12] += q;    // H2O2
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[8];
  J[128] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[131] += dqdci;      // dwdot[O2]/d[HO2]
  J[132] += dqdci;      // dwdot[H2O2]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[12];
  J[173] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[176] += dqdci;      // dwdot[O2]/d[O2]
  J[177] += dqdci;      // dwdot[H2O2]/d[O2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[11];
  J[188] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[191] += dqdci;      // dwdot[O2]/d[H2O2]
  J[192] += dqdci;      // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[218] += -2 * dqdT; // dwdot[HO2]/dT
  J[221] += dqdT;      // dwdot[O2]/dT
  J[222] += dqdT;      // dwdot[H2O2]/dT

  // reaction 21: H + H2O2 <=> H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[12];
  k_f = 6.05 * exp(2 * tc[0] - (2616.72666218454) * invT);
  dlnkfdT = 2 * invT + (2616.72666218454) * invT2;
  // reverse
  phi_r = sc[0] * sc[8];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[8] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[12]) + (h_RT[0] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[8] += q;  // HO2
  wdot[12] -= q; // H2O2
  // d()/d[H2]
  dqdci = -k_r * sc[8];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[8] += dqdci;  // dwdot[HO2]/d[H2]
  J[12] -= dqdci; // dwdot[H2O2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[12];
  J[15] += dqdci; // dwdot[H2]/d[H]
  J[16] -= dqdci; // dwdot[H]/d[H]
  J[23] += dqdci; // dwdot[HO2]/d[H]
  J[27] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[HO2]
  dqdci = -k_r * sc[0];
  J[120] += dqdci; // dwdot[H2]/d[HO2]
  J[121] -= dqdci; // dwdot[H]/d[HO2]
  J[128] += dqdci; // dwdot[HO2]/d[HO2]
  J[132] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[1];
  J[180] += dqdci; // dwdot[H2]/d[H2O2]
  J[181] -= dqdci; // dwdot[H]/d[H2O2]
  J[188] += dqdci; // dwdot[HO2]/d[H2O2]
  J[192] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[210] += dqdT; // dwdot[H2]/dT
  J[211] -= dqdT; // dwdot[H]/dT
  J[218] += dqdT; // dwdot[HO2]/dT
  J[222] -= dqdT; // dwdot[H2O2]/dT

  // reaction 22: H + H2O2 <=> H2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[12];
  k_f = 24100000 * exp(-(1997.77016324474) * invT);
  dlnkfdT = (1997.77016324474) * invT2;
  // reverse
  phi_r = sc[6] * sc[9];
  Kc = exp(g_RT[1] - g_RT[6] - g_RT[9] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[12]) + (h_RT[6] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[6] += q;  // OH
  wdot[9] += q;  // H2O
  wdot[12] -= q; // H2O2
  // d()/d[H]
  dqdci = +k_f * sc[12];
  J[16] -= dqdci; // dwdot[H]/d[H]
  J[21] += dqdci; // dwdot[OH]/d[H]
  J[24] += dqdci; // dwdot[H2O]/d[H]
  J[27] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[9];
  J[91] -= dqdci;  // dwdot[H]/d[OH]
  J[96] += dqdci;  // dwdot[OH]/d[OH]
  J[99] += dqdci;  // dwdot[H2O]/d[OH]
  J[102] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[6];
  J[136] -= dqdci; // dwdot[H]/d[H2O]
  J[141] += dqdci; // dwdot[OH]/d[H2O]
  J[144] += dqdci; // dwdot[H2O]/d[H2O]
  J[147] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[1];
  J[181] -= dqdci; // dwdot[H]/d[H2O2]
  J[186] += dqdci; // dwdot[OH]/d[H2O2]
  J[189] += dqdci; // dwdot[H2O]/d[H2O2]
  J[192] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[211] -= dqdT; // dwdot[H]/dT
  J[216] += dqdT; // dwdot[OH]/dT
  J[219] += dqdT; // dwdot[H2O]/dT
  J[222] -= dqdT; // dwdot[H2O2]/dT

  // reaction 23: H2O2 + O <=> HO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[12];
  k_f = 9.63 * exp(2 * tc[0] - (1997.77016324474) * invT);
  dlnkfdT = 2 * invT + (1997.77016324474) * invT2;
  // reverse
  phi_r = sc[6] * sc[8];
  Kc = exp(g_RT[5] - g_RT[6] - g_RT[8] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[12]) + (h_RT[6] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // O
  wdot[6] += q;  // OH
  wdot[8] += q;  // HO2
  wdot[12] -= q; // H2O2
  // d()/d[O]
  dqdci = +k_f * sc[12];
  J[80] -= dqdci; // dwdot[O]/d[O]
  J[81] += dqdci; // dwdot[OH]/d[O]
  J[83] += dqdci; // dwdot[HO2]/d[O]
  J[87] -= dqdci; // dwdot[H2O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[8];
  J[95] -= dqdci;  // dwdot[O]/d[OH]
  J[96] += dqdci;  // dwdot[OH]/d[OH]
  J[98] += dqdci;  // dwdot[HO2]/d[OH]
  J[102] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[6];
  J[125] -= dqdci; // dwdot[O]/d[HO2]
  J[126] += dqdci; // dwdot[OH]/d[HO2]
  J[128] += dqdci; // dwdot[HO2]/d[HO2]
  J[132] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[5];
  J[185] -= dqdci; // dwdot[O]/d[H2O2]
  J[186] += dqdci; // dwdot[OH]/d[H2O2]
  J[188] += dqdci; // dwdot[HO2]/d[H2O2]
  J[192] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[215] -= dqdT; // dwdot[O]/dT
  J[216] += dqdT; // dwdot[OH]/dT
  J[218] += dqdT; // dwdot[HO2]/dT
  J[222] -= dqdT; // dwdot[H2O2]/dT

  // reaction 24: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[12];
  k_f = 2000000 * exp(-(214.873516298615) * invT);
  dlnkfdT = (214.873516298615) * invT2;
  // reverse
  phi_r = sc[8] * sc[9];
  Kc = exp(g_RT[6] - g_RT[8] - g_RT[9] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[12]) + (h_RT[8] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // OH
  wdot[8] += q;  // HO2
  wdot[9] += q;  // H2O
  wdot[12] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[96] -= dqdci;  // dwdot[OH]/d[OH]
  J[98] += dqdci;  // dwdot[HO2]/d[OH]
  J[99] += dqdci;  // dwdot[H2O]/d[OH]
  J[102] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[9];
  J[126] -= dqdci; // dwdot[OH]/d[HO2]
  J[128] += dqdci; // dwdot[HO2]/d[HO2]
  J[129] += dqdci; // dwdot[H2O]/d[HO2]
  J[132] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[8];
  J[141] -= dqdci; // dwdot[OH]/d[H2O]
  J[143] += dqdci; // dwdot[HO2]/d[H2O]
  J[144] += dqdci; // dwdot[H2O]/d[H2O]
  J[147] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[6];
  J[186] -= dqdci; // dwdot[OH]/d[H2O2]
  J[188] += dqdci; // dwdot[HO2]/d[H2O2]
  J[189] += dqdci; // dwdot[H2O]/d[H2O2]
  J[192] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[216] -= dqdT; // dwdot[OH]/dT
  J[218] += dqdT; // dwdot[HO2]/dT
  J[219] += dqdT; // dwdot[H2O]/dT
  J[222] -= dqdT; // dwdot[H2O2]/dT

  // reaction 25: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[12];
  k_f = 2.67e+35 * exp(-7 * tc[0] - (18920.9466342575) * invT);
  dlnkfdT = -7 * invT + (18920.9466342575) * invT2;
  // reverse
  phi_r = sc[8] * sc[9];
  Kc = exp(g_RT[6] - g_RT[8] - g_RT[9] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[12]) + (h_RT[8] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // OH
  wdot[8] += q;  // HO2
  wdot[9] += q;  // H2O
  wdot[12] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[96] -= dqdci;  // dwdot[OH]/d[OH]
  J[98] += dqdci;  // dwdot[HO2]/d[OH]
  J[99] += dqdci;  // dwdot[H2O]/d[OH]
  J[102] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[9];
  J[126] -= dqdci; // dwdot[OH]/d[HO2]
  J[128] += dqdci; // dwdot[HO2]/d[HO2]
  J[129] += dqdci; // dwdot[H2O]/d[HO2]
  J[132] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[8];
  J[141] -= dqdci; // dwdot[OH]/d[H2O]
  J[143] += dqdci; // dwdot[HO2]/d[H2O]
  J[144] += dqdci; // dwdot[H2O]/d[H2O]
  J[147] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[6];
  J[186] -= dqdci; // dwdot[OH]/d[H2O2]
  J[188] += dqdci; // dwdot[HO2]/d[H2O2]
  J[189] += dqdci; // dwdot[H2O]/d[H2O2]
  J[192] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[216] -= dqdT; // dwdot[OH]/dT
  J[218] += dqdT; // dwdot[HO2]/dT
  J[219] += dqdT; // dwdot[H2O]/dT
  J[222] -= dqdT; // dwdot[H2O2]/dT

  // reaction 27: CO + OH <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[10];
  k_f = 800000 * exp(0.14 * tc[0] - (3699.6489269963) * invT);
  dlnkfdT = 0.14 * invT + (3699.6489269963) * invT2;
  // reverse
  phi_r = sc[1] * sc[13];
  Kc = exp(-g_RT[1] + g_RT[6] + g_RT[10] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[10]) + (h_RT[1] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[6] -= q;  // OH
  wdot[10] -= q; // CO
  wdot[13] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[13];
  J[16] += dqdci; // dwdot[H]/d[H]
  J[21] -= dqdci; // dwdot[OH]/d[H]
  J[25] -= dqdci; // dwdot[CO]/d[H]
  J[28] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[91] += dqdci;  // dwdot[H]/d[OH]
  J[96] -= dqdci;  // dwdot[OH]/d[OH]
  J[100] -= dqdci; // dwdot[CO]/d[OH]
  J[103] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[CO]
  dqdci = +k_f * sc[6];
  J[151] += dqdci; // dwdot[H]/d[CO]
  J[156] -= dqdci; // dwdot[OH]/d[CO]
  J[160] -= dqdci; // dwdot[CO]/d[CO]
  J[163] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[1];
  J[196] += dqdci; // dwdot[H]/d[CO2]
  J[201] -= dqdci; // dwdot[OH]/d[CO2]
  J[205] -= dqdci; // dwdot[CO]/d[CO2]
  J[208] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[211] += dqdT; // dwdot[H]/dT
  J[216] -= dqdT; // dwdot[OH]/dT
  J[220] -= dqdT; // dwdot[CO]/dT
  J[223] += dqdT; // dwdot[CO2]/dT

  // reaction 28: CO + OH <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[10];
  k_f = 87840 * exp(0.03 * tc[0] - (-8.05146665287551) * invT);
  dlnkfdT = 0.03 * invT + (-8.05146665287551) * invT2;
  // reverse
  phi_r = sc[1] * sc[13];
  Kc = exp(-g_RT[1] + g_RT[6] + g_RT[10] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[10]) + (h_RT[1] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[6] -= q;  // OH
  wdot[10] -= q; // CO
  wdot[13] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[13];
  J[16] += dqdci; // dwdot[H]/d[H]
  J[21] -= dqdci; // dwdot[OH]/d[H]
  J[25] -= dqdci; // dwdot[CO]/d[H]
  J[28] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[91] += dqdci;  // dwdot[H]/d[OH]
  J[96] -= dqdci;  // dwdot[OH]/d[OH]
  J[100] -= dqdci; // dwdot[CO]/d[OH]
  J[103] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[CO]
  dqdci = +k_f * sc[6];
  J[151] += dqdci; // dwdot[H]/d[CO]
  J[156] -= dqdci; // dwdot[OH]/d[CO]
  J[160] -= dqdci; // dwdot[CO]/d[CO]
  J[163] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[1];
  J[196] += dqdci; // dwdot[H]/d[CO2]
  J[201] -= dqdci; // dwdot[OH]/d[CO2]
  J[205] -= dqdci; // dwdot[CO]/d[CO2]
  J[208] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[211] += dqdT; // dwdot[H]/dT
  J[216] -= dqdT; // dwdot[OH]/dT
  J[220] -= dqdT; // dwdot[CO]/dT
  J[223] += dqdT; // dwdot[CO2]/dT

  // reaction 29: CO + O2 <=> CO2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[11];
  k_f = 1119000 * exp(-(24003.4349588851) * invT);
  dlnkfdT = (24003.4349588851) * invT2;
  // reverse
  phi_r = sc[5] * sc[13];
  Kc = exp(-g_RT[5] + g_RT[10] + g_RT[11] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[11]) + (h_RT[5] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // O
  wdot[10] -= q; // CO
  wdot[11] -= q; // O2
  wdot[13] += q; // CO2
  // d()/d[O]
  dqdci = -k_r * sc[13];
  J[80] += dqdci; // dwdot[O]/d[O]
  J[85] -= dqdci; // dwdot[CO]/d[O]
  J[86] -= dqdci; // dwdot[O2]/d[O]
  J[88] += dqdci; // dwdot[CO2]/d[O]
  // d()/d[CO]
  dqdci = +k_f * sc[11];
  J[155] += dqdci; // dwdot[O]/d[CO]
  J[160] -= dqdci; // dwdot[CO]/d[CO]
  J[161] -= dqdci; // dwdot[O2]/d[CO]
  J[163] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[O2]
  dqdci = +k_f * sc[10];
  J[170] += dqdci; // dwdot[O]/d[O2]
  J[175] -= dqdci; // dwdot[CO]/d[O2]
  J[176] -= dqdci; // dwdot[O2]/d[O2]
  J[178] += dqdci; // dwdot[CO2]/d[O2]
  // d()/d[CO2]
  dqdci = -k_r * sc[5];
  J[200] += dqdci; // dwdot[O]/d[CO2]
  J[205] -= dqdci; // dwdot[CO]/d[CO2]
  J[206] -= dqdci; // dwdot[O2]/d[CO2]
  J[208] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[215] += dqdT; // dwdot[O]/dT
  J[220] -= dqdT; // dwdot[CO]/dT
  J[221] -= dqdT; // dwdot[O2]/dT
  J[223] += dqdT; // dwdot[CO2]/dT

  // reaction 30: CO + HO2 <=> CO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[10];
  k_f = 30100000 * exp(-(11573.9833135086) * invT);
  dlnkfdT = (11573.9833135086) * invT2;
  // reverse
  phi_r = sc[6] * sc[13];
  Kc = exp(-g_RT[6] + g_RT[8] + g_RT[10] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[10]) + (h_RT[6] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // OH
  wdot[8] -= q;  // HO2
  wdot[10] -= q; // CO
  wdot[13] += q; // CO2
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[96] += dqdci;  // dwdot[OH]/d[OH]
  J[98] -= dqdci;  // dwdot[HO2]/d[OH]
  J[100] -= dqdci; // dwdot[CO]/d[OH]
  J[103] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[126] += dqdci; // dwdot[OH]/d[HO2]
  J[128] -= dqdci; // dwdot[HO2]/d[HO2]
  J[130] -= dqdci; // dwdot[CO]/d[HO2]
  J[133] += dqdci; // dwdot[CO2]/d[HO2]
  // d()/d[CO]
  dqdci = +k_f * sc[8];
  J[156] += dqdci; // dwdot[OH]/d[CO]
  J[158] -= dqdci; // dwdot[HO2]/d[CO]
  J[160] -= dqdci; // dwdot[CO]/d[CO]
  J[163] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[6];
  J[201] += dqdci; // dwdot[OH]/d[CO2]
  J[203] -= dqdci; // dwdot[HO2]/d[CO2]
  J[205] -= dqdci; // dwdot[CO]/d[CO2]
  J[208] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[216] += dqdT; // dwdot[OH]/dT
  J[218] -= dqdT; // dwdot[HO2]/dT
  J[220] -= dqdT; // dwdot[CO]/dT
  J[223] += dqdT; // dwdot[CO2]/dT

  // reaction 31: H + HCO <=> CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[7];
  k_f = 120000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[10];
  Kc = exp(-g_RT[0] + g_RT[1] + g_RT[7] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[0] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[7] -= q;  // HCO
  wdot[10] += q; // CO
  // d()/d[H2]
  dqdci = -k_r * sc[10];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[7] -= dqdci;  // dwdot[HCO]/d[H2]
  J[10] += dqdci; // dwdot[CO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[15] += dqdci; // dwdot[H2]/d[H]
  J[16] -= dqdci; // dwdot[H]/d[H]
  J[22] -= dqdci; // dwdot[HCO]/d[H]
  J[25] += dqdci; // dwdot[CO]/d[H]
  // d()/d[HCO]
  dqdci = +k_f * sc[1];
  J[105] += dqdci; // dwdot[H2]/d[HCO]
  J[106] -= dqdci; // dwdot[H]/d[HCO]
  J[112] -= dqdci; // dwdot[HCO]/d[HCO]
  J[115] += dqdci; // dwdot[CO]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[0];
  J[150] += dqdci; // dwdot[H2]/d[CO]
  J[151] -= dqdci; // dwdot[H]/d[CO]
  J[157] -= dqdci; // dwdot[HCO]/d[CO]
  J[160] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[210] += dqdT; // dwdot[H2]/dT
  J[211] -= dqdT; // dwdot[H]/dT
  J[217] -= dqdT; // dwdot[HCO]/dT
  J[220] += dqdT; // dwdot[CO]/dT

  // reaction 32: HCO + O <=> CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[7];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[10];
  Kc = exp(g_RT[5] - g_RT[6] + g_RT[7] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[7]) + (h_RT[6] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // O
  wdot[6] += q;  // OH
  wdot[7] -= q;  // HCO
  wdot[10] += q; // CO
  // d()/d[O]
  dqdci = +k_f * sc[7];
  J[80] -= dqdci; // dwdot[O]/d[O]
  J[81] += dqdci; // dwdot[OH]/d[O]
  J[82] -= dqdci; // dwdot[HCO]/d[O]
  J[85] += dqdci; // dwdot[CO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[95] -= dqdci;  // dwdot[O]/d[OH]
  J[96] += dqdci;  // dwdot[OH]/d[OH]
  J[97] -= dqdci;  // dwdot[HCO]/d[OH]
  J[100] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[HCO]
  dqdci = +k_f * sc[5];
  J[110] -= dqdci; // dwdot[O]/d[HCO]
  J[111] += dqdci; // dwdot[OH]/d[HCO]
  J[112] -= dqdci; // dwdot[HCO]/d[HCO]
  J[115] += dqdci; // dwdot[CO]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[6];
  J[155] -= dqdci; // dwdot[O]/d[CO]
  J[156] += dqdci; // dwdot[OH]/d[CO]
  J[157] -= dqdci; // dwdot[HCO]/d[CO]
  J[160] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[215] -= dqdT; // dwdot[O]/dT
  J[216] += dqdT; // dwdot[OH]/dT
  J[217] -= dqdT; // dwdot[HCO]/dT
  J[220] += dqdT; // dwdot[CO]/dT

  // reaction 33: HCO + O <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[7];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[13];
  Kc = exp(-g_RT[1] + g_RT[5] + g_RT[7] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[7]) + (h_RT[1] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[5] -= q;  // O
  wdot[7] -= q;  // HCO
  wdot[13] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[13];
  J[16] += dqdci; // dwdot[H]/d[H]
  J[20] -= dqdci; // dwdot[O]/d[H]
  J[22] -= dqdci; // dwdot[HCO]/d[H]
  J[28] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[7];
  J[76] += dqdci; // dwdot[H]/d[O]
  J[80] -= dqdci; // dwdot[O]/d[O]
  J[82] -= dqdci; // dwdot[HCO]/d[O]
  J[88] += dqdci; // dwdot[CO2]/d[O]
  // d()/d[HCO]
  dqdci = +k_f * sc[5];
  J[106] += dqdci; // dwdot[H]/d[HCO]
  J[110] -= dqdci; // dwdot[O]/d[HCO]
  J[112] -= dqdci; // dwdot[HCO]/d[HCO]
  J[118] += dqdci; // dwdot[CO2]/d[HCO]
  // d()/d[CO2]
  dqdci = -k_r * sc[1];
  J[196] += dqdci; // dwdot[H]/d[CO2]
  J[200] -= dqdci; // dwdot[O]/d[CO2]
  J[202] -= dqdci; // dwdot[HCO]/d[CO2]
  J[208] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[211] += dqdT; // dwdot[H]/dT
  J[215] -= dqdT; // dwdot[O]/dT
  J[217] -= dqdT; // dwdot[HCO]/dT
  J[223] += dqdT; // dwdot[CO2]/dT

  // reaction 34: HCO + OH <=> CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[7];
  k_f = 30200000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[9] * sc[10];
  Kc = exp(g_RT[6] + g_RT[7] - g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[7]) + (h_RT[9] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // OH
  wdot[7] -= q;  // HCO
  wdot[9] += q;  // H2O
  wdot[10] += q; // CO
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[96] -= dqdci;  // dwdot[OH]/d[OH]
  J[97] -= dqdci;  // dwdot[HCO]/d[OH]
  J[99] += dqdci;  // dwdot[H2O]/d[OH]
  J[100] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[HCO]
  dqdci = +k_f * sc[6];
  J[111] -= dqdci; // dwdot[OH]/d[HCO]
  J[112] -= dqdci; // dwdot[HCO]/d[HCO]
  J[114] += dqdci; // dwdot[H2O]/d[HCO]
  J[115] += dqdci; // dwdot[CO]/d[HCO]
  // d()/d[H2O]
  dqdci = -k_r * sc[10];
  J[141] -= dqdci; // dwdot[OH]/d[H2O]
  J[142] -= dqdci; // dwdot[HCO]/d[H2O]
  J[144] += dqdci; // dwdot[H2O]/d[H2O]
  J[145] += dqdci; // dwdot[CO]/d[H2O]
  // d()/d[CO]
  dqdci = -k_r * sc[9];
  J[156] -= dqdci; // dwdot[OH]/d[CO]
  J[157] -= dqdci; // dwdot[HCO]/d[CO]
  J[159] += dqdci; // dwdot[H2O]/d[CO]
  J[160] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[216] -= dqdT; // dwdot[OH]/dT
  J[217] -= dqdT; // dwdot[HCO]/dT
  J[219] += dqdT; // dwdot[H2O]/dT
  J[220] += dqdT; // dwdot[CO]/dT

  // reaction 37: HCO + O2 <=> CO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[11];
  k_f = 12040 * exp(0.807 * tc[0] - (-365.838516040031) * invT);
  dlnkfdT = 0.807 * invT + (-365.838516040031) * invT2;
  // reverse
  phi_r = sc[8] * sc[10];
  Kc = exp(g_RT[7] - g_RT[8] - g_RT[10] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[11]) + (h_RT[8] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[7] -= q;  // HCO
  wdot[8] += q;  // HO2
  wdot[10] += q; // CO
  wdot[11] -= q; // O2
  // d()/d[HCO]
  dqdci = +k_f * sc[11];
  J[112] -= dqdci; // dwdot[HCO]/d[HCO]
  J[113] += dqdci; // dwdot[HO2]/d[HCO]
  J[115] += dqdci; // dwdot[CO]/d[HCO]
  J[116] -= dqdci; // dwdot[O2]/d[HCO]
  // d()/d[HO2]
  dqdci = -k_r * sc[10];
  J[127] -= dqdci; // dwdot[HCO]/d[HO2]
  J[128] += dqdci; // dwdot[HO2]/d[HO2]
  J[130] += dqdci; // dwdot[CO]/d[HO2]
  J[131] -= dqdci; // dwdot[O2]/d[HO2]
  // d()/d[CO]
  dqdci = -k_r * sc[8];
  J[157] -= dqdci; // dwdot[HCO]/d[CO]
  J[158] += dqdci; // dwdot[HO2]/d[CO]
  J[160] += dqdci; // dwdot[CO]/d[CO]
  J[161] -= dqdci; // dwdot[O2]/d[CO]
  // d()/d[O2]
  dqdci = +k_f * sc[7];
  J[172] -= dqdci; // dwdot[HCO]/d[O2]
  J[173] += dqdci; // dwdot[HO2]/d[O2]
  J[175] += dqdci; // dwdot[CO]/d[O2]
  J[176] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[217] -= dqdT; // dwdot[HCO]/dT
  J[218] += dqdT; // dwdot[HO2]/dT
  J[220] += dqdT; // dwdot[CO]/dT
  J[221] -= dqdT; // dwdot[O2]/dT

  amrex::Real c_R[14], dcRdT[14], e_RT[14];
  amrex::Real* eh_RT;
  if (HP == 1) {
    cp_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    speciesInternalEnergy(e_RT, tc);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 14; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[210 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 14; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 14; ++m) {
      dehmixdc += eh_RT[m] * J[k * 15 + m];
    }
    J[k * 15 + 14] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[224] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
#else
  amrex::Abort();
#endif
}

// compute an approx to the reaction Jacobian (for preconditioning)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT_SIMPLIFIED(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real* Tp, const int* HP)
{
  amrex::Real c[14];

  for (int k = 0; k < 14; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian_precond(J, c, *Tp, *HP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 14; k++) {
    J[210 + k] *= 1.e-6;
    J[k * 15 + 14] *= 1.e6;
  }
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real T, const int consP)
{

#if defined(PELE_COMPILE_AJACOBIAN) || !defined(AMREX_USE_HIP)
  for (int i = 0; i < 225; i++) {
    J[i] = 0.0;
  }

  amrex::Real wdot[14];
  for (auto& val : wdot) {
    val = 0.0;
  }

  const amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  amrex::Real invT = 1.0 / tc[1];
  amrex::Real invT2 = invT * invT;

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 / T;
  amrex::Real refCinv = 1.0 / refC;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int k = 0; k < 14; ++k) {
    mixture += sc[k];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[14];
  gibbs(g_RT, tc);

  // compute the species enthalpy
  amrex::Real h_RT[14];
  speciesEnthalpy(h_RT, tc);

  amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
  amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
  amrex::Real dqdci, dcdc_fac, dqdc[14];
  amrex::Real Pr, fPr, F, k_0, logPr;
  amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
  amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
  amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
  amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
  const amrex::Real ln10 = log(10.0);
  const amrex::Real log10e = 1.0 / log(10.0);
  // reaction 11: H + O2 (+M) <=> HO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0.75 - 1) * sc[0] + (0.4 - 1) * sc[2] +
          (0.46 - 1) * sc[4] + (11.89 - 1) * sc[9] + (1.09 - 1) * sc[10] +
          (0.85 - 1) * sc[11] + (2.18 - 1) * sc[13];
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 5116000 * exp(0.44 * tc[0]);
  dlnkfdT = 0.44 * invT;
  // pressure-fall-off
  k_0 = 6.328e+19 * exp(-1.4 * tc[0]);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.4 * invT;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5) * exp(-T / 1e-30);
  Fcent2 = 0.5 * exp(-T / 1e+30);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1e+30);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[8];
  Kc = refCinv * exp(g_RT[1] - g_RT[8] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[11]) + (h_RT[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[8] += q;  // HO2
  wdot[11] -= q; // O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (0.75 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[8] += dqdci;  // dwdot[HO2]/d[H2]
    J[11] -= dqdci; // dwdot[O2]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[11];
    J[16] -= dqdci; // dwdot[H]/d[H]
    J[23] += dqdci; // dwdot[HO2]/d[H]
    J[26] -= dqdci; // dwdot[O2]/d[H]
    // d()/d[AR]
    dqdci = (0.4 - 1) * dcdc_fac;
    J[31] -= dqdci; // dwdot[H]/d[AR]
    J[38] += dqdci; // dwdot[HO2]/d[AR]
    J[41] -= dqdci; // dwdot[O2]/d[AR]
    // d()/d[HE]
    dqdci = (0.46 - 1) * dcdc_fac;
    J[61] -= dqdci; // dwdot[H]/d[HE]
    J[68] += dqdci; // dwdot[HO2]/d[HE]
    J[71] -= dqdci; // dwdot[O2]/d[HE]
    // d()/d[HO2]
    dqdci = -k_r;
    J[121] -= dqdci; // dwdot[H]/d[HO2]
    J[128] += dqdci; // dwdot[HO2]/d[HO2]
    J[131] -= dqdci; // dwdot[O2]/d[HO2]
    // d()/d[H2O]
    dqdci = (11.89 - 1) * dcdc_fac;
    J[136] -= dqdci; // dwdot[H]/d[H2O]
    J[143] += dqdci; // dwdot[HO2]/d[H2O]
    J[146] -= dqdci; // dwdot[O2]/d[H2O]
    // d()/d[CO]
    dqdci = (1.09 - 1) * dcdc_fac;
    J[151] -= dqdci; // dwdot[H]/d[CO]
    J[158] += dqdci; // dwdot[HO2]/d[CO]
    J[161] -= dqdci; // dwdot[O2]/d[CO]
    // d()/d[O2]
    dqdci = (0.85 - 1) * dcdc_fac + k_f * sc[1];
    J[166] -= dqdci; // dwdot[H]/d[O2]
    J[173] += dqdci; // dwdot[HO2]/d[O2]
    J[176] -= dqdci; // dwdot[O2]/d[O2]
    // d()/d[CO2]
    dqdci = (2.18 - 1) * dcdc_fac;
    J[196] -= dqdci; // dwdot[H]/d[CO2]
    J[203] += dqdci; // dwdot[HO2]/d[CO2]
    J[206] -= dqdci; // dwdot[O2]/d[CO2]
  } else {
    dqdc[0] = 0.75 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[11];
    dqdc[2] = 0.4 * dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = 0.46 * dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac - k_r;
    dqdc[9] = 11.89 * dcdc_fac;
    dqdc[10] = 1.09 * dcdc_fac;
    dqdc[11] = 0.85 * dcdc_fac + k_f * sc[1];
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2.18 * dcdc_fac;
    for (int k = 0; k < 14; k++) {
      J[15 * k + 1] -= dqdc[k];
      J[15 * k + 8] += dqdc[k];
      J[15 * k + 11] -= dqdc[k];
    }
  }
  J[211] -= dqdT; // dwdot[H]/dT
  J[218] += dqdT; // dwdot[HO2]/dT
  J[221] -= dqdT; // dwdot[O2]/dT

  // reaction 13: 2 OH (+M) <=> H2O2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (0.7 - 1) * sc[2] + (0.7 - 1) * sc[4] +
          (6 - 1) * sc[9] + (1.75 - 1) * sc[10] + (3.6 - 1) * sc[13];
  // forward
  phi_f = (sc[6] * sc[6]);
  k_f = 111000000 * exp(-0.37 * tc[0]);
  dlnkfdT = -0.37 * invT;
  // pressure-fall-off
  k_0 = 2.01e+17 * exp(-0.584 * tc[0] - (-1153.87581469022) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -0.584 * invT + (-1153.87581469022) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7346) * exp(-T / 94);
  Fcent2 = 0.7346 * exp(-T / 1756);
  Fcent3 = exp(-5182 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 94 - Fcent2 / 1756 + Fcent3 * 5182 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[12];
  Kc = refCinv * exp(2.000000 * g_RT[6] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[6]) + (h_RT[12]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[6] -= 2 * q; // OH
  wdot[12] += q;    // H2O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[6] += -2 * dqdci; // dwdot[OH]/d[H2]
    J[12] += dqdci;     // dwdot[H2O2]/d[H2]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[36] += -2 * dqdci; // dwdot[OH]/d[AR]
    J[42] += dqdci;      // dwdot[H2O2]/d[AR]
    // d()/d[HE]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[66] += -2 * dqdci; // dwdot[OH]/d[HE]
    J[72] += dqdci;      // dwdot[H2O2]/d[HE]
    // d()/d[OH]
    dqdci = +k_f * 2.000000 * sc[6];
    J[96] += -2 * dqdci; // dwdot[OH]/d[OH]
    J[102] += dqdci;     // dwdot[H2O2]/d[OH]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[141] += -2 * dqdci; // dwdot[OH]/d[H2O]
    J[147] += dqdci;      // dwdot[H2O2]/d[H2O]
    // d()/d[CO]
    dqdci = (1.75 - 1) * dcdc_fac;
    J[156] += -2 * dqdci; // dwdot[OH]/d[CO]
    J[162] += dqdci;      // dwdot[H2O2]/d[CO]
    // d()/d[H2O2]
    dqdci = -k_r;
    J[186] += -2 * dqdci; // dwdot[OH]/d[H2O2]
    J[192] += dqdci;      // dwdot[H2O2]/d[H2O2]
    // d()/d[CO2]
    dqdci = (3.6 - 1) * dcdc_fac;
    J[201] += -2 * dqdci; // dwdot[OH]/d[CO2]
    J[207] += dqdci;      // dwdot[H2O2]/d[CO2]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = 0.7 * dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = 0.7 * dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac + k_f * 2.000000 * sc[6];
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = 6 * dcdc_fac;
    dqdc[10] = 1.75 * dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac - k_r;
    dqdc[13] = 3.6 * dcdc_fac;
    for (int k = 0; k < 14; k++) {
      J[15 * k + 6] += -2 * dqdc[k];
      J[15 * k + 12] += dqdc[k];
    }
  }
  J[216] += -2 * dqdT; // dwdot[OH]/dT
  J[222] += dqdT;      // dwdot[H2O2]/dT

  // reaction 26: CO + O (+M) <=> CO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (0.7 - 1) * sc[2] + (0.7 - 1) * sc[4] +
          (12 - 1) * sc[9] + (1.75 - 1) * sc[10] + (3.6 - 1) * sc[13];
  // forward
  phi_f = sc[5] * sc[10];
  k_f = 13620 * exp(-(1199.66853127845) * invT);
  dlnkfdT = (1199.66853127845) * invT2;
  // pressure-fall-off
  k_0 = 1.173e+24 * exp(-2.79 * tc[0] - (2108.98104638758) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.79 * invT + (2108.98104638758) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  dlogFdlogPr = 0.0;
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[13];
  Kc = refCinv * exp(g_RT[5] + g_RT[10] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[10]) + (h_RT[13]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[5] -= q;  // O
  wdot[10] -= q; // CO
  wdot[13] += q; // CO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[5] -= dqdci;  // dwdot[O]/d[H2]
    J[10] -= dqdci; // dwdot[CO]/d[H2]
    J[13] += dqdci; // dwdot[CO2]/d[H2]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[35] -= dqdci; // dwdot[O]/d[AR]
    J[40] -= dqdci; // dwdot[CO]/d[AR]
    J[43] += dqdci; // dwdot[CO2]/d[AR]
    // d()/d[HE]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[65] -= dqdci; // dwdot[O]/d[HE]
    J[70] -= dqdci; // dwdot[CO]/d[HE]
    J[73] += dqdci; // dwdot[CO2]/d[HE]
    // d()/d[O]
    dqdci = +k_f * sc[10];
    J[80] -= dqdci; // dwdot[O]/d[O]
    J[85] -= dqdci; // dwdot[CO]/d[O]
    J[88] += dqdci; // dwdot[CO2]/d[O]
    // d()/d[H2O]
    dqdci = (12 - 1) * dcdc_fac;
    J[140] -= dqdci; // dwdot[O]/d[H2O]
    J[145] -= dqdci; // dwdot[CO]/d[H2O]
    J[148] += dqdci; // dwdot[CO2]/d[H2O]
    // d()/d[CO]
    dqdci = (1.75 - 1) * dcdc_fac + k_f * sc[5];
    J[155] -= dqdci; // dwdot[O]/d[CO]
    J[160] -= dqdci; // dwdot[CO]/d[CO]
    J[163] += dqdci; // dwdot[CO2]/d[CO]
    // d()/d[CO2]
    dqdci = (3.6 - 1) * dcdc_fac - k_r;
    J[200] -= dqdci; // dwdot[O]/d[CO2]
    J[205] -= dqdci; // dwdot[CO]/d[CO2]
    J[208] += dqdci; // dwdot[CO2]/d[CO2]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = 0.7 * dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = 0.7 * dcdc_fac;
    dqdc[5] = dcdc_fac + k_f * sc[10];
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = 12 * dcdc_fac;
    dqdc[10] = 1.75 * dcdc_fac + k_f * sc[5];
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 3.6 * dcdc_fac - k_r;
    for (int k = 0; k < 14; k++) {
      J[15 * k + 5] -= dqdc[k];
      J[15 * k + 10] -= dqdc[k];
      J[15 * k + 13] += dqdc[k];
    }
  }
  J[215] -= dqdT; // dwdot[O]/dT
  J[220] -= dqdT; // dwdot[CO]/dT
  J[223] += dqdT; // dwdot[CO2]/dT

  // reaction 4: 2 H + M <=> H2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0 - 1) * sc[0] + (0.63 - 1) * sc[2] + (0.63 - 1) * sc[4] +
          (0 - 1) * sc[9] + (0 - 1) * sc[13];
  // forward
  phi_f = (sc[1] * sc[1]);
  k_f = 1780000 * exp(-1 * tc[0]);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[0];
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[1]) + (h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (0 - 1) * q_nocor - k_r;
    J[0] += dqdci;      // dwdot[H2]/d[H2]
    J[1] += -2 * dqdci; // dwdot[H]/d[H2]
    // d()/d[H]
    dqdci = +k_f * 2.000000 * sc[1];
    J[15] += dqdci;      // dwdot[H2]/d[H]
    J[16] += -2 * dqdci; // dwdot[H]/d[H]
    // d()/d[AR]
    dqdci = (0.63 - 1) * q_nocor;
    J[30] += dqdci;      // dwdot[H2]/d[AR]
    J[31] += -2 * dqdci; // dwdot[H]/d[AR]
    // d()/d[HE]
    dqdci = (0.63 - 1) * q_nocor;
    J[60] += dqdci;      // dwdot[H2]/d[HE]
    J[61] += -2 * dqdci; // dwdot[H]/d[HE]
    // d()/d[H2O]
    dqdci = (0 - 1) * q_nocor;
    J[135] += dqdci;      // dwdot[H2]/d[H2O]
    J[136] += -2 * dqdci; // dwdot[H]/d[H2O]
    // d()/d[CO2]
    dqdci = (0 - 1) * q_nocor;
    J[195] += dqdci;      // dwdot[H2]/d[CO2]
    J[196] += -2 * dqdci; // dwdot[H]/d[CO2]
  } else {
    dqdc[0] = -k_r;
    dqdc[1] = q_nocor + k_f * 2.000000 * sc[1];
    dqdc[2] = 0.63 * q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = 0.63 * q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    for (int k = 0; k < 14; k++) {
      J[15 * k + 0] += dqdc[k];
      J[15 * k + 1] += -2 * dqdc[k];
    }
  }
  J[210] += dqdT;      // dwdot[H2]/dT
  J[211] += -2 * dqdT; // dwdot[H]/dT

  // reaction 5: 2 H + H2 <=> H2 + H2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * (sc[1] * sc[1]);
  k_f = 90000 * exp(-0.6 * tc[0]);
  dlnkfdT = -0.6 * invT;
  // reverse
  phi_r = (sc[0] * sc[0]);
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[0] + 2.000000 * h_RT[1]) + (2.000000 * h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // d()/d[H2]
  dqdci = +k_f * sc[1] * sc[1] - k_r * 2.000000 * sc[0];
  J[0] += dqdci;      // dwdot[H2]/d[H2]
  J[1] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[0] * 2.000000 * sc[1];
  J[15] += dqdci;      // dwdot[H2]/d[H]
  J[16] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/dT
  J[210] += dqdT;      // dwdot[H2]/dT
  J[211] += -2 * dqdT; // dwdot[H]/dT

  // reaction 6: 2 H + H2O <=> H2 + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[9];
  k_f = 56240000 * exp(-1.25 * tc[0]);
  dlnkfdT = -1.25 * invT;
  // reverse
  phi_r = sc[0] * sc[9];
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[9]) + (h_RT[0] + h_RT[9]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // d()/d[H2]
  dqdci = -k_r * sc[9];
  J[0] += dqdci;      // dwdot[H2]/d[H2]
  J[1] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[9];
  J[15] += dqdci;      // dwdot[H2]/d[H]
  J[16] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * sc[1] * sc[1] - k_r * sc[0];
  J[135] += dqdci;      // dwdot[H2]/d[H2O]
  J[136] += -2 * dqdci; // dwdot[H]/d[H2O]
  // d()/dT
  J[210] += dqdT;      // dwdot[H2]/dT
  J[211] += -2 * dqdT; // dwdot[H]/dT

  // reaction 7: 2 H + CO2 <=> H2 + CO2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[13];
  k_f = 550000000 * exp(-2 * tc[0]);
  dlnkfdT = -2 * invT;
  // reverse
  phi_r = sc[0] * sc[13];
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[13]) + (h_RT[0] + h_RT[13]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // d()/d[H2]
  dqdci = -k_r * sc[13];
  J[0] += dqdci;      // dwdot[H2]/d[H2]
  J[1] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[13];
  J[15] += dqdci;      // dwdot[H2]/d[H]
  J[16] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/d[CO2]
  dqdci = +k_f * sc[1] * sc[1] - k_r * sc[0];
  J[195] += dqdci;      // dwdot[H2]/d[CO2]
  J[196] += -2 * dqdci; // dwdot[H]/d[CO2]
  // d()/dT
  J[210] += dqdT;      // dwdot[H2]/dT
  J[211] += -2 * dqdT; // dwdot[H]/dT

  // reaction 8: H + OH + M <=> H2O + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (0.38 - 1) * sc[2] + (0.38 - 1) * sc[4] +
          (6.3 - 1) * sc[9] + (1.75 - 1) * sc[10] + (3.6 - 1) * sc[13];
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 44000000000 * exp(-2 * tc[0]);
  dlnkfdT = -2 * invT;
  // reverse
  phi_r = sc[9];
  Kc = refCinv * exp(g_RT[1] + g_RT[6] - g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (h_RT[9]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[6] -= q; // OH
  wdot[9] += q; // H2O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[1] -= dqdci; // dwdot[H]/d[H2]
    J[6] -= dqdci; // dwdot[OH]/d[H2]
    J[9] += dqdci; // dwdot[H2O]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[6];
    J[16] -= dqdci; // dwdot[H]/d[H]
    J[21] -= dqdci; // dwdot[OH]/d[H]
    J[24] += dqdci; // dwdot[H2O]/d[H]
    // d()/d[AR]
    dqdci = (0.38 - 1) * q_nocor;
    J[31] -= dqdci; // dwdot[H]/d[AR]
    J[36] -= dqdci; // dwdot[OH]/d[AR]
    J[39] += dqdci; // dwdot[H2O]/d[AR]
    // d()/d[HE]
    dqdci = (0.38 - 1) * q_nocor;
    J[61] -= dqdci; // dwdot[H]/d[HE]
    J[66] -= dqdci; // dwdot[OH]/d[HE]
    J[69] += dqdci; // dwdot[H2O]/d[HE]
    // d()/d[OH]
    dqdci = +k_f * sc[1];
    J[91] -= dqdci; // dwdot[H]/d[OH]
    J[96] -= dqdci; // dwdot[OH]/d[OH]
    J[99] += dqdci; // dwdot[H2O]/d[OH]
    // d()/d[H2O]
    dqdci = (6.3 - 1) * q_nocor - k_r;
    J[136] -= dqdci; // dwdot[H]/d[H2O]
    J[141] -= dqdci; // dwdot[OH]/d[H2O]
    J[144] += dqdci; // dwdot[H2O]/d[H2O]
    // d()/d[CO]
    dqdci = (1.75 - 1) * q_nocor;
    J[151] -= dqdci; // dwdot[H]/d[CO]
    J[156] -= dqdci; // dwdot[OH]/d[CO]
    J[159] += dqdci; // dwdot[H2O]/d[CO]
    // d()/d[CO2]
    dqdci = (3.6 - 1) * q_nocor;
    J[196] -= dqdci; // dwdot[H]/d[CO2]
    J[201] -= dqdci; // dwdot[OH]/d[CO2]
    J[204] += dqdci; // dwdot[H2O]/d[CO2]
  } else {
    dqdc[0] = 2 * q_nocor;
    dqdc[1] = q_nocor + k_f * sc[6];
    dqdc[2] = 0.38 * q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = 0.38 * q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor + k_f * sc[1];
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = 6.3 * q_nocor - k_r;
    dqdc[10] = 1.75 * q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 3.6 * q_nocor;
    for (int k = 0; k < 14; k++) {
      J[15 * k + 1] -= dqdc[k];
      J[15 * k + 6] -= dqdc[k];
      J[15 * k + 9] += dqdc[k];
    }
  }
  J[211] -= dqdT; // dwdot[H]/dT
  J[216] -= dqdT; // dwdot[OH]/dT
  J[219] += dqdT; // dwdot[H2O]/dT

  // reaction 9: H + O + M <=> OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (0.7 - 1) * sc[2] + (0.7 - 1) * sc[4] +
          (12 - 1) * sc[9] + (1.75 - 1) * sc[10] + (3.6 - 1) * sc[13];
  // forward
  phi_f = sc[1] * sc[5];
  k_f = 9428000 * exp(-1 * tc[0]);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[6];
  Kc = refCinv * exp(g_RT[1] + g_RT[5] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[5]) + (h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[5] -= q; // O
  wdot[6] += q; // OH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[1] -= dqdci; // dwdot[H]/d[H2]
    J[5] -= dqdci; // dwdot[O]/d[H2]
    J[6] += dqdci; // dwdot[OH]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[5];
    J[16] -= dqdci; // dwdot[H]/d[H]
    J[20] -= dqdci; // dwdot[O]/d[H]
    J[21] += dqdci; // dwdot[OH]/d[H]
    // d()/d[AR]
    dqdci = (0.7 - 1) * q_nocor;
    J[31] -= dqdci; // dwdot[H]/d[AR]
    J[35] -= dqdci; // dwdot[O]/d[AR]
    J[36] += dqdci; // dwdot[OH]/d[AR]
    // d()/d[HE]
    dqdci = (0.7 - 1) * q_nocor;
    J[61] -= dqdci; // dwdot[H]/d[HE]
    J[65] -= dqdci; // dwdot[O]/d[HE]
    J[66] += dqdci; // dwdot[OH]/d[HE]
    // d()/d[O]
    dqdci = +k_f * sc[1];
    J[76] -= dqdci; // dwdot[H]/d[O]
    J[80] -= dqdci; // dwdot[O]/d[O]
    J[81] += dqdci; // dwdot[OH]/d[O]
    // d()/d[OH]
    dqdci = -k_r;
    J[91] -= dqdci; // dwdot[H]/d[OH]
    J[95] -= dqdci; // dwdot[O]/d[OH]
    J[96] += dqdci; // dwdot[OH]/d[OH]
    // d()/d[H2O]
    dqdci = (12 - 1) * q_nocor;
    J[136] -= dqdci; // dwdot[H]/d[H2O]
    J[140] -= dqdci; // dwdot[O]/d[H2O]
    J[141] += dqdci; // dwdot[OH]/d[H2O]
    // d()/d[CO]
    dqdci = (1.75 - 1) * q_nocor;
    J[151] -= dqdci; // dwdot[H]/d[CO]
    J[155] -= dqdci; // dwdot[O]/d[CO]
    J[156] += dqdci; // dwdot[OH]/d[CO]
    // d()/d[CO2]
    dqdci = (3.6 - 1) * q_nocor;
    J[196] -= dqdci; // dwdot[H]/d[CO2]
    J[200] -= dqdci; // dwdot[O]/d[CO2]
    J[201] += dqdci; // dwdot[OH]/d[CO2]
  } else {
    dqdc[0] = 2 * q_nocor;
    dqdc[1] = q_nocor + k_f * sc[5];
    dqdc[2] = 0.7 * q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = 0.7 * q_nocor;
    dqdc[5] = q_nocor + k_f * sc[1];
    dqdc[6] = q_nocor - k_r;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = 12 * q_nocor;
    dqdc[10] = 1.75 * q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 3.6 * q_nocor;
    for (int k = 0; k < 14; k++) {
      J[15 * k + 1] -= dqdc[k];
      J[15 * k + 5] -= dqdc[k];
      J[15 * k + 6] += dqdc[k];
    }
  }
  J[211] -= dqdT; // dwdot[H]/dT
  J[215] -= dqdT; // dwdot[O]/dT
  J[216] += dqdT; // dwdot[OH]/dT

  // reaction 10: 2 O + M <=> O2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.4 - 1) * sc[0] + (0.83 - 1) * sc[2] +
          (0.83 - 1) * sc[4] + (15.4 - 1) * sc[9] + (1.75 - 1) * sc[10] +
          (3.6 - 1) * sc[13];
  // forward
  phi_f = (sc[5] * sc[5]);
  k_f = 120000 * exp(-1 * tc[0]);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[11];
  Kc = refCinv * exp(2.000000 * g_RT[5] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[5]) + (h_RT[11]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= 2 * q; // O
  wdot[11] += q;    // O2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2.4 - 1) * q_nocor;
    J[5] += -2 * dqdci; // dwdot[O]/d[H2]
    J[11] += dqdci;     // dwdot[O2]/d[H2]
    // d()/d[AR]
    dqdci = (0.83 - 1) * q_nocor;
    J[35] += -2 * dqdci; // dwdot[O]/d[AR]
    J[41] += dqdci;      // dwdot[O2]/d[AR]
    // d()/d[HE]
    dqdci = (0.83 - 1) * q_nocor;
    J[65] += -2 * dqdci; // dwdot[O]/d[HE]
    J[71] += dqdci;      // dwdot[O2]/d[HE]
    // d()/d[O]
    dqdci = +k_f * 2.000000 * sc[5];
    J[80] += -2 * dqdci; // dwdot[O]/d[O]
    J[86] += dqdci;      // dwdot[O2]/d[O]
    // d()/d[H2O]
    dqdci = (15.4 - 1) * q_nocor;
    J[140] += -2 * dqdci; // dwdot[O]/d[H2O]
    J[146] += dqdci;      // dwdot[O2]/d[H2O]
    // d()/d[CO]
    dqdci = (1.75 - 1) * q_nocor;
    J[155] += -2 * dqdci; // dwdot[O]/d[CO]
    J[161] += dqdci;      // dwdot[O2]/d[CO]
    // d()/d[O2]
    dqdci = -k_r;
    J[170] += -2 * dqdci; // dwdot[O]/d[O2]
    J[176] += dqdci;      // dwdot[O2]/d[O2]
    // d()/d[CO2]
    dqdci = (3.6 - 1) * q_nocor;
    J[200] += -2 * dqdci; // dwdot[O]/d[CO2]
    J[206] += dqdci;      // dwdot[O2]/d[CO2]
  } else {
    dqdc[0] = 2.4 * q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = 0.83 * q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = 0.83 * q_nocor;
    dqdc[5] = q_nocor + k_f * 2.000000 * sc[5];
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = 15.4 * q_nocor;
    dqdc[10] = 1.75 * q_nocor;
    dqdc[11] = q_nocor - k_r;
    dqdc[12] = q_nocor;
    dqdc[13] = 3.6 * q_nocor;
    for (int k = 0; k < 14; k++) {
      J[15 * k + 5] += -2 * dqdc[k];
      J[15 * k + 11] += dqdc[k];
    }
  }
  J[215] += -2 * dqdT; // dwdot[O]/dT
  J[221] += dqdT;      // dwdot[O2]/dT

  // reaction 35: HCO + M <=> CO + H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (0 - 1) * sc[9] + (1.75 - 1) * sc[10] +
          (3.6 - 1) * sc[13];
  // forward
  phi_f = sc[7];
  k_f = 187000000000 * exp(-1 * tc[0] - (8554.68331868023) * invT);
  dlnkfdT = -1 * invT + (8554.68331868023) * invT2;
  // reverse
  phi_r = sc[1] * sc[10];
  Kc = refC * exp(-g_RT[1] + g_RT[7] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7]) + (h_RT[1] + h_RT[10]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[7] -= q;  // HCO
  wdot[10] += q; // CO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[1] += dqdci;  // dwdot[H]/d[H2]
    J[7] -= dqdci;  // dwdot[HCO]/d[H2]
    J[10] += dqdci; // dwdot[CO]/d[H2]
    // d()/d[H]
    dqdci = -k_r * sc[10];
    J[16] += dqdci; // dwdot[H]/d[H]
    J[22] -= dqdci; // dwdot[HCO]/d[H]
    J[25] += dqdci; // dwdot[CO]/d[H]
    // d()/d[HCO]
    dqdci = +k_f;
    J[106] += dqdci; // dwdot[H]/d[HCO]
    J[112] -= dqdci; // dwdot[HCO]/d[HCO]
    J[115] += dqdci; // dwdot[CO]/d[HCO]
    // d()/d[H2O]
    dqdci = (0 - 1) * q_nocor;
    J[136] += dqdci; // dwdot[H]/d[H2O]
    J[142] -= dqdci; // dwdot[HCO]/d[H2O]
    J[145] += dqdci; // dwdot[CO]/d[H2O]
    // d()/d[CO]
    dqdci = (1.75 - 1) * q_nocor - k_r * sc[1];
    J[151] += dqdci; // dwdot[H]/d[CO]
    J[157] -= dqdci; // dwdot[HCO]/d[CO]
    J[160] += dqdci; // dwdot[CO]/d[CO]
    // d()/d[CO2]
    dqdci = (3.6 - 1) * q_nocor;
    J[196] += dqdci; // dwdot[H]/d[CO2]
    J[202] -= dqdci; // dwdot[HCO]/d[CO2]
    J[205] += dqdci; // dwdot[CO]/d[CO2]
  } else {
    dqdc[0] = 2 * q_nocor;
    dqdc[1] = q_nocor - k_r * sc[10];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor + k_f;
    dqdc[8] = q_nocor;
    dqdc[10] = 1.75 * q_nocor - k_r * sc[1];
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 3.6 * q_nocor;
    for (int k = 0; k < 14; k++) {
      J[15 * k + 1] += dqdc[k];
      J[15 * k + 7] -= dqdc[k];
      J[15 * k + 10] += dqdc[k];
    }
  }
  J[211] += dqdT; // dwdot[H]/dT
  J[217] -= dqdT; // dwdot[HCO]/dT
  J[220] += dqdT; // dwdot[CO]/dT

  // reaction 36: HCO + H2O <=> CO + H + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[9];
  k_f = 2244000000000 * exp(-1 * tc[0] - (8554.68331868023) * invT);
  dlnkfdT = -1 * invT + (8554.68331868023) * invT2;
  // reverse
  phi_r = sc[1] * sc[9] * sc[10];
  Kc = refC * exp(-g_RT[1] + g_RT[7] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[7] + h_RT[9]) + (h_RT[1] + h_RT[9] + h_RT[10]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[7] -= q;  // HCO
  wdot[10] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[9] * sc[10];
  J[16] += dqdci; // dwdot[H]/d[H]
  J[22] -= dqdci; // dwdot[HCO]/d[H]
  J[25] += dqdci; // dwdot[CO]/d[H]
  // d()/d[HCO]
  dqdci = +k_f * sc[9];
  J[106] += dqdci; // dwdot[H]/d[HCO]
  J[112] -= dqdci; // dwdot[HCO]/d[HCO]
  J[115] += dqdci; // dwdot[CO]/d[HCO]
  // d()/d[H2O]
  dqdci = +k_f * sc[7] - k_r * sc[1] * sc[10];
  J[136] += dqdci; // dwdot[H]/d[H2O]
  J[142] -= dqdci; // dwdot[HCO]/d[H2O]
  J[145] += dqdci; // dwdot[CO]/d[H2O]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * sc[9];
  J[151] += dqdci; // dwdot[H]/d[CO]
  J[157] -= dqdci; // dwdot[HCO]/d[CO]
  J[160] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[211] += dqdT; // dwdot[H]/dT
  J[217] -= dqdT; // dwdot[HCO]/dT
  J[220] += dqdT; // dwdot[CO]/dT

  // reaction 0: H + O2 <=> O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 26440000000 * exp(-0.6707 * tc[0] - (8575.31520197823) * invT);
  dlnkfdT = -0.6707 * invT + (8575.31520197823) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[6] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[11]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // O
  wdot[6] += q;  // OH
  wdot[11] -= q; // O2
  // d()/d[H]
  dqdci = +k_f * sc[11];
  J[16] -= dqdci; // dwdot[H]/d[H]
  J[20] += dqdci; // dwdot[O]/d[H]
  J[21] += dqdci; // dwdot[OH]/d[H]
  J[26] -= dqdci; // dwdot[O2]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[6];
  J[76] -= dqdci; // dwdot[H]/d[O]
  J[80] += dqdci; // dwdot[O]/d[O]
  J[81] += dqdci; // dwdot[OH]/d[O]
  J[86] -= dqdci; // dwdot[O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[5];
  J[91] -= dqdci;  // dwdot[H]/d[OH]
  J[95] += dqdci;  // dwdot[O]/d[OH]
  J[96] += dqdci;  // dwdot[OH]/d[OH]
  J[101] -= dqdci; // dwdot[O2]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[1];
  J[166] -= dqdci; // dwdot[H]/d[O2]
  J[170] += dqdci; // dwdot[O]/d[O2]
  J[171] += dqdci; // dwdot[OH]/d[O2]
  J[176] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[211] -= dqdT; // dwdot[H]/dT
  J[215] += dqdT; // dwdot[O]/dT
  J[216] += dqdT; // dwdot[OH]/dT
  J[221] -= dqdT; // dwdot[O2]/dT

  // reaction 1: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[5];
  k_f = 0.04589 * exp(2.7 * tc[0] - (3150.13632793755) * invT);
  dlnkfdT = 2.7 * invT + (3150.13632793755) * invT2;
  // reverse
  phi_r = sc[1] * sc[6];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[5] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[5]) + (h_RT[1] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // H2
  wdot[1] += q; // H
  wdot[5] -= q; // O
  wdot[6] += q; // OH
  // d()/d[H2]
  dqdci = +k_f * sc[5];
  J[0] -= dqdci; // dwdot[H2]/d[H2]
  J[1] += dqdci; // dwdot[H]/d[H2]
  J[5] -= dqdci; // dwdot[O]/d[H2]
  J[6] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[6];
  J[15] -= dqdci; // dwdot[H2]/d[H]
  J[16] += dqdci; // dwdot[H]/d[H]
  J[20] -= dqdci; // dwdot[O]/d[H]
  J[21] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[0];
  J[75] -= dqdci; // dwdot[H2]/d[O]
  J[76] += dqdci; // dwdot[H]/d[O]
  J[80] -= dqdci; // dwdot[O]/d[O]
  J[81] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[1];
  J[90] -= dqdci; // dwdot[H2]/d[OH]
  J[91] += dqdci; // dwdot[H]/d[OH]
  J[95] -= dqdci; // dwdot[O]/d[OH]
  J[96] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[210] -= dqdT; // dwdot[H2]/dT
  J[211] += dqdT; // dwdot[H]/dT
  J[215] -= dqdT; // dwdot[O]/dT
  J[216] += dqdT; // dwdot[OH]/dT

  // reaction 2: H2 + OH <=> H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[6];
  k_f = 173.4 * exp(1.51 * tc[0] - (1726.03316371019) * invT);
  dlnkfdT = 1.51 * invT + (1726.03316371019) * invT2;
  // reverse
  phi_r = sc[1] * sc[9];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[6] - g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[6]) + (h_RT[1] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // H2
  wdot[1] += q; // H
  wdot[6] -= q; // OH
  wdot[9] += q; // H2O
  // d()/d[H2]
  dqdci = +k_f * sc[6];
  J[0] -= dqdci; // dwdot[H2]/d[H2]
  J[1] += dqdci; // dwdot[H]/d[H2]
  J[6] -= dqdci; // dwdot[OH]/d[H2]
  J[9] += dqdci; // dwdot[H2O]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[9];
  J[15] -= dqdci; // dwdot[H2]/d[H]
  J[16] += dqdci; // dwdot[H]/d[H]
  J[21] -= dqdci; // dwdot[OH]/d[H]
  J[24] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[0];
  J[90] -= dqdci; // dwdot[H2]/d[OH]
  J[91] += dqdci; // dwdot[H]/d[OH]
  J[96] -= dqdci; // dwdot[OH]/d[OH]
  J[99] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[1];
  J[135] -= dqdci; // dwdot[H2]/d[H2O]
  J[136] += dqdci; // dwdot[H]/d[H2O]
  J[141] -= dqdci; // dwdot[OH]/d[H2O]
  J[144] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[210] -= dqdT; // dwdot[H2]/dT
  J[211] += dqdT; // dwdot[H]/dT
  J[216] -= dqdT; // dwdot[OH]/dT
  J[219] += dqdT; // dwdot[H2O]/dT

  // reaction 3: 2 OH <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[6] * sc[6]);
  k_f = 0.03973 * exp(2.4 * tc[0] - (-1061.78716484796) * invT);
  dlnkfdT = 2.4 * invT + (-1061.78716484796) * invT2;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(-g_RT[5] + 2.000000 * g_RT[6] - g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[6]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;     // O
  wdot[6] -= 2 * q; // OH
  wdot[9] += q;     // H2O
  // d()/d[O]
  dqdci = -k_r * sc[9];
  J[80] += dqdci;      // dwdot[O]/d[O]
  J[81] += -2 * dqdci; // dwdot[OH]/d[O]
  J[84] += dqdci;      // dwdot[H2O]/d[O]
  // d()/d[OH]
  dqdci = +k_f * 2.000000 * sc[6];
  J[95] += dqdci;      // dwdot[O]/d[OH]
  J[96] += -2 * dqdci; // dwdot[OH]/d[OH]
  J[99] += dqdci;      // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[5];
  J[140] += dqdci;      // dwdot[O]/d[H2O]
  J[141] += -2 * dqdci; // dwdot[OH]/d[H2O]
  J[144] += dqdci;      // dwdot[H2O]/d[H2O]
  // d()/dT
  J[215] += dqdT;      // dwdot[O]/dT
  J[216] += -2 * dqdT; // dwdot[OH]/dT
  J[219] += dqdT;      // dwdot[H2O]/dT

  // reaction 12: H2 + O2 <=> H + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[11];
  k_f = 0.5916 * exp(2.433 * tc[0] - (26923.0980538841) * invT);
  dlnkfdT = 2.433 * invT + (26923.0980538841) * invT2;
  // reverse
  phi_r = sc[1] * sc[8];
  Kc = exp(g_RT[0] - g_RT[1] - g_RT[8] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[11]) + (h_RT[1] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[8] += q;  // HO2
  wdot[11] -= q; // O2
  // d()/d[H2]
  dqdci = +k_f * sc[11];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[8] += dqdci;  // dwdot[HO2]/d[H2]
  J[11] -= dqdci; // dwdot[O2]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[8];
  J[15] -= dqdci; // dwdot[H2]/d[H]
  J[16] += dqdci; // dwdot[H]/d[H]
  J[23] += dqdci; // dwdot[HO2]/d[H]
  J[26] -= dqdci; // dwdot[O2]/d[H]
  // d()/d[HO2]
  dqdci = -k_r * sc[1];
  J[120] -= dqdci; // dwdot[H2]/d[HO2]
  J[121] += dqdci; // dwdot[H]/d[HO2]
  J[128] += dqdci; // dwdot[HO2]/d[HO2]
  J[131] -= dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[0];
  J[165] -= dqdci; // dwdot[H2]/d[O2]
  J[166] += dqdci; // dwdot[H]/d[O2]
  J[173] += dqdci; // dwdot[HO2]/d[O2]
  J[176] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[210] -= dqdT; // dwdot[H2]/dT
  J[211] += dqdT; // dwdot[H]/dT
  J[218] += dqdT; // dwdot[HO2]/dT
  J[221] -= dqdT; // dwdot[O2]/dT

  // reaction 14: H + HO2 <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[8];
  k_f = 3970000 * exp(-(337.658382754967) * invT);
  dlnkfdT = (337.658382754967) * invT2;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(g_RT[1] - g_RT[5] + g_RT[8] - g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[8]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[5] += q; // O
  wdot[8] -= q; // HO2
  wdot[9] += q; // H2O
  // d()/d[H]
  dqdci = +k_f * sc[8];
  J[16] -= dqdci; // dwdot[H]/d[H]
  J[20] += dqdci; // dwdot[O]/d[H]
  J[23] -= dqdci; // dwdot[HO2]/d[H]
  J[24] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[9];
  J[76] -= dqdci; // dwdot[H]/d[O]
  J[80] += dqdci; // dwdot[O]/d[O]
  J[83] -= dqdci; // dwdot[HO2]/d[O]
  J[84] += dqdci; // dwdot[H2O]/d[O]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[121] -= dqdci; // dwdot[H]/d[HO2]
  J[125] += dqdci; // dwdot[O]/d[HO2]
  J[128] -= dqdci; // dwdot[HO2]/d[HO2]
  J[129] += dqdci; // dwdot[H2O]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[5];
  J[136] -= dqdci; // dwdot[H]/d[H2O]
  J[140] += dqdci; // dwdot[O]/d[H2O]
  J[143] -= dqdci; // dwdot[HO2]/d[H2O]
  J[144] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[211] -= dqdT; // dwdot[H]/dT
  J[215] += dqdT; // dwdot[O]/dT
  J[218] -= dqdT; // dwdot[HO2]/dT
  J[219] += dqdT; // dwdot[H2O]/dT

  // reaction 15: H + HO2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[8];
  k_f = 74850000 * exp(-(148.448916412392) * invT);
  dlnkfdT = (148.448916412392) * invT2;
  // reverse
  phi_r = (sc[6] * sc[6]);
  Kc = exp(g_RT[1] - 2.000000 * g_RT[6] + g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[8]) + (2.000000 * h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;     // H
  wdot[6] += 2 * q; // OH
  wdot[8] -= q;     // HO2
  // d()/d[H]
  dqdci = +k_f * sc[8];
  J[16] -= dqdci;     // dwdot[H]/d[H]
  J[21] += 2 * dqdci; // dwdot[OH]/d[H]
  J[23] -= dqdci;     // dwdot[HO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[6];
  J[91] -= dqdci;     // dwdot[H]/d[OH]
  J[96] += 2 * dqdci; // dwdot[OH]/d[OH]
  J[98] -= dqdci;     // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[121] -= dqdci;     // dwdot[H]/d[HO2]
  J[126] += 2 * dqdci; // dwdot[OH]/d[HO2]
  J[128] -= dqdci;     // dwdot[HO2]/d[HO2]
  // d()/dT
  J[211] -= dqdT;     // dwdot[H]/dT
  J[216] += 2 * dqdT; // dwdot[OH]/dT
  J[218] -= dqdT;     // dwdot[HO2]/dT

  // reaction 16: HO2 + O <=> O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[8];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[11];
  Kc = exp(g_RT[5] - g_RT[6] + g_RT[8] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[8]) + (h_RT[6] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // O
  wdot[6] += q;  // OH
  wdot[8] -= q;  // HO2
  wdot[11] += q; // O2
  // d()/d[O]
  dqdci = +k_f * sc[8];
  J[80] -= dqdci; // dwdot[O]/d[O]
  J[81] += dqdci; // dwdot[OH]/d[O]
  J[83] -= dqdci; // dwdot[HO2]/d[O]
  J[86] += dqdci; // dwdot[O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[95] -= dqdci;  // dwdot[O]/d[OH]
  J[96] += dqdci;  // dwdot[OH]/d[OH]
  J[98] -= dqdci;  // dwdot[HO2]/d[OH]
  J[101] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[5];
  J[125] -= dqdci; // dwdot[O]/d[HO2]
  J[126] += dqdci; // dwdot[OH]/d[HO2]
  J[128] -= dqdci; // dwdot[HO2]/d[HO2]
  J[131] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[6];
  J[170] -= dqdci; // dwdot[O]/d[O2]
  J[171] += dqdci; // dwdot[OH]/d[O2]
  J[173] -= dqdci; // dwdot[HO2]/d[O2]
  J[176] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[215] -= dqdT; // dwdot[O]/dT
  J[216] += dqdT; // dwdot[OH]/dT
  J[218] -= dqdT; // dwdot[HO2]/dT
  J[221] += dqdT; // dwdot[O2]/dT

  // reaction 17: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[8];
  k_f = 23750000 * exp(-(-251.60833290236) * invT);
  dlnkfdT = (-251.60833290236) * invT2;
  // reverse
  phi_r = sc[9] * sc[11];
  Kc = exp(g_RT[6] + g_RT[8] - g_RT[9] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[8]) + (h_RT[9] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // OH
  wdot[8] -= q;  // HO2
  wdot[9] += q;  // H2O
  wdot[11] += q; // O2
  // d()/d[OH]
  dqdci = +k_f * sc[8];
  J[96] -= dqdci;  // dwdot[OH]/d[OH]
  J[98] -= dqdci;  // dwdot[HO2]/d[OH]
  J[99] += dqdci;  // dwdot[H2O]/d[OH]
  J[101] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[6];
  J[126] -= dqdci; // dwdot[OH]/d[HO2]
  J[128] -= dqdci; // dwdot[HO2]/d[HO2]
  J[129] += dqdci; // dwdot[H2O]/d[HO2]
  J[131] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[141] -= dqdci; // dwdot[OH]/d[H2O]
  J[143] -= dqdci; // dwdot[HO2]/d[H2O]
  J[144] += dqdci; // dwdot[H2O]/d[H2O]
  J[146] += dqdci; // dwdot[O2]/d[H2O]
  // d()/d[O2]
  dqdci = -k_r * sc[9];
  J[171] -= dqdci; // dwdot[OH]/d[O2]
  J[173] -= dqdci; // dwdot[HO2]/d[O2]
  J[174] += dqdci; // dwdot[H2O]/d[O2]
  J[176] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[216] -= dqdT; // dwdot[OH]/dT
  J[218] -= dqdT; // dwdot[HO2]/dT
  J[219] += dqdT; // dwdot[H2O]/dT
  J[221] += dqdT; // dwdot[O2]/dT

  // reaction 18: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[8];
  k_f = 10000000000 * exp(-(8720.74481839579) * invT);
  dlnkfdT = (8720.74481839579) * invT2;
  // reverse
  phi_r = sc[9] * sc[11];
  Kc = exp(g_RT[6] + g_RT[8] - g_RT[9] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[8]) + (h_RT[9] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // OH
  wdot[8] -= q;  // HO2
  wdot[9] += q;  // H2O
  wdot[11] += q; // O2
  // d()/d[OH]
  dqdci = +k_f * sc[8];
  J[96] -= dqdci;  // dwdot[OH]/d[OH]
  J[98] -= dqdci;  // dwdot[HO2]/d[OH]
  J[99] += dqdci;  // dwdot[H2O]/d[OH]
  J[101] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[6];
  J[126] -= dqdci; // dwdot[OH]/d[HO2]
  J[128] -= dqdci; // dwdot[HO2]/d[HO2]
  J[129] += dqdci; // dwdot[H2O]/d[HO2]
  J[131] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[141] -= dqdci; // dwdot[OH]/d[H2O]
  J[143] -= dqdci; // dwdot[HO2]/d[H2O]
  J[144] += dqdci; // dwdot[H2O]/d[H2O]
  J[146] += dqdci; // dwdot[O2]/d[H2O]
  // d()/d[O2]
  dqdci = -k_r * sc[9];
  J[171] -= dqdci; // dwdot[OH]/d[O2]
  J[173] -= dqdci; // dwdot[HO2]/d[O2]
  J[174] += dqdci; // dwdot[H2O]/d[O2]
  J[176] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[216] -= dqdT; // dwdot[OH]/dT
  J[218] -= dqdT; // dwdot[HO2]/dT
  J[219] += dqdT; // dwdot[H2O]/dT
  J[221] += dqdT; // dwdot[O2]/dT

  // reaction 19: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[8] * sc[8]);
  k_f = 130000 * exp(-(-820.243165261693) * invT);
  dlnkfdT = (-820.243165261693) * invT2;
  // reverse
  phi_r = sc[11] * sc[12];
  Kc = exp(2.000000 * g_RT[8] - g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[8]) + (h_RT[11] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= 2 * q; // HO2
  wdot[11] += q;    // O2
  wdot[12] += q;    // H2O2
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[8];
  J[128] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[131] += dqdci;      // dwdot[O2]/d[HO2]
  J[132] += dqdci;      // dwdot[H2O2]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[12];
  J[173] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[176] += dqdci;      // dwdot[O2]/d[O2]
  J[177] += dqdci;      // dwdot[H2O2]/d[O2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[11];
  J[188] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[191] += dqdci;      // dwdot[O2]/d[H2O2]
  J[192] += dqdci;      // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[218] += -2 * dqdT; // dwdot[HO2]/dT
  J[221] += dqdT;      // dwdot[O2]/dT
  J[222] += dqdT;      // dwdot[H2O2]/dT

  // reaction 20: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[8] * sc[8]);
  k_f = 365800000 * exp(-(6038.59998965664) * invT);
  dlnkfdT = (6038.59998965664) * invT2;
  // reverse
  phi_r = sc[11] * sc[12];
  Kc = exp(2.000000 * g_RT[8] - g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[8]) + (h_RT[11] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= 2 * q; // HO2
  wdot[11] += q;    // O2
  wdot[12] += q;    // H2O2
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[8];
  J[128] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[131] += dqdci;      // dwdot[O2]/d[HO2]
  J[132] += dqdci;      // dwdot[H2O2]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[12];
  J[173] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[176] += dqdci;      // dwdot[O2]/d[O2]
  J[177] += dqdci;      // dwdot[H2O2]/d[O2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[11];
  J[188] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[191] += dqdci;      // dwdot[O2]/d[H2O2]
  J[192] += dqdci;      // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[218] += -2 * dqdT; // dwdot[HO2]/dT
  J[221] += dqdT;      // dwdot[O2]/dT
  J[222] += dqdT;      // dwdot[H2O2]/dT

  // reaction 21: H + H2O2 <=> H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[12];
  k_f = 6.05 * exp(2 * tc[0] - (2616.72666218454) * invT);
  dlnkfdT = 2 * invT + (2616.72666218454) * invT2;
  // reverse
  phi_r = sc[0] * sc[8];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[8] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[12]) + (h_RT[0] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[8] += q;  // HO2
  wdot[12] -= q; // H2O2
  // d()/d[H2]
  dqdci = -k_r * sc[8];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[8] += dqdci;  // dwdot[HO2]/d[H2]
  J[12] -= dqdci; // dwdot[H2O2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[12];
  J[15] += dqdci; // dwdot[H2]/d[H]
  J[16] -= dqdci; // dwdot[H]/d[H]
  J[23] += dqdci; // dwdot[HO2]/d[H]
  J[27] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[HO2]
  dqdci = -k_r * sc[0];
  J[120] += dqdci; // dwdot[H2]/d[HO2]
  J[121] -= dqdci; // dwdot[H]/d[HO2]
  J[128] += dqdci; // dwdot[HO2]/d[HO2]
  J[132] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[1];
  J[180] += dqdci; // dwdot[H2]/d[H2O2]
  J[181] -= dqdci; // dwdot[H]/d[H2O2]
  J[188] += dqdci; // dwdot[HO2]/d[H2O2]
  J[192] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[210] += dqdT; // dwdot[H2]/dT
  J[211] -= dqdT; // dwdot[H]/dT
  J[218] += dqdT; // dwdot[HO2]/dT
  J[222] -= dqdT; // dwdot[H2O2]/dT

  // reaction 22: H + H2O2 <=> H2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[12];
  k_f = 24100000 * exp(-(1997.77016324474) * invT);
  dlnkfdT = (1997.77016324474) * invT2;
  // reverse
  phi_r = sc[6] * sc[9];
  Kc = exp(g_RT[1] - g_RT[6] - g_RT[9] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[12]) + (h_RT[6] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[6] += q;  // OH
  wdot[9] += q;  // H2O
  wdot[12] -= q; // H2O2
  // d()/d[H]
  dqdci = +k_f * sc[12];
  J[16] -= dqdci; // dwdot[H]/d[H]
  J[21] += dqdci; // dwdot[OH]/d[H]
  J[24] += dqdci; // dwdot[H2O]/d[H]
  J[27] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[9];
  J[91] -= dqdci;  // dwdot[H]/d[OH]
  J[96] += dqdci;  // dwdot[OH]/d[OH]
  J[99] += dqdci;  // dwdot[H2O]/d[OH]
  J[102] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[6];
  J[136] -= dqdci; // dwdot[H]/d[H2O]
  J[141] += dqdci; // dwdot[OH]/d[H2O]
  J[144] += dqdci; // dwdot[H2O]/d[H2O]
  J[147] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[1];
  J[181] -= dqdci; // dwdot[H]/d[H2O2]
  J[186] += dqdci; // dwdot[OH]/d[H2O2]
  J[189] += dqdci; // dwdot[H2O]/d[H2O2]
  J[192] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[211] -= dqdT; // dwdot[H]/dT
  J[216] += dqdT; // dwdot[OH]/dT
  J[219] += dqdT; // dwdot[H2O]/dT
  J[222] -= dqdT; // dwdot[H2O2]/dT

  // reaction 23: H2O2 + O <=> HO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[12];
  k_f = 9.63 * exp(2 * tc[0] - (1997.77016324474) * invT);
  dlnkfdT = 2 * invT + (1997.77016324474) * invT2;
  // reverse
  phi_r = sc[6] * sc[8];
  Kc = exp(g_RT[5] - g_RT[6] - g_RT[8] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[12]) + (h_RT[6] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // O
  wdot[6] += q;  // OH
  wdot[8] += q;  // HO2
  wdot[12] -= q; // H2O2
  // d()/d[O]
  dqdci = +k_f * sc[12];
  J[80] -= dqdci; // dwdot[O]/d[O]
  J[81] += dqdci; // dwdot[OH]/d[O]
  J[83] += dqdci; // dwdot[HO2]/d[O]
  J[87] -= dqdci; // dwdot[H2O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[8];
  J[95] -= dqdci;  // dwdot[O]/d[OH]
  J[96] += dqdci;  // dwdot[OH]/d[OH]
  J[98] += dqdci;  // dwdot[HO2]/d[OH]
  J[102] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[6];
  J[125] -= dqdci; // dwdot[O]/d[HO2]
  J[126] += dqdci; // dwdot[OH]/d[HO2]
  J[128] += dqdci; // dwdot[HO2]/d[HO2]
  J[132] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[5];
  J[185] -= dqdci; // dwdot[O]/d[H2O2]
  J[186] += dqdci; // dwdot[OH]/d[H2O2]
  J[188] += dqdci; // dwdot[HO2]/d[H2O2]
  J[192] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[215] -= dqdT; // dwdot[O]/dT
  J[216] += dqdT; // dwdot[OH]/dT
  J[218] += dqdT; // dwdot[HO2]/dT
  J[222] -= dqdT; // dwdot[H2O2]/dT

  // reaction 24: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[12];
  k_f = 2000000 * exp(-(214.873516298615) * invT);
  dlnkfdT = (214.873516298615) * invT2;
  // reverse
  phi_r = sc[8] * sc[9];
  Kc = exp(g_RT[6] - g_RT[8] - g_RT[9] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[12]) + (h_RT[8] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // OH
  wdot[8] += q;  // HO2
  wdot[9] += q;  // H2O
  wdot[12] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[96] -= dqdci;  // dwdot[OH]/d[OH]
  J[98] += dqdci;  // dwdot[HO2]/d[OH]
  J[99] += dqdci;  // dwdot[H2O]/d[OH]
  J[102] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[9];
  J[126] -= dqdci; // dwdot[OH]/d[HO2]
  J[128] += dqdci; // dwdot[HO2]/d[HO2]
  J[129] += dqdci; // dwdot[H2O]/d[HO2]
  J[132] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[8];
  J[141] -= dqdci; // dwdot[OH]/d[H2O]
  J[143] += dqdci; // dwdot[HO2]/d[H2O]
  J[144] += dqdci; // dwdot[H2O]/d[H2O]
  J[147] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[6];
  J[186] -= dqdci; // dwdot[OH]/d[H2O2]
  J[188] += dqdci; // dwdot[HO2]/d[H2O2]
  J[189] += dqdci; // dwdot[H2O]/d[H2O2]
  J[192] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[216] -= dqdT; // dwdot[OH]/dT
  J[218] += dqdT; // dwdot[HO2]/dT
  J[219] += dqdT; // dwdot[H2O]/dT
  J[222] -= dqdT; // dwdot[H2O2]/dT

  // reaction 25: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[12];
  k_f = 2.67e+35 * exp(-7 * tc[0] - (18920.9466342575) * invT);
  dlnkfdT = -7 * invT + (18920.9466342575) * invT2;
  // reverse
  phi_r = sc[8] * sc[9];
  Kc = exp(g_RT[6] - g_RT[8] - g_RT[9] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[12]) + (h_RT[8] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // OH
  wdot[8] += q;  // HO2
  wdot[9] += q;  // H2O
  wdot[12] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[96] -= dqdci;  // dwdot[OH]/d[OH]
  J[98] += dqdci;  // dwdot[HO2]/d[OH]
  J[99] += dqdci;  // dwdot[H2O]/d[OH]
  J[102] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[9];
  J[126] -= dqdci; // dwdot[OH]/d[HO2]
  J[128] += dqdci; // dwdot[HO2]/d[HO2]
  J[129] += dqdci; // dwdot[H2O]/d[HO2]
  J[132] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[8];
  J[141] -= dqdci; // dwdot[OH]/d[H2O]
  J[143] += dqdci; // dwdot[HO2]/d[H2O]
  J[144] += dqdci; // dwdot[H2O]/d[H2O]
  J[147] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[6];
  J[186] -= dqdci; // dwdot[OH]/d[H2O2]
  J[188] += dqdci; // dwdot[HO2]/d[H2O2]
  J[189] += dqdci; // dwdot[H2O]/d[H2O2]
  J[192] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[216] -= dqdT; // dwdot[OH]/dT
  J[218] += dqdT; // dwdot[HO2]/dT
  J[219] += dqdT; // dwdot[H2O]/dT
  J[222] -= dqdT; // dwdot[H2O2]/dT

  // reaction 27: CO + OH <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[10];
  k_f = 800000 * exp(0.14 * tc[0] - (3699.6489269963) * invT);
  dlnkfdT = 0.14 * invT + (3699.6489269963) * invT2;
  // reverse
  phi_r = sc[1] * sc[13];
  Kc = exp(-g_RT[1] + g_RT[6] + g_RT[10] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[10]) + (h_RT[1] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[6] -= q;  // OH
  wdot[10] -= q; // CO
  wdot[13] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[13];
  J[16] += dqdci; // dwdot[H]/d[H]
  J[21] -= dqdci; // dwdot[OH]/d[H]
  J[25] -= dqdci; // dwdot[CO]/d[H]
  J[28] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[91] += dqdci;  // dwdot[H]/d[OH]
  J[96] -= dqdci;  // dwdot[OH]/d[OH]
  J[100] -= dqdci; // dwdot[CO]/d[OH]
  J[103] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[CO]
  dqdci = +k_f * sc[6];
  J[151] += dqdci; // dwdot[H]/d[CO]
  J[156] -= dqdci; // dwdot[OH]/d[CO]
  J[160] -= dqdci; // dwdot[CO]/d[CO]
  J[163] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[1];
  J[196] += dqdci; // dwdot[H]/d[CO2]
  J[201] -= dqdci; // dwdot[OH]/d[CO2]
  J[205] -= dqdci; // dwdot[CO]/d[CO2]
  J[208] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[211] += dqdT; // dwdot[H]/dT
  J[216] -= dqdT; // dwdot[OH]/dT
  J[220] -= dqdT; // dwdot[CO]/dT
  J[223] += dqdT; // dwdot[CO2]/dT

  // reaction 28: CO + OH <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[10];
  k_f = 87840 * exp(0.03 * tc[0] - (-8.05146665287551) * invT);
  dlnkfdT = 0.03 * invT + (-8.05146665287551) * invT2;
  // reverse
  phi_r = sc[1] * sc[13];
  Kc = exp(-g_RT[1] + g_RT[6] + g_RT[10] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[10]) + (h_RT[1] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[6] -= q;  // OH
  wdot[10] -= q; // CO
  wdot[13] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[13];
  J[16] += dqdci; // dwdot[H]/d[H]
  J[21] -= dqdci; // dwdot[OH]/d[H]
  J[25] -= dqdci; // dwdot[CO]/d[H]
  J[28] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[91] += dqdci;  // dwdot[H]/d[OH]
  J[96] -= dqdci;  // dwdot[OH]/d[OH]
  J[100] -= dqdci; // dwdot[CO]/d[OH]
  J[103] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[CO]
  dqdci = +k_f * sc[6];
  J[151] += dqdci; // dwdot[H]/d[CO]
  J[156] -= dqdci; // dwdot[OH]/d[CO]
  J[160] -= dqdci; // dwdot[CO]/d[CO]
  J[163] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[1];
  J[196] += dqdci; // dwdot[H]/d[CO2]
  J[201] -= dqdci; // dwdot[OH]/d[CO2]
  J[205] -= dqdci; // dwdot[CO]/d[CO2]
  J[208] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[211] += dqdT; // dwdot[H]/dT
  J[216] -= dqdT; // dwdot[OH]/dT
  J[220] -= dqdT; // dwdot[CO]/dT
  J[223] += dqdT; // dwdot[CO2]/dT

  // reaction 29: CO + O2 <=> CO2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[11];
  k_f = 1119000 * exp(-(24003.4349588851) * invT);
  dlnkfdT = (24003.4349588851) * invT2;
  // reverse
  phi_r = sc[5] * sc[13];
  Kc = exp(-g_RT[5] + g_RT[10] + g_RT[11] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[11]) + (h_RT[5] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // O
  wdot[10] -= q; // CO
  wdot[11] -= q; // O2
  wdot[13] += q; // CO2
  // d()/d[O]
  dqdci = -k_r * sc[13];
  J[80] += dqdci; // dwdot[O]/d[O]
  J[85] -= dqdci; // dwdot[CO]/d[O]
  J[86] -= dqdci; // dwdot[O2]/d[O]
  J[88] += dqdci; // dwdot[CO2]/d[O]
  // d()/d[CO]
  dqdci = +k_f * sc[11];
  J[155] += dqdci; // dwdot[O]/d[CO]
  J[160] -= dqdci; // dwdot[CO]/d[CO]
  J[161] -= dqdci; // dwdot[O2]/d[CO]
  J[163] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[O2]
  dqdci = +k_f * sc[10];
  J[170] += dqdci; // dwdot[O]/d[O2]
  J[175] -= dqdci; // dwdot[CO]/d[O2]
  J[176] -= dqdci; // dwdot[O2]/d[O2]
  J[178] += dqdci; // dwdot[CO2]/d[O2]
  // d()/d[CO2]
  dqdci = -k_r * sc[5];
  J[200] += dqdci; // dwdot[O]/d[CO2]
  J[205] -= dqdci; // dwdot[CO]/d[CO2]
  J[206] -= dqdci; // dwdot[O2]/d[CO2]
  J[208] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[215] += dqdT; // dwdot[O]/dT
  J[220] -= dqdT; // dwdot[CO]/dT
  J[221] -= dqdT; // dwdot[O2]/dT
  J[223] += dqdT; // dwdot[CO2]/dT

  // reaction 30: CO + HO2 <=> CO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[10];
  k_f = 30100000 * exp(-(11573.9833135086) * invT);
  dlnkfdT = (11573.9833135086) * invT2;
  // reverse
  phi_r = sc[6] * sc[13];
  Kc = exp(-g_RT[6] + g_RT[8] + g_RT[10] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[10]) + (h_RT[6] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // OH
  wdot[8] -= q;  // HO2
  wdot[10] -= q; // CO
  wdot[13] += q; // CO2
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[96] += dqdci;  // dwdot[OH]/d[OH]
  J[98] -= dqdci;  // dwdot[HO2]/d[OH]
  J[100] -= dqdci; // dwdot[CO]/d[OH]
  J[103] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[126] += dqdci; // dwdot[OH]/d[HO2]
  J[128] -= dqdci; // dwdot[HO2]/d[HO2]
  J[130] -= dqdci; // dwdot[CO]/d[HO2]
  J[133] += dqdci; // dwdot[CO2]/d[HO2]
  // d()/d[CO]
  dqdci = +k_f * sc[8];
  J[156] += dqdci; // dwdot[OH]/d[CO]
  J[158] -= dqdci; // dwdot[HO2]/d[CO]
  J[160] -= dqdci; // dwdot[CO]/d[CO]
  J[163] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[6];
  J[201] += dqdci; // dwdot[OH]/d[CO2]
  J[203] -= dqdci; // dwdot[HO2]/d[CO2]
  J[205] -= dqdci; // dwdot[CO]/d[CO2]
  J[208] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[216] += dqdT; // dwdot[OH]/dT
  J[218] -= dqdT; // dwdot[HO2]/dT
  J[220] -= dqdT; // dwdot[CO]/dT
  J[223] += dqdT; // dwdot[CO2]/dT

  // reaction 31: H + HCO <=> CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[7];
  k_f = 120000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[10];
  Kc = exp(-g_RT[0] + g_RT[1] + g_RT[7] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[0] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[7] -= q;  // HCO
  wdot[10] += q; // CO
  // d()/d[H2]
  dqdci = -k_r * sc[10];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[7] -= dqdci;  // dwdot[HCO]/d[H2]
  J[10] += dqdci; // dwdot[CO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[15] += dqdci; // dwdot[H2]/d[H]
  J[16] -= dqdci; // dwdot[H]/d[H]
  J[22] -= dqdci; // dwdot[HCO]/d[H]
  J[25] += dqdci; // dwdot[CO]/d[H]
  // d()/d[HCO]
  dqdci = +k_f * sc[1];
  J[105] += dqdci; // dwdot[H2]/d[HCO]
  J[106] -= dqdci; // dwdot[H]/d[HCO]
  J[112] -= dqdci; // dwdot[HCO]/d[HCO]
  J[115] += dqdci; // dwdot[CO]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[0];
  J[150] += dqdci; // dwdot[H2]/d[CO]
  J[151] -= dqdci; // dwdot[H]/d[CO]
  J[157] -= dqdci; // dwdot[HCO]/d[CO]
  J[160] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[210] += dqdT; // dwdot[H2]/dT
  J[211] -= dqdT; // dwdot[H]/dT
  J[217] -= dqdT; // dwdot[HCO]/dT
  J[220] += dqdT; // dwdot[CO]/dT

  // reaction 32: HCO + O <=> CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[7];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[10];
  Kc = exp(g_RT[5] - g_RT[6] + g_RT[7] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[7]) + (h_RT[6] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // O
  wdot[6] += q;  // OH
  wdot[7] -= q;  // HCO
  wdot[10] += q; // CO
  // d()/d[O]
  dqdci = +k_f * sc[7];
  J[80] -= dqdci; // dwdot[O]/d[O]
  J[81] += dqdci; // dwdot[OH]/d[O]
  J[82] -= dqdci; // dwdot[HCO]/d[O]
  J[85] += dqdci; // dwdot[CO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[95] -= dqdci;  // dwdot[O]/d[OH]
  J[96] += dqdci;  // dwdot[OH]/d[OH]
  J[97] -= dqdci;  // dwdot[HCO]/d[OH]
  J[100] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[HCO]
  dqdci = +k_f * sc[5];
  J[110] -= dqdci; // dwdot[O]/d[HCO]
  J[111] += dqdci; // dwdot[OH]/d[HCO]
  J[112] -= dqdci; // dwdot[HCO]/d[HCO]
  J[115] += dqdci; // dwdot[CO]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[6];
  J[155] -= dqdci; // dwdot[O]/d[CO]
  J[156] += dqdci; // dwdot[OH]/d[CO]
  J[157] -= dqdci; // dwdot[HCO]/d[CO]
  J[160] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[215] -= dqdT; // dwdot[O]/dT
  J[216] += dqdT; // dwdot[OH]/dT
  J[217] -= dqdT; // dwdot[HCO]/dT
  J[220] += dqdT; // dwdot[CO]/dT

  // reaction 33: HCO + O <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[7];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[13];
  Kc = exp(-g_RT[1] + g_RT[5] + g_RT[7] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[7]) + (h_RT[1] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[5] -= q;  // O
  wdot[7] -= q;  // HCO
  wdot[13] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[13];
  J[16] += dqdci; // dwdot[H]/d[H]
  J[20] -= dqdci; // dwdot[O]/d[H]
  J[22] -= dqdci; // dwdot[HCO]/d[H]
  J[28] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[7];
  J[76] += dqdci; // dwdot[H]/d[O]
  J[80] -= dqdci; // dwdot[O]/d[O]
  J[82] -= dqdci; // dwdot[HCO]/d[O]
  J[88] += dqdci; // dwdot[CO2]/d[O]
  // d()/d[HCO]
  dqdci = +k_f * sc[5];
  J[106] += dqdci; // dwdot[H]/d[HCO]
  J[110] -= dqdci; // dwdot[O]/d[HCO]
  J[112] -= dqdci; // dwdot[HCO]/d[HCO]
  J[118] += dqdci; // dwdot[CO2]/d[HCO]
  // d()/d[CO2]
  dqdci = -k_r * sc[1];
  J[196] += dqdci; // dwdot[H]/d[CO2]
  J[200] -= dqdci; // dwdot[O]/d[CO2]
  J[202] -= dqdci; // dwdot[HCO]/d[CO2]
  J[208] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[211] += dqdT; // dwdot[H]/dT
  J[215] -= dqdT; // dwdot[O]/dT
  J[217] -= dqdT; // dwdot[HCO]/dT
  J[223] += dqdT; // dwdot[CO2]/dT

  // reaction 34: HCO + OH <=> CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[7];
  k_f = 30200000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[9] * sc[10];
  Kc = exp(g_RT[6] + g_RT[7] - g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[7]) + (h_RT[9] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // OH
  wdot[7] -= q;  // HCO
  wdot[9] += q;  // H2O
  wdot[10] += q; // CO
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[96] -= dqdci;  // dwdot[OH]/d[OH]
  J[97] -= dqdci;  // dwdot[HCO]/d[OH]
  J[99] += dqdci;  // dwdot[H2O]/d[OH]
  J[100] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[HCO]
  dqdci = +k_f * sc[6];
  J[111] -= dqdci; // dwdot[OH]/d[HCO]
  J[112] -= dqdci; // dwdot[HCO]/d[HCO]
  J[114] += dqdci; // dwdot[H2O]/d[HCO]
  J[115] += dqdci; // dwdot[CO]/d[HCO]
  // d()/d[H2O]
  dqdci = -k_r * sc[10];
  J[141] -= dqdci; // dwdot[OH]/d[H2O]
  J[142] -= dqdci; // dwdot[HCO]/d[H2O]
  J[144] += dqdci; // dwdot[H2O]/d[H2O]
  J[145] += dqdci; // dwdot[CO]/d[H2O]
  // d()/d[CO]
  dqdci = -k_r * sc[9];
  J[156] -= dqdci; // dwdot[OH]/d[CO]
  J[157] -= dqdci; // dwdot[HCO]/d[CO]
  J[159] += dqdci; // dwdot[H2O]/d[CO]
  J[160] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[216] -= dqdT; // dwdot[OH]/dT
  J[217] -= dqdT; // dwdot[HCO]/dT
  J[219] += dqdT; // dwdot[H2O]/dT
  J[220] += dqdT; // dwdot[CO]/dT

  // reaction 37: HCO + O2 <=> CO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[11];
  k_f = 12040 * exp(0.807 * tc[0] - (-365.838516040031) * invT);
  dlnkfdT = 0.807 * invT + (-365.838516040031) * invT2;
  // reverse
  phi_r = sc[8] * sc[10];
  Kc = exp(g_RT[7] - g_RT[8] - g_RT[10] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[11]) + (h_RT[8] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[7] -= q;  // HCO
  wdot[8] += q;  // HO2
  wdot[10] += q; // CO
  wdot[11] -= q; // O2
  // d()/d[HCO]
  dqdci = +k_f * sc[11];
  J[112] -= dqdci; // dwdot[HCO]/d[HCO]
  J[113] += dqdci; // dwdot[HO2]/d[HCO]
  J[115] += dqdci; // dwdot[CO]/d[HCO]
  J[116] -= dqdci; // dwdot[O2]/d[HCO]
  // d()/d[HO2]
  dqdci = -k_r * sc[10];
  J[127] -= dqdci; // dwdot[HCO]/d[HO2]
  J[128] += dqdci; // dwdot[HO2]/d[HO2]
  J[130] += dqdci; // dwdot[CO]/d[HO2]
  J[131] -= dqdci; // dwdot[O2]/d[HO2]
  // d()/d[CO]
  dqdci = -k_r * sc[8];
  J[157] -= dqdci; // dwdot[HCO]/d[CO]
  J[158] += dqdci; // dwdot[HO2]/d[CO]
  J[160] += dqdci; // dwdot[CO]/d[CO]
  J[161] -= dqdci; // dwdot[O2]/d[CO]
  // d()/d[O2]
  dqdci = +k_f * sc[7];
  J[172] -= dqdci; // dwdot[HCO]/d[O2]
  J[173] += dqdci; // dwdot[HO2]/d[O2]
  J[175] += dqdci; // dwdot[CO]/d[O2]
  J[176] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[217] -= dqdT; // dwdot[HCO]/dT
  J[218] += dqdT; // dwdot[HO2]/dT
  J[220] += dqdT; // dwdot[CO]/dT
  J[221] -= dqdT; // dwdot[O2]/dT

  amrex::Real c_R[14], dcRdT[14], e_RT[14];
  amrex::Real* eh_RT;
  if (consP == 1) {
    cp_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    speciesInternalEnergy(e_RT, tc);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 14; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[210 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 14; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 14; ++m) {
      dehmixdc += eh_RT[m] * J[k * 15 + m];
    }
    J[k * 15 + 14] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[224] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
#else
  amrex::Abort();
#endif
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT(
  amrex::Real* J,
  const amrex::Real* sc,
  const amrex::Real* Tp,
  const int* consP)
{
  amrex::Real c[14];

  for (int k = 0; k < 14; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian(J, c, *Tp, *consP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 14; k++) {
    J[210 + k] *= 1.e-6;
    J[k * 15 + 14] *= 1.e6;
  }
}

// Transport function declarations

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENIMC(int* LENIMC)
{
  *LENIMC = 59;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENRMC(int* LENRMC)
{
  *LENRMC = 4270;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNO(int* NO)
{
  *NO = 4;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKK(int* KK)
{
  *KK = 14;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLITE(int* NLITE)
{
  *NLITE = 3;
}

// Patm in ergs/cm3
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPATM(amrex::Real* PATM)
{
  *PATM = 0.1013250000000000E+07;
}

// the molecular weights in g/mol
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetWT(amrex::Real* WT)
{
  WT[0] = 2.01600000E+00;
  WT[1] = 1.00800000E+00;
  WT[2] = 3.99500000E+01;
  WT[3] = 2.80140000E+01;
  WT[4] = 4.00260200E+00;
  WT[5] = 1.59990000E+01;
  WT[6] = 1.70070000E+01;
  WT[7] = 2.90180000E+01;
  WT[8] = 3.30060000E+01;
  WT[9] = 1.80150000E+01;
  WT[10] = 2.80100000E+01;
  WT[11] = 3.19980000E+01;
  WT[12] = 3.40140000E+01;
  WT[13] = 4.40090000E+01;
}

// the lennard-jones potential well depth eps/kb in K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetEPS(amrex::Real* EPS)
{
  EPS[0] = 3.80000000E+01;
  EPS[1] = 1.45000000E+02;
  EPS[2] = 1.36500000E+02;
  EPS[3] = 9.75300000E+01;
  EPS[4] = 1.02000000E+01;
  EPS[5] = 8.00000000E+01;
  EPS[6] = 8.00000000E+01;
  EPS[7] = 4.98000000E+02;
  EPS[8] = 1.07400000E+02;
  EPS[9] = 5.72400000E+02;
  EPS[10] = 9.81000000E+01;
  EPS[11] = 1.07400000E+02;
  EPS[12] = 1.07400000E+02;
  EPS[13] = 2.44000000E+02;
}

// the lennard-jones collision diameter in Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetSIG(amrex::Real* SIG)
{
  SIG[0] = 2.92000000E+00;
  SIG[1] = 2.05000000E+00;
  SIG[2] = 3.33000000E+00;
  SIG[3] = 3.62100000E+00;
  SIG[4] = 2.57600000E+00;
  SIG[5] = 2.75000000E+00;
  SIG[6] = 2.75000000E+00;
  SIG[7] = 3.59000000E+00;
  SIG[8] = 3.45800000E+00;
  SIG[9] = 2.60500000E+00;
  SIG[10] = 3.65000000E+00;
  SIG[11] = 3.45800000E+00;
  SIG[12] = 3.45800000E+00;
  SIG[13] = 3.76300000E+00;
}

// the dipole moment in Debye
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetDIP(amrex::Real* DIP)
{
  DIP[0] = 0.00000000E+00;
  DIP[1] = 0.00000000E+00;
  DIP[2] = 0.00000000E+00;
  DIP[3] = 0.00000000E+00;
  DIP[4] = 0.00000000E+00;
  DIP[5] = 0.00000000E+00;
  DIP[6] = 0.00000000E+00;
  DIP[7] = 0.00000000E+00;
  DIP[8] = 0.00000000E+00;
  DIP[9] = 1.84400000E+00;
  DIP[10] = 0.00000000E+00;
  DIP[11] = 0.00000000E+00;
  DIP[12] = 0.00000000E+00;
  DIP[13] = 0.00000000E+00;
}

// the polarizability in cubic Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPOL(amrex::Real* POL)
{
  POL[0] = 7.90000000E-01;
  POL[1] = 0.00000000E+00;
  POL[2] = 0.00000000E+00;
  POL[3] = 1.76000000E+00;
  POL[4] = 0.00000000E+00;
  POL[5] = 0.00000000E+00;
  POL[6] = 0.00000000E+00;
  POL[7] = 0.00000000E+00;
  POL[8] = 0.00000000E+00;
  POL[9] = 0.00000000E+00;
  POL[10] = 1.95000000E+00;
  POL[11] = 1.60000000E+00;
  POL[12] = 0.00000000E+00;
  POL[13] = 2.65000000E+00;
}

// the rotational relaxation collision number at 298 K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetZROT(amrex::Real* ZROT)
{
  ZROT[0] = 2.80000000E+02;
  ZROT[1] = 0.00000000E+00;
  ZROT[2] = 0.00000000E+00;
  ZROT[3] = 4.00000000E+00;
  ZROT[4] = 0.00000000E+00;
  ZROT[5] = 0.00000000E+00;
  ZROT[6] = 0.00000000E+00;
  ZROT[7] = 0.00000000E+00;
  ZROT[8] = 1.00000000E+00;
  ZROT[9] = 4.00000000E+00;
  ZROT[10] = 1.80000000E+00;
  ZROT[11] = 3.80000000E+00;
  ZROT[12] = 3.80000000E+00;
  ZROT[13] = 2.10000000E+00;
}

// 0: monoatomic, 1: linear, 2: nonlinear
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLIN(int* NLIN)
{
  NLIN[0] = 1;
  NLIN[1] = 0;
  NLIN[2] = 0;
  NLIN[3] = 1;
  NLIN[4] = 0;
  NLIN[5] = 0;
  NLIN[6] = 1;
  NLIN[7] = 2;
  NLIN[8] = 2;
  NLIN[9] = 2;
  NLIN[10] = 1;
  NLIN[11] = 1;
  NLIN[12] = 2;
  NLIN[13] = 1;
}

// Poly fits for the viscosities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFETA(amrex::Real* COFETA)
{
  COFETA[0] = -1.37549291E+01;
  COFETA[1] = 9.65530587E-01;
  COFETA[2] = -4.45720114E-02;
  COFETA[3] = 2.05871810E-03;
  COFETA[4] = -1.98744352E+01;
  COFETA[5] = 3.41660514E+00;
  COFETA[6] = -3.63206306E-01;
  COFETA[7] = 1.58671021E-02;
  COFETA[8] = -1.86067352E+01;
  COFETA[9] = 3.27402596E+00;
  COFETA[10] = -3.45827972E-01;
  COFETA[11] = 1.51622680E-02;
  COFETA[12] = -1.62526676E+01;
  COFETA[13] = 2.24839597E+00;
  COFETA[14] = -2.13428438E-01;
  COFETA[15] = 9.46192413E-03;
  COFETA[16] = -1.11555215E+01;
  COFETA[17] = 2.18772782E-01;
  COFETA[18] = 5.60263799E-02;
  COFETA[19] = -2.36018246E-03;
  COFETA[20] = -1.48001711E+01;
  COFETA[21] = 1.79491990E+00;
  COFETA[22] = -1.54008440E-01;
  COFETA[23] = 6.86719439E-03;
  COFETA[24] = -1.47696217E+01;
  COFETA[25] = 1.79491990E+00;
  COFETA[26] = -1.54008440E-01;
  COFETA[27] = 6.86719439E-03;
  COFETA[28] = -2.11306886E+01;
  COFETA[29] = 3.26961843E+00;
  COFETA[30] = -2.51355092E-01;
  COFETA[31] = 7.35605058E-03;
  COFETA[32] = -1.67963918E+01;
  COFETA[33] = 2.52362554E+00;
  COFETA[34] = -2.49309128E-01;
  COFETA[35] = 1.10211025E-02;
  COFETA[36] = -1.17770995E+01;
  COFETA[37] = -8.26744826E-01;
  COFETA[38] = 3.39009392E-01;
  COFETA[39] = -2.00674472E-02;
  COFETA[40] = -1.63031343E+01;
  COFETA[41] = 2.26143219E+00;
  COFETA[42] = -2.15114671E-01;
  COFETA[43] = 9.53461976E-03;
  COFETA[44] = -1.68118998E+01;
  COFETA[45] = 2.52362554E+00;
  COFETA[46] = -2.49309128E-01;
  COFETA[47] = 1.10211025E-02;
  COFETA[48] = -1.67813504E+01;
  COFETA[49] = 2.52362554E+00;
  COFETA[50] = -2.49309128E-01;
  COFETA[51] = 1.10211025E-02;
  COFETA[52] = -2.36749638E+01;
  COFETA[53] = 4.99775518E+00;
  COFETA[54] = -5.52687718E-01;
  COFETA[55] = 2.34353338E-02;
}

// Poly fits for the conductivities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFLAM(amrex::Real* COFLAM)
{
  COFLAM[0] = 1.15898853E+01;
  COFLAM[1] = -1.52427526E+00;
  COFLAM[2] = 2.72840485E-01;
  COFLAM[3] = -1.03392506E-02;
  COFLAM[4] = -3.24554543E-01;
  COFLAM[5] = 3.41660514E+00;
  COFLAM[6] = -3.63206306E-01;
  COFLAM[7] = 1.58671021E-02;
  COFLAM[8] = -2.73651502E+00;
  COFLAM[9] = 3.27402596E+00;
  COFLAM[10] = -3.45827972E-01;
  COFLAM[11] = 1.51622680E-02;
  COFLAM[12] = 1.15506870E+01;
  COFLAM[13] = -2.91452034E+00;
  COFLAM[14] = 5.55043078E-01;
  COFLAM[15] = -2.75172223E-02;
  COFLAM[16] = 7.01538268E+00;
  COFLAM[17] = 2.18772782E-01;
  COFLAM[18] = 5.60263799E-02;
  COFLAM[19] = -2.36018246E-03;
  COFLAM[20] = 1.98515155E+00;
  COFLAM[21] = 1.79491990E+00;
  COFLAM[22] = -1.54008440E-01;
  COFLAM[23] = 6.86719439E-03;
  COFLAM[24] = 1.60618776E+01;
  COFLAM[25] = -4.10626624E+00;
  COFLAM[26] = 6.63570999E-01;
  COFLAM[27] = -2.97906170E-02;
  COFLAM[28] = 1.71463264E+00;
  COFLAM[29] = -1.73273214E-01;
  COFLAM[30] = 3.32419111E-01;
  COFLAM[31] = -2.31119011E-02;
  COFLAM[32] = 5.56033781E-01;
  COFLAM[33] = 1.59073629E+00;
  COFLAM[34] = -5.28054537E-02;
  COFLAM[35] = 4.07605156E-04;
  COFLAM[36] = 2.28195672E+01;
  COFLAM[37] = -8.72278727E+00;
  COFLAM[38] = 1.49300458E+00;
  COFLAM[39] = -7.41523911E-02;
  COFLAM[40] = 9.92460061E+00;
  COFLAM[41] = -2.28317864E+00;
  COFLAM[42] = 4.73113319E-01;
  COFLAM[43] = -2.40056449E-02;
  COFLAM[44] = -3.01283106E+00;
  COFLAM[45] = 3.37554996E+00;
  COFLAM[46] = -3.43353130E-01;
  COFLAM[47] = 1.51043449E-02;
  COFLAM[48] = 6.27062005E-01;
  COFLAM[49] = 1.43139633E+00;
  COFLAM[50] = 1.80504261E-03;
  COFLAM[51] = -3.55624576E-03;
  COFLAM[52] = -1.24047472E+01;
  COFLAM[53] = 6.34783072E+00;
  COFLAM[54] = -6.37857831E-01;
  COFLAM[55] = 2.37613806E-02;
}

// Poly fits for the diffusion coefficients, dim NO*KK*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFD(amrex::Real* COFD)
{
  COFD[0] = -1.02395385E+01;
  COFD[1] = 2.15403244E+00;
  COFD[2] = -6.97480266E-02;
  COFD[3] = 3.23666871E-03;
  COFD[4] = -1.11808845E+01;
  COFD[5] = 2.66936727E+00;
  COFD[6] = -1.34411514E-01;
  COFD[7] = 5.92957488E-03;
  COFD[8] = -1.20638768E+01;
  COFD[9] = 2.63303536E+00;
  COFD[10] = -1.29792632E-01;
  COFD[11] = 5.73363738E-03;
  COFD[12] = -1.13253618E+01;
  COFD[13] = 2.31195095E+00;
  COFD[14] = -8.63988037E-02;
  COFD[15] = 3.77573452E-03;
  COFD[16] = -9.86430173E+00;
  COFD[17] = 2.05348746E+00;
  COFD[18] = -5.90289007E-02;
  COFD[19] = 2.89596157E-03;
  COFD[20] = -1.06250314E+01;
  COFD[21] = 2.15849701E+00;
  COFD[22] = -6.53886401E-02;
  COFD[23] = 2.81453370E-03;
  COFD[24] = -1.06283588E+01;
  COFD[25] = 2.15849701E+00;
  COFD[26] = -6.53886401E-02;
  COFD[27] = 2.81453370E-03;
  COFD[28] = -1.57161352E+01;
  COFD[29] = 3.96062263E+00;
  COFD[30] = -2.98964970E-01;
  COFD[31] = 1.29322565E-02;
  COFD[32] = -1.15806955E+01;
  COFD[33] = 2.43235504E+00;
  COFD[34] = -1.02890179E-01;
  COFD[35] = 4.52903603E-03;
  COFD[36] = -1.68759075E+01;
  COFD[37] = 4.49460341E+00;
  COFD[38] = -3.64766179E-01;
  COFD[39] = 1.56457173E-02;
  COFD[40] = -1.13541221E+01;
  COFD[41] = 2.31999438E+00;
  COFD[42] = -8.75064804E-02;
  COFD[43] = 3.82656365E-03;
  COFD[44] = -1.15797897E+01;
  COFD[45] = 2.43235504E+00;
  COFD[46] = -1.02890179E-01;
  COFD[47] = 4.52903603E-03;
  COFD[48] = -1.15815492E+01;
  COFD[49] = 2.43235504E+00;
  COFD[50] = -1.02890179E-01;
  COFD[51] = 4.52903603E-03;
  COFD[52] = -1.35545391E+01;
  COFD[53] = 3.13878730E+00;
  COFD[54] = -1.94980335E-01;
  COFD[55] = 8.53744486E-03;
  COFD[56] = -1.11808845E+01;
  COFD[57] = 2.66936727E+00;
  COFD[58] = -1.34411514E-01;
  COFD[59] = 5.92957488E-03;
  COFD[60] = -1.43693219E+01;
  COFD[61] = 4.03992999E+00;
  COFD[62] = -3.08044800E-01;
  COFD[63] = 1.32757775E-02;
  COFD[64] = -1.51208285E+01;
  COFD[65] = 3.99904647E+00;
  COFD[66] = -3.03517220E-01;
  COFD[67] = 1.31117363E-02;
  COFD[68] = -1.40298991E+01;
  COFD[69] = 3.55837688E+00;
  COFD[70] = -2.47785790E-01;
  COFD[71] = 1.07555332E-02;
  COFD[72] = -9.71339666E+00;
  COFD[73] = 2.17561180E+00;
  COFD[74] = -7.28270090E-02;
  COFD[75] = 3.38302182E-03;
  COFD[76] = -1.31860264E+01;
  COFD[77] = 3.38003453E+00;
  COFD[78] = -2.25783856E-01;
  COFD[79] = 9.85028660E-03;
  COFD[80] = -1.31877859E+01;
  COFD[81] = 3.38003453E+00;
  COFD[82] = -2.25783856E-01;
  COFD[83] = 9.85028660E-03;
  COFD[84] = -1.95312879E+01;
  COFD[85] = 5.47046983E+00;
  COFD[86] = -4.74577605E-01;
  COFD[87] = 1.97408822E-02;
  COFD[88] = -1.43717684E+01;
  COFD[89] = 3.70920439E+00;
  COFD[90] = -2.67274113E-01;
  COFD[91] = 1.15967481E-02;
  COFD[92] = -1.93611201E+01;
  COFD[93] = 5.51579726E+00;
  COFD[94] = -4.76061961E-01;
  COFD[95] = 1.96329391E-02;
  COFD[96] = -1.40524219E+01;
  COFD[97] = 3.56261348E+00;
  COFD[98] = -2.48287981E-01;
  COFD[99] = 1.07752947E-02;
  COFD[100] = -1.43713019E+01;
  COFD[101] = 3.70920439E+00;
  COFD[102] = -2.67274113E-01;
  COFD[103] = 1.15967481E-02;
  COFD[104] = -1.43722077E+01;
  COFD[105] = 3.70920439E+00;
  COFD[106] = -2.67274113E-01;
  COFD[107] = 1.15967481E-02;
  COFD[108] = -1.72994129E+01;
  COFD[109] = 4.71931868E+00;
  COFD[110] = -3.91258152E-01;
  COFD[111] = 1.66866639E-02;
  COFD[112] = -1.20638768E+01;
  COFD[113] = 2.63303536E+00;
  COFD[114] = -1.29792632E-01;
  COFD[115] = 5.73363738E-03;
  COFD[116] = -1.51208285E+01;
  COFD[117] = 3.99904647E+00;
  COFD[118] = -3.03517220E-01;
  COFD[119] = 1.31117363E-02;
  COFD[120] = -1.68944987E+01;
  COFD[121] = 3.94346012E+00;
  COFD[122] = -2.96835271E-01;
  COFD[123] = 1.28438696E-02;
  COFD[124] = -1.57236886E+01;
  COFD[125] = 3.51447210E+00;
  COFD[126] = -2.42579007E-01;
  COFD[127] = 1.05506318E-02;
  COFD[128] = -1.08140217E+01;
  COFD[129] = 2.11737538E+00;
  COFD[130] = -6.46167749E-02;
  COFD[131] = 2.99827695E-03;
  COFD[132] = -1.47082519E+01;
  COFD[133] = 3.30683499E+00;
  COFD[134] = -2.16378602E-01;
  COFD[135] = 9.44670561E-03;
  COFD[136] = -1.47298733E+01;
  COFD[137] = 3.30683499E+00;
  COFD[138] = -2.16378602E-01;
  COFD[139] = 9.44670561E-03;
  COFD[140] = -2.11661516E+01;
  COFD[141] = 5.40762714E+00;
  COFD[142] = -4.67856822E-01;
  COFD[143] = 1.95051950E-02;
  COFD[144] = -1.59677756E+01;
  COFD[145] = 3.60186887E+00;
  COFD[146] = -2.53302622E-01;
  COFD[147] = 1.09893496E-02;
  COFD[148] = -2.10785351E+01;
  COFD[149] = 5.51573149E+00;
  COFD[150] = -4.78177665E-01;
  COFD[151] = 1.98082796E-02;
  COFD[152] = -1.57440492E+01;
  COFD[153] = 3.51861272E+00;
  COFD[154] = -2.43068621E-01;
  COFD[155] = 1.05698368E-02;
  COFD[156] = -1.59592241E+01;
  COFD[157] = 3.60186887E+00;
  COFD[158] = -2.53302622E-01;
  COFD[159] = 1.09893496E-02;
  COFD[160] = -1.59759560E+01;
  COFD[161] = 3.60186887E+00;
  COFD[162] = -2.53302622E-01;
  COFD[163] = 1.09893496E-02;
  COFD[164] = -1.90183604E+01;
  COFD[165] = 4.64763677E+00;
  COFD[166] = -3.82799418E-01;
  COFD[167] = 1.63539171E-02;
  COFD[168] = -1.13253618E+01;
  COFD[169] = 2.31195095E+00;
  COFD[170] = -8.63988037E-02;
  COFD[171] = 3.77573452E-03;
  COFD[172] = -1.40298991E+01;
  COFD[173] = 3.55837688E+00;
  COFD[174] = -2.47785790E-01;
  COFD[175] = 1.07555332E-02;
  COFD[176] = -1.57236886E+01;
  COFD[177] = 3.51447210E+00;
  COFD[178] = -2.42579007E-01;
  COFD[179] = 1.05506318E-02;
  COFD[180] = -1.47639411E+01;
  COFD[181] = 3.15955654E+00;
  COFD[182] = -1.97590757E-01;
  COFD[183] = 8.64692156E-03;
  COFD[184] = -1.01976439E+01;
  COFD[185] = 1.83188320E+00;
  COFD[186] = -2.40547456E-02;
  COFD[187] = 1.08399898E-03;
  COFD[188] = -1.38756380E+01;
  COFD[189] = 2.98558426E+00;
  COFD[190] = -1.75507216E-01;
  COFD[191] = 7.71173691E-03;
  COFD[192] = -1.38948654E+01;
  COFD[193] = 2.98558426E+00;
  COFD[194] = -1.75507216E-01;
  COFD[195] = 7.71173691E-03;
  COFD[196] = -2.02052920E+01;
  COFD[197] = 5.10993120E+00;
  COFD[198] = -4.36931630E-01;
  COFD[199] = 1.84677592E-02;
  COFD[200] = -1.50168047E+01;
  COFD[201] = 3.25515933E+00;
  COFD[202] = -2.09710110E-01;
  COFD[203] = 9.15941830E-03;
  COFD[204] = -2.08123331E+01;
  COFD[205] = 5.42470175E+00;
  COFD[206] = -4.69700438E-01;
  COFD[207] = 1.95706912E-02;
  COFD[208] = -1.47850505E+01;
  COFD[209] = 3.16433919E+00;
  COFD[210] = -1.98191564E-01;
  COFD[211] = 8.67209742E-03;
  COFD[212] = -1.50096252E+01;
  COFD[213] = 3.25515933E+00;
  COFD[214] = -2.09710110E-01;
  COFD[215] = 9.15941830E-03;
  COFD[216] = -1.50236540E+01;
  COFD[217] = 3.25515933E+00;
  COFD[218] = -2.09710110E-01;
  COFD[219] = 9.15941830E-03;
  COFD[220] = -1.77350630E+01;
  COFD[221] = 4.19328271E+00;
  COFD[222] = -3.26911461E-01;
  COFD[223] = 1.40520357E-02;
  COFD[224] = -9.86430173E+00;
  COFD[225] = 2.05348746E+00;
  COFD[226] = -5.90289007E-02;
  COFD[227] = 2.89596157E-03;
  COFD[228] = -9.71339666E+00;
  COFD[229] = 2.17561180E+00;
  COFD[230] = -7.28270090E-02;
  COFD[231] = 3.38302182E-03;
  COFD[232] = -1.08140217E+01;
  COFD[233] = 2.11737538E+00;
  COFD[234] = -6.46167749E-02;
  COFD[235] = 2.99827695E-03;
  COFD[236] = -1.01976439E+01;
  COFD[237] = 1.83188320E+00;
  COFD[238] = -2.40547456E-02;
  COFD[239] = 1.08399898E-03;
  COFD[240] = -7.72963456E+00;
  COFD[241] = 1.13864728E+00;
  COFD[242] = 7.22991035E-02;
  COFD[243] = -3.32491895E-03;
  COFD[244] = -9.70779235E+00;
  COFD[245] = 1.77912272E+00;
  COFD[246] = -1.67349571E-02;
  COFD[247] = 7.45446845E-04;
  COFD[248] = -9.71375815E+00;
  COFD[249] = 1.77912272E+00;
  COFD[250] = -1.67349571E-02;
  COFD[251] = 7.45446845E-04;
  COFD[252] = -1.23116537E+01;
  COFD[253] = 2.62312681E+00;
  COFD[254] = -1.28556314E-01;
  COFD[255] = 5.68221707E-03;
  COFD[256] = -1.03327327E+01;
  COFD[257] = 1.90522472E+00;
  COFD[258] = -3.44812795E-02;
  COFD[259] = 1.57640018E-03;
  COFD[260] = -1.21950641E+01;
  COFD[261] = 2.72222246E+00;
  COFD[262] = -1.41335602E-01;
  COFD[263] = 6.23222872E-03;
  COFD[264] = -1.02057326E+01;
  COFD[265] = 1.83104667E+00;
  COFD[266] = -2.39235907E-02;
  COFD[267] = 1.07741763E-03;
  COFD[268] = -1.03310320E+01;
  COFD[269] = 1.90522472E+00;
  COFD[270] = -3.44812795E-02;
  COFD[271] = 1.57640018E-03;
  COFD[272] = -1.03343378E+01;
  COFD[273] = 1.90522472E+00;
  COFD[274] = -3.44812795E-02;
  COFD[275] = 1.57640018E-03;
  COFD[276] = -1.09328513E+01;
  COFD[277] = 2.05651569E+00;
  COFD[278] = -5.19591463E-02;
  COFD[279] = 2.22384771E-03;
  COFD[280] = -1.06250314E+01;
  COFD[281] = 2.15849701E+00;
  COFD[282] = -6.53886401E-02;
  COFD[283] = 2.81453370E-03;
  COFD[284] = -1.31860264E+01;
  COFD[285] = 3.38003453E+00;
  COFD[286] = -2.25783856E-01;
  COFD[287] = 9.85028660E-03;
  COFD[288] = -1.47082519E+01;
  COFD[289] = 3.30683499E+00;
  COFD[290] = -2.16378602E-01;
  COFD[291] = 9.44670561E-03;
  COFD[292] = -1.38756380E+01;
  COFD[293] = 2.98558426E+00;
  COFD[294] = -1.75507216E-01;
  COFD[295] = 7.71173691E-03;
  COFD[296] = -9.70779235E+00;
  COFD[297] = 1.77912272E+00;
  COFD[298] = -1.67349571E-02;
  COFD[299] = 7.45446845E-04;
  COFD[300] = -1.29877255E+01;
  COFD[301] = 2.80841511E+00;
  COFD[302] = -1.52629888E-01;
  COFD[303] = 6.72604927E-03;
  COFD[304] = -1.30027669E+01;
  COFD[305] = 2.80841511E+00;
  COFD[306] = -1.52629888E-01;
  COFD[307] = 6.72604927E-03;
  COFD[308] = -1.91045520E+01;
  COFD[309] = 4.87977047E+00;
  COFD[310] = -4.10448693E-01;
  COFD[311] = 1.74535827E-02;
  COFD[312] = -1.40915944E+01;
  COFD[313] = 3.07458927E+00;
  COFD[314] = -1.86899591E-01;
  COFD[315] = 8.19829781E-03;
  COFD[316] = -1.91096700E+01;
  COFD[317] = 5.02608697E+00;
  COFD[318] = -4.26959993E-01;
  COFD[319] = 1.80709910E-02;
  COFD[320] = -1.39007309E+01;
  COFD[321] = 2.99164244E+00;
  COFD[322] = -1.76293106E-01;
  COFD[323] = 7.74575100E-03;
  COFD[324] = -1.40864784E+01;
  COFD[325] = 3.07458927E+00;
  COFD[326] = -1.86899591E-01;
  COFD[327] = 8.19829781E-03;
  COFD[328] = -1.40964555E+01;
  COFD[329] = 3.07458927E+00;
  COFD[330] = -1.86899591E-01;
  COFD[331] = 8.19829781E-03;
  COFD[332] = -1.67115471E+01;
  COFD[333] = 3.98859394E+00;
  COFD[334] = -3.02316219E-01;
  COFD[335] = 1.30661099E-02;
  COFD[336] = -1.06283588E+01;
  COFD[337] = 2.15849701E+00;
  COFD[338] = -6.53886401E-02;
  COFD[339] = 2.81453370E-03;
  COFD[340] = -1.31877859E+01;
  COFD[341] = 3.38003453E+00;
  COFD[342] = -2.25783856E-01;
  COFD[343] = 9.85028660E-03;
  COFD[344] = -1.47298733E+01;
  COFD[345] = 3.30683499E+00;
  COFD[346] = -2.16378602E-01;
  COFD[347] = 9.44670561E-03;
  COFD[348] = -1.38948654E+01;
  COFD[349] = 2.98558426E+00;
  COFD[350] = -1.75507216E-01;
  COFD[351] = 7.71173691E-03;
  COFD[352] = -9.71375815E+00;
  COFD[353] = 1.77912272E+00;
  COFD[354] = -1.67349571E-02;
  COFD[355] = 7.45446845E-04;
  COFD[356] = -1.30027669E+01;
  COFD[357] = 2.80841511E+00;
  COFD[358] = -1.52629888E-01;
  COFD[359] = 6.72604927E-03;
  COFD[360] = -1.30182749E+01;
  COFD[361] = 2.80841511E+00;
  COFD[362] = -1.52629888E-01;
  COFD[363] = 6.72604927E-03;
  COFD[364] = -1.91240292E+01;
  COFD[365] = 4.87977047E+00;
  COFD[366] = -4.10448693E-01;
  COFD[367] = 1.74535827E-02;
  COFD[368] = -1.41119635E+01;
  COFD[369] = 3.07458927E+00;
  COFD[370] = -1.86899591E-01;
  COFD[371] = 8.19829781E-03;
  COFD[372] = -1.91256173E+01;
  COFD[373] = 5.02608697E+00;
  COFD[374] = -4.26959993E-01;
  COFD[375] = 1.80709910E-02;
  COFD[376] = -1.39199573E+01;
  COFD[377] = 2.99164244E+00;
  COFD[378] = -1.76293106E-01;
  COFD[379] = 7.74575100E-03;
  COFD[380] = -1.41066358E+01;
  COFD[381] = 3.07458927E+00;
  COFD[382] = -1.86899591E-01;
  COFD[383] = 8.19829781E-03;
  COFD[384] = -1.41170278E+01;
  COFD[385] = 3.07458927E+00;
  COFD[386] = -1.86899591E-01;
  COFD[387] = 8.19829781E-03;
  COFD[388] = -1.67337674E+01;
  COFD[389] = 3.98859394E+00;
  COFD[390] = -3.02316219E-01;
  COFD[391] = 1.30661099E-02;
  COFD[392] = -1.57161352E+01;
  COFD[393] = 3.96062263E+00;
  COFD[394] = -2.98964970E-01;
  COFD[395] = 1.29322565E-02;
  COFD[396] = -1.95312879E+01;
  COFD[397] = 5.47046983E+00;
  COFD[398] = -4.74577605E-01;
  COFD[399] = 1.97408822E-02;
  COFD[400] = -2.11661516E+01;
  COFD[401] = 5.40762714E+00;
  COFD[402] = -4.67856822E-01;
  COFD[403] = 1.95051950E-02;
  COFD[404] = -2.02052920E+01;
  COFD[405] = 5.10993120E+00;
  COFD[406] = -4.36931630E-01;
  COFD[407] = 1.84677592E-02;
  COFD[408] = -1.23116537E+01;
  COFD[409] = 2.62312681E+00;
  COFD[410] = -1.28556314E-01;
  COFD[411] = 5.68221707E-03;
  COFD[412] = -1.91045520E+01;
  COFD[413] = 4.87977047E+00;
  COFD[414] = -4.10448693E-01;
  COFD[415] = 1.74535827E-02;
  COFD[416] = -1.91240292E+01;
  COFD[417] = 4.87977047E+00;
  COFD[418] = -4.10448693E-01;
  COFD[419] = 1.74535827E-02;
  COFD[420] = -1.98983685E+01;
  COFD[421] = 4.38041133E+00;
  COFD[422] = -2.77538214E-01;
  COFD[423] = 9.06748822E-03;
  COFD[424] = -2.05180548E+01;
  COFD[425] = 5.21473296E+00;
  COFD[426] = -4.48646311E-01;
  COFD[427] = 1.89013813E-02;
  COFD[428] = -1.87171338E+01;
  COFD[429] = 4.00967621E+00;
  COFD[430] = -2.21153539E-01;
  COFD[431] = 6.31528745E-03;
  COFD[432] = -2.02361782E+01;
  COFD[433] = 5.11785645E+00;
  COFD[434] = -4.37867828E-01;
  COFD[435] = 1.85047543E-02;
  COFD[436] = -2.05107395E+01;
  COFD[437] = 5.21473296E+00;
  COFD[438] = -4.48646311E-01;
  COFD[439] = 1.89013813E-02;
  COFD[440] = -2.05250357E+01;
  COFD[441] = 5.21473296E+00;
  COFD[442] = -4.48646311E-01;
  COFD[443] = 1.89013813E-02;
  COFD[444] = -2.20758670E+01;
  COFD[445] = 5.52171573E+00;
  COFD[446] = -4.63284984E-01;
  COFD[447] = 1.85570924E-02;
  COFD[448] = -1.15806955E+01;
  COFD[449] = 2.43235504E+00;
  COFD[450] = -1.02890179E-01;
  COFD[451] = 4.52903603E-03;
  COFD[452] = -1.43717684E+01;
  COFD[453] = 3.70920439E+00;
  COFD[454] = -2.67274113E-01;
  COFD[455] = 1.15967481E-02;
  COFD[456] = -1.59677756E+01;
  COFD[457] = 3.60186887E+00;
  COFD[458] = -2.53302622E-01;
  COFD[459] = 1.09893496E-02;
  COFD[460] = -1.50168047E+01;
  COFD[461] = 3.25515933E+00;
  COFD[462] = -2.09710110E-01;
  COFD[463] = 9.15941830E-03;
  COFD[464] = -1.03327327E+01;
  COFD[465] = 1.90522472E+00;
  COFD[466] = -3.44812795E-02;
  COFD[467] = 1.57640018E-03;
  COFD[468] = -1.40915944E+01;
  COFD[469] = 3.07458927E+00;
  COFD[470] = -1.86899591E-01;
  COFD[471] = 8.19829781E-03;
  COFD[472] = -1.41119635E+01;
  COFD[473] = 3.07458927E+00;
  COFD[474] = -1.86899591E-01;
  COFD[475] = 8.19829781E-03;
  COFD[476] = -2.05180548E+01;
  COFD[477] = 5.21473296E+00;
  COFD[478] = -4.48646311E-01;
  COFD[479] = 1.89013813E-02;
  COFD[480] = -1.53265677E+01;
  COFD[481] = 3.37317428E+00;
  COFD[482] = -2.24900439E-01;
  COFD[483] = 9.81228151E-03;
  COFD[484] = -2.04177394E+01;
  COFD[485] = 5.31457079E+00;
  COFD[486] = -4.58216496E-01;
  COFD[487] = 1.91825910E-02;
  COFD[488] = -1.50443476E+01;
  COFD[489] = 3.26249588E+00;
  COFD[490] = -2.10658287E-01;
  COFD[491] = 9.20032462E-03;
  COFD[492] = -1.53187536E+01;
  COFD[493] = 3.37317428E+00;
  COFD[494] = -2.24900439E-01;
  COFD[495] = 9.81228151E-03;
  COFD[496] = -1.53340319E+01;
  COFD[497] = 3.37317428E+00;
  COFD[498] = -2.24900439E-01;
  COFD[499] = 9.81228151E-03;
  COFD[500] = -1.81286456E+01;
  COFD[501] = 4.33684042E+00;
  COFD[502] = -3.44981265E-01;
  COFD[503] = 1.48142449E-02;
  COFD[504] = -1.68759075E+01;
  COFD[505] = 4.49460341E+00;
  COFD[506] = -3.64766179E-01;
  COFD[507] = 1.56457173E-02;
  COFD[508] = -1.93611201E+01;
  COFD[509] = 5.51579726E+00;
  COFD[510] = -4.76061961E-01;
  COFD[511] = 1.96329391E-02;
  COFD[512] = -2.10785351E+01;
  COFD[513] = 5.51573149E+00;
  COFD[514] = -4.78177665E-01;
  COFD[515] = 1.98082796E-02;
  COFD[516] = -2.08123331E+01;
  COFD[517] = 5.42470175E+00;
  COFD[518] = -4.69700438E-01;
  COFD[519] = 1.95706912E-02;
  COFD[520] = -1.21950641E+01;
  COFD[521] = 2.72222246E+00;
  COFD[522] = -1.41335602E-01;
  COFD[523] = 6.23222872E-03;
  COFD[524] = -1.91096700E+01;
  COFD[525] = 5.02608697E+00;
  COFD[526] = -4.26959993E-01;
  COFD[527] = 1.80709910E-02;
  COFD[528] = -1.91256173E+01;
  COFD[529] = 5.02608697E+00;
  COFD[530] = -4.26959993E-01;
  COFD[531] = 1.80709910E-02;
  COFD[532] = -1.87171338E+01;
  COFD[533] = 4.00967621E+00;
  COFD[534] = -2.21153539E-01;
  COFD[535] = 6.31528745E-03;
  COFD[536] = -2.04177394E+01;
  COFD[537] = 5.31457079E+00;
  COFD[538] = -4.58216496E-01;
  COFD[539] = 1.91825910E-02;
  COFD[540] = -1.31492509E+01;
  COFD[541] = 1.48004045E+00;
  COFD[542] = 1.60499956E-01;
  COFD[543] = -1.19765871E-02;
  COFD[544] = -2.08943723E+01;
  COFD[545] = 5.44718673E+00;
  COFD[546] = -4.72082974E-01;
  COFD[547] = 1.96531328E-02;
  COFD[548] = -2.10639926E+01;
  COFD[549] = 5.50980703E+00;
  COFD[550] = -4.78335492E-01;
  COFD[551] = 1.98515434E-02;
  COFD[552] = -2.04229988E+01;
  COFD[553] = 5.31457079E+00;
  COFD[554] = -4.58216496E-01;
  COFD[555] = 1.91825910E-02;
  COFD[556] = -2.12021420E+01;
  COFD[557] = 5.20775027E+00;
  COFD[558] = -4.07348285E-01;
  COFD[559] = 1.55473262E-02;
  COFD[560] = -1.13541221E+01;
  COFD[561] = 2.31999438E+00;
  COFD[562] = -8.75064804E-02;
  COFD[563] = 3.82656365E-03;
  COFD[564] = -1.40524219E+01;
  COFD[565] = 3.56261348E+00;
  COFD[566] = -2.48287981E-01;
  COFD[567] = 1.07752947E-02;
  COFD[568] = -1.57440492E+01;
  COFD[569] = 3.51861272E+00;
  COFD[570] = -2.43068621E-01;
  COFD[571] = 1.05698368E-02;
  COFD[572] = -1.47850505E+01;
  COFD[573] = 3.16433919E+00;
  COFD[574] = -1.98191564E-01;
  COFD[575] = 8.67209742E-03;
  COFD[576] = -1.02057326E+01;
  COFD[577] = 1.83104667E+00;
  COFD[578] = -2.39235907E-02;
  COFD[579] = 1.07741763E-03;
  COFD[580] = -1.39007309E+01;
  COFD[581] = 2.99164244E+00;
  COFD[582] = -1.76293106E-01;
  COFD[583] = 7.74575100E-03;
  COFD[584] = -1.39199573E+01;
  COFD[585] = 2.99164244E+00;
  COFD[586] = -1.76293106E-01;
  COFD[587] = 7.74575100E-03;
  COFD[588] = -2.02361782E+01;
  COFD[589] = 5.11785645E+00;
  COFD[590] = -4.37867828E-01;
  COFD[591] = 1.85047543E-02;
  COFD[592] = -1.50443476E+01;
  COFD[593] = 3.26249588E+00;
  COFD[594] = -2.10658287E-01;
  COFD[595] = 9.20032462E-03;
  COFD[596] = -2.08943723E+01;
  COFD[597] = 5.44718673E+00;
  COFD[598] = -4.72082974E-01;
  COFD[599] = 1.96531328E-02;
  COFD[600] = -1.48061406E+01;
  COFD[601] = 3.16912473E+00;
  COFD[602] = -1.98792456E-01;
  COFD[603] = 8.69726395E-03;
  COFD[604] = -1.50371688E+01;
  COFD[605] = 3.26249588E+00;
  COFD[606] = -2.10658287E-01;
  COFD[607] = 9.20032462E-03;
  COFD[608] = -1.50511964E+01;
  COFD[609] = 3.26249588E+00;
  COFD[610] = -2.10658287E-01;
  COFD[611] = 9.20032462E-03;
  COFD[612] = -1.77672912E+01;
  COFD[613] = 4.20234040E+00;
  COFD[614] = -3.28057658E-01;
  COFD[615] = 1.41006192E-02;
  COFD[616] = -1.15797897E+01;
  COFD[617] = 2.43235504E+00;
  COFD[618] = -1.02890179E-01;
  COFD[619] = 4.52903603E-03;
  COFD[620] = -1.43713019E+01;
  COFD[621] = 3.70920439E+00;
  COFD[622] = -2.67274113E-01;
  COFD[623] = 1.15967481E-02;
  COFD[624] = -1.59592241E+01;
  COFD[625] = 3.60186887E+00;
  COFD[626] = -2.53302622E-01;
  COFD[627] = 1.09893496E-02;
  COFD[628] = -1.50096252E+01;
  COFD[629] = 3.25515933E+00;
  COFD[630] = -2.09710110E-01;
  COFD[631] = 9.15941830E-03;
  COFD[632] = -1.03310320E+01;
  COFD[633] = 1.90522472E+00;
  COFD[634] = -3.44812795E-02;
  COFD[635] = 1.57640018E-03;
  COFD[636] = -1.40864784E+01;
  COFD[637] = 3.07458927E+00;
  COFD[638] = -1.86899591E-01;
  COFD[639] = 8.19829781E-03;
  COFD[640] = -1.41066358E+01;
  COFD[641] = 3.07458927E+00;
  COFD[642] = -1.86899591E-01;
  COFD[643] = 8.19829781E-03;
  COFD[644] = -2.05107395E+01;
  COFD[645] = 5.21473296E+00;
  COFD[646] = -4.48646311E-01;
  COFD[647] = 1.89013813E-02;
  COFD[648] = -1.53187536E+01;
  COFD[649] = 3.37317428E+00;
  COFD[650] = -2.24900439E-01;
  COFD[651] = 9.81228151E-03;
  COFD[652] = -2.10639926E+01;
  COFD[653] = 5.50980703E+00;
  COFD[654] = -4.78335492E-01;
  COFD[655] = 1.98515434E-02;
  COFD[656] = -1.50371688E+01;
  COFD[657] = 3.26249588E+00;
  COFD[658] = -2.10658287E-01;
  COFD[659] = 9.20032462E-03;
  COFD[660] = -1.53110597E+01;
  COFD[661] = 3.37317428E+00;
  COFD[662] = -2.24900439E-01;
  COFD[663] = 9.81228151E-03;
  COFD[664] = -1.53261011E+01;
  COFD[665] = 3.37317428E+00;
  COFD[666] = -2.24900439E-01;
  COFD[667] = 9.81228151E-03;
  COFD[668] = -1.81197250E+01;
  COFD[669] = 4.33684042E+00;
  COFD[670] = -3.44981265E-01;
  COFD[671] = 1.48142449E-02;
  COFD[672] = -1.15815492E+01;
  COFD[673] = 2.43235504E+00;
  COFD[674] = -1.02890179E-01;
  COFD[675] = 4.52903603E-03;
  COFD[676] = -1.43722077E+01;
  COFD[677] = 3.70920439E+00;
  COFD[678] = -2.67274113E-01;
  COFD[679] = 1.15967481E-02;
  COFD[680] = -1.59759560E+01;
  COFD[681] = 3.60186887E+00;
  COFD[682] = -2.53302622E-01;
  COFD[683] = 1.09893496E-02;
  COFD[684] = -1.50236540E+01;
  COFD[685] = 3.25515933E+00;
  COFD[686] = -2.09710110E-01;
  COFD[687] = 9.15941830E-03;
  COFD[688] = -1.03343378E+01;
  COFD[689] = 1.90522472E+00;
  COFD[690] = -3.44812795E-02;
  COFD[691] = 1.57640018E-03;
  COFD[692] = -1.40964555E+01;
  COFD[693] = 3.07458927E+00;
  COFD[694] = -1.86899591E-01;
  COFD[695] = 8.19829781E-03;
  COFD[696] = -1.41170278E+01;
  COFD[697] = 3.07458927E+00;
  COFD[698] = -1.86899591E-01;
  COFD[699] = 8.19829781E-03;
  COFD[700] = -2.05250357E+01;
  COFD[701] = 5.21473296E+00;
  COFD[702] = -4.48646311E-01;
  COFD[703] = 1.89013813E-02;
  COFD[704] = -1.53340319E+01;
  COFD[705] = 3.37317428E+00;
  COFD[706] = -2.24900439E-01;
  COFD[707] = 9.81228151E-03;
  COFD[708] = -2.04229988E+01;
  COFD[709] = 5.31457079E+00;
  COFD[710] = -4.58216496E-01;
  COFD[711] = 1.91825910E-02;
  COFD[712] = -1.50511964E+01;
  COFD[713] = 3.26249588E+00;
  COFD[714] = -2.10658287E-01;
  COFD[715] = 9.20032462E-03;
  COFD[716] = -1.53261011E+01;
  COFD[717] = 3.37317428E+00;
  COFD[718] = -2.24900439E-01;
  COFD[719] = 9.81228151E-03;
  COFD[720] = -1.53416091E+01;
  COFD[721] = 3.37317428E+00;
  COFD[722] = -2.24900439E-01;
  COFD[723] = 9.81228151E-03;
  COFD[724] = -1.81371853E+01;
  COFD[725] = 4.33684042E+00;
  COFD[726] = -3.44981265E-01;
  COFD[727] = 1.48142449E-02;
  COFD[728] = -1.35545391E+01;
  COFD[729] = 3.13878730E+00;
  COFD[730] = -1.94980335E-01;
  COFD[731] = 8.53744486E-03;
  COFD[732] = -1.72994129E+01;
  COFD[733] = 4.71931868E+00;
  COFD[734] = -3.91258152E-01;
  COFD[735] = 1.66866639E-02;
  COFD[736] = -1.90183604E+01;
  COFD[737] = 4.64763677E+00;
  COFD[738] = -3.82799418E-01;
  COFD[739] = 1.63539171E-02;
  COFD[740] = -1.77350630E+01;
  COFD[741] = 4.19328271E+00;
  COFD[742] = -3.26911461E-01;
  COFD[743] = 1.40520357E-02;
  COFD[744] = -1.09328513E+01;
  COFD[745] = 2.05651569E+00;
  COFD[746] = -5.19591463E-02;
  COFD[747] = 2.22384771E-03;
  COFD[748] = -1.67115471E+01;
  COFD[749] = 3.98859394E+00;
  COFD[750] = -3.02316219E-01;
  COFD[751] = 1.30661099E-02;
  COFD[752] = -1.67337674E+01;
  COFD[753] = 3.98859394E+00;
  COFD[754] = -3.02316219E-01;
  COFD[755] = 1.30661099E-02;
  COFD[756] = -2.20758670E+01;
  COFD[757] = 5.52171573E+00;
  COFD[758] = -4.63284984E-01;
  COFD[759] = 1.85570924E-02;
  COFD[760] = -1.81286456E+01;
  COFD[761] = 4.33684042E+00;
  COFD[762] = -3.44981265E-01;
  COFD[763] = 1.48142449E-02;
  COFD[764] = -2.12021420E+01;
  COFD[765] = 5.20775027E+00;
  COFD[766] = -4.07348285E-01;
  COFD[767] = 1.55473262E-02;
  COFD[768] = -1.77672912E+01;
  COFD[769] = 4.20234040E+00;
  COFD[770] = -3.28057658E-01;
  COFD[771] = 1.41006192E-02;
  COFD[772] = -1.81197250E+01;
  COFD[773] = 4.33684042E+00;
  COFD[774] = -3.44981265E-01;
  COFD[775] = 1.48142449E-02;
  COFD[776] = -1.81371853E+01;
  COFD[777] = 4.33684042E+00;
  COFD[778] = -3.44981265E-01;
  COFD[779] = 1.48142449E-02;
  COFD[780] = -2.10907633E+01;
  COFD[781] = 5.29211327E+00;
  COFD[782] = -4.56068366E-01;
  COFD[783] = 1.91195062E-02;
}

// List of specs with small weight, dim NLITE
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKTDIF(int* KTDIF)
{
  KTDIF[0] = 0;
  KTDIF[1] = 1;
  KTDIF[2] = 4;
}

// Poly fits for thermal diff ratios, dim NO*NLITE*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFTD(amrex::Real* COFTD)
{
  COFTD[0] = 0.00000000E+00;
  COFTD[1] = 0.00000000E+00;
  COFTD[2] = 0.00000000E+00;
  COFTD[3] = 0.00000000E+00;
  COFTD[4] = -1.52534742E-01;
  COFTD[5] = -5.46404022E-05;
  COFTD[6] = 2.93412470E-08;
  COFTD[7] = -4.87091914E-12;
  COFTD[8] = 4.22531096E-01;
  COFTD[9] = 1.32084539E-04;
  COFTD[10] = -7.12223786E-08;
  COFTD[11] = 1.19516336E-11;
  COFTD[12] = 4.45261429E-01;
  COFTD[13] = 4.94696577E-05;
  COFTD[14] = -2.63023124E-08;
  COFTD[15] = 4.90305626E-12;
  COFTD[16] = 1.61607281E-01;
  COFTD[17] = 4.74136612E-05;
  COFTD[18] = -1.67108646E-08;
  COFTD[19] = -1.88974661E-12;
  COFTD[20] = 4.15577509E-01;
  COFTD[21] = 1.09736860E-05;
  COFTD[22] = -3.96016410E-09;
  COFTD[23] = 1.14412838E-12;
  COFTD[24] = 4.21927217E-01;
  COFTD[25] = 1.11413555E-05;
  COFTD[26] = -4.02067239E-09;
  COFTD[27] = 1.16160979E-12;
  COFTD[28] = 1.61391212E-01;
  COFTD[29] = 5.01080793E-04;
  COFTD[30] = -2.38272376E-07;
  COFTD[31] = 3.49342098E-11;
  COFTD[32] = 4.44449675E-01;
  COFTD[33] = 7.14520855E-05;
  COFTD[34] = -3.86254673E-08;
  COFTD[35] = 6.88975155E-12;
  COFTD[36] = 6.02021050E-02;
  COFTD[37] = 5.61555733E-04;
  COFTD[38] = -2.55370065E-07;
  COFTD[39] = 3.63385926E-11;
  COFTD[40] = 4.44650439E-01;
  COFTD[41] = 5.06628083E-05;
  COFTD[42] = -2.69818971E-08;
  COFTD[43] = 5.01286176E-12;
  COFTD[44] = 4.42736017E-01;
  COFTD[45] = 7.11765887E-05;
  COFTD[46] = -3.84765396E-08;
  COFTD[47] = 6.86318682E-12;
  COFTD[48] = 4.46067449E-01;
  COFTD[49] = 7.17121674E-05;
  COFTD[50] = -3.87660620E-08;
  COFTD[51] = 6.91482989E-12;
  COFTD[52] = 3.25740914E-01;
  COFTD[53] = 3.03631979E-04;
  COFTD[54] = -1.55289598E-07;
  COFTD[55] = 2.41465297E-11;
  COFTD[56] = 1.52534742E-01;
  COFTD[57] = 5.46404022E-05;
  COFTD[58] = -2.93412470E-08;
  COFTD[59] = 4.87091914E-12;
  COFTD[60] = 0.00000000E+00;
  COFTD[61] = 0.00000000E+00;
  COFTD[62] = 0.00000000E+00;
  COFTD[63] = 0.00000000E+00;
  COFTD[64] = 1.65429391E-01;
  COFTD[65] = 5.61239497E-04;
  COFTD[66] = -2.65650817E-07;
  COFTD[67] = 3.88229990E-11;
  COFTD[68] = 2.40744276E-01;
  COFTD[69] = 4.45343183E-04;
  COFTD[70] = -2.18173742E-07;
  COFTD[71] = 3.26958310E-11;
  COFTD[72] = 3.40757071E-01;
  COFTD[73] = -4.04051397E-05;
  COFTD[74] = 3.27874373E-08;
  COFTD[75] = -6.27083944E-12;
  COFTD[76] = 2.70008280E-01;
  COFTD[77] = 3.61552588E-04;
  COFTD[78] = -1.80743499E-07;
  COFTD[79] = 2.75319341E-11;
  COFTD[80] = 2.72039997E-01;
  COFTD[81] = 3.64273144E-04;
  COFTD[82] = -1.82103531E-07;
  COFTD[83] = 2.77391022E-11;
  COFTD[84] = -1.24647578E-01;
  COFTD[85] = 7.96522972E-04;
  COFTD[86] = -3.24997704E-07;
  COFTD[87] = 4.32515301E-11;
  COFTD[88] = 2.20907136E-01;
  COFTD[89] = 4.81088308E-04;
  COFTD[90] = -2.33376187E-07;
  COFTD[91] = 3.47137178E-11;
  COFTD[92] = -1.41882969E-01;
  COFTD[93] = 7.66554625E-04;
  COFTD[94] = -3.06548330E-07;
  COFTD[95] = 4.02957302E-11;
  COFTD[96] = 2.39409087E-01;
  COFTD[97] = 4.47195587E-04;
  COFTD[98] = -2.18950923E-07;
  COFTD[99] = 3.27972343E-11;
  COFTD[100] = 2.20482081E-01;
  COFTD[101] = 4.80162630E-04;
  COFTD[102] = -2.32927140E-07;
  COFTD[103] = 3.46469239E-11;
  COFTD[104] = 2.21307723E-01;
  COFTD[105] = 4.81960701E-04;
  COFTD[106] = -2.33799385E-07;
  COFTD[107] = 3.47766667E-11;
  COFTD[108] = 2.44368810E-02;
  COFTD[109] = 7.18240808E-04;
  COFTD[110] = -3.19717751E-07;
  COFTD[111] = 4.48827629E-11;
  COFTD[112] = -1.61607281E-01;
  COFTD[113] = -4.74136612E-05;
  COFTD[114] = 1.67108646E-08;
  COFTD[115] = 1.88974661E-12;
  COFTD[116] = -3.40757071E-01;
  COFTD[117] = 4.04051397E-05;
  COFTD[118] = -3.27874373E-08;
  COFTD[119] = 6.27083944E-12;
  COFTD[120] = 4.66319838E-01;
  COFTD[121] = -5.60156045E-05;
  COFTD[122] = 4.65992344E-08;
  COFTD[123] = -9.13655484E-12;
  COFTD[124] = 4.22012509E-01;
  COFTD[125] = -4.14044861E-05;
  COFTD[126] = 4.38754291E-08;
  COFTD[127] = -1.02860874E-11;
  COFTD[128] = 0.00000000E+00;
  COFTD[129] = 0.00000000E+00;
  COFTD[130] = 0.00000000E+00;
  COFTD[131] = 0.00000000E+00;
  COFTD[132] = 3.31583426E-01;
  COFTD[133] = -1.96385405E-05;
  COFTD[134] = 3.02384712E-08;
  COFTD[135] = -8.44986516E-12;
  COFTD[136] = 3.42199332E-01;
  COFTD[137] = -2.02672839E-05;
  COFTD[138] = 3.12065798E-08;
  COFTD[139] = -8.72039429E-12;
  COFTD[140] = 3.56627194E-01;
  COFTD[141] = 1.06116325E-04;
  COFTD[142] = -5.72914297E-08;
  COFTD[143] = 9.65259597E-12;
  COFTD[144] = 4.43646534E-01;
  COFTD[145] = -4.87481598E-05;
  COFTD[146] = 4.69715901E-08;
  COFTD[147] = -1.03568152E-11;
  COFTD[148] = 2.84980924E-01;
  COFTD[149] = 1.15458959E-04;
  COFTD[150] = -6.17192280E-08;
  COFTD[151] = 1.01503292E-11;
  COFTD[152] = 4.22168933E-01;
  COFTD[153] = -4.17747464E-05;
  COFTD[154] = 4.39723636E-08;
  COFTD[155] = -1.02672328E-11;
  COFTD[156] = 4.40217977E-01;
  COFTD[157] = -4.83714278E-05;
  COFTD[158] = 4.66085877E-08;
  COFTD[159] = -1.02767764E-11;
  COFTD[160] = 4.46893277E-01;
  COFTD[161] = -4.91049140E-05;
  COFTD[162] = 4.73153427E-08;
  COFTD[163] = -1.04326096E-11;
  COFTD[164] = 4.59661412E-01;
  COFTD[165] = -1.74770160E-05;
  COFTD[166] = 1.42887540E-08;
  COFTD[167] = -2.03609880E-12;
}

// compute the critical parameters for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS(
  amrex::Real* Tci, amrex::Real* ai, amrex::Real* bi, amrex::Real* acentric_i)
{

  amrex::Real EPS[14];
  amrex::Real SIG[14];
  amrex::Real wt[14];
  amrex::Real Rcst = 83.144598; // in bar [CGS] !
  amrex::Real avogadro = 6.02214199e23;
  amrex::Real boltzmann = 1.3806503e-16; // we work in CGS

  egtransetEPS(EPS);
  egtransetSIG(SIG);
  get_mw(wt);

  // species 0: H2
  // Imported from NIST
  Tci[0] = 33.145000;
  ai[0] = 1e6 * 0.42748 * Rcst * Rcst * Tci[0] * Tci[0] /
          (2.015880 * 2.015880 * 12.964000);
  bi[0] = 0.08664 * Rcst * Tci[0] / (2.015880 * 12.964000);
  acentric_i[0] = -0.219000;

  // species 1: H
  Tci[1] = 1.316 * EPS[1];
  ai[1] = (5.55 * avogadro * avogadro * EPS[1] * boltzmann * 1e-24 * SIG[1] *
           SIG[1] * SIG[1]) /
          (wt[1] * wt[1]);
  bi[1] = 0.855 * avogadro * 1e-24 * SIG[1] * SIG[1] * SIG[1] / (wt[1]);
  acentric_i[1] = 0.0;

  // species 2: AR
  // Imported from NIST
  Tci[2] = 150.860000;
  ai[2] = 1e6 * 0.42748 * Rcst * Rcst * Tci[2] * Tci[2] /
          (39.948000 * 39.948000 * 48.980000);
  bi[2] = 0.08664 * Rcst * Tci[2] / (39.948000 * 48.980000);
  acentric_i[2] = -0.002000;

  // species 3: N2
  // Imported from NIST
  Tci[3] = 126.192000;
  ai[3] = 1e6 * 0.42748 * Rcst * Rcst * Tci[3] * Tci[3] /
          (28.013400 * 28.013400 * 33.958000);
  bi[3] = 0.08664 * Rcst * Tci[3] / (28.013400 * 33.958000);
  acentric_i[3] = 0.037200;

  // species 4: HE
  Tci[4] = 1.316 * EPS[4];
  ai[4] = (5.55 * avogadro * avogadro * EPS[4] * boltzmann * 1e-24 * SIG[4] *
           SIG[4] * SIG[4]) /
          (wt[4] * wt[4]);
  bi[4] = 0.855 * avogadro * 1e-24 * SIG[4] * SIG[4] * SIG[4] / (wt[4]);
  acentric_i[4] = 0.0;

  // species 5: O
  Tci[5] = 1.316 * EPS[5];
  ai[5] = (5.55 * avogadro * avogadro * EPS[5] * boltzmann * 1e-24 * SIG[5] *
           SIG[5] * SIG[5]) /
          (wt[5] * wt[5]);
  bi[5] = 0.855 * avogadro * 1e-24 * SIG[5] * SIG[5] * SIG[5] / (wt[5]);
  acentric_i[5] = 0.0;

  // species 6: OH
  Tci[6] = 1.316 * EPS[6];
  ai[6] = (5.55 * avogadro * avogadro * EPS[6] * boltzmann * 1e-24 * SIG[6] *
           SIG[6] * SIG[6]) /
          (wt[6] * wt[6]);
  bi[6] = 0.855 * avogadro * 1e-24 * SIG[6] * SIG[6] * SIG[6] / (wt[6]);
  acentric_i[6] = 0.0;

  // species 7: HCO
  Tci[7] = 1.316 * EPS[7];
  ai[7] = (5.55 * avogadro * avogadro * EPS[7] * boltzmann * 1e-24 * SIG[7] *
           SIG[7] * SIG[7]) /
          (wt[7] * wt[7]);
  bi[7] = 0.855 * avogadro * 1e-24 * SIG[7] * SIG[7] * SIG[7] / (wt[7]);
  acentric_i[7] = 0.0;

  // species 8: HO2
  Tci[8] = 1.316 * EPS[8];
  ai[8] = (5.55 * avogadro * avogadro * EPS[8] * boltzmann * 1e-24 * SIG[8] *
           SIG[8] * SIG[8]) /
          (wt[8] * wt[8]);
  bi[8] = 0.855 * avogadro * 1e-24 * SIG[8] * SIG[8] * SIG[8] / (wt[8]);
  acentric_i[8] = 0.0;

  // species 9: H2O
  // Imported from NIST
  Tci[9] = 647.096000;
  ai[9] = 1e6 * 0.42748 * Rcst * Rcst * Tci[9] * Tci[9] /
          (18.015340 * 18.015340 * 220.640000);
  bi[9] = 0.08664 * Rcst * Tci[9] / (18.015340 * 220.640000);
  acentric_i[9] = 0.344300;

  // species 10: CO
  // Imported from NIST
  Tci[10] = 132.850000;
  ai[10] = 1e6 * 0.42748 * Rcst * Rcst * Tci[10] * Tci[10] /
           (28.010000 * 28.010000 * 34.940000);
  bi[10] = 0.08664 * Rcst * Tci[10] / (28.010000 * 34.940000);
  acentric_i[10] = 0.045000;

  // species 11: O2
  // Imported from NIST
  Tci[11] = 154.581000;
  ai[11] = 1e6 * 0.42748 * Rcst * Rcst * Tci[11] * Tci[11] /
           (31.998800 * 31.998800 * 50.430466);
  bi[11] = 0.08664 * Rcst * Tci[11] / (31.998800 * 50.430466);
  acentric_i[11] = 0.022200;

  // species 12: H2O2
  Tci[12] = 1.316 * EPS[12];
  ai[12] = (5.55 * avogadro * avogadro * EPS[12] * boltzmann * 1e-24 * SIG[12] *
            SIG[12] * SIG[12]) /
           (wt[12] * wt[12]);
  bi[12] = 0.855 * avogadro * 1e-24 * SIG[12] * SIG[12] * SIG[12] / (wt[12]);
  acentric_i[12] = 0.0;

  // species 13: CO2
  // Imported from NIST
  Tci[13] = 304.120000;
  ai[13] = 1e6 * 0.42748 * Rcst * Rcst * Tci[13] * Tci[13] /
           (44.009950 * 44.009950 * 73.740000);
  bi[13] = 0.08664 * Rcst * Tci[13] / (44.009950 * 73.740000);
  acentric_i[13] = 0.225000;
}

// compute the critical parameter quantities for each species for SRK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS_SRK(
  amrex::Real* sqrtOneOverTc,
  amrex::Real* sqrtAsti,
  amrex::Real* Bi,
  amrex::Real* Fomega)
{

  // species 0: H2
  // Imported from NIST
  sqrtOneOverTc[0] = 1.7369646834812e-01;
  sqrtAsti[0] = 2.4824229305911e+05;
  Bi[0] = 9.1362254169923e+00;
  Fomega[0] = 1.3798618890700e-01;

  // species 1: H
  // Computed from Lennard-Jones
  sqrtOneOverTc[1] = 7.2391579785311e-02;
  sqrtAsti[1] = 5.8451221185793e+05;
  Bi[1] = 4.4006634563410e+00;
  Fomega[1] = 4.8508000000000e-01;

  // species 2: AR
  // Imported from NIST
  sqrtOneOverTc[2] = 8.1416597423011e-02;
  sqrtAsti[2] = 2.9333346340060e+04;
  Bi[2] = 5.5540880812616e-01;
  Fomega[2] = 4.8197599354800e-01;

  // species 3: N2
  // Imported from NIST
  sqrtOneOverTc[3] = 8.9019282240563e-02;
  sqrtAsti[3] = 4.2022983929562e+04;
  Bi[3] = 9.5560052221563e-01;
  Fomega[3] = 5.4259343186608e-01;

  // species 4: HE
  // Computed from Lennard-Jones
  sqrtOneOverTc[4] = 2.7294300551596e-01;
  sqrtAsti[4] = 5.4994061413731e+04;
  Bi[4] = 2.1989344021800e+00;
  Fomega[4] = 4.8508000000000e-01;

  // species 5: O
  // Computed from Lennard-Jones
  sqrtOneOverTc[5] = 9.7460146948181e-02;
  sqrtAsti[5] = 4.2500156012386e+04;
  Bi[5] = 6.6930234851885e-01;
  Fomega[5] = 4.8508000000000e-01;

  // species 6: OH
  // Computed from Lennard-Jones
  sqrtOneOverTc[6] = 9.7460146948181e-02;
  sqrtAsti[6] = 3.9981183985545e+04;
  Bi[6] = 6.2963299076575e-01;
  Fomega[6] = 4.8508000000000e-01;

  // species 7: HCO
  // Computed from Lennard-Jones
  sqrtOneOverTc[7] = 3.9062261583604e-02;
  sqrtAsti[7] = 8.7202351509582e+04;
  Bi[7] = 8.2098075206475e-01;
  Fomega[7] = 4.8508000000000e-01;

  // species 8: HO2
  // Computed from Lennard-Jones
  sqrtOneOverTc[8] = 8.4114315417892e-02;
  sqrtAsti[8] = 3.3657825710980e+04;
  Bi[8] = 6.4505861132042e-01;
  Fomega[8] = 4.8508000000000e-01;

  // species 9: H2O
  // Imported from NIST
  sqrtOneOverTc[9] = 3.9311140369715e-02;
  sqrtAsti[9] = 1.3145468419592e+05;
  Bi[9] = 1.1727204136223e+00;
  Fomega[9] = 1.0013577274636e+00;

  // species 10: CO
  // Imported from NIST
  sqrtOneOverTc[10] = 8.6759935530451e-02;
  sqrtAsti[10] = 4.3619324712923e+04;
  Bi[10] = 9.7786303823350e-01;
  Fomega[10] = 5.5459948367500e-01;

  // species 11: O2
  // Imported from NIST
  sqrtOneOverTc[11] = 8.0430717653241e-02;
  sqrtAsti[11] = 3.6980081924740e+04;
  Bi[11] = 6.9005216444999e-01;
  Fomega[11] = 5.1945301904908e-01;

  // species 12: H2O2
  // Computed from Lennard-Jones
  sqrtOneOverTc[12] = 8.4114315417892e-02;
  sqrtAsti[12] = 3.2660380884830e+04;
  Bi[12] = 6.2594239211036e-01;
  Fomega[12] = 4.8508000000000e-01;

  // species 13: CO2
  // Imported from NIST
  sqrtOneOverTc[13] = 5.7342616962522e-02;
  sqrtAsti[13] = 4.3745610142919e+04;
  Bi[13] = 6.7506167841745e-01;
  Fomega[13] = 8.2653709187500e-01;
}

// gauss-jordan solver external routine
// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort("sgjsolve not implemented, choose a different solver ");
}

// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve_simplified(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort(
    "sgjsolve_simplified not implemented, choose a different solver ");
}

#endif
