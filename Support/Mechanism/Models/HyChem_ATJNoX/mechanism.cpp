#include "mechanism.H"
const int rmap[560] = {
  18,  20,  48,  57,  59,  60,  69,  84,  85,  92,  107, 131, 147, 162, 168,
  181, 192, 199, 212, 256, 277, 300, 336, 382, 389, 36,  393, 11,  12,  13,
  14,  15,  16,  17,  45,  46,  197, 400, 401, 402, 427, 445, 528, 0,   1,
  2,   3,   4,   5,   6,   7,   8,   9,   10,  19,  21,  22,  23,  24,  25,
  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  37,  38,  39,  40,  41,
  42,  43,  44,  47,  49,  50,  51,  52,  53,  54,  55,  56,  58,  61,  62,
  63,  64,  65,  66,  67,  68,  70,  71,  72,  73,  74,  75,  76,  77,  78,
  79,  80,  81,  82,  83,  86,  87,  88,  89,  90,  91,  93,  94,  95,  96,
  97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112,
  113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
  128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
  144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
  160, 161, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176,
  177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193,
  194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
  211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226,
  227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
  242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257,
  258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
  273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288,
  289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304,
  305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
  320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334,
  335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
  351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365,
  366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380,
  381, 383, 384, 385, 386, 387, 388, 390, 391, 392, 394, 395, 396, 397, 398,
  399, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416,
  417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432,
  433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448,
  449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463,
  464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478,
  479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493,
  494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508,
  509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523,
  524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
  540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
  555, 556, 557, 558, 559};

// Returns 0-based map of reaction order
void
GET_RMAP(int* _rmap)
{
  for (int j = 0; j < 560; ++j) {
    _rmap[j] = rmap[j];
  }
}

// Returns a count of species in a reaction, and their indices
// and stoichiometric coefficients. (Eq 50)
void
CKINU(const int i, int& nspec, int ki[], int nu[])
{
  const int ns[560] = {
    6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 3, 2, 2, 2, 2, 3, 3, 2, 3, 4, 2, 4, 3, 4, 3,
    3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 4, 3, 4,
    4, 4, 4, 4, 4, 4, 4, 3, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 3, 4, 4, 4,
    4, 4, 4, 5, 4, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 3, 3, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 3, 4, 3, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 3, 4, 3, 4, 3, 3, 4, 4, 4, 4, 4, 4, 5, 3, 4, 4, 4, 4, 3, 5, 3,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4,
    4, 3, 3, 4, 4, 5, 4, 4, 4, 4, 3, 3, 4, 3, 3, 4, 4, 4, 3, 4, 2, 4, 3, 3, 4,
    4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 2, 4, 4, 5, 4, 5, 4,
    4, 3, 3, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 5, 4, 4, 4, 4, 4,
    3, 4, 4, 4, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4,
    3, 3, 4, 4, 4, 4, 4, 3, 4, 4, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 3, 4, 3, 4, 4, 3, 3, 4, 3, 4, 4, 4, 4,
    3, 3, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 5, 3, 4, 4, 5, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4,
    4, 4, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 3, 4, 4, 4, 4, 4, 4, 4, 4};
  const int kiv[4480] = {
    0,  1,  3,  11, 13, 4,  0,  0,  13, 0,  1,  3,  11, 13, 5,  4,  11, 0,  1,
    3,  11, 2,  13, 4,  14, 0,  1,  3,  11, 13, 17, 4,  12, 0,  1,  3,  11, 13,
    15, 4,  15, 0,  1,  3,  11, 13, 18, 4,  16, 0,  1,  3,  11, 13, 14, 4,  13,
    12, 16, 14, 0,  0,  0,  0,  5,  16, 13, 14, 0,  0,  0,  0,  5,  14, 13, 17,
    0,  0,  0,  0,  14, 17, 16, 0,  0,  0,  0,  0,  13, 5,  0,  0,  0,  0,  0,
    0,  13, 5,  0,  0,  0,  0,  0,  0,  13, 5,  0,  0,  0,  0,  0,  0,  13, 5,
    0,  0,  0,  0,  0,  0,  13, 14, 17, 0,  0,  0,  0,  0,  13, 16, 14, 0,  0,
    0,  0,  0,  16, 12, 0,  0,  0,  0,  0,  0,  13, 12, 15, 0,  0,  0,  0,  0,
    5,  12, 13, 15, 0,  0,  0,  0,  14, 18, 0,  0,  0,  0,  0,  0,  13, 15, 17,
    16, 0,  0,  0,  0,  13, 15, 14, 0,  0,  0,  0,  0,  15, 16, 12, 14, 0,  0,
    0,  0,  15, 18, 12, 0,  0,  0,  0,  0,  15, 18, 12, 0,  0,  0,  0,  0,  15,
    14, 17, 12, 0,  0,  0,  0,  15, 14, 17, 12, 0,  0,  0,  0,  15, 14, 17, 12,
    0,  0,  0,  0,  15, 14, 17, 12, 0,  0,  0,  0,  15, 14, 17, 12, 0,  0,  0,
    0,  13, 18, 5,  15, 0,  0,  0,  0,  13, 18, 17, 14, 0,  0,  0,  0,  18, 16,
    15, 14, 0,  0,  0,  0,  18, 14, 17, 15, 0,  0,  0,  0,  18, 14, 17, 15, 0,
    0,  0,  0,  7,  16, 27, 0,  0,  0,  0,  0,  7,  14, 27, 13, 0,  0,  0,  0,
    7,  14, 27, 13, 0,  0,  0,  0,  7,  12, 27, 16, 0,  0,  0,  0,  7,  15, 27,
    14, 0,  0,  0,  0,  13, 23, 7,  5,  0,  0,  0,  0,  23, 16, 7,  14, 0,  0,
    0,  0,  23, 16, 27, 13, 0,  0,  0,  0,  23, 14, 7,  17, 0,  0,  0,  0,  23,
    7,  13, 0,  0,  0,  0,  0,  23, 7,  13, 0,  0,  0,  0,  0,  23, 12, 7,  15,
    0,  0,  0,  0,  7,  5,  24, 0,  0,  0,  0,  0,  19, 14, 7,  13, 0,  0,  0,
    0,  19, 12, 7,  16, 0,  0,  0,  0,  20, 13, 19, 5,  0,  0,  0,  0,  20, 16,
    7,  13, 0,  0,  0,  0,  20, 14, 13, 23, 0,  0,  0,  0,  20, 5,  21, 13, 0,
    0,  0,  0,  20, 17, 24, 13, 0,  0,  0,  0,  20, 12, 23, 16, 0,  0,  0,  0,
    20, 7,  32, 0,  0,  0,  0,  0,  20, 27, 7,  23, 0,  0,  0,  0,  13, 23, 24,
    0,  0,  0,  0,  0,  21, 13, 11, 0,  0,  0,  0,  0,  21, 16, 13, 23, 0,  0,
    0,  0,  21, 14, 24, 13, 0,  0,  0,  0,  21, 14, 20, 17, 0,  0,  0,  0,  21,
    5,  11, 13, 0,  0,  0,  0,  21, 12, 23, 14, 0,  0,  0,  0,  21, 12, 27, 13,
    0,  0,  0,  0,  21, 15, 24, 14, 0,  0,  0,  0,  19, 21, 29, 13, 0,  0,  0,
    0,  21, 7,  33, 0,  0,  0,  0,  0,  20, 21, 8,  13, 0,  0,  0,  0,  21, 8,
    5,  0,  0,  0,  0,  0,  22, 65, 21, 65, 0,  0,  0,  0,  22, 13, 20, 5,  0,
    0,  0,  0,  22, 16, 7,  5,  0,  0,  0,  0,  22, 16, 13, 23, 0,  0,  0,  0,
    22, 14, 24, 13, 0,  0,  0,  0,  22, 5,  11, 13, 0,  0,  0,  0,  22, 12, 7,
    13, 14, 0,  0,  0,  22, 12, 7,  17, 0,  0,  0,  0,  22, 17, 21, 17, 0,  0,
    0,  0,  22, 7,  21, 7,  0,  0,  0,  0,  22, 27, 21, 27, 0,  0,  0,  0,  22,
    27, 24, 7,  0,  0,  0,  0,  24, 13, 26, 0,  0,  0,  0,  0,  24, 13, 25, 0,
    0,  0,  0,  0,  24, 13, 5,  23, 0,  0,  0,  0,  24, 16, 23, 14, 0,  0,  0,
    0,  24, 14, 17, 23, 0,  0,  0,  0,  24, 12, 23, 15, 0,  0,  0,  0,  24, 15,
    18, 23, 0,  0,  0,  0,  20, 24, 33, 13, 0,  0,  0,  0,  11, 13, 2,  0,  0,
    0,  0,  0,  11, 16, 24, 13, 0,  0,  0,  0,  11, 14, 21, 17, 0,  0,  0,  0,
    11, 14, 22, 17, 0,  0,  0,  0,  11, 12, 25, 16, 0,  0,  0,  0,  11, 12, 24,
    14, 0,  0,  0,  0,  11, 15, 2,  12, 0,  0,  0,  0,  11, 15, 25, 14, 0,  0,
    0,  0,  11, 18, 2,  15, 0,  0,  0,  0,  19, 11, 8,  13, 0,  0,  0,  0,  20,
    11, 30, 13, 0,  0,  0,  0,  11, 23, 2,  7,  0,  0,  0,  0,  24, 11, 2,  23,
    0,  0,  0,  0,  21, 11, 1,  13, 0,  0,  0,  0,  22, 11, 1,  13, 0,  0,  0,
    0,  11, 6,  0,  0,  0,  0,  0,  0,  11, 31, 13, 0,  0,  0,  0,  0,  11, 32,
    1,  7,  0,  0,  0,  0,  29, 11, 36, 13, 0,  0,  0,  0,  25, 13, 26, 13, 0,
    0,  0,  0,  25, 13, 24, 5,  0,  0,  0,  0,  25, 13, 11, 14, 0,  0,  0,  0,
    25, 13, 22, 17, 0,  0,  0,  0,  25, 16, 24, 14, 0,  0,  0,  0,  25, 14, 24,
    17, 0,  0,  0,  0,  25, 12, 24, 15, 0,  0,  0,  0,  26, 13, 24, 5,  0,  0,
    0,  0,  26, 13, 11, 14, 0,  0,  0,  0,  26, 13, 22, 17, 0,  0,  0,  0,  26,
    16, 24, 14, 0,  0,  0,  0,  26, 14, 24, 17, 0,  0,  0,  0,  26, 12, 24, 15,
    0,  0,  0,  0,  2,  13, 11, 5,  0,  0,  0,  0,  2,  16, 11, 14, 0,  0,  0,
    0,  2,  14, 11, 17, 0,  0,  0,  0,  20, 2,  1,  13, 0,  0,  0,  0,  21, 2,
    11, 0,  0,  0,  0,  0,  22, 2,  11, 0,  0,  0,  0,  0,  29, 2,  8,  11, 0,
    0,  0,  0,  29, 13, 8,  0,  0,  0,  0,  0,  29, 16, 20, 7,  0,  0,  0,  0,
    29, 14, 13, 32, 0,  0,  0,  0,  29, 12, 7,  23, 0,  0,  0,  0,  29, 5,  8,
    13, 0,  0,  0,  0,  28, 13, 20, 7,  0,  0,  0,  0,  28, 16, 7,  0,  0,  0,
    0,  0,  28, 14, 7,  13, 0,  0,  0,  0,  28, 12, 7,  16, 0,  0,  0,  0,  13,
    32, 22, 7,  0,  0,  0,  0,  32, 16, 7,  13, 0,  0,  0,  0,  32, 12, 7,  14,
    0,  0,  0,  0,  20, 32, 8,  7,  0,  0,  0,  0,  21, 32, 30, 7,  0,  0,  0,
    0,  32, 8,  7,  0,  0,  0,  0,  0,  32, 14, 28, 17, 0,  0,  0,  0,  30, 8,
    13, 0,  0,  0,  0,  0,  8,  16, 29, 14, 0,  0,  0,  0,  8,  16, 21, 7,  0,
    0,  0,  0,  8,  16, 13, 32, 0,  0,  0,  0,  8,  14, 33, 13, 0,  0,  0,  0,
    8,  14, 29, 17, 0,  0,  0,  0,  8,  14, 11, 7,  0,  0,  0,  0,  8,  23, 30,
    7,  0,  0,  0,  0,  8,  21, 36, 13, 0,  0,  0,  0,  8,  22, 36, 13, 0,  0,
    0,  0,  8,  32, 36, 7,  0,  0,  0,  0,  8,  11, 13, 9,  0,  0,  0,  0,  8,
    11, 13, 10, 0,  0,  0,  0,  8,  11, 38, 0,  0,  0,  0,  0,  8,  11, 37, 0,
    0,  0,  0,  0,  33, 13, 35, 0,  0,  0,  0,  0,  33, 13, 5,  32, 0,  0,  0,
    0,  33, 13, 11, 7,  0,  0,  0,  0,  33, 16, 32, 14, 0,  0,  0,  0,  33, 16,
    21, 27, 0,  0,  0,  0,  33, 14, 17, 32, 0,  0,  0,  0,  30, 13, 1,  0,  0,
    0,  0,  0,  30, 13, 8,  5,  0,  0,  0,  0,  30, 16, 33, 13, 0,  0,  0,  0,
    30, 16, 11, 7,  0,  0,  0,  0,  30, 14, 8,  17, 0,  0,  0,  0,  30, 12, 8,
    15, 0,  0,  0,  0,  30, 12, 35, 16, 0,  0,  0,  0,  30, 12, 24, 23, 0,  0,
    0,  0,  30, 15, 35, 14, 0,  0,  0,  0,  30, 18, 1,  15, 0,  0,  0,  0,  30,
    23, 1,  7,  0,  0,  0,  0,  30, 23, 40, 0,  0,  0,  0,  0,  30, 11, 8,  2,
    0,  0,  0,  0,  30, 11, 3,  0,  0,  0,  0,  0,  30, 11, 13, 37, 0,  0,  0,
    0,  30, 8,  1,  0,  0,  0,  0,  0,  35, 11, 7,  0,  0,  0,  0,  0,  35, 13,
    34, 13, 0,  0,  0,  0,  35, 13, 11, 23, 0,  0,  0,  0,  35, 13, 33, 5,  0,
    0,  0,  0,  35, 16, 33, 14, 0,  0,  0,  0,  35, 14, 33, 17, 0,  0,  0,  0,
    35, 12, 33, 15, 0,  0,  0,  0,  35, 12, 24, 7,  14, 0,  0,  0,  11, 7,  34,
    0,  0,  0,  0,  0,  34, 13, 11, 23, 0,  0,  0,  0,  34, 16, 33, 14, 0,  0,
    0,  0,  34, 16, 11, 27, 0,  0,  0,  0,  34, 14, 33, 17, 0,  0,  0,  0,  34,
    11, 7,  0,  0,  0,  0,  0,  34, 15, 11, 27, 14, 0,  0,  0,  1,  13, 31, 0,
    0,  0,  0,  0,  1,  13, 30, 5,  0,  0,  0,  0,  1,  16, 30, 14, 0,  0,  0,
    0,  1,  16, 11, 23, 0,  0,  0,  0,  1,  16, 21, 24, 0,  0,  0,  0,  1,  14,
    30, 17, 0,  0,  0,  0,  1,  23, 31, 7,  0,  0,  0,  0,  1,  20, 13, 10, 0,
    0,  0,  0,  1,  20, 13, 9,  0,  0,  0,  0,  1,  21, 13, 37, 0,  0,  0,  0,
    1,  22, 13, 37, 0,  0,  0,  0,  1,  11, 30, 2,  0,  0,  0,  0,  1,  12, 30,
    15, 0,  0,  0,  0,  31, 13, 6,  0,  0,  0,  0,  0,  31, 13, 1,  5,  0,  0,
    0,  0,  31, 16, 24, 11, 0,  0,  0,  0,  31, 12, 1,  15, 0,  0,  0,  0,  31,
    15, 6,  12, 0,  0,  0,  0,  31, 15, 1,  18, 0,  0,  0,  0,  31, 15, 24, 11,
    14, 0,  0,  0,  31, 18, 6,  15, 0,  0,  0,  0,  30, 31, 11, 37, 0,  0,  0,
    0,  6,  13, 31, 5,  0,  0,  0,  0,  6,  16, 31, 14, 0,  0,  0,  0,  6,  14,
    31, 17, 0,  0,  0,  0,  6,  22, 31, 11, 0,  0,  0,  0,  6,  11, 31, 2,  0,
    0,  0,  0,  36, 13, 9,  0,  0,  0,  0,  0,  36, 13, 10, 0,  0,  0,  0,  0,
    36, 16, 29, 24, 0,  0,  0,  0,  36, 12, 33, 23, 0,  0,  0,  0,  36, 15, 30,
    7,  14, 0,  0,  0,  36, 15, 12, 10, 0,  0,  0,  0,  36, 15, 12, 9,  0,  0,
    0,  0,  36, 23, 7,  10, 0,  0,  0,  0,  36, 23, 7,  9,  0,  0,  0,  0,  8,
    36, 42, 0,  0,  0,  0,  0,  36, 43, 13, 0,  0,  0,  0,  0,  13, 10, 36, 5,
    0,  0,  0,  0,  13, 10, 38, 0,  0,  0,  0,  0,  13, 10, 37, 0,  0,  0,  0,
    0,  16, 10, 1,  7,  0,  0,  0,  0,  14, 10, 36, 17, 0,  0,  0,  0,  11, 10,
    36, 2,  0,  0,  0,  0,  11, 10, 41, 0,  0,  0,  0,  0,  29, 10, 8,  36, 0,
    0,  0,  0,  9,  10, 0,  0,  0,  0,  0,  0,  13, 9,  13, 10, 0,  0,  0,  0,
    13, 9,  38, 0,  0,  0,  0,  0,  13, 9,  37, 0,  0,  0,  0,  0,  13, 9,  36,
    5,  0,  0,  0,  0,  36, 9,  36, 10, 0,  0,  0,  0,  16, 9,  11, 32, 0,  0,
    0,  0,  16, 9,  1,  7,  0,  0,  0,  0,  14, 9,  36, 17, 0,  0,  0,  0,  29,
    9,  8,  36, 0,  0,  0,  0,  11, 9,  36, 2,  0,  0,  0,  0,  13, 37, 3,  0,
    0,  0,  0,  0,  13, 37, 5,  10, 0,  0,  0,  0,  16, 37, 40, 13, 0,  0,  0,
    0,  14, 37, 40, 13, 0,  0,  0,  0,  14, 37, 17, 10, 0,  0,  0,  0,  12, 37,
    15, 10, 0,  0,  0,  0,  12, 37, 24, 34, 0,  0,  0,  0,  12, 37, 40, 14, 0,
    0,  0,  0,  15, 37, 3,  12, 0,  0,  0,  0,  15, 37, 30, 24, 14, 0,  0,  0,
    23, 37, 3,  7,  0,  0,  0,  0,  11, 37, 2,  10, 0,  0,  0,  0,  37, 38, 0,
    0,  0,  0,  0,  0,  38, 13, 5,  9,  0,  0,  0,  0,  38, 16, 33, 11, 0,  0,
    0,  0,  38, 14, 33, 11, 13, 0,  0,  0,  38, 12, 24, 34, 0,  0,  0,  0,  38,
    15, 33, 11, 14, 0,  0,  0,  38, 23, 3,  7,  0,  0,  0,  0,  11, 38, 2,  9,
    0,  0,  0,  0,  11, 38, 4,  0,  0,  0,  0,  0,  3,  13, 39, 0,  0,  0,  0,
    0,  3,  13, 1,  11, 0,  0,  0,  0,  3,  13, 5,  37, 0,  0,  0,  0,  3,  13,
    38, 5,  0,  0,  0,  0,  3,  16, 33, 11, 13, 0,  0,  0,  3,  16, 40, 13, 0,
    0,  0,  0,  3,  16, 31, 23, 0,  0,  0,  0,  3,  16, 14, 37, 0,  0,  0,  0,
    3,  16, 38, 14, 0,  0,  0,  0,  3,  14, 17, 37, 0,  0,  0,  0,  3,  14, 38,
    17, 0,  0,  0,  0,  3,  15, 18, 37, 0,  0,  0,  0,  3,  11, 2,  37, 0,  0,
    0,  0,  3,  11, 38, 2,  0,  0,  0,  0,  40, 13, 1,  23, 0,  0,  0,  0,  40,
    16, 30, 7,  14, 0,  0,  0,  40, 16, 33, 24, 0,  0,  0,  0,  40, 14, 30, 7,
    17, 0,  0,  0,  13, 39, 31, 11, 0,  0,  0,  0,  13, 39, 3,  5,  0,  0,  0,
    0,  14, 39, 3,  17, 0,  0,  0,  0,  12, 39, 3,  15, 0,  0,  0,  0,  11, 39,
    3,  2,  0,  0,  0,  0,  13, 41, 4,  0,  0,  0,  0,  0,  13, 41, 11, 38, 0,
    0,  0,  0,  16, 41, 24, 38, 0,  0,  0,  0,  14, 41, 26, 38, 0,  0,  0,  0,
    15, 41, 24, 38, 14, 0,  0,  0,  12, 41, 33, 24, 11, 0,  0,  0,  12, 41, 1,
    33, 14, 0,  0,  0,  13, 4,  5,  41, 0,  0,  0,  0,  13, 4,  3,  11, 0,  0,
    0,  0,  16, 4,  33, 11, 0,  0,  0,  0,  16, 4,  23, 39, 0,  0,  0,  0,  16,
    4,  14, 41, 0,  0,  0,  0,  14, 4,  17, 41, 0,  0,  0,  0,  15, 4,  18, 41,
    0,  0,  0,  0,  15, 4,  3,  24, 14, 0,  0,  0,  12, 4,  15, 41, 0,  0,  0,
    0,  11, 4,  2,  41, 0,  0,  0,  0,  43, 12, 44, 16, 0,  0,  0,  0,  43, 16,
    42, 7,  0,  0,  0,  0,  43, 14, 44, 13, 0,  0,  0,  0,  43, 15, 44, 14, 0,
    0,  0,  0,  44, 13, 42, 23, 0,  0,  0,  0,  44, 42, 7,  0,  0,  0,  0,  0,
    37, 41, 10, 4,  0,  0,  0,  0,  37, 4,  3,  41, 0,  0,  0,  0,  37, 3,  10,
    0,  0,  0,  0,  0,  3,  37, 39, 0,  0,  0,  0,  0,  13, 4,  5,  45, 0,  0,
    0,  0,  11, 4,  2,  45, 0,  0,  0,  0,  14, 4,  17, 45, 0,  0,  0,  0,  16,
    4,  14, 45, 0,  0,  0,  0,  15, 45, 12, 4,  0,  0,  0,  0,  45, 11, 9,  0,
    0,  0,  0,  0,  13, 41, 2,  10, 0,  0,  0,  0,  37, 41, 4,  9,  0,  0,  0,
    0,  45, 41, 0,  0,  0,  0,  0,  0,  13, 50, 49, 0,  0,  0,  0,  0,  13, 49,
    5,  50, 0,  0,  0,  0,  49, 16, 50, 14, 0,  0,  0,  0,  49, 14, 17, 50, 0,
    0,  0,  0,  15, 49, 18, 50, 0,  0,  0,  0,  5,  51, 13, 50, 0,  0,  0,  0,
    50, 16, 13, 54, 0,  0,  0,  0,  50, 16, 51, 14, 0,  0,  0,  0,  50, 16, 51,
    14, 0,  0,  0,  0,  50, 14, 17, 51, 0,  0,  0,  0,  15, 50, 49, 12, 0,  0,
    0,  0,  15, 50, 17, 54, 0,  0,  0,  0,  15, 50, 17, 54, 0,  0,  0,  0,  50,
    12, 54, 14, 0,  0,  0,  0,  50, 51, 49, 0,  0,  0,  0,  0,  51, 50, 52, 49,
    0,  0,  0,  0,  52, 50, 13, 65, 0,  0,  0,  0,  54, 50, 49, 46, 0,  0,  0,
    0,  50, 46, 17, 65, 0,  0,  0,  0,  50, 46, 53, 14, 0,  0,  0,  0,  50, 47,
    17, 55, 0,  0,  0,  0,  13, 51, 5,  52, 0,  0,  0,  0,  51, 16, 13, 46, 0,
    0,  0,  0,  51, 14, 13, 54, 0,  0,  0,  0,  51, 14, 17, 52, 0,  0,  0,  0,
    51, 12, 54, 16, 0,  0,  0,  0,  51, 12, 46, 14, 0,  0,  0,  0,  51, 52, 50,
    0,  0,  0,  0,  0,  52, 51, 13, 65, 0,  0,  0,  0,  51, 46, 13, 55, 0,  0,
    0,  0,  51, 46, 65, 14, 0,  0,  0,  0,  51, 47, 55, 14, 0,  0,  0,  0,  51,
    47, 54, 46, 0,  0,  0,  0,  52, 14, 13, 46, 0,  0,  0,  0,  52, 12, 46, 16,
    0,  0,  0,  0,  52, 46, 65, 16, 0,  0,  0,  0,  53, 13, 65, 0,  0,  0,  0,
    0,  13, 53, 5,  65, 0,  0,  0,  0,  53, 16, 13, 55, 0,  0,  0,  0,  53, 16,
    65, 14, 0,  0,  0,  0,  53, 16, 51, 46, 0,  0,  0,  0,  53, 14, 17, 65, 0,
    0,  0,  0,  53, 12, 15, 65, 0,  0,  0,  0,  51, 53, 65, 50, 0,  0,  0,  0,
    50, 53, 65, 49, 0,  0,  0,  0,  53, 46, 54, 65, 0,  0,  0,  0,  13, 46, 54,
    0,  0,  0,  0,  0,  13, 54, 5,  46, 0,  0,  0,  0,  54, 16, 46, 14, 0,  0,
    0,  0,  54, 14, 17, 46, 0,  0,  0,  0,  54, 12, 15, 46, 0,  0,  0,  0,  54,
    17, 55, 0,  0,  0,  0,  0,  15, 46, 47, 14, 0,  0,  0,  0,  46, 16, 47, 0,
    0,  0,  0,  0,  13, 47, 46, 14, 0,  0,  0,  0,  47, 16, 46, 12, 0,  0,  0,
    0,  47, 46, 12, 0,  0,  0,  0,  0,  55, 65, 16, 0,  0,  0,  0,  0,  13, 55,
    65, 14, 0,  0,  0,  0,  55, 16, 46, 0,  0,  0,  0,  0,  55, 16, 65, 12, 0,
    0,  0,  0,  55, 14, 15, 65, 0,  0,  0,  0,  55, 14, 54, 46, 0,  0,  0,  0,
    55, 46, 65, 47, 0,  0,  0,  0,  48, 57, 13, 0,  0,  0,  0,  0,  48, 57, 13,
    0,  0,  0,  0,  0,  48, 56, 0,  0,  0,  0,  0,  0,  57, 5,  13, 48, 0,  0,
    0,  0,  48, 16, 13, 60, 0,  0,  0,  0,  48, 16, 7,  51, 0,  0,  0,  0,  48,
    16, 57, 14, 0,  0,  0,  0,  48, 14, 57, 17, 0,  0,  0,  0,  48, 14, 13, 58,
    0,  0,  0,  0,  48, 14, 7,  50, 0,  0,  0,  0,  48, 12, 57, 15, 0,  0,  0,
    0,  13, 56, 13, 48, 0,  0,  0,  0,  56, 16, 7,  51, 0,  0,  0,  0,  56, 14,
    13, 58, 0,  0,  0,  0,  56, 14, 57, 17, 0,  0,  0,  0,  57, 16, 7,  52, 0,
    0,  0,  0,  57, 14, 13, 60, 0,  0,  0,  0,  57, 12, 60, 16, 0,  0,  0,  0,
    57, 12, 7,  46, 0,  0,  0,  0,  57, 46, 52, 60, 0,  0,  0,  0,  57, 47, 60,
    46, 0,  0,  0,  0,  57, 47, 7,  55, 0,  0,  0,  0,  57, 47, 27, 65, 0,  0,
    0,  0,  57, 54, 48, 46, 0,  0,  0,  0,  57, 58, 48, 60, 0,  0,  0,  0,  57,
    58, 7,  62, 0,  0,  0,  0,  57, 60, 7,  61, 0,  0,  0,  0,  58, 7,  51, 0,
    0,  0,  0,  0,  13, 58, 7,  50, 0,  0,  0,  0,  13, 58, 5,  60, 0,  0,  0,
    0,  58, 16, 60, 14, 0,  0,  0,  0,  58, 16, 27, 51, 0,  0,  0,  0,  58, 16,
    7,  54, 0,  0,  0,  0,  58, 14, 17, 60, 0,  0,  0,  0,  58, 15, 18, 60, 0,
    0,  0,  0,  58, 12, 27, 54, 0,  0,  0,  0,  17, 58, 27, 49, 0,  0,  0,  0,
    58, 51, 60, 50, 0,  0,  0,  0,  59, 48, 16, 0,  0,  0,  0,  0,  13, 59, 48,
    14, 0,  0,  0,  0,  59, 16, 23, 46, 0,  0,  0,  0,  59, 16, 60, 14, 0,  0,
    0,  0,  59, 14, 23, 54, 0,  0,  0,  0,  57, 59, 48, 60, 0,  0,  0,  0,  59,
    60, 7,  48, 46, 0,  0,  0,  60, 7,  52, 0,  0,  0,  0,  0,  13, 60, 7,  51,
    0,  0,  0,  0,  60, 16, 7,  46, 0,  0,  0,  0,  60, 14, 7,  13, 46, 0,  0,
    0,  15, 60, 58, 12, 0,  0,  0,  0,  60, 12, 27, 46, 0,  0,  0,  0,  60, 46,
    7,  55, 0,  0,  0,  0,  60, 46, 27, 65, 0,  0,  0,  0,  60, 47, 7,  46, 0,
    0,  0,  0,  60, 47, 27, 55, 0,  0,  0,  0,  54, 60, 58, 46, 0,  0,  0,  0,
    60, 49, 58, 50, 0,  0,  0,  0,  52, 60, 7,  65, 0,  0,  0,  0,  60, 7,  65,
    0,  0,  0,  0,  0,  7,  47, 27, 46, 0,  0,  0,  0,  7,  55, 27, 65, 0,  0,
    0,  0,  27, 52, 7,  46, 0,  0,  0,  0,  57, 27, 7,  60, 0,  0,  0,  0,  24,
    57, 48, 23, 0,  0,  0,  0,  24, 60, 23, 58, 0,  0,  0,  0,  23, 46, 7,  54,
    0,  0,  0,  0,  23, 54, 24, 46, 0,  0,  0,  0,  23, 47, 27, 13, 46, 0,  0,
    0,  23, 47, 7,  46, 14, 0,  0,  0,  23, 60, 7,  58, 0,  0,  0,  0,  2,  50,
    11, 49, 0,  0,  0,  0,  2,  57, 11, 48, 0,  0,  0,  0,  2,  60, 11, 58, 0,
    0,  0,  0,  11, 50, 2,  51, 0,  0,  0,  0,  11, 50, 21, 49, 0,  0,  0,  0,
    11, 51, 63, 13, 0,  0,  0,  0,  11, 51, 2,  52, 0,  0,  0,  0,  11, 52, 13,
    64, 0,  0,  0,  0,  11, 54, 2,  46, 0,  0,  0,  0,  11, 46, 17, 48, 0,  0,
    0,  0,  11, 46, 64, 14, 0,  0,  0,  0,  11, 47, 25, 46, 0,  0,  0,  0,  21,
    65, 48, 51, 0,  0,  0,  0,  21, 52, 13, 48, 0,  0,  0,  0,  21, 46, 13, 59,
    0,  0,  0,  0,  21, 46, 48, 14, 0,  0,  0,  0,  21, 47, 24, 46, 0,  0,  0,
    0,  22, 46, 48, 14, 0,  0,  0,  0,  22, 46, 21, 46, 0,  0,  0,  0,  22, 55,
    24, 65, 0,  0,  0,  0,  20, 65, 13, 61, 0,  0,  0,  0,  20, 65, 62, 0,  0,
    0,  0,  0,  20, 49, 13, 64, 0,  0,  0,  0,  20, 52, 57, 13, 0,  0,  0,  0,
    20, 46, 7,  51, 0,  0,  0,  0,  20, 46, 13, 60, 0,  0,  0,  0,  20, 46, 48,
    16, 0,  0,  0,  0,  20, 46, 57, 14, 0,  0,  0,  0,  20, 46, 23, 52, 0,  0,
    0,  0,  20, 47, 23, 46, 0,  0,  0,  0,  57, 52, 19, 65, 0,  0,  0,  0,  20,
    55, 48, 46, 0,  0,  0,  0,  19, 46, 57, 16, 0,  0,  0,  0,  19, 46, 7,  52,
    0,  0,  0,  0,  19, 55, 57, 46, 0,  0,  0,  0,  25, 46, 24, 54, 0,  0,  0,
    0,  25, 46, 24, 54, 0,  0,  0,  0,  26, 46, 17, 58, 0,  0,  0,  0,  6,  50,
    31, 49, 0,  0,  0,  0,  6,  57, 31, 48, 0,  0,  0,  0,  6,  60, 31, 58, 0,
    0,  0,  0,  31, 52, 1,  51, 0,  0,  0,  0,  31, 52, 11, 64, 0,  0,  0,  0,
    1,  50, 30, 49, 0,  0,  0,  0,  30, 46, 24, 48, 0,  0,  0,  0,  30, 47, 35,
    46, 0,  0,  0,  0,  8,  60, 32, 48, 0,  0,  0,  0,  29, 49, 8,  50, 0,  0,
    0,  0,  29, 46, 7,  48, 0,  0,  0,  0,  29, 46, 57, 23, 0,  0,  0,  0,  29,
    47, 32, 46, 0,  0,  0,  0,  34, 47, 11, 27, 46, 0,  0,  0,  32, 52, 7,  48,
    0,  0,  0,  0,  32, 46, 7,  59, 0,  0,  0,  0,  32, 46, 27, 48, 0,  0,  0,
    0,  32, 47, 27, 59, 0,  0,  0,  0,  28, 46, 7,  60, 0,  0,  0,  0,  28, 47,
    27, 60, 0,  0,  0,  0,  61, 19, 65, 0,  0,  0,  0,  0,  13, 61, 62, 0,  0,
    0,  0,  0,  13, 61, 48, 52, 0,  0,  0,  0,  13, 61, 56, 52, 0,  0,  0,  0,
    61, 16, 57, 46, 0,  0,  0,  0,  61, 14, 60, 51, 0,  0,  0,  0,  61, 14, 48,
    46, 0,  0,  0,  0,  61, 12, 60, 46, 0,  0,  0,  0,  61, 46, 57, 55, 0,  0,
    0,  0,  61, 57, 65, 0,  0,  0,  0,  0,  5,  61, 13, 62, 0,  0,  0,  0,  62,
    16, 56, 46, 0,  0,  0,  0,  62, 16, 60, 51, 0,  0,  0,  0,  62, 16, 57, 54,
    0,  0,  0,  0,  62, 14, 17, 61, 0,  0,  0,  0,  62, 12, 15, 61, 0,  0,  0,
    0,  11, 50, 63, 5,  0,  0,  0,  0,  63, 13, 5,  64, 0,  0,  0,  0,  63, 16,
    64, 14, 0,  0,  0,  0,  63, 16, 24, 51, 0,  0,  0,  0,  63, 14, 64, 17, 0,
    0,  0,  0,  63, 11, 2,  64, 0,  0,  0,  0,  63, 50, 64, 49, 0,  0,  0,  0,
    64, 13, 48, 0,  0,  0,  0,  0,  13, 64, 5,  48, 0,  0,  0,  0,  64, 16, 48,
    14, 0,  0,  0,  0,  64, 14, 17, 48, 0,  0,  0,  0,  64, 14, 17, 48, 0,  0,
    0,  0,  64, 12, 24, 46, 0,  0,  0,  0,  64, 50, 48, 49, 0,  0,  0,  0,  64,
    51, 48, 50, 0,  0,  0,  0,  64, 52, 21, 65, 0,  0,  0,  0};
  const int nuv[4480] = {
    -1, 0,  0, 0, 1,  2,  0, 0, -1, -1, 0, 0, 0,  0,  1, 2, -1, -1, 0, 0,
    0,  1,  0, 2, -1, -1, 0, 0, 0,  0,  1, 2, -1, -1, 0, 0, 0,  0,  1, 2,
    -1, -1, 0, 0, 0,  0,  1, 2, -1, -1, 0, 0, 0,  0,  1, 2, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -2, 1,  1, 0, 0,  0,  0, 0, -2, 1,  0, 0, 0,  0,  0, 0, -2, 1,  0, 0,
    0,  0,  0, 0, -2, 1,  0, 0, 0,  0,  0, 0, -2, 1,  0, 0, 0,  0,  0, 0,
    -1, -1, 1, 0, 0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0, -2, 1,  0, 0,
    0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -2, 1,  0, 0, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 2, 0,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -2, 1,  1, 0, 0,  0,  0, 0,
    -2, 1,  1, 0, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, 1,  1, 0, 0,  0,  0, 0, -1, 1,  1, 0, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 0,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0,
    -1, -1, 1, 0, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 2, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -2, 1,  1, 0, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 1,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0,
    -1, -1, 1, 0, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 0,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -2, 1,  0, 0,
    0,  0,  0, 0, -2, 1,  1, 0, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 2, 0, 0,  0,  0, 0, -1, -1, 2, 0, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 2, 0,
    0,  0,  0, 0, -1, -1, 2, 1, 0,  0,  0, 0, -1, -1, 2, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 2, 1, 0,  0,  0, 0, -1, -1, 2, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -2, 1,  2, 0, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, 1,  1, 0,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 0, 0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0, -1, -1, 1, 0,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -2, 1,  1, 0, 0,  0,  0, 0, -1, 1,  1, 0, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 1,  0,  0, 0, -1, -1, 1, 0,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, 1,  1, 0,
    0,  0,  0, 0, -1, -1, 1, 1, 1,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 0,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 1,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0, -1, -1, 1, 0,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 1,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 0, 0,  0,  0, 0, -2, 1,  1, 0, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, 1,  0, 0, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 0,
    0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 2, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 1,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, 1,  0, 0, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 1,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 1,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0, -1, -1, 1, 0,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 1,  0,  0, 0, -1, -1, 1, 2,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    1,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 1,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 0, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 1,  0,  0, 0,
    -1, -1, 1, 1, 1,  0,  0, 0, -1, -1, 1, 1, 1,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 2, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 1,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, 1,  1, 0,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -2, 1,  1, 0, 0,  0,  0, 0, -2, 1,  1, 0, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, 1,  1, 0,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, 1,  0, 0, 0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -2, 1,  1, 0, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 2, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -2, 1,  1, 0, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, 1,  1, 0,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 0,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -2, 1,  1, 0,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -2, 2,  1, 0,
    0,  0,  0, 0, -1, 1,  1, 0, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 2, 0, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, 1,  1, 0, 0,  0,  0, 0, -1, 1,  1, 0, 0,  0,  0, 0, -1, 1,  0, 0,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, 1,  1, 0,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, 1,  1, 0, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 1,  0,  0, 0,
    -1, 1,  1, 0, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 1,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 2, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -2, 2,  1, 0, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    1,  0,  0, 0, -1, -1, 1, 1, 1,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0, -1, -1, 2, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 1,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, 1,  1, 0, 0,  0,  0, 0, -1, -1, 1, 0, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -2, 2,  1, 0,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, 1,  1, 0, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0,
    -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1,
    0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0, -1, -1, 1, 1, 0,  0,  0, 0};
  if (i < 1) {
    // Return max num species per reaction
    nspec = 8;
  } else {
    if (i > 560) {
      nspec = -1;
    } else {
      nspec = ns[i - 1];
      for (int j = 0; j < nspec; ++j) {
        ki[j] = kiv[(i - 1) * 8 + j] + 1;
        nu[j] = nuv[(i - 1) * 8 + j];
      }
    }
  }
}

// Returns the progress rates of each reactions
// Given P, T, and mole fractions
void
CKKFKR(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real q_f[],
  amrex::Real q_r[])
{
  amrex::Real c[66]; // temporary storage
  amrex::Real PORT =
    1e6 * P / (8.31446261815324e+07 * T); // 1e6 * P/RT so c goes to SI units

  // Compute conversion, see Eq 10
  for (int id = 0; id < 66; ++id) {
    c[id] = x[id] * PORT;
  }

  // convert to chemkin units
  progressRateFR(q_f, q_r, c, T);

  // convert to chemkin units
  for (int id = 0; id < 560; ++id) {
    q_f[id] *= 1.0e-6;
    q_r[id] *= 1.0e-6;
  }
}

// compute the progress rate for each reaction
// USES progressRate : todo switch to GPU
void
progressRateFR(
  amrex::Real* q_f, amrex::Real* q_r, amrex::Real* sc, amrex::Real T)
{
  const amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  amrex::Real invT = 1.0 / tc[1];
  // compute the Gibbs free energy
  amrex::Real g_RT[66];
  gibbs(g_RT, tc);

  amrex::Real sc_qss[1];
  comp_qfqr(q_f, q_r, sc, sc_qss, tc, invT);
}

// save atomic weights into array
void
atomicWeight(amrex::Real* awt)
{
  awt[0] = 15.999000; // O
  awt[1] = 1.008000;  // H
  awt[2] = 12.011000; // C
  awt[3] = 14.007000; // N
  awt[4] = 39.950000; // Ar
}

// get atomic weight for all elements
void
CKAWT(amrex::Real* awt)
{
  atomicWeight(awt);
}

// Returns the elemental composition
// of the speciesi (mdim is num of elements)
void
CKNCF(int* ncf)
{
  int kd = 5;
  // Zero ncf
  for (int id = 0; id < kd * 66; ++id) {
    ncf[id] = 0;
  }

  // POSF11498
  ncf[0 * kd + 2] = 13; // C
  ncf[0 * kd + 1] = 28; // H

  // C2H4
  ncf[1 * kd + 2] = 2; // C
  ncf[1 * kd + 1] = 4; // H

  // CH4
  ncf[2 * kd + 2] = 1; // C
  ncf[2 * kd + 1] = 4; // H

  // C3H6
  ncf[3 * kd + 2] = 3; // C
  ncf[3 * kd + 1] = 6; // H

  // iC4H8
  ncf[4 * kd + 2] = 4; // C
  ncf[4 * kd + 1] = 8; // H

  // H2
  ncf[5 * kd + 1] = 2; // H

  // C2H6
  ncf[6 * kd + 2] = 2; // C
  ncf[6 * kd + 1] = 6; // H

  // CO
  ncf[7 * kd + 2] = 1; // C
  ncf[7 * kd + 0] = 1; // O

  // C2H2
  ncf[8 * kd + 2] = 2; // C
  ncf[8 * kd + 1] = 2; // H

  // pC3H4
  ncf[9 * kd + 2] = 3; // C
  ncf[9 * kd + 1] = 4; // H

  // aC3H4
  ncf[10 * kd + 2] = 3; // C
  ncf[10 * kd + 1] = 4; // H

  // CH3
  ncf[11 * kd + 2] = 1; // C
  ncf[11 * kd + 1] = 3; // H

  // O2
  ncf[12 * kd + 0] = 2; // O

  // H
  ncf[13 * kd + 1] = 1; // H

  // OH
  ncf[14 * kd + 1] = 1; // H
  ncf[14 * kd + 0] = 1; // O

  // HO2
  ncf[15 * kd + 1] = 1; // H
  ncf[15 * kd + 0] = 2; // O

  // O
  ncf[16 * kd + 0] = 1; // O

  // H2O
  ncf[17 * kd + 1] = 2; // H
  ncf[17 * kd + 0] = 1; // O

  // H2O2
  ncf[18 * kd + 1] = 2; // H
  ncf[18 * kd + 0] = 2; // O

  // C
  ncf[19 * kd + 2] = 1; // C

  // CH
  ncf[20 * kd + 2] = 1; // C
  ncf[20 * kd + 1] = 1; // H

  // CH2
  ncf[21 * kd + 2] = 1; // C
  ncf[21 * kd + 1] = 2; // H

  // CH2*
  ncf[22 * kd + 2] = 1; // C
  ncf[22 * kd + 1] = 2; // H

  // HCO
  ncf[23 * kd + 2] = 1; // C
  ncf[23 * kd + 1] = 1; // H
  ncf[23 * kd + 0] = 1; // O

  // CH2O
  ncf[24 * kd + 2] = 1; // C
  ncf[24 * kd + 1] = 2; // H
  ncf[24 * kd + 0] = 1; // O

  // CH3O
  ncf[25 * kd + 2] = 1; // C
  ncf[25 * kd + 1] = 3; // H
  ncf[25 * kd + 0] = 1; // O

  // CH2OH
  ncf[26 * kd + 2] = 1; // C
  ncf[26 * kd + 1] = 3; // H
  ncf[26 * kd + 0] = 1; // O

  // CO2
  ncf[27 * kd + 2] = 1; // C
  ncf[27 * kd + 0] = 2; // O

  // C2O
  ncf[28 * kd + 2] = 2; // C
  ncf[28 * kd + 0] = 1; // O

  // C2H
  ncf[29 * kd + 2] = 2; // C
  ncf[29 * kd + 1] = 1; // H

  // C2H3
  ncf[30 * kd + 2] = 2; // C
  ncf[30 * kd + 1] = 3; // H

  // C2H5
  ncf[31 * kd + 2] = 2; // C
  ncf[31 * kd + 1] = 5; // H

  // HCCO
  ncf[32 * kd + 2] = 2; // C
  ncf[32 * kd + 1] = 1; // H
  ncf[32 * kd + 0] = 1; // O

  // CH2CO
  ncf[33 * kd + 2] = 2; // C
  ncf[33 * kd + 1] = 2; // H
  ncf[33 * kd + 0] = 1; // O

  // CH3CO
  ncf[34 * kd + 2] = 2; // C
  ncf[34 * kd + 1] = 3; // H
  ncf[34 * kd + 0] = 1; // O

  // CH2CHO
  ncf[35 * kd + 2] = 2; // C
  ncf[35 * kd + 1] = 3; // H
  ncf[35 * kd + 0] = 1; // O

  // C3H3
  ncf[36 * kd + 2] = 3; // C
  ncf[36 * kd + 1] = 3; // H

  // aC3H5
  ncf[37 * kd + 2] = 3; // C
  ncf[37 * kd + 1] = 5; // H

  // CH3CCH2
  ncf[38 * kd + 2] = 3; // C
  ncf[38 * kd + 1] = 5; // H

  // iC3H7
  ncf[39 * kd + 2] = 3; // C
  ncf[39 * kd + 1] = 7; // H

  // C2H3CHO
  ncf[40 * kd + 2] = 3; // C
  ncf[40 * kd + 1] = 4; // H
  ncf[40 * kd + 0] = 1; // O

  // iC4H7
  ncf[41 * kd + 2] = 4; // C
  ncf[41 * kd + 1] = 7; // H

  // C5H5
  ncf[42 * kd + 2] = 5; // C
  ncf[42 * kd + 1] = 5; // H

  // C6H5
  ncf[43 * kd + 2] = 6; // C
  ncf[43 * kd + 1] = 5; // H

  // C6H5O
  ncf[44 * kd + 2] = 6; // C
  ncf[44 * kd + 1] = 5; // H
  ncf[44 * kd + 0] = 1; // O

  // iC4H7-1
  ncf[45 * kd + 2] = 4; // C
  ncf[45 * kd + 1] = 7; // H

  // NO
  ncf[46 * kd + 3] = 1; // N
  ncf[46 * kd + 0] = 1; // O

  // NO2
  ncf[47 * kd + 3] = 1; // N
  ncf[47 * kd + 0] = 2; // O

  // HCN
  ncf[48 * kd + 2] = 1; // C
  ncf[48 * kd + 1] = 1; // H
  ncf[48 * kd + 3] = 1; // N

  // NH3
  ncf[49 * kd + 1] = 3; // H
  ncf[49 * kd + 3] = 1; // N

  // NH2
  ncf[50 * kd + 1] = 2; // H
  ncf[50 * kd + 3] = 1; // N

  // NH
  ncf[51 * kd + 1] = 1; // H
  ncf[51 * kd + 3] = 1; // N

  // N
  ncf[52 * kd + 3] = 1; // N

  // NNH
  ncf[53 * kd + 1] = 1; // H
  ncf[53 * kd + 3] = 2; // N

  // HNO
  ncf[54 * kd + 1] = 1; // H
  ncf[54 * kd + 3] = 1; // N
  ncf[54 * kd + 0] = 1; // O

  // N2O
  ncf[55 * kd + 3] = 2; // N
  ncf[55 * kd + 0] = 1; // O

  // HNC
  ncf[56 * kd + 2] = 1; // C
  ncf[56 * kd + 1] = 1; // H
  ncf[56 * kd + 3] = 1; // N

  // CN
  ncf[57 * kd + 2] = 1; // C
  ncf[57 * kd + 3] = 1; // N

  // HNCO
  ncf[58 * kd + 2] = 1; // C
  ncf[58 * kd + 1] = 1; // H
  ncf[58 * kd + 3] = 1; // N
  ncf[58 * kd + 0] = 1; // O

  // HCNO
  ncf[59 * kd + 2] = 1; // C
  ncf[59 * kd + 1] = 1; // H
  ncf[59 * kd + 3] = 1; // N
  ncf[59 * kd + 0] = 1; // O

  // NCO
  ncf[60 * kd + 2] = 1; // C
  ncf[60 * kd + 3] = 1; // N
  ncf[60 * kd + 0] = 1; // O

  // NCN
  ncf[61 * kd + 2] = 1; // C
  ncf[61 * kd + 3] = 2; // N

  // HNCN
  ncf[62 * kd + 2] = 1; // C
  ncf[62 * kd + 1] = 1; // H
  ncf[62 * kd + 3] = 2; // N

  // CH2NH
  ncf[63 * kd + 2] = 1; // C
  ncf[63 * kd + 1] = 3; // H
  ncf[63 * kd + 3] = 1; // N

  // H2CN
  ncf[64 * kd + 2] = 1; // C
  ncf[64 * kd + 1] = 2; // H
  ncf[64 * kd + 3] = 1; // N

  // N2
  ncf[65 * kd + 3] = 2; // N
}

// Returns the vector of strings of element names
void
CKSYME_STR(amrex::Vector<std::string>& ename)
{
  ename.resize(5);
  ename[0] = "O";
  ename[1] = "H";
  ename[2] = "C";
  ename[3] = "N";
  ename[4] = "Ar";
}

// Returns the vector of strings of species names
void
CKSYMS_STR(amrex::Vector<std::string>& kname)
{
  kname.resize(66);
  kname[0] = "POSF11498";
  kname[1] = "C2H4";
  kname[2] = "CH4";
  kname[3] = "C3H6";
  kname[4] = "iC4H8";
  kname[5] = "H2";
  kname[6] = "C2H6";
  kname[7] = "CO";
  kname[8] = "C2H2";
  kname[9] = "pC3H4";
  kname[10] = "aC3H4";
  kname[11] = "CH3";
  kname[12] = "O2";
  kname[13] = "H";
  kname[14] = "OH";
  kname[15] = "HO2";
  kname[16] = "O";
  kname[17] = "H2O";
  kname[18] = "H2O2";
  kname[19] = "C";
  kname[20] = "CH";
  kname[21] = "CH2";
  kname[22] = "CH2*";
  kname[23] = "HCO";
  kname[24] = "CH2O";
  kname[25] = "CH3O";
  kname[26] = "CH2OH";
  kname[27] = "CO2";
  kname[28] = "C2O";
  kname[29] = "C2H";
  kname[30] = "C2H3";
  kname[31] = "C2H5";
  kname[32] = "HCCO";
  kname[33] = "CH2CO";
  kname[34] = "CH3CO";
  kname[35] = "CH2CHO";
  kname[36] = "C3H3";
  kname[37] = "aC3H5";
  kname[38] = "CH3CCH2";
  kname[39] = "iC3H7";
  kname[40] = "C2H3CHO";
  kname[41] = "iC4H7";
  kname[42] = "C5H5";
  kname[43] = "C6H5";
  kname[44] = "C6H5O";
  kname[45] = "iC4H7-1";
  kname[46] = "NO";
  kname[47] = "NO2";
  kname[48] = "HCN";
  kname[49] = "NH3";
  kname[50] = "NH2";
  kname[51] = "NH";
  kname[52] = "N";
  kname[53] = "NNH";
  kname[54] = "HNO";
  kname[55] = "N2O";
  kname[56] = "HNC";
  kname[57] = "CN";
  kname[58] = "HNCO";
  kname[59] = "HCNO";
  kname[60] = "NCO";
  kname[61] = "NCN";
  kname[62] = "HNCN";
  kname[63] = "CH2NH";
  kname[64] = "H2CN";
  kname[65] = "N2";
}

// compute the sparsity pattern of the chemistry Jacobian
void
SPARSITY_INFO(int* nJdata, const int* consP, int NCELLS)
{
  amrex::GpuArray<amrex::Real, 4489> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 66> conc = {0.0};
  for (int n = 0; n < 66; n++) {
    conc[n] = 1.0 / 66.000000;
  }
  aJacobian(Jac.data(), conc.data(), 1500.0, *consP);

  int nJdata_tmp = 0;
  for (int k = 0; k < 67; k++) {
    for (int l = 0; l < 67; l++) {
      if (Jac[67 * k + l] != 0.0) {
        nJdata_tmp = nJdata_tmp + 1;
      }
    }
  }

  *nJdata = NCELLS * nJdata_tmp;
}

// compute the sparsity pattern of the system Jacobian
void
SPARSITY_INFO_SYST(int* nJdata, const int* consP, int NCELLS)
{
  amrex::GpuArray<amrex::Real, 4489> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 66> conc = {0.0};
  for (int n = 0; n < 66; n++) {
    conc[n] = 1.0 / 66.000000;
  }
  aJacobian(Jac.data(), conc.data(), 1500.0, *consP);

  int nJdata_tmp = 0;
  for (int k = 0; k < 67; k++) {
    for (int l = 0; l < 67; l++) {
      if (k == l) {
        nJdata_tmp = nJdata_tmp + 1;
      } else {
        if (Jac[67 * k + l] != 0.0) {
          nJdata_tmp = nJdata_tmp + 1;
        }
      }
    }
  }

  *nJdata = NCELLS * nJdata_tmp;
}

// compute the sparsity pattern of the simplified (for preconditioning) system
// Jacobian
void
SPARSITY_INFO_SYST_SIMPLIFIED(int* nJdata, const int* consP)
{
  amrex::GpuArray<amrex::Real, 4489> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 66> conc = {0.0};
  for (int n = 0; n < 66; n++) {
    conc[n] = 1.0 / 66.000000;
  }
  aJacobian_precond(Jac.data(), conc.data(), 1500.0, *consP);

  int nJdata_tmp = 0;
  for (int k = 0; k < 67; k++) {
    for (int l = 0; l < 67; l++) {
      if (k == l) {
        nJdata_tmp = nJdata_tmp + 1;
      } else {
        if (Jac[67 * k + l] != 0.0) {
          nJdata_tmp = nJdata_tmp + 1;
        }
      }
    }
  }

  nJdata[0] = nJdata_tmp;
}

// compute the sparsity pattern of the chemistry Jacobian in CSC format -- base
// 0
void
SPARSITY_PREPROC_CSC(int* rowVals, int* colPtrs, const int* consP, int NCELLS)
{
  amrex::GpuArray<amrex::Real, 4489> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 66> conc = {0.0};
  for (int n = 0; n < 66; n++) {
    conc[n] = 1.0 / 66.000000;
  }
  aJacobian(Jac.data(), conc.data(), 1500.0, *consP);

  colPtrs[0] = 0;
  int nJdata_tmp = 0;
  for (int nc = 0; nc < NCELLS; nc++) {
    int offset_row = nc * 67;
    int offset_col = nc * 67;
    for (int k = 0; k < 67; k++) {
      for (int l = 0; l < 67; l++) {
        if (Jac[67 * k + l] != 0.0) {
          rowVals[nJdata_tmp] = l + offset_row;
          nJdata_tmp = nJdata_tmp + 1;
        }
      }
      colPtrs[offset_col + (k + 1)] = nJdata_tmp;
    }
  }
}

// compute the sparsity pattern of the chemistry Jacobian in CSR format -- base
// 0
void
SPARSITY_PREPROC_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base)
{
  amrex::GpuArray<amrex::Real, 4489> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 66> conc = {0.0};
  for (int n = 0; n < 66; n++) {
    conc[n] = 1.0 / 66.000000;
  }
  aJacobian(Jac.data(), conc.data(), 1500.0, *consP);

  if (base == 1) {
    rowPtrs[0] = 1;
    int nJdata_tmp = 1;
    for (int nc = 0; nc < NCELLS; nc++) {
      int offset = nc * 67;
      for (int l = 0; l < 67; l++) {
        for (int k = 0; k < 67; k++) {
          if (Jac[67 * k + l] != 0.0) {
            colVals[nJdata_tmp - 1] = k + 1 + offset;
            nJdata_tmp = nJdata_tmp + 1;
          }
        }
        rowPtrs[offset + (l + 1)] = nJdata_tmp;
      }
    }
  } else {
    rowPtrs[0] = 0;
    int nJdata_tmp = 0;
    for (int nc = 0; nc < NCELLS; nc++) {
      int offset = nc * 67;
      for (int l = 0; l < 67; l++) {
        for (int k = 0; k < 67; k++) {
          if (Jac[67 * k + l] != 0.0) {
            colVals[nJdata_tmp] = k + offset;
            nJdata_tmp = nJdata_tmp + 1;
          }
        }
        rowPtrs[offset + (l + 1)] = nJdata_tmp;
      }
    }
  }
}

// compute the sparsity pattern of the system Jacobian
// CSR format BASE is user choice
void
SPARSITY_PREPROC_SYST_CSR(
  int* colVals, int* rowPtr, const int* consP, int NCELLS, int base)
{
  amrex::GpuArray<amrex::Real, 4489> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 66> conc = {0.0};
  for (int n = 0; n < 66; n++) {
    conc[n] = 1.0 / 66.000000;
  }
  aJacobian(Jac.data(), conc.data(), 1500.0, *consP);

  if (base == 1) {
    rowPtr[0] = 1;
    int nJdata_tmp = 1;
    for (int nc = 0; nc < NCELLS; nc++) {
      int offset = nc * 67;
      for (int l = 0; l < 67; l++) {
        for (int k = 0; k < 67; k++) {
          if (k == l) {
            colVals[nJdata_tmp - 1] = l + 1 + offset;
            nJdata_tmp = nJdata_tmp + 1;
          } else {
            if (Jac[67 * k + l] != 0.0) {
              colVals[nJdata_tmp - 1] = k + 1 + offset;
              nJdata_tmp = nJdata_tmp + 1;
            }
          }
        }
        rowPtr[offset + (l + 1)] = nJdata_tmp;
      }
    }
  } else {
    rowPtr[0] = 0;
    int nJdata_tmp = 0;
    for (int nc = 0; nc < NCELLS; nc++) {
      int offset = nc * 67;
      for (int l = 0; l < 67; l++) {
        for (int k = 0; k < 67; k++) {
          if (k == l) {
            colVals[nJdata_tmp] = l + offset;
            nJdata_tmp = nJdata_tmp + 1;
          } else {
            if (Jac[67 * k + l] != 0.0) {
              colVals[nJdata_tmp] = k + offset;
              nJdata_tmp = nJdata_tmp + 1;
            }
          }
        }
        rowPtr[offset + (l + 1)] = nJdata_tmp;
      }
    }
  }
}

// compute the sparsity pattern of the simplified (for precond) system Jacobian
// on CPU BASE 0
void
SPARSITY_PREPROC_SYST_SIMPLIFIED_CSC(
  int* rowVals, int* colPtrs, int* indx, const int* consP)
{
  amrex::GpuArray<amrex::Real, 4489> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 66> conc = {0.0};
  for (int n = 0; n < 66; n++) {
    conc[n] = 1.0 / 66.000000;
  }
  aJacobian_precond(Jac.data(), conc.data(), 1500.0, *consP);

  colPtrs[0] = 0;
  int nJdata_tmp = 0;
  for (int k = 0; k < 67; k++) {
    for (int l = 0; l < 67; l++) {
      if (k == l) {
        rowVals[nJdata_tmp] = l;
        indx[nJdata_tmp] = 67 * k + l;
        nJdata_tmp = nJdata_tmp + 1;
      } else {
        if (Jac[67 * k + l] != 0.0) {
          rowVals[nJdata_tmp] = l;
          indx[nJdata_tmp] = 67 * k + l;
          nJdata_tmp = nJdata_tmp + 1;
        }
      }
    }
    colPtrs[k + 1] = nJdata_tmp;
  }
}

// compute the sparsity pattern of the simplified (for precond) system Jacobian
// CSR format BASE is under choice
void
SPARSITY_PREPROC_SYST_SIMPLIFIED_CSR(
  int* colVals, int* rowPtr, const int* consP, int base)
{
  amrex::GpuArray<amrex::Real, 4489> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 66> conc = {0.0};
  for (int n = 0; n < 66; n++) {
    conc[n] = 1.0 / 66.000000;
  }
  aJacobian_precond(Jac.data(), conc.data(), 1500.0, *consP);

  if (base == 1) {
    rowPtr[0] = 1;
    int nJdata_tmp = 1;
    for (int l = 0; l < 67; l++) {
      for (int k = 0; k < 67; k++) {
        if (k == l) {
          colVals[nJdata_tmp - 1] = l + 1;
          nJdata_tmp = nJdata_tmp + 1;
        } else {
          if (Jac[67 * k + l] != 0.0) {
            colVals[nJdata_tmp - 1] = k + 1;
            nJdata_tmp = nJdata_tmp + 1;
          }
        }
      }
      rowPtr[l + 1] = nJdata_tmp;
    }
  } else {
    rowPtr[0] = 0;
    int nJdata_tmp = 0;
    for (int l = 0; l < 67; l++) {
      for (int k = 0; k < 67; k++) {
        if (k == l) {
          colVals[nJdata_tmp] = l;
          nJdata_tmp = nJdata_tmp + 1;
        } else {
          if (Jac[67 * k + l] != 0.0) {
            colVals[nJdata_tmp] = k;
            nJdata_tmp = nJdata_tmp + 1;
          }
        }
      }
      rowPtr[l + 1] = nJdata_tmp;
    }
  }
}
