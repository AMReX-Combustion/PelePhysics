#ifndef MECHANISM_H
#define MECHANISM_H

#include <AMReX_Gpu.H>
#include <AMReX_REAL.H>

/* Elements
0  O
1  H
2  C
3  N
4  Ar
*/

// Species
#define H2_ID 0
#define H_ID 1
#define O_ID 2
#define O2_ID 3
#define OH_ID 4
#define H2O_ID 5
#define HO2_ID 6
#define H2O2_ID 7
#define C_ID 8
#define CH_ID 9
#define CH2_ID 10
#define CH2S_ID 11
#define CH3_ID 12
#define CH4_ID 13
#define CO_ID 14
#define CO2_ID 15
#define HCO_ID 16
#define CH2O_ID 17
#define CH2OH_ID 18
#define CH3O_ID 19
#define CH3OH_ID 20
#define C2H_ID 21
#define C2H2_ID 22
#define C2H3_ID 23
#define C2H4_ID 24
#define C2H5_ID 25
#define C2H6_ID 26
#define HCCO_ID 27
#define CH2CO_ID 28
#define HCCOH_ID 29
#define N2_ID 30
#define AR_ID 31

#define NUM_ELEMENTS 5
#define NUM_SPECIES 32
#define NUM_IONS 0
#define NUM_REACTIONS 177

#define NUM_FIT 4

//  ALWAYS on CPU stuff -- can have different def depending on if we are CPU or
//  GPU based. Defined in mechanism.cpp
void atomicWeight(amrex::Real* awt);
//  MISC
void CKAWT(amrex::Real* awt);
void CKNCF(int* ncf);
void CKSYME_STR(amrex::Vector<std::string>& ename);
void CKSYMS_STR(amrex::Vector<std::string>& kname);
void GET_RMAP(int* _rmap);
void CKINU(const int i, int& nspec, int* ki, int* nu);
void CKKFKR(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real* x,
  amrex::Real* q_f,
  amrex::Real* q_r);
void progressRateFR(
  amrex::Real* q_f, amrex::Real* q_r, amrex::Real* sc, amrex::Real T);
//  SPARSE INFORMATION
void SPARSITY_INFO(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST_SIMPLIFIED(int* nJdata, const int* consP);
void
SPARSITY_PREPROC_CSC(int* rowVals, int* colPtrs, const int* consP, int NCELLS);
void SPARSITY_PREPROC_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSC(
  int* rowVals, int* colPtrs, int* indx, const int* consP);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSR(
  int* colVals, int* rowPtr, const int* consP, int base);

// A few mechanism parameters
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKINDX(int& mm, int& kk, int& ii, int& nfit)
{
  mm = 5;
  kk = 32;
  ii = 177;
  nfit = -1; // Why do you need this anyway ?
}

//  inverse molecular weights
AMREX_GPU_CONSTANT const amrex::Real global_imw[32] = {
  0.4960317460317460, // H2
  0.9920634920634921, // H
  0.0625039064941559, // O
  0.0312519532470779, // O2
  0.0587993179279120, // OH
  0.0555092978073827, // H2O
  0.0302975216627280, // HO2
  0.0293996589639560, // H2O2
  0.0832570144034635, // C
  0.0768108149627468, // CH
  0.0712910814857061, // CH2
  0.0712910814857061, // CH2(S)
  0.0665114732291320, // CH3
  0.0623324814560868, // CH4
  0.0357015351660121, // CO
  0.0227226249176305, // CO2
  0.0344613688055690, // HCO
  0.0333044694598015, // CH2O
  0.0322227234645872, // CH2OH
  0.0322227234645872, // CH3O
  0.0312090381374446, // CH3OH
  0.0399520575309628, // C2H
  0.0384054074813734, // C2H2
  0.0369740442209569, // C2H3
  0.0356455407428531, // C2H4
  0.0344091941366733, // C2H5
  0.0332557366145660, // C2H6
  0.0243730044602598, // HCCO
  0.0237885672145967, // CH2CO
  0.0237885672145967, // HCCOH
  0.0356964374955379, // N2
  0.0250312891113892, // AR
};
const amrex::Real h_global_imw[32] = {
  0.4960317460317460, // H2
  0.9920634920634921, // H
  0.0625039064941559, // O
  0.0312519532470779, // O2
  0.0587993179279120, // OH
  0.0555092978073827, // H2O
  0.0302975216627280, // HO2
  0.0293996589639560, // H2O2
  0.0832570144034635, // C
  0.0768108149627468, // CH
  0.0712910814857061, // CH2
  0.0712910814857061, // CH2(S)
  0.0665114732291320, // CH3
  0.0623324814560868, // CH4
  0.0357015351660121, // CO
  0.0227226249176305, // CO2
  0.0344613688055690, // HCO
  0.0333044694598015, // CH2O
  0.0322227234645872, // CH2OH
  0.0322227234645872, // CH3O
  0.0312090381374446, // CH3OH
  0.0399520575309628, // C2H
  0.0384054074813734, // C2H2
  0.0369740442209569, // C2H3
  0.0356455407428531, // C2H4
  0.0344091941366733, // C2H5
  0.0332557366145660, // C2H6
  0.0243730044602598, // HCCO
  0.0237885672145967, // CH2CO
  0.0237885672145967, // HCCOH
  0.0356964374955379, // N2
  0.0250312891113892, // AR
};

//  molecular weights
AMREX_GPU_CONSTANT const amrex::Real global_mw[32] = {
  2.016000,  // H2
  1.008000,  // H
  15.999000, // O
  31.998000, // O2
  17.007000, // OH
  18.015000, // H2O
  33.006000, // HO2
  34.014000, // H2O2
  12.011000, // C
  13.019000, // CH
  14.027000, // CH2
  14.027000, // CH2(S)
  15.035000, // CH3
  16.043000, // CH4
  28.010000, // CO
  44.009000, // CO2
  29.018000, // HCO
  30.026000, // CH2O
  31.034000, // CH2OH
  31.034000, // CH3O
  32.042000, // CH3OH
  25.030000, // C2H
  26.038000, // C2H2
  27.046000, // C2H3
  28.054000, // C2H4
  29.062000, // C2H5
  30.070000, // C2H6
  41.029000, // HCCO
  42.037000, // CH2CO
  42.037000, // HCCOH
  28.014000, // N2
  39.950000, // AR
};
const amrex::Real h_global_mw[32] = {
  2.016000,  // H2
  1.008000,  // H
  15.999000, // O
  31.998000, // O2
  17.007000, // OH
  18.015000, // H2O
  33.006000, // HO2
  34.014000, // H2O2
  12.011000, // C
  13.019000, // CH
  14.027000, // CH2
  14.027000, // CH2(S)
  15.035000, // CH3
  16.043000, // CH4
  28.010000, // CO
  44.009000, // CO2
  29.018000, // HCO
  30.026000, // CH2O
  31.034000, // CH2OH
  31.034000, // CH3O
  32.042000, // CH3OH
  25.030000, // C2H
  26.038000, // C2H2
  27.046000, // C2H3
  28.054000, // C2H4
  29.062000, // C2H5
  30.070000, // C2H6
  41.029000, // HCCO
  42.037000, // CH2CO
  42.037000, // HCCOH
  28.014000, // N2
  39.950000, // AR
};

//  inverse molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_imw(amrex::Real* imw_new)
{
  imw_new[0] = 0.4960317460317460;  // H2
  imw_new[1] = 0.9920634920634921;  // H
  imw_new[2] = 0.0625039064941559;  // O
  imw_new[3] = 0.0312519532470779;  // O2
  imw_new[4] = 0.0587993179279120;  // OH
  imw_new[5] = 0.0555092978073827;  // H2O
  imw_new[6] = 0.0302975216627280;  // HO2
  imw_new[7] = 0.0293996589639560;  // H2O2
  imw_new[8] = 0.0832570144034635;  // C
  imw_new[9] = 0.0768108149627468;  // CH
  imw_new[10] = 0.0712910814857061; // CH2
  imw_new[11] = 0.0712910814857061; // CH2(S)
  imw_new[12] = 0.0665114732291320; // CH3
  imw_new[13] = 0.0623324814560868; // CH4
  imw_new[14] = 0.0357015351660121; // CO
  imw_new[15] = 0.0227226249176305; // CO2
  imw_new[16] = 0.0344613688055690; // HCO
  imw_new[17] = 0.0333044694598015; // CH2O
  imw_new[18] = 0.0322227234645872; // CH2OH
  imw_new[19] = 0.0322227234645872; // CH3O
  imw_new[20] = 0.0312090381374446; // CH3OH
  imw_new[21] = 0.0399520575309628; // C2H
  imw_new[22] = 0.0384054074813734; // C2H2
  imw_new[23] = 0.0369740442209569; // C2H3
  imw_new[24] = 0.0356455407428531; // C2H4
  imw_new[25] = 0.0344091941366733; // C2H5
  imw_new[26] = 0.0332557366145660; // C2H6
  imw_new[27] = 0.0243730044602598; // HCCO
  imw_new[28] = 0.0237885672145967; // CH2CO
  imw_new[29] = 0.0237885672145967; // HCCOH
  imw_new[30] = 0.0356964374955379; // N2
  imw_new[31] = 0.0250312891113892; // AR
}

//  inverse molecular weight
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
imw(const int n)
{
#if AMREX_DEVICE_COMPILE
  return global_imw[n];
#else
  return h_global_imw[n];
#endif
}
//  molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_mw(amrex::Real* mw_new)
{
  mw_new[0] = 2.016000;   // H2
  mw_new[1] = 1.008000;   // H
  mw_new[2] = 15.999000;  // O
  mw_new[3] = 31.998000;  // O2
  mw_new[4] = 17.007000;  // OH
  mw_new[5] = 18.015000;  // H2O
  mw_new[6] = 33.006000;  // HO2
  mw_new[7] = 34.014000;  // H2O2
  mw_new[8] = 12.011000;  // C
  mw_new[9] = 13.019000;  // CH
  mw_new[10] = 14.027000; // CH2
  mw_new[11] = 14.027000; // CH2(S)
  mw_new[12] = 15.035000; // CH3
  mw_new[13] = 16.043000; // CH4
  mw_new[14] = 28.010000; // CO
  mw_new[15] = 44.009000; // CO2
  mw_new[16] = 29.018000; // HCO
  mw_new[17] = 30.026000; // CH2O
  mw_new[18] = 31.034000; // CH2OH
  mw_new[19] = 31.034000; // CH3O
  mw_new[20] = 32.042000; // CH3OH
  mw_new[21] = 25.030000; // C2H
  mw_new[22] = 26.038000; // C2H2
  mw_new[23] = 27.046000; // C2H3
  mw_new[24] = 28.054000; // C2H4
  mw_new[25] = 29.062000; // C2H5
  mw_new[26] = 30.070000; // C2H6
  mw_new[27] = 41.029000; // HCCO
  mw_new[28] = 42.037000; // CH2CO
  mw_new[29] = 42.037000; // HCCOH
  mw_new[30] = 28.014000; // N2
  mw_new[31] = 39.950000; // AR
}

//  molecular weight
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
mw(const int n)
{
#if AMREX_DEVICE_COMPILE
  return global_mw[n];
#else
  return h_global_mw[n];
#endif
}

//  Returns R, Rc, Patm
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRP(amrex::Real& ru, amrex::Real& ruc, amrex::Real& pa)
{
  ru = 8.31446261815324e+07;
  ruc = 1.98721558317399615845;
  pa = 1.01325e+06;
}

// compute Cv/R at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cv_R(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +1.34433112e+00 + 7.98052075e-03 * tc[1] -
                 1.94781510e-05 * tc[2] + 2.01572094e-08 * tc[3] -
                 7.37611761e-12 * tc[4];
    // species 1: H
    species[1] = +1.50000000e+00 + 7.05332819e-13 * tc[1] -
                 1.99591964e-15 * tc[2] + 2.30081632e-18 * tc[3] -
                 9.27732332e-22 * tc[4];
    // species 2: O
    species[2] = +2.16826710e+00 - 3.27931884e-03 * tc[1] +
                 6.64306396e-06 * tc[2] - 6.12806624e-09 * tc[3] +
                 2.11265971e-12 * tc[4];
    // species 3: O2
    species[3] = +2.78245636e+00 - 2.99673416e-03 * tc[1] +
                 9.84730201e-06 * tc[2] - 9.68129509e-09 * tc[3] +
                 3.24372837e-12 * tc[4];
    // species 4: OH
    species[4] = +2.99201543e+00 - 2.40131752e-03 * tc[1] +
                 4.61793841e-06 * tc[2] - 3.88113333e-09 * tc[3] +
                 1.36411470e-12 * tc[4];
    // species 5: H2O
    species[5] = +3.19864056e+00 - 2.03643410e-03 * tc[1] +
                 6.52040211e-06 * tc[2] - 5.48797062e-09 * tc[3] +
                 1.77197817e-12 * tc[4];
    // species 6: HO2
    species[6] = +3.30179801e+00 - 4.74912051e-03 * tc[1] +
                 2.11582891e-05 * tc[2] - 2.42763894e-08 * tc[3] +
                 9.29225124e-12 * tc[4];
    // species 7: H2O2
    species[7] = +3.27611269e+00 - 5.42822417e-04 * tc[1] +
                 1.67335701e-05 * tc[2] - 2.15770813e-08 * tc[3] +
                 8.62454363e-12 * tc[4];
    // species 8: C
    species[8] = +1.55423955e+00 - 3.21537724e-04 * tc[1] +
                 7.33792245e-07 * tc[2] - 7.32234889e-10 * tc[3] +
                 2.66521446e-13 * tc[4];
    // species 9: CH
    species[9] = +2.48981665e+00 + 3.23835541e-04 * tc[1] -
                 1.68899065e-06 * tc[2] + 3.16217327e-09 * tc[3] -
                 1.40609067e-12 * tc[4];
    // species 10: CH2
    species[10] = +2.76267867e+00 + 9.68872143e-04 * tc[1] +
                  2.79489841e-06 * tc[2] - 3.85091153e-09 * tc[3] +
                  1.68741719e-12 * tc[4];
    // species 11: CH2(S)
    species[11] = +3.19860411e+00 - 2.36661419e-03 * tc[1] +
                  8.23296220e-06 * tc[2] - 6.68815981e-09 * tc[3] +
                  1.94314737e-12 * tc[4];
    // species 12: CH3
    species[12] = +2.67359040e+00 + 2.01095175e-03 * tc[1] +
                  5.73021856e-06 * tc[2] - 6.87117425e-09 * tc[3] +
                  2.54385734e-12 * tc[4];
    // species 13: CH4
    species[13] = +4.14987613e+00 - 1.36709788e-02 * tc[1] +
                  4.91800599e-05 * tc[2] - 4.84743026e-08 * tc[3] +
                  1.66693956e-11 * tc[4];
    // species 14: CO
    species[14] = +2.57953347e+00 - 6.10353680e-04 * tc[1] +
                  1.01681433e-06 * tc[2] + 9.07005884e-10 * tc[3] -
                  9.04424499e-13 * tc[4];
    // species 15: CO2
    species[15] = +1.35677352e+00 + 8.98459677e-03 * tc[1] -
                  7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                  1.43699548e-13 * tc[4];
    // species 16: HCO
    species[16] = +3.22118584e+00 - 3.24392532e-03 * tc[1] +
                  1.37799446e-05 * tc[2] - 1.33144093e-08 * tc[3] +
                  4.33768865e-12 * tc[4];
    // species 17: CH2O
    species[17] = +3.79372315e+00 - 9.90833369e-03 * tc[1] +
                  3.73220008e-05 * tc[2] - 3.79285261e-08 * tc[3] +
                  1.31772652e-11 * tc[4];
    // species 18: CH2OH
    species[18] = +2.86388918e+00 + 5.59672304e-03 * tc[1] +
                  5.93271791e-06 * tc[2] - 1.04532012e-08 * tc[3] +
                  4.36967278e-12 * tc[4];
    // species 19: CH3O
    species[19] = +1.10620400e+00 + 7.21659500e-03 * tc[1] +
                  5.33847200e-06 * tc[2] - 7.37763600e-09 * tc[3] +
                  2.07561000e-12 * tc[4];
    // species 20: CH3OH
    species[20] = +4.71539582e+00 - 1.52309129e-02 * tc[1] +
                  6.52441155e-05 * tc[2] - 7.10806889e-08 * tc[3] +
                  2.61352698e-11 * tc[4];
    // species 21: C2H
    species[21] = +1.88965733e+00 + 1.34099611e-02 * tc[1] -
                  2.84769501e-05 * tc[2] + 2.94791045e-08 * tc[3] -
                  1.09331511e-11 * tc[4];
    // species 22: C2H2
    species[22] = -1.91318906e-01 + 2.33615629e-02 * tc[1] -
                  3.55171815e-05 * tc[2] + 2.80152437e-08 * tc[3] -
                  8.50072974e-12 * tc[4];
    // species 23: C2H3
    species[23] = +2.21246645e+00 + 1.51479162e-03 * tc[1] +
                  2.59209412e-05 * tc[2] - 3.57657847e-08 * tc[3] +
                  1.47150873e-11 * tc[4];
    // species 24: C2H4
    species[24] = +2.95920148e+00 - 7.57052247e-03 * tc[1] +
                  5.70990292e-05 * tc[2] - 6.91588753e-08 * tc[3] +
                  2.69884373e-11 * tc[4];
    // species 25: C2H5
    species[25] = +3.30646568e+00 - 4.18658892e-03 * tc[1] +
                  4.97142807e-05 * tc[2] - 5.99126606e-08 * tc[3] +
                  2.30509004e-11 * tc[4];
    // species 26: C2H6
    species[26] = +3.29142492e+00 - 5.50154270e-03 * tc[1] +
                  5.99438288e-05 * tc[2] - 7.08466285e-08 * tc[3] +
                  2.68685771e-11 * tc[4];
    // species 27: HCCO
    species[27] = +1.25172140e+00 + 1.76550210e-02 * tc[1] -
                  2.37291010e-05 * tc[2] + 1.72757590e-08 * tc[3] -
                  5.06648110e-12 * tc[4];
    // species 28: CH2CO
    species[28] = +1.13583630e+00 + 1.81188721e-02 * tc[1] -
                  1.73947474e-05 * tc[2] + 9.34397568e-09 * tc[3] -
                  2.01457615e-12 * tc[4];
    // species 29: HCCOH
    species[29] = +2.42373300e-01 + 3.10722010e-02 * tc[1] -
                  5.08668640e-05 * tc[2] + 4.31371310e-08 * tc[3] -
                  1.40145940e-11 * tc[4];
    // species 30: N2
    species[30] = +2.29867700e+00 + 1.40824040e-03 * tc[1] -
                  3.96322200e-06 * tc[2] + 5.64151500e-09 * tc[3] -
                  2.44485400e-12 * tc[4];
  } else {
    // species 0: H2
    species[0] = +2.33727920e+00 - 4.94024731e-05 * tc[1] +
                 4.99456778e-07 * tc[2] - 1.79566394e-10 * tc[3] +
                 2.00255376e-14 * tc[4];
    // species 1: H
    species[1] = +1.50000001e+00 - 2.30842973e-11 * tc[1] +
                 1.61561948e-14 * tc[2] - 4.73515235e-18 * tc[3] +
                 4.98197357e-22 * tc[4];
    // species 2: O
    species[2] = +1.56942078e+00 - 8.59741137e-05 * tc[1] +
                 4.19484589e-08 * tc[2] - 1.00177799e-11 * tc[3] +
                 1.22833691e-15 * tc[4];
    // species 3: O2
    species[3] = +2.28253784e+00 + 1.48308754e-03 * tc[1] -
                 7.57966669e-07 * tc[2] + 2.09470555e-10 * tc[3] -
                 2.16717794e-14 * tc[4];
    // species 4: OH
    species[4] = +2.09288767e+00 + 5.48429716e-04 * tc[1] +
                 1.26505228e-07 * tc[2] - 8.79461556e-11 * tc[3] +
                 1.17412376e-14 * tc[4];
    // species 5: H2O
    species[5] = +2.03399249e+00 + 2.17691804e-03 * tc[1] -
                 1.64072518e-07 * tc[2] - 9.70419870e-11 * tc[3] +
                 1.68200992e-14 * tc[4];
    // species 6: HO2
    species[6] = +3.01721090e+00 + 2.23982013e-03 * tc[1] -
                 6.33658150e-07 * tc[2] + 1.14246370e-10 * tc[3] -
                 1.07908535e-14 * tc[4];
    // species 7: H2O2
    species[7] = +3.16500285e+00 + 4.90831694e-03 * tc[1] -
                 1.90139225e-06 * tc[2] + 3.71185986e-10 * tc[3] -
                 2.87908305e-14 * tc[4];
    // species 8: C
    species[8] = +1.49266888e+00 + 4.79889284e-05 * tc[1] -
                 7.24335020e-08 * tc[2] + 3.74291029e-11 * tc[3] -
                 4.87277893e-15 * tc[4];
    // species 9: CH
    species[9] = +1.87846473e+00 + 9.70913681e-04 * tc[1] +
                 1.44445655e-07 * tc[2] - 1.30687849e-10 * tc[3] +
                 1.76079383e-14 * tc[4];
    // species 10: CH2
    species[10] = +1.87410113e+00 + 3.65639292e-03 * tc[1] -
                  1.40894597e-06 * tc[2] + 2.60179549e-10 * tc[3] -
                  1.87727567e-14 * tc[4];
    // species 11: CH2(S)
    species[11] = +1.29203842e+00 + 4.65588637e-03 * tc[1] -
                  2.01191947e-06 * tc[2] + 4.17906000e-10 * tc[3] -
                  3.39716365e-14 * tc[4];
    // species 12: CH3
    species[12] = +1.28571772e+00 + 7.23990037e-03 * tc[1] -
                  2.98714348e-06 * tc[2] + 5.95684644e-10 * tc[3] -
                  4.67154394e-14 * tc[4];
    // species 13: CH4
    species[13] = -9.25148505e-01 + 1.33909467e-02 * tc[1] -
                  5.73285809e-06 * tc[2] + 1.22292535e-09 * tc[3] -
                  1.01815230e-13 * tc[4];
    // species 14: CO
    species[14] = +1.71518561e+00 + 2.06252743e-03 * tc[1] -
                  9.98825771e-07 * tc[2] + 2.30053008e-10 * tc[3] -
                  2.03647716e-14 * tc[4];
    // species 15: CO2
    species[15] = +2.85746029e+00 + 4.41437026e-03 * tc[1] -
                  2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                  4.72084164e-14 * tc[4];
    // species 16: HCO
    species[16] = +1.77217438e+00 + 4.95695526e-03 * tc[1] -
                  2.48445613e-06 * tc[2] + 5.89161778e-10 * tc[3] -
                  5.33508711e-14 * tc[4];
    // species 17: CH2O
    species[17] = +7.60690080e-01 + 9.20000082e-03 * tc[1] -
                  4.42258813e-06 * tc[2] + 1.00641212e-09 * tc[3] -
                  8.83855640e-14 * tc[4];
    // species 18: CH2OH
    species[18] = +2.69266569e+00 + 8.64576797e-03 * tc[1] -
                  3.75101120e-06 * tc[2] + 7.87234636e-10 * tc[3] -
                  6.48554201e-14 * tc[4];
    // species 19: CH3O
    species[19] = +2.77079900e+00 + 7.87149700e-03 * tc[1] -
                  2.65638400e-06 * tc[2] + 3.94443100e-10 * tc[3] -
                  2.11261600e-14 * tc[4];
    // species 20: CH3OH
    species[20] = +7.89707910e-01 + 1.40938292e-02 * tc[1] -
                  6.36500835e-06 * tc[2] + 1.38171085e-09 * tc[3] -
                  1.17060220e-13 * tc[4];
    // species 21: C2H
    species[21] = +2.16780652e+00 + 4.75221902e-03 * tc[1] -
                  1.83787077e-06 * tc[2] + 3.04190252e-10 * tc[3] -
                  1.77232770e-14 * tc[4];
    // species 22: C2H2
    species[22] = +3.14756964e+00 + 5.96166664e-03 * tc[1] -
                  2.37294852e-06 * tc[2] + 4.67412171e-10 * tc[3] -
                  3.61235213e-14 * tc[4];
    // species 23: C2H3
    species[23] = +2.01672400e+00 + 1.03302292e-02 * tc[1] -
                  4.68082349e-06 * tc[2] + 1.01763288e-09 * tc[3] -
                  8.62607041e-14 * tc[4];
    // species 24: C2H4
    species[24] = +1.03611116e+00 + 1.46454151e-02 * tc[1] -
                  6.71077915e-06 * tc[2] + 1.47222923e-09 * tc[3] -
                  1.25706061e-13 * tc[4];
    // species 25: C2H5
    species[25] = +9.54656420e-01 + 1.73972722e-02 * tc[1] -
                  7.98206668e-06 * tc[2] + 1.75217689e-09 * tc[3] -
                  1.49641576e-13 * tc[4];
    // species 26: C2H6
    species[26] = +7.18815000e-02 + 2.16852677e-02 * tc[1] -
                  1.00256067e-05 * tc[2] + 2.21412001e-09 * tc[3] -
                  1.90002890e-13 * tc[4];
    // species 27: HCCO
    species[27] = +4.62820580e+00 + 4.08534010e-03 * tc[1] -
                  1.59345470e-06 * tc[2] + 2.86260520e-10 * tc[3] -
                  1.94078320e-14 * tc[4];
    // species 28: CH2CO
    species[28] = +3.51129732e+00 + 9.00359745e-03 * tc[1] -
                  4.16939635e-06 * tc[2] + 9.23345882e-10 * tc[3] -
                  7.94838201e-14 * tc[4];
    // species 29: HCCOH
    species[29] = +4.92382910e+00 + 6.79236000e-03 * tc[1] -
                  2.56585640e-06 * tc[2] + 4.49878410e-10 * tc[3] -
                  2.99401010e-14 * tc[4];
    // species 30: N2
    species[30] = +1.92664000e+00 + 1.48797680e-03 * tc[1] -
                  5.68476000e-07 * tc[2] + 1.00970380e-10 * tc[3] -
                  6.75335100e-15 * tc[4];
  }

  // species with no change at a midpoint T
  // species 31: AR
  species[31] = +1.50000000e+00 + 0.00000000e+00 * tc[1] +
                0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                0.00000000e+00 * tc[4];
}

// compute Cp/R at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cp_R(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +2.34433112e+00 + 7.98052075e-03 * tc[1] -
                 1.94781510e-05 * tc[2] + 2.01572094e-08 * tc[3] -
                 7.37611761e-12 * tc[4];
    // species 1: H
    species[1] = +2.50000000e+00 + 7.05332819e-13 * tc[1] -
                 1.99591964e-15 * tc[2] + 2.30081632e-18 * tc[3] -
                 9.27732332e-22 * tc[4];
    // species 2: O
    species[2] = +3.16826710e+00 - 3.27931884e-03 * tc[1] +
                 6.64306396e-06 * tc[2] - 6.12806624e-09 * tc[3] +
                 2.11265971e-12 * tc[4];
    // species 3: O2
    species[3] = +3.78245636e+00 - 2.99673416e-03 * tc[1] +
                 9.84730201e-06 * tc[2] - 9.68129509e-09 * tc[3] +
                 3.24372837e-12 * tc[4];
    // species 4: OH
    species[4] = +3.99201543e+00 - 2.40131752e-03 * tc[1] +
                 4.61793841e-06 * tc[2] - 3.88113333e-09 * tc[3] +
                 1.36411470e-12 * tc[4];
    // species 5: H2O
    species[5] = +4.19864056e+00 - 2.03643410e-03 * tc[1] +
                 6.52040211e-06 * tc[2] - 5.48797062e-09 * tc[3] +
                 1.77197817e-12 * tc[4];
    // species 6: HO2
    species[6] = +4.30179801e+00 - 4.74912051e-03 * tc[1] +
                 2.11582891e-05 * tc[2] - 2.42763894e-08 * tc[3] +
                 9.29225124e-12 * tc[4];
    // species 7: H2O2
    species[7] = +4.27611269e+00 - 5.42822417e-04 * tc[1] +
                 1.67335701e-05 * tc[2] - 2.15770813e-08 * tc[3] +
                 8.62454363e-12 * tc[4];
    // species 8: C
    species[8] = +2.55423955e+00 - 3.21537724e-04 * tc[1] +
                 7.33792245e-07 * tc[2] - 7.32234889e-10 * tc[3] +
                 2.66521446e-13 * tc[4];
    // species 9: CH
    species[9] = +3.48981665e+00 + 3.23835541e-04 * tc[1] -
                 1.68899065e-06 * tc[2] + 3.16217327e-09 * tc[3] -
                 1.40609067e-12 * tc[4];
    // species 10: CH2
    species[10] = +3.76267867e+00 + 9.68872143e-04 * tc[1] +
                  2.79489841e-06 * tc[2] - 3.85091153e-09 * tc[3] +
                  1.68741719e-12 * tc[4];
    // species 11: CH2(S)
    species[11] = +4.19860411e+00 - 2.36661419e-03 * tc[1] +
                  8.23296220e-06 * tc[2] - 6.68815981e-09 * tc[3] +
                  1.94314737e-12 * tc[4];
    // species 12: CH3
    species[12] = +3.67359040e+00 + 2.01095175e-03 * tc[1] +
                  5.73021856e-06 * tc[2] - 6.87117425e-09 * tc[3] +
                  2.54385734e-12 * tc[4];
    // species 13: CH4
    species[13] = +5.14987613e+00 - 1.36709788e-02 * tc[1] +
                  4.91800599e-05 * tc[2] - 4.84743026e-08 * tc[3] +
                  1.66693956e-11 * tc[4];
    // species 14: CO
    species[14] = +3.57953347e+00 - 6.10353680e-04 * tc[1] +
                  1.01681433e-06 * tc[2] + 9.07005884e-10 * tc[3] -
                  9.04424499e-13 * tc[4];
    // species 15: CO2
    species[15] = +2.35677352e+00 + 8.98459677e-03 * tc[1] -
                  7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                  1.43699548e-13 * tc[4];
    // species 16: HCO
    species[16] = +4.22118584e+00 - 3.24392532e-03 * tc[1] +
                  1.37799446e-05 * tc[2] - 1.33144093e-08 * tc[3] +
                  4.33768865e-12 * tc[4];
    // species 17: CH2O
    species[17] = +4.79372315e+00 - 9.90833369e-03 * tc[1] +
                  3.73220008e-05 * tc[2] - 3.79285261e-08 * tc[3] +
                  1.31772652e-11 * tc[4];
    // species 18: CH2OH
    species[18] = +3.86388918e+00 + 5.59672304e-03 * tc[1] +
                  5.93271791e-06 * tc[2] - 1.04532012e-08 * tc[3] +
                  4.36967278e-12 * tc[4];
    // species 19: CH3O
    species[19] = +2.10620400e+00 + 7.21659500e-03 * tc[1] +
                  5.33847200e-06 * tc[2] - 7.37763600e-09 * tc[3] +
                  2.07561000e-12 * tc[4];
    // species 20: CH3OH
    species[20] = +5.71539582e+00 - 1.52309129e-02 * tc[1] +
                  6.52441155e-05 * tc[2] - 7.10806889e-08 * tc[3] +
                  2.61352698e-11 * tc[4];
    // species 21: C2H
    species[21] = +2.88965733e+00 + 1.34099611e-02 * tc[1] -
                  2.84769501e-05 * tc[2] + 2.94791045e-08 * tc[3] -
                  1.09331511e-11 * tc[4];
    // species 22: C2H2
    species[22] = +8.08681094e-01 + 2.33615629e-02 * tc[1] -
                  3.55171815e-05 * tc[2] + 2.80152437e-08 * tc[3] -
                  8.50072974e-12 * tc[4];
    // species 23: C2H3
    species[23] = +3.21246645e+00 + 1.51479162e-03 * tc[1] +
                  2.59209412e-05 * tc[2] - 3.57657847e-08 * tc[3] +
                  1.47150873e-11 * tc[4];
    // species 24: C2H4
    species[24] = +3.95920148e+00 - 7.57052247e-03 * tc[1] +
                  5.70990292e-05 * tc[2] - 6.91588753e-08 * tc[3] +
                  2.69884373e-11 * tc[4];
    // species 25: C2H5
    species[25] = +4.30646568e+00 - 4.18658892e-03 * tc[1] +
                  4.97142807e-05 * tc[2] - 5.99126606e-08 * tc[3] +
                  2.30509004e-11 * tc[4];
    // species 26: C2H6
    species[26] = +4.29142492e+00 - 5.50154270e-03 * tc[1] +
                  5.99438288e-05 * tc[2] - 7.08466285e-08 * tc[3] +
                  2.68685771e-11 * tc[4];
    // species 27: HCCO
    species[27] = +2.25172140e+00 + 1.76550210e-02 * tc[1] -
                  2.37291010e-05 * tc[2] + 1.72757590e-08 * tc[3] -
                  5.06648110e-12 * tc[4];
    // species 28: CH2CO
    species[28] = +2.13583630e+00 + 1.81188721e-02 * tc[1] -
                  1.73947474e-05 * tc[2] + 9.34397568e-09 * tc[3] -
                  2.01457615e-12 * tc[4];
    // species 29: HCCOH
    species[29] = +1.24237330e+00 + 3.10722010e-02 * tc[1] -
                  5.08668640e-05 * tc[2] + 4.31371310e-08 * tc[3] -
                  1.40145940e-11 * tc[4];
    // species 30: N2
    species[30] = +3.29867700e+00 + 1.40824040e-03 * tc[1] -
                  3.96322200e-06 * tc[2] + 5.64151500e-09 * tc[3] -
                  2.44485400e-12 * tc[4];
  } else {
    // species 0: H2
    species[0] = +3.33727920e+00 - 4.94024731e-05 * tc[1] +
                 4.99456778e-07 * tc[2] - 1.79566394e-10 * tc[3] +
                 2.00255376e-14 * tc[4];
    // species 1: H
    species[1] = +2.50000001e+00 - 2.30842973e-11 * tc[1] +
                 1.61561948e-14 * tc[2] - 4.73515235e-18 * tc[3] +
                 4.98197357e-22 * tc[4];
    // species 2: O
    species[2] = +2.56942078e+00 - 8.59741137e-05 * tc[1] +
                 4.19484589e-08 * tc[2] - 1.00177799e-11 * tc[3] +
                 1.22833691e-15 * tc[4];
    // species 3: O2
    species[3] = +3.28253784e+00 + 1.48308754e-03 * tc[1] -
                 7.57966669e-07 * tc[2] + 2.09470555e-10 * tc[3] -
                 2.16717794e-14 * tc[4];
    // species 4: OH
    species[4] = +3.09288767e+00 + 5.48429716e-04 * tc[1] +
                 1.26505228e-07 * tc[2] - 8.79461556e-11 * tc[3] +
                 1.17412376e-14 * tc[4];
    // species 5: H2O
    species[5] = +3.03399249e+00 + 2.17691804e-03 * tc[1] -
                 1.64072518e-07 * tc[2] - 9.70419870e-11 * tc[3] +
                 1.68200992e-14 * tc[4];
    // species 6: HO2
    species[6] = +4.01721090e+00 + 2.23982013e-03 * tc[1] -
                 6.33658150e-07 * tc[2] + 1.14246370e-10 * tc[3] -
                 1.07908535e-14 * tc[4];
    // species 7: H2O2
    species[7] = +4.16500285e+00 + 4.90831694e-03 * tc[1] -
                 1.90139225e-06 * tc[2] + 3.71185986e-10 * tc[3] -
                 2.87908305e-14 * tc[4];
    // species 8: C
    species[8] = +2.49266888e+00 + 4.79889284e-05 * tc[1] -
                 7.24335020e-08 * tc[2] + 3.74291029e-11 * tc[3] -
                 4.87277893e-15 * tc[4];
    // species 9: CH
    species[9] = +2.87846473e+00 + 9.70913681e-04 * tc[1] +
                 1.44445655e-07 * tc[2] - 1.30687849e-10 * tc[3] +
                 1.76079383e-14 * tc[4];
    // species 10: CH2
    species[10] = +2.87410113e+00 + 3.65639292e-03 * tc[1] -
                  1.40894597e-06 * tc[2] + 2.60179549e-10 * tc[3] -
                  1.87727567e-14 * tc[4];
    // species 11: CH2(S)
    species[11] = +2.29203842e+00 + 4.65588637e-03 * tc[1] -
                  2.01191947e-06 * tc[2] + 4.17906000e-10 * tc[3] -
                  3.39716365e-14 * tc[4];
    // species 12: CH3
    species[12] = +2.28571772e+00 + 7.23990037e-03 * tc[1] -
                  2.98714348e-06 * tc[2] + 5.95684644e-10 * tc[3] -
                  4.67154394e-14 * tc[4];
    // species 13: CH4
    species[13] = +7.48514950e-02 + 1.33909467e-02 * tc[1] -
                  5.73285809e-06 * tc[2] + 1.22292535e-09 * tc[3] -
                  1.01815230e-13 * tc[4];
    // species 14: CO
    species[14] = +2.71518561e+00 + 2.06252743e-03 * tc[1] -
                  9.98825771e-07 * tc[2] + 2.30053008e-10 * tc[3] -
                  2.03647716e-14 * tc[4];
    // species 15: CO2
    species[15] = +3.85746029e+00 + 4.41437026e-03 * tc[1] -
                  2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                  4.72084164e-14 * tc[4];
    // species 16: HCO
    species[16] = +2.77217438e+00 + 4.95695526e-03 * tc[1] -
                  2.48445613e-06 * tc[2] + 5.89161778e-10 * tc[3] -
                  5.33508711e-14 * tc[4];
    // species 17: CH2O
    species[17] = +1.76069008e+00 + 9.20000082e-03 * tc[1] -
                  4.42258813e-06 * tc[2] + 1.00641212e-09 * tc[3] -
                  8.83855640e-14 * tc[4];
    // species 18: CH2OH
    species[18] = +3.69266569e+00 + 8.64576797e-03 * tc[1] -
                  3.75101120e-06 * tc[2] + 7.87234636e-10 * tc[3] -
                  6.48554201e-14 * tc[4];
    // species 19: CH3O
    species[19] = +3.77079900e+00 + 7.87149700e-03 * tc[1] -
                  2.65638400e-06 * tc[2] + 3.94443100e-10 * tc[3] -
                  2.11261600e-14 * tc[4];
    // species 20: CH3OH
    species[20] = +1.78970791e+00 + 1.40938292e-02 * tc[1] -
                  6.36500835e-06 * tc[2] + 1.38171085e-09 * tc[3] -
                  1.17060220e-13 * tc[4];
    // species 21: C2H
    species[21] = +3.16780652e+00 + 4.75221902e-03 * tc[1] -
                  1.83787077e-06 * tc[2] + 3.04190252e-10 * tc[3] -
                  1.77232770e-14 * tc[4];
    // species 22: C2H2
    species[22] = +4.14756964e+00 + 5.96166664e-03 * tc[1] -
                  2.37294852e-06 * tc[2] + 4.67412171e-10 * tc[3] -
                  3.61235213e-14 * tc[4];
    // species 23: C2H3
    species[23] = +3.01672400e+00 + 1.03302292e-02 * tc[1] -
                  4.68082349e-06 * tc[2] + 1.01763288e-09 * tc[3] -
                  8.62607041e-14 * tc[4];
    // species 24: C2H4
    species[24] = +2.03611116e+00 + 1.46454151e-02 * tc[1] -
                  6.71077915e-06 * tc[2] + 1.47222923e-09 * tc[3] -
                  1.25706061e-13 * tc[4];
    // species 25: C2H5
    species[25] = +1.95465642e+00 + 1.73972722e-02 * tc[1] -
                  7.98206668e-06 * tc[2] + 1.75217689e-09 * tc[3] -
                  1.49641576e-13 * tc[4];
    // species 26: C2H6
    species[26] = +1.07188150e+00 + 2.16852677e-02 * tc[1] -
                  1.00256067e-05 * tc[2] + 2.21412001e-09 * tc[3] -
                  1.90002890e-13 * tc[4];
    // species 27: HCCO
    species[27] = +5.62820580e+00 + 4.08534010e-03 * tc[1] -
                  1.59345470e-06 * tc[2] + 2.86260520e-10 * tc[3] -
                  1.94078320e-14 * tc[4];
    // species 28: CH2CO
    species[28] = +4.51129732e+00 + 9.00359745e-03 * tc[1] -
                  4.16939635e-06 * tc[2] + 9.23345882e-10 * tc[3] -
                  7.94838201e-14 * tc[4];
    // species 29: HCCOH
    species[29] = +5.92382910e+00 + 6.79236000e-03 * tc[1] -
                  2.56585640e-06 * tc[2] + 4.49878410e-10 * tc[3] -
                  2.99401010e-14 * tc[4];
    // species 30: N2
    species[30] = +2.92664000e+00 + 1.48797680e-03 * tc[1] -
                  5.68476000e-07 * tc[2] + 1.00970380e-10 * tc[3] -
                  6.75335100e-15 * tc[4];
  }

  // species with no change at a midpoint T
  // species 31: AR
  species[31] = +2.50000000e+00 + 0.00000000e+00 * tc[1] +
                0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                0.00000000e+00 * tc[4];
}

// compute the g/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
gibbs(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = -9.179351730000000e+02 * invT + 1.661320882000000e+00 -
                 2.344331120000000e+00 * tc[0] - 3.990260375000000e-03 * tc[1] +
                 3.246358500000000e-06 * tc[2] - 1.679767450000000e-09 * tc[3] +
                 3.688058805000000e-13 * tc[4];
    // species 1: H
    species[1] = +2.547365990000000e+04 * invT + 2.946682853000000e+00 -
                 2.500000000000000e+00 * tc[0] - 3.526664095000000e-13 * tc[1] +
                 3.326532733333333e-16 * tc[2] - 1.917346933333333e-19 * tc[3] +
                 4.638661660000000e-23 * tc[4];
    // species 2: O
    species[2] = +2.912225920000000e+04 * invT + 1.116333640000000e+00 -
                 3.168267100000000e+00 * tc[0] + 1.639659420000000e-03 * tc[1] -
                 1.107177326666667e-06 * tc[2] + 5.106721866666666e-10 * tc[3] -
                 1.056329855000000e-13 * tc[4];
    // species 3: O2
    species[3] = -1.063943560000000e+03 * invT + 1.247806300000001e-01 -
                 3.782456360000000e+00 * tc[0] + 1.498367080000000e-03 * tc[1] -
                 1.641217001666667e-06 * tc[2] + 8.067745908333334e-10 * tc[3] -
                 1.621864185000000e-13 * tc[4];
    // species 4: OH
    species[4] = +3.615080560000000e+03 * invT + 4.095940888000000e+00 -
                 3.992015430000000e+00 * tc[0] + 1.200658760000000e-03 * tc[1] -
                 7.696564016666666e-07 * tc[2] + 3.234277775000000e-10 * tc[3] -
                 6.820573500000000e-14 * tc[4];
    // species 5: H2O
    species[5] = -3.029372670000000e+04 * invT + 5.047672768000000e+00 -
                 4.198640560000000e+00 * tc[0] + 1.018217050000000e-03 * tc[1] -
                 1.086733685000000e-06 * tc[2] + 4.573308850000000e-10 * tc[3] -
                 8.859890850000000e-14 * tc[4];
    // species 6: HO2
    species[6] = +2.948080400000000e+02 * invT + 5.851355599999999e-01 -
                 4.301798010000000e+00 * tc[0] + 2.374560255000000e-03 * tc[1] -
                 3.526381516666666e-06 * tc[2] + 2.023032450000000e-09 * tc[3] -
                 4.646125620000001e-13 * tc[4];
    // species 7: H2O2
    species[7] = -1.770258210000000e+04 * invT + 8.410619499999998e-01 -
                 4.276112690000000e+00 * tc[0] + 2.714112085000000e-04 * tc[1] -
                 2.788928350000000e-06 * tc[2] + 1.798090108333333e-09 * tc[3] -
                 4.312271815000000e-13 * tc[4];
    // species 8: C
    species[8] = +8.544388320000000e+04 * invT - 1.977068930000000e+00 -
                 2.554239550000000e+00 * tc[0] + 1.607688620000000e-04 * tc[1] -
                 1.222987075000000e-07 * tc[2] + 6.101957408333333e-11 * tc[3] -
                 1.332607230000000e-14 * tc[4];
    // species 9: CH
    species[9] = +7.079729340000000e+04 * invT + 1.405805570000000e+00 -
                 3.489816650000000e+00 * tc[0] - 1.619177705000000e-04 * tc[1] +
                 2.814984416666667e-07 * tc[2] - 2.635144391666666e-10 * tc[3] +
                 7.030453350000001e-14 * tc[4];
    // species 10: CH2
    species[10] = +4.600404010000000e+04 * invT + 2.200146820000000e+00 -
                  3.762678670000000e+00 * tc[0] -
                  4.844360715000000e-04 * tc[1] -
                  4.658164016666667e-07 * tc[2] +
                  3.209092941666667e-10 * tc[3] - 8.437085950000000e-14 * tc[4];
    // species 11: CH2(S)
    species[11] = +5.049681630000000e+04 * invT + 4.967723077000000e+00 -
                  4.198604110000000e+00 * tc[0] +
                  1.183307095000000e-03 * tc[1] -
                  1.372160366666667e-06 * tc[2] +
                  5.573466508333334e-10 * tc[3] - 9.715736850000000e-14 * tc[4];
    // species 12: CH3
    species[12] = +1.644499880000000e+04 * invT + 2.069026070000000e+00 -
                  3.673590400000000e+00 * tc[0] -
                  1.005475875000000e-03 * tc[1] -
                  9.550364266666668e-07 * tc[2] +
                  5.725978541666666e-10 * tc[3] - 1.271928670000000e-13 * tc[4];
    // species 13: CH4
    species[13] = -1.024664760000000e+04 * invT + 9.791179889999999e+00 -
                  5.149876130000000e+00 * tc[0] +
                  6.835489400000000e-03 * tc[1] -
                  8.196676650000000e-06 * tc[2] +
                  4.039525216666667e-09 * tc[3] - 8.334697800000000e-13 * tc[4];
    // species 14: CO
    species[14] = -1.434408600000000e+04 * invT + 7.112418999999992e-02 -
                  3.579533470000000e+00 * tc[0] +
                  3.051768400000000e-04 * tc[1] -
                  1.694690550000000e-07 * tc[2] -
                  7.558382366666667e-11 * tc[3] + 4.522122495000000e-14 * tc[4];
    // species 15: CO2
    species[15] = -4.837196970000000e+04 * invT - 7.544278700000000e+00 -
                  2.356773520000000e+00 * tc[0] -
                  4.492298385000000e-03 * tc[1] +
                  1.187260448333333e-06 * tc[2] -
                  2.049325183333333e-10 * tc[3] + 7.184977399999999e-15 * tc[4];
    // species 16: HCO
    species[16] = +3.839564960000000e+03 * invT + 8.268134100000002e-01 -
                  4.221185840000000e+00 * tc[0] +
                  1.621962660000000e-03 * tc[1] -
                  2.296657433333333e-06 * tc[2] +
                  1.109534108333333e-09 * tc[3] - 2.168844325000000e-13 * tc[4];
    // species 17: CH2O
    species[17] = -1.430895670000000e+04 * invT + 4.190910250000000e+00 -
                  4.793723150000000e+00 * tc[0] +
                  4.954166845000000e-03 * tc[1] -
                  6.220333466666666e-06 * tc[2] +
                  3.160710508333333e-09 * tc[3] - 6.588632600000000e-13 * tc[4];
    // species 18: CH2OH
    species[18] = -3.193913670000000e+03 * invT - 1.609133250000000e+00 -
                  3.863889180000000e+00 * tc[0] -
                  2.798361520000000e-03 * tc[1] -
                  9.887863183333334e-07 * tc[2] +
                  8.711001000000001e-10 * tc[3] - 2.184836390000000e-13 * tc[4];
    // species 19: CH3O
    species[19] = +9.786011000000000e+02 * invT - 1.104597300000000e+01 -
                  2.106204000000000e+00 * tc[0] -
                  3.608297500000000e-03 * tc[1] -
                  8.897453333333333e-07 * tc[2] +
                  6.148030000000000e-10 * tc[3] - 1.037805000000000e-13 * tc[4];
    // species 20: CH3OH
    species[20] = -2.564276560000000e+04 * invT + 7.219494050000001e+00 -
                  5.715395820000000e+00 * tc[0] +
                  7.615456450000000e-03 * tc[1] -
                  1.087401925000000e-05 * tc[2] +
                  5.923390741666667e-09 * tc[3] - 1.306763490000000e-12 * tc[4];
    // species 21: C2H
    species[21] = +6.683939320000001e+04 * invT - 3.333307050000000e+00 -
                  2.889657330000000e+00 * tc[0] -
                  6.704980550000000e-03 * tc[1] +
                  4.746158350000000e-06 * tc[2] -
                  2.456592041666667e-09 * tc[3] + 5.466575550000000e-13 * tc[4];
    // species 22: C2H2
    species[22] = +2.642898070000000e+04 * invT - 1.313102400600000e+01 -
                  8.086810940000000e-01 * tc[0] -
                  1.168078145000000e-02 * tc[1] +
                  5.919530250000000e-06 * tc[2] -
                  2.334603641666667e-09 * tc[3] + 4.250364870000000e-13 * tc[4];
    // species 23: C2H3
    species[23] = +3.485984680000000e+04 * invT - 5.298073800000000e+00 -
                  3.212466450000000e+00 * tc[0] -
                  7.573958100000000e-04 * tc[1] -
                  4.320156866666666e-06 * tc[2] +
                  2.980482058333333e-09 * tc[3] - 7.357543650000000e-13 * tc[4];
    // species 24: C2H4
    species[24] = +5.089775930000000e+03 * invT - 1.381294799999999e-01 -
                  3.959201480000000e+00 * tc[0] +
                  3.785261235000000e-03 * tc[1] -
                  9.516504866666667e-06 * tc[2] +
                  5.763239608333333e-09 * tc[3] - 1.349421865000000e-12 * tc[4];
    // species 25: C2H5
    species[25] = +1.284162650000000e+04 * invT - 4.007435600000004e-01 -
                  4.306465680000000e+00 * tc[0] +
                  2.093294460000000e-03 * tc[1] -
                  8.285713450000000e-06 * tc[2] +
                  4.992721716666666e-09 * tc[3] - 1.152545020000000e-12 * tc[4];
    // species 26: C2H6
    species[26] = -1.152220550000000e+04 * invT + 1.624601760000000e+00 -
                  4.291424920000000e+00 * tc[0] +
                  2.750771350000000e-03 * tc[1] -
                  9.990638133333334e-06 * tc[2] +
                  5.903885708333334e-09 * tc[3] - 1.343428855000000e-12 * tc[4];
    // species 27: HCCO
    species[27] = +2.005944900000000e+04 * invT - 1.023869560000000e+01 -
                  2.251721400000000e+00 * tc[0] -
                  8.827510500000000e-03 * tc[1] +
                  3.954850166666666e-06 * tc[2] -
                  1.439646583333334e-09 * tc[3] + 2.533240550000000e-13 * tc[4];
    // species 28: CH2CO
    species[28] = -7.042918040000000e+03 * invT - 1.007981170000000e+01 -
                  2.135836300000000e+00 * tc[0] -
                  9.059436050000000e-03 * tc[1] +
                  2.899124566666666e-06 * tc[2] -
                  7.786646400000000e-10 * tc[3] + 1.007288075000000e-13 * tc[4];
    // species 29: HCCOH
    species[29] = +8.031614300000000e+03 * invT - 1.263194570000000e+01 -
                  1.242373300000000e+00 * tc[0] -
                  1.553610050000000e-02 * tc[1] +
                  8.477810666666667e-06 * tc[2] -
                  3.594760916666667e-09 * tc[3] + 7.007297000000000e-13 * tc[4];
    // species 30: N2
    species[30] = -1.020899900000000e+03 * invT - 6.516950000000001e-01 -
                  3.298677000000000e+00 * tc[0] -
                  7.041202000000000e-04 * tc[1] +
                  6.605369999999999e-07 * tc[2] -
                  4.701262500000001e-10 * tc[3] + 1.222427000000000e-13 * tc[4];
  } else {
    // species 0: H2
    species[0] = -9.501589220000000e+02 * invT + 6.542302510000000e+00 -
                 3.337279200000000e+00 * tc[0] + 2.470123655000000e-05 * tc[1] -
                 8.324279633333333e-08 * tc[2] + 1.496386616666667e-11 * tc[3] -
                 1.001276880000000e-15 * tc[4];
    // species 1: H
    species[1] = +2.547365990000000e+04 * invT + 2.946682924000000e+00 -
                 2.500000010000000e+00 * tc[0] + 1.154214865000000e-11 * tc[1] -
                 2.692699133333334e-15 * tc[2] + 3.945960291666667e-19 * tc[3] -
                 2.490986785000000e-23 * tc[4];
    // species 2: O
    species[2] = +2.921757910000000e+04 * invT - 2.214917859999999e+00 -
                 2.569420780000000e+00 * tc[0] + 4.298705685000000e-05 * tc[1] -
                 6.991409816666667e-09 * tc[2] + 8.348149916666666e-13 * tc[3] -
                 6.141684549999999e-17 * tc[4];
    // species 3: O2
    species[3] = -1.088457720000000e+03 * invT - 2.170693450000000e+00 -
                 3.282537840000000e+00 * tc[0] - 7.415437700000000e-04 * tc[1] +
                 1.263277781666667e-07 * tc[2] - 1.745587958333333e-11 * tc[3] +
                 1.083588970000000e-15 * tc[4];
    // species 4: OH
    species[4] = +3.858657000000000e+03 * invT - 1.383808430000000e+00 -
                 3.092887670000000e+00 * tc[0] - 2.742148580000000e-04 * tc[1] -
                 2.108420466666667e-08 * tc[2] + 7.328846300000000e-12 * tc[3] -
                 5.870618800000000e-16 * tc[4];
    // species 5: H2O
    species[5] = -3.000429710000000e+04 * invT - 1.932777610000000e+00 -
                 3.033992490000000e+00 * tc[0] - 1.088459020000000e-03 * tc[1] +
                 2.734541966666666e-08 * tc[2] + 8.086832250000000e-12 * tc[3] -
                 8.410049600000000e-16 * tc[4];
    // species 6: HO2
    species[6] = +1.118567130000000e+02 * invT + 2.321087500000001e-01 -
                 4.017210900000000e+00 * tc[0] - 1.119910065000000e-03 * tc[1] +
                 1.056096916666667e-07 * tc[2] - 9.520530833333334e-12 * tc[3] +
                 5.395426750000000e-16 * tc[4];
    // species 7: H2O2
    species[7] = -1.786178770000000e+04 * invT + 1.248846229999999e+00 -
                 4.165002850000000e+00 * tc[0] - 2.454158470000000e-03 * tc[1] +
                 3.168987083333333e-07 * tc[2] - 3.093216550000000e-11 * tc[3] +
                 1.439541525000000e-15 * tc[4];
    // species 8: C
    species[8] = +8.545129530000000e+04 * invT - 2.308834850000000e+00 -
                 2.492668880000000e+00 * tc[0] - 2.399446420000000e-05 * tc[1] +
                 1.207225033333333e-08 * tc[2] - 3.119091908333333e-12 * tc[3] +
                 2.436389465000000e-16 * tc[4];
    // species 9: CH
    species[9] = +7.101243640000001e+04 * invT - 2.606515260000000e+00 -
                 2.878464730000000e+00 * tc[0] - 4.854568405000000e-04 * tc[1] -
                 2.407427583333333e-08 * tc[2] + 1.089065408333333e-11 * tc[3] -
                 8.803969149999999e-16 * tc[4];
    // species 10: CH2
    species[10] = +4.626360400000000e+04 * invT - 3.297092110000000e+00 -
                  2.874101130000000e+00 * tc[0] -
                  1.828196460000000e-03 * tc[1] +
                  2.348243283333333e-07 * tc[2] -
                  2.168162908333333e-11 * tc[3] + 9.386378350000000e-16 * tc[4];
    // species 11: CH2(S)
    species[11] = +5.092599970000000e+04 * invT - 6.334463270000000e+00 -
                  2.292038420000000e+00 * tc[0] -
                  2.327943185000000e-03 * tc[1] +
                  3.353199116666667e-07 * tc[2] -
                  3.482550000000000e-11 * tc[3] + 1.698581825000000e-15 * tc[4];
    // species 12: CH3
    species[12] = +1.677558430000000e+04 * invT - 6.194354070000000e+00 -
                  2.285717720000000e+00 * tc[0] -
                  3.619950185000000e-03 * tc[1] +
                  4.978572466666667e-07 * tc[2] -
                  4.964038700000000e-11 * tc[3] + 2.335771970000000e-15 * tc[4];
    // species 13: CH4
    species[13] = -9.468344590000001e+03 * invT - 1.836246650500000e+01 -
                  7.485149500000000e-02 * tc[0] -
                  6.695473350000000e-03 * tc[1] +
                  9.554763483333333e-07 * tc[2] -
                  1.019104458333333e-10 * tc[3] + 5.090761500000000e-15 * tc[4];
    // species 14: CO
    species[14] = -1.415187240000000e+04 * invT - 5.103502110000000e+00 -
                  2.715185610000000e+00 * tc[0] -
                  1.031263715000000e-03 * tc[1] +
                  1.664709618333334e-07 * tc[2] -
                  1.917108400000000e-11 * tc[3] + 1.018238580000000e-15 * tc[4];
    // species 15: CO2
    species[15] = -4.875916600000000e+04 * invT + 1.585822230000000e+00 -
                  3.857460290000000e+00 * tc[0] -
                  2.207185130000000e-03 * tc[1] +
                  3.691356733333334e-07 * tc[2] -
                  4.362418233333334e-11 * tc[3] + 2.360420820000000e-15 * tc[4];
    // species 16: HCO
    species[16] = +4.011918150000000e+03 * invT - 7.026170540000000e+00 -
                  2.772174380000000e+00 * tc[0] -
                  2.478477630000000e-03 * tc[1] +
                  4.140760216666667e-07 * tc[2] -
                  4.909681483333334e-11 * tc[3] + 2.667543555000000e-15 * tc[4];
    // species 17: CH2O
    species[17] = -1.399583230000000e+04 * invT - 1.189563292000000e+01 -
                  1.760690080000000e+00 * tc[0] -
                  4.600000410000000e-03 * tc[1] +
                  7.370980216666666e-07 * tc[2] -
                  8.386767666666666e-11 * tc[3] + 4.419278200000001e-15 * tc[4];
    // species 18: CH2OH
    species[18] = -3.242506270000000e+03 * invT - 2.117766459999999e+00 -
                  3.692665690000000e+00 * tc[0] -
                  4.322883985000000e-03 * tc[1] +
                  6.251685333333334e-07 * tc[2] -
                  6.560288633333334e-11 * tc[3] + 3.242771005000000e-15 * tc[4];
    // species 19: CH3O
    species[19] = +1.278325200000000e+02 * invT + 8.412240000000000e-01 -
                  3.770799000000000e+00 * tc[0] -
                  3.935748500000000e-03 * tc[1] +
                  4.427306666666667e-07 * tc[2] -
                  3.287025833333333e-11 * tc[3] + 1.056308000000000e-15 * tc[4];
    // species 20: CH3OH
    species[20] = -2.537487470000000e+04 * invT - 1.271265439000000e+01 -
                  1.789707910000000e+00 * tc[0] -
                  7.046914600000000e-03 * tc[1] +
                  1.060834725000000e-06 * tc[2] -
                  1.151425708333333e-10 * tc[3] + 5.853011000000000e-15 * tc[4];
    // species 21: C2H
    species[21] = +6.712106500000000e+04 * invT - 3.468088230000000e+00 -
                  3.167806520000000e+00 * tc[0] -
                  2.376109510000000e-03 * tc[1] +
                  3.063117950000000e-07 * tc[2] -
                  2.534918766666666e-11 * tc[3] + 8.861638500000000e-16 * tc[4];
    // species 22: C2H2
    species[22] = +2.593599920000000e+04 * invT + 5.377850850000001e+00 -
                  4.147569640000000e+00 * tc[0] -
                  2.980833320000000e-03 * tc[1] +
                  3.954914200000000e-07 * tc[2] -
                  3.895101425000000e-11 * tc[3] + 1.806176065000000e-15 * tc[4];
    // species 23: C2H3
    species[23] = +3.461287390000000e+04 * invT - 4.770599780000000e+00 -
                  3.016724000000000e+00 * tc[0] -
                  5.165114600000000e-03 * tc[1] +
                  7.801372483333333e-07 * tc[2] -
                  8.480274000000000e-11 * tc[3] + 4.313035205000000e-15 * tc[4];
    // species 24: C2H4
    species[24] = +4.939886140000000e+03 * invT - 8.269258140000002e+00 -
                  2.036111160000000e+00 * tc[0] -
                  7.322707550000000e-03 * tc[1] +
                  1.118463191666667e-06 * tc[2] -
                  1.226857691666667e-10 * tc[3] + 6.285303050000000e-15 * tc[4];
    // species 25: C2H5
    species[25] = +1.285752000000000e+04 * invT - 1.150777788000000e+01 -
                  1.954656420000000e+00 * tc[0] -
                  8.698636100000001e-03 * tc[1] +
                  1.330344446666667e-06 * tc[2] -
                  1.460147408333333e-10 * tc[3] + 7.482078800000000e-15 * tc[4];
    // species 26: C2H6
    species[26] = -1.142639320000000e+04 * invT - 1.404372920000000e+01 -
                  1.071881500000000e+00 * tc[0] -
                  1.084263385000000e-02 * tc[1] +
                  1.670934450000000e-06 * tc[2] -
                  1.845100008333333e-10 * tc[3] + 9.500144500000000e-15 * tc[4];
    // species 27: HCCO
    species[27] = +1.932721500000000e+04 * invT + 9.558465300000000e+00 -
                  5.628205800000000e+00 * tc[0] -
                  2.042670050000000e-03 * tc[1] +
                  2.655757833333333e-07 * tc[2] -
                  2.385504333333333e-11 * tc[3] + 9.703915999999999e-16 * tc[4];
    // species 28: CH2CO
    species[28] = -7.551053110000000e+03 * invT + 3.879050115000000e+00 -
                  4.511297320000000e+00 * tc[0] -
                  4.501798725000000e-03 * tc[1] +
                  6.948993916666666e-07 * tc[2] -
                  7.694549016666667e-11 * tc[3] + 3.974191005000000e-15 * tc[4];
    // species 29: HCCOH
    species[29] = +7.264626000000000e+03 * invT + 1.352560330000000e+01 -
                  5.923829100000000e+00 * tc[0] -
                  3.396180000000000e-03 * tc[1] +
                  4.276427333333333e-07 * tc[2] -
                  3.748986750000000e-11 * tc[3] + 1.497005050000000e-15 * tc[4];
    // species 30: N2
    species[30] = -9.227977000000000e+02 * invT - 3.053888000000000e+00 -
                  2.926640000000000e+00 * tc[0] -
                  7.439884000000000e-04 * tc[1] +
                  9.474600000000001e-08 * tc[2] -
                  8.414198333333333e-12 * tc[3] + 3.376675500000000e-16 * tc[4];
  }

  // species with no change at a midpoint T
  // species 31: AR
  species[31] = -7.453750000000000e+02 * invT - 1.866000000000000e+00 -
                2.500000000000000e+00 * tc[0] - 0.000000000000000e+00 * tc[1] -
                0.000000000000000e+00 * tc[2] - 0.000000000000000e+00 * tc[3] -
                0.000000000000000e+00 * tc[4];
}

// compute the a/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
helmholtz(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = -9.17935173e+02 * invT + 6.61320882e-01 -
                 2.34433112e+00 * tc[0] - 3.99026037e-03 * tc[1] +
                 3.24635850e-06 * tc[2] - 1.67976745e-09 * tc[3] +
                 3.68805881e-13 * tc[4];
    // species 1: H
    species[1] = +2.54736599e+04 * invT + 1.94668285e+00 -
                 2.50000000e+00 * tc[0] - 3.52666409e-13 * tc[1] +
                 3.32653273e-16 * tc[2] - 1.91734693e-19 * tc[3] +
                 4.63866166e-23 * tc[4];
    // species 2: O
    species[2] = +2.91222592e+04 * invT + 1.16333640e-01 -
                 3.16826710e+00 * tc[0] + 1.63965942e-03 * tc[1] -
                 1.10717733e-06 * tc[2] + 5.10672187e-10 * tc[3] -
                 1.05632985e-13 * tc[4];
    // species 3: O2
    species[3] = -1.06394356e+03 * invT - 8.75219370e-01 -
                 3.78245636e+00 * tc[0] + 1.49836708e-03 * tc[1] -
                 1.64121700e-06 * tc[2] + 8.06774591e-10 * tc[3] -
                 1.62186418e-13 * tc[4];
    // species 4: OH
    species[4] = +3.61508056e+03 * invT + 3.09594089e+00 -
                 3.99201543e+00 * tc[0] + 1.20065876e-03 * tc[1] -
                 7.69656402e-07 * tc[2] + 3.23427778e-10 * tc[3] -
                 6.82057350e-14 * tc[4];
    // species 5: H2O
    species[5] = -3.02937267e+04 * invT + 4.04767277e+00 -
                 4.19864056e+00 * tc[0] + 1.01821705e-03 * tc[1] -
                 1.08673369e-06 * tc[2] + 4.57330885e-10 * tc[3] -
                 8.85989085e-14 * tc[4];
    // species 6: HO2
    species[6] = +2.94808040e+02 * invT - 4.14864440e-01 -
                 4.30179801e+00 * tc[0] + 2.37456025e-03 * tc[1] -
                 3.52638152e-06 * tc[2] + 2.02303245e-09 * tc[3] -
                 4.64612562e-13 * tc[4];
    // species 7: H2O2
    species[7] = -1.77025821e+04 * invT - 1.58938050e-01 -
                 4.27611269e+00 * tc[0] + 2.71411208e-04 * tc[1] -
                 2.78892835e-06 * tc[2] + 1.79809011e-09 * tc[3] -
                 4.31227182e-13 * tc[4];
    // species 8: C
    species[8] = +8.54438832e+04 * invT - 2.97706893e+00 -
                 2.55423955e+00 * tc[0] + 1.60768862e-04 * tc[1] -
                 1.22298707e-07 * tc[2] + 6.10195741e-11 * tc[3] -
                 1.33260723e-14 * tc[4];
    // species 9: CH
    species[9] = +7.07972934e+04 * invT + 4.05805570e-01 -
                 3.48981665e+00 * tc[0] - 1.61917771e-04 * tc[1] +
                 2.81498442e-07 * tc[2] - 2.63514439e-10 * tc[3] +
                 7.03045335e-14 * tc[4];
    // species 10: CH2
    species[10] = +4.60040401e+04 * invT + 1.20014682e+00 -
                  3.76267867e+00 * tc[0] - 4.84436072e-04 * tc[1] -
                  4.65816402e-07 * tc[2] + 3.20909294e-10 * tc[3] -
                  8.43708595e-14 * tc[4];
    // species 11: CH2(S)
    species[11] = +5.04968163e+04 * invT + 3.96772308e+00 -
                  4.19860411e+00 * tc[0] + 1.18330710e-03 * tc[1] -
                  1.37216037e-06 * tc[2] + 5.57346651e-10 * tc[3] -
                  9.71573685e-14 * tc[4];
    // species 12: CH3
    species[12] = +1.64449988e+04 * invT + 1.06902607e+00 -
                  3.67359040e+00 * tc[0] - 1.00547588e-03 * tc[1] -
                  9.55036427e-07 * tc[2] + 5.72597854e-10 * tc[3] -
                  1.27192867e-13 * tc[4];
    // species 13: CH4
    species[13] = -1.02466476e+04 * invT + 8.79117989e+00 -
                  5.14987613e+00 * tc[0] + 6.83548940e-03 * tc[1] -
                  8.19667665e-06 * tc[2] + 4.03952522e-09 * tc[3] -
                  8.33469780e-13 * tc[4];
    // species 14: CO
    species[14] = -1.43440860e+04 * invT - 9.28875810e-01 -
                  3.57953347e+00 * tc[0] + 3.05176840e-04 * tc[1] -
                  1.69469055e-07 * tc[2] - 7.55838237e-11 * tc[3] +
                  4.52212249e-14 * tc[4];
    // species 15: CO2
    species[15] = -4.83719697e+04 * invT - 8.54427870e+00 -
                  2.35677352e+00 * tc[0] - 4.49229839e-03 * tc[1] +
                  1.18726045e-06 * tc[2] - 2.04932518e-10 * tc[3] +
                  7.18497740e-15 * tc[4];
    // species 16: HCO
    species[16] = +3.83956496e+03 * invT - 1.73186590e-01 -
                  4.22118584e+00 * tc[0] + 1.62196266e-03 * tc[1] -
                  2.29665743e-06 * tc[2] + 1.10953411e-09 * tc[3] -
                  2.16884432e-13 * tc[4];
    // species 17: CH2O
    species[17] = -1.43089567e+04 * invT + 3.19091025e+00 -
                  4.79372315e+00 * tc[0] + 4.95416684e-03 * tc[1] -
                  6.22033347e-06 * tc[2] + 3.16071051e-09 * tc[3] -
                  6.58863260e-13 * tc[4];
    // species 18: CH2OH
    species[18] = -3.19391367e+03 * invT - 2.60913325e+00 -
                  3.86388918e+00 * tc[0] - 2.79836152e-03 * tc[1] -
                  9.88786318e-07 * tc[2] + 8.71100100e-10 * tc[3] -
                  2.18483639e-13 * tc[4];
    // species 19: CH3O
    species[19] = +9.78601100e+02 * invT - 1.20459730e+01 -
                  2.10620400e+00 * tc[0] - 3.60829750e-03 * tc[1] -
                  8.89745333e-07 * tc[2] + 6.14803000e-10 * tc[3] -
                  1.03780500e-13 * tc[4];
    // species 20: CH3OH
    species[20] = -2.56427656e+04 * invT + 6.21949405e+00 -
                  5.71539582e+00 * tc[0] + 7.61545645e-03 * tc[1] -
                  1.08740193e-05 * tc[2] + 5.92339074e-09 * tc[3] -
                  1.30676349e-12 * tc[4];
    // species 21: C2H
    species[21] = +6.68393932e+04 * invT - 4.33330705e+00 -
                  2.88965733e+00 * tc[0] - 6.70498055e-03 * tc[1] +
                  4.74615835e-06 * tc[2] - 2.45659204e-09 * tc[3] +
                  5.46657555e-13 * tc[4];
    // species 22: C2H2
    species[22] = +2.64289807e+04 * invT - 1.41310240e+01 -
                  8.08681094e-01 * tc[0] - 1.16807815e-02 * tc[1] +
                  5.91953025e-06 * tc[2] - 2.33460364e-09 * tc[3] +
                  4.25036487e-13 * tc[4];
    // species 23: C2H3
    species[23] = +3.48598468e+04 * invT - 6.29807380e+00 -
                  3.21246645e+00 * tc[0] - 7.57395810e-04 * tc[1] -
                  4.32015687e-06 * tc[2] + 2.98048206e-09 * tc[3] -
                  7.35754365e-13 * tc[4];
    // species 24: C2H4
    species[24] = +5.08977593e+03 * invT - 1.13812948e+00 -
                  3.95920148e+00 * tc[0] + 3.78526124e-03 * tc[1] -
                  9.51650487e-06 * tc[2] + 5.76323961e-09 * tc[3] -
                  1.34942187e-12 * tc[4];
    // species 25: C2H5
    species[25] = +1.28416265e+04 * invT - 1.40074356e+00 -
                  4.30646568e+00 * tc[0] + 2.09329446e-03 * tc[1] -
                  8.28571345e-06 * tc[2] + 4.99272172e-09 * tc[3] -
                  1.15254502e-12 * tc[4];
    // species 26: C2H6
    species[26] = -1.15222055e+04 * invT + 6.24601760e-01 -
                  4.29142492e+00 * tc[0] + 2.75077135e-03 * tc[1] -
                  9.99063813e-06 * tc[2] + 5.90388571e-09 * tc[3] -
                  1.34342886e-12 * tc[4];
    // species 27: HCCO
    species[27] = +2.00594490e+04 * invT - 1.12386956e+01 -
                  2.25172140e+00 * tc[0] - 8.82751050e-03 * tc[1] +
                  3.95485017e-06 * tc[2] - 1.43964658e-09 * tc[3] +
                  2.53324055e-13 * tc[4];
    // species 28: CH2CO
    species[28] = -7.04291804e+03 * invT - 1.10798117e+01 -
                  2.13583630e+00 * tc[0] - 9.05943605e-03 * tc[1] +
                  2.89912457e-06 * tc[2] - 7.78664640e-10 * tc[3] +
                  1.00728807e-13 * tc[4];
    // species 29: HCCOH
    species[29] = +8.03161430e+03 * invT - 1.36319457e+01 -
                  1.24237330e+00 * tc[0] - 1.55361005e-02 * tc[1] +
                  8.47781067e-06 * tc[2] - 3.59476092e-09 * tc[3] +
                  7.00729700e-13 * tc[4];
    // species 30: N2
    species[30] = -1.02089990e+03 * invT - 1.65169500e+00 -
                  3.29867700e+00 * tc[0] - 7.04120200e-04 * tc[1] +
                  6.60537000e-07 * tc[2] - 4.70126250e-10 * tc[3] +
                  1.22242700e-13 * tc[4];
  } else {
    // species 0: H2
    species[0] = -9.50158922e+02 * invT + 5.54230251e+00 -
                 3.33727920e+00 * tc[0] + 2.47012365e-05 * tc[1] -
                 8.32427963e-08 * tc[2] + 1.49638662e-11 * tc[3] -
                 1.00127688e-15 * tc[4];
    // species 1: H
    species[1] = +2.54736599e+04 * invT + 1.94668292e+00 -
                 2.50000001e+00 * tc[0] + 1.15421486e-11 * tc[1] -
                 2.69269913e-15 * tc[2] + 3.94596029e-19 * tc[3] -
                 2.49098679e-23 * tc[4];
    // species 2: O
    species[2] = +2.92175791e+04 * invT - 3.21491786e+00 -
                 2.56942078e+00 * tc[0] + 4.29870569e-05 * tc[1] -
                 6.99140982e-09 * tc[2] + 8.34814992e-13 * tc[3] -
                 6.14168455e-17 * tc[4];
    // species 3: O2
    species[3] = -1.08845772e+03 * invT - 3.17069345e+00 -
                 3.28253784e+00 * tc[0] - 7.41543770e-04 * tc[1] +
                 1.26327778e-07 * tc[2] - 1.74558796e-11 * tc[3] +
                 1.08358897e-15 * tc[4];
    // species 4: OH
    species[4] = +3.85865700e+03 * invT - 2.38380843e+00 -
                 3.09288767e+00 * tc[0] - 2.74214858e-04 * tc[1] -
                 2.10842047e-08 * tc[2] + 7.32884630e-12 * tc[3] -
                 5.87061880e-16 * tc[4];
    // species 5: H2O
    species[5] = -3.00042971e+04 * invT - 2.93277761e+00 -
                 3.03399249e+00 * tc[0] - 1.08845902e-03 * tc[1] +
                 2.73454197e-08 * tc[2] + 8.08683225e-12 * tc[3] -
                 8.41004960e-16 * tc[4];
    // species 6: HO2
    species[6] = +1.11856713e+02 * invT - 7.67891250e-01 -
                 4.01721090e+00 * tc[0] - 1.11991006e-03 * tc[1] +
                 1.05609692e-07 * tc[2] - 9.52053083e-12 * tc[3] +
                 5.39542675e-16 * tc[4];
    // species 7: H2O2
    species[7] = -1.78617877e+04 * invT + 2.48846230e-01 -
                 4.16500285e+00 * tc[0] - 2.45415847e-03 * tc[1] +
                 3.16898708e-07 * tc[2] - 3.09321655e-11 * tc[3] +
                 1.43954153e-15 * tc[4];
    // species 8: C
    species[8] = +8.54512953e+04 * invT - 3.30883485e+00 -
                 2.49266888e+00 * tc[0] - 2.39944642e-05 * tc[1] +
                 1.20722503e-08 * tc[2] - 3.11909191e-12 * tc[3] +
                 2.43638946e-16 * tc[4];
    // species 9: CH
    species[9] = +7.10124364e+04 * invT - 3.60651526e+00 -
                 2.87846473e+00 * tc[0] - 4.85456840e-04 * tc[1] -
                 2.40742758e-08 * tc[2] + 1.08906541e-11 * tc[3] -
                 8.80396915e-16 * tc[4];
    // species 10: CH2
    species[10] = +4.62636040e+04 * invT - 4.29709211e+00 -
                  2.87410113e+00 * tc[0] - 1.82819646e-03 * tc[1] +
                  2.34824328e-07 * tc[2] - 2.16816291e-11 * tc[3] +
                  9.38637835e-16 * tc[4];
    // species 11: CH2(S)
    species[11] = +5.09259997e+04 * invT - 7.33446327e+00 -
                  2.29203842e+00 * tc[0] - 2.32794318e-03 * tc[1] +
                  3.35319912e-07 * tc[2] - 3.48255000e-11 * tc[3] +
                  1.69858182e-15 * tc[4];
    // species 12: CH3
    species[12] = +1.67755843e+04 * invT - 7.19435407e+00 -
                  2.28571772e+00 * tc[0] - 3.61995018e-03 * tc[1] +
                  4.97857247e-07 * tc[2] - 4.96403870e-11 * tc[3] +
                  2.33577197e-15 * tc[4];
    // species 13: CH4
    species[13] = -9.46834459e+03 * invT - 1.93624665e+01 -
                  7.48514950e-02 * tc[0] - 6.69547335e-03 * tc[1] +
                  9.55476348e-07 * tc[2] - 1.01910446e-10 * tc[3] +
                  5.09076150e-15 * tc[4];
    // species 14: CO
    species[14] = -1.41518724e+04 * invT - 6.10350211e+00 -
                  2.71518561e+00 * tc[0] - 1.03126372e-03 * tc[1] +
                  1.66470962e-07 * tc[2] - 1.91710840e-11 * tc[3] +
                  1.01823858e-15 * tc[4];
    // species 15: CO2
    species[15] = -4.87591660e+04 * invT + 5.85822230e-01 -
                  3.85746029e+00 * tc[0] - 2.20718513e-03 * tc[1] +
                  3.69135673e-07 * tc[2] - 4.36241823e-11 * tc[3] +
                  2.36042082e-15 * tc[4];
    // species 16: HCO
    species[16] = +4.01191815e+03 * invT - 8.02617054e+00 -
                  2.77217438e+00 * tc[0] - 2.47847763e-03 * tc[1] +
                  4.14076022e-07 * tc[2] - 4.90968148e-11 * tc[3] +
                  2.66754356e-15 * tc[4];
    // species 17: CH2O
    species[17] = -1.39958323e+04 * invT - 1.28956329e+01 -
                  1.76069008e+00 * tc[0] - 4.60000041e-03 * tc[1] +
                  7.37098022e-07 * tc[2] - 8.38676767e-11 * tc[3] +
                  4.41927820e-15 * tc[4];
    // species 18: CH2OH
    species[18] = -3.24250627e+03 * invT - 3.11776646e+00 -
                  3.69266569e+00 * tc[0] - 4.32288399e-03 * tc[1] +
                  6.25168533e-07 * tc[2] - 6.56028863e-11 * tc[3] +
                  3.24277101e-15 * tc[4];
    // species 19: CH3O
    species[19] = +1.27832520e+02 * invT - 1.58776000e-01 -
                  3.77079900e+00 * tc[0] - 3.93574850e-03 * tc[1] +
                  4.42730667e-07 * tc[2] - 3.28702583e-11 * tc[3] +
                  1.05630800e-15 * tc[4];
    // species 20: CH3OH
    species[20] = -2.53748747e+04 * invT - 1.37126544e+01 -
                  1.78970791e+00 * tc[0] - 7.04691460e-03 * tc[1] +
                  1.06083472e-06 * tc[2] - 1.15142571e-10 * tc[3] +
                  5.85301100e-15 * tc[4];
    // species 21: C2H
    species[21] = +6.71210650e+04 * invT - 4.46808823e+00 -
                  3.16780652e+00 * tc[0] - 2.37610951e-03 * tc[1] +
                  3.06311795e-07 * tc[2] - 2.53491877e-11 * tc[3] +
                  8.86163850e-16 * tc[4];
    // species 22: C2H2
    species[22] = +2.59359992e+04 * invT + 4.37785085e+00 -
                  4.14756964e+00 * tc[0] - 2.98083332e-03 * tc[1] +
                  3.95491420e-07 * tc[2] - 3.89510143e-11 * tc[3] +
                  1.80617607e-15 * tc[4];
    // species 23: C2H3
    species[23] = +3.46128739e+04 * invT - 5.77059978e+00 -
                  3.01672400e+00 * tc[0] - 5.16511460e-03 * tc[1] +
                  7.80137248e-07 * tc[2] - 8.48027400e-11 * tc[3] +
                  4.31303520e-15 * tc[4];
    // species 24: C2H4
    species[24] = +4.93988614e+03 * invT - 9.26925814e+00 -
                  2.03611116e+00 * tc[0] - 7.32270755e-03 * tc[1] +
                  1.11846319e-06 * tc[2] - 1.22685769e-10 * tc[3] +
                  6.28530305e-15 * tc[4];
    // species 25: C2H5
    species[25] = +1.28575200e+04 * invT - 1.25077779e+01 -
                  1.95465642e+00 * tc[0] - 8.69863610e-03 * tc[1] +
                  1.33034445e-06 * tc[2] - 1.46014741e-10 * tc[3] +
                  7.48207880e-15 * tc[4];
    // species 26: C2H6
    species[26] = -1.14263932e+04 * invT - 1.50437292e+01 -
                  1.07188150e+00 * tc[0] - 1.08426339e-02 * tc[1] +
                  1.67093445e-06 * tc[2] - 1.84510001e-10 * tc[3] +
                  9.50014450e-15 * tc[4];
    // species 27: HCCO
    species[27] = +1.93272150e+04 * invT + 8.55846530e+00 -
                  5.62820580e+00 * tc[0] - 2.04267005e-03 * tc[1] +
                  2.65575783e-07 * tc[2] - 2.38550433e-11 * tc[3] +
                  9.70391600e-16 * tc[4];
    // species 28: CH2CO
    species[28] = -7.55105311e+03 * invT + 2.87905011e+00 -
                  4.51129732e+00 * tc[0] - 4.50179872e-03 * tc[1] +
                  6.94899392e-07 * tc[2] - 7.69454902e-11 * tc[3] +
                  3.97419100e-15 * tc[4];
    // species 29: HCCOH
    species[29] = +7.26462600e+03 * invT + 1.25256033e+01 -
                  5.92382910e+00 * tc[0] - 3.39618000e-03 * tc[1] +
                  4.27642733e-07 * tc[2] - 3.74898675e-11 * tc[3] +
                  1.49700505e-15 * tc[4];
    // species 30: N2
    species[30] = -9.22797700e+02 * invT - 4.05388800e+00 -
                  2.92664000e+00 * tc[0] - 7.43988400e-04 * tc[1] +
                  9.47460000e-08 * tc[2] - 8.41419833e-12 * tc[3] +
                  3.37667550e-16 * tc[4];
  }

  // species with no change at a midpoint T
  // species 31: AR
  species[31] = -7.45375000e+02 * invT - 2.86600000e+00 -
                2.50000000e+00 * tc[0] - 0.00000000e+00 * tc[1] -
                0.00000000e+00 * tc[2] - 0.00000000e+00 * tc[3] -
                0.00000000e+00 * tc[4];
}

// compute the e/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesInternalEnergy(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +1.34433112e+00 + 3.99026037e-03 * tc[1] -
                 6.49271700e-06 * tc[2] + 5.03930235e-09 * tc[3] -
                 1.47522352e-12 * tc[4] - 9.17935173e+02 * invT;
    // species 1: H
    species[1] = +1.50000000e+00 + 3.52666409e-13 * tc[1] -
                 6.65306547e-16 * tc[2] + 5.75204080e-19 * tc[3] -
                 1.85546466e-22 * tc[4] + 2.54736599e+04 * invT;
    // species 2: O
    species[2] = +2.16826710e+00 - 1.63965942e-03 * tc[1] +
                 2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
                 4.22531942e-13 * tc[4] + 2.91222592e+04 * invT;
    // species 3: O2
    species[3] = +2.78245636e+00 - 1.49836708e-03 * tc[1] +
                 3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
                 6.48745674e-13 * tc[4] - 1.06394356e+03 * invT;
    // species 4: OH
    species[4] = +2.99201543e+00 - 1.20065876e-03 * tc[1] +
                 1.53931280e-06 * tc[2] - 9.70283332e-10 * tc[3] +
                 2.72822940e-13 * tc[4] + 3.61508056e+03 * invT;
    // species 5: H2O
    species[5] = +3.19864056e+00 - 1.01821705e-03 * tc[1] +
                 2.17346737e-06 * tc[2] - 1.37199266e-09 * tc[3] +
                 3.54395634e-13 * tc[4] - 3.02937267e+04 * invT;
    // species 6: HO2
    species[6] = +3.30179801e+00 - 2.37456025e-03 * tc[1] +
                 7.05276303e-06 * tc[2] - 6.06909735e-09 * tc[3] +
                 1.85845025e-12 * tc[4] + 2.94808040e+02 * invT;
    // species 7: H2O2
    species[7] = +3.27611269e+00 - 2.71411208e-04 * tc[1] +
                 5.57785670e-06 * tc[2] - 5.39427032e-09 * tc[3] +
                 1.72490873e-12 * tc[4] - 1.77025821e+04 * invT;
    // species 8: C
    species[8] = +1.55423955e+00 - 1.60768862e-04 * tc[1] +
                 2.44597415e-07 * tc[2] - 1.83058722e-10 * tc[3] +
                 5.33042892e-14 * tc[4] + 8.54438832e+04 * invT;
    // species 9: CH
    species[9] = +2.48981665e+00 + 1.61917771e-04 * tc[1] -
                 5.62996883e-07 * tc[2] + 7.90543317e-10 * tc[3] -
                 2.81218134e-13 * tc[4] + 7.07972934e+04 * invT;
    // species 10: CH2
    species[10] = +2.76267867e+00 + 4.84436072e-04 * tc[1] +
                  9.31632803e-07 * tc[2] - 9.62727883e-10 * tc[3] +
                  3.37483438e-13 * tc[4] + 4.60040401e+04 * invT;
    // species 11: CH2(S)
    species[11] = +3.19860411e+00 - 1.18330710e-03 * tc[1] +
                  2.74432073e-06 * tc[2] - 1.67203995e-09 * tc[3] +
                  3.88629474e-13 * tc[4] + 5.04968163e+04 * invT;
    // species 12: CH3
    species[12] = +2.67359040e+00 + 1.00547588e-03 * tc[1] +
                  1.91007285e-06 * tc[2] - 1.71779356e-09 * tc[3] +
                  5.08771468e-13 * tc[4] + 1.64449988e+04 * invT;
    // species 13: CH4
    species[13] = +4.14987613e+00 - 6.83548940e-03 * tc[1] +
                  1.63933533e-05 * tc[2] - 1.21185757e-08 * tc[3] +
                  3.33387912e-12 * tc[4] - 1.02466476e+04 * invT;
    // species 14: CO
    species[14] = +2.57953347e+00 - 3.05176840e-04 * tc[1] +
                  3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
                  1.80884900e-13 * tc[4] - 1.43440860e+04 * invT;
    // species 15: CO2
    species[15] = +1.35677352e+00 + 4.49229839e-03 * tc[1] -
                  2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                  2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 16: HCO
    species[16] = +3.22118584e+00 - 1.62196266e-03 * tc[1] +
                  4.59331487e-06 * tc[2] - 3.32860233e-09 * tc[3] +
                  8.67537730e-13 * tc[4] + 3.83956496e+03 * invT;
    // species 17: CH2O
    species[17] = +3.79372315e+00 - 4.95416684e-03 * tc[1] +
                  1.24406669e-05 * tc[2] - 9.48213152e-09 * tc[3] +
                  2.63545304e-12 * tc[4] - 1.43089567e+04 * invT;
    // species 18: CH2OH
    species[18] = +2.86388918e+00 + 2.79836152e-03 * tc[1] +
                  1.97757264e-06 * tc[2] - 2.61330030e-09 * tc[3] +
                  8.73934556e-13 * tc[4] - 3.19391367e+03 * invT;
    // species 19: CH3O
    species[19] = +1.10620400e+00 + 3.60829750e-03 * tc[1] +
                  1.77949067e-06 * tc[2] - 1.84440900e-09 * tc[3] +
                  4.15122000e-13 * tc[4] + 9.78601100e+02 * invT;
    // species 20: CH3OH
    species[20] = +4.71539582e+00 - 7.61545645e-03 * tc[1] +
                  2.17480385e-05 * tc[2] - 1.77701722e-08 * tc[3] +
                  5.22705396e-12 * tc[4] - 2.56427656e+04 * invT;
    // species 21: C2H
    species[21] = +1.88965733e+00 + 6.70498055e-03 * tc[1] -
                  9.49231670e-06 * tc[2] + 7.36977613e-09 * tc[3] -
                  2.18663022e-12 * tc[4] + 6.68393932e+04 * invT;
    // species 22: C2H2
    species[22] = -1.91318906e-01 + 1.16807815e-02 * tc[1] -
                  1.18390605e-05 * tc[2] + 7.00381092e-09 * tc[3] -
                  1.70014595e-12 * tc[4] + 2.64289807e+04 * invT;
    // species 23: C2H3
    species[23] = +2.21246645e+00 + 7.57395810e-04 * tc[1] +
                  8.64031373e-06 * tc[2] - 8.94144617e-09 * tc[3] +
                  2.94301746e-12 * tc[4] + 3.48598468e+04 * invT;
    // species 24: C2H4
    species[24] = +2.95920148e+00 - 3.78526124e-03 * tc[1] +
                  1.90330097e-05 * tc[2] - 1.72897188e-08 * tc[3] +
                  5.39768746e-12 * tc[4] + 5.08977593e+03 * invT;
    // species 25: C2H5
    species[25] = +3.30646568e+00 - 2.09329446e-03 * tc[1] +
                  1.65714269e-05 * tc[2] - 1.49781651e-08 * tc[3] +
                  4.61018008e-12 * tc[4] + 1.28416265e+04 * invT;
    // species 26: C2H6
    species[26] = +3.29142492e+00 - 2.75077135e-03 * tc[1] +
                  1.99812763e-05 * tc[2] - 1.77116571e-08 * tc[3] +
                  5.37371542e-12 * tc[4] - 1.15222055e+04 * invT;
    // species 27: HCCO
    species[27] = +1.25172140e+00 + 8.82751050e-03 * tc[1] -
                  7.90970033e-06 * tc[2] + 4.31893975e-09 * tc[3] -
                  1.01329622e-12 * tc[4] + 2.00594490e+04 * invT;
    // species 28: CH2CO
    species[28] = +1.13583630e+00 + 9.05943605e-03 * tc[1] -
                  5.79824913e-06 * tc[2] + 2.33599392e-09 * tc[3] -
                  4.02915230e-13 * tc[4] - 7.04291804e+03 * invT;
    // species 29: HCCOH
    species[29] = +2.42373300e-01 + 1.55361005e-02 * tc[1] -
                  1.69556213e-05 * tc[2] + 1.07842828e-08 * tc[3] -
                  2.80291880e-12 * tc[4] + 8.03161430e+03 * invT;
    // species 30: N2
    species[30] = +2.29867700e+00 + 7.04120200e-04 * tc[1] -
                  1.32107400e-06 * tc[2] + 1.41037875e-09 * tc[3] -
                  4.88970800e-13 * tc[4] - 1.02089990e+03 * invT;
  } else {
    // species 0: H2
    species[0] = +2.33727920e+00 - 2.47012365e-05 * tc[1] +
                 1.66485593e-07 * tc[2] - 4.48915985e-11 * tc[3] +
                 4.00510752e-15 * tc[4] - 9.50158922e+02 * invT;
    // species 1: H
    species[1] = +1.50000001e+00 - 1.15421486e-11 * tc[1] +
                 5.38539827e-15 * tc[2] - 1.18378809e-18 * tc[3] +
                 9.96394714e-23 * tc[4] + 2.54736599e+04 * invT;
    // species 2: O
    species[2] = +1.56942078e+00 - 4.29870569e-05 * tc[1] +
                 1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
                 2.45667382e-16 * tc[4] + 2.92175791e+04 * invT;
    // species 3: O2
    species[3] = +2.28253784e+00 + 7.41543770e-04 * tc[1] -
                 2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
                 4.33435588e-15 * tc[4] - 1.08845772e+03 * invT;
    // species 4: OH
    species[4] = +2.09288767e+00 + 2.74214858e-04 * tc[1] +
                 4.21684093e-08 * tc[2] - 2.19865389e-11 * tc[3] +
                 2.34824752e-15 * tc[4] + 3.85865700e+03 * invT;
    // species 5: H2O
    species[5] = +2.03399249e+00 + 1.08845902e-03 * tc[1] -
                 5.46908393e-08 * tc[2] - 2.42604967e-11 * tc[3] +
                 3.36401984e-15 * tc[4] - 3.00042971e+04 * invT;
    // species 6: HO2
    species[6] = +3.01721090e+00 + 1.11991006e-03 * tc[1] -
                 2.11219383e-07 * tc[2] + 2.85615925e-11 * tc[3] -
                 2.15817070e-15 * tc[4] + 1.11856713e+02 * invT;
    // species 7: H2O2
    species[7] = +3.16500285e+00 + 2.45415847e-03 * tc[1] -
                 6.33797417e-07 * tc[2] + 9.27964965e-11 * tc[3] -
                 5.75816610e-15 * tc[4] - 1.78617877e+04 * invT;
    // species 8: C
    species[8] = +1.49266888e+00 + 2.39944642e-05 * tc[1] -
                 2.41445007e-08 * tc[2] + 9.35727573e-12 * tc[3] -
                 9.74555786e-16 * tc[4] + 8.54512953e+04 * invT;
    // species 9: CH
    species[9] = +1.87846473e+00 + 4.85456840e-04 * tc[1] +
                 4.81485517e-08 * tc[2] - 3.26719623e-11 * tc[3] +
                 3.52158766e-15 * tc[4] + 7.10124364e+04 * invT;
    // species 10: CH2
    species[10] = +1.87410113e+00 + 1.82819646e-03 * tc[1] -
                  4.69648657e-07 * tc[2] + 6.50448872e-11 * tc[3] -
                  3.75455134e-15 * tc[4] + 4.62636040e+04 * invT;
    // species 11: CH2(S)
    species[11] = +1.29203842e+00 + 2.32794318e-03 * tc[1] -
                  6.70639823e-07 * tc[2] + 1.04476500e-10 * tc[3] -
                  6.79432730e-15 * tc[4] + 5.09259997e+04 * invT;
    // species 12: CH3
    species[12] = +1.28571772e+00 + 3.61995018e-03 * tc[1] -
                  9.95714493e-07 * tc[2] + 1.48921161e-10 * tc[3] -
                  9.34308788e-15 * tc[4] + 1.67755843e+04 * invT;
    // species 13: CH4
    species[13] = -9.25148505e-01 + 6.69547335e-03 * tc[1] -
                  1.91095270e-06 * tc[2] + 3.05731338e-10 * tc[3] -
                  2.03630460e-14 * tc[4] - 9.46834459e+03 * invT;
    // species 14: CO
    species[14] = +1.71518561e+00 + 1.03126372e-03 * tc[1] -
                  3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
                  4.07295432e-15 * tc[4] - 1.41518724e+04 * invT;
    // species 15: CO2
    species[15] = +2.85746029e+00 + 2.20718513e-03 * tc[1] -
                  7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                  9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 16: HCO
    species[16] = +1.77217438e+00 + 2.47847763e-03 * tc[1] -
                  8.28152043e-07 * tc[2] + 1.47290445e-10 * tc[3] -
                  1.06701742e-14 * tc[4] + 4.01191815e+03 * invT;
    // species 17: CH2O
    species[17] = +7.60690080e-01 + 4.60000041e-03 * tc[1] -
                  1.47419604e-06 * tc[2] + 2.51603030e-10 * tc[3] -
                  1.76771128e-14 * tc[4] - 1.39958323e+04 * invT;
    // species 18: CH2OH
    species[18] = +2.69266569e+00 + 4.32288399e-03 * tc[1] -
                  1.25033707e-06 * tc[2] + 1.96808659e-10 * tc[3] -
                  1.29710840e-14 * tc[4] - 3.24250627e+03 * invT;
    // species 19: CH3O
    species[19] = +2.77079900e+00 + 3.93574850e-03 * tc[1] -
                  8.85461333e-07 * tc[2] + 9.86107750e-11 * tc[3] -
                  4.22523200e-15 * tc[4] + 1.27832520e+02 * invT;
    // species 20: CH3OH
    species[20] = +7.89707910e-01 + 7.04691460e-03 * tc[1] -
                  2.12166945e-06 * tc[2] + 3.45427713e-10 * tc[3] -
                  2.34120440e-14 * tc[4] - 2.53748747e+04 * invT;
    // species 21: C2H
    species[21] = +2.16780652e+00 + 2.37610951e-03 * tc[1] -
                  6.12623590e-07 * tc[2] + 7.60475630e-11 * tc[3] -
                  3.54465540e-15 * tc[4] + 6.71210650e+04 * invT;
    // species 22: C2H2
    species[22] = +3.14756964e+00 + 2.98083332e-03 * tc[1] -
                  7.90982840e-07 * tc[2] + 1.16853043e-10 * tc[3] -
                  7.22470426e-15 * tc[4] + 2.59359992e+04 * invT;
    // species 23: C2H3
    species[23] = +2.01672400e+00 + 5.16511460e-03 * tc[1] -
                  1.56027450e-06 * tc[2] + 2.54408220e-10 * tc[3] -
                  1.72521408e-14 * tc[4] + 3.46128739e+04 * invT;
    // species 24: C2H4
    species[24] = +1.03611116e+00 + 7.32270755e-03 * tc[1] -
                  2.23692638e-06 * tc[2] + 3.68057308e-10 * tc[3] -
                  2.51412122e-14 * tc[4] + 4.93988614e+03 * invT;
    // species 25: C2H5
    species[25] = +9.54656420e-01 + 8.69863610e-03 * tc[1] -
                  2.66068889e-06 * tc[2] + 4.38044223e-10 * tc[3] -
                  2.99283152e-14 * tc[4] + 1.28575200e+04 * invT;
    // species 26: C2H6
    species[26] = +7.18815000e-02 + 1.08426339e-02 * tc[1] -
                  3.34186890e-06 * tc[2] + 5.53530003e-10 * tc[3] -
                  3.80005780e-14 * tc[4] - 1.14263932e+04 * invT;
    // species 27: HCCO
    species[27] = +4.62820580e+00 + 2.04267005e-03 * tc[1] -
                  5.31151567e-07 * tc[2] + 7.15651300e-11 * tc[3] -
                  3.88156640e-15 * tc[4] + 1.93272150e+04 * invT;
    // species 28: CH2CO
    species[28] = +3.51129732e+00 + 4.50179872e-03 * tc[1] -
                  1.38979878e-06 * tc[2] + 2.30836470e-10 * tc[3] -
                  1.58967640e-14 * tc[4] - 7.55105311e+03 * invT;
    // species 29: HCCOH
    species[29] = +4.92382910e+00 + 3.39618000e-03 * tc[1] -
                  8.55285467e-07 * tc[2] + 1.12469603e-10 * tc[3] -
                  5.98802020e-15 * tc[4] + 7.26462600e+03 * invT;
    // species 30: N2
    species[30] = +1.92664000e+00 + 7.43988400e-04 * tc[1] -
                  1.89492000e-07 * tc[2] + 2.52425950e-11 * tc[3] -
                  1.35067020e-15 * tc[4] - 9.22797700e+02 * invT;
  }

  // species with no change at a midpoint T
  // species 31: AR
  species[31] = +1.50000000e+00 + 0.00000000e+00 * tc[1] +
                0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                0.00000000e+00 * tc[4] - 7.45375000e+02 * invT;
}

// compute the h/(RT) at the given temperature (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEnthalpy(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +2.34433112e+00 + 3.99026037e-03 * tc[1] -
                 6.49271700e-06 * tc[2] + 5.03930235e-09 * tc[3] -
                 1.47522352e-12 * tc[4] - 9.17935173e+02 * invT;
    // species 1: H
    species[1] = +2.50000000e+00 + 3.52666409e-13 * tc[1] -
                 6.65306547e-16 * tc[2] + 5.75204080e-19 * tc[3] -
                 1.85546466e-22 * tc[4] + 2.54736599e+04 * invT;
    // species 2: O
    species[2] = +3.16826710e+00 - 1.63965942e-03 * tc[1] +
                 2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
                 4.22531942e-13 * tc[4] + 2.91222592e+04 * invT;
    // species 3: O2
    species[3] = +3.78245636e+00 - 1.49836708e-03 * tc[1] +
                 3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
                 6.48745674e-13 * tc[4] - 1.06394356e+03 * invT;
    // species 4: OH
    species[4] = +3.99201543e+00 - 1.20065876e-03 * tc[1] +
                 1.53931280e-06 * tc[2] - 9.70283332e-10 * tc[3] +
                 2.72822940e-13 * tc[4] + 3.61508056e+03 * invT;
    // species 5: H2O
    species[5] = +4.19864056e+00 - 1.01821705e-03 * tc[1] +
                 2.17346737e-06 * tc[2] - 1.37199266e-09 * tc[3] +
                 3.54395634e-13 * tc[4] - 3.02937267e+04 * invT;
    // species 6: HO2
    species[6] = +4.30179801e+00 - 2.37456025e-03 * tc[1] +
                 7.05276303e-06 * tc[2] - 6.06909735e-09 * tc[3] +
                 1.85845025e-12 * tc[4] + 2.94808040e+02 * invT;
    // species 7: H2O2
    species[7] = +4.27611269e+00 - 2.71411208e-04 * tc[1] +
                 5.57785670e-06 * tc[2] - 5.39427032e-09 * tc[3] +
                 1.72490873e-12 * tc[4] - 1.77025821e+04 * invT;
    // species 8: C
    species[8] = +2.55423955e+00 - 1.60768862e-04 * tc[1] +
                 2.44597415e-07 * tc[2] - 1.83058722e-10 * tc[3] +
                 5.33042892e-14 * tc[4] + 8.54438832e+04 * invT;
    // species 9: CH
    species[9] = +3.48981665e+00 + 1.61917771e-04 * tc[1] -
                 5.62996883e-07 * tc[2] + 7.90543317e-10 * tc[3] -
                 2.81218134e-13 * tc[4] + 7.07972934e+04 * invT;
    // species 10: CH2
    species[10] = +3.76267867e+00 + 4.84436072e-04 * tc[1] +
                  9.31632803e-07 * tc[2] - 9.62727883e-10 * tc[3] +
                  3.37483438e-13 * tc[4] + 4.60040401e+04 * invT;
    // species 11: CH2(S)
    species[11] = +4.19860411e+00 - 1.18330710e-03 * tc[1] +
                  2.74432073e-06 * tc[2] - 1.67203995e-09 * tc[3] +
                  3.88629474e-13 * tc[4] + 5.04968163e+04 * invT;
    // species 12: CH3
    species[12] = +3.67359040e+00 + 1.00547588e-03 * tc[1] +
                  1.91007285e-06 * tc[2] - 1.71779356e-09 * tc[3] +
                  5.08771468e-13 * tc[4] + 1.64449988e+04 * invT;
    // species 13: CH4
    species[13] = +5.14987613e+00 - 6.83548940e-03 * tc[1] +
                  1.63933533e-05 * tc[2] - 1.21185757e-08 * tc[3] +
                  3.33387912e-12 * tc[4] - 1.02466476e+04 * invT;
    // species 14: CO
    species[14] = +3.57953347e+00 - 3.05176840e-04 * tc[1] +
                  3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
                  1.80884900e-13 * tc[4] - 1.43440860e+04 * invT;
    // species 15: CO2
    species[15] = +2.35677352e+00 + 4.49229839e-03 * tc[1] -
                  2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                  2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 16: HCO
    species[16] = +4.22118584e+00 - 1.62196266e-03 * tc[1] +
                  4.59331487e-06 * tc[2] - 3.32860233e-09 * tc[3] +
                  8.67537730e-13 * tc[4] + 3.83956496e+03 * invT;
    // species 17: CH2O
    species[17] = +4.79372315e+00 - 4.95416684e-03 * tc[1] +
                  1.24406669e-05 * tc[2] - 9.48213152e-09 * tc[3] +
                  2.63545304e-12 * tc[4] - 1.43089567e+04 * invT;
    // species 18: CH2OH
    species[18] = +3.86388918e+00 + 2.79836152e-03 * tc[1] +
                  1.97757264e-06 * tc[2] - 2.61330030e-09 * tc[3] +
                  8.73934556e-13 * tc[4] - 3.19391367e+03 * invT;
    // species 19: CH3O
    species[19] = +2.10620400e+00 + 3.60829750e-03 * tc[1] +
                  1.77949067e-06 * tc[2] - 1.84440900e-09 * tc[3] +
                  4.15122000e-13 * tc[4] + 9.78601100e+02 * invT;
    // species 20: CH3OH
    species[20] = +5.71539582e+00 - 7.61545645e-03 * tc[1] +
                  2.17480385e-05 * tc[2] - 1.77701722e-08 * tc[3] +
                  5.22705396e-12 * tc[4] - 2.56427656e+04 * invT;
    // species 21: C2H
    species[21] = +2.88965733e+00 + 6.70498055e-03 * tc[1] -
                  9.49231670e-06 * tc[2] + 7.36977613e-09 * tc[3] -
                  2.18663022e-12 * tc[4] + 6.68393932e+04 * invT;
    // species 22: C2H2
    species[22] = +8.08681094e-01 + 1.16807815e-02 * tc[1] -
                  1.18390605e-05 * tc[2] + 7.00381092e-09 * tc[3] -
                  1.70014595e-12 * tc[4] + 2.64289807e+04 * invT;
    // species 23: C2H3
    species[23] = +3.21246645e+00 + 7.57395810e-04 * tc[1] +
                  8.64031373e-06 * tc[2] - 8.94144617e-09 * tc[3] +
                  2.94301746e-12 * tc[4] + 3.48598468e+04 * invT;
    // species 24: C2H4
    species[24] = +3.95920148e+00 - 3.78526124e-03 * tc[1] +
                  1.90330097e-05 * tc[2] - 1.72897188e-08 * tc[3] +
                  5.39768746e-12 * tc[4] + 5.08977593e+03 * invT;
    // species 25: C2H5
    species[25] = +4.30646568e+00 - 2.09329446e-03 * tc[1] +
                  1.65714269e-05 * tc[2] - 1.49781651e-08 * tc[3] +
                  4.61018008e-12 * tc[4] + 1.28416265e+04 * invT;
    // species 26: C2H6
    species[26] = +4.29142492e+00 - 2.75077135e-03 * tc[1] +
                  1.99812763e-05 * tc[2] - 1.77116571e-08 * tc[3] +
                  5.37371542e-12 * tc[4] - 1.15222055e+04 * invT;
    // species 27: HCCO
    species[27] = +2.25172140e+00 + 8.82751050e-03 * tc[1] -
                  7.90970033e-06 * tc[2] + 4.31893975e-09 * tc[3] -
                  1.01329622e-12 * tc[4] + 2.00594490e+04 * invT;
    // species 28: CH2CO
    species[28] = +2.13583630e+00 + 9.05943605e-03 * tc[1] -
                  5.79824913e-06 * tc[2] + 2.33599392e-09 * tc[3] -
                  4.02915230e-13 * tc[4] - 7.04291804e+03 * invT;
    // species 29: HCCOH
    species[29] = +1.24237330e+00 + 1.55361005e-02 * tc[1] -
                  1.69556213e-05 * tc[2] + 1.07842828e-08 * tc[3] -
                  2.80291880e-12 * tc[4] + 8.03161430e+03 * invT;
    // species 30: N2
    species[30] = +3.29867700e+00 + 7.04120200e-04 * tc[1] -
                  1.32107400e-06 * tc[2] + 1.41037875e-09 * tc[3] -
                  4.88970800e-13 * tc[4] - 1.02089990e+03 * invT;
  } else {
    // species 0: H2
    species[0] = +3.33727920e+00 - 2.47012365e-05 * tc[1] +
                 1.66485593e-07 * tc[2] - 4.48915985e-11 * tc[3] +
                 4.00510752e-15 * tc[4] - 9.50158922e+02 * invT;
    // species 1: H
    species[1] = +2.50000001e+00 - 1.15421486e-11 * tc[1] +
                 5.38539827e-15 * tc[2] - 1.18378809e-18 * tc[3] +
                 9.96394714e-23 * tc[4] + 2.54736599e+04 * invT;
    // species 2: O
    species[2] = +2.56942078e+00 - 4.29870569e-05 * tc[1] +
                 1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
                 2.45667382e-16 * tc[4] + 2.92175791e+04 * invT;
    // species 3: O2
    species[3] = +3.28253784e+00 + 7.41543770e-04 * tc[1] -
                 2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
                 4.33435588e-15 * tc[4] - 1.08845772e+03 * invT;
    // species 4: OH
    species[4] = +3.09288767e+00 + 2.74214858e-04 * tc[1] +
                 4.21684093e-08 * tc[2] - 2.19865389e-11 * tc[3] +
                 2.34824752e-15 * tc[4] + 3.85865700e+03 * invT;
    // species 5: H2O
    species[5] = +3.03399249e+00 + 1.08845902e-03 * tc[1] -
                 5.46908393e-08 * tc[2] - 2.42604967e-11 * tc[3] +
                 3.36401984e-15 * tc[4] - 3.00042971e+04 * invT;
    // species 6: HO2
    species[6] = +4.01721090e+00 + 1.11991006e-03 * tc[1] -
                 2.11219383e-07 * tc[2] + 2.85615925e-11 * tc[3] -
                 2.15817070e-15 * tc[4] + 1.11856713e+02 * invT;
    // species 7: H2O2
    species[7] = +4.16500285e+00 + 2.45415847e-03 * tc[1] -
                 6.33797417e-07 * tc[2] + 9.27964965e-11 * tc[3] -
                 5.75816610e-15 * tc[4] - 1.78617877e+04 * invT;
    // species 8: C
    species[8] = +2.49266888e+00 + 2.39944642e-05 * tc[1] -
                 2.41445007e-08 * tc[2] + 9.35727573e-12 * tc[3] -
                 9.74555786e-16 * tc[4] + 8.54512953e+04 * invT;
    // species 9: CH
    species[9] = +2.87846473e+00 + 4.85456840e-04 * tc[1] +
                 4.81485517e-08 * tc[2] - 3.26719623e-11 * tc[3] +
                 3.52158766e-15 * tc[4] + 7.10124364e+04 * invT;
    // species 10: CH2
    species[10] = +2.87410113e+00 + 1.82819646e-03 * tc[1] -
                  4.69648657e-07 * tc[2] + 6.50448872e-11 * tc[3] -
                  3.75455134e-15 * tc[4] + 4.62636040e+04 * invT;
    // species 11: CH2(S)
    species[11] = +2.29203842e+00 + 2.32794318e-03 * tc[1] -
                  6.70639823e-07 * tc[2] + 1.04476500e-10 * tc[3] -
                  6.79432730e-15 * tc[4] + 5.09259997e+04 * invT;
    // species 12: CH3
    species[12] = +2.28571772e+00 + 3.61995018e-03 * tc[1] -
                  9.95714493e-07 * tc[2] + 1.48921161e-10 * tc[3] -
                  9.34308788e-15 * tc[4] + 1.67755843e+04 * invT;
    // species 13: CH4
    species[13] = +7.48514950e-02 + 6.69547335e-03 * tc[1] -
                  1.91095270e-06 * tc[2] + 3.05731338e-10 * tc[3] -
                  2.03630460e-14 * tc[4] - 9.46834459e+03 * invT;
    // species 14: CO
    species[14] = +2.71518561e+00 + 1.03126372e-03 * tc[1] -
                  3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
                  4.07295432e-15 * tc[4] - 1.41518724e+04 * invT;
    // species 15: CO2
    species[15] = +3.85746029e+00 + 2.20718513e-03 * tc[1] -
                  7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                  9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 16: HCO
    species[16] = +2.77217438e+00 + 2.47847763e-03 * tc[1] -
                  8.28152043e-07 * tc[2] + 1.47290445e-10 * tc[3] -
                  1.06701742e-14 * tc[4] + 4.01191815e+03 * invT;
    // species 17: CH2O
    species[17] = +1.76069008e+00 + 4.60000041e-03 * tc[1] -
                  1.47419604e-06 * tc[2] + 2.51603030e-10 * tc[3] -
                  1.76771128e-14 * tc[4] - 1.39958323e+04 * invT;
    // species 18: CH2OH
    species[18] = +3.69266569e+00 + 4.32288399e-03 * tc[1] -
                  1.25033707e-06 * tc[2] + 1.96808659e-10 * tc[3] -
                  1.29710840e-14 * tc[4] - 3.24250627e+03 * invT;
    // species 19: CH3O
    species[19] = +3.77079900e+00 + 3.93574850e-03 * tc[1] -
                  8.85461333e-07 * tc[2] + 9.86107750e-11 * tc[3] -
                  4.22523200e-15 * tc[4] + 1.27832520e+02 * invT;
    // species 20: CH3OH
    species[20] = +1.78970791e+00 + 7.04691460e-03 * tc[1] -
                  2.12166945e-06 * tc[2] + 3.45427713e-10 * tc[3] -
                  2.34120440e-14 * tc[4] - 2.53748747e+04 * invT;
    // species 21: C2H
    species[21] = +3.16780652e+00 + 2.37610951e-03 * tc[1] -
                  6.12623590e-07 * tc[2] + 7.60475630e-11 * tc[3] -
                  3.54465540e-15 * tc[4] + 6.71210650e+04 * invT;
    // species 22: C2H2
    species[22] = +4.14756964e+00 + 2.98083332e-03 * tc[1] -
                  7.90982840e-07 * tc[2] + 1.16853043e-10 * tc[3] -
                  7.22470426e-15 * tc[4] + 2.59359992e+04 * invT;
    // species 23: C2H3
    species[23] = +3.01672400e+00 + 5.16511460e-03 * tc[1] -
                  1.56027450e-06 * tc[2] + 2.54408220e-10 * tc[3] -
                  1.72521408e-14 * tc[4] + 3.46128739e+04 * invT;
    // species 24: C2H4
    species[24] = +2.03611116e+00 + 7.32270755e-03 * tc[1] -
                  2.23692638e-06 * tc[2] + 3.68057308e-10 * tc[3] -
                  2.51412122e-14 * tc[4] + 4.93988614e+03 * invT;
    // species 25: C2H5
    species[25] = +1.95465642e+00 + 8.69863610e-03 * tc[1] -
                  2.66068889e-06 * tc[2] + 4.38044223e-10 * tc[3] -
                  2.99283152e-14 * tc[4] + 1.28575200e+04 * invT;
    // species 26: C2H6
    species[26] = +1.07188150e+00 + 1.08426339e-02 * tc[1] -
                  3.34186890e-06 * tc[2] + 5.53530003e-10 * tc[3] -
                  3.80005780e-14 * tc[4] - 1.14263932e+04 * invT;
    // species 27: HCCO
    species[27] = +5.62820580e+00 + 2.04267005e-03 * tc[1] -
                  5.31151567e-07 * tc[2] + 7.15651300e-11 * tc[3] -
                  3.88156640e-15 * tc[4] + 1.93272150e+04 * invT;
    // species 28: CH2CO
    species[28] = +4.51129732e+00 + 4.50179872e-03 * tc[1] -
                  1.38979878e-06 * tc[2] + 2.30836470e-10 * tc[3] -
                  1.58967640e-14 * tc[4] - 7.55105311e+03 * invT;
    // species 29: HCCOH
    species[29] = +5.92382910e+00 + 3.39618000e-03 * tc[1] -
                  8.55285467e-07 * tc[2] + 1.12469603e-10 * tc[3] -
                  5.98802020e-15 * tc[4] + 7.26462600e+03 * invT;
    // species 30: N2
    species[30] = +2.92664000e+00 + 7.43988400e-04 * tc[1] -
                  1.89492000e-07 * tc[2] + 2.52425950e-11 * tc[3] -
                  1.35067020e-15 * tc[4] - 9.22797700e+02 * invT;
  }

  // species with no change at a midpoint T
  // species 31: AR
  species[31] = +2.50000000e+00 + 0.00000000e+00 * tc[1] +
                0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                0.00000000e+00 * tc[4] - 7.45375000e+02 * invT;
}

// compute the S/R at the given temperature (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEntropy(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +2.34433112e+00 * tc[0] + 7.98052075e-03 * tc[1] -
                 9.73907550e-06 * tc[2] + 6.71906980e-09 * tc[3] -
                 1.84402940e-12 * tc[4] + 6.83010238e-01;
    // species 1: H
    species[1] = +2.50000000e+00 * tc[0] + 7.05332819e-13 * tc[1] -
                 9.97959820e-16 * tc[2] + 7.66938773e-19 * tc[3] -
                 2.31933083e-22 * tc[4] - 4.46682853e-01;
    // species 2: O
    species[2] = +3.16826710e+00 * tc[0] - 3.27931884e-03 * tc[1] +
                 3.32153198e-06 * tc[2] - 2.04268875e-09 * tc[3] +
                 5.28164927e-13 * tc[4] + 2.05193346e+00;
    // species 3: O2
    species[3] = +3.78245636e+00 * tc[0] - 2.99673416e-03 * tc[1] +
                 4.92365101e-06 * tc[2] - 3.22709836e-09 * tc[3] +
                 8.10932092e-13 * tc[4] + 3.65767573e+00;
    // species 4: OH
    species[4] = +3.99201543e+00 * tc[0] - 2.40131752e-03 * tc[1] +
                 2.30896920e-06 * tc[2] - 1.29371111e-09 * tc[3] +
                 3.41028675e-13 * tc[4] - 1.03925458e-01;
    // species 5: H2O
    species[5] = +4.19864056e+00 * tc[0] - 2.03643410e-03 * tc[1] +
                 3.26020105e-06 * tc[2] - 1.82932354e-09 * tc[3] +
                 4.42994543e-13 * tc[4] - 8.49032208e-01;
    // species 6: HO2
    species[6] = +4.30179801e+00 * tc[0] - 4.74912051e-03 * tc[1] +
                 1.05791445e-05 * tc[2] - 8.09212980e-09 * tc[3] +
                 2.32306281e-12 * tc[4] + 3.71666245e+00;
    // species 7: H2O2
    species[7] = +4.27611269e+00 * tc[0] - 5.42822417e-04 * tc[1] +
                 8.36678505e-06 * tc[2] - 7.19236043e-09 * tc[3] +
                 2.15613591e-12 * tc[4] + 3.43505074e+00;
    // species 8: C
    species[8] = +2.55423955e+00 * tc[0] - 3.21537724e-04 * tc[1] +
                 3.66896122e-07 * tc[2] - 2.44078296e-10 * tc[3] +
                 6.66303615e-14 * tc[4] + 4.53130848e+00;
    // species 9: CH
    species[9] = +3.48981665e+00 * tc[0] + 3.23835541e-04 * tc[1] -
                 8.44495325e-07 * tc[2] + 1.05405776e-09 * tc[3] -
                 3.51522668e-13 * tc[4] + 2.08401108e+00;
    // species 10: CH2
    species[10] = +3.76267867e+00 * tc[0] + 9.68872143e-04 * tc[1] +
                  1.39744921e-06 * tc[2] - 1.28363718e-09 * tc[3] +
                  4.21854298e-13 * tc[4] + 1.56253185e+00;
    // species 11: CH2(S)
    species[11] = +4.19860411e+00 * tc[0] - 2.36661419e-03 * tc[1] +
                  4.11648110e-06 * tc[2] - 2.22938660e-09 * tc[3] +
                  4.85786843e-13 * tc[4] - 7.69118967e-01;
    // species 12: CH3
    species[12] = +3.67359040e+00 * tc[0] + 2.01095175e-03 * tc[1] +
                  2.86510928e-06 * tc[2] - 2.29039142e-09 * tc[3] +
                  6.35964335e-13 * tc[4] + 1.60456433e+00;
    // species 13: CH4
    species[13] = +5.14987613e+00 * tc[0] - 1.36709788e-02 * tc[1] +
                  2.45900299e-05 * tc[2] - 1.61581009e-08 * tc[3] +
                  4.16734890e-12 * tc[4] - 4.64130376e+00;
    // species 14: CO
    species[14] = +3.57953347e+00 * tc[0] - 6.10353680e-04 * tc[1] +
                  5.08407165e-07 * tc[2] + 3.02335295e-10 * tc[3] -
                  2.26106125e-13 * tc[4] + 3.50840928e+00;
    // species 15: CO2
    species[15] = +2.35677352e+00 * tc[0] + 8.98459677e-03 * tc[1] -
                  3.56178134e-06 * tc[2] + 8.19730073e-10 * tc[3] -
                  3.59248870e-14 * tc[4] + 9.90105222e+00;
    // species 16: HCO
    species[16] = +4.22118584e+00 * tc[0] - 3.24392532e-03 * tc[1] +
                  6.88997230e-06 * tc[2] - 4.43813643e-09 * tc[3] +
                  1.08442216e-12 * tc[4] + 3.39437243e+00;
    // species 17: CH2O
    species[17] = +4.79372315e+00 * tc[0] - 9.90833369e-03 * tc[1] +
                  1.86610004e-05 * tc[2] - 1.26428420e-08 * tc[3] +
                  3.29431630e-12 * tc[4] + 6.02812900e-01;
    // species 18: CH2OH
    species[18] = +3.86388918e+00 * tc[0] + 5.59672304e-03 * tc[1] +
                  2.96635895e-06 * tc[2] - 3.48440040e-09 * tc[3] +
                  1.09241820e-12 * tc[4] + 5.47302243e+00;
    // species 19: CH3O
    species[19] = +2.10620400e+00 * tc[0] + 7.21659500e-03 * tc[1] +
                  2.66923600e-06 * tc[2] - 2.45921200e-09 * tc[3] +
                  5.18902500e-13 * tc[4] + 1.31521770e+01;
    // species 20: CH3OH
    species[20] = +5.71539582e+00 * tc[0] - 1.52309129e-02 * tc[1] +
                  3.26220578e-05 * tc[2] - 2.36935630e-08 * tc[3] +
                  6.53381745e-12 * tc[4] - 1.50409823e+00;
    // species 21: C2H
    species[21] = +2.88965733e+00 * tc[0] + 1.34099611e-02 * tc[1] -
                  1.42384751e-05 * tc[2] + 9.82636817e-09 * tc[3] -
                  2.73328777e-12 * tc[4] + 6.22296438e+00;
    // species 22: C2H2
    species[22] = +8.08681094e-01 * tc[0] + 2.33615629e-02 * tc[1] -
                  1.77585907e-05 * tc[2] + 9.33841457e-09 * tc[3] -
                  2.12518243e-12 * tc[4] + 1.39397051e+01;
    // species 23: C2H3
    species[23] = +3.21246645e+00 * tc[0] + 1.51479162e-03 * tc[1] +
                  1.29604706e-05 * tc[2] - 1.19219282e-08 * tc[3] +
                  3.67877182e-12 * tc[4] + 8.51054025e+00;
    // species 24: C2H4
    species[24] = +3.95920148e+00 * tc[0] - 7.57052247e-03 * tc[1] +
                  2.85495146e-05 * tc[2] - 2.30529584e-08 * tc[3] +
                  6.74710933e-12 * tc[4] + 4.09733096e+00;
    // species 25: C2H5
    species[25] = +4.30646568e+00 * tc[0] - 4.18658892e-03 * tc[1] +
                  2.48571403e-05 * tc[2] - 1.99708869e-08 * tc[3] +
                  5.76272510e-12 * tc[4] + 4.70720924e+00;
    // species 26: C2H6
    species[26] = +4.29142492e+00 * tc[0] - 5.50154270e-03 * tc[1] +
                  2.99719144e-05 * tc[2] - 2.36155428e-08 * tc[3] +
                  6.71714427e-12 * tc[4] + 2.66682316e+00;
    // species 27: HCCO
    species[27] = +2.25172140e+00 * tc[0] + 1.76550210e-02 * tc[1] -
                  1.18645505e-05 * tc[2] + 5.75858633e-09 * tc[3] -
                  1.26662028e-12 * tc[4] + 1.24904170e+01;
    // species 28: CH2CO
    species[28] = +2.13583630e+00 * tc[0] + 1.81188721e-02 * tc[1] -
                  8.69737370e-06 * tc[2] + 3.11465856e-09 * tc[3] -
                  5.03644037e-13 * tc[4] + 1.22156480e+01;
    // species 29: HCCOH
    species[29] = +1.24237330e+00 * tc[0] + 3.10722010e-02 * tc[1] -
                  2.54334320e-05 * tc[2] + 1.43790437e-08 * tc[3] -
                  3.50364850e-12 * tc[4] + 1.38743190e+01;
    // species 30: N2
    species[30] = +3.29867700e+00 * tc[0] + 1.40824040e-03 * tc[1] -
                  1.98161100e-06 * tc[2] + 1.88050500e-09 * tc[3] -
                  6.11213500e-13 * tc[4] + 3.95037200e+00;
  } else {
    // species 0: H2
    species[0] = +3.33727920e+00 * tc[0] - 4.94024731e-05 * tc[1] +
                 2.49728389e-07 * tc[2] - 5.98554647e-11 * tc[3] +
                 5.00638440e-15 * tc[4] - 3.20502331e+00;
    // species 1: H
    species[1] = +2.50000001e+00 * tc[0] - 2.30842973e-11 * tc[1] +
                 8.07809740e-15 * tc[2] - 1.57838412e-18 * tc[3] +
                 1.24549339e-22 * tc[4] - 4.46682914e-01;
    // species 2: O
    species[2] = +2.56942078e+00 * tc[0] - 8.59741137e-05 * tc[1] +
                 2.09742295e-08 * tc[2] - 3.33925997e-12 * tc[3] +
                 3.07084227e-16 * tc[4] + 4.78433864e+00;
    // species 3: O2
    species[3] = +3.28253784e+00 * tc[0] + 1.48308754e-03 * tc[1] -
                 3.78983334e-07 * tc[2] + 6.98235183e-11 * tc[3] -
                 5.41794485e-15 * tc[4] + 5.45323129e+00;
    // species 4: OH
    species[4] = +3.09288767e+00 * tc[0] + 5.48429716e-04 * tc[1] +
                 6.32526140e-08 * tc[2] - 2.93153852e-11 * tc[3] +
                 2.93530940e-15 * tc[4] + 4.47669610e+00;
    // species 5: H2O
    species[5] = +3.03399249e+00 * tc[0] + 2.17691804e-03 * tc[1] -
                 8.20362590e-08 * tc[2] - 3.23473290e-11 * tc[3] +
                 4.20502480e-15 * tc[4] + 4.96677010e+00;
    // species 6: HO2
    species[6] = +4.01721090e+00 * tc[0] + 2.23982013e-03 * tc[1] -
                 3.16829075e-07 * tc[2] + 3.80821233e-11 * tc[3] -
                 2.69771337e-15 * tc[4] + 3.78510215e+00;
    // species 7: H2O2
    species[7] = +4.16500285e+00 * tc[0] + 4.90831694e-03 * tc[1] -
                 9.50696125e-07 * tc[2] + 1.23728662e-10 * tc[3] -
                 7.19770763e-15 * tc[4] + 2.91615662e+00;
    // species 8: C
    species[8] = +2.49266888e+00 * tc[0] + 4.79889284e-05 * tc[1] -
                 3.62167510e-08 * tc[2] + 1.24763676e-11 * tc[3] -
                 1.21819473e-15 * tc[4] + 4.80150373e+00;
    // species 9: CH
    species[9] = +2.87846473e+00 * tc[0] + 9.70913681e-04 * tc[1] +
                 7.22228275e-08 * tc[2] - 4.35626163e-11 * tc[3] +
                 4.40198457e-15 * tc[4] + 5.48497999e+00;
    // species 10: CH2
    species[10] = +2.87410113e+00 * tc[0] + 3.65639292e-03 * tc[1] -
                  7.04472985e-07 * tc[2] + 8.67265163e-11 * tc[3] -
                  4.69318918e-15 * tc[4] + 6.17119324e+00;
    // species 11: CH2(S)
    species[11] = +2.29203842e+00 * tc[0] + 4.65588637e-03 * tc[1] -
                  1.00595973e-06 * tc[2] + 1.39302000e-10 * tc[3] -
                  8.49290912e-15 * tc[4] + 8.62650169e+00;
    // species 12: CH3
    species[12] = +2.28571772e+00 * tc[0] + 7.23990037e-03 * tc[1] -
                  1.49357174e-06 * tc[2] + 1.98561548e-10 * tc[3] -
                  1.16788599e-14 * tc[4] + 8.48007179e+00;
    // species 13: CH4
    species[13] = +7.48514950e-02 * tc[0] + 1.33909467e-02 * tc[1] -
                  2.86642905e-06 * tc[2] + 4.07641783e-10 * tc[3] -
                  2.54538075e-14 * tc[4] + 1.84373180e+01;
    // species 14: CO
    species[14] = +2.71518561e+00 * tc[0] + 2.06252743e-03 * tc[1] -
                  4.99412886e-07 * tc[2] + 7.66843360e-11 * tc[3] -
                  5.09119290e-15 * tc[4] + 7.81868772e+00;
    // species 15: CO2
    species[15] = +3.85746029e+00 * tc[0] + 4.41437026e-03 * tc[1] -
                  1.10740702e-06 * tc[2] + 1.74496729e-10 * tc[3] -
                  1.18021041e-14 * tc[4] + 2.27163806e+00;
    // species 16: HCO
    species[16] = +2.77217438e+00 * tc[0] + 4.95695526e-03 * tc[1] -
                  1.24222806e-06 * tc[2] + 1.96387259e-10 * tc[3] -
                  1.33377178e-14 * tc[4] + 9.79834492e+00;
    // species 17: CH2O
    species[17] = +1.76069008e+00 * tc[0] + 9.20000082e-03 * tc[1] -
                  2.21129406e-06 * tc[2] + 3.35470707e-10 * tc[3] -
                  2.20963910e-14 * tc[4] + 1.36563230e+01;
    // species 18: CH2OH
    species[18] = +3.69266569e+00 * tc[0] + 8.64576797e-03 * tc[1] -
                  1.87550560e-06 * tc[2] + 2.62411545e-10 * tc[3] -
                  1.62138550e-14 * tc[4] + 5.81043215e+00;
    // species 19: CH3O
    species[19] = +3.77079900e+00 * tc[0] + 7.87149700e-03 * tc[1] -
                  1.32819200e-06 * tc[2] + 1.31481033e-10 * tc[3] -
                  5.28154000e-15 * tc[4] + 2.92957500e+00;
    // species 20: CH3OH
    species[20] = +1.78970791e+00 * tc[0] + 1.40938292e-02 * tc[1] -
                  3.18250418e-06 * tc[2] + 4.60570283e-10 * tc[3] -
                  2.92650550e-14 * tc[4] + 1.45023623e+01;
    // species 21: C2H
    species[21] = +3.16780652e+00 * tc[0] + 4.75221902e-03 * tc[1] -
                  9.18935385e-07 * tc[2] + 1.01396751e-10 * tc[3] -
                  4.43081925e-15 * tc[4] + 6.63589475e+00;
    // species 22: C2H2
    species[22] = +4.14756964e+00 * tc[0] + 5.96166664e-03 * tc[1] -
                  1.18647426e-06 * tc[2] + 1.55804057e-10 * tc[3] -
                  9.03088033e-15 * tc[4] - 1.23028121e+00;
    // species 23: C2H3
    species[23] = +3.01672400e+00 * tc[0] + 1.03302292e-02 * tc[1] -
                  2.34041174e-06 * tc[2] + 3.39210960e-10 * tc[3] -
                  2.15651760e-14 * tc[4] + 7.78732378e+00;
    // species 24: C2H4
    species[24] = +2.03611116e+00 * tc[0] + 1.46454151e-02 * tc[1] -
                  3.35538958e-06 * tc[2] + 4.90743077e-10 * tc[3] -
                  3.14265152e-14 * tc[4] + 1.03053693e+01;
    // species 25: C2H5
    species[25] = +1.95465642e+00 * tc[0] + 1.73972722e-02 * tc[1] -
                  3.99103334e-06 * tc[2] + 5.84058963e-10 * tc[3] -
                  3.74103940e-14 * tc[4] + 1.34624343e+01;
    // species 26: C2H6
    species[26] = +1.07188150e+00 * tc[0] + 2.16852677e-02 * tc[1] -
                  5.01280335e-06 * tc[2] + 7.38040003e-10 * tc[3] -
                  4.75007225e-14 * tc[4] + 1.51156107e+01;
    // species 27: HCCO
    species[27] = +5.62820580e+00 * tc[0] + 4.08534010e-03 * tc[1] -
                  7.96727350e-07 * tc[2] + 9.54201733e-11 * tc[3] -
                  4.85195800e-15 * tc[4] - 3.93025950e+00;
    // species 28: CH2CO
    species[28] = +4.51129732e+00 * tc[0] + 9.00359745e-03 * tc[1] -
                  2.08469817e-06 * tc[2] + 3.07781961e-10 * tc[3] -
                  1.98709550e-14 * tc[4] + 6.32247205e-01;
    // species 29: HCCOH
    species[29] = +5.92382910e+00 * tc[0] + 6.79236000e-03 * tc[1] -
                  1.28292820e-06 * tc[2] + 1.49959470e-10 * tc[3] -
                  7.48502525e-15 * tc[4] - 7.60177420e+00;
    // species 30: N2
    species[30] = +2.92664000e+00 * tc[0] + 1.48797680e-03 * tc[1] -
                  2.84238000e-07 * tc[2] + 3.36567933e-11 * tc[3] -
                  1.68833775e-15 * tc[4] + 5.98052800e+00;
  }

  // species with no change at a midpoint T
  // species 31: AR
  species[31] = +2.50000000e+00 * tc[0] + 0.00000000e+00 * tc[1] +
                0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3] +
                0.00000000e+00 * tc[4] + 4.36600000e+00;
}

// Returns the mean specific heat at CP (Eq. 33)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cpbl)
{
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real cpor[32];                               //  temporary storage
  cp_R(cpor, tc);

  // perform dot product
  for (int id = 0; id < 32; ++id) {
    result += x[id] * cpor[id];
  }

  cpbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CP (Eq. 34)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cpbs)
{
  amrex::Real result = 0.0;
  const amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache

  // compute Cp/R at the given temperature

  // species with midpoint at T=1000 kelvin
  if (tT < 1000) {
    // species 0: H2
    result +=
      y[0] *
      (+2.34433112e+00 + 7.98052075e-03 * tc[1] - 1.94781510e-05 * tc[2] +
       2.01572094e-08 * tc[3] - 7.37611761e-12 * tc[4]) *
      0.4960317460317460;
    // species 1: H
    result +=
      y[1] *
      (+2.50000000e+00 + 7.05332819e-13 * tc[1] - 1.99591964e-15 * tc[2] +
       2.30081632e-18 * tc[3] - 9.27732332e-22 * tc[4]) *
      0.9920634920634921;
    // species 2: O
    result +=
      y[2] *
      (+3.16826710e+00 - 3.27931884e-03 * tc[1] + 6.64306396e-06 * tc[2] -
       6.12806624e-09 * tc[3] + 2.11265971e-12 * tc[4]) *
      0.0625039064941559;
    // species 3: O2
    result +=
      y[3] *
      (+3.78245636e+00 - 2.99673416e-03 * tc[1] + 9.84730201e-06 * tc[2] -
       9.68129509e-09 * tc[3] + 3.24372837e-12 * tc[4]) *
      0.0312519532470779;
    // species 4: OH
    result +=
      y[4] *
      (+3.99201543e+00 - 2.40131752e-03 * tc[1] + 4.61793841e-06 * tc[2] -
       3.88113333e-09 * tc[3] + 1.36411470e-12 * tc[4]) *
      0.0587993179279120;
    // species 5: H2O
    result +=
      y[5] *
      (+4.19864056e+00 - 2.03643410e-03 * tc[1] + 6.52040211e-06 * tc[2] -
       5.48797062e-09 * tc[3] + 1.77197817e-12 * tc[4]) *
      0.0555092978073827;
    // species 6: HO2
    result +=
      y[6] *
      (+4.30179801e+00 - 4.74912051e-03 * tc[1] + 2.11582891e-05 * tc[2] -
       2.42763894e-08 * tc[3] + 9.29225124e-12 * tc[4]) *
      0.0302975216627280;
    // species 7: H2O2
    result +=
      y[7] *
      (+4.27611269e+00 - 5.42822417e-04 * tc[1] + 1.67335701e-05 * tc[2] -
       2.15770813e-08 * tc[3] + 8.62454363e-12 * tc[4]) *
      0.0293996589639560;
    // species 8: C
    result +=
      y[8] *
      (+2.55423955e+00 - 3.21537724e-04 * tc[1] + 7.33792245e-07 * tc[2] -
       7.32234889e-10 * tc[3] + 2.66521446e-13 * tc[4]) *
      0.0832570144034635;
    // species 9: CH
    result +=
      y[9] *
      (+3.48981665e+00 + 3.23835541e-04 * tc[1] - 1.68899065e-06 * tc[2] +
       3.16217327e-09 * tc[3] - 1.40609067e-12 * tc[4]) *
      0.0768108149627468;
    // species 10: CH2
    result +=
      y[10] *
      (+3.76267867e+00 + 9.68872143e-04 * tc[1] + 2.79489841e-06 * tc[2] -
       3.85091153e-09 * tc[3] + 1.68741719e-12 * tc[4]) *
      0.0712910814857061;
    // species 11: CH2(S)
    result +=
      y[11] *
      (+4.19860411e+00 - 2.36661419e-03 * tc[1] + 8.23296220e-06 * tc[2] -
       6.68815981e-09 * tc[3] + 1.94314737e-12 * tc[4]) *
      0.0712910814857061;
    // species 12: CH3
    result +=
      y[12] *
      (+3.67359040e+00 + 2.01095175e-03 * tc[1] + 5.73021856e-06 * tc[2] -
       6.87117425e-09 * tc[3] + 2.54385734e-12 * tc[4]) *
      0.0665114732291320;
    // species 13: CH4
    result +=
      y[13] *
      (+5.14987613e+00 - 1.36709788e-02 * tc[1] + 4.91800599e-05 * tc[2] -
       4.84743026e-08 * tc[3] + 1.66693956e-11 * tc[4]) *
      0.0623324814560868;
    // species 14: CO
    result +=
      y[14] *
      (+3.57953347e+00 - 6.10353680e-04 * tc[1] + 1.01681433e-06 * tc[2] +
       9.07005884e-10 * tc[3] - 9.04424499e-13 * tc[4]) *
      0.0357015351660121;
    // species 15: CO2
    result +=
      y[15] *
      (+2.35677352e+00 + 8.98459677e-03 * tc[1] - 7.12356269e-06 * tc[2] +
       2.45919022e-09 * tc[3] - 1.43699548e-13 * tc[4]) *
      0.0227226249176305;
    // species 16: HCO
    result +=
      y[16] *
      (+4.22118584e+00 - 3.24392532e-03 * tc[1] + 1.37799446e-05 * tc[2] -
       1.33144093e-08 * tc[3] + 4.33768865e-12 * tc[4]) *
      0.0344613688055690;
    // species 17: CH2O
    result +=
      y[17] *
      (+4.79372315e+00 - 9.90833369e-03 * tc[1] + 3.73220008e-05 * tc[2] -
       3.79285261e-08 * tc[3] + 1.31772652e-11 * tc[4]) *
      0.0333044694598015;
    // species 18: CH2OH
    result +=
      y[18] *
      (+3.86388918e+00 + 5.59672304e-03 * tc[1] + 5.93271791e-06 * tc[2] -
       1.04532012e-08 * tc[3] + 4.36967278e-12 * tc[4]) *
      0.0322227234645872;
    // species 19: CH3O
    result +=
      y[19] *
      (+2.10620400e+00 + 7.21659500e-03 * tc[1] + 5.33847200e-06 * tc[2] -
       7.37763600e-09 * tc[3] + 2.07561000e-12 * tc[4]) *
      0.0322227234645872;
    // species 20: CH3OH
    result +=
      y[20] *
      (+5.71539582e+00 - 1.52309129e-02 * tc[1] + 6.52441155e-05 * tc[2] -
       7.10806889e-08 * tc[3] + 2.61352698e-11 * tc[4]) *
      0.0312090381374446;
    // species 21: C2H
    result +=
      y[21] *
      (+2.88965733e+00 + 1.34099611e-02 * tc[1] - 2.84769501e-05 * tc[2] +
       2.94791045e-08 * tc[3] - 1.09331511e-11 * tc[4]) *
      0.0399520575309628;
    // species 22: C2H2
    result +=
      y[22] *
      (+8.08681094e-01 + 2.33615629e-02 * tc[1] - 3.55171815e-05 * tc[2] +
       2.80152437e-08 * tc[3] - 8.50072974e-12 * tc[4]) *
      0.0384054074813734;
    // species 23: C2H3
    result +=
      y[23] *
      (+3.21246645e+00 + 1.51479162e-03 * tc[1] + 2.59209412e-05 * tc[2] -
       3.57657847e-08 * tc[3] + 1.47150873e-11 * tc[4]) *
      0.0369740442209569;
    // species 24: C2H4
    result +=
      y[24] *
      (+3.95920148e+00 - 7.57052247e-03 * tc[1] + 5.70990292e-05 * tc[2] -
       6.91588753e-08 * tc[3] + 2.69884373e-11 * tc[4]) *
      0.0356455407428531;
    // species 25: C2H5
    result +=
      y[25] *
      (+4.30646568e+00 - 4.18658892e-03 * tc[1] + 4.97142807e-05 * tc[2] -
       5.99126606e-08 * tc[3] + 2.30509004e-11 * tc[4]) *
      0.0344091941366733;
    // species 26: C2H6
    result +=
      y[26] *
      (+4.29142492e+00 - 5.50154270e-03 * tc[1] + 5.99438288e-05 * tc[2] -
       7.08466285e-08 * tc[3] + 2.68685771e-11 * tc[4]) *
      0.0332557366145660;
    // species 27: HCCO
    result +=
      y[27] *
      (+2.25172140e+00 + 1.76550210e-02 * tc[1] - 2.37291010e-05 * tc[2] +
       1.72757590e-08 * tc[3] - 5.06648110e-12 * tc[4]) *
      0.0243730044602598;
    // species 28: CH2CO
    result +=
      y[28] *
      (+2.13583630e+00 + 1.81188721e-02 * tc[1] - 1.73947474e-05 * tc[2] +
       9.34397568e-09 * tc[3] - 2.01457615e-12 * tc[4]) *
      0.0237885672145967;
    // species 29: HCCOH
    result +=
      y[29] *
      (+1.24237330e+00 + 3.10722010e-02 * tc[1] - 5.08668640e-05 * tc[2] +
       4.31371310e-08 * tc[3] - 1.40145940e-11 * tc[4]) *
      0.0237885672145967;
    // species 30: N2
    result +=
      y[30] *
      (+3.29867700e+00 + 1.40824040e-03 * tc[1] - 3.96322200e-06 * tc[2] +
       5.64151500e-09 * tc[3] - 2.44485400e-12 * tc[4]) *
      0.0356964374955379;
  } else {
    // species 0: H2
    result +=
      y[0] *
      (+3.33727920e+00 - 4.94024731e-05 * tc[1] + 4.99456778e-07 * tc[2] -
       1.79566394e-10 * tc[3] + 2.00255376e-14 * tc[4]) *
      0.4960317460317460;
    // species 1: H
    result +=
      y[1] *
      (+2.50000001e+00 - 2.30842973e-11 * tc[1] + 1.61561948e-14 * tc[2] -
       4.73515235e-18 * tc[3] + 4.98197357e-22 * tc[4]) *
      0.9920634920634921;
    // species 2: O
    result +=
      y[2] *
      (+2.56942078e+00 - 8.59741137e-05 * tc[1] + 4.19484589e-08 * tc[2] -
       1.00177799e-11 * tc[3] + 1.22833691e-15 * tc[4]) *
      0.0625039064941559;
    // species 3: O2
    result +=
      y[3] *
      (+3.28253784e+00 + 1.48308754e-03 * tc[1] - 7.57966669e-07 * tc[2] +
       2.09470555e-10 * tc[3] - 2.16717794e-14 * tc[4]) *
      0.0312519532470779;
    // species 4: OH
    result +=
      y[4] *
      (+3.09288767e+00 + 5.48429716e-04 * tc[1] + 1.26505228e-07 * tc[2] -
       8.79461556e-11 * tc[3] + 1.17412376e-14 * tc[4]) *
      0.0587993179279120;
    // species 5: H2O
    result +=
      y[5] *
      (+3.03399249e+00 + 2.17691804e-03 * tc[1] - 1.64072518e-07 * tc[2] -
       9.70419870e-11 * tc[3] + 1.68200992e-14 * tc[4]) *
      0.0555092978073827;
    // species 6: HO2
    result +=
      y[6] *
      (+4.01721090e+00 + 2.23982013e-03 * tc[1] - 6.33658150e-07 * tc[2] +
       1.14246370e-10 * tc[3] - 1.07908535e-14 * tc[4]) *
      0.0302975216627280;
    // species 7: H2O2
    result +=
      y[7] *
      (+4.16500285e+00 + 4.90831694e-03 * tc[1] - 1.90139225e-06 * tc[2] +
       3.71185986e-10 * tc[3] - 2.87908305e-14 * tc[4]) *
      0.0293996589639560;
    // species 8: C
    result +=
      y[8] *
      (+2.49266888e+00 + 4.79889284e-05 * tc[1] - 7.24335020e-08 * tc[2] +
       3.74291029e-11 * tc[3] - 4.87277893e-15 * tc[4]) *
      0.0832570144034635;
    // species 9: CH
    result +=
      y[9] *
      (+2.87846473e+00 + 9.70913681e-04 * tc[1] + 1.44445655e-07 * tc[2] -
       1.30687849e-10 * tc[3] + 1.76079383e-14 * tc[4]) *
      0.0768108149627468;
    // species 10: CH2
    result +=
      y[10] *
      (+2.87410113e+00 + 3.65639292e-03 * tc[1] - 1.40894597e-06 * tc[2] +
       2.60179549e-10 * tc[3] - 1.87727567e-14 * tc[4]) *
      0.0712910814857061;
    // species 11: CH2(S)
    result +=
      y[11] *
      (+2.29203842e+00 + 4.65588637e-03 * tc[1] - 2.01191947e-06 * tc[2] +
       4.17906000e-10 * tc[3] - 3.39716365e-14 * tc[4]) *
      0.0712910814857061;
    // species 12: CH3
    result +=
      y[12] *
      (+2.28571772e+00 + 7.23990037e-03 * tc[1] - 2.98714348e-06 * tc[2] +
       5.95684644e-10 * tc[3] - 4.67154394e-14 * tc[4]) *
      0.0665114732291320;
    // species 13: CH4
    result +=
      y[13] *
      (+7.48514950e-02 + 1.33909467e-02 * tc[1] - 5.73285809e-06 * tc[2] +
       1.22292535e-09 * tc[3] - 1.01815230e-13 * tc[4]) *
      0.0623324814560868;
    // species 14: CO
    result +=
      y[14] *
      (+2.71518561e+00 + 2.06252743e-03 * tc[1] - 9.98825771e-07 * tc[2] +
       2.30053008e-10 * tc[3] - 2.03647716e-14 * tc[4]) *
      0.0357015351660121;
    // species 15: CO2
    result +=
      y[15] *
      (+3.85746029e+00 + 4.41437026e-03 * tc[1] - 2.21481404e-06 * tc[2] +
       5.23490188e-10 * tc[3] - 4.72084164e-14 * tc[4]) *
      0.0227226249176305;
    // species 16: HCO
    result +=
      y[16] *
      (+2.77217438e+00 + 4.95695526e-03 * tc[1] - 2.48445613e-06 * tc[2] +
       5.89161778e-10 * tc[3] - 5.33508711e-14 * tc[4]) *
      0.0344613688055690;
    // species 17: CH2O
    result +=
      y[17] *
      (+1.76069008e+00 + 9.20000082e-03 * tc[1] - 4.42258813e-06 * tc[2] +
       1.00641212e-09 * tc[3] - 8.83855640e-14 * tc[4]) *
      0.0333044694598015;
    // species 18: CH2OH
    result +=
      y[18] *
      (+3.69266569e+00 + 8.64576797e-03 * tc[1] - 3.75101120e-06 * tc[2] +
       7.87234636e-10 * tc[3] - 6.48554201e-14 * tc[4]) *
      0.0322227234645872;
    // species 19: CH3O
    result +=
      y[19] *
      (+3.77079900e+00 + 7.87149700e-03 * tc[1] - 2.65638400e-06 * tc[2] +
       3.94443100e-10 * tc[3] - 2.11261600e-14 * tc[4]) *
      0.0322227234645872;
    // species 20: CH3OH
    result +=
      y[20] *
      (+1.78970791e+00 + 1.40938292e-02 * tc[1] - 6.36500835e-06 * tc[2] +
       1.38171085e-09 * tc[3] - 1.17060220e-13 * tc[4]) *
      0.0312090381374446;
    // species 21: C2H
    result +=
      y[21] *
      (+3.16780652e+00 + 4.75221902e-03 * tc[1] - 1.83787077e-06 * tc[2] +
       3.04190252e-10 * tc[3] - 1.77232770e-14 * tc[4]) *
      0.0399520575309628;
    // species 22: C2H2
    result +=
      y[22] *
      (+4.14756964e+00 + 5.96166664e-03 * tc[1] - 2.37294852e-06 * tc[2] +
       4.67412171e-10 * tc[3] - 3.61235213e-14 * tc[4]) *
      0.0384054074813734;
    // species 23: C2H3
    result +=
      y[23] *
      (+3.01672400e+00 + 1.03302292e-02 * tc[1] - 4.68082349e-06 * tc[2] +
       1.01763288e-09 * tc[3] - 8.62607041e-14 * tc[4]) *
      0.0369740442209569;
    // species 24: C2H4
    result +=
      y[24] *
      (+2.03611116e+00 + 1.46454151e-02 * tc[1] - 6.71077915e-06 * tc[2] +
       1.47222923e-09 * tc[3] - 1.25706061e-13 * tc[4]) *
      0.0356455407428531;
    // species 25: C2H5
    result +=
      y[25] *
      (+1.95465642e+00 + 1.73972722e-02 * tc[1] - 7.98206668e-06 * tc[2] +
       1.75217689e-09 * tc[3] - 1.49641576e-13 * tc[4]) *
      0.0344091941366733;
    // species 26: C2H6
    result +=
      y[26] *
      (+1.07188150e+00 + 2.16852677e-02 * tc[1] - 1.00256067e-05 * tc[2] +
       2.21412001e-09 * tc[3] - 1.90002890e-13 * tc[4]) *
      0.0332557366145660;
    // species 27: HCCO
    result +=
      y[27] *
      (+5.62820580e+00 + 4.08534010e-03 * tc[1] - 1.59345470e-06 * tc[2] +
       2.86260520e-10 * tc[3] - 1.94078320e-14 * tc[4]) *
      0.0243730044602598;
    // species 28: CH2CO
    result +=
      y[28] *
      (+4.51129732e+00 + 9.00359745e-03 * tc[1] - 4.16939635e-06 * tc[2] +
       9.23345882e-10 * tc[3] - 7.94838201e-14 * tc[4]) *
      0.0237885672145967;
    // species 29: HCCOH
    result +=
      y[29] *
      (+5.92382910e+00 + 6.79236000e-03 * tc[1] - 2.56585640e-06 * tc[2] +
       4.49878410e-10 * tc[3] - 2.99401010e-14 * tc[4]) *
      0.0237885672145967;
    // species 30: N2
    result +=
      y[30] *
      (+2.92664000e+00 + 1.48797680e-03 * tc[1] - 5.68476000e-07 * tc[2] +
       1.00970380e-10 * tc[3] - 6.75335100e-15 * tc[4]) *
      0.0356964374955379;
  }

  // species with no change at a midpoint T
  // species 31: AR
  result += y[31] *
            (+2.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
             0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4]) *
            0.0250312891113892;

  cpbs = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 35)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cvbl)
{
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real cvor[32];                               //  temporary storage
  cv_R(cvor, tc);

  // perform dot product
  for (int id = 0; id < 32; ++id) {
    result += x[id] * cvor[id];
  }

  cvbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 36)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cvbs)
{
  amrex::Real result = 0.0;
  const amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  // compute Cv/R at the given temperature

  // species with midpoint at T=1000 kelvin
  if (tT < 1000) {
    // species 0: H2
    result +=
      y[0] *
      (+1.34433112e+00 + 7.98052075e-03 * tc[1] - 1.94781510e-05 * tc[2] +
       2.01572094e-08 * tc[3] - 7.37611761e-12 * tc[4]) *
      0.4960317460317460;
    // species 1: H
    result +=
      y[1] *
      (+1.50000000e+00 + 7.05332819e-13 * tc[1] - 1.99591964e-15 * tc[2] +
       2.30081632e-18 * tc[3] - 9.27732332e-22 * tc[4]) *
      0.9920634920634921;
    // species 2: O
    result +=
      y[2] *
      (+2.16826710e+00 - 3.27931884e-03 * tc[1] + 6.64306396e-06 * tc[2] -
       6.12806624e-09 * tc[3] + 2.11265971e-12 * tc[4]) *
      0.0625039064941559;
    // species 3: O2
    result +=
      y[3] *
      (+2.78245636e+00 - 2.99673416e-03 * tc[1] + 9.84730201e-06 * tc[2] -
       9.68129509e-09 * tc[3] + 3.24372837e-12 * tc[4]) *
      0.0312519532470779;
    // species 4: OH
    result +=
      y[4] *
      (+2.99201543e+00 - 2.40131752e-03 * tc[1] + 4.61793841e-06 * tc[2] -
       3.88113333e-09 * tc[3] + 1.36411470e-12 * tc[4]) *
      0.0587993179279120;
    // species 5: H2O
    result +=
      y[5] *
      (+3.19864056e+00 - 2.03643410e-03 * tc[1] + 6.52040211e-06 * tc[2] -
       5.48797062e-09 * tc[3] + 1.77197817e-12 * tc[4]) *
      0.0555092978073827;
    // species 6: HO2
    result +=
      y[6] *
      (+3.30179801e+00 - 4.74912051e-03 * tc[1] + 2.11582891e-05 * tc[2] -
       2.42763894e-08 * tc[3] + 9.29225124e-12 * tc[4]) *
      0.0302975216627280;
    // species 7: H2O2
    result +=
      y[7] *
      (+3.27611269e+00 - 5.42822417e-04 * tc[1] + 1.67335701e-05 * tc[2] -
       2.15770813e-08 * tc[3] + 8.62454363e-12 * tc[4]) *
      0.0293996589639560;
    // species 8: C
    result +=
      y[8] *
      (+1.55423955e+00 - 3.21537724e-04 * tc[1] + 7.33792245e-07 * tc[2] -
       7.32234889e-10 * tc[3] + 2.66521446e-13 * tc[4]) *
      0.0832570144034635;
    // species 9: CH
    result +=
      y[9] *
      (+2.48981665e+00 + 3.23835541e-04 * tc[1] - 1.68899065e-06 * tc[2] +
       3.16217327e-09 * tc[3] - 1.40609067e-12 * tc[4]) *
      0.0768108149627468;
    // species 10: CH2
    result +=
      y[10] *
      (+2.76267867e+00 + 9.68872143e-04 * tc[1] + 2.79489841e-06 * tc[2] -
       3.85091153e-09 * tc[3] + 1.68741719e-12 * tc[4]) *
      0.0712910814857061;
    // species 11: CH2(S)
    result +=
      y[11] *
      (+3.19860411e+00 - 2.36661419e-03 * tc[1] + 8.23296220e-06 * tc[2] -
       6.68815981e-09 * tc[3] + 1.94314737e-12 * tc[4]) *
      0.0712910814857061;
    // species 12: CH3
    result +=
      y[12] *
      (+2.67359040e+00 + 2.01095175e-03 * tc[1] + 5.73021856e-06 * tc[2] -
       6.87117425e-09 * tc[3] + 2.54385734e-12 * tc[4]) *
      0.0665114732291320;
    // species 13: CH4
    result +=
      y[13] *
      (+4.14987613e+00 - 1.36709788e-02 * tc[1] + 4.91800599e-05 * tc[2] -
       4.84743026e-08 * tc[3] + 1.66693956e-11 * tc[4]) *
      0.0623324814560868;
    // species 14: CO
    result +=
      y[14] *
      (+2.57953347e+00 - 6.10353680e-04 * tc[1] + 1.01681433e-06 * tc[2] +
       9.07005884e-10 * tc[3] - 9.04424499e-13 * tc[4]) *
      0.0357015351660121;
    // species 15: CO2
    result +=
      y[15] *
      (+1.35677352e+00 + 8.98459677e-03 * tc[1] - 7.12356269e-06 * tc[2] +
       2.45919022e-09 * tc[3] - 1.43699548e-13 * tc[4]) *
      0.0227226249176305;
    // species 16: HCO
    result +=
      y[16] *
      (+3.22118584e+00 - 3.24392532e-03 * tc[1] + 1.37799446e-05 * tc[2] -
       1.33144093e-08 * tc[3] + 4.33768865e-12 * tc[4]) *
      0.0344613688055690;
    // species 17: CH2O
    result +=
      y[17] *
      (+3.79372315e+00 - 9.90833369e-03 * tc[1] + 3.73220008e-05 * tc[2] -
       3.79285261e-08 * tc[3] + 1.31772652e-11 * tc[4]) *
      0.0333044694598015;
    // species 18: CH2OH
    result +=
      y[18] *
      (+2.86388918e+00 + 5.59672304e-03 * tc[1] + 5.93271791e-06 * tc[2] -
       1.04532012e-08 * tc[3] + 4.36967278e-12 * tc[4]) *
      0.0322227234645872;
    // species 19: CH3O
    result +=
      y[19] *
      (+1.10620400e+00 + 7.21659500e-03 * tc[1] + 5.33847200e-06 * tc[2] -
       7.37763600e-09 * tc[3] + 2.07561000e-12 * tc[4]) *
      0.0322227234645872;
    // species 20: CH3OH
    result +=
      y[20] *
      (+4.71539582e+00 - 1.52309129e-02 * tc[1] + 6.52441155e-05 * tc[2] -
       7.10806889e-08 * tc[3] + 2.61352698e-11 * tc[4]) *
      0.0312090381374446;
    // species 21: C2H
    result +=
      y[21] *
      (+1.88965733e+00 + 1.34099611e-02 * tc[1] - 2.84769501e-05 * tc[2] +
       2.94791045e-08 * tc[3] - 1.09331511e-11 * tc[4]) *
      0.0399520575309628;
    // species 22: C2H2
    result +=
      y[22] *
      (-1.91318906e-01 + 2.33615629e-02 * tc[1] - 3.55171815e-05 * tc[2] +
       2.80152437e-08 * tc[3] - 8.50072974e-12 * tc[4]) *
      0.0384054074813734;
    // species 23: C2H3
    result +=
      y[23] *
      (+2.21246645e+00 + 1.51479162e-03 * tc[1] + 2.59209412e-05 * tc[2] -
       3.57657847e-08 * tc[3] + 1.47150873e-11 * tc[4]) *
      0.0369740442209569;
    // species 24: C2H4
    result +=
      y[24] *
      (+2.95920148e+00 - 7.57052247e-03 * tc[1] + 5.70990292e-05 * tc[2] -
       6.91588753e-08 * tc[3] + 2.69884373e-11 * tc[4]) *
      0.0356455407428531;
    // species 25: C2H5
    result +=
      y[25] *
      (+3.30646568e+00 - 4.18658892e-03 * tc[1] + 4.97142807e-05 * tc[2] -
       5.99126606e-08 * tc[3] + 2.30509004e-11 * tc[4]) *
      0.0344091941366733;
    // species 26: C2H6
    result +=
      y[26] *
      (+3.29142492e+00 - 5.50154270e-03 * tc[1] + 5.99438288e-05 * tc[2] -
       7.08466285e-08 * tc[3] + 2.68685771e-11 * tc[4]) *
      0.0332557366145660;
    // species 27: HCCO
    result +=
      y[27] *
      (+1.25172140e+00 + 1.76550210e-02 * tc[1] - 2.37291010e-05 * tc[2] +
       1.72757590e-08 * tc[3] - 5.06648110e-12 * tc[4]) *
      0.0243730044602598;
    // species 28: CH2CO
    result +=
      y[28] *
      (+1.13583630e+00 + 1.81188721e-02 * tc[1] - 1.73947474e-05 * tc[2] +
       9.34397568e-09 * tc[3] - 2.01457615e-12 * tc[4]) *
      0.0237885672145967;
    // species 29: HCCOH
    result +=
      y[29] *
      (+2.42373300e-01 + 3.10722010e-02 * tc[1] - 5.08668640e-05 * tc[2] +
       4.31371310e-08 * tc[3] - 1.40145940e-11 * tc[4]) *
      0.0237885672145967;
    // species 30: N2
    result +=
      y[30] *
      (+2.29867700e+00 + 1.40824040e-03 * tc[1] - 3.96322200e-06 * tc[2] +
       5.64151500e-09 * tc[3] - 2.44485400e-12 * tc[4]) *
      0.0356964374955379;
  } else {
    // species 0: H2
    result +=
      y[0] *
      (+2.33727920e+00 - 4.94024731e-05 * tc[1] + 4.99456778e-07 * tc[2] -
       1.79566394e-10 * tc[3] + 2.00255376e-14 * tc[4]) *
      0.4960317460317460;
    // species 1: H
    result +=
      y[1] *
      (+1.50000001e+00 - 2.30842973e-11 * tc[1] + 1.61561948e-14 * tc[2] -
       4.73515235e-18 * tc[3] + 4.98197357e-22 * tc[4]) *
      0.9920634920634921;
    // species 2: O
    result +=
      y[2] *
      (+1.56942078e+00 - 8.59741137e-05 * tc[1] + 4.19484589e-08 * tc[2] -
       1.00177799e-11 * tc[3] + 1.22833691e-15 * tc[4]) *
      0.0625039064941559;
    // species 3: O2
    result +=
      y[3] *
      (+2.28253784e+00 + 1.48308754e-03 * tc[1] - 7.57966669e-07 * tc[2] +
       2.09470555e-10 * tc[3] - 2.16717794e-14 * tc[4]) *
      0.0312519532470779;
    // species 4: OH
    result +=
      y[4] *
      (+2.09288767e+00 + 5.48429716e-04 * tc[1] + 1.26505228e-07 * tc[2] -
       8.79461556e-11 * tc[3] + 1.17412376e-14 * tc[4]) *
      0.0587993179279120;
    // species 5: H2O
    result +=
      y[5] *
      (+2.03399249e+00 + 2.17691804e-03 * tc[1] - 1.64072518e-07 * tc[2] -
       9.70419870e-11 * tc[3] + 1.68200992e-14 * tc[4]) *
      0.0555092978073827;
    // species 6: HO2
    result +=
      y[6] *
      (+3.01721090e+00 + 2.23982013e-03 * tc[1] - 6.33658150e-07 * tc[2] +
       1.14246370e-10 * tc[3] - 1.07908535e-14 * tc[4]) *
      0.0302975216627280;
    // species 7: H2O2
    result +=
      y[7] *
      (+3.16500285e+00 + 4.90831694e-03 * tc[1] - 1.90139225e-06 * tc[2] +
       3.71185986e-10 * tc[3] - 2.87908305e-14 * tc[4]) *
      0.0293996589639560;
    // species 8: C
    result +=
      y[8] *
      (+1.49266888e+00 + 4.79889284e-05 * tc[1] - 7.24335020e-08 * tc[2] +
       3.74291029e-11 * tc[3] - 4.87277893e-15 * tc[4]) *
      0.0832570144034635;
    // species 9: CH
    result +=
      y[9] *
      (+1.87846473e+00 + 9.70913681e-04 * tc[1] + 1.44445655e-07 * tc[2] -
       1.30687849e-10 * tc[3] + 1.76079383e-14 * tc[4]) *
      0.0768108149627468;
    // species 10: CH2
    result +=
      y[10] *
      (+1.87410113e+00 + 3.65639292e-03 * tc[1] - 1.40894597e-06 * tc[2] +
       2.60179549e-10 * tc[3] - 1.87727567e-14 * tc[4]) *
      0.0712910814857061;
    // species 11: CH2(S)
    result +=
      y[11] *
      (+1.29203842e+00 + 4.65588637e-03 * tc[1] - 2.01191947e-06 * tc[2] +
       4.17906000e-10 * tc[3] - 3.39716365e-14 * tc[4]) *
      0.0712910814857061;
    // species 12: CH3
    result +=
      y[12] *
      (+1.28571772e+00 + 7.23990037e-03 * tc[1] - 2.98714348e-06 * tc[2] +
       5.95684644e-10 * tc[3] - 4.67154394e-14 * tc[4]) *
      0.0665114732291320;
    // species 13: CH4
    result +=
      y[13] *
      (-9.25148505e-01 + 1.33909467e-02 * tc[1] - 5.73285809e-06 * tc[2] +
       1.22292535e-09 * tc[3] - 1.01815230e-13 * tc[4]) *
      0.0623324814560868;
    // species 14: CO
    result +=
      y[14] *
      (+1.71518561e+00 + 2.06252743e-03 * tc[1] - 9.98825771e-07 * tc[2] +
       2.30053008e-10 * tc[3] - 2.03647716e-14 * tc[4]) *
      0.0357015351660121;
    // species 15: CO2
    result +=
      y[15] *
      (+2.85746029e+00 + 4.41437026e-03 * tc[1] - 2.21481404e-06 * tc[2] +
       5.23490188e-10 * tc[3] - 4.72084164e-14 * tc[4]) *
      0.0227226249176305;
    // species 16: HCO
    result +=
      y[16] *
      (+1.77217438e+00 + 4.95695526e-03 * tc[1] - 2.48445613e-06 * tc[2] +
       5.89161778e-10 * tc[3] - 5.33508711e-14 * tc[4]) *
      0.0344613688055690;
    // species 17: CH2O
    result +=
      y[17] *
      (+7.60690080e-01 + 9.20000082e-03 * tc[1] - 4.42258813e-06 * tc[2] +
       1.00641212e-09 * tc[3] - 8.83855640e-14 * tc[4]) *
      0.0333044694598015;
    // species 18: CH2OH
    result +=
      y[18] *
      (+2.69266569e+00 + 8.64576797e-03 * tc[1] - 3.75101120e-06 * tc[2] +
       7.87234636e-10 * tc[3] - 6.48554201e-14 * tc[4]) *
      0.0322227234645872;
    // species 19: CH3O
    result +=
      y[19] *
      (+2.77079900e+00 + 7.87149700e-03 * tc[1] - 2.65638400e-06 * tc[2] +
       3.94443100e-10 * tc[3] - 2.11261600e-14 * tc[4]) *
      0.0322227234645872;
    // species 20: CH3OH
    result +=
      y[20] *
      (+7.89707910e-01 + 1.40938292e-02 * tc[1] - 6.36500835e-06 * tc[2] +
       1.38171085e-09 * tc[3] - 1.17060220e-13 * tc[4]) *
      0.0312090381374446;
    // species 21: C2H
    result +=
      y[21] *
      (+2.16780652e+00 + 4.75221902e-03 * tc[1] - 1.83787077e-06 * tc[2] +
       3.04190252e-10 * tc[3] - 1.77232770e-14 * tc[4]) *
      0.0399520575309628;
    // species 22: C2H2
    result +=
      y[22] *
      (+3.14756964e+00 + 5.96166664e-03 * tc[1] - 2.37294852e-06 * tc[2] +
       4.67412171e-10 * tc[3] - 3.61235213e-14 * tc[4]) *
      0.0384054074813734;
    // species 23: C2H3
    result +=
      y[23] *
      (+2.01672400e+00 + 1.03302292e-02 * tc[1] - 4.68082349e-06 * tc[2] +
       1.01763288e-09 * tc[3] - 8.62607041e-14 * tc[4]) *
      0.0369740442209569;
    // species 24: C2H4
    result +=
      y[24] *
      (+1.03611116e+00 + 1.46454151e-02 * tc[1] - 6.71077915e-06 * tc[2] +
       1.47222923e-09 * tc[3] - 1.25706061e-13 * tc[4]) *
      0.0356455407428531;
    // species 25: C2H5
    result +=
      y[25] *
      (+9.54656420e-01 + 1.73972722e-02 * tc[1] - 7.98206668e-06 * tc[2] +
       1.75217689e-09 * tc[3] - 1.49641576e-13 * tc[4]) *
      0.0344091941366733;
    // species 26: C2H6
    result +=
      y[26] *
      (+7.18815000e-02 + 2.16852677e-02 * tc[1] - 1.00256067e-05 * tc[2] +
       2.21412001e-09 * tc[3] - 1.90002890e-13 * tc[4]) *
      0.0332557366145660;
    // species 27: HCCO
    result +=
      y[27] *
      (+4.62820580e+00 + 4.08534010e-03 * tc[1] - 1.59345470e-06 * tc[2] +
       2.86260520e-10 * tc[3] - 1.94078320e-14 * tc[4]) *
      0.0243730044602598;
    // species 28: CH2CO
    result +=
      y[28] *
      (+3.51129732e+00 + 9.00359745e-03 * tc[1] - 4.16939635e-06 * tc[2] +
       9.23345882e-10 * tc[3] - 7.94838201e-14 * tc[4]) *
      0.0237885672145967;
    // species 29: HCCOH
    result +=
      y[29] *
      (+4.92382910e+00 + 6.79236000e-03 * tc[1] - 2.56585640e-06 * tc[2] +
       4.49878410e-10 * tc[3] - 2.99401010e-14 * tc[4]) *
      0.0237885672145967;
    // species 30: N2
    result +=
      y[30] *
      (+1.92664000e+00 + 1.48797680e-03 * tc[1] - 5.68476000e-07 * tc[2] +
       1.00970380e-10 * tc[3] - 6.75335100e-15 * tc[4]) *
      0.0356964374955379;
  }

  // species with no change at a midpoint T
  // species 31: AR
  result += y[31] *
            (+1.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
             0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4]) *
            0.0250312891113892;

  cvbs = result * 8.31446261815324e+07;
}

// Returns the mean enthalpy of the mixture in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBML(const amrex::Real T, const amrex::Real x[], amrex::Real& hbml)
{
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real hml[32];                                //  temporary storage
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesEnthalpy(hml, tc);

  // perform dot product
  for (int id = 0; id < 32; ++id) {
    result += x[id] * hml[id];
  }

  hbml = result * RT;
}

// Returns mean enthalpy of mixture in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& hbms)
{
  amrex::Real result = 0.0;
  const amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (tT < 1000) {
    // species 0: H2
    result += y[0] *
              (+2.34433112e+00 + 3.99026037e-03 * tc[1] -
               6.49271700e-06 * tc[2] + 5.03930235e-09 * tc[3] -
               1.47522352e-12 * tc[4] - 9.17935173e+02 * invT) *
              0.4960317460317460;
    // species 1: H
    result += y[1] *
              (+2.50000000e+00 + 3.52666409e-13 * tc[1] -
               6.65306547e-16 * tc[2] + 5.75204080e-19 * tc[3] -
               1.85546466e-22 * tc[4] + 2.54736599e+04 * invT) *
              0.9920634920634921;
    // species 2: O
    result += y[2] *
              (+3.16826710e+00 - 1.63965942e-03 * tc[1] +
               2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
               4.22531942e-13 * tc[4] + 2.91222592e+04 * invT) *
              0.0625039064941559;
    // species 3: O2
    result += y[3] *
              (+3.78245636e+00 - 1.49836708e-03 * tc[1] +
               3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
               6.48745674e-13 * tc[4] - 1.06394356e+03 * invT) *
              0.0312519532470779;
    // species 4: OH
    result += y[4] *
              (+3.99201543e+00 - 1.20065876e-03 * tc[1] +
               1.53931280e-06 * tc[2] - 9.70283332e-10 * tc[3] +
               2.72822940e-13 * tc[4] + 3.61508056e+03 * invT) *
              0.0587993179279120;
    // species 5: H2O
    result += y[5] *
              (+4.19864056e+00 - 1.01821705e-03 * tc[1] +
               2.17346737e-06 * tc[2] - 1.37199266e-09 * tc[3] +
               3.54395634e-13 * tc[4] - 3.02937267e+04 * invT) *
              0.0555092978073827;
    // species 6: HO2
    result += y[6] *
              (+4.30179801e+00 - 2.37456025e-03 * tc[1] +
               7.05276303e-06 * tc[2] - 6.06909735e-09 * tc[3] +
               1.85845025e-12 * tc[4] + 2.94808040e+02 * invT) *
              0.0302975216627280;
    // species 7: H2O2
    result += y[7] *
              (+4.27611269e+00 - 2.71411208e-04 * tc[1] +
               5.57785670e-06 * tc[2] - 5.39427032e-09 * tc[3] +
               1.72490873e-12 * tc[4] - 1.77025821e+04 * invT) *
              0.0293996589639560;
    // species 8: C
    result += y[8] *
              (+2.55423955e+00 - 1.60768862e-04 * tc[1] +
               2.44597415e-07 * tc[2] - 1.83058722e-10 * tc[3] +
               5.33042892e-14 * tc[4] + 8.54438832e+04 * invT) *
              0.0832570144034635;
    // species 9: CH
    result += y[9] *
              (+3.48981665e+00 + 1.61917771e-04 * tc[1] -
               5.62996883e-07 * tc[2] + 7.90543317e-10 * tc[3] -
               2.81218134e-13 * tc[4] + 7.07972934e+04 * invT) *
              0.0768108149627468;
    // species 10: CH2
    result += y[10] *
              (+3.76267867e+00 + 4.84436072e-04 * tc[1] +
               9.31632803e-07 * tc[2] - 9.62727883e-10 * tc[3] +
               3.37483438e-13 * tc[4] + 4.60040401e+04 * invT) *
              0.0712910814857061;
    // species 11: CH2(S)
    result += y[11] *
              (+4.19860411e+00 - 1.18330710e-03 * tc[1] +
               2.74432073e-06 * tc[2] - 1.67203995e-09 * tc[3] +
               3.88629474e-13 * tc[4] + 5.04968163e+04 * invT) *
              0.0712910814857061;
    // species 12: CH3
    result += y[12] *
              (+3.67359040e+00 + 1.00547588e-03 * tc[1] +
               1.91007285e-06 * tc[2] - 1.71779356e-09 * tc[3] +
               5.08771468e-13 * tc[4] + 1.64449988e+04 * invT) *
              0.0665114732291320;
    // species 13: CH4
    result += y[13] *
              (+5.14987613e+00 - 6.83548940e-03 * tc[1] +
               1.63933533e-05 * tc[2] - 1.21185757e-08 * tc[3] +
               3.33387912e-12 * tc[4] - 1.02466476e+04 * invT) *
              0.0623324814560868;
    // species 14: CO
    result += y[14] *
              (+3.57953347e+00 - 3.05176840e-04 * tc[1] +
               3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
               1.80884900e-13 * tc[4] - 1.43440860e+04 * invT) *
              0.0357015351660121;
    // species 15: CO2
    result += y[15] *
              (+2.35677352e+00 + 4.49229839e-03 * tc[1] -
               2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
               2.87399096e-14 * tc[4] - 4.83719697e+04 * invT) *
              0.0227226249176305;
    // species 16: HCO
    result += y[16] *
              (+4.22118584e+00 - 1.62196266e-03 * tc[1] +
               4.59331487e-06 * tc[2] - 3.32860233e-09 * tc[3] +
               8.67537730e-13 * tc[4] + 3.83956496e+03 * invT) *
              0.0344613688055690;
    // species 17: CH2O
    result += y[17] *
              (+4.79372315e+00 - 4.95416684e-03 * tc[1] +
               1.24406669e-05 * tc[2] - 9.48213152e-09 * tc[3] +
               2.63545304e-12 * tc[4] - 1.43089567e+04 * invT) *
              0.0333044694598015;
    // species 18: CH2OH
    result += y[18] *
              (+3.86388918e+00 + 2.79836152e-03 * tc[1] +
               1.97757264e-06 * tc[2] - 2.61330030e-09 * tc[3] +
               8.73934556e-13 * tc[4] - 3.19391367e+03 * invT) *
              0.0322227234645872;
    // species 19: CH3O
    result += y[19] *
              (+2.10620400e+00 + 3.60829750e-03 * tc[1] +
               1.77949067e-06 * tc[2] - 1.84440900e-09 * tc[3] +
               4.15122000e-13 * tc[4] + 9.78601100e+02 * invT) *
              0.0322227234645872;
    // species 20: CH3OH
    result += y[20] *
              (+5.71539582e+00 - 7.61545645e-03 * tc[1] +
               2.17480385e-05 * tc[2] - 1.77701722e-08 * tc[3] +
               5.22705396e-12 * tc[4] - 2.56427656e+04 * invT) *
              0.0312090381374446;
    // species 21: C2H
    result += y[21] *
              (+2.88965733e+00 + 6.70498055e-03 * tc[1] -
               9.49231670e-06 * tc[2] + 7.36977613e-09 * tc[3] -
               2.18663022e-12 * tc[4] + 6.68393932e+04 * invT) *
              0.0399520575309628;
    // species 22: C2H2
    result += y[22] *
              (+8.08681094e-01 + 1.16807815e-02 * tc[1] -
               1.18390605e-05 * tc[2] + 7.00381092e-09 * tc[3] -
               1.70014595e-12 * tc[4] + 2.64289807e+04 * invT) *
              0.0384054074813734;
    // species 23: C2H3
    result += y[23] *
              (+3.21246645e+00 + 7.57395810e-04 * tc[1] +
               8.64031373e-06 * tc[2] - 8.94144617e-09 * tc[3] +
               2.94301746e-12 * tc[4] + 3.48598468e+04 * invT) *
              0.0369740442209569;
    // species 24: C2H4
    result += y[24] *
              (+3.95920148e+00 - 3.78526124e-03 * tc[1] +
               1.90330097e-05 * tc[2] - 1.72897188e-08 * tc[3] +
               5.39768746e-12 * tc[4] + 5.08977593e+03 * invT) *
              0.0356455407428531;
    // species 25: C2H5
    result += y[25] *
              (+4.30646568e+00 - 2.09329446e-03 * tc[1] +
               1.65714269e-05 * tc[2] - 1.49781651e-08 * tc[3] +
               4.61018008e-12 * tc[4] + 1.28416265e+04 * invT) *
              0.0344091941366733;
    // species 26: C2H6
    result += y[26] *
              (+4.29142492e+00 - 2.75077135e-03 * tc[1] +
               1.99812763e-05 * tc[2] - 1.77116571e-08 * tc[3] +
               5.37371542e-12 * tc[4] - 1.15222055e+04 * invT) *
              0.0332557366145660;
    // species 27: HCCO
    result += y[27] *
              (+2.25172140e+00 + 8.82751050e-03 * tc[1] -
               7.90970033e-06 * tc[2] + 4.31893975e-09 * tc[3] -
               1.01329622e-12 * tc[4] + 2.00594490e+04 * invT) *
              0.0243730044602598;
    // species 28: CH2CO
    result += y[28] *
              (+2.13583630e+00 + 9.05943605e-03 * tc[1] -
               5.79824913e-06 * tc[2] + 2.33599392e-09 * tc[3] -
               4.02915230e-13 * tc[4] - 7.04291804e+03 * invT) *
              0.0237885672145967;
    // species 29: HCCOH
    result += y[29] *
              (+1.24237330e+00 + 1.55361005e-02 * tc[1] -
               1.69556213e-05 * tc[2] + 1.07842828e-08 * tc[3] -
               2.80291880e-12 * tc[4] + 8.03161430e+03 * invT) *
              0.0237885672145967;
    // species 30: N2
    result += y[30] *
              (+3.29867700e+00 + 7.04120200e-04 * tc[1] -
               1.32107400e-06 * tc[2] + 1.41037875e-09 * tc[3] -
               4.88970800e-13 * tc[4] - 1.02089990e+03 * invT) *
              0.0356964374955379;
  } else {
    // species 0: H2
    result += y[0] *
              (+3.33727920e+00 - 2.47012365e-05 * tc[1] +
               1.66485593e-07 * tc[2] - 4.48915985e-11 * tc[3] +
               4.00510752e-15 * tc[4] - 9.50158922e+02 * invT) *
              0.4960317460317460;
    // species 1: H
    result += y[1] *
              (+2.50000001e+00 - 1.15421486e-11 * tc[1] +
               5.38539827e-15 * tc[2] - 1.18378809e-18 * tc[3] +
               9.96394714e-23 * tc[4] + 2.54736599e+04 * invT) *
              0.9920634920634921;
    // species 2: O
    result += y[2] *
              (+2.56942078e+00 - 4.29870569e-05 * tc[1] +
               1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
               2.45667382e-16 * tc[4] + 2.92175791e+04 * invT) *
              0.0625039064941559;
    // species 3: O2
    result += y[3] *
              (+3.28253784e+00 + 7.41543770e-04 * tc[1] -
               2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
               4.33435588e-15 * tc[4] - 1.08845772e+03 * invT) *
              0.0312519532470779;
    // species 4: OH
    result += y[4] *
              (+3.09288767e+00 + 2.74214858e-04 * tc[1] +
               4.21684093e-08 * tc[2] - 2.19865389e-11 * tc[3] +
               2.34824752e-15 * tc[4] + 3.85865700e+03 * invT) *
              0.0587993179279120;
    // species 5: H2O
    result += y[5] *
              (+3.03399249e+00 + 1.08845902e-03 * tc[1] -
               5.46908393e-08 * tc[2] - 2.42604967e-11 * tc[3] +
               3.36401984e-15 * tc[4] - 3.00042971e+04 * invT) *
              0.0555092978073827;
    // species 6: HO2
    result += y[6] *
              (+4.01721090e+00 + 1.11991006e-03 * tc[1] -
               2.11219383e-07 * tc[2] + 2.85615925e-11 * tc[3] -
               2.15817070e-15 * tc[4] + 1.11856713e+02 * invT) *
              0.0302975216627280;
    // species 7: H2O2
    result += y[7] *
              (+4.16500285e+00 + 2.45415847e-03 * tc[1] -
               6.33797417e-07 * tc[2] + 9.27964965e-11 * tc[3] -
               5.75816610e-15 * tc[4] - 1.78617877e+04 * invT) *
              0.0293996589639560;
    // species 8: C
    result += y[8] *
              (+2.49266888e+00 + 2.39944642e-05 * tc[1] -
               2.41445007e-08 * tc[2] + 9.35727573e-12 * tc[3] -
               9.74555786e-16 * tc[4] + 8.54512953e+04 * invT) *
              0.0832570144034635;
    // species 9: CH
    result += y[9] *
              (+2.87846473e+00 + 4.85456840e-04 * tc[1] +
               4.81485517e-08 * tc[2] - 3.26719623e-11 * tc[3] +
               3.52158766e-15 * tc[4] + 7.10124364e+04 * invT) *
              0.0768108149627468;
    // species 10: CH2
    result += y[10] *
              (+2.87410113e+00 + 1.82819646e-03 * tc[1] -
               4.69648657e-07 * tc[2] + 6.50448872e-11 * tc[3] -
               3.75455134e-15 * tc[4] + 4.62636040e+04 * invT) *
              0.0712910814857061;
    // species 11: CH2(S)
    result += y[11] *
              (+2.29203842e+00 + 2.32794318e-03 * tc[1] -
               6.70639823e-07 * tc[2] + 1.04476500e-10 * tc[3] -
               6.79432730e-15 * tc[4] + 5.09259997e+04 * invT) *
              0.0712910814857061;
    // species 12: CH3
    result += y[12] *
              (+2.28571772e+00 + 3.61995018e-03 * tc[1] -
               9.95714493e-07 * tc[2] + 1.48921161e-10 * tc[3] -
               9.34308788e-15 * tc[4] + 1.67755843e+04 * invT) *
              0.0665114732291320;
    // species 13: CH4
    result += y[13] *
              (+7.48514950e-02 + 6.69547335e-03 * tc[1] -
               1.91095270e-06 * tc[2] + 3.05731338e-10 * tc[3] -
               2.03630460e-14 * tc[4] - 9.46834459e+03 * invT) *
              0.0623324814560868;
    // species 14: CO
    result += y[14] *
              (+2.71518561e+00 + 1.03126372e-03 * tc[1] -
               3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
               4.07295432e-15 * tc[4] - 1.41518724e+04 * invT) *
              0.0357015351660121;
    // species 15: CO2
    result += y[15] *
              (+3.85746029e+00 + 2.20718513e-03 * tc[1] -
               7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
               9.44168328e-15 * tc[4] - 4.87591660e+04 * invT) *
              0.0227226249176305;
    // species 16: HCO
    result += y[16] *
              (+2.77217438e+00 + 2.47847763e-03 * tc[1] -
               8.28152043e-07 * tc[2] + 1.47290445e-10 * tc[3] -
               1.06701742e-14 * tc[4] + 4.01191815e+03 * invT) *
              0.0344613688055690;
    // species 17: CH2O
    result += y[17] *
              (+1.76069008e+00 + 4.60000041e-03 * tc[1] -
               1.47419604e-06 * tc[2] + 2.51603030e-10 * tc[3] -
               1.76771128e-14 * tc[4] - 1.39958323e+04 * invT) *
              0.0333044694598015;
    // species 18: CH2OH
    result += y[18] *
              (+3.69266569e+00 + 4.32288399e-03 * tc[1] -
               1.25033707e-06 * tc[2] + 1.96808659e-10 * tc[3] -
               1.29710840e-14 * tc[4] - 3.24250627e+03 * invT) *
              0.0322227234645872;
    // species 19: CH3O
    result += y[19] *
              (+3.77079900e+00 + 3.93574850e-03 * tc[1] -
               8.85461333e-07 * tc[2] + 9.86107750e-11 * tc[3] -
               4.22523200e-15 * tc[4] + 1.27832520e+02 * invT) *
              0.0322227234645872;
    // species 20: CH3OH
    result += y[20] *
              (+1.78970791e+00 + 7.04691460e-03 * tc[1] -
               2.12166945e-06 * tc[2] + 3.45427713e-10 * tc[3] -
               2.34120440e-14 * tc[4] - 2.53748747e+04 * invT) *
              0.0312090381374446;
    // species 21: C2H
    result += y[21] *
              (+3.16780652e+00 + 2.37610951e-03 * tc[1] -
               6.12623590e-07 * tc[2] + 7.60475630e-11 * tc[3] -
               3.54465540e-15 * tc[4] + 6.71210650e+04 * invT) *
              0.0399520575309628;
    // species 22: C2H2
    result += y[22] *
              (+4.14756964e+00 + 2.98083332e-03 * tc[1] -
               7.90982840e-07 * tc[2] + 1.16853043e-10 * tc[3] -
               7.22470426e-15 * tc[4] + 2.59359992e+04 * invT) *
              0.0384054074813734;
    // species 23: C2H3
    result += y[23] *
              (+3.01672400e+00 + 5.16511460e-03 * tc[1] -
               1.56027450e-06 * tc[2] + 2.54408220e-10 * tc[3] -
               1.72521408e-14 * tc[4] + 3.46128739e+04 * invT) *
              0.0369740442209569;
    // species 24: C2H4
    result += y[24] *
              (+2.03611116e+00 + 7.32270755e-03 * tc[1] -
               2.23692638e-06 * tc[2] + 3.68057308e-10 * tc[3] -
               2.51412122e-14 * tc[4] + 4.93988614e+03 * invT) *
              0.0356455407428531;
    // species 25: C2H5
    result += y[25] *
              (+1.95465642e+00 + 8.69863610e-03 * tc[1] -
               2.66068889e-06 * tc[2] + 4.38044223e-10 * tc[3] -
               2.99283152e-14 * tc[4] + 1.28575200e+04 * invT) *
              0.0344091941366733;
    // species 26: C2H6
    result += y[26] *
              (+1.07188150e+00 + 1.08426339e-02 * tc[1] -
               3.34186890e-06 * tc[2] + 5.53530003e-10 * tc[3] -
               3.80005780e-14 * tc[4] - 1.14263932e+04 * invT) *
              0.0332557366145660;
    // species 27: HCCO
    result += y[27] *
              (+5.62820580e+00 + 2.04267005e-03 * tc[1] -
               5.31151567e-07 * tc[2] + 7.15651300e-11 * tc[3] -
               3.88156640e-15 * tc[4] + 1.93272150e+04 * invT) *
              0.0243730044602598;
    // species 28: CH2CO
    result += y[28] *
              (+4.51129732e+00 + 4.50179872e-03 * tc[1] -
               1.38979878e-06 * tc[2] + 2.30836470e-10 * tc[3] -
               1.58967640e-14 * tc[4] - 7.55105311e+03 * invT) *
              0.0237885672145967;
    // species 29: HCCOH
    result += y[29] *
              (+5.92382910e+00 + 3.39618000e-03 * tc[1] -
               8.55285467e-07 * tc[2] + 1.12469603e-10 * tc[3] -
               5.98802020e-15 * tc[4] + 7.26462600e+03 * invT) *
              0.0237885672145967;
    // species 30: N2
    result += y[30] *
              (+2.92664000e+00 + 7.43988400e-04 * tc[1] -
               1.89492000e-07 * tc[2] + 2.52425950e-11 * tc[3] -
               1.35067020e-15 * tc[4] - 9.22797700e+02 * invT) *
              0.0356964374955379;
  }

  // species with no change at a midpoint T
  // species 31: AR
  result +=
    y[31] *
    (+2.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
     0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4] - 7.45375000e+02 * invT) *
    0.0250312891113892;

  const amrex::Real RT = 8.31446261815324e+07 * tT; // R*T

  hbms = result * RT;
}

// get mean internal energy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBML(const amrex::Real T, const amrex::Real x[], amrex::Real& ubml)
{
  amrex::Real result = 0;
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real uml[32];                                //  temporary energy array
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesInternalEnergy(uml, tc);

  // perform dot product
  for (int id = 0; id < 32; ++id) {
    result += x[id] * uml[id];
  }

  ubml = result * RT;
}

// get mean internal energy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& ubms)
{
  amrex::Real result = 0.0;
  const amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (tT < 1000) {
    // species 0: H2
    result += y[0] *
              (+1.34433112e+00 + 3.99026037e-03 * tc[1] -
               6.49271700e-06 * tc[2] + 5.03930235e-09 * tc[3] -
               1.47522352e-12 * tc[4] - 9.17935173e+02 * invT) *
              0.4960317460317460;
    // species 1: H
    result += y[1] *
              (+1.50000000e+00 + 3.52666409e-13 * tc[1] -
               6.65306547e-16 * tc[2] + 5.75204080e-19 * tc[3] -
               1.85546466e-22 * tc[4] + 2.54736599e+04 * invT) *
              0.9920634920634921;
    // species 2: O
    result += y[2] *
              (+2.16826710e+00 - 1.63965942e-03 * tc[1] +
               2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
               4.22531942e-13 * tc[4] + 2.91222592e+04 * invT) *
              0.0625039064941559;
    // species 3: O2
    result += y[3] *
              (+2.78245636e+00 - 1.49836708e-03 * tc[1] +
               3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
               6.48745674e-13 * tc[4] - 1.06394356e+03 * invT) *
              0.0312519532470779;
    // species 4: OH
    result += y[4] *
              (+2.99201543e+00 - 1.20065876e-03 * tc[1] +
               1.53931280e-06 * tc[2] - 9.70283332e-10 * tc[3] +
               2.72822940e-13 * tc[4] + 3.61508056e+03 * invT) *
              0.0587993179279120;
    // species 5: H2O
    result += y[5] *
              (+3.19864056e+00 - 1.01821705e-03 * tc[1] +
               2.17346737e-06 * tc[2] - 1.37199266e-09 * tc[3] +
               3.54395634e-13 * tc[4] - 3.02937267e+04 * invT) *
              0.0555092978073827;
    // species 6: HO2
    result += y[6] *
              (+3.30179801e+00 - 2.37456025e-03 * tc[1] +
               7.05276303e-06 * tc[2] - 6.06909735e-09 * tc[3] +
               1.85845025e-12 * tc[4] + 2.94808040e+02 * invT) *
              0.0302975216627280;
    // species 7: H2O2
    result += y[7] *
              (+3.27611269e+00 - 2.71411208e-04 * tc[1] +
               5.57785670e-06 * tc[2] - 5.39427032e-09 * tc[3] +
               1.72490873e-12 * tc[4] - 1.77025821e+04 * invT) *
              0.0293996589639560;
    // species 8: C
    result += y[8] *
              (+1.55423955e+00 - 1.60768862e-04 * tc[1] +
               2.44597415e-07 * tc[2] - 1.83058722e-10 * tc[3] +
               5.33042892e-14 * tc[4] + 8.54438832e+04 * invT) *
              0.0832570144034635;
    // species 9: CH
    result += y[9] *
              (+2.48981665e+00 + 1.61917771e-04 * tc[1] -
               5.62996883e-07 * tc[2] + 7.90543317e-10 * tc[3] -
               2.81218134e-13 * tc[4] + 7.07972934e+04 * invT) *
              0.0768108149627468;
    // species 10: CH2
    result += y[10] *
              (+2.76267867e+00 + 4.84436072e-04 * tc[1] +
               9.31632803e-07 * tc[2] - 9.62727883e-10 * tc[3] +
               3.37483438e-13 * tc[4] + 4.60040401e+04 * invT) *
              0.0712910814857061;
    // species 11: CH2(S)
    result += y[11] *
              (+3.19860411e+00 - 1.18330710e-03 * tc[1] +
               2.74432073e-06 * tc[2] - 1.67203995e-09 * tc[3] +
               3.88629474e-13 * tc[4] + 5.04968163e+04 * invT) *
              0.0712910814857061;
    // species 12: CH3
    result += y[12] *
              (+2.67359040e+00 + 1.00547588e-03 * tc[1] +
               1.91007285e-06 * tc[2] - 1.71779356e-09 * tc[3] +
               5.08771468e-13 * tc[4] + 1.64449988e+04 * invT) *
              0.0665114732291320;
    // species 13: CH4
    result += y[13] *
              (+4.14987613e+00 - 6.83548940e-03 * tc[1] +
               1.63933533e-05 * tc[2] - 1.21185757e-08 * tc[3] +
               3.33387912e-12 * tc[4] - 1.02466476e+04 * invT) *
              0.0623324814560868;
    // species 14: CO
    result += y[14] *
              (+2.57953347e+00 - 3.05176840e-04 * tc[1] +
               3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
               1.80884900e-13 * tc[4] - 1.43440860e+04 * invT) *
              0.0357015351660121;
    // species 15: CO2
    result += y[15] *
              (+1.35677352e+00 + 4.49229839e-03 * tc[1] -
               2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
               2.87399096e-14 * tc[4] - 4.83719697e+04 * invT) *
              0.0227226249176305;
    // species 16: HCO
    result += y[16] *
              (+3.22118584e+00 - 1.62196266e-03 * tc[1] +
               4.59331487e-06 * tc[2] - 3.32860233e-09 * tc[3] +
               8.67537730e-13 * tc[4] + 3.83956496e+03 * invT) *
              0.0344613688055690;
    // species 17: CH2O
    result += y[17] *
              (+3.79372315e+00 - 4.95416684e-03 * tc[1] +
               1.24406669e-05 * tc[2] - 9.48213152e-09 * tc[3] +
               2.63545304e-12 * tc[4] - 1.43089567e+04 * invT) *
              0.0333044694598015;
    // species 18: CH2OH
    result += y[18] *
              (+2.86388918e+00 + 2.79836152e-03 * tc[1] +
               1.97757264e-06 * tc[2] - 2.61330030e-09 * tc[3] +
               8.73934556e-13 * tc[4] - 3.19391367e+03 * invT) *
              0.0322227234645872;
    // species 19: CH3O
    result += y[19] *
              (+1.10620400e+00 + 3.60829750e-03 * tc[1] +
               1.77949067e-06 * tc[2] - 1.84440900e-09 * tc[3] +
               4.15122000e-13 * tc[4] + 9.78601100e+02 * invT) *
              0.0322227234645872;
    // species 20: CH3OH
    result += y[20] *
              (+4.71539582e+00 - 7.61545645e-03 * tc[1] +
               2.17480385e-05 * tc[2] - 1.77701722e-08 * tc[3] +
               5.22705396e-12 * tc[4] - 2.56427656e+04 * invT) *
              0.0312090381374446;
    // species 21: C2H
    result += y[21] *
              (+1.88965733e+00 + 6.70498055e-03 * tc[1] -
               9.49231670e-06 * tc[2] + 7.36977613e-09 * tc[3] -
               2.18663022e-12 * tc[4] + 6.68393932e+04 * invT) *
              0.0399520575309628;
    // species 22: C2H2
    result += y[22] *
              (-1.91318906e-01 + 1.16807815e-02 * tc[1] -
               1.18390605e-05 * tc[2] + 7.00381092e-09 * tc[3] -
               1.70014595e-12 * tc[4] + 2.64289807e+04 * invT) *
              0.0384054074813734;
    // species 23: C2H3
    result += y[23] *
              (+2.21246645e+00 + 7.57395810e-04 * tc[1] +
               8.64031373e-06 * tc[2] - 8.94144617e-09 * tc[3] +
               2.94301746e-12 * tc[4] + 3.48598468e+04 * invT) *
              0.0369740442209569;
    // species 24: C2H4
    result += y[24] *
              (+2.95920148e+00 - 3.78526124e-03 * tc[1] +
               1.90330097e-05 * tc[2] - 1.72897188e-08 * tc[3] +
               5.39768746e-12 * tc[4] + 5.08977593e+03 * invT) *
              0.0356455407428531;
    // species 25: C2H5
    result += y[25] *
              (+3.30646568e+00 - 2.09329446e-03 * tc[1] +
               1.65714269e-05 * tc[2] - 1.49781651e-08 * tc[3] +
               4.61018008e-12 * tc[4] + 1.28416265e+04 * invT) *
              0.0344091941366733;
    // species 26: C2H6
    result += y[26] *
              (+3.29142492e+00 - 2.75077135e-03 * tc[1] +
               1.99812763e-05 * tc[2] - 1.77116571e-08 * tc[3] +
               5.37371542e-12 * tc[4] - 1.15222055e+04 * invT) *
              0.0332557366145660;
    // species 27: HCCO
    result += y[27] *
              (+1.25172140e+00 + 8.82751050e-03 * tc[1] -
               7.90970033e-06 * tc[2] + 4.31893975e-09 * tc[3] -
               1.01329622e-12 * tc[4] + 2.00594490e+04 * invT) *
              0.0243730044602598;
    // species 28: CH2CO
    result += y[28] *
              (+1.13583630e+00 + 9.05943605e-03 * tc[1] -
               5.79824913e-06 * tc[2] + 2.33599392e-09 * tc[3] -
               4.02915230e-13 * tc[4] - 7.04291804e+03 * invT) *
              0.0237885672145967;
    // species 29: HCCOH
    result += y[29] *
              (+2.42373300e-01 + 1.55361005e-02 * tc[1] -
               1.69556213e-05 * tc[2] + 1.07842828e-08 * tc[3] -
               2.80291880e-12 * tc[4] + 8.03161430e+03 * invT) *
              0.0237885672145967;
    // species 30: N2
    result += y[30] *
              (+2.29867700e+00 + 7.04120200e-04 * tc[1] -
               1.32107400e-06 * tc[2] + 1.41037875e-09 * tc[3] -
               4.88970800e-13 * tc[4] - 1.02089990e+03 * invT) *
              0.0356964374955379;
  } else {
    // species 0: H2
    result += y[0] *
              (+2.33727920e+00 - 2.47012365e-05 * tc[1] +
               1.66485593e-07 * tc[2] - 4.48915985e-11 * tc[3] +
               4.00510752e-15 * tc[4] - 9.50158922e+02 * invT) *
              0.4960317460317460;
    // species 1: H
    result += y[1] *
              (+1.50000001e+00 - 1.15421486e-11 * tc[1] +
               5.38539827e-15 * tc[2] - 1.18378809e-18 * tc[3] +
               9.96394714e-23 * tc[4] + 2.54736599e+04 * invT) *
              0.9920634920634921;
    // species 2: O
    result += y[2] *
              (+1.56942078e+00 - 4.29870569e-05 * tc[1] +
               1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
               2.45667382e-16 * tc[4] + 2.92175791e+04 * invT) *
              0.0625039064941559;
    // species 3: O2
    result += y[3] *
              (+2.28253784e+00 + 7.41543770e-04 * tc[1] -
               2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
               4.33435588e-15 * tc[4] - 1.08845772e+03 * invT) *
              0.0312519532470779;
    // species 4: OH
    result += y[4] *
              (+2.09288767e+00 + 2.74214858e-04 * tc[1] +
               4.21684093e-08 * tc[2] - 2.19865389e-11 * tc[3] +
               2.34824752e-15 * tc[4] + 3.85865700e+03 * invT) *
              0.0587993179279120;
    // species 5: H2O
    result += y[5] *
              (+2.03399249e+00 + 1.08845902e-03 * tc[1] -
               5.46908393e-08 * tc[2] - 2.42604967e-11 * tc[3] +
               3.36401984e-15 * tc[4] - 3.00042971e+04 * invT) *
              0.0555092978073827;
    // species 6: HO2
    result += y[6] *
              (+3.01721090e+00 + 1.11991006e-03 * tc[1] -
               2.11219383e-07 * tc[2] + 2.85615925e-11 * tc[3] -
               2.15817070e-15 * tc[4] + 1.11856713e+02 * invT) *
              0.0302975216627280;
    // species 7: H2O2
    result += y[7] *
              (+3.16500285e+00 + 2.45415847e-03 * tc[1] -
               6.33797417e-07 * tc[2] + 9.27964965e-11 * tc[3] -
               5.75816610e-15 * tc[4] - 1.78617877e+04 * invT) *
              0.0293996589639560;
    // species 8: C
    result += y[8] *
              (+1.49266888e+00 + 2.39944642e-05 * tc[1] -
               2.41445007e-08 * tc[2] + 9.35727573e-12 * tc[3] -
               9.74555786e-16 * tc[4] + 8.54512953e+04 * invT) *
              0.0832570144034635;
    // species 9: CH
    result += y[9] *
              (+1.87846473e+00 + 4.85456840e-04 * tc[1] +
               4.81485517e-08 * tc[2] - 3.26719623e-11 * tc[3] +
               3.52158766e-15 * tc[4] + 7.10124364e+04 * invT) *
              0.0768108149627468;
    // species 10: CH2
    result += y[10] *
              (+1.87410113e+00 + 1.82819646e-03 * tc[1] -
               4.69648657e-07 * tc[2] + 6.50448872e-11 * tc[3] -
               3.75455134e-15 * tc[4] + 4.62636040e+04 * invT) *
              0.0712910814857061;
    // species 11: CH2(S)
    result += y[11] *
              (+1.29203842e+00 + 2.32794318e-03 * tc[1] -
               6.70639823e-07 * tc[2] + 1.04476500e-10 * tc[3] -
               6.79432730e-15 * tc[4] + 5.09259997e+04 * invT) *
              0.0712910814857061;
    // species 12: CH3
    result += y[12] *
              (+1.28571772e+00 + 3.61995018e-03 * tc[1] -
               9.95714493e-07 * tc[2] + 1.48921161e-10 * tc[3] -
               9.34308788e-15 * tc[4] + 1.67755843e+04 * invT) *
              0.0665114732291320;
    // species 13: CH4
    result += y[13] *
              (-9.25148505e-01 + 6.69547335e-03 * tc[1] -
               1.91095270e-06 * tc[2] + 3.05731338e-10 * tc[3] -
               2.03630460e-14 * tc[4] - 9.46834459e+03 * invT) *
              0.0623324814560868;
    // species 14: CO
    result += y[14] *
              (+1.71518561e+00 + 1.03126372e-03 * tc[1] -
               3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
               4.07295432e-15 * tc[4] - 1.41518724e+04 * invT) *
              0.0357015351660121;
    // species 15: CO2
    result += y[15] *
              (+2.85746029e+00 + 2.20718513e-03 * tc[1] -
               7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
               9.44168328e-15 * tc[4] - 4.87591660e+04 * invT) *
              0.0227226249176305;
    // species 16: HCO
    result += y[16] *
              (+1.77217438e+00 + 2.47847763e-03 * tc[1] -
               8.28152043e-07 * tc[2] + 1.47290445e-10 * tc[3] -
               1.06701742e-14 * tc[4] + 4.01191815e+03 * invT) *
              0.0344613688055690;
    // species 17: CH2O
    result += y[17] *
              (+7.60690080e-01 + 4.60000041e-03 * tc[1] -
               1.47419604e-06 * tc[2] + 2.51603030e-10 * tc[3] -
               1.76771128e-14 * tc[4] - 1.39958323e+04 * invT) *
              0.0333044694598015;
    // species 18: CH2OH
    result += y[18] *
              (+2.69266569e+00 + 4.32288399e-03 * tc[1] -
               1.25033707e-06 * tc[2] + 1.96808659e-10 * tc[3] -
               1.29710840e-14 * tc[4] - 3.24250627e+03 * invT) *
              0.0322227234645872;
    // species 19: CH3O
    result += y[19] *
              (+2.77079900e+00 + 3.93574850e-03 * tc[1] -
               8.85461333e-07 * tc[2] + 9.86107750e-11 * tc[3] -
               4.22523200e-15 * tc[4] + 1.27832520e+02 * invT) *
              0.0322227234645872;
    // species 20: CH3OH
    result += y[20] *
              (+7.89707910e-01 + 7.04691460e-03 * tc[1] -
               2.12166945e-06 * tc[2] + 3.45427713e-10 * tc[3] -
               2.34120440e-14 * tc[4] - 2.53748747e+04 * invT) *
              0.0312090381374446;
    // species 21: C2H
    result += y[21] *
              (+2.16780652e+00 + 2.37610951e-03 * tc[1] -
               6.12623590e-07 * tc[2] + 7.60475630e-11 * tc[3] -
               3.54465540e-15 * tc[4] + 6.71210650e+04 * invT) *
              0.0399520575309628;
    // species 22: C2H2
    result += y[22] *
              (+3.14756964e+00 + 2.98083332e-03 * tc[1] -
               7.90982840e-07 * tc[2] + 1.16853043e-10 * tc[3] -
               7.22470426e-15 * tc[4] + 2.59359992e+04 * invT) *
              0.0384054074813734;
    // species 23: C2H3
    result += y[23] *
              (+2.01672400e+00 + 5.16511460e-03 * tc[1] -
               1.56027450e-06 * tc[2] + 2.54408220e-10 * tc[3] -
               1.72521408e-14 * tc[4] + 3.46128739e+04 * invT) *
              0.0369740442209569;
    // species 24: C2H4
    result += y[24] *
              (+1.03611116e+00 + 7.32270755e-03 * tc[1] -
               2.23692638e-06 * tc[2] + 3.68057308e-10 * tc[3] -
               2.51412122e-14 * tc[4] + 4.93988614e+03 * invT) *
              0.0356455407428531;
    // species 25: C2H5
    result += y[25] *
              (+9.54656420e-01 + 8.69863610e-03 * tc[1] -
               2.66068889e-06 * tc[2] + 4.38044223e-10 * tc[3] -
               2.99283152e-14 * tc[4] + 1.28575200e+04 * invT) *
              0.0344091941366733;
    // species 26: C2H6
    result += y[26] *
              (+7.18815000e-02 + 1.08426339e-02 * tc[1] -
               3.34186890e-06 * tc[2] + 5.53530003e-10 * tc[3] -
               3.80005780e-14 * tc[4] - 1.14263932e+04 * invT) *
              0.0332557366145660;
    // species 27: HCCO
    result += y[27] *
              (+4.62820580e+00 + 2.04267005e-03 * tc[1] -
               5.31151567e-07 * tc[2] + 7.15651300e-11 * tc[3] -
               3.88156640e-15 * tc[4] + 1.93272150e+04 * invT) *
              0.0243730044602598;
    // species 28: CH2CO
    result += y[28] *
              (+3.51129732e+00 + 4.50179872e-03 * tc[1] -
               1.38979878e-06 * tc[2] + 2.30836470e-10 * tc[3] -
               1.58967640e-14 * tc[4] - 7.55105311e+03 * invT) *
              0.0237885672145967;
    // species 29: HCCOH
    result += y[29] *
              (+4.92382910e+00 + 3.39618000e-03 * tc[1] -
               8.55285467e-07 * tc[2] + 1.12469603e-10 * tc[3] -
               5.98802020e-15 * tc[4] + 7.26462600e+03 * invT) *
              0.0237885672145967;
    // species 30: N2
    result += y[30] *
              (+1.92664000e+00 + 7.43988400e-04 * tc[1] -
               1.89492000e-07 * tc[2] + 2.52425950e-11 * tc[3] -
               1.35067020e-15 * tc[4] - 9.22797700e+02 * invT) *
              0.0356964374955379;
  }

  // species with no change at a midpoint T
  // species 31: AR
  result +=
    y[31] *
    (+1.50000000e+00 + 0.00000000e+00 * tc[1] + 0.00000000e+00 * tc[2] +
     0.00000000e+00 * tc[3] + 0.00000000e+00 * tc[4] - 7.45375000e+02 * invT) *
    0.0250312891113892;

  const amrex::Real RT = 8.31446261815324e+07 * tT; // R*T

  ubms = result * RT;
}

// get mixture entropy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBML(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& sbml)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real sor[32]; //  temporary storage
  speciesEntropy(sor, tc);

  // Compute Eq 42
  for (int id = 0; id < 32; ++id) {
    result += x[id] * (sor[id] - log((x[id] + 1e-100)) - logPratio);
  }

  sbml = result * 8.31446261815324e+07;
}

// get mixture entropy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBMS(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& sbms)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real sor[32]; //  temporary storage
  amrex::Real x[32];   //  need a ytx conversion
  amrex::Real YOW = 0; // See Eq 4, 6 in CK Manual

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 32; i++) {
    YOW += y[i] * imw(i);
  }
  // Now compute y to x conversion
  x[0] = y[0] / (2.016000 * YOW);
  x[1] = y[1] / (1.008000 * YOW);
  x[2] = y[2] / (15.999000 * YOW);
  x[3] = y[3] / (31.998000 * YOW);
  x[4] = y[4] / (17.007000 * YOW);
  x[5] = y[5] / (18.015000 * YOW);
  x[6] = y[6] / (33.006000 * YOW);
  x[7] = y[7] / (34.014000 * YOW);
  x[8] = y[8] / (12.011000 * YOW);
  x[9] = y[9] / (13.019000 * YOW);
  x[10] = y[10] / (14.027000 * YOW);
  x[11] = y[11] / (14.027000 * YOW);
  x[12] = y[12] / (15.035000 * YOW);
  x[13] = y[13] / (16.043000 * YOW);
  x[14] = y[14] / (28.010000 * YOW);
  x[15] = y[15] / (44.009000 * YOW);
  x[16] = y[16] / (29.018000 * YOW);
  x[17] = y[17] / (30.026000 * YOW);
  x[18] = y[18] / (31.034000 * YOW);
  x[19] = y[19] / (31.034000 * YOW);
  x[20] = y[20] / (32.042000 * YOW);
  x[21] = y[21] / (25.030000 * YOW);
  x[22] = y[22] / (26.038000 * YOW);
  x[23] = y[23] / (27.046000 * YOW);
  x[24] = y[24] / (28.054000 * YOW);
  x[25] = y[25] / (29.062000 * YOW);
  x[26] = y[26] / (30.070000 * YOW);
  x[27] = y[27] / (41.029000 * YOW);
  x[28] = y[28] / (42.037000 * YOW);
  x[29] = y[29] / (42.037000 * YOW);
  x[30] = y[30] / (28.014000 * YOW);
  x[31] = y[31] / (39.950000 * YOW);
  speciesEntropy(sor, tc);
  // Perform computation in Eq 42 and 43
  for (int i = 0; i < 32; i++) {
    result += x[i] * (sor[i] - log((x[i] + 1e-100)) - logPratio);
  }
  // Scale by R/W
  sbms = result * 8.31446261815324e+07 * YOW;
}

//  get temperature given internal energy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_EY(
  const amrex::Real e, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real e1, emin, emax, cv, t1, dt;
  CKUBMS(tmin, y, emin);
  CKUBMS(tmax, y, emax);
  if (e < emin) {
    // Linear Extrapolation below tmin
    CKCVBS(tmin, y, cv);
    t = tmin - (emin - e) / cv;
    ierr = 1;
    return;
  }
  if (e > emax) {
    // Linear Extrapolation above tmax
    CKCVBS(tmax, y, cv);
    t = tmax - (emax - e) / cv;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (emax - emin) * (e - emin);
  }
  for (int i = 0; i < maxiter; ++i) {
    CKUBMS(t1, y, e1);
    CKCVBS(t1, y, cv);
    dt = (e - e1) / cv;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

//  get temperature given enthalpy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_HY(
  const amrex::Real h, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real h1, hmin, hmax, cp, t1, dt;
  CKHBMS(tmin, y, hmin);
  CKHBMS(tmax, y, hmax);
  if (h < hmin) {
    // Linear Extrapolation below tmin
    CKCPBS(tmin, y, cp);
    t = tmin - (hmin - h) / cp;
    ierr = 1;
    return;
  }
  if (h > hmax) {
    // Linear Extrapolation above tmax
    CKCPBS(tmax, y, cp);
    t = tmax - (hmax - h) / cp;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (hmax - hmin) * (h - hmin);
  }
  for (int i = 0; i < maxiter; ++i) {
    CKHBMS(t1, y, h1);
    CKCPBS(t1, y, cp);
    dt = (h - h1) / cp;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

// Compute P = rhoRT/W(x)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPX(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& P)
{
  amrex::Real XW = 0;                      //  To hold mean molecular wt
  XW += x[0] * 2.016000;                   // H2
  XW += x[1] * 1.008000;                   // H
  XW += x[2] * 15.999000;                  // O
  XW += x[3] * 31.998000;                  // O2
  XW += x[4] * 17.007000;                  // OH
  XW += x[5] * 18.015000;                  // H2O
  XW += x[6] * 33.006000;                  // HO2
  XW += x[7] * 34.014000;                  // H2O2
  XW += x[8] * 12.011000;                  // C
  XW += x[9] * 13.019000;                  // CH
  XW += x[10] * 14.027000;                 // CH2
  XW += x[11] * 14.027000;                 // CH2(S)
  XW += x[12] * 15.035000;                 // CH3
  XW += x[13] * 16.043000;                 // CH4
  XW += x[14] * 28.010000;                 // CO
  XW += x[15] * 44.009000;                 // CO2
  XW += x[16] * 29.018000;                 // HCO
  XW += x[17] * 30.026000;                 // CH2O
  XW += x[18] * 31.034000;                 // CH2OH
  XW += x[19] * 31.034000;                 // CH3O
  XW += x[20] * 32.042000;                 // CH3OH
  XW += x[21] * 25.030000;                 // C2H
  XW += x[22] * 26.038000;                 // C2H2
  XW += x[23] * 27.046000;                 // C2H3
  XW += x[24] * 28.054000;                 // C2H4
  XW += x[25] * 29.062000;                 // C2H5
  XW += x[26] * 30.070000;                 // C2H6
  XW += x[27] * 41.029000;                 // HCCO
  XW += x[28] * 42.037000;                 // CH2CO
  XW += x[29] * 42.037000;                 // HCCOH
  XW += x[30] * 28.014000;                 // N2
  XW += x[31] * 39.950000;                 // AR
  P = rho * 8.31446261815324e+07 * T / XW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(y)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPY(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& P)
{
  amrex::Real YOW = 0; //  for computing mean MW

  for (int i = 0; i < 32; i++) {
    YOW += y[i] * imw(i);
  }
  P = rho * 8.31446261815324e+07 * T * YOW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(c)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPC(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& P)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 2.016000;   // H2
  W += c[1] * 1.008000;   // H
  W += c[2] * 15.999000;  // O
  W += c[3] * 31.998000;  // O2
  W += c[4] * 17.007000;  // OH
  W += c[5] * 18.015000;  // H2O
  W += c[6] * 33.006000;  // HO2
  W += c[7] * 34.014000;  // H2O2
  W += c[8] * 12.011000;  // C
  W += c[9] * 13.019000;  // CH
  W += c[10] * 14.027000; // CH2
  W += c[11] * 14.027000; // CH2(S)
  W += c[12] * 15.035000; // CH3
  W += c[13] * 16.043000; // CH4
  W += c[14] * 28.010000; // CO
  W += c[15] * 44.009000; // CO2
  W += c[16] * 29.018000; // HCO
  W += c[17] * 30.026000; // CH2O
  W += c[18] * 31.034000; // CH2OH
  W += c[19] * 31.034000; // CH3O
  W += c[20] * 32.042000; // CH3OH
  W += c[21] * 25.030000; // C2H
  W += c[22] * 26.038000; // C2H2
  W += c[23] * 27.046000; // C2H3
  W += c[24] * 28.054000; // C2H4
  W += c[25] * 29.062000; // C2H5
  W += c[26] * 30.070000; // C2H6
  W += c[27] * 41.029000; // HCCO
  W += c[28] * 42.037000; // CH2CO
  W += c[29] * 42.037000; // HCCOH
  W += c[30] * 28.014000; // N2
  W += c[31] * 39.950000; // AR

  for (int id = 0; id < 32; ++id) {
    sumC += c[id];
  }
  P = rho * 8.31446261815324e+07 * T * sumC / W; // P = rho*R*T/W
}

// Compute rho = PW(x)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOX(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& rho)
{
  amrex::Real XW = 0;                        //  To hold mean molecular wt
  XW += x[0] * 2.016000;                     // H2
  XW += x[1] * 1.008000;                     // H
  XW += x[2] * 15.999000;                    // O
  XW += x[3] * 31.998000;                    // O2
  XW += x[4] * 17.007000;                    // OH
  XW += x[5] * 18.015000;                    // H2O
  XW += x[6] * 33.006000;                    // HO2
  XW += x[7] * 34.014000;                    // H2O2
  XW += x[8] * 12.011000;                    // C
  XW += x[9] * 13.019000;                    // CH
  XW += x[10] * 14.027000;                   // CH2
  XW += x[11] * 14.027000;                   // CH2(S)
  XW += x[12] * 15.035000;                   // CH3
  XW += x[13] * 16.043000;                   // CH4
  XW += x[14] * 28.010000;                   // CO
  XW += x[15] * 44.009000;                   // CO2
  XW += x[16] * 29.018000;                   // HCO
  XW += x[17] * 30.026000;                   // CH2O
  XW += x[18] * 31.034000;                   // CH2OH
  XW += x[19] * 31.034000;                   // CH3O
  XW += x[20] * 32.042000;                   // CH3OH
  XW += x[21] * 25.030000;                   // C2H
  XW += x[22] * 26.038000;                   // C2H2
  XW += x[23] * 27.046000;                   // C2H3
  XW += x[24] * 28.054000;                   // C2H4
  XW += x[25] * 29.062000;                   // C2H5
  XW += x[26] * 30.070000;                   // C2H6
  XW += x[27] * 41.029000;                   // HCCO
  XW += x[28] * 42.037000;                   // CH2CO
  XW += x[29] * 42.037000;                   // HCCOH
  XW += x[30] * 28.014000;                   // N2
  XW += x[31] * 39.950000;                   // AR
  rho = P * XW / (8.31446261815324e+07 * T); // rho = P*W/(R*T)
}

// Compute rho = P*W(y)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOY(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& rho)
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 32; i++) {
    YOW += y[i] * imw(i);
  }

  rho = P / (8.31446261815324e+07 * T * YOW); // rho = P*W/(R*T)
}

// Compute rho = P*W(c)/(R*T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOC(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& rho)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 2.016000;   // H2
  W += c[1] * 1.008000;   // H
  W += c[2] * 15.999000;  // O
  W += c[3] * 31.998000;  // O2
  W += c[4] * 17.007000;  // OH
  W += c[5] * 18.015000;  // H2O
  W += c[6] * 33.006000;  // HO2
  W += c[7] * 34.014000;  // H2O2
  W += c[8] * 12.011000;  // C
  W += c[9] * 13.019000;  // CH
  W += c[10] * 14.027000; // CH2
  W += c[11] * 14.027000; // CH2(S)
  W += c[12] * 15.035000; // CH3
  W += c[13] * 16.043000; // CH4
  W += c[14] * 28.010000; // CO
  W += c[15] * 44.009000; // CO2
  W += c[16] * 29.018000; // HCO
  W += c[17] * 30.026000; // CH2O
  W += c[18] * 31.034000; // CH2OH
  W += c[19] * 31.034000; // CH3O
  W += c[20] * 32.042000; // CH3OH
  W += c[21] * 25.030000; // C2H
  W += c[22] * 26.038000; // C2H2
  W += c[23] * 27.046000; // C2H3
  W += c[24] * 28.054000; // C2H4
  W += c[25] * 29.062000; // C2H5
  W += c[26] * 30.070000; // C2H6
  W += c[27] * 41.029000; // HCCO
  W += c[28] * 42.037000; // CH2CO
  W += c[29] * 42.037000; // HCCOH
  W += c[30] * 28.014000; // N2
  W += c[31] * 39.950000; // AR

  for (int id = 0; id < 32; ++id) {
    sumC += c[id];
  }
  rho = P * W / (sumC * T * 8.31446261815324e+07); // rho = PW/(R*T)
}

// get molecular weight for all species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWT(amrex::Real wt[])
{
  get_mw(wt);
}

// given y[species]: mass fractions
// s mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWY(const amrex::Real y[], amrex::Real& wtm)
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 32; i++) {
    YOW += y[i] * imw(i);
  }

  wtm = 1.0 / YOW;
}

// given x[species]: mole fractions
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWX(const amrex::Real x[], amrex::Real& wtm)
{
  amrex::Real XW = 0;      //  see Eq 4 in CK Manual
  XW += x[0] * 2.016000;   // H2
  XW += x[1] * 1.008000;   // H
  XW += x[2] * 15.999000;  // O
  XW += x[3] * 31.998000;  // O2
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 18.015000;  // H2O
  XW += x[6] * 33.006000;  // HO2
  XW += x[7] * 34.014000;  // H2O2
  XW += x[8] * 12.011000;  // C
  XW += x[9] * 13.019000;  // CH
  XW += x[10] * 14.027000; // CH2
  XW += x[11] * 14.027000; // CH2(S)
  XW += x[12] * 15.035000; // CH3
  XW += x[13] * 16.043000; // CH4
  XW += x[14] * 28.010000; // CO
  XW += x[15] * 44.009000; // CO2
  XW += x[16] * 29.018000; // HCO
  XW += x[17] * 30.026000; // CH2O
  XW += x[18] * 31.034000; // CH2OH
  XW += x[19] * 31.034000; // CH3O
  XW += x[20] * 32.042000; // CH3OH
  XW += x[21] * 25.030000; // C2H
  XW += x[22] * 26.038000; // C2H2
  XW += x[23] * 27.046000; // C2H3
  XW += x[24] * 28.054000; // C2H4
  XW += x[25] * 29.062000; // C2H5
  XW += x[26] * 30.070000; // C2H6
  XW += x[27] * 41.029000; // HCCO
  XW += x[28] * 42.037000; // CH2CO
  XW += x[29] * 42.037000; // HCCOH
  XW += x[30] * 28.014000; // N2
  XW += x[31] * 39.950000; // AR
  wtm = XW;
}

// given c[species]: molar concentration
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWC(const amrex::Real c[], amrex::Real& wtm)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 2.016000;   // H2
  W += c[1] * 1.008000;   // H
  W += c[2] * 15.999000;  // O
  W += c[3] * 31.998000;  // O2
  W += c[4] * 17.007000;  // OH
  W += c[5] * 18.015000;  // H2O
  W += c[6] * 33.006000;  // HO2
  W += c[7] * 34.014000;  // H2O2
  W += c[8] * 12.011000;  // C
  W += c[9] * 13.019000;  // CH
  W += c[10] * 14.027000; // CH2
  W += c[11] * 14.027000; // CH2(S)
  W += c[12] * 15.035000; // CH3
  W += c[13] * 16.043000; // CH4
  W += c[14] * 28.010000; // CO
  W += c[15] * 44.009000; // CO2
  W += c[16] * 29.018000; // HCO
  W += c[17] * 30.026000; // CH2O
  W += c[18] * 31.034000; // CH2OH
  W += c[19] * 31.034000; // CH3O
  W += c[20] * 32.042000; // CH3OH
  W += c[21] * 25.030000; // C2H
  W += c[22] * 26.038000; // C2H2
  W += c[23] * 27.046000; // C2H3
  W += c[24] * 28.054000; // C2H4
  W += c[25] * 29.062000; // C2H5
  W += c[26] * 30.070000; // C2H6
  W += c[27] * 41.029000; // HCCO
  W += c[28] * 42.037000; // CH2CO
  W += c[29] * 42.037000; // HCCOH
  W += c[30] * 28.014000; // N2
  W += c[31] * 39.950000; // AR

  for (int id = 0; id < 32; ++id) {
    sumC += c[id];
  }
  //  CK provides no guard against divison by zero
  wtm = W / sumC;
}

// get Cp/R as a function of T
// for all species (Eq 19)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPOR(const amrex::Real T, amrex::Real cpor[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cp_R(cpor, tc);
}

// get H/RT as a function of T
// for all species (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHORT(const amrex::Real T, amrex::Real hort[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEnthalpy(hort, tc);
}

// get S/R as a function of T
// for all species (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSOR(const amrex::Real T, amrex::Real sor[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEntropy(sor, tc);
}

// convert y[species] (mass fracs) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTX(const amrex::Real y[], amrex::Real x[])
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 32; i++) {
    YOW += y[i] * imw(i);
  }

  amrex::Real YOWINV = 1.0 / YOW;

  for (int i = 0; i < 32; i++) {
    x[i] = y[i] * imw(i) * YOWINV;
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real c[])
{
  amrex::Real YOW = 0;
  amrex::Real PWORT;

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 32; i++) {
    c[i] = y[i] * imw(i);
  }
  for (int i = 0; i < 32; i++) {
    YOW += c[i];
  }

  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // Now compute conversion

  for (int i = 0; i < 32; i++) {
    c[i] = PWORT * y[i] * imw(i);
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCR(
  const amrex::Real rho,
  amrex::Real /*T*/,
  const amrex::Real y[],
  amrex::Real c[])
{

  for (int i = 0; i < 32; i++) {
    c[i] = rho * y[i] * imw(i);
  }
}

// convert x[species] (mole fracs) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTY(const amrex::Real x[], amrex::Real y[])
{
  amrex::Real XW = 0; // See Eq 4, 9 in CK Manual
  // Compute mean molecular wt first
  XW += x[0] * 2.016000;   // H2
  XW += x[1] * 1.008000;   // H
  XW += x[2] * 15.999000;  // O
  XW += x[3] * 31.998000;  // O2
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 18.015000;  // H2O
  XW += x[6] * 33.006000;  // HO2
  XW += x[7] * 34.014000;  // H2O2
  XW += x[8] * 12.011000;  // C
  XW += x[9] * 13.019000;  // CH
  XW += x[10] * 14.027000; // CH2
  XW += x[11] * 14.027000; // CH2(S)
  XW += x[12] * 15.035000; // CH3
  XW += x[13] * 16.043000; // CH4
  XW += x[14] * 28.010000; // CO
  XW += x[15] * 44.009000; // CO2
  XW += x[16] * 29.018000; // HCO
  XW += x[17] * 30.026000; // CH2O
  XW += x[18] * 31.034000; // CH2OH
  XW += x[19] * 31.034000; // CH3O
  XW += x[20] * 32.042000; // CH3OH
  XW += x[21] * 25.030000; // C2H
  XW += x[22] * 26.038000; // C2H2
  XW += x[23] * 27.046000; // C2H3
  XW += x[24] * 28.054000; // C2H4
  XW += x[25] * 29.062000; // C2H5
  XW += x[26] * 30.070000; // C2H6
  XW += x[27] * 41.029000; // HCCO
  XW += x[28] * 42.037000; // CH2CO
  XW += x[29] * 42.037000; // HCCOH
  XW += x[30] * 28.014000; // N2
  XW += x[31] * 39.950000; // AR
  // Now compute conversion
  amrex::Real XWinv = 1.0 / XW;
  y[0] = x[0] * 2.016000 * XWinv;
  y[1] = x[1] * 1.008000 * XWinv;
  y[2] = x[2] * 15.999000 * XWinv;
  y[3] = x[3] * 31.998000 * XWinv;
  y[4] = x[4] * 17.007000 * XWinv;
  y[5] = x[5] * 18.015000 * XWinv;
  y[6] = x[6] * 33.006000 * XWinv;
  y[7] = x[7] * 34.014000 * XWinv;
  y[8] = x[8] * 12.011000 * XWinv;
  y[9] = x[9] * 13.019000 * XWinv;
  y[10] = x[10] * 14.027000 * XWinv;
  y[11] = x[11] * 14.027000 * XWinv;
  y[12] = x[12] * 15.035000 * XWinv;
  y[13] = x[13] * 16.043000 * XWinv;
  y[14] = x[14] * 28.010000 * XWinv;
  y[15] = x[15] * 44.009000 * XWinv;
  y[16] = x[16] * 29.018000 * XWinv;
  y[17] = x[17] * 30.026000 * XWinv;
  y[18] = x[18] * 31.034000 * XWinv;
  y[19] = x[19] * 31.034000 * XWinv;
  y[20] = x[20] * 32.042000 * XWinv;
  y[21] = x[21] * 25.030000 * XWinv;
  y[22] = x[22] * 26.038000 * XWinv;
  y[23] = x[23] * 27.046000 * XWinv;
  y[24] = x[24] * 28.054000 * XWinv;
  y[25] = x[25] * 29.062000 * XWinv;
  y[26] = x[26] * 30.070000 * XWinv;
  y[27] = x[27] * 41.029000 * XWinv;
  y[28] = x[28] * 42.037000 * XWinv;
  y[29] = x[29] * 42.037000 * XWinv;
  y[30] = x[30] * 28.014000 * XWinv;
  y[31] = x[31] * 39.950000 * XWinv;
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real c[])
{
  amrex::Real PORT = P / (8.31446261815324e+07 * T); // P/RT

  // Compute conversion, see Eq 10
  for (int id = 0; id < 32; ++id) {
    c[id] = x[id] * PORT;
  }
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCR(
  const amrex::Real rho,
  const amrex::Real /*T*/,
  const amrex::Real x[],
  amrex::Real c[])
{
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 2.016000;   // H2
  XW += x[1] * 1.008000;   // H
  XW += x[2] * 15.999000;  // O
  XW += x[3] * 31.998000;  // O2
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 18.015000;  // H2O
  XW += x[6] * 33.006000;  // HO2
  XW += x[7] * 34.014000;  // H2O2
  XW += x[8] * 12.011000;  // C
  XW += x[9] * 13.019000;  // CH
  XW += x[10] * 14.027000; // CH2
  XW += x[11] * 14.027000; // CH2(S)
  XW += x[12] * 15.035000; // CH3
  XW += x[13] * 16.043000; // CH4
  XW += x[14] * 28.010000; // CO
  XW += x[15] * 44.009000; // CO2
  XW += x[16] * 29.018000; // HCO
  XW += x[17] * 30.026000; // CH2O
  XW += x[18] * 31.034000; // CH2OH
  XW += x[19] * 31.034000; // CH3O
  XW += x[20] * 32.042000; // CH3OH
  XW += x[21] * 25.030000; // C2H
  XW += x[22] * 26.038000; // C2H2
  XW += x[23] * 27.046000; // C2H3
  XW += x[24] * 28.054000; // C2H4
  XW += x[25] * 29.062000; // C2H5
  XW += x[26] * 30.070000; // C2H6
  XW += x[27] * 41.029000; // HCCO
  XW += x[28] * 42.037000; // CH2CO
  XW += x[29] * 42.037000; // HCCOH
  XW += x[30] * 28.014000; // N2
  XW += x[31] * 39.950000; // AR
  ROW = rho / XW;

  // Compute conversion, see Eq 11
  for (int id = 0; id < 32; ++id) {
    c[id] = x[id] * ROW;
  }
}

// convert c[species] (molar conc) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTX(const amrex::Real c[], amrex::Real x[])
{
  amrex::Real sumC = 0;

  // compute sum of c
  for (int id = 0; id < 32; ++id) {
    sumC += c[id];
  }

  //  See Eq 13
  amrex::Real sumCinv = 1.0 / sumC;
  for (int id = 0; id < 32; ++id) {
    x[id] = c[id] * sumCinv;
  }
}

// convert c[species] (molar conc) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTY(const amrex::Real c[], amrex::Real y[])
{
  amrex::Real CW = 0; // See Eq 12 in CK Manual
  // compute denominator in eq 12 first
  CW += c[0] * 2.016000;   // H2
  CW += c[1] * 1.008000;   // H
  CW += c[2] * 15.999000;  // O
  CW += c[3] * 31.998000;  // O2
  CW += c[4] * 17.007000;  // OH
  CW += c[5] * 18.015000;  // H2O
  CW += c[6] * 33.006000;  // HO2
  CW += c[7] * 34.014000;  // H2O2
  CW += c[8] * 12.011000;  // C
  CW += c[9] * 13.019000;  // CH
  CW += c[10] * 14.027000; // CH2
  CW += c[11] * 14.027000; // CH2(S)
  CW += c[12] * 15.035000; // CH3
  CW += c[13] * 16.043000; // CH4
  CW += c[14] * 28.010000; // CO
  CW += c[15] * 44.009000; // CO2
  CW += c[16] * 29.018000; // HCO
  CW += c[17] * 30.026000; // CH2O
  CW += c[18] * 31.034000; // CH2OH
  CW += c[19] * 31.034000; // CH3O
  CW += c[20] * 32.042000; // CH3OH
  CW += c[21] * 25.030000; // C2H
  CW += c[22] * 26.038000; // C2H2
  CW += c[23] * 27.046000; // C2H3
  CW += c[24] * 28.054000; // C2H4
  CW += c[25] * 29.062000; // C2H5
  CW += c[26] * 30.070000; // C2H6
  CW += c[27] * 41.029000; // HCCO
  CW += c[28] * 42.037000; // CH2CO
  CW += c[29] * 42.037000; // HCCOH
  CW += c[30] * 28.014000; // N2
  CW += c[31] * 39.950000; // AR
  // Now compute conversion
  amrex::Real CWinv = 1.0 / CW;
  y[0] = c[0] * 2.016000 * CWinv;
  y[1] = c[1] * 1.008000 * CWinv;
  y[2] = c[2] * 15.999000 * CWinv;
  y[3] = c[3] * 31.998000 * CWinv;
  y[4] = c[4] * 17.007000 * CWinv;
  y[5] = c[5] * 18.015000 * CWinv;
  y[6] = c[6] * 33.006000 * CWinv;
  y[7] = c[7] * 34.014000 * CWinv;
  y[8] = c[8] * 12.011000 * CWinv;
  y[9] = c[9] * 13.019000 * CWinv;
  y[10] = c[10] * 14.027000 * CWinv;
  y[11] = c[11] * 14.027000 * CWinv;
  y[12] = c[12] * 15.035000 * CWinv;
  y[13] = c[13] * 16.043000 * CWinv;
  y[14] = c[14] * 28.010000 * CWinv;
  y[15] = c[15] * 44.009000 * CWinv;
  y[16] = c[16] * 29.018000 * CWinv;
  y[17] = c[17] * 30.026000 * CWinv;
  y[18] = c[18] * 31.034000 * CWinv;
  y[19] = c[19] * 31.034000 * CWinv;
  y[20] = c[20] * 32.042000 * CWinv;
  y[21] = c[21] * 25.030000 * CWinv;
  y[22] = c[22] * 26.038000 * CWinv;
  y[23] = c[23] * 27.046000 * CWinv;
  y[24] = c[24] * 28.054000 * CWinv;
  y[25] = c[25] * 29.062000 * CWinv;
  y[26] = c[26] * 30.070000 * CWinv;
  y[27] = c[27] * 41.029000 * CWinv;
  y[28] = c[28] * 42.037000 * CWinv;
  y[29] = c[29] * 42.037000 * CWinv;
  y[30] = c[30] * 28.014000 * CWinv;
  y[31] = c[31] * 39.950000 * CWinv;
}

// get specific heat at constant volume as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVML(const amrex::Real T, amrex::Real cvml[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cv_R(cvml, tc);

  // convert to chemkin units
  for (int id = 0; id < 32; ++id) {
    cvml[id] *= 8.31446261815324e+07;
  }
}

// get specific heat at constant pressure as a
// function of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPML(const amrex::Real T, amrex::Real cpml[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cp_R(cpml, tc);

  // convert to chemkin units
  for (int id = 0; id < 32; ++id) {
    cpml[id] *= 8.31446261815324e+07;
  }
}

// get internal energy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUML(const amrex::Real T, amrex::Real uml[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesInternalEnergy(uml, tc);

  // convert to chemkin units
  for (int id = 0; id < 32; ++id) {
    uml[id] *= RT;
  }
}

// get enthalpy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHML(const amrex::Real T, amrex::Real hml[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesEnthalpy(hml, tc);

  // convert to chemkin units
  for (int id = 0; id < 32; ++id) {
    hml[id] *= RT;
  }
}

// Returns the standard-state entropies in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSML(const amrex::Real T, amrex::Real sml[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEntropy(sml, tc);

  // convert to chemkin units
  for (int id = 0; id < 32; ++id) {
    sml[id] *= 8.31446261815324e+07;
  }
}

// Returns the specific heats at constant volume
// in mass units (Eq. 29)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVMS(const amrex::Real T, amrex::Real cvms[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cv_R(cvms, tc);
  // multiply by R/molecularweight
  cvms[0] *= 4.124237409798234e+07;  // H2
  cvms[1] *= 8.248474819596468e+07;  // H
  cvms[2] *= 5.196863940342046e+06;  // O
  cvms[3] *= 2.598431970171023e+06;  // O2
  cvms[4] *= 4.888847308845322e+06;  // OH
  cvms[5] *= 4.615299815794193e+06;  // H2O
  cvms[6] *= 2.519076112874398e+06;  // HO2
  cvms[7] *= 2.444423654422661e+06;  // H2O2
  cvms[8] *= 6.922373339566431e+06;  // C
  cvms[9] *= 6.386406496776436e+06;  // CH
  cvms[10] *= 5.927470320206203e+06; // CH2
  cvms[11] *= 5.927470320206203e+06; // CH2(S)
  cvms[12] *= 5.530071578419182e+06; // CH3
  cvms[13] *= 5.182610869633635e+06; // CH4
  cvms[14] *= 2.968390795484913e+06; // CO
  cvms[15] *= 1.889264154639560e+06; // CO2
  cvms[16] *= 2.865277627042952e+06; // HCO
  cvms[17] *= 2.769087663409458e+06; // CH2O
  cvms[18] *= 2.679146297013998e+06; // CH2OH
  cvms[19] *= 2.679146297013998e+06; // CH3O
  cvms[20] *= 2.594863809423020e+06; // CH3OH
  cvms[21] *= 3.321798888594982e+06; // C2H
  cvms[22] *= 3.193203248388218e+06; // C2H2
  cvms[23] *= 3.074193085170909e+06; // C2H3
  cvms[24] *= 2.963735160103101e+06; // C2H4
  cvms[25] *= 2.860939583701480e+06; // C2H5
  cvms[26] *= 2.765035789209591e+06; // C2H6
  cvms[27] *= 2.026484344769124e+06; // HCCO
  cvms[28] *= 1.977891528451897e+06; // CH2CO
  cvms[29] *= 1.977891528451897e+06; // HCCOH
  cvms[30] *= 2.967966951578939e+06; // N2
  cvms[31] *= 2.081217176008320e+06; // AR
}

// Returns the specific heats at constant pressure
// in mass units (Eq. 26)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPMS(const amrex::Real T, amrex::Real cpms[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cp_R(cpms, tc);
  // multiply by R/molecularweight
  cpms[0] *= 4.124237409798234e+07;  // H2
  cpms[1] *= 8.248474819596468e+07;  // H
  cpms[2] *= 5.196863940342046e+06;  // O
  cpms[3] *= 2.598431970171023e+06;  // O2
  cpms[4] *= 4.888847308845322e+06;  // OH
  cpms[5] *= 4.615299815794193e+06;  // H2O
  cpms[6] *= 2.519076112874398e+06;  // HO2
  cpms[7] *= 2.444423654422661e+06;  // H2O2
  cpms[8] *= 6.922373339566431e+06;  // C
  cpms[9] *= 6.386406496776436e+06;  // CH
  cpms[10] *= 5.927470320206203e+06; // CH2
  cpms[11] *= 5.927470320206203e+06; // CH2(S)
  cpms[12] *= 5.530071578419182e+06; // CH3
  cpms[13] *= 5.182610869633635e+06; // CH4
  cpms[14] *= 2.968390795484913e+06; // CO
  cpms[15] *= 1.889264154639560e+06; // CO2
  cpms[16] *= 2.865277627042952e+06; // HCO
  cpms[17] *= 2.769087663409458e+06; // CH2O
  cpms[18] *= 2.679146297013998e+06; // CH2OH
  cpms[19] *= 2.679146297013998e+06; // CH3O
  cpms[20] *= 2.594863809423020e+06; // CH3OH
  cpms[21] *= 3.321798888594982e+06; // C2H
  cpms[22] *= 3.193203248388218e+06; // C2H2
  cpms[23] *= 3.074193085170909e+06; // C2H3
  cpms[24] *= 2.963735160103101e+06; // C2H4
  cpms[25] *= 2.860939583701480e+06; // C2H5
  cpms[26] *= 2.765035789209591e+06; // C2H6
  cpms[27] *= 2.026484344769124e+06; // HCCO
  cpms[28] *= 1.977891528451897e+06; // CH2CO
  cpms[29] *= 1.977891528451897e+06; // HCCOH
  cpms[30] *= 2.967966951578939e+06; // N2
  cpms[31] *= 2.081217176008320e+06; // AR
}

// Returns internal energy in mass units (Eq 30.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUMS(const amrex::Real T, amrex::Real ums[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T

  speciesInternalEnergy(ums, tc);

  for (int i = 0; i < 32; i++) {
    ums[i] *= RT * imw(i);
  }
}

// Returns enthalpy in mass units (Eq 27.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHMS(const amrex::Real T, amrex::Real hms[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T

  speciesEnthalpy(hms, tc);

  for (int i = 0; i < 32; i++) {
    hms[i] *= RT * imw(i);
  }
}

// Returns the entropies in mass units (Eq 28.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSMS(const amrex::Real T, amrex::Real sms[])
{
  amrex::Real tT = T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEntropy(sms, tc);
  // multiply by R/molecularweight
  sms[0] *= 4.124237409798234e+07;  // H2
  sms[1] *= 8.248474819596468e+07;  // H
  sms[2] *= 5.196863940342046e+06;  // O
  sms[3] *= 2.598431970171023e+06;  // O2
  sms[4] *= 4.888847308845322e+06;  // OH
  sms[5] *= 4.615299815794193e+06;  // H2O
  sms[6] *= 2.519076112874398e+06;  // HO2
  sms[7] *= 2.444423654422661e+06;  // H2O2
  sms[8] *= 6.922373339566431e+06;  // C
  sms[9] *= 6.386406496776436e+06;  // CH
  sms[10] *= 5.927470320206203e+06; // CH2
  sms[11] *= 5.927470320206203e+06; // CH2(S)
  sms[12] *= 5.530071578419182e+06; // CH3
  sms[13] *= 5.182610869633635e+06; // CH4
  sms[14] *= 2.968390795484913e+06; // CO
  sms[15] *= 1.889264154639560e+06; // CO2
  sms[16] *= 2.865277627042952e+06; // HCO
  sms[17] *= 2.769087663409458e+06; // CH2O
  sms[18] *= 2.679146297013998e+06; // CH2OH
  sms[19] *= 2.679146297013998e+06; // CH3O
  sms[20] *= 2.594863809423020e+06; // CH3OH
  sms[21] *= 3.321798888594982e+06; // C2H
  sms[22] *= 3.193203248388218e+06; // C2H2
  sms[23] *= 3.074193085170909e+06; // C2H3
  sms[24] *= 2.963735160103101e+06; // C2H4
  sms[25] *= 2.860939583701480e+06; // C2H5
  sms[26] *= 2.765035789209591e+06; // C2H6
  sms[27] *= 2.026484344769124e+06; // HCCO
  sms[28] *= 1.977891528451897e+06; // CH2CO
  sms[29] *= 1.977891528451897e+06; // HCCOH
  sms[30] *= 2.967966951578939e+06; // N2
  sms[31] *= 2.081217176008320e+06; // AR
}

// GPU version of productionRate: no more use of thermo namespace vectors
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_qfqr(
  amrex::Real* qf,
  amrex::Real* qr,
  const amrex::Real* sc,
  const amrex::Real* /*sc_qss*/,
  const amrex::Real* tc,
  const amrex::Real invT)
{

  // reaction 49: CH2 + H (+M) <=> CH3 (+M)
  qf[0] = sc[1] * sc[10];
  qr[0] = sc[12];

  // reaction 51: CH3 + H (+M) <=> CH4 (+M)
  qf[1] = sc[1] * sc[12];
  qr[1] = sc[13];

  // reaction 53: H + HCO (+M) <=> CH2O (+M)
  qf[2] = sc[1] * sc[16];
  qr[2] = sc[17];

  // reaction 55: CH2O + H (+M) <=> CH2OH (+M)
  qf[3] = sc[1] * sc[17];
  qr[3] = sc[18];

  // reaction 56: CH2O + H (+M) <=> CH3O (+M)
  qf[4] = sc[1] * sc[17];
  qr[4] = sc[19];

  // reaction 58: CH2OH + H (+M) <=> CH3OH (+M)
  qf[5] = sc[1] * sc[18];
  qr[5] = sc[20];

  // reaction 62: CH3O + H (+M) <=> CH3OH (+M)
  qf[6] = sc[1] * sc[19];
  qr[6] = sc[20];

  // reaction 69: C2H + H (+M) <=> C2H2 (+M)
  qf[7] = sc[1] * sc[21];
  qr[7] = sc[22];

  // reaction 70: C2H2 + H (+M) <=> C2H3 (+M)
  qf[8] = sc[1] * sc[22];
  qr[8] = sc[23];

  // reaction 71: C2H3 + H (+M) <=> C2H4 (+M)
  qf[9] = sc[1] * sc[23];
  qr[9] = sc[24];

  // reaction 73: C2H4 + H (+M) <=> C2H5 (+M)
  qf[10] = sc[1] * sc[24];
  qr[10] = sc[25];

  // reaction 75: C2H5 + H (+M) <=> C2H6 (+M)
  qf[11] = sc[1] * sc[25];
  qr[11] = sc[26];

  // reaction 82: CO + H2 (+M) <=> CH2O (+M)
  qf[12] = sc[0] * sc[14];
  qr[12] = sc[17];

  // reaction 84: 2 OH (+M) <=> H2O2 (+M)
  qf[13] = (sc[4] * sc[4]);
  qr[13] = sc[7];

  // reaction 94: CH3 + OH (+M) <=> CH3OH (+M)
  qf[14] = sc[4] * sc[12];
  qr[14] = sc[20];

  // reaction 130: CH + CO (+M) <=> HCCO (+M)
  qf[15] = sc[9] * sc[14];
  qr[15] = sc[27];

  // reaction 139: CH2 + CO (+M) <=> CH2CO (+M)
  qf[16] = sc[10] * sc[14];
  qr[16] = sc[28];

  // reaction 146: CH2(S) + H2O (+M) <=> CH3OH (+M)
  qf[17] = sc[5] * sc[11];
  qr[17] = sc[20];

  // reaction 157: 2 CH3 (+M) <=> C2H6 (+M)
  qf[18] = (sc[12] * sc[12]);
  qr[18] = sc[26];

  // reaction 173: C2H4 (+M) <=> C2H2 + H2 (+M)
  qf[19] = sc[24];
  qr[19] = sc[0] * sc[22];

  // reaction 0: 2 O + M <=> O2 + M
  qf[20] = (sc[2] * sc[2]);
  qr[20] = sc[3];

  // reaction 1: H + O + M <=> OH + M
  qf[21] = sc[1] * sc[2];
  qr[21] = sc[4];

  // reaction 11: CO + O + M <=> CO2 + M
  qf[22] = sc[2] * sc[14];
  qr[22] = sc[15];

  // reaction 32: H + O2 + M <=> HO2 + M
  qf[23] = sc[1] * sc[3];
  qr[23] = sc[6];

  // reaction 33: H + O2 + O2 <=> HO2 + O2
  qf[24] = sc[1] * (sc[3] * sc[3]);
  qr[24] = sc[3] * sc[6];

  // reaction 34: H + O2 + H2O <=> HO2 + H2O
  qf[25] = sc[1] * sc[3] * sc[5];
  qr[25] = sc[5] * sc[6];

  // reaction 35: H + O2 + N2 <=> HO2 + N2
  qf[26] = sc[1] * sc[3] * sc[30];
  qr[26] = sc[6] * sc[30];

  // reaction 36: H + O2 + AR <=> HO2 + AR
  qf[27] = sc[1] * sc[3] * sc[31];
  qr[27] = sc[6] * sc[31];

  // reaction 38: 2 H + M <=> H2 + M
  qf[28] = (sc[1] * sc[1]);
  qr[28] = sc[0];

  // reaction 39: 2 H + H2 <=> H2 + H2
  qf[29] = sc[0] * (sc[1] * sc[1]);
  qr[29] = (sc[0] * sc[0]);

  // reaction 40: 2 H + H2O <=> H2 + H2O
  qf[30] = (sc[1] * sc[1]) * sc[5];
  qr[30] = sc[0] * sc[5];

  // reaction 41: 2 H + CO2 <=> H2 + CO2
  qf[31] = (sc[1] * sc[1]) * sc[15];
  qr[31] = sc[0] * sc[15];

  // reaction 42: H + OH + M <=> H2O + M
  qf[32] = sc[1] * sc[4];
  qr[32] = sc[5];

  // reaction 165: HCO + H2O <=> CO + H + H2O
  qf[33] = sc[5] * sc[16];
  qr[33] = sc[1] * sc[5] * sc[14];

  // reaction 166: HCO + M <=> CO + H + M
  qf[34] = sc[16];
  qr[34] = sc[1] * sc[14];

  // reaction 2: H2 + O <=> H + OH
  qf[35] = sc[0] * sc[2];
  qr[35] = sc[1] * sc[4];

  // reaction 3: HO2 + O <=> O2 + OH
  qf[36] = sc[2] * sc[6];
  qr[36] = sc[3] * sc[4];

  // reaction 4: H2O2 + O <=> HO2 + OH
  qf[37] = sc[2] * sc[7];
  qr[37] = sc[4] * sc[6];

  // reaction 5: CH + O <=> CO + H
  qf[38] = sc[2] * sc[9];
  qr[38] = sc[1] * sc[14];

  // reaction 6: CH2 + O <=> H + HCO
  qf[39] = sc[2] * sc[10];
  qr[39] = sc[1] * sc[16];

  // reaction 7: CH2(S) + O <=> CO + H2
  qf[40] = sc[2] * sc[11];
  qr[40] = sc[0] * sc[14];

  // reaction 8: CH2(S) + O <=> H + HCO
  qf[41] = sc[2] * sc[11];
  qr[41] = sc[1] * sc[16];

  // reaction 9: CH3 + O <=> CH2O + H
  qf[42] = sc[2] * sc[12];
  qr[42] = sc[1] * sc[17];

  // reaction 10: CH4 + O <=> CH3 + OH
  qf[43] = sc[2] * sc[13];
  qr[43] = sc[4] * sc[12];

  // reaction 12: HCO + O <=> CO + OH
  qf[44] = sc[2] * sc[16];
  qr[44] = sc[4] * sc[14];

  // reaction 13: HCO + O <=> CO2 + H
  qf[45] = sc[2] * sc[16];
  qr[45] = sc[1] * sc[15];

  // reaction 14: CH2O + O <=> HCO + OH
  qf[46] = sc[2] * sc[17];
  qr[46] = sc[4] * sc[16];

  // reaction 15: CH2OH + O <=> CH2O + OH
  qf[47] = sc[2] * sc[18];
  qr[47] = sc[4] * sc[17];

  // reaction 16: CH3O + O <=> CH2O + OH
  qf[48] = sc[2] * sc[19];
  qr[48] = sc[4] * sc[17];

  // reaction 17: CH3OH + O <=> CH2OH + OH
  qf[49] = sc[2] * sc[20];
  qr[49] = sc[4] * sc[18];

  // reaction 18: CH3OH + O <=> CH3O + OH
  qf[50] = sc[2] * sc[20];
  qr[50] = sc[4] * sc[19];

  // reaction 19: C2H + O <=> CH + CO
  qf[51] = sc[2] * sc[21];
  qr[51] = sc[9] * sc[14];

  // reaction 20: C2H2 + O <=> H + HCCO
  qf[52] = sc[2] * sc[22];
  qr[52] = sc[1] * sc[27];

  // reaction 21: C2H2 + O <=> C2H + OH
  qf[53] = sc[2] * sc[22];
  qr[53] = sc[4] * sc[21];

  // reaction 22: C2H2 + O <=> CH2 + CO
  qf[54] = sc[2] * sc[22];
  qr[54] = sc[10] * sc[14];

  // reaction 23: C2H3 + O <=> CH2CO + H
  qf[55] = sc[2] * sc[23];
  qr[55] = sc[1] * sc[28];

  // reaction 24: C2H4 + O <=> CH3 + HCO
  qf[56] = sc[2] * sc[24];
  qr[56] = sc[12] * sc[16];

  // reaction 25: C2H5 + O <=> CH2O + CH3
  qf[57] = sc[2] * sc[25];
  qr[57] = sc[12] * sc[17];

  // reaction 26: C2H6 + O <=> C2H5 + OH
  qf[58] = sc[2] * sc[26];
  qr[58] = sc[4] * sc[25];

  // reaction 27: HCCO + O <=> 2 CO + H
  qf[59] = sc[2] * sc[27];
  qr[59] = sc[1] * (sc[14] * sc[14]);

  // reaction 28: CH2CO + O <=> HCCO + OH
  qf[60] = sc[2] * sc[28];
  qr[60] = sc[4] * sc[27];

  // reaction 29: CH2CO + O <=> CH2 + CO2
  qf[61] = sc[2] * sc[28];
  qr[61] = sc[10] * sc[15];

  // reaction 30: CO + O2 <=> CO2 + O
  qf[62] = sc[3] * sc[14];
  qr[62] = sc[2] * sc[15];

  // reaction 31: CH2O + O2 <=> HCO + HO2
  qf[63] = sc[3] * sc[17];
  qr[63] = sc[6] * sc[16];

  // reaction 37: H + O2 <=> O + OH
  qf[64] = sc[1] * sc[3];
  qr[64] = sc[2] * sc[4];

  // reaction 43: H + HO2 <=> H2O + O
  qf[65] = sc[1] * sc[6];
  qr[65] = sc[2] * sc[5];

  // reaction 44: H + HO2 <=> H2 + O2
  qf[66] = sc[1] * sc[6];
  qr[66] = sc[0] * sc[3];

  // reaction 45: H + HO2 <=> 2 OH
  qf[67] = sc[1] * sc[6];
  qr[67] = (sc[4] * sc[4]);

  // reaction 46: H + H2O2 <=> H2 + HO2
  qf[68] = sc[1] * sc[7];
  qr[68] = sc[0] * sc[6];

  // reaction 47: H + H2O2 <=> H2O + OH
  qf[69] = sc[1] * sc[7];
  qr[69] = sc[4] * sc[5];

  // reaction 48: CH + H <=> C + H2
  qf[70] = sc[1] * sc[9];
  qr[70] = sc[0] * sc[8];

  // reaction 50: CH2(S) + H <=> CH + H2
  qf[71] = sc[1] * sc[11];
  qr[71] = sc[0] * sc[9];

  // reaction 52: CH4 + H <=> CH3 + H2
  qf[72] = sc[1] * sc[13];
  qr[72] = sc[0] * sc[12];

  // reaction 54: H + HCO <=> CO + H2
  qf[73] = sc[1] * sc[16];
  qr[73] = sc[0] * sc[14];

  // reaction 57: CH2O + H <=> H2 + HCO
  qf[74] = sc[1] * sc[17];
  qr[74] = sc[0] * sc[16];

  // reaction 59: CH2OH + H <=> CH2O + H2
  qf[75] = sc[1] * sc[18];
  qr[75] = sc[0] * sc[17];

  // reaction 60: CH2OH + H <=> CH3 + OH
  qf[76] = sc[1] * sc[18];
  qr[76] = sc[4] * sc[12];

  // reaction 61: CH2OH + H <=> CH2(S) + H2O
  qf[77] = sc[1] * sc[18];
  qr[77] = sc[5] * sc[11];

  // reaction 63: CH3O + H <=> CH2OH + H
  qf[78] = sc[1] * sc[19];
  qr[78] = sc[1] * sc[18];

  // reaction 64: CH3O + H <=> CH2O + H2
  qf[79] = sc[1] * sc[19];
  qr[79] = sc[0] * sc[17];

  // reaction 65: CH3O + H <=> CH3 + OH
  qf[80] = sc[1] * sc[19];
  qr[80] = sc[4] * sc[12];

  // reaction 66: CH3O + H <=> CH2(S) + H2O
  qf[81] = sc[1] * sc[19];
  qr[81] = sc[5] * sc[11];

  // reaction 67: CH3OH + H <=> CH2OH + H2
  qf[82] = sc[1] * sc[20];
  qr[82] = sc[0] * sc[18];

  // reaction 68: CH3OH + H <=> CH3O + H2
  qf[83] = sc[1] * sc[20];
  qr[83] = sc[0] * sc[19];

  // reaction 72: C2H3 + H <=> C2H2 + H2
  qf[84] = sc[1] * sc[23];
  qr[84] = sc[0] * sc[22];

  // reaction 74: C2H4 + H <=> C2H3 + H2
  qf[85] = sc[1] * sc[24];
  qr[85] = sc[0] * sc[23];

  // reaction 76: C2H5 + H <=> C2H4 + H2
  qf[86] = sc[1] * sc[25];
  qr[86] = sc[0] * sc[24];

  // reaction 77: C2H6 + H <=> C2H5 + H2
  qf[87] = sc[1] * sc[26];
  qr[87] = sc[0] * sc[25];

  // reaction 78: H + HCCO <=> CH2(S) + CO
  qf[88] = sc[1] * sc[27];
  qr[88] = sc[11] * sc[14];

  // reaction 79: CH2CO + H <=> H2 + HCCO
  qf[89] = sc[1] * sc[28];
  qr[89] = sc[0] * sc[27];

  // reaction 80: CH2CO + H <=> CH3 + CO
  qf[90] = sc[1] * sc[28];
  qr[90] = sc[12] * sc[14];

  // reaction 81: H + HCCOH <=> CH2CO + H
  qf[91] = sc[1] * sc[29];
  qr[91] = sc[1] * sc[28];

  // reaction 83: H2 + OH <=> H + H2O
  qf[92] = sc[0] * sc[4];
  qr[92] = sc[1] * sc[5];

  // reaction 85: 2 OH <=> H2O + O
  qf[93] = (sc[4] * sc[4]);
  qr[93] = sc[2] * sc[5];

  // reaction 86: HO2 + OH <=> H2O + O2
  qf[94] = sc[4] * sc[6];
  qr[94] = sc[3] * sc[5];

  // reaction 87: H2O2 + OH <=> H2O + HO2
  qf[95] = sc[4] * sc[7];
  qr[95] = sc[5] * sc[6];

  // reaction 88: H2O2 + OH <=> H2O + HO2
  qf[96] = sc[4] * sc[7];
  qr[96] = sc[5] * sc[6];

  // reaction 89: C + OH <=> CO + H
  qf[97] = sc[4] * sc[8];
  qr[97] = sc[1] * sc[14];

  // reaction 90: CH + OH <=> H + HCO
  qf[98] = sc[4] * sc[9];
  qr[98] = sc[1] * sc[16];

  // reaction 91: CH2 + OH <=> CH2O + H
  qf[99] = sc[4] * sc[10];
  qr[99] = sc[1] * sc[17];

  // reaction 92: CH2 + OH <=> CH + H2O
  qf[100] = sc[4] * sc[10];
  qr[100] = sc[5] * sc[9];

  // reaction 93: CH2(S) + OH <=> CH2O + H
  qf[101] = sc[4] * sc[11];
  qr[101] = sc[1] * sc[17];

  // reaction 95: CH3 + OH <=> CH2 + H2O
  qf[102] = sc[4] * sc[12];
  qr[102] = sc[5] * sc[10];

  // reaction 96: CH3 + OH <=> CH2(S) + H2O
  qf[103] = sc[4] * sc[12];
  qr[103] = sc[5] * sc[11];

  // reaction 97: CH4 + OH <=> CH3 + H2O
  qf[104] = sc[4] * sc[13];
  qr[104] = sc[5] * sc[12];

  // reaction 98: CO + OH <=> CO2 + H
  qf[105] = sc[4] * sc[14];
  qr[105] = sc[1] * sc[15];

  // reaction 99: HCO + OH <=> CO + H2O
  qf[106] = sc[4] * sc[16];
  qr[106] = sc[5] * sc[14];

  // reaction 100: CH2O + OH <=> H2O + HCO
  qf[107] = sc[4] * sc[17];
  qr[107] = sc[5] * sc[16];

  // reaction 101: CH2OH + OH <=> CH2O + H2O
  qf[108] = sc[4] * sc[18];
  qr[108] = sc[5] * sc[17];

  // reaction 102: CH3O + OH <=> CH2O + H2O
  qf[109] = sc[4] * sc[19];
  qr[109] = sc[5] * sc[17];

  // reaction 103: CH3OH + OH <=> CH2OH + H2O
  qf[110] = sc[4] * sc[20];
  qr[110] = sc[5] * sc[18];

  // reaction 104: CH3OH + OH <=> CH3O + H2O
  qf[111] = sc[4] * sc[20];
  qr[111] = sc[5] * sc[19];

  // reaction 105: C2H + OH <=> H + HCCO
  qf[112] = sc[4] * sc[21];
  qr[112] = sc[1] * sc[27];

  // reaction 106: C2H2 + OH <=> CH2CO + H
  qf[113] = sc[4] * sc[22];
  qr[113] = sc[1] * sc[28];

  // reaction 107: C2H2 + OH <=> H + HCCOH
  qf[114] = sc[4] * sc[22];
  qr[114] = sc[1] * sc[29];

  // reaction 108: C2H2 + OH <=> C2H + H2O
  qf[115] = sc[4] * sc[22];
  qr[115] = sc[5] * sc[21];

  // reaction 109: C2H2 + OH <=> CH3 + CO
  qf[116] = sc[4] * sc[22];
  qr[116] = sc[12] * sc[14];

  // reaction 110: C2H3 + OH <=> C2H2 + H2O
  qf[117] = sc[4] * sc[23];
  qr[117] = sc[5] * sc[22];

  // reaction 111: C2H4 + OH <=> C2H3 + H2O
  qf[118] = sc[4] * sc[24];
  qr[118] = sc[5] * sc[23];

  // reaction 112: C2H6 + OH <=> C2H5 + H2O
  qf[119] = sc[4] * sc[26];
  qr[119] = sc[5] * sc[25];

  // reaction 113: CH2CO + OH <=> H2O + HCCO
  qf[120] = sc[4] * sc[28];
  qr[120] = sc[5] * sc[27];

  // reaction 114: 2 HO2 <=> H2O2 + O2
  qf[121] = (sc[6] * sc[6]);
  qr[121] = sc[3] * sc[7];

  // reaction 115: 2 HO2 <=> H2O2 + O2
  qf[122] = (sc[6] * sc[6]);
  qr[122] = sc[3] * sc[7];

  // reaction 116: CH2 + HO2 <=> CH2O + OH
  qf[123] = sc[6] * sc[10];
  qr[123] = sc[4] * sc[17];

  // reaction 117: CH3 + HO2 <=> CH4 + O2
  qf[124] = sc[6] * sc[12];
  qr[124] = sc[3] * sc[13];

  // reaction 118: CH3 + HO2 <=> CH3O + OH
  qf[125] = sc[6] * sc[12];
  qr[125] = sc[4] * sc[19];

  // reaction 119: CO + HO2 <=> CO2 + OH
  qf[126] = sc[6] * sc[14];
  qr[126] = sc[4] * sc[15];

  // reaction 120: CH2O + HO2 <=> H2O2 + HCO
  qf[127] = sc[6] * sc[17];
  qr[127] = sc[7] * sc[16];

  // reaction 121: C + O2 <=> CO + O
  qf[128] = sc[3] * sc[8];
  qr[128] = sc[2] * sc[14];

  // reaction 122: C + CH2 <=> C2H + H
  qf[129] = sc[8] * sc[10];
  qr[129] = sc[1] * sc[21];

  // reaction 123: C + CH3 <=> C2H2 + H
  qf[130] = sc[8] * sc[12];
  qr[130] = sc[1] * sc[22];

  // reaction 124: CH + O2 <=> HCO + O
  qf[131] = sc[3] * sc[9];
  qr[131] = sc[2] * sc[16];

  // reaction 125: CH + H2 <=> CH2 + H
  qf[132] = sc[0] * sc[9];
  qr[132] = sc[1] * sc[10];

  // reaction 126: CH + H2O <=> CH2O + H
  qf[133] = sc[5] * sc[9];
  qr[133] = sc[1] * sc[17];

  // reaction 127: CH + CH2 <=> C2H2 + H
  qf[134] = sc[9] * sc[10];
  qr[134] = sc[1] * sc[22];

  // reaction 128: CH + CH3 <=> C2H3 + H
  qf[135] = sc[9] * sc[12];
  qr[135] = sc[1] * sc[23];

  // reaction 129: CH + CH4 <=> C2H4 + H
  qf[136] = sc[9] * sc[13];
  qr[136] = sc[1] * sc[24];

  // reaction 131: CH + CO2 <=> CO + HCO
  qf[137] = sc[9] * sc[15];
  qr[137] = sc[14] * sc[16];

  // reaction 132: CH + CH2O <=> CH2CO + H
  qf[138] = sc[9] * sc[17];
  qr[138] = sc[1] * sc[28];

  // reaction 133: CH + HCCO <=> C2H2 + CO
  qf[139] = sc[9] * sc[27];
  qr[139] = sc[14] * sc[22];

  // reaction 134: CH2 + O2 <=> HCO + OH
  qf[140] = sc[3] * sc[10];
  qr[140] = sc[4] * sc[16];

  // reaction 135: CH2 + H2 <=> CH3 + H
  qf[141] = sc[0] * sc[10];
  qr[141] = sc[1] * sc[12];

  // reaction 136: 2 CH2 <=> C2H2 + H2
  qf[142] = (sc[10] * sc[10]);
  qr[142] = sc[0] * sc[22];

  // reaction 137: CH2 + CH3 <=> C2H4 + H
  qf[143] = sc[10] * sc[12];
  qr[143] = sc[1] * sc[24];

  // reaction 138: CH2 + CH4 <=> 2 CH3
  qf[144] = sc[10] * sc[13];
  qr[144] = (sc[12] * sc[12]);

  // reaction 140: CH2 + HCCO <=> C2H3 + CO
  qf[145] = sc[10] * sc[27];
  qr[145] = sc[14] * sc[23];

  // reaction 141: CH2(S) + N2 <=> CH2 + N2
  qf[146] = sc[11] * sc[30];
  qr[146] = sc[10] * sc[30];

  // reaction 142: AR + CH2(S) <=> AR + CH2
  qf[147] = sc[11] * sc[31];
  qr[147] = sc[10] * sc[31];

  // reaction 143: CH2(S) + O2 <=> CO + H + OH
  qf[148] = sc[3] * sc[11];
  qr[148] = sc[1] * sc[4] * sc[14];

  // reaction 144: CH2(S) + O2 <=> CO + H2O
  qf[149] = sc[3] * sc[11];
  qr[149] = sc[5] * sc[14];

  // reaction 145: CH2(S) + H2 <=> CH3 + H
  qf[150] = sc[0] * sc[11];
  qr[150] = sc[1] * sc[12];

  // reaction 147: CH2(S) + H2O <=> CH2 + H2O
  qf[151] = sc[5] * sc[11];
  qr[151] = sc[5] * sc[10];

  // reaction 148: CH2(S) + CH3 <=> C2H4 + H
  qf[152] = sc[11] * sc[12];
  qr[152] = sc[1] * sc[24];

  // reaction 149: CH2(S) + CH4 <=> 2 CH3
  qf[153] = sc[11] * sc[13];
  qr[153] = (sc[12] * sc[12]);

  // reaction 150: CH2(S) + CO <=> CH2 + CO
  qf[154] = sc[11] * sc[14];
  qr[154] = sc[10] * sc[14];

  // reaction 151: CH2(S) + CO2 <=> CH2 + CO2
  qf[155] = sc[11] * sc[15];
  qr[155] = sc[10] * sc[15];

  // reaction 152: CH2(S) + CO2 <=> CH2O + CO
  qf[156] = sc[11] * sc[15];
  qr[156] = sc[14] * sc[17];

  // reaction 153: C2H6 + CH2(S) <=> C2H5 + CH3
  qf[157] = sc[11] * sc[26];
  qr[157] = sc[12] * sc[25];

  // reaction 154: CH3 + O2 <=> CH3O + O
  qf[158] = sc[3] * sc[12];
  qr[158] = sc[2] * sc[19];

  // reaction 155: CH3 + O2 <=> CH2O + OH
  qf[159] = sc[3] * sc[12];
  qr[159] = sc[4] * sc[17];

  // reaction 156: CH3 + H2O2 <=> CH4 + HO2
  qf[160] = sc[7] * sc[12];
  qr[160] = sc[6] * sc[13];

  // reaction 158: 2 CH3 <=> C2H5 + H
  qf[161] = (sc[12] * sc[12]);
  qr[161] = sc[1] * sc[25];

  // reaction 159: CH3 + HCO <=> CH4 + CO
  qf[162] = sc[12] * sc[16];
  qr[162] = sc[13] * sc[14];

  // reaction 160: CH2O + CH3 <=> CH4 + HCO
  qf[163] = sc[12] * sc[17];
  qr[163] = sc[13] * sc[16];

  // reaction 161: CH3 + CH3OH <=> CH2OH + CH4
  qf[164] = sc[12] * sc[20];
  qr[164] = sc[13] * sc[18];

  // reaction 162: CH3 + CH3OH <=> CH3O + CH4
  qf[165] = sc[12] * sc[20];
  qr[165] = sc[13] * sc[19];

  // reaction 163: C2H4 + CH3 <=> C2H3 + CH4
  qf[166] = sc[12] * sc[24];
  qr[166] = sc[13] * sc[23];

  // reaction 164: C2H6 + CH3 <=> C2H5 + CH4
  qf[167] = sc[12] * sc[26];
  qr[167] = sc[13] * sc[25];

  // reaction 167: HCO + O2 <=> CO + HO2
  qf[168] = sc[3] * sc[16];
  qr[168] = sc[6] * sc[14];

  // reaction 168: CH2OH + O2 <=> CH2O + HO2
  qf[169] = sc[3] * sc[18];
  qr[169] = sc[6] * sc[17];

  // reaction 169: CH3O + O2 <=> CH2O + HO2
  qf[170] = sc[3] * sc[19];
  qr[170] = sc[6] * sc[17];

  // reaction 170: C2H + O2 <=> CO + HCO
  qf[171] = sc[3] * sc[21];
  qr[171] = sc[14] * sc[16];

  // reaction 171: C2H + H2 <=> C2H2 + H
  qf[172] = sc[0] * sc[21];
  qr[172] = sc[1] * sc[22];

  // reaction 172: C2H3 + O2 <=> CH2O + HCO
  qf[173] = sc[3] * sc[23];
  qr[173] = sc[16] * sc[17];

  // reaction 174: C2H5 + O2 <=> C2H4 + HO2
  qf[174] = sc[3] * sc[25];
  qr[174] = sc[6] * sc[24];

  // reaction 175: HCCO + O2 <=> 2 CO + OH
  qf[175] = sc[3] * sc[27];
  qr[175] = sc[4] * (sc[14] * sc[14]);

  // reaction 176: 2 HCCO <=> C2H2 + 2 CO
  qf[176] = (sc[27] * sc[27]);
  qr[176] = (sc[14] * sc[14]) * sc[22];

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 32; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[32];
  gibbs(g_RT, tc);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 * invT;
  amrex::Real refCinv = 1 / refC;

  // Evaluate the kfs
  amrex::Real k_f, Corr;
  amrex::Real redP, F, logPred, logFcent, troe_c, troe_n, troe, F_troe;

  // reaction 0:  2 O + M <=> O2 + M
  k_f = 120000 * exp((-1) * tc[0]);
  Corr = mixture + (1.4) * sc[0] + (14.4) * sc[5] + sc[13] + (0.75) * sc[14] +
         (2.6) * sc[15] + (2) * sc[26] + (-0.17) * sc[31];
  qf[20] *= Corr * k_f;
  qr[20] *= Corr * k_f * exp(-(2.000000 * g_RT[2] - g_RT[3])) * (refC);
  // reaction 1:  H + O + M <=> OH + M
  k_f = 500000 * exp((-1) * tc[0]);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[31];
  qf[21] *= Corr * k_f;
  qr[21] *= Corr * k_f * exp(-(g_RT[1] + g_RT[2] - g_RT[4])) * (refC);
  // reaction 2:  H2 + O <=> H + OH
  k_f = 0.05 * exp((2.67) * tc[0] - (3165.23282791169) * invT);
  qf[35] *= k_f;
  qr[35] *= k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[2] - g_RT[4]));
  // reaction 3:  HO2 + O <=> O2 + OH
  k_f = 20000000;
  qf[36] *= k_f;
  qr[36] *= k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[4] + g_RT[6]));
  // reaction 4:  H2O2 + O <=> HO2 + OH
  k_f = 9.63 * exp((2) * tc[0] - (2012.86666321888) * invT);
  qf[37] *= k_f;
  qr[37] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[6] + g_RT[7]));
  // reaction 5:  CH + O <=> CO + H
  k_f = 57000000;
  qf[38] *= k_f;
  qr[38] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[9] - g_RT[14]));
  // reaction 6:  CH2 + O <=> H + HCO
  k_f = 80000000;
  qf[39] *= k_f;
  qr[39] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[10] - g_RT[16]));
  // reaction 7:  CH2(S) + O <=> CO + H2
  k_f = 15000000;
  qf[40] *= k_f;
  qr[40] *= k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[11] - g_RT[14]));
  // reaction 8:  CH2(S) + O <=> H + HCO
  k_f = 15000000;
  qf[41] *= k_f;
  qr[41] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[11] - g_RT[16]));
  // reaction 9:  CH3 + O <=> CH2O + H
  k_f = 84300000;
  qf[42] *= k_f;
  qr[42] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[12] - g_RT[17]));
  // reaction 10:  CH4 + O <=> CH3 + OH
  k_f = 1020 * exp((1.5) * tc[0] - (4327.66332592059) * invT);
  qf[43] *= k_f;
  qr[43] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[12] + g_RT[13]));
  // reaction 11:  CO + O + M <=> CO2 + M
  k_f = 602 * exp(-(1509.64999741416) * invT);
  Corr = mixture + sc[0] + (5) * sc[3] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
         (2.5) * sc[15] + (2) * sc[26] + (-0.5) * sc[31];
  qf[22] *= Corr * k_f;
  qr[22] *= Corr * k_f * exp(-(g_RT[2] + g_RT[14] - g_RT[15])) * (refC);
  // reaction 12:  HCO + O <=> CO + OH
  k_f = 30000000;
  qf[44] *= k_f;
  qr[44] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[14] + g_RT[16]));
  // reaction 13:  HCO + O <=> CO2 + H
  k_f = 30000000;
  qf[45] *= k_f;
  qr[45] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[15] + g_RT[16]));
  // reaction 14:  CH2O + O <=> HCO + OH
  k_f = 39000000 * exp(-(1781.38699694871) * invT);
  qf[46] *= k_f;
  qr[46] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[16] + g_RT[17]));
  // reaction 15:  CH2OH + O <=> CH2O + OH
  k_f = 10000000;
  qf[47] *= k_f;
  qr[47] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[17] + g_RT[18]));
  // reaction 16:  CH3O + O <=> CH2O + OH
  k_f = 10000000;
  qf[48] *= k_f;
  qr[48] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[17] + g_RT[19]));
  // reaction 17:  CH3OH + O <=> CH2OH + OH
  k_f = 0.388 * exp((2.5) * tc[0] - (1559.97166399463) * invT);
  qf[49] *= k_f;
  qr[49] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[18] + g_RT[20]));
  // reaction 18:  CH3OH + O <=> CH3O + OH
  k_f = 0.13 * exp((2.5) * tc[0] - (2516.0833290236) * invT);
  qf[50] *= k_f;
  qr[50] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[19] + g_RT[20]));
  // reaction 19:  C2H + O <=> CH + CO
  k_f = 50000000;
  qf[51] *= k_f;
  qr[51] *= k_f * exp(-(g_RT[2] - g_RT[9] - g_RT[14] + g_RT[21]));
  // reaction 20:  C2H2 + O <=> H + HCCO
  k_f = 10.2 * exp((2) * tc[0] - (956.111665028967) * invT);
  qf[52] *= k_f;
  qr[52] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[22] - g_RT[27]));
  // reaction 21:  C2H2 + O <=> C2H + OH
  k_f = 46000000000000 * exp((-1.41) * tc[0] - (14568.1224750466) * invT);
  qf[53] *= k_f;
  qr[53] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[21] + g_RT[22]));
  // reaction 22:  C2H2 + O <=> CH2 + CO
  k_f = 10.2 * exp((2) * tc[0] - (956.111665028967) * invT);
  qf[54] *= k_f;
  qr[54] *= k_f * exp(-(g_RT[2] - g_RT[10] - g_RT[14] + g_RT[22]));
  // reaction 23:  C2H3 + O <=> CH2CO + H
  k_f = 30000000;
  qf[55] *= k_f;
  qr[55] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[23] - g_RT[28]));
  // reaction 24:  C2H4 + O <=> CH3 + HCO
  k_f = 19.2 * exp((1.83) * tc[0] - (110.707666477038) * invT);
  qf[56] *= k_f;
  qr[56] *= k_f * exp(-(g_RT[2] - g_RT[12] - g_RT[16] + g_RT[24]));
  // reaction 25:  C2H5 + O <=> CH2O + CH3
  k_f = 132000000;
  qf[57] *= k_f;
  qr[57] *= k_f * exp(-(g_RT[2] - g_RT[12] - g_RT[17] + g_RT[25]));
  // reaction 26:  C2H6 + O <=> C2H5 + OH
  k_f = 89.8 * exp((1.92) * tc[0] - (2863.30282842885) * invT);
  qf[58] *= k_f;
  qr[58] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[25] + g_RT[26]));
  // reaction 27:  HCCO + O <=> 2 CO + H
  k_f = 100000000;
  qf[59] *= k_f;
  qr[59] *= k_f * exp(-(-g_RT[1] + g_RT[2] - 2.000000 * g_RT[14] + g_RT[27])) *
            (refCinv);
  // reaction 28:  CH2CO + O <=> HCCO + OH
  k_f = 10000000 * exp(-(4025.73332643776) * invT);
  qf[60] *= k_f;
  qr[60] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[27] + g_RT[28]));
  // reaction 29:  CH2CO + O <=> CH2 + CO2
  k_f = 1750000 * exp(-(679.342498836372) * invT);
  qf[61] *= k_f;
  qr[61] *= k_f * exp(-(g_RT[2] - g_RT[10] - g_RT[15] + g_RT[28]));
  // reaction 30:  CO + O2 <=> CO2 + O
  k_f = 2500000 * exp(-(24053.7566254656) * invT);
  qf[62] *= k_f;
  qr[62] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[14] - g_RT[15]));
  // reaction 31:  CH2O + O2 <=> HCO + HO2
  k_f = 100000000 * exp(-(20128.6666321888) * invT);
  qf[63] *= k_f;
  qr[63] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[16] + g_RT[17]));
  // reaction 32:  H + O2 + M <=> HO2 + M
  k_f = 2800000 * exp((-0.86) * tc[0]);
  Corr = mixture + (-1) * sc[3] + (-1) * sc[5] + (-0.25) * sc[14] +
         (0.5) * sc[15] + (0.5) * sc[26] + (-1) * sc[30] + (-1) * sc[31];
  qf[23] *= Corr * k_f;
  qr[23] *= Corr * k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC);
  // reaction 33:  H + O2 + O2 <=> HO2 + O2
  k_f = 300000000 * exp((-1.72) * tc[0]);
  qf[24] *= k_f;
  qr[24] *= k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC);
  // reaction 34:  H + O2 + H2O <=> HO2 + H2O
  k_f = 9380000 * exp((-0.76) * tc[0]);
  qf[25] *= k_f;
  qr[25] *= k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC);
  // reaction 35:  H + O2 + N2 <=> HO2 + N2
  k_f = 375000000 * exp((-1.72) * tc[0]);
  qf[26] *= k_f;
  qr[26] *= k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC);
  // reaction 36:  H + O2 + AR <=> HO2 + AR
  k_f = 700000 * exp((-0.8) * tc[0]);
  qf[27] *= k_f;
  qr[27] *= k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC);
  // reaction 37:  H + O2 <=> O + OH
  k_f = 83000000 * exp(-(7252.86180424342) * invT);
  qf[64] *= k_f;
  qr[64] *= k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[3] - g_RT[4]));
  // reaction 38:  2 H + M <=> H2 + M
  k_f = 1000000 * exp((-1) * tc[0]);
  Corr = mixture + (-1) * sc[0] + (-1) * sc[5] + sc[13] + (-1) * sc[15] +
         (2) * sc[26] + (-0.37) * sc[31];
  qf[28] *= Corr * k_f;
  qr[28] *= Corr * k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC);
  // reaction 39:  2 H + H2 <=> H2 + H2
  k_f = 90000 * exp((-0.6) * tc[0]);
  qf[29] *= k_f;
  qr[29] *= k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC);
  // reaction 40:  2 H + H2O <=> H2 + H2O
  k_f = 60000000 * exp((-1.25) * tc[0]);
  qf[30] *= k_f;
  qr[30] *= k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC);
  // reaction 41:  2 H + CO2 <=> H2 + CO2
  k_f = 550000000 * exp((-2) * tc[0]);
  qf[31] *= k_f;
  qr[31] *= k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC);
  // reaction 42:  H + OH + M <=> H2O + M
  k_f = 22000000000 * exp((-2) * tc[0]);
  Corr = mixture + (-0.27) * sc[0] + (2.65) * sc[5] + sc[13] + (2) * sc[26] +
         (-0.62) * sc[31];
  qf[32] *= Corr * k_f;
  qr[32] *= Corr * k_f * exp(-(g_RT[1] + g_RT[4] - g_RT[5])) * (refC);
  // reaction 43:  H + HO2 <=> H2O + O
  k_f = 3970000 * exp(-(337.658382754967) * invT);
  qf[65] *= k_f;
  qr[65] *= k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[5] + g_RT[6]));
  // reaction 44:  H + HO2 <=> H2 + O2
  k_f = 28000000 * exp(-(537.435399079441) * invT);
  qf[66] *= k_f;
  qr[66] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[3] + g_RT[6]));
  // reaction 45:  H + HO2 <=> 2 OH
  k_f = 134000000 * exp(-(319.542582785997) * invT);
  qf[67] *= k_f;
  qr[67] *= k_f * exp(-(g_RT[1] - 2.000000 * g_RT[4] + g_RT[6]));
  // reaction 46:  H + H2O2 <=> H2 + HO2
  k_f = 12.1 * exp((2) * tc[0] - (2616.72666218454) * invT);
  qf[68] *= k_f;
  qr[68] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[6] + g_RT[7]));
  // reaction 47:  H + H2O2 <=> H2O + OH
  k_f = 10000000 * exp(-(1811.57999689699) * invT);
  qf[69] *= k_f;
  qr[69] *= k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[5] + g_RT[7]));
  // reaction 48:  CH + H <=> C + H2
  k_f = 110000000;
  qf[70] *= k_f;
  qr[70] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[8] + g_RT[9]));
  // reaction 49:  CH2 + H (+M) <=> CH3 (+M)
  k_f = 25000000000 * exp((-0.8) * tc[0]);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[31];
  redP = Corr / k_f * 3.2e+15 * exp(-3.14 * tc[0] - (618.956498939805) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.32) * exp(-tc[1] * 0.0128205128205128) +
    0.68 * exp(-tc[1] * 0.00050125313283208) + exp(-5590 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[0] *= Corr * k_f;
  qr[0] *= Corr * k_f * exp(-(g_RT[1] + g_RT[10] - g_RT[12])) * (refC);
  // reaction 50:  CH2(S) + H <=> CH + H2
  k_f = 30000000;
  qf[71] *= k_f;
  qr[71] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[9] + g_RT[11]));
  // reaction 51:  CH3 + H (+M) <=> CH4 (+M)
  k_f = 12700000000 * exp((-0.63) * tc[0] - (192.731983003208) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[31];
  redP =
    Corr / k_f * 2.477e+21 * exp(-4.76 * tc[0] - (1227.84866456352) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.217) * exp(-tc[1] * 0.0135135135135135) +
    0.783 * exp(-tc[1] * 0.000340020401224073) + exp(-6964 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[1] *= Corr * k_f;
  qr[1] *= Corr * k_f * exp(-(g_RT[1] + g_RT[12] - g_RT[13])) * (refC);
  // reaction 52:  CH4 + H <=> CH3 + H2
  k_f = 660 * exp((1.62) * tc[0] - (5454.86865732316) * invT);
  qf[72] *= k_f;
  qr[72] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[12] + g_RT[13]));
  // reaction 53:  H + HCO (+M) <=> CH2O (+M)
  k_f = 1090000 * exp((0.48) * tc[0] - (-130.836333109227) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[31];
  redP =
    Corr / k_f * 1350000000000 * exp(-2.57 * tc[0] - (717.083748771726) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2176) * exp(-tc[1] * 0.003690036900369) +
    0.7824 * exp(-tc[1] * 0.000362976406533575) + exp(-6570 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[2] *= Corr * k_f;
  qr[2] *= Corr * k_f * exp(-(g_RT[1] + g_RT[16] - g_RT[17])) * (refC);
  // reaction 54:  H + HCO <=> CO + H2
  k_f = 73400000;
  qf[73] *= k_f;
  qr[73] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[14] + g_RT[16]));
  // reaction 55:  CH2O + H (+M) <=> CH2OH (+M)
  k_f = 540000 * exp((0.454) * tc[0] - (1811.57999689699) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26];
  redP = Corr / k_f * 1.27e+20 * exp(-4.82 * tc[0] - (3286.00482770482) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2813) * exp(-tc[1] * 0.00970873786407767) +
    0.7187 * exp(-tc[1] * 0.000774593338497289) + exp(-4160 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[3] *= Corr * k_f;
  qr[3] *= Corr * k_f * exp(-(g_RT[1] + g_RT[17] - g_RT[18])) * (refC);
  // reaction 56:  CH2O + H (+M) <=> CH3O (+M)
  k_f = 540000 * exp((0.454) * tc[0] - (1308.36333109227) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26];
  redP = Corr / k_f * 2.2e+18 * exp(-4.8 * tc[0] - (2797.88466187424) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.242) * exp(-tc[1] * 0.0106382978723404) +
    0.758 * exp(-tc[1] * 0.000643086816720257) + exp(-4200 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[4] *= Corr * k_f;
  qr[4] *= Corr * k_f * exp(-(g_RT[1] + g_RT[17] - g_RT[19])) * (refC);
  // reaction 57:  CH2O + H <=> H2 + HCO
  k_f = 23000 * exp((1.05) * tc[0] - (1648.03458051046) * invT);
  qf[74] *= k_f;
  qr[74] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[16] + g_RT[17]));
  // reaction 58:  CH2OH + H (+M) <=> CH3OH (+M)
  k_f = 18000000;
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26];
  redP = Corr / k_f * 3e+19 * exp(-4.8 * tc[0] - (1660.61499715557) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2321) * exp(-tc[1] * 0.0029585798816568) +
    0.7679 * exp(-tc[1] * 0.000551876379690949) + exp(-5081 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[5] *= Corr * k_f;
  qr[5] *= Corr * k_f * exp(-(g_RT[1] + g_RT[18] - g_RT[20])) * (refC);
  // reaction 59:  CH2OH + H <=> CH2O + H2
  k_f = 20000000;
  qf[75] *= k_f;
  qr[75] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[17] + g_RT[18]));
  // reaction 60:  CH2OH + H <=> CH3 + OH
  k_f = 12000000;
  qf[76] *= k_f;
  qr[76] *= k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[12] + g_RT[18]));
  // reaction 61:  CH2OH + H <=> CH2(S) + H2O
  k_f = 6000000;
  qf[77] *= k_f;
  qr[77] *= k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[11] + g_RT[18]));
  // reaction 62:  CH3O + H (+M) <=> CH3OH (+M)
  k_f = 50000000;
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26];
  redP = Corr / k_f * 8.6e+16 * exp(-4 * tc[0] - (1522.23041405928) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.1098) * exp(-tc[1] * 0.00694444444444444) +
    0.8902 * exp(-tc[1] * 0.000352360817477097) + exp(-45569 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[6] *= Corr * k_f;
  qr[6] *= Corr * k_f * exp(-(g_RT[1] + g_RT[19] - g_RT[20])) * (refC);
  // reaction 63:  CH3O + H <=> CH2OH + H
  k_f = 3.4 * exp((1.6) * tc[0]);
  qf[78] *= k_f;
  qr[78] *= k_f * exp(-(g_RT[1] - g_RT[1] - g_RT[18] + g_RT[19]));
  // reaction 64:  CH3O + H <=> CH2O + H2
  k_f = 20000000;
  qf[79] *= k_f;
  qr[79] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[17] + g_RT[19]));
  // reaction 65:  CH3O + H <=> CH3 + OH
  k_f = 32000000;
  qf[80] *= k_f;
  qr[80] *= k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[12] + g_RT[19]));
  // reaction 66:  CH3O + H <=> CH2(S) + H2O
  k_f = 16000000;
  qf[81] *= k_f;
  qr[81] *= k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[11] + g_RT[19]));
  // reaction 67:  CH3OH + H <=> CH2OH + H2
  k_f = 17 * exp((2.1) * tc[0] - (2450.66516246898) * invT);
  qf[82] *= k_f;
  qr[82] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[18] + g_RT[20]));
  // reaction 68:  CH3OH + H <=> CH3O + H2
  k_f = 4.2 * exp((2.1) * tc[0] - (2450.66516246898) * invT);
  qf[83] *= k_f;
  qr[83] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[19] + g_RT[20]));
  // reaction 69:  C2H + H (+M) <=> C2H2 (+M)
  k_f = 100000000000 * exp((-1) * tc[0]);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[31];
  redP = Corr / k_f * 3.75e+21 * exp(-4.8 * tc[0] - (956.111665028967) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.3536) * exp(-tc[1] * 0.00757575757575758) +
    0.6464 * exp(-tc[1] * 0.000760456273764259) + exp(-5566 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[7] *= Corr * k_f;
  qr[7] *= Corr * k_f * exp(-(g_RT[1] + g_RT[21] - g_RT[22])) * (refC);
  // reaction 70:  C2H2 + H (+M) <=> C2H3 (+M)
  k_f = 5600000 * exp(-(1207.71999793133) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[31];
  redP = Corr / k_f * 3.8e+28 * exp(-7.27 * tc[0] - (3633.22432711008) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2493) * exp(-tc[1] * 0.0101522842639594) +
    0.7507 * exp(-tc[1] * 0.000768049155145929) + exp(-4167 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[8] *= Corr * k_f;
  qr[8] *= Corr * k_f * exp(-(g_RT[1] + g_RT[22] - g_RT[23])) * (refC);
  // reaction 71:  C2H3 + H (+M) <=> C2H4 (+M)
  k_f = 6080000 * exp((0.27) * tc[0] - (140.900666425322) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[31];
  redP = Corr / k_f * 1.4e+18 * exp(-3.86 * tc[0] - (1670.67933047167) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.218) * exp(-tc[1] * 0.00481927710843374) +
    0.782 * exp(-tc[1] * 0.000375516334960571) + exp(-6095 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[9] *= Corr * k_f;
  qr[9] *= Corr * k_f * exp(-(g_RT[1] + g_RT[23] - g_RT[24])) * (refC);
  // reaction 72:  C2H3 + H <=> C2H2 + H2
  k_f = 30000000;
  qf[84] *= k_f;
  qr[84] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[22] + g_RT[23]));
  // reaction 73:  C2H4 + H (+M) <=> C2H5 (+M)
  k_f = 1080000 * exp((0.454) * tc[0] - (915.85433176459) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[31];
  redP = Corr / k_f * 1.2e+30 * exp(-7.62 * tc[0] - (3507.4201606589) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.0247000000000001) * exp(-tc[1] * 0.00476190476190476) +
    0.9753 * exp(-tc[1] * 0.00101626016260163) + exp(-4374 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[10] *= Corr * k_f;
  qr[10] *= Corr * k_f * exp(-(g_RT[1] + g_RT[24] - g_RT[25])) * (refC);
  // reaction 74:  C2H4 + H <=> C2H3 + H2
  k_f = 1.325 * exp((2.53) * tc[0] - (6159.37198944977) * invT);
  qf[85] *= k_f;
  qr[85] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[23] + g_RT[24]));
  // reaction 75:  C2H5 + H (+M) <=> C2H6 (+M)
  k_f = 521000000000 * exp((-0.99) * tc[0] - (795.082331971457) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[31];
  redP = Corr / k_f * 1.99e+29 * exp(-7.08 * tc[0] - (3364.00341090455) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.1578) * exp(-tc[1] * 0.008) +
    0.8422 * exp(-tc[1] * 0.000450653447498873) + exp(-6882 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[11] *= Corr * k_f;
  qr[11] *= Corr * k_f * exp(-(g_RT[1] + g_RT[25] - g_RT[26])) * (refC);
  // reaction 76:  C2H5 + H <=> C2H4 + H2
  k_f = 2000000;
  qf[86] *= k_f;
  qr[86] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[24] + g_RT[25]));
  // reaction 77:  C2H6 + H <=> C2H5 + H2
  k_f = 115 * exp((1.9) * tc[0] - (3789.22149350954) * invT);
  qf[87] *= k_f;
  qr[87] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[25] + g_RT[26]));
  // reaction 78:  H + HCCO <=> CH2(S) + CO
  k_f = 100000000;
  qf[88] *= k_f;
  qr[88] *= k_f * exp(-(g_RT[1] - g_RT[11] - g_RT[14] + g_RT[27]));
  // reaction 79:  CH2CO + H <=> H2 + HCCO
  k_f = 50000000 * exp(-(4025.73332643776) * invT);
  qf[89] *= k_f;
  qr[89] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[27] + g_RT[28]));
  // reaction 80:  CH2CO + H <=> CH3 + CO
  k_f = 11300000 * exp(-(1725.02673037858) * invT);
  qf[90] *= k_f;
  qr[90] *= k_f * exp(-(g_RT[1] - g_RT[12] - g_RT[14] + g_RT[28]));
  // reaction 81:  H + HCCOH <=> CH2CO + H
  k_f = 10000000;
  qf[91] *= k_f;
  qr[91] *= k_f * exp(-(g_RT[1] - g_RT[1] - g_RT[28] + g_RT[29]));
  // reaction 82:  CO + H2 (+M) <=> CH2O (+M)
  k_f = 43 * exp((1.5) * tc[0] - (40056.0465980557) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[31];
  redP = Corr / k_f * 5.07e+15 * exp(-3.42 * tc[0] - (42446.3257606281) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.0679999999999999) * exp(-tc[1] * 0.0050761421319797) +
    0.932 * exp(-tc[1] * 0.000649350649350649) + exp(-10300 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[12] *= Corr * k_f;
  qr[12] *= Corr * k_f * exp(-(g_RT[0] + g_RT[14] - g_RT[17])) * (refC);
  // reaction 83:  H2 + OH <=> H + H2O
  k_f = 216 * exp((1.51) * tc[0] - (1726.03316371019) * invT);
  qf[92] *= k_f;
  qr[92] *= k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[4] - g_RT[5]));
  // reaction 84:  2 OH (+M) <=> H2O2 (+M)
  k_f = 74000000 * exp((-0.37) * tc[0]);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[31];
  redP = Corr / k_f * 2300000 * exp(-0.9 * tc[0] - (-855.468331868023) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2654) * exp(-tc[1] * 0.0106382978723404) +
    0.7346 * exp(-tc[1] * 0.000569476082004556) + exp(-5182 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[13] *= Corr * k_f;
  qr[13] *= Corr * k_f * exp(-(2.000000 * g_RT[4] - g_RT[7])) * (refC);
  // reaction 85:  2 OH <=> H2O + O
  k_f = 0.0357 * exp((2.4) * tc[0] - (-1061.78716484796) * invT);
  qf[93] *= k_f;
  qr[93] *= k_f * exp(-(-g_RT[2] + 2.000000 * g_RT[4] - g_RT[5]));
  // reaction 86:  HO2 + OH <=> H2O + O2
  k_f = 29000000 * exp(-(-251.60833290236) * invT);
  qf[94] *= k_f;
  qr[94] *= k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[5] + g_RT[6]));
  // reaction 87:  H2O2 + OH <=> H2O + HO2
  k_f = 1750000 * exp(-(161.02933305751) * invT);
  qf[95] *= k_f;
  qr[95] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]));
  // reaction 88:  H2O2 + OH <=> H2O + HO2
  k_f = 580000000 * exp(-(4810.75132509312) * invT);
  qf[96] *= k_f;
  qr[96] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]));
  // reaction 89:  C + OH <=> CO + H
  k_f = 50000000;
  qf[97] *= k_f;
  qr[97] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[8] - g_RT[14]));
  // reaction 90:  CH + OH <=> H + HCO
  k_f = 30000000;
  qf[98] *= k_f;
  qr[98] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[9] - g_RT[16]));
  // reaction 91:  CH2 + OH <=> CH2O + H
  k_f = 20000000;
  qf[99] *= k_f;
  qr[99] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[10] - g_RT[17]));
  // reaction 92:  CH2 + OH <=> CH + H2O
  k_f = 11.3 * exp((2) * tc[0] - (1509.64999741416) * invT);
  qf[100] *= k_f;
  qr[100] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[9] + g_RT[10]));
  // reaction 93:  CH2(S) + OH <=> CH2O + H
  k_f = 30000000;
  qf[101] *= k_f;
  qr[101] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[11] - g_RT[17]));
  // reaction 94:  CH3 + OH (+M) <=> CH3OH (+M)
  k_f = 63000000;
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26];
  redP = Corr / k_f * 2.7e+26 * exp(-6.3 * tc[0] - (1559.97166399463) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.7895) * exp(-tc[1] * 0.0119760479041916) +
    0.2105 * exp(-tc[1] * 0.000185253797702853) + exp(-8370 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[14] *= Corr * k_f;
  qr[14] *= Corr * k_f * exp(-(g_RT[4] + g_RT[12] - g_RT[20])) * (refC);
  // reaction 95:  CH3 + OH <=> CH2 + H2O
  k_f = 56 * exp((1.6) * tc[0] - (2727.43432866158) * invT);
  qf[102] *= k_f;
  qr[102] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[10] + g_RT[12]));
  // reaction 96:  CH3 + OH <=> CH2(S) + H2O
  k_f = 25010000;
  qf[103] *= k_f;
  qr[103] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[11] + g_RT[12]));
  // reaction 97:  CH4 + OH <=> CH3 + H2O
  k_f = 100 * exp((1.6) * tc[0] - (1570.03599731073) * invT);
  qf[104] *= k_f;
  qr[104] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[12] + g_RT[13]));
  // reaction 98:  CO + OH <=> CO2 + H
  k_f = 47.6 * exp((1.228) * tc[0] - (35.2251666063304) * invT);
  qf[105] *= k_f;
  qr[105] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[14] - g_RT[15]));
  // reaction 99:  HCO + OH <=> CO + H2O
  k_f = 50000000;
  qf[106] *= k_f;
  qr[106] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[14] + g_RT[16]));
  // reaction 100:  CH2O + OH <=> H2O + HCO
  k_f = 3430 * exp((1.18) * tc[0] - (-224.93784961471) * invT);
  qf[107] *= k_f;
  qr[107] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[16] + g_RT[17]));
  // reaction 101:  CH2OH + OH <=> CH2O + H2O
  k_f = 5000000;
  qf[108] *= k_f;
  qr[108] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[17] + g_RT[18]));
  // reaction 102:  CH3O + OH <=> CH2O + H2O
  k_f = 5000000;
  qf[109] *= k_f;
  qr[109] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[17] + g_RT[19]));
  // reaction 103:  CH3OH + OH <=> CH2OH + H2O
  k_f = 1.44 * exp((2) * tc[0] - (-422.701999275965) * invT);
  qf[110] *= k_f;
  qr[110] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[18] + g_RT[20]));
  // reaction 104:  CH3OH + OH <=> CH3O + H2O
  k_f = 6.3 * exp((2) * tc[0] - (754.82499870708) * invT);
  qf[111] *= k_f;
  qr[111] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[19] + g_RT[20]));
  // reaction 105:  C2H + OH <=> H + HCCO
  k_f = 20000000;
  qf[112] *= k_f;
  qr[112] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[21] - g_RT[27]));
  // reaction 106:  C2H2 + OH <=> CH2CO + H
  k_f = 2.18e-10 * exp((4.5) * tc[0] - (-503.21666580472) * invT);
  qf[113] *= k_f;
  qr[113] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[22] - g_RT[28]));
  // reaction 107:  C2H2 + OH <=> H + HCCOH
  k_f = 0.504 * exp((2.3) * tc[0] - (6793.42498836372) * invT);
  qf[114] *= k_f;
  qr[114] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[22] - g_RT[29]));
  // reaction 108:  C2H2 + OH <=> C2H + H2O
  k_f = 33.7 * exp((2) * tc[0] - (7045.03332126608) * invT);
  qf[115] *= k_f;
  qr[115] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[21] + g_RT[22]));
  // reaction 109:  C2H2 + OH <=> CH3 + CO
  k_f = 4.83e-10 * exp((4) * tc[0] - (-1006.43333160944) * invT);
  qf[116] *= k_f;
  qr[116] *= k_f * exp(-(g_RT[4] - g_RT[12] - g_RT[14] + g_RT[22]));
  // reaction 110:  C2H3 + OH <=> C2H2 + H2O
  k_f = 5000000;
  qf[117] *= k_f;
  qr[117] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[22] + g_RT[23]));
  // reaction 111:  C2H4 + OH <=> C2H3 + H2O
  k_f = 3.6 * exp((2) * tc[0] - (1258.0416645118) * invT);
  qf[118] *= k_f;
  qr[118] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[23] + g_RT[24]));
  // reaction 112:  C2H6 + OH <=> C2H5 + H2O
  k_f = 3.54 * exp((2.12) * tc[0] - (437.798499250106) * invT);
  qf[119] *= k_f;
  qr[119] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[25] + g_RT[26]));
  // reaction 113:  CH2CO + OH <=> H2O + HCCO
  k_f = 7500000 * exp(-(1006.43333160944) * invT);
  qf[120] *= k_f;
  qr[120] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[27] + g_RT[28]));
  // reaction 114:  2 HO2 <=> H2O2 + O2
  k_f = 130000 * exp(-(-820.243165261693) * invT);
  qf[121] *= k_f;
  qr[121] *= k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[6] - g_RT[7]));
  // reaction 115:  2 HO2 <=> H2O2 + O2
  k_f = 420000000 * exp(-(6038.59998965664) * invT);
  qf[122] *= k_f;
  qr[122] *= k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[6] - g_RT[7]));
  // reaction 116:  CH2 + HO2 <=> CH2O + OH
  k_f = 20000000;
  qf[123] *= k_f;
  qr[123] *= k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[10] - g_RT[17]));
  // reaction 117:  CH3 + HO2 <=> CH4 + O2
  k_f = 1000000;
  qf[124] *= k_f;
  qr[124] *= k_f * exp(-(-g_RT[3] + g_RT[6] + g_RT[12] - g_RT[13]));
  // reaction 118:  CH3 + HO2 <=> CH3O + OH
  k_f = 20000000;
  qf[125] *= k_f;
  qr[125] *= k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[12] - g_RT[19]));
  // reaction 119:  CO + HO2 <=> CO2 + OH
  k_f = 150000000 * exp(-(11875.9133129914) * invT);
  qf[126] *= k_f;
  qr[126] *= k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[14] - g_RT[15]));
  // reaction 120:  CH2O + HO2 <=> H2O2 + HCO
  k_f = 1000000 * exp(-(4025.73332643776) * invT);
  qf[127] *= k_f;
  qr[127] *= k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[16] + g_RT[17]));
  // reaction 121:  C + O2 <=> CO + O
  k_f = 58000000 * exp(-(289.852799503519) * invT);
  qf[128] *= k_f;
  qr[128] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[8] - g_RT[14]));
  // reaction 122:  C + CH2 <=> C2H + H
  k_f = 50000000;
  qf[129] *= k_f;
  qr[129] *= k_f * exp(-(-g_RT[1] + g_RT[8] + g_RT[10] - g_RT[21]));
  // reaction 123:  C + CH3 <=> C2H2 + H
  k_f = 50000000;
  qf[130] *= k_f;
  qr[130] *= k_f * exp(-(-g_RT[1] + g_RT[8] + g_RT[12] - g_RT[22]));
  // reaction 124:  CH + O2 <=> HCO + O
  k_f = 33000000;
  qf[131] *= k_f;
  qr[131] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[9] - g_RT[16]));
  // reaction 125:  CH + H2 <=> CH2 + H
  k_f = 110.7 * exp((1.79) * tc[0] - (840.371831893882) * invT);
  qf[132] *= k_f;
  qr[132] *= k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[9] - g_RT[10]));
  // reaction 126:  CH + H2O <=> CH2O + H
  k_f = 5710000 * exp(-(-379.928582682563) * invT);
  qf[133] *= k_f;
  qr[133] *= k_f * exp(-(-g_RT[1] + g_RT[5] + g_RT[9] - g_RT[17]));
  // reaction 127:  CH + CH2 <=> C2H2 + H
  k_f = 40000000;
  qf[134] *= k_f;
  qr[134] *= k_f * exp(-(-g_RT[1] + g_RT[9] + g_RT[10] - g_RT[22]));
  // reaction 128:  CH + CH3 <=> C2H3 + H
  k_f = 30000000;
  qf[135] *= k_f;
  qr[135] *= k_f * exp(-(-g_RT[1] + g_RT[9] + g_RT[12] - g_RT[23]));
  // reaction 129:  CH + CH4 <=> C2H4 + H
  k_f = 60000000;
  qf[136] *= k_f;
  qr[136] *= k_f * exp(-(-g_RT[1] + g_RT[9] + g_RT[13] - g_RT[24]));
  // reaction 130:  CH + CO (+M) <=> HCCO (+M)
  k_f = 50000000;
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[31];
  redP = Corr / k_f * 2.69e+16 * exp(-3.74 * tc[0] - (974.227464997937) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.4243) * exp(-tc[1] * 0.00421940928270042) +
    0.5757 * exp(-tc[1] * 0.000605326876513317) + exp(-5069 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[15] *= Corr * k_f;
  qr[15] *= Corr * k_f * exp(-(g_RT[9] + g_RT[14] - g_RT[27])) * (refC);
  // reaction 131:  CH + CO2 <=> CO + HCO
  k_f = 3400000 * exp(-(347.219499405257) * invT);
  qf[137] *= k_f;
  qr[137] *= k_f * exp(-(g_RT[9] - g_RT[14] + g_RT[15] - g_RT[16]));
  // reaction 132:  CH + CH2O <=> CH2CO + H
  k_f = 94600000 * exp(-(-259.156582889431) * invT);
  qf[138] *= k_f;
  qr[138] *= k_f * exp(-(-g_RT[1] + g_RT[9] + g_RT[17] - g_RT[28]));
  // reaction 133:  CH + HCCO <=> C2H2 + CO
  k_f = 50000000;
  qf[139] *= k_f;
  qr[139] *= k_f * exp(-(g_RT[9] - g_RT[14] - g_RT[22] + g_RT[27]));
  // reaction 134:  CH2 + O2 <=> HCO + OH
  k_f = 13200000 * exp(-(754.82499870708) * invT);
  qf[140] *= k_f;
  qr[140] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[10] - g_RT[16]));
  // reaction 135:  CH2 + H2 <=> CH3 + H
  k_f = 0.5 * exp((2) * tc[0] - (3638.25649376812) * invT);
  qf[141] *= k_f;
  qr[141] *= k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[10] - g_RT[12]));
  // reaction 136:  2 CH2 <=> C2H2 + H2
  k_f = 32000000;
  qf[142] *= k_f;
  qr[142] *= k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[10] - g_RT[22]));
  // reaction 137:  CH2 + CH3 <=> C2H4 + H
  k_f = 40000000;
  qf[143] *= k_f;
  qr[143] *= k_f * exp(-(-g_RT[1] + g_RT[10] + g_RT[12] - g_RT[24]));
  // reaction 138:  CH2 + CH4 <=> 2 CH3
  k_f = 2.46 * exp((2) * tc[0] - (4161.60182620503) * invT);
  qf[144] *= k_f;
  qr[144] *= k_f * exp(-(g_RT[10] - 2.000000 * g_RT[12] + g_RT[13]));
  // reaction 139:  CH2 + CO (+M) <=> CH2CO (+M)
  k_f = 810000 * exp((0.5) * tc[0] - (2269.50716277929) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[31];
  redP = Corr / k_f * 2.69e+21 * exp(-5.11 * tc[0] - (3570.32224388449) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.4093) * exp(-tc[1] * 0.00363636363636364) +
    0.5907 * exp(-tc[1] * 0.000815660685154976) + exp(-5185 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[16] *= Corr * k_f;
  qr[16] *= Corr * k_f * exp(-(g_RT[10] + g_RT[14] - g_RT[28])) * (refC);
  // reaction 140:  CH2 + HCCO <=> C2H3 + CO
  k_f = 30000000;
  qf[145] *= k_f;
  qr[145] *= k_f * exp(-(g_RT[10] - g_RT[14] - g_RT[23] + g_RT[27]));
  // reaction 141:  CH2(S) + N2 <=> CH2 + N2
  k_f = 15000000 * exp(-(301.929999482832) * invT);
  qf[146] *= k_f;
  qr[146] *= k_f * exp(-(-g_RT[10] + g_RT[11] + g_RT[30] - g_RT[30]));
  // reaction 142:  AR + CH2(S) <=> AR + CH2
  k_f = 9000000 * exp(-(301.929999482832) * invT);
  qf[147] *= k_f;
  qr[147] *= k_f * exp(-(-g_RT[10] + g_RT[11] + g_RT[31] - g_RT[31]));
  // reaction 143:  CH2(S) + O2 <=> CO + H + OH
  k_f = 28000000;
  qf[148] *= k_f;
  qr[148] *= k_f * exp(-(-g_RT[1] + g_RT[3] - g_RT[4] + g_RT[11] - g_RT[14])) *
             (refCinv);
  // reaction 144:  CH2(S) + O2 <=> CO + H2O
  k_f = 12000000;
  qf[149] *= k_f;
  qr[149] *= k_f * exp(-(g_RT[3] - g_RT[5] + g_RT[11] - g_RT[14]));
  // reaction 145:  CH2(S) + H2 <=> CH3 + H
  k_f = 70000000;
  qf[150] *= k_f;
  qr[150] *= k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[11] - g_RT[12]));
  // reaction 146:  CH2(S) + H2O (+M) <=> CH3OH (+M)
  k_f = 20000000;
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26];
  redP = Corr / k_f * 2.7e+26 * exp(-6.3 * tc[0] - (1559.97166399463) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.8493) * exp(-tc[1] * 0.00746268656716418) +
    0.1507 * exp(-tc[1] * 0.000419639110365086) + exp(-7265 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[17] *= Corr * k_f;
  qr[17] *= Corr * k_f * exp(-(g_RT[5] + g_RT[11] - g_RT[20])) * (refC);
  // reaction 147:  CH2(S) + H2O <=> CH2 + H2O
  k_f = 30000000;
  qf[151] *= k_f;
  qr[151] *= k_f * exp(-(g_RT[5] - g_RT[5] - g_RT[10] + g_RT[11]));
  // reaction 148:  CH2(S) + CH3 <=> C2H4 + H
  k_f = 12000000 * exp(-(-286.83349950869) * invT);
  qf[152] *= k_f;
  qr[152] *= k_f * exp(-(-g_RT[1] + g_RT[11] + g_RT[12] - g_RT[24]));
  // reaction 149:  CH2(S) + CH4 <=> 2 CH3
  k_f = 16000000 * exp(-(-286.83349950869) * invT);
  qf[153] *= k_f;
  qr[153] *= k_f * exp(-(g_RT[11] - 2.000000 * g_RT[12] + g_RT[13]));
  // reaction 150:  CH2(S) + CO <=> CH2 + CO
  k_f = 9000000;
  qf[154] *= k_f;
  qr[154] *= k_f * exp(-(-g_RT[10] + g_RT[11] + g_RT[14] - g_RT[14]));
  // reaction 151:  CH2(S) + CO2 <=> CH2 + CO2
  k_f = 7000000;
  qf[155] *= k_f;
  qr[155] *= k_f * exp(-(-g_RT[10] + g_RT[11] + g_RT[15] - g_RT[15]));
  // reaction 152:  CH2(S) + CO2 <=> CH2O + CO
  k_f = 14000000;
  qf[156] *= k_f;
  qr[156] *= k_f * exp(-(g_RT[11] - g_RT[14] + g_RT[15] - g_RT[17]));
  // reaction 153:  C2H6 + CH2(S) <=> C2H5 + CH3
  k_f = 40000000 * exp(-(-276.769166192596) * invT);
  qf[157] *= k_f;
  qr[157] *= k_f * exp(-(g_RT[11] - g_RT[12] - g_RT[25] + g_RT[26]));
  // reaction 154:  CH3 + O2 <=> CH3O + O
  k_f = 26750000 * exp(-(14492.6399751759) * invT);
  qf[158] *= k_f;
  qr[158] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[12] - g_RT[19]));
  // reaction 155:  CH3 + O2 <=> CH2O + OH
  k_f = 36000 * exp(-(4498.75699229419) * invT);
  qf[159] *= k_f;
  qr[159] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[12] - g_RT[17]));
  // reaction 156:  CH3 + H2O2 <=> CH4 + HO2
  k_f = 0.0245 * exp((2.47) * tc[0] - (2606.66232886845) * invT);
  qf[160] *= k_f;
  qr[160] *= k_f * exp(-(-g_RT[6] + g_RT[7] + g_RT[12] - g_RT[13]));
  // reaction 157:  2 CH3 (+M) <=> C2H6 (+M)
  k_f = 21200000000 * exp((-0.97) * tc[0] - (311.994332798926) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[31];
  redP = Corr / k_f * 1.77e+38 * exp(-9.67 * tc[0] - (3130.00766130536) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.4675) * exp(-tc[1] * 0.00662251655629139) +
    0.5325 * exp(-tc[1] * 0.000963391136801541) + exp(-4970 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[18] *= Corr * k_f;
  qr[18] *= Corr * k_f * exp(-(2.000000 * g_RT[12] - g_RT[26])) * (refC);
  // reaction 158:  2 CH3 <=> C2H5 + H
  k_f = 4990000 * exp((0.1) * tc[0] - (5334.09665753003) * invT);
  qf[161] *= k_f;
  qr[161] *= k_f * exp(-(-g_RT[1] + 2.000000 * g_RT[12] - g_RT[25]));
  // reaction 159:  CH3 + HCO <=> CH4 + CO
  k_f = 26480000;
  qf[162] *= k_f;
  qr[162] *= k_f * exp(-(g_RT[12] - g_RT[13] - g_RT[14] + g_RT[16]));
  // reaction 160:  CH2O + CH3 <=> CH4 + HCO
  k_f = 0.00332 * exp((2.81) * tc[0] - (2948.84966161566) * invT);
  qf[163] *= k_f;
  qr[163] *= k_f * exp(-(g_RT[12] - g_RT[13] - g_RT[16] + g_RT[17]));
  // reaction 161:  CH3 + CH3OH <=> CH2OH + CH4
  k_f = 30 * exp((1.5) * tc[0] - (5001.97365809891) * invT);
  qf[164] *= k_f;
  qr[164] *= k_f * exp(-(g_RT[12] - g_RT[13] - g_RT[18] + g_RT[20]));
  // reaction 162:  CH3 + CH3OH <=> CH3O + CH4
  k_f = 10 * exp((1.5) * tc[0] - (5001.97365809891) * invT);
  qf[165] *= k_f;
  qr[165] *= k_f * exp(-(g_RT[12] - g_RT[13] - g_RT[19] + g_RT[20]));
  // reaction 163:  C2H4 + CH3 <=> C2H3 + CH4
  k_f = 0.227 * exp((2) * tc[0] - (4629.59332540342) * invT);
  qf[166] *= k_f;
  qr[166] *= k_f * exp(-(g_RT[12] - g_RT[13] - g_RT[23] + g_RT[24]));
  // reaction 164:  C2H6 + CH3 <=> C2H5 + CH4
  k_f = 6.14 * exp((1.74) * tc[0] - (5258.61415765932) * invT);
  qf[167] *= k_f;
  qr[167] *= k_f * exp(-(g_RT[12] - g_RT[13] - g_RT[25] + g_RT[26]));
  // reaction 165:  HCO + H2O <=> CO + H + H2O
  k_f = 2244000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
  qf[33] *= k_f;
  qr[33] *= k_f * exp(-(-g_RT[1] - g_RT[14] + g_RT[16])) * (refCinv);
  // reaction 166:  HCO + M <=> CO + H + M
  k_f = 187000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
  Corr = mixture + sc[0] + (-1) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26];
  qf[34] *= Corr * k_f;
  qr[34] *= Corr * k_f * exp(-(-g_RT[1] - g_RT[14] + g_RT[16])) * (refCinv);
  // reaction 167:  HCO + O2 <=> CO + HO2
  k_f = 7600000 * exp(-(201.286666321888) * invT);
  qf[168] *= k_f;
  qr[168] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[14] + g_RT[16]));
  // reaction 168:  CH2OH + O2 <=> CH2O + HO2
  k_f = 18000000 * exp(-(452.894999224248) * invT);
  qf[169] *= k_f;
  qr[169] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[17] + g_RT[18]));
  // reaction 169:  CH3O + O2 <=> CH2O + HO2
  k_f = 4.28e-19 * exp((7.6) * tc[0] - (-1776.35483029066) * invT);
  qf[170] *= k_f;
  qr[170] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[17] + g_RT[19]));
  // reaction 170:  C2H + O2 <=> CO + HCO
  k_f = 50000000 * exp(-(754.82499870708) * invT);
  qf[171] *= k_f;
  qr[171] *= k_f * exp(-(g_RT[3] - g_RT[14] - g_RT[16] + g_RT[21]));
  // reaction 171:  C2H + H2 <=> C2H2 + H
  k_f = 0.407 * exp((2.4) * tc[0] - (100.643333160944) * invT);
  qf[172] *= k_f;
  qr[172] *= k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[21] - g_RT[22]));
  // reaction 172:  C2H3 + O2 <=> CH2O + HCO
  k_f = 3980000 * exp(-(-120.771999793133) * invT);
  qf[173] *= k_f;
  qr[173] *= k_f * exp(-(g_RT[3] - g_RT[16] - g_RT[17] + g_RT[23]));
  // reaction 173:  C2H4 (+M) <=> C2H2 + H2 (+M)
  k_f = 8000000000000 * exp((0.44) * tc[0] - (44670.543423485) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[31];
  redP = Corr / k_f * 7e+44 * exp(-9.31 * tc[0] - (50251.2162472593) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2655) * exp(-tc[1] * 0.00555555555555556) +
    0.7345 * exp(-tc[1] * 0.000966183574879227) + exp(-5417 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[19] *= Corr * k_f;
  qr[19] *= Corr * k_f * exp(-(-g_RT[0] - g_RT[22] + g_RT[24])) * (refCinv);
  // reaction 174:  C2H5 + O2 <=> C2H4 + HO2
  k_f = 840000 * exp(-(1949.96457999329) * invT);
  qf[174] *= k_f;
  qr[174] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[24] + g_RT[25]));
  // reaction 175:  HCCO + O2 <=> 2 CO + OH
  k_f = 1600000 * exp(-(429.747032597231) * invT);
  qf[175] *= k_f;
  qr[175] *= k_f * exp(-(g_RT[3] - g_RT[4] - 2.000000 * g_RT[14] + g_RT[27])) *
             (refCinv);
  // reaction 176:  2 HCCO <=> C2H2 + 2 CO
  k_f = 10000000;
  qf[176] *= k_f;
  qr[176] *= k_f *
             exp(-(-2.000000 * g_RT[14] - g_RT[22] + 2.000000 * g_RT[27])) *
             (refCinv);
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
productionRate(amrex::Real* wdot, const amrex::Real* sc, const amrex::Real T)
{
  const amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  const amrex::Real invT = 1.0 / tc[1];

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1 / refC;

  for (int i = 0; i < 32; ++i) {
    wdot[i] = 0.0;
  }

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 32; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[32];
  gibbs(g_RT, tc);

  {
    // reaction 49:  CH2 + H (+M) <=> CH3 (+M)
    const amrex::Real k_f = 25000000000 * exp((-0.8) * tc[0]);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[31];
    const amrex::Real redP =
      Corr / k_f * 3.2e+15 * exp(-3.14 * tc[0] - 618.956498939805 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.32 * exp(-tc[1] * 0.0128205128205128) +
      0.68 * exp(-tc[1] * 0.00050125313283208) + exp(-5590 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[10]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[10] - g_RT[12])) * (refC) * (sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[10] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 51:  CH3 + H (+M) <=> CH4 (+M)
    const amrex::Real k_f =
      12700000000 * exp((-0.63) * tc[0] - (192.731983003208) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[31];
    const amrex::Real redP =
      Corr / k_f * 2.477e+21 * exp(-4.76 * tc[0] - 1227.84866456352 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.217 * exp(-tc[1] * 0.0135135135135135) +
      0.783 * exp(-tc[1] * 0.000340020401224073) + exp(-6964 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[12]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[12] - g_RT[13])) * (refC) * (sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 53:  H + HCO (+M) <=> CH2O (+M)
    const amrex::Real k_f =
      1090000 * exp((0.48) * tc[0] - (-130.836333109227) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[31];
    const amrex::Real redP =
      Corr / k_f * 1350000000000 * exp(-2.57 * tc[0] - 717.083748771726 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2176 * exp(-tc[1] * 0.003690036900369) +
      0.7824 * exp(-tc[1] * 0.000362976406533575) + exp(-6570 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[16]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[16] - g_RT[17])) * (refC) * (sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 55:  CH2O + H (+M) <=> CH2OH (+M)
    const amrex::Real k_f =
      540000 * exp((0.454) * tc[0] - (1811.57999689699) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26];
    const amrex::Real redP =
      Corr / k_f * 1.27e+20 * exp(-4.82 * tc[0] - 3286.00482770482 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2813 * exp(-tc[1] * 0.00970873786407767) +
      0.7187 * exp(-tc[1] * 0.000774593338497289) + exp(-4160 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[17]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[17] - g_RT[18])) * (refC) * (sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[17] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 56:  CH2O + H (+M) <=> CH3O (+M)
    const amrex::Real k_f =
      540000 * exp((0.454) * tc[0] - (1308.36333109227) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26];
    const amrex::Real redP =
      Corr / k_f * 2.2e+18 * exp(-4.8 * tc[0] - 2797.88466187424 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.242 * exp(-tc[1] * 0.0106382978723404) +
      0.758 * exp(-tc[1] * 0.000643086816720257) + exp(-4200 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[17]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[17] - g_RT[19])) * (refC) * (sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[17] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 58:  CH2OH + H (+M) <=> CH3OH (+M)
    const amrex::Real k_f = 18000000;
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26];
    const amrex::Real redP =
      Corr / k_f * 3e+19 * exp(-4.8 * tc[0] - 1660.61499715557 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2321 * exp(-tc[1] * 0.0029585798816568) +
      0.7679 * exp(-tc[1] * 0.000551876379690949) + exp(-5081 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[18]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[18] - g_RT[20])) * (refC) * (sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[18] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 62:  CH3O + H (+M) <=> CH3OH (+M)
    const amrex::Real k_f = 50000000;
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26];
    const amrex::Real redP =
      Corr / k_f * 8.6e+16 * exp(-4 * tc[0] - 1522.23041405928 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.1098 * exp(-tc[1] * 0.00694444444444444) +
      0.8902 * exp(-tc[1] * 0.000352360817477097) + exp(-45569 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[19]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[19] - g_RT[20])) * (refC) * (sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[19] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 69:  C2H + H (+M) <=> C2H2 (+M)
    const amrex::Real k_f = 100000000000 * exp((-1) * tc[0]);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[31];
    const amrex::Real redP =
      Corr / k_f * 3.75e+21 * exp(-4.8 * tc[0] - 956.111665028967 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.3536 * exp(-tc[1] * 0.00757575757575758) +
      0.6464 * exp(-tc[1] * 0.000760456273764259) + exp(-5566 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[21]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[21] - g_RT[22])) * (refC) * (sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[21] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 70:  C2H2 + H (+M) <=> C2H3 (+M)
    const amrex::Real k_f = 5600000 * exp(-(1207.71999793133) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[31];
    const amrex::Real redP =
      Corr / k_f * 3.8e+28 * exp(-7.27 * tc[0] - 3633.22432711008 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2493 * exp(-tc[1] * 0.0101522842639594) +
      0.7507 * exp(-tc[1] * 0.000768049155145929) + exp(-4167 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[22]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[22] - g_RT[23])) * (refC) * (sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[22] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 71:  C2H3 + H (+M) <=> C2H4 (+M)
    const amrex::Real k_f =
      6080000 * exp((0.27) * tc[0] - (140.900666425322) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[31];
    const amrex::Real redP =
      Corr / k_f * 1.4e+18 * exp(-3.86 * tc[0] - 1670.67933047167 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.218 * exp(-tc[1] * 0.00481927710843374) +
      0.782 * exp(-tc[1] * 0.000375516334960571) + exp(-6095 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[23]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[23] - g_RT[24])) * (refC) * (sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[23] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 73:  C2H4 + H (+M) <=> C2H5 (+M)
    const amrex::Real k_f =
      1080000 * exp((0.454) * tc[0] - (915.85433176459) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[31];
    const amrex::Real redP =
      Corr / k_f * 1.2e+30 * exp(-7.62 * tc[0] - 3507.4201606589 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.0247000000000001 * exp(-tc[1] * 0.00476190476190476) +
      0.9753 * exp(-tc[1] * 0.00101626016260163) + exp(-4374 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[24]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[24] - g_RT[25])) * (refC) * (sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[24] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 75:  C2H5 + H (+M) <=> C2H6 (+M)
    const amrex::Real k_f =
      521000000000 * exp((-0.99) * tc[0] - (795.082331971457) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[31];
    const amrex::Real redP =
      Corr / k_f * 1.99e+29 * exp(-7.08 * tc[0] - 3364.00341090455 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.1578 * exp(-tc[1] * 0.008) +
      0.8422 * exp(-tc[1] * 0.000450653447498873) + exp(-6882 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[25]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[25] - g_RT[26])) * (refC) * (sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[25] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 82:  CO + H2 (+M) <=> CH2O (+M)
    const amrex::Real k_f = 43 * exp((1.5) * tc[0] - (40056.0465980557) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[31];
    const amrex::Real redP =
      Corr / k_f * 5.07e+15 * exp(-3.42 * tc[0] - 42446.3257606281 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.0679999999999999 * exp(-tc[1] * 0.0050761421319797) +
      0.932 * exp(-tc[1] * 0.000649350649350649) + exp(-10300 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[0] * sc[14]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[0] + g_RT[14] - g_RT[17])) * (refC) * (sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[14] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 84:  2 OH (+M) <=> H2O2 (+M)
    const amrex::Real k_f = 74000000 * exp((-0.37) * tc[0]);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[31];
    const amrex::Real redP =
      Corr / k_f * 2300000 * exp(-0.9 * tc[0] - -855.468331868023 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2654 * exp(-tc[1] * 0.0106382978723404) +
      0.7346 * exp(-tc[1] * 0.000569476082004556) + exp(-5182 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * ((sc[4] * sc[4]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[4] - g_RT[7])) * (refC) * (sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= 2.000000 * qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 94:  CH3 + OH (+M) <=> CH3OH (+M)
    const amrex::Real k_f = 63000000;
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26];
    const amrex::Real redP =
      Corr / k_f * 2.7e+26 * exp(-6.3 * tc[0] - 1559.97166399463 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.7895 * exp(-tc[1] * 0.0119760479041916) +
      0.2105 * exp(-tc[1] * 0.000185253797702853) + exp(-8370 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[4] * sc[12]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[4] + g_RT[12] - g_RT[20])) * (refC) * (sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[12] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 130:  CH + CO (+M) <=> HCCO (+M)
    const amrex::Real k_f = 50000000;
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[31];
    const amrex::Real redP =
      Corr / k_f * 2.69e+16 * exp(-3.74 * tc[0] - 974.227464997937 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4243 * exp(-tc[1] * 0.00421940928270042) +
      0.5757 * exp(-tc[1] * 0.000605326876513317) + exp(-5069 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[9] * sc[14]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[9] + g_RT[14] - g_RT[27])) * (refC) * (sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[14] -= qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 139:  CH2 + CO (+M) <=> CH2CO (+M)
    const amrex::Real k_f =
      810000 * exp((0.5) * tc[0] - (2269.50716277929) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[31];
    const amrex::Real redP =
      Corr / k_f * 2.69e+21 * exp(-5.11 * tc[0] - 3570.32224388449 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4093 * exp(-tc[1] * 0.00363636363636364) +
      0.5907 * exp(-tc[1] * 0.000815660685154976) + exp(-5185 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[10] * sc[14]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[10] + g_RT[14] - g_RT[28])) * (refC) * (sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[14] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 146:  CH2(S) + H2O (+M) <=> CH3OH (+M)
    const amrex::Real k_f = 20000000;
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26];
    const amrex::Real redP =
      Corr / k_f * 2.7e+26 * exp(-6.3 * tc[0] - 1559.97166399463 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.8493 * exp(-tc[1] * 0.00746268656716418) +
      0.1507 * exp(-tc[1] * 0.000419639110365086) + exp(-7265 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[5] * sc[11]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[5] + g_RT[11] - g_RT[20])) * (refC) * (sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[11] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 157:  2 CH3 (+M) <=> C2H6 (+M)
    const amrex::Real k_f =
      21200000000 * exp((-0.97) * tc[0] - (311.994332798926) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[31];
    const amrex::Real redP =
      Corr / k_f * 1.77e+38 * exp(-9.67 * tc[0] - 3130.00766130536 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4675 * exp(-tc[1] * 0.00662251655629139) +
      0.5325 * exp(-tc[1] * 0.000963391136801541) + exp(-4970 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * ((sc[12] * sc[12]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[12] - g_RT[26])) * (refC) * (sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= 2.000000 * qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 173:  C2H4 (+M) <=> C2H2 + H2 (+M)
    const amrex::Real k_f =
      8000000000000 * exp((0.44) * tc[0] - (44670.543423485) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[31];
    const amrex::Real redP =
      Corr / k_f * 7e+44 * exp(-9.31 * tc[0] - 50251.2162472593 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2655 * exp(-tc[1] * 0.00555555555555556) +
      0.7345 * exp(-tc[1] * 0.000966183574879227) + exp(-5417 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[24]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[0] - g_RT[22] + g_RT[24])) *
                           (refCinv) * (sc[0] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[22] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 0:  2 O + M <=> O2 + M
    const amrex::Real k_f = 120000 * exp((-1) * tc[0]);
    const amrex::Real Corr = mixture + (1.4) * sc[0] + (14.4) * sc[5] + sc[13] +
                             (0.75) * sc[14] + (2.6) * sc[15] + (2) * sc[26] +
                             (-0.17) * sc[31];
    const amrex::Real qf = Corr * k_f * ((sc[2] * sc[2]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[2] - g_RT[3])) * (refC) * (sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= 2.000000 * qdot;
    wdot[3] += qdot;
  }

  {
    // reaction 1:  H + O + M <=> OH + M
    const amrex::Real k_f = 500000 * exp((-1) * tc[0]);
    const amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] +
                             (0.5) * sc[14] + sc[15] + (2) * sc[26] +
                             (-0.3) * sc[31];
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[2]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[2] - g_RT[4])) * (refC) * (sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 11:  CO + O + M <=> CO2 + M
    const amrex::Real k_f = 602 * exp(-(1509.64999741416) * invT);
    const amrex::Real Corr = mixture + sc[0] + (5) * sc[3] + (5) * sc[5] +
                             sc[13] + (0.5) * sc[14] + (2.5) * sc[15] +
                             (2) * sc[26] + (-0.5) * sc[31];
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[14]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[14] - g_RT[15])) * (refC) * (sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 32:  H + O2 + M <=> HO2 + M
    const amrex::Real k_f = 2800000 * exp((-0.86) * tc[0]);
    const amrex::Real Corr = mixture + (-1) * sc[3] + (-1) * sc[5] +
                             (-0.25) * sc[14] + (0.5) * sc[15] +
                             (0.5) * sc[26] + (-1) * sc[30] + (-1) * sc[31];
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[3]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC) * (sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 33:  H + O2 + O2 <=> HO2 + O2
    const amrex::Real k_f = 300000000 * exp((-1.72) * tc[0]);
    const amrex::Real qf = k_f * (sc[1] * (sc[3] * sc[3]));
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC) * (sc[3] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 34:  H + O2 + H2O <=> HO2 + H2O
    const amrex::Real k_f = 9380000 * exp((-0.76) * tc[0]);
    const amrex::Real qf = k_f * (sc[1] * sc[3] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC) * (sc[5] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 35:  H + O2 + N2 <=> HO2 + N2
    const amrex::Real k_f = 375000000 * exp((-1.72) * tc[0]);
    const amrex::Real qf = k_f * (sc[1] * sc[3] * sc[30]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC) * (sc[6] * sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 36:  H + O2 + AR <=> HO2 + AR
    const amrex::Real k_f = 700000 * exp((-0.8) * tc[0]);
    const amrex::Real qf = k_f * (sc[1] * sc[3] * sc[31]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC) * (sc[6] * sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 38:  2 H + M <=> H2 + M
    const amrex::Real k_f = 1000000 * exp((-1) * tc[0]);
    const amrex::Real Corr = mixture + (-1) * sc[0] + (-1) * sc[5] + sc[13] +
                             (-1) * sc[15] + (2) * sc[26] + (-0.37) * sc[31];
    const amrex::Real qf = Corr * k_f * ((sc[1] * sc[1]));
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC) * (sc[0]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= 2.000000 * qdot;
  }

  {
    // reaction 39:  2 H + H2 <=> H2 + H2
    const amrex::Real k_f = 90000 * exp((-0.6) * tc[0]);
    const amrex::Real qf = k_f * (sc[0] * (sc[1] * sc[1]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC) * ((sc[0] * sc[0]));
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= 2.000000 * qdot;
  }

  {
    // reaction 40:  2 H + H2O <=> H2 + H2O
    const amrex::Real k_f = 60000000 * exp((-1.25) * tc[0]);
    const amrex::Real qf = k_f * ((sc[1] * sc[1]) * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC) * (sc[0] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= 2.000000 * qdot;
  }

  {
    // reaction 41:  2 H + CO2 <=> H2 + CO2
    const amrex::Real k_f = 550000000 * exp((-2) * tc[0]);
    const amrex::Real qf = k_f * ((sc[1] * sc[1]) * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC) * (sc[0] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= 2.000000 * qdot;
  }

  {
    // reaction 42:  H + OH + M <=> H2O + M
    const amrex::Real k_f = 22000000000 * exp((-2) * tc[0]);
    const amrex::Real Corr = mixture + (-0.27) * sc[0] + (2.65) * sc[5] +
                             sc[13] + (2) * sc[26] + (-0.62) * sc[31];
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[4]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[4] - g_RT[5])) * (refC) * (sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 165:  HCO + H2O <=> CO + H + H2O
    const amrex::Real k_f =
      2244000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[16]);
    const amrex::Real qr = k_f * exp(-(-g_RT[1] - g_RT[14] + g_RT[16])) *
                           (refCinv) * (sc[1] * sc[5] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[14] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 166:  HCO + M <=> CO + H + M
    const amrex::Real k_f =
      187000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
    const amrex::Real Corr = mixture + sc[0] + (-1) * sc[5] + sc[13] +
                             (0.5) * sc[14] + sc[15] + (2) * sc[26];
    const amrex::Real qf = Corr * k_f * (sc[16]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[1] - g_RT[14] + g_RT[16])) *
                           (refCinv) * (sc[1] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[14] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 2:  H2 + O <=> H + OH
    const amrex::Real k_f =
      0.05 * exp((2.67) * tc[0] - (3165.23282791169) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[2]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[2] - g_RT[4])) * (sc[1] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 3:  HO2 + O <=> O2 + OH
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[2] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[4] + g_RT[6])) * (sc[3] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[4] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 4:  H2O2 + O <=> HO2 + OH
    const amrex::Real k_f = 9.63 * exp((2) * tc[0] - (2012.86666321888) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[6] + g_RT[7])) * (sc[4] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 5:  CH + O <=> CO + H
    const amrex::Real k_f = 57000000;
    const amrex::Real qf = k_f * (sc[2] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[9] - g_RT[14])) * (sc[1] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[9] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 6:  CH2 + O <=> H + HCO
    const amrex::Real k_f = 80000000;
    const amrex::Real qf = k_f * (sc[2] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[10] - g_RT[16])) * (sc[1] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[10] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 7:  CH2(S) + O <=> CO + H2
    const amrex::Real k_f = 15000000;
    const amrex::Real qf = k_f * (sc[2] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[11] - g_RT[14])) * (sc[0] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[11] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 8:  CH2(S) + O <=> H + HCO
    const amrex::Real k_f = 15000000;
    const amrex::Real qf = k_f * (sc[2] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[11] - g_RT[16])) * (sc[1] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[11] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 9:  CH3 + O <=> CH2O + H
    const amrex::Real k_f = 84300000;
    const amrex::Real qf = k_f * (sc[2] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[12] - g_RT[17])) * (sc[1] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[12] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 10:  CH4 + O <=> CH3 + OH
    const amrex::Real k_f =
      1020 * exp((1.5) * tc[0] - (4327.66332592059) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[12] + g_RT[13])) * (sc[4] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 12:  HCO + O <=> CO + OH
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[2] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[14] + g_RT[16])) * (sc[4] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[14] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 13:  HCO + O <=> CO2 + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[2] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[15] + g_RT[16])) * (sc[1] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 14:  CH2O + O <=> HCO + OH
    const amrex::Real k_f = 39000000 * exp(-(1781.38699694871) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[16] + g_RT[17])) * (sc[4] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[16] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 15:  CH2OH + O <=> CH2O + OH
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[2] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[17] + g_RT[18])) * (sc[4] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[17] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 16:  CH3O + O <=> CH2O + OH
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[2] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[17] + g_RT[19])) * (sc[4] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[17] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 17:  CH3OH + O <=> CH2OH + OH
    const amrex::Real k_f =
      0.388 * exp((2.5) * tc[0] - (1559.97166399463) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[18] + g_RT[20])) * (sc[4] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[18] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 18:  CH3OH + O <=> CH3O + OH
    const amrex::Real k_f =
      0.13 * exp((2.5) * tc[0] - (2516.0833290236) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[19] + g_RT[20])) * (sc[4] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 19:  C2H + O <=> CH + CO
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[2] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[9] - g_RT[14] + g_RT[21])) * (sc[9] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[9] += qdot;
    wdot[14] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 20:  C2H2 + O <=> H + HCCO
    const amrex::Real k_f = 10.2 * exp((2) * tc[0] - (956.111665028967) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[22] - g_RT[27])) * (sc[1] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[22] -= qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 21:  C2H2 + O <=> C2H + OH
    const amrex::Real k_f =
      46000000000000 * exp((-1.41) * tc[0] - (14568.1224750466) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[21] + g_RT[22])) * (sc[4] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 22:  C2H2 + O <=> CH2 + CO
    const amrex::Real k_f = 10.2 * exp((2) * tc[0] - (956.111665028967) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[10] - g_RT[14] + g_RT[22])) *
                           (sc[10] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[10] += qdot;
    wdot[14] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 23:  C2H3 + O <=> CH2CO + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[2] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[23] - g_RT[28])) * (sc[1] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[23] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 24:  C2H4 + O <=> CH3 + HCO
    const amrex::Real k_f =
      19.2 * exp((1.83) * tc[0] - (110.707666477038) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[12] - g_RT[16] + g_RT[24])) *
                           (sc[12] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[12] += qdot;
    wdot[16] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 25:  C2H5 + O <=> CH2O + CH3
    const amrex::Real k_f = 132000000;
    const amrex::Real qf = k_f * (sc[2] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[12] - g_RT[17] + g_RT[25])) *
                           (sc[12] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[12] += qdot;
    wdot[17] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 26:  C2H6 + O <=> C2H5 + OH
    const amrex::Real k_f =
      89.8 * exp((1.92) * tc[0] - (2863.30282842885) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[25] + g_RT[26])) * (sc[4] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[25] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 27:  HCCO + O <=> 2 CO + H
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[2] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] - 2.000000 * g_RT[14] + g_RT[27])) *
      (refCinv) * (sc[1] * (sc[14] * sc[14]));
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[14] += 2.000000 * qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 28:  CH2CO + O <=> HCCO + OH
    const amrex::Real k_f = 10000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[27] + g_RT[28])) * (sc[4] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[27] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 29:  CH2CO + O <=> CH2 + CO2
    const amrex::Real k_f = 1750000 * exp(-(679.342498836372) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[28]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[10] - g_RT[15] + g_RT[28])) *
                           (sc[10] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[10] += qdot;
    wdot[15] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 30:  CO + O2 <=> CO2 + O
    const amrex::Real k_f = 2500000 * exp(-(24053.7566254656) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[14] - g_RT[15])) * (sc[2] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 31:  CH2O + O2 <=> HCO + HO2
    const amrex::Real k_f = 100000000 * exp(-(20128.6666321888) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[16] + g_RT[17])) * (sc[6] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[16] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 37:  H + O2 <=> O + OH
    const amrex::Real k_f = 83000000 * exp(-(7252.86180424342) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[3] - g_RT[4])) * (sc[2] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 43:  H + HO2 <=> H2O + O
    const amrex::Real k_f = 3970000 * exp(-(337.658382754967) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[5] + g_RT[6])) * (sc[2] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 44:  H + HO2 <=> H2 + O2
    const amrex::Real k_f = 28000000 * exp(-(537.435399079441) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[3] + g_RT[6])) * (sc[0] * sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[3] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 45:  H + HO2 <=> 2 OH
    const amrex::Real k_f = 134000000 * exp(-(319.542582785997) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - 2.000000 * g_RT[4] + g_RT[6])) * ((sc[4] * sc[4]));
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += 2.000000 * qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 46:  H + H2O2 <=> H2 + HO2
    const amrex::Real k_f = 12.1 * exp((2) * tc[0] - (2616.72666218454) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[6] + g_RT[7])) * (sc[0] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 47:  H + H2O2 <=> H2O + OH
    const amrex::Real k_f = 10000000 * exp(-(1811.57999689699) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[5] + g_RT[7])) * (sc[4] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[5] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 48:  CH + H <=> C + H2
    const amrex::Real k_f = 110000000;
    const amrex::Real qf = k_f * (sc[1] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[8] + g_RT[9])) * (sc[0] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[8] += qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 50:  CH2(S) + H <=> CH + H2
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[1] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[9] + g_RT[11])) * (sc[0] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[9] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 52:  CH4 + H <=> CH3 + H2
    const amrex::Real k_f =
      660 * exp((1.62) * tc[0] - (5454.86865732316) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[12] + g_RT[13])) * (sc[0] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 54:  H + HCO <=> CO + H2
    const amrex::Real k_f = 73400000;
    const amrex::Real qf = k_f * (sc[1] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[14] + g_RT[16])) * (sc[0] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[14] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 57:  CH2O + H <=> H2 + HCO
    const amrex::Real k_f =
      23000 * exp((1.05) * tc[0] - (1648.03458051046) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[16] + g_RT[17])) * (sc[0] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[16] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 59:  CH2OH + H <=> CH2O + H2
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[1] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[17] + g_RT[18])) * (sc[0] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[17] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 60:  CH2OH + H <=> CH3 + OH
    const amrex::Real k_f = 12000000;
    const amrex::Real qf = k_f * (sc[1] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[12] + g_RT[18])) * (sc[4] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[12] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 61:  CH2OH + H <=> CH2(S) + H2O
    const amrex::Real k_f = 6000000;
    const amrex::Real qf = k_f * (sc[1] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[11] + g_RT[18])) * (sc[5] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[11] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 63:  CH3O + H <=> CH2OH + H
    const amrex::Real k_f = 3.4 * exp((1.6) * tc[0]);
    const amrex::Real qf = k_f * (sc[1] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[1] - g_RT[18] + g_RT[19])) * (sc[1] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[1] += qdot;
    wdot[18] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 64:  CH3O + H <=> CH2O + H2
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[1] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[17] + g_RT[19])) * (sc[0] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[17] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 65:  CH3O + H <=> CH3 + OH
    const amrex::Real k_f = 32000000;
    const amrex::Real qf = k_f * (sc[1] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[12] + g_RT[19])) * (sc[4] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[12] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 66:  CH3O + H <=> CH2(S) + H2O
    const amrex::Real k_f = 16000000;
    const amrex::Real qf = k_f * (sc[1] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[11] + g_RT[19])) * (sc[5] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[11] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 67:  CH3OH + H <=> CH2OH + H2
    const amrex::Real k_f = 17 * exp((2.1) * tc[0] - (2450.66516246898) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[18] + g_RT[20])) * (sc[0] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[18] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 68:  CH3OH + H <=> CH3O + H2
    const amrex::Real k_f =
      4.2 * exp((2.1) * tc[0] - (2450.66516246898) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[19] + g_RT[20])) * (sc[0] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 72:  C2H3 + H <=> C2H2 + H2
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[1] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[22] + g_RT[23])) * (sc[0] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[22] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 74:  C2H4 + H <=> C2H3 + H2
    const amrex::Real k_f =
      1.325 * exp((2.53) * tc[0] - (6159.37198944977) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[23] + g_RT[24])) * (sc[0] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 76:  C2H5 + H <=> C2H4 + H2
    const amrex::Real k_f = 2000000;
    const amrex::Real qf = k_f * (sc[1] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[24] + g_RT[25])) * (sc[0] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[24] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 77:  C2H6 + H <=> C2H5 + H2
    const amrex::Real k_f =
      115 * exp((1.9) * tc[0] - (3789.22149350954) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[25] + g_RT[26])) * (sc[0] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[25] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 78:  H + HCCO <=> CH2(S) + CO
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[1] * sc[27]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[11] - g_RT[14] + g_RT[27])) *
                           (sc[11] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[11] += qdot;
    wdot[14] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 79:  CH2CO + H <=> H2 + HCCO
    const amrex::Real k_f = 50000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[27] + g_RT[28])) * (sc[0] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[27] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 80:  CH2CO + H <=> CH3 + CO
    const amrex::Real k_f = 11300000 * exp(-(1725.02673037858) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[28]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[12] - g_RT[14] + g_RT[28])) *
                           (sc[12] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[12] += qdot;
    wdot[14] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 81:  H + HCCOH <=> CH2CO + H
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[1] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[1] - g_RT[28] + g_RT[29])) * (sc[1] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[1] += qdot;
    wdot[28] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 83:  H2 + OH <=> H + H2O
    const amrex::Real k_f =
      216 * exp((1.51) * tc[0] - (1726.03316371019) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[4] - g_RT[5])) * (sc[1] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 85:  2 OH <=> H2O + O
    const amrex::Real k_f =
      0.0357 * exp((2.4) * tc[0] - (-1061.78716484796) * invT);
    const amrex::Real qf = k_f * ((sc[4] * sc[4]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + 2.000000 * g_RT[4] - g_RT[5])) * (sc[2] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= 2.000000 * qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 86:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f = 29000000 * exp(-(-251.60833290236) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[5] + g_RT[6])) * (sc[3] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 87:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f = 1750000 * exp(-(161.02933305751) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7])) * (sc[5] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 88:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f = 580000000 * exp(-(4810.75132509312) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7])) * (sc[5] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 89:  C + OH <=> CO + H
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[4] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[8] - g_RT[14])) * (sc[1] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[8] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 90:  CH + OH <=> H + HCO
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[4] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[9] - g_RT[16])) * (sc[1] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[9] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 91:  CH2 + OH <=> CH2O + H
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[4] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[10] - g_RT[17])) * (sc[1] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[10] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 92:  CH2 + OH <=> CH + H2O
    const amrex::Real k_f = 11.3 * exp((2) * tc[0] - (1509.64999741416) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[9] + g_RT[10])) * (sc[5] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[9] += qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 93:  CH2(S) + OH <=> CH2O + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[4] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[11] - g_RT[17])) * (sc[1] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[11] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 95:  CH3 + OH <=> CH2 + H2O
    const amrex::Real k_f = 56 * exp((1.6) * tc[0] - (2727.43432866158) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[10] + g_RT[12])) * (sc[5] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[10] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 96:  CH3 + OH <=> CH2(S) + H2O
    const amrex::Real k_f = 25010000;
    const amrex::Real qf = k_f * (sc[4] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[11] + g_RT[12])) * (sc[5] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[11] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 97:  CH4 + OH <=> CH3 + H2O
    const amrex::Real k_f =
      100 * exp((1.6) * tc[0] - (1570.03599731073) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[12] + g_RT[13])) * (sc[5] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 98:  CO + OH <=> CO2 + H
    const amrex::Real k_f =
      47.6 * exp((1.228) * tc[0] - (35.2251666063304) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[14] - g_RT[15])) * (sc[1] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 99:  HCO + OH <=> CO + H2O
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[4] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[14] + g_RT[16])) * (sc[5] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[14] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 100:  CH2O + OH <=> H2O + HCO
    const amrex::Real k_f =
      3430 * exp((1.18) * tc[0] - (-224.93784961471) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[16] + g_RT[17])) * (sc[5] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[16] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 101:  CH2OH + OH <=> CH2O + H2O
    const amrex::Real k_f = 5000000;
    const amrex::Real qf = k_f * (sc[4] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[17] + g_RT[18])) * (sc[5] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[17] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 102:  CH3O + OH <=> CH2O + H2O
    const amrex::Real k_f = 5000000;
    const amrex::Real qf = k_f * (sc[4] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[17] + g_RT[19])) * (sc[5] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[17] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 103:  CH3OH + OH <=> CH2OH + H2O
    const amrex::Real k_f =
      1.44 * exp((2) * tc[0] - (-422.701999275965) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[18] + g_RT[20])) * (sc[5] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[18] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 104:  CH3OH + OH <=> CH3O + H2O
    const amrex::Real k_f = 6.3 * exp((2) * tc[0] - (754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[19] + g_RT[20])) * (sc[5] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 105:  C2H + OH <=> H + HCCO
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[4] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[21] - g_RT[27])) * (sc[1] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[21] -= qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 106:  C2H2 + OH <=> CH2CO + H
    const amrex::Real k_f =
      2.18e-10 * exp((4.5) * tc[0] - (-503.21666580472) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[22] - g_RT[28])) * (sc[1] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[22] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 107:  C2H2 + OH <=> H + HCCOH
    const amrex::Real k_f =
      0.504 * exp((2.3) * tc[0] - (6793.42498836372) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[22] - g_RT[29])) * (sc[1] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[22] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 108:  C2H2 + OH <=> C2H + H2O
    const amrex::Real k_f = 33.7 * exp((2) * tc[0] - (7045.03332126608) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[21] + g_RT[22])) * (sc[5] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 109:  C2H2 + OH <=> CH3 + CO
    const amrex::Real k_f =
      4.83e-10 * exp((4) * tc[0] - (-1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[12] - g_RT[14] + g_RT[22])) *
                           (sc[12] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[12] += qdot;
    wdot[14] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 110:  C2H3 + OH <=> C2H2 + H2O
    const amrex::Real k_f = 5000000;
    const amrex::Real qf = k_f * (sc[4] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[22] + g_RT[23])) * (sc[5] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[22] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 111:  C2H4 + OH <=> C2H3 + H2O
    const amrex::Real k_f = 3.6 * exp((2) * tc[0] - (1258.0416645118) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[23] + g_RT[24])) * (sc[5] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 112:  C2H6 + OH <=> C2H5 + H2O
    const amrex::Real k_f =
      3.54 * exp((2.12) * tc[0] - (437.798499250106) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[25] + g_RT[26])) * (sc[5] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[25] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 113:  CH2CO + OH <=> H2O + HCCO
    const amrex::Real k_f = 7500000 * exp(-(1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[27] + g_RT[28])) * (sc[5] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[27] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 114:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f = 130000 * exp(-(-820.243165261693) * invT);
    const amrex::Real qf = k_f * ((sc[6] * sc[6]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[6] - g_RT[7])) * (sc[3] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[6] -= 2.000000 * qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 115:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f = 420000000 * exp(-(6038.59998965664) * invT);
    const amrex::Real qf = k_f * ((sc[6] * sc[6]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[6] - g_RT[7])) * (sc[3] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[6] -= 2.000000 * qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 116:  CH2 + HO2 <=> CH2O + OH
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[6] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[10] - g_RT[17])) * (sc[4] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[10] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 117:  CH3 + HO2 <=> CH4 + O2
    const amrex::Real k_f = 1000000;
    const amrex::Real qf = k_f * (sc[6] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[6] + g_RT[12] - g_RT[13])) * (sc[3] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[6] -= qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 118:  CH3 + HO2 <=> CH3O + OH
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[6] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[12] - g_RT[19])) * (sc[4] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[12] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 119:  CO + HO2 <=> CO2 + OH
    const amrex::Real k_f = 150000000 * exp(-(11875.9133129914) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[14] - g_RT[15])) * (sc[4] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 120:  CH2O + HO2 <=> H2O2 + HCO
    const amrex::Real k_f = 1000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[16] + g_RT[17])) * (sc[7] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[7] += qdot;
    wdot[16] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 121:  C + O2 <=> CO + O
    const amrex::Real k_f = 58000000 * exp(-(289.852799503519) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[8] - g_RT[14])) * (sc[2] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[8] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 122:  C + CH2 <=> C2H + H
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[8] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[8] + g_RT[10] - g_RT[21])) * (sc[1] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[8] -= qdot;
    wdot[10] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 123:  C + CH3 <=> C2H2 + H
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[8] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[8] + g_RT[12] - g_RT[22])) * (sc[1] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[8] -= qdot;
    wdot[12] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 124:  CH + O2 <=> HCO + O
    const amrex::Real k_f = 33000000;
    const amrex::Real qf = k_f * (sc[3] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[9] - g_RT[16])) * (sc[2] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[9] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 125:  CH + H2 <=> CH2 + H
    const amrex::Real k_f =
      110.7 * exp((1.79) * tc[0] - (840.371831893882) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[9] - g_RT[10])) * (sc[1] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 126:  CH + H2O <=> CH2O + H
    const amrex::Real k_f = 5710000 * exp(-(-379.928582682563) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[5] + g_RT[9] - g_RT[17])) * (sc[1] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[5] -= qdot;
    wdot[9] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 127:  CH + CH2 <=> C2H2 + H
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[9] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[9] + g_RT[10] - g_RT[22])) * (sc[1] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[9] -= qdot;
    wdot[10] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 128:  CH + CH3 <=> C2H3 + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[9] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[9] + g_RT[12] - g_RT[23])) * (sc[1] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[9] -= qdot;
    wdot[12] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 129:  CH + CH4 <=> C2H4 + H
    const amrex::Real k_f = 60000000;
    const amrex::Real qf = k_f * (sc[9] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[9] + g_RT[13] - g_RT[24])) * (sc[1] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[9] -= qdot;
    wdot[13] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 131:  CH + CO2 <=> CO + HCO
    const amrex::Real k_f = 3400000 * exp(-(347.219499405257) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[14] + g_RT[15] - g_RT[16])) *
                           (sc[14] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[14] += qdot;
    wdot[15] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 132:  CH + CH2O <=> CH2CO + H
    const amrex::Real k_f = 94600000 * exp(-(-259.156582889431) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[9] + g_RT[17] - g_RT[28])) * (sc[1] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[9] -= qdot;
    wdot[17] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 133:  CH + HCCO <=> C2H2 + CO
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[9] * sc[27]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[14] - g_RT[22] + g_RT[27])) *
                           (sc[14] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[14] += qdot;
    wdot[22] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 134:  CH2 + O2 <=> HCO + OH
    const amrex::Real k_f = 13200000 * exp(-(754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[10] - g_RT[16])) * (sc[4] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[10] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 135:  CH2 + H2 <=> CH3 + H
    const amrex::Real k_f = 0.5 * exp((2) * tc[0] - (3638.25649376812) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[10] - g_RT[12])) * (sc[1] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[10] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 136:  2 CH2 <=> C2H2 + H2
    const amrex::Real k_f = 32000000;
    const amrex::Real qf = k_f * ((sc[10] * sc[10]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + 2.000000 * g_RT[10] - g_RT[22])) *
                           (sc[0] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[10] -= 2.000000 * qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 137:  CH2 + CH3 <=> C2H4 + H
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[10] * sc[12]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[10] + g_RT[12] - g_RT[24])) *
                           (sc[1] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[10] -= qdot;
    wdot[12] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 138:  CH2 + CH4 <=> 2 CH3
    const amrex::Real k_f = 2.46 * exp((2) * tc[0] - (4161.60182620503) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - 2.000000 * g_RT[12] + g_RT[13])) *
                           ((sc[12] * sc[12]));
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[12] += 2.000000 * qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 140:  CH2 + HCCO <=> C2H3 + CO
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[10] * sc[27]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[14] - g_RT[23] + g_RT[27])) *
                           (sc[14] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[14] += qdot;
    wdot[23] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 141:  CH2(S) + N2 <=> CH2 + N2
    const amrex::Real k_f = 15000000 * exp(-(301.929999482832) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[30]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[11] + g_RT[30] - g_RT[30])) *
                           (sc[10] * sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[11] -= qdot;
    wdot[30] -= qdot;
    wdot[30] += qdot;
  }

  {
    // reaction 142:  AR + CH2(S) <=> AR + CH2
    const amrex::Real k_f = 9000000 * exp(-(301.929999482832) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[31]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[11] + g_RT[31] - g_RT[31])) *
                           (sc[10] * sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[11] -= qdot;
    wdot[31] -= qdot;
    wdot[31] += qdot;
  }

  {
    // reaction 143:  CH2(S) + O2 <=> CO + H + OH
    const amrex::Real k_f = 28000000;
    const amrex::Real qf = k_f * (sc[3] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[3] - g_RT[4] + g_RT[11] - g_RT[14])) *
      (refCinv) * (sc[1] * sc[4] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[11] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 144:  CH2(S) + O2 <=> CO + H2O
    const amrex::Real k_f = 12000000;
    const amrex::Real qf = k_f * (sc[3] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[5] + g_RT[11] - g_RT[14])) * (sc[5] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[5] += qdot;
    wdot[11] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 145:  CH2(S) + H2 <=> CH3 + H
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[0] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[11] - g_RT[12])) * (sc[1] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[11] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 147:  CH2(S) + H2O <=> CH2 + H2O
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[5] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[5] - g_RT[10] + g_RT[11])) * (sc[5] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[5] += qdot;
    wdot[10] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 148:  CH2(S) + CH3 <=> C2H4 + H
    const amrex::Real k_f = 12000000 * exp(-(-286.83349950869) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[12]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[11] + g_RT[12] - g_RT[24])) *
                           (sc[1] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[11] -= qdot;
    wdot[12] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 149:  CH2(S) + CH4 <=> 2 CH3
    const amrex::Real k_f = 16000000 * exp(-(-286.83349950869) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - 2.000000 * g_RT[12] + g_RT[13])) *
                           ((sc[12] * sc[12]));
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[12] += 2.000000 * qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 150:  CH2(S) + CO <=> CH2 + CO
    const amrex::Real k_f = 9000000;
    const amrex::Real qf = k_f * (sc[11] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[11] + g_RT[14] - g_RT[14])) *
                           (sc[10] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[11] -= qdot;
    wdot[14] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 151:  CH2(S) + CO2 <=> CH2 + CO2
    const amrex::Real k_f = 7000000;
    const amrex::Real qf = k_f * (sc[11] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[11] + g_RT[15] - g_RT[15])) *
                           (sc[10] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[11] -= qdot;
    wdot[15] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 152:  CH2(S) + CO2 <=> CH2O + CO
    const amrex::Real k_f = 14000000;
    const amrex::Real qf = k_f * (sc[11] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[14] + g_RT[15] - g_RT[17])) *
                           (sc[14] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[14] += qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 153:  C2H6 + CH2(S) <=> C2H5 + CH3
    const amrex::Real k_f = 40000000 * exp(-(-276.769166192596) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[26]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[12] - g_RT[25] + g_RT[26])) *
                           (sc[12] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[12] += qdot;
    wdot[25] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 154:  CH3 + O2 <=> CH3O + O
    const amrex::Real k_f = 26750000 * exp(-(14492.6399751759) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[12] - g_RT[19])) * (sc[2] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[12] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 155:  CH3 + O2 <=> CH2O + OH
    const amrex::Real k_f = 36000 * exp(-(4498.75699229419) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[12] - g_RT[17])) * (sc[4] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[12] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 156:  CH3 + H2O2 <=> CH4 + HO2
    const amrex::Real k_f =
      0.0245 * exp((2.47) * tc[0] - (2606.66232886845) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[7] + g_RT[12] - g_RT[13])) * (sc[6] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[7] -= qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 158:  2 CH3 <=> C2H5 + H
    const amrex::Real k_f =
      4990000 * exp((0.1) * tc[0] - (5334.09665753003) * invT);
    const amrex::Real qf = k_f * ((sc[12] * sc[12]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + 2.000000 * g_RT[12] - g_RT[25])) *
                           (sc[1] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[12] -= 2.000000 * qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 159:  CH3 + HCO <=> CH4 + CO
    const amrex::Real k_f = 26480000;
    const amrex::Real qf = k_f * (sc[12] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[13] - g_RT[14] + g_RT[16])) *
                           (sc[13] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[14] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 160:  CH2O + CH3 <=> CH4 + HCO
    const amrex::Real k_f =
      0.00332 * exp((2.81) * tc[0] - (2948.84966161566) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[17]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[13] - g_RT[16] + g_RT[17])) *
                           (sc[13] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[16] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 161:  CH3 + CH3OH <=> CH2OH + CH4
    const amrex::Real k_f = 30 * exp((1.5) * tc[0] - (5001.97365809891) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[13] - g_RT[18] + g_RT[20])) *
                           (sc[13] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[18] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 162:  CH3 + CH3OH <=> CH3O + CH4
    const amrex::Real k_f = 10 * exp((1.5) * tc[0] - (5001.97365809891) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[13] - g_RT[19] + g_RT[20])) *
                           (sc[13] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 163:  C2H4 + CH3 <=> C2H3 + CH4
    const amrex::Real k_f =
      0.227 * exp((2) * tc[0] - (4629.59332540342) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[13] - g_RT[23] + g_RT[24])) *
                           (sc[13] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 164:  C2H6 + CH3 <=> C2H5 + CH4
    const amrex::Real k_f =
      6.14 * exp((1.74) * tc[0] - (5258.61415765932) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[26]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[13] - g_RT[25] + g_RT[26])) *
                           (sc[13] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[25] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 167:  HCO + O2 <=> CO + HO2
    const amrex::Real k_f = 7600000 * exp(-(201.286666321888) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[14] + g_RT[16])) * (sc[6] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[14] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 168:  CH2OH + O2 <=> CH2O + HO2
    const amrex::Real k_f = 18000000 * exp(-(452.894999224248) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[17] + g_RT[18])) * (sc[6] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[17] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 169:  CH3O + O2 <=> CH2O + HO2
    const amrex::Real k_f =
      4.28e-19 * exp((7.6) * tc[0] - (-1776.35483029066) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[17] + g_RT[19])) * (sc[6] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[17] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 170:  C2H + O2 <=> CO + HCO
    const amrex::Real k_f = 50000000 * exp(-(754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[21]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[14] - g_RT[16] + g_RT[21])) *
                           (sc[14] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[14] += qdot;
    wdot[16] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 171:  C2H + H2 <=> C2H2 + H
    const amrex::Real k_f =
      0.407 * exp((2.4) * tc[0] - (100.643333160944) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[21] - g_RT[22])) * (sc[1] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[21] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 172:  C2H3 + O2 <=> CH2O + HCO
    const amrex::Real k_f = 3980000 * exp(-(-120.771999793133) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[16] - g_RT[17] + g_RT[23])) *
                           (sc[16] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[16] += qdot;
    wdot[17] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 174:  C2H5 + O2 <=> C2H4 + HO2
    const amrex::Real k_f = 840000 * exp(-(1949.96457999329) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[24] + g_RT[25])) * (sc[6] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[24] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 175:  HCCO + O2 <=> 2 CO + OH
    const amrex::Real k_f = 1600000 * exp(-(429.747032597231) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - 2.000000 * g_RT[14] + g_RT[27])) *
      (refCinv) * (sc[4] * (sc[14] * sc[14]));
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[14] += 2.000000 * qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 176:  2 HCCO <=> C2H2 + 2 CO
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * ((sc[27] * sc[27]));
    const amrex::Real qr =
      k_f * exp(-(-2.000000 * g_RT[14] - g_RT[22] + 2.000000 * g_RT[27])) *
      (refCinv) * ((sc[14] * sc[14]) * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += 2.000000 * qdot;
    wdot[22] += qdot;
    wdot[27] -= 2.000000 * qdot;
  }
}

// compute the production rate for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWC(const amrex::Real T, amrex::Real C[], amrex::Real wdot[])
{

  // convert to SI
  for (int id = 0; id < 32; ++id) {
    C[id] *= 1.0e6;
  }

  // convert to chemkin units
  productionRate(wdot, C, T);

  // convert to chemkin units
  for (int id = 0; id < 32; ++id) {
    C[id] *= 1.0e-6;
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[])
{
  amrex::Real c[32]; // temporary storage
  amrex::Real YOW = 0;
  amrex::Real PWORT;

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 32; i++) {
    YOW += y[i] * imw(i);
  }
  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // multiply by 1e6 so c goes to SI
  PWORT *= 1e6;
  // Now compute conversion (and go to SI)
  for (int i = 0; i < 32; i++) {
    c[i] = PWORT * y[i] * imw(i);
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 32; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[])
{
  amrex::Real c[32]; // temporary storage
  amrex::Real PORT =
    1e6 * P / (8.31446261815324e+07 * T); // 1e6 * P/RT so c goes to SI units

  // Compute conversion, see Eq 10
  for (int id = 0; id < 32; ++id) {
    c[id] = x[id] * PORT;
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 32; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[])
{
  amrex::Real c[32]; // temporary storage

  // See Eq 8 with an extra 1e6 so c goes to SI
  for (int i = 0; i < 32; i++) {
    c[i] = 1e6 * rho * y[i] * imw(i);
  }

  // call productionRate
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 32; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[])
{
  amrex::Real c[32];  // temporary storage
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 2.016000;   // H2
  XW += x[1] * 1.008000;   // H
  XW += x[2] * 15.999000;  // O
  XW += x[3] * 31.998000;  // O2
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 18.015000;  // H2O
  XW += x[6] * 33.006000;  // HO2
  XW += x[7] * 34.014000;  // H2O2
  XW += x[8] * 12.011000;  // C
  XW += x[9] * 13.019000;  // CH
  XW += x[10] * 14.027000; // CH2
  XW += x[11] * 14.027000; // CH2(S)
  XW += x[12] * 15.035000; // CH3
  XW += x[13] * 16.043000; // CH4
  XW += x[14] * 28.010000; // CO
  XW += x[15] * 44.009000; // CO2
  XW += x[16] * 29.018000; // HCO
  XW += x[17] * 30.026000; // CH2O
  XW += x[18] * 31.034000; // CH2OH
  XW += x[19] * 31.034000; // CH3O
  XW += x[20] * 32.042000; // CH3OH
  XW += x[21] * 25.030000; // C2H
  XW += x[22] * 26.038000; // C2H2
  XW += x[23] * 27.046000; // C2H3
  XW += x[24] * 28.054000; // C2H4
  XW += x[25] * 29.062000; // C2H5
  XW += x[26] * 30.070000; // C2H6
  XW += x[27] * 41.029000; // HCCO
  XW += x[28] * 42.037000; // CH2CO
  XW += x[29] * 42.037000; // HCCOH
  XW += x[30] * 28.014000; // N2
  XW += x[31] * 39.950000; // AR
  // Extra 1e6 factor to take c to SI
  ROW = 1e6 * rho / XW;

  // Compute conversion, see Eq 11
  for (int id = 0; id < 32; ++id) {
    c[id] = x[id] * ROW;
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 32; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

//  species unit charge number
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRG(int kcharge[])
{
  kcharge[0] = 0;  // H2
  kcharge[1] = 0;  // H
  kcharge[2] = 0;  // O
  kcharge[3] = 0;  // O2
  kcharge[4] = 0;  // OH
  kcharge[5] = 0;  // H2O
  kcharge[6] = 0;  // HO2
  kcharge[7] = 0;  // H2O2
  kcharge[8] = 0;  // C
  kcharge[9] = 0;  // CH
  kcharge[10] = 0; // CH2
  kcharge[11] = 0; // CH2(S)
  kcharge[12] = 0; // CH3
  kcharge[13] = 0; // CH4
  kcharge[14] = 0; // CO
  kcharge[15] = 0; // CO2
  kcharge[16] = 0; // HCO
  kcharge[17] = 0; // CH2O
  kcharge[18] = 0; // CH2OH
  kcharge[19] = 0; // CH3O
  kcharge[20] = 0; // CH3OH
  kcharge[21] = 0; // C2H
  kcharge[22] = 0; // C2H2
  kcharge[23] = 0; // C2H3
  kcharge[24] = 0; // C2H4
  kcharge[25] = 0; // C2H5
  kcharge[26] = 0; // C2H6
  kcharge[27] = 0; // HCCO
  kcharge[28] = 0; // CH2CO
  kcharge[29] = 0; // HCCOH
  kcharge[30] = 0; // N2
  kcharge[31] = 0; // AR
}

//  species charge per unit mass
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRGMASS(amrex::Real zk[])
{

  int kchrg[32];
  CKCHRG(kchrg);

  for (int id = 0; id < 32; ++id) {
    zk[id] = 6.02214076e+23 * 1.60217663e-19 * kchrg[id] * imw(id);
  }
}

// compute d(Cp/R)/dT and d(Cv/R)/dT at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
dcvpRdT(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +7.98052075e-03 - 3.89563020e-05 * tc[1] +
                 6.04716282e-08 * tc[2] - 2.95044704e-11 * tc[3];
    // species 1: H
    species[1] = +7.05332819e-13 - 3.99183928e-15 * tc[1] +
                 6.90244896e-18 * tc[2] - 3.71092933e-21 * tc[3];
    // species 2: O
    species[2] = -3.27931884e-03 + 1.32861279e-05 * tc[1] -
                 1.83841987e-08 * tc[2] + 8.45063884e-12 * tc[3];
    // species 3: O2
    species[3] = -2.99673416e-03 + 1.96946040e-05 * tc[1] -
                 2.90438853e-08 * tc[2] + 1.29749135e-11 * tc[3];
    // species 4: OH
    species[4] = -2.40131752e-03 + 9.23587682e-06 * tc[1] -
                 1.16434000e-08 * tc[2] + 5.45645880e-12 * tc[3];
    // species 5: H2O
    species[5] = -2.03643410e-03 + 1.30408042e-05 * tc[1] -
                 1.64639119e-08 * tc[2] + 7.08791268e-12 * tc[3];
    // species 6: HO2
    species[6] = -4.74912051e-03 + 4.23165782e-05 * tc[1] -
                 7.28291682e-08 * tc[2] + 3.71690050e-11 * tc[3];
    // species 7: H2O2
    species[7] = -5.42822417e-04 + 3.34671402e-05 * tc[1] -
                 6.47312439e-08 * tc[2] + 3.44981745e-11 * tc[3];
    // species 8: C
    species[8] = -3.21537724e-04 + 1.46758449e-06 * tc[1] -
                 2.19670467e-09 * tc[2] + 1.06608578e-12 * tc[3];
    // species 9: CH
    species[9] = +3.23835541e-04 - 3.37798130e-06 * tc[1] +
                 9.48651981e-09 * tc[2] - 5.62436268e-12 * tc[3];
    // species 10: CH2
    species[10] = +9.68872143e-04 + 5.58979682e-06 * tc[1] -
                  1.15527346e-08 * tc[2] + 6.74966876e-12 * tc[3];
    // species 11: CH2(S)
    species[11] = -2.36661419e-03 + 1.64659244e-05 * tc[1] -
                  2.00644794e-08 * tc[2] + 7.77258948e-12 * tc[3];
    // species 12: CH3
    species[12] = +2.01095175e-03 + 1.14604371e-05 * tc[1] -
                  2.06135228e-08 * tc[2] + 1.01754294e-11 * tc[3];
    // species 13: CH4
    species[13] = -1.36709788e-02 + 9.83601198e-05 * tc[1] -
                  1.45422908e-07 * tc[2] + 6.66775824e-11 * tc[3];
    // species 14: CO
    species[14] = -6.10353680e-04 + 2.03362866e-06 * tc[1] +
                  2.72101765e-09 * tc[2] - 3.61769800e-12 * tc[3];
    // species 15: CO2
    species[15] = +8.98459677e-03 - 1.42471254e-05 * tc[1] +
                  7.37757066e-09 * tc[2] - 5.74798192e-13 * tc[3];
    // species 16: HCO
    species[16] = -3.24392532e-03 + 2.75598892e-05 * tc[1] -
                  3.99432279e-08 * tc[2] + 1.73507546e-11 * tc[3];
    // species 17: CH2O
    species[17] = -9.90833369e-03 + 7.46440016e-05 * tc[1] -
                  1.13785578e-07 * tc[2] + 5.27090608e-11 * tc[3];
    // species 18: CH2OH
    species[18] = +5.59672304e-03 + 1.18654358e-05 * tc[1] -
                  3.13596036e-08 * tc[2] + 1.74786911e-11 * tc[3];
    // species 19: CH3O
    species[19] = +7.21659500e-03 + 1.06769440e-05 * tc[1] -
                  2.21329080e-08 * tc[2] + 8.30244000e-12 * tc[3];
    // species 20: CH3OH
    species[20] = -1.52309129e-02 + 1.30488231e-04 * tc[1] -
                  2.13242067e-07 * tc[2] + 1.04541079e-10 * tc[3];
    // species 21: C2H
    species[21] = +1.34099611e-02 - 5.69539002e-05 * tc[1] +
                  8.84373135e-08 * tc[2] - 4.37326044e-11 * tc[3];
    // species 22: C2H2
    species[22] = +2.33615629e-02 - 7.10343630e-05 * tc[1] +
                  8.40457311e-08 * tc[2] - 3.40029190e-11 * tc[3];
    // species 23: C2H3
    species[23] = +1.51479162e-03 + 5.18418824e-05 * tc[1] -
                  1.07297354e-07 * tc[2] + 5.88603492e-11 * tc[3];
    // species 24: C2H4
    species[24] = -7.57052247e-03 + 1.14198058e-04 * tc[1] -
                  2.07476626e-07 * tc[2] + 1.07953749e-10 * tc[3];
    // species 25: C2H5
    species[25] = -4.18658892e-03 + 9.94285614e-05 * tc[1] -
                  1.79737982e-07 * tc[2] + 9.22036016e-11 * tc[3];
    // species 26: C2H6
    species[26] = -5.50154270e-03 + 1.19887658e-04 * tc[1] -
                  2.12539886e-07 * tc[2] + 1.07474308e-10 * tc[3];
    // species 27: HCCO
    species[27] = +1.76550210e-02 - 4.74582020e-05 * tc[1] +
                  5.18272770e-08 * tc[2] - 2.02659244e-11 * tc[3];
    // species 28: CH2CO
    species[28] = +1.81188721e-02 - 3.47894948e-05 * tc[1] +
                  2.80319270e-08 * tc[2] - 8.05830460e-12 * tc[3];
    // species 29: HCCOH
    species[29] = +3.10722010e-02 - 1.01733728e-04 * tc[1] +
                  1.29411393e-07 * tc[2] - 5.60583760e-11 * tc[3];
    // species 30: N2
    species[30] = +1.40824040e-03 - 7.92644400e-06 * tc[1] +
                  1.69245450e-08 * tc[2] - 9.77941600e-12 * tc[3];
  } else {
    // species 0: H2
    species[0] = -4.94024731e-05 + 9.98913556e-07 * tc[1] -
                 5.38699182e-10 * tc[2] + 8.01021504e-14 * tc[3];
    // species 1: H
    species[1] = -2.30842973e-11 + 3.23123896e-14 * tc[1] -
                 1.42054571e-17 * tc[2] + 1.99278943e-21 * tc[3];
    // species 2: O
    species[2] = -8.59741137e-05 + 8.38969178e-08 * tc[1] -
                 3.00533397e-11 * tc[2] + 4.91334764e-15 * tc[3];
    // species 3: O2
    species[3] = +1.48308754e-03 - 1.51593334e-06 * tc[1] +
                 6.28411665e-10 * tc[2] - 8.66871176e-14 * tc[3];
    // species 4: OH
    species[4] = +5.48429716e-04 + 2.53010456e-07 * tc[1] -
                 2.63838467e-10 * tc[2] + 4.69649504e-14 * tc[3];
    // species 5: H2O
    species[5] = +2.17691804e-03 - 3.28145036e-07 * tc[1] -
                 2.91125961e-10 * tc[2] + 6.72803968e-14 * tc[3];
    // species 6: HO2
    species[6] = +2.23982013e-03 - 1.26731630e-06 * tc[1] +
                 3.42739110e-10 * tc[2] - 4.31634140e-14 * tc[3];
    // species 7: H2O2
    species[7] = +4.90831694e-03 - 3.80278450e-06 * tc[1] +
                 1.11355796e-09 * tc[2] - 1.15163322e-13 * tc[3];
    // species 8: C
    species[8] = +4.79889284e-05 - 1.44867004e-07 * tc[1] +
                 1.12287309e-10 * tc[2] - 1.94911157e-14 * tc[3];
    // species 9: CH
    species[9] = +9.70913681e-04 + 2.88891310e-07 * tc[1] -
                 3.92063547e-10 * tc[2] + 7.04317532e-14 * tc[3];
    // species 10: CH2
    species[10] = +3.65639292e-03 - 2.81789194e-06 * tc[1] +
                  7.80538647e-10 * tc[2] - 7.50910268e-14 * tc[3];
    // species 11: CH2(S)
    species[11] = +4.65588637e-03 - 4.02383894e-06 * tc[1] +
                  1.25371800e-09 * tc[2] - 1.35886546e-13 * tc[3];
    // species 12: CH3
    species[12] = +7.23990037e-03 - 5.97428696e-06 * tc[1] +
                  1.78705393e-09 * tc[2] - 1.86861758e-13 * tc[3];
    // species 13: CH4
    species[13] = +1.33909467e-02 - 1.14657162e-05 * tc[1] +
                  3.66877605e-09 * tc[2] - 4.07260920e-13 * tc[3];
    // species 14: CO
    species[14] = +2.06252743e-03 - 1.99765154e-06 * tc[1] +
                  6.90159024e-10 * tc[2] - 8.14590864e-14 * tc[3];
    // species 15: CO2
    species[15] = +4.41437026e-03 - 4.42962808e-06 * tc[1] +
                  1.57047056e-09 * tc[2] - 1.88833666e-13 * tc[3];
    // species 16: HCO
    species[16] = +4.95695526e-03 - 4.96891226e-06 * tc[1] +
                  1.76748533e-09 * tc[2] - 2.13403484e-13 * tc[3];
    // species 17: CH2O
    species[17] = +9.20000082e-03 - 8.84517626e-06 * tc[1] +
                  3.01923636e-09 * tc[2] - 3.53542256e-13 * tc[3];
    // species 18: CH2OH
    species[18] = +8.64576797e-03 - 7.50202240e-06 * tc[1] +
                  2.36170391e-09 * tc[2] - 2.59421680e-13 * tc[3];
    // species 19: CH3O
    species[19] = +7.87149700e-03 - 5.31276800e-06 * tc[1] +
                  1.18332930e-09 * tc[2] - 8.45046400e-14 * tc[3];
    // species 20: CH3OH
    species[20] = +1.40938292e-02 - 1.27300167e-05 * tc[1] +
                  4.14513255e-09 * tc[2] - 4.68240880e-13 * tc[3];
    // species 21: C2H
    species[21] = +4.75221902e-03 - 3.67574154e-06 * tc[1] +
                  9.12570756e-10 * tc[2] - 7.08931080e-14 * tc[3];
    // species 22: C2H2
    species[22] = +5.96166664e-03 - 4.74589704e-06 * tc[1] +
                  1.40223651e-09 * tc[2] - 1.44494085e-13 * tc[3];
    // species 23: C2H3
    species[23] = +1.03302292e-02 - 9.36164698e-06 * tc[1] +
                  3.05289864e-09 * tc[2] - 3.45042816e-13 * tc[3];
    // species 24: C2H4
    species[24] = +1.46454151e-02 - 1.34215583e-05 * tc[1] +
                  4.41668769e-09 * tc[2] - 5.02824244e-13 * tc[3];
    // species 25: C2H5
    species[25] = +1.73972722e-02 - 1.59641334e-05 * tc[1] +
                  5.25653067e-09 * tc[2] - 5.98566304e-13 * tc[3];
    // species 26: C2H6
    species[26] = +2.16852677e-02 - 2.00512134e-05 * tc[1] +
                  6.64236003e-09 * tc[2] - 7.60011560e-13 * tc[3];
    // species 27: HCCO
    species[27] = +4.08534010e-03 - 3.18690940e-06 * tc[1] +
                  8.58781560e-10 * tc[2] - 7.76313280e-14 * tc[3];
    // species 28: CH2CO
    species[28] = +9.00359745e-03 - 8.33879270e-06 * tc[1] +
                  2.77003765e-09 * tc[2] - 3.17935280e-13 * tc[3];
    // species 29: HCCOH
    species[29] = +6.79236000e-03 - 5.13171280e-06 * tc[1] +
                  1.34963523e-09 * tc[2] - 1.19760404e-13 * tc[3];
    // species 30: N2
    species[30] = +1.48797680e-03 - 1.13695200e-06 * tc[1] +
                  3.02911140e-10 * tc[2] - 2.70134040e-14 * tc[3];
  }

  // species with no change at a midpoint T
  // species 31: AR
  species[31] = +0.00000000e+00 + 0.00000000e+00 * tc[1] +
                0.00000000e+00 * tc[2] + 0.00000000e+00 * tc[3];
}

// compute an approx to the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian_precond(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real T, const int HP)
{

#if defined(PELE_COMPILE_AJACOBIAN) || !defined(AMREX_USE_HIP)
  for (int i = 0; i < 1089; i++) {
    J[i] = 0.0;
  }

  amrex::Real wdot[32];
  for (auto& val : wdot) {
    val = 0.0;
  }

  const amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  amrex::Real invT = 1.0 / tc[1];
  amrex::Real invT2 = invT * invT;

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 / T;
  amrex::Real refCinv = 1.0 / refC;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int k = 0; k < 32; ++k) {
    mixture += sc[k];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[32];
  gibbs(g_RT, tc);

  // compute the species enthalpy
  amrex::Real h_RT[32];
  speciesEnthalpy(h_RT, tc);

  amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
  amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
  amrex::Real dqdci, dcdc_fac, dqdc[32];
  amrex::Real Pr, fPr, F, k_0, logPr;
  amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
  amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
  amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
  amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
  const amrex::Real ln10 = log(10.0);
  const amrex::Real log10e = 1.0 / log(10.0);
  // reaction 49: CH2 + H (+M) <=> CH3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[10];
  k_f = 25000000000 * exp(-0.8 * tc[0]);
  dlnkfdT = -0.8 * invT;
  // pressure-fall-off
  k_0 = 3.2e+27 * exp(-3.14 * tc[0] - (618.956498939805) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.14 * invT + (618.956498939805) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.68) * exp(-T / 78);
  Fcent2 = 0.68 * exp(-T / 1995);
  Fcent3 = exp(-5590 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 78 - Fcent2 / 1995 + Fcent3 * 5590 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[12];
  Kc = refCinv * exp(g_RT[1] + g_RT[10] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[10]) + (h_RT[12]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[10] -= q; // CH2
  wdot[12] += q; // CH3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[10];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac + k_f * sc[1];
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac - k_r;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = 0.7 * dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 1] -= dqdc[k];
    J[33 * k + 10] -= dqdc[k];
    J[33 * k + 12] += dqdc[k];
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT

  // reaction 51: CH3 + H (+M) <=> CH4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[12];
  k_f = 12700000000 * exp(-0.63 * tc[0] - (192.731983003208) * invT);
  dlnkfdT = -0.63 * invT + (192.731983003208) * invT2;
  // pressure-fall-off
  k_0 = 2.477e+33 * exp(-4.76 * tc[0] - (1227.84866456352) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.76 * invT + (1227.84866456352) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.783) * exp(-T / 74);
  Fcent2 = 0.783 * exp(-T / 2941);
  Fcent3 = exp(-6964 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 74 - Fcent2 / 2941 + Fcent3 * 6964 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[13];
  Kc = refCinv * exp(g_RT[1] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[12]) + (h_RT[13]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[12];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac + k_f * sc[1];
  dqdc[13] = 2 * dcdc_fac - k_r;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = 0.7 * dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 1] -= dqdc[k];
    J[33 * k + 12] -= dqdc[k];
    J[33 * k + 13] += dqdc[k];
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1069] += dqdT; // dwdot[CH4]/dT

  // reaction 53: H + HCO (+M) <=> CH2O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[16];
  k_f = 1090000 * exp(0.48 * tc[0] - (-130.836333109227) * invT);
  dlnkfdT = 0.48 * invT + (-130.836333109227) * invT2;
  // pressure-fall-off
  k_0 = 1.35e+24 * exp(-2.57 * tc[0] - (717.083748771726) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.57 * invT + (717.083748771726) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7824) * exp(-T / 271);
  Fcent2 = 0.7824 * exp(-T / 2755);
  Fcent3 = exp(-6570 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 271 - Fcent2 / 2755 + Fcent3 * 6570 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[17];
  Kc = refCinv * exp(g_RT[1] + g_RT[16] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[16]) + (h_RT[17]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[16] -= q; // HCO
  wdot[17] += q; // CH2O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[16];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac + k_f * sc[1];
  dqdc[17] = dcdc_fac - k_r;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = 0.7 * dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 1] -= dqdc[k];
    J[33 * k + 16] -= dqdc[k];
    J[33 * k + 17] += dqdc[k];
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1072] -= dqdT; // dwdot[HCO]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT

  // reaction 55: CH2O + H (+M) <=> CH2OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 540000 * exp(0.454 * tc[0] - (1811.57999689699) * invT);
  dlnkfdT = 0.454 * invT + (1811.57999689699) * invT2;
  // pressure-fall-off
  k_0 = 1.27e+32 * exp(-4.82 * tc[0] - (3286.00482770482) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.82 * invT + (3286.00482770482) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7187) * exp(-T / 103);
  Fcent2 = 0.7187 * exp(-T / 1291);
  Fcent3 = exp(-4160 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 103 - Fcent2 / 1291 + Fcent3 * 4160 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[18];
  Kc = refCinv * exp(g_RT[1] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[18]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[17] -= q; // CH2O
  wdot[18] += q; // CH2OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[17];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac + k_f * sc[1];
  dqdc[18] = dcdc_fac - k_r;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 1] -= dqdc[k];
    J[33 * k + 17] -= dqdc[k];
    J[33 * k + 18] += dqdc[k];
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1073] -= dqdT; // dwdot[CH2O]/dT
  J[1074] += dqdT; // dwdot[CH2OH]/dT

  // reaction 56: CH2O + H (+M) <=> CH3O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 540000 * exp(0.454 * tc[0] - (1308.36333109227) * invT);
  dlnkfdT = 0.454 * invT + (1308.36333109227) * invT2;
  // pressure-fall-off
  k_0 = 2.2e+30 * exp(-4.8 * tc[0] - (2797.88466187424) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.8 * invT + (2797.88466187424) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.758) * exp(-T / 94);
  Fcent2 = 0.758 * exp(-T / 1555);
  Fcent3 = exp(-4200 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 94 - Fcent2 / 1555 + Fcent3 * 4200 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[19];
  Kc = refCinv * exp(g_RT[1] + g_RT[17] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[19]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[17] -= q; // CH2O
  wdot[19] += q; // CH3O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[17];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac + k_f * sc[1];
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac - k_r;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 1] -= dqdc[k];
    J[33 * k + 17] -= dqdc[k];
    J[33 * k + 19] += dqdc[k];
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1073] -= dqdT; // dwdot[CH2O]/dT
  J[1075] += dqdT; // dwdot[CH3O]/dT

  // reaction 58: CH2OH + H (+M) <=> CH3OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[1] * sc[18];
  k_f = 18000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 3e+31 * exp(-4.8 * tc[0] - (1660.61499715557) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.8 * invT + (1660.61499715557) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7679) * exp(-T / 338);
  Fcent2 = 0.7679 * exp(-T / 1812);
  Fcent3 = exp(-5081 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 338 - Fcent2 / 1812 + Fcent3 * 5081 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[1] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[18]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[18] -= q; // CH2OH
  wdot[20] += q; // CH3OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[18];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac + k_f * sc[1];
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac - k_r;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 1] -= dqdc[k];
    J[33 * k + 18] -= dqdc[k];
    J[33 * k + 20] += dqdc[k];
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1074] -= dqdT; // dwdot[CH2OH]/dT
  J[1076] += dqdT; // dwdot[CH3OH]/dT

  // reaction 62: CH3O + H (+M) <=> CH3OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 8.6e+28 * exp(-4 * tc[0] - (1522.23041405928) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4 * invT + (1522.23041405928) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.8902) * exp(-T / 144);
  Fcent2 = 0.8902 * exp(-T / 2838);
  Fcent3 = exp(-45569 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 144 - Fcent2 / 2838 + Fcent3 * 45569 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[1] + g_RT[19] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[19] -= q; // CH3O
  wdot[20] += q; // CH3OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[19];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac + k_f * sc[1];
  dqdc[20] = dcdc_fac - k_r;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 1] -= dqdc[k];
    J[33 * k + 19] -= dqdc[k];
    J[33 * k + 20] += dqdc[k];
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1075] -= dqdT; // dwdot[CH3O]/dT
  J[1076] += dqdT; // dwdot[CH3OH]/dT

  // reaction 69: C2H + H (+M) <=> C2H2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[21];
  k_f = 100000000000 * exp(-1 * tc[0]);
  dlnkfdT = -1 * invT;
  // pressure-fall-off
  k_0 = 3.75e+33 * exp(-4.8 * tc[0] - (956.111665028967) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.8 * invT + (956.111665028967) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.6464) * exp(-T / 132);
  Fcent2 = 0.6464 * exp(-T / 1315);
  Fcent3 = exp(-5566 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 132 - Fcent2 / 1315 + Fcent3 * 5566 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[22];
  Kc = refCinv * exp(g_RT[1] + g_RT[21] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[21]) + (h_RT[22]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[21] -= q; // C2H
  wdot[22] += q; // C2H2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[21];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac + k_f * sc[1];
  dqdc[22] = dcdc_fac - k_r;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = 0.7 * dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 1] -= dqdc[k];
    J[33 * k + 21] -= dqdc[k];
    J[33 * k + 22] += dqdc[k];
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1077] -= dqdT; // dwdot[C2H]/dT
  J[1078] += dqdT; // dwdot[C2H2]/dT

  // reaction 70: C2H2 + H (+M) <=> C2H3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[22];
  k_f = 5600000 * exp(-(1207.71999793133) * invT);
  dlnkfdT = (1207.71999793133) * invT2;
  // pressure-fall-off
  k_0 = 3.8e+40 * exp(-7.27 * tc[0] - (3633.22432711008) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.27 * invT + (3633.22432711008) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7507) * exp(-T / 98.5);
  Fcent2 = 0.7507 * exp(-T / 1302);
  Fcent3 = exp(-4167 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 98.5 - Fcent2 / 1302 + Fcent3 * 4167 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[23];
  Kc = refCinv * exp(g_RT[1] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[22]) + (h_RT[23]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[22] -= q; // C2H2
  wdot[23] += q; // C2H3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[22];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac + k_f * sc[1];
  dqdc[23] = dcdc_fac - k_r;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = 0.7 * dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 1] -= dqdc[k];
    J[33 * k + 22] -= dqdc[k];
    J[33 * k + 23] += dqdc[k];
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1078] -= dqdT; // dwdot[C2H2]/dT
  J[1079] += dqdT; // dwdot[C2H3]/dT

  // reaction 71: C2H3 + H (+M) <=> C2H4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[23];
  k_f = 6080000 * exp(0.27 * tc[0] - (140.900666425322) * invT);
  dlnkfdT = 0.27 * invT + (140.900666425322) * invT2;
  // pressure-fall-off
  k_0 = 1.4e+30 * exp(-3.86 * tc[0] - (1670.67933047167) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.86 * invT + (1670.67933047167) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.782) * exp(-T / 207.5);
  Fcent2 = 0.782 * exp(-T / 2663);
  Fcent3 = exp(-6095 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 207.5 - Fcent2 / 2663 + Fcent3 * 6095 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[24];
  Kc = refCinv * exp(g_RT[1] + g_RT[23] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[23]) + (h_RT[24]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[23] -= q; // C2H3
  wdot[24] += q; // C2H4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[23];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac + k_f * sc[1];
  dqdc[24] = dcdc_fac - k_r;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = 0.7 * dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 1] -= dqdc[k];
    J[33 * k + 23] -= dqdc[k];
    J[33 * k + 24] += dqdc[k];
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1079] -= dqdT; // dwdot[C2H3]/dT
  J[1080] += dqdT; // dwdot[C2H4]/dT

  // reaction 73: C2H4 + H (+M) <=> C2H5 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[24];
  k_f = 1080000 * exp(0.454 * tc[0] - (915.85433176459) * invT);
  dlnkfdT = 0.454 * invT + (915.85433176459) * invT2;
  // pressure-fall-off
  k_0 = 1.2e+42 * exp(-7.62 * tc[0] - (3507.4201606589) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.62 * invT + (3507.4201606589) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.9753) * exp(-T / 210);
  Fcent2 = 0.9753 * exp(-T / 984);
  Fcent3 = exp(-4374 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 210 - Fcent2 / 984 + Fcent3 * 4374 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[25];
  Kc = refCinv * exp(g_RT[1] + g_RT[24] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[24]) + (h_RT[25]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[24] -= q; // C2H4
  wdot[25] += q; // C2H5
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[24];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac + k_f * sc[1];
  dqdc[25] = dcdc_fac - k_r;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = 0.7 * dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 1] -= dqdc[k];
    J[33 * k + 24] -= dqdc[k];
    J[33 * k + 25] += dqdc[k];
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1080] -= dqdT; // dwdot[C2H4]/dT
  J[1081] += dqdT; // dwdot[C2H5]/dT

  // reaction 75: C2H5 + H (+M) <=> C2H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[25];
  k_f = 521000000000 * exp(-0.99 * tc[0] - (795.082331971457) * invT);
  dlnkfdT = -0.99 * invT + (795.082331971457) * invT2;
  // pressure-fall-off
  k_0 = 1.99e+41 * exp(-7.08 * tc[0] - (3364.00341090455) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.08 * invT + (3364.00341090455) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.8422) * exp(-T / 125);
  Fcent2 = 0.8422 * exp(-T / 2219);
  Fcent3 = exp(-6882 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 125 - Fcent2 / 2219 + Fcent3 * 6882 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[26];
  Kc = refCinv * exp(g_RT[1] + g_RT[25] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[25]) + (h_RT[26]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[25] -= q; // C2H5
  wdot[26] += q; // C2H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[25];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac + k_f * sc[1];
  dqdc[26] = 3 * dcdc_fac - k_r;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = 0.7 * dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 1] -= dqdc[k];
    J[33 * k + 25] -= dqdc[k];
    J[33 * k + 26] += dqdc[k];
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1081] -= dqdT; // dwdot[C2H5]/dT
  J[1082] += dqdT; // dwdot[C2H6]/dT

  // reaction 82: CO + H2 (+M) <=> CH2O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[0] * sc[14];
  k_f = 43 * exp(1.5 * tc[0] - (40056.0465980557) * invT);
  dlnkfdT = 1.5 * invT + (40056.0465980557) * invT2;
  // pressure-fall-off
  k_0 = 5.07e+27 * exp(-3.42 * tc[0] - (42446.3257606281) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.42 * invT + (42446.3257606281) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.932) * exp(-T / 197);
  Fcent2 = 0.932 * exp(-T / 1540);
  Fcent3 = exp(-10300 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 197 - Fcent2 / 1540 + Fcent3 * 10300 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[17];
  Kc = refCinv * exp(g_RT[0] + g_RT[14] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[14]) + (h_RT[17]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[0] -= q;  // H2
  wdot[14] -= q; // CO
  wdot[17] += q; // CH2O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac + k_f * sc[14];
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac + k_f * sc[0];
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac - k_r;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = 0.7 * dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 0] -= dqdc[k];
    J[33 * k + 14] -= dqdc[k];
    J[33 * k + 17] += dqdc[k];
  }
  J[1056] -= dqdT; // dwdot[H2]/dT
  J[1070] -= dqdT; // dwdot[CO]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT

  // reaction 84: 2 OH (+M) <=> H2O2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 74000000 * exp(-0.37 * tc[0]);
  dlnkfdT = -0.37 * invT;
  // pressure-fall-off
  k_0 = 2.3e+18 * exp(-0.9 * tc[0] - (-855.468331868023) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -0.9 * invT + (-855.468331868023) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7346) * exp(-T / 94);
  Fcent2 = 0.7346 * exp(-T / 1756);
  Fcent3 = exp(-5182 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 94 - Fcent2 / 1756 + Fcent3 * 5182 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[7];
  Kc = refCinv * exp(2.000000 * g_RT[4] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[7]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= 2 * q; // OH
  wdot[7] += q;     // H2O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac + k_f * 2.000000 * sc[4];
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac - k_r;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = 0.7 * dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 4] += -2 * dqdc[k];
    J[33 * k + 7] += dqdc[k];
  }
  J[1060] += -2 * dqdT; // dwdot[OH]/dT
  J[1063] += dqdT;      // dwdot[H2O2]/dT

  // reaction 94: CH3 + OH (+M) <=> CH3OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 63000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 2.7e+38 * exp(-6.3 * tc[0] - (1559.97166399463) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.3 * invT + (1559.97166399463) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.2105) * exp(-T / 83.5);
  Fcent2 = 0.2105 * exp(-T / 5398);
  Fcent3 = exp(-8370 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 83.5 - Fcent2 / 5398 + Fcent3 * 8370 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[4] + g_RT[12] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= q;  // OH
  wdot[12] -= q; // CH3
  wdot[20] += q; // CH3OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac + k_f * sc[12];
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac + k_f * sc[4];
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac - k_r;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 4] -= dqdc[k];
    J[33 * k + 12] -= dqdc[k];
    J[33 * k + 20] += dqdc[k];
  }
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1076] += dqdT; // dwdot[CH3OH]/dT

  // reaction 130: CH + CO (+M) <=> HCCO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[9] * sc[14];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 2.69e+28 * exp(-3.74 * tc[0] - (974.227464997937) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.74 * invT + (974.227464997937) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5757) * exp(-T / 237);
  Fcent2 = 0.5757 * exp(-T / 1652);
  Fcent3 = exp(-5069 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 237 - Fcent2 / 1652 + Fcent3 * 5069 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[27];
  Kc = refCinv * exp(g_RT[9] + g_RT[14] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[14]) + (h_RT[27]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // CH
  wdot[14] -= q; // CO
  wdot[27] += q; // HCCO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac + k_f * sc[14];
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac + k_f * sc[9];
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac - k_r;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = 0.7 * dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 9] -= dqdc[k];
    J[33 * k + 14] -= dqdc[k];
    J[33 * k + 27] += dqdc[k];
  }
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1070] -= dqdT; // dwdot[CO]/dT
  J[1083] += dqdT; // dwdot[HCCO]/dT

  // reaction 139: CH2 + CO (+M) <=> CH2CO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[10] * sc[14];
  k_f = 810000 * exp(0.5 * tc[0] - (2269.50716277929) * invT);
  dlnkfdT = 0.5 * invT + (2269.50716277929) * invT2;
  // pressure-fall-off
  k_0 = 2.69e+33 * exp(-5.11 * tc[0] - (3570.32224388449) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.11 * invT + (3570.32224388449) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5907) * exp(-T / 275);
  Fcent2 = 0.5907 * exp(-T / 1226);
  Fcent3 = exp(-5185 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 275 - Fcent2 / 1226 + Fcent3 * 5185 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[28];
  Kc = refCinv * exp(g_RT[10] + g_RT[14] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[14]) + (h_RT[28]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[10] -= q; // CH2
  wdot[14] -= q; // CO
  wdot[28] += q; // CH2CO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac + k_f * sc[14];
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac + k_f * sc[10];
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac - k_r;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = 0.7 * dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 10] -= dqdc[k];
    J[33 * k + 14] -= dqdc[k];
    J[33 * k + 28] += dqdc[k];
  }
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1070] -= dqdT; // dwdot[CO]/dT
  J[1084] += dqdT; // dwdot[CH2CO]/dT

  // reaction 146: CH2(S) + H2O (+M) <=> CH3OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[5] * sc[11];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 2.7e+38 * exp(-6.3 * tc[0] - (1559.97166399463) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.3 * invT + (1559.97166399463) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.1507) * exp(-T / 134);
  Fcent2 = 0.1507 * exp(-T / 2383);
  Fcent3 = exp(-7265 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 134 - Fcent2 / 2383 + Fcent3 * 7265 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[5] + g_RT[11] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[11]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[5] -= q;  // H2O
  wdot[11] -= q; // CH2(S)
  wdot[20] += q; // CH3OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac + k_f * sc[11];
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac + k_f * sc[5];
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac - k_r;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 5] -= dqdc[k];
    J[33 * k + 11] -= dqdc[k];
    J[33 * k + 20] += dqdc[k];
  }
  J[1061] -= dqdT; // dwdot[H2O]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT
  J[1076] += dqdT; // dwdot[CH3OH]/dT

  // reaction 157: 2 CH3 (+M) <=> C2H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = (sc[12] * sc[12]);
  k_f = 21200000000 * exp(-0.97 * tc[0] - (311.994332798926) * invT);
  dlnkfdT = -0.97 * invT + (311.994332798926) * invT2;
  // pressure-fall-off
  k_0 = 1.77e+50 * exp(-9.67 * tc[0] - (3130.00766130536) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -9.67 * invT + (3130.00766130536) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5325) * exp(-T / 151);
  Fcent2 = 0.5325 * exp(-T / 1038);
  Fcent3 = exp(-4970 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 151 - Fcent2 / 1038 + Fcent3 * 4970 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[26];
  Kc = refCinv * exp(2.000000 * g_RT[12] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[12]) + (h_RT[26]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[12] -= 2 * q; // CH3
  wdot[26] += q;     // C2H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac + k_f * 2.000000 * sc[12];
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac - k_r;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = 0.7 * dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 12] += -2 * dqdc[k];
    J[33 * k + 26] += dqdc[k];
  }
  J[1068] += -2 * dqdT; // dwdot[CH3]/dT
  J[1082] += dqdT;      // dwdot[C2H6]/dT

  // reaction 173: C2H4 (+M) <=> C2H2 + H2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[24];
  k_f = 8000000000000 * exp(0.44 * tc[0] - (44670.543423485) * invT);
  dlnkfdT = 0.44 * invT + (44670.543423485) * invT2;
  // pressure-fall-off
  k_0 = 7e+50 * exp(-9.31 * tc[0] - (50251.2162472593) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -9.31 * invT + (50251.2162472593) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7345) * exp(-T / 180);
  Fcent2 = 0.7345 * exp(-T / 1035);
  Fcent3 = exp(-5417 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 180 - Fcent2 / 1035 + Fcent3 * 5417 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[0] * sc[22];
  Kc = refC * exp(-g_RT[0] - g_RT[22] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[24]) + (h_RT[0] + h_RT[22]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[0] += q;  // H2
  wdot[22] += q; // C2H2
  wdot[24] -= q; // C2H4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac - k_r * sc[22];
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac - k_r * sc[0];
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac + k_f;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = 0.7 * dcdc_fac;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 0] += dqdc[k];
    J[33 * k + 22] += dqdc[k];
    J[33 * k + 24] -= dqdc[k];
  }
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1078] += dqdT; // dwdot[C2H2]/dT
  J[1080] -= dqdT; // dwdot[C2H4]/dT

  // reaction 0: 2 O + M <=> O2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.4 - 1) * sc[0] + (15.4 - 1) * sc[5] + sc[13] +
          (1.75 - 1) * sc[14] + (3.6 - 1) * sc[15] + (3 - 1) * sc[26] +
          (0.83 - 1) * sc[31];
  // forward
  phi_f = (sc[2] * sc[2]);
  k_f = 120000 * exp(-1 * tc[0]);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[3];
  Kc = refCinv * exp(2.000000 * g_RT[2] - g_RT[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[2]) + (h_RT[3]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= 2 * q; // O
  wdot[3] += q;     // O2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2.4 * q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor + k_f * 2.000000 * sc[2];
  dqdc[3] = q_nocor - k_r;
  dqdc[4] = q_nocor;
  dqdc[5] = 15.4 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 2 * q_nocor;
  dqdc[14] = 1.75 * q_nocor;
  dqdc[15] = 3.6 * q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 3 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = 0.83 * q_nocor;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 2] += -2 * dqdc[k];
    J[33 * k + 3] += dqdc[k];
  }
  J[1058] += -2 * dqdT; // dwdot[O]/dT
  J[1059] += dqdT;      // dwdot[O2]/dT

  // reaction 1: H + O + M <=> OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[2];
  k_f = 500000 * exp(-1 * tc[0]);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[4];
  Kc = refCinv * exp(g_RT[1] + g_RT[2] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[2]) + (h_RT[4]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] -= q; // O
  wdot[4] += q; // OH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2 * q_nocor;
  dqdc[1] = q_nocor + k_f * sc[2];
  dqdc[2] = q_nocor + k_f * sc[1];
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor - k_r;
  dqdc[5] = 6 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 2 * q_nocor;
  dqdc[14] = 1.5 * q_nocor;
  dqdc[15] = 2 * q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 3 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = 0.7 * q_nocor;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 1] -= dqdc[k];
    J[33 * k + 2] -= dqdc[k];
    J[33 * k + 4] += dqdc[k];
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT

  // reaction 11: CO + O + M <=> CO2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[3] + (6 - 1) * sc[5] + sc[13] +
          (1.5 - 1) * sc[14] + (3.5 - 1) * sc[15] + (3 - 1) * sc[26] +
          (0.5 - 1) * sc[31];
  // forward
  phi_f = sc[2] * sc[14];
  k_f = 602 * exp(-(1509.64999741416) * invT);
  dlnkfdT = (1509.64999741416) * invT2;
  // reverse
  phi_r = sc[15];
  Kc = refCinv * exp(g_RT[2] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[14]) + (h_RT[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[14] -= q; // CO
  wdot[15] += q; // CO2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2 * q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor + k_f * sc[14];
  dqdc[3] = 6 * q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 6 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 2 * q_nocor;
  dqdc[14] = 1.5 * q_nocor + k_f * sc[2];
  dqdc[15] = 3.5 * q_nocor - k_r;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 3 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = 0.5 * q_nocor;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 2] -= dqdc[k];
    J[33 * k + 14] -= dqdc[k];
    J[33 * k + 15] += dqdc[k];
  }
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1070] -= dqdT; // dwdot[CO]/dT
  J[1071] += dqdT; // dwdot[CO2]/dT

  // reaction 32: H + O2 + M <=> HO2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0 - 1) * sc[3] + (0 - 1) * sc[5] + (0.75 - 1) * sc[14] +
          (1.5 - 1) * sc[15] + (1.5 - 1) * sc[26] + (0 - 1) * sc[30] +
          (0 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[3];
  k_f = 2800000 * exp(-0.86 * tc[0]);
  dlnkfdT = -0.86 * invT;
  // reverse
  phi_r = sc[6];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[3]) + (h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O2
  wdot[6] += q; // HO2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor + k_f * sc[3];
  dqdc[2] = q_nocor;
  dqdc[3] = +k_f * sc[1];
  dqdc[4] = q_nocor;
  dqdc[5] = 0.0;
  dqdc[6] = q_nocor - k_r;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = 0.75 * q_nocor;
  dqdc[15] = 1.5 * q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 1.5 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = 0.0;
  dqdc[31] = 0.0;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 1] -= dqdc[k];
    J[33 * k + 3] -= dqdc[k];
    J[33 * k + 6] += dqdc[k];
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT

  // reaction 33: H + O2 + O2 <=> HO2 + O2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * (sc[3] * sc[3]);
  k_f = 300000000 * exp(-1.72 * tc[0]);
  dlnkfdT = -1.72 * invT;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[1] + 2.000000 * h_RT[3]) + (h_RT[3] + h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O2
  wdot[6] += q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[3];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[36] -= dqdci; // dwdot[O2]/d[H]
  J[39] += dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * 2.000000 * sc[3] - k_r * sc[6];
  J[100] -= dqdci; // dwdot[H]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[HO2]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[3];
  J[199] -= dqdci; // dwdot[H]/d[HO2]
  J[201] -= dqdci; // dwdot[O2]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT

  // reaction 34: H + O2 + H2O <=> HO2 + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[3] * sc[5];
  k_f = 9380000 * exp(-0.76 * tc[0]);
  dlnkfdT = -0.76 * invT;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[1] + h_RT[3] + h_RT[5]) + (h_RT[5] + h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O2
  wdot[6] += q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[5];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[36] -= dqdci; // dwdot[O2]/d[H]
  J[39] += dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * sc[5];
  J[100] -= dqdci; // dwdot[H]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[HO2]/d[O2]
  // d()/d[H2O]
  dqdci = +k_f * sc[1] * sc[3] - k_r * sc[6];
  J[166] -= dqdci; // dwdot[H]/d[H2O]
  J[168] -= dqdci; // dwdot[O2]/d[H2O]
  J[171] += dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[199] -= dqdci; // dwdot[H]/d[HO2]
  J[201] -= dqdci; // dwdot[O2]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT

  // reaction 35: H + O2 + N2 <=> HO2 + N2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[3] * sc[30];
  k_f = 375000000 * exp(-1.72 * tc[0]);
  dlnkfdT = -1.72 * invT;
  // reverse
  phi_r = sc[6] * sc[30];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[1] + h_RT[3] + h_RT[30]) + (h_RT[6] + h_RT[30]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O2
  wdot[6] += q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[30];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[36] -= dqdci; // dwdot[O2]/d[H]
  J[39] += dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * sc[30];
  J[100] -= dqdci; // dwdot[H]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[HO2]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[30];
  J[199] -= dqdci; // dwdot[H]/d[HO2]
  J[201] -= dqdci; // dwdot[O2]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/d[N2]
  dqdci = +k_f * sc[1] * sc[3] - k_r * sc[6];
  J[991] -= dqdci; // dwdot[H]/d[N2]
  J[993] -= dqdci; // dwdot[O2]/d[N2]
  J[996] += dqdci; // dwdot[HO2]/d[N2]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT

  // reaction 36: H + O2 + AR <=> HO2 + AR
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[3] * sc[31];
  k_f = 700000 * exp(-0.8 * tc[0]);
  dlnkfdT = -0.8 * invT;
  // reverse
  phi_r = sc[6] * sc[31];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[1] + h_RT[3] + h_RT[31]) + (h_RT[6] + h_RT[31]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O2
  wdot[6] += q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[31];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[36] -= dqdci; // dwdot[O2]/d[H]
  J[39] += dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * sc[31];
  J[100] -= dqdci; // dwdot[H]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[HO2]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[31];
  J[199] -= dqdci; // dwdot[H]/d[HO2]
  J[201] -= dqdci; // dwdot[O2]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/d[AR]
  dqdci = +k_f * sc[1] * sc[3] - k_r * sc[6];
  J[1024] -= dqdci; // dwdot[H]/d[AR]
  J[1026] -= dqdci; // dwdot[O2]/d[AR]
  J[1029] += dqdci; // dwdot[HO2]/d[AR]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT

  // reaction 38: 2 H + M <=> H2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0 - 1) * sc[0] + (0 - 1) * sc[5] + sc[13] +
          (0 - 1) * sc[15] + (3 - 1) * sc[26] + (0.63 - 1) * sc[31];
  // forward
  phi_f = (sc[1] * sc[1]);
  k_f = 1000000 * exp(-1 * tc[0]);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[0];
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[1]) + (h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = -k_r;
  dqdc[1] = q_nocor + k_f * 2.000000 * sc[1];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 0.0;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 2 * q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = 0.0;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 3 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = 0.63 * q_nocor;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 0] += dqdc[k];
    J[33 * k + 1] += -2 * dqdc[k];
  }
  J[1056] += dqdT;      // dwdot[H2]/dT
  J[1057] += -2 * dqdT; // dwdot[H]/dT

  // reaction 39: 2 H + H2 <=> H2 + H2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * (sc[1] * sc[1]);
  k_f = 90000 * exp(-0.6 * tc[0]);
  dlnkfdT = -0.6 * invT;
  // reverse
  phi_r = (sc[0] * sc[0]);
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[0] + 2.000000 * h_RT[1]) + (2.000000 * h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // d()/d[H2]
  dqdci = +k_f * sc[1] * sc[1] - k_r * 2.000000 * sc[0];
  J[0] += dqdci;      // dwdot[H2]/d[H2]
  J[1] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[0] * 2.000000 * sc[1];
  J[33] += dqdci;      // dwdot[H2]/d[H]
  J[34] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/dT
  J[1056] += dqdT;      // dwdot[H2]/dT
  J[1057] += -2 * dqdT; // dwdot[H]/dT

  // reaction 40: 2 H + H2O <=> H2 + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[5];
  k_f = 60000000 * exp(-1.25 * tc[0]);
  dlnkfdT = -1.25 * invT;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[5]) + (h_RT[0] + h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // d()/d[H2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;      // dwdot[H2]/d[H2]
  J[1] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[5];
  J[33] += dqdci;      // dwdot[H2]/d[H]
  J[34] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * sc[1] * sc[1] - k_r * sc[0];
  J[165] += dqdci;      // dwdot[H2]/d[H2O]
  J[166] += -2 * dqdci; // dwdot[H]/d[H2O]
  // d()/dT
  J[1056] += dqdT;      // dwdot[H2]/dT
  J[1057] += -2 * dqdT; // dwdot[H]/dT

  // reaction 41: 2 H + CO2 <=> H2 + CO2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[15];
  k_f = 550000000 * exp(-2 * tc[0]);
  dlnkfdT = -2 * invT;
  // reverse
  phi_r = sc[0] * sc[15];
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[15]) + (h_RT[0] + h_RT[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // d()/d[H2]
  dqdci = -k_r * sc[15];
  J[0] += dqdci;      // dwdot[H2]/d[H2]
  J[1] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[15];
  J[33] += dqdci;      // dwdot[H2]/d[H]
  J[34] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/d[CO2]
  dqdci = +k_f * sc[1] * sc[1] - k_r * sc[0];
  J[495] += dqdci;      // dwdot[H2]/d[CO2]
  J[496] += -2 * dqdci; // dwdot[H]/d[CO2]
  // d()/dT
  J[1056] += dqdT;      // dwdot[H2]/dT
  J[1057] += -2 * dqdT; // dwdot[H]/dT

  // reaction 42: H + OH + M <=> H2O + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0.73 - 1) * sc[0] + (3.65 - 1) * sc[5] + sc[13] +
          (3 - 1) * sc[26] + (0.38 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[4];
  k_f = 22000000000 * exp(-2 * tc[0]);
  dlnkfdT = -2 * invT;
  // reverse
  phi_r = sc[5];
  Kc = refCinv * exp(g_RT[1] + g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[4]) + (h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 0.73 * q_nocor;
  dqdc[1] = q_nocor + k_f * sc[4];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor + k_f * sc[1];
  dqdc[5] = 3.65 * q_nocor - k_r;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 2 * q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 3 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = 0.38 * q_nocor;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 1] -= dqdc[k];
    J[33 * k + 4] -= dqdc[k];
    J[33 * k + 5] += dqdc[k];
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT

  // reaction 165: HCO + H2O <=> CO + H + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[16];
  k_f = 2244000000000 * exp(-1 * tc[0] - (8554.68331868023) * invT);
  dlnkfdT = -1 * invT + (8554.68331868023) * invT2;
  // reverse
  phi_r = sc[1] * sc[5] * sc[14];
  Kc = refC * exp(-g_RT[1] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[5] + h_RT[16]) + (h_RT[1] + h_RT[5] + h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[5] * sc[14];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[47] += dqdci; // dwdot[CO]/d[H]
  J[49] -= dqdci; // dwdot[HCO]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * sc[16] - k_r * sc[1] * sc[14];
  J[166] += dqdci; // dwdot[H]/d[H2O]
  J[179] += dqdci; // dwdot[CO]/d[H2O]
  J[181] -= dqdci; // dwdot[HCO]/d[H2O]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * sc[5];
  J[463] += dqdci; // dwdot[H]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[478] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[5];
  J[529] += dqdci; // dwdot[H]/d[HCO]
  J[542] += dqdci; // dwdot[CO]/d[HCO]
  J[544] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1072] -= dqdT; // dwdot[HCO]/dT

  // reaction 166: HCO + M <=> CO + H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (0 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[16];
  k_f = 187000000000 * exp(-1 * tc[0] - (8554.68331868023) * invT);
  dlnkfdT = -1 * invT + (8554.68331868023) * invT2;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = refC * exp(-g_RT[1] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16]) + (h_RT[1] + h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2 * q_nocor;
  dqdc[1] = q_nocor - k_r * sc[14];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 0.0;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 2 * q_nocor;
  dqdc[14] = 1.5 * q_nocor - k_r * sc[1];
  dqdc[15] = 2 * q_nocor;
  dqdc[16] = q_nocor + k_f;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 3 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  for (int k = 0; k < 32; k++) {
    J[33 * k + 1] += dqdc[k];
    J[33 * k + 14] += dqdc[k];
    J[33 * k + 16] -= dqdc[k];
  }
  J[1057] += dqdT; // dwdot[H]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1072] -= dqdT; // dwdot[HCO]/dT

  // reaction 2: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[2];
  k_f = 0.05 * exp(2.67 * tc[0] - (3165.23282791169) * invT);
  dlnkfdT = 2.67 * invT + (3165.23282791169) * invT2;
  // reverse
  phi_r = sc[1] * sc[4];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[2] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[2]) + (h_RT[1] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // H2
  wdot[1] += q; // H
  wdot[2] -= q; // O
  wdot[4] += q; // OH
  // d()/d[H2]
  dqdci = +k_f * sc[2];
  J[0] -= dqdci; // dwdot[H2]/d[H2]
  J[1] += dqdci; // dwdot[H]/d[H2]
  J[2] -= dqdci; // dwdot[O]/d[H2]
  J[4] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[4];
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[34] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[O]/d[H]
  J[37] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[0];
  J[66] -= dqdci; // dwdot[H2]/d[O]
  J[67] += dqdci; // dwdot[H]/d[O]
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[1];
  J[132] -= dqdci; // dwdot[H2]/d[OH]
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1056] -= dqdT; // dwdot[H2]/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT

  // reaction 3: HO2 + O <=> O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[6];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[4];
  Kc = exp(g_RT[2] - g_RT[3] - g_RT[4] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[6]) + (h_RT[3] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // O
  wdot[3] += q; // O2
  wdot[4] += q; // OH
  wdot[6] -= q; // HO2
  // d()/d[O]
  dqdci = +k_f * sc[6];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[69] += dqdci; // dwdot[O2]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[72] -= dqdci; // dwdot[HO2]/d[O]
  // d()/d[O2]
  dqdci = -k_r * sc[4];
  J[101] -= dqdci; // dwdot[O]/d[O2]
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[103] += dqdci; // dwdot[OH]/d[O2]
  J[105] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[3];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[135] += dqdci; // dwdot[O2]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[138] -= dqdci; // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[2];
  J[200] -= dqdci; // dwdot[O]/d[HO2]
  J[201] += dqdci; // dwdot[O2]/d[HO2]
  J[202] += dqdci; // dwdot[OH]/d[HO2]
  J[204] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1062] -= dqdT; // dwdot[HO2]/dT

  // reaction 4: H2O2 + O <=> HO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[7];
  k_f = 9.63 * exp(2 * tc[0] - (2012.86666321888) * invT);
  dlnkfdT = 2 * invT + (2012.86666321888) * invT2;
  // reverse
  phi_r = sc[4] * sc[6];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[7]) + (h_RT[4] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // O
  wdot[4] += q; // OH
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[O]
  dqdci = +k_f * sc[7];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[72] += dqdci; // dwdot[HO2]/d[O]
  J[73] -= dqdci; // dwdot[H2O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[6];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[138] += dqdci; // dwdot[HO2]/d[OH]
  J[139] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[4];
  J[200] -= dqdci; // dwdot[O]/d[HO2]
  J[202] += dqdci; // dwdot[OH]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  J[205] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[2];
  J[233] -= dqdci; // dwdot[O]/d[H2O2]
  J[235] += dqdci; // dwdot[OH]/d[H2O2]
  J[237] += dqdci; // dwdot[HO2]/d[H2O2]
  J[238] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT
  J[1063] -= dqdT; // dwdot[H2O2]/dT

  // reaction 5: CH + O <=> CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[9];
  k_f = 57000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[9] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[9]) + (h_RT[1] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[9] -= q;  // CH
  wdot[14] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[14];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[O]/d[H]
  J[42] -= dqdci; // dwdot[CH]/d[H]
  J[47] += dqdci; // dwdot[CO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[9];
  J[67] += dqdci; // dwdot[H]/d[O]
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[75] -= dqdci; // dwdot[CH]/d[O]
  J[80] += dqdci; // dwdot[CO]/d[O]
  // d()/d[CH]
  dqdci = +k_f * sc[2];
  J[298] += dqdci; // dwdot[H]/d[CH]
  J[299] -= dqdci; // dwdot[O]/d[CH]
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[311] += dqdci; // dwdot[CO]/d[CH]
  // d()/d[CO]
  dqdci = -k_r * sc[1];
  J[463] += dqdci; // dwdot[H]/d[CO]
  J[464] -= dqdci; // dwdot[O]/d[CO]
  J[471] -= dqdci; // dwdot[CH]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1070] += dqdT; // dwdot[CO]/dT

  // reaction 6: CH2 + O <=> H + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[10];
  k_f = 80000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[16];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[10] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[10]) + (h_RT[1] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[10] -= q; // CH2
  wdot[16] += q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[16];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[O]/d[H]
  J[43] -= dqdci; // dwdot[CH2]/d[H]
  J[49] += dqdci; // dwdot[HCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[10];
  J[67] += dqdci; // dwdot[H]/d[O]
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[76] -= dqdci; // dwdot[CH2]/d[O]
  J[82] += dqdci; // dwdot[HCO]/d[O]
  // d()/d[CH2]
  dqdci = +k_f * sc[2];
  J[331] += dqdci; // dwdot[H]/d[CH2]
  J[332] -= dqdci; // dwdot[O]/d[CH2]
  J[340] -= dqdci; // dwdot[CH2]/d[CH2]
  J[346] += dqdci; // dwdot[HCO]/d[CH2]
  // d()/d[HCO]
  dqdci = -k_r * sc[1];
  J[529] += dqdci; // dwdot[H]/d[HCO]
  J[530] -= dqdci; // dwdot[O]/d[HCO]
  J[538] -= dqdci; // dwdot[CH2]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT

  // reaction 7: CH2(S) + O <=> CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[11];
  k_f = 15000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[14];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[11] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[11]) + (h_RT[0] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // O
  wdot[11] -= q; // CH2(S)
  wdot[14] += q; // CO
  // d()/d[H2]
  dqdci = -k_r * sc[14];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[O]/d[H2]
  J[11] -= dqdci; // dwdot[CH2(S)]/d[H2]
  J[14] += dqdci; // dwdot[CO]/d[H2]
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[66] += dqdci; // dwdot[H2]/d[O]
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[77] -= dqdci; // dwdot[CH2(S)]/d[O]
  J[80] += dqdci; // dwdot[CO]/d[O]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[2];
  J[363] += dqdci; // dwdot[H2]/d[CH2(S)]
  J[365] -= dqdci; // dwdot[O]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[377] += dqdci; // dwdot[CO]/d[CH2(S)]
  // d()/d[CO]
  dqdci = -k_r * sc[0];
  J[462] += dqdci; // dwdot[H2]/d[CO]
  J[464] -= dqdci; // dwdot[O]/d[CO]
  J[473] -= dqdci; // dwdot[CH2(S)]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT
  J[1070] += dqdT; // dwdot[CO]/dT

  // reaction 8: CH2(S) + O <=> H + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[11];
  k_f = 15000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[16];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[11] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[11]) + (h_RT[1] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[11] -= q; // CH2(S)
  wdot[16] += q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[16];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[O]/d[H]
  J[44] -= dqdci; // dwdot[CH2(S)]/d[H]
  J[49] += dqdci; // dwdot[HCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[67] += dqdci; // dwdot[H]/d[O]
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[77] -= dqdci; // dwdot[CH2(S)]/d[O]
  J[82] += dqdci; // dwdot[HCO]/d[O]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[2];
  J[364] += dqdci; // dwdot[H]/d[CH2(S)]
  J[365] -= dqdci; // dwdot[O]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[379] += dqdci; // dwdot[HCO]/d[CH2(S)]
  // d()/d[HCO]
  dqdci = -k_r * sc[1];
  J[529] += dqdci; // dwdot[H]/d[HCO]
  J[530] -= dqdci; // dwdot[O]/d[HCO]
  J[539] -= dqdci; // dwdot[CH2(S)]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT

  // reaction 9: CH3 + O <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[12];
  k_f = 84300000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[17];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[12] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[12]) + (h_RT[1] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[12] -= q; // CH3
  wdot[17] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[17];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[O]/d[H]
  J[45] -= dqdci; // dwdot[CH3]/d[H]
  J[50] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[12];
  J[67] += dqdci; // dwdot[H]/d[O]
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[78] -= dqdci; // dwdot[CH3]/d[O]
  J[83] += dqdci; // dwdot[CH2O]/d[O]
  // d()/d[CH3]
  dqdci = +k_f * sc[2];
  J[397] += dqdci; // dwdot[H]/d[CH3]
  J[398] -= dqdci; // dwdot[O]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[413] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[562] += dqdci; // dwdot[H]/d[CH2O]
  J[563] -= dqdci; // dwdot[O]/d[CH2O]
  J[573] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT

  // reaction 10: CH4 + O <=> CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[13];
  k_f = 1020 * exp(1.5 * tc[0] - (4327.66332592059) * invT);
  dlnkfdT = 1.5 * invT + (4327.66332592059) * invT2;
  // reverse
  phi_r = sc[4] * sc[12];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[13]) + (h_RT[4] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[12] += q; // CH3
  wdot[13] -= q; // CH4
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[78] += dqdci; // dwdot[CH3]/d[O]
  J[79] -= dqdci; // dwdot[CH4]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[144] += dqdci; // dwdot[CH3]/d[OH]
  J[145] -= dqdci; // dwdot[CH4]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[4];
  J[398] -= dqdci; // dwdot[O]/d[CH3]
  J[400] += dqdci; // dwdot[OH]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  J[409] -= dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[2];
  J[431] -= dqdci; // dwdot[O]/d[CH4]
  J[433] += dqdci; // dwdot[OH]/d[CH4]
  J[441] += dqdci; // dwdot[CH3]/d[CH4]
  J[442] -= dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT
  J[1069] -= dqdT; // dwdot[CH4]/dT

  // reaction 12: HCO + O <=> CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[16];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[14];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[4] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[80] += dqdci; // dwdot[CO]/d[O]
  J[82] -= dqdci; // dwdot[HCO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[14];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[146] += dqdci; // dwdot[CO]/d[OH]
  J[148] -= dqdci; // dwdot[HCO]/d[OH]
  // d()/d[CO]
  dqdci = -k_r * sc[4];
  J[464] -= dqdci; // dwdot[O]/d[CO]
  J[466] += dqdci; // dwdot[OH]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[478] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[2];
  J[530] -= dqdci; // dwdot[O]/d[HCO]
  J[532] += dqdci; // dwdot[OH]/d[HCO]
  J[542] += dqdci; // dwdot[CO]/d[HCO]
  J[544] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1072] -= dqdT; // dwdot[HCO]/dT

  // reaction 13: HCO + O <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[16];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[15];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[1] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[15] += q; // CO2
  wdot[16] -= q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[15];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[O]/d[H]
  J[48] += dqdci; // dwdot[CO2]/d[H]
  J[49] -= dqdci; // dwdot[HCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[67] += dqdci; // dwdot[H]/d[O]
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[81] += dqdci; // dwdot[CO2]/d[O]
  J[82] -= dqdci; // dwdot[HCO]/d[O]
  // d()/d[CO2]
  dqdci = -k_r * sc[1];
  J[496] += dqdci; // dwdot[H]/d[CO2]
  J[497] -= dqdci; // dwdot[O]/d[CO2]
  J[510] += dqdci; // dwdot[CO2]/d[CO2]
  J[511] -= dqdci; // dwdot[HCO]/d[CO2]
  // d()/d[HCO]
  dqdci = +k_f * sc[2];
  J[529] += dqdci; // dwdot[H]/d[HCO]
  J[530] -= dqdci; // dwdot[O]/d[HCO]
  J[543] += dqdci; // dwdot[CO2]/d[HCO]
  J[544] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1071] += dqdT; // dwdot[CO2]/dT
  J[1072] -= dqdT; // dwdot[HCO]/dT

  // reaction 14: CH2O + O <=> HCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[17];
  k_f = 39000000 * exp(-(1781.38699694871) * invT);
  dlnkfdT = (1781.38699694871) * invT2;
  // reverse
  phi_r = sc[4] * sc[16];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[17]) + (h_RT[4] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[82] += dqdci; // dwdot[HCO]/d[O]
  J[83] -= dqdci; // dwdot[CH2O]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[16];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[148] += dqdci; // dwdot[HCO]/d[OH]
  J[149] -= dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[HCO]
  dqdci = -k_r * sc[4];
  J[530] -= dqdci; // dwdot[O]/d[HCO]
  J[532] += dqdci; // dwdot[OH]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  J[545] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[2];
  J[563] -= dqdci; // dwdot[O]/d[CH2O]
  J[565] += dqdci; // dwdot[OH]/d[CH2O]
  J[577] += dqdci; // dwdot[HCO]/d[CH2O]
  J[578] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT
  J[1073] -= dqdT; // dwdot[CH2O]/dT

  // reaction 15: CH2OH + O <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[18];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[17];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[18]) + (h_RT[4] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[17] += q; // CH2O
  wdot[18] -= q; // CH2OH
  // d()/d[O]
  dqdci = +k_f * sc[18];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[83] += dqdci; // dwdot[CH2O]/d[O]
  J[84] -= dqdci; // dwdot[CH2OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[149] += dqdci; // dwdot[CH2O]/d[OH]
  J[150] -= dqdci; // dwdot[CH2OH]/d[OH]
  // d()/d[CH2O]
  dqdci = -k_r * sc[4];
  J[563] -= dqdci; // dwdot[O]/d[CH2O]
  J[565] += dqdci; // dwdot[OH]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[579] -= dqdci; // dwdot[CH2OH]/d[CH2O]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[2];
  J[596] -= dqdci; // dwdot[O]/d[CH2OH]
  J[598] += dqdci; // dwdot[OH]/d[CH2OH]
  J[611] += dqdci; // dwdot[CH2O]/d[CH2OH]
  J[612] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT
  J[1074] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 16: CH3O + O <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[17];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[17] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[19]) + (h_RT[4] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[17] += q; // CH2O
  wdot[19] -= q; // CH3O
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[83] += dqdci; // dwdot[CH2O]/d[O]
  J[85] -= dqdci; // dwdot[CH3O]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[149] += dqdci; // dwdot[CH2O]/d[OH]
  J[151] -= dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[CH2O]
  dqdci = -k_r * sc[4];
  J[563] -= dqdci; // dwdot[O]/d[CH2O]
  J[565] += dqdci; // dwdot[OH]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[580] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[2];
  J[629] -= dqdci; // dwdot[O]/d[CH3O]
  J[631] += dqdci; // dwdot[OH]/d[CH3O]
  J[644] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[646] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT
  J[1075] -= dqdT; // dwdot[CH3O]/dT

  // reaction 17: CH3OH + O <=> CH2OH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 0.388 * exp(2.5 * tc[0] - (1559.97166399463) * invT);
  dlnkfdT = 2.5 * invT + (1559.97166399463) * invT2;
  // reverse
  phi_r = sc[4] * sc[18];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[4] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[84] += dqdci; // dwdot[CH2OH]/d[O]
  J[86] -= dqdci; // dwdot[CH3OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[150] += dqdci; // dwdot[CH2OH]/d[OH]
  J[152] -= dqdci; // dwdot[CH3OH]/d[OH]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[4];
  J[596] -= dqdci; // dwdot[O]/d[CH2OH]
  J[598] += dqdci; // dwdot[OH]/d[CH2OH]
  J[612] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[614] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[2];
  J[662] -= dqdci; // dwdot[O]/d[CH3OH]
  J[664] += dqdci; // dwdot[OH]/d[CH3OH]
  J[678] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[680] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1074] += dqdT; // dwdot[CH2OH]/dT
  J[1076] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 18: CH3OH + O <=> CH3O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 0.13 * exp(2.5 * tc[0] - (2516.0833290236) * invT);
  dlnkfdT = 2.5 * invT + (2516.0833290236) * invT2;
  // reverse
  phi_r = sc[4] * sc[19];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[4] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[85] += dqdci; // dwdot[CH3O]/d[O]
  J[86] -= dqdci; // dwdot[CH3OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[19];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[151] += dqdci; // dwdot[CH3O]/d[OH]
  J[152] -= dqdci; // dwdot[CH3OH]/d[OH]
  // d()/d[CH3O]
  dqdci = -k_r * sc[4];
  J[629] -= dqdci; // dwdot[O]/d[CH3O]
  J[631] += dqdci; // dwdot[OH]/d[CH3O]
  J[646] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[647] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[2];
  J[662] -= dqdci; // dwdot[O]/d[CH3OH]
  J[664] += dqdci; // dwdot[OH]/d[CH3OH]
  J[679] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[680] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1075] += dqdT; // dwdot[CH3O]/dT
  J[1076] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 19: C2H + O <=> CH + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[21];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[9] * sc[14];
  Kc = exp(g_RT[2] - g_RT[9] - g_RT[14] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[21]) + (h_RT[9] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[9] += q;  // CH
  wdot[14] += q; // CO
  wdot[21] -= q; // C2H
  // d()/d[O]
  dqdci = +k_f * sc[21];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[CH]/d[O]
  J[80] += dqdci; // dwdot[CO]/d[O]
  J[87] -= dqdci; // dwdot[C2H]/d[O]
  // d()/d[CH]
  dqdci = -k_r * sc[14];
  J[299] -= dqdci; // dwdot[O]/d[CH]
  J[306] += dqdci; // dwdot[CH]/d[CH]
  J[311] += dqdci; // dwdot[CO]/d[CH]
  J[318] -= dqdci; // dwdot[C2H]/d[CH]
  // d()/d[CO]
  dqdci = -k_r * sc[9];
  J[464] -= dqdci; // dwdot[O]/d[CO]
  J[471] += dqdci; // dwdot[CH]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[483] -= dqdci; // dwdot[C2H]/d[CO]
  // d()/d[C2H]
  dqdci = +k_f * sc[2];
  J[695] -= dqdci; // dwdot[O]/d[C2H]
  J[702] += dqdci; // dwdot[CH]/d[C2H]
  J[707] += dqdci; // dwdot[CO]/d[C2H]
  J[714] -= dqdci; // dwdot[C2H]/d[C2H]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1065] += dqdT; // dwdot[CH]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1077] -= dqdT; // dwdot[C2H]/dT

  // reaction 20: C2H2 + O <=> H + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 10.2 * exp(2 * tc[0] - (956.111665028967) * invT);
  dlnkfdT = 2 * invT + (956.111665028967) * invT2;
  // reverse
  phi_r = sc[1] * sc[27];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[22] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[1] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[22] -= q; // C2H2
  wdot[27] += q; // HCCO
  // d()/d[H]
  dqdci = -k_r * sc[27];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[O]/d[H]
  J[55] -= dqdci; // dwdot[C2H2]/d[H]
  J[60] += dqdci; // dwdot[HCCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[67] += dqdci; // dwdot[H]/d[O]
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[88] -= dqdci; // dwdot[C2H2]/d[O]
  J[93] += dqdci; // dwdot[HCCO]/d[O]
  // d()/d[C2H2]
  dqdci = +k_f * sc[2];
  J[727] += dqdci; // dwdot[H]/d[C2H2]
  J[728] -= dqdci; // dwdot[O]/d[C2H2]
  J[748] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[753] += dqdci; // dwdot[HCCO]/d[C2H2]
  // d()/d[HCCO]
  dqdci = -k_r * sc[1];
  J[892] += dqdci; // dwdot[H]/d[HCCO]
  J[893] -= dqdci; // dwdot[O]/d[HCCO]
  J[913] -= dqdci; // dwdot[C2H2]/d[HCCO]
  J[918] += dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1078] -= dqdT; // dwdot[C2H2]/dT
  J[1083] += dqdT; // dwdot[HCCO]/dT

  // reaction 21: C2H2 + O <=> C2H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 46000000000000 * exp(-1.41 * tc[0] - (14568.1224750466) * invT);
  dlnkfdT = -1.41 * invT + (14568.1224750466) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[21] += q; // C2H
  wdot[22] -= q; // C2H2
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[87] += dqdci; // dwdot[C2H]/d[O]
  J[88] -= dqdci; // dwdot[C2H2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[153] += dqdci; // dwdot[C2H]/d[OH]
  J[154] -= dqdci; // dwdot[C2H2]/d[OH]
  // d()/d[C2H]
  dqdci = -k_r * sc[4];
  J[695] -= dqdci; // dwdot[O]/d[C2H]
  J[697] += dqdci; // dwdot[OH]/d[C2H]
  J[714] += dqdci; // dwdot[C2H]/d[C2H]
  J[715] -= dqdci; // dwdot[C2H2]/d[C2H]
  // d()/d[C2H2]
  dqdci = +k_f * sc[2];
  J[728] -= dqdci; // dwdot[O]/d[C2H2]
  J[730] += dqdci; // dwdot[OH]/d[C2H2]
  J[747] += dqdci; // dwdot[C2H]/d[C2H2]
  J[748] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1077] += dqdT; // dwdot[C2H]/dT
  J[1078] -= dqdT; // dwdot[C2H2]/dT

  // reaction 22: C2H2 + O <=> CH2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 10.2 * exp(2 * tc[0] - (956.111665028967) * invT);
  dlnkfdT = 2 * invT + (956.111665028967) * invT2;
  // reverse
  phi_r = sc[10] * sc[14];
  Kc = exp(g_RT[2] - g_RT[10] - g_RT[14] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[10] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[10] += q; // CH2
  wdot[14] += q; // CO
  wdot[22] -= q; // C2H2
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[76] += dqdci; // dwdot[CH2]/d[O]
  J[80] += dqdci; // dwdot[CO]/d[O]
  J[88] -= dqdci; // dwdot[C2H2]/d[O]
  // d()/d[CH2]
  dqdci = -k_r * sc[14];
  J[332] -= dqdci; // dwdot[O]/d[CH2]
  J[340] += dqdci; // dwdot[CH2]/d[CH2]
  J[344] += dqdci; // dwdot[CO]/d[CH2]
  J[352] -= dqdci; // dwdot[C2H2]/d[CH2]
  // d()/d[CO]
  dqdci = -k_r * sc[10];
  J[464] -= dqdci; // dwdot[O]/d[CO]
  J[472] += dqdci; // dwdot[CH2]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[484] -= dqdci; // dwdot[C2H2]/d[CO]
  // d()/d[C2H2]
  dqdci = +k_f * sc[2];
  J[728] -= dqdci; // dwdot[O]/d[C2H2]
  J[736] += dqdci; // dwdot[CH2]/d[C2H2]
  J[740] += dqdci; // dwdot[CO]/d[C2H2]
  J[748] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1066] += dqdT; // dwdot[CH2]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1078] -= dqdT; // dwdot[C2H2]/dT

  // reaction 23: C2H3 + O <=> CH2CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[23];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[28];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[23] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[23]) + (h_RT[1] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[23] -= q; // C2H3
  wdot[28] += q; // CH2CO
  // d()/d[H]
  dqdci = -k_r * sc[28];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[O]/d[H]
  J[56] -= dqdci; // dwdot[C2H3]/d[H]
  J[61] += dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[23];
  J[67] += dqdci; // dwdot[H]/d[O]
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[89] -= dqdci; // dwdot[C2H3]/d[O]
  J[94] += dqdci; // dwdot[CH2CO]/d[O]
  // d()/d[C2H3]
  dqdci = +k_f * sc[2];
  J[760] += dqdci; // dwdot[H]/d[C2H3]
  J[761] -= dqdci; // dwdot[O]/d[C2H3]
  J[782] -= dqdci; // dwdot[C2H3]/d[C2H3]
  J[787] += dqdci; // dwdot[CH2CO]/d[C2H3]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[1];
  J[925] += dqdci; // dwdot[H]/d[CH2CO]
  J[926] -= dqdci; // dwdot[O]/d[CH2CO]
  J[947] -= dqdci; // dwdot[C2H3]/d[CH2CO]
  J[952] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1079] -= dqdT; // dwdot[C2H3]/dT
  J[1084] += dqdT; // dwdot[CH2CO]/dT

  // reaction 24: C2H4 + O <=> CH3 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[24];
  k_f = 19.2 * exp(1.83 * tc[0] - (110.707666477038) * invT);
  dlnkfdT = 1.83 * invT + (110.707666477038) * invT2;
  // reverse
  phi_r = sc[12] * sc[16];
  Kc = exp(g_RT[2] - g_RT[12] - g_RT[16] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[24]) + (h_RT[12] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[12] += q; // CH3
  wdot[16] += q; // HCO
  wdot[24] -= q; // C2H4
  // d()/d[O]
  dqdci = +k_f * sc[24];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[78] += dqdci; // dwdot[CH3]/d[O]
  J[82] += dqdci; // dwdot[HCO]/d[O]
  J[90] -= dqdci; // dwdot[C2H4]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc[16];
  J[398] -= dqdci; // dwdot[O]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  J[412] += dqdci; // dwdot[HCO]/d[CH3]
  J[420] -= dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[HCO]
  dqdci = -k_r * sc[12];
  J[530] -= dqdci; // dwdot[O]/d[HCO]
  J[540] += dqdci; // dwdot[CH3]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  J[552] -= dqdci; // dwdot[C2H4]/d[HCO]
  // d()/d[C2H4]
  dqdci = +k_f * sc[2];
  J[794] -= dqdci; // dwdot[O]/d[C2H4]
  J[804] += dqdci; // dwdot[CH3]/d[C2H4]
  J[808] += dqdci; // dwdot[HCO]/d[C2H4]
  J[816] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT
  J[1080] -= dqdT; // dwdot[C2H4]/dT

  // reaction 25: C2H5 + O <=> CH2O + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[25];
  k_f = 132000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[12] * sc[17];
  Kc = exp(g_RT[2] - g_RT[12] - g_RT[17] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[25]) + (h_RT[12] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[12] += q; // CH3
  wdot[17] += q; // CH2O
  wdot[25] -= q; // C2H5
  // d()/d[O]
  dqdci = +k_f * sc[25];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[78] += dqdci; // dwdot[CH3]/d[O]
  J[83] += dqdci; // dwdot[CH2O]/d[O]
  J[91] -= dqdci; // dwdot[C2H5]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc[17];
  J[398] -= dqdci; // dwdot[O]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  J[413] += dqdci; // dwdot[CH2O]/d[CH3]
  J[421] -= dqdci; // dwdot[C2H5]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[12];
  J[563] -= dqdci; // dwdot[O]/d[CH2O]
  J[573] += dqdci; // dwdot[CH3]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[586] -= dqdci; // dwdot[C2H5]/d[CH2O]
  // d()/d[C2H5]
  dqdci = +k_f * sc[2];
  J[827] -= dqdci; // dwdot[O]/d[C2H5]
  J[837] += dqdci; // dwdot[CH3]/d[C2H5]
  J[842] += dqdci; // dwdot[CH2O]/d[C2H5]
  J[850] -= dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT
  J[1081] -= dqdT; // dwdot[C2H5]/dT

  // reaction 26: C2H6 + O <=> C2H5 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[26];
  k_f = 89.8 * exp(1.92 * tc[0] - (2863.30282842885) * invT);
  dlnkfdT = 1.92 * invT + (2863.30282842885) * invT2;
  // reverse
  phi_r = sc[4] * sc[25];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[26]) + (h_RT[4] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  // d()/d[O]
  dqdci = +k_f * sc[26];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[91] += dqdci; // dwdot[C2H5]/d[O]
  J[92] -= dqdci; // dwdot[C2H6]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[25];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[157] += dqdci; // dwdot[C2H5]/d[OH]
  J[158] -= dqdci; // dwdot[C2H6]/d[OH]
  // d()/d[C2H5]
  dqdci = -k_r * sc[4];
  J[827] -= dqdci; // dwdot[O]/d[C2H5]
  J[829] += dqdci; // dwdot[OH]/d[C2H5]
  J[850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[2];
  J[860] -= dqdci; // dwdot[O]/d[C2H6]
  J[862] += dqdci; // dwdot[OH]/d[C2H6]
  J[883] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[884] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1081] += dqdT; // dwdot[C2H5]/dT
  J[1082] -= dqdT; // dwdot[C2H6]/dT

  // reaction 27: HCCO + O <=> 2 CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[27];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * (sc[14] * sc[14]);
  Kc = refC * exp(-g_RT[1] + g_RT[2] - 2.000000 * g_RT[14] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[2] + h_RT[27]) + (h_RT[1] + 2.000000 * h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;      // H
  wdot[2] -= q;      // O
  wdot[14] += 2 * q; // CO
  wdot[27] -= q;     // HCCO
  // d()/d[H]
  dqdci = -k_r * sc[14] * sc[14];
  J[34] += dqdci;     // dwdot[H]/d[H]
  J[35] -= dqdci;     // dwdot[O]/d[H]
  J[47] += 2 * dqdci; // dwdot[CO]/d[H]
  J[60] -= dqdci;     // dwdot[HCCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[27];
  J[67] += dqdci;     // dwdot[H]/d[O]
  J[68] -= dqdci;     // dwdot[O]/d[O]
  J[80] += 2 * dqdci; // dwdot[CO]/d[O]
  J[93] -= dqdci;     // dwdot[HCCO]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * 2.000000 * sc[14];
  J[463] += dqdci;     // dwdot[H]/d[CO]
  J[464] -= dqdci;     // dwdot[O]/d[CO]
  J[476] += 2 * dqdci; // dwdot[CO]/d[CO]
  J[489] -= dqdci;     // dwdot[HCCO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[2];
  J[892] += dqdci;     // dwdot[H]/d[HCCO]
  J[893] -= dqdci;     // dwdot[O]/d[HCCO]
  J[905] += 2 * dqdci; // dwdot[CO]/d[HCCO]
  J[918] -= dqdci;     // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1057] += dqdT;     // dwdot[H]/dT
  J[1058] -= dqdT;     // dwdot[O]/dT
  J[1070] += 2 * dqdT; // dwdot[CO]/dT
  J[1083] -= dqdT;     // dwdot[HCCO]/dT

  // reaction 28: CH2CO + O <=> HCCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[28];
  k_f = 10000000 * exp(-(4025.73332643776) * invT);
  dlnkfdT = (4025.73332643776) * invT2;
  // reverse
  phi_r = sc[4] * sc[27];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[27] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[28]) + (h_RT[4] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[27] += q; // HCCO
  wdot[28] -= q; // CH2CO
  // d()/d[O]
  dqdci = +k_f * sc[28];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[93] += dqdci; // dwdot[HCCO]/d[O]
  J[94] -= dqdci; // dwdot[CH2CO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[27];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[159] += dqdci; // dwdot[HCCO]/d[OH]
  J[160] -= dqdci; // dwdot[CH2CO]/d[OH]
  // d()/d[HCCO]
  dqdci = -k_r * sc[4];
  J[893] -= dqdci; // dwdot[O]/d[HCCO]
  J[895] += dqdci; // dwdot[OH]/d[HCCO]
  J[918] += dqdci; // dwdot[HCCO]/d[HCCO]
  J[919] -= dqdci; // dwdot[CH2CO]/d[HCCO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[2];
  J[926] -= dqdci; // dwdot[O]/d[CH2CO]
  J[928] += dqdci; // dwdot[OH]/d[CH2CO]
  J[951] += dqdci; // dwdot[HCCO]/d[CH2CO]
  J[952] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1083] += dqdT; // dwdot[HCCO]/dT
  J[1084] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 29: CH2CO + O <=> CH2 + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[28];
  k_f = 1750000 * exp(-(679.342498836372) * invT);
  dlnkfdT = (679.342498836372) * invT2;
  // reverse
  phi_r = sc[10] * sc[15];
  Kc = exp(g_RT[2] - g_RT[10] - g_RT[15] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[28]) + (h_RT[10] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[10] += q; // CH2
  wdot[15] += q; // CO2
  wdot[28] -= q; // CH2CO
  // d()/d[O]
  dqdci = +k_f * sc[28];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[76] += dqdci; // dwdot[CH2]/d[O]
  J[81] += dqdci; // dwdot[CO2]/d[O]
  J[94] -= dqdci; // dwdot[CH2CO]/d[O]
  // d()/d[CH2]
  dqdci = -k_r * sc[15];
  J[332] -= dqdci; // dwdot[O]/d[CH2]
  J[340] += dqdci; // dwdot[CH2]/d[CH2]
  J[345] += dqdci; // dwdot[CO2]/d[CH2]
  J[358] -= dqdci; // dwdot[CH2CO]/d[CH2]
  // d()/d[CO2]
  dqdci = -k_r * sc[10];
  J[497] -= dqdci; // dwdot[O]/d[CO2]
  J[505] += dqdci; // dwdot[CH2]/d[CO2]
  J[510] += dqdci; // dwdot[CO2]/d[CO2]
  J[523] -= dqdci; // dwdot[CH2CO]/d[CO2]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[2];
  J[926] -= dqdci; // dwdot[O]/d[CH2CO]
  J[934] += dqdci; // dwdot[CH2]/d[CH2CO]
  J[939] += dqdci; // dwdot[CO2]/d[CH2CO]
  J[952] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1066] += dqdT; // dwdot[CH2]/dT
  J[1071] += dqdT; // dwdot[CO2]/dT
  J[1084] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 30: CO + O2 <=> CO2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[14];
  k_f = 2500000 * exp(-(24053.7566254656) * invT);
  dlnkfdT = (24053.7566254656) * invT2;
  // reverse
  phi_r = sc[2] * sc[15];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[14]) + (h_RT[2] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[14] -= q; // CO
  wdot[15] += q; // CO2
  // d()/d[O]
  dqdci = -k_r * sc[15];
  J[68] += dqdci; // dwdot[O]/d[O]
  J[69] -= dqdci; // dwdot[O2]/d[O]
  J[80] -= dqdci; // dwdot[CO]/d[O]
  J[81] += dqdci; // dwdot[CO2]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[14];
  J[101] += dqdci; // dwdot[O]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[113] -= dqdci; // dwdot[CO]/d[O2]
  J[114] += dqdci; // dwdot[CO2]/d[O2]
  // d()/d[CO]
  dqdci = +k_f * sc[3];
  J[464] += dqdci; // dwdot[O]/d[CO]
  J[465] -= dqdci; // dwdot[O2]/d[CO]
  J[476] -= dqdci; // dwdot[CO]/d[CO]
  J[477] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[2];
  J[497] += dqdci; // dwdot[O]/d[CO2]
  J[498] -= dqdci; // dwdot[O2]/d[CO2]
  J[509] -= dqdci; // dwdot[CO]/d[CO2]
  J[510] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1058] += dqdT; // dwdot[O]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1070] -= dqdT; // dwdot[CO]/dT
  J[1071] += dqdT; // dwdot[CO2]/dT

  // reaction 31: CH2O + O2 <=> HCO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[17];
  k_f = 100000000 * exp(-(20128.6666321888) * invT);
  dlnkfdT = (20128.6666321888) * invT2;
  // reverse
  phi_r = sc[6] * sc[16];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[17]) + (h_RT[6] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[O2]
  dqdci = +k_f * sc[17];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[HO2]/d[O2]
  J[115] += dqdci; // dwdot[HCO]/d[O2]
  J[116] -= dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[16];
  J[201] -= dqdci; // dwdot[O2]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  J[214] += dqdci; // dwdot[HCO]/d[HO2]
  J[215] -= dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[HCO]
  dqdci = -k_r * sc[6];
  J[531] -= dqdci; // dwdot[O2]/d[HCO]
  J[534] += dqdci; // dwdot[HO2]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  J[545] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[3];
  J[564] -= dqdci; // dwdot[O2]/d[CH2O]
  J[567] += dqdci; // dwdot[HO2]/d[CH2O]
  J[577] += dqdci; // dwdot[HCO]/d[CH2O]
  J[578] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT
  J[1073] -= dqdT; // dwdot[CH2O]/dT

  // reaction 37: H + O2 <=> O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[3];
  k_f = 83000000 * exp(-(7252.86180424342) * invT);
  dlnkfdT = (7252.86180424342) * invT2;
  // reverse
  phi_r = sc[2] * sc[4];
  Kc = exp(g_RT[1] - g_RT[2] + g_RT[3] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[3]) + (h_RT[2] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] += q; // O
  wdot[3] -= q; // O2
  wdot[4] += q; // OH
  // d()/d[H]
  dqdci = +k_f * sc[3];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[O]/d[H]
  J[36] -= dqdci; // dwdot[O2]/d[H]
  J[37] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[4];
  J[67] -= dqdci; // dwdot[H]/d[O]
  J[68] += dqdci; // dwdot[O]/d[O]
  J[69] -= dqdci; // dwdot[O2]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[1];
  J[100] -= dqdci; // dwdot[H]/d[O2]
  J[101] += dqdci; // dwdot[O]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[103] += dqdci; // dwdot[OH]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[2];
  J[133] -= dqdci; // dwdot[H]/d[OH]
  J[134] += dqdci; // dwdot[O]/d[OH]
  J[135] -= dqdci; // dwdot[O2]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1058] += dqdT; // dwdot[O]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1060] += dqdT; // dwdot[OH]/dT

  // reaction 43: H + HO2 <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 3970000 * exp(-(337.658382754967) * invT);
  dlnkfdT = (337.658382754967) * invT2;
  // reverse
  phi_r = sc[2] * sc[5];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[5] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (h_RT[2] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] += q; // O
  wdot[5] += q; // H2O
  wdot[6] -= q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[O]/d[H]
  J[38] += dqdci; // dwdot[H2O]/d[H]
  J[39] -= dqdci; // dwdot[HO2]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[5];
  J[67] -= dqdci; // dwdot[H]/d[O]
  J[68] += dqdci; // dwdot[O]/d[O]
  J[71] += dqdci; // dwdot[H2O]/d[O]
  J[72] -= dqdci; // dwdot[HO2]/d[O]
  // d()/d[H2O]
  dqdci = -k_r * sc[2];
  J[166] -= dqdci; // dwdot[H]/d[H2O]
  J[167] += dqdci; // dwdot[O]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[199] -= dqdci; // dwdot[H]/d[HO2]
  J[200] += dqdci; // dwdot[O]/d[HO2]
  J[203] += dqdci; // dwdot[H2O]/d[HO2]
  J[204] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1058] += dqdT; // dwdot[O]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[HO2]/dT

  // reaction 44: H + HO2 <=> H2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 28000000 * exp(-(537.435399079441) * invT);
  dlnkfdT = (537.435399079441) * invT2;
  // reverse
  phi_r = sc[0] * sc[3];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[3] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (h_RT[0] + h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // H2
  wdot[1] -= q; // H
  wdot[3] += q; // O2
  wdot[6] -= q; // HO2
  // d()/d[H2]
  dqdci = -k_r * sc[3];
  J[0] += dqdci; // dwdot[H2]/d[H2]
  J[1] -= dqdci; // dwdot[H]/d[H2]
  J[3] += dqdci; // dwdot[O2]/d[H2]
  J[6] -= dqdci; // dwdot[HO2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[36] += dqdci; // dwdot[O2]/d[H]
  J[39] -= dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = -k_r * sc[0];
  J[99] += dqdci;  // dwdot[H2]/d[O2]
  J[100] -= dqdci; // dwdot[H]/d[O2]
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[105] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[198] += dqdci; // dwdot[H2]/d[HO2]
  J[199] -= dqdci; // dwdot[H]/d[HO2]
  J[201] += dqdci; // dwdot[O2]/d[HO2]
  J[204] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1062] -= dqdT; // dwdot[HO2]/dT

  // reaction 45: H + HO2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 134000000 * exp(-(319.542582785997) * invT);
  dlnkfdT = (319.542582785997) * invT2;
  // reverse
  phi_r = (sc[4] * sc[4]);
  Kc = exp(g_RT[1] - 2.000000 * g_RT[4] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (2.000000 * h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;     // H
  wdot[4] += 2 * q; // OH
  wdot[6] -= q;     // HO2
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[34] -= dqdci;     // dwdot[H]/d[H]
  J[37] += 2 * dqdci; // dwdot[OH]/d[H]
  J[39] -= dqdci;     // dwdot[HO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[4];
  J[133] -= dqdci;     // dwdot[H]/d[OH]
  J[136] += 2 * dqdci; // dwdot[OH]/d[OH]
  J[138] -= dqdci;     // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[199] -= dqdci;     // dwdot[H]/d[HO2]
  J[202] += 2 * dqdci; // dwdot[OH]/d[HO2]
  J[204] -= dqdci;     // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1057] -= dqdT;     // dwdot[H]/dT
  J[1060] += 2 * dqdT; // dwdot[OH]/dT
  J[1062] -= dqdT;     // dwdot[HO2]/dT

  // reaction 46: H + H2O2 <=> H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[7];
  k_f = 12.1 * exp(2 * tc[0] - (2616.72666218454) * invT);
  dlnkfdT = 2 * invT + (2616.72666218454) * invT2;
  // reverse
  phi_r = sc[0] * sc[6];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[0] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // H2
  wdot[1] -= q; // H
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[H2]
  dqdci = -k_r * sc[6];
  J[0] += dqdci; // dwdot[H2]/d[H2]
  J[1] -= dqdci; // dwdot[H]/d[H2]
  J[6] += dqdci; // dwdot[HO2]/d[H2]
  J[7] -= dqdci; // dwdot[H2O2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[39] += dqdci; // dwdot[HO2]/d[H]
  J[40] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[HO2]
  dqdci = -k_r * sc[0];
  J[198] += dqdci; // dwdot[H2]/d[HO2]
  J[199] -= dqdci; // dwdot[H]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  J[205] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[1];
  J[231] += dqdci; // dwdot[H2]/d[H2O2]
  J[232] -= dqdci; // dwdot[H]/d[H2O2]
  J[237] += dqdci; // dwdot[HO2]/d[H2O2]
  J[238] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT
  J[1063] -= dqdT; // dwdot[H2O2]/dT

  // reaction 47: H + H2O2 <=> H2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[7];
  k_f = 10000000 * exp(-(1811.57999689699) * invT);
  dlnkfdT = (1811.57999689699) * invT2;
  // reverse
  phi_r = sc[4] * sc[5];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[5] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[4] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[4] += q; // OH
  wdot[5] += q; // H2O
  wdot[7] -= q; // H2O2
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[37] += dqdci; // dwdot[OH]/d[H]
  J[38] += dqdci; // dwdot[H2O]/d[H]
  J[40] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[5];
  J[133] -= dqdci; // dwdot[H]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[139] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[4];
  J[166] -= dqdci; // dwdot[H]/d[H2O]
  J[169] += dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[172] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[1];
  J[232] -= dqdci; // dwdot[H]/d[H2O2]
  J[235] += dqdci; // dwdot[OH]/d[H2O2]
  J[236] += dqdci; // dwdot[H2O]/d[H2O2]
  J[238] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1063] -= dqdT; // dwdot[H2O2]/dT

  // reaction 48: CH + H <=> C + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[9];
  k_f = 110000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[8];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[8] + g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[9]) + (h_RT[0] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // H2
  wdot[1] -= q; // H
  wdot[8] += q; // C
  wdot[9] -= q; // CH
  // d()/d[H2]
  dqdci = -k_r * sc[8];
  J[0] += dqdci; // dwdot[H2]/d[H2]
  J[1] -= dqdci; // dwdot[H]/d[H2]
  J[8] += dqdci; // dwdot[C]/d[H2]
  J[9] -= dqdci; // dwdot[CH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[9];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[C]/d[H]
  J[42] -= dqdci; // dwdot[CH]/d[H]
  // d()/d[C]
  dqdci = -k_r * sc[0];
  J[264] += dqdci; // dwdot[H2]/d[C]
  J[265] -= dqdci; // dwdot[H]/d[C]
  J[272] += dqdci; // dwdot[C]/d[C]
  J[273] -= dqdci; // dwdot[CH]/d[C]
  // d()/d[CH]
  dqdci = +k_f * sc[1];
  J[297] += dqdci; // dwdot[H2]/d[CH]
  J[298] -= dqdci; // dwdot[H]/d[CH]
  J[305] += dqdci; // dwdot[C]/d[CH]
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1064] += dqdT; // dwdot[C]/dT
  J[1065] -= dqdT; // dwdot[CH]/dT

  // reaction 50: CH2(S) + H <=> CH + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[9];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[9] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[11]) + (h_RT[0] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[9] += q;  // CH
  wdot[11] -= q; // CH2(S)
  // d()/d[H2]
  dqdci = -k_r * sc[9];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[9] += dqdci;  // dwdot[CH]/d[H2]
  J[11] -= dqdci; // dwdot[CH2(S)]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[11];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[42] += dqdci; // dwdot[CH]/d[H]
  J[44] -= dqdci; // dwdot[CH2(S)]/d[H]
  // d()/d[CH]
  dqdci = -k_r * sc[0];
  J[297] += dqdci; // dwdot[H2]/d[CH]
  J[298] -= dqdci; // dwdot[H]/d[CH]
  J[306] += dqdci; // dwdot[CH]/d[CH]
  J[308] -= dqdci; // dwdot[CH2(S)]/d[CH]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[1];
  J[363] += dqdci; // dwdot[H2]/d[CH2(S)]
  J[364] -= dqdci; // dwdot[H]/d[CH2(S)]
  J[372] += dqdci; // dwdot[CH]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1065] += dqdT; // dwdot[CH]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 52: CH4 + H <=> CH3 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[13];
  k_f = 660 * exp(1.62 * tc[0] - (5454.86865732316) * invT);
  dlnkfdT = 1.62 * invT + (5454.86865732316) * invT2;
  // reverse
  phi_r = sc[0] * sc[12];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[13]) + (h_RT[0] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[12] += q; // CH3
  wdot[13] -= q; // CH4
  // d()/d[H2]
  dqdci = -k_r * sc[12];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[12] += dqdci; // dwdot[CH3]/d[H2]
  J[13] -= dqdci; // dwdot[CH4]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[13];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  J[46] -= dqdci; // dwdot[CH4]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[0];
  J[396] += dqdci; // dwdot[H2]/d[CH3]
  J[397] -= dqdci; // dwdot[H]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  J[409] -= dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[1];
  J[429] += dqdci; // dwdot[H2]/d[CH4]
  J[430] -= dqdci; // dwdot[H]/d[CH4]
  J[441] += dqdci; // dwdot[CH3]/d[CH4]
  J[442] -= dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT
  J[1069] -= dqdT; // dwdot[CH4]/dT

  // reaction 54: H + HCO <=> CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[16];
  k_f = 73400000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[14];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[16]) + (h_RT[0] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[H2]
  dqdci = -k_r * sc[14];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[14] += dqdci; // dwdot[CO]/d[H2]
  J[16] -= dqdci; // dwdot[HCO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[16];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[47] += dqdci; // dwdot[CO]/d[H]
  J[49] -= dqdci; // dwdot[HCO]/d[H]
  // d()/d[CO]
  dqdci = -k_r * sc[0];
  J[462] += dqdci; // dwdot[H2]/d[CO]
  J[463] -= dqdci; // dwdot[H]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[478] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[1];
  J[528] += dqdci; // dwdot[H2]/d[HCO]
  J[529] -= dqdci; // dwdot[H]/d[HCO]
  J[542] += dqdci; // dwdot[CO]/d[HCO]
  J[544] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1072] -= dqdT; // dwdot[HCO]/dT

  // reaction 57: CH2O + H <=> H2 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 23000 * exp(1.05 * tc[0] - (1648.03458051046) * invT);
  dlnkfdT = 1.05 * invT + (1648.03458051046) * invT2;
  // reverse
  phi_r = sc[0] * sc[16];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[0] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[H2]
  dqdci = -k_r * sc[16];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[16] += dqdci; // dwdot[HCO]/d[H2]
  J[17] -= dqdci; // dwdot[CH2O]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[17];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[49] += dqdci; // dwdot[HCO]/d[H]
  J[50] -= dqdci; // dwdot[CH2O]/d[H]
  // d()/d[HCO]
  dqdci = -k_r * sc[0];
  J[528] += dqdci; // dwdot[H2]/d[HCO]
  J[529] -= dqdci; // dwdot[H]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  J[545] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[1];
  J[561] += dqdci; // dwdot[H2]/d[CH2O]
  J[562] -= dqdci; // dwdot[H]/d[CH2O]
  J[577] += dqdci; // dwdot[HCO]/d[CH2O]
  J[578] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT
  J[1073] -= dqdT; // dwdot[CH2O]/dT

  // reaction 59: CH2OH + H <=> CH2O + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[18];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[17];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[18]) + (h_RT[0] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[17] += q; // CH2O
  wdot[18] -= q; // CH2OH
  // d()/d[H2]
  dqdci = -k_r * sc[17];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[17] += dqdci; // dwdot[CH2O]/d[H2]
  J[18] -= dqdci; // dwdot[CH2OH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[18];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[50] += dqdci; // dwdot[CH2O]/d[H]
  J[51] -= dqdci; // dwdot[CH2OH]/d[H]
  // d()/d[CH2O]
  dqdci = -k_r * sc[0];
  J[561] += dqdci; // dwdot[H2]/d[CH2O]
  J[562] -= dqdci; // dwdot[H]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[579] -= dqdci; // dwdot[CH2OH]/d[CH2O]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[1];
  J[594] += dqdci; // dwdot[H2]/d[CH2OH]
  J[595] -= dqdci; // dwdot[H]/d[CH2OH]
  J[611] += dqdci; // dwdot[CH2O]/d[CH2OH]
  J[612] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT
  J[1074] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 60: CH2OH + H <=> CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[18];
  k_f = 12000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[12];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[12] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[18]) + (h_RT[4] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[12] += q; // CH3
  wdot[18] -= q; // CH2OH
  // d()/d[H]
  dqdci = +k_f * sc[18];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[37] += dqdci; // dwdot[OH]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  J[51] -= dqdci; // dwdot[CH2OH]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[133] -= dqdci; // dwdot[H]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[144] += dqdci; // dwdot[CH3]/d[OH]
  J[150] -= dqdci; // dwdot[CH2OH]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[4];
  J[397] -= dqdci; // dwdot[H]/d[CH3]
  J[400] += dqdci; // dwdot[OH]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  J[414] -= dqdci; // dwdot[CH2OH]/d[CH3]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[1];
  J[595] -= dqdci; // dwdot[H]/d[CH2OH]
  J[598] += dqdci; // dwdot[OH]/d[CH2OH]
  J[606] += dqdci; // dwdot[CH3]/d[CH2OH]
  J[612] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT
  J[1074] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 61: CH2OH + H <=> CH2(S) + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[18];
  k_f = 6000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[11];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[11] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[18]) + (h_RT[5] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2O
  wdot[11] += q; // CH2(S)
  wdot[18] -= q; // CH2OH
  // d()/d[H]
  dqdci = +k_f * sc[18];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[38] += dqdci; // dwdot[H2O]/d[H]
  J[44] += dqdci; // dwdot[CH2(S)]/d[H]
  J[51] -= dqdci; // dwdot[CH2OH]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[166] -= dqdci; // dwdot[H]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[176] += dqdci; // dwdot[CH2(S)]/d[H2O]
  J[183] -= dqdci; // dwdot[CH2OH]/d[H2O]
  // d()/d[CH2(S)]
  dqdci = -k_r * sc[5];
  J[364] -= dqdci; // dwdot[H]/d[CH2(S)]
  J[368] += dqdci; // dwdot[H2O]/d[CH2(S)]
  J[374] += dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[381] -= dqdci; // dwdot[CH2OH]/d[CH2(S)]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[1];
  J[595] -= dqdci; // dwdot[H]/d[CH2OH]
  J[599] += dqdci; // dwdot[H2O]/d[CH2OH]
  J[605] += dqdci; // dwdot[CH2(S)]/d[CH2OH]
  J[612] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1067] += dqdT; // dwdot[CH2(S)]/dT
  J[1074] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 63: CH3O + H <=> CH2OH + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 3.4 * exp(1.6 * tc[0]);
  dlnkfdT = 1.6 * invT;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(g_RT[1] - g_RT[1] - g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // CH2OH
  wdot[19] -= q; // CH3O
  // d()/d[H]
  dqdci = +k_f * sc[19] - k_r * sc[18];
  J[51] += dqdci; // dwdot[CH2OH]/d[H]
  J[52] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[1];
  J[612] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[613] -= dqdci; // dwdot[CH3O]/d[CH2OH]
  // d()/d[CH3O]
  dqdci = +k_f * sc[1];
  J[645] += dqdci; // dwdot[CH2OH]/d[CH3O]
  J[646] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1074] += dqdT; // dwdot[CH2OH]/dT
  J[1075] -= dqdT; // dwdot[CH3O]/dT

  // reaction 64: CH3O + H <=> CH2O + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[17];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[17] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[0] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[17] += q; // CH2O
  wdot[19] -= q; // CH3O
  // d()/d[H2]
  dqdci = -k_r * sc[17];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[17] += dqdci; // dwdot[CH2O]/d[H2]
  J[19] -= dqdci; // dwdot[CH3O]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[50] += dqdci; // dwdot[CH2O]/d[H]
  J[52] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[CH2O]
  dqdci = -k_r * sc[0];
  J[561] += dqdci; // dwdot[H2]/d[CH2O]
  J[562] -= dqdci; // dwdot[H]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[580] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[1];
  J[627] += dqdci; // dwdot[H2]/d[CH3O]
  J[628] -= dqdci; // dwdot[H]/d[CH3O]
  J[644] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[646] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT
  J[1075] -= dqdT; // dwdot[CH3O]/dT

  // reaction 65: CH3O + H <=> CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 32000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[12];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[12] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[4] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[12] += q; // CH3
  wdot[19] -= q; // CH3O
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[37] += dqdci; // dwdot[OH]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  J[52] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[133] -= dqdci; // dwdot[H]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[144] += dqdci; // dwdot[CH3]/d[OH]
  J[151] -= dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[4];
  J[397] -= dqdci; // dwdot[H]/d[CH3]
  J[400] += dqdci; // dwdot[OH]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  J[415] -= dqdci; // dwdot[CH3O]/d[CH3]
  // d()/d[CH3O]
  dqdci = +k_f * sc[1];
  J[628] -= dqdci; // dwdot[H]/d[CH3O]
  J[631] += dqdci; // dwdot[OH]/d[CH3O]
  J[639] += dqdci; // dwdot[CH3]/d[CH3O]
  J[646] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT
  J[1075] -= dqdT; // dwdot[CH3O]/dT

  // reaction 66: CH3O + H <=> CH2(S) + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 16000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[11];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[11] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[5] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2O
  wdot[11] += q; // CH2(S)
  wdot[19] -= q; // CH3O
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[38] += dqdci; // dwdot[H2O]/d[H]
  J[44] += dqdci; // dwdot[CH2(S)]/d[H]
  J[52] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[166] -= dqdci; // dwdot[H]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[176] += dqdci; // dwdot[CH2(S)]/d[H2O]
  J[184] -= dqdci; // dwdot[CH3O]/d[H2O]
  // d()/d[CH2(S)]
  dqdci = -k_r * sc[5];
  J[364] -= dqdci; // dwdot[H]/d[CH2(S)]
  J[368] += dqdci; // dwdot[H2O]/d[CH2(S)]
  J[374] += dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[382] -= dqdci; // dwdot[CH3O]/d[CH2(S)]
  // d()/d[CH3O]
  dqdci = +k_f * sc[1];
  J[628] -= dqdci; // dwdot[H]/d[CH3O]
  J[632] += dqdci; // dwdot[H2O]/d[CH3O]
  J[638] += dqdci; // dwdot[CH2(S)]/d[CH3O]
  J[646] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1067] += dqdT; // dwdot[CH2(S)]/dT
  J[1075] -= dqdT; // dwdot[CH3O]/dT

  // reaction 67: CH3OH + H <=> CH2OH + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[20];
  k_f = 17 * exp(2.1 * tc[0] - (2450.66516246898) * invT);
  dlnkfdT = 2.1 * invT + (2450.66516246898) * invT2;
  // reverse
  phi_r = sc[0] * sc[18];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[20]) + (h_RT[0] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  // d()/d[H2]
  dqdci = -k_r * sc[18];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[18] += dqdci; // dwdot[CH2OH]/d[H2]
  J[20] -= dqdci; // dwdot[CH3OH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[51] += dqdci; // dwdot[CH2OH]/d[H]
  J[53] -= dqdci; // dwdot[CH3OH]/d[H]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[0];
  J[594] += dqdci; // dwdot[H2]/d[CH2OH]
  J[595] -= dqdci; // dwdot[H]/d[CH2OH]
  J[612] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[614] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[1];
  J[660] += dqdci; // dwdot[H2]/d[CH3OH]
  J[661] -= dqdci; // dwdot[H]/d[CH3OH]
  J[678] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[680] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1074] += dqdT; // dwdot[CH2OH]/dT
  J[1076] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 68: CH3OH + H <=> CH3O + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[20];
  k_f = 4.2 * exp(2.1 * tc[0] - (2450.66516246898) * invT);
  dlnkfdT = 2.1 * invT + (2450.66516246898) * invT2;
  // reverse
  phi_r = sc[0] * sc[19];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[20]) + (h_RT[0] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  // d()/d[H2]
  dqdci = -k_r * sc[19];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[19] += dqdci; // dwdot[CH3O]/d[H2]
  J[20] -= dqdci; // dwdot[CH3OH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[52] += dqdci; // dwdot[CH3O]/d[H]
  J[53] -= dqdci; // dwdot[CH3OH]/d[H]
  // d()/d[CH3O]
  dqdci = -k_r * sc[0];
  J[627] += dqdci; // dwdot[H2]/d[CH3O]
  J[628] -= dqdci; // dwdot[H]/d[CH3O]
  J[646] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[647] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[1];
  J[660] += dqdci; // dwdot[H2]/d[CH3OH]
  J[661] -= dqdci; // dwdot[H]/d[CH3OH]
  J[679] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[680] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1075] += dqdT; // dwdot[CH3O]/dT
  J[1076] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 72: C2H3 + H <=> C2H2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[23];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[22];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[22] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[23]) + (h_RT[0] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[22] += q; // C2H2
  wdot[23] -= q; // C2H3
  // d()/d[H2]
  dqdci = -k_r * sc[22];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[22] += dqdci; // dwdot[C2H2]/d[H2]
  J[23] -= dqdci; // dwdot[C2H3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[23];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[C2H2]/d[H]
  J[56] -= dqdci; // dwdot[C2H3]/d[H]
  // d()/d[C2H2]
  dqdci = -k_r * sc[0];
  J[726] += dqdci; // dwdot[H2]/d[C2H2]
  J[727] -= dqdci; // dwdot[H]/d[C2H2]
  J[748] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[749] -= dqdci; // dwdot[C2H3]/d[C2H2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[1];
  J[759] += dqdci; // dwdot[H2]/d[C2H3]
  J[760] -= dqdci; // dwdot[H]/d[C2H3]
  J[781] += dqdci; // dwdot[C2H2]/d[C2H3]
  J[782] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1078] += dqdT; // dwdot[C2H2]/dT
  J[1079] -= dqdT; // dwdot[C2H3]/dT

  // reaction 74: C2H4 + H <=> C2H3 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[24];
  k_f = 1.325 * exp(2.53 * tc[0] - (6159.37198944977) * invT);
  dlnkfdT = 2.53 * invT + (6159.37198944977) * invT2;
  // reverse
  phi_r = sc[0] * sc[23];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[24]) + (h_RT[0] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[23] += q; // C2H3
  wdot[24] -= q; // C2H4
  // d()/d[H2]
  dqdci = -k_r * sc[23];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[23] += dqdci; // dwdot[C2H3]/d[H2]
  J[24] -= dqdci; // dwdot[C2H4]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[24];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[56] += dqdci; // dwdot[C2H3]/d[H]
  J[57] -= dqdci; // dwdot[C2H4]/d[H]
  // d()/d[C2H3]
  dqdci = -k_r * sc[0];
  J[759] += dqdci; // dwdot[H2]/d[C2H3]
  J[760] -= dqdci; // dwdot[H]/d[C2H3]
  J[782] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[783] -= dqdci; // dwdot[C2H4]/d[C2H3]
  // d()/d[C2H4]
  dqdci = +k_f * sc[1];
  J[792] += dqdci; // dwdot[H2]/d[C2H4]
  J[793] -= dqdci; // dwdot[H]/d[C2H4]
  J[815] += dqdci; // dwdot[C2H3]/d[C2H4]
  J[816] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1079] += dqdT; // dwdot[C2H3]/dT
  J[1080] -= dqdT; // dwdot[C2H4]/dT

  // reaction 76: C2H5 + H <=> C2H4 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[25];
  k_f = 2000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[24];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[24] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[25]) + (h_RT[0] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[24] += q; // C2H4
  wdot[25] -= q; // C2H5
  // d()/d[H2]
  dqdci = -k_r * sc[24];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[24] += dqdci; // dwdot[C2H4]/d[H2]
  J[25] -= dqdci; // dwdot[C2H5]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[25];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[57] += dqdci; // dwdot[C2H4]/d[H]
  J[58] -= dqdci; // dwdot[C2H5]/d[H]
  // d()/d[C2H4]
  dqdci = -k_r * sc[0];
  J[792] += dqdci; // dwdot[H2]/d[C2H4]
  J[793] -= dqdci; // dwdot[H]/d[C2H4]
  J[816] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[817] -= dqdci; // dwdot[C2H5]/d[C2H4]
  // d()/d[C2H5]
  dqdci = +k_f * sc[1];
  J[825] += dqdci; // dwdot[H2]/d[C2H5]
  J[826] -= dqdci; // dwdot[H]/d[C2H5]
  J[849] += dqdci; // dwdot[C2H4]/d[C2H5]
  J[850] -= dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1080] += dqdT; // dwdot[C2H4]/dT
  J[1081] -= dqdT; // dwdot[C2H5]/dT

  // reaction 77: C2H6 + H <=> C2H5 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[26];
  k_f = 115 * exp(1.9 * tc[0] - (3789.22149350954) * invT);
  dlnkfdT = 1.9 * invT + (3789.22149350954) * invT2;
  // reverse
  phi_r = sc[0] * sc[25];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[26]) + (h_RT[0] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  // d()/d[H2]
  dqdci = -k_r * sc[25];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[25] += dqdci; // dwdot[C2H5]/d[H2]
  J[26] -= dqdci; // dwdot[C2H6]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[26];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[58] += dqdci; // dwdot[C2H5]/d[H]
  J[59] -= dqdci; // dwdot[C2H6]/d[H]
  // d()/d[C2H5]
  dqdci = -k_r * sc[0];
  J[825] += dqdci; // dwdot[H2]/d[C2H5]
  J[826] -= dqdci; // dwdot[H]/d[C2H5]
  J[850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[1];
  J[858] += dqdci; // dwdot[H2]/d[C2H6]
  J[859] -= dqdci; // dwdot[H]/d[C2H6]
  J[883] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[884] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1081] += dqdT; // dwdot[C2H5]/dT
  J[1082] -= dqdT; // dwdot[C2H6]/dT

  // reaction 78: H + HCCO <=> CH2(S) + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[27];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[11] * sc[14];
  Kc = exp(g_RT[1] - g_RT[11] - g_RT[14] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[27]) + (h_RT[11] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[11] += q; // CH2(S)
  wdot[14] += q; // CO
  wdot[27] -= q; // HCCO
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[44] += dqdci; // dwdot[CH2(S)]/d[H]
  J[47] += dqdci; // dwdot[CO]/d[H]
  J[60] -= dqdci; // dwdot[HCCO]/d[H]
  // d()/d[CH2(S)]
  dqdci = -k_r * sc[14];
  J[364] -= dqdci; // dwdot[H]/d[CH2(S)]
  J[374] += dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[377] += dqdci; // dwdot[CO]/d[CH2(S)]
  J[390] -= dqdci; // dwdot[HCCO]/d[CH2(S)]
  // d()/d[CO]
  dqdci = -k_r * sc[11];
  J[463] -= dqdci; // dwdot[H]/d[CO]
  J[473] += dqdci; // dwdot[CH2(S)]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[489] -= dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[1];
  J[892] -= dqdci; // dwdot[H]/d[HCCO]
  J[902] += dqdci; // dwdot[CH2(S)]/d[HCCO]
  J[905] += dqdci; // dwdot[CO]/d[HCCO]
  J[918] -= dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1067] += dqdT; // dwdot[CH2(S)]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1083] -= dqdT; // dwdot[HCCO]/dT

  // reaction 79: CH2CO + H <=> H2 + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[28];
  k_f = 50000000 * exp(-(4025.73332643776) * invT);
  dlnkfdT = (4025.73332643776) * invT2;
  // reverse
  phi_r = sc[0] * sc[27];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[27] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[28]) + (h_RT[0] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[27] += q; // HCCO
  wdot[28] -= q; // CH2CO
  // d()/d[H2]
  dqdci = -k_r * sc[27];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[27] += dqdci; // dwdot[HCCO]/d[H2]
  J[28] -= dqdci; // dwdot[CH2CO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[28];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[60] += dqdci; // dwdot[HCCO]/d[H]
  J[61] -= dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[HCCO]
  dqdci = -k_r * sc[0];
  J[891] += dqdci; // dwdot[H2]/d[HCCO]
  J[892] -= dqdci; // dwdot[H]/d[HCCO]
  J[918] += dqdci; // dwdot[HCCO]/d[HCCO]
  J[919] -= dqdci; // dwdot[CH2CO]/d[HCCO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[1];
  J[924] += dqdci; // dwdot[H2]/d[CH2CO]
  J[925] -= dqdci; // dwdot[H]/d[CH2CO]
  J[951] += dqdci; // dwdot[HCCO]/d[CH2CO]
  J[952] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1083] += dqdT; // dwdot[HCCO]/dT
  J[1084] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 80: CH2CO + H <=> CH3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[28];
  k_f = 11300000 * exp(-(1725.02673037858) * invT);
  dlnkfdT = (1725.02673037858) * invT2;
  // reverse
  phi_r = sc[12] * sc[14];
  Kc = exp(g_RT[1] - g_RT[12] - g_RT[14] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[28]) + (h_RT[12] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[12] += q; // CH3
  wdot[14] += q; // CO
  wdot[28] -= q; // CH2CO
  // d()/d[H]
  dqdci = +k_f * sc[28];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  J[47] += dqdci; // dwdot[CO]/d[H]
  J[61] -= dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[14];
  J[397] -= dqdci; // dwdot[H]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  J[410] += dqdci; // dwdot[CO]/d[CH3]
  J[424] -= dqdci; // dwdot[CH2CO]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[12];
  J[463] -= dqdci; // dwdot[H]/d[CO]
  J[474] += dqdci; // dwdot[CH3]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[490] -= dqdci; // dwdot[CH2CO]/d[CO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[1];
  J[925] -= dqdci; // dwdot[H]/d[CH2CO]
  J[936] += dqdci; // dwdot[CH3]/d[CH2CO]
  J[938] += dqdci; // dwdot[CO]/d[CH2CO]
  J[952] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1084] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 81: H + HCCOH <=> CH2CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[29];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[28];
  Kc = exp(g_RT[1] - g_RT[1] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[29]) + (h_RT[1] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[28] += q; // CH2CO
  wdot[29] -= q; // HCCOH
  // d()/d[H]
  dqdci = +k_f * sc[29] - k_r * sc[28];
  J[61] += dqdci; // dwdot[CH2CO]/d[H]
  J[62] -= dqdci; // dwdot[HCCOH]/d[H]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[1];
  J[952] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[953] -= dqdci; // dwdot[HCCOH]/d[CH2CO]
  // d()/d[HCCOH]
  dqdci = +k_f * sc[1];
  J[985] += dqdci; // dwdot[CH2CO]/d[HCCOH]
  J[986] -= dqdci; // dwdot[HCCOH]/d[HCCOH]
  // d()/dT
  J[1084] += dqdT; // dwdot[CH2CO]/dT
  J[1085] -= dqdT; // dwdot[HCCOH]/dT

  // reaction 83: H2 + OH <=> H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 216 * exp(1.51 * tc[0] - (1726.03316371019) * invT);
  dlnkfdT = 1.51 * invT + (1726.03316371019) * invT2;
  // reverse
  phi_r = sc[1] * sc[5];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[4]) + (h_RT[1] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // H2
  wdot[1] += q; // H
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  // d()/d[H2]
  dqdci = +k_f * sc[4];
  J[0] -= dqdci; // dwdot[H2]/d[H2]
  J[1] += dqdci; // dwdot[H]/d[H2]
  J[4] -= dqdci; // dwdot[OH]/d[H2]
  J[5] += dqdci; // dwdot[H2O]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[5];
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[34] += dqdci; // dwdot[H]/d[H]
  J[37] -= dqdci; // dwdot[OH]/d[H]
  J[38] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[0];
  J[132] -= dqdci; // dwdot[H2]/d[OH]
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[1];
  J[165] -= dqdci; // dwdot[H2]/d[H2O]
  J[166] += dqdci; // dwdot[H]/d[H2O]
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1056] -= dqdT; // dwdot[H2]/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT

  // reaction 85: 2 OH <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 0.0357 * exp(2.4 * tc[0] - (-1061.78716484796) * invT);
  dlnkfdT = 2.4 * invT + (-1061.78716484796) * invT2;
  // reverse
  phi_r = sc[2] * sc[5];
  Kc = exp(-g_RT[2] + 2.000000 * g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[2] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;     // O
  wdot[4] -= 2 * q; // OH
  wdot[5] += q;     // H2O
  // d()/d[O]
  dqdci = -k_r * sc[5];
  J[68] += dqdci;      // dwdot[O]/d[O]
  J[70] += -2 * dqdci; // dwdot[OH]/d[O]
  J[71] += dqdci;      // dwdot[H2O]/d[O]
  // d()/d[OH]
  dqdci = +k_f * 2.000000 * sc[4];
  J[134] += dqdci;      // dwdot[O]/d[OH]
  J[136] += -2 * dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci;      // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[2];
  J[167] += dqdci;      // dwdot[O]/d[H2O]
  J[169] += -2 * dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci;      // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1058] += dqdT;      // dwdot[O]/dT
  J[1060] += -2 * dqdT; // dwdot[OH]/dT
  J[1061] += dqdT;      // dwdot[H2O]/dT

  // reaction 86: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[6];
  k_f = 29000000 * exp(-(-251.60833290236) * invT);
  dlnkfdT = (-251.60833290236) * invT2;
  // reverse
  phi_r = sc[3] * sc[5];
  Kc = exp(-g_RT[3] + g_RT[4] - g_RT[5] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[6]) + (h_RT[3] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // O2
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] -= q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[5];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[103] -= dqdci; // dwdot[OH]/d[O2]
  J[104] += dqdci; // dwdot[H2O]/d[O2]
  J[105] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[OH]
  dqdci = +k_f * sc[6];
  J[135] += dqdci; // dwdot[O2]/d[OH]
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[138] -= dqdci; // dwdot[HO2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[168] += dqdci; // dwdot[O2]/d[H2O]
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[4];
  J[201] += dqdci; // dwdot[O2]/d[HO2]
  J[202] -= dqdci; // dwdot[OH]/d[HO2]
  J[203] += dqdci; // dwdot[H2O]/d[HO2]
  J[204] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[HO2]/dT

  // reaction 87: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 1750000 * exp(-(161.02933305751) * invT);
  dlnkfdT = (161.02933305751) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[7]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[138] += dqdci; // dwdot[HO2]/d[OH]
  J[139] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[6];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] += dqdci; // dwdot[HO2]/d[H2O]
  J[172] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[202] -= dqdci; // dwdot[OH]/d[HO2]
  J[203] += dqdci; // dwdot[H2O]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  J[205] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[4];
  J[235] -= dqdci; // dwdot[OH]/d[H2O2]
  J[236] += dqdci; // dwdot[H2O]/d[H2O2]
  J[237] += dqdci; // dwdot[HO2]/d[H2O2]
  J[238] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT
  J[1063] -= dqdT; // dwdot[H2O2]/dT

  // reaction 88: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 580000000 * exp(-(4810.75132509312) * invT);
  dlnkfdT = (4810.75132509312) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[7]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[138] += dqdci; // dwdot[HO2]/d[OH]
  J[139] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[6];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] += dqdci; // dwdot[HO2]/d[H2O]
  J[172] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[202] -= dqdci; // dwdot[OH]/d[HO2]
  J[203] += dqdci; // dwdot[H2O]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  J[205] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[4];
  J[235] -= dqdci; // dwdot[OH]/d[H2O2]
  J[236] += dqdci; // dwdot[H2O]/d[H2O2]
  J[237] += dqdci; // dwdot[HO2]/d[H2O2]
  J[238] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT
  J[1063] -= dqdT; // dwdot[H2O2]/dT

  // reaction 89: C + OH <=> CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[8];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[8] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[8]) + (h_RT[1] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[8] -= q;  // C
  wdot[14] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[14];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[37] -= dqdci; // dwdot[OH]/d[H]
  J[41] -= dqdci; // dwdot[C]/d[H]
  J[47] += dqdci; // dwdot[CO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[8];
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[140] -= dqdci; // dwdot[C]/d[OH]
  J[146] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[C]
  dqdci = +k_f * sc[4];
  J[265] += dqdci; // dwdot[H]/d[C]
  J[268] -= dqdci; // dwdot[OH]/d[C]
  J[272] -= dqdci; // dwdot[C]/d[C]
  J[278] += dqdci; // dwdot[CO]/d[C]
  // d()/d[CO]
  dqdci = -k_r * sc[1];
  J[463] += dqdci; // dwdot[H]/d[CO]
  J[466] -= dqdci; // dwdot[OH]/d[CO]
  J[470] -= dqdci; // dwdot[C]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1064] -= dqdT; // dwdot[C]/dT
  J[1070] += dqdT; // dwdot[CO]/dT

  // reaction 90: CH + OH <=> H + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[16];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[9] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[9]) + (h_RT[1] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[9] -= q;  // CH
  wdot[16] += q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[16];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[37] -= dqdci; // dwdot[OH]/d[H]
  J[42] -= dqdci; // dwdot[CH]/d[H]
  J[49] += dqdci; // dwdot[HCO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[9];
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[141] -= dqdci; // dwdot[CH]/d[OH]
  J[148] += dqdci; // dwdot[HCO]/d[OH]
  // d()/d[CH]
  dqdci = +k_f * sc[4];
  J[298] += dqdci; // dwdot[H]/d[CH]
  J[301] -= dqdci; // dwdot[OH]/d[CH]
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[313] += dqdci; // dwdot[HCO]/d[CH]
  // d()/d[HCO]
  dqdci = -k_r * sc[1];
  J[529] += dqdci; // dwdot[H]/d[HCO]
  J[532] -= dqdci; // dwdot[OH]/d[HCO]
  J[537] -= dqdci; // dwdot[CH]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT

  // reaction 91: CH2 + OH <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[17];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[10] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[1] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[10] -= q; // CH2
  wdot[17] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[17];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[37] -= dqdci; // dwdot[OH]/d[H]
  J[43] -= dqdci; // dwdot[CH2]/d[H]
  J[50] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[142] -= dqdci; // dwdot[CH2]/d[OH]
  J[149] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH2]
  dqdci = +k_f * sc[4];
  J[331] += dqdci; // dwdot[H]/d[CH2]
  J[334] -= dqdci; // dwdot[OH]/d[CH2]
  J[340] -= dqdci; // dwdot[CH2]/d[CH2]
  J[347] += dqdci; // dwdot[CH2O]/d[CH2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[562] += dqdci; // dwdot[H]/d[CH2O]
  J[565] -= dqdci; // dwdot[OH]/d[CH2O]
  J[571] -= dqdci; // dwdot[CH2]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT

  // reaction 92: CH2 + OH <=> CH + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 11.3 * exp(2 * tc[0] - (1509.64999741416) * invT);
  dlnkfdT = 2 * invT + (1509.64999741416) * invT2;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[9] += q;  // CH
  wdot[10] -= q; // CH2
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[141] += dqdci; // dwdot[CH]/d[OH]
  J[142] -= dqdci; // dwdot[CH2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[9];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[174] += dqdci; // dwdot[CH]/d[H2O]
  J[175] -= dqdci; // dwdot[CH2]/d[H2O]
  // d()/d[CH]
  dqdci = -k_r * sc[5];
  J[301] -= dqdci; // dwdot[OH]/d[CH]
  J[302] += dqdci; // dwdot[H2O]/d[CH]
  J[306] += dqdci; // dwdot[CH]/d[CH]
  J[307] -= dqdci; // dwdot[CH2]/d[CH]
  // d()/d[CH2]
  dqdci = +k_f * sc[4];
  J[334] -= dqdci; // dwdot[OH]/d[CH2]
  J[335] += dqdci; // dwdot[H2O]/d[CH2]
  J[339] += dqdci; // dwdot[CH]/d[CH2]
  J[340] -= dqdci; // dwdot[CH2]/d[CH2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1065] += dqdT; // dwdot[CH]/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT

  // reaction 93: CH2(S) + OH <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[11];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[17];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[11] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[11]) + (h_RT[1] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[11] -= q; // CH2(S)
  wdot[17] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[17];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[37] -= dqdci; // dwdot[OH]/d[H]
  J[44] -= dqdci; // dwdot[CH2(S)]/d[H]
  J[50] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[11];
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[143] -= dqdci; // dwdot[CH2(S)]/d[OH]
  J[149] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[4];
  J[364] += dqdci; // dwdot[H]/d[CH2(S)]
  J[367] -= dqdci; // dwdot[OH]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[380] += dqdci; // dwdot[CH2O]/d[CH2(S)]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[562] += dqdci; // dwdot[H]/d[CH2O]
  J[565] -= dqdci; // dwdot[OH]/d[CH2O]
  J[572] -= dqdci; // dwdot[CH2(S)]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT

  // reaction 95: CH3 + OH <=> CH2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 56 * exp(1.6 * tc[0] - (2727.43432866158) * invT);
  dlnkfdT = 1.6 * invT + (2727.43432866158) * invT2;
  // reverse
  phi_r = sc[5] * sc[10];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[10] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[5] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[10] += q; // CH2
  wdot[12] -= q; // CH3
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[142] += dqdci; // dwdot[CH2]/d[OH]
  J[144] -= dqdci; // dwdot[CH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[10];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[175] += dqdci; // dwdot[CH2]/d[H2O]
  J[177] -= dqdci; // dwdot[CH3]/d[H2O]
  // d()/d[CH2]
  dqdci = -k_r * sc[5];
  J[334] -= dqdci; // dwdot[OH]/d[CH2]
  J[335] += dqdci; // dwdot[H2O]/d[CH2]
  J[340] += dqdci; // dwdot[CH2]/d[CH2]
  J[342] -= dqdci; // dwdot[CH3]/d[CH2]
  // d()/d[CH3]
  dqdci = +k_f * sc[4];
  J[400] -= dqdci; // dwdot[OH]/d[CH3]
  J[401] += dqdci; // dwdot[H2O]/d[CH3]
  J[406] += dqdci; // dwdot[CH2]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1066] += dqdT; // dwdot[CH2]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT

  // reaction 96: CH3 + OH <=> CH2(S) + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 25010000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[11];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[5] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[11] += q; // CH2(S)
  wdot[12] -= q; // CH3
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[143] += dqdci; // dwdot[CH2(S)]/d[OH]
  J[144] -= dqdci; // dwdot[CH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[176] += dqdci; // dwdot[CH2(S)]/d[H2O]
  J[177] -= dqdci; // dwdot[CH3]/d[H2O]
  // d()/d[CH2(S)]
  dqdci = -k_r * sc[5];
  J[367] -= dqdci; // dwdot[OH]/d[CH2(S)]
  J[368] += dqdci; // dwdot[H2O]/d[CH2(S)]
  J[374] += dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[375] -= dqdci; // dwdot[CH3]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = +k_f * sc[4];
  J[400] -= dqdci; // dwdot[OH]/d[CH3]
  J[401] += dqdci; // dwdot[H2O]/d[CH3]
  J[407] += dqdci; // dwdot[CH2(S)]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1067] += dqdT; // dwdot[CH2(S)]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT

  // reaction 97: CH4 + OH <=> CH3 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[13];
  k_f = 100 * exp(1.6 * tc[0] - (1570.03599731073) * invT);
  dlnkfdT = 1.6 * invT + (1570.03599731073) * invT2;
  // reverse
  phi_r = sc[5] * sc[12];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[13]) + (h_RT[5] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[12] += q; // CH3
  wdot[13] -= q; // CH4
  // d()/d[OH]
  dqdci = +k_f * sc[13];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[144] += dqdci; // dwdot[CH3]/d[OH]
  J[145] -= dqdci; // dwdot[CH4]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[12];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[177] += dqdci; // dwdot[CH3]/d[H2O]
  J[178] -= dqdci; // dwdot[CH4]/d[H2O]
  // d()/d[CH3]
  dqdci = -k_r * sc[5];
  J[400] -= dqdci; // dwdot[OH]/d[CH3]
  J[401] += dqdci; // dwdot[H2O]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  J[409] -= dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[4];
  J[433] -= dqdci; // dwdot[OH]/d[CH4]
  J[434] += dqdci; // dwdot[H2O]/d[CH4]
  J[441] += dqdci; // dwdot[CH3]/d[CH4]
  J[442] -= dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT
  J[1069] -= dqdT; // dwdot[CH4]/dT

  // reaction 98: CO + OH <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[14];
  k_f = 47.6 * exp(1.228 * tc[0] - (35.2251666063304) * invT);
  dlnkfdT = 1.228 * invT + (35.2251666063304) * invT2;
  // reverse
  phi_r = sc[1] * sc[15];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[14]) + (h_RT[1] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[14] -= q; // CO
  wdot[15] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[15];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[37] -= dqdci; // dwdot[OH]/d[H]
  J[47] -= dqdci; // dwdot[CO]/d[H]
  J[48] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[14];
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[146] -= dqdci; // dwdot[CO]/d[OH]
  J[147] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[CO]
  dqdci = +k_f * sc[4];
  J[463] += dqdci; // dwdot[H]/d[CO]
  J[466] -= dqdci; // dwdot[OH]/d[CO]
  J[476] -= dqdci; // dwdot[CO]/d[CO]
  J[477] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[1];
  J[496] += dqdci; // dwdot[H]/d[CO2]
  J[499] -= dqdci; // dwdot[OH]/d[CO2]
  J[509] -= dqdci; // dwdot[CO]/d[CO2]
  J[510] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1070] -= dqdT; // dwdot[CO]/dT
  J[1071] += dqdT; // dwdot[CO2]/dT

  // reaction 99: HCO + OH <=> CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[16];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[14];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[16]) + (h_RT[5] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[OH]
  dqdci = +k_f * sc[16];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[146] += dqdci; // dwdot[CO]/d[OH]
  J[148] -= dqdci; // dwdot[HCO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[14];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[179] += dqdci; // dwdot[CO]/d[H2O]
  J[181] -= dqdci; // dwdot[HCO]/d[H2O]
  // d()/d[CO]
  dqdci = -k_r * sc[5];
  J[466] -= dqdci; // dwdot[OH]/d[CO]
  J[467] += dqdci; // dwdot[H2O]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[478] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[4];
  J[532] -= dqdci; // dwdot[OH]/d[HCO]
  J[533] += dqdci; // dwdot[H2O]/d[HCO]
  J[542] += dqdci; // dwdot[CO]/d[HCO]
  J[544] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1072] -= dqdT; // dwdot[HCO]/dT

  // reaction 100: CH2O + OH <=> H2O + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[17];
  k_f = 3430 * exp(1.18 * tc[0] - (-224.93784961471) * invT);
  dlnkfdT = 1.18 * invT + (-224.93784961471) * invT2;
  // reverse
  phi_r = sc[5] * sc[16];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[17]) + (h_RT[5] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[148] += dqdci; // dwdot[HCO]/d[OH]
  J[149] -= dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[16];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[181] += dqdci; // dwdot[HCO]/d[H2O]
  J[182] -= dqdci; // dwdot[CH2O]/d[H2O]
  // d()/d[HCO]
  dqdci = -k_r * sc[5];
  J[532] -= dqdci; // dwdot[OH]/d[HCO]
  J[533] += dqdci; // dwdot[H2O]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  J[545] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[4];
  J[565] -= dqdci; // dwdot[OH]/d[CH2O]
  J[566] += dqdci; // dwdot[H2O]/d[CH2O]
  J[577] += dqdci; // dwdot[HCO]/d[CH2O]
  J[578] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT
  J[1073] -= dqdT; // dwdot[CH2O]/dT

  // reaction 101: CH2OH + OH <=> CH2O + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 5000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[17];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[5] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[17] += q; // CH2O
  wdot[18] -= q; // CH2OH
  // d()/d[OH]
  dqdci = +k_f * sc[18];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[149] += dqdci; // dwdot[CH2O]/d[OH]
  J[150] -= dqdci; // dwdot[CH2OH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[182] += dqdci; // dwdot[CH2O]/d[H2O]
  J[183] -= dqdci; // dwdot[CH2OH]/d[H2O]
  // d()/d[CH2O]
  dqdci = -k_r * sc[5];
  J[565] -= dqdci; // dwdot[OH]/d[CH2O]
  J[566] += dqdci; // dwdot[H2O]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[579] -= dqdci; // dwdot[CH2OH]/d[CH2O]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[4];
  J[598] -= dqdci; // dwdot[OH]/d[CH2OH]
  J[599] += dqdci; // dwdot[H2O]/d[CH2OH]
  J[611] += dqdci; // dwdot[CH2O]/d[CH2OH]
  J[612] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT
  J[1074] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 102: CH3O + OH <=> CH2O + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[19];
  k_f = 5000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[17];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[17] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[19]) + (h_RT[5] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[17] += q; // CH2O
  wdot[19] -= q; // CH3O
  // d()/d[OH]
  dqdci = +k_f * sc[19];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[149] += dqdci; // dwdot[CH2O]/d[OH]
  J[151] -= dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[182] += dqdci; // dwdot[CH2O]/d[H2O]
  J[184] -= dqdci; // dwdot[CH3O]/d[H2O]
  // d()/d[CH2O]
  dqdci = -k_r * sc[5];
  J[565] -= dqdci; // dwdot[OH]/d[CH2O]
  J[566] += dqdci; // dwdot[H2O]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[580] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[4];
  J[631] -= dqdci; // dwdot[OH]/d[CH3O]
  J[632] += dqdci; // dwdot[H2O]/d[CH3O]
  J[644] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[646] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT
  J[1075] -= dqdT; // dwdot[CH3O]/dT

  // reaction 103: CH3OH + OH <=> CH2OH + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[20];
  k_f = 1.44 * exp(2 * tc[0] - (-422.701999275965) * invT);
  dlnkfdT = 2 * invT + (-422.701999275965) * invT2;
  // reverse
  phi_r = sc[5] * sc[18];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[20]) + (h_RT[5] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  // d()/d[OH]
  dqdci = +k_f * sc[20];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[150] += dqdci; // dwdot[CH2OH]/d[OH]
  J[152] -= dqdci; // dwdot[CH3OH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[18];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[183] += dqdci; // dwdot[CH2OH]/d[H2O]
  J[185] -= dqdci; // dwdot[CH3OH]/d[H2O]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[5];
  J[598] -= dqdci; // dwdot[OH]/d[CH2OH]
  J[599] += dqdci; // dwdot[H2O]/d[CH2OH]
  J[612] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[614] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[4];
  J[664] -= dqdci; // dwdot[OH]/d[CH3OH]
  J[665] += dqdci; // dwdot[H2O]/d[CH3OH]
  J[678] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[680] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1074] += dqdT; // dwdot[CH2OH]/dT
  J[1076] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 104: CH3OH + OH <=> CH3O + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[20];
  k_f = 6.3 * exp(2 * tc[0] - (754.82499870708) * invT);
  dlnkfdT = 2 * invT + (754.82499870708) * invT2;
  // reverse
  phi_r = sc[5] * sc[19];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[20]) + (h_RT[5] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  // d()/d[OH]
  dqdci = +k_f * sc[20];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[151] += dqdci; // dwdot[CH3O]/d[OH]
  J[152] -= dqdci; // dwdot[CH3OH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[19];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[184] += dqdci; // dwdot[CH3O]/d[H2O]
  J[185] -= dqdci; // dwdot[CH3OH]/d[H2O]
  // d()/d[CH3O]
  dqdci = -k_r * sc[5];
  J[631] -= dqdci; // dwdot[OH]/d[CH3O]
  J[632] += dqdci; // dwdot[H2O]/d[CH3O]
  J[646] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[647] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[4];
  J[664] -= dqdci; // dwdot[OH]/d[CH3OH]
  J[665] += dqdci; // dwdot[H2O]/d[CH3OH]
  J[679] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[680] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1075] += dqdT; // dwdot[CH3O]/dT
  J[1076] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 105: C2H + OH <=> H + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[21];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[27];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[21] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[21]) + (h_RT[1] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[21] -= q; // C2H
  wdot[27] += q; // HCCO
  // d()/d[H]
  dqdci = -k_r * sc[27];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[37] -= dqdci; // dwdot[OH]/d[H]
  J[54] -= dqdci; // dwdot[C2H]/d[H]
  J[60] += dqdci; // dwdot[HCCO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[21];
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[153] -= dqdci; // dwdot[C2H]/d[OH]
  J[159] += dqdci; // dwdot[HCCO]/d[OH]
  // d()/d[C2H]
  dqdci = +k_f * sc[4];
  J[694] += dqdci; // dwdot[H]/d[C2H]
  J[697] -= dqdci; // dwdot[OH]/d[C2H]
  J[714] -= dqdci; // dwdot[C2H]/d[C2H]
  J[720] += dqdci; // dwdot[HCCO]/d[C2H]
  // d()/d[HCCO]
  dqdci = -k_r * sc[1];
  J[892] += dqdci; // dwdot[H]/d[HCCO]
  J[895] -= dqdci; // dwdot[OH]/d[HCCO]
  J[912] -= dqdci; // dwdot[C2H]/d[HCCO]
  J[918] += dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1077] -= dqdT; // dwdot[C2H]/dT
  J[1083] += dqdT; // dwdot[HCCO]/dT

  // reaction 106: C2H2 + OH <=> CH2CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 2.18e-10 * exp(4.5 * tc[0] - (-503.21666580472) * invT);
  dlnkfdT = 4.5 * invT + (-503.21666580472) * invT2;
  // reverse
  phi_r = sc[1] * sc[28];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[22] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[1] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[22] -= q; // C2H2
  wdot[28] += q; // CH2CO
  // d()/d[H]
  dqdci = -k_r * sc[28];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[37] -= dqdci; // dwdot[OH]/d[H]
  J[55] -= dqdci; // dwdot[C2H2]/d[H]
  J[61] += dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[154] -= dqdci; // dwdot[C2H2]/d[OH]
  J[160] += dqdci; // dwdot[CH2CO]/d[OH]
  // d()/d[C2H2]
  dqdci = +k_f * sc[4];
  J[727] += dqdci; // dwdot[H]/d[C2H2]
  J[730] -= dqdci; // dwdot[OH]/d[C2H2]
  J[748] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[754] += dqdci; // dwdot[CH2CO]/d[C2H2]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[1];
  J[925] += dqdci; // dwdot[H]/d[CH2CO]
  J[928] -= dqdci; // dwdot[OH]/d[CH2CO]
  J[946] -= dqdci; // dwdot[C2H2]/d[CH2CO]
  J[952] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1078] -= dqdT; // dwdot[C2H2]/dT
  J[1084] += dqdT; // dwdot[CH2CO]/dT

  // reaction 107: C2H2 + OH <=> H + HCCOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 0.504 * exp(2.3 * tc[0] - (6793.42498836372) * invT);
  dlnkfdT = 2.3 * invT + (6793.42498836372) * invT2;
  // reverse
  phi_r = sc[1] * sc[29];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[22] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[1] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[22] -= q; // C2H2
  wdot[29] += q; // HCCOH
  // d()/d[H]
  dqdci = -k_r * sc[29];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[37] -= dqdci; // dwdot[OH]/d[H]
  J[55] -= dqdci; // dwdot[C2H2]/d[H]
  J[62] += dqdci; // dwdot[HCCOH]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[154] -= dqdci; // dwdot[C2H2]/d[OH]
  J[161] += dqdci; // dwdot[HCCOH]/d[OH]
  // d()/d[C2H2]
  dqdci = +k_f * sc[4];
  J[727] += dqdci; // dwdot[H]/d[C2H2]
  J[730] -= dqdci; // dwdot[OH]/d[C2H2]
  J[748] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[755] += dqdci; // dwdot[HCCOH]/d[C2H2]
  // d()/d[HCCOH]
  dqdci = -k_r * sc[1];
  J[958] += dqdci; // dwdot[H]/d[HCCOH]
  J[961] -= dqdci; // dwdot[OH]/d[HCCOH]
  J[979] -= dqdci; // dwdot[C2H2]/d[HCCOH]
  J[986] += dqdci; // dwdot[HCCOH]/d[HCCOH]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1078] -= dqdT; // dwdot[C2H2]/dT
  J[1085] += dqdT; // dwdot[HCCOH]/dT

  // reaction 108: C2H2 + OH <=> C2H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 33.7 * exp(2 * tc[0] - (7045.03332126608) * invT);
  dlnkfdT = 2 * invT + (7045.03332126608) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[21] += q; // C2H
  wdot[22] -= q; // C2H2
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[153] += dqdci; // dwdot[C2H]/d[OH]
  J[154] -= dqdci; // dwdot[C2H2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[186] += dqdci; // dwdot[C2H]/d[H2O]
  J[187] -= dqdci; // dwdot[C2H2]/d[H2O]
  // d()/d[C2H]
  dqdci = -k_r * sc[5];
  J[697] -= dqdci; // dwdot[OH]/d[C2H]
  J[698] += dqdci; // dwdot[H2O]/d[C2H]
  J[714] += dqdci; // dwdot[C2H]/d[C2H]
  J[715] -= dqdci; // dwdot[C2H2]/d[C2H]
  // d()/d[C2H2]
  dqdci = +k_f * sc[4];
  J[730] -= dqdci; // dwdot[OH]/d[C2H2]
  J[731] += dqdci; // dwdot[H2O]/d[C2H2]
  J[747] += dqdci; // dwdot[C2H]/d[C2H2]
  J[748] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1077] += dqdT; // dwdot[C2H]/dT
  J[1078] -= dqdT; // dwdot[C2H2]/dT

  // reaction 109: C2H2 + OH <=> CH3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 4.83e-10 * exp(4 * tc[0] - (-1006.43333160944) * invT);
  dlnkfdT = 4 * invT + (-1006.43333160944) * invT2;
  // reverse
  phi_r = sc[12] * sc[14];
  Kc = exp(g_RT[4] - g_RT[12] - g_RT[14] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[12] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[12] += q; // CH3
  wdot[14] += q; // CO
  wdot[22] -= q; // C2H2
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[144] += dqdci; // dwdot[CH3]/d[OH]
  J[146] += dqdci; // dwdot[CO]/d[OH]
  J[154] -= dqdci; // dwdot[C2H2]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[14];
  J[400] -= dqdci; // dwdot[OH]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  J[410] += dqdci; // dwdot[CO]/d[CH3]
  J[418] -= dqdci; // dwdot[C2H2]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[12];
  J[466] -= dqdci; // dwdot[OH]/d[CO]
  J[474] += dqdci; // dwdot[CH3]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[484] -= dqdci; // dwdot[C2H2]/d[CO]
  // d()/d[C2H2]
  dqdci = +k_f * sc[4];
  J[730] -= dqdci; // dwdot[OH]/d[C2H2]
  J[738] += dqdci; // dwdot[CH3]/d[C2H2]
  J[740] += dqdci; // dwdot[CO]/d[C2H2]
  J[748] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1078] -= dqdT; // dwdot[C2H2]/dT

  // reaction 110: C2H3 + OH <=> C2H2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[23];
  k_f = 5000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[22];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[22] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[23]) + (h_RT[5] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[22] += q; // C2H2
  wdot[23] -= q; // C2H3
  // d()/d[OH]
  dqdci = +k_f * sc[23];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[154] += dqdci; // dwdot[C2H2]/d[OH]
  J[155] -= dqdci; // dwdot[C2H3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[22];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[187] += dqdci; // dwdot[C2H2]/d[H2O]
  J[188] -= dqdci; // dwdot[C2H3]/d[H2O]
  // d()/d[C2H2]
  dqdci = -k_r * sc[5];
  J[730] -= dqdci; // dwdot[OH]/d[C2H2]
  J[731] += dqdci; // dwdot[H2O]/d[C2H2]
  J[748] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[749] -= dqdci; // dwdot[C2H3]/d[C2H2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[4];
  J[763] -= dqdci; // dwdot[OH]/d[C2H3]
  J[764] += dqdci; // dwdot[H2O]/d[C2H3]
  J[781] += dqdci; // dwdot[C2H2]/d[C2H3]
  J[782] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1078] += dqdT; // dwdot[C2H2]/dT
  J[1079] -= dqdT; // dwdot[C2H3]/dT

  // reaction 111: C2H4 + OH <=> C2H3 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[24];
  k_f = 3.6 * exp(2 * tc[0] - (1258.0416645118) * invT);
  dlnkfdT = 2 * invT + (1258.0416645118) * invT2;
  // reverse
  phi_r = sc[5] * sc[23];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[24]) + (h_RT[5] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[23] += q; // C2H3
  wdot[24] -= q; // C2H4
  // d()/d[OH]
  dqdci = +k_f * sc[24];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[155] += dqdci; // dwdot[C2H3]/d[OH]
  J[156] -= dqdci; // dwdot[C2H4]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[188] += dqdci; // dwdot[C2H3]/d[H2O]
  J[189] -= dqdci; // dwdot[C2H4]/d[H2O]
  // d()/d[C2H3]
  dqdci = -k_r * sc[5];
  J[763] -= dqdci; // dwdot[OH]/d[C2H3]
  J[764] += dqdci; // dwdot[H2O]/d[C2H3]
  J[782] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[783] -= dqdci; // dwdot[C2H4]/d[C2H3]
  // d()/d[C2H4]
  dqdci = +k_f * sc[4];
  J[796] -= dqdci; // dwdot[OH]/d[C2H4]
  J[797] += dqdci; // dwdot[H2O]/d[C2H4]
  J[815] += dqdci; // dwdot[C2H3]/d[C2H4]
  J[816] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1079] += dqdT; // dwdot[C2H3]/dT
  J[1080] -= dqdT; // dwdot[C2H4]/dT

  // reaction 112: C2H6 + OH <=> C2H5 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[26];
  k_f = 3.54 * exp(2.12 * tc[0] - (437.798499250106) * invT);
  dlnkfdT = 2.12 * invT + (437.798499250106) * invT2;
  // reverse
  phi_r = sc[5] * sc[25];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[26]) + (h_RT[5] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  // d()/d[OH]
  dqdci = +k_f * sc[26];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[157] += dqdci; // dwdot[C2H5]/d[OH]
  J[158] -= dqdci; // dwdot[C2H6]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[25];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[190] += dqdci; // dwdot[C2H5]/d[H2O]
  J[191] -= dqdci; // dwdot[C2H6]/d[H2O]
  // d()/d[C2H5]
  dqdci = -k_r * sc[5];
  J[829] -= dqdci; // dwdot[OH]/d[C2H5]
  J[830] += dqdci; // dwdot[H2O]/d[C2H5]
  J[850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[4];
  J[862] -= dqdci; // dwdot[OH]/d[C2H6]
  J[863] += dqdci; // dwdot[H2O]/d[C2H6]
  J[883] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[884] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1081] += dqdT; // dwdot[C2H5]/dT
  J[1082] -= dqdT; // dwdot[C2H6]/dT

  // reaction 113: CH2CO + OH <=> H2O + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[28];
  k_f = 7500000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[5] * sc[27];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[27] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[28]) + (h_RT[5] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[27] += q; // HCCO
  wdot[28] -= q; // CH2CO
  // d()/d[OH]
  dqdci = +k_f * sc[28];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[159] += dqdci; // dwdot[HCCO]/d[OH]
  J[160] -= dqdci; // dwdot[CH2CO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[27];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[192] += dqdci; // dwdot[HCCO]/d[H2O]
  J[193] -= dqdci; // dwdot[CH2CO]/d[H2O]
  // d()/d[HCCO]
  dqdci = -k_r * sc[5];
  J[895] -= dqdci; // dwdot[OH]/d[HCCO]
  J[896] += dqdci; // dwdot[H2O]/d[HCCO]
  J[918] += dqdci; // dwdot[HCCO]/d[HCCO]
  J[919] -= dqdci; // dwdot[CH2CO]/d[HCCO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[4];
  J[928] -= dqdci; // dwdot[OH]/d[CH2CO]
  J[929] += dqdci; // dwdot[H2O]/d[CH2CO]
  J[951] += dqdci; // dwdot[HCCO]/d[CH2CO]
  J[952] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1083] += dqdT; // dwdot[HCCO]/dT
  J[1084] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 114: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[6] * sc[6]);
  k_f = 130000 * exp(-(-820.243165261693) * invT);
  dlnkfdT = (-820.243165261693) * invT2;
  // reverse
  phi_r = sc[3] * sc[7];
  Kc = exp(-g_RT[3] + 2.000000 * g_RT[6] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[6]) + (h_RT[3] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O2
  wdot[6] -= 2 * q; // HO2
  wdot[7] += q;     // H2O2
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[102] += dqdci;      // dwdot[O2]/d[O2]
  J[105] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[106] += dqdci;      // dwdot[H2O2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[6];
  J[201] += dqdci;      // dwdot[O2]/d[HO2]
  J[204] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[205] += dqdci;      // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[3];
  J[234] += dqdci;      // dwdot[O2]/d[H2O2]
  J[237] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[238] += dqdci;      // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1059] += dqdT;      // dwdot[O2]/dT
  J[1062] += -2 * dqdT; // dwdot[HO2]/dT
  J[1063] += dqdT;      // dwdot[H2O2]/dT

  // reaction 115: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[6] * sc[6]);
  k_f = 420000000 * exp(-(6038.59998965664) * invT);
  dlnkfdT = (6038.59998965664) * invT2;
  // reverse
  phi_r = sc[3] * sc[7];
  Kc = exp(-g_RT[3] + 2.000000 * g_RT[6] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[6]) + (h_RT[3] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O2
  wdot[6] -= 2 * q; // HO2
  wdot[7] += q;     // H2O2
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[102] += dqdci;      // dwdot[O2]/d[O2]
  J[105] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[106] += dqdci;      // dwdot[H2O2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[6];
  J[201] += dqdci;      // dwdot[O2]/d[HO2]
  J[204] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[205] += dqdci;      // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[3];
  J[234] += dqdci;      // dwdot[O2]/d[H2O2]
  J[237] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[238] += dqdci;      // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1059] += dqdT;      // dwdot[O2]/dT
  J[1062] += -2 * dqdT; // dwdot[HO2]/dT
  J[1063] += dqdT;      // dwdot[H2O2]/dT

  // reaction 116: CH2 + HO2 <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[10];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[17];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[10] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[10]) + (h_RT[4] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[10] -= q; // CH2
  wdot[17] += q; // CH2O
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[138] -= dqdci; // dwdot[HO2]/d[OH]
  J[142] -= dqdci; // dwdot[CH2]/d[OH]
  J[149] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[202] += dqdci; // dwdot[OH]/d[HO2]
  J[204] -= dqdci; // dwdot[HO2]/d[HO2]
  J[208] -= dqdci; // dwdot[CH2]/d[HO2]
  J[215] += dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[CH2]
  dqdci = +k_f * sc[6];
  J[334] += dqdci; // dwdot[OH]/d[CH2]
  J[336] -= dqdci; // dwdot[HO2]/d[CH2]
  J[340] -= dqdci; // dwdot[CH2]/d[CH2]
  J[347] += dqdci; // dwdot[CH2O]/d[CH2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[4];
  J[565] += dqdci; // dwdot[OH]/d[CH2O]
  J[567] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[571] -= dqdci; // dwdot[CH2]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1062] -= dqdT; // dwdot[HO2]/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT

  // reaction 117: CH3 + HO2 <=> CH4 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[12];
  k_f = 1000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[13];
  Kc = exp(-g_RT[3] + g_RT[6] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[12]) + (h_RT[3] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[6] -= q;  // HO2
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  // d()/d[O2]
  dqdci = -k_r * sc[13];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[105] -= dqdci; // dwdot[HO2]/d[O2]
  J[111] -= dqdci; // dwdot[CH3]/d[O2]
  J[112] += dqdci; // dwdot[CH4]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[201] += dqdci; // dwdot[O2]/d[HO2]
  J[204] -= dqdci; // dwdot[HO2]/d[HO2]
  J[210] -= dqdci; // dwdot[CH3]/d[HO2]
  J[211] += dqdci; // dwdot[CH4]/d[HO2]
  // d()/d[CH3]
  dqdci = +k_f * sc[6];
  J[399] += dqdci; // dwdot[O2]/d[CH3]
  J[402] -= dqdci; // dwdot[HO2]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[409] += dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[3];
  J[432] += dqdci; // dwdot[O2]/d[CH4]
  J[435] -= dqdci; // dwdot[HO2]/d[CH4]
  J[441] -= dqdci; // dwdot[CH3]/d[CH4]
  J[442] += dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1062] -= dqdT; // dwdot[HO2]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1069] += dqdT; // dwdot[CH4]/dT

  // reaction 118: CH3 + HO2 <=> CH3O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[12];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[19];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[12] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[12]) + (h_RT[4] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[12] -= q; // CH3
  wdot[19] += q; // CH3O
  // d()/d[OH]
  dqdci = -k_r * sc[19];
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[138] -= dqdci; // dwdot[HO2]/d[OH]
  J[144] -= dqdci; // dwdot[CH3]/d[OH]
  J[151] += dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[202] += dqdci; // dwdot[OH]/d[HO2]
  J[204] -= dqdci; // dwdot[HO2]/d[HO2]
  J[210] -= dqdci; // dwdot[CH3]/d[HO2]
  J[217] += dqdci; // dwdot[CH3O]/d[HO2]
  // d()/d[CH3]
  dqdci = +k_f * sc[6];
  J[400] += dqdci; // dwdot[OH]/d[CH3]
  J[402] -= dqdci; // dwdot[HO2]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[415] += dqdci; // dwdot[CH3O]/d[CH3]
  // d()/d[CH3O]
  dqdci = -k_r * sc[4];
  J[631] += dqdci; // dwdot[OH]/d[CH3O]
  J[633] -= dqdci; // dwdot[HO2]/d[CH3O]
  J[639] -= dqdci; // dwdot[CH3]/d[CH3O]
  J[646] += dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1062] -= dqdT; // dwdot[HO2]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1075] += dqdT; // dwdot[CH3O]/dT

  // reaction 119: CO + HO2 <=> CO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[14];
  k_f = 150000000 * exp(-(11875.9133129914) * invT);
  dlnkfdT = (11875.9133129914) * invT2;
  // reverse
  phi_r = sc[4] * sc[15];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[14]) + (h_RT[4] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[14] -= q; // CO
  wdot[15] += q; // CO2
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[138] -= dqdci; // dwdot[HO2]/d[OH]
  J[146] -= dqdci; // dwdot[CO]/d[OH]
  J[147] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[14];
  J[202] += dqdci; // dwdot[OH]/d[HO2]
  J[204] -= dqdci; // dwdot[HO2]/d[HO2]
  J[212] -= dqdci; // dwdot[CO]/d[HO2]
  J[213] += dqdci; // dwdot[CO2]/d[HO2]
  // d()/d[CO]
  dqdci = +k_f * sc[6];
  J[466] += dqdci; // dwdot[OH]/d[CO]
  J[468] -= dqdci; // dwdot[HO2]/d[CO]
  J[476] -= dqdci; // dwdot[CO]/d[CO]
  J[477] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[4];
  J[499] += dqdci; // dwdot[OH]/d[CO2]
  J[501] -= dqdci; // dwdot[HO2]/d[CO2]
  J[509] -= dqdci; // dwdot[CO]/d[CO2]
  J[510] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1062] -= dqdT; // dwdot[HO2]/dT
  J[1070] -= dqdT; // dwdot[CO]/dT
  J[1071] += dqdT; // dwdot[CO2]/dT

  // reaction 120: CH2O + HO2 <=> H2O2 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[17];
  k_f = 1000000 * exp(-(4025.73332643776) * invT);
  dlnkfdT = (4025.73332643776) * invT2;
  // reverse
  phi_r = sc[7] * sc[16];
  Kc = exp(g_RT[6] - g_RT[7] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[17]) + (h_RT[7] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[HO2]
  dqdci = +k_f * sc[17];
  J[204] -= dqdci; // dwdot[HO2]/d[HO2]
  J[205] += dqdci; // dwdot[H2O2]/d[HO2]
  J[214] += dqdci; // dwdot[HCO]/d[HO2]
  J[215] -= dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[16];
  J[237] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[238] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[247] += dqdci; // dwdot[HCO]/d[H2O2]
  J[248] -= dqdci; // dwdot[CH2O]/d[H2O2]
  // d()/d[HCO]
  dqdci = -k_r * sc[7];
  J[534] -= dqdci; // dwdot[HO2]/d[HCO]
  J[535] += dqdci; // dwdot[H2O2]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  J[545] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[6];
  J[567] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[568] += dqdci; // dwdot[H2O2]/d[CH2O]
  J[577] += dqdci; // dwdot[HCO]/d[CH2O]
  J[578] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1062] -= dqdT; // dwdot[HO2]/dT
  J[1063] += dqdT; // dwdot[H2O2]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT
  J[1073] -= dqdT; // dwdot[CH2O]/dT

  // reaction 121: C + O2 <=> CO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[8];
  k_f = 58000000 * exp(-(289.852799503519) * invT);
  dlnkfdT = (289.852799503519) * invT2;
  // reverse
  phi_r = sc[2] * sc[14];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[8] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[8]) + (h_RT[2] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[8] -= q;  // C
  wdot[14] += q; // CO
  // d()/d[O]
  dqdci = -k_r * sc[14];
  J[68] += dqdci; // dwdot[O]/d[O]
  J[69] -= dqdci; // dwdot[O2]/d[O]
  J[74] -= dqdci; // dwdot[C]/d[O]
  J[80] += dqdci; // dwdot[CO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[8];
  J[101] += dqdci; // dwdot[O]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[107] -= dqdci; // dwdot[C]/d[O2]
  J[113] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[C]
  dqdci = +k_f * sc[3];
  J[266] += dqdci; // dwdot[O]/d[C]
  J[267] -= dqdci; // dwdot[O2]/d[C]
  J[272] -= dqdci; // dwdot[C]/d[C]
  J[278] += dqdci; // dwdot[CO]/d[C]
  // d()/d[CO]
  dqdci = -k_r * sc[2];
  J[464] += dqdci; // dwdot[O]/d[CO]
  J[465] -= dqdci; // dwdot[O2]/d[CO]
  J[470] -= dqdci; // dwdot[C]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1058] += dqdT; // dwdot[O]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1064] -= dqdT; // dwdot[C]/dT
  J[1070] += dqdT; // dwdot[CO]/dT

  // reaction 122: C + CH2 <=> C2H + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[10];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = exp(-g_RT[1] + g_RT[8] + g_RT[10] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[10]) + (h_RT[1] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[8] -= q;  // C
  wdot[10] -= q; // CH2
  wdot[21] += q; // C2H
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[41] -= dqdci; // dwdot[C]/d[H]
  J[43] -= dqdci; // dwdot[CH2]/d[H]
  J[54] += dqdci; // dwdot[C2H]/d[H]
  // d()/d[C]
  dqdci = +k_f * sc[10];
  J[265] += dqdci; // dwdot[H]/d[C]
  J[272] -= dqdci; // dwdot[C]/d[C]
  J[274] -= dqdci; // dwdot[CH2]/d[C]
  J[285] += dqdci; // dwdot[C2H]/d[C]
  // d()/d[CH2]
  dqdci = +k_f * sc[8];
  J[331] += dqdci; // dwdot[H]/d[CH2]
  J[338] -= dqdci; // dwdot[C]/d[CH2]
  J[340] -= dqdci; // dwdot[CH2]/d[CH2]
  J[351] += dqdci; // dwdot[C2H]/d[CH2]
  // d()/d[C2H]
  dqdci = -k_r * sc[1];
  J[694] += dqdci; // dwdot[H]/d[C2H]
  J[701] -= dqdci; // dwdot[C]/d[C2H]
  J[703] -= dqdci; // dwdot[CH2]/d[C2H]
  J[714] += dqdci; // dwdot[C2H]/d[C2H]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1064] -= dqdT; // dwdot[C]/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1077] += dqdT; // dwdot[C2H]/dT

  // reaction 123: C + CH3 <=> C2H2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[12];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[22];
  Kc = exp(-g_RT[1] + g_RT[8] + g_RT[12] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[12]) + (h_RT[1] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[8] -= q;  // C
  wdot[12] -= q; // CH3
  wdot[22] += q; // C2H2
  // d()/d[H]
  dqdci = -k_r * sc[22];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[41] -= dqdci; // dwdot[C]/d[H]
  J[45] -= dqdci; // dwdot[CH3]/d[H]
  J[55] += dqdci; // dwdot[C2H2]/d[H]
  // d()/d[C]
  dqdci = +k_f * sc[12];
  J[265] += dqdci; // dwdot[H]/d[C]
  J[272] -= dqdci; // dwdot[C]/d[C]
  J[276] -= dqdci; // dwdot[CH3]/d[C]
  J[286] += dqdci; // dwdot[C2H2]/d[C]
  // d()/d[CH3]
  dqdci = +k_f * sc[8];
  J[397] += dqdci; // dwdot[H]/d[CH3]
  J[404] -= dqdci; // dwdot[C]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[418] += dqdci; // dwdot[C2H2]/d[CH3]
  // d()/d[C2H2]
  dqdci = -k_r * sc[1];
  J[727] += dqdci; // dwdot[H]/d[C2H2]
  J[734] -= dqdci; // dwdot[C]/d[C2H2]
  J[738] -= dqdci; // dwdot[CH3]/d[C2H2]
  J[748] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1064] -= dqdT; // dwdot[C]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1078] += dqdT; // dwdot[C2H2]/dT

  // reaction 124: CH + O2 <=> HCO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[9];
  k_f = 33000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[16];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[9] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[9]) + (h_RT[2] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[9] -= q;  // CH
  wdot[16] += q; // HCO
  // d()/d[O]
  dqdci = -k_r * sc[16];
  J[68] += dqdci; // dwdot[O]/d[O]
  J[69] -= dqdci; // dwdot[O2]/d[O]
  J[75] -= dqdci; // dwdot[CH]/d[O]
  J[82] += dqdci; // dwdot[HCO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[9];
  J[101] += dqdci; // dwdot[O]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[108] -= dqdci; // dwdot[CH]/d[O2]
  J[115] += dqdci; // dwdot[HCO]/d[O2]
  // d()/d[CH]
  dqdci = +k_f * sc[3];
  J[299] += dqdci; // dwdot[O]/d[CH]
  J[300] -= dqdci; // dwdot[O2]/d[CH]
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[313] += dqdci; // dwdot[HCO]/d[CH]
  // d()/d[HCO]
  dqdci = -k_r * sc[2];
  J[530] += dqdci; // dwdot[O]/d[HCO]
  J[531] -= dqdci; // dwdot[O2]/d[HCO]
  J[537] -= dqdci; // dwdot[CH]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1058] += dqdT; // dwdot[O]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT

  // reaction 125: CH + H2 <=> CH2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[9];
  k_f = 110.7 * exp(1.79 * tc[0] - (840.371831893882) * invT);
  dlnkfdT = 1.79 * invT + (840.371831893882) * invT2;
  // reverse
  phi_r = sc[1] * sc[10];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[9]) + (h_RT[1] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[10] += q; // CH2
  // d()/d[H2]
  dqdci = +k_f * sc[9];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[9] -= dqdci;  // dwdot[CH]/d[H2]
  J[10] += dqdci; // dwdot[CH2]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[10];
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[34] += dqdci; // dwdot[H]/d[H]
  J[42] -= dqdci; // dwdot[CH]/d[H]
  J[43] += dqdci; // dwdot[CH2]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[0];
  J[297] -= dqdci; // dwdot[H2]/d[CH]
  J[298] += dqdci; // dwdot[H]/d[CH]
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[307] += dqdci; // dwdot[CH2]/d[CH]
  // d()/d[CH2]
  dqdci = -k_r * sc[1];
  J[330] -= dqdci; // dwdot[H2]/d[CH2]
  J[331] += dqdci; // dwdot[H]/d[CH2]
  J[339] -= dqdci; // dwdot[CH]/d[CH2]
  J[340] += dqdci; // dwdot[CH2]/d[CH2]
  // d()/dT
  J[1056] -= dqdT; // dwdot[H2]/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1066] += dqdT; // dwdot[CH2]/dT

  // reaction 126: CH + H2O <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[9];
  k_f = 5710000 * exp(-(-379.928582682563) * invT);
  dlnkfdT = (-379.928582682563) * invT2;
  // reverse
  phi_r = sc[1] * sc[17];
  Kc = exp(-g_RT[1] + g_RT[5] + g_RT[9] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[9]) + (h_RT[1] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[5] -= q;  // H2O
  wdot[9] -= q;  // CH
  wdot[17] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[17];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[38] -= dqdci; // dwdot[H2O]/d[H]
  J[42] -= dqdci; // dwdot[CH]/d[H]
  J[50] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * sc[9];
  J[166] += dqdci; // dwdot[H]/d[H2O]
  J[170] -= dqdci; // dwdot[H2O]/d[H2O]
  J[174] -= dqdci; // dwdot[CH]/d[H2O]
  J[182] += dqdci; // dwdot[CH2O]/d[H2O]
  // d()/d[CH]
  dqdci = +k_f * sc[5];
  J[298] += dqdci; // dwdot[H]/d[CH]
  J[302] -= dqdci; // dwdot[H2O]/d[CH]
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[314] += dqdci; // dwdot[CH2O]/d[CH]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[562] += dqdci; // dwdot[H]/d[CH2O]
  J[566] -= dqdci; // dwdot[H2O]/d[CH2O]
  J[570] -= dqdci; // dwdot[CH]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1061] -= dqdT; // dwdot[H2O]/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT

  // reaction 127: CH + CH2 <=> C2H2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[10];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[22];
  Kc = exp(-g_RT[1] + g_RT[9] + g_RT[10] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[10]) + (h_RT[1] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[10] -= q; // CH2
  wdot[22] += q; // C2H2
  // d()/d[H]
  dqdci = -k_r * sc[22];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[42] -= dqdci; // dwdot[CH]/d[H]
  J[43] -= dqdci; // dwdot[CH2]/d[H]
  J[55] += dqdci; // dwdot[C2H2]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[10];
  J[298] += dqdci; // dwdot[H]/d[CH]
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[307] -= dqdci; // dwdot[CH2]/d[CH]
  J[319] += dqdci; // dwdot[C2H2]/d[CH]
  // d()/d[CH2]
  dqdci = +k_f * sc[9];
  J[331] += dqdci; // dwdot[H]/d[CH2]
  J[339] -= dqdci; // dwdot[CH]/d[CH2]
  J[340] -= dqdci; // dwdot[CH2]/d[CH2]
  J[352] += dqdci; // dwdot[C2H2]/d[CH2]
  // d()/d[C2H2]
  dqdci = -k_r * sc[1];
  J[727] += dqdci; // dwdot[H]/d[C2H2]
  J[735] -= dqdci; // dwdot[CH]/d[C2H2]
  J[736] -= dqdci; // dwdot[CH2]/d[C2H2]
  J[748] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1078] += dqdT; // dwdot[C2H2]/dT

  // reaction 128: CH + CH3 <=> C2H3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[12];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[23];
  Kc = exp(-g_RT[1] + g_RT[9] + g_RT[12] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[12]) + (h_RT[1] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[12] -= q; // CH3
  wdot[23] += q; // C2H3
  // d()/d[H]
  dqdci = -k_r * sc[23];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[42] -= dqdci; // dwdot[CH]/d[H]
  J[45] -= dqdci; // dwdot[CH3]/d[H]
  J[56] += dqdci; // dwdot[C2H3]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[12];
  J[298] += dqdci; // dwdot[H]/d[CH]
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[309] -= dqdci; // dwdot[CH3]/d[CH]
  J[320] += dqdci; // dwdot[C2H3]/d[CH]
  // d()/d[CH3]
  dqdci = +k_f * sc[9];
  J[397] += dqdci; // dwdot[H]/d[CH3]
  J[405] -= dqdci; // dwdot[CH]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[419] += dqdci; // dwdot[C2H3]/d[CH3]
  // d()/d[C2H3]
  dqdci = -k_r * sc[1];
  J[760] += dqdci; // dwdot[H]/d[C2H3]
  J[768] -= dqdci; // dwdot[CH]/d[C2H3]
  J[771] -= dqdci; // dwdot[CH3]/d[C2H3]
  J[782] += dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1079] += dqdT; // dwdot[C2H3]/dT

  // reaction 129: CH + CH4 <=> C2H4 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[13];
  k_f = 60000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[24];
  Kc = exp(-g_RT[1] + g_RT[9] + g_RT[13] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[13]) + (h_RT[1] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[13] -= q; // CH4
  wdot[24] += q; // C2H4
  // d()/d[H]
  dqdci = -k_r * sc[24];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[42] -= dqdci; // dwdot[CH]/d[H]
  J[46] -= dqdci; // dwdot[CH4]/d[H]
  J[57] += dqdci; // dwdot[C2H4]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[13];
  J[298] += dqdci; // dwdot[H]/d[CH]
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[310] -= dqdci; // dwdot[CH4]/d[CH]
  J[321] += dqdci; // dwdot[C2H4]/d[CH]
  // d()/d[CH4]
  dqdci = +k_f * sc[9];
  J[430] += dqdci; // dwdot[H]/d[CH4]
  J[438] -= dqdci; // dwdot[CH]/d[CH4]
  J[442] -= dqdci; // dwdot[CH4]/d[CH4]
  J[453] += dqdci; // dwdot[C2H4]/d[CH4]
  // d()/d[C2H4]
  dqdci = -k_r * sc[1];
  J[793] += dqdci; // dwdot[H]/d[C2H4]
  J[801] -= dqdci; // dwdot[CH]/d[C2H4]
  J[805] -= dqdci; // dwdot[CH4]/d[C2H4]
  J[816] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1069] -= dqdT; // dwdot[CH4]/dT
  J[1080] += dqdT; // dwdot[C2H4]/dT

  // reaction 131: CH + CO2 <=> CO + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[15];
  k_f = 3400000 * exp(-(347.219499405257) * invT);
  dlnkfdT = (347.219499405257) * invT2;
  // reverse
  phi_r = sc[14] * sc[16];
  Kc = exp(g_RT[9] - g_RT[14] + g_RT[15] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[15]) + (h_RT[14] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH
  wdot[14] += q; // CO
  wdot[15] -= q; // CO2
  wdot[16] += q; // HCO
  // d()/d[CH]
  dqdci = +k_f * sc[15];
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[311] += dqdci; // dwdot[CO]/d[CH]
  J[312] -= dqdci; // dwdot[CO2]/d[CH]
  J[313] += dqdci; // dwdot[HCO]/d[CH]
  // d()/d[CO]
  dqdci = -k_r * sc[16];
  J[471] -= dqdci; // dwdot[CH]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[477] -= dqdci; // dwdot[CO2]/d[CO]
  J[478] += dqdci; // dwdot[HCO]/d[CO]
  // d()/d[CO2]
  dqdci = +k_f * sc[9];
  J[504] -= dqdci; // dwdot[CH]/d[CO2]
  J[509] += dqdci; // dwdot[CO]/d[CO2]
  J[510] -= dqdci; // dwdot[CO2]/d[CO2]
  J[511] += dqdci; // dwdot[HCO]/d[CO2]
  // d()/d[HCO]
  dqdci = -k_r * sc[14];
  J[537] -= dqdci; // dwdot[CH]/d[HCO]
  J[542] += dqdci; // dwdot[CO]/d[HCO]
  J[543] -= dqdci; // dwdot[CO2]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1071] -= dqdT; // dwdot[CO2]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT

  // reaction 132: CH + CH2O <=> CH2CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[17];
  k_f = 94600000 * exp(-(-259.156582889431) * invT);
  dlnkfdT = (-259.156582889431) * invT2;
  // reverse
  phi_r = sc[1] * sc[28];
  Kc = exp(-g_RT[1] + g_RT[9] + g_RT[17] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[17]) + (h_RT[1] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[17] -= q; // CH2O
  wdot[28] += q; // CH2CO
  // d()/d[H]
  dqdci = -k_r * sc[28];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[42] -= dqdci; // dwdot[CH]/d[H]
  J[50] -= dqdci; // dwdot[CH2O]/d[H]
  J[61] += dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[17];
  J[298] += dqdci; // dwdot[H]/d[CH]
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[314] -= dqdci; // dwdot[CH2O]/d[CH]
  J[325] += dqdci; // dwdot[CH2CO]/d[CH]
  // d()/d[CH2O]
  dqdci = +k_f * sc[9];
  J[562] += dqdci; // dwdot[H]/d[CH2O]
  J[570] -= dqdci; // dwdot[CH]/d[CH2O]
  J[578] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[589] += dqdci; // dwdot[CH2CO]/d[CH2O]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[1];
  J[925] += dqdci; // dwdot[H]/d[CH2CO]
  J[933] -= dqdci; // dwdot[CH]/d[CH2CO]
  J[941] -= dqdci; // dwdot[CH2O]/d[CH2CO]
  J[952] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1073] -= dqdT; // dwdot[CH2O]/dT
  J[1084] += dqdT; // dwdot[CH2CO]/dT

  // reaction 133: CH + HCCO <=> C2H2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[27];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[22];
  Kc = exp(g_RT[9] - g_RT[14] - g_RT[22] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[27]) + (h_RT[14] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH
  wdot[14] += q; // CO
  wdot[22] += q; // C2H2
  wdot[27] -= q; // HCCO
  // d()/d[CH]
  dqdci = +k_f * sc[27];
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[311] += dqdci; // dwdot[CO]/d[CH]
  J[319] += dqdci; // dwdot[C2H2]/d[CH]
  J[324] -= dqdci; // dwdot[HCCO]/d[CH]
  // d()/d[CO]
  dqdci = -k_r * sc[22];
  J[471] -= dqdci; // dwdot[CH]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[484] += dqdci; // dwdot[C2H2]/d[CO]
  J[489] -= dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[C2H2]
  dqdci = -k_r * sc[14];
  J[735] -= dqdci; // dwdot[CH]/d[C2H2]
  J[740] += dqdci; // dwdot[CO]/d[C2H2]
  J[748] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[753] -= dqdci; // dwdot[HCCO]/d[C2H2]
  // d()/d[HCCO]
  dqdci = +k_f * sc[9];
  J[900] -= dqdci; // dwdot[CH]/d[HCCO]
  J[905] += dqdci; // dwdot[CO]/d[HCCO]
  J[913] += dqdci; // dwdot[C2H2]/d[HCCO]
  J[918] -= dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1078] += dqdT; // dwdot[C2H2]/dT
  J[1083] -= dqdT; // dwdot[HCCO]/dT

  // reaction 134: CH2 + O2 <=> HCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 13200000 * exp(-(754.82499870708) * invT);
  dlnkfdT = (754.82499870708) * invT2;
  // reverse
  phi_r = sc[4] * sc[16];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[10] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[10]) + (h_RT[4] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // OH
  wdot[10] -= q; // CH2
  wdot[16] += q; // HCO
  // d()/d[O2]
  dqdci = +k_f * sc[10];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[103] += dqdci; // dwdot[OH]/d[O2]
  J[109] -= dqdci; // dwdot[CH2]/d[O2]
  J[115] += dqdci; // dwdot[HCO]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[16];
  J[135] -= dqdci; // dwdot[O2]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[142] -= dqdci; // dwdot[CH2]/d[OH]
  J[148] += dqdci; // dwdot[HCO]/d[OH]
  // d()/d[CH2]
  dqdci = +k_f * sc[3];
  J[333] -= dqdci; // dwdot[O2]/d[CH2]
  J[334] += dqdci; // dwdot[OH]/d[CH2]
  J[340] -= dqdci; // dwdot[CH2]/d[CH2]
  J[346] += dqdci; // dwdot[HCO]/d[CH2]
  // d()/d[HCO]
  dqdci = -k_r * sc[4];
  J[531] -= dqdci; // dwdot[O2]/d[HCO]
  J[532] += dqdci; // dwdot[OH]/d[HCO]
  J[538] -= dqdci; // dwdot[CH2]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT

  // reaction 135: CH2 + H2 <=> CH3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[10];
  k_f = 0.5 * exp(2 * tc[0] - (3638.25649376812) * invT);
  dlnkfdT = 2 * invT + (3638.25649376812) * invT2;
  // reverse
  phi_r = sc[1] * sc[12];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[10] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[10]) + (h_RT[1] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[10] -= q; // CH2
  wdot[12] += q; // CH3
  // d()/d[H2]
  dqdci = +k_f * sc[10];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[10] -= dqdci; // dwdot[CH2]/d[H2]
  J[12] += dqdci; // dwdot[CH3]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[12];
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[34] += dqdci; // dwdot[H]/d[H]
  J[43] -= dqdci; // dwdot[CH2]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH2]
  dqdci = +k_f * sc[0];
  J[330] -= dqdci; // dwdot[H2]/d[CH2]
  J[331] += dqdci; // dwdot[H]/d[CH2]
  J[340] -= dqdci; // dwdot[CH2]/d[CH2]
  J[342] += dqdci; // dwdot[CH3]/d[CH2]
  // d()/d[CH3]
  dqdci = -k_r * sc[1];
  J[396] -= dqdci; // dwdot[H2]/d[CH3]
  J[397] += dqdci; // dwdot[H]/d[CH3]
  J[406] -= dqdci; // dwdot[CH2]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1056] -= dqdT; // dwdot[H2]/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT

  // reaction 136: 2 CH2 <=> C2H2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 32000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[22];
  Kc = exp(-g_RT[0] + 2.000000 * g_RT[10] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[10]) + (h_RT[0] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;      // H2
  wdot[10] -= 2 * q; // CH2
  wdot[22] += q;     // C2H2
  // d()/d[H2]
  dqdci = -k_r * sc[22];
  J[0] += dqdci;       // dwdot[H2]/d[H2]
  J[10] += -2 * dqdci; // dwdot[CH2]/d[H2]
  J[22] += dqdci;      // dwdot[C2H2]/d[H2]
  // d()/d[CH2]
  dqdci = +k_f * 2.000000 * sc[10];
  J[330] += dqdci;      // dwdot[H2]/d[CH2]
  J[340] += -2 * dqdci; // dwdot[CH2]/d[CH2]
  J[352] += dqdci;      // dwdot[C2H2]/d[CH2]
  // d()/d[C2H2]
  dqdci = -k_r * sc[0];
  J[726] += dqdci;      // dwdot[H2]/d[C2H2]
  J[736] += -2 * dqdci; // dwdot[CH2]/d[C2H2]
  J[748] += dqdci;      // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1056] += dqdT;      // dwdot[H2]/dT
  J[1066] += -2 * dqdT; // dwdot[CH2]/dT
  J[1078] += dqdT;      // dwdot[C2H2]/dT

  // reaction 137: CH2 + CH3 <=> C2H4 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[12];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[24];
  Kc = exp(-g_RT[1] + g_RT[10] + g_RT[12] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[12]) + (h_RT[1] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[10] -= q; // CH2
  wdot[12] -= q; // CH3
  wdot[24] += q; // C2H4
  // d()/d[H]
  dqdci = -k_r * sc[24];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[43] -= dqdci; // dwdot[CH2]/d[H]
  J[45] -= dqdci; // dwdot[CH3]/d[H]
  J[57] += dqdci; // dwdot[C2H4]/d[H]
  // d()/d[CH2]
  dqdci = +k_f * sc[12];
  J[331] += dqdci; // dwdot[H]/d[CH2]
  J[340] -= dqdci; // dwdot[CH2]/d[CH2]
  J[342] -= dqdci; // dwdot[CH3]/d[CH2]
  J[354] += dqdci; // dwdot[C2H4]/d[CH2]
  // d()/d[CH3]
  dqdci = +k_f * sc[10];
  J[397] += dqdci; // dwdot[H]/d[CH3]
  J[406] -= dqdci; // dwdot[CH2]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[420] += dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[1];
  J[793] += dqdci; // dwdot[H]/d[C2H4]
  J[802] -= dqdci; // dwdot[CH2]/d[C2H4]
  J[804] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[816] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1080] += dqdT; // dwdot[C2H4]/dT

  // reaction 138: CH2 + CH4 <=> 2 CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[13];
  k_f = 2.46 * exp(2 * tc[0] - (4161.60182620503) * invT);
  dlnkfdT = 2 * invT + (4161.60182620503) * invT2;
  // reverse
  phi_r = (sc[12] * sc[12]);
  Kc = exp(g_RT[10] - 2.000000 * g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[13]) + (2.000000 * h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q;     // CH2
  wdot[12] += 2 * q; // CH3
  wdot[13] -= q;     // CH4
  // d()/d[CH2]
  dqdci = +k_f * sc[13];
  J[340] -= dqdci;     // dwdot[CH2]/d[CH2]
  J[342] += 2 * dqdci; // dwdot[CH3]/d[CH2]
  J[343] -= dqdci;     // dwdot[CH4]/d[CH2]
  // d()/d[CH3]
  dqdci = -k_r * 2.000000 * sc[12];
  J[406] -= dqdci;     // dwdot[CH2]/d[CH3]
  J[408] += 2 * dqdci; // dwdot[CH3]/d[CH3]
  J[409] -= dqdci;     // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[10];
  J[439] -= dqdci;     // dwdot[CH2]/d[CH4]
  J[441] += 2 * dqdci; // dwdot[CH3]/d[CH4]
  J[442] -= dqdci;     // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1066] -= dqdT;     // dwdot[CH2]/dT
  J[1068] += 2 * dqdT; // dwdot[CH3]/dT
  J[1069] -= dqdT;     // dwdot[CH4]/dT

  // reaction 140: CH2 + HCCO <=> C2H3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[27];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[23];
  Kc = exp(g_RT[10] - g_RT[14] - g_RT[23] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[27]) + (h_RT[14] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // CH2
  wdot[14] += q; // CO
  wdot[23] += q; // C2H3
  wdot[27] -= q; // HCCO
  // d()/d[CH2]
  dqdci = +k_f * sc[27];
  J[340] -= dqdci; // dwdot[CH2]/d[CH2]
  J[344] += dqdci; // dwdot[CO]/d[CH2]
  J[353] += dqdci; // dwdot[C2H3]/d[CH2]
  J[357] -= dqdci; // dwdot[HCCO]/d[CH2]
  // d()/d[CO]
  dqdci = -k_r * sc[23];
  J[472] -= dqdci; // dwdot[CH2]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[485] += dqdci; // dwdot[C2H3]/d[CO]
  J[489] -= dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[C2H3]
  dqdci = -k_r * sc[14];
  J[769] -= dqdci; // dwdot[CH2]/d[C2H3]
  J[773] += dqdci; // dwdot[CO]/d[C2H3]
  J[782] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[786] -= dqdci; // dwdot[HCCO]/d[C2H3]
  // d()/d[HCCO]
  dqdci = +k_f * sc[10];
  J[901] -= dqdci; // dwdot[CH2]/d[HCCO]
  J[905] += dqdci; // dwdot[CO]/d[HCCO]
  J[914] += dqdci; // dwdot[C2H3]/d[HCCO]
  J[918] -= dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1079] += dqdT; // dwdot[C2H3]/dT
  J[1083] -= dqdT; // dwdot[HCCO]/dT

  // reaction 141: CH2(S) + N2 <=> CH2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[30];
  k_f = 15000000 * exp(-(301.929999482832) * invT);
  dlnkfdT = (301.929999482832) * invT2;
  // reverse
  phi_r = sc[10] * sc[30];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[30] - g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[30]) + (h_RT[10] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[11] -= q; // CH2(S)
  // d()/d[CH2]
  dqdci = -k_r * sc[30];
  J[340] += dqdci; // dwdot[CH2]/d[CH2]
  J[341] -= dqdci; // dwdot[CH2(S)]/d[CH2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[30];
  J[373] += dqdci; // dwdot[CH2]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/d[N2]
  dqdci = +k_f * sc[11] - k_r * sc[10];
  J[1000] += dqdci; // dwdot[CH2]/d[N2]
  J[1001] -= dqdci; // dwdot[CH2(S)]/d[N2]
  // d()/dT
  J[1066] += dqdT; // dwdot[CH2]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 142: AR + CH2(S) <=> AR + CH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[31];
  k_f = 9000000 * exp(-(301.929999482832) * invT);
  dlnkfdT = (301.929999482832) * invT2;
  // reverse
  phi_r = sc[10] * sc[31];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[31] - g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[31]) + (h_RT[10] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[11] -= q; // CH2(S)
  // d()/d[CH2]
  dqdci = -k_r * sc[31];
  J[340] += dqdci; // dwdot[CH2]/d[CH2]
  J[341] -= dqdci; // dwdot[CH2(S)]/d[CH2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[31];
  J[373] += dqdci; // dwdot[CH2]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/d[AR]
  dqdci = +k_f * sc[11] - k_r * sc[10];
  J[1033] += dqdci; // dwdot[CH2]/d[AR]
  J[1034] -= dqdci; // dwdot[CH2(S)]/d[AR]
  // d()/dT
  J[1066] += dqdT; // dwdot[CH2]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 143: CH2(S) + O2 <=> CO + H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[11];
  k_f = 28000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[4] * sc[14];
  Kc = refC * exp(-g_RT[1] + g_RT[3] - g_RT[4] + g_RT[11] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[3] + h_RT[11]) + (h_RT[1] + h_RT[4] + h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // O2
  wdot[4] += q;  // OH
  wdot[11] -= q; // CH2(S)
  wdot[14] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[4] * sc[14];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[36] -= dqdci; // dwdot[O2]/d[H]
  J[37] += dqdci; // dwdot[OH]/d[H]
  J[44] -= dqdci; // dwdot[CH2(S)]/d[H]
  J[47] += dqdci; // dwdot[CO]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[11];
  J[100] += dqdci; // dwdot[H]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[103] += dqdci; // dwdot[OH]/d[O2]
  J[110] -= dqdci; // dwdot[CH2(S)]/d[O2]
  J[113] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[1] * sc[14];
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[135] -= dqdci; // dwdot[O2]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[143] -= dqdci; // dwdot[CH2(S)]/d[OH]
  J[146] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[3];
  J[364] += dqdci; // dwdot[H]/d[CH2(S)]
  J[366] -= dqdci; // dwdot[O2]/d[CH2(S)]
  J[367] += dqdci; // dwdot[OH]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[377] += dqdci; // dwdot[CO]/d[CH2(S)]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * sc[4];
  J[463] += dqdci; // dwdot[H]/d[CO]
  J[465] -= dqdci; // dwdot[O2]/d[CO]
  J[466] += dqdci; // dwdot[OH]/d[CO]
  J[473] -= dqdci; // dwdot[CH2(S)]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT
  J[1070] += dqdT; // dwdot[CO]/dT

  // reaction 144: CH2(S) + O2 <=> CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[11];
  k_f = 12000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[14];
  Kc = exp(g_RT[3] - g_RT[5] + g_RT[11] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[11]) + (h_RT[5] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[5] += q;  // H2O
  wdot[11] -= q; // CH2(S)
  wdot[14] += q; // CO
  // d()/d[O2]
  dqdci = +k_f * sc[11];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[104] += dqdci; // dwdot[H2O]/d[O2]
  J[110] -= dqdci; // dwdot[CH2(S)]/d[O2]
  J[113] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[H2O]
  dqdci = -k_r * sc[14];
  J[168] -= dqdci; // dwdot[O2]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[176] -= dqdci; // dwdot[CH2(S)]/d[H2O]
  J[179] += dqdci; // dwdot[CO]/d[H2O]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[3];
  J[366] -= dqdci; // dwdot[O2]/d[CH2(S)]
  J[368] += dqdci; // dwdot[H2O]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[377] += dqdci; // dwdot[CO]/d[CH2(S)]
  // d()/d[CO]
  dqdci = -k_r * sc[5];
  J[465] -= dqdci; // dwdot[O2]/d[CO]
  J[467] += dqdci; // dwdot[H2O]/d[CO]
  J[473] -= dqdci; // dwdot[CH2(S)]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT
  J[1070] += dqdT; // dwdot[CO]/dT

  // reaction 145: CH2(S) + H2 <=> CH3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[11];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[12];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[11]) + (h_RT[1] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[11] -= q; // CH2(S)
  wdot[12] += q; // CH3
  // d()/d[H2]
  dqdci = +k_f * sc[11];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[11] -= dqdci; // dwdot[CH2(S)]/d[H2]
  J[12] += dqdci; // dwdot[CH3]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[12];
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[34] += dqdci; // dwdot[H]/d[H]
  J[44] -= dqdci; // dwdot[CH2(S)]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[0];
  J[363] -= dqdci; // dwdot[H2]/d[CH2(S)]
  J[364] += dqdci; // dwdot[H]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[375] += dqdci; // dwdot[CH3]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = -k_r * sc[1];
  J[396] -= dqdci; // dwdot[H2]/d[CH3]
  J[397] += dqdci; // dwdot[H]/d[CH3]
  J[407] -= dqdci; // dwdot[CH2(S)]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1056] -= dqdT; // dwdot[H2]/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT

  // reaction 147: CH2(S) + H2O <=> CH2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[11];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[10];
  Kc = exp(g_RT[5] - g_RT[5] - g_RT[10] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[11]) + (h_RT[5] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[11] -= q; // CH2(S)
  // d()/d[H2O]
  dqdci = +k_f * sc[11] - k_r * sc[10];
  J[175] += dqdci; // dwdot[CH2]/d[H2O]
  J[176] -= dqdci; // dwdot[CH2(S)]/d[H2O]
  // d()/d[CH2]
  dqdci = -k_r * sc[5];
  J[340] += dqdci; // dwdot[CH2]/d[CH2]
  J[341] -= dqdci; // dwdot[CH2(S)]/d[CH2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[5];
  J[373] += dqdci; // dwdot[CH2]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/dT
  J[1066] += dqdT; // dwdot[CH2]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 148: CH2(S) + CH3 <=> C2H4 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[12];
  k_f = 12000000 * exp(-(-286.83349950869) * invT);
  dlnkfdT = (-286.83349950869) * invT2;
  // reverse
  phi_r = sc[1] * sc[24];
  Kc = exp(-g_RT[1] + g_RT[11] + g_RT[12] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[12]) + (h_RT[1] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[11] -= q; // CH2(S)
  wdot[12] -= q; // CH3
  wdot[24] += q; // C2H4
  // d()/d[H]
  dqdci = -k_r * sc[24];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[44] -= dqdci; // dwdot[CH2(S)]/d[H]
  J[45] -= dqdci; // dwdot[CH3]/d[H]
  J[57] += dqdci; // dwdot[C2H4]/d[H]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[12];
  J[364] += dqdci; // dwdot[H]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[375] -= dqdci; // dwdot[CH3]/d[CH2(S)]
  J[387] += dqdci; // dwdot[C2H4]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = +k_f * sc[11];
  J[397] += dqdci; // dwdot[H]/d[CH3]
  J[407] -= dqdci; // dwdot[CH2(S)]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[420] += dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[1];
  J[793] += dqdci; // dwdot[H]/d[C2H4]
  J[803] -= dqdci; // dwdot[CH2(S)]/d[C2H4]
  J[804] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[816] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1080] += dqdT; // dwdot[C2H4]/dT

  // reaction 149: CH2(S) + CH4 <=> 2 CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[13];
  k_f = 16000000 * exp(-(-286.83349950869) * invT);
  dlnkfdT = (-286.83349950869) * invT2;
  // reverse
  phi_r = (sc[12] * sc[12]);
  Kc = exp(g_RT[11] - 2.000000 * g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[13]) + (2.000000 * h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q;     // CH2(S)
  wdot[12] += 2 * q; // CH3
  wdot[13] -= q;     // CH4
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[13];
  J[374] -= dqdci;     // dwdot[CH2(S)]/d[CH2(S)]
  J[375] += 2 * dqdci; // dwdot[CH3]/d[CH2(S)]
  J[376] -= dqdci;     // dwdot[CH4]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = -k_r * 2.000000 * sc[12];
  J[407] -= dqdci;     // dwdot[CH2(S)]/d[CH3]
  J[408] += 2 * dqdci; // dwdot[CH3]/d[CH3]
  J[409] -= dqdci;     // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[11];
  J[440] -= dqdci;     // dwdot[CH2(S)]/d[CH4]
  J[441] += 2 * dqdci; // dwdot[CH3]/d[CH4]
  J[442] -= dqdci;     // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1067] -= dqdT;     // dwdot[CH2(S)]/dT
  J[1068] += 2 * dqdT; // dwdot[CH3]/dT
  J[1069] -= dqdT;     // dwdot[CH4]/dT

  // reaction 150: CH2(S) + CO <=> CH2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[14];
  k_f = 9000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[14];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[14] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[14]) + (h_RT[10] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[11] -= q; // CH2(S)
  // d()/d[CH2]
  dqdci = -k_r * sc[14];
  J[340] += dqdci; // dwdot[CH2]/d[CH2]
  J[341] -= dqdci; // dwdot[CH2(S)]/d[CH2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[14];
  J[373] += dqdci; // dwdot[CH2]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/d[CO]
  dqdci = +k_f * sc[11] - k_r * sc[10];
  J[472] += dqdci; // dwdot[CH2]/d[CO]
  J[473] -= dqdci; // dwdot[CH2(S)]/d[CO]
  // d()/dT
  J[1066] += dqdT; // dwdot[CH2]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 151: CH2(S) + CO2 <=> CH2 + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[15];
  k_f = 7000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[15];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[15] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[15]) + (h_RT[10] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[11] -= q; // CH2(S)
  // d()/d[CH2]
  dqdci = -k_r * sc[15];
  J[340] += dqdci; // dwdot[CH2]/d[CH2]
  J[341] -= dqdci; // dwdot[CH2(S)]/d[CH2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[15];
  J[373] += dqdci; // dwdot[CH2]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/d[CO2]
  dqdci = +k_f * sc[11] - k_r * sc[10];
  J[505] += dqdci; // dwdot[CH2]/d[CO2]
  J[506] -= dqdci; // dwdot[CH2(S)]/d[CO2]
  // d()/dT
  J[1066] += dqdT; // dwdot[CH2]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 152: CH2(S) + CO2 <=> CH2O + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[15];
  k_f = 14000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[17];
  Kc = exp(g_RT[11] - g_RT[14] + g_RT[15] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[15]) + (h_RT[14] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // CH2(S)
  wdot[14] += q; // CO
  wdot[15] -= q; // CO2
  wdot[17] += q; // CH2O
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[15];
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[377] += dqdci; // dwdot[CO]/d[CH2(S)]
  J[378] -= dqdci; // dwdot[CO2]/d[CH2(S)]
  J[380] += dqdci; // dwdot[CH2O]/d[CH2(S)]
  // d()/d[CO]
  dqdci = -k_r * sc[17];
  J[473] -= dqdci; // dwdot[CH2(S)]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[477] -= dqdci; // dwdot[CO2]/d[CO]
  J[479] += dqdci; // dwdot[CH2O]/d[CO]
  // d()/d[CO2]
  dqdci = +k_f * sc[11];
  J[506] -= dqdci; // dwdot[CH2(S)]/d[CO2]
  J[509] += dqdci; // dwdot[CO]/d[CO2]
  J[510] -= dqdci; // dwdot[CO2]/d[CO2]
  J[512] += dqdci; // dwdot[CH2O]/d[CO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[14];
  J[572] -= dqdci; // dwdot[CH2(S)]/d[CH2O]
  J[575] += dqdci; // dwdot[CO]/d[CH2O]
  J[576] -= dqdci; // dwdot[CO2]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1071] -= dqdT; // dwdot[CO2]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT

  // reaction 153: C2H6 + CH2(S) <=> C2H5 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[26];
  k_f = 40000000 * exp(-(-276.769166192596) * invT);
  dlnkfdT = (-276.769166192596) * invT2;
  // reverse
  phi_r = sc[12] * sc[25];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[26]) + (h_RT[12] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // CH2(S)
  wdot[12] += q; // CH3
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[26];
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[375] += dqdci; // dwdot[CH3]/d[CH2(S)]
  J[388] += dqdci; // dwdot[C2H5]/d[CH2(S)]
  J[389] -= dqdci; // dwdot[C2H6]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = -k_r * sc[25];
  J[407] -= dqdci; // dwdot[CH2(S)]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  J[421] += dqdci; // dwdot[C2H5]/d[CH3]
  J[422] -= dqdci; // dwdot[C2H6]/d[CH3]
  // d()/d[C2H5]
  dqdci = -k_r * sc[12];
  J[836] -= dqdci; // dwdot[CH2(S)]/d[C2H5]
  J[837] += dqdci; // dwdot[CH3]/d[C2H5]
  J[850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[11];
  J[869] -= dqdci; // dwdot[CH2(S)]/d[C2H6]
  J[870] += dqdci; // dwdot[CH3]/d[C2H6]
  J[883] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[884] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT
  J[1081] += dqdT; // dwdot[C2H5]/dT
  J[1082] -= dqdT; // dwdot[C2H6]/dT

  // reaction 154: CH3 + O2 <=> CH3O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[12];
  k_f = 26750000 * exp(-(14492.6399751759) * invT);
  dlnkfdT = (14492.6399751759) * invT2;
  // reverse
  phi_r = sc[2] * sc[19];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[12] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[12]) + (h_RT[2] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[12] -= q; // CH3
  wdot[19] += q; // CH3O
  // d()/d[O]
  dqdci = -k_r * sc[19];
  J[68] += dqdci; // dwdot[O]/d[O]
  J[69] -= dqdci; // dwdot[O2]/d[O]
  J[78] -= dqdci; // dwdot[CH3]/d[O]
  J[85] += dqdci; // dwdot[CH3O]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[12];
  J[101] += dqdci; // dwdot[O]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[111] -= dqdci; // dwdot[CH3]/d[O2]
  J[118] += dqdci; // dwdot[CH3O]/d[O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[3];
  J[398] += dqdci; // dwdot[O]/d[CH3]
  J[399] -= dqdci; // dwdot[O2]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[415] += dqdci; // dwdot[CH3O]/d[CH3]
  // d()/d[CH3O]
  dqdci = -k_r * sc[2];
  J[629] += dqdci; // dwdot[O]/d[CH3O]
  J[630] -= dqdci; // dwdot[O2]/d[CH3O]
  J[639] -= dqdci; // dwdot[CH3]/d[CH3O]
  J[646] += dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1058] += dqdT; // dwdot[O]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1075] += dqdT; // dwdot[CH3O]/dT

  // reaction 155: CH3 + O2 <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[12];
  k_f = 36000 * exp(-(4498.75699229419) * invT);
  dlnkfdT = (4498.75699229419) * invT2;
  // reverse
  phi_r = sc[4] * sc[17];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[12] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[12]) + (h_RT[4] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // OH
  wdot[12] -= q; // CH3
  wdot[17] += q; // CH2O
  // d()/d[O2]
  dqdci = +k_f * sc[12];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[103] += dqdci; // dwdot[OH]/d[O2]
  J[111] -= dqdci; // dwdot[CH3]/d[O2]
  J[116] += dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[135] -= dqdci; // dwdot[O2]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[144] -= dqdci; // dwdot[CH3]/d[OH]
  J[149] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH3]
  dqdci = +k_f * sc[3];
  J[399] -= dqdci; // dwdot[O2]/d[CH3]
  J[400] += dqdci; // dwdot[OH]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[413] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[4];
  J[564] -= dqdci; // dwdot[O2]/d[CH2O]
  J[565] += dqdci; // dwdot[OH]/d[CH2O]
  J[573] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT

  // reaction 156: CH3 + H2O2 <=> CH4 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[12];
  k_f = 0.0245 * exp(2.47 * tc[0] - (2606.66232886845) * invT);
  dlnkfdT = 2.47 * invT + (2606.66232886845) * invT2;
  // reverse
  phi_r = sc[6] * sc[13];
  Kc = exp(-g_RT[6] + g_RT[7] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[12]) + (h_RT[6] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  // d()/d[HO2]
  dqdci = -k_r * sc[13];
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  J[205] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[210] -= dqdci; // dwdot[CH3]/d[HO2]
  J[211] += dqdci; // dwdot[CH4]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[12];
  J[237] += dqdci; // dwdot[HO2]/d[H2O2]
  J[238] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[243] -= dqdci; // dwdot[CH3]/d[H2O2]
  J[244] += dqdci; // dwdot[CH4]/d[H2O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[7];
  J[402] += dqdci; // dwdot[HO2]/d[CH3]
  J[403] -= dqdci; // dwdot[H2O2]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[409] += dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[6];
  J[435] += dqdci; // dwdot[HO2]/d[CH4]
  J[436] -= dqdci; // dwdot[H2O2]/d[CH4]
  J[441] -= dqdci; // dwdot[CH3]/d[CH4]
  J[442] += dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1062] += dqdT; // dwdot[HO2]/dT
  J[1063] -= dqdT; // dwdot[H2O2]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1069] += dqdT; // dwdot[CH4]/dT

  // reaction 158: 2 CH3 <=> C2H5 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[12] * sc[12]);
  k_f = 4990000 * exp(0.1 * tc[0] - (5334.09665753003) * invT);
  dlnkfdT = 0.1 * invT + (5334.09665753003) * invT2;
  // reverse
  phi_r = sc[1] * sc[25];
  Kc = exp(-g_RT[1] + 2.000000 * g_RT[12] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[12]) + (h_RT[1] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;      // H
  wdot[12] -= 2 * q; // CH3
  wdot[25] += q;     // C2H5
  // d()/d[H]
  dqdci = -k_r * sc[25];
  J[34] += dqdci;      // dwdot[H]/d[H]
  J[45] += -2 * dqdci; // dwdot[CH3]/d[H]
  J[58] += dqdci;      // dwdot[C2H5]/d[H]
  // d()/d[CH3]
  dqdci = +k_f * 2.000000 * sc[12];
  J[397] += dqdci;      // dwdot[H]/d[CH3]
  J[408] += -2 * dqdci; // dwdot[CH3]/d[CH3]
  J[421] += dqdci;      // dwdot[C2H5]/d[CH3]
  // d()/d[C2H5]
  dqdci = -k_r * sc[1];
  J[826] += dqdci;      // dwdot[H]/d[C2H5]
  J[837] += -2 * dqdci; // dwdot[CH3]/d[C2H5]
  J[850] += dqdci;      // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1057] += dqdT;      // dwdot[H]/dT
  J[1068] += -2 * dqdT; // dwdot[CH3]/dT
  J[1081] += dqdT;      // dwdot[C2H5]/dT

  // reaction 159: CH3 + HCO <=> CH4 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[16];
  k_f = 26480000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[13] * sc[14];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[16]) + (h_RT[13] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[CH3]
  dqdci = +k_f * sc[16];
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[409] += dqdci; // dwdot[CH4]/d[CH3]
  J[410] += dqdci; // dwdot[CO]/d[CH3]
  J[412] -= dqdci; // dwdot[HCO]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[14];
  J[441] -= dqdci; // dwdot[CH3]/d[CH4]
  J[442] += dqdci; // dwdot[CH4]/d[CH4]
  J[443] += dqdci; // dwdot[CO]/d[CH4]
  J[445] -= dqdci; // dwdot[HCO]/d[CH4]
  // d()/d[CO]
  dqdci = -k_r * sc[13];
  J[474] -= dqdci; // dwdot[CH3]/d[CO]
  J[475] += dqdci; // dwdot[CH4]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[478] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[12];
  J[540] -= dqdci; // dwdot[CH3]/d[HCO]
  J[541] += dqdci; // dwdot[CH4]/d[HCO]
  J[542] += dqdci; // dwdot[CO]/d[HCO]
  J[544] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1069] += dqdT; // dwdot[CH4]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1072] -= dqdT; // dwdot[HCO]/dT

  // reaction 160: CH2O + CH3 <=> CH4 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[17];
  k_f = 0.00332 * exp(2.81 * tc[0] - (2948.84966161566) * invT);
  dlnkfdT = 2.81 * invT + (2948.84966161566) * invT2;
  // reverse
  phi_r = sc[13] * sc[16];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[17]) + (h_RT[13] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[CH3]
  dqdci = +k_f * sc[17];
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[409] += dqdci; // dwdot[CH4]/d[CH3]
  J[412] += dqdci; // dwdot[HCO]/d[CH3]
  J[413] -= dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[16];
  J[441] -= dqdci; // dwdot[CH3]/d[CH4]
  J[442] += dqdci; // dwdot[CH4]/d[CH4]
  J[445] += dqdci; // dwdot[HCO]/d[CH4]
  J[446] -= dqdci; // dwdot[CH2O]/d[CH4]
  // d()/d[HCO]
  dqdci = -k_r * sc[13];
  J[540] -= dqdci; // dwdot[CH3]/d[HCO]
  J[541] += dqdci; // dwdot[CH4]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  J[545] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[12];
  J[573] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[574] += dqdci; // dwdot[CH4]/d[CH2O]
  J[577] += dqdci; // dwdot[HCO]/d[CH2O]
  J[578] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1069] += dqdT; // dwdot[CH4]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT
  J[1073] -= dqdT; // dwdot[CH2O]/dT

  // reaction 161: CH3 + CH3OH <=> CH2OH + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[20];
  k_f = 30 * exp(1.5 * tc[0] - (5001.97365809891) * invT);
  dlnkfdT = 1.5 * invT + (5001.97365809891) * invT2;
  // reverse
  phi_r = sc[13] * sc[18];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[20]) + (h_RT[13] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  // d()/d[CH3]
  dqdci = +k_f * sc[20];
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[409] += dqdci; // dwdot[CH4]/d[CH3]
  J[414] += dqdci; // dwdot[CH2OH]/d[CH3]
  J[416] -= dqdci; // dwdot[CH3OH]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[18];
  J[441] -= dqdci; // dwdot[CH3]/d[CH4]
  J[442] += dqdci; // dwdot[CH4]/d[CH4]
  J[447] += dqdci; // dwdot[CH2OH]/d[CH4]
  J[449] -= dqdci; // dwdot[CH3OH]/d[CH4]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[13];
  J[606] -= dqdci; // dwdot[CH3]/d[CH2OH]
  J[607] += dqdci; // dwdot[CH4]/d[CH2OH]
  J[612] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[614] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[12];
  J[672] -= dqdci; // dwdot[CH3]/d[CH3OH]
  J[673] += dqdci; // dwdot[CH4]/d[CH3OH]
  J[678] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[680] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1069] += dqdT; // dwdot[CH4]/dT
  J[1074] += dqdT; // dwdot[CH2OH]/dT
  J[1076] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 162: CH3 + CH3OH <=> CH3O + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[20];
  k_f = 10 * exp(1.5 * tc[0] - (5001.97365809891) * invT);
  dlnkfdT = 1.5 * invT + (5001.97365809891) * invT2;
  // reverse
  phi_r = sc[13] * sc[19];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[20]) + (h_RT[13] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  // d()/d[CH3]
  dqdci = +k_f * sc[20];
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[409] += dqdci; // dwdot[CH4]/d[CH3]
  J[415] += dqdci; // dwdot[CH3O]/d[CH3]
  J[416] -= dqdci; // dwdot[CH3OH]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[19];
  J[441] -= dqdci; // dwdot[CH3]/d[CH4]
  J[442] += dqdci; // dwdot[CH4]/d[CH4]
  J[448] += dqdci; // dwdot[CH3O]/d[CH4]
  J[449] -= dqdci; // dwdot[CH3OH]/d[CH4]
  // d()/d[CH3O]
  dqdci = -k_r * sc[13];
  J[639] -= dqdci; // dwdot[CH3]/d[CH3O]
  J[640] += dqdci; // dwdot[CH4]/d[CH3O]
  J[646] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[647] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[12];
  J[672] -= dqdci; // dwdot[CH3]/d[CH3OH]
  J[673] += dqdci; // dwdot[CH4]/d[CH3OH]
  J[679] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[680] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1069] += dqdT; // dwdot[CH4]/dT
  J[1075] += dqdT; // dwdot[CH3O]/dT
  J[1076] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 163: C2H4 + CH3 <=> C2H3 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[24];
  k_f = 0.227 * exp(2 * tc[0] - (4629.59332540342) * invT);
  dlnkfdT = 2 * invT + (4629.59332540342) * invT2;
  // reverse
  phi_r = sc[13] * sc[23];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[24]) + (h_RT[13] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[23] += q; // C2H3
  wdot[24] -= q; // C2H4
  // d()/d[CH3]
  dqdci = +k_f * sc[24];
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[409] += dqdci; // dwdot[CH4]/d[CH3]
  J[419] += dqdci; // dwdot[C2H3]/d[CH3]
  J[420] -= dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[23];
  J[441] -= dqdci; // dwdot[CH3]/d[CH4]
  J[442] += dqdci; // dwdot[CH4]/d[CH4]
  J[452] += dqdci; // dwdot[C2H3]/d[CH4]
  J[453] -= dqdci; // dwdot[C2H4]/d[CH4]
  // d()/d[C2H3]
  dqdci = -k_r * sc[13];
  J[771] -= dqdci; // dwdot[CH3]/d[C2H3]
  J[772] += dqdci; // dwdot[CH4]/d[C2H3]
  J[782] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[783] -= dqdci; // dwdot[C2H4]/d[C2H3]
  // d()/d[C2H4]
  dqdci = +k_f * sc[12];
  J[804] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[805] += dqdci; // dwdot[CH4]/d[C2H4]
  J[815] += dqdci; // dwdot[C2H3]/d[C2H4]
  J[816] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1069] += dqdT; // dwdot[CH4]/dT
  J[1079] += dqdT; // dwdot[C2H3]/dT
  J[1080] -= dqdT; // dwdot[C2H4]/dT

  // reaction 164: C2H6 + CH3 <=> C2H5 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[26];
  k_f = 6.14 * exp(1.74 * tc[0] - (5258.61415765932) * invT);
  dlnkfdT = 1.74 * invT + (5258.61415765932) * invT2;
  // reverse
  phi_r = sc[13] * sc[25];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[26]) + (h_RT[13] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  // d()/d[CH3]
  dqdci = +k_f * sc[26];
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[409] += dqdci; // dwdot[CH4]/d[CH3]
  J[421] += dqdci; // dwdot[C2H5]/d[CH3]
  J[422] -= dqdci; // dwdot[C2H6]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[25];
  J[441] -= dqdci; // dwdot[CH3]/d[CH4]
  J[442] += dqdci; // dwdot[CH4]/d[CH4]
  J[454] += dqdci; // dwdot[C2H5]/d[CH4]
  J[455] -= dqdci; // dwdot[C2H6]/d[CH4]
  // d()/d[C2H5]
  dqdci = -k_r * sc[13];
  J[837] -= dqdci; // dwdot[CH3]/d[C2H5]
  J[838] += dqdci; // dwdot[CH4]/d[C2H5]
  J[850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[12];
  J[870] -= dqdci; // dwdot[CH3]/d[C2H6]
  J[871] += dqdci; // dwdot[CH4]/d[C2H6]
  J[883] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[884] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1069] += dqdT; // dwdot[CH4]/dT
  J[1081] += dqdT; // dwdot[C2H5]/dT
  J[1082] -= dqdT; // dwdot[C2H6]/dT

  // reaction 167: HCO + O2 <=> CO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[16];
  k_f = 7600000 * exp(-(201.286666321888) * invT);
  dlnkfdT = (201.286666321888) * invT2;
  // reverse
  phi_r = sc[6] * sc[14];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[16]) + (h_RT[6] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[O2]
  dqdci = +k_f * sc[16];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[HO2]/d[O2]
  J[113] += dqdci; // dwdot[CO]/d[O2]
  J[115] -= dqdci; // dwdot[HCO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[14];
  J[201] -= dqdci; // dwdot[O2]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  J[212] += dqdci; // dwdot[CO]/d[HO2]
  J[214] -= dqdci; // dwdot[HCO]/d[HO2]
  // d()/d[CO]
  dqdci = -k_r * sc[6];
  J[465] -= dqdci; // dwdot[O2]/d[CO]
  J[468] += dqdci; // dwdot[HO2]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[478] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[3];
  J[531] -= dqdci; // dwdot[O2]/d[HCO]
  J[534] += dqdci; // dwdot[HO2]/d[HCO]
  J[542] += dqdci; // dwdot[CO]/d[HCO]
  J[544] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1072] -= dqdT; // dwdot[HCO]/dT

  // reaction 168: CH2OH + O2 <=> CH2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[18];
  k_f = 18000000 * exp(-(452.894999224248) * invT);
  dlnkfdT = (452.894999224248) * invT2;
  // reverse
  phi_r = sc[6] * sc[17];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[18]) + (h_RT[6] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[17] += q; // CH2O
  wdot[18] -= q; // CH2OH
  // d()/d[O2]
  dqdci = +k_f * sc[18];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[HO2]/d[O2]
  J[116] += dqdci; // dwdot[CH2O]/d[O2]
  J[117] -= dqdci; // dwdot[CH2OH]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[17];
  J[201] -= dqdci; // dwdot[O2]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  J[215] += dqdci; // dwdot[CH2O]/d[HO2]
  J[216] -= dqdci; // dwdot[CH2OH]/d[HO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[6];
  J[564] -= dqdci; // dwdot[O2]/d[CH2O]
  J[567] += dqdci; // dwdot[HO2]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[579] -= dqdci; // dwdot[CH2OH]/d[CH2O]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[3];
  J[597] -= dqdci; // dwdot[O2]/d[CH2OH]
  J[600] += dqdci; // dwdot[HO2]/d[CH2OH]
  J[611] += dqdci; // dwdot[CH2O]/d[CH2OH]
  J[612] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT
  J[1074] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 169: CH3O + O2 <=> CH2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[19];
  k_f = 4.28e-19 * exp(7.6 * tc[0] - (-1776.35483029066) * invT);
  dlnkfdT = 7.6 * invT + (-1776.35483029066) * invT2;
  // reverse
  phi_r = sc[6] * sc[17];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[17] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[19]) + (h_RT[6] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[17] += q; // CH2O
  wdot[19] -= q; // CH3O
  // d()/d[O2]
  dqdci = +k_f * sc[19];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[HO2]/d[O2]
  J[116] += dqdci; // dwdot[CH2O]/d[O2]
  J[118] -= dqdci; // dwdot[CH3O]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[17];
  J[201] -= dqdci; // dwdot[O2]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  J[215] += dqdci; // dwdot[CH2O]/d[HO2]
  J[217] -= dqdci; // dwdot[CH3O]/d[HO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[6];
  J[564] -= dqdci; // dwdot[O2]/d[CH2O]
  J[567] += dqdci; // dwdot[HO2]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[580] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[3];
  J[630] -= dqdci; // dwdot[O2]/d[CH3O]
  J[633] += dqdci; // dwdot[HO2]/d[CH3O]
  J[644] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[646] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT
  J[1075] -= dqdT; // dwdot[CH3O]/dT

  // reaction 170: C2H + O2 <=> CO + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[21];
  k_f = 50000000 * exp(-(754.82499870708) * invT);
  dlnkfdT = (754.82499870708) * invT2;
  // reverse
  phi_r = sc[14] * sc[16];
  Kc = exp(g_RT[3] - g_RT[14] - g_RT[16] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[21]) + (h_RT[14] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[14] += q; // CO
  wdot[16] += q; // HCO
  wdot[21] -= q; // C2H
  // d()/d[O2]
  dqdci = +k_f * sc[21];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[113] += dqdci; // dwdot[CO]/d[O2]
  J[115] += dqdci; // dwdot[HCO]/d[O2]
  J[120] -= dqdci; // dwdot[C2H]/d[O2]
  // d()/d[CO]
  dqdci = -k_r * sc[16];
  J[465] -= dqdci; // dwdot[O2]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[478] += dqdci; // dwdot[HCO]/d[CO]
  J[483] -= dqdci; // dwdot[C2H]/d[CO]
  // d()/d[HCO]
  dqdci = -k_r * sc[14];
  J[531] -= dqdci; // dwdot[O2]/d[HCO]
  J[542] += dqdci; // dwdot[CO]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  J[549] -= dqdci; // dwdot[C2H]/d[HCO]
  // d()/d[C2H]
  dqdci = +k_f * sc[3];
  J[696] -= dqdci; // dwdot[O2]/d[C2H]
  J[707] += dqdci; // dwdot[CO]/d[C2H]
  J[709] += dqdci; // dwdot[HCO]/d[C2H]
  J[714] -= dqdci; // dwdot[C2H]/d[C2H]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT
  J[1077] -= dqdT; // dwdot[C2H]/dT

  // reaction 171: C2H + H2 <=> C2H2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[21];
  k_f = 0.407 * exp(2.4 * tc[0] - (100.643333160944) * invT);
  dlnkfdT = 2.4 * invT + (100.643333160944) * invT2;
  // reverse
  phi_r = sc[1] * sc[22];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[21] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[21]) + (h_RT[1] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[21] -= q; // C2H
  wdot[22] += q; // C2H2
  // d()/d[H2]
  dqdci = +k_f * sc[21];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[21] -= dqdci; // dwdot[C2H]/d[H2]
  J[22] += dqdci; // dwdot[C2H2]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[22];
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[34] += dqdci; // dwdot[H]/d[H]
  J[54] -= dqdci; // dwdot[C2H]/d[H]
  J[55] += dqdci; // dwdot[C2H2]/d[H]
  // d()/d[C2H]
  dqdci = +k_f * sc[0];
  J[693] -= dqdci; // dwdot[H2]/d[C2H]
  J[694] += dqdci; // dwdot[H]/d[C2H]
  J[714] -= dqdci; // dwdot[C2H]/d[C2H]
  J[715] += dqdci; // dwdot[C2H2]/d[C2H]
  // d()/d[C2H2]
  dqdci = -k_r * sc[1];
  J[726] -= dqdci; // dwdot[H2]/d[C2H2]
  J[727] += dqdci; // dwdot[H]/d[C2H2]
  J[747] -= dqdci; // dwdot[C2H]/d[C2H2]
  J[748] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1056] -= dqdT; // dwdot[H2]/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1077] -= dqdT; // dwdot[C2H]/dT
  J[1078] += dqdT; // dwdot[C2H2]/dT

  // reaction 172: C2H3 + O2 <=> CH2O + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[23];
  k_f = 3980000 * exp(-(-120.771999793133) * invT);
  dlnkfdT = (-120.771999793133) * invT2;
  // reverse
  phi_r = sc[16] * sc[17];
  Kc = exp(g_RT[3] - g_RT[16] - g_RT[17] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[23]) + (h_RT[16] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[16] += q; // HCO
  wdot[17] += q; // CH2O
  wdot[23] -= q; // C2H3
  // d()/d[O2]
  dqdci = +k_f * sc[23];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[115] += dqdci; // dwdot[HCO]/d[O2]
  J[116] += dqdci; // dwdot[CH2O]/d[O2]
  J[122] -= dqdci; // dwdot[C2H3]/d[O2]
  // d()/d[HCO]
  dqdci = -k_r * sc[17];
  J[531] -= dqdci; // dwdot[O2]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  J[545] += dqdci; // dwdot[CH2O]/d[HCO]
  J[551] -= dqdci; // dwdot[C2H3]/d[HCO]
  // d()/d[CH2O]
  dqdci = -k_r * sc[16];
  J[564] -= dqdci; // dwdot[O2]/d[CH2O]
  J[577] += dqdci; // dwdot[HCO]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[584] -= dqdci; // dwdot[C2H3]/d[CH2O]
  // d()/d[C2H3]
  dqdci = +k_f * sc[3];
  J[762] -= dqdci; // dwdot[O2]/d[C2H3]
  J[775] += dqdci; // dwdot[HCO]/d[C2H3]
  J[776] += dqdci; // dwdot[CH2O]/d[C2H3]
  J[782] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT
  J[1079] -= dqdT; // dwdot[C2H3]/dT

  // reaction 174: C2H5 + O2 <=> C2H4 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[25];
  k_f = 840000 * exp(-(1949.96457999329) * invT);
  dlnkfdT = (1949.96457999329) * invT2;
  // reverse
  phi_r = sc[6] * sc[24];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[24] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[25]) + (h_RT[6] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[24] += q; // C2H4
  wdot[25] -= q; // C2H5
  // d()/d[O2]
  dqdci = +k_f * sc[25];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[HO2]/d[O2]
  J[123] += dqdci; // dwdot[C2H4]/d[O2]
  J[124] -= dqdci; // dwdot[C2H5]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[24];
  J[201] -= dqdci; // dwdot[O2]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  J[222] += dqdci; // dwdot[C2H4]/d[HO2]
  J[223] -= dqdci; // dwdot[C2H5]/d[HO2]
  // d()/d[C2H4]
  dqdci = -k_r * sc[6];
  J[795] -= dqdci; // dwdot[O2]/d[C2H4]
  J[798] += dqdci; // dwdot[HO2]/d[C2H4]
  J[816] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[817] -= dqdci; // dwdot[C2H5]/d[C2H4]
  // d()/d[C2H5]
  dqdci = +k_f * sc[3];
  J[828] -= dqdci; // dwdot[O2]/d[C2H5]
  J[831] += dqdci; // dwdot[HO2]/d[C2H5]
  J[849] += dqdci; // dwdot[C2H4]/d[C2H5]
  J[850] -= dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT
  J[1080] += dqdT; // dwdot[C2H4]/dT
  J[1081] -= dqdT; // dwdot[C2H5]/dT

  // reaction 175: HCCO + O2 <=> 2 CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[27];
  k_f = 1600000 * exp(-(429.747032597231) * invT);
  dlnkfdT = (429.747032597231) * invT2;
  // reverse
  phi_r = sc[4] * (sc[14] * sc[14]);
  Kc = refC * exp(g_RT[3] - g_RT[4] - 2.000000 * g_RT[14] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[3] + h_RT[27]) + (h_RT[4] + 2.000000 * h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;      // O2
  wdot[4] += q;      // OH
  wdot[14] += 2 * q; // CO
  wdot[27] -= q;     // HCCO
  // d()/d[O2]
  dqdci = +k_f * sc[27];
  J[102] -= dqdci;     // dwdot[O2]/d[O2]
  J[103] += dqdci;     // dwdot[OH]/d[O2]
  J[113] += 2 * dqdci; // dwdot[CO]/d[O2]
  J[126] -= dqdci;     // dwdot[HCCO]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[14] * sc[14];
  J[135] -= dqdci;     // dwdot[O2]/d[OH]
  J[136] += dqdci;     // dwdot[OH]/d[OH]
  J[146] += 2 * dqdci; // dwdot[CO]/d[OH]
  J[159] -= dqdci;     // dwdot[HCCO]/d[OH]
  // d()/d[CO]
  dqdci = -k_r * sc[4] * 2.000000 * sc[14];
  J[465] -= dqdci;     // dwdot[O2]/d[CO]
  J[466] += dqdci;     // dwdot[OH]/d[CO]
  J[476] += 2 * dqdci; // dwdot[CO]/d[CO]
  J[489] -= dqdci;     // dwdot[HCCO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[3];
  J[894] -= dqdci;     // dwdot[O2]/d[HCCO]
  J[895] += dqdci;     // dwdot[OH]/d[HCCO]
  J[905] += 2 * dqdci; // dwdot[CO]/d[HCCO]
  J[918] -= dqdci;     // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1059] -= dqdT;     // dwdot[O2]/dT
  J[1060] += dqdT;     // dwdot[OH]/dT
  J[1070] += 2 * dqdT; // dwdot[CO]/dT
  J[1083] -= dqdT;     // dwdot[HCCO]/dT

  // reaction 176: 2 HCCO <=> C2H2 + 2 CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[27] * sc[27]);
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = (sc[14] * sc[14]) * sc[22];
  Kc = refC * exp(-2.000000 * g_RT[14] - g_RT[22] + 2.000000 * g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[27]) + (2.000000 * h_RT[14] + h_RT[22]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += 2 * q; // CO
  wdot[22] += q;     // C2H2
  wdot[27] -= 2 * q; // HCCO
  // d()/d[CO]
  dqdci = -k_r * 2.000000 * sc[14] * sc[22];
  J[476] += 2 * dqdci;  // dwdot[CO]/d[CO]
  J[484] += dqdci;      // dwdot[C2H2]/d[CO]
  J[489] += -2 * dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[C2H2]
  dqdci = -k_r * sc[14] * sc[14];
  J[740] += 2 * dqdci;  // dwdot[CO]/d[C2H2]
  J[748] += dqdci;      // dwdot[C2H2]/d[C2H2]
  J[753] += -2 * dqdci; // dwdot[HCCO]/d[C2H2]
  // d()/d[HCCO]
  dqdci = +k_f * 2.000000 * sc[27];
  J[905] += 2 * dqdci;  // dwdot[CO]/d[HCCO]
  J[913] += dqdci;      // dwdot[C2H2]/d[HCCO]
  J[918] += -2 * dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1070] += 2 * dqdT;  // dwdot[CO]/dT
  J[1078] += dqdT;      // dwdot[C2H2]/dT
  J[1083] += -2 * dqdT; // dwdot[HCCO]/dT

  amrex::Real c_R[32], dcRdT[32], e_RT[32];
  amrex::Real* eh_RT;
  if (HP == 1) {
    cp_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    speciesInternalEnergy(e_RT, tc);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 32; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[1056 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 32; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 32; ++m) {
      dehmixdc += eh_RT[m] * J[k * 33 + m];
    }
    J[k * 33 + 32] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[1088] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
#else
  amrex::Abort();
#endif
}

// compute an approx to the reaction Jacobian (for preconditioning)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT_SIMPLIFIED(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real* Tp, const int* HP)
{
  amrex::Real c[32];

  for (int k = 0; k < 32; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian_precond(J, c, *Tp, *HP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 32; k++) {
    J[1056 + k] *= 1.e-6;
    J[k * 33 + 32] *= 1.e6;
  }
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real T, const int consP)
{

#if defined(PELE_COMPILE_AJACOBIAN) || !defined(AMREX_USE_HIP)
  for (int i = 0; i < 1089; i++) {
    J[i] = 0.0;
  }

  amrex::Real wdot[32];
  for (auto& val : wdot) {
    val = 0.0;
  }

  const amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  amrex::Real invT = 1.0 / tc[1];
  amrex::Real invT2 = invT * invT;

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 / T;
  amrex::Real refCinv = 1.0 / refC;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int k = 0; k < 32; ++k) {
    mixture += sc[k];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[32];
  gibbs(g_RT, tc);

  // compute the species enthalpy
  amrex::Real h_RT[32];
  speciesEnthalpy(h_RT, tc);

  amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
  amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
  amrex::Real dqdci, dcdc_fac, dqdc[32];
  amrex::Real Pr, fPr, F, k_0, logPr;
  amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
  amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
  amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
  amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
  const amrex::Real ln10 = log(10.0);
  const amrex::Real log10e = 1.0 / log(10.0);
  // reaction 49: CH2 + H (+M) <=> CH3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[10];
  k_f = 25000000000 * exp(-0.8 * tc[0]);
  dlnkfdT = -0.8 * invT;
  // pressure-fall-off
  k_0 = 3.2e+27 * exp(-3.14 * tc[0] - (618.956498939805) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.14 * invT + (618.956498939805) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.68) * exp(-T / 78);
  Fcent2 = 0.68 * exp(-T / 1995);
  Fcent3 = exp(-5590 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 78 - Fcent2 / 1995 + Fcent3 * 5590 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[12];
  Kc = refCinv * exp(g_RT[1] + g_RT[10] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[10]) + (h_RT[12]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[10] -= q; // CH2
  wdot[12] += q; // CH3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[10] -= dqdci; // dwdot[CH2]/d[H2]
    J[12] += dqdci; // dwdot[CH3]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[10];
    J[34] -= dqdci; // dwdot[H]/d[H]
    J[43] -= dqdci; // dwdot[CH2]/d[H]
    J[45] += dqdci; // dwdot[CH3]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[166] -= dqdci; // dwdot[H]/d[H2O]
    J[175] -= dqdci; // dwdot[CH2]/d[H2O]
    J[177] += dqdci; // dwdot[CH3]/d[H2O]
    // d()/d[CH2]
    dqdci = +k_f * sc[1];
    J[331] -= dqdci; // dwdot[H]/d[CH2]
    J[340] -= dqdci; // dwdot[CH2]/d[CH2]
    J[342] += dqdci; // dwdot[CH3]/d[CH2]
    // d()/d[CH3]
    dqdci = -k_r;
    J[397] -= dqdci; // dwdot[H]/d[CH3]
    J[406] -= dqdci; // dwdot[CH2]/d[CH3]
    J[408] += dqdci; // dwdot[CH3]/d[CH3]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[430] -= dqdci; // dwdot[H]/d[CH4]
    J[439] -= dqdci; // dwdot[CH2]/d[CH4]
    J[441] += dqdci; // dwdot[CH3]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[463] -= dqdci; // dwdot[H]/d[CO]
    J[472] -= dqdci; // dwdot[CH2]/d[CO]
    J[474] += dqdci; // dwdot[CH3]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[496] -= dqdci; // dwdot[H]/d[CO2]
    J[505] -= dqdci; // dwdot[CH2]/d[CO2]
    J[507] += dqdci; // dwdot[CH3]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[859] -= dqdci; // dwdot[H]/d[C2H6]
    J[868] -= dqdci; // dwdot[CH2]/d[C2H6]
    J[870] += dqdci; // dwdot[CH3]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[1024] -= dqdci; // dwdot[H]/d[AR]
    J[1033] -= dqdci; // dwdot[CH2]/d[AR]
    J[1035] += dqdci; // dwdot[CH3]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[10];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac + k_f * sc[1];
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac - k_r;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = 0.7 * dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 1] -= dqdc[k];
      J[33 * k + 10] -= dqdc[k];
      J[33 * k + 12] += dqdc[k];
    }
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT

  // reaction 51: CH3 + H (+M) <=> CH4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[12];
  k_f = 12700000000 * exp(-0.63 * tc[0] - (192.731983003208) * invT);
  dlnkfdT = -0.63 * invT + (192.731983003208) * invT2;
  // pressure-fall-off
  k_0 = 2.477e+33 * exp(-4.76 * tc[0] - (1227.84866456352) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.76 * invT + (1227.84866456352) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.783) * exp(-T / 74);
  Fcent2 = 0.783 * exp(-T / 2941);
  Fcent3 = exp(-6964 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 74 - Fcent2 / 2941 + Fcent3 * 6964 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[13];
  Kc = refCinv * exp(g_RT[1] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[12]) + (h_RT[13]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[12] -= dqdci; // dwdot[CH3]/d[H2]
    J[13] += dqdci; // dwdot[CH4]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[12];
    J[34] -= dqdci; // dwdot[H]/d[H]
    J[45] -= dqdci; // dwdot[CH3]/d[H]
    J[46] += dqdci; // dwdot[CH4]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[166] -= dqdci; // dwdot[H]/d[H2O]
    J[177] -= dqdci; // dwdot[CH3]/d[H2O]
    J[178] += dqdci; // dwdot[CH4]/d[H2O]
    // d()/d[CH3]
    dqdci = +k_f * sc[1];
    J[397] -= dqdci; // dwdot[H]/d[CH3]
    J[408] -= dqdci; // dwdot[CH3]/d[CH3]
    J[409] += dqdci; // dwdot[CH4]/d[CH3]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac - k_r;
    J[430] -= dqdci; // dwdot[H]/d[CH4]
    J[441] -= dqdci; // dwdot[CH3]/d[CH4]
    J[442] += dqdci; // dwdot[CH4]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[463] -= dqdci; // dwdot[H]/d[CO]
    J[474] -= dqdci; // dwdot[CH3]/d[CO]
    J[475] += dqdci; // dwdot[CH4]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[496] -= dqdci; // dwdot[H]/d[CO2]
    J[507] -= dqdci; // dwdot[CH3]/d[CO2]
    J[508] += dqdci; // dwdot[CH4]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[859] -= dqdci; // dwdot[H]/d[C2H6]
    J[870] -= dqdci; // dwdot[CH3]/d[C2H6]
    J[871] += dqdci; // dwdot[CH4]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[1024] -= dqdci; // dwdot[H]/d[AR]
    J[1035] -= dqdci; // dwdot[CH3]/d[AR]
    J[1036] += dqdci; // dwdot[CH4]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[12];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac + k_f * sc[1];
    dqdc[13] = 2 * dcdc_fac - k_r;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = 0.7 * dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 1] -= dqdc[k];
      J[33 * k + 12] -= dqdc[k];
      J[33 * k + 13] += dqdc[k];
    }
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1069] += dqdT; // dwdot[CH4]/dT

  // reaction 53: H + HCO (+M) <=> CH2O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[16];
  k_f = 1090000 * exp(0.48 * tc[0] - (-130.836333109227) * invT);
  dlnkfdT = 0.48 * invT + (-130.836333109227) * invT2;
  // pressure-fall-off
  k_0 = 1.35e+24 * exp(-2.57 * tc[0] - (717.083748771726) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.57 * invT + (717.083748771726) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7824) * exp(-T / 271);
  Fcent2 = 0.7824 * exp(-T / 2755);
  Fcent3 = exp(-6570 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 271 - Fcent2 / 2755 + Fcent3 * 6570 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[17];
  Kc = refCinv * exp(g_RT[1] + g_RT[16] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[16]) + (h_RT[17]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[16] -= q; // HCO
  wdot[17] += q; // CH2O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[16] -= dqdci; // dwdot[HCO]/d[H2]
    J[17] += dqdci; // dwdot[CH2O]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[16];
    J[34] -= dqdci; // dwdot[H]/d[H]
    J[49] -= dqdci; // dwdot[HCO]/d[H]
    J[50] += dqdci; // dwdot[CH2O]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[166] -= dqdci; // dwdot[H]/d[H2O]
    J[181] -= dqdci; // dwdot[HCO]/d[H2O]
    J[182] += dqdci; // dwdot[CH2O]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[430] -= dqdci; // dwdot[H]/d[CH4]
    J[445] -= dqdci; // dwdot[HCO]/d[CH4]
    J[446] += dqdci; // dwdot[CH2O]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[463] -= dqdci; // dwdot[H]/d[CO]
    J[478] -= dqdci; // dwdot[HCO]/d[CO]
    J[479] += dqdci; // dwdot[CH2O]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[496] -= dqdci; // dwdot[H]/d[CO2]
    J[511] -= dqdci; // dwdot[HCO]/d[CO2]
    J[512] += dqdci; // dwdot[CH2O]/d[CO2]
    // d()/d[HCO]
    dqdci = +k_f * sc[1];
    J[529] -= dqdci; // dwdot[H]/d[HCO]
    J[544] -= dqdci; // dwdot[HCO]/d[HCO]
    J[545] += dqdci; // dwdot[CH2O]/d[HCO]
    // d()/d[CH2O]
    dqdci = -k_r;
    J[562] -= dqdci; // dwdot[H]/d[CH2O]
    J[577] -= dqdci; // dwdot[HCO]/d[CH2O]
    J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[859] -= dqdci; // dwdot[H]/d[C2H6]
    J[874] -= dqdci; // dwdot[HCO]/d[C2H6]
    J[875] += dqdci; // dwdot[CH2O]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[1024] -= dqdci; // dwdot[H]/d[AR]
    J[1039] -= dqdci; // dwdot[HCO]/d[AR]
    J[1040] += dqdci; // dwdot[CH2O]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[16];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac + k_f * sc[1];
    dqdc[17] = dcdc_fac - k_r;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = 0.7 * dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 1] -= dqdc[k];
      J[33 * k + 16] -= dqdc[k];
      J[33 * k + 17] += dqdc[k];
    }
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1072] -= dqdT; // dwdot[HCO]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT

  // reaction 55: CH2O + H (+M) <=> CH2OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 540000 * exp(0.454 * tc[0] - (1811.57999689699) * invT);
  dlnkfdT = 0.454 * invT + (1811.57999689699) * invT2;
  // pressure-fall-off
  k_0 = 1.27e+32 * exp(-4.82 * tc[0] - (3286.00482770482) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.82 * invT + (3286.00482770482) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7187) * exp(-T / 103);
  Fcent2 = 0.7187 * exp(-T / 1291);
  Fcent3 = exp(-4160 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 103 - Fcent2 / 1291 + Fcent3 * 4160 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[18];
  Kc = refCinv * exp(g_RT[1] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[18]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[17] -= q; // CH2O
  wdot[18] += q; // CH2OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[17] -= dqdci; // dwdot[CH2O]/d[H2]
    J[18] += dqdci; // dwdot[CH2OH]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[17];
    J[34] -= dqdci; // dwdot[H]/d[H]
    J[50] -= dqdci; // dwdot[CH2O]/d[H]
    J[51] += dqdci; // dwdot[CH2OH]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[166] -= dqdci; // dwdot[H]/d[H2O]
    J[182] -= dqdci; // dwdot[CH2O]/d[H2O]
    J[183] += dqdci; // dwdot[CH2OH]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[430] -= dqdci; // dwdot[H]/d[CH4]
    J[446] -= dqdci; // dwdot[CH2O]/d[CH4]
    J[447] += dqdci; // dwdot[CH2OH]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[463] -= dqdci; // dwdot[H]/d[CO]
    J[479] -= dqdci; // dwdot[CH2O]/d[CO]
    J[480] += dqdci; // dwdot[CH2OH]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[496] -= dqdci; // dwdot[H]/d[CO2]
    J[512] -= dqdci; // dwdot[CH2O]/d[CO2]
    J[513] += dqdci; // dwdot[CH2OH]/d[CO2]
    // d()/d[CH2O]
    dqdci = +k_f * sc[1];
    J[562] -= dqdci; // dwdot[H]/d[CH2O]
    J[578] -= dqdci; // dwdot[CH2O]/d[CH2O]
    J[579] += dqdci; // dwdot[CH2OH]/d[CH2O]
    // d()/d[CH2OH]
    dqdci = -k_r;
    J[595] -= dqdci; // dwdot[H]/d[CH2OH]
    J[611] -= dqdci; // dwdot[CH2O]/d[CH2OH]
    J[612] += dqdci; // dwdot[CH2OH]/d[CH2OH]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[859] -= dqdci; // dwdot[H]/d[C2H6]
    J[875] -= dqdci; // dwdot[CH2O]/d[C2H6]
    J[876] += dqdci; // dwdot[CH2OH]/d[C2H6]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[17];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac + k_f * sc[1];
    dqdc[18] = dcdc_fac - k_r;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 1] -= dqdc[k];
      J[33 * k + 17] -= dqdc[k];
      J[33 * k + 18] += dqdc[k];
    }
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1073] -= dqdT; // dwdot[CH2O]/dT
  J[1074] += dqdT; // dwdot[CH2OH]/dT

  // reaction 56: CH2O + H (+M) <=> CH3O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 540000 * exp(0.454 * tc[0] - (1308.36333109227) * invT);
  dlnkfdT = 0.454 * invT + (1308.36333109227) * invT2;
  // pressure-fall-off
  k_0 = 2.2e+30 * exp(-4.8 * tc[0] - (2797.88466187424) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.8 * invT + (2797.88466187424) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.758) * exp(-T / 94);
  Fcent2 = 0.758 * exp(-T / 1555);
  Fcent3 = exp(-4200 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 94 - Fcent2 / 1555 + Fcent3 * 4200 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[19];
  Kc = refCinv * exp(g_RT[1] + g_RT[17] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[19]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[17] -= q; // CH2O
  wdot[19] += q; // CH3O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[17] -= dqdci; // dwdot[CH2O]/d[H2]
    J[19] += dqdci; // dwdot[CH3O]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[17];
    J[34] -= dqdci; // dwdot[H]/d[H]
    J[50] -= dqdci; // dwdot[CH2O]/d[H]
    J[52] += dqdci; // dwdot[CH3O]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[166] -= dqdci; // dwdot[H]/d[H2O]
    J[182] -= dqdci; // dwdot[CH2O]/d[H2O]
    J[184] += dqdci; // dwdot[CH3O]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[430] -= dqdci; // dwdot[H]/d[CH4]
    J[446] -= dqdci; // dwdot[CH2O]/d[CH4]
    J[448] += dqdci; // dwdot[CH3O]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[463] -= dqdci; // dwdot[H]/d[CO]
    J[479] -= dqdci; // dwdot[CH2O]/d[CO]
    J[481] += dqdci; // dwdot[CH3O]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[496] -= dqdci; // dwdot[H]/d[CO2]
    J[512] -= dqdci; // dwdot[CH2O]/d[CO2]
    J[514] += dqdci; // dwdot[CH3O]/d[CO2]
    // d()/d[CH2O]
    dqdci = +k_f * sc[1];
    J[562] -= dqdci; // dwdot[H]/d[CH2O]
    J[578] -= dqdci; // dwdot[CH2O]/d[CH2O]
    J[580] += dqdci; // dwdot[CH3O]/d[CH2O]
    // d()/d[CH3O]
    dqdci = -k_r;
    J[628] -= dqdci; // dwdot[H]/d[CH3O]
    J[644] -= dqdci; // dwdot[CH2O]/d[CH3O]
    J[646] += dqdci; // dwdot[CH3O]/d[CH3O]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[859] -= dqdci; // dwdot[H]/d[C2H6]
    J[875] -= dqdci; // dwdot[CH2O]/d[C2H6]
    J[877] += dqdci; // dwdot[CH3O]/d[C2H6]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[17];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac + k_f * sc[1];
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac - k_r;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 1] -= dqdc[k];
      J[33 * k + 17] -= dqdc[k];
      J[33 * k + 19] += dqdc[k];
    }
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1073] -= dqdT; // dwdot[CH2O]/dT
  J[1075] += dqdT; // dwdot[CH3O]/dT

  // reaction 58: CH2OH + H (+M) <=> CH3OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[1] * sc[18];
  k_f = 18000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 3e+31 * exp(-4.8 * tc[0] - (1660.61499715557) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.8 * invT + (1660.61499715557) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7679) * exp(-T / 338);
  Fcent2 = 0.7679 * exp(-T / 1812);
  Fcent3 = exp(-5081 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 338 - Fcent2 / 1812 + Fcent3 * 5081 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[1] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[18]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[18] -= q; // CH2OH
  wdot[20] += q; // CH3OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[18] -= dqdci; // dwdot[CH2OH]/d[H2]
    J[20] += dqdci; // dwdot[CH3OH]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[18];
    J[34] -= dqdci; // dwdot[H]/d[H]
    J[51] -= dqdci; // dwdot[CH2OH]/d[H]
    J[53] += dqdci; // dwdot[CH3OH]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[166] -= dqdci; // dwdot[H]/d[H2O]
    J[183] -= dqdci; // dwdot[CH2OH]/d[H2O]
    J[185] += dqdci; // dwdot[CH3OH]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[430] -= dqdci; // dwdot[H]/d[CH4]
    J[447] -= dqdci; // dwdot[CH2OH]/d[CH4]
    J[449] += dqdci; // dwdot[CH3OH]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[463] -= dqdci; // dwdot[H]/d[CO]
    J[480] -= dqdci; // dwdot[CH2OH]/d[CO]
    J[482] += dqdci; // dwdot[CH3OH]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[496] -= dqdci; // dwdot[H]/d[CO2]
    J[513] -= dqdci; // dwdot[CH2OH]/d[CO2]
    J[515] += dqdci; // dwdot[CH3OH]/d[CO2]
    // d()/d[CH2OH]
    dqdci = +k_f * sc[1];
    J[595] -= dqdci; // dwdot[H]/d[CH2OH]
    J[612] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
    J[614] += dqdci; // dwdot[CH3OH]/d[CH2OH]
    // d()/d[CH3OH]
    dqdci = -k_r;
    J[661] -= dqdci; // dwdot[H]/d[CH3OH]
    J[678] -= dqdci; // dwdot[CH2OH]/d[CH3OH]
    J[680] += dqdci; // dwdot[CH3OH]/d[CH3OH]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[859] -= dqdci; // dwdot[H]/d[C2H6]
    J[876] -= dqdci; // dwdot[CH2OH]/d[C2H6]
    J[878] += dqdci; // dwdot[CH3OH]/d[C2H6]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[18];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac + k_f * sc[1];
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac - k_r;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 1] -= dqdc[k];
      J[33 * k + 18] -= dqdc[k];
      J[33 * k + 20] += dqdc[k];
    }
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1074] -= dqdT; // dwdot[CH2OH]/dT
  J[1076] += dqdT; // dwdot[CH3OH]/dT

  // reaction 62: CH3O + H (+M) <=> CH3OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 8.6e+28 * exp(-4 * tc[0] - (1522.23041405928) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4 * invT + (1522.23041405928) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.8902) * exp(-T / 144);
  Fcent2 = 0.8902 * exp(-T / 2838);
  Fcent3 = exp(-45569 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 144 - Fcent2 / 2838 + Fcent3 * 45569 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[1] + g_RT[19] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[19] -= q; // CH3O
  wdot[20] += q; // CH3OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[19] -= dqdci; // dwdot[CH3O]/d[H2]
    J[20] += dqdci; // dwdot[CH3OH]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[19];
    J[34] -= dqdci; // dwdot[H]/d[H]
    J[52] -= dqdci; // dwdot[CH3O]/d[H]
    J[53] += dqdci; // dwdot[CH3OH]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[166] -= dqdci; // dwdot[H]/d[H2O]
    J[184] -= dqdci; // dwdot[CH3O]/d[H2O]
    J[185] += dqdci; // dwdot[CH3OH]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[430] -= dqdci; // dwdot[H]/d[CH4]
    J[448] -= dqdci; // dwdot[CH3O]/d[CH4]
    J[449] += dqdci; // dwdot[CH3OH]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[463] -= dqdci; // dwdot[H]/d[CO]
    J[481] -= dqdci; // dwdot[CH3O]/d[CO]
    J[482] += dqdci; // dwdot[CH3OH]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[496] -= dqdci; // dwdot[H]/d[CO2]
    J[514] -= dqdci; // dwdot[CH3O]/d[CO2]
    J[515] += dqdci; // dwdot[CH3OH]/d[CO2]
    // d()/d[CH3O]
    dqdci = +k_f * sc[1];
    J[628] -= dqdci; // dwdot[H]/d[CH3O]
    J[646] -= dqdci; // dwdot[CH3O]/d[CH3O]
    J[647] += dqdci; // dwdot[CH3OH]/d[CH3O]
    // d()/d[CH3OH]
    dqdci = -k_r;
    J[661] -= dqdci; // dwdot[H]/d[CH3OH]
    J[679] -= dqdci; // dwdot[CH3O]/d[CH3OH]
    J[680] += dqdci; // dwdot[CH3OH]/d[CH3OH]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[859] -= dqdci; // dwdot[H]/d[C2H6]
    J[877] -= dqdci; // dwdot[CH3O]/d[C2H6]
    J[878] += dqdci; // dwdot[CH3OH]/d[C2H6]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[19];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac + k_f * sc[1];
    dqdc[20] = dcdc_fac - k_r;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 1] -= dqdc[k];
      J[33 * k + 19] -= dqdc[k];
      J[33 * k + 20] += dqdc[k];
    }
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1075] -= dqdT; // dwdot[CH3O]/dT
  J[1076] += dqdT; // dwdot[CH3OH]/dT

  // reaction 69: C2H + H (+M) <=> C2H2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[21];
  k_f = 100000000000 * exp(-1 * tc[0]);
  dlnkfdT = -1 * invT;
  // pressure-fall-off
  k_0 = 3.75e+33 * exp(-4.8 * tc[0] - (956.111665028967) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.8 * invT + (956.111665028967) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.6464) * exp(-T / 132);
  Fcent2 = 0.6464 * exp(-T / 1315);
  Fcent3 = exp(-5566 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 132 - Fcent2 / 1315 + Fcent3 * 5566 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[22];
  Kc = refCinv * exp(g_RT[1] + g_RT[21] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[21]) + (h_RT[22]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[21] -= q; // C2H
  wdot[22] += q; // C2H2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[21] -= dqdci; // dwdot[C2H]/d[H2]
    J[22] += dqdci; // dwdot[C2H2]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[21];
    J[34] -= dqdci; // dwdot[H]/d[H]
    J[54] -= dqdci; // dwdot[C2H]/d[H]
    J[55] += dqdci; // dwdot[C2H2]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[166] -= dqdci; // dwdot[H]/d[H2O]
    J[186] -= dqdci; // dwdot[C2H]/d[H2O]
    J[187] += dqdci; // dwdot[C2H2]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[430] -= dqdci; // dwdot[H]/d[CH4]
    J[450] -= dqdci; // dwdot[C2H]/d[CH4]
    J[451] += dqdci; // dwdot[C2H2]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[463] -= dqdci; // dwdot[H]/d[CO]
    J[483] -= dqdci; // dwdot[C2H]/d[CO]
    J[484] += dqdci; // dwdot[C2H2]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[496] -= dqdci; // dwdot[H]/d[CO2]
    J[516] -= dqdci; // dwdot[C2H]/d[CO2]
    J[517] += dqdci; // dwdot[C2H2]/d[CO2]
    // d()/d[C2H]
    dqdci = +k_f * sc[1];
    J[694] -= dqdci; // dwdot[H]/d[C2H]
    J[714] -= dqdci; // dwdot[C2H]/d[C2H]
    J[715] += dqdci; // dwdot[C2H2]/d[C2H]
    // d()/d[C2H2]
    dqdci = -k_r;
    J[727] -= dqdci; // dwdot[H]/d[C2H2]
    J[747] -= dqdci; // dwdot[C2H]/d[C2H2]
    J[748] += dqdci; // dwdot[C2H2]/d[C2H2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[859] -= dqdci; // dwdot[H]/d[C2H6]
    J[879] -= dqdci; // dwdot[C2H]/d[C2H6]
    J[880] += dqdci; // dwdot[C2H2]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[1024] -= dqdci; // dwdot[H]/d[AR]
    J[1044] -= dqdci; // dwdot[C2H]/d[AR]
    J[1045] += dqdci; // dwdot[C2H2]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[21];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac + k_f * sc[1];
    dqdc[22] = dcdc_fac - k_r;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = 0.7 * dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 1] -= dqdc[k];
      J[33 * k + 21] -= dqdc[k];
      J[33 * k + 22] += dqdc[k];
    }
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1077] -= dqdT; // dwdot[C2H]/dT
  J[1078] += dqdT; // dwdot[C2H2]/dT

  // reaction 70: C2H2 + H (+M) <=> C2H3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[22];
  k_f = 5600000 * exp(-(1207.71999793133) * invT);
  dlnkfdT = (1207.71999793133) * invT2;
  // pressure-fall-off
  k_0 = 3.8e+40 * exp(-7.27 * tc[0] - (3633.22432711008) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.27 * invT + (3633.22432711008) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7507) * exp(-T / 98.5);
  Fcent2 = 0.7507 * exp(-T / 1302);
  Fcent3 = exp(-4167 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 98.5 - Fcent2 / 1302 + Fcent3 * 4167 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[23];
  Kc = refCinv * exp(g_RT[1] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[22]) + (h_RT[23]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[22] -= q; // C2H2
  wdot[23] += q; // C2H3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[22] -= dqdci; // dwdot[C2H2]/d[H2]
    J[23] += dqdci; // dwdot[C2H3]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[22];
    J[34] -= dqdci; // dwdot[H]/d[H]
    J[55] -= dqdci; // dwdot[C2H2]/d[H]
    J[56] += dqdci; // dwdot[C2H3]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[166] -= dqdci; // dwdot[H]/d[H2O]
    J[187] -= dqdci; // dwdot[C2H2]/d[H2O]
    J[188] += dqdci; // dwdot[C2H3]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[430] -= dqdci; // dwdot[H]/d[CH4]
    J[451] -= dqdci; // dwdot[C2H2]/d[CH4]
    J[452] += dqdci; // dwdot[C2H3]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[463] -= dqdci; // dwdot[H]/d[CO]
    J[484] -= dqdci; // dwdot[C2H2]/d[CO]
    J[485] += dqdci; // dwdot[C2H3]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[496] -= dqdci; // dwdot[H]/d[CO2]
    J[517] -= dqdci; // dwdot[C2H2]/d[CO2]
    J[518] += dqdci; // dwdot[C2H3]/d[CO2]
    // d()/d[C2H2]
    dqdci = +k_f * sc[1];
    J[727] -= dqdci; // dwdot[H]/d[C2H2]
    J[748] -= dqdci; // dwdot[C2H2]/d[C2H2]
    J[749] += dqdci; // dwdot[C2H3]/d[C2H2]
    // d()/d[C2H3]
    dqdci = -k_r;
    J[760] -= dqdci; // dwdot[H]/d[C2H3]
    J[781] -= dqdci; // dwdot[C2H2]/d[C2H3]
    J[782] += dqdci; // dwdot[C2H3]/d[C2H3]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[859] -= dqdci; // dwdot[H]/d[C2H6]
    J[880] -= dqdci; // dwdot[C2H2]/d[C2H6]
    J[881] += dqdci; // dwdot[C2H3]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[1024] -= dqdci; // dwdot[H]/d[AR]
    J[1045] -= dqdci; // dwdot[C2H2]/d[AR]
    J[1046] += dqdci; // dwdot[C2H3]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[22];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac + k_f * sc[1];
    dqdc[23] = dcdc_fac - k_r;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = 0.7 * dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 1] -= dqdc[k];
      J[33 * k + 22] -= dqdc[k];
      J[33 * k + 23] += dqdc[k];
    }
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1078] -= dqdT; // dwdot[C2H2]/dT
  J[1079] += dqdT; // dwdot[C2H3]/dT

  // reaction 71: C2H3 + H (+M) <=> C2H4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[23];
  k_f = 6080000 * exp(0.27 * tc[0] - (140.900666425322) * invT);
  dlnkfdT = 0.27 * invT + (140.900666425322) * invT2;
  // pressure-fall-off
  k_0 = 1.4e+30 * exp(-3.86 * tc[0] - (1670.67933047167) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.86 * invT + (1670.67933047167) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.782) * exp(-T / 207.5);
  Fcent2 = 0.782 * exp(-T / 2663);
  Fcent3 = exp(-6095 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 207.5 - Fcent2 / 2663 + Fcent3 * 6095 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[24];
  Kc = refCinv * exp(g_RT[1] + g_RT[23] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[23]) + (h_RT[24]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[23] -= q; // C2H3
  wdot[24] += q; // C2H4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[23] -= dqdci; // dwdot[C2H3]/d[H2]
    J[24] += dqdci; // dwdot[C2H4]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[23];
    J[34] -= dqdci; // dwdot[H]/d[H]
    J[56] -= dqdci; // dwdot[C2H3]/d[H]
    J[57] += dqdci; // dwdot[C2H4]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[166] -= dqdci; // dwdot[H]/d[H2O]
    J[188] -= dqdci; // dwdot[C2H3]/d[H2O]
    J[189] += dqdci; // dwdot[C2H4]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[430] -= dqdci; // dwdot[H]/d[CH4]
    J[452] -= dqdci; // dwdot[C2H3]/d[CH4]
    J[453] += dqdci; // dwdot[C2H4]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[463] -= dqdci; // dwdot[H]/d[CO]
    J[485] -= dqdci; // dwdot[C2H3]/d[CO]
    J[486] += dqdci; // dwdot[C2H4]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[496] -= dqdci; // dwdot[H]/d[CO2]
    J[518] -= dqdci; // dwdot[C2H3]/d[CO2]
    J[519] += dqdci; // dwdot[C2H4]/d[CO2]
    // d()/d[C2H3]
    dqdci = +k_f * sc[1];
    J[760] -= dqdci; // dwdot[H]/d[C2H3]
    J[782] -= dqdci; // dwdot[C2H3]/d[C2H3]
    J[783] += dqdci; // dwdot[C2H4]/d[C2H3]
    // d()/d[C2H4]
    dqdci = -k_r;
    J[793] -= dqdci; // dwdot[H]/d[C2H4]
    J[815] -= dqdci; // dwdot[C2H3]/d[C2H4]
    J[816] += dqdci; // dwdot[C2H4]/d[C2H4]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[859] -= dqdci; // dwdot[H]/d[C2H6]
    J[881] -= dqdci; // dwdot[C2H3]/d[C2H6]
    J[882] += dqdci; // dwdot[C2H4]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[1024] -= dqdci; // dwdot[H]/d[AR]
    J[1046] -= dqdci; // dwdot[C2H3]/d[AR]
    J[1047] += dqdci; // dwdot[C2H4]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[23];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac + k_f * sc[1];
    dqdc[24] = dcdc_fac - k_r;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = 0.7 * dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 1] -= dqdc[k];
      J[33 * k + 23] -= dqdc[k];
      J[33 * k + 24] += dqdc[k];
    }
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1079] -= dqdT; // dwdot[C2H3]/dT
  J[1080] += dqdT; // dwdot[C2H4]/dT

  // reaction 73: C2H4 + H (+M) <=> C2H5 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[24];
  k_f = 1080000 * exp(0.454 * tc[0] - (915.85433176459) * invT);
  dlnkfdT = 0.454 * invT + (915.85433176459) * invT2;
  // pressure-fall-off
  k_0 = 1.2e+42 * exp(-7.62 * tc[0] - (3507.4201606589) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.62 * invT + (3507.4201606589) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.9753) * exp(-T / 210);
  Fcent2 = 0.9753 * exp(-T / 984);
  Fcent3 = exp(-4374 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 210 - Fcent2 / 984 + Fcent3 * 4374 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[25];
  Kc = refCinv * exp(g_RT[1] + g_RT[24] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[24]) + (h_RT[25]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[24] -= q; // C2H4
  wdot[25] += q; // C2H5
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[24] -= dqdci; // dwdot[C2H4]/d[H2]
    J[25] += dqdci; // dwdot[C2H5]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[24];
    J[34] -= dqdci; // dwdot[H]/d[H]
    J[57] -= dqdci; // dwdot[C2H4]/d[H]
    J[58] += dqdci; // dwdot[C2H5]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[166] -= dqdci; // dwdot[H]/d[H2O]
    J[189] -= dqdci; // dwdot[C2H4]/d[H2O]
    J[190] += dqdci; // dwdot[C2H5]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[430] -= dqdci; // dwdot[H]/d[CH4]
    J[453] -= dqdci; // dwdot[C2H4]/d[CH4]
    J[454] += dqdci; // dwdot[C2H5]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[463] -= dqdci; // dwdot[H]/d[CO]
    J[486] -= dqdci; // dwdot[C2H4]/d[CO]
    J[487] += dqdci; // dwdot[C2H5]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[496] -= dqdci; // dwdot[H]/d[CO2]
    J[519] -= dqdci; // dwdot[C2H4]/d[CO2]
    J[520] += dqdci; // dwdot[C2H5]/d[CO2]
    // d()/d[C2H4]
    dqdci = +k_f * sc[1];
    J[793] -= dqdci; // dwdot[H]/d[C2H4]
    J[816] -= dqdci; // dwdot[C2H4]/d[C2H4]
    J[817] += dqdci; // dwdot[C2H5]/d[C2H4]
    // d()/d[C2H5]
    dqdci = -k_r;
    J[826] -= dqdci; // dwdot[H]/d[C2H5]
    J[849] -= dqdci; // dwdot[C2H4]/d[C2H5]
    J[850] += dqdci; // dwdot[C2H5]/d[C2H5]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[859] -= dqdci; // dwdot[H]/d[C2H6]
    J[882] -= dqdci; // dwdot[C2H4]/d[C2H6]
    J[883] += dqdci; // dwdot[C2H5]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[1024] -= dqdci; // dwdot[H]/d[AR]
    J[1047] -= dqdci; // dwdot[C2H4]/d[AR]
    J[1048] += dqdci; // dwdot[C2H5]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[24];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac + k_f * sc[1];
    dqdc[25] = dcdc_fac - k_r;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = 0.7 * dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 1] -= dqdc[k];
      J[33 * k + 24] -= dqdc[k];
      J[33 * k + 25] += dqdc[k];
    }
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1080] -= dqdT; // dwdot[C2H4]/dT
  J[1081] += dqdT; // dwdot[C2H5]/dT

  // reaction 75: C2H5 + H (+M) <=> C2H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[25];
  k_f = 521000000000 * exp(-0.99 * tc[0] - (795.082331971457) * invT);
  dlnkfdT = -0.99 * invT + (795.082331971457) * invT2;
  // pressure-fall-off
  k_0 = 1.99e+41 * exp(-7.08 * tc[0] - (3364.00341090455) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.08 * invT + (3364.00341090455) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.8422) * exp(-T / 125);
  Fcent2 = 0.8422 * exp(-T / 2219);
  Fcent3 = exp(-6882 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 125 - Fcent2 / 2219 + Fcent3 * 6882 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[26];
  Kc = refCinv * exp(g_RT[1] + g_RT[25] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[25]) + (h_RT[26]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[25] -= q; // C2H5
  wdot[26] += q; // C2H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[25] -= dqdci; // dwdot[C2H5]/d[H2]
    J[26] += dqdci; // dwdot[C2H6]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[25];
    J[34] -= dqdci; // dwdot[H]/d[H]
    J[58] -= dqdci; // dwdot[C2H5]/d[H]
    J[59] += dqdci; // dwdot[C2H6]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[166] -= dqdci; // dwdot[H]/d[H2O]
    J[190] -= dqdci; // dwdot[C2H5]/d[H2O]
    J[191] += dqdci; // dwdot[C2H6]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[430] -= dqdci; // dwdot[H]/d[CH4]
    J[454] -= dqdci; // dwdot[C2H5]/d[CH4]
    J[455] += dqdci; // dwdot[C2H6]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[463] -= dqdci; // dwdot[H]/d[CO]
    J[487] -= dqdci; // dwdot[C2H5]/d[CO]
    J[488] += dqdci; // dwdot[C2H6]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[496] -= dqdci; // dwdot[H]/d[CO2]
    J[520] -= dqdci; // dwdot[C2H5]/d[CO2]
    J[521] += dqdci; // dwdot[C2H6]/d[CO2]
    // d()/d[C2H5]
    dqdci = +k_f * sc[1];
    J[826] -= dqdci; // dwdot[H]/d[C2H5]
    J[850] -= dqdci; // dwdot[C2H5]/d[C2H5]
    J[851] += dqdci; // dwdot[C2H6]/d[C2H5]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac - k_r;
    J[859] -= dqdci; // dwdot[H]/d[C2H6]
    J[883] -= dqdci; // dwdot[C2H5]/d[C2H6]
    J[884] += dqdci; // dwdot[C2H6]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[1024] -= dqdci; // dwdot[H]/d[AR]
    J[1048] -= dqdci; // dwdot[C2H5]/d[AR]
    J[1049] += dqdci; // dwdot[C2H6]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[25];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac + k_f * sc[1];
    dqdc[26] = 3 * dcdc_fac - k_r;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = 0.7 * dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 1] -= dqdc[k];
      J[33 * k + 25] -= dqdc[k];
      J[33 * k + 26] += dqdc[k];
    }
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1081] -= dqdT; // dwdot[C2H5]/dT
  J[1082] += dqdT; // dwdot[C2H6]/dT

  // reaction 82: CO + H2 (+M) <=> CH2O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[0] * sc[14];
  k_f = 43 * exp(1.5 * tc[0] - (40056.0465980557) * invT);
  dlnkfdT = 1.5 * invT + (40056.0465980557) * invT2;
  // pressure-fall-off
  k_0 = 5.07e+27 * exp(-3.42 * tc[0] - (42446.3257606281) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.42 * invT + (42446.3257606281) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.932) * exp(-T / 197);
  Fcent2 = 0.932 * exp(-T / 1540);
  Fcent3 = exp(-10300 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 197 - Fcent2 / 1540 + Fcent3 * 10300 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[17];
  Kc = refCinv * exp(g_RT[0] + g_RT[14] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[14]) + (h_RT[17]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[0] -= q;  // H2
  wdot[14] -= q; // CO
  wdot[17] += q; // CH2O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac + k_f * sc[14];
    J[0] -= dqdci;  // dwdot[H2]/d[H2]
    J[14] -= dqdci; // dwdot[CO]/d[H2]
    J[17] += dqdci; // dwdot[CH2O]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[165] -= dqdci; // dwdot[H2]/d[H2O]
    J[179] -= dqdci; // dwdot[CO]/d[H2O]
    J[182] += dqdci; // dwdot[CH2O]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[429] -= dqdci; // dwdot[H2]/d[CH4]
    J[443] -= dqdci; // dwdot[CO]/d[CH4]
    J[446] += dqdci; // dwdot[CH2O]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac + k_f * sc[0];
    J[462] -= dqdci; // dwdot[H2]/d[CO]
    J[476] -= dqdci; // dwdot[CO]/d[CO]
    J[479] += dqdci; // dwdot[CH2O]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[495] -= dqdci; // dwdot[H2]/d[CO2]
    J[509] -= dqdci; // dwdot[CO]/d[CO2]
    J[512] += dqdci; // dwdot[CH2O]/d[CO2]
    // d()/d[CH2O]
    dqdci = -k_r;
    J[561] -= dqdci; // dwdot[H2]/d[CH2O]
    J[575] -= dqdci; // dwdot[CO]/d[CH2O]
    J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[858] -= dqdci; // dwdot[H2]/d[C2H6]
    J[872] -= dqdci; // dwdot[CO]/d[C2H6]
    J[875] += dqdci; // dwdot[CH2O]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[1023] -= dqdci; // dwdot[H2]/d[AR]
    J[1037] -= dqdci; // dwdot[CO]/d[AR]
    J[1040] += dqdci; // dwdot[CH2O]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac + k_f * sc[14];
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac + k_f * sc[0];
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac - k_r;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = 0.7 * dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 0] -= dqdc[k];
      J[33 * k + 14] -= dqdc[k];
      J[33 * k + 17] += dqdc[k];
    }
  }
  J[1056] -= dqdT; // dwdot[H2]/dT
  J[1070] -= dqdT; // dwdot[CO]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT

  // reaction 84: 2 OH (+M) <=> H2O2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 74000000 * exp(-0.37 * tc[0]);
  dlnkfdT = -0.37 * invT;
  // pressure-fall-off
  k_0 = 2.3e+18 * exp(-0.9 * tc[0] - (-855.468331868023) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -0.9 * invT + (-855.468331868023) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7346) * exp(-T / 94);
  Fcent2 = 0.7346 * exp(-T / 1756);
  Fcent3 = exp(-5182 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 94 - Fcent2 / 1756 + Fcent3 * 5182 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[7];
  Kc = refCinv * exp(2.000000 * g_RT[4] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[7]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= 2 * q; // OH
  wdot[7] += q;     // H2O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[4] += -2 * dqdci; // dwdot[OH]/d[H2]
    J[7] += dqdci;      // dwdot[H2O2]/d[H2]
    // d()/d[OH]
    dqdci = +k_f * 2.000000 * sc[4];
    J[136] += -2 * dqdci; // dwdot[OH]/d[OH]
    J[139] += dqdci;      // dwdot[H2O2]/d[OH]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[169] += -2 * dqdci; // dwdot[OH]/d[H2O]
    J[172] += dqdci;      // dwdot[H2O2]/d[H2O]
    // d()/d[H2O2]
    dqdci = -k_r;
    J[235] += -2 * dqdci; // dwdot[OH]/d[H2O2]
    J[238] += dqdci;      // dwdot[H2O2]/d[H2O2]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[433] += -2 * dqdci; // dwdot[OH]/d[CH4]
    J[436] += dqdci;      // dwdot[H2O2]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[466] += -2 * dqdci; // dwdot[OH]/d[CO]
    J[469] += dqdci;      // dwdot[H2O2]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[499] += -2 * dqdci; // dwdot[OH]/d[CO2]
    J[502] += dqdci;      // dwdot[H2O2]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[862] += -2 * dqdci; // dwdot[OH]/d[C2H6]
    J[865] += dqdci;      // dwdot[H2O2]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[1027] += -2 * dqdci; // dwdot[OH]/d[AR]
    J[1030] += dqdci;      // dwdot[H2O2]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac + k_f * 2.000000 * sc[4];
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac - k_r;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = 0.7 * dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 4] += -2 * dqdc[k];
      J[33 * k + 7] += dqdc[k];
    }
  }
  J[1060] += -2 * dqdT; // dwdot[OH]/dT
  J[1063] += dqdT;      // dwdot[H2O2]/dT

  // reaction 94: CH3 + OH (+M) <=> CH3OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 63000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 2.7e+38 * exp(-6.3 * tc[0] - (1559.97166399463) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.3 * invT + (1559.97166399463) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.2105) * exp(-T / 83.5);
  Fcent2 = 0.2105 * exp(-T / 5398);
  Fcent3 = exp(-8370 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 83.5 - Fcent2 / 5398 + Fcent3 * 8370 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[4] + g_RT[12] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= q;  // OH
  wdot[12] -= q; // CH3
  wdot[20] += q; // CH3OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[4] -= dqdci;  // dwdot[OH]/d[H2]
    J[12] -= dqdci; // dwdot[CH3]/d[H2]
    J[20] += dqdci; // dwdot[CH3OH]/d[H2]
    // d()/d[OH]
    dqdci = +k_f * sc[12];
    J[136] -= dqdci; // dwdot[OH]/d[OH]
    J[144] -= dqdci; // dwdot[CH3]/d[OH]
    J[152] += dqdci; // dwdot[CH3OH]/d[OH]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[169] -= dqdci; // dwdot[OH]/d[H2O]
    J[177] -= dqdci; // dwdot[CH3]/d[H2O]
    J[185] += dqdci; // dwdot[CH3OH]/d[H2O]
    // d()/d[CH3]
    dqdci = +k_f * sc[4];
    J[400] -= dqdci; // dwdot[OH]/d[CH3]
    J[408] -= dqdci; // dwdot[CH3]/d[CH3]
    J[416] += dqdci; // dwdot[CH3OH]/d[CH3]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[433] -= dqdci; // dwdot[OH]/d[CH4]
    J[441] -= dqdci; // dwdot[CH3]/d[CH4]
    J[449] += dqdci; // dwdot[CH3OH]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[466] -= dqdci; // dwdot[OH]/d[CO]
    J[474] -= dqdci; // dwdot[CH3]/d[CO]
    J[482] += dqdci; // dwdot[CH3OH]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[499] -= dqdci; // dwdot[OH]/d[CO2]
    J[507] -= dqdci; // dwdot[CH3]/d[CO2]
    J[515] += dqdci; // dwdot[CH3OH]/d[CO2]
    // d()/d[CH3OH]
    dqdci = -k_r;
    J[664] -= dqdci; // dwdot[OH]/d[CH3OH]
    J[672] -= dqdci; // dwdot[CH3]/d[CH3OH]
    J[680] += dqdci; // dwdot[CH3OH]/d[CH3OH]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[862] -= dqdci; // dwdot[OH]/d[C2H6]
    J[870] -= dqdci; // dwdot[CH3]/d[C2H6]
    J[878] += dqdci; // dwdot[CH3OH]/d[C2H6]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac + k_f * sc[12];
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac + k_f * sc[4];
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac - k_r;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 4] -= dqdc[k];
      J[33 * k + 12] -= dqdc[k];
      J[33 * k + 20] += dqdc[k];
    }
  }
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1076] += dqdT; // dwdot[CH3OH]/dT

  // reaction 130: CH + CO (+M) <=> HCCO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[9] * sc[14];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 2.69e+28 * exp(-3.74 * tc[0] - (974.227464997937) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.74 * invT + (974.227464997937) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5757) * exp(-T / 237);
  Fcent2 = 0.5757 * exp(-T / 1652);
  Fcent3 = exp(-5069 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 237 - Fcent2 / 1652 + Fcent3 * 5069 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[27];
  Kc = refCinv * exp(g_RT[9] + g_RT[14] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[14]) + (h_RT[27]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // CH
  wdot[14] -= q; // CO
  wdot[27] += q; // HCCO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[9] -= dqdci;  // dwdot[CH]/d[H2]
    J[14] -= dqdci; // dwdot[CO]/d[H2]
    J[27] += dqdci; // dwdot[HCCO]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[174] -= dqdci; // dwdot[CH]/d[H2O]
    J[179] -= dqdci; // dwdot[CO]/d[H2O]
    J[192] += dqdci; // dwdot[HCCO]/d[H2O]
    // d()/d[CH]
    dqdci = +k_f * sc[14];
    J[306] -= dqdci; // dwdot[CH]/d[CH]
    J[311] -= dqdci; // dwdot[CO]/d[CH]
    J[324] += dqdci; // dwdot[HCCO]/d[CH]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[438] -= dqdci; // dwdot[CH]/d[CH4]
    J[443] -= dqdci; // dwdot[CO]/d[CH4]
    J[456] += dqdci; // dwdot[HCCO]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac + k_f * sc[9];
    J[471] -= dqdci; // dwdot[CH]/d[CO]
    J[476] -= dqdci; // dwdot[CO]/d[CO]
    J[489] += dqdci; // dwdot[HCCO]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[504] -= dqdci; // dwdot[CH]/d[CO2]
    J[509] -= dqdci; // dwdot[CO]/d[CO2]
    J[522] += dqdci; // dwdot[HCCO]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[867] -= dqdci; // dwdot[CH]/d[C2H6]
    J[872] -= dqdci; // dwdot[CO]/d[C2H6]
    J[885] += dqdci; // dwdot[HCCO]/d[C2H6]
    // d()/d[HCCO]
    dqdci = -k_r;
    J[900] -= dqdci; // dwdot[CH]/d[HCCO]
    J[905] -= dqdci; // dwdot[CO]/d[HCCO]
    J[918] += dqdci; // dwdot[HCCO]/d[HCCO]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[1032] -= dqdci; // dwdot[CH]/d[AR]
    J[1037] -= dqdci; // dwdot[CO]/d[AR]
    J[1050] += dqdci; // dwdot[HCCO]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac + k_f * sc[14];
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac + k_f * sc[9];
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac - k_r;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = 0.7 * dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 9] -= dqdc[k];
      J[33 * k + 14] -= dqdc[k];
      J[33 * k + 27] += dqdc[k];
    }
  }
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1070] -= dqdT; // dwdot[CO]/dT
  J[1083] += dqdT; // dwdot[HCCO]/dT

  // reaction 139: CH2 + CO (+M) <=> CH2CO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[10] * sc[14];
  k_f = 810000 * exp(0.5 * tc[0] - (2269.50716277929) * invT);
  dlnkfdT = 0.5 * invT + (2269.50716277929) * invT2;
  // pressure-fall-off
  k_0 = 2.69e+33 * exp(-5.11 * tc[0] - (3570.32224388449) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.11 * invT + (3570.32224388449) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5907) * exp(-T / 275);
  Fcent2 = 0.5907 * exp(-T / 1226);
  Fcent3 = exp(-5185 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 275 - Fcent2 / 1226 + Fcent3 * 5185 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[28];
  Kc = refCinv * exp(g_RT[10] + g_RT[14] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[14]) + (h_RT[28]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[10] -= q; // CH2
  wdot[14] -= q; // CO
  wdot[28] += q; // CH2CO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[10] -= dqdci; // dwdot[CH2]/d[H2]
    J[14] -= dqdci; // dwdot[CO]/d[H2]
    J[28] += dqdci; // dwdot[CH2CO]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[175] -= dqdci; // dwdot[CH2]/d[H2O]
    J[179] -= dqdci; // dwdot[CO]/d[H2O]
    J[193] += dqdci; // dwdot[CH2CO]/d[H2O]
    // d()/d[CH2]
    dqdci = +k_f * sc[14];
    J[340] -= dqdci; // dwdot[CH2]/d[CH2]
    J[344] -= dqdci; // dwdot[CO]/d[CH2]
    J[358] += dqdci; // dwdot[CH2CO]/d[CH2]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[439] -= dqdci; // dwdot[CH2]/d[CH4]
    J[443] -= dqdci; // dwdot[CO]/d[CH4]
    J[457] += dqdci; // dwdot[CH2CO]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac + k_f * sc[10];
    J[472] -= dqdci; // dwdot[CH2]/d[CO]
    J[476] -= dqdci; // dwdot[CO]/d[CO]
    J[490] += dqdci; // dwdot[CH2CO]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[505] -= dqdci; // dwdot[CH2]/d[CO2]
    J[509] -= dqdci; // dwdot[CO]/d[CO2]
    J[523] += dqdci; // dwdot[CH2CO]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[868] -= dqdci; // dwdot[CH2]/d[C2H6]
    J[872] -= dqdci; // dwdot[CO]/d[C2H6]
    J[886] += dqdci; // dwdot[CH2CO]/d[C2H6]
    // d()/d[CH2CO]
    dqdci = -k_r;
    J[934] -= dqdci; // dwdot[CH2]/d[CH2CO]
    J[938] -= dqdci; // dwdot[CO]/d[CH2CO]
    J[952] += dqdci; // dwdot[CH2CO]/d[CH2CO]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[1033] -= dqdci; // dwdot[CH2]/d[AR]
    J[1037] -= dqdci; // dwdot[CO]/d[AR]
    J[1051] += dqdci; // dwdot[CH2CO]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac + k_f * sc[14];
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac + k_f * sc[10];
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac - k_r;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = 0.7 * dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 10] -= dqdc[k];
      J[33 * k + 14] -= dqdc[k];
      J[33 * k + 28] += dqdc[k];
    }
  }
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1070] -= dqdT; // dwdot[CO]/dT
  J[1084] += dqdT; // dwdot[CH2CO]/dT

  // reaction 146: CH2(S) + H2O (+M) <=> CH3OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[5] * sc[11];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 2.7e+38 * exp(-6.3 * tc[0] - (1559.97166399463) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.3 * invT + (1559.97166399463) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.1507) * exp(-T / 134);
  Fcent2 = 0.1507 * exp(-T / 2383);
  Fcent3 = exp(-7265 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 134 - Fcent2 / 2383 + Fcent3 * 7265 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[5] + g_RT[11] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[11]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[5] -= q;  // H2O
  wdot[11] -= q; // CH2(S)
  wdot[20] += q; // CH3OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[5] -= dqdci;  // dwdot[H2O]/d[H2]
    J[11] -= dqdci; // dwdot[CH2(S)]/d[H2]
    J[20] += dqdci; // dwdot[CH3OH]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac + k_f * sc[11];
    J[170] -= dqdci; // dwdot[H2O]/d[H2O]
    J[176] -= dqdci; // dwdot[CH2(S)]/d[H2O]
    J[185] += dqdci; // dwdot[CH3OH]/d[H2O]
    // d()/d[CH2(S)]
    dqdci = +k_f * sc[5];
    J[368] -= dqdci; // dwdot[H2O]/d[CH2(S)]
    J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
    J[383] += dqdci; // dwdot[CH3OH]/d[CH2(S)]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[434] -= dqdci; // dwdot[H2O]/d[CH4]
    J[440] -= dqdci; // dwdot[CH2(S)]/d[CH4]
    J[449] += dqdci; // dwdot[CH3OH]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[467] -= dqdci; // dwdot[H2O]/d[CO]
    J[473] -= dqdci; // dwdot[CH2(S)]/d[CO]
    J[482] += dqdci; // dwdot[CH3OH]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[500] -= dqdci; // dwdot[H2O]/d[CO2]
    J[506] -= dqdci; // dwdot[CH2(S)]/d[CO2]
    J[515] += dqdci; // dwdot[CH3OH]/d[CO2]
    // d()/d[CH3OH]
    dqdci = -k_r;
    J[665] -= dqdci; // dwdot[H2O]/d[CH3OH]
    J[671] -= dqdci; // dwdot[CH2(S)]/d[CH3OH]
    J[680] += dqdci; // dwdot[CH3OH]/d[CH3OH]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[863] -= dqdci; // dwdot[H2O]/d[C2H6]
    J[869] -= dqdci; // dwdot[CH2(S)]/d[C2H6]
    J[878] += dqdci; // dwdot[CH3OH]/d[C2H6]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac + k_f * sc[11];
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac + k_f * sc[5];
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac - k_r;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 5] -= dqdc[k];
      J[33 * k + 11] -= dqdc[k];
      J[33 * k + 20] += dqdc[k];
    }
  }
  J[1061] -= dqdT; // dwdot[H2O]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT
  J[1076] += dqdT; // dwdot[CH3OH]/dT

  // reaction 157: 2 CH3 (+M) <=> C2H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = (sc[12] * sc[12]);
  k_f = 21200000000 * exp(-0.97 * tc[0] - (311.994332798926) * invT);
  dlnkfdT = -0.97 * invT + (311.994332798926) * invT2;
  // pressure-fall-off
  k_0 = 1.77e+50 * exp(-9.67 * tc[0] - (3130.00766130536) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -9.67 * invT + (3130.00766130536) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5325) * exp(-T / 151);
  Fcent2 = 0.5325 * exp(-T / 1038);
  Fcent3 = exp(-4970 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 151 - Fcent2 / 1038 + Fcent3 * 4970 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[26];
  Kc = refCinv * exp(2.000000 * g_RT[12] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[12]) + (h_RT[26]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[12] -= 2 * q; // CH3
  wdot[26] += q;     // C2H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[12] += -2 * dqdci; // dwdot[CH3]/d[H2]
    J[26] += dqdci;      // dwdot[C2H6]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[177] += -2 * dqdci; // dwdot[CH3]/d[H2O]
    J[191] += dqdci;      // dwdot[C2H6]/d[H2O]
    // d()/d[CH3]
    dqdci = +k_f * 2.000000 * sc[12];
    J[408] += -2 * dqdci; // dwdot[CH3]/d[CH3]
    J[422] += dqdci;      // dwdot[C2H6]/d[CH3]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[441] += -2 * dqdci; // dwdot[CH3]/d[CH4]
    J[455] += dqdci;      // dwdot[C2H6]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[474] += -2 * dqdci; // dwdot[CH3]/d[CO]
    J[488] += dqdci;      // dwdot[C2H6]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[507] += -2 * dqdci; // dwdot[CH3]/d[CO2]
    J[521] += dqdci;      // dwdot[C2H6]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac - k_r;
    J[870] += -2 * dqdci; // dwdot[CH3]/d[C2H6]
    J[884] += dqdci;      // dwdot[C2H6]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[1035] += -2 * dqdci; // dwdot[CH3]/d[AR]
    J[1049] += dqdci;      // dwdot[C2H6]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac + k_f * 2.000000 * sc[12];
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac - k_r;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = 0.7 * dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 12] += -2 * dqdc[k];
      J[33 * k + 26] += dqdc[k];
    }
  }
  J[1068] += -2 * dqdT; // dwdot[CH3]/dT
  J[1082] += dqdT;      // dwdot[C2H6]/dT

  // reaction 173: C2H4 (+M) <=> C2H2 + H2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[24];
  k_f = 8000000000000 * exp(0.44 * tc[0] - (44670.543423485) * invT);
  dlnkfdT = 0.44 * invT + (44670.543423485) * invT2;
  // pressure-fall-off
  k_0 = 7e+50 * exp(-9.31 * tc[0] - (50251.2162472593) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -9.31 * invT + (50251.2162472593) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7345) * exp(-T / 180);
  Fcent2 = 0.7345 * exp(-T / 1035);
  Fcent3 = exp(-5417 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 180 - Fcent2 / 1035 + Fcent3 * 5417 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[0] * sc[22];
  Kc = refC * exp(-g_RT[0] - g_RT[22] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[24]) + (h_RT[0] + h_RT[22]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[0] += q;  // H2
  wdot[22] += q; // C2H2
  wdot[24] -= q; // C2H4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac - k_r * sc[22];
    J[0] += dqdci;  // dwdot[H2]/d[H2]
    J[22] += dqdci; // dwdot[C2H2]/d[H2]
    J[24] -= dqdci; // dwdot[C2H4]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[165] += dqdci; // dwdot[H2]/d[H2O]
    J[187] += dqdci; // dwdot[C2H2]/d[H2O]
    J[189] -= dqdci; // dwdot[C2H4]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[429] += dqdci; // dwdot[H2]/d[CH4]
    J[451] += dqdci; // dwdot[C2H2]/d[CH4]
    J[453] -= dqdci; // dwdot[C2H4]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[462] += dqdci; // dwdot[H2]/d[CO]
    J[484] += dqdci; // dwdot[C2H2]/d[CO]
    J[486] -= dqdci; // dwdot[C2H4]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[495] += dqdci; // dwdot[H2]/d[CO2]
    J[517] += dqdci; // dwdot[C2H2]/d[CO2]
    J[519] -= dqdci; // dwdot[C2H4]/d[CO2]
    // d()/d[C2H2]
    dqdci = -k_r * sc[0];
    J[726] += dqdci; // dwdot[H2]/d[C2H2]
    J[748] += dqdci; // dwdot[C2H2]/d[C2H2]
    J[750] -= dqdci; // dwdot[C2H4]/d[C2H2]
    // d()/d[C2H4]
    dqdci = +k_f;
    J[792] += dqdci; // dwdot[H2]/d[C2H4]
    J[814] += dqdci; // dwdot[C2H2]/d[C2H4]
    J[816] -= dqdci; // dwdot[C2H4]/d[C2H4]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[858] += dqdci; // dwdot[H2]/d[C2H6]
    J[880] += dqdci; // dwdot[C2H2]/d[C2H6]
    J[882] -= dqdci; // dwdot[C2H4]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[1023] += dqdci; // dwdot[H2]/d[AR]
    J[1045] += dqdci; // dwdot[C2H2]/d[AR]
    J[1047] -= dqdci; // dwdot[C2H4]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac - k_r * sc[22];
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac - k_r * sc[0];
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac + k_f;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = 0.7 * dcdc_fac;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 0] += dqdc[k];
      J[33 * k + 22] += dqdc[k];
      J[33 * k + 24] -= dqdc[k];
    }
  }
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1078] += dqdT; // dwdot[C2H2]/dT
  J[1080] -= dqdT; // dwdot[C2H4]/dT

  // reaction 0: 2 O + M <=> O2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.4 - 1) * sc[0] + (15.4 - 1) * sc[5] + sc[13] +
          (1.75 - 1) * sc[14] + (3.6 - 1) * sc[15] + (3 - 1) * sc[26] +
          (0.83 - 1) * sc[31];
  // forward
  phi_f = (sc[2] * sc[2]);
  k_f = 120000 * exp(-1 * tc[0]);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[3];
  Kc = refCinv * exp(2.000000 * g_RT[2] - g_RT[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[2]) + (h_RT[3]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= 2 * q; // O
  wdot[3] += q;     // O2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2.4 - 1) * q_nocor;
    J[2] += -2 * dqdci; // dwdot[O]/d[H2]
    J[3] += dqdci;      // dwdot[O2]/d[H2]
    // d()/d[O]
    dqdci = +k_f * 2.000000 * sc[2];
    J[68] += -2 * dqdci; // dwdot[O]/d[O]
    J[69] += dqdci;      // dwdot[O2]/d[O]
    // d()/d[O2]
    dqdci = -k_r;
    J[101] += -2 * dqdci; // dwdot[O]/d[O2]
    J[102] += dqdci;      // dwdot[O2]/d[O2]
    // d()/d[H2O]
    dqdci = (15.4 - 1) * q_nocor;
    J[167] += -2 * dqdci; // dwdot[O]/d[H2O]
    J[168] += dqdci;      // dwdot[O2]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * q_nocor;
    J[431] += -2 * dqdci; // dwdot[O]/d[CH4]
    J[432] += dqdci;      // dwdot[O2]/d[CH4]
    // d()/d[CO]
    dqdci = (1.75 - 1) * q_nocor;
    J[464] += -2 * dqdci; // dwdot[O]/d[CO]
    J[465] += dqdci;      // dwdot[O2]/d[CO]
    // d()/d[CO2]
    dqdci = (3.6 - 1) * q_nocor;
    J[497] += -2 * dqdci; // dwdot[O]/d[CO2]
    J[498] += dqdci;      // dwdot[O2]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * q_nocor;
    J[860] += -2 * dqdci; // dwdot[O]/d[C2H6]
    J[861] += dqdci;      // dwdot[O2]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.83 - 1) * q_nocor;
    J[1025] += -2 * dqdci; // dwdot[O]/d[AR]
    J[1026] += dqdci;      // dwdot[O2]/d[AR]
  } else {
    dqdc[0] = 2.4 * q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor + k_f * 2.000000 * sc[2];
    dqdc[3] = q_nocor - k_r;
    dqdc[4] = q_nocor;
    dqdc[5] = 15.4 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 2 * q_nocor;
    dqdc[14] = 1.75 * q_nocor;
    dqdc[15] = 3.6 * q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 3 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = 0.83 * q_nocor;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 2] += -2 * dqdc[k];
      J[33 * k + 3] += dqdc[k];
    }
  }
  J[1058] += -2 * dqdT; // dwdot[O]/dT
  J[1059] += dqdT;      // dwdot[O2]/dT

  // reaction 1: H + O + M <=> OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[2];
  k_f = 500000 * exp(-1 * tc[0]);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[4];
  Kc = refCinv * exp(g_RT[1] + g_RT[2] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[2]) + (h_RT[4]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] -= q; // O
  wdot[4] += q; // OH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[1] -= dqdci; // dwdot[H]/d[H2]
    J[2] -= dqdci; // dwdot[O]/d[H2]
    J[4] += dqdci; // dwdot[OH]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[2];
    J[34] -= dqdci; // dwdot[H]/d[H]
    J[35] -= dqdci; // dwdot[O]/d[H]
    J[37] += dqdci; // dwdot[OH]/d[H]
    // d()/d[O]
    dqdci = +k_f * sc[1];
    J[67] -= dqdci; // dwdot[H]/d[O]
    J[68] -= dqdci; // dwdot[O]/d[O]
    J[70] += dqdci; // dwdot[OH]/d[O]
    // d()/d[OH]
    dqdci = -k_r;
    J[133] -= dqdci; // dwdot[H]/d[OH]
    J[134] -= dqdci; // dwdot[O]/d[OH]
    J[136] += dqdci; // dwdot[OH]/d[OH]
    // d()/d[H2O]
    dqdci = (6 - 1) * q_nocor;
    J[166] -= dqdci; // dwdot[H]/d[H2O]
    J[167] -= dqdci; // dwdot[O]/d[H2O]
    J[169] += dqdci; // dwdot[OH]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * q_nocor;
    J[430] -= dqdci; // dwdot[H]/d[CH4]
    J[431] -= dqdci; // dwdot[O]/d[CH4]
    J[433] += dqdci; // dwdot[OH]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * q_nocor;
    J[463] -= dqdci; // dwdot[H]/d[CO]
    J[464] -= dqdci; // dwdot[O]/d[CO]
    J[466] += dqdci; // dwdot[OH]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * q_nocor;
    J[496] -= dqdci; // dwdot[H]/d[CO2]
    J[497] -= dqdci; // dwdot[O]/d[CO2]
    J[499] += dqdci; // dwdot[OH]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * q_nocor;
    J[859] -= dqdci; // dwdot[H]/d[C2H6]
    J[860] -= dqdci; // dwdot[O]/d[C2H6]
    J[862] += dqdci; // dwdot[OH]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * q_nocor;
    J[1024] -= dqdci; // dwdot[H]/d[AR]
    J[1025] -= dqdci; // dwdot[O]/d[AR]
    J[1027] += dqdci; // dwdot[OH]/d[AR]
  } else {
    dqdc[0] = 2 * q_nocor;
    dqdc[1] = q_nocor + k_f * sc[2];
    dqdc[2] = q_nocor + k_f * sc[1];
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor - k_r;
    dqdc[5] = 6 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 2 * q_nocor;
    dqdc[14] = 1.5 * q_nocor;
    dqdc[15] = 2 * q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 3 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = 0.7 * q_nocor;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 1] -= dqdc[k];
      J[33 * k + 2] -= dqdc[k];
      J[33 * k + 4] += dqdc[k];
    }
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT

  // reaction 11: CO + O + M <=> CO2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[3] + (6 - 1) * sc[5] + sc[13] +
          (1.5 - 1) * sc[14] + (3.5 - 1) * sc[15] + (3 - 1) * sc[26] +
          (0.5 - 1) * sc[31];
  // forward
  phi_f = sc[2] * sc[14];
  k_f = 602 * exp(-(1509.64999741416) * invT);
  dlnkfdT = (1509.64999741416) * invT2;
  // reverse
  phi_r = sc[15];
  Kc = refCinv * exp(g_RT[2] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[14]) + (h_RT[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[14] -= q; // CO
  wdot[15] += q; // CO2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[2] -= dqdci;  // dwdot[O]/d[H2]
    J[14] -= dqdci; // dwdot[CO]/d[H2]
    J[15] += dqdci; // dwdot[CO2]/d[H2]
    // d()/d[O]
    dqdci = +k_f * sc[14];
    J[68] -= dqdci; // dwdot[O]/d[O]
    J[80] -= dqdci; // dwdot[CO]/d[O]
    J[81] += dqdci; // dwdot[CO2]/d[O]
    // d()/d[O2]
    dqdci = (6 - 1) * q_nocor;
    J[101] -= dqdci; // dwdot[O]/d[O2]
    J[113] -= dqdci; // dwdot[CO]/d[O2]
    J[114] += dqdci; // dwdot[CO2]/d[O2]
    // d()/d[H2O]
    dqdci = (6 - 1) * q_nocor;
    J[167] -= dqdci; // dwdot[O]/d[H2O]
    J[179] -= dqdci; // dwdot[CO]/d[H2O]
    J[180] += dqdci; // dwdot[CO2]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * q_nocor;
    J[431] -= dqdci; // dwdot[O]/d[CH4]
    J[443] -= dqdci; // dwdot[CO]/d[CH4]
    J[444] += dqdci; // dwdot[CO2]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * q_nocor + k_f * sc[2];
    J[464] -= dqdci; // dwdot[O]/d[CO]
    J[476] -= dqdci; // dwdot[CO]/d[CO]
    J[477] += dqdci; // dwdot[CO2]/d[CO]
    // d()/d[CO2]
    dqdci = (3.5 - 1) * q_nocor - k_r;
    J[497] -= dqdci; // dwdot[O]/d[CO2]
    J[509] -= dqdci; // dwdot[CO]/d[CO2]
    J[510] += dqdci; // dwdot[CO2]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * q_nocor;
    J[860] -= dqdci; // dwdot[O]/d[C2H6]
    J[872] -= dqdci; // dwdot[CO]/d[C2H6]
    J[873] += dqdci; // dwdot[CO2]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.5 - 1) * q_nocor;
    J[1025] -= dqdci; // dwdot[O]/d[AR]
    J[1037] -= dqdci; // dwdot[CO]/d[AR]
    J[1038] += dqdci; // dwdot[CO2]/d[AR]
  } else {
    dqdc[0] = 2 * q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor + k_f * sc[14];
    dqdc[3] = 6 * q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 6 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 2 * q_nocor;
    dqdc[14] = 1.5 * q_nocor + k_f * sc[2];
    dqdc[15] = 3.5 * q_nocor - k_r;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 3 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = 0.5 * q_nocor;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 2] -= dqdc[k];
      J[33 * k + 14] -= dqdc[k];
      J[33 * k + 15] += dqdc[k];
    }
  }
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1070] -= dqdT; // dwdot[CO]/dT
  J[1071] += dqdT; // dwdot[CO2]/dT

  // reaction 32: H + O2 + M <=> HO2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0 - 1) * sc[3] + (0 - 1) * sc[5] + (0.75 - 1) * sc[14] +
          (1.5 - 1) * sc[15] + (1.5 - 1) * sc[26] + (0 - 1) * sc[30] +
          (0 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[3];
  k_f = 2800000 * exp(-0.86 * tc[0]);
  dlnkfdT = -0.86 * invT;
  // reverse
  phi_r = sc[6];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[3]) + (h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O2
  wdot[6] += q; // HO2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H]
    dqdci = +k_f * sc[3];
    J[34] -= dqdci; // dwdot[H]/d[H]
    J[36] -= dqdci; // dwdot[O2]/d[H]
    J[39] += dqdci; // dwdot[HO2]/d[H]
    // d()/d[O2]
    dqdci = (0 - 1) * q_nocor + k_f * sc[1];
    J[100] -= dqdci; // dwdot[H]/d[O2]
    J[102] -= dqdci; // dwdot[O2]/d[O2]
    J[105] += dqdci; // dwdot[HO2]/d[O2]
    // d()/d[H2O]
    dqdci = (0 - 1) * q_nocor;
    J[166] -= dqdci; // dwdot[H]/d[H2O]
    J[168] -= dqdci; // dwdot[O2]/d[H2O]
    J[171] += dqdci; // dwdot[HO2]/d[H2O]
    // d()/d[HO2]
    dqdci = -k_r;
    J[199] -= dqdci; // dwdot[H]/d[HO2]
    J[201] -= dqdci; // dwdot[O2]/d[HO2]
    J[204] += dqdci; // dwdot[HO2]/d[HO2]
    // d()/d[CO]
    dqdci = (0.75 - 1) * q_nocor;
    J[463] -= dqdci; // dwdot[H]/d[CO]
    J[465] -= dqdci; // dwdot[O2]/d[CO]
    J[468] += dqdci; // dwdot[HO2]/d[CO]
    // d()/d[CO2]
    dqdci = (1.5 - 1) * q_nocor;
    J[496] -= dqdci; // dwdot[H]/d[CO2]
    J[498] -= dqdci; // dwdot[O2]/d[CO2]
    J[501] += dqdci; // dwdot[HO2]/d[CO2]
    // d()/d[C2H6]
    dqdci = (1.5 - 1) * q_nocor;
    J[859] -= dqdci; // dwdot[H]/d[C2H6]
    J[861] -= dqdci; // dwdot[O2]/d[C2H6]
    J[864] += dqdci; // dwdot[HO2]/d[C2H6]
    // d()/d[N2]
    dqdci = (0 - 1) * q_nocor;
    J[991] -= dqdci; // dwdot[H]/d[N2]
    J[993] -= dqdci; // dwdot[O2]/d[N2]
    J[996] += dqdci; // dwdot[HO2]/d[N2]
    // d()/d[AR]
    dqdci = (0 - 1) * q_nocor;
    J[1024] -= dqdci; // dwdot[H]/d[AR]
    J[1026] -= dqdci; // dwdot[O2]/d[AR]
    J[1029] += dqdci; // dwdot[HO2]/d[AR]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor + k_f * sc[3];
    dqdc[2] = q_nocor;
    dqdc[3] = +k_f * sc[1];
    dqdc[4] = q_nocor;
    dqdc[6] = q_nocor - k_r;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = 0.75 * q_nocor;
    dqdc[15] = 1.5 * q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 1.5 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 1] -= dqdc[k];
      J[33 * k + 3] -= dqdc[k];
      J[33 * k + 6] += dqdc[k];
    }
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT

  // reaction 33: H + O2 + O2 <=> HO2 + O2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * (sc[3] * sc[3]);
  k_f = 300000000 * exp(-1.72 * tc[0]);
  dlnkfdT = -1.72 * invT;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[1] + 2.000000 * h_RT[3]) + (h_RT[3] + h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O2
  wdot[6] += q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[3];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[36] -= dqdci; // dwdot[O2]/d[H]
  J[39] += dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * 2.000000 * sc[3] - k_r * sc[6];
  J[100] -= dqdci; // dwdot[H]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[HO2]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[3];
  J[199] -= dqdci; // dwdot[H]/d[HO2]
  J[201] -= dqdci; // dwdot[O2]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT

  // reaction 34: H + O2 + H2O <=> HO2 + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[3] * sc[5];
  k_f = 9380000 * exp(-0.76 * tc[0]);
  dlnkfdT = -0.76 * invT;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[1] + h_RT[3] + h_RT[5]) + (h_RT[5] + h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O2
  wdot[6] += q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[5];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[36] -= dqdci; // dwdot[O2]/d[H]
  J[39] += dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * sc[5];
  J[100] -= dqdci; // dwdot[H]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[HO2]/d[O2]
  // d()/d[H2O]
  dqdci = +k_f * sc[1] * sc[3] - k_r * sc[6];
  J[166] -= dqdci; // dwdot[H]/d[H2O]
  J[168] -= dqdci; // dwdot[O2]/d[H2O]
  J[171] += dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[199] -= dqdci; // dwdot[H]/d[HO2]
  J[201] -= dqdci; // dwdot[O2]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT

  // reaction 35: H + O2 + N2 <=> HO2 + N2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[3] * sc[30];
  k_f = 375000000 * exp(-1.72 * tc[0]);
  dlnkfdT = -1.72 * invT;
  // reverse
  phi_r = sc[6] * sc[30];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[1] + h_RT[3] + h_RT[30]) + (h_RT[6] + h_RT[30]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O2
  wdot[6] += q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[30];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[36] -= dqdci; // dwdot[O2]/d[H]
  J[39] += dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * sc[30];
  J[100] -= dqdci; // dwdot[H]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[HO2]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[30];
  J[199] -= dqdci; // dwdot[H]/d[HO2]
  J[201] -= dqdci; // dwdot[O2]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/d[N2]
  dqdci = +k_f * sc[1] * sc[3] - k_r * sc[6];
  J[991] -= dqdci; // dwdot[H]/d[N2]
  J[993] -= dqdci; // dwdot[O2]/d[N2]
  J[996] += dqdci; // dwdot[HO2]/d[N2]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT

  // reaction 36: H + O2 + AR <=> HO2 + AR
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[3] * sc[31];
  k_f = 700000 * exp(-0.8 * tc[0]);
  dlnkfdT = -0.8 * invT;
  // reverse
  phi_r = sc[6] * sc[31];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[1] + h_RT[3] + h_RT[31]) + (h_RT[6] + h_RT[31]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O2
  wdot[6] += q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[31];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[36] -= dqdci; // dwdot[O2]/d[H]
  J[39] += dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * sc[31];
  J[100] -= dqdci; // dwdot[H]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[HO2]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[31];
  J[199] -= dqdci; // dwdot[H]/d[HO2]
  J[201] -= dqdci; // dwdot[O2]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/d[AR]
  dqdci = +k_f * sc[1] * sc[3] - k_r * sc[6];
  J[1024] -= dqdci; // dwdot[H]/d[AR]
  J[1026] -= dqdci; // dwdot[O2]/d[AR]
  J[1029] += dqdci; // dwdot[HO2]/d[AR]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT

  // reaction 38: 2 H + M <=> H2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0 - 1) * sc[0] + (0 - 1) * sc[5] + sc[13] +
          (0 - 1) * sc[15] + (3 - 1) * sc[26] + (0.63 - 1) * sc[31];
  // forward
  phi_f = (sc[1] * sc[1]);
  k_f = 1000000 * exp(-1 * tc[0]);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[0];
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[1]) + (h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (0 - 1) * q_nocor - k_r;
    J[0] += dqdci;      // dwdot[H2]/d[H2]
    J[1] += -2 * dqdci; // dwdot[H]/d[H2]
    // d()/d[H]
    dqdci = +k_f * 2.000000 * sc[1];
    J[33] += dqdci;      // dwdot[H2]/d[H]
    J[34] += -2 * dqdci; // dwdot[H]/d[H]
    // d()/d[H2O]
    dqdci = (0 - 1) * q_nocor;
    J[165] += dqdci;      // dwdot[H2]/d[H2O]
    J[166] += -2 * dqdci; // dwdot[H]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * q_nocor;
    J[429] += dqdci;      // dwdot[H2]/d[CH4]
    J[430] += -2 * dqdci; // dwdot[H]/d[CH4]
    // d()/d[CO2]
    dqdci = (0 - 1) * q_nocor;
    J[495] += dqdci;      // dwdot[H2]/d[CO2]
    J[496] += -2 * dqdci; // dwdot[H]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * q_nocor;
    J[858] += dqdci;      // dwdot[H2]/d[C2H6]
    J[859] += -2 * dqdci; // dwdot[H]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.63 - 1) * q_nocor;
    J[1023] += dqdci;      // dwdot[H2]/d[AR]
    J[1024] += -2 * dqdci; // dwdot[H]/d[AR]
  } else {
    dqdc[0] = -k_r;
    dqdc[1] = q_nocor + k_f * 2.000000 * sc[1];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 2 * q_nocor;
    dqdc[14] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 3 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = 0.63 * q_nocor;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 0] += dqdc[k];
      J[33 * k + 1] += -2 * dqdc[k];
    }
  }
  J[1056] += dqdT;      // dwdot[H2]/dT
  J[1057] += -2 * dqdT; // dwdot[H]/dT

  // reaction 39: 2 H + H2 <=> H2 + H2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * (sc[1] * sc[1]);
  k_f = 90000 * exp(-0.6 * tc[0]);
  dlnkfdT = -0.6 * invT;
  // reverse
  phi_r = (sc[0] * sc[0]);
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[0] + 2.000000 * h_RT[1]) + (2.000000 * h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // d()/d[H2]
  dqdci = +k_f * sc[1] * sc[1] - k_r * 2.000000 * sc[0];
  J[0] += dqdci;      // dwdot[H2]/d[H2]
  J[1] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[0] * 2.000000 * sc[1];
  J[33] += dqdci;      // dwdot[H2]/d[H]
  J[34] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/dT
  J[1056] += dqdT;      // dwdot[H2]/dT
  J[1057] += -2 * dqdT; // dwdot[H]/dT

  // reaction 40: 2 H + H2O <=> H2 + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[5];
  k_f = 60000000 * exp(-1.25 * tc[0]);
  dlnkfdT = -1.25 * invT;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[5]) + (h_RT[0] + h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // d()/d[H2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;      // dwdot[H2]/d[H2]
  J[1] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[5];
  J[33] += dqdci;      // dwdot[H2]/d[H]
  J[34] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * sc[1] * sc[1] - k_r * sc[0];
  J[165] += dqdci;      // dwdot[H2]/d[H2O]
  J[166] += -2 * dqdci; // dwdot[H]/d[H2O]
  // d()/dT
  J[1056] += dqdT;      // dwdot[H2]/dT
  J[1057] += -2 * dqdT; // dwdot[H]/dT

  // reaction 41: 2 H + CO2 <=> H2 + CO2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[15];
  k_f = 550000000 * exp(-2 * tc[0]);
  dlnkfdT = -2 * invT;
  // reverse
  phi_r = sc[0] * sc[15];
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[15]) + (h_RT[0] + h_RT[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // d()/d[H2]
  dqdci = -k_r * sc[15];
  J[0] += dqdci;      // dwdot[H2]/d[H2]
  J[1] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[15];
  J[33] += dqdci;      // dwdot[H2]/d[H]
  J[34] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/d[CO2]
  dqdci = +k_f * sc[1] * sc[1] - k_r * sc[0];
  J[495] += dqdci;      // dwdot[H2]/d[CO2]
  J[496] += -2 * dqdci; // dwdot[H]/d[CO2]
  // d()/dT
  J[1056] += dqdT;      // dwdot[H2]/dT
  J[1057] += -2 * dqdT; // dwdot[H]/dT

  // reaction 42: H + OH + M <=> H2O + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0.73 - 1) * sc[0] + (3.65 - 1) * sc[5] + sc[13] +
          (3 - 1) * sc[26] + (0.38 - 1) * sc[31];
  // forward
  phi_f = sc[1] * sc[4];
  k_f = 22000000000 * exp(-2 * tc[0]);
  dlnkfdT = -2 * invT;
  // reverse
  phi_r = sc[5];
  Kc = refCinv * exp(g_RT[1] + g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[4]) + (h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (0.73 - 1) * q_nocor;
    J[1] -= dqdci; // dwdot[H]/d[H2]
    J[4] -= dqdci; // dwdot[OH]/d[H2]
    J[5] += dqdci; // dwdot[H2O]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[4];
    J[34] -= dqdci; // dwdot[H]/d[H]
    J[37] -= dqdci; // dwdot[OH]/d[H]
    J[38] += dqdci; // dwdot[H2O]/d[H]
    // d()/d[OH]
    dqdci = +k_f * sc[1];
    J[133] -= dqdci; // dwdot[H]/d[OH]
    J[136] -= dqdci; // dwdot[OH]/d[OH]
    J[137] += dqdci; // dwdot[H2O]/d[OH]
    // d()/d[H2O]
    dqdci = (3.65 - 1) * q_nocor - k_r;
    J[166] -= dqdci; // dwdot[H]/d[H2O]
    J[169] -= dqdci; // dwdot[OH]/d[H2O]
    J[170] += dqdci; // dwdot[H2O]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * q_nocor;
    J[430] -= dqdci; // dwdot[H]/d[CH4]
    J[433] -= dqdci; // dwdot[OH]/d[CH4]
    J[434] += dqdci; // dwdot[H2O]/d[CH4]
    // d()/d[C2H6]
    dqdci = (3 - 1) * q_nocor;
    J[859] -= dqdci; // dwdot[H]/d[C2H6]
    J[862] -= dqdci; // dwdot[OH]/d[C2H6]
    J[863] += dqdci; // dwdot[H2O]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.38 - 1) * q_nocor;
    J[1024] -= dqdci; // dwdot[H]/d[AR]
    J[1027] -= dqdci; // dwdot[OH]/d[AR]
    J[1028] += dqdci; // dwdot[H2O]/d[AR]
  } else {
    dqdc[0] = 0.73 * q_nocor;
    dqdc[1] = q_nocor + k_f * sc[4];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor + k_f * sc[1];
    dqdc[5] = 3.65 * q_nocor - k_r;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 2 * q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 3 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = 0.38 * q_nocor;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 1] -= dqdc[k];
      J[33 * k + 4] -= dqdc[k];
      J[33 * k + 5] += dqdc[k];
    }
  }
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT

  // reaction 165: HCO + H2O <=> CO + H + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[16];
  k_f = 2244000000000 * exp(-1 * tc[0] - (8554.68331868023) * invT);
  dlnkfdT = -1 * invT + (8554.68331868023) * invT2;
  // reverse
  phi_r = sc[1] * sc[5] * sc[14];
  Kc = refC * exp(-g_RT[1] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[5] + h_RT[16]) + (h_RT[1] + h_RT[5] + h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[5] * sc[14];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[47] += dqdci; // dwdot[CO]/d[H]
  J[49] -= dqdci; // dwdot[HCO]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * sc[16] - k_r * sc[1] * sc[14];
  J[166] += dqdci; // dwdot[H]/d[H2O]
  J[179] += dqdci; // dwdot[CO]/d[H2O]
  J[181] -= dqdci; // dwdot[HCO]/d[H2O]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * sc[5];
  J[463] += dqdci; // dwdot[H]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[478] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[5];
  J[529] += dqdci; // dwdot[H]/d[HCO]
  J[542] += dqdci; // dwdot[CO]/d[HCO]
  J[544] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1072] -= dqdT; // dwdot[HCO]/dT

  // reaction 166: HCO + M <=> CO + H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (0 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[16];
  k_f = 187000000000 * exp(-1 * tc[0] - (8554.68331868023) * invT);
  dlnkfdT = -1 * invT + (8554.68331868023) * invT2;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = refC * exp(-g_RT[1] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16]) + (h_RT[1] + h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[1] += dqdci;  // dwdot[H]/d[H2]
    J[14] += dqdci; // dwdot[CO]/d[H2]
    J[16] -= dqdci; // dwdot[HCO]/d[H2]
    // d()/d[H]
    dqdci = -k_r * sc[14];
    J[34] += dqdci; // dwdot[H]/d[H]
    J[47] += dqdci; // dwdot[CO]/d[H]
    J[49] -= dqdci; // dwdot[HCO]/d[H]
    // d()/d[H2O]
    dqdci = (0 - 1) * q_nocor;
    J[166] += dqdci; // dwdot[H]/d[H2O]
    J[179] += dqdci; // dwdot[CO]/d[H2O]
    J[181] -= dqdci; // dwdot[HCO]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * q_nocor;
    J[430] += dqdci; // dwdot[H]/d[CH4]
    J[443] += dqdci; // dwdot[CO]/d[CH4]
    J[445] -= dqdci; // dwdot[HCO]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * q_nocor - k_r * sc[1];
    J[463] += dqdci; // dwdot[H]/d[CO]
    J[476] += dqdci; // dwdot[CO]/d[CO]
    J[478] -= dqdci; // dwdot[HCO]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * q_nocor;
    J[496] += dqdci; // dwdot[H]/d[CO2]
    J[509] += dqdci; // dwdot[CO]/d[CO2]
    J[511] -= dqdci; // dwdot[HCO]/d[CO2]
    // d()/d[HCO]
    dqdci = +k_f;
    J[529] += dqdci; // dwdot[H]/d[HCO]
    J[542] += dqdci; // dwdot[CO]/d[HCO]
    J[544] -= dqdci; // dwdot[HCO]/d[HCO]
    // d()/d[C2H6]
    dqdci = (3 - 1) * q_nocor;
    J[859] += dqdci; // dwdot[H]/d[C2H6]
    J[872] += dqdci; // dwdot[CO]/d[C2H6]
    J[874] -= dqdci; // dwdot[HCO]/d[C2H6]
  } else {
    dqdc[0] = 2 * q_nocor;
    dqdc[1] = q_nocor - k_r * sc[14];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 2 * q_nocor;
    dqdc[14] = 1.5 * q_nocor - k_r * sc[1];
    dqdc[15] = 2 * q_nocor;
    dqdc[16] = q_nocor + k_f;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 3 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    for (int k = 0; k < 32; k++) {
      J[33 * k + 1] += dqdc[k];
      J[33 * k + 14] += dqdc[k];
      J[33 * k + 16] -= dqdc[k];
    }
  }
  J[1057] += dqdT; // dwdot[H]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1072] -= dqdT; // dwdot[HCO]/dT

  // reaction 2: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[2];
  k_f = 0.05 * exp(2.67 * tc[0] - (3165.23282791169) * invT);
  dlnkfdT = 2.67 * invT + (3165.23282791169) * invT2;
  // reverse
  phi_r = sc[1] * sc[4];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[2] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[2]) + (h_RT[1] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // H2
  wdot[1] += q; // H
  wdot[2] -= q; // O
  wdot[4] += q; // OH
  // d()/d[H2]
  dqdci = +k_f * sc[2];
  J[0] -= dqdci; // dwdot[H2]/d[H2]
  J[1] += dqdci; // dwdot[H]/d[H2]
  J[2] -= dqdci; // dwdot[O]/d[H2]
  J[4] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[4];
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[34] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[O]/d[H]
  J[37] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[0];
  J[66] -= dqdci; // dwdot[H2]/d[O]
  J[67] += dqdci; // dwdot[H]/d[O]
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[1];
  J[132] -= dqdci; // dwdot[H2]/d[OH]
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1056] -= dqdT; // dwdot[H2]/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT

  // reaction 3: HO2 + O <=> O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[6];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[4];
  Kc = exp(g_RT[2] - g_RT[3] - g_RT[4] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[6]) + (h_RT[3] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // O
  wdot[3] += q; // O2
  wdot[4] += q; // OH
  wdot[6] -= q; // HO2
  // d()/d[O]
  dqdci = +k_f * sc[6];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[69] += dqdci; // dwdot[O2]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[72] -= dqdci; // dwdot[HO2]/d[O]
  // d()/d[O2]
  dqdci = -k_r * sc[4];
  J[101] -= dqdci; // dwdot[O]/d[O2]
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[103] += dqdci; // dwdot[OH]/d[O2]
  J[105] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[3];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[135] += dqdci; // dwdot[O2]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[138] -= dqdci; // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[2];
  J[200] -= dqdci; // dwdot[O]/d[HO2]
  J[201] += dqdci; // dwdot[O2]/d[HO2]
  J[202] += dqdci; // dwdot[OH]/d[HO2]
  J[204] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1062] -= dqdT; // dwdot[HO2]/dT

  // reaction 4: H2O2 + O <=> HO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[7];
  k_f = 9.63 * exp(2 * tc[0] - (2012.86666321888) * invT);
  dlnkfdT = 2 * invT + (2012.86666321888) * invT2;
  // reverse
  phi_r = sc[4] * sc[6];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[7]) + (h_RT[4] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // O
  wdot[4] += q; // OH
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[O]
  dqdci = +k_f * sc[7];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[72] += dqdci; // dwdot[HO2]/d[O]
  J[73] -= dqdci; // dwdot[H2O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[6];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[138] += dqdci; // dwdot[HO2]/d[OH]
  J[139] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[4];
  J[200] -= dqdci; // dwdot[O]/d[HO2]
  J[202] += dqdci; // dwdot[OH]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  J[205] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[2];
  J[233] -= dqdci; // dwdot[O]/d[H2O2]
  J[235] += dqdci; // dwdot[OH]/d[H2O2]
  J[237] += dqdci; // dwdot[HO2]/d[H2O2]
  J[238] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT
  J[1063] -= dqdT; // dwdot[H2O2]/dT

  // reaction 5: CH + O <=> CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[9];
  k_f = 57000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[9] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[9]) + (h_RT[1] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[9] -= q;  // CH
  wdot[14] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[14];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[O]/d[H]
  J[42] -= dqdci; // dwdot[CH]/d[H]
  J[47] += dqdci; // dwdot[CO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[9];
  J[67] += dqdci; // dwdot[H]/d[O]
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[75] -= dqdci; // dwdot[CH]/d[O]
  J[80] += dqdci; // dwdot[CO]/d[O]
  // d()/d[CH]
  dqdci = +k_f * sc[2];
  J[298] += dqdci; // dwdot[H]/d[CH]
  J[299] -= dqdci; // dwdot[O]/d[CH]
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[311] += dqdci; // dwdot[CO]/d[CH]
  // d()/d[CO]
  dqdci = -k_r * sc[1];
  J[463] += dqdci; // dwdot[H]/d[CO]
  J[464] -= dqdci; // dwdot[O]/d[CO]
  J[471] -= dqdci; // dwdot[CH]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1070] += dqdT; // dwdot[CO]/dT

  // reaction 6: CH2 + O <=> H + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[10];
  k_f = 80000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[16];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[10] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[10]) + (h_RT[1] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[10] -= q; // CH2
  wdot[16] += q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[16];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[O]/d[H]
  J[43] -= dqdci; // dwdot[CH2]/d[H]
  J[49] += dqdci; // dwdot[HCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[10];
  J[67] += dqdci; // dwdot[H]/d[O]
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[76] -= dqdci; // dwdot[CH2]/d[O]
  J[82] += dqdci; // dwdot[HCO]/d[O]
  // d()/d[CH2]
  dqdci = +k_f * sc[2];
  J[331] += dqdci; // dwdot[H]/d[CH2]
  J[332] -= dqdci; // dwdot[O]/d[CH2]
  J[340] -= dqdci; // dwdot[CH2]/d[CH2]
  J[346] += dqdci; // dwdot[HCO]/d[CH2]
  // d()/d[HCO]
  dqdci = -k_r * sc[1];
  J[529] += dqdci; // dwdot[H]/d[HCO]
  J[530] -= dqdci; // dwdot[O]/d[HCO]
  J[538] -= dqdci; // dwdot[CH2]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT

  // reaction 7: CH2(S) + O <=> CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[11];
  k_f = 15000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[14];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[11] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[11]) + (h_RT[0] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // O
  wdot[11] -= q; // CH2(S)
  wdot[14] += q; // CO
  // d()/d[H2]
  dqdci = -k_r * sc[14];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[O]/d[H2]
  J[11] -= dqdci; // dwdot[CH2(S)]/d[H2]
  J[14] += dqdci; // dwdot[CO]/d[H2]
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[66] += dqdci; // dwdot[H2]/d[O]
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[77] -= dqdci; // dwdot[CH2(S)]/d[O]
  J[80] += dqdci; // dwdot[CO]/d[O]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[2];
  J[363] += dqdci; // dwdot[H2]/d[CH2(S)]
  J[365] -= dqdci; // dwdot[O]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[377] += dqdci; // dwdot[CO]/d[CH2(S)]
  // d()/d[CO]
  dqdci = -k_r * sc[0];
  J[462] += dqdci; // dwdot[H2]/d[CO]
  J[464] -= dqdci; // dwdot[O]/d[CO]
  J[473] -= dqdci; // dwdot[CH2(S)]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT
  J[1070] += dqdT; // dwdot[CO]/dT

  // reaction 8: CH2(S) + O <=> H + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[11];
  k_f = 15000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[16];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[11] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[11]) + (h_RT[1] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[11] -= q; // CH2(S)
  wdot[16] += q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[16];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[O]/d[H]
  J[44] -= dqdci; // dwdot[CH2(S)]/d[H]
  J[49] += dqdci; // dwdot[HCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[67] += dqdci; // dwdot[H]/d[O]
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[77] -= dqdci; // dwdot[CH2(S)]/d[O]
  J[82] += dqdci; // dwdot[HCO]/d[O]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[2];
  J[364] += dqdci; // dwdot[H]/d[CH2(S)]
  J[365] -= dqdci; // dwdot[O]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[379] += dqdci; // dwdot[HCO]/d[CH2(S)]
  // d()/d[HCO]
  dqdci = -k_r * sc[1];
  J[529] += dqdci; // dwdot[H]/d[HCO]
  J[530] -= dqdci; // dwdot[O]/d[HCO]
  J[539] -= dqdci; // dwdot[CH2(S)]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT

  // reaction 9: CH3 + O <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[12];
  k_f = 84300000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[17];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[12] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[12]) + (h_RT[1] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[12] -= q; // CH3
  wdot[17] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[17];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[O]/d[H]
  J[45] -= dqdci; // dwdot[CH3]/d[H]
  J[50] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[12];
  J[67] += dqdci; // dwdot[H]/d[O]
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[78] -= dqdci; // dwdot[CH3]/d[O]
  J[83] += dqdci; // dwdot[CH2O]/d[O]
  // d()/d[CH3]
  dqdci = +k_f * sc[2];
  J[397] += dqdci; // dwdot[H]/d[CH3]
  J[398] -= dqdci; // dwdot[O]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[413] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[562] += dqdci; // dwdot[H]/d[CH2O]
  J[563] -= dqdci; // dwdot[O]/d[CH2O]
  J[573] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT

  // reaction 10: CH4 + O <=> CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[13];
  k_f = 1020 * exp(1.5 * tc[0] - (4327.66332592059) * invT);
  dlnkfdT = 1.5 * invT + (4327.66332592059) * invT2;
  // reverse
  phi_r = sc[4] * sc[12];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[13]) + (h_RT[4] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[12] += q; // CH3
  wdot[13] -= q; // CH4
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[78] += dqdci; // dwdot[CH3]/d[O]
  J[79] -= dqdci; // dwdot[CH4]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[144] += dqdci; // dwdot[CH3]/d[OH]
  J[145] -= dqdci; // dwdot[CH4]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[4];
  J[398] -= dqdci; // dwdot[O]/d[CH3]
  J[400] += dqdci; // dwdot[OH]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  J[409] -= dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[2];
  J[431] -= dqdci; // dwdot[O]/d[CH4]
  J[433] += dqdci; // dwdot[OH]/d[CH4]
  J[441] += dqdci; // dwdot[CH3]/d[CH4]
  J[442] -= dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT
  J[1069] -= dqdT; // dwdot[CH4]/dT

  // reaction 12: HCO + O <=> CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[16];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[14];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[4] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[80] += dqdci; // dwdot[CO]/d[O]
  J[82] -= dqdci; // dwdot[HCO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[14];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[146] += dqdci; // dwdot[CO]/d[OH]
  J[148] -= dqdci; // dwdot[HCO]/d[OH]
  // d()/d[CO]
  dqdci = -k_r * sc[4];
  J[464] -= dqdci; // dwdot[O]/d[CO]
  J[466] += dqdci; // dwdot[OH]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[478] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[2];
  J[530] -= dqdci; // dwdot[O]/d[HCO]
  J[532] += dqdci; // dwdot[OH]/d[HCO]
  J[542] += dqdci; // dwdot[CO]/d[HCO]
  J[544] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1072] -= dqdT; // dwdot[HCO]/dT

  // reaction 13: HCO + O <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[16];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[15];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[1] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[15] += q; // CO2
  wdot[16] -= q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[15];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[O]/d[H]
  J[48] += dqdci; // dwdot[CO2]/d[H]
  J[49] -= dqdci; // dwdot[HCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[67] += dqdci; // dwdot[H]/d[O]
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[81] += dqdci; // dwdot[CO2]/d[O]
  J[82] -= dqdci; // dwdot[HCO]/d[O]
  // d()/d[CO2]
  dqdci = -k_r * sc[1];
  J[496] += dqdci; // dwdot[H]/d[CO2]
  J[497] -= dqdci; // dwdot[O]/d[CO2]
  J[510] += dqdci; // dwdot[CO2]/d[CO2]
  J[511] -= dqdci; // dwdot[HCO]/d[CO2]
  // d()/d[HCO]
  dqdci = +k_f * sc[2];
  J[529] += dqdci; // dwdot[H]/d[HCO]
  J[530] -= dqdci; // dwdot[O]/d[HCO]
  J[543] += dqdci; // dwdot[CO2]/d[HCO]
  J[544] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1071] += dqdT; // dwdot[CO2]/dT
  J[1072] -= dqdT; // dwdot[HCO]/dT

  // reaction 14: CH2O + O <=> HCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[17];
  k_f = 39000000 * exp(-(1781.38699694871) * invT);
  dlnkfdT = (1781.38699694871) * invT2;
  // reverse
  phi_r = sc[4] * sc[16];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[17]) + (h_RT[4] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[82] += dqdci; // dwdot[HCO]/d[O]
  J[83] -= dqdci; // dwdot[CH2O]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[16];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[148] += dqdci; // dwdot[HCO]/d[OH]
  J[149] -= dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[HCO]
  dqdci = -k_r * sc[4];
  J[530] -= dqdci; // dwdot[O]/d[HCO]
  J[532] += dqdci; // dwdot[OH]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  J[545] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[2];
  J[563] -= dqdci; // dwdot[O]/d[CH2O]
  J[565] += dqdci; // dwdot[OH]/d[CH2O]
  J[577] += dqdci; // dwdot[HCO]/d[CH2O]
  J[578] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT
  J[1073] -= dqdT; // dwdot[CH2O]/dT

  // reaction 15: CH2OH + O <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[18];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[17];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[18]) + (h_RT[4] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[17] += q; // CH2O
  wdot[18] -= q; // CH2OH
  // d()/d[O]
  dqdci = +k_f * sc[18];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[83] += dqdci; // dwdot[CH2O]/d[O]
  J[84] -= dqdci; // dwdot[CH2OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[149] += dqdci; // dwdot[CH2O]/d[OH]
  J[150] -= dqdci; // dwdot[CH2OH]/d[OH]
  // d()/d[CH2O]
  dqdci = -k_r * sc[4];
  J[563] -= dqdci; // dwdot[O]/d[CH2O]
  J[565] += dqdci; // dwdot[OH]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[579] -= dqdci; // dwdot[CH2OH]/d[CH2O]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[2];
  J[596] -= dqdci; // dwdot[O]/d[CH2OH]
  J[598] += dqdci; // dwdot[OH]/d[CH2OH]
  J[611] += dqdci; // dwdot[CH2O]/d[CH2OH]
  J[612] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT
  J[1074] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 16: CH3O + O <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[17];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[17] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[19]) + (h_RT[4] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[17] += q; // CH2O
  wdot[19] -= q; // CH3O
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[83] += dqdci; // dwdot[CH2O]/d[O]
  J[85] -= dqdci; // dwdot[CH3O]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[149] += dqdci; // dwdot[CH2O]/d[OH]
  J[151] -= dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[CH2O]
  dqdci = -k_r * sc[4];
  J[563] -= dqdci; // dwdot[O]/d[CH2O]
  J[565] += dqdci; // dwdot[OH]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[580] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[2];
  J[629] -= dqdci; // dwdot[O]/d[CH3O]
  J[631] += dqdci; // dwdot[OH]/d[CH3O]
  J[644] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[646] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT
  J[1075] -= dqdT; // dwdot[CH3O]/dT

  // reaction 17: CH3OH + O <=> CH2OH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 0.388 * exp(2.5 * tc[0] - (1559.97166399463) * invT);
  dlnkfdT = 2.5 * invT + (1559.97166399463) * invT2;
  // reverse
  phi_r = sc[4] * sc[18];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[4] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[84] += dqdci; // dwdot[CH2OH]/d[O]
  J[86] -= dqdci; // dwdot[CH3OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[150] += dqdci; // dwdot[CH2OH]/d[OH]
  J[152] -= dqdci; // dwdot[CH3OH]/d[OH]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[4];
  J[596] -= dqdci; // dwdot[O]/d[CH2OH]
  J[598] += dqdci; // dwdot[OH]/d[CH2OH]
  J[612] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[614] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[2];
  J[662] -= dqdci; // dwdot[O]/d[CH3OH]
  J[664] += dqdci; // dwdot[OH]/d[CH3OH]
  J[678] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[680] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1074] += dqdT; // dwdot[CH2OH]/dT
  J[1076] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 18: CH3OH + O <=> CH3O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 0.13 * exp(2.5 * tc[0] - (2516.0833290236) * invT);
  dlnkfdT = 2.5 * invT + (2516.0833290236) * invT2;
  // reverse
  phi_r = sc[4] * sc[19];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[4] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[85] += dqdci; // dwdot[CH3O]/d[O]
  J[86] -= dqdci; // dwdot[CH3OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[19];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[151] += dqdci; // dwdot[CH3O]/d[OH]
  J[152] -= dqdci; // dwdot[CH3OH]/d[OH]
  // d()/d[CH3O]
  dqdci = -k_r * sc[4];
  J[629] -= dqdci; // dwdot[O]/d[CH3O]
  J[631] += dqdci; // dwdot[OH]/d[CH3O]
  J[646] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[647] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[2];
  J[662] -= dqdci; // dwdot[O]/d[CH3OH]
  J[664] += dqdci; // dwdot[OH]/d[CH3OH]
  J[679] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[680] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1075] += dqdT; // dwdot[CH3O]/dT
  J[1076] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 19: C2H + O <=> CH + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[21];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[9] * sc[14];
  Kc = exp(g_RT[2] - g_RT[9] - g_RT[14] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[21]) + (h_RT[9] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[9] += q;  // CH
  wdot[14] += q; // CO
  wdot[21] -= q; // C2H
  // d()/d[O]
  dqdci = +k_f * sc[21];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[CH]/d[O]
  J[80] += dqdci; // dwdot[CO]/d[O]
  J[87] -= dqdci; // dwdot[C2H]/d[O]
  // d()/d[CH]
  dqdci = -k_r * sc[14];
  J[299] -= dqdci; // dwdot[O]/d[CH]
  J[306] += dqdci; // dwdot[CH]/d[CH]
  J[311] += dqdci; // dwdot[CO]/d[CH]
  J[318] -= dqdci; // dwdot[C2H]/d[CH]
  // d()/d[CO]
  dqdci = -k_r * sc[9];
  J[464] -= dqdci; // dwdot[O]/d[CO]
  J[471] += dqdci; // dwdot[CH]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[483] -= dqdci; // dwdot[C2H]/d[CO]
  // d()/d[C2H]
  dqdci = +k_f * sc[2];
  J[695] -= dqdci; // dwdot[O]/d[C2H]
  J[702] += dqdci; // dwdot[CH]/d[C2H]
  J[707] += dqdci; // dwdot[CO]/d[C2H]
  J[714] -= dqdci; // dwdot[C2H]/d[C2H]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1065] += dqdT; // dwdot[CH]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1077] -= dqdT; // dwdot[C2H]/dT

  // reaction 20: C2H2 + O <=> H + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 10.2 * exp(2 * tc[0] - (956.111665028967) * invT);
  dlnkfdT = 2 * invT + (956.111665028967) * invT2;
  // reverse
  phi_r = sc[1] * sc[27];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[22] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[1] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[22] -= q; // C2H2
  wdot[27] += q; // HCCO
  // d()/d[H]
  dqdci = -k_r * sc[27];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[O]/d[H]
  J[55] -= dqdci; // dwdot[C2H2]/d[H]
  J[60] += dqdci; // dwdot[HCCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[67] += dqdci; // dwdot[H]/d[O]
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[88] -= dqdci; // dwdot[C2H2]/d[O]
  J[93] += dqdci; // dwdot[HCCO]/d[O]
  // d()/d[C2H2]
  dqdci = +k_f * sc[2];
  J[727] += dqdci; // dwdot[H]/d[C2H2]
  J[728] -= dqdci; // dwdot[O]/d[C2H2]
  J[748] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[753] += dqdci; // dwdot[HCCO]/d[C2H2]
  // d()/d[HCCO]
  dqdci = -k_r * sc[1];
  J[892] += dqdci; // dwdot[H]/d[HCCO]
  J[893] -= dqdci; // dwdot[O]/d[HCCO]
  J[913] -= dqdci; // dwdot[C2H2]/d[HCCO]
  J[918] += dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1078] -= dqdT; // dwdot[C2H2]/dT
  J[1083] += dqdT; // dwdot[HCCO]/dT

  // reaction 21: C2H2 + O <=> C2H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 46000000000000 * exp(-1.41 * tc[0] - (14568.1224750466) * invT);
  dlnkfdT = -1.41 * invT + (14568.1224750466) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[21] += q; // C2H
  wdot[22] -= q; // C2H2
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[87] += dqdci; // dwdot[C2H]/d[O]
  J[88] -= dqdci; // dwdot[C2H2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[153] += dqdci; // dwdot[C2H]/d[OH]
  J[154] -= dqdci; // dwdot[C2H2]/d[OH]
  // d()/d[C2H]
  dqdci = -k_r * sc[4];
  J[695] -= dqdci; // dwdot[O]/d[C2H]
  J[697] += dqdci; // dwdot[OH]/d[C2H]
  J[714] += dqdci; // dwdot[C2H]/d[C2H]
  J[715] -= dqdci; // dwdot[C2H2]/d[C2H]
  // d()/d[C2H2]
  dqdci = +k_f * sc[2];
  J[728] -= dqdci; // dwdot[O]/d[C2H2]
  J[730] += dqdci; // dwdot[OH]/d[C2H2]
  J[747] += dqdci; // dwdot[C2H]/d[C2H2]
  J[748] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1077] += dqdT; // dwdot[C2H]/dT
  J[1078] -= dqdT; // dwdot[C2H2]/dT

  // reaction 22: C2H2 + O <=> CH2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 10.2 * exp(2 * tc[0] - (956.111665028967) * invT);
  dlnkfdT = 2 * invT + (956.111665028967) * invT2;
  // reverse
  phi_r = sc[10] * sc[14];
  Kc = exp(g_RT[2] - g_RT[10] - g_RT[14] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[10] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[10] += q; // CH2
  wdot[14] += q; // CO
  wdot[22] -= q; // C2H2
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[76] += dqdci; // dwdot[CH2]/d[O]
  J[80] += dqdci; // dwdot[CO]/d[O]
  J[88] -= dqdci; // dwdot[C2H2]/d[O]
  // d()/d[CH2]
  dqdci = -k_r * sc[14];
  J[332] -= dqdci; // dwdot[O]/d[CH2]
  J[340] += dqdci; // dwdot[CH2]/d[CH2]
  J[344] += dqdci; // dwdot[CO]/d[CH2]
  J[352] -= dqdci; // dwdot[C2H2]/d[CH2]
  // d()/d[CO]
  dqdci = -k_r * sc[10];
  J[464] -= dqdci; // dwdot[O]/d[CO]
  J[472] += dqdci; // dwdot[CH2]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[484] -= dqdci; // dwdot[C2H2]/d[CO]
  // d()/d[C2H2]
  dqdci = +k_f * sc[2];
  J[728] -= dqdci; // dwdot[O]/d[C2H2]
  J[736] += dqdci; // dwdot[CH2]/d[C2H2]
  J[740] += dqdci; // dwdot[CO]/d[C2H2]
  J[748] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1066] += dqdT; // dwdot[CH2]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1078] -= dqdT; // dwdot[C2H2]/dT

  // reaction 23: C2H3 + O <=> CH2CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[23];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[28];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[23] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[23]) + (h_RT[1] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[23] -= q; // C2H3
  wdot[28] += q; // CH2CO
  // d()/d[H]
  dqdci = -k_r * sc[28];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[35] -= dqdci; // dwdot[O]/d[H]
  J[56] -= dqdci; // dwdot[C2H3]/d[H]
  J[61] += dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[23];
  J[67] += dqdci; // dwdot[H]/d[O]
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[89] -= dqdci; // dwdot[C2H3]/d[O]
  J[94] += dqdci; // dwdot[CH2CO]/d[O]
  // d()/d[C2H3]
  dqdci = +k_f * sc[2];
  J[760] += dqdci; // dwdot[H]/d[C2H3]
  J[761] -= dqdci; // dwdot[O]/d[C2H3]
  J[782] -= dqdci; // dwdot[C2H3]/d[C2H3]
  J[787] += dqdci; // dwdot[CH2CO]/d[C2H3]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[1];
  J[925] += dqdci; // dwdot[H]/d[CH2CO]
  J[926] -= dqdci; // dwdot[O]/d[CH2CO]
  J[947] -= dqdci; // dwdot[C2H3]/d[CH2CO]
  J[952] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1079] -= dqdT; // dwdot[C2H3]/dT
  J[1084] += dqdT; // dwdot[CH2CO]/dT

  // reaction 24: C2H4 + O <=> CH3 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[24];
  k_f = 19.2 * exp(1.83 * tc[0] - (110.707666477038) * invT);
  dlnkfdT = 1.83 * invT + (110.707666477038) * invT2;
  // reverse
  phi_r = sc[12] * sc[16];
  Kc = exp(g_RT[2] - g_RT[12] - g_RT[16] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[24]) + (h_RT[12] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[12] += q; // CH3
  wdot[16] += q; // HCO
  wdot[24] -= q; // C2H4
  // d()/d[O]
  dqdci = +k_f * sc[24];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[78] += dqdci; // dwdot[CH3]/d[O]
  J[82] += dqdci; // dwdot[HCO]/d[O]
  J[90] -= dqdci; // dwdot[C2H4]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc[16];
  J[398] -= dqdci; // dwdot[O]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  J[412] += dqdci; // dwdot[HCO]/d[CH3]
  J[420] -= dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[HCO]
  dqdci = -k_r * sc[12];
  J[530] -= dqdci; // dwdot[O]/d[HCO]
  J[540] += dqdci; // dwdot[CH3]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  J[552] -= dqdci; // dwdot[C2H4]/d[HCO]
  // d()/d[C2H4]
  dqdci = +k_f * sc[2];
  J[794] -= dqdci; // dwdot[O]/d[C2H4]
  J[804] += dqdci; // dwdot[CH3]/d[C2H4]
  J[808] += dqdci; // dwdot[HCO]/d[C2H4]
  J[816] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT
  J[1080] -= dqdT; // dwdot[C2H4]/dT

  // reaction 25: C2H5 + O <=> CH2O + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[25];
  k_f = 132000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[12] * sc[17];
  Kc = exp(g_RT[2] - g_RT[12] - g_RT[17] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[25]) + (h_RT[12] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[12] += q; // CH3
  wdot[17] += q; // CH2O
  wdot[25] -= q; // C2H5
  // d()/d[O]
  dqdci = +k_f * sc[25];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[78] += dqdci; // dwdot[CH3]/d[O]
  J[83] += dqdci; // dwdot[CH2O]/d[O]
  J[91] -= dqdci; // dwdot[C2H5]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc[17];
  J[398] -= dqdci; // dwdot[O]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  J[413] += dqdci; // dwdot[CH2O]/d[CH3]
  J[421] -= dqdci; // dwdot[C2H5]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[12];
  J[563] -= dqdci; // dwdot[O]/d[CH2O]
  J[573] += dqdci; // dwdot[CH3]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[586] -= dqdci; // dwdot[C2H5]/d[CH2O]
  // d()/d[C2H5]
  dqdci = +k_f * sc[2];
  J[827] -= dqdci; // dwdot[O]/d[C2H5]
  J[837] += dqdci; // dwdot[CH3]/d[C2H5]
  J[842] += dqdci; // dwdot[CH2O]/d[C2H5]
  J[850] -= dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT
  J[1081] -= dqdT; // dwdot[C2H5]/dT

  // reaction 26: C2H6 + O <=> C2H5 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[26];
  k_f = 89.8 * exp(1.92 * tc[0] - (2863.30282842885) * invT);
  dlnkfdT = 1.92 * invT + (2863.30282842885) * invT2;
  // reverse
  phi_r = sc[4] * sc[25];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[26]) + (h_RT[4] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  // d()/d[O]
  dqdci = +k_f * sc[26];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[91] += dqdci; // dwdot[C2H5]/d[O]
  J[92] -= dqdci; // dwdot[C2H6]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[25];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[157] += dqdci; // dwdot[C2H5]/d[OH]
  J[158] -= dqdci; // dwdot[C2H6]/d[OH]
  // d()/d[C2H5]
  dqdci = -k_r * sc[4];
  J[827] -= dqdci; // dwdot[O]/d[C2H5]
  J[829] += dqdci; // dwdot[OH]/d[C2H5]
  J[850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[2];
  J[860] -= dqdci; // dwdot[O]/d[C2H6]
  J[862] += dqdci; // dwdot[OH]/d[C2H6]
  J[883] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[884] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1081] += dqdT; // dwdot[C2H5]/dT
  J[1082] -= dqdT; // dwdot[C2H6]/dT

  // reaction 27: HCCO + O <=> 2 CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[27];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * (sc[14] * sc[14]);
  Kc = refC * exp(-g_RT[1] + g_RT[2] - 2.000000 * g_RT[14] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[2] + h_RT[27]) + (h_RT[1] + 2.000000 * h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;      // H
  wdot[2] -= q;      // O
  wdot[14] += 2 * q; // CO
  wdot[27] -= q;     // HCCO
  // d()/d[H]
  dqdci = -k_r * sc[14] * sc[14];
  J[34] += dqdci;     // dwdot[H]/d[H]
  J[35] -= dqdci;     // dwdot[O]/d[H]
  J[47] += 2 * dqdci; // dwdot[CO]/d[H]
  J[60] -= dqdci;     // dwdot[HCCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[27];
  J[67] += dqdci;     // dwdot[H]/d[O]
  J[68] -= dqdci;     // dwdot[O]/d[O]
  J[80] += 2 * dqdci; // dwdot[CO]/d[O]
  J[93] -= dqdci;     // dwdot[HCCO]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * 2.000000 * sc[14];
  J[463] += dqdci;     // dwdot[H]/d[CO]
  J[464] -= dqdci;     // dwdot[O]/d[CO]
  J[476] += 2 * dqdci; // dwdot[CO]/d[CO]
  J[489] -= dqdci;     // dwdot[HCCO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[2];
  J[892] += dqdci;     // dwdot[H]/d[HCCO]
  J[893] -= dqdci;     // dwdot[O]/d[HCCO]
  J[905] += 2 * dqdci; // dwdot[CO]/d[HCCO]
  J[918] -= dqdci;     // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1057] += dqdT;     // dwdot[H]/dT
  J[1058] -= dqdT;     // dwdot[O]/dT
  J[1070] += 2 * dqdT; // dwdot[CO]/dT
  J[1083] -= dqdT;     // dwdot[HCCO]/dT

  // reaction 28: CH2CO + O <=> HCCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[28];
  k_f = 10000000 * exp(-(4025.73332643776) * invT);
  dlnkfdT = (4025.73332643776) * invT2;
  // reverse
  phi_r = sc[4] * sc[27];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[27] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[28]) + (h_RT[4] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[27] += q; // HCCO
  wdot[28] -= q; // CH2CO
  // d()/d[O]
  dqdci = +k_f * sc[28];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  J[93] += dqdci; // dwdot[HCCO]/d[O]
  J[94] -= dqdci; // dwdot[CH2CO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[27];
  J[134] -= dqdci; // dwdot[O]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[159] += dqdci; // dwdot[HCCO]/d[OH]
  J[160] -= dqdci; // dwdot[CH2CO]/d[OH]
  // d()/d[HCCO]
  dqdci = -k_r * sc[4];
  J[893] -= dqdci; // dwdot[O]/d[HCCO]
  J[895] += dqdci; // dwdot[OH]/d[HCCO]
  J[918] += dqdci; // dwdot[HCCO]/d[HCCO]
  J[919] -= dqdci; // dwdot[CH2CO]/d[HCCO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[2];
  J[926] -= dqdci; // dwdot[O]/d[CH2CO]
  J[928] += dqdci; // dwdot[OH]/d[CH2CO]
  J[951] += dqdci; // dwdot[HCCO]/d[CH2CO]
  J[952] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1083] += dqdT; // dwdot[HCCO]/dT
  J[1084] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 29: CH2CO + O <=> CH2 + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[28];
  k_f = 1750000 * exp(-(679.342498836372) * invT);
  dlnkfdT = (679.342498836372) * invT2;
  // reverse
  phi_r = sc[10] * sc[15];
  Kc = exp(g_RT[2] - g_RT[10] - g_RT[15] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[28]) + (h_RT[10] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[10] += q; // CH2
  wdot[15] += q; // CO2
  wdot[28] -= q; // CH2CO
  // d()/d[O]
  dqdci = +k_f * sc[28];
  J[68] -= dqdci; // dwdot[O]/d[O]
  J[76] += dqdci; // dwdot[CH2]/d[O]
  J[81] += dqdci; // dwdot[CO2]/d[O]
  J[94] -= dqdci; // dwdot[CH2CO]/d[O]
  // d()/d[CH2]
  dqdci = -k_r * sc[15];
  J[332] -= dqdci; // dwdot[O]/d[CH2]
  J[340] += dqdci; // dwdot[CH2]/d[CH2]
  J[345] += dqdci; // dwdot[CO2]/d[CH2]
  J[358] -= dqdci; // dwdot[CH2CO]/d[CH2]
  // d()/d[CO2]
  dqdci = -k_r * sc[10];
  J[497] -= dqdci; // dwdot[O]/d[CO2]
  J[505] += dqdci; // dwdot[CH2]/d[CO2]
  J[510] += dqdci; // dwdot[CO2]/d[CO2]
  J[523] -= dqdci; // dwdot[CH2CO]/d[CO2]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[2];
  J[926] -= dqdci; // dwdot[O]/d[CH2CO]
  J[934] += dqdci; // dwdot[CH2]/d[CH2CO]
  J[939] += dqdci; // dwdot[CO2]/d[CH2CO]
  J[952] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1058] -= dqdT; // dwdot[O]/dT
  J[1066] += dqdT; // dwdot[CH2]/dT
  J[1071] += dqdT; // dwdot[CO2]/dT
  J[1084] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 30: CO + O2 <=> CO2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[14];
  k_f = 2500000 * exp(-(24053.7566254656) * invT);
  dlnkfdT = (24053.7566254656) * invT2;
  // reverse
  phi_r = sc[2] * sc[15];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[14]) + (h_RT[2] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[14] -= q; // CO
  wdot[15] += q; // CO2
  // d()/d[O]
  dqdci = -k_r * sc[15];
  J[68] += dqdci; // dwdot[O]/d[O]
  J[69] -= dqdci; // dwdot[O2]/d[O]
  J[80] -= dqdci; // dwdot[CO]/d[O]
  J[81] += dqdci; // dwdot[CO2]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[14];
  J[101] += dqdci; // dwdot[O]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[113] -= dqdci; // dwdot[CO]/d[O2]
  J[114] += dqdci; // dwdot[CO2]/d[O2]
  // d()/d[CO]
  dqdci = +k_f * sc[3];
  J[464] += dqdci; // dwdot[O]/d[CO]
  J[465] -= dqdci; // dwdot[O2]/d[CO]
  J[476] -= dqdci; // dwdot[CO]/d[CO]
  J[477] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[2];
  J[497] += dqdci; // dwdot[O]/d[CO2]
  J[498] -= dqdci; // dwdot[O2]/d[CO2]
  J[509] -= dqdci; // dwdot[CO]/d[CO2]
  J[510] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1058] += dqdT; // dwdot[O]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1070] -= dqdT; // dwdot[CO]/dT
  J[1071] += dqdT; // dwdot[CO2]/dT

  // reaction 31: CH2O + O2 <=> HCO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[17];
  k_f = 100000000 * exp(-(20128.6666321888) * invT);
  dlnkfdT = (20128.6666321888) * invT2;
  // reverse
  phi_r = sc[6] * sc[16];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[17]) + (h_RT[6] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[O2]
  dqdci = +k_f * sc[17];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[HO2]/d[O2]
  J[115] += dqdci; // dwdot[HCO]/d[O2]
  J[116] -= dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[16];
  J[201] -= dqdci; // dwdot[O2]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  J[214] += dqdci; // dwdot[HCO]/d[HO2]
  J[215] -= dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[HCO]
  dqdci = -k_r * sc[6];
  J[531] -= dqdci; // dwdot[O2]/d[HCO]
  J[534] += dqdci; // dwdot[HO2]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  J[545] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[3];
  J[564] -= dqdci; // dwdot[O2]/d[CH2O]
  J[567] += dqdci; // dwdot[HO2]/d[CH2O]
  J[577] += dqdci; // dwdot[HCO]/d[CH2O]
  J[578] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT
  J[1073] -= dqdT; // dwdot[CH2O]/dT

  // reaction 37: H + O2 <=> O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[3];
  k_f = 83000000 * exp(-(7252.86180424342) * invT);
  dlnkfdT = (7252.86180424342) * invT2;
  // reverse
  phi_r = sc[2] * sc[4];
  Kc = exp(g_RT[1] - g_RT[2] + g_RT[3] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[3]) + (h_RT[2] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] += q; // O
  wdot[3] -= q; // O2
  wdot[4] += q; // OH
  // d()/d[H]
  dqdci = +k_f * sc[3];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[O]/d[H]
  J[36] -= dqdci; // dwdot[O2]/d[H]
  J[37] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[4];
  J[67] -= dqdci; // dwdot[H]/d[O]
  J[68] += dqdci; // dwdot[O]/d[O]
  J[69] -= dqdci; // dwdot[O2]/d[O]
  J[70] += dqdci; // dwdot[OH]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[1];
  J[100] -= dqdci; // dwdot[H]/d[O2]
  J[101] += dqdci; // dwdot[O]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[103] += dqdci; // dwdot[OH]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[2];
  J[133] -= dqdci; // dwdot[H]/d[OH]
  J[134] += dqdci; // dwdot[O]/d[OH]
  J[135] -= dqdci; // dwdot[O2]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1058] += dqdT; // dwdot[O]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1060] += dqdT; // dwdot[OH]/dT

  // reaction 43: H + HO2 <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 3970000 * exp(-(337.658382754967) * invT);
  dlnkfdT = (337.658382754967) * invT2;
  // reverse
  phi_r = sc[2] * sc[5];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[5] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (h_RT[2] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] += q; // O
  wdot[5] += q; // H2O
  wdot[6] -= q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[35] += dqdci; // dwdot[O]/d[H]
  J[38] += dqdci; // dwdot[H2O]/d[H]
  J[39] -= dqdci; // dwdot[HO2]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[5];
  J[67] -= dqdci; // dwdot[H]/d[O]
  J[68] += dqdci; // dwdot[O]/d[O]
  J[71] += dqdci; // dwdot[H2O]/d[O]
  J[72] -= dqdci; // dwdot[HO2]/d[O]
  // d()/d[H2O]
  dqdci = -k_r * sc[2];
  J[166] -= dqdci; // dwdot[H]/d[H2O]
  J[167] += dqdci; // dwdot[O]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[199] -= dqdci; // dwdot[H]/d[HO2]
  J[200] += dqdci; // dwdot[O]/d[HO2]
  J[203] += dqdci; // dwdot[H2O]/d[HO2]
  J[204] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1058] += dqdT; // dwdot[O]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[HO2]/dT

  // reaction 44: H + HO2 <=> H2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 28000000 * exp(-(537.435399079441) * invT);
  dlnkfdT = (537.435399079441) * invT2;
  // reverse
  phi_r = sc[0] * sc[3];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[3] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (h_RT[0] + h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // H2
  wdot[1] -= q; // H
  wdot[3] += q; // O2
  wdot[6] -= q; // HO2
  // d()/d[H2]
  dqdci = -k_r * sc[3];
  J[0] += dqdci; // dwdot[H2]/d[H2]
  J[1] -= dqdci; // dwdot[H]/d[H2]
  J[3] += dqdci; // dwdot[O2]/d[H2]
  J[6] -= dqdci; // dwdot[HO2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[36] += dqdci; // dwdot[O2]/d[H]
  J[39] -= dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = -k_r * sc[0];
  J[99] += dqdci;  // dwdot[H2]/d[O2]
  J[100] -= dqdci; // dwdot[H]/d[O2]
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[105] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[198] += dqdci; // dwdot[H2]/d[HO2]
  J[199] -= dqdci; // dwdot[H]/d[HO2]
  J[201] += dqdci; // dwdot[O2]/d[HO2]
  J[204] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1062] -= dqdT; // dwdot[HO2]/dT

  // reaction 45: H + HO2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 134000000 * exp(-(319.542582785997) * invT);
  dlnkfdT = (319.542582785997) * invT2;
  // reverse
  phi_r = (sc[4] * sc[4]);
  Kc = exp(g_RT[1] - 2.000000 * g_RT[4] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (2.000000 * h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;     // H
  wdot[4] += 2 * q; // OH
  wdot[6] -= q;     // HO2
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[34] -= dqdci;     // dwdot[H]/d[H]
  J[37] += 2 * dqdci; // dwdot[OH]/d[H]
  J[39] -= dqdci;     // dwdot[HO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[4];
  J[133] -= dqdci;     // dwdot[H]/d[OH]
  J[136] += 2 * dqdci; // dwdot[OH]/d[OH]
  J[138] -= dqdci;     // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[199] -= dqdci;     // dwdot[H]/d[HO2]
  J[202] += 2 * dqdci; // dwdot[OH]/d[HO2]
  J[204] -= dqdci;     // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1057] -= dqdT;     // dwdot[H]/dT
  J[1060] += 2 * dqdT; // dwdot[OH]/dT
  J[1062] -= dqdT;     // dwdot[HO2]/dT

  // reaction 46: H + H2O2 <=> H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[7];
  k_f = 12.1 * exp(2 * tc[0] - (2616.72666218454) * invT);
  dlnkfdT = 2 * invT + (2616.72666218454) * invT2;
  // reverse
  phi_r = sc[0] * sc[6];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[0] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // H2
  wdot[1] -= q; // H
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[H2]
  dqdci = -k_r * sc[6];
  J[0] += dqdci; // dwdot[H2]/d[H2]
  J[1] -= dqdci; // dwdot[H]/d[H2]
  J[6] += dqdci; // dwdot[HO2]/d[H2]
  J[7] -= dqdci; // dwdot[H2O2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[39] += dqdci; // dwdot[HO2]/d[H]
  J[40] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[HO2]
  dqdci = -k_r * sc[0];
  J[198] += dqdci; // dwdot[H2]/d[HO2]
  J[199] -= dqdci; // dwdot[H]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  J[205] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[1];
  J[231] += dqdci; // dwdot[H2]/d[H2O2]
  J[232] -= dqdci; // dwdot[H]/d[H2O2]
  J[237] += dqdci; // dwdot[HO2]/d[H2O2]
  J[238] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT
  J[1063] -= dqdT; // dwdot[H2O2]/dT

  // reaction 47: H + H2O2 <=> H2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[7];
  k_f = 10000000 * exp(-(1811.57999689699) * invT);
  dlnkfdT = (1811.57999689699) * invT2;
  // reverse
  phi_r = sc[4] * sc[5];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[5] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[4] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[4] += q; // OH
  wdot[5] += q; // H2O
  wdot[7] -= q; // H2O2
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[37] += dqdci; // dwdot[OH]/d[H]
  J[38] += dqdci; // dwdot[H2O]/d[H]
  J[40] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[5];
  J[133] -= dqdci; // dwdot[H]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[139] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[4];
  J[166] -= dqdci; // dwdot[H]/d[H2O]
  J[169] += dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[172] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[1];
  J[232] -= dqdci; // dwdot[H]/d[H2O2]
  J[235] += dqdci; // dwdot[OH]/d[H2O2]
  J[236] += dqdci; // dwdot[H2O]/d[H2O2]
  J[238] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1063] -= dqdT; // dwdot[H2O2]/dT

  // reaction 48: CH + H <=> C + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[9];
  k_f = 110000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[8];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[8] + g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[9]) + (h_RT[0] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // H2
  wdot[1] -= q; // H
  wdot[8] += q; // C
  wdot[9] -= q; // CH
  // d()/d[H2]
  dqdci = -k_r * sc[8];
  J[0] += dqdci; // dwdot[H2]/d[H2]
  J[1] -= dqdci; // dwdot[H]/d[H2]
  J[8] += dqdci; // dwdot[C]/d[H2]
  J[9] -= dqdci; // dwdot[CH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[9];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[C]/d[H]
  J[42] -= dqdci; // dwdot[CH]/d[H]
  // d()/d[C]
  dqdci = -k_r * sc[0];
  J[264] += dqdci; // dwdot[H2]/d[C]
  J[265] -= dqdci; // dwdot[H]/d[C]
  J[272] += dqdci; // dwdot[C]/d[C]
  J[273] -= dqdci; // dwdot[CH]/d[C]
  // d()/d[CH]
  dqdci = +k_f * sc[1];
  J[297] += dqdci; // dwdot[H2]/d[CH]
  J[298] -= dqdci; // dwdot[H]/d[CH]
  J[305] += dqdci; // dwdot[C]/d[CH]
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1064] += dqdT; // dwdot[C]/dT
  J[1065] -= dqdT; // dwdot[CH]/dT

  // reaction 50: CH2(S) + H <=> CH + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[9];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[9] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[11]) + (h_RT[0] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[9] += q;  // CH
  wdot[11] -= q; // CH2(S)
  // d()/d[H2]
  dqdci = -k_r * sc[9];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[9] += dqdci;  // dwdot[CH]/d[H2]
  J[11] -= dqdci; // dwdot[CH2(S)]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[11];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[42] += dqdci; // dwdot[CH]/d[H]
  J[44] -= dqdci; // dwdot[CH2(S)]/d[H]
  // d()/d[CH]
  dqdci = -k_r * sc[0];
  J[297] += dqdci; // dwdot[H2]/d[CH]
  J[298] -= dqdci; // dwdot[H]/d[CH]
  J[306] += dqdci; // dwdot[CH]/d[CH]
  J[308] -= dqdci; // dwdot[CH2(S)]/d[CH]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[1];
  J[363] += dqdci; // dwdot[H2]/d[CH2(S)]
  J[364] -= dqdci; // dwdot[H]/d[CH2(S)]
  J[372] += dqdci; // dwdot[CH]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1065] += dqdT; // dwdot[CH]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 52: CH4 + H <=> CH3 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[13];
  k_f = 660 * exp(1.62 * tc[0] - (5454.86865732316) * invT);
  dlnkfdT = 1.62 * invT + (5454.86865732316) * invT2;
  // reverse
  phi_r = sc[0] * sc[12];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[13]) + (h_RT[0] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[12] += q; // CH3
  wdot[13] -= q; // CH4
  // d()/d[H2]
  dqdci = -k_r * sc[12];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[12] += dqdci; // dwdot[CH3]/d[H2]
  J[13] -= dqdci; // dwdot[CH4]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[13];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  J[46] -= dqdci; // dwdot[CH4]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[0];
  J[396] += dqdci; // dwdot[H2]/d[CH3]
  J[397] -= dqdci; // dwdot[H]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  J[409] -= dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[1];
  J[429] += dqdci; // dwdot[H2]/d[CH4]
  J[430] -= dqdci; // dwdot[H]/d[CH4]
  J[441] += dqdci; // dwdot[CH3]/d[CH4]
  J[442] -= dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT
  J[1069] -= dqdT; // dwdot[CH4]/dT

  // reaction 54: H + HCO <=> CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[16];
  k_f = 73400000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[14];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[16]) + (h_RT[0] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[H2]
  dqdci = -k_r * sc[14];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[14] += dqdci; // dwdot[CO]/d[H2]
  J[16] -= dqdci; // dwdot[HCO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[16];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[47] += dqdci; // dwdot[CO]/d[H]
  J[49] -= dqdci; // dwdot[HCO]/d[H]
  // d()/d[CO]
  dqdci = -k_r * sc[0];
  J[462] += dqdci; // dwdot[H2]/d[CO]
  J[463] -= dqdci; // dwdot[H]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[478] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[1];
  J[528] += dqdci; // dwdot[H2]/d[HCO]
  J[529] -= dqdci; // dwdot[H]/d[HCO]
  J[542] += dqdci; // dwdot[CO]/d[HCO]
  J[544] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1072] -= dqdT; // dwdot[HCO]/dT

  // reaction 57: CH2O + H <=> H2 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 23000 * exp(1.05 * tc[0] - (1648.03458051046) * invT);
  dlnkfdT = 1.05 * invT + (1648.03458051046) * invT2;
  // reverse
  phi_r = sc[0] * sc[16];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[0] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[H2]
  dqdci = -k_r * sc[16];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[16] += dqdci; // dwdot[HCO]/d[H2]
  J[17] -= dqdci; // dwdot[CH2O]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[17];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[49] += dqdci; // dwdot[HCO]/d[H]
  J[50] -= dqdci; // dwdot[CH2O]/d[H]
  // d()/d[HCO]
  dqdci = -k_r * sc[0];
  J[528] += dqdci; // dwdot[H2]/d[HCO]
  J[529] -= dqdci; // dwdot[H]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  J[545] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[1];
  J[561] += dqdci; // dwdot[H2]/d[CH2O]
  J[562] -= dqdci; // dwdot[H]/d[CH2O]
  J[577] += dqdci; // dwdot[HCO]/d[CH2O]
  J[578] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT
  J[1073] -= dqdT; // dwdot[CH2O]/dT

  // reaction 59: CH2OH + H <=> CH2O + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[18];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[17];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[18]) + (h_RT[0] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[17] += q; // CH2O
  wdot[18] -= q; // CH2OH
  // d()/d[H2]
  dqdci = -k_r * sc[17];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[17] += dqdci; // dwdot[CH2O]/d[H2]
  J[18] -= dqdci; // dwdot[CH2OH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[18];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[50] += dqdci; // dwdot[CH2O]/d[H]
  J[51] -= dqdci; // dwdot[CH2OH]/d[H]
  // d()/d[CH2O]
  dqdci = -k_r * sc[0];
  J[561] += dqdci; // dwdot[H2]/d[CH2O]
  J[562] -= dqdci; // dwdot[H]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[579] -= dqdci; // dwdot[CH2OH]/d[CH2O]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[1];
  J[594] += dqdci; // dwdot[H2]/d[CH2OH]
  J[595] -= dqdci; // dwdot[H]/d[CH2OH]
  J[611] += dqdci; // dwdot[CH2O]/d[CH2OH]
  J[612] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT
  J[1074] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 60: CH2OH + H <=> CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[18];
  k_f = 12000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[12];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[12] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[18]) + (h_RT[4] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[12] += q; // CH3
  wdot[18] -= q; // CH2OH
  // d()/d[H]
  dqdci = +k_f * sc[18];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[37] += dqdci; // dwdot[OH]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  J[51] -= dqdci; // dwdot[CH2OH]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[133] -= dqdci; // dwdot[H]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[144] += dqdci; // dwdot[CH3]/d[OH]
  J[150] -= dqdci; // dwdot[CH2OH]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[4];
  J[397] -= dqdci; // dwdot[H]/d[CH3]
  J[400] += dqdci; // dwdot[OH]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  J[414] -= dqdci; // dwdot[CH2OH]/d[CH3]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[1];
  J[595] -= dqdci; // dwdot[H]/d[CH2OH]
  J[598] += dqdci; // dwdot[OH]/d[CH2OH]
  J[606] += dqdci; // dwdot[CH3]/d[CH2OH]
  J[612] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT
  J[1074] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 61: CH2OH + H <=> CH2(S) + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[18];
  k_f = 6000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[11];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[11] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[18]) + (h_RT[5] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2O
  wdot[11] += q; // CH2(S)
  wdot[18] -= q; // CH2OH
  // d()/d[H]
  dqdci = +k_f * sc[18];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[38] += dqdci; // dwdot[H2O]/d[H]
  J[44] += dqdci; // dwdot[CH2(S)]/d[H]
  J[51] -= dqdci; // dwdot[CH2OH]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[166] -= dqdci; // dwdot[H]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[176] += dqdci; // dwdot[CH2(S)]/d[H2O]
  J[183] -= dqdci; // dwdot[CH2OH]/d[H2O]
  // d()/d[CH2(S)]
  dqdci = -k_r * sc[5];
  J[364] -= dqdci; // dwdot[H]/d[CH2(S)]
  J[368] += dqdci; // dwdot[H2O]/d[CH2(S)]
  J[374] += dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[381] -= dqdci; // dwdot[CH2OH]/d[CH2(S)]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[1];
  J[595] -= dqdci; // dwdot[H]/d[CH2OH]
  J[599] += dqdci; // dwdot[H2O]/d[CH2OH]
  J[605] += dqdci; // dwdot[CH2(S)]/d[CH2OH]
  J[612] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1067] += dqdT; // dwdot[CH2(S)]/dT
  J[1074] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 63: CH3O + H <=> CH2OH + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 3.4 * exp(1.6 * tc[0]);
  dlnkfdT = 1.6 * invT;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(g_RT[1] - g_RT[1] - g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // CH2OH
  wdot[19] -= q; // CH3O
  // d()/d[H]
  dqdci = +k_f * sc[19] - k_r * sc[18];
  J[51] += dqdci; // dwdot[CH2OH]/d[H]
  J[52] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[1];
  J[612] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[613] -= dqdci; // dwdot[CH3O]/d[CH2OH]
  // d()/d[CH3O]
  dqdci = +k_f * sc[1];
  J[645] += dqdci; // dwdot[CH2OH]/d[CH3O]
  J[646] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1074] += dqdT; // dwdot[CH2OH]/dT
  J[1075] -= dqdT; // dwdot[CH3O]/dT

  // reaction 64: CH3O + H <=> CH2O + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[17];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[17] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[0] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[17] += q; // CH2O
  wdot[19] -= q; // CH3O
  // d()/d[H2]
  dqdci = -k_r * sc[17];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[17] += dqdci; // dwdot[CH2O]/d[H2]
  J[19] -= dqdci; // dwdot[CH3O]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[50] += dqdci; // dwdot[CH2O]/d[H]
  J[52] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[CH2O]
  dqdci = -k_r * sc[0];
  J[561] += dqdci; // dwdot[H2]/d[CH2O]
  J[562] -= dqdci; // dwdot[H]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[580] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[1];
  J[627] += dqdci; // dwdot[H2]/d[CH3O]
  J[628] -= dqdci; // dwdot[H]/d[CH3O]
  J[644] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[646] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT
  J[1075] -= dqdT; // dwdot[CH3O]/dT

  // reaction 65: CH3O + H <=> CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 32000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[12];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[12] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[4] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[12] += q; // CH3
  wdot[19] -= q; // CH3O
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[37] += dqdci; // dwdot[OH]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  J[52] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[133] -= dqdci; // dwdot[H]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[144] += dqdci; // dwdot[CH3]/d[OH]
  J[151] -= dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[4];
  J[397] -= dqdci; // dwdot[H]/d[CH3]
  J[400] += dqdci; // dwdot[OH]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  J[415] -= dqdci; // dwdot[CH3O]/d[CH3]
  // d()/d[CH3O]
  dqdci = +k_f * sc[1];
  J[628] -= dqdci; // dwdot[H]/d[CH3O]
  J[631] += dqdci; // dwdot[OH]/d[CH3O]
  J[639] += dqdci; // dwdot[CH3]/d[CH3O]
  J[646] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT
  J[1075] -= dqdT; // dwdot[CH3O]/dT

  // reaction 66: CH3O + H <=> CH2(S) + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 16000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[11];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[11] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[5] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2O
  wdot[11] += q; // CH2(S)
  wdot[19] -= q; // CH3O
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[38] += dqdci; // dwdot[H2O]/d[H]
  J[44] += dqdci; // dwdot[CH2(S)]/d[H]
  J[52] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[166] -= dqdci; // dwdot[H]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[176] += dqdci; // dwdot[CH2(S)]/d[H2O]
  J[184] -= dqdci; // dwdot[CH3O]/d[H2O]
  // d()/d[CH2(S)]
  dqdci = -k_r * sc[5];
  J[364] -= dqdci; // dwdot[H]/d[CH2(S)]
  J[368] += dqdci; // dwdot[H2O]/d[CH2(S)]
  J[374] += dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[382] -= dqdci; // dwdot[CH3O]/d[CH2(S)]
  // d()/d[CH3O]
  dqdci = +k_f * sc[1];
  J[628] -= dqdci; // dwdot[H]/d[CH3O]
  J[632] += dqdci; // dwdot[H2O]/d[CH3O]
  J[638] += dqdci; // dwdot[CH2(S)]/d[CH3O]
  J[646] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1067] += dqdT; // dwdot[CH2(S)]/dT
  J[1075] -= dqdT; // dwdot[CH3O]/dT

  // reaction 67: CH3OH + H <=> CH2OH + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[20];
  k_f = 17 * exp(2.1 * tc[0] - (2450.66516246898) * invT);
  dlnkfdT = 2.1 * invT + (2450.66516246898) * invT2;
  // reverse
  phi_r = sc[0] * sc[18];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[20]) + (h_RT[0] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  // d()/d[H2]
  dqdci = -k_r * sc[18];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[18] += dqdci; // dwdot[CH2OH]/d[H2]
  J[20] -= dqdci; // dwdot[CH3OH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[51] += dqdci; // dwdot[CH2OH]/d[H]
  J[53] -= dqdci; // dwdot[CH3OH]/d[H]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[0];
  J[594] += dqdci; // dwdot[H2]/d[CH2OH]
  J[595] -= dqdci; // dwdot[H]/d[CH2OH]
  J[612] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[614] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[1];
  J[660] += dqdci; // dwdot[H2]/d[CH3OH]
  J[661] -= dqdci; // dwdot[H]/d[CH3OH]
  J[678] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[680] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1074] += dqdT; // dwdot[CH2OH]/dT
  J[1076] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 68: CH3OH + H <=> CH3O + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[20];
  k_f = 4.2 * exp(2.1 * tc[0] - (2450.66516246898) * invT);
  dlnkfdT = 2.1 * invT + (2450.66516246898) * invT2;
  // reverse
  phi_r = sc[0] * sc[19];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[20]) + (h_RT[0] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  // d()/d[H2]
  dqdci = -k_r * sc[19];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[19] += dqdci; // dwdot[CH3O]/d[H2]
  J[20] -= dqdci; // dwdot[CH3OH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[52] += dqdci; // dwdot[CH3O]/d[H]
  J[53] -= dqdci; // dwdot[CH3OH]/d[H]
  // d()/d[CH3O]
  dqdci = -k_r * sc[0];
  J[627] += dqdci; // dwdot[H2]/d[CH3O]
  J[628] -= dqdci; // dwdot[H]/d[CH3O]
  J[646] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[647] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[1];
  J[660] += dqdci; // dwdot[H2]/d[CH3OH]
  J[661] -= dqdci; // dwdot[H]/d[CH3OH]
  J[679] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[680] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1075] += dqdT; // dwdot[CH3O]/dT
  J[1076] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 72: C2H3 + H <=> C2H2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[23];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[22];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[22] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[23]) + (h_RT[0] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[22] += q; // C2H2
  wdot[23] -= q; // C2H3
  // d()/d[H2]
  dqdci = -k_r * sc[22];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[22] += dqdci; // dwdot[C2H2]/d[H2]
  J[23] -= dqdci; // dwdot[C2H3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[23];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[C2H2]/d[H]
  J[56] -= dqdci; // dwdot[C2H3]/d[H]
  // d()/d[C2H2]
  dqdci = -k_r * sc[0];
  J[726] += dqdci; // dwdot[H2]/d[C2H2]
  J[727] -= dqdci; // dwdot[H]/d[C2H2]
  J[748] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[749] -= dqdci; // dwdot[C2H3]/d[C2H2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[1];
  J[759] += dqdci; // dwdot[H2]/d[C2H3]
  J[760] -= dqdci; // dwdot[H]/d[C2H3]
  J[781] += dqdci; // dwdot[C2H2]/d[C2H3]
  J[782] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1078] += dqdT; // dwdot[C2H2]/dT
  J[1079] -= dqdT; // dwdot[C2H3]/dT

  // reaction 74: C2H4 + H <=> C2H3 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[24];
  k_f = 1.325 * exp(2.53 * tc[0] - (6159.37198944977) * invT);
  dlnkfdT = 2.53 * invT + (6159.37198944977) * invT2;
  // reverse
  phi_r = sc[0] * sc[23];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[24]) + (h_RT[0] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[23] += q; // C2H3
  wdot[24] -= q; // C2H4
  // d()/d[H2]
  dqdci = -k_r * sc[23];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[23] += dqdci; // dwdot[C2H3]/d[H2]
  J[24] -= dqdci; // dwdot[C2H4]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[24];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[56] += dqdci; // dwdot[C2H3]/d[H]
  J[57] -= dqdci; // dwdot[C2H4]/d[H]
  // d()/d[C2H3]
  dqdci = -k_r * sc[0];
  J[759] += dqdci; // dwdot[H2]/d[C2H3]
  J[760] -= dqdci; // dwdot[H]/d[C2H3]
  J[782] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[783] -= dqdci; // dwdot[C2H4]/d[C2H3]
  // d()/d[C2H4]
  dqdci = +k_f * sc[1];
  J[792] += dqdci; // dwdot[H2]/d[C2H4]
  J[793] -= dqdci; // dwdot[H]/d[C2H4]
  J[815] += dqdci; // dwdot[C2H3]/d[C2H4]
  J[816] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1079] += dqdT; // dwdot[C2H3]/dT
  J[1080] -= dqdT; // dwdot[C2H4]/dT

  // reaction 76: C2H5 + H <=> C2H4 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[25];
  k_f = 2000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[24];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[24] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[25]) + (h_RT[0] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[24] += q; // C2H4
  wdot[25] -= q; // C2H5
  // d()/d[H2]
  dqdci = -k_r * sc[24];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[24] += dqdci; // dwdot[C2H4]/d[H2]
  J[25] -= dqdci; // dwdot[C2H5]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[25];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[57] += dqdci; // dwdot[C2H4]/d[H]
  J[58] -= dqdci; // dwdot[C2H5]/d[H]
  // d()/d[C2H4]
  dqdci = -k_r * sc[0];
  J[792] += dqdci; // dwdot[H2]/d[C2H4]
  J[793] -= dqdci; // dwdot[H]/d[C2H4]
  J[816] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[817] -= dqdci; // dwdot[C2H5]/d[C2H4]
  // d()/d[C2H5]
  dqdci = +k_f * sc[1];
  J[825] += dqdci; // dwdot[H2]/d[C2H5]
  J[826] -= dqdci; // dwdot[H]/d[C2H5]
  J[849] += dqdci; // dwdot[C2H4]/d[C2H5]
  J[850] -= dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1080] += dqdT; // dwdot[C2H4]/dT
  J[1081] -= dqdT; // dwdot[C2H5]/dT

  // reaction 77: C2H6 + H <=> C2H5 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[26];
  k_f = 115 * exp(1.9 * tc[0] - (3789.22149350954) * invT);
  dlnkfdT = 1.9 * invT + (3789.22149350954) * invT2;
  // reverse
  phi_r = sc[0] * sc[25];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[26]) + (h_RT[0] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  // d()/d[H2]
  dqdci = -k_r * sc[25];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[25] += dqdci; // dwdot[C2H5]/d[H2]
  J[26] -= dqdci; // dwdot[C2H6]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[26];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[58] += dqdci; // dwdot[C2H5]/d[H]
  J[59] -= dqdci; // dwdot[C2H6]/d[H]
  // d()/d[C2H5]
  dqdci = -k_r * sc[0];
  J[825] += dqdci; // dwdot[H2]/d[C2H5]
  J[826] -= dqdci; // dwdot[H]/d[C2H5]
  J[850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[1];
  J[858] += dqdci; // dwdot[H2]/d[C2H6]
  J[859] -= dqdci; // dwdot[H]/d[C2H6]
  J[883] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[884] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1081] += dqdT; // dwdot[C2H5]/dT
  J[1082] -= dqdT; // dwdot[C2H6]/dT

  // reaction 78: H + HCCO <=> CH2(S) + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[27];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[11] * sc[14];
  Kc = exp(g_RT[1] - g_RT[11] - g_RT[14] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[27]) + (h_RT[11] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[11] += q; // CH2(S)
  wdot[14] += q; // CO
  wdot[27] -= q; // HCCO
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[44] += dqdci; // dwdot[CH2(S)]/d[H]
  J[47] += dqdci; // dwdot[CO]/d[H]
  J[60] -= dqdci; // dwdot[HCCO]/d[H]
  // d()/d[CH2(S)]
  dqdci = -k_r * sc[14];
  J[364] -= dqdci; // dwdot[H]/d[CH2(S)]
  J[374] += dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[377] += dqdci; // dwdot[CO]/d[CH2(S)]
  J[390] -= dqdci; // dwdot[HCCO]/d[CH2(S)]
  // d()/d[CO]
  dqdci = -k_r * sc[11];
  J[463] -= dqdci; // dwdot[H]/d[CO]
  J[473] += dqdci; // dwdot[CH2(S)]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[489] -= dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[1];
  J[892] -= dqdci; // dwdot[H]/d[HCCO]
  J[902] += dqdci; // dwdot[CH2(S)]/d[HCCO]
  J[905] += dqdci; // dwdot[CO]/d[HCCO]
  J[918] -= dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1067] += dqdT; // dwdot[CH2(S)]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1083] -= dqdT; // dwdot[HCCO]/dT

  // reaction 79: CH2CO + H <=> H2 + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[28];
  k_f = 50000000 * exp(-(4025.73332643776) * invT);
  dlnkfdT = (4025.73332643776) * invT2;
  // reverse
  phi_r = sc[0] * sc[27];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[27] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[28]) + (h_RT[0] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[27] += q; // HCCO
  wdot[28] -= q; // CH2CO
  // d()/d[H2]
  dqdci = -k_r * sc[27];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[27] += dqdci; // dwdot[HCCO]/d[H2]
  J[28] -= dqdci; // dwdot[CH2CO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[28];
  J[33] += dqdci; // dwdot[H2]/d[H]
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[60] += dqdci; // dwdot[HCCO]/d[H]
  J[61] -= dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[HCCO]
  dqdci = -k_r * sc[0];
  J[891] += dqdci; // dwdot[H2]/d[HCCO]
  J[892] -= dqdci; // dwdot[H]/d[HCCO]
  J[918] += dqdci; // dwdot[HCCO]/d[HCCO]
  J[919] -= dqdci; // dwdot[CH2CO]/d[HCCO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[1];
  J[924] += dqdci; // dwdot[H2]/d[CH2CO]
  J[925] -= dqdci; // dwdot[H]/d[CH2CO]
  J[951] += dqdci; // dwdot[HCCO]/d[CH2CO]
  J[952] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1056] += dqdT; // dwdot[H2]/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1083] += dqdT; // dwdot[HCCO]/dT
  J[1084] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 80: CH2CO + H <=> CH3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[28];
  k_f = 11300000 * exp(-(1725.02673037858) * invT);
  dlnkfdT = (1725.02673037858) * invT2;
  // reverse
  phi_r = sc[12] * sc[14];
  Kc = exp(g_RT[1] - g_RT[12] - g_RT[14] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[28]) + (h_RT[12] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[12] += q; // CH3
  wdot[14] += q; // CO
  wdot[28] -= q; // CH2CO
  // d()/d[H]
  dqdci = +k_f * sc[28];
  J[34] -= dqdci; // dwdot[H]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  J[47] += dqdci; // dwdot[CO]/d[H]
  J[61] -= dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[14];
  J[397] -= dqdci; // dwdot[H]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  J[410] += dqdci; // dwdot[CO]/d[CH3]
  J[424] -= dqdci; // dwdot[CH2CO]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[12];
  J[463] -= dqdci; // dwdot[H]/d[CO]
  J[474] += dqdci; // dwdot[CH3]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[490] -= dqdci; // dwdot[CH2CO]/d[CO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[1];
  J[925] -= dqdci; // dwdot[H]/d[CH2CO]
  J[936] += dqdci; // dwdot[CH3]/d[CH2CO]
  J[938] += dqdci; // dwdot[CO]/d[CH2CO]
  J[952] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1057] -= dqdT; // dwdot[H]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1084] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 81: H + HCCOH <=> CH2CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[29];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[28];
  Kc = exp(g_RT[1] - g_RT[1] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[29]) + (h_RT[1] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[28] += q; // CH2CO
  wdot[29] -= q; // HCCOH
  // d()/d[H]
  dqdci = +k_f * sc[29] - k_r * sc[28];
  J[61] += dqdci; // dwdot[CH2CO]/d[H]
  J[62] -= dqdci; // dwdot[HCCOH]/d[H]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[1];
  J[952] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[953] -= dqdci; // dwdot[HCCOH]/d[CH2CO]
  // d()/d[HCCOH]
  dqdci = +k_f * sc[1];
  J[985] += dqdci; // dwdot[CH2CO]/d[HCCOH]
  J[986] -= dqdci; // dwdot[HCCOH]/d[HCCOH]
  // d()/dT
  J[1084] += dqdT; // dwdot[CH2CO]/dT
  J[1085] -= dqdT; // dwdot[HCCOH]/dT

  // reaction 83: H2 + OH <=> H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 216 * exp(1.51 * tc[0] - (1726.03316371019) * invT);
  dlnkfdT = 1.51 * invT + (1726.03316371019) * invT2;
  // reverse
  phi_r = sc[1] * sc[5];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[4]) + (h_RT[1] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // H2
  wdot[1] += q; // H
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  // d()/d[H2]
  dqdci = +k_f * sc[4];
  J[0] -= dqdci; // dwdot[H2]/d[H2]
  J[1] += dqdci; // dwdot[H]/d[H2]
  J[4] -= dqdci; // dwdot[OH]/d[H2]
  J[5] += dqdci; // dwdot[H2O]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[5];
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[34] += dqdci; // dwdot[H]/d[H]
  J[37] -= dqdci; // dwdot[OH]/d[H]
  J[38] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[0];
  J[132] -= dqdci; // dwdot[H2]/d[OH]
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[1];
  J[165] -= dqdci; // dwdot[H2]/d[H2O]
  J[166] += dqdci; // dwdot[H]/d[H2O]
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1056] -= dqdT; // dwdot[H2]/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT

  // reaction 85: 2 OH <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 0.0357 * exp(2.4 * tc[0] - (-1061.78716484796) * invT);
  dlnkfdT = 2.4 * invT + (-1061.78716484796) * invT2;
  // reverse
  phi_r = sc[2] * sc[5];
  Kc = exp(-g_RT[2] + 2.000000 * g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[2] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;     // O
  wdot[4] -= 2 * q; // OH
  wdot[5] += q;     // H2O
  // d()/d[O]
  dqdci = -k_r * sc[5];
  J[68] += dqdci;      // dwdot[O]/d[O]
  J[70] += -2 * dqdci; // dwdot[OH]/d[O]
  J[71] += dqdci;      // dwdot[H2O]/d[O]
  // d()/d[OH]
  dqdci = +k_f * 2.000000 * sc[4];
  J[134] += dqdci;      // dwdot[O]/d[OH]
  J[136] += -2 * dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci;      // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[2];
  J[167] += dqdci;      // dwdot[O]/d[H2O]
  J[169] += -2 * dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci;      // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1058] += dqdT;      // dwdot[O]/dT
  J[1060] += -2 * dqdT; // dwdot[OH]/dT
  J[1061] += dqdT;      // dwdot[H2O]/dT

  // reaction 86: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[6];
  k_f = 29000000 * exp(-(-251.60833290236) * invT);
  dlnkfdT = (-251.60833290236) * invT2;
  // reverse
  phi_r = sc[3] * sc[5];
  Kc = exp(-g_RT[3] + g_RT[4] - g_RT[5] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[6]) + (h_RT[3] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // O2
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] -= q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[5];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[103] -= dqdci; // dwdot[OH]/d[O2]
  J[104] += dqdci; // dwdot[H2O]/d[O2]
  J[105] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[OH]
  dqdci = +k_f * sc[6];
  J[135] += dqdci; // dwdot[O2]/d[OH]
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[138] -= dqdci; // dwdot[HO2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[168] += dqdci; // dwdot[O2]/d[H2O]
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] -= dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[4];
  J[201] += dqdci; // dwdot[O2]/d[HO2]
  J[202] -= dqdci; // dwdot[OH]/d[HO2]
  J[203] += dqdci; // dwdot[H2O]/d[HO2]
  J[204] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] -= dqdT; // dwdot[HO2]/dT

  // reaction 87: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 1750000 * exp(-(161.02933305751) * invT);
  dlnkfdT = (161.02933305751) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[7]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[138] += dqdci; // dwdot[HO2]/d[OH]
  J[139] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[6];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] += dqdci; // dwdot[HO2]/d[H2O]
  J[172] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[202] -= dqdci; // dwdot[OH]/d[HO2]
  J[203] += dqdci; // dwdot[H2O]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  J[205] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[4];
  J[235] -= dqdci; // dwdot[OH]/d[H2O2]
  J[236] += dqdci; // dwdot[H2O]/d[H2O2]
  J[237] += dqdci; // dwdot[HO2]/d[H2O2]
  J[238] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT
  J[1063] -= dqdT; // dwdot[H2O2]/dT

  // reaction 88: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 580000000 * exp(-(4810.75132509312) * invT);
  dlnkfdT = (4810.75132509312) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[7]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[138] += dqdci; // dwdot[HO2]/d[OH]
  J[139] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[6];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[171] += dqdci; // dwdot[HO2]/d[H2O]
  J[172] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[202] -= dqdci; // dwdot[OH]/d[HO2]
  J[203] += dqdci; // dwdot[H2O]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  J[205] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[4];
  J[235] -= dqdci; // dwdot[OH]/d[H2O2]
  J[236] += dqdci; // dwdot[H2O]/d[H2O2]
  J[237] += dqdci; // dwdot[HO2]/d[H2O2]
  J[238] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT
  J[1063] -= dqdT; // dwdot[H2O2]/dT

  // reaction 89: C + OH <=> CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[8];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[8] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[8]) + (h_RT[1] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[8] -= q;  // C
  wdot[14] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[14];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[37] -= dqdci; // dwdot[OH]/d[H]
  J[41] -= dqdci; // dwdot[C]/d[H]
  J[47] += dqdci; // dwdot[CO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[8];
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[140] -= dqdci; // dwdot[C]/d[OH]
  J[146] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[C]
  dqdci = +k_f * sc[4];
  J[265] += dqdci; // dwdot[H]/d[C]
  J[268] -= dqdci; // dwdot[OH]/d[C]
  J[272] -= dqdci; // dwdot[C]/d[C]
  J[278] += dqdci; // dwdot[CO]/d[C]
  // d()/d[CO]
  dqdci = -k_r * sc[1];
  J[463] += dqdci; // dwdot[H]/d[CO]
  J[466] -= dqdci; // dwdot[OH]/d[CO]
  J[470] -= dqdci; // dwdot[C]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1064] -= dqdT; // dwdot[C]/dT
  J[1070] += dqdT; // dwdot[CO]/dT

  // reaction 90: CH + OH <=> H + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[16];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[9] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[9]) + (h_RT[1] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[9] -= q;  // CH
  wdot[16] += q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[16];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[37] -= dqdci; // dwdot[OH]/d[H]
  J[42] -= dqdci; // dwdot[CH]/d[H]
  J[49] += dqdci; // dwdot[HCO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[9];
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[141] -= dqdci; // dwdot[CH]/d[OH]
  J[148] += dqdci; // dwdot[HCO]/d[OH]
  // d()/d[CH]
  dqdci = +k_f * sc[4];
  J[298] += dqdci; // dwdot[H]/d[CH]
  J[301] -= dqdci; // dwdot[OH]/d[CH]
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[313] += dqdci; // dwdot[HCO]/d[CH]
  // d()/d[HCO]
  dqdci = -k_r * sc[1];
  J[529] += dqdci; // dwdot[H]/d[HCO]
  J[532] -= dqdci; // dwdot[OH]/d[HCO]
  J[537] -= dqdci; // dwdot[CH]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT

  // reaction 91: CH2 + OH <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[17];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[10] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[1] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[10] -= q; // CH2
  wdot[17] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[17];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[37] -= dqdci; // dwdot[OH]/d[H]
  J[43] -= dqdci; // dwdot[CH2]/d[H]
  J[50] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[142] -= dqdci; // dwdot[CH2]/d[OH]
  J[149] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH2]
  dqdci = +k_f * sc[4];
  J[331] += dqdci; // dwdot[H]/d[CH2]
  J[334] -= dqdci; // dwdot[OH]/d[CH2]
  J[340] -= dqdci; // dwdot[CH2]/d[CH2]
  J[347] += dqdci; // dwdot[CH2O]/d[CH2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[562] += dqdci; // dwdot[H]/d[CH2O]
  J[565] -= dqdci; // dwdot[OH]/d[CH2O]
  J[571] -= dqdci; // dwdot[CH2]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT

  // reaction 92: CH2 + OH <=> CH + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 11.3 * exp(2 * tc[0] - (1509.64999741416) * invT);
  dlnkfdT = 2 * invT + (1509.64999741416) * invT2;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[9] += q;  // CH
  wdot[10] -= q; // CH2
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[141] += dqdci; // dwdot[CH]/d[OH]
  J[142] -= dqdci; // dwdot[CH2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[9];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[174] += dqdci; // dwdot[CH]/d[H2O]
  J[175] -= dqdci; // dwdot[CH2]/d[H2O]
  // d()/d[CH]
  dqdci = -k_r * sc[5];
  J[301] -= dqdci; // dwdot[OH]/d[CH]
  J[302] += dqdci; // dwdot[H2O]/d[CH]
  J[306] += dqdci; // dwdot[CH]/d[CH]
  J[307] -= dqdci; // dwdot[CH2]/d[CH]
  // d()/d[CH2]
  dqdci = +k_f * sc[4];
  J[334] -= dqdci; // dwdot[OH]/d[CH2]
  J[335] += dqdci; // dwdot[H2O]/d[CH2]
  J[339] += dqdci; // dwdot[CH]/d[CH2]
  J[340] -= dqdci; // dwdot[CH2]/d[CH2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1065] += dqdT; // dwdot[CH]/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT

  // reaction 93: CH2(S) + OH <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[11];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[17];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[11] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[11]) + (h_RT[1] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[11] -= q; // CH2(S)
  wdot[17] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[17];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[37] -= dqdci; // dwdot[OH]/d[H]
  J[44] -= dqdci; // dwdot[CH2(S)]/d[H]
  J[50] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[11];
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[143] -= dqdci; // dwdot[CH2(S)]/d[OH]
  J[149] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[4];
  J[364] += dqdci; // dwdot[H]/d[CH2(S)]
  J[367] -= dqdci; // dwdot[OH]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[380] += dqdci; // dwdot[CH2O]/d[CH2(S)]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[562] += dqdci; // dwdot[H]/d[CH2O]
  J[565] -= dqdci; // dwdot[OH]/d[CH2O]
  J[572] -= dqdci; // dwdot[CH2(S)]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT

  // reaction 95: CH3 + OH <=> CH2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 56 * exp(1.6 * tc[0] - (2727.43432866158) * invT);
  dlnkfdT = 1.6 * invT + (2727.43432866158) * invT2;
  // reverse
  phi_r = sc[5] * sc[10];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[10] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[5] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[10] += q; // CH2
  wdot[12] -= q; // CH3
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[142] += dqdci; // dwdot[CH2]/d[OH]
  J[144] -= dqdci; // dwdot[CH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[10];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[175] += dqdci; // dwdot[CH2]/d[H2O]
  J[177] -= dqdci; // dwdot[CH3]/d[H2O]
  // d()/d[CH2]
  dqdci = -k_r * sc[5];
  J[334] -= dqdci; // dwdot[OH]/d[CH2]
  J[335] += dqdci; // dwdot[H2O]/d[CH2]
  J[340] += dqdci; // dwdot[CH2]/d[CH2]
  J[342] -= dqdci; // dwdot[CH3]/d[CH2]
  // d()/d[CH3]
  dqdci = +k_f * sc[4];
  J[400] -= dqdci; // dwdot[OH]/d[CH3]
  J[401] += dqdci; // dwdot[H2O]/d[CH3]
  J[406] += dqdci; // dwdot[CH2]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1066] += dqdT; // dwdot[CH2]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT

  // reaction 96: CH3 + OH <=> CH2(S) + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 25010000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[11];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[5] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[11] += q; // CH2(S)
  wdot[12] -= q; // CH3
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[143] += dqdci; // dwdot[CH2(S)]/d[OH]
  J[144] -= dqdci; // dwdot[CH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[176] += dqdci; // dwdot[CH2(S)]/d[H2O]
  J[177] -= dqdci; // dwdot[CH3]/d[H2O]
  // d()/d[CH2(S)]
  dqdci = -k_r * sc[5];
  J[367] -= dqdci; // dwdot[OH]/d[CH2(S)]
  J[368] += dqdci; // dwdot[H2O]/d[CH2(S)]
  J[374] += dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[375] -= dqdci; // dwdot[CH3]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = +k_f * sc[4];
  J[400] -= dqdci; // dwdot[OH]/d[CH3]
  J[401] += dqdci; // dwdot[H2O]/d[CH3]
  J[407] += dqdci; // dwdot[CH2(S)]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1067] += dqdT; // dwdot[CH2(S)]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT

  // reaction 97: CH4 + OH <=> CH3 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[13];
  k_f = 100 * exp(1.6 * tc[0] - (1570.03599731073) * invT);
  dlnkfdT = 1.6 * invT + (1570.03599731073) * invT2;
  // reverse
  phi_r = sc[5] * sc[12];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[13]) + (h_RT[5] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[12] += q; // CH3
  wdot[13] -= q; // CH4
  // d()/d[OH]
  dqdci = +k_f * sc[13];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[144] += dqdci; // dwdot[CH3]/d[OH]
  J[145] -= dqdci; // dwdot[CH4]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[12];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[177] += dqdci; // dwdot[CH3]/d[H2O]
  J[178] -= dqdci; // dwdot[CH4]/d[H2O]
  // d()/d[CH3]
  dqdci = -k_r * sc[5];
  J[400] -= dqdci; // dwdot[OH]/d[CH3]
  J[401] += dqdci; // dwdot[H2O]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  J[409] -= dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[4];
  J[433] -= dqdci; // dwdot[OH]/d[CH4]
  J[434] += dqdci; // dwdot[H2O]/d[CH4]
  J[441] += dqdci; // dwdot[CH3]/d[CH4]
  J[442] -= dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT
  J[1069] -= dqdT; // dwdot[CH4]/dT

  // reaction 98: CO + OH <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[14];
  k_f = 47.6 * exp(1.228 * tc[0] - (35.2251666063304) * invT);
  dlnkfdT = 1.228 * invT + (35.2251666063304) * invT2;
  // reverse
  phi_r = sc[1] * sc[15];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[14]) + (h_RT[1] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[14] -= q; // CO
  wdot[15] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[15];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[37] -= dqdci; // dwdot[OH]/d[H]
  J[47] -= dqdci; // dwdot[CO]/d[H]
  J[48] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[14];
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[146] -= dqdci; // dwdot[CO]/d[OH]
  J[147] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[CO]
  dqdci = +k_f * sc[4];
  J[463] += dqdci; // dwdot[H]/d[CO]
  J[466] -= dqdci; // dwdot[OH]/d[CO]
  J[476] -= dqdci; // dwdot[CO]/d[CO]
  J[477] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[1];
  J[496] += dqdci; // dwdot[H]/d[CO2]
  J[499] -= dqdci; // dwdot[OH]/d[CO2]
  J[509] -= dqdci; // dwdot[CO]/d[CO2]
  J[510] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1070] -= dqdT; // dwdot[CO]/dT
  J[1071] += dqdT; // dwdot[CO2]/dT

  // reaction 99: HCO + OH <=> CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[16];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[14];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[16]) + (h_RT[5] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[OH]
  dqdci = +k_f * sc[16];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[146] += dqdci; // dwdot[CO]/d[OH]
  J[148] -= dqdci; // dwdot[HCO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[14];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[179] += dqdci; // dwdot[CO]/d[H2O]
  J[181] -= dqdci; // dwdot[HCO]/d[H2O]
  // d()/d[CO]
  dqdci = -k_r * sc[5];
  J[466] -= dqdci; // dwdot[OH]/d[CO]
  J[467] += dqdci; // dwdot[H2O]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[478] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[4];
  J[532] -= dqdci; // dwdot[OH]/d[HCO]
  J[533] += dqdci; // dwdot[H2O]/d[HCO]
  J[542] += dqdci; // dwdot[CO]/d[HCO]
  J[544] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1072] -= dqdT; // dwdot[HCO]/dT

  // reaction 100: CH2O + OH <=> H2O + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[17];
  k_f = 3430 * exp(1.18 * tc[0] - (-224.93784961471) * invT);
  dlnkfdT = 1.18 * invT + (-224.93784961471) * invT2;
  // reverse
  phi_r = sc[5] * sc[16];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[17]) + (h_RT[5] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[148] += dqdci; // dwdot[HCO]/d[OH]
  J[149] -= dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[16];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[181] += dqdci; // dwdot[HCO]/d[H2O]
  J[182] -= dqdci; // dwdot[CH2O]/d[H2O]
  // d()/d[HCO]
  dqdci = -k_r * sc[5];
  J[532] -= dqdci; // dwdot[OH]/d[HCO]
  J[533] += dqdci; // dwdot[H2O]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  J[545] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[4];
  J[565] -= dqdci; // dwdot[OH]/d[CH2O]
  J[566] += dqdci; // dwdot[H2O]/d[CH2O]
  J[577] += dqdci; // dwdot[HCO]/d[CH2O]
  J[578] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT
  J[1073] -= dqdT; // dwdot[CH2O]/dT

  // reaction 101: CH2OH + OH <=> CH2O + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 5000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[17];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[5] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[17] += q; // CH2O
  wdot[18] -= q; // CH2OH
  // d()/d[OH]
  dqdci = +k_f * sc[18];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[149] += dqdci; // dwdot[CH2O]/d[OH]
  J[150] -= dqdci; // dwdot[CH2OH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[182] += dqdci; // dwdot[CH2O]/d[H2O]
  J[183] -= dqdci; // dwdot[CH2OH]/d[H2O]
  // d()/d[CH2O]
  dqdci = -k_r * sc[5];
  J[565] -= dqdci; // dwdot[OH]/d[CH2O]
  J[566] += dqdci; // dwdot[H2O]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[579] -= dqdci; // dwdot[CH2OH]/d[CH2O]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[4];
  J[598] -= dqdci; // dwdot[OH]/d[CH2OH]
  J[599] += dqdci; // dwdot[H2O]/d[CH2OH]
  J[611] += dqdci; // dwdot[CH2O]/d[CH2OH]
  J[612] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT
  J[1074] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 102: CH3O + OH <=> CH2O + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[19];
  k_f = 5000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[17];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[17] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[19]) + (h_RT[5] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[17] += q; // CH2O
  wdot[19] -= q; // CH3O
  // d()/d[OH]
  dqdci = +k_f * sc[19];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[149] += dqdci; // dwdot[CH2O]/d[OH]
  J[151] -= dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[182] += dqdci; // dwdot[CH2O]/d[H2O]
  J[184] -= dqdci; // dwdot[CH3O]/d[H2O]
  // d()/d[CH2O]
  dqdci = -k_r * sc[5];
  J[565] -= dqdci; // dwdot[OH]/d[CH2O]
  J[566] += dqdci; // dwdot[H2O]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[580] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[4];
  J[631] -= dqdci; // dwdot[OH]/d[CH3O]
  J[632] += dqdci; // dwdot[H2O]/d[CH3O]
  J[644] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[646] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT
  J[1075] -= dqdT; // dwdot[CH3O]/dT

  // reaction 103: CH3OH + OH <=> CH2OH + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[20];
  k_f = 1.44 * exp(2 * tc[0] - (-422.701999275965) * invT);
  dlnkfdT = 2 * invT + (-422.701999275965) * invT2;
  // reverse
  phi_r = sc[5] * sc[18];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[20]) + (h_RT[5] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  // d()/d[OH]
  dqdci = +k_f * sc[20];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[150] += dqdci; // dwdot[CH2OH]/d[OH]
  J[152] -= dqdci; // dwdot[CH3OH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[18];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[183] += dqdci; // dwdot[CH2OH]/d[H2O]
  J[185] -= dqdci; // dwdot[CH3OH]/d[H2O]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[5];
  J[598] -= dqdci; // dwdot[OH]/d[CH2OH]
  J[599] += dqdci; // dwdot[H2O]/d[CH2OH]
  J[612] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[614] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[4];
  J[664] -= dqdci; // dwdot[OH]/d[CH3OH]
  J[665] += dqdci; // dwdot[H2O]/d[CH3OH]
  J[678] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[680] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1074] += dqdT; // dwdot[CH2OH]/dT
  J[1076] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 104: CH3OH + OH <=> CH3O + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[20];
  k_f = 6.3 * exp(2 * tc[0] - (754.82499870708) * invT);
  dlnkfdT = 2 * invT + (754.82499870708) * invT2;
  // reverse
  phi_r = sc[5] * sc[19];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[20]) + (h_RT[5] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  // d()/d[OH]
  dqdci = +k_f * sc[20];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[151] += dqdci; // dwdot[CH3O]/d[OH]
  J[152] -= dqdci; // dwdot[CH3OH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[19];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[184] += dqdci; // dwdot[CH3O]/d[H2O]
  J[185] -= dqdci; // dwdot[CH3OH]/d[H2O]
  // d()/d[CH3O]
  dqdci = -k_r * sc[5];
  J[631] -= dqdci; // dwdot[OH]/d[CH3O]
  J[632] += dqdci; // dwdot[H2O]/d[CH3O]
  J[646] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[647] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[4];
  J[664] -= dqdci; // dwdot[OH]/d[CH3OH]
  J[665] += dqdci; // dwdot[H2O]/d[CH3OH]
  J[679] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[680] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1075] += dqdT; // dwdot[CH3O]/dT
  J[1076] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 105: C2H + OH <=> H + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[21];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[27];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[21] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[21]) + (h_RT[1] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[21] -= q; // C2H
  wdot[27] += q; // HCCO
  // d()/d[H]
  dqdci = -k_r * sc[27];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[37] -= dqdci; // dwdot[OH]/d[H]
  J[54] -= dqdci; // dwdot[C2H]/d[H]
  J[60] += dqdci; // dwdot[HCCO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[21];
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[153] -= dqdci; // dwdot[C2H]/d[OH]
  J[159] += dqdci; // dwdot[HCCO]/d[OH]
  // d()/d[C2H]
  dqdci = +k_f * sc[4];
  J[694] += dqdci; // dwdot[H]/d[C2H]
  J[697] -= dqdci; // dwdot[OH]/d[C2H]
  J[714] -= dqdci; // dwdot[C2H]/d[C2H]
  J[720] += dqdci; // dwdot[HCCO]/d[C2H]
  // d()/d[HCCO]
  dqdci = -k_r * sc[1];
  J[892] += dqdci; // dwdot[H]/d[HCCO]
  J[895] -= dqdci; // dwdot[OH]/d[HCCO]
  J[912] -= dqdci; // dwdot[C2H]/d[HCCO]
  J[918] += dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1077] -= dqdT; // dwdot[C2H]/dT
  J[1083] += dqdT; // dwdot[HCCO]/dT

  // reaction 106: C2H2 + OH <=> CH2CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 2.18e-10 * exp(4.5 * tc[0] - (-503.21666580472) * invT);
  dlnkfdT = 4.5 * invT + (-503.21666580472) * invT2;
  // reverse
  phi_r = sc[1] * sc[28];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[22] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[1] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[22] -= q; // C2H2
  wdot[28] += q; // CH2CO
  // d()/d[H]
  dqdci = -k_r * sc[28];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[37] -= dqdci; // dwdot[OH]/d[H]
  J[55] -= dqdci; // dwdot[C2H2]/d[H]
  J[61] += dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[154] -= dqdci; // dwdot[C2H2]/d[OH]
  J[160] += dqdci; // dwdot[CH2CO]/d[OH]
  // d()/d[C2H2]
  dqdci = +k_f * sc[4];
  J[727] += dqdci; // dwdot[H]/d[C2H2]
  J[730] -= dqdci; // dwdot[OH]/d[C2H2]
  J[748] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[754] += dqdci; // dwdot[CH2CO]/d[C2H2]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[1];
  J[925] += dqdci; // dwdot[H]/d[CH2CO]
  J[928] -= dqdci; // dwdot[OH]/d[CH2CO]
  J[946] -= dqdci; // dwdot[C2H2]/d[CH2CO]
  J[952] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1078] -= dqdT; // dwdot[C2H2]/dT
  J[1084] += dqdT; // dwdot[CH2CO]/dT

  // reaction 107: C2H2 + OH <=> H + HCCOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 0.504 * exp(2.3 * tc[0] - (6793.42498836372) * invT);
  dlnkfdT = 2.3 * invT + (6793.42498836372) * invT2;
  // reverse
  phi_r = sc[1] * sc[29];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[22] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[1] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[22] -= q; // C2H2
  wdot[29] += q; // HCCOH
  // d()/d[H]
  dqdci = -k_r * sc[29];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[37] -= dqdci; // dwdot[OH]/d[H]
  J[55] -= dqdci; // dwdot[C2H2]/d[H]
  J[62] += dqdci; // dwdot[HCCOH]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[154] -= dqdci; // dwdot[C2H2]/d[OH]
  J[161] += dqdci; // dwdot[HCCOH]/d[OH]
  // d()/d[C2H2]
  dqdci = +k_f * sc[4];
  J[727] += dqdci; // dwdot[H]/d[C2H2]
  J[730] -= dqdci; // dwdot[OH]/d[C2H2]
  J[748] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[755] += dqdci; // dwdot[HCCOH]/d[C2H2]
  // d()/d[HCCOH]
  dqdci = -k_r * sc[1];
  J[958] += dqdci; // dwdot[H]/d[HCCOH]
  J[961] -= dqdci; // dwdot[OH]/d[HCCOH]
  J[979] -= dqdci; // dwdot[C2H2]/d[HCCOH]
  J[986] += dqdci; // dwdot[HCCOH]/d[HCCOH]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1078] -= dqdT; // dwdot[C2H2]/dT
  J[1085] += dqdT; // dwdot[HCCOH]/dT

  // reaction 108: C2H2 + OH <=> C2H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 33.7 * exp(2 * tc[0] - (7045.03332126608) * invT);
  dlnkfdT = 2 * invT + (7045.03332126608) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[21] += q; // C2H
  wdot[22] -= q; // C2H2
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[153] += dqdci; // dwdot[C2H]/d[OH]
  J[154] -= dqdci; // dwdot[C2H2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[186] += dqdci; // dwdot[C2H]/d[H2O]
  J[187] -= dqdci; // dwdot[C2H2]/d[H2O]
  // d()/d[C2H]
  dqdci = -k_r * sc[5];
  J[697] -= dqdci; // dwdot[OH]/d[C2H]
  J[698] += dqdci; // dwdot[H2O]/d[C2H]
  J[714] += dqdci; // dwdot[C2H]/d[C2H]
  J[715] -= dqdci; // dwdot[C2H2]/d[C2H]
  // d()/d[C2H2]
  dqdci = +k_f * sc[4];
  J[730] -= dqdci; // dwdot[OH]/d[C2H2]
  J[731] += dqdci; // dwdot[H2O]/d[C2H2]
  J[747] += dqdci; // dwdot[C2H]/d[C2H2]
  J[748] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1077] += dqdT; // dwdot[C2H]/dT
  J[1078] -= dqdT; // dwdot[C2H2]/dT

  // reaction 109: C2H2 + OH <=> CH3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 4.83e-10 * exp(4 * tc[0] - (-1006.43333160944) * invT);
  dlnkfdT = 4 * invT + (-1006.43333160944) * invT2;
  // reverse
  phi_r = sc[12] * sc[14];
  Kc = exp(g_RT[4] - g_RT[12] - g_RT[14] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[12] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[12] += q; // CH3
  wdot[14] += q; // CO
  wdot[22] -= q; // C2H2
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[144] += dqdci; // dwdot[CH3]/d[OH]
  J[146] += dqdci; // dwdot[CO]/d[OH]
  J[154] -= dqdci; // dwdot[C2H2]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[14];
  J[400] -= dqdci; // dwdot[OH]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  J[410] += dqdci; // dwdot[CO]/d[CH3]
  J[418] -= dqdci; // dwdot[C2H2]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[12];
  J[466] -= dqdci; // dwdot[OH]/d[CO]
  J[474] += dqdci; // dwdot[CH3]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[484] -= dqdci; // dwdot[C2H2]/d[CO]
  // d()/d[C2H2]
  dqdci = +k_f * sc[4];
  J[730] -= dqdci; // dwdot[OH]/d[C2H2]
  J[738] += dqdci; // dwdot[CH3]/d[C2H2]
  J[740] += dqdci; // dwdot[CO]/d[C2H2]
  J[748] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1078] -= dqdT; // dwdot[C2H2]/dT

  // reaction 110: C2H3 + OH <=> C2H2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[23];
  k_f = 5000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[22];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[22] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[23]) + (h_RT[5] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[22] += q; // C2H2
  wdot[23] -= q; // C2H3
  // d()/d[OH]
  dqdci = +k_f * sc[23];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[154] += dqdci; // dwdot[C2H2]/d[OH]
  J[155] -= dqdci; // dwdot[C2H3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[22];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[187] += dqdci; // dwdot[C2H2]/d[H2O]
  J[188] -= dqdci; // dwdot[C2H3]/d[H2O]
  // d()/d[C2H2]
  dqdci = -k_r * sc[5];
  J[730] -= dqdci; // dwdot[OH]/d[C2H2]
  J[731] += dqdci; // dwdot[H2O]/d[C2H2]
  J[748] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[749] -= dqdci; // dwdot[C2H3]/d[C2H2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[4];
  J[763] -= dqdci; // dwdot[OH]/d[C2H3]
  J[764] += dqdci; // dwdot[H2O]/d[C2H3]
  J[781] += dqdci; // dwdot[C2H2]/d[C2H3]
  J[782] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1078] += dqdT; // dwdot[C2H2]/dT
  J[1079] -= dqdT; // dwdot[C2H3]/dT

  // reaction 111: C2H4 + OH <=> C2H3 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[24];
  k_f = 3.6 * exp(2 * tc[0] - (1258.0416645118) * invT);
  dlnkfdT = 2 * invT + (1258.0416645118) * invT2;
  // reverse
  phi_r = sc[5] * sc[23];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[24]) + (h_RT[5] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[23] += q; // C2H3
  wdot[24] -= q; // C2H4
  // d()/d[OH]
  dqdci = +k_f * sc[24];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[155] += dqdci; // dwdot[C2H3]/d[OH]
  J[156] -= dqdci; // dwdot[C2H4]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[188] += dqdci; // dwdot[C2H3]/d[H2O]
  J[189] -= dqdci; // dwdot[C2H4]/d[H2O]
  // d()/d[C2H3]
  dqdci = -k_r * sc[5];
  J[763] -= dqdci; // dwdot[OH]/d[C2H3]
  J[764] += dqdci; // dwdot[H2O]/d[C2H3]
  J[782] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[783] -= dqdci; // dwdot[C2H4]/d[C2H3]
  // d()/d[C2H4]
  dqdci = +k_f * sc[4];
  J[796] -= dqdci; // dwdot[OH]/d[C2H4]
  J[797] += dqdci; // dwdot[H2O]/d[C2H4]
  J[815] += dqdci; // dwdot[C2H3]/d[C2H4]
  J[816] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1079] += dqdT; // dwdot[C2H3]/dT
  J[1080] -= dqdT; // dwdot[C2H4]/dT

  // reaction 112: C2H6 + OH <=> C2H5 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[26];
  k_f = 3.54 * exp(2.12 * tc[0] - (437.798499250106) * invT);
  dlnkfdT = 2.12 * invT + (437.798499250106) * invT2;
  // reverse
  phi_r = sc[5] * sc[25];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[26]) + (h_RT[5] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  // d()/d[OH]
  dqdci = +k_f * sc[26];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[157] += dqdci; // dwdot[C2H5]/d[OH]
  J[158] -= dqdci; // dwdot[C2H6]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[25];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[190] += dqdci; // dwdot[C2H5]/d[H2O]
  J[191] -= dqdci; // dwdot[C2H6]/d[H2O]
  // d()/d[C2H5]
  dqdci = -k_r * sc[5];
  J[829] -= dqdci; // dwdot[OH]/d[C2H5]
  J[830] += dqdci; // dwdot[H2O]/d[C2H5]
  J[850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[4];
  J[862] -= dqdci; // dwdot[OH]/d[C2H6]
  J[863] += dqdci; // dwdot[H2O]/d[C2H6]
  J[883] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[884] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1081] += dqdT; // dwdot[C2H5]/dT
  J[1082] -= dqdT; // dwdot[C2H6]/dT

  // reaction 113: CH2CO + OH <=> H2O + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[28];
  k_f = 7500000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[5] * sc[27];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[27] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[28]) + (h_RT[5] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[27] += q; // HCCO
  wdot[28] -= q; // CH2CO
  // d()/d[OH]
  dqdci = +k_f * sc[28];
  J[136] -= dqdci; // dwdot[OH]/d[OH]
  J[137] += dqdci; // dwdot[H2O]/d[OH]
  J[159] += dqdci; // dwdot[HCCO]/d[OH]
  J[160] -= dqdci; // dwdot[CH2CO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[27];
  J[169] -= dqdci; // dwdot[OH]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[192] += dqdci; // dwdot[HCCO]/d[H2O]
  J[193] -= dqdci; // dwdot[CH2CO]/d[H2O]
  // d()/d[HCCO]
  dqdci = -k_r * sc[5];
  J[895] -= dqdci; // dwdot[OH]/d[HCCO]
  J[896] += dqdci; // dwdot[H2O]/d[HCCO]
  J[918] += dqdci; // dwdot[HCCO]/d[HCCO]
  J[919] -= dqdci; // dwdot[CH2CO]/d[HCCO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[4];
  J[928] -= dqdci; // dwdot[OH]/d[CH2CO]
  J[929] += dqdci; // dwdot[H2O]/d[CH2CO]
  J[951] += dqdci; // dwdot[HCCO]/d[CH2CO]
  J[952] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1060] -= dqdT; // dwdot[OH]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1083] += dqdT; // dwdot[HCCO]/dT
  J[1084] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 114: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[6] * sc[6]);
  k_f = 130000 * exp(-(-820.243165261693) * invT);
  dlnkfdT = (-820.243165261693) * invT2;
  // reverse
  phi_r = sc[3] * sc[7];
  Kc = exp(-g_RT[3] + 2.000000 * g_RT[6] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[6]) + (h_RT[3] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O2
  wdot[6] -= 2 * q; // HO2
  wdot[7] += q;     // H2O2
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[102] += dqdci;      // dwdot[O2]/d[O2]
  J[105] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[106] += dqdci;      // dwdot[H2O2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[6];
  J[201] += dqdci;      // dwdot[O2]/d[HO2]
  J[204] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[205] += dqdci;      // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[3];
  J[234] += dqdci;      // dwdot[O2]/d[H2O2]
  J[237] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[238] += dqdci;      // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1059] += dqdT;      // dwdot[O2]/dT
  J[1062] += -2 * dqdT; // dwdot[HO2]/dT
  J[1063] += dqdT;      // dwdot[H2O2]/dT

  // reaction 115: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[6] * sc[6]);
  k_f = 420000000 * exp(-(6038.59998965664) * invT);
  dlnkfdT = (6038.59998965664) * invT2;
  // reverse
  phi_r = sc[3] * sc[7];
  Kc = exp(-g_RT[3] + 2.000000 * g_RT[6] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[6]) + (h_RT[3] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O2
  wdot[6] -= 2 * q; // HO2
  wdot[7] += q;     // H2O2
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[102] += dqdci;      // dwdot[O2]/d[O2]
  J[105] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[106] += dqdci;      // dwdot[H2O2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[6];
  J[201] += dqdci;      // dwdot[O2]/d[HO2]
  J[204] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[205] += dqdci;      // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[3];
  J[234] += dqdci;      // dwdot[O2]/d[H2O2]
  J[237] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[238] += dqdci;      // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1059] += dqdT;      // dwdot[O2]/dT
  J[1062] += -2 * dqdT; // dwdot[HO2]/dT
  J[1063] += dqdT;      // dwdot[H2O2]/dT

  // reaction 116: CH2 + HO2 <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[10];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[17];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[10] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[10]) + (h_RT[4] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[10] -= q; // CH2
  wdot[17] += q; // CH2O
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[138] -= dqdci; // dwdot[HO2]/d[OH]
  J[142] -= dqdci; // dwdot[CH2]/d[OH]
  J[149] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[202] += dqdci; // dwdot[OH]/d[HO2]
  J[204] -= dqdci; // dwdot[HO2]/d[HO2]
  J[208] -= dqdci; // dwdot[CH2]/d[HO2]
  J[215] += dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[CH2]
  dqdci = +k_f * sc[6];
  J[334] += dqdci; // dwdot[OH]/d[CH2]
  J[336] -= dqdci; // dwdot[HO2]/d[CH2]
  J[340] -= dqdci; // dwdot[CH2]/d[CH2]
  J[347] += dqdci; // dwdot[CH2O]/d[CH2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[4];
  J[565] += dqdci; // dwdot[OH]/d[CH2O]
  J[567] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[571] -= dqdci; // dwdot[CH2]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1062] -= dqdT; // dwdot[HO2]/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT

  // reaction 117: CH3 + HO2 <=> CH4 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[12];
  k_f = 1000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[13];
  Kc = exp(-g_RT[3] + g_RT[6] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[12]) + (h_RT[3] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[6] -= q;  // HO2
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  // d()/d[O2]
  dqdci = -k_r * sc[13];
  J[102] += dqdci; // dwdot[O2]/d[O2]
  J[105] -= dqdci; // dwdot[HO2]/d[O2]
  J[111] -= dqdci; // dwdot[CH3]/d[O2]
  J[112] += dqdci; // dwdot[CH4]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[201] += dqdci; // dwdot[O2]/d[HO2]
  J[204] -= dqdci; // dwdot[HO2]/d[HO2]
  J[210] -= dqdci; // dwdot[CH3]/d[HO2]
  J[211] += dqdci; // dwdot[CH4]/d[HO2]
  // d()/d[CH3]
  dqdci = +k_f * sc[6];
  J[399] += dqdci; // dwdot[O2]/d[CH3]
  J[402] -= dqdci; // dwdot[HO2]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[409] += dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[3];
  J[432] += dqdci; // dwdot[O2]/d[CH4]
  J[435] -= dqdci; // dwdot[HO2]/d[CH4]
  J[441] -= dqdci; // dwdot[CH3]/d[CH4]
  J[442] += dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1059] += dqdT; // dwdot[O2]/dT
  J[1062] -= dqdT; // dwdot[HO2]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1069] += dqdT; // dwdot[CH4]/dT

  // reaction 118: CH3 + HO2 <=> CH3O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[12];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[19];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[12] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[12]) + (h_RT[4] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[12] -= q; // CH3
  wdot[19] += q; // CH3O
  // d()/d[OH]
  dqdci = -k_r * sc[19];
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[138] -= dqdci; // dwdot[HO2]/d[OH]
  J[144] -= dqdci; // dwdot[CH3]/d[OH]
  J[151] += dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[202] += dqdci; // dwdot[OH]/d[HO2]
  J[204] -= dqdci; // dwdot[HO2]/d[HO2]
  J[210] -= dqdci; // dwdot[CH3]/d[HO2]
  J[217] += dqdci; // dwdot[CH3O]/d[HO2]
  // d()/d[CH3]
  dqdci = +k_f * sc[6];
  J[400] += dqdci; // dwdot[OH]/d[CH3]
  J[402] -= dqdci; // dwdot[HO2]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[415] += dqdci; // dwdot[CH3O]/d[CH3]
  // d()/d[CH3O]
  dqdci = -k_r * sc[4];
  J[631] += dqdci; // dwdot[OH]/d[CH3O]
  J[633] -= dqdci; // dwdot[HO2]/d[CH3O]
  J[639] -= dqdci; // dwdot[CH3]/d[CH3O]
  J[646] += dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1062] -= dqdT; // dwdot[HO2]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1075] += dqdT; // dwdot[CH3O]/dT

  // reaction 119: CO + HO2 <=> CO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[14];
  k_f = 150000000 * exp(-(11875.9133129914) * invT);
  dlnkfdT = (11875.9133129914) * invT2;
  // reverse
  phi_r = sc[4] * sc[15];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[14]) + (h_RT[4] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[14] -= q; // CO
  wdot[15] += q; // CO2
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[138] -= dqdci; // dwdot[HO2]/d[OH]
  J[146] -= dqdci; // dwdot[CO]/d[OH]
  J[147] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[14];
  J[202] += dqdci; // dwdot[OH]/d[HO2]
  J[204] -= dqdci; // dwdot[HO2]/d[HO2]
  J[212] -= dqdci; // dwdot[CO]/d[HO2]
  J[213] += dqdci; // dwdot[CO2]/d[HO2]
  // d()/d[CO]
  dqdci = +k_f * sc[6];
  J[466] += dqdci; // dwdot[OH]/d[CO]
  J[468] -= dqdci; // dwdot[HO2]/d[CO]
  J[476] -= dqdci; // dwdot[CO]/d[CO]
  J[477] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[4];
  J[499] += dqdci; // dwdot[OH]/d[CO2]
  J[501] -= dqdci; // dwdot[HO2]/d[CO2]
  J[509] -= dqdci; // dwdot[CO]/d[CO2]
  J[510] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1062] -= dqdT; // dwdot[HO2]/dT
  J[1070] -= dqdT; // dwdot[CO]/dT
  J[1071] += dqdT; // dwdot[CO2]/dT

  // reaction 120: CH2O + HO2 <=> H2O2 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[17];
  k_f = 1000000 * exp(-(4025.73332643776) * invT);
  dlnkfdT = (4025.73332643776) * invT2;
  // reverse
  phi_r = sc[7] * sc[16];
  Kc = exp(g_RT[6] - g_RT[7] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[17]) + (h_RT[7] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[HO2]
  dqdci = +k_f * sc[17];
  J[204] -= dqdci; // dwdot[HO2]/d[HO2]
  J[205] += dqdci; // dwdot[H2O2]/d[HO2]
  J[214] += dqdci; // dwdot[HCO]/d[HO2]
  J[215] -= dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[16];
  J[237] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[238] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[247] += dqdci; // dwdot[HCO]/d[H2O2]
  J[248] -= dqdci; // dwdot[CH2O]/d[H2O2]
  // d()/d[HCO]
  dqdci = -k_r * sc[7];
  J[534] -= dqdci; // dwdot[HO2]/d[HCO]
  J[535] += dqdci; // dwdot[H2O2]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  J[545] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[6];
  J[567] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[568] += dqdci; // dwdot[H2O2]/d[CH2O]
  J[577] += dqdci; // dwdot[HCO]/d[CH2O]
  J[578] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1062] -= dqdT; // dwdot[HO2]/dT
  J[1063] += dqdT; // dwdot[H2O2]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT
  J[1073] -= dqdT; // dwdot[CH2O]/dT

  // reaction 121: C + O2 <=> CO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[8];
  k_f = 58000000 * exp(-(289.852799503519) * invT);
  dlnkfdT = (289.852799503519) * invT2;
  // reverse
  phi_r = sc[2] * sc[14];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[8] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[8]) + (h_RT[2] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[8] -= q;  // C
  wdot[14] += q; // CO
  // d()/d[O]
  dqdci = -k_r * sc[14];
  J[68] += dqdci; // dwdot[O]/d[O]
  J[69] -= dqdci; // dwdot[O2]/d[O]
  J[74] -= dqdci; // dwdot[C]/d[O]
  J[80] += dqdci; // dwdot[CO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[8];
  J[101] += dqdci; // dwdot[O]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[107] -= dqdci; // dwdot[C]/d[O2]
  J[113] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[C]
  dqdci = +k_f * sc[3];
  J[266] += dqdci; // dwdot[O]/d[C]
  J[267] -= dqdci; // dwdot[O2]/d[C]
  J[272] -= dqdci; // dwdot[C]/d[C]
  J[278] += dqdci; // dwdot[CO]/d[C]
  // d()/d[CO]
  dqdci = -k_r * sc[2];
  J[464] += dqdci; // dwdot[O]/d[CO]
  J[465] -= dqdci; // dwdot[O2]/d[CO]
  J[470] -= dqdci; // dwdot[C]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1058] += dqdT; // dwdot[O]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1064] -= dqdT; // dwdot[C]/dT
  J[1070] += dqdT; // dwdot[CO]/dT

  // reaction 122: C + CH2 <=> C2H + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[10];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = exp(-g_RT[1] + g_RT[8] + g_RT[10] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[10]) + (h_RT[1] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[8] -= q;  // C
  wdot[10] -= q; // CH2
  wdot[21] += q; // C2H
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[41] -= dqdci; // dwdot[C]/d[H]
  J[43] -= dqdci; // dwdot[CH2]/d[H]
  J[54] += dqdci; // dwdot[C2H]/d[H]
  // d()/d[C]
  dqdci = +k_f * sc[10];
  J[265] += dqdci; // dwdot[H]/d[C]
  J[272] -= dqdci; // dwdot[C]/d[C]
  J[274] -= dqdci; // dwdot[CH2]/d[C]
  J[285] += dqdci; // dwdot[C2H]/d[C]
  // d()/d[CH2]
  dqdci = +k_f * sc[8];
  J[331] += dqdci; // dwdot[H]/d[CH2]
  J[338] -= dqdci; // dwdot[C]/d[CH2]
  J[340] -= dqdci; // dwdot[CH2]/d[CH2]
  J[351] += dqdci; // dwdot[C2H]/d[CH2]
  // d()/d[C2H]
  dqdci = -k_r * sc[1];
  J[694] += dqdci; // dwdot[H]/d[C2H]
  J[701] -= dqdci; // dwdot[C]/d[C2H]
  J[703] -= dqdci; // dwdot[CH2]/d[C2H]
  J[714] += dqdci; // dwdot[C2H]/d[C2H]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1064] -= dqdT; // dwdot[C]/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1077] += dqdT; // dwdot[C2H]/dT

  // reaction 123: C + CH3 <=> C2H2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[12];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[22];
  Kc = exp(-g_RT[1] + g_RT[8] + g_RT[12] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[12]) + (h_RT[1] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[8] -= q;  // C
  wdot[12] -= q; // CH3
  wdot[22] += q; // C2H2
  // d()/d[H]
  dqdci = -k_r * sc[22];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[41] -= dqdci; // dwdot[C]/d[H]
  J[45] -= dqdci; // dwdot[CH3]/d[H]
  J[55] += dqdci; // dwdot[C2H2]/d[H]
  // d()/d[C]
  dqdci = +k_f * sc[12];
  J[265] += dqdci; // dwdot[H]/d[C]
  J[272] -= dqdci; // dwdot[C]/d[C]
  J[276] -= dqdci; // dwdot[CH3]/d[C]
  J[286] += dqdci; // dwdot[C2H2]/d[C]
  // d()/d[CH3]
  dqdci = +k_f * sc[8];
  J[397] += dqdci; // dwdot[H]/d[CH3]
  J[404] -= dqdci; // dwdot[C]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[418] += dqdci; // dwdot[C2H2]/d[CH3]
  // d()/d[C2H2]
  dqdci = -k_r * sc[1];
  J[727] += dqdci; // dwdot[H]/d[C2H2]
  J[734] -= dqdci; // dwdot[C]/d[C2H2]
  J[738] -= dqdci; // dwdot[CH3]/d[C2H2]
  J[748] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1064] -= dqdT; // dwdot[C]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1078] += dqdT; // dwdot[C2H2]/dT

  // reaction 124: CH + O2 <=> HCO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[9];
  k_f = 33000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[16];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[9] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[9]) + (h_RT[2] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[9] -= q;  // CH
  wdot[16] += q; // HCO
  // d()/d[O]
  dqdci = -k_r * sc[16];
  J[68] += dqdci; // dwdot[O]/d[O]
  J[69] -= dqdci; // dwdot[O2]/d[O]
  J[75] -= dqdci; // dwdot[CH]/d[O]
  J[82] += dqdci; // dwdot[HCO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[9];
  J[101] += dqdci; // dwdot[O]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[108] -= dqdci; // dwdot[CH]/d[O2]
  J[115] += dqdci; // dwdot[HCO]/d[O2]
  // d()/d[CH]
  dqdci = +k_f * sc[3];
  J[299] += dqdci; // dwdot[O]/d[CH]
  J[300] -= dqdci; // dwdot[O2]/d[CH]
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[313] += dqdci; // dwdot[HCO]/d[CH]
  // d()/d[HCO]
  dqdci = -k_r * sc[2];
  J[530] += dqdci; // dwdot[O]/d[HCO]
  J[531] -= dqdci; // dwdot[O2]/d[HCO]
  J[537] -= dqdci; // dwdot[CH]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1058] += dqdT; // dwdot[O]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT

  // reaction 125: CH + H2 <=> CH2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[9];
  k_f = 110.7 * exp(1.79 * tc[0] - (840.371831893882) * invT);
  dlnkfdT = 1.79 * invT + (840.371831893882) * invT2;
  // reverse
  phi_r = sc[1] * sc[10];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[9]) + (h_RT[1] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[10] += q; // CH2
  // d()/d[H2]
  dqdci = +k_f * sc[9];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[9] -= dqdci;  // dwdot[CH]/d[H2]
  J[10] += dqdci; // dwdot[CH2]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[10];
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[34] += dqdci; // dwdot[H]/d[H]
  J[42] -= dqdci; // dwdot[CH]/d[H]
  J[43] += dqdci; // dwdot[CH2]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[0];
  J[297] -= dqdci; // dwdot[H2]/d[CH]
  J[298] += dqdci; // dwdot[H]/d[CH]
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[307] += dqdci; // dwdot[CH2]/d[CH]
  // d()/d[CH2]
  dqdci = -k_r * sc[1];
  J[330] -= dqdci; // dwdot[H2]/d[CH2]
  J[331] += dqdci; // dwdot[H]/d[CH2]
  J[339] -= dqdci; // dwdot[CH]/d[CH2]
  J[340] += dqdci; // dwdot[CH2]/d[CH2]
  // d()/dT
  J[1056] -= dqdT; // dwdot[H2]/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1066] += dqdT; // dwdot[CH2]/dT

  // reaction 126: CH + H2O <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[9];
  k_f = 5710000 * exp(-(-379.928582682563) * invT);
  dlnkfdT = (-379.928582682563) * invT2;
  // reverse
  phi_r = sc[1] * sc[17];
  Kc = exp(-g_RT[1] + g_RT[5] + g_RT[9] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[9]) + (h_RT[1] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[5] -= q;  // H2O
  wdot[9] -= q;  // CH
  wdot[17] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[17];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[38] -= dqdci; // dwdot[H2O]/d[H]
  J[42] -= dqdci; // dwdot[CH]/d[H]
  J[50] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * sc[9];
  J[166] += dqdci; // dwdot[H]/d[H2O]
  J[170] -= dqdci; // dwdot[H2O]/d[H2O]
  J[174] -= dqdci; // dwdot[CH]/d[H2O]
  J[182] += dqdci; // dwdot[CH2O]/d[H2O]
  // d()/d[CH]
  dqdci = +k_f * sc[5];
  J[298] += dqdci; // dwdot[H]/d[CH]
  J[302] -= dqdci; // dwdot[H2O]/d[CH]
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[314] += dqdci; // dwdot[CH2O]/d[CH]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[562] += dqdci; // dwdot[H]/d[CH2O]
  J[566] -= dqdci; // dwdot[H2O]/d[CH2O]
  J[570] -= dqdci; // dwdot[CH]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1061] -= dqdT; // dwdot[H2O]/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT

  // reaction 127: CH + CH2 <=> C2H2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[10];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[22];
  Kc = exp(-g_RT[1] + g_RT[9] + g_RT[10] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[10]) + (h_RT[1] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[10] -= q; // CH2
  wdot[22] += q; // C2H2
  // d()/d[H]
  dqdci = -k_r * sc[22];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[42] -= dqdci; // dwdot[CH]/d[H]
  J[43] -= dqdci; // dwdot[CH2]/d[H]
  J[55] += dqdci; // dwdot[C2H2]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[10];
  J[298] += dqdci; // dwdot[H]/d[CH]
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[307] -= dqdci; // dwdot[CH2]/d[CH]
  J[319] += dqdci; // dwdot[C2H2]/d[CH]
  // d()/d[CH2]
  dqdci = +k_f * sc[9];
  J[331] += dqdci; // dwdot[H]/d[CH2]
  J[339] -= dqdci; // dwdot[CH]/d[CH2]
  J[340] -= dqdci; // dwdot[CH2]/d[CH2]
  J[352] += dqdci; // dwdot[C2H2]/d[CH2]
  // d()/d[C2H2]
  dqdci = -k_r * sc[1];
  J[727] += dqdci; // dwdot[H]/d[C2H2]
  J[735] -= dqdci; // dwdot[CH]/d[C2H2]
  J[736] -= dqdci; // dwdot[CH2]/d[C2H2]
  J[748] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1078] += dqdT; // dwdot[C2H2]/dT

  // reaction 128: CH + CH3 <=> C2H3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[12];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[23];
  Kc = exp(-g_RT[1] + g_RT[9] + g_RT[12] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[12]) + (h_RT[1] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[12] -= q; // CH3
  wdot[23] += q; // C2H3
  // d()/d[H]
  dqdci = -k_r * sc[23];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[42] -= dqdci; // dwdot[CH]/d[H]
  J[45] -= dqdci; // dwdot[CH3]/d[H]
  J[56] += dqdci; // dwdot[C2H3]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[12];
  J[298] += dqdci; // dwdot[H]/d[CH]
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[309] -= dqdci; // dwdot[CH3]/d[CH]
  J[320] += dqdci; // dwdot[C2H3]/d[CH]
  // d()/d[CH3]
  dqdci = +k_f * sc[9];
  J[397] += dqdci; // dwdot[H]/d[CH3]
  J[405] -= dqdci; // dwdot[CH]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[419] += dqdci; // dwdot[C2H3]/d[CH3]
  // d()/d[C2H3]
  dqdci = -k_r * sc[1];
  J[760] += dqdci; // dwdot[H]/d[C2H3]
  J[768] -= dqdci; // dwdot[CH]/d[C2H3]
  J[771] -= dqdci; // dwdot[CH3]/d[C2H3]
  J[782] += dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1079] += dqdT; // dwdot[C2H3]/dT

  // reaction 129: CH + CH4 <=> C2H4 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[13];
  k_f = 60000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[24];
  Kc = exp(-g_RT[1] + g_RT[9] + g_RT[13] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[13]) + (h_RT[1] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[13] -= q; // CH4
  wdot[24] += q; // C2H4
  // d()/d[H]
  dqdci = -k_r * sc[24];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[42] -= dqdci; // dwdot[CH]/d[H]
  J[46] -= dqdci; // dwdot[CH4]/d[H]
  J[57] += dqdci; // dwdot[C2H4]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[13];
  J[298] += dqdci; // dwdot[H]/d[CH]
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[310] -= dqdci; // dwdot[CH4]/d[CH]
  J[321] += dqdci; // dwdot[C2H4]/d[CH]
  // d()/d[CH4]
  dqdci = +k_f * sc[9];
  J[430] += dqdci; // dwdot[H]/d[CH4]
  J[438] -= dqdci; // dwdot[CH]/d[CH4]
  J[442] -= dqdci; // dwdot[CH4]/d[CH4]
  J[453] += dqdci; // dwdot[C2H4]/d[CH4]
  // d()/d[C2H4]
  dqdci = -k_r * sc[1];
  J[793] += dqdci; // dwdot[H]/d[C2H4]
  J[801] -= dqdci; // dwdot[CH]/d[C2H4]
  J[805] -= dqdci; // dwdot[CH4]/d[C2H4]
  J[816] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1069] -= dqdT; // dwdot[CH4]/dT
  J[1080] += dqdT; // dwdot[C2H4]/dT

  // reaction 131: CH + CO2 <=> CO + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[15];
  k_f = 3400000 * exp(-(347.219499405257) * invT);
  dlnkfdT = (347.219499405257) * invT2;
  // reverse
  phi_r = sc[14] * sc[16];
  Kc = exp(g_RT[9] - g_RT[14] + g_RT[15] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[15]) + (h_RT[14] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH
  wdot[14] += q; // CO
  wdot[15] -= q; // CO2
  wdot[16] += q; // HCO
  // d()/d[CH]
  dqdci = +k_f * sc[15];
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[311] += dqdci; // dwdot[CO]/d[CH]
  J[312] -= dqdci; // dwdot[CO2]/d[CH]
  J[313] += dqdci; // dwdot[HCO]/d[CH]
  // d()/d[CO]
  dqdci = -k_r * sc[16];
  J[471] -= dqdci; // dwdot[CH]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[477] -= dqdci; // dwdot[CO2]/d[CO]
  J[478] += dqdci; // dwdot[HCO]/d[CO]
  // d()/d[CO2]
  dqdci = +k_f * sc[9];
  J[504] -= dqdci; // dwdot[CH]/d[CO2]
  J[509] += dqdci; // dwdot[CO]/d[CO2]
  J[510] -= dqdci; // dwdot[CO2]/d[CO2]
  J[511] += dqdci; // dwdot[HCO]/d[CO2]
  // d()/d[HCO]
  dqdci = -k_r * sc[14];
  J[537] -= dqdci; // dwdot[CH]/d[HCO]
  J[542] += dqdci; // dwdot[CO]/d[HCO]
  J[543] -= dqdci; // dwdot[CO2]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1071] -= dqdT; // dwdot[CO2]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT

  // reaction 132: CH + CH2O <=> CH2CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[17];
  k_f = 94600000 * exp(-(-259.156582889431) * invT);
  dlnkfdT = (-259.156582889431) * invT2;
  // reverse
  phi_r = sc[1] * sc[28];
  Kc = exp(-g_RT[1] + g_RT[9] + g_RT[17] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[17]) + (h_RT[1] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[17] -= q; // CH2O
  wdot[28] += q; // CH2CO
  // d()/d[H]
  dqdci = -k_r * sc[28];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[42] -= dqdci; // dwdot[CH]/d[H]
  J[50] -= dqdci; // dwdot[CH2O]/d[H]
  J[61] += dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[17];
  J[298] += dqdci; // dwdot[H]/d[CH]
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[314] -= dqdci; // dwdot[CH2O]/d[CH]
  J[325] += dqdci; // dwdot[CH2CO]/d[CH]
  // d()/d[CH2O]
  dqdci = +k_f * sc[9];
  J[562] += dqdci; // dwdot[H]/d[CH2O]
  J[570] -= dqdci; // dwdot[CH]/d[CH2O]
  J[578] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[589] += dqdci; // dwdot[CH2CO]/d[CH2O]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[1];
  J[925] += dqdci; // dwdot[H]/d[CH2CO]
  J[933] -= dqdci; // dwdot[CH]/d[CH2CO]
  J[941] -= dqdci; // dwdot[CH2O]/d[CH2CO]
  J[952] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1073] -= dqdT; // dwdot[CH2O]/dT
  J[1084] += dqdT; // dwdot[CH2CO]/dT

  // reaction 133: CH + HCCO <=> C2H2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[27];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[22];
  Kc = exp(g_RT[9] - g_RT[14] - g_RT[22] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[27]) + (h_RT[14] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH
  wdot[14] += q; // CO
  wdot[22] += q; // C2H2
  wdot[27] -= q; // HCCO
  // d()/d[CH]
  dqdci = +k_f * sc[27];
  J[306] -= dqdci; // dwdot[CH]/d[CH]
  J[311] += dqdci; // dwdot[CO]/d[CH]
  J[319] += dqdci; // dwdot[C2H2]/d[CH]
  J[324] -= dqdci; // dwdot[HCCO]/d[CH]
  // d()/d[CO]
  dqdci = -k_r * sc[22];
  J[471] -= dqdci; // dwdot[CH]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[484] += dqdci; // dwdot[C2H2]/d[CO]
  J[489] -= dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[C2H2]
  dqdci = -k_r * sc[14];
  J[735] -= dqdci; // dwdot[CH]/d[C2H2]
  J[740] += dqdci; // dwdot[CO]/d[C2H2]
  J[748] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[753] -= dqdci; // dwdot[HCCO]/d[C2H2]
  // d()/d[HCCO]
  dqdci = +k_f * sc[9];
  J[900] -= dqdci; // dwdot[CH]/d[HCCO]
  J[905] += dqdci; // dwdot[CO]/d[HCCO]
  J[913] += dqdci; // dwdot[C2H2]/d[HCCO]
  J[918] -= dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1065] -= dqdT; // dwdot[CH]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1078] += dqdT; // dwdot[C2H2]/dT
  J[1083] -= dqdT; // dwdot[HCCO]/dT

  // reaction 134: CH2 + O2 <=> HCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 13200000 * exp(-(754.82499870708) * invT);
  dlnkfdT = (754.82499870708) * invT2;
  // reverse
  phi_r = sc[4] * sc[16];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[10] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[10]) + (h_RT[4] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // OH
  wdot[10] -= q; // CH2
  wdot[16] += q; // HCO
  // d()/d[O2]
  dqdci = +k_f * sc[10];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[103] += dqdci; // dwdot[OH]/d[O2]
  J[109] -= dqdci; // dwdot[CH2]/d[O2]
  J[115] += dqdci; // dwdot[HCO]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[16];
  J[135] -= dqdci; // dwdot[O2]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[142] -= dqdci; // dwdot[CH2]/d[OH]
  J[148] += dqdci; // dwdot[HCO]/d[OH]
  // d()/d[CH2]
  dqdci = +k_f * sc[3];
  J[333] -= dqdci; // dwdot[O2]/d[CH2]
  J[334] += dqdci; // dwdot[OH]/d[CH2]
  J[340] -= dqdci; // dwdot[CH2]/d[CH2]
  J[346] += dqdci; // dwdot[HCO]/d[CH2]
  // d()/d[HCO]
  dqdci = -k_r * sc[4];
  J[531] -= dqdci; // dwdot[O2]/d[HCO]
  J[532] += dqdci; // dwdot[OH]/d[HCO]
  J[538] -= dqdci; // dwdot[CH2]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT

  // reaction 135: CH2 + H2 <=> CH3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[10];
  k_f = 0.5 * exp(2 * tc[0] - (3638.25649376812) * invT);
  dlnkfdT = 2 * invT + (3638.25649376812) * invT2;
  // reverse
  phi_r = sc[1] * sc[12];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[10] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[10]) + (h_RT[1] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[10] -= q; // CH2
  wdot[12] += q; // CH3
  // d()/d[H2]
  dqdci = +k_f * sc[10];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[10] -= dqdci; // dwdot[CH2]/d[H2]
  J[12] += dqdci; // dwdot[CH3]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[12];
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[34] += dqdci; // dwdot[H]/d[H]
  J[43] -= dqdci; // dwdot[CH2]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH2]
  dqdci = +k_f * sc[0];
  J[330] -= dqdci; // dwdot[H2]/d[CH2]
  J[331] += dqdci; // dwdot[H]/d[CH2]
  J[340] -= dqdci; // dwdot[CH2]/d[CH2]
  J[342] += dqdci; // dwdot[CH3]/d[CH2]
  // d()/d[CH3]
  dqdci = -k_r * sc[1];
  J[396] -= dqdci; // dwdot[H2]/d[CH3]
  J[397] += dqdci; // dwdot[H]/d[CH3]
  J[406] -= dqdci; // dwdot[CH2]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1056] -= dqdT; // dwdot[H2]/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT

  // reaction 136: 2 CH2 <=> C2H2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 32000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[22];
  Kc = exp(-g_RT[0] + 2.000000 * g_RT[10] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[10]) + (h_RT[0] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;      // H2
  wdot[10] -= 2 * q; // CH2
  wdot[22] += q;     // C2H2
  // d()/d[H2]
  dqdci = -k_r * sc[22];
  J[0] += dqdci;       // dwdot[H2]/d[H2]
  J[10] += -2 * dqdci; // dwdot[CH2]/d[H2]
  J[22] += dqdci;      // dwdot[C2H2]/d[H2]
  // d()/d[CH2]
  dqdci = +k_f * 2.000000 * sc[10];
  J[330] += dqdci;      // dwdot[H2]/d[CH2]
  J[340] += -2 * dqdci; // dwdot[CH2]/d[CH2]
  J[352] += dqdci;      // dwdot[C2H2]/d[CH2]
  // d()/d[C2H2]
  dqdci = -k_r * sc[0];
  J[726] += dqdci;      // dwdot[H2]/d[C2H2]
  J[736] += -2 * dqdci; // dwdot[CH2]/d[C2H2]
  J[748] += dqdci;      // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1056] += dqdT;      // dwdot[H2]/dT
  J[1066] += -2 * dqdT; // dwdot[CH2]/dT
  J[1078] += dqdT;      // dwdot[C2H2]/dT

  // reaction 137: CH2 + CH3 <=> C2H4 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[12];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[24];
  Kc = exp(-g_RT[1] + g_RT[10] + g_RT[12] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[12]) + (h_RT[1] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[10] -= q; // CH2
  wdot[12] -= q; // CH3
  wdot[24] += q; // C2H4
  // d()/d[H]
  dqdci = -k_r * sc[24];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[43] -= dqdci; // dwdot[CH2]/d[H]
  J[45] -= dqdci; // dwdot[CH3]/d[H]
  J[57] += dqdci; // dwdot[C2H4]/d[H]
  // d()/d[CH2]
  dqdci = +k_f * sc[12];
  J[331] += dqdci; // dwdot[H]/d[CH2]
  J[340] -= dqdci; // dwdot[CH2]/d[CH2]
  J[342] -= dqdci; // dwdot[CH3]/d[CH2]
  J[354] += dqdci; // dwdot[C2H4]/d[CH2]
  // d()/d[CH3]
  dqdci = +k_f * sc[10];
  J[397] += dqdci; // dwdot[H]/d[CH3]
  J[406] -= dqdci; // dwdot[CH2]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[420] += dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[1];
  J[793] += dqdci; // dwdot[H]/d[C2H4]
  J[802] -= dqdci; // dwdot[CH2]/d[C2H4]
  J[804] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[816] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1080] += dqdT; // dwdot[C2H4]/dT

  // reaction 138: CH2 + CH4 <=> 2 CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[13];
  k_f = 2.46 * exp(2 * tc[0] - (4161.60182620503) * invT);
  dlnkfdT = 2 * invT + (4161.60182620503) * invT2;
  // reverse
  phi_r = (sc[12] * sc[12]);
  Kc = exp(g_RT[10] - 2.000000 * g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[13]) + (2.000000 * h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q;     // CH2
  wdot[12] += 2 * q; // CH3
  wdot[13] -= q;     // CH4
  // d()/d[CH2]
  dqdci = +k_f * sc[13];
  J[340] -= dqdci;     // dwdot[CH2]/d[CH2]
  J[342] += 2 * dqdci; // dwdot[CH3]/d[CH2]
  J[343] -= dqdci;     // dwdot[CH4]/d[CH2]
  // d()/d[CH3]
  dqdci = -k_r * 2.000000 * sc[12];
  J[406] -= dqdci;     // dwdot[CH2]/d[CH3]
  J[408] += 2 * dqdci; // dwdot[CH3]/d[CH3]
  J[409] -= dqdci;     // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[10];
  J[439] -= dqdci;     // dwdot[CH2]/d[CH4]
  J[441] += 2 * dqdci; // dwdot[CH3]/d[CH4]
  J[442] -= dqdci;     // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1066] -= dqdT;     // dwdot[CH2]/dT
  J[1068] += 2 * dqdT; // dwdot[CH3]/dT
  J[1069] -= dqdT;     // dwdot[CH4]/dT

  // reaction 140: CH2 + HCCO <=> C2H3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[27];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[23];
  Kc = exp(g_RT[10] - g_RT[14] - g_RT[23] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[27]) + (h_RT[14] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // CH2
  wdot[14] += q; // CO
  wdot[23] += q; // C2H3
  wdot[27] -= q; // HCCO
  // d()/d[CH2]
  dqdci = +k_f * sc[27];
  J[340] -= dqdci; // dwdot[CH2]/d[CH2]
  J[344] += dqdci; // dwdot[CO]/d[CH2]
  J[353] += dqdci; // dwdot[C2H3]/d[CH2]
  J[357] -= dqdci; // dwdot[HCCO]/d[CH2]
  // d()/d[CO]
  dqdci = -k_r * sc[23];
  J[472] -= dqdci; // dwdot[CH2]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[485] += dqdci; // dwdot[C2H3]/d[CO]
  J[489] -= dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[C2H3]
  dqdci = -k_r * sc[14];
  J[769] -= dqdci; // dwdot[CH2]/d[C2H3]
  J[773] += dqdci; // dwdot[CO]/d[C2H3]
  J[782] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[786] -= dqdci; // dwdot[HCCO]/d[C2H3]
  // d()/d[HCCO]
  dqdci = +k_f * sc[10];
  J[901] -= dqdci; // dwdot[CH2]/d[HCCO]
  J[905] += dqdci; // dwdot[CO]/d[HCCO]
  J[914] += dqdci; // dwdot[C2H3]/d[HCCO]
  J[918] -= dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1066] -= dqdT; // dwdot[CH2]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1079] += dqdT; // dwdot[C2H3]/dT
  J[1083] -= dqdT; // dwdot[HCCO]/dT

  // reaction 141: CH2(S) + N2 <=> CH2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[30];
  k_f = 15000000 * exp(-(301.929999482832) * invT);
  dlnkfdT = (301.929999482832) * invT2;
  // reverse
  phi_r = sc[10] * sc[30];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[30] - g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[30]) + (h_RT[10] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[11] -= q; // CH2(S)
  // d()/d[CH2]
  dqdci = -k_r * sc[30];
  J[340] += dqdci; // dwdot[CH2]/d[CH2]
  J[341] -= dqdci; // dwdot[CH2(S)]/d[CH2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[30];
  J[373] += dqdci; // dwdot[CH2]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/d[N2]
  dqdci = +k_f * sc[11] - k_r * sc[10];
  J[1000] += dqdci; // dwdot[CH2]/d[N2]
  J[1001] -= dqdci; // dwdot[CH2(S)]/d[N2]
  // d()/dT
  J[1066] += dqdT; // dwdot[CH2]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 142: AR + CH2(S) <=> AR + CH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[31];
  k_f = 9000000 * exp(-(301.929999482832) * invT);
  dlnkfdT = (301.929999482832) * invT2;
  // reverse
  phi_r = sc[10] * sc[31];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[31] - g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[31]) + (h_RT[10] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[11] -= q; // CH2(S)
  // d()/d[CH2]
  dqdci = -k_r * sc[31];
  J[340] += dqdci; // dwdot[CH2]/d[CH2]
  J[341] -= dqdci; // dwdot[CH2(S)]/d[CH2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[31];
  J[373] += dqdci; // dwdot[CH2]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/d[AR]
  dqdci = +k_f * sc[11] - k_r * sc[10];
  J[1033] += dqdci; // dwdot[CH2]/d[AR]
  J[1034] -= dqdci; // dwdot[CH2(S)]/d[AR]
  // d()/dT
  J[1066] += dqdT; // dwdot[CH2]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 143: CH2(S) + O2 <=> CO + H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[11];
  k_f = 28000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[4] * sc[14];
  Kc = refC * exp(-g_RT[1] + g_RT[3] - g_RT[4] + g_RT[11] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[3] + h_RT[11]) + (h_RT[1] + h_RT[4] + h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // O2
  wdot[4] += q;  // OH
  wdot[11] -= q; // CH2(S)
  wdot[14] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[4] * sc[14];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[36] -= dqdci; // dwdot[O2]/d[H]
  J[37] += dqdci; // dwdot[OH]/d[H]
  J[44] -= dqdci; // dwdot[CH2(S)]/d[H]
  J[47] += dqdci; // dwdot[CO]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[11];
  J[100] += dqdci; // dwdot[H]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[103] += dqdci; // dwdot[OH]/d[O2]
  J[110] -= dqdci; // dwdot[CH2(S)]/d[O2]
  J[113] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[1] * sc[14];
  J[133] += dqdci; // dwdot[H]/d[OH]
  J[135] -= dqdci; // dwdot[O2]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[143] -= dqdci; // dwdot[CH2(S)]/d[OH]
  J[146] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[3];
  J[364] += dqdci; // dwdot[H]/d[CH2(S)]
  J[366] -= dqdci; // dwdot[O2]/d[CH2(S)]
  J[367] += dqdci; // dwdot[OH]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[377] += dqdci; // dwdot[CO]/d[CH2(S)]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * sc[4];
  J[463] += dqdci; // dwdot[H]/d[CO]
  J[465] -= dqdci; // dwdot[O2]/d[CO]
  J[466] += dqdci; // dwdot[OH]/d[CO]
  J[473] -= dqdci; // dwdot[CH2(S)]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT
  J[1070] += dqdT; // dwdot[CO]/dT

  // reaction 144: CH2(S) + O2 <=> CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[11];
  k_f = 12000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[14];
  Kc = exp(g_RT[3] - g_RT[5] + g_RT[11] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[11]) + (h_RT[5] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[5] += q;  // H2O
  wdot[11] -= q; // CH2(S)
  wdot[14] += q; // CO
  // d()/d[O2]
  dqdci = +k_f * sc[11];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[104] += dqdci; // dwdot[H2O]/d[O2]
  J[110] -= dqdci; // dwdot[CH2(S)]/d[O2]
  J[113] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[H2O]
  dqdci = -k_r * sc[14];
  J[168] -= dqdci; // dwdot[O2]/d[H2O]
  J[170] += dqdci; // dwdot[H2O]/d[H2O]
  J[176] -= dqdci; // dwdot[CH2(S)]/d[H2O]
  J[179] += dqdci; // dwdot[CO]/d[H2O]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[3];
  J[366] -= dqdci; // dwdot[O2]/d[CH2(S)]
  J[368] += dqdci; // dwdot[H2O]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[377] += dqdci; // dwdot[CO]/d[CH2(S)]
  // d()/d[CO]
  dqdci = -k_r * sc[5];
  J[465] -= dqdci; // dwdot[O2]/d[CO]
  J[467] += dqdci; // dwdot[H2O]/d[CO]
  J[473] -= dqdci; // dwdot[CH2(S)]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1061] += dqdT; // dwdot[H2O]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT
  J[1070] += dqdT; // dwdot[CO]/dT

  // reaction 145: CH2(S) + H2 <=> CH3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[11];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[12];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[11]) + (h_RT[1] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[11] -= q; // CH2(S)
  wdot[12] += q; // CH3
  // d()/d[H2]
  dqdci = +k_f * sc[11];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[11] -= dqdci; // dwdot[CH2(S)]/d[H2]
  J[12] += dqdci; // dwdot[CH3]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[12];
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[34] += dqdci; // dwdot[H]/d[H]
  J[44] -= dqdci; // dwdot[CH2(S)]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[0];
  J[363] -= dqdci; // dwdot[H2]/d[CH2(S)]
  J[364] += dqdci; // dwdot[H]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[375] += dqdci; // dwdot[CH3]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = -k_r * sc[1];
  J[396] -= dqdci; // dwdot[H2]/d[CH3]
  J[397] += dqdci; // dwdot[H]/d[CH3]
  J[407] -= dqdci; // dwdot[CH2(S)]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1056] -= dqdT; // dwdot[H2]/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT

  // reaction 147: CH2(S) + H2O <=> CH2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[11];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[10];
  Kc = exp(g_RT[5] - g_RT[5] - g_RT[10] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[11]) + (h_RT[5] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[11] -= q; // CH2(S)
  // d()/d[H2O]
  dqdci = +k_f * sc[11] - k_r * sc[10];
  J[175] += dqdci; // dwdot[CH2]/d[H2O]
  J[176] -= dqdci; // dwdot[CH2(S)]/d[H2O]
  // d()/d[CH2]
  dqdci = -k_r * sc[5];
  J[340] += dqdci; // dwdot[CH2]/d[CH2]
  J[341] -= dqdci; // dwdot[CH2(S)]/d[CH2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[5];
  J[373] += dqdci; // dwdot[CH2]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/dT
  J[1066] += dqdT; // dwdot[CH2]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 148: CH2(S) + CH3 <=> C2H4 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[12];
  k_f = 12000000 * exp(-(-286.83349950869) * invT);
  dlnkfdT = (-286.83349950869) * invT2;
  // reverse
  phi_r = sc[1] * sc[24];
  Kc = exp(-g_RT[1] + g_RT[11] + g_RT[12] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[12]) + (h_RT[1] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[11] -= q; // CH2(S)
  wdot[12] -= q; // CH3
  wdot[24] += q; // C2H4
  // d()/d[H]
  dqdci = -k_r * sc[24];
  J[34] += dqdci; // dwdot[H]/d[H]
  J[44] -= dqdci; // dwdot[CH2(S)]/d[H]
  J[45] -= dqdci; // dwdot[CH3]/d[H]
  J[57] += dqdci; // dwdot[C2H4]/d[H]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[12];
  J[364] += dqdci; // dwdot[H]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[375] -= dqdci; // dwdot[CH3]/d[CH2(S)]
  J[387] += dqdci; // dwdot[C2H4]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = +k_f * sc[11];
  J[397] += dqdci; // dwdot[H]/d[CH3]
  J[407] -= dqdci; // dwdot[CH2(S)]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[420] += dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[1];
  J[793] += dqdci; // dwdot[H]/d[C2H4]
  J[803] -= dqdci; // dwdot[CH2(S)]/d[C2H4]
  J[804] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[816] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1080] += dqdT; // dwdot[C2H4]/dT

  // reaction 149: CH2(S) + CH4 <=> 2 CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[13];
  k_f = 16000000 * exp(-(-286.83349950869) * invT);
  dlnkfdT = (-286.83349950869) * invT2;
  // reverse
  phi_r = (sc[12] * sc[12]);
  Kc = exp(g_RT[11] - 2.000000 * g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[13]) + (2.000000 * h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q;     // CH2(S)
  wdot[12] += 2 * q; // CH3
  wdot[13] -= q;     // CH4
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[13];
  J[374] -= dqdci;     // dwdot[CH2(S)]/d[CH2(S)]
  J[375] += 2 * dqdci; // dwdot[CH3]/d[CH2(S)]
  J[376] -= dqdci;     // dwdot[CH4]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = -k_r * 2.000000 * sc[12];
  J[407] -= dqdci;     // dwdot[CH2(S)]/d[CH3]
  J[408] += 2 * dqdci; // dwdot[CH3]/d[CH3]
  J[409] -= dqdci;     // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[11];
  J[440] -= dqdci;     // dwdot[CH2(S)]/d[CH4]
  J[441] += 2 * dqdci; // dwdot[CH3]/d[CH4]
  J[442] -= dqdci;     // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1067] -= dqdT;     // dwdot[CH2(S)]/dT
  J[1068] += 2 * dqdT; // dwdot[CH3]/dT
  J[1069] -= dqdT;     // dwdot[CH4]/dT

  // reaction 150: CH2(S) + CO <=> CH2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[14];
  k_f = 9000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[14];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[14] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[14]) + (h_RT[10] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[11] -= q; // CH2(S)
  // d()/d[CH2]
  dqdci = -k_r * sc[14];
  J[340] += dqdci; // dwdot[CH2]/d[CH2]
  J[341] -= dqdci; // dwdot[CH2(S)]/d[CH2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[14];
  J[373] += dqdci; // dwdot[CH2]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/d[CO]
  dqdci = +k_f * sc[11] - k_r * sc[10];
  J[472] += dqdci; // dwdot[CH2]/d[CO]
  J[473] -= dqdci; // dwdot[CH2(S)]/d[CO]
  // d()/dT
  J[1066] += dqdT; // dwdot[CH2]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 151: CH2(S) + CO2 <=> CH2 + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[15];
  k_f = 7000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[15];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[15] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[15]) + (h_RT[10] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[11] -= q; // CH2(S)
  // d()/d[CH2]
  dqdci = -k_r * sc[15];
  J[340] += dqdci; // dwdot[CH2]/d[CH2]
  J[341] -= dqdci; // dwdot[CH2(S)]/d[CH2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[15];
  J[373] += dqdci; // dwdot[CH2]/d[CH2(S)]
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/d[CO2]
  dqdci = +k_f * sc[11] - k_r * sc[10];
  J[505] += dqdci; // dwdot[CH2]/d[CO2]
  J[506] -= dqdci; // dwdot[CH2(S)]/d[CO2]
  // d()/dT
  J[1066] += dqdT; // dwdot[CH2]/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 152: CH2(S) + CO2 <=> CH2O + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[15];
  k_f = 14000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[17];
  Kc = exp(g_RT[11] - g_RT[14] + g_RT[15] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[15]) + (h_RT[14] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // CH2(S)
  wdot[14] += q; // CO
  wdot[15] -= q; // CO2
  wdot[17] += q; // CH2O
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[15];
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[377] += dqdci; // dwdot[CO]/d[CH2(S)]
  J[378] -= dqdci; // dwdot[CO2]/d[CH2(S)]
  J[380] += dqdci; // dwdot[CH2O]/d[CH2(S)]
  // d()/d[CO]
  dqdci = -k_r * sc[17];
  J[473] -= dqdci; // dwdot[CH2(S)]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[477] -= dqdci; // dwdot[CO2]/d[CO]
  J[479] += dqdci; // dwdot[CH2O]/d[CO]
  // d()/d[CO2]
  dqdci = +k_f * sc[11];
  J[506] -= dqdci; // dwdot[CH2(S)]/d[CO2]
  J[509] += dqdci; // dwdot[CO]/d[CO2]
  J[510] -= dqdci; // dwdot[CO2]/d[CO2]
  J[512] += dqdci; // dwdot[CH2O]/d[CO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[14];
  J[572] -= dqdci; // dwdot[CH2(S)]/d[CH2O]
  J[575] += dqdci; // dwdot[CO]/d[CH2O]
  J[576] -= dqdci; // dwdot[CO2]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1071] -= dqdT; // dwdot[CO2]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT

  // reaction 153: C2H6 + CH2(S) <=> C2H5 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[26];
  k_f = 40000000 * exp(-(-276.769166192596) * invT);
  dlnkfdT = (-276.769166192596) * invT2;
  // reverse
  phi_r = sc[12] * sc[25];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[26]) + (h_RT[12] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // CH2(S)
  wdot[12] += q; // CH3
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[26];
  J[374] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[375] += dqdci; // dwdot[CH3]/d[CH2(S)]
  J[388] += dqdci; // dwdot[C2H5]/d[CH2(S)]
  J[389] -= dqdci; // dwdot[C2H6]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = -k_r * sc[25];
  J[407] -= dqdci; // dwdot[CH2(S)]/d[CH3]
  J[408] += dqdci; // dwdot[CH3]/d[CH3]
  J[421] += dqdci; // dwdot[C2H5]/d[CH3]
  J[422] -= dqdci; // dwdot[C2H6]/d[CH3]
  // d()/d[C2H5]
  dqdci = -k_r * sc[12];
  J[836] -= dqdci; // dwdot[CH2(S)]/d[C2H5]
  J[837] += dqdci; // dwdot[CH3]/d[C2H5]
  J[850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[11];
  J[869] -= dqdci; // dwdot[CH2(S)]/d[C2H6]
  J[870] += dqdci; // dwdot[CH3]/d[C2H6]
  J[883] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[884] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1067] -= dqdT; // dwdot[CH2(S)]/dT
  J[1068] += dqdT; // dwdot[CH3]/dT
  J[1081] += dqdT; // dwdot[C2H5]/dT
  J[1082] -= dqdT; // dwdot[C2H6]/dT

  // reaction 154: CH3 + O2 <=> CH3O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[12];
  k_f = 26750000 * exp(-(14492.6399751759) * invT);
  dlnkfdT = (14492.6399751759) * invT2;
  // reverse
  phi_r = sc[2] * sc[19];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[12] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[12]) + (h_RT[2] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[12] -= q; // CH3
  wdot[19] += q; // CH3O
  // d()/d[O]
  dqdci = -k_r * sc[19];
  J[68] += dqdci; // dwdot[O]/d[O]
  J[69] -= dqdci; // dwdot[O2]/d[O]
  J[78] -= dqdci; // dwdot[CH3]/d[O]
  J[85] += dqdci; // dwdot[CH3O]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[12];
  J[101] += dqdci; // dwdot[O]/d[O2]
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[111] -= dqdci; // dwdot[CH3]/d[O2]
  J[118] += dqdci; // dwdot[CH3O]/d[O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[3];
  J[398] += dqdci; // dwdot[O]/d[CH3]
  J[399] -= dqdci; // dwdot[O2]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[415] += dqdci; // dwdot[CH3O]/d[CH3]
  // d()/d[CH3O]
  dqdci = -k_r * sc[2];
  J[629] += dqdci; // dwdot[O]/d[CH3O]
  J[630] -= dqdci; // dwdot[O2]/d[CH3O]
  J[639] -= dqdci; // dwdot[CH3]/d[CH3O]
  J[646] += dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1058] += dqdT; // dwdot[O]/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1075] += dqdT; // dwdot[CH3O]/dT

  // reaction 155: CH3 + O2 <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[12];
  k_f = 36000 * exp(-(4498.75699229419) * invT);
  dlnkfdT = (4498.75699229419) * invT2;
  // reverse
  phi_r = sc[4] * sc[17];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[12] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[12]) + (h_RT[4] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // OH
  wdot[12] -= q; // CH3
  wdot[17] += q; // CH2O
  // d()/d[O2]
  dqdci = +k_f * sc[12];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[103] += dqdci; // dwdot[OH]/d[O2]
  J[111] -= dqdci; // dwdot[CH3]/d[O2]
  J[116] += dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[135] -= dqdci; // dwdot[O2]/d[OH]
  J[136] += dqdci; // dwdot[OH]/d[OH]
  J[144] -= dqdci; // dwdot[CH3]/d[OH]
  J[149] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH3]
  dqdci = +k_f * sc[3];
  J[399] -= dqdci; // dwdot[O2]/d[CH3]
  J[400] += dqdci; // dwdot[OH]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[413] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[4];
  J[564] -= dqdci; // dwdot[O2]/d[CH2O]
  J[565] += dqdci; // dwdot[OH]/d[CH2O]
  J[573] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1060] += dqdT; // dwdot[OH]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT

  // reaction 156: CH3 + H2O2 <=> CH4 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[12];
  k_f = 0.0245 * exp(2.47 * tc[0] - (2606.66232886845) * invT);
  dlnkfdT = 2.47 * invT + (2606.66232886845) * invT2;
  // reverse
  phi_r = sc[6] * sc[13];
  Kc = exp(-g_RT[6] + g_RT[7] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[12]) + (h_RT[6] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  // d()/d[HO2]
  dqdci = -k_r * sc[13];
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  J[205] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[210] -= dqdci; // dwdot[CH3]/d[HO2]
  J[211] += dqdci; // dwdot[CH4]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[12];
  J[237] += dqdci; // dwdot[HO2]/d[H2O2]
  J[238] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[243] -= dqdci; // dwdot[CH3]/d[H2O2]
  J[244] += dqdci; // dwdot[CH4]/d[H2O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[7];
  J[402] += dqdci; // dwdot[HO2]/d[CH3]
  J[403] -= dqdci; // dwdot[H2O2]/d[CH3]
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[409] += dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[6];
  J[435] += dqdci; // dwdot[HO2]/d[CH4]
  J[436] -= dqdci; // dwdot[H2O2]/d[CH4]
  J[441] -= dqdci; // dwdot[CH3]/d[CH4]
  J[442] += dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1062] += dqdT; // dwdot[HO2]/dT
  J[1063] -= dqdT; // dwdot[H2O2]/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1069] += dqdT; // dwdot[CH4]/dT

  // reaction 158: 2 CH3 <=> C2H5 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[12] * sc[12]);
  k_f = 4990000 * exp(0.1 * tc[0] - (5334.09665753003) * invT);
  dlnkfdT = 0.1 * invT + (5334.09665753003) * invT2;
  // reverse
  phi_r = sc[1] * sc[25];
  Kc = exp(-g_RT[1] + 2.000000 * g_RT[12] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[12]) + (h_RT[1] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;      // H
  wdot[12] -= 2 * q; // CH3
  wdot[25] += q;     // C2H5
  // d()/d[H]
  dqdci = -k_r * sc[25];
  J[34] += dqdci;      // dwdot[H]/d[H]
  J[45] += -2 * dqdci; // dwdot[CH3]/d[H]
  J[58] += dqdci;      // dwdot[C2H5]/d[H]
  // d()/d[CH3]
  dqdci = +k_f * 2.000000 * sc[12];
  J[397] += dqdci;      // dwdot[H]/d[CH3]
  J[408] += -2 * dqdci; // dwdot[CH3]/d[CH3]
  J[421] += dqdci;      // dwdot[C2H5]/d[CH3]
  // d()/d[C2H5]
  dqdci = -k_r * sc[1];
  J[826] += dqdci;      // dwdot[H]/d[C2H5]
  J[837] += -2 * dqdci; // dwdot[CH3]/d[C2H5]
  J[850] += dqdci;      // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1057] += dqdT;      // dwdot[H]/dT
  J[1068] += -2 * dqdT; // dwdot[CH3]/dT
  J[1081] += dqdT;      // dwdot[C2H5]/dT

  // reaction 159: CH3 + HCO <=> CH4 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[16];
  k_f = 26480000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[13] * sc[14];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[16]) + (h_RT[13] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[CH3]
  dqdci = +k_f * sc[16];
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[409] += dqdci; // dwdot[CH4]/d[CH3]
  J[410] += dqdci; // dwdot[CO]/d[CH3]
  J[412] -= dqdci; // dwdot[HCO]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[14];
  J[441] -= dqdci; // dwdot[CH3]/d[CH4]
  J[442] += dqdci; // dwdot[CH4]/d[CH4]
  J[443] += dqdci; // dwdot[CO]/d[CH4]
  J[445] -= dqdci; // dwdot[HCO]/d[CH4]
  // d()/d[CO]
  dqdci = -k_r * sc[13];
  J[474] -= dqdci; // dwdot[CH3]/d[CO]
  J[475] += dqdci; // dwdot[CH4]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[478] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[12];
  J[540] -= dqdci; // dwdot[CH3]/d[HCO]
  J[541] += dqdci; // dwdot[CH4]/d[HCO]
  J[542] += dqdci; // dwdot[CO]/d[HCO]
  J[544] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1069] += dqdT; // dwdot[CH4]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1072] -= dqdT; // dwdot[HCO]/dT

  // reaction 160: CH2O + CH3 <=> CH4 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[17];
  k_f = 0.00332 * exp(2.81 * tc[0] - (2948.84966161566) * invT);
  dlnkfdT = 2.81 * invT + (2948.84966161566) * invT2;
  // reverse
  phi_r = sc[13] * sc[16];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[17]) + (h_RT[13] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[CH3]
  dqdci = +k_f * sc[17];
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[409] += dqdci; // dwdot[CH4]/d[CH3]
  J[412] += dqdci; // dwdot[HCO]/d[CH3]
  J[413] -= dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[16];
  J[441] -= dqdci; // dwdot[CH3]/d[CH4]
  J[442] += dqdci; // dwdot[CH4]/d[CH4]
  J[445] += dqdci; // dwdot[HCO]/d[CH4]
  J[446] -= dqdci; // dwdot[CH2O]/d[CH4]
  // d()/d[HCO]
  dqdci = -k_r * sc[13];
  J[540] -= dqdci; // dwdot[CH3]/d[HCO]
  J[541] += dqdci; // dwdot[CH4]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  J[545] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[12];
  J[573] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[574] += dqdci; // dwdot[CH4]/d[CH2O]
  J[577] += dqdci; // dwdot[HCO]/d[CH2O]
  J[578] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1069] += dqdT; // dwdot[CH4]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT
  J[1073] -= dqdT; // dwdot[CH2O]/dT

  // reaction 161: CH3 + CH3OH <=> CH2OH + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[20];
  k_f = 30 * exp(1.5 * tc[0] - (5001.97365809891) * invT);
  dlnkfdT = 1.5 * invT + (5001.97365809891) * invT2;
  // reverse
  phi_r = sc[13] * sc[18];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[20]) + (h_RT[13] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  // d()/d[CH3]
  dqdci = +k_f * sc[20];
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[409] += dqdci; // dwdot[CH4]/d[CH3]
  J[414] += dqdci; // dwdot[CH2OH]/d[CH3]
  J[416] -= dqdci; // dwdot[CH3OH]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[18];
  J[441] -= dqdci; // dwdot[CH3]/d[CH4]
  J[442] += dqdci; // dwdot[CH4]/d[CH4]
  J[447] += dqdci; // dwdot[CH2OH]/d[CH4]
  J[449] -= dqdci; // dwdot[CH3OH]/d[CH4]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[13];
  J[606] -= dqdci; // dwdot[CH3]/d[CH2OH]
  J[607] += dqdci; // dwdot[CH4]/d[CH2OH]
  J[612] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[614] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[12];
  J[672] -= dqdci; // dwdot[CH3]/d[CH3OH]
  J[673] += dqdci; // dwdot[CH4]/d[CH3OH]
  J[678] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[680] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1069] += dqdT; // dwdot[CH4]/dT
  J[1074] += dqdT; // dwdot[CH2OH]/dT
  J[1076] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 162: CH3 + CH3OH <=> CH3O + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[20];
  k_f = 10 * exp(1.5 * tc[0] - (5001.97365809891) * invT);
  dlnkfdT = 1.5 * invT + (5001.97365809891) * invT2;
  // reverse
  phi_r = sc[13] * sc[19];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[20]) + (h_RT[13] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  // d()/d[CH3]
  dqdci = +k_f * sc[20];
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[409] += dqdci; // dwdot[CH4]/d[CH3]
  J[415] += dqdci; // dwdot[CH3O]/d[CH3]
  J[416] -= dqdci; // dwdot[CH3OH]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[19];
  J[441] -= dqdci; // dwdot[CH3]/d[CH4]
  J[442] += dqdci; // dwdot[CH4]/d[CH4]
  J[448] += dqdci; // dwdot[CH3O]/d[CH4]
  J[449] -= dqdci; // dwdot[CH3OH]/d[CH4]
  // d()/d[CH3O]
  dqdci = -k_r * sc[13];
  J[639] -= dqdci; // dwdot[CH3]/d[CH3O]
  J[640] += dqdci; // dwdot[CH4]/d[CH3O]
  J[646] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[647] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[12];
  J[672] -= dqdci; // dwdot[CH3]/d[CH3OH]
  J[673] += dqdci; // dwdot[CH4]/d[CH3OH]
  J[679] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[680] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1069] += dqdT; // dwdot[CH4]/dT
  J[1075] += dqdT; // dwdot[CH3O]/dT
  J[1076] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 163: C2H4 + CH3 <=> C2H3 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[24];
  k_f = 0.227 * exp(2 * tc[0] - (4629.59332540342) * invT);
  dlnkfdT = 2 * invT + (4629.59332540342) * invT2;
  // reverse
  phi_r = sc[13] * sc[23];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[24]) + (h_RT[13] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[23] += q; // C2H3
  wdot[24] -= q; // C2H4
  // d()/d[CH3]
  dqdci = +k_f * sc[24];
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[409] += dqdci; // dwdot[CH4]/d[CH3]
  J[419] += dqdci; // dwdot[C2H3]/d[CH3]
  J[420] -= dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[23];
  J[441] -= dqdci; // dwdot[CH3]/d[CH4]
  J[442] += dqdci; // dwdot[CH4]/d[CH4]
  J[452] += dqdci; // dwdot[C2H3]/d[CH4]
  J[453] -= dqdci; // dwdot[C2H4]/d[CH4]
  // d()/d[C2H3]
  dqdci = -k_r * sc[13];
  J[771] -= dqdci; // dwdot[CH3]/d[C2H3]
  J[772] += dqdci; // dwdot[CH4]/d[C2H3]
  J[782] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[783] -= dqdci; // dwdot[C2H4]/d[C2H3]
  // d()/d[C2H4]
  dqdci = +k_f * sc[12];
  J[804] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[805] += dqdci; // dwdot[CH4]/d[C2H4]
  J[815] += dqdci; // dwdot[C2H3]/d[C2H4]
  J[816] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1069] += dqdT; // dwdot[CH4]/dT
  J[1079] += dqdT; // dwdot[C2H3]/dT
  J[1080] -= dqdT; // dwdot[C2H4]/dT

  // reaction 164: C2H6 + CH3 <=> C2H5 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[26];
  k_f = 6.14 * exp(1.74 * tc[0] - (5258.61415765932) * invT);
  dlnkfdT = 1.74 * invT + (5258.61415765932) * invT2;
  // reverse
  phi_r = sc[13] * sc[25];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[26]) + (h_RT[13] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  // d()/d[CH3]
  dqdci = +k_f * sc[26];
  J[408] -= dqdci; // dwdot[CH3]/d[CH3]
  J[409] += dqdci; // dwdot[CH4]/d[CH3]
  J[421] += dqdci; // dwdot[C2H5]/d[CH3]
  J[422] -= dqdci; // dwdot[C2H6]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[25];
  J[441] -= dqdci; // dwdot[CH3]/d[CH4]
  J[442] += dqdci; // dwdot[CH4]/d[CH4]
  J[454] += dqdci; // dwdot[C2H5]/d[CH4]
  J[455] -= dqdci; // dwdot[C2H6]/d[CH4]
  // d()/d[C2H5]
  dqdci = -k_r * sc[13];
  J[837] -= dqdci; // dwdot[CH3]/d[C2H5]
  J[838] += dqdci; // dwdot[CH4]/d[C2H5]
  J[850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[12];
  J[870] -= dqdci; // dwdot[CH3]/d[C2H6]
  J[871] += dqdci; // dwdot[CH4]/d[C2H6]
  J[883] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[884] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1068] -= dqdT; // dwdot[CH3]/dT
  J[1069] += dqdT; // dwdot[CH4]/dT
  J[1081] += dqdT; // dwdot[C2H5]/dT
  J[1082] -= dqdT; // dwdot[C2H6]/dT

  // reaction 167: HCO + O2 <=> CO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[16];
  k_f = 7600000 * exp(-(201.286666321888) * invT);
  dlnkfdT = (201.286666321888) * invT2;
  // reverse
  phi_r = sc[6] * sc[14];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[16]) + (h_RT[6] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[O2]
  dqdci = +k_f * sc[16];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[HO2]/d[O2]
  J[113] += dqdci; // dwdot[CO]/d[O2]
  J[115] -= dqdci; // dwdot[HCO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[14];
  J[201] -= dqdci; // dwdot[O2]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  J[212] += dqdci; // dwdot[CO]/d[HO2]
  J[214] -= dqdci; // dwdot[HCO]/d[HO2]
  // d()/d[CO]
  dqdci = -k_r * sc[6];
  J[465] -= dqdci; // dwdot[O2]/d[CO]
  J[468] += dqdci; // dwdot[HO2]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[478] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[3];
  J[531] -= dqdci; // dwdot[O2]/d[HCO]
  J[534] += dqdci; // dwdot[HO2]/d[HCO]
  J[542] += dqdci; // dwdot[CO]/d[HCO]
  J[544] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1072] -= dqdT; // dwdot[HCO]/dT

  // reaction 168: CH2OH + O2 <=> CH2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[18];
  k_f = 18000000 * exp(-(452.894999224248) * invT);
  dlnkfdT = (452.894999224248) * invT2;
  // reverse
  phi_r = sc[6] * sc[17];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[18]) + (h_RT[6] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[17] += q; // CH2O
  wdot[18] -= q; // CH2OH
  // d()/d[O2]
  dqdci = +k_f * sc[18];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[HO2]/d[O2]
  J[116] += dqdci; // dwdot[CH2O]/d[O2]
  J[117] -= dqdci; // dwdot[CH2OH]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[17];
  J[201] -= dqdci; // dwdot[O2]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  J[215] += dqdci; // dwdot[CH2O]/d[HO2]
  J[216] -= dqdci; // dwdot[CH2OH]/d[HO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[6];
  J[564] -= dqdci; // dwdot[O2]/d[CH2O]
  J[567] += dqdci; // dwdot[HO2]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[579] -= dqdci; // dwdot[CH2OH]/d[CH2O]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[3];
  J[597] -= dqdci; // dwdot[O2]/d[CH2OH]
  J[600] += dqdci; // dwdot[HO2]/d[CH2OH]
  J[611] += dqdci; // dwdot[CH2O]/d[CH2OH]
  J[612] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT
  J[1074] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 169: CH3O + O2 <=> CH2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[19];
  k_f = 4.28e-19 * exp(7.6 * tc[0] - (-1776.35483029066) * invT);
  dlnkfdT = 7.6 * invT + (-1776.35483029066) * invT2;
  // reverse
  phi_r = sc[6] * sc[17];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[17] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[19]) + (h_RT[6] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[17] += q; // CH2O
  wdot[19] -= q; // CH3O
  // d()/d[O2]
  dqdci = +k_f * sc[19];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[HO2]/d[O2]
  J[116] += dqdci; // dwdot[CH2O]/d[O2]
  J[118] -= dqdci; // dwdot[CH3O]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[17];
  J[201] -= dqdci; // dwdot[O2]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  J[215] += dqdci; // dwdot[CH2O]/d[HO2]
  J[217] -= dqdci; // dwdot[CH3O]/d[HO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[6];
  J[564] -= dqdci; // dwdot[O2]/d[CH2O]
  J[567] += dqdci; // dwdot[HO2]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[580] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[3];
  J[630] -= dqdci; // dwdot[O2]/d[CH3O]
  J[633] += dqdci; // dwdot[HO2]/d[CH3O]
  J[644] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[646] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT
  J[1075] -= dqdT; // dwdot[CH3O]/dT

  // reaction 170: C2H + O2 <=> CO + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[21];
  k_f = 50000000 * exp(-(754.82499870708) * invT);
  dlnkfdT = (754.82499870708) * invT2;
  // reverse
  phi_r = sc[14] * sc[16];
  Kc = exp(g_RT[3] - g_RT[14] - g_RT[16] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[21]) + (h_RT[14] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[14] += q; // CO
  wdot[16] += q; // HCO
  wdot[21] -= q; // C2H
  // d()/d[O2]
  dqdci = +k_f * sc[21];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[113] += dqdci; // dwdot[CO]/d[O2]
  J[115] += dqdci; // dwdot[HCO]/d[O2]
  J[120] -= dqdci; // dwdot[C2H]/d[O2]
  // d()/d[CO]
  dqdci = -k_r * sc[16];
  J[465] -= dqdci; // dwdot[O2]/d[CO]
  J[476] += dqdci; // dwdot[CO]/d[CO]
  J[478] += dqdci; // dwdot[HCO]/d[CO]
  J[483] -= dqdci; // dwdot[C2H]/d[CO]
  // d()/d[HCO]
  dqdci = -k_r * sc[14];
  J[531] -= dqdci; // dwdot[O2]/d[HCO]
  J[542] += dqdci; // dwdot[CO]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  J[549] -= dqdci; // dwdot[C2H]/d[HCO]
  // d()/d[C2H]
  dqdci = +k_f * sc[3];
  J[696] -= dqdci; // dwdot[O2]/d[C2H]
  J[707] += dqdci; // dwdot[CO]/d[C2H]
  J[709] += dqdci; // dwdot[HCO]/d[C2H]
  J[714] -= dqdci; // dwdot[C2H]/d[C2H]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1070] += dqdT; // dwdot[CO]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT
  J[1077] -= dqdT; // dwdot[C2H]/dT

  // reaction 171: C2H + H2 <=> C2H2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[21];
  k_f = 0.407 * exp(2.4 * tc[0] - (100.643333160944) * invT);
  dlnkfdT = 2.4 * invT + (100.643333160944) * invT2;
  // reverse
  phi_r = sc[1] * sc[22];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[21] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[21]) + (h_RT[1] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[21] -= q; // C2H
  wdot[22] += q; // C2H2
  // d()/d[H2]
  dqdci = +k_f * sc[21];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[21] -= dqdci; // dwdot[C2H]/d[H2]
  J[22] += dqdci; // dwdot[C2H2]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[22];
  J[33] -= dqdci; // dwdot[H2]/d[H]
  J[34] += dqdci; // dwdot[H]/d[H]
  J[54] -= dqdci; // dwdot[C2H]/d[H]
  J[55] += dqdci; // dwdot[C2H2]/d[H]
  // d()/d[C2H]
  dqdci = +k_f * sc[0];
  J[693] -= dqdci; // dwdot[H2]/d[C2H]
  J[694] += dqdci; // dwdot[H]/d[C2H]
  J[714] -= dqdci; // dwdot[C2H]/d[C2H]
  J[715] += dqdci; // dwdot[C2H2]/d[C2H]
  // d()/d[C2H2]
  dqdci = -k_r * sc[1];
  J[726] -= dqdci; // dwdot[H2]/d[C2H2]
  J[727] += dqdci; // dwdot[H]/d[C2H2]
  J[747] -= dqdci; // dwdot[C2H]/d[C2H2]
  J[748] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1056] -= dqdT; // dwdot[H2]/dT
  J[1057] += dqdT; // dwdot[H]/dT
  J[1077] -= dqdT; // dwdot[C2H]/dT
  J[1078] += dqdT; // dwdot[C2H2]/dT

  // reaction 172: C2H3 + O2 <=> CH2O + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[23];
  k_f = 3980000 * exp(-(-120.771999793133) * invT);
  dlnkfdT = (-120.771999793133) * invT2;
  // reverse
  phi_r = sc[16] * sc[17];
  Kc = exp(g_RT[3] - g_RT[16] - g_RT[17] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[23]) + (h_RT[16] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[16] += q; // HCO
  wdot[17] += q; // CH2O
  wdot[23] -= q; // C2H3
  // d()/d[O2]
  dqdci = +k_f * sc[23];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[115] += dqdci; // dwdot[HCO]/d[O2]
  J[116] += dqdci; // dwdot[CH2O]/d[O2]
  J[122] -= dqdci; // dwdot[C2H3]/d[O2]
  // d()/d[HCO]
  dqdci = -k_r * sc[17];
  J[531] -= dqdci; // dwdot[O2]/d[HCO]
  J[544] += dqdci; // dwdot[HCO]/d[HCO]
  J[545] += dqdci; // dwdot[CH2O]/d[HCO]
  J[551] -= dqdci; // dwdot[C2H3]/d[HCO]
  // d()/d[CH2O]
  dqdci = -k_r * sc[16];
  J[564] -= dqdci; // dwdot[O2]/d[CH2O]
  J[577] += dqdci; // dwdot[HCO]/d[CH2O]
  J[578] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[584] -= dqdci; // dwdot[C2H3]/d[CH2O]
  // d()/d[C2H3]
  dqdci = +k_f * sc[3];
  J[762] -= dqdci; // dwdot[O2]/d[C2H3]
  J[775] += dqdci; // dwdot[HCO]/d[C2H3]
  J[776] += dqdci; // dwdot[CH2O]/d[C2H3]
  J[782] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1072] += dqdT; // dwdot[HCO]/dT
  J[1073] += dqdT; // dwdot[CH2O]/dT
  J[1079] -= dqdT; // dwdot[C2H3]/dT

  // reaction 174: C2H5 + O2 <=> C2H4 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[25];
  k_f = 840000 * exp(-(1949.96457999329) * invT);
  dlnkfdT = (1949.96457999329) * invT2;
  // reverse
  phi_r = sc[6] * sc[24];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[24] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[25]) + (h_RT[6] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[24] += q; // C2H4
  wdot[25] -= q; // C2H5
  // d()/d[O2]
  dqdci = +k_f * sc[25];
  J[102] -= dqdci; // dwdot[O2]/d[O2]
  J[105] += dqdci; // dwdot[HO2]/d[O2]
  J[123] += dqdci; // dwdot[C2H4]/d[O2]
  J[124] -= dqdci; // dwdot[C2H5]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[24];
  J[201] -= dqdci; // dwdot[O2]/d[HO2]
  J[204] += dqdci; // dwdot[HO2]/d[HO2]
  J[222] += dqdci; // dwdot[C2H4]/d[HO2]
  J[223] -= dqdci; // dwdot[C2H5]/d[HO2]
  // d()/d[C2H4]
  dqdci = -k_r * sc[6];
  J[795] -= dqdci; // dwdot[O2]/d[C2H4]
  J[798] += dqdci; // dwdot[HO2]/d[C2H4]
  J[816] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[817] -= dqdci; // dwdot[C2H5]/d[C2H4]
  // d()/d[C2H5]
  dqdci = +k_f * sc[3];
  J[828] -= dqdci; // dwdot[O2]/d[C2H5]
  J[831] += dqdci; // dwdot[HO2]/d[C2H5]
  J[849] += dqdci; // dwdot[C2H4]/d[C2H5]
  J[850] -= dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1059] -= dqdT; // dwdot[O2]/dT
  J[1062] += dqdT; // dwdot[HO2]/dT
  J[1080] += dqdT; // dwdot[C2H4]/dT
  J[1081] -= dqdT; // dwdot[C2H5]/dT

  // reaction 175: HCCO + O2 <=> 2 CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[27];
  k_f = 1600000 * exp(-(429.747032597231) * invT);
  dlnkfdT = (429.747032597231) * invT2;
  // reverse
  phi_r = sc[4] * (sc[14] * sc[14]);
  Kc = refC * exp(g_RT[3] - g_RT[4] - 2.000000 * g_RT[14] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[3] + h_RT[27]) + (h_RT[4] + 2.000000 * h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;      // O2
  wdot[4] += q;      // OH
  wdot[14] += 2 * q; // CO
  wdot[27] -= q;     // HCCO
  // d()/d[O2]
  dqdci = +k_f * sc[27];
  J[102] -= dqdci;     // dwdot[O2]/d[O2]
  J[103] += dqdci;     // dwdot[OH]/d[O2]
  J[113] += 2 * dqdci; // dwdot[CO]/d[O2]
  J[126] -= dqdci;     // dwdot[HCCO]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[14] * sc[14];
  J[135] -= dqdci;     // dwdot[O2]/d[OH]
  J[136] += dqdci;     // dwdot[OH]/d[OH]
  J[146] += 2 * dqdci; // dwdot[CO]/d[OH]
  J[159] -= dqdci;     // dwdot[HCCO]/d[OH]
  // d()/d[CO]
  dqdci = -k_r * sc[4] * 2.000000 * sc[14];
  J[465] -= dqdci;     // dwdot[O2]/d[CO]
  J[466] += dqdci;     // dwdot[OH]/d[CO]
  J[476] += 2 * dqdci; // dwdot[CO]/d[CO]
  J[489] -= dqdci;     // dwdot[HCCO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[3];
  J[894] -= dqdci;     // dwdot[O2]/d[HCCO]
  J[895] += dqdci;     // dwdot[OH]/d[HCCO]
  J[905] += 2 * dqdci; // dwdot[CO]/d[HCCO]
  J[918] -= dqdci;     // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1059] -= dqdT;     // dwdot[O2]/dT
  J[1060] += dqdT;     // dwdot[OH]/dT
  J[1070] += 2 * dqdT; // dwdot[CO]/dT
  J[1083] -= dqdT;     // dwdot[HCCO]/dT

  // reaction 176: 2 HCCO <=> C2H2 + 2 CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[27] * sc[27]);
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = (sc[14] * sc[14]) * sc[22];
  Kc = refC * exp(-2.000000 * g_RT[14] - g_RT[22] + 2.000000 * g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[27]) + (2.000000 * h_RT[14] + h_RT[22]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += 2 * q; // CO
  wdot[22] += q;     // C2H2
  wdot[27] -= 2 * q; // HCCO
  // d()/d[CO]
  dqdci = -k_r * 2.000000 * sc[14] * sc[22];
  J[476] += 2 * dqdci;  // dwdot[CO]/d[CO]
  J[484] += dqdci;      // dwdot[C2H2]/d[CO]
  J[489] += -2 * dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[C2H2]
  dqdci = -k_r * sc[14] * sc[14];
  J[740] += 2 * dqdci;  // dwdot[CO]/d[C2H2]
  J[748] += dqdci;      // dwdot[C2H2]/d[C2H2]
  J[753] += -2 * dqdci; // dwdot[HCCO]/d[C2H2]
  // d()/d[HCCO]
  dqdci = +k_f * 2.000000 * sc[27];
  J[905] += 2 * dqdci;  // dwdot[CO]/d[HCCO]
  J[913] += dqdci;      // dwdot[C2H2]/d[HCCO]
  J[918] += -2 * dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1070] += 2 * dqdT;  // dwdot[CO]/dT
  J[1078] += dqdT;      // dwdot[C2H2]/dT
  J[1083] += -2 * dqdT; // dwdot[HCCO]/dT

  amrex::Real c_R[32], dcRdT[32], e_RT[32];
  amrex::Real* eh_RT;
  if (consP == 1) {
    cp_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    speciesInternalEnergy(e_RT, tc);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 32; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[1056 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 32; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 32; ++m) {
      dehmixdc += eh_RT[m] * J[k * 33 + m];
    }
    J[k * 33 + 32] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[1088] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
#else
  amrex::Abort();
#endif
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT(
  amrex::Real* J,
  const amrex::Real* sc,
  const amrex::Real* Tp,
  const int* consP)
{
  amrex::Real c[32];

  for (int k = 0; k < 32; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian(J, c, *Tp, *consP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 32; k++) {
    J[1056 + k] *= 1.e-6;
    J[k * 33 + 32] *= 1.e6;
  }
}

// Transport function declarations

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENIMC(int* LENIMC)
{
  *LENIMC = 130;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENRMC(int* LENRMC)
{
  *LENRMC = 20576;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNO(int* NO)
{
  *NO = 4;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKK(int* KK)
{
  *KK = 32;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLITE(int* NLITE)
{
  *NLITE = 2;
}

// Patm in ergs/cm3
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPATM(amrex::Real* PATM)
{
  *PATM = 0.1013250000000000E+07;
}

// the molecular weights in g/mol
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetWT(amrex::Real* WT)
{
  WT[0] = 2.01600000E+00;
  WT[1] = 1.00800000E+00;
  WT[2] = 1.59990000E+01;
  WT[3] = 3.19980000E+01;
  WT[4] = 1.70070000E+01;
  WT[5] = 1.80150000E+01;
  WT[6] = 3.30060000E+01;
  WT[7] = 3.40140000E+01;
  WT[8] = 1.20110000E+01;
  WT[9] = 1.30190000E+01;
  WT[10] = 1.40270000E+01;
  WT[11] = 1.40270000E+01;
  WT[12] = 1.50350000E+01;
  WT[13] = 1.60430000E+01;
  WT[14] = 2.80100000E+01;
  WT[15] = 4.40090000E+01;
  WT[16] = 2.90180000E+01;
  WT[17] = 3.00260000E+01;
  WT[18] = 3.10340000E+01;
  WT[19] = 3.10340000E+01;
  WT[20] = 3.20420000E+01;
  WT[21] = 2.50300000E+01;
  WT[22] = 2.60380000E+01;
  WT[23] = 2.70460000E+01;
  WT[24] = 2.80540000E+01;
  WT[25] = 2.90620000E+01;
  WT[26] = 3.00700000E+01;
  WT[27] = 4.10290000E+01;
  WT[28] = 4.20370000E+01;
  WT[29] = 4.20370000E+01;
  WT[30] = 2.80140000E+01;
  WT[31] = 3.99500000E+01;
}

// the lennard-jones potential well depth eps/kb in K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetEPS(amrex::Real* EPS)
{
  EPS[0] = 3.80000000E+01;
  EPS[1] = 1.45000000E+02;
  EPS[2] = 8.00000000E+01;
  EPS[3] = 1.07400000E+02;
  EPS[4] = 8.00000000E+01;
  EPS[5] = 5.72400000E+02;
  EPS[6] = 1.07400000E+02;
  EPS[7] = 1.07400000E+02;
  EPS[8] = 7.14000000E+01;
  EPS[9] = 8.00000000E+01;
  EPS[10] = 1.44000000E+02;
  EPS[11] = 1.44000000E+02;
  EPS[12] = 1.44000000E+02;
  EPS[13] = 1.41400000E+02;
  EPS[14] = 9.81000000E+01;
  EPS[15] = 2.44000000E+02;
  EPS[16] = 4.98000000E+02;
  EPS[17] = 4.98000000E+02;
  EPS[18] = 4.17000000E+02;
  EPS[19] = 4.17000000E+02;
  EPS[20] = 4.81800000E+02;
  EPS[21] = 2.09000000E+02;
  EPS[22] = 2.09000000E+02;
  EPS[23] = 2.09000000E+02;
  EPS[24] = 2.80800000E+02;
  EPS[25] = 2.52300000E+02;
  EPS[26] = 2.52300000E+02;
  EPS[27] = 1.50000000E+02;
  EPS[28] = 4.36000000E+02;
  EPS[29] = 4.36000000E+02;
  EPS[30] = 9.75300000E+01;
  EPS[31] = 1.36500000E+02;
}

// the lennard-jones collision diameter in Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetSIG(amrex::Real* SIG)
{
  SIG[0] = 2.92000000E+00;
  SIG[1] = 2.05000000E+00;
  SIG[2] = 2.75000000E+00;
  SIG[3] = 3.45800000E+00;
  SIG[4] = 2.75000000E+00;
  SIG[5] = 2.60500000E+00;
  SIG[6] = 3.45800000E+00;
  SIG[7] = 3.45800000E+00;
  SIG[8] = 3.29800000E+00;
  SIG[9] = 2.75000000E+00;
  SIG[10] = 3.80000000E+00;
  SIG[11] = 3.80000000E+00;
  SIG[12] = 3.80000000E+00;
  SIG[13] = 3.74600000E+00;
  SIG[14] = 3.65000000E+00;
  SIG[15] = 3.76300000E+00;
  SIG[16] = 3.59000000E+00;
  SIG[17] = 3.59000000E+00;
  SIG[18] = 3.69000000E+00;
  SIG[19] = 3.69000000E+00;
  SIG[20] = 3.62600000E+00;
  SIG[21] = 4.10000000E+00;
  SIG[22] = 4.10000000E+00;
  SIG[23] = 4.10000000E+00;
  SIG[24] = 3.97100000E+00;
  SIG[25] = 4.30200000E+00;
  SIG[26] = 4.30200000E+00;
  SIG[27] = 2.50000000E+00;
  SIG[28] = 3.97000000E+00;
  SIG[29] = 3.97000000E+00;
  SIG[30] = 3.62100000E+00;
  SIG[31] = 3.33000000E+00;
}

// the dipole moment in Debye
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetDIP(amrex::Real* DIP)
{
  DIP[0] = 0.00000000E+00;
  DIP[1] = 0.00000000E+00;
  DIP[2] = 0.00000000E+00;
  DIP[3] = 0.00000000E+00;
  DIP[4] = 0.00000000E+00;
  DIP[5] = 1.84400000E+00;
  DIP[6] = 0.00000000E+00;
  DIP[7] = 0.00000000E+00;
  DIP[8] = 0.00000000E+00;
  DIP[9] = 0.00000000E+00;
  DIP[10] = 0.00000000E+00;
  DIP[11] = 0.00000000E+00;
  DIP[12] = 0.00000000E+00;
  DIP[13] = 0.00000000E+00;
  DIP[14] = 0.00000000E+00;
  DIP[15] = 0.00000000E+00;
  DIP[16] = 0.00000000E+00;
  DIP[17] = 0.00000000E+00;
  DIP[18] = 1.70000000E+00;
  DIP[19] = 1.70000000E+00;
  DIP[20] = 0.00000000E+00;
  DIP[21] = 0.00000000E+00;
  DIP[22] = 0.00000000E+00;
  DIP[23] = 0.00000000E+00;
  DIP[24] = 0.00000000E+00;
  DIP[25] = 0.00000000E+00;
  DIP[26] = 0.00000000E+00;
  DIP[27] = 0.00000000E+00;
  DIP[28] = 0.00000000E+00;
  DIP[29] = 0.00000000E+00;
  DIP[30] = 0.00000000E+00;
  DIP[31] = 0.00000000E+00;
}

// the polarizability in cubic Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPOL(amrex::Real* POL)
{
  POL[0] = 7.90000000E-01;
  POL[1] = 0.00000000E+00;
  POL[2] = 0.00000000E+00;
  POL[3] = 1.60000000E+00;
  POL[4] = 0.00000000E+00;
  POL[5] = 0.00000000E+00;
  POL[6] = 0.00000000E+00;
  POL[7] = 0.00000000E+00;
  POL[8] = 0.00000000E+00;
  POL[9] = 0.00000000E+00;
  POL[10] = 0.00000000E+00;
  POL[11] = 0.00000000E+00;
  POL[12] = 0.00000000E+00;
  POL[13] = 2.60000000E+00;
  POL[14] = 1.95000000E+00;
  POL[15] = 2.65000000E+00;
  POL[16] = 0.00000000E+00;
  POL[17] = 0.00000000E+00;
  POL[18] = 0.00000000E+00;
  POL[19] = 0.00000000E+00;
  POL[20] = 0.00000000E+00;
  POL[21] = 0.00000000E+00;
  POL[22] = 0.00000000E+00;
  POL[23] = 0.00000000E+00;
  POL[24] = 0.00000000E+00;
  POL[25] = 0.00000000E+00;
  POL[26] = 0.00000000E+00;
  POL[27] = 0.00000000E+00;
  POL[28] = 0.00000000E+00;
  POL[29] = 0.00000000E+00;
  POL[30] = 1.76000000E+00;
  POL[31] = 0.00000000E+00;
}

// the rotational relaxation collision number at 298 K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetZROT(amrex::Real* ZROT)
{
  ZROT[0] = 2.80000000E+02;
  ZROT[1] = 0.00000000E+00;
  ZROT[2] = 0.00000000E+00;
  ZROT[3] = 3.80000000E+00;
  ZROT[4] = 0.00000000E+00;
  ZROT[5] = 4.00000000E+00;
  ZROT[6] = 1.00000000E+00;
  ZROT[7] = 3.80000000E+00;
  ZROT[8] = 0.00000000E+00;
  ZROT[9] = 0.00000000E+00;
  ZROT[10] = 0.00000000E+00;
  ZROT[11] = 0.00000000E+00;
  ZROT[12] = 0.00000000E+00;
  ZROT[13] = 1.30000000E+01;
  ZROT[14] = 1.80000000E+00;
  ZROT[15] = 2.10000000E+00;
  ZROT[16] = 0.00000000E+00;
  ZROT[17] = 2.00000000E+00;
  ZROT[18] = 2.00000000E+00;
  ZROT[19] = 2.00000000E+00;
  ZROT[20] = 1.00000000E+00;
  ZROT[21] = 2.50000000E+00;
  ZROT[22] = 2.50000000E+00;
  ZROT[23] = 1.00000000E+00;
  ZROT[24] = 1.50000000E+00;
  ZROT[25] = 1.50000000E+00;
  ZROT[26] = 1.50000000E+00;
  ZROT[27] = 1.00000000E+00;
  ZROT[28] = 2.00000000E+00;
  ZROT[29] = 2.00000000E+00;
  ZROT[30] = 4.00000000E+00;
  ZROT[31] = 0.00000000E+00;
}

// 0: monoatomic, 1: linear, 2: nonlinear
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLIN(int* NLIN)
{
  NLIN[0] = 1;
  NLIN[1] = 0;
  NLIN[2] = 0;
  NLIN[3] = 1;
  NLIN[4] = 1;
  NLIN[5] = 2;
  NLIN[6] = 2;
  NLIN[7] = 2;
  NLIN[8] = 0;
  NLIN[9] = 1;
  NLIN[10] = 1;
  NLIN[11] = 1;
  NLIN[12] = 1;
  NLIN[13] = 2;
  NLIN[14] = 1;
  NLIN[15] = 1;
  NLIN[16] = 2;
  NLIN[17] = 2;
  NLIN[18] = 2;
  NLIN[19] = 2;
  NLIN[20] = 2;
  NLIN[21] = 1;
  NLIN[22] = 1;
  NLIN[23] = 2;
  NLIN[24] = 2;
  NLIN[25] = 2;
  NLIN[26] = 2;
  NLIN[27] = 2;
  NLIN[28] = 2;
  NLIN[29] = 2;
  NLIN[30] = 1;
  NLIN[31] = 0;
}

// Poly fits for the viscosities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFETA(amrex::Real* COFETA)
{
  COFETA[0] = -1.38347555E+01;
  COFETA[1] = 1.00106621E+00;
  COFETA[2] = -4.98105694E-02;
  COFETA[3] = 2.31450475E-03;
  COFETA[4] = -2.04078253E+01;
  COFETA[5] = 3.65436395E+00;
  COFETA[6] = -3.98339635E-01;
  COFETA[7] = 1.75883009E-02;
  COFETA[8] = -1.50926370E+01;
  COFETA[9] = 1.92606504E+00;
  COFETA[10] = -1.73487476E-01;
  COFETA[11] = 7.82572931E-03;
  COFETA[12] = -1.71618439E+01;
  COFETA[13] = 2.68036374E+00;
  COFETA[14] = -2.72570227E-01;
  COFETA[15] = 1.21650964E-02;
  COFETA[16] = -1.50620876E+01;
  COFETA[17] = 1.92606504E+00;
  COFETA[18] = -1.73487476E-01;
  COFETA[19] = 7.82572931E-03;
  COFETA[20] = -1.05420930E+01;
  COFETA[21] = -1.37777266E+00;
  COFETA[22] = 4.20502561E-01;
  COFETA[23] = -2.40627344E-02;
  COFETA[24] = -1.71463359E+01;
  COFETA[25] = 2.68036374E+00;
  COFETA[26] = -2.72570227E-01;
  COFETA[27] = 1.21650964E-02;
  COFETA[28] = -1.71312945E+01;
  COFETA[29] = 2.68036374E+00;
  COFETA[30] = -2.72570227E-01;
  COFETA[31] = 1.21650964E-02;
  COFETA[32] = -1.50067715E+01;
  COFETA[33] = 1.69625877E+00;
  COFETA[34] = -1.42936462E-01;
  COFETA[35] = 6.47223426E-03;
  COFETA[36] = -1.51956952E+01;
  COFETA[37] = 1.92606504E+00;
  COFETA[38] = -1.73487476E-01;
  COFETA[39] = 7.82572931E-03;
  COFETA[40] = -2.02663506E+01;
  COFETA[41] = 3.63241793E+00;
  COFETA[42] = -3.95581049E-01;
  COFETA[43] = 1.74725495E-02;
  COFETA[44] = -2.02663506E+01;
  COFETA[45] = 3.63241793E+00;
  COFETA[46] = -3.95581049E-01;
  COFETA[47] = 1.74725495E-02;
  COFETA[48] = -2.02316522E+01;
  COFETA[49] = 3.63241793E+00;
  COFETA[50] = -3.95581049E-01;
  COFETA[51] = 1.74725495E-02;
  COFETA[52] = -2.00094678E+01;
  COFETA[53] = 3.57220167E+00;
  COFETA[54] = -3.87936446E-01;
  COFETA[55] = 1.71483254E-02;
  COFETA[56] = -1.66188439E+01;
  COFETA[57] = 2.40307799E+00;
  COFETA[58] = -2.36167638E-01;
  COFETA[59] = 1.05714061E-02;
  COFETA[60] = -2.40015087E+01;
  COFETA[61] = 5.14359547E+00;
  COFETA[62] = -5.74269731E-01;
  COFETA[63] = 2.44937679E-02;
  COFETA[64] = -1.98501400E+01;
  COFETA[65] = 2.69480162E+00;
  COFETA[66] = -1.65880845E-01;
  COFETA[67] = 3.14504769E-03;
  COFETA[68] = -1.98330663E+01;
  COFETA[69] = 2.69480162E+00;
  COFETA[70] = -1.65880845E-01;
  COFETA[71] = 3.14504769E-03;
  COFETA[72] = -1.99945964E+01;
  COFETA[73] = 2.86923161E+00;
  COFETA[74] = -2.03325438E-01;
  COFETA[75] = 5.39055928E-03;
  COFETA[76] = -1.99945964E+01;
  COFETA[77] = 2.86923161E+00;
  COFETA[78] = -2.03325438E-01;
  COFETA[79] = 5.39055928E-03;
  COFETA[80] = -2.05644597E+01;
  COFETA[81] = 3.03946431E+00;
  COFETA[82] = -2.16994867E-01;
  COFETA[83] = 5.61394012E-03;
  COFETA[84] = -2.33863906E+01;
  COFETA[85] = 4.80350223E+00;
  COFETA[86] = -5.38341336E-01;
  COFETA[87] = 2.32747213E-02;
  COFETA[88] = -2.33666497E+01;
  COFETA[89] = 4.80350223E+00;
  COFETA[90] = -5.38341336E-01;
  COFETA[91] = 2.32747213E-02;
  COFETA[92] = -2.33476586E+01;
  COFETA[93] = 4.80350223E+00;
  COFETA[94] = -5.38341336E-01;
  COFETA[95] = 2.32747213E-02;
  COFETA[96] = -2.50655480E+01;
  COFETA[97] = 5.33982977E+00;
  COFETA[98] = -5.89982992E-01;
  COFETA[99] = 2.47780650E-02;
  COFETA[100] = -2.46581444E+01;
  COFETA[101] = 5.19497183E+00;
  COFETA[102] = -5.78827339E-01;
  COFETA[103] = 2.46050921E-02;
  COFETA[104] = -2.46410962E+01;
  COFETA[105] = 5.19497183E+00;
  COFETA[106] = -5.78827339E-01;
  COFETA[107] = 2.46050921E-02;
  COFETA[108] = -1.92183918E+01;
  COFETA[109] = 3.75164499E+00;
  COFETA[110] = -4.10390993E-01;
  COFETA[111] = 1.80861665E-02;
  COFETA[112] = -2.23395728E+01;
  COFETA[113] = 3.86433912E+00;
  COFETA[114] = -3.41553983E-01;
  COFETA[115] = 1.17083447E-02;
  COFETA[116] = -2.23395728E+01;
  COFETA[117] = 3.86433912E+00;
  COFETA[118] = -3.41553983E-01;
  COFETA[119] = 1.17083447E-02;
  COFETA[120] = -1.65695492E+01;
  COFETA[121] = 2.39056562E+00;
  COFETA[122] = -2.34558144E-01;
  COFETA[123] = 1.05024037E-02;
  COFETA[124] = -1.90422662E+01;
  COFETA[125] = 3.47025711E+00;
  COFETA[126] = -3.75102111E-01;
  COFETA[127] = 1.66086076E-02;
}

// Poly fits for the conductivities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFLAM(amrex::Real* COFLAM)
{
  COFLAM[0] = 9.24082480E+00;
  COFLAM[1] = -4.69567526E-01;
  COFLAM[2] = 1.15980102E-01;
  COFLAM[3] = -2.61033156E-03;
  COFLAM[4] = -8.57944636E-01;
  COFLAM[5] = 3.65436395E+00;
  COFLAM[6] = -3.98339635E-01;
  COFLAM[7] = 1.75883009E-02;
  COFLAM[8] = 1.69268564E+00;
  COFLAM[9] = 1.92606504E+00;
  COFLAM[10] = -1.73487476E-01;
  COFLAM[11] = 7.82572931E-03;
  COFLAM[12] = -1.93717634E+00;
  COFLAM[13] = 2.89110257E+00;
  COFLAM[14] = -2.71096988E-01;
  COFLAM[15] = 1.15344939E-02;
  COFLAM[16] = 1.41666231E+01;
  COFLAM[17] = -3.24630273E+00;
  COFLAM[18] = 5.33877875E-01;
  COFLAM[19] = -2.32905027E-02;
  COFLAM[20] = 2.33729836E+01;
  COFLAM[21] = -8.96536178E+00;
  COFLAM[22] = 1.52828630E+00;
  COFLAM[23] = -7.58551616E-02;
  COFLAM[24] = -1.12959874E+00;
  COFLAM[25] = 2.34014328E+00;
  COFLAM[26] = -1.63245076E-01;
  COFLAM[27] = 5.80319843E-03;
  COFLAM[28] = 8.84006318E-01;
  COFLAM[29] = 1.31525455E+00;
  COFLAM[30] = 1.91773906E-02;
  COFLAM[31] = -4.41642314E-03;
  COFLAM[32] = 2.06525449E+00;
  COFLAM[33] = 1.69625877E+00;
  COFLAM[34] = -1.42936462E-01;
  COFLAM[35] = 6.47223426E-03;
  COFLAM[36] = 2.08093784E+01;
  COFLAM[37] = -6.24179833E+00;
  COFLAM[38] = 9.82386955E-01;
  COFLAM[39] = -4.50360445E-02;
  COFLAM[40] = 1.29177889E+01;
  COFLAM[41] = -3.73745368E+00;
  COFLAM[42] = 7.15830762E-01;
  COFLAM[43] = -3.63846782E-02;
  COFLAM[44] = 1.89383237E+01;
  COFLAM[45] = -6.51017886E+00;
  COFLAM[46] = 1.13292023E+00;
  COFLAM[47] = -5.69603041E-02;
  COFLAM[48] = 1.39937895E+01;
  COFLAM[49] = -4.64256403E+00;
  COFLAM[50] = 9.07728510E-01;
  COFLAM[51] = -4.77274380E-02;
  COFLAM[52] = 1.33091614E+01;
  COFLAM[53] = -4.96140250E+00;
  COFLAM[54] = 1.03295495E+00;
  COFLAM[55] = -5.63420011E-02;
  COFLAM[56] = 1.18777275E+01;
  COFLAM[57] = -3.15463597E+00;
  COFLAM[58] = 6.01972754E-01;
  COFLAM[59] = -3.03211015E-02;
  COFLAM[60] = -1.13649201E+01;
  COFLAM[61] = 5.88177354E+00;
  COFLAM[62] = -5.68651792E-01;
  COFLAM[63] = 2.03561484E-02;
  COFLAM[64] = 6.30244184E+00;
  COFLAM[65] = -2.22810729E+00;
  COFLAM[66] = 6.37340380E-01;
  COFLAM[67] = -3.81055943E-02;
  COFLAM[68] = 5.39305623E+00;
  COFLAM[69] = -2.39312259E+00;
  COFLAM[70] = 7.39585006E-01;
  COFLAM[71] = -4.58435469E-02;
  COFLAM[72] = 1.05517814E+00;
  COFLAM[73] = 4.29802029E-02;
  COFLAM[74] = 3.31460335E-01;
  COFLAM[75] = -2.40803945E-02;
  COFLAM[76] = -6.14586961E+00;
  COFLAM[77] = 2.47428650E+00;
  COFLAM[78] = 6.44002298E-02;
  COFLAM[79] = -1.45368448E-02;
  COFLAM[80] = -1.83490841E+00;
  COFLAM[81] = 5.55822580E-01;
  COFLAM[82] = 3.51309961E-01;
  COFLAM[83] = -2.85527493E-02;
  COFLAM[84] = 1.33513486E+01;
  COFLAM[85] = -4.32125836E+00;
  COFLAM[86] = 8.36087087E-01;
  COFLAM[87] = -4.37692829E-02;
  COFLAM[88] = -7.70164041E+00;
  COFLAM[89] = 4.56884430E+00;
  COFLAM[90] = -4.04747578E-01;
  COFLAM[91] = 1.40841066E-02;
  COFLAM[92] = -9.10383958E+00;
  COFLAM[93] = 4.54798776E+00;
  COFLAM[94] = -3.18114363E-01;
  COFLAM[95] = 6.59577260E-03;
  COFLAM[96] = -1.46152767E+01;
  COFLAM[97] = 6.36251222E+00;
  COFLAM[98] = -5.03831917E-01;
  COFLAM[99] = 1.26120967E-02;
  COFLAM[100] = -8.95009242E+00;
  COFLAM[101] = 4.02514973E+00;
  COFLAM[102] = -1.84063835E-01;
  COFLAM[103] = -1.94055121E-03;
  COFLAM[104] = -1.09902158E+01;
  COFLAM[105] = 4.70647555E+00;
  COFLAM[106] = -2.52272322E-01;
  COFLAM[107] = 1.75186734E-04;
  COFLAM[108] = -5.96382011E+00;
  COFLAM[109] = 4.39355990E+00;
  COFLAM[110] = -3.97598235E-01;
  COFLAM[111] = 1.39749618E-02;
  COFLAM[112] = -8.32870491E+00;
  COFLAM[113] = 3.97067241E+00;
  COFLAM[114] = -2.21252281E-01;
  COFLAM[115] = 1.47870386E-03;
  COFLAM[116] = -5.36682944E+00;
  COFLAM[117] = 2.98311169E+00;
  COFLAM[118] = -1.14643279E-01;
  COFLAM[119] = -2.12830072E-03;
  COFLAM[120] = 1.29305954E+01;
  COFLAM[121] = -3.52816965E+00;
  COFLAM[122] = 6.45498434E-01;
  COFLAM[123] = -3.19375023E-02;
  COFLAM[124] = -3.17204599E+00;
  COFLAM[125] = 3.47025711E+00;
  COFLAM[126] = -3.75102111E-01;
  COFLAM[127] = 1.66086076E-02;
}

// Poly fits for the diffusion coefficients, dim NO*KK*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFD(amrex::Real* COFD)
{
  COFD[0] = -1.03270769E+01;
  COFD[1] = 2.19285409E+00;
  COFD[2] = -7.54492786E-02;
  COFD[3] = 3.51398213E-03;
  COFD[4] = -1.14366544E+01;
  COFD[5] = 2.78323501E+00;
  COFD[6] = -1.51214064E-01;
  COFD[7] = 6.75150012E-03;
  COFD[8] = -1.09595844E+01;
  COFD[9] = 2.30836460E+00;
  COFD[10] = -8.76339315E-02;
  COFD[11] = 3.90878445E-03;
  COFD[12] = -1.18989101E+01;
  COFD[13] = 2.57507000E+00;
  COFD[14] = -1.24033737E-01;
  COFD[15] = 5.56694959E-03;
  COFD[16] = -1.09629118E+01;
  COFD[17] = 2.30836460E+00;
  COFD[18] = -8.76339315E-02;
  COFD[19] = 3.90878445E-03;
  COFD[20] = -1.71983144E+01;
  COFD[21] = 4.63881440E+00;
  COFD[22] = -3.86139677E-01;
  COFD[23] = 1.66955099E-02;
  COFD[24] = -1.18998160E+01;
  COFD[25] = 2.57507000E+00;
  COFD[26] = -1.24033737E-01;
  COFD[27] = 5.56694959E-03;
  COFD[28] = -1.19006697E+01;
  COFD[29] = 2.57507000E+00;
  COFD[30] = -1.24033737E-01;
  COFD[31] = 5.56694959E-03;
  COFD[32] = -1.08369614E+01;
  COFD[33] = 2.19094415E+00;
  COFD[34] = -7.11992510E-02;
  COFD[35] = 3.14105973E-03;
  COFD[36] = -1.09469382E+01;
  COFD[37] = 2.30836460E+00;
  COFD[38] = -8.76339315E-02;
  COFD[39] = 3.90878445E-03;
  COFD[40] = -1.25099100E+01;
  COFD[41] = 2.77873601E+00;
  COFD[42] = -1.50637360E-01;
  COFD[43] = 6.72684281E-03;
  COFD[44] = -1.25099100E+01;
  COFD[45] = 2.77873601E+00;
  COFD[46] = -1.50637360E-01;
  COFD[47] = 6.72684281E-03;
  COFD[48] = -1.25141403E+01;
  COFD[49] = 2.77873601E+00;
  COFD[50] = -1.50637360E-01;
  COFD[51] = 6.72684281E-03;
  COFD[52] = -1.24693714E+01;
  COFD[53] = 2.76686648E+00;
  COFD[54] = -1.49120141E-01;
  COFD[55] = 6.66220432E-03;
  COFD[56] = -1.17159884E+01;
  COFD[57] = 2.48123210E+00;
  COFD[58] = -1.11322604E-01;
  COFD[59] = 4.99282389E-03;
  COFD[60] = -1.37794466E+01;
  COFD[61] = 3.23973858E+00;
  COFD[62] = -2.09989036E-01;
  COFD[63] = 9.27667906E-03;
  COFD[64] = -1.60517517E+01;
  COFD[65] = 4.11188603E+00;
  COFD[66] = -3.21540884E-01;
  COFD[67] = 1.40482564E-02;
  COFD[68] = -1.60528433E+01;
  COFD[69] = 4.11188603E+00;
  COFD[70] = -3.21540884E-01;
  COFD[71] = 1.40482564E-02;
  COFD[72] = -1.58456453E+01;
  COFD[73] = 4.02074796E+00;
  COFD[74] = -3.10018539E-01;
  COFD[75] = 1.35599559E-02;
  COFD[76] = -1.58456453E+01;
  COFD[77] = 4.02074796E+00;
  COFD[78] = -3.10018539E-01;
  COFD[79] = 1.35599559E-02;
  COFD[80] = -1.59537397E+01;
  COFD[81] = 4.07051484E+00;
  COFD[82] = -3.16303109E-01;
  COFD[83] = 1.38259377E-02;
  COFD[84] = -1.34695507E+01;
  COFD[85] = 3.09379603E+00;
  COFD[86] = -1.91268635E-01;
  COFD[87] = 8.47480224E-03;
  COFD[88] = -1.34709956E+01;
  COFD[89] = 3.09379603E+00;
  COFD[90] = -1.91268635E-01;
  COFD[91] = 8.47480224E-03;
  COFD[92] = -1.34723365E+01;
  COFD[93] = 3.09379603E+00;
  COFD[94] = -1.91268635E-01;
  COFD[95] = 8.47480224E-03;
  COFD[96] = -1.42229344E+01;
  COFD[97] = 3.38669384E+00;
  COFD[98] = -2.28784122E-01;
  COFD[99] = 1.00790953E-02;
  COFD[100] = -1.39914049E+01;
  COFD[101] = 3.26384506E+00;
  COFD[102] = -2.12947087E-01;
  COFD[103] = 9.39743888E-03;
  COFD[104] = -1.39924933E+01;
  COFD[105] = 3.26384506E+00;
  COFD[106] = -2.12947087E-01;
  COFD[107] = 9.39743888E-03;
  COFD[108] = -1.22004476E+01;
  COFD[109] = 2.80725489E+00;
  COFD[110] = -1.54291406E-01;
  COFD[111] = 6.88290911E-03;
  COFD[112] = -1.57035004E+01;
  COFD[113] = 3.93614244E+00;
  COFD[114] = -2.99111497E-01;
  COFD[115] = 1.30888229E-02;
  COFD[116] = -1.57035004E+01;
  COFD[117] = 3.93614244E+00;
  COFD[118] = -2.99111497E-01;
  COFD[119] = 1.30888229E-02;
  COFD[120] = -1.16906458E+01;
  COFD[121] = 2.47469981E+00;
  COFD[122] = -1.10436257E-01;
  COFD[123] = 4.95273813E-03;
  COFD[124] = -1.23130320E+01;
  COFD[125] = 2.74418790E+00;
  COFD[126] = -1.46230156E-01;
  COFD[127] = 6.53948886E-03;
  COFD[128] = -1.14366544E+01;
  COFD[129] = 2.78323501E+00;
  COFD[130] = -1.51214064E-01;
  COFD[131] = 6.75150012E-03;
  COFD[132] = -1.47968875E+01;
  COFD[133] = 4.23027636E+00;
  COFD[134] = -3.36139991E-01;
  COFD[135] = 1.46507621E-02;
  COFD[136] = -1.34230419E+01;
  COFD[137] = 3.48624238E+00;
  COFD[138] = -2.41554467E-01;
  COFD[139] = 1.06263545E-02;
  COFD[140] = -1.46550238E+01;
  COFD[141] = 3.83606243E+00;
  COFD[142] = -2.86076532E-01;
  COFD[143] = 1.25205829E-02;
  COFD[144] = -1.34248014E+01;
  COFD[145] = 3.48624238E+00;
  COFD[146] = -2.41554467E-01;
  COFD[147] = 1.06263545E-02;
  COFD[148] = -1.95739720E+01;
  COFD[149] = 5.61113230E+00;
  COFD[150] = -4.90190187E-01;
  COFD[151] = 2.03260675E-02;
  COFD[152] = -1.46554904E+01;
  COFD[153] = 3.83606243E+00;
  COFD[154] = -2.86076532E-01;
  COFD[155] = 1.25205829E-02;
  COFD[156] = -1.46559297E+01;
  COFD[157] = 3.83606243E+00;
  COFD[158] = -2.86076532E-01;
  COFD[159] = 1.25205829E-02;
  COFD[160] = -1.32467466E+01;
  COFD[161] = 3.34156587E+00;
  COFD[162] = -2.22853306E-01;
  COFD[163] = 9.81883417E-03;
  COFD[164] = -1.34163042E+01;
  COFD[165] = 3.48624238E+00;
  COFD[166] = -2.41554467E-01;
  COFD[167] = 1.06263545E-02;
  COFD[168] = -1.57972520E+01;
  COFD[169] = 4.22225052E+00;
  COFD[170] = -3.35156428E-01;
  COFD[171] = 1.46104855E-02;
  COFD[172] = -1.57972520E+01;
  COFD[173] = 4.22225052E+00;
  COFD[174] = -3.35156428E-01;
  COFD[175] = 1.46104855E-02;
  COFD[176] = -1.57995045E+01;
  COFD[177] = 4.22225052E+00;
  COFD[178] = -3.35156428E-01;
  COFD[179] = 1.46104855E-02;
  COFD[180] = -1.57199190E+01;
  COFD[181] = 4.19936335E+00;
  COFD[182] = -3.32311009E-01;
  COFD[183] = 1.44921003E-02;
  COFD[184] = -1.43151328E+01;
  COFD[185] = 3.68038508E+00;
  COFD[186] = -2.65779346E-01;
  COFD[187] = 1.16360771E-02;
  COFD[188] = -1.76147183E+01;
  COFD[189] = 4.86049500E+00;
  COFD[190] = -4.12200578E-01;
  COFD[191] = 1.77160971E-02;
  COFD[192] = -1.97544605E+01;
  COFD[193] = 5.56931926E+00;
  COFD[194] = -4.89105511E-01;
  COFD[195] = 2.04493129E-02;
  COFD[196] = -1.97550243E+01;
  COFD[197] = 5.56931926E+00;
  COFD[198] = -4.89105511E-01;
  COFD[199] = 2.04493129E-02;
  COFD[200] = -1.92718738E+01;
  COFD[201] = 5.41172124E+00;
  COFD[202] = -4.73213887E-01;
  COFD[203] = 1.99405473E-02;
  COFD[204] = -1.92718738E+01;
  COFD[205] = 5.41172124E+00;
  COFD[206] = -4.73213887E-01;
  COFD[207] = 1.99405473E-02;
  COFD[208] = -1.96866259E+01;
  COFD[209] = 5.54637286E+00;
  COFD[210] = -4.87070324E-01;
  COFD[211] = 2.03983467E-02;
  COFD[212] = -1.72224880E+01;
  COFD[213] = 4.69060745E+00;
  COFD[214] = -3.92369888E-01;
  COFD[215] = 1.69459661E-02;
  COFD[216] = -1.72232379E+01;
  COFD[217] = 4.69060745E+00;
  COFD[218] = -3.92369888E-01;
  COFD[219] = 1.69459661E-02;
  COFD[220] = -1.72239329E+01;
  COFD[221] = 4.69060745E+00;
  COFD[222] = -3.92369888E-01;
  COFD[223] = 1.69459661E-02;
  COFD[224] = -1.82252070E+01;
  COFD[225] = 5.05237312E+00;
  COFD[226] = -4.35182396E-01;
  COFD[227] = 1.86363074E-02;
  COFD[228] = -1.79339484E+01;
  COFD[229] = 4.91373893E+00;
  COFD[230] = -4.18747629E-01;
  COFD[231] = 1.79856610E-02;
  COFD[232] = -1.79345106E+01;
  COFD[233] = 4.91373893E+00;
  COFD[234] = -4.18747629E-01;
  COFD[235] = 1.79856610E-02;
  COFD[236] = -1.54460977E+01;
  COFD[237] = 4.26819983E+00;
  COFD[238] = -3.40766379E-01;
  COFD[239] = 1.48393361E-02;
  COFD[240] = -1.94688845E+01;
  COFD[241] = 5.43830787E+00;
  COFD[242] = -4.75472880E-01;
  COFD[243] = 1.99909996E-02;
  COFD[244] = -1.94688845E+01;
  COFD[245] = 5.43830787E+00;
  COFD[246] = -4.75472880E-01;
  COFD[247] = 1.99909996E-02;
  COFD[248] = -1.42894603E+01;
  COFD[249] = 3.67490723E+00;
  COFD[250] = -2.65114792E-01;
  COFD[251] = 1.16092671E-02;
  COFD[252] = -1.54738770E+01;
  COFD[253] = 4.15765300E+00;
  COFD[254] = -3.27126237E-01;
  COFD[255] = 1.42762611E-02;
  COFD[256] = -1.09595844E+01;
  COFD[257] = 2.30836460E+00;
  COFD[258] = -8.76339315E-02;
  COFD[259] = 3.90878445E-03;
  COFD[260] = -1.34230419E+01;
  COFD[261] = 3.48624238E+00;
  COFD[262] = -2.41554467E-01;
  COFD[263] = 1.06263545E-02;
  COFD[264] = -1.32093517E+01;
  COFD[265] = 2.90778936E+00;
  COFD[266] = -1.67388544E-01;
  COFD[267] = 7.45220609E-03;
  COFD[268] = -1.43139120E+01;
  COFD[269] = 3.17651319E+00;
  COFD[270] = -2.02028974E-01;
  COFD[271] = 8.94232502E-03;
  COFD[272] = -1.32243932E+01;
  COFD[273] = 2.90778936E+00;
  COFD[274] = -1.67388544E-01;
  COFD[275] = 7.45220609E-03;
  COFD[276] = -1.94093476E+01;
  COFD[277] = 5.16013126E+00;
  COFD[278] = -4.46824543E-01;
  COFD[279] = 1.90464887E-02;
  COFD[280] = -1.43190281E+01;
  COFD[281] = 3.17651319E+00;
  COFD[282] = -2.02028974E-01;
  COFD[283] = 8.94232502E-03;
  COFD[284] = -1.43238892E+01;
  COFD[285] = 3.17651319E+00;
  COFD[286] = -2.02028974E-01;
  COFD[287] = 8.94232502E-03;
  COFD[288] = -1.30610008E+01;
  COFD[289] = 2.80913567E+00;
  COFD[290] = -1.54536855E-01;
  COFD[291] = 6.89359313E-03;
  COFD[292] = -1.31551721E+01;
  COFD[293] = 2.90778936E+00;
  COFD[294] = -1.67388544E-01;
  COFD[295] = 7.45220609E-03;
  COFD[296] = -1.50584188E+01;
  COFD[297] = 3.47945612E+00;
  COFD[298] = -2.40703722E-01;
  COFD[299] = 1.05907441E-02;
  COFD[300] = -1.50584188E+01;
  COFD[301] = 3.47945612E+00;
  COFD[302] = -2.40703722E-01;
  COFD[303] = 1.05907441E-02;
  COFD[304] = -1.50766073E+01;
  COFD[305] = 3.47945612E+00;
  COFD[306] = -2.40703722E-01;
  COFD[307] = 1.05907441E-02;
  COFD[308] = -1.50270285E+01;
  COFD[309] = 3.46140064E+00;
  COFD[310] = -2.38440092E-01;
  COFD[311] = 1.04960087E-02;
  COFD[312] = -1.40998907E+01;
  COFD[313] = 3.08120012E+00;
  COFD[314] = -1.89629903E-01;
  COFD[315] = 8.40361952E-03;
  COFD[316] = -1.70534750E+01;
  COFD[317] = 4.14240922E+00;
  COFD[318] = -3.25239774E-01;
  COFD[319] = 1.41980687E-02;
  COFD[320] = -1.94313018E+01;
  COFD[321] = 5.02567894E+00;
  COFD[322] = -4.32045169E-01;
  COFD[323] = 1.85132214E-02;
  COFD[324] = -1.94373032E+01;
  COFD[325] = 5.02567894E+00;
  COFD[326] = -4.32045169E-01;
  COFD[327] = 1.85132214E-02;
  COFD[328] = -1.88179325E+01;
  COFD[329] = 4.79683898E+00;
  COFD[330] = -4.04829719E-01;
  COFD[331] = 1.74325475E-02;
  COFD[332] = -1.88179325E+01;
  COFD[333] = 4.79683898E+00;
  COFD[334] = -4.04829719E-01;
  COFD[335] = 1.74325475E-02;
  COFD[336] = -1.93364494E+01;
  COFD[337] = 4.98286777E+00;
  COFD[338] = -4.26970814E-01;
  COFD[339] = 1.83122917E-02;
  COFD[340] = -1.65412223E+01;
  COFD[341] = 3.95035840E+00;
  COFD[342] = -3.00959418E-01;
  COFD[343] = 1.31692593E-02;
  COFD[344] = -1.65488277E+01;
  COFD[345] = 3.95035840E+00;
  COFD[346] = -3.00959418E-01;
  COFD[347] = 1.31692593E-02;
  COFD[348] = -1.65559708E+01;
  COFD[349] = 3.95035840E+00;
  COFD[350] = -3.00959418E-01;
  COFD[351] = 1.31692593E-02;
  COFD[352] = -1.74792034E+01;
  COFD[353] = 4.29676909E+00;
  COFD[354] = -3.44085306E-01;
  COFD[355] = 1.49671135E-02;
  COFD[356] = -1.72496558E+01;
  COFD[357] = 4.17889917E+00;
  COFD[358] = -3.29752510E-01;
  COFD[359] = 1.43850275E-02;
  COFD[360] = -1.72556425E+01;
  COFD[361] = 4.17889917E+00;
  COFD[362] = -3.29752510E-01;
  COFD[363] = 1.43850275E-02;
  COFD[364] = -1.49500258E+01;
  COFD[365] = 3.52327209E+00;
  COFD[366] = -2.46286208E-01;
  COFD[367] = 1.08285963E-02;
  COFD[368] = -1.90883170E+01;
  COFD[369] = 4.84384483E+00;
  COFD[370] = -4.10265575E-01;
  COFD[371] = 1.76414287E-02;
  COFD[372] = -1.90883170E+01;
  COFD[373] = 4.84384483E+00;
  COFD[374] = -4.10265575E-01;
  COFD[375] = 1.76414287E-02;
  COFD[376] = -1.40756909E+01;
  COFD[377] = 3.07549274E+00;
  COFD[378] = -1.88889344E-01;
  COFD[379] = 8.37152866E-03;
  COFD[380] = -1.49610523E+01;
  COFD[381] = 3.41988961E+00;
  COFD[382] = -2.33128386E-01;
  COFD[383] = 1.02689994E-02;
  COFD[384] = -1.18989101E+01;
  COFD[385] = 2.57507000E+00;
  COFD[386] = -1.24033737E-01;
  COFD[387] = 5.56694959E-03;
  COFD[388] = -1.46550238E+01;
  COFD[389] = 3.83606243E+00;
  COFD[390] = -2.86076532E-01;
  COFD[391] = 1.25205829E-02;
  COFD[392] = -1.43139120E+01;
  COFD[393] = 3.17651319E+00;
  COFD[394] = -2.02028974E-01;
  COFD[395] = 8.94232502E-03;
  COFD[396] = -1.55511233E+01;
  COFD[397] = 3.48070094E+00;
  COFD[398] = -2.40859499E-01;
  COFD[399] = 1.05972514E-02;
  COFD[400] = -1.43340695E+01;
  COFD[401] = 3.17651319E+00;
  COFD[402] = -2.02028974E-01;
  COFD[403] = 8.94232502E-03;
  COFD[404] = -2.12652444E+01;
  COFD[405] = 5.59961822E+00;
  COFD[406] = -4.91624856E-01;
  COFD[407] = 2.05035546E-02;
  COFD[408] = -1.55588172E+01;
  COFD[409] = 3.48070094E+00;
  COFD[410] = -2.40859499E-01;
  COFD[411] = 1.05972514E-02;
  COFD[412] = -1.55661647E+01;
  COFD[413] = 3.48070094E+00;
  COFD[414] = -2.40859499E-01;
  COFD[415] = 1.05972514E-02;
  COFD[416] = -1.40707408E+01;
  COFD[417] = 3.05837263E+00;
  COFD[418] = -1.86672802E-01;
  COFD[419] = 8.27575734E-03;
  COFD[420] = -1.42429030E+01;
  COFD[421] = 3.17651319E+00;
  COFD[422] = -2.02028974E-01;
  COFD[423] = 8.94232502E-03;
  COFD[424] = -1.63254645E+01;
  COFD[425] = 3.82388595E+00;
  COFD[426] = -2.84480724E-01;
  COFD[427] = 1.24506311E-02;
  COFD[428] = -1.63254645E+01;
  COFD[429] = 3.82388595E+00;
  COFD[430] = -2.84480724E-01;
  COFD[431] = 1.24506311E-02;
  COFD[432] = -1.63493305E+01;
  COFD[433] = 3.82388595E+00;
  COFD[434] = -2.84480724E-01;
  COFD[435] = 1.24506311E-02;
  COFD[436] = -1.62724429E+01;
  COFD[437] = 3.79163564E+00;
  COFD[438] = -2.80257365E-01;
  COFD[439] = 1.22656902E-02;
  COFD[440] = -1.52721010E+01;
  COFD[441] = 3.36790500E+00;
  COFD[442] = -2.26321740E-01;
  COFD[443] = 9.97135055E-03;
  COFD[444] = -1.84688303E+01;
  COFD[445] = 4.49330851E+00;
  COFD[446] = -3.68208715E-01;
  COFD[447] = 1.59565402E-02;
  COFD[448] = -2.08204356E+01;
  COFD[449] = 5.35267674E+00;
  COFD[450] = -4.69010505E-01;
  COFD[451] = 1.98979152E-02;
  COFD[452] = -2.08293167E+01;
  COFD[453] = 5.35267674E+00;
  COFD[454] = -4.69010505E-01;
  COFD[455] = 1.98979152E-02;
  COFD[456] = -2.04928875E+01;
  COFD[457] = 5.22397941E+00;
  COFD[458] = -4.54138181E-01;
  COFD[459] = 1.93249289E-02;
  COFD[460] = -2.04928875E+01;
  COFD[461] = 5.22397941E+00;
  COFD[462] = -4.54138181E-01;
  COFD[463] = 1.93249289E-02;
  COFD[464] = -2.07595763E+01;
  COFD[465] = 5.32244593E+00;
  COFD[466] = -4.65829403E-01;
  COFD[467] = 1.97895274E-02;
  COFD[468] = -1.78725064E+01;
  COFD[469] = 4.29613154E+00;
  COFD[470] = -3.44012526E-01;
  COFD[471] = 1.49643715E-02;
  COFD[472] = -1.78834868E+01;
  COFD[473] = 4.29613154E+00;
  COFD[474] = -3.44012526E-01;
  COFD[475] = 1.49643715E-02;
  COFD[476] = -1.78938681E+01;
  COFD[477] = 4.29613154E+00;
  COFD[478] = -3.44012526E-01;
  COFD[479] = 1.49643715E-02;
  COFD[480] = -1.89544717E+01;
  COFD[481] = 4.68595732E+00;
  COFD[482] = -3.91842840E-01;
  COFD[483] = 1.69262542E-02;
  COFD[484] = -1.86335873E+01;
  COFD[485] = 4.53572533E+00;
  COFD[486] = -3.73386925E-01;
  COFD[487] = 1.61678881E-02;
  COFD[488] = -1.86424488E+01;
  COFD[489] = 4.53572533E+00;
  COFD[490] = -3.73386925E-01;
  COFD[491] = 1.61678881E-02;
  COFD[492] = -1.64169341E+01;
  COFD[493] = 3.89309916E+00;
  COFD[494] = -2.93528188E-01;
  COFD[495] = 1.28463177E-02;
  COFD[496] = -2.05184780E+01;
  COFD[497] = 5.18417470E+00;
  COFD[498] = -4.49491573E-01;
  COFD[499] = 1.91438508E-02;
  COFD[500] = -2.05184780E+01;
  COFD[501] = 5.18417470E+00;
  COFD[502] = -4.49491573E-01;
  COFD[503] = 1.91438508E-02;
  COFD[504] = -1.52414498E+01;
  COFD[505] = 3.35922578E+00;
  COFD[506] = -2.25181399E-01;
  COFD[507] = 9.92132878E-03;
  COFD[508] = -1.62380132E+01;
  COFD[509] = 3.72612300E+00;
  COFD[510] = -2.71663673E-01;
  COFD[511] = 1.18889643E-02;
  COFD[512] = -1.09629118E+01;
  COFD[513] = 2.30836460E+00;
  COFD[514] = -8.76339315E-02;
  COFD[515] = 3.90878445E-03;
  COFD[516] = -1.34248014E+01;
  COFD[517] = 3.48624238E+00;
  COFD[518] = -2.41554467E-01;
  COFD[519] = 1.06263545E-02;
  COFD[520] = -1.32243932E+01;
  COFD[521] = 2.90778936E+00;
  COFD[522] = -1.67388544E-01;
  COFD[523] = 7.45220609E-03;
  COFD[524] = -1.43340695E+01;
  COFD[525] = 3.17651319E+00;
  COFD[526] = -2.02028974E-01;
  COFD[527] = 8.94232502E-03;
  COFD[528] = -1.32399011E+01;
  COFD[529] = 2.90778936E+00;
  COFD[530] = -1.67388544E-01;
  COFD[531] = 7.45220609E-03;
  COFD[532] = -1.94252948E+01;
  COFD[533] = 5.16013126E+00;
  COFD[534] = -4.46824543E-01;
  COFD[535] = 1.90464887E-02;
  COFD[536] = -1.43393972E+01;
  COFD[537] = 3.17651319E+00;
  COFD[538] = -2.02028974E-01;
  COFD[539] = 8.94232502E-03;
  COFD[540] = -1.43444614E+01;
  COFD[541] = 3.17651319E+00;
  COFD[542] = -2.02028974E-01;
  COFD[543] = 8.94232502E-03;
  COFD[544] = -1.30738728E+01;
  COFD[545] = 2.80913567E+00;
  COFD[546] = -1.54536855E-01;
  COFD[547] = 6.89359313E-03;
  COFD[548] = -1.31686478E+01;
  COFD[549] = 2.90778936E+00;
  COFD[550] = -1.67388544E-01;
  COFD[551] = 7.45220609E-03;
  COFD[552] = -1.50724583E+01;
  COFD[553] = 3.47945612E+00;
  COFD[554] = -2.40703722E-01;
  COFD[555] = 1.05907441E-02;
  COFD[556] = -1.50724583E+01;
  COFD[557] = 3.47945612E+00;
  COFD[558] = -2.40703722E-01;
  COFD[559] = 1.05907441E-02;
  COFD[560] = -1.50911746E+01;
  COFD[561] = 3.47945612E+00;
  COFD[562] = -2.40703722E-01;
  COFD[563] = 1.05907441E-02;
  COFD[564] = -1.50420909E+01;
  COFD[565] = 3.46140064E+00;
  COFD[566] = -2.38440092E-01;
  COFD[567] = 1.04960087E-02;
  COFD[568] = -1.41191170E+01;
  COFD[569] = 3.08120012E+00;
  COFD[570] = -1.89629903E-01;
  COFD[571] = 8.40361952E-03;
  COFD[572] = -1.70756953E+01;
  COFD[573] = 4.14240922E+00;
  COFD[574] = -3.25239774E-01;
  COFD[575] = 1.41980687E-02;
  COFD[576] = -1.94507789E+01;
  COFD[577] = 5.02567894E+00;
  COFD[578] = -4.32045169E-01;
  COFD[579] = 1.85132214E-02;
  COFD[580] = -1.94570202E+01;
  COFD[581] = 5.02567894E+00;
  COFD[582] = -4.32045169E-01;
  COFD[583] = 1.85132214E-02;
  COFD[584] = -1.88378792E+01;
  COFD[585] = 4.79683898E+00;
  COFD[586] = -4.04829719E-01;
  COFD[587] = 1.74325475E-02;
  COFD[588] = -1.88378792E+01;
  COFD[589] = 4.79683898E+00;
  COFD[590] = -4.04829719E-01;
  COFD[591] = 1.74325475E-02;
  COFD[592] = -1.93566163E+01;
  COFD[593] = 4.98286777E+00;
  COFD[594] = -4.26970814E-01;
  COFD[595] = 1.83122917E-02;
  COFD[596] = -1.65596362E+01;
  COFD[597] = 3.95035840E+00;
  COFD[598] = -3.00959418E-01;
  COFD[599] = 1.31692593E-02;
  COFD[600] = -1.65675292E+01;
  COFD[601] = 3.95035840E+00;
  COFD[602] = -3.00959418E-01;
  COFD[603] = 1.31692593E-02;
  COFD[604] = -1.65749465E+01;
  COFD[605] = 3.95035840E+00;
  COFD[606] = -3.00959418E-01;
  COFD[607] = 1.31692593E-02;
  COFD[608] = -1.74984410E+01;
  COFD[609] = 4.29676909E+00;
  COFD[610] = -3.44085306E-01;
  COFD[611] = 1.49671135E-02;
  COFD[612] = -1.72691436E+01;
  COFD[613] = 4.17889917E+00;
  COFD[614] = -3.29752510E-01;
  COFD[615] = 1.43850275E-02;
  COFD[616] = -1.72753698E+01;
  COFD[617] = 4.17889917E+00;
  COFD[618] = -3.29752510E-01;
  COFD[619] = 1.43850275E-02;
  COFD[620] = -1.49718147E+01;
  COFD[621] = 3.52327209E+00;
  COFD[622] = -2.46286208E-01;
  COFD[623] = 1.08285963E-02;
  COFD[624] = -1.91102567E+01;
  COFD[625] = 4.84384483E+00;
  COFD[626] = -4.10265575E-01;
  COFD[627] = 1.76414287E-02;
  COFD[628] = -1.91102567E+01;
  COFD[629] = 4.84384483E+00;
  COFD[630] = -4.10265575E-01;
  COFD[631] = 1.76414287E-02;
  COFD[632] = -1.40949183E+01;
  COFD[633] = 3.07549274E+00;
  COFD[634] = -1.88889344E-01;
  COFD[635] = 8.37152866E-03;
  COFD[636] = -1.49826737E+01;
  COFD[637] = 3.41988961E+00;
  COFD[638] = -2.33128386E-01;
  COFD[639] = 1.02689994E-02;
  COFD[640] = -1.71983144E+01;
  COFD[641] = 4.63881440E+00;
  COFD[642] = -3.86139677E-01;
  COFD[643] = 1.66955099E-02;
  COFD[644] = -1.95739720E+01;
  COFD[645] = 5.61113230E+00;
  COFD[646] = -4.90190187E-01;
  COFD[647] = 2.03260675E-02;
  COFD[648] = -1.94093476E+01;
  COFD[649] = 5.16013126E+00;
  COFD[650] = -4.46824543E-01;
  COFD[651] = 1.90464887E-02;
  COFD[652] = -2.12652444E+01;
  COFD[653] = 5.59961822E+00;
  COFD[654] = -4.91624856E-01;
  COFD[655] = 2.05035546E-02;
  COFD[656] = -1.94252948E+01;
  COFD[657] = 5.16013126E+00;
  COFD[658] = -4.46824543E-01;
  COFD[659] = 1.90464887E-02;
  COFD[660] = -1.19157788E+01;
  COFD[661] = 9.28952533E-01;
  COFD[662] = 2.42107483E-01;
  COFD[663] = -1.59824150E-02;
  COFD[664] = -2.06463656E+01;
  COFD[665] = 5.41688482E+00;
  COFD[666] = -4.73387188E-01;
  COFD[667] = 1.99280175E-02;
  COFD[668] = -2.06516251E+01;
  COFD[669] = 5.41688482E+00;
  COFD[670] = -4.73387188E-01;
  COFD[671] = 1.99280175E-02;
  COFD[672] = -1.92003756E+01;
  COFD[673] = 5.05708283E+00;
  COFD[674] = -4.35739290E-01;
  COFD[675] = 1.86583205E-02;
  COFD[676] = -1.93521338E+01;
  COFD[677] = 5.16013126E+00;
  COFD[678] = -4.46824543E-01;
  COFD[679] = 1.90464887E-02;
  COFD[680] = -2.12639169E+01;
  COFD[681] = 5.61184117E+00;
  COFD[682] = -4.90532156E-01;
  COFD[683] = 2.03507922E-02;
  COFD[684] = -2.12639169E+01;
  COFD[685] = 5.61184117E+00;
  COFD[686] = -4.90532156E-01;
  COFD[687] = 2.03507922E-02;
  COFD[688] = -2.12831283E+01;
  COFD[689] = 5.61184117E+00;
  COFD[690] = -4.90532156E-01;
  COFD[691] = 2.03507922E-02;
  COFD[692] = -2.14087360E+01;
  COFD[693] = 5.57281993E+00;
  COFD[694] = -4.76690860E-01;
  COFD[695] = 1.94000702E-02;
  COFD[696] = -2.11388255E+01;
  COFD[697] = 5.55529689E+00;
  COFD[698] = -4.87942530E-01;
  COFD[699] = 2.04249057E-02;
  COFD[700] = -2.07653629E+01;
  COFD[701] = 5.01091988E+00;
  COFD[702] = -3.77985581E-01;
  COFD[703] = 1.40968617E-02;
  COFD[704] = -1.77498465E+01;
  COFD[705] = 3.57475686E+00;
  COFD[706] = -1.56396297E-01;
  COFD[707] = 3.12157721E-03;
  COFD[708] = -1.77563175E+01;
  COFD[709] = 3.57475686E+00;
  COFD[710] = -1.56396297E-01;
  COFD[711] = 3.12157721E-03;
  COFD[712] = -1.65295191E+01;
  COFD[713] = 2.97569077E+00;
  COFD[714] = -6.75650795E-02;
  COFD[715] = -1.08649440E-03;
  COFD[716] = -1.65295191E+01;
  COFD[717] = 2.97569077E+00;
  COFD[718] = -6.75650795E-02;
  COFD[719] = -1.08649440E-03;
  COFD[720] = -1.80253593E+01;
  COFD[721] = 3.69199168E+00;
  COFD[722] = -1.74005516E-01;
  COFD[723] = 3.97694372E-03;
  COFD[724] = -2.15014247E+01;
  COFD[725] = 5.46737673E+00;
  COFD[726] = -4.55696085E-01;
  COFD[727] = 1.81982625E-02;
  COFD[728] = -2.15095920E+01;
  COFD[729] = 5.46737673E+00;
  COFD[730] = -4.55696085E-01;
  COFD[731] = 1.81982625E-02;
  COFD[732] = -2.15172712E+01;
  COFD[733] = 5.46737673E+00;
  COFD[734] = -4.55696085E-01;
  COFD[735] = 1.81982625E-02;
  COFD[736] = -2.08812277E+01;
  COFD[737] = 5.08859217E+00;
  COFD[738] = -3.90525428E-01;
  COFD[739] = 1.47376395E-02;
  COFD[740] = -2.12597258E+01;
  COFD[741] = 5.24930667E+00;
  COFD[742] = -4.17435088E-01;
  COFD[743] = 1.61434424E-02;
  COFD[744] = -2.12661812E+01;
  COFD[745] = 5.24930667E+00;
  COFD[746] = -4.17435088E-01;
  COFD[747] = 1.61434424E-02;
  COFD[748] = -2.10440599E+01;
  COFD[749] = 5.59806282E+00;
  COFD[750] = -4.87109535E-01;
  COFD[751] = 2.01370226E-02;
  COFD[752] = -1.87383877E+01;
  COFD[753] = 3.96926341E+00;
  COFD[754] = -2.16412264E-01;
  COFD[755] = 6.06012078E-03;
  COFD[756] = -1.87383877E+01;
  COFD[757] = 3.96926341E+00;
  COFD[758] = -2.16412264E-01;
  COFD[759] = 6.06012078E-03;
  COFD[760] = -2.10643264E+01;
  COFD[761] = 5.53614864E+00;
  COFD[762] = -4.86046753E-01;
  COFD[763] = 2.03659193E-02;
  COFD[764] = -2.12755915E+01;
  COFD[765] = 5.60381989E+00;
  COFD[766] = -4.91225459E-01;
  COFD[767] = 2.04487844E-02;
  COFD[768] = -1.18998160E+01;
  COFD[769] = 2.57507000E+00;
  COFD[770] = -1.24033737E-01;
  COFD[771] = 5.56694959E-03;
  COFD[772] = -1.46554904E+01;
  COFD[773] = 3.83606243E+00;
  COFD[774] = -2.86076532E-01;
  COFD[775] = 1.25205829E-02;
  COFD[776] = -1.43190281E+01;
  COFD[777] = 3.17651319E+00;
  COFD[778] = -2.02028974E-01;
  COFD[779] = 8.94232502E-03;
  COFD[780] = -1.55588172E+01;
  COFD[781] = 3.48070094E+00;
  COFD[782] = -2.40859499E-01;
  COFD[783] = 1.05972514E-02;
  COFD[784] = -1.43393972E+01;
  COFD[785] = 3.17651319E+00;
  COFD[786] = -2.02028974E-01;
  COFD[787] = 8.94232502E-03;
  COFD[788] = -2.06463656E+01;
  COFD[789] = 5.41688482E+00;
  COFD[790] = -4.73387188E-01;
  COFD[791] = 1.99280175E-02;
  COFD[792] = -1.55666313E+01;
  COFD[793] = 3.48070094E+00;
  COFD[794] = -2.40859499E-01;
  COFD[795] = 1.05972514E-02;
  COFD[796] = -1.55740954E+01;
  COFD[797] = 3.48070094E+00;
  COFD[798] = -2.40859499E-01;
  COFD[799] = 1.05972514E-02;
  COFD[800] = -1.40749258E+01;
  COFD[801] = 3.05837263E+00;
  COFD[802] = -1.86672802E-01;
  COFD[803] = 8.27575734E-03;
  COFD[804] = -1.42473387E+01;
  COFD[805] = 3.17651319E+00;
  COFD[806] = -2.02028974E-01;
  COFD[807] = 8.94232502E-03;
  COFD[808] = -1.63301401E+01;
  COFD[809] = 3.82388595E+00;
  COFD[810] = -2.84480724E-01;
  COFD[811] = 1.24506311E-02;
  COFD[812] = -1.63301401E+01;
  COFD[813] = 3.82388595E+00;
  COFD[814] = -2.84480724E-01;
  COFD[815] = 1.24506311E-02;
  COFD[816] = -1.63542358E+01;
  COFD[817] = 3.82388595E+00;
  COFD[818] = -2.84480724E-01;
  COFD[819] = 1.24506311E-02;
  COFD[820] = -1.62775683E+01;
  COFD[821] = 3.79163564E+00;
  COFD[822] = -2.80257365E-01;
  COFD[823] = 1.22656902E-02;
  COFD[824] = -1.52792799E+01;
  COFD[825] = 3.36790500E+00;
  COFD[826] = -2.26321740E-01;
  COFD[827] = 9.97135055E-03;
  COFD[828] = -1.84777509E+01;
  COFD[829] = 4.49330851E+00;
  COFD[830] = -3.68208715E-01;
  COFD[831] = 1.59565402E-02;
  COFD[832] = -2.08277510E+01;
  COFD[833] = 5.35267674E+00;
  COFD[834] = -4.69010505E-01;
  COFD[835] = 1.98979152E-02;
  COFD[836] = -2.08367641E+01;
  COFD[837] = 5.35267674E+00;
  COFD[838] = -4.69010505E-01;
  COFD[839] = 1.98979152E-02;
  COFD[840] = -2.02637913E+01;
  COFD[841] = 5.14984081E+00;
  COFD[842] = -4.46093018E-01;
  COFD[843] = 1.90396647E-02;
  COFD[844] = -2.02637913E+01;
  COFD[845] = 5.14984081E+00;
  COFD[846] = -4.46093018E-01;
  COFD[847] = 1.90396647E-02;
  COFD[848] = -2.07672755E+01;
  COFD[849] = 5.32244593E+00;
  COFD[850] = -4.65829403E-01;
  COFD[851] = 1.97895274E-02;
  COFD[852] = -1.78792538E+01;
  COFD[853] = 4.29613154E+00;
  COFD[854] = -3.44012526E-01;
  COFD[855] = 1.49643715E-02;
  COFD[856] = -1.78903850E+01;
  COFD[857] = 4.29613154E+00;
  COFD[858] = -3.44012526E-01;
  COFD[859] = 1.49643715E-02;
  COFD[860] = -1.79009121E+01;
  COFD[861] = 4.29613154E+00;
  COFD[862] = -3.44012526E-01;
  COFD[863] = 1.49643715E-02;
  COFD[864] = -1.89616566E+01;
  COFD[865] = 4.68595732E+00;
  COFD[866] = -3.91842840E-01;
  COFD[867] = 1.69262542E-02;
  COFD[868] = -1.86409085E+01;
  COFD[869] = 4.53572533E+00;
  COFD[870] = -3.73386925E-01;
  COFD[871] = 1.61678881E-02;
  COFD[872] = -1.86499019E+01;
  COFD[873] = 4.53572533E+00;
  COFD[874] = -3.73386925E-01;
  COFD[875] = 1.61678881E-02;
  COFD[876] = -1.64255877E+01;
  COFD[877] = 3.89309916E+00;
  COFD[878] = -2.93528188E-01;
  COFD[879] = 1.28463177E-02;
  COFD[880] = -2.05272244E+01;
  COFD[881] = 5.18417470E+00;
  COFD[882] = -4.49491573E-01;
  COFD[883] = 1.91438508E-02;
  COFD[884] = -2.05272244E+01;
  COFD[885] = 5.18417470E+00;
  COFD[886] = -4.49491573E-01;
  COFD[887] = 1.91438508E-02;
  COFD[888] = -1.52486292E+01;
  COFD[889] = 3.35922578E+00;
  COFD[890] = -2.25181399E-01;
  COFD[891] = 9.92132878E-03;
  COFD[892] = -1.62465647E+01;
  COFD[893] = 3.72612300E+00;
  COFD[894] = -2.71663673E-01;
  COFD[895] = 1.18889643E-02;
  COFD[896] = -1.19006697E+01;
  COFD[897] = 2.57507000E+00;
  COFD[898] = -1.24033737E-01;
  COFD[899] = 5.56694959E-03;
  COFD[900] = -1.46559297E+01;
  COFD[901] = 3.83606243E+00;
  COFD[902] = -2.86076532E-01;
  COFD[903] = 1.25205829E-02;
  COFD[904] = -1.43238892E+01;
  COFD[905] = 3.17651319E+00;
  COFD[906] = -2.02028974E-01;
  COFD[907] = 8.94232502E-03;
  COFD[908] = -1.55661647E+01;
  COFD[909] = 3.48070094E+00;
  COFD[910] = -2.40859499E-01;
  COFD[911] = 1.05972514E-02;
  COFD[912] = -1.43444614E+01;
  COFD[913] = 3.17651319E+00;
  COFD[914] = -2.02028974E-01;
  COFD[915] = 8.94232502E-03;
  COFD[916] = -2.06516251E+01;
  COFD[917] = 5.41688482E+00;
  COFD[918] = -4.73387188E-01;
  COFD[919] = 1.99280175E-02;
  COFD[920] = -1.55740954E+01;
  COFD[921] = 3.48070094E+00;
  COFD[922] = -2.40859499E-01;
  COFD[923] = 1.05972514E-02;
  COFD[924] = -1.55816727E+01;
  COFD[925] = 3.48070094E+00;
  COFD[926] = -2.40859499E-01;
  COFD[927] = 1.05972514E-02;
  COFD[928] = -1.40788949E+01;
  COFD[929] = 3.05837263E+00;
  COFD[930] = -1.86672802E-01;
  COFD[931] = 8.27575734E-03;
  COFD[932] = -1.42515478E+01;
  COFD[933] = 3.17651319E+00;
  COFD[934] = -2.02028974E-01;
  COFD[935] = 8.94232502E-03;
  COFD[936] = -1.63345789E+01;
  COFD[937] = 3.82388595E+00;
  COFD[938] = -2.84480724E-01;
  COFD[939] = 1.24506311E-02;
  COFD[940] = -1.63345789E+01;
  COFD[941] = 3.82388595E+00;
  COFD[942] = -2.84480724E-01;
  COFD[943] = 1.24506311E-02;
  COFD[944] = -1.63588948E+01;
  COFD[945] = 3.82388595E+00;
  COFD[946] = -2.84480724E-01;
  COFD[947] = 1.24506311E-02;
  COFD[948] = -1.62824385E+01;
  COFD[949] = 3.79163564E+00;
  COFD[950] = -2.80257365E-01;
  COFD[951] = 1.22656902E-02;
  COFD[952] = -1.52861287E+01;
  COFD[953] = 3.36790500E+00;
  COFD[954] = -2.26321740E-01;
  COFD[955] = 9.97135055E-03;
  COFD[956] = -1.84862906E+01;
  COFD[957] = 4.49330851E+00;
  COFD[958] = -3.68208715E-01;
  COFD[959] = 1.59565402E-02;
  COFD[960] = -2.08347318E+01;
  COFD[961] = 5.35267674E+00;
  COFD[962] = -4.69010505E-01;
  COFD[963] = 1.98979152E-02;
  COFD[964] = -2.08438728E+01;
  COFD[965] = 5.35267674E+00;
  COFD[966] = -4.69010505E-01;
  COFD[967] = 1.98979152E-02;
  COFD[968] = -2.02710239E+01;
  COFD[969] = 5.14984081E+00;
  COFD[970] = -4.46093018E-01;
  COFD[971] = 1.90396647E-02;
  COFD[972] = -2.02710239E+01;
  COFD[973] = 5.14984081E+00;
  COFD[974] = -4.46093018E-01;
  COFD[975] = 1.90396647E-02;
  COFD[976] = -2.07746282E+01;
  COFD[977] = 5.32244593E+00;
  COFD[978] = -4.65829403E-01;
  COFD[979] = 1.97895274E-02;
  COFD[980] = -1.78856855E+01;
  COFD[981] = 4.29613154E+00;
  COFD[982] = -3.44012526E-01;
  COFD[983] = 1.49643715E-02;
  COFD[984] = -1.78969625E+01;
  COFD[985] = 4.29613154E+00;
  COFD[986] = -3.44012526E-01;
  COFD[987] = 1.49643715E-02;
  COFD[988] = -1.79076305E+01;
  COFD[989] = 4.29613154E+00;
  COFD[990] = -3.44012526E-01;
  COFD[991] = 1.49643715E-02;
  COFD[992] = -1.89685112E+01;
  COFD[993] = 4.68595732E+00;
  COFD[994] = -3.91842840E-01;
  COFD[995] = 1.69262542E-02;
  COFD[996] = -1.86478950E+01;
  COFD[997] = 4.53572533E+00;
  COFD[998] = -3.73386925E-01;
  COFD[999] = 1.61678881E-02;
  COFD[1000] = -1.86570161E+01;
  COFD[1001] = 4.53572533E+00;
  COFD[1002] = -3.73386925E-01;
  COFD[1003] = 1.61678881E-02;
  COFD[1004] = -1.64338675E+01;
  COFD[1005] = 3.89309916E+00;
  COFD[1006] = -2.93528188E-01;
  COFD[1007] = 1.28463177E-02;
  COFD[1008] = -2.05355943E+01;
  COFD[1009] = 5.18417470E+00;
  COFD[1010] = -4.49491573E-01;
  COFD[1011] = 1.91438508E-02;
  COFD[1012] = -2.05355943E+01;
  COFD[1013] = 5.18417470E+00;
  COFD[1014] = -4.49491573E-01;
  COFD[1015] = 1.91438508E-02;
  COFD[1016] = -1.52554785E+01;
  COFD[1017] = 3.35922578E+00;
  COFD[1018] = -2.25181399E-01;
  COFD[1019] = 9.92132878E-03;
  COFD[1020] = -1.62547451E+01;
  COFD[1021] = 3.72612300E+00;
  COFD[1022] = -2.71663673E-01;
  COFD[1023] = 1.18889643E-02;
  COFD[1024] = -1.08369614E+01;
  COFD[1025] = 2.19094415E+00;
  COFD[1026] = -7.11992510E-02;
  COFD[1027] = 3.14105973E-03;
  COFD[1028] = -1.32467466E+01;
  COFD[1029] = 3.34156587E+00;
  COFD[1030] = -2.22853306E-01;
  COFD[1031] = 9.81883417E-03;
  COFD[1032] = -1.30610008E+01;
  COFD[1033] = 2.80913567E+00;
  COFD[1034] = -1.54536855E-01;
  COFD[1035] = 6.89359313E-03;
  COFD[1036] = -1.40707408E+01;
  COFD[1037] = 3.05837263E+00;
  COFD[1038] = -1.86672802E-01;
  COFD[1039] = 8.27575734E-03;
  COFD[1040] = -1.30738728E+01;
  COFD[1041] = 2.80913567E+00;
  COFD[1042] = -1.54536855E-01;
  COFD[1043] = 6.89359313E-03;
  COFD[1044] = -1.92003756E+01;
  COFD[1045] = 5.05708283E+00;
  COFD[1046] = -4.35739290E-01;
  COFD[1047] = 1.86583205E-02;
  COFD[1048] = -1.40749258E+01;
  COFD[1049] = 3.05837263E+00;
  COFD[1050] = -1.86672802E-01;
  COFD[1051] = 8.27575734E-03;
  COFD[1052] = -1.40788949E+01;
  COFD[1053] = 3.05837263E+00;
  COFD[1054] = -1.86672802E-01;
  COFD[1055] = 8.27575734E-03;
  COFD[1056] = -1.29573028E+01;
  COFD[1057] = 2.73155251E+00;
  COFD[1058] = -1.44594082E-01;
  COFD[1059] = 6.46883252E-03;
  COFD[1060] = -1.30141859E+01;
  COFD[1061] = 2.80913567E+00;
  COFD[1062] = -1.54536855E-01;
  COFD[1063] = 6.89359313E-03;
  COFD[1064] = -1.47558815E+01;
  COFD[1065] = 3.33113524E+00;
  COFD[1066] = -2.21479057E-01;
  COFD[1067] = 9.75837737E-03;
  COFD[1068] = -1.47558815E+01;
  COFD[1069] = 3.33113524E+00;
  COFD[1070] = -2.21479057E-01;
  COFD[1071] = 9.75837737E-03;
  COFD[1072] = -1.47715889E+01;
  COFD[1073] = 3.33113524E+00;
  COFD[1074] = -2.21479057E-01;
  COFD[1075] = 9.75837737E-03;
  COFD[1076] = -1.47047999E+01;
  COFD[1077] = 3.30594991E+00;
  COFD[1078] = -2.18182207E-01;
  COFD[1079] = 9.61429447E-03;
  COFD[1080] = -1.38862780E+01;
  COFD[1081] = 2.97564184E+00;
  COFD[1082] = -1.76025309E-01;
  COFD[1083] = 7.81869993E-03;
  COFD[1084] = -1.67390367E+01;
  COFD[1085] = 4.00828594E+00;
  COFD[1086] = -3.08414344E-01;
  COFD[1087] = 1.34907430E-02;
  COFD[1088] = -1.90526885E+01;
  COFD[1089] = 4.86821670E+00;
  COFD[1090] = -4.13144121E-01;
  COFD[1091] = 1.77546701E-02;
  COFD[1092] = -1.90576266E+01;
  COFD[1093] = 4.86821670E+00;
  COFD[1094] = -4.13144121E-01;
  COFD[1095] = 1.77546701E-02;
  COFD[1096] = -1.85157362E+01;
  COFD[1097] = 4.67076124E+00;
  COFD[1098] = -3.90022427E-01;
  COFD[1099] = 1.68533953E-02;
  COFD[1100] = -1.85157362E+01;
  COFD[1101] = 4.67076124E+00;
  COFD[1102] = -3.90022427E-01;
  COFD[1103] = 1.68533953E-02;
  COFD[1104] = -1.89671702E+01;
  COFD[1105] = 4.83076737E+00;
  COFD[1106] = -4.08802573E-01;
  COFD[1107] = 1.75875241E-02;
  COFD[1108] = -1.61038760E+01;
  COFD[1109] = 3.75910622E+00;
  COFD[1110] = -2.75986578E-01;
  COFD[1111] = 1.20782843E-02;
  COFD[1112] = -1.61101923E+01;
  COFD[1113] = 3.75910622E+00;
  COFD[1114] = -2.75986578E-01;
  COFD[1115] = 1.20782843E-02;
  COFD[1116] = -1.61161097E+01;
  COFD[1117] = 3.75910622E+00;
  COFD[1118] = -2.75986578E-01;
  COFD[1119] = 1.20782843E-02;
  COFD[1120] = -1.71884179E+01;
  COFD[1121] = 4.17190426E+00;
  COFD[1122] = -3.28894681E-01;
  COFD[1123] = 1.43498101E-02;
  COFD[1124] = -1.69491077E+01;
  COFD[1125] = 4.05099737E+00;
  COFD[1126] = -3.13841660E-01;
  COFD[1127] = 1.37218854E-02;
  COFD[1128] = -1.69540333E+01;
  COFD[1129] = 4.05099737E+00;
  COFD[1130] = -3.13841660E-01;
  COFD[1131] = 1.37218854E-02;
  COFD[1132] = -1.46906975E+01;
  COFD[1133] = 3.39229020E+00;
  COFD[1134] = -2.29520232E-01;
  COFD[1135] = 1.01114311E-02;
  COFD[1136] = -1.87688058E+01;
  COFD[1137] = 4.71729964E+00;
  COFD[1138] = -3.95432573E-01;
  COFD[1139] = 1.70623691E-02;
  COFD[1140] = -1.87688058E+01;
  COFD[1141] = 4.71729964E+00;
  COFD[1142] = -3.95432573E-01;
  COFD[1143] = 1.70623691E-02;
  COFD[1144] = -1.38661483E+01;
  COFD[1145] = 2.97137588E+00;
  COFD[1146] = -1.75491257E-01;
  COFD[1147] = 7.79646773E-03;
  COFD[1148] = -1.46461905E+01;
  COFD[1149] = 3.27505697E+00;
  COFD[1150] = -2.14306851E-01;
  COFD[1151] = 9.45219335E-03;
  COFD[1152] = -1.09469382E+01;
  COFD[1153] = 2.30836460E+00;
  COFD[1154] = -8.76339315E-02;
  COFD[1155] = 3.90878445E-03;
  COFD[1156] = -1.34163042E+01;
  COFD[1157] = 3.48624238E+00;
  COFD[1158] = -2.41554467E-01;
  COFD[1159] = 1.06263545E-02;
  COFD[1160] = -1.31551721E+01;
  COFD[1161] = 2.90778936E+00;
  COFD[1162] = -1.67388544E-01;
  COFD[1163] = 7.45220609E-03;
  COFD[1164] = -1.42429030E+01;
  COFD[1165] = 3.17651319E+00;
  COFD[1166] = -2.02028974E-01;
  COFD[1167] = 8.94232502E-03;
  COFD[1168] = -1.31686478E+01;
  COFD[1169] = 2.90778936E+00;
  COFD[1170] = -1.67388544E-01;
  COFD[1171] = 7.45220609E-03;
  COFD[1172] = -1.93521338E+01;
  COFD[1173] = 5.16013126E+00;
  COFD[1174] = -4.46824543E-01;
  COFD[1175] = 1.90464887E-02;
  COFD[1176] = -1.42473387E+01;
  COFD[1177] = 3.17651319E+00;
  COFD[1178] = -2.02028974E-01;
  COFD[1179] = 8.94232502E-03;
  COFD[1180] = -1.42515478E+01;
  COFD[1181] = 3.17651319E+00;
  COFD[1182] = -2.02028974E-01;
  COFD[1183] = 8.94232502E-03;
  COFD[1184] = -1.30141859E+01;
  COFD[1185] = 2.80913567E+00;
  COFD[1186] = -1.54536855E-01;
  COFD[1187] = 6.89359313E-03;
  COFD[1188] = -1.31062935E+01;
  COFD[1189] = 2.90778936E+00;
  COFD[1190] = -1.67388544E-01;
  COFD[1191] = 7.45220609E-03;
  COFD[1192] = -1.50076229E+01;
  COFD[1193] = 3.47945612E+00;
  COFD[1194] = -2.40703722E-01;
  COFD[1195] = 1.05907441E-02;
  COFD[1196] = -1.50076229E+01;
  COFD[1197] = 3.47945612E+00;
  COFD[1198] = -2.40703722E-01;
  COFD[1199] = 1.05907441E-02;
  COFD[1200] = -1.50240252E+01;
  COFD[1201] = 3.47945612E+00;
  COFD[1202] = -2.40703722E-01;
  COFD[1203] = 1.05907441E-02;
  COFD[1204] = -1.49727784E+01;
  COFD[1205] = 3.46140064E+00;
  COFD[1206] = -2.38440092E-01;
  COFD[1207] = 1.04960087E-02;
  COFD[1208] = -1.40318900E+01;
  COFD[1209] = 3.08120012E+00;
  COFD[1210] = -1.89629903E-01;
  COFD[1211] = 8.40361952E-03;
  COFD[1212] = -1.69758845E+01;
  COFD[1213] = 4.14240922E+00;
  COFD[1214] = -3.25239774E-01;
  COFD[1215] = 1.41980687E-02;
  COFD[1216] = -1.93624886E+01;
  COFD[1217] = 5.02567894E+00;
  COFD[1218] = -4.32045169E-01;
  COFD[1219] = 1.85132214E-02;
  COFD[1220] = -1.93677143E+01;
  COFD[1221] = 5.02567894E+00;
  COFD[1222] = -4.32045169E-01;
  COFD[1223] = 1.85132214E-02;
  COFD[1224] = -1.87476023E+01;
  COFD[1225] = 4.79683898E+00;
  COFD[1226] = -4.04829719E-01;
  COFD[1227] = 1.74325475E-02;
  COFD[1228] = -1.87476023E+01;
  COFD[1229] = 4.79683898E+00;
  COFD[1230] = -4.04829719E-01;
  COFD[1231] = 1.74325475E-02;
  COFD[1232] = -1.92654100E+01;
  COFD[1233] = 4.98286777E+00;
  COFD[1234] = -4.26970814E-01;
  COFD[1235] = 1.83122917E-02;
  COFD[1236] = -1.64758663E+01;
  COFD[1237] = 3.95035840E+00;
  COFD[1238] = -3.00959418E-01;
  COFD[1239] = 1.31692593E-02;
  COFD[1240] = -1.64825336E+01;
  COFD[1241] = 3.95035840E+00;
  COFD[1242] = -3.00959418E-01;
  COFD[1243] = 1.31692593E-02;
  COFD[1244] = -1.64887841E+01;
  COFD[1245] = 3.95035840E+00;
  COFD[1246] = -3.00959418E-01;
  COFD[1247] = 1.31692593E-02;
  COFD[1248] = -1.74111665E+01;
  COFD[1249] = 4.29676909E+00;
  COFD[1250] = -3.44085306E-01;
  COFD[1251] = 1.49671135E-02;
  COFD[1252] = -1.71808080E+01;
  COFD[1253] = 4.17889917E+00;
  COFD[1254] = -3.29752510E-01;
  COFD[1255] = 1.43850275E-02;
  COFD[1256] = -1.71860206E+01;
  COFD[1257] = 4.17889917E+00;
  COFD[1258] = -3.29752510E-01;
  COFD[1259] = 1.43850275E-02;
  COFD[1260] = -1.48738025E+01;
  COFD[1261] = 3.52327209E+00;
  COFD[1262] = -2.46286208E-01;
  COFD[1263] = 1.08285963E-02;
  COFD[1264] = -1.90116152E+01;
  COFD[1265] = 4.84384483E+00;
  COFD[1266] = -4.10265575E-01;
  COFD[1267] = 1.76414287E-02;
  COFD[1268] = -1.90116152E+01;
  COFD[1269] = 4.84384483E+00;
  COFD[1270] = -4.10265575E-01;
  COFD[1271] = 1.76414287E-02;
  COFD[1272] = -1.40076869E+01;
  COFD[1273] = 3.07549274E+00;
  COFD[1274] = -1.88889344E-01;
  COFD[1275] = 8.37152866E-03;
  COFD[1276] = -1.48853610E+01;
  COFD[1277] = 3.41988961E+00;
  COFD[1278] = -2.33128386E-01;
  COFD[1279] = 1.02689994E-02;
  COFD[1280] = -1.25099100E+01;
  COFD[1281] = 2.77873601E+00;
  COFD[1282] = -1.50637360E-01;
  COFD[1283] = 6.72684281E-03;
  COFD[1284] = -1.57972520E+01;
  COFD[1285] = 4.22225052E+00;
  COFD[1286] = -3.35156428E-01;
  COFD[1287] = 1.46104855E-02;
  COFD[1288] = -1.50584188E+01;
  COFD[1289] = 3.47945612E+00;
  COFD[1290] = -2.40703722E-01;
  COFD[1291] = 1.05907441E-02;
  COFD[1292] = -1.63254645E+01;
  COFD[1293] = 3.82388595E+00;
  COFD[1294] = -2.84480724E-01;
  COFD[1295] = 1.24506311E-02;
  COFD[1296] = -1.50724583E+01;
  COFD[1297] = 3.47945612E+00;
  COFD[1298] = -2.40703722E-01;
  COFD[1299] = 1.05907441E-02;
  COFD[1300] = -2.12639169E+01;
  COFD[1301] = 5.61184117E+00;
  COFD[1302] = -4.90532156E-01;
  COFD[1303] = 2.03507922E-02;
  COFD[1304] = -1.63301401E+01;
  COFD[1305] = 3.82388595E+00;
  COFD[1306] = -2.84480724E-01;
  COFD[1307] = 1.24506311E-02;
  COFD[1308] = -1.63345789E+01;
  COFD[1309] = 3.82388595E+00;
  COFD[1310] = -2.84480724E-01;
  COFD[1311] = 1.24506311E-02;
  COFD[1312] = -1.47558815E+01;
  COFD[1313] = 3.33113524E+00;
  COFD[1314] = -2.21479057E-01;
  COFD[1315] = 9.75837737E-03;
  COFD[1316] = -1.50076229E+01;
  COFD[1317] = 3.47945612E+00;
  COFD[1318] = -2.40703722E-01;
  COFD[1319] = 1.05907441E-02;
  COFD[1320] = -1.73027539E+01;
  COFD[1321] = 4.21416723E+00;
  COFD[1322] = -3.34163932E-01;
  COFD[1323] = 1.45697432E-02;
  COFD[1324] = -1.73027539E+01;
  COFD[1325] = 4.21416723E+00;
  COFD[1326] = -3.34163932E-01;
  COFD[1327] = 1.45697432E-02;
  COFD[1328] = -1.73198022E+01;
  COFD[1329] = 4.21416723E+00;
  COFD[1330] = -3.34163932E-01;
  COFD[1331] = 1.45697432E-02;
  COFD[1332] = -1.72556722E+01;
  COFD[1333] = 4.19029808E+00;
  COFD[1334] = -3.31177076E-01;
  COFD[1335] = 1.44446234E-02;
  COFD[1336] = -1.59634493E+01;
  COFD[1337] = 3.67388294E+00;
  COFD[1338] = -2.64990709E-01;
  COFD[1339] = 1.16042706E-02;
  COFD[1340] = -1.93015519E+01;
  COFD[1341] = 4.85015581E+00;
  COFD[1342] = -4.10945109E-01;
  COFD[1343] = 1.76651398E-02;
  COFD[1344] = -2.14160667E+01;
  COFD[1345] = 5.56531152E+00;
  COFD[1346] = -4.88789821E-01;
  COFD[1347] = 2.04437116E-02;
  COFD[1348] = -2.14215667E+01;
  COFD[1349] = 5.56531152E+00;
  COFD[1350] = -4.88789821E-01;
  COFD[1351] = 2.04437116E-02;
  COFD[1352] = -2.09376165E+01;
  COFD[1353] = 5.40870099E+00;
  COFD[1354] = -4.73017610E-01;
  COFD[1355] = 1.99399066E-02;
  COFD[1356] = -2.09376165E+01;
  COFD[1357] = 5.40870099E+00;
  COFD[1358] = -4.73017610E-01;
  COFD[1359] = 1.99399066E-02;
  COFD[1360] = -2.13538524E+01;
  COFD[1361] = 5.54007827E+00;
  COFD[1362] = -4.86434511E-01;
  COFD[1363] = 2.03779006E-02;
  COFD[1364] = -1.88171051E+01;
  COFD[1365] = 4.68393046E+00;
  COFD[1366] = -3.91610863E-01;
  COFD[1367] = 1.69174645E-02;
  COFD[1368] = -1.88241056E+01;
  COFD[1369] = 4.68393046E+00;
  COFD[1370] = -3.91610863E-01;
  COFD[1371] = 1.69174645E-02;
  COFD[1372] = -1.88306727E+01;
  COFD[1373] = 4.68393046E+00;
  COFD[1374] = -3.91610863E-01;
  COFD[1375] = 1.69174645E-02;
  COFD[1376] = -1.98418097E+01;
  COFD[1377] = 5.04367502E+00;
  COFD[1378] = -4.34153325E-01;
  COFD[1379] = 1.85956055E-02;
  COFD[1380] = -1.95263296E+01;
  COFD[1381] = 4.90255048E+00;
  COFD[1382] = -4.17368501E-01;
  COFD[1383] = 1.79287358E-02;
  COFD[1384] = -1.95318159E+01;
  COFD[1385] = 4.90255048E+00;
  COFD[1386] = -4.17368501E-01;
  COFD[1387] = 1.79287358E-02;
  COFD[1388] = -1.72572011E+01;
  COFD[1389] = 4.26063341E+00;
  COFD[1390] = -3.39848064E-01;
  COFD[1391] = 1.48021313E-02;
  COFD[1392] = -2.11349057E+01;
  COFD[1393] = 5.42846112E+00;
  COFD[1394] = -4.74321870E-01;
  COFD[1395] = 1.99459749E-02;
  COFD[1396] = -2.11349057E+01;
  COFD[1397] = 5.42846112E+00;
  COFD[1398] = -4.74321870E-01;
  COFD[1399] = 1.99459749E-02;
  COFD[1400] = -1.59404910E+01;
  COFD[1401] = 3.66853818E+00;
  COFD[1402] = -2.64346221E-01;
  COFD[1403] = 1.15784613E-02;
  COFD[1404] = -1.71942557E+01;
  COFD[1405] = 4.14993355E+00;
  COFD[1406] = -3.26168062E-01;
  COFD[1407] = 1.42364115E-02;
  COFD[1408] = -1.25099100E+01;
  COFD[1409] = 2.77873601E+00;
  COFD[1410] = -1.50637360E-01;
  COFD[1411] = 6.72684281E-03;
  COFD[1412] = -1.57972520E+01;
  COFD[1413] = 4.22225052E+00;
  COFD[1414] = -3.35156428E-01;
  COFD[1415] = 1.46104855E-02;
  COFD[1416] = -1.50584188E+01;
  COFD[1417] = 3.47945612E+00;
  COFD[1418] = -2.40703722E-01;
  COFD[1419] = 1.05907441E-02;
  COFD[1420] = -1.63254645E+01;
  COFD[1421] = 3.82388595E+00;
  COFD[1422] = -2.84480724E-01;
  COFD[1423] = 1.24506311E-02;
  COFD[1424] = -1.50724583E+01;
  COFD[1425] = 3.47945612E+00;
  COFD[1426] = -2.40703722E-01;
  COFD[1427] = 1.05907441E-02;
  COFD[1428] = -2.12639169E+01;
  COFD[1429] = 5.61184117E+00;
  COFD[1430] = -4.90532156E-01;
  COFD[1431] = 2.03507922E-02;
  COFD[1432] = -1.63301401E+01;
  COFD[1433] = 3.82388595E+00;
  COFD[1434] = -2.84480724E-01;
  COFD[1435] = 1.24506311E-02;
  COFD[1436] = -1.63345789E+01;
  COFD[1437] = 3.82388595E+00;
  COFD[1438] = -2.84480724E-01;
  COFD[1439] = 1.24506311E-02;
  COFD[1440] = -1.47558815E+01;
  COFD[1441] = 3.33113524E+00;
  COFD[1442] = -2.21479057E-01;
  COFD[1443] = 9.75837737E-03;
  COFD[1444] = -1.50076229E+01;
  COFD[1445] = 3.47945612E+00;
  COFD[1446] = -2.40703722E-01;
  COFD[1447] = 1.05907441E-02;
  COFD[1448] = -1.73027539E+01;
  COFD[1449] = 4.21416723E+00;
  COFD[1450] = -3.34163932E-01;
  COFD[1451] = 1.45697432E-02;
  COFD[1452] = -1.73027539E+01;
  COFD[1453] = 4.21416723E+00;
  COFD[1454] = -3.34163932E-01;
  COFD[1455] = 1.45697432E-02;
  COFD[1456] = -1.73198022E+01;
  COFD[1457] = 4.21416723E+00;
  COFD[1458] = -3.34163932E-01;
  COFD[1459] = 1.45697432E-02;
  COFD[1460] = -1.72556722E+01;
  COFD[1461] = 4.19029808E+00;
  COFD[1462] = -3.31177076E-01;
  COFD[1463] = 1.44446234E-02;
  COFD[1464] = -1.59634493E+01;
  COFD[1465] = 3.67388294E+00;
  COFD[1466] = -2.64990709E-01;
  COFD[1467] = 1.16042706E-02;
  COFD[1468] = -1.93015519E+01;
  COFD[1469] = 4.85015581E+00;
  COFD[1470] = -4.10945109E-01;
  COFD[1471] = 1.76651398E-02;
  COFD[1472] = -2.14160667E+01;
  COFD[1473] = 5.56531152E+00;
  COFD[1474] = -4.88789821E-01;
  COFD[1475] = 2.04437116E-02;
  COFD[1476] = -2.14215667E+01;
  COFD[1477] = 5.56531152E+00;
  COFD[1478] = -4.88789821E-01;
  COFD[1479] = 2.04437116E-02;
  COFD[1480] = -2.09376165E+01;
  COFD[1481] = 5.40870099E+00;
  COFD[1482] = -4.73017610E-01;
  COFD[1483] = 1.99399066E-02;
  COFD[1484] = -2.09376165E+01;
  COFD[1485] = 5.40870099E+00;
  COFD[1486] = -4.73017610E-01;
  COFD[1487] = 1.99399066E-02;
  COFD[1488] = -2.13538524E+01;
  COFD[1489] = 5.54007827E+00;
  COFD[1490] = -4.86434511E-01;
  COFD[1491] = 2.03779006E-02;
  COFD[1492] = -1.88171051E+01;
  COFD[1493] = 4.68393046E+00;
  COFD[1494] = -3.91610863E-01;
  COFD[1495] = 1.69174645E-02;
  COFD[1496] = -1.88241056E+01;
  COFD[1497] = 4.68393046E+00;
  COFD[1498] = -3.91610863E-01;
  COFD[1499] = 1.69174645E-02;
  COFD[1500] = -1.88306727E+01;
  COFD[1501] = 4.68393046E+00;
  COFD[1502] = -3.91610863E-01;
  COFD[1503] = 1.69174645E-02;
  COFD[1504] = -1.98418097E+01;
  COFD[1505] = 5.04367502E+00;
  COFD[1506] = -4.34153325E-01;
  COFD[1507] = 1.85956055E-02;
  COFD[1508] = -1.95263296E+01;
  COFD[1509] = 4.90255048E+00;
  COFD[1510] = -4.17368501E-01;
  COFD[1511] = 1.79287358E-02;
  COFD[1512] = -1.95318159E+01;
  COFD[1513] = 4.90255048E+00;
  COFD[1514] = -4.17368501E-01;
  COFD[1515] = 1.79287358E-02;
  COFD[1516] = -1.72572011E+01;
  COFD[1517] = 4.26063341E+00;
  COFD[1518] = -3.39848064E-01;
  COFD[1519] = 1.48021313E-02;
  COFD[1520] = -2.11349057E+01;
  COFD[1521] = 5.42846112E+00;
  COFD[1522] = -4.74321870E-01;
  COFD[1523] = 1.99459749E-02;
  COFD[1524] = -2.11349057E+01;
  COFD[1525] = 5.42846112E+00;
  COFD[1526] = -4.74321870E-01;
  COFD[1527] = 1.99459749E-02;
  COFD[1528] = -1.59404910E+01;
  COFD[1529] = 3.66853818E+00;
  COFD[1530] = -2.64346221E-01;
  COFD[1531] = 1.15784613E-02;
  COFD[1532] = -1.71942557E+01;
  COFD[1533] = 4.14993355E+00;
  COFD[1534] = -3.26168062E-01;
  COFD[1535] = 1.42364115E-02;
  COFD[1536] = -1.25141403E+01;
  COFD[1537] = 2.77873601E+00;
  COFD[1538] = -1.50637360E-01;
  COFD[1539] = 6.72684281E-03;
  COFD[1540] = -1.57995045E+01;
  COFD[1541] = 4.22225052E+00;
  COFD[1542] = -3.35156428E-01;
  COFD[1543] = 1.46104855E-02;
  COFD[1544] = -1.50766073E+01;
  COFD[1545] = 3.47945612E+00;
  COFD[1546] = -2.40703722E-01;
  COFD[1547] = 1.05907441E-02;
  COFD[1548] = -1.63493305E+01;
  COFD[1549] = 3.82388595E+00;
  COFD[1550] = -2.84480724E-01;
  COFD[1551] = 1.24506311E-02;
  COFD[1552] = -1.50911746E+01;
  COFD[1553] = 3.47945612E+00;
  COFD[1554] = -2.40703722E-01;
  COFD[1555] = 1.05907441E-02;
  COFD[1556] = -2.12831283E+01;
  COFD[1557] = 5.61184117E+00;
  COFD[1558] = -4.90532156E-01;
  COFD[1559] = 2.03507922E-02;
  COFD[1560] = -1.63542358E+01;
  COFD[1561] = 3.82388595E+00;
  COFD[1562] = -2.84480724E-01;
  COFD[1563] = 1.24506311E-02;
  COFD[1564] = -1.63588948E+01;
  COFD[1565] = 3.82388595E+00;
  COFD[1566] = -2.84480724E-01;
  COFD[1567] = 1.24506311E-02;
  COFD[1568] = -1.47715889E+01;
  COFD[1569] = 3.33113524E+00;
  COFD[1570] = -2.21479057E-01;
  COFD[1571] = 9.75837737E-03;
  COFD[1572] = -1.50240252E+01;
  COFD[1573] = 3.47945612E+00;
  COFD[1574] = -2.40703722E-01;
  COFD[1575] = 1.05907441E-02;
  COFD[1576] = -1.73198022E+01;
  COFD[1577] = 4.21416723E+00;
  COFD[1578] = -3.34163932E-01;
  COFD[1579] = 1.45697432E-02;
  COFD[1580] = -1.73198022E+01;
  COFD[1581] = 4.21416723E+00;
  COFD[1582] = -3.34163932E-01;
  COFD[1583] = 1.45697432E-02;
  COFD[1584] = -1.73374523E+01;
  COFD[1585] = 4.21416723E+00;
  COFD[1586] = -3.34163932E-01;
  COFD[1587] = 1.45697432E-02;
  COFD[1588] = -1.72738845E+01;
  COFD[1589] = 4.19029808E+00;
  COFD[1590] = -3.31177076E-01;
  COFD[1591] = 1.44446234E-02;
  COFD[1592] = -1.59862997E+01;
  COFD[1593] = 3.67388294E+00;
  COFD[1594] = -2.64990709E-01;
  COFD[1595] = 1.16042706E-02;
  COFD[1596] = -1.93276406E+01;
  COFD[1597] = 4.85015581E+00;
  COFD[1598] = -4.10945109E-01;
  COFD[1599] = 1.76651398E-02;
  COFD[1600] = -2.14391914E+01;
  COFD[1601] = 5.56531152E+00;
  COFD[1602] = -4.88789821E-01;
  COFD[1603] = 2.04437116E-02;
  COFD[1604] = -2.14449532E+01;
  COFD[1605] = 5.56531152E+00;
  COFD[1606] = -4.88789821E-01;
  COFD[1607] = 2.04437116E-02;
  COFD[1608] = -2.09612533E+01;
  COFD[1609] = 5.40870099E+00;
  COFD[1610] = -4.73017610E-01;
  COFD[1611] = 1.99399066E-02;
  COFD[1612] = -2.09612533E+01;
  COFD[1613] = 5.40870099E+00;
  COFD[1614] = -4.73017610E-01;
  COFD[1615] = 1.99399066E-02;
  COFD[1616] = -2.13777287E+01;
  COFD[1617] = 5.54007827E+00;
  COFD[1618] = -4.86434511E-01;
  COFD[1619] = 2.03779006E-02;
  COFD[1620] = -1.88390630E+01;
  COFD[1621] = 4.68393046E+00;
  COFD[1622] = -3.91610863E-01;
  COFD[1623] = 1.69174645E-02;
  COFD[1624] = -1.88463801E+01;
  COFD[1625] = 4.68393046E+00;
  COFD[1626] = -3.91610863E-01;
  COFD[1627] = 1.69174645E-02;
  COFD[1628] = -1.88532484E+01;
  COFD[1629] = 4.68393046E+00;
  COFD[1630] = -3.91610863E-01;
  COFD[1631] = 1.69174645E-02;
  COFD[1632] = -1.98646724E+01;
  COFD[1633] = 5.04367502E+00;
  COFD[1634] = -4.34153325E-01;
  COFD[1635] = 1.85956055E-02;
  COFD[1636] = -1.95494660E+01;
  COFD[1637] = 4.90255048E+00;
  COFD[1638] = -4.17368501E-01;
  COFD[1639] = 1.79287358E-02;
  COFD[1640] = -1.95552136E+01;
  COFD[1641] = 4.90255048E+00;
  COFD[1642] = -4.17368501E-01;
  COFD[1643] = 1.79287358E-02;
  COFD[1644] = -1.72828280E+01;
  COFD[1645] = 4.26063341E+00;
  COFD[1646] = -3.39848064E-01;
  COFD[1647] = 1.48021313E-02;
  COFD[1648] = -2.11606942E+01;
  COFD[1649] = 5.42846112E+00;
  COFD[1650] = -4.74321870E-01;
  COFD[1651] = 1.99459749E-02;
  COFD[1652] = -2.11606942E+01;
  COFD[1653] = 5.42846112E+00;
  COFD[1654] = -4.74321870E-01;
  COFD[1655] = 1.99459749E-02;
  COFD[1656] = -1.59633426E+01;
  COFD[1657] = 3.66853818E+00;
  COFD[1658] = -2.64346221E-01;
  COFD[1659] = 1.15784613E-02;
  COFD[1660] = -1.72197029E+01;
  COFD[1661] = 4.14993355E+00;
  COFD[1662] = -3.26168062E-01;
  COFD[1663] = 1.42364115E-02;
  COFD[1664] = -1.24693714E+01;
  COFD[1665] = 2.76686648E+00;
  COFD[1666] = -1.49120141E-01;
  COFD[1667] = 6.66220432E-03;
  COFD[1668] = -1.57199190E+01;
  COFD[1669] = 4.19936335E+00;
  COFD[1670] = -3.32311009E-01;
  COFD[1671] = 1.44921003E-02;
  COFD[1672] = -1.50270285E+01;
  COFD[1673] = 3.46140064E+00;
  COFD[1674] = -2.38440092E-01;
  COFD[1675] = 1.04960087E-02;
  COFD[1676] = -1.62724429E+01;
  COFD[1677] = 3.79163564E+00;
  COFD[1678] = -2.80257365E-01;
  COFD[1679] = 1.22656902E-02;
  COFD[1680] = -1.50420909E+01;
  COFD[1681] = 3.46140064E+00;
  COFD[1682] = -2.38440092E-01;
  COFD[1683] = 1.04960087E-02;
  COFD[1684] = -2.14087360E+01;
  COFD[1685] = 5.57281993E+00;
  COFD[1686] = -4.76690860E-01;
  COFD[1687] = 1.94000702E-02;
  COFD[1688] = -1.62775683E+01;
  COFD[1689] = 3.79163564E+00;
  COFD[1690] = -2.80257365E-01;
  COFD[1691] = 1.22656902E-02;
  COFD[1692] = -1.62824385E+01;
  COFD[1693] = 3.79163564E+00;
  COFD[1694] = -2.80257365E-01;
  COFD[1695] = 1.22656902E-02;
  COFD[1696] = -1.47047999E+01;
  COFD[1697] = 3.30594991E+00;
  COFD[1698] = -2.18182207E-01;
  COFD[1699] = 9.61429447E-03;
  COFD[1700] = -1.49727784E+01;
  COFD[1701] = 3.46140064E+00;
  COFD[1702] = -2.38440092E-01;
  COFD[1703] = 1.04960087E-02;
  COFD[1704] = -1.72556722E+01;
  COFD[1705] = 4.19029808E+00;
  COFD[1706] = -3.31177076E-01;
  COFD[1707] = 1.44446234E-02;
  COFD[1708] = -1.72556722E+01;
  COFD[1709] = 4.19029808E+00;
  COFD[1710] = -3.31177076E-01;
  COFD[1711] = 1.44446234E-02;
  COFD[1712] = -1.72738845E+01;
  COFD[1713] = 4.19029808E+00;
  COFD[1714] = -3.31177076E-01;
  COFD[1715] = 1.44446234E-02;
  COFD[1716] = -1.72167712E+01;
  COFD[1717] = 4.16886779E+00;
  COFD[1718] = -3.28518156E-01;
  COFD[1719] = 1.43341626E-02;
  COFD[1720] = -1.59525075E+01;
  COFD[1721] = 3.66023858E+00;
  COFD[1722] = -2.63401043E-01;
  COFD[1723] = 1.15432000E-02;
  COFD[1724] = -1.92867532E+01;
  COFD[1725] = 4.83375900E+00;
  COFD[1726] = -4.09146560E-01;
  COFD[1727] = 1.76006599E-02;
  COFD[1728] = -2.14022312E+01;
  COFD[1729] = 5.55346617E+00;
  COFD[1730] = -4.87783156E-01;
  COFD[1731] = 2.04210886E-02;
  COFD[1732] = -2.14082433E+01;
  COFD[1733] = 5.55346617E+00;
  COFD[1734] = -4.87783156E-01;
  COFD[1735] = 2.04210886E-02;
  COFD[1736] = -2.11381493E+01;
  COFD[1737] = 5.45574448E+00;
  COFD[1738] = -4.77436163E-01;
  COFD[1739] = 2.00644599E-02;
  COFD[1740] = -2.11381493E+01;
  COFD[1741] = 5.45574448E+00;
  COFD[1742] = -4.77436163E-01;
  COFD[1743] = 2.00644599E-02;
  COFD[1744] = -2.13319769E+01;
  COFD[1745] = 5.52422470E+00;
  COFD[1746] = -4.84872944E-01;
  COFD[1747] = 2.03298213E-02;
  COFD[1748] = -1.87821106E+01;
  COFD[1749] = 4.66162351E+00;
  COFD[1750] = -3.88920477E-01;
  COFD[1751] = 1.68089648E-02;
  COFD[1752] = -1.87897289E+01;
  COFD[1753] = 4.66162351E+00;
  COFD[1754] = -3.88920477E-01;
  COFD[1755] = 1.68089648E-02;
  COFD[1756] = -1.87968842E+01;
  COFD[1757] = 4.66162351E+00;
  COFD[1758] = -3.88920477E-01;
  COFD[1759] = 1.68089648E-02;
  COFD[1760] = -1.98075051E+01;
  COFD[1761] = 5.02169524E+00;
  COFD[1762] = -4.31582804E-01;
  COFD[1763] = 1.84953568E-02;
  COFD[1764] = -1.94763687E+01;
  COFD[1765] = 4.87333294E+00;
  COFD[1766] = -4.13769241E-01;
  COFD[1767] = 1.77802244E-02;
  COFD[1768] = -1.94823661E+01;
  COFD[1769] = 4.87333294E+00;
  COFD[1770] = -4.13769241E-01;
  COFD[1771] = 1.77802244E-02;
  COFD[1772] = -1.72316133E+01;
  COFD[1773] = 4.24011069E+00;
  COFD[1774] = -3.37339810E-01;
  COFD[1775] = 1.46996679E-02;
  COFD[1776] = -2.11309194E+01;
  COFD[1777] = 5.41773516E+00;
  COFD[1778] = -4.73414338E-01;
  COFD[1779] = 1.99258685E-02;
  COFD[1780] = -2.11309194E+01;
  COFD[1781] = 5.41773516E+00;
  COFD[1782] = -4.73414338E-01;
  COFD[1783] = 1.99258685E-02;
  COFD[1784] = -1.59327344E+01;
  COFD[1785] = 3.65620899E+00;
  COFD[1786] = -2.62933804E-01;
  COFD[1787] = 1.15253223E-02;
  COFD[1788] = -1.71754233E+01;
  COFD[1789] = 4.13131681E+00;
  COFD[1790] = -3.23897559E-01;
  COFD[1791] = 1.41438222E-02;
  COFD[1792] = -1.17159884E+01;
  COFD[1793] = 2.48123210E+00;
  COFD[1794] = -1.11322604E-01;
  COFD[1795] = 4.99282389E-03;
  COFD[1796] = -1.43151328E+01;
  COFD[1797] = 3.68038508E+00;
  COFD[1798] = -2.65779346E-01;
  COFD[1799] = 1.16360771E-02;
  COFD[1800] = -1.40998907E+01;
  COFD[1801] = 3.08120012E+00;
  COFD[1802] = -1.89629903E-01;
  COFD[1803] = 8.40361952E-03;
  COFD[1804] = -1.52721010E+01;
  COFD[1805] = 3.36790500E+00;
  COFD[1806] = -2.26321740E-01;
  COFD[1807] = 9.97135055E-03;
  COFD[1808] = -1.41191170E+01;
  COFD[1809] = 3.08120012E+00;
  COFD[1810] = -1.89629903E-01;
  COFD[1811] = 8.40361952E-03;
  COFD[1812] = -2.11388255E+01;
  COFD[1813] = 5.55529689E+00;
  COFD[1814] = -4.87942530E-01;
  COFD[1815] = 2.04249057E-02;
  COFD[1816] = -1.52792799E+01;
  COFD[1817] = 3.36790500E+00;
  COFD[1818] = -2.26321740E-01;
  COFD[1819] = 9.97135055E-03;
  COFD[1820] = -1.52861287E+01;
  COFD[1821] = 3.36790500E+00;
  COFD[1822] = -2.26321740E-01;
  COFD[1823] = 9.97135055E-03;
  COFD[1824] = -1.38862780E+01;
  COFD[1825] = 2.97564184E+00;
  COFD[1826] = -1.76025309E-01;
  COFD[1827] = 7.81869993E-03;
  COFD[1828] = -1.40318900E+01;
  COFD[1829] = 3.08120012E+00;
  COFD[1830] = -1.89629903E-01;
  COFD[1831] = 8.40361952E-03;
  COFD[1832] = -1.59634493E+01;
  COFD[1833] = 3.67388294E+00;
  COFD[1834] = -2.64990709E-01;
  COFD[1835] = 1.16042706E-02;
  COFD[1836] = -1.59634493E+01;
  COFD[1837] = 3.67388294E+00;
  COFD[1838] = -2.64990709E-01;
  COFD[1839] = 1.16042706E-02;
  COFD[1840] = -1.59862997E+01;
  COFD[1841] = 3.67388294E+00;
  COFD[1842] = -2.64990709E-01;
  COFD[1843] = 1.16042706E-02;
  COFD[1844] = -1.59525075E+01;
  COFD[1845] = 3.66023858E+00;
  COFD[1846] = -2.63401043E-01;
  COFD[1847] = 1.15432000E-02;
  COFD[1848] = -1.50233391E+01;
  COFD[1849] = 3.26660767E+00;
  COFD[1850] = -2.13287177E-01;
  COFD[1851] = 9.41137857E-03;
  COFD[1852] = -1.81735675E+01;
  COFD[1853] = 4.38391495E+00;
  COFD[1854] = -3.54941287E-01;
  COFD[1855] = 1.54195107E-02;
  COFD[1856] = -2.05045498E+01;
  COFD[1857] = 5.23843909E+00;
  COFD[1858] = -4.55815614E-01;
  COFD[1859] = 1.93898040E-02;
  COFD[1860] = -2.05128629E+01;
  COFD[1861] = 5.23843909E+00;
  COFD[1862] = -4.55815614E-01;
  COFD[1863] = 1.93898040E-02;
  COFD[1864] = -2.02642156E+01;
  COFD[1865] = 5.14499744E+00;
  COFD[1866] = -4.45694433E-01;
  COFD[1867] = 1.90318647E-02;
  COFD[1868] = -2.02642156E+01;
  COFD[1869] = 5.14499744E+00;
  COFD[1870] = -4.45694433E-01;
  COFD[1871] = 1.90318647E-02;
  COFD[1872] = -2.04144534E+01;
  COFD[1873] = 5.19614628E+00;
  COFD[1874] = -4.50889164E-01;
  COFD[1875] = 1.91983328E-02;
  COFD[1876] = -1.76182305E+01;
  COFD[1877] = 4.19935698E+00;
  COFD[1878] = -3.32310212E-01;
  COFD[1879] = 1.44920670E-02;
  COFD[1880] = -1.76285583E+01;
  COFD[1881] = 4.19935698E+00;
  COFD[1882] = -3.32310212E-01;
  COFD[1883] = 1.44920670E-02;
  COFD[1884] = -1.76383102E+01;
  COFD[1885] = 4.19935698E+00;
  COFD[1886] = -3.32310212E-01;
  COFD[1887] = 1.44920670E-02;
  COFD[1888] = -1.86157710E+01;
  COFD[1889] = 4.55689508E+00;
  COFD[1890] = -3.75937921E-01;
  COFD[1891] = 1.62703488E-02;
  COFD[1892] = -1.83455387E+01;
  COFD[1893] = 4.42828044E+00;
  COFD[1894] = -3.60417833E-01;
  COFD[1895] = 1.56455103E-02;
  COFD[1896] = -1.83538331E+01;
  COFD[1897] = 4.42828044E+00;
  COFD[1898] = -3.60417833E-01;
  COFD[1899] = 1.56455103E-02;
  COFD[1900] = -1.60261598E+01;
  COFD[1901] = 3.73312045E+00;
  COFD[1902] = -2.72579779E-01;
  COFD[1903] = 1.19290272E-02;
  COFD[1904] = -2.02922626E+01;
  COFD[1905] = 5.11106992E+00;
  COFD[1906] = -4.42047129E-01;
  COFD[1907] = 1.89042990E-02;
  COFD[1908] = -2.02922626E+01;
  COFD[1909] = 5.11106992E+00;
  COFD[1910] = -4.42047129E-01;
  COFD[1911] = 1.89042990E-02;
  COFD[1912] = -1.50031706E+01;
  COFD[1913] = 3.26223357E+00;
  COFD[1914] = -2.12746642E-01;
  COFD[1915] = 9.38912883E-03;
  COFD[1916] = -1.60074270E+01;
  COFD[1917] = 3.63723937E+00;
  COFD[1918] = -2.60754222E-01;
  COFD[1919] = 1.14428814E-02;
  COFD[1920] = -1.37794466E+01;
  COFD[1921] = 3.23973858E+00;
  COFD[1922] = -2.09989036E-01;
  COFD[1923] = 9.27667906E-03;
  COFD[1924] = -1.76147183E+01;
  COFD[1925] = 4.86049500E+00;
  COFD[1926] = -4.12200578E-01;
  COFD[1927] = 1.77160971E-02;
  COFD[1928] = -1.70534750E+01;
  COFD[1929] = 4.14240922E+00;
  COFD[1930] = -3.25239774E-01;
  COFD[1931] = 1.41980687E-02;
  COFD[1932] = -1.84688303E+01;
  COFD[1933] = 4.49330851E+00;
  COFD[1934] = -3.68208715E-01;
  COFD[1935] = 1.59565402E-02;
  COFD[1936] = -1.70756953E+01;
  COFD[1937] = 4.14240922E+00;
  COFD[1938] = -3.25239774E-01;
  COFD[1939] = 1.41980687E-02;
  COFD[1940] = -2.07653629E+01;
  COFD[1941] = 5.01091988E+00;
  COFD[1942] = -3.77985581E-01;
  COFD[1943] = 1.40968617E-02;
  COFD[1944] = -1.84777509E+01;
  COFD[1945] = 4.49330851E+00;
  COFD[1946] = -3.68208715E-01;
  COFD[1947] = 1.59565402E-02;
  COFD[1948] = -1.84862906E+01;
  COFD[1949] = 4.49330851E+00;
  COFD[1950] = -3.68208715E-01;
  COFD[1951] = 1.59565402E-02;
  COFD[1952] = -1.67390367E+01;
  COFD[1953] = 4.00828594E+00;
  COFD[1954] = -3.08414344E-01;
  COFD[1955] = 1.34907430E-02;
  COFD[1956] = -1.69758845E+01;
  COFD[1957] = 4.14240922E+00;
  COFD[1958] = -3.25239774E-01;
  COFD[1959] = 1.41980687E-02;
  COFD[1960] = -1.93015519E+01;
  COFD[1961] = 4.85015581E+00;
  COFD[1962] = -4.10945109E-01;
  COFD[1963] = 1.76651398E-02;
  COFD[1964] = -1.93015519E+01;
  COFD[1965] = 4.85015581E+00;
  COFD[1966] = -4.10945109E-01;
  COFD[1967] = 1.76651398E-02;
  COFD[1968] = -1.93276406E+01;
  COFD[1969] = 4.85015581E+00;
  COFD[1970] = -4.10945109E-01;
  COFD[1971] = 1.76651398E-02;
  COFD[1972] = -1.92867532E+01;
  COFD[1973] = 4.83375900E+00;
  COFD[1974] = -4.09146560E-01;
  COFD[1975] = 1.76006599E-02;
  COFD[1976] = -1.81735675E+01;
  COFD[1977] = 4.38391495E+00;
  COFD[1978] = -3.54941287E-01;
  COFD[1979] = 1.54195107E-02;
  COFD[1980] = -2.13425604E+01;
  COFD[1981] = 5.40460130E+00;
  COFD[1982] = -4.72718910E-01;
  COFD[1983] = 1.99362717E-02;
  COFD[1984] = -2.19215472E+01;
  COFD[1985] = 5.45216133E+00;
  COFD[1986] = -4.52916925E-01;
  COFD[1987] = 1.80456400E-02;
  COFD[1988] = -2.19317665E+01;
  COFD[1989] = 5.45216133E+00;
  COFD[1990] = -4.52916925E-01;
  COFD[1991] = 1.80456400E-02;
  COFD[1992] = -2.20420967E+01;
  COFD[1993] = 5.52708328E+00;
  COFD[1994] = -4.68000799E-01;
  COFD[1995] = 1.89131903E-02;
  COFD[1996] = -2.20420967E+01;
  COFD[1997] = 5.52708328E+00;
  COFD[1998] = -4.68000799E-01;
  COFD[1999] = 1.89131903E-02;
  COFD[2000] = -2.20063523E+01;
  COFD[2001] = 5.48540187E+00;
  COFD[2002] = -4.58962148E-01;
  COFD[2003] = 1.83770355E-02;
  COFD[2004] = -2.09066295E+01;
  COFD[2005] = 5.30153901E+00;
  COFD[2006] = -4.63335119E-01;
  COFD[2007] = 1.96897053E-02;
  COFD[2008] = -2.09191230E+01;
  COFD[2009] = 5.30153901E+00;
  COFD[2010] = -4.63335119E-01;
  COFD[2011] = 1.96897053E-02;
  COFD[2012] = -2.09309702E+01;
  COFD[2013] = 5.30153901E+00;
  COFD[2014] = -4.63335119E-01;
  COFD[2015] = 1.96897053E-02;
  COFD[2016] = -2.16802565E+01;
  COFD[2017] = 5.52918296E+00;
  COFD[2018] = -4.85360709E-01;
  COFD[2019] = 2.03448006E-02;
  COFD[2020] = -2.14224440E+01;
  COFD[2021] = 5.41729961E+00;
  COFD[2022] = -4.73400281E-01;
  COFD[2023] = 1.99269567E-02;
  COFD[2024] = -2.14326420E+01;
  COFD[2025] = 5.41729961E+00;
  COFD[2026] = -4.73400281E-01;
  COFD[2027] = 1.99269567E-02;
  COFD[2028] = -1.94485902E+01;
  COFD[2029] = 4.91446566E+00;
  COFD[2030] = -4.18837152E-01;
  COFD[2031] = 1.79893537E-02;
  COFD[2032] = -2.22116629E+01;
  COFD[2033] = 5.54251230E+00;
  COFD[2034] = -4.70946314E-01;
  COFD[2035] = 1.90785869E-02;
  COFD[2036] = -2.22116629E+01;
  COFD[2037] = 5.54251230E+00;
  COFD[2038] = -4.70946314E-01;
  COFD[2039] = 1.90785869E-02;
  COFD[2040] = -1.81432499E+01;
  COFD[2041] = 4.37565431E+00;
  COFD[2042] = -3.53906025E-01;
  COFD[2043] = 1.53760786E-02;
  COFD[2044] = -1.93483786E+01;
  COFD[2045] = 4.79506290E+00;
  COFD[2046] = -4.04621659E-01;
  COFD[2047] = 1.74244230E-02;
  COFD[2048] = -1.60517517E+01;
  COFD[2049] = 4.11188603E+00;
  COFD[2050] = -3.21540884E-01;
  COFD[2051] = 1.40482564E-02;
  COFD[2052] = -1.97544605E+01;
  COFD[2053] = 5.56931926E+00;
  COFD[2054] = -4.89105511E-01;
  COFD[2055] = 2.04493129E-02;
  COFD[2056] = -1.94313018E+01;
  COFD[2057] = 5.02567894E+00;
  COFD[2058] = -4.32045169E-01;
  COFD[2059] = 1.85132214E-02;
  COFD[2060] = -2.08204356E+01;
  COFD[2061] = 5.35267674E+00;
  COFD[2062] = -4.69010505E-01;
  COFD[2063] = 1.98979152E-02;
  COFD[2064] = -1.94507789E+01;
  COFD[2065] = 5.02567894E+00;
  COFD[2066] = -4.32045169E-01;
  COFD[2067] = 1.85132214E-02;
  COFD[2068] = -1.77498465E+01;
  COFD[2069] = 3.57475686E+00;
  COFD[2070] = -1.56396297E-01;
  COFD[2071] = 3.12157721E-03;
  COFD[2072] = -2.08277510E+01;
  COFD[2073] = 5.35267674E+00;
  COFD[2074] = -4.69010505E-01;
  COFD[2075] = 1.98979152E-02;
  COFD[2076] = -2.08347318E+01;
  COFD[2077] = 5.35267674E+00;
  COFD[2078] = -4.69010505E-01;
  COFD[2079] = 1.98979152E-02;
  COFD[2080] = -1.90526885E+01;
  COFD[2081] = 4.86821670E+00;
  COFD[2082] = -4.13144121E-01;
  COFD[2083] = 1.77546701E-02;
  COFD[2084] = -1.93624886E+01;
  COFD[2085] = 5.02567894E+00;
  COFD[2086] = -4.32045169E-01;
  COFD[2087] = 1.85132214E-02;
  COFD[2088] = -2.14160667E+01;
  COFD[2089] = 5.56531152E+00;
  COFD[2090] = -4.88789821E-01;
  COFD[2091] = 2.04437116E-02;
  COFD[2092] = -2.14160667E+01;
  COFD[2093] = 5.56531152E+00;
  COFD[2094] = -4.88789821E-01;
  COFD[2095] = 2.04437116E-02;
  COFD[2096] = -2.14391914E+01;
  COFD[2097] = 5.56531152E+00;
  COFD[2098] = -4.88789821E-01;
  COFD[2099] = 2.04437116E-02;
  COFD[2100] = -2.14022312E+01;
  COFD[2101] = 5.55346617E+00;
  COFD[2102] = -4.87783156E-01;
  COFD[2103] = 2.04210886E-02;
  COFD[2104] = -2.05045498E+01;
  COFD[2105] = 5.23843909E+00;
  COFD[2106] = -4.55815614E-01;
  COFD[2107] = 1.93898040E-02;
  COFD[2108] = -2.19215472E+01;
  COFD[2109] = 5.45216133E+00;
  COFD[2110] = -4.52916925E-01;
  COFD[2111] = 1.80456400E-02;
  COFD[2112] = -1.90328637E+01;
  COFD[2113] = 3.99221757E+00;
  COFD[2114] = -2.19854880E-01;
  COFD[2115] = 6.22736279E-03;
  COFD[2116] = -1.90413276E+01;
  COFD[2117] = 3.99221757E+00;
  COFD[2118] = -2.19854880E-01;
  COFD[2119] = 6.22736279E-03;
  COFD[2120] = -2.01801599E+01;
  COFD[2121] = 4.53183330E+00;
  COFD[2122] = -3.02186760E-01;
  COFD[2123] = 1.02756490E-02;
  COFD[2124] = -2.01801599E+01;
  COFD[2125] = 4.53183330E+00;
  COFD[2126] = -3.02186760E-01;
  COFD[2127] = 1.02756490E-02;
  COFD[2128] = -1.93125597E+01;
  COFD[2129] = 4.10954793E+00;
  COFD[2130] = -2.37523329E-01;
  COFD[2131] = 7.08858141E-03;
  COFD[2132] = -2.19851281E+01;
  COFD[2133] = 5.55935694E+00;
  COFD[2134] = -4.74154740E-01;
  COFD[2135] = 1.92584304E-02;
  COFD[2136] = -2.19956299E+01;
  COFD[2137] = 5.55935694E+00;
  COFD[2138] = -4.74154740E-01;
  COFD[2139] = 1.92584304E-02;
  COFD[2140] = -2.20055495E+01;
  COFD[2141] = 5.55935694E+00;
  COFD[2142] = -4.74154740E-01;
  COFD[2143] = 1.92584304E-02;
  COFD[2144] = -2.16296327E+01;
  COFD[2145] = 5.29019717E+00;
  COFD[2146] = -4.24502606E-01;
  COFD[2147] = 1.65197343E-02;
  COFD[2148] = -2.19229146E+01;
  COFD[2149] = 5.41841631E+00;
  COFD[2150] = -4.46818971E-01;
  COFD[2151] = 1.77127652E-02;
  COFD[2152] = -2.19313596E+01;
  COFD[2153] = 5.41841631E+00;
  COFD[2154] = -4.46818971E-01;
  COFD[2155] = 1.77127652E-02;
  COFD[2156] = -2.14204113E+01;
  COFD[2157] = 5.59268435E+00;
  COFD[2158] = -4.91232974E-01;
  COFD[2159] = 2.05064746E-02;
  COFD[2160] = -2.00914970E+01;
  COFD[2161] = 4.41511629E+00;
  COFD[2162] = -2.84086963E-01;
  COFD[2163] = 9.37586971E-03;
  COFD[2164] = -2.00914970E+01;
  COFD[2165] = 4.41511629E+00;
  COFD[2166] = -2.84086963E-01;
  COFD[2167] = 9.37586971E-03;
  COFD[2168] = -2.04750606E+01;
  COFD[2169] = 5.23112374E+00;
  COFD[2170] = -4.54967682E-01;
  COFD[2171] = 1.93570423E-02;
  COFD[2172] = -2.14255154E+01;
  COFD[2173] = 5.52240865E+00;
  COFD[2174] = -4.84699537E-01;
  COFD[2175] = 2.03247833E-02;
  COFD[2176] = -1.60528433E+01;
  COFD[2177] = 4.11188603E+00;
  COFD[2178] = -3.21540884E-01;
  COFD[2179] = 1.40482564E-02;
  COFD[2180] = -1.97550243E+01;
  COFD[2181] = 5.56931926E+00;
  COFD[2182] = -4.89105511E-01;
  COFD[2183] = 2.04493129E-02;
  COFD[2184] = -1.94373032E+01;
  COFD[2185] = 5.02567894E+00;
  COFD[2186] = -4.32045169E-01;
  COFD[2187] = 1.85132214E-02;
  COFD[2188] = -2.08293167E+01;
  COFD[2189] = 5.35267674E+00;
  COFD[2190] = -4.69010505E-01;
  COFD[2191] = 1.98979152E-02;
  COFD[2192] = -1.94570202E+01;
  COFD[2193] = 5.02567894E+00;
  COFD[2194] = -4.32045169E-01;
  COFD[2195] = 1.85132214E-02;
  COFD[2196] = -1.77563175E+01;
  COFD[2197] = 3.57475686E+00;
  COFD[2198] = -1.56396297E-01;
  COFD[2199] = 3.12157721E-03;
  COFD[2200] = -2.08367641E+01;
  COFD[2201] = 5.35267674E+00;
  COFD[2202] = -4.69010505E-01;
  COFD[2203] = 1.98979152E-02;
  COFD[2204] = -2.08438728E+01;
  COFD[2205] = 5.35267674E+00;
  COFD[2206] = -4.69010505E-01;
  COFD[2207] = 1.98979152E-02;
  COFD[2208] = -1.90576266E+01;
  COFD[2209] = 4.86821670E+00;
  COFD[2210] = -4.13144121E-01;
  COFD[2211] = 1.77546701E-02;
  COFD[2212] = -1.93677143E+01;
  COFD[2213] = 5.02567894E+00;
  COFD[2214] = -4.32045169E-01;
  COFD[2215] = 1.85132214E-02;
  COFD[2216] = -2.14215667E+01;
  COFD[2217] = 5.56531152E+00;
  COFD[2218] = -4.88789821E-01;
  COFD[2219] = 2.04437116E-02;
  COFD[2220] = -2.14215667E+01;
  COFD[2221] = 5.56531152E+00;
  COFD[2222] = -4.88789821E-01;
  COFD[2223] = 2.04437116E-02;
  COFD[2224] = -2.14449532E+01;
  COFD[2225] = 5.56531152E+00;
  COFD[2226] = -4.88789821E-01;
  COFD[2227] = 2.04437116E-02;
  COFD[2228] = -2.14082433E+01;
  COFD[2229] = 5.55346617E+00;
  COFD[2230] = -4.87783156E-01;
  COFD[2231] = 2.04210886E-02;
  COFD[2232] = -2.05128629E+01;
  COFD[2233] = 5.23843909E+00;
  COFD[2234] = -4.55815614E-01;
  COFD[2235] = 1.93898040E-02;
  COFD[2236] = -2.19317665E+01;
  COFD[2237] = 5.45216133E+00;
  COFD[2238] = -4.52916925E-01;
  COFD[2239] = 1.80456400E-02;
  COFD[2240] = -1.90413276E+01;
  COFD[2241] = 3.99221757E+00;
  COFD[2242] = -2.19854880E-01;
  COFD[2243] = 6.22736279E-03;
  COFD[2244] = -1.90499374E+01;
  COFD[2245] = 3.99221757E+00;
  COFD[2246] = -2.19854880E-01;
  COFD[2247] = 6.22736279E-03;
  COFD[2248] = -2.01889105E+01;
  COFD[2249] = 4.53183330E+00;
  COFD[2250] = -3.02186760E-01;
  COFD[2251] = 1.02756490E-02;
  COFD[2252] = -2.01889105E+01;
  COFD[2253] = 4.53183330E+00;
  COFD[2254] = -3.02186760E-01;
  COFD[2255] = 1.02756490E-02;
  COFD[2256] = -1.93214466E+01;
  COFD[2257] = 4.10954793E+00;
  COFD[2258] = -2.37523329E-01;
  COFD[2259] = 7.08858141E-03;
  COFD[2260] = -2.19929626E+01;
  COFD[2261] = 5.55935694E+00;
  COFD[2262] = -4.74154740E-01;
  COFD[2263] = 1.92584304E-02;
  COFD[2264] = -2.20036321E+01;
  COFD[2265] = 5.55935694E+00;
  COFD[2266] = -4.74154740E-01;
  COFD[2267] = 1.92584304E-02;
  COFD[2268] = -2.20137133E+01;
  COFD[2269] = 5.55935694E+00;
  COFD[2270] = -4.74154740E-01;
  COFD[2271] = 1.92584304E-02;
  COFD[2272] = -2.16379525E+01;
  COFD[2273] = 5.29019717E+00;
  COFD[2274] = -4.24502606E-01;
  COFD[2275] = 1.65197343E-02;
  COFD[2276] = -2.19313850E+01;
  COFD[2277] = 5.41841631E+00;
  COFD[2278] = -4.46818971E-01;
  COFD[2279] = 1.77127652E-02;
  COFD[2280] = -2.19399756E+01;
  COFD[2281] = 5.41841631E+00;
  COFD[2282] = -4.46818971E-01;
  COFD[2283] = 1.77127652E-02;
  COFD[2284] = -2.14303411E+01;
  COFD[2285] = 5.59268435E+00;
  COFD[2286] = -4.91232974E-01;
  COFD[2287] = 2.05064746E-02;
  COFD[2288] = -2.01015275E+01;
  COFD[2289] = 4.41511629E+00;
  COFD[2290] = -2.84086963E-01;
  COFD[2291] = 9.37586971E-03;
  COFD[2292] = -2.01015275E+01;
  COFD[2293] = 4.41511629E+00;
  COFD[2294] = -2.84086963E-01;
  COFD[2295] = 9.37586971E-03;
  COFD[2296] = -2.04833743E+01;
  COFD[2297] = 5.23112374E+00;
  COFD[2298] = -4.54967682E-01;
  COFD[2299] = 1.93570423E-02;
  COFD[2300] = -2.14353342E+01;
  COFD[2301] = 5.52240865E+00;
  COFD[2302] = -4.84699537E-01;
  COFD[2303] = 2.03247833E-02;
  COFD[2304] = -1.58456453E+01;
  COFD[2305] = 4.02074796E+00;
  COFD[2306] = -3.10018539E-01;
  COFD[2307] = 1.35599559E-02;
  COFD[2308] = -1.92718738E+01;
  COFD[2309] = 5.41172124E+00;
  COFD[2310] = -4.73213887E-01;
  COFD[2311] = 1.99405473E-02;
  COFD[2312] = -1.88179325E+01;
  COFD[2313] = 4.79683898E+00;
  COFD[2314] = -4.04829719E-01;
  COFD[2315] = 1.74325475E-02;
  COFD[2316] = -2.04928875E+01;
  COFD[2317] = 5.22397941E+00;
  COFD[2318] = -4.54138181E-01;
  COFD[2319] = 1.93249289E-02;
  COFD[2320] = -1.88378792E+01;
  COFD[2321] = 4.79683898E+00;
  COFD[2322] = -4.04829719E-01;
  COFD[2323] = 1.74325475E-02;
  COFD[2324] = -1.65295191E+01;
  COFD[2325] = 2.97569077E+00;
  COFD[2326] = -6.75650795E-02;
  COFD[2327] = -1.08649440E-03;
  COFD[2328] = -2.02637913E+01;
  COFD[2329] = 5.14984081E+00;
  COFD[2330] = -4.46093018E-01;
  COFD[2331] = 1.90396647E-02;
  COFD[2332] = -2.02710239E+01;
  COFD[2333] = 5.14984081E+00;
  COFD[2334] = -4.46093018E-01;
  COFD[2335] = 1.90396647E-02;
  COFD[2336] = -1.85157362E+01;
  COFD[2337] = 4.67076124E+00;
  COFD[2338] = -3.90022427E-01;
  COFD[2339] = 1.68533953E-02;
  COFD[2340] = -1.87476023E+01;
  COFD[2341] = 4.79683898E+00;
  COFD[2342] = -4.04829719E-01;
  COFD[2343] = 1.74325475E-02;
  COFD[2344] = -2.09376165E+01;
  COFD[2345] = 5.40870099E+00;
  COFD[2346] = -4.73017610E-01;
  COFD[2347] = 1.99399066E-02;
  COFD[2348] = -2.09376165E+01;
  COFD[2349] = 5.40870099E+00;
  COFD[2350] = -4.73017610E-01;
  COFD[2351] = 1.99399066E-02;
  COFD[2352] = -2.09612533E+01;
  COFD[2353] = 5.40870099E+00;
  COFD[2354] = -4.73017610E-01;
  COFD[2355] = 1.99399066E-02;
  COFD[2356] = -2.11381493E+01;
  COFD[2357] = 5.45574448E+00;
  COFD[2358] = -4.77436163E-01;
  COFD[2359] = 2.00644599E-02;
  COFD[2360] = -2.02642156E+01;
  COFD[2361] = 5.14499744E+00;
  COFD[2362] = -4.45694433E-01;
  COFD[2363] = 1.90318647E-02;
  COFD[2364] = -2.20420967E+01;
  COFD[2365] = 5.52708328E+00;
  COFD[2366] = -4.68000799E-01;
  COFD[2367] = 1.89131903E-02;
  COFD[2368] = -2.01801599E+01;
  COFD[2369] = 4.53183330E+00;
  COFD[2370] = -3.02186760E-01;
  COFD[2371] = 1.02756490E-02;
  COFD[2372] = -2.01889105E+01;
  COFD[2373] = 4.53183330E+00;
  COFD[2374] = -3.02186760E-01;
  COFD[2375] = 1.02756490E-02;
  COFD[2376] = -1.95876943E+01;
  COFD[2377] = 4.27642977E+00;
  COFD[2378] = -2.68040785E-01;
  COFD[2379] = 8.77649540E-03;
  COFD[2380] = -1.95876943E+01;
  COFD[2381] = 4.27642977E+00;
  COFD[2382] = -2.68040785E-01;
  COFD[2383] = 8.77649540E-03;
  COFD[2384] = -2.03598994E+01;
  COFD[2385] = 4.60682543E+00;
  COFD[2386] = -3.13971634E-01;
  COFD[2387] = 1.08661011E-02;
  COFD[2388] = -2.19383355E+01;
  COFD[2389] = 5.59157589E+00;
  COFD[2390] = -4.85617912E-01;
  COFD[2391] = 2.00461138E-02;
  COFD[2392] = -2.19491665E+01;
  COFD[2393] = 5.59157589E+00;
  COFD[2394] = -4.85617912E-01;
  COFD[2395] = 2.00461138E-02;
  COFD[2396] = -2.19594037E+01;
  COFD[2397] = 5.59157589E+00;
  COFD[2398] = -4.85617912E-01;
  COFD[2399] = 2.00461138E-02;
  COFD[2400] = -2.19670810E+01;
  COFD[2401] = 5.48847873E+00;
  COFD[2402] = -4.59558930E-01;
  COFD[2403] = 1.84107961E-02;
  COFD[2404] = -2.21069995E+01;
  COFD[2405] = 5.55072945E+00;
  COFD[2406] = -4.72525345E-01;
  COFD[2407] = 1.91674202E-02;
  COFD[2408] = -2.21157308E+01;
  COFD[2409] = 5.55072945E+00;
  COFD[2410] = -4.72525345E-01;
  COFD[2411] = 1.91674202E-02;
  COFD[2412] = -2.09241584E+01;
  COFD[2413] = 5.42316225E+00;
  COFD[2414] = -4.73702801E-01;
  COFD[2415] = 1.99217718E-02;
  COFD[2416] = -2.09222393E+01;
  COFD[2417] = 4.82184721E+00;
  COFD[2418] = -3.48128875E-01;
  COFD[2419] = 1.25918978E-02;
  COFD[2420] = -2.09222393E+01;
  COFD[2421] = 4.82184721E+00;
  COFD[2422] = -3.48128875E-01;
  COFD[2423] = 1.25918978E-02;
  COFD[2424] = -2.02268939E+01;
  COFD[2425] = 5.13632099E+00;
  COFD[2426] = -4.44839130E-01;
  COFD[2427] = 1.90058356E-02;
  COFD[2428] = -2.10026942E+01;
  COFD[2429] = 5.38326647E+00;
  COFD[2430] = -4.71201048E-01;
  COFD[2431] = 1.99207516E-02;
  COFD[2432] = -1.58456453E+01;
  COFD[2433] = 4.02074796E+00;
  COFD[2434] = -3.10018539E-01;
  COFD[2435] = 1.35599559E-02;
  COFD[2436] = -1.92718738E+01;
  COFD[2437] = 5.41172124E+00;
  COFD[2438] = -4.73213887E-01;
  COFD[2439] = 1.99405473E-02;
  COFD[2440] = -1.88179325E+01;
  COFD[2441] = 4.79683898E+00;
  COFD[2442] = -4.04829719E-01;
  COFD[2443] = 1.74325475E-02;
  COFD[2444] = -2.04928875E+01;
  COFD[2445] = 5.22397941E+00;
  COFD[2446] = -4.54138181E-01;
  COFD[2447] = 1.93249289E-02;
  COFD[2448] = -1.88378792E+01;
  COFD[2449] = 4.79683898E+00;
  COFD[2450] = -4.04829719E-01;
  COFD[2451] = 1.74325475E-02;
  COFD[2452] = -1.65295191E+01;
  COFD[2453] = 2.97569077E+00;
  COFD[2454] = -6.75650795E-02;
  COFD[2455] = -1.08649440E-03;
  COFD[2456] = -2.02637913E+01;
  COFD[2457] = 5.14984081E+00;
  COFD[2458] = -4.46093018E-01;
  COFD[2459] = 1.90396647E-02;
  COFD[2460] = -2.02710239E+01;
  COFD[2461] = 5.14984081E+00;
  COFD[2462] = -4.46093018E-01;
  COFD[2463] = 1.90396647E-02;
  COFD[2464] = -1.85157362E+01;
  COFD[2465] = 4.67076124E+00;
  COFD[2466] = -3.90022427E-01;
  COFD[2467] = 1.68533953E-02;
  COFD[2468] = -1.87476023E+01;
  COFD[2469] = 4.79683898E+00;
  COFD[2470] = -4.04829719E-01;
  COFD[2471] = 1.74325475E-02;
  COFD[2472] = -2.09376165E+01;
  COFD[2473] = 5.40870099E+00;
  COFD[2474] = -4.73017610E-01;
  COFD[2475] = 1.99399066E-02;
  COFD[2476] = -2.09376165E+01;
  COFD[2477] = 5.40870099E+00;
  COFD[2478] = -4.73017610E-01;
  COFD[2479] = 1.99399066E-02;
  COFD[2480] = -2.09612533E+01;
  COFD[2481] = 5.40870099E+00;
  COFD[2482] = -4.73017610E-01;
  COFD[2483] = 1.99399066E-02;
  COFD[2484] = -2.11381493E+01;
  COFD[2485] = 5.45574448E+00;
  COFD[2486] = -4.77436163E-01;
  COFD[2487] = 2.00644599E-02;
  COFD[2488] = -2.02642156E+01;
  COFD[2489] = 5.14499744E+00;
  COFD[2490] = -4.45694433E-01;
  COFD[2491] = 1.90318647E-02;
  COFD[2492] = -2.20420967E+01;
  COFD[2493] = 5.52708328E+00;
  COFD[2494] = -4.68000799E-01;
  COFD[2495] = 1.89131903E-02;
  COFD[2496] = -2.01801599E+01;
  COFD[2497] = 4.53183330E+00;
  COFD[2498] = -3.02186760E-01;
  COFD[2499] = 1.02756490E-02;
  COFD[2500] = -2.01889105E+01;
  COFD[2501] = 4.53183330E+00;
  COFD[2502] = -3.02186760E-01;
  COFD[2503] = 1.02756490E-02;
  COFD[2504] = -1.95876943E+01;
  COFD[2505] = 4.27642977E+00;
  COFD[2506] = -2.68040785E-01;
  COFD[2507] = 8.77649540E-03;
  COFD[2508] = -1.95876943E+01;
  COFD[2509] = 4.27642977E+00;
  COFD[2510] = -2.68040785E-01;
  COFD[2511] = 8.77649540E-03;
  COFD[2512] = -2.03598994E+01;
  COFD[2513] = 4.60682543E+00;
  COFD[2514] = -3.13971634E-01;
  COFD[2515] = 1.08661011E-02;
  COFD[2516] = -2.19383355E+01;
  COFD[2517] = 5.59157589E+00;
  COFD[2518] = -4.85617912E-01;
  COFD[2519] = 2.00461138E-02;
  COFD[2520] = -2.19491665E+01;
  COFD[2521] = 5.59157589E+00;
  COFD[2522] = -4.85617912E-01;
  COFD[2523] = 2.00461138E-02;
  COFD[2524] = -2.19594037E+01;
  COFD[2525] = 5.59157589E+00;
  COFD[2526] = -4.85617912E-01;
  COFD[2527] = 2.00461138E-02;
  COFD[2528] = -2.19670810E+01;
  COFD[2529] = 5.48847873E+00;
  COFD[2530] = -4.59558930E-01;
  COFD[2531] = 1.84107961E-02;
  COFD[2532] = -2.21069995E+01;
  COFD[2533] = 5.55072945E+00;
  COFD[2534] = -4.72525345E-01;
  COFD[2535] = 1.91674202E-02;
  COFD[2536] = -2.21157308E+01;
  COFD[2537] = 5.55072945E+00;
  COFD[2538] = -4.72525345E-01;
  COFD[2539] = 1.91674202E-02;
  COFD[2540] = -2.09241584E+01;
  COFD[2541] = 5.42316225E+00;
  COFD[2542] = -4.73702801E-01;
  COFD[2543] = 1.99217718E-02;
  COFD[2544] = -2.09222393E+01;
  COFD[2545] = 4.82184721E+00;
  COFD[2546] = -3.48128875E-01;
  COFD[2547] = 1.25918978E-02;
  COFD[2548] = -2.09222393E+01;
  COFD[2549] = 4.82184721E+00;
  COFD[2550] = -3.48128875E-01;
  COFD[2551] = 1.25918978E-02;
  COFD[2552] = -2.02268939E+01;
  COFD[2553] = 5.13632099E+00;
  COFD[2554] = -4.44839130E-01;
  COFD[2555] = 1.90058356E-02;
  COFD[2556] = -2.10026942E+01;
  COFD[2557] = 5.38326647E+00;
  COFD[2558] = -4.71201048E-01;
  COFD[2559] = 1.99207516E-02;
  COFD[2560] = -1.59537397E+01;
  COFD[2561] = 4.07051484E+00;
  COFD[2562] = -3.16303109E-01;
  COFD[2563] = 1.38259377E-02;
  COFD[2564] = -1.96866259E+01;
  COFD[2565] = 5.54637286E+00;
  COFD[2566] = -4.87070324E-01;
  COFD[2567] = 2.03983467E-02;
  COFD[2568] = -1.93364494E+01;
  COFD[2569] = 4.98286777E+00;
  COFD[2570] = -4.26970814E-01;
  COFD[2571] = 1.83122917E-02;
  COFD[2572] = -2.07595763E+01;
  COFD[2573] = 5.32244593E+00;
  COFD[2574] = -4.65829403E-01;
  COFD[2575] = 1.97895274E-02;
  COFD[2576] = -1.93566163E+01;
  COFD[2577] = 4.98286777E+00;
  COFD[2578] = -4.26970814E-01;
  COFD[2579] = 1.83122917E-02;
  COFD[2580] = -1.80253593E+01;
  COFD[2581] = 3.69199168E+00;
  COFD[2582] = -1.74005516E-01;
  COFD[2583] = 3.97694372E-03;
  COFD[2584] = -2.07672755E+01;
  COFD[2585] = 5.32244593E+00;
  COFD[2586] = -4.65829403E-01;
  COFD[2587] = 1.97895274E-02;
  COFD[2588] = -2.07746282E+01;
  COFD[2589] = 5.32244593E+00;
  COFD[2590] = -4.65829403E-01;
  COFD[2591] = 1.97895274E-02;
  COFD[2592] = -1.89671702E+01;
  COFD[2593] = 4.83076737E+00;
  COFD[2594] = -4.08802573E-01;
  COFD[2595] = 1.75875241E-02;
  COFD[2596] = -1.92654100E+01;
  COFD[2597] = 4.98286777E+00;
  COFD[2598] = -4.26970814E-01;
  COFD[2599] = 1.83122917E-02;
  COFD[2600] = -2.13538524E+01;
  COFD[2601] = 5.54007827E+00;
  COFD[2602] = -4.86434511E-01;
  COFD[2603] = 2.03779006E-02;
  COFD[2604] = -2.13538524E+01;
  COFD[2605] = 5.54007827E+00;
  COFD[2606] = -4.86434511E-01;
  COFD[2607] = 2.03779006E-02;
  COFD[2608] = -2.13777287E+01;
  COFD[2609] = 5.54007827E+00;
  COFD[2610] = -4.86434511E-01;
  COFD[2611] = 2.03779006E-02;
  COFD[2612] = -2.13319769E+01;
  COFD[2613] = 5.52422470E+00;
  COFD[2614] = -4.84872944E-01;
  COFD[2615] = 2.03298213E-02;
  COFD[2616] = -2.04144534E+01;
  COFD[2617] = 5.19614628E+00;
  COFD[2618] = -4.50889164E-01;
  COFD[2619] = 1.91983328E-02;
  COFD[2620] = -2.20063523E+01;
  COFD[2621] = 5.48540187E+00;
  COFD[2622] = -4.58962148E-01;
  COFD[2623] = 1.83770355E-02;
  COFD[2624] = -1.93125597E+01;
  COFD[2625] = 4.10954793E+00;
  COFD[2626] = -2.37523329E-01;
  COFD[2627] = 7.08858141E-03;
  COFD[2628] = -1.93214466E+01;
  COFD[2629] = 4.10954793E+00;
  COFD[2630] = -2.37523329E-01;
  COFD[2631] = 7.08858141E-03;
  COFD[2632] = -2.03598994E+01;
  COFD[2633] = 4.60682543E+00;
  COFD[2634] = -3.13971634E-01;
  COFD[2635] = 1.08661011E-02;
  COFD[2636] = -2.03598994E+01;
  COFD[2637] = 4.60682543E+00;
  COFD[2638] = -3.13971634E-01;
  COFD[2639] = 1.08661011E-02;
  COFD[2640] = -1.95785091E+01;
  COFD[2641] = 4.22062499E+00;
  COFD[2642] = -2.54326872E-01;
  COFD[2643] = 7.91017784E-03;
  COFD[2644] = -2.20378410E+01;
  COFD[2645] = 5.58129885E+00;
  COFD[2646] = -4.78532921E-01;
  COFD[2647] = 1.95095699E-02;
  COFD[2648] = -2.20488281E+01;
  COFD[2649] = 5.58129885E+00;
  COFD[2650] = -4.78532921E-01;
  COFD[2651] = 1.95095699E-02;
  COFD[2652] = -2.20592159E+01;
  COFD[2653] = 5.58129885E+00;
  COFD[2654] = -4.78532921E-01;
  COFD[2655] = 1.95095699E-02;
  COFD[2656] = -2.17419173E+01;
  COFD[2657] = 5.33732875E+00;
  COFD[2658] = -4.32453425E-01;
  COFD[2659] = 1.69373833E-02;
  COFD[2660] = -2.20028153E+01;
  COFD[2661] = 5.45178028E+00;
  COFD[2662] = -4.52847771E-01;
  COFD[2663] = 1.80418544E-02;
  COFD[2664] = -2.20116826E+01;
  COFD[2665] = 5.45178028E+00;
  COFD[2666] = -4.52847771E-01;
  COFD[2667] = 1.80418544E-02;
  COFD[2668] = -2.13796243E+01;
  COFD[2669] = 5.56978987E+00;
  COFD[2670] = -4.89141980E-01;
  COFD[2671] = 2.04499210E-02;
  COFD[2672] = -2.03036345E+01;
  COFD[2673] = 4.50250781E+00;
  COFD[2674] = -2.97622106E-01;
  COFD[2675] = 1.00481473E-02;
  COFD[2676] = -2.03036345E+01;
  COFD[2677] = 4.50250781E+00;
  COFD[2678] = -2.97622106E-01;
  COFD[2679] = 1.00481473E-02;
  COFD[2680] = -2.03844292E+01;
  COFD[2681] = 5.18856872E+00;
  COFD[2682] = -4.50001829E-01;
  COFD[2683] = 1.91636142E-02;
  COFD[2684] = -2.13502433E+01;
  COFD[2685] = 5.48617067E+00;
  COFD[2686] = -4.80816776E-01;
  COFD[2687] = 2.01887868E-02;
  COFD[2688] = -1.34695507E+01;
  COFD[2689] = 3.09379603E+00;
  COFD[2690] = -1.91268635E-01;
  COFD[2691] = 8.47480224E-03;
  COFD[2692] = -1.72224880E+01;
  COFD[2693] = 4.69060745E+00;
  COFD[2694] = -3.92369888E-01;
  COFD[2695] = 1.69459661E-02;
  COFD[2696] = -1.65412223E+01;
  COFD[2697] = 3.95035840E+00;
  COFD[2698] = -3.00959418E-01;
  COFD[2699] = 1.31692593E-02;
  COFD[2700] = -1.78725064E+01;
  COFD[2701] = 4.29613154E+00;
  COFD[2702] = -3.44012526E-01;
  COFD[2703] = 1.49643715E-02;
  COFD[2704] = -1.65596362E+01;
  COFD[2705] = 3.95035840E+00;
  COFD[2706] = -3.00959418E-01;
  COFD[2707] = 1.31692593E-02;
  COFD[2708] = -2.15014247E+01;
  COFD[2709] = 5.46737673E+00;
  COFD[2710] = -4.55696085E-01;
  COFD[2711] = 1.81982625E-02;
  COFD[2712] = -1.78792538E+01;
  COFD[2713] = 4.29613154E+00;
  COFD[2714] = -3.44012526E-01;
  COFD[2715] = 1.49643715E-02;
  COFD[2716] = -1.78856855E+01;
  COFD[2717] = 4.29613154E+00;
  COFD[2718] = -3.44012526E-01;
  COFD[2719] = 1.49643715E-02;
  COFD[2720] = -1.61038760E+01;
  COFD[2721] = 3.75910622E+00;
  COFD[2722] = -2.75986578E-01;
  COFD[2723] = 1.20782843E-02;
  COFD[2724] = -1.64758663E+01;
  COFD[2725] = 3.95035840E+00;
  COFD[2726] = -3.00959418E-01;
  COFD[2727] = 1.31692593E-02;
  COFD[2728] = -1.88171051E+01;
  COFD[2729] = 4.68393046E+00;
  COFD[2730] = -3.91610863E-01;
  COFD[2731] = 1.69174645E-02;
  COFD[2732] = -1.88171051E+01;
  COFD[2733] = 4.68393046E+00;
  COFD[2734] = -3.91610863E-01;
  COFD[2735] = 1.69174645E-02;
  COFD[2736] = -1.88390630E+01;
  COFD[2737] = 4.68393046E+00;
  COFD[2738] = -3.91610863E-01;
  COFD[2739] = 1.69174645E-02;
  COFD[2740] = -1.87821106E+01;
  COFD[2741] = 4.66162351E+00;
  COFD[2742] = -3.88920477E-01;
  COFD[2743] = 1.68089648E-02;
  COFD[2744] = -1.76182305E+01;
  COFD[2745] = 4.19935698E+00;
  COFD[2746] = -3.32310212E-01;
  COFD[2747] = 1.44920670E-02;
  COFD[2748] = -2.09066295E+01;
  COFD[2749] = 5.30153901E+00;
  COFD[2750] = -4.63335119E-01;
  COFD[2751] = 1.96897053E-02;
  COFD[2752] = -2.19851281E+01;
  COFD[2753] = 5.55935694E+00;
  COFD[2754] = -4.74154740E-01;
  COFD[2755] = 1.92584304E-02;
  COFD[2756] = -2.19929626E+01;
  COFD[2757] = 5.55935694E+00;
  COFD[2758] = -4.74154740E-01;
  COFD[2759] = 1.92584304E-02;
  COFD[2760] = -2.19383355E+01;
  COFD[2761] = 5.59157589E+00;
  COFD[2762] = -4.85617912E-01;
  COFD[2763] = 2.00461138E-02;
  COFD[2764] = -2.19383355E+01;
  COFD[2765] = 5.59157589E+00;
  COFD[2766] = -4.85617912E-01;
  COFD[2767] = 2.00461138E-02;
  COFD[2768] = -2.20378410E+01;
  COFD[2769] = 5.58129885E+00;
  COFD[2770] = -4.78532921E-01;
  COFD[2771] = 1.95095699E-02;
  COFD[2772] = -2.03569508E+01;
  COFD[2773] = 5.13263469E+00;
  COFD[2774] = -4.44457285E-01;
  COFD[2775] = 1.89932102E-02;
  COFD[2776] = -2.03667239E+01;
  COFD[2777] = 5.13263469E+00;
  COFD[2778] = -4.44457285E-01;
  COFD[2779] = 1.89932102E-02;
  COFD[2780] = -2.03759419E+01;
  COFD[2781] = 5.13263469E+00;
  COFD[2782] = -4.44457285E-01;
  COFD[2783] = 1.89932102E-02;
  COFD[2784] = -2.12017989E+01;
  COFD[2785] = 5.39823225E+00;
  COFD[2786] = -4.72294645E-01;
  COFD[2787] = 1.99340225E-02;
  COFD[2788] = -2.10759137E+01;
  COFD[2789] = 5.34286099E+00;
  COFD[2790] = -4.68100992E-01;
  COFD[2791] = 1.98731399E-02;
  COFD[2792] = -2.10837302E+01;
  COFD[2793] = 5.34286099E+00;
  COFD[2794] = -4.68100992E-01;
  COFD[2795] = 1.98731399E-02;
  COFD[2796] = -1.88524334E+01;
  COFD[2797] = 4.72476764E+00;
  COFD[2798] = -3.96306836E-01;
  COFD[2799] = 1.70964541E-02;
  COFD[2800] = -2.20942443E+01;
  COFD[2801] = 5.58360799E+00;
  COFD[2802] = -4.82701436E-01;
  COFD[2803] = 1.98437922E-02;
  COFD[2804] = -2.20942443E+01;
  COFD[2805] = 5.58360799E+00;
  COFD[2806] = -4.82701436E-01;
  COFD[2807] = 1.98437922E-02;
  COFD[2808] = -1.75898787E+01;
  COFD[2809] = 4.19171952E+00;
  COFD[2810] = -3.31354810E-01;
  COFD[2811] = 1.44520623E-02;
  COFD[2812] = -1.87596973E+01;
  COFD[2813] = 4.61078776E+00;
  COFD[2814] = -3.82625667E-01;
  COFD[2815] = 1.65478601E-02;
  COFD[2816] = -1.34709956E+01;
  COFD[2817] = 3.09379603E+00;
  COFD[2818] = -1.91268635E-01;
  COFD[2819] = 8.47480224E-03;
  COFD[2820] = -1.72232379E+01;
  COFD[2821] = 4.69060745E+00;
  COFD[2822] = -3.92369888E-01;
  COFD[2823] = 1.69459661E-02;
  COFD[2824] = -1.65488277E+01;
  COFD[2825] = 3.95035840E+00;
  COFD[2826] = -3.00959418E-01;
  COFD[2827] = 1.31692593E-02;
  COFD[2828] = -1.78834868E+01;
  COFD[2829] = 4.29613154E+00;
  COFD[2830] = -3.44012526E-01;
  COFD[2831] = 1.49643715E-02;
  COFD[2832] = -1.65675292E+01;
  COFD[2833] = 3.95035840E+00;
  COFD[2834] = -3.00959418E-01;
  COFD[2835] = 1.31692593E-02;
  COFD[2836] = -2.15095920E+01;
  COFD[2837] = 5.46737673E+00;
  COFD[2838] = -4.55696085E-01;
  COFD[2839] = 1.81982625E-02;
  COFD[2840] = -1.78903850E+01;
  COFD[2841] = 4.29613154E+00;
  COFD[2842] = -3.44012526E-01;
  COFD[2843] = 1.49643715E-02;
  COFD[2844] = -1.78969625E+01;
  COFD[2845] = 4.29613154E+00;
  COFD[2846] = -3.44012526E-01;
  COFD[2847] = 1.49643715E-02;
  COFD[2848] = -1.61101923E+01;
  COFD[2849] = 3.75910622E+00;
  COFD[2850] = -2.75986578E-01;
  COFD[2851] = 1.20782843E-02;
  COFD[2852] = -1.64825336E+01;
  COFD[2853] = 3.95035840E+00;
  COFD[2854] = -3.00959418E-01;
  COFD[2855] = 1.31692593E-02;
  COFD[2856] = -1.88241056E+01;
  COFD[2857] = 4.68393046E+00;
  COFD[2858] = -3.91610863E-01;
  COFD[2859] = 1.69174645E-02;
  COFD[2860] = -1.88241056E+01;
  COFD[2861] = 4.68393046E+00;
  COFD[2862] = -3.91610863E-01;
  COFD[2863] = 1.69174645E-02;
  COFD[2864] = -1.88463801E+01;
  COFD[2865] = 4.68393046E+00;
  COFD[2866] = -3.91610863E-01;
  COFD[2867] = 1.69174645E-02;
  COFD[2868] = -1.87897289E+01;
  COFD[2869] = 4.66162351E+00;
  COFD[2870] = -3.88920477E-01;
  COFD[2871] = 1.68089648E-02;
  COFD[2872] = -1.76285583E+01;
  COFD[2873] = 4.19935698E+00;
  COFD[2874] = -3.32310212E-01;
  COFD[2875] = 1.44920670E-02;
  COFD[2876] = -2.09191230E+01;
  COFD[2877] = 5.30153901E+00;
  COFD[2878] = -4.63335119E-01;
  COFD[2879] = 1.96897053E-02;
  COFD[2880] = -2.19956299E+01;
  COFD[2881] = 5.55935694E+00;
  COFD[2882] = -4.74154740E-01;
  COFD[2883] = 1.92584304E-02;
  COFD[2884] = -2.20036321E+01;
  COFD[2885] = 5.55935694E+00;
  COFD[2886] = -4.74154740E-01;
  COFD[2887] = 1.92584304E-02;
  COFD[2888] = -2.19491665E+01;
  COFD[2889] = 5.59157589E+00;
  COFD[2890] = -4.85617912E-01;
  COFD[2891] = 2.00461138E-02;
  COFD[2892] = -2.19491665E+01;
  COFD[2893] = 5.59157589E+00;
  COFD[2894] = -4.85617912E-01;
  COFD[2895] = 2.00461138E-02;
  COFD[2896] = -2.20488281E+01;
  COFD[2897] = 5.58129885E+00;
  COFD[2898] = -4.78532921E-01;
  COFD[2899] = 1.95095699E-02;
  COFD[2900] = -2.03667239E+01;
  COFD[2901] = 5.13263469E+00;
  COFD[2902] = -4.44457285E-01;
  COFD[2903] = 1.89932102E-02;
  COFD[2904] = -2.03766918E+01;
  COFD[2905] = 5.13263469E+00;
  COFD[2906] = -4.44457285E-01;
  COFD[2907] = 1.89932102E-02;
  COFD[2908] = -2.03860971E+01;
  COFD[2909] = 5.13263469E+00;
  COFD[2910] = -4.44457285E-01;
  COFD[2911] = 1.89932102E-02;
  COFD[2912] = -2.12121345E+01;
  COFD[2913] = 5.39823225E+00;
  COFD[2914] = -4.72294645E-01;
  COFD[2915] = 1.99340225E-02;
  COFD[2916] = -2.10864229E+01;
  COFD[2917] = 5.34286099E+00;
  COFD[2918] = -4.68100992E-01;
  COFD[2919] = 1.98731399E-02;
  COFD[2920] = -2.10944068E+01;
  COFD[2921] = 5.34286099E+00;
  COFD[2922] = -4.68100992E-01;
  COFD[2923] = 1.98731399E-02;
  COFD[2924] = -1.88646025E+01;
  COFD[2925] = 4.72476764E+00;
  COFD[2926] = -3.96306836E-01;
  COFD[2927] = 1.70964541E-02;
  COFD[2928] = -2.21065263E+01;
  COFD[2929] = 5.58360799E+00;
  COFD[2930] = -4.82701436E-01;
  COFD[2931] = 1.98437922E-02;
  COFD[2932] = -2.21065263E+01;
  COFD[2933] = 5.58360799E+00;
  COFD[2934] = -4.82701436E-01;
  COFD[2935] = 1.98437922E-02;
  COFD[2936] = -1.76002073E+01;
  COFD[2937] = 4.19171952E+00;
  COFD[2938] = -3.31354810E-01;
  COFD[2939] = 1.44520623E-02;
  COFD[2940] = -1.87717415E+01;
  COFD[2941] = 4.61078776E+00;
  COFD[2942] = -3.82625667E-01;
  COFD[2943] = 1.65478601E-02;
  COFD[2944] = -1.34723365E+01;
  COFD[2945] = 3.09379603E+00;
  COFD[2946] = -1.91268635E-01;
  COFD[2947] = 8.47480224E-03;
  COFD[2948] = -1.72239329E+01;
  COFD[2949] = 4.69060745E+00;
  COFD[2950] = -3.92369888E-01;
  COFD[2951] = 1.69459661E-02;
  COFD[2952] = -1.65559708E+01;
  COFD[2953] = 3.95035840E+00;
  COFD[2954] = -3.00959418E-01;
  COFD[2955] = 1.31692593E-02;
  COFD[2956] = -1.78938681E+01;
  COFD[2957] = 4.29613154E+00;
  COFD[2958] = -3.44012526E-01;
  COFD[2959] = 1.49643715E-02;
  COFD[2960] = -1.65749465E+01;
  COFD[2961] = 3.95035840E+00;
  COFD[2962] = -3.00959418E-01;
  COFD[2963] = 1.31692593E-02;
  COFD[2964] = -2.15172712E+01;
  COFD[2965] = 5.46737673E+00;
  COFD[2966] = -4.55696085E-01;
  COFD[2967] = 1.81982625E-02;
  COFD[2968] = -1.79009121E+01;
  COFD[2969] = 4.29613154E+00;
  COFD[2970] = -3.44012526E-01;
  COFD[2971] = 1.49643715E-02;
  COFD[2972] = -1.79076305E+01;
  COFD[2973] = 4.29613154E+00;
  COFD[2974] = -3.44012526E-01;
  COFD[2975] = 1.49643715E-02;
  COFD[2976] = -1.61161097E+01;
  COFD[2977] = 3.75910622E+00;
  COFD[2978] = -2.75986578E-01;
  COFD[2979] = 1.20782843E-02;
  COFD[2980] = -1.64887841E+01;
  COFD[2981] = 3.95035840E+00;
  COFD[2982] = -3.00959418E-01;
  COFD[2983] = 1.31692593E-02;
  COFD[2984] = -1.88306727E+01;
  COFD[2985] = 4.68393046E+00;
  COFD[2986] = -3.91610863E-01;
  COFD[2987] = 1.69174645E-02;
  COFD[2988] = -1.88306727E+01;
  COFD[2989] = 4.68393046E+00;
  COFD[2990] = -3.91610863E-01;
  COFD[2991] = 1.69174645E-02;
  COFD[2992] = -1.88532484E+01;
  COFD[2993] = 4.68393046E+00;
  COFD[2994] = -3.91610863E-01;
  COFD[2995] = 1.69174645E-02;
  COFD[2996] = -1.87968842E+01;
  COFD[2997] = 4.66162351E+00;
  COFD[2998] = -3.88920477E-01;
  COFD[2999] = 1.68089648E-02;
  COFD[3000] = -1.76383102E+01;
  COFD[3001] = 4.19935698E+00;
  COFD[3002] = -3.32310212E-01;
  COFD[3003] = 1.44920670E-02;
  COFD[3004] = -2.09309702E+01;
  COFD[3005] = 5.30153901E+00;
  COFD[3006] = -4.63335119E-01;
  COFD[3007] = 1.96897053E-02;
  COFD[3008] = -2.20055495E+01;
  COFD[3009] = 5.55935694E+00;
  COFD[3010] = -4.74154740E-01;
  COFD[3011] = 1.92584304E-02;
  COFD[3012] = -2.20137133E+01;
  COFD[3013] = 5.55935694E+00;
  COFD[3014] = -4.74154740E-01;
  COFD[3015] = 1.92584304E-02;
  COFD[3016] = -2.19594037E+01;
  COFD[3017] = 5.59157589E+00;
  COFD[3018] = -4.85617912E-01;
  COFD[3019] = 2.00461138E-02;
  COFD[3020] = -2.19594037E+01;
  COFD[3021] = 5.59157589E+00;
  COFD[3022] = -4.85617912E-01;
  COFD[3023] = 2.00461138E-02;
  COFD[3024] = -2.20592159E+01;
  COFD[3025] = 5.58129885E+00;
  COFD[3026] = -4.78532921E-01;
  COFD[3027] = 1.95095699E-02;
  COFD[3028] = -2.03759419E+01;
  COFD[3029] = 5.13263469E+00;
  COFD[3030] = -4.44457285E-01;
  COFD[3031] = 1.89932102E-02;
  COFD[3032] = -2.03860971E+01;
  COFD[3033] = 5.13263469E+00;
  COFD[3034] = -4.44457285E-01;
  COFD[3035] = 1.89932102E-02;
  COFD[3036] = -2.03956828E+01;
  COFD[3037] = 5.13263469E+00;
  COFD[3038] = -4.44457285E-01;
  COFD[3039] = 1.89932102E-02;
  COFD[3040] = -2.12218938E+01;
  COFD[3041] = 5.39823225E+00;
  COFD[3042] = -4.72294645E-01;
  COFD[3043] = 1.99340225E-02;
  COFD[3044] = -2.10963496E+01;
  COFD[3045] = 5.34286099E+00;
  COFD[3046] = -4.68100992E-01;
  COFD[3047] = 1.98731399E-02;
  COFD[3048] = -2.11044949E+01;
  COFD[3049] = 5.34286099E+00;
  COFD[3050] = -4.68100992E-01;
  COFD[3051] = 1.98731399E-02;
  COFD[3052] = -1.88761346E+01;
  COFD[3053] = 4.72476764E+00;
  COFD[3054] = -3.96306836E-01;
  COFD[3055] = 1.70964541E-02;
  COFD[3056] = -2.21181680E+01;
  COFD[3057] = 5.58360799E+00;
  COFD[3058] = -4.82701436E-01;
  COFD[3059] = 1.98437922E-02;
  COFD[3060] = -2.21181680E+01;
  COFD[3061] = 5.58360799E+00;
  COFD[3062] = -4.82701436E-01;
  COFD[3063] = 1.98437922E-02;
  COFD[3064] = -1.76099599E+01;
  COFD[3065] = 4.19171952E+00;
  COFD[3066] = -3.31354810E-01;
  COFD[3067] = 1.44520623E-02;
  COFD[3068] = -1.87831526E+01;
  COFD[3069] = 4.61078776E+00;
  COFD[3070] = -3.82625667E-01;
  COFD[3071] = 1.65478601E-02;
  COFD[3072] = -1.42229344E+01;
  COFD[3073] = 3.38669384E+00;
  COFD[3074] = -2.28784122E-01;
  COFD[3075] = 1.00790953E-02;
  COFD[3076] = -1.82252070E+01;
  COFD[3077] = 5.05237312E+00;
  COFD[3078] = -4.35182396E-01;
  COFD[3079] = 1.86363074E-02;
  COFD[3080] = -1.74792034E+01;
  COFD[3081] = 4.29676909E+00;
  COFD[3082] = -3.44085306E-01;
  COFD[3083] = 1.49671135E-02;
  COFD[3084] = -1.89544717E+01;
  COFD[3085] = 4.68595732E+00;
  COFD[3086] = -3.91842840E-01;
  COFD[3087] = 1.69262542E-02;
  COFD[3088] = -1.74984410E+01;
  COFD[3089] = 4.29676909E+00;
  COFD[3090] = -3.44085306E-01;
  COFD[3091] = 1.49671135E-02;
  COFD[3092] = -2.08812277E+01;
  COFD[3093] = 5.08859217E+00;
  COFD[3094] = -3.90525428E-01;
  COFD[3095] = 1.47376395E-02;
  COFD[3096] = -1.89616566E+01;
  COFD[3097] = 4.68595732E+00;
  COFD[3098] = -3.91842840E-01;
  COFD[3099] = 1.69262542E-02;
  COFD[3100] = -1.89685112E+01;
  COFD[3101] = 4.68595732E+00;
  COFD[3102] = -3.91842840E-01;
  COFD[3103] = 1.69262542E-02;
  COFD[3104] = -1.71884179E+01;
  COFD[3105] = 4.17190426E+00;
  COFD[3106] = -3.28894681E-01;
  COFD[3107] = 1.43498101E-02;
  COFD[3108] = -1.74111665E+01;
  COFD[3109] = 4.29676909E+00;
  COFD[3110] = -3.44085306E-01;
  COFD[3111] = 1.49671135E-02;
  COFD[3112] = -1.98418097E+01;
  COFD[3113] = 5.04367502E+00;
  COFD[3114] = -4.34153325E-01;
  COFD[3115] = 1.85956055E-02;
  COFD[3116] = -1.98418097E+01;
  COFD[3117] = 5.04367502E+00;
  COFD[3118] = -4.34153325E-01;
  COFD[3119] = 1.85956055E-02;
  COFD[3120] = -1.98646724E+01;
  COFD[3121] = 5.04367502E+00;
  COFD[3122] = -4.34153325E-01;
  COFD[3123] = 1.85956055E-02;
  COFD[3124] = -1.98075051E+01;
  COFD[3125] = 5.02169524E+00;
  COFD[3126] = -4.31582804E-01;
  COFD[3127] = 1.84953568E-02;
  COFD[3128] = -1.86157710E+01;
  COFD[3129] = 4.55689508E+00;
  COFD[3130] = -3.75937921E-01;
  COFD[3131] = 1.62703488E-02;
  COFD[3132] = -2.16802565E+01;
  COFD[3133] = 5.52918296E+00;
  COFD[3134] = -4.85360709E-01;
  COFD[3135] = 2.03448006E-02;
  COFD[3136] = -2.16296327E+01;
  COFD[3137] = 5.29019717E+00;
  COFD[3138] = -4.24502606E-01;
  COFD[3139] = 1.65197343E-02;
  COFD[3140] = -2.16379525E+01;
  COFD[3141] = 5.29019717E+00;
  COFD[3142] = -4.24502606E-01;
  COFD[3143] = 1.65197343E-02;
  COFD[3144] = -2.19670810E+01;
  COFD[3145] = 5.48847873E+00;
  COFD[3146] = -4.59558930E-01;
  COFD[3147] = 1.84107961E-02;
  COFD[3148] = -2.19670810E+01;
  COFD[3149] = 5.48847873E+00;
  COFD[3150] = -4.59558930E-01;
  COFD[3151] = 1.84107961E-02;
  COFD[3152] = -2.17419173E+01;
  COFD[3153] = 5.33732875E+00;
  COFD[3154] = -4.32453425E-01;
  COFD[3155] = 1.69373833E-02;
  COFD[3156] = -2.12017989E+01;
  COFD[3157] = 5.39823225E+00;
  COFD[3158] = -4.72294645E-01;
  COFD[3159] = 1.99340225E-02;
  COFD[3160] = -2.12121345E+01;
  COFD[3161] = 5.39823225E+00;
  COFD[3162] = -4.72294645E-01;
  COFD[3163] = 1.99340225E-02;
  COFD[3164] = -2.12218938E+01;
  COFD[3165] = 5.39823225E+00;
  COFD[3166] = -4.72294645E-01;
  COFD[3167] = 1.99340225E-02;
  COFD[3168] = -2.19327379E+01;
  COFD[3169] = 5.60638188E+00;
  COFD[3170] = -4.91272522E-01;
  COFD[3171] = 2.04396264E-02;
  COFD[3172] = -2.18190524E+01;
  COFD[3173] = 5.55753905E+00;
  COFD[3174] = -4.88136714E-01;
  COFD[3175] = 2.04294957E-02;
  COFD[3176] = -2.18273535E+01;
  COFD[3177] = 5.55753905E+00;
  COFD[3178] = -4.88136714E-01;
  COFD[3179] = 2.04294957E-02;
  COFD[3180] = -1.99081518E+01;
  COFD[3181] = 5.09311649E+00;
  COFD[3182] = -4.39965178E-01;
  COFD[3183] = 1.88238537E-02;
  COFD[3184] = -2.20453687E+01;
  COFD[3185] = 5.44448440E+00;
  COFD[3186] = -4.51529024E-01;
  COFD[3187] = 1.79698119E-02;
  COFD[3188] = -2.20453687E+01;
  COFD[3189] = 5.44448440E+00;
  COFD[3190] = -4.51529024E-01;
  COFD[3191] = 1.79698119E-02;
  COFD[3192] = -1.85864196E+01;
  COFD[3193] = 4.54915847E+00;
  COFD[3194] = -3.75000738E-01;
  COFD[3195] = 1.62324821E-02;
  COFD[3196] = -1.98040420E+01;
  COFD[3197] = 4.97569695E+00;
  COFD[3198] = -4.26123307E-01;
  COFD[3199] = 1.82788664E-02;
  COFD[3200] = -1.39914049E+01;
  COFD[3201] = 3.26384506E+00;
  COFD[3202] = -2.12947087E-01;
  COFD[3203] = 9.39743888E-03;
  COFD[3204] = -1.79339484E+01;
  COFD[3205] = 4.91373893E+00;
  COFD[3206] = -4.18747629E-01;
  COFD[3207] = 1.79856610E-02;
  COFD[3208] = -1.72496558E+01;
  COFD[3209] = 4.17889917E+00;
  COFD[3210] = -3.29752510E-01;
  COFD[3211] = 1.43850275E-02;
  COFD[3212] = -1.86335873E+01;
  COFD[3213] = 4.53572533E+00;
  COFD[3214] = -3.73386925E-01;
  COFD[3215] = 1.61678881E-02;
  COFD[3216] = -1.72691436E+01;
  COFD[3217] = 4.17889917E+00;
  COFD[3218] = -3.29752510E-01;
  COFD[3219] = 1.43850275E-02;
  COFD[3220] = -2.12597258E+01;
  COFD[3221] = 5.24930667E+00;
  COFD[3222] = -4.17435088E-01;
  COFD[3223] = 1.61434424E-02;
  COFD[3224] = -1.86409085E+01;
  COFD[3225] = 4.53572533E+00;
  COFD[3226] = -3.73386925E-01;
  COFD[3227] = 1.61678881E-02;
  COFD[3228] = -1.86478950E+01;
  COFD[3229] = 4.53572533E+00;
  COFD[3230] = -3.73386925E-01;
  COFD[3231] = 1.61678881E-02;
  COFD[3232] = -1.69491077E+01;
  COFD[3233] = 4.05099737E+00;
  COFD[3234] = -3.13841660E-01;
  COFD[3235] = 1.37218854E-02;
  COFD[3236] = -1.71808080E+01;
  COFD[3237] = 4.17889917E+00;
  COFD[3238] = -3.29752510E-01;
  COFD[3239] = 1.43850275E-02;
  COFD[3240] = -1.95263296E+01;
  COFD[3241] = 4.90255048E+00;
  COFD[3242] = -4.17368501E-01;
  COFD[3243] = 1.79287358E-02;
  COFD[3244] = -1.95263296E+01;
  COFD[3245] = 4.90255048E+00;
  COFD[3246] = -4.17368501E-01;
  COFD[3247] = 1.79287358E-02;
  COFD[3248] = -1.95494660E+01;
  COFD[3249] = 4.90255048E+00;
  COFD[3250] = -4.17368501E-01;
  COFD[3251] = 1.79287358E-02;
  COFD[3252] = -1.94763687E+01;
  COFD[3253] = 4.87333294E+00;
  COFD[3254] = -4.13769241E-01;
  COFD[3255] = 1.77802244E-02;
  COFD[3256] = -1.83455387E+01;
  COFD[3257] = 4.42828044E+00;
  COFD[3258] = -3.60417833E-01;
  COFD[3259] = 1.56455103E-02;
  COFD[3260] = -2.14224440E+01;
  COFD[3261] = 5.41729961E+00;
  COFD[3262] = -4.73400281E-01;
  COFD[3263] = 1.99269567E-02;
  COFD[3264] = -2.19229146E+01;
  COFD[3265] = 5.41841631E+00;
  COFD[3266] = -4.46818971E-01;
  COFD[3267] = 1.77127652E-02;
  COFD[3268] = -2.19313850E+01;
  COFD[3269] = 5.41841631E+00;
  COFD[3270] = -4.46818971E-01;
  COFD[3271] = 1.77127652E-02;
  COFD[3272] = -2.21069995E+01;
  COFD[3273] = 5.55072945E+00;
  COFD[3274] = -4.72525345E-01;
  COFD[3275] = 1.91674202E-02;
  COFD[3276] = -2.21069995E+01;
  COFD[3277] = 5.55072945E+00;
  COFD[3278] = -4.72525345E-01;
  COFD[3279] = 1.91674202E-02;
  COFD[3280] = -2.20028153E+01;
  COFD[3281] = 5.45178028E+00;
  COFD[3282] = -4.52847771E-01;
  COFD[3283] = 1.80418544E-02;
  COFD[3284] = -2.10759137E+01;
  COFD[3285] = 5.34286099E+00;
  COFD[3286] = -4.68100992E-01;
  COFD[3287] = 1.98731399E-02;
  COFD[3288] = -2.10864229E+01;
  COFD[3289] = 5.34286099E+00;
  COFD[3290] = -4.68100992E-01;
  COFD[3291] = 1.98731399E-02;
  COFD[3292] = -2.10963496E+01;
  COFD[3293] = 5.34286099E+00;
  COFD[3294] = -4.68100992E-01;
  COFD[3295] = 1.98731399E-02;
  COFD[3296] = -2.18190524E+01;
  COFD[3297] = 5.55753905E+00;
  COFD[3298] = -4.88136714E-01;
  COFD[3299] = 2.04294957E-02;
  COFD[3300] = -2.15575647E+01;
  COFD[3301] = 5.44803850E+00;
  COFD[3302] = -4.76610560E-01;
  COFD[3303] = 2.00355294E-02;
  COFD[3304] = -2.15660162E+01;
  COFD[3305] = 5.44803850E+00;
  COFD[3306] = -4.76610560E-01;
  COFD[3307] = 2.00355294E-02;
  COFD[3308] = -1.96309007E+01;
  COFD[3309] = 4.95923807E+00;
  COFD[3310] = -4.24176182E-01;
  COFD[3311] = 1.82020215E-02;
  COFD[3312] = -2.22059507E+01;
  COFD[3313] = 5.51722375E+00;
  COFD[3314] = -4.66081431E-01;
  COFD[3315] = 1.88044011E-02;
  COFD[3316] = -2.22059507E+01;
  COFD[3317] = 5.51722375E+00;
  COFD[3318] = -4.66081431E-01;
  COFD[3319] = 1.88044011E-02;
  COFD[3320] = -1.83166409E+01;
  COFD[3321] = 4.42045763E+00;
  COFD[3322] = -3.59451578E-01;
  COFD[3323] = 1.56056164E-02;
  COFD[3324] = -1.94928919E+01;
  COFD[3325] = 4.83189721E+00;
  COFD[3326] = -4.08932249E-01;
  COFD[3327] = 1.75924650E-02;
  COFD[3328] = -1.39924933E+01;
  COFD[3329] = 3.26384506E+00;
  COFD[3330] = -2.12947087E-01;
  COFD[3331] = 9.39743888E-03;
  COFD[3332] = -1.79345106E+01;
  COFD[3333] = 4.91373893E+00;
  COFD[3334] = -4.18747629E-01;
  COFD[3335] = 1.79856610E-02;
  COFD[3336] = -1.72556425E+01;
  COFD[3337] = 4.17889917E+00;
  COFD[3338] = -3.29752510E-01;
  COFD[3339] = 1.43850275E-02;
  COFD[3340] = -1.86424488E+01;
  COFD[3341] = 4.53572533E+00;
  COFD[3342] = -3.73386925E-01;
  COFD[3343] = 1.61678881E-02;
  COFD[3344] = -1.72753698E+01;
  COFD[3345] = 4.17889917E+00;
  COFD[3346] = -3.29752510E-01;
  COFD[3347] = 1.43850275E-02;
  COFD[3348] = -2.12661812E+01;
  COFD[3349] = 5.24930667E+00;
  COFD[3350] = -4.17435088E-01;
  COFD[3351] = 1.61434424E-02;
  COFD[3352] = -1.86499019E+01;
  COFD[3353] = 4.53572533E+00;
  COFD[3354] = -3.73386925E-01;
  COFD[3355] = 1.61678881E-02;
  COFD[3356] = -1.86570161E+01;
  COFD[3357] = 4.53572533E+00;
  COFD[3358] = -3.73386925E-01;
  COFD[3359] = 1.61678881E-02;
  COFD[3360] = -1.69540333E+01;
  COFD[3361] = 4.05099737E+00;
  COFD[3362] = -3.13841660E-01;
  COFD[3363] = 1.37218854E-02;
  COFD[3364] = -1.71860206E+01;
  COFD[3365] = 4.17889917E+00;
  COFD[3366] = -3.29752510E-01;
  COFD[3367] = 1.43850275E-02;
  COFD[3368] = -1.95318159E+01;
  COFD[3369] = 4.90255048E+00;
  COFD[3370] = -4.17368501E-01;
  COFD[3371] = 1.79287358E-02;
  COFD[3372] = -1.95318159E+01;
  COFD[3373] = 4.90255048E+00;
  COFD[3374] = -4.17368501E-01;
  COFD[3375] = 1.79287358E-02;
  COFD[3376] = -1.95552136E+01;
  COFD[3377] = 4.90255048E+00;
  COFD[3378] = -4.17368501E-01;
  COFD[3379] = 1.79287358E-02;
  COFD[3380] = -1.94823661E+01;
  COFD[3381] = 4.87333294E+00;
  COFD[3382] = -4.13769241E-01;
  COFD[3383] = 1.77802244E-02;
  COFD[3384] = -1.83538331E+01;
  COFD[3385] = 4.42828044E+00;
  COFD[3386] = -3.60417833E-01;
  COFD[3387] = 1.56455103E-02;
  COFD[3388] = -2.14326420E+01;
  COFD[3389] = 5.41729961E+00;
  COFD[3390] = -4.73400281E-01;
  COFD[3391] = 1.99269567E-02;
  COFD[3392] = -2.19313596E+01;
  COFD[3393] = 5.41841631E+00;
  COFD[3394] = -4.46818971E-01;
  COFD[3395] = 1.77127652E-02;
  COFD[3396] = -2.19399756E+01;
  COFD[3397] = 5.41841631E+00;
  COFD[3398] = -4.46818971E-01;
  COFD[3399] = 1.77127652E-02;
  COFD[3400] = -2.21157308E+01;
  COFD[3401] = 5.55072945E+00;
  COFD[3402] = -4.72525345E-01;
  COFD[3403] = 1.91674202E-02;
  COFD[3404] = -2.21157308E+01;
  COFD[3405] = 5.55072945E+00;
  COFD[3406] = -4.72525345E-01;
  COFD[3407] = 1.91674202E-02;
  COFD[3408] = -2.20116826E+01;
  COFD[3409] = 5.45178028E+00;
  COFD[3410] = -4.52847771E-01;
  COFD[3411] = 1.80418544E-02;
  COFD[3412] = -2.10837302E+01;
  COFD[3413] = 5.34286099E+00;
  COFD[3414] = -4.68100992E-01;
  COFD[3415] = 1.98731399E-02;
  COFD[3416] = -2.10944068E+01;
  COFD[3417] = 5.34286099E+00;
  COFD[3418] = -4.68100992E-01;
  COFD[3419] = 1.98731399E-02;
  COFD[3420] = -2.11044949E+01;
  COFD[3421] = 5.34286099E+00;
  COFD[3422] = -4.68100992E-01;
  COFD[3423] = 1.98731399E-02;
  COFD[3424] = -2.18273535E+01;
  COFD[3425] = 5.55753905E+00;
  COFD[3426] = -4.88136714E-01;
  COFD[3427] = 2.04294957E-02;
  COFD[3428] = -2.15660162E+01;
  COFD[3429] = 5.44803850E+00;
  COFD[3430] = -4.76610560E-01;
  COFD[3431] = 2.00355294E-02;
  COFD[3432] = -2.15746130E+01;
  COFD[3433] = 5.44803850E+00;
  COFD[3434] = -4.76610560E-01;
  COFD[3435] = 2.00355294E-02;
  COFD[3436] = -1.96408096E+01;
  COFD[3437] = 4.95923807E+00;
  COFD[3438] = -4.24176182E-01;
  COFD[3439] = 1.82020215E-02;
  COFD[3440] = -2.22159601E+01;
  COFD[3441] = 5.51722375E+00;
  COFD[3442] = -4.66081431E-01;
  COFD[3443] = 1.88044011E-02;
  COFD[3444] = -2.22159601E+01;
  COFD[3445] = 5.51722375E+00;
  COFD[3446] = -4.66081431E-01;
  COFD[3447] = 1.88044011E-02;
  COFD[3448] = -1.83249359E+01;
  COFD[3449] = 4.42045763E+00;
  COFD[3450] = -3.59451578E-01;
  COFD[3451] = 1.56056164E-02;
  COFD[3452] = -1.95026899E+01;
  COFD[3453] = 4.83189721E+00;
  COFD[3454] = -4.08932249E-01;
  COFD[3455] = 1.75924650E-02;
  COFD[3456] = -1.22004476E+01;
  COFD[3457] = 2.80725489E+00;
  COFD[3458] = -1.54291406E-01;
  COFD[3459] = 6.88290911E-03;
  COFD[3460] = -1.54460977E+01;
  COFD[3461] = 4.26819983E+00;
  COFD[3462] = -3.40766379E-01;
  COFD[3463] = 1.48393361E-02;
  COFD[3464] = -1.49500258E+01;
  COFD[3465] = 3.52327209E+00;
  COFD[3466] = -2.46286208E-01;
  COFD[3467] = 1.08285963E-02;
  COFD[3468] = -1.64169341E+01;
  COFD[3469] = 3.89309916E+00;
  COFD[3470] = -2.93528188E-01;
  COFD[3471] = 1.28463177E-02;
  COFD[3472] = -1.49718147E+01;
  COFD[3473] = 3.52327209E+00;
  COFD[3474] = -2.46286208E-01;
  COFD[3475] = 1.08285963E-02;
  COFD[3476] = -2.10440599E+01;
  COFD[3477] = 5.59806282E+00;
  COFD[3478] = -4.87109535E-01;
  COFD[3479] = 2.01370226E-02;
  COFD[3480] = -1.64255877E+01;
  COFD[3481] = 3.89309916E+00;
  COFD[3482] = -2.93528188E-01;
  COFD[3483] = 1.28463177E-02;
  COFD[3484] = -1.64338675E+01;
  COFD[3485] = 3.89309916E+00;
  COFD[3486] = -2.93528188E-01;
  COFD[3487] = 1.28463177E-02;
  COFD[3488] = -1.46906975E+01;
  COFD[3489] = 3.39229020E+00;
  COFD[3490] = -2.29520232E-01;
  COFD[3491] = 1.01114311E-02;
  COFD[3492] = -1.48738025E+01;
  COFD[3493] = 3.52327209E+00;
  COFD[3494] = -2.46286208E-01;
  COFD[3495] = 1.08285963E-02;
  COFD[3496] = -1.72572011E+01;
  COFD[3497] = 4.26063341E+00;
  COFD[3498] = -3.39848064E-01;
  COFD[3499] = 1.48021313E-02;
  COFD[3500] = -1.72572011E+01;
  COFD[3501] = 4.26063341E+00;
  COFD[3502] = -3.39848064E-01;
  COFD[3503] = 1.48021313E-02;
  COFD[3504] = -1.72828280E+01;
  COFD[3505] = 4.26063341E+00;
  COFD[3506] = -3.39848064E-01;
  COFD[3507] = 1.48021313E-02;
  COFD[3508] = -1.72316133E+01;
  COFD[3509] = 4.24011069E+00;
  COFD[3510] = -3.37339810E-01;
  COFD[3511] = 1.46996679E-02;
  COFD[3512] = -1.60261598E+01;
  COFD[3513] = 3.73312045E+00;
  COFD[3514] = -2.72579779E-01;
  COFD[3515] = 1.19290272E-02;
  COFD[3516] = -1.94485902E+01;
  COFD[3517] = 4.91446566E+00;
  COFD[3518] = -4.18837152E-01;
  COFD[3519] = 1.79893537E-02;
  COFD[3520] = -2.14204113E+01;
  COFD[3521] = 5.59268435E+00;
  COFD[3522] = -4.91232974E-01;
  COFD[3523] = 2.05064746E-02;
  COFD[3524] = -2.14303411E+01;
  COFD[3525] = 5.59268435E+00;
  COFD[3526] = -4.91232974E-01;
  COFD[3527] = 2.05064746E-02;
  COFD[3528] = -2.09241584E+01;
  COFD[3529] = 5.42316225E+00;
  COFD[3530] = -4.73702801E-01;
  COFD[3531] = 1.99217718E-02;
  COFD[3532] = -2.09241584E+01;
  COFD[3533] = 5.42316225E+00;
  COFD[3534] = -4.73702801E-01;
  COFD[3535] = 1.99217718E-02;
  COFD[3536] = -2.13796243E+01;
  COFD[3537] = 5.56978987E+00;
  COFD[3538] = -4.89141980E-01;
  COFD[3539] = 2.04499210E-02;
  COFD[3540] = -1.88524334E+01;
  COFD[3541] = 4.72476764E+00;
  COFD[3542] = -3.96306836E-01;
  COFD[3543] = 1.70964541E-02;
  COFD[3544] = -1.88646025E+01;
  COFD[3545] = 4.72476764E+00;
  COFD[3546] = -3.96306836E-01;
  COFD[3547] = 1.70964541E-02;
  COFD[3548] = -1.88761346E+01;
  COFD[3549] = 4.72476764E+00;
  COFD[3550] = -3.96306836E-01;
  COFD[3551] = 1.70964541E-02;
  COFD[3552] = -1.99081518E+01;
  COFD[3553] = 5.09311649E+00;
  COFD[3554] = -4.39965178E-01;
  COFD[3555] = 1.88238537E-02;
  COFD[3556] = -1.96309007E+01;
  COFD[3557] = 4.95923807E+00;
  COFD[3558] = -4.24176182E-01;
  COFD[3559] = 1.82020215E-02;
  COFD[3560] = -1.96408096E+01;
  COFD[3561] = 4.95923807E+00;
  COFD[3562] = -4.24176182E-01;
  COFD[3563] = 1.82020215E-02;
  COFD[3564] = -1.72414795E+01;
  COFD[3565] = 4.29808578E+00;
  COFD[3566] = -3.44235570E-01;
  COFD[3567] = 1.49727727E-02;
  COFD[3568] = -2.12621849E+01;
  COFD[3569] = 5.47935225E+00;
  COFD[3570] = -4.80056796E-01;
  COFD[3571] = 2.01607180E-02;
  COFD[3572] = -2.12621849E+01;
  COFD[3573] = 5.47935225E+00;
  COFD[3574] = -4.80056796E-01;
  COFD[3575] = 2.01607180E-02;
  COFD[3576] = -1.59884349E+01;
  COFD[3577] = 3.72220402E+00;
  COFD[3578] = -2.71150591E-01;
  COFD[3579] = 1.18665265E-02;
  COFD[3580] = -1.72570708E+01;
  COFD[3581] = 4.19757624E+00;
  COFD[3582] = -3.32087529E-01;
  COFD[3583] = 1.44827462E-02;
  COFD[3584] = -1.57035004E+01;
  COFD[3585] = 3.93614244E+00;
  COFD[3586] = -2.99111497E-01;
  COFD[3587] = 1.30888229E-02;
  COFD[3588] = -1.94688845E+01;
  COFD[3589] = 5.43830787E+00;
  COFD[3590] = -4.75472880E-01;
  COFD[3591] = 1.99909996E-02;
  COFD[3592] = -1.90883170E+01;
  COFD[3593] = 4.84384483E+00;
  COFD[3594] = -4.10265575E-01;
  COFD[3595] = 1.76414287E-02;
  COFD[3596] = -2.05184780E+01;
  COFD[3597] = 5.18417470E+00;
  COFD[3598] = -4.49491573E-01;
  COFD[3599] = 1.91438508E-02;
  COFD[3600] = -1.91102567E+01;
  COFD[3601] = 4.84384483E+00;
  COFD[3602] = -4.10265575E-01;
  COFD[3603] = 1.76414287E-02;
  COFD[3604] = -1.87383877E+01;
  COFD[3605] = 3.96926341E+00;
  COFD[3606] = -2.16412264E-01;
  COFD[3607] = 6.06012078E-03;
  COFD[3608] = -2.05272244E+01;
  COFD[3609] = 5.18417470E+00;
  COFD[3610] = -4.49491573E-01;
  COFD[3611] = 1.91438508E-02;
  COFD[3612] = -2.05355943E+01;
  COFD[3613] = 5.18417470E+00;
  COFD[3614] = -4.49491573E-01;
  COFD[3615] = 1.91438508E-02;
  COFD[3616] = -1.87688058E+01;
  COFD[3617] = 4.71729964E+00;
  COFD[3618] = -3.95432573E-01;
  COFD[3619] = 1.70623691E-02;
  COFD[3620] = -1.90116152E+01;
  COFD[3621] = 4.84384483E+00;
  COFD[3622] = -4.10265575E-01;
  COFD[3623] = 1.76414287E-02;
  COFD[3624] = -2.11349057E+01;
  COFD[3625] = 5.42846112E+00;
  COFD[3626] = -4.74321870E-01;
  COFD[3627] = 1.99459749E-02;
  COFD[3628] = -2.11349057E+01;
  COFD[3629] = 5.42846112E+00;
  COFD[3630] = -4.74321870E-01;
  COFD[3631] = 1.99459749E-02;
  COFD[3632] = -2.11606942E+01;
  COFD[3633] = 5.42846112E+00;
  COFD[3634] = -4.74321870E-01;
  COFD[3635] = 1.99459749E-02;
  COFD[3636] = -2.11309194E+01;
  COFD[3637] = 5.41773516E+00;
  COFD[3638] = -4.73414338E-01;
  COFD[3639] = 1.99258685E-02;
  COFD[3640] = -2.02922626E+01;
  COFD[3641] = 5.11106992E+00;
  COFD[3642] = -4.42047129E-01;
  COFD[3643] = 1.89042990E-02;
  COFD[3644] = -2.22116629E+01;
  COFD[3645] = 5.54251230E+00;
  COFD[3646] = -4.70946314E-01;
  COFD[3647] = 1.90785869E-02;
  COFD[3648] = -2.00914970E+01;
  COFD[3649] = 4.41511629E+00;
  COFD[3650] = -2.84086963E-01;
  COFD[3651] = 9.37586971E-03;
  COFD[3652] = -2.01015275E+01;
  COFD[3653] = 4.41511629E+00;
  COFD[3654] = -2.84086963E-01;
  COFD[3655] = 9.37586971E-03;
  COFD[3656] = -2.09222393E+01;
  COFD[3657] = 4.82184721E+00;
  COFD[3658] = -3.48128875E-01;
  COFD[3659] = 1.25918978E-02;
  COFD[3660] = -2.09222393E+01;
  COFD[3661] = 4.82184721E+00;
  COFD[3662] = -3.48128875E-01;
  COFD[3663] = 1.25918978E-02;
  COFD[3664] = -2.03036345E+01;
  COFD[3665] = 4.50250781E+00;
  COFD[3666] = -2.97622106E-01;
  COFD[3667] = 1.00481473E-02;
  COFD[3668] = -2.20942443E+01;
  COFD[3669] = 5.58360799E+00;
  COFD[3670] = -4.82701436E-01;
  COFD[3671] = 1.98437922E-02;
  COFD[3672] = -2.21065263E+01;
  COFD[3673] = 5.58360799E+00;
  COFD[3674] = -4.82701436E-01;
  COFD[3675] = 1.98437922E-02;
  COFD[3676] = -2.21181680E+01;
  COFD[3677] = 5.58360799E+00;
  COFD[3678] = -4.82701436E-01;
  COFD[3679] = 1.98437922E-02;
  COFD[3680] = -2.20453687E+01;
  COFD[3681] = 5.44448440E+00;
  COFD[3682] = -4.51529024E-01;
  COFD[3683] = 1.79698119E-02;
  COFD[3684] = -2.22059507E+01;
  COFD[3685] = 5.51722375E+00;
  COFD[3686] = -4.66081431E-01;
  COFD[3687] = 1.88044011E-02;
  COFD[3688] = -2.22159601E+01;
  COFD[3689] = 5.51722375E+00;
  COFD[3690] = -4.66081431E-01;
  COFD[3691] = 1.88044011E-02;
  COFD[3692] = -2.12621849E+01;
  COFD[3693] = 5.47935225E+00;
  COFD[3694] = -4.80056796E-01;
  COFD[3695] = 2.01607180E-02;
  COFD[3696] = -2.09002680E+01;
  COFD[3697] = 4.72895031E+00;
  COFD[3698] = -3.33332771E-01;
  COFD[3699] = 1.18431478E-02;
  COFD[3700] = -2.09002680E+01;
  COFD[3701] = 4.72895031E+00;
  COFD[3702] = -3.33332771E-01;
  COFD[3703] = 1.18431478E-02;
  COFD[3704] = -2.02646659E+01;
  COFD[3705] = 5.10426133E+00;
  COFD[3706] = -4.41256919E-01;
  COFD[3707] = 1.88737290E-02;
  COFD[3708] = -2.12451070E+01;
  COFD[3709] = 5.40444222E+00;
  COFD[3710] = -4.72708609E-01;
  COFD[3711] = 1.99362392E-02;
  COFD[3712] = -1.57035004E+01;
  COFD[3713] = 3.93614244E+00;
  COFD[3714] = -2.99111497E-01;
  COFD[3715] = 1.30888229E-02;
  COFD[3716] = -1.94688845E+01;
  COFD[3717] = 5.43830787E+00;
  COFD[3718] = -4.75472880E-01;
  COFD[3719] = 1.99909996E-02;
  COFD[3720] = -1.90883170E+01;
  COFD[3721] = 4.84384483E+00;
  COFD[3722] = -4.10265575E-01;
  COFD[3723] = 1.76414287E-02;
  COFD[3724] = -2.05184780E+01;
  COFD[3725] = 5.18417470E+00;
  COFD[3726] = -4.49491573E-01;
  COFD[3727] = 1.91438508E-02;
  COFD[3728] = -1.91102567E+01;
  COFD[3729] = 4.84384483E+00;
  COFD[3730] = -4.10265575E-01;
  COFD[3731] = 1.76414287E-02;
  COFD[3732] = -1.87383877E+01;
  COFD[3733] = 3.96926341E+00;
  COFD[3734] = -2.16412264E-01;
  COFD[3735] = 6.06012078E-03;
  COFD[3736] = -2.05272244E+01;
  COFD[3737] = 5.18417470E+00;
  COFD[3738] = -4.49491573E-01;
  COFD[3739] = 1.91438508E-02;
  COFD[3740] = -2.05355943E+01;
  COFD[3741] = 5.18417470E+00;
  COFD[3742] = -4.49491573E-01;
  COFD[3743] = 1.91438508E-02;
  COFD[3744] = -1.87688058E+01;
  COFD[3745] = 4.71729964E+00;
  COFD[3746] = -3.95432573E-01;
  COFD[3747] = 1.70623691E-02;
  COFD[3748] = -1.90116152E+01;
  COFD[3749] = 4.84384483E+00;
  COFD[3750] = -4.10265575E-01;
  COFD[3751] = 1.76414287E-02;
  COFD[3752] = -2.11349057E+01;
  COFD[3753] = 5.42846112E+00;
  COFD[3754] = -4.74321870E-01;
  COFD[3755] = 1.99459749E-02;
  COFD[3756] = -2.11349057E+01;
  COFD[3757] = 5.42846112E+00;
  COFD[3758] = -4.74321870E-01;
  COFD[3759] = 1.99459749E-02;
  COFD[3760] = -2.11606942E+01;
  COFD[3761] = 5.42846112E+00;
  COFD[3762] = -4.74321870E-01;
  COFD[3763] = 1.99459749E-02;
  COFD[3764] = -2.11309194E+01;
  COFD[3765] = 5.41773516E+00;
  COFD[3766] = -4.73414338E-01;
  COFD[3767] = 1.99258685E-02;
  COFD[3768] = -2.02922626E+01;
  COFD[3769] = 5.11106992E+00;
  COFD[3770] = -4.42047129E-01;
  COFD[3771] = 1.89042990E-02;
  COFD[3772] = -2.22116629E+01;
  COFD[3773] = 5.54251230E+00;
  COFD[3774] = -4.70946314E-01;
  COFD[3775] = 1.90785869E-02;
  COFD[3776] = -2.00914970E+01;
  COFD[3777] = 4.41511629E+00;
  COFD[3778] = -2.84086963E-01;
  COFD[3779] = 9.37586971E-03;
  COFD[3780] = -2.01015275E+01;
  COFD[3781] = 4.41511629E+00;
  COFD[3782] = -2.84086963E-01;
  COFD[3783] = 9.37586971E-03;
  COFD[3784] = -2.09222393E+01;
  COFD[3785] = 4.82184721E+00;
  COFD[3786] = -3.48128875E-01;
  COFD[3787] = 1.25918978E-02;
  COFD[3788] = -2.09222393E+01;
  COFD[3789] = 4.82184721E+00;
  COFD[3790] = -3.48128875E-01;
  COFD[3791] = 1.25918978E-02;
  COFD[3792] = -2.03036345E+01;
  COFD[3793] = 4.50250781E+00;
  COFD[3794] = -2.97622106E-01;
  COFD[3795] = 1.00481473E-02;
  COFD[3796] = -2.20942443E+01;
  COFD[3797] = 5.58360799E+00;
  COFD[3798] = -4.82701436E-01;
  COFD[3799] = 1.98437922E-02;
  COFD[3800] = -2.21065263E+01;
  COFD[3801] = 5.58360799E+00;
  COFD[3802] = -4.82701436E-01;
  COFD[3803] = 1.98437922E-02;
  COFD[3804] = -2.21181680E+01;
  COFD[3805] = 5.58360799E+00;
  COFD[3806] = -4.82701436E-01;
  COFD[3807] = 1.98437922E-02;
  COFD[3808] = -2.20453687E+01;
  COFD[3809] = 5.44448440E+00;
  COFD[3810] = -4.51529024E-01;
  COFD[3811] = 1.79698119E-02;
  COFD[3812] = -2.22059507E+01;
  COFD[3813] = 5.51722375E+00;
  COFD[3814] = -4.66081431E-01;
  COFD[3815] = 1.88044011E-02;
  COFD[3816] = -2.22159601E+01;
  COFD[3817] = 5.51722375E+00;
  COFD[3818] = -4.66081431E-01;
  COFD[3819] = 1.88044011E-02;
  COFD[3820] = -2.12621849E+01;
  COFD[3821] = 5.47935225E+00;
  COFD[3822] = -4.80056796E-01;
  COFD[3823] = 2.01607180E-02;
  COFD[3824] = -2.09002680E+01;
  COFD[3825] = 4.72895031E+00;
  COFD[3826] = -3.33332771E-01;
  COFD[3827] = 1.18431478E-02;
  COFD[3828] = -2.09002680E+01;
  COFD[3829] = 4.72895031E+00;
  COFD[3830] = -3.33332771E-01;
  COFD[3831] = 1.18431478E-02;
  COFD[3832] = -2.02646659E+01;
  COFD[3833] = 5.10426133E+00;
  COFD[3834] = -4.41256919E-01;
  COFD[3835] = 1.88737290E-02;
  COFD[3836] = -2.12451070E+01;
  COFD[3837] = 5.40444222E+00;
  COFD[3838] = -4.72708609E-01;
  COFD[3839] = 1.99362392E-02;
  COFD[3840] = -1.16906458E+01;
  COFD[3841] = 2.47469981E+00;
  COFD[3842] = -1.10436257E-01;
  COFD[3843] = 4.95273813E-03;
  COFD[3844] = -1.42894603E+01;
  COFD[3845] = 3.67490723E+00;
  COFD[3846] = -2.65114792E-01;
  COFD[3847] = 1.16092671E-02;
  COFD[3848] = -1.40756909E+01;
  COFD[3849] = 3.07549274E+00;
  COFD[3850] = -1.88889344E-01;
  COFD[3851] = 8.37152866E-03;
  COFD[3852] = -1.52414498E+01;
  COFD[3853] = 3.35922578E+00;
  COFD[3854] = -2.25181399E-01;
  COFD[3855] = 9.92132878E-03;
  COFD[3856] = -1.40949183E+01;
  COFD[3857] = 3.07549274E+00;
  COFD[3858] = -1.88889344E-01;
  COFD[3859] = 8.37152866E-03;
  COFD[3860] = -2.10643264E+01;
  COFD[3861] = 5.53614864E+00;
  COFD[3862] = -4.86046753E-01;
  COFD[3863] = 2.03659193E-02;
  COFD[3864] = -1.52486292E+01;
  COFD[3865] = 3.35922578E+00;
  COFD[3866] = -2.25181399E-01;
  COFD[3867] = 9.92132878E-03;
  COFD[3868] = -1.52554785E+01;
  COFD[3869] = 3.35922578E+00;
  COFD[3870] = -2.25181399E-01;
  COFD[3871] = 9.92132878E-03;
  COFD[3872] = -1.38661483E+01;
  COFD[3873] = 2.97137588E+00;
  COFD[3874] = -1.75491257E-01;
  COFD[3875] = 7.79646773E-03;
  COFD[3876] = -1.40076869E+01;
  COFD[3877] = 3.07549274E+00;
  COFD[3878] = -1.88889344E-01;
  COFD[3879] = 8.37152866E-03;
  COFD[3880] = -1.59404910E+01;
  COFD[3881] = 3.66853818E+00;
  COFD[3882] = -2.64346221E-01;
  COFD[3883] = 1.15784613E-02;
  COFD[3884] = -1.59404910E+01;
  COFD[3885] = 3.66853818E+00;
  COFD[3886] = -2.64346221E-01;
  COFD[3887] = 1.15784613E-02;
  COFD[3888] = -1.59633426E+01;
  COFD[3889] = 3.66853818E+00;
  COFD[3890] = -2.64346221E-01;
  COFD[3891] = 1.15784613E-02;
  COFD[3892] = -1.59327344E+01;
  COFD[3893] = 3.65620899E+00;
  COFD[3894] = -2.62933804E-01;
  COFD[3895] = 1.15253223E-02;
  COFD[3896] = -1.50031706E+01;
  COFD[3897] = 3.26223357E+00;
  COFD[3898] = -2.12746642E-01;
  COFD[3899] = 9.38912883E-03;
  COFD[3900] = -1.81432499E+01;
  COFD[3901] = 4.37565431E+00;
  COFD[3902] = -3.53906025E-01;
  COFD[3903] = 1.53760786E-02;
  COFD[3904] = -2.04750606E+01;
  COFD[3905] = 5.23112374E+00;
  COFD[3906] = -4.54967682E-01;
  COFD[3907] = 1.93570423E-02;
  COFD[3908] = -2.04833743E+01;
  COFD[3909] = 5.23112374E+00;
  COFD[3910] = -4.54967682E-01;
  COFD[3911] = 1.93570423E-02;
  COFD[3912] = -2.02268939E+01;
  COFD[3913] = 5.13632099E+00;
  COFD[3914] = -4.44839130E-01;
  COFD[3915] = 1.90058356E-02;
  COFD[3916] = -2.02268939E+01;
  COFD[3917] = 5.13632099E+00;
  COFD[3918] = -4.44839130E-01;
  COFD[3919] = 1.90058356E-02;
  COFD[3920] = -2.03844292E+01;
  COFD[3921] = 5.18856872E+00;
  COFD[3922] = -4.50001829E-01;
  COFD[3923] = 1.91636142E-02;
  COFD[3924] = -1.75898787E+01;
  COFD[3925] = 4.19171952E+00;
  COFD[3926] = -3.31354810E-01;
  COFD[3927] = 1.44520623E-02;
  COFD[3928] = -1.76002073E+01;
  COFD[3929] = 4.19171952E+00;
  COFD[3930] = -3.31354810E-01;
  COFD[3931] = 1.44520623E-02;
  COFD[3932] = -1.76099599E+01;
  COFD[3933] = 4.19171952E+00;
  COFD[3934] = -3.31354810E-01;
  COFD[3935] = 1.44520623E-02;
  COFD[3936] = -1.85864196E+01;
  COFD[3937] = 4.54915847E+00;
  COFD[3938] = -3.75000738E-01;
  COFD[3939] = 1.62324821E-02;
  COFD[3940] = -1.83166409E+01;
  COFD[3941] = 4.42045763E+00;
  COFD[3942] = -3.59451578E-01;
  COFD[3943] = 1.56056164E-02;
  COFD[3944] = -1.83249359E+01;
  COFD[3945] = 4.42045763E+00;
  COFD[3946] = -3.59451578E-01;
  COFD[3947] = 1.56056164E-02;
  COFD[3948] = -1.59884349E+01;
  COFD[3949] = 3.72220402E+00;
  COFD[3950] = -2.71150591E-01;
  COFD[3951] = 1.18665265E-02;
  COFD[3952] = -2.02646659E+01;
  COFD[3953] = 5.10426133E+00;
  COFD[3954] = -4.41256919E-01;
  COFD[3955] = 1.88737290E-02;
  COFD[3956] = -2.02646659E+01;
  COFD[3957] = 5.10426133E+00;
  COFD[3958] = -4.41256919E-01;
  COFD[3959] = 1.88737290E-02;
  COFD[3960] = -1.49828551E+01;
  COFD[3961] = 3.25781069E+00;
  COFD[3962] = -2.12199367E-01;
  COFD[3963] = 9.36657283E-03;
  COFD[3964] = -1.59877962E+01;
  COFD[3965] = 3.63340763E+00;
  COFD[3966] = -2.60307961E-01;
  COFD[3967] = 1.14256954E-02;
  COFD[3968] = -1.23130320E+01;
  COFD[3969] = 2.74418790E+00;
  COFD[3970] = -1.46230156E-01;
  COFD[3971] = 6.53948886E-03;
  COFD[3972] = -1.54738770E+01;
  COFD[3973] = 4.15765300E+00;
  COFD[3974] = -3.27126237E-01;
  COFD[3975] = 1.42762611E-02;
  COFD[3976] = -1.49610523E+01;
  COFD[3977] = 3.41988961E+00;
  COFD[3978] = -2.33128386E-01;
  COFD[3979] = 1.02689994E-02;
  COFD[3980] = -1.62380132E+01;
  COFD[3981] = 3.72612300E+00;
  COFD[3982] = -2.71663673E-01;
  COFD[3983] = 1.18889643E-02;
  COFD[3984] = -1.49826737E+01;
  COFD[3985] = 3.41988961E+00;
  COFD[3986] = -2.33128386E-01;
  COFD[3987] = 1.02689994E-02;
  COFD[3988] = -2.12755915E+01;
  COFD[3989] = 5.60381989E+00;
  COFD[3990] = -4.91225459E-01;
  COFD[3991] = 2.04487844E-02;
  COFD[3992] = -1.62465647E+01;
  COFD[3993] = 3.72612300E+00;
  COFD[3994] = -2.71663673E-01;
  COFD[3995] = 1.18889643E-02;
  COFD[3996] = -1.62547451E+01;
  COFD[3997] = 3.72612300E+00;
  COFD[3998] = -2.71663673E-01;
  COFD[3999] = 1.18889643E-02;
  COFD[4000] = -1.46461905E+01;
  COFD[4001] = 3.27505697E+00;
  COFD[4002] = -2.14306851E-01;
  COFD[4003] = 9.45219335E-03;
  COFD[4004] = -1.48853610E+01;
  COFD[4005] = 3.41988961E+00;
  COFD[4006] = -2.33128386E-01;
  COFD[4007] = 1.02689994E-02;
  COFD[4008] = -1.71942557E+01;
  COFD[4009] = 4.14993355E+00;
  COFD[4010] = -3.26168062E-01;
  COFD[4011] = 1.42364115E-02;
  COFD[4012] = -1.71942557E+01;
  COFD[4013] = 4.14993355E+00;
  COFD[4014] = -3.26168062E-01;
  COFD[4015] = 1.42364115E-02;
  COFD[4016] = -1.72197029E+01;
  COFD[4017] = 4.14993355E+00;
  COFD[4018] = -3.26168062E-01;
  COFD[4019] = 1.42364115E-02;
  COFD[4020] = -1.71754233E+01;
  COFD[4021] = 4.13131681E+00;
  COFD[4022] = -3.23897559E-01;
  COFD[4023] = 1.41438222E-02;
  COFD[4024] = -1.60074270E+01;
  COFD[4025] = 3.63723937E+00;
  COFD[4026] = -2.60754222E-01;
  COFD[4027] = 1.14428814E-02;
  COFD[4028] = -1.93483786E+01;
  COFD[4029] = 4.79506290E+00;
  COFD[4030] = -4.04621659E-01;
  COFD[4031] = 1.74244230E-02;
  COFD[4032] = -2.14255154E+01;
  COFD[4033] = 5.52240865E+00;
  COFD[4034] = -4.84699537E-01;
  COFD[4035] = 2.03247833E-02;
  COFD[4036] = -2.14353342E+01;
  COFD[4037] = 5.52240865E+00;
  COFD[4038] = -4.84699537E-01;
  COFD[4039] = 2.03247833E-02;
  COFD[4040] = -2.10026942E+01;
  COFD[4041] = 5.38326647E+00;
  COFD[4042] = -4.71201048E-01;
  COFD[4043] = 1.99207516E-02;
  COFD[4044] = -2.10026942E+01;
  COFD[4045] = 5.38326647E+00;
  COFD[4046] = -4.71201048E-01;
  COFD[4047] = 1.99207516E-02;
  COFD[4048] = -2.13502433E+01;
  COFD[4049] = 5.48617067E+00;
  COFD[4050] = -4.80816776E-01;
  COFD[4051] = 2.01887868E-02;
  COFD[4052] = -1.87596973E+01;
  COFD[4053] = 4.61078776E+00;
  COFD[4054] = -3.82625667E-01;
  COFD[4055] = 1.65478601E-02;
  COFD[4056] = -1.87717415E+01;
  COFD[4057] = 4.61078776E+00;
  COFD[4058] = -3.82625667E-01;
  COFD[4059] = 1.65478601E-02;
  COFD[4060] = -1.87831526E+01;
  COFD[4061] = 4.61078776E+00;
  COFD[4062] = -3.82625667E-01;
  COFD[4063] = 1.65478601E-02;
  COFD[4064] = -1.98040420E+01;
  COFD[4065] = 4.97569695E+00;
  COFD[4066] = -4.26123307E-01;
  COFD[4067] = 1.82788664E-02;
  COFD[4068] = -1.94928919E+01;
  COFD[4069] = 4.83189721E+00;
  COFD[4070] = -4.08932249E-01;
  COFD[4071] = 1.75924650E-02;
  COFD[4072] = -1.95026899E+01;
  COFD[4073] = 4.83189721E+00;
  COFD[4074] = -4.08932249E-01;
  COFD[4075] = 1.75924650E-02;
  COFD[4076] = -1.72570708E+01;
  COFD[4077] = 4.19757624E+00;
  COFD[4078] = -3.32087529E-01;
  COFD[4079] = 1.44827462E-02;
  COFD[4080] = -2.12451070E+01;
  COFD[4081] = 5.40444222E+00;
  COFD[4082] = -4.72708609E-01;
  COFD[4083] = 1.99362392E-02;
  COFD[4084] = -2.12451070E+01;
  COFD[4085] = 5.40444222E+00;
  COFD[4086] = -4.72708609E-01;
  COFD[4087] = 1.99362392E-02;
  COFD[4088] = -1.59877962E+01;
  COFD[4089] = 3.63340763E+00;
  COFD[4090] = -2.60307961E-01;
  COFD[4091] = 1.14256954E-02;
  COFD[4092] = -1.72274176E+01;
  COFD[4093] = 4.09361913E+00;
  COFD[4094] = -3.19258125E-01;
  COFD[4095] = 1.39526981E-02;
}

// List of specs with small weight, dim NLITE
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKTDIF(int* KTDIF)
{
  KTDIF[0] = 0;
  KTDIF[1] = 1;
}

// Poly fits for thermal diff ratios, dim NO*NLITE*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFTD(amrex::Real* COFTD)
{
  COFTD[0] = 0.00000000E+00;
  COFTD[1] = 0.00000000E+00;
  COFTD[2] = 0.00000000E+00;
  COFTD[3] = 0.00000000E+00;
  COFTD[4] = -1.44152190E-01;
  COFTD[5] = -7.99993584E-05;
  COFTD[6] = 4.89707442E-08;
  COFTD[7] = -9.14277269E-12;
  COFTD[8] = 4.06676789E-01;
  COFTD[9] = 3.84699853E-05;
  COFTD[10] = -2.54843294E-08;
  COFTD[11] = 5.86294132E-12;
  COFTD[12] = 4.26576987E-01;
  COFTD[13] = 1.20406440E-04;
  COFTD[14] = -7.67293441E-08;
  COFTD[15] = 1.52089282E-11;
  COFTD[16] = 4.12890501E-01;
  COFTD[17] = 3.90577773E-05;
  COFTD[18] = -2.58737105E-08;
  COFTD[19] = 5.95252260E-12;
  COFTD[20] = 2.27466103E-02;
  COFTD[21] = 6.73071543E-04;
  COFTD[22] = -3.40932103E-07;
  COFTD[23] = 5.48493184E-11;
  COFTD[24] = 4.28228101E-01;
  COFTD[25] = 1.20872486E-04;
  COFTD[26] = -7.70263335E-08;
  COFTD[27] = 1.52677960E-11;
  COFTD[28] = 4.29786829E-01;
  COFTD[29] = 1.21312456E-04;
  COFTD[30] = -7.73067054E-08;
  COFTD[31] = 1.53233700E-11;
  COFTD[32] = 3.82239896E-01;
  COFTD[33] = 1.47164921E-05;
  COFTD[34] = -9.75981014E-09;
  COFTD[35] = 2.83213019E-12;
  COFTD[36] = 3.83434314E-01;
  COFTD[37] = 3.62713408E-05;
  COFTD[38] = -2.40278438E-08;
  COFTD[39] = 5.52786129E-12;
  COFTD[40] = 3.24743582E-01;
  COFTD[41] = 1.77796660E-04;
  COFTD[42] = -1.08933575E-07;
  COFTD[43] = 2.03593720E-11;
  COFTD[44] = 3.24743582E-01;
  COFTD[45] = 1.77796660E-04;
  COFTD[46] = -1.08933575E-07;
  COFTD[47] = 2.03593720E-11;
  COFTD[48] = 3.31188133E-01;
  COFTD[49] = 1.81325042E-04;
  COFTD[50] = -1.11095367E-07;
  COFTD[51] = 2.07634046E-11;
  COFTD[52] = 3.39554500E-01;
  COFTD[53] = 1.79333587E-04;
  COFTD[54] = -1.10134815E-07;
  COFTD[55] = 2.06425572E-11;
  COFTD[56] = 4.30602469E-01;
  COFTD[57] = 9.35955212E-05;
  COFTD[58] = -6.03979306E-08;
  COFTD[59] = 1.23114290E-11;
  COFTD[60] = 2.93190141E-01;
  COFTD[61] = 4.01428114E-04;
  COFTD[62] = -2.30704675E-07;
  COFTD[63] = 4.05174676E-11;
  COFTD[64] = 1.22118967E-01;
  COFTD[65] = 6.18369499E-04;
  COFTD[66] = -3.28420406E-07;
  COFTD[67] = 5.44599896E-11;
  COFTD[68] = 1.22692619E-01;
  COFTD[69] = 6.21274281E-04;
  COFTD[70] = -3.29963157E-07;
  COFTD[71] = 5.47158146E-11;
  COFTD[72] = 1.40313353E-01;
  COFTD[73] = 6.01262661E-04;
  COFTD[74] = -3.21913277E-07;
  COFTD[75] = 5.36675963E-11;
  COFTD[76] = 1.40313353E-01;
  COFTD[77] = 6.01262661E-04;
  COFTD[78] = -3.21913277E-07;
  COFTD[79] = 5.36675963E-11;
  COFTD[80] = 1.31423336E-01;
  COFTD[81] = 6.16425772E-04;
  COFTD[82] = -3.28569556E-07;
  COFTD[83] = 5.46150455E-11;
  COFTD[84] = 3.03699588E-01;
  COFTD[85] = 3.22473949E-04;
  COFTD[86] = -1.88700553E-07;
  COFTD[87] = 3.36542879E-11;
  COFTD[88] = 3.05611370E-01;
  COFTD[89] = 3.24503916E-04;
  COFTD[90] = -1.89888419E-07;
  COFTD[91] = 3.38661408E-11;
  COFTD[92] = 3.07390533E-01;
  COFTD[93] = 3.26393065E-04;
  COFTD[94] = -1.90993884E-07;
  COFTD[95] = 3.40632978E-11;
  COFTD[96] = 2.49016176E-01;
  COFTD[97] = 4.29034331E-04;
  COFTD[98] = -2.42667349E-07;
  COFTD[99] = 4.20799172E-11;
  COFTD[100] = 2.72758271E-01;
  COFTD[101] = 3.94400799E-04;
  COFTD[102] = -2.25799420E-07;
  COFTD[103] = 3.95323710E-11;
  COFTD[104] = 2.74035711E-01;
  COFTD[105] = 3.96247941E-04;
  COFTD[106] = -2.26856932E-07;
  COFTD[107] = 3.97175174E-11;
  COFTD[108] = 3.86105710E-01;
  COFTD[109] = 2.28759408E-04;
  COFTD[110] = -1.39424407E-07;
  COFTD[111] = 2.58988578E-11;
  COFTD[112] = 1.59288295E-01;
  COFTD[113] = 6.02831194E-04;
  COFTD[114] = -3.24836171E-07;
  COFTD[115] = 5.43906658E-11;
  COFTD[116] = 1.59288295E-01;
  COFTD[117] = 6.02831194E-04;
  COFTD[118] = -3.24836171E-07;
  COFTD[119] = 5.43906658E-11;
  COFTD[120] = 4.31330748E-01;
  COFTD[121] = 9.20535689E-05;
  COFTD[122] = -5.94508898E-08;
  COFTD[123] = 1.21437846E-11;
  COFTD[124] = 4.01013632E-01;
  COFTD[125] = 1.97253232E-04;
  COFTD[126] = -1.21698396E-07;
  COFTD[127] = 2.29409318E-11;
  COFTD[128] = 1.44152190E-01;
  COFTD[129] = 7.99993584E-05;
  COFTD[130] = -4.89707442E-08;
  COFTD[131] = 9.14277269E-12;
  COFTD[132] = 0.00000000E+00;
  COFTD[133] = 0.00000000E+00;
  COFTD[134] = 0.00000000E+00;
  COFTD[135] = 0.00000000E+00;
  COFTD[136] = 2.35281489E-01;
  COFTD[137] = 4.65667373E-04;
  COFTD[138] = -2.60938016E-07;
  COFTD[139] = 4.49268709E-11;
  COFTD[140] = 1.79839678E-01;
  COFTD[141] = 6.01720824E-04;
  COFTD[142] = -3.26432767E-07;
  COFTD[143] = 5.49110406E-11;
  COFTD[144] = 2.37051899E-01;
  COFTD[145] = 4.69171356E-04;
  COFTD[146] = -2.62901483E-07;
  COFTD[147] = 4.52649298E-11;
  COFTD[148] = -1.74351746E-01;
  COFTD[149] = 8.62242165E-04;
  COFTD[150] = -3.79543417E-07;
  COFTD[151] = 5.60259034E-11;
  COFTD[152] = 1.80186380E-01;
  COFTD[153] = 6.02880848E-04;
  COFTD[154] = -3.27062078E-07;
  COFTD[155] = 5.50169005E-11;
  COFTD[156] = 1.80513126E-01;
  COFTD[157] = 6.03974096E-04;
  COFTD[158] = -3.27655164E-07;
  COFTD[159] = 5.51166667E-11;
  COFTD[160] = 2.49270710E-01;
  COFTD[161] = 4.08679591E-04;
  COFTD[162] = -2.31942221E-07;
  COFTD[163] = 4.03268525E-11;
  COFTD[164] = 2.28559479E-01;
  COFTD[165] = 4.52363220E-04;
  COFTD[166] = -2.53482997E-07;
  COFTD[167] = 4.36433068E-11;
  COFTD[168] = 9.90747140E-02;
  COFTD[169] = 6.44198017E-04;
  COFTD[170] = -3.38484184E-07;
  COFTD[171] = 5.57353833E-11;
  COFTD[172] = 9.90747140E-02;
  COFTD[173] = 6.44198017E-04;
  COFTD[174] = -3.38484184E-07;
  COFTD[175] = 5.57353833E-11;
  COFTD[176] = 1.00038655E-01;
  COFTD[177] = 6.50465703E-04;
  COFTD[178] = -3.41777446E-07;
  COFTD[179] = 5.62776574E-11;
  COFTD[180] = 1.05123703E-01;
  COFTD[181] = 6.50663360E-04;
  COFTD[182] = -3.42563171E-07;
  COFTD[183] = 5.64801866E-11;
  COFTD[184] = 2.00119185E-01;
  COFTD[185] = 5.64791694E-04;
  COFTD[186] = -3.09444383E-07;
  COFTD[187] = 5.24137469E-11;
  COFTD[188] = -2.00308977E-02;
  COFTD[189] = 8.50438113E-04;
  COFTD[190] = -4.21063477E-07;
  COFTD[191] = 6.67958138E-11;
  COFTD[192] = -1.60980730E-01;
  COFTD[193] = 9.03804574E-04;
  COFTD[194] = -4.06926592E-07;
  COFTD[195] = 6.09200234E-11;
  COFTD[196] = -1.61357064E-01;
  COFTD[197] = 9.05917454E-04;
  COFTD[198] = -4.07877889E-07;
  COFTD[199] = 6.10624399E-11;
  COFTD[200] = -1.31244138E-01;
  COFTD[201] = 9.03898764E-04;
  COFTD[202] = -4.17830295E-07;
  COFTD[203] = 6.35723824E-11;
  COFTD[204] = -1.31244138E-01;
  COFTD[205] = 9.03898764E-04;
  COFTD[206] = -4.17830295E-07;
  COFTD[207] = 6.35723824E-11;
  COFTD[208] = -1.56651155E-01;
  COFTD[209] = 9.09787277E-04;
  COFTD[210] = -4.11713122E-07;
  COFTD[211] = 6.18309211E-11;
  COFTD[212] = 1.62735599E-02;
  COFTD[213] = 7.87667334E-04;
  COFTD[214] = -3.97049364E-07;
  COFTD[215] = 6.36857539E-11;
  COFTD[216] = 1.63244604E-02;
  COFTD[217] = 7.90131000E-04;
  COFTD[218] = -3.98291254E-07;
  COFTD[219] = 6.38849501E-11;
  COFTD[220] = 1.63717030E-02;
  COFTD[221] = 7.92417622E-04;
  COFTD[222] = -3.99443901E-07;
  COFTD[223] = 6.40698319E-11;
  COFTD[224] = -5.08743421E-02;
  COFTD[225] = 8.54340362E-04;
  COFTD[226] = -4.15925370E-07;
  COFTD[227] = 6.53061561E-11;
  COFTD[228] = -2.71689899E-02;
  COFTD[229] = 8.37231102E-04;
  COFTD[230] = -4.12886635E-07;
  COFTD[231] = 6.53403612E-11;
  COFTD[232] = -2.72323151E-02;
  COFTD[233] = 8.39182512E-04;
  COFTD[234] = -4.13848987E-07;
  COFTD[235] = 6.54926559E-11;
  COFTD[236] = 9.86932164E-02;
  COFTD[237] = 7.20973229E-04;
  COFTD[238] = -3.77134366E-07;
  COFTD[239] = 6.19201176E-11;
  COFTD[240] = -1.41640200E-01;
  COFTD[241] = 9.21402335E-04;
  COFTD[242] = -4.23209196E-07;
  COFTD[243] = 6.41398937E-11;
  COFTD[244] = -1.41640200E-01;
  COFTD[245] = 9.21402335E-04;
  COFTD[246] = -4.23209196E-07;
  COFTD[247] = 6.41398937E-11;
  COFTD[248] = 2.01521521E-01;
  COFTD[249] = 5.62743751E-04;
  COFTD[250] = -3.08519054E-07;
  COFTD[251] = 5.22805672E-11;
  COFTD[252] = 1.22194046E-01;
  COFTD[253] = 6.90321836E-04;
  COFTD[254] = -3.64845249E-07;
  COFTD[255] = 6.03055495E-11;
}

// compute the critical parameters for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS(
  amrex::Real* Tci, amrex::Real* ai, amrex::Real* bi, amrex::Real* acentric_i)
{

  amrex::Real EPS[32];
  amrex::Real SIG[32];
  amrex::Real wt[32];
  amrex::Real Rcst = 83.144598; // in bar [CGS] !
  amrex::Real avogadro = 6.02214199e23;
  amrex::Real boltzmann = 1.3806503e-16; // we work in CGS

  egtransetEPS(EPS);
  egtransetSIG(SIG);
  get_mw(wt);

  // species 0: H2
  // Imported from NIST
  Tci[0] = 33.145000;
  ai[0] = 1e6 * 0.42748 * Rcst * Rcst * Tci[0] * Tci[0] /
          (2.015880 * 2.015880 * 12.964000);
  bi[0] = 0.08664 * Rcst * Tci[0] / (2.015880 * 12.964000);
  acentric_i[0] = -0.219000;

  // species 1: H
  Tci[1] = 1.316 * EPS[1];
  ai[1] = (5.55 * avogadro * avogadro * EPS[1] * boltzmann * 1e-24 * SIG[1] *
           SIG[1] * SIG[1]) /
          (wt[1] * wt[1]);
  bi[1] = 0.855 * avogadro * 1e-24 * SIG[1] * SIG[1] * SIG[1] / (wt[1]);
  acentric_i[1] = 0.0;

  // species 2: O
  Tci[2] = 1.316 * EPS[2];
  ai[2] = (5.55 * avogadro * avogadro * EPS[2] * boltzmann * 1e-24 * SIG[2] *
           SIG[2] * SIG[2]) /
          (wt[2] * wt[2]);
  bi[2] = 0.855 * avogadro * 1e-24 * SIG[2] * SIG[2] * SIG[2] / (wt[2]);
  acentric_i[2] = 0.0;

  // species 3: O2
  // Imported from NIST
  Tci[3] = 154.581000;
  ai[3] = 1e6 * 0.42748 * Rcst * Rcst * Tci[3] * Tci[3] /
          (31.998800 * 31.998800 * 50.430466);
  bi[3] = 0.08664 * Rcst * Tci[3] / (31.998800 * 50.430466);
  acentric_i[3] = 0.022200;

  // species 4: OH
  Tci[4] = 1.316 * EPS[4];
  ai[4] = (5.55 * avogadro * avogadro * EPS[4] * boltzmann * 1e-24 * SIG[4] *
           SIG[4] * SIG[4]) /
          (wt[4] * wt[4]);
  bi[4] = 0.855 * avogadro * 1e-24 * SIG[4] * SIG[4] * SIG[4] / (wt[4]);
  acentric_i[4] = 0.0;

  // species 5: H2O
  // Imported from NIST
  Tci[5] = 647.096000;
  ai[5] = 1e6 * 0.42748 * Rcst * Rcst * Tci[5] * Tci[5] /
          (18.015340 * 18.015340 * 220.640000);
  bi[5] = 0.08664 * Rcst * Tci[5] / (18.015340 * 220.640000);
  acentric_i[5] = 0.344300;

  // species 6: HO2
  Tci[6] = 1.316 * EPS[6];
  ai[6] = (5.55 * avogadro * avogadro * EPS[6] * boltzmann * 1e-24 * SIG[6] *
           SIG[6] * SIG[6]) /
          (wt[6] * wt[6]);
  bi[6] = 0.855 * avogadro * 1e-24 * SIG[6] * SIG[6] * SIG[6] / (wt[6]);
  acentric_i[6] = 0.0;

  // species 7: H2O2
  Tci[7] = 1.316 * EPS[7];
  ai[7] = (5.55 * avogadro * avogadro * EPS[7] * boltzmann * 1e-24 * SIG[7] *
           SIG[7] * SIG[7]) /
          (wt[7] * wt[7]);
  bi[7] = 0.855 * avogadro * 1e-24 * SIG[7] * SIG[7] * SIG[7] / (wt[7]);
  acentric_i[7] = 0.0;

  // species 8: C
  Tci[8] = 1.316 * EPS[8];
  ai[8] = (5.55 * avogadro * avogadro * EPS[8] * boltzmann * 1e-24 * SIG[8] *
           SIG[8] * SIG[8]) /
          (wt[8] * wt[8]);
  bi[8] = 0.855 * avogadro * 1e-24 * SIG[8] * SIG[8] * SIG[8] / (wt[8]);
  acentric_i[8] = 0.0;

  // species 9: CH
  Tci[9] = 1.316 * EPS[9];
  ai[9] = (5.55 * avogadro * avogadro * EPS[9] * boltzmann * 1e-24 * SIG[9] *
           SIG[9] * SIG[9]) /
          (wt[9] * wt[9]);
  bi[9] = 0.855 * avogadro * 1e-24 * SIG[9] * SIG[9] * SIG[9] / (wt[9]);
  acentric_i[9] = 0.0;

  // species 10: CH2
  Tci[10] = 1.316 * EPS[10];
  ai[10] = (5.55 * avogadro * avogadro * EPS[10] * boltzmann * 1e-24 * SIG[10] *
            SIG[10] * SIG[10]) /
           (wt[10] * wt[10]);
  bi[10] = 0.855 * avogadro * 1e-24 * SIG[10] * SIG[10] * SIG[10] / (wt[10]);
  acentric_i[10] = 0.0;

  // species 11: CH2(S)
  Tci[11] = 1.316 * EPS[11];
  ai[11] = (5.55 * avogadro * avogadro * EPS[11] * boltzmann * 1e-24 * SIG[11] *
            SIG[11] * SIG[11]) /
           (wt[11] * wt[11]);
  bi[11] = 0.855 * avogadro * 1e-24 * SIG[11] * SIG[11] * SIG[11] / (wt[11]);
  acentric_i[11] = 0.0;

  // species 12: CH3
  Tci[12] = 1.316 * EPS[12];
  ai[12] = (5.55 * avogadro * avogadro * EPS[12] * boltzmann * 1e-24 * SIG[12] *
            SIG[12] * SIG[12]) /
           (wt[12] * wt[12]);
  bi[12] = 0.855 * avogadro * 1e-24 * SIG[12] * SIG[12] * SIG[12] / (wt[12]);
  acentric_i[12] = 0.0;

  // species 13: CH4
  // Imported from NIST
  Tci[13] = 190.560000;
  ai[13] = 1e6 * 0.42748 * Rcst * Rcst * Tci[13] * Tci[13] /
           (16.043030 * 16.043030 * 45.990000);
  bi[13] = 0.08664 * Rcst * Tci[13] / (16.043030 * 45.990000);
  acentric_i[13] = 0.011000;

  // species 14: CO
  // Imported from NIST
  Tci[14] = 132.850000;
  ai[14] = 1e6 * 0.42748 * Rcst * Rcst * Tci[14] * Tci[14] /
           (28.010000 * 28.010000 * 34.940000);
  bi[14] = 0.08664 * Rcst * Tci[14] / (28.010000 * 34.940000);
  acentric_i[14] = 0.045000;

  // species 15: CO2
  // Imported from NIST
  Tci[15] = 304.120000;
  ai[15] = 1e6 * 0.42748 * Rcst * Rcst * Tci[15] * Tci[15] /
           (44.009950 * 44.009950 * 73.740000);
  bi[15] = 0.08664 * Rcst * Tci[15] / (44.009950 * 73.740000);
  acentric_i[15] = 0.225000;

  // species 16: HCO
  Tci[16] = 1.316 * EPS[16];
  ai[16] = (5.55 * avogadro * avogadro * EPS[16] * boltzmann * 1e-24 * SIG[16] *
            SIG[16] * SIG[16]) /
           (wt[16] * wt[16]);
  bi[16] = 0.855 * avogadro * 1e-24 * SIG[16] * SIG[16] * SIG[16] / (wt[16]);
  acentric_i[16] = 0.0;

  // species 17: CH2O
  Tci[17] = 1.316 * EPS[17];
  ai[17] = (5.55 * avogadro * avogadro * EPS[17] * boltzmann * 1e-24 * SIG[17] *
            SIG[17] * SIG[17]) /
           (wt[17] * wt[17]);
  bi[17] = 0.855 * avogadro * 1e-24 * SIG[17] * SIG[17] * SIG[17] / (wt[17]);
  acentric_i[17] = 0.0;

  // species 18: CH2OH
  Tci[18] = 1.316 * EPS[18];
  ai[18] = (5.55 * avogadro * avogadro * EPS[18] * boltzmann * 1e-24 * SIG[18] *
            SIG[18] * SIG[18]) /
           (wt[18] * wt[18]);
  bi[18] = 0.855 * avogadro * 1e-24 * SIG[18] * SIG[18] * SIG[18] / (wt[18]);
  acentric_i[18] = 0.0;

  // species 19: CH3O
  Tci[19] = 1.316 * EPS[19];
  ai[19] = (5.55 * avogadro * avogadro * EPS[19] * boltzmann * 1e-24 * SIG[19] *
            SIG[19] * SIG[19]) /
           (wt[19] * wt[19]);
  bi[19] = 0.855 * avogadro * 1e-24 * SIG[19] * SIG[19] * SIG[19] / (wt[19]);
  acentric_i[19] = 0.0;

  // species 20: CH3OH
  // Imported from NIST
  Tci[20] = 512.640000;
  ai[20] = 1e6 * 0.42748 * Rcst * Rcst * Tci[20] * Tci[20] /
           (32.042000 * 32.042000 * 80.970000);
  bi[20] = 0.08664 * Rcst * Tci[20] / (32.042000 * 80.970000);
  acentric_i[20] = 0.565000;

  // species 21: C2H
  Tci[21] = 1.316 * EPS[21];
  ai[21] = (5.55 * avogadro * avogadro * EPS[21] * boltzmann * 1e-24 * SIG[21] *
            SIG[21] * SIG[21]) /
           (wt[21] * wt[21]);
  bi[21] = 0.855 * avogadro * 1e-24 * SIG[21] * SIG[21] * SIG[21] / (wt[21]);
  acentric_i[21] = 0.0;

  // species 22: C2H2
  // Imported from NIST
  Tci[22] = 308.300000;
  ai[22] = 1e6 * 0.42748 * Rcst * Rcst * Tci[22] * Tci[22] /
           (26.038000 * 26.038000 * 61.140000);
  bi[22] = 0.08664 * Rcst * Tci[22] / (26.038000 * 61.140000);
  acentric_i[22] = 0.189000;

  // species 23: C2H3
  Tci[23] = 1.316 * EPS[23];
  ai[23] = (5.55 * avogadro * avogadro * EPS[23] * boltzmann * 1e-24 * SIG[23] *
            SIG[23] * SIG[23]) /
           (wt[23] * wt[23]);
  bi[23] = 0.855 * avogadro * 1e-24 * SIG[23] * SIG[23] * SIG[23] / (wt[23]);
  acentric_i[23] = 0.0;

  // species 24: C2H4
  // Imported from NIST
  Tci[24] = 282.340000;
  ai[24] = 1e6 * 0.42748 * Rcst * Rcst * Tci[24] * Tci[24] /
           (28.054000 * 28.054000 * 50.410000);
  bi[24] = 0.08664 * Rcst * Tci[24] / (28.054000 * 50.410000);
  acentric_i[24] = 0.087000;

  // species 25: C2H5
  Tci[25] = 1.316 * EPS[25];
  ai[25] = (5.55 * avogadro * avogadro * EPS[25] * boltzmann * 1e-24 * SIG[25] *
            SIG[25] * SIG[25]) /
           (wt[25] * wt[25]);
  bi[25] = 0.855 * avogadro * 1e-24 * SIG[25] * SIG[25] * SIG[25] / (wt[25]);
  acentric_i[25] = 0.0;

  // species 26: C2H6
  // Imported from NIST
  Tci[26] = 305.320000;
  ai[26] = 1e6 * 0.42748 * Rcst * Rcst * Tci[26] * Tci[26] /
           (30.070120 * 30.070120 * 48.720000);
  bi[26] = 0.08664 * Rcst * Tci[26] / (30.070120 * 48.720000);
  acentric_i[26] = 0.099000;

  // species 27: HCCO
  Tci[27] = 1.316 * EPS[27];
  ai[27] = (5.55 * avogadro * avogadro * EPS[27] * boltzmann * 1e-24 * SIG[27] *
            SIG[27] * SIG[27]) /
           (wt[27] * wt[27]);
  bi[27] = 0.855 * avogadro * 1e-24 * SIG[27] * SIG[27] * SIG[27] / (wt[27]);
  acentric_i[27] = 0.0;

  // species 28: CH2CO
  Tci[28] = 1.316 * EPS[28];
  ai[28] = (5.55 * avogadro * avogadro * EPS[28] * boltzmann * 1e-24 * SIG[28] *
            SIG[28] * SIG[28]) /
           (wt[28] * wt[28]);
  bi[28] = 0.855 * avogadro * 1e-24 * SIG[28] * SIG[28] * SIG[28] / (wt[28]);
  acentric_i[28] = 0.0;

  // species 29: HCCOH
  Tci[29] = 1.316 * EPS[29];
  ai[29] = (5.55 * avogadro * avogadro * EPS[29] * boltzmann * 1e-24 * SIG[29] *
            SIG[29] * SIG[29]) /
           (wt[29] * wt[29]);
  bi[29] = 0.855 * avogadro * 1e-24 * SIG[29] * SIG[29] * SIG[29] / (wt[29]);
  acentric_i[29] = 0.0;

  // species 30: N2
  // Imported from NIST
  Tci[30] = 126.192000;
  ai[30] = 1e6 * 0.42748 * Rcst * Rcst * Tci[30] * Tci[30] /
           (28.013400 * 28.013400 * 33.958000);
  bi[30] = 0.08664 * Rcst * Tci[30] / (28.013400 * 33.958000);
  acentric_i[30] = 0.037200;

  // species 31: AR
  // Imported from NIST
  Tci[31] = 150.860000;
  ai[31] = 1e6 * 0.42748 * Rcst * Rcst * Tci[31] * Tci[31] /
           (39.948000 * 39.948000 * 48.980000);
  bi[31] = 0.08664 * Rcst * Tci[31] / (39.948000 * 48.980000);
  acentric_i[31] = -0.002000;
}

// compute the critical parameter quantities for each species for SRK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS_SRK(
  amrex::Real* sqrtOneOverTc,
  amrex::Real* sqrtAsti,
  amrex::Real* Bi,
  amrex::Real* Fomega)
{

  // species 0: H2
  // Imported from NIST
  sqrtOneOverTc[0] = 1.7369646834812e-01;
  sqrtAsti[0] = 2.4824229305911e+05;
  Bi[0] = 9.1362254169923e+00;
  Fomega[0] = 1.3798618890700e-01;

  // species 1: H
  // Computed from Lennard-Jones
  sqrtOneOverTc[1] = 7.2391579785311e-02;
  sqrtAsti[1] = 5.8451221185793e+05;
  Bi[1] = 4.4006634563410e+00;
  Fomega[1] = 4.8508000000000e-01;

  // species 2: O
  // Computed from Lennard-Jones
  sqrtOneOverTc[2] = 9.7460146948181e-02;
  sqrtAsti[2] = 4.2500156012386e+04;
  Bi[2] = 6.6930234851885e-01;
  Fomega[2] = 4.8508000000000e-01;

  // species 3: O2
  // Imported from NIST
  sqrtOneOverTc[3] = 8.0430717653241e-02;
  sqrtAsti[3] = 3.6980081924740e+04;
  Bi[3] = 6.9005216444999e-01;
  Fomega[3] = 5.1945301904908e-01;

  // species 4: OH
  // Computed from Lennard-Jones
  sqrtOneOverTc[4] = 9.7460146948181e-02;
  sqrtAsti[4] = 3.9981183985545e+04;
  Bi[4] = 6.2963299076575e-01;
  Fomega[4] = 4.8508000000000e-01;

  // species 5: H2O
  // Imported from NIST
  sqrtOneOverTc[5] = 3.9311140369715e-02;
  sqrtAsti[5] = 1.3145468419592e+05;
  Bi[5] = 1.1727204136223e+00;
  Fomega[5] = 1.0013577274636e+00;

  // species 6: HO2
  // Computed from Lennard-Jones
  sqrtOneOverTc[6] = 8.4114315417892e-02;
  sqrtAsti[6] = 3.3657825710980e+04;
  Bi[6] = 6.4505861132042e-01;
  Fomega[6] = 4.8508000000000e-01;

  // species 7: H2O2
  // Computed from Lennard-Jones
  sqrtOneOverTc[7] = 8.4114315417892e-02;
  sqrtAsti[7] = 3.2660380884830e+04;
  Bi[7] = 6.2594239211036e-01;
  Fomega[7] = 4.8508000000000e-01;

  // species 8: C
  // Computed from Lennard-Jones
  sqrtOneOverTc[8] = 1.0316275924140e-01;
  sqrtAsti[8] = 7.0240119914876e+04;
  Bi[8] = 1.5377647194458e+00;
  Fomega[8] = 4.8508000000000e-01;

  // species 9: CH
  // Computed from Lennard-Jones
  sqrtOneOverTc[9] = 9.7460146948181e-02;
  sqrtAsti[9] = 5.2228281438065e+04;
  Bi[9] = 8.2250313188056e-01;
  Fomega[9] = 4.8508000000000e-01;

  // species 10: CH2
  // Computed from Lennard-Jones
  sqrtOneOverTc[10] = 7.2642504557751e-02;
  sqrtAsti[10] = 1.0564067619908e+05;
  Bi[10] = 2.0142023516102e+00;
  Fomega[10] = 4.8508000000000e-01;

  // species 11: CH2(S)
  // Computed from Lennard-Jones
  sqrtOneOverTc[11] = 7.2642504557751e-02;
  sqrtAsti[11] = 1.0564067619908e+05;
  Bi[11] = 2.0142023516102e+00;
  Fomega[11] = 4.8508000000000e-01;

  // species 12: CH3
  // Computed from Lennard-Jones
  sqrtOneOverTc[12] = 7.2642504557751e-02;
  sqrtAsti[12] = 9.8558148656101e+04;
  Bi[12] = 1.8791630452967e+00;
  Fomega[12] = 4.8508000000000e-01;

  // species 13: CH4
  // Imported from NIST
  sqrtOneOverTc[13] = 7.2440948474968e-02;
  sqrtAsti[13] = 9.5215046085708e+04;
  Bi[13] = 1.8605203320660e+00;
  Fomega[13] = 5.0213035482700e-01;

  // species 14: CO
  // Imported from NIST
  sqrtOneOverTc[14] = 8.6759935530451e-02;
  sqrtAsti[14] = 4.3619324712923e+04;
  Bi[14] = 9.7786303823350e-01;
  Fomega[14] = 5.5459948367500e-01;

  // species 15: CO2
  // Imported from NIST
  sqrtOneOverTc[15] = 5.7342616962522e-02;
  sqrtAsti[15] = 4.3745610142919e+04;
  Bi[15] = 6.7506167841745e-01;
  Fomega[15] = 8.2653709187500e-01;

  // species 16: HCO
  // Computed from Lennard-Jones
  sqrtOneOverTc[16] = 3.9062261583604e-02;
  sqrtAsti[16] = 8.7202351509582e+04;
  Bi[16] = 8.2098075206475e-01;
  Fomega[16] = 4.8508000000000e-01;

  // species 17: CH2O
  // Computed from Lennard-Jones
  sqrtOneOverTc[17] = 3.9062261583604e-02;
  sqrtAsti[17] = 8.4274889632487e+04;
  Bi[17] = 7.9341968505345e-01;
  Fomega[17] = 4.8508000000000e-01;

  // species 18: CH2OH
  // Computed from Lennard-Jones
  sqrtOneOverTc[18] = 4.2687825036676e-02;
  sqrtAsti[18] = 7.7751566794340e+04;
  Bi[18] = 8.3360142526260e-01;
  Fomega[18] = 4.8508000000000e-01;

  // species 19: CH3O
  // Computed from Lennard-Jones
  sqrtOneOverTc[19] = 4.2687825036676e-02;
  sqrtAsti[19] = 7.7751566794340e+04;
  Bi[19] = 8.3360142526260e-01;
  Fomega[19] = 4.8508000000000e-01;

  // species 20: CH3OH
  // Imported from NIST
  sqrtOneOverTc[20] = 4.4166578333598e-02;
  sqrtAsti[20] = 9.6654647783180e+04;
  Bi[20] = 1.4233811698894e+00;
  Fomega[20] = 1.3133918400750e+00;

  // species 21: C2H
  // Computed from Lennard-Jones
  sqrtOneOverTc[21] = 6.0297445312864e-02;
  sqrtAsti[21] = 7.9933238165885e+04;
  Bi[21] = 1.4177766724704e+00;
  Fomega[21] = 4.8508000000000e-01;

  // species 22: C2H2
  // Imported from NIST
  sqrtOneOverTc[22] = 5.6952558345025e-02;
  sqrtAsti[22] = 8.2318059295808e+04;
  Bi[22] = 1.3950602011188e+00;
  Fomega[22] = 7.7293553202700e-01;

  // species 23: C2H3
  // Computed from Lennard-Jones
  sqrtOneOverTc[23] = 6.0297445312864e-02;
  sqrtAsti[23] = 7.3975040719223e+04;
  Bi[23] = 1.3120960627055e+00;
  Fomega[23] = 4.8508000000000e-01;

  // species 24: C2H4
  // Imported from NIST
  sqrtOneOverTc[24] = 5.9513267432530e-02;
  sqrtAsti[24] = 7.7056842134487e+04;
  Bi[24] = 1.4381805192666e+00;
  Fomega[24] = 6.1893034120300e-01;

  // species 25: C2H5
  // Computed from Lennard-Jones
  sqrtOneOverTc[25] = 5.4879915006830e-02;
  sqrtAsti[25] = 8.1297663542693e+04;
  Bi[25] = 1.4105965766665e+00;
  Fomega[25] = 4.8508000000000e-01;

  // species 26: C2H6
  // Imported from NIST
  sqrtOneOverTc[26] = 5.7229819101749e-02;
  sqrtAsti[26] = 7.9078494187583e+04;
  Bi[26] = 1.5012924285481e+00;
  Fomega[26] = 6.3721234098700e-01;

  // species 27: HCCO
  // Computed from Lennard-Jones
  sqrtOneOverTc[27] = 7.1174827921716e-02;
  sqrtAsti[27] = 1.9669985462832e+04;
  Bi[27] = 1.9608582502049e-01;
  Fomega[27] = 4.8508000000000e-01;

  // species 28: CH2CO
  // Computed from Lennard-Jones
  sqrtOneOverTc[28] = 4.1747340173827e-02;
  sqrtAsti[28] = 6.5499293944176e+04;
  Bi[28] = 7.6640249759188e-01;
  Fomega[28] = 4.8508000000000e-01;

  // species 29: HCCOH
  // Computed from Lennard-Jones
  sqrtOneOverTc[29] = 4.1747340173827e-02;
  sqrtAsti[29] = 6.5499293944176e+04;
  Bi[29] = 7.6640249759188e-01;
  Fomega[29] = 4.8508000000000e-01;

  // species 30: N2
  // Imported from NIST
  sqrtOneOverTc[30] = 8.9019282240563e-02;
  sqrtAsti[30] = 4.2022983929562e+04;
  Bi[30] = 9.5560052221563e-01;
  Fomega[30] = 5.4259343186608e-01;

  // species 31: AR
  // Imported from NIST
  sqrtOneOverTc[31] = 8.1416597423011e-02;
  sqrtAsti[31] = 2.9333346340060e+04;
  Bi[31] = 5.5540880812616e-01;
  Fomega[31] = 4.8197599354800e-01;
}

// gauss-jordan solver external routine
// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort("sgjsolve not implemented, choose a different solver ");
}

// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve_simplified(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort(
    "sgjsolve_simplified not implemented, choose a different solver ");
}

#endif
