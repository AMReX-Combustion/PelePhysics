#ifndef MECHANISM_H
#define MECHANISM_H

#include <AMReX_Gpu.H>
#include <AMReX_REAL.H>

/* Elements
0  C
1  H
2  O
3  N
*/

// Species
#define NC12H26_ID 0
#define H_ID 1
#define O_ID 2
#define OH_ID 3
#define HO2_ID 4
#define H2_ID 5
#define H2O_ID 6
#define H2O2_ID 7
#define O2_ID 8
#define CH3_ID 9
#define CH4_ID 10
#define CH2O_ID 11
#define CO_ID 12
#define CO2_ID 13
#define C2H2_ID 14
#define C2H4_ID 15
#define C2H6_ID 16
#define CH2CHO_ID 17
#define aC3H5_ID 18
#define C3H6_ID 19
#define C2H3CHO_ID 20
#define C4H7_ID 21
#define C4H81_ID 22
#define C5H9_ID 23
#define C5H10_ID 24
#define C6H12_ID 25
#define C7H14_ID 26
#define C8H16_ID 27
#define C9H18_ID 28
#define PXC9H19_ID 29
#define C10H20_ID 30
#define C12H24_ID 31
#define C12H25O2_ID 32
#define OC12H23OOH_ID 33
#define N2_ID 34

#define NUM_ELEMENTS 4
#define NUM_SPECIES 35
#define NUM_REACTIONS 268

#define NUM_FIT 4

//  ALWAYS on CPU stuff -- can have different def depending on if we are CPU or
//  GPU based. Defined in mechanism.cpp
void atomicWeight(amrex::Real* awt);
//  MISC
void CKAWT(amrex::Real* awt);
void CKNCF(int* ncf);
void CKSYME_STR(amrex::Vector<std::string>& ename);
void CKSYMS_STR(amrex::Vector<std::string>& kname);
void GET_RMAP(int* _rmap);
void CKINU(int* i, int* nspec, int* ki, int* nu);
void CKKFKR(
  amrex::Real* P,
  amrex::Real* T,
  amrex::Real* x,
  amrex::Real* q_f,
  amrex::Real* q_r);
void progressRateFR(
  amrex::Real* q_f, amrex::Real* q_r, amrex::Real* sc, amrex::Real T);
//  SPARSE INFORMATION
void SPARSITY_INFO(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST_SIMPLIFIED(int* nJdata, const int* consP);
void
SPARSITY_PREPROC_CSC(int* rowVals, int* colPtrs, const int* consP, int NCELLS);
void SPARSITY_PREPROC_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSC(
  int* rowVals, int* colPtrs, int* indx, const int* consP);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSR(
  int* colVals, int* rowPtr, const int* consP, int base);

// A few mechanism parameters
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKINDX(int* mm, int* kk, int* ii, int* nfit)
{
  *mm = 4;
  *kk = 35;
  *ii = 268;
  *nfit = -1; // Why do you need this anyway ?
}

//  inverse molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_imw(amrex::Real* imw_new)
{
  imw_new[0] = 1.0 / 170.340000;  // NC12H26
  imw_new[1] = 1.0 / 1.008000;    // H
  imw_new[2] = 1.0 / 15.999000;   // O
  imw_new[3] = 1.0 / 17.007000;   // OH
  imw_new[4] = 1.0 / 33.006000;   // HO2
  imw_new[5] = 1.0 / 2.016000;    // H2
  imw_new[6] = 1.0 / 18.015000;   // H2O
  imw_new[7] = 1.0 / 34.014000;   // H2O2
  imw_new[8] = 1.0 / 31.998000;   // O2
  imw_new[9] = 1.0 / 15.035000;   // CH3
  imw_new[10] = 1.0 / 16.043000;  // CH4
  imw_new[11] = 1.0 / 30.026000;  // CH2O
  imw_new[12] = 1.0 / 28.010000;  // CO
  imw_new[13] = 1.0 / 44.009000;  // CO2
  imw_new[14] = 1.0 / 26.038000;  // C2H2
  imw_new[15] = 1.0 / 28.054000;  // C2H4
  imw_new[16] = 1.0 / 30.070000;  // C2H6
  imw_new[17] = 1.0 / 43.045000;  // CH2CHO
  imw_new[18] = 1.0 / 41.073000;  // aC3H5
  imw_new[19] = 1.0 / 42.081000;  // C3H6
  imw_new[20] = 1.0 / 56.064000;  // C2H3CHO
  imw_new[21] = 1.0 / 55.100000;  // C4H7
  imw_new[22] = 1.0 / 56.108000;  // C4H81
  imw_new[23] = 1.0 / 69.127000;  // C5H9
  imw_new[24] = 1.0 / 70.135000;  // C5H10
  imw_new[25] = 1.0 / 84.162000;  // C6H12
  imw_new[26] = 1.0 / 98.189000;  // C7H14
  imw_new[27] = 1.0 / 112.216000; // C8H16
  imw_new[28] = 1.0 / 126.243000; // C9H18
  imw_new[29] = 1.0 / 127.251000; // PXC9H19
  imw_new[30] = 1.0 / 140.270000; // C10H20
  imw_new[31] = 1.0 / 168.324000; // C12H24
  imw_new[32] = 1.0 / 201.330000; // C12H25O2
  imw_new[33] = 1.0 / 216.321000; // OC12H23OOH
  imw_new[34] = 1.0 / 28.014000;  // N2
}

//  molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_mw(amrex::Real* mw_new)
{
  mw_new[0] = 170.340000;  // NC12H26
  mw_new[1] = 1.008000;    // H
  mw_new[2] = 15.999000;   // O
  mw_new[3] = 17.007000;   // OH
  mw_new[4] = 33.006000;   // HO2
  mw_new[5] = 2.016000;    // H2
  mw_new[6] = 18.015000;   // H2O
  mw_new[7] = 34.014000;   // H2O2
  mw_new[8] = 31.998000;   // O2
  mw_new[9] = 15.035000;   // CH3
  mw_new[10] = 16.043000;  // CH4
  mw_new[11] = 30.026000;  // CH2O
  mw_new[12] = 28.010000;  // CO
  mw_new[13] = 44.009000;  // CO2
  mw_new[14] = 26.038000;  // C2H2
  mw_new[15] = 28.054000;  // C2H4
  mw_new[16] = 30.070000;  // C2H6
  mw_new[17] = 43.045000;  // CH2CHO
  mw_new[18] = 41.073000;  // aC3H5
  mw_new[19] = 42.081000;  // C3H6
  mw_new[20] = 56.064000;  // C2H3CHO
  mw_new[21] = 55.100000;  // C4H7
  mw_new[22] = 56.108000;  // C4H81
  mw_new[23] = 69.127000;  // C5H9
  mw_new[24] = 70.135000;  // C5H10
  mw_new[25] = 84.162000;  // C6H12
  mw_new[26] = 98.189000;  // C7H14
  mw_new[27] = 112.216000; // C8H16
  mw_new[28] = 126.243000; // C9H18
  mw_new[29] = 127.251000; // PXC9H19
  mw_new[30] = 140.270000; // C10H20
  mw_new[31] = 168.324000; // C12H24
  mw_new[32] = 201.330000; // C12H25O2
  mw_new[33] = 216.321000; // OC12H23OOH
  mw_new[34] = 28.014000;  // N2
}

//  Returns R, Rc, Patm
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRP(amrex::Real* ru, amrex::Real* ruc, amrex::Real* pa)
{
  *ru = 8.31446261815324e+07;
  *ruc = 1.98721558317399615845;
  *pa = 1.01325e+06;
}

// compute Cv/R at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cv_R(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1391 kelvin
  if (T < 1391) {
    // species 0: NC12H26
    species[0] = -3.62181594e+00 + 1.47237711e-01 * tc[1] -
                 9.43970271e-05 * tc[2] + 3.07441268e-08 * tc[3] -
                 4.03602230e-12 * tc[4];
    // species 31: C12H24
    species[31] = -3.96342681e+00 + 1.43992360e-01 * tc[1] -
                  9.61384015e-05 * tc[2] + 3.30174473e-08 * tc[3] -
                  4.62398190e-12 * tc[4];
  } else {
    // species 0: NC12H26
    species[0] = +3.75095037e+01 + 5.63550048e-02 * tc[1] -
                 1.91493200e-05 * tc[2] + 2.96024862e-09 * tc[3] -
                 1.71244150e-13 * tc[4];
    // species 31: C12H24
    species[31] = +3.64002111e+01 + 5.26230753e-02 * tc[1] -
                  1.78624319e-05 * tc[2] + 2.75949863e-09 * tc[3] -
                  1.59562499e-13 * tc[4];
  }

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 1: H
    species[1] = +1.50000000e+00 + 7.05332819e-13 * tc[1] -
                 1.99591964e-15 * tc[2] + 2.30081632e-18 * tc[3] -
                 9.27732332e-22 * tc[4];
    // species 2: O
    species[2] = +2.16826710e+00 - 3.27931884e-03 * tc[1] +
                 6.64306396e-06 * tc[2] - 6.12806624e-09 * tc[3] +
                 2.11265971e-12 * tc[4];
    // species 3: OH
    species[3] = +3.12530561e+00 - 3.22544939e-03 * tc[1] +
                 6.52764691e-06 * tc[2] - 5.79853643e-09 * tc[3] +
                 2.06237379e-12 * tc[4];
    // species 4: HO2
    species[4] = +3.30179801e+00 - 4.74912051e-03 * tc[1] +
                 2.11582891e-05 * tc[2] - 2.42763894e-08 * tc[3] +
                 9.29225124e-12 * tc[4];
    // species 5: H2
    species[5] = +1.34433112e+00 + 7.98052075e-03 * tc[1] -
                 1.94781510e-05 * tc[2] + 2.01572094e-08 * tc[3] -
                 7.37611761e-12 * tc[4];
    // species 6: H2O
    species[6] = +3.19864056e+00 - 2.03643410e-03 * tc[1] +
                 6.52040211e-06 * tc[2] - 5.48797062e-09 * tc[3] +
                 1.77197817e-12 * tc[4];
    // species 7: H2O2
    species[7] = +3.27611269e+00 - 5.42822417e-04 * tc[1] +
                 1.67335701e-05 * tc[2] - 2.15770813e-08 * tc[3] +
                 8.62454363e-12 * tc[4];
    // species 8: O2
    species[8] = +2.78245636e+00 - 2.99673416e-03 * tc[1] +
                 9.84730201e-06 * tc[2] - 9.68129509e-09 * tc[3] +
                 3.24372837e-12 * tc[4];
    // species 9: CH3
    species[9] = +2.67359040e+00 + 2.01095175e-03 * tc[1] +
                 5.73021856e-06 * tc[2] - 6.87117425e-09 * tc[3] +
                 2.54385734e-12 * tc[4];
    // species 10: CH4
    species[10] = +4.14987613e+00 - 1.36709788e-02 * tc[1] +
                  4.91800599e-05 * tc[2] - 4.84743026e-08 * tc[3] +
                  1.66693956e-11 * tc[4];
    // species 11: CH2O
    species[11] = +3.79372315e+00 - 9.90833369e-03 * tc[1] +
                  3.73220008e-05 * tc[2] - 3.79285261e-08 * tc[3] +
                  1.31772652e-11 * tc[4];
    // species 12: CO
    species[12] = +2.57953347e+00 - 6.10353680e-04 * tc[1] +
                  1.01681433e-06 * tc[2] + 9.07005884e-10 * tc[3] -
                  9.04424499e-13 * tc[4];
    // species 13: CO2
    species[13] = +1.35677352e+00 + 8.98459677e-03 * tc[1] -
                  7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                  1.43699548e-13 * tc[4];
    // species 14: C2H2
    species[14] = -1.91318906e-01 + 2.33615629e-02 * tc[1] -
                  3.55171815e-05 * tc[2] + 2.80152437e-08 * tc[3] -
                  8.50072974e-12 * tc[4];
    // species 15: C2H4
    species[15] = +2.95920148e+00 - 7.57052247e-03 * tc[1] +
                  5.70990292e-05 * tc[2] - 6.91588753e-08 * tc[3] +
                  2.69884373e-11 * tc[4];
    // species 16: C2H6
    species[16] = +3.29142492e+00 - 5.50154270e-03 * tc[1] +
                  5.99438288e-05 * tc[2] - 7.08466285e-08 * tc[3] +
                  2.68685771e-11 * tc[4];
    // species 17: CH2CHO
    species[17] = +2.40906240e+00 + 1.07385740e-02 * tc[1] +
                  1.89149250e-06 * tc[2] - 7.15858310e-09 * tc[3] +
                  2.86738510e-12 * tc[4];
    // species 18: aC3H5
    species[18] = +3.63183500e-01 + 1.98138210e-02 * tc[1] +
                  1.24970600e-05 * tc[2] - 3.33555550e-08 * tc[3] +
                  1.58465710e-11 * tc[4];
    // species 19: C3H6
    species[19] = +4.93307000e-01 + 2.09251800e-02 * tc[1] +
                  4.48679400e-06 * tc[2] - 1.66891200e-08 * tc[3] +
                  7.15814600e-12 * tc[4];
    // species 20: C2H3CHO
    species[20] = +2.71349800e-01 + 2.62310540e-02 * tc[1] -
                  9.29123050e-06 * tc[2] - 4.78372720e-09 * tc[3] +
                  3.34805430e-12 * tc[4];
    // species 21: C4H7
    species[21] = -2.55505680e-01 + 3.96788570e-02 * tc[1] -
                  2.28980860e-05 * tc[2] + 2.13529730e-09 * tc[3] +
                  2.30963750e-12 * tc[4];
    // species 22: C4H81
    species[22] = +1.81138000e-01 + 3.08533800e-02 * tc[1] +
                  5.08652470e-06 * tc[2] - 2.46548880e-08 * tc[3] +
                  1.11101930e-11 * tc[4];
    // species 23: C5H9
    species[23] = -3.41901110e+00 + 4.04303890e-02 * tc[1] +
                  6.78023390e-06 * tc[2] - 3.37247420e-08 * tc[3] +
                  1.51167130e-11 * tc[4];
    // species 32: C12H25O2
    species[32] = +4.31404000e+00 + 8.93873000e-02 * tc[1] +
                  1.45351000e-05 * tc[2] - 7.49250000e-08 * tc[3] +
                  3.35325000e-11 * tc[4];
    // species 33: OC12H23OOH
    species[33] = +7.80733000e+00 + 6.50623000e-02 * tc[1] +
                  6.95058000e-05 * tc[2] - 1.26905000e-07 * tc[3] +
                  5.10991000e-11 * tc[4];
    // species 34: N2
    species[34] = +2.29867700e+00 + 1.40824040e-03 * tc[1] -
                  3.96322200e-06 * tc[2] + 5.64151500e-09 * tc[3] -
                  2.44485400e-12 * tc[4];
  } else {
    // species 1: H
    species[1] = +1.50000001e+00 - 2.30842973e-11 * tc[1] +
                 1.61561948e-14 * tc[2] - 4.73515235e-18 * tc[3] +
                 4.98197357e-22 * tc[4];
    // species 2: O
    species[2] = +1.56942078e+00 - 8.59741137e-05 * tc[1] +
                 4.19484589e-08 * tc[2] - 1.00177799e-11 * tc[3] +
                 1.22833691e-15 * tc[4];
    // species 3: OH
    species[3] = +1.86472886e+00 + 1.05650448e-03 * tc[1] -
                 2.59082758e-07 * tc[2] + 3.05218674e-11 * tc[3] -
                 1.33195876e-15 * tc[4];
    // species 4: HO2
    species[4] = +3.01721090e+00 + 2.23982013e-03 * tc[1] -
                 6.33658150e-07 * tc[2] + 1.14246370e-10 * tc[3] -
                 1.07908535e-14 * tc[4];
    // species 5: H2
    species[5] = +2.33727920e+00 - 4.94024731e-05 * tc[1] +
                 4.99456778e-07 * tc[2] - 1.79566394e-10 * tc[3] +
                 2.00255376e-14 * tc[4];
    // species 6: H2O
    species[6] = +2.03399249e+00 + 2.17691804e-03 * tc[1] -
                 1.64072518e-07 * tc[2] - 9.70419870e-11 * tc[3] +
                 1.68200992e-14 * tc[4];
    // species 7: H2O2
    species[7] = +3.16500285e+00 + 4.90831694e-03 * tc[1] -
                 1.90139225e-06 * tc[2] + 3.71185986e-10 * tc[3] -
                 2.87908305e-14 * tc[4];
    // species 8: O2
    species[8] = +2.28253784e+00 + 1.48308754e-03 * tc[1] -
                 7.57966669e-07 * tc[2] + 2.09470555e-10 * tc[3] -
                 2.16717794e-14 * tc[4];
    // species 9: CH3
    species[9] = +1.28571772e+00 + 7.23990037e-03 * tc[1] -
                 2.98714348e-06 * tc[2] + 5.95684644e-10 * tc[3] -
                 4.67154394e-14 * tc[4];
    // species 10: CH4
    species[10] = -9.25148505e-01 + 1.33909467e-02 * tc[1] -
                  5.73285809e-06 * tc[2] + 1.22292535e-09 * tc[3] -
                  1.01815230e-13 * tc[4];
    // species 11: CH2O
    species[11] = +7.60690080e-01 + 9.20000082e-03 * tc[1] -
                  4.42258813e-06 * tc[2] + 1.00641212e-09 * tc[3] -
                  8.83855640e-14 * tc[4];
    // species 12: CO
    species[12] = +1.71518561e+00 + 2.06252743e-03 * tc[1] -
                  9.98825771e-07 * tc[2] + 2.30053008e-10 * tc[3] -
                  2.03647716e-14 * tc[4];
    // species 13: CO2
    species[13] = +2.85746029e+00 + 4.41437026e-03 * tc[1] -
                  2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                  4.72084164e-14 * tc[4];
    // species 14: C2H2
    species[14] = +3.14756964e+00 + 5.96166664e-03 * tc[1] -
                  2.37294852e-06 * tc[2] + 4.67412171e-10 * tc[3] -
                  3.61235213e-14 * tc[4];
    // species 15: C2H4
    species[15] = +1.03611116e+00 + 1.46454151e-02 * tc[1] -
                  6.71077915e-06 * tc[2] + 1.47222923e-09 * tc[3] -
                  1.25706061e-13 * tc[4];
    // species 16: C2H6
    species[16] = +7.18815000e-02 + 2.16852677e-02 * tc[1] -
                  1.00256067e-05 * tc[2] + 2.21412001e-09 * tc[3] -
                  1.90002890e-13 * tc[4];
    // species 17: CH2CHO
    species[17] = +4.97566990e+00 + 8.13059140e-03 * tc[1] -
                  2.74362450e-06 * tc[2] + 4.07030410e-10 * tc[3] -
                  2.17601710e-14 * tc[4];
    // species 18: aC3H5
    species[18] = +5.50078770e+00 + 1.43247310e-02 * tc[1] -
                  5.67816320e-06 * tc[2] + 1.10808010e-09 * tc[3] -
                  9.03638870e-14 * tc[4];
    // species 19: C3H6
    species[19] = +5.73225700e+00 + 1.49083400e-02 * tc[1] -
                  4.94989900e-06 * tc[2] + 7.21202200e-10 * tc[3] -
                  3.76620400e-14 * tc[4];
    // species 20: C2H3CHO
    species[20] = +4.81118680e+00 + 1.71142560e-02 * tc[1] -
                  7.48341610e-06 * tc[2] + 1.42522490e-09 * tc[3] -
                  9.17468410e-14 * tc[4];
    // species 21: C4H7
    species[21] = +6.01348350e+00 + 2.26345580e-02 * tc[1] -
                  9.25454700e-06 * tc[2] + 1.68079270e-09 * tc[3] -
                  1.04086170e-13 * tc[4];
    // species 22: C4H81
    species[22] = +1.05358410e+00 + 3.43505070e-02 * tc[1] -
                  1.58831970e-05 * tc[2] + 3.30896620e-09 * tc[3] -
                  2.53610450e-13 * tc[4];
    // species 23: C5H9
    species[23] = +9.13864000e+00 + 2.27141380e-02 * tc[1] -
                  7.79104630e-06 * tc[2] + 1.18765220e-09 * tc[3] -
                  6.59324480e-14 * tc[4];
    // species 32: C12H25O2
    species[32] = +2.74782000e+01 + 5.37539000e-02 * tc[1] -
                  1.68186000e-05 * tc[2] + 2.51367000e-09 * tc[3] -
                  1.47208000e-13 * tc[4];
    // species 33: OC12H23OOH
    species[33] = +2.26731000e+01 + 6.16392000e-02 * tc[1] -
                  2.09836000e-05 * tc[2] + 3.33166000e-09 * tc[3] -
                  2.03590000e-13 * tc[4];
    // species 34: N2
    species[34] = +1.92664000e+00 + 1.48797680e-03 * tc[1] -
                  5.68476000e-07 * tc[2] + 1.00970380e-10 * tc[3] -
                  6.75335100e-15 * tc[4];
  }

  // species with midpoint at T=1392 kelvin
  if (T < 1392) {
    // species 24: C5H10
    species[24] = -2.06223481e+00 + 5.74218294e-02 * tc[1] -
                  3.74486890e-05 * tc[2] + 1.27364989e-08 * tc[3] -
                  1.79609789e-12 * tc[4];
    // species 25: C6H12
    species[25] = -2.35275205e+00 + 6.98655426e-02 * tc[1] -
                  4.59408022e-05 * tc[2] + 1.56967343e-08 * tc[3] -
                  2.21296175e-12 * tc[4];
    // species 26: C7H14
    species[26] = -2.67720549e+00 + 8.24611601e-02 * tc[1] -
                  5.46504108e-05 * tc[2] + 1.87862303e-08 * tc[3] -
                  2.65737983e-12 * tc[4];
    // species 27: C8H16
    species[27] = -2.89226915e+00 + 9.46066357e-02 * tc[1] -
                  6.27385521e-05 * tc[2] + 2.15158309e-08 * tc[3] -
                  3.02718683e-12 * tc[4];
    // species 28: C9H18
    species[28] = -3.16108263e+00 + 1.06958297e-01 * tc[1] -
                  7.10973244e-05 * tc[2] + 2.43971077e-08 * tc[3] -
                  3.42771547e-12 * tc[4];
    // species 30: C10H20
    species[30] = -3.42901688e+00 + 1.19305598e-01 * tc[1] -
                  7.94489025e-05 * tc[2] + 2.72736596e-08 * tc[3] -
                  3.82718373e-12 * tc[4];
  } else {
    // species 24: C5H10
    species[24] = +1.35851539e+01 + 2.24072471e-02 * tc[1] -
                  7.63348025e-06 * tc[2] + 1.18188966e-09 * tc[3] -
                  6.84385139e-14 * tc[4];
    // species 25: C6H12
    species[25] = +1.68337529e+01 + 2.67377658e-02 * tc[1] -
                  9.10036773e-06 * tc[2] + 1.40819768e-09 * tc[3] -
                  8.15124244e-14 * tc[4];
    // species 26: C7H14
    species[26] = +2.00898039e+01 + 3.10607878e-02 * tc[1] -
                  1.05644793e-05 * tc[2] + 1.63405780e-09 * tc[3] -
                  9.45598219e-14 * tc[4];
    // species 27: C8H16
    species[27] = +2.33540125e+01 + 3.53666462e-02 * tc[1] -
                  1.20208388e-05 * tc[2] + 1.85855053e-09 * tc[3] -
                  1.07522262e-13 * tc[4];
    // species 28: C9H18
    species[28] = +2.66142176e+01 + 3.96825287e-02 * tc[1] -
                  1.34819446e-05 * tc[2] + 2.08390452e-09 * tc[3] -
                  1.20539294e-13 * tc[4];
    // species 30: C10H20
    species[30] = +2.98753903e+01 + 4.39971526e-02 * tc[1] -
                  1.49425530e-05 * tc[2] + 2.30917678e-09 * tc[3] -
                  1.33551477e-13 * tc[4];
  }

  // species with midpoint at T=1390 kelvin
  if (T < 1390) {
    // species 29: PXC9H19
    species[29] = -2.04387292e+00 + 1.05617283e-01 * tc[1] -
                  6.68199971e-05 * tc[2] + 2.14486166e-08 * tc[3] -
                  2.77404275e-12 * tc[4];
  } else {
    // species 29: PXC9H19
    species[29] = +2.73097514e+01 + 4.12657344e-02 * tc[1] -
                  1.40383289e-05 * tc[2] + 2.17174871e-09 * tc[3] -
                  1.25692307e-13 * tc[4];
  }
  return;
}

// compute Cp/R at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cp_R(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1391 kelvin
  if (T < 1391) {
    // species 0: NC12H26
    species[0] = -2.62181594e+00 + 1.47237711e-01 * tc[1] -
                 9.43970271e-05 * tc[2] + 3.07441268e-08 * tc[3] -
                 4.03602230e-12 * tc[4];
    // species 31: C12H24
    species[31] = -2.96342681e+00 + 1.43992360e-01 * tc[1] -
                  9.61384015e-05 * tc[2] + 3.30174473e-08 * tc[3] -
                  4.62398190e-12 * tc[4];
  } else {
    // species 0: NC12H26
    species[0] = +3.85095037e+01 + 5.63550048e-02 * tc[1] -
                 1.91493200e-05 * tc[2] + 2.96024862e-09 * tc[3] -
                 1.71244150e-13 * tc[4];
    // species 31: C12H24
    species[31] = +3.74002111e+01 + 5.26230753e-02 * tc[1] -
                  1.78624319e-05 * tc[2] + 2.75949863e-09 * tc[3] -
                  1.59562499e-13 * tc[4];
  }

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 1: H
    species[1] = +2.50000000e+00 + 7.05332819e-13 * tc[1] -
                 1.99591964e-15 * tc[2] + 2.30081632e-18 * tc[3] -
                 9.27732332e-22 * tc[4];
    // species 2: O
    species[2] = +3.16826710e+00 - 3.27931884e-03 * tc[1] +
                 6.64306396e-06 * tc[2] - 6.12806624e-09 * tc[3] +
                 2.11265971e-12 * tc[4];
    // species 3: OH
    species[3] = +4.12530561e+00 - 3.22544939e-03 * tc[1] +
                 6.52764691e-06 * tc[2] - 5.79853643e-09 * tc[3] +
                 2.06237379e-12 * tc[4];
    // species 4: HO2
    species[4] = +4.30179801e+00 - 4.74912051e-03 * tc[1] +
                 2.11582891e-05 * tc[2] - 2.42763894e-08 * tc[3] +
                 9.29225124e-12 * tc[4];
    // species 5: H2
    species[5] = +2.34433112e+00 + 7.98052075e-03 * tc[1] -
                 1.94781510e-05 * tc[2] + 2.01572094e-08 * tc[3] -
                 7.37611761e-12 * tc[4];
    // species 6: H2O
    species[6] = +4.19864056e+00 - 2.03643410e-03 * tc[1] +
                 6.52040211e-06 * tc[2] - 5.48797062e-09 * tc[3] +
                 1.77197817e-12 * tc[4];
    // species 7: H2O2
    species[7] = +4.27611269e+00 - 5.42822417e-04 * tc[1] +
                 1.67335701e-05 * tc[2] - 2.15770813e-08 * tc[3] +
                 8.62454363e-12 * tc[4];
    // species 8: O2
    species[8] = +3.78245636e+00 - 2.99673416e-03 * tc[1] +
                 9.84730201e-06 * tc[2] - 9.68129509e-09 * tc[3] +
                 3.24372837e-12 * tc[4];
    // species 9: CH3
    species[9] = +3.67359040e+00 + 2.01095175e-03 * tc[1] +
                 5.73021856e-06 * tc[2] - 6.87117425e-09 * tc[3] +
                 2.54385734e-12 * tc[4];
    // species 10: CH4
    species[10] = +5.14987613e+00 - 1.36709788e-02 * tc[1] +
                  4.91800599e-05 * tc[2] - 4.84743026e-08 * tc[3] +
                  1.66693956e-11 * tc[4];
    // species 11: CH2O
    species[11] = +4.79372315e+00 - 9.90833369e-03 * tc[1] +
                  3.73220008e-05 * tc[2] - 3.79285261e-08 * tc[3] +
                  1.31772652e-11 * tc[4];
    // species 12: CO
    species[12] = +3.57953347e+00 - 6.10353680e-04 * tc[1] +
                  1.01681433e-06 * tc[2] + 9.07005884e-10 * tc[3] -
                  9.04424499e-13 * tc[4];
    // species 13: CO2
    species[13] = +2.35677352e+00 + 8.98459677e-03 * tc[1] -
                  7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                  1.43699548e-13 * tc[4];
    // species 14: C2H2
    species[14] = +8.08681094e-01 + 2.33615629e-02 * tc[1] -
                  3.55171815e-05 * tc[2] + 2.80152437e-08 * tc[3] -
                  8.50072974e-12 * tc[4];
    // species 15: C2H4
    species[15] = +3.95920148e+00 - 7.57052247e-03 * tc[1] +
                  5.70990292e-05 * tc[2] - 6.91588753e-08 * tc[3] +
                  2.69884373e-11 * tc[4];
    // species 16: C2H6
    species[16] = +4.29142492e+00 - 5.50154270e-03 * tc[1] +
                  5.99438288e-05 * tc[2] - 7.08466285e-08 * tc[3] +
                  2.68685771e-11 * tc[4];
    // species 17: CH2CHO
    species[17] = +3.40906240e+00 + 1.07385740e-02 * tc[1] +
                  1.89149250e-06 * tc[2] - 7.15858310e-09 * tc[3] +
                  2.86738510e-12 * tc[4];
    // species 18: aC3H5
    species[18] = +1.36318350e+00 + 1.98138210e-02 * tc[1] +
                  1.24970600e-05 * tc[2] - 3.33555550e-08 * tc[3] +
                  1.58465710e-11 * tc[4];
    // species 19: C3H6
    species[19] = +1.49330700e+00 + 2.09251800e-02 * tc[1] +
                  4.48679400e-06 * tc[2] - 1.66891200e-08 * tc[3] +
                  7.15814600e-12 * tc[4];
    // species 20: C2H3CHO
    species[20] = +1.27134980e+00 + 2.62310540e-02 * tc[1] -
                  9.29123050e-06 * tc[2] - 4.78372720e-09 * tc[3] +
                  3.34805430e-12 * tc[4];
    // species 21: C4H7
    species[21] = +7.44494320e-01 + 3.96788570e-02 * tc[1] -
                  2.28980860e-05 * tc[2] + 2.13529730e-09 * tc[3] +
                  2.30963750e-12 * tc[4];
    // species 22: C4H81
    species[22] = +1.18113800e+00 + 3.08533800e-02 * tc[1] +
                  5.08652470e-06 * tc[2] - 2.46548880e-08 * tc[3] +
                  1.11101930e-11 * tc[4];
    // species 23: C5H9
    species[23] = -2.41901110e+00 + 4.04303890e-02 * tc[1] +
                  6.78023390e-06 * tc[2] - 3.37247420e-08 * tc[3] +
                  1.51167130e-11 * tc[4];
    // species 32: C12H25O2
    species[32] = +5.31404000e+00 + 8.93873000e-02 * tc[1] +
                  1.45351000e-05 * tc[2] - 7.49250000e-08 * tc[3] +
                  3.35325000e-11 * tc[4];
    // species 33: OC12H23OOH
    species[33] = +8.80733000e+00 + 6.50623000e-02 * tc[1] +
                  6.95058000e-05 * tc[2] - 1.26905000e-07 * tc[3] +
                  5.10991000e-11 * tc[4];
    // species 34: N2
    species[34] = +3.29867700e+00 + 1.40824040e-03 * tc[1] -
                  3.96322200e-06 * tc[2] + 5.64151500e-09 * tc[3] -
                  2.44485400e-12 * tc[4];
  } else {
    // species 1: H
    species[1] = +2.50000001e+00 - 2.30842973e-11 * tc[1] +
                 1.61561948e-14 * tc[2] - 4.73515235e-18 * tc[3] +
                 4.98197357e-22 * tc[4];
    // species 2: O
    species[2] = +2.56942078e+00 - 8.59741137e-05 * tc[1] +
                 4.19484589e-08 * tc[2] - 1.00177799e-11 * tc[3] +
                 1.22833691e-15 * tc[4];
    // species 3: OH
    species[3] = +2.86472886e+00 + 1.05650448e-03 * tc[1] -
                 2.59082758e-07 * tc[2] + 3.05218674e-11 * tc[3] -
                 1.33195876e-15 * tc[4];
    // species 4: HO2
    species[4] = +4.01721090e+00 + 2.23982013e-03 * tc[1] -
                 6.33658150e-07 * tc[2] + 1.14246370e-10 * tc[3] -
                 1.07908535e-14 * tc[4];
    // species 5: H2
    species[5] = +3.33727920e+00 - 4.94024731e-05 * tc[1] +
                 4.99456778e-07 * tc[2] - 1.79566394e-10 * tc[3] +
                 2.00255376e-14 * tc[4];
    // species 6: H2O
    species[6] = +3.03399249e+00 + 2.17691804e-03 * tc[1] -
                 1.64072518e-07 * tc[2] - 9.70419870e-11 * tc[3] +
                 1.68200992e-14 * tc[4];
    // species 7: H2O2
    species[7] = +4.16500285e+00 + 4.90831694e-03 * tc[1] -
                 1.90139225e-06 * tc[2] + 3.71185986e-10 * tc[3] -
                 2.87908305e-14 * tc[4];
    // species 8: O2
    species[8] = +3.28253784e+00 + 1.48308754e-03 * tc[1] -
                 7.57966669e-07 * tc[2] + 2.09470555e-10 * tc[3] -
                 2.16717794e-14 * tc[4];
    // species 9: CH3
    species[9] = +2.28571772e+00 + 7.23990037e-03 * tc[1] -
                 2.98714348e-06 * tc[2] + 5.95684644e-10 * tc[3] -
                 4.67154394e-14 * tc[4];
    // species 10: CH4
    species[10] = +7.48514950e-02 + 1.33909467e-02 * tc[1] -
                  5.73285809e-06 * tc[2] + 1.22292535e-09 * tc[3] -
                  1.01815230e-13 * tc[4];
    // species 11: CH2O
    species[11] = +1.76069008e+00 + 9.20000082e-03 * tc[1] -
                  4.42258813e-06 * tc[2] + 1.00641212e-09 * tc[3] -
                  8.83855640e-14 * tc[4];
    // species 12: CO
    species[12] = +2.71518561e+00 + 2.06252743e-03 * tc[1] -
                  9.98825771e-07 * tc[2] + 2.30053008e-10 * tc[3] -
                  2.03647716e-14 * tc[4];
    // species 13: CO2
    species[13] = +3.85746029e+00 + 4.41437026e-03 * tc[1] -
                  2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                  4.72084164e-14 * tc[4];
    // species 14: C2H2
    species[14] = +4.14756964e+00 + 5.96166664e-03 * tc[1] -
                  2.37294852e-06 * tc[2] + 4.67412171e-10 * tc[3] -
                  3.61235213e-14 * tc[4];
    // species 15: C2H4
    species[15] = +2.03611116e+00 + 1.46454151e-02 * tc[1] -
                  6.71077915e-06 * tc[2] + 1.47222923e-09 * tc[3] -
                  1.25706061e-13 * tc[4];
    // species 16: C2H6
    species[16] = +1.07188150e+00 + 2.16852677e-02 * tc[1] -
                  1.00256067e-05 * tc[2] + 2.21412001e-09 * tc[3] -
                  1.90002890e-13 * tc[4];
    // species 17: CH2CHO
    species[17] = +5.97566990e+00 + 8.13059140e-03 * tc[1] -
                  2.74362450e-06 * tc[2] + 4.07030410e-10 * tc[3] -
                  2.17601710e-14 * tc[4];
    // species 18: aC3H5
    species[18] = +6.50078770e+00 + 1.43247310e-02 * tc[1] -
                  5.67816320e-06 * tc[2] + 1.10808010e-09 * tc[3] -
                  9.03638870e-14 * tc[4];
    // species 19: C3H6
    species[19] = +6.73225700e+00 + 1.49083400e-02 * tc[1] -
                  4.94989900e-06 * tc[2] + 7.21202200e-10 * tc[3] -
                  3.76620400e-14 * tc[4];
    // species 20: C2H3CHO
    species[20] = +5.81118680e+00 + 1.71142560e-02 * tc[1] -
                  7.48341610e-06 * tc[2] + 1.42522490e-09 * tc[3] -
                  9.17468410e-14 * tc[4];
    // species 21: C4H7
    species[21] = +7.01348350e+00 + 2.26345580e-02 * tc[1] -
                  9.25454700e-06 * tc[2] + 1.68079270e-09 * tc[3] -
                  1.04086170e-13 * tc[4];
    // species 22: C4H81
    species[22] = +2.05358410e+00 + 3.43505070e-02 * tc[1] -
                  1.58831970e-05 * tc[2] + 3.30896620e-09 * tc[3] -
                  2.53610450e-13 * tc[4];
    // species 23: C5H9
    species[23] = +1.01386400e+01 + 2.27141380e-02 * tc[1] -
                  7.79104630e-06 * tc[2] + 1.18765220e-09 * tc[3] -
                  6.59324480e-14 * tc[4];
    // species 32: C12H25O2
    species[32] = +2.84782000e+01 + 5.37539000e-02 * tc[1] -
                  1.68186000e-05 * tc[2] + 2.51367000e-09 * tc[3] -
                  1.47208000e-13 * tc[4];
    // species 33: OC12H23OOH
    species[33] = +2.36731000e+01 + 6.16392000e-02 * tc[1] -
                  2.09836000e-05 * tc[2] + 3.33166000e-09 * tc[3] -
                  2.03590000e-13 * tc[4];
    // species 34: N2
    species[34] = +2.92664000e+00 + 1.48797680e-03 * tc[1] -
                  5.68476000e-07 * tc[2] + 1.00970380e-10 * tc[3] -
                  6.75335100e-15 * tc[4];
  }

  // species with midpoint at T=1392 kelvin
  if (T < 1392) {
    // species 24: C5H10
    species[24] = -1.06223481e+00 + 5.74218294e-02 * tc[1] -
                  3.74486890e-05 * tc[2] + 1.27364989e-08 * tc[3] -
                  1.79609789e-12 * tc[4];
    // species 25: C6H12
    species[25] = -1.35275205e+00 + 6.98655426e-02 * tc[1] -
                  4.59408022e-05 * tc[2] + 1.56967343e-08 * tc[3] -
                  2.21296175e-12 * tc[4];
    // species 26: C7H14
    species[26] = -1.67720549e+00 + 8.24611601e-02 * tc[1] -
                  5.46504108e-05 * tc[2] + 1.87862303e-08 * tc[3] -
                  2.65737983e-12 * tc[4];
    // species 27: C8H16
    species[27] = -1.89226915e+00 + 9.46066357e-02 * tc[1] -
                  6.27385521e-05 * tc[2] + 2.15158309e-08 * tc[3] -
                  3.02718683e-12 * tc[4];
    // species 28: C9H18
    species[28] = -2.16108263e+00 + 1.06958297e-01 * tc[1] -
                  7.10973244e-05 * tc[2] + 2.43971077e-08 * tc[3] -
                  3.42771547e-12 * tc[4];
    // species 30: C10H20
    species[30] = -2.42901688e+00 + 1.19305598e-01 * tc[1] -
                  7.94489025e-05 * tc[2] + 2.72736596e-08 * tc[3] -
                  3.82718373e-12 * tc[4];
  } else {
    // species 24: C5H10
    species[24] = +1.45851539e+01 + 2.24072471e-02 * tc[1] -
                  7.63348025e-06 * tc[2] + 1.18188966e-09 * tc[3] -
                  6.84385139e-14 * tc[4];
    // species 25: C6H12
    species[25] = +1.78337529e+01 + 2.67377658e-02 * tc[1] -
                  9.10036773e-06 * tc[2] + 1.40819768e-09 * tc[3] -
                  8.15124244e-14 * tc[4];
    // species 26: C7H14
    species[26] = +2.10898039e+01 + 3.10607878e-02 * tc[1] -
                  1.05644793e-05 * tc[2] + 1.63405780e-09 * tc[3] -
                  9.45598219e-14 * tc[4];
    // species 27: C8H16
    species[27] = +2.43540125e+01 + 3.53666462e-02 * tc[1] -
                  1.20208388e-05 * tc[2] + 1.85855053e-09 * tc[3] -
                  1.07522262e-13 * tc[4];
    // species 28: C9H18
    species[28] = +2.76142176e+01 + 3.96825287e-02 * tc[1] -
                  1.34819446e-05 * tc[2] + 2.08390452e-09 * tc[3] -
                  1.20539294e-13 * tc[4];
    // species 30: C10H20
    species[30] = +3.08753903e+01 + 4.39971526e-02 * tc[1] -
                  1.49425530e-05 * tc[2] + 2.30917678e-09 * tc[3] -
                  1.33551477e-13 * tc[4];
  }

  // species with midpoint at T=1390 kelvin
  if (T < 1390) {
    // species 29: PXC9H19
    species[29] = -1.04387292e+00 + 1.05617283e-01 * tc[1] -
                  6.68199971e-05 * tc[2] + 2.14486166e-08 * tc[3] -
                  2.77404275e-12 * tc[4];
  } else {
    // species 29: PXC9H19
    species[29] = +2.83097514e+01 + 4.12657344e-02 * tc[1] -
                  1.40383289e-05 * tc[2] + 2.17174871e-09 * tc[3] -
                  1.25692307e-13 * tc[4];
  }
  return;
}

// compute the g/(RT) at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
gibbs(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1 / T;

  // species with midpoint at T=1391 kelvin
  if (T < 1391) {
    // species 0: NC12H26
    species[0] = -4.006542530000000e+04 * invT - 5.272127854000000e+01 +
                 2.621815940000000e+00 * tc[0] - 7.361885550000000e-02 * tc[1] +
                 1.573283785000000e-05 * tc[2] - 2.562010566666667e-09 * tc[3] +
                 2.018011150000000e-13 * tc[4];
    // species 31: C12H24
    species[31] = -2.463452990000000e+04 * invT - 5.587931381000000e+01 +
                  2.963426810000000e+00 * tc[0] -
                  7.199618000000001e-02 * tc[1] +
                  1.602306691666667e-05 * tc[2] -
                  2.751453941666667e-09 * tc[3] + 2.311990950000000e-13 * tc[4];
  } else {
    // species 0: NC12H26
    species[0] = -5.488434650000000e+04 * invT + 2.111804257000000e+02 -
                 3.850950370000000e+01 * tc[0] - 2.817750240000000e-02 * tc[1] +
                 3.191553333333333e-06 * tc[2] - 2.466873850000000e-10 * tc[3] +
                 8.562207500000000e-15 * tc[4];
    // species 31: C12H24
    species[31] = -3.894059620000000e+04 * invT + 2.022928741000000e+02 -
                  3.740021110000000e+01 * tc[0] -
                  2.631153765000000e-02 * tc[1] +
                  2.977071983333333e-06 * tc[2] -
                  2.299582191666667e-10 * tc[3] + 7.978124949999999e-15 * tc[4];
  }

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 1: H
    species[1] = +2.547365990000000e+04 * invT + 2.946682853000000e+00 -
                 2.500000000000000e+00 * tc[0] - 3.526664095000000e-13 * tc[1] +
                 3.326532733333333e-16 * tc[2] - 1.917346933333333e-19 * tc[3] +
                 4.638661660000000e-23 * tc[4];
    // species 2: O
    species[2] = +2.912225920000000e+04 * invT + 1.116333640000000e+00 -
                 3.168267100000000e+00 * tc[0] + 1.639659420000000e-03 * tc[1] -
                 1.107177326666667e-06 * tc[2] + 5.106721866666666e-10 * tc[3] -
                 1.056329855000000e-13 * tc[4];
    // species 3: OH
    species[3] = +3.381538120000000e+03 * invT + 4.815738570000000e+00 -
                 4.125305610000000e+00 * tc[0] + 1.612724695000000e-03 * tc[1] -
                 1.087941151666667e-06 * tc[2] + 4.832113691666666e-10 * tc[3] -
                 1.031186895000000e-13 * tc[4];
    // species 4: HO2
    species[4] = +2.948080400000000e+02 * invT + 5.851355599999999e-01 -
                 4.301798010000000e+00 * tc[0] + 2.374560255000000e-03 * tc[1] -
                 3.526381516666666e-06 * tc[2] + 2.023032450000000e-09 * tc[3] -
                 4.646125620000001e-13 * tc[4];
    // species 5: H2
    species[5] = -9.179351730000000e+02 * invT + 1.661320882000000e+00 -
                 2.344331120000000e+00 * tc[0] - 3.990260375000000e-03 * tc[1] +
                 3.246358500000000e-06 * tc[2] - 1.679767450000000e-09 * tc[3] +
                 3.688058805000000e-13 * tc[4];
    // species 6: H2O
    species[6] = -3.029372670000000e+04 * invT + 5.047672768000000e+00 -
                 4.198640560000000e+00 * tc[0] + 1.018217050000000e-03 * tc[1] -
                 1.086733685000000e-06 * tc[2] + 4.573308850000000e-10 * tc[3] -
                 8.859890850000000e-14 * tc[4];
    // species 7: H2O2
    species[7] = -1.770258210000000e+04 * invT + 8.410619499999998e-01 -
                 4.276112690000000e+00 * tc[0] + 2.714112085000000e-04 * tc[1] -
                 2.788928350000000e-06 * tc[2] + 1.798090108333333e-09 * tc[3] -
                 4.312271815000000e-13 * tc[4];
    // species 8: O2
    species[8] = -1.063943560000000e+03 * invT + 1.247806300000001e-01 -
                 3.782456360000000e+00 * tc[0] + 1.498367080000000e-03 * tc[1] -
                 1.641217001666667e-06 * tc[2] + 8.067745908333334e-10 * tc[3] -
                 1.621864185000000e-13 * tc[4];
    // species 9: CH3
    species[9] = +1.644499880000000e+04 * invT + 2.069026070000000e+00 -
                 3.673590400000000e+00 * tc[0] - 1.005475875000000e-03 * tc[1] -
                 9.550364266666668e-07 * tc[2] + 5.725978541666666e-10 * tc[3] -
                 1.271928670000000e-13 * tc[4];
    // species 10: CH4
    species[10] = -1.024664760000000e+04 * invT + 9.791179889999999e+00 -
                  5.149876130000000e+00 * tc[0] +
                  6.835489400000000e-03 * tc[1] -
                  8.196676650000000e-06 * tc[2] +
                  4.039525216666667e-09 * tc[3] - 8.334697800000000e-13 * tc[4];
    // species 11: CH2O
    species[11] = -1.430895670000000e+04 * invT + 4.190910250000000e+00 -
                  4.793723150000000e+00 * tc[0] +
                  4.954166845000000e-03 * tc[1] -
                  6.220333466666666e-06 * tc[2] +
                  3.160710508333333e-09 * tc[3] - 6.588632600000000e-13 * tc[4];
    // species 12: CO
    species[12] = -1.434408600000000e+04 * invT + 7.112418999999992e-02 -
                  3.579533470000000e+00 * tc[0] +
                  3.051768400000000e-04 * tc[1] -
                  1.694690550000000e-07 * tc[2] -
                  7.558382366666667e-11 * tc[3] + 4.522122495000000e-14 * tc[4];
    // species 13: CO2
    species[13] = -4.837196970000000e+04 * invT - 7.544278700000000e+00 -
                  2.356773520000000e+00 * tc[0] -
                  4.492298385000000e-03 * tc[1] +
                  1.187260448333333e-06 * tc[2] -
                  2.049325183333333e-10 * tc[3] + 7.184977399999999e-15 * tc[4];
    // species 14: C2H2
    species[14] = +2.642898070000000e+04 * invT - 1.313102400600000e+01 -
                  8.086810940000000e-01 * tc[0] -
                  1.168078145000000e-02 * tc[1] +
                  5.919530250000000e-06 * tc[2] -
                  2.334603641666667e-09 * tc[3] + 4.250364870000000e-13 * tc[4];
    // species 15: C2H4
    species[15] = +5.089775930000000e+03 * invT - 1.381294799999999e-01 -
                  3.959201480000000e+00 * tc[0] +
                  3.785261235000000e-03 * tc[1] -
                  9.516504866666667e-06 * tc[2] +
                  5.763239608333333e-09 * tc[3] - 1.349421865000000e-12 * tc[4];
    // species 16: C2H6
    species[16] = -1.152220550000000e+04 * invT + 1.624601760000000e+00 -
                  4.291424920000000e+00 * tc[0] +
                  2.750771350000000e-03 * tc[1] -
                  9.990638133333334e-06 * tc[2] +
                  5.903885708333334e-09 * tc[3] - 1.343428855000000e-12 * tc[4];
    // species 17: CH2CHO
    species[17] = +6.200000000000000e+01 * invT - 6.162391100000001e+00 -
                  3.409062400000000e+00 * tc[0] -
                  5.369287000000000e-03 * tc[1] -
                  3.152487500000000e-07 * tc[2] +
                  5.965485916666667e-10 * tc[3] - 1.433692550000000e-13 * tc[4];
    // species 18: aC3H5
    species[18] = +1.924562900000000e+04 * invT - 1.581003050000000e+01 -
                  1.363183500000000e+00 * tc[0] -
                  9.906910499999999e-03 * tc[1] -
                  2.082843333333333e-06 * tc[2] +
                  2.779629583333333e-09 * tc[3] - 7.923285500000000e-13 * tc[4];
    // species 19: C3H6
    species[19] = +1.074826000000000e+03 * invT - 1.465203300000000e+01 -
                  1.493307000000000e+00 * tc[0] -
                  1.046259000000000e-02 * tc[1] -
                  7.477990000000000e-07 * tc[2] +
                  1.390760000000000e-09 * tc[3] - 3.579073000000000e-13 * tc[4];
    // species 20: C2H3CHO
    species[20] = -9.335734399999999e+03 * invT - 1.822672720000000e+01 -
                  1.271349800000000e+00 * tc[0] -
                  1.311552700000000e-02 * tc[1] +
                  1.548538416666667e-06 * tc[2] +
                  3.986439333333333e-10 * tc[3] - 1.674027150000000e-13 * tc[4];
    // species 21: C4H7
    species[21] = +2.265332800000000e+04 * invT - 2.269338368000000e+01 -
                  7.444943200000000e-01 * tc[0] -
                  1.983942850000000e-02 * tc[1] +
                  3.816347666666667e-06 * tc[2] -
                  1.779414416666667e-10 * tc[3] - 1.154818750000000e-13 * tc[4];
    // species 22: C4H81
    species[22] = -1.790400400000000e+03 * invT - 1.988133100000000e+01 -
                  1.181138000000000e+00 * tc[0] -
                  1.542669000000000e-02 * tc[1] -
                  8.477541166666667e-07 * tc[2] +
                  2.054574000000000e-09 * tc[3] - 5.555096499999999e-13 * tc[4];
    // species 23: C5H9
    species[23] = +2.812188700000000e+03 * invT - 3.887825510000000e+01 +
                  2.419011100000000e+00 * tc[0] -
                  2.021519450000000e-02 * tc[1] -
                  1.130038983333333e-06 * tc[2] +
                  2.810395166666667e-09 * tc[3] - 7.558356500000001e-13 * tc[4];
    // species 32: C12H25O2
    species[32] = -2.989180000000000e+04 * invT - 1.166006000000000e+01 -
                  5.314040000000000e+00 * tc[0] -
                  4.469365000000000e-02 * tc[1] -
                  2.422516666666667e-06 * tc[2] +
                  6.243750000000000e-09 * tc[3] - 1.676625000000000e-12 * tc[4];
    // species 33: OC12H23OOH
    species[33] = -6.653610000000001e+04 * invT + 1.965780000000001e+00 -
                  8.807330000000000e+00 * tc[0] -
                  3.253115000000000e-02 * tc[1] -
                  1.158430000000000e-05 * tc[2] +
                  1.057541666666667e-08 * tc[3] - 2.554955000000000e-12 * tc[4];
    // species 34: N2
    species[34] = -1.020899900000000e+03 * invT - 6.516950000000001e-01 -
                  3.298677000000000e+00 * tc[0] -
                  7.041202000000000e-04 * tc[1] +
                  6.605369999999999e-07 * tc[2] -
                  4.701262500000001e-10 * tc[3] + 1.222427000000000e-13 * tc[4];
  } else {
    // species 1: H
    species[1] = +2.547365990000000e+04 * invT + 2.946682924000000e+00 -
                 2.500000010000000e+00 * tc[0] + 1.154214865000000e-11 * tc[1] -
                 2.692699133333334e-15 * tc[2] + 3.945960291666667e-19 * tc[3] -
                 2.490986785000000e-23 * tc[4];
    // species 2: O
    species[2] = +2.921757910000000e+04 * invT - 2.214917859999999e+00 -
                 2.569420780000000e+00 * tc[0] + 4.298705685000000e-05 * tc[1] -
                 6.991409816666667e-09 * tc[2] + 8.348149916666666e-13 * tc[3] -
                 6.141684549999999e-17 * tc[4];
    // species 3: OH
    species[3] = +3.718857740000000e+03 * invT - 2.836911870000000e+00 -
                 2.864728860000000e+00 * tc[0] - 5.282522400000000e-04 * tc[1] +
                 4.318045966666667e-08 * tc[2] - 2.543488950000000e-12 * tc[3] +
                 6.659793800000000e-17 * tc[4];
    // species 4: HO2
    species[4] = +1.118567130000000e+02 * invT + 2.321087500000001e-01 -
                 4.017210900000000e+00 * tc[0] - 1.119910065000000e-03 * tc[1] +
                 1.056096916666667e-07 * tc[2] - 9.520530833333334e-12 * tc[3] +
                 5.395426750000000e-16 * tc[4];
    // species 5: H2
    species[5] = -9.501589220000000e+02 * invT + 6.542302510000000e+00 -
                 3.337279200000000e+00 * tc[0] + 2.470123655000000e-05 * tc[1] -
                 8.324279633333333e-08 * tc[2] + 1.496386616666667e-11 * tc[3] -
                 1.001276880000000e-15 * tc[4];
    // species 6: H2O
    species[6] = -3.000429710000000e+04 * invT - 1.932777610000000e+00 -
                 3.033992490000000e+00 * tc[0] - 1.088459020000000e-03 * tc[1] +
                 2.734541966666666e-08 * tc[2] + 8.086832250000000e-12 * tc[3] -
                 8.410049600000000e-16 * tc[4];
    // species 7: H2O2
    species[7] = -1.786178770000000e+04 * invT + 1.248846229999999e+00 -
                 4.165002850000000e+00 * tc[0] - 2.454158470000000e-03 * tc[1] +
                 3.168987083333333e-07 * tc[2] - 3.093216550000000e-11 * tc[3] +
                 1.439541525000000e-15 * tc[4];
    // species 8: O2
    species[8] = -1.088457720000000e+03 * invT - 2.170693450000000e+00 -
                 3.282537840000000e+00 * tc[0] - 7.415437700000000e-04 * tc[1] +
                 1.263277781666667e-07 * tc[2] - 1.745587958333333e-11 * tc[3] +
                 1.083588970000000e-15 * tc[4];
    // species 9: CH3
    species[9] = +1.677558430000000e+04 * invT - 6.194354070000000e+00 -
                 2.285717720000000e+00 * tc[0] - 3.619950185000000e-03 * tc[1] +
                 4.978572466666667e-07 * tc[2] - 4.964038700000000e-11 * tc[3] +
                 2.335771970000000e-15 * tc[4];
    // species 10: CH4
    species[10] = -9.468344590000001e+03 * invT - 1.836246650500000e+01 -
                  7.485149500000000e-02 * tc[0] -
                  6.695473350000000e-03 * tc[1] +
                  9.554763483333333e-07 * tc[2] -
                  1.019104458333333e-10 * tc[3] + 5.090761500000000e-15 * tc[4];
    // species 11: CH2O
    species[11] = -1.399583230000000e+04 * invT - 1.189563292000000e+01 -
                  1.760690080000000e+00 * tc[0] -
                  4.600000410000000e-03 * tc[1] +
                  7.370980216666666e-07 * tc[2] -
                  8.386767666666666e-11 * tc[3] + 4.419278200000001e-15 * tc[4];
    // species 12: CO
    species[12] = -1.415187240000000e+04 * invT - 5.103502110000000e+00 -
                  2.715185610000000e+00 * tc[0] -
                  1.031263715000000e-03 * tc[1] +
                  1.664709618333334e-07 * tc[2] -
                  1.917108400000000e-11 * tc[3] + 1.018238580000000e-15 * tc[4];
    // species 13: CO2
    species[13] = -4.875916600000000e+04 * invT + 1.585822230000000e+00 -
                  3.857460290000000e+00 * tc[0] -
                  2.207185130000000e-03 * tc[1] +
                  3.691356733333334e-07 * tc[2] -
                  4.362418233333334e-11 * tc[3] + 2.360420820000000e-15 * tc[4];
    // species 14: C2H2
    species[14] = +2.593599920000000e+04 * invT + 5.377850850000001e+00 -
                  4.147569640000000e+00 * tc[0] -
                  2.980833320000000e-03 * tc[1] +
                  3.954914200000000e-07 * tc[2] -
                  3.895101425000000e-11 * tc[3] + 1.806176065000000e-15 * tc[4];
    // species 15: C2H4
    species[15] = +4.939886140000000e+03 * invT - 8.269258140000002e+00 -
                  2.036111160000000e+00 * tc[0] -
                  7.322707550000000e-03 * tc[1] +
                  1.118463191666667e-06 * tc[2] -
                  1.226857691666667e-10 * tc[3] + 6.285303050000000e-15 * tc[4];
    // species 16: C2H6
    species[16] = -1.142639320000000e+04 * invT - 1.404372920000000e+01 -
                  1.071881500000000e+00 * tc[0] -
                  1.084263385000000e-02 * tc[1] +
                  1.670934450000000e-06 * tc[2] -
                  1.845100008333333e-10 * tc[3] + 9.500144500000000e-15 * tc[4];
    // species 17: CH2CHO
    species[17] = -9.695000000000000e+02 * invT + 1.100775780000000e+01 -
                  5.975669900000000e+00 * tc[0] -
                  4.065295700000000e-03 * tc[1] +
                  4.572707500000000e-07 * tc[2] -
                  3.391920083333333e-11 * tc[3] + 1.088008550000000e-15 * tc[4];
    // species 18: aC3H5
    species[18] = +1.748244900000000e+04 * invT + 1.774383770000000e+01 -
                  6.500787700000000e+00 * tc[0] -
                  7.162365500000000e-03 * tc[1] +
                  9.463605333333332e-07 * tc[2] -
                  9.234000833333333e-11 * tc[3] + 4.518194349999999e-15 * tc[4];
    // species 19: C3H6
    species[19] = -9.235703000000000e+02 * invT + 2.004560700000000e+01 -
                  6.732257000000000e+00 * tc[0] -
                  7.454170000000000e-03 * tc[1] +
                  8.249831666666666e-07 * tc[2] -
                  6.010018333333334e-11 * tc[3] + 1.883102000000000e-15 * tc[4];
    // species 20: C2H3CHO
    species[20] = -1.078405400000000e+04 * invT + 1.066998720000000e+01 -
                  5.811186800000000e+00 * tc[0] -
                  8.557128000000001e-03 * tc[1] +
                  1.247236016666667e-06 * tc[2] -
                  1.187687416666667e-10 * tc[3] + 4.587342050000000e-15 * tc[4];
    // species 21: C4H7
    species[21] = +2.095500800000000e+04 * invT + 1.590279150000000e+01 -
                  7.013483500000000e+00 * tc[0] -
                  1.131727900000000e-02 * tc[1] +
                  1.542424500000000e-06 * tc[2] -
                  1.400660583333333e-10 * tc[3] + 5.204308500000000e-15 * tc[4];
    // species 22: C4H81
    species[22] = -2.139723100000000e+03 * invT - 1.348961690000000e+01 -
                  2.053584100000000e+00 * tc[0] -
                  1.717525350000000e-02 * tc[1] +
                  2.647199500000000e-06 * tc[2] -
                  2.757471833333334e-10 * tc[3] + 1.268052250000000e-14 * tc[4];
    // species 23: C5H9
    species[23] = -1.721835900000000e+03 * invT + 4.326452500000000e+01 -
                  1.013864000000000e+01 * tc[0] -
                  1.135706900000000e-02 * tc[1] +
                  1.298507716666667e-06 * tc[2] -
                  9.897101666666667e-11 * tc[3] + 3.296622400000000e-15 * tc[4];
    // species 32: C12H25O2
    species[32] = -3.741180000000000e+04 * invT + 1.375992000000000e+02 -
                  2.847820000000000e+01 * tc[0] -
                  2.687695000000000e-02 * tc[1] +
                  2.803100000000000e-06 * tc[2] -
                  2.094725000000000e-10 * tc[3] + 7.360400000000000e-15 * tc[4];
    // species 33: OC12H23OOH
    species[33] = -7.182580000000000e+04 * invT + 1.014393000000000e+02 -
                  2.367310000000000e+01 * tc[0] -
                  3.081960000000000e-02 * tc[1] +
                  3.497266666666667e-06 * tc[2] -
                  2.776383333333333e-10 * tc[3] + 1.017950000000000e-14 * tc[4];
    // species 34: N2
    species[34] = -9.227977000000000e+02 * invT - 3.053888000000000e+00 -
                  2.926640000000000e+00 * tc[0] -
                  7.439884000000000e-04 * tc[1] +
                  9.474600000000001e-08 * tc[2] -
                  8.414198333333333e-12 * tc[3] + 3.376675500000000e-16 * tc[4];
  }

  // species with midpoint at T=1392 kelvin
  if (T < 1392) {
    // species 24: C5H10
    species[24] = -4.465466660000000e+03 * invT - 3.333621381000000e+01 +
                  1.062234810000000e+00 * tc[0] -
                  2.871091470000000e-02 * tc[1] +
                  6.241448166666667e-06 * tc[2] -
                  1.061374908333333e-09 * tc[3] + 8.980489449999999e-14 * tc[4];
    // species 25: C6H12
    species[25] = -7.343686170000000e+03 * invT - 3.666482115000000e+01 +
                  1.352752050000000e+00 * tc[0] -
                  3.493277130000000e-02 * tc[1] +
                  7.656800366666667e-06 * tc[2] -
                  1.308061191666667e-09 * tc[3] + 1.106480875000000e-13 * tc[4];
    // species 26: C7H14
    species[26] = -1.021686010000000e+04 * invT - 4.018400869000000e+01 +
                  1.677205490000000e+00 * tc[0] -
                  4.123058005000000e-02 * tc[1] +
                  9.108401800000000e-06 * tc[2] -
                  1.565519191666667e-09 * tc[3] + 1.328689915000000e-13 * tc[4];
    // species 27: C8H16
    species[27] = -1.310745590000000e+04 * invT - 4.308016725000000e+01 +
                  1.892269150000000e+00 * tc[0] -
                  4.730331785000000e-02 * tc[1] +
                  1.045642535000000e-05 * tc[2] -
                  1.792985908333333e-09 * tc[3] + 1.513593415000000e-13 * tc[4];
    // species 28: C9H18
    species[28] = -1.598908470000000e+04 * invT - 4.628559543000000e+01 +
                  2.161082630000000e+00 * tc[0] -
                  5.347914850000000e-02 * tc[1] +
                  1.184955406666667e-05 * tc[2] -
                  2.033092308333333e-09 * tc[3] + 1.713857735000000e-13 * tc[4];
    // species 30: C10H20
    species[30] = -1.887083650000000e+04 * invT - 4.948615518000000e+01 +
                  2.429016880000000e+00 * tc[0] -
                  5.965279900000000e-02 * tc[1] +
                  1.324148375000000e-05 * tc[2] -
                  2.272804966666667e-09 * tc[3] + 1.913591865000000e-13 * tc[4];
  } else {
    // species 24: C5H10
    species[24] = -1.008982050000000e+04 * invT + 6.695354750000000e+01 -
                  1.458515390000000e+01 * tc[0] -
                  1.120362355000000e-02 * tc[1] +
                  1.272246708333333e-06 * tc[2] -
                  9.849080500000001e-11 * tc[3] + 3.421925695000000e-15 * tc[4];
    // species 25: C6H12
    species[25] = -1.420628600000000e+04 * invT + 8.621563800000001e+01 -
                  1.783375290000000e+01 * tc[0] -
                  1.336888290000000e-02 * tc[1] +
                  1.516727955000000e-06 * tc[2] -
                  1.173498066666667e-10 * tc[3] + 4.075621220000000e-15 * tc[4];
    // species 26: C7H14
    species[26] = -1.832600650000000e+04 * invT + 1.055289147000000e+02 -
                  2.108980390000000e+01 * tc[0] -
                  1.553039390000000e-02 * tc[1] +
                  1.760746550000000e-06 * tc[2] -
                  1.361714833333333e-10 * tc[3] + 4.727991095000000e-15 * tc[4];
    // species 27: C8H16
    species[27] = -2.244856740000000e+04 * invT + 1.248917285000000e+02 -
                  2.435401250000000e+01 * tc[0] -
                  1.768332310000000e-02 * tc[1] +
                  2.003473133333334e-06 * tc[2] -
                  1.548792108333333e-10 * tc[3] + 5.376113100000000e-15 * tc[4];
    // species 28: C9H18
    species[28] = -2.657090610000000e+04 * invT + 1.442328406000000e+02 -
                  2.761421760000000e+01 * tc[0] -
                  1.984126435000000e-02 * tc[1] +
                  2.246990766666667e-06 * tc[2] -
                  1.736587100000000e-10 * tc[3] + 6.026964700000000e-15 * tc[4];
    // species 30: C10H20
    species[30] = -3.069373070000000e+04 * invT + 1.635805623000000e+02 -
                  3.087539030000000e+01 * tc[0] -
                  2.199857630000000e-02 * tc[1] +
                  2.490425500000000e-06 * tc[2] -
                  1.924313983333333e-10 * tc[3] + 6.677573850000000e-15 * tc[4];
  }

  // species with midpoint at T=1390 kelvin
  if (T < 1390) {
    // species 29: PXC9H19
    species[29] = -6.808185120000000e+03 * invT - 4.339577212000000e+01 +
                  1.043872920000000e+00 * tc[0] -
                  5.280864150000000e-02 * tc[1] +
                  1.113666618333333e-05 * tc[2] -
                  1.787384716666667e-09 * tc[3] + 1.387021375000000e-13 * tc[4];
  } else {
    // species 29: PXC9H19
    species[29] = -1.745160300000000e+04 * invT + 1.451476484000000e+02 -
                  2.830975140000000e+01 * tc[0] -
                  2.063286720000000e-02 * tc[1] +
                  2.339721483333333e-06 * tc[2] -
                  1.809790591666667e-10 * tc[3] + 6.284615349999999e-15 * tc[4];
  }
  return;
}

// compute the g/(RT) at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
gibbs_qss(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: CH2
    species[0] = +4.600404010000000e+04 * invT + 2.200146820000000e+00 -
                 3.762678670000000e+00 * tc[0] - 4.844360715000000e-04 * tc[1] -
                 4.658164016666667e-07 * tc[2] + 3.209092941666667e-10 * tc[3] -
                 8.437085950000000e-14 * tc[4];
    // species 1: CH2*
    species[1] = +5.049681630000000e+04 * invT + 4.967723077000000e+00 -
                 4.198604110000000e+00 * tc[0] + 1.183307095000000e-03 * tc[1] -
                 1.372160366666667e-06 * tc[2] + 5.573466508333334e-10 * tc[3] -
                 9.715736850000000e-14 * tc[4];
    // species 2: HCO
    species[2] = +3.839564960000000e+03 * invT + 8.268134100000002e-01 -
                 4.221185840000000e+00 * tc[0] + 1.621962660000000e-03 * tc[1] -
                 2.296657433333333e-06 * tc[2] + 1.109534108333333e-09 * tc[3] -
                 2.168844325000000e-13 * tc[4];
    // species 3: CH3O
    species[3] = +1.295697600000000e+03 * invT - 2.860603620000000e+00 -
                 3.711805020000000e+00 * tc[0] + 1.402316530000000e-03 * tc[1] -
                 6.275849516666667e-06 * tc[2] + 3.942267408333333e-09 * tc[3] -
                 9.329421000000001e-13 * tc[4];
    // species 4: C2H3
    species[4] = +3.485984680000000e+04 * invT - 5.298073800000000e+00 -
                 3.212466450000000e+00 * tc[0] - 7.573958100000000e-04 * tc[1] -
                 4.320156866666666e-06 * tc[2] + 2.980482058333333e-09 * tc[3] -
                 7.357543650000000e-13 * tc[4];
    // species 5: C2H5
    species[5] = +1.284162650000000e+04 * invT - 4.007435600000004e-01 -
                 4.306465680000000e+00 * tc[0] + 2.093294460000000e-03 * tc[1] -
                 8.285713450000000e-06 * tc[2] + 4.992721716666666e-09 * tc[3] -
                 1.152545020000000e-12 * tc[4];
    // species 6: nC3H7
    species[6] = +1.031234600000000e+04 * invT - 2.008691670000000e+01 -
                 1.049117300000000e+00 * tc[0] - 1.300448650000000e-02 * tc[1] -
                 3.923752666666667e-07 * tc[2] + 1.632927666666667e-09 * tc[3] -
                 4.686010350000000e-13 * tc[4];
    // species 7: pC4H9
    species[7] = +7.322104000000000e+03 * invT - 2.096056380000000e+01 -
                 1.208704200000000e+00 * tc[0] - 1.914874850000000e-02 * tc[1] +
                 1.211008483333333e-06 * tc[2] + 1.285712250000000e-09 * tc[3] -
                 4.342971750000000e-13 * tc[4];
    // species 16: C12OOH
    species[16] = -2.383800000000000e+04 * invT - 1.420029000000000e+01 -
                  5.152310000000000e+00 * tc[0] -
                  4.989565000000000e-02 * tc[1] +
                  3.010583333333333e-06 * tc[2] +
                  3.486958333333333e-09 * tc[3] - 1.113930000000000e-12 * tc[4];
    // species 17: O2C12H24OOH
    species[17] = -4.168750000000000e+04 * invT - 4.086092800000000e+01 -
                  4.819720000000000e-01 * tc[0] -
                  7.251000000000001e-02 * tc[1] +
                  1.665513333333333e-05 * tc[2] -
                  2.170183333333333e-09 * tc[3] - 5.967900000000001e-14 * tc[4];
  } else {
    // species 0: CH2
    species[0] = +4.626360400000000e+04 * invT - 3.297092110000000e+00 -
                 2.874101130000000e+00 * tc[0] - 1.828196460000000e-03 * tc[1] +
                 2.348243283333333e-07 * tc[2] - 2.168162908333333e-11 * tc[3] +
                 9.386378350000000e-16 * tc[4];
    // species 1: CH2*
    species[1] = +5.092599970000000e+04 * invT - 6.334463270000000e+00 -
                 2.292038420000000e+00 * tc[0] - 2.327943185000000e-03 * tc[1] +
                 3.353199116666667e-07 * tc[2] - 3.482550000000000e-11 * tc[3] +
                 1.698581825000000e-15 * tc[4];
    // species 2: HCO
    species[2] = +4.011918150000000e+03 * invT - 7.026170540000000e+00 -
                 2.772174380000000e+00 * tc[0] - 2.478477630000000e-03 * tc[1] +
                 4.140760216666667e-07 * tc[2] - 4.909681483333334e-11 * tc[3] +
                 2.667543555000000e-15 * tc[4];
    // species 3: CH3O
    species[3] = +3.781119400000000e+02 * invT + 6.724592660000000e+00 -
                 4.757792380000000e+00 * tc[0] - 3.720712370000000e-03 * tc[1] +
                 4.495086266666666e-07 * tc[2] - 3.650754200000000e-11 * tc[3] +
                 1.317685490000000e-15 * tc[4];
    // species 4: C2H3
    species[4] = +3.461287390000000e+04 * invT - 4.770599780000000e+00 -
                 3.016724000000000e+00 * tc[0] - 5.165114600000000e-03 * tc[1] +
                 7.801372483333333e-07 * tc[2] - 8.480274000000000e-11 * tc[3] +
                 4.313035205000000e-15 * tc[4];
    // species 5: C2H5
    species[5] = +1.285752000000000e+04 * invT - 1.150777788000000e+01 -
                 1.954656420000000e+00 * tc[0] - 8.698636100000001e-03 * tc[1] +
                 1.330344446666667e-06 * tc[2] - 1.460147408333333e-10 * tc[3] +
                 7.482078800000000e-15 * tc[4];
    // species 6: nC3H7
    species[6] = +7.976223600000000e+03 * invT + 2.322504490000000e+01 -
                 7.709747900000000e+00 * tc[0] - 8.015742500000001e-03 * tc[1] +
                 8.786706333333332e-07 * tc[2] - 6.324029333333334e-11 * tc[3] +
                 1.943135950000000e-15 * tc[4];
    // species 7: pC4H9
    species[7] = +4.964405800000000e+03 * invT + 2.657398650000000e+01 -
                 8.682239500000000e+00 * tc[0] - 1.184553550000000e-02 * tc[1] +
                 1.265814416666667e-06 * tc[2] - 5.535594666666666e-11 * tc[3] -
                 2.742256800000000e-15 * tc[4];
    // species 16: C12OOH
    species[16] = -3.111920000000000e+04 * invT + 1.380569000000000e+02 -
                  2.920190000000000e+01 * tc[0] -
                  2.579585000000000e-02 * tc[1] +
                  2.622116666666667e-06 * tc[2] -
                  1.919216666666667e-10 * tc[3] + 6.632000000000000e-15 * tc[4];
    // species 17: O2C12H24OOH
    species[17] = -5.126750000000000e+04 * invT + 1.728407000000000e+02 -
                  3.509070000000000e+01 * tc[0] -
                  2.552950000000000e-02 * tc[1] +
                  2.572416666666666e-06 * tc[2] -
                  1.871891666666667e-10 * tc[3] + 6.445050000000000e-15 * tc[4];
  }

  // species with midpoint at T=1390 kelvin
  if (T < 1390) {
    // species 8: PXC5H11
    species[8] = +4.716114600000000e+03 * invT - 2.867142819190000e+01 -
                 5.243840810000000e-02 * tc[0] - 2.803984790000000e-02 * tc[1] +
                 5.525763383333334e-06 * tc[2] - 8.146114841666667e-10 * tc[3] +
                 5.700483000000000e-14 * tc[4];
    // species 9: PXC6H13
    species[9] = +1.832803930000000e+03 * invT - 3.181238076500000e+01 +
                 2.048714650000000e-01 * tc[0] - 3.419006360000000e-02 * tc[1] +
                 6.907465199999999e-06 * tc[2] - 1.051298350000000e-09 * tc[3] +
                 7.656002899999999e-14 * tc[4];
    // species 10: PXC7H15
    species[10] = -1.045902230000000e+03 * invT - 3.515597150599999e+01 +
                  4.995704060000000e-01 * tc[0] -
                  4.044132335000000e-02 * tc[1] +
                  8.342212566666667e-06 * tc[2] -
                  1.304577566666667e-09 * tc[3] + 9.830811350000000e-14 * tc[4];
    // species 11: PXC8H17
    species[11] = -3.926895110000000e+03 * invT - 3.838582253800000e+01 +
                  7.727594380000000e-01 * tc[0] -
                  4.662748525000000e-02 * tc[1] +
                  9.740787416666667e-06 * tc[2] -
                  1.546418450000000e-09 * tc[3] + 1.185637415000000e-13 * tc[4];
    // species 12: PXC10H21
    species[12] = -9.689675499999999e+03 * invT - 4.481462868000000e+01 +
                  1.313583480000000e+00 * tc[0] -
                  5.898640650000000e-02 * tc[1] +
                  1.253071798333333e-05 * tc[2] -
                  2.027759216666667e-09 * tc[3] + 1.587614260000000e-13 * tc[4];
    // species 13: PXC12H25
    species[13] = -1.545304350000000e+04 * invT - 5.122052951000000e+01 +
                  1.850287410000000e+00 * tc[0] -
                  7.133535400000000e-02 * tc[1] +
                  1.531527591666667e-05 * tc[2] -
                  2.507361600000000e-09 * tc[3] + 1.987271500000000e-13 * tc[4];
  } else {
    // species 8: PXC5H11
    species[8] = -9.807123070000000e+02 * invT + 6.978067390000000e+01 -
                 1.529774460000000e+01 * tc[0] - 1.198676550000000e-02 * tc[1] +
                 1.363988246666667e-06 * tc[2] - 1.057358966666667e-10 * tc[3] +
                 3.677045275000000e-15 * tc[4];
    // species 9: PXC6H13
    species[9] = -5.092990410000000e+03 * invT + 8.898764130000001e+01 -
                 1.853854700000000e+01 * tc[0] - 1.415539810000000e-02 * tc[1] +
                 1.608845410000000e-06 * tc[2] - 1.246229875000000e-10 * tc[3] +
                 4.331680320000000e-15 * tc[4];
    // species 10: PXC7H15
    species[10] = -9.209382210000000e+03 * invT + 1.082895020000000e+02 -
                  2.179407090000000e+01 * tc[0] -
                  1.631401215000000e-02 * tc[1] +
                  1.852304066666667e-06 * tc[2] -
                  1.433892900000000e-10 * tc[3] + 4.981834995000000e-15 * tc[4];
    // species 11: PXC8H17
    species[11] = -1.333005350000000e+04 * invT + 1.276084196000000e+02 -
                  2.505103560000000e+01 * tc[0] -
                  1.847400810000000e-02 * tc[1] +
                  2.096087733333333e-06 * tc[2] -
                  1.621903408333333e-10 * tc[3] + 5.633444900000000e-15 * tc[4];
    // species 12: PXC10H21
    species[12] = -2.157378320000000e+04 * invT + 1.662787020000000e+02 -
                  3.156971600000000e+01 * tc[0] -
                  2.279092015000000e-02 * tc[1] +
                  2.583249416666667e-06 * tc[2] -
                  1.997591108333333e-10 * tc[3] + 6.935477950000000e-15 * tc[4];
    // species 13: PXC12H25
    species[13] = -2.981943750000000e+04 * invT + 2.049749225000000e+02 -
                  3.809218850000000e+01 * tc[0] -
                  2.710539240000000e-02 * tc[1] +
                  3.070091950000000e-06 * tc[2] -
                  2.373018108333333e-10 * tc[3] + 8.236587400000000e-15 * tc[4];
  }

  // species with midpoint at T=1385 kelvin
  if (T < 1385) {
    // species 14: SXC12H25
    species[14] = -1.676605390000000e+04 * invT - 4.972006039000000e+01 +
                  1.367870890000000e+00 * tc[0] -
                  6.867767399999999e-02 * tc[1] +
                  1.373460263333333e-05 * tc[2] -
                  1.970179683333333e-09 * tc[3] + 1.237179660000000e-13 * tc[4];
    // species 15: S3XC12H25
    species[15] = -1.676605390000000e+04 * invT - 4.972006039000000e+01 +
                  1.367870890000000e+00 * tc[0] -
                  6.867767399999999e-02 * tc[1] +
                  1.373460263333333e-05 * tc[2] -
                  1.970179683333333e-09 * tc[3] + 1.237179660000000e-13 * tc[4];
  } else {
    // species 14: SXC12H25
    species[14] = -3.121449880000000e+04 * invT + 2.037747598000000e+02 -
                  3.796882680000000e+01 * tc[0] -
                  2.693597320000000e-02 * tc[1] +
                  3.036187716666667e-06 * tc[2] -
                  2.339787525000000e-10 * tc[3] + 8.105421000000000e-15 * tc[4];
    // species 15: S3XC12H25
    species[15] = -3.121449880000000e+04 * invT + 2.037747598000000e+02 -
                  3.796882680000000e+01 * tc[0] -
                  2.693597320000000e-02 * tc[1] +
                  3.036187716666667e-06 * tc[2] -
                  2.339787525000000e-10 * tc[3] + 8.105421000000000e-15 * tc[4];
  }
  return;
}

// compute the a/(RT) at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
helmholtz(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1 / T;

  // species with midpoint at T=1391 kelvin
  if (T < 1391) {
    // species 0: NC12H26
    species[0] = -4.00654253e+04 * invT - 5.37212785e+01 +
                 2.62181594e+00 * tc[0] - 7.36188555e-02 * tc[1] +
                 1.57328378e-05 * tc[2] - 2.56201057e-09 * tc[3] +
                 2.01801115e-13 * tc[4];
    // species 31: C12H24
    species[31] = -2.46345299e+04 * invT - 5.68793138e+01 +
                  2.96342681e+00 * tc[0] - 7.19961800e-02 * tc[1] +
                  1.60230669e-05 * tc[2] - 2.75145394e-09 * tc[3] +
                  2.31199095e-13 * tc[4];
  } else {
    // species 0: NC12H26
    species[0] = -5.48843465e+04 * invT + 2.10180426e+02 -
                 3.85095037e+01 * tc[0] - 2.81775024e-02 * tc[1] +
                 3.19155333e-06 * tc[2] - 2.46687385e-10 * tc[3] +
                 8.56220750e-15 * tc[4];
    // species 31: C12H24
    species[31] = -3.89405962e+04 * invT + 2.01292874e+02 -
                  3.74002111e+01 * tc[0] - 2.63115377e-02 * tc[1] +
                  2.97707198e-06 * tc[2] - 2.29958219e-10 * tc[3] +
                  7.97812495e-15 * tc[4];
  }

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 1: H
    species[1] = +2.54736599e+04 * invT + 1.94668285e+00 -
                 2.50000000e+00 * tc[0] - 3.52666409e-13 * tc[1] +
                 3.32653273e-16 * tc[2] - 1.91734693e-19 * tc[3] +
                 4.63866166e-23 * tc[4];
    // species 2: O
    species[2] = +2.91222592e+04 * invT + 1.16333640e-01 -
                 3.16826710e+00 * tc[0] + 1.63965942e-03 * tc[1] -
                 1.10717733e-06 * tc[2] + 5.10672187e-10 * tc[3] -
                 1.05632985e-13 * tc[4];
    // species 3: OH
    species[3] = +3.38153812e+03 * invT + 3.81573857e+00 -
                 4.12530561e+00 * tc[0] + 1.61272470e-03 * tc[1] -
                 1.08794115e-06 * tc[2] + 4.83211369e-10 * tc[3] -
                 1.03118689e-13 * tc[4];
    // species 4: HO2
    species[4] = +2.94808040e+02 * invT - 4.14864440e-01 -
                 4.30179801e+00 * tc[0] + 2.37456025e-03 * tc[1] -
                 3.52638152e-06 * tc[2] + 2.02303245e-09 * tc[3] -
                 4.64612562e-13 * tc[4];
    // species 5: H2
    species[5] = -9.17935173e+02 * invT + 6.61320882e-01 -
                 2.34433112e+00 * tc[0] - 3.99026037e-03 * tc[1] +
                 3.24635850e-06 * tc[2] - 1.67976745e-09 * tc[3] +
                 3.68805881e-13 * tc[4];
    // species 6: H2O
    species[6] = -3.02937267e+04 * invT + 4.04767277e+00 -
                 4.19864056e+00 * tc[0] + 1.01821705e-03 * tc[1] -
                 1.08673369e-06 * tc[2] + 4.57330885e-10 * tc[3] -
                 8.85989085e-14 * tc[4];
    // species 7: H2O2
    species[7] = -1.77025821e+04 * invT - 1.58938050e-01 -
                 4.27611269e+00 * tc[0] + 2.71411208e-04 * tc[1] -
                 2.78892835e-06 * tc[2] + 1.79809011e-09 * tc[3] -
                 4.31227182e-13 * tc[4];
    // species 8: O2
    species[8] = -1.06394356e+03 * invT - 8.75219370e-01 -
                 3.78245636e+00 * tc[0] + 1.49836708e-03 * tc[1] -
                 1.64121700e-06 * tc[2] + 8.06774591e-10 * tc[3] -
                 1.62186418e-13 * tc[4];
    // species 9: CH3
    species[9] = +1.64449988e+04 * invT + 1.06902607e+00 -
                 3.67359040e+00 * tc[0] - 1.00547588e-03 * tc[1] -
                 9.55036427e-07 * tc[2] + 5.72597854e-10 * tc[3] -
                 1.27192867e-13 * tc[4];
    // species 10: CH4
    species[10] = -1.02466476e+04 * invT + 8.79117989e+00 -
                  5.14987613e+00 * tc[0] + 6.83548940e-03 * tc[1] -
                  8.19667665e-06 * tc[2] + 4.03952522e-09 * tc[3] -
                  8.33469780e-13 * tc[4];
    // species 11: CH2O
    species[11] = -1.43089567e+04 * invT + 3.19091025e+00 -
                  4.79372315e+00 * tc[0] + 4.95416684e-03 * tc[1] -
                  6.22033347e-06 * tc[2] + 3.16071051e-09 * tc[3] -
                  6.58863260e-13 * tc[4];
    // species 12: CO
    species[12] = -1.43440860e+04 * invT - 9.28875810e-01 -
                  3.57953347e+00 * tc[0] + 3.05176840e-04 * tc[1] -
                  1.69469055e-07 * tc[2] - 7.55838237e-11 * tc[3] +
                  4.52212249e-14 * tc[4];
    // species 13: CO2
    species[13] = -4.83719697e+04 * invT - 8.54427870e+00 -
                  2.35677352e+00 * tc[0] - 4.49229839e-03 * tc[1] +
                  1.18726045e-06 * tc[2] - 2.04932518e-10 * tc[3] +
                  7.18497740e-15 * tc[4];
    // species 14: C2H2
    species[14] = +2.64289807e+04 * invT - 1.41310240e+01 -
                  8.08681094e-01 * tc[0] - 1.16807815e-02 * tc[1] +
                  5.91953025e-06 * tc[2] - 2.33460364e-09 * tc[3] +
                  4.25036487e-13 * tc[4];
    // species 15: C2H4
    species[15] = +5.08977593e+03 * invT - 1.13812948e+00 -
                  3.95920148e+00 * tc[0] + 3.78526124e-03 * tc[1] -
                  9.51650487e-06 * tc[2] + 5.76323961e-09 * tc[3] -
                  1.34942187e-12 * tc[4];
    // species 16: C2H6
    species[16] = -1.15222055e+04 * invT + 6.24601760e-01 -
                  4.29142492e+00 * tc[0] + 2.75077135e-03 * tc[1] -
                  9.99063813e-06 * tc[2] + 5.90388571e-09 * tc[3] -
                  1.34342886e-12 * tc[4];
    // species 17: CH2CHO
    species[17] = +6.20000000e+01 * invT - 7.16239110e+00 -
                  3.40906240e+00 * tc[0] - 5.36928700e-03 * tc[1] -
                  3.15248750e-07 * tc[2] + 5.96548592e-10 * tc[3] -
                  1.43369255e-13 * tc[4];
    // species 18: aC3H5
    species[18] = +1.92456290e+04 * invT - 1.68100305e+01 -
                  1.36318350e+00 * tc[0] - 9.90691050e-03 * tc[1] -
                  2.08284333e-06 * tc[2] + 2.77962958e-09 * tc[3] -
                  7.92328550e-13 * tc[4];
    // species 19: C3H6
    species[19] = +1.07482600e+03 * invT - 1.56520330e+01 -
                  1.49330700e+00 * tc[0] - 1.04625900e-02 * tc[1] -
                  7.47799000e-07 * tc[2] + 1.39076000e-09 * tc[3] -
                  3.57907300e-13 * tc[4];
    // species 20: C2H3CHO
    species[20] = -9.33573440e+03 * invT - 1.92267272e+01 -
                  1.27134980e+00 * tc[0] - 1.31155270e-02 * tc[1] +
                  1.54853842e-06 * tc[2] + 3.98643933e-10 * tc[3] -
                  1.67402715e-13 * tc[4];
    // species 21: C4H7
    species[21] = +2.26533280e+04 * invT - 2.36933837e+01 -
                  7.44494320e-01 * tc[0] - 1.98394285e-02 * tc[1] +
                  3.81634767e-06 * tc[2] - 1.77941442e-10 * tc[3] -
                  1.15481875e-13 * tc[4];
    // species 22: C4H81
    species[22] = -1.79040040e+03 * invT - 2.08813310e+01 -
                  1.18113800e+00 * tc[0] - 1.54266900e-02 * tc[1] -
                  8.47754117e-07 * tc[2] + 2.05457400e-09 * tc[3] -
                  5.55509650e-13 * tc[4];
    // species 23: C5H9
    species[23] = +2.81218870e+03 * invT - 3.98782551e+01 +
                  2.41901110e+00 * tc[0] - 2.02151945e-02 * tc[1] -
                  1.13003898e-06 * tc[2] + 2.81039517e-09 * tc[3] -
                  7.55835650e-13 * tc[4];
    // species 32: C12H25O2
    species[32] = -2.98918000e+04 * invT - 1.26600600e+01 -
                  5.31404000e+00 * tc[0] - 4.46936500e-02 * tc[1] -
                  2.42251667e-06 * tc[2] + 6.24375000e-09 * tc[3] -
                  1.67662500e-12 * tc[4];
    // species 33: OC12H23OOH
    species[33] = -6.65361000e+04 * invT + 9.65780000e-01 -
                  8.80733000e+00 * tc[0] - 3.25311500e-02 * tc[1] -
                  1.15843000e-05 * tc[2] + 1.05754167e-08 * tc[3] -
                  2.55495500e-12 * tc[4];
    // species 34: N2
    species[34] = -1.02089990e+03 * invT - 1.65169500e+00 -
                  3.29867700e+00 * tc[0] - 7.04120200e-04 * tc[1] +
                  6.60537000e-07 * tc[2] - 4.70126250e-10 * tc[3] +
                  1.22242700e-13 * tc[4];
  } else {
    // species 1: H
    species[1] = +2.54736599e+04 * invT + 1.94668292e+00 -
                 2.50000001e+00 * tc[0] + 1.15421486e-11 * tc[1] -
                 2.69269913e-15 * tc[2] + 3.94596029e-19 * tc[3] -
                 2.49098679e-23 * tc[4];
    // species 2: O
    species[2] = +2.92175791e+04 * invT - 3.21491786e+00 -
                 2.56942078e+00 * tc[0] + 4.29870569e-05 * tc[1] -
                 6.99140982e-09 * tc[2] + 8.34814992e-13 * tc[3] -
                 6.14168455e-17 * tc[4];
    // species 3: OH
    species[3] = +3.71885774e+03 * invT - 3.83691187e+00 -
                 2.86472886e+00 * tc[0] - 5.28252240e-04 * tc[1] +
                 4.31804597e-08 * tc[2] - 2.54348895e-12 * tc[3] +
                 6.65979380e-17 * tc[4];
    // species 4: HO2
    species[4] = +1.11856713e+02 * invT - 7.67891250e-01 -
                 4.01721090e+00 * tc[0] - 1.11991006e-03 * tc[1] +
                 1.05609692e-07 * tc[2] - 9.52053083e-12 * tc[3] +
                 5.39542675e-16 * tc[4];
    // species 5: H2
    species[5] = -9.50158922e+02 * invT + 5.54230251e+00 -
                 3.33727920e+00 * tc[0] + 2.47012365e-05 * tc[1] -
                 8.32427963e-08 * tc[2] + 1.49638662e-11 * tc[3] -
                 1.00127688e-15 * tc[4];
    // species 6: H2O
    species[6] = -3.00042971e+04 * invT - 2.93277761e+00 -
                 3.03399249e+00 * tc[0] - 1.08845902e-03 * tc[1] +
                 2.73454197e-08 * tc[2] + 8.08683225e-12 * tc[3] -
                 8.41004960e-16 * tc[4];
    // species 7: H2O2
    species[7] = -1.78617877e+04 * invT + 2.48846230e-01 -
                 4.16500285e+00 * tc[0] - 2.45415847e-03 * tc[1] +
                 3.16898708e-07 * tc[2] - 3.09321655e-11 * tc[3] +
                 1.43954153e-15 * tc[4];
    // species 8: O2
    species[8] = -1.08845772e+03 * invT - 3.17069345e+00 -
                 3.28253784e+00 * tc[0] - 7.41543770e-04 * tc[1] +
                 1.26327778e-07 * tc[2] - 1.74558796e-11 * tc[3] +
                 1.08358897e-15 * tc[4];
    // species 9: CH3
    species[9] = +1.67755843e+04 * invT - 7.19435407e+00 -
                 2.28571772e+00 * tc[0] - 3.61995018e-03 * tc[1] +
                 4.97857247e-07 * tc[2] - 4.96403870e-11 * tc[3] +
                 2.33577197e-15 * tc[4];
    // species 10: CH4
    species[10] = -9.46834459e+03 * invT - 1.93624665e+01 -
                  7.48514950e-02 * tc[0] - 6.69547335e-03 * tc[1] +
                  9.55476348e-07 * tc[2] - 1.01910446e-10 * tc[3] +
                  5.09076150e-15 * tc[4];
    // species 11: CH2O
    species[11] = -1.39958323e+04 * invT - 1.28956329e+01 -
                  1.76069008e+00 * tc[0] - 4.60000041e-03 * tc[1] +
                  7.37098022e-07 * tc[2] - 8.38676767e-11 * tc[3] +
                  4.41927820e-15 * tc[4];
    // species 12: CO
    species[12] = -1.41518724e+04 * invT - 6.10350211e+00 -
                  2.71518561e+00 * tc[0] - 1.03126372e-03 * tc[1] +
                  1.66470962e-07 * tc[2] - 1.91710840e-11 * tc[3] +
                  1.01823858e-15 * tc[4];
    // species 13: CO2
    species[13] = -4.87591660e+04 * invT + 5.85822230e-01 -
                  3.85746029e+00 * tc[0] - 2.20718513e-03 * tc[1] +
                  3.69135673e-07 * tc[2] - 4.36241823e-11 * tc[3] +
                  2.36042082e-15 * tc[4];
    // species 14: C2H2
    species[14] = +2.59359992e+04 * invT + 4.37785085e+00 -
                  4.14756964e+00 * tc[0] - 2.98083332e-03 * tc[1] +
                  3.95491420e-07 * tc[2] - 3.89510143e-11 * tc[3] +
                  1.80617607e-15 * tc[4];
    // species 15: C2H4
    species[15] = +4.93988614e+03 * invT - 9.26925814e+00 -
                  2.03611116e+00 * tc[0] - 7.32270755e-03 * tc[1] +
                  1.11846319e-06 * tc[2] - 1.22685769e-10 * tc[3] +
                  6.28530305e-15 * tc[4];
    // species 16: C2H6
    species[16] = -1.14263932e+04 * invT - 1.50437292e+01 -
                  1.07188150e+00 * tc[0] - 1.08426339e-02 * tc[1] +
                  1.67093445e-06 * tc[2] - 1.84510001e-10 * tc[3] +
                  9.50014450e-15 * tc[4];
    // species 17: CH2CHO
    species[17] = -9.69500000e+02 * invT + 1.00077578e+01 -
                  5.97566990e+00 * tc[0] - 4.06529570e-03 * tc[1] +
                  4.57270750e-07 * tc[2] - 3.39192008e-11 * tc[3] +
                  1.08800855e-15 * tc[4];
    // species 18: aC3H5
    species[18] = +1.74824490e+04 * invT + 1.67438377e+01 -
                  6.50078770e+00 * tc[0] - 7.16236550e-03 * tc[1] +
                  9.46360533e-07 * tc[2] - 9.23400083e-11 * tc[3] +
                  4.51819435e-15 * tc[4];
    // species 19: C3H6
    species[19] = -9.23570300e+02 * invT + 1.90456070e+01 -
                  6.73225700e+00 * tc[0] - 7.45417000e-03 * tc[1] +
                  8.24983167e-07 * tc[2] - 6.01001833e-11 * tc[3] +
                  1.88310200e-15 * tc[4];
    // species 20: C2H3CHO
    species[20] = -1.07840540e+04 * invT + 9.66998720e+00 -
                  5.81118680e+00 * tc[0] - 8.55712800e-03 * tc[1] +
                  1.24723602e-06 * tc[2] - 1.18768742e-10 * tc[3] +
                  4.58734205e-15 * tc[4];
    // species 21: C4H7
    species[21] = +2.09550080e+04 * invT + 1.49027915e+01 -
                  7.01348350e+00 * tc[0] - 1.13172790e-02 * tc[1] +
                  1.54242450e-06 * tc[2] - 1.40066058e-10 * tc[3] +
                  5.20430850e-15 * tc[4];
    // species 22: C4H81
    species[22] = -2.13972310e+03 * invT - 1.44896169e+01 -
                  2.05358410e+00 * tc[0] - 1.71752535e-02 * tc[1] +
                  2.64719950e-06 * tc[2] - 2.75747183e-10 * tc[3] +
                  1.26805225e-14 * tc[4];
    // species 23: C5H9
    species[23] = -1.72183590e+03 * invT + 4.22645250e+01 -
                  1.01386400e+01 * tc[0] - 1.13570690e-02 * tc[1] +
                  1.29850772e-06 * tc[2] - 9.89710167e-11 * tc[3] +
                  3.29662240e-15 * tc[4];
    // species 32: C12H25O2
    species[32] = -3.74118000e+04 * invT + 1.36599200e+02 -
                  2.84782000e+01 * tc[0] - 2.68769500e-02 * tc[1] +
                  2.80310000e-06 * tc[2] - 2.09472500e-10 * tc[3] +
                  7.36040000e-15 * tc[4];
    // species 33: OC12H23OOH
    species[33] = -7.18258000e+04 * invT + 1.00439300e+02 -
                  2.36731000e+01 * tc[0] - 3.08196000e-02 * tc[1] +
                  3.49726667e-06 * tc[2] - 2.77638333e-10 * tc[3] +
                  1.01795000e-14 * tc[4];
    // species 34: N2
    species[34] = -9.22797700e+02 * invT - 4.05388800e+00 -
                  2.92664000e+00 * tc[0] - 7.43988400e-04 * tc[1] +
                  9.47460000e-08 * tc[2] - 8.41419833e-12 * tc[3] +
                  3.37667550e-16 * tc[4];
  }

  // species with midpoint at T=1392 kelvin
  if (T < 1392) {
    // species 24: C5H10
    species[24] = -4.46546666e+03 * invT - 3.43362138e+01 +
                  1.06223481e+00 * tc[0] - 2.87109147e-02 * tc[1] +
                  6.24144817e-06 * tc[2] - 1.06137491e-09 * tc[3] +
                  8.98048945e-14 * tc[4];
    // species 25: C6H12
    species[25] = -7.34368617e+03 * invT - 3.76648212e+01 +
                  1.35275205e+00 * tc[0] - 3.49327713e-02 * tc[1] +
                  7.65680037e-06 * tc[2] - 1.30806119e-09 * tc[3] +
                  1.10648088e-13 * tc[4];
    // species 26: C7H14
    species[26] = -1.02168601e+04 * invT - 4.11840087e+01 +
                  1.67720549e+00 * tc[0] - 4.12305800e-02 * tc[1] +
                  9.10840180e-06 * tc[2] - 1.56551919e-09 * tc[3] +
                  1.32868991e-13 * tc[4];
    // species 27: C8H16
    species[27] = -1.31074559e+04 * invT - 4.40801672e+01 +
                  1.89226915e+00 * tc[0] - 4.73033178e-02 * tc[1] +
                  1.04564254e-05 * tc[2] - 1.79298591e-09 * tc[3] +
                  1.51359342e-13 * tc[4];
    // species 28: C9H18
    species[28] = -1.59890847e+04 * invT - 4.72855954e+01 +
                  2.16108263e+00 * tc[0] - 5.34791485e-02 * tc[1] +
                  1.18495541e-05 * tc[2] - 2.03309231e-09 * tc[3] +
                  1.71385773e-13 * tc[4];
    // species 30: C10H20
    species[30] = -1.88708365e+04 * invT - 5.04861552e+01 +
                  2.42901688e+00 * tc[0] - 5.96527990e-02 * tc[1] +
                  1.32414838e-05 * tc[2] - 2.27280497e-09 * tc[3] +
                  1.91359186e-13 * tc[4];
  } else {
    // species 24: C5H10
    species[24] = -1.00898205e+04 * invT + 6.59535475e+01 -
                  1.45851539e+01 * tc[0] - 1.12036235e-02 * tc[1] +
                  1.27224671e-06 * tc[2] - 9.84908050e-11 * tc[3] +
                  3.42192569e-15 * tc[4];
    // species 25: C6H12
    species[25] = -1.42062860e+04 * invT + 8.52156380e+01 -
                  1.78337529e+01 * tc[0] - 1.33688829e-02 * tc[1] +
                  1.51672796e-06 * tc[2] - 1.17349807e-10 * tc[3] +
                  4.07562122e-15 * tc[4];
    // species 26: C7H14
    species[26] = -1.83260065e+04 * invT + 1.04528915e+02 -
                  2.10898039e+01 * tc[0] - 1.55303939e-02 * tc[1] +
                  1.76074655e-06 * tc[2] - 1.36171483e-10 * tc[3] +
                  4.72799110e-15 * tc[4];
    // species 27: C8H16
    species[27] = -2.24485674e+04 * invT + 1.23891728e+02 -
                  2.43540125e+01 * tc[0] - 1.76833231e-02 * tc[1] +
                  2.00347313e-06 * tc[2] - 1.54879211e-10 * tc[3] +
                  5.37611310e-15 * tc[4];
    // species 28: C9H18
    species[28] = -2.65709061e+04 * invT + 1.43232841e+02 -
                  2.76142176e+01 * tc[0] - 1.98412643e-02 * tc[1] +
                  2.24699077e-06 * tc[2] - 1.73658710e-10 * tc[3] +
                  6.02696470e-15 * tc[4];
    // species 30: C10H20
    species[30] = -3.06937307e+04 * invT + 1.62580562e+02 -
                  3.08753903e+01 * tc[0] - 2.19985763e-02 * tc[1] +
                  2.49042550e-06 * tc[2] - 1.92431398e-10 * tc[3] +
                  6.67757385e-15 * tc[4];
  }

  // species with midpoint at T=1390 kelvin
  if (T < 1390) {
    // species 29: PXC9H19
    species[29] = -6.80818512e+03 * invT - 4.43957721e+01 +
                  1.04387292e+00 * tc[0] - 5.28086415e-02 * tc[1] +
                  1.11366662e-05 * tc[2] - 1.78738472e-09 * tc[3] +
                  1.38702138e-13 * tc[4];
  } else {
    // species 29: PXC9H19
    species[29] = -1.74516030e+04 * invT + 1.44147648e+02 -
                  2.83097514e+01 * tc[0] - 2.06328672e-02 * tc[1] +
                  2.33972148e-06 * tc[2] - 1.80979059e-10 * tc[3] +
                  6.28461535e-15 * tc[4];
  }
  return;
}

// compute the e/(RT) at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesInternalEnergy(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1 / T;

  // species with midpoint at T=1391 kelvin
  if (T < 1391) {
    // species 0: NC12H26
    species[0] = -3.62181594e+00 + 7.36188555e-02 * tc[1] -
                 3.14656757e-05 * tc[2] + 7.68603170e-09 * tc[3] -
                 8.07204460e-13 * tc[4] - 4.00654253e+04 * invT;
    // species 31: C12H24
    species[31] = -3.96342681e+00 + 7.19961800e-02 * tc[1] -
                  3.20461338e-05 * tc[2] + 8.25436183e-09 * tc[3] -
                  9.24796380e-13 * tc[4] - 2.46345299e+04 * invT;
  } else {
    // species 0: NC12H26
    species[0] = +3.75095037e+01 + 2.81775024e-02 * tc[1] -
                 6.38310667e-06 * tc[2] + 7.40062155e-10 * tc[3] -
                 3.42488300e-14 * tc[4] - 5.48843465e+04 * invT;
    // species 31: C12H24
    species[31] = +3.64002111e+01 + 2.63115377e-02 * tc[1] -
                  5.95414397e-06 * tc[2] + 6.89874658e-10 * tc[3] -
                  3.19124998e-14 * tc[4] - 3.89405962e+04 * invT;
  }

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 1: H
    species[1] = +1.50000000e+00 + 3.52666409e-13 * tc[1] -
                 6.65306547e-16 * tc[2] + 5.75204080e-19 * tc[3] -
                 1.85546466e-22 * tc[4] + 2.54736599e+04 * invT;
    // species 2: O
    species[2] = +2.16826710e+00 - 1.63965942e-03 * tc[1] +
                 2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
                 4.22531942e-13 * tc[4] + 2.91222592e+04 * invT;
    // species 3: OH
    species[3] = +3.12530561e+00 - 1.61272470e-03 * tc[1] +
                 2.17588230e-06 * tc[2] - 1.44963411e-09 * tc[3] +
                 4.12474758e-13 * tc[4] + 3.38153812e+03 * invT;
    // species 4: HO2
    species[4] = +3.30179801e+00 - 2.37456025e-03 * tc[1] +
                 7.05276303e-06 * tc[2] - 6.06909735e-09 * tc[3] +
                 1.85845025e-12 * tc[4] + 2.94808040e+02 * invT;
    // species 5: H2
    species[5] = +1.34433112e+00 + 3.99026037e-03 * tc[1] -
                 6.49271700e-06 * tc[2] + 5.03930235e-09 * tc[3] -
                 1.47522352e-12 * tc[4] - 9.17935173e+02 * invT;
    // species 6: H2O
    species[6] = +3.19864056e+00 - 1.01821705e-03 * tc[1] +
                 2.17346737e-06 * tc[2] - 1.37199266e-09 * tc[3] +
                 3.54395634e-13 * tc[4] - 3.02937267e+04 * invT;
    // species 7: H2O2
    species[7] = +3.27611269e+00 - 2.71411208e-04 * tc[1] +
                 5.57785670e-06 * tc[2] - 5.39427032e-09 * tc[3] +
                 1.72490873e-12 * tc[4] - 1.77025821e+04 * invT;
    // species 8: O2
    species[8] = +2.78245636e+00 - 1.49836708e-03 * tc[1] +
                 3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
                 6.48745674e-13 * tc[4] - 1.06394356e+03 * invT;
    // species 9: CH3
    species[9] = +2.67359040e+00 + 1.00547588e-03 * tc[1] +
                 1.91007285e-06 * tc[2] - 1.71779356e-09 * tc[3] +
                 5.08771468e-13 * tc[4] + 1.64449988e+04 * invT;
    // species 10: CH4
    species[10] = +4.14987613e+00 - 6.83548940e-03 * tc[1] +
                  1.63933533e-05 * tc[2] - 1.21185757e-08 * tc[3] +
                  3.33387912e-12 * tc[4] - 1.02466476e+04 * invT;
    // species 11: CH2O
    species[11] = +3.79372315e+00 - 4.95416684e-03 * tc[1] +
                  1.24406669e-05 * tc[2] - 9.48213152e-09 * tc[3] +
                  2.63545304e-12 * tc[4] - 1.43089567e+04 * invT;
    // species 12: CO
    species[12] = +2.57953347e+00 - 3.05176840e-04 * tc[1] +
                  3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
                  1.80884900e-13 * tc[4] - 1.43440860e+04 * invT;
    // species 13: CO2
    species[13] = +1.35677352e+00 + 4.49229839e-03 * tc[1] -
                  2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                  2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 14: C2H2
    species[14] = -1.91318906e-01 + 1.16807815e-02 * tc[1] -
                  1.18390605e-05 * tc[2] + 7.00381092e-09 * tc[3] -
                  1.70014595e-12 * tc[4] + 2.64289807e+04 * invT;
    // species 15: C2H4
    species[15] = +2.95920148e+00 - 3.78526124e-03 * tc[1] +
                  1.90330097e-05 * tc[2] - 1.72897188e-08 * tc[3] +
                  5.39768746e-12 * tc[4] + 5.08977593e+03 * invT;
    // species 16: C2H6
    species[16] = +3.29142492e+00 - 2.75077135e-03 * tc[1] +
                  1.99812763e-05 * tc[2] - 1.77116571e-08 * tc[3] +
                  5.37371542e-12 * tc[4] - 1.15222055e+04 * invT;
    // species 17: CH2CHO
    species[17] = +2.40906240e+00 + 5.36928700e-03 * tc[1] +
                  6.30497500e-07 * tc[2] - 1.78964578e-09 * tc[3] +
                  5.73477020e-13 * tc[4] + 6.20000000e+01 * invT;
    // species 18: aC3H5
    species[18] = +3.63183500e-01 + 9.90691050e-03 * tc[1] +
                  4.16568667e-06 * tc[2] - 8.33888875e-09 * tc[3] +
                  3.16931420e-12 * tc[4] + 1.92456290e+04 * invT;
    // species 19: C3H6
    species[19] = +4.93307000e-01 + 1.04625900e-02 * tc[1] +
                  1.49559800e-06 * tc[2] - 4.17228000e-09 * tc[3] +
                  1.43162920e-12 * tc[4] + 1.07482600e+03 * invT;
    // species 20: C2H3CHO
    species[20] = +2.71349800e-01 + 1.31155270e-02 * tc[1] -
                  3.09707683e-06 * tc[2] - 1.19593180e-09 * tc[3] +
                  6.69610860e-13 * tc[4] - 9.33573440e+03 * invT;
    // species 21: C4H7
    species[21] = -2.55505680e-01 + 1.98394285e-02 * tc[1] -
                  7.63269533e-06 * tc[2] + 5.33824325e-10 * tc[3] +
                  4.61927500e-13 * tc[4] + 2.26533280e+04 * invT;
    // species 22: C4H81
    species[22] = +1.81138000e-01 + 1.54266900e-02 * tc[1] +
                  1.69550823e-06 * tc[2] - 6.16372200e-09 * tc[3] +
                  2.22203860e-12 * tc[4] - 1.79040040e+03 * invT;
    // species 23: C5H9
    species[23] = -3.41901110e+00 + 2.02151945e-02 * tc[1] +
                  2.26007797e-06 * tc[2] - 8.43118550e-09 * tc[3] +
                  3.02334260e-12 * tc[4] + 2.81218870e+03 * invT;
    // species 32: C12H25O2
    species[32] = +4.31404000e+00 + 4.46936500e-02 * tc[1] +
                  4.84503333e-06 * tc[2] - 1.87312500e-08 * tc[3] +
                  6.70650000e-12 * tc[4] - 2.98918000e+04 * invT;
    // species 33: OC12H23OOH
    species[33] = +7.80733000e+00 + 3.25311500e-02 * tc[1] +
                  2.31686000e-05 * tc[2] - 3.17262500e-08 * tc[3] +
                  1.02198200e-11 * tc[4] - 6.65361000e+04 * invT;
    // species 34: N2
    species[34] = +2.29867700e+00 + 7.04120200e-04 * tc[1] -
                  1.32107400e-06 * tc[2] + 1.41037875e-09 * tc[3] -
                  4.88970800e-13 * tc[4] - 1.02089990e+03 * invT;
  } else {
    // species 1: H
    species[1] = +1.50000001e+00 - 1.15421486e-11 * tc[1] +
                 5.38539827e-15 * tc[2] - 1.18378809e-18 * tc[3] +
                 9.96394714e-23 * tc[4] + 2.54736599e+04 * invT;
    // species 2: O
    species[2] = +1.56942078e+00 - 4.29870569e-05 * tc[1] +
                 1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
                 2.45667382e-16 * tc[4] + 2.92175791e+04 * invT;
    // species 3: OH
    species[3] = +1.86472886e+00 + 5.28252240e-04 * tc[1] -
                 8.63609193e-08 * tc[2] + 7.63046685e-12 * tc[3] -
                 2.66391752e-16 * tc[4] + 3.71885774e+03 * invT;
    // species 4: HO2
    species[4] = +3.01721090e+00 + 1.11991006e-03 * tc[1] -
                 2.11219383e-07 * tc[2] + 2.85615925e-11 * tc[3] -
                 2.15817070e-15 * tc[4] + 1.11856713e+02 * invT;
    // species 5: H2
    species[5] = +2.33727920e+00 - 2.47012365e-05 * tc[1] +
                 1.66485593e-07 * tc[2] - 4.48915985e-11 * tc[3] +
                 4.00510752e-15 * tc[4] - 9.50158922e+02 * invT;
    // species 6: H2O
    species[6] = +2.03399249e+00 + 1.08845902e-03 * tc[1] -
                 5.46908393e-08 * tc[2] - 2.42604967e-11 * tc[3] +
                 3.36401984e-15 * tc[4] - 3.00042971e+04 * invT;
    // species 7: H2O2
    species[7] = +3.16500285e+00 + 2.45415847e-03 * tc[1] -
                 6.33797417e-07 * tc[2] + 9.27964965e-11 * tc[3] -
                 5.75816610e-15 * tc[4] - 1.78617877e+04 * invT;
    // species 8: O2
    species[8] = +2.28253784e+00 + 7.41543770e-04 * tc[1] -
                 2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
                 4.33435588e-15 * tc[4] - 1.08845772e+03 * invT;
    // species 9: CH3
    species[9] = +1.28571772e+00 + 3.61995018e-03 * tc[1] -
                 9.95714493e-07 * tc[2] + 1.48921161e-10 * tc[3] -
                 9.34308788e-15 * tc[4] + 1.67755843e+04 * invT;
    // species 10: CH4
    species[10] = -9.25148505e-01 + 6.69547335e-03 * tc[1] -
                  1.91095270e-06 * tc[2] + 3.05731338e-10 * tc[3] -
                  2.03630460e-14 * tc[4] - 9.46834459e+03 * invT;
    // species 11: CH2O
    species[11] = +7.60690080e-01 + 4.60000041e-03 * tc[1] -
                  1.47419604e-06 * tc[2] + 2.51603030e-10 * tc[3] -
                  1.76771128e-14 * tc[4] - 1.39958323e+04 * invT;
    // species 12: CO
    species[12] = +1.71518561e+00 + 1.03126372e-03 * tc[1] -
                  3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
                  4.07295432e-15 * tc[4] - 1.41518724e+04 * invT;
    // species 13: CO2
    species[13] = +2.85746029e+00 + 2.20718513e-03 * tc[1] -
                  7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                  9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 14: C2H2
    species[14] = +3.14756964e+00 + 2.98083332e-03 * tc[1] -
                  7.90982840e-07 * tc[2] + 1.16853043e-10 * tc[3] -
                  7.22470426e-15 * tc[4] + 2.59359992e+04 * invT;
    // species 15: C2H4
    species[15] = +1.03611116e+00 + 7.32270755e-03 * tc[1] -
                  2.23692638e-06 * tc[2] + 3.68057308e-10 * tc[3] -
                  2.51412122e-14 * tc[4] + 4.93988614e+03 * invT;
    // species 16: C2H6
    species[16] = +7.18815000e-02 + 1.08426339e-02 * tc[1] -
                  3.34186890e-06 * tc[2] + 5.53530003e-10 * tc[3] -
                  3.80005780e-14 * tc[4] - 1.14263932e+04 * invT;
    // species 17: CH2CHO
    species[17] = +4.97566990e+00 + 4.06529570e-03 * tc[1] -
                  9.14541500e-07 * tc[2] + 1.01757603e-10 * tc[3] -
                  4.35203420e-15 * tc[4] - 9.69500000e+02 * invT;
    // species 18: aC3H5
    species[18] = +5.50078770e+00 + 7.16236550e-03 * tc[1] -
                  1.89272107e-06 * tc[2] + 2.77020025e-10 * tc[3] -
                  1.80727774e-14 * tc[4] + 1.74824490e+04 * invT;
    // species 19: C3H6
    species[19] = +5.73225700e+00 + 7.45417000e-03 * tc[1] -
                  1.64996633e-06 * tc[2] + 1.80300550e-10 * tc[3] -
                  7.53240800e-15 * tc[4] - 9.23570300e+02 * invT;
    // species 20: C2H3CHO
    species[20] = +4.81118680e+00 + 8.55712800e-03 * tc[1] -
                  2.49447203e-06 * tc[2] + 3.56306225e-10 * tc[3] -
                  1.83493682e-14 * tc[4] - 1.07840540e+04 * invT;
    // species 21: C4H7
    species[21] = +6.01348350e+00 + 1.13172790e-02 * tc[1] -
                  3.08484900e-06 * tc[2] + 4.20198175e-10 * tc[3] -
                  2.08172340e-14 * tc[4] + 2.09550080e+04 * invT;
    // species 22: C4H81
    species[22] = +1.05358410e+00 + 1.71752535e-02 * tc[1] -
                  5.29439900e-06 * tc[2] + 8.27241550e-10 * tc[3] -
                  5.07220900e-14 * tc[4] - 2.13972310e+03 * invT;
    // species 23: C5H9
    species[23] = +9.13864000e+00 + 1.13570690e-02 * tc[1] -
                  2.59701543e-06 * tc[2] + 2.96913050e-10 * tc[3] -
                  1.31864896e-14 * tc[4] - 1.72183590e+03 * invT;
    // species 32: C12H25O2
    species[32] = +2.74782000e+01 + 2.68769500e-02 * tc[1] -
                  5.60620000e-06 * tc[2] + 6.28417500e-10 * tc[3] -
                  2.94416000e-14 * tc[4] - 3.74118000e+04 * invT;
    // species 33: OC12H23OOH
    species[33] = +2.26731000e+01 + 3.08196000e-02 * tc[1] -
                  6.99453333e-06 * tc[2] + 8.32915000e-10 * tc[3] -
                  4.07180000e-14 * tc[4] - 7.18258000e+04 * invT;
    // species 34: N2
    species[34] = +1.92664000e+00 + 7.43988400e-04 * tc[1] -
                  1.89492000e-07 * tc[2] + 2.52425950e-11 * tc[3] -
                  1.35067020e-15 * tc[4] - 9.22797700e+02 * invT;
  }

  // species with midpoint at T=1392 kelvin
  if (T < 1392) {
    // species 24: C5H10
    species[24] = -2.06223481e+00 + 2.87109147e-02 * tc[1] -
                  1.24828963e-05 * tc[2] + 3.18412472e-09 * tc[3] -
                  3.59219578e-13 * tc[4] - 4.46546666e+03 * invT;
    // species 25: C6H12
    species[25] = -2.35275205e+00 + 3.49327713e-02 * tc[1] -
                  1.53136007e-05 * tc[2] + 3.92418358e-09 * tc[3] -
                  4.42592350e-13 * tc[4] - 7.34368617e+03 * invT;
    // species 26: C7H14
    species[26] = -2.67720549e+00 + 4.12305800e-02 * tc[1] -
                  1.82168036e-05 * tc[2] + 4.69655757e-09 * tc[3] -
                  5.31475966e-13 * tc[4] - 1.02168601e+04 * invT;
    // species 27: C8H16
    species[27] = -2.89226915e+00 + 4.73033178e-02 * tc[1] -
                  2.09128507e-05 * tc[2] + 5.37895772e-09 * tc[3] -
                  6.05437366e-13 * tc[4] - 1.31074559e+04 * invT;
    // species 28: C9H18
    species[28] = -3.16108263e+00 + 5.34791485e-02 * tc[1] -
                  2.36991081e-05 * tc[2] + 6.09927692e-09 * tc[3] -
                  6.85543094e-13 * tc[4] - 1.59890847e+04 * invT;
    // species 30: C10H20
    species[30] = -3.42901688e+00 + 5.96527990e-02 * tc[1] -
                  2.64829675e-05 * tc[2] + 6.81841490e-09 * tc[3] -
                  7.65436746e-13 * tc[4] - 1.88708365e+04 * invT;
  } else {
    // species 24: C5H10
    species[24] = +1.35851539e+01 + 1.12036235e-02 * tc[1] -
                  2.54449342e-06 * tc[2] + 2.95472415e-10 * tc[3] -
                  1.36877028e-14 * tc[4] - 1.00898205e+04 * invT;
    // species 25: C6H12
    species[25] = +1.68337529e+01 + 1.33688829e-02 * tc[1] -
                  3.03345591e-06 * tc[2] + 3.52049420e-10 * tc[3] -
                  1.63024849e-14 * tc[4] - 1.42062860e+04 * invT;
    // species 26: C7H14
    species[26] = +2.00898039e+01 + 1.55303939e-02 * tc[1] -
                  3.52149310e-06 * tc[2] + 4.08514450e-10 * tc[3] -
                  1.89119644e-14 * tc[4] - 1.83260065e+04 * invT;
    // species 27: C8H16
    species[27] = +2.33540125e+01 + 1.76833231e-02 * tc[1] -
                  4.00694627e-06 * tc[2] + 4.64637633e-10 * tc[3] -
                  2.15044524e-14 * tc[4] - 2.24485674e+04 * invT;
    // species 28: C9H18
    species[28] = +2.66142176e+01 + 1.98412643e-02 * tc[1] -
                  4.49398153e-06 * tc[2] + 5.20976130e-10 * tc[3] -
                  2.41078588e-14 * tc[4] - 2.65709061e+04 * invT;
    // species 30: C10H20
    species[30] = +2.98753903e+01 + 2.19985763e-02 * tc[1] -
                  4.98085100e-06 * tc[2] + 5.77294195e-10 * tc[3] -
                  2.67102954e-14 * tc[4] - 3.06937307e+04 * invT;
  }

  // species with midpoint at T=1390 kelvin
  if (T < 1390) {
    // species 29: PXC9H19
    species[29] = -2.04387292e+00 + 5.28086415e-02 * tc[1] -
                  2.22733324e-05 * tc[2] + 5.36215415e-09 * tc[3] -
                  5.54808550e-13 * tc[4] - 6.80818512e+03 * invT;
  } else {
    // species 29: PXC9H19
    species[29] = +2.73097514e+01 + 2.06328672e-02 * tc[1] -
                  4.67944297e-06 * tc[2] + 5.42937177e-10 * tc[3] -
                  2.51384614e-14 * tc[4] - 1.74516030e+04 * invT;
  }
  return;
}

// compute the h/(RT) at the given temperature (Eq 20)
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEnthalpy(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1 / T;

  // species with midpoint at T=1391 kelvin
  if (T < 1391) {
    // species 0: NC12H26
    species[0] = -2.62181594e+00 + 7.36188555e-02 * tc[1] -
                 3.14656757e-05 * tc[2] + 7.68603170e-09 * tc[3] -
                 8.07204460e-13 * tc[4] - 4.00654253e+04 * invT;
    // species 31: C12H24
    species[31] = -2.96342681e+00 + 7.19961800e-02 * tc[1] -
                  3.20461338e-05 * tc[2] + 8.25436183e-09 * tc[3] -
                  9.24796380e-13 * tc[4] - 2.46345299e+04 * invT;
  } else {
    // species 0: NC12H26
    species[0] = +3.85095037e+01 + 2.81775024e-02 * tc[1] -
                 6.38310667e-06 * tc[2] + 7.40062155e-10 * tc[3] -
                 3.42488300e-14 * tc[4] - 5.48843465e+04 * invT;
    // species 31: C12H24
    species[31] = +3.74002111e+01 + 2.63115377e-02 * tc[1] -
                  5.95414397e-06 * tc[2] + 6.89874658e-10 * tc[3] -
                  3.19124998e-14 * tc[4] - 3.89405962e+04 * invT;
  }

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 1: H
    species[1] = +2.50000000e+00 + 3.52666409e-13 * tc[1] -
                 6.65306547e-16 * tc[2] + 5.75204080e-19 * tc[3] -
                 1.85546466e-22 * tc[4] + 2.54736599e+04 * invT;
    // species 2: O
    species[2] = +3.16826710e+00 - 1.63965942e-03 * tc[1] +
                 2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
                 4.22531942e-13 * tc[4] + 2.91222592e+04 * invT;
    // species 3: OH
    species[3] = +4.12530561e+00 - 1.61272470e-03 * tc[1] +
                 2.17588230e-06 * tc[2] - 1.44963411e-09 * tc[3] +
                 4.12474758e-13 * tc[4] + 3.38153812e+03 * invT;
    // species 4: HO2
    species[4] = +4.30179801e+00 - 2.37456025e-03 * tc[1] +
                 7.05276303e-06 * tc[2] - 6.06909735e-09 * tc[3] +
                 1.85845025e-12 * tc[4] + 2.94808040e+02 * invT;
    // species 5: H2
    species[5] = +2.34433112e+00 + 3.99026037e-03 * tc[1] -
                 6.49271700e-06 * tc[2] + 5.03930235e-09 * tc[3] -
                 1.47522352e-12 * tc[4] - 9.17935173e+02 * invT;
    // species 6: H2O
    species[6] = +4.19864056e+00 - 1.01821705e-03 * tc[1] +
                 2.17346737e-06 * tc[2] - 1.37199266e-09 * tc[3] +
                 3.54395634e-13 * tc[4] - 3.02937267e+04 * invT;
    // species 7: H2O2
    species[7] = +4.27611269e+00 - 2.71411208e-04 * tc[1] +
                 5.57785670e-06 * tc[2] - 5.39427032e-09 * tc[3] +
                 1.72490873e-12 * tc[4] - 1.77025821e+04 * invT;
    // species 8: O2
    species[8] = +3.78245636e+00 - 1.49836708e-03 * tc[1] +
                 3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
                 6.48745674e-13 * tc[4] - 1.06394356e+03 * invT;
    // species 9: CH3
    species[9] = +3.67359040e+00 + 1.00547588e-03 * tc[1] +
                 1.91007285e-06 * tc[2] - 1.71779356e-09 * tc[3] +
                 5.08771468e-13 * tc[4] + 1.64449988e+04 * invT;
    // species 10: CH4
    species[10] = +5.14987613e+00 - 6.83548940e-03 * tc[1] +
                  1.63933533e-05 * tc[2] - 1.21185757e-08 * tc[3] +
                  3.33387912e-12 * tc[4] - 1.02466476e+04 * invT;
    // species 11: CH2O
    species[11] = +4.79372315e+00 - 4.95416684e-03 * tc[1] +
                  1.24406669e-05 * tc[2] - 9.48213152e-09 * tc[3] +
                  2.63545304e-12 * tc[4] - 1.43089567e+04 * invT;
    // species 12: CO
    species[12] = +3.57953347e+00 - 3.05176840e-04 * tc[1] +
                  3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
                  1.80884900e-13 * tc[4] - 1.43440860e+04 * invT;
    // species 13: CO2
    species[13] = +2.35677352e+00 + 4.49229839e-03 * tc[1] -
                  2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                  2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 14: C2H2
    species[14] = +8.08681094e-01 + 1.16807815e-02 * tc[1] -
                  1.18390605e-05 * tc[2] + 7.00381092e-09 * tc[3] -
                  1.70014595e-12 * tc[4] + 2.64289807e+04 * invT;
    // species 15: C2H4
    species[15] = +3.95920148e+00 - 3.78526124e-03 * tc[1] +
                  1.90330097e-05 * tc[2] - 1.72897188e-08 * tc[3] +
                  5.39768746e-12 * tc[4] + 5.08977593e+03 * invT;
    // species 16: C2H6
    species[16] = +4.29142492e+00 - 2.75077135e-03 * tc[1] +
                  1.99812763e-05 * tc[2] - 1.77116571e-08 * tc[3] +
                  5.37371542e-12 * tc[4] - 1.15222055e+04 * invT;
    // species 17: CH2CHO
    species[17] = +3.40906240e+00 + 5.36928700e-03 * tc[1] +
                  6.30497500e-07 * tc[2] - 1.78964578e-09 * tc[3] +
                  5.73477020e-13 * tc[4] + 6.20000000e+01 * invT;
    // species 18: aC3H5
    species[18] = +1.36318350e+00 + 9.90691050e-03 * tc[1] +
                  4.16568667e-06 * tc[2] - 8.33888875e-09 * tc[3] +
                  3.16931420e-12 * tc[4] + 1.92456290e+04 * invT;
    // species 19: C3H6
    species[19] = +1.49330700e+00 + 1.04625900e-02 * tc[1] +
                  1.49559800e-06 * tc[2] - 4.17228000e-09 * tc[3] +
                  1.43162920e-12 * tc[4] + 1.07482600e+03 * invT;
    // species 20: C2H3CHO
    species[20] = +1.27134980e+00 + 1.31155270e-02 * tc[1] -
                  3.09707683e-06 * tc[2] - 1.19593180e-09 * tc[3] +
                  6.69610860e-13 * tc[4] - 9.33573440e+03 * invT;
    // species 21: C4H7
    species[21] = +7.44494320e-01 + 1.98394285e-02 * tc[1] -
                  7.63269533e-06 * tc[2] + 5.33824325e-10 * tc[3] +
                  4.61927500e-13 * tc[4] + 2.26533280e+04 * invT;
    // species 22: C4H81
    species[22] = +1.18113800e+00 + 1.54266900e-02 * tc[1] +
                  1.69550823e-06 * tc[2] - 6.16372200e-09 * tc[3] +
                  2.22203860e-12 * tc[4] - 1.79040040e+03 * invT;
    // species 23: C5H9
    species[23] = -2.41901110e+00 + 2.02151945e-02 * tc[1] +
                  2.26007797e-06 * tc[2] - 8.43118550e-09 * tc[3] +
                  3.02334260e-12 * tc[4] + 2.81218870e+03 * invT;
    // species 32: C12H25O2
    species[32] = +5.31404000e+00 + 4.46936500e-02 * tc[1] +
                  4.84503333e-06 * tc[2] - 1.87312500e-08 * tc[3] +
                  6.70650000e-12 * tc[4] - 2.98918000e+04 * invT;
    // species 33: OC12H23OOH
    species[33] = +8.80733000e+00 + 3.25311500e-02 * tc[1] +
                  2.31686000e-05 * tc[2] - 3.17262500e-08 * tc[3] +
                  1.02198200e-11 * tc[4] - 6.65361000e+04 * invT;
    // species 34: N2
    species[34] = +3.29867700e+00 + 7.04120200e-04 * tc[1] -
                  1.32107400e-06 * tc[2] + 1.41037875e-09 * tc[3] -
                  4.88970800e-13 * tc[4] - 1.02089990e+03 * invT;
  } else {
    // species 1: H
    species[1] = +2.50000001e+00 - 1.15421486e-11 * tc[1] +
                 5.38539827e-15 * tc[2] - 1.18378809e-18 * tc[3] +
                 9.96394714e-23 * tc[4] + 2.54736599e+04 * invT;
    // species 2: O
    species[2] = +2.56942078e+00 - 4.29870569e-05 * tc[1] +
                 1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
                 2.45667382e-16 * tc[4] + 2.92175791e+04 * invT;
    // species 3: OH
    species[3] = +2.86472886e+00 + 5.28252240e-04 * tc[1] -
                 8.63609193e-08 * tc[2] + 7.63046685e-12 * tc[3] -
                 2.66391752e-16 * tc[4] + 3.71885774e+03 * invT;
    // species 4: HO2
    species[4] = +4.01721090e+00 + 1.11991006e-03 * tc[1] -
                 2.11219383e-07 * tc[2] + 2.85615925e-11 * tc[3] -
                 2.15817070e-15 * tc[4] + 1.11856713e+02 * invT;
    // species 5: H2
    species[5] = +3.33727920e+00 - 2.47012365e-05 * tc[1] +
                 1.66485593e-07 * tc[2] - 4.48915985e-11 * tc[3] +
                 4.00510752e-15 * tc[4] - 9.50158922e+02 * invT;
    // species 6: H2O
    species[6] = +3.03399249e+00 + 1.08845902e-03 * tc[1] -
                 5.46908393e-08 * tc[2] - 2.42604967e-11 * tc[3] +
                 3.36401984e-15 * tc[4] - 3.00042971e+04 * invT;
    // species 7: H2O2
    species[7] = +4.16500285e+00 + 2.45415847e-03 * tc[1] -
                 6.33797417e-07 * tc[2] + 9.27964965e-11 * tc[3] -
                 5.75816610e-15 * tc[4] - 1.78617877e+04 * invT;
    // species 8: O2
    species[8] = +3.28253784e+00 + 7.41543770e-04 * tc[1] -
                 2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
                 4.33435588e-15 * tc[4] - 1.08845772e+03 * invT;
    // species 9: CH3
    species[9] = +2.28571772e+00 + 3.61995018e-03 * tc[1] -
                 9.95714493e-07 * tc[2] + 1.48921161e-10 * tc[3] -
                 9.34308788e-15 * tc[4] + 1.67755843e+04 * invT;
    // species 10: CH4
    species[10] = +7.48514950e-02 + 6.69547335e-03 * tc[1] -
                  1.91095270e-06 * tc[2] + 3.05731338e-10 * tc[3] -
                  2.03630460e-14 * tc[4] - 9.46834459e+03 * invT;
    // species 11: CH2O
    species[11] = +1.76069008e+00 + 4.60000041e-03 * tc[1] -
                  1.47419604e-06 * tc[2] + 2.51603030e-10 * tc[3] -
                  1.76771128e-14 * tc[4] - 1.39958323e+04 * invT;
    // species 12: CO
    species[12] = +2.71518561e+00 + 1.03126372e-03 * tc[1] -
                  3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
                  4.07295432e-15 * tc[4] - 1.41518724e+04 * invT;
    // species 13: CO2
    species[13] = +3.85746029e+00 + 2.20718513e-03 * tc[1] -
                  7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                  9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 14: C2H2
    species[14] = +4.14756964e+00 + 2.98083332e-03 * tc[1] -
                  7.90982840e-07 * tc[2] + 1.16853043e-10 * tc[3] -
                  7.22470426e-15 * tc[4] + 2.59359992e+04 * invT;
    // species 15: C2H4
    species[15] = +2.03611116e+00 + 7.32270755e-03 * tc[1] -
                  2.23692638e-06 * tc[2] + 3.68057308e-10 * tc[3] -
                  2.51412122e-14 * tc[4] + 4.93988614e+03 * invT;
    // species 16: C2H6
    species[16] = +1.07188150e+00 + 1.08426339e-02 * tc[1] -
                  3.34186890e-06 * tc[2] + 5.53530003e-10 * tc[3] -
                  3.80005780e-14 * tc[4] - 1.14263932e+04 * invT;
    // species 17: CH2CHO
    species[17] = +5.97566990e+00 + 4.06529570e-03 * tc[1] -
                  9.14541500e-07 * tc[2] + 1.01757603e-10 * tc[3] -
                  4.35203420e-15 * tc[4] - 9.69500000e+02 * invT;
    // species 18: aC3H5
    species[18] = +6.50078770e+00 + 7.16236550e-03 * tc[1] -
                  1.89272107e-06 * tc[2] + 2.77020025e-10 * tc[3] -
                  1.80727774e-14 * tc[4] + 1.74824490e+04 * invT;
    // species 19: C3H6
    species[19] = +6.73225700e+00 + 7.45417000e-03 * tc[1] -
                  1.64996633e-06 * tc[2] + 1.80300550e-10 * tc[3] -
                  7.53240800e-15 * tc[4] - 9.23570300e+02 * invT;
    // species 20: C2H3CHO
    species[20] = +5.81118680e+00 + 8.55712800e-03 * tc[1] -
                  2.49447203e-06 * tc[2] + 3.56306225e-10 * tc[3] -
                  1.83493682e-14 * tc[4] - 1.07840540e+04 * invT;
    // species 21: C4H7
    species[21] = +7.01348350e+00 + 1.13172790e-02 * tc[1] -
                  3.08484900e-06 * tc[2] + 4.20198175e-10 * tc[3] -
                  2.08172340e-14 * tc[4] + 2.09550080e+04 * invT;
    // species 22: C4H81
    species[22] = +2.05358410e+00 + 1.71752535e-02 * tc[1] -
                  5.29439900e-06 * tc[2] + 8.27241550e-10 * tc[3] -
                  5.07220900e-14 * tc[4] - 2.13972310e+03 * invT;
    // species 23: C5H9
    species[23] = +1.01386400e+01 + 1.13570690e-02 * tc[1] -
                  2.59701543e-06 * tc[2] + 2.96913050e-10 * tc[3] -
                  1.31864896e-14 * tc[4] - 1.72183590e+03 * invT;
    // species 32: C12H25O2
    species[32] = +2.84782000e+01 + 2.68769500e-02 * tc[1] -
                  5.60620000e-06 * tc[2] + 6.28417500e-10 * tc[3] -
                  2.94416000e-14 * tc[4] - 3.74118000e+04 * invT;
    // species 33: OC12H23OOH
    species[33] = +2.36731000e+01 + 3.08196000e-02 * tc[1] -
                  6.99453333e-06 * tc[2] + 8.32915000e-10 * tc[3] -
                  4.07180000e-14 * tc[4] - 7.18258000e+04 * invT;
    // species 34: N2
    species[34] = +2.92664000e+00 + 7.43988400e-04 * tc[1] -
                  1.89492000e-07 * tc[2] + 2.52425950e-11 * tc[3] -
                  1.35067020e-15 * tc[4] - 9.22797700e+02 * invT;
  }

  // species with midpoint at T=1392 kelvin
  if (T < 1392) {
    // species 24: C5H10
    species[24] = -1.06223481e+00 + 2.87109147e-02 * tc[1] -
                  1.24828963e-05 * tc[2] + 3.18412472e-09 * tc[3] -
                  3.59219578e-13 * tc[4] - 4.46546666e+03 * invT;
    // species 25: C6H12
    species[25] = -1.35275205e+00 + 3.49327713e-02 * tc[1] -
                  1.53136007e-05 * tc[2] + 3.92418358e-09 * tc[3] -
                  4.42592350e-13 * tc[4] - 7.34368617e+03 * invT;
    // species 26: C7H14
    species[26] = -1.67720549e+00 + 4.12305800e-02 * tc[1] -
                  1.82168036e-05 * tc[2] + 4.69655757e-09 * tc[3] -
                  5.31475966e-13 * tc[4] - 1.02168601e+04 * invT;
    // species 27: C8H16
    species[27] = -1.89226915e+00 + 4.73033178e-02 * tc[1] -
                  2.09128507e-05 * tc[2] + 5.37895772e-09 * tc[3] -
                  6.05437366e-13 * tc[4] - 1.31074559e+04 * invT;
    // species 28: C9H18
    species[28] = -2.16108263e+00 + 5.34791485e-02 * tc[1] -
                  2.36991081e-05 * tc[2] + 6.09927692e-09 * tc[3] -
                  6.85543094e-13 * tc[4] - 1.59890847e+04 * invT;
    // species 30: C10H20
    species[30] = -2.42901688e+00 + 5.96527990e-02 * tc[1] -
                  2.64829675e-05 * tc[2] + 6.81841490e-09 * tc[3] -
                  7.65436746e-13 * tc[4] - 1.88708365e+04 * invT;
  } else {
    // species 24: C5H10
    species[24] = +1.45851539e+01 + 1.12036235e-02 * tc[1] -
                  2.54449342e-06 * tc[2] + 2.95472415e-10 * tc[3] -
                  1.36877028e-14 * tc[4] - 1.00898205e+04 * invT;
    // species 25: C6H12
    species[25] = +1.78337529e+01 + 1.33688829e-02 * tc[1] -
                  3.03345591e-06 * tc[2] + 3.52049420e-10 * tc[3] -
                  1.63024849e-14 * tc[4] - 1.42062860e+04 * invT;
    // species 26: C7H14
    species[26] = +2.10898039e+01 + 1.55303939e-02 * tc[1] -
                  3.52149310e-06 * tc[2] + 4.08514450e-10 * tc[3] -
                  1.89119644e-14 * tc[4] - 1.83260065e+04 * invT;
    // species 27: C8H16
    species[27] = +2.43540125e+01 + 1.76833231e-02 * tc[1] -
                  4.00694627e-06 * tc[2] + 4.64637633e-10 * tc[3] -
                  2.15044524e-14 * tc[4] - 2.24485674e+04 * invT;
    // species 28: C9H18
    species[28] = +2.76142176e+01 + 1.98412643e-02 * tc[1] -
                  4.49398153e-06 * tc[2] + 5.20976130e-10 * tc[3] -
                  2.41078588e-14 * tc[4] - 2.65709061e+04 * invT;
    // species 30: C10H20
    species[30] = +3.08753903e+01 + 2.19985763e-02 * tc[1] -
                  4.98085100e-06 * tc[2] + 5.77294195e-10 * tc[3] -
                  2.67102954e-14 * tc[4] - 3.06937307e+04 * invT;
  }

  // species with midpoint at T=1390 kelvin
  if (T < 1390) {
    // species 29: PXC9H19
    species[29] = -1.04387292e+00 + 5.28086415e-02 * tc[1] -
                  2.22733324e-05 * tc[2] + 5.36215415e-09 * tc[3] -
                  5.54808550e-13 * tc[4] - 6.80818512e+03 * invT;
  } else {
    // species 29: PXC9H19
    species[29] = +2.83097514e+01 + 2.06328672e-02 * tc[1] -
                  4.67944297e-06 * tc[2] + 5.42937177e-10 * tc[3] -
                  2.51384614e-14 * tc[4] - 1.74516030e+04 * invT;
  }
  return;
}

// compute the h/(RT) at the given temperature (Eq 20)
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEnthalpy_qss(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: CH2
    species[0] = +3.76267867e+00 + 4.84436072e-04 * tc[1] +
                 9.31632803e-07 * tc[2] - 9.62727883e-10 * tc[3] +
                 3.37483438e-13 * tc[4] + 4.60040401e+04 * invT;
    // species 1: CH2*
    species[1] = +4.19860411e+00 - 1.18330710e-03 * tc[1] +
                 2.74432073e-06 * tc[2] - 1.67203995e-09 * tc[3] +
                 3.88629474e-13 * tc[4] + 5.04968163e+04 * invT;
    // species 2: HCO
    species[2] = +4.22118584e+00 - 1.62196266e-03 * tc[1] +
                 4.59331487e-06 * tc[2] - 3.32860233e-09 * tc[3] +
                 8.67537730e-13 * tc[4] + 3.83956496e+03 * invT;
    // species 3: CH3O
    species[3] = +3.71180502e+00 - 1.40231653e-03 * tc[1] +
                 1.25516990e-05 * tc[2] - 1.18268022e-08 * tc[3] +
                 3.73176840e-12 * tc[4] + 1.29569760e+03 * invT;
    // species 4: C2H3
    species[4] = +3.21246645e+00 + 7.57395810e-04 * tc[1] +
                 8.64031373e-06 * tc[2] - 8.94144617e-09 * tc[3] +
                 2.94301746e-12 * tc[4] + 3.48598468e+04 * invT;
    // species 5: C2H5
    species[5] = +4.30646568e+00 - 2.09329446e-03 * tc[1] +
                 1.65714269e-05 * tc[2] - 1.49781651e-08 * tc[3] +
                 4.61018008e-12 * tc[4] + 1.28416265e+04 * invT;
    // species 6: nC3H7
    species[6] = +1.04911730e+00 + 1.30044865e-02 * tc[1] +
                 7.84750533e-07 * tc[2] - 4.89878300e-09 * tc[3] +
                 1.87440414e-12 * tc[4] + 1.03123460e+04 * invT;
    // species 7: pC4H9
    species[7] = +1.20870420e+00 + 1.91487485e-02 * tc[1] -
                 2.42201697e-06 * tc[2] - 3.85713675e-09 * tc[3] +
                 1.73718870e-12 * tc[4] + 7.32210400e+03 * invT;
    // species 16: C12OOH
    species[16] = +5.15231000e+00 + 4.98956500e-02 * tc[1] -
                  6.02116667e-06 * tc[2] - 1.04608750e-08 * tc[3] +
                  4.45572000e-12 * tc[4] - 2.38380000e+04 * invT;
    // species 17: O2C12H24OOH
    species[17] = +4.81972000e-01 + 7.25100000e-02 * tc[1] -
                  3.33102667e-05 * tc[2] + 6.51055000e-09 * tc[3] +
                  2.38716000e-13 * tc[4] - 4.16875000e+04 * invT;
  } else {
    // species 0: CH2
    species[0] = +2.87410113e+00 + 1.82819646e-03 * tc[1] -
                 4.69648657e-07 * tc[2] + 6.50448872e-11 * tc[3] -
                 3.75455134e-15 * tc[4] + 4.62636040e+04 * invT;
    // species 1: CH2*
    species[1] = +2.29203842e+00 + 2.32794318e-03 * tc[1] -
                 6.70639823e-07 * tc[2] + 1.04476500e-10 * tc[3] -
                 6.79432730e-15 * tc[4] + 5.09259997e+04 * invT;
    // species 2: HCO
    species[2] = +2.77217438e+00 + 2.47847763e-03 * tc[1] -
                 8.28152043e-07 * tc[2] + 1.47290445e-10 * tc[3] -
                 1.06701742e-14 * tc[4] + 4.01191815e+03 * invT;
    // species 3: CH3O
    species[3] = +4.75779238e+00 + 3.72071237e-03 * tc[1] -
                 8.99017253e-07 * tc[2] + 1.09522626e-10 * tc[3] -
                 5.27074196e-15 * tc[4] + 3.78111940e+02 * invT;
    // species 4: C2H3
    species[4] = +3.01672400e+00 + 5.16511460e-03 * tc[1] -
                 1.56027450e-06 * tc[2] + 2.54408220e-10 * tc[3] -
                 1.72521408e-14 * tc[4] + 3.46128739e+04 * invT;
    // species 5: C2H5
    species[5] = +1.95465642e+00 + 8.69863610e-03 * tc[1] -
                 2.66068889e-06 * tc[2] + 4.38044223e-10 * tc[3] -
                 2.99283152e-14 * tc[4] + 1.28575200e+04 * invT;
    // species 6: nC3H7
    species[6] = +7.70974790e+00 + 8.01574250e-03 * tc[1] -
                 1.75734127e-06 * tc[2] + 1.89720880e-10 * tc[3] -
                 7.77254380e-15 * tc[4] + 7.97622360e+03 * invT;
    // species 7: pC4H9
    species[7] = +8.68223950e+00 + 1.18455355e-02 * tc[1] -
                 2.53162883e-06 * tc[2] + 1.66067840e-10 * tc[3] +
                 1.09690272e-14 * tc[4] + 4.96440580e+03 * invT;
    // species 16: C12OOH
    species[16] = +2.92019000e+01 + 2.57958500e-02 * tc[1] -
                  5.24423333e-06 * tc[2] + 5.75765000e-10 * tc[3] -
                  2.65280000e-14 * tc[4] - 3.11192000e+04 * invT;
    // species 17: O2C12H24OOH
    species[17] = +3.50907000e+01 + 2.55295000e-02 * tc[1] -
                  5.14483333e-06 * tc[2] + 5.61567500e-10 * tc[3] -
                  2.57802000e-14 * tc[4] - 5.12675000e+04 * invT;
  }

  // species with midpoint at T=1390 kelvin
  if (T < 1390) {
    // species 8: PXC5H11
    species[8] = +5.24384081e-02 + 2.80398479e-02 * tc[1] -
                 1.10515268e-05 * tc[2] + 2.44383445e-09 * tc[3] -
                 2.28019320e-13 * tc[4] + 4.71611460e+03 * invT;
    // species 9: PXC6H13
    species[9] = -2.04871465e-01 + 3.41900636e-02 * tc[1] -
                 1.38149304e-05 * tc[2] + 3.15389505e-09 * tc[3] -
                 3.06240116e-13 * tc[4] + 1.83280393e+03 * invT;
    // species 10: PXC7H15
    species[10] = -4.99570406e-01 + 4.04413234e-02 * tc[1] -
                  1.66844251e-05 * tc[2] + 3.91373270e-09 * tc[3] -
                  3.93232454e-13 * tc[4] - 1.04590223e+03 * invT;
    // species 11: PXC8H17
    species[11] = -7.72759438e-01 + 4.66274853e-02 * tc[1] -
                  1.94815748e-05 * tc[2] + 4.63925535e-09 * tc[3] -
                  4.74254966e-13 * tc[4] - 3.92689511e+03 * invT;
    // species 12: PXC10H21
    species[12] = -1.31358348e+00 + 5.89864065e-02 * tc[1] -
                  2.50614360e-05 * tc[2] + 6.08327765e-09 * tc[3] -
                  6.35045704e-13 * tc[4] - 9.68967550e+03 * invT;
    // species 13: PXC12H25
    species[13] = -1.85028741e+00 + 7.13353540e-02 * tc[1] -
                  3.06305518e-05 * tc[2] + 7.52208480e-09 * tc[3] -
                  7.94908600e-13 * tc[4] - 1.54530435e+04 * invT;
  } else {
    // species 8: PXC5H11
    species[8] = +1.52977446e+01 + 1.19867655e-02 * tc[1] -
                 2.72797649e-06 * tc[2] + 3.17207690e-10 * tc[3] -
                 1.47081811e-14 * tc[4] - 9.80712307e+02 * invT;
    // species 9: PXC6H13
    species[9] = +1.85385470e+01 + 1.41553981e-02 * tc[1] -
                 3.21769082e-06 * tc[2] + 3.73868963e-10 * tc[3] -
                 1.73267213e-14 * tc[4] - 5.09299041e+03 * invT;
    // species 10: PXC7H15
    species[10] = +2.17940709e+01 + 1.63140122e-02 * tc[1] -
                  3.70460813e-06 * tc[2] + 4.30167870e-10 * tc[3] -
                  1.99273400e-14 * tc[4] - 9.20938221e+03 * invT;
    // species 11: PXC8H17
    species[11] = +2.50510356e+01 + 1.84740081e-02 * tc[1] -
                  4.19217547e-06 * tc[2] + 4.86571022e-10 * tc[3] -
                  2.25337796e-14 * tc[4] - 1.33300535e+04 * invT;
    // species 12: PXC10H21
    species[12] = +3.15697160e+01 + 2.27909202e-02 * tc[1] -
                  5.16649883e-06 * tc[2] + 5.99277332e-10 * tc[3] -
                  2.77419118e-14 * tc[4] - 2.15737832e+04 * invT;
    // species 13: PXC12H25
    species[13] = +3.80921885e+01 + 2.71053924e-02 * tc[1] -
                  6.14018390e-06 * tc[2] + 7.11905433e-10 * tc[3] -
                  3.29463496e-14 * tc[4] - 2.98194375e+04 * invT;
  }

  // species with midpoint at T=1385 kelvin
  if (T < 1385) {
    // species 14: SXC12H25
    species[14] = -1.36787089e+00 + 6.86776740e-02 * tc[1] -
                  2.74692053e-05 * tc[2] + 5.91053905e-09 * tc[3] -
                  4.94871864e-13 * tc[4] - 1.67660539e+04 * invT;
    // species 15: S3XC12H25
    species[15] = -1.36787089e+00 + 6.86776740e-02 * tc[1] -
                  2.74692053e-05 * tc[2] + 5.91053905e-09 * tc[3] -
                  4.94871864e-13 * tc[4] - 1.67660539e+04 * invT;
  } else {
    // species 14: SXC12H25
    species[14] = +3.79688268e+01 + 2.69359732e-02 * tc[1] -
                  6.07237543e-06 * tc[2] + 7.01936257e-10 * tc[3] -
                  3.24216840e-14 * tc[4] - 3.12144988e+04 * invT;
    // species 15: S3XC12H25
    species[15] = +3.79688268e+01 + 2.69359732e-02 * tc[1] -
                  6.07237543e-06 * tc[2] + 7.01936257e-10 * tc[3] -
                  3.24216840e-14 * tc[4] - 3.12144988e+04 * invT;
  }
  return;
}

// compute the S/R at the given temperature (Eq 21)
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEntropy(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1391 kelvin
  if (T < 1391) {
    // species 0: NC12H26
    species[0] = -2.62181594e+00 * tc[0] + 1.47237711e-01 * tc[1] -
                 4.71985136e-05 * tc[2] + 1.02480423e-08 * tc[3] -
                 1.00900558e-12 * tc[4] + 5.00994626e+01;
    // species 31: C12H24
    species[31] = -2.96342681e+00 * tc[0] + 1.43992360e-01 * tc[1] -
                  4.80692008e-05 * tc[2] + 1.10058158e-08 * tc[3] -
                  1.15599547e-12 * tc[4] + 5.29158870e+01;
  } else {
    // species 0: NC12H26
    species[0] = +3.85095037e+01 * tc[0] + 5.63550048e-02 * tc[1] -
                 9.57466000e-06 * tc[2] + 9.86749540e-10 * tc[3] -
                 4.28110375e-14 * tc[4] - 1.72670922e+02;
    // species 31: C12H24
    species[31] = +3.74002111e+01 * tc[0] + 5.26230753e-02 * tc[1] -
                  8.93121595e-06 * tc[2] + 9.19832877e-10 * tc[3] -
                  3.98906247e-14 * tc[4] - 1.64892663e+02;
  }

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 1: H
    species[1] = +2.50000000e+00 * tc[0] + 7.05332819e-13 * tc[1] -
                 9.97959820e-16 * tc[2] + 7.66938773e-19 * tc[3] -
                 2.31933083e-22 * tc[4] - 4.46682853e-01;
    // species 2: O
    species[2] = +3.16826710e+00 * tc[0] - 3.27931884e-03 * tc[1] +
                 3.32153198e-06 * tc[2] - 2.04268875e-09 * tc[3] +
                 5.28164927e-13 * tc[4] + 2.05193346e+00;
    // species 3: OH
    species[3] = +4.12530561e+00 * tc[0] - 3.22544939e-03 * tc[1] +
                 3.26382346e-06 * tc[2] - 1.93284548e-09 * tc[3] +
                 5.15593447e-13 * tc[4] - 6.90432960e-01;
    // species 4: HO2
    species[4] = +4.30179801e+00 * tc[0] - 4.74912051e-03 * tc[1] +
                 1.05791445e-05 * tc[2] - 8.09212980e-09 * tc[3] +
                 2.32306281e-12 * tc[4] + 3.71666245e+00;
    // species 5: H2
    species[5] = +2.34433112e+00 * tc[0] + 7.98052075e-03 * tc[1] -
                 9.73907550e-06 * tc[2] + 6.71906980e-09 * tc[3] -
                 1.84402940e-12 * tc[4] + 6.83010238e-01;
    // species 6: H2O
    species[6] = +4.19864056e+00 * tc[0] - 2.03643410e-03 * tc[1] +
                 3.26020105e-06 * tc[2] - 1.82932354e-09 * tc[3] +
                 4.42994543e-13 * tc[4] - 8.49032208e-01;
    // species 7: H2O2
    species[7] = +4.27611269e+00 * tc[0] - 5.42822417e-04 * tc[1] +
                 8.36678505e-06 * tc[2] - 7.19236043e-09 * tc[3] +
                 2.15613591e-12 * tc[4] + 3.43505074e+00;
    // species 8: O2
    species[8] = +3.78245636e+00 * tc[0] - 2.99673416e-03 * tc[1] +
                 4.92365101e-06 * tc[2] - 3.22709836e-09 * tc[3] +
                 8.10932092e-13 * tc[4] + 3.65767573e+00;
    // species 9: CH3
    species[9] = +3.67359040e+00 * tc[0] + 2.01095175e-03 * tc[1] +
                 2.86510928e-06 * tc[2] - 2.29039142e-09 * tc[3] +
                 6.35964335e-13 * tc[4] + 1.60456433e+00;
    // species 10: CH4
    species[10] = +5.14987613e+00 * tc[0] - 1.36709788e-02 * tc[1] +
                  2.45900299e-05 * tc[2] - 1.61581009e-08 * tc[3] +
                  4.16734890e-12 * tc[4] - 4.64130376e+00;
    // species 11: CH2O
    species[11] = +4.79372315e+00 * tc[0] - 9.90833369e-03 * tc[1] +
                  1.86610004e-05 * tc[2] - 1.26428420e-08 * tc[3] +
                  3.29431630e-12 * tc[4] + 6.02812900e-01;
    // species 12: CO
    species[12] = +3.57953347e+00 * tc[0] - 6.10353680e-04 * tc[1] +
                  5.08407165e-07 * tc[2] + 3.02335295e-10 * tc[3] -
                  2.26106125e-13 * tc[4] + 3.50840928e+00;
    // species 13: CO2
    species[13] = +2.35677352e+00 * tc[0] + 8.98459677e-03 * tc[1] -
                  3.56178134e-06 * tc[2] + 8.19730073e-10 * tc[3] -
                  3.59248870e-14 * tc[4] + 9.90105222e+00;
    // species 14: C2H2
    species[14] = +8.08681094e-01 * tc[0] + 2.33615629e-02 * tc[1] -
                  1.77585907e-05 * tc[2] + 9.33841457e-09 * tc[3] -
                  2.12518243e-12 * tc[4] + 1.39397051e+01;
    // species 15: C2H4
    species[15] = +3.95920148e+00 * tc[0] - 7.57052247e-03 * tc[1] +
                  2.85495146e-05 * tc[2] - 2.30529584e-08 * tc[3] +
                  6.74710933e-12 * tc[4] + 4.09733096e+00;
    // species 16: C2H6
    species[16] = +4.29142492e+00 * tc[0] - 5.50154270e-03 * tc[1] +
                  2.99719144e-05 * tc[2] - 2.36155428e-08 * tc[3] +
                  6.71714427e-12 * tc[4] + 2.66682316e+00;
    // species 17: CH2CHO
    species[17] = +3.40906240e+00 * tc[0] + 1.07385740e-02 * tc[1] +
                  9.45746250e-07 * tc[2] - 2.38619437e-09 * tc[3] +
                  7.16846275e-13 * tc[4] + 9.57145350e+00;
    // species 18: aC3H5
    species[18] = +1.36318350e+00 * tc[0] + 1.98138210e-02 * tc[1] +
                  6.24853000e-06 * tc[2] - 1.11185183e-08 * tc[3] +
                  3.96164275e-12 * tc[4] + 1.71732140e+01;
    // species 19: C3H6
    species[19] = +1.49330700e+00 * tc[0] + 2.09251800e-02 * tc[1] +
                  2.24339700e-06 * tc[2] - 5.56304000e-09 * tc[3] +
                  1.78953650e-12 * tc[4] + 1.61453400e+01;
    // species 20: C2H3CHO
    species[20] = +1.27134980e+00 * tc[0] + 2.62310540e-02 * tc[1] -
                  4.64561525e-06 * tc[2] - 1.59457573e-09 * tc[3] +
                  8.37013575e-13 * tc[4] + 1.94980770e+01;
    // species 21: C4H7
    species[21] = +7.44494320e-01 * tc[0] + 3.96788570e-02 * tc[1] -
                  1.14490430e-05 * tc[2] + 7.11765767e-10 * tc[3] +
                  5.77409375e-13 * tc[4] + 2.34378780e+01;
    // species 22: C4H81
    species[22] = +1.18113800e+00 * tc[0] + 3.08533800e-02 * tc[1] +
                  2.54326235e-06 * tc[2] - 8.21829600e-09 * tc[3] +
                  2.77754825e-12 * tc[4] + 2.10624690e+01;
    // species 23: C5H9
    species[23] = -2.41901110e+00 * tc[0] + 4.04303890e-02 * tc[1] +
                  3.39011695e-06 * tc[2] - 1.12415807e-08 * tc[3] +
                  3.77917825e-12 * tc[4] + 3.64592440e+01;
    // species 32: C12H25O2
    species[32] = +5.31404000e+00 * tc[0] + 8.93873000e-02 * tc[1] +
                  7.26755000e-06 * tc[2] - 2.49750000e-08 * tc[3] +
                  8.38312500e-12 * tc[4] + 1.69741000e+01;
    // species 33: OC12H23OOH
    species[33] = +8.80733000e+00 * tc[0] + 6.50623000e-02 * tc[1] +
                  3.47529000e-05 * tc[2] - 4.23016667e-08 * tc[3] +
                  1.27747750e-11 * tc[4] + 6.84155000e+00;
    // species 34: N2
    species[34] = +3.29867700e+00 * tc[0] + 1.40824040e-03 * tc[1] -
                  1.98161100e-06 * tc[2] + 1.88050500e-09 * tc[3] -
                  6.11213500e-13 * tc[4] + 3.95037200e+00;
  } else {
    // species 1: H
    species[1] = +2.50000001e+00 * tc[0] - 2.30842973e-11 * tc[1] +
                 8.07809740e-15 * tc[2] - 1.57838412e-18 * tc[3] +
                 1.24549339e-22 * tc[4] - 4.46682914e-01;
    // species 2: O
    species[2] = +2.56942078e+00 * tc[0] - 8.59741137e-05 * tc[1] +
                 2.09742295e-08 * tc[2] - 3.33925997e-12 * tc[3] +
                 3.07084227e-16 * tc[4] + 4.78433864e+00;
    // species 3: OH
    species[3] = +2.86472886e+00 * tc[0] + 1.05650448e-03 * tc[1] -
                 1.29541379e-07 * tc[2] + 1.01739558e-11 * tc[3] -
                 3.32989690e-16 * tc[4] + 5.70164073e+00;
    // species 4: HO2
    species[4] = +4.01721090e+00 * tc[0] + 2.23982013e-03 * tc[1] -
                 3.16829075e-07 * tc[2] + 3.80821233e-11 * tc[3] -
                 2.69771337e-15 * tc[4] + 3.78510215e+00;
    // species 5: H2
    species[5] = +3.33727920e+00 * tc[0] - 4.94024731e-05 * tc[1] +
                 2.49728389e-07 * tc[2] - 5.98554647e-11 * tc[3] +
                 5.00638440e-15 * tc[4] - 3.20502331e+00;
    // species 6: H2O
    species[6] = +3.03399249e+00 * tc[0] + 2.17691804e-03 * tc[1] -
                 8.20362590e-08 * tc[2] - 3.23473290e-11 * tc[3] +
                 4.20502480e-15 * tc[4] + 4.96677010e+00;
    // species 7: H2O2
    species[7] = +4.16500285e+00 * tc[0] + 4.90831694e-03 * tc[1] -
                 9.50696125e-07 * tc[2] + 1.23728662e-10 * tc[3] -
                 7.19770763e-15 * tc[4] + 2.91615662e+00;
    // species 8: O2
    species[8] = +3.28253784e+00 * tc[0] + 1.48308754e-03 * tc[1] -
                 3.78983334e-07 * tc[2] + 6.98235183e-11 * tc[3] -
                 5.41794485e-15 * tc[4] + 5.45323129e+00;
    // species 9: CH3
    species[9] = +2.28571772e+00 * tc[0] + 7.23990037e-03 * tc[1] -
                 1.49357174e-06 * tc[2] + 1.98561548e-10 * tc[3] -
                 1.16788599e-14 * tc[4] + 8.48007179e+00;
    // species 10: CH4
    species[10] = +7.48514950e-02 * tc[0] + 1.33909467e-02 * tc[1] -
                  2.86642905e-06 * tc[2] + 4.07641783e-10 * tc[3] -
                  2.54538075e-14 * tc[4] + 1.84373180e+01;
    // species 11: CH2O
    species[11] = +1.76069008e+00 * tc[0] + 9.20000082e-03 * tc[1] -
                  2.21129406e-06 * tc[2] + 3.35470707e-10 * tc[3] -
                  2.20963910e-14 * tc[4] + 1.36563230e+01;
    // species 12: CO
    species[12] = +2.71518561e+00 * tc[0] + 2.06252743e-03 * tc[1] -
                  4.99412886e-07 * tc[2] + 7.66843360e-11 * tc[3] -
                  5.09119290e-15 * tc[4] + 7.81868772e+00;
    // species 13: CO2
    species[13] = +3.85746029e+00 * tc[0] + 4.41437026e-03 * tc[1] -
                  1.10740702e-06 * tc[2] + 1.74496729e-10 * tc[3] -
                  1.18021041e-14 * tc[4] + 2.27163806e+00;
    // species 14: C2H2
    species[14] = +4.14756964e+00 * tc[0] + 5.96166664e-03 * tc[1] -
                  1.18647426e-06 * tc[2] + 1.55804057e-10 * tc[3] -
                  9.03088033e-15 * tc[4] - 1.23028121e+00;
    // species 15: C2H4
    species[15] = +2.03611116e+00 * tc[0] + 1.46454151e-02 * tc[1] -
                  3.35538958e-06 * tc[2] + 4.90743077e-10 * tc[3] -
                  3.14265152e-14 * tc[4] + 1.03053693e+01;
    // species 16: C2H6
    species[16] = +1.07188150e+00 * tc[0] + 2.16852677e-02 * tc[1] -
                  5.01280335e-06 * tc[2] + 7.38040003e-10 * tc[3] -
                  4.75007225e-14 * tc[4] + 1.51156107e+01;
    // species 17: CH2CHO
    species[17] = +5.97566990e+00 * tc[0] + 8.13059140e-03 * tc[1] -
                  1.37181225e-06 * tc[2] + 1.35676803e-10 * tc[3] -
                  5.44004275e-15 * tc[4] - 5.03208790e+00;
    // species 18: aC3H5
    species[18] = +6.50078770e+00 * tc[0] + 1.43247310e-02 * tc[1] -
                  2.83908160e-06 * tc[2] + 3.69360033e-10 * tc[3] -
                  2.25909717e-14 * tc[4] - 1.12430500e+01;
    // species 19: C3H6
    species[19] = +6.73225700e+00 * tc[0] + 1.49083400e-02 * tc[1] -
                  2.47494950e-06 * tc[2] + 2.40400733e-10 * tc[3] -
                  9.41551000e-15 * tc[4] - 1.33133500e+01;
    // species 20: C2H3CHO
    species[20] = +5.81118680e+00 * tc[0] + 1.71142560e-02 * tc[1] -
                  3.74170805e-06 * tc[2] + 4.75074967e-10 * tc[3] -
                  2.29367102e-14 * tc[4] - 4.85880040e+00;
    // species 21: C4H7
    species[21] = +7.01348350e+00 * tc[0] + 2.26345580e-02 * tc[1] -
                  4.62727350e-06 * tc[2] + 5.60264233e-10 * tc[3] -
                  2.60215425e-14 * tc[4] - 8.88930800e+00;
    // species 22: C4H81
    species[22] = +2.05358410e+00 * tc[0] + 3.43505070e-02 * tc[1] -
                  7.94159850e-06 * tc[2] + 1.10298873e-09 * tc[3] -
                  6.34026125e-14 * tc[4] + 1.55432010e+01;
    // species 23: C5H9
    species[23] = +1.01386400e+01 * tc[0] + 2.27141380e-02 * tc[1] -
                  3.89552315e-06 * tc[2] + 3.95884067e-10 * tc[3] -
                  1.64831120e-14 * tc[4] - 3.31258850e+01;
    // species 32: C12H25O2
    species[32] = +2.84782000e+01 * tc[0] + 5.37539000e-02 * tc[1] -
                  8.40930000e-06 * tc[2] + 8.37890000e-10 * tc[3] -
                  3.68020000e-14 * tc[4] - 1.09121000e+02;
    // species 33: OC12H23OOH
    species[33] = +2.36731000e+01 * tc[0] + 6.16392000e-02 * tc[1] -
                  1.04918000e-05 * tc[2] + 1.11055333e-09 * tc[3] -
                  5.08975000e-14 * tc[4] - 7.77662000e+01;
    // species 34: N2
    species[34] = +2.92664000e+00 * tc[0] + 1.48797680e-03 * tc[1] -
                  2.84238000e-07 * tc[2] + 3.36567933e-11 * tc[3] -
                  1.68833775e-15 * tc[4] + 5.98052800e+00;
  }

  // species with midpoint at T=1392 kelvin
  if (T < 1392) {
    // species 24: C5H10
    species[24] = -1.06223481e+00 * tc[0] + 5.74218294e-02 * tc[1] -
                  1.87243445e-05 * tc[2] + 4.24549963e-09 * tc[3] -
                  4.49024472e-13 * tc[4] + 3.22739790e+01;
    // species 25: C6H12
    species[25] = -1.35275205e+00 * tc[0] + 6.98655426e-02 * tc[1] -
                  2.29704011e-05 * tc[2] + 5.23224477e-09 * tc[3] -
                  5.53240438e-13 * tc[4] + 3.53120691e+01;
    // species 26: C7H14
    species[26] = -1.67720549e+00 * tc[0] + 8.24611601e-02 * tc[1] -
                  2.73252054e-05 * tc[2] + 6.26207677e-09 * tc[3] -
                  6.64344957e-13 * tc[4] + 3.85068032e+01;
    // species 27: C8H16
    species[27] = -1.89226915e+00 * tc[0] + 9.46066357e-02 * tc[1] -
                  3.13692761e-05 * tc[2] + 7.17194363e-09 * tc[3] -
                  7.56796708e-13 * tc[4] + 4.11878981e+01;
    // species 28: C9H18
    species[28] = -2.16108263e+00 * tc[0] + 1.06958297e-01 * tc[1] -
                  3.55486622e-05 * tc[2] + 8.13236923e-09 * tc[3] -
                  8.56928867e-13 * tc[4] + 4.41245128e+01;
    // species 30: C10H20
    species[30] = -2.42901688e+00 * tc[0] + 1.19305598e-01 * tc[1] -
                  3.97244513e-05 * tc[2] + 9.09121987e-09 * tc[3] -
                  9.56795932e-13 * tc[4] + 4.70571383e+01;
  } else {
    // species 24: C5H10
    species[24] = +1.45851539e+01 * tc[0] + 2.24072471e-02 * tc[1] -
                  3.81674012e-06 * tc[2] + 3.93963220e-10 * tc[3] -
                  1.71096285e-14 * tc[4] - 5.23683936e+01;
    // species 25: C6H12
    species[25] = +1.78337529e+01 * tc[0] + 2.67377658e-02 * tc[1] -
                  4.55018387e-06 * tc[2] + 4.69399227e-10 * tc[3] -
                  2.03781061e-14 * tc[4] - 6.83818851e+01;
    // species 26: C7H14
    species[26] = +2.10898039e+01 * tc[0] + 3.10607878e-02 * tc[1] -
                  5.28223965e-06 * tc[2] + 5.44685933e-10 * tc[3] -
                  2.36399555e-14 * tc[4] - 8.44391108e+01;
    // species 27: C8H16
    species[27] = +2.43540125e+01 * tc[0] + 3.53666462e-02 * tc[1] -
                  6.01041940e-06 * tc[2] + 6.19516843e-10 * tc[3] -
                  2.68805655e-14 * tc[4] - 1.00537716e+02;
    // species 28: C9H18
    species[28] = +2.76142176e+01 * tc[0] + 3.96825287e-02 * tc[1] -
                  6.74097230e-06 * tc[2] + 6.94634840e-10 * tc[3] -
                  3.01348235e-14 * tc[4] - 1.16618623e+02;
    // species 30: C10H20
    species[30] = +3.08753903e+01 * tc[0] + 4.39971526e-02 * tc[1] -
                  7.47127650e-06 * tc[2] + 7.69725593e-10 * tc[3] -
                  3.33878693e-14 * tc[4] - 1.32705172e+02;
  }

  // species with midpoint at T=1390 kelvin
  if (T < 1390) {
    // species 29: PXC9H19
    species[29] = -1.04387292e+00 * tc[0] + 1.05617283e-01 * tc[1] -
                  3.34099986e-05 * tc[2] + 7.14953887e-09 * tc[3] -
                  6.93510688e-13 * tc[4] + 4.23518992e+01;
  } else {
    // species 29: PXC9H19
    species[29] = +2.83097514e+01 * tc[0] + 4.12657344e-02 * tc[1] -
                  7.01916445e-06 * tc[2] + 7.23916237e-10 * tc[3] -
                  3.14230767e-14 * tc[4] - 1.16837897e+02;
  }
  return;
}

// Returns the mean specific heat at CP (Eq. 33)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBL(amrex::Real* T, amrex::Real* x, amrex::Real* cpbl)
{
  int id; // loop counter
  amrex::Real result = 0;
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real cpor[35];                               //  temporary storage
  cp_R(cpor, tc);

  // perform dot product
  for (id = 0; id < 35; ++id) {
    result += x[id] * cpor[id];
  }

  *cpbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CP (Eq. 34)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBS(amrex::Real* T, amrex::Real* y, amrex::Real* cpbs)
{
  amrex::Real result = 0;
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real cpor[35], tresult[35];                  //  temporary storage
  amrex::Real imw[35];

  get_imw(imw);

  cp_R(cpor, tc);

  for (int i = 0; i < 35; i++) {
    tresult[i] = cpor[i] * y[i] * imw[i];
  }
  for (int i = 0; i < 35; i++) {
    result += tresult[i];
  }

  *cpbs = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 35)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBL(amrex::Real* T, amrex::Real* x, amrex::Real* cvbl)
{
  int id; // loop counter
  amrex::Real result = 0;
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real cvor[35];                               //  temporary storage
  cv_R(cvor, tc);

  // perform dot product
  for (id = 0; id < 35; ++id) {
    result += x[id] * cvor[id];
  }

  *cvbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 36)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBS(amrex::Real* T, amrex::Real* y, amrex::Real* cvbs)
{
  amrex::Real result = 0;
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real cvor[35];                               //  temporary storage
  amrex::Real imw[35];

  get_imw(imw);

  cv_R(cvor, tc);

  // multiply by y/molecularweight
  result += cvor[0] * y[0] * imw[0];    // NC12H26
  result += cvor[1] * y[1] * imw[1];    // H
  result += cvor[2] * y[2] * imw[2];    // O
  result += cvor[3] * y[3] * imw[3];    // OH
  result += cvor[4] * y[4] * imw[4];    // HO2
  result += cvor[5] * y[5] * imw[5];    // H2
  result += cvor[6] * y[6] * imw[6];    // H2O
  result += cvor[7] * y[7] * imw[7];    // H2O2
  result += cvor[8] * y[8] * imw[8];    // O2
  result += cvor[9] * y[9] * imw[9];    // CH3
  result += cvor[10] * y[10] * imw[10]; // CH4
  result += cvor[11] * y[11] * imw[11]; // CH2O
  result += cvor[12] * y[12] * imw[12]; // CO
  result += cvor[13] * y[13] * imw[13]; // CO2
  result += cvor[14] * y[14] * imw[14]; // C2H2
  result += cvor[15] * y[15] * imw[15]; // C2H4
  result += cvor[16] * y[16] * imw[16]; // C2H6
  result += cvor[17] * y[17] * imw[17]; // CH2CHO
  result += cvor[18] * y[18] * imw[18]; // aC3H5
  result += cvor[19] * y[19] * imw[19]; // C3H6
  result += cvor[20] * y[20] * imw[20]; // C2H3CHO
  result += cvor[21] * y[21] * imw[21]; // C4H7
  result += cvor[22] * y[22] * imw[22]; // C4H81
  result += cvor[23] * y[23] * imw[23]; // C5H9
  result += cvor[24] * y[24] * imw[24]; // C5H10
  result += cvor[25] * y[25] * imw[25]; // C6H12
  result += cvor[26] * y[26] * imw[26]; // C7H14
  result += cvor[27] * y[27] * imw[27]; // C8H16
  result += cvor[28] * y[28] * imw[28]; // C9H18
  result += cvor[29] * y[29] * imw[29]; // PXC9H19
  result += cvor[30] * y[30] * imw[30]; // C10H20
  result += cvor[31] * y[31] * imw[31]; // C12H24
  result += cvor[32] * y[32] * imw[32]; // C12H25O2
  result += cvor[33] * y[33] * imw[33]; // OC12H23OOH
  result += cvor[34] * y[34] * imw[34]; // N2

  *cvbs = result * 8.31446261815324e+07;
}

// Returns the mean enthalpy of the mixture in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBML(amrex::Real* T, amrex::Real* x, amrex::Real* hbml)
{
  int id; // loop counter
  amrex::Real result = 0;
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real hml[35];                                //  temporary storage
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesEnthalpy(hml, tc);

  // perform dot product
  for (id = 0; id < 35; ++id) {
    result += x[id] * hml[id];
  }

  *hbml = result * RT;
}

// Returns mean enthalpy of mixture in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBMS(amrex::Real* T, amrex::Real* y, amrex::Real* hbms)
{
  amrex::Real result = 0;
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real hml[35], tmp[35];                       //  temporary storage
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  amrex::Real imw[35];

  get_imw(imw);

  speciesEnthalpy(hml, tc);

  int id;
  for (id = 0; id < 35; ++id) {
    tmp[id] = y[id] * hml[id] * imw[id];
  }
  for (id = 0; id < 35; ++id) {
    result += tmp[id];
  }

  *hbms = result * RT;
}

// get mean internal energy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBML(amrex::Real* T, amrex::Real* x, amrex::Real* ubml)
{
  int id; // loop counter
  amrex::Real result = 0;
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real uml[35];                                //  temporary energy array
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesInternalEnergy(uml, tc);

  // perform dot product
  for (id = 0; id < 35; ++id) {
    result += x[id] * uml[id];
  }

  *ubml = result * RT;
}

// get mean internal energy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBMS(amrex::Real* T, amrex::Real* y, amrex::Real* ubms)
{
  amrex::Real result = 0;
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real ums[35];                                //  temporary energy array
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  amrex::Real imw[35];

  get_imw(imw);

  speciesInternalEnergy(ums, tc);

  // perform dot product + scaling by wt
  result += y[0] * ums[0] * imw[0];    // NC12H26
  result += y[1] * ums[1] * imw[1];    // H
  result += y[2] * ums[2] * imw[2];    // O
  result += y[3] * ums[3] * imw[3];    // OH
  result += y[4] * ums[4] * imw[4];    // HO2
  result += y[5] * ums[5] * imw[5];    // H2
  result += y[6] * ums[6] * imw[6];    // H2O
  result += y[7] * ums[7] * imw[7];    // H2O2
  result += y[8] * ums[8] * imw[8];    // O2
  result += y[9] * ums[9] * imw[9];    // CH3
  result += y[10] * ums[10] * imw[10]; // CH4
  result += y[11] * ums[11] * imw[11]; // CH2O
  result += y[12] * ums[12] * imw[12]; // CO
  result += y[13] * ums[13] * imw[13]; // CO2
  result += y[14] * ums[14] * imw[14]; // C2H2
  result += y[15] * ums[15] * imw[15]; // C2H4
  result += y[16] * ums[16] * imw[16]; // C2H6
  result += y[17] * ums[17] * imw[17]; // CH2CHO
  result += y[18] * ums[18] * imw[18]; // aC3H5
  result += y[19] * ums[19] * imw[19]; // C3H6
  result += y[20] * ums[20] * imw[20]; // C2H3CHO
  result += y[21] * ums[21] * imw[21]; // C4H7
  result += y[22] * ums[22] * imw[22]; // C4H81
  result += y[23] * ums[23] * imw[23]; // C5H9
  result += y[24] * ums[24] * imw[24]; // C5H10
  result += y[25] * ums[25] * imw[25]; // C6H12
  result += y[26] * ums[26] * imw[26]; // C7H14
  result += y[27] * ums[27] * imw[27]; // C8H16
  result += y[28] * ums[28] * imw[28]; // C9H18
  result += y[29] * ums[29] * imw[29]; // PXC9H19
  result += y[30] * ums[30] * imw[30]; // C10H20
  result += y[31] * ums[31] * imw[31]; // C12H24
  result += y[32] * ums[32] * imw[32]; // C12H25O2
  result += y[33] * ums[33] * imw[33]; // OC12H23OOH
  result += y[34] * ums[34] * imw[34]; // N2

  *ubms = result * RT;
}

// get mixture entropy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBML(amrex::Real* P, amrex::Real* T, amrex::Real* x, amrex::Real* sbml)
{
  int id; // loop counter
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(*P / 1013250.0);
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real sor[35]; //  temporary storage
  speciesEntropy(sor, tc);

  // Compute Eq 42
  for (id = 0; id < 35; ++id) {
    result += x[id] * (sor[id] - log((x[id] + 1e-100)) - logPratio);
  }

  *sbml = result * 8.31446261815324e+07;
}

// get mixture entropy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBMS(amrex::Real* P, amrex::Real* T, amrex::Real* y, amrex::Real* sbms)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(*P / 1013250.0);
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real sor[35]; //  temporary storage
  amrex::Real x[35];   //  need a ytx conversion
  amrex::Real YOW = 0; // See Eq 4, 6 in CK Manual
  amrex::Real imw[35];

  get_imw(imw);

  // Compute inverse of mean molecular wt first
  YOW += y[0] * imw[0];   // NC12H26
  YOW += y[1] * imw[1];   // H
  YOW += y[2] * imw[2];   // O
  YOW += y[3] * imw[3];   // OH
  YOW += y[4] * imw[4];   // HO2
  YOW += y[5] * imw[5];   // H2
  YOW += y[6] * imw[6];   // H2O
  YOW += y[7] * imw[7];   // H2O2
  YOW += y[8] * imw[8];   // O2
  YOW += y[9] * imw[9];   // CH3
  YOW += y[10] * imw[10]; // CH4
  YOW += y[11] * imw[11]; // CH2O
  YOW += y[12] * imw[12]; // CO
  YOW += y[13] * imw[13]; // CO2
  YOW += y[14] * imw[14]; // C2H2
  YOW += y[15] * imw[15]; // C2H4
  YOW += y[16] * imw[16]; // C2H6
  YOW += y[17] * imw[17]; // CH2CHO
  YOW += y[18] * imw[18]; // aC3H5
  YOW += y[19] * imw[19]; // C3H6
  YOW += y[20] * imw[20]; // C2H3CHO
  YOW += y[21] * imw[21]; // C4H7
  YOW += y[22] * imw[22]; // C4H81
  YOW += y[23] * imw[23]; // C5H9
  YOW += y[24] * imw[24]; // C5H10
  YOW += y[25] * imw[25]; // C6H12
  YOW += y[26] * imw[26]; // C7H14
  YOW += y[27] * imw[27]; // C8H16
  YOW += y[28] * imw[28]; // C9H18
  YOW += y[29] * imw[29]; // PXC9H19
  YOW += y[30] * imw[30]; // C10H20
  YOW += y[31] * imw[31]; // C12H24
  YOW += y[32] * imw[32]; // C12H25O2
  YOW += y[33] * imw[33]; // OC12H23OOH
  YOW += y[34] * imw[34]; // N2
  // Now compute y to x conversion
  x[0] = y[0] / (170.340000 * YOW);
  x[1] = y[1] / (1.008000 * YOW);
  x[2] = y[2] / (15.999000 * YOW);
  x[3] = y[3] / (17.007000 * YOW);
  x[4] = y[4] / (33.006000 * YOW);
  x[5] = y[5] / (2.016000 * YOW);
  x[6] = y[6] / (18.015000 * YOW);
  x[7] = y[7] / (34.014000 * YOW);
  x[8] = y[8] / (31.998000 * YOW);
  x[9] = y[9] / (15.035000 * YOW);
  x[10] = y[10] / (16.043000 * YOW);
  x[11] = y[11] / (30.026000 * YOW);
  x[12] = y[12] / (28.010000 * YOW);
  x[13] = y[13] / (44.009000 * YOW);
  x[14] = y[14] / (26.038000 * YOW);
  x[15] = y[15] / (28.054000 * YOW);
  x[16] = y[16] / (30.070000 * YOW);
  x[17] = y[17] / (43.045000 * YOW);
  x[18] = y[18] / (41.073000 * YOW);
  x[19] = y[19] / (42.081000 * YOW);
  x[20] = y[20] / (56.064000 * YOW);
  x[21] = y[21] / (55.100000 * YOW);
  x[22] = y[22] / (56.108000 * YOW);
  x[23] = y[23] / (69.127000 * YOW);
  x[24] = y[24] / (70.135000 * YOW);
  x[25] = y[25] / (84.162000 * YOW);
  x[26] = y[26] / (98.189000 * YOW);
  x[27] = y[27] / (112.216000 * YOW);
  x[28] = y[28] / (126.243000 * YOW);
  x[29] = y[29] / (127.251000 * YOW);
  x[30] = y[30] / (140.270000 * YOW);
  x[31] = y[31] / (168.324000 * YOW);
  x[32] = y[32] / (201.330000 * YOW);
  x[33] = y[33] / (216.321000 * YOW);
  x[34] = y[34] / (28.014000 * YOW);
  speciesEntropy(sor, tc);
  // Perform computation in Eq 42 and 43
  result += x[0] * (sor[0] - log((x[0] + 1e-100)) - logPratio);
  result += x[1] * (sor[1] - log((x[1] + 1e-100)) - logPratio);
  result += x[2] * (sor[2] - log((x[2] + 1e-100)) - logPratio);
  result += x[3] * (sor[3] - log((x[3] + 1e-100)) - logPratio);
  result += x[4] * (sor[4] - log((x[4] + 1e-100)) - logPratio);
  result += x[5] * (sor[5] - log((x[5] + 1e-100)) - logPratio);
  result += x[6] * (sor[6] - log((x[6] + 1e-100)) - logPratio);
  result += x[7] * (sor[7] - log((x[7] + 1e-100)) - logPratio);
  result += x[8] * (sor[8] - log((x[8] + 1e-100)) - logPratio);
  result += x[9] * (sor[9] - log((x[9] + 1e-100)) - logPratio);
  result += x[10] * (sor[10] - log((x[10] + 1e-100)) - logPratio);
  result += x[11] * (sor[11] - log((x[11] + 1e-100)) - logPratio);
  result += x[12] * (sor[12] - log((x[12] + 1e-100)) - logPratio);
  result += x[13] * (sor[13] - log((x[13] + 1e-100)) - logPratio);
  result += x[14] * (sor[14] - log((x[14] + 1e-100)) - logPratio);
  result += x[15] * (sor[15] - log((x[15] + 1e-100)) - logPratio);
  result += x[16] * (sor[16] - log((x[16] + 1e-100)) - logPratio);
  result += x[17] * (sor[17] - log((x[17] + 1e-100)) - logPratio);
  result += x[18] * (sor[18] - log((x[18] + 1e-100)) - logPratio);
  result += x[19] * (sor[19] - log((x[19] + 1e-100)) - logPratio);
  result += x[20] * (sor[20] - log((x[20] + 1e-100)) - logPratio);
  result += x[21] * (sor[21] - log((x[21] + 1e-100)) - logPratio);
  result += x[22] * (sor[22] - log((x[22] + 1e-100)) - logPratio);
  result += x[23] * (sor[23] - log((x[23] + 1e-100)) - logPratio);
  result += x[24] * (sor[24] - log((x[24] + 1e-100)) - logPratio);
  result += x[25] * (sor[25] - log((x[25] + 1e-100)) - logPratio);
  result += x[26] * (sor[26] - log((x[26] + 1e-100)) - logPratio);
  result += x[27] * (sor[27] - log((x[27] + 1e-100)) - logPratio);
  result += x[28] * (sor[28] - log((x[28] + 1e-100)) - logPratio);
  result += x[29] * (sor[29] - log((x[29] + 1e-100)) - logPratio);
  result += x[30] * (sor[30] - log((x[30] + 1e-100)) - logPratio);
  result += x[31] * (sor[31] - log((x[31] + 1e-100)) - logPratio);
  result += x[32] * (sor[32] - log((x[32] + 1e-100)) - logPratio);
  result += x[33] * (sor[33] - log((x[33] + 1e-100)) - logPratio);
  result += x[34] * (sor[34] - log((x[34] + 1e-100)) - logPratio);
  // Scale by R/W
  *sbms = result * 8.31446261815324e+07 * YOW;
}

//  get temperature given internal energy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_EY(amrex::Real* e, amrex::Real* y, amrex::Real* t, int* ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real ein = *e;
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real e1, emin, emax, cv, t1, dt;
  int i; //  loop counter
  CKUBMS(&tmin, y, &emin);
  CKUBMS(&tmax, y, &emax);
  if (ein < emin) {
    // Linear Extrapolation below tmin
    CKCVBS(&tmin, y, &cv);
    *t = tmin - (emin - ein) / cv;
    *ierr = 1;
    return;
  }
  if (ein > emax) {
    // Linear Extrapolation above tmax
    CKCVBS(&tmax, y, &cv);
    *t = tmax - (emax - ein) / cv;
    *ierr = 1;
    return;
  }
  t1 = *t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (emax - emin) * (ein - emin);
  }
  for (i = 0; i < maxiter; ++i) {
    CKUBMS(&t1, y, &e1);
    CKCVBS(&t1, y, &cv);
    dt = (ein - e1) / cv;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol)
      break;
    else if (t1 + dt == t1)
      break;
    t1 += dt;
  }
  *t = t1;
  *ierr = 0;
  return;
}

//  get temperature given enthalpy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_HY(amrex::Real* h, amrex::Real* y, amrex::Real* t, int* ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real hin = *h;
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real h1, hmin, hmax, cp, t1, dt;
  int i; //  loop counter
  CKHBMS(&tmin, y, &hmin);
  CKHBMS(&tmax, y, &hmax);
  if (hin < hmin) {
    // Linear Extrapolation below tmin
    CKCPBS(&tmin, y, &cp);
    *t = tmin - (hmin - hin) / cp;
    *ierr = 1;
    return;
  }
  if (hin > hmax) {
    // Linear Extrapolation above tmax
    CKCPBS(&tmax, y, &cp);
    *t = tmax - (hmax - hin) / cp;
    *ierr = 1;
    return;
  }
  t1 = *t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (hmax - hmin) * (hin - hmin);
  }
  for (i = 0; i < maxiter; ++i) {
    CKHBMS(&t1, y, &h1);
    CKCPBS(&t1, y, &cp);
    dt = (hin - h1) / cp;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol)
      break;
    else if (t1 + dt == t1)
      break;
    t1 += dt;
  }
  *t = t1;
  *ierr = 0;
  return;
}

// Compute P = rhoRT/W(x)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPX(amrex::Real* rho, amrex::Real* T, amrex::Real* x, amrex::Real* P)
{
  amrex::Real XW = 0;                           //  To hold mean molecular wt
  XW += x[0] * 170.340000;                      // NC12H26
  XW += x[1] * 1.008000;                        // H
  XW += x[2] * 15.999000;                       // O
  XW += x[3] * 17.007000;                       // OH
  XW += x[4] * 33.006000;                       // HO2
  XW += x[5] * 2.016000;                        // H2
  XW += x[6] * 18.015000;                       // H2O
  XW += x[7] * 34.014000;                       // H2O2
  XW += x[8] * 31.998000;                       // O2
  XW += x[9] * 15.035000;                       // CH3
  XW += x[10] * 16.043000;                      // CH4
  XW += x[11] * 30.026000;                      // CH2O
  XW += x[12] * 28.010000;                      // CO
  XW += x[13] * 44.009000;                      // CO2
  XW += x[14] * 26.038000;                      // C2H2
  XW += x[15] * 28.054000;                      // C2H4
  XW += x[16] * 30.070000;                      // C2H6
  XW += x[17] * 43.045000;                      // CH2CHO
  XW += x[18] * 41.073000;                      // aC3H5
  XW += x[19] * 42.081000;                      // C3H6
  XW += x[20] * 56.064000;                      // C2H3CHO
  XW += x[21] * 55.100000;                      // C4H7
  XW += x[22] * 56.108000;                      // C4H81
  XW += x[23] * 69.127000;                      // C5H9
  XW += x[24] * 70.135000;                      // C5H10
  XW += x[25] * 84.162000;                      // C6H12
  XW += x[26] * 98.189000;                      // C7H14
  XW += x[27] * 112.216000;                     // C8H16
  XW += x[28] * 126.243000;                     // C9H18
  XW += x[29] * 127.251000;                     // PXC9H19
  XW += x[30] * 140.270000;                     // C10H20
  XW += x[31] * 168.324000;                     // C12H24
  XW += x[32] * 201.330000;                     // C12H25O2
  XW += x[33] * 216.321000;                     // OC12H23OOH
  XW += x[34] * 28.014000;                      // N2
  *P = *rho * 8.31446261815324e+07 * (*T) / XW; // P = rho*R*T/W

  return;
}

// Compute P = rhoRT/W(y)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPY(amrex::Real* rho, amrex::Real* T, amrex::Real* y, amrex::Real* P)
{
  amrex::Real YOW = 0; //  for computing mean MW
  amrex::Real imw[35];

  get_imw(imw);

  YOW += y[0] * imw[0];                          // NC12H26
  YOW += y[1] * imw[1];                          // H
  YOW += y[2] * imw[2];                          // O
  YOW += y[3] * imw[3];                          // OH
  YOW += y[4] * imw[4];                          // HO2
  YOW += y[5] * imw[5];                          // H2
  YOW += y[6] * imw[6];                          // H2O
  YOW += y[7] * imw[7];                          // H2O2
  YOW += y[8] * imw[8];                          // O2
  YOW += y[9] * imw[9];                          // CH3
  YOW += y[10] * imw[10];                        // CH4
  YOW += y[11] * imw[11];                        // CH2O
  YOW += y[12] * imw[12];                        // CO
  YOW += y[13] * imw[13];                        // CO2
  YOW += y[14] * imw[14];                        // C2H2
  YOW += y[15] * imw[15];                        // C2H4
  YOW += y[16] * imw[16];                        // C2H6
  YOW += y[17] * imw[17];                        // CH2CHO
  YOW += y[18] * imw[18];                        // aC3H5
  YOW += y[19] * imw[19];                        // C3H6
  YOW += y[20] * imw[20];                        // C2H3CHO
  YOW += y[21] * imw[21];                        // C4H7
  YOW += y[22] * imw[22];                        // C4H81
  YOW += y[23] * imw[23];                        // C5H9
  YOW += y[24] * imw[24];                        // C5H10
  YOW += y[25] * imw[25];                        // C6H12
  YOW += y[26] * imw[26];                        // C7H14
  YOW += y[27] * imw[27];                        // C8H16
  YOW += y[28] * imw[28];                        // C9H18
  YOW += y[29] * imw[29];                        // PXC9H19
  YOW += y[30] * imw[30];                        // C10H20
  YOW += y[31] * imw[31];                        // C12H24
  YOW += y[32] * imw[32];                        // C12H25O2
  YOW += y[33] * imw[33];                        // OC12H23OOH
  YOW += y[34] * imw[34];                        // N2
  *P = *rho * 8.31446261815324e+07 * (*T) * YOW; // P = rho*R*T/W

  return;
}

// Compute P = rhoRT/W(c)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPC(amrex::Real* rho, amrex::Real* T, amrex::Real* c, amrex::Real* P)
{
  int id; // loop counter
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 170.340000;  // NC12H26
  W += c[1] * 1.008000;    // H
  W += c[2] * 15.999000;   // O
  W += c[3] * 17.007000;   // OH
  W += c[4] * 33.006000;   // HO2
  W += c[5] * 2.016000;    // H2
  W += c[6] * 18.015000;   // H2O
  W += c[7] * 34.014000;   // H2O2
  W += c[8] * 31.998000;   // O2
  W += c[9] * 15.035000;   // CH3
  W += c[10] * 16.043000;  // CH4
  W += c[11] * 30.026000;  // CH2O
  W += c[12] * 28.010000;  // CO
  W += c[13] * 44.009000;  // CO2
  W += c[14] * 26.038000;  // C2H2
  W += c[15] * 28.054000;  // C2H4
  W += c[16] * 30.070000;  // C2H6
  W += c[17] * 43.045000;  // CH2CHO
  W += c[18] * 41.073000;  // aC3H5
  W += c[19] * 42.081000;  // C3H6
  W += c[20] * 56.064000;  // C2H3CHO
  W += c[21] * 55.100000;  // C4H7
  W += c[22] * 56.108000;  // C4H81
  W += c[23] * 69.127000;  // C5H9
  W += c[24] * 70.135000;  // C5H10
  W += c[25] * 84.162000;  // C6H12
  W += c[26] * 98.189000;  // C7H14
  W += c[27] * 112.216000; // C8H16
  W += c[28] * 126.243000; // C9H18
  W += c[29] * 127.251000; // PXC9H19
  W += c[30] * 140.270000; // C10H20
  W += c[31] * 168.324000; // C12H24
  W += c[32] * 201.330000; // C12H25O2
  W += c[33] * 216.321000; // OC12H23OOH
  W += c[34] * 28.014000;  // N2

  for (id = 0; id < 35; ++id) {
    sumC += c[id];
  }
  *P = *rho * 8.31446261815324e+07 * (*T) * sumC / W; // P = rho*R*T/W

  return;
}

// Compute rho = PW(x)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOX(amrex::Real* P, amrex::Real* T, amrex::Real* x, amrex::Real* rho)
{
  amrex::Real XW = 0;                             //  To hold mean molecular wt
  XW += x[0] * 170.340000;                        // NC12H26
  XW += x[1] * 1.008000;                          // H
  XW += x[2] * 15.999000;                         // O
  XW += x[3] * 17.007000;                         // OH
  XW += x[4] * 33.006000;                         // HO2
  XW += x[5] * 2.016000;                          // H2
  XW += x[6] * 18.015000;                         // H2O
  XW += x[7] * 34.014000;                         // H2O2
  XW += x[8] * 31.998000;                         // O2
  XW += x[9] * 15.035000;                         // CH3
  XW += x[10] * 16.043000;                        // CH4
  XW += x[11] * 30.026000;                        // CH2O
  XW += x[12] * 28.010000;                        // CO
  XW += x[13] * 44.009000;                        // CO2
  XW += x[14] * 26.038000;                        // C2H2
  XW += x[15] * 28.054000;                        // C2H4
  XW += x[16] * 30.070000;                        // C2H6
  XW += x[17] * 43.045000;                        // CH2CHO
  XW += x[18] * 41.073000;                        // aC3H5
  XW += x[19] * 42.081000;                        // C3H6
  XW += x[20] * 56.064000;                        // C2H3CHO
  XW += x[21] * 55.100000;                        // C4H7
  XW += x[22] * 56.108000;                        // C4H81
  XW += x[23] * 69.127000;                        // C5H9
  XW += x[24] * 70.135000;                        // C5H10
  XW += x[25] * 84.162000;                        // C6H12
  XW += x[26] * 98.189000;                        // C7H14
  XW += x[27] * 112.216000;                       // C8H16
  XW += x[28] * 126.243000;                       // C9H18
  XW += x[29] * 127.251000;                       // PXC9H19
  XW += x[30] * 140.270000;                       // C10H20
  XW += x[31] * 168.324000;                       // C12H24
  XW += x[32] * 201.330000;                       // C12H25O2
  XW += x[33] * 216.321000;                       // OC12H23OOH
  XW += x[34] * 28.014000;                        // N2
  *rho = *P * XW / (8.31446261815324e+07 * (*T)); // rho = P*W/(R*T)

  return;
}

// Compute rho = P*W(y)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOY(amrex::Real* P, amrex::Real* T, amrex::Real* y, amrex::Real* rho)
{
  amrex::Real YOW = 0;
  amrex::Real tmp[35];
  amrex::Real imw[35];

  get_imw(imw);

  for (int i = 0; i < 35; i++) {
    tmp[i] = y[i] * imw[i];
  }
  for (int i = 0; i < 35; i++) {
    YOW += tmp[i];
  }

  *rho = *P / (8.31446261815324e+07 * (*T) * YOW); // rho = P*W/(R*T)
  return;
}

// Compute rho = P*W(c)/(R*T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOC(amrex::Real* P, amrex::Real* T, amrex::Real* c, amrex::Real* rho)
{
  int id; // loop counter
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 170.340000;  // NC12H26
  W += c[1] * 1.008000;    // H
  W += c[2] * 15.999000;   // O
  W += c[3] * 17.007000;   // OH
  W += c[4] * 33.006000;   // HO2
  W += c[5] * 2.016000;    // H2
  W += c[6] * 18.015000;   // H2O
  W += c[7] * 34.014000;   // H2O2
  W += c[8] * 31.998000;   // O2
  W += c[9] * 15.035000;   // CH3
  W += c[10] * 16.043000;  // CH4
  W += c[11] * 30.026000;  // CH2O
  W += c[12] * 28.010000;  // CO
  W += c[13] * 44.009000;  // CO2
  W += c[14] * 26.038000;  // C2H2
  W += c[15] * 28.054000;  // C2H4
  W += c[16] * 30.070000;  // C2H6
  W += c[17] * 43.045000;  // CH2CHO
  W += c[18] * 41.073000;  // aC3H5
  W += c[19] * 42.081000;  // C3H6
  W += c[20] * 56.064000;  // C2H3CHO
  W += c[21] * 55.100000;  // C4H7
  W += c[22] * 56.108000;  // C4H81
  W += c[23] * 69.127000;  // C5H9
  W += c[24] * 70.135000;  // C5H10
  W += c[25] * 84.162000;  // C6H12
  W += c[26] * 98.189000;  // C7H14
  W += c[27] * 112.216000; // C8H16
  W += c[28] * 126.243000; // C9H18
  W += c[29] * 127.251000; // PXC9H19
  W += c[30] * 140.270000; // C10H20
  W += c[31] * 168.324000; // C12H24
  W += c[32] * 201.330000; // C12H25O2
  W += c[33] * 216.321000; // OC12H23OOH
  W += c[34] * 28.014000;  // N2

  for (id = 0; id < 35; ++id) {
    sumC += c[id];
  }
  *rho = *P * W / (sumC * (*T) * 8.31446261815324e+07); // rho = PW/(R*T)

  return;
}

// get molecular weight for all species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWT(amrex::Real* wt)
{
  get_mw(wt);
}

// given y[species]: mass fractions
// s mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWY(amrex::Real* y, amrex::Real* wtm)
{
  amrex::Real YOW = 0;
  amrex::Real tmp[35];
  amrex::Real imw[35];

  get_imw(imw);

  for (int i = 0; i < 35; i++) {
    tmp[i] = y[i] * imw[i];
  }
  for (int i = 0; i < 35; i++) {
    YOW += tmp[i];
  }

  *wtm = 1.0 / YOW;
  return;
}

// given x[species]: mole fractions
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWX(amrex::Real* x, amrex::Real* wtm)
{
  amrex::Real XW = 0;       //  see Eq 4 in CK Manual
  XW += x[0] * 170.340000;  // NC12H26
  XW += x[1] * 1.008000;    // H
  XW += x[2] * 15.999000;   // O
  XW += x[3] * 17.007000;   // OH
  XW += x[4] * 33.006000;   // HO2
  XW += x[5] * 2.016000;    // H2
  XW += x[6] * 18.015000;   // H2O
  XW += x[7] * 34.014000;   // H2O2
  XW += x[8] * 31.998000;   // O2
  XW += x[9] * 15.035000;   // CH3
  XW += x[10] * 16.043000;  // CH4
  XW += x[11] * 30.026000;  // CH2O
  XW += x[12] * 28.010000;  // CO
  XW += x[13] * 44.009000;  // CO2
  XW += x[14] * 26.038000;  // C2H2
  XW += x[15] * 28.054000;  // C2H4
  XW += x[16] * 30.070000;  // C2H6
  XW += x[17] * 43.045000;  // CH2CHO
  XW += x[18] * 41.073000;  // aC3H5
  XW += x[19] * 42.081000;  // C3H6
  XW += x[20] * 56.064000;  // C2H3CHO
  XW += x[21] * 55.100000;  // C4H7
  XW += x[22] * 56.108000;  // C4H81
  XW += x[23] * 69.127000;  // C5H9
  XW += x[24] * 70.135000;  // C5H10
  XW += x[25] * 84.162000;  // C6H12
  XW += x[26] * 98.189000;  // C7H14
  XW += x[27] * 112.216000; // C8H16
  XW += x[28] * 126.243000; // C9H18
  XW += x[29] * 127.251000; // PXC9H19
  XW += x[30] * 140.270000; // C10H20
  XW += x[31] * 168.324000; // C12H24
  XW += x[32] * 201.330000; // C12H25O2
  XW += x[33] * 216.321000; // OC12H23OOH
  XW += x[34] * 28.014000;  // N2
  *wtm = XW;

  return;
}

// given c[species]: molar concentration
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWC(amrex::Real* c, amrex::Real* wtm)
{
  int id; // loop counter
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 170.340000;  // NC12H26
  W += c[1] * 1.008000;    // H
  W += c[2] * 15.999000;   // O
  W += c[3] * 17.007000;   // OH
  W += c[4] * 33.006000;   // HO2
  W += c[5] * 2.016000;    // H2
  W += c[6] * 18.015000;   // H2O
  W += c[7] * 34.014000;   // H2O2
  W += c[8] * 31.998000;   // O2
  W += c[9] * 15.035000;   // CH3
  W += c[10] * 16.043000;  // CH4
  W += c[11] * 30.026000;  // CH2O
  W += c[12] * 28.010000;  // CO
  W += c[13] * 44.009000;  // CO2
  W += c[14] * 26.038000;  // C2H2
  W += c[15] * 28.054000;  // C2H4
  W += c[16] * 30.070000;  // C2H6
  W += c[17] * 43.045000;  // CH2CHO
  W += c[18] * 41.073000;  // aC3H5
  W += c[19] * 42.081000;  // C3H6
  W += c[20] * 56.064000;  // C2H3CHO
  W += c[21] * 55.100000;  // C4H7
  W += c[22] * 56.108000;  // C4H81
  W += c[23] * 69.127000;  // C5H9
  W += c[24] * 70.135000;  // C5H10
  W += c[25] * 84.162000;  // C6H12
  W += c[26] * 98.189000;  // C7H14
  W += c[27] * 112.216000; // C8H16
  W += c[28] * 126.243000; // C9H18
  W += c[29] * 127.251000; // PXC9H19
  W += c[30] * 140.270000; // C10H20
  W += c[31] * 168.324000; // C12H24
  W += c[32] * 201.330000; // C12H25O2
  W += c[33] * 216.321000; // OC12H23OOH
  W += c[34] * 28.014000;  // N2

  for (id = 0; id < 35; ++id) {
    sumC += c[id];
  }
  //  CK provides no guard against divison by zero
  *wtm = W / sumC;

  return;
}

// get Cp/R as a function of T
// for all species (Eq 19)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPOR(amrex::Real* T, amrex::Real* cpor)
{
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cp_R(cpor, tc);
}

// get H/RT as a function of T
// for all species (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHORT(amrex::Real* T, amrex::Real* hort)
{
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEnthalpy(hort, tc);
}

// get S/R as a function of T
// for all species (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSOR(amrex::Real* T, amrex::Real* sor)
{
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEntropy(sor, tc);
}

// convert y[species] (mass fracs) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTX(amrex::Real* y, amrex::Real* x)
{
  amrex::Real YOW = 0;
  amrex::Real tmp[35];
  amrex::Real imw[35];

  get_imw(imw);

  for (int i = 0; i < 35; i++) {
    tmp[i] = y[i] * imw[i];
  }
  for (int i = 0; i < 35; i++) {
    YOW += tmp[i];
  }

  amrex::Real YOWINV = 1.0 / YOW;

  for (int i = 0; i < 35; i++) {
    x[i] = y[i] * imw[i] * YOWINV;
  }
  return;
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCP(amrex::Real* P, amrex::Real* T, amrex::Real* y, amrex::Real* c)
{
  amrex::Real YOW = 0;
  amrex::Real PWORT;
  amrex::Real imw[35];

  get_imw(imw);

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 35; i++) {
    c[i] = y[i] * imw[i];
  }
  for (int i = 0; i < 35; i++) {
    YOW += c[i];
  }

  // PW/RT (see Eq. 7)
  PWORT = (*P) / (YOW * 8.31446261815324e+07 * (*T));
  // Now compute conversion

  for (int i = 0; i < 35; i++) {
    c[i] = PWORT * y[i] * imw[i];
  }
  return;
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCR(amrex::Real* rho, amrex::Real* /*T*/, amrex::Real* y, amrex::Real* c)
{
  amrex::Real imw[35];

  get_imw(imw);

  for (int i = 0; i < 35; i++) {
    c[i] = (*rho) * y[i] * imw[i];
  }
}

// convert x[species] (mole fracs) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTY(amrex::Real* x, amrex::Real* y)
{
  amrex::Real XW = 0; // See Eq 4, 9 in CK Manual
  // Compute mean molecular wt first
  XW += x[0] * 170.340000;  // NC12H26
  XW += x[1] * 1.008000;    // H
  XW += x[2] * 15.999000;   // O
  XW += x[3] * 17.007000;   // OH
  XW += x[4] * 33.006000;   // HO2
  XW += x[5] * 2.016000;    // H2
  XW += x[6] * 18.015000;   // H2O
  XW += x[7] * 34.014000;   // H2O2
  XW += x[8] * 31.998000;   // O2
  XW += x[9] * 15.035000;   // CH3
  XW += x[10] * 16.043000;  // CH4
  XW += x[11] * 30.026000;  // CH2O
  XW += x[12] * 28.010000;  // CO
  XW += x[13] * 44.009000;  // CO2
  XW += x[14] * 26.038000;  // C2H2
  XW += x[15] * 28.054000;  // C2H4
  XW += x[16] * 30.070000;  // C2H6
  XW += x[17] * 43.045000;  // CH2CHO
  XW += x[18] * 41.073000;  // aC3H5
  XW += x[19] * 42.081000;  // C3H6
  XW += x[20] * 56.064000;  // C2H3CHO
  XW += x[21] * 55.100000;  // C4H7
  XW += x[22] * 56.108000;  // C4H81
  XW += x[23] * 69.127000;  // C5H9
  XW += x[24] * 70.135000;  // C5H10
  XW += x[25] * 84.162000;  // C6H12
  XW += x[26] * 98.189000;  // C7H14
  XW += x[27] * 112.216000; // C8H16
  XW += x[28] * 126.243000; // C9H18
  XW += x[29] * 127.251000; // PXC9H19
  XW += x[30] * 140.270000; // C10H20
  XW += x[31] * 168.324000; // C12H24
  XW += x[32] * 201.330000; // C12H25O2
  XW += x[33] * 216.321000; // OC12H23OOH
  XW += x[34] * 28.014000;  // N2
  // Now compute conversion
  amrex::Real XWinv = 1.0 / XW;
  y[0] = x[0] * 170.340000 * XWinv;
  y[1] = x[1] * 1.008000 * XWinv;
  y[2] = x[2] * 15.999000 * XWinv;
  y[3] = x[3] * 17.007000 * XWinv;
  y[4] = x[4] * 33.006000 * XWinv;
  y[5] = x[5] * 2.016000 * XWinv;
  y[6] = x[6] * 18.015000 * XWinv;
  y[7] = x[7] * 34.014000 * XWinv;
  y[8] = x[8] * 31.998000 * XWinv;
  y[9] = x[9] * 15.035000 * XWinv;
  y[10] = x[10] * 16.043000 * XWinv;
  y[11] = x[11] * 30.026000 * XWinv;
  y[12] = x[12] * 28.010000 * XWinv;
  y[13] = x[13] * 44.009000 * XWinv;
  y[14] = x[14] * 26.038000 * XWinv;
  y[15] = x[15] * 28.054000 * XWinv;
  y[16] = x[16] * 30.070000 * XWinv;
  y[17] = x[17] * 43.045000 * XWinv;
  y[18] = x[18] * 41.073000 * XWinv;
  y[19] = x[19] * 42.081000 * XWinv;
  y[20] = x[20] * 56.064000 * XWinv;
  y[21] = x[21] * 55.100000 * XWinv;
  y[22] = x[22] * 56.108000 * XWinv;
  y[23] = x[23] * 69.127000 * XWinv;
  y[24] = x[24] * 70.135000 * XWinv;
  y[25] = x[25] * 84.162000 * XWinv;
  y[26] = x[26] * 98.189000 * XWinv;
  y[27] = x[27] * 112.216000 * XWinv;
  y[28] = x[28] * 126.243000 * XWinv;
  y[29] = x[29] * 127.251000 * XWinv;
  y[30] = x[30] * 140.270000 * XWinv;
  y[31] = x[31] * 168.324000 * XWinv;
  y[32] = x[32] * 201.330000 * XWinv;
  y[33] = x[33] * 216.321000 * XWinv;
  y[34] = x[34] * 28.014000 * XWinv;

  return;
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCP(amrex::Real* P, amrex::Real* T, amrex::Real* x, amrex::Real* c)
{
  int id;                                                  // loop counter
  amrex::Real PORT = (*P) / (8.31446261815324e+07 * (*T)); // P/RT

  // Compute conversion, see Eq 10
  for (id = 0; id < 35; ++id) {
    c[id] = x[id] * PORT;
  }

  return;
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCR(amrex::Real* rho, amrex::Real* /*T*/, amrex::Real* x, amrex::Real* c)
{
  int id;             // loop counter
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 170.340000;  // NC12H26
  XW += x[1] * 1.008000;    // H
  XW += x[2] * 15.999000;   // O
  XW += x[3] * 17.007000;   // OH
  XW += x[4] * 33.006000;   // HO2
  XW += x[5] * 2.016000;    // H2
  XW += x[6] * 18.015000;   // H2O
  XW += x[7] * 34.014000;   // H2O2
  XW += x[8] * 31.998000;   // O2
  XW += x[9] * 15.035000;   // CH3
  XW += x[10] * 16.043000;  // CH4
  XW += x[11] * 30.026000;  // CH2O
  XW += x[12] * 28.010000;  // CO
  XW += x[13] * 44.009000;  // CO2
  XW += x[14] * 26.038000;  // C2H2
  XW += x[15] * 28.054000;  // C2H4
  XW += x[16] * 30.070000;  // C2H6
  XW += x[17] * 43.045000;  // CH2CHO
  XW += x[18] * 41.073000;  // aC3H5
  XW += x[19] * 42.081000;  // C3H6
  XW += x[20] * 56.064000;  // C2H3CHO
  XW += x[21] * 55.100000;  // C4H7
  XW += x[22] * 56.108000;  // C4H81
  XW += x[23] * 69.127000;  // C5H9
  XW += x[24] * 70.135000;  // C5H10
  XW += x[25] * 84.162000;  // C6H12
  XW += x[26] * 98.189000;  // C7H14
  XW += x[27] * 112.216000; // C8H16
  XW += x[28] * 126.243000; // C9H18
  XW += x[29] * 127.251000; // PXC9H19
  XW += x[30] * 140.270000; // C10H20
  XW += x[31] * 168.324000; // C12H24
  XW += x[32] * 201.330000; // C12H25O2
  XW += x[33] * 216.321000; // OC12H23OOH
  XW += x[34] * 28.014000;  // N2
  ROW = (*rho) / XW;

  // Compute conversion, see Eq 11
  for (id = 0; id < 35; ++id) {
    c[id] = x[id] * ROW;
  }

  return;
}

// convert c[species] (molar conc) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTX(amrex::Real* c, amrex::Real* x)
{
  int id; // loop counter
  amrex::Real sumC = 0;

  // compute sum of c
  for (id = 0; id < 35; ++id) {
    sumC += c[id];
  }

  //  See Eq 13
  amrex::Real sumCinv = 1.0 / sumC;
  for (id = 0; id < 35; ++id) {
    x[id] = c[id] * sumCinv;
  }

  return;
}

// convert c[species] (molar conc) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTY(amrex::Real* c, amrex::Real* y)
{
  amrex::Real CW = 0; // See Eq 12 in CK Manual
  // compute denominator in eq 12 first
  CW += c[0] * 170.340000;  // NC12H26
  CW += c[1] * 1.008000;    // H
  CW += c[2] * 15.999000;   // O
  CW += c[3] * 17.007000;   // OH
  CW += c[4] * 33.006000;   // HO2
  CW += c[5] * 2.016000;    // H2
  CW += c[6] * 18.015000;   // H2O
  CW += c[7] * 34.014000;   // H2O2
  CW += c[8] * 31.998000;   // O2
  CW += c[9] * 15.035000;   // CH3
  CW += c[10] * 16.043000;  // CH4
  CW += c[11] * 30.026000;  // CH2O
  CW += c[12] * 28.010000;  // CO
  CW += c[13] * 44.009000;  // CO2
  CW += c[14] * 26.038000;  // C2H2
  CW += c[15] * 28.054000;  // C2H4
  CW += c[16] * 30.070000;  // C2H6
  CW += c[17] * 43.045000;  // CH2CHO
  CW += c[18] * 41.073000;  // aC3H5
  CW += c[19] * 42.081000;  // C3H6
  CW += c[20] * 56.064000;  // C2H3CHO
  CW += c[21] * 55.100000;  // C4H7
  CW += c[22] * 56.108000;  // C4H81
  CW += c[23] * 69.127000;  // C5H9
  CW += c[24] * 70.135000;  // C5H10
  CW += c[25] * 84.162000;  // C6H12
  CW += c[26] * 98.189000;  // C7H14
  CW += c[27] * 112.216000; // C8H16
  CW += c[28] * 126.243000; // C9H18
  CW += c[29] * 127.251000; // PXC9H19
  CW += c[30] * 140.270000; // C10H20
  CW += c[31] * 168.324000; // C12H24
  CW += c[32] * 201.330000; // C12H25O2
  CW += c[33] * 216.321000; // OC12H23OOH
  CW += c[34] * 28.014000;  // N2
  // Now compute conversion
  amrex::Real CWinv = 1.0 / CW;
  y[0] = c[0] * 170.340000 * CWinv;
  y[1] = c[1] * 1.008000 * CWinv;
  y[2] = c[2] * 15.999000 * CWinv;
  y[3] = c[3] * 17.007000 * CWinv;
  y[4] = c[4] * 33.006000 * CWinv;
  y[5] = c[5] * 2.016000 * CWinv;
  y[6] = c[6] * 18.015000 * CWinv;
  y[7] = c[7] * 34.014000 * CWinv;
  y[8] = c[8] * 31.998000 * CWinv;
  y[9] = c[9] * 15.035000 * CWinv;
  y[10] = c[10] * 16.043000 * CWinv;
  y[11] = c[11] * 30.026000 * CWinv;
  y[12] = c[12] * 28.010000 * CWinv;
  y[13] = c[13] * 44.009000 * CWinv;
  y[14] = c[14] * 26.038000 * CWinv;
  y[15] = c[15] * 28.054000 * CWinv;
  y[16] = c[16] * 30.070000 * CWinv;
  y[17] = c[17] * 43.045000 * CWinv;
  y[18] = c[18] * 41.073000 * CWinv;
  y[19] = c[19] * 42.081000 * CWinv;
  y[20] = c[20] * 56.064000 * CWinv;
  y[21] = c[21] * 55.100000 * CWinv;
  y[22] = c[22] * 56.108000 * CWinv;
  y[23] = c[23] * 69.127000 * CWinv;
  y[24] = c[24] * 70.135000 * CWinv;
  y[25] = c[25] * 84.162000 * CWinv;
  y[26] = c[26] * 98.189000 * CWinv;
  y[27] = c[27] * 112.216000 * CWinv;
  y[28] = c[28] * 126.243000 * CWinv;
  y[29] = c[29] * 127.251000 * CWinv;
  y[30] = c[30] * 140.270000 * CWinv;
  y[31] = c[31] * 168.324000 * CWinv;
  y[32] = c[32] * 201.330000 * CWinv;
  y[33] = c[33] * 216.321000 * CWinv;
  y[34] = c[34] * 28.014000 * CWinv;

  return;
}

// get specific heat at constant volume as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVML(amrex::Real* T, amrex::Real* cvml)
{
  int id;              // loop counter
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cv_R(cvml, tc);

  // convert to chemkin units
  for (id = 0; id < 35; ++id) {
    cvml[id] *= 8.31446261815324e+07;
  }
}

// get specific heat at constant pressure as a
// function of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPML(amrex::Real* T, amrex::Real* cpml)
{
  int id;              // loop counter
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cp_R(cpml, tc);

  // convert to chemkin units
  for (id = 0; id < 35; ++id) {
    cpml[id] *= 8.31446261815324e+07;
  }
}

// get internal energy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUML(amrex::Real* T, amrex::Real* uml)
{
  int id;              // loop counter
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesInternalEnergy(uml, tc);

  // convert to chemkin units
  for (id = 0; id < 35; ++id) {
    uml[id] *= RT;
  }
}

// get enthalpy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHML(amrex::Real* T, amrex::Real* hml)
{
  int id;              // loop counter
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesEnthalpy(hml, tc);

  // convert to chemkin units
  for (id = 0; id < 35; ++id) {
    hml[id] *= RT;
  }
}

// Returns the standard-state entropies in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSML(amrex::Real* T, amrex::Real* sml)
{
  int id;              // loop counter
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEntropy(sml, tc);

  // convert to chemkin units
  for (id = 0; id < 35; ++id) {
    sml[id] *= 8.31446261815324e+07;
  }
}

// Returns the specific heats at constant volume
// in mass units (Eq. 29)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVMS(amrex::Real* T, amrex::Real* cvms)
{
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cv_R(cvms, tc);
  // multiply by R/molecularweight
  cvms[0] *= 4.881098167284983e+05;  // NC12H26
  cvms[1] *= 8.248474819596468e+07;  // H
  cvms[2] *= 5.196863940342046e+06;  // O
  cvms[3] *= 4.888847308845322e+06;  // OH
  cvms[4] *= 2.519076112874398e+06;  // HO2
  cvms[5] *= 4.124237409798234e+07;  // H2
  cvms[6] *= 4.615299815794193e+06;  // H2O
  cvms[7] *= 2.444423654422661e+06;  // H2O2
  cvms[8] *= 2.598431970171023e+06;  // O2
  cvms[9] *= 5.530071578419182e+06;  // CH3
  cvms[10] *= 5.182610869633635e+06; // CH4
  cvms[11] *= 2.769087663409458e+06; // CH2O
  cvms[12] *= 2.968390795484913e+06; // CO
  cvms[13] *= 1.889264154639560e+06; // CO2
  cvms[14] *= 3.193203248388218e+06; // C2H2
  cvms[15] *= 2.963735160103101e+06; // C2H4
  cvms[16] *= 2.765035789209591e+06; // C2H6
  cvms[17] *= 1.931574542491170e+06; // CH2CHO
  cvms[18] *= 2.024313446340233e+06; // aC3H5
  cvms[19] *= 1.975823440068734e+06; // C3H6
  cvms[20] *= 1.483030575441146e+06; // C2H3CHO
  cvms[21] *= 1.508976881697503e+06; // C4H7
  cvms[22] *= 1.481867580051551e+06; // C4H81
  cvms[23] *= 1.202780768462864e+06; // C5H9
  cvms[24] *= 1.185494064041241e+06; // C5H10
  cvms[25] *= 9.879117200343669e+05; // C6H12
  cvms[26] *= 8.467814743151718e+05; // C7H14
  cvms[27] *= 7.409337900257753e+05; // C8H16
  cvms[28] *= 6.586078133562447e+05; // C9H18
  cvms[29] *= 6.533907488470221e+05; // PXC9H19
  cvms[30] *= 5.927470320206203e+05; // C10H20
  cvms[31] *= 4.939558600171835e+05; // C12H24
  cvms[32] *= 4.129768349552099e+05; // C12H25O2
  cvms[33] *= 3.843576267747116e+05; // OC12H23OOH
  cvms[34] *= 2.967966951578939e+06; // N2
}

// Returns the specific heats at constant pressure
// in mass units (Eq. 26)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPMS(amrex::Real* T, amrex::Real* cpms)
{
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cp_R(cpms, tc);
  // multiply by R/molecularweight
  cpms[0] *= 4.881098167284983e+05;  // NC12H26
  cpms[1] *= 8.248474819596468e+07;  // H
  cpms[2] *= 5.196863940342046e+06;  // O
  cpms[3] *= 4.888847308845322e+06;  // OH
  cpms[4] *= 2.519076112874398e+06;  // HO2
  cpms[5] *= 4.124237409798234e+07;  // H2
  cpms[6] *= 4.615299815794193e+06;  // H2O
  cpms[7] *= 2.444423654422661e+06;  // H2O2
  cpms[8] *= 2.598431970171023e+06;  // O2
  cpms[9] *= 5.530071578419182e+06;  // CH3
  cpms[10] *= 5.182610869633635e+06; // CH4
  cpms[11] *= 2.769087663409458e+06; // CH2O
  cpms[12] *= 2.968390795484913e+06; // CO
  cpms[13] *= 1.889264154639560e+06; // CO2
  cpms[14] *= 3.193203248388218e+06; // C2H2
  cpms[15] *= 2.963735160103101e+06; // C2H4
  cpms[16] *= 2.765035789209591e+06; // C2H6
  cpms[17] *= 1.931574542491170e+06; // CH2CHO
  cpms[18] *= 2.024313446340233e+06; // aC3H5
  cpms[19] *= 1.975823440068734e+06; // C3H6
  cpms[20] *= 1.483030575441146e+06; // C2H3CHO
  cpms[21] *= 1.508976881697503e+06; // C4H7
  cpms[22] *= 1.481867580051551e+06; // C4H81
  cpms[23] *= 1.202780768462864e+06; // C5H9
  cpms[24] *= 1.185494064041241e+06; // C5H10
  cpms[25] *= 9.879117200343669e+05; // C6H12
  cpms[26] *= 8.467814743151718e+05; // C7H14
  cpms[27] *= 7.409337900257753e+05; // C8H16
  cpms[28] *= 6.586078133562447e+05; // C9H18
  cpms[29] *= 6.533907488470221e+05; // PXC9H19
  cpms[30] *= 5.927470320206203e+05; // C10H20
  cpms[31] *= 4.939558600171835e+05; // C12H24
  cpms[32] *= 4.129768349552099e+05; // C12H25O2
  cpms[33] *= 3.843576267747116e+05; // OC12H23OOH
  cpms[34] *= 2.967966951578939e+06; // N2
}

// Returns internal energy in mass units (Eq 30.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUMS(amrex::Real* T, amrex::Real* ums)
{
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  amrex::Real imw[35];

  get_imw(imw);

  speciesInternalEnergy(ums, tc);

  for (int i = 0; i < 35; i++) {
    ums[i] *= RT * imw[i];
  }
}

// Returns enthalpy in mass units (Eq 27.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHMS(amrex::Real* T, amrex::Real* hms)
{
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  amrex::Real imw[35];

  get_imw(imw);

  speciesEnthalpy(hms, tc);

  for (int i = 0; i < 35; i++) {
    hms[i] *= RT * imw[i];
  }
}

// Returns the entropies in mass units (Eq 28.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSMS(amrex::Real* T, amrex::Real* sms)
{
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEntropy(sms, tc);
  // multiply by R/molecularweight
  sms[0] *= 4.881098167284983e+05;  // NC12H26
  sms[1] *= 8.248474819596468e+07;  // H
  sms[2] *= 5.196863940342046e+06;  // O
  sms[3] *= 4.888847308845322e+06;  // OH
  sms[4] *= 2.519076112874398e+06;  // HO2
  sms[5] *= 4.124237409798234e+07;  // H2
  sms[6] *= 4.615299815794193e+06;  // H2O
  sms[7] *= 2.444423654422661e+06;  // H2O2
  sms[8] *= 2.598431970171023e+06;  // O2
  sms[9] *= 5.530071578419182e+06;  // CH3
  sms[10] *= 5.182610869633635e+06; // CH4
  sms[11] *= 2.769087663409458e+06; // CH2O
  sms[12] *= 2.968390795484913e+06; // CO
  sms[13] *= 1.889264154639560e+06; // CO2
  sms[14] *= 3.193203248388218e+06; // C2H2
  sms[15] *= 2.963735160103101e+06; // C2H4
  sms[16] *= 2.765035789209591e+06; // C2H6
  sms[17] *= 1.931574542491170e+06; // CH2CHO
  sms[18] *= 2.024313446340233e+06; // aC3H5
  sms[19] *= 1.975823440068734e+06; // C3H6
  sms[20] *= 1.483030575441146e+06; // C2H3CHO
  sms[21] *= 1.508976881697503e+06; // C4H7
  sms[22] *= 1.481867580051551e+06; // C4H81
  sms[23] *= 1.202780768462864e+06; // C5H9
  sms[24] *= 1.185494064041241e+06; // C5H10
  sms[25] *= 9.879117200343669e+05; // C6H12
  sms[26] *= 8.467814743151718e+05; // C7H14
  sms[27] *= 7.409337900257753e+05; // C8H16
  sms[28] *= 6.586078133562447e+05; // C9H18
  sms[29] *= 6.533907488470221e+05; // PXC9H19
  sms[30] *= 5.927470320206203e+05; // C10H20
  sms[31] *= 4.939558600171835e+05; // C12H24
  sms[32] *= 4.129768349552099e+05; // C12H25O2
  sms[33] *= 3.843576267747116e+05; // OC12H23OOH
  sms[34] *= 2.967966951578939e+06; // N2
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_k_f_qss(const amrex::Real* tc, amrex::Real invT, amrex::Real* k_f)
{
  // reaction 3: H + HCO (+M) <=> CH2O (+M)
  k_f[0] = 1090000 * exp((0.48) * tc[0] - (-130.836333109227) * invT);
  // reaction 4: CH2 + H (+M) <=> CH3 (+M)
  k_f[1] = 25000000000 * exp((-0.8) * tc[0]);
  // reaction 5: CH2O + H (+M) <=> CH3O (+M)
  k_f[2] = 540000 * exp((0.454) * tc[0] - (1308.36333109227) * invT);
  // reaction 8: C2H3 (+M) <=> C2H2 + H (+M)
  k_f[3] = 38600000 * exp((1.62) * tc[0] - (18643.2716780664) * invT);
  // reaction 9: C2H3 + H (+M) <=> C2H4 (+M)
  k_f[4] = 6080000 * exp((0.27) * tc[0] - (140.900666425322) * invT);
  // reaction 10: C2H3 + CH3 (+M) <=> C3H6 (+M)
  k_f[5] = 25000000;
  // reaction 11: C2H4 + H (+M) <=> C2H5 (+M)
  k_f[6] = 3975 * exp((1.28) * tc[0] - (649.466525387545) * invT);
  // reaction 12: C2H5 + H (+M) <=> C2H6 (+M)
  k_f[7] = 521000000000 * exp((-0.99) * tc[0] - (795.082331971457) * invT);
  // reaction 13: C2H3 + C2H5 (+M) <=> C4H81 (+M)
  k_f[8] = 15000000;
  // reaction 16: C3H6 + H (+M) <=> nC3H7 (+M)
  k_f[9] = 13300000 * exp(-(1640.83858218945) * invT);
  // reaction 18: C4H81 + H (+M) <=> pC4H9 (+M)
  k_f[10] = 13300000 * exp(-(1640.83858218945) * invT);
  // reaction 19: C5H10 + H (+M) <=> PXC5H11 (+M)
  k_f[11] = 13300000 * exp(-(1640.83858218945) * invT);
  // reaction 20: C6H12 + H (+M) <=> PXC6H13 (+M)
  k_f[12] = 13300000 * exp(-(1640.83858218945) * invT);
  // reaction 21: C7H14 + H (+M) <=> PXC7H15 (+M)
  k_f[13] = 13300000 * exp(-(1640.83858218945) * invT);
  // reaction 22: C8H16 + H (+M) <=> PXC8H17 (+M)
  k_f[14] = 13300000 * exp(-(1640.83858218945) * invT);
  // reaction 24: C10H20 + H (+M) <=> PXC10H21 (+M)
  k_f[15] = 13300000 * exp(-(1640.83858218945) * invT);
  // reaction 33: HCO + M <=> CO + H + M
  k_f[16] = 187000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
  // reaction 34: HCO + H2O <=> CO + H + H2O
  k_f[17] = 2244000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
  // reaction 55: H + HCO <=> CO + H2
  k_f[18] = 120000000;
  // reaction 56: HCO + O <=> CO + OH
  k_f[19] = 30000000;
  // reaction 57: HCO + O <=> CO2 + H
  k_f[20] = 30000000;
  // reaction 58: HCO + OH <=> CO + H2O
  k_f[21] = 30200000;
  // reaction 59: HCO + O2 <=> CO + HO2
  k_f[22] = 12040 * exp((0.807) * tc[0] - (-365.838516040031) * invT);
  // reaction 60: CH2 + O <=> H + HCO
  k_f[23] = 80000000;
  // reaction 61: CH2 + OH <=> CH2O + H
  k_f[24] = 20000000;
  // reaction 62: CH2 + H2 <=> CH3 + H
  k_f[25] = 0.5 * exp((2) * tc[0] - (3638.25649376812) * invT);
  // reaction 63: CH2 + O2 <=> HCO + OH
  k_f[26] = 10600000 * exp(-(754.82499870708) * invT);
  // reaction 64: CH2 + O2 <=> CO2 + 2 H
  k_f[27] = 2640000 * exp(-(754.82499870708) * invT);
  // reaction 65: CH2 + HO2 <=> CH2O + OH
  k_f[28] = 20000000;
  // reaction 66: 2 CH2 <=> C2H2 + H2
  k_f[29] = 32000000;
  // reaction 67: CH2* + N2 <=> CH2 + N2
  k_f[30] = 15000000 * exp(-(301.929999482832) * invT);
  // reaction 68: CH2* + O <=> CO + H2
  k_f[31] = 15000000;
  // reaction 69: CH2* + O <=> H + HCO
  k_f[32] = 15000000;
  // reaction 70: CH2* + OH <=> CH2O + H
  k_f[33] = 30000000;
  // reaction 71: CH2* + H2 <=> CH3 + H
  k_f[34] = 70000000;
  // reaction 72: CH2* + O2 <=> CO + H + OH
  k_f[35] = 28000000;
  // reaction 73: CH2* + O2 <=> CO + H2O
  k_f[36] = 12000000;
  // reaction 74: CH2* + H2O <=> CH2 + H2O
  k_f[37] = 30000000;
  // reaction 75: CH2* + CO <=> CH2 + CO
  k_f[38] = 9000000;
  // reaction 76: CH2* + CO2 <=> CH2 + CO2
  k_f[39] = 7000000;
  // reaction 77: CH2* + CO2 <=> CH2O + CO
  k_f[40] = 14000000;
  // reaction 78: CH2O + H <=> H2 + HCO
  k_f[41] = 23000 * exp((1.05) * tc[0] - (1648.03458051046) * invT);
  // reaction 79: CH2O + O <=> HCO + OH
  k_f[42] = 39000000 * exp(-(1781.38699694871) * invT);
  // reaction 80: CH2O + OH <=> H2O + HCO
  k_f[43] = 3430 * exp((1.18) * tc[0] - (-224.93784961471) * invT);
  // reaction 81: CH2O + O2 <=> HCO + HO2
  k_f[44] = 100000000 * exp(-(20128.6666321888) * invT);
  // reaction 82: CH2O + HO2 <=> H2O2 + HCO
  k_f[45] = 1000000 * exp(-(4025.73332643776) * invT);
  // reaction 84: CH3 + OH <=> CH2 + H2O
  k_f[46] = 56 * exp((1.6) * tc[0] - (2727.43432866158) * invT);
  // reaction 85: CH3 + OH <=> CH2* + H2O
  k_f[47] = 25010000;
  // reaction 86: CH3 + O2 <=> CH3O + O
  k_f[48] = 30830000 * exp(-(14492.6399751759) * invT);
  // reaction 89: CH3 + HO2 <=> CH3O + OH
  k_f[49] = 13400000;
  // reaction 91: CH3 + HCO <=> CH4 + CO
  k_f[50] = 8480000;
  // reaction 92: CH2O + CH3 <=> CH4 + HCO
  k_f[51] = 0.00332 * exp((2.81) * tc[0] - (2948.84966161566) * invT);
  // reaction 93: CH2 + CH3 <=> C2H4 + H
  k_f[52] = 40000000;
  // reaction 94: CH2* + CH3 <=> C2H4 + H
  k_f[53] = 12000000 * exp(-(-286.83349950869) * invT);
  // reaction 95: 2 CH3 <=> C2H5 + H
  k_f[54] = 4990000 * exp((0.1) * tc[0] - (5334.09665753003) * invT);
  // reaction 96: CH3O + H <=> CH2O + H2
  k_f[55] = 20000000;
  // reaction 97: CH3O + H <=> CH3 + OH
  k_f[56] = 32000000;
  // reaction 98: CH3O + H <=> CH2* + H2O
  k_f[57] = 16000000;
  // reaction 99: CH3O + O <=> CH2O + OH
  k_f[58] = 10000000;
  // reaction 100: CH3O + OH <=> CH2O + H2O
  k_f[59] = 5000000;
  // reaction 101: CH3O + O2 <=> CH2O + HO2
  k_f[60] = 4.28e-19 * exp((7.6) * tc[0] - (-1776.35483029066) * invT);
  // reaction 105: CH2 + CH4 <=> 2 CH3
  k_f[61] = 2.46 * exp((2) * tc[0] - (4161.60182620503) * invT);
  // reaction 106: CH2* + CH4 <=> 2 CH3
  k_f[62] = 16000000 * exp(-(-286.83349950869) * invT);
  // reaction 107: C2H2 + O <=> CH2 + CO
  k_f[63] = 4.08 * exp((2) * tc[0] - (956.111665028967) * invT);
  // reaction 109: C2H2 + HCO <=> C2H3 + CO
  k_f[64] = 10 * exp((2) * tc[0] - (3019.29999482832) * invT);
  // reaction 111: C2H3 + H <=> C2H2 + H2
  k_f[65] = 90000000;
  // reaction 112: C2H3 + O <=> CH3 + CO
  k_f[66] = 48000000;
  // reaction 113: C2H3 + OH <=> C2H2 + H2O
  k_f[67] = 30110000;
  // reaction 114: C2H3 + O2 <=> C2H2 + HO2
  k_f[68] = 1.34 * exp((1.61) * tc[0] - (-192.93326966953) * invT);
  // reaction 115: C2H3 + O2 <=> CH2CHO + O
  k_f[69] = 300000 * exp((0.29) * tc[0] - (5.53538332385192) * invT);
  // reaction 116: C2H3 + O2 <=> CH2O + HCO
  k_f[70] = 46000000000 * exp((-1.39) * tc[0] - (508.248832462767) * invT);
  // reaction 117: C2H3 + HO2 <=> CH2CHO + OH
  k_f[71] = 10000000;
  // reaction 118: C2H3 + H2O2 <=> C2H4 + HO2
  k_f[72] = 12100 * exp(-(-299.917132819613) * invT);
  // reaction 119: C2H3 + HCO <=> C2H4 + CO
  k_f[73] = 90330000;
  // reaction 120: C2H3 + HCO <=> C2H3CHO
  k_f[74] = 18000000;
  // reaction 121: C2H3 + CH3 <=> C2H2 + CH4
  k_f[75] = 392000;
  // reaction 122: C2H3 + CH3 <=> H + aC3H5
  k_f[76] = 1.5e+18 * exp((-2.83) * tc[0] - (9368.88788395227) * invT);
  // reaction 123: 2 C2H3 <=> C2H2 + C2H4
  k_f[77] = 960000;
  // reaction 125: CH2CHO + H <=> CH3 + HCO
  k_f[78] = 90000000;
  // reaction 127: C2H4 + H <=> C2H3 + H2
  k_f[79] = 50.7 * exp((1.9) * tc[0] - (6516.65582217112) * invT);
  // reaction 128: C2H4 + O <=> C2H3 + OH
  k_f[80] = 15.1 * exp((1.9) * tc[0] - (1882.03033010965) * invT);
  // reaction 129: C2H4 + O <=> CH3 + HCO
  k_f[81] = 19.2 * exp((1.83) * tc[0] - (110.707666477038) * invT);
  // reaction 130: C2H4 + O <=> CH2 + CH2O
  k_f[82] = 0.384 * exp((1.83) * tc[0] - (110.707666477038) * invT);
  // reaction 131: C2H4 + OH <=> C2H3 + H2O
  k_f[83] = 3.6 * exp((2) * tc[0] - (1258.0416645118) * invT);
  // reaction 132: C2H4 + HCO <=> C2H5 + CO
  k_f[84] = 10 * exp((2) * tc[0] - (4025.73332643776) * invT);
  // reaction 133: C2H4 + CH2 <=> H + aC3H5
  k_f[85] = 20000000 * exp(-(3019.29999482832) * invT);
  // reaction 134: C2H4 + CH2* <=> H + aC3H5
  k_f[86] = 50000000;
  // reaction 135: C2H4 + CH3 <=> C2H3 + CH4
  k_f[87] = 0.227 * exp((2) * tc[0] - (4629.59332540342) * invT);
  // reaction 136: nC3H7 <=> C2H4 + CH3
  k_f[88] = 96000000000000 * exp(-(15611.2604302599) * invT);
  // reaction 137: C2H4 + O2 <=> C2H3 + HO2
  k_f[89] = 42200000 * exp(-(30595.573280927) * invT);
  // reaction 138: C2H3 + C2H4 <=> C4H7
  k_f[90] = 7.93e+32 * exp((-8.47) * tc[0] - (7155.74098774311) * invT);
  // reaction 139: C2H5 + H <=> C2H4 + H2
  k_f[91] = 2000000;
  // reaction 140: C2H5 + O <=> CH2O + CH3
  k_f[92] = 16040000;
  // reaction 141: C2H5 + O2 <=> C2H4 + HO2
  k_f[93] = 20000;
  // reaction 142: C2H5 + HO2 <=> C2H6 + O2
  k_f[94] = 300000;
  // reaction 143: C2H5 + HO2 <=> C2H4 + H2O2
  k_f[95] = 300000;
  // reaction 144: C2H5 + HO2 <=> CH2O + CH3 + OH
  k_f[96] = 24000000;
  // reaction 145: C2H5 + H2O2 <=> C2H6 + HO2
  k_f[97] = 8700 * exp(-(490.133032493797) * invT);
  // reaction 146: C2H3 + C2H5 <=> CH3 + aC3H5
  k_f[98] = 3.9e+26 * exp((-5.22) * tc[0] - (9937.0194996458) * invT);
  // reaction 147: C2H6 + H <=> C2H5 + H2
  k_f[99] = 115 * exp((1.9) * tc[0] - (3789.22149350954) * invT);
  // reaction 148: C2H6 + O <=> C2H5 + OH
  k_f[100] = 89.8 * exp((1.92) * tc[0] - (2863.30282842885) * invT);
  // reaction 149: C2H6 + OH <=> C2H5 + H2O
  k_f[101] = 3.54 * exp((2.12) * tc[0] - (437.798499250106) * invT);
  // reaction 150: C2H6 + CH2* <=> C2H5 + CH3
  k_f[102] = 40000000 * exp(-(-276.769166192596) * invT);
  // reaction 151: C2H6 + CH3 <=> C2H5 + CH4
  k_f[103] = 6.14 * exp((1.74) * tc[0] - (5258.61415765932) * invT);
  // reaction 156: HO2 + aC3H5 <=> C2H3 + CH2O + OH
  k_f[104] = 6600000;
  // reaction 157: HCO + aC3H5 <=> C3H6 + CO
  k_f[105] = 60000000;
  // reaction 161: C3H6 + O => C2H5 + HCO
  k_f[106] = 35 * exp((1.65) * tc[0] - (-489.126599162188) * invT);
  // reaction 166: C2H3CHO + H <=> C2H4 + HCO
  k_f[107] = 108000 * exp((0.454) * tc[0] - (2928.72099498347) * invT);
  // reaction 167: C2H3CHO + O <=> C2H3 + CO + OH
  k_f[108] = 30000000 * exp(-(1781.38699694871) * invT);
  // reaction 168: C2H3CHO + OH <=> C2H3 + CO + H2O
  k_f[109] = 3430 * exp((1.18) * tc[0] - (-224.93784961471) * invT);
  // reaction 169: H + nC3H7 <=> C2H5 + CH3
  k_f[110] = 3.7e+18 * exp((-2.92) * tc[0] - (6292.72440588802) * invT);
  // reaction 170: H + nC3H7 <=> C3H6 + H2
  k_f[111] = 1800000;
  // reaction 171: O + nC3H7 <=> C2H5 + CH2O
  k_f[112] = 96000000;
  // reaction 172: OH + nC3H7 <=> C3H6 + H2O
  k_f[113] = 24000000;
  // reaction 173: O2 + nC3H7 <=> C3H6 + HO2
  k_f[114] = 90000;
  // reaction 174: HO2 + nC3H7 <=> C2H5 + CH2O + OH
  k_f[115] = 24000000;
  // reaction 175: CH3 + nC3H7 <=> C3H6 + CH4
  k_f[116] = 11000000;
  // reaction 178: C4H7 + HCO <=> C4H81 + CO
  k_f[117] = 60000000;
  // reaction 179: C4H81 + H <=> C2H4 + C2H5
  k_f[118] = 1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  // reaction 182: C4H81 + O => HCO + nC3H7
  k_f[119] = 330 * exp((1.45) * tc[0] - (-202.293099653497) * invT);
  // reaction 189: H + pC4H9 => 2 C2H5
  k_f[120] = 3.7e+18 * exp((-2.92) * tc[0] - (6292.72440588802) * invT);
  // reaction 190: H + pC4H9 <=> C4H81 + H2
  k_f[121] = 1800000;
  // reaction 191: O + pC4H9 <=> CH2O + nC3H7
  k_f[122] = 96000000;
  // reaction 192: OH + pC4H9 <=> C4H81 + H2O
  k_f[123] = 24000000;
  // reaction 193: O2 + pC4H9 <=> C4H81 + HO2
  k_f[124] = 270000;
  // reaction 194: HO2 + pC4H9 <=> CH2O + OH + nC3H7
  k_f[125] = 24000000;
  // reaction 195: CH3 + pC4H9 <=> C4H81 + CH4
  k_f[126] = 11000000;
  // reaction 197: C5H9 => C2H3 + C3H6
  k_f[127] = 25000000000000 * exp(-(15106.1214767918) * invT);
  // reaction 198: C5H10 + H <=> C2H4 + nC3H7
  k_f[128] = 8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  // reaction 199: C5H10 + H <=> C2H5 + C3H6
  k_f[129] = 1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  // reaction 200: C2H4 + nC3H7 <=> PXC5H11
  k_f[130] = 300000 * exp(-(3673.48166037445) * invT);
  // reaction 201: C6H12 + H <=> C2H4 + pC4H9
  k_f[131] = 8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  // reaction 202: C6H12 + H <=> C3H6 + nC3H7
  k_f[132] = 1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  // reaction 203: C2H4 + pC4H9 <=> PXC6H13
  k_f[133] = 300000 * exp(-(3673.48166037445) * invT);
  // reaction 204: C7H14 + H <=> C2H4 + PXC5H11
  k_f[134] = 8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  // reaction 205: C7H14 + H <=> C3H6 + pC4H9
  k_f[135] = 1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  // reaction 206: C2H4 + PXC5H11 <=> PXC7H15
  k_f[136] = 300000 * exp(-(3673.48166037445) * invT);
  // reaction 207: C8H16 + H <=> C2H4 + PXC6H13
  k_f[137] = 8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  // reaction 208: C8H16 + H <=> C3H6 + PXC5H11
  k_f[138] = 1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  // reaction 209: C2H4 + PXC6H13 <=> PXC8H17
  k_f[139] = 300000 * exp(-(3673.48166037445) * invT);
  // reaction 210: C9H18 + H <=> C2H4 + PXC7H15
  k_f[140] = 8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  // reaction 211: C9H18 + H <=> C3H6 + PXC6H13
  k_f[141] = 1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  // reaction 212: C2H4 + PXC7H15 <=> PXC9H19
  k_f[142] = 300000 * exp(-(3673.48166037445) * invT);
  // reaction 213: C10H20 + H <=> C2H4 + PXC8H17
  k_f[143] = 8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  // reaction 214: C10H20 + H <=> C3H6 + PXC7H15
  k_f[144] = 1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  // reaction 215: C2H4 + PXC8H17 <=> PXC10H21
  k_f[145] = 300000 * exp(-(3673.48166037445) * invT);
  // reaction 216: C12H24 <=> C5H9 + PXC7H15
  k_f[146] = 3.5e+16 * exp(-(35696.6303005228) * invT);
  // reaction 217: C2H4 + PXC10H21 <=> PXC12H25
  k_f[147] = 300000 * exp(-(3673.48166037445) * invT);
  // reaction 218: PXC12H25 <=> S3XC12H25
  k_f[148] = 3670000000000 * exp((-0.6) * tc[0] - (7246.31998758796) * invT);
  // reaction 219: C3H6 + PXC9H19 <=> SXC12H25
  k_f[149] = 300000 * exp(-(3673.48166037445) * invT);
  // reaction 220: C4H81 + PXC8H17 <=> SXC12H25
  k_f[150] = 300000 * exp(-(3673.48166037445) * invT);
  // reaction 221: C5H10 + PXC7H15 <=> S3XC12H25
  k_f[151] = 300000 * exp(-(3673.48166037445) * invT);
  // reaction 222: C10H20 + C2H5 <=> S3XC12H25
  k_f[152] = 300000 * exp(-(3673.48166037445) * invT);
  // reaction 223: C6H12 + PXC6H13 <=> S3XC12H25
  k_f[153] = 300000 * exp(-(3673.48166037445) * invT);
  // reaction 224: C9H18 + nC3H7 <=> S3XC12H25
  k_f[154] = 300000 * exp(-(3673.48166037445) * invT);
  // reaction 225: C7H14 + PXC5H11 <=> S3XC12H25
  k_f[155] = 300000 * exp(-(3673.48166037445) * invT);
  // reaction 226: C8H16 + pC4H9 <=> S3XC12H25
  k_f[156] = 300000 * exp(-(3673.48166037445) * invT);
  // reaction 227: C2H5 + PXC10H21 <=> NC12H26
  k_f[157] = 188000000 * exp((-0.5) * tc[0]);
  // reaction 228: PXC9H19 + nC3H7 <=> NC12H26
  k_f[158] = 188000000 * exp((-0.5) * tc[0]);
  // reaction 229: PXC8H17 + pC4H9 <=> NC12H26
  k_f[159] = 188000000 * exp((-0.5) * tc[0]);
  // reaction 230: PXC5H11 + PXC7H15 <=> NC12H26
  k_f[160] = 188000000 * exp((-0.5) * tc[0]);
  // reaction 231: 2 PXC6H13 <=> NC12H26
  k_f[161] = 188000000 * exp((-0.5) * tc[0]);
  // reaction 232: H + NC12H26 <=> H2 + PXC12H25
  k_f[162] = 1.3 * exp((2.54) * tc[0] - (3399.73179417669) * invT);
  // reaction 233: H + NC12H26 <=> H2 + SXC12H25
  k_f[163] = 2.6 * exp((2.4) * tc[0] - (2249.8817128129) * invT);
  // reaction 234: H + NC12H26 <=> H2 + S3XC12H25
  k_f[164] = 3.9 * exp((2.4) * tc[0] - (2249.8817128129) * invT);
  // reaction 235: NC12H26 + O <=> OH + PXC12H25
  k_f[165] = 0.19 * exp((2.68) * tc[0] - (1869.95313013034) * invT);
  // reaction 236: NC12H26 + O <=> OH + SXC12H25
  k_f[166] = 0.0952 * exp((2.71) * tc[0] - (1059.77429818474) * invT);
  // reaction 237: NC12H26 + O <=> OH + S3XC12H25
  k_f[167] = 0.1428 * exp((2.71) * tc[0] - (1059.77429818474) * invT);
  // reaction 238: NC12H26 + OH <=> H2O + PXC12H25
  k_f[168] = 0.0034 * exp((2.66) * tc[0] - (265.195182879087) * invT);
  // reaction 239: NC12H26 + OH <=> H2O + SXC12H25
  k_f[169] = 0.074 * exp((2.39) * tc[0] - (197.764149661255) * invT);
  // reaction 240: NC12H26 + OH <=> H2O + S3XC12H25
  k_f[170] = 0.101 * exp((2.39) * tc[0] - (197.764149661255) * invT);
  // reaction 241: NC12H26 + O2 <=> HO2 + PXC12H25
  k_f[171] = 40000000 * exp(-(25628.8247894344) * invT);
  // reaction 242: NC12H26 + O2 <=> HO2 + SXC12H25
  k_f[172] = 80000000 * exp(-(23948.0811256466) * invT);
  // reaction 243: NC12H26 + O2 <=> HO2 + S3XC12H25
  k_f[173] = 120000000 * exp(-(23948.0811256466) * invT);
  // reaction 244: HO2 + NC12H26 <=> H2O2 + PXC12H25
  k_f[174] = 0.0676 * exp((2.55) * tc[0] - (8298.04281911983) * invT);
  // reaction 245: HO2 + NC12H26 <=> H2O2 + SXC12H25
  k_f[175] = 0.089 * exp((2.6) * tc[0] - (6999.74382134365) * invT);
  // reaction 246: HO2 + NC12H26 <=> H2O2 + S3XC12H25
  k_f[176] = 0.0885 * exp((2.6) * tc[0] - (6999.74382134365) * invT);
  // reaction 247: CH3 + NC12H26 <=> CH4 + PXC12H25
  k_f[177] = 1.81e-06 * exp((3.65) * tc[0] - (3599.50881050116) * invT);
  // reaction 248: CH3 + NC12H26 <=> CH4 + SXC12H25
  k_f[178] = 6e-06 * exp((3.46) * tc[0] - (2757.62732860986) * invT);
  // reaction 249: CH3 + NC12H26 <=> CH4 + S3XC12H25
  k_f[179] = 9e-06 * exp((3.46) * tc[0] - (2757.62732860986) * invT);
  // reaction 250: O2 + PXC12H25 => C12H25O2
  k_f[180] = 50000000;
  // reaction 251: C12H25O2 => O2 + PXC12H25
  k_f[181] = 27500000000000 * exp(-(13788.1366430493) * invT);
  // reaction 252: O2 + SXC12H25 => C12H25O2
  k_f[182] = 50000000;
  // reaction 253: C12H25O2 => O2 + SXC12H25
  k_f[183] = 27500000000000 * exp(-(13788.1366430493) * invT);
  // reaction 254: O2 + S3XC12H25 => C12H25O2
  k_f[184] = 50000000;
  // reaction 255: C12H25O2 => O2 + S3XC12H25
  k_f[185] = 27500000000000 * exp(-(13788.1366430493) * invT);
  // reaction 256: C12H25O2 => C12OOH
  k_f[186] = 1510000000000 * exp(-(9561.11665028967) * invT);
  // reaction 257: C12OOH => C12H25O2
  k_f[187] = 100000000000 * exp(-(5786.99165675428) * invT);
  // reaction 258: O2 + PXC12H25 => C12H24 + HO2
  k_f[188] = 350000 * exp(-(3019.29999482832) * invT);
  // reaction 259: C12H24 + HO2 => O2 + PXC12H25
  k_f[189] = 316000 * exp(-(9812.72498319203) * invT);
  // reaction 260: O2 + SXC12H25 => C12H24 + HO2
  k_f[190] = 350000 * exp(-(3019.29999482832) * invT);
  // reaction 261: C12H24 + HO2 => O2 + SXC12H25
  k_f[191] = 316000 * exp(-(9812.72498319203) * invT);
  // reaction 262: O2 + S3XC12H25 => C12H24 + HO2
  k_f[192] = 350000 * exp(-(3019.29999482832) * invT);
  // reaction 263: C12H24 + HO2 => O2 + S3XC12H25
  k_f[193] = 316000 * exp(-(9812.72498319203) * invT);
  // reaction 264: C12OOH + O2 => O2C12H24OOH
  k_f[194] = 46000;
  // reaction 265: O2C12H24OOH => C12OOH + O2
  k_f[195] = 25100000000000 * exp(-(13788.1366430493) * invT);
  // reaction 266: O2C12H24OOH <=> OC12H23OOH + OH
  k_f[196] = 89000000000 * exp(-(8554.68331868023) * invT);
  // reaction 267: OC12H23OOH => 3 C2H4 + C2H5 + 2 CH2CHO + OH
  k_f[197] = 1.8e+15 * exp(-(21167.8090470755) * invT);

  return;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_qss_coeff(
  amrex::Real* k_f,
  amrex::Real* qf,
  amrex::Real* qr,
  amrex::Real* sc,
  const amrex::Real* tc,
  amrex::Real* g_RT,
  amrex::Real* g_RT_qss)
{
  const amrex::Real invT = 1.0 / tc[1];

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1. / refC;
  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 35; ++i) {
    mixture += sc[i];
  }

  {
    // reaction 3: H + HCO (+M) <=> CH2O (+M)
    amrex::Real Corr = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] +
                       (1.5 - 1) * sc[12] + sc[13] + (3 - 1) * sc[16];
    const amrex::Real redP = Corr / k_f[0] * 1350000000000 *
                             exp(-2.57 * tc[0] - 717.083748771726 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2176 * exp(-tc[1] * 0.003690036900369) +
      0.7824 * exp(-tc[1] * 0.000362976406533575) + exp(-6570 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[0] = Corr * k_f[0] * (sc[1]);
    qr[0] = Corr * k_f[0] * exp(-(g_RT[1] - g_RT[11] + g_RT_qss[2])) * (refC) *
            (sc[11]);
  }

  {
    // reaction 4: CH2 + H (+M) <=> CH3 (+M)
    amrex::Real Corr = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] +
                       (1.5 - 1) * sc[12] + sc[13] + (3 - 1) * sc[16];
    const amrex::Real redP =
      Corr / k_f[1] * 3.2e+15 * exp(-3.14 * tc[0] - 618.956498939805 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.32 * exp(-tc[1] * 0.0128205128205128) +
      0.68 * exp(-tc[1] * 0.00050125313283208) + exp(-5590 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[1] = Corr * k_f[1] * (sc[1]);
    qr[1] = Corr * k_f[1] * exp(-(g_RT[1] - g_RT[9] + g_RT_qss[0])) * (refC) *
            (sc[9]);
  }

  {
    // reaction 5: CH2O + H (+M) <=> CH3O (+M)
    amrex::Real Corr = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] +
                       (1.5 - 1) * sc[12] + sc[13] + (3 - 1) * sc[16];
    const amrex::Real redP =
      Corr / k_f[2] * 2.2e+18 * exp(-4.8 * tc[0] - 2797.88466187424 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.242 * exp(-tc[1] * 0.0106382978723404) +
      0.758 * exp(-tc[1] * 0.000643086816720257) + exp(-4200 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[2] = Corr * k_f[2] * (sc[1] * sc[11]);
    qr[2] =
      Corr * k_f[2] * exp(-(g_RT[1] + g_RT[11] - g_RT_qss[3])) * (refC) * (1.0);
  }

  {
    // reaction 8: C2H3 (+M) <=> C2H2 + H (+M)
    amrex::Real Corr = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] +
                       (1.5 - 1) * sc[12] + sc[13] + (3 - 1) * sc[14] +
                       (3 - 1) * sc[15] + (3 - 1) * sc[16];
    const amrex::Real redP =
      Corr / k_f[3] * 2.565e+21 * exp(-3.4 * tc[0] - 18014.5125184767 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      -0.9816 * exp(-tc[1] * 0.000185745862510913) +
      1.9816 * exp(-tc[1] * 0.232926488400261) + exp(0.0795 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[3] = Corr * k_f[3] * (1.0);
    qr[3] = Corr * k_f[3] * exp(-(-g_RT[1] - g_RT[14] + g_RT_qss[4])) *
            (refCinv) * (sc[1] * sc[14]);
  }

  {
    // reaction 9: C2H3 + H (+M) <=> C2H4 (+M)
    amrex::Real Corr = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] +
                       (1.5 - 1) * sc[12] + sc[13] + (3 - 1) * sc[14] +
                       (3 - 1) * sc[15] + (3 - 1) * sc[16];
    const amrex::Real redP =
      Corr / k_f[4] * 1.4e+18 * exp(-3.86 * tc[0] - 1670.67933047167 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.218 * exp(-tc[1] * 0.00481927710843374) +
      0.782 * exp(-tc[1] * 0.000375516334960571) + exp(-6095 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[4] = Corr * k_f[4] * (sc[1]);
    qr[4] = Corr * k_f[4] * exp(-(g_RT[1] - g_RT[15] + g_RT_qss[4])) * (refC) *
            (sc[15]);
  }

  {
    // reaction 10: C2H3 + CH3 (+M) <=> C3H6 (+M)
    amrex::Real Corr = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] +
                       (1.5 - 1) * sc[12] + sc[13] + (3 - 1) * sc[14] +
                       (3 - 1) * sc[15] + (3 - 1) * sc[16];
    const amrex::Real redP =
      Corr / k_f[5] * 4.27e+46 * exp(-11.94 * tc[0] - 4916.32618157895 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.825 * exp(-tc[1] * 0.000745934656124124) +
      0.175 * exp(-tc[1] * 1.66666666666667e-05) + exp(-10139.8 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[5] = Corr * k_f[5] * (sc[9]);
    qr[5] = Corr * k_f[5] * exp(-(g_RT[9] - g_RT[19] + g_RT_qss[4])) * (refC) *
            (sc[19]);
  }

  {
    // reaction 11: C2H4 + H (+M) <=> C2H5 (+M)
    amrex::Real Corr = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] +
                       (1.5 - 1) * sc[12] + sc[13] + (3 - 1) * sc[16];
    const amrex::Real redP =
      Corr / k_f[6] * 4715000 * exp(0 * tc[0] - 380.059419015673 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.24 * exp(-tc[1] * 0.025) + 0.76 * exp(-tc[1] * 0.000975609756097561) +
      0.0);
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[6] = Corr * k_f[6] * (sc[1] * sc[15]);
    qr[6] =
      Corr * k_f[6] * exp(-(g_RT[1] + g_RT[15] - g_RT_qss[5])) * (refC) * (1.0);
  }

  {
    // reaction 12: C2H5 + H (+M) <=> C2H6 (+M)
    amrex::Real Corr = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] +
                       (1.5 - 1) * sc[12] + sc[13] + (3 - 1) * sc[16];
    const amrex::Real redP =
      Corr / k_f[7] * 1.99e+29 * exp(-7.08 * tc[0] - 3364.00341090455 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.1578 * exp(-tc[1] * 0.008) +
      0.8422 * exp(-tc[1] * 0.000450653447498873) + exp(-6882 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[7] = Corr * k_f[7] * (sc[1]);
    qr[7] = Corr * k_f[7] * exp(-(g_RT[1] - g_RT[16] + g_RT_qss[5])) * (refC) *
            (sc[16]);
  }

  {
    // reaction 13: C2H3 + C2H5 (+M) <=> C4H81 (+M)
    amrex::Real Corr = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] +
                       (1.5 - 1) * sc[12] + sc[13] + (3 - 1) * sc[16];
    const amrex::Real redP =
      Corr / k_f[8] * 1.55e+44 * exp(-11.79 * tc[0] - 4521.1501339225 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.802 * exp(-tc[1] * 0.000439000834101585) +
      0.198 * exp(-tc[1] * 1.66666666666667e-05) + exp(-5723.2 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    // Remove forward reaction
    // qf[8]  = Corr * k_f[8] * (1.0);
    qf[8] = 0.0;
    qr[8] = Corr * k_f[8] * exp(-(-g_RT[22] + g_RT_qss[4] + g_RT_qss[5])) *
            (refC) * (sc[22]);
  }

  {
    // reaction 16: C3H6 + H (+M) <=> nC3H7 (+M)
    amrex::Real Corr = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] +
                       (1.5 - 1) * sc[12] + sc[13] + (3 - 1) * sc[16];
    const amrex::Real redP =
      Corr / k_f[9] * 6.26e+26 * exp(-6.66 * tc[0] - 3522.51666063304 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-tc[1] * 0.000763358778625954) + exp(-48097 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[9] = Corr * k_f[9] * (sc[1] * sc[19]);
    qr[9] =
      Corr * k_f[9] * exp(-(g_RT[1] + g_RT[19] - g_RT_qss[6])) * (refC) * (1.0);
  }

  {
    // reaction 18: C4H81 + H (+M) <=> pC4H9 (+M)
    amrex::Real Corr = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] +
                       (1.5 - 1) * sc[12] + sc[13] + (3 - 1) * sc[16];
    const amrex::Real redP =
      Corr / k_f[10] * 6.26e+26 * exp(-6.66 * tc[0] - 3522.51666063304 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-tc[1] * 0.000763358778625954) + exp(-48097 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[10] = Corr * k_f[10] * (sc[1] * sc[22]);
    qr[10] = Corr * k_f[10] * exp(-(g_RT[1] + g_RT[22] - g_RT_qss[7])) *
             (refC) * (1.0);
  }

  {
    // reaction 19: C5H10 + H (+M) <=> PXC5H11 (+M)
    amrex::Real Corr = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] +
                       (1.5 - 1) * sc[12] + sc[13] + (3 - 1) * sc[16];
    const amrex::Real redP =
      Corr / k_f[11] * 6.26e+26 * exp(-6.66 * tc[0] - 3522.51666063304 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-tc[1] * 0.000763358778625954) + exp(-48097 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[11] = Corr * k_f[11] * (sc[1] * sc[24]);
    qr[11] = Corr * k_f[11] * exp(-(g_RT[1] + g_RT[24] - g_RT_qss[8])) *
             (refC) * (1.0);
  }

  {
    // reaction 20: C6H12 + H (+M) <=> PXC6H13 (+M)
    amrex::Real Corr = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] +
                       (1.5 - 1) * sc[12] + sc[13] + (3 - 1) * sc[16];
    const amrex::Real redP =
      Corr / k_f[12] * 6.26e+26 * exp(-6.66 * tc[0] - 3522.51666063304 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-tc[1] * 0.000763358778625954) + exp(-48097 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[12] = Corr * k_f[12] * (sc[1] * sc[25]);
    qr[12] = Corr * k_f[12] * exp(-(g_RT[1] + g_RT[25] - g_RT_qss[9])) *
             (refC) * (1.0);
  }

  {
    // reaction 21: C7H14 + H (+M) <=> PXC7H15 (+M)
    amrex::Real Corr = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] +
                       (1.5 - 1) * sc[12] + sc[13] + (3 - 1) * sc[16];
    const amrex::Real redP =
      Corr / k_f[13] * 6.26e+26 * exp(-6.66 * tc[0] - 3522.51666063304 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-tc[1] * 0.000763358778625954) + exp(-48097 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[13] = Corr * k_f[13] * (sc[1] * sc[26]);
    qr[13] = Corr * k_f[13] * exp(-(g_RT[1] + g_RT[26] - g_RT_qss[10])) *
             (refC) * (1.0);
  }

  {
    // reaction 22: C8H16 + H (+M) <=> PXC8H17 (+M)
    amrex::Real Corr = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] +
                       (1.5 - 1) * sc[12] + sc[13] + (3 - 1) * sc[16];
    const amrex::Real redP =
      Corr / k_f[14] * 6.26e+26 * exp(-6.66 * tc[0] - 3522.51666063304 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-tc[1] * 0.000763358778625954) + exp(-48097 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[14] = Corr * k_f[14] * (sc[1] * sc[27]);
    qr[14] = Corr * k_f[14] * exp(-(g_RT[1] + g_RT[27] - g_RT_qss[11])) *
             (refC) * (1.0);
  }

  {
    // reaction 24: C10H20 + H (+M) <=> PXC10H21 (+M)
    amrex::Real Corr = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] +
                       (1.5 - 1) * sc[12] + sc[13] + (3 - 1) * sc[16];
    const amrex::Real redP =
      Corr / k_f[15] * 6.26e+26 * exp(-6.66 * tc[0] - 3522.51666063304 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-tc[1] * 0.000763358778625954) + exp(-48097 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[15] = Corr * k_f[15] * (sc[1] * sc[30]);
    qr[15] = Corr * k_f[15] * exp(-(g_RT[1] + g_RT[30] - g_RT_qss[12])) *
             (refC) * (1.0);
  }

  {
    // reaction 33: HCO + M <=> CO + H + M
    const amrex::Real Corr = mixture + sc[5] + (0 - 1) * sc[6] +
                             (1.75 - 1) * sc[12] + (3.6 - 1) * sc[13];
    qf[16] = Corr * k_f[16] * (1.0);
    qr[16] = Corr * k_f[16] * exp(-(-g_RT[1] - g_RT[12] + g_RT_qss[2])) *
             (refCinv) * (sc[1] * sc[12]);
  }

  {
    // reaction 34: HCO + H2O <=> CO + H + H2O
    qf[17] = k_f[17] * (sc[6]);
    qr[17] = k_f[17] * exp(-(-g_RT[1] - g_RT[12] + g_RT_qss[2])) * (refCinv) *
             (sc[1] * sc[6] * sc[12]);
  }

  {
    // reaction 55: H + HCO <=> CO + H2
    qf[18] = k_f[18] * (sc[1]);
    qr[18] = k_f[18] * exp(-(g_RT[1] - g_RT[5] - g_RT[12] + g_RT_qss[2])) *
             (sc[5] * sc[12]);
  }

  {
    // reaction 56: HCO + O <=> CO + OH
    qf[19] = k_f[19] * (sc[2]);
    qr[19] = k_f[19] * exp(-(g_RT[2] - g_RT[3] - g_RT[12] + g_RT_qss[2])) *
             (sc[3] * sc[12]);
  }

  {
    // reaction 57: HCO + O <=> CO2 + H
    qf[20] = k_f[20] * (sc[2]);
    qr[20] = k_f[20] * exp(-(-g_RT[1] + g_RT[2] - g_RT[13] + g_RT_qss[2])) *
             (sc[1] * sc[13]);
  }

  {
    // reaction 58: HCO + OH <=> CO + H2O
    qf[21] = k_f[21] * (sc[3]);
    qr[21] = k_f[21] * exp(-(g_RT[3] - g_RT[6] - g_RT[12] + g_RT_qss[2])) *
             (sc[6] * sc[12]);
  }

  {
    // reaction 59: HCO + O2 <=> CO + HO2
    qf[22] = k_f[22] * (sc[8]);
    qr[22] = k_f[22] * exp(-(-g_RT[4] + g_RT[8] - g_RT[12] + g_RT_qss[2])) *
             (sc[4] * sc[12]);
  }

  {
    // reaction 60: CH2 + O <=> H + HCO
    qf[23] = k_f[23] * (sc[2]);
    qr[23] = k_f[23] * exp(-(-g_RT[1] + g_RT[2] + g_RT_qss[0] - g_RT_qss[2])) *
             (sc[1]);
  }

  {
    // reaction 61: CH2 + OH <=> CH2O + H
    qf[24] = k_f[24] * (sc[3]);
    qr[24] = k_f[24] * exp(-(-g_RT[1] + g_RT[3] - g_RT[11] + g_RT_qss[0])) *
             (sc[1] * sc[11]);
  }

  {
    // reaction 62: CH2 + H2 <=> CH3 + H
    qf[25] = k_f[25] * (sc[5]);
    qr[25] = k_f[25] * exp(-(-g_RT[1] + g_RT[5] - g_RT[9] + g_RT_qss[0])) *
             (sc[1] * sc[9]);
  }

  {
    // reaction 63: CH2 + O2 <=> HCO + OH
    qf[26] = k_f[26] * (sc[8]);
    qr[26] = k_f[26] * exp(-(-g_RT[3] + g_RT[8] + g_RT_qss[0] - g_RT_qss[2])) *
             (sc[3]);
  }

  {
    // reaction 64: CH2 + O2 <=> CO2 + 2 H
    qf[27] = k_f[27] * (sc[8]);
    qr[27] = k_f[27] *
             exp(-(-2.000000 * g_RT[1] + g_RT[8] - g_RT[13] + g_RT_qss[0])) *
             (refCinv) * (pow(sc[1], 2.000000) * sc[13]);
  }

  {
    // reaction 65: CH2 + HO2 <=> CH2O + OH
    qf[28] = k_f[28] * (sc[4]);
    qr[28] = k_f[28] * exp(-(-g_RT[3] + g_RT[4] - g_RT[11] + g_RT_qss[0])) *
             (sc[3] * sc[11]);
  }

  {
    // reaction 66: 2 CH2 <=> C2H2 + H2
    // Remove forward reaction
    // qf[29] = k_f[29] * (1.0);
    qf[29] = 0.0;
    qr[29] = k_f[29] * exp(-(-g_RT[5] - g_RT[14] + 2.000000 * g_RT_qss[0])) *
             (sc[5] * sc[14]);
  }

  {
    // reaction 67: CH2* + N2 <=> CH2 + N2
    qf[30] = k_f[30] * (sc[34]);
    qr[30] = k_f[30] * exp(-(g_RT[34] - g_RT[34] - g_RT_qss[0] + g_RT_qss[1])) *
             (sc[34]);
  }

  {
    // reaction 68: CH2* + O <=> CO + H2
    qf[31] = k_f[31] * (sc[2]);
    qr[31] = k_f[31] * exp(-(g_RT[2] - g_RT[5] - g_RT[12] + g_RT_qss[1])) *
             (sc[5] * sc[12]);
  }

  {
    // reaction 69: CH2* + O <=> H + HCO
    qf[32] = k_f[32] * (sc[2]);
    qr[32] = k_f[32] * exp(-(-g_RT[1] + g_RT[2] + g_RT_qss[1] - g_RT_qss[2])) *
             (sc[1]);
  }

  {
    // reaction 70: CH2* + OH <=> CH2O + H
    qf[33] = k_f[33] * (sc[3]);
    qr[33] = k_f[33] * exp(-(-g_RT[1] + g_RT[3] - g_RT[11] + g_RT_qss[1])) *
             (sc[1] * sc[11]);
  }

  {
    // reaction 71: CH2* + H2 <=> CH3 + H
    qf[34] = k_f[34] * (sc[5]);
    qr[34] = k_f[34] * exp(-(-g_RT[1] + g_RT[5] - g_RT[9] + g_RT_qss[1])) *
             (sc[1] * sc[9]);
  }

  {
    // reaction 72: CH2* + O2 <=> CO + H + OH
    qf[35] = k_f[35] * (sc[8]);
    qr[35] = k_f[35] *
             exp(-(-g_RT[1] - g_RT[3] + g_RT[8] - g_RT[12] + g_RT_qss[1])) *
             (refCinv) * (sc[1] * sc[3] * sc[12]);
  }

  {
    // reaction 73: CH2* + O2 <=> CO + H2O
    qf[36] = k_f[36] * (sc[8]);
    qr[36] = k_f[36] * exp(-(-g_RT[6] + g_RT[8] - g_RT[12] + g_RT_qss[1])) *
             (sc[6] * sc[12]);
  }

  {
    // reaction 74: CH2* + H2O <=> CH2 + H2O
    qf[37] = k_f[37] * (sc[6]);
    qr[37] =
      k_f[37] * exp(-(g_RT[6] - g_RT[6] - g_RT_qss[0] + g_RT_qss[1])) * (sc[6]);
  }

  {
    // reaction 75: CH2* + CO <=> CH2 + CO
    qf[38] = k_f[38] * (sc[12]);
    qr[38] = k_f[38] * exp(-(g_RT[12] - g_RT[12] - g_RT_qss[0] + g_RT_qss[1])) *
             (sc[12]);
  }

  {
    // reaction 76: CH2* + CO2 <=> CH2 + CO2
    qf[39] = k_f[39] * (sc[13]);
    qr[39] = k_f[39] * exp(-(g_RT[13] - g_RT[13] - g_RT_qss[0] + g_RT_qss[1])) *
             (sc[13]);
  }

  {
    // reaction 77: CH2* + CO2 <=> CH2O + CO
    qf[40] = k_f[40] * (sc[13]);
    qr[40] = k_f[40] * exp(-(-g_RT[11] - g_RT[12] + g_RT[13] + g_RT_qss[1])) *
             (sc[11] * sc[12]);
  }

  {
    // reaction 78: CH2O + H <=> H2 + HCO
    qf[41] = k_f[41] * (sc[1] * sc[11]);
    qr[41] =
      k_f[41] * exp(-(g_RT[1] - g_RT[5] + g_RT[11] - g_RT_qss[2])) * (sc[5]);
  }

  {
    // reaction 79: CH2O + O <=> HCO + OH
    qf[42] = k_f[42] * (sc[2] * sc[11]);
    qr[42] =
      k_f[42] * exp(-(g_RT[2] - g_RT[3] + g_RT[11] - g_RT_qss[2])) * (sc[3]);
  }

  {
    // reaction 80: CH2O + OH <=> H2O + HCO
    qf[43] = k_f[43] * (sc[3] * sc[11]);
    qr[43] =
      k_f[43] * exp(-(g_RT[3] - g_RT[6] + g_RT[11] - g_RT_qss[2])) * (sc[6]);
  }

  {
    // reaction 81: CH2O + O2 <=> HCO + HO2
    qf[44] = k_f[44] * (sc[8] * sc[11]);
    qr[44] =
      k_f[44] * exp(-(-g_RT[4] + g_RT[8] + g_RT[11] - g_RT_qss[2])) * (sc[4]);
  }

  {
    // reaction 82: CH2O + HO2 <=> H2O2 + HCO
    qf[45] = k_f[45] * (sc[4] * sc[11]);
    qr[45] =
      k_f[45] * exp(-(g_RT[4] - g_RT[7] + g_RT[11] - g_RT_qss[2])) * (sc[7]);
  }

  {
    // reaction 84: CH3 + OH <=> CH2 + H2O
    qf[46] = k_f[46] * (sc[3] * sc[9]);
    qr[46] =
      k_f[46] * exp(-(g_RT[3] - g_RT[6] + g_RT[9] - g_RT_qss[0])) * (sc[6]);
  }

  {
    // reaction 85: CH3 + OH <=> CH2* + H2O
    qf[47] = k_f[47] * (sc[3] * sc[9]);
    qr[47] =
      k_f[47] * exp(-(g_RT[3] - g_RT[6] + g_RT[9] - g_RT_qss[1])) * (sc[6]);
  }

  {
    // reaction 86: CH3 + O2 <=> CH3O + O
    qf[48] = k_f[48] * (sc[8] * sc[9]);
    qr[48] =
      k_f[48] * exp(-(-g_RT[2] + g_RT[8] + g_RT[9] - g_RT_qss[3])) * (sc[2]);
  }

  {
    // reaction 89: CH3 + HO2 <=> CH3O + OH
    qf[49] = k_f[49] * (sc[4] * sc[9]);
    qr[49] =
      k_f[49] * exp(-(-g_RT[3] + g_RT[4] + g_RT[9] - g_RT_qss[3])) * (sc[3]);
  }

  {
    // reaction 91: CH3 + HCO <=> CH4 + CO
    qf[50] = k_f[50] * (sc[9]);
    qr[50] = k_f[50] * exp(-(g_RT[9] - g_RT[10] - g_RT[12] + g_RT_qss[2])) *
             (sc[10] * sc[12]);
  }

  {
    // reaction 92: CH2O + CH3 <=> CH4 + HCO
    qf[51] = k_f[51] * (sc[9] * sc[11]);
    qr[51] =
      k_f[51] * exp(-(g_RT[9] - g_RT[10] + g_RT[11] - g_RT_qss[2])) * (sc[10]);
  }

  {
    // reaction 93: CH2 + CH3 <=> C2H4 + H
    qf[52] = k_f[52] * (sc[9]);
    qr[52] = k_f[52] * exp(-(-g_RT[1] + g_RT[9] - g_RT[15] + g_RT_qss[0])) *
             (sc[1] * sc[15]);
  }

  {
    // reaction 94: CH2* + CH3 <=> C2H4 + H
    qf[53] = k_f[53] * (sc[9]);
    qr[53] = k_f[53] * exp(-(-g_RT[1] + g_RT[9] - g_RT[15] + g_RT_qss[1])) *
             (sc[1] * sc[15]);
  }

  {
    // reaction 95: 2 CH3 <=> C2H5 + H
    qf[54] = k_f[54] * (pow(sc[9], 2.000000));
    qr[54] =
      k_f[54] * exp(-(-g_RT[1] + 2.000000 * g_RT[9] - g_RT_qss[5])) * (sc[1]);
  }

  {
    // reaction 96: CH3O + H <=> CH2O + H2
    qf[55] = k_f[55] * (sc[1]);
    qr[55] = k_f[55] * exp(-(g_RT[1] - g_RT[5] - g_RT[11] + g_RT_qss[3])) *
             (sc[5] * sc[11]);
  }

  {
    // reaction 97: CH3O + H <=> CH3 + OH
    qf[56] = k_f[56] * (sc[1]);
    qr[56] = k_f[56] * exp(-(g_RT[1] - g_RT[3] - g_RT[9] + g_RT_qss[3])) *
             (sc[3] * sc[9]);
  }

  {
    // reaction 98: CH3O + H <=> CH2* + H2O
    qf[57] = k_f[57] * (sc[1]);
    qr[57] =
      k_f[57] * exp(-(g_RT[1] - g_RT[6] - g_RT_qss[1] + g_RT_qss[3])) * (sc[6]);
  }

  {
    // reaction 99: CH3O + O <=> CH2O + OH
    qf[58] = k_f[58] * (sc[2]);
    qr[58] = k_f[58] * exp(-(g_RT[2] - g_RT[3] - g_RT[11] + g_RT_qss[3])) *
             (sc[3] * sc[11]);
  }

  {
    // reaction 100: CH3O + OH <=> CH2O + H2O
    qf[59] = k_f[59] * (sc[3]);
    qr[59] = k_f[59] * exp(-(g_RT[3] - g_RT[6] - g_RT[11] + g_RT_qss[3])) *
             (sc[6] * sc[11]);
  }

  {
    // reaction 101: CH3O + O2 <=> CH2O + HO2
    qf[60] = k_f[60] * (sc[8]);
    qr[60] = k_f[60] * exp(-(-g_RT[4] + g_RT[8] - g_RT[11] + g_RT_qss[3])) *
             (sc[4] * sc[11]);
  }

  {
    // reaction 105: CH2 + CH4 <=> 2 CH3
    qf[61] = k_f[61] * (sc[10]);
    qr[61] = k_f[61] * exp(-(-2.000000 * g_RT[9] + g_RT[10] + g_RT_qss[0])) *
             (pow(sc[9], 2.000000));
  }

  {
    // reaction 106: CH2* + CH4 <=> 2 CH3
    qf[62] = k_f[62] * (sc[10]);
    qr[62] = k_f[62] * exp(-(-2.000000 * g_RT[9] + g_RT[10] + g_RT_qss[1])) *
             (pow(sc[9], 2.000000));
  }

  {
    // reaction 107: C2H2 + O <=> CH2 + CO
    qf[63] = k_f[63] * (sc[2] * sc[14]);
    qr[63] =
      k_f[63] * exp(-(g_RT[2] - g_RT[12] + g_RT[14] - g_RT_qss[0])) * (sc[12]);
  }

  {
    // reaction 109: C2H2 + HCO <=> C2H3 + CO
    qf[64] = k_f[64] * (sc[14]);
    qr[64] = k_f[64] *
             exp(-(-g_RT[12] + g_RT[14] + g_RT_qss[2] - g_RT_qss[4])) *
             (sc[12]);
  }

  {
    // reaction 111: C2H3 + H <=> C2H2 + H2
    qf[65] = k_f[65] * (sc[1]);
    qr[65] = k_f[65] * exp(-(g_RT[1] - g_RT[5] - g_RT[14] + g_RT_qss[4])) *
             (sc[5] * sc[14]);
  }

  {
    // reaction 112: C2H3 + O <=> CH3 + CO
    qf[66] = k_f[66] * (sc[2]);
    qr[66] = k_f[66] * exp(-(g_RT[2] - g_RT[9] - g_RT[12] + g_RT_qss[4])) *
             (sc[9] * sc[12]);
  }

  {
    // reaction 113: C2H3 + OH <=> C2H2 + H2O
    qf[67] = k_f[67] * (sc[3]);
    qr[67] = k_f[67] * exp(-(g_RT[3] - g_RT[6] - g_RT[14] + g_RT_qss[4])) *
             (sc[6] * sc[14]);
  }

  {
    // reaction 114: C2H3 + O2 <=> C2H2 + HO2
    qf[68] = k_f[68] * (sc[8]);
    qr[68] = k_f[68] * exp(-(-g_RT[4] + g_RT[8] - g_RT[14] + g_RT_qss[4])) *
             (sc[4] * sc[14]);
  }

  {
    // reaction 115: C2H3 + O2 <=> CH2CHO + O
    qf[69] = k_f[69] * (sc[8]);
    qr[69] = k_f[69] * exp(-(-g_RT[2] + g_RT[8] - g_RT[17] + g_RT_qss[4])) *
             (sc[2] * sc[17]);
  }

  {
    // reaction 116: C2H3 + O2 <=> CH2O + HCO
    qf[70] = k_f[70] * (sc[8]);
    qr[70] = k_f[70] * exp(-(g_RT[8] - g_RT[11] - g_RT_qss[2] + g_RT_qss[4])) *
             (sc[11]);
  }

  {
    // reaction 117: C2H3 + HO2 <=> CH2CHO + OH
    qf[71] = k_f[71] * (sc[4]);
    qr[71] = k_f[71] * exp(-(-g_RT[3] + g_RT[4] - g_RT[17] + g_RT_qss[4])) *
             (sc[3] * sc[17]);
  }

  {
    // reaction 118: C2H3 + H2O2 <=> C2H4 + HO2
    qf[72] = k_f[72] * (sc[7]);
    qr[72] = k_f[72] * exp(-(-g_RT[4] + g_RT[7] - g_RT[15] + g_RT_qss[4])) *
             (sc[4] * sc[15]);
  }

  {
    // reaction 119: C2H3 + HCO <=> C2H4 + CO
    // Remove forward reaction
    // qf[73] = k_f[73] * (1.0);
    qf[73] = 0.0;
    qr[73] = k_f[73] *
             exp(-(-g_RT[12] - g_RT[15] + g_RT_qss[2] + g_RT_qss[4])) *
             (sc[12] * sc[15]);
  }

  {
    // reaction 120: C2H3 + HCO <=> C2H3CHO
    // Remove forward reaction
    // qf[74] = k_f[74] * (1.0);
    qf[74] = 0.0;
    qr[74] = k_f[74] * exp(-(-g_RT[20] + g_RT_qss[2] + g_RT_qss[4])) * (refC) *
             (sc[20]);
  }

  {
    // reaction 121: C2H3 + CH3 <=> C2H2 + CH4
    qf[75] = k_f[75] * (sc[9]);
    qr[75] = k_f[75] * exp(-(g_RT[9] - g_RT[10] - g_RT[14] + g_RT_qss[4])) *
             (sc[10] * sc[14]);
  }

  {
    // reaction 122: C2H3 + CH3 <=> H + aC3H5
    qf[76] = k_f[76] * (sc[9]);
    qr[76] = k_f[76] * exp(-(-g_RT[1] + g_RT[9] - g_RT[18] + g_RT_qss[4])) *
             (sc[1] * sc[18]);
  }

  {
    // reaction 123: 2 C2H3 <=> C2H2 + C2H4
    // Remove forward reaction
    // qf[77] = k_f[77] * (1.0);
    qf[77] = 0.0;
    qr[77] = k_f[77] * exp(-(-g_RT[14] - g_RT[15] + 2.000000 * g_RT_qss[4])) *
             (sc[14] * sc[15]);
  }

  {
    // reaction 125: CH2CHO + H <=> CH3 + HCO
    qf[78] = k_f[78] * (sc[1] * sc[17]);
    qr[78] =
      k_f[78] * exp(-(g_RT[1] - g_RT[9] + g_RT[17] - g_RT_qss[2])) * (sc[9]);
  }

  {
    // reaction 127: C2H4 + H <=> C2H3 + H2
    qf[79] = k_f[79] * (sc[1] * sc[15]);
    qr[79] =
      k_f[79] * exp(-(g_RT[1] - g_RT[5] + g_RT[15] - g_RT_qss[4])) * (sc[5]);
  }

  {
    // reaction 128: C2H4 + O <=> C2H3 + OH
    qf[80] = k_f[80] * (sc[2] * sc[15]);
    qr[80] =
      k_f[80] * exp(-(g_RT[2] - g_RT[3] + g_RT[15] - g_RT_qss[4])) * (sc[3]);
  }

  {
    // reaction 129: C2H4 + O <=> CH3 + HCO
    qf[81] = k_f[81] * (sc[2] * sc[15]);
    qr[81] =
      k_f[81] * exp(-(g_RT[2] - g_RT[9] + g_RT[15] - g_RT_qss[2])) * (sc[9]);
  }

  {
    // reaction 130: C2H4 + O <=> CH2 + CH2O
    qf[82] = k_f[82] * (sc[2] * sc[15]);
    qr[82] =
      k_f[82] * exp(-(g_RT[2] - g_RT[11] + g_RT[15] - g_RT_qss[0])) * (sc[11]);
  }

  {
    // reaction 131: C2H4 + OH <=> C2H3 + H2O
    qf[83] = k_f[83] * (sc[3] * sc[15]);
    qr[83] =
      k_f[83] * exp(-(g_RT[3] - g_RT[6] + g_RT[15] - g_RT_qss[4])) * (sc[6]);
  }

  {
    // reaction 132: C2H4 + HCO <=> C2H5 + CO
    qf[84] = k_f[84] * (sc[15]);
    qr[84] = k_f[84] *
             exp(-(-g_RT[12] + g_RT[15] + g_RT_qss[2] - g_RT_qss[5])) *
             (sc[12]);
  }

  {
    // reaction 133: C2H4 + CH2 <=> H + aC3H5
    qf[85] = k_f[85] * (sc[15]);
    qr[85] = k_f[85] * exp(-(-g_RT[1] + g_RT[15] - g_RT[18] + g_RT_qss[0])) *
             (sc[1] * sc[18]);
  }

  {
    // reaction 134: C2H4 + CH2* <=> H + aC3H5
    qf[86] = k_f[86] * (sc[15]);
    qr[86] = k_f[86] * exp(-(-g_RT[1] + g_RT[15] - g_RT[18] + g_RT_qss[1])) *
             (sc[1] * sc[18]);
  }

  {
    // reaction 135: C2H4 + CH3 <=> C2H3 + CH4
    qf[87] = k_f[87] * (sc[9] * sc[15]);
    qr[87] =
      k_f[87] * exp(-(g_RT[9] - g_RT[10] + g_RT[15] - g_RT_qss[4])) * (sc[10]);
  }

  {
    // reaction 136: nC3H7 <=> C2H4 + CH3
    qf[88] = k_f[88] * (1.0);
    qr[88] = k_f[88] * exp(-(-g_RT[9] - g_RT[15] + g_RT_qss[6])) * (refCinv) *
             (sc[9] * sc[15]);
  }

  {
    // reaction 137: C2H4 + O2 <=> C2H3 + HO2
    qf[89] = k_f[89] * (sc[8] * sc[15]);
    qr[89] =
      k_f[89] * exp(-(-g_RT[4] + g_RT[8] + g_RT[15] - g_RT_qss[4])) * (sc[4]);
  }

  {
    // reaction 138: C2H3 + C2H4 <=> C4H7
    qf[90] = k_f[90] * (sc[15]);
    qr[90] =
      k_f[90] * exp(-(g_RT[15] - g_RT[21] + g_RT_qss[4])) * (refC) * (sc[21]);
  }

  {
    // reaction 139: C2H5 + H <=> C2H4 + H2
    qf[91] = k_f[91] * (sc[1]);
    qr[91] = k_f[91] * exp(-(g_RT[1] - g_RT[5] - g_RT[15] + g_RT_qss[5])) *
             (sc[5] * sc[15]);
  }

  {
    // reaction 140: C2H5 + O <=> CH2O + CH3
    qf[92] = k_f[92] * (sc[2]);
    qr[92] = k_f[92] * exp(-(g_RT[2] - g_RT[9] - g_RT[11] + g_RT_qss[5])) *
             (sc[9] * sc[11]);
  }

  {
    // reaction 141: C2H5 + O2 <=> C2H4 + HO2
    qf[93] = k_f[93] * (sc[8]);
    qr[93] = k_f[93] * exp(-(-g_RT[4] + g_RT[8] - g_RT[15] + g_RT_qss[5])) *
             (sc[4] * sc[15]);
  }

  {
    // reaction 142: C2H5 + HO2 <=> C2H6 + O2
    qf[94] = k_f[94] * (sc[4]);
    qr[94] = k_f[94] * exp(-(g_RT[4] - g_RT[8] - g_RT[16] + g_RT_qss[5])) *
             (sc[8] * sc[16]);
  }

  {
    // reaction 143: C2H5 + HO2 <=> C2H4 + H2O2
    qf[95] = k_f[95] * (sc[4]);
    qr[95] = k_f[95] * exp(-(g_RT[4] - g_RT[7] - g_RT[15] + g_RT_qss[5])) *
             (sc[7] * sc[15]);
  }

  {
    // reaction 144: C2H5 + HO2 <=> CH2O + CH3 + OH
    qf[96] = k_f[96] * (sc[4]);
    qr[96] = k_f[96] *
             exp(-(-g_RT[3] + g_RT[4] - g_RT[9] - g_RT[11] + g_RT_qss[5])) *
             (refCinv) * (sc[3] * sc[9] * sc[11]);
  }

  {
    // reaction 145: C2H5 + H2O2 <=> C2H6 + HO2
    qf[97] = k_f[97] * (sc[7]);
    qr[97] = k_f[97] * exp(-(-g_RT[4] + g_RT[7] - g_RT[16] + g_RT_qss[5])) *
             (sc[4] * sc[16]);
  }

  {
    // reaction 146: C2H3 + C2H5 <=> CH3 + aC3H5
    // Remove forward reaction
    // qf[98] = k_f[98] * (1.0);
    qf[98] = 0.0;
    qr[98] = k_f[98] * exp(-(-g_RT[9] - g_RT[18] + g_RT_qss[4] + g_RT_qss[5])) *
             (sc[9] * sc[18]);
  }

  {
    // reaction 147: C2H6 + H <=> C2H5 + H2
    qf[99] = k_f[99] * (sc[1] * sc[16]);
    qr[99] =
      k_f[99] * exp(-(g_RT[1] - g_RT[5] + g_RT[16] - g_RT_qss[5])) * (sc[5]);
  }

  {
    // reaction 148: C2H6 + O <=> C2H5 + OH
    qf[100] = k_f[100] * (sc[2] * sc[16]);
    qr[100] =
      k_f[100] * exp(-(g_RT[2] - g_RT[3] + g_RT[16] - g_RT_qss[5])) * (sc[3]);
  }

  {
    // reaction 149: C2H6 + OH <=> C2H5 + H2O
    qf[101] = k_f[101] * (sc[3] * sc[16]);
    qr[101] =
      k_f[101] * exp(-(g_RT[3] - g_RT[6] + g_RT[16] - g_RT_qss[5])) * (sc[6]);
  }

  {
    // reaction 150: C2H6 + CH2* <=> C2H5 + CH3
    qf[102] = k_f[102] * (sc[16]);
    qr[102] = k_f[102] *
              exp(-(-g_RT[9] + g_RT[16] + g_RT_qss[1] - g_RT_qss[5])) * (sc[9]);
  }

  {
    // reaction 151: C2H6 + CH3 <=> C2H5 + CH4
    qf[103] = k_f[103] * (sc[9] * sc[16]);
    qr[103] =
      k_f[103] * exp(-(g_RT[9] - g_RT[10] + g_RT[16] - g_RT_qss[5])) * (sc[10]);
  }

  {
    // reaction 156: HO2 + aC3H5 <=> C2H3 + CH2O + OH
    qf[104] = k_f[104] * (sc[4] * sc[18]);
    qr[104] = k_f[104] *
              exp(-(-g_RT[3] + g_RT[4] - g_RT[11] + g_RT[18] - g_RT_qss[4])) *
              (refCinv) * (sc[3] * sc[11]);
  }

  {
    // reaction 157: HCO + aC3H5 <=> C3H6 + CO
    qf[105] = k_f[105] * (sc[18]);
    qr[105] = k_f[105] * exp(-(-g_RT[12] + g_RT[18] - g_RT[19] + g_RT_qss[2])) *
              (sc[12] * sc[19]);
  }

  {
    // reaction 161: C3H6 + O => C2H5 + HCO
    qf[106] = k_f[106] * (sc[2] * sc[19]);
    qr[106] =
      k_f[106] * exp(-(g_RT[2] + g_RT[19] - g_RT_qss[2] - g_RT_qss[5])) * (0.0);
  }

  {
    // reaction 166: C2H3CHO + H <=> C2H4 + HCO
    qf[107] = k_f[107] * (sc[1] * sc[20]);
    qr[107] =
      k_f[107] * exp(-(g_RT[1] - g_RT[15] + g_RT[20] - g_RT_qss[2])) * (sc[15]);
  }

  {
    // reaction 167: C2H3CHO + O <=> C2H3 + CO + OH
    qf[108] = k_f[108] * (sc[2] * sc[20]);
    qr[108] = k_f[108] *
              exp(-(g_RT[2] - g_RT[3] - g_RT[12] + g_RT[20] - g_RT_qss[4])) *
              (refCinv) * (sc[3] * sc[12]);
  }

  {
    // reaction 168: C2H3CHO + OH <=> C2H3 + CO + H2O
    qf[109] = k_f[109] * (sc[3] * sc[20]);
    qr[109] = k_f[109] *
              exp(-(g_RT[3] - g_RT[6] - g_RT[12] + g_RT[20] - g_RT_qss[4])) *
              (refCinv) * (sc[6] * sc[12]);
  }

  {
    // reaction 169: H + nC3H7 <=> C2H5 + CH3
    qf[110] = k_f[110] * (sc[1]);
    qr[110] = k_f[110] * exp(-(g_RT[1] - g_RT[9] - g_RT_qss[5] + g_RT_qss[6])) *
              (sc[9]);
  }

  {
    // reaction 170: H + nC3H7 <=> C3H6 + H2
    qf[111] = k_f[111] * (sc[1]);
    qr[111] = k_f[111] * exp(-(g_RT[1] - g_RT[5] - g_RT[19] + g_RT_qss[6])) *
              (sc[5] * sc[19]);
  }

  {
    // reaction 171: O + nC3H7 <=> C2H5 + CH2O
    qf[112] = k_f[112] * (sc[2]);
    qr[112] = k_f[112] *
              exp(-(g_RT[2] - g_RT[11] - g_RT_qss[5] + g_RT_qss[6])) * (sc[11]);
  }

  {
    // reaction 172: OH + nC3H7 <=> C3H6 + H2O
    qf[113] = k_f[113] * (sc[3]);
    qr[113] = k_f[113] * exp(-(g_RT[3] - g_RT[6] - g_RT[19] + g_RT_qss[6])) *
              (sc[6] * sc[19]);
  }

  {
    // reaction 173: O2 + nC3H7 <=> C3H6 + HO2
    qf[114] = k_f[114] * (sc[8]);
    qr[114] = k_f[114] * exp(-(-g_RT[4] + g_RT[8] - g_RT[19] + g_RT_qss[6])) *
              (sc[4] * sc[19]);
  }

  {
    // reaction 174: HO2 + nC3H7 <=> C2H5 + CH2O + OH
    qf[115] = k_f[115] * (sc[4]);
    qr[115] =
      k_f[115] *
      exp(-(-g_RT[3] + g_RT[4] - g_RT[11] - g_RT_qss[5] + g_RT_qss[6])) *
      (refCinv) * (sc[3] * sc[11]);
  }

  {
    // reaction 175: CH3 + nC3H7 <=> C3H6 + CH4
    qf[116] = k_f[116] * (sc[9]);
    qr[116] = k_f[116] * exp(-(g_RT[9] - g_RT[10] - g_RT[19] + g_RT_qss[6])) *
              (sc[10] * sc[19]);
  }

  {
    // reaction 178: C4H7 + HCO <=> C4H81 + CO
    qf[117] = k_f[117] * (sc[21]);
    qr[117] = k_f[117] * exp(-(-g_RT[12] + g_RT[21] - g_RT[22] + g_RT_qss[2])) *
              (sc[12] * sc[22]);
  }

  {
    // reaction 179: C4H81 + H <=> C2H4 + C2H5
    qf[118] = k_f[118] * (sc[1] * sc[22]);
    qr[118] =
      k_f[118] * exp(-(g_RT[1] - g_RT[15] + g_RT[22] - g_RT_qss[5])) * (sc[15]);
  }

  {
    // reaction 182: C4H81 + O => HCO + nC3H7
    qf[119] = k_f[119] * (sc[2] * sc[22]);
    qr[119] =
      k_f[119] * exp(-(g_RT[2] + g_RT[22] - g_RT_qss[2] - g_RT_qss[6])) * (0.0);
  }

  {
    // reaction 189: H + pC4H9 => 2 C2H5
    qf[120] = k_f[120] * (sc[1]);
    qr[120] =
      k_f[120] * exp(-(g_RT[1] - 2.000000 * g_RT_qss[5] + g_RT_qss[7])) * (0.0);
  }

  {
    // reaction 190: H + pC4H9 <=> C4H81 + H2
    qf[121] = k_f[121] * (sc[1]);
    qr[121] = k_f[121] * exp(-(g_RT[1] - g_RT[5] - g_RT[22] + g_RT_qss[7])) *
              (sc[5] * sc[22]);
  }

  {
    // reaction 191: O + pC4H9 <=> CH2O + nC3H7
    qf[122] = k_f[122] * (sc[2]);
    qr[122] = k_f[122] *
              exp(-(g_RT[2] - g_RT[11] - g_RT_qss[6] + g_RT_qss[7])) * (sc[11]);
  }

  {
    // reaction 192: OH + pC4H9 <=> C4H81 + H2O
    qf[123] = k_f[123] * (sc[3]);
    qr[123] = k_f[123] * exp(-(g_RT[3] - g_RT[6] - g_RT[22] + g_RT_qss[7])) *
              (sc[6] * sc[22]);
  }

  {
    // reaction 193: O2 + pC4H9 <=> C4H81 + HO2
    qf[124] = k_f[124] * (sc[8]);
    qr[124] = k_f[124] * exp(-(-g_RT[4] + g_RT[8] - g_RT[22] + g_RT_qss[7])) *
              (sc[4] * sc[22]);
  }

  {
    // reaction 194: HO2 + pC4H9 <=> CH2O + OH + nC3H7
    qf[125] = k_f[125] * (sc[4]);
    qr[125] =
      k_f[125] *
      exp(-(-g_RT[3] + g_RT[4] - g_RT[11] - g_RT_qss[6] + g_RT_qss[7])) *
      (refCinv) * (sc[3] * sc[11]);
  }

  {
    // reaction 195: CH3 + pC4H9 <=> C4H81 + CH4
    qf[126] = k_f[126] * (sc[9]);
    qr[126] = k_f[126] * exp(-(g_RT[9] - g_RT[10] - g_RT[22] + g_RT_qss[7])) *
              (sc[10] * sc[22]);
  }

  {
    // reaction 197: C5H9 => C2H3 + C3H6
    qf[127] = k_f[127] * (sc[23]);
    qr[127] =
      k_f[127] * exp(-(-g_RT[19] + g_RT[23] - g_RT_qss[4])) * (refCinv) * (0.0);
  }

  {
    // reaction 198: C5H10 + H <=> C2H4 + nC3H7
    qf[128] = k_f[128] * (sc[1] * sc[24]);
    qr[128] =
      k_f[128] * exp(-(g_RT[1] - g_RT[15] + g_RT[24] - g_RT_qss[6])) * (sc[15]);
  }

  {
    // reaction 199: C5H10 + H <=> C2H5 + C3H6
    qf[129] = k_f[129] * (sc[1] * sc[24]);
    qr[129] =
      k_f[129] * exp(-(g_RT[1] - g_RT[19] + g_RT[24] - g_RT_qss[5])) * (sc[19]);
  }

  {
    // reaction 200: C2H4 + nC3H7 <=> PXC5H11
    qf[130] = k_f[130] * (sc[15]);
    qr[130] =
      k_f[130] * exp(-(g_RT[15] + g_RT_qss[6] - g_RT_qss[8])) * (refC) * (1.0);
  }

  {
    // reaction 201: C6H12 + H <=> C2H4 + pC4H9
    qf[131] = k_f[131] * (sc[1] * sc[25]);
    qr[131] =
      k_f[131] * exp(-(g_RT[1] - g_RT[15] + g_RT[25] - g_RT_qss[7])) * (sc[15]);
  }

  {
    // reaction 202: C6H12 + H <=> C3H6 + nC3H7
    qf[132] = k_f[132] * (sc[1] * sc[25]);
    qr[132] =
      k_f[132] * exp(-(g_RT[1] - g_RT[19] + g_RT[25] - g_RT_qss[6])) * (sc[19]);
  }

  {
    // reaction 203: C2H4 + pC4H9 <=> PXC6H13
    qf[133] = k_f[133] * (sc[15]);
    qr[133] =
      k_f[133] * exp(-(g_RT[15] + g_RT_qss[7] - g_RT_qss[9])) * (refC) * (1.0);
  }

  {
    // reaction 204: C7H14 + H <=> C2H4 + PXC5H11
    qf[134] = k_f[134] * (sc[1] * sc[26]);
    qr[134] =
      k_f[134] * exp(-(g_RT[1] - g_RT[15] + g_RT[26] - g_RT_qss[8])) * (sc[15]);
  }

  {
    // reaction 205: C7H14 + H <=> C3H6 + pC4H9
    qf[135] = k_f[135] * (sc[1] * sc[26]);
    qr[135] =
      k_f[135] * exp(-(g_RT[1] - g_RT[19] + g_RT[26] - g_RT_qss[7])) * (sc[19]);
  }

  {
    // reaction 206: C2H4 + PXC5H11 <=> PXC7H15
    qf[136] = k_f[136] * (sc[15]);
    qr[136] =
      k_f[136] * exp(-(g_RT[15] + g_RT_qss[8] - g_RT_qss[10])) * (refC) * (1.0);
  }

  {
    // reaction 207: C8H16 + H <=> C2H4 + PXC6H13
    qf[137] = k_f[137] * (sc[1] * sc[27]);
    qr[137] =
      k_f[137] * exp(-(g_RT[1] - g_RT[15] + g_RT[27] - g_RT_qss[9])) * (sc[15]);
  }

  {
    // reaction 208: C8H16 + H <=> C3H6 + PXC5H11
    qf[138] = k_f[138] * (sc[1] * sc[27]);
    qr[138] =
      k_f[138] * exp(-(g_RT[1] - g_RT[19] + g_RT[27] - g_RT_qss[8])) * (sc[19]);
  }

  {
    // reaction 209: C2H4 + PXC6H13 <=> PXC8H17
    qf[139] = k_f[139] * (sc[15]);
    qr[139] =
      k_f[139] * exp(-(g_RT[15] + g_RT_qss[9] - g_RT_qss[11])) * (refC) * (1.0);
  }

  {
    // reaction 210: C9H18 + H <=> C2H4 + PXC7H15
    qf[140] = k_f[140] * (sc[1] * sc[28]);
    qr[140] = k_f[140] * exp(-(g_RT[1] - g_RT[15] + g_RT[28] - g_RT_qss[10])) *
              (sc[15]);
  }

  {
    // reaction 211: C9H18 + H <=> C3H6 + PXC6H13
    qf[141] = k_f[141] * (sc[1] * sc[28]);
    qr[141] =
      k_f[141] * exp(-(g_RT[1] - g_RT[19] + g_RT[28] - g_RT_qss[9])) * (sc[19]);
  }

  {
    // reaction 212: C2H4 + PXC7H15 <=> PXC9H19
    qf[142] = k_f[142] * (sc[15]);
    qr[142] =
      k_f[142] * exp(-(g_RT[15] - g_RT[29] + g_RT_qss[10])) * (refC) * (sc[29]);
  }

  {
    // reaction 213: C10H20 + H <=> C2H4 + PXC8H17
    qf[143] = k_f[143] * (sc[1] * sc[30]);
    qr[143] = k_f[143] * exp(-(g_RT[1] - g_RT[15] + g_RT[30] - g_RT_qss[11])) *
              (sc[15]);
  }

  {
    // reaction 214: C10H20 + H <=> C3H6 + PXC7H15
    qf[144] = k_f[144] * (sc[1] * sc[30]);
    qr[144] = k_f[144] * exp(-(g_RT[1] - g_RT[19] + g_RT[30] - g_RT_qss[10])) *
              (sc[19]);
  }

  {
    // reaction 215: C2H4 + PXC8H17 <=> PXC10H21
    qf[145] = k_f[145] * (sc[15]);
    qr[145] = k_f[145] * exp(-(g_RT[15] + g_RT_qss[11] - g_RT_qss[12])) *
              (refC) * (1.0);
  }

  {
    // reaction 216: C12H24 <=> C5H9 + PXC7H15
    qf[146] = k_f[146] * (sc[31]);
    qr[146] = k_f[146] * exp(-(-g_RT[23] + g_RT[31] - g_RT_qss[10])) *
              (refCinv) * (sc[23]);
  }

  {
    // reaction 217: C2H4 + PXC10H21 <=> PXC12H25
    qf[147] = k_f[147] * (sc[15]);
    qr[147] = k_f[147] * exp(-(g_RT[15] + g_RT_qss[12] - g_RT_qss[13])) *
              (refC) * (1.0);
  }

  {
    // reaction 218: PXC12H25 <=> S3XC12H25
    qf[148] = k_f[148] * (1.0);
    qr[148] = k_f[148] * exp(-(g_RT_qss[13] - g_RT_qss[15])) * (1.0);
  }

  {
    // reaction 219: C3H6 + PXC9H19 <=> SXC12H25
    qf[149] = k_f[149] * (sc[19] * sc[29]);
    qr[149] =
      k_f[149] * exp(-(g_RT[19] + g_RT[29] - g_RT_qss[14])) * (refC) * (1.0);
  }

  {
    // reaction 220: C4H81 + PXC8H17 <=> SXC12H25
    qf[150] = k_f[150] * (sc[22]);
    qr[150] = k_f[150] * exp(-(g_RT[22] + g_RT_qss[11] - g_RT_qss[14])) *
              (refC) * (1.0);
  }

  {
    // reaction 221: C5H10 + PXC7H15 <=> S3XC12H25
    qf[151] = k_f[151] * (sc[24]);
    qr[151] = k_f[151] * exp(-(g_RT[24] + g_RT_qss[10] - g_RT_qss[15])) *
              (refC) * (1.0);
  }

  {
    // reaction 222: C10H20 + C2H5 <=> S3XC12H25
    qf[152] = k_f[152] * (sc[30]);
    qr[152] =
      k_f[152] * exp(-(g_RT[30] + g_RT_qss[5] - g_RT_qss[15])) * (refC) * (1.0);
  }

  {
    // reaction 223: C6H12 + PXC6H13 <=> S3XC12H25
    qf[153] = k_f[153] * (sc[25]);
    qr[153] =
      k_f[153] * exp(-(g_RT[25] + g_RT_qss[9] - g_RT_qss[15])) * (refC) * (1.0);
  }

  {
    // reaction 224: C9H18 + nC3H7 <=> S3XC12H25
    qf[154] = k_f[154] * (sc[28]);
    qr[154] =
      k_f[154] * exp(-(g_RT[28] + g_RT_qss[6] - g_RT_qss[15])) * (refC) * (1.0);
  }

  {
    // reaction 225: C7H14 + PXC5H11 <=> S3XC12H25
    qf[155] = k_f[155] * (sc[26]);
    qr[155] =
      k_f[155] * exp(-(g_RT[26] + g_RT_qss[8] - g_RT_qss[15])) * (refC) * (1.0);
  }

  {
    // reaction 226: C8H16 + pC4H9 <=> S3XC12H25
    qf[156] = k_f[156] * (sc[27]);
    qr[156] =
      k_f[156] * exp(-(g_RT[27] + g_RT_qss[7] - g_RT_qss[15])) * (refC) * (1.0);
  }

  {
    // reaction 227: C2H5 + PXC10H21 <=> NC12H26
    // Remove forward reaction
    // qf[157] = k_f[157] * (1.0);
    qf[157] = 0.0;
    qr[157] = k_f[157] * exp(-(-g_RT[0] + g_RT_qss[5] + g_RT_qss[12])) *
              (refC) * (sc[0]);
  }

  {
    // reaction 228: PXC9H19 + nC3H7 <=> NC12H26
    qf[158] = k_f[158] * (sc[29]);
    qr[158] =
      k_f[158] * exp(-(-g_RT[0] + g_RT[29] + g_RT_qss[6])) * (refC) * (sc[0]);
  }

  {
    // reaction 229: PXC8H17 + pC4H9 <=> NC12H26
    // Remove forward reaction
    // qf[159] = k_f[159] * (1.0);
    qf[159] = 0.0;
    qr[159] = k_f[159] * exp(-(-g_RT[0] + g_RT_qss[7] + g_RT_qss[11])) *
              (refC) * (sc[0]);
  }

  {
    // reaction 230: PXC5H11 + PXC7H15 <=> NC12H26
    // Remove forward reaction
    // qf[160] = k_f[160] * (1.0);
    qf[160] = 0.0;
    qr[160] = k_f[160] * exp(-(-g_RT[0] + g_RT_qss[8] + g_RT_qss[10])) *
              (refC) * (sc[0]);
  }

  {
    // reaction 231: 2 PXC6H13 <=> NC12H26
    // Remove forward reaction
    // qf[161] = k_f[161] * (1.0);
    qf[161] = 0.0;
    qr[161] =
      k_f[161] * exp(-(-g_RT[0] + 2.000000 * g_RT_qss[9])) * (refC) * (sc[0]);
  }

  {
    // reaction 232: H + NC12H26 <=> H2 + PXC12H25
    qf[162] = k_f[162] * (sc[0] * sc[1]);
    qr[162] =
      k_f[162] * exp(-(g_RT[0] + g_RT[1] - g_RT[5] - g_RT_qss[13])) * (sc[5]);
  }

  {
    // reaction 233: H + NC12H26 <=> H2 + SXC12H25
    qf[163] = k_f[163] * (sc[0] * sc[1]);
    qr[163] =
      k_f[163] * exp(-(g_RT[0] + g_RT[1] - g_RT[5] - g_RT_qss[14])) * (sc[5]);
  }

  {
    // reaction 234: H + NC12H26 <=> H2 + S3XC12H25
    qf[164] = k_f[164] * (sc[0] * sc[1]);
    qr[164] =
      k_f[164] * exp(-(g_RT[0] + g_RT[1] - g_RT[5] - g_RT_qss[15])) * (sc[5]);
  }

  {
    // reaction 235: NC12H26 + O <=> OH + PXC12H25
    qf[165] = k_f[165] * (sc[0] * sc[2]);
    qr[165] =
      k_f[165] * exp(-(g_RT[0] + g_RT[2] - g_RT[3] - g_RT_qss[13])) * (sc[3]);
  }

  {
    // reaction 236: NC12H26 + O <=> OH + SXC12H25
    qf[166] = k_f[166] * (sc[0] * sc[2]);
    qr[166] =
      k_f[166] * exp(-(g_RT[0] + g_RT[2] - g_RT[3] - g_RT_qss[14])) * (sc[3]);
  }

  {
    // reaction 237: NC12H26 + O <=> OH + S3XC12H25
    qf[167] = k_f[167] * (sc[0] * sc[2]);
    qr[167] =
      k_f[167] * exp(-(g_RT[0] + g_RT[2] - g_RT[3] - g_RT_qss[15])) * (sc[3]);
  }

  {
    // reaction 238: NC12H26 + OH <=> H2O + PXC12H25
    qf[168] = k_f[168] * (sc[0] * sc[3]);
    qr[168] =
      k_f[168] * exp(-(g_RT[0] + g_RT[3] - g_RT[6] - g_RT_qss[13])) * (sc[6]);
  }

  {
    // reaction 239: NC12H26 + OH <=> H2O + SXC12H25
    qf[169] = k_f[169] * (sc[0] * sc[3]);
    qr[169] =
      k_f[169] * exp(-(g_RT[0] + g_RT[3] - g_RT[6] - g_RT_qss[14])) * (sc[6]);
  }

  {
    // reaction 240: NC12H26 + OH <=> H2O + S3XC12H25
    qf[170] = k_f[170] * (sc[0] * sc[3]);
    qr[170] =
      k_f[170] * exp(-(g_RT[0] + g_RT[3] - g_RT[6] - g_RT_qss[15])) * (sc[6]);
  }

  {
    // reaction 241: NC12H26 + O2 <=> HO2 + PXC12H25
    qf[171] = k_f[171] * (sc[0] * sc[8]);
    qr[171] =
      k_f[171] * exp(-(g_RT[0] - g_RT[4] + g_RT[8] - g_RT_qss[13])) * (sc[4]);
  }

  {
    // reaction 242: NC12H26 + O2 <=> HO2 + SXC12H25
    qf[172] = k_f[172] * (sc[0] * sc[8]);
    qr[172] =
      k_f[172] * exp(-(g_RT[0] - g_RT[4] + g_RT[8] - g_RT_qss[14])) * (sc[4]);
  }

  {
    // reaction 243: NC12H26 + O2 <=> HO2 + S3XC12H25
    qf[173] = k_f[173] * (sc[0] * sc[8]);
    qr[173] =
      k_f[173] * exp(-(g_RT[0] - g_RT[4] + g_RT[8] - g_RT_qss[15])) * (sc[4]);
  }

  {
    // reaction 244: HO2 + NC12H26 <=> H2O2 + PXC12H25
    qf[174] = k_f[174] * (sc[0] * sc[4]);
    qr[174] =
      k_f[174] * exp(-(g_RT[0] + g_RT[4] - g_RT[7] - g_RT_qss[13])) * (sc[7]);
  }

  {
    // reaction 245: HO2 + NC12H26 <=> H2O2 + SXC12H25
    qf[175] = k_f[175] * (sc[0] * sc[4]);
    qr[175] =
      k_f[175] * exp(-(g_RT[0] + g_RT[4] - g_RT[7] - g_RT_qss[14])) * (sc[7]);
  }

  {
    // reaction 246: HO2 + NC12H26 <=> H2O2 + S3XC12H25
    qf[176] = k_f[176] * (sc[0] * sc[4]);
    qr[176] =
      k_f[176] * exp(-(g_RT[0] + g_RT[4] - g_RT[7] - g_RT_qss[15])) * (sc[7]);
  }

  {
    // reaction 247: CH3 + NC12H26 <=> CH4 + PXC12H25
    qf[177] = k_f[177] * (sc[0] * sc[9]);
    qr[177] =
      k_f[177] * exp(-(g_RT[0] + g_RT[9] - g_RT[10] - g_RT_qss[13])) * (sc[10]);
  }

  {
    // reaction 248: CH3 + NC12H26 <=> CH4 + SXC12H25
    qf[178] = k_f[178] * (sc[0] * sc[9]);
    qr[178] =
      k_f[178] * exp(-(g_RT[0] + g_RT[9] - g_RT[10] - g_RT_qss[14])) * (sc[10]);
  }

  {
    // reaction 249: CH3 + NC12H26 <=> CH4 + S3XC12H25
    qf[179] = k_f[179] * (sc[0] * sc[9]);
    qr[179] =
      k_f[179] * exp(-(g_RT[0] + g_RT[9] - g_RT[10] - g_RT_qss[15])) * (sc[10]);
  }

  {
    // reaction 250: O2 + PXC12H25 => C12H25O2
    qf[180] = k_f[180] * (sc[8]);
    qr[180] =
      k_f[180] * exp(-(g_RT[8] - g_RT[32] + g_RT_qss[13])) * (refC) * (0.0);
  }

  {
    // reaction 251: C12H25O2 => O2 + PXC12H25
    qf[181] = k_f[181] * (sc[32]);
    qr[181] =
      k_f[181] * exp(-(-g_RT[8] + g_RT[32] - g_RT_qss[13])) * (refCinv) * (0.0);
  }

  {
    // reaction 252: O2 + SXC12H25 => C12H25O2
    qf[182] = k_f[182] * (sc[8]);
    qr[182] =
      k_f[182] * exp(-(g_RT[8] - g_RT[32] + g_RT_qss[14])) * (refC) * (0.0);
  }

  {
    // reaction 253: C12H25O2 => O2 + SXC12H25
    qf[183] = k_f[183] * (sc[32]);
    qr[183] =
      k_f[183] * exp(-(-g_RT[8] + g_RT[32] - g_RT_qss[14])) * (refCinv) * (0.0);
  }

  {
    // reaction 254: O2 + S3XC12H25 => C12H25O2
    qf[184] = k_f[184] * (sc[8]);
    qr[184] =
      k_f[184] * exp(-(g_RT[8] - g_RT[32] + g_RT_qss[15])) * (refC) * (0.0);
  }

  {
    // reaction 255: C12H25O2 => O2 + S3XC12H25
    qf[185] = k_f[185] * (sc[32]);
    qr[185] =
      k_f[185] * exp(-(-g_RT[8] + g_RT[32] - g_RT_qss[15])) * (refCinv) * (0.0);
  }

  {
    // reaction 256: C12H25O2 => C12OOH
    qf[186] = k_f[186] * (sc[32]);
    qr[186] = k_f[186] * exp(-(g_RT[32] - g_RT_qss[16])) * (0.0);
  }

  {
    // reaction 257: C12OOH => C12H25O2
    qf[187] = k_f[187] * (1.0);
    qr[187] = k_f[187] * exp(-(-g_RT[32] + g_RT_qss[16])) * (0.0);
  }

  {
    // reaction 258: O2 + PXC12H25 => C12H24 + HO2
    qf[188] = k_f[188] * (sc[8]);
    qr[188] =
      k_f[188] * exp(-(-g_RT[4] + g_RT[8] - g_RT[31] + g_RT_qss[13])) * (0.0);
  }

  {
    // reaction 259: C12H24 + HO2 => O2 + PXC12H25
    qf[189] = k_f[189] * (sc[4] * sc[31]);
    qr[189] =
      k_f[189] * exp(-(g_RT[4] - g_RT[8] + g_RT[31] - g_RT_qss[13])) * (0.0);
  }

  {
    // reaction 260: O2 + SXC12H25 => C12H24 + HO2
    qf[190] = k_f[190] * (sc[8]);
    qr[190] =
      k_f[190] * exp(-(-g_RT[4] + g_RT[8] - g_RT[31] + g_RT_qss[14])) * (0.0);
  }

  {
    // reaction 261: C12H24 + HO2 => O2 + SXC12H25
    qf[191] = k_f[191] * (sc[4] * sc[31]);
    qr[191] =
      k_f[191] * exp(-(g_RT[4] - g_RT[8] + g_RT[31] - g_RT_qss[14])) * (0.0);
  }

  {
    // reaction 262: O2 + S3XC12H25 => C12H24 + HO2
    qf[192] = k_f[192] * (sc[8]);
    qr[192] =
      k_f[192] * exp(-(-g_RT[4] + g_RT[8] - g_RT[31] + g_RT_qss[15])) * (0.0);
  }

  {
    // reaction 263: C12H24 + HO2 => O2 + S3XC12H25
    qf[193] = k_f[193] * (sc[4] * sc[31]);
    qr[193] =
      k_f[193] * exp(-(g_RT[4] - g_RT[8] + g_RT[31] - g_RT_qss[15])) * (0.0);
  }

  {
    // reaction 264: C12OOH + O2 => O2C12H24OOH
    qf[194] = k_f[194] * (sc[8]);
    qr[194] =
      k_f[194] * exp(-(g_RT[8] + g_RT_qss[16] - g_RT_qss[17])) * (refC) * (0.0);
  }

  {
    // reaction 265: O2C12H24OOH => C12OOH + O2
    qf[195] = k_f[195] * (1.0);
    qr[195] = k_f[195] * exp(-(-g_RT[8] - g_RT_qss[16] + g_RT_qss[17])) *
              (refCinv) * (0.0);
  }

  {
    // reaction 266: O2C12H24OOH <=> OC12H23OOH + OH
    qf[196] = k_f[196] * (1.0);
    qr[196] = k_f[196] * exp(-(-g_RT[3] - g_RT[33] + g_RT_qss[17])) *
              (refCinv) * (sc[3] * sc[33]);
  }

  {
    // reaction 267: OC12H23OOH => 3 C2H4 + C2H5 + 2 CH2CHO + OH
    qf[197] = k_f[197] * (sc[33]);
    qr[197] = k_f[197] *
              exp(
                -(-g_RT[3] - 3.000000 * g_RT[15] - 2.000000 * g_RT[17] +
                  g_RT[33] - g_RT_qss[5])) *
              (pow(refCinv, 6.000000)) * (0.0);
  }

  return;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_sc_qss(amrex::Real* sc_qss, amrex::Real* qf_co, amrex::Real* qr_co)
{
  amrex::Real epsilon = 1e-12;

  // QSSA coupling between CH3O  SXC12H25  PXC7H15  PXC5H11  S3XC12H25  PXC12H25
  // PXC10H21  PXC8H17  PXC6H13  pC4H9  nC3H7  C2H5  C2H3  HCO  CH2*  CH2 QSSA
  // species 3: CH3O

  amrex::Real CH3O_num = epsilon + 1.0 * qf_co[2] + 1.0 * qf_co[48] +
                         1.0 * qf_co[49] + 1.0 * qr_co[55] + 1.0 * qr_co[56] +
                         1.0 * qr_co[58] + 1.0 * qr_co[59] + 1.0 * qr_co[60];
  amrex::Real CH3O_denom = epsilon - qr_co[2] - qr_co[48] - qr_co[49] -
                           qf_co[55] - qf_co[56] - qf_co[57] - qf_co[58] -
                           qf_co[59] - qf_co[60];
  amrex::Real CH3O_rhs = -CH3O_num / CH3O_denom;

  amrex::Real CH3O_CH2D = (epsilon + 1.0 * qr_co[57]) / CH3O_denom;

  // QSSA species 14: SXC12H25

  amrex::Real SXC12H25_num =
    epsilon + 1.0 * qf_co[149] + 1.0 * qf_co[163] + 1.0 * qf_co[166] +
    1.0 * qf_co[169] + 1.0 * qf_co[172] + 1.0 * qf_co[175] + 1.0 * qf_co[178] +
    1.0 * qf_co[183] + 1.0 * qf_co[191];
  amrex::Real SXC12H25_denom =
    epsilon - qr_co[149] - qr_co[150] - qr_co[163] - qr_co[166] - qr_co[169] -
    qr_co[172] - qr_co[175] - qr_co[178] - qf_co[182] - qf_co[190];
  amrex::Real SXC12H25_rhs = -SXC12H25_num / SXC12H25_denom;

  amrex::Real SXC12H25_PXC8H17 = (epsilon + 1.0 * qf_co[150]) / SXC12H25_denom;

  // QSSA species 10: PXC7H15

  amrex::Real PXC7H15_num = epsilon + 1.0 * qf_co[13] + 1.0 * qf_co[140] +
                            1.0 * qr_co[142] + 1.0 * qf_co[144] +
                            1.0 * qf_co[146] + 1.0 * qr_co[160];
  amrex::Real PXC7H15_denom = epsilon - qr_co[13] - qr_co[136] - qr_co[140] -
                              qf_co[142] - qr_co[144] - qr_co[146] - qf_co[151];
  amrex::Real PXC7H15_rhs = -PXC7H15_num / PXC7H15_denom;

  amrex::Real PXC7H15_PXC5H11 = (epsilon + 1.0 * qf_co[136]) / PXC7H15_denom;
  amrex::Real PXC7H15_S3XC12H25 = (epsilon + 1.0 * qr_co[151]) / PXC7H15_denom;

  // QSSA species 8: PXC5H11

  amrex::Real PXC5H11_num = epsilon + 1.0 * qf_co[11] + 1.0 * qf_co[134] +
                            1.0 * qf_co[138] + 1.0 * qr_co[160];
  amrex::Real PXC5H11_denom = epsilon - qr_co[11] - qr_co[130] - qr_co[134] -
                              qf_co[136] - qr_co[138] - qf_co[155];
  amrex::Real PXC5H11_rhs = -PXC5H11_num / PXC5H11_denom;

  amrex::Real PXC5H11_PXC7H15 = (epsilon + 1.0 * qr_co[136]) / PXC5H11_denom;
  amrex::Real PXC5H11_S3XC12H25 = (epsilon + 1.0 * qr_co[155]) / PXC5H11_denom;
  amrex::Real PXC5H11_nC3H7 = (epsilon + 1.0 * qf_co[130]) / PXC5H11_denom;

  // QSSA species 15: S3XC12H25

  amrex::Real S3XC12H25_num = epsilon + 1.0 * qf_co[164] + 1.0 * qf_co[167] +
                              1.0 * qf_co[170] + 1.0 * qf_co[173] +
                              1.0 * qf_co[176] + 1.0 * qf_co[179] +
                              1.0 * qf_co[185] + 1.0 * qf_co[193];
  amrex::Real S3XC12H25_denom =
    epsilon - qr_co[148] - qr_co[151] - qr_co[152] - qr_co[153] - qr_co[154] -
    qr_co[155] - qr_co[156] - qr_co[164] - qr_co[167] - qr_co[170] -
    qr_co[173] - qr_co[176] - qr_co[179] - qf_co[184] - qf_co[192];
  amrex::Real S3XC12H25_rhs = -S3XC12H25_num / S3XC12H25_denom;

  amrex::Real S3XC12H25_PXC7H15 =
    (epsilon + 1.0 * qf_co[151]) / S3XC12H25_denom;
  amrex::Real S3XC12H25_PXC5H11 =
    (epsilon + 1.0 * qf_co[155]) / S3XC12H25_denom;
  amrex::Real S3XC12H25_PXC12H25 =
    (epsilon + 1.0 * qf_co[148]) / S3XC12H25_denom;
  amrex::Real S3XC12H25_PXC6H13 =
    (epsilon + 1.0 * qf_co[153]) / S3XC12H25_denom;
  amrex::Real S3XC12H25_pC4H9 = (epsilon + 1.0 * qf_co[156]) / S3XC12H25_denom;
  amrex::Real S3XC12H25_nC3H7 = (epsilon + 1.0 * qf_co[154]) / S3XC12H25_denom;
  amrex::Real S3XC12H25_C2H5 = (epsilon + 1.0 * qf_co[152]) / S3XC12H25_denom;

  // QSSA species 13: PXC12H25

  amrex::Real PXC12H25_num = epsilon + 1.0 * qf_co[162] + 1.0 * qf_co[165] +
                             1.0 * qf_co[168] + 1.0 * qf_co[171] +
                             1.0 * qf_co[174] + 1.0 * qf_co[177] +
                             1.0 * qf_co[181] + 1.0 * qf_co[189];
  amrex::Real PXC12H25_denom =
    epsilon - qr_co[147] - qf_co[148] - qr_co[162] - qr_co[165] - qr_co[168] -
    qr_co[171] - qr_co[174] - qr_co[177] - qf_co[180] - qf_co[188];
  amrex::Real PXC12H25_rhs = -PXC12H25_num / PXC12H25_denom;

  amrex::Real PXC12H25_S3XC12H25 =
    (epsilon + 1.0 * qr_co[148]) / PXC12H25_denom;
  amrex::Real PXC12H25_PXC10H21 = (epsilon + 1.0 * qf_co[147]) / PXC12H25_denom;

  // QSSA species 12: PXC10H21

  amrex::Real PXC10H21_num = epsilon + 1.0 * qf_co[15] + 1.0 * qr_co[157];
  amrex::Real PXC10H21_denom = epsilon - qr_co[15] - qr_co[145] - qf_co[147];
  amrex::Real PXC10H21_rhs = -PXC10H21_num / PXC10H21_denom;

  amrex::Real PXC10H21_PXC12H25 = (epsilon + 1.0 * qr_co[147]) / PXC10H21_denom;
  amrex::Real PXC10H21_PXC8H17 = (epsilon + 1.0 * qf_co[145]) / PXC10H21_denom;

  // QSSA species 11: PXC8H17

  amrex::Real PXC8H17_num =
    epsilon + 1.0 * qf_co[14] + 1.0 * qf_co[143] + 1.0 * qr_co[159];
  amrex::Real PXC8H17_denom =
    epsilon - qr_co[14] - qr_co[139] - qr_co[143] - qf_co[145] - qf_co[150];
  amrex::Real PXC8H17_rhs = -PXC8H17_num / PXC8H17_denom;

  amrex::Real PXC8H17_SXC12H25 = (epsilon + 1.0 * qr_co[150]) / PXC8H17_denom;
  amrex::Real PXC8H17_PXC10H21 = (epsilon + 1.0 * qr_co[145]) / PXC8H17_denom;
  amrex::Real PXC8H17_PXC6H13 = (epsilon + 1.0 * qf_co[139]) / PXC8H17_denom;

  // QSSA species 9: PXC6H13

  amrex::Real PXC6H13_num = epsilon + 1.0 * qf_co[12] + 1.0 * qf_co[137] +
                            1.0 * qf_co[141] + 2.0 * qr_co[161];
  amrex::Real PXC6H13_denom = epsilon - qr_co[12] - qr_co[133] - qr_co[137] -
                              qf_co[139] - qr_co[141] - qf_co[153] - qf_co[161];
  amrex::Real PXC6H13_rhs = -PXC6H13_num / PXC6H13_denom;

  amrex::Real PXC6H13_S3XC12H25 = (epsilon + 1.0 * qr_co[153]) / PXC6H13_denom;
  amrex::Real PXC6H13_PXC8H17 = (epsilon + 1.0 * qr_co[139]) / PXC6H13_denom;
  amrex::Real PXC6H13_pC4H9 = (epsilon + 1.0 * qf_co[133]) / PXC6H13_denom;

  // QSSA species 7: pC4H9

  amrex::Real pC4H9_num = epsilon + 1.0 * qf_co[10] + 1.0 * qr_co[121] +
                          1.0 * qr_co[123] + 1.0 * qr_co[124] +
                          1.0 * qr_co[126] + 1.0 * qf_co[131] +
                          1.0 * qf_co[135] + 1.0 * qr_co[159];
  amrex::Real pC4H9_denom = epsilon - qr_co[10] - qf_co[120] - qf_co[121] -
                            qf_co[122] - qf_co[123] - qf_co[124] - qf_co[125] -
                            qf_co[126] - qr_co[131] - qf_co[133] - qr_co[135] -
                            qf_co[156];
  amrex::Real pC4H9_rhs = -pC4H9_num / pC4H9_denom;

  amrex::Real pC4H9_S3XC12H25 = (epsilon + 1.0 * qr_co[156]) / pC4H9_denom;
  amrex::Real pC4H9_PXC6H13 = (epsilon + 1.0 * qr_co[133]) / pC4H9_denom;
  amrex::Real pC4H9_nC3H7 =
    (epsilon + 1.0 * qr_co[122] + 1.0 * qr_co[125]) / pC4H9_denom;

  // QSSA species 6: nC3H7

  amrex::Real nC3H7_num =
    epsilon + 1.0 * qf_co[9] + 1.0 * qr_co[88] + 1.0 * qr_co[111] +
    1.0 * qr_co[113] + 1.0 * qr_co[114] + 1.0 * qr_co[116] + 1.0 * qf_co[128] +
    1.0 * qf_co[132] + 1.0 * qr_co[158];
  amrex::Real nC3H7_denom =
    epsilon - qr_co[9] - qf_co[88] - qf_co[110] - qf_co[111] - qf_co[112] -
    qf_co[113] - qf_co[114] - qf_co[115] - qf_co[116] - qr_co[122] -
    qr_co[125] - qr_co[128] - qf_co[130] - qr_co[132] - qf_co[154] - qf_co[158];
  amrex::Real nC3H7_rhs = -nC3H7_num / nC3H7_denom;

  amrex::Real nC3H7_PXC5H11 = (epsilon + 1.0 * qr_co[130]) / nC3H7_denom;
  amrex::Real nC3H7_S3XC12H25 = (epsilon + 1.0 * qr_co[154]) / nC3H7_denom;
  amrex::Real nC3H7_pC4H9 =
    (epsilon + 1.0 * qf_co[122] + 1.0 * qf_co[125]) / nC3H7_denom;
  amrex::Real nC3H7_C2H5 =
    (epsilon + 1.0 * qr_co[110] + 1.0 * qr_co[112] + 1.0 * qr_co[115]) /
    nC3H7_denom;

  // QSSA species 5: C2H5

  amrex::Real C2H5_num =
    epsilon + 1.0 * qf_co[6] + 1.0 * qr_co[7] + 1.0 * qr_co[8] +
    1.0 * qf_co[54] + 1.0 * qr_co[91] + 1.0 * qr_co[92] + 1.0 * qr_co[93] +
    1.0 * qr_co[94] + 1.0 * qr_co[95] + 1.0 * qr_co[96] + 1.0 * qr_co[97] +
    1.0 * qr_co[98] + 1.0 * qf_co[99] + 1.0 * qf_co[100] + 1.0 * qf_co[101] +
    1.0 * qf_co[103] + 1.0 * qf_co[118] + 1.0 * qf_co[129] + 1.0 * qr_co[157] +
    1.0 * qf_co[197];
  amrex::Real C2H5_denom =
    epsilon - qr_co[6] - qf_co[7] - qr_co[54] - qr_co[84] - qf_co[91] -
    qf_co[92] - qf_co[93] - qf_co[94] - qf_co[95] - qf_co[96] - qf_co[97] -
    qr_co[99] - qr_co[100] - qr_co[101] - qr_co[102] - qr_co[103] - qr_co[110] -
    qr_co[112] - qr_co[115] - qr_co[118] - qr_co[129] - qf_co[152];
  amrex::Real C2H5_rhs = -C2H5_num / C2H5_denom;

  amrex::Real C2H5_S3XC12H25 = (epsilon + 1.0 * qr_co[152]) / C2H5_denom;
  amrex::Real C2H5_pC4H9 = (epsilon + 2.0 * qf_co[120]) / C2H5_denom;
  amrex::Real C2H5_nC3H7 =
    (epsilon + 1.0 * qf_co[110] + 1.0 * qf_co[112] + 1.0 * qf_co[115]) /
    C2H5_denom;
  amrex::Real C2H5_HCO = (epsilon + 1.0 * qf_co[84]) / C2H5_denom;
  amrex::Real C2H5_CH2D = (epsilon + 1.0 * qf_co[102]) / C2H5_denom;

  // QSSA species 4: C2H3

  amrex::Real C2H3_num =
    epsilon + 1.0 * qr_co[3] + 1.0 * qr_co[4] + 1.0 * qr_co[5] +
    1.0 * qr_co[8] + 1.0 * qr_co[65] + 1.0 * qr_co[66] + 1.0 * qr_co[67] +
    1.0 * qr_co[68] + 1.0 * qr_co[69] + 1.0 * qr_co[71] + 1.0 * qr_co[72] +
    1.0 * qr_co[73] + 1.0 * qr_co[74] + 1.0 * qr_co[75] + 1.0 * qr_co[76] +
    2.0 * qr_co[77] + 1.0 * qf_co[79] + 1.0 * qf_co[80] + 1.0 * qf_co[83] +
    1.0 * qf_co[87] + 1.0 * qf_co[89] + 1.0 * qr_co[90] + 1.0 * qr_co[98] +
    1.0 * qf_co[104] + 1.0 * qf_co[108] + 1.0 * qf_co[109] + 1.0 * qf_co[127];
  amrex::Real C2H3_denom =
    epsilon - qf_co[3] - qf_co[4] - qf_co[5] - qr_co[64] - qf_co[65] -
    qf_co[66] - qf_co[67] - qf_co[68] - qf_co[69] - qf_co[70] - qf_co[71] -
    qf_co[72] - qf_co[75] - qf_co[76] - qf_co[77] - qr_co[79] - qr_co[80] -
    qr_co[83] - qr_co[87] - qr_co[89] - qf_co[90] - qr_co[104] - qr_co[108] -
    qr_co[109];
  amrex::Real C2H3_rhs = -C2H3_num / C2H3_denom;

  amrex::Real C2H3_HCO =
    (epsilon + 1.0 * qf_co[64] + 1.0 * qr_co[70]) / C2H3_denom;

  // QSSA species 2: HCO

  amrex::Real HCO_num =
    epsilon + 1.0 * qr_co[0] + 1.0 * qr_co[16] + 1.0 * qr_co[17] +
    1.0 * qr_co[18] + 1.0 * qr_co[19] + 1.0 * qr_co[20] + 1.0 * qr_co[21] +
    1.0 * qr_co[22] + 1.0 * qf_co[41] + 1.0 * qf_co[42] + 1.0 * qf_co[43] +
    1.0 * qf_co[44] + 1.0 * qf_co[45] + 1.0 * qr_co[50] + 1.0 * qf_co[51] +
    1.0 * qr_co[73] + 1.0 * qr_co[74] + 1.0 * qf_co[78] + 1.0 * qf_co[81] +
    1.0 * qr_co[105] + 1.0 * qf_co[107] + 1.0 * qr_co[117];
  amrex::Real HCO_denom =
    epsilon - qf_co[0] - qf_co[16] - qf_co[17] - qf_co[18] - qf_co[19] -
    qf_co[20] - qf_co[21] - qf_co[22] - qr_co[23] - qr_co[26] - qr_co[32] -
    qr_co[41] - qr_co[42] - qr_co[43] - qr_co[44] - qr_co[45] - qf_co[50] -
    qr_co[51] - qf_co[64] - qr_co[70] - qr_co[78] - qr_co[81] - qf_co[84] -
    qf_co[105] - qr_co[107] - qf_co[117];
  amrex::Real HCO_rhs = -HCO_num / HCO_denom;

  amrex::Real HCO_C2H5 = (epsilon + 1.0 * qr_co[84]) / HCO_denom;
  amrex::Real HCO_C2H3 =
    (epsilon + 1.0 * qr_co[64] + 1.0 * qf_co[70]) / HCO_denom;
  amrex::Real HCO_CH2D = (epsilon + 1.0 * qf_co[32]) / HCO_denom;
  amrex::Real HCO_CH2 =
    (epsilon + 1.0 * qf_co[23] + 1.0 * qf_co[26]) / HCO_denom;

  // QSSA species 1: CH2*

  amrex::Real CH2D_num = epsilon + 1.0 * qr_co[31] + 1.0 * qr_co[33] +
                         1.0 * qr_co[34] + 1.0 * qr_co[35] + 1.0 * qr_co[36] +
                         1.0 * qr_co[40] + 1.0 * qf_co[47] + 1.0 * qr_co[53] +
                         1.0 * qr_co[62] + 1.0 * qr_co[86];
  amrex::Real CH2D_denom =
    epsilon - qf_co[30] - qf_co[31] - qf_co[32] - qf_co[33] - qf_co[34] -
    qf_co[35] - qf_co[36] - qf_co[37] - qf_co[38] - qf_co[39] - qf_co[40] -
    qr_co[47] - qf_co[53] - qr_co[57] - qf_co[62] - qf_co[86] - qf_co[102];
  amrex::Real CH2D_rhs = -CH2D_num / CH2D_denom;

  amrex::Real CH2D_CH3O = (epsilon + 1.0 * qf_co[57]) / CH2D_denom;
  amrex::Real CH2D_C2H5 = (epsilon + 1.0 * qr_co[102]) / CH2D_denom;
  amrex::Real CH2D_HCO = (epsilon + 1.0 * qr_co[32]) / CH2D_denom;
  amrex::Real CH2D_CH2 = (epsilon + 1.0 * qr_co[30] + 1.0 * qr_co[37] +
                          1.0 * qr_co[38] + 1.0 * qr_co[39]) /
                         CH2D_denom;

  // QSSA species 0: CH2

  amrex::Real CH2_num = epsilon + 1.0 * qr_co[1] + 1.0 * qr_co[24] +
                        1.0 * qr_co[25] + 1.0 * qr_co[27] + 1.0 * qr_co[28] +
                        2.0 * qr_co[29] + 1.0 * qf_co[46] + 1.0 * qr_co[52] +
                        1.0 * qr_co[61] + 1.0 * qf_co[63] + 1.0 * qf_co[82] +
                        1.0 * qr_co[85];
  amrex::Real CH2_denom = epsilon - qf_co[1] - qf_co[23] - qf_co[24] -
                          qf_co[25] - qf_co[26] - qf_co[27] - qf_co[28] -
                          qf_co[29] - qr_co[30] - qr_co[37] - qr_co[38] -
                          qr_co[39] - qr_co[46] - qf_co[52] - qf_co[61] -
                          qr_co[63] - qr_co[82] - qf_co[85];
  amrex::Real CH2_rhs = -CH2_num / CH2_denom;

  amrex::Real CH2_HCO =
    (epsilon + 1.0 * qr_co[23] + 1.0 * qr_co[26]) / CH2_denom;
  amrex::Real CH2_CH2D = (epsilon + 1.0 * qf_co[30] + 1.0 * qf_co[37] +
                          1.0 * qf_co[38] + 1.0 * qf_co[39]) /
                         CH2_denom;

  // Putting it all together
  amrex::Real H_0 = CH2D_CH3O;
  amrex::Real H_1 = PXC8H17_SXC12H25;
  amrex::Real H_2 = PXC5H11_PXC7H15;
  amrex::Real H_3 = S3XC12H25_PXC7H15;
  amrex::Real H_4 =
    (S3XC12H25_PXC5H11 - PXC7H15_PXC5H11 * H_3) / (1 - PXC7H15_PXC5H11 * H_2);
  amrex::Real H_5 = nC3H7_PXC5H11 / (1 - PXC7H15_PXC5H11 * H_2);
  amrex::Real H_6 =
    PXC12H25_S3XC12H25 / ((1 - PXC7H15_S3XC12H25 * H_3) -
                          (PXC5H11_S3XC12H25 - PXC7H15_S3XC12H25 * H_2) * H_4);
  amrex::Real H_7 =
    PXC6H13_S3XC12H25 / ((1 - PXC7H15_S3XC12H25 * H_3) -
                         (PXC5H11_S3XC12H25 - PXC7H15_S3XC12H25 * H_2) * H_4);
  amrex::Real H_8 =
    pC4H9_S3XC12H25 / ((1 - PXC7H15_S3XC12H25 * H_3) -
                       (PXC5H11_S3XC12H25 - PXC7H15_S3XC12H25 * H_2) * H_4);
  amrex::Real H_9 =
    (nC3H7_S3XC12H25 - (PXC5H11_S3XC12H25 - PXC7H15_S3XC12H25 * H_2) * H_5) /
    ((1 - PXC7H15_S3XC12H25 * H_3) -
     (PXC5H11_S3XC12H25 - PXC7H15_S3XC12H25 * H_2) * H_4);
  amrex::Real H_10 =
    C2H5_S3XC12H25 / ((1 - PXC7H15_S3XC12H25 * H_3) -
                      (PXC5H11_S3XC12H25 - PXC7H15_S3XC12H25 * H_2) * H_4);
  amrex::Real H_11 = PXC10H21_PXC12H25 / (1 - S3XC12H25_PXC12H25 * H_6);
  amrex::Real H_12 = PXC8H17_PXC10H21 / (1 - PXC12H25_PXC10H21 * H_11);
  amrex::Real H_13 =
    PXC6H13_PXC8H17 / ((1 - SXC12H25_PXC8H17 * H_1) - PXC10H21_PXC8H17 * H_12);
  amrex::Real H_14 = (pC4H9_PXC6H13 - S3XC12H25_PXC6H13 * H_8) /
                     ((1 - S3XC12H25_PXC6H13 * H_7) - PXC8H17_PXC6H13 * H_13);
  amrex::Real H_15 = (nC3H7_pC4H9 - S3XC12H25_pC4H9 * H_9) /
                     ((1 - S3XC12H25_pC4H9 * H_8) -
                      (PXC6H13_pC4H9 - S3XC12H25_pC4H9 * H_7) * H_14);
  amrex::Real H_16 = (C2H5_pC4H9 - S3XC12H25_pC4H9 * H_10) /
                     ((1 - S3XC12H25_pC4H9 * H_8) -
                      (PXC6H13_pC4H9 - S3XC12H25_pC4H9 * H_7) * H_14);
  amrex::Real H_17 =
    ((C2H5_nC3H7 - (S3XC12H25_nC3H7 - PXC5H11_nC3H7 * H_4) * H_10) -
     (pC4H9_nC3H7 - (S3XC12H25_nC3H7 - PXC5H11_nC3H7 * H_4) * H_8) * H_16) /
    (((1 - PXC5H11_nC3H7 * H_5) -
      (S3XC12H25_nC3H7 - PXC5H11_nC3H7 * H_4) * H_9) -
     (pC4H9_nC3H7 - (S3XC12H25_nC3H7 - PXC5H11_nC3H7 * H_4) * H_8) * H_15);
  amrex::Real H_18 = HCO_C2H5 / ((1 - S3XC12H25_C2H5 * H_10) -
                                 (nC3H7_C2H5 - S3XC12H25_C2H5 * H_9) * H_17);
  amrex::Real H_19 = CH2D_C2H5 / ((1 - S3XC12H25_C2H5 * H_10) -
                                  (nC3H7_C2H5 - S3XC12H25_C2H5 * H_9) * H_17);
  amrex::Real H_20 = HCO_C2H3;
  amrex::Real H_21 =
    (CH2D_HCO - C2H5_HCO * H_19) / ((1 - C2H5_HCO * H_18) - C2H3_HCO * H_20);
  amrex::Real H_22 = CH2_HCO / ((1 - C2H5_HCO * H_18) - C2H3_HCO * H_20);
  amrex::Real H_23 = (CH2_CH2D - (HCO_CH2D - C2H5_CH2D * H_18) * H_22) /
                     (((1 - CH3O_CH2D * H_0) - C2H5_CH2D * H_19) -
                      (HCO_CH2D - C2H5_CH2D * H_18) * H_21);
  sc_qss[0] =
    ((CH2_rhs -
      ((HCO_rhs -
        (((C2H5_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                       (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                        H_10) -
          ((pC4H9_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                         (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                          H_8) -
           ((PXC6H13_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                            (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                             H_7) -
            ((PXC8H17_rhs - SXC12H25_rhs * H_1) -
             (PXC10H21_rhs -
              (PXC12H25_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                               (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                                H_6) *
                H_11) *
               H_12) *
              H_13) *
             H_14) *
            H_16) -
         (((nC3H7_rhs - (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_5) -
           ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
            (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
             H_9) -
          ((pC4H9_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                         (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                          H_8) -
           ((PXC6H13_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                            (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                             H_7) -
            ((PXC8H17_rhs - SXC12H25_rhs * H_1) -
             (PXC10H21_rhs -
              (PXC12H25_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                               (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                                H_6) *
                H_11) *
               H_12) *
              H_13) *
             H_14) *
            H_15) *
           H_17) *
          H_18) -
       C2H3_rhs * H_20) *
        H_22) -
     (((CH2D_rhs - CH3O_rhs * H_0) -
       (((C2H5_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                      (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                       H_10) -
         ((pC4H9_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                        (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                         H_8) -
          ((PXC6H13_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                           (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                            H_7) -
           ((PXC8H17_rhs - SXC12H25_rhs * H_1) -
            (PXC10H21_rhs -
             (PXC12H25_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                              (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                               H_6) *
               H_11) *
              H_12) *
             H_13) *
            H_14) *
           H_16) -
        (((nC3H7_rhs - (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_5) -
          ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
           (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
            H_9) -
         ((pC4H9_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                        (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                         H_8) -
          ((PXC6H13_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                           (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                            H_7) -
           ((PXC8H17_rhs - SXC12H25_rhs * H_1) -
            (PXC10H21_rhs -
             (PXC12H25_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                              (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                               H_6) *
               H_11) *
              H_12) *
             H_13) *
            H_14) *
           H_15) *
          H_17) *
         H_19) -
      ((HCO_rhs -
        (((C2H5_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                       (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                        H_10) -
          ((pC4H9_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                         (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                          H_8) -
           ((PXC6H13_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                            (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                             H_7) -
            ((PXC8H17_rhs - SXC12H25_rhs * H_1) -
             (PXC10H21_rhs -
              (PXC12H25_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                               (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                                H_6) *
                H_11) *
               H_12) *
              H_13) *
             H_14) *
            H_16) -
         (((nC3H7_rhs - (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_5) -
           ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
            (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
             H_9) -
          ((pC4H9_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                         (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                          H_8) -
           ((PXC6H13_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                            (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                             H_7) -
            ((PXC8H17_rhs - SXC12H25_rhs * H_1) -
             (PXC10H21_rhs -
              (PXC12H25_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                               (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                                H_6) *
                H_11) *
               H_12) *
              H_13) *
             H_14) *
            H_15) *
           H_17) *
          H_18) -
       C2H3_rhs * H_20) *
        H_21) *
       H_23) /
    ((1 - HCO_CH2 * H_22) - (CH2D_CH2 - HCO_CH2 * H_21) * H_23);

  sc_qss[1] =
    ((((CH2D_rhs - CH3O_rhs * H_0) -
       (((C2H5_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                      (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                       H_10) -
         ((pC4H9_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                        (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                         H_8) -
          ((PXC6H13_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                           (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                            H_7) -
           ((PXC8H17_rhs - SXC12H25_rhs * H_1) -
            (PXC10H21_rhs -
             (PXC12H25_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                              (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                               H_6) *
               H_11) *
              H_12) *
             H_13) *
            H_14) *
           H_16) -
        (((nC3H7_rhs - (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_5) -
          ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
           (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
            H_9) -
         ((pC4H9_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                        (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                         H_8) -
          ((PXC6H13_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                           (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                            H_7) -
           ((PXC8H17_rhs - SXC12H25_rhs * H_1) -
            (PXC10H21_rhs -
             (PXC12H25_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                              (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                               H_6) *
               H_11) *
              H_12) *
             H_13) *
            H_14) *
           H_15) *
          H_17) *
         H_19) -
      ((HCO_rhs -
        (((C2H5_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                       (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                        H_10) -
          ((pC4H9_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                         (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                          H_8) -
           ((PXC6H13_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                            (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                             H_7) -
            ((PXC8H17_rhs - SXC12H25_rhs * H_1) -
             (PXC10H21_rhs -
              (PXC12H25_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                               (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                                H_6) *
                H_11) *
               H_12) *
              H_13) *
             H_14) *
            H_16) -
         (((nC3H7_rhs - (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_5) -
           ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
            (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
             H_9) -
          ((pC4H9_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                         (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                          H_8) -
           ((PXC6H13_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                            (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                             H_7) -
            ((PXC8H17_rhs - SXC12H25_rhs * H_1) -
             (PXC10H21_rhs -
              (PXC12H25_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                               (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                                H_6) *
                H_11) *
               H_12) *
              H_13) *
             H_14) *
            H_15) *
           H_17) *
          H_18) -
       C2H3_rhs * H_20) *
        H_21) -
     ((CH2D_CH2 - HCO_CH2 * H_21) * sc_qss[0])) /
    (((1 - CH3O_CH2D * H_0) - C2H5_CH2D * H_19) -
     (HCO_CH2D - C2H5_CH2D * H_18) * H_21);

  sc_qss[2] =
    (((HCO_rhs -
       (((C2H5_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                      (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                       H_10) -
         ((pC4H9_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                        (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                         H_8) -
          ((PXC6H13_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                           (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                            H_7) -
           ((PXC8H17_rhs - SXC12H25_rhs * H_1) -
            (PXC10H21_rhs -
             (PXC12H25_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                              (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                               H_6) *
               H_11) *
              H_12) *
             H_13) *
            H_14) *
           H_16) -
        (((nC3H7_rhs - (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_5) -
          ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
           (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
            H_9) -
         ((pC4H9_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                        (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                         H_8) -
          ((PXC6H13_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                           (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                            H_7) -
           ((PXC8H17_rhs - SXC12H25_rhs * H_1) -
            (PXC10H21_rhs -
             (PXC12H25_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                              (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                               H_6) *
               H_11) *
              H_12) *
             H_13) *
            H_14) *
           H_15) *
          H_17) *
         H_18) -
      C2H3_rhs * H_20) -
     (HCO_CH2 * sc_qss[0] + (HCO_CH2D - C2H5_CH2D * H_18) * sc_qss[1])) /
    ((1 - C2H5_HCO * H_18) - C2H3_HCO * H_20);

  sc_qss[4] = C2H3_rhs - (+C2H3_HCO * sc_qss[2]);

  sc_qss[5] =
    ((((C2H5_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                    (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                     H_10) -
       ((pC4H9_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                      (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                       H_8) -
        ((PXC6H13_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                         (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                          H_7) -
         ((PXC8H17_rhs - SXC12H25_rhs * H_1) -
          (PXC10H21_rhs -
           (PXC12H25_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                            (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                             H_6) *
             H_11) *
            H_12) *
           H_13) *
          H_14) *
         H_16) -
      (((nC3H7_rhs - (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_5) -
        ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
         (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
          H_9) -
       ((pC4H9_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                      (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                       H_8) -
        ((PXC6H13_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                         (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                          H_7) -
         ((PXC8H17_rhs - SXC12H25_rhs * H_1) -
          (PXC10H21_rhs -
           (PXC12H25_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                            (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                             H_6) *
             H_11) *
            H_12) *
           H_13) *
          H_14) *
         H_15) *
        H_17) -
     (+C2H5_CH2D * sc_qss[1] + C2H5_HCO * sc_qss[2])) /
    ((1 - S3XC12H25_C2H5 * H_10) - (nC3H7_C2H5 - S3XC12H25_C2H5 * H_9) * H_17);

  sc_qss[6] =
    ((((nC3H7_rhs - (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_5) -
       ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
        (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
         H_9) -
      ((pC4H9_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                     (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                      H_8) -
       ((PXC6H13_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                        (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                         H_7) -
        ((PXC8H17_rhs - SXC12H25_rhs * H_1) -
         (PXC10H21_rhs -
          (PXC12H25_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                           (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                            H_6) *
            H_11) *
           H_12) *
          H_13) *
         H_14) *
        H_15) -
     (+(nC3H7_C2H5 - S3XC12H25_C2H5 * H_9) * sc_qss[5])) /
    (((1 - PXC5H11_nC3H7 * H_5) -
      (S3XC12H25_nC3H7 - PXC5H11_nC3H7 * H_4) * H_9) -
     (pC4H9_nC3H7 - (S3XC12H25_nC3H7 - PXC5H11_nC3H7 * H_4) * H_8) * H_15);

  sc_qss[7] = (((pC4H9_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                              (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                               H_8) -
                ((PXC6H13_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                                 (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                                  H_7) -
                 ((PXC8H17_rhs - SXC12H25_rhs * H_1) -
                  (PXC10H21_rhs -
                   (PXC12H25_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                                    (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                                     H_6) *
                     H_11) *
                    H_12) *
                   H_13) *
                  H_14) -
               (+(pC4H9_nC3H7 - (S3XC12H25_nC3H7 - PXC5H11_nC3H7 * H_4) * H_8) *
                sc_qss[6])) /
              ((1 - S3XC12H25_pC4H9 * H_8) -
               (PXC6H13_pC4H9 - S3XC12H25_pC4H9 * H_7) * H_14);

  sc_qss[9] = (((PXC6H13_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                                (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                                 H_7) -
                ((PXC8H17_rhs - SXC12H25_rhs * H_1) -
                 (PXC10H21_rhs -
                  (PXC12H25_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                                   (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                                    H_6) *
                    H_11) *
                   H_12) *
                  H_13) -
               (+(PXC6H13_pC4H9 - S3XC12H25_pC4H9 * H_7) * sc_qss[7])) /
              ((1 - S3XC12H25_PXC6H13 * H_7) - PXC8H17_PXC6H13 * H_13);

  sc_qss[11] = (((PXC8H17_rhs - SXC12H25_rhs * H_1) -
                 (PXC10H21_rhs -
                  (PXC12H25_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                                   (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                                    H_6) *
                    H_11) *
                   H_12) -
                (+PXC8H17_PXC6H13 * sc_qss[9])) /
               ((1 - SXC12H25_PXC8H17 * H_1) - PXC10H21_PXC8H17 * H_12);

  sc_qss[12] =
    ((PXC10H21_rhs - (PXC12H25_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                                      (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                                       H_6) *
                       H_11) -
     (+PXC10H21_PXC8H17 * sc_qss[11])) /
    (1 - PXC12H25_PXC10H21 * H_11);

  sc_qss[13] = ((PXC12H25_rhs - ((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                                 (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) *
                                  H_6) -
                (+PXC12H25_PXC10H21 * sc_qss[12])) /
               (1 - S3XC12H25_PXC12H25 * H_6);

  sc_qss[15] = (((S3XC12H25_rhs - PXC7H15_rhs * H_3) -
                 (PXC5H11_rhs - PXC7H15_rhs * H_2) * H_4) -
                (+S3XC12H25_C2H5 * sc_qss[5] +
                 (S3XC12H25_nC3H7 - PXC5H11_nC3H7 * H_4) * sc_qss[6] +
                 S3XC12H25_pC4H9 * sc_qss[7] + S3XC12H25_PXC6H13 * sc_qss[9] +
                 S3XC12H25_PXC12H25 * sc_qss[13])) /
               ((1 - PXC7H15_S3XC12H25 * H_3) -
                (PXC5H11_S3XC12H25 - PXC7H15_S3XC12H25 * H_2) * H_4);

  sc_qss[8] = ((PXC5H11_rhs - PXC7H15_rhs * H_2) -
               (+PXC5H11_nC3H7 * sc_qss[6] +
                (PXC5H11_S3XC12H25 - PXC7H15_S3XC12H25 * H_2) * sc_qss[15])) /
              (1 - PXC7H15_PXC5H11 * H_2);

  sc_qss[10] = PXC7H15_rhs -
               (+PXC7H15_S3XC12H25 * sc_qss[15] + PXC7H15_PXC5H11 * sc_qss[8]);

  sc_qss[14] = SXC12H25_rhs - (+SXC12H25_PXC8H17 * sc_qss[11]);

  sc_qss[3] = CH3O_rhs - (+CH3O_CH2D * sc_qss[1]);

  // QSSA coupling between O2C12H24OOH  C12OOH
  // QSSA species 17: O2C12H24OOH

  amrex::Real O2C12H24OOH_num = epsilon + 1.0 * qr_co[196];
  amrex::Real O2C12H24OOH_denom = epsilon - qf_co[195] - qf_co[196];
  amrex::Real O2C12H24OOH_rhs = -O2C12H24OOH_num / O2C12H24OOH_denom;

  amrex::Real O2C12H24OOH_C12OOH =
    (epsilon + 1.0 * qf_co[194]) / O2C12H24OOH_denom;

  // QSSA species 16: C12OOH

  amrex::Real C12OOH_num = epsilon + 1.0 * qf_co[186];
  amrex::Real C12OOH_denom = epsilon - qf_co[187] - qf_co[194];
  amrex::Real C12OOH_rhs = -C12OOH_num / C12OOH_denom;

  amrex::Real C12OOH_O2C12H24OOH = (epsilon + 1.0 * qf_co[195]) / C12OOH_denom;

  // Putting it all together
  H_0 = C12OOH_O2C12H24OOH;
  sc_qss[16] =
    (C12OOH_rhs - O2C12H24OOH_rhs * H_0) / (1 - O2C12H24OOH_C12OOH * H_0);

  sc_qss[17] = O2C12H24OOH_rhs - (O2C12H24OOH_C12OOH * sc_qss[16]);

  return;
}

// GPU version of productionRate: no more use of thermo namespace vectors
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_qfqr(
  amrex::Real* qf,
  amrex::Real* qr,
  amrex::Real* sc,
  amrex::Real* sc_qss,
  const amrex::Real* tc,
  amrex::Real invT)
{

  // reaction 0: H + O2 (+M) <=> HO2 (+M)
  qf[0] = sc[1] * sc[8];
  qr[0] = sc[4];

  // reaction 1: 2 OH (+M) <=> H2O2 (+M)
  qf[1] = (sc[3] * sc[3]);
  qr[1] = sc[7];

  // reaction 2: CO + H2 (+M) <=> CH2O (+M)
  qf[2] = sc[5] * sc[12];
  qr[2] = sc[11];

  // reaction 3: H + HCO (+M) <=> CH2O (+M)
  qf[3] = sc[1] * sc_qss[2];
  qr[3] = sc[11];

  // reaction 4: CH2 + H (+M) <=> CH3 (+M)
  qf[4] = sc[1] * sc_qss[0];
  qr[4] = sc[9];

  // reaction 5: CH2O + H (+M) <=> CH3O (+M)
  qf[5] = sc[1] * sc[11];
  qr[5] = sc_qss[3];

  // reaction 6: CH3 + H (+M) <=> CH4 (+M)
  qf[6] = sc[1] * sc[9];
  qr[6] = sc[10];

  // reaction 7: 2 CH3 (+M) <=> C2H6 (+M)
  qf[7] = (sc[9] * sc[9]);
  qr[7] = sc[16];

  // reaction 8: C2H3 (+M) <=> C2H2 + H (+M)
  qf[8] = sc_qss[4];
  qr[8] = sc[1] * sc[14];

  // reaction 9: C2H3 + H (+M) <=> C2H4 (+M)
  qf[9] = sc[1] * sc_qss[4];
  qr[9] = sc[15];

  // reaction 10: C2H3 + CH3 (+M) <=> C3H6 (+M)
  qf[10] = sc[9] * sc_qss[4];
  qr[10] = sc[19];

  // reaction 11: C2H4 + H (+M) <=> C2H5 (+M)
  qf[11] = sc[1] * sc[15];
  qr[11] = sc_qss[5];

  // reaction 12: C2H5 + H (+M) <=> C2H6 (+M)
  qf[12] = sc[1] * sc_qss[5];
  qr[12] = sc[16];

  // reaction 13: C2H3 + C2H5 (+M) <=> C4H81 (+M)
  qf[13] = sc_qss[4] * sc_qss[5];
  qr[13] = sc[22];

  // reaction 14: H + aC3H5 (+M) <=> C3H6 (+M)
  qf[14] = sc[1] * sc[18];
  qr[14] = sc[19];

  // reaction 15: CH3 + aC3H5 (+M) <=> C4H81 (+M)
  qf[15] = sc[9] * sc[18];
  qr[15] = sc[22];

  // reaction 16: C3H6 + H (+M) <=> nC3H7 (+M)
  qf[16] = sc[1] * sc[19];
  qr[16] = sc_qss[6];

  // reaction 17: C4H7 + H (+M) <=> C4H81 (+M)
  qf[17] = sc[1] * sc[21];
  qr[17] = sc[22];

  // reaction 18: C4H81 + H (+M) <=> pC4H9 (+M)
  qf[18] = sc[1] * sc[22];
  qr[18] = sc_qss[7];

  // reaction 19: C5H10 + H (+M) <=> PXC5H11 (+M)
  qf[19] = sc[1] * sc[24];
  qr[19] = sc_qss[8];

  // reaction 20: C6H12 + H (+M) <=> PXC6H13 (+M)
  qf[20] = sc[1] * sc[25];
  qr[20] = sc_qss[9];

  // reaction 21: C7H14 + H (+M) <=> PXC7H15 (+M)
  qf[21] = sc[1] * sc[26];
  qr[21] = sc_qss[10];

  // reaction 22: C8H16 + H (+M) <=> PXC8H17 (+M)
  qf[22] = sc[1] * sc[27];
  qr[22] = sc_qss[11];

  // reaction 23: C9H18 + H (+M) <=> PXC9H19 (+M)
  qf[23] = sc[1] * sc[28];
  qr[23] = sc[29];

  // reaction 24: C10H20 + H (+M) <=> PXC10H21 (+M)
  qf[24] = sc[1] * sc[30];
  qr[24] = sc_qss[12];

  // reaction 25: CO + O (+M) <=> CO2 (+M)
  qf[25] = sc[2] * sc[12];
  qr[25] = sc[13];

  // reaction 26: 2 H + M <=> H2 + M
  qf[26] = (sc[1] * sc[1]);
  qr[26] = sc[5];

  // reaction 27: H + OH + M <=> H2O + M
  qf[27] = sc[1] * sc[3];
  qr[27] = sc[6];

  // reaction 28: 2 O + M <=> O2 + M
  qf[28] = (sc[2] * sc[2]);
  qr[28] = sc[8];

  // reaction 29: 2 H + H2 <=> H2 + H2
  qf[29] = (sc[1] * sc[1]) * sc[5];
  qr[29] = (sc[5] * sc[5]);

  // reaction 30: 2 H + H2O <=> H2 + H2O
  qf[30] = (sc[1] * sc[1]) * sc[6];
  qr[30] = sc[5] * sc[6];

  // reaction 31: 2 H + CO2 <=> H2 + CO2
  qf[31] = (sc[1] * sc[1]) * sc[13];
  qr[31] = sc[5] * sc[13];

  // reaction 32: H + O + M <=> OH + M
  qf[32] = sc[1] * sc[2];
  qr[32] = sc[3];

  // reaction 33: HCO + M <=> CO + H + M
  qf[33] = sc_qss[2];
  qr[33] = sc[1] * sc[12];

  // reaction 34: HCO + H2O <=> CO + H + H2O
  qf[34] = sc[6] * sc_qss[2];
  qr[34] = sc[1] * sc[6] * sc[12];

  // reaction 35: H + O2 <=> O + OH
  qf[35] = sc[1] * sc[8];
  qr[35] = sc[2] * sc[3];

  // reaction 36: H2 + O <=> H + OH
  qf[36] = sc[2] * sc[5];
  qr[36] = sc[1] * sc[3];

  // reaction 37: H2 + OH <=> H + H2O
  qf[37] = sc[3] * sc[5];
  qr[37] = sc[1] * sc[6];

  // reaction 38: 2 OH <=> H2O + O
  qf[38] = (sc[3] * sc[3]);
  qr[38] = sc[2] * sc[6];

  // reaction 39: H + HO2 <=> 2 OH
  qf[39] = sc[1] * sc[4];
  qr[39] = (sc[3] * sc[3]);

  // reaction 40: H2 + O2 <=> H + HO2
  qf[40] = sc[5] * sc[8];
  qr[40] = sc[1] * sc[4];

  // reaction 41: HO2 + OH <=> H2O + O2
  qf[41] = sc[3] * sc[4];
  qr[41] = sc[6] * sc[8];

  // reaction 42: H + HO2 <=> H2O + O
  qf[42] = sc[1] * sc[4];
  qr[42] = sc[2] * sc[6];

  // reaction 43: HO2 + O <=> O2 + OH
  qf[43] = sc[2] * sc[4];
  qr[43] = sc[3] * sc[8];

  // reaction 44: 2 HO2 <=> H2O2 + O2
  qf[44] = (sc[4] * sc[4]);
  qr[44] = sc[7] * sc[8];

  // reaction 45: 2 HO2 <=> H2O2 + O2
  qf[45] = (sc[4] * sc[4]);
  qr[45] = sc[7] * sc[8];

  // reaction 46: H + H2O2 <=> H2O + OH
  qf[46] = sc[1] * sc[7];
  qr[46] = sc[3] * sc[6];

  // reaction 47: H + H2O2 <=> H2 + HO2
  qf[47] = sc[1] * sc[7];
  qr[47] = sc[4] * sc[5];

  // reaction 48: H2O2 + O <=> HO2 + OH
  qf[48] = sc[2] * sc[7];
  qr[48] = sc[3] * sc[4];

  // reaction 49: H2O2 + OH <=> H2O + HO2
  qf[49] = sc[3] * sc[7];
  qr[49] = sc[4] * sc[6];

  // reaction 50: H2O2 + OH <=> H2O + HO2
  qf[50] = sc[3] * sc[7];
  qr[50] = sc[4] * sc[6];

  // reaction 51: CO + OH <=> CO2 + H
  qf[51] = sc[3] * sc[12];
  qr[51] = sc[1] * sc[13];

  // reaction 52: CO + OH <=> CO2 + H
  qf[52] = sc[3] * sc[12];
  qr[52] = sc[1] * sc[13];

  // reaction 53: CO + HO2 <=> CO2 + OH
  qf[53] = sc[4] * sc[12];
  qr[53] = sc[3] * sc[13];

  // reaction 54: CO + O2 <=> CO2 + O
  qf[54] = sc[8] * sc[12];
  qr[54] = sc[2] * sc[13];

  // reaction 55: H + HCO <=> CO + H2
  qf[55] = sc[1] * sc_qss[2];
  qr[55] = sc[5] * sc[12];

  // reaction 56: HCO + O <=> CO + OH
  qf[56] = sc[2] * sc_qss[2];
  qr[56] = sc[3] * sc[12];

  // reaction 57: HCO + O <=> CO2 + H
  qf[57] = sc[2] * sc_qss[2];
  qr[57] = sc[1] * sc[13];

  // reaction 58: HCO + OH <=> CO + H2O
  qf[58] = sc[3] * sc_qss[2];
  qr[58] = sc[6] * sc[12];

  // reaction 59: HCO + O2 <=> CO + HO2
  qf[59] = sc[8] * sc_qss[2];
  qr[59] = sc[4] * sc[12];

  // reaction 60: CH2 + O <=> H + HCO
  qf[60] = sc[2] * sc_qss[0];
  qr[60] = sc[1] * sc_qss[2];

  // reaction 61: CH2 + OH <=> CH2O + H
  qf[61] = sc[3] * sc_qss[0];
  qr[61] = sc[1] * sc[11];

  // reaction 62: CH2 + H2 <=> CH3 + H
  qf[62] = sc[5] * sc_qss[0];
  qr[62] = sc[1] * sc[9];

  // reaction 63: CH2 + O2 <=> HCO + OH
  qf[63] = sc[8] * sc_qss[0];
  qr[63] = sc[3] * sc_qss[2];

  // reaction 64: CH2 + O2 <=> CO2 + 2 H
  qf[64] = sc[8] * sc_qss[0];
  qr[64] = (sc[1] * sc[1]) * sc[13];

  // reaction 65: CH2 + HO2 <=> CH2O + OH
  qf[65] = sc[4] * sc_qss[0];
  qr[65] = sc[3] * sc[11];

  // reaction 66: 2 CH2 <=> C2H2 + H2
  qf[66] = pow(sc_qss[0], 2.000000);
  qr[66] = sc[5] * sc[14];

  // reaction 67: CH2* + N2 <=> CH2 + N2
  qf[67] = sc[34] * sc_qss[1];
  qr[67] = sc[34] * sc_qss[0];

  // reaction 68: CH2* + O <=> CO + H2
  qf[68] = sc[2] * sc_qss[1];
  qr[68] = sc[5] * sc[12];

  // reaction 69: CH2* + O <=> H + HCO
  qf[69] = sc[2] * sc_qss[1];
  qr[69] = sc[1] * sc_qss[2];

  // reaction 70: CH2* + OH <=> CH2O + H
  qf[70] = sc[3] * sc_qss[1];
  qr[70] = sc[1] * sc[11];

  // reaction 71: CH2* + H2 <=> CH3 + H
  qf[71] = sc[5] * sc_qss[1];
  qr[71] = sc[1] * sc[9];

  // reaction 72: CH2* + O2 <=> CO + H + OH
  qf[72] = sc[8] * sc_qss[1];
  qr[72] = sc[1] * sc[3] * sc[12];

  // reaction 73: CH2* + O2 <=> CO + H2O
  qf[73] = sc[8] * sc_qss[1];
  qr[73] = sc[6] * sc[12];

  // reaction 74: CH2* + H2O <=> CH2 + H2O
  qf[74] = sc[6] * sc_qss[1];
  qr[74] = sc[6] * sc_qss[0];

  // reaction 75: CH2* + CO <=> CH2 + CO
  qf[75] = sc[12] * sc_qss[1];
  qr[75] = sc[12] * sc_qss[0];

  // reaction 76: CH2* + CO2 <=> CH2 + CO2
  qf[76] = sc[13] * sc_qss[1];
  qr[76] = sc[13] * sc_qss[0];

  // reaction 77: CH2* + CO2 <=> CH2O + CO
  qf[77] = sc[13] * sc_qss[1];
  qr[77] = sc[11] * sc[12];

  // reaction 78: CH2O + H <=> H2 + HCO
  qf[78] = sc[1] * sc[11];
  qr[78] = sc[5] * sc_qss[2];

  // reaction 79: CH2O + O <=> HCO + OH
  qf[79] = sc[2] * sc[11];
  qr[79] = sc[3] * sc_qss[2];

  // reaction 80: CH2O + OH <=> H2O + HCO
  qf[80] = sc[3] * sc[11];
  qr[80] = sc[6] * sc_qss[2];

  // reaction 81: CH2O + O2 <=> HCO + HO2
  qf[81] = sc[8] * sc[11];
  qr[81] = sc[4] * sc_qss[2];

  // reaction 82: CH2O + HO2 <=> H2O2 + HCO
  qf[82] = sc[4] * sc[11];
  qr[82] = sc[7] * sc_qss[2];

  // reaction 83: CH3 + O <=> CH2O + H
  qf[83] = sc[2] * sc[9];
  qr[83] = sc[1] * sc[11];

  // reaction 84: CH3 + OH <=> CH2 + H2O
  qf[84] = sc[3] * sc[9];
  qr[84] = sc[6] * sc_qss[0];

  // reaction 85: CH3 + OH <=> CH2* + H2O
  qf[85] = sc[3] * sc[9];
  qr[85] = sc[6] * sc_qss[1];

  // reaction 86: CH3 + O2 <=> CH3O + O
  qf[86] = sc[8] * sc[9];
  qr[86] = sc[2] * sc_qss[3];

  // reaction 87: CH3 + O2 <=> CH2O + OH
  qf[87] = sc[8] * sc[9];
  qr[87] = sc[3] * sc[11];

  // reaction 88: CH3 + HO2 <=> CH4 + O2
  qf[88] = sc[4] * sc[9];
  qr[88] = sc[8] * sc[10];

  // reaction 89: CH3 + HO2 <=> CH3O + OH
  qf[89] = sc[4] * sc[9];
  qr[89] = sc[3] * sc_qss[3];

  // reaction 90: CH3 + H2O2 <=> CH4 + HO2
  qf[90] = sc[7] * sc[9];
  qr[90] = sc[4] * sc[10];

  // reaction 91: CH3 + HCO <=> CH4 + CO
  qf[91] = sc[9] * sc_qss[2];
  qr[91] = sc[10] * sc[12];

  // reaction 92: CH2O + CH3 <=> CH4 + HCO
  qf[92] = sc[9] * sc[11];
  qr[92] = sc[10] * sc_qss[2];

  // reaction 93: CH2 + CH3 <=> C2H4 + H
  qf[93] = sc[9] * sc_qss[0];
  qr[93] = sc[1] * sc[15];

  // reaction 94: CH2* + CH3 <=> C2H4 + H
  qf[94] = sc[9] * sc_qss[1];
  qr[94] = sc[1] * sc[15];

  // reaction 95: 2 CH3 <=> C2H5 + H
  qf[95] = (sc[9] * sc[9]);
  qr[95] = sc[1] * sc_qss[5];

  // reaction 96: CH3O + H <=> CH2O + H2
  qf[96] = sc[1] * sc_qss[3];
  qr[96] = sc[5] * sc[11];

  // reaction 97: CH3O + H <=> CH3 + OH
  qf[97] = sc[1] * sc_qss[3];
  qr[97] = sc[3] * sc[9];

  // reaction 98: CH3O + H <=> CH2* + H2O
  qf[98] = sc[1] * sc_qss[3];
  qr[98] = sc[6] * sc_qss[1];

  // reaction 99: CH3O + O <=> CH2O + OH
  qf[99] = sc[2] * sc_qss[3];
  qr[99] = sc[3] * sc[11];

  // reaction 100: CH3O + OH <=> CH2O + H2O
  qf[100] = sc[3] * sc_qss[3];
  qr[100] = sc[6] * sc[11];

  // reaction 101: CH3O + O2 <=> CH2O + HO2
  qf[101] = sc[8] * sc_qss[3];
  qr[101] = sc[4] * sc[11];

  // reaction 102: CH4 + H <=> CH3 + H2
  qf[102] = sc[1] * sc[10];
  qr[102] = sc[5] * sc[9];

  // reaction 103: CH4 + O <=> CH3 + OH
  qf[103] = sc[2] * sc[10];
  qr[103] = sc[3] * sc[9];

  // reaction 104: CH4 + OH <=> CH3 + H2O
  qf[104] = sc[3] * sc[10];
  qr[104] = sc[6] * sc[9];

  // reaction 105: CH2 + CH4 <=> 2 CH3
  qf[105] = sc[10] * sc_qss[0];
  qr[105] = (sc[9] * sc[9]);

  // reaction 106: CH2* + CH4 <=> 2 CH3
  qf[106] = sc[10] * sc_qss[1];
  qr[106] = (sc[9] * sc[9]);

  // reaction 107: C2H2 + O <=> CH2 + CO
  qf[107] = sc[2] * sc[14];
  qr[107] = sc[12] * sc_qss[0];

  // reaction 108: C2H2 + OH <=> CH3 + CO
  qf[108] = sc[3] * sc[14];
  qr[108] = sc[9] * sc[12];

  // reaction 109: C2H2 + HCO <=> C2H3 + CO
  qf[109] = sc[14] * sc_qss[2];
  qr[109] = sc[12] * sc_qss[4];

  // reaction 110: C2H2 + CH3 <=> aC3H5
  qf[110] = sc[9] * sc[14];
  qr[110] = sc[18];

  // reaction 111: C2H3 + H <=> C2H2 + H2
  qf[111] = sc[1] * sc_qss[4];
  qr[111] = sc[5] * sc[14];

  // reaction 112: C2H3 + O <=> CH3 + CO
  qf[112] = sc[2] * sc_qss[4];
  qr[112] = sc[9] * sc[12];

  // reaction 113: C2H3 + OH <=> C2H2 + H2O
  qf[113] = sc[3] * sc_qss[4];
  qr[113] = sc[6] * sc[14];

  // reaction 114: C2H3 + O2 <=> C2H2 + HO2
  qf[114] = sc[8] * sc_qss[4];
  qr[114] = sc[4] * sc[14];

  // reaction 115: C2H3 + O2 <=> CH2CHO + O
  qf[115] = sc[8] * sc_qss[4];
  qr[115] = sc[2] * sc[17];

  // reaction 116: C2H3 + O2 <=> CH2O + HCO
  qf[116] = sc[8] * sc_qss[4];
  qr[116] = sc[11] * sc_qss[2];

  // reaction 117: C2H3 + HO2 <=> CH2CHO + OH
  qf[117] = sc[4] * sc_qss[4];
  qr[117] = sc[3] * sc[17];

  // reaction 118: C2H3 + H2O2 <=> C2H4 + HO2
  qf[118] = sc[7] * sc_qss[4];
  qr[118] = sc[4] * sc[15];

  // reaction 119: C2H3 + HCO <=> C2H4 + CO
  qf[119] = sc_qss[2] * sc_qss[4];
  qr[119] = sc[12] * sc[15];

  // reaction 120: C2H3 + HCO <=> C2H3CHO
  qf[120] = sc_qss[2] * sc_qss[4];
  qr[120] = sc[20];

  // reaction 121: C2H3 + CH3 <=> C2H2 + CH4
  qf[121] = sc[9] * sc_qss[4];
  qr[121] = sc[10] * sc[14];

  // reaction 122: C2H3 + CH3 <=> H + aC3H5
  qf[122] = sc[9] * sc_qss[4];
  qr[122] = sc[1] * sc[18];

  // reaction 123: 2 C2H3 <=> C2H2 + C2H4
  qf[123] = pow(sc_qss[4], 2.000000);
  qr[123] = sc[14] * sc[15];

  // reaction 124: CH2CHO <=> CH3 + CO
  qf[124] = sc[17];
  qr[124] = sc[9] * sc[12];

  // reaction 125: CH2CHO + H <=> CH3 + HCO
  qf[125] = sc[1] * sc[17];
  qr[125] = sc[9] * sc_qss[2];

  // reaction 126: CH2CHO + O2 <=> CH2O + CO + OH
  qf[126] = sc[8] * sc[17];
  qr[126] = sc[3] * sc[11] * sc[12];

  // reaction 127: C2H4 + H <=> C2H3 + H2
  qf[127] = sc[1] * sc[15];
  qr[127] = sc[5] * sc_qss[4];

  // reaction 128: C2H4 + O <=> C2H3 + OH
  qf[128] = sc[2] * sc[15];
  qr[128] = sc[3] * sc_qss[4];

  // reaction 129: C2H4 + O <=> CH3 + HCO
  qf[129] = sc[2] * sc[15];
  qr[129] = sc[9] * sc_qss[2];

  // reaction 130: C2H4 + O <=> CH2 + CH2O
  qf[130] = sc[2] * sc[15];
  qr[130] = sc[11] * sc_qss[0];

  // reaction 131: C2H4 + OH <=> C2H3 + H2O
  qf[131] = sc[3] * sc[15];
  qr[131] = sc[6] * sc_qss[4];

  // reaction 132: C2H4 + HCO <=> C2H5 + CO
  qf[132] = sc[15] * sc_qss[2];
  qr[132] = sc[12] * sc_qss[5];

  // reaction 133: C2H4 + CH2 <=> H + aC3H5
  qf[133] = sc[15] * sc_qss[0];
  qr[133] = sc[1] * sc[18];

  // reaction 134: C2H4 + CH2* <=> H + aC3H5
  qf[134] = sc[15] * sc_qss[1];
  qr[134] = sc[1] * sc[18];

  // reaction 135: C2H4 + CH3 <=> C2H3 + CH4
  qf[135] = sc[9] * sc[15];
  qr[135] = sc[10] * sc_qss[4];

  // reaction 136: nC3H7 <=> C2H4 + CH3
  qf[136] = sc_qss[6];
  qr[136] = sc[9] * sc[15];

  // reaction 137: C2H4 + O2 <=> C2H3 + HO2
  qf[137] = sc[8] * sc[15];
  qr[137] = sc[4] * sc_qss[4];

  // reaction 138: C2H3 + C2H4 <=> C4H7
  qf[138] = sc[15] * sc_qss[4];
  qr[138] = sc[21];

  // reaction 139: C2H5 + H <=> C2H4 + H2
  qf[139] = sc[1] * sc_qss[5];
  qr[139] = sc[5] * sc[15];

  // reaction 140: C2H5 + O <=> CH2O + CH3
  qf[140] = sc[2] * sc_qss[5];
  qr[140] = sc[9] * sc[11];

  // reaction 141: C2H5 + O2 <=> C2H4 + HO2
  qf[141] = sc[8] * sc_qss[5];
  qr[141] = sc[4] * sc[15];

  // reaction 142: C2H5 + HO2 <=> C2H6 + O2
  qf[142] = sc[4] * sc_qss[5];
  qr[142] = sc[8] * sc[16];

  // reaction 143: C2H5 + HO2 <=> C2H4 + H2O2
  qf[143] = sc[4] * sc_qss[5];
  qr[143] = sc[7] * sc[15];

  // reaction 144: C2H5 + HO2 <=> CH2O + CH3 + OH
  qf[144] = sc[4] * sc_qss[5];
  qr[144] = sc[3] * sc[9] * sc[11];

  // reaction 145: C2H5 + H2O2 <=> C2H6 + HO2
  qf[145] = sc[7] * sc_qss[5];
  qr[145] = sc[4] * sc[16];

  // reaction 146: C2H3 + C2H5 <=> CH3 + aC3H5
  qf[146] = sc_qss[4] * sc_qss[5];
  qr[146] = sc[9] * sc[18];

  // reaction 147: C2H6 + H <=> C2H5 + H2
  qf[147] = sc[1] * sc[16];
  qr[147] = sc[5] * sc_qss[5];

  // reaction 148: C2H6 + O <=> C2H5 + OH
  qf[148] = sc[2] * sc[16];
  qr[148] = sc[3] * sc_qss[5];

  // reaction 149: C2H6 + OH <=> C2H5 + H2O
  qf[149] = sc[3] * sc[16];
  qr[149] = sc[6] * sc_qss[5];

  // reaction 150: C2H6 + CH2* <=> C2H5 + CH3
  qf[150] = sc[16] * sc_qss[1];
  qr[150] = sc[9] * sc_qss[5];

  // reaction 151: C2H6 + CH3 <=> C2H5 + CH4
  qf[151] = sc[9] * sc[16];
  qr[151] = sc[10] * sc_qss[5];

  // reaction 152: O + aC3H5 <=> C2H3CHO + H
  qf[152] = sc[2] * sc[18];
  qr[152] = sc[1] * sc[20];

  // reaction 153: OH + aC3H5 <=> C2H3CHO + 2 H
  qf[153] = sc[3] * sc[18];
  qr[153] = (sc[1] * sc[1]) * sc[20];

  // reaction 154: O2 + aC3H5 <=> C2H3CHO + OH
  qf[154] = sc[8] * sc[18];
  qr[154] = sc[3] * sc[20];

  // reaction 155: HO2 + aC3H5 <=> C3H6 + O2
  qf[155] = sc[4] * sc[18];
  qr[155] = sc[8] * sc[19];

  // reaction 156: HO2 + aC3H5 <=> C2H3 + CH2O + OH
  qf[156] = sc[4] * sc[18];
  qr[156] = sc[3] * sc[11] * sc_qss[4];

  // reaction 157: HCO + aC3H5 <=> C3H6 + CO
  qf[157] = sc[18] * sc_qss[2];
  qr[157] = sc[12] * sc[19];

  // reaction 158: C3H6 + H <=> C2H4 + CH3
  qf[158] = sc[1] * sc[19];
  qr[158] = sc[9] * sc[15];

  // reaction 159: C3H6 + H <=> H2 + aC3H5
  qf[159] = sc[1] * sc[19];
  qr[159] = sc[5] * sc[18];

  // reaction 160: C3H6 + O <=> C2H3CHO + 2 H
  qf[160] = sc[2] * sc[19];
  qr[160] = (sc[1] * sc[1]) * sc[20];

  // reaction 161: C3H6 + O => C2H5 + HCO
  qf[161] = sc[2] * sc[19];
  qr[161] = 0.0;

  // reaction 162: C3H6 + O <=> OH + aC3H5
  qf[162] = sc[2] * sc[19];
  qr[162] = sc[3] * sc[18];

  // reaction 163: C3H6 + OH <=> H2O + aC3H5
  qf[163] = sc[3] * sc[19];
  qr[163] = sc[6] * sc[18];

  // reaction 164: C3H6 + HO2 <=> H2O2 + aC3H5
  qf[164] = sc[4] * sc[19];
  qr[164] = sc[7] * sc[18];

  // reaction 165: C3H6 + CH3 <=> CH4 + aC3H5
  qf[165] = sc[9] * sc[19];
  qr[165] = sc[10] * sc[18];

  // reaction 166: C2H3CHO + H <=> C2H4 + HCO
  qf[166] = sc[1] * sc[20];
  qr[166] = sc[15] * sc_qss[2];

  // reaction 167: C2H3CHO + O <=> C2H3 + CO + OH
  qf[167] = sc[2] * sc[20];
  qr[167] = sc[3] * sc[12] * sc_qss[4];

  // reaction 168: C2H3CHO + OH <=> C2H3 + CO + H2O
  qf[168] = sc[3] * sc[20];
  qr[168] = sc[6] * sc[12] * sc_qss[4];

  // reaction 169: H + nC3H7 <=> C2H5 + CH3
  qf[169] = sc[1] * sc_qss[6];
  qr[169] = sc[9] * sc_qss[5];

  // reaction 170: H + nC3H7 <=> C3H6 + H2
  qf[170] = sc[1] * sc_qss[6];
  qr[170] = sc[5] * sc[19];

  // reaction 171: O + nC3H7 <=> C2H5 + CH2O
  qf[171] = sc[2] * sc_qss[6];
  qr[171] = sc[11] * sc_qss[5];

  // reaction 172: OH + nC3H7 <=> C3H6 + H2O
  qf[172] = sc[3] * sc_qss[6];
  qr[172] = sc[6] * sc[19];

  // reaction 173: O2 + nC3H7 <=> C3H6 + HO2
  qf[173] = sc[8] * sc_qss[6];
  qr[173] = sc[4] * sc[19];

  // reaction 174: HO2 + nC3H7 <=> C2H5 + CH2O + OH
  qf[174] = sc[4] * sc_qss[6];
  qr[174] = sc[3] * sc[11] * sc_qss[5];

  // reaction 175: CH3 + nC3H7 <=> C3H6 + CH4
  qf[175] = sc[9] * sc_qss[6];
  qr[175] = sc[10] * sc[19];

  // reaction 176: C4H7 + H <=> CH3 + aC3H5
  qf[176] = sc[1] * sc[21];
  qr[176] = sc[9] * sc[18];

  // reaction 177: C4H7 + HO2 <=> CH2O + OH + aC3H5
  qf[177] = sc[4] * sc[21];
  qr[177] = sc[3] * sc[11] * sc[18];

  // reaction 178: C4H7 + HCO <=> C4H81 + CO
  qf[178] = sc[21] * sc_qss[2];
  qr[178] = sc[12] * sc[22];

  // reaction 179: C4H81 + H <=> C2H4 + C2H5
  qf[179] = sc[1] * sc[22];
  qr[179] = sc[15] * sc_qss[5];

  // reaction 180: C4H81 + H <=> C3H6 + CH3
  qf[180] = sc[1] * sc[22];
  qr[180] = sc[9] * sc[19];

  // reaction 181: C4H81 + H <=> C4H7 + H2
  qf[181] = sc[1] * sc[22];
  qr[181] = sc[5] * sc[21];

  // reaction 182: C4H81 + O => HCO + nC3H7
  qf[182] = sc[2] * sc[22];
  qr[182] = 0.0;

  // reaction 183: C4H81 + O <=> C4H7 + OH
  qf[183] = sc[2] * sc[22];
  qr[183] = sc[3] * sc[21];

  // reaction 184: C4H81 + O <=> C4H7 + OH
  qf[184] = sc[2] * sc[22];
  qr[184] = sc[3] * sc[21];

  // reaction 185: C4H81 + OH <=> C4H7 + H2O
  qf[185] = sc[3] * sc[22];
  qr[185] = sc[6] * sc[21];

  // reaction 186: C4H81 + O2 <=> C4H7 + HO2
  qf[186] = sc[8] * sc[22];
  qr[186] = sc[4] * sc[21];

  // reaction 187: C4H81 + HO2 <=> C4H7 + H2O2
  qf[187] = sc[4] * sc[22];
  qr[187] = sc[7] * sc[21];

  // reaction 188: C4H81 + CH3 <=> C4H7 + CH4
  qf[188] = sc[9] * sc[22];
  qr[188] = sc[10] * sc[21];

  // reaction 189: H + pC4H9 => 2 C2H5
  qf[189] = sc[1] * sc_qss[7];
  qr[189] = 0.0;

  // reaction 190: H + pC4H9 <=> C4H81 + H2
  qf[190] = sc[1] * sc_qss[7];
  qr[190] = sc[5] * sc[22];

  // reaction 191: O + pC4H9 <=> CH2O + nC3H7
  qf[191] = sc[2] * sc_qss[7];
  qr[191] = sc[11] * sc_qss[6];

  // reaction 192: OH + pC4H9 <=> C4H81 + H2O
  qf[192] = sc[3] * sc_qss[7];
  qr[192] = sc[6] * sc[22];

  // reaction 193: O2 + pC4H9 <=> C4H81 + HO2
  qf[193] = sc[8] * sc_qss[7];
  qr[193] = sc[4] * sc[22];

  // reaction 194: HO2 + pC4H9 <=> CH2O + OH + nC3H7
  qf[194] = sc[4] * sc_qss[7];
  qr[194] = sc[3] * sc[11] * sc_qss[6];

  // reaction 195: CH3 + pC4H9 <=> C4H81 + CH4
  qf[195] = sc[9] * sc_qss[7];
  qr[195] = sc[10] * sc[22];

  // reaction 196: C5H9 => C2H4 + aC3H5
  qf[196] = sc[23];
  qr[196] = 0.0;

  // reaction 197: C5H9 => C2H3 + C3H6
  qf[197] = sc[23];
  qr[197] = 0.0;

  // reaction 198: C5H10 + H <=> C2H4 + nC3H7
  qf[198] = sc[1] * sc[24];
  qr[198] = sc[15] * sc_qss[6];

  // reaction 199: C5H10 + H <=> C2H5 + C3H6
  qf[199] = sc[1] * sc[24];
  qr[199] = sc[19] * sc_qss[5];

  // reaction 200: C2H4 + nC3H7 <=> PXC5H11
  qf[200] = sc[15] * sc_qss[6];
  qr[200] = sc_qss[8];

  // reaction 201: C6H12 + H <=> C2H4 + pC4H9
  qf[201] = sc[1] * sc[25];
  qr[201] = sc[15] * sc_qss[7];

  // reaction 202: C6H12 + H <=> C3H6 + nC3H7
  qf[202] = sc[1] * sc[25];
  qr[202] = sc[19] * sc_qss[6];

  // reaction 203: C2H4 + pC4H9 <=> PXC6H13
  qf[203] = sc[15] * sc_qss[7];
  qr[203] = sc_qss[9];

  // reaction 204: C7H14 + H <=> C2H4 + PXC5H11
  qf[204] = sc[1] * sc[26];
  qr[204] = sc[15] * sc_qss[8];

  // reaction 205: C7H14 + H <=> C3H6 + pC4H9
  qf[205] = sc[1] * sc[26];
  qr[205] = sc[19] * sc_qss[7];

  // reaction 206: C2H4 + PXC5H11 <=> PXC7H15
  qf[206] = sc[15] * sc_qss[8];
  qr[206] = sc_qss[10];

  // reaction 207: C8H16 + H <=> C2H4 + PXC6H13
  qf[207] = sc[1] * sc[27];
  qr[207] = sc[15] * sc_qss[9];

  // reaction 208: C8H16 + H <=> C3H6 + PXC5H11
  qf[208] = sc[1] * sc[27];
  qr[208] = sc[19] * sc_qss[8];

  // reaction 209: C2H4 + PXC6H13 <=> PXC8H17
  qf[209] = sc[15] * sc_qss[9];
  qr[209] = sc_qss[11];

  // reaction 210: C9H18 + H <=> C2H4 + PXC7H15
  qf[210] = sc[1] * sc[28];
  qr[210] = sc[15] * sc_qss[10];

  // reaction 211: C9H18 + H <=> C3H6 + PXC6H13
  qf[211] = sc[1] * sc[28];
  qr[211] = sc[19] * sc_qss[9];

  // reaction 212: C2H4 + PXC7H15 <=> PXC9H19
  qf[212] = sc[15] * sc_qss[10];
  qr[212] = sc[29];

  // reaction 213: C10H20 + H <=> C2H4 + PXC8H17
  qf[213] = sc[1] * sc[30];
  qr[213] = sc[15] * sc_qss[11];

  // reaction 214: C10H20 + H <=> C3H6 + PXC7H15
  qf[214] = sc[1] * sc[30];
  qr[214] = sc[19] * sc_qss[10];

  // reaction 215: C2H4 + PXC8H17 <=> PXC10H21
  qf[215] = sc[15] * sc_qss[11];
  qr[215] = sc_qss[12];

  // reaction 216: C12H24 <=> C5H9 + PXC7H15
  qf[216] = sc[31];
  qr[216] = sc[23] * sc_qss[10];

  // reaction 217: C2H4 + PXC10H21 <=> PXC12H25
  qf[217] = sc[15] * sc_qss[12];
  qr[217] = sc_qss[13];

  // reaction 218: PXC12H25 <=> S3XC12H25
  qf[218] = sc_qss[13];
  qr[218] = sc_qss[15];

  // reaction 219: C3H6 + PXC9H19 <=> SXC12H25
  qf[219] = sc[19] * sc[29];
  qr[219] = sc_qss[14];

  // reaction 220: C4H81 + PXC8H17 <=> SXC12H25
  qf[220] = sc[22] * sc_qss[11];
  qr[220] = sc_qss[14];

  // reaction 221: C5H10 + PXC7H15 <=> S3XC12H25
  qf[221] = sc[24] * sc_qss[10];
  qr[221] = sc_qss[15];

  // reaction 222: C10H20 + C2H5 <=> S3XC12H25
  qf[222] = sc[30] * sc_qss[5];
  qr[222] = sc_qss[15];

  // reaction 223: C6H12 + PXC6H13 <=> S3XC12H25
  qf[223] = sc[25] * sc_qss[9];
  qr[223] = sc_qss[15];

  // reaction 224: C9H18 + nC3H7 <=> S3XC12H25
  qf[224] = sc[28] * sc_qss[6];
  qr[224] = sc_qss[15];

  // reaction 225: C7H14 + PXC5H11 <=> S3XC12H25
  qf[225] = sc[26] * sc_qss[8];
  qr[225] = sc_qss[15];

  // reaction 226: C8H16 + pC4H9 <=> S3XC12H25
  qf[226] = sc[27] * sc_qss[7];
  qr[226] = sc_qss[15];

  // reaction 227: C2H5 + PXC10H21 <=> NC12H26
  qf[227] = sc_qss[5] * sc_qss[12];
  qr[227] = sc[0];

  // reaction 228: PXC9H19 + nC3H7 <=> NC12H26
  qf[228] = sc[29] * sc_qss[6];
  qr[228] = sc[0];

  // reaction 229: PXC8H17 + pC4H9 <=> NC12H26
  qf[229] = sc_qss[7] * sc_qss[11];
  qr[229] = sc[0];

  // reaction 230: PXC5H11 + PXC7H15 <=> NC12H26
  qf[230] = sc_qss[8] * sc_qss[10];
  qr[230] = sc[0];

  // reaction 231: 2 PXC6H13 <=> NC12H26
  qf[231] = pow(sc_qss[9], 2.000000);
  qr[231] = sc[0];

  // reaction 232: H + NC12H26 <=> H2 + PXC12H25
  qf[232] = sc[0] * sc[1];
  qr[232] = sc[5] * sc_qss[13];

  // reaction 233: H + NC12H26 <=> H2 + SXC12H25
  qf[233] = sc[0] * sc[1];
  qr[233] = sc[5] * sc_qss[14];

  // reaction 234: H + NC12H26 <=> H2 + S3XC12H25
  qf[234] = sc[0] * sc[1];
  qr[234] = sc[5] * sc_qss[15];

  // reaction 235: NC12H26 + O <=> OH + PXC12H25
  qf[235] = sc[0] * sc[2];
  qr[235] = sc[3] * sc_qss[13];

  // reaction 236: NC12H26 + O <=> OH + SXC12H25
  qf[236] = sc[0] * sc[2];
  qr[236] = sc[3] * sc_qss[14];

  // reaction 237: NC12H26 + O <=> OH + S3XC12H25
  qf[237] = sc[0] * sc[2];
  qr[237] = sc[3] * sc_qss[15];

  // reaction 238: NC12H26 + OH <=> H2O + PXC12H25
  qf[238] = sc[0] * sc[3];
  qr[238] = sc[6] * sc_qss[13];

  // reaction 239: NC12H26 + OH <=> H2O + SXC12H25
  qf[239] = sc[0] * sc[3];
  qr[239] = sc[6] * sc_qss[14];

  // reaction 240: NC12H26 + OH <=> H2O + S3XC12H25
  qf[240] = sc[0] * sc[3];
  qr[240] = sc[6] * sc_qss[15];

  // reaction 241: NC12H26 + O2 <=> HO2 + PXC12H25
  qf[241] = sc[0] * sc[8];
  qr[241] = sc[4] * sc_qss[13];

  // reaction 242: NC12H26 + O2 <=> HO2 + SXC12H25
  qf[242] = sc[0] * sc[8];
  qr[242] = sc[4] * sc_qss[14];

  // reaction 243: NC12H26 + O2 <=> HO2 + S3XC12H25
  qf[243] = sc[0] * sc[8];
  qr[243] = sc[4] * sc_qss[15];

  // reaction 244: HO2 + NC12H26 <=> H2O2 + PXC12H25
  qf[244] = sc[0] * sc[4];
  qr[244] = sc[7] * sc_qss[13];

  // reaction 245: HO2 + NC12H26 <=> H2O2 + SXC12H25
  qf[245] = sc[0] * sc[4];
  qr[245] = sc[7] * sc_qss[14];

  // reaction 246: HO2 + NC12H26 <=> H2O2 + S3XC12H25
  qf[246] = sc[0] * sc[4];
  qr[246] = sc[7] * sc_qss[15];

  // reaction 247: CH3 + NC12H26 <=> CH4 + PXC12H25
  qf[247] = sc[0] * sc[9];
  qr[247] = sc[10] * sc_qss[13];

  // reaction 248: CH3 + NC12H26 <=> CH4 + SXC12H25
  qf[248] = sc[0] * sc[9];
  qr[248] = sc[10] * sc_qss[14];

  // reaction 249: CH3 + NC12H26 <=> CH4 + S3XC12H25
  qf[249] = sc[0] * sc[9];
  qr[249] = sc[10] * sc_qss[15];

  // reaction 250: O2 + PXC12H25 => C12H25O2
  qf[250] = sc[8] * sc_qss[13];
  qr[250] = 0.0;

  // reaction 251: C12H25O2 => O2 + PXC12H25
  qf[251] = sc[32];
  qr[251] = 0.0;

  // reaction 252: O2 + SXC12H25 => C12H25O2
  qf[252] = sc[8] * sc_qss[14];
  qr[252] = 0.0;

  // reaction 253: C12H25O2 => O2 + SXC12H25
  qf[253] = sc[32];
  qr[253] = 0.0;

  // reaction 254: O2 + S3XC12H25 => C12H25O2
  qf[254] = sc[8] * sc_qss[15];
  qr[254] = 0.0;

  // reaction 255: C12H25O2 => O2 + S3XC12H25
  qf[255] = sc[32];
  qr[255] = 0.0;

  // reaction 256: C12H25O2 => C12OOH
  qf[256] = sc[32];
  qr[256] = 0.0;

  // reaction 257: C12OOH => C12H25O2
  qf[257] = sc_qss[16];
  qr[257] = 0.0;

  // reaction 258: O2 + PXC12H25 => C12H24 + HO2
  qf[258] = sc[8] * sc_qss[13];
  qr[258] = 0.0;

  // reaction 259: C12H24 + HO2 => O2 + PXC12H25
  qf[259] = sc[4] * sc[31];
  qr[259] = 0.0;

  // reaction 260: O2 + SXC12H25 => C12H24 + HO2
  qf[260] = sc[8] * sc_qss[14];
  qr[260] = 0.0;

  // reaction 261: C12H24 + HO2 => O2 + SXC12H25
  qf[261] = sc[4] * sc[31];
  qr[261] = 0.0;

  // reaction 262: O2 + S3XC12H25 => C12H24 + HO2
  qf[262] = sc[8] * sc_qss[15];
  qr[262] = 0.0;

  // reaction 263: C12H24 + HO2 => O2 + S3XC12H25
  qf[263] = sc[4] * sc[31];
  qr[263] = 0.0;

  // reaction 264: C12OOH + O2 => O2C12H24OOH
  qf[264] = sc[8] * sc_qss[16];
  qr[264] = 0.0;

  // reaction 265: O2C12H24OOH => C12OOH + O2
  qf[265] = sc_qss[17];
  qr[265] = 0.0;

  // reaction 266: O2C12H24OOH <=> OC12H23OOH + OH
  qf[266] = sc_qss[17];
  qr[266] = sc[3] * sc[33];

  // reaction 267: OC12H23OOH => 3 C2H4 + C2H5 + 2 CH2CHO + OH
  qf[267] = sc[33];
  qr[267] = 0.0;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 35; ++i) {
    mixture += sc[i];
  }

  for (int i = 0; i < 18; ++i) {
    mixture += sc_qss[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[35];
  gibbs(g_RT, tc);
  amrex::Real g_RT_qss[18];
  gibbs_qss(g_RT_qss, tc);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 * invT;
  amrex::Real refCinv = 1 / refC;

  // Evaluate the kfs
  amrex::Real k_f, k_r, Corr;
  amrex::Real redP, F, logPred, logFcent, troe_c, troe_n, troe, F_troe;

  // reaction 0:  H + O2 (+M) <=> HO2 (+M)
  k_f = 5116000 * exp((0.44) * tc[0]);
  Corr = mixture + (10.89) * sc[6] + (-0.15) * sc[8] +
         (0.0900000000000001) * sc[12] + (1.18) * sc[13];
  redP = Corr / k_f * 1e-12 * 6.328e+19 *
         exp(-1.4 * tc[0] - 0.50321666580472 * (0) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent =
    log10((0.5) * exp(-tc[1] * 1e+30) + 0.5 * exp(-tc[1] * 1e-30) + 0.0);
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[0] *= Corr * k_f;
  qr[0] *= Corr * k_f * exp(-(g_RT[1] - g_RT[4] + g_RT[8])) * (refC);
  // reaction 1:  2 OH (+M) <=> H2O2 (+M)
  k_f = 111000000 * exp((-0.37) * tc[0]);
  Corr = mixture + sc[5] + (5) * sc[6] + (0.75) * sc[12] + (2.6) * sc[13];
  redP = Corr / k_f * 1e-12 * 2.01e+17 *
         exp(-0.584 * tc[0] - 0.50321666580472 * (-2293) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2654) * exp(-tc[1] * 0.0106382978723404) +
    0.7346 * exp(-tc[1] * 0.000569476082004556) + exp(-5182 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[1] *= Corr * k_f;
  qr[1] *= Corr * k_f * exp(-(2.000000 * g_RT[3] - g_RT[7])) * (refC);
  // reaction 2:  CO + H2 (+M) <=> CH2O (+M)
  k_f = 43 * exp((1.5) * tc[0] - (40056.0465980557) * invT);
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 5.07e+27 *
         exp(-3.42 * tc[0] - 0.50321666580472 * (84350) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.0679999999999999) * exp(-tc[1] * 0.0050761421319797) +
    0.932 * exp(-tc[1] * 0.000649350649350649) + exp(-10300 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[2] *= Corr * k_f;
  qr[2] *= Corr * k_f * exp(-(g_RT[5] - g_RT[11] + g_RT[12])) * (refC);
  // reaction 3:  H + HCO (+M) <=> CH2O (+M)
  k_f = 1090000 * exp((0.48) * tc[0] - (-130.836333109227) * invT);
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 1.35e+24 *
         exp(-2.57 * tc[0] - 0.50321666580472 * (1425) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2176) * exp(-tc[1] * 0.003690036900369) +
    0.7824 * exp(-tc[1] * 0.000362976406533575) + exp(-6570 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[3] *= Corr * k_f;
  qr[3] *= Corr * k_f * exp(-(g_RT[1] - g_RT[11] + g_RT_qss[2])) * (refC);
  // reaction 4:  CH2 + H (+M) <=> CH3 (+M)
  k_f = 25000000000 * exp((-0.8) * tc[0]);
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 3.2e+27 *
         exp(-3.14 * tc[0] - 0.50321666580472 * (1230) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.32) * exp(-tc[1] * 0.0128205128205128) +
    0.68 * exp(-tc[1] * 0.00050125313283208) + exp(-5590 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[4] *= Corr * k_f;
  qr[4] *= Corr * k_f * exp(-(g_RT[1] - g_RT[9] + g_RT_qss[0])) * (refC);
  // reaction 5:  CH2O + H (+M) <=> CH3O (+M)
  k_f = 540000 * exp((0.454) * tc[0] - (1308.36333109227) * invT);
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 2.2e+30 *
         exp(-4.8 * tc[0] - 0.50321666580472 * (5560) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.242) * exp(-tc[1] * 0.0106382978723404) +
    0.758 * exp(-tc[1] * 0.000643086816720257) + exp(-4200 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[5] *= Corr * k_f;
  qr[5] *= Corr * k_f * exp(-(g_RT[1] + g_RT[11] - g_RT_qss[3])) * (refC);
  // reaction 6:  CH3 + H (+M) <=> CH4 (+M)
  k_f = 12700000000 * exp((-0.63) * tc[0] - (192.731983003208) * invT);
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 2.477e+33 *
         exp(-4.76 * tc[0] - 0.50321666580472 * (2440) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.217) * exp(-tc[1] * 0.0135135135135135) +
    0.783 * exp(-tc[1] * 0.000340020401224073) + exp(-6964 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[6] *= Corr * k_f;
  qr[6] *= Corr * k_f * exp(-(g_RT[1] + g_RT[9] - g_RT[10])) * (refC);
  // reaction 7:  2 CH3 (+M) <=> C2H6 (+M)
  k_f = 21200000000 * exp((-0.97) * tc[0] - (311.994332798926) * invT);
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 1.77e+50 *
         exp(-9.67 * tc[0] - 0.50321666580472 * (6220) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.4675) * exp(-tc[1] * 0.00662251655629139) +
    0.5325 * exp(-tc[1] * 0.000963391136801541) + exp(-4970 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[7] *= Corr * k_f;
  qr[7] *= Corr * k_f * exp(-(2.000000 * g_RT[9] - g_RT[16])) * (refC);
  // reaction 8:  C2H3 (+M) <=> C2H2 + H (+M)
  k_f = 38600000 * exp((1.62) * tc[0] - (18643.2716780664) * invT);
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[14] + (2) * sc[15] + (2) * sc[16];
  redP = Corr / k_f * 1e-6 * 2.565e+27 *
         exp(-3.4 * tc[0] - 0.50321666580472 * (35798.72) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (-0.9816) * exp(-tc[1] * 0.000185745862510913) +
    1.9816 * exp(-tc[1] * 0.232926488400261) + exp(0.0795 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[8] *= Corr * k_f;
  qr[8] *= Corr * k_f * exp(-(-g_RT[1] - g_RT[14] + g_RT_qss[4])) * (refCinv);
  // reaction 9:  C2H3 + H (+M) <=> C2H4 (+M)
  k_f = 6080000 * exp((0.27) * tc[0] - (140.900666425322) * invT);
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[14] + (2) * sc[15] + (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 1.4e+30 *
         exp(-3.86 * tc[0] - 0.50321666580472 * (3320) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.218) * exp(-tc[1] * 0.00481927710843374) +
    0.782 * exp(-tc[1] * 0.000375516334960571) + exp(-6095 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[9] *= Corr * k_f;
  qr[9] *= Corr * k_f * exp(-(g_RT[1] - g_RT[15] + g_RT_qss[4])) * (refC);
  // reaction 10:  C2H3 + CH3 (+M) <=> C3H6 (+M)
  k_f = 25000000;
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[14] + (2) * sc[15] + (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 4.27e+58 *
         exp(-11.94 * tc[0] - 0.50321666580472 * (9769.8) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.825) * exp(-tc[1] * 0.000745934656124124) +
    0.175 * exp(-tc[1] * 1.66666666666667e-05) + exp(-10139.8 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[10] *= Corr * k_f;
  qr[10] *= Corr * k_f * exp(-(g_RT[9] - g_RT[19] + g_RT_qss[4])) * (refC);
  // reaction 11:  C2H4 + H (+M) <=> C2H5 (+M)
  k_f = 3975 * exp((1.28) * tc[0] - (649.466525387545) * invT);
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 4.715e+18 *
         exp(0 * tc[0] - 0.50321666580472 * (755.26) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.24) * exp(-tc[1] * 0.025) + 0.76 * exp(-tc[1] * 0.000975609756097561) +
    0.0);
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[11] *= Corr * k_f;
  qr[11] *= Corr * k_f * exp(-(g_RT[1] + g_RT[15] - g_RT_qss[5])) * (refC);
  // reaction 12:  C2H5 + H (+M) <=> C2H6 (+M)
  k_f = 521000000000 * exp((-0.99) * tc[0] - (795.082331971457) * invT);
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 1.99e+41 *
         exp(-7.08 * tc[0] - 0.50321666580472 * (6685) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.1578) * exp(-tc[1] * 0.008) +
    0.8422 * exp(-tc[1] * 0.000450653447498873) + exp(-6882 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[12] *= Corr * k_f;
  qr[12] *= Corr * k_f * exp(-(g_RT[1] - g_RT[16] + g_RT_qss[5])) * (refC);
  // reaction 13:  C2H3 + C2H5 (+M) <=> C4H81 (+M)
  k_f = 15000000;
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 1.55e+56 *
         exp(-11.79 * tc[0] - 0.50321666580472 * (8984.5) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.802) * exp(-tc[1] * 0.000439000834101585) +
    0.198 * exp(-tc[1] * 1.66666666666667e-05) + exp(-5723.2 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[13] *= Corr * k_f;
  qr[13] *= Corr * k_f * exp(-(-g_RT[22] + g_RT_qss[4] + g_RT_qss[5])) * (refC);
  // reaction 14:  H + aC3H5 (+M) <=> C3H6 (+M)
  k_f = 200000000;
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 1.33e+60 *
         exp(-12 * tc[0] - 0.50321666580472 * (5967.8) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.98) * exp(-tc[1] * 0.000911909538573774) +
    0.02 * exp(-tc[1] * 0.000911909538573774) + exp(-6859.5 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[14] *= Corr * k_f;
  qr[14] *= Corr * k_f * exp(-(g_RT[1] + g_RT[18] - g_RT[19])) * (refC);
  // reaction 15:  CH3 + aC3H5 (+M) <=> C4H81 (+M)
  k_f = 100000000 * exp((-0.32) * tc[0] - (-131.993731440578) * invT);
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 3.91e+60 *
         exp(-12.81 * tc[0] - 0.50321666580472 * (6250) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.896) * exp(-tc[1] * 0.00062266500622665) +
    0.104 * exp(-tc[1] * 1.66666666666667e-05) + exp(-6118.4 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[15] *= Corr * k_f;
  qr[15] *= Corr * k_f * exp(-(g_RT[9] + g_RT[18] - g_RT[22])) * (refC);
  // reaction 16:  C3H6 + H (+M) <=> nC3H7 (+M)
  k_f = 13300000 * exp(-(1640.83858218945) * invT);
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 6.26e+38 *
         exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0) * exp(-tc[1] * 0.001) + 1 * exp(-tc[1] * 0.000763358778625954) +
    exp(-48097 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[16] *= Corr * k_f;
  qr[16] *= Corr * k_f * exp(-(g_RT[1] + g_RT[19] - g_RT_qss[6])) * (refC);
  // reaction 17:  C4H7 + H (+M) <=> C4H81 (+M)
  k_f = 36000000;
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 3.01e+48 *
         exp(-9.32 * tc[0] - 0.50321666580472 * (5833.6) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.502) * exp(-tc[1] * 0.00076103500761035) +
    0.498 * exp(-tc[1] * 0.00076103500761035) + exp(-50000 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[17] *= Corr * k_f;
  qr[17] *= Corr * k_f * exp(-(g_RT[1] + g_RT[21] - g_RT[22])) * (refC);
  // reaction 18:  C4H81 + H (+M) <=> pC4H9 (+M)
  k_f = 13300000 * exp(-(1640.83858218945) * invT);
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 6.26e+38 *
         exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0) * exp(-tc[1] * 0.001) + 1 * exp(-tc[1] * 0.000763358778625954) +
    exp(-48097 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[18] *= Corr * k_f;
  qr[18] *= Corr * k_f * exp(-(g_RT[1] + g_RT[22] - g_RT_qss[7])) * (refC);
  // reaction 19:  C5H10 + H (+M) <=> PXC5H11 (+M)
  k_f = 13300000 * exp(-(1640.83858218945) * invT);
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 6.26e+38 *
         exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0) * exp(-tc[1] * 0.001) + 1 * exp(-tc[1] * 0.000763358778625954) +
    exp(-48097 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[19] *= Corr * k_f;
  qr[19] *= Corr * k_f * exp(-(g_RT[1] + g_RT[24] - g_RT_qss[8])) * (refC);
  // reaction 20:  C6H12 + H (+M) <=> PXC6H13 (+M)
  k_f = 13300000 * exp(-(1640.83858218945) * invT);
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 6.26e+38 *
         exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0) * exp(-tc[1] * 0.001) + 1 * exp(-tc[1] * 0.000763358778625954) +
    exp(-48097 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[20] *= Corr * k_f;
  qr[20] *= Corr * k_f * exp(-(g_RT[1] + g_RT[25] - g_RT_qss[9])) * (refC);
  // reaction 21:  C7H14 + H (+M) <=> PXC7H15 (+M)
  k_f = 13300000 * exp(-(1640.83858218945) * invT);
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 6.26e+38 *
         exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0) * exp(-tc[1] * 0.001) + 1 * exp(-tc[1] * 0.000763358778625954) +
    exp(-48097 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[21] *= Corr * k_f;
  qr[21] *= Corr * k_f * exp(-(g_RT[1] + g_RT[26] - g_RT_qss[10])) * (refC);
  // reaction 22:  C8H16 + H (+M) <=> PXC8H17 (+M)
  k_f = 13300000 * exp(-(1640.83858218945) * invT);
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 6.26e+38 *
         exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0) * exp(-tc[1] * 0.001) + 1 * exp(-tc[1] * 0.000763358778625954) +
    exp(-48097 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[22] *= Corr * k_f;
  qr[22] *= Corr * k_f * exp(-(g_RT[1] + g_RT[27] - g_RT_qss[11])) * (refC);
  // reaction 23:  C9H18 + H (+M) <=> PXC9H19 (+M)
  k_f = 13300000 * exp(-(1640.83858218945) * invT);
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 6.26e+38 *
         exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0) * exp(-tc[1] * 0.001) + 1 * exp(-tc[1] * 0.000763358778625954) +
    exp(-48097 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[23] *= Corr * k_f;
  qr[23] *= Corr * k_f * exp(-(g_RT[1] + g_RT[28] - g_RT[29])) * (refC);
  // reaction 24:  C10H20 + H (+M) <=> PXC10H21 (+M)
  k_f = 13300000 * exp(-(1640.83858218945) * invT);
  Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] + sc[13] +
         (2) * sc[16];
  redP = Corr / k_f * 1e-12 * 6.26e+38 *
         exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0) * exp(-tc[1] * 0.001) + 1 * exp(-tc[1] * 0.000763358778625954) +
    exp(-48097 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[24] *= Corr * k_f;
  qr[24] *= Corr * k_f * exp(-(g_RT[1] + g_RT[30] - g_RT_qss[12])) * (refC);
  // reaction 25:  CO + O (+M) <=> CO2 (+M)
  k_f = 13620 * exp(-(1199.66853127845) * invT);
  Corr = mixture + sc[5] + (11) * sc[6] + (0.75) * sc[12] + (2.6) * sc[13];
  redP = Corr / k_f * 1e-12 * 1.173e+24 *
         exp(-2.79 * tc[0] - 0.50321666580472 * (4191) * invT);
  Corr = redP / (1. + redP);
  qf[25] *= Corr * k_f;
  qr[25] *= Corr * k_f * exp(-(g_RT[2] + g_RT[12] - g_RT[13])) * (refC);
  // reaction 26:  2 H + M <=> H2 + M
  k_f = 1780000 * exp((-1) * tc[0]);
  Corr = mixture + (-1) * sc[5] + (-1) * sc[6] + (-1) * sc[13];
  qf[26] *= Corr * k_f;
  qr[26] *= Corr * k_f * exp(-(2.000000 * g_RT[1] - g_RT[5])) * (refC);
  // reaction 27:  H + OH + M <=> H2O + M
  k_f = 44000000000 * exp((-2) * tc[0]);
  Corr = mixture + sc[5] + (5.3) * sc[6] + (0.75) * sc[12] + (2.6) * sc[13];
  qf[27] *= Corr * k_f;
  qr[27] *= Corr * k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC);
  // reaction 28:  2 O + M <=> O2 + M
  k_f = 120000 * exp((-1) * tc[0]);
  Corr =
    mixture + (1.4) * sc[5] + (14.4) * sc[6] + (0.75) * sc[12] + (2.6) * sc[13];
  qf[28] *= Corr * k_f;
  qr[28] *= Corr * k_f * exp(-(2.000000 * g_RT[2] - g_RT[8])) * (refC);
  // reaction 29:  2 H + H2 <=> H2 + H2
  k_f = 90000 * exp((-0.6) * tc[0]);
  qf[29] *= k_f;
  qr[29] *= k_f * exp(-(2.000000 * g_RT[1] - g_RT[5])) * (refC);
  // reaction 30:  2 H + H2O <=> H2 + H2O
  k_f = 56240000 * exp((-1.25) * tc[0]);
  qf[30] *= k_f;
  qr[30] *= k_f * exp(-(2.000000 * g_RT[1] - g_RT[5])) * (refC);
  // reaction 31:  2 H + CO2 <=> H2 + CO2
  k_f = 550000000 * exp((-2) * tc[0]);
  qf[31] *= k_f;
  qr[31] *= k_f * exp(-(2.000000 * g_RT[1] - g_RT[5])) * (refC);
  // reaction 32:  H + O + M <=> OH + M
  k_f = 9428000 * exp((-1) * tc[0]);
  Corr = mixture + sc[5] + (11) * sc[6] + (0.75) * sc[12] + (2.6) * sc[13];
  qf[32] *= Corr * k_f;
  qr[32] *= Corr * k_f * exp(-(g_RT[1] + g_RT[2] - g_RT[3])) * (refC);
  // reaction 33:  HCO + M <=> CO + H + M
  k_f = 187000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
  Corr = mixture + sc[5] + (-1) * sc[6] + (0.75) * sc[12] + (2.6) * sc[13];
  qf[33] *= Corr * k_f;
  qr[33] *= Corr * k_f * exp(-(-g_RT[1] - g_RT[12] + g_RT_qss[2])) * (refCinv);
  // reaction 34:  HCO + H2O <=> CO + H + H2O
  k_f = 2244000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
  qf[34] *= k_f;
  qr[34] *= k_f * exp(-(-g_RT[1] - g_RT[12] + g_RT_qss[2])) * (refCinv);
  // reaction 35:  H + O2 <=> O + OH
  k_f = 97560000 * exp(-(7468.87259020676) * invT);
  qf[35] *= k_f;
  qr[35] *= k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[3] + g_RT[8]));
  // reaction 36:  H2 + O <=> H + OH
  k_f = 0.04589 * exp((2.7) * tc[0] - (3150.13632793755) * invT);
  qf[36] *= k_f;
  qr[36] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[3] + g_RT[5]));
  // reaction 37:  H2 + OH <=> H + H2O
  k_f = 102.4 * exp((1.6) * tc[0] - (1659.74946449039) * invT);
  qf[37] *= k_f;
  qr[37] *= k_f * exp(-(-g_RT[1] + g_RT[3] + g_RT[5] - g_RT[6]));
  // reaction 38:  2 OH <=> H2O + O
  k_f = 0.03973 * exp((2.4) * tc[0] - (-1061.78716484796) * invT);
  qf[38] *= k_f;
  qr[38] *= k_f * exp(-(-g_RT[2] + 2.000000 * g_RT[3] - g_RT[6]));
  // reaction 39:  H + HO2 <=> 2 OH
  k_f = 74850000 * exp(-(148.448916412392) * invT);
  qf[39] *= k_f;
  qr[39] *= k_f * exp(-(g_RT[1] - 2.000000 * g_RT[3] + g_RT[4]));
  // reaction 40:  H2 + O2 <=> H + HO2
  k_f = 0.5916 * exp((2.433) * tc[0] - (26923.0980538841) * invT);
  qf[40] *= k_f;
  qr[40] *= k_f * exp(-(-g_RT[1] - g_RT[4] + g_RT[5] + g_RT[8]));
  // reaction 41:  HO2 + OH <=> H2O + O2
  k_f = 28910000 * exp(-(-252.569476734047) * invT);
  qf[41] *= k_f;
  qr[41] *= k_f * exp(-(g_RT[3] + g_RT[4] - g_RT[6] - g_RT[8]));
  // reaction 42:  H + HO2 <=> H2O + O
  k_f = 3970000 * exp(-(337.658382754967) * invT);
  qf[42] *= k_f;
  qr[42] *= k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[4] - g_RT[6]));
  // reaction 43:  HO2 + O <=> O2 + OH
  k_f = 40000000;
  qf[43] *= k_f;
  qr[43] *= k_f * exp(-(g_RT[2] - g_RT[3] + g_RT[4] - g_RT[8]));
  // reaction 44:  2 HO2 <=> H2O2 + O2
  k_f = 130000 * exp(-(-820.243165261693) * invT);
  qf[44] *= k_f;
  qr[44] *= k_f * exp(-(2.000000 * g_RT[4] - g_RT[7] - g_RT[8]));
  // reaction 45:  2 HO2 <=> H2O2 + O2
  k_f = 365800000 * exp(-(6038.59998965664) * invT);
  qf[45] *= k_f;
  qr[45] *= k_f * exp(-(2.000000 * g_RT[4] - g_RT[7] - g_RT[8]));
  // reaction 46:  H + H2O2 <=> H2O + OH
  k_f = 24100000 * exp(-(1997.77016324474) * invT);
  qf[46] *= k_f;
  qr[46] *= k_f * exp(-(g_RT[1] - g_RT[3] - g_RT[6] + g_RT[7]));
  // reaction 47:  H + H2O2 <=> H2 + HO2
  k_f = 6.05 * exp((2) * tc[0] - (2616.72666218454) * invT);
  qf[47] *= k_f;
  qr[47] *= k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[5] + g_RT[7]));
  // reaction 48:  H2O2 + O <=> HO2 + OH
  k_f = 9.63 * exp((2) * tc[0] - (1997.77016324474) * invT);
  qf[48] *= k_f;
  qr[48] *= k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[4] + g_RT[7]));
  // reaction 49:  H2O2 + OH <=> H2O + HO2
  k_f = 2000000 * exp(-(214.873516298615) * invT);
  qf[49] *= k_f;
  qr[49] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[6] + g_RT[7]));
  // reaction 50:  H2O2 + OH <=> H2O + HO2
  k_f = 2.67e+35 * exp((-7) * tc[0] - (18920.9466342575) * invT);
  qf[50] *= k_f;
  qr[50] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[6] + g_RT[7]));
  // reaction 51:  CO + OH <=> CO2 + H
  k_f = 0.07046 * exp((2.053) * tc[0] - (-178.979071526765) * invT);
  qf[51] *= k_f;
  qr[51] *= k_f * exp(-(-g_RT[1] + g_RT[3] + g_RT[12] - g_RT[13]));
  // reaction 52:  CO + OH <=> CO2 + H
  k_f = 5757000 * exp((-0.664) * tc[0] - (166.98238621398) * invT);
  qf[52] *= k_f;
  qr[52] *= k_f * exp(-(-g_RT[1] + g_RT[3] + g_RT[12] - g_RT[13]));
  // reaction 53:  CO + HO2 <=> CO2 + OH
  k_f = 0.157 * exp((2.18) * tc[0] - (9029.02038003442) * invT);
  qf[53] *= k_f;
  qr[53] *= k_f * exp(-(-g_RT[3] + g_RT[4] + g_RT[12] - g_RT[13]));
  // reaction 54:  CO + O2 <=> CO2 + O
  k_f = 1119000 * exp(-(24003.4349588851) * invT);
  qf[54] *= k_f;
  qr[54] *= k_f * exp(-(-g_RT[2] + g_RT[8] + g_RT[12] - g_RT[13]));
  // reaction 55:  H + HCO <=> CO + H2
  k_f = 120000000;
  qf[55] *= k_f;
  qr[55] *= k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[12] + g_RT_qss[2]));
  // reaction 56:  HCO + O <=> CO + OH
  k_f = 30000000;
  qf[56] *= k_f;
  qr[56] *= k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[12] + g_RT_qss[2]));
  // reaction 57:  HCO + O <=> CO2 + H
  k_f = 30000000;
  qf[57] *= k_f;
  qr[57] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[13] + g_RT_qss[2]));
  // reaction 58:  HCO + OH <=> CO + H2O
  k_f = 30200000;
  qf[58] *= k_f;
  qr[58] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[12] + g_RT_qss[2]));
  // reaction 59:  HCO + O2 <=> CO + HO2
  k_f = 12040 * exp((0.807) * tc[0] - (-365.838516040031) * invT);
  qf[59] *= k_f;
  qr[59] *= k_f * exp(-(-g_RT[4] + g_RT[8] - g_RT[12] + g_RT_qss[2]));
  // reaction 60:  CH2 + O <=> H + HCO
  k_f = 80000000;
  qf[60] *= k_f;
  qr[60] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT_qss[0] - g_RT_qss[2]));
  // reaction 61:  CH2 + OH <=> CH2O + H
  k_f = 20000000;
  qf[61] *= k_f;
  qr[61] *= k_f * exp(-(-g_RT[1] + g_RT[3] - g_RT[11] + g_RT_qss[0]));
  // reaction 62:  CH2 + H2 <=> CH3 + H
  k_f = 0.5 * exp((2) * tc[0] - (3638.25649376812) * invT);
  qf[62] *= k_f;
  qr[62] *= k_f * exp(-(-g_RT[1] + g_RT[5] - g_RT[9] + g_RT_qss[0]));
  // reaction 63:  CH2 + O2 <=> HCO + OH
  k_f = 10600000 * exp(-(754.82499870708) * invT);
  qf[63] *= k_f;
  qr[63] *= k_f * exp(-(-g_RT[3] + g_RT[8] + g_RT_qss[0] - g_RT_qss[2]));
  // reaction 64:  CH2 + O2 <=> CO2 + 2 H
  k_f = 2640000 * exp(-(754.82499870708) * invT);
  qf[64] *= k_f;
  qr[64] *= k_f *
            exp(-(-2.000000 * g_RT[1] + g_RT[8] - g_RT[13] + g_RT_qss[0])) *
            (refCinv);
  // reaction 65:  CH2 + HO2 <=> CH2O + OH
  k_f = 20000000;
  qf[65] *= k_f;
  qr[65] *= k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[11] + g_RT_qss[0]));
  // reaction 66:  2 CH2 <=> C2H2 + H2
  k_f = 32000000;
  qf[66] *= k_f;
  qr[66] *= k_f * exp(-(-g_RT[5] - g_RT[14] + 2.000000 * g_RT_qss[0]));
  // reaction 67:  CH2* + N2 <=> CH2 + N2
  k_f = 15000000 * exp(-(301.929999482832) * invT);
  qf[67] *= k_f;
  qr[67] *= k_f * exp(-(g_RT[34] - g_RT[34] - g_RT_qss[0] + g_RT_qss[1]));
  // reaction 68:  CH2* + O <=> CO + H2
  k_f = 15000000;
  qf[68] *= k_f;
  qr[68] *= k_f * exp(-(g_RT[2] - g_RT[5] - g_RT[12] + g_RT_qss[1]));
  // reaction 69:  CH2* + O <=> H + HCO
  k_f = 15000000;
  qf[69] *= k_f;
  qr[69] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT_qss[1] - g_RT_qss[2]));
  // reaction 70:  CH2* + OH <=> CH2O + H
  k_f = 30000000;
  qf[70] *= k_f;
  qr[70] *= k_f * exp(-(-g_RT[1] + g_RT[3] - g_RT[11] + g_RT_qss[1]));
  // reaction 71:  CH2* + H2 <=> CH3 + H
  k_f = 70000000;
  qf[71] *= k_f;
  qr[71] *= k_f * exp(-(-g_RT[1] + g_RT[5] - g_RT[9] + g_RT_qss[1]));
  // reaction 72:  CH2* + O2 <=> CO + H + OH
  k_f = 28000000;
  qf[72] *= k_f;
  qr[72] *= k_f *
            exp(-(-g_RT[1] - g_RT[3] + g_RT[8] - g_RT[12] + g_RT_qss[1])) *
            (refCinv);
  // reaction 73:  CH2* + O2 <=> CO + H2O
  k_f = 12000000;
  qf[73] *= k_f;
  qr[73] *= k_f * exp(-(-g_RT[6] + g_RT[8] - g_RT[12] + g_RT_qss[1]));
  // reaction 74:  CH2* + H2O <=> CH2 + H2O
  k_f = 30000000;
  qf[74] *= k_f;
  qr[74] *= k_f * exp(-(g_RT[6] - g_RT[6] - g_RT_qss[0] + g_RT_qss[1]));
  // reaction 75:  CH2* + CO <=> CH2 + CO
  k_f = 9000000;
  qf[75] *= k_f;
  qr[75] *= k_f * exp(-(g_RT[12] - g_RT[12] - g_RT_qss[0] + g_RT_qss[1]));
  // reaction 76:  CH2* + CO2 <=> CH2 + CO2
  k_f = 7000000;
  qf[76] *= k_f;
  qr[76] *= k_f * exp(-(g_RT[13] - g_RT[13] - g_RT_qss[0] + g_RT_qss[1]));
  // reaction 77:  CH2* + CO2 <=> CH2O + CO
  k_f = 14000000;
  qf[77] *= k_f;
  qr[77] *= k_f * exp(-(-g_RT[11] - g_RT[12] + g_RT[13] + g_RT_qss[1]));
  // reaction 78:  CH2O + H <=> H2 + HCO
  k_f = 23000 * exp((1.05) * tc[0] - (1648.03458051046) * invT);
  qf[78] *= k_f;
  qr[78] *= k_f * exp(-(g_RT[1] - g_RT[5] + g_RT[11] - g_RT_qss[2]));
  // reaction 79:  CH2O + O <=> HCO + OH
  k_f = 39000000 * exp(-(1781.38699694871) * invT);
  qf[79] *= k_f;
  qr[79] *= k_f * exp(-(g_RT[2] - g_RT[3] + g_RT[11] - g_RT_qss[2]));
  // reaction 80:  CH2O + OH <=> H2O + HCO
  k_f = 3430 * exp((1.18) * tc[0] - (-224.93784961471) * invT);
  qf[80] *= k_f;
  qr[80] *= k_f * exp(-(g_RT[3] - g_RT[6] + g_RT[11] - g_RT_qss[2]));
  // reaction 81:  CH2O + O2 <=> HCO + HO2
  k_f = 100000000 * exp(-(20128.6666321888) * invT);
  qf[81] *= k_f;
  qr[81] *= k_f * exp(-(-g_RT[4] + g_RT[8] + g_RT[11] - g_RT_qss[2]));
  // reaction 82:  CH2O + HO2 <=> H2O2 + HCO
  k_f = 1000000 * exp(-(4025.73332643776) * invT);
  qf[82] *= k_f;
  qr[82] *= k_f * exp(-(g_RT[4] - g_RT[7] + g_RT[11] - g_RT_qss[2]));
  // reaction 83:  CH3 + O <=> CH2O + H
  k_f = 84300000;
  qf[83] *= k_f;
  qr[83] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[9] - g_RT[11]));
  // reaction 84:  CH3 + OH <=> CH2 + H2O
  k_f = 56 * exp((1.6) * tc[0] - (2727.43432866158) * invT);
  qf[84] *= k_f;
  qr[84] *= k_f * exp(-(g_RT[3] - g_RT[6] + g_RT[9] - g_RT_qss[0]));
  // reaction 85:  CH3 + OH <=> CH2* + H2O
  k_f = 25010000;
  qf[85] *= k_f;
  qr[85] *= k_f * exp(-(g_RT[3] - g_RT[6] + g_RT[9] - g_RT_qss[1]));
  // reaction 86:  CH3 + O2 <=> CH3O + O
  k_f = 30830000 * exp(-(14492.6399751759) * invT);
  qf[86] *= k_f;
  qr[86] *= k_f * exp(-(-g_RT[2] + g_RT[8] + g_RT[9] - g_RT_qss[3]));
  // reaction 87:  CH3 + O2 <=> CH2O + OH
  k_f = 36000 * exp(-(4498.75699229419) * invT);
  qf[87] *= k_f;
  qr[87] *= k_f * exp(-(-g_RT[3] + g_RT[8] + g_RT[9] - g_RT[11]));
  // reaction 88:  CH3 + HO2 <=> CH4 + O2
  k_f = 1000000;
  qf[88] *= k_f;
  qr[88] *= k_f * exp(-(g_RT[4] - g_RT[8] + g_RT[9] - g_RT[10]));
  // reaction 89:  CH3 + HO2 <=> CH3O + OH
  k_f = 13400000;
  qf[89] *= k_f;
  qr[89] *= k_f * exp(-(-g_RT[3] + g_RT[4] + g_RT[9] - g_RT_qss[3]));
  // reaction 90:  CH3 + H2O2 <=> CH4 + HO2
  k_f = 0.0245 * exp((2.47) * tc[0] - (2606.66232886845) * invT);
  qf[90] *= k_f;
  qr[90] *= k_f * exp(-(-g_RT[4] + g_RT[7] + g_RT[9] - g_RT[10]));
  // reaction 91:  CH3 + HCO <=> CH4 + CO
  k_f = 8480000;
  qf[91] *= k_f;
  qr[91] *= k_f * exp(-(g_RT[9] - g_RT[10] - g_RT[12] + g_RT_qss[2]));
  // reaction 92:  CH2O + CH3 <=> CH4 + HCO
  k_f = 0.00332 * exp((2.81) * tc[0] - (2948.84966161566) * invT);
  qf[92] *= k_f;
  qr[92] *= k_f * exp(-(g_RT[9] - g_RT[10] + g_RT[11] - g_RT_qss[2]));
  // reaction 93:  CH2 + CH3 <=> C2H4 + H
  k_f = 40000000;
  qf[93] *= k_f;
  qr[93] *= k_f * exp(-(-g_RT[1] + g_RT[9] - g_RT[15] + g_RT_qss[0]));
  // reaction 94:  CH2* + CH3 <=> C2H4 + H
  k_f = 12000000 * exp(-(-286.83349950869) * invT);
  qf[94] *= k_f;
  qr[94] *= k_f * exp(-(-g_RT[1] + g_RT[9] - g_RT[15] + g_RT_qss[1]));
  // reaction 95:  2 CH3 <=> C2H5 + H
  k_f = 4990000 * exp((0.1) * tc[0] - (5334.09665753003) * invT);
  qf[95] *= k_f;
  qr[95] *= k_f * exp(-(-g_RT[1] + 2.000000 * g_RT[9] - g_RT_qss[5]));
  // reaction 96:  CH3O + H <=> CH2O + H2
  k_f = 20000000;
  qf[96] *= k_f;
  qr[96] *= k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[11] + g_RT_qss[3]));
  // reaction 97:  CH3O + H <=> CH3 + OH
  k_f = 32000000;
  qf[97] *= k_f;
  qr[97] *= k_f * exp(-(g_RT[1] - g_RT[3] - g_RT[9] + g_RT_qss[3]));
  // reaction 98:  CH3O + H <=> CH2* + H2O
  k_f = 16000000;
  qf[98] *= k_f;
  qr[98] *= k_f * exp(-(g_RT[1] - g_RT[6] - g_RT_qss[1] + g_RT_qss[3]));
  // reaction 99:  CH3O + O <=> CH2O + OH
  k_f = 10000000;
  qf[99] *= k_f;
  qr[99] *= k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[11] + g_RT_qss[3]));
  // reaction 100:  CH3O + OH <=> CH2O + H2O
  k_f = 5000000;
  qf[100] *= k_f;
  qr[100] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[11] + g_RT_qss[3]));
  // reaction 101:  CH3O + O2 <=> CH2O + HO2
  k_f = 4.28e-19 * exp((7.6) * tc[0] - (-1776.35483029066) * invT);
  qf[101] *= k_f;
  qr[101] *= k_f * exp(-(-g_RT[4] + g_RT[8] - g_RT[11] + g_RT_qss[3]));
  // reaction 102:  CH4 + H <=> CH3 + H2
  k_f = 660 * exp((1.62) * tc[0] - (5454.86865732316) * invT);
  qf[102] *= k_f;
  qr[102] *= k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[9] + g_RT[10]));
  // reaction 103:  CH4 + O <=> CH3 + OH
  k_f = 1020 * exp((1.5) * tc[0] - (4327.66332592059) * invT);
  qf[103] *= k_f;
  qr[103] *= k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[9] + g_RT[10]));
  // reaction 104:  CH4 + OH <=> CH3 + H2O
  k_f = 100 * exp((1.6) * tc[0] - (1570.03599731073) * invT);
  qf[104] *= k_f;
  qr[104] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[9] + g_RT[10]));
  // reaction 105:  CH2 + CH4 <=> 2 CH3
  k_f = 2.46 * exp((2) * tc[0] - (4161.60182620503) * invT);
  qf[105] *= k_f;
  qr[105] *= k_f * exp(-(-2.000000 * g_RT[9] + g_RT[10] + g_RT_qss[0]));
  // reaction 106:  CH2* + CH4 <=> 2 CH3
  k_f = 16000000 * exp(-(-286.83349950869) * invT);
  qf[106] *= k_f;
  qr[106] *= k_f * exp(-(-2.000000 * g_RT[9] + g_RT[10] + g_RT_qss[1]));
  // reaction 107:  C2H2 + O <=> CH2 + CO
  k_f = 4.08 * exp((2) * tc[0] - (956.111665028967) * invT);
  qf[107] *= k_f;
  qr[107] *= k_f * exp(-(g_RT[2] - g_RT[12] + g_RT[14] - g_RT_qss[0]));
  // reaction 108:  C2H2 + OH <=> CH3 + CO
  k_f = 4.83e-10 * exp((4) * tc[0] - (-1006.43333160944) * invT);
  qf[108] *= k_f;
  qr[108] *= k_f * exp(-(g_RT[3] - g_RT[9] - g_RT[12] + g_RT[14]));
  // reaction 109:  C2H2 + HCO <=> C2H3 + CO
  k_f = 10 * exp((2) * tc[0] - (3019.29999482832) * invT);
  qf[109] *= k_f;
  qr[109] *= k_f * exp(-(-g_RT[12] + g_RT[14] + g_RT_qss[2] - g_RT_qss[4]));
  // reaction 110:  C2H2 + CH3 <=> aC3H5
  k_f = 2.68e+47 * exp((-12.82) * tc[0] - (17979.9314692026) * invT);
  qf[110] *= k_f;
  qr[110] *= k_f * exp(-(g_RT[9] + g_RT[14] - g_RT[18])) * (refC);
  // reaction 111:  C2H3 + H <=> C2H2 + H2
  k_f = 90000000;
  qf[111] *= k_f;
  qr[111] *= k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[14] + g_RT_qss[4]));
  // reaction 112:  C2H3 + O <=> CH3 + CO
  k_f = 48000000;
  qf[112] *= k_f;
  qr[112] *= k_f * exp(-(g_RT[2] - g_RT[9] - g_RT[12] + g_RT_qss[4]));
  // reaction 113:  C2H3 + OH <=> C2H2 + H2O
  k_f = 30110000;
  qf[113] *= k_f;
  qr[113] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[14] + g_RT_qss[4]));
  // reaction 114:  C2H3 + O2 <=> C2H2 + HO2
  k_f = 1.34 * exp((1.61) * tc[0] - (-192.93326966953) * invT);
  qf[114] *= k_f;
  qr[114] *= k_f * exp(-(-g_RT[4] + g_RT[8] - g_RT[14] + g_RT_qss[4]));
  // reaction 115:  C2H3 + O2 <=> CH2CHO + O
  k_f = 300000 * exp((0.29) * tc[0] - (5.53538332385192) * invT);
  qf[115] *= k_f;
  qr[115] *= k_f * exp(-(-g_RT[2] + g_RT[8] - g_RT[17] + g_RT_qss[4]));
  // reaction 116:  C2H3 + O2 <=> CH2O + HCO
  k_f = 46000000000 * exp((-1.39) * tc[0] - (508.248832462767) * invT);
  qf[116] *= k_f;
  qr[116] *= k_f * exp(-(g_RT[8] - g_RT[11] - g_RT_qss[2] + g_RT_qss[4]));
  // reaction 117:  C2H3 + HO2 <=> CH2CHO + OH
  k_f = 10000000;
  qf[117] *= k_f;
  qr[117] *= k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[17] + g_RT_qss[4]));
  // reaction 118:  C2H3 + H2O2 <=> C2H4 + HO2
  k_f = 12100 * exp(-(-299.917132819613) * invT);
  qf[118] *= k_f;
  qr[118] *= k_f * exp(-(-g_RT[4] + g_RT[7] - g_RT[15] + g_RT_qss[4]));
  // reaction 119:  C2H3 + HCO <=> C2H4 + CO
  k_f = 90330000;
  qf[119] *= k_f;
  qr[119] *= k_f * exp(-(-g_RT[12] - g_RT[15] + g_RT_qss[2] + g_RT_qss[4]));
  // reaction 120:  C2H3 + HCO <=> C2H3CHO
  k_f = 18000000;
  qf[120] *= k_f;
  qr[120] *= k_f * exp(-(-g_RT[20] + g_RT_qss[2] + g_RT_qss[4])) * (refC);
  // reaction 121:  C2H3 + CH3 <=> C2H2 + CH4
  k_f = 392000;
  qf[121] *= k_f;
  qr[121] *= k_f * exp(-(g_RT[9] - g_RT[10] - g_RT[14] + g_RT_qss[4]));
  // reaction 122:  C2H3 + CH3 <=> H + aC3H5
  k_f = 1.5e+18 * exp((-2.83) * tc[0] - (9368.88788395227) * invT);
  qf[122] *= k_f;
  qr[122] *= k_f * exp(-(-g_RT[1] + g_RT[9] - g_RT[18] + g_RT_qss[4]));
  // reaction 123:  2 C2H3 <=> C2H2 + C2H4
  k_f = 960000;
  qf[123] *= k_f;
  qr[123] *= k_f * exp(-(-g_RT[14] - g_RT[15] + 2.000000 * g_RT_qss[4]));
  // reaction 124:  CH2CHO <=> CH3 + CO
  k_f = 7.8e+41 * exp((-9.147) * tc[0] - (23600.8616262414) * invT);
  qf[124] *= k_f;
  qr[124] *= k_f * exp(-(-g_RT[9] - g_RT[12] + g_RT[17])) * (refCinv);
  // reaction 125:  CH2CHO + H <=> CH3 + HCO
  k_f = 90000000;
  qf[125] *= k_f;
  qr[125] *= k_f * exp(-(g_RT[1] - g_RT[9] + g_RT[17] - g_RT_qss[2]));
  // reaction 126:  CH2CHO + O2 <=> CH2O + CO + OH
  k_f = 18000;
  qf[126] *= k_f;
  qr[126] *= k_f * exp(-(-g_RT[3] + g_RT[8] - g_RT[11] - g_RT[12] + g_RT[17])) *
             (refCinv);
  // reaction 127:  C2H4 + H <=> C2H3 + H2
  k_f = 50.7 * exp((1.9) * tc[0] - (6516.65582217112) * invT);
  qf[127] *= k_f;
  qr[127] *= k_f * exp(-(g_RT[1] - g_RT[5] + g_RT[15] - g_RT_qss[4]));
  // reaction 128:  C2H4 + O <=> C2H3 + OH
  k_f = 15.1 * exp((1.9) * tc[0] - (1882.03033010965) * invT);
  qf[128] *= k_f;
  qr[128] *= k_f * exp(-(g_RT[2] - g_RT[3] + g_RT[15] - g_RT_qss[4]));
  // reaction 129:  C2H4 + O <=> CH3 + HCO
  k_f = 19.2 * exp((1.83) * tc[0] - (110.707666477038) * invT);
  qf[129] *= k_f;
  qr[129] *= k_f * exp(-(g_RT[2] - g_RT[9] + g_RT[15] - g_RT_qss[2]));
  // reaction 130:  C2H4 + O <=> CH2 + CH2O
  k_f = 0.384 * exp((1.83) * tc[0] - (110.707666477038) * invT);
  qf[130] *= k_f;
  qr[130] *= k_f * exp(-(g_RT[2] - g_RT[11] + g_RT[15] - g_RT_qss[0]));
  // reaction 131:  C2H4 + OH <=> C2H3 + H2O
  k_f = 3.6 * exp((2) * tc[0] - (1258.0416645118) * invT);
  qf[131] *= k_f;
  qr[131] *= k_f * exp(-(g_RT[3] - g_RT[6] + g_RT[15] - g_RT_qss[4]));
  // reaction 132:  C2H4 + HCO <=> C2H5 + CO
  k_f = 10 * exp((2) * tc[0] - (4025.73332643776) * invT);
  qf[132] *= k_f;
  qr[132] *= k_f * exp(-(-g_RT[12] + g_RT[15] + g_RT_qss[2] - g_RT_qss[5]));
  // reaction 133:  C2H4 + CH2 <=> H + aC3H5
  k_f = 20000000 * exp(-(3019.29999482832) * invT);
  qf[133] *= k_f;
  qr[133] *= k_f * exp(-(-g_RT[1] + g_RT[15] - g_RT[18] + g_RT_qss[0]));
  // reaction 134:  C2H4 + CH2* <=> H + aC3H5
  k_f = 50000000;
  qf[134] *= k_f;
  qr[134] *= k_f * exp(-(-g_RT[1] + g_RT[15] - g_RT[18] + g_RT_qss[1]));
  // reaction 135:  C2H4 + CH3 <=> C2H3 + CH4
  k_f = 0.227 * exp((2) * tc[0] - (4629.59332540342) * invT);
  qf[135] *= k_f;
  qr[135] *= k_f * exp(-(g_RT[9] - g_RT[10] + g_RT[15] - g_RT_qss[4]));
  // reaction 136:  nC3H7 <=> C2H4 + CH3
  k_f = 96000000000000 * exp(-(15611.2604302599) * invT);
  qf[136] *= k_f;
  qr[136] *= k_f * exp(-(-g_RT[9] - g_RT[15] + g_RT_qss[6])) * (refCinv);
  // reaction 137:  C2H4 + O2 <=> C2H3 + HO2
  k_f = 42200000 * exp(-(30595.573280927) * invT);
  qf[137] *= k_f;
  qr[137] *= k_f * exp(-(-g_RT[4] + g_RT[8] + g_RT[15] - g_RT_qss[4]));
  // reaction 138:  C2H3 + C2H4 <=> C4H7
  k_f = 7.93e+32 * exp((-8.47) * tc[0] - (7155.74098774311) * invT);
  qf[138] *= k_f;
  qr[138] *= k_f * exp(-(g_RT[15] - g_RT[21] + g_RT_qss[4])) * (refC);
  // reaction 139:  C2H5 + H <=> C2H4 + H2
  k_f = 2000000;
  qf[139] *= k_f;
  qr[139] *= k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[15] + g_RT_qss[5]));
  // reaction 140:  C2H5 + O <=> CH2O + CH3
  k_f = 16040000;
  qf[140] *= k_f;
  qr[140] *= k_f * exp(-(g_RT[2] - g_RT[9] - g_RT[11] + g_RT_qss[5]));
  // reaction 141:  C2H5 + O2 <=> C2H4 + HO2
  k_f = 20000;
  qf[141] *= k_f;
  qr[141] *= k_f * exp(-(-g_RT[4] + g_RT[8] - g_RT[15] + g_RT_qss[5]));
  // reaction 142:  C2H5 + HO2 <=> C2H6 + O2
  k_f = 300000;
  qf[142] *= k_f;
  qr[142] *= k_f * exp(-(g_RT[4] - g_RT[8] - g_RT[16] + g_RT_qss[5]));
  // reaction 143:  C2H5 + HO2 <=> C2H4 + H2O2
  k_f = 300000;
  qf[143] *= k_f;
  qr[143] *= k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[15] + g_RT_qss[5]));
  // reaction 144:  C2H5 + HO2 <=> CH2O + CH3 + OH
  k_f = 24000000;
  qf[144] *= k_f;
  qr[144] *= k_f *
             exp(-(-g_RT[3] + g_RT[4] - g_RT[9] - g_RT[11] + g_RT_qss[5])) *
             (refCinv);
  // reaction 145:  C2H5 + H2O2 <=> C2H6 + HO2
  k_f = 8700 * exp(-(490.133032493797) * invT);
  qf[145] *= k_f;
  qr[145] *= k_f * exp(-(-g_RT[4] + g_RT[7] - g_RT[16] + g_RT_qss[5]));
  // reaction 146:  C2H3 + C2H5 <=> CH3 + aC3H5
  k_f = 3.9e+26 * exp((-5.22) * tc[0] - (9937.0194996458) * invT);
  qf[146] *= k_f;
  qr[146] *= k_f * exp(-(-g_RT[9] - g_RT[18] + g_RT_qss[4] + g_RT_qss[5]));
  // reaction 147:  C2H6 + H <=> C2H5 + H2
  k_f = 115 * exp((1.9) * tc[0] - (3789.22149350954) * invT);
  qf[147] *= k_f;
  qr[147] *= k_f * exp(-(g_RT[1] - g_RT[5] + g_RT[16] - g_RT_qss[5]));
  // reaction 148:  C2H6 + O <=> C2H5 + OH
  k_f = 89.8 * exp((1.92) * tc[0] - (2863.30282842885) * invT);
  qf[148] *= k_f;
  qr[148] *= k_f * exp(-(g_RT[2] - g_RT[3] + g_RT[16] - g_RT_qss[5]));
  // reaction 149:  C2H6 + OH <=> C2H5 + H2O
  k_f = 3.54 * exp((2.12) * tc[0] - (437.798499250106) * invT);
  qf[149] *= k_f;
  qr[149] *= k_f * exp(-(g_RT[3] - g_RT[6] + g_RT[16] - g_RT_qss[5]));
  // reaction 150:  C2H6 + CH2* <=> C2H5 + CH3
  k_f = 40000000 * exp(-(-276.769166192596) * invT);
  qf[150] *= k_f;
  qr[150] *= k_f * exp(-(-g_RT[9] + g_RT[16] + g_RT_qss[1] - g_RT_qss[5]));
  // reaction 151:  C2H6 + CH3 <=> C2H5 + CH4
  k_f = 6.14 * exp((1.74) * tc[0] - (5258.61415765932) * invT);
  qf[151] *= k_f;
  qr[151] *= k_f * exp(-(g_RT[9] - g_RT[10] + g_RT[16] - g_RT_qss[5]));
  // reaction 152:  O + aC3H5 <=> C2H3CHO + H
  k_f = 60000000;
  qf[152] *= k_f;
  qr[152] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[18] - g_RT[20]));
  // reaction 153:  OH + aC3H5 <=> C2H3CHO + 2 H
  k_f = 4.2e+26 * exp((-5.16) * tc[0] - (15159.905274033) * invT);
  qf[153] *= k_f;
  qr[153] *= k_f * exp(-(-2.000000 * g_RT[1] + g_RT[3] + g_RT[18] - g_RT[20])) *
             (refCinv);
  // reaction 154:  O2 + aC3H5 <=> C2H3CHO + OH
  k_f = 18200000 * exp((-0.41) * tc[0] - (11503.0297636301) * invT);
  qf[154] *= k_f;
  qr[154] *= k_f * exp(-(-g_RT[3] + g_RT[8] + g_RT[18] - g_RT[20]));
  // reaction 155:  HO2 + aC3H5 <=> C3H6 + O2
  k_f = 2660000;
  qf[155] *= k_f;
  qr[155] *= k_f * exp(-(g_RT[4] - g_RT[8] + g_RT[18] - g_RT[19]));
  // reaction 156:  HO2 + aC3H5 <=> C2H3 + CH2O + OH
  k_f = 6600000;
  qf[156] *= k_f;
  qr[156] *= k_f *
             exp(-(-g_RT[3] + g_RT[4] - g_RT[11] + g_RT[18] - g_RT_qss[4])) *
             (refCinv);
  // reaction 157:  HCO + aC3H5 <=> C3H6 + CO
  k_f = 60000000;
  qf[157] *= k_f;
  qr[157] *= k_f * exp(-(-g_RT[12] + g_RT[18] - g_RT[19] + g_RT_qss[2]));
  // reaction 158:  C3H6 + H <=> C2H4 + CH3
  k_f = 8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  qf[158] *= k_f;
  qr[158] *= k_f * exp(-(g_RT[1] - g_RT[9] - g_RT[15] + g_RT[19]));
  // reaction 159:  C3H6 + H <=> H2 + aC3H5
  k_f = 0.173 * exp((2.5) * tc[0] - (1253.00949785375) * invT);
  qf[159] *= k_f;
  qr[159] *= k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[18] + g_RT[19]));
  // reaction 160:  C3H6 + O <=> C2H3CHO + 2 H
  k_f = 40 * exp((1.65) * tc[0] - (164.551849718143) * invT);
  qf[160] *= k_f;
  qr[160] *= k_f * exp(-(-2.000000 * g_RT[1] + g_RT[2] + g_RT[19] - g_RT[20])) *
             (refCinv);
  // reaction 161:  C3H6 + O => C2H5 + HCO
  k_f = 35 * exp((1.65) * tc[0] - (-489.126599162188) * invT);
  qf[161] *= k_f;
  qr[161] *= k_f * exp(-(g_RT[2] + g_RT[19] - g_RT_qss[2] - g_RT_qss[5]));
  // reaction 162:  C3H6 + O <=> OH + aC3H5
  k_f = 180000 * exp((0.7) * tc[0] - (2958.91399493175) * invT);
  qf[162] *= k_f;
  qr[162] *= k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[18] + g_RT[19]));
  // reaction 163:  C3H6 + OH <=> H2O + aC3H5
  k_f = 3.1 * exp((2) * tc[0] - (-149.958566409806) * invT);
  qf[163] *= k_f;
  qr[163] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[18] + g_RT[19]));
  // reaction 164:  C3H6 + HO2 <=> H2O2 + aC3H5
  k_f = 0.0096 * exp((2.6) * tc[0] - (6999.74382134365) * invT);
  qf[164] *= k_f;
  qr[164] *= k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[18] + g_RT[19]));
  // reaction 165:  C3H6 + CH3 <=> CH4 + aC3H5
  k_f = 2.2e-06 * exp((3.5) * tc[0] - (2855.75457844178) * invT);
  qf[165] *= k_f;
  qr[165] *= k_f * exp(-(g_RT[9] - g_RT[10] - g_RT[18] + g_RT[19]));
  // reaction 166:  C2H3CHO + H <=> C2H4 + HCO
  k_f = 108000 * exp((0.454) * tc[0] - (2928.72099498347) * invT);
  qf[166] *= k_f;
  qr[166] *= k_f * exp(-(g_RT[1] - g_RT[15] + g_RT[20] - g_RT_qss[2]));
  // reaction 167:  C2H3CHO + O <=> C2H3 + CO + OH
  k_f = 30000000 * exp(-(1781.38699694871) * invT);
  qf[167] *= k_f;
  qr[167] *= k_f *
             exp(-(g_RT[2] - g_RT[3] - g_RT[12] + g_RT[20] - g_RT_qss[4])) *
             (refCinv);
  // reaction 168:  C2H3CHO + OH <=> C2H3 + CO + H2O
  k_f = 3430 * exp((1.18) * tc[0] - (-224.93784961471) * invT);
  qf[168] *= k_f;
  qr[168] *= k_f *
             exp(-(g_RT[3] - g_RT[6] - g_RT[12] + g_RT[20] - g_RT_qss[4])) *
             (refCinv);
  // reaction 169:  H + nC3H7 <=> C2H5 + CH3
  k_f = 3.7e+18 * exp((-2.92) * tc[0] - (6292.72440588802) * invT);
  qf[169] *= k_f;
  qr[169] *= k_f * exp(-(g_RT[1] - g_RT[9] - g_RT_qss[5] + g_RT_qss[6]));
  // reaction 170:  H + nC3H7 <=> C3H6 + H2
  k_f = 1800000;
  qf[170] *= k_f;
  qr[170] *= k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[19] + g_RT_qss[6]));
  // reaction 171:  O + nC3H7 <=> C2H5 + CH2O
  k_f = 96000000;
  qf[171] *= k_f;
  qr[171] *= k_f * exp(-(g_RT[2] - g_RT[11] - g_RT_qss[5] + g_RT_qss[6]));
  // reaction 172:  OH + nC3H7 <=> C3H6 + H2O
  k_f = 24000000;
  qf[172] *= k_f;
  qr[172] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[19] + g_RT_qss[6]));
  // reaction 173:  O2 + nC3H7 <=> C3H6 + HO2
  k_f = 90000;
  qf[173] *= k_f;
  qr[173] *= k_f * exp(-(-g_RT[4] + g_RT[8] - g_RT[19] + g_RT_qss[6]));
  // reaction 174:  HO2 + nC3H7 <=> C2H5 + CH2O + OH
  k_f = 24000000;
  qf[174] *= k_f;
  qr[174] *= k_f *
             exp(-(-g_RT[3] + g_RT[4] - g_RT[11] - g_RT_qss[5] + g_RT_qss[6])) *
             (refCinv);
  // reaction 175:  CH3 + nC3H7 <=> C3H6 + CH4
  k_f = 11000000;
  qf[175] *= k_f;
  qr[175] *= k_f * exp(-(g_RT[9] - g_RT[10] - g_RT[19] + g_RT_qss[6]));
  // reaction 176:  C4H7 + H <=> CH3 + aC3H5
  k_f = 2e+15 * exp((-2) * tc[0] - (5535.38332385192) * invT);
  qf[176] *= k_f;
  qr[176] *= k_f * exp(-(g_RT[1] - g_RT[9] - g_RT[18] + g_RT[21]));
  // reaction 177:  C4H7 + HO2 <=> CH2O + OH + aC3H5
  k_f = 24000000;
  qf[177] *= k_f;
  qr[177] *= k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[11] - g_RT[18] + g_RT[21])) *
             (refCinv);
  // reaction 178:  C4H7 + HCO <=> C4H81 + CO
  k_f = 60000000;
  qf[178] *= k_f;
  qr[178] *= k_f * exp(-(-g_RT[12] + g_RT[21] - g_RT[22] + g_RT_qss[2]));
  // reaction 179:  C4H81 + H <=> C2H4 + C2H5
  k_f = 1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  qf[179] *= k_f;
  qr[179] *= k_f * exp(-(g_RT[1] - g_RT[15] + g_RT[22] - g_RT_qss[5]));
  // reaction 180:  C4H81 + H <=> C3H6 + CH3
  k_f = 3.2e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  qf[180] *= k_f;
  qr[180] *= k_f * exp(-(g_RT[1] - g_RT[9] - g_RT[19] + g_RT[22]));
  // reaction 181:  C4H81 + H <=> C4H7 + H2
  k_f = 0.65 * exp((2.54) * tc[0] - (3399.73179417669) * invT);
  qf[181] *= k_f;
  qr[181] *= k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[21] + g_RT[22]));
  // reaction 182:  C4H81 + O => HCO + nC3H7
  k_f = 330 * exp((1.45) * tc[0] - (-202.293099653497) * invT);
  qf[182] *= k_f;
  qr[182] *= k_f * exp(-(g_RT[2] + g_RT[22] - g_RT_qss[2] - g_RT_qss[6]));
  // reaction 183:  C4H81 + O <=> C4H7 + OH
  k_f = 15000000 * exp(-(2898.52799503519) * invT);
  qf[183] *= k_f;
  qr[183] *= k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[21] + g_RT[22]));
  // reaction 184:  C4H81 + O <=> C4H7 + OH
  k_f = 26000000 * exp(-(2249.3784961471) * invT);
  qf[184] *= k_f;
  qr[184] *= k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[21] + g_RT[22]));
  // reaction 185:  C4H81 + OH <=> C4H7 + H2O
  k_f = 0.0007 * exp((2.66) * tc[0] - (265.195182879087) * invT);
  qf[185] *= k_f;
  qr[185] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[21] + g_RT[22]));
  // reaction 186:  C4H81 + O2 <=> C4H7 + HO2
  k_f = 20000000 * exp(-(25628.8247894344) * invT);
  qf[186] *= k_f;
  qr[186] *= k_f * exp(-(-g_RT[4] + g_RT[8] - g_RT[21] + g_RT[22]));
  // reaction 187:  C4H81 + HO2 <=> C4H7 + H2O2
  k_f = 1000000 * exp(-(7216.12698763968) * invT);
  qf[187] *= k_f;
  qr[187] *= k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[21] + g_RT[22]));
  // reaction 188:  C4H81 + CH3 <=> C4H7 + CH4
  k_f = 4.5e-07 * exp((3.65) * tc[0] - (3599.50881050116) * invT);
  qf[188] *= k_f;
  qr[188] *= k_f * exp(-(g_RT[9] - g_RT[10] - g_RT[21] + g_RT[22]));
  // reaction 189:  H + pC4H9 => 2 C2H5
  k_f = 3.7e+18 * exp((-2.92) * tc[0] - (6292.72440588802) * invT);
  qf[189] *= k_f;
  qr[189] *= k_f * exp(-(g_RT[1] - 2.000000 * g_RT_qss[5] + g_RT_qss[7]));
  // reaction 190:  H + pC4H9 <=> C4H81 + H2
  k_f = 1800000;
  qf[190] *= k_f;
  qr[190] *= k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[22] + g_RT_qss[7]));
  // reaction 191:  O + pC4H9 <=> CH2O + nC3H7
  k_f = 96000000;
  qf[191] *= k_f;
  qr[191] *= k_f * exp(-(g_RT[2] - g_RT[11] - g_RT_qss[6] + g_RT_qss[7]));
  // reaction 192:  OH + pC4H9 <=> C4H81 + H2O
  k_f = 24000000;
  qf[192] *= k_f;
  qr[192] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[22] + g_RT_qss[7]));
  // reaction 193:  O2 + pC4H9 <=> C4H81 + HO2
  k_f = 270000;
  qf[193] *= k_f;
  qr[193] *= k_f * exp(-(-g_RT[4] + g_RT[8] - g_RT[22] + g_RT_qss[7]));
  // reaction 194:  HO2 + pC4H9 <=> CH2O + OH + nC3H7
  k_f = 24000000;
  qf[194] *= k_f;
  qr[194] *= k_f *
             exp(-(-g_RT[3] + g_RT[4] - g_RT[11] - g_RT_qss[6] + g_RT_qss[7])) *
             (refCinv);
  // reaction 195:  CH3 + pC4H9 <=> C4H81 + CH4
  k_f = 11000000;
  qf[195] *= k_f;
  qr[195] *= k_f * exp(-(g_RT[9] - g_RT[10] - g_RT[22] + g_RT_qss[7]));
  // reaction 196:  C5H9 => C2H4 + aC3H5
  k_f = 25000000000000 * exp(-(15106.1214767918) * invT);
  qf[196] *= k_f;
  qr[196] *= k_f * exp(-(-g_RT[15] - g_RT[18] + g_RT[23])) * (refCinv);
  // reaction 197:  C5H9 => C2H3 + C3H6
  k_f = 25000000000000 * exp(-(15106.1214767918) * invT);
  qf[197] *= k_f;
  qr[197] *= k_f * exp(-(-g_RT[19] + g_RT[23] - g_RT_qss[4])) * (refCinv);
  // reaction 198:  C5H10 + H <=> C2H4 + nC3H7
  k_f = 8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  qf[198] *= k_f;
  qr[198] *= k_f * exp(-(g_RT[1] - g_RT[15] + g_RT[24] - g_RT_qss[6]));
  // reaction 199:  C5H10 + H <=> C2H5 + C3H6
  k_f = 1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  qf[199] *= k_f;
  qr[199] *= k_f * exp(-(g_RT[1] - g_RT[19] + g_RT[24] - g_RT_qss[5]));
  // reaction 200:  C2H4 + nC3H7 <=> PXC5H11
  k_f = 300000 * exp(-(3673.48166037445) * invT);
  qf[200] *= k_f;
  qr[200] *= k_f * exp(-(g_RT[15] + g_RT_qss[6] - g_RT_qss[8])) * (refC);
  // reaction 201:  C6H12 + H <=> C2H4 + pC4H9
  k_f = 8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  qf[201] *= k_f;
  qr[201] *= k_f * exp(-(g_RT[1] - g_RT[15] + g_RT[25] - g_RT_qss[7]));
  // reaction 202:  C6H12 + H <=> C3H6 + nC3H7
  k_f = 1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  qf[202] *= k_f;
  qr[202] *= k_f * exp(-(g_RT[1] - g_RT[19] + g_RT[25] - g_RT_qss[6]));
  // reaction 203:  C2H4 + pC4H9 <=> PXC6H13
  k_f = 300000 * exp(-(3673.48166037445) * invT);
  qf[203] *= k_f;
  qr[203] *= k_f * exp(-(g_RT[15] + g_RT_qss[7] - g_RT_qss[9])) * (refC);
  // reaction 204:  C7H14 + H <=> C2H4 + PXC5H11
  k_f = 8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  qf[204] *= k_f;
  qr[204] *= k_f * exp(-(g_RT[1] - g_RT[15] + g_RT[26] - g_RT_qss[8]));
  // reaction 205:  C7H14 + H <=> C3H6 + pC4H9
  k_f = 1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  qf[205] *= k_f;
  qr[205] *= k_f * exp(-(g_RT[1] - g_RT[19] + g_RT[26] - g_RT_qss[7]));
  // reaction 206:  C2H4 + PXC5H11 <=> PXC7H15
  k_f = 300000 * exp(-(3673.48166037445) * invT);
  qf[206] *= k_f;
  qr[206] *= k_f * exp(-(g_RT[15] + g_RT_qss[8] - g_RT_qss[10])) * (refC);
  // reaction 207:  C8H16 + H <=> C2H4 + PXC6H13
  k_f = 8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  qf[207] *= k_f;
  qr[207] *= k_f * exp(-(g_RT[1] - g_RT[15] + g_RT[27] - g_RT_qss[9]));
  // reaction 208:  C8H16 + H <=> C3H6 + PXC5H11
  k_f = 1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  qf[208] *= k_f;
  qr[208] *= k_f * exp(-(g_RT[1] - g_RT[19] + g_RT[27] - g_RT_qss[8]));
  // reaction 209:  C2H4 + PXC6H13 <=> PXC8H17
  k_f = 300000 * exp(-(3673.48166037445) * invT);
  qf[209] *= k_f;
  qr[209] *= k_f * exp(-(g_RT[15] + g_RT_qss[9] - g_RT_qss[11])) * (refC);
  // reaction 210:  C9H18 + H <=> C2H4 + PXC7H15
  k_f = 8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  qf[210] *= k_f;
  qr[210] *= k_f * exp(-(g_RT[1] - g_RT[15] + g_RT[28] - g_RT_qss[10]));
  // reaction 211:  C9H18 + H <=> C3H6 + PXC6H13
  k_f = 1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  qf[211] *= k_f;
  qr[211] *= k_f * exp(-(g_RT[1] - g_RT[19] + g_RT[28] - g_RT_qss[9]));
  // reaction 212:  C2H4 + PXC7H15 <=> PXC9H19
  k_f = 300000 * exp(-(3673.48166037445) * invT);
  qf[212] *= k_f;
  qr[212] *= k_f * exp(-(g_RT[15] - g_RT[29] + g_RT_qss[10])) * (refC);
  // reaction 213:  C10H20 + H <=> C2H4 + PXC8H17
  k_f = 8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  qf[213] *= k_f;
  qr[213] *= k_f * exp(-(g_RT[1] - g_RT[15] + g_RT[30] - g_RT_qss[11]));
  // reaction 214:  C10H20 + H <=> C3H6 + PXC7H15
  k_f = 1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  qf[214] *= k_f;
  qr[214] *= k_f * exp(-(g_RT[1] - g_RT[19] + g_RT[30] - g_RT_qss[10]));
  // reaction 215:  C2H4 + PXC8H17 <=> PXC10H21
  k_f = 300000 * exp(-(3673.48166037445) * invT);
  qf[215] *= k_f;
  qr[215] *= k_f * exp(-(g_RT[15] + g_RT_qss[11] - g_RT_qss[12])) * (refC);
  // reaction 216:  C12H24 <=> C5H9 + PXC7H15
  k_f = 3.5e+16 * exp(-(35696.6303005228) * invT);
  qf[216] *= k_f;
  qr[216] *= k_f * exp(-(-g_RT[23] + g_RT[31] - g_RT_qss[10])) * (refCinv);
  // reaction 217:  C2H4 + PXC10H21 <=> PXC12H25
  k_f = 300000 * exp(-(3673.48166037445) * invT);
  qf[217] *= k_f;
  qr[217] *= k_f * exp(-(g_RT[15] + g_RT_qss[12] - g_RT_qss[13])) * (refC);
  // reaction 218:  PXC12H25 <=> S3XC12H25
  k_f = 3670000000000 * exp((-0.6) * tc[0] - (7246.31998758796) * invT);
  qf[218] *= k_f;
  qr[218] *= k_f * exp(-(g_RT_qss[13] - g_RT_qss[15]));
  // reaction 219:  C3H6 + PXC9H19 <=> SXC12H25
  k_f = 300000 * exp(-(3673.48166037445) * invT);
  qf[219] *= k_f;
  qr[219] *= k_f * exp(-(g_RT[19] + g_RT[29] - g_RT_qss[14])) * (refC);
  // reaction 220:  C4H81 + PXC8H17 <=> SXC12H25
  k_f = 300000 * exp(-(3673.48166037445) * invT);
  qf[220] *= k_f;
  qr[220] *= k_f * exp(-(g_RT[22] + g_RT_qss[11] - g_RT_qss[14])) * (refC);
  // reaction 221:  C5H10 + PXC7H15 <=> S3XC12H25
  k_f = 300000 * exp(-(3673.48166037445) * invT);
  qf[221] *= k_f;
  qr[221] *= k_f * exp(-(g_RT[24] + g_RT_qss[10] - g_RT_qss[15])) * (refC);
  // reaction 222:  C10H20 + C2H5 <=> S3XC12H25
  k_f = 300000 * exp(-(3673.48166037445) * invT);
  qf[222] *= k_f;
  qr[222] *= k_f * exp(-(g_RT[30] + g_RT_qss[5] - g_RT_qss[15])) * (refC);
  // reaction 223:  C6H12 + PXC6H13 <=> S3XC12H25
  k_f = 300000 * exp(-(3673.48166037445) * invT);
  qf[223] *= k_f;
  qr[223] *= k_f * exp(-(g_RT[25] + g_RT_qss[9] - g_RT_qss[15])) * (refC);
  // reaction 224:  C9H18 + nC3H7 <=> S3XC12H25
  k_f = 300000 * exp(-(3673.48166037445) * invT);
  qf[224] *= k_f;
  qr[224] *= k_f * exp(-(g_RT[28] + g_RT_qss[6] - g_RT_qss[15])) * (refC);
  // reaction 225:  C7H14 + PXC5H11 <=> S3XC12H25
  k_f = 300000 * exp(-(3673.48166037445) * invT);
  qf[225] *= k_f;
  qr[225] *= k_f * exp(-(g_RT[26] + g_RT_qss[8] - g_RT_qss[15])) * (refC);
  // reaction 226:  C8H16 + pC4H9 <=> S3XC12H25
  k_f = 300000 * exp(-(3673.48166037445) * invT);
  qf[226] *= k_f;
  qr[226] *= k_f * exp(-(g_RT[27] + g_RT_qss[7] - g_RT_qss[15])) * (refC);
  // reaction 227:  C2H5 + PXC10H21 <=> NC12H26
  k_f = 188000000 * exp((-0.5) * tc[0]);
  qf[227] *= k_f;
  qr[227] *= k_f * exp(-(-g_RT[0] + g_RT_qss[5] + g_RT_qss[12])) * (refC);
  // reaction 228:  PXC9H19 + nC3H7 <=> NC12H26
  k_f = 188000000 * exp((-0.5) * tc[0]);
  qf[228] *= k_f;
  qr[228] *= k_f * exp(-(-g_RT[0] + g_RT[29] + g_RT_qss[6])) * (refC);
  // reaction 229:  PXC8H17 + pC4H9 <=> NC12H26
  k_f = 188000000 * exp((-0.5) * tc[0]);
  qf[229] *= k_f;
  qr[229] *= k_f * exp(-(-g_RT[0] + g_RT_qss[7] + g_RT_qss[11])) * (refC);
  // reaction 230:  PXC5H11 + PXC7H15 <=> NC12H26
  k_f = 188000000 * exp((-0.5) * tc[0]);
  qf[230] *= k_f;
  qr[230] *= k_f * exp(-(-g_RT[0] + g_RT_qss[8] + g_RT_qss[10])) * (refC);
  // reaction 231:  2 PXC6H13 <=> NC12H26
  k_f = 188000000 * exp((-0.5) * tc[0]);
  qf[231] *= k_f;
  qr[231] *= k_f * exp(-(-g_RT[0] + 2.000000 * g_RT_qss[9])) * (refC);
  // reaction 232:  H + NC12H26 <=> H2 + PXC12H25
  k_f = 1.3 * exp((2.54) * tc[0] - (3399.73179417669) * invT);
  qf[232] *= k_f;
  qr[232] *= k_f * exp(-(g_RT[0] + g_RT[1] - g_RT[5] - g_RT_qss[13]));
  // reaction 233:  H + NC12H26 <=> H2 + SXC12H25
  k_f = 2.6 * exp((2.4) * tc[0] - (2249.8817128129) * invT);
  qf[233] *= k_f;
  qr[233] *= k_f * exp(-(g_RT[0] + g_RT[1] - g_RT[5] - g_RT_qss[14]));
  // reaction 234:  H + NC12H26 <=> H2 + S3XC12H25
  k_f = 3.9 * exp((2.4) * tc[0] - (2249.8817128129) * invT);
  qf[234] *= k_f;
  qr[234] *= k_f * exp(-(g_RT[0] + g_RT[1] - g_RT[5] - g_RT_qss[15]));
  // reaction 235:  NC12H26 + O <=> OH + PXC12H25
  k_f = 0.19 * exp((2.68) * tc[0] - (1869.95313013034) * invT);
  qf[235] *= k_f;
  qr[235] *= k_f * exp(-(g_RT[0] + g_RT[2] - g_RT[3] - g_RT_qss[13]));
  // reaction 236:  NC12H26 + O <=> OH + SXC12H25
  k_f = 0.0952 * exp((2.71) * tc[0] - (1059.77429818474) * invT);
  qf[236] *= k_f;
  qr[236] *= k_f * exp(-(g_RT[0] + g_RT[2] - g_RT[3] - g_RT_qss[14]));
  // reaction 237:  NC12H26 + O <=> OH + S3XC12H25
  k_f = 0.1428 * exp((2.71) * tc[0] - (1059.77429818474) * invT);
  qf[237] *= k_f;
  qr[237] *= k_f * exp(-(g_RT[0] + g_RT[2] - g_RT[3] - g_RT_qss[15]));
  // reaction 238:  NC12H26 + OH <=> H2O + PXC12H25
  k_f = 0.0034 * exp((2.66) * tc[0] - (265.195182879087) * invT);
  qf[238] *= k_f;
  qr[238] *= k_f * exp(-(g_RT[0] + g_RT[3] - g_RT[6] - g_RT_qss[13]));
  // reaction 239:  NC12H26 + OH <=> H2O + SXC12H25
  k_f = 0.074 * exp((2.39) * tc[0] - (197.764149661255) * invT);
  qf[239] *= k_f;
  qr[239] *= k_f * exp(-(g_RT[0] + g_RT[3] - g_RT[6] - g_RT_qss[14]));
  // reaction 240:  NC12H26 + OH <=> H2O + S3XC12H25
  k_f = 0.101 * exp((2.39) * tc[0] - (197.764149661255) * invT);
  qf[240] *= k_f;
  qr[240] *= k_f * exp(-(g_RT[0] + g_RT[3] - g_RT[6] - g_RT_qss[15]));
  // reaction 241:  NC12H26 + O2 <=> HO2 + PXC12H25
  k_f = 40000000 * exp(-(25628.8247894344) * invT);
  qf[241] *= k_f;
  qr[241] *= k_f * exp(-(g_RT[0] - g_RT[4] + g_RT[8] - g_RT_qss[13]));
  // reaction 242:  NC12H26 + O2 <=> HO2 + SXC12H25
  k_f = 80000000 * exp(-(23948.0811256466) * invT);
  qf[242] *= k_f;
  qr[242] *= k_f * exp(-(g_RT[0] - g_RT[4] + g_RT[8] - g_RT_qss[14]));
  // reaction 243:  NC12H26 + O2 <=> HO2 + S3XC12H25
  k_f = 120000000 * exp(-(23948.0811256466) * invT);
  qf[243] *= k_f;
  qr[243] *= k_f * exp(-(g_RT[0] - g_RT[4] + g_RT[8] - g_RT_qss[15]));
  // reaction 244:  HO2 + NC12H26 <=> H2O2 + PXC12H25
  k_f = 0.0676 * exp((2.55) * tc[0] - (8298.04281911983) * invT);
  qf[244] *= k_f;
  qr[244] *= k_f * exp(-(g_RT[0] + g_RT[4] - g_RT[7] - g_RT_qss[13]));
  // reaction 245:  HO2 + NC12H26 <=> H2O2 + SXC12H25
  k_f = 0.089 * exp((2.6) * tc[0] - (6999.74382134365) * invT);
  qf[245] *= k_f;
  qr[245] *= k_f * exp(-(g_RT[0] + g_RT[4] - g_RT[7] - g_RT_qss[14]));
  // reaction 246:  HO2 + NC12H26 <=> H2O2 + S3XC12H25
  k_f = 0.0885 * exp((2.6) * tc[0] - (6999.74382134365) * invT);
  qf[246] *= k_f;
  qr[246] *= k_f * exp(-(g_RT[0] + g_RT[4] - g_RT[7] - g_RT_qss[15]));
  // reaction 247:  CH3 + NC12H26 <=> CH4 + PXC12H25
  k_f = 1.81e-06 * exp((3.65) * tc[0] - (3599.50881050116) * invT);
  qf[247] *= k_f;
  qr[247] *= k_f * exp(-(g_RT[0] + g_RT[9] - g_RT[10] - g_RT_qss[13]));
  // reaction 248:  CH3 + NC12H26 <=> CH4 + SXC12H25
  k_f = 6e-06 * exp((3.46) * tc[0] - (2757.62732860986) * invT);
  qf[248] *= k_f;
  qr[248] *= k_f * exp(-(g_RT[0] + g_RT[9] - g_RT[10] - g_RT_qss[14]));
  // reaction 249:  CH3 + NC12H26 <=> CH4 + S3XC12H25
  k_f = 9e-06 * exp((3.46) * tc[0] - (2757.62732860986) * invT);
  qf[249] *= k_f;
  qr[249] *= k_f * exp(-(g_RT[0] + g_RT[9] - g_RT[10] - g_RT_qss[15]));
  // reaction 250:  O2 + PXC12H25 => C12H25O2
  k_f = 50000000;
  qf[250] *= k_f;
  qr[250] *= k_f * exp(-(g_RT[8] - g_RT[32] + g_RT_qss[13])) * (refC);
  // reaction 251:  C12H25O2 => O2 + PXC12H25
  k_f = 27500000000000 * exp(-(13788.1366430493) * invT);
  qf[251] *= k_f;
  qr[251] *= k_f * exp(-(-g_RT[8] + g_RT[32] - g_RT_qss[13])) * (refCinv);
  // reaction 252:  O2 + SXC12H25 => C12H25O2
  k_f = 50000000;
  qf[252] *= k_f;
  qr[252] *= k_f * exp(-(g_RT[8] - g_RT[32] + g_RT_qss[14])) * (refC);
  // reaction 253:  C12H25O2 => O2 + SXC12H25
  k_f = 27500000000000 * exp(-(13788.1366430493) * invT);
  qf[253] *= k_f;
  qr[253] *= k_f * exp(-(-g_RT[8] + g_RT[32] - g_RT_qss[14])) * (refCinv);
  // reaction 254:  O2 + S3XC12H25 => C12H25O2
  k_f = 50000000;
  qf[254] *= k_f;
  qr[254] *= k_f * exp(-(g_RT[8] - g_RT[32] + g_RT_qss[15])) * (refC);
  // reaction 255:  C12H25O2 => O2 + S3XC12H25
  k_f = 27500000000000 * exp(-(13788.1366430493) * invT);
  qf[255] *= k_f;
  qr[255] *= k_f * exp(-(-g_RT[8] + g_RT[32] - g_RT_qss[15])) * (refCinv);
  // reaction 256:  C12H25O2 => C12OOH
  k_f = 1510000000000 * exp(-(9561.11665028967) * invT);
  qf[256] *= k_f;
  qr[256] *= k_f * exp(-(g_RT[32] - g_RT_qss[16]));
  // reaction 257:  C12OOH => C12H25O2
  k_f = 100000000000 * exp(-(5786.99165675428) * invT);
  qf[257] *= k_f;
  qr[257] *= k_f * exp(-(-g_RT[32] + g_RT_qss[16]));
  // reaction 258:  O2 + PXC12H25 => C12H24 + HO2
  k_f = 350000 * exp(-(3019.29999482832) * invT);
  qf[258] *= k_f;
  qr[258] *= k_f * exp(-(-g_RT[4] + g_RT[8] - g_RT[31] + g_RT_qss[13]));
  // reaction 259:  C12H24 + HO2 => O2 + PXC12H25
  k_f = 316000 * exp(-(9812.72498319203) * invT);
  qf[259] *= k_f;
  qr[259] *= k_f * exp(-(g_RT[4] - g_RT[8] + g_RT[31] - g_RT_qss[13]));
  // reaction 260:  O2 + SXC12H25 => C12H24 + HO2
  k_f = 350000 * exp(-(3019.29999482832) * invT);
  qf[260] *= k_f;
  qr[260] *= k_f * exp(-(-g_RT[4] + g_RT[8] - g_RT[31] + g_RT_qss[14]));
  // reaction 261:  C12H24 + HO2 => O2 + SXC12H25
  k_f = 316000 * exp(-(9812.72498319203) * invT);
  qf[261] *= k_f;
  qr[261] *= k_f * exp(-(g_RT[4] - g_RT[8] + g_RT[31] - g_RT_qss[14]));
  // reaction 262:  O2 + S3XC12H25 => C12H24 + HO2
  k_f = 350000 * exp(-(3019.29999482832) * invT);
  qf[262] *= k_f;
  qr[262] *= k_f * exp(-(-g_RT[4] + g_RT[8] - g_RT[31] + g_RT_qss[15]));
  // reaction 263:  C12H24 + HO2 => O2 + S3XC12H25
  k_f = 316000 * exp(-(9812.72498319203) * invT);
  qf[263] *= k_f;
  qr[263] *= k_f * exp(-(g_RT[4] - g_RT[8] + g_RT[31] - g_RT_qss[15]));
  // reaction 264:  C12OOH + O2 => O2C12H24OOH
  k_f = 46000;
  qf[264] *= k_f;
  qr[264] *= k_f * exp(-(g_RT[8] + g_RT_qss[16] - g_RT_qss[17])) * (refC);
  // reaction 265:  O2C12H24OOH => C12OOH + O2
  k_f = 25100000000000 * exp(-(13788.1366430493) * invT);
  qf[265] *= k_f;
  qr[265] *= k_f * exp(-(-g_RT[8] - g_RT_qss[16] + g_RT_qss[17])) * (refCinv);
  // reaction 266:  O2C12H24OOH <=> OC12H23OOH + OH
  k_f = 89000000000 * exp(-(8554.68331868023) * invT);
  qf[266] *= k_f;
  qr[266] *= k_f * exp(-(-g_RT[3] - g_RT[33] + g_RT_qss[17])) * (refCinv);
  // reaction 267:  OC12H23OOH => 3 C2H4 + C2H5 + 2 CH2CHO + OH
  k_f = 1.8e+15 * exp(-(21167.8090470755) * invT);
  qf[267] *= k_f;
  qr[267] *= k_f *
             exp(
               -(-g_RT[3] - 3.000000 * g_RT[15] - 2.000000 * g_RT[17] +
                 g_RT[33] - g_RT_qss[5])) *
             (pow(refCinv, 6.000000));

  return;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
productionRate(amrex::Real* wdot, amrex::Real* sc, amrex::Real T)
{
  const amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  const amrex::Real invT = 1.0 / tc[1];

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1 / refC;

  for (int i = 0; i < 35; ++i) {
    wdot[i] = 0.0;
  }

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 35; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[35];
  gibbs(g_RT, tc);
  amrex::Real g_RT_qss[18];
  gibbs_qss(g_RT_qss, tc);

  amrex::Real sc_qss[18];
  amrex::Real kf_qss[198], qf_qss[198], qr_qss[198];
  // Fill sc_qss here
  comp_k_f_qss(tc, invT, kf_qss);
  comp_qss_coeff(kf_qss, qf_qss, qr_qss, sc, tc, g_RT, g_RT_qss);
  comp_sc_qss(sc_qss, qf_qss, qr_qss);

  {
    // reaction 0:  H + O2 (+M) <=> HO2 (+M)
    const amrex::Real k_f = 5116000 * exp((0.44) * tc[0]);
    amrex::Real Corr = mixture + (10.89) * sc[6] + (-0.15) * sc[8] +
                       (0.0900000000000001) * sc[12] + (1.18) * sc[13];
    const amrex::Real redP =
      Corr / k_f * 63280000 * exp(-1.4 * tc[0] - 0 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(0.5 * exp(-tc[1] * 1e+30) + 0.5 * exp(-tc[1] * 1e-30) + 0.0);
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[8]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] - g_RT[4] + g_RT[8])) * (refC) * (sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 1:  2 OH (+M) <=> H2O2 (+M)
    const amrex::Real k_f = 111000000 * exp((-0.37) * tc[0]);
    amrex::Real Corr =
      mixture + sc[5] + (5) * sc[6] + (0.75) * sc[12] + (2.6) * sc[13];
    const amrex::Real redP =
      Corr / k_f * 201000 * exp(-0.584 * tc[0] - -1153.87581469022 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2654 * exp(-tc[1] * 0.0106382978723404) +
      0.7346 * exp(-tc[1] * 0.000569476082004556) + exp(-5182 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * ((sc[3] * sc[3]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[3] - g_RT[7])) * (refC) * (sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= 2.000000 * qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 2:  CO + H2 (+M) <=> CH2O (+M)
    const amrex::Real k_f = 43 * exp((1.5) * tc[0] - (40056.0465980557) * invT);
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 5.07e+15 * exp(-3.42 * tc[0] - 42446.3257606281 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.0679999999999999 * exp(-tc[1] * 0.0050761421319797) +
      0.932 * exp(-tc[1] * 0.000649350649350649) + exp(-10300 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[5] * sc[12]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[5] - g_RT[11] + g_RT[12])) * (refC) * (sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[11] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 3:  H + HCO (+M) <=> CH2O (+M)
    const amrex::Real k_f =
      1090000 * exp((0.48) * tc[0] - (-130.836333109227) * invT);
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 1350000000000 * exp(-2.57 * tc[0] - 717.083748771726 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2176 * exp(-tc[1] * 0.003690036900369) +
      0.7824 * exp(-tc[1] * 0.000362976406533575) + exp(-6570 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc_qss[2]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] - g_RT[11] + g_RT_qss[2])) * (refC) * (sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 4:  CH2 + H (+M) <=> CH3 (+M)
    const amrex::Real k_f = 25000000000 * exp((-0.8) * tc[0]);
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 3.2e+15 * exp(-3.14 * tc[0] - 618.956498939805 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.32 * exp(-tc[1] * 0.0128205128205128) +
      0.68 * exp(-tc[1] * 0.00050125313283208) + exp(-5590 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc_qss[0]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] - g_RT[9] + g_RT_qss[0])) * (refC) * (sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 5:  CH2O + H (+M) <=> CH3O (+M)
    const amrex::Real k_f =
      540000 * exp((0.454) * tc[0] - (1308.36333109227) * invT);
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 2.2e+18 * exp(-4.8 * tc[0] - 2797.88466187424 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.242 * exp(-tc[1] * 0.0106382978723404) +
      0.758 * exp(-tc[1] * 0.000643086816720257) + exp(-4200 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[11]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[1] + g_RT[11] - g_RT_qss[3])) * (refC) *
                           (sc_qss[3]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 6:  CH3 + H (+M) <=> CH4 (+M)
    const amrex::Real k_f =
      12700000000 * exp((-0.63) * tc[0] - (192.731983003208) * invT);
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 2.477e+21 * exp(-4.76 * tc[0] - 1227.84866456352 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.217 * exp(-tc[1] * 0.0135135135135135) +
      0.783 * exp(-tc[1] * 0.000340020401224073) + exp(-6964 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[9]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[9] - g_RT[10])) * (refC) * (sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 7:  2 CH3 (+M) <=> C2H6 (+M)
    const amrex::Real k_f =
      21200000000 * exp((-0.97) * tc[0] - (311.994332798926) * invT);
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 1.77e+38 * exp(-9.67 * tc[0] - 3130.00766130536 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4675 * exp(-tc[1] * 0.00662251655629139) +
      0.5325 * exp(-tc[1] * 0.000963391136801541) + exp(-4970 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * ((sc[9] * sc[9]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[9] - g_RT[16])) * (refC) * (sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= 2.000000 * qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 8:  C2H3 (+M) <=> C2H2 + H (+M)
    const amrex::Real k_f =
      38600000 * exp((1.62) * tc[0] - (18643.2716780664) * invT);
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[14] + (2) * sc[15] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 2.565e+21 * exp(-3.4 * tc[0] - 18014.5125184767 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      -0.9816 * exp(-tc[1] * 0.000185745862510913) +
      1.9816 * exp(-tc[1] * 0.232926488400261) + exp(0.0795 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc_qss[4]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[1] - g_RT[14] + g_RT_qss[4])) *
                           (refCinv) * (sc[1] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 9:  C2H3 + H (+M) <=> C2H4 (+M)
    const amrex::Real k_f =
      6080000 * exp((0.27) * tc[0] - (140.900666425322) * invT);
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[14] + (2) * sc[15] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 1.4e+18 * exp(-3.86 * tc[0] - 1670.67933047167 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.218 * exp(-tc[1] * 0.00481927710843374) +
      0.782 * exp(-tc[1] * 0.000375516334960571) + exp(-6095 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc_qss[4]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] - g_RT[15] + g_RT_qss[4])) * (refC) * (sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 10:  C2H3 + CH3 (+M) <=> C3H6 (+M)
    const amrex::Real k_f = 25000000;
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[14] + (2) * sc[15] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 4.27e+46 * exp(-11.94 * tc[0] - 4916.32618157895 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.825 * exp(-tc[1] * 0.000745934656124124) +
      0.175 * exp(-tc[1] * 1.66666666666667e-05) + exp(-10139.8 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[9] * sc_qss[4]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[9] - g_RT[19] + g_RT_qss[4])) * (refC) * (sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 11:  C2H4 + H (+M) <=> C2H5 (+M)
    const amrex::Real k_f =
      3975 * exp((1.28) * tc[0] - (649.466525387545) * invT);
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 4715000 * exp(0 * tc[0] - 380.059419015673 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.24 * exp(-tc[1] * 0.025) + 0.76 * exp(-tc[1] * 0.000975609756097561) +
      0.0);
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[15]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[1] + g_RT[15] - g_RT_qss[5])) * (refC) *
                           (sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 12:  C2H5 + H (+M) <=> C2H6 (+M)
    const amrex::Real k_f =
      521000000000 * exp((-0.99) * tc[0] - (795.082331971457) * invT);
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 1.99e+29 * exp(-7.08 * tc[0] - 3364.00341090455 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.1578 * exp(-tc[1] * 0.008) +
      0.8422 * exp(-tc[1] * 0.000450653447498873) + exp(-6882 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc_qss[5]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] - g_RT[16] + g_RT_qss[5])) * (refC) * (sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 13:  C2H3 + C2H5 (+M) <=> C4H81 (+M)
    const amrex::Real k_f = 15000000;
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 1.55e+44 * exp(-11.79 * tc[0] - 4521.1501339225 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.802 * exp(-tc[1] * 0.000439000834101585) +
      0.198 * exp(-tc[1] * 1.66666666666667e-05) + exp(-5723.2 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc_qss[4] * sc_qss[5]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[22] + g_RT_qss[4] + g_RT_qss[5])) *
                           (refC) * (sc[22]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[22] += qdot;
  }

  {
    // reaction 14:  H + aC3H5 (+M) <=> C3H6 (+M)
    const amrex::Real k_f = 200000000;
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 1.33e+48 * exp(-12 * tc[0] - 3003.09641818941 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.98 * exp(-tc[1] * 0.000911909538573774) +
      0.02 * exp(-tc[1] * 0.000911909538573774) + exp(-6859.5 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[18]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[18] - g_RT[19])) * (refC) * (sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[18] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 15:  CH3 + aC3H5 (+M) <=> C4H81 (+M)
    const amrex::Real k_f =
      100000000 * exp((-0.32) * tc[0] - (-131.993731440578) * invT);
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 3.91e+48 * exp(-12.81 * tc[0] - 3145.1041612795 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.896 * exp(-tc[1] * 0.00062266500622665) +
      0.104 * exp(-tc[1] * 1.66666666666667e-05) + exp(-6118.4 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[9] * sc[18]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[9] + g_RT[18] - g_RT[22])) * (refC) * (sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[18] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 16:  C3H6 + H (+M) <=> nC3H7 (+M)
    const amrex::Real k_f = 13300000 * exp(-(1640.83858218945) * invT);
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 6.26e+26 * exp(-6.66 * tc[0] - 3522.51666063304 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-tc[1] * 0.000763358778625954) + exp(-48097 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[19]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[1] + g_RT[19] - g_RT_qss[6])) * (refC) *
                           (sc_qss[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 17:  C4H7 + H (+M) <=> C4H81 (+M)
    const amrex::Real k_f = 36000000;
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 3.01e+36 * exp(-9.32 * tc[0] - 2935.56474163841 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.502 * exp(-tc[1] * 0.00076103500761035) +
      0.498 * exp(-tc[1] * 0.00076103500761035) + exp(-50000 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[21]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[21] - g_RT[22])) * (refC) * (sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[21] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 18:  C4H81 + H (+M) <=> pC4H9 (+M)
    const amrex::Real k_f = 13300000 * exp(-(1640.83858218945) * invT);
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 6.26e+26 * exp(-6.66 * tc[0] - 3522.51666063304 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-tc[1] * 0.000763358778625954) + exp(-48097 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[22]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[1] + g_RT[22] - g_RT_qss[7])) * (refC) *
                           (sc_qss[7]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 19:  C5H10 + H (+M) <=> PXC5H11 (+M)
    const amrex::Real k_f = 13300000 * exp(-(1640.83858218945) * invT);
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 6.26e+26 * exp(-6.66 * tc[0] - 3522.51666063304 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-tc[1] * 0.000763358778625954) + exp(-48097 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[24]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[1] + g_RT[24] - g_RT_qss[8])) * (refC) *
                           (sc_qss[8]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 20:  C6H12 + H (+M) <=> PXC6H13 (+M)
    const amrex::Real k_f = 13300000 * exp(-(1640.83858218945) * invT);
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 6.26e+26 * exp(-6.66 * tc[0] - 3522.51666063304 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-tc[1] * 0.000763358778625954) + exp(-48097 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[25]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[1] + g_RT[25] - g_RT_qss[9])) * (refC) *
                           (sc_qss[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 21:  C7H14 + H (+M) <=> PXC7H15 (+M)
    const amrex::Real k_f = 13300000 * exp(-(1640.83858218945) * invT);
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 6.26e+26 * exp(-6.66 * tc[0] - 3522.51666063304 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-tc[1] * 0.000763358778625954) + exp(-48097 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[26]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[1] + g_RT[26] - g_RT_qss[10])) * (refC) *
                           (sc_qss[10]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 22:  C8H16 + H (+M) <=> PXC8H17 (+M)
    const amrex::Real k_f = 13300000 * exp(-(1640.83858218945) * invT);
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 6.26e+26 * exp(-6.66 * tc[0] - 3522.51666063304 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-tc[1] * 0.000763358778625954) + exp(-48097 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[27]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[1] + g_RT[27] - g_RT_qss[11])) * (refC) *
                           (sc_qss[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 23:  C9H18 + H (+M) <=> PXC9H19 (+M)
    const amrex::Real k_f = 13300000 * exp(-(1640.83858218945) * invT);
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 6.26e+26 * exp(-6.66 * tc[0] - 3522.51666063304 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-tc[1] * 0.000763358778625954) + exp(-48097 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[28]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[28] - g_RT[29])) * (refC) * (sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[28] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 24:  C10H20 + H (+M) <=> PXC10H21 (+M)
    const amrex::Real k_f = 13300000 * exp(-(1640.83858218945) * invT);
    amrex::Real Corr = mixture + sc[5] + (5) * sc[6] + sc[10] + (0.5) * sc[12] +
                       sc[13] + (2) * sc[16];
    const amrex::Real redP =
      Corr / k_f * 6.26e+26 * exp(-6.66 * tc[0] - 3522.51666063304 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-tc[1] * 0.000763358778625954) + exp(-48097 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[30]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[1] + g_RT[30] - g_RT_qss[12])) * (refC) *
                           (sc_qss[12]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 25:  CO + O (+M) <=> CO2 (+M)
    const amrex::Real k_f = 13620 * exp(-(1199.66853127845) * invT);
    amrex::Real Corr =
      mixture + sc[5] + (11) * sc[6] + (0.75) * sc[12] + (2.6) * sc[13];
    const amrex::Real redP =
      Corr / k_f * 1173000000000 * exp(-2.79 * tc[0] - 2108.98104638758 * invT);
    Corr = redP / (1.0 + redP);
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[12]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[12] - g_RT[13])) * (refC) * (sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 26:  2 H + M <=> H2 + M
    const amrex::Real k_f = 1780000 * exp((-1) * tc[0]);
    const amrex::Real Corr =
      mixture + (-1) * sc[5] + (-1) * sc[6] + (-1) * sc[13];
    const amrex::Real qf = Corr * k_f * ((sc[1] * sc[1]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[1] - g_RT[5])) * (refC) * (sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= 2.000000 * qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 27:  H + OH + M <=> H2O + M
    const amrex::Real k_f = 44000000000 * exp((-2) * tc[0]);
    const amrex::Real Corr =
      mixture + sc[5] + (5.3) * sc[6] + (0.75) * sc[12] + (2.6) * sc[13];
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[3]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC) * (sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 28:  2 O + M <=> O2 + M
    const amrex::Real k_f = 120000 * exp((-1) * tc[0]);
    const amrex::Real Corr = mixture + (1.4) * sc[5] + (14.4) * sc[6] +
                             (0.75) * sc[12] + (2.6) * sc[13];
    const amrex::Real qf = Corr * k_f * ((sc[2] * sc[2]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[2] - g_RT[8])) * (refC) * (sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= 2.000000 * qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 29:  2 H + H2 <=> H2 + H2
    const amrex::Real k_f = 90000 * exp((-0.6) * tc[0]);
    const amrex::Real qf = k_f * ((sc[1] * sc[1]) * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[1] - g_RT[5])) * (refC) * ((sc[5] * sc[5]));
    const amrex::Real qdot = qf - qr;
    wdot[1] -= 2.000000 * qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 30:  2 H + H2O <=> H2 + H2O
    const amrex::Real k_f = 56240000 * exp((-1.25) * tc[0]);
    const amrex::Real qf = k_f * ((sc[1] * sc[1]) * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[1] - g_RT[5])) * (refC) * (sc[5] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= 2.000000 * qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 31:  2 H + CO2 <=> H2 + CO2
    const amrex::Real k_f = 550000000 * exp((-2) * tc[0]);
    const amrex::Real qf = k_f * ((sc[1] * sc[1]) * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[1] - g_RT[5])) * (refC) * (sc[5] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= 2.000000 * qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 32:  H + O + M <=> OH + M
    const amrex::Real k_f = 9428000 * exp((-1) * tc[0]);
    const amrex::Real Corr =
      mixture + sc[5] + (11) * sc[6] + (0.75) * sc[12] + (2.6) * sc[13];
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[2]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[2] - g_RT[3])) * (refC) * (sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] -= qdot;
    wdot[3] += qdot;
  }

  {
    // reaction 33:  HCO + M <=> CO + H + M
    const amrex::Real k_f =
      187000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
    const amrex::Real Corr =
      mixture + sc[5] + (-1) * sc[6] + (0.75) * sc[12] + (2.6) * sc[13];
    const amrex::Real qf = Corr * k_f * (sc_qss[2]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[1] - g_RT[12] + g_RT_qss[2])) *
                           (refCinv) * (sc[1] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 34:  HCO + H2O <=> CO + H + H2O
    const amrex::Real k_f =
      2244000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc_qss[2]);
    const amrex::Real qr = k_f * exp(-(-g_RT[1] - g_RT[12] + g_RT_qss[2])) *
                           (refCinv) * (sc[1] * sc[6] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 35:  H + O2 <=> O + OH
    const amrex::Real k_f = 97560000 * exp(-(7468.87259020676) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[3] + g_RT[8])) * (sc[2] * sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[3] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 36:  H2 + O <=> H + OH
    const amrex::Real k_f =
      0.04589 * exp((2.7) * tc[0] - (3150.13632793755) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[3] + g_RT[5])) * (sc[1] * sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[5] -= qdot;
  }

  {
    // reaction 37:  H2 + OH <=> H + H2O
    const amrex::Real k_f =
      102.4 * exp((1.6) * tc[0] - (1659.74946449039) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[3] + g_RT[5] - g_RT[6])) * (sc[1] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= qdot;
    wdot[5] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 38:  2 OH <=> H2O + O
    const amrex::Real k_f =
      0.03973 * exp((2.4) * tc[0] - (-1061.78716484796) * invT);
    const amrex::Real qf = k_f * ((sc[3] * sc[3]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + 2.000000 * g_RT[3] - g_RT[6])) * (sc[2] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= 2.000000 * qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 39:  H + HO2 <=> 2 OH
    const amrex::Real k_f = 74850000 * exp(-(148.448916412392) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - 2.000000 * g_RT[3] + g_RT[4])) * ((sc[3] * sc[3]));
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] += 2.000000 * qdot;
    wdot[4] -= qdot;
  }

  {
    // reaction 40:  H2 + O2 <=> H + HO2
    const amrex::Real k_f =
      0.5916 * exp((2.433) * tc[0] - (26923.0980538841) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] - g_RT[4] + g_RT[5] + g_RT[8])) * (sc[1] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 41:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f = 28910000 * exp(-(-252.569476734047) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] + g_RT[4] - g_RT[6] - g_RT[8])) * (sc[6] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 42:  H + HO2 <=> H2O + O
    const amrex::Real k_f = 3970000 * exp(-(337.658382754967) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[4] - g_RT[6])) * (sc[2] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 43:  HO2 + O <=> O2 + OH
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[2] * sc[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[3] + g_RT[4] - g_RT[8])) * (sc[3] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 44:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f = 130000 * exp(-(-820.243165261693) * invT);
    const amrex::Real qf = k_f * ((sc[4] * sc[4]));
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[4] - g_RT[7] - g_RT[8])) * (sc[7] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= 2.000000 * qdot;
    wdot[7] += qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 45:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f = 365800000 * exp(-(6038.59998965664) * invT);
    const amrex::Real qf = k_f * ((sc[4] * sc[4]));
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[4] - g_RT[7] - g_RT[8])) * (sc[7] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= 2.000000 * qdot;
    wdot[7] += qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 46:  H + H2O2 <=> H2O + OH
    const amrex::Real k_f = 24100000 * exp(-(1997.77016324474) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[3] - g_RT[6] + g_RT[7])) * (sc[3] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 47:  H + H2O2 <=> H2 + HO2
    const amrex::Real k_f = 6.05 * exp((2) * tc[0] - (2616.72666218454) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[5] + g_RT[7])) * (sc[4] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[5] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 48:  H2O2 + O <=> HO2 + OH
    const amrex::Real k_f = 9.63 * exp((2) * tc[0] - (1997.77016324474) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[4] + g_RT[7])) * (sc[3] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[4] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 49:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f = 2000000 * exp(-(214.873516298615) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[6] + g_RT[7])) * (sc[4] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 50:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f =
      2.67e+35 * exp((-7) * tc[0] - (18920.9466342575) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[6] + g_RT[7])) * (sc[4] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 51:  CO + OH <=> CO2 + H
    const amrex::Real k_f =
      0.07046 * exp((2.053) * tc[0] - (-178.979071526765) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[3] + g_RT[12] - g_RT[13])) * (sc[1] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 52:  CO + OH <=> CO2 + H
    const amrex::Real k_f =
      5757000 * exp((-0.664) * tc[0] - (166.98238621398) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[3] + g_RT[12] - g_RT[13])) * (sc[1] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 53:  CO + HO2 <=> CO2 + OH
    const amrex::Real k_f =
      0.157 * exp((2.18) * tc[0] - (9029.02038003442) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[4] + g_RT[12] - g_RT[13])) * (sc[3] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 54:  CO + O2 <=> CO2 + O
    const amrex::Real k_f = 1119000 * exp(-(24003.4349588851) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[8] + g_RT[12] - g_RT[13])) * (sc[2] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[8] -= qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 55:  H + HCO <=> CO + H2
    const amrex::Real k_f = 120000000;
    const amrex::Real qf = k_f * (sc[1] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[5] - g_RT[12] + g_RT_qss[2])) *
                           (sc[5] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 56:  HCO + O <=> CO + OH
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[3] - g_RT[12] + g_RT_qss[2])) *
                           (sc[3] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 57:  HCO + O <=> CO2 + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[2] - g_RT[13] + g_RT_qss[2])) *
                           (sc[1] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 58:  HCO + OH <=> CO + H2O
    const amrex::Real k_f = 30200000;
    const amrex::Real qf = k_f * (sc[3] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[6] - g_RT[12] + g_RT_qss[2])) *
                           (sc[6] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 59:  HCO + O2 <=> CO + HO2
    const amrex::Real k_f =
      12040 * exp((0.807) * tc[0] - (-365.838516040031) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[8] - g_RT[12] + g_RT_qss[2])) *
                           (sc[4] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[8] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 60:  CH2 + O <=> H + HCO
    const amrex::Real k_f = 80000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT_qss[0] - g_RT_qss[2])) *
      (sc[1] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
  }

  {
    // reaction 61:  CH2 + OH <=> CH2O + H
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[3] * sc_qss[0]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[3] - g_RT[11] + g_RT_qss[0])) *
                           (sc[1] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 62:  CH2 + H2 <=> CH3 + H
    const amrex::Real k_f = 0.5 * exp((2) * tc[0] - (3638.25649376812) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc_qss[0]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[5] - g_RT[9] + g_RT_qss[0])) *
                           (sc[1] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[5] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 63:  CH2 + O2 <=> HCO + OH
    const amrex::Real k_f = 10600000 * exp(-(754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[8] + g_RT_qss[0] - g_RT_qss[2])) *
      (sc[3] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 64:  CH2 + O2 <=> CO2 + 2 H
    const amrex::Real k_f = 2640000 * exp(-(754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(-2.000000 * g_RT[1] + g_RT[8] - g_RT[13] + g_RT_qss[0])) *
      (refCinv) * ((sc[1] * sc[1]) * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += 2.000000 * qdot;
    wdot[8] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 65:  CH2 + HO2 <=> CH2O + OH
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[0]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[3] + g_RT[4] - g_RT[11] + g_RT_qss[0])) *
                           (sc[3] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 66:  2 CH2 <=> C2H2 + H2
    const amrex::Real k_f = 32000000;
    const amrex::Real qf = k_f * (pow(sc_qss[0], 2.000000));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[5] - g_RT[14] + 2.000000 * g_RT_qss[0])) *
      (sc[5] * sc[14]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[5] += qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 67:  CH2* + N2 <=> CH2 + N2
    const amrex::Real k_f = 15000000 * exp(-(301.929999482832) * invT);
    const amrex::Real qf = k_f * (sc[34] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[34] - g_RT[34] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[34] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[34] -= qdot;
    wdot[34] += qdot;
  }

  {
    // reaction 68:  CH2* + O <=> CO + H2
    const amrex::Real k_f = 15000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[5] - g_RT[12] + g_RT_qss[1])) *
                           (sc[5] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[5] += qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 69:  CH2* + O <=> H + HCO
    const amrex::Real k_f = 15000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT_qss[1] - g_RT_qss[2])) *
      (sc[1] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
  }

  {
    // reaction 70:  CH2* + OH <=> CH2O + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[3] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[3] - g_RT[11] + g_RT_qss[1])) *
                           (sc[1] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 71:  CH2* + H2 <=> CH3 + H
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[5] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[5] - g_RT[9] + g_RT_qss[1])) *
                           (sc[1] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[5] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 72:  CH2* + O2 <=> CO + H + OH
    const amrex::Real k_f = 28000000;
    const amrex::Real qf = k_f * (sc[8] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] - g_RT[3] + g_RT[8] - g_RT[12] + g_RT_qss[1])) *
      (refCinv) * (sc[1] * sc[3] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] += qdot;
    wdot[8] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 73:  CH2* + O2 <=> CO + H2O
    const amrex::Real k_f = 12000000;
    const amrex::Real qf = k_f * (sc[8] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[6] + g_RT[8] - g_RT[12] + g_RT_qss[1])) *
                           (sc[6] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[8] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 74:  CH2* + H2O <=> CH2 + H2O
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[6] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] - g_RT[6] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[6] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 75:  CH2* + CO <=> CH2 + CO
    const amrex::Real k_f = 9000000;
    const amrex::Real qf = k_f * (sc[12] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[12] - g_RT[12] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[12] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 76:  CH2* + CO2 <=> CH2 + CO2
    const amrex::Real k_f = 7000000;
    const amrex::Real qf = k_f * (sc[13] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[13] - g_RT[13] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[13] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 77:  CH2* + CO2 <=> CH2O + CO
    const amrex::Real k_f = 14000000;
    const amrex::Real qf = k_f * (sc[13] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[11] - g_RT[12] + g_RT[13] + g_RT_qss[1])) *
      (sc[11] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 78:  CH2O + H <=> H2 + HCO
    const amrex::Real k_f =
      23000 * exp((1.05) * tc[0] - (1648.03458051046) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[5] + g_RT[11] - g_RT_qss[2])) *
                           (sc[5] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 79:  CH2O + O <=> HCO + OH
    const amrex::Real k_f = 39000000 * exp(-(1781.38699694871) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[3] + g_RT[11] - g_RT_qss[2])) *
                           (sc[3] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 80:  CH2O + OH <=> H2O + HCO
    const amrex::Real k_f =
      3430 * exp((1.18) * tc[0] - (-224.93784961471) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[6] + g_RT[11] - g_RT_qss[2])) *
                           (sc[6] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 81:  CH2O + O2 <=> HCO + HO2
    const amrex::Real k_f = 100000000 * exp(-(20128.6666321888) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[8] + g_RT[11] - g_RT_qss[2])) *
                           (sc[4] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[8] -= qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 82:  CH2O + HO2 <=> H2O2 + HCO
    const amrex::Real k_f = 1000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[7] + g_RT[11] - g_RT_qss[2])) *
                           (sc[7] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 83:  CH3 + O <=> CH2O + H
    const amrex::Real k_f = 84300000;
    const amrex::Real qf = k_f * (sc[2] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[9] - g_RT[11])) * (sc[1] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[9] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 84:  CH3 + OH <=> CH2 + H2O
    const amrex::Real k_f = 56 * exp((1.6) * tc[0] - (2727.43432866158) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[9]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[6] + g_RT[9] - g_RT_qss[0])) *
                           (sc[6] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 85:  CH3 + OH <=> CH2* + H2O
    const amrex::Real k_f = 25010000;
    const amrex::Real qf = k_f * (sc[3] * sc[9]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[6] + g_RT[9] - g_RT_qss[1])) *
                           (sc[6] * sc_qss[1]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 86:  CH3 + O2 <=> CH3O + O
    const amrex::Real k_f = 30830000 * exp(-(14492.6399751759) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[9]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[8] + g_RT[9] - g_RT_qss[3])) *
                           (sc[2] * sc_qss[3]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[8] -= qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 87:  CH3 + O2 <=> CH2O + OH
    const amrex::Real k_f = 36000 * exp(-(4498.75699229419) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[8] + g_RT[9] - g_RT[11])) * (sc[3] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[8] -= qdot;
    wdot[9] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 88:  CH3 + HO2 <=> CH4 + O2
    const amrex::Real k_f = 1000000;
    const amrex::Real qf = k_f * (sc[4] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[8] + g_RT[9] - g_RT[10])) * (sc[8] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[8] += qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 89:  CH3 + HO2 <=> CH3O + OH
    const amrex::Real k_f = 13400000;
    const amrex::Real qf = k_f * (sc[4] * sc[9]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[3] + g_RT[4] + g_RT[9] - g_RT_qss[3])) *
                           (sc[3] * sc_qss[3]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 90:  CH3 + H2O2 <=> CH4 + HO2
    const amrex::Real k_f =
      0.0245 * exp((2.47) * tc[0] - (2606.66232886845) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[7] + g_RT[9] - g_RT[10])) * (sc[4] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[7] -= qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 91:  CH3 + HCO <=> CH4 + CO
    const amrex::Real k_f = 8480000;
    const amrex::Real qf = k_f * (sc[9] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[10] - g_RT[12] + g_RT_qss[2])) *
                           (sc[10] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[10] += qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 92:  CH2O + CH3 <=> CH4 + HCO
    const amrex::Real k_f =
      0.00332 * exp((2.81) * tc[0] - (2948.84966161566) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[10] + g_RT[11] - g_RT_qss[2])) *
                           (sc[10] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[10] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 93:  CH2 + CH3 <=> C2H4 + H
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[9] * sc_qss[0]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[9] - g_RT[15] + g_RT_qss[0])) *
                           (sc[1] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[9] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 94:  CH2* + CH3 <=> C2H4 + H
    const amrex::Real k_f = 12000000 * exp(-(-286.83349950869) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[9] - g_RT[15] + g_RT_qss[1])) *
                           (sc[1] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[9] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 95:  2 CH3 <=> C2H5 + H
    const amrex::Real k_f =
      4990000 * exp((0.1) * tc[0] - (5334.09665753003) * invT);
    const amrex::Real qf = k_f * ((sc[9] * sc[9]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + 2.000000 * g_RT[9] - g_RT_qss[5])) *
                           (sc[1] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[9] -= 2.000000 * qdot;
  }

  {
    // reaction 96:  CH3O + H <=> CH2O + H2
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[1] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[5] - g_RT[11] + g_RT_qss[3])) *
                           (sc[5] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 97:  CH3O + H <=> CH3 + OH
    const amrex::Real k_f = 32000000;
    const amrex::Real qf = k_f * (sc[1] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[3] - g_RT[9] + g_RT_qss[3])) * (sc[3] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] += qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 98:  CH3O + H <=> CH2* + H2O
    const amrex::Real k_f = 16000000;
    const amrex::Real qf = k_f * (sc[1] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[6] - g_RT_qss[1] + g_RT_qss[3])) *
      (sc[6] * sc_qss[1]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 99:  CH3O + O <=> CH2O + OH
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[3] - g_RT[11] + g_RT_qss[3])) *
                           (sc[3] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 100:  CH3O + OH <=> CH2O + H2O
    const amrex::Real k_f = 5000000;
    const amrex::Real qf = k_f * (sc[3] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[6] - g_RT[11] + g_RT_qss[3])) *
                           (sc[6] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 101:  CH3O + O2 <=> CH2O + HO2
    const amrex::Real k_f =
      4.28e-19 * exp((7.6) * tc[0] - (-1776.35483029066) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc_qss[3]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[8] - g_RT[11] + g_RT_qss[3])) *
                           (sc[4] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[8] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 102:  CH4 + H <=> CH3 + H2
    const amrex::Real k_f =
      660 * exp((1.62) * tc[0] - (5454.86865732316) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[9] + g_RT[10])) * (sc[5] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[9] += qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 103:  CH4 + O <=> CH3 + OH
    const amrex::Real k_f =
      1020 * exp((1.5) * tc[0] - (4327.66332592059) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[9] + g_RT[10])) * (sc[3] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[9] += qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 104:  CH4 + OH <=> CH3 + H2O
    const amrex::Real k_f =
      100 * exp((1.6) * tc[0] - (1570.03599731073) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[9] + g_RT[10])) * (sc[6] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[9] += qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 105:  CH2 + CH4 <=> 2 CH3
    const amrex::Real k_f = 2.46 * exp((2) * tc[0] - (4161.60182620503) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(-2.000000 * g_RT[9] + g_RT[10] + g_RT_qss[0])) *
      ((sc[9] * sc[9]));
    const amrex::Real qdot = qf - qr;
    wdot[9] += 2.000000 * qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 106:  CH2* + CH4 <=> 2 CH3
    const amrex::Real k_f = 16000000 * exp(-(-286.83349950869) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-2.000000 * g_RT[9] + g_RT[10] + g_RT_qss[1])) *
      ((sc[9] * sc[9]));
    const amrex::Real qdot = qf - qr;
    wdot[9] += 2.000000 * qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 107:  C2H2 + O <=> CH2 + CO
    const amrex::Real k_f = 4.08 * exp((2) * tc[0] - (956.111665028967) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[12] + g_RT[14] - g_RT_qss[0])) *
                           (sc[12] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[12] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 108:  C2H2 + OH <=> CH3 + CO
    const amrex::Real k_f =
      4.83e-10 * exp((4) * tc[0] - (-1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[9] - g_RT[12] + g_RT[14])) * (sc[9] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[9] += qdot;
    wdot[12] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 109:  C2H2 + HCO <=> C2H3 + CO
    const amrex::Real k_f = 10 * exp((2) * tc[0] - (3019.29999482832) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[12] + g_RT[14] + g_RT_qss[2] - g_RT_qss[4])) *
      (sc[12] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 110:  C2H2 + CH3 <=> aC3H5
    const amrex::Real k_f =
      2.68e+47 * exp((-12.82) * tc[0] - (17979.9314692026) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[9] + g_RT[14] - g_RT[18])) * (refC) * (sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[14] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 111:  C2H3 + H <=> C2H2 + H2
    const amrex::Real k_f = 90000000;
    const amrex::Real qf = k_f * (sc[1] * sc_qss[4]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[5] - g_RT[14] + g_RT_qss[4])) *
                           (sc[5] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 112:  C2H3 + O <=> CH3 + CO
    const amrex::Real k_f = 48000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[4]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[9] - g_RT[12] + g_RT_qss[4])) *
                           (sc[9] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[9] += qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 113:  C2H3 + OH <=> C2H2 + H2O
    const amrex::Real k_f = 30110000;
    const amrex::Real qf = k_f * (sc[3] * sc_qss[4]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[6] - g_RT[14] + g_RT_qss[4])) *
                           (sc[6] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 114:  C2H3 + O2 <=> C2H2 + HO2
    const amrex::Real k_f =
      1.34 * exp((1.61) * tc[0] - (-192.93326966953) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc_qss[4]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[8] - g_RT[14] + g_RT_qss[4])) *
                           (sc[4] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[8] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 115:  C2H3 + O2 <=> CH2CHO + O
    const amrex::Real k_f =
      300000 * exp((0.29) * tc[0] - (5.53538332385192) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc_qss[4]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[8] - g_RT[17] + g_RT_qss[4])) *
                           (sc[2] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[8] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 116:  C2H3 + O2 <=> CH2O + HCO
    const amrex::Real k_f =
      46000000000 * exp((-1.39) * tc[0] - (508.248832462767) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc_qss[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[8] - g_RT[11] - g_RT_qss[2] + g_RT_qss[4])) *
      (sc[11] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 117:  C2H3 + HO2 <=> CH2CHO + OH
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[4]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[3] + g_RT[4] - g_RT[17] + g_RT_qss[4])) *
                           (sc[3] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 118:  C2H3 + H2O2 <=> C2H4 + HO2
    const amrex::Real k_f = 12100 * exp(-(-299.917132819613) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc_qss[4]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[7] - g_RT[15] + g_RT_qss[4])) *
                           (sc[4] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[7] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 119:  C2H3 + HCO <=> C2H4 + CO
    const amrex::Real k_f = 90330000;
    const amrex::Real qf = k_f * (sc_qss[2] * sc_qss[4]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[12] - g_RT[15] + g_RT_qss[2] + g_RT_qss[4])) *
      (sc[12] * sc[15]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[12] += qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 120:  C2H3 + HCO <=> C2H3CHO
    const amrex::Real k_f = 18000000;
    const amrex::Real qf = k_f * (sc_qss[2] * sc_qss[4]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[20] + g_RT_qss[2] + g_RT_qss[4])) * (refC) * (sc[20]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[20] += qdot;
  }

  {
    // reaction 121:  C2H3 + CH3 <=> C2H2 + CH4
    const amrex::Real k_f = 392000;
    const amrex::Real qf = k_f * (sc[9] * sc_qss[4]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[10] - g_RT[14] + g_RT_qss[4])) *
                           (sc[10] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[10] += qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 122:  C2H3 + CH3 <=> H + aC3H5
    const amrex::Real k_f =
      1.5e+18 * exp((-2.83) * tc[0] - (9368.88788395227) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc_qss[4]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[9] - g_RT[18] + g_RT_qss[4])) *
                           (sc[1] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[9] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 123:  2 C2H3 <=> C2H2 + C2H4
    const amrex::Real k_f = 960000;
    const amrex::Real qf = k_f * (pow(sc_qss[4], 2.000000));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[14] - g_RT[15] + 2.000000 * g_RT_qss[4])) *
      (sc[14] * sc[15]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[14] += qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 124:  CH2CHO <=> CH3 + CO
    const amrex::Real k_f =
      7.8e+41 * exp((-9.147) * tc[0] - (23600.8616262414) * invT);
    const amrex::Real qf = k_f * (sc[17]);
    const amrex::Real qr = k_f * exp(-(-g_RT[9] - g_RT[12] + g_RT[17])) *
                           (refCinv) * (sc[9] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[12] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 125:  CH2CHO + H <=> CH3 + HCO
    const amrex::Real k_f = 90000000;
    const amrex::Real qf = k_f * (sc[1] * sc[17]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[9] + g_RT[17] - g_RT_qss[2])) *
                           (sc[9] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[9] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 126:  CH2CHO + O2 <=> CH2O + CO + OH
    const amrex::Real k_f = 18000;
    const amrex::Real qf = k_f * (sc[8] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[8] - g_RT[11] - g_RT[12] + g_RT[17])) *
      (refCinv) * (sc[3] * sc[11] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[8] -= qdot;
    wdot[11] += qdot;
    wdot[12] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 127:  C2H4 + H <=> C2H3 + H2
    const amrex::Real k_f =
      50.7 * exp((1.9) * tc[0] - (6516.65582217112) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[5] + g_RT[15] - g_RT_qss[4])) *
                           (sc[5] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 128:  C2H4 + O <=> C2H3 + OH
    const amrex::Real k_f =
      15.1 * exp((1.9) * tc[0] - (1882.03033010965) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[3] + g_RT[15] - g_RT_qss[4])) *
                           (sc[3] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 129:  C2H4 + O <=> CH3 + HCO
    const amrex::Real k_f =
      19.2 * exp((1.83) * tc[0] - (110.707666477038) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[9] + g_RT[15] - g_RT_qss[2])) *
                           (sc[9] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[9] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 130:  C2H4 + O <=> CH2 + CH2O
    const amrex::Real k_f =
      0.384 * exp((1.83) * tc[0] - (110.707666477038) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[11] + g_RT[15] - g_RT_qss[0])) *
                           (sc[11] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[11] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 131:  C2H4 + OH <=> C2H3 + H2O
    const amrex::Real k_f = 3.6 * exp((2) * tc[0] - (1258.0416645118) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[6] + g_RT[15] - g_RT_qss[4])) *
                           (sc[6] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 132:  C2H4 + HCO <=> C2H5 + CO
    const amrex::Real k_f = 10 * exp((2) * tc[0] - (4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[12] + g_RT[15] + g_RT_qss[2] - g_RT_qss[5])) *
      (sc[12] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 133:  C2H4 + CH2 <=> H + aC3H5
    const amrex::Real k_f = 20000000 * exp(-(3019.29999482832) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[15] - g_RT[18] + g_RT_qss[0])) *
      (sc[1] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[15] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 134:  C2H4 + CH2* <=> H + aC3H5
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[15] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[15] - g_RT[18] + g_RT_qss[1])) *
      (sc[1] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[15] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 135:  C2H4 + CH3 <=> C2H3 + CH4
    const amrex::Real k_f =
      0.227 * exp((2) * tc[0] - (4629.59332540342) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[10] + g_RT[15] - g_RT_qss[4])) *
                           (sc[10] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[10] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 136:  nC3H7 <=> C2H4 + CH3
    const amrex::Real k_f = 96000000000000 * exp(-(15611.2604302599) * invT);
    const amrex::Real qf = k_f * (sc_qss[6]);
    const amrex::Real qr = k_f * exp(-(-g_RT[9] - g_RT[15] + g_RT_qss[6])) *
                           (refCinv) * (sc[9] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 137:  C2H4 + O2 <=> C2H3 + HO2
    const amrex::Real k_f = 42200000 * exp(-(30595.573280927) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[8] + g_RT[15] - g_RT_qss[4])) *
                           (sc[4] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[8] -= qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 138:  C2H3 + C2H4 <=> C4H7
    const amrex::Real k_f =
      7.93e+32 * exp((-8.47) * tc[0] - (7155.74098774311) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc_qss[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[15] - g_RT[21] + g_RT_qss[4])) * (refC) * (sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 139:  C2H5 + H <=> C2H4 + H2
    const amrex::Real k_f = 2000000;
    const amrex::Real qf = k_f * (sc[1] * sc_qss[5]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[5] - g_RT[15] + g_RT_qss[5])) *
                           (sc[5] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 140:  C2H5 + O <=> CH2O + CH3
    const amrex::Real k_f = 16040000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[5]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[9] - g_RT[11] + g_RT_qss[5])) *
                           (sc[9] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[9] += qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 141:  C2H5 + O2 <=> C2H4 + HO2
    const amrex::Real k_f = 20000;
    const amrex::Real qf = k_f * (sc[8] * sc_qss[5]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[8] - g_RT[15] + g_RT_qss[5])) *
                           (sc[4] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[8] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 142:  C2H5 + HO2 <=> C2H6 + O2
    const amrex::Real k_f = 300000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[5]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[8] - g_RT[16] + g_RT_qss[5])) *
                           (sc[8] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[8] += qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 143:  C2H5 + HO2 <=> C2H4 + H2O2
    const amrex::Real k_f = 300000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[5]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[7] - g_RT[15] + g_RT_qss[5])) *
                           (sc[7] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 144:  C2H5 + HO2 <=> CH2O + CH3 + OH
    const amrex::Real k_f = 24000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[9] - g_RT[11] + g_RT_qss[5])) *
      (refCinv) * (sc[3] * sc[9] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[9] += qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 145:  C2H5 + H2O2 <=> C2H6 + HO2
    const amrex::Real k_f = 8700 * exp(-(490.133032493797) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc_qss[5]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[7] - g_RT[16] + g_RT_qss[5])) *
                           (sc[4] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[7] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 146:  C2H3 + C2H5 <=> CH3 + aC3H5
    const amrex::Real k_f =
      3.9e+26 * exp((-5.22) * tc[0] - (9937.0194996458) * invT);
    const amrex::Real qf = k_f * (sc_qss[4] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[9] - g_RT[18] + g_RT_qss[4] + g_RT_qss[5])) *
      (sc[9] * sc[18]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[9] += qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 147:  C2H6 + H <=> C2H5 + H2
    const amrex::Real k_f =
      115 * exp((1.9) * tc[0] - (3789.22149350954) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[5] + g_RT[16] - g_RT_qss[5])) *
                           (sc[5] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 148:  C2H6 + O <=> C2H5 + OH
    const amrex::Real k_f =
      89.8 * exp((1.92) * tc[0] - (2863.30282842885) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[3] + g_RT[16] - g_RT_qss[5])) *
                           (sc[3] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 149:  C2H6 + OH <=> C2H5 + H2O
    const amrex::Real k_f =
      3.54 * exp((2.12) * tc[0] - (437.798499250106) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[6] + g_RT[16] - g_RT_qss[5])) *
                           (sc[6] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 150:  C2H6 + CH2* <=> C2H5 + CH3
    const amrex::Real k_f = 40000000 * exp(-(-276.769166192596) * invT);
    const amrex::Real qf = k_f * (sc[16] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[9] + g_RT[16] + g_RT_qss[1] - g_RT_qss[5])) *
      (sc[9] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 151:  C2H6 + CH3 <=> C2H5 + CH4
    const amrex::Real k_f =
      6.14 * exp((1.74) * tc[0] - (5258.61415765932) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[10] + g_RT[16] - g_RT_qss[5])) *
                           (sc[10] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[10] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 152:  O + aC3H5 <=> C2H3CHO + H
    const amrex::Real k_f = 60000000;
    const amrex::Real qf = k_f * (sc[2] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[18] - g_RT[20])) * (sc[1] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[18] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 153:  OH + aC3H5 <=> C2H3CHO + 2 H
    const amrex::Real k_f =
      4.2e+26 * exp((-5.16) * tc[0] - (15159.905274033) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-2.000000 * g_RT[1] + g_RT[3] + g_RT[18] - g_RT[20])) *
      (refCinv) * ((sc[1] * sc[1]) * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += 2.000000 * qdot;
    wdot[3] -= qdot;
    wdot[18] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 154:  O2 + aC3H5 <=> C2H3CHO + OH
    const amrex::Real k_f =
      18200000 * exp((-0.41) * tc[0] - (11503.0297636301) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[8] + g_RT[18] - g_RT[20])) * (sc[3] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[8] -= qdot;
    wdot[18] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 155:  HO2 + aC3H5 <=> C3H6 + O2
    const amrex::Real k_f = 2660000;
    const amrex::Real qf = k_f * (sc[4] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[8] + g_RT[18] - g_RT[19])) * (sc[8] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[8] += qdot;
    wdot[18] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 156:  HO2 + aC3H5 <=> C2H3 + CH2O + OH
    const amrex::Real k_f = 6600000;
    const amrex::Real qf = k_f * (sc[4] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[11] + g_RT[18] - g_RT_qss[4])) *
      (refCinv) * (sc[3] * sc[11] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[11] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 157:  HCO + aC3H5 <=> C3H6 + CO
    const amrex::Real k_f = 60000000;
    const amrex::Real qf = k_f * (sc[18] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[12] + g_RT[18] - g_RT[19] + g_RT_qss[2])) *
      (sc[12] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[18] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 158:  C3H6 + H <=> C2H4 + CH3
    const amrex::Real k_f =
      8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[9] - g_RT[15] + g_RT[19])) * (sc[9] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[9] += qdot;
    wdot[15] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 159:  C3H6 + H <=> H2 + aC3H5
    const amrex::Real k_f =
      0.173 * exp((2.5) * tc[0] - (1253.00949785375) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[18] + g_RT[19])) * (sc[5] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[18] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 160:  C3H6 + O <=> C2H3CHO + 2 H
    const amrex::Real k_f =
      40 * exp((1.65) * tc[0] - (164.551849718143) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-2.000000 * g_RT[1] + g_RT[2] + g_RT[19] - g_RT[20])) *
      (refCinv) * ((sc[1] * sc[1]) * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += 2.000000 * qdot;
    wdot[2] -= qdot;
    wdot[19] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 161:  C3H6 + O => C2H5 + HCO
    const amrex::Real k_f =
      35 * exp((1.65) * tc[0] - (-489.126599162188) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] + g_RT[19] - g_RT_qss[2] - g_RT_qss[5])) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 162:  C3H6 + O <=> OH + aC3H5
    const amrex::Real k_f =
      180000 * exp((0.7) * tc[0] - (2958.91399493175) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[18] + g_RT[19])) * (sc[3] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[18] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 163:  C3H6 + OH <=> H2O + aC3H5
    const amrex::Real k_f = 3.1 * exp((2) * tc[0] - (-149.958566409806) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[18] + g_RT[19])) * (sc[6] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[18] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 164:  C3H6 + HO2 <=> H2O2 + aC3H5
    const amrex::Real k_f =
      0.0096 * exp((2.6) * tc[0] - (6999.74382134365) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[18] + g_RT[19])) * (sc[7] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[18] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 165:  C3H6 + CH3 <=> CH4 + aC3H5
    const amrex::Real k_f =
      2.2e-06 * exp((3.5) * tc[0] - (2855.75457844178) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[10] - g_RT[18] + g_RT[19])) *
                           (sc[10] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[10] += qdot;
    wdot[18] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 166:  C2H3CHO + H <=> C2H4 + HCO
    const amrex::Real k_f =
      108000 * exp((0.454) * tc[0] - (2928.72099498347) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[15] + g_RT[20] - g_RT_qss[2])) *
                           (sc[15] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[15] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 167:  C2H3CHO + O <=> C2H3 + CO + OH
    const amrex::Real k_f = 30000000 * exp(-(1781.38699694871) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[12] + g_RT[20] - g_RT_qss[4])) *
      (refCinv) * (sc[3] * sc[12] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[12] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 168:  C2H3CHO + OH <=> C2H3 + CO + H2O
    const amrex::Real k_f =
      3430 * exp((1.18) * tc[0] - (-224.93784961471) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[12] + g_RT[20] - g_RT_qss[4])) *
      (refCinv) * (sc[6] * sc[12] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[12] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 169:  H + nC3H7 <=> C2H5 + CH3
    const amrex::Real k_f =
      3.7e+18 * exp((-2.92) * tc[0] - (6292.72440588802) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc_qss[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[9] - g_RT_qss[5] + g_RT_qss[6])) *
      (sc[9] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[9] += qdot;
  }

  {
    // reaction 170:  H + nC3H7 <=> C3H6 + H2
    const amrex::Real k_f = 1800000;
    const amrex::Real qf = k_f * (sc[1] * sc_qss[6]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[5] - g_RT[19] + g_RT_qss[6])) *
                           (sc[5] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 171:  O + nC3H7 <=> C2H5 + CH2O
    const amrex::Real k_f = 96000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[11] - g_RT_qss[5] + g_RT_qss[6])) *
      (sc[11] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 172:  OH + nC3H7 <=> C3H6 + H2O
    const amrex::Real k_f = 24000000;
    const amrex::Real qf = k_f * (sc[3] * sc_qss[6]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[6] - g_RT[19] + g_RT_qss[6])) *
                           (sc[6] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 173:  O2 + nC3H7 <=> C3H6 + HO2
    const amrex::Real k_f = 90000;
    const amrex::Real qf = k_f * (sc[8] * sc_qss[6]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[8] - g_RT[19] + g_RT_qss[6])) *
                           (sc[4] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[8] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 174:  HO2 + nC3H7 <=> C2H5 + CH2O + OH
    const amrex::Real k_f = 24000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[6]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[11] - g_RT_qss[5] + g_RT_qss[6])) *
      (refCinv) * (sc[3] * sc[11] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 175:  CH3 + nC3H7 <=> C3H6 + CH4
    const amrex::Real k_f = 11000000;
    const amrex::Real qf = k_f * (sc[9] * sc_qss[6]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[10] - g_RT[19] + g_RT_qss[6])) *
                           (sc[10] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[10] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 176:  C4H7 + H <=> CH3 + aC3H5
    const amrex::Real k_f =
      2e+15 * exp((-2) * tc[0] - (5535.38332385192) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[9] - g_RT[18] + g_RT[21])) * (sc[9] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[9] += qdot;
    wdot[18] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 177:  C4H7 + HO2 <=> CH2O + OH + aC3H5
    const amrex::Real k_f = 24000000;
    const amrex::Real qf = k_f * (sc[4] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[11] - g_RT[18] + g_RT[21])) *
      (refCinv) * (sc[3] * sc[11] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[11] += qdot;
    wdot[18] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 178:  C4H7 + HCO <=> C4H81 + CO
    const amrex::Real k_f = 60000000;
    const amrex::Real qf = k_f * (sc[21] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[12] + g_RT[21] - g_RT[22] + g_RT_qss[2])) *
      (sc[12] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[21] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 179:  C4H81 + H <=> C2H4 + C2H5
    const amrex::Real k_f =
      1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[15] + g_RT[22] - g_RT_qss[5])) *
                           (sc[15] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[15] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 180:  C4H81 + H <=> C3H6 + CH3
    const amrex::Real k_f =
      3.2e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[9] - g_RT[19] + g_RT[22])) * (sc[9] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[9] += qdot;
    wdot[19] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 181:  C4H81 + H <=> C4H7 + H2
    const amrex::Real k_f =
      0.65 * exp((2.54) * tc[0] - (3399.73179417669) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[21] + g_RT[22])) * (sc[5] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 182:  C4H81 + O => HCO + nC3H7
    const amrex::Real k_f =
      330 * exp((1.45) * tc[0] - (-202.293099653497) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] + g_RT[22] - g_RT_qss[2] - g_RT_qss[6])) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 183:  C4H81 + O <=> C4H7 + OH
    const amrex::Real k_f = 15000000 * exp(-(2898.52799503519) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[21] + g_RT[22])) * (sc[3] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 184:  C4H81 + O <=> C4H7 + OH
    const amrex::Real k_f = 26000000 * exp(-(2249.3784961471) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[21] + g_RT[22])) * (sc[3] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 185:  C4H81 + OH <=> C4H7 + H2O
    const amrex::Real k_f =
      0.0007 * exp((2.66) * tc[0] - (265.195182879087) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[21] + g_RT[22])) * (sc[6] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 186:  C4H81 + O2 <=> C4H7 + HO2
    const amrex::Real k_f = 20000000 * exp(-(25628.8247894344) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[8] - g_RT[21] + g_RT[22])) * (sc[4] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[8] -= qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 187:  C4H81 + HO2 <=> C4H7 + H2O2
    const amrex::Real k_f = 1000000 * exp(-(7216.12698763968) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[7] - g_RT[21] + g_RT[22])) * (sc[7] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[7] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 188:  C4H81 + CH3 <=> C4H7 + CH4
    const amrex::Real k_f =
      4.5e-07 * exp((3.65) * tc[0] - (3599.50881050116) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[10] - g_RT[21] + g_RT[22])) *
                           (sc[10] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[10] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 189:  H + pC4H9 => 2 C2H5
    const amrex::Real k_f =
      3.7e+18 * exp((-2.92) * tc[0] - (6292.72440588802) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc_qss[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - 2.000000 * g_RT_qss[5] + g_RT_qss[7])) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
  }

  {
    // reaction 190:  H + pC4H9 <=> C4H81 + H2
    const amrex::Real k_f = 1800000;
    const amrex::Real qf = k_f * (sc[1] * sc_qss[7]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[5] - g_RT[22] + g_RT_qss[7])) *
                           (sc[5] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 191:  O + pC4H9 <=> CH2O + nC3H7
    const amrex::Real k_f = 96000000;
    const amrex::Real qf = k_f * (sc[2] * sc_qss[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[11] - g_RT_qss[6] + g_RT_qss[7])) *
      (sc[11] * sc_qss[6]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 192:  OH + pC4H9 <=> C4H81 + H2O
    const amrex::Real k_f = 24000000;
    const amrex::Real qf = k_f * (sc[3] * sc_qss[7]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[6] - g_RT[22] + g_RT_qss[7])) *
                           (sc[6] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 193:  O2 + pC4H9 <=> C4H81 + HO2
    const amrex::Real k_f = 270000;
    const amrex::Real qf = k_f * (sc[8] * sc_qss[7]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[8] - g_RT[22] + g_RT_qss[7])) *
                           (sc[4] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[8] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 194:  HO2 + pC4H9 <=> CH2O + OH + nC3H7
    const amrex::Real k_f = 24000000;
    const amrex::Real qf = k_f * (sc[4] * sc_qss[7]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[11] - g_RT_qss[6] + g_RT_qss[7])) *
      (refCinv) * (sc[3] * sc[11] * sc_qss[6]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 195:  CH3 + pC4H9 <=> C4H81 + CH4
    const amrex::Real k_f = 11000000;
    const amrex::Real qf = k_f * (sc[9] * sc_qss[7]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[10] - g_RT[22] + g_RT_qss[7])) *
                           (sc[10] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[10] += qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 196:  C5H9 => C2H4 + aC3H5
    const amrex::Real k_f = 25000000000000 * exp(-(15106.1214767918) * invT);
    const amrex::Real qf = k_f * (sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[15] - g_RT[18] + g_RT[23])) * (refCinv) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[15] += qdot;
    wdot[18] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 197:  C5H9 => C2H3 + C3H6
    const amrex::Real k_f = 25000000000000 * exp(-(15106.1214767918) * invT);
    const amrex::Real qf = k_f * (sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[19] + g_RT[23] - g_RT_qss[4])) * (refCinv) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[19] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 198:  C5H10 + H <=> C2H4 + nC3H7
    const amrex::Real k_f =
      8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[15] + g_RT[24] - g_RT_qss[6])) *
                           (sc[15] * sc_qss[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[15] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 199:  C5H10 + H <=> C2H5 + C3H6
    const amrex::Real k_f =
      1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[19] + g_RT[24] - g_RT_qss[5])) *
                           (sc[19] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[19] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 200:  C2H4 + nC3H7 <=> PXC5H11
    const amrex::Real k_f = 300000 * exp(-(3673.48166037445) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc_qss[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[15] + g_RT_qss[6] - g_RT_qss[8])) * (refC) * (sc_qss[8]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
  }

  {
    // reaction 201:  C6H12 + H <=> C2H4 + pC4H9
    const amrex::Real k_f =
      8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[15] + g_RT[25] - g_RT_qss[7])) *
                           (sc[15] * sc_qss[7]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[15] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 202:  C6H12 + H <=> C3H6 + nC3H7
    const amrex::Real k_f =
      1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[19] + g_RT[25] - g_RT_qss[6])) *
                           (sc[19] * sc_qss[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[19] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 203:  C2H4 + pC4H9 <=> PXC6H13
    const amrex::Real k_f = 300000 * exp(-(3673.48166037445) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc_qss[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[15] + g_RT_qss[7] - g_RT_qss[9])) * (refC) * (sc_qss[9]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
  }

  {
    // reaction 204:  C7H14 + H <=> C2H4 + PXC5H11
    const amrex::Real k_f =
      8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[26]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[15] + g_RT[26] - g_RT_qss[8])) *
                           (sc[15] * sc_qss[8]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[15] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 205:  C7H14 + H <=> C3H6 + pC4H9
    const amrex::Real k_f =
      1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[26]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[19] + g_RT[26] - g_RT_qss[7])) *
                           (sc[19] * sc_qss[7]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[19] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 206:  C2H4 + PXC5H11 <=> PXC7H15
    const amrex::Real k_f = 300000 * exp(-(3673.48166037445) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc_qss[8]);
    const amrex::Real qr = k_f * exp(-(g_RT[15] + g_RT_qss[8] - g_RT_qss[10])) *
                           (refC) * (sc_qss[10]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
  }

  {
    // reaction 207:  C8H16 + H <=> C2H4 + PXC6H13
    const amrex::Real k_f =
      8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[27]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[15] + g_RT[27] - g_RT_qss[9])) *
                           (sc[15] * sc_qss[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[15] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 208:  C8H16 + H <=> C3H6 + PXC5H11
    const amrex::Real k_f =
      1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[27]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[19] + g_RT[27] - g_RT_qss[8])) *
                           (sc[19] * sc_qss[8]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[19] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 209:  C2H4 + PXC6H13 <=> PXC8H17
    const amrex::Real k_f = 300000 * exp(-(3673.48166037445) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc_qss[9]);
    const amrex::Real qr = k_f * exp(-(g_RT[15] + g_RT_qss[9] - g_RT_qss[11])) *
                           (refC) * (sc_qss[11]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
  }

  {
    // reaction 210:  C9H18 + H <=> C2H4 + PXC7H15
    const amrex::Real k_f =
      8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[15] + g_RT[28] - g_RT_qss[10])) *
      (sc[15] * sc_qss[10]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[15] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 211:  C9H18 + H <=> C3H6 + PXC6H13
    const amrex::Real k_f =
      1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[28]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[19] + g_RT[28] - g_RT_qss[9])) *
                           (sc[19] * sc_qss[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[19] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 212:  C2H4 + PXC7H15 <=> PXC9H19
    const amrex::Real k_f = 300000 * exp(-(3673.48166037445) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc_qss[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[15] - g_RT[29] + g_RT_qss[10])) * (refC) * (sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 213:  C10H20 + H <=> C2H4 + PXC8H17
    const amrex::Real k_f =
      8e+15 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[30]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[15] + g_RT[30] - g_RT_qss[11])) *
      (sc[15] * sc_qss[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[15] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 214:  C10H20 + H <=> C3H6 + PXC7H15
    const amrex::Real k_f =
      1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[30]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[19] + g_RT[30] - g_RT_qss[10])) *
      (sc[19] * sc_qss[10]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[19] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 215:  C2H4 + PXC8H17 <=> PXC10H21
    const amrex::Real k_f = 300000 * exp(-(3673.48166037445) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc_qss[11]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[15] + g_RT_qss[11] - g_RT_qss[12])) *
                           (refC) * (sc_qss[12]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
  }

  {
    // reaction 216:  C12H24 <=> C5H9 + PXC7H15
    const amrex::Real k_f = 3.5e+16 * exp(-(35696.6303005228) * invT);
    const amrex::Real qf = k_f * (sc[31]);
    const amrex::Real qr = k_f * exp(-(-g_RT[23] + g_RT[31] - g_RT_qss[10])) *
                           (refCinv) * (sc[23] * sc_qss[10]);
    const amrex::Real qdot = qf - qr;
    wdot[23] += qdot;
    wdot[31] -= qdot;
  }

  {
    // reaction 217:  C2H4 + PXC10H21 <=> PXC12H25
    const amrex::Real k_f = 300000 * exp(-(3673.48166037445) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc_qss[12]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[15] + g_RT_qss[12] - g_RT_qss[13])) *
                           (refC) * (sc_qss[13]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
  }

  {
    // reaction 218:  PXC12H25 <=> S3XC12H25
    const amrex::Real k_f =
      3670000000000 * exp((-0.6) * tc[0] - (7246.31998758796) * invT);
    const amrex::Real qf = k_f * (sc_qss[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT_qss[13] - g_RT_qss[15])) * (sc_qss[15]);
    const amrex::Real qdot = qf - qr;
  }

  {
    // reaction 219:  C3H6 + PXC9H19 <=> SXC12H25
    const amrex::Real k_f = 300000 * exp(-(3673.48166037445) * invT);
    const amrex::Real qf = k_f * (sc[19] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[19] + g_RT[29] - g_RT_qss[14])) * (refC) * (sc_qss[14]);
    const amrex::Real qdot = qf - qr;
    wdot[19] -= qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 220:  C4H81 + PXC8H17 <=> SXC12H25
    const amrex::Real k_f = 300000 * exp(-(3673.48166037445) * invT);
    const amrex::Real qf = k_f * (sc[22] * sc_qss[11]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[22] + g_RT_qss[11] - g_RT_qss[14])) *
                           (refC) * (sc_qss[14]);
    const amrex::Real qdot = qf - qr;
    wdot[22] -= qdot;
  }

  {
    // reaction 221:  C5H10 + PXC7H15 <=> S3XC12H25
    const amrex::Real k_f = 300000 * exp(-(3673.48166037445) * invT);
    const amrex::Real qf = k_f * (sc[24] * sc_qss[10]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[24] + g_RT_qss[10] - g_RT_qss[15])) *
                           (refC) * (sc_qss[15]);
    const amrex::Real qdot = qf - qr;
    wdot[24] -= qdot;
  }

  {
    // reaction 222:  C10H20 + C2H5 <=> S3XC12H25
    const amrex::Real k_f = 300000 * exp(-(3673.48166037445) * invT);
    const amrex::Real qf = k_f * (sc[30] * sc_qss[5]);
    const amrex::Real qr = k_f * exp(-(g_RT[30] + g_RT_qss[5] - g_RT_qss[15])) *
                           (refC) * (sc_qss[15]);
    const amrex::Real qdot = qf - qr;
    wdot[30] -= qdot;
  }

  {
    // reaction 223:  C6H12 + PXC6H13 <=> S3XC12H25
    const amrex::Real k_f = 300000 * exp(-(3673.48166037445) * invT);
    const amrex::Real qf = k_f * (sc[25] * sc_qss[9]);
    const amrex::Real qr = k_f * exp(-(g_RT[25] + g_RT_qss[9] - g_RT_qss[15])) *
                           (refC) * (sc_qss[15]);
    const amrex::Real qdot = qf - qr;
    wdot[25] -= qdot;
  }

  {
    // reaction 224:  C9H18 + nC3H7 <=> S3XC12H25
    const amrex::Real k_f = 300000 * exp(-(3673.48166037445) * invT);
    const amrex::Real qf = k_f * (sc[28] * sc_qss[6]);
    const amrex::Real qr = k_f * exp(-(g_RT[28] + g_RT_qss[6] - g_RT_qss[15])) *
                           (refC) * (sc_qss[15]);
    const amrex::Real qdot = qf - qr;
    wdot[28] -= qdot;
  }

  {
    // reaction 225:  C7H14 + PXC5H11 <=> S3XC12H25
    const amrex::Real k_f = 300000 * exp(-(3673.48166037445) * invT);
    const amrex::Real qf = k_f * (sc[26] * sc_qss[8]);
    const amrex::Real qr = k_f * exp(-(g_RT[26] + g_RT_qss[8] - g_RT_qss[15])) *
                           (refC) * (sc_qss[15]);
    const amrex::Real qdot = qf - qr;
    wdot[26] -= qdot;
  }

  {
    // reaction 226:  C8H16 + pC4H9 <=> S3XC12H25
    const amrex::Real k_f = 300000 * exp(-(3673.48166037445) * invT);
    const amrex::Real qf = k_f * (sc[27] * sc_qss[7]);
    const amrex::Real qr = k_f * exp(-(g_RT[27] + g_RT_qss[7] - g_RT_qss[15])) *
                           (refC) * (sc_qss[15]);
    const amrex::Real qdot = qf - qr;
    wdot[27] -= qdot;
  }

  {
    // reaction 227:  C2H5 + PXC10H21 <=> NC12H26
    const amrex::Real k_f = 188000000 * exp((-0.5) * tc[0]);
    const amrex::Real qf = k_f * (sc_qss[5] * sc_qss[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT_qss[5] + g_RT_qss[12])) * (refC) * (sc[0]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[0] += qdot;
  }

  {
    // reaction 228:  PXC9H19 + nC3H7 <=> NC12H26
    const amrex::Real k_f = 188000000 * exp((-0.5) * tc[0]);
    const amrex::Real qf = k_f * (sc[29] * sc_qss[6]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[29] + g_RT_qss[6])) * (refC) * (sc[0]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 229:  PXC8H17 + pC4H9 <=> NC12H26
    const amrex::Real k_f = 188000000 * exp((-0.5) * tc[0]);
    const amrex::Real qf = k_f * (sc_qss[7] * sc_qss[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT_qss[7] + g_RT_qss[11])) * (refC) * (sc[0]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[0] += qdot;
  }

  {
    // reaction 230:  PXC5H11 + PXC7H15 <=> NC12H26
    const amrex::Real k_f = 188000000 * exp((-0.5) * tc[0]);
    const amrex::Real qf = k_f * (sc_qss[8] * sc_qss[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT_qss[8] + g_RT_qss[10])) * (refC) * (sc[0]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[0] += qdot;
  }

  {
    // reaction 231:  2 PXC6H13 <=> NC12H26
    const amrex::Real k_f = 188000000 * exp((-0.5) * tc[0]);
    const amrex::Real qf = k_f * (pow(sc_qss[9], 2.000000));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + 2.000000 * g_RT_qss[9])) * (refC) * (sc[0]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[0] += qdot;
  }

  {
    // reaction 232:  H + NC12H26 <=> H2 + PXC12H25
    const amrex::Real k_f =
      1.3 * exp((2.54) * tc[0] - (3399.73179417669) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[1]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[0] + g_RT[1] - g_RT[5] - g_RT_qss[13])) *
                           (sc[5] * sc_qss[13]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 233:  H + NC12H26 <=> H2 + SXC12H25
    const amrex::Real k_f = 2.6 * exp((2.4) * tc[0] - (2249.8817128129) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[1]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[0] + g_RT[1] - g_RT[5] - g_RT_qss[14])) *
                           (sc[5] * sc_qss[14]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 234:  H + NC12H26 <=> H2 + S3XC12H25
    const amrex::Real k_f = 3.9 * exp((2.4) * tc[0] - (2249.8817128129) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[1]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[0] + g_RT[1] - g_RT[5] - g_RT_qss[15])) *
                           (sc[5] * sc_qss[15]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 235:  NC12H26 + O <=> OH + PXC12H25
    const amrex::Real k_f =
      0.19 * exp((2.68) * tc[0] - (1869.95313013034) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[2]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[0] + g_RT[2] - g_RT[3] - g_RT_qss[13])) *
                           (sc[3] * sc_qss[13]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[2] -= qdot;
    wdot[3] += qdot;
  }

  {
    // reaction 236:  NC12H26 + O <=> OH + SXC12H25
    const amrex::Real k_f =
      0.0952 * exp((2.71) * tc[0] - (1059.77429818474) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[2]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[0] + g_RT[2] - g_RT[3] - g_RT_qss[14])) *
                           (sc[3] * sc_qss[14]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[2] -= qdot;
    wdot[3] += qdot;
  }

  {
    // reaction 237:  NC12H26 + O <=> OH + S3XC12H25
    const amrex::Real k_f =
      0.1428 * exp((2.71) * tc[0] - (1059.77429818474) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[2]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[0] + g_RT[2] - g_RT[3] - g_RT_qss[15])) *
                           (sc[3] * sc_qss[15]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[2] -= qdot;
    wdot[3] += qdot;
  }

  {
    // reaction 238:  NC12H26 + OH <=> H2O + PXC12H25
    const amrex::Real k_f =
      0.0034 * exp((2.66) * tc[0] - (265.195182879087) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[3]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[0] + g_RT[3] - g_RT[6] - g_RT_qss[13])) *
                           (sc[6] * sc_qss[13]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 239:  NC12H26 + OH <=> H2O + SXC12H25
    const amrex::Real k_f =
      0.074 * exp((2.39) * tc[0] - (197.764149661255) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[3]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[0] + g_RT[3] - g_RT[6] - g_RT_qss[14])) *
                           (sc[6] * sc_qss[14]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 240:  NC12H26 + OH <=> H2O + S3XC12H25
    const amrex::Real k_f =
      0.101 * exp((2.39) * tc[0] - (197.764149661255) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[3]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[0] + g_RT[3] - g_RT[6] - g_RT_qss[15])) *
                           (sc[6] * sc_qss[15]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 241:  NC12H26 + O2 <=> HO2 + PXC12H25
    const amrex::Real k_f = 40000000 * exp(-(25628.8247894344) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[8]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[0] - g_RT[4] + g_RT[8] - g_RT_qss[13])) *
                           (sc[4] * sc_qss[13]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[4] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 242:  NC12H26 + O2 <=> HO2 + SXC12H25
    const amrex::Real k_f = 80000000 * exp(-(23948.0811256466) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[8]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[0] - g_RT[4] + g_RT[8] - g_RT_qss[14])) *
                           (sc[4] * sc_qss[14]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[4] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 243:  NC12H26 + O2 <=> HO2 + S3XC12H25
    const amrex::Real k_f = 120000000 * exp(-(23948.0811256466) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[8]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[0] - g_RT[4] + g_RT[8] - g_RT_qss[15])) *
                           (sc[4] * sc_qss[15]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[4] += qdot;
    wdot[8] -= qdot;
  }

  {
    // reaction 244:  HO2 + NC12H26 <=> H2O2 + PXC12H25
    const amrex::Real k_f =
      0.0676 * exp((2.55) * tc[0] - (8298.04281911983) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[0] + g_RT[4] - g_RT[7] - g_RT_qss[13])) *
                           (sc[7] * sc_qss[13]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[4] -= qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 245:  HO2 + NC12H26 <=> H2O2 + SXC12H25
    const amrex::Real k_f =
      0.089 * exp((2.6) * tc[0] - (6999.74382134365) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[0] + g_RT[4] - g_RT[7] - g_RT_qss[14])) *
                           (sc[7] * sc_qss[14]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[4] -= qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 246:  HO2 + NC12H26 <=> H2O2 + S3XC12H25
    const amrex::Real k_f =
      0.0885 * exp((2.6) * tc[0] - (6999.74382134365) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[0] + g_RT[4] - g_RT[7] - g_RT_qss[15])) *
                           (sc[7] * sc_qss[15]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[4] -= qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 247:  CH3 + NC12H26 <=> CH4 + PXC12H25
    const amrex::Real k_f =
      1.81e-06 * exp((3.65) * tc[0] - (3599.50881050116) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[9]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[0] + g_RT[9] - g_RT[10] - g_RT_qss[13])) *
                           (sc[10] * sc_qss[13]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 248:  CH3 + NC12H26 <=> CH4 + SXC12H25
    const amrex::Real k_f =
      6e-06 * exp((3.46) * tc[0] - (2757.62732860986) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[9]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[0] + g_RT[9] - g_RT[10] - g_RT_qss[14])) *
                           (sc[10] * sc_qss[14]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 249:  CH3 + NC12H26 <=> CH4 + S3XC12H25
    const amrex::Real k_f =
      9e-06 * exp((3.46) * tc[0] - (2757.62732860986) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[9]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[0] + g_RT[9] - g_RT[10] - g_RT_qss[15])) *
                           (sc[10] * sc_qss[15]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 250:  O2 + PXC12H25 => C12H25O2
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[8] * sc_qss[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[8] - g_RT[32] + g_RT_qss[13])) * (refC) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[32] += qdot;
  }

  {
    // reaction 251:  C12H25O2 => O2 + PXC12H25
    const amrex::Real k_f = 27500000000000 * exp(-(13788.1366430493) * invT);
    const amrex::Real qf = k_f * (sc[32]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[32] - g_RT_qss[13])) * (refCinv) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[32] -= qdot;
  }

  {
    // reaction 252:  O2 + SXC12H25 => C12H25O2
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[8] * sc_qss[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[8] - g_RT[32] + g_RT_qss[14])) * (refC) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[32] += qdot;
  }

  {
    // reaction 253:  C12H25O2 => O2 + SXC12H25
    const amrex::Real k_f = 27500000000000 * exp(-(13788.1366430493) * invT);
    const amrex::Real qf = k_f * (sc[32]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[32] - g_RT_qss[14])) * (refCinv) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[32] -= qdot;
  }

  {
    // reaction 254:  O2 + S3XC12H25 => C12H25O2
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[8] * sc_qss[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[8] - g_RT[32] + g_RT_qss[15])) * (refC) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[32] += qdot;
  }

  {
    // reaction 255:  C12H25O2 => O2 + S3XC12H25
    const amrex::Real k_f = 27500000000000 * exp(-(13788.1366430493) * invT);
    const amrex::Real qf = k_f * (sc[32]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[32] - g_RT_qss[15])) * (refCinv) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[32] -= qdot;
  }

  {
    // reaction 256:  C12H25O2 => C12OOH
    const amrex::Real k_f = 1510000000000 * exp(-(9561.11665028967) * invT);
    const amrex::Real qf = k_f * (sc[32]);
    const amrex::Real qr = k_f * exp(-(g_RT[32] - g_RT_qss[16])) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[32] -= qdot;
  }

  {
    // reaction 257:  C12OOH => C12H25O2
    const amrex::Real k_f = 100000000000 * exp(-(5786.99165675428) * invT);
    const amrex::Real qf = k_f * (sc_qss[16]);
    const amrex::Real qr = k_f * exp(-(-g_RT[32] + g_RT_qss[16])) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[32] += qdot;
  }

  {
    // reaction 258:  O2 + PXC12H25 => C12H24 + HO2
    const amrex::Real k_f = 350000 * exp(-(3019.29999482832) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc_qss[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[8] - g_RT[31] + g_RT_qss[13])) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[8] -= qdot;
    wdot[31] += qdot;
  }

  {
    // reaction 259:  C12H24 + HO2 => O2 + PXC12H25
    const amrex::Real k_f = 316000 * exp(-(9812.72498319203) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[31]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[8] + g_RT[31] - g_RT_qss[13])) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[8] += qdot;
    wdot[31] -= qdot;
  }

  {
    // reaction 260:  O2 + SXC12H25 => C12H24 + HO2
    const amrex::Real k_f = 350000 * exp(-(3019.29999482832) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc_qss[14]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[8] - g_RT[31] + g_RT_qss[14])) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[8] -= qdot;
    wdot[31] += qdot;
  }

  {
    // reaction 261:  C12H24 + HO2 => O2 + SXC12H25
    const amrex::Real k_f = 316000 * exp(-(9812.72498319203) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[31]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[8] + g_RT[31] - g_RT_qss[14])) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[8] += qdot;
    wdot[31] -= qdot;
  }

  {
    // reaction 262:  O2 + S3XC12H25 => C12H24 + HO2
    const amrex::Real k_f = 350000 * exp(-(3019.29999482832) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc_qss[15]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[8] - g_RT[31] + g_RT_qss[15])) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[8] -= qdot;
    wdot[31] += qdot;
  }

  {
    // reaction 263:  C12H24 + HO2 => O2 + S3XC12H25
    const amrex::Real k_f = 316000 * exp(-(9812.72498319203) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[31]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[8] + g_RT[31] - g_RT_qss[15])) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[8] += qdot;
    wdot[31] -= qdot;
  }

  {
    // reaction 264:  C12OOH + O2 => O2C12H24OOH
    const amrex::Real k_f = 46000;
    const amrex::Real qf = k_f * (sc[8] * sc_qss[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[8] + g_RT_qss[16] - g_RT_qss[17])) * (refC) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
  }

  {
    // reaction 265:  O2C12H24OOH => C12OOH + O2
    const amrex::Real k_f = 25100000000000 * exp(-(13788.1366430493) * invT);
    const amrex::Real qf = k_f * (sc_qss[17]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] - g_RT_qss[16] + g_RT_qss[17])) * (refCinv) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
  }

  {
    // reaction 266:  O2C12H24OOH <=> OC12H23OOH + OH
    const amrex::Real k_f = 89000000000 * exp(-(8554.68331868023) * invT);
    const amrex::Real qf = k_f * (sc_qss[17]);
    const amrex::Real qr = k_f * exp(-(-g_RT[3] - g_RT[33] + g_RT_qss[17])) *
                           (refCinv) * (sc[3] * sc[33]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[33] += qdot;
  }

  {
    // reaction 267:  OC12H23OOH => 3 C2H4 + C2H5 + 2 CH2CHO + OH
    const amrex::Real k_f = 1.8e+15 * exp(-(21167.8090470755) * invT);
    const amrex::Real qf = k_f * (sc[33]);
    const amrex::Real qr = k_f *
                           exp(
                             -(-g_RT[3] - 3.000000 * g_RT[15] -
                               2.000000 * g_RT[17] + g_RT[33] - g_RT_qss[5])) *
                           (pow(refCinv, 6.000000)) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[15] += 3.000000 * qdot;
    wdot[17] += 2.000000 * qdot;
    wdot[33] -= qdot;
  }

  return;
}

// compute the production rate for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWC(amrex::Real* T, amrex::Real* C, amrex::Real* wdot)
{
  int id; // loop counter

  // convert to SI
  for (id = 0; id < 35; ++id) {
    C[id] *= 1.0e6;
  }

  // convert to chemkin units
  productionRate(wdot, C, *T);

  // convert to chemkin units
  for (id = 0; id < 35; ++id) {
    C[id] *= 1.0e-6;
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYP(amrex::Real* P, amrex::Real* T, amrex::Real* y, amrex::Real* wdot)
{
  int id;            // loop counter
  amrex::Real c[35]; // temporary storage
  amrex::Real YOW = 0;
  amrex::Real PWORT;
  amrex::Real imw[35];

  get_imw(imw);

  // Compute inverse of mean molecular wt first
  YOW += y[0] * imw[0];   // NC12H26
  YOW += y[1] * imw[1];   // H
  YOW += y[2] * imw[2];   // O
  YOW += y[3] * imw[3];   // OH
  YOW += y[4] * imw[4];   // HO2
  YOW += y[5] * imw[5];   // H2
  YOW += y[6] * imw[6];   // H2O
  YOW += y[7] * imw[7];   // H2O2
  YOW += y[8] * imw[8];   // O2
  YOW += y[9] * imw[9];   // CH3
  YOW += y[10] * imw[10]; // CH4
  YOW += y[11] * imw[11]; // CH2O
  YOW += y[12] * imw[12]; // CO
  YOW += y[13] * imw[13]; // CO2
  YOW += y[14] * imw[14]; // C2H2
  YOW += y[15] * imw[15]; // C2H4
  YOW += y[16] * imw[16]; // C2H6
  YOW += y[17] * imw[17]; // CH2CHO
  YOW += y[18] * imw[18]; // aC3H5
  YOW += y[19] * imw[19]; // C3H6
  YOW += y[20] * imw[20]; // C2H3CHO
  YOW += y[21] * imw[21]; // C4H7
  YOW += y[22] * imw[22]; // C4H81
  YOW += y[23] * imw[23]; // C5H9
  YOW += y[24] * imw[24]; // C5H10
  YOW += y[25] * imw[25]; // C6H12
  YOW += y[26] * imw[26]; // C7H14
  YOW += y[27] * imw[27]; // C8H16
  YOW += y[28] * imw[28]; // C9H18
  YOW += y[29] * imw[29]; // PXC9H19
  YOW += y[30] * imw[30]; // C10H20
  YOW += y[31] * imw[31]; // C12H24
  YOW += y[32] * imw[32]; // C12H25O2
  YOW += y[33] * imw[33]; // OC12H23OOH
  YOW += y[34] * imw[34]; // N2
  // PW/RT (see Eq. 7)
  PWORT = (*P) / (YOW * 8.31446261815324e+07 * (*T));
  // multiply by 1e6 so c goes to SI
  PWORT *= 1e6;
  // Now compute conversion (and go to SI)
  c[0] = PWORT * y[0] * imw[0];
  c[1] = PWORT * y[1] * imw[1];
  c[2] = PWORT * y[2] * imw[2];
  c[3] = PWORT * y[3] * imw[3];
  c[4] = PWORT * y[4] * imw[4];
  c[5] = PWORT * y[5] * imw[5];
  c[6] = PWORT * y[6] * imw[6];
  c[7] = PWORT * y[7] * imw[7];
  c[8] = PWORT * y[8] * imw[8];
  c[9] = PWORT * y[9] * imw[9];
  c[10] = PWORT * y[10] * imw[10];
  c[11] = PWORT * y[11] * imw[11];
  c[12] = PWORT * y[12] * imw[12];
  c[13] = PWORT * y[13] * imw[13];
  c[14] = PWORT * y[14] * imw[14];
  c[15] = PWORT * y[15] * imw[15];
  c[16] = PWORT * y[16] * imw[16];
  c[17] = PWORT * y[17] * imw[17];
  c[18] = PWORT * y[18] * imw[18];
  c[19] = PWORT * y[19] * imw[19];
  c[20] = PWORT * y[20] * imw[20];
  c[21] = PWORT * y[21] * imw[21];
  c[22] = PWORT * y[22] * imw[22];
  c[23] = PWORT * y[23] * imw[23];
  c[24] = PWORT * y[24] * imw[24];
  c[25] = PWORT * y[25] * imw[25];
  c[26] = PWORT * y[26] * imw[26];
  c[27] = PWORT * y[27] * imw[27];
  c[28] = PWORT * y[28] * imw[28];
  c[29] = PWORT * y[29] * imw[29];
  c[30] = PWORT * y[30] * imw[30];
  c[31] = PWORT * y[31] * imw[31];
  c[32] = PWORT * y[32] * imw[32];
  c[33] = PWORT * y[33] * imw[33];
  c[34] = PWORT * y[34] * imw[34];

  // convert to chemkin units
  productionRate(wdot, c, *T);

  // convert to chemkin units
  for (id = 0; id < 35; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXP(amrex::Real* P, amrex::Real* T, amrex::Real* x, amrex::Real* wdot)
{
  int id;            // loop counter
  amrex::Real c[35]; // temporary storage
  amrex::Real PORT =
    1e6 * (*P) /
    (8.31446261815324e+07 * (*T)); // 1e6 * P/RT so c goes to SI units

  // Compute conversion, see Eq 10
  for (id = 0; id < 35; ++id) {
    c[id] = x[id] * PORT;
  }

  // convert to chemkin units
  productionRate(wdot, c, *T);

  // convert to chemkin units
  for (id = 0; id < 35; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYR(amrex::Real* rho, amrex::Real* T, amrex::Real* y, amrex::Real* wdot)
{
  int id;            // loop counter
  amrex::Real c[35]; // temporary storage
  amrex::Real imw[35];

  get_imw(imw);

  // See Eq 8 with an extra 1e6 so c goes to SI
  c[0] = 1e6 * (*rho) * y[0] * imw[0];
  c[1] = 1e6 * (*rho) * y[1] * imw[1];
  c[2] = 1e6 * (*rho) * y[2] * imw[2];
  c[3] = 1e6 * (*rho) * y[3] * imw[3];
  c[4] = 1e6 * (*rho) * y[4] * imw[4];
  c[5] = 1e6 * (*rho) * y[5] * imw[5];
  c[6] = 1e6 * (*rho) * y[6] * imw[6];
  c[7] = 1e6 * (*rho) * y[7] * imw[7];
  c[8] = 1e6 * (*rho) * y[8] * imw[8];
  c[9] = 1e6 * (*rho) * y[9] * imw[9];
  c[10] = 1e6 * (*rho) * y[10] * imw[10];
  c[11] = 1e6 * (*rho) * y[11] * imw[11];
  c[12] = 1e6 * (*rho) * y[12] * imw[12];
  c[13] = 1e6 * (*rho) * y[13] * imw[13];
  c[14] = 1e6 * (*rho) * y[14] * imw[14];
  c[15] = 1e6 * (*rho) * y[15] * imw[15];
  c[16] = 1e6 * (*rho) * y[16] * imw[16];
  c[17] = 1e6 * (*rho) * y[17] * imw[17];
  c[18] = 1e6 * (*rho) * y[18] * imw[18];
  c[19] = 1e6 * (*rho) * y[19] * imw[19];
  c[20] = 1e6 * (*rho) * y[20] * imw[20];
  c[21] = 1e6 * (*rho) * y[21] * imw[21];
  c[22] = 1e6 * (*rho) * y[22] * imw[22];
  c[23] = 1e6 * (*rho) * y[23] * imw[23];
  c[24] = 1e6 * (*rho) * y[24] * imw[24];
  c[25] = 1e6 * (*rho) * y[25] * imw[25];
  c[26] = 1e6 * (*rho) * y[26] * imw[26];
  c[27] = 1e6 * (*rho) * y[27] * imw[27];
  c[28] = 1e6 * (*rho) * y[28] * imw[28];
  c[29] = 1e6 * (*rho) * y[29] * imw[29];
  c[30] = 1e6 * (*rho) * y[30] * imw[30];
  c[31] = 1e6 * (*rho) * y[31] * imw[31];
  c[32] = 1e6 * (*rho) * y[32] * imw[32];
  c[33] = 1e6 * (*rho) * y[33] * imw[33];
  c[34] = 1e6 * (*rho) * y[34] * imw[34];

  // call productionRate
  productionRate(wdot, c, *T);

  // convert to chemkin units
  for (id = 0; id < 35; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXR(amrex::Real* rho, amrex::Real* T, amrex::Real* x, amrex::Real* wdot)
{
  int id;             // loop counter
  amrex::Real c[35];  // temporary storage
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 170.340000;  // NC12H26
  XW += x[1] * 1.008000;    // H
  XW += x[2] * 15.999000;   // O
  XW += x[3] * 17.007000;   // OH
  XW += x[4] * 33.006000;   // HO2
  XW += x[5] * 2.016000;    // H2
  XW += x[6] * 18.015000;   // H2O
  XW += x[7] * 34.014000;   // H2O2
  XW += x[8] * 31.998000;   // O2
  XW += x[9] * 15.035000;   // CH3
  XW += x[10] * 16.043000;  // CH4
  XW += x[11] * 30.026000;  // CH2O
  XW += x[12] * 28.010000;  // CO
  XW += x[13] * 44.009000;  // CO2
  XW += x[14] * 26.038000;  // C2H2
  XW += x[15] * 28.054000;  // C2H4
  XW += x[16] * 30.070000;  // C2H6
  XW += x[17] * 43.045000;  // CH2CHO
  XW += x[18] * 41.073000;  // aC3H5
  XW += x[19] * 42.081000;  // C3H6
  XW += x[20] * 56.064000;  // C2H3CHO
  XW += x[21] * 55.100000;  // C4H7
  XW += x[22] * 56.108000;  // C4H81
  XW += x[23] * 69.127000;  // C5H9
  XW += x[24] * 70.135000;  // C5H10
  XW += x[25] * 84.162000;  // C6H12
  XW += x[26] * 98.189000;  // C7H14
  XW += x[27] * 112.216000; // C8H16
  XW += x[28] * 126.243000; // C9H18
  XW += x[29] * 127.251000; // PXC9H19
  XW += x[30] * 140.270000; // C10H20
  XW += x[31] * 168.324000; // C12H24
  XW += x[32] * 201.330000; // C12H25O2
  XW += x[33] * 216.321000; // OC12H23OOH
  XW += x[34] * 28.014000;  // N2
  // Extra 1e6 factor to take c to SI
  ROW = 1e6 * (*rho) / XW;

  // Compute conversion, see Eq 11
  for (id = 0; id < 35; ++id) {
    c[id] = x[id] * ROW;
  }

  // convert to chemkin units
  productionRate(wdot, c, *T);

  // convert to chemkin units
  for (id = 0; id < 35; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// compute d(Cp/R)/dT and d(Cv/R)/dT at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
dcvpRdT(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1391 kelvin
  if (T < 1391) {
    // species 0: NC12H26
    species[0] = +1.47237711e-01 - 1.88794054e-04 * tc[1] +
                 9.22323804e-08 * tc[2] - 1.61440892e-11 * tc[3];
    // species 31: C12H24
    species[31] = +1.43992360e-01 - 1.92276803e-04 * tc[1] +
                  9.90523419e-08 * tc[2] - 1.84959276e-11 * tc[3];
  } else {
    // species 0: NC12H26
    species[0] = +5.63550048e-02 - 3.82986400e-05 * tc[1] +
                 8.88074586e-09 * tc[2] - 6.84976600e-13 * tc[3];
    // species 31: C12H24
    species[31] = +5.26230753e-02 - 3.57248638e-05 * tc[1] +
                  8.27849589e-09 * tc[2] - 6.38249996e-13 * tc[3];
  }

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 1: H
    species[1] = +7.05332819e-13 - 3.99183928e-15 * tc[1] +
                 6.90244896e-18 * tc[2] - 3.71092933e-21 * tc[3];
    // species 2: O
    species[2] = -3.27931884e-03 + 1.32861279e-05 * tc[1] -
                 1.83841987e-08 * tc[2] + 8.45063884e-12 * tc[3];
    // species 3: OH
    species[3] = -3.22544939e-03 + 1.30552938e-05 * tc[1] -
                 1.73956093e-08 * tc[2] + 8.24949516e-12 * tc[3];
    // species 4: HO2
    species[4] = -4.74912051e-03 + 4.23165782e-05 * tc[1] -
                 7.28291682e-08 * tc[2] + 3.71690050e-11 * tc[3];
    // species 5: H2
    species[5] = +7.98052075e-03 - 3.89563020e-05 * tc[1] +
                 6.04716282e-08 * tc[2] - 2.95044704e-11 * tc[3];
    // species 6: H2O
    species[6] = -2.03643410e-03 + 1.30408042e-05 * tc[1] -
                 1.64639119e-08 * tc[2] + 7.08791268e-12 * tc[3];
    // species 7: H2O2
    species[7] = -5.42822417e-04 + 3.34671402e-05 * tc[1] -
                 6.47312439e-08 * tc[2] + 3.44981745e-11 * tc[3];
    // species 8: O2
    species[8] = -2.99673416e-03 + 1.96946040e-05 * tc[1] -
                 2.90438853e-08 * tc[2] + 1.29749135e-11 * tc[3];
    // species 9: CH3
    species[9] = +2.01095175e-03 + 1.14604371e-05 * tc[1] -
                 2.06135228e-08 * tc[2] + 1.01754294e-11 * tc[3];
    // species 10: CH4
    species[10] = -1.36709788e-02 + 9.83601198e-05 * tc[1] -
                  1.45422908e-07 * tc[2] + 6.66775824e-11 * tc[3];
    // species 11: CH2O
    species[11] = -9.90833369e-03 + 7.46440016e-05 * tc[1] -
                  1.13785578e-07 * tc[2] + 5.27090608e-11 * tc[3];
    // species 12: CO
    species[12] = -6.10353680e-04 + 2.03362866e-06 * tc[1] +
                  2.72101765e-09 * tc[2] - 3.61769800e-12 * tc[3];
    // species 13: CO2
    species[13] = +8.98459677e-03 - 1.42471254e-05 * tc[1] +
                  7.37757066e-09 * tc[2] - 5.74798192e-13 * tc[3];
    // species 14: C2H2
    species[14] = +2.33615629e-02 - 7.10343630e-05 * tc[1] +
                  8.40457311e-08 * tc[2] - 3.40029190e-11 * tc[3];
    // species 15: C2H4
    species[15] = -7.57052247e-03 + 1.14198058e-04 * tc[1] -
                  2.07476626e-07 * tc[2] + 1.07953749e-10 * tc[3];
    // species 16: C2H6
    species[16] = -5.50154270e-03 + 1.19887658e-04 * tc[1] -
                  2.12539886e-07 * tc[2] + 1.07474308e-10 * tc[3];
    // species 17: CH2CHO
    species[17] = +1.07385740e-02 + 3.78298500e-06 * tc[1] -
                  2.14757493e-08 * tc[2] + 1.14695404e-11 * tc[3];
    // species 18: aC3H5
    species[18] = +1.98138210e-02 + 2.49941200e-05 * tc[1] -
                  1.00066665e-07 * tc[2] + 6.33862840e-11 * tc[3];
    // species 19: C3H6
    species[19] = +2.09251800e-02 + 8.97358800e-06 * tc[1] -
                  5.00673600e-08 * tc[2] + 2.86325840e-11 * tc[3];
    // species 20: C2H3CHO
    species[20] = +2.62310540e-02 - 1.85824610e-05 * tc[1] -
                  1.43511816e-08 * tc[2] + 1.33922172e-11 * tc[3];
    // species 21: C4H7
    species[21] = +3.96788570e-02 - 4.57961720e-05 * tc[1] +
                  6.40589190e-09 * tc[2] + 9.23855000e-12 * tc[3];
    // species 22: C4H81
    species[22] = +3.08533800e-02 + 1.01730494e-05 * tc[1] -
                  7.39646640e-08 * tc[2] + 4.44407720e-11 * tc[3];
    // species 23: C5H9
    species[23] = +4.04303890e-02 + 1.35604678e-05 * tc[1] -
                  1.01174226e-07 * tc[2] + 6.04668520e-11 * tc[3];
    // species 32: C12H25O2
    species[32] = +8.93873000e-02 + 2.90702000e-05 * tc[1] -
                  2.24775000e-07 * tc[2] + 1.34130000e-10 * tc[3];
    // species 33: OC12H23OOH
    species[33] = +6.50623000e-02 + 1.39011600e-04 * tc[1] -
                  3.80715000e-07 * tc[2] + 2.04396400e-10 * tc[3];
    // species 34: N2
    species[34] = +1.40824040e-03 - 7.92644400e-06 * tc[1] +
                  1.69245450e-08 * tc[2] - 9.77941600e-12 * tc[3];
  } else {
    // species 1: H
    species[1] = -2.30842973e-11 + 3.23123896e-14 * tc[1] -
                 1.42054571e-17 * tc[2] + 1.99278943e-21 * tc[3];
    // species 2: O
    species[2] = -8.59741137e-05 + 8.38969178e-08 * tc[1] -
                 3.00533397e-11 * tc[2] + 4.91334764e-15 * tc[3];
    // species 3: OH
    species[3] = +1.05650448e-03 - 5.18165516e-07 * tc[1] +
                 9.15656022e-11 * tc[2] - 5.32783504e-15 * tc[3];
    // species 4: HO2
    species[4] = +2.23982013e-03 - 1.26731630e-06 * tc[1] +
                 3.42739110e-10 * tc[2] - 4.31634140e-14 * tc[3];
    // species 5: H2
    species[5] = -4.94024731e-05 + 9.98913556e-07 * tc[1] -
                 5.38699182e-10 * tc[2] + 8.01021504e-14 * tc[3];
    // species 6: H2O
    species[6] = +2.17691804e-03 - 3.28145036e-07 * tc[1] -
                 2.91125961e-10 * tc[2] + 6.72803968e-14 * tc[3];
    // species 7: H2O2
    species[7] = +4.90831694e-03 - 3.80278450e-06 * tc[1] +
                 1.11355796e-09 * tc[2] - 1.15163322e-13 * tc[3];
    // species 8: O2
    species[8] = +1.48308754e-03 - 1.51593334e-06 * tc[1] +
                 6.28411665e-10 * tc[2] - 8.66871176e-14 * tc[3];
    // species 9: CH3
    species[9] = +7.23990037e-03 - 5.97428696e-06 * tc[1] +
                 1.78705393e-09 * tc[2] - 1.86861758e-13 * tc[3];
    // species 10: CH4
    species[10] = +1.33909467e-02 - 1.14657162e-05 * tc[1] +
                  3.66877605e-09 * tc[2] - 4.07260920e-13 * tc[3];
    // species 11: CH2O
    species[11] = +9.20000082e-03 - 8.84517626e-06 * tc[1] +
                  3.01923636e-09 * tc[2] - 3.53542256e-13 * tc[3];
    // species 12: CO
    species[12] = +2.06252743e-03 - 1.99765154e-06 * tc[1] +
                  6.90159024e-10 * tc[2] - 8.14590864e-14 * tc[3];
    // species 13: CO2
    species[13] = +4.41437026e-03 - 4.42962808e-06 * tc[1] +
                  1.57047056e-09 * tc[2] - 1.88833666e-13 * tc[3];
    // species 14: C2H2
    species[14] = +5.96166664e-03 - 4.74589704e-06 * tc[1] +
                  1.40223651e-09 * tc[2] - 1.44494085e-13 * tc[3];
    // species 15: C2H4
    species[15] = +1.46454151e-02 - 1.34215583e-05 * tc[1] +
                  4.41668769e-09 * tc[2] - 5.02824244e-13 * tc[3];
    // species 16: C2H6
    species[16] = +2.16852677e-02 - 2.00512134e-05 * tc[1] +
                  6.64236003e-09 * tc[2] - 7.60011560e-13 * tc[3];
    // species 17: CH2CHO
    species[17] = +8.13059140e-03 - 5.48724900e-06 * tc[1] +
                  1.22109123e-09 * tc[2] - 8.70406840e-14 * tc[3];
    // species 18: aC3H5
    species[18] = +1.43247310e-02 - 1.13563264e-05 * tc[1] +
                  3.32424030e-09 * tc[2] - 3.61455548e-13 * tc[3];
    // species 19: C3H6
    species[19] = +1.49083400e-02 - 9.89979800e-06 * tc[1] +
                  2.16360660e-09 * tc[2] - 1.50648160e-13 * tc[3];
    // species 20: C2H3CHO
    species[20] = +1.71142560e-02 - 1.49668322e-05 * tc[1] +
                  4.27567470e-09 * tc[2] - 3.66987364e-13 * tc[3];
    // species 21: C4H7
    species[21] = +2.26345580e-02 - 1.85090940e-05 * tc[1] +
                  5.04237810e-09 * tc[2] - 4.16344680e-13 * tc[3];
    // species 22: C4H81
    species[22] = +3.43505070e-02 - 3.17663940e-05 * tc[1] +
                  9.92689860e-09 * tc[2] - 1.01444180e-12 * tc[3];
    // species 23: C5H9
    species[23] = +2.27141380e-02 - 1.55820926e-05 * tc[1] +
                  3.56295660e-09 * tc[2] - 2.63729792e-13 * tc[3];
    // species 32: C12H25O2
    species[32] = +5.37539000e-02 - 3.36372000e-05 * tc[1] +
                  7.54101000e-09 * tc[2] - 5.88832000e-13 * tc[3];
    // species 33: OC12H23OOH
    species[33] = +6.16392000e-02 - 4.19672000e-05 * tc[1] +
                  9.99498000e-09 * tc[2] - 8.14360000e-13 * tc[3];
    // species 34: N2
    species[34] = +1.48797680e-03 - 1.13695200e-06 * tc[1] +
                  3.02911140e-10 * tc[2] - 2.70134040e-14 * tc[3];
  }

  // species with midpoint at T=1392 kelvin
  if (T < 1392) {
    // species 24: C5H10
    species[24] = +5.74218294e-02 - 7.48973780e-05 * tc[1] +
                  3.82094967e-08 * tc[2] - 7.18439156e-12 * tc[3];
    // species 25: C6H12
    species[25] = +6.98655426e-02 - 9.18816044e-05 * tc[1] +
                  4.70902029e-08 * tc[2] - 8.85184700e-12 * tc[3];
    // species 26: C7H14
    species[26] = +8.24611601e-02 - 1.09300822e-04 * tc[1] +
                  5.63586909e-08 * tc[2] - 1.06295193e-11 * tc[3];
    // species 27: C8H16
    species[27] = +9.46066357e-02 - 1.25477104e-04 * tc[1] +
                  6.45474927e-08 * tc[2] - 1.21087473e-11 * tc[3];
    // species 28: C9H18
    species[28] = +1.06958297e-01 - 1.42194649e-04 * tc[1] +
                  7.31913231e-08 * tc[2] - 1.37108619e-11 * tc[3];
    // species 30: C10H20
    species[30] = +1.19305598e-01 - 1.58897805e-04 * tc[1] +
                  8.18209788e-08 * tc[2] - 1.53087349e-11 * tc[3];
  } else {
    // species 24: C5H10
    species[24] = +2.24072471e-02 - 1.52669605e-05 * tc[1] +
                  3.54566898e-09 * tc[2] - 2.73754056e-13 * tc[3];
    // species 25: C6H12
    species[25] = +2.67377658e-02 - 1.82007355e-05 * tc[1] +
                  4.22459304e-09 * tc[2] - 3.26049698e-13 * tc[3];
    // species 26: C7H14
    species[26] = +3.10607878e-02 - 2.11289586e-05 * tc[1] +
                  4.90217340e-09 * tc[2] - 3.78239288e-13 * tc[3];
    // species 27: C8H16
    species[27] = +3.53666462e-02 - 2.40416776e-05 * tc[1] +
                  5.57565159e-09 * tc[2] - 4.30089048e-13 * tc[3];
    // species 28: C9H18
    species[28] = +3.96825287e-02 - 2.69638892e-05 * tc[1] +
                  6.25171356e-09 * tc[2] - 4.82157176e-13 * tc[3];
    // species 30: C10H20
    species[30] = +4.39971526e-02 - 2.98851060e-05 * tc[1] +
                  6.92753034e-09 * tc[2] - 5.34205908e-13 * tc[3];
  }

  // species with midpoint at T=1390 kelvin
  if (T < 1390) {
    // species 29: PXC9H19
    species[29] = +1.05617283e-01 - 1.33639994e-04 * tc[1] +
                  6.43458498e-08 * tc[2] - 1.10961710e-11 * tc[3];
  } else {
    // species 29: PXC9H19
    species[29] = +4.12657344e-02 - 2.80766578e-05 * tc[1] +
                  6.51524613e-09 * tc[2] - 5.02769228e-13 * tc[3];
  }
  return;
}

// compute an approx to the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian_precond(amrex::Real* J, amrex::Real* sc, amrex::Real T, const int HP)
{

  // Do not use Analytical Jacobian with QSSA
  amrex::Abort();

  for (int i = 0; i < 1296; i++) {
    J[i] = 0.0;
  }

  amrex::Real wdot[35];
  for (int k = 0; k < 35; k++) {
    wdot[k] = 0.0;
  }

  const amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  amrex::Real invT = 1.0 / tc[1];
  amrex::Real invT2 = invT * invT;

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 / T;
  amrex::Real refCinv = 1.0 / refC;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int k = 0; k < 35; ++k) {
    mixture += sc[k];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[35];
  gibbs(g_RT, tc);
  amrex::Real g_RT_qss[18];
  gibbs_qss(g_RT_qss, tc);

  // compute the species enthalpy
  amrex::Real h_RT[35];
  speciesEnthalpy(h_RT, tc);
  amrex::Real h_RT_qss[18];
  speciesEnthalpy_qss(h_RT_qss, tc);

  // Fill sc_qss here
  amrex::Real sc_qss[18];
  amrex::Real kf_qss[198], qf_qss[198], qr_qss[198];
  comp_k_f_qss(tc, invT, kf_qss);
  comp_qss_coeff(kf_qss, qf_qss, qr_qss, sc, tc, g_RT, g_RT_qss);
  comp_sc_qss(sc_qss, qf_qss, qr_qss);

  amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
  amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
  amrex::Real dqdci, dcdc_fac, dqdc[35];
  amrex::Real Pr, fPr, F, k_0, logPr;
  amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
  amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
  amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
  amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
  const amrex::Real ln10 = log(10.0);
  const amrex::Real log10e = 1.0 / log(10.0);
  // reaction 0: H + O2 (+M) <=> HO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (11.89 - 1) * sc[6] + (0.85 - 1) * sc[8] +
          (1.09 - 1) * sc[12] + (2.18 - 1) * sc[13];
  // forward
  phi_f = sc[1] * sc[8];
  k_f = 5116000 * exp(0.44 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0.44 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 6.328e+19 * exp(-1.4 * tc[0] - 0.50321666580472 * (0) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.4 * invT + 0.50321666580472 * (0) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5) * exp(-T / 1e-30);
  Fcent2 = 0.5 * exp(-T / 1e+30);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1e+30);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[4];
  Kc = refCinv * exp(g_RT[1] - g_RT[4] + g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[8]) + (h_RT[4]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q; // H
  wdot[4] += q; // HO2
  wdot[8] -= q; // O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[8];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac - k_r;
  dqdc[5] = dcdc_fac;
  dqdc[6] = 11.89 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = 0.85 * dcdc_fac + k_f * sc[1];
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.09 * dcdc_fac;
  dqdc[13] = 2.18 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] -= dqdc[k];
    J[36 * k + 4] += dqdc[k];
    J[36 * k + 8] -= dqdc[k];
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT

  // reaction 1: 2 OH (+M) <=> H2O2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + (1.75 - 1) * sc[12] +
          (3.6 - 1) * sc[13];
  // forward
  phi_f = (sc[3] * sc[3]);
  k_f = 111000000 * exp(-0.37 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -0.37 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 2.01e+17 * exp(-0.584 * tc[0] - 0.50321666580472 * (-2293) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -0.584 * invT + 0.50321666580472 * (-2293) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7346) * exp(-T / 94);
  Fcent2 = 0.7346 * exp(-T / 1756);
  Fcent3 = exp(-5182 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 94 - Fcent2 / 1756 + Fcent3 * 5182 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[7];
  Kc = refCinv * exp(2.000000 * g_RT[3] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[3]) + (h_RT[7]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[3] -= 2 * q; // OH
  wdot[7] += q;     // H2O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac + k_f * 2.000000 * sc[3];
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac - k_r;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.75 * dcdc_fac;
  dqdc[13] = 3.6 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 3] += -2 * dqdc[k];
    J[36 * k + 7] += dqdc[k];
  }
  J[1263] += -2 * dqdT; // dwdot[OH]/dT
  J[1267] += dqdT;      // dwdot[H2O2]/dT

  // reaction 2: CO + H2 (+M) <=> CH2O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[5] * sc[12];
  k_f = 43 * exp(1.5 * tc[0] - 0.50321666580472 * (79600) * invT);
  dlnkfdT = 1.5 * invT + 0.50321666580472 * (79600) * invT2;
  // pressure-fall-off
  k_0 = 5.07e+27 * exp(-3.42 * tc[0] - 0.50321666580472 * (84350) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.42 * invT + 0.50321666580472 * (84350) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.932) * exp(-T / 197);
  Fcent2 = 0.932 * exp(-T / 1540);
  Fcent3 = exp(-10300 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 197 - Fcent2 / 1540 + Fcent3 * 10300 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[11];
  Kc = refCinv * exp(g_RT[5] - g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[12]) + (h_RT[11]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[5] -= q;  // H2
  wdot[11] += q; // CH2O
  wdot[12] -= q; // CO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac + k_f * sc[12];
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac - k_r;
  dqdc[12] = 1.5 * dcdc_fac + k_f * sc[5];
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = 3 * dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 5] -= dqdc[k];
    J[36 * k + 11] += dqdc[k];
    J[36 * k + 12] -= dqdc[k];
  }
  J[1265] -= dqdT; // dwdot[H2]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT
  J[1272] -= dqdT; // dwdot[CO]/dT

  // reaction 3: H + HCO (+M) <=> CH2O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc_qss[2];
  k_f = 1090000 * exp(0.48 * tc[0] - 0.50321666580472 * (-260) * invT);
  dlnkfdT = 0.48 * invT + 0.50321666580472 * (-260) * invT2;
  // pressure-fall-off
  k_0 = 1.35e+24 * exp(-2.57 * tc[0] - 0.50321666580472 * (1425) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.57 * invT + 0.50321666580472 * (1425) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7824) * exp(-T / 271);
  Fcent2 = 0.7824 * exp(-T / 2755);
  Fcent3 = exp(-6570 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 271 - Fcent2 / 2755 + Fcent3 * 6570 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[11];
  Kc = refCinv * exp(g_RT[1] - g_RT[11] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[2]) + (h_RT[11]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[11] += q; // CH2O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc_qss[2];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac - k_r;
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = 3 * dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] -= dqdc[k];
    J[36 * k + 11] += dqdc[k];
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 4: CH2 + H (+M) <=> CH3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc_qss[0];
  k_f = 25000000000 * exp(-0.8 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -0.8 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 3.2e+27 * exp(-3.14 * tc[0] - 0.50321666580472 * (1230) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.14 * invT + 0.50321666580472 * (1230) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.68) * exp(-T / 78);
  Fcent2 = 0.68 * exp(-T / 1995);
  Fcent3 = exp(-5590 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 78 - Fcent2 / 1995 + Fcent3 * 5590 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[9];
  Kc = refCinv * exp(g_RT[1] - g_RT[9] + g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[0]) + (h_RT[9]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q; // H
  wdot[9] += q; // CH3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc_qss[0];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac - k_r;
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = 3 * dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] -= dqdc[k];
    J[36 * k + 9] += dqdc[k];
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT

  // reaction 5: CH2O + H (+M) <=> CH3O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 540000 * exp(0.454 * tc[0] - 0.50321666580472 * (2600) * invT);
  dlnkfdT = 0.454 * invT + 0.50321666580472 * (2600) * invT2;
  // pressure-fall-off
  k_0 = 2.2e+30 * exp(-4.8 * tc[0] - 0.50321666580472 * (5560) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.8 * invT + 0.50321666580472 * (5560) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.758) * exp(-T / 94);
  Fcent2 = 0.758 * exp(-T / 1555);
  Fcent3 = exp(-4200 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 94 - Fcent2 / 1555 + Fcent3 * 4200 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc_qss[3];
  Kc = refCinv * exp(g_RT[1] + g_RT[11] - g_RT_qss[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[11]) + (h_RT_qss[3]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[11] -= q; // CH2O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[11];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac + k_f * sc[1];
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = 3 * dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] -= dqdc[k];
    J[36 * k + 11] -= dqdc[k];
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1271] -= dqdT; // dwdot[CH2O]/dT

  // reaction 6: CH3 + H (+M) <=> CH4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[9];
  k_f = 12700000000 * exp(-0.63 * tc[0] - 0.50321666580472 * (383) * invT);
  dlnkfdT = -0.63 * invT + 0.50321666580472 * (383) * invT2;
  // pressure-fall-off
  k_0 = 2.477e+33 * exp(-4.76 * tc[0] - 0.50321666580472 * (2440) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.76 * invT + 0.50321666580472 * (2440) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.783) * exp(-T / 74);
  Fcent2 = 0.783 * exp(-T / 2941);
  Fcent3 = exp(-6964 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 74 - Fcent2 / 2941 + Fcent3 * 6964 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[10];
  Kc = refCinv * exp(g_RT[1] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[9]) + (h_RT[10]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[9];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac + k_f * sc[1];
  dqdc[10] = 2 * dcdc_fac - k_r;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = 3 * dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] -= dqdc[k];
    J[36 * k + 9] -= dqdc[k];
    J[36 * k + 10] += dqdc[k];
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT

  // reaction 7: 2 CH3 (+M) <=> C2H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = (sc[9] * sc[9]);
  k_f = 21200000000 * exp(-0.97 * tc[0] - 0.50321666580472 * (620) * invT);
  dlnkfdT = -0.97 * invT + 0.50321666580472 * (620) * invT2;
  // pressure-fall-off
  k_0 = 1.77e+50 * exp(-9.67 * tc[0] - 0.50321666580472 * (6220) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -9.67 * invT + 0.50321666580472 * (6220) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5325) * exp(-T / 151);
  Fcent2 = 0.5325 * exp(-T / 1038);
  Fcent3 = exp(-4970 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 151 - Fcent2 / 1038 + Fcent3 * 4970 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[16];
  Kc = refCinv * exp(2.000000 * g_RT[9] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[9]) + (h_RT[16]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= 2 * q; // CH3
  wdot[16] += q;    // C2H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac + k_f * 2.000000 * sc[9];
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = 3 * dcdc_fac - k_r;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 9] += -2 * dqdc[k];
    J[36 * k + 16] += dqdc[k];
  }
  J[1269] += -2 * dqdT; // dwdot[CH3]/dT
  J[1276] += dqdT;      // dwdot[C2H6]/dT

  // reaction 8: C2H3 (+M) <=> C2H2 + H (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[14] + (3 - 1) * sc[15] + (3 - 1) * sc[16];
  // forward
  phi_f = sc_qss[4];
  k_f = 38600000 * exp(1.62 * tc[0] - 0.50321666580472 * (37048.2) * invT);
  dlnkfdT = 1.62 * invT + 0.50321666580472 * (37048.2) * invT2;
  // pressure-fall-off
  k_0 = 2.565e+27 * exp(-3.4 * tc[0] - 0.50321666580472 * (35798.72) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.4 * invT + 0.50321666580472 * (35798.72) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1.9816) * exp(-T / 5383.7);
  Fcent2 = 1.9816 * exp(-T / 4.2932);
  Fcent3 = exp(0.0795 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 5383.7 - Fcent2 / 4.2932 + Fcent3 * -0.0795 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = refC * exp(-g_RT[1] - g_RT[14] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[4]) + (h_RT[1] + h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] += q;  // H
  wdot[14] += q; // C2H2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac - k_r * sc[14];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 3 * dcdc_fac - k_r * sc[1];
  dqdc[15] = 3 * dcdc_fac;
  dqdc[16] = 3 * dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] += dqdc[k];
    J[36 * k + 14] += dqdc[k];
  }
  J[1261] += dqdT; // dwdot[H]/dT
  J[1274] += dqdT; // dwdot[C2H2]/dT

  // reaction 9: C2H3 + H (+M) <=> C2H4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[14] + (3 - 1) * sc[15] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc_qss[4];
  k_f = 6080000 * exp(0.27 * tc[0] - 0.50321666580472 * (280) * invT);
  dlnkfdT = 0.27 * invT + 0.50321666580472 * (280) * invT2;
  // pressure-fall-off
  k_0 = 1.4e+30 * exp(-3.86 * tc[0] - 0.50321666580472 * (3320) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.86 * invT + 0.50321666580472 * (3320) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.782) * exp(-T / 207.5);
  Fcent2 = 0.782 * exp(-T / 2663);
  Fcent3 = exp(-6095 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 207.5 - Fcent2 / 2663 + Fcent3 * 6095 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[15];
  Kc = refCinv * exp(g_RT[1] - g_RT[15] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[4]) + (h_RT[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[15] += q; // C2H4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc_qss[4];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 3 * dcdc_fac;
  dqdc[15] = 3 * dcdc_fac - k_r;
  dqdc[16] = 3 * dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] -= dqdc[k];
    J[36 * k + 15] += dqdc[k];
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT

  // reaction 10: C2H3 + CH3 (+M) <=> C3H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[14] + (3 - 1) * sc[15] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[9] * sc_qss[4];
  k_f = 25000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 4.27e+58 * exp(-11.94 * tc[0] - 0.50321666580472 * (9769.8) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -11.94 * invT + 0.50321666580472 * (9769.8) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.175) * exp(-T / 1340.6);
  Fcent2 = 0.175 * exp(-T / 60000);
  Fcent3 = exp(-10139.8 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1340.6 - Fcent2 / 60000 + Fcent3 * 10139.8 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[19];
  Kc = refCinv * exp(g_RT[9] - g_RT[19] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT_qss[4]) + (h_RT[19]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[19] += q; // C3H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac + k_f * sc_qss[4];
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 3 * dcdc_fac;
  dqdc[15] = 3 * dcdc_fac;
  dqdc[16] = 3 * dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac - k_r;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 9] -= dqdc[k];
    J[36 * k + 19] += dqdc[k];
  }
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT

  // reaction 11: C2H4 + H (+M) <=> C2H5 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[15];
  k_f = 3975 * exp(1.28 * tc[0] - 0.50321666580472 * (1290.63) * invT);
  dlnkfdT = 1.28 * invT + 0.50321666580472 * (1290.63) * invT2;
  // pressure-fall-off
  k_0 = 4.715e+18 * exp(0 * tc[0] - 0.50321666580472 * (755.26) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = 0 * invT + 0.50321666580472 * (755.26) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.76) * exp(-T / 40);
  Fcent2 = 0.76 * exp(-T / 1025);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 40 - Fcent2 / 1025);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc_qss[5];
  Kc = refCinv * exp(g_RT[1] + g_RT[15] - g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[15]) + (h_RT_qss[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[15] -= q; // C2H4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[15];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac + k_f * sc[1];
  dqdc[16] = 3 * dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] -= dqdc[k];
    J[36 * k + 15] -= dqdc[k];
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 12: C2H5 + H (+M) <=> C2H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc_qss[5];
  k_f = 521000000000 * exp(-0.99 * tc[0] - 0.50321666580472 * (1580) * invT);
  dlnkfdT = -0.99 * invT + 0.50321666580472 * (1580) * invT2;
  // pressure-fall-off
  k_0 = 1.99e+41 * exp(-7.08 * tc[0] - 0.50321666580472 * (6685) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.08 * invT + 0.50321666580472 * (6685) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.8422) * exp(-T / 125);
  Fcent2 = 0.8422 * exp(-T / 2219);
  Fcent3 = exp(-6882 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 125 - Fcent2 / 2219 + Fcent3 * 6882 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[16];
  Kc = refCinv * exp(g_RT[1] - g_RT[16] + g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[5]) + (h_RT[16]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[16] += q; // C2H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc_qss[5];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = 3 * dcdc_fac - k_r;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] -= dqdc[k];
    J[36 * k + 16] += dqdc[k];
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1276] += dqdT; // dwdot[C2H6]/dT

  // reaction 13: C2H3 + C2H5 (+M) <=> C4H81 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc_qss[4] * sc_qss[5];
  k_f = 15000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  // Remove forward reaction
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 1.55e+56 * exp(-11.79 * tc[0] - 0.50321666580472 * (8984.5) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -11.79 * invT + 0.50321666580472 * (8984.5) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.198) * exp(-T / 2277.9);
  Fcent2 = 0.198 * exp(-T / 60000);
  Fcent3 = exp(-5723.2 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 2277.9 - Fcent2 / 60000 + Fcent3 * 5723.2 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[22];
  Kc = refCinv * exp(-g_RT[22] + g_RT_qss[4] + g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[4] + h_RT_qss[5]) + (h_RT[22]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  // Remove forward reaction
  // q_nocor = k_f*phi_f - k_r*phi_r;
  q_nocor = -k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  // Remove forward reaction
  // dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
  dqdT = Corr * (-dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[22] += q; // C4H81
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = 3 * dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac - k_r;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 22] += dqdc[k];
  }
  J[1282] += dqdT; // dwdot[C4H81]/dT

  // reaction 14: H + aC3H5 (+M) <=> C3H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[18];
  k_f = 200000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 1.33e+60 * exp(-12 * tc[0] - 0.50321666580472 * (5967.8) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -12 * invT + 0.50321666580472 * (5967.8) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.02) * exp(-T / 1096.6);
  Fcent2 = 0.02 * exp(-T / 1096.6);
  Fcent3 = exp(-6859.5 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1096.6 - Fcent2 / 1096.6 + Fcent3 * 6859.5 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[19];
  Kc = refCinv * exp(g_RT[1] + g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[18]) + (h_RT[19]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[18] -= q; // aC3H5
  wdot[19] += q; // C3H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[18];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = 3 * dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac + k_f * sc[1];
  dqdc[19] = dcdc_fac - k_r;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] -= dqdc[k];
    J[36 * k + 18] -= dqdc[k];
    J[36 * k + 19] += dqdc[k];
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1278] -= dqdT; // dwdot[aC3H5]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT

  // reaction 15: CH3 + aC3H5 (+M) <=> C4H81 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[9] * sc[18];
  k_f = 100000000 * exp(-0.32 * tc[0] - 0.50321666580472 * (-262.3) * invT);
  dlnkfdT = -0.32 * invT + 0.50321666580472 * (-262.3) * invT2;
  // pressure-fall-off
  k_0 = 3.91e+60 * exp(-12.81 * tc[0] - 0.50321666580472 * (6250) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -12.81 * invT + 0.50321666580472 * (6250) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.104) * exp(-T / 1606);
  Fcent2 = 0.104 * exp(-T / 60000);
  Fcent3 = exp(-6118.4 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1606 - Fcent2 / 60000 + Fcent3 * 6118.4 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[22];
  Kc = refCinv * exp(g_RT[9] + g_RT[18] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[18]) + (h_RT[22]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[18] -= q; // aC3H5
  wdot[22] += q; // C4H81
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac + k_f * sc[18];
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = 3 * dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac + k_f * sc[9];
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac - k_r;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 9] -= dqdc[k];
    J[36 * k + 18] -= dqdc[k];
    J[36 * k + 22] += dqdc[k];
  }
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1278] -= dqdT; // dwdot[aC3H5]/dT
  J[1282] += dqdT; // dwdot[C4H81]/dT

  // reaction 16: C3H6 + H (+M) <=> nC3H7 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 13300000 * exp(0 * tc[0] - 0.50321666580472 * (3260.7) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3260.7) * invT2;
  // pressure-fall-off
  k_0 = 6.26e+38 * exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.66 * invT + 0.50321666580472 * (7000) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1000);
  Fcent2 = 1 * exp(-T / 1310);
  Fcent3 = exp(-48097 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1000 - Fcent2 / 1310 + Fcent3 * 48097 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc_qss[6];
  Kc = refCinv * exp(g_RT[1] + g_RT[19] - g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT_qss[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[19] -= q; // C3H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[19];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = 3 * dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac + k_f * sc[1];
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] -= dqdc[k];
    J[36 * k + 19] -= dqdc[k];
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1279] -= dqdT; // dwdot[C3H6]/dT

  // reaction 17: C4H7 + H (+M) <=> C4H81 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[21];
  k_f = 36000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 3.01e+48 * exp(-9.32 * tc[0] - 0.50321666580472 * (5833.6) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -9.32 * invT + 0.50321666580472 * (5833.6) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.498) * exp(-T / 1314);
  Fcent2 = 0.498 * exp(-T / 1314);
  Fcent3 = exp(-50000 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1314 - Fcent2 / 1314 + Fcent3 * 50000 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[22];
  Kc = refCinv * exp(g_RT[1] + g_RT[21] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[21]) + (h_RT[22]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[21] -= q; // C4H7
  wdot[22] += q; // C4H81
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[21];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = 3 * dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac + k_f * sc[1];
  dqdc[22] = dcdc_fac - k_r;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] -= dqdc[k];
    J[36 * k + 21] -= dqdc[k];
    J[36 * k + 22] += dqdc[k];
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1281] -= dqdT; // dwdot[C4H7]/dT
  J[1282] += dqdT; // dwdot[C4H81]/dT

  // reaction 18: C4H81 + H (+M) <=> pC4H9 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[22];
  k_f = 13300000 * exp(0 * tc[0] - 0.50321666580472 * (3260.7) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3260.7) * invT2;
  // pressure-fall-off
  k_0 = 6.26e+38 * exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.66 * invT + 0.50321666580472 * (7000) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1000);
  Fcent2 = 1 * exp(-T / 1310);
  Fcent3 = exp(-48097 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1000 - Fcent2 / 1310 + Fcent3 * 48097 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc_qss[7];
  Kc = refCinv * exp(g_RT[1] + g_RT[22] - g_RT_qss[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[22]) + (h_RT_qss[7]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[22] -= q; // C4H81
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[22];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = 3 * dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac + k_f * sc[1];
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] -= dqdc[k];
    J[36 * k + 22] -= dqdc[k];
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 19: C5H10 + H (+M) <=> PXC5H11 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[24];
  k_f = 13300000 * exp(0 * tc[0] - 0.50321666580472 * (3260.7) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3260.7) * invT2;
  // pressure-fall-off
  k_0 = 6.26e+38 * exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.66 * invT + 0.50321666580472 * (7000) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1000);
  Fcent2 = 1 * exp(-T / 1310);
  Fcent3 = exp(-48097 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1000 - Fcent2 / 1310 + Fcent3 * 48097 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc_qss[8];
  Kc = refCinv * exp(g_RT[1] + g_RT[24] - g_RT_qss[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[24]) + (h_RT_qss[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[24] -= q; // C5H10
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[24];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = 3 * dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac + k_f * sc[1];
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] -= dqdc[k];
    J[36 * k + 24] -= dqdc[k];
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1284] -= dqdT; // dwdot[C5H10]/dT

  // reaction 20: C6H12 + H (+M) <=> PXC6H13 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[25];
  k_f = 13300000 * exp(0 * tc[0] - 0.50321666580472 * (3260.7) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3260.7) * invT2;
  // pressure-fall-off
  k_0 = 6.26e+38 * exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.66 * invT + 0.50321666580472 * (7000) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1000);
  Fcent2 = 1 * exp(-T / 1310);
  Fcent3 = exp(-48097 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1000 - Fcent2 / 1310 + Fcent3 * 48097 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc_qss[9];
  Kc = refCinv * exp(g_RT[1] + g_RT[25] - g_RT_qss[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[25]) + (h_RT_qss[9]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[25] -= q; // C6H12
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[25];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = 3 * dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac + k_f * sc[1];
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] -= dqdc[k];
    J[36 * k + 25] -= dqdc[k];
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1285] -= dqdT; // dwdot[C6H12]/dT

  // reaction 21: C7H14 + H (+M) <=> PXC7H15 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[26];
  k_f = 13300000 * exp(0 * tc[0] - 0.50321666580472 * (3260.7) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3260.7) * invT2;
  // pressure-fall-off
  k_0 = 6.26e+38 * exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.66 * invT + 0.50321666580472 * (7000) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1000);
  Fcent2 = 1 * exp(-T / 1310);
  Fcent3 = exp(-48097 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1000 - Fcent2 / 1310 + Fcent3 * 48097 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc_qss[10];
  Kc = refCinv * exp(g_RT[1] + g_RT[26] - g_RT_qss[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[26]) + (h_RT_qss[10]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[26] -= q; // C7H14
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[26];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = 3 * dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac + k_f * sc[1];
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] -= dqdc[k];
    J[36 * k + 26] -= dqdc[k];
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1286] -= dqdT; // dwdot[C7H14]/dT

  // reaction 22: C8H16 + H (+M) <=> PXC8H17 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[27];
  k_f = 13300000 * exp(0 * tc[0] - 0.50321666580472 * (3260.7) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3260.7) * invT2;
  // pressure-fall-off
  k_0 = 6.26e+38 * exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.66 * invT + 0.50321666580472 * (7000) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1000);
  Fcent2 = 1 * exp(-T / 1310);
  Fcent3 = exp(-48097 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1000 - Fcent2 / 1310 + Fcent3 * 48097 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc_qss[11];
  Kc = refCinv * exp(g_RT[1] + g_RT[27] - g_RT_qss[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[27]) + (h_RT_qss[11]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[27] -= q; // C8H16
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[27];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = 3 * dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac + k_f * sc[1];
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] -= dqdc[k];
    J[36 * k + 27] -= dqdc[k];
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1287] -= dqdT; // dwdot[C8H16]/dT

  // reaction 23: C9H18 + H (+M) <=> PXC9H19 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[28];
  k_f = 13300000 * exp(0 * tc[0] - 0.50321666580472 * (3260.7) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3260.7) * invT2;
  // pressure-fall-off
  k_0 = 6.26e+38 * exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.66 * invT + 0.50321666580472 * (7000) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1000);
  Fcent2 = 1 * exp(-T / 1310);
  Fcent3 = exp(-48097 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1000 - Fcent2 / 1310 + Fcent3 * 48097 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[29];
  Kc = refCinv * exp(g_RT[1] + g_RT[28] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[28]) + (h_RT[29]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[28] -= q; // C9H18
  wdot[29] += q; // PXC9H19
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[28];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = 3 * dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac + k_f * sc[1];
  dqdc[29] = dcdc_fac - k_r;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] -= dqdc[k];
    J[36 * k + 28] -= dqdc[k];
    J[36 * k + 29] += dqdc[k];
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1288] -= dqdT; // dwdot[C9H18]/dT
  J[1289] += dqdT; // dwdot[PXC9H19]/dT

  // reaction 24: C10H20 + H (+M) <=> PXC10H21 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[30];
  k_f = 13300000 * exp(0 * tc[0] - 0.50321666580472 * (3260.7) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3260.7) * invT2;
  // pressure-fall-off
  k_0 = 6.26e+38 * exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.66 * invT + 0.50321666580472 * (7000) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1000);
  Fcent2 = 1 * exp(-T / 1310);
  Fcent3 = exp(-48097 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1000 - Fcent2 / 1310 + Fcent3 * 48097 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc_qss[12];
  Kc = refCinv * exp(g_RT[1] + g_RT[30] - g_RT_qss[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[30]) + (h_RT_qss[12]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[30] -= q; // C10H20
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[30];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 6 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = 2 * dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.5 * dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = 3 * dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac + k_f * sc[1];
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] -= dqdc[k];
    J[36 * k + 30] -= dqdc[k];
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1290] -= dqdT; // dwdot[C10H20]/dT

  // reaction 25: CO + O (+M) <=> CO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (12 - 1) * sc[6] + (1.75 - 1) * sc[12] +
          (3.6 - 1) * sc[13];
  // forward
  phi_f = sc[2] * sc[12];
  k_f = 13620 * exp(0 * tc[0] - 0.50321666580472 * (2384) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (2384) * invT2;
  // pressure-fall-off
  k_0 = 1.173e+24 * exp(-2.79 * tc[0] - 0.50321666580472 * (4191) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.79 * invT + 0.50321666580472 * (4191) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  dlogFdlogPr = 0.0;
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[13];
  Kc = refCinv * exp(g_RT[2] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[12]) + (h_RT[13]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] -= q;  // O
  wdot[12] -= q; // CO
  wdot[13] += q; // CO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac + k_f * sc[12];
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 2 * dcdc_fac;
  dqdc[6] = 12 * dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = 1.75 * dcdc_fac + k_f * sc[2];
  dqdc[13] = 3.6 * dcdc_fac - k_r;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 2] -= dqdc[k];
    J[36 * k + 12] -= dqdc[k];
    J[36 * k + 13] += dqdc[k];
  }
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1272] -= dqdT; // dwdot[CO]/dT
  J[1273] += dqdT; // dwdot[CO2]/dT

  // reaction 26: 2 H + M <=> H2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0 - 1) * sc[5] + (0 - 1) * sc[6] + (0 - 1) * sc[13];
  // forward
  phi_f = (sc[1] * sc[1]);
  k_f = 1780000 * exp(-1 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -1 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[5];
  Kc = refCinv * exp(2.000000 * g_RT[1] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[1]) + (h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= 2 * q; // H
  wdot[5] += q;     // H2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor + k_f * 2.000000 * sc[1];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = -k_r;
  dqdc[6] = 0.0;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 0.0;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] += -2 * dqdc[k];
    J[36 * k + 5] += dqdc[k];
  }
  J[1261] += -2 * dqdT; // dwdot[H]/dT
  J[1265] += dqdT;      // dwdot[H2]/dT

  // reaction 27: H + OH + M <=> H2O + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6.3 - 1) * sc[6] + (1.75 - 1) * sc[12] +
          (3.6 - 1) * sc[13];
  // forward
  phi_f = sc[1] * sc[3];
  k_f = 44000000000 * exp(-2 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -2 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[6];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[3]) + (h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // OH
  wdot[6] += q; // H2O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor + k_f * sc[3];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor + k_f * sc[1];
  dqdc[4] = q_nocor;
  dqdc[5] = 2 * q_nocor;
  dqdc[6] = 6.3 * q_nocor - k_r;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = 1.75 * q_nocor;
  dqdc[13] = 3.6 * q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] -= dqdc[k];
    J[36 * k + 3] -= dqdc[k];
    J[36 * k + 6] += dqdc[k];
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT

  // reaction 28: 2 O + M <=> O2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.4 - 1) * sc[5] + (15.4 - 1) * sc[6] +
          (1.75 - 1) * sc[12] + (3.6 - 1) * sc[13];
  // forward
  phi_f = (sc[2] * sc[2]);
  k_f = 120000 * exp(-1 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -1 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[8];
  Kc = refCinv * exp(2.000000 * g_RT[2] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[2]) + (h_RT[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= 2 * q; // O
  wdot[8] += q;     // O2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor + k_f * 2.000000 * sc[2];
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 2.4 * q_nocor;
  dqdc[6] = 15.4 * q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor - k_r;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = 1.75 * q_nocor;
  dqdc[13] = 3.6 * q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 2] += -2 * dqdc[k];
    J[36 * k + 8] += dqdc[k];
  }
  J[1262] += -2 * dqdT; // dwdot[O]/dT
  J[1268] += dqdT;      // dwdot[O2]/dT

  // reaction 29: 2 H + H2 <=> H2 + H2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[5];
  k_f = 90000 * exp(-0.6 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -0.6 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = (sc[5] * sc[5]);
  Kc = refCinv * exp(2.000000 * g_RT[1] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[5]) + (2.000000 * h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= 2 * q; // H
  wdot[5] += q;     // H2
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[5];
  J[37] += -2 * dqdci; // dwdot[H]/d[H]
  J[41] += dqdci;      // dwdot[H2]/d[H]
  // d()/d[H2]
  dqdci = +k_f * pow(sc[1], 2.000000) - k_r * 2.000000 * sc[5];
  J[181] += -2 * dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci;      // dwdot[H2]/d[H2]
  // d()/dT
  J[1261] += -2 * dqdT; // dwdot[H]/dT
  J[1265] += dqdT;      // dwdot[H2]/dT

  // reaction 30: 2 H + H2O <=> H2 + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[6];
  k_f = 56240000 * exp(-1.25 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -1.25 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = refCinv * exp(2.000000 * g_RT[1] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[6]) + (h_RT[5] + h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= 2 * q; // H
  wdot[5] += q;     // H2
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[6];
  J[37] += -2 * dqdci; // dwdot[H]/d[H]
  J[41] += dqdci;      // dwdot[H2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[6];
  J[181] += -2 * dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci;      // dwdot[H2]/d[H2]
  // d()/d[H2O]
  dqdci = +k_f * pow(sc[1], 2.000000) - k_r * sc[5];
  J[217] += -2 * dqdci; // dwdot[H]/d[H2O]
  J[221] += dqdci;      // dwdot[H2]/d[H2O]
  // d()/dT
  J[1261] += -2 * dqdT; // dwdot[H]/dT
  J[1265] += dqdT;      // dwdot[H2]/dT

  // reaction 31: 2 H + CO2 <=> H2 + CO2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[13];
  k_f = 550000000 * exp(-2 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -2 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[5] * sc[13];
  Kc = refCinv * exp(2.000000 * g_RT[1] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[13]) + (h_RT[5] + h_RT[13]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= 2 * q; // H
  wdot[5] += q;     // H2
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[13];
  J[37] += -2 * dqdci; // dwdot[H]/d[H]
  J[41] += dqdci;      // dwdot[H2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[13];
  J[181] += -2 * dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci;      // dwdot[H2]/d[H2]
  // d()/d[CO2]
  dqdci = +k_f * pow(sc[1], 2.000000) - k_r * sc[5];
  J[469] += -2 * dqdci; // dwdot[H]/d[CO2]
  J[473] += dqdci;      // dwdot[H2]/d[CO2]
  // d()/dT
  J[1261] += -2 * dqdT; // dwdot[H]/dT
  J[1265] += dqdT;      // dwdot[H2]/dT

  // reaction 32: H + O + M <=> OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (12 - 1) * sc[6] + (1.75 - 1) * sc[12] +
          (3.6 - 1) * sc[13];
  // forward
  phi_f = sc[1] * sc[2];
  k_f = 9428000 * exp(-1 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -1 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3];
  Kc = refCinv * exp(g_RT[1] + g_RT[2] - g_RT[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[2]) + (h_RT[3]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] -= q; // O
  wdot[3] += q; // OH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor + k_f * sc[2];
  dqdc[2] = q_nocor + k_f * sc[1];
  dqdc[3] = q_nocor - k_r;
  dqdc[4] = q_nocor;
  dqdc[5] = 2 * q_nocor;
  dqdc[6] = 12 * q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = 1.75 * q_nocor;
  dqdc[13] = 3.6 * q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] -= dqdc[k];
    J[36 * k + 2] -= dqdc[k];
    J[36 * k + 3] += dqdc[k];
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT

  // reaction 33: HCO + M <=> CO + H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (0 - 1) * sc[6] + (1.75 - 1) * sc[12] +
          (3.6 - 1) * sc[13];
  // forward
  phi_f = sc_qss[2];
  k_f = 187000000000 * exp(-1 * tc[0] - 0.50321666580472 * (17000) * invT);
  dlnkfdT = -1 * invT + 0.50321666580472 * (17000) * invT2;
  // reverse
  phi_r = sc[1] * sc[12];
  Kc = refC * exp(-g_RT[1] - g_RT[12] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[2]) + (h_RT[1] + h_RT[12]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[12] += q; // CO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor - k_r * sc[12];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 2 * q_nocor;
  dqdc[6] = 0.0;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = 1.75 * q_nocor - k_r * sc[1];
  dqdc[13] = 3.6 * q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  for (int k = 0; k < 35; k++) {
    J[36 * k + 1] += dqdc[k];
    J[36 * k + 12] += dqdc[k];
  }
  J[1261] += dqdT; // dwdot[H]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 34: HCO + H2O <=> CO + H + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc_qss[2];
  k_f = 2244000000000 * exp(-1 * tc[0] - 0.50321666580472 * (17000) * invT);
  dlnkfdT = -1 * invT + 0.50321666580472 * (17000) * invT2;
  // reverse
  phi_r = sc[1] * sc[6] * sc[12];
  Kc = refC * exp(-g_RT[1] - g_RT[12] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT_qss[2]) + (h_RT[1] + h_RT[6] + h_RT[12]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[12] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[6] * sc[12];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[48] += dqdci; // dwdot[CO]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * sc_qss[2] - k_r * sc[1] * sc[12];
  J[217] += dqdci; // dwdot[H]/d[H2O]
  J[228] += dqdci; // dwdot[CO]/d[H2O]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * sc[6];
  J[433] += dqdci; // dwdot[H]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 35: H + O2 <=> O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[8];
  k_f = 97560000 * exp(0 * tc[0] - 0.50321666580472 * (14842.26) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (14842.26) * invT2;
  // reverse
  phi_r = sc[2] * sc[3];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[3] + g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[8]) + (h_RT[2] + h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] += q; // O
  wdot[3] += q; // OH
  wdot[8] -= q; // O2
  // d()/d[H]
  dqdci = +k_f * sc[8];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[38] += dqdci; // dwdot[O]/d[H]
  J[39] += dqdci; // dwdot[OH]/d[H]
  J[44] -= dqdci; // dwdot[O2]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[3];
  J[73] -= dqdci; // dwdot[H]/d[O]
  J[74] += dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[80] -= dqdci; // dwdot[O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[2];
  J[109] -= dqdci; // dwdot[H]/d[OH]
  J[110] += dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[116] -= dqdci; // dwdot[O2]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[1];
  J[289] -= dqdci; // dwdot[H]/d[O2]
  J[290] += dqdci; // dwdot[O]/d[O2]
  J[291] += dqdci; // dwdot[OH]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1262] += dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT

  // reaction 36: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[5];
  k_f = 0.04589 * exp(2.7 * tc[0] - 0.50321666580472 * (6260) * invT);
  dlnkfdT = 2.7 * invT + 0.50321666580472 * (6260) * invT2;
  // reverse
  phi_r = sc[1] * sc[3];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[3] + g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[5]) + (h_RT[1] + h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[2] -= q; // O
  wdot[3] += q; // OH
  wdot[5] -= q; // H2
  // d()/d[H]
  dqdci = -k_r * sc[3];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[38] -= dqdci; // dwdot[O]/d[H]
  J[39] += dqdci; // dwdot[OH]/d[H]
  J[41] -= dqdci; // dwdot[H2]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[5];
  J[73] += dqdci; // dwdot[H]/d[O]
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[77] -= dqdci; // dwdot[H2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[1];
  J[109] += dqdci; // dwdot[H]/d[OH]
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[113] -= dqdci; // dwdot[H2]/d[OH]
  // d()/d[H2]
  dqdci = +k_f * sc[2];
  J[181] += dqdci; // dwdot[H]/d[H2]
  J[182] -= dqdci; // dwdot[O]/d[H2]
  J[183] += dqdci; // dwdot[OH]/d[H2]
  J[185] -= dqdci; // dwdot[H2]/d[H2]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1265] -= dqdT; // dwdot[H2]/dT

  // reaction 37: H2 + OH <=> H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[5];
  k_f = 102.4 * exp(1.6 * tc[0] - 0.50321666580472 * (3298.28) * invT);
  dlnkfdT = 1.6 * invT + 0.50321666580472 * (3298.28) * invT2;
  // reverse
  phi_r = sc[1] * sc[6];
  Kc = exp(-g_RT[1] + g_RT[3] + g_RT[5] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[5]) + (h_RT[1] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[3] -= q; // OH
  wdot[5] -= q; // H2
  wdot[6] += q; // H2O
  // d()/d[H]
  dqdci = -k_r * sc[6];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[39] -= dqdci; // dwdot[OH]/d[H]
  J[41] -= dqdci; // dwdot[H2]/d[H]
  J[42] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[5];
  J[109] += dqdci; // dwdot[H]/d[OH]
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[113] -= dqdci; // dwdot[H2]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2]
  dqdci = +k_f * sc[3];
  J[181] += dqdci; // dwdot[H]/d[H2]
  J[183] -= dqdci; // dwdot[OH]/d[H2]
  J[185] -= dqdci; // dwdot[H2]/d[H2]
  J[186] += dqdci; // dwdot[H2O]/d[H2]
  // d()/d[H2O]
  dqdci = -k_r * sc[1];
  J[217] += dqdci; // dwdot[H]/d[H2O]
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[221] -= dqdci; // dwdot[H2]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1265] -= dqdT; // dwdot[H2]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT

  // reaction 38: 2 OH <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[3] * sc[3]);
  k_f = 0.03973 * exp(2.4 * tc[0] - 0.50321666580472 * (-2110) * invT);
  dlnkfdT = 2.4 * invT + 0.50321666580472 * (-2110) * invT2;
  // reverse
  phi_r = sc[2] * sc[6];
  Kc = exp(-g_RT[2] + 2.000000 * g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[3]) + (h_RT[2] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;     // O
  wdot[3] -= 2 * q; // OH
  wdot[6] += q;     // H2O
  // d()/d[O]
  dqdci = -k_r * sc[6];
  J[74] += dqdci;      // dwdot[O]/d[O]
  J[75] += -2 * dqdci; // dwdot[OH]/d[O]
  J[78] += dqdci;      // dwdot[H2O]/d[O]
  // d()/d[OH]
  dqdci = +k_f * 2.000000 * sc[3];
  J[110] += dqdci;      // dwdot[O]/d[OH]
  J[111] += -2 * dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci;      // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[2];
  J[218] += dqdci;      // dwdot[O]/d[H2O]
  J[219] += -2 * dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci;      // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1262] += dqdT;      // dwdot[O]/dT
  J[1263] += -2 * dqdT; // dwdot[OH]/dT
  J[1266] += dqdT;      // dwdot[H2O]/dT

  // reaction 39: H + HO2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[4];
  k_f = 74850000 * exp(0 * tc[0] - 0.50321666580472 * (295) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (295) * invT2;
  // reverse
  phi_r = (sc[3] * sc[3]);
  Kc = exp(g_RT[1] - 2.000000 * g_RT[3] + g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[4]) + (2.000000 * h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;     // H
  wdot[3] += 2 * q; // OH
  wdot[4] -= q;     // HO2
  // d()/d[H]
  dqdci = +k_f * sc[4];
  J[37] -= dqdci;     // dwdot[H]/d[H]
  J[39] += 2 * dqdci; // dwdot[OH]/d[H]
  J[40] -= dqdci;     // dwdot[HO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[3];
  J[109] -= dqdci;     // dwdot[H]/d[OH]
  J[111] += 2 * dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci;     // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[145] -= dqdci;     // dwdot[H]/d[HO2]
  J[147] += 2 * dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci;     // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1261] -= dqdT;     // dwdot[H]/dT
  J[1263] += 2 * dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT;     // dwdot[HO2]/dT

  // reaction 40: H2 + O2 <=> H + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[8];
  k_f = 0.5916 * exp(2.433 * tc[0] - 0.50321666580472 * (53502) * invT);
  dlnkfdT = 2.433 * invT + 0.50321666580472 * (53502) * invT2;
  // reverse
  phi_r = sc[1] * sc[4];
  Kc = exp(-g_RT[1] - g_RT[4] + g_RT[5] + g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[8]) + (h_RT[1] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[4] += q; // HO2
  wdot[5] -= q; // H2
  wdot[8] -= q; // O2
  // d()/d[H]
  dqdci = -k_r * sc[4];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[40] += dqdci; // dwdot[HO2]/d[H]
  J[41] -= dqdci; // dwdot[H2]/d[H]
  J[44] -= dqdci; // dwdot[O2]/d[H]
  // d()/d[HO2]
  dqdci = -k_r * sc[1];
  J[145] += dqdci; // dwdot[H]/d[HO2]
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[149] -= dqdci; // dwdot[H2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  // d()/d[H2]
  dqdci = +k_f * sc[8];
  J[181] += dqdci; // dwdot[H]/d[H2]
  J[184] += dqdci; // dwdot[HO2]/d[H2]
  J[185] -= dqdci; // dwdot[H2]/d[H2]
  J[188] -= dqdci; // dwdot[O2]/d[H2]
  // d()/d[O2]
  dqdci = +k_f * sc[5];
  J[289] += dqdci; // dwdot[H]/d[O2]
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[293] -= dqdci; // dwdot[H2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1265] -= dqdT; // dwdot[H2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT

  // reaction 41: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[4];
  k_f = 28910000 * exp(0 * tc[0] - 0.50321666580472 * (-501.91) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (-501.91) * invT2;
  // reverse
  phi_r = sc[6] * sc[8];
  Kc = exp(g_RT[3] + g_RT[4] - g_RT[6] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[4]) + (h_RT[6] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q; // OH
  wdot[4] -= q; // HO2
  wdot[6] += q; // H2O
  wdot[8] += q; // O2
  // d()/d[OH]
  dqdci = +k_f * sc[4];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[116] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[3];
  J[147] -= dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[150] += dqdci; // dwdot[H2O]/d[HO2]
  J[152] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[8];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[220] -= dqdci; // dwdot[HO2]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[224] += dqdci; // dwdot[O2]/d[H2O]
  // d()/d[O2]
  dqdci = -k_r * sc[6];
  J[291] -= dqdci; // dwdot[OH]/d[O2]
  J[292] -= dqdci; // dwdot[HO2]/d[O2]
  J[294] += dqdci; // dwdot[H2O]/d[O2]
  J[296] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1268] += dqdT; // dwdot[O2]/dT

  // reaction 42: H + HO2 <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[4];
  k_f = 3970000 * exp(0 * tc[0] - 0.50321666580472 * (671) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (671) * invT2;
  // reverse
  phi_r = sc[2] * sc[6];
  Kc = exp(g_RT[1] - g_RT[2] + g_RT[4] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[4]) + (h_RT[2] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] += q; // O
  wdot[4] -= q; // HO2
  wdot[6] += q; // H2O
  // d()/d[H]
  dqdci = +k_f * sc[4];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[38] += dqdci; // dwdot[O]/d[H]
  J[40] -= dqdci; // dwdot[HO2]/d[H]
  J[42] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[6];
  J[73] -= dqdci; // dwdot[H]/d[O]
  J[74] += dqdci; // dwdot[O]/d[O]
  J[76] -= dqdci; // dwdot[HO2]/d[O]
  J[78] += dqdci; // dwdot[H2O]/d[O]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[145] -= dqdci; // dwdot[H]/d[HO2]
  J[146] += dqdci; // dwdot[O]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[150] += dqdci; // dwdot[H2O]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[2];
  J[217] -= dqdci; // dwdot[H]/d[H2O]
  J[218] += dqdci; // dwdot[O]/d[H2O]
  J[220] -= dqdci; // dwdot[HO2]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1262] += dqdT; // dwdot[O]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT

  // reaction 43: HO2 + O <=> O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[4];
  k_f = 40000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[8];
  Kc = exp(g_RT[2] - g_RT[3] + g_RT[4] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[4]) + (h_RT[3] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // O
  wdot[3] += q; // OH
  wdot[4] -= q; // HO2
  wdot[8] += q; // O2
  // d()/d[O]
  dqdci = +k_f * sc[4];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[76] -= dqdci; // dwdot[HO2]/d[O]
  J[80] += dqdci; // dwdot[O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[8];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[116] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[2];
  J[146] -= dqdci; // dwdot[O]/d[HO2]
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[152] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[3];
  J[290] -= dqdci; // dwdot[O]/d[O2]
  J[291] += dqdci; // dwdot[OH]/d[O2]
  J[292] -= dqdci; // dwdot[HO2]/d[O2]
  J[296] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1268] += dqdT; // dwdot[O2]/dT

  // reaction 44: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 130000 * exp(0 * tc[0] - 0.50321666580472 * (-1630) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (-1630) * invT2;
  // reverse
  phi_r = sc[7] * sc[8];
  Kc = exp(2.000000 * g_RT[4] - g_RT[7] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[7] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= 2 * q; // HO2
  wdot[7] += q;     // H2O2
  wdot[8] += q;     // O2
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[4];
  J[148] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[151] += dqdci;      // dwdot[H2O2]/d[HO2]
  J[152] += dqdci;      // dwdot[O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[8];
  J[256] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[259] += dqdci;      // dwdot[H2O2]/d[H2O2]
  J[260] += dqdci;      // dwdot[O2]/d[H2O2]
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[292] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[295] += dqdci;      // dwdot[H2O2]/d[O2]
  J[296] += dqdci;      // dwdot[O2]/d[O2]
  // d()/dT
  J[1264] += -2 * dqdT; // dwdot[HO2]/dT
  J[1267] += dqdT;      // dwdot[H2O2]/dT
  J[1268] += dqdT;      // dwdot[O2]/dT

  // reaction 45: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 365800000 * exp(0 * tc[0] - 0.50321666580472 * (12000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (12000) * invT2;
  // reverse
  phi_r = sc[7] * sc[8];
  Kc = exp(2.000000 * g_RT[4] - g_RT[7] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[7] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= 2 * q; // HO2
  wdot[7] += q;     // H2O2
  wdot[8] += q;     // O2
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[4];
  J[148] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[151] += dqdci;      // dwdot[H2O2]/d[HO2]
  J[152] += dqdci;      // dwdot[O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[8];
  J[256] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[259] += dqdci;      // dwdot[H2O2]/d[H2O2]
  J[260] += dqdci;      // dwdot[O2]/d[H2O2]
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[292] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[295] += dqdci;      // dwdot[H2O2]/d[O2]
  J[296] += dqdci;      // dwdot[O2]/d[O2]
  // d()/dT
  J[1264] += -2 * dqdT; // dwdot[HO2]/dT
  J[1267] += dqdT;      // dwdot[H2O2]/dT
  J[1268] += dqdT;      // dwdot[O2]/dT

  // reaction 46: H + H2O2 <=> H2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[7];
  k_f = 24100000 * exp(0 * tc[0] - 0.50321666580472 * (3970) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3970) * invT2;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = exp(g_RT[1] - g_RT[3] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[3] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] += q; // OH
  wdot[6] += q; // H2O
  wdot[7] -= q; // H2O2
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[39] += dqdci; // dwdot[OH]/d[H]
  J[42] += dqdci; // dwdot[H2O]/d[H]
  J[43] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[6];
  J[109] -= dqdci; // dwdot[H]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[115] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[217] -= dqdci; // dwdot[H]/d[H2O]
  J[219] += dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[223] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[1];
  J[253] -= dqdci; // dwdot[H]/d[H2O2]
  J[255] += dqdci; // dwdot[OH]/d[H2O2]
  J[258] += dqdci; // dwdot[H2O]/d[H2O2]
  J[259] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1267] -= dqdT; // dwdot[H2O2]/dT

  // reaction 47: H + H2O2 <=> H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[7];
  k_f = 6.05 * exp(2 * tc[0] - 0.50321666580472 * (5200) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (5200) * invT2;
  // reverse
  phi_r = sc[4] * sc[5];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[5] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[4] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[4] += q; // HO2
  wdot[5] += q; // H2
  wdot[7] -= q; // H2O2
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[40] += dqdci; // dwdot[HO2]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[43] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[145] -= dqdci; // dwdot[H]/d[HO2]
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[149] += dqdci; // dwdot[H2]/d[HO2]
  J[151] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2]
  dqdci = -k_r * sc[4];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[184] += dqdci; // dwdot[HO2]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[187] -= dqdci; // dwdot[H2O2]/d[H2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[1];
  J[253] -= dqdci; // dwdot[H]/d[H2O2]
  J[256] += dqdci; // dwdot[HO2]/d[H2O2]
  J[257] += dqdci; // dwdot[H2]/d[H2O2]
  J[259] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1267] -= dqdT; // dwdot[H2O2]/dT

  // reaction 48: H2O2 + O <=> HO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[7];
  k_f = 9.63 * exp(2 * tc[0] - 0.50321666580472 * (3970) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (3970) * invT2;
  // reverse
  phi_r = sc[3] * sc[4];
  Kc = exp(g_RT[2] - g_RT[3] - g_RT[4] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[7]) + (h_RT[3] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // O
  wdot[3] += q; // OH
  wdot[4] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[O]
  dqdci = +k_f * sc[7];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[76] += dqdci; // dwdot[HO2]/d[O]
  J[79] -= dqdci; // dwdot[H2O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[4];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] += dqdci; // dwdot[HO2]/d[OH]
  J[115] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[3];
  J[146] -= dqdci; // dwdot[O]/d[HO2]
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[151] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[2];
  J[254] -= dqdci; // dwdot[O]/d[H2O2]
  J[255] += dqdci; // dwdot[OH]/d[H2O2]
  J[256] += dqdci; // dwdot[HO2]/d[H2O2]
  J[259] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1267] -= dqdT; // dwdot[H2O2]/dT

  // reaction 49: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[7];
  k_f = 2000000 * exp(0 * tc[0] - 0.50321666580472 * (427) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (427) * invT2;
  // reverse
  phi_r = sc[4] * sc[6];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[7]) + (h_RT[4] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q; // OH
  wdot[4] += q; // HO2
  wdot[6] += q; // H2O
  wdot[7] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[112] += dqdci; // dwdot[HO2]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[115] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[6];
  J[147] -= dqdci; // dwdot[OH]/d[HO2]
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[150] += dqdci; // dwdot[H2O]/d[HO2]
  J[151] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[4];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[220] += dqdci; // dwdot[HO2]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[223] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[3];
  J[255] -= dqdci; // dwdot[OH]/d[H2O2]
  J[256] += dqdci; // dwdot[HO2]/d[H2O2]
  J[258] += dqdci; // dwdot[H2O]/d[H2O2]
  J[259] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1267] -= dqdT; // dwdot[H2O2]/dT

  // reaction 50: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[7];
  k_f = 2.67e+35 * exp(-7 * tc[0] - 0.50321666580472 * (37600) * invT);
  dlnkfdT = -7 * invT + 0.50321666580472 * (37600) * invT2;
  // reverse
  phi_r = sc[4] * sc[6];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[7]) + (h_RT[4] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q; // OH
  wdot[4] += q; // HO2
  wdot[6] += q; // H2O
  wdot[7] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[112] += dqdci; // dwdot[HO2]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[115] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[6];
  J[147] -= dqdci; // dwdot[OH]/d[HO2]
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[150] += dqdci; // dwdot[H2O]/d[HO2]
  J[151] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[4];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[220] += dqdci; // dwdot[HO2]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[223] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[3];
  J[255] -= dqdci; // dwdot[OH]/d[H2O2]
  J[256] += dqdci; // dwdot[HO2]/d[H2O2]
  J[258] += dqdci; // dwdot[H2O]/d[H2O2]
  J[259] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1267] -= dqdT; // dwdot[H2O2]/dT

  // reaction 51: CO + OH <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[12];
  k_f = 0.07046 * exp(2.053 * tc[0] - 0.50321666580472 * (-355.67) * invT);
  dlnkfdT = 2.053 * invT + 0.50321666580472 * (-355.67) * invT2;
  // reverse
  phi_r = sc[1] * sc[13];
  Kc = exp(-g_RT[1] + g_RT[3] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[12]) + (h_RT[1] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // OH
  wdot[12] -= q; // CO
  wdot[13] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[13];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[39] -= dqdci; // dwdot[OH]/d[H]
  J[48] -= dqdci; // dwdot[CO]/d[H]
  J[49] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[109] += dqdci; // dwdot[H]/d[OH]
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[120] -= dqdci; // dwdot[CO]/d[OH]
  J[121] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[CO]
  dqdci = +k_f * sc[3];
  J[433] += dqdci; // dwdot[H]/d[CO]
  J[435] -= dqdci; // dwdot[OH]/d[CO]
  J[444] -= dqdci; // dwdot[CO]/d[CO]
  J[445] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[1];
  J[469] += dqdci; // dwdot[H]/d[CO2]
  J[471] -= dqdci; // dwdot[OH]/d[CO2]
  J[480] -= dqdci; // dwdot[CO]/d[CO2]
  J[481] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1272] -= dqdT; // dwdot[CO]/dT
  J[1273] += dqdT; // dwdot[CO2]/dT

  // reaction 52: CO + OH <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[12];
  k_f = 5757000 * exp(-0.664 * tc[0] - 0.50321666580472 * (331.83) * invT);
  dlnkfdT = -0.664 * invT + 0.50321666580472 * (331.83) * invT2;
  // reverse
  phi_r = sc[1] * sc[13];
  Kc = exp(-g_RT[1] + g_RT[3] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[12]) + (h_RT[1] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // OH
  wdot[12] -= q; // CO
  wdot[13] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[13];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[39] -= dqdci; // dwdot[OH]/d[H]
  J[48] -= dqdci; // dwdot[CO]/d[H]
  J[49] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[109] += dqdci; // dwdot[H]/d[OH]
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[120] -= dqdci; // dwdot[CO]/d[OH]
  J[121] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[CO]
  dqdci = +k_f * sc[3];
  J[433] += dqdci; // dwdot[H]/d[CO]
  J[435] -= dqdci; // dwdot[OH]/d[CO]
  J[444] -= dqdci; // dwdot[CO]/d[CO]
  J[445] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[1];
  J[469] += dqdci; // dwdot[H]/d[CO2]
  J[471] -= dqdci; // dwdot[OH]/d[CO2]
  J[480] -= dqdci; // dwdot[CO]/d[CO2]
  J[481] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1272] -= dqdT; // dwdot[CO]/dT
  J[1273] += dqdT; // dwdot[CO2]/dT

  // reaction 53: CO + HO2 <=> CO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 0.157 * exp(2.18 * tc[0] - 0.50321666580472 * (17942.61) * invT);
  dlnkfdT = 2.18 * invT + 0.50321666580472 * (17942.61) * invT2;
  // reverse
  phi_r = sc[3] * sc[13];
  Kc = exp(-g_RT[3] + g_RT[4] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[3] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[4] -= q;  // HO2
  wdot[12] -= q; // CO
  wdot[13] += q; // CO2
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[120] -= dqdci; // dwdot[CO]/d[OH]
  J[121] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[156] -= dqdci; // dwdot[CO]/d[HO2]
  J[157] += dqdci; // dwdot[CO2]/d[HO2]
  // d()/d[CO]
  dqdci = +k_f * sc[4];
  J[435] += dqdci; // dwdot[OH]/d[CO]
  J[436] -= dqdci; // dwdot[HO2]/d[CO]
  J[444] -= dqdci; // dwdot[CO]/d[CO]
  J[445] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[3];
  J[471] += dqdci; // dwdot[OH]/d[CO2]
  J[472] -= dqdci; // dwdot[HO2]/d[CO2]
  J[480] -= dqdci; // dwdot[CO]/d[CO2]
  J[481] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1272] -= dqdT; // dwdot[CO]/dT
  J[1273] += dqdT; // dwdot[CO2]/dT

  // reaction 54: CO + O2 <=> CO2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[12];
  k_f = 1119000 * exp(0 * tc[0] - 0.50321666580472 * (47700) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (47700) * invT2;
  // reverse
  phi_r = sc[2] * sc[13];
  Kc = exp(-g_RT[2] + g_RT[8] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[12]) + (h_RT[2] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[8] -= q;  // O2
  wdot[12] -= q; // CO
  wdot[13] += q; // CO2
  // d()/d[O]
  dqdci = -k_r * sc[13];
  J[74] += dqdci; // dwdot[O]/d[O]
  J[80] -= dqdci; // dwdot[O2]/d[O]
  J[84] -= dqdci; // dwdot[CO]/d[O]
  J[85] += dqdci; // dwdot[CO2]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[12];
  J[290] += dqdci; // dwdot[O]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[300] -= dqdci; // dwdot[CO]/d[O2]
  J[301] += dqdci; // dwdot[CO2]/d[O2]
  // d()/d[CO]
  dqdci = +k_f * sc[8];
  J[434] += dqdci; // dwdot[O]/d[CO]
  J[440] -= dqdci; // dwdot[O2]/d[CO]
  J[444] -= dqdci; // dwdot[CO]/d[CO]
  J[445] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[2];
  J[470] += dqdci; // dwdot[O]/d[CO2]
  J[476] -= dqdci; // dwdot[O2]/d[CO2]
  J[480] -= dqdci; // dwdot[CO]/d[CO2]
  J[481] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1262] += dqdT; // dwdot[O]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1272] -= dqdT; // dwdot[CO]/dT
  J[1273] += dqdT; // dwdot[CO2]/dT

  // reaction 55: H + HCO <=> CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc_qss[2];
  k_f = 120000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[5] * sc[12];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[12] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[2]) + (h_RT[5] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[12] += q; // CO
  // d()/d[H]
  dqdci = +k_f * sc_qss[2];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[48] += dqdci; // dwdot[CO]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[12];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[192] += dqdci; // dwdot[CO]/d[H2]
  // d()/d[CO]
  dqdci = -k_r * sc[5];
  J[433] -= dqdci; // dwdot[H]/d[CO]
  J[437] += dqdci; // dwdot[H2]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 56: HCO + O <=> CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc_qss[2];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[12];
  Kc = exp(g_RT[2] - g_RT[3] - g_RT[12] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT_qss[2]) + (h_RT[3] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // OH
  wdot[12] += q; // CO
  // d()/d[O]
  dqdci = +k_f * sc_qss[2];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[84] += dqdci; // dwdot[CO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[120] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[CO]
  dqdci = -k_r * sc[3];
  J[434] -= dqdci; // dwdot[O]/d[CO]
  J[435] += dqdci; // dwdot[OH]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 57: HCO + O <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc_qss[2];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[13];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[13] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT_qss[2]) + (h_RT[1] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[13] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[13];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[38] -= dqdci; // dwdot[O]/d[H]
  J[49] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc_qss[2];
  J[73] += dqdci; // dwdot[H]/d[O]
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[85] += dqdci; // dwdot[CO2]/d[O]
  // d()/d[CO2]
  dqdci = -k_r * sc[1];
  J[469] += dqdci; // dwdot[H]/d[CO2]
  J[470] -= dqdci; // dwdot[O]/d[CO2]
  J[481] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1273] += dqdT; // dwdot[CO2]/dT

  // reaction 58: HCO + OH <=> CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc_qss[2];
  k_f = 30200000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[6] * sc[12];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[12] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT_qss[2]) + (h_RT[6] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[12] += q; // CO
  // d()/d[OH]
  dqdci = +k_f * sc_qss[2];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[120] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[12];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[228] += dqdci; // dwdot[CO]/d[H2O]
  // d()/d[CO]
  dqdci = -k_r * sc[6];
  J[435] -= dqdci; // dwdot[OH]/d[CO]
  J[438] += dqdci; // dwdot[H2O]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 59: HCO + O2 <=> CO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[2];
  k_f = 12040 * exp(0.807 * tc[0] - 0.50321666580472 * (-727) * invT);
  dlnkfdT = 0.807 * invT + 0.50321666580472 * (-727) * invT2;
  // reverse
  phi_r = sc[4] * sc[12];
  Kc = exp(-g_RT[4] + g_RT[8] - g_RT[12] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[2]) + (h_RT[4] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[12] += q; // CO
  // d()/d[HO2]
  dqdci = -k_r * sc[12];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  J[156] += dqdci; // dwdot[CO]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[2];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[300] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[CO]
  dqdci = -k_r * sc[4];
  J[436] += dqdci; // dwdot[HO2]/d[CO]
  J[440] -= dqdci; // dwdot[O2]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 60: CH2 + O <=> H + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc_qss[0];
  k_f = 80000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc_qss[2];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT_qss[0] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT_qss[0]) + (h_RT[1] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[2] -= q; // O
  // d()/d[H]
  dqdci = -k_r * sc_qss[2];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[38] -= dqdci; // dwdot[O]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc_qss[0];
  J[73] += dqdci; // dwdot[H]/d[O]
  J[74] -= dqdci; // dwdot[O]/d[O]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1262] -= dqdT; // dwdot[O]/dT

  // reaction 61: CH2 + OH <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc_qss[0];
  k_f = 20000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[11];
  Kc = exp(-g_RT[1] + g_RT[3] - g_RT[11] + g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT_qss[0]) + (h_RT[1] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // OH
  wdot[11] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[11];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[39] -= dqdci; // dwdot[OH]/d[H]
  J[47] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc_qss[0];
  J[109] += dqdci; // dwdot[H]/d[OH]
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[397] += dqdci; // dwdot[H]/d[CH2O]
  J[399] -= dqdci; // dwdot[OH]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 62: CH2 + H2 <=> CH3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc_qss[0];
  k_f = 0.5 * exp(2 * tc[0] - 0.50321666580472 * (7230) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (7230) * invT2;
  // reverse
  phi_r = sc[1] * sc[9];
  Kc = exp(-g_RT[1] + g_RT[5] - g_RT[9] + g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT_qss[0]) + (h_RT[1] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[5] -= q; // H2
  wdot[9] += q; // CH3
  // d()/d[H]
  dqdci = -k_r * sc[9];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[41] -= dqdci; // dwdot[H2]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[H2]
  dqdci = +k_f * sc_qss[0];
  J[181] += dqdci; // dwdot[H]/d[H2]
  J[185] -= dqdci; // dwdot[H2]/d[H2]
  J[189] += dqdci; // dwdot[CH3]/d[H2]
  // d()/d[CH3]
  dqdci = -k_r * sc[1];
  J[325] += dqdci; // dwdot[H]/d[CH3]
  J[329] -= dqdci; // dwdot[H2]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1265] -= dqdT; // dwdot[H2]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT

  // reaction 63: CH2 + O2 <=> HCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[0];
  k_f = 10600000 * exp(0 * tc[0] - 0.50321666580472 * (1500) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (1500) * invT2;
  // reverse
  phi_r = sc[3] * sc_qss[2];
  Kc = exp(-g_RT[3] + g_RT[8] + g_RT_qss[0] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[0]) + (h_RT[3] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // OH
  wdot[8] -= q; // O2
  // d()/d[OH]
  dqdci = -k_r * sc_qss[2];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[116] -= dqdci; // dwdot[O2]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[0];
  J[291] += dqdci; // dwdot[OH]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT

  // reaction 64: CH2 + O2 <=> CO2 + 2 H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[0];
  k_f = 2640000 * exp(0 * tc[0] - 0.50321666580472 * (1500) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (1500) * invT2;
  // reverse
  phi_r = (sc[1] * sc[1]) * sc[13];
  Kc = refC * exp(-2.000000 * g_RT[1] + g_RT[8] - g_RT[13] + g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[0]) + (2.000000 * h_RT[1] + h_RT[13]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += 2 * q; // H
  wdot[8] -= q;     // O2
  wdot[13] += q;    // CO2
  // d()/d[H]
  dqdci = -k_r * 2.000000 * sc[1] * sc[13];
  J[37] += 2 * dqdci; // dwdot[H]/d[H]
  J[44] -= dqdci;     // dwdot[O2]/d[H]
  J[49] += dqdci;     // dwdot[CO2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[0];
  J[289] += 2 * dqdci; // dwdot[H]/d[O2]
  J[296] -= dqdci;     // dwdot[O2]/d[O2]
  J[301] += dqdci;     // dwdot[CO2]/d[O2]
  // d()/d[CO2]
  dqdci = -k_r * pow(sc[1], 2.000000);
  J[469] += 2 * dqdci; // dwdot[H]/d[CO2]
  J[476] -= dqdci;     // dwdot[O2]/d[CO2]
  J[481] += dqdci;     // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1261] += 2 * dqdT; // dwdot[H]/dT
  J[1268] -= dqdT;     // dwdot[O2]/dT
  J[1273] += dqdT;     // dwdot[CO2]/dT

  // reaction 65: CH2 + HO2 <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc_qss[0];
  k_f = 20000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[11];
  Kc = exp(-g_RT[3] + g_RT[4] - g_RT[11] + g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT_qss[0]) + (h_RT[3] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[4] -= q;  // HO2
  wdot[11] += q; // CH2O
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc_qss[0];
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[155] += dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[3];
  J[399] += dqdci; // dwdot[OH]/d[CH2O]
  J[400] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 66: 2 CH2 <=> C2H2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = pow(sc_qss[0], 2.000000);
  k_f = 32000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  // Remove forward reaction
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[14];
  Kc = exp(-g_RT[5] - g_RT[14] + 2.000000 * g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT_qss[0]) + (h_RT[5] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  // Remove forward reaction
  // q = k_f*phi_f - k_r*phi_r;
  q = -k_r * phi_r;
  // Remove forward reaction
  // dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
  dqdT = (-dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2
  wdot[14] += q; // C2H2
  // d()/d[H2]
  dqdci = -k_r * sc[14];
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[194] += dqdci; // dwdot[C2H2]/d[H2]
  // d()/d[C2H2]
  dqdci = -k_r * sc[5];
  J[509] += dqdci; // dwdot[H2]/d[C2H2]
  J[518] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1274] += dqdT; // dwdot[C2H2]/dT

  // reaction 67: CH2* + N2 <=> CH2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[34] * sc_qss[1];
  k_f = 15000000 * exp(0 * tc[0] - 0.50321666580472 * (600) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (600) * invT2;
  // reverse
  phi_r = sc[34] * sc_qss[0];
  Kc = exp(g_RT[34] - g_RT[34] - g_RT_qss[0] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[34] + h_RT_qss[1]) + (h_RT[34] + h_RT_qss[0]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  // d()/d[N2]
  dqdci = +k_f * sc_qss[1] - k_r * sc_qss[0];
  // d()/dT

  // reaction 68: CH2* + O <=> CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc_qss[1];
  k_f = 15000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[5] * sc[12];
  Kc = exp(g_RT[2] - g_RT[5] - g_RT[12] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT_qss[1]) + (h_RT[5] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[5] += q;  // H2
  wdot[12] += q; // CO
  // d()/d[O]
  dqdci = +k_f * sc_qss[1];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[77] += dqdci; // dwdot[H2]/d[O]
  J[84] += dqdci; // dwdot[CO]/d[O]
  // d()/d[H2]
  dqdci = -k_r * sc[12];
  J[182] -= dqdci; // dwdot[O]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[192] += dqdci; // dwdot[CO]/d[H2]
  // d()/d[CO]
  dqdci = -k_r * sc[5];
  J[434] -= dqdci; // dwdot[O]/d[CO]
  J[437] += dqdci; // dwdot[H2]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 69: CH2* + O <=> H + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc_qss[1];
  k_f = 15000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc_qss[2];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT_qss[1] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT_qss[1]) + (h_RT[1] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[2] -= q; // O
  // d()/d[H]
  dqdci = -k_r * sc_qss[2];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[38] -= dqdci; // dwdot[O]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc_qss[1];
  J[73] += dqdci; // dwdot[H]/d[O]
  J[74] -= dqdci; // dwdot[O]/d[O]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1262] -= dqdT; // dwdot[O]/dT

  // reaction 70: CH2* + OH <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc_qss[1];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[11];
  Kc = exp(-g_RT[1] + g_RT[3] - g_RT[11] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT_qss[1]) + (h_RT[1] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // OH
  wdot[11] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[11];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[39] -= dqdci; // dwdot[OH]/d[H]
  J[47] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc_qss[1];
  J[109] += dqdci; // dwdot[H]/d[OH]
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[397] += dqdci; // dwdot[H]/d[CH2O]
  J[399] -= dqdci; // dwdot[OH]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 71: CH2* + H2 <=> CH3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc_qss[1];
  k_f = 70000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[9];
  Kc = exp(-g_RT[1] + g_RT[5] - g_RT[9] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT_qss[1]) + (h_RT[1] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[5] -= q; // H2
  wdot[9] += q; // CH3
  // d()/d[H]
  dqdci = -k_r * sc[9];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[41] -= dqdci; // dwdot[H2]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[H2]
  dqdci = +k_f * sc_qss[1];
  J[181] += dqdci; // dwdot[H]/d[H2]
  J[185] -= dqdci; // dwdot[H2]/d[H2]
  J[189] += dqdci; // dwdot[CH3]/d[H2]
  // d()/d[CH3]
  dqdci = -k_r * sc[1];
  J[325] += dqdci; // dwdot[H]/d[CH3]
  J[329] -= dqdci; // dwdot[H2]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1265] -= dqdT; // dwdot[H2]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT

  // reaction 72: CH2* + O2 <=> CO + H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[1];
  k_f = 28000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[3] * sc[12];
  Kc = refC * exp(-g_RT[1] - g_RT[3] + g_RT[8] - g_RT[12] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[1]) + (h_RT[1] + h_RT[3] + h_RT[12]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] += q;  // OH
  wdot[8] -= q;  // O2
  wdot[12] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[3] * sc[12];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[39] += dqdci; // dwdot[OH]/d[H]
  J[44] -= dqdci; // dwdot[O2]/d[H]
  J[48] += dqdci; // dwdot[CO]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[1] * sc[12];
  J[109] += dqdci; // dwdot[H]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[116] -= dqdci; // dwdot[O2]/d[OH]
  J[120] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[1];
  J[289] += dqdci; // dwdot[H]/d[O2]
  J[291] += dqdci; // dwdot[OH]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[300] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * sc[3];
  J[433] += dqdci; // dwdot[H]/d[CO]
  J[435] += dqdci; // dwdot[OH]/d[CO]
  J[440] -= dqdci; // dwdot[O2]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 73: CH2* + O2 <=> CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[1];
  k_f = 12000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[6] * sc[12];
  Kc = exp(-g_RT[6] + g_RT[8] - g_RT[12] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[1]) + (h_RT[6] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // H2O
  wdot[8] -= q;  // O2
  wdot[12] += q; // CO
  // d()/d[H2O]
  dqdci = -k_r * sc[12];
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[224] -= dqdci; // dwdot[O2]/d[H2O]
  J[228] += dqdci; // dwdot[CO]/d[H2O]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[1];
  J[294] += dqdci; // dwdot[H2O]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[300] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[CO]
  dqdci = -k_r * sc[6];
  J[438] += dqdci; // dwdot[H2O]/d[CO]
  J[440] -= dqdci; // dwdot[O2]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 74: CH2* + H2O <=> CH2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc_qss[1];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[6] * sc_qss[0];
  Kc = exp(g_RT[6] - g_RT[6] - g_RT_qss[0] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT_qss[1]) + (h_RT[6] + h_RT_qss[0]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  // d()/d[H2O]
  dqdci = +k_f * sc_qss[1] - k_r * sc_qss[0];
  // d()/dT

  // reaction 75: CH2* + CO <=> CH2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc_qss[1];
  k_f = 9000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[12] * sc_qss[0];
  Kc = exp(g_RT[12] - g_RT[12] - g_RT_qss[0] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT_qss[1]) + (h_RT[12] + h_RT_qss[0]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  // d()/d[CO]
  dqdci = +k_f * sc_qss[1] - k_r * sc_qss[0];
  // d()/dT

  // reaction 76: CH2* + CO2 <=> CH2 + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc_qss[1];
  k_f = 7000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[13] * sc_qss[0];
  Kc = exp(g_RT[13] - g_RT[13] - g_RT_qss[0] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT_qss[1]) + (h_RT[13] + h_RT_qss[0]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  // d()/d[CO2]
  dqdci = +k_f * sc_qss[1] - k_r * sc_qss[0];
  // d()/dT

  // reaction 77: CH2* + CO2 <=> CH2O + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc_qss[1];
  k_f = 14000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[11] * sc[12];
  Kc = exp(-g_RT[11] - g_RT[12] + g_RT[13] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT_qss[1]) + (h_RT[11] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // CH2O
  wdot[12] += q; // CO
  wdot[13] -= q; // CO2
  // d()/d[CH2O]
  dqdci = -k_r * sc[12];
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[408] += dqdci; // dwdot[CO]/d[CH2O]
  J[409] -= dqdci; // dwdot[CO2]/d[CH2O]
  // d()/d[CO]
  dqdci = -k_r * sc[11];
  J[443] += dqdci; // dwdot[CH2O]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[445] -= dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = +k_f * sc_qss[1];
  J[479] += dqdci; // dwdot[CH2O]/d[CO2]
  J[480] += dqdci; // dwdot[CO]/d[CO2]
  J[481] -= dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1273] -= dqdT; // dwdot[CO2]/dT

  // reaction 78: CH2O + H <=> H2 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 23000 * exp(1.05 * tc[0] - 0.50321666580472 * (3275) * invT);
  dlnkfdT = 1.05 * invT + 0.50321666580472 * (3275) * invT2;
  // reverse
  phi_r = sc[5] * sc_qss[2];
  Kc = exp(g_RT[1] - g_RT[5] + g_RT[11] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[11]) + (h_RT[5] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[11] -= q; // CH2O
  // d()/d[H]
  dqdci = +k_f * sc[11];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[47] -= dqdci; // dwdot[CH2O]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc_qss[2];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[191] -= dqdci; // dwdot[CH2O]/d[H2]
  // d()/d[CH2O]
  dqdci = +k_f * sc[1];
  J[397] -= dqdci; // dwdot[H]/d[CH2O]
  J[401] += dqdci; // dwdot[H2]/d[CH2O]
  J[407] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1271] -= dqdT; // dwdot[CH2O]/dT

  // reaction 79: CH2O + O <=> HCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[11];
  k_f = 39000000 * exp(0 * tc[0] - 0.50321666580472 * (3540) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3540) * invT2;
  // reverse
  phi_r = sc[3] * sc_qss[2];
  Kc = exp(g_RT[2] - g_RT[3] + g_RT[11] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[11]) + (h_RT[3] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // OH
  wdot[11] -= q; // CH2O
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[83] -= dqdci; // dwdot[CH2O]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc_qss[2];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[119] -= dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH2O]
  dqdci = +k_f * sc[2];
  J[398] -= dqdci; // dwdot[O]/d[CH2O]
  J[399] += dqdci; // dwdot[OH]/d[CH2O]
  J[407] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1271] -= dqdT; // dwdot[CH2O]/dT

  // reaction 80: CH2O + OH <=> H2O + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[11];
  k_f = 3430 * exp(1.18 * tc[0] - 0.50321666580472 * (-447) * invT);
  dlnkfdT = 1.18 * invT + 0.50321666580472 * (-447) * invT2;
  // reverse
  phi_r = sc[6] * sc_qss[2];
  Kc = exp(g_RT[3] - g_RT[6] + g_RT[11] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[11]) + (h_RT[6] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[11] -= q; // CH2O
  // d()/d[OH]
  dqdci = +k_f * sc[11];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[119] -= dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc_qss[2];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[227] -= dqdci; // dwdot[CH2O]/d[H2O]
  // d()/d[CH2O]
  dqdci = +k_f * sc[3];
  J[399] -= dqdci; // dwdot[OH]/d[CH2O]
  J[402] += dqdci; // dwdot[H2O]/d[CH2O]
  J[407] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1271] -= dqdT; // dwdot[CH2O]/dT

  // reaction 81: CH2O + O2 <=> HCO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[11];
  k_f = 100000000 * exp(0 * tc[0] - 0.50321666580472 * (40000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (40000) * invT2;
  // reverse
  phi_r = sc[4] * sc_qss[2];
  Kc = exp(-g_RT[4] + g_RT[8] + g_RT[11] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[11]) + (h_RT[4] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[11] -= q; // CH2O
  // d()/d[HO2]
  dqdci = -k_r * sc_qss[2];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  J[155] -= dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[11];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[299] -= dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[CH2O]
  dqdci = +k_f * sc[8];
  J[400] += dqdci; // dwdot[HO2]/d[CH2O]
  J[404] -= dqdci; // dwdot[O2]/d[CH2O]
  J[407] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1271] -= dqdT; // dwdot[CH2O]/dT

  // reaction 82: CH2O + HO2 <=> H2O2 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[11];
  k_f = 1000000 * exp(0 * tc[0] - 0.50321666580472 * (8000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (8000) * invT2;
  // reverse
  phi_r = sc[7] * sc_qss[2];
  Kc = exp(g_RT[4] - g_RT[7] + g_RT[11] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[11]) + (h_RT[7] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[11] -= q; // CH2O
  // d()/d[HO2]
  dqdci = +k_f * sc[11];
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[151] += dqdci; // dwdot[H2O2]/d[HO2]
  J[155] -= dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc_qss[2];
  J[256] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[259] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[263] -= dqdci; // dwdot[CH2O]/d[H2O2]
  // d()/d[CH2O]
  dqdci = +k_f * sc[4];
  J[400] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[403] += dqdci; // dwdot[H2O2]/d[CH2O]
  J[407] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1267] += dqdT; // dwdot[H2O2]/dT
  J[1271] -= dqdT; // dwdot[CH2O]/dT

  // reaction 83: CH3 + O <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[9];
  k_f = 84300000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[11];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[9] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[9]) + (h_RT[1] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[9] -= q;  // CH3
  wdot[11] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[11];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[38] -= dqdci; // dwdot[O]/d[H]
  J[45] -= dqdci; // dwdot[CH3]/d[H]
  J[47] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[9];
  J[73] += dqdci; // dwdot[H]/d[O]
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[81] -= dqdci; // dwdot[CH3]/d[O]
  J[83] += dqdci; // dwdot[CH2O]/d[O]
  // d()/d[CH3]
  dqdci = +k_f * sc[2];
  J[325] += dqdci; // dwdot[H]/d[CH3]
  J[326] -= dqdci; // dwdot[O]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[335] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[397] += dqdci; // dwdot[H]/d[CH2O]
  J[398] -= dqdci; // dwdot[O]/d[CH2O]
  J[405] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 84: CH3 + OH <=> CH2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[9];
  k_f = 56 * exp(1.6 * tc[0] - 0.50321666580472 * (5420) * invT);
  dlnkfdT = 1.6 * invT + 0.50321666580472 * (5420) * invT2;
  // reverse
  phi_r = sc[6] * sc_qss[0];
  Kc = exp(g_RT[3] - g_RT[6] + g_RT[9] - g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[9]) + (h_RT[6] + h_RT_qss[0]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q; // OH
  wdot[6] += q; // H2O
  wdot[9] -= q; // CH3
  // d()/d[OH]
  dqdci = +k_f * sc[9];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[117] -= dqdci; // dwdot[CH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc_qss[0];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[225] -= dqdci; // dwdot[CH3]/d[H2O]
  // d()/d[CH3]
  dqdci = +k_f * sc[3];
  J[327] -= dqdci; // dwdot[OH]/d[CH3]
  J[330] += dqdci; // dwdot[H2O]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT

  // reaction 85: CH3 + OH <=> CH2* + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[9];
  k_f = 25010000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[6] * sc_qss[1];
  Kc = exp(g_RT[3] - g_RT[6] + g_RT[9] - g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[9]) + (h_RT[6] + h_RT_qss[1]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q; // OH
  wdot[6] += q; // H2O
  wdot[9] -= q; // CH3
  // d()/d[OH]
  dqdci = +k_f * sc[9];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[117] -= dqdci; // dwdot[CH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc_qss[1];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[225] -= dqdci; // dwdot[CH3]/d[H2O]
  // d()/d[CH3]
  dqdci = +k_f * sc[3];
  J[327] -= dqdci; // dwdot[OH]/d[CH3]
  J[330] += dqdci; // dwdot[H2O]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT

  // reaction 86: CH3 + O2 <=> CH3O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[9];
  k_f = 30830000 * exp(0 * tc[0] - 0.50321666580472 * (28800) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (28800) * invT2;
  // reverse
  phi_r = sc[2] * sc_qss[3];
  Kc = exp(-g_RT[2] + g_RT[8] + g_RT[9] - g_RT_qss[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[9]) + (h_RT[2] + h_RT_qss[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q; // O
  wdot[8] -= q; // O2
  wdot[9] -= q; // CH3
  // d()/d[O]
  dqdci = -k_r * sc_qss[3];
  J[74] += dqdci; // dwdot[O]/d[O]
  J[80] -= dqdci; // dwdot[O2]/d[O]
  J[81] -= dqdci; // dwdot[CH3]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[9];
  J[290] += dqdci; // dwdot[O]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[297] -= dqdci; // dwdot[CH3]/d[O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[8];
  J[326] += dqdci; // dwdot[O]/d[CH3]
  J[332] -= dqdci; // dwdot[O2]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1262] += dqdT; // dwdot[O]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT

  // reaction 87: CH3 + O2 <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[9];
  k_f = 36000 * exp(0 * tc[0] - 0.50321666580472 * (8940) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (8940) * invT2;
  // reverse
  phi_r = sc[3] * sc[11];
  Kc = exp(-g_RT[3] + g_RT[8] + g_RT[9] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[9]) + (h_RT[3] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[8] -= q;  // O2
  wdot[9] -= q;  // CH3
  wdot[11] += q; // CH2O
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[116] -= dqdci; // dwdot[O2]/d[OH]
  J[117] -= dqdci; // dwdot[CH3]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[9];
  J[291] += dqdci; // dwdot[OH]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[297] -= dqdci; // dwdot[CH3]/d[O2]
  J[299] += dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[8];
  J[327] += dqdci; // dwdot[OH]/d[CH3]
  J[332] -= dqdci; // dwdot[O2]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[335] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[3];
  J[399] += dqdci; // dwdot[OH]/d[CH2O]
  J[404] -= dqdci; // dwdot[O2]/d[CH2O]
  J[405] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 88: CH3 + HO2 <=> CH4 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 1000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[8] * sc[10];
  Kc = exp(g_RT[4] - g_RT[8] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[9]) + (h_RT[8] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  // d()/d[HO2]
  dqdci = +k_f * sc[9];
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[152] += dqdci; // dwdot[O2]/d[HO2]
  J[153] -= dqdci; // dwdot[CH3]/d[HO2]
  J[154] += dqdci; // dwdot[CH4]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[10];
  J[292] -= dqdci; // dwdot[HO2]/d[O2]
  J[296] += dqdci; // dwdot[O2]/d[O2]
  J[297] -= dqdci; // dwdot[CH3]/d[O2]
  J[298] += dqdci; // dwdot[CH4]/d[O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[4];
  J[328] -= dqdci; // dwdot[HO2]/d[CH3]
  J[332] += dqdci; // dwdot[O2]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[8];
  J[364] -= dqdci; // dwdot[HO2]/d[CH4]
  J[368] += dqdci; // dwdot[O2]/d[CH4]
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1268] += dqdT; // dwdot[O2]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT

  // reaction 89: CH3 + HO2 <=> CH3O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 13400000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc_qss[3];
  Kc = exp(-g_RT[3] + g_RT[4] + g_RT[9] - g_RT_qss[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[9]) + (h_RT[3] + h_RT_qss[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // OH
  wdot[4] -= q; // HO2
  wdot[9] -= q; // CH3
  // d()/d[OH]
  dqdci = -k_r * sc_qss[3];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[117] -= dqdci; // dwdot[CH3]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[9];
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[153] -= dqdci; // dwdot[CH3]/d[HO2]
  // d()/d[CH3]
  dqdci = +k_f * sc[4];
  J[327] += dqdci; // dwdot[OH]/d[CH3]
  J[328] -= dqdci; // dwdot[HO2]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT

  // reaction 90: CH3 + H2O2 <=> CH4 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[9];
  k_f = 0.0245 * exp(2.47 * tc[0] - 0.50321666580472 * (5180) * invT);
  dlnkfdT = 2.47 * invT + 0.50321666580472 * (5180) * invT2;
  // reverse
  phi_r = sc[4] * sc[10];
  Kc = exp(-g_RT[4] + g_RT[7] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[9]) + (h_RT[4] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  // d()/d[HO2]
  dqdci = -k_r * sc[10];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[151] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[153] -= dqdci; // dwdot[CH3]/d[HO2]
  J[154] += dqdci; // dwdot[CH4]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[9];
  J[256] += dqdci; // dwdot[HO2]/d[H2O2]
  J[259] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[261] -= dqdci; // dwdot[CH3]/d[H2O2]
  J[262] += dqdci; // dwdot[CH4]/d[H2O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[7];
  J[328] += dqdci; // dwdot[HO2]/d[CH3]
  J[331] -= dqdci; // dwdot[H2O2]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[4];
  J[364] += dqdci; // dwdot[HO2]/d[CH4]
  J[367] -= dqdci; // dwdot[H2O2]/d[CH4]
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1267] -= dqdT; // dwdot[H2O2]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT

  // reaction 91: CH3 + HCO <=> CH4 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc_qss[2];
  k_f = 8480000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[10] * sc[12];
  Kc = exp(g_RT[9] - g_RT[10] - g_RT[12] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT_qss[2]) + (h_RT[10] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  wdot[12] += q; // CO
  // d()/d[CH3]
  dqdci = +k_f * sc_qss[2];
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  J[336] += dqdci; // dwdot[CO]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[12];
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  J[372] += dqdci; // dwdot[CO]/d[CH4]
  // d()/d[CO]
  dqdci = -k_r * sc[10];
  J[441] -= dqdci; // dwdot[CH3]/d[CO]
  J[442] += dqdci; // dwdot[CH4]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 92: CH2O + CH3 <=> CH4 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[11];
  k_f = 0.00332 * exp(2.81 * tc[0] - 0.50321666580472 * (5860) * invT);
  dlnkfdT = 2.81 * invT + 0.50321666580472 * (5860) * invT2;
  // reverse
  phi_r = sc[10] * sc_qss[2];
  Kc = exp(g_RT[9] - g_RT[10] + g_RT[11] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[11]) + (h_RT[10] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  wdot[11] -= q; // CH2O
  // d()/d[CH3]
  dqdci = +k_f * sc[11];
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  J[335] -= dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc_qss[2];
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  J[371] -= dqdci; // dwdot[CH2O]/d[CH4]
  // d()/d[CH2O]
  dqdci = +k_f * sc[9];
  J[405] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[406] += dqdci; // dwdot[CH4]/d[CH2O]
  J[407] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT
  J[1271] -= dqdT; // dwdot[CH2O]/dT

  // reaction 93: CH2 + CH3 <=> C2H4 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc_qss[0];
  k_f = 40000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[15];
  Kc = exp(-g_RT[1] + g_RT[9] - g_RT[15] + g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT_qss[0]) + (h_RT[1] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH3
  wdot[15] += q; // C2H4
  // d()/d[H]
  dqdci = -k_r * sc[15];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[45] -= dqdci; // dwdot[CH3]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  // d()/d[CH3]
  dqdci = +k_f * sc_qss[0];
  J[325] += dqdci; // dwdot[H]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[339] += dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[1];
  J[541] += dqdci; // dwdot[H]/d[C2H4]
  J[549] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT

  // reaction 94: CH2* + CH3 <=> C2H4 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc_qss[1];
  k_f = 12000000 * exp(0 * tc[0] - 0.50321666580472 * (-570) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (-570) * invT2;
  // reverse
  phi_r = sc[1] * sc[15];
  Kc = exp(-g_RT[1] + g_RT[9] - g_RT[15] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT_qss[1]) + (h_RT[1] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH3
  wdot[15] += q; // C2H4
  // d()/d[H]
  dqdci = -k_r * sc[15];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[45] -= dqdci; // dwdot[CH3]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  // d()/d[CH3]
  dqdci = +k_f * sc_qss[1];
  J[325] += dqdci; // dwdot[H]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[339] += dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[1];
  J[541] += dqdci; // dwdot[H]/d[C2H4]
  J[549] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT

  // reaction 95: 2 CH3 <=> C2H5 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[9] * sc[9]);
  k_f = 4990000 * exp(0.1 * tc[0] - 0.50321666580472 * (10600) * invT);
  dlnkfdT = 0.1 * invT + 0.50321666580472 * (10600) * invT2;
  // reverse
  phi_r = sc[1] * sc_qss[5];
  Kc = exp(-g_RT[1] + 2.000000 * g_RT[9] - g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[9]) + (h_RT[1] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;     // H
  wdot[9] -= 2 * q; // CH3
  // d()/d[H]
  dqdci = -k_r * sc_qss[5];
  J[37] += dqdci;      // dwdot[H]/d[H]
  J[45] += -2 * dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH3]
  dqdci = +k_f * 2.000000 * sc[9];
  J[325] += dqdci;      // dwdot[H]/d[CH3]
  J[333] += -2 * dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1261] += dqdT;      // dwdot[H]/dT
  J[1269] += -2 * dqdT; // dwdot[CH3]/dT

  // reaction 96: CH3O + H <=> CH2O + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc_qss[3];
  k_f = 20000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[5] * sc[11];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[11] + g_RT_qss[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[3]) + (h_RT[5] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[11] += q; // CH2O
  // d()/d[H]
  dqdci = +k_f * sc_qss[3];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[47] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[11];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[191] += dqdci; // dwdot[CH2O]/d[H2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[5];
  J[397] -= dqdci; // dwdot[H]/d[CH2O]
  J[401] += dqdci; // dwdot[H2]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 97: CH3O + H <=> CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc_qss[3];
  k_f = 32000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[9];
  Kc = exp(g_RT[1] - g_RT[3] - g_RT[9] + g_RT_qss[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[3]) + (h_RT[3] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] += q; // OH
  wdot[9] += q; // CH3
  // d()/d[H]
  dqdci = +k_f * sc_qss[3];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[39] += dqdci; // dwdot[OH]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[9];
  J[109] -= dqdci; // dwdot[H]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[117] += dqdci; // dwdot[CH3]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[3];
  J[325] -= dqdci; // dwdot[H]/d[CH3]
  J[327] += dqdci; // dwdot[OH]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT

  // reaction 98: CH3O + H <=> CH2* + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc_qss[3];
  k_f = 16000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[6] * sc_qss[1];
  Kc = exp(g_RT[1] - g_RT[6] - g_RT_qss[1] + g_RT_qss[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[3]) + (h_RT[6] + h_RT_qss[1]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[6] += q; // H2O
  // d()/d[H]
  dqdci = +k_f * sc_qss[3];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[42] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc_qss[1];
  J[217] -= dqdci; // dwdot[H]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT

  // reaction 99: CH3O + O <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc_qss[3];
  k_f = 10000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[11];
  Kc = exp(g_RT[2] - g_RT[3] - g_RT[11] + g_RT_qss[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT_qss[3]) + (h_RT[3] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // OH
  wdot[11] += q; // CH2O
  // d()/d[O]
  dqdci = +k_f * sc_qss[3];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[83] += dqdci; // dwdot[CH2O]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH2O]
  dqdci = -k_r * sc[3];
  J[398] -= dqdci; // dwdot[O]/d[CH2O]
  J[399] += dqdci; // dwdot[OH]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 100: CH3O + OH <=> CH2O + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc_qss[3];
  k_f = 5000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[6] * sc[11];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[11] + g_RT_qss[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT_qss[3]) + (h_RT[6] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[11] += q; // CH2O
  // d()/d[OH]
  dqdci = +k_f * sc_qss[3];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[227] += dqdci; // dwdot[CH2O]/d[H2O]
  // d()/d[CH2O]
  dqdci = -k_r * sc[6];
  J[399] -= dqdci; // dwdot[OH]/d[CH2O]
  J[402] += dqdci; // dwdot[H2O]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 101: CH3O + O2 <=> CH2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[3];
  k_f = 4.28e-19 * exp(7.6 * tc[0] - 0.50321666580472 * (-3530) * invT);
  dlnkfdT = 7.6 * invT + 0.50321666580472 * (-3530) * invT2;
  // reverse
  phi_r = sc[4] * sc[11];
  Kc = exp(-g_RT[4] + g_RT[8] - g_RT[11] + g_RT_qss[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[3]) + (h_RT[4] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[11] += q; // CH2O
  // d()/d[HO2]
  dqdci = -k_r * sc[11];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  J[155] += dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[3];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[299] += dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[4];
  J[400] += dqdci; // dwdot[HO2]/d[CH2O]
  J[404] -= dqdci; // dwdot[O2]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 102: CH4 + H <=> CH3 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[10];
  k_f = 660 * exp(1.62 * tc[0] - 0.50321666580472 * (10840) * invT);
  dlnkfdT = 1.62 * invT + 0.50321666580472 * (10840) * invT2;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[10]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[9] += q;  // CH3
  wdot[10] -= q; // CH4
  // d()/d[H]
  dqdci = +k_f * sc[10];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  J[46] -= dqdci; // dwdot[CH4]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[9];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[189] += dqdci; // dwdot[CH3]/d[H2]
  J[190] -= dqdci; // dwdot[CH4]/d[H2]
  // d()/d[CH3]
  dqdci = -k_r * sc[5];
  J[325] -= dqdci; // dwdot[H]/d[CH3]
  J[329] += dqdci; // dwdot[H2]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[334] -= dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[1];
  J[361] -= dqdci; // dwdot[H]/d[CH4]
  J[365] += dqdci; // dwdot[H2]/d[CH4]
  J[369] += dqdci; // dwdot[CH3]/d[CH4]
  J[370] -= dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1270] -= dqdT; // dwdot[CH4]/dT

  // reaction 103: CH4 + O <=> CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[10];
  k_f = 1020 * exp(1.5 * tc[0] - 0.50321666580472 * (8600) * invT);
  dlnkfdT = 1.5 * invT + 0.50321666580472 * (8600) * invT2;
  // reverse
  phi_r = sc[3] * sc[9];
  Kc = exp(g_RT[2] - g_RT[3] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[10]) + (h_RT[3] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // OH
  wdot[9] += q;  // CH3
  wdot[10] -= q; // CH4
  // d()/d[O]
  dqdci = +k_f * sc[10];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[81] += dqdci; // dwdot[CH3]/d[O]
  J[82] -= dqdci; // dwdot[CH4]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[9];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[117] += dqdci; // dwdot[CH3]/d[OH]
  J[118] -= dqdci; // dwdot[CH4]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[3];
  J[326] -= dqdci; // dwdot[O]/d[CH3]
  J[327] += dqdci; // dwdot[OH]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[334] -= dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[2];
  J[362] -= dqdci; // dwdot[O]/d[CH4]
  J[363] += dqdci; // dwdot[OH]/d[CH4]
  J[369] += dqdci; // dwdot[CH3]/d[CH4]
  J[370] -= dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1270] -= dqdT; // dwdot[CH4]/dT

  // reaction 104: CH4 + OH <=> CH3 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 100 * exp(1.6 * tc[0] - 0.50321666580472 * (3120) * invT);
  dlnkfdT = 1.6 * invT + 0.50321666580472 * (3120) * invT2;
  // reverse
  phi_r = sc[6] * sc[9];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[10]) + (h_RT[6] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[9] += q;  // CH3
  wdot[10] -= q; // CH4
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[117] += dqdci; // dwdot[CH3]/d[OH]
  J[118] -= dqdci; // dwdot[CH4]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[9];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[225] += dqdci; // dwdot[CH3]/d[H2O]
  J[226] -= dqdci; // dwdot[CH4]/d[H2O]
  // d()/d[CH3]
  dqdci = -k_r * sc[6];
  J[327] -= dqdci; // dwdot[OH]/d[CH3]
  J[330] += dqdci; // dwdot[H2O]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[334] -= dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[3];
  J[363] -= dqdci; // dwdot[OH]/d[CH4]
  J[366] += dqdci; // dwdot[H2O]/d[CH4]
  J[369] += dqdci; // dwdot[CH3]/d[CH4]
  J[370] -= dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1270] -= dqdT; // dwdot[CH4]/dT

  // reaction 105: CH2 + CH4 <=> 2 CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc_qss[0];
  k_f = 2.46 * exp(2 * tc[0] - 0.50321666580472 * (8270) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (8270) * invT2;
  // reverse
  phi_r = (sc[9] * sc[9]);
  Kc = exp(-2.000000 * g_RT[9] + g_RT[10] + g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT_qss[0]) + (2.000000 * h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += 2 * q; // CH3
  wdot[10] -= q;    // CH4
  // d()/d[CH3]
  dqdci = -k_r * 2.000000 * sc[9];
  J[333] += 2 * dqdci; // dwdot[CH3]/d[CH3]
  J[334] -= dqdci;     // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc_qss[0];
  J[369] += 2 * dqdci; // dwdot[CH3]/d[CH4]
  J[370] -= dqdci;     // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1269] += 2 * dqdT; // dwdot[CH3]/dT
  J[1270] -= dqdT;     // dwdot[CH4]/dT

  // reaction 106: CH2* + CH4 <=> 2 CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc_qss[1];
  k_f = 16000000 * exp(0 * tc[0] - 0.50321666580472 * (-570) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (-570) * invT2;
  // reverse
  phi_r = (sc[9] * sc[9]);
  Kc = exp(-2.000000 * g_RT[9] + g_RT[10] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT_qss[1]) + (2.000000 * h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += 2 * q; // CH3
  wdot[10] -= q;    // CH4
  // d()/d[CH3]
  dqdci = -k_r * 2.000000 * sc[9];
  J[333] += 2 * dqdci; // dwdot[CH3]/d[CH3]
  J[334] -= dqdci;     // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc_qss[1];
  J[369] += 2 * dqdci; // dwdot[CH3]/d[CH4]
  J[370] -= dqdci;     // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1269] += 2 * dqdT; // dwdot[CH3]/dT
  J[1270] -= dqdT;     // dwdot[CH4]/dT

  // reaction 107: C2H2 + O <=> CH2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[14];
  k_f = 4.08 * exp(2 * tc[0] - 0.50321666580472 * (1900) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (1900) * invT2;
  // reverse
  phi_r = sc[12] * sc_qss[0];
  Kc = exp(g_RT[2] - g_RT[12] + g_RT[14] - g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[14]) + (h_RT[12] + h_RT_qss[0]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[12] += q; // CO
  wdot[14] -= q; // C2H2
  // d()/d[O]
  dqdci = +k_f * sc[14];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[84] += dqdci; // dwdot[CO]/d[O]
  J[86] -= dqdci; // dwdot[C2H2]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc_qss[0];
  J[434] -= dqdci; // dwdot[O]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[446] -= dqdci; // dwdot[C2H2]/d[CO]
  // d()/d[C2H2]
  dqdci = +k_f * sc[2];
  J[506] -= dqdci; // dwdot[O]/d[C2H2]
  J[516] += dqdci; // dwdot[CO]/d[C2H2]
  J[518] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1274] -= dqdT; // dwdot[C2H2]/dT

  // reaction 108: C2H2 + OH <=> CH3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[14];
  k_f = 4.83e-10 * exp(4 * tc[0] - 0.50321666580472 * (-2000) * invT);
  dlnkfdT = 4 * invT + 0.50321666580472 * (-2000) * invT2;
  // reverse
  phi_r = sc[9] * sc[12];
  Kc = exp(g_RT[3] - g_RT[9] - g_RT[12] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[14]) + (h_RT[9] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[9] += q;  // CH3
  wdot[12] += q; // CO
  wdot[14] -= q; // C2H2
  // d()/d[OH]
  dqdci = +k_f * sc[14];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[117] += dqdci; // dwdot[CH3]/d[OH]
  J[120] += dqdci; // dwdot[CO]/d[OH]
  J[122] -= dqdci; // dwdot[C2H2]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[12];
  J[327] -= dqdci; // dwdot[OH]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[336] += dqdci; // dwdot[CO]/d[CH3]
  J[338] -= dqdci; // dwdot[C2H2]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[9];
  J[435] -= dqdci; // dwdot[OH]/d[CO]
  J[441] += dqdci; // dwdot[CH3]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[446] -= dqdci; // dwdot[C2H2]/d[CO]
  // d()/d[C2H2]
  dqdci = +k_f * sc[3];
  J[507] -= dqdci; // dwdot[OH]/d[C2H2]
  J[513] += dqdci; // dwdot[CH3]/d[C2H2]
  J[516] += dqdci; // dwdot[CO]/d[C2H2]
  J[518] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1274] -= dqdT; // dwdot[C2H2]/dT

  // reaction 109: C2H2 + HCO <=> C2H3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc_qss[2];
  k_f = 10 * exp(2 * tc[0] - 0.50321666580472 * (6000) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (6000) * invT2;
  // reverse
  phi_r = sc[12] * sc_qss[4];
  Kc = exp(-g_RT[12] + g_RT[14] + g_RT_qss[2] - g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT_qss[2]) + (h_RT[12] + h_RT_qss[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // CO
  wdot[14] -= q; // C2H2
  // d()/d[CO]
  dqdci = -k_r * sc_qss[4];
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[446] -= dqdci; // dwdot[C2H2]/d[CO]
  // d()/d[C2H2]
  dqdci = +k_f * sc_qss[2];
  J[516] += dqdci; // dwdot[CO]/d[C2H2]
  J[518] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1274] -= dqdT; // dwdot[C2H2]/dT

  // reaction 110: C2H2 + CH3 <=> aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[14];
  k_f = 2.68e+47 * exp(-12.82 * tc[0] - 0.50321666580472 * (35730) * invT);
  dlnkfdT = -12.82 * invT + 0.50321666580472 * (35730) * invT2;
  // reverse
  phi_r = sc[18];
  Kc = refCinv * exp(g_RT[9] + g_RT[14] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[14]) + (h_RT[18]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[14] -= q; // C2H2
  wdot[18] += q; // aC3H5
  // d()/d[CH3]
  dqdci = +k_f * sc[14];
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[338] -= dqdci; // dwdot[C2H2]/d[CH3]
  J[342] += dqdci; // dwdot[aC3H5]/d[CH3]
  // d()/d[C2H2]
  dqdci = +k_f * sc[9];
  J[513] -= dqdci; // dwdot[CH3]/d[C2H2]
  J[518] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[522] += dqdci; // dwdot[aC3H5]/d[C2H2]
  // d()/d[aC3H5]
  dqdci = -k_r;
  J[657] -= dqdci; // dwdot[CH3]/d[aC3H5]
  J[662] -= dqdci; // dwdot[C2H2]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1274] -= dqdT; // dwdot[C2H2]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT

  // reaction 111: C2H3 + H <=> C2H2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc_qss[4];
  k_f = 90000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[5] * sc[14];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[14] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[4]) + (h_RT[5] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[14] += q; // C2H2
  // d()/d[H]
  dqdci = +k_f * sc_qss[4];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[50] += dqdci; // dwdot[C2H2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[14];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[194] += dqdci; // dwdot[C2H2]/d[H2]
  // d()/d[C2H2]
  dqdci = -k_r * sc[5];
  J[505] -= dqdci; // dwdot[H]/d[C2H2]
  J[509] += dqdci; // dwdot[H2]/d[C2H2]
  J[518] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1274] += dqdT; // dwdot[C2H2]/dT

  // reaction 112: C2H3 + O <=> CH3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc_qss[4];
  k_f = 48000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[12];
  Kc = exp(g_RT[2] - g_RT[9] - g_RT[12] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT_qss[4]) + (h_RT[9] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[9] += q;  // CH3
  wdot[12] += q; // CO
  // d()/d[O]
  dqdci = +k_f * sc_qss[4];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[81] += dqdci; // dwdot[CH3]/d[O]
  J[84] += dqdci; // dwdot[CO]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc[12];
  J[326] -= dqdci; // dwdot[O]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[336] += dqdci; // dwdot[CO]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[9];
  J[434] -= dqdci; // dwdot[O]/d[CO]
  J[441] += dqdci; // dwdot[CH3]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 113: C2H3 + OH <=> C2H2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc_qss[4];
  k_f = 30110000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[6] * sc[14];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[14] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT_qss[4]) + (h_RT[6] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[14] += q; // C2H2
  // d()/d[OH]
  dqdci = +k_f * sc_qss[4];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[122] += dqdci; // dwdot[C2H2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[14];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[230] += dqdci; // dwdot[C2H2]/d[H2O]
  // d()/d[C2H2]
  dqdci = -k_r * sc[6];
  J[507] -= dqdci; // dwdot[OH]/d[C2H2]
  J[510] += dqdci; // dwdot[H2O]/d[C2H2]
  J[518] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1274] += dqdT; // dwdot[C2H2]/dT

  // reaction 114: C2H3 + O2 <=> C2H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[4];
  k_f = 1.34 * exp(1.61 * tc[0] - 0.50321666580472 * (-383.4) * invT);
  dlnkfdT = 1.61 * invT + 0.50321666580472 * (-383.4) * invT2;
  // reverse
  phi_r = sc[4] * sc[14];
  Kc = exp(-g_RT[4] + g_RT[8] - g_RT[14] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[4]) + (h_RT[4] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[14] += q; // C2H2
  // d()/d[HO2]
  dqdci = -k_r * sc[14];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  J[158] += dqdci; // dwdot[C2H2]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[4];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[302] += dqdci; // dwdot[C2H2]/d[O2]
  // d()/d[C2H2]
  dqdci = -k_r * sc[4];
  J[508] += dqdci; // dwdot[HO2]/d[C2H2]
  J[512] -= dqdci; // dwdot[O2]/d[C2H2]
  J[518] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1274] += dqdT; // dwdot[C2H2]/dT

  // reaction 115: C2H3 + O2 <=> CH2CHO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[4];
  k_f = 300000 * exp(0.29 * tc[0] - 0.50321666580472 * (11) * invT);
  dlnkfdT = 0.29 * invT + 0.50321666580472 * (11) * invT2;
  // reverse
  phi_r = sc[2] * sc[17];
  Kc = exp(-g_RT[2] + g_RT[8] - g_RT[17] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[4]) + (h_RT[2] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[8] -= q;  // O2
  wdot[17] += q; // CH2CHO
  // d()/d[O]
  dqdci = -k_r * sc[17];
  J[74] += dqdci; // dwdot[O]/d[O]
  J[80] -= dqdci; // dwdot[O2]/d[O]
  J[89] += dqdci; // dwdot[CH2CHO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[4];
  J[290] += dqdci; // dwdot[O]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[305] += dqdci; // dwdot[CH2CHO]/d[O2]
  // d()/d[CH2CHO]
  dqdci = -k_r * sc[2];
  J[614] += dqdci; // dwdot[O]/d[CH2CHO]
  J[620] -= dqdci; // dwdot[O2]/d[CH2CHO]
  J[629] += dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1262] += dqdT; // dwdot[O]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1277] += dqdT; // dwdot[CH2CHO]/dT

  // reaction 116: C2H3 + O2 <=> CH2O + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[4];
  k_f = 46000000000 * exp(-1.39 * tc[0] - 0.50321666580472 * (1010) * invT);
  dlnkfdT = -1.39 * invT + 0.50321666580472 * (1010) * invT2;
  // reverse
  phi_r = sc[11] * sc_qss[2];
  Kc = exp(g_RT[8] - g_RT[11] - g_RT_qss[2] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[4]) + (h_RT[11] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // O2
  wdot[11] += q; // CH2O
  // d()/d[O2]
  dqdci = +k_f * sc_qss[4];
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[299] += dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[CH2O]
  dqdci = -k_r * sc_qss[2];
  J[404] -= dqdci; // dwdot[O2]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 117: C2H3 + HO2 <=> CH2CHO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc_qss[4];
  k_f = 10000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[17];
  Kc = exp(-g_RT[3] + g_RT[4] - g_RT[17] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT_qss[4]) + (h_RT[3] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[4] -= q;  // HO2
  wdot[17] += q; // CH2CHO
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[125] += dqdci; // dwdot[CH2CHO]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc_qss[4];
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[161] += dqdci; // dwdot[CH2CHO]/d[HO2]
  // d()/d[CH2CHO]
  dqdci = -k_r * sc[3];
  J[615] += dqdci; // dwdot[OH]/d[CH2CHO]
  J[616] -= dqdci; // dwdot[HO2]/d[CH2CHO]
  J[629] += dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1277] += dqdT; // dwdot[CH2CHO]/dT

  // reaction 118: C2H3 + H2O2 <=> C2H4 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc_qss[4];
  k_f = 12100 * exp(0 * tc[0] - 0.50321666580472 * (-596) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (-596) * invT2;
  // reverse
  phi_r = sc[4] * sc[15];
  Kc = exp(-g_RT[4] + g_RT[7] - g_RT[15] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT_qss[4]) + (h_RT[4] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[15] += q; // C2H4
  // d()/d[HO2]
  dqdci = -k_r * sc[15];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[151] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[159] += dqdci; // dwdot[C2H4]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc_qss[4];
  J[256] += dqdci; // dwdot[HO2]/d[H2O2]
  J[259] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[267] += dqdci; // dwdot[C2H4]/d[H2O2]
  // d()/d[C2H4]
  dqdci = -k_r * sc[4];
  J[544] += dqdci; // dwdot[HO2]/d[C2H4]
  J[547] -= dqdci; // dwdot[H2O2]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1267] -= dqdT; // dwdot[H2O2]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT

  // reaction 119: C2H3 + HCO <=> C2H4 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[2] * sc_qss[4];
  k_f = 90330000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  // Remove forward reaction
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // dlnkfdT = 0.0;
  // reverse
  phi_r = sc[12] * sc[15];
  Kc = exp(-g_RT[12] - g_RT[15] + g_RT_qss[2] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[2] + h_RT_qss[4]) + (h_RT[12] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  // Remove forward reaction
  // q = k_f*phi_f - k_r*phi_r;
  q = -k_r * phi_r;
  // Remove forward reaction
  // dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
  dqdT = (-dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // CO
  wdot[15] += q; // C2H4
  // d()/d[CO]
  dqdci = -k_r * sc[15];
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[447] += dqdci; // dwdot[C2H4]/d[CO]
  // d()/d[C2H4]
  dqdci = -k_r * sc[12];
  J[552] += dqdci; // dwdot[CO]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT

  // reaction 120: C2H3 + HCO <=> C2H3CHO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[2] * sc_qss[4];
  k_f = 18000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  // Remove forward reaction
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // dlnkfdT = 0.0;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(-g_RT[20] + g_RT_qss[2] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[2] + h_RT_qss[4]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  // Remove forward reaction
  // q = k_f*phi_f - k_r*phi_r;
  q = -k_r * phi_r;
  // Remove forward reaction
  // dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
  dqdT = (-dkrdT * phi_r);
  // update wdot
  wdot[20] += q; // C2H3CHO
  // d()/d[C2H3CHO]
  dqdci = -k_r;
  J[740] += dqdci; // dwdot[C2H3CHO]/d[C2H3CHO]
  // d()/dT
  J[1280] += dqdT; // dwdot[C2H3CHO]/dT

  // reaction 121: C2H3 + CH3 <=> C2H2 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc_qss[4];
  k_f = 392000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[10] * sc[14];
  Kc = exp(g_RT[9] - g_RT[10] - g_RT[14] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT_qss[4]) + (h_RT[10] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  wdot[14] += q; // C2H2
  // d()/d[CH3]
  dqdci = +k_f * sc_qss[4];
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  J[338] += dqdci; // dwdot[C2H2]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[14];
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  J[374] += dqdci; // dwdot[C2H2]/d[CH4]
  // d()/d[C2H2]
  dqdci = -k_r * sc[10];
  J[513] -= dqdci; // dwdot[CH3]/d[C2H2]
  J[514] += dqdci; // dwdot[CH4]/d[C2H2]
  J[518] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT
  J[1274] += dqdT; // dwdot[C2H2]/dT

  // reaction 122: C2H3 + CH3 <=> H + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc_qss[4];
  k_f = 1.5e+18 * exp(-2.83 * tc[0] - 0.50321666580472 * (18618) * invT);
  dlnkfdT = -2.83 * invT + 0.50321666580472 * (18618) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(-g_RT[1] + g_RT[9] - g_RT[18] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT_qss[4]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH3
  wdot[18] += q; // aC3H5
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[45] -= dqdci; // dwdot[CH3]/d[H]
  J[54] += dqdci; // dwdot[aC3H5]/d[H]
  // d()/d[CH3]
  dqdci = +k_f * sc_qss[4];
  J[325] += dqdci; // dwdot[H]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[342] += dqdci; // dwdot[aC3H5]/d[CH3]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[1];
  J[649] += dqdci; // dwdot[H]/d[aC3H5]
  J[657] -= dqdci; // dwdot[CH3]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT

  // reaction 123: 2 C2H3 <=> C2H2 + C2H4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = pow(sc_qss[4], 2.000000);
  k_f = 960000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  // Remove forward reaction
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[15];
  Kc = exp(-g_RT[14] - g_RT[15] + 2.000000 * g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT_qss[4]) + (h_RT[14] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  // Remove forward reaction
  // q = k_f*phi_f - k_r*phi_r;
  q = -k_r * phi_r;
  // Remove forward reaction
  // dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
  dqdT = (-dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // C2H2
  wdot[15] += q; // C2H4
  // d()/d[C2H2]
  dqdci = -k_r * sc[15];
  J[518] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[519] += dqdci; // dwdot[C2H4]/d[C2H2]
  // d()/d[C2H4]
  dqdci = -k_r * sc[14];
  J[554] += dqdci; // dwdot[C2H2]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1274] += dqdT; // dwdot[C2H2]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT

  // reaction 124: CH2CHO <=> CH3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17];
  k_f = 7.8e+41 * exp(-9.147 * tc[0] - 0.50321666580472 * (46900) * invT);
  dlnkfdT = -9.147 * invT + 0.50321666580472 * (46900) * invT2;
  // reverse
  phi_r = sc[9] * sc[12];
  Kc = refC * exp(-g_RT[9] - g_RT[12] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17]) + (h_RT[9] + h_RT[12]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // CH3
  wdot[12] += q; // CO
  wdot[17] -= q; // CH2CHO
  // d()/d[CH3]
  dqdci = -k_r * sc[12];
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[336] += dqdci; // dwdot[CO]/d[CH3]
  J[341] -= dqdci; // dwdot[CH2CHO]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[9];
  J[441] += dqdci; // dwdot[CH3]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[449] -= dqdci; // dwdot[CH2CHO]/d[CO]
  // d()/d[CH2CHO]
  dqdci = +k_f;
  J[621] += dqdci; // dwdot[CH3]/d[CH2CHO]
  J[624] += dqdci; // dwdot[CO]/d[CH2CHO]
  J[629] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1277] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 125: CH2CHO + H <=> CH3 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 90000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc_qss[2];
  Kc = exp(g_RT[1] - g_RT[9] + g_RT[17] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[9] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[9] += q;  // CH3
  wdot[17] -= q; // CH2CHO
  // d()/d[H]
  dqdci = +k_f * sc[17];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  J[53] -= dqdci; // dwdot[CH2CHO]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc_qss[2];
  J[325] -= dqdci; // dwdot[H]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[341] -= dqdci; // dwdot[CH2CHO]/d[CH3]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[1];
  J[613] -= dqdci; // dwdot[H]/d[CH2CHO]
  J[621] += dqdci; // dwdot[CH3]/d[CH2CHO]
  J[629] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1277] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 126: CH2CHO + O2 <=> CH2O + CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[17];
  k_f = 18000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[11] * sc[12];
  Kc = refC * exp(-g_RT[3] + g_RT[8] - g_RT[11] - g_RT[12] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[8] + h_RT[17]) + (h_RT[3] + h_RT[11] + h_RT[12]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[8] -= q;  // O2
  wdot[11] += q; // CH2O
  wdot[12] += q; // CO
  wdot[17] -= q; // CH2CHO
  // d()/d[OH]
  dqdci = -k_r * sc[11] * sc[12];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[116] -= dqdci; // dwdot[O2]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  J[120] += dqdci; // dwdot[CO]/d[OH]
  J[125] -= dqdci; // dwdot[CH2CHO]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[17];
  J[291] += dqdci; // dwdot[OH]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[299] += dqdci; // dwdot[CH2O]/d[O2]
  J[300] += dqdci; // dwdot[CO]/d[O2]
  J[305] -= dqdci; // dwdot[CH2CHO]/d[O2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[3] * sc[12];
  J[399] += dqdci; // dwdot[OH]/d[CH2O]
  J[404] -= dqdci; // dwdot[O2]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[408] += dqdci; // dwdot[CO]/d[CH2O]
  J[413] -= dqdci; // dwdot[CH2CHO]/d[CH2O]
  // d()/d[CO]
  dqdci = -k_r * sc[3] * sc[11];
  J[435] += dqdci; // dwdot[OH]/d[CO]
  J[440] -= dqdci; // dwdot[O2]/d[CO]
  J[443] += dqdci; // dwdot[CH2O]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[449] -= dqdci; // dwdot[CH2CHO]/d[CO]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[8];
  J[615] += dqdci; // dwdot[OH]/d[CH2CHO]
  J[620] -= dqdci; // dwdot[O2]/d[CH2CHO]
  J[623] += dqdci; // dwdot[CH2O]/d[CH2CHO]
  J[624] += dqdci; // dwdot[CO]/d[CH2CHO]
  J[629] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1277] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 127: C2H4 + H <=> C2H3 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[15];
  k_f = 50.7 * exp(1.9 * tc[0] - 0.50321666580472 * (12950) * invT);
  dlnkfdT = 1.9 * invT + 0.50321666580472 * (12950) * invT2;
  // reverse
  phi_r = sc[5] * sc_qss[4];
  Kc = exp(g_RT[1] - g_RT[5] + g_RT[15] - g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[15]) + (h_RT[5] + h_RT_qss[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[15] -= q; // C2H4
  // d()/d[H]
  dqdci = +k_f * sc[15];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[51] -= dqdci; // dwdot[C2H4]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc_qss[4];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[195] -= dqdci; // dwdot[C2H4]/d[H2]
  // d()/d[C2H4]
  dqdci = +k_f * sc[1];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[545] += dqdci; // dwdot[H2]/d[C2H4]
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 128: C2H4 + O <=> C2H3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[15];
  k_f = 15.1 * exp(1.9 * tc[0] - 0.50321666580472 * (3740) * invT);
  dlnkfdT = 1.9 * invT + 0.50321666580472 * (3740) * invT2;
  // reverse
  phi_r = sc[3] * sc_qss[4];
  Kc = exp(g_RT[2] - g_RT[3] + g_RT[15] - g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[15]) + (h_RT[3] + h_RT_qss[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // OH
  wdot[15] -= q; // C2H4
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[87] -= dqdci; // dwdot[C2H4]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc_qss[4];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[123] -= dqdci; // dwdot[C2H4]/d[OH]
  // d()/d[C2H4]
  dqdci = +k_f * sc[2];
  J[542] -= dqdci; // dwdot[O]/d[C2H4]
  J[543] += dqdci; // dwdot[OH]/d[C2H4]
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 129: C2H4 + O <=> CH3 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[15];
  k_f = 19.2 * exp(1.83 * tc[0] - 0.50321666580472 * (220) * invT);
  dlnkfdT = 1.83 * invT + 0.50321666580472 * (220) * invT2;
  // reverse
  phi_r = sc[9] * sc_qss[2];
  Kc = exp(g_RT[2] - g_RT[9] + g_RT[15] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[15]) + (h_RT[9] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[9] += q;  // CH3
  wdot[15] -= q; // C2H4
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[81] += dqdci; // dwdot[CH3]/d[O]
  J[87] -= dqdci; // dwdot[C2H4]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc_qss[2];
  J[326] -= dqdci; // dwdot[O]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[339] -= dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[C2H4]
  dqdci = +k_f * sc[2];
  J[542] -= dqdci; // dwdot[O]/d[C2H4]
  J[549] += dqdci; // dwdot[CH3]/d[C2H4]
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 130: C2H4 + O <=> CH2 + CH2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[15];
  k_f = 0.384 * exp(1.83 * tc[0] - 0.50321666580472 * (220) * invT);
  dlnkfdT = 1.83 * invT + 0.50321666580472 * (220) * invT2;
  // reverse
  phi_r = sc[11] * sc_qss[0];
  Kc = exp(g_RT[2] - g_RT[11] + g_RT[15] - g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[15]) + (h_RT[11] + h_RT_qss[0]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[11] += q; // CH2O
  wdot[15] -= q; // C2H4
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[83] += dqdci; // dwdot[CH2O]/d[O]
  J[87] -= dqdci; // dwdot[C2H4]/d[O]
  // d()/d[CH2O]
  dqdci = -k_r * sc_qss[0];
  J[398] -= dqdci; // dwdot[O]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[411] -= dqdci; // dwdot[C2H4]/d[CH2O]
  // d()/d[C2H4]
  dqdci = +k_f * sc[2];
  J[542] -= dqdci; // dwdot[O]/d[C2H4]
  J[551] += dqdci; // dwdot[CH2O]/d[C2H4]
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 131: C2H4 + OH <=> C2H3 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 3.6 * exp(2 * tc[0] - 0.50321666580472 * (2500) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (2500) * invT2;
  // reverse
  phi_r = sc[6] * sc_qss[4];
  Kc = exp(g_RT[3] - g_RT[6] + g_RT[15] - g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[15]) + (h_RT[6] + h_RT_qss[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[15] -= q; // C2H4
  // d()/d[OH]
  dqdci = +k_f * sc[15];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[123] -= dqdci; // dwdot[C2H4]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc_qss[4];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[231] -= dqdci; // dwdot[C2H4]/d[H2O]
  // d()/d[C2H4]
  dqdci = +k_f * sc[3];
  J[543] -= dqdci; // dwdot[OH]/d[C2H4]
  J[546] += dqdci; // dwdot[H2O]/d[C2H4]
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 132: C2H4 + HCO <=> C2H5 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[2];
  k_f = 10 * exp(2 * tc[0] - 0.50321666580472 * (8000) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (8000) * invT2;
  // reverse
  phi_r = sc[12] * sc_qss[5];
  Kc = exp(-g_RT[12] + g_RT[15] + g_RT_qss[2] - g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[2]) + (h_RT[12] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // CO
  wdot[15] -= q; // C2H4
  // d()/d[CO]
  dqdci = -k_r * sc_qss[5];
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[447] -= dqdci; // dwdot[C2H4]/d[CO]
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[2];
  J[552] += dqdci; // dwdot[CO]/d[C2H4]
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 133: C2H4 + CH2 <=> H + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[0];
  k_f = 20000000 * exp(0 * tc[0] - 0.50321666580472 * (6000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (6000) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(-g_RT[1] + g_RT[15] - g_RT[18] + g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[0]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[15] -= q; // C2H4
  wdot[18] += q; // aC3H5
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[51] -= dqdci; // dwdot[C2H4]/d[H]
  J[54] += dqdci; // dwdot[aC3H5]/d[H]
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[0];
  J[541] += dqdci; // dwdot[H]/d[C2H4]
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[558] += dqdci; // dwdot[aC3H5]/d[C2H4]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[1];
  J[649] += dqdci; // dwdot[H]/d[aC3H5]
  J[663] -= dqdci; // dwdot[C2H4]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT

  // reaction 134: C2H4 + CH2* <=> H + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[1];
  k_f = 50000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(-g_RT[1] + g_RT[15] - g_RT[18] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[1]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[15] -= q; // C2H4
  wdot[18] += q; // aC3H5
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[51] -= dqdci; // dwdot[C2H4]/d[H]
  J[54] += dqdci; // dwdot[aC3H5]/d[H]
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[1];
  J[541] += dqdci; // dwdot[H]/d[C2H4]
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[558] += dqdci; // dwdot[aC3H5]/d[C2H4]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[1];
  J[649] += dqdci; // dwdot[H]/d[aC3H5]
  J[663] -= dqdci; // dwdot[C2H4]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT

  // reaction 135: C2H4 + CH3 <=> C2H3 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[15];
  k_f = 0.227 * exp(2 * tc[0] - 0.50321666580472 * (9200) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (9200) * invT2;
  // reverse
  phi_r = sc[10] * sc_qss[4];
  Kc = exp(g_RT[9] - g_RT[10] + g_RT[15] - g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[15]) + (h_RT[10] + h_RT_qss[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  wdot[15] -= q; // C2H4
  // d()/d[CH3]
  dqdci = +k_f * sc[15];
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  J[339] -= dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc_qss[4];
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  J[375] -= dqdci; // dwdot[C2H4]/d[CH4]
  // d()/d[C2H4]
  dqdci = +k_f * sc[9];
  J[549] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[550] += dqdci; // dwdot[CH4]/d[C2H4]
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 136: nC3H7 <=> C2H4 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[6];
  k_f = 96000000000000 * exp(0 * tc[0] - 0.50321666580472 * (31022.94) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (31022.94) * invT2;
  // reverse
  phi_r = sc[9] * sc[15];
  Kc = refC * exp(-g_RT[9] - g_RT[15] + g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[6]) + (h_RT[9] + h_RT[15]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // CH3
  wdot[15] += q; // C2H4
  // d()/d[CH3]
  dqdci = -k_r * sc[15];
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[339] += dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[9];
  J[549] += dqdci; // dwdot[CH3]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT

  // reaction 137: C2H4 + O2 <=> C2H3 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[15];
  k_f = 42200000 * exp(0 * tc[0] - 0.50321666580472 * (60800) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (60800) * invT2;
  // reverse
  phi_r = sc[4] * sc_qss[4];
  Kc = exp(-g_RT[4] + g_RT[8] + g_RT[15] - g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[15]) + (h_RT[4] + h_RT_qss[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[15] -= q; // C2H4
  // d()/d[HO2]
  dqdci = -k_r * sc_qss[4];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  J[159] -= dqdci; // dwdot[C2H4]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[15];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[303] -= dqdci; // dwdot[C2H4]/d[O2]
  // d()/d[C2H4]
  dqdci = +k_f * sc[8];
  J[544] += dqdci; // dwdot[HO2]/d[C2H4]
  J[548] -= dqdci; // dwdot[O2]/d[C2H4]
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 138: C2H3 + C2H4 <=> C4H7
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[4];
  k_f = 7.93e+32 * exp(-8.47 * tc[0] - 0.50321666580472 * (14220) * invT);
  dlnkfdT = -8.47 * invT + 0.50321666580472 * (14220) * invT2;
  // reverse
  phi_r = sc[21];
  Kc = refCinv * exp(g_RT[15] - g_RT[21] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[4]) + (h_RT[21]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] -= q; // C2H4
  wdot[21] += q; // C4H7
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[4];
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[561] += dqdci; // dwdot[C4H7]/d[C2H4]
  // d()/d[C4H7]
  dqdci = -k_r;
  J[771] -= dqdci; // dwdot[C2H4]/d[C4H7]
  J[777] += dqdci; // dwdot[C4H7]/d[C4H7]
  // d()/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT
  J[1281] += dqdT; // dwdot[C4H7]/dT

  // reaction 139: C2H5 + H <=> C2H4 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc_qss[5];
  k_f = 2000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[5] * sc[15];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[15] + g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[5]) + (h_RT[5] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[15] += q; // C2H4
  // d()/d[H]
  dqdci = +k_f * sc_qss[5];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[15];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[195] += dqdci; // dwdot[C2H4]/d[H2]
  // d()/d[C2H4]
  dqdci = -k_r * sc[5];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[545] += dqdci; // dwdot[H2]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT

  // reaction 140: C2H5 + O <=> CH2O + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc_qss[5];
  k_f = 16040000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[11];
  Kc = exp(g_RT[2] - g_RT[9] - g_RT[11] + g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT_qss[5]) + (h_RT[9] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[9] += q;  // CH3
  wdot[11] += q; // CH2O
  // d()/d[O]
  dqdci = +k_f * sc_qss[5];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[81] += dqdci; // dwdot[CH3]/d[O]
  J[83] += dqdci; // dwdot[CH2O]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc[11];
  J[326] -= dqdci; // dwdot[O]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[335] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[9];
  J[398] -= dqdci; // dwdot[O]/d[CH2O]
  J[405] += dqdci; // dwdot[CH3]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 141: C2H5 + O2 <=> C2H4 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[5];
  k_f = 20000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[4] * sc[15];
  Kc = exp(-g_RT[4] + g_RT[8] - g_RT[15] + g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[5]) + (h_RT[4] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[15] += q; // C2H4
  // d()/d[HO2]
  dqdci = -k_r * sc[15];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  J[159] += dqdci; // dwdot[C2H4]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[5];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[303] += dqdci; // dwdot[C2H4]/d[O2]
  // d()/d[C2H4]
  dqdci = -k_r * sc[4];
  J[544] += dqdci; // dwdot[HO2]/d[C2H4]
  J[548] -= dqdci; // dwdot[O2]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT

  // reaction 142: C2H5 + HO2 <=> C2H6 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc_qss[5];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[8] * sc[16];
  Kc = exp(g_RT[4] - g_RT[8] - g_RT[16] + g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT_qss[5]) + (h_RT[8] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[16] += q; // C2H6
  // d()/d[HO2]
  dqdci = +k_f * sc_qss[5];
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[152] += dqdci; // dwdot[O2]/d[HO2]
  J[160] += dqdci; // dwdot[C2H6]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[16];
  J[292] -= dqdci; // dwdot[HO2]/d[O2]
  J[296] += dqdci; // dwdot[O2]/d[O2]
  J[304] += dqdci; // dwdot[C2H6]/d[O2]
  // d()/d[C2H6]
  dqdci = -k_r * sc[8];
  J[580] -= dqdci; // dwdot[HO2]/d[C2H6]
  J[584] += dqdci; // dwdot[O2]/d[C2H6]
  J[592] += dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1268] += dqdT; // dwdot[O2]/dT
  J[1276] += dqdT; // dwdot[C2H6]/dT

  // reaction 143: C2H5 + HO2 <=> C2H4 + H2O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc_qss[5];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[7] * sc[15];
  Kc = exp(g_RT[4] - g_RT[7] - g_RT[15] + g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT_qss[5]) + (h_RT[7] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[15] += q; // C2H4
  // d()/d[HO2]
  dqdci = +k_f * sc_qss[5];
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[151] += dqdci; // dwdot[H2O2]/d[HO2]
  J[159] += dqdci; // dwdot[C2H4]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[15];
  J[256] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[259] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[267] += dqdci; // dwdot[C2H4]/d[H2O2]
  // d()/d[C2H4]
  dqdci = -k_r * sc[7];
  J[544] -= dqdci; // dwdot[HO2]/d[C2H4]
  J[547] += dqdci; // dwdot[H2O2]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1267] += dqdT; // dwdot[H2O2]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT

  // reaction 144: C2H5 + HO2 <=> CH2O + CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc_qss[5];
  k_f = 24000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[9] * sc[11];
  Kc = refC * exp(-g_RT[3] + g_RT[4] - g_RT[9] - g_RT[11] + g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT_qss[5]) + (h_RT[3] + h_RT[9] + h_RT[11]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[4] -= q;  // HO2
  wdot[9] += q;  // CH3
  wdot[11] += q; // CH2O
  // d()/d[OH]
  dqdci = -k_r * sc[9] * sc[11];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[117] += dqdci; // dwdot[CH3]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc_qss[5];
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[153] += dqdci; // dwdot[CH3]/d[HO2]
  J[155] += dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[CH3]
  dqdci = -k_r * sc[3] * sc[11];
  J[327] += dqdci; // dwdot[OH]/d[CH3]
  J[328] -= dqdci; // dwdot[HO2]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[335] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[3] * sc[9];
  J[399] += dqdci; // dwdot[OH]/d[CH2O]
  J[400] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[405] += dqdci; // dwdot[CH3]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 145: C2H5 + H2O2 <=> C2H6 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc_qss[5];
  k_f = 8700 * exp(0 * tc[0] - 0.50321666580472 * (974) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (974) * invT2;
  // reverse
  phi_r = sc[4] * sc[16];
  Kc = exp(-g_RT[4] + g_RT[7] - g_RT[16] + g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT_qss[5]) + (h_RT[4] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[16] += q; // C2H6
  // d()/d[HO2]
  dqdci = -k_r * sc[16];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[151] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[160] += dqdci; // dwdot[C2H6]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc_qss[5];
  J[256] += dqdci; // dwdot[HO2]/d[H2O2]
  J[259] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[268] += dqdci; // dwdot[C2H6]/d[H2O2]
  // d()/d[C2H6]
  dqdci = -k_r * sc[4];
  J[580] += dqdci; // dwdot[HO2]/d[C2H6]
  J[583] -= dqdci; // dwdot[H2O2]/d[C2H6]
  J[592] += dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1267] -= dqdT; // dwdot[H2O2]/dT
  J[1276] += dqdT; // dwdot[C2H6]/dT

  // reaction 146: C2H3 + C2H5 <=> CH3 + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[4] * sc_qss[5];
  k_f = 3.9e+26 * exp(-5.22 * tc[0] - 0.50321666580472 * (19747) * invT);
  // Remove forward reaction
  dlnkfdT = -5.22 * invT + 0.50321666580472 * (19747) * invT2;
  // dlnkfdT = 0.0;
  // reverse
  phi_r = sc[9] * sc[18];
  Kc = exp(-g_RT[9] - g_RT[18] + g_RT_qss[4] + g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[4] + h_RT_qss[5]) + (h_RT[9] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  // Remove forward reaction
  // q = k_f*phi_f - k_r*phi_r;
  q = -k_r * phi_r;
  // Remove forward reaction
  // dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
  dqdT = (-dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // CH3
  wdot[18] += q; // aC3H5
  // d()/d[CH3]
  dqdci = -k_r * sc[18];
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[342] += dqdci; // dwdot[aC3H5]/d[CH3]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[9];
  J[657] += dqdci; // dwdot[CH3]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT

  // reaction 147: C2H6 + H <=> C2H5 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[16];
  k_f = 115 * exp(1.9 * tc[0] - 0.50321666580472 * (7530) * invT);
  dlnkfdT = 1.9 * invT + 0.50321666580472 * (7530) * invT2;
  // reverse
  phi_r = sc[5] * sc_qss[5];
  Kc = exp(g_RT[1] - g_RT[5] + g_RT[16] - g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[16]) + (h_RT[5] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[16] -= q; // C2H6
  // d()/d[H]
  dqdci = +k_f * sc[16];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[C2H6]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc_qss[5];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[196] -= dqdci; // dwdot[C2H6]/d[H2]
  // d()/d[C2H6]
  dqdci = +k_f * sc[1];
  J[577] -= dqdci; // dwdot[H]/d[C2H6]
  J[581] += dqdci; // dwdot[H2]/d[C2H6]
  J[592] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1276] -= dqdT; // dwdot[C2H6]/dT

  // reaction 148: C2H6 + O <=> C2H5 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[16];
  k_f = 89.8 * exp(1.92 * tc[0] - 0.50321666580472 * (5690) * invT);
  dlnkfdT = 1.92 * invT + 0.50321666580472 * (5690) * invT2;
  // reverse
  phi_r = sc[3] * sc_qss[5];
  Kc = exp(g_RT[2] - g_RT[3] + g_RT[16] - g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[3] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // OH
  wdot[16] -= q; // C2H6
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[88] -= dqdci; // dwdot[C2H6]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc_qss[5];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[124] -= dqdci; // dwdot[C2H6]/d[OH]
  // d()/d[C2H6]
  dqdci = +k_f * sc[2];
  J[578] -= dqdci; // dwdot[O]/d[C2H6]
  J[579] += dqdci; // dwdot[OH]/d[C2H6]
  J[592] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1276] -= dqdT; // dwdot[C2H6]/dT

  // reaction 149: C2H6 + OH <=> C2H5 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[16];
  k_f = 3.54 * exp(2.12 * tc[0] - 0.50321666580472 * (870) * invT);
  dlnkfdT = 2.12 * invT + 0.50321666580472 * (870) * invT2;
  // reverse
  phi_r = sc[6] * sc_qss[5];
  Kc = exp(g_RT[3] - g_RT[6] + g_RT[16] - g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[16]) + (h_RT[6] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[16] -= q; // C2H6
  // d()/d[OH]
  dqdci = +k_f * sc[16];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[124] -= dqdci; // dwdot[C2H6]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc_qss[5];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[232] -= dqdci; // dwdot[C2H6]/d[H2O]
  // d()/d[C2H6]
  dqdci = +k_f * sc[3];
  J[579] -= dqdci; // dwdot[OH]/d[C2H6]
  J[582] += dqdci; // dwdot[H2O]/d[C2H6]
  J[592] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1276] -= dqdT; // dwdot[C2H6]/dT

  // reaction 150: C2H6 + CH2* <=> C2H5 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc_qss[1];
  k_f = 40000000 * exp(0 * tc[0] - 0.50321666580472 * (-550) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (-550) * invT2;
  // reverse
  phi_r = sc[9] * sc_qss[5];
  Kc = exp(-g_RT[9] + g_RT[16] + g_RT_qss[1] - g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT_qss[1]) + (h_RT[9] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // CH3
  wdot[16] -= q; // C2H6
  // d()/d[CH3]
  dqdci = -k_r * sc_qss[5];
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[340] -= dqdci; // dwdot[C2H6]/d[CH3]
  // d()/d[C2H6]
  dqdci = +k_f * sc_qss[1];
  J[585] += dqdci; // dwdot[CH3]/d[C2H6]
  J[592] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1276] -= dqdT; // dwdot[C2H6]/dT

  // reaction 151: C2H6 + CH3 <=> C2H5 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[16];
  k_f = 6.14 * exp(1.74 * tc[0] - 0.50321666580472 * (10450) * invT);
  dlnkfdT = 1.74 * invT + 0.50321666580472 * (10450) * invT2;
  // reverse
  phi_r = sc[10] * sc_qss[5];
  Kc = exp(g_RT[9] - g_RT[10] + g_RT[16] - g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[16]) + (h_RT[10] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  wdot[16] -= q; // C2H6
  // d()/d[CH3]
  dqdci = +k_f * sc[16];
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  J[340] -= dqdci; // dwdot[C2H6]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc_qss[5];
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  J[376] -= dqdci; // dwdot[C2H6]/d[CH4]
  // d()/d[C2H6]
  dqdci = +k_f * sc[9];
  J[585] -= dqdci; // dwdot[CH3]/d[C2H6]
  J[586] += dqdci; // dwdot[CH4]/d[C2H6]
  J[592] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT
  J[1276] -= dqdT; // dwdot[C2H6]/dT

  // reaction 152: O + aC3H5 <=> C2H3CHO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[18];
  k_f = 60000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[20];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[18]) + (h_RT[1] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[18] -= q; // aC3H5
  wdot[20] += q; // C2H3CHO
  // d()/d[H]
  dqdci = -k_r * sc[20];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[38] -= dqdci; // dwdot[O]/d[H]
  J[54] -= dqdci; // dwdot[aC3H5]/d[H]
  J[56] += dqdci; // dwdot[C2H3CHO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[18];
  J[73] += dqdci; // dwdot[H]/d[O]
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[90] -= dqdci; // dwdot[aC3H5]/d[O]
  J[92] += dqdci; // dwdot[C2H3CHO]/d[O]
  // d()/d[aC3H5]
  dqdci = +k_f * sc[2];
  J[649] += dqdci; // dwdot[H]/d[aC3H5]
  J[650] -= dqdci; // dwdot[O]/d[aC3H5]
  J[666] -= dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[668] += dqdci; // dwdot[C2H3CHO]/d[aC3H5]
  // d()/d[C2H3CHO]
  dqdci = -k_r * sc[1];
  J[721] += dqdci; // dwdot[H]/d[C2H3CHO]
  J[722] -= dqdci; // dwdot[O]/d[C2H3CHO]
  J[738] -= dqdci; // dwdot[aC3H5]/d[C2H3CHO]
  J[740] += dqdci; // dwdot[C2H3CHO]/d[C2H3CHO]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1278] -= dqdT; // dwdot[aC3H5]/dT
  J[1280] += dqdT; // dwdot[C2H3CHO]/dT

  // reaction 153: OH + aC3H5 <=> C2H3CHO + 2 H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[18];
  k_f = 4.2e+26 * exp(-5.16 * tc[0] - 0.50321666580472 * (30126) * invT);
  dlnkfdT = -5.16 * invT + 0.50321666580472 * (30126) * invT2;
  // reverse
  phi_r = (sc[1] * sc[1]) * sc[20];
  Kc = refC * exp(-2.000000 * g_RT[1] + g_RT[3] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[3] + h_RT[18]) + (2.000000 * h_RT[1] + h_RT[20]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += 2 * q; // H
  wdot[3] -= q;     // OH
  wdot[18] -= q;    // aC3H5
  wdot[20] += q;    // C2H3CHO
  // d()/d[H]
  dqdci = -k_r * 2.000000 * sc[1] * sc[20];
  J[37] += 2 * dqdci; // dwdot[H]/d[H]
  J[39] -= dqdci;     // dwdot[OH]/d[H]
  J[54] -= dqdci;     // dwdot[aC3H5]/d[H]
  J[56] += dqdci;     // dwdot[C2H3CHO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[18];
  J[109] += 2 * dqdci; // dwdot[H]/d[OH]
  J[111] -= dqdci;     // dwdot[OH]/d[OH]
  J[126] -= dqdci;     // dwdot[aC3H5]/d[OH]
  J[128] += dqdci;     // dwdot[C2H3CHO]/d[OH]
  // d()/d[aC3H5]
  dqdci = +k_f * sc[3];
  J[649] += 2 * dqdci; // dwdot[H]/d[aC3H5]
  J[651] -= dqdci;     // dwdot[OH]/d[aC3H5]
  J[666] -= dqdci;     // dwdot[aC3H5]/d[aC3H5]
  J[668] += dqdci;     // dwdot[C2H3CHO]/d[aC3H5]
  // d()/d[C2H3CHO]
  dqdci = -k_r * pow(sc[1], 2.000000);
  J[721] += 2 * dqdci; // dwdot[H]/d[C2H3CHO]
  J[723] -= dqdci;     // dwdot[OH]/d[C2H3CHO]
  J[738] -= dqdci;     // dwdot[aC3H5]/d[C2H3CHO]
  J[740] += dqdci;     // dwdot[C2H3CHO]/d[C2H3CHO]
  // d()/dT
  J[1261] += 2 * dqdT; // dwdot[H]/dT
  J[1263] -= dqdT;     // dwdot[OH]/dT
  J[1278] -= dqdT;     // dwdot[aC3H5]/dT
  J[1280] += dqdT;     // dwdot[C2H3CHO]/dT

  // reaction 154: O2 + aC3H5 <=> C2H3CHO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[18];
  k_f = 18200000 * exp(-0.41 * tc[0] - 0.50321666580472 * (22859) * invT);
  dlnkfdT = -0.41 * invT + 0.50321666580472 * (22859) * invT2;
  // reverse
  phi_r = sc[3] * sc[20];
  Kc = exp(-g_RT[3] + g_RT[8] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[18]) + (h_RT[3] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[8] -= q;  // O2
  wdot[18] -= q; // aC3H5
  wdot[20] += q; // C2H3CHO
  // d()/d[OH]
  dqdci = -k_r * sc[20];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[116] -= dqdci; // dwdot[O2]/d[OH]
  J[126] -= dqdci; // dwdot[aC3H5]/d[OH]
  J[128] += dqdci; // dwdot[C2H3CHO]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[18];
  J[291] += dqdci; // dwdot[OH]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[306] -= dqdci; // dwdot[aC3H5]/d[O2]
  J[308] += dqdci; // dwdot[C2H3CHO]/d[O2]
  // d()/d[aC3H5]
  dqdci = +k_f * sc[8];
  J[651] += dqdci; // dwdot[OH]/d[aC3H5]
  J[656] -= dqdci; // dwdot[O2]/d[aC3H5]
  J[666] -= dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[668] += dqdci; // dwdot[C2H3CHO]/d[aC3H5]
  // d()/d[C2H3CHO]
  dqdci = -k_r * sc[3];
  J[723] += dqdci; // dwdot[OH]/d[C2H3CHO]
  J[728] -= dqdci; // dwdot[O2]/d[C2H3CHO]
  J[738] -= dqdci; // dwdot[aC3H5]/d[C2H3CHO]
  J[740] += dqdci; // dwdot[C2H3CHO]/d[C2H3CHO]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1278] -= dqdT; // dwdot[aC3H5]/dT
  J[1280] += dqdT; // dwdot[C2H3CHO]/dT

  // reaction 155: HO2 + aC3H5 <=> C3H6 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 2660000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[8] * sc[19];
  Kc = exp(g_RT[4] - g_RT[8] + g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[8] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[18] -= q; // aC3H5
  wdot[19] += q; // C3H6
  // d()/d[HO2]
  dqdci = +k_f * sc[18];
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[152] += dqdci; // dwdot[O2]/d[HO2]
  J[162] -= dqdci; // dwdot[aC3H5]/d[HO2]
  J[163] += dqdci; // dwdot[C3H6]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[19];
  J[292] -= dqdci; // dwdot[HO2]/d[O2]
  J[296] += dqdci; // dwdot[O2]/d[O2]
  J[306] -= dqdci; // dwdot[aC3H5]/d[O2]
  J[307] += dqdci; // dwdot[C3H6]/d[O2]
  // d()/d[aC3H5]
  dqdci = +k_f * sc[4];
  J[652] -= dqdci; // dwdot[HO2]/d[aC3H5]
  J[656] += dqdci; // dwdot[O2]/d[aC3H5]
  J[666] -= dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[667] += dqdci; // dwdot[C3H6]/d[aC3H5]
  // d()/d[C3H6]
  dqdci = -k_r * sc[8];
  J[688] -= dqdci; // dwdot[HO2]/d[C3H6]
  J[692] += dqdci; // dwdot[O2]/d[C3H6]
  J[702] -= dqdci; // dwdot[aC3H5]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1268] += dqdT; // dwdot[O2]/dT
  J[1278] -= dqdT; // dwdot[aC3H5]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT

  // reaction 156: HO2 + aC3H5 <=> C2H3 + CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 6600000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[11] * sc_qss[4];
  Kc = refC * exp(-g_RT[3] + g_RT[4] - g_RT[11] + g_RT[18] - g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[3] + h_RT[11] + h_RT_qss[4]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[4] -= q;  // HO2
  wdot[11] += q; // CH2O
  wdot[18] -= q; // aC3H5
  // d()/d[OH]
  dqdci = -k_r * sc[11] * sc_qss[4];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  J[126] -= dqdci; // dwdot[aC3H5]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[18];
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[155] += dqdci; // dwdot[CH2O]/d[HO2]
  J[162] -= dqdci; // dwdot[aC3H5]/d[HO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[3] * sc_qss[4];
  J[399] += dqdci; // dwdot[OH]/d[CH2O]
  J[400] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[414] -= dqdci; // dwdot[aC3H5]/d[CH2O]
  // d()/d[aC3H5]
  dqdci = +k_f * sc[4];
  J[651] += dqdci; // dwdot[OH]/d[aC3H5]
  J[652] -= dqdci; // dwdot[HO2]/d[aC3H5]
  J[659] += dqdci; // dwdot[CH2O]/d[aC3H5]
  J[666] -= dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT
  J[1278] -= dqdT; // dwdot[aC3H5]/dT

  // reaction 157: HCO + aC3H5 <=> C3H6 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc_qss[2];
  k_f = 60000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[12] * sc[19];
  Kc = exp(-g_RT[12] + g_RT[18] - g_RT[19] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT_qss[2]) + (h_RT[12] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // CO
  wdot[18] -= q; // aC3H5
  wdot[19] += q; // C3H6
  // d()/d[CO]
  dqdci = -k_r * sc[19];
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[450] -= dqdci; // dwdot[aC3H5]/d[CO]
  J[451] += dqdci; // dwdot[C3H6]/d[CO]
  // d()/d[aC3H5]
  dqdci = +k_f * sc_qss[2];
  J[660] += dqdci; // dwdot[CO]/d[aC3H5]
  J[666] -= dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[667] += dqdci; // dwdot[C3H6]/d[aC3H5]
  // d()/d[C3H6]
  dqdci = -k_r * sc[12];
  J[696] += dqdci; // dwdot[CO]/d[C3H6]
  J[702] -= dqdci; // dwdot[aC3H5]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1278] -= dqdT; // dwdot[aC3H5]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT

  // reaction 158: C3H6 + H <=> C2H4 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 8e+15 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[9] * sc[15];
  Kc = exp(g_RT[1] - g_RT[9] - g_RT[15] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[9] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[9] += q;  // CH3
  wdot[15] += q; // C2H4
  wdot[19] -= q; // C3H6
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  J[55] -= dqdci; // dwdot[C3H6]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[15];
  J[325] -= dqdci; // dwdot[H]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[339] += dqdci; // dwdot[C2H4]/d[CH3]
  J[343] -= dqdci; // dwdot[C3H6]/d[CH3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[9];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[549] += dqdci; // dwdot[CH3]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[559] -= dqdci; // dwdot[C3H6]/d[C2H4]
  // d()/d[C3H6]
  dqdci = +k_f * sc[1];
  J[685] -= dqdci; // dwdot[H]/d[C3H6]
  J[693] += dqdci; // dwdot[CH3]/d[C3H6]
  J[699] += dqdci; // dwdot[C2H4]/d[C3H6]
  J[703] -= dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT
  J[1279] -= dqdT; // dwdot[C3H6]/dT

  // reaction 159: C3H6 + H <=> H2 + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 0.173 * exp(2.5 * tc[0] - 0.50321666580472 * (2490) * invT);
  dlnkfdT = 2.5 * invT + 0.50321666580472 * (2490) * invT2;
  // reverse
  phi_r = sc[5] * sc[18];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[5] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[18] += q; // aC3H5
  wdot[19] -= q; // C3H6
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[54] += dqdci; // dwdot[aC3H5]/d[H]
  J[55] -= dqdci; // dwdot[C3H6]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[18];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[198] += dqdci; // dwdot[aC3H5]/d[H2]
  J[199] -= dqdci; // dwdot[C3H6]/d[H2]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[5];
  J[649] -= dqdci; // dwdot[H]/d[aC3H5]
  J[653] += dqdci; // dwdot[H2]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[667] -= dqdci; // dwdot[C3H6]/d[aC3H5]
  // d()/d[C3H6]
  dqdci = +k_f * sc[1];
  J[685] -= dqdci; // dwdot[H]/d[C3H6]
  J[689] += dqdci; // dwdot[H2]/d[C3H6]
  J[702] += dqdci; // dwdot[aC3H5]/d[C3H6]
  J[703] -= dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT
  J[1279] -= dqdT; // dwdot[C3H6]/dT

  // reaction 160: C3H6 + O <=> C2H3CHO + 2 H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 40 * exp(1.65 * tc[0] - 0.50321666580472 * (327) * invT);
  dlnkfdT = 1.65 * invT + 0.50321666580472 * (327) * invT2;
  // reverse
  phi_r = (sc[1] * sc[1]) * sc[20];
  Kc = refC * exp(-2.000000 * g_RT[1] + g_RT[2] + g_RT[19] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[2] + h_RT[19]) + (2.000000 * h_RT[1] + h_RT[20]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += 2 * q; // H
  wdot[2] -= q;     // O
  wdot[19] -= q;    // C3H6
  wdot[20] += q;    // C2H3CHO
  // d()/d[H]
  dqdci = -k_r * 2.000000 * sc[1] * sc[20];
  J[37] += 2 * dqdci; // dwdot[H]/d[H]
  J[38] -= dqdci;     // dwdot[O]/d[H]
  J[55] -= dqdci;     // dwdot[C3H6]/d[H]
  J[56] += dqdci;     // dwdot[C2H3CHO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[73] += 2 * dqdci; // dwdot[H]/d[O]
  J[74] -= dqdci;     // dwdot[O]/d[O]
  J[91] -= dqdci;     // dwdot[C3H6]/d[O]
  J[92] += dqdci;     // dwdot[C2H3CHO]/d[O]
  // d()/d[C3H6]
  dqdci = +k_f * sc[2];
  J[685] += 2 * dqdci; // dwdot[H]/d[C3H6]
  J[686] -= dqdci;     // dwdot[O]/d[C3H6]
  J[703] -= dqdci;     // dwdot[C3H6]/d[C3H6]
  J[704] += dqdci;     // dwdot[C2H3CHO]/d[C3H6]
  // d()/d[C2H3CHO]
  dqdci = -k_r * pow(sc[1], 2.000000);
  J[721] += 2 * dqdci; // dwdot[H]/d[C2H3CHO]
  J[722] -= dqdci;     // dwdot[O]/d[C2H3CHO]
  J[739] -= dqdci;     // dwdot[C3H6]/d[C2H3CHO]
  J[740] += dqdci;     // dwdot[C2H3CHO]/d[C2H3CHO]
  // d()/dT
  J[1261] += 2 * dqdT; // dwdot[H]/dT
  J[1262] -= dqdT;     // dwdot[O]/dT
  J[1279] -= dqdT;     // dwdot[C3H6]/dT
  J[1280] += dqdT;     // dwdot[C2H3CHO]/dT

  // reaction 161: C3H6 + O => C2H5 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 35 * exp(1.65 * tc[0] - 0.50321666580472 * (-972) * invT);
  dlnkfdT = 1.65 * invT + 0.50321666580472 * (-972) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[2] -= q;  // O
  wdot[19] -= q; // C3H6
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[91] -= dqdci; // dwdot[C3H6]/d[O]
  // d()/d[C3H6]
  dqdci = +k_f * sc[2];
  J[686] -= dqdci; // dwdot[O]/d[C3H6]
  J[703] -= dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1279] -= dqdT; // dwdot[C3H6]/dT

  // reaction 162: C3H6 + O <=> OH + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 180000 * exp(0.7 * tc[0] - 0.50321666580472 * (5880) * invT);
  dlnkfdT = 0.7 * invT + 0.50321666580472 * (5880) * invT2;
  // reverse
  phi_r = sc[3] * sc[18];
  Kc = exp(g_RT[2] - g_RT[3] - g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[19]) + (h_RT[3] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // OH
  wdot[18] += q; // aC3H5
  wdot[19] -= q; // C3H6
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[90] += dqdci; // dwdot[aC3H5]/d[O]
  J[91] -= dqdci; // dwdot[C3H6]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[126] += dqdci; // dwdot[aC3H5]/d[OH]
  J[127] -= dqdci; // dwdot[C3H6]/d[OH]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[3];
  J[650] -= dqdci; // dwdot[O]/d[aC3H5]
  J[651] += dqdci; // dwdot[OH]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[667] -= dqdci; // dwdot[C3H6]/d[aC3H5]
  // d()/d[C3H6]
  dqdci = +k_f * sc[2];
  J[686] -= dqdci; // dwdot[O]/d[C3H6]
  J[687] += dqdci; // dwdot[OH]/d[C3H6]
  J[702] += dqdci; // dwdot[aC3H5]/d[C3H6]
  J[703] -= dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT
  J[1279] -= dqdT; // dwdot[C3H6]/dT

  // reaction 163: C3H6 + OH <=> H2O + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[19];
  k_f = 3.1 * exp(2 * tc[0] - 0.50321666580472 * (-298) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (-298) * invT2;
  // reverse
  phi_r = sc[6] * sc[18];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[19]) + (h_RT[6] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[18] += q; // aC3H5
  wdot[19] -= q; // C3H6
  // d()/d[OH]
  dqdci = +k_f * sc[19];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[126] += dqdci; // dwdot[aC3H5]/d[OH]
  J[127] -= dqdci; // dwdot[C3H6]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[18];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[234] += dqdci; // dwdot[aC3H5]/d[H2O]
  J[235] -= dqdci; // dwdot[C3H6]/d[H2O]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[6];
  J[651] -= dqdci; // dwdot[OH]/d[aC3H5]
  J[654] += dqdci; // dwdot[H2O]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[667] -= dqdci; // dwdot[C3H6]/d[aC3H5]
  // d()/d[C3H6]
  dqdci = +k_f * sc[3];
  J[687] -= dqdci; // dwdot[OH]/d[C3H6]
  J[690] += dqdci; // dwdot[H2O]/d[C3H6]
  J[702] += dqdci; // dwdot[aC3H5]/d[C3H6]
  J[703] -= dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT
  J[1279] -= dqdT; // dwdot[C3H6]/dT

  // reaction 164: C3H6 + HO2 <=> H2O2 + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[19];
  k_f = 0.0096 * exp(2.6 * tc[0] - 0.50321666580472 * (13910) * invT);
  dlnkfdT = 2.6 * invT + 0.50321666580472 * (13910) * invT2;
  // reverse
  phi_r = sc[7] * sc[18];
  Kc = exp(g_RT[4] - g_RT[7] - g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[19]) + (h_RT[7] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[18] += q; // aC3H5
  wdot[19] -= q; // C3H6
  // d()/d[HO2]
  dqdci = +k_f * sc[19];
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[151] += dqdci; // dwdot[H2O2]/d[HO2]
  J[162] += dqdci; // dwdot[aC3H5]/d[HO2]
  J[163] -= dqdci; // dwdot[C3H6]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[18];
  J[256] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[259] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[270] += dqdci; // dwdot[aC3H5]/d[H2O2]
  J[271] -= dqdci; // dwdot[C3H6]/d[H2O2]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[7];
  J[652] -= dqdci; // dwdot[HO2]/d[aC3H5]
  J[655] += dqdci; // dwdot[H2O2]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[667] -= dqdci; // dwdot[C3H6]/d[aC3H5]
  // d()/d[C3H6]
  dqdci = +k_f * sc[4];
  J[688] -= dqdci; // dwdot[HO2]/d[C3H6]
  J[691] += dqdci; // dwdot[H2O2]/d[C3H6]
  J[702] += dqdci; // dwdot[aC3H5]/d[C3H6]
  J[703] -= dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1267] += dqdT; // dwdot[H2O2]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT
  J[1279] -= dqdT; // dwdot[C3H6]/dT

  // reaction 165: C3H6 + CH3 <=> CH4 + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[19];
  k_f = 2.2e-06 * exp(3.5 * tc[0] - 0.50321666580472 * (5675) * invT);
  dlnkfdT = 3.5 * invT + 0.50321666580472 * (5675) * invT2;
  // reverse
  phi_r = sc[10] * sc[18];
  Kc = exp(g_RT[9] - g_RT[10] - g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[19]) + (h_RT[10] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  wdot[18] += q; // aC3H5
  wdot[19] -= q; // C3H6
  // d()/d[CH3]
  dqdci = +k_f * sc[19];
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  J[342] += dqdci; // dwdot[aC3H5]/d[CH3]
  J[343] -= dqdci; // dwdot[C3H6]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[18];
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  J[378] += dqdci; // dwdot[aC3H5]/d[CH4]
  J[379] -= dqdci; // dwdot[C3H6]/d[CH4]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[10];
  J[657] -= dqdci; // dwdot[CH3]/d[aC3H5]
  J[658] += dqdci; // dwdot[CH4]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[667] -= dqdci; // dwdot[C3H6]/d[aC3H5]
  // d()/d[C3H6]
  dqdci = +k_f * sc[9];
  J[693] -= dqdci; // dwdot[CH3]/d[C3H6]
  J[694] += dqdci; // dwdot[CH4]/d[C3H6]
  J[702] += dqdci; // dwdot[aC3H5]/d[C3H6]
  J[703] -= dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT
  J[1279] -= dqdT; // dwdot[C3H6]/dT

  // reaction 166: C2H3CHO + H <=> C2H4 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[20];
  k_f = 108000 * exp(0.454 * tc[0] - 0.50321666580472 * (5820) * invT);
  dlnkfdT = 0.454 * invT + 0.50321666580472 * (5820) * invT2;
  // reverse
  phi_r = sc[15] * sc_qss[2];
  Kc = exp(g_RT[1] - g_RT[15] + g_RT[20] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[20]) + (h_RT[15] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[15] += q; // C2H4
  wdot[20] -= q; // C2H3CHO
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  J[56] -= dqdci; // dwdot[C2H3CHO]/d[H]
  // d()/d[C2H4]
  dqdci = -k_r * sc_qss[2];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[560] -= dqdci; // dwdot[C2H3CHO]/d[C2H4]
  // d()/d[C2H3CHO]
  dqdci = +k_f * sc[1];
  J[721] -= dqdci; // dwdot[H]/d[C2H3CHO]
  J[735] += dqdci; // dwdot[C2H4]/d[C2H3CHO]
  J[740] -= dqdci; // dwdot[C2H3CHO]/d[C2H3CHO]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT
  J[1280] -= dqdT; // dwdot[C2H3CHO]/dT

  // reaction 167: C2H3CHO + O <=> C2H3 + CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (3540) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3540) * invT2;
  // reverse
  phi_r = sc[3] * sc[12] * sc_qss[4];
  Kc = refC * exp(g_RT[2] - g_RT[3] - g_RT[12] + g_RT[20] - g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[3] + h_RT[12] + h_RT_qss[4]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // OH
  wdot[12] += q; // CO
  wdot[20] -= q; // C2H3CHO
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[84] += dqdci; // dwdot[CO]/d[O]
  J[92] -= dqdci; // dwdot[C2H3CHO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[12] * sc_qss[4];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[120] += dqdci; // dwdot[CO]/d[OH]
  J[128] -= dqdci; // dwdot[C2H3CHO]/d[OH]
  // d()/d[CO]
  dqdci = -k_r * sc[3] * sc_qss[4];
  J[434] -= dqdci; // dwdot[O]/d[CO]
  J[435] += dqdci; // dwdot[OH]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[452] -= dqdci; // dwdot[C2H3CHO]/d[CO]
  // d()/d[C2H3CHO]
  dqdci = +k_f * sc[2];
  J[722] -= dqdci; // dwdot[O]/d[C2H3CHO]
  J[723] += dqdci; // dwdot[OH]/d[C2H3CHO]
  J[732] += dqdci; // dwdot[CO]/d[C2H3CHO]
  J[740] -= dqdci; // dwdot[C2H3CHO]/d[C2H3CHO]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1280] -= dqdT; // dwdot[C2H3CHO]/dT

  // reaction 168: C2H3CHO + OH <=> C2H3 + CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[20];
  k_f = 3430 * exp(1.18 * tc[0] - 0.50321666580472 * (-447) * invT);
  dlnkfdT = 1.18 * invT + 0.50321666580472 * (-447) * invT2;
  // reverse
  phi_r = sc[6] * sc[12] * sc_qss[4];
  Kc = refC * exp(g_RT[3] - g_RT[6] - g_RT[12] + g_RT[20] - g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[20]) + (h_RT[6] + h_RT[12] + h_RT_qss[4]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[12] += q; // CO
  wdot[20] -= q; // C2H3CHO
  // d()/d[OH]
  dqdci = +k_f * sc[20];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[120] += dqdci; // dwdot[CO]/d[OH]
  J[128] -= dqdci; // dwdot[C2H3CHO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[12] * sc_qss[4];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[228] += dqdci; // dwdot[CO]/d[H2O]
  J[236] -= dqdci; // dwdot[C2H3CHO]/d[H2O]
  // d()/d[CO]
  dqdci = -k_r * sc[6] * sc_qss[4];
  J[435] -= dqdci; // dwdot[OH]/d[CO]
  J[438] += dqdci; // dwdot[H2O]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[452] -= dqdci; // dwdot[C2H3CHO]/d[CO]
  // d()/d[C2H3CHO]
  dqdci = +k_f * sc[3];
  J[723] -= dqdci; // dwdot[OH]/d[C2H3CHO]
  J[726] += dqdci; // dwdot[H2O]/d[C2H3CHO]
  J[732] += dqdci; // dwdot[CO]/d[C2H3CHO]
  J[740] -= dqdci; // dwdot[C2H3CHO]/d[C2H3CHO]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1280] -= dqdT; // dwdot[C2H3CHO]/dT

  // reaction 169: H + nC3H7 <=> C2H5 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc_qss[6];
  k_f = 3.7e+18 * exp(-2.92 * tc[0] - 0.50321666580472 * (12505) * invT);
  dlnkfdT = -2.92 * invT + 0.50321666580472 * (12505) * invT2;
  // reverse
  phi_r = sc[9] * sc_qss[5];
  Kc = exp(g_RT[1] - g_RT[9] - g_RT_qss[5] + g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[6]) + (h_RT[9] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[9] += q; // CH3
  // d()/d[H]
  dqdci = +k_f * sc_qss[6];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc_qss[5];
  J[325] -= dqdci; // dwdot[H]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT

  // reaction 170: H + nC3H7 <=> C3H6 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc_qss[6];
  k_f = 1800000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[5] * sc[19];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[19] + g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[6]) + (h_RT[5] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[19] += q; // C3H6
  // d()/d[H]
  dqdci = +k_f * sc_qss[6];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[55] += dqdci; // dwdot[C3H6]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[19];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[199] += dqdci; // dwdot[C3H6]/d[H2]
  // d()/d[C3H6]
  dqdci = -k_r * sc[5];
  J[685] -= dqdci; // dwdot[H]/d[C3H6]
  J[689] += dqdci; // dwdot[H2]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT

  // reaction 171: O + nC3H7 <=> C2H5 + CH2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc_qss[6];
  k_f = 96000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[11] * sc_qss[5];
  Kc = exp(g_RT[2] - g_RT[11] - g_RT_qss[5] + g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT_qss[6]) + (h_RT[11] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[11] += q; // CH2O
  // d()/d[O]
  dqdci = +k_f * sc_qss[6];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[83] += dqdci; // dwdot[CH2O]/d[O]
  // d()/d[CH2O]
  dqdci = -k_r * sc_qss[5];
  J[398] -= dqdci; // dwdot[O]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 172: OH + nC3H7 <=> C3H6 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc_qss[6];
  k_f = 24000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[6] * sc[19];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[19] + g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT_qss[6]) + (h_RT[6] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[19] += q; // C3H6
  // d()/d[OH]
  dqdci = +k_f * sc_qss[6];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[127] += dqdci; // dwdot[C3H6]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[19];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[235] += dqdci; // dwdot[C3H6]/d[H2O]
  // d()/d[C3H6]
  dqdci = -k_r * sc[6];
  J[687] -= dqdci; // dwdot[OH]/d[C3H6]
  J[690] += dqdci; // dwdot[H2O]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT

  // reaction 173: O2 + nC3H7 <=> C3H6 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[6];
  k_f = 90000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[4] * sc[19];
  Kc = exp(-g_RT[4] + g_RT[8] - g_RT[19] + g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[6]) + (h_RT[4] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[19] += q; // C3H6
  // d()/d[HO2]
  dqdci = -k_r * sc[19];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  J[163] += dqdci; // dwdot[C3H6]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[6];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[307] += dqdci; // dwdot[C3H6]/d[O2]
  // d()/d[C3H6]
  dqdci = -k_r * sc[4];
  J[688] += dqdci; // dwdot[HO2]/d[C3H6]
  J[692] -= dqdci; // dwdot[O2]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT

  // reaction 174: HO2 + nC3H7 <=> C2H5 + CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc_qss[6];
  k_f = 24000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[11] * sc_qss[5];
  Kc = refC * exp(-g_RT[3] + g_RT[4] - g_RT[11] - g_RT_qss[5] + g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT_qss[6]) +
                    (h_RT[3] + h_RT[11] + h_RT_qss[5]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[4] -= q;  // HO2
  wdot[11] += q; // CH2O
  // d()/d[OH]
  dqdci = -k_r * sc[11] * sc_qss[5];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc_qss[6];
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[155] += dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[3] * sc_qss[5];
  J[399] += dqdci; // dwdot[OH]/d[CH2O]
  J[400] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 175: CH3 + nC3H7 <=> C3H6 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc_qss[6];
  k_f = 11000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[10] * sc[19];
  Kc = exp(g_RT[9] - g_RT[10] - g_RT[19] + g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT_qss[6]) + (h_RT[10] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  wdot[19] += q; // C3H6
  // d()/d[CH3]
  dqdci = +k_f * sc_qss[6];
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  J[343] += dqdci; // dwdot[C3H6]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[19];
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  J[379] += dqdci; // dwdot[C3H6]/d[CH4]
  // d()/d[C3H6]
  dqdci = -k_r * sc[10];
  J[693] -= dqdci; // dwdot[CH3]/d[C3H6]
  J[694] += dqdci; // dwdot[CH4]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT

  // reaction 176: C4H7 + H <=> CH3 + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[21];
  k_f = 2e+15 * exp(-2 * tc[0] - 0.50321666580472 * (11000) * invT);
  dlnkfdT = -2 * invT + 0.50321666580472 * (11000) * invT2;
  // reverse
  phi_r = sc[9] * sc[18];
  Kc = exp(g_RT[1] - g_RT[9] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[21]) + (h_RT[9] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[9] += q;  // CH3
  wdot[18] += q; // aC3H5
  wdot[21] -= q; // C4H7
  // d()/d[H]
  dqdci = +k_f * sc[21];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  J[54] += dqdci; // dwdot[aC3H5]/d[H]
  J[57] -= dqdci; // dwdot[C4H7]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[18];
  J[325] -= dqdci; // dwdot[H]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[342] += dqdci; // dwdot[aC3H5]/d[CH3]
  J[345] -= dqdci; // dwdot[C4H7]/d[CH3]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[9];
  J[649] -= dqdci; // dwdot[H]/d[aC3H5]
  J[657] += dqdci; // dwdot[CH3]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[669] -= dqdci; // dwdot[C4H7]/d[aC3H5]
  // d()/d[C4H7]
  dqdci = +k_f * sc[1];
  J[757] -= dqdci; // dwdot[H]/d[C4H7]
  J[765] += dqdci; // dwdot[CH3]/d[C4H7]
  J[774] += dqdci; // dwdot[aC3H5]/d[C4H7]
  J[777] -= dqdci; // dwdot[C4H7]/d[C4H7]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT
  J[1281] -= dqdT; // dwdot[C4H7]/dT

  // reaction 177: C4H7 + HO2 <=> CH2O + OH + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[21];
  k_f = 24000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[11] * sc[18];
  Kc = refC * exp(-g_RT[3] + g_RT[4] - g_RT[11] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[4] + h_RT[21]) + (h_RT[3] + h_RT[11] + h_RT[18]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[4] -= q;  // HO2
  wdot[11] += q; // CH2O
  wdot[18] += q; // aC3H5
  wdot[21] -= q; // C4H7
  // d()/d[OH]
  dqdci = -k_r * sc[11] * sc[18];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  J[126] += dqdci; // dwdot[aC3H5]/d[OH]
  J[129] -= dqdci; // dwdot[C4H7]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[21];
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[155] += dqdci; // dwdot[CH2O]/d[HO2]
  J[162] += dqdci; // dwdot[aC3H5]/d[HO2]
  J[165] -= dqdci; // dwdot[C4H7]/d[HO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[3] * sc[18];
  J[399] += dqdci; // dwdot[OH]/d[CH2O]
  J[400] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[414] += dqdci; // dwdot[aC3H5]/d[CH2O]
  J[417] -= dqdci; // dwdot[C4H7]/d[CH2O]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[3] * sc[11];
  J[651] += dqdci; // dwdot[OH]/d[aC3H5]
  J[652] -= dqdci; // dwdot[HO2]/d[aC3H5]
  J[659] += dqdci; // dwdot[CH2O]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[669] -= dqdci; // dwdot[C4H7]/d[aC3H5]
  // d()/d[C4H7]
  dqdci = +k_f * sc[4];
  J[759] += dqdci; // dwdot[OH]/d[C4H7]
  J[760] -= dqdci; // dwdot[HO2]/d[C4H7]
  J[767] += dqdci; // dwdot[CH2O]/d[C4H7]
  J[774] += dqdci; // dwdot[aC3H5]/d[C4H7]
  J[777] -= dqdci; // dwdot[C4H7]/d[C4H7]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT
  J[1281] -= dqdT; // dwdot[C4H7]/dT

  // reaction 178: C4H7 + HCO <=> C4H81 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[21] * sc_qss[2];
  k_f = 60000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[12] * sc[22];
  Kc = exp(-g_RT[12] + g_RT[21] - g_RT[22] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[21] + h_RT_qss[2]) + (h_RT[12] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // CO
  wdot[21] -= q; // C4H7
  wdot[22] += q; // C4H81
  // d()/d[CO]
  dqdci = -k_r * sc[22];
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[453] -= dqdci; // dwdot[C4H7]/d[CO]
  J[454] += dqdci; // dwdot[C4H81]/d[CO]
  // d()/d[C4H7]
  dqdci = +k_f * sc_qss[2];
  J[768] += dqdci; // dwdot[CO]/d[C4H7]
  J[777] -= dqdci; // dwdot[C4H7]/d[C4H7]
  J[778] += dqdci; // dwdot[C4H81]/d[C4H7]
  // d()/d[C4H81]
  dqdci = -k_r * sc[12];
  J[804] += dqdci; // dwdot[CO]/d[C4H81]
  J[813] -= dqdci; // dwdot[C4H7]/d[C4H81]
  J[814] += dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1281] -= dqdT; // dwdot[C4H7]/dT
  J[1282] += dqdT; // dwdot[C4H81]/dT

  // reaction 179: C4H81 + H <=> C2H4 + C2H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[22];
  k_f = 1.6e+16 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[15] * sc_qss[5];
  Kc = exp(g_RT[1] - g_RT[15] + g_RT[22] - g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[22]) + (h_RT[15] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[15] += q; // C2H4
  wdot[22] -= q; // C4H81
  // d()/d[H]
  dqdci = +k_f * sc[22];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  J[58] -= dqdci; // dwdot[C4H81]/d[H]
  // d()/d[C2H4]
  dqdci = -k_r * sc_qss[5];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[562] -= dqdci; // dwdot[C4H81]/d[C2H4]
  // d()/d[C4H81]
  dqdci = +k_f * sc[1];
  J[793] -= dqdci; // dwdot[H]/d[C4H81]
  J[807] += dqdci; // dwdot[C2H4]/d[C4H81]
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 180: C4H81 + H <=> C3H6 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[22];
  k_f = 3.2e+16 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[9] * sc[19];
  Kc = exp(g_RT[1] - g_RT[9] - g_RT[19] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[22]) + (h_RT[9] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[9] += q;  // CH3
  wdot[19] += q; // C3H6
  wdot[22] -= q; // C4H81
  // d()/d[H]
  dqdci = +k_f * sc[22];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  J[55] += dqdci; // dwdot[C3H6]/d[H]
  J[58] -= dqdci; // dwdot[C4H81]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[19];
  J[325] -= dqdci; // dwdot[H]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[343] += dqdci; // dwdot[C3H6]/d[CH3]
  J[346] -= dqdci; // dwdot[C4H81]/d[CH3]
  // d()/d[C3H6]
  dqdci = -k_r * sc[9];
  J[685] -= dqdci; // dwdot[H]/d[C3H6]
  J[693] += dqdci; // dwdot[CH3]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[706] -= dqdci; // dwdot[C4H81]/d[C3H6]
  // d()/d[C4H81]
  dqdci = +k_f * sc[1];
  J[793] -= dqdci; // dwdot[H]/d[C4H81]
  J[801] += dqdci; // dwdot[CH3]/d[C4H81]
  J[811] += dqdci; // dwdot[C3H6]/d[C4H81]
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 181: C4H81 + H <=> C4H7 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[22];
  k_f = 0.65 * exp(2.54 * tc[0] - 0.50321666580472 * (6756) * invT);
  dlnkfdT = 2.54 * invT + 0.50321666580472 * (6756) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[22]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[21] += q; // C4H7
  wdot[22] -= q; // C4H81
  // d()/d[H]
  dqdci = +k_f * sc[22];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[57] += dqdci; // dwdot[C4H7]/d[H]
  J[58] -= dqdci; // dwdot[C4H81]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[21];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[201] += dqdci; // dwdot[C4H7]/d[H2]
  J[202] -= dqdci; // dwdot[C4H81]/d[H2]
  // d()/d[C4H7]
  dqdci = -k_r * sc[5];
  J[757] -= dqdci; // dwdot[H]/d[C4H7]
  J[761] += dqdci; // dwdot[H2]/d[C4H7]
  J[777] += dqdci; // dwdot[C4H7]/d[C4H7]
  J[778] -= dqdci; // dwdot[C4H81]/d[C4H7]
  // d()/d[C4H81]
  dqdci = +k_f * sc[1];
  J[793] -= dqdci; // dwdot[H]/d[C4H81]
  J[797] += dqdci; // dwdot[H2]/d[C4H81]
  J[813] += dqdci; // dwdot[C4H7]/d[C4H81]
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1281] += dqdT; // dwdot[C4H7]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 182: C4H81 + O => HCO + nC3H7
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 330 * exp(1.45 * tc[0] - 0.50321666580472 * (-402) * invT);
  dlnkfdT = 1.45 * invT + 0.50321666580472 * (-402) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[2] -= q;  // O
  wdot[22] -= q; // C4H81
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[94] -= dqdci; // dwdot[C4H81]/d[O]
  // d()/d[C4H81]
  dqdci = +k_f * sc[2];
  J[794] -= dqdci; // dwdot[O]/d[C4H81]
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 183: C4H81 + O <=> C4H7 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 15000000 * exp(0 * tc[0] - 0.50321666580472 * (5760) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (5760) * invT2;
  // reverse
  phi_r = sc[3] * sc[21];
  Kc = exp(g_RT[2] - g_RT[3] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[3] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // OH
  wdot[21] += q; // C4H7
  wdot[22] -= q; // C4H81
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[93] += dqdci; // dwdot[C4H7]/d[O]
  J[94] -= dqdci; // dwdot[C4H81]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[C4H7]/d[OH]
  J[130] -= dqdci; // dwdot[C4H81]/d[OH]
  // d()/d[C4H7]
  dqdci = -k_r * sc[3];
  J[758] -= dqdci; // dwdot[O]/d[C4H7]
  J[759] += dqdci; // dwdot[OH]/d[C4H7]
  J[777] += dqdci; // dwdot[C4H7]/d[C4H7]
  J[778] -= dqdci; // dwdot[C4H81]/d[C4H7]
  // d()/d[C4H81]
  dqdci = +k_f * sc[2];
  J[794] -= dqdci; // dwdot[O]/d[C4H81]
  J[795] += dqdci; // dwdot[OH]/d[C4H81]
  J[813] += dqdci; // dwdot[C4H7]/d[C4H81]
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1281] += dqdT; // dwdot[C4H7]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 184: C4H81 + O <=> C4H7 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 26000000 * exp(0 * tc[0] - 0.50321666580472 * (4470) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (4470) * invT2;
  // reverse
  phi_r = sc[3] * sc[21];
  Kc = exp(g_RT[2] - g_RT[3] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[3] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // OH
  wdot[21] += q; // C4H7
  wdot[22] -= q; // C4H81
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[93] += dqdci; // dwdot[C4H7]/d[O]
  J[94] -= dqdci; // dwdot[C4H81]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[C4H7]/d[OH]
  J[130] -= dqdci; // dwdot[C4H81]/d[OH]
  // d()/d[C4H7]
  dqdci = -k_r * sc[3];
  J[758] -= dqdci; // dwdot[O]/d[C4H7]
  J[759] += dqdci; // dwdot[OH]/d[C4H7]
  J[777] += dqdci; // dwdot[C4H7]/d[C4H7]
  J[778] -= dqdci; // dwdot[C4H81]/d[C4H7]
  // d()/d[C4H81]
  dqdci = +k_f * sc[2];
  J[794] -= dqdci; // dwdot[O]/d[C4H81]
  J[795] += dqdci; // dwdot[OH]/d[C4H81]
  J[813] += dqdci; // dwdot[C4H7]/d[C4H81]
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1281] += dqdT; // dwdot[C4H7]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 185: C4H81 + OH <=> C4H7 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[22];
  k_f = 0.0007 * exp(2.66 * tc[0] - 0.50321666580472 * (527) * invT);
  dlnkfdT = 2.66 * invT + 0.50321666580472 * (527) * invT2;
  // reverse
  phi_r = sc[6] * sc[21];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[22]) + (h_RT[6] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[21] += q; // C4H7
  wdot[22] -= q; // C4H81
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[129] += dqdci; // dwdot[C4H7]/d[OH]
  J[130] -= dqdci; // dwdot[C4H81]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[237] += dqdci; // dwdot[C4H7]/d[H2O]
  J[238] -= dqdci; // dwdot[C4H81]/d[H2O]
  // d()/d[C4H7]
  dqdci = -k_r * sc[6];
  J[759] -= dqdci; // dwdot[OH]/d[C4H7]
  J[762] += dqdci; // dwdot[H2O]/d[C4H7]
  J[777] += dqdci; // dwdot[C4H7]/d[C4H7]
  J[778] -= dqdci; // dwdot[C4H81]/d[C4H7]
  // d()/d[C4H81]
  dqdci = +k_f * sc[3];
  J[795] -= dqdci; // dwdot[OH]/d[C4H81]
  J[798] += dqdci; // dwdot[H2O]/d[C4H81]
  J[813] += dqdci; // dwdot[C4H7]/d[C4H81]
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1281] += dqdT; // dwdot[C4H7]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 186: C4H81 + O2 <=> C4H7 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[22];
  k_f = 20000000 * exp(0 * tc[0] - 0.50321666580472 * (50930) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (50930) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(-g_RT[4] + g_RT[8] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[22]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[21] += q; // C4H7
  wdot[22] -= q; // C4H81
  // d()/d[HO2]
  dqdci = -k_r * sc[21];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  J[165] += dqdci; // dwdot[C4H7]/d[HO2]
  J[166] -= dqdci; // dwdot[C4H81]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[22];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[309] += dqdci; // dwdot[C4H7]/d[O2]
  J[310] -= dqdci; // dwdot[C4H81]/d[O2]
  // d()/d[C4H7]
  dqdci = -k_r * sc[4];
  J[760] += dqdci; // dwdot[HO2]/d[C4H7]
  J[764] -= dqdci; // dwdot[O2]/d[C4H7]
  J[777] += dqdci; // dwdot[C4H7]/d[C4H7]
  J[778] -= dqdci; // dwdot[C4H81]/d[C4H7]
  // d()/d[C4H81]
  dqdci = +k_f * sc[8];
  J[796] += dqdci; // dwdot[HO2]/d[C4H81]
  J[800] -= dqdci; // dwdot[O2]/d[C4H81]
  J[813] += dqdci; // dwdot[C4H7]/d[C4H81]
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1281] += dqdT; // dwdot[C4H7]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 187: C4H81 + HO2 <=> C4H7 + H2O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 1000000 * exp(0 * tc[0] - 0.50321666580472 * (14340) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (14340) * invT2;
  // reverse
  phi_r = sc[7] * sc[21];
  Kc = exp(g_RT[4] - g_RT[7] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[7] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[21] += q; // C4H7
  wdot[22] -= q; // C4H81
  // d()/d[HO2]
  dqdci = +k_f * sc[22];
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[151] += dqdci; // dwdot[H2O2]/d[HO2]
  J[165] += dqdci; // dwdot[C4H7]/d[HO2]
  J[166] -= dqdci; // dwdot[C4H81]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[21];
  J[256] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[259] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] += dqdci; // dwdot[C4H7]/d[H2O2]
  J[274] -= dqdci; // dwdot[C4H81]/d[H2O2]
  // d()/d[C4H7]
  dqdci = -k_r * sc[7];
  J[760] -= dqdci; // dwdot[HO2]/d[C4H7]
  J[763] += dqdci; // dwdot[H2O2]/d[C4H7]
  J[777] += dqdci; // dwdot[C4H7]/d[C4H7]
  J[778] -= dqdci; // dwdot[C4H81]/d[C4H7]
  // d()/d[C4H81]
  dqdci = +k_f * sc[4];
  J[796] -= dqdci; // dwdot[HO2]/d[C4H81]
  J[799] += dqdci; // dwdot[H2O2]/d[C4H81]
  J[813] += dqdci; // dwdot[C4H7]/d[C4H81]
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1267] += dqdT; // dwdot[H2O2]/dT
  J[1281] += dqdT; // dwdot[C4H7]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 188: C4H81 + CH3 <=> C4H7 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[22];
  k_f = 4.5e-07 * exp(3.65 * tc[0] - 0.50321666580472 * (7153) * invT);
  dlnkfdT = 3.65 * invT + 0.50321666580472 * (7153) * invT2;
  // reverse
  phi_r = sc[10] * sc[21];
  Kc = exp(g_RT[9] - g_RT[10] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[22]) + (h_RT[10] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  wdot[21] += q; // C4H7
  wdot[22] -= q; // C4H81
  // d()/d[CH3]
  dqdci = +k_f * sc[22];
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  J[345] += dqdci; // dwdot[C4H7]/d[CH3]
  J[346] -= dqdci; // dwdot[C4H81]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[21];
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  J[381] += dqdci; // dwdot[C4H7]/d[CH4]
  J[382] -= dqdci; // dwdot[C4H81]/d[CH4]
  // d()/d[C4H7]
  dqdci = -k_r * sc[10];
  J[765] -= dqdci; // dwdot[CH3]/d[C4H7]
  J[766] += dqdci; // dwdot[CH4]/d[C4H7]
  J[777] += dqdci; // dwdot[C4H7]/d[C4H7]
  J[778] -= dqdci; // dwdot[C4H81]/d[C4H7]
  // d()/d[C4H81]
  dqdci = +k_f * sc[9];
  J[801] -= dqdci; // dwdot[CH3]/d[C4H81]
  J[802] += dqdci; // dwdot[CH4]/d[C4H81]
  J[813] += dqdci; // dwdot[C4H7]/d[C4H81]
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT
  J[1281] += dqdT; // dwdot[C4H7]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 189: H + pC4H9 => 2 C2H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc_qss[7];
  k_f = 3.7e+18 * exp(-2.92 * tc[0] - 0.50321666580472 * (12505) * invT);
  dlnkfdT = -2.92 * invT + 0.50321666580472 * (12505) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] -= q; // H
  // d()/d[H]
  dqdci = +k_f * sc_qss[7];
  J[37] -= dqdci; // dwdot[H]/d[H]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT

  // reaction 190: H + pC4H9 <=> C4H81 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc_qss[7];
  k_f = 1800000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[5] * sc[22];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[22] + g_RT_qss[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[7]) + (h_RT[5] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[22] += q; // C4H81
  // d()/d[H]
  dqdci = +k_f * sc_qss[7];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[58] += dqdci; // dwdot[C4H81]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[22];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[202] += dqdci; // dwdot[C4H81]/d[H2]
  // d()/d[C4H81]
  dqdci = -k_r * sc[5];
  J[793] -= dqdci; // dwdot[H]/d[C4H81]
  J[797] += dqdci; // dwdot[H2]/d[C4H81]
  J[814] += dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1282] += dqdT; // dwdot[C4H81]/dT

  // reaction 191: O + pC4H9 <=> CH2O + nC3H7
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc_qss[7];
  k_f = 96000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[11] * sc_qss[6];
  Kc = exp(g_RT[2] - g_RT[11] - g_RT_qss[6] + g_RT_qss[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT_qss[7]) + (h_RT[11] + h_RT_qss[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[11] += q; // CH2O
  // d()/d[O]
  dqdci = +k_f * sc_qss[7];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[83] += dqdci; // dwdot[CH2O]/d[O]
  // d()/d[CH2O]
  dqdci = -k_r * sc_qss[6];
  J[398] -= dqdci; // dwdot[O]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 192: OH + pC4H9 <=> C4H81 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc_qss[7];
  k_f = 24000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[6] * sc[22];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[22] + g_RT_qss[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT_qss[7]) + (h_RT[6] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[22] += q; // C4H81
  // d()/d[OH]
  dqdci = +k_f * sc_qss[7];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[130] += dqdci; // dwdot[C4H81]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[22];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[238] += dqdci; // dwdot[C4H81]/d[H2O]
  // d()/d[C4H81]
  dqdci = -k_r * sc[6];
  J[795] -= dqdci; // dwdot[OH]/d[C4H81]
  J[798] += dqdci; // dwdot[H2O]/d[C4H81]
  J[814] += dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1282] += dqdT; // dwdot[C4H81]/dT

  // reaction 193: O2 + pC4H9 <=> C4H81 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[7];
  k_f = 270000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[4] * sc[22];
  Kc = exp(-g_RT[4] + g_RT[8] - g_RT[22] + g_RT_qss[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[7]) + (h_RT[4] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[22] += q; // C4H81
  // d()/d[HO2]
  dqdci = -k_r * sc[22];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  J[166] += dqdci; // dwdot[C4H81]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[7];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[310] += dqdci; // dwdot[C4H81]/d[O2]
  // d()/d[C4H81]
  dqdci = -k_r * sc[4];
  J[796] += dqdci; // dwdot[HO2]/d[C4H81]
  J[800] -= dqdci; // dwdot[O2]/d[C4H81]
  J[814] += dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1282] += dqdT; // dwdot[C4H81]/dT

  // reaction 194: HO2 + pC4H9 <=> CH2O + OH + nC3H7
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc_qss[7];
  k_f = 24000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[11] * sc_qss[6];
  Kc = refC * exp(-g_RT[3] + g_RT[4] - g_RT[11] - g_RT_qss[6] + g_RT_qss[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT_qss[7]) +
                    (h_RT[3] + h_RT[11] + h_RT_qss[6]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[4] -= q;  // HO2
  wdot[11] += q; // CH2O
  // d()/d[OH]
  dqdci = -k_r * sc[11] * sc_qss[6];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc_qss[7];
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[155] += dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[3] * sc_qss[6];
  J[399] += dqdci; // dwdot[OH]/d[CH2O]
  J[400] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 195: CH3 + pC4H9 <=> C4H81 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc_qss[7];
  k_f = 11000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[10] * sc[22];
  Kc = exp(g_RT[9] - g_RT[10] - g_RT[22] + g_RT_qss[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT_qss[7]) + (h_RT[10] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  wdot[22] += q; // C4H81
  // d()/d[CH3]
  dqdci = +k_f * sc_qss[7];
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  J[346] += dqdci; // dwdot[C4H81]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[22];
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  J[382] += dqdci; // dwdot[C4H81]/d[CH4]
  // d()/d[C4H81]
  dqdci = -k_r * sc[10];
  J[801] -= dqdci; // dwdot[CH3]/d[C4H81]
  J[802] += dqdci; // dwdot[CH4]/d[C4H81]
  J[814] += dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT
  J[1282] += dqdT; // dwdot[C4H81]/dT

  // reaction 196: C5H9 => C2H4 + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[23];
  k_f = 25000000000000 * exp(0 * tc[0] - 0.50321666580472 * (30019.12) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (30019.12) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[15] += q; // C2H4
  wdot[18] += q; // aC3H5
  wdot[23] -= q; // C5H9
  // d()/d[C5H9]
  dqdci = +k_f;
  J[843] += dqdci; // dwdot[C2H4]/d[C5H9]
  J[846] += dqdci; // dwdot[aC3H5]/d[C5H9]
  J[851] -= dqdci; // dwdot[C5H9]/d[C5H9]
  // d()/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT
  J[1283] -= dqdT; // dwdot[C5H9]/dT

  // reaction 197: C5H9 => C2H3 + C3H6
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[23];
  k_f = 25000000000000 * exp(0 * tc[0] - 0.50321666580472 * (30019.12) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (30019.12) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[19] += q; // C3H6
  wdot[23] -= q; // C5H9
  // d()/d[C5H9]
  dqdci = +k_f;
  J[847] += dqdci; // dwdot[C3H6]/d[C5H9]
  J[851] -= dqdci; // dwdot[C5H9]/d[C5H9]
  // d()/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT
  J[1283] -= dqdT; // dwdot[C5H9]/dT

  // reaction 198: C5H10 + H <=> C2H4 + nC3H7
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[24];
  k_f = 8e+15 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[15] * sc_qss[6];
  Kc = exp(g_RT[1] - g_RT[15] + g_RT[24] - g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[24]) + (h_RT[15] + h_RT_qss[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[15] += q; // C2H4
  wdot[24] -= q; // C5H10
  // d()/d[H]
  dqdci = +k_f * sc[24];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  J[60] -= dqdci; // dwdot[C5H10]/d[H]
  // d()/d[C2H4]
  dqdci = -k_r * sc_qss[6];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[564] -= dqdci; // dwdot[C5H10]/d[C2H4]
  // d()/d[C5H10]
  dqdci = +k_f * sc[1];
  J[865] -= dqdci; // dwdot[H]/d[C5H10]
  J[879] += dqdci; // dwdot[C2H4]/d[C5H10]
  J[888] -= dqdci; // dwdot[C5H10]/d[C5H10]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT
  J[1284] -= dqdT; // dwdot[C5H10]/dT

  // reaction 199: C5H10 + H <=> C2H5 + C3H6
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[24];
  k_f = 1.6e+16 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[19] * sc_qss[5];
  Kc = exp(g_RT[1] - g_RT[19] + g_RT[24] - g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[24]) + (h_RT[19] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[19] += q; // C3H6
  wdot[24] -= q; // C5H10
  // d()/d[H]
  dqdci = +k_f * sc[24];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[C3H6]/d[H]
  J[60] -= dqdci; // dwdot[C5H10]/d[H]
  // d()/d[C3H6]
  dqdci = -k_r * sc_qss[5];
  J[685] -= dqdci; // dwdot[H]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[708] -= dqdci; // dwdot[C5H10]/d[C3H6]
  // d()/d[C5H10]
  dqdci = +k_f * sc[1];
  J[865] -= dqdci; // dwdot[H]/d[C5H10]
  J[883] += dqdci; // dwdot[C3H6]/d[C5H10]
  J[888] -= dqdci; // dwdot[C5H10]/d[C5H10]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT
  J[1284] -= dqdT; // dwdot[C5H10]/dT

  // reaction 200: C2H4 + nC3H7 <=> PXC5H11
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[6];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[8];
  Kc = refCinv * exp(g_RT[15] + g_RT_qss[6] - g_RT_qss[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[6]) + (h_RT_qss[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] -= q; // C2H4
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[6];
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 201: C6H12 + H <=> C2H4 + pC4H9
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[25];
  k_f = 8e+15 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[15] * sc_qss[7];
  Kc = exp(g_RT[1] - g_RT[15] + g_RT[25] - g_RT_qss[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[25]) + (h_RT[15] + h_RT_qss[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[15] += q; // C2H4
  wdot[25] -= q; // C6H12
  // d()/d[H]
  dqdci = +k_f * sc[25];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  J[61] -= dqdci; // dwdot[C6H12]/d[H]
  // d()/d[C2H4]
  dqdci = -k_r * sc_qss[7];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[565] -= dqdci; // dwdot[C6H12]/d[C2H4]
  // d()/d[C6H12]
  dqdci = +k_f * sc[1];
  J[901] -= dqdci; // dwdot[H]/d[C6H12]
  J[915] += dqdci; // dwdot[C2H4]/d[C6H12]
  J[925] -= dqdci; // dwdot[C6H12]/d[C6H12]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT
  J[1285] -= dqdT; // dwdot[C6H12]/dT

  // reaction 202: C6H12 + H <=> C3H6 + nC3H7
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[25];
  k_f = 1.6e+16 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[19] * sc_qss[6];
  Kc = exp(g_RT[1] - g_RT[19] + g_RT[25] - g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[25]) + (h_RT[19] + h_RT_qss[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[19] += q; // C3H6
  wdot[25] -= q; // C6H12
  // d()/d[H]
  dqdci = +k_f * sc[25];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[C3H6]/d[H]
  J[61] -= dqdci; // dwdot[C6H12]/d[H]
  // d()/d[C3H6]
  dqdci = -k_r * sc_qss[6];
  J[685] -= dqdci; // dwdot[H]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[709] -= dqdci; // dwdot[C6H12]/d[C3H6]
  // d()/d[C6H12]
  dqdci = +k_f * sc[1];
  J[901] -= dqdci; // dwdot[H]/d[C6H12]
  J[919] += dqdci; // dwdot[C3H6]/d[C6H12]
  J[925] -= dqdci; // dwdot[C6H12]/d[C6H12]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT
  J[1285] -= dqdT; // dwdot[C6H12]/dT

  // reaction 203: C2H4 + pC4H9 <=> PXC6H13
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[7];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[9];
  Kc = refCinv * exp(g_RT[15] + g_RT_qss[7] - g_RT_qss[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[7]) + (h_RT_qss[9]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] -= q; // C2H4
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[7];
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 204: C7H14 + H <=> C2H4 + PXC5H11
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[26];
  k_f = 8e+15 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[15] * sc_qss[8];
  Kc = exp(g_RT[1] - g_RT[15] + g_RT[26] - g_RT_qss[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[26]) + (h_RT[15] + h_RT_qss[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[15] += q; // C2H4
  wdot[26] -= q; // C7H14
  // d()/d[H]
  dqdci = +k_f * sc[26];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  J[62] -= dqdci; // dwdot[C7H14]/d[H]
  // d()/d[C2H4]
  dqdci = -k_r * sc_qss[8];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[566] -= dqdci; // dwdot[C7H14]/d[C2H4]
  // d()/d[C7H14]
  dqdci = +k_f * sc[1];
  J[937] -= dqdci; // dwdot[H]/d[C7H14]
  J[951] += dqdci; // dwdot[C2H4]/d[C7H14]
  J[962] -= dqdci; // dwdot[C7H14]/d[C7H14]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT
  J[1286] -= dqdT; // dwdot[C7H14]/dT

  // reaction 205: C7H14 + H <=> C3H6 + pC4H9
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[26];
  k_f = 1.6e+16 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[19] * sc_qss[7];
  Kc = exp(g_RT[1] - g_RT[19] + g_RT[26] - g_RT_qss[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[26]) + (h_RT[19] + h_RT_qss[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[19] += q; // C3H6
  wdot[26] -= q; // C7H14
  // d()/d[H]
  dqdci = +k_f * sc[26];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[C3H6]/d[H]
  J[62] -= dqdci; // dwdot[C7H14]/d[H]
  // d()/d[C3H6]
  dqdci = -k_r * sc_qss[7];
  J[685] -= dqdci; // dwdot[H]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[710] -= dqdci; // dwdot[C7H14]/d[C3H6]
  // d()/d[C7H14]
  dqdci = +k_f * sc[1];
  J[937] -= dqdci; // dwdot[H]/d[C7H14]
  J[955] += dqdci; // dwdot[C3H6]/d[C7H14]
  J[962] -= dqdci; // dwdot[C7H14]/d[C7H14]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT
  J[1286] -= dqdT; // dwdot[C7H14]/dT

  // reaction 206: C2H4 + PXC5H11 <=> PXC7H15
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[8];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[10];
  Kc = refCinv * exp(g_RT[15] + g_RT_qss[8] - g_RT_qss[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[8]) + (h_RT_qss[10]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] -= q; // C2H4
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[8];
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 207: C8H16 + H <=> C2H4 + PXC6H13
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[27];
  k_f = 8e+15 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[15] * sc_qss[9];
  Kc = exp(g_RT[1] - g_RT[15] + g_RT[27] - g_RT_qss[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[27]) + (h_RT[15] + h_RT_qss[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[15] += q; // C2H4
  wdot[27] -= q; // C8H16
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  J[63] -= dqdci; // dwdot[C8H16]/d[H]
  // d()/d[C2H4]
  dqdci = -k_r * sc_qss[9];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[567] -= dqdci; // dwdot[C8H16]/d[C2H4]
  // d()/d[C8H16]
  dqdci = +k_f * sc[1];
  J[973] -= dqdci; // dwdot[H]/d[C8H16]
  J[987] += dqdci; // dwdot[C2H4]/d[C8H16]
  J[999] -= dqdci; // dwdot[C8H16]/d[C8H16]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT
  J[1287] -= dqdT; // dwdot[C8H16]/dT

  // reaction 208: C8H16 + H <=> C3H6 + PXC5H11
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[27];
  k_f = 1.6e+16 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[19] * sc_qss[8];
  Kc = exp(g_RT[1] - g_RT[19] + g_RT[27] - g_RT_qss[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[27]) + (h_RT[19] + h_RT_qss[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[19] += q; // C3H6
  wdot[27] -= q; // C8H16
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[C3H6]/d[H]
  J[63] -= dqdci; // dwdot[C8H16]/d[H]
  // d()/d[C3H6]
  dqdci = -k_r * sc_qss[8];
  J[685] -= dqdci; // dwdot[H]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[711] -= dqdci; // dwdot[C8H16]/d[C3H6]
  // d()/d[C8H16]
  dqdci = +k_f * sc[1];
  J[973] -= dqdci; // dwdot[H]/d[C8H16]
  J[991] += dqdci; // dwdot[C3H6]/d[C8H16]
  J[999] -= dqdci; // dwdot[C8H16]/d[C8H16]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT
  J[1287] -= dqdT; // dwdot[C8H16]/dT

  // reaction 209: C2H4 + PXC6H13 <=> PXC8H17
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[9];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[11];
  Kc = refCinv * exp(g_RT[15] + g_RT_qss[9] - g_RT_qss[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[9]) + (h_RT_qss[11]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] -= q; // C2H4
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[9];
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 210: C9H18 + H <=> C2H4 + PXC7H15
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[28];
  k_f = 8e+15 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[15] * sc_qss[10];
  Kc = exp(g_RT[1] - g_RT[15] + g_RT[28] - g_RT_qss[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[28]) + (h_RT[15] + h_RT_qss[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[15] += q; // C2H4
  wdot[28] -= q; // C9H18
  // d()/d[H]
  dqdci = +k_f * sc[28];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  J[64] -= dqdci; // dwdot[C9H18]/d[H]
  // d()/d[C2H4]
  dqdci = -k_r * sc_qss[10];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[568] -= dqdci; // dwdot[C9H18]/d[C2H4]
  // d()/d[C9H18]
  dqdci = +k_f * sc[1];
  J[1009] -= dqdci; // dwdot[H]/d[C9H18]
  J[1023] += dqdci; // dwdot[C2H4]/d[C9H18]
  J[1036] -= dqdci; // dwdot[C9H18]/d[C9H18]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT
  J[1288] -= dqdT; // dwdot[C9H18]/dT

  // reaction 211: C9H18 + H <=> C3H6 + PXC6H13
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[28];
  k_f = 1.6e+16 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[19] * sc_qss[9];
  Kc = exp(g_RT[1] - g_RT[19] + g_RT[28] - g_RT_qss[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[28]) + (h_RT[19] + h_RT_qss[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[19] += q; // C3H6
  wdot[28] -= q; // C9H18
  // d()/d[H]
  dqdci = +k_f * sc[28];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[C3H6]/d[H]
  J[64] -= dqdci; // dwdot[C9H18]/d[H]
  // d()/d[C3H6]
  dqdci = -k_r * sc_qss[9];
  J[685] -= dqdci; // dwdot[H]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[712] -= dqdci; // dwdot[C9H18]/d[C3H6]
  // d()/d[C9H18]
  dqdci = +k_f * sc[1];
  J[1009] -= dqdci; // dwdot[H]/d[C9H18]
  J[1027] += dqdci; // dwdot[C3H6]/d[C9H18]
  J[1036] -= dqdci; // dwdot[C9H18]/d[C9H18]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT
  J[1288] -= dqdT; // dwdot[C9H18]/dT

  // reaction 212: C2H4 + PXC7H15 <=> PXC9H19
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[10];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc[29];
  Kc = refCinv * exp(g_RT[15] - g_RT[29] + g_RT_qss[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[10]) + (h_RT[29]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] -= q; // C2H4
  wdot[29] += q; // PXC9H19
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[10];
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[569] += dqdci; // dwdot[PXC9H19]/d[C2H4]
  // d()/d[PXC9H19]
  dqdci = -k_r;
  J[1059] -= dqdci; // dwdot[C2H4]/d[PXC9H19]
  J[1073] += dqdci; // dwdot[PXC9H19]/d[PXC9H19]
  // d()/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT
  J[1289] += dqdT; // dwdot[PXC9H19]/dT

  // reaction 213: C10H20 + H <=> C2H4 + PXC8H17
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[30];
  k_f = 8e+15 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[15] * sc_qss[11];
  Kc = exp(g_RT[1] - g_RT[15] + g_RT[30] - g_RT_qss[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[30]) + (h_RT[15] + h_RT_qss[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[15] += q; // C2H4
  wdot[30] -= q; // C10H20
  // d()/d[H]
  dqdci = +k_f * sc[30];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  J[66] -= dqdci; // dwdot[C10H20]/d[H]
  // d()/d[C2H4]
  dqdci = -k_r * sc_qss[11];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[570] -= dqdci; // dwdot[C10H20]/d[C2H4]
  // d()/d[C10H20]
  dqdci = +k_f * sc[1];
  J[1081] -= dqdci; // dwdot[H]/d[C10H20]
  J[1095] += dqdci; // dwdot[C2H4]/d[C10H20]
  J[1110] -= dqdci; // dwdot[C10H20]/d[C10H20]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT
  J[1290] -= dqdT; // dwdot[C10H20]/dT

  // reaction 214: C10H20 + H <=> C3H6 + PXC7H15
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[30];
  k_f = 1.6e+16 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[19] * sc_qss[10];
  Kc = exp(g_RT[1] - g_RT[19] + g_RT[30] - g_RT_qss[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[30]) + (h_RT[19] + h_RT_qss[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[19] += q; // C3H6
  wdot[30] -= q; // C10H20
  // d()/d[H]
  dqdci = +k_f * sc[30];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[C3H6]/d[H]
  J[66] -= dqdci; // dwdot[C10H20]/d[H]
  // d()/d[C3H6]
  dqdci = -k_r * sc_qss[10];
  J[685] -= dqdci; // dwdot[H]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[714] -= dqdci; // dwdot[C10H20]/d[C3H6]
  // d()/d[C10H20]
  dqdci = +k_f * sc[1];
  J[1081] -= dqdci; // dwdot[H]/d[C10H20]
  J[1099] += dqdci; // dwdot[C3H6]/d[C10H20]
  J[1110] -= dqdci; // dwdot[C10H20]/d[C10H20]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT
  J[1290] -= dqdT; // dwdot[C10H20]/dT

  // reaction 215: C2H4 + PXC8H17 <=> PXC10H21
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[11];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[12];
  Kc = refCinv * exp(g_RT[15] + g_RT_qss[11] - g_RT_qss[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[11]) + (h_RT_qss[12]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] -= q; // C2H4
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[11];
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 216: C12H24 <=> C5H9 + PXC7H15
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[31];
  k_f = 3.5e+16 * exp(0 * tc[0] - 0.50321666580472 * (70936.9) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (70936.9) * invT2;
  // reverse
  phi_r = sc[23] * sc_qss[10];
  Kc = refC * exp(-g_RT[23] + g_RT[31] - g_RT_qss[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[31]) + (h_RT[23] + h_RT_qss[10]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[23] += q; // C5H9
  wdot[31] -= q; // C12H24
  // d()/d[C5H9]
  dqdci = -k_r * sc_qss[10];
  J[851] += dqdci; // dwdot[C5H9]/d[C5H9]
  J[859] -= dqdci; // dwdot[C12H24]/d[C5H9]
  // d()/d[C12H24]
  dqdci = +k_f;
  J[1139] += dqdci; // dwdot[C5H9]/d[C12H24]
  J[1147] -= dqdci; // dwdot[C12H24]/d[C12H24]
  // d()/dT
  J[1283] += dqdT; // dwdot[C5H9]/dT
  J[1291] -= dqdT; // dwdot[C12H24]/dT

  // reaction 217: C2H4 + PXC10H21 <=> PXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[12];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[13];
  Kc = refCinv * exp(g_RT[15] + g_RT_qss[12] - g_RT_qss[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[12]) + (h_RT_qss[13]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] -= q; // C2H4
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[12];
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 218: PXC12H25 <=> S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[13];
  k_f = 3670000000000 * exp(-0.6 * tc[0] - 0.50321666580472 * (14400) * invT);
  dlnkfdT = -0.6 * invT + 0.50321666580472 * (14400) * invT2;
  // reverse
  phi_r = sc_qss[15];
  Kc = exp(g_RT_qss[13] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[13]) + (h_RT_qss[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  // d()/dT

  // reaction 219: C3H6 + PXC9H19 <=> SXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19] * sc[29];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[14];
  Kc = refCinv * exp(g_RT[19] + g_RT[29] - g_RT_qss[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19] + h_RT[29]) + (h_RT_qss[14]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[19] -= q; // C3H6
  wdot[29] -= q; // PXC9H19
  // d()/d[C3H6]
  dqdci = +k_f * sc[29];
  J[703] -= dqdci; // dwdot[C3H6]/d[C3H6]
  J[713] -= dqdci; // dwdot[PXC9H19]/d[C3H6]
  // d()/d[PXC9H19]
  dqdci = +k_f * sc[19];
  J[1063] -= dqdci; // dwdot[C3H6]/d[PXC9H19]
  J[1073] -= dqdci; // dwdot[PXC9H19]/d[PXC9H19]
  // d()/dT
  J[1279] -= dqdT; // dwdot[C3H6]/dT
  J[1289] -= dqdT; // dwdot[PXC9H19]/dT

  // reaction 220: C4H81 + PXC8H17 <=> SXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[22] * sc_qss[11];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[14];
  Kc = refCinv * exp(g_RT[22] + g_RT_qss[11] - g_RT_qss[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[22] + h_RT_qss[11]) + (h_RT_qss[14]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[22] -= q; // C4H81
  // d()/d[C4H81]
  dqdci = +k_f * sc_qss[11];
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 221: C5H10 + PXC7H15 <=> S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[24] * sc_qss[10];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[15];
  Kc = refCinv * exp(g_RT[24] + g_RT_qss[10] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[24] + h_RT_qss[10]) + (h_RT_qss[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[24] -= q; // C5H10
  // d()/d[C5H10]
  dqdci = +k_f * sc_qss[10];
  J[888] -= dqdci; // dwdot[C5H10]/d[C5H10]
  // d()/dT
  J[1284] -= dqdT; // dwdot[C5H10]/dT

  // reaction 222: C10H20 + C2H5 <=> S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[30] * sc_qss[5];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[15];
  Kc = refCinv * exp(g_RT[30] + g_RT_qss[5] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[30] + h_RT_qss[5]) + (h_RT_qss[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[30] -= q; // C10H20
  // d()/d[C10H20]
  dqdci = +k_f * sc_qss[5];
  J[1110] -= dqdci; // dwdot[C10H20]/d[C10H20]
  // d()/dT
  J[1290] -= dqdT; // dwdot[C10H20]/dT

  // reaction 223: C6H12 + PXC6H13 <=> S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[25] * sc_qss[9];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[15];
  Kc = refCinv * exp(g_RT[25] + g_RT_qss[9] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[25] + h_RT_qss[9]) + (h_RT_qss[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[25] -= q; // C6H12
  // d()/d[C6H12]
  dqdci = +k_f * sc_qss[9];
  J[925] -= dqdci; // dwdot[C6H12]/d[C6H12]
  // d()/dT
  J[1285] -= dqdT; // dwdot[C6H12]/dT

  // reaction 224: C9H18 + nC3H7 <=> S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[28] * sc_qss[6];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[15];
  Kc = refCinv * exp(g_RT[28] + g_RT_qss[6] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[28] + h_RT_qss[6]) + (h_RT_qss[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[28] -= q; // C9H18
  // d()/d[C9H18]
  dqdci = +k_f * sc_qss[6];
  J[1036] -= dqdci; // dwdot[C9H18]/d[C9H18]
  // d()/dT
  J[1288] -= dqdT; // dwdot[C9H18]/dT

  // reaction 225: C7H14 + PXC5H11 <=> S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[26] * sc_qss[8];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[15];
  Kc = refCinv * exp(g_RT[26] + g_RT_qss[8] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[26] + h_RT_qss[8]) + (h_RT_qss[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[26] -= q; // C7H14
  // d()/d[C7H14]
  dqdci = +k_f * sc_qss[8];
  J[962] -= dqdci; // dwdot[C7H14]/d[C7H14]
  // d()/dT
  J[1286] -= dqdT; // dwdot[C7H14]/dT

  // reaction 226: C8H16 + pC4H9 <=> S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[27] * sc_qss[7];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[15];
  Kc = refCinv * exp(g_RT[27] + g_RT_qss[7] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[27] + h_RT_qss[7]) + (h_RT_qss[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[27] -= q; // C8H16
  // d()/d[C8H16]
  dqdci = +k_f * sc_qss[7];
  J[999] -= dqdci; // dwdot[C8H16]/d[C8H16]
  // d()/dT
  J[1287] -= dqdT; // dwdot[C8H16]/dT

  // reaction 227: C2H5 + PXC10H21 <=> NC12H26
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[5] * sc_qss[12];
  k_f = 188000000 * exp(-0.5 * tc[0] - 0.50321666580472 * (0) * invT);
  // Remove forward reaction
  dlnkfdT = -0.5 * invT + 0.50321666580472 * (0) * invT2;
  // dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0];
  Kc = refCinv * exp(-g_RT[0] + g_RT_qss[5] + g_RT_qss[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[5] + h_RT_qss[12]) + (h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  // Remove forward reaction
  // q = k_f*phi_f - k_r*phi_r;
  q = -k_r * phi_r;
  // Remove forward reaction
  // dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
  dqdT = (-dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // NC12H26
  // d()/d[NC12H26]
  dqdci = -k_r;
  J[0] += dqdci; // dwdot[NC12H26]/d[NC12H26]
  // d()/dT
  J[1260] += dqdT; // dwdot[NC12H26]/dT

  // reaction 228: PXC9H19 + nC3H7 <=> NC12H26
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[29] * sc_qss[6];
  k_f = 188000000 * exp(-0.5 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -0.5 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[0];
  Kc = refCinv * exp(-g_RT[0] + g_RT[29] + g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[29] + h_RT_qss[6]) + (h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // NC12H26
  wdot[29] -= q; // PXC9H19
  // d()/d[NC12H26]
  dqdci = -k_r;
  J[0] += dqdci;  // dwdot[NC12H26]/d[NC12H26]
  J[29] -= dqdci; // dwdot[PXC9H19]/d[NC12H26]
  // d()/d[PXC9H19]
  dqdci = +k_f * sc_qss[6];
  J[1044] += dqdci; // dwdot[NC12H26]/d[PXC9H19]
  J[1073] -= dqdci; // dwdot[PXC9H19]/d[PXC9H19]
  // d()/dT
  J[1260] += dqdT; // dwdot[NC12H26]/dT
  J[1289] -= dqdT; // dwdot[PXC9H19]/dT

  // reaction 229: PXC8H17 + pC4H9 <=> NC12H26
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[7] * sc_qss[11];
  k_f = 188000000 * exp(-0.5 * tc[0] - 0.50321666580472 * (0) * invT);
  // Remove forward reaction
  dlnkfdT = -0.5 * invT + 0.50321666580472 * (0) * invT2;
  // dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0];
  Kc = refCinv * exp(-g_RT[0] + g_RT_qss[7] + g_RT_qss[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[7] + h_RT_qss[11]) + (h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  // Remove forward reaction
  // q = k_f*phi_f - k_r*phi_r;
  q = -k_r * phi_r;
  // Remove forward reaction
  // dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
  dqdT = (-dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // NC12H26
  // d()/d[NC12H26]
  dqdci = -k_r;
  J[0] += dqdci; // dwdot[NC12H26]/d[NC12H26]
  // d()/dT
  J[1260] += dqdT; // dwdot[NC12H26]/dT

  // reaction 230: PXC5H11 + PXC7H15 <=> NC12H26
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[8] * sc_qss[10];
  k_f = 188000000 * exp(-0.5 * tc[0] - 0.50321666580472 * (0) * invT);
  // Remove forward reaction
  dlnkfdT = -0.5 * invT + 0.50321666580472 * (0) * invT2;
  // dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0];
  Kc = refCinv * exp(-g_RT[0] + g_RT_qss[8] + g_RT_qss[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[8] + h_RT_qss[10]) + (h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  // Remove forward reaction
  // q = k_f*phi_f - k_r*phi_r;
  q = -k_r * phi_r;
  // Remove forward reaction
  // dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
  dqdT = (-dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // NC12H26
  // d()/d[NC12H26]
  dqdci = -k_r;
  J[0] += dqdci; // dwdot[NC12H26]/d[NC12H26]
  // d()/dT
  J[1260] += dqdT; // dwdot[NC12H26]/dT

  // reaction 231: 2 PXC6H13 <=> NC12H26
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = pow(sc_qss[9], 2.000000);
  k_f = 188000000 * exp(-0.5 * tc[0] - 0.50321666580472 * (0) * invT);
  // Remove forward reaction
  dlnkfdT = -0.5 * invT + 0.50321666580472 * (0) * invT2;
  // dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0];
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT_qss[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT_qss[9]) + (h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  // Remove forward reaction
  // q = k_f*phi_f - k_r*phi_r;
  q = -k_r * phi_r;
  // Remove forward reaction
  // dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
  dqdT = (-dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // NC12H26
  // d()/d[NC12H26]
  dqdci = -k_r;
  J[0] += dqdci; // dwdot[NC12H26]/d[NC12H26]
  // d()/dT
  J[1260] += dqdT; // dwdot[NC12H26]/dT

  // reaction 232: H + NC12H26 <=> H2 + PXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[1];
  k_f = 1.3 * exp(2.54 * tc[0] - 0.50321666580472 * (6756) * invT);
  dlnkfdT = 2.54 * invT + 0.50321666580472 * (6756) * invT2;
  // reverse
  phi_r = sc[5] * sc_qss[13];
  Kc = exp(g_RT[0] + g_RT[1] - g_RT[5] - g_RT_qss[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[1]) + (h_RT[5] + h_RT_qss[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[1] -= q; // H
  wdot[5] += q; // H2
  // d()/d[NC12H26]
  dqdci = +k_f * sc[1];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[1] -= dqdci; // dwdot[H]/d[NC12H26]
  J[5] += dqdci; // dwdot[H2]/d[NC12H26]
  // d()/d[H]
  dqdci = +k_f * sc[0];
  J[36] -= dqdci; // dwdot[NC12H26]/d[H]
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc_qss[13];
  J[180] -= dqdci; // dwdot[NC12H26]/d[H2]
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT

  // reaction 233: H + NC12H26 <=> H2 + SXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[1];
  k_f = 2.6 * exp(2.4 * tc[0] - 0.50321666580472 * (4471) * invT);
  dlnkfdT = 2.4 * invT + 0.50321666580472 * (4471) * invT2;
  // reverse
  phi_r = sc[5] * sc_qss[14];
  Kc = exp(g_RT[0] + g_RT[1] - g_RT[5] - g_RT_qss[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[1]) + (h_RT[5] + h_RT_qss[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[1] -= q; // H
  wdot[5] += q; // H2
  // d()/d[NC12H26]
  dqdci = +k_f * sc[1];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[1] -= dqdci; // dwdot[H]/d[NC12H26]
  J[5] += dqdci; // dwdot[H2]/d[NC12H26]
  // d()/d[H]
  dqdci = +k_f * sc[0];
  J[36] -= dqdci; // dwdot[NC12H26]/d[H]
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc_qss[14];
  J[180] -= dqdci; // dwdot[NC12H26]/d[H2]
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT

  // reaction 234: H + NC12H26 <=> H2 + S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[1];
  k_f = 3.9 * exp(2.4 * tc[0] - 0.50321666580472 * (4471) * invT);
  dlnkfdT = 2.4 * invT + 0.50321666580472 * (4471) * invT2;
  // reverse
  phi_r = sc[5] * sc_qss[15];
  Kc = exp(g_RT[0] + g_RT[1] - g_RT[5] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[1]) + (h_RT[5] + h_RT_qss[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[1] -= q; // H
  wdot[5] += q; // H2
  // d()/d[NC12H26]
  dqdci = +k_f * sc[1];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[1] -= dqdci; // dwdot[H]/d[NC12H26]
  J[5] += dqdci; // dwdot[H2]/d[NC12H26]
  // d()/d[H]
  dqdci = +k_f * sc[0];
  J[36] -= dqdci; // dwdot[NC12H26]/d[H]
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc_qss[15];
  J[180] -= dqdci; // dwdot[NC12H26]/d[H2]
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT

  // reaction 235: NC12H26 + O <=> OH + PXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[2];
  k_f = 0.19 * exp(2.68 * tc[0] - 0.50321666580472 * (3716) * invT);
  dlnkfdT = 2.68 * invT + 0.50321666580472 * (3716) * invT2;
  // reverse
  phi_r = sc[3] * sc_qss[13];
  Kc = exp(g_RT[0] + g_RT[2] - g_RT[3] - g_RT_qss[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[2]) + (h_RT[3] + h_RT_qss[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[2] -= q; // O
  wdot[3] += q; // OH
  // d()/d[NC12H26]
  dqdci = +k_f * sc[2];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[2] -= dqdci; // dwdot[O]/d[NC12H26]
  J[3] += dqdci; // dwdot[OH]/d[NC12H26]
  // d()/d[O]
  dqdci = +k_f * sc[0];
  J[72] -= dqdci; // dwdot[NC12H26]/d[O]
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc_qss[13];
  J[108] -= dqdci; // dwdot[NC12H26]/d[OH]
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT

  // reaction 236: NC12H26 + O <=> OH + SXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[2];
  k_f = 0.0952 * exp(2.71 * tc[0] - 0.50321666580472 * (2106) * invT);
  dlnkfdT = 2.71 * invT + 0.50321666580472 * (2106) * invT2;
  // reverse
  phi_r = sc[3] * sc_qss[14];
  Kc = exp(g_RT[0] + g_RT[2] - g_RT[3] - g_RT_qss[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[2]) + (h_RT[3] + h_RT_qss[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[2] -= q; // O
  wdot[3] += q; // OH
  // d()/d[NC12H26]
  dqdci = +k_f * sc[2];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[2] -= dqdci; // dwdot[O]/d[NC12H26]
  J[3] += dqdci; // dwdot[OH]/d[NC12H26]
  // d()/d[O]
  dqdci = +k_f * sc[0];
  J[72] -= dqdci; // dwdot[NC12H26]/d[O]
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc_qss[14];
  J[108] -= dqdci; // dwdot[NC12H26]/d[OH]
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT

  // reaction 237: NC12H26 + O <=> OH + S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[2];
  k_f = 0.1428 * exp(2.71 * tc[0] - 0.50321666580472 * (2106) * invT);
  dlnkfdT = 2.71 * invT + 0.50321666580472 * (2106) * invT2;
  // reverse
  phi_r = sc[3] * sc_qss[15];
  Kc = exp(g_RT[0] + g_RT[2] - g_RT[3] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[2]) + (h_RT[3] + h_RT_qss[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[2] -= q; // O
  wdot[3] += q; // OH
  // d()/d[NC12H26]
  dqdci = +k_f * sc[2];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[2] -= dqdci; // dwdot[O]/d[NC12H26]
  J[3] += dqdci; // dwdot[OH]/d[NC12H26]
  // d()/d[O]
  dqdci = +k_f * sc[0];
  J[72] -= dqdci; // dwdot[NC12H26]/d[O]
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc_qss[15];
  J[108] -= dqdci; // dwdot[NC12H26]/d[OH]
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT

  // reaction 238: NC12H26 + OH <=> H2O + PXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[3];
  k_f = 0.0034 * exp(2.66 * tc[0] - 0.50321666580472 * (527) * invT);
  dlnkfdT = 2.66 * invT + 0.50321666580472 * (527) * invT2;
  // reverse
  phi_r = sc[6] * sc_qss[13];
  Kc = exp(g_RT[0] + g_RT[3] - g_RT[6] - g_RT_qss[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[3]) + (h_RT[6] + h_RT_qss[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[3] -= q; // OH
  wdot[6] += q; // H2O
  // d()/d[NC12H26]
  dqdci = +k_f * sc[3];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[3] -= dqdci; // dwdot[OH]/d[NC12H26]
  J[6] += dqdci; // dwdot[H2O]/d[NC12H26]
  // d()/d[OH]
  dqdci = +k_f * sc[0];
  J[108] -= dqdci; // dwdot[NC12H26]/d[OH]
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc_qss[13];
  J[216] -= dqdci; // dwdot[NC12H26]/d[H2O]
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT

  // reaction 239: NC12H26 + OH <=> H2O + SXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[3];
  k_f = 0.074 * exp(2.39 * tc[0] - 0.50321666580472 * (393) * invT);
  dlnkfdT = 2.39 * invT + 0.50321666580472 * (393) * invT2;
  // reverse
  phi_r = sc[6] * sc_qss[14];
  Kc = exp(g_RT[0] + g_RT[3] - g_RT[6] - g_RT_qss[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[3]) + (h_RT[6] + h_RT_qss[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[3] -= q; // OH
  wdot[6] += q; // H2O
  // d()/d[NC12H26]
  dqdci = +k_f * sc[3];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[3] -= dqdci; // dwdot[OH]/d[NC12H26]
  J[6] += dqdci; // dwdot[H2O]/d[NC12H26]
  // d()/d[OH]
  dqdci = +k_f * sc[0];
  J[108] -= dqdci; // dwdot[NC12H26]/d[OH]
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc_qss[14];
  J[216] -= dqdci; // dwdot[NC12H26]/d[H2O]
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT

  // reaction 240: NC12H26 + OH <=> H2O + S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[3];
  k_f = 0.101 * exp(2.39 * tc[0] - 0.50321666580472 * (393) * invT);
  dlnkfdT = 2.39 * invT + 0.50321666580472 * (393) * invT2;
  // reverse
  phi_r = sc[6] * sc_qss[15];
  Kc = exp(g_RT[0] + g_RT[3] - g_RT[6] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[3]) + (h_RT[6] + h_RT_qss[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[3] -= q; // OH
  wdot[6] += q; // H2O
  // d()/d[NC12H26]
  dqdci = +k_f * sc[3];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[3] -= dqdci; // dwdot[OH]/d[NC12H26]
  J[6] += dqdci; // dwdot[H2O]/d[NC12H26]
  // d()/d[OH]
  dqdci = +k_f * sc[0];
  J[108] -= dqdci; // dwdot[NC12H26]/d[OH]
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc_qss[15];
  J[216] -= dqdci; // dwdot[NC12H26]/d[H2O]
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT

  // reaction 241: NC12H26 + O2 <=> HO2 + PXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[8];
  k_f = 40000000 * exp(0 * tc[0] - 0.50321666580472 * (50930) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (50930) * invT2;
  // reverse
  phi_r = sc[4] * sc_qss[13];
  Kc = exp(g_RT[0] - g_RT[4] + g_RT[8] - g_RT_qss[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[8]) + (h_RT[4] + h_RT_qss[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[4] += q; // HO2
  wdot[8] -= q; // O2
  // d()/d[NC12H26]
  dqdci = +k_f * sc[8];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[4] += dqdci; // dwdot[HO2]/d[NC12H26]
  J[8] -= dqdci; // dwdot[O2]/d[NC12H26]
  // d()/d[HO2]
  dqdci = -k_r * sc_qss[13];
  J[144] -= dqdci; // dwdot[NC12H26]/d[HO2]
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[0];
  J[288] -= dqdci; // dwdot[NC12H26]/d[O2]
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT

  // reaction 242: NC12H26 + O2 <=> HO2 + SXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[8];
  k_f = 80000000 * exp(0 * tc[0] - 0.50321666580472 * (47590) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (47590) * invT2;
  // reverse
  phi_r = sc[4] * sc_qss[14];
  Kc = exp(g_RT[0] - g_RT[4] + g_RT[8] - g_RT_qss[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[8]) + (h_RT[4] + h_RT_qss[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[4] += q; // HO2
  wdot[8] -= q; // O2
  // d()/d[NC12H26]
  dqdci = +k_f * sc[8];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[4] += dqdci; // dwdot[HO2]/d[NC12H26]
  J[8] -= dqdci; // dwdot[O2]/d[NC12H26]
  // d()/d[HO2]
  dqdci = -k_r * sc_qss[14];
  J[144] -= dqdci; // dwdot[NC12H26]/d[HO2]
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[0];
  J[288] -= dqdci; // dwdot[NC12H26]/d[O2]
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT

  // reaction 243: NC12H26 + O2 <=> HO2 + S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[8];
  k_f = 120000000 * exp(0 * tc[0] - 0.50321666580472 * (47590) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (47590) * invT2;
  // reverse
  phi_r = sc[4] * sc_qss[15];
  Kc = exp(g_RT[0] - g_RT[4] + g_RT[8] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[8]) + (h_RT[4] + h_RT_qss[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[4] += q; // HO2
  wdot[8] -= q; // O2
  // d()/d[NC12H26]
  dqdci = +k_f * sc[8];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[4] += dqdci; // dwdot[HO2]/d[NC12H26]
  J[8] -= dqdci; // dwdot[O2]/d[NC12H26]
  // d()/d[HO2]
  dqdci = -k_r * sc_qss[15];
  J[144] -= dqdci; // dwdot[NC12H26]/d[HO2]
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[0];
  J[288] -= dqdci; // dwdot[NC12H26]/d[O2]
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT

  // reaction 244: HO2 + NC12H26 <=> H2O2 + PXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0.0676 * exp(2.55 * tc[0] - 0.50321666580472 * (16490) * invT);
  dlnkfdT = 2.55 * invT + 0.50321666580472 * (16490) * invT2;
  // reverse
  phi_r = sc[7] * sc_qss[13];
  Kc = exp(g_RT[0] + g_RT[4] - g_RT[7] - g_RT_qss[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[4]) + (h_RT[7] + h_RT_qss[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[4] -= q; // HO2
  wdot[7] += q; // H2O2
  // d()/d[NC12H26]
  dqdci = +k_f * sc[4];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[4] -= dqdci; // dwdot[HO2]/d[NC12H26]
  J[7] += dqdci; // dwdot[H2O2]/d[NC12H26]
  // d()/d[HO2]
  dqdci = +k_f * sc[0];
  J[144] -= dqdci; // dwdot[NC12H26]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[151] += dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc_qss[13];
  J[252] -= dqdci; // dwdot[NC12H26]/d[H2O2]
  J[256] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[259] += dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1267] += dqdT; // dwdot[H2O2]/dT

  // reaction 245: HO2 + NC12H26 <=> H2O2 + SXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0.089 * exp(2.6 * tc[0] - 0.50321666580472 * (13910) * invT);
  dlnkfdT = 2.6 * invT + 0.50321666580472 * (13910) * invT2;
  // reverse
  phi_r = sc[7] * sc_qss[14];
  Kc = exp(g_RT[0] + g_RT[4] - g_RT[7] - g_RT_qss[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[4]) + (h_RT[7] + h_RT_qss[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[4] -= q; // HO2
  wdot[7] += q; // H2O2
  // d()/d[NC12H26]
  dqdci = +k_f * sc[4];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[4] -= dqdci; // dwdot[HO2]/d[NC12H26]
  J[7] += dqdci; // dwdot[H2O2]/d[NC12H26]
  // d()/d[HO2]
  dqdci = +k_f * sc[0];
  J[144] -= dqdci; // dwdot[NC12H26]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[151] += dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc_qss[14];
  J[252] -= dqdci; // dwdot[NC12H26]/d[H2O2]
  J[256] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[259] += dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1267] += dqdT; // dwdot[H2O2]/dT

  // reaction 246: HO2 + NC12H26 <=> H2O2 + S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0.0885 * exp(2.6 * tc[0] - 0.50321666580472 * (13910) * invT);
  dlnkfdT = 2.6 * invT + 0.50321666580472 * (13910) * invT2;
  // reverse
  phi_r = sc[7] * sc_qss[15];
  Kc = exp(g_RT[0] + g_RT[4] - g_RT[7] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[4]) + (h_RT[7] + h_RT_qss[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[4] -= q; // HO2
  wdot[7] += q; // H2O2
  // d()/d[NC12H26]
  dqdci = +k_f * sc[4];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[4] -= dqdci; // dwdot[HO2]/d[NC12H26]
  J[7] += dqdci; // dwdot[H2O2]/d[NC12H26]
  // d()/d[HO2]
  dqdci = +k_f * sc[0];
  J[144] -= dqdci; // dwdot[NC12H26]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[151] += dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc_qss[15];
  J[252] -= dqdci; // dwdot[NC12H26]/d[H2O2]
  J[256] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[259] += dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1267] += dqdT; // dwdot[H2O2]/dT

  // reaction 247: CH3 + NC12H26 <=> CH4 + PXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[9];
  k_f = 1.81e-06 * exp(3.65 * tc[0] - 0.50321666580472 * (7153) * invT);
  dlnkfdT = 3.65 * invT + 0.50321666580472 * (7153) * invT2;
  // reverse
  phi_r = sc[10] * sc_qss[13];
  Kc = exp(g_RT[0] + g_RT[9] - g_RT[10] - g_RT_qss[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[9]) + (h_RT[10] + h_RT_qss[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // NC12H26
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  // d()/d[NC12H26]
  dqdci = +k_f * sc[9];
  J[0] -= dqdci;  // dwdot[NC12H26]/d[NC12H26]
  J[9] -= dqdci;  // dwdot[CH3]/d[NC12H26]
  J[10] += dqdci; // dwdot[CH4]/d[NC12H26]
  // d()/d[CH3]
  dqdci = +k_f * sc[0];
  J[324] -= dqdci; // dwdot[NC12H26]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc_qss[13];
  J[360] -= dqdci; // dwdot[NC12H26]/d[CH4]
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT

  // reaction 248: CH3 + NC12H26 <=> CH4 + SXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[9];
  k_f = 6e-06 * exp(3.46 * tc[0] - 0.50321666580472 * (5480) * invT);
  dlnkfdT = 3.46 * invT + 0.50321666580472 * (5480) * invT2;
  // reverse
  phi_r = sc[10] * sc_qss[14];
  Kc = exp(g_RT[0] + g_RT[9] - g_RT[10] - g_RT_qss[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[9]) + (h_RT[10] + h_RT_qss[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // NC12H26
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  // d()/d[NC12H26]
  dqdci = +k_f * sc[9];
  J[0] -= dqdci;  // dwdot[NC12H26]/d[NC12H26]
  J[9] -= dqdci;  // dwdot[CH3]/d[NC12H26]
  J[10] += dqdci; // dwdot[CH4]/d[NC12H26]
  // d()/d[CH3]
  dqdci = +k_f * sc[0];
  J[324] -= dqdci; // dwdot[NC12H26]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc_qss[14];
  J[360] -= dqdci; // dwdot[NC12H26]/d[CH4]
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT

  // reaction 249: CH3 + NC12H26 <=> CH4 + S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[9];
  k_f = 9e-06 * exp(3.46 * tc[0] - 0.50321666580472 * (5480) * invT);
  dlnkfdT = 3.46 * invT + 0.50321666580472 * (5480) * invT2;
  // reverse
  phi_r = sc[10] * sc_qss[15];
  Kc = exp(g_RT[0] + g_RT[9] - g_RT[10] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[9]) + (h_RT[10] + h_RT_qss[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // NC12H26
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  // d()/d[NC12H26]
  dqdci = +k_f * sc[9];
  J[0] -= dqdci;  // dwdot[NC12H26]/d[NC12H26]
  J[9] -= dqdci;  // dwdot[CH3]/d[NC12H26]
  J[10] += dqdci; // dwdot[CH4]/d[NC12H26]
  // d()/d[CH3]
  dqdci = +k_f * sc[0];
  J[324] -= dqdci; // dwdot[NC12H26]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc_qss[15];
  J[360] -= dqdci; // dwdot[NC12H26]/d[CH4]
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT

  // reaction 250: O2 + PXC12H25 => C12H25O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[13];
  k_f = 50000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] -= q;  // O2
  wdot[32] += q; // C12H25O2
  // d()/d[O2]
  dqdci = +k_f * sc_qss[13];
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[320] += dqdci; // dwdot[C12H25O2]/d[O2]
  // d()/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1292] += dqdT; // dwdot[C12H25O2]/dT

  // reaction 251: C12H25O2 => O2 + PXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[32];
  k_f = 27500000000000 * exp(0 * tc[0] - 0.50321666580472 * (27400) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (27400) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] += q;  // O2
  wdot[32] -= q; // C12H25O2
  // d()/d[C12H25O2]
  dqdci = +k_f;
  J[1160] += dqdci; // dwdot[O2]/d[C12H25O2]
  J[1184] -= dqdci; // dwdot[C12H25O2]/d[C12H25O2]
  // d()/dT
  J[1268] += dqdT; // dwdot[O2]/dT
  J[1292] -= dqdT; // dwdot[C12H25O2]/dT

  // reaction 252: O2 + SXC12H25 => C12H25O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[14];
  k_f = 50000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] -= q;  // O2
  wdot[32] += q; // C12H25O2
  // d()/d[O2]
  dqdci = +k_f * sc_qss[14];
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[320] += dqdci; // dwdot[C12H25O2]/d[O2]
  // d()/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1292] += dqdT; // dwdot[C12H25O2]/dT

  // reaction 253: C12H25O2 => O2 + SXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[32];
  k_f = 27500000000000 * exp(0 * tc[0] - 0.50321666580472 * (27400) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (27400) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] += q;  // O2
  wdot[32] -= q; // C12H25O2
  // d()/d[C12H25O2]
  dqdci = +k_f;
  J[1160] += dqdci; // dwdot[O2]/d[C12H25O2]
  J[1184] -= dqdci; // dwdot[C12H25O2]/d[C12H25O2]
  // d()/dT
  J[1268] += dqdT; // dwdot[O2]/dT
  J[1292] -= dqdT; // dwdot[C12H25O2]/dT

  // reaction 254: O2 + S3XC12H25 => C12H25O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[15];
  k_f = 50000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] -= q;  // O2
  wdot[32] += q; // C12H25O2
  // d()/d[O2]
  dqdci = +k_f * sc_qss[15];
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[320] += dqdci; // dwdot[C12H25O2]/d[O2]
  // d()/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1292] += dqdT; // dwdot[C12H25O2]/dT

  // reaction 255: C12H25O2 => O2 + S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[32];
  k_f = 27500000000000 * exp(0 * tc[0] - 0.50321666580472 * (27400) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (27400) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] += q;  // O2
  wdot[32] -= q; // C12H25O2
  // d()/d[C12H25O2]
  dqdci = +k_f;
  J[1160] += dqdci; // dwdot[O2]/d[C12H25O2]
  J[1184] -= dqdci; // dwdot[C12H25O2]/d[C12H25O2]
  // d()/dT
  J[1268] += dqdT; // dwdot[O2]/dT
  J[1292] -= dqdT; // dwdot[C12H25O2]/dT

  // reaction 256: C12H25O2 => C12OOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[32];
  k_f = 1510000000000 * exp(0 * tc[0] - 0.50321666580472 * (19000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (19000) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[32] -= q; // C12H25O2
  // d()/d[C12H25O2]
  dqdci = +k_f;
  J[1184] -= dqdci; // dwdot[C12H25O2]/d[C12H25O2]
  // d()/dT
  J[1292] -= dqdT; // dwdot[C12H25O2]/dT

  // reaction 257: C12OOH => C12H25O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[16];
  k_f = 100000000000 * exp(0 * tc[0] - 0.50321666580472 * (11500) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (11500) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[32] += q; // C12H25O2
  // d()/dT
  J[1292] += dqdT; // dwdot[C12H25O2]/dT

  // reaction 258: O2 + PXC12H25 => C12H24 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[13];
  k_f = 350000 * exp(0 * tc[0] - 0.50321666580472 * (6000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (6000) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[31] += q; // C12H24
  // d()/d[O2]
  dqdci = +k_f * sc_qss[13];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[319] += dqdci; // dwdot[C12H24]/d[O2]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1291] += dqdT; // dwdot[C12H24]/dT

  // reaction 259: C12H24 + HO2 => O2 + PXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[31];
  k_f = 316000 * exp(0 * tc[0] - 0.50321666580472 * (19500) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (19500) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[31] -= q; // C12H24
  // d()/d[HO2]
  dqdci = +k_f * sc[31];
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[152] += dqdci; // dwdot[O2]/d[HO2]
  J[175] -= dqdci; // dwdot[C12H24]/d[HO2]
  // d()/d[C12H24]
  dqdci = +k_f * sc[4];
  J[1120] -= dqdci; // dwdot[HO2]/d[C12H24]
  J[1124] += dqdci; // dwdot[O2]/d[C12H24]
  J[1147] -= dqdci; // dwdot[C12H24]/d[C12H24]
  // d()/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1268] += dqdT; // dwdot[O2]/dT
  J[1291] -= dqdT; // dwdot[C12H24]/dT

  // reaction 260: O2 + SXC12H25 => C12H24 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[14];
  k_f = 350000 * exp(0 * tc[0] - 0.50321666580472 * (6000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (6000) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[31] += q; // C12H24
  // d()/d[O2]
  dqdci = +k_f * sc_qss[14];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[319] += dqdci; // dwdot[C12H24]/d[O2]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1291] += dqdT; // dwdot[C12H24]/dT

  // reaction 261: C12H24 + HO2 => O2 + SXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[31];
  k_f = 316000 * exp(0 * tc[0] - 0.50321666580472 * (19500) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (19500) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[31] -= q; // C12H24
  // d()/d[HO2]
  dqdci = +k_f * sc[31];
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[152] += dqdci; // dwdot[O2]/d[HO2]
  J[175] -= dqdci; // dwdot[C12H24]/d[HO2]
  // d()/d[C12H24]
  dqdci = +k_f * sc[4];
  J[1120] -= dqdci; // dwdot[HO2]/d[C12H24]
  J[1124] += dqdci; // dwdot[O2]/d[C12H24]
  J[1147] -= dqdci; // dwdot[C12H24]/d[C12H24]
  // d()/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1268] += dqdT; // dwdot[O2]/dT
  J[1291] -= dqdT; // dwdot[C12H24]/dT

  // reaction 262: O2 + S3XC12H25 => C12H24 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[15];
  k_f = 350000 * exp(0 * tc[0] - 0.50321666580472 * (6000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (6000) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[31] += q; // C12H24
  // d()/d[O2]
  dqdci = +k_f * sc_qss[15];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[319] += dqdci; // dwdot[C12H24]/d[O2]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1291] += dqdT; // dwdot[C12H24]/dT

  // reaction 263: C12H24 + HO2 => O2 + S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[31];
  k_f = 316000 * exp(0 * tc[0] - 0.50321666580472 * (19500) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (19500) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[31] -= q; // C12H24
  // d()/d[HO2]
  dqdci = +k_f * sc[31];
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[152] += dqdci; // dwdot[O2]/d[HO2]
  J[175] -= dqdci; // dwdot[C12H24]/d[HO2]
  // d()/d[C12H24]
  dqdci = +k_f * sc[4];
  J[1120] -= dqdci; // dwdot[HO2]/d[C12H24]
  J[1124] += dqdci; // dwdot[O2]/d[C12H24]
  J[1147] -= dqdci; // dwdot[C12H24]/d[C12H24]
  // d()/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1268] += dqdT; // dwdot[O2]/dT
  J[1291] -= dqdT; // dwdot[C12H24]/dT

  // reaction 264: C12OOH + O2 => O2C12H24OOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[16];
  k_f = 46000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] -= q; // O2
  // d()/d[O2]
  dqdci = +k_f * sc_qss[16];
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1268] -= dqdT; // dwdot[O2]/dT

  // reaction 265: O2C12H24OOH => C12OOH + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[17];
  k_f = 25100000000000 * exp(0 * tc[0] - 0.50321666580472 * (27400) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (27400) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] += q; // O2
  // d()/dT
  J[1268] += dqdT; // dwdot[O2]/dT

  // reaction 266: O2C12H24OOH <=> OC12H23OOH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[17];
  k_f = 89000000000 * exp(0 * tc[0] - 0.50321666580472 * (17000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (17000) * invT2;
  // reverse
  phi_r = sc[3] * sc[33];
  Kc = refC * exp(-g_RT[3] - g_RT[33] + g_RT_qss[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[17]) + (h_RT[3] + h_RT[33]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[33] += q; // OC12H23OOH
  // d()/d[OH]
  dqdci = -k_r * sc[33];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[141] += dqdci; // dwdot[OC12H23OOH]/d[OH]
  // d()/d[OC12H23OOH]
  dqdci = -k_r * sc[3];
  J[1191] += dqdci; // dwdot[OH]/d[OC12H23OOH]
  J[1221] += dqdci; // dwdot[OC12H23OOH]/d[OC12H23OOH]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1293] += dqdT; // dwdot[OC12H23OOH]/dT

  // reaction 267: OC12H23OOH => 3 C2H4 + C2H5 + 2 CH2CHO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[33];
  k_f = 1.8e+15 * exp(0 * tc[0] - 0.50321666580472 * (42065) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (42065) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[3] += q;      // OH
  wdot[15] += 3 * q; // C2H4
  wdot[17] += 2 * q; // CH2CHO
  wdot[33] -= q;     // OC12H23OOH
  // d()/d[OC12H23OOH]
  dqdci = +k_f;
  J[1191] += dqdci;     // dwdot[OH]/d[OC12H23OOH]
  J[1203] += 3 * dqdci; // dwdot[C2H4]/d[OC12H23OOH]
  J[1205] += 2 * dqdci; // dwdot[CH2CHO]/d[OC12H23OOH]
  J[1221] -= dqdci;     // dwdot[OC12H23OOH]/d[OC12H23OOH]
  // d()/dT
  J[1263] += dqdT;     // dwdot[OH]/dT
  J[1275] += 3 * dqdT; // dwdot[C2H4]/dT
  J[1277] += 2 * dqdT; // dwdot[CH2CHO]/dT
  J[1293] -= dqdT;     // dwdot[OC12H23OOH]/dT

  amrex::Real c_R[35], dcRdT[35], e_RT[35];
  amrex::Real* eh_RT;
  if (HP) {
    cp_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    speciesInternalEnergy(e_RT, tc);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 35; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[1260 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 35; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 35; ++m) {
      dehmixdc += eh_RT[m] * J[k * 36 + m];
    }
    J[k * 36 + 35] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[1295] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
}

// compute an approx to the reaction Jacobian (for preconditioning)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT_SIMPLIFIED(
  amrex::Real* J, amrex::Real* sc, amrex::Real* Tp, const int* HP)
{
  amrex::Real c[35];

  for (int k = 0; k < 35; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian_precond(J, c, *Tp, *HP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 35; k++) {
    J[1260 + k] *= 1.e-6;
    J[k * 36 + 35] *= 1.e6;
  }

  return;
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian(amrex::Real* J, amrex::Real* sc, amrex::Real T, const int consP)
{

  // Do not use Analytical Jacobian with QSSA
  amrex::Abort();

  for (int i = 0; i < 1296; i++) {
    J[i] = 0.0;
  }

  amrex::Real wdot[35];
  for (int k = 0; k < 35; k++) {
    wdot[k] = 0.0;
  }

  const amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  amrex::Real invT = 1.0 / tc[1];
  amrex::Real invT2 = invT * invT;

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 / T;
  amrex::Real refCinv = 1.0 / refC;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int k = 0; k < 35; ++k) {
    mixture += sc[k];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[35];
  gibbs(g_RT, tc);
  amrex::Real g_RT_qss[18];
  gibbs_qss(g_RT_qss, tc);

  // compute the species enthalpy
  amrex::Real h_RT[35];
  speciesEnthalpy(h_RT, tc);
  amrex::Real h_RT_qss[18];
  speciesEnthalpy_qss(h_RT_qss, tc);

  // Fill sc_qss here
  amrex::Real sc_qss[18];
  amrex::Real kf_qss[198], qf_qss[198], qr_qss[198];
  comp_k_f_qss(tc, invT, kf_qss);
  comp_qss_coeff(kf_qss, qf_qss, qr_qss, sc, tc, g_RT, g_RT_qss);
  comp_sc_qss(sc_qss, qf_qss, qr_qss);

  amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
  amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
  amrex::Real dqdci, dcdc_fac, dqdc[35];
  amrex::Real Pr, fPr, F, k_0, logPr;
  amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
  amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
  amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
  amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
  const amrex::Real ln10 = log(10.0);
  const amrex::Real log10e = 1.0 / log(10.0);
  // reaction 0: H + O2 (+M) <=> HO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (11.89 - 1) * sc[6] + (0.85 - 1) * sc[8] +
          (1.09 - 1) * sc[12] + (2.18 - 1) * sc[13];
  // forward
  phi_f = sc[1] * sc[8];
  k_f = 5116000 * exp(0.44 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0.44 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 6.328e+19 * exp(-1.4 * tc[0] - 0.50321666580472 * (0) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.4 * invT + 0.50321666580472 * (0) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5) * exp(-T / 1e-30);
  Fcent2 = 0.5 * exp(-T / 1e+30);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1e+30);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[4];
  Kc = refCinv * exp(g_RT[1] - g_RT[4] + g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[8]) + (h_RT[4]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q; // H
  wdot[4] += q; // HO2
  wdot[8] -= q; // O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * sc[8];
    J[37] -= dqdci; // dwdot[H]/d[H]
    J[40] += dqdci; // dwdot[HO2]/d[H]
    J[44] -= dqdci; // dwdot[O2]/d[H]
    // d()/d[HO2]
    dqdci = -k_r;
    J[145] -= dqdci; // dwdot[H]/d[HO2]
    J[148] += dqdci; // dwdot[HO2]/d[HO2]
    J[152] -= dqdci; // dwdot[O2]/d[HO2]
    // d()/d[H2O]
    dqdci = (11.89 - 1) * dcdc_fac;
    J[217] -= dqdci; // dwdot[H]/d[H2O]
    J[220] += dqdci; // dwdot[HO2]/d[H2O]
    J[224] -= dqdci; // dwdot[O2]/d[H2O]
    // d()/d[O2]
    dqdci = (0.85 - 1) * dcdc_fac + k_f * sc[1];
    J[289] -= dqdci; // dwdot[H]/d[O2]
    J[292] += dqdci; // dwdot[HO2]/d[O2]
    J[296] -= dqdci; // dwdot[O2]/d[O2]
    // d()/d[CO]
    dqdci = (1.09 - 1) * dcdc_fac;
    J[433] -= dqdci; // dwdot[H]/d[CO]
    J[436] += dqdci; // dwdot[HO2]/d[CO]
    J[440] -= dqdci; // dwdot[O2]/d[CO]
    // d()/d[CO2]
    dqdci = (2.18 - 1) * dcdc_fac;
    J[469] -= dqdci; // dwdot[H]/d[CO2]
    J[472] += dqdci; // dwdot[HO2]/d[CO2]
    J[476] -= dqdci; // dwdot[O2]/d[CO2]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[8];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac - k_r;
    dqdc[5] = dcdc_fac;
    dqdc[6] = 11.89 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = 0.85 * dcdc_fac + k_f * sc[1];
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.09 * dcdc_fac;
    dqdc[13] = 2.18 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] -= dqdc[k];
      J[36 * k + 4] += dqdc[k];
      J[36 * k + 8] -= dqdc[k];
    }
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT

  // reaction 1: 2 OH (+M) <=> H2O2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + (1.75 - 1) * sc[12] +
          (3.6 - 1) * sc[13];
  // forward
  phi_f = (sc[3] * sc[3]);
  k_f = 111000000 * exp(-0.37 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -0.37 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 2.01e+17 * exp(-0.584 * tc[0] - 0.50321666580472 * (-2293) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -0.584 * invT + 0.50321666580472 * (-2293) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7346) * exp(-T / 94);
  Fcent2 = 0.7346 * exp(-T / 1756);
  Fcent3 = exp(-5182 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 94 - Fcent2 / 1756 + Fcent3 * 5182 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[7];
  Kc = refCinv * exp(2.000000 * g_RT[3] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[3]) + (h_RT[7]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[3] -= 2 * q; // OH
  wdot[7] += q;     // H2O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[OH]
    dqdci = +k_f * 2.000000 * sc[3];
    J[111] += -2 * dqdci; // dwdot[OH]/d[OH]
    J[115] += dqdci;      // dwdot[H2O2]/d[OH]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[183] += -2 * dqdci; // dwdot[OH]/d[H2]
    J[187] += dqdci;      // dwdot[H2O2]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[219] += -2 * dqdci; // dwdot[OH]/d[H2O]
    J[223] += dqdci;      // dwdot[H2O2]/d[H2O]
    // d()/d[H2O2]
    dqdci = -k_r;
    J[255] += -2 * dqdci; // dwdot[OH]/d[H2O2]
    J[259] += dqdci;      // dwdot[H2O2]/d[H2O2]
    // d()/d[CO]
    dqdci = (1.75 - 1) * dcdc_fac;
    J[435] += -2 * dqdci; // dwdot[OH]/d[CO]
    J[439] += dqdci;      // dwdot[H2O2]/d[CO]
    // d()/d[CO2]
    dqdci = (3.6 - 1) * dcdc_fac;
    J[471] += -2 * dqdci; // dwdot[OH]/d[CO2]
    J[475] += dqdci;      // dwdot[H2O2]/d[CO2]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac + k_f * 2.000000 * sc[3];
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac - k_r;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.75 * dcdc_fac;
    dqdc[13] = 3.6 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 3] += -2 * dqdc[k];
      J[36 * k + 7] += dqdc[k];
    }
  }
  J[1263] += -2 * dqdT; // dwdot[OH]/dT
  J[1267] += dqdT;      // dwdot[H2O2]/dT

  // reaction 2: CO + H2 (+M) <=> CH2O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[5] * sc[12];
  k_f = 43 * exp(1.5 * tc[0] - 0.50321666580472 * (79600) * invT);
  dlnkfdT = 1.5 * invT + 0.50321666580472 * (79600) * invT2;
  // pressure-fall-off
  k_0 = 5.07e+27 * exp(-3.42 * tc[0] - 0.50321666580472 * (84350) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.42 * invT + 0.50321666580472 * (84350) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.932) * exp(-T / 197);
  Fcent2 = 0.932 * exp(-T / 1540);
  Fcent3 = exp(-10300 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 197 - Fcent2 / 1540 + Fcent3 * 10300 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[11];
  Kc = refCinv * exp(g_RT[5] - g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[12]) + (h_RT[11]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[5] -= q;  // H2
  wdot[11] += q; // CH2O
  wdot[12] -= q; // CO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac + k_f * sc[12];
    J[185] -= dqdci; // dwdot[H2]/d[H2]
    J[191] += dqdci; // dwdot[CH2O]/d[H2]
    J[192] -= dqdci; // dwdot[CO]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[221] -= dqdci; // dwdot[H2]/d[H2O]
    J[227] += dqdci; // dwdot[CH2O]/d[H2O]
    J[228] -= dqdci; // dwdot[CO]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[365] -= dqdci; // dwdot[H2]/d[CH4]
    J[371] += dqdci; // dwdot[CH2O]/d[CH4]
    J[372] -= dqdci; // dwdot[CO]/d[CH4]
    // d()/d[CH2O]
    dqdci = -k_r;
    J[401] -= dqdci; // dwdot[H2]/d[CH2O]
    J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
    J[408] -= dqdci; // dwdot[CO]/d[CH2O]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac + k_f * sc[5];
    J[437] -= dqdci; // dwdot[H2]/d[CO]
    J[443] += dqdci; // dwdot[CH2O]/d[CO]
    J[444] -= dqdci; // dwdot[CO]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[473] -= dqdci; // dwdot[H2]/d[CO2]
    J[479] += dqdci; // dwdot[CH2O]/d[CO2]
    J[480] -= dqdci; // dwdot[CO]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[581] -= dqdci; // dwdot[H2]/d[C2H6]
    J[587] += dqdci; // dwdot[CH2O]/d[C2H6]
    J[588] -= dqdci; // dwdot[CO]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac + k_f * sc[12];
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac - k_r;
    dqdc[12] = 1.5 * dcdc_fac + k_f * sc[5];
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = 3 * dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 5] -= dqdc[k];
      J[36 * k + 11] += dqdc[k];
      J[36 * k + 12] -= dqdc[k];
    }
  }
  J[1265] -= dqdT; // dwdot[H2]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT
  J[1272] -= dqdT; // dwdot[CO]/dT

  // reaction 3: H + HCO (+M) <=> CH2O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc_qss[2];
  k_f = 1090000 * exp(0.48 * tc[0] - 0.50321666580472 * (-260) * invT);
  dlnkfdT = 0.48 * invT + 0.50321666580472 * (-260) * invT2;
  // pressure-fall-off
  k_0 = 1.35e+24 * exp(-2.57 * tc[0] - 0.50321666580472 * (1425) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.57 * invT + 0.50321666580472 * (1425) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7824) * exp(-T / 271);
  Fcent2 = 0.7824 * exp(-T / 2755);
  Fcent3 = exp(-6570 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 271 - Fcent2 / 2755 + Fcent3 * 6570 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[11];
  Kc = refCinv * exp(g_RT[1] - g_RT[11] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[2]) + (h_RT[11]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[11] += q; // CH2O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * sc_qss[2];
    J[37] -= dqdci; // dwdot[H]/d[H]
    J[47] += dqdci; // dwdot[CH2O]/d[H]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[181] -= dqdci; // dwdot[H]/d[H2]
    J[191] += dqdci; // dwdot[CH2O]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[217] -= dqdci; // dwdot[H]/d[H2O]
    J[227] += dqdci; // dwdot[CH2O]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[361] -= dqdci; // dwdot[H]/d[CH4]
    J[371] += dqdci; // dwdot[CH2O]/d[CH4]
    // d()/d[CH2O]
    dqdci = -k_r;
    J[397] -= dqdci; // dwdot[H]/d[CH2O]
    J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[433] -= dqdci; // dwdot[H]/d[CO]
    J[443] += dqdci; // dwdot[CH2O]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[469] -= dqdci; // dwdot[H]/d[CO2]
    J[479] += dqdci; // dwdot[CH2O]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[577] -= dqdci; // dwdot[H]/d[C2H6]
    J[587] += dqdci; // dwdot[CH2O]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc_qss[2];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac - k_r;
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = 3 * dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] -= dqdc[k];
      J[36 * k + 11] += dqdc[k];
    }
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 4: CH2 + H (+M) <=> CH3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc_qss[0];
  k_f = 25000000000 * exp(-0.8 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -0.8 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 3.2e+27 * exp(-3.14 * tc[0] - 0.50321666580472 * (1230) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.14 * invT + 0.50321666580472 * (1230) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.68) * exp(-T / 78);
  Fcent2 = 0.68 * exp(-T / 1995);
  Fcent3 = exp(-5590 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 78 - Fcent2 / 1995 + Fcent3 * 5590 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[9];
  Kc = refCinv * exp(g_RT[1] - g_RT[9] + g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[0]) + (h_RT[9]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q; // H
  wdot[9] += q; // CH3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * sc_qss[0];
    J[37] -= dqdci; // dwdot[H]/d[H]
    J[45] += dqdci; // dwdot[CH3]/d[H]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[181] -= dqdci; // dwdot[H]/d[H2]
    J[189] += dqdci; // dwdot[CH3]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[217] -= dqdci; // dwdot[H]/d[H2O]
    J[225] += dqdci; // dwdot[CH3]/d[H2O]
    // d()/d[CH3]
    dqdci = -k_r;
    J[325] -= dqdci; // dwdot[H]/d[CH3]
    J[333] += dqdci; // dwdot[CH3]/d[CH3]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[361] -= dqdci; // dwdot[H]/d[CH4]
    J[369] += dqdci; // dwdot[CH3]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[433] -= dqdci; // dwdot[H]/d[CO]
    J[441] += dqdci; // dwdot[CH3]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[469] -= dqdci; // dwdot[H]/d[CO2]
    J[477] += dqdci; // dwdot[CH3]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[577] -= dqdci; // dwdot[H]/d[C2H6]
    J[585] += dqdci; // dwdot[CH3]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc_qss[0];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac - k_r;
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = 3 * dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] -= dqdc[k];
      J[36 * k + 9] += dqdc[k];
    }
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT

  // reaction 5: CH2O + H (+M) <=> CH3O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 540000 * exp(0.454 * tc[0] - 0.50321666580472 * (2600) * invT);
  dlnkfdT = 0.454 * invT + 0.50321666580472 * (2600) * invT2;
  // pressure-fall-off
  k_0 = 2.2e+30 * exp(-4.8 * tc[0] - 0.50321666580472 * (5560) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.8 * invT + 0.50321666580472 * (5560) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.758) * exp(-T / 94);
  Fcent2 = 0.758 * exp(-T / 1555);
  Fcent3 = exp(-4200 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 94 - Fcent2 / 1555 + Fcent3 * 4200 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc_qss[3];
  Kc = refCinv * exp(g_RT[1] + g_RT[11] - g_RT_qss[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[11]) + (h_RT_qss[3]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[11] -= q; // CH2O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * sc[11];
    J[37] -= dqdci; // dwdot[H]/d[H]
    J[47] -= dqdci; // dwdot[CH2O]/d[H]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[181] -= dqdci; // dwdot[H]/d[H2]
    J[191] -= dqdci; // dwdot[CH2O]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[217] -= dqdci; // dwdot[H]/d[H2O]
    J[227] -= dqdci; // dwdot[CH2O]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[361] -= dqdci; // dwdot[H]/d[CH4]
    J[371] -= dqdci; // dwdot[CH2O]/d[CH4]
    // d()/d[CH2O]
    dqdci = +k_f * sc[1];
    J[397] -= dqdci; // dwdot[H]/d[CH2O]
    J[407] -= dqdci; // dwdot[CH2O]/d[CH2O]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[433] -= dqdci; // dwdot[H]/d[CO]
    J[443] -= dqdci; // dwdot[CH2O]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[469] -= dqdci; // dwdot[H]/d[CO2]
    J[479] -= dqdci; // dwdot[CH2O]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[577] -= dqdci; // dwdot[H]/d[C2H6]
    J[587] -= dqdci; // dwdot[CH2O]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[11];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac + k_f * sc[1];
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = 3 * dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] -= dqdc[k];
      J[36 * k + 11] -= dqdc[k];
    }
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1271] -= dqdT; // dwdot[CH2O]/dT

  // reaction 6: CH3 + H (+M) <=> CH4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[9];
  k_f = 12700000000 * exp(-0.63 * tc[0] - 0.50321666580472 * (383) * invT);
  dlnkfdT = -0.63 * invT + 0.50321666580472 * (383) * invT2;
  // pressure-fall-off
  k_0 = 2.477e+33 * exp(-4.76 * tc[0] - 0.50321666580472 * (2440) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.76 * invT + 0.50321666580472 * (2440) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.783) * exp(-T / 74);
  Fcent2 = 0.783 * exp(-T / 2941);
  Fcent3 = exp(-6964 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 74 - Fcent2 / 2941 + Fcent3 * 6964 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[10];
  Kc = refCinv * exp(g_RT[1] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[9]) + (h_RT[10]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * sc[9];
    J[37] -= dqdci; // dwdot[H]/d[H]
    J[45] -= dqdci; // dwdot[CH3]/d[H]
    J[46] += dqdci; // dwdot[CH4]/d[H]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[181] -= dqdci; // dwdot[H]/d[H2]
    J[189] -= dqdci; // dwdot[CH3]/d[H2]
    J[190] += dqdci; // dwdot[CH4]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[217] -= dqdci; // dwdot[H]/d[H2O]
    J[225] -= dqdci; // dwdot[CH3]/d[H2O]
    J[226] += dqdci; // dwdot[CH4]/d[H2O]
    // d()/d[CH3]
    dqdci = +k_f * sc[1];
    J[325] -= dqdci; // dwdot[H]/d[CH3]
    J[333] -= dqdci; // dwdot[CH3]/d[CH3]
    J[334] += dqdci; // dwdot[CH4]/d[CH3]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac - k_r;
    J[361] -= dqdci; // dwdot[H]/d[CH4]
    J[369] -= dqdci; // dwdot[CH3]/d[CH4]
    J[370] += dqdci; // dwdot[CH4]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[433] -= dqdci; // dwdot[H]/d[CO]
    J[441] -= dqdci; // dwdot[CH3]/d[CO]
    J[442] += dqdci; // dwdot[CH4]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[469] -= dqdci; // dwdot[H]/d[CO2]
    J[477] -= dqdci; // dwdot[CH3]/d[CO2]
    J[478] += dqdci; // dwdot[CH4]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[577] -= dqdci; // dwdot[H]/d[C2H6]
    J[585] -= dqdci; // dwdot[CH3]/d[C2H6]
    J[586] += dqdci; // dwdot[CH4]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[9];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac + k_f * sc[1];
    dqdc[10] = 2 * dcdc_fac - k_r;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = 3 * dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] -= dqdc[k];
      J[36 * k + 9] -= dqdc[k];
      J[36 * k + 10] += dqdc[k];
    }
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT

  // reaction 7: 2 CH3 (+M) <=> C2H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = (sc[9] * sc[9]);
  k_f = 21200000000 * exp(-0.97 * tc[0] - 0.50321666580472 * (620) * invT);
  dlnkfdT = -0.97 * invT + 0.50321666580472 * (620) * invT2;
  // pressure-fall-off
  k_0 = 1.77e+50 * exp(-9.67 * tc[0] - 0.50321666580472 * (6220) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -9.67 * invT + 0.50321666580472 * (6220) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5325) * exp(-T / 151);
  Fcent2 = 0.5325 * exp(-T / 1038);
  Fcent3 = exp(-4970 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 151 - Fcent2 / 1038 + Fcent3 * 4970 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[16];
  Kc = refCinv * exp(2.000000 * g_RT[9] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[9]) + (h_RT[16]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= 2 * q; // CH3
  wdot[16] += q;    // C2H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[189] += -2 * dqdci; // dwdot[CH3]/d[H2]
    J[196] += dqdci;      // dwdot[C2H6]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[225] += -2 * dqdci; // dwdot[CH3]/d[H2O]
    J[232] += dqdci;      // dwdot[C2H6]/d[H2O]
    // d()/d[CH3]
    dqdci = +k_f * 2.000000 * sc[9];
    J[333] += -2 * dqdci; // dwdot[CH3]/d[CH3]
    J[340] += dqdci;      // dwdot[C2H6]/d[CH3]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[369] += -2 * dqdci; // dwdot[CH3]/d[CH4]
    J[376] += dqdci;      // dwdot[C2H6]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[441] += -2 * dqdci; // dwdot[CH3]/d[CO]
    J[448] += dqdci;      // dwdot[C2H6]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[477] += -2 * dqdci; // dwdot[CH3]/d[CO2]
    J[484] += dqdci;      // dwdot[C2H6]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac - k_r;
    J[585] += -2 * dqdci; // dwdot[CH3]/d[C2H6]
    J[592] += dqdci;      // dwdot[C2H6]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac + k_f * 2.000000 * sc[9];
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = 3 * dcdc_fac - k_r;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 9] += -2 * dqdc[k];
      J[36 * k + 16] += dqdc[k];
    }
  }
  J[1269] += -2 * dqdT; // dwdot[CH3]/dT
  J[1276] += dqdT;      // dwdot[C2H6]/dT

  // reaction 8: C2H3 (+M) <=> C2H2 + H (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[14] + (3 - 1) * sc[15] + (3 - 1) * sc[16];
  // forward
  phi_f = sc_qss[4];
  k_f = 38600000 * exp(1.62 * tc[0] - 0.50321666580472 * (37048.2) * invT);
  dlnkfdT = 1.62 * invT + 0.50321666580472 * (37048.2) * invT2;
  // pressure-fall-off
  k_0 = 2.565e+27 * exp(-3.4 * tc[0] - 0.50321666580472 * (35798.72) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.4 * invT + 0.50321666580472 * (35798.72) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1.9816) * exp(-T / 5383.7);
  Fcent2 = 1.9816 * exp(-T / 4.2932);
  Fcent3 = exp(0.0795 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 5383.7 - Fcent2 / 4.2932 + Fcent3 * -0.0795 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = refC * exp(-g_RT[1] - g_RT[14] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[4]) + (h_RT[1] + h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] += q;  // H
  wdot[14] += q; // C2H2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H]
    dqdci = -k_r * sc[14];
    J[37] += dqdci; // dwdot[H]/d[H]
    J[50] += dqdci; // dwdot[C2H2]/d[H]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[181] += dqdci; // dwdot[H]/d[H2]
    J[194] += dqdci; // dwdot[C2H2]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[217] += dqdci; // dwdot[H]/d[H2O]
    J[230] += dqdci; // dwdot[C2H2]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[361] += dqdci; // dwdot[H]/d[CH4]
    J[374] += dqdci; // dwdot[C2H2]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[433] += dqdci; // dwdot[H]/d[CO]
    J[446] += dqdci; // dwdot[C2H2]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[469] += dqdci; // dwdot[H]/d[CO2]
    J[482] += dqdci; // dwdot[C2H2]/d[CO2]
    // d()/d[C2H2]
    dqdci = (3 - 1) * dcdc_fac - k_r * sc[1];
    J[505] += dqdci; // dwdot[H]/d[C2H2]
    J[518] += dqdci; // dwdot[C2H2]/d[C2H2]
    // d()/d[C2H4]
    dqdci = (3 - 1) * dcdc_fac;
    J[541] += dqdci; // dwdot[H]/d[C2H4]
    J[554] += dqdci; // dwdot[C2H2]/d[C2H4]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[577] += dqdci; // dwdot[H]/d[C2H6]
    J[590] += dqdci; // dwdot[C2H2]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac - k_r * sc[14];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 3 * dcdc_fac - k_r * sc[1];
    dqdc[15] = 3 * dcdc_fac;
    dqdc[16] = 3 * dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] += dqdc[k];
      J[36 * k + 14] += dqdc[k];
    }
  }
  J[1261] += dqdT; // dwdot[H]/dT
  J[1274] += dqdT; // dwdot[C2H2]/dT

  // reaction 9: C2H3 + H (+M) <=> C2H4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[14] + (3 - 1) * sc[15] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc_qss[4];
  k_f = 6080000 * exp(0.27 * tc[0] - 0.50321666580472 * (280) * invT);
  dlnkfdT = 0.27 * invT + 0.50321666580472 * (280) * invT2;
  // pressure-fall-off
  k_0 = 1.4e+30 * exp(-3.86 * tc[0] - 0.50321666580472 * (3320) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.86 * invT + 0.50321666580472 * (3320) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.782) * exp(-T / 207.5);
  Fcent2 = 0.782 * exp(-T / 2663);
  Fcent3 = exp(-6095 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 207.5 - Fcent2 / 2663 + Fcent3 * 6095 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[15];
  Kc = refCinv * exp(g_RT[1] - g_RT[15] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[4]) + (h_RT[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[15] += q; // C2H4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * sc_qss[4];
    J[37] -= dqdci; // dwdot[H]/d[H]
    J[51] += dqdci; // dwdot[C2H4]/d[H]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[181] -= dqdci; // dwdot[H]/d[H2]
    J[195] += dqdci; // dwdot[C2H4]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[217] -= dqdci; // dwdot[H]/d[H2O]
    J[231] += dqdci; // dwdot[C2H4]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[361] -= dqdci; // dwdot[H]/d[CH4]
    J[375] += dqdci; // dwdot[C2H4]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[433] -= dqdci; // dwdot[H]/d[CO]
    J[447] += dqdci; // dwdot[C2H4]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[469] -= dqdci; // dwdot[H]/d[CO2]
    J[483] += dqdci; // dwdot[C2H4]/d[CO2]
    // d()/d[C2H2]
    dqdci = (3 - 1) * dcdc_fac;
    J[505] -= dqdci; // dwdot[H]/d[C2H2]
    J[519] += dqdci; // dwdot[C2H4]/d[C2H2]
    // d()/d[C2H4]
    dqdci = (3 - 1) * dcdc_fac - k_r;
    J[541] -= dqdci; // dwdot[H]/d[C2H4]
    J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[577] -= dqdci; // dwdot[H]/d[C2H6]
    J[591] += dqdci; // dwdot[C2H4]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc_qss[4];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 3 * dcdc_fac;
    dqdc[15] = 3 * dcdc_fac - k_r;
    dqdc[16] = 3 * dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] -= dqdc[k];
      J[36 * k + 15] += dqdc[k];
    }
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT

  // reaction 10: C2H3 + CH3 (+M) <=> C3H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[14] + (3 - 1) * sc[15] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[9] * sc_qss[4];
  k_f = 25000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 4.27e+58 * exp(-11.94 * tc[0] - 0.50321666580472 * (9769.8) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -11.94 * invT + 0.50321666580472 * (9769.8) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.175) * exp(-T / 1340.6);
  Fcent2 = 0.175 * exp(-T / 60000);
  Fcent3 = exp(-10139.8 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1340.6 - Fcent2 / 60000 + Fcent3 * 10139.8 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[19];
  Kc = refCinv * exp(g_RT[9] - g_RT[19] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT_qss[4]) + (h_RT[19]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[19] += q; // C3H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[189] -= dqdci; // dwdot[CH3]/d[H2]
    J[199] += dqdci; // dwdot[C3H6]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[225] -= dqdci; // dwdot[CH3]/d[H2O]
    J[235] += dqdci; // dwdot[C3H6]/d[H2O]
    // d()/d[CH3]
    dqdci = +k_f * sc_qss[4];
    J[333] -= dqdci; // dwdot[CH3]/d[CH3]
    J[343] += dqdci; // dwdot[C3H6]/d[CH3]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[369] -= dqdci; // dwdot[CH3]/d[CH4]
    J[379] += dqdci; // dwdot[C3H6]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[441] -= dqdci; // dwdot[CH3]/d[CO]
    J[451] += dqdci; // dwdot[C3H6]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[477] -= dqdci; // dwdot[CH3]/d[CO2]
    J[487] += dqdci; // dwdot[C3H6]/d[CO2]
    // d()/d[C2H2]
    dqdci = (3 - 1) * dcdc_fac;
    J[513] -= dqdci; // dwdot[CH3]/d[C2H2]
    J[523] += dqdci; // dwdot[C3H6]/d[C2H2]
    // d()/d[C2H4]
    dqdci = (3 - 1) * dcdc_fac;
    J[549] -= dqdci; // dwdot[CH3]/d[C2H4]
    J[559] += dqdci; // dwdot[C3H6]/d[C2H4]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[585] -= dqdci; // dwdot[CH3]/d[C2H6]
    J[595] += dqdci; // dwdot[C3H6]/d[C2H6]
    // d()/d[C3H6]
    dqdci = -k_r;
    J[693] -= dqdci; // dwdot[CH3]/d[C3H6]
    J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac + k_f * sc_qss[4];
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 3 * dcdc_fac;
    dqdc[15] = 3 * dcdc_fac;
    dqdc[16] = 3 * dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac - k_r;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 9] -= dqdc[k];
      J[36 * k + 19] += dqdc[k];
    }
  }
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT

  // reaction 11: C2H4 + H (+M) <=> C2H5 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[15];
  k_f = 3975 * exp(1.28 * tc[0] - 0.50321666580472 * (1290.63) * invT);
  dlnkfdT = 1.28 * invT + 0.50321666580472 * (1290.63) * invT2;
  // pressure-fall-off
  k_0 = 4.715e+18 * exp(0 * tc[0] - 0.50321666580472 * (755.26) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = 0 * invT + 0.50321666580472 * (755.26) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.76) * exp(-T / 40);
  Fcent2 = 0.76 * exp(-T / 1025);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 40 - Fcent2 / 1025);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc_qss[5];
  Kc = refCinv * exp(g_RT[1] + g_RT[15] - g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[15]) + (h_RT_qss[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[15] -= q; // C2H4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * sc[15];
    J[37] -= dqdci; // dwdot[H]/d[H]
    J[51] -= dqdci; // dwdot[C2H4]/d[H]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[181] -= dqdci; // dwdot[H]/d[H2]
    J[195] -= dqdci; // dwdot[C2H4]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[217] -= dqdci; // dwdot[H]/d[H2O]
    J[231] -= dqdci; // dwdot[C2H4]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[361] -= dqdci; // dwdot[H]/d[CH4]
    J[375] -= dqdci; // dwdot[C2H4]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[433] -= dqdci; // dwdot[H]/d[CO]
    J[447] -= dqdci; // dwdot[C2H4]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[469] -= dqdci; // dwdot[H]/d[CO2]
    J[483] -= dqdci; // dwdot[C2H4]/d[CO2]
    // d()/d[C2H4]
    dqdci = +k_f * sc[1];
    J[541] -= dqdci; // dwdot[H]/d[C2H4]
    J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[577] -= dqdci; // dwdot[H]/d[C2H6]
    J[591] -= dqdci; // dwdot[C2H4]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[15];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac + k_f * sc[1];
    dqdc[16] = 3 * dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] -= dqdc[k];
      J[36 * k + 15] -= dqdc[k];
    }
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 12: C2H5 + H (+M) <=> C2H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc_qss[5];
  k_f = 521000000000 * exp(-0.99 * tc[0] - 0.50321666580472 * (1580) * invT);
  dlnkfdT = -0.99 * invT + 0.50321666580472 * (1580) * invT2;
  // pressure-fall-off
  k_0 = 1.99e+41 * exp(-7.08 * tc[0] - 0.50321666580472 * (6685) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.08 * invT + 0.50321666580472 * (6685) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.8422) * exp(-T / 125);
  Fcent2 = 0.8422 * exp(-T / 2219);
  Fcent3 = exp(-6882 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 125 - Fcent2 / 2219 + Fcent3 * 6882 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[16];
  Kc = refCinv * exp(g_RT[1] - g_RT[16] + g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[5]) + (h_RT[16]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[16] += q; // C2H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * sc_qss[5];
    J[37] -= dqdci; // dwdot[H]/d[H]
    J[52] += dqdci; // dwdot[C2H6]/d[H]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[181] -= dqdci; // dwdot[H]/d[H2]
    J[196] += dqdci; // dwdot[C2H6]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[217] -= dqdci; // dwdot[H]/d[H2O]
    J[232] += dqdci; // dwdot[C2H6]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[361] -= dqdci; // dwdot[H]/d[CH4]
    J[376] += dqdci; // dwdot[C2H6]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[433] -= dqdci; // dwdot[H]/d[CO]
    J[448] += dqdci; // dwdot[C2H6]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[469] -= dqdci; // dwdot[H]/d[CO2]
    J[484] += dqdci; // dwdot[C2H6]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac - k_r;
    J[577] -= dqdci; // dwdot[H]/d[C2H6]
    J[592] += dqdci; // dwdot[C2H6]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc_qss[5];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = 3 * dcdc_fac - k_r;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] -= dqdc[k];
      J[36 * k + 16] += dqdc[k];
    }
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1276] += dqdT; // dwdot[C2H6]/dT

  // reaction 13: C2H3 + C2H5 (+M) <=> C4H81 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc_qss[4] * sc_qss[5];
  k_f = 15000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  // Remove forward reaction
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 1.55e+56 * exp(-11.79 * tc[0] - 0.50321666580472 * (8984.5) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -11.79 * invT + 0.50321666580472 * (8984.5) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.198) * exp(-T / 2277.9);
  Fcent2 = 0.198 * exp(-T / 60000);
  Fcent3 = exp(-5723.2 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 2277.9 - Fcent2 / 60000 + Fcent3 * 5723.2 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[22];
  Kc = refCinv * exp(-g_RT[22] + g_RT_qss[4] + g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[4] + h_RT_qss[5]) + (h_RT[22]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  // Remove forward reaction
  // q_nocor = k_f*phi_f - k_r*phi_r;
  q_nocor = -k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  // Remove forward reaction
  // dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
  dqdT = Corr * (-dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[22] += q; // C4H81
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[202] += dqdci; // dwdot[C4H81]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[238] += dqdci; // dwdot[C4H81]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[382] += dqdci; // dwdot[C4H81]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[454] += dqdci; // dwdot[C4H81]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[490] += dqdci; // dwdot[C4H81]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[598] += dqdci; // dwdot[C4H81]/d[C2H6]
    // d()/d[C4H81]
    dqdci = -k_r;
    J[814] += dqdci; // dwdot[C4H81]/d[C4H81]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = 3 * dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac - k_r;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 22] += dqdc[k];
    }
  }
  J[1282] += dqdT; // dwdot[C4H81]/dT

  // reaction 14: H + aC3H5 (+M) <=> C3H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[18];
  k_f = 200000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 1.33e+60 * exp(-12 * tc[0] - 0.50321666580472 * (5967.8) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -12 * invT + 0.50321666580472 * (5967.8) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.02) * exp(-T / 1096.6);
  Fcent2 = 0.02 * exp(-T / 1096.6);
  Fcent3 = exp(-6859.5 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1096.6 - Fcent2 / 1096.6 + Fcent3 * 6859.5 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[19];
  Kc = refCinv * exp(g_RT[1] + g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[18]) + (h_RT[19]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[18] -= q; // aC3H5
  wdot[19] += q; // C3H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * sc[18];
    J[37] -= dqdci; // dwdot[H]/d[H]
    J[54] -= dqdci; // dwdot[aC3H5]/d[H]
    J[55] += dqdci; // dwdot[C3H6]/d[H]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[181] -= dqdci; // dwdot[H]/d[H2]
    J[198] -= dqdci; // dwdot[aC3H5]/d[H2]
    J[199] += dqdci; // dwdot[C3H6]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[217] -= dqdci; // dwdot[H]/d[H2O]
    J[234] -= dqdci; // dwdot[aC3H5]/d[H2O]
    J[235] += dqdci; // dwdot[C3H6]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[361] -= dqdci; // dwdot[H]/d[CH4]
    J[378] -= dqdci; // dwdot[aC3H5]/d[CH4]
    J[379] += dqdci; // dwdot[C3H6]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[433] -= dqdci; // dwdot[H]/d[CO]
    J[450] -= dqdci; // dwdot[aC3H5]/d[CO]
    J[451] += dqdci; // dwdot[C3H6]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[469] -= dqdci; // dwdot[H]/d[CO2]
    J[486] -= dqdci; // dwdot[aC3H5]/d[CO2]
    J[487] += dqdci; // dwdot[C3H6]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[577] -= dqdci; // dwdot[H]/d[C2H6]
    J[594] -= dqdci; // dwdot[aC3H5]/d[C2H6]
    J[595] += dqdci; // dwdot[C3H6]/d[C2H6]
    // d()/d[aC3H5]
    dqdci = +k_f * sc[1];
    J[649] -= dqdci; // dwdot[H]/d[aC3H5]
    J[666] -= dqdci; // dwdot[aC3H5]/d[aC3H5]
    J[667] += dqdci; // dwdot[C3H6]/d[aC3H5]
    // d()/d[C3H6]
    dqdci = -k_r;
    J[685] -= dqdci; // dwdot[H]/d[C3H6]
    J[702] -= dqdci; // dwdot[aC3H5]/d[C3H6]
    J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[18];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = 3 * dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac + k_f * sc[1];
    dqdc[19] = dcdc_fac - k_r;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] -= dqdc[k];
      J[36 * k + 18] -= dqdc[k];
      J[36 * k + 19] += dqdc[k];
    }
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1278] -= dqdT; // dwdot[aC3H5]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT

  // reaction 15: CH3 + aC3H5 (+M) <=> C4H81 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[9] * sc[18];
  k_f = 100000000 * exp(-0.32 * tc[0] - 0.50321666580472 * (-262.3) * invT);
  dlnkfdT = -0.32 * invT + 0.50321666580472 * (-262.3) * invT2;
  // pressure-fall-off
  k_0 = 3.91e+60 * exp(-12.81 * tc[0] - 0.50321666580472 * (6250) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -12.81 * invT + 0.50321666580472 * (6250) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.104) * exp(-T / 1606);
  Fcent2 = 0.104 * exp(-T / 60000);
  Fcent3 = exp(-6118.4 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1606 - Fcent2 / 60000 + Fcent3 * 6118.4 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[22];
  Kc = refCinv * exp(g_RT[9] + g_RT[18] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[18]) + (h_RT[22]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[18] -= q; // aC3H5
  wdot[22] += q; // C4H81
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[189] -= dqdci; // dwdot[CH3]/d[H2]
    J[198] -= dqdci; // dwdot[aC3H5]/d[H2]
    J[202] += dqdci; // dwdot[C4H81]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[225] -= dqdci; // dwdot[CH3]/d[H2O]
    J[234] -= dqdci; // dwdot[aC3H5]/d[H2O]
    J[238] += dqdci; // dwdot[C4H81]/d[H2O]
    // d()/d[CH3]
    dqdci = +k_f * sc[18];
    J[333] -= dqdci; // dwdot[CH3]/d[CH3]
    J[342] -= dqdci; // dwdot[aC3H5]/d[CH3]
    J[346] += dqdci; // dwdot[C4H81]/d[CH3]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[369] -= dqdci; // dwdot[CH3]/d[CH4]
    J[378] -= dqdci; // dwdot[aC3H5]/d[CH4]
    J[382] += dqdci; // dwdot[C4H81]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[441] -= dqdci; // dwdot[CH3]/d[CO]
    J[450] -= dqdci; // dwdot[aC3H5]/d[CO]
    J[454] += dqdci; // dwdot[C4H81]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[477] -= dqdci; // dwdot[CH3]/d[CO2]
    J[486] -= dqdci; // dwdot[aC3H5]/d[CO2]
    J[490] += dqdci; // dwdot[C4H81]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[585] -= dqdci; // dwdot[CH3]/d[C2H6]
    J[594] -= dqdci; // dwdot[aC3H5]/d[C2H6]
    J[598] += dqdci; // dwdot[C4H81]/d[C2H6]
    // d()/d[aC3H5]
    dqdci = +k_f * sc[9];
    J[657] -= dqdci; // dwdot[CH3]/d[aC3H5]
    J[666] -= dqdci; // dwdot[aC3H5]/d[aC3H5]
    J[670] += dqdci; // dwdot[C4H81]/d[aC3H5]
    // d()/d[C4H81]
    dqdci = -k_r;
    J[801] -= dqdci; // dwdot[CH3]/d[C4H81]
    J[810] -= dqdci; // dwdot[aC3H5]/d[C4H81]
    J[814] += dqdci; // dwdot[C4H81]/d[C4H81]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac + k_f * sc[18];
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = 3 * dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac + k_f * sc[9];
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac - k_r;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 9] -= dqdc[k];
      J[36 * k + 18] -= dqdc[k];
      J[36 * k + 22] += dqdc[k];
    }
  }
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1278] -= dqdT; // dwdot[aC3H5]/dT
  J[1282] += dqdT; // dwdot[C4H81]/dT

  // reaction 16: C3H6 + H (+M) <=> nC3H7 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 13300000 * exp(0 * tc[0] - 0.50321666580472 * (3260.7) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3260.7) * invT2;
  // pressure-fall-off
  k_0 = 6.26e+38 * exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.66 * invT + 0.50321666580472 * (7000) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1000);
  Fcent2 = 1 * exp(-T / 1310);
  Fcent3 = exp(-48097 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1000 - Fcent2 / 1310 + Fcent3 * 48097 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc_qss[6];
  Kc = refCinv * exp(g_RT[1] + g_RT[19] - g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT_qss[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[19] -= q; // C3H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * sc[19];
    J[37] -= dqdci; // dwdot[H]/d[H]
    J[55] -= dqdci; // dwdot[C3H6]/d[H]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[181] -= dqdci; // dwdot[H]/d[H2]
    J[199] -= dqdci; // dwdot[C3H6]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[217] -= dqdci; // dwdot[H]/d[H2O]
    J[235] -= dqdci; // dwdot[C3H6]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[361] -= dqdci; // dwdot[H]/d[CH4]
    J[379] -= dqdci; // dwdot[C3H6]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[433] -= dqdci; // dwdot[H]/d[CO]
    J[451] -= dqdci; // dwdot[C3H6]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[469] -= dqdci; // dwdot[H]/d[CO2]
    J[487] -= dqdci; // dwdot[C3H6]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[577] -= dqdci; // dwdot[H]/d[C2H6]
    J[595] -= dqdci; // dwdot[C3H6]/d[C2H6]
    // d()/d[C3H6]
    dqdci = +k_f * sc[1];
    J[685] -= dqdci; // dwdot[H]/d[C3H6]
    J[703] -= dqdci; // dwdot[C3H6]/d[C3H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[19];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = 3 * dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac + k_f * sc[1];
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] -= dqdc[k];
      J[36 * k + 19] -= dqdc[k];
    }
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1279] -= dqdT; // dwdot[C3H6]/dT

  // reaction 17: C4H7 + H (+M) <=> C4H81 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[21];
  k_f = 36000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 3.01e+48 * exp(-9.32 * tc[0] - 0.50321666580472 * (5833.6) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -9.32 * invT + 0.50321666580472 * (5833.6) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.498) * exp(-T / 1314);
  Fcent2 = 0.498 * exp(-T / 1314);
  Fcent3 = exp(-50000 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1314 - Fcent2 / 1314 + Fcent3 * 50000 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[22];
  Kc = refCinv * exp(g_RT[1] + g_RT[21] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[21]) + (h_RT[22]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[21] -= q; // C4H7
  wdot[22] += q; // C4H81
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * sc[21];
    J[37] -= dqdci; // dwdot[H]/d[H]
    J[57] -= dqdci; // dwdot[C4H7]/d[H]
    J[58] += dqdci; // dwdot[C4H81]/d[H]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[181] -= dqdci; // dwdot[H]/d[H2]
    J[201] -= dqdci; // dwdot[C4H7]/d[H2]
    J[202] += dqdci; // dwdot[C4H81]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[217] -= dqdci; // dwdot[H]/d[H2O]
    J[237] -= dqdci; // dwdot[C4H7]/d[H2O]
    J[238] += dqdci; // dwdot[C4H81]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[361] -= dqdci; // dwdot[H]/d[CH4]
    J[381] -= dqdci; // dwdot[C4H7]/d[CH4]
    J[382] += dqdci; // dwdot[C4H81]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[433] -= dqdci; // dwdot[H]/d[CO]
    J[453] -= dqdci; // dwdot[C4H7]/d[CO]
    J[454] += dqdci; // dwdot[C4H81]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[469] -= dqdci; // dwdot[H]/d[CO2]
    J[489] -= dqdci; // dwdot[C4H7]/d[CO2]
    J[490] += dqdci; // dwdot[C4H81]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[577] -= dqdci; // dwdot[H]/d[C2H6]
    J[597] -= dqdci; // dwdot[C4H7]/d[C2H6]
    J[598] += dqdci; // dwdot[C4H81]/d[C2H6]
    // d()/d[C4H7]
    dqdci = +k_f * sc[1];
    J[757] -= dqdci; // dwdot[H]/d[C4H7]
    J[777] -= dqdci; // dwdot[C4H7]/d[C4H7]
    J[778] += dqdci; // dwdot[C4H81]/d[C4H7]
    // d()/d[C4H81]
    dqdci = -k_r;
    J[793] -= dqdci; // dwdot[H]/d[C4H81]
    J[813] -= dqdci; // dwdot[C4H7]/d[C4H81]
    J[814] += dqdci; // dwdot[C4H81]/d[C4H81]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[21];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = 3 * dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac + k_f * sc[1];
    dqdc[22] = dcdc_fac - k_r;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] -= dqdc[k];
      J[36 * k + 21] -= dqdc[k];
      J[36 * k + 22] += dqdc[k];
    }
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1281] -= dqdT; // dwdot[C4H7]/dT
  J[1282] += dqdT; // dwdot[C4H81]/dT

  // reaction 18: C4H81 + H (+M) <=> pC4H9 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[22];
  k_f = 13300000 * exp(0 * tc[0] - 0.50321666580472 * (3260.7) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3260.7) * invT2;
  // pressure-fall-off
  k_0 = 6.26e+38 * exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.66 * invT + 0.50321666580472 * (7000) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1000);
  Fcent2 = 1 * exp(-T / 1310);
  Fcent3 = exp(-48097 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1000 - Fcent2 / 1310 + Fcent3 * 48097 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc_qss[7];
  Kc = refCinv * exp(g_RT[1] + g_RT[22] - g_RT_qss[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[22]) + (h_RT_qss[7]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[22] -= q; // C4H81
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * sc[22];
    J[37] -= dqdci; // dwdot[H]/d[H]
    J[58] -= dqdci; // dwdot[C4H81]/d[H]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[181] -= dqdci; // dwdot[H]/d[H2]
    J[202] -= dqdci; // dwdot[C4H81]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[217] -= dqdci; // dwdot[H]/d[H2O]
    J[238] -= dqdci; // dwdot[C4H81]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[361] -= dqdci; // dwdot[H]/d[CH4]
    J[382] -= dqdci; // dwdot[C4H81]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[433] -= dqdci; // dwdot[H]/d[CO]
    J[454] -= dqdci; // dwdot[C4H81]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[469] -= dqdci; // dwdot[H]/d[CO2]
    J[490] -= dqdci; // dwdot[C4H81]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[577] -= dqdci; // dwdot[H]/d[C2H6]
    J[598] -= dqdci; // dwdot[C4H81]/d[C2H6]
    // d()/d[C4H81]
    dqdci = +k_f * sc[1];
    J[793] -= dqdci; // dwdot[H]/d[C4H81]
    J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[22];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = 3 * dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac + k_f * sc[1];
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] -= dqdc[k];
      J[36 * k + 22] -= dqdc[k];
    }
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 19: C5H10 + H (+M) <=> PXC5H11 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[24];
  k_f = 13300000 * exp(0 * tc[0] - 0.50321666580472 * (3260.7) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3260.7) * invT2;
  // pressure-fall-off
  k_0 = 6.26e+38 * exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.66 * invT + 0.50321666580472 * (7000) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1000);
  Fcent2 = 1 * exp(-T / 1310);
  Fcent3 = exp(-48097 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1000 - Fcent2 / 1310 + Fcent3 * 48097 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc_qss[8];
  Kc = refCinv * exp(g_RT[1] + g_RT[24] - g_RT_qss[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[24]) + (h_RT_qss[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[24] -= q; // C5H10
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * sc[24];
    J[37] -= dqdci; // dwdot[H]/d[H]
    J[60] -= dqdci; // dwdot[C5H10]/d[H]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[181] -= dqdci; // dwdot[H]/d[H2]
    J[204] -= dqdci; // dwdot[C5H10]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[217] -= dqdci; // dwdot[H]/d[H2O]
    J[240] -= dqdci; // dwdot[C5H10]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[361] -= dqdci; // dwdot[H]/d[CH4]
    J[384] -= dqdci; // dwdot[C5H10]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[433] -= dqdci; // dwdot[H]/d[CO]
    J[456] -= dqdci; // dwdot[C5H10]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[469] -= dqdci; // dwdot[H]/d[CO2]
    J[492] -= dqdci; // dwdot[C5H10]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[577] -= dqdci; // dwdot[H]/d[C2H6]
    J[600] -= dqdci; // dwdot[C5H10]/d[C2H6]
    // d()/d[C5H10]
    dqdci = +k_f * sc[1];
    J[865] -= dqdci; // dwdot[H]/d[C5H10]
    J[888] -= dqdci; // dwdot[C5H10]/d[C5H10]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[24];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = 3 * dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac + k_f * sc[1];
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] -= dqdc[k];
      J[36 * k + 24] -= dqdc[k];
    }
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1284] -= dqdT; // dwdot[C5H10]/dT

  // reaction 20: C6H12 + H (+M) <=> PXC6H13 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[25];
  k_f = 13300000 * exp(0 * tc[0] - 0.50321666580472 * (3260.7) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3260.7) * invT2;
  // pressure-fall-off
  k_0 = 6.26e+38 * exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.66 * invT + 0.50321666580472 * (7000) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1000);
  Fcent2 = 1 * exp(-T / 1310);
  Fcent3 = exp(-48097 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1000 - Fcent2 / 1310 + Fcent3 * 48097 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc_qss[9];
  Kc = refCinv * exp(g_RT[1] + g_RT[25] - g_RT_qss[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[25]) + (h_RT_qss[9]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[25] -= q; // C6H12
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * sc[25];
    J[37] -= dqdci; // dwdot[H]/d[H]
    J[61] -= dqdci; // dwdot[C6H12]/d[H]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[181] -= dqdci; // dwdot[H]/d[H2]
    J[205] -= dqdci; // dwdot[C6H12]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[217] -= dqdci; // dwdot[H]/d[H2O]
    J[241] -= dqdci; // dwdot[C6H12]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[361] -= dqdci; // dwdot[H]/d[CH4]
    J[385] -= dqdci; // dwdot[C6H12]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[433] -= dqdci; // dwdot[H]/d[CO]
    J[457] -= dqdci; // dwdot[C6H12]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[469] -= dqdci; // dwdot[H]/d[CO2]
    J[493] -= dqdci; // dwdot[C6H12]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[577] -= dqdci; // dwdot[H]/d[C2H6]
    J[601] -= dqdci; // dwdot[C6H12]/d[C2H6]
    // d()/d[C6H12]
    dqdci = +k_f * sc[1];
    J[901] -= dqdci; // dwdot[H]/d[C6H12]
    J[925] -= dqdci; // dwdot[C6H12]/d[C6H12]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[25];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = 3 * dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac + k_f * sc[1];
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] -= dqdc[k];
      J[36 * k + 25] -= dqdc[k];
    }
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1285] -= dqdT; // dwdot[C6H12]/dT

  // reaction 21: C7H14 + H (+M) <=> PXC7H15 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[26];
  k_f = 13300000 * exp(0 * tc[0] - 0.50321666580472 * (3260.7) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3260.7) * invT2;
  // pressure-fall-off
  k_0 = 6.26e+38 * exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.66 * invT + 0.50321666580472 * (7000) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1000);
  Fcent2 = 1 * exp(-T / 1310);
  Fcent3 = exp(-48097 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1000 - Fcent2 / 1310 + Fcent3 * 48097 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc_qss[10];
  Kc = refCinv * exp(g_RT[1] + g_RT[26] - g_RT_qss[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[26]) + (h_RT_qss[10]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[26] -= q; // C7H14
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * sc[26];
    J[37] -= dqdci; // dwdot[H]/d[H]
    J[62] -= dqdci; // dwdot[C7H14]/d[H]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[181] -= dqdci; // dwdot[H]/d[H2]
    J[206] -= dqdci; // dwdot[C7H14]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[217] -= dqdci; // dwdot[H]/d[H2O]
    J[242] -= dqdci; // dwdot[C7H14]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[361] -= dqdci; // dwdot[H]/d[CH4]
    J[386] -= dqdci; // dwdot[C7H14]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[433] -= dqdci; // dwdot[H]/d[CO]
    J[458] -= dqdci; // dwdot[C7H14]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[469] -= dqdci; // dwdot[H]/d[CO2]
    J[494] -= dqdci; // dwdot[C7H14]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[577] -= dqdci; // dwdot[H]/d[C2H6]
    J[602] -= dqdci; // dwdot[C7H14]/d[C2H6]
    // d()/d[C7H14]
    dqdci = +k_f * sc[1];
    J[937] -= dqdci; // dwdot[H]/d[C7H14]
    J[962] -= dqdci; // dwdot[C7H14]/d[C7H14]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[26];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = 3 * dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac + k_f * sc[1];
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] -= dqdc[k];
      J[36 * k + 26] -= dqdc[k];
    }
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1286] -= dqdT; // dwdot[C7H14]/dT

  // reaction 22: C8H16 + H (+M) <=> PXC8H17 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[27];
  k_f = 13300000 * exp(0 * tc[0] - 0.50321666580472 * (3260.7) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3260.7) * invT2;
  // pressure-fall-off
  k_0 = 6.26e+38 * exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.66 * invT + 0.50321666580472 * (7000) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1000);
  Fcent2 = 1 * exp(-T / 1310);
  Fcent3 = exp(-48097 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1000 - Fcent2 / 1310 + Fcent3 * 48097 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc_qss[11];
  Kc = refCinv * exp(g_RT[1] + g_RT[27] - g_RT_qss[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[27]) + (h_RT_qss[11]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[27] -= q; // C8H16
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * sc[27];
    J[37] -= dqdci; // dwdot[H]/d[H]
    J[63] -= dqdci; // dwdot[C8H16]/d[H]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[181] -= dqdci; // dwdot[H]/d[H2]
    J[207] -= dqdci; // dwdot[C8H16]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[217] -= dqdci; // dwdot[H]/d[H2O]
    J[243] -= dqdci; // dwdot[C8H16]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[361] -= dqdci; // dwdot[H]/d[CH4]
    J[387] -= dqdci; // dwdot[C8H16]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[433] -= dqdci; // dwdot[H]/d[CO]
    J[459] -= dqdci; // dwdot[C8H16]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[469] -= dqdci; // dwdot[H]/d[CO2]
    J[495] -= dqdci; // dwdot[C8H16]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[577] -= dqdci; // dwdot[H]/d[C2H6]
    J[603] -= dqdci; // dwdot[C8H16]/d[C2H6]
    // d()/d[C8H16]
    dqdci = +k_f * sc[1];
    J[973] -= dqdci; // dwdot[H]/d[C8H16]
    J[999] -= dqdci; // dwdot[C8H16]/d[C8H16]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[27];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = 3 * dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac + k_f * sc[1];
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] -= dqdc[k];
      J[36 * k + 27] -= dqdc[k];
    }
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1287] -= dqdT; // dwdot[C8H16]/dT

  // reaction 23: C9H18 + H (+M) <=> PXC9H19 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[28];
  k_f = 13300000 * exp(0 * tc[0] - 0.50321666580472 * (3260.7) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3260.7) * invT2;
  // pressure-fall-off
  k_0 = 6.26e+38 * exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.66 * invT + 0.50321666580472 * (7000) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1000);
  Fcent2 = 1 * exp(-T / 1310);
  Fcent3 = exp(-48097 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1000 - Fcent2 / 1310 + Fcent3 * 48097 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[29];
  Kc = refCinv * exp(g_RT[1] + g_RT[28] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[28]) + (h_RT[29]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[28] -= q; // C9H18
  wdot[29] += q; // PXC9H19
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * sc[28];
    J[37] -= dqdci; // dwdot[H]/d[H]
    J[64] -= dqdci; // dwdot[C9H18]/d[H]
    J[65] += dqdci; // dwdot[PXC9H19]/d[H]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[181] -= dqdci; // dwdot[H]/d[H2]
    J[208] -= dqdci; // dwdot[C9H18]/d[H2]
    J[209] += dqdci; // dwdot[PXC9H19]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[217] -= dqdci; // dwdot[H]/d[H2O]
    J[244] -= dqdci; // dwdot[C9H18]/d[H2O]
    J[245] += dqdci; // dwdot[PXC9H19]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[361] -= dqdci; // dwdot[H]/d[CH4]
    J[388] -= dqdci; // dwdot[C9H18]/d[CH4]
    J[389] += dqdci; // dwdot[PXC9H19]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[433] -= dqdci; // dwdot[H]/d[CO]
    J[460] -= dqdci; // dwdot[C9H18]/d[CO]
    J[461] += dqdci; // dwdot[PXC9H19]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[469] -= dqdci; // dwdot[H]/d[CO2]
    J[496] -= dqdci; // dwdot[C9H18]/d[CO2]
    J[497] += dqdci; // dwdot[PXC9H19]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[577] -= dqdci; // dwdot[H]/d[C2H6]
    J[604] -= dqdci; // dwdot[C9H18]/d[C2H6]
    J[605] += dqdci; // dwdot[PXC9H19]/d[C2H6]
    // d()/d[C9H18]
    dqdci = +k_f * sc[1];
    J[1009] -= dqdci; // dwdot[H]/d[C9H18]
    J[1036] -= dqdci; // dwdot[C9H18]/d[C9H18]
    J[1037] += dqdci; // dwdot[PXC9H19]/d[C9H18]
    // d()/d[PXC9H19]
    dqdci = -k_r;
    J[1045] -= dqdci; // dwdot[H]/d[PXC9H19]
    J[1072] -= dqdci; // dwdot[C9H18]/d[PXC9H19]
    J[1073] += dqdci; // dwdot[PXC9H19]/d[PXC9H19]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[28];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = 3 * dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac + k_f * sc[1];
    dqdc[29] = dcdc_fac - k_r;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] -= dqdc[k];
      J[36 * k + 28] -= dqdc[k];
      J[36 * k + 29] += dqdc[k];
    }
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1288] -= dqdT; // dwdot[C9H18]/dT
  J[1289] += dqdT; // dwdot[PXC9H19]/dT

  // reaction 24: C10H20 + H (+M) <=> PXC10H21 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6 - 1) * sc[6] + sc[10] + (1.5 - 1) * sc[12] +
          sc[13] + (3 - 1) * sc[16];
  // forward
  phi_f = sc[1] * sc[30];
  k_f = 13300000 * exp(0 * tc[0] - 0.50321666580472 * (3260.7) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3260.7) * invT2;
  // pressure-fall-off
  k_0 = 6.26e+38 * exp(-6.66 * tc[0] - 0.50321666580472 * (7000) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.66 * invT + 0.50321666580472 * (7000) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 1000);
  Fcent2 = 1 * exp(-T / 1310);
  Fcent3 = exp(-48097 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1000 - Fcent2 / 1310 + Fcent3 * 48097 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc_qss[12];
  Kc = refCinv * exp(g_RT[1] + g_RT[30] - g_RT_qss[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[30]) + (h_RT_qss[12]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[30] -= q; // C10H20
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * sc[30];
    J[37] -= dqdci; // dwdot[H]/d[H]
    J[66] -= dqdci; // dwdot[C10H20]/d[H]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[181] -= dqdci; // dwdot[H]/d[H2]
    J[210] -= dqdci; // dwdot[C10H20]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[217] -= dqdci; // dwdot[H]/d[H2O]
    J[246] -= dqdci; // dwdot[C10H20]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[361] -= dqdci; // dwdot[H]/d[CH4]
    J[390] -= dqdci; // dwdot[C10H20]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[433] -= dqdci; // dwdot[H]/d[CO]
    J[462] -= dqdci; // dwdot[C10H20]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[469] -= dqdci; // dwdot[H]/d[CO2]
    J[498] -= dqdci; // dwdot[C10H20]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[577] -= dqdci; // dwdot[H]/d[C2H6]
    J[606] -= dqdci; // dwdot[C10H20]/d[C2H6]
    // d()/d[C10H20]
    dqdci = +k_f * sc[1];
    J[1081] -= dqdci; // dwdot[H]/d[C10H20]
    J[1110] -= dqdci; // dwdot[C10H20]/d[C10H20]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[30];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 6 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = 2 * dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.5 * dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = 3 * dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac + k_f * sc[1];
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] -= dqdc[k];
      J[36 * k + 30] -= dqdc[k];
    }
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1290] -= dqdT; // dwdot[C10H20]/dT

  // reaction 25: CO + O (+M) <=> CO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (12 - 1) * sc[6] + (1.75 - 1) * sc[12] +
          (3.6 - 1) * sc[13];
  // forward
  phi_f = sc[2] * sc[12];
  k_f = 13620 * exp(0 * tc[0] - 0.50321666580472 * (2384) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (2384) * invT2;
  // pressure-fall-off
  k_0 = 1.173e+24 * exp(-2.79 * tc[0] - 0.50321666580472 * (4191) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.79 * invT + 0.50321666580472 * (4191) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  dlogFdlogPr = 0.0;
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[13];
  Kc = refCinv * exp(g_RT[2] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[12]) + (h_RT[13]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] -= q;  // O
  wdot[12] -= q; // CO
  wdot[13] += q; // CO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[O]
    dqdci = +k_f * sc[12];
    J[74] -= dqdci; // dwdot[O]/d[O]
    J[84] -= dqdci; // dwdot[CO]/d[O]
    J[85] += dqdci; // dwdot[CO2]/d[O]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[182] -= dqdci; // dwdot[O]/d[H2]
    J[192] -= dqdci; // dwdot[CO]/d[H2]
    J[193] += dqdci; // dwdot[CO2]/d[H2]
    // d()/d[H2O]
    dqdci = (12 - 1) * dcdc_fac;
    J[218] -= dqdci; // dwdot[O]/d[H2O]
    J[228] -= dqdci; // dwdot[CO]/d[H2O]
    J[229] += dqdci; // dwdot[CO2]/d[H2O]
    // d()/d[CO]
    dqdci = (1.75 - 1) * dcdc_fac + k_f * sc[2];
    J[434] -= dqdci; // dwdot[O]/d[CO]
    J[444] -= dqdci; // dwdot[CO]/d[CO]
    J[445] += dqdci; // dwdot[CO2]/d[CO]
    // d()/d[CO2]
    dqdci = (3.6 - 1) * dcdc_fac - k_r;
    J[470] -= dqdci; // dwdot[O]/d[CO2]
    J[480] -= dqdci; // dwdot[CO]/d[CO2]
    J[481] += dqdci; // dwdot[CO2]/d[CO2]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac + k_f * sc[12];
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 2 * dcdc_fac;
    dqdc[6] = 12 * dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = 1.75 * dcdc_fac + k_f * sc[2];
    dqdc[13] = 3.6 * dcdc_fac - k_r;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 2] -= dqdc[k];
      J[36 * k + 12] -= dqdc[k];
      J[36 * k + 13] += dqdc[k];
    }
  }
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1272] -= dqdT; // dwdot[CO]/dT
  J[1273] += dqdT; // dwdot[CO2]/dT

  // reaction 26: 2 H + M <=> H2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0 - 1) * sc[5] + (0 - 1) * sc[6] + (0 - 1) * sc[13];
  // forward
  phi_f = (sc[1] * sc[1]);
  k_f = 1780000 * exp(-1 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -1 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[5];
  Kc = refCinv * exp(2.000000 * g_RT[1] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[1]) + (h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= 2 * q; // H
  wdot[5] += q;     // H2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * 2.000000 * sc[1];
    J[37] += -2 * dqdci; // dwdot[H]/d[H]
    J[41] += dqdci;      // dwdot[H2]/d[H]
    // d()/d[H2]
    dqdci = (0 - 1) * q_nocor - k_r;
    J[181] += -2 * dqdci; // dwdot[H]/d[H2]
    J[185] += dqdci;      // dwdot[H2]/d[H2]
    // d()/d[H2O]
    dqdci = (0 - 1) * q_nocor;
    J[217] += -2 * dqdci; // dwdot[H]/d[H2O]
    J[221] += dqdci;      // dwdot[H2]/d[H2O]
    // d()/d[CO2]
    dqdci = (0 - 1) * q_nocor;
    J[469] += -2 * dqdci; // dwdot[H]/d[CO2]
    J[473] += dqdci;      // dwdot[H2]/d[CO2]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor + k_f * 2.000000 * sc[1];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = -k_r;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] += -2 * dqdc[k];
      J[36 * k + 5] += dqdc[k];
    }
  }
  J[1261] += -2 * dqdT; // dwdot[H]/dT
  J[1265] += dqdT;      // dwdot[H2]/dT

  // reaction 27: H + OH + M <=> H2O + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (6.3 - 1) * sc[6] + (1.75 - 1) * sc[12] +
          (3.6 - 1) * sc[13];
  // forward
  phi_f = sc[1] * sc[3];
  k_f = 44000000000 * exp(-2 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -2 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[6];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[3]) + (h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // OH
  wdot[6] += q; // H2O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * sc[3];
    J[37] -= dqdci; // dwdot[H]/d[H]
    J[39] -= dqdci; // dwdot[OH]/d[H]
    J[42] += dqdci; // dwdot[H2O]/d[H]
    // d()/d[OH]
    dqdci = +k_f * sc[1];
    J[109] -= dqdci; // dwdot[H]/d[OH]
    J[111] -= dqdci; // dwdot[OH]/d[OH]
    J[114] += dqdci; // dwdot[H2O]/d[OH]
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[181] -= dqdci; // dwdot[H]/d[H2]
    J[183] -= dqdci; // dwdot[OH]/d[H2]
    J[186] += dqdci; // dwdot[H2O]/d[H2]
    // d()/d[H2O]
    dqdci = (6.3 - 1) * q_nocor - k_r;
    J[217] -= dqdci; // dwdot[H]/d[H2O]
    J[219] -= dqdci; // dwdot[OH]/d[H2O]
    J[222] += dqdci; // dwdot[H2O]/d[H2O]
    // d()/d[CO]
    dqdci = (1.75 - 1) * q_nocor;
    J[433] -= dqdci; // dwdot[H]/d[CO]
    J[435] -= dqdci; // dwdot[OH]/d[CO]
    J[438] += dqdci; // dwdot[H2O]/d[CO]
    // d()/d[CO2]
    dqdci = (3.6 - 1) * q_nocor;
    J[469] -= dqdci; // dwdot[H]/d[CO2]
    J[471] -= dqdci; // dwdot[OH]/d[CO2]
    J[474] += dqdci; // dwdot[H2O]/d[CO2]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor + k_f * sc[3];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor + k_f * sc[1];
    dqdc[4] = q_nocor;
    dqdc[5] = 2 * q_nocor;
    dqdc[6] = 6.3 * q_nocor - k_r;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = 1.75 * q_nocor;
    dqdc[13] = 3.6 * q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] -= dqdc[k];
      J[36 * k + 3] -= dqdc[k];
      J[36 * k + 6] += dqdc[k];
    }
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT

  // reaction 28: 2 O + M <=> O2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.4 - 1) * sc[5] + (15.4 - 1) * sc[6] +
          (1.75 - 1) * sc[12] + (3.6 - 1) * sc[13];
  // forward
  phi_f = (sc[2] * sc[2]);
  k_f = 120000 * exp(-1 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -1 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[8];
  Kc = refCinv * exp(2.000000 * g_RT[2] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[2]) + (h_RT[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= 2 * q; // O
  wdot[8] += q;     // O2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP) {
    // d()/d[O]
    dqdci = +k_f * 2.000000 * sc[2];
    J[74] += -2 * dqdci; // dwdot[O]/d[O]
    J[80] += dqdci;      // dwdot[O2]/d[O]
    // d()/d[H2]
    dqdci = (2.4 - 1) * q_nocor;
    J[182] += -2 * dqdci; // dwdot[O]/d[H2]
    J[188] += dqdci;      // dwdot[O2]/d[H2]
    // d()/d[H2O]
    dqdci = (15.4 - 1) * q_nocor;
    J[218] += -2 * dqdci; // dwdot[O]/d[H2O]
    J[224] += dqdci;      // dwdot[O2]/d[H2O]
    // d()/d[O2]
    dqdci = -k_r;
    J[290] += -2 * dqdci; // dwdot[O]/d[O2]
    J[296] += dqdci;      // dwdot[O2]/d[O2]
    // d()/d[CO]
    dqdci = (1.75 - 1) * q_nocor;
    J[434] += -2 * dqdci; // dwdot[O]/d[CO]
    J[440] += dqdci;      // dwdot[O2]/d[CO]
    // d()/d[CO2]
    dqdci = (3.6 - 1) * q_nocor;
    J[470] += -2 * dqdci; // dwdot[O]/d[CO2]
    J[476] += dqdci;      // dwdot[O2]/d[CO2]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor + k_f * 2.000000 * sc[2];
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 2.4 * q_nocor;
    dqdc[6] = 15.4 * q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor - k_r;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = 1.75 * q_nocor;
    dqdc[13] = 3.6 * q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 2] += -2 * dqdc[k];
      J[36 * k + 8] += dqdc[k];
    }
  }
  J[1262] += -2 * dqdT; // dwdot[O]/dT
  J[1268] += dqdT;      // dwdot[O2]/dT

  // reaction 29: 2 H + H2 <=> H2 + H2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[5];
  k_f = 90000 * exp(-0.6 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -0.6 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = (sc[5] * sc[5]);
  Kc = refCinv * exp(2.000000 * g_RT[1] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[5]) + (2.000000 * h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= 2 * q; // H
  wdot[5] += q;     // H2
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[5];
  J[37] += -2 * dqdci; // dwdot[H]/d[H]
  J[41] += dqdci;      // dwdot[H2]/d[H]
  // d()/d[H2]
  dqdci = +k_f * pow(sc[1], 2.000000) - k_r * 2.000000 * sc[5];
  J[181] += -2 * dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci;      // dwdot[H2]/d[H2]
  // d()/dT
  J[1261] += -2 * dqdT; // dwdot[H]/dT
  J[1265] += dqdT;      // dwdot[H2]/dT

  // reaction 30: 2 H + H2O <=> H2 + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[6];
  k_f = 56240000 * exp(-1.25 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -1.25 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = refCinv * exp(2.000000 * g_RT[1] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[6]) + (h_RT[5] + h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= 2 * q; // H
  wdot[5] += q;     // H2
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[6];
  J[37] += -2 * dqdci; // dwdot[H]/d[H]
  J[41] += dqdci;      // dwdot[H2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[6];
  J[181] += -2 * dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci;      // dwdot[H2]/d[H2]
  // d()/d[H2O]
  dqdci = +k_f * pow(sc[1], 2.000000) - k_r * sc[5];
  J[217] += -2 * dqdci; // dwdot[H]/d[H2O]
  J[221] += dqdci;      // dwdot[H2]/d[H2O]
  // d()/dT
  J[1261] += -2 * dqdT; // dwdot[H]/dT
  J[1265] += dqdT;      // dwdot[H2]/dT

  // reaction 31: 2 H + CO2 <=> H2 + CO2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[13];
  k_f = 550000000 * exp(-2 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -2 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[5] * sc[13];
  Kc = refCinv * exp(2.000000 * g_RT[1] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[13]) + (h_RT[5] + h_RT[13]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= 2 * q; // H
  wdot[5] += q;     // H2
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[13];
  J[37] += -2 * dqdci; // dwdot[H]/d[H]
  J[41] += dqdci;      // dwdot[H2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[13];
  J[181] += -2 * dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci;      // dwdot[H2]/d[H2]
  // d()/d[CO2]
  dqdci = +k_f * pow(sc[1], 2.000000) - k_r * sc[5];
  J[469] += -2 * dqdci; // dwdot[H]/d[CO2]
  J[473] += dqdci;      // dwdot[H2]/d[CO2]
  // d()/dT
  J[1261] += -2 * dqdT; // dwdot[H]/dT
  J[1265] += dqdT;      // dwdot[H2]/dT

  // reaction 32: H + O + M <=> OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (12 - 1) * sc[6] + (1.75 - 1) * sc[12] +
          (3.6 - 1) * sc[13];
  // forward
  phi_f = sc[1] * sc[2];
  k_f = 9428000 * exp(-1 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -1 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3];
  Kc = refCinv * exp(g_RT[1] + g_RT[2] - g_RT[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[2]) + (h_RT[3]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] -= q; // O
  wdot[3] += q; // OH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * sc[2];
    J[37] -= dqdci; // dwdot[H]/d[H]
    J[38] -= dqdci; // dwdot[O]/d[H]
    J[39] += dqdci; // dwdot[OH]/d[H]
    // d()/d[O]
    dqdci = +k_f * sc[1];
    J[73] -= dqdci; // dwdot[H]/d[O]
    J[74] -= dqdci; // dwdot[O]/d[O]
    J[75] += dqdci; // dwdot[OH]/d[O]
    // d()/d[OH]
    dqdci = -k_r;
    J[109] -= dqdci; // dwdot[H]/d[OH]
    J[110] -= dqdci; // dwdot[O]/d[OH]
    J[111] += dqdci; // dwdot[OH]/d[OH]
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[181] -= dqdci; // dwdot[H]/d[H2]
    J[182] -= dqdci; // dwdot[O]/d[H2]
    J[183] += dqdci; // dwdot[OH]/d[H2]
    // d()/d[H2O]
    dqdci = (12 - 1) * q_nocor;
    J[217] -= dqdci; // dwdot[H]/d[H2O]
    J[218] -= dqdci; // dwdot[O]/d[H2O]
    J[219] += dqdci; // dwdot[OH]/d[H2O]
    // d()/d[CO]
    dqdci = (1.75 - 1) * q_nocor;
    J[433] -= dqdci; // dwdot[H]/d[CO]
    J[434] -= dqdci; // dwdot[O]/d[CO]
    J[435] += dqdci; // dwdot[OH]/d[CO]
    // d()/d[CO2]
    dqdci = (3.6 - 1) * q_nocor;
    J[469] -= dqdci; // dwdot[H]/d[CO2]
    J[470] -= dqdci; // dwdot[O]/d[CO2]
    J[471] += dqdci; // dwdot[OH]/d[CO2]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor + k_f * sc[2];
    dqdc[2] = q_nocor + k_f * sc[1];
    dqdc[3] = q_nocor - k_r;
    dqdc[4] = q_nocor;
    dqdc[5] = 2 * q_nocor;
    dqdc[6] = 12 * q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = 1.75 * q_nocor;
    dqdc[13] = 3.6 * q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] -= dqdc[k];
      J[36 * k + 2] -= dqdc[k];
      J[36 * k + 3] += dqdc[k];
    }
  }
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT

  // reaction 33: HCO + M <=> CO + H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[5] + (0 - 1) * sc[6] + (1.75 - 1) * sc[12] +
          (3.6 - 1) * sc[13];
  // forward
  phi_f = sc_qss[2];
  k_f = 187000000000 * exp(-1 * tc[0] - 0.50321666580472 * (17000) * invT);
  dlnkfdT = -1 * invT + 0.50321666580472 * (17000) * invT2;
  // reverse
  phi_r = sc[1] * sc[12];
  Kc = refC * exp(-g_RT[1] - g_RT[12] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[2]) + (h_RT[1] + h_RT[12]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[12] += q; // CO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP) {
    // d()/d[H]
    dqdci = -k_r * sc[12];
    J[37] += dqdci; // dwdot[H]/d[H]
    J[48] += dqdci; // dwdot[CO]/d[H]
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[181] += dqdci; // dwdot[H]/d[H2]
    J[192] += dqdci; // dwdot[CO]/d[H2]
    // d()/d[H2O]
    dqdci = (0 - 1) * q_nocor;
    J[217] += dqdci; // dwdot[H]/d[H2O]
    J[228] += dqdci; // dwdot[CO]/d[H2O]
    // d()/d[CO]
    dqdci = (1.75 - 1) * q_nocor - k_r * sc[1];
    J[433] += dqdci; // dwdot[H]/d[CO]
    J[444] += dqdci; // dwdot[CO]/d[CO]
    // d()/d[CO2]
    dqdci = (3.6 - 1) * q_nocor;
    J[469] += dqdci; // dwdot[H]/d[CO2]
    J[480] += dqdci; // dwdot[CO]/d[CO2]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor - k_r * sc[12];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 2 * q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = 1.75 * q_nocor - k_r * sc[1];
    dqdc[13] = 3.6 * q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    for (int k = 0; k < 35; k++) {
      J[36 * k + 1] += dqdc[k];
      J[36 * k + 12] += dqdc[k];
    }
  }
  J[1261] += dqdT; // dwdot[H]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 34: HCO + H2O <=> CO + H + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc_qss[2];
  k_f = 2244000000000 * exp(-1 * tc[0] - 0.50321666580472 * (17000) * invT);
  dlnkfdT = -1 * invT + 0.50321666580472 * (17000) * invT2;
  // reverse
  phi_r = sc[1] * sc[6] * sc[12];
  Kc = refC * exp(-g_RT[1] - g_RT[12] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT_qss[2]) + (h_RT[1] + h_RT[6] + h_RT[12]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[12] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[6] * sc[12];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[48] += dqdci; // dwdot[CO]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * sc_qss[2] - k_r * sc[1] * sc[12];
  J[217] += dqdci; // dwdot[H]/d[H2O]
  J[228] += dqdci; // dwdot[CO]/d[H2O]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * sc[6];
  J[433] += dqdci; // dwdot[H]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 35: H + O2 <=> O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[8];
  k_f = 97560000 * exp(0 * tc[0] - 0.50321666580472 * (14842.26) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (14842.26) * invT2;
  // reverse
  phi_r = sc[2] * sc[3];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[3] + g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[8]) + (h_RT[2] + h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] += q; // O
  wdot[3] += q; // OH
  wdot[8] -= q; // O2
  // d()/d[H]
  dqdci = +k_f * sc[8];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[38] += dqdci; // dwdot[O]/d[H]
  J[39] += dqdci; // dwdot[OH]/d[H]
  J[44] -= dqdci; // dwdot[O2]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[3];
  J[73] -= dqdci; // dwdot[H]/d[O]
  J[74] += dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[80] -= dqdci; // dwdot[O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[2];
  J[109] -= dqdci; // dwdot[H]/d[OH]
  J[110] += dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[116] -= dqdci; // dwdot[O2]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[1];
  J[289] -= dqdci; // dwdot[H]/d[O2]
  J[290] += dqdci; // dwdot[O]/d[O2]
  J[291] += dqdci; // dwdot[OH]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1262] += dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT

  // reaction 36: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[5];
  k_f = 0.04589 * exp(2.7 * tc[0] - 0.50321666580472 * (6260) * invT);
  dlnkfdT = 2.7 * invT + 0.50321666580472 * (6260) * invT2;
  // reverse
  phi_r = sc[1] * sc[3];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[3] + g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[5]) + (h_RT[1] + h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[2] -= q; // O
  wdot[3] += q; // OH
  wdot[5] -= q; // H2
  // d()/d[H]
  dqdci = -k_r * sc[3];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[38] -= dqdci; // dwdot[O]/d[H]
  J[39] += dqdci; // dwdot[OH]/d[H]
  J[41] -= dqdci; // dwdot[H2]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[5];
  J[73] += dqdci; // dwdot[H]/d[O]
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[77] -= dqdci; // dwdot[H2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[1];
  J[109] += dqdci; // dwdot[H]/d[OH]
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[113] -= dqdci; // dwdot[H2]/d[OH]
  // d()/d[H2]
  dqdci = +k_f * sc[2];
  J[181] += dqdci; // dwdot[H]/d[H2]
  J[182] -= dqdci; // dwdot[O]/d[H2]
  J[183] += dqdci; // dwdot[OH]/d[H2]
  J[185] -= dqdci; // dwdot[H2]/d[H2]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1265] -= dqdT; // dwdot[H2]/dT

  // reaction 37: H2 + OH <=> H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[5];
  k_f = 102.4 * exp(1.6 * tc[0] - 0.50321666580472 * (3298.28) * invT);
  dlnkfdT = 1.6 * invT + 0.50321666580472 * (3298.28) * invT2;
  // reverse
  phi_r = sc[1] * sc[6];
  Kc = exp(-g_RT[1] + g_RT[3] + g_RT[5] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[5]) + (h_RT[1] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[3] -= q; // OH
  wdot[5] -= q; // H2
  wdot[6] += q; // H2O
  // d()/d[H]
  dqdci = -k_r * sc[6];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[39] -= dqdci; // dwdot[OH]/d[H]
  J[41] -= dqdci; // dwdot[H2]/d[H]
  J[42] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[5];
  J[109] += dqdci; // dwdot[H]/d[OH]
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[113] -= dqdci; // dwdot[H2]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2]
  dqdci = +k_f * sc[3];
  J[181] += dqdci; // dwdot[H]/d[H2]
  J[183] -= dqdci; // dwdot[OH]/d[H2]
  J[185] -= dqdci; // dwdot[H2]/d[H2]
  J[186] += dqdci; // dwdot[H2O]/d[H2]
  // d()/d[H2O]
  dqdci = -k_r * sc[1];
  J[217] += dqdci; // dwdot[H]/d[H2O]
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[221] -= dqdci; // dwdot[H2]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1265] -= dqdT; // dwdot[H2]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT

  // reaction 38: 2 OH <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[3] * sc[3]);
  k_f = 0.03973 * exp(2.4 * tc[0] - 0.50321666580472 * (-2110) * invT);
  dlnkfdT = 2.4 * invT + 0.50321666580472 * (-2110) * invT2;
  // reverse
  phi_r = sc[2] * sc[6];
  Kc = exp(-g_RT[2] + 2.000000 * g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[3]) + (h_RT[2] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;     // O
  wdot[3] -= 2 * q; // OH
  wdot[6] += q;     // H2O
  // d()/d[O]
  dqdci = -k_r * sc[6];
  J[74] += dqdci;      // dwdot[O]/d[O]
  J[75] += -2 * dqdci; // dwdot[OH]/d[O]
  J[78] += dqdci;      // dwdot[H2O]/d[O]
  // d()/d[OH]
  dqdci = +k_f * 2.000000 * sc[3];
  J[110] += dqdci;      // dwdot[O]/d[OH]
  J[111] += -2 * dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci;      // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[2];
  J[218] += dqdci;      // dwdot[O]/d[H2O]
  J[219] += -2 * dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci;      // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1262] += dqdT;      // dwdot[O]/dT
  J[1263] += -2 * dqdT; // dwdot[OH]/dT
  J[1266] += dqdT;      // dwdot[H2O]/dT

  // reaction 39: H + HO2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[4];
  k_f = 74850000 * exp(0 * tc[0] - 0.50321666580472 * (295) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (295) * invT2;
  // reverse
  phi_r = (sc[3] * sc[3]);
  Kc = exp(g_RT[1] - 2.000000 * g_RT[3] + g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[4]) + (2.000000 * h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;     // H
  wdot[3] += 2 * q; // OH
  wdot[4] -= q;     // HO2
  // d()/d[H]
  dqdci = +k_f * sc[4];
  J[37] -= dqdci;     // dwdot[H]/d[H]
  J[39] += 2 * dqdci; // dwdot[OH]/d[H]
  J[40] -= dqdci;     // dwdot[HO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[3];
  J[109] -= dqdci;     // dwdot[H]/d[OH]
  J[111] += 2 * dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci;     // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[145] -= dqdci;     // dwdot[H]/d[HO2]
  J[147] += 2 * dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci;     // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1261] -= dqdT;     // dwdot[H]/dT
  J[1263] += 2 * dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT;     // dwdot[HO2]/dT

  // reaction 40: H2 + O2 <=> H + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[8];
  k_f = 0.5916 * exp(2.433 * tc[0] - 0.50321666580472 * (53502) * invT);
  dlnkfdT = 2.433 * invT + 0.50321666580472 * (53502) * invT2;
  // reverse
  phi_r = sc[1] * sc[4];
  Kc = exp(-g_RT[1] - g_RT[4] + g_RT[5] + g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[8]) + (h_RT[1] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[4] += q; // HO2
  wdot[5] -= q; // H2
  wdot[8] -= q; // O2
  // d()/d[H]
  dqdci = -k_r * sc[4];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[40] += dqdci; // dwdot[HO2]/d[H]
  J[41] -= dqdci; // dwdot[H2]/d[H]
  J[44] -= dqdci; // dwdot[O2]/d[H]
  // d()/d[HO2]
  dqdci = -k_r * sc[1];
  J[145] += dqdci; // dwdot[H]/d[HO2]
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[149] -= dqdci; // dwdot[H2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  // d()/d[H2]
  dqdci = +k_f * sc[8];
  J[181] += dqdci; // dwdot[H]/d[H2]
  J[184] += dqdci; // dwdot[HO2]/d[H2]
  J[185] -= dqdci; // dwdot[H2]/d[H2]
  J[188] -= dqdci; // dwdot[O2]/d[H2]
  // d()/d[O2]
  dqdci = +k_f * sc[5];
  J[289] += dqdci; // dwdot[H]/d[O2]
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[293] -= dqdci; // dwdot[H2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1265] -= dqdT; // dwdot[H2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT

  // reaction 41: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[4];
  k_f = 28910000 * exp(0 * tc[0] - 0.50321666580472 * (-501.91) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (-501.91) * invT2;
  // reverse
  phi_r = sc[6] * sc[8];
  Kc = exp(g_RT[3] + g_RT[4] - g_RT[6] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[4]) + (h_RT[6] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q; // OH
  wdot[4] -= q; // HO2
  wdot[6] += q; // H2O
  wdot[8] += q; // O2
  // d()/d[OH]
  dqdci = +k_f * sc[4];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[116] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[3];
  J[147] -= dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[150] += dqdci; // dwdot[H2O]/d[HO2]
  J[152] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[8];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[220] -= dqdci; // dwdot[HO2]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[224] += dqdci; // dwdot[O2]/d[H2O]
  // d()/d[O2]
  dqdci = -k_r * sc[6];
  J[291] -= dqdci; // dwdot[OH]/d[O2]
  J[292] -= dqdci; // dwdot[HO2]/d[O2]
  J[294] += dqdci; // dwdot[H2O]/d[O2]
  J[296] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1268] += dqdT; // dwdot[O2]/dT

  // reaction 42: H + HO2 <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[4];
  k_f = 3970000 * exp(0 * tc[0] - 0.50321666580472 * (671) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (671) * invT2;
  // reverse
  phi_r = sc[2] * sc[6];
  Kc = exp(g_RT[1] - g_RT[2] + g_RT[4] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[4]) + (h_RT[2] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] += q; // O
  wdot[4] -= q; // HO2
  wdot[6] += q; // H2O
  // d()/d[H]
  dqdci = +k_f * sc[4];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[38] += dqdci; // dwdot[O]/d[H]
  J[40] -= dqdci; // dwdot[HO2]/d[H]
  J[42] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[6];
  J[73] -= dqdci; // dwdot[H]/d[O]
  J[74] += dqdci; // dwdot[O]/d[O]
  J[76] -= dqdci; // dwdot[HO2]/d[O]
  J[78] += dqdci; // dwdot[H2O]/d[O]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[145] -= dqdci; // dwdot[H]/d[HO2]
  J[146] += dqdci; // dwdot[O]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[150] += dqdci; // dwdot[H2O]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[2];
  J[217] -= dqdci; // dwdot[H]/d[H2O]
  J[218] += dqdci; // dwdot[O]/d[H2O]
  J[220] -= dqdci; // dwdot[HO2]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1262] += dqdT; // dwdot[O]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT

  // reaction 43: HO2 + O <=> O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[4];
  k_f = 40000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[8];
  Kc = exp(g_RT[2] - g_RT[3] + g_RT[4] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[4]) + (h_RT[3] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // O
  wdot[3] += q; // OH
  wdot[4] -= q; // HO2
  wdot[8] += q; // O2
  // d()/d[O]
  dqdci = +k_f * sc[4];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[76] -= dqdci; // dwdot[HO2]/d[O]
  J[80] += dqdci; // dwdot[O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[8];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[116] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[2];
  J[146] -= dqdci; // dwdot[O]/d[HO2]
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[152] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[3];
  J[290] -= dqdci; // dwdot[O]/d[O2]
  J[291] += dqdci; // dwdot[OH]/d[O2]
  J[292] -= dqdci; // dwdot[HO2]/d[O2]
  J[296] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1268] += dqdT; // dwdot[O2]/dT

  // reaction 44: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 130000 * exp(0 * tc[0] - 0.50321666580472 * (-1630) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (-1630) * invT2;
  // reverse
  phi_r = sc[7] * sc[8];
  Kc = exp(2.000000 * g_RT[4] - g_RT[7] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[7] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= 2 * q; // HO2
  wdot[7] += q;     // H2O2
  wdot[8] += q;     // O2
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[4];
  J[148] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[151] += dqdci;      // dwdot[H2O2]/d[HO2]
  J[152] += dqdci;      // dwdot[O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[8];
  J[256] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[259] += dqdci;      // dwdot[H2O2]/d[H2O2]
  J[260] += dqdci;      // dwdot[O2]/d[H2O2]
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[292] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[295] += dqdci;      // dwdot[H2O2]/d[O2]
  J[296] += dqdci;      // dwdot[O2]/d[O2]
  // d()/dT
  J[1264] += -2 * dqdT; // dwdot[HO2]/dT
  J[1267] += dqdT;      // dwdot[H2O2]/dT
  J[1268] += dqdT;      // dwdot[O2]/dT

  // reaction 45: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 365800000 * exp(0 * tc[0] - 0.50321666580472 * (12000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (12000) * invT2;
  // reverse
  phi_r = sc[7] * sc[8];
  Kc = exp(2.000000 * g_RT[4] - g_RT[7] - g_RT[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[7] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= 2 * q; // HO2
  wdot[7] += q;     // H2O2
  wdot[8] += q;     // O2
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[4];
  J[148] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[151] += dqdci;      // dwdot[H2O2]/d[HO2]
  J[152] += dqdci;      // dwdot[O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[8];
  J[256] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[259] += dqdci;      // dwdot[H2O2]/d[H2O2]
  J[260] += dqdci;      // dwdot[O2]/d[H2O2]
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[292] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[295] += dqdci;      // dwdot[H2O2]/d[O2]
  J[296] += dqdci;      // dwdot[O2]/d[O2]
  // d()/dT
  J[1264] += -2 * dqdT; // dwdot[HO2]/dT
  J[1267] += dqdT;      // dwdot[H2O2]/dT
  J[1268] += dqdT;      // dwdot[O2]/dT

  // reaction 46: H + H2O2 <=> H2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[7];
  k_f = 24100000 * exp(0 * tc[0] - 0.50321666580472 * (3970) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3970) * invT2;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = exp(g_RT[1] - g_RT[3] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[3] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] += q; // OH
  wdot[6] += q; // H2O
  wdot[7] -= q; // H2O2
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[39] += dqdci; // dwdot[OH]/d[H]
  J[42] += dqdci; // dwdot[H2O]/d[H]
  J[43] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[6];
  J[109] -= dqdci; // dwdot[H]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[115] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[217] -= dqdci; // dwdot[H]/d[H2O]
  J[219] += dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[223] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[1];
  J[253] -= dqdci; // dwdot[H]/d[H2O2]
  J[255] += dqdci; // dwdot[OH]/d[H2O2]
  J[258] += dqdci; // dwdot[H2O]/d[H2O2]
  J[259] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1267] -= dqdT; // dwdot[H2O2]/dT

  // reaction 47: H + H2O2 <=> H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[7];
  k_f = 6.05 * exp(2 * tc[0] - 0.50321666580472 * (5200) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (5200) * invT2;
  // reverse
  phi_r = sc[4] * sc[5];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[5] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[4] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[4] += q; // HO2
  wdot[5] += q; // H2
  wdot[7] -= q; // H2O2
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[40] += dqdci; // dwdot[HO2]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[43] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[145] -= dqdci; // dwdot[H]/d[HO2]
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[149] += dqdci; // dwdot[H2]/d[HO2]
  J[151] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2]
  dqdci = -k_r * sc[4];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[184] += dqdci; // dwdot[HO2]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[187] -= dqdci; // dwdot[H2O2]/d[H2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[1];
  J[253] -= dqdci; // dwdot[H]/d[H2O2]
  J[256] += dqdci; // dwdot[HO2]/d[H2O2]
  J[257] += dqdci; // dwdot[H2]/d[H2O2]
  J[259] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1267] -= dqdT; // dwdot[H2O2]/dT

  // reaction 48: H2O2 + O <=> HO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[7];
  k_f = 9.63 * exp(2 * tc[0] - 0.50321666580472 * (3970) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (3970) * invT2;
  // reverse
  phi_r = sc[3] * sc[4];
  Kc = exp(g_RT[2] - g_RT[3] - g_RT[4] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[7]) + (h_RT[3] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // O
  wdot[3] += q; // OH
  wdot[4] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[O]
  dqdci = +k_f * sc[7];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[76] += dqdci; // dwdot[HO2]/d[O]
  J[79] -= dqdci; // dwdot[H2O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[4];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] += dqdci; // dwdot[HO2]/d[OH]
  J[115] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[3];
  J[146] -= dqdci; // dwdot[O]/d[HO2]
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[151] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[2];
  J[254] -= dqdci; // dwdot[O]/d[H2O2]
  J[255] += dqdci; // dwdot[OH]/d[H2O2]
  J[256] += dqdci; // dwdot[HO2]/d[H2O2]
  J[259] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1267] -= dqdT; // dwdot[H2O2]/dT

  // reaction 49: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[7];
  k_f = 2000000 * exp(0 * tc[0] - 0.50321666580472 * (427) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (427) * invT2;
  // reverse
  phi_r = sc[4] * sc[6];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[7]) + (h_RT[4] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q; // OH
  wdot[4] += q; // HO2
  wdot[6] += q; // H2O
  wdot[7] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[112] += dqdci; // dwdot[HO2]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[115] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[6];
  J[147] -= dqdci; // dwdot[OH]/d[HO2]
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[150] += dqdci; // dwdot[H2O]/d[HO2]
  J[151] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[4];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[220] += dqdci; // dwdot[HO2]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[223] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[3];
  J[255] -= dqdci; // dwdot[OH]/d[H2O2]
  J[256] += dqdci; // dwdot[HO2]/d[H2O2]
  J[258] += dqdci; // dwdot[H2O]/d[H2O2]
  J[259] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1267] -= dqdT; // dwdot[H2O2]/dT

  // reaction 50: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[7];
  k_f = 2.67e+35 * exp(-7 * tc[0] - 0.50321666580472 * (37600) * invT);
  dlnkfdT = -7 * invT + 0.50321666580472 * (37600) * invT2;
  // reverse
  phi_r = sc[4] * sc[6];
  Kc = exp(g_RT[3] - g_RT[4] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[7]) + (h_RT[4] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q; // OH
  wdot[4] += q; // HO2
  wdot[6] += q; // H2O
  wdot[7] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[112] += dqdci; // dwdot[HO2]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[115] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[6];
  J[147] -= dqdci; // dwdot[OH]/d[HO2]
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[150] += dqdci; // dwdot[H2O]/d[HO2]
  J[151] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[4];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[220] += dqdci; // dwdot[HO2]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[223] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[3];
  J[255] -= dqdci; // dwdot[OH]/d[H2O2]
  J[256] += dqdci; // dwdot[HO2]/d[H2O2]
  J[258] += dqdci; // dwdot[H2O]/d[H2O2]
  J[259] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1267] -= dqdT; // dwdot[H2O2]/dT

  // reaction 51: CO + OH <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[12];
  k_f = 0.07046 * exp(2.053 * tc[0] - 0.50321666580472 * (-355.67) * invT);
  dlnkfdT = 2.053 * invT + 0.50321666580472 * (-355.67) * invT2;
  // reverse
  phi_r = sc[1] * sc[13];
  Kc = exp(-g_RT[1] + g_RT[3] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[12]) + (h_RT[1] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // OH
  wdot[12] -= q; // CO
  wdot[13] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[13];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[39] -= dqdci; // dwdot[OH]/d[H]
  J[48] -= dqdci; // dwdot[CO]/d[H]
  J[49] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[109] += dqdci; // dwdot[H]/d[OH]
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[120] -= dqdci; // dwdot[CO]/d[OH]
  J[121] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[CO]
  dqdci = +k_f * sc[3];
  J[433] += dqdci; // dwdot[H]/d[CO]
  J[435] -= dqdci; // dwdot[OH]/d[CO]
  J[444] -= dqdci; // dwdot[CO]/d[CO]
  J[445] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[1];
  J[469] += dqdci; // dwdot[H]/d[CO2]
  J[471] -= dqdci; // dwdot[OH]/d[CO2]
  J[480] -= dqdci; // dwdot[CO]/d[CO2]
  J[481] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1272] -= dqdT; // dwdot[CO]/dT
  J[1273] += dqdT; // dwdot[CO2]/dT

  // reaction 52: CO + OH <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[12];
  k_f = 5757000 * exp(-0.664 * tc[0] - 0.50321666580472 * (331.83) * invT);
  dlnkfdT = -0.664 * invT + 0.50321666580472 * (331.83) * invT2;
  // reverse
  phi_r = sc[1] * sc[13];
  Kc = exp(-g_RT[1] + g_RT[3] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[12]) + (h_RT[1] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // OH
  wdot[12] -= q; // CO
  wdot[13] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[13];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[39] -= dqdci; // dwdot[OH]/d[H]
  J[48] -= dqdci; // dwdot[CO]/d[H]
  J[49] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[109] += dqdci; // dwdot[H]/d[OH]
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[120] -= dqdci; // dwdot[CO]/d[OH]
  J[121] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[CO]
  dqdci = +k_f * sc[3];
  J[433] += dqdci; // dwdot[H]/d[CO]
  J[435] -= dqdci; // dwdot[OH]/d[CO]
  J[444] -= dqdci; // dwdot[CO]/d[CO]
  J[445] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[1];
  J[469] += dqdci; // dwdot[H]/d[CO2]
  J[471] -= dqdci; // dwdot[OH]/d[CO2]
  J[480] -= dqdci; // dwdot[CO]/d[CO2]
  J[481] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1272] -= dqdT; // dwdot[CO]/dT
  J[1273] += dqdT; // dwdot[CO2]/dT

  // reaction 53: CO + HO2 <=> CO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 0.157 * exp(2.18 * tc[0] - 0.50321666580472 * (17942.61) * invT);
  dlnkfdT = 2.18 * invT + 0.50321666580472 * (17942.61) * invT2;
  // reverse
  phi_r = sc[3] * sc[13];
  Kc = exp(-g_RT[3] + g_RT[4] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[3] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[4] -= q;  // HO2
  wdot[12] -= q; // CO
  wdot[13] += q; // CO2
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[120] -= dqdci; // dwdot[CO]/d[OH]
  J[121] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[156] -= dqdci; // dwdot[CO]/d[HO2]
  J[157] += dqdci; // dwdot[CO2]/d[HO2]
  // d()/d[CO]
  dqdci = +k_f * sc[4];
  J[435] += dqdci; // dwdot[OH]/d[CO]
  J[436] -= dqdci; // dwdot[HO2]/d[CO]
  J[444] -= dqdci; // dwdot[CO]/d[CO]
  J[445] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[3];
  J[471] += dqdci; // dwdot[OH]/d[CO2]
  J[472] -= dqdci; // dwdot[HO2]/d[CO2]
  J[480] -= dqdci; // dwdot[CO]/d[CO2]
  J[481] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1272] -= dqdT; // dwdot[CO]/dT
  J[1273] += dqdT; // dwdot[CO2]/dT

  // reaction 54: CO + O2 <=> CO2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[12];
  k_f = 1119000 * exp(0 * tc[0] - 0.50321666580472 * (47700) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (47700) * invT2;
  // reverse
  phi_r = sc[2] * sc[13];
  Kc = exp(-g_RT[2] + g_RT[8] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[12]) + (h_RT[2] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[8] -= q;  // O2
  wdot[12] -= q; // CO
  wdot[13] += q; // CO2
  // d()/d[O]
  dqdci = -k_r * sc[13];
  J[74] += dqdci; // dwdot[O]/d[O]
  J[80] -= dqdci; // dwdot[O2]/d[O]
  J[84] -= dqdci; // dwdot[CO]/d[O]
  J[85] += dqdci; // dwdot[CO2]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[12];
  J[290] += dqdci; // dwdot[O]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[300] -= dqdci; // dwdot[CO]/d[O2]
  J[301] += dqdci; // dwdot[CO2]/d[O2]
  // d()/d[CO]
  dqdci = +k_f * sc[8];
  J[434] += dqdci; // dwdot[O]/d[CO]
  J[440] -= dqdci; // dwdot[O2]/d[CO]
  J[444] -= dqdci; // dwdot[CO]/d[CO]
  J[445] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[2];
  J[470] += dqdci; // dwdot[O]/d[CO2]
  J[476] -= dqdci; // dwdot[O2]/d[CO2]
  J[480] -= dqdci; // dwdot[CO]/d[CO2]
  J[481] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1262] += dqdT; // dwdot[O]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1272] -= dqdT; // dwdot[CO]/dT
  J[1273] += dqdT; // dwdot[CO2]/dT

  // reaction 55: H + HCO <=> CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc_qss[2];
  k_f = 120000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[5] * sc[12];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[12] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[2]) + (h_RT[5] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[12] += q; // CO
  // d()/d[H]
  dqdci = +k_f * sc_qss[2];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[48] += dqdci; // dwdot[CO]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[12];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[192] += dqdci; // dwdot[CO]/d[H2]
  // d()/d[CO]
  dqdci = -k_r * sc[5];
  J[433] -= dqdci; // dwdot[H]/d[CO]
  J[437] += dqdci; // dwdot[H2]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 56: HCO + O <=> CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc_qss[2];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[12];
  Kc = exp(g_RT[2] - g_RT[3] - g_RT[12] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT_qss[2]) + (h_RT[3] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // OH
  wdot[12] += q; // CO
  // d()/d[O]
  dqdci = +k_f * sc_qss[2];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[84] += dqdci; // dwdot[CO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[120] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[CO]
  dqdci = -k_r * sc[3];
  J[434] -= dqdci; // dwdot[O]/d[CO]
  J[435] += dqdci; // dwdot[OH]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 57: HCO + O <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc_qss[2];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[13];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[13] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT_qss[2]) + (h_RT[1] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[13] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[13];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[38] -= dqdci; // dwdot[O]/d[H]
  J[49] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc_qss[2];
  J[73] += dqdci; // dwdot[H]/d[O]
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[85] += dqdci; // dwdot[CO2]/d[O]
  // d()/d[CO2]
  dqdci = -k_r * sc[1];
  J[469] += dqdci; // dwdot[H]/d[CO2]
  J[470] -= dqdci; // dwdot[O]/d[CO2]
  J[481] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1273] += dqdT; // dwdot[CO2]/dT

  // reaction 58: HCO + OH <=> CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc_qss[2];
  k_f = 30200000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[6] * sc[12];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[12] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT_qss[2]) + (h_RT[6] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[12] += q; // CO
  // d()/d[OH]
  dqdci = +k_f * sc_qss[2];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[120] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[12];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[228] += dqdci; // dwdot[CO]/d[H2O]
  // d()/d[CO]
  dqdci = -k_r * sc[6];
  J[435] -= dqdci; // dwdot[OH]/d[CO]
  J[438] += dqdci; // dwdot[H2O]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 59: HCO + O2 <=> CO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[2];
  k_f = 12040 * exp(0.807 * tc[0] - 0.50321666580472 * (-727) * invT);
  dlnkfdT = 0.807 * invT + 0.50321666580472 * (-727) * invT2;
  // reverse
  phi_r = sc[4] * sc[12];
  Kc = exp(-g_RT[4] + g_RT[8] - g_RT[12] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[2]) + (h_RT[4] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[12] += q; // CO
  // d()/d[HO2]
  dqdci = -k_r * sc[12];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  J[156] += dqdci; // dwdot[CO]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[2];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[300] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[CO]
  dqdci = -k_r * sc[4];
  J[436] += dqdci; // dwdot[HO2]/d[CO]
  J[440] -= dqdci; // dwdot[O2]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 60: CH2 + O <=> H + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc_qss[0];
  k_f = 80000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc_qss[2];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT_qss[0] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT_qss[0]) + (h_RT[1] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[2] -= q; // O
  // d()/d[H]
  dqdci = -k_r * sc_qss[2];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[38] -= dqdci; // dwdot[O]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc_qss[0];
  J[73] += dqdci; // dwdot[H]/d[O]
  J[74] -= dqdci; // dwdot[O]/d[O]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1262] -= dqdT; // dwdot[O]/dT

  // reaction 61: CH2 + OH <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc_qss[0];
  k_f = 20000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[11];
  Kc = exp(-g_RT[1] + g_RT[3] - g_RT[11] + g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT_qss[0]) + (h_RT[1] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // OH
  wdot[11] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[11];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[39] -= dqdci; // dwdot[OH]/d[H]
  J[47] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc_qss[0];
  J[109] += dqdci; // dwdot[H]/d[OH]
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[397] += dqdci; // dwdot[H]/d[CH2O]
  J[399] -= dqdci; // dwdot[OH]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 62: CH2 + H2 <=> CH3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc_qss[0];
  k_f = 0.5 * exp(2 * tc[0] - 0.50321666580472 * (7230) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (7230) * invT2;
  // reverse
  phi_r = sc[1] * sc[9];
  Kc = exp(-g_RT[1] + g_RT[5] - g_RT[9] + g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT_qss[0]) + (h_RT[1] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[5] -= q; // H2
  wdot[9] += q; // CH3
  // d()/d[H]
  dqdci = -k_r * sc[9];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[41] -= dqdci; // dwdot[H2]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[H2]
  dqdci = +k_f * sc_qss[0];
  J[181] += dqdci; // dwdot[H]/d[H2]
  J[185] -= dqdci; // dwdot[H2]/d[H2]
  J[189] += dqdci; // dwdot[CH3]/d[H2]
  // d()/d[CH3]
  dqdci = -k_r * sc[1];
  J[325] += dqdci; // dwdot[H]/d[CH3]
  J[329] -= dqdci; // dwdot[H2]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1265] -= dqdT; // dwdot[H2]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT

  // reaction 63: CH2 + O2 <=> HCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[0];
  k_f = 10600000 * exp(0 * tc[0] - 0.50321666580472 * (1500) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (1500) * invT2;
  // reverse
  phi_r = sc[3] * sc_qss[2];
  Kc = exp(-g_RT[3] + g_RT[8] + g_RT_qss[0] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[0]) + (h_RT[3] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // OH
  wdot[8] -= q; // O2
  // d()/d[OH]
  dqdci = -k_r * sc_qss[2];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[116] -= dqdci; // dwdot[O2]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[0];
  J[291] += dqdci; // dwdot[OH]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT

  // reaction 64: CH2 + O2 <=> CO2 + 2 H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[0];
  k_f = 2640000 * exp(0 * tc[0] - 0.50321666580472 * (1500) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (1500) * invT2;
  // reverse
  phi_r = (sc[1] * sc[1]) * sc[13];
  Kc = refC * exp(-2.000000 * g_RT[1] + g_RT[8] - g_RT[13] + g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[0]) + (2.000000 * h_RT[1] + h_RT[13]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += 2 * q; // H
  wdot[8] -= q;     // O2
  wdot[13] += q;    // CO2
  // d()/d[H]
  dqdci = -k_r * 2.000000 * sc[1] * sc[13];
  J[37] += 2 * dqdci; // dwdot[H]/d[H]
  J[44] -= dqdci;     // dwdot[O2]/d[H]
  J[49] += dqdci;     // dwdot[CO2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[0];
  J[289] += 2 * dqdci; // dwdot[H]/d[O2]
  J[296] -= dqdci;     // dwdot[O2]/d[O2]
  J[301] += dqdci;     // dwdot[CO2]/d[O2]
  // d()/d[CO2]
  dqdci = -k_r * pow(sc[1], 2.000000);
  J[469] += 2 * dqdci; // dwdot[H]/d[CO2]
  J[476] -= dqdci;     // dwdot[O2]/d[CO2]
  J[481] += dqdci;     // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1261] += 2 * dqdT; // dwdot[H]/dT
  J[1268] -= dqdT;     // dwdot[O2]/dT
  J[1273] += dqdT;     // dwdot[CO2]/dT

  // reaction 65: CH2 + HO2 <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc_qss[0];
  k_f = 20000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[11];
  Kc = exp(-g_RT[3] + g_RT[4] - g_RT[11] + g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT_qss[0]) + (h_RT[3] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[4] -= q;  // HO2
  wdot[11] += q; // CH2O
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc_qss[0];
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[155] += dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[3];
  J[399] += dqdci; // dwdot[OH]/d[CH2O]
  J[400] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 66: 2 CH2 <=> C2H2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = pow(sc_qss[0], 2.000000);
  k_f = 32000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  // Remove forward reaction
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[14];
  Kc = exp(-g_RT[5] - g_RT[14] + 2.000000 * g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT_qss[0]) + (h_RT[5] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  // Remove forward reaction
  // q = k_f*phi_f - k_r*phi_r;
  q = -k_r * phi_r;
  // Remove forward reaction
  // dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
  dqdT = (-dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2
  wdot[14] += q; // C2H2
  // d()/d[H2]
  dqdci = -k_r * sc[14];
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[194] += dqdci; // dwdot[C2H2]/d[H2]
  // d()/d[C2H2]
  dqdci = -k_r * sc[5];
  J[509] += dqdci; // dwdot[H2]/d[C2H2]
  J[518] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1274] += dqdT; // dwdot[C2H2]/dT

  // reaction 67: CH2* + N2 <=> CH2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[34] * sc_qss[1];
  k_f = 15000000 * exp(0 * tc[0] - 0.50321666580472 * (600) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (600) * invT2;
  // reverse
  phi_r = sc[34] * sc_qss[0];
  Kc = exp(g_RT[34] - g_RT[34] - g_RT_qss[0] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[34] + h_RT_qss[1]) + (h_RT[34] + h_RT_qss[0]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  // d()/d[N2]
  dqdci = +k_f * sc_qss[1] - k_r * sc_qss[0];
  // d()/dT

  // reaction 68: CH2* + O <=> CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc_qss[1];
  k_f = 15000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[5] * sc[12];
  Kc = exp(g_RT[2] - g_RT[5] - g_RT[12] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT_qss[1]) + (h_RT[5] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[5] += q;  // H2
  wdot[12] += q; // CO
  // d()/d[O]
  dqdci = +k_f * sc_qss[1];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[77] += dqdci; // dwdot[H2]/d[O]
  J[84] += dqdci; // dwdot[CO]/d[O]
  // d()/d[H2]
  dqdci = -k_r * sc[12];
  J[182] -= dqdci; // dwdot[O]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[192] += dqdci; // dwdot[CO]/d[H2]
  // d()/d[CO]
  dqdci = -k_r * sc[5];
  J[434] -= dqdci; // dwdot[O]/d[CO]
  J[437] += dqdci; // dwdot[H2]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 69: CH2* + O <=> H + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc_qss[1];
  k_f = 15000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc_qss[2];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT_qss[1] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT_qss[1]) + (h_RT[1] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[2] -= q; // O
  // d()/d[H]
  dqdci = -k_r * sc_qss[2];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[38] -= dqdci; // dwdot[O]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc_qss[1];
  J[73] += dqdci; // dwdot[H]/d[O]
  J[74] -= dqdci; // dwdot[O]/d[O]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1262] -= dqdT; // dwdot[O]/dT

  // reaction 70: CH2* + OH <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc_qss[1];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[11];
  Kc = exp(-g_RT[1] + g_RT[3] - g_RT[11] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT_qss[1]) + (h_RT[1] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // OH
  wdot[11] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[11];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[39] -= dqdci; // dwdot[OH]/d[H]
  J[47] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc_qss[1];
  J[109] += dqdci; // dwdot[H]/d[OH]
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[397] += dqdci; // dwdot[H]/d[CH2O]
  J[399] -= dqdci; // dwdot[OH]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 71: CH2* + H2 <=> CH3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc_qss[1];
  k_f = 70000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[9];
  Kc = exp(-g_RT[1] + g_RT[5] - g_RT[9] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT_qss[1]) + (h_RT[1] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q; // H
  wdot[5] -= q; // H2
  wdot[9] += q; // CH3
  // d()/d[H]
  dqdci = -k_r * sc[9];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[41] -= dqdci; // dwdot[H2]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[H2]
  dqdci = +k_f * sc_qss[1];
  J[181] += dqdci; // dwdot[H]/d[H2]
  J[185] -= dqdci; // dwdot[H2]/d[H2]
  J[189] += dqdci; // dwdot[CH3]/d[H2]
  // d()/d[CH3]
  dqdci = -k_r * sc[1];
  J[325] += dqdci; // dwdot[H]/d[CH3]
  J[329] -= dqdci; // dwdot[H2]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1265] -= dqdT; // dwdot[H2]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT

  // reaction 72: CH2* + O2 <=> CO + H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[1];
  k_f = 28000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[3] * sc[12];
  Kc = refC * exp(-g_RT[1] - g_RT[3] + g_RT[8] - g_RT[12] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[1]) + (h_RT[1] + h_RT[3] + h_RT[12]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] += q;  // OH
  wdot[8] -= q;  // O2
  wdot[12] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[3] * sc[12];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[39] += dqdci; // dwdot[OH]/d[H]
  J[44] -= dqdci; // dwdot[O2]/d[H]
  J[48] += dqdci; // dwdot[CO]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[1] * sc[12];
  J[109] += dqdci; // dwdot[H]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[116] -= dqdci; // dwdot[O2]/d[OH]
  J[120] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[1];
  J[289] += dqdci; // dwdot[H]/d[O2]
  J[291] += dqdci; // dwdot[OH]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[300] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * sc[3];
  J[433] += dqdci; // dwdot[H]/d[CO]
  J[435] += dqdci; // dwdot[OH]/d[CO]
  J[440] -= dqdci; // dwdot[O2]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 73: CH2* + O2 <=> CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[1];
  k_f = 12000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[6] * sc[12];
  Kc = exp(-g_RT[6] + g_RT[8] - g_RT[12] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[1]) + (h_RT[6] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // H2O
  wdot[8] -= q;  // O2
  wdot[12] += q; // CO
  // d()/d[H2O]
  dqdci = -k_r * sc[12];
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[224] -= dqdci; // dwdot[O2]/d[H2O]
  J[228] += dqdci; // dwdot[CO]/d[H2O]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[1];
  J[294] += dqdci; // dwdot[H2O]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[300] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[CO]
  dqdci = -k_r * sc[6];
  J[438] += dqdci; // dwdot[H2O]/d[CO]
  J[440] -= dqdci; // dwdot[O2]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 74: CH2* + H2O <=> CH2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc_qss[1];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[6] * sc_qss[0];
  Kc = exp(g_RT[6] - g_RT[6] - g_RT_qss[0] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT_qss[1]) + (h_RT[6] + h_RT_qss[0]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  // d()/d[H2O]
  dqdci = +k_f * sc_qss[1] - k_r * sc_qss[0];
  // d()/dT

  // reaction 75: CH2* + CO <=> CH2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc_qss[1];
  k_f = 9000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[12] * sc_qss[0];
  Kc = exp(g_RT[12] - g_RT[12] - g_RT_qss[0] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT_qss[1]) + (h_RT[12] + h_RT_qss[0]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  // d()/d[CO]
  dqdci = +k_f * sc_qss[1] - k_r * sc_qss[0];
  // d()/dT

  // reaction 76: CH2* + CO2 <=> CH2 + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc_qss[1];
  k_f = 7000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[13] * sc_qss[0];
  Kc = exp(g_RT[13] - g_RT[13] - g_RT_qss[0] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT_qss[1]) + (h_RT[13] + h_RT_qss[0]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  // d()/d[CO2]
  dqdci = +k_f * sc_qss[1] - k_r * sc_qss[0];
  // d()/dT

  // reaction 77: CH2* + CO2 <=> CH2O + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc_qss[1];
  k_f = 14000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[11] * sc[12];
  Kc = exp(-g_RT[11] - g_RT[12] + g_RT[13] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT_qss[1]) + (h_RT[11] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // CH2O
  wdot[12] += q; // CO
  wdot[13] -= q; // CO2
  // d()/d[CH2O]
  dqdci = -k_r * sc[12];
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[408] += dqdci; // dwdot[CO]/d[CH2O]
  J[409] -= dqdci; // dwdot[CO2]/d[CH2O]
  // d()/d[CO]
  dqdci = -k_r * sc[11];
  J[443] += dqdci; // dwdot[CH2O]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[445] -= dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = +k_f * sc_qss[1];
  J[479] += dqdci; // dwdot[CH2O]/d[CO2]
  J[480] += dqdci; // dwdot[CO]/d[CO2]
  J[481] -= dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1273] -= dqdT; // dwdot[CO2]/dT

  // reaction 78: CH2O + H <=> H2 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 23000 * exp(1.05 * tc[0] - 0.50321666580472 * (3275) * invT);
  dlnkfdT = 1.05 * invT + 0.50321666580472 * (3275) * invT2;
  // reverse
  phi_r = sc[5] * sc_qss[2];
  Kc = exp(g_RT[1] - g_RT[5] + g_RT[11] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[11]) + (h_RT[5] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[11] -= q; // CH2O
  // d()/d[H]
  dqdci = +k_f * sc[11];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[47] -= dqdci; // dwdot[CH2O]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc_qss[2];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[191] -= dqdci; // dwdot[CH2O]/d[H2]
  // d()/d[CH2O]
  dqdci = +k_f * sc[1];
  J[397] -= dqdci; // dwdot[H]/d[CH2O]
  J[401] += dqdci; // dwdot[H2]/d[CH2O]
  J[407] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1271] -= dqdT; // dwdot[CH2O]/dT

  // reaction 79: CH2O + O <=> HCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[11];
  k_f = 39000000 * exp(0 * tc[0] - 0.50321666580472 * (3540) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3540) * invT2;
  // reverse
  phi_r = sc[3] * sc_qss[2];
  Kc = exp(g_RT[2] - g_RT[3] + g_RT[11] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[11]) + (h_RT[3] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // OH
  wdot[11] -= q; // CH2O
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[83] -= dqdci; // dwdot[CH2O]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc_qss[2];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[119] -= dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH2O]
  dqdci = +k_f * sc[2];
  J[398] -= dqdci; // dwdot[O]/d[CH2O]
  J[399] += dqdci; // dwdot[OH]/d[CH2O]
  J[407] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1271] -= dqdT; // dwdot[CH2O]/dT

  // reaction 80: CH2O + OH <=> H2O + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[11];
  k_f = 3430 * exp(1.18 * tc[0] - 0.50321666580472 * (-447) * invT);
  dlnkfdT = 1.18 * invT + 0.50321666580472 * (-447) * invT2;
  // reverse
  phi_r = sc[6] * sc_qss[2];
  Kc = exp(g_RT[3] - g_RT[6] + g_RT[11] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[11]) + (h_RT[6] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[11] -= q; // CH2O
  // d()/d[OH]
  dqdci = +k_f * sc[11];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[119] -= dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc_qss[2];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[227] -= dqdci; // dwdot[CH2O]/d[H2O]
  // d()/d[CH2O]
  dqdci = +k_f * sc[3];
  J[399] -= dqdci; // dwdot[OH]/d[CH2O]
  J[402] += dqdci; // dwdot[H2O]/d[CH2O]
  J[407] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1271] -= dqdT; // dwdot[CH2O]/dT

  // reaction 81: CH2O + O2 <=> HCO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[11];
  k_f = 100000000 * exp(0 * tc[0] - 0.50321666580472 * (40000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (40000) * invT2;
  // reverse
  phi_r = sc[4] * sc_qss[2];
  Kc = exp(-g_RT[4] + g_RT[8] + g_RT[11] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[11]) + (h_RT[4] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[11] -= q; // CH2O
  // d()/d[HO2]
  dqdci = -k_r * sc_qss[2];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  J[155] -= dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[11];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[299] -= dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[CH2O]
  dqdci = +k_f * sc[8];
  J[400] += dqdci; // dwdot[HO2]/d[CH2O]
  J[404] -= dqdci; // dwdot[O2]/d[CH2O]
  J[407] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1271] -= dqdT; // dwdot[CH2O]/dT

  // reaction 82: CH2O + HO2 <=> H2O2 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[11];
  k_f = 1000000 * exp(0 * tc[0] - 0.50321666580472 * (8000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (8000) * invT2;
  // reverse
  phi_r = sc[7] * sc_qss[2];
  Kc = exp(g_RT[4] - g_RT[7] + g_RT[11] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[11]) + (h_RT[7] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[11] -= q; // CH2O
  // d()/d[HO2]
  dqdci = +k_f * sc[11];
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[151] += dqdci; // dwdot[H2O2]/d[HO2]
  J[155] -= dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc_qss[2];
  J[256] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[259] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[263] -= dqdci; // dwdot[CH2O]/d[H2O2]
  // d()/d[CH2O]
  dqdci = +k_f * sc[4];
  J[400] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[403] += dqdci; // dwdot[H2O2]/d[CH2O]
  J[407] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1267] += dqdT; // dwdot[H2O2]/dT
  J[1271] -= dqdT; // dwdot[CH2O]/dT

  // reaction 83: CH3 + O <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[9];
  k_f = 84300000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[11];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[9] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[9]) + (h_RT[1] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[9] -= q;  // CH3
  wdot[11] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[11];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[38] -= dqdci; // dwdot[O]/d[H]
  J[45] -= dqdci; // dwdot[CH3]/d[H]
  J[47] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[9];
  J[73] += dqdci; // dwdot[H]/d[O]
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[81] -= dqdci; // dwdot[CH3]/d[O]
  J[83] += dqdci; // dwdot[CH2O]/d[O]
  // d()/d[CH3]
  dqdci = +k_f * sc[2];
  J[325] += dqdci; // dwdot[H]/d[CH3]
  J[326] -= dqdci; // dwdot[O]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[335] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[397] += dqdci; // dwdot[H]/d[CH2O]
  J[398] -= dqdci; // dwdot[O]/d[CH2O]
  J[405] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 84: CH3 + OH <=> CH2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[9];
  k_f = 56 * exp(1.6 * tc[0] - 0.50321666580472 * (5420) * invT);
  dlnkfdT = 1.6 * invT + 0.50321666580472 * (5420) * invT2;
  // reverse
  phi_r = sc[6] * sc_qss[0];
  Kc = exp(g_RT[3] - g_RT[6] + g_RT[9] - g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[9]) + (h_RT[6] + h_RT_qss[0]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q; // OH
  wdot[6] += q; // H2O
  wdot[9] -= q; // CH3
  // d()/d[OH]
  dqdci = +k_f * sc[9];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[117] -= dqdci; // dwdot[CH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc_qss[0];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[225] -= dqdci; // dwdot[CH3]/d[H2O]
  // d()/d[CH3]
  dqdci = +k_f * sc[3];
  J[327] -= dqdci; // dwdot[OH]/d[CH3]
  J[330] += dqdci; // dwdot[H2O]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT

  // reaction 85: CH3 + OH <=> CH2* + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[9];
  k_f = 25010000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[6] * sc_qss[1];
  Kc = exp(g_RT[3] - g_RT[6] + g_RT[9] - g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[9]) + (h_RT[6] + h_RT_qss[1]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q; // OH
  wdot[6] += q; // H2O
  wdot[9] -= q; // CH3
  // d()/d[OH]
  dqdci = +k_f * sc[9];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[117] -= dqdci; // dwdot[CH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc_qss[1];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[225] -= dqdci; // dwdot[CH3]/d[H2O]
  // d()/d[CH3]
  dqdci = +k_f * sc[3];
  J[327] -= dqdci; // dwdot[OH]/d[CH3]
  J[330] += dqdci; // dwdot[H2O]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT

  // reaction 86: CH3 + O2 <=> CH3O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[9];
  k_f = 30830000 * exp(0 * tc[0] - 0.50321666580472 * (28800) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (28800) * invT2;
  // reverse
  phi_r = sc[2] * sc_qss[3];
  Kc = exp(-g_RT[2] + g_RT[8] + g_RT[9] - g_RT_qss[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[9]) + (h_RT[2] + h_RT_qss[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q; // O
  wdot[8] -= q; // O2
  wdot[9] -= q; // CH3
  // d()/d[O]
  dqdci = -k_r * sc_qss[3];
  J[74] += dqdci; // dwdot[O]/d[O]
  J[80] -= dqdci; // dwdot[O2]/d[O]
  J[81] -= dqdci; // dwdot[CH3]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[9];
  J[290] += dqdci; // dwdot[O]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[297] -= dqdci; // dwdot[CH3]/d[O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[8];
  J[326] += dqdci; // dwdot[O]/d[CH3]
  J[332] -= dqdci; // dwdot[O2]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1262] += dqdT; // dwdot[O]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT

  // reaction 87: CH3 + O2 <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[9];
  k_f = 36000 * exp(0 * tc[0] - 0.50321666580472 * (8940) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (8940) * invT2;
  // reverse
  phi_r = sc[3] * sc[11];
  Kc = exp(-g_RT[3] + g_RT[8] + g_RT[9] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[9]) + (h_RT[3] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[8] -= q;  // O2
  wdot[9] -= q;  // CH3
  wdot[11] += q; // CH2O
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[116] -= dqdci; // dwdot[O2]/d[OH]
  J[117] -= dqdci; // dwdot[CH3]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[9];
  J[291] += dqdci; // dwdot[OH]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[297] -= dqdci; // dwdot[CH3]/d[O2]
  J[299] += dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[8];
  J[327] += dqdci; // dwdot[OH]/d[CH3]
  J[332] -= dqdci; // dwdot[O2]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[335] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[3];
  J[399] += dqdci; // dwdot[OH]/d[CH2O]
  J[404] -= dqdci; // dwdot[O2]/d[CH2O]
  J[405] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 88: CH3 + HO2 <=> CH4 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 1000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[8] * sc[10];
  Kc = exp(g_RT[4] - g_RT[8] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[9]) + (h_RT[8] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  // d()/d[HO2]
  dqdci = +k_f * sc[9];
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[152] += dqdci; // dwdot[O2]/d[HO2]
  J[153] -= dqdci; // dwdot[CH3]/d[HO2]
  J[154] += dqdci; // dwdot[CH4]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[10];
  J[292] -= dqdci; // dwdot[HO2]/d[O2]
  J[296] += dqdci; // dwdot[O2]/d[O2]
  J[297] -= dqdci; // dwdot[CH3]/d[O2]
  J[298] += dqdci; // dwdot[CH4]/d[O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[4];
  J[328] -= dqdci; // dwdot[HO2]/d[CH3]
  J[332] += dqdci; // dwdot[O2]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[8];
  J[364] -= dqdci; // dwdot[HO2]/d[CH4]
  J[368] += dqdci; // dwdot[O2]/d[CH4]
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1268] += dqdT; // dwdot[O2]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT

  // reaction 89: CH3 + HO2 <=> CH3O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 13400000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc_qss[3];
  Kc = exp(-g_RT[3] + g_RT[4] + g_RT[9] - g_RT_qss[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[9]) + (h_RT[3] + h_RT_qss[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // OH
  wdot[4] -= q; // HO2
  wdot[9] -= q; // CH3
  // d()/d[OH]
  dqdci = -k_r * sc_qss[3];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[117] -= dqdci; // dwdot[CH3]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[9];
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[153] -= dqdci; // dwdot[CH3]/d[HO2]
  // d()/d[CH3]
  dqdci = +k_f * sc[4];
  J[327] += dqdci; // dwdot[OH]/d[CH3]
  J[328] -= dqdci; // dwdot[HO2]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT

  // reaction 90: CH3 + H2O2 <=> CH4 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[9];
  k_f = 0.0245 * exp(2.47 * tc[0] - 0.50321666580472 * (5180) * invT);
  dlnkfdT = 2.47 * invT + 0.50321666580472 * (5180) * invT2;
  // reverse
  phi_r = sc[4] * sc[10];
  Kc = exp(-g_RT[4] + g_RT[7] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[9]) + (h_RT[4] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  // d()/d[HO2]
  dqdci = -k_r * sc[10];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[151] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[153] -= dqdci; // dwdot[CH3]/d[HO2]
  J[154] += dqdci; // dwdot[CH4]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[9];
  J[256] += dqdci; // dwdot[HO2]/d[H2O2]
  J[259] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[261] -= dqdci; // dwdot[CH3]/d[H2O2]
  J[262] += dqdci; // dwdot[CH4]/d[H2O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[7];
  J[328] += dqdci; // dwdot[HO2]/d[CH3]
  J[331] -= dqdci; // dwdot[H2O2]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[4];
  J[364] += dqdci; // dwdot[HO2]/d[CH4]
  J[367] -= dqdci; // dwdot[H2O2]/d[CH4]
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1267] -= dqdT; // dwdot[H2O2]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT

  // reaction 91: CH3 + HCO <=> CH4 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc_qss[2];
  k_f = 8480000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[10] * sc[12];
  Kc = exp(g_RT[9] - g_RT[10] - g_RT[12] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT_qss[2]) + (h_RT[10] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  wdot[12] += q; // CO
  // d()/d[CH3]
  dqdci = +k_f * sc_qss[2];
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  J[336] += dqdci; // dwdot[CO]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[12];
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  J[372] += dqdci; // dwdot[CO]/d[CH4]
  // d()/d[CO]
  dqdci = -k_r * sc[10];
  J[441] -= dqdci; // dwdot[CH3]/d[CO]
  J[442] += dqdci; // dwdot[CH4]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 92: CH2O + CH3 <=> CH4 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[11];
  k_f = 0.00332 * exp(2.81 * tc[0] - 0.50321666580472 * (5860) * invT);
  dlnkfdT = 2.81 * invT + 0.50321666580472 * (5860) * invT2;
  // reverse
  phi_r = sc[10] * sc_qss[2];
  Kc = exp(g_RT[9] - g_RT[10] + g_RT[11] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[11]) + (h_RT[10] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  wdot[11] -= q; // CH2O
  // d()/d[CH3]
  dqdci = +k_f * sc[11];
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  J[335] -= dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc_qss[2];
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  J[371] -= dqdci; // dwdot[CH2O]/d[CH4]
  // d()/d[CH2O]
  dqdci = +k_f * sc[9];
  J[405] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[406] += dqdci; // dwdot[CH4]/d[CH2O]
  J[407] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT
  J[1271] -= dqdT; // dwdot[CH2O]/dT

  // reaction 93: CH2 + CH3 <=> C2H4 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc_qss[0];
  k_f = 40000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[15];
  Kc = exp(-g_RT[1] + g_RT[9] - g_RT[15] + g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT_qss[0]) + (h_RT[1] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH3
  wdot[15] += q; // C2H4
  // d()/d[H]
  dqdci = -k_r * sc[15];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[45] -= dqdci; // dwdot[CH3]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  // d()/d[CH3]
  dqdci = +k_f * sc_qss[0];
  J[325] += dqdci; // dwdot[H]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[339] += dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[1];
  J[541] += dqdci; // dwdot[H]/d[C2H4]
  J[549] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT

  // reaction 94: CH2* + CH3 <=> C2H4 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc_qss[1];
  k_f = 12000000 * exp(0 * tc[0] - 0.50321666580472 * (-570) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (-570) * invT2;
  // reverse
  phi_r = sc[1] * sc[15];
  Kc = exp(-g_RT[1] + g_RT[9] - g_RT[15] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT_qss[1]) + (h_RT[1] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH3
  wdot[15] += q; // C2H4
  // d()/d[H]
  dqdci = -k_r * sc[15];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[45] -= dqdci; // dwdot[CH3]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  // d()/d[CH3]
  dqdci = +k_f * sc_qss[1];
  J[325] += dqdci; // dwdot[H]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[339] += dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[1];
  J[541] += dqdci; // dwdot[H]/d[C2H4]
  J[549] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT

  // reaction 95: 2 CH3 <=> C2H5 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[9] * sc[9]);
  k_f = 4990000 * exp(0.1 * tc[0] - 0.50321666580472 * (10600) * invT);
  dlnkfdT = 0.1 * invT + 0.50321666580472 * (10600) * invT2;
  // reverse
  phi_r = sc[1] * sc_qss[5];
  Kc = exp(-g_RT[1] + 2.000000 * g_RT[9] - g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[9]) + (h_RT[1] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;     // H
  wdot[9] -= 2 * q; // CH3
  // d()/d[H]
  dqdci = -k_r * sc_qss[5];
  J[37] += dqdci;      // dwdot[H]/d[H]
  J[45] += -2 * dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH3]
  dqdci = +k_f * 2.000000 * sc[9];
  J[325] += dqdci;      // dwdot[H]/d[CH3]
  J[333] += -2 * dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1261] += dqdT;      // dwdot[H]/dT
  J[1269] += -2 * dqdT; // dwdot[CH3]/dT

  // reaction 96: CH3O + H <=> CH2O + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc_qss[3];
  k_f = 20000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[5] * sc[11];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[11] + g_RT_qss[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[3]) + (h_RT[5] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[11] += q; // CH2O
  // d()/d[H]
  dqdci = +k_f * sc_qss[3];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[47] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[11];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[191] += dqdci; // dwdot[CH2O]/d[H2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[5];
  J[397] -= dqdci; // dwdot[H]/d[CH2O]
  J[401] += dqdci; // dwdot[H2]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 97: CH3O + H <=> CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc_qss[3];
  k_f = 32000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[9];
  Kc = exp(g_RT[1] - g_RT[3] - g_RT[9] + g_RT_qss[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[3]) + (h_RT[3] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] += q; // OH
  wdot[9] += q; // CH3
  // d()/d[H]
  dqdci = +k_f * sc_qss[3];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[39] += dqdci; // dwdot[OH]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[9];
  J[109] -= dqdci; // dwdot[H]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[117] += dqdci; // dwdot[CH3]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[3];
  J[325] -= dqdci; // dwdot[H]/d[CH3]
  J[327] += dqdci; // dwdot[OH]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT

  // reaction 98: CH3O + H <=> CH2* + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc_qss[3];
  k_f = 16000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[6] * sc_qss[1];
  Kc = exp(g_RT[1] - g_RT[6] - g_RT_qss[1] + g_RT_qss[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[3]) + (h_RT[6] + h_RT_qss[1]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[6] += q; // H2O
  // d()/d[H]
  dqdci = +k_f * sc_qss[3];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[42] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc_qss[1];
  J[217] -= dqdci; // dwdot[H]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT

  // reaction 99: CH3O + O <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc_qss[3];
  k_f = 10000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[11];
  Kc = exp(g_RT[2] - g_RT[3] - g_RT[11] + g_RT_qss[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT_qss[3]) + (h_RT[3] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // OH
  wdot[11] += q; // CH2O
  // d()/d[O]
  dqdci = +k_f * sc_qss[3];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[83] += dqdci; // dwdot[CH2O]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[11];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH2O]
  dqdci = -k_r * sc[3];
  J[398] -= dqdci; // dwdot[O]/d[CH2O]
  J[399] += dqdci; // dwdot[OH]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 100: CH3O + OH <=> CH2O + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc_qss[3];
  k_f = 5000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[6] * sc[11];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[11] + g_RT_qss[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT_qss[3]) + (h_RT[6] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[11] += q; // CH2O
  // d()/d[OH]
  dqdci = +k_f * sc_qss[3];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[227] += dqdci; // dwdot[CH2O]/d[H2O]
  // d()/d[CH2O]
  dqdci = -k_r * sc[6];
  J[399] -= dqdci; // dwdot[OH]/d[CH2O]
  J[402] += dqdci; // dwdot[H2O]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 101: CH3O + O2 <=> CH2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[3];
  k_f = 4.28e-19 * exp(7.6 * tc[0] - 0.50321666580472 * (-3530) * invT);
  dlnkfdT = 7.6 * invT + 0.50321666580472 * (-3530) * invT2;
  // reverse
  phi_r = sc[4] * sc[11];
  Kc = exp(-g_RT[4] + g_RT[8] - g_RT[11] + g_RT_qss[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[3]) + (h_RT[4] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[11] += q; // CH2O
  // d()/d[HO2]
  dqdci = -k_r * sc[11];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  J[155] += dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[3];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[299] += dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[4];
  J[400] += dqdci; // dwdot[HO2]/d[CH2O]
  J[404] -= dqdci; // dwdot[O2]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 102: CH4 + H <=> CH3 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[10];
  k_f = 660 * exp(1.62 * tc[0] - 0.50321666580472 * (10840) * invT);
  dlnkfdT = 1.62 * invT + 0.50321666580472 * (10840) * invT2;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[10]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[9] += q;  // CH3
  wdot[10] -= q; // CH4
  // d()/d[H]
  dqdci = +k_f * sc[10];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  J[46] -= dqdci; // dwdot[CH4]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[9];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[189] += dqdci; // dwdot[CH3]/d[H2]
  J[190] -= dqdci; // dwdot[CH4]/d[H2]
  // d()/d[CH3]
  dqdci = -k_r * sc[5];
  J[325] -= dqdci; // dwdot[H]/d[CH3]
  J[329] += dqdci; // dwdot[H2]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[334] -= dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[1];
  J[361] -= dqdci; // dwdot[H]/d[CH4]
  J[365] += dqdci; // dwdot[H2]/d[CH4]
  J[369] += dqdci; // dwdot[CH3]/d[CH4]
  J[370] -= dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1270] -= dqdT; // dwdot[CH4]/dT

  // reaction 103: CH4 + O <=> CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[10];
  k_f = 1020 * exp(1.5 * tc[0] - 0.50321666580472 * (8600) * invT);
  dlnkfdT = 1.5 * invT + 0.50321666580472 * (8600) * invT2;
  // reverse
  phi_r = sc[3] * sc[9];
  Kc = exp(g_RT[2] - g_RT[3] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[10]) + (h_RT[3] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // OH
  wdot[9] += q;  // CH3
  wdot[10] -= q; // CH4
  // d()/d[O]
  dqdci = +k_f * sc[10];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[81] += dqdci; // dwdot[CH3]/d[O]
  J[82] -= dqdci; // dwdot[CH4]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[9];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[117] += dqdci; // dwdot[CH3]/d[OH]
  J[118] -= dqdci; // dwdot[CH4]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[3];
  J[326] -= dqdci; // dwdot[O]/d[CH3]
  J[327] += dqdci; // dwdot[OH]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[334] -= dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[2];
  J[362] -= dqdci; // dwdot[O]/d[CH4]
  J[363] += dqdci; // dwdot[OH]/d[CH4]
  J[369] += dqdci; // dwdot[CH3]/d[CH4]
  J[370] -= dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1270] -= dqdT; // dwdot[CH4]/dT

  // reaction 104: CH4 + OH <=> CH3 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 100 * exp(1.6 * tc[0] - 0.50321666580472 * (3120) * invT);
  dlnkfdT = 1.6 * invT + 0.50321666580472 * (3120) * invT2;
  // reverse
  phi_r = sc[6] * sc[9];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[10]) + (h_RT[6] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[9] += q;  // CH3
  wdot[10] -= q; // CH4
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[117] += dqdci; // dwdot[CH3]/d[OH]
  J[118] -= dqdci; // dwdot[CH4]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[9];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[225] += dqdci; // dwdot[CH3]/d[H2O]
  J[226] -= dqdci; // dwdot[CH4]/d[H2O]
  // d()/d[CH3]
  dqdci = -k_r * sc[6];
  J[327] -= dqdci; // dwdot[OH]/d[CH3]
  J[330] += dqdci; // dwdot[H2O]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[334] -= dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[3];
  J[363] -= dqdci; // dwdot[OH]/d[CH4]
  J[366] += dqdci; // dwdot[H2O]/d[CH4]
  J[369] += dqdci; // dwdot[CH3]/d[CH4]
  J[370] -= dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1270] -= dqdT; // dwdot[CH4]/dT

  // reaction 105: CH2 + CH4 <=> 2 CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc_qss[0];
  k_f = 2.46 * exp(2 * tc[0] - 0.50321666580472 * (8270) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (8270) * invT2;
  // reverse
  phi_r = (sc[9] * sc[9]);
  Kc = exp(-2.000000 * g_RT[9] + g_RT[10] + g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT_qss[0]) + (2.000000 * h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += 2 * q; // CH3
  wdot[10] -= q;    // CH4
  // d()/d[CH3]
  dqdci = -k_r * 2.000000 * sc[9];
  J[333] += 2 * dqdci; // dwdot[CH3]/d[CH3]
  J[334] -= dqdci;     // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc_qss[0];
  J[369] += 2 * dqdci; // dwdot[CH3]/d[CH4]
  J[370] -= dqdci;     // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1269] += 2 * dqdT; // dwdot[CH3]/dT
  J[1270] -= dqdT;     // dwdot[CH4]/dT

  // reaction 106: CH2* + CH4 <=> 2 CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc_qss[1];
  k_f = 16000000 * exp(0 * tc[0] - 0.50321666580472 * (-570) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (-570) * invT2;
  // reverse
  phi_r = (sc[9] * sc[9]);
  Kc = exp(-2.000000 * g_RT[9] + g_RT[10] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT_qss[1]) + (2.000000 * h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += 2 * q; // CH3
  wdot[10] -= q;    // CH4
  // d()/d[CH3]
  dqdci = -k_r * 2.000000 * sc[9];
  J[333] += 2 * dqdci; // dwdot[CH3]/d[CH3]
  J[334] -= dqdci;     // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc_qss[1];
  J[369] += 2 * dqdci; // dwdot[CH3]/d[CH4]
  J[370] -= dqdci;     // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1269] += 2 * dqdT; // dwdot[CH3]/dT
  J[1270] -= dqdT;     // dwdot[CH4]/dT

  // reaction 107: C2H2 + O <=> CH2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[14];
  k_f = 4.08 * exp(2 * tc[0] - 0.50321666580472 * (1900) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (1900) * invT2;
  // reverse
  phi_r = sc[12] * sc_qss[0];
  Kc = exp(g_RT[2] - g_RT[12] + g_RT[14] - g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[14]) + (h_RT[12] + h_RT_qss[0]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[12] += q; // CO
  wdot[14] -= q; // C2H2
  // d()/d[O]
  dqdci = +k_f * sc[14];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[84] += dqdci; // dwdot[CO]/d[O]
  J[86] -= dqdci; // dwdot[C2H2]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc_qss[0];
  J[434] -= dqdci; // dwdot[O]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[446] -= dqdci; // dwdot[C2H2]/d[CO]
  // d()/d[C2H2]
  dqdci = +k_f * sc[2];
  J[506] -= dqdci; // dwdot[O]/d[C2H2]
  J[516] += dqdci; // dwdot[CO]/d[C2H2]
  J[518] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1274] -= dqdT; // dwdot[C2H2]/dT

  // reaction 108: C2H2 + OH <=> CH3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[14];
  k_f = 4.83e-10 * exp(4 * tc[0] - 0.50321666580472 * (-2000) * invT);
  dlnkfdT = 4 * invT + 0.50321666580472 * (-2000) * invT2;
  // reverse
  phi_r = sc[9] * sc[12];
  Kc = exp(g_RT[3] - g_RT[9] - g_RT[12] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[14]) + (h_RT[9] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[9] += q;  // CH3
  wdot[12] += q; // CO
  wdot[14] -= q; // C2H2
  // d()/d[OH]
  dqdci = +k_f * sc[14];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[117] += dqdci; // dwdot[CH3]/d[OH]
  J[120] += dqdci; // dwdot[CO]/d[OH]
  J[122] -= dqdci; // dwdot[C2H2]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[12];
  J[327] -= dqdci; // dwdot[OH]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[336] += dqdci; // dwdot[CO]/d[CH3]
  J[338] -= dqdci; // dwdot[C2H2]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[9];
  J[435] -= dqdci; // dwdot[OH]/d[CO]
  J[441] += dqdci; // dwdot[CH3]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[446] -= dqdci; // dwdot[C2H2]/d[CO]
  // d()/d[C2H2]
  dqdci = +k_f * sc[3];
  J[507] -= dqdci; // dwdot[OH]/d[C2H2]
  J[513] += dqdci; // dwdot[CH3]/d[C2H2]
  J[516] += dqdci; // dwdot[CO]/d[C2H2]
  J[518] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1274] -= dqdT; // dwdot[C2H2]/dT

  // reaction 109: C2H2 + HCO <=> C2H3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc_qss[2];
  k_f = 10 * exp(2 * tc[0] - 0.50321666580472 * (6000) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (6000) * invT2;
  // reverse
  phi_r = sc[12] * sc_qss[4];
  Kc = exp(-g_RT[12] + g_RT[14] + g_RT_qss[2] - g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT_qss[2]) + (h_RT[12] + h_RT_qss[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // CO
  wdot[14] -= q; // C2H2
  // d()/d[CO]
  dqdci = -k_r * sc_qss[4];
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[446] -= dqdci; // dwdot[C2H2]/d[CO]
  // d()/d[C2H2]
  dqdci = +k_f * sc_qss[2];
  J[516] += dqdci; // dwdot[CO]/d[C2H2]
  J[518] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1274] -= dqdT; // dwdot[C2H2]/dT

  // reaction 110: C2H2 + CH3 <=> aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[14];
  k_f = 2.68e+47 * exp(-12.82 * tc[0] - 0.50321666580472 * (35730) * invT);
  dlnkfdT = -12.82 * invT + 0.50321666580472 * (35730) * invT2;
  // reverse
  phi_r = sc[18];
  Kc = refCinv * exp(g_RT[9] + g_RT[14] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[14]) + (h_RT[18]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[14] -= q; // C2H2
  wdot[18] += q; // aC3H5
  // d()/d[CH3]
  dqdci = +k_f * sc[14];
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[338] -= dqdci; // dwdot[C2H2]/d[CH3]
  J[342] += dqdci; // dwdot[aC3H5]/d[CH3]
  // d()/d[C2H2]
  dqdci = +k_f * sc[9];
  J[513] -= dqdci; // dwdot[CH3]/d[C2H2]
  J[518] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[522] += dqdci; // dwdot[aC3H5]/d[C2H2]
  // d()/d[aC3H5]
  dqdci = -k_r;
  J[657] -= dqdci; // dwdot[CH3]/d[aC3H5]
  J[662] -= dqdci; // dwdot[C2H2]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1274] -= dqdT; // dwdot[C2H2]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT

  // reaction 111: C2H3 + H <=> C2H2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc_qss[4];
  k_f = 90000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[5] * sc[14];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[14] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[4]) + (h_RT[5] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[14] += q; // C2H2
  // d()/d[H]
  dqdci = +k_f * sc_qss[4];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[50] += dqdci; // dwdot[C2H2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[14];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[194] += dqdci; // dwdot[C2H2]/d[H2]
  // d()/d[C2H2]
  dqdci = -k_r * sc[5];
  J[505] -= dqdci; // dwdot[H]/d[C2H2]
  J[509] += dqdci; // dwdot[H2]/d[C2H2]
  J[518] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1274] += dqdT; // dwdot[C2H2]/dT

  // reaction 112: C2H3 + O <=> CH3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc_qss[4];
  k_f = 48000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[12];
  Kc = exp(g_RT[2] - g_RT[9] - g_RT[12] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT_qss[4]) + (h_RT[9] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[9] += q;  // CH3
  wdot[12] += q; // CO
  // d()/d[O]
  dqdci = +k_f * sc_qss[4];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[81] += dqdci; // dwdot[CH3]/d[O]
  J[84] += dqdci; // dwdot[CO]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc[12];
  J[326] -= dqdci; // dwdot[O]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[336] += dqdci; // dwdot[CO]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[9];
  J[434] -= dqdci; // dwdot[O]/d[CO]
  J[441] += dqdci; // dwdot[CH3]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1272] += dqdT; // dwdot[CO]/dT

  // reaction 113: C2H3 + OH <=> C2H2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc_qss[4];
  k_f = 30110000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[6] * sc[14];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[14] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT_qss[4]) + (h_RT[6] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[14] += q; // C2H2
  // d()/d[OH]
  dqdci = +k_f * sc_qss[4];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[122] += dqdci; // dwdot[C2H2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[14];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[230] += dqdci; // dwdot[C2H2]/d[H2O]
  // d()/d[C2H2]
  dqdci = -k_r * sc[6];
  J[507] -= dqdci; // dwdot[OH]/d[C2H2]
  J[510] += dqdci; // dwdot[H2O]/d[C2H2]
  J[518] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1274] += dqdT; // dwdot[C2H2]/dT

  // reaction 114: C2H3 + O2 <=> C2H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[4];
  k_f = 1.34 * exp(1.61 * tc[0] - 0.50321666580472 * (-383.4) * invT);
  dlnkfdT = 1.61 * invT + 0.50321666580472 * (-383.4) * invT2;
  // reverse
  phi_r = sc[4] * sc[14];
  Kc = exp(-g_RT[4] + g_RT[8] - g_RT[14] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[4]) + (h_RT[4] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[14] += q; // C2H2
  // d()/d[HO2]
  dqdci = -k_r * sc[14];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  J[158] += dqdci; // dwdot[C2H2]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[4];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[302] += dqdci; // dwdot[C2H2]/d[O2]
  // d()/d[C2H2]
  dqdci = -k_r * sc[4];
  J[508] += dqdci; // dwdot[HO2]/d[C2H2]
  J[512] -= dqdci; // dwdot[O2]/d[C2H2]
  J[518] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1274] += dqdT; // dwdot[C2H2]/dT

  // reaction 115: C2H3 + O2 <=> CH2CHO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[4];
  k_f = 300000 * exp(0.29 * tc[0] - 0.50321666580472 * (11) * invT);
  dlnkfdT = 0.29 * invT + 0.50321666580472 * (11) * invT2;
  // reverse
  phi_r = sc[2] * sc[17];
  Kc = exp(-g_RT[2] + g_RT[8] - g_RT[17] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[4]) + (h_RT[2] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[8] -= q;  // O2
  wdot[17] += q; // CH2CHO
  // d()/d[O]
  dqdci = -k_r * sc[17];
  J[74] += dqdci; // dwdot[O]/d[O]
  J[80] -= dqdci; // dwdot[O2]/d[O]
  J[89] += dqdci; // dwdot[CH2CHO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[4];
  J[290] += dqdci; // dwdot[O]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[305] += dqdci; // dwdot[CH2CHO]/d[O2]
  // d()/d[CH2CHO]
  dqdci = -k_r * sc[2];
  J[614] += dqdci; // dwdot[O]/d[CH2CHO]
  J[620] -= dqdci; // dwdot[O2]/d[CH2CHO]
  J[629] += dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1262] += dqdT; // dwdot[O]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1277] += dqdT; // dwdot[CH2CHO]/dT

  // reaction 116: C2H3 + O2 <=> CH2O + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[4];
  k_f = 46000000000 * exp(-1.39 * tc[0] - 0.50321666580472 * (1010) * invT);
  dlnkfdT = -1.39 * invT + 0.50321666580472 * (1010) * invT2;
  // reverse
  phi_r = sc[11] * sc_qss[2];
  Kc = exp(g_RT[8] - g_RT[11] - g_RT_qss[2] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[4]) + (h_RT[11] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // O2
  wdot[11] += q; // CH2O
  // d()/d[O2]
  dqdci = +k_f * sc_qss[4];
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[299] += dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[CH2O]
  dqdci = -k_r * sc_qss[2];
  J[404] -= dqdci; // dwdot[O2]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 117: C2H3 + HO2 <=> CH2CHO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc_qss[4];
  k_f = 10000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[17];
  Kc = exp(-g_RT[3] + g_RT[4] - g_RT[17] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT_qss[4]) + (h_RT[3] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[4] -= q;  // HO2
  wdot[17] += q; // CH2CHO
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[125] += dqdci; // dwdot[CH2CHO]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc_qss[4];
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[161] += dqdci; // dwdot[CH2CHO]/d[HO2]
  // d()/d[CH2CHO]
  dqdci = -k_r * sc[3];
  J[615] += dqdci; // dwdot[OH]/d[CH2CHO]
  J[616] -= dqdci; // dwdot[HO2]/d[CH2CHO]
  J[629] += dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1277] += dqdT; // dwdot[CH2CHO]/dT

  // reaction 118: C2H3 + H2O2 <=> C2H4 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc_qss[4];
  k_f = 12100 * exp(0 * tc[0] - 0.50321666580472 * (-596) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (-596) * invT2;
  // reverse
  phi_r = sc[4] * sc[15];
  Kc = exp(-g_RT[4] + g_RT[7] - g_RT[15] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT_qss[4]) + (h_RT[4] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[15] += q; // C2H4
  // d()/d[HO2]
  dqdci = -k_r * sc[15];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[151] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[159] += dqdci; // dwdot[C2H4]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc_qss[4];
  J[256] += dqdci; // dwdot[HO2]/d[H2O2]
  J[259] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[267] += dqdci; // dwdot[C2H4]/d[H2O2]
  // d()/d[C2H4]
  dqdci = -k_r * sc[4];
  J[544] += dqdci; // dwdot[HO2]/d[C2H4]
  J[547] -= dqdci; // dwdot[H2O2]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1267] -= dqdT; // dwdot[H2O2]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT

  // reaction 119: C2H3 + HCO <=> C2H4 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[2] * sc_qss[4];
  k_f = 90330000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  // Remove forward reaction
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // dlnkfdT = 0.0;
  // reverse
  phi_r = sc[12] * sc[15];
  Kc = exp(-g_RT[12] - g_RT[15] + g_RT_qss[2] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[2] + h_RT_qss[4]) + (h_RT[12] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  // Remove forward reaction
  // q = k_f*phi_f - k_r*phi_r;
  q = -k_r * phi_r;
  // Remove forward reaction
  // dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
  dqdT = (-dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // CO
  wdot[15] += q; // C2H4
  // d()/d[CO]
  dqdci = -k_r * sc[15];
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[447] += dqdci; // dwdot[C2H4]/d[CO]
  // d()/d[C2H4]
  dqdci = -k_r * sc[12];
  J[552] += dqdci; // dwdot[CO]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT

  // reaction 120: C2H3 + HCO <=> C2H3CHO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[2] * sc_qss[4];
  k_f = 18000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  // Remove forward reaction
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // dlnkfdT = 0.0;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(-g_RT[20] + g_RT_qss[2] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[2] + h_RT_qss[4]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  // Remove forward reaction
  // q = k_f*phi_f - k_r*phi_r;
  q = -k_r * phi_r;
  // Remove forward reaction
  // dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
  dqdT = (-dkrdT * phi_r);
  // update wdot
  wdot[20] += q; // C2H3CHO
  // d()/d[C2H3CHO]
  dqdci = -k_r;
  J[740] += dqdci; // dwdot[C2H3CHO]/d[C2H3CHO]
  // d()/dT
  J[1280] += dqdT; // dwdot[C2H3CHO]/dT

  // reaction 121: C2H3 + CH3 <=> C2H2 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc_qss[4];
  k_f = 392000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[10] * sc[14];
  Kc = exp(g_RT[9] - g_RT[10] - g_RT[14] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT_qss[4]) + (h_RT[10] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  wdot[14] += q; // C2H2
  // d()/d[CH3]
  dqdci = +k_f * sc_qss[4];
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  J[338] += dqdci; // dwdot[C2H2]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[14];
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  J[374] += dqdci; // dwdot[C2H2]/d[CH4]
  // d()/d[C2H2]
  dqdci = -k_r * sc[10];
  J[513] -= dqdci; // dwdot[CH3]/d[C2H2]
  J[514] += dqdci; // dwdot[CH4]/d[C2H2]
  J[518] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT
  J[1274] += dqdT; // dwdot[C2H2]/dT

  // reaction 122: C2H3 + CH3 <=> H + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc_qss[4];
  k_f = 1.5e+18 * exp(-2.83 * tc[0] - 0.50321666580472 * (18618) * invT);
  dlnkfdT = -2.83 * invT + 0.50321666580472 * (18618) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(-g_RT[1] + g_RT[9] - g_RT[18] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT_qss[4]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH3
  wdot[18] += q; // aC3H5
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[45] -= dqdci; // dwdot[CH3]/d[H]
  J[54] += dqdci; // dwdot[aC3H5]/d[H]
  // d()/d[CH3]
  dqdci = +k_f * sc_qss[4];
  J[325] += dqdci; // dwdot[H]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[342] += dqdci; // dwdot[aC3H5]/d[CH3]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[1];
  J[649] += dqdci; // dwdot[H]/d[aC3H5]
  J[657] -= dqdci; // dwdot[CH3]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT

  // reaction 123: 2 C2H3 <=> C2H2 + C2H4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = pow(sc_qss[4], 2.000000);
  k_f = 960000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  // Remove forward reaction
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[15];
  Kc = exp(-g_RT[14] - g_RT[15] + 2.000000 * g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT_qss[4]) + (h_RT[14] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  // Remove forward reaction
  // q = k_f*phi_f - k_r*phi_r;
  q = -k_r * phi_r;
  // Remove forward reaction
  // dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
  dqdT = (-dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // C2H2
  wdot[15] += q; // C2H4
  // d()/d[C2H2]
  dqdci = -k_r * sc[15];
  J[518] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[519] += dqdci; // dwdot[C2H4]/d[C2H2]
  // d()/d[C2H4]
  dqdci = -k_r * sc[14];
  J[554] += dqdci; // dwdot[C2H2]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1274] += dqdT; // dwdot[C2H2]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT

  // reaction 124: CH2CHO <=> CH3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17];
  k_f = 7.8e+41 * exp(-9.147 * tc[0] - 0.50321666580472 * (46900) * invT);
  dlnkfdT = -9.147 * invT + 0.50321666580472 * (46900) * invT2;
  // reverse
  phi_r = sc[9] * sc[12];
  Kc = refC * exp(-g_RT[9] - g_RT[12] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17]) + (h_RT[9] + h_RT[12]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // CH3
  wdot[12] += q; // CO
  wdot[17] -= q; // CH2CHO
  // d()/d[CH3]
  dqdci = -k_r * sc[12];
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[336] += dqdci; // dwdot[CO]/d[CH3]
  J[341] -= dqdci; // dwdot[CH2CHO]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[9];
  J[441] += dqdci; // dwdot[CH3]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[449] -= dqdci; // dwdot[CH2CHO]/d[CO]
  // d()/d[CH2CHO]
  dqdci = +k_f;
  J[621] += dqdci; // dwdot[CH3]/d[CH2CHO]
  J[624] += dqdci; // dwdot[CO]/d[CH2CHO]
  J[629] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1277] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 125: CH2CHO + H <=> CH3 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 90000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc_qss[2];
  Kc = exp(g_RT[1] - g_RT[9] + g_RT[17] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[9] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[9] += q;  // CH3
  wdot[17] -= q; // CH2CHO
  // d()/d[H]
  dqdci = +k_f * sc[17];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  J[53] -= dqdci; // dwdot[CH2CHO]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc_qss[2];
  J[325] -= dqdci; // dwdot[H]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[341] -= dqdci; // dwdot[CH2CHO]/d[CH3]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[1];
  J[613] -= dqdci; // dwdot[H]/d[CH2CHO]
  J[621] += dqdci; // dwdot[CH3]/d[CH2CHO]
  J[629] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1277] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 126: CH2CHO + O2 <=> CH2O + CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[17];
  k_f = 18000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[11] * sc[12];
  Kc = refC * exp(-g_RT[3] + g_RT[8] - g_RT[11] - g_RT[12] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[8] + h_RT[17]) + (h_RT[3] + h_RT[11] + h_RT[12]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[8] -= q;  // O2
  wdot[11] += q; // CH2O
  wdot[12] += q; // CO
  wdot[17] -= q; // CH2CHO
  // d()/d[OH]
  dqdci = -k_r * sc[11] * sc[12];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[116] -= dqdci; // dwdot[O2]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  J[120] += dqdci; // dwdot[CO]/d[OH]
  J[125] -= dqdci; // dwdot[CH2CHO]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[17];
  J[291] += dqdci; // dwdot[OH]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[299] += dqdci; // dwdot[CH2O]/d[O2]
  J[300] += dqdci; // dwdot[CO]/d[O2]
  J[305] -= dqdci; // dwdot[CH2CHO]/d[O2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[3] * sc[12];
  J[399] += dqdci; // dwdot[OH]/d[CH2O]
  J[404] -= dqdci; // dwdot[O2]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[408] += dqdci; // dwdot[CO]/d[CH2O]
  J[413] -= dqdci; // dwdot[CH2CHO]/d[CH2O]
  // d()/d[CO]
  dqdci = -k_r * sc[3] * sc[11];
  J[435] += dqdci; // dwdot[OH]/d[CO]
  J[440] -= dqdci; // dwdot[O2]/d[CO]
  J[443] += dqdci; // dwdot[CH2O]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[449] -= dqdci; // dwdot[CH2CHO]/d[CO]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[8];
  J[615] += dqdci; // dwdot[OH]/d[CH2CHO]
  J[620] -= dqdci; // dwdot[O2]/d[CH2CHO]
  J[623] += dqdci; // dwdot[CH2O]/d[CH2CHO]
  J[624] += dqdci; // dwdot[CO]/d[CH2CHO]
  J[629] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1277] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 127: C2H4 + H <=> C2H3 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[15];
  k_f = 50.7 * exp(1.9 * tc[0] - 0.50321666580472 * (12950) * invT);
  dlnkfdT = 1.9 * invT + 0.50321666580472 * (12950) * invT2;
  // reverse
  phi_r = sc[5] * sc_qss[4];
  Kc = exp(g_RT[1] - g_RT[5] + g_RT[15] - g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[15]) + (h_RT[5] + h_RT_qss[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[15] -= q; // C2H4
  // d()/d[H]
  dqdci = +k_f * sc[15];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[51] -= dqdci; // dwdot[C2H4]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc_qss[4];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[195] -= dqdci; // dwdot[C2H4]/d[H2]
  // d()/d[C2H4]
  dqdci = +k_f * sc[1];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[545] += dqdci; // dwdot[H2]/d[C2H4]
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 128: C2H4 + O <=> C2H3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[15];
  k_f = 15.1 * exp(1.9 * tc[0] - 0.50321666580472 * (3740) * invT);
  dlnkfdT = 1.9 * invT + 0.50321666580472 * (3740) * invT2;
  // reverse
  phi_r = sc[3] * sc_qss[4];
  Kc = exp(g_RT[2] - g_RT[3] + g_RT[15] - g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[15]) + (h_RT[3] + h_RT_qss[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // OH
  wdot[15] -= q; // C2H4
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[87] -= dqdci; // dwdot[C2H4]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc_qss[4];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[123] -= dqdci; // dwdot[C2H4]/d[OH]
  // d()/d[C2H4]
  dqdci = +k_f * sc[2];
  J[542] -= dqdci; // dwdot[O]/d[C2H4]
  J[543] += dqdci; // dwdot[OH]/d[C2H4]
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 129: C2H4 + O <=> CH3 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[15];
  k_f = 19.2 * exp(1.83 * tc[0] - 0.50321666580472 * (220) * invT);
  dlnkfdT = 1.83 * invT + 0.50321666580472 * (220) * invT2;
  // reverse
  phi_r = sc[9] * sc_qss[2];
  Kc = exp(g_RT[2] - g_RT[9] + g_RT[15] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[15]) + (h_RT[9] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[9] += q;  // CH3
  wdot[15] -= q; // C2H4
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[81] += dqdci; // dwdot[CH3]/d[O]
  J[87] -= dqdci; // dwdot[C2H4]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc_qss[2];
  J[326] -= dqdci; // dwdot[O]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[339] -= dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[C2H4]
  dqdci = +k_f * sc[2];
  J[542] -= dqdci; // dwdot[O]/d[C2H4]
  J[549] += dqdci; // dwdot[CH3]/d[C2H4]
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 130: C2H4 + O <=> CH2 + CH2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[15];
  k_f = 0.384 * exp(1.83 * tc[0] - 0.50321666580472 * (220) * invT);
  dlnkfdT = 1.83 * invT + 0.50321666580472 * (220) * invT2;
  // reverse
  phi_r = sc[11] * sc_qss[0];
  Kc = exp(g_RT[2] - g_RT[11] + g_RT[15] - g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[15]) + (h_RT[11] + h_RT_qss[0]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[11] += q; // CH2O
  wdot[15] -= q; // C2H4
  // d()/d[O]
  dqdci = +k_f * sc[15];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[83] += dqdci; // dwdot[CH2O]/d[O]
  J[87] -= dqdci; // dwdot[C2H4]/d[O]
  // d()/d[CH2O]
  dqdci = -k_r * sc_qss[0];
  J[398] -= dqdci; // dwdot[O]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[411] -= dqdci; // dwdot[C2H4]/d[CH2O]
  // d()/d[C2H4]
  dqdci = +k_f * sc[2];
  J[542] -= dqdci; // dwdot[O]/d[C2H4]
  J[551] += dqdci; // dwdot[CH2O]/d[C2H4]
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 131: C2H4 + OH <=> C2H3 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 3.6 * exp(2 * tc[0] - 0.50321666580472 * (2500) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (2500) * invT2;
  // reverse
  phi_r = sc[6] * sc_qss[4];
  Kc = exp(g_RT[3] - g_RT[6] + g_RT[15] - g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[15]) + (h_RT[6] + h_RT_qss[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[15] -= q; // C2H4
  // d()/d[OH]
  dqdci = +k_f * sc[15];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[123] -= dqdci; // dwdot[C2H4]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc_qss[4];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[231] -= dqdci; // dwdot[C2H4]/d[H2O]
  // d()/d[C2H4]
  dqdci = +k_f * sc[3];
  J[543] -= dqdci; // dwdot[OH]/d[C2H4]
  J[546] += dqdci; // dwdot[H2O]/d[C2H4]
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 132: C2H4 + HCO <=> C2H5 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[2];
  k_f = 10 * exp(2 * tc[0] - 0.50321666580472 * (8000) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (8000) * invT2;
  // reverse
  phi_r = sc[12] * sc_qss[5];
  Kc = exp(-g_RT[12] + g_RT[15] + g_RT_qss[2] - g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[2]) + (h_RT[12] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // CO
  wdot[15] -= q; // C2H4
  // d()/d[CO]
  dqdci = -k_r * sc_qss[5];
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[447] -= dqdci; // dwdot[C2H4]/d[CO]
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[2];
  J[552] += dqdci; // dwdot[CO]/d[C2H4]
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 133: C2H4 + CH2 <=> H + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[0];
  k_f = 20000000 * exp(0 * tc[0] - 0.50321666580472 * (6000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (6000) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(-g_RT[1] + g_RT[15] - g_RT[18] + g_RT_qss[0]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[0]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[15] -= q; // C2H4
  wdot[18] += q; // aC3H5
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[51] -= dqdci; // dwdot[C2H4]/d[H]
  J[54] += dqdci; // dwdot[aC3H5]/d[H]
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[0];
  J[541] += dqdci; // dwdot[H]/d[C2H4]
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[558] += dqdci; // dwdot[aC3H5]/d[C2H4]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[1];
  J[649] += dqdci; // dwdot[H]/d[aC3H5]
  J[663] -= dqdci; // dwdot[C2H4]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT

  // reaction 134: C2H4 + CH2* <=> H + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[1];
  k_f = 50000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(-g_RT[1] + g_RT[15] - g_RT[18] + g_RT_qss[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[1]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[15] -= q; // C2H4
  wdot[18] += q; // aC3H5
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[51] -= dqdci; // dwdot[C2H4]/d[H]
  J[54] += dqdci; // dwdot[aC3H5]/d[H]
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[1];
  J[541] += dqdci; // dwdot[H]/d[C2H4]
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[558] += dqdci; // dwdot[aC3H5]/d[C2H4]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[1];
  J[649] += dqdci; // dwdot[H]/d[aC3H5]
  J[663] -= dqdci; // dwdot[C2H4]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT

  // reaction 135: C2H4 + CH3 <=> C2H3 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[15];
  k_f = 0.227 * exp(2 * tc[0] - 0.50321666580472 * (9200) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (9200) * invT2;
  // reverse
  phi_r = sc[10] * sc_qss[4];
  Kc = exp(g_RT[9] - g_RT[10] + g_RT[15] - g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[15]) + (h_RT[10] + h_RT_qss[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  wdot[15] -= q; // C2H4
  // d()/d[CH3]
  dqdci = +k_f * sc[15];
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  J[339] -= dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc_qss[4];
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  J[375] -= dqdci; // dwdot[C2H4]/d[CH4]
  // d()/d[C2H4]
  dqdci = +k_f * sc[9];
  J[549] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[550] += dqdci; // dwdot[CH4]/d[C2H4]
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 136: nC3H7 <=> C2H4 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[6];
  k_f = 96000000000000 * exp(0 * tc[0] - 0.50321666580472 * (31022.94) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (31022.94) * invT2;
  // reverse
  phi_r = sc[9] * sc[15];
  Kc = refC * exp(-g_RT[9] - g_RT[15] + g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[6]) + (h_RT[9] + h_RT[15]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // CH3
  wdot[15] += q; // C2H4
  // d()/d[CH3]
  dqdci = -k_r * sc[15];
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[339] += dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[9];
  J[549] += dqdci; // dwdot[CH3]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT

  // reaction 137: C2H4 + O2 <=> C2H3 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[15];
  k_f = 42200000 * exp(0 * tc[0] - 0.50321666580472 * (60800) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (60800) * invT2;
  // reverse
  phi_r = sc[4] * sc_qss[4];
  Kc = exp(-g_RT[4] + g_RT[8] + g_RT[15] - g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[15]) + (h_RT[4] + h_RT_qss[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[15] -= q; // C2H4
  // d()/d[HO2]
  dqdci = -k_r * sc_qss[4];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  J[159] -= dqdci; // dwdot[C2H4]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[15];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[303] -= dqdci; // dwdot[C2H4]/d[O2]
  // d()/d[C2H4]
  dqdci = +k_f * sc[8];
  J[544] += dqdci; // dwdot[HO2]/d[C2H4]
  J[548] -= dqdci; // dwdot[O2]/d[C2H4]
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 138: C2H3 + C2H4 <=> C4H7
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[4];
  k_f = 7.93e+32 * exp(-8.47 * tc[0] - 0.50321666580472 * (14220) * invT);
  dlnkfdT = -8.47 * invT + 0.50321666580472 * (14220) * invT2;
  // reverse
  phi_r = sc[21];
  Kc = refCinv * exp(g_RT[15] - g_RT[21] + g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[4]) + (h_RT[21]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] -= q; // C2H4
  wdot[21] += q; // C4H7
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[4];
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[561] += dqdci; // dwdot[C4H7]/d[C2H4]
  // d()/d[C4H7]
  dqdci = -k_r;
  J[771] -= dqdci; // dwdot[C2H4]/d[C4H7]
  J[777] += dqdci; // dwdot[C4H7]/d[C4H7]
  // d()/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT
  J[1281] += dqdT; // dwdot[C4H7]/dT

  // reaction 139: C2H5 + H <=> C2H4 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc_qss[5];
  k_f = 2000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[5] * sc[15];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[15] + g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[5]) + (h_RT[5] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[15] += q; // C2H4
  // d()/d[H]
  dqdci = +k_f * sc_qss[5];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[15];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[195] += dqdci; // dwdot[C2H4]/d[H2]
  // d()/d[C2H4]
  dqdci = -k_r * sc[5];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[545] += dqdci; // dwdot[H2]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT

  // reaction 140: C2H5 + O <=> CH2O + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc_qss[5];
  k_f = 16040000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[11];
  Kc = exp(g_RT[2] - g_RT[9] - g_RT[11] + g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT_qss[5]) + (h_RT[9] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[9] += q;  // CH3
  wdot[11] += q; // CH2O
  // d()/d[O]
  dqdci = +k_f * sc_qss[5];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[81] += dqdci; // dwdot[CH3]/d[O]
  J[83] += dqdci; // dwdot[CH2O]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc[11];
  J[326] -= dqdci; // dwdot[O]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[335] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[9];
  J[398] -= dqdci; // dwdot[O]/d[CH2O]
  J[405] += dqdci; // dwdot[CH3]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 141: C2H5 + O2 <=> C2H4 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[5];
  k_f = 20000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[4] * sc[15];
  Kc = exp(-g_RT[4] + g_RT[8] - g_RT[15] + g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[5]) + (h_RT[4] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[15] += q; // C2H4
  // d()/d[HO2]
  dqdci = -k_r * sc[15];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  J[159] += dqdci; // dwdot[C2H4]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[5];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[303] += dqdci; // dwdot[C2H4]/d[O2]
  // d()/d[C2H4]
  dqdci = -k_r * sc[4];
  J[544] += dqdci; // dwdot[HO2]/d[C2H4]
  J[548] -= dqdci; // dwdot[O2]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT

  // reaction 142: C2H5 + HO2 <=> C2H6 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc_qss[5];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[8] * sc[16];
  Kc = exp(g_RT[4] - g_RT[8] - g_RT[16] + g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT_qss[5]) + (h_RT[8] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[16] += q; // C2H6
  // d()/d[HO2]
  dqdci = +k_f * sc_qss[5];
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[152] += dqdci; // dwdot[O2]/d[HO2]
  J[160] += dqdci; // dwdot[C2H6]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[16];
  J[292] -= dqdci; // dwdot[HO2]/d[O2]
  J[296] += dqdci; // dwdot[O2]/d[O2]
  J[304] += dqdci; // dwdot[C2H6]/d[O2]
  // d()/d[C2H6]
  dqdci = -k_r * sc[8];
  J[580] -= dqdci; // dwdot[HO2]/d[C2H6]
  J[584] += dqdci; // dwdot[O2]/d[C2H6]
  J[592] += dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1268] += dqdT; // dwdot[O2]/dT
  J[1276] += dqdT; // dwdot[C2H6]/dT

  // reaction 143: C2H5 + HO2 <=> C2H4 + H2O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc_qss[5];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[7] * sc[15];
  Kc = exp(g_RT[4] - g_RT[7] - g_RT[15] + g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT_qss[5]) + (h_RT[7] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[15] += q; // C2H4
  // d()/d[HO2]
  dqdci = +k_f * sc_qss[5];
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[151] += dqdci; // dwdot[H2O2]/d[HO2]
  J[159] += dqdci; // dwdot[C2H4]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[15];
  J[256] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[259] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[267] += dqdci; // dwdot[C2H4]/d[H2O2]
  // d()/d[C2H4]
  dqdci = -k_r * sc[7];
  J[544] -= dqdci; // dwdot[HO2]/d[C2H4]
  J[547] += dqdci; // dwdot[H2O2]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1267] += dqdT; // dwdot[H2O2]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT

  // reaction 144: C2H5 + HO2 <=> CH2O + CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc_qss[5];
  k_f = 24000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[9] * sc[11];
  Kc = refC * exp(-g_RT[3] + g_RT[4] - g_RT[9] - g_RT[11] + g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT_qss[5]) + (h_RT[3] + h_RT[9] + h_RT[11]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[4] -= q;  // HO2
  wdot[9] += q;  // CH3
  wdot[11] += q; // CH2O
  // d()/d[OH]
  dqdci = -k_r * sc[9] * sc[11];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[117] += dqdci; // dwdot[CH3]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc_qss[5];
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[153] += dqdci; // dwdot[CH3]/d[HO2]
  J[155] += dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[CH3]
  dqdci = -k_r * sc[3] * sc[11];
  J[327] += dqdci; // dwdot[OH]/d[CH3]
  J[328] -= dqdci; // dwdot[HO2]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[335] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[3] * sc[9];
  J[399] += dqdci; // dwdot[OH]/d[CH2O]
  J[400] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[405] += dqdci; // dwdot[CH3]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 145: C2H5 + H2O2 <=> C2H6 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc_qss[5];
  k_f = 8700 * exp(0 * tc[0] - 0.50321666580472 * (974) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (974) * invT2;
  // reverse
  phi_r = sc[4] * sc[16];
  Kc = exp(-g_RT[4] + g_RT[7] - g_RT[16] + g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT_qss[5]) + (h_RT[4] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[16] += q; // C2H6
  // d()/d[HO2]
  dqdci = -k_r * sc[16];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[151] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[160] += dqdci; // dwdot[C2H6]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc_qss[5];
  J[256] += dqdci; // dwdot[HO2]/d[H2O2]
  J[259] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[268] += dqdci; // dwdot[C2H6]/d[H2O2]
  // d()/d[C2H6]
  dqdci = -k_r * sc[4];
  J[580] += dqdci; // dwdot[HO2]/d[C2H6]
  J[583] -= dqdci; // dwdot[H2O2]/d[C2H6]
  J[592] += dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1267] -= dqdT; // dwdot[H2O2]/dT
  J[1276] += dqdT; // dwdot[C2H6]/dT

  // reaction 146: C2H3 + C2H5 <=> CH3 + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[4] * sc_qss[5];
  k_f = 3.9e+26 * exp(-5.22 * tc[0] - 0.50321666580472 * (19747) * invT);
  // Remove forward reaction
  dlnkfdT = -5.22 * invT + 0.50321666580472 * (19747) * invT2;
  // dlnkfdT = 0.0;
  // reverse
  phi_r = sc[9] * sc[18];
  Kc = exp(-g_RT[9] - g_RT[18] + g_RT_qss[4] + g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[4] + h_RT_qss[5]) + (h_RT[9] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  // Remove forward reaction
  // q = k_f*phi_f - k_r*phi_r;
  q = -k_r * phi_r;
  // Remove forward reaction
  // dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
  dqdT = (-dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // CH3
  wdot[18] += q; // aC3H5
  // d()/d[CH3]
  dqdci = -k_r * sc[18];
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[342] += dqdci; // dwdot[aC3H5]/d[CH3]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[9];
  J[657] += dqdci; // dwdot[CH3]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT

  // reaction 147: C2H6 + H <=> C2H5 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[16];
  k_f = 115 * exp(1.9 * tc[0] - 0.50321666580472 * (7530) * invT);
  dlnkfdT = 1.9 * invT + 0.50321666580472 * (7530) * invT2;
  // reverse
  phi_r = sc[5] * sc_qss[5];
  Kc = exp(g_RT[1] - g_RT[5] + g_RT[16] - g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[16]) + (h_RT[5] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[16] -= q; // C2H6
  // d()/d[H]
  dqdci = +k_f * sc[16];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[52] -= dqdci; // dwdot[C2H6]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc_qss[5];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[196] -= dqdci; // dwdot[C2H6]/d[H2]
  // d()/d[C2H6]
  dqdci = +k_f * sc[1];
  J[577] -= dqdci; // dwdot[H]/d[C2H6]
  J[581] += dqdci; // dwdot[H2]/d[C2H6]
  J[592] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1276] -= dqdT; // dwdot[C2H6]/dT

  // reaction 148: C2H6 + O <=> C2H5 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[16];
  k_f = 89.8 * exp(1.92 * tc[0] - 0.50321666580472 * (5690) * invT);
  dlnkfdT = 1.92 * invT + 0.50321666580472 * (5690) * invT2;
  // reverse
  phi_r = sc[3] * sc_qss[5];
  Kc = exp(g_RT[2] - g_RT[3] + g_RT[16] - g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[3] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // OH
  wdot[16] -= q; // C2H6
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[88] -= dqdci; // dwdot[C2H6]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc_qss[5];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[124] -= dqdci; // dwdot[C2H6]/d[OH]
  // d()/d[C2H6]
  dqdci = +k_f * sc[2];
  J[578] -= dqdci; // dwdot[O]/d[C2H6]
  J[579] += dqdci; // dwdot[OH]/d[C2H6]
  J[592] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1276] -= dqdT; // dwdot[C2H6]/dT

  // reaction 149: C2H6 + OH <=> C2H5 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[16];
  k_f = 3.54 * exp(2.12 * tc[0] - 0.50321666580472 * (870) * invT);
  dlnkfdT = 2.12 * invT + 0.50321666580472 * (870) * invT2;
  // reverse
  phi_r = sc[6] * sc_qss[5];
  Kc = exp(g_RT[3] - g_RT[6] + g_RT[16] - g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[16]) + (h_RT[6] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[16] -= q; // C2H6
  // d()/d[OH]
  dqdci = +k_f * sc[16];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[124] -= dqdci; // dwdot[C2H6]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc_qss[5];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[232] -= dqdci; // dwdot[C2H6]/d[H2O]
  // d()/d[C2H6]
  dqdci = +k_f * sc[3];
  J[579] -= dqdci; // dwdot[OH]/d[C2H6]
  J[582] += dqdci; // dwdot[H2O]/d[C2H6]
  J[592] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1276] -= dqdT; // dwdot[C2H6]/dT

  // reaction 150: C2H6 + CH2* <=> C2H5 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc_qss[1];
  k_f = 40000000 * exp(0 * tc[0] - 0.50321666580472 * (-550) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (-550) * invT2;
  // reverse
  phi_r = sc[9] * sc_qss[5];
  Kc = exp(-g_RT[9] + g_RT[16] + g_RT_qss[1] - g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT_qss[1]) + (h_RT[9] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // CH3
  wdot[16] -= q; // C2H6
  // d()/d[CH3]
  dqdci = -k_r * sc_qss[5];
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[340] -= dqdci; // dwdot[C2H6]/d[CH3]
  // d()/d[C2H6]
  dqdci = +k_f * sc_qss[1];
  J[585] += dqdci; // dwdot[CH3]/d[C2H6]
  J[592] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1276] -= dqdT; // dwdot[C2H6]/dT

  // reaction 151: C2H6 + CH3 <=> C2H5 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[16];
  k_f = 6.14 * exp(1.74 * tc[0] - 0.50321666580472 * (10450) * invT);
  dlnkfdT = 1.74 * invT + 0.50321666580472 * (10450) * invT2;
  // reverse
  phi_r = sc[10] * sc_qss[5];
  Kc = exp(g_RT[9] - g_RT[10] + g_RT[16] - g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[16]) + (h_RT[10] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  wdot[16] -= q; // C2H6
  // d()/d[CH3]
  dqdci = +k_f * sc[16];
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  J[340] -= dqdci; // dwdot[C2H6]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc_qss[5];
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  J[376] -= dqdci; // dwdot[C2H6]/d[CH4]
  // d()/d[C2H6]
  dqdci = +k_f * sc[9];
  J[585] -= dqdci; // dwdot[CH3]/d[C2H6]
  J[586] += dqdci; // dwdot[CH4]/d[C2H6]
  J[592] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT
  J[1276] -= dqdT; // dwdot[C2H6]/dT

  // reaction 152: O + aC3H5 <=> C2H3CHO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[18];
  k_f = 60000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[20];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[18]) + (h_RT[1] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[18] -= q; // aC3H5
  wdot[20] += q; // C2H3CHO
  // d()/d[H]
  dqdci = -k_r * sc[20];
  J[37] += dqdci; // dwdot[H]/d[H]
  J[38] -= dqdci; // dwdot[O]/d[H]
  J[54] -= dqdci; // dwdot[aC3H5]/d[H]
  J[56] += dqdci; // dwdot[C2H3CHO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[18];
  J[73] += dqdci; // dwdot[H]/d[O]
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[90] -= dqdci; // dwdot[aC3H5]/d[O]
  J[92] += dqdci; // dwdot[C2H3CHO]/d[O]
  // d()/d[aC3H5]
  dqdci = +k_f * sc[2];
  J[649] += dqdci; // dwdot[H]/d[aC3H5]
  J[650] -= dqdci; // dwdot[O]/d[aC3H5]
  J[666] -= dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[668] += dqdci; // dwdot[C2H3CHO]/d[aC3H5]
  // d()/d[C2H3CHO]
  dqdci = -k_r * sc[1];
  J[721] += dqdci; // dwdot[H]/d[C2H3CHO]
  J[722] -= dqdci; // dwdot[O]/d[C2H3CHO]
  J[738] -= dqdci; // dwdot[aC3H5]/d[C2H3CHO]
  J[740] += dqdci; // dwdot[C2H3CHO]/d[C2H3CHO]
  // d()/dT
  J[1261] += dqdT; // dwdot[H]/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1278] -= dqdT; // dwdot[aC3H5]/dT
  J[1280] += dqdT; // dwdot[C2H3CHO]/dT

  // reaction 153: OH + aC3H5 <=> C2H3CHO + 2 H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[18];
  k_f = 4.2e+26 * exp(-5.16 * tc[0] - 0.50321666580472 * (30126) * invT);
  dlnkfdT = -5.16 * invT + 0.50321666580472 * (30126) * invT2;
  // reverse
  phi_r = (sc[1] * sc[1]) * sc[20];
  Kc = refC * exp(-2.000000 * g_RT[1] + g_RT[3] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[3] + h_RT[18]) + (2.000000 * h_RT[1] + h_RT[20]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += 2 * q; // H
  wdot[3] -= q;     // OH
  wdot[18] -= q;    // aC3H5
  wdot[20] += q;    // C2H3CHO
  // d()/d[H]
  dqdci = -k_r * 2.000000 * sc[1] * sc[20];
  J[37] += 2 * dqdci; // dwdot[H]/d[H]
  J[39] -= dqdci;     // dwdot[OH]/d[H]
  J[54] -= dqdci;     // dwdot[aC3H5]/d[H]
  J[56] += dqdci;     // dwdot[C2H3CHO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[18];
  J[109] += 2 * dqdci; // dwdot[H]/d[OH]
  J[111] -= dqdci;     // dwdot[OH]/d[OH]
  J[126] -= dqdci;     // dwdot[aC3H5]/d[OH]
  J[128] += dqdci;     // dwdot[C2H3CHO]/d[OH]
  // d()/d[aC3H5]
  dqdci = +k_f * sc[3];
  J[649] += 2 * dqdci; // dwdot[H]/d[aC3H5]
  J[651] -= dqdci;     // dwdot[OH]/d[aC3H5]
  J[666] -= dqdci;     // dwdot[aC3H5]/d[aC3H5]
  J[668] += dqdci;     // dwdot[C2H3CHO]/d[aC3H5]
  // d()/d[C2H3CHO]
  dqdci = -k_r * pow(sc[1], 2.000000);
  J[721] += 2 * dqdci; // dwdot[H]/d[C2H3CHO]
  J[723] -= dqdci;     // dwdot[OH]/d[C2H3CHO]
  J[738] -= dqdci;     // dwdot[aC3H5]/d[C2H3CHO]
  J[740] += dqdci;     // dwdot[C2H3CHO]/d[C2H3CHO]
  // d()/dT
  J[1261] += 2 * dqdT; // dwdot[H]/dT
  J[1263] -= dqdT;     // dwdot[OH]/dT
  J[1278] -= dqdT;     // dwdot[aC3H5]/dT
  J[1280] += dqdT;     // dwdot[C2H3CHO]/dT

  // reaction 154: O2 + aC3H5 <=> C2H3CHO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[18];
  k_f = 18200000 * exp(-0.41 * tc[0] - 0.50321666580472 * (22859) * invT);
  dlnkfdT = -0.41 * invT + 0.50321666580472 * (22859) * invT2;
  // reverse
  phi_r = sc[3] * sc[20];
  Kc = exp(-g_RT[3] + g_RT[8] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[18]) + (h_RT[3] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[8] -= q;  // O2
  wdot[18] -= q; // aC3H5
  wdot[20] += q; // C2H3CHO
  // d()/d[OH]
  dqdci = -k_r * sc[20];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[116] -= dqdci; // dwdot[O2]/d[OH]
  J[126] -= dqdci; // dwdot[aC3H5]/d[OH]
  J[128] += dqdci; // dwdot[C2H3CHO]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[18];
  J[291] += dqdci; // dwdot[OH]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[306] -= dqdci; // dwdot[aC3H5]/d[O2]
  J[308] += dqdci; // dwdot[C2H3CHO]/d[O2]
  // d()/d[aC3H5]
  dqdci = +k_f * sc[8];
  J[651] += dqdci; // dwdot[OH]/d[aC3H5]
  J[656] -= dqdci; // dwdot[O2]/d[aC3H5]
  J[666] -= dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[668] += dqdci; // dwdot[C2H3CHO]/d[aC3H5]
  // d()/d[C2H3CHO]
  dqdci = -k_r * sc[3];
  J[723] += dqdci; // dwdot[OH]/d[C2H3CHO]
  J[728] -= dqdci; // dwdot[O2]/d[C2H3CHO]
  J[738] -= dqdci; // dwdot[aC3H5]/d[C2H3CHO]
  J[740] += dqdci; // dwdot[C2H3CHO]/d[C2H3CHO]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1278] -= dqdT; // dwdot[aC3H5]/dT
  J[1280] += dqdT; // dwdot[C2H3CHO]/dT

  // reaction 155: HO2 + aC3H5 <=> C3H6 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 2660000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[8] * sc[19];
  Kc = exp(g_RT[4] - g_RT[8] + g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[8] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[18] -= q; // aC3H5
  wdot[19] += q; // C3H6
  // d()/d[HO2]
  dqdci = +k_f * sc[18];
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[152] += dqdci; // dwdot[O2]/d[HO2]
  J[162] -= dqdci; // dwdot[aC3H5]/d[HO2]
  J[163] += dqdci; // dwdot[C3H6]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[19];
  J[292] -= dqdci; // dwdot[HO2]/d[O2]
  J[296] += dqdci; // dwdot[O2]/d[O2]
  J[306] -= dqdci; // dwdot[aC3H5]/d[O2]
  J[307] += dqdci; // dwdot[C3H6]/d[O2]
  // d()/d[aC3H5]
  dqdci = +k_f * sc[4];
  J[652] -= dqdci; // dwdot[HO2]/d[aC3H5]
  J[656] += dqdci; // dwdot[O2]/d[aC3H5]
  J[666] -= dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[667] += dqdci; // dwdot[C3H6]/d[aC3H5]
  // d()/d[C3H6]
  dqdci = -k_r * sc[8];
  J[688] -= dqdci; // dwdot[HO2]/d[C3H6]
  J[692] += dqdci; // dwdot[O2]/d[C3H6]
  J[702] -= dqdci; // dwdot[aC3H5]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1268] += dqdT; // dwdot[O2]/dT
  J[1278] -= dqdT; // dwdot[aC3H5]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT

  // reaction 156: HO2 + aC3H5 <=> C2H3 + CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 6600000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[11] * sc_qss[4];
  Kc = refC * exp(-g_RT[3] + g_RT[4] - g_RT[11] + g_RT[18] - g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[3] + h_RT[11] + h_RT_qss[4]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[4] -= q;  // HO2
  wdot[11] += q; // CH2O
  wdot[18] -= q; // aC3H5
  // d()/d[OH]
  dqdci = -k_r * sc[11] * sc_qss[4];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  J[126] -= dqdci; // dwdot[aC3H5]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[18];
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[155] += dqdci; // dwdot[CH2O]/d[HO2]
  J[162] -= dqdci; // dwdot[aC3H5]/d[HO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[3] * sc_qss[4];
  J[399] += dqdci; // dwdot[OH]/d[CH2O]
  J[400] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[414] -= dqdci; // dwdot[aC3H5]/d[CH2O]
  // d()/d[aC3H5]
  dqdci = +k_f * sc[4];
  J[651] += dqdci; // dwdot[OH]/d[aC3H5]
  J[652] -= dqdci; // dwdot[HO2]/d[aC3H5]
  J[659] += dqdci; // dwdot[CH2O]/d[aC3H5]
  J[666] -= dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT
  J[1278] -= dqdT; // dwdot[aC3H5]/dT

  // reaction 157: HCO + aC3H5 <=> C3H6 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc_qss[2];
  k_f = 60000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[12] * sc[19];
  Kc = exp(-g_RT[12] + g_RT[18] - g_RT[19] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT_qss[2]) + (h_RT[12] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // CO
  wdot[18] -= q; // aC3H5
  wdot[19] += q; // C3H6
  // d()/d[CO]
  dqdci = -k_r * sc[19];
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[450] -= dqdci; // dwdot[aC3H5]/d[CO]
  J[451] += dqdci; // dwdot[C3H6]/d[CO]
  // d()/d[aC3H5]
  dqdci = +k_f * sc_qss[2];
  J[660] += dqdci; // dwdot[CO]/d[aC3H5]
  J[666] -= dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[667] += dqdci; // dwdot[C3H6]/d[aC3H5]
  // d()/d[C3H6]
  dqdci = -k_r * sc[12];
  J[696] += dqdci; // dwdot[CO]/d[C3H6]
  J[702] -= dqdci; // dwdot[aC3H5]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1278] -= dqdT; // dwdot[aC3H5]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT

  // reaction 158: C3H6 + H <=> C2H4 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 8e+15 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[9] * sc[15];
  Kc = exp(g_RT[1] - g_RT[9] - g_RT[15] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[9] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[9] += q;  // CH3
  wdot[15] += q; // C2H4
  wdot[19] -= q; // C3H6
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  J[55] -= dqdci; // dwdot[C3H6]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[15];
  J[325] -= dqdci; // dwdot[H]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[339] += dqdci; // dwdot[C2H4]/d[CH3]
  J[343] -= dqdci; // dwdot[C3H6]/d[CH3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[9];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[549] += dqdci; // dwdot[CH3]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[559] -= dqdci; // dwdot[C3H6]/d[C2H4]
  // d()/d[C3H6]
  dqdci = +k_f * sc[1];
  J[685] -= dqdci; // dwdot[H]/d[C3H6]
  J[693] += dqdci; // dwdot[CH3]/d[C3H6]
  J[699] += dqdci; // dwdot[C2H4]/d[C3H6]
  J[703] -= dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT
  J[1279] -= dqdT; // dwdot[C3H6]/dT

  // reaction 159: C3H6 + H <=> H2 + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 0.173 * exp(2.5 * tc[0] - 0.50321666580472 * (2490) * invT);
  dlnkfdT = 2.5 * invT + 0.50321666580472 * (2490) * invT2;
  // reverse
  phi_r = sc[5] * sc[18];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[5] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[18] += q; // aC3H5
  wdot[19] -= q; // C3H6
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[54] += dqdci; // dwdot[aC3H5]/d[H]
  J[55] -= dqdci; // dwdot[C3H6]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[18];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[198] += dqdci; // dwdot[aC3H5]/d[H2]
  J[199] -= dqdci; // dwdot[C3H6]/d[H2]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[5];
  J[649] -= dqdci; // dwdot[H]/d[aC3H5]
  J[653] += dqdci; // dwdot[H2]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[667] -= dqdci; // dwdot[C3H6]/d[aC3H5]
  // d()/d[C3H6]
  dqdci = +k_f * sc[1];
  J[685] -= dqdci; // dwdot[H]/d[C3H6]
  J[689] += dqdci; // dwdot[H2]/d[C3H6]
  J[702] += dqdci; // dwdot[aC3H5]/d[C3H6]
  J[703] -= dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT
  J[1279] -= dqdT; // dwdot[C3H6]/dT

  // reaction 160: C3H6 + O <=> C2H3CHO + 2 H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 40 * exp(1.65 * tc[0] - 0.50321666580472 * (327) * invT);
  dlnkfdT = 1.65 * invT + 0.50321666580472 * (327) * invT2;
  // reverse
  phi_r = (sc[1] * sc[1]) * sc[20];
  Kc = refC * exp(-2.000000 * g_RT[1] + g_RT[2] + g_RT[19] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[2] + h_RT[19]) + (2.000000 * h_RT[1] + h_RT[20]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += 2 * q; // H
  wdot[2] -= q;     // O
  wdot[19] -= q;    // C3H6
  wdot[20] += q;    // C2H3CHO
  // d()/d[H]
  dqdci = -k_r * 2.000000 * sc[1] * sc[20];
  J[37] += 2 * dqdci; // dwdot[H]/d[H]
  J[38] -= dqdci;     // dwdot[O]/d[H]
  J[55] -= dqdci;     // dwdot[C3H6]/d[H]
  J[56] += dqdci;     // dwdot[C2H3CHO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[73] += 2 * dqdci; // dwdot[H]/d[O]
  J[74] -= dqdci;     // dwdot[O]/d[O]
  J[91] -= dqdci;     // dwdot[C3H6]/d[O]
  J[92] += dqdci;     // dwdot[C2H3CHO]/d[O]
  // d()/d[C3H6]
  dqdci = +k_f * sc[2];
  J[685] += 2 * dqdci; // dwdot[H]/d[C3H6]
  J[686] -= dqdci;     // dwdot[O]/d[C3H6]
  J[703] -= dqdci;     // dwdot[C3H6]/d[C3H6]
  J[704] += dqdci;     // dwdot[C2H3CHO]/d[C3H6]
  // d()/d[C2H3CHO]
  dqdci = -k_r * pow(sc[1], 2.000000);
  J[721] += 2 * dqdci; // dwdot[H]/d[C2H3CHO]
  J[722] -= dqdci;     // dwdot[O]/d[C2H3CHO]
  J[739] -= dqdci;     // dwdot[C3H6]/d[C2H3CHO]
  J[740] += dqdci;     // dwdot[C2H3CHO]/d[C2H3CHO]
  // d()/dT
  J[1261] += 2 * dqdT; // dwdot[H]/dT
  J[1262] -= dqdT;     // dwdot[O]/dT
  J[1279] -= dqdT;     // dwdot[C3H6]/dT
  J[1280] += dqdT;     // dwdot[C2H3CHO]/dT

  // reaction 161: C3H6 + O => C2H5 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 35 * exp(1.65 * tc[0] - 0.50321666580472 * (-972) * invT);
  dlnkfdT = 1.65 * invT + 0.50321666580472 * (-972) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[2] -= q;  // O
  wdot[19] -= q; // C3H6
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[91] -= dqdci; // dwdot[C3H6]/d[O]
  // d()/d[C3H6]
  dqdci = +k_f * sc[2];
  J[686] -= dqdci; // dwdot[O]/d[C3H6]
  J[703] -= dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1279] -= dqdT; // dwdot[C3H6]/dT

  // reaction 162: C3H6 + O <=> OH + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 180000 * exp(0.7 * tc[0] - 0.50321666580472 * (5880) * invT);
  dlnkfdT = 0.7 * invT + 0.50321666580472 * (5880) * invT2;
  // reverse
  phi_r = sc[3] * sc[18];
  Kc = exp(g_RT[2] - g_RT[3] - g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[19]) + (h_RT[3] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // OH
  wdot[18] += q; // aC3H5
  wdot[19] -= q; // C3H6
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[90] += dqdci; // dwdot[aC3H5]/d[O]
  J[91] -= dqdci; // dwdot[C3H6]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[126] += dqdci; // dwdot[aC3H5]/d[OH]
  J[127] -= dqdci; // dwdot[C3H6]/d[OH]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[3];
  J[650] -= dqdci; // dwdot[O]/d[aC3H5]
  J[651] += dqdci; // dwdot[OH]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[667] -= dqdci; // dwdot[C3H6]/d[aC3H5]
  // d()/d[C3H6]
  dqdci = +k_f * sc[2];
  J[686] -= dqdci; // dwdot[O]/d[C3H6]
  J[687] += dqdci; // dwdot[OH]/d[C3H6]
  J[702] += dqdci; // dwdot[aC3H5]/d[C3H6]
  J[703] -= dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT
  J[1279] -= dqdT; // dwdot[C3H6]/dT

  // reaction 163: C3H6 + OH <=> H2O + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[19];
  k_f = 3.1 * exp(2 * tc[0] - 0.50321666580472 * (-298) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (-298) * invT2;
  // reverse
  phi_r = sc[6] * sc[18];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[19]) + (h_RT[6] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[18] += q; // aC3H5
  wdot[19] -= q; // C3H6
  // d()/d[OH]
  dqdci = +k_f * sc[19];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[126] += dqdci; // dwdot[aC3H5]/d[OH]
  J[127] -= dqdci; // dwdot[C3H6]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[18];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[234] += dqdci; // dwdot[aC3H5]/d[H2O]
  J[235] -= dqdci; // dwdot[C3H6]/d[H2O]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[6];
  J[651] -= dqdci; // dwdot[OH]/d[aC3H5]
  J[654] += dqdci; // dwdot[H2O]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[667] -= dqdci; // dwdot[C3H6]/d[aC3H5]
  // d()/d[C3H6]
  dqdci = +k_f * sc[3];
  J[687] -= dqdci; // dwdot[OH]/d[C3H6]
  J[690] += dqdci; // dwdot[H2O]/d[C3H6]
  J[702] += dqdci; // dwdot[aC3H5]/d[C3H6]
  J[703] -= dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT
  J[1279] -= dqdT; // dwdot[C3H6]/dT

  // reaction 164: C3H6 + HO2 <=> H2O2 + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[19];
  k_f = 0.0096 * exp(2.6 * tc[0] - 0.50321666580472 * (13910) * invT);
  dlnkfdT = 2.6 * invT + 0.50321666580472 * (13910) * invT2;
  // reverse
  phi_r = sc[7] * sc[18];
  Kc = exp(g_RT[4] - g_RT[7] - g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[19]) + (h_RT[7] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[18] += q; // aC3H5
  wdot[19] -= q; // C3H6
  // d()/d[HO2]
  dqdci = +k_f * sc[19];
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[151] += dqdci; // dwdot[H2O2]/d[HO2]
  J[162] += dqdci; // dwdot[aC3H5]/d[HO2]
  J[163] -= dqdci; // dwdot[C3H6]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[18];
  J[256] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[259] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[270] += dqdci; // dwdot[aC3H5]/d[H2O2]
  J[271] -= dqdci; // dwdot[C3H6]/d[H2O2]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[7];
  J[652] -= dqdci; // dwdot[HO2]/d[aC3H5]
  J[655] += dqdci; // dwdot[H2O2]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[667] -= dqdci; // dwdot[C3H6]/d[aC3H5]
  // d()/d[C3H6]
  dqdci = +k_f * sc[4];
  J[688] -= dqdci; // dwdot[HO2]/d[C3H6]
  J[691] += dqdci; // dwdot[H2O2]/d[C3H6]
  J[702] += dqdci; // dwdot[aC3H5]/d[C3H6]
  J[703] -= dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1267] += dqdT; // dwdot[H2O2]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT
  J[1279] -= dqdT; // dwdot[C3H6]/dT

  // reaction 165: C3H6 + CH3 <=> CH4 + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[19];
  k_f = 2.2e-06 * exp(3.5 * tc[0] - 0.50321666580472 * (5675) * invT);
  dlnkfdT = 3.5 * invT + 0.50321666580472 * (5675) * invT2;
  // reverse
  phi_r = sc[10] * sc[18];
  Kc = exp(g_RT[9] - g_RT[10] - g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[19]) + (h_RT[10] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  wdot[18] += q; // aC3H5
  wdot[19] -= q; // C3H6
  // d()/d[CH3]
  dqdci = +k_f * sc[19];
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  J[342] += dqdci; // dwdot[aC3H5]/d[CH3]
  J[343] -= dqdci; // dwdot[C3H6]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[18];
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  J[378] += dqdci; // dwdot[aC3H5]/d[CH4]
  J[379] -= dqdci; // dwdot[C3H6]/d[CH4]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[10];
  J[657] -= dqdci; // dwdot[CH3]/d[aC3H5]
  J[658] += dqdci; // dwdot[CH4]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[667] -= dqdci; // dwdot[C3H6]/d[aC3H5]
  // d()/d[C3H6]
  dqdci = +k_f * sc[9];
  J[693] -= dqdci; // dwdot[CH3]/d[C3H6]
  J[694] += dqdci; // dwdot[CH4]/d[C3H6]
  J[702] += dqdci; // dwdot[aC3H5]/d[C3H6]
  J[703] -= dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT
  J[1279] -= dqdT; // dwdot[C3H6]/dT

  // reaction 166: C2H3CHO + H <=> C2H4 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[20];
  k_f = 108000 * exp(0.454 * tc[0] - 0.50321666580472 * (5820) * invT);
  dlnkfdT = 0.454 * invT + 0.50321666580472 * (5820) * invT2;
  // reverse
  phi_r = sc[15] * sc_qss[2];
  Kc = exp(g_RT[1] - g_RT[15] + g_RT[20] - g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[20]) + (h_RT[15] + h_RT_qss[2]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[15] += q; // C2H4
  wdot[20] -= q; // C2H3CHO
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  J[56] -= dqdci; // dwdot[C2H3CHO]/d[H]
  // d()/d[C2H4]
  dqdci = -k_r * sc_qss[2];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[560] -= dqdci; // dwdot[C2H3CHO]/d[C2H4]
  // d()/d[C2H3CHO]
  dqdci = +k_f * sc[1];
  J[721] -= dqdci; // dwdot[H]/d[C2H3CHO]
  J[735] += dqdci; // dwdot[C2H4]/d[C2H3CHO]
  J[740] -= dqdci; // dwdot[C2H3CHO]/d[C2H3CHO]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT
  J[1280] -= dqdT; // dwdot[C2H3CHO]/dT

  // reaction 167: C2H3CHO + O <=> C2H3 + CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (3540) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3540) * invT2;
  // reverse
  phi_r = sc[3] * sc[12] * sc_qss[4];
  Kc = refC * exp(g_RT[2] - g_RT[3] - g_RT[12] + g_RT[20] - g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[3] + h_RT[12] + h_RT_qss[4]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // OH
  wdot[12] += q; // CO
  wdot[20] -= q; // C2H3CHO
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[84] += dqdci; // dwdot[CO]/d[O]
  J[92] -= dqdci; // dwdot[C2H3CHO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[12] * sc_qss[4];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[120] += dqdci; // dwdot[CO]/d[OH]
  J[128] -= dqdci; // dwdot[C2H3CHO]/d[OH]
  // d()/d[CO]
  dqdci = -k_r * sc[3] * sc_qss[4];
  J[434] -= dqdci; // dwdot[O]/d[CO]
  J[435] += dqdci; // dwdot[OH]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[452] -= dqdci; // dwdot[C2H3CHO]/d[CO]
  // d()/d[C2H3CHO]
  dqdci = +k_f * sc[2];
  J[722] -= dqdci; // dwdot[O]/d[C2H3CHO]
  J[723] += dqdci; // dwdot[OH]/d[C2H3CHO]
  J[732] += dqdci; // dwdot[CO]/d[C2H3CHO]
  J[740] -= dqdci; // dwdot[C2H3CHO]/d[C2H3CHO]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1280] -= dqdT; // dwdot[C2H3CHO]/dT

  // reaction 168: C2H3CHO + OH <=> C2H3 + CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[20];
  k_f = 3430 * exp(1.18 * tc[0] - 0.50321666580472 * (-447) * invT);
  dlnkfdT = 1.18 * invT + 0.50321666580472 * (-447) * invT2;
  // reverse
  phi_r = sc[6] * sc[12] * sc_qss[4];
  Kc = refC * exp(g_RT[3] - g_RT[6] - g_RT[12] + g_RT[20] - g_RT_qss[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[20]) + (h_RT[6] + h_RT[12] + h_RT_qss[4]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[12] += q; // CO
  wdot[20] -= q; // C2H3CHO
  // d()/d[OH]
  dqdci = +k_f * sc[20];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[120] += dqdci; // dwdot[CO]/d[OH]
  J[128] -= dqdci; // dwdot[C2H3CHO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[12] * sc_qss[4];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[228] += dqdci; // dwdot[CO]/d[H2O]
  J[236] -= dqdci; // dwdot[C2H3CHO]/d[H2O]
  // d()/d[CO]
  dqdci = -k_r * sc[6] * sc_qss[4];
  J[435] -= dqdci; // dwdot[OH]/d[CO]
  J[438] += dqdci; // dwdot[H2O]/d[CO]
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[452] -= dqdci; // dwdot[C2H3CHO]/d[CO]
  // d()/d[C2H3CHO]
  dqdci = +k_f * sc[3];
  J[723] -= dqdci; // dwdot[OH]/d[C2H3CHO]
  J[726] += dqdci; // dwdot[H2O]/d[C2H3CHO]
  J[732] += dqdci; // dwdot[CO]/d[C2H3CHO]
  J[740] -= dqdci; // dwdot[C2H3CHO]/d[C2H3CHO]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1280] -= dqdT; // dwdot[C2H3CHO]/dT

  // reaction 169: H + nC3H7 <=> C2H5 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc_qss[6];
  k_f = 3.7e+18 * exp(-2.92 * tc[0] - 0.50321666580472 * (12505) * invT);
  dlnkfdT = -2.92 * invT + 0.50321666580472 * (12505) * invT2;
  // reverse
  phi_r = sc[9] * sc_qss[5];
  Kc = exp(g_RT[1] - g_RT[9] - g_RT_qss[5] + g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[6]) + (h_RT[9] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[9] += q; // CH3
  // d()/d[H]
  dqdci = +k_f * sc_qss[6];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc_qss[5];
  J[325] -= dqdci; // dwdot[H]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT

  // reaction 170: H + nC3H7 <=> C3H6 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc_qss[6];
  k_f = 1800000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[5] * sc[19];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[19] + g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[6]) + (h_RT[5] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[19] += q; // C3H6
  // d()/d[H]
  dqdci = +k_f * sc_qss[6];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[55] += dqdci; // dwdot[C3H6]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[19];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[199] += dqdci; // dwdot[C3H6]/d[H2]
  // d()/d[C3H6]
  dqdci = -k_r * sc[5];
  J[685] -= dqdci; // dwdot[H]/d[C3H6]
  J[689] += dqdci; // dwdot[H2]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT

  // reaction 171: O + nC3H7 <=> C2H5 + CH2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc_qss[6];
  k_f = 96000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[11] * sc_qss[5];
  Kc = exp(g_RT[2] - g_RT[11] - g_RT_qss[5] + g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT_qss[6]) + (h_RT[11] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[11] += q; // CH2O
  // d()/d[O]
  dqdci = +k_f * sc_qss[6];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[83] += dqdci; // dwdot[CH2O]/d[O]
  // d()/d[CH2O]
  dqdci = -k_r * sc_qss[5];
  J[398] -= dqdci; // dwdot[O]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 172: OH + nC3H7 <=> C3H6 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc_qss[6];
  k_f = 24000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[6] * sc[19];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[19] + g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT_qss[6]) + (h_RT[6] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[19] += q; // C3H6
  // d()/d[OH]
  dqdci = +k_f * sc_qss[6];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[127] += dqdci; // dwdot[C3H6]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[19];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[235] += dqdci; // dwdot[C3H6]/d[H2O]
  // d()/d[C3H6]
  dqdci = -k_r * sc[6];
  J[687] -= dqdci; // dwdot[OH]/d[C3H6]
  J[690] += dqdci; // dwdot[H2O]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT

  // reaction 173: O2 + nC3H7 <=> C3H6 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[6];
  k_f = 90000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[4] * sc[19];
  Kc = exp(-g_RT[4] + g_RT[8] - g_RT[19] + g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[6]) + (h_RT[4] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[19] += q; // C3H6
  // d()/d[HO2]
  dqdci = -k_r * sc[19];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  J[163] += dqdci; // dwdot[C3H6]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[6];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[307] += dqdci; // dwdot[C3H6]/d[O2]
  // d()/d[C3H6]
  dqdci = -k_r * sc[4];
  J[688] += dqdci; // dwdot[HO2]/d[C3H6]
  J[692] -= dqdci; // dwdot[O2]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT

  // reaction 174: HO2 + nC3H7 <=> C2H5 + CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc_qss[6];
  k_f = 24000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[11] * sc_qss[5];
  Kc = refC * exp(-g_RT[3] + g_RT[4] - g_RT[11] - g_RT_qss[5] + g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT_qss[6]) +
                    (h_RT[3] + h_RT[11] + h_RT_qss[5]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[4] -= q;  // HO2
  wdot[11] += q; // CH2O
  // d()/d[OH]
  dqdci = -k_r * sc[11] * sc_qss[5];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc_qss[6];
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[155] += dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[3] * sc_qss[5];
  J[399] += dqdci; // dwdot[OH]/d[CH2O]
  J[400] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 175: CH3 + nC3H7 <=> C3H6 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc_qss[6];
  k_f = 11000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[10] * sc[19];
  Kc = exp(g_RT[9] - g_RT[10] - g_RT[19] + g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT_qss[6]) + (h_RT[10] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  wdot[19] += q; // C3H6
  // d()/d[CH3]
  dqdci = +k_f * sc_qss[6];
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  J[343] += dqdci; // dwdot[C3H6]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[19];
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  J[379] += dqdci; // dwdot[C3H6]/d[CH4]
  // d()/d[C3H6]
  dqdci = -k_r * sc[10];
  J[693] -= dqdci; // dwdot[CH3]/d[C3H6]
  J[694] += dqdci; // dwdot[CH4]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  // d()/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT

  // reaction 176: C4H7 + H <=> CH3 + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[21];
  k_f = 2e+15 * exp(-2 * tc[0] - 0.50321666580472 * (11000) * invT);
  dlnkfdT = -2 * invT + 0.50321666580472 * (11000) * invT2;
  // reverse
  phi_r = sc[9] * sc[18];
  Kc = exp(g_RT[1] - g_RT[9] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[21]) + (h_RT[9] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[9] += q;  // CH3
  wdot[18] += q; // aC3H5
  wdot[21] -= q; // C4H7
  // d()/d[H]
  dqdci = +k_f * sc[21];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  J[54] += dqdci; // dwdot[aC3H5]/d[H]
  J[57] -= dqdci; // dwdot[C4H7]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[18];
  J[325] -= dqdci; // dwdot[H]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[342] += dqdci; // dwdot[aC3H5]/d[CH3]
  J[345] -= dqdci; // dwdot[C4H7]/d[CH3]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[9];
  J[649] -= dqdci; // dwdot[H]/d[aC3H5]
  J[657] += dqdci; // dwdot[CH3]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[669] -= dqdci; // dwdot[C4H7]/d[aC3H5]
  // d()/d[C4H7]
  dqdci = +k_f * sc[1];
  J[757] -= dqdci; // dwdot[H]/d[C4H7]
  J[765] += dqdci; // dwdot[CH3]/d[C4H7]
  J[774] += dqdci; // dwdot[aC3H5]/d[C4H7]
  J[777] -= dqdci; // dwdot[C4H7]/d[C4H7]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT
  J[1281] -= dqdT; // dwdot[C4H7]/dT

  // reaction 177: C4H7 + HO2 <=> CH2O + OH + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[21];
  k_f = 24000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[11] * sc[18];
  Kc = refC * exp(-g_RT[3] + g_RT[4] - g_RT[11] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[4] + h_RT[21]) + (h_RT[3] + h_RT[11] + h_RT[18]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[4] -= q;  // HO2
  wdot[11] += q; // CH2O
  wdot[18] += q; // aC3H5
  wdot[21] -= q; // C4H7
  // d()/d[OH]
  dqdci = -k_r * sc[11] * sc[18];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  J[126] += dqdci; // dwdot[aC3H5]/d[OH]
  J[129] -= dqdci; // dwdot[C4H7]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[21];
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[155] += dqdci; // dwdot[CH2O]/d[HO2]
  J[162] += dqdci; // dwdot[aC3H5]/d[HO2]
  J[165] -= dqdci; // dwdot[C4H7]/d[HO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[3] * sc[18];
  J[399] += dqdci; // dwdot[OH]/d[CH2O]
  J[400] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[414] += dqdci; // dwdot[aC3H5]/d[CH2O]
  J[417] -= dqdci; // dwdot[C4H7]/d[CH2O]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[3] * sc[11];
  J[651] += dqdci; // dwdot[OH]/d[aC3H5]
  J[652] -= dqdci; // dwdot[HO2]/d[aC3H5]
  J[659] += dqdci; // dwdot[CH2O]/d[aC3H5]
  J[666] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  J[669] -= dqdci; // dwdot[C4H7]/d[aC3H5]
  // d()/d[C4H7]
  dqdci = +k_f * sc[4];
  J[759] += dqdci; // dwdot[OH]/d[C4H7]
  J[760] -= dqdci; // dwdot[HO2]/d[C4H7]
  J[767] += dqdci; // dwdot[CH2O]/d[C4H7]
  J[774] += dqdci; // dwdot[aC3H5]/d[C4H7]
  J[777] -= dqdci; // dwdot[C4H7]/d[C4H7]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT
  J[1281] -= dqdT; // dwdot[C4H7]/dT

  // reaction 178: C4H7 + HCO <=> C4H81 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[21] * sc_qss[2];
  k_f = 60000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[12] * sc[22];
  Kc = exp(-g_RT[12] + g_RT[21] - g_RT[22] + g_RT_qss[2]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[21] + h_RT_qss[2]) + (h_RT[12] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // CO
  wdot[21] -= q; // C4H7
  wdot[22] += q; // C4H81
  // d()/d[CO]
  dqdci = -k_r * sc[22];
  J[444] += dqdci; // dwdot[CO]/d[CO]
  J[453] -= dqdci; // dwdot[C4H7]/d[CO]
  J[454] += dqdci; // dwdot[C4H81]/d[CO]
  // d()/d[C4H7]
  dqdci = +k_f * sc_qss[2];
  J[768] += dqdci; // dwdot[CO]/d[C4H7]
  J[777] -= dqdci; // dwdot[C4H7]/d[C4H7]
  J[778] += dqdci; // dwdot[C4H81]/d[C4H7]
  // d()/d[C4H81]
  dqdci = -k_r * sc[12];
  J[804] += dqdci; // dwdot[CO]/d[C4H81]
  J[813] -= dqdci; // dwdot[C4H7]/d[C4H81]
  J[814] += dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1272] += dqdT; // dwdot[CO]/dT
  J[1281] -= dqdT; // dwdot[C4H7]/dT
  J[1282] += dqdT; // dwdot[C4H81]/dT

  // reaction 179: C4H81 + H <=> C2H4 + C2H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[22];
  k_f = 1.6e+16 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[15] * sc_qss[5];
  Kc = exp(g_RT[1] - g_RT[15] + g_RT[22] - g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[22]) + (h_RT[15] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[15] += q; // C2H4
  wdot[22] -= q; // C4H81
  // d()/d[H]
  dqdci = +k_f * sc[22];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  J[58] -= dqdci; // dwdot[C4H81]/d[H]
  // d()/d[C2H4]
  dqdci = -k_r * sc_qss[5];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[562] -= dqdci; // dwdot[C4H81]/d[C2H4]
  // d()/d[C4H81]
  dqdci = +k_f * sc[1];
  J[793] -= dqdci; // dwdot[H]/d[C4H81]
  J[807] += dqdci; // dwdot[C2H4]/d[C4H81]
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 180: C4H81 + H <=> C3H6 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[22];
  k_f = 3.2e+16 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[9] * sc[19];
  Kc = exp(g_RT[1] - g_RT[9] - g_RT[19] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[22]) + (h_RT[9] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[9] += q;  // CH3
  wdot[19] += q; // C3H6
  wdot[22] -= q; // C4H81
  // d()/d[H]
  dqdci = +k_f * sc[22];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[45] += dqdci; // dwdot[CH3]/d[H]
  J[55] += dqdci; // dwdot[C3H6]/d[H]
  J[58] -= dqdci; // dwdot[C4H81]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[19];
  J[325] -= dqdci; // dwdot[H]/d[CH3]
  J[333] += dqdci; // dwdot[CH3]/d[CH3]
  J[343] += dqdci; // dwdot[C3H6]/d[CH3]
  J[346] -= dqdci; // dwdot[C4H81]/d[CH3]
  // d()/d[C3H6]
  dqdci = -k_r * sc[9];
  J[685] -= dqdci; // dwdot[H]/d[C3H6]
  J[693] += dqdci; // dwdot[CH3]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[706] -= dqdci; // dwdot[C4H81]/d[C3H6]
  // d()/d[C4H81]
  dqdci = +k_f * sc[1];
  J[793] -= dqdci; // dwdot[H]/d[C4H81]
  J[801] += dqdci; // dwdot[CH3]/d[C4H81]
  J[811] += dqdci; // dwdot[C3H6]/d[C4H81]
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1269] += dqdT; // dwdot[CH3]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 181: C4H81 + H <=> C4H7 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[22];
  k_f = 0.65 * exp(2.54 * tc[0] - 0.50321666580472 * (6756) * invT);
  dlnkfdT = 2.54 * invT + 0.50321666580472 * (6756) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[22]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[21] += q; // C4H7
  wdot[22] -= q; // C4H81
  // d()/d[H]
  dqdci = +k_f * sc[22];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[57] += dqdci; // dwdot[C4H7]/d[H]
  J[58] -= dqdci; // dwdot[C4H81]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[21];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[201] += dqdci; // dwdot[C4H7]/d[H2]
  J[202] -= dqdci; // dwdot[C4H81]/d[H2]
  // d()/d[C4H7]
  dqdci = -k_r * sc[5];
  J[757] -= dqdci; // dwdot[H]/d[C4H7]
  J[761] += dqdci; // dwdot[H2]/d[C4H7]
  J[777] += dqdci; // dwdot[C4H7]/d[C4H7]
  J[778] -= dqdci; // dwdot[C4H81]/d[C4H7]
  // d()/d[C4H81]
  dqdci = +k_f * sc[1];
  J[793] -= dqdci; // dwdot[H]/d[C4H81]
  J[797] += dqdci; // dwdot[H2]/d[C4H81]
  J[813] += dqdci; // dwdot[C4H7]/d[C4H81]
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1281] += dqdT; // dwdot[C4H7]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 182: C4H81 + O => HCO + nC3H7
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 330 * exp(1.45 * tc[0] - 0.50321666580472 * (-402) * invT);
  dlnkfdT = 1.45 * invT + 0.50321666580472 * (-402) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[2] -= q;  // O
  wdot[22] -= q; // C4H81
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[94] -= dqdci; // dwdot[C4H81]/d[O]
  // d()/d[C4H81]
  dqdci = +k_f * sc[2];
  J[794] -= dqdci; // dwdot[O]/d[C4H81]
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 183: C4H81 + O <=> C4H7 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 15000000 * exp(0 * tc[0] - 0.50321666580472 * (5760) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (5760) * invT2;
  // reverse
  phi_r = sc[3] * sc[21];
  Kc = exp(g_RT[2] - g_RT[3] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[3] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // OH
  wdot[21] += q; // C4H7
  wdot[22] -= q; // C4H81
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[93] += dqdci; // dwdot[C4H7]/d[O]
  J[94] -= dqdci; // dwdot[C4H81]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[C4H7]/d[OH]
  J[130] -= dqdci; // dwdot[C4H81]/d[OH]
  // d()/d[C4H7]
  dqdci = -k_r * sc[3];
  J[758] -= dqdci; // dwdot[O]/d[C4H7]
  J[759] += dqdci; // dwdot[OH]/d[C4H7]
  J[777] += dqdci; // dwdot[C4H7]/d[C4H7]
  J[778] -= dqdci; // dwdot[C4H81]/d[C4H7]
  // d()/d[C4H81]
  dqdci = +k_f * sc[2];
  J[794] -= dqdci; // dwdot[O]/d[C4H81]
  J[795] += dqdci; // dwdot[OH]/d[C4H81]
  J[813] += dqdci; // dwdot[C4H7]/d[C4H81]
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1281] += dqdT; // dwdot[C4H7]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 184: C4H81 + O <=> C4H7 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 26000000 * exp(0 * tc[0] - 0.50321666580472 * (4470) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (4470) * invT2;
  // reverse
  phi_r = sc[3] * sc[21];
  Kc = exp(g_RT[2] - g_RT[3] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[3] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // OH
  wdot[21] += q; // C4H7
  wdot[22] -= q; // C4H81
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  J[93] += dqdci; // dwdot[C4H7]/d[O]
  J[94] -= dqdci; // dwdot[C4H81]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[129] += dqdci; // dwdot[C4H7]/d[OH]
  J[130] -= dqdci; // dwdot[C4H81]/d[OH]
  // d()/d[C4H7]
  dqdci = -k_r * sc[3];
  J[758] -= dqdci; // dwdot[O]/d[C4H7]
  J[759] += dqdci; // dwdot[OH]/d[C4H7]
  J[777] += dqdci; // dwdot[C4H7]/d[C4H7]
  J[778] -= dqdci; // dwdot[C4H81]/d[C4H7]
  // d()/d[C4H81]
  dqdci = +k_f * sc[2];
  J[794] -= dqdci; // dwdot[O]/d[C4H81]
  J[795] += dqdci; // dwdot[OH]/d[C4H81]
  J[813] += dqdci; // dwdot[C4H7]/d[C4H81]
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1281] += dqdT; // dwdot[C4H7]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 185: C4H81 + OH <=> C4H7 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[22];
  k_f = 0.0007 * exp(2.66 * tc[0] - 0.50321666580472 * (527) * invT);
  dlnkfdT = 2.66 * invT + 0.50321666580472 * (527) * invT2;
  // reverse
  phi_r = sc[6] * sc[21];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[22]) + (h_RT[6] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[21] += q; // C4H7
  wdot[22] -= q; // C4H81
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[129] += dqdci; // dwdot[C4H7]/d[OH]
  J[130] -= dqdci; // dwdot[C4H81]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[237] += dqdci; // dwdot[C4H7]/d[H2O]
  J[238] -= dqdci; // dwdot[C4H81]/d[H2O]
  // d()/d[C4H7]
  dqdci = -k_r * sc[6];
  J[759] -= dqdci; // dwdot[OH]/d[C4H7]
  J[762] += dqdci; // dwdot[H2O]/d[C4H7]
  J[777] += dqdci; // dwdot[C4H7]/d[C4H7]
  J[778] -= dqdci; // dwdot[C4H81]/d[C4H7]
  // d()/d[C4H81]
  dqdci = +k_f * sc[3];
  J[795] -= dqdci; // dwdot[OH]/d[C4H81]
  J[798] += dqdci; // dwdot[H2O]/d[C4H81]
  J[813] += dqdci; // dwdot[C4H7]/d[C4H81]
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1281] += dqdT; // dwdot[C4H7]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 186: C4H81 + O2 <=> C4H7 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[22];
  k_f = 20000000 * exp(0 * tc[0] - 0.50321666580472 * (50930) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (50930) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(-g_RT[4] + g_RT[8] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[22]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[21] += q; // C4H7
  wdot[22] -= q; // C4H81
  // d()/d[HO2]
  dqdci = -k_r * sc[21];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  J[165] += dqdci; // dwdot[C4H7]/d[HO2]
  J[166] -= dqdci; // dwdot[C4H81]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[22];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[309] += dqdci; // dwdot[C4H7]/d[O2]
  J[310] -= dqdci; // dwdot[C4H81]/d[O2]
  // d()/d[C4H7]
  dqdci = -k_r * sc[4];
  J[760] += dqdci; // dwdot[HO2]/d[C4H7]
  J[764] -= dqdci; // dwdot[O2]/d[C4H7]
  J[777] += dqdci; // dwdot[C4H7]/d[C4H7]
  J[778] -= dqdci; // dwdot[C4H81]/d[C4H7]
  // d()/d[C4H81]
  dqdci = +k_f * sc[8];
  J[796] += dqdci; // dwdot[HO2]/d[C4H81]
  J[800] -= dqdci; // dwdot[O2]/d[C4H81]
  J[813] += dqdci; // dwdot[C4H7]/d[C4H81]
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1281] += dqdT; // dwdot[C4H7]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 187: C4H81 + HO2 <=> C4H7 + H2O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 1000000 * exp(0 * tc[0] - 0.50321666580472 * (14340) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (14340) * invT2;
  // reverse
  phi_r = sc[7] * sc[21];
  Kc = exp(g_RT[4] - g_RT[7] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[7] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[21] += q; // C4H7
  wdot[22] -= q; // C4H81
  // d()/d[HO2]
  dqdci = +k_f * sc[22];
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[151] += dqdci; // dwdot[H2O2]/d[HO2]
  J[165] += dqdci; // dwdot[C4H7]/d[HO2]
  J[166] -= dqdci; // dwdot[C4H81]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[21];
  J[256] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[259] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[273] += dqdci; // dwdot[C4H7]/d[H2O2]
  J[274] -= dqdci; // dwdot[C4H81]/d[H2O2]
  // d()/d[C4H7]
  dqdci = -k_r * sc[7];
  J[760] -= dqdci; // dwdot[HO2]/d[C4H7]
  J[763] += dqdci; // dwdot[H2O2]/d[C4H7]
  J[777] += dqdci; // dwdot[C4H7]/d[C4H7]
  J[778] -= dqdci; // dwdot[C4H81]/d[C4H7]
  // d()/d[C4H81]
  dqdci = +k_f * sc[4];
  J[796] -= dqdci; // dwdot[HO2]/d[C4H81]
  J[799] += dqdci; // dwdot[H2O2]/d[C4H81]
  J[813] += dqdci; // dwdot[C4H7]/d[C4H81]
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1267] += dqdT; // dwdot[H2O2]/dT
  J[1281] += dqdT; // dwdot[C4H7]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 188: C4H81 + CH3 <=> C4H7 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[22];
  k_f = 4.5e-07 * exp(3.65 * tc[0] - 0.50321666580472 * (7153) * invT);
  dlnkfdT = 3.65 * invT + 0.50321666580472 * (7153) * invT2;
  // reverse
  phi_r = sc[10] * sc[21];
  Kc = exp(g_RT[9] - g_RT[10] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[22]) + (h_RT[10] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  wdot[21] += q; // C4H7
  wdot[22] -= q; // C4H81
  // d()/d[CH3]
  dqdci = +k_f * sc[22];
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  J[345] += dqdci; // dwdot[C4H7]/d[CH3]
  J[346] -= dqdci; // dwdot[C4H81]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[21];
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  J[381] += dqdci; // dwdot[C4H7]/d[CH4]
  J[382] -= dqdci; // dwdot[C4H81]/d[CH4]
  // d()/d[C4H7]
  dqdci = -k_r * sc[10];
  J[765] -= dqdci; // dwdot[CH3]/d[C4H7]
  J[766] += dqdci; // dwdot[CH4]/d[C4H7]
  J[777] += dqdci; // dwdot[C4H7]/d[C4H7]
  J[778] -= dqdci; // dwdot[C4H81]/d[C4H7]
  // d()/d[C4H81]
  dqdci = +k_f * sc[9];
  J[801] -= dqdci; // dwdot[CH3]/d[C4H81]
  J[802] += dqdci; // dwdot[CH4]/d[C4H81]
  J[813] += dqdci; // dwdot[C4H7]/d[C4H81]
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT
  J[1281] += dqdT; // dwdot[C4H7]/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 189: H + pC4H9 => 2 C2H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc_qss[7];
  k_f = 3.7e+18 * exp(-2.92 * tc[0] - 0.50321666580472 * (12505) * invT);
  dlnkfdT = -2.92 * invT + 0.50321666580472 * (12505) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] -= q; // H
  // d()/d[H]
  dqdci = +k_f * sc_qss[7];
  J[37] -= dqdci; // dwdot[H]/d[H]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT

  // reaction 190: H + pC4H9 <=> C4H81 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc_qss[7];
  k_f = 1800000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[5] * sc[22];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[22] + g_RT_qss[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT_qss[7]) + (h_RT[5] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2
  wdot[22] += q; // C4H81
  // d()/d[H]
  dqdci = +k_f * sc_qss[7];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  J[58] += dqdci; // dwdot[C4H81]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc[22];
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  J[202] += dqdci; // dwdot[C4H81]/d[H2]
  // d()/d[C4H81]
  dqdci = -k_r * sc[5];
  J[793] -= dqdci; // dwdot[H]/d[C4H81]
  J[797] += dqdci; // dwdot[H2]/d[C4H81]
  J[814] += dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT
  J[1282] += dqdT; // dwdot[C4H81]/dT

  // reaction 191: O + pC4H9 <=> CH2O + nC3H7
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc_qss[7];
  k_f = 96000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[11] * sc_qss[6];
  Kc = exp(g_RT[2] - g_RT[11] - g_RT_qss[6] + g_RT_qss[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT_qss[7]) + (h_RT[11] + h_RT_qss[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[11] += q; // CH2O
  // d()/d[O]
  dqdci = +k_f * sc_qss[7];
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[83] += dqdci; // dwdot[CH2O]/d[O]
  // d()/d[CH2O]
  dqdci = -k_r * sc_qss[6];
  J[398] -= dqdci; // dwdot[O]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 192: OH + pC4H9 <=> C4H81 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc_qss[7];
  k_f = 24000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[6] * sc[22];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[22] + g_RT_qss[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT_qss[7]) + (h_RT[6] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // OH
  wdot[6] += q;  // H2O
  wdot[22] += q; // C4H81
  // d()/d[OH]
  dqdci = +k_f * sc_qss[7];
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  J[130] += dqdci; // dwdot[C4H81]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[22];
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  J[238] += dqdci; // dwdot[C4H81]/d[H2O]
  // d()/d[C4H81]
  dqdci = -k_r * sc[6];
  J[795] -= dqdci; // dwdot[OH]/d[C4H81]
  J[798] += dqdci; // dwdot[H2O]/d[C4H81]
  J[814] += dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT
  J[1282] += dqdT; // dwdot[C4H81]/dT

  // reaction 193: O2 + pC4H9 <=> C4H81 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[7];
  k_f = 270000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[4] * sc[22];
  Kc = exp(-g_RT[4] + g_RT[8] - g_RT[22] + g_RT_qss[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT_qss[7]) + (h_RT[4] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[22] += q; // C4H81
  // d()/d[HO2]
  dqdci = -k_r * sc[22];
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  J[166] += dqdci; // dwdot[C4H81]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc_qss[7];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[310] += dqdci; // dwdot[C4H81]/d[O2]
  // d()/d[C4H81]
  dqdci = -k_r * sc[4];
  J[796] += dqdci; // dwdot[HO2]/d[C4H81]
  J[800] -= dqdci; // dwdot[O2]/d[C4H81]
  J[814] += dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1282] += dqdT; // dwdot[C4H81]/dT

  // reaction 194: HO2 + pC4H9 <=> CH2O + OH + nC3H7
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc_qss[7];
  k_f = 24000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[11] * sc_qss[6];
  Kc = refC * exp(-g_RT[3] + g_RT[4] - g_RT[11] - g_RT_qss[6] + g_RT_qss[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT_qss[7]) +
                    (h_RT[3] + h_RT[11] + h_RT_qss[6]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[4] -= q;  // HO2
  wdot[11] += q; // CH2O
  // d()/d[OH]
  dqdci = -k_r * sc[11] * sc_qss[6];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[112] -= dqdci; // dwdot[HO2]/d[OH]
  J[119] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc_qss[7];
  J[147] += dqdci; // dwdot[OH]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[155] += dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[3] * sc_qss[6];
  J[399] += dqdci; // dwdot[OH]/d[CH2O]
  J[400] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[407] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1271] += dqdT; // dwdot[CH2O]/dT

  // reaction 195: CH3 + pC4H9 <=> C4H81 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc_qss[7];
  k_f = 11000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[10] * sc[22];
  Kc = exp(g_RT[9] - g_RT[10] - g_RT[22] + g_RT_qss[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT_qss[7]) + (h_RT[10] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  wdot[22] += q; // C4H81
  // d()/d[CH3]
  dqdci = +k_f * sc_qss[7];
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  J[346] += dqdci; // dwdot[C4H81]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[22];
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  J[382] += dqdci; // dwdot[C4H81]/d[CH4]
  // d()/d[C4H81]
  dqdci = -k_r * sc[10];
  J[801] -= dqdci; // dwdot[CH3]/d[C4H81]
  J[802] += dqdci; // dwdot[CH4]/d[C4H81]
  J[814] += dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT
  J[1282] += dqdT; // dwdot[C4H81]/dT

  // reaction 196: C5H9 => C2H4 + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[23];
  k_f = 25000000000000 * exp(0 * tc[0] - 0.50321666580472 * (30019.12) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (30019.12) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[15] += q; // C2H4
  wdot[18] += q; // aC3H5
  wdot[23] -= q; // C5H9
  // d()/d[C5H9]
  dqdci = +k_f;
  J[843] += dqdci; // dwdot[C2H4]/d[C5H9]
  J[846] += dqdci; // dwdot[aC3H5]/d[C5H9]
  J[851] -= dqdci; // dwdot[C5H9]/d[C5H9]
  // d()/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT
  J[1278] += dqdT; // dwdot[aC3H5]/dT
  J[1283] -= dqdT; // dwdot[C5H9]/dT

  // reaction 197: C5H9 => C2H3 + C3H6
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[23];
  k_f = 25000000000000 * exp(0 * tc[0] - 0.50321666580472 * (30019.12) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (30019.12) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[19] += q; // C3H6
  wdot[23] -= q; // C5H9
  // d()/d[C5H9]
  dqdci = +k_f;
  J[847] += dqdci; // dwdot[C3H6]/d[C5H9]
  J[851] -= dqdci; // dwdot[C5H9]/d[C5H9]
  // d()/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT
  J[1283] -= dqdT; // dwdot[C5H9]/dT

  // reaction 198: C5H10 + H <=> C2H4 + nC3H7
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[24];
  k_f = 8e+15 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[15] * sc_qss[6];
  Kc = exp(g_RT[1] - g_RT[15] + g_RT[24] - g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[24]) + (h_RT[15] + h_RT_qss[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[15] += q; // C2H4
  wdot[24] -= q; // C5H10
  // d()/d[H]
  dqdci = +k_f * sc[24];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  J[60] -= dqdci; // dwdot[C5H10]/d[H]
  // d()/d[C2H4]
  dqdci = -k_r * sc_qss[6];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[564] -= dqdci; // dwdot[C5H10]/d[C2H4]
  // d()/d[C5H10]
  dqdci = +k_f * sc[1];
  J[865] -= dqdci; // dwdot[H]/d[C5H10]
  J[879] += dqdci; // dwdot[C2H4]/d[C5H10]
  J[888] -= dqdci; // dwdot[C5H10]/d[C5H10]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT
  J[1284] -= dqdT; // dwdot[C5H10]/dT

  // reaction 199: C5H10 + H <=> C2H5 + C3H6
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[24];
  k_f = 1.6e+16 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[19] * sc_qss[5];
  Kc = exp(g_RT[1] - g_RT[19] + g_RT[24] - g_RT_qss[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[24]) + (h_RT[19] + h_RT_qss[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[19] += q; // C3H6
  wdot[24] -= q; // C5H10
  // d()/d[H]
  dqdci = +k_f * sc[24];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[C3H6]/d[H]
  J[60] -= dqdci; // dwdot[C5H10]/d[H]
  // d()/d[C3H6]
  dqdci = -k_r * sc_qss[5];
  J[685] -= dqdci; // dwdot[H]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[708] -= dqdci; // dwdot[C5H10]/d[C3H6]
  // d()/d[C5H10]
  dqdci = +k_f * sc[1];
  J[865] -= dqdci; // dwdot[H]/d[C5H10]
  J[883] += dqdci; // dwdot[C3H6]/d[C5H10]
  J[888] -= dqdci; // dwdot[C5H10]/d[C5H10]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT
  J[1284] -= dqdT; // dwdot[C5H10]/dT

  // reaction 200: C2H4 + nC3H7 <=> PXC5H11
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[6];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[8];
  Kc = refCinv * exp(g_RT[15] + g_RT_qss[6] - g_RT_qss[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[6]) + (h_RT_qss[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] -= q; // C2H4
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[6];
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 201: C6H12 + H <=> C2H4 + pC4H9
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[25];
  k_f = 8e+15 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[15] * sc_qss[7];
  Kc = exp(g_RT[1] - g_RT[15] + g_RT[25] - g_RT_qss[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[25]) + (h_RT[15] + h_RT_qss[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[15] += q; // C2H4
  wdot[25] -= q; // C6H12
  // d()/d[H]
  dqdci = +k_f * sc[25];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  J[61] -= dqdci; // dwdot[C6H12]/d[H]
  // d()/d[C2H4]
  dqdci = -k_r * sc_qss[7];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[565] -= dqdci; // dwdot[C6H12]/d[C2H4]
  // d()/d[C6H12]
  dqdci = +k_f * sc[1];
  J[901] -= dqdci; // dwdot[H]/d[C6H12]
  J[915] += dqdci; // dwdot[C2H4]/d[C6H12]
  J[925] -= dqdci; // dwdot[C6H12]/d[C6H12]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT
  J[1285] -= dqdT; // dwdot[C6H12]/dT

  // reaction 202: C6H12 + H <=> C3H6 + nC3H7
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[25];
  k_f = 1.6e+16 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[19] * sc_qss[6];
  Kc = exp(g_RT[1] - g_RT[19] + g_RT[25] - g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[25]) + (h_RT[19] + h_RT_qss[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[19] += q; // C3H6
  wdot[25] -= q; // C6H12
  // d()/d[H]
  dqdci = +k_f * sc[25];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[C3H6]/d[H]
  J[61] -= dqdci; // dwdot[C6H12]/d[H]
  // d()/d[C3H6]
  dqdci = -k_r * sc_qss[6];
  J[685] -= dqdci; // dwdot[H]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[709] -= dqdci; // dwdot[C6H12]/d[C3H6]
  // d()/d[C6H12]
  dqdci = +k_f * sc[1];
  J[901] -= dqdci; // dwdot[H]/d[C6H12]
  J[919] += dqdci; // dwdot[C3H6]/d[C6H12]
  J[925] -= dqdci; // dwdot[C6H12]/d[C6H12]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT
  J[1285] -= dqdT; // dwdot[C6H12]/dT

  // reaction 203: C2H4 + pC4H9 <=> PXC6H13
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[7];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[9];
  Kc = refCinv * exp(g_RT[15] + g_RT_qss[7] - g_RT_qss[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[7]) + (h_RT_qss[9]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] -= q; // C2H4
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[7];
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 204: C7H14 + H <=> C2H4 + PXC5H11
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[26];
  k_f = 8e+15 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[15] * sc_qss[8];
  Kc = exp(g_RT[1] - g_RT[15] + g_RT[26] - g_RT_qss[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[26]) + (h_RT[15] + h_RT_qss[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[15] += q; // C2H4
  wdot[26] -= q; // C7H14
  // d()/d[H]
  dqdci = +k_f * sc[26];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  J[62] -= dqdci; // dwdot[C7H14]/d[H]
  // d()/d[C2H4]
  dqdci = -k_r * sc_qss[8];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[566] -= dqdci; // dwdot[C7H14]/d[C2H4]
  // d()/d[C7H14]
  dqdci = +k_f * sc[1];
  J[937] -= dqdci; // dwdot[H]/d[C7H14]
  J[951] += dqdci; // dwdot[C2H4]/d[C7H14]
  J[962] -= dqdci; // dwdot[C7H14]/d[C7H14]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT
  J[1286] -= dqdT; // dwdot[C7H14]/dT

  // reaction 205: C7H14 + H <=> C3H6 + pC4H9
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[26];
  k_f = 1.6e+16 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[19] * sc_qss[7];
  Kc = exp(g_RT[1] - g_RT[19] + g_RT[26] - g_RT_qss[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[26]) + (h_RT[19] + h_RT_qss[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[19] += q; // C3H6
  wdot[26] -= q; // C7H14
  // d()/d[H]
  dqdci = +k_f * sc[26];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[C3H6]/d[H]
  J[62] -= dqdci; // dwdot[C7H14]/d[H]
  // d()/d[C3H6]
  dqdci = -k_r * sc_qss[7];
  J[685] -= dqdci; // dwdot[H]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[710] -= dqdci; // dwdot[C7H14]/d[C3H6]
  // d()/d[C7H14]
  dqdci = +k_f * sc[1];
  J[937] -= dqdci; // dwdot[H]/d[C7H14]
  J[955] += dqdci; // dwdot[C3H6]/d[C7H14]
  J[962] -= dqdci; // dwdot[C7H14]/d[C7H14]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT
  J[1286] -= dqdT; // dwdot[C7H14]/dT

  // reaction 206: C2H4 + PXC5H11 <=> PXC7H15
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[8];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[10];
  Kc = refCinv * exp(g_RT[15] + g_RT_qss[8] - g_RT_qss[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[8]) + (h_RT_qss[10]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] -= q; // C2H4
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[8];
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 207: C8H16 + H <=> C2H4 + PXC6H13
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[27];
  k_f = 8e+15 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[15] * sc_qss[9];
  Kc = exp(g_RT[1] - g_RT[15] + g_RT[27] - g_RT_qss[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[27]) + (h_RT[15] + h_RT_qss[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[15] += q; // C2H4
  wdot[27] -= q; // C8H16
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  J[63] -= dqdci; // dwdot[C8H16]/d[H]
  // d()/d[C2H4]
  dqdci = -k_r * sc_qss[9];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[567] -= dqdci; // dwdot[C8H16]/d[C2H4]
  // d()/d[C8H16]
  dqdci = +k_f * sc[1];
  J[973] -= dqdci; // dwdot[H]/d[C8H16]
  J[987] += dqdci; // dwdot[C2H4]/d[C8H16]
  J[999] -= dqdci; // dwdot[C8H16]/d[C8H16]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT
  J[1287] -= dqdT; // dwdot[C8H16]/dT

  // reaction 208: C8H16 + H <=> C3H6 + PXC5H11
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[27];
  k_f = 1.6e+16 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[19] * sc_qss[8];
  Kc = exp(g_RT[1] - g_RT[19] + g_RT[27] - g_RT_qss[8]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[27]) + (h_RT[19] + h_RT_qss[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[19] += q; // C3H6
  wdot[27] -= q; // C8H16
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[C3H6]/d[H]
  J[63] -= dqdci; // dwdot[C8H16]/d[H]
  // d()/d[C3H6]
  dqdci = -k_r * sc_qss[8];
  J[685] -= dqdci; // dwdot[H]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[711] -= dqdci; // dwdot[C8H16]/d[C3H6]
  // d()/d[C8H16]
  dqdci = +k_f * sc[1];
  J[973] -= dqdci; // dwdot[H]/d[C8H16]
  J[991] += dqdci; // dwdot[C3H6]/d[C8H16]
  J[999] -= dqdci; // dwdot[C8H16]/d[C8H16]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT
  J[1287] -= dqdT; // dwdot[C8H16]/dT

  // reaction 209: C2H4 + PXC6H13 <=> PXC8H17
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[9];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[11];
  Kc = refCinv * exp(g_RT[15] + g_RT_qss[9] - g_RT_qss[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[9]) + (h_RT_qss[11]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] -= q; // C2H4
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[9];
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 210: C9H18 + H <=> C2H4 + PXC7H15
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[28];
  k_f = 8e+15 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[15] * sc_qss[10];
  Kc = exp(g_RT[1] - g_RT[15] + g_RT[28] - g_RT_qss[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[28]) + (h_RT[15] + h_RT_qss[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[15] += q; // C2H4
  wdot[28] -= q; // C9H18
  // d()/d[H]
  dqdci = +k_f * sc[28];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  J[64] -= dqdci; // dwdot[C9H18]/d[H]
  // d()/d[C2H4]
  dqdci = -k_r * sc_qss[10];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[568] -= dqdci; // dwdot[C9H18]/d[C2H4]
  // d()/d[C9H18]
  dqdci = +k_f * sc[1];
  J[1009] -= dqdci; // dwdot[H]/d[C9H18]
  J[1023] += dqdci; // dwdot[C2H4]/d[C9H18]
  J[1036] -= dqdci; // dwdot[C9H18]/d[C9H18]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT
  J[1288] -= dqdT; // dwdot[C9H18]/dT

  // reaction 211: C9H18 + H <=> C3H6 + PXC6H13
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[28];
  k_f = 1.6e+16 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[19] * sc_qss[9];
  Kc = exp(g_RT[1] - g_RT[19] + g_RT[28] - g_RT_qss[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[28]) + (h_RT[19] + h_RT_qss[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[19] += q; // C3H6
  wdot[28] -= q; // C9H18
  // d()/d[H]
  dqdci = +k_f * sc[28];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[C3H6]/d[H]
  J[64] -= dqdci; // dwdot[C9H18]/d[H]
  // d()/d[C3H6]
  dqdci = -k_r * sc_qss[9];
  J[685] -= dqdci; // dwdot[H]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[712] -= dqdci; // dwdot[C9H18]/d[C3H6]
  // d()/d[C9H18]
  dqdci = +k_f * sc[1];
  J[1009] -= dqdci; // dwdot[H]/d[C9H18]
  J[1027] += dqdci; // dwdot[C3H6]/d[C9H18]
  J[1036] -= dqdci; // dwdot[C9H18]/d[C9H18]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT
  J[1288] -= dqdT; // dwdot[C9H18]/dT

  // reaction 212: C2H4 + PXC7H15 <=> PXC9H19
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[10];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc[29];
  Kc = refCinv * exp(g_RT[15] - g_RT[29] + g_RT_qss[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[10]) + (h_RT[29]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] -= q; // C2H4
  wdot[29] += q; // PXC9H19
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[10];
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[569] += dqdci; // dwdot[PXC9H19]/d[C2H4]
  // d()/d[PXC9H19]
  dqdci = -k_r;
  J[1059] -= dqdci; // dwdot[C2H4]/d[PXC9H19]
  J[1073] += dqdci; // dwdot[PXC9H19]/d[PXC9H19]
  // d()/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT
  J[1289] += dqdT; // dwdot[PXC9H19]/dT

  // reaction 213: C10H20 + H <=> C2H4 + PXC8H17
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[30];
  k_f = 8e+15 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[15] * sc_qss[11];
  Kc = exp(g_RT[1] - g_RT[15] + g_RT[30] - g_RT_qss[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[30]) + (h_RT[15] + h_RT_qss[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[15] += q; // C2H4
  wdot[30] -= q; // C10H20
  // d()/d[H]
  dqdci = +k_f * sc[30];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[51] += dqdci; // dwdot[C2H4]/d[H]
  J[66] -= dqdci; // dwdot[C10H20]/d[H]
  // d()/d[C2H4]
  dqdci = -k_r * sc_qss[11];
  J[541] -= dqdci; // dwdot[H]/d[C2H4]
  J[555] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[570] -= dqdci; // dwdot[C10H20]/d[C2H4]
  // d()/d[C10H20]
  dqdci = +k_f * sc[1];
  J[1081] -= dqdci; // dwdot[H]/d[C10H20]
  J[1095] += dqdci; // dwdot[C2H4]/d[C10H20]
  J[1110] -= dqdci; // dwdot[C10H20]/d[C10H20]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1275] += dqdT; // dwdot[C2H4]/dT
  J[1290] -= dqdT; // dwdot[C10H20]/dT

  // reaction 214: C10H20 + H <=> C3H6 + PXC7H15
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[30];
  k_f = 1.6e+16 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[19] * sc_qss[10];
  Kc = exp(g_RT[1] - g_RT[19] + g_RT[30] - g_RT_qss[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[30]) + (h_RT[19] + h_RT_qss[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[19] += q; // C3H6
  wdot[30] -= q; // C10H20
  // d()/d[H]
  dqdci = +k_f * sc[30];
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[55] += dqdci; // dwdot[C3H6]/d[H]
  J[66] -= dqdci; // dwdot[C10H20]/d[H]
  // d()/d[C3H6]
  dqdci = -k_r * sc_qss[10];
  J[685] -= dqdci; // dwdot[H]/d[C3H6]
  J[703] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[714] -= dqdci; // dwdot[C10H20]/d[C3H6]
  // d()/d[C10H20]
  dqdci = +k_f * sc[1];
  J[1081] -= dqdci; // dwdot[H]/d[C10H20]
  J[1099] += dqdci; // dwdot[C3H6]/d[C10H20]
  J[1110] -= dqdci; // dwdot[C10H20]/d[C10H20]
  // d()/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1279] += dqdT; // dwdot[C3H6]/dT
  J[1290] -= dqdT; // dwdot[C10H20]/dT

  // reaction 215: C2H4 + PXC8H17 <=> PXC10H21
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[11];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[12];
  Kc = refCinv * exp(g_RT[15] + g_RT_qss[11] - g_RT_qss[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[11]) + (h_RT_qss[12]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] -= q; // C2H4
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[11];
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 216: C12H24 <=> C5H9 + PXC7H15
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[31];
  k_f = 3.5e+16 * exp(0 * tc[0] - 0.50321666580472 * (70936.9) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (70936.9) * invT2;
  // reverse
  phi_r = sc[23] * sc_qss[10];
  Kc = refC * exp(-g_RT[23] + g_RT[31] - g_RT_qss[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[31]) + (h_RT[23] + h_RT_qss[10]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[23] += q; // C5H9
  wdot[31] -= q; // C12H24
  // d()/d[C5H9]
  dqdci = -k_r * sc_qss[10];
  J[851] += dqdci; // dwdot[C5H9]/d[C5H9]
  J[859] -= dqdci; // dwdot[C12H24]/d[C5H9]
  // d()/d[C12H24]
  dqdci = +k_f;
  J[1139] += dqdci; // dwdot[C5H9]/d[C12H24]
  J[1147] -= dqdci; // dwdot[C12H24]/d[C12H24]
  // d()/dT
  J[1283] += dqdT; // dwdot[C5H9]/dT
  J[1291] -= dqdT; // dwdot[C12H24]/dT

  // reaction 217: C2H4 + PXC10H21 <=> PXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc_qss[12];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[13];
  Kc = refCinv * exp(g_RT[15] + g_RT_qss[12] - g_RT_qss[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT_qss[12]) + (h_RT_qss[13]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] -= q; // C2H4
  // d()/d[C2H4]
  dqdci = +k_f * sc_qss[12];
  J[555] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[1275] -= dqdT; // dwdot[C2H4]/dT

  // reaction 218: PXC12H25 <=> S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[13];
  k_f = 3670000000000 * exp(-0.6 * tc[0] - 0.50321666580472 * (14400) * invT);
  dlnkfdT = -0.6 * invT + 0.50321666580472 * (14400) * invT2;
  // reverse
  phi_r = sc_qss[15];
  Kc = exp(g_RT_qss[13] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[13]) + (h_RT_qss[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  // d()/dT

  // reaction 219: C3H6 + PXC9H19 <=> SXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19] * sc[29];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[14];
  Kc = refCinv * exp(g_RT[19] + g_RT[29] - g_RT_qss[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19] + h_RT[29]) + (h_RT_qss[14]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[19] -= q; // C3H6
  wdot[29] -= q; // PXC9H19
  // d()/d[C3H6]
  dqdci = +k_f * sc[29];
  J[703] -= dqdci; // dwdot[C3H6]/d[C3H6]
  J[713] -= dqdci; // dwdot[PXC9H19]/d[C3H6]
  // d()/d[PXC9H19]
  dqdci = +k_f * sc[19];
  J[1063] -= dqdci; // dwdot[C3H6]/d[PXC9H19]
  J[1073] -= dqdci; // dwdot[PXC9H19]/d[PXC9H19]
  // d()/dT
  J[1279] -= dqdT; // dwdot[C3H6]/dT
  J[1289] -= dqdT; // dwdot[PXC9H19]/dT

  // reaction 220: C4H81 + PXC8H17 <=> SXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[22] * sc_qss[11];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[14];
  Kc = refCinv * exp(g_RT[22] + g_RT_qss[11] - g_RT_qss[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[22] + h_RT_qss[11]) + (h_RT_qss[14]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[22] -= q; // C4H81
  // d()/d[C4H81]
  dqdci = +k_f * sc_qss[11];
  J[814] -= dqdci; // dwdot[C4H81]/d[C4H81]
  // d()/dT
  J[1282] -= dqdT; // dwdot[C4H81]/dT

  // reaction 221: C5H10 + PXC7H15 <=> S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[24] * sc_qss[10];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[15];
  Kc = refCinv * exp(g_RT[24] + g_RT_qss[10] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[24] + h_RT_qss[10]) + (h_RT_qss[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[24] -= q; // C5H10
  // d()/d[C5H10]
  dqdci = +k_f * sc_qss[10];
  J[888] -= dqdci; // dwdot[C5H10]/d[C5H10]
  // d()/dT
  J[1284] -= dqdT; // dwdot[C5H10]/dT

  // reaction 222: C10H20 + C2H5 <=> S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[30] * sc_qss[5];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[15];
  Kc = refCinv * exp(g_RT[30] + g_RT_qss[5] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[30] + h_RT_qss[5]) + (h_RT_qss[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[30] -= q; // C10H20
  // d()/d[C10H20]
  dqdci = +k_f * sc_qss[5];
  J[1110] -= dqdci; // dwdot[C10H20]/d[C10H20]
  // d()/dT
  J[1290] -= dqdT; // dwdot[C10H20]/dT

  // reaction 223: C6H12 + PXC6H13 <=> S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[25] * sc_qss[9];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[15];
  Kc = refCinv * exp(g_RT[25] + g_RT_qss[9] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[25] + h_RT_qss[9]) + (h_RT_qss[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[25] -= q; // C6H12
  // d()/d[C6H12]
  dqdci = +k_f * sc_qss[9];
  J[925] -= dqdci; // dwdot[C6H12]/d[C6H12]
  // d()/dT
  J[1285] -= dqdT; // dwdot[C6H12]/dT

  // reaction 224: C9H18 + nC3H7 <=> S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[28] * sc_qss[6];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[15];
  Kc = refCinv * exp(g_RT[28] + g_RT_qss[6] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[28] + h_RT_qss[6]) + (h_RT_qss[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[28] -= q; // C9H18
  // d()/d[C9H18]
  dqdci = +k_f * sc_qss[6];
  J[1036] -= dqdci; // dwdot[C9H18]/d[C9H18]
  // d()/dT
  J[1288] -= dqdT; // dwdot[C9H18]/dT

  // reaction 225: C7H14 + PXC5H11 <=> S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[26] * sc_qss[8];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[15];
  Kc = refCinv * exp(g_RT[26] + g_RT_qss[8] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[26] + h_RT_qss[8]) + (h_RT_qss[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[26] -= q; // C7H14
  // d()/d[C7H14]
  dqdci = +k_f * sc_qss[8];
  J[962] -= dqdci; // dwdot[C7H14]/d[C7H14]
  // d()/dT
  J[1286] -= dqdT; // dwdot[C7H14]/dT

  // reaction 226: C8H16 + pC4H9 <=> S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[27] * sc_qss[7];
  k_f = 300000 * exp(0 * tc[0] - 0.50321666580472 * (7300) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (7300) * invT2;
  // reverse
  phi_r = sc_qss[15];
  Kc = refCinv * exp(g_RT[27] + g_RT_qss[7] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[27] + h_RT_qss[7]) + (h_RT_qss[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[27] -= q; // C8H16
  // d()/d[C8H16]
  dqdci = +k_f * sc_qss[7];
  J[999] -= dqdci; // dwdot[C8H16]/d[C8H16]
  // d()/dT
  J[1287] -= dqdT; // dwdot[C8H16]/dT

  // reaction 227: C2H5 + PXC10H21 <=> NC12H26
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[5] * sc_qss[12];
  k_f = 188000000 * exp(-0.5 * tc[0] - 0.50321666580472 * (0) * invT);
  // Remove forward reaction
  dlnkfdT = -0.5 * invT + 0.50321666580472 * (0) * invT2;
  // dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0];
  Kc = refCinv * exp(-g_RT[0] + g_RT_qss[5] + g_RT_qss[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[5] + h_RT_qss[12]) + (h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  // Remove forward reaction
  // q = k_f*phi_f - k_r*phi_r;
  q = -k_r * phi_r;
  // Remove forward reaction
  // dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
  dqdT = (-dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // NC12H26
  // d()/d[NC12H26]
  dqdci = -k_r;
  J[0] += dqdci; // dwdot[NC12H26]/d[NC12H26]
  // d()/dT
  J[1260] += dqdT; // dwdot[NC12H26]/dT

  // reaction 228: PXC9H19 + nC3H7 <=> NC12H26
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[29] * sc_qss[6];
  k_f = 188000000 * exp(-0.5 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -0.5 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[0];
  Kc = refCinv * exp(-g_RT[0] + g_RT[29] + g_RT_qss[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[29] + h_RT_qss[6]) + (h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // NC12H26
  wdot[29] -= q; // PXC9H19
  // d()/d[NC12H26]
  dqdci = -k_r;
  J[0] += dqdci;  // dwdot[NC12H26]/d[NC12H26]
  J[29] -= dqdci; // dwdot[PXC9H19]/d[NC12H26]
  // d()/d[PXC9H19]
  dqdci = +k_f * sc_qss[6];
  J[1044] += dqdci; // dwdot[NC12H26]/d[PXC9H19]
  J[1073] -= dqdci; // dwdot[PXC9H19]/d[PXC9H19]
  // d()/dT
  J[1260] += dqdT; // dwdot[NC12H26]/dT
  J[1289] -= dqdT; // dwdot[PXC9H19]/dT

  // reaction 229: PXC8H17 + pC4H9 <=> NC12H26
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[7] * sc_qss[11];
  k_f = 188000000 * exp(-0.5 * tc[0] - 0.50321666580472 * (0) * invT);
  // Remove forward reaction
  dlnkfdT = -0.5 * invT + 0.50321666580472 * (0) * invT2;
  // dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0];
  Kc = refCinv * exp(-g_RT[0] + g_RT_qss[7] + g_RT_qss[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[7] + h_RT_qss[11]) + (h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  // Remove forward reaction
  // q = k_f*phi_f - k_r*phi_r;
  q = -k_r * phi_r;
  // Remove forward reaction
  // dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
  dqdT = (-dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // NC12H26
  // d()/d[NC12H26]
  dqdci = -k_r;
  J[0] += dqdci; // dwdot[NC12H26]/d[NC12H26]
  // d()/dT
  J[1260] += dqdT; // dwdot[NC12H26]/dT

  // reaction 230: PXC5H11 + PXC7H15 <=> NC12H26
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[8] * sc_qss[10];
  k_f = 188000000 * exp(-0.5 * tc[0] - 0.50321666580472 * (0) * invT);
  // Remove forward reaction
  dlnkfdT = -0.5 * invT + 0.50321666580472 * (0) * invT2;
  // dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0];
  Kc = refCinv * exp(-g_RT[0] + g_RT_qss[8] + g_RT_qss[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[8] + h_RT_qss[10]) + (h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  // Remove forward reaction
  // q = k_f*phi_f - k_r*phi_r;
  q = -k_r * phi_r;
  // Remove forward reaction
  // dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
  dqdT = (-dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // NC12H26
  // d()/d[NC12H26]
  dqdci = -k_r;
  J[0] += dqdci; // dwdot[NC12H26]/d[NC12H26]
  // d()/dT
  J[1260] += dqdT; // dwdot[NC12H26]/dT

  // reaction 231: 2 PXC6H13 <=> NC12H26
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = pow(sc_qss[9], 2.000000);
  k_f = 188000000 * exp(-0.5 * tc[0] - 0.50321666580472 * (0) * invT);
  // Remove forward reaction
  dlnkfdT = -0.5 * invT + 0.50321666580472 * (0) * invT2;
  // dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0];
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT_qss[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT_qss[9]) + (h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  // Remove forward reaction
  // q = k_f*phi_f - k_r*phi_r;
  q = -k_r * phi_r;
  // Remove forward reaction
  // dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
  dqdT = (-dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // NC12H26
  // d()/d[NC12H26]
  dqdci = -k_r;
  J[0] += dqdci; // dwdot[NC12H26]/d[NC12H26]
  // d()/dT
  J[1260] += dqdT; // dwdot[NC12H26]/dT

  // reaction 232: H + NC12H26 <=> H2 + PXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[1];
  k_f = 1.3 * exp(2.54 * tc[0] - 0.50321666580472 * (6756) * invT);
  dlnkfdT = 2.54 * invT + 0.50321666580472 * (6756) * invT2;
  // reverse
  phi_r = sc[5] * sc_qss[13];
  Kc = exp(g_RT[0] + g_RT[1] - g_RT[5] - g_RT_qss[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[1]) + (h_RT[5] + h_RT_qss[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[1] -= q; // H
  wdot[5] += q; // H2
  // d()/d[NC12H26]
  dqdci = +k_f * sc[1];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[1] -= dqdci; // dwdot[H]/d[NC12H26]
  J[5] += dqdci; // dwdot[H2]/d[NC12H26]
  // d()/d[H]
  dqdci = +k_f * sc[0];
  J[36] -= dqdci; // dwdot[NC12H26]/d[H]
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc_qss[13];
  J[180] -= dqdci; // dwdot[NC12H26]/d[H2]
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT

  // reaction 233: H + NC12H26 <=> H2 + SXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[1];
  k_f = 2.6 * exp(2.4 * tc[0] - 0.50321666580472 * (4471) * invT);
  dlnkfdT = 2.4 * invT + 0.50321666580472 * (4471) * invT2;
  // reverse
  phi_r = sc[5] * sc_qss[14];
  Kc = exp(g_RT[0] + g_RT[1] - g_RT[5] - g_RT_qss[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[1]) + (h_RT[5] + h_RT_qss[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[1] -= q; // H
  wdot[5] += q; // H2
  // d()/d[NC12H26]
  dqdci = +k_f * sc[1];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[1] -= dqdci; // dwdot[H]/d[NC12H26]
  J[5] += dqdci; // dwdot[H2]/d[NC12H26]
  // d()/d[H]
  dqdci = +k_f * sc[0];
  J[36] -= dqdci; // dwdot[NC12H26]/d[H]
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc_qss[14];
  J[180] -= dqdci; // dwdot[NC12H26]/d[H2]
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT

  // reaction 234: H + NC12H26 <=> H2 + S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[1];
  k_f = 3.9 * exp(2.4 * tc[0] - 0.50321666580472 * (4471) * invT);
  dlnkfdT = 2.4 * invT + 0.50321666580472 * (4471) * invT2;
  // reverse
  phi_r = sc[5] * sc_qss[15];
  Kc = exp(g_RT[0] + g_RT[1] - g_RT[5] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[1]) + (h_RT[5] + h_RT_qss[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[1] -= q; // H
  wdot[5] += q; // H2
  // d()/d[NC12H26]
  dqdci = +k_f * sc[1];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[1] -= dqdci; // dwdot[H]/d[NC12H26]
  J[5] += dqdci; // dwdot[H2]/d[NC12H26]
  // d()/d[H]
  dqdci = +k_f * sc[0];
  J[36] -= dqdci; // dwdot[NC12H26]/d[H]
  J[37] -= dqdci; // dwdot[H]/d[H]
  J[41] += dqdci; // dwdot[H2]/d[H]
  // d()/d[H2]
  dqdci = -k_r * sc_qss[15];
  J[180] -= dqdci; // dwdot[NC12H26]/d[H2]
  J[181] -= dqdci; // dwdot[H]/d[H2]
  J[185] += dqdci; // dwdot[H2]/d[H2]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1261] -= dqdT; // dwdot[H]/dT
  J[1265] += dqdT; // dwdot[H2]/dT

  // reaction 235: NC12H26 + O <=> OH + PXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[2];
  k_f = 0.19 * exp(2.68 * tc[0] - 0.50321666580472 * (3716) * invT);
  dlnkfdT = 2.68 * invT + 0.50321666580472 * (3716) * invT2;
  // reverse
  phi_r = sc[3] * sc_qss[13];
  Kc = exp(g_RT[0] + g_RT[2] - g_RT[3] - g_RT_qss[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[2]) + (h_RT[3] + h_RT_qss[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[2] -= q; // O
  wdot[3] += q; // OH
  // d()/d[NC12H26]
  dqdci = +k_f * sc[2];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[2] -= dqdci; // dwdot[O]/d[NC12H26]
  J[3] += dqdci; // dwdot[OH]/d[NC12H26]
  // d()/d[O]
  dqdci = +k_f * sc[0];
  J[72] -= dqdci; // dwdot[NC12H26]/d[O]
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc_qss[13];
  J[108] -= dqdci; // dwdot[NC12H26]/d[OH]
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT

  // reaction 236: NC12H26 + O <=> OH + SXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[2];
  k_f = 0.0952 * exp(2.71 * tc[0] - 0.50321666580472 * (2106) * invT);
  dlnkfdT = 2.71 * invT + 0.50321666580472 * (2106) * invT2;
  // reverse
  phi_r = sc[3] * sc_qss[14];
  Kc = exp(g_RT[0] + g_RT[2] - g_RT[3] - g_RT_qss[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[2]) + (h_RT[3] + h_RT_qss[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[2] -= q; // O
  wdot[3] += q; // OH
  // d()/d[NC12H26]
  dqdci = +k_f * sc[2];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[2] -= dqdci; // dwdot[O]/d[NC12H26]
  J[3] += dqdci; // dwdot[OH]/d[NC12H26]
  // d()/d[O]
  dqdci = +k_f * sc[0];
  J[72] -= dqdci; // dwdot[NC12H26]/d[O]
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc_qss[14];
  J[108] -= dqdci; // dwdot[NC12H26]/d[OH]
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT

  // reaction 237: NC12H26 + O <=> OH + S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[2];
  k_f = 0.1428 * exp(2.71 * tc[0] - 0.50321666580472 * (2106) * invT);
  dlnkfdT = 2.71 * invT + 0.50321666580472 * (2106) * invT2;
  // reverse
  phi_r = sc[3] * sc_qss[15];
  Kc = exp(g_RT[0] + g_RT[2] - g_RT[3] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[2]) + (h_RT[3] + h_RT_qss[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[2] -= q; // O
  wdot[3] += q; // OH
  // d()/d[NC12H26]
  dqdci = +k_f * sc[2];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[2] -= dqdci; // dwdot[O]/d[NC12H26]
  J[3] += dqdci; // dwdot[OH]/d[NC12H26]
  // d()/d[O]
  dqdci = +k_f * sc[0];
  J[72] -= dqdci; // dwdot[NC12H26]/d[O]
  J[74] -= dqdci; // dwdot[O]/d[O]
  J[75] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc_qss[15];
  J[108] -= dqdci; // dwdot[NC12H26]/d[OH]
  J[110] -= dqdci; // dwdot[O]/d[OH]
  J[111] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1262] -= dqdT; // dwdot[O]/dT
  J[1263] += dqdT; // dwdot[OH]/dT

  // reaction 238: NC12H26 + OH <=> H2O + PXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[3];
  k_f = 0.0034 * exp(2.66 * tc[0] - 0.50321666580472 * (527) * invT);
  dlnkfdT = 2.66 * invT + 0.50321666580472 * (527) * invT2;
  // reverse
  phi_r = sc[6] * sc_qss[13];
  Kc = exp(g_RT[0] + g_RT[3] - g_RT[6] - g_RT_qss[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[3]) + (h_RT[6] + h_RT_qss[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[3] -= q; // OH
  wdot[6] += q; // H2O
  // d()/d[NC12H26]
  dqdci = +k_f * sc[3];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[3] -= dqdci; // dwdot[OH]/d[NC12H26]
  J[6] += dqdci; // dwdot[H2O]/d[NC12H26]
  // d()/d[OH]
  dqdci = +k_f * sc[0];
  J[108] -= dqdci; // dwdot[NC12H26]/d[OH]
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc_qss[13];
  J[216] -= dqdci; // dwdot[NC12H26]/d[H2O]
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT

  // reaction 239: NC12H26 + OH <=> H2O + SXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[3];
  k_f = 0.074 * exp(2.39 * tc[0] - 0.50321666580472 * (393) * invT);
  dlnkfdT = 2.39 * invT + 0.50321666580472 * (393) * invT2;
  // reverse
  phi_r = sc[6] * sc_qss[14];
  Kc = exp(g_RT[0] + g_RT[3] - g_RT[6] - g_RT_qss[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[3]) + (h_RT[6] + h_RT_qss[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[3] -= q; // OH
  wdot[6] += q; // H2O
  // d()/d[NC12H26]
  dqdci = +k_f * sc[3];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[3] -= dqdci; // dwdot[OH]/d[NC12H26]
  J[6] += dqdci; // dwdot[H2O]/d[NC12H26]
  // d()/d[OH]
  dqdci = +k_f * sc[0];
  J[108] -= dqdci; // dwdot[NC12H26]/d[OH]
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc_qss[14];
  J[216] -= dqdci; // dwdot[NC12H26]/d[H2O]
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT

  // reaction 240: NC12H26 + OH <=> H2O + S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[3];
  k_f = 0.101 * exp(2.39 * tc[0] - 0.50321666580472 * (393) * invT);
  dlnkfdT = 2.39 * invT + 0.50321666580472 * (393) * invT2;
  // reverse
  phi_r = sc[6] * sc_qss[15];
  Kc = exp(g_RT[0] + g_RT[3] - g_RT[6] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[3]) + (h_RT[6] + h_RT_qss[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[3] -= q; // OH
  wdot[6] += q; // H2O
  // d()/d[NC12H26]
  dqdci = +k_f * sc[3];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[3] -= dqdci; // dwdot[OH]/d[NC12H26]
  J[6] += dqdci; // dwdot[H2O]/d[NC12H26]
  // d()/d[OH]
  dqdci = +k_f * sc[0];
  J[108] -= dqdci; // dwdot[NC12H26]/d[OH]
  J[111] -= dqdci; // dwdot[OH]/d[OH]
  J[114] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc_qss[15];
  J[216] -= dqdci; // dwdot[NC12H26]/d[H2O]
  J[219] -= dqdci; // dwdot[OH]/d[H2O]
  J[222] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1263] -= dqdT; // dwdot[OH]/dT
  J[1266] += dqdT; // dwdot[H2O]/dT

  // reaction 241: NC12H26 + O2 <=> HO2 + PXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[8];
  k_f = 40000000 * exp(0 * tc[0] - 0.50321666580472 * (50930) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (50930) * invT2;
  // reverse
  phi_r = sc[4] * sc_qss[13];
  Kc = exp(g_RT[0] - g_RT[4] + g_RT[8] - g_RT_qss[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[8]) + (h_RT[4] + h_RT_qss[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[4] += q; // HO2
  wdot[8] -= q; // O2
  // d()/d[NC12H26]
  dqdci = +k_f * sc[8];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[4] += dqdci; // dwdot[HO2]/d[NC12H26]
  J[8] -= dqdci; // dwdot[O2]/d[NC12H26]
  // d()/d[HO2]
  dqdci = -k_r * sc_qss[13];
  J[144] -= dqdci; // dwdot[NC12H26]/d[HO2]
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[0];
  J[288] -= dqdci; // dwdot[NC12H26]/d[O2]
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT

  // reaction 242: NC12H26 + O2 <=> HO2 + SXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[8];
  k_f = 80000000 * exp(0 * tc[0] - 0.50321666580472 * (47590) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (47590) * invT2;
  // reverse
  phi_r = sc[4] * sc_qss[14];
  Kc = exp(g_RT[0] - g_RT[4] + g_RT[8] - g_RT_qss[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[8]) + (h_RT[4] + h_RT_qss[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[4] += q; // HO2
  wdot[8] -= q; // O2
  // d()/d[NC12H26]
  dqdci = +k_f * sc[8];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[4] += dqdci; // dwdot[HO2]/d[NC12H26]
  J[8] -= dqdci; // dwdot[O2]/d[NC12H26]
  // d()/d[HO2]
  dqdci = -k_r * sc_qss[14];
  J[144] -= dqdci; // dwdot[NC12H26]/d[HO2]
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[0];
  J[288] -= dqdci; // dwdot[NC12H26]/d[O2]
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT

  // reaction 243: NC12H26 + O2 <=> HO2 + S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[8];
  k_f = 120000000 * exp(0 * tc[0] - 0.50321666580472 * (47590) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (47590) * invT2;
  // reverse
  phi_r = sc[4] * sc_qss[15];
  Kc = exp(g_RT[0] - g_RT[4] + g_RT[8] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[8]) + (h_RT[4] + h_RT_qss[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[4] += q; // HO2
  wdot[8] -= q; // O2
  // d()/d[NC12H26]
  dqdci = +k_f * sc[8];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[4] += dqdci; // dwdot[HO2]/d[NC12H26]
  J[8] -= dqdci; // dwdot[O2]/d[NC12H26]
  // d()/d[HO2]
  dqdci = -k_r * sc_qss[15];
  J[144] -= dqdci; // dwdot[NC12H26]/d[HO2]
  J[148] += dqdci; // dwdot[HO2]/d[HO2]
  J[152] -= dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[0];
  J[288] -= dqdci; // dwdot[NC12H26]/d[O2]
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT

  // reaction 244: HO2 + NC12H26 <=> H2O2 + PXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0.0676 * exp(2.55 * tc[0] - 0.50321666580472 * (16490) * invT);
  dlnkfdT = 2.55 * invT + 0.50321666580472 * (16490) * invT2;
  // reverse
  phi_r = sc[7] * sc_qss[13];
  Kc = exp(g_RT[0] + g_RT[4] - g_RT[7] - g_RT_qss[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[4]) + (h_RT[7] + h_RT_qss[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[4] -= q; // HO2
  wdot[7] += q; // H2O2
  // d()/d[NC12H26]
  dqdci = +k_f * sc[4];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[4] -= dqdci; // dwdot[HO2]/d[NC12H26]
  J[7] += dqdci; // dwdot[H2O2]/d[NC12H26]
  // d()/d[HO2]
  dqdci = +k_f * sc[0];
  J[144] -= dqdci; // dwdot[NC12H26]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[151] += dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc_qss[13];
  J[252] -= dqdci; // dwdot[NC12H26]/d[H2O2]
  J[256] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[259] += dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1267] += dqdT; // dwdot[H2O2]/dT

  // reaction 245: HO2 + NC12H26 <=> H2O2 + SXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0.089 * exp(2.6 * tc[0] - 0.50321666580472 * (13910) * invT);
  dlnkfdT = 2.6 * invT + 0.50321666580472 * (13910) * invT2;
  // reverse
  phi_r = sc[7] * sc_qss[14];
  Kc = exp(g_RT[0] + g_RT[4] - g_RT[7] - g_RT_qss[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[4]) + (h_RT[7] + h_RT_qss[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[4] -= q; // HO2
  wdot[7] += q; // H2O2
  // d()/d[NC12H26]
  dqdci = +k_f * sc[4];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[4] -= dqdci; // dwdot[HO2]/d[NC12H26]
  J[7] += dqdci; // dwdot[H2O2]/d[NC12H26]
  // d()/d[HO2]
  dqdci = +k_f * sc[0];
  J[144] -= dqdci; // dwdot[NC12H26]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[151] += dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc_qss[14];
  J[252] -= dqdci; // dwdot[NC12H26]/d[H2O2]
  J[256] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[259] += dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1267] += dqdT; // dwdot[H2O2]/dT

  // reaction 246: HO2 + NC12H26 <=> H2O2 + S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 0.0885 * exp(2.6 * tc[0] - 0.50321666580472 * (13910) * invT);
  dlnkfdT = 2.6 * invT + 0.50321666580472 * (13910) * invT2;
  // reverse
  phi_r = sc[7] * sc_qss[15];
  Kc = exp(g_RT[0] + g_RT[4] - g_RT[7] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[4]) + (h_RT[7] + h_RT_qss[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // NC12H26
  wdot[4] -= q; // HO2
  wdot[7] += q; // H2O2
  // d()/d[NC12H26]
  dqdci = +k_f * sc[4];
  J[0] -= dqdci; // dwdot[NC12H26]/d[NC12H26]
  J[4] -= dqdci; // dwdot[HO2]/d[NC12H26]
  J[7] += dqdci; // dwdot[H2O2]/d[NC12H26]
  // d()/d[HO2]
  dqdci = +k_f * sc[0];
  J[144] -= dqdci; // dwdot[NC12H26]/d[HO2]
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[151] += dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc_qss[15];
  J[252] -= dqdci; // dwdot[NC12H26]/d[H2O2]
  J[256] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[259] += dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1267] += dqdT; // dwdot[H2O2]/dT

  // reaction 247: CH3 + NC12H26 <=> CH4 + PXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[9];
  k_f = 1.81e-06 * exp(3.65 * tc[0] - 0.50321666580472 * (7153) * invT);
  dlnkfdT = 3.65 * invT + 0.50321666580472 * (7153) * invT2;
  // reverse
  phi_r = sc[10] * sc_qss[13];
  Kc = exp(g_RT[0] + g_RT[9] - g_RT[10] - g_RT_qss[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[9]) + (h_RT[10] + h_RT_qss[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // NC12H26
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  // d()/d[NC12H26]
  dqdci = +k_f * sc[9];
  J[0] -= dqdci;  // dwdot[NC12H26]/d[NC12H26]
  J[9] -= dqdci;  // dwdot[CH3]/d[NC12H26]
  J[10] += dqdci; // dwdot[CH4]/d[NC12H26]
  // d()/d[CH3]
  dqdci = +k_f * sc[0];
  J[324] -= dqdci; // dwdot[NC12H26]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc_qss[13];
  J[360] -= dqdci; // dwdot[NC12H26]/d[CH4]
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT

  // reaction 248: CH3 + NC12H26 <=> CH4 + SXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[9];
  k_f = 6e-06 * exp(3.46 * tc[0] - 0.50321666580472 * (5480) * invT);
  dlnkfdT = 3.46 * invT + 0.50321666580472 * (5480) * invT2;
  // reverse
  phi_r = sc[10] * sc_qss[14];
  Kc = exp(g_RT[0] + g_RT[9] - g_RT[10] - g_RT_qss[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[9]) + (h_RT[10] + h_RT_qss[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // NC12H26
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  // d()/d[NC12H26]
  dqdci = +k_f * sc[9];
  J[0] -= dqdci;  // dwdot[NC12H26]/d[NC12H26]
  J[9] -= dqdci;  // dwdot[CH3]/d[NC12H26]
  J[10] += dqdci; // dwdot[CH4]/d[NC12H26]
  // d()/d[CH3]
  dqdci = +k_f * sc[0];
  J[324] -= dqdci; // dwdot[NC12H26]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc_qss[14];
  J[360] -= dqdci; // dwdot[NC12H26]/d[CH4]
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT

  // reaction 249: CH3 + NC12H26 <=> CH4 + S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[9];
  k_f = 9e-06 * exp(3.46 * tc[0] - 0.50321666580472 * (5480) * invT);
  dlnkfdT = 3.46 * invT + 0.50321666580472 * (5480) * invT2;
  // reverse
  phi_r = sc[10] * sc_qss[15];
  Kc = exp(g_RT[0] + g_RT[9] - g_RT[10] - g_RT_qss[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[9]) + (h_RT[10] + h_RT_qss[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // NC12H26
  wdot[9] -= q;  // CH3
  wdot[10] += q; // CH4
  // d()/d[NC12H26]
  dqdci = +k_f * sc[9];
  J[0] -= dqdci;  // dwdot[NC12H26]/d[NC12H26]
  J[9] -= dqdci;  // dwdot[CH3]/d[NC12H26]
  J[10] += dqdci; // dwdot[CH4]/d[NC12H26]
  // d()/d[CH3]
  dqdci = +k_f * sc[0];
  J[324] -= dqdci; // dwdot[NC12H26]/d[CH3]
  J[333] -= dqdci; // dwdot[CH3]/d[CH3]
  J[334] += dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc_qss[15];
  J[360] -= dqdci; // dwdot[NC12H26]/d[CH4]
  J[369] -= dqdci; // dwdot[CH3]/d[CH4]
  J[370] += dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[1260] -= dqdT; // dwdot[NC12H26]/dT
  J[1269] -= dqdT; // dwdot[CH3]/dT
  J[1270] += dqdT; // dwdot[CH4]/dT

  // reaction 250: O2 + PXC12H25 => C12H25O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[13];
  k_f = 50000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] -= q;  // O2
  wdot[32] += q; // C12H25O2
  // d()/d[O2]
  dqdci = +k_f * sc_qss[13];
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[320] += dqdci; // dwdot[C12H25O2]/d[O2]
  // d()/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1292] += dqdT; // dwdot[C12H25O2]/dT

  // reaction 251: C12H25O2 => O2 + PXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[32];
  k_f = 27500000000000 * exp(0 * tc[0] - 0.50321666580472 * (27400) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (27400) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] += q;  // O2
  wdot[32] -= q; // C12H25O2
  // d()/d[C12H25O2]
  dqdci = +k_f;
  J[1160] += dqdci; // dwdot[O2]/d[C12H25O2]
  J[1184] -= dqdci; // dwdot[C12H25O2]/d[C12H25O2]
  // d()/dT
  J[1268] += dqdT; // dwdot[O2]/dT
  J[1292] -= dqdT; // dwdot[C12H25O2]/dT

  // reaction 252: O2 + SXC12H25 => C12H25O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[14];
  k_f = 50000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] -= q;  // O2
  wdot[32] += q; // C12H25O2
  // d()/d[O2]
  dqdci = +k_f * sc_qss[14];
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[320] += dqdci; // dwdot[C12H25O2]/d[O2]
  // d()/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1292] += dqdT; // dwdot[C12H25O2]/dT

  // reaction 253: C12H25O2 => O2 + SXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[32];
  k_f = 27500000000000 * exp(0 * tc[0] - 0.50321666580472 * (27400) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (27400) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] += q;  // O2
  wdot[32] -= q; // C12H25O2
  // d()/d[C12H25O2]
  dqdci = +k_f;
  J[1160] += dqdci; // dwdot[O2]/d[C12H25O2]
  J[1184] -= dqdci; // dwdot[C12H25O2]/d[C12H25O2]
  // d()/dT
  J[1268] += dqdT; // dwdot[O2]/dT
  J[1292] -= dqdT; // dwdot[C12H25O2]/dT

  // reaction 254: O2 + S3XC12H25 => C12H25O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[15];
  k_f = 50000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] -= q;  // O2
  wdot[32] += q; // C12H25O2
  // d()/d[O2]
  dqdci = +k_f * sc_qss[15];
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[320] += dqdci; // dwdot[C12H25O2]/d[O2]
  // d()/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1292] += dqdT; // dwdot[C12H25O2]/dT

  // reaction 255: C12H25O2 => O2 + S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[32];
  k_f = 27500000000000 * exp(0 * tc[0] - 0.50321666580472 * (27400) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (27400) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] += q;  // O2
  wdot[32] -= q; // C12H25O2
  // d()/d[C12H25O2]
  dqdci = +k_f;
  J[1160] += dqdci; // dwdot[O2]/d[C12H25O2]
  J[1184] -= dqdci; // dwdot[C12H25O2]/d[C12H25O2]
  // d()/dT
  J[1268] += dqdT; // dwdot[O2]/dT
  J[1292] -= dqdT; // dwdot[C12H25O2]/dT

  // reaction 256: C12H25O2 => C12OOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[32];
  k_f = 1510000000000 * exp(0 * tc[0] - 0.50321666580472 * (19000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (19000) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[32] -= q; // C12H25O2
  // d()/d[C12H25O2]
  dqdci = +k_f;
  J[1184] -= dqdci; // dwdot[C12H25O2]/d[C12H25O2]
  // d()/dT
  J[1292] -= dqdT; // dwdot[C12H25O2]/dT

  // reaction 257: C12OOH => C12H25O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[16];
  k_f = 100000000000 * exp(0 * tc[0] - 0.50321666580472 * (11500) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (11500) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[32] += q; // C12H25O2
  // d()/dT
  J[1292] += dqdT; // dwdot[C12H25O2]/dT

  // reaction 258: O2 + PXC12H25 => C12H24 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[13];
  k_f = 350000 * exp(0 * tc[0] - 0.50321666580472 * (6000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (6000) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[31] += q; // C12H24
  // d()/d[O2]
  dqdci = +k_f * sc_qss[13];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[319] += dqdci; // dwdot[C12H24]/d[O2]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1291] += dqdT; // dwdot[C12H24]/dT

  // reaction 259: C12H24 + HO2 => O2 + PXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[31];
  k_f = 316000 * exp(0 * tc[0] - 0.50321666580472 * (19500) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (19500) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[31] -= q; // C12H24
  // d()/d[HO2]
  dqdci = +k_f * sc[31];
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[152] += dqdci; // dwdot[O2]/d[HO2]
  J[175] -= dqdci; // dwdot[C12H24]/d[HO2]
  // d()/d[C12H24]
  dqdci = +k_f * sc[4];
  J[1120] -= dqdci; // dwdot[HO2]/d[C12H24]
  J[1124] += dqdci; // dwdot[O2]/d[C12H24]
  J[1147] -= dqdci; // dwdot[C12H24]/d[C12H24]
  // d()/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1268] += dqdT; // dwdot[O2]/dT
  J[1291] -= dqdT; // dwdot[C12H24]/dT

  // reaction 260: O2 + SXC12H25 => C12H24 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[14];
  k_f = 350000 * exp(0 * tc[0] - 0.50321666580472 * (6000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (6000) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[31] += q; // C12H24
  // d()/d[O2]
  dqdci = +k_f * sc_qss[14];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[319] += dqdci; // dwdot[C12H24]/d[O2]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1291] += dqdT; // dwdot[C12H24]/dT

  // reaction 261: C12H24 + HO2 => O2 + SXC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[31];
  k_f = 316000 * exp(0 * tc[0] - 0.50321666580472 * (19500) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (19500) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[31] -= q; // C12H24
  // d()/d[HO2]
  dqdci = +k_f * sc[31];
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[152] += dqdci; // dwdot[O2]/d[HO2]
  J[175] -= dqdci; // dwdot[C12H24]/d[HO2]
  // d()/d[C12H24]
  dqdci = +k_f * sc[4];
  J[1120] -= dqdci; // dwdot[HO2]/d[C12H24]
  J[1124] += dqdci; // dwdot[O2]/d[C12H24]
  J[1147] -= dqdci; // dwdot[C12H24]/d[C12H24]
  // d()/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1268] += dqdT; // dwdot[O2]/dT
  J[1291] -= dqdT; // dwdot[C12H24]/dT

  // reaction 262: O2 + S3XC12H25 => C12H24 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[15];
  k_f = 350000 * exp(0 * tc[0] - 0.50321666580472 * (6000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (6000) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q;  // HO2
  wdot[8] -= q;  // O2
  wdot[31] += q; // C12H24
  // d()/d[O2]
  dqdci = +k_f * sc_qss[15];
  J[292] += dqdci; // dwdot[HO2]/d[O2]
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  J[319] += dqdci; // dwdot[C12H24]/d[O2]
  // d()/dT
  J[1264] += dqdT; // dwdot[HO2]/dT
  J[1268] -= dqdT; // dwdot[O2]/dT
  J[1291] += dqdT; // dwdot[C12H24]/dT

  // reaction 263: C12H24 + HO2 => O2 + S3XC12H25
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[31];
  k_f = 316000 * exp(0 * tc[0] - 0.50321666580472 * (19500) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (19500) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q;  // HO2
  wdot[8] += q;  // O2
  wdot[31] -= q; // C12H24
  // d()/d[HO2]
  dqdci = +k_f * sc[31];
  J[148] -= dqdci; // dwdot[HO2]/d[HO2]
  J[152] += dqdci; // dwdot[O2]/d[HO2]
  J[175] -= dqdci; // dwdot[C12H24]/d[HO2]
  // d()/d[C12H24]
  dqdci = +k_f * sc[4];
  J[1120] -= dqdci; // dwdot[HO2]/d[C12H24]
  J[1124] += dqdci; // dwdot[O2]/d[C12H24]
  J[1147] -= dqdci; // dwdot[C12H24]/d[C12H24]
  // d()/dT
  J[1264] -= dqdT; // dwdot[HO2]/dT
  J[1268] += dqdT; // dwdot[O2]/dT
  J[1291] -= dqdT; // dwdot[C12H24]/dT

  // reaction 264: C12OOH + O2 => O2C12H24OOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc_qss[16];
  k_f = 46000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] -= q; // O2
  // d()/d[O2]
  dqdci = +k_f * sc_qss[16];
  J[296] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1268] -= dqdT; // dwdot[O2]/dT

  // reaction 265: O2C12H24OOH => C12OOH + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[17];
  k_f = 25100000000000 * exp(0 * tc[0] - 0.50321666580472 * (27400) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (27400) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[8] += q; // O2
  // d()/dT
  J[1268] += dqdT; // dwdot[O2]/dT

  // reaction 266: O2C12H24OOH <=> OC12H23OOH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc_qss[17];
  k_f = 89000000000 * exp(0 * tc[0] - 0.50321666580472 * (17000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (17000) * invT2;
  // reverse
  phi_r = sc[3] * sc[33];
  Kc = refC * exp(-g_RT[3] - g_RT[33] + g_RT_qss[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT_qss[17]) + (h_RT[3] + h_RT[33]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // OH
  wdot[33] += q; // OC12H23OOH
  // d()/d[OH]
  dqdci = -k_r * sc[33];
  J[111] += dqdci; // dwdot[OH]/d[OH]
  J[141] += dqdci; // dwdot[OC12H23OOH]/d[OH]
  // d()/d[OC12H23OOH]
  dqdci = -k_r * sc[3];
  J[1191] += dqdci; // dwdot[OH]/d[OC12H23OOH]
  J[1221] += dqdci; // dwdot[OC12H23OOH]/d[OC12H23OOH]
  // d()/dT
  J[1263] += dqdT; // dwdot[OH]/dT
  J[1293] += dqdT; // dwdot[OC12H23OOH]/dT

  // reaction 267: OC12H23OOH => 3 C2H4 + C2H5 + 2 CH2CHO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[33];
  k_f = 1.8e+15 * exp(0 * tc[0] - 0.50321666580472 * (42065) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (42065) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[3] += q;      // OH
  wdot[15] += 3 * q; // C2H4
  wdot[17] += 2 * q; // CH2CHO
  wdot[33] -= q;     // OC12H23OOH
  // d()/d[OC12H23OOH]
  dqdci = +k_f;
  J[1191] += dqdci;     // dwdot[OH]/d[OC12H23OOH]
  J[1203] += 3 * dqdci; // dwdot[C2H4]/d[OC12H23OOH]
  J[1205] += 2 * dqdci; // dwdot[CH2CHO]/d[OC12H23OOH]
  J[1221] -= dqdci;     // dwdot[OC12H23OOH]/d[OC12H23OOH]
  // d()/dT
  J[1263] += dqdT;     // dwdot[OH]/dT
  J[1275] += 3 * dqdT; // dwdot[C2H4]/dT
  J[1277] += 2 * dqdT; // dwdot[CH2CHO]/dT
  J[1293] -= dqdT;     // dwdot[OC12H23OOH]/dT

  amrex::Real c_R[35], dcRdT[35], e_RT[35];
  amrex::Real* eh_RT;
  if (consP) {
    cp_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    speciesInternalEnergy(e_RT, tc);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 35; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[1260 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 35; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 35; ++m) {
      dehmixdc += eh_RT[m] * J[k * 36 + m];
    }
    J[k * 36 + 35] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[1295] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT(amrex::Real* J, amrex::Real* sc, amrex::Real* Tp, const int* consP)
{
  amrex::Real c[35];

  for (int k = 0; k < 35; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian(J, c, *Tp, *consP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 35; k++) {
    J[1260 + k] *= 1.e-6;
    J[k * 36 + 35] *= 1.e6;
  }

  return;
}

// Transport function declarations

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENIMC(int* LENIMC)
{
  *LENIMC = 142;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENRMC(int* LENRMC)
{
  *LENRMC = 24500;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNO(int* NO)
{
  *NO = 4;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKK(int* KK)
{
  *KK = 35;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLITE(int* NLITE)
{
  *NLITE = 2;
}

// Patm in ergs/cm3
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPATM(amrex::Real* PATM)
{
  *PATM = 0.1013250000000000E+07;
}

// the molecular weights in g/mol
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetWT(amrex::Real* WT)
{
  WT[0] = 1.70340000E+02;
  WT[1] = 1.00800000E+00;
  WT[2] = 1.59990000E+01;
  WT[3] = 1.70070000E+01;
  WT[4] = 3.30060000E+01;
  WT[5] = 2.01600000E+00;
  WT[6] = 1.80150000E+01;
  WT[7] = 3.40140000E+01;
  WT[8] = 3.19980000E+01;
  WT[9] = 1.50350000E+01;
  WT[10] = 1.60430000E+01;
  WT[11] = 3.00260000E+01;
  WT[12] = 2.80100000E+01;
  WT[13] = 4.40090000E+01;
  WT[14] = 2.60380000E+01;
  WT[15] = 2.80540000E+01;
  WT[16] = 3.00700000E+01;
  WT[17] = 4.30450000E+01;
  WT[18] = 4.10730000E+01;
  WT[19] = 4.20810000E+01;
  WT[20] = 5.60640000E+01;
  WT[21] = 5.51000000E+01;
  WT[22] = 5.61080000E+01;
  WT[23] = 6.91270000E+01;
  WT[24] = 7.01350000E+01;
  WT[25] = 8.41620000E+01;
  WT[26] = 9.81890000E+01;
  WT[27] = 1.12216000E+02;
  WT[28] = 1.26243000E+02;
  WT[29] = 1.27251000E+02;
  WT[30] = 1.40270000E+02;
  WT[31] = 1.68324000E+02;
  WT[32] = 2.01330000E+02;
  WT[33] = 2.16321000E+02;
  WT[34] = 2.80140000E+01;
}

// the lennard-jones potential well depth eps/kb in K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetEPS(amrex::Real* EPS)
{
  EPS[0] = 7.89980000E+02;
  EPS[1] = 1.45000000E+02;
  EPS[2] = 8.00000000E+01;
  EPS[3] = 8.00000000E+01;
  EPS[4] = 1.07400000E+02;
  EPS[5] = 3.80000000E+01;
  EPS[6] = 5.72400000E+02;
  EPS[7] = 1.07400000E+02;
  EPS[8] = 1.07400000E+02;
  EPS[9] = 1.44000000E+02;
  EPS[10] = 1.41400000E+02;
  EPS[11] = 4.98000000E+02;
  EPS[12] = 9.81000000E+01;
  EPS[13] = 2.44000000E+02;
  EPS[14] = 2.09000000E+02;
  EPS[15] = 2.80800000E+02;
  EPS[16] = 2.52300000E+02;
  EPS[17] = 4.36000000E+02;
  EPS[18] = 2.66800000E+02;
  EPS[19] = 2.66800000E+02;
  EPS[20] = 3.57000000E+02;
  EPS[21] = 3.57000000E+02;
  EPS[22] = 3.57000000E+02;
  EPS[23] = 4.48508000E+02;
  EPS[24] = 4.48508000E+02;
  EPS[25] = 5.04629000E+02;
  EPS[26] = 5.57947000E+02;
  EPS[27] = 6.08488000E+02;
  EPS[28] = 6.55390000E+02;
  EPS[29] = 6.60032000E+02;
  EPS[30] = 6.98122000E+02;
  EPS[31] = 7.75294000E+02;
  EPS[32] = 8.05031000E+02;
  EPS[33] = 8.39348000E+02;
  EPS[34] = 9.75300000E+01;
}

// the lennard-jones collision diameter in Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetSIG(amrex::Real* SIG)
{
  SIG[0] = 7.04700000E+00;
  SIG[1] = 2.05000000E+00;
  SIG[2] = 2.75000000E+00;
  SIG[3] = 2.75000000E+00;
  SIG[4] = 3.45800000E+00;
  SIG[5] = 2.92000000E+00;
  SIG[6] = 2.60500000E+00;
  SIG[7] = 3.45800000E+00;
  SIG[8] = 3.45800000E+00;
  SIG[9] = 3.80000000E+00;
  SIG[10] = 3.74600000E+00;
  SIG[11] = 3.59000000E+00;
  SIG[12] = 3.65000000E+00;
  SIG[13] = 3.76300000E+00;
  SIG[14] = 4.10000000E+00;
  SIG[15] = 3.97100000E+00;
  SIG[16] = 4.30200000E+00;
  SIG[17] = 3.97000000E+00;
  SIG[18] = 4.98200000E+00;
  SIG[19] = 4.98200000E+00;
  SIG[20] = 5.17600000E+00;
  SIG[21] = 5.17600000E+00;
  SIG[22] = 5.17600000E+00;
  SIG[23] = 5.34200000E+00;
  SIG[24] = 5.34200000E+00;
  SIG[25] = 5.62800000E+00;
  SIG[26] = 5.87600000E+00;
  SIG[27] = 6.10000000E+00;
  SIG[28] = 6.33100000E+00;
  SIG[29] = 6.46700000E+00;
  SIG[30] = 6.57800000E+00;
  SIG[31] = 7.09000000E+00;
  SIG[32] = 7.10200000E+00;
  SIG[33] = 7.27300000E+00;
  SIG[34] = 3.62100000E+00;
}

// the dipole moment in Debye
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetDIP(amrex::Real* DIP)
{
  DIP[0] = 0.00000000E+00;
  DIP[1] = 0.00000000E+00;
  DIP[2] = 0.00000000E+00;
  DIP[3] = 0.00000000E+00;
  DIP[4] = 0.00000000E+00;
  DIP[5] = 0.00000000E+00;
  DIP[6] = 1.84400000E+00;
  DIP[7] = 0.00000000E+00;
  DIP[8] = 0.00000000E+00;
  DIP[9] = 0.00000000E+00;
  DIP[10] = 0.00000000E+00;
  DIP[11] = 0.00000000E+00;
  DIP[12] = 0.00000000E+00;
  DIP[13] = 0.00000000E+00;
  DIP[14] = 0.00000000E+00;
  DIP[15] = 0.00000000E+00;
  DIP[16] = 0.00000000E+00;
  DIP[17] = 0.00000000E+00;
  DIP[18] = 0.00000000E+00;
  DIP[19] = 0.00000000E+00;
  DIP[20] = 0.00000000E+00;
  DIP[21] = 0.00000000E+00;
  DIP[22] = 0.00000000E+00;
  DIP[23] = 0.00000000E+00;
  DIP[24] = 0.00000000E+00;
  DIP[25] = 0.00000000E+00;
  DIP[26] = 0.00000000E+00;
  DIP[27] = 0.00000000E+00;
  DIP[28] = 0.00000000E+00;
  DIP[29] = 0.00000000E+00;
  DIP[30] = 0.00000000E+00;
  DIP[31] = 0.00000000E+00;
  DIP[32] = 0.00000000E+00;
  DIP[33] = 0.00000000E+00;
  DIP[34] = 0.00000000E+00;
}

// the polarizability in cubic Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPOL(amrex::Real* POL)
{
  POL[0] = 0.00000000E+00;
  POL[1] = 0.00000000E+00;
  POL[2] = 0.00000000E+00;
  POL[3] = 0.00000000E+00;
  POL[4] = 0.00000000E+00;
  POL[5] = 7.90000000E-01;
  POL[6] = 0.00000000E+00;
  POL[7] = 0.00000000E+00;
  POL[8] = 1.60000000E+00;
  POL[9] = 0.00000000E+00;
  POL[10] = 2.60000000E+00;
  POL[11] = 0.00000000E+00;
  POL[12] = 1.95000000E+00;
  POL[13] = 2.65000000E+00;
  POL[14] = 0.00000000E+00;
  POL[15] = 0.00000000E+00;
  POL[16] = 0.00000000E+00;
  POL[17] = 0.00000000E+00;
  POL[18] = 0.00000000E+00;
  POL[19] = 0.00000000E+00;
  POL[20] = 0.00000000E+00;
  POL[21] = 0.00000000E+00;
  POL[22] = 0.00000000E+00;
  POL[23] = 0.00000000E+00;
  POL[24] = 0.00000000E+00;
  POL[25] = 0.00000000E+00;
  POL[26] = 0.00000000E+00;
  POL[27] = 0.00000000E+00;
  POL[28] = 0.00000000E+00;
  POL[29] = 0.00000000E+00;
  POL[30] = 0.00000000E+00;
  POL[31] = 0.00000000E+00;
  POL[32] = 0.00000000E+00;
  POL[33] = 0.00000000E+00;
  POL[34] = 1.76000000E+00;
}

// the rotational relaxation collision number at 298 K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetZROT(amrex::Real* ZROT)
{
  ZROT[0] = 1.00000000E+00;
  ZROT[1] = 0.00000000E+00;
  ZROT[2] = 0.00000000E+00;
  ZROT[3] = 0.00000000E+00;
  ZROT[4] = 1.00000000E+00;
  ZROT[5] = 2.80000000E+02;
  ZROT[6] = 4.00000000E+00;
  ZROT[7] = 3.80000000E+00;
  ZROT[8] = 3.80000000E+00;
  ZROT[9] = 0.00000000E+00;
  ZROT[10] = 1.30000000E+01;
  ZROT[11] = 2.00000000E+00;
  ZROT[12] = 1.80000000E+00;
  ZROT[13] = 2.10000000E+00;
  ZROT[14] = 2.50000000E+00;
  ZROT[15] = 1.50000000E+00;
  ZROT[16] = 1.50000000E+00;
  ZROT[17] = 2.00000000E+00;
  ZROT[18] = 1.00000000E+00;
  ZROT[19] = 1.00000000E+00;
  ZROT[20] = 1.00000000E+00;
  ZROT[21] = 1.00000000E+00;
  ZROT[22] = 1.00000000E+00;
  ZROT[23] = 1.00000000E+00;
  ZROT[24] = 1.00000000E+00;
  ZROT[25] = 1.00000000E+00;
  ZROT[26] = 1.00000000E+00;
  ZROT[27] = 1.00000000E+00;
  ZROT[28] = 1.00000000E+00;
  ZROT[29] = 1.00000000E+00;
  ZROT[30] = 1.00000000E+00;
  ZROT[31] = 1.00000000E+00;
  ZROT[32] = 1.00000000E+00;
  ZROT[33] = 1.00000000E+00;
  ZROT[34] = 4.00000000E+00;
}

// 0: monoatomic, 1: linear, 2: nonlinear
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLIN(int* NLIN)
{
  NLIN[0] = 2;
  NLIN[1] = 0;
  NLIN[2] = 0;
  NLIN[3] = 1;
  NLIN[4] = 2;
  NLIN[5] = 1;
  NLIN[6] = 2;
  NLIN[7] = 2;
  NLIN[8] = 1;
  NLIN[9] = 1;
  NLIN[10] = 2;
  NLIN[11] = 2;
  NLIN[12] = 1;
  NLIN[13] = 1;
  NLIN[14] = 1;
  NLIN[15] = 2;
  NLIN[16] = 2;
  NLIN[17] = 2;
  NLIN[18] = 2;
  NLIN[19] = 2;
  NLIN[20] = 2;
  NLIN[21] = 2;
  NLIN[22] = 2;
  NLIN[23] = 2;
  NLIN[24] = 2;
  NLIN[25] = 2;
  NLIN[26] = 2;
  NLIN[27] = 2;
  NLIN[28] = 2;
  NLIN[29] = 2;
  NLIN[30] = 2;
  NLIN[31] = 2;
  NLIN[32] = 2;
  NLIN[33] = 2;
  NLIN[34] = 1;
}

// Poly fits for the viscosities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFETA(amrex::Real* COFETA)
{
  COFETA[0] = -7.22654243E+00;
  COFETA[1] = -3.12842246E+00;
  COFETA[2] = 6.69477571E-01;
  COFETA[3] = -3.60312934E-02;
  COFETA[4] = -2.04078253E+01;
  COFETA[5] = 3.65436395E+00;
  COFETA[6] = -3.98339635E-01;
  COFETA[7] = 1.75883009E-02;
  COFETA[8] = -1.50926370E+01;
  COFETA[9] = 1.92606504E+00;
  COFETA[10] = -1.73487476E-01;
  COFETA[11] = 7.82572931E-03;
  COFETA[12] = -1.50620876E+01;
  COFETA[13] = 1.92606504E+00;
  COFETA[14] = -1.73487476E-01;
  COFETA[15] = 7.82572931E-03;
  COFETA[16] = -1.71463359E+01;
  COFETA[17] = 2.68036374E+00;
  COFETA[18] = -2.72570227E-01;
  COFETA[19] = 1.21650964E-02;
  COFETA[20] = -1.38347555E+01;
  COFETA[21] = 1.00106621E+00;
  COFETA[22] = -4.98105694E-02;
  COFETA[23] = 2.31450475E-03;
  COFETA[24] = -1.05420930E+01;
  COFETA[25] = -1.37777266E+00;
  COFETA[26] = 4.20502561E-01;
  COFETA[27] = -2.40627344E-02;
  COFETA[28] = -1.71312945E+01;
  COFETA[29] = 2.68036374E+00;
  COFETA[30] = -2.72570227E-01;
  COFETA[31] = 1.21650964E-02;
  COFETA[32] = -1.71618439E+01;
  COFETA[33] = 2.68036374E+00;
  COFETA[34] = -2.72570227E-01;
  COFETA[35] = 1.21650964E-02;
  COFETA[36] = -2.02316522E+01;
  COFETA[37] = 3.63241793E+00;
  COFETA[38] = -3.95581049E-01;
  COFETA[39] = 1.74725495E-02;
  COFETA[40] = -2.00094678E+01;
  COFETA[41] = 3.57220167E+00;
  COFETA[42] = -3.87936446E-01;
  COFETA[43] = 1.71483254E-02;
  COFETA[44] = -1.98330663E+01;
  COFETA[45] = 2.69480162E+00;
  COFETA[46] = -1.65880845E-01;
  COFETA[47] = 3.14504769E-03;
  COFETA[48] = -1.66188439E+01;
  COFETA[49] = 2.40307799E+00;
  COFETA[50] = -2.36167638E-01;
  COFETA[51] = 1.05714061E-02;
  COFETA[52] = -2.40015087E+01;
  COFETA[53] = 5.14359547E+00;
  COFETA[54] = -5.74269731E-01;
  COFETA[55] = 2.44937679E-02;
  COFETA[56] = -2.33666497E+01;
  COFETA[57] = 4.80350223E+00;
  COFETA[58] = -5.38341336E-01;
  COFETA[59] = 2.32747213E-02;
  COFETA[60] = -2.50655480E+01;
  COFETA[61] = 5.33982977E+00;
  COFETA[62] = -5.89982992E-01;
  COFETA[63] = 2.47780650E-02;
  COFETA[64] = -2.46410962E+01;
  COFETA[65] = 5.19497183E+00;
  COFETA[66] = -5.78827339E-01;
  COFETA[67] = 2.46050921E-02;
  COFETA[68] = -2.23277248E+01;
  COFETA[69] = 3.86433912E+00;
  COFETA[70] = -3.41553983E-01;
  COFETA[71] = 1.17083447E-02;
  COFETA[72] = -2.51527894E+01;
  COFETA[73] = 5.30723075E+00;
  COFETA[74] = -5.89742369E-01;
  COFETA[75] = 2.49294033E-02;
  COFETA[76] = -2.51406667E+01;
  COFETA[77] = 5.30723075E+00;
  COFETA[78] = -5.89742369E-01;
  COFETA[79] = 2.49294033E-02;
  COFETA[80] = -2.48320190E+01;
  COFETA[81] = 4.94595777E+00;
  COFETA[82] = -5.12278955E-01;
  COFETA[83] = 2.03286378E-02;
  COFETA[84] = -2.48406911E+01;
  COFETA[85] = 4.94595777E+00;
  COFETA[86] = -5.12278955E-01;
  COFETA[87] = 2.03286378E-02;
  COFETA[88] = -2.48316268E+01;
  COFETA[89] = 4.94595777E+00;
  COFETA[90] = -5.12278955E-01;
  COFETA[91] = 2.03286378E-02;
  COFETA[92] = -2.22556509E+01;
  COFETA[93] = 3.65583269E+00;
  COFETA[94] = -3.09681973E-01;
  COFETA[95] = 1.01347367E-02;
  COFETA[96] = -2.22484126E+01;
  COFETA[97] = 3.65583269E+00;
  COFETA[98] = -3.09681973E-01;
  COFETA[99] = 1.01347367E-02;
  COFETA[100] = -1.99265616E+01;
  COFETA[101] = 2.56014100E+00;
  COFETA[102] = -1.45913962E-01;
  COFETA[103] = 2.18129625E-03;
  COFETA[104] = -1.75766508E+01;
  COFETA[105] = 1.47718088E+00;
  COFETA[106] = 1.33842258E-02;
  COFETA[107] = -5.45446078E-03;
  COFETA[108] = -1.51262729E+01;
  COFETA[109] = 3.71381902E-01;
  COFETA[110] = 1.73700335E-01;
  COFETA[111] = -1.30510322E-02;
  COFETA[112] = -1.29964204E+01;
  COFETA[113] = -5.82992847E-01;
  COFETA[114] = 3.10614522E-01;
  COFETA[115] = -1.94724805E-02;
  COFETA[116] = -1.28241860E+01;
  COFETA[117] = -6.75983155E-01;
  COFETA[118] = 3.23857491E-01;
  COFETA[119] = -2.00893320E-02;
  COFETA[120] = -1.10600854E+01;
  COFETA[121] = -1.44434970E+00;
  COFETA[122] = 4.32898375E-01;
  COFETA[123] = -2.51531493E-02;
  COFETA[124] = -7.82458198E+00;
  COFETA[125] = -2.87790249E+00;
  COFETA[126] = 6.34514847E-01;
  COFETA[127] = -3.44344136E-02;
  COFETA[128] = -6.55009863E+00;
  COFETA[129] = -3.39070398E+00;
  COFETA[130] = 7.06046571E-01;
  COFETA[131] = -3.77010172E-02;
  COFETA[132] = -5.21188020E+00;
  COFETA[133] = -3.96972532E+00;
  COFETA[134] = 7.86375770E-01;
  COFETA[135] = -4.13504402E-02;
  COFETA[136] = -1.65695492E+01;
  COFETA[137] = 2.39056562E+00;
  COFETA[138] = -2.34558144E-01;
  COFETA[139] = 1.05024037E-02;
}

// Poly fits for the conductivities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFLAM(amrex::Real* COFLAM)
{
  COFLAM[0] = -9.35546056E+00;
  COFLAM[1] = 3.31628813E+00;
  COFLAM[2] = -1.07145282E-02;
  COFLAM[3] = -1.24086090E-02;
  COFLAM[4] = -8.57944636E-01;
  COFLAM[5] = 3.65436395E+00;
  COFLAM[6] = -3.98339635E-01;
  COFLAM[7] = 1.75883009E-02;
  COFLAM[8] = 1.69268564E+00;
  COFLAM[9] = 1.92606504E+00;
  COFLAM[10] = -1.73487476E-01;
  COFLAM[11] = 7.82572931E-03;
  COFLAM[12] = 1.50119775E+01;
  COFLAM[13] = -3.63267617E+00;
  COFLAM[14] = 5.92838774E-01;
  COFLAM[15] = -2.62920291E-02;
  COFLAM[16] = -1.12959874E+00;
  COFLAM[17] = 2.34014328E+00;
  COFLAM[18] = -1.63245076E-01;
  COFLAM[19] = 5.80319843E-03;
  COFLAM[20] = 9.24082480E+00;
  COFLAM[21] = -4.69567526E-01;
  COFLAM[22] = 1.15980102E-01;
  COFLAM[23] = -2.61033156E-03;
  COFLAM[24] = 2.33729836E+01;
  COFLAM[25] = -8.96536178E+00;
  COFLAM[26] = 1.52828630E+00;
  COFLAM[27] = -7.58551616E-02;
  COFLAM[28] = 8.84006318E-01;
  COFLAM[29] = 1.31525455E+00;
  COFLAM[30] = 1.91773906E-02;
  COFLAM[31] = -4.41642314E-03;
  COFLAM[32] = -1.93717634E+00;
  COFLAM[33] = 2.89110257E+00;
  COFLAM[34] = -2.71096988E-01;
  COFLAM[35] = 1.15344939E-02;
  COFLAM[36] = 1.39937895E+01;
  COFLAM[37] = -4.64256403E+00;
  COFLAM[38] = 9.07728510E-01;
  COFLAM[39] = -4.77274380E-02;
  COFLAM[40] = 1.33091614E+01;
  COFLAM[41] = -4.96140250E+00;
  COFLAM[42] = 1.03295495E+00;
  COFLAM[43] = -5.63420011E-02;
  COFLAM[44] = 5.39305623E+00;
  COFLAM[45] = -2.39312259E+00;
  COFLAM[46] = 7.39585006E-01;
  COFLAM[47] = -4.58435469E-02;
  COFLAM[48] = 1.18777275E+01;
  COFLAM[49] = -3.15463597E+00;
  COFLAM[50] = 6.01972754E-01;
  COFLAM[51] = -3.03211015E-02;
  COFLAM[52] = -1.13649201E+01;
  COFLAM[53] = 5.88177354E+00;
  COFLAM[54] = -5.68651792E-01;
  COFLAM[55] = 2.03561484E-02;
  COFLAM[56] = -7.70164041E+00;
  COFLAM[57] = 4.56884430E+00;
  COFLAM[58] = -4.04747578E-01;
  COFLAM[59] = 1.40841066E-02;
  COFLAM[60] = -1.46152767E+01;
  COFLAM[61] = 6.36251222E+00;
  COFLAM[62] = -5.03831917E-01;
  COFLAM[63] = 1.26120967E-02;
  COFLAM[64] = -1.09902158E+01;
  COFLAM[65] = 4.70647555E+00;
  COFLAM[66] = -2.52272322E-01;
  COFLAM[67] = 1.75186734E-04;
  COFLAM[68] = -6.27424897E+00;
  COFLAM[69] = 2.90471284E+00;
  COFLAM[70] = -4.35144336E-02;
  COFLAM[71] = -7.77922743E-03;
  COFLAM[72] = -2.14189910E+01;
  COFLAM[73] = 9.40840962E+00;
  COFLAM[74] = -9.66247319E-01;
  COFLAM[75] = 3.55085303E-02;
  COFLAM[76] = -1.70514626E+01;
  COFLAM[77] = 7.35906672E+00;
  COFLAM[78] = -6.52820712E-01;
  COFLAM[79] = 1.99982085E-02;
  COFLAM[80] = -1.81837054E+01;
  COFLAM[81] = 7.64582536E+00;
  COFLAM[82] = -6.80296906E-01;
  COFLAM[83] = 2.04082640E-02;
  COFLAM[84] = -1.65417594E+01;
  COFLAM[85] = 7.11744311E+00;
  COFLAM[86] = -6.16669095E-01;
  COFLAM[87] = 1.81367161E-02;
  COFLAM[88] = -1.45831859E+01;
  COFLAM[89] = 5.90742404E+00;
  COFLAM[90] = -3.94364795E-01;
  COFLAM[91] = 5.56233024E-03;
  COFLAM[92] = -3.46263100E+01;
  COFLAM[93] = 1.40704427E+01;
  COFLAM[94] = -1.51405261E+00;
  COFLAM[95] = 5.69632846E-02;
  COFLAM[96] = -1.86689184E+01;
  COFLAM[97] = 7.65011301E+00;
  COFLAM[98] = -6.46093077E-01;
  COFLAM[99] = 1.78356522E-02;
  COFLAM[100] = -1.75774950E+01;
  COFLAM[101] = 7.09949666E+00;
  COFLAM[102] = -5.61324023E-01;
  COFLAM[103] = 1.36473771E-02;
  COFLAM[104] = -1.64736860E+01;
  COFLAM[105] = 6.56030958E+00;
  COFLAM[106] = -4.79947764E-01;
  COFLAM[107] = 9.69177111E-03;
  COFLAM[108] = -1.49547457E+01;
  COFLAM[109] = 5.85879159E+00;
  COFLAM[110] = -3.77230053E-01;
  COFLAM[111] = 4.79861804E-03;
  COFLAM[112] = -1.37648703E+01;
  COFLAM[113] = 5.30662213E+00;
  COFLAM[114] = -2.96948912E-01;
  COFLAM[115] = 1.00864302E-03;
  COFLAM[116] = -1.20691352E+01;
  COFLAM[117] = 4.57988963E+00;
  COFLAM[118] = -1.94853890E-01;
  COFLAM[119] = -3.74099968E-03;
  COFLAM[120] = -1.25669867E+01;
  COFLAM[121] = 4.75862123E+00;
  COFLAM[122] = -2.18414353E-01;
  COFLAM[123] = -2.65674589E-03;
  COFLAM[124] = -1.05264352E+01;
  COFLAM[125] = 3.82519699E+00;
  COFLAM[126] = -8.57053164E-02;
  COFLAM[127] = -8.80477027E-03;
  COFLAM[128] = -1.09133608E+01;
  COFLAM[129] = 4.21990911E+00;
  COFLAM[130] = -1.87708496E-01;
  COFLAM[131] = -1.69129839E-03;
  COFLAM[132] = -6.84098916E+00;
  COFLAM[133] = 2.34795152E+00;
  COFLAM[134] = 8.90948044E-02;
  COFLAM[135] = -1.52021686E-02;
  COFLAM[136] = 1.29305954E+01;
  COFLAM[137] = -3.52816965E+00;
  COFLAM[138] = 6.45498434E-01;
  COFLAM[139] = -3.19375023E-02;
}

// Poly fits for the diffusion coefficients, dim NO*KK*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFD(amrex::Real* COFD)
{
  COFD[0] = -1.28665148E+01;
  COFD[1] = 1.40407102E-01;
  COFD[2] = 3.41555146E-01;
  COFD[3] = -2.03644864E-02;
  COFD[4] = -2.09727935E+01;
  COFD[5] = 5.49979971E+00;
  COFD[6] = -4.62000942E-01;
  COFD[7] = 1.85549745E-02;
  COFD[8] = -2.17906749E+01;
  COFD[9] = 5.43781703E+00;
  COFD[10] = -4.75415362E-01;
  COFD[11] = 1.99887429E-02;
  COFD[12] = -2.18185268E+01;
  COFD[13] = 5.43781703E+00;
  COFD[14] = -4.75415362E-01;
  COFD[15] = 1.99887429E-02;
  COFD[16] = -2.28852566E+01;
  COFD[17] = 5.60324057E+00;
  COFD[18] = -4.88278590E-01;
  COFD[19] = 2.02076422E-02;
  COFD[20] = -1.85196652E+01;
  COFD[21] = 4.68077396E+00;
  COFD[22] = -3.91229141E-01;
  COFD[23] = 1.69020200E-02;
  COFD[24] = -1.47122747E+01;
  COFD[25] = 1.67339458E+00;
  COFD[26] = 1.22536705E-01;
  COFD[27] = -1.01692680E-02;
  COFD[28] = -2.28978256E+01;
  COFD[29] = 5.60324057E+00;
  COFD[30] = -4.88278590E-01;
  COFD[31] = 2.02076422E-02;
  COFD[32] = -2.28722333E+01;
  COFD[33] = 5.60324057E+00;
  COFD[34] = -4.88278590E-01;
  COFD[35] = 2.02076422E-02;
  COFD[36] = -2.26337129E+01;
  COFD[37] = 5.50133264E+00;
  COFD[38] = -4.62484498E-01;
  COFD[39] = 1.85871217E-02;
  COFD[40] = -2.26491370E+01;
  COFD[41] = 5.50690143E+00;
  COFD[42] = -4.64003349E-01;
  COFD[43] = 1.86846584E-02;
  COFD[44] = -1.64683697E+01;
  COFD[45] = 2.28170571E+00;
  COFD[46] = 3.44078407E-02;
  COFD[47] = -6.01703889E-03;
  COFD[48] = -2.27747741E+01;
  COFD[49] = 5.60263382E+00;
  COFD[50] = -4.91348327E-01;
  COFD[51] = 2.04651120E-02;
  COFD[52] = -2.17131539E+01;
  COFD[53] = 4.69815223E+00;
  COFD[54] = -3.28454103E-01;
  COFD[55] = 1.15970636E-02;
  COFD[56] = -2.22067717E+01;
  COFD[57] = 5.03874797E+00;
  COFD[58] = -3.82440213E-01;
  COFD[59] = 1.43232015E-02;
  COFD[60] = -2.08912810E+01;
  COFD[61] = 4.35422933E+00;
  COFD[62] = -2.74727512E-01;
  COFD[63] = 8.91328380E-03;
  COFD[64] = -2.15101026E+01;
  COFD[65] = 4.62311744E+00;
  COFD[66] = -3.16576672E-01;
  COFD[67] = 1.09982058E-02;
  COFD[68] = -1.78379202E+01;
  COFD[69] = 2.81667592E+00;
  COFD[70] = -4.44112417E-02;
  COFD[71] = -2.24836515E-03;
  COFD[72] = -2.15057005E+01;
  COFD[73] = 4.49401210E+00;
  COFD[74] = -2.96300228E-01;
  COFD[75] = 9.98228772E-03;
  COFD[76] = -2.15154449E+01;
  COFD[77] = 4.49401210E+00;
  COFD[78] = -2.96300228E-01;
  COFD[79] = 9.98228772E-03;
  COFD[80] = -1.98610330E+01;
  COFD[81] = 3.61510430E+00;
  COFD[82] = -1.62429647E-01;
  COFD[83] = 3.41379096E-03;
  COFD[84] = -1.98544943E+01;
  COFD[85] = 3.61510430E+00;
  COFD[86] = -1.62429647E-01;
  COFD[87] = 3.41379096E-03;
  COFD[88] = -1.98613280E+01;
  COFD[89] = 3.61510430E+00;
  COFD[90] = -1.62429647E-01;
  COFD[91] = 3.41379096E-03;
  COFD[92] = -1.79641953E+01;
  COFD[93] = 2.68406243E+00;
  COFD[94] = -2.49058117E-02;
  COFD[95] = -3.18217796E-03;
  COFD[96] = -1.79693333E+01;
  COFD[97] = 2.68406243E+00;
  COFD[98] = -2.49058117E-02;
  COFD[99] = -3.18217796E-03;
  COFD[100] = -1.71023549E+01;
  COFD[101] = 2.22992608E+00;
  COFD[102] = 4.19679647E-02;
  COFD[103] = -6.37519657E-03;
  COFD[104] = -1.62450421E+01;
  COFD[105] = 1.79898308E+00;
  COFD[106] = 1.04422970E-01;
  COFD[107] = -9.31788260E-03;
  COFD[108] = -1.54004377E+01;
  COFD[109] = 1.38485345E+00;
  COFD[110] = 1.63989484E-01;
  COFD[111] = -1.21088577E-02;
  COFD[112] = -1.46746702E+01;
  COFD[113] = 1.02870676E+00;
  COFD[114] = 2.14984638E-01;
  COFD[115] = -1.44879090E-02;
  COFD[116] = -1.46203241E+01;
  COFD[117] = 9.94330848E-01;
  COFD[118] = 2.19902430E-01;
  COFD[119] = -1.47171735E-02;
  COFD[120] = -1.40460915E+01;
  COFD[121] = 7.18763378E-01;
  COFD[122] = 2.59237872E-01;
  COFD[123] = -1.65477278E-02;
  COFD[124] = -1.30635373E+01;
  COFD[125] = 2.26455242E-01;
  COFD[126] = 3.29362482E-01;
  COFD[127] = -1.98017964E-02;
  COFD[128] = -1.27059833E+01;
  COFD[129] = 4.81478906E-02;
  COFD[130] = 3.54630676E-01;
  COFD[131] = -2.09687597E-02;
  COFD[132] = -1.22701310E+01;
  COFD[133] = -1.61500371E-01;
  COFD[134] = 3.84217824E-01;
  COFD[135] = -2.23309656E-02;
  COFD[136] = -2.27628265E+01;
  COFD[137] = 5.60192583E+00;
  COFD[138] = -4.91455403E-01;
  COFD[139] = 2.04776556E-02;
  COFD[140] = -2.09727935E+01;
  COFD[141] = 5.49979971E+00;
  COFD[142] = -4.62000942E-01;
  COFD[143] = 1.85549745E-02;
  COFD[144] = -1.47968875E+01;
  COFD[145] = 4.23027636E+00;
  COFD[146] = -3.36139991E-01;
  COFD[147] = 1.46507621E-02;
  COFD[148] = -1.34230419E+01;
  COFD[149] = 3.48624238E+00;
  COFD[150] = -2.41554467E-01;
  COFD[151] = 1.06263545E-02;
  COFD[152] = -1.34248014E+01;
  COFD[153] = 3.48624238E+00;
  COFD[154] = -2.41554467E-01;
  COFD[155] = 1.06263545E-02;
  COFD[156] = -1.46554904E+01;
  COFD[157] = 3.83606243E+00;
  COFD[158] = -2.86076532E-01;
  COFD[159] = 1.25205829E-02;
  COFD[160] = -1.14366544E+01;
  COFD[161] = 2.78323501E+00;
  COFD[162] = -1.51214064E-01;
  COFD[163] = 6.75150012E-03;
  COFD[164] = -1.95739720E+01;
  COFD[165] = 5.61113230E+00;
  COFD[166] = -4.90190187E-01;
  COFD[167] = 2.03260675E-02;
  COFD[168] = -1.46559297E+01;
  COFD[169] = 3.83606243E+00;
  COFD[170] = -2.86076532E-01;
  COFD[171] = 1.25205829E-02;
  COFD[172] = -1.46550238E+01;
  COFD[173] = 3.83606243E+00;
  COFD[174] = -2.86076532E-01;
  COFD[175] = 1.25205829E-02;
  COFD[176] = -1.57995045E+01;
  COFD[177] = 4.22225052E+00;
  COFD[178] = -3.35156428E-01;
  COFD[179] = 1.46104855E-02;
  COFD[180] = -1.57199190E+01;
  COFD[181] = 4.19936335E+00;
  COFD[182] = -3.32311009E-01;
  COFD[183] = 1.44921003E-02;
  COFD[184] = -1.97550243E+01;
  COFD[185] = 5.56931926E+00;
  COFD[186] = -4.89105511E-01;
  COFD[187] = 2.04493129E-02;
  COFD[188] = -1.43151328E+01;
  COFD[189] = 3.68038508E+00;
  COFD[190] = -2.65779346E-01;
  COFD[191] = 1.16360771E-02;
  COFD[192] = -1.76147183E+01;
  COFD[193] = 4.86049500E+00;
  COFD[194] = -4.12200578E-01;
  COFD[195] = 1.77160971E-02;
  COFD[196] = -1.72232379E+01;
  COFD[197] = 4.69060745E+00;
  COFD[198] = -3.92369888E-01;
  COFD[199] = 1.69459661E-02;
  COFD[200] = -1.82252070E+01;
  COFD[201] = 5.05237312E+00;
  COFD[202] = -4.35182396E-01;
  COFD[203] = 1.86363074E-02;
  COFD[204] = -1.79345106E+01;
  COFD[205] = 4.91373893E+00;
  COFD[206] = -4.18747629E-01;
  COFD[207] = 1.79856610E-02;
  COFD[208] = -1.94691588E+01;
  COFD[209] = 5.43830787E+00;
  COFD[210] = -4.75472880E-01;
  COFD[211] = 1.99909996E-02;
  COFD[212] = -1.83539845E+01;
  COFD[213] = 4.98756925E+00;
  COFD[214] = -4.27526072E-01;
  COFD[215] = 1.83341755E-02;
  COFD[216] = -1.83542714E+01;
  COFD[217] = 4.98756925E+00;
  COFD[218] = -4.27526072E-01;
  COFD[219] = 1.83341755E-02;
  COFD[220] = -1.94091246E+01;
  COFD[221] = 5.32291505E+00;
  COFD[222] = -4.65883522E-01;
  COFD[223] = 1.97916109E-02;
  COFD[224] = -1.94089702E+01;
  COFD[225] = 5.32291505E+00;
  COFD[226] = -4.65883522E-01;
  COFD[227] = 1.97916109E-02;
  COFD[228] = -1.94091316E+01;
  COFD[229] = 5.32291505E+00;
  COFD[230] = -4.65883522E-01;
  COFD[231] = 1.97916109E-02;
  COFD[232] = -1.99878889E+01;
  COFD[233] = 5.47248098E+00;
  COFD[234] = -4.79290468E-01;
  COFD[235] = 2.01323903E-02;
  COFD[236] = -1.99879922E+01;
  COFD[237] = 5.47248098E+00;
  COFD[238] = -4.79290468E-01;
  COFD[239] = 2.01323903E-02;
  COFD[240] = -2.04125771E+01;
  COFD[241] = 5.57739710E+00;
  COFD[242] = -4.89778630E-01;
  COFD[243] = 2.04637924E-02;
  COFD[244] = -2.06420448E+01;
  COFD[245] = 5.61233640E+00;
  COFD[246] = -4.91245632E-01;
  COFD[247] = 2.04073252E-02;
  COFD[248] = -2.07168035E+01;
  COFD[249] = 5.58797624E+00;
  COFD[250] = -4.84623564E-01;
  COFD[251] = 1.99817352E-02;
  COFD[252] = -2.08359032E+01;
  COFD[253] = 5.58518783E+00;
  COFD[254] = -4.81282144E-01;
  COFD[255] = 1.97176495E-02;
  COFD[256] = -2.08746358E+01;
  COFD[257] = 5.58521622E+00;
  COFD[258] = -4.81014671E-01;
  COFD[259] = 1.96952964E-02;
  COFD[260] = -2.09388450E+01;
  COFD[261] = 5.57974996E+00;
  COFD[262] = -4.78112864E-01;
  COFD[263] = 1.94826410E-02;
  COFD[264] = -2.09750990E+01;
  COFD[265] = 5.50429364E+00;
  COFD[266] = -4.63372495E-01;
  COFD[267] = 1.86455814E-02;
  COFD[268] = -2.09816459E+01;
  COFD[269] = 5.49082104E+00;
  COFD[270] = -4.60014303E-01;
  COFD[271] = 1.84365627E-02;
  COFD[272] = -2.09649992E+01;
  COFD[273] = 5.45055984E+00;
  COFD[274] = -4.52626477E-01;
  COFD[275] = 1.80297457E-02;
  COFD[276] = -1.42894603E+01;
  COFD[277] = 3.67490723E+00;
  COFD[278] = -2.65114792E-01;
  COFD[279] = 1.16092671E-02;
  COFD[280] = -2.17906749E+01;
  COFD[281] = 5.43781703E+00;
  COFD[282] = -4.75415362E-01;
  COFD[283] = 1.99887429E-02;
  COFD[284] = -1.34230419E+01;
  COFD[285] = 3.48624238E+00;
  COFD[286] = -2.41554467E-01;
  COFD[287] = 1.06263545E-02;
  COFD[288] = -1.32093517E+01;
  COFD[289] = 2.90778936E+00;
  COFD[290] = -1.67388544E-01;
  COFD[291] = 7.45220609E-03;
  COFD[292] = -1.32243932E+01;
  COFD[293] = 2.90778936E+00;
  COFD[294] = -1.67388544E-01;
  COFD[295] = 7.45220609E-03;
  COFD[296] = -1.43190281E+01;
  COFD[297] = 3.17651319E+00;
  COFD[298] = -2.02028974E-01;
  COFD[299] = 8.94232502E-03;
  COFD[300] = -1.09595844E+01;
  COFD[301] = 2.30836460E+00;
  COFD[302] = -8.76339315E-02;
  COFD[303] = 3.90878445E-03;
  COFD[304] = -1.94093476E+01;
  COFD[305] = 5.16013126E+00;
  COFD[306] = -4.46824543E-01;
  COFD[307] = 1.90464887E-02;
  COFD[308] = -1.43238892E+01;
  COFD[309] = 3.17651319E+00;
  COFD[310] = -2.02028974E-01;
  COFD[311] = 8.94232502E-03;
  COFD[312] = -1.43139120E+01;
  COFD[313] = 3.17651319E+00;
  COFD[314] = -2.02028974E-01;
  COFD[315] = 8.94232502E-03;
  COFD[316] = -1.50766073E+01;
  COFD[317] = 3.47945612E+00;
  COFD[318] = -2.40703722E-01;
  COFD[319] = 1.05907441E-02;
  COFD[320] = -1.50270285E+01;
  COFD[321] = 3.46140064E+00;
  COFD[322] = -2.38440092E-01;
  COFD[323] = 1.04960087E-02;
  COFD[324] = -1.94373032E+01;
  COFD[325] = 5.02567894E+00;
  COFD[326] = -4.32045169E-01;
  COFD[327] = 1.85132214E-02;
  COFD[328] = -1.40998907E+01;
  COFD[329] = 3.08120012E+00;
  COFD[330] = -1.89629903E-01;
  COFD[331] = 8.40361952E-03;
  COFD[332] = -1.70534750E+01;
  COFD[333] = 4.14240922E+00;
  COFD[334] = -3.25239774E-01;
  COFD[335] = 1.41980687E-02;
  COFD[336] = -1.65488277E+01;
  COFD[337] = 3.95035840E+00;
  COFD[338] = -3.00959418E-01;
  COFD[339] = 1.31692593E-02;
  COFD[340] = -1.74792034E+01;
  COFD[341] = 4.29676909E+00;
  COFD[342] = -3.44085306E-01;
  COFD[343] = 1.49671135E-02;
  COFD[344] = -1.72556425E+01;
  COFD[345] = 4.17889917E+00;
  COFD[346] = -3.29752510E-01;
  COFD[347] = 1.43850275E-02;
  COFD[348] = -1.90915553E+01;
  COFD[349] = 4.84384483E+00;
  COFD[350] = -4.10265575E-01;
  COFD[351] = 1.76414287E-02;
  COFD[352] = -1.76774947E+01;
  COFD[353] = 4.24719726E+00;
  COFD[354] = -3.38206061E-01;
  COFD[355] = 1.47350654E-02;
  COFD[356] = -1.76808635E+01;
  COFD[357] = 4.24719726E+00;
  COFD[358] = -3.38206061E-01;
  COFD[359] = 1.47350654E-02;
  COFD[360] = -1.87877888E+01;
  COFD[361] = 4.61260432E+00;
  COFD[362] = -3.82854484E-01;
  COFD[363] = 1.65575163E-02;
  COFD[364] = -1.87858504E+01;
  COFD[365] = 4.61260432E+00;
  COFD[366] = -3.82854484E-01;
  COFD[367] = 1.65575163E-02;
  COFD[368] = -1.87878758E+01;
  COFD[369] = 4.61260432E+00;
  COFD[370] = -3.82854484E-01;
  COFD[371] = 1.65575163E-02;
  COFD[372] = -1.96267194E+01;
  COFD[373] = 4.88238340E+00;
  COFD[374] = -4.14880316E-01;
  COFD[375] = 1.78258928E-02;
  COFD[376] = -1.96280719E+01;
  COFD[377] = 4.88238340E+00;
  COFD[378] = -4.14880316E-01;
  COFD[379] = 1.78258928E-02;
  COFD[380] = -2.01678752E+01;
  COFD[381] = 5.04165097E+00;
  COFD[382] = -4.33913744E-01;
  COFD[383] = 1.85861246E-02;
  COFD[384] = -2.05574198E+01;
  COFD[385] = 5.14795860E+00;
  COFD[386] = -4.45935789E-01;
  COFD[387] = 1.90364341E-02;
  COFD[388] = -2.08840874E+01;
  COFD[389] = 5.23394577E+00;
  COFD[390] = -4.55294957E-01;
  COFD[391] = 1.93696950E-02;
  COFD[392] = -2.12416101E+01;
  COFD[393] = 5.33751161E+00;
  COFD[394] = -4.67531962E-01;
  COFD[395] = 1.98534391E-02;
  COFD[396] = -2.12927711E+01;
  COFD[397] = 5.34414631E+00;
  COFD[398] = -4.68238030E-01;
  COFD[399] = 1.98779007E-02;
  COFD[400] = -2.14367497E+01;
  COFD[401] = 5.37405372E+00;
  COFD[402] = -4.70540525E-01;
  COFD[403] = 1.99137160E-02;
  COFD[404] = -2.17411393E+01;
  COFD[405] = 5.41958585E+00;
  COFD[406] = -4.73477571E-01;
  COFD[407] = 1.99215358E-02;
  COFD[408] = -2.18770313E+01;
  COFD[409] = 5.46038651E+00;
  COFD[410] = -4.77939293E-01;
  COFD[411] = 2.00823652E-02;
  COFD[412] = -2.20665268E+01;
  COFD[413] = 5.51007247E+00;
  COFD[414] = -4.83411907E-01;
  COFD[415] = 2.02812924E-02;
  COFD[416] = -1.40756909E+01;
  COFD[417] = 3.07549274E+00;
  COFD[418] = -1.88889344E-01;
  COFD[419] = 8.37152866E-03;
  COFD[420] = -2.18185268E+01;
  COFD[421] = 5.43781703E+00;
  COFD[422] = -4.75415362E-01;
  COFD[423] = 1.99887429E-02;
  COFD[424] = -1.34248014E+01;
  COFD[425] = 3.48624238E+00;
  COFD[426] = -2.41554467E-01;
  COFD[427] = 1.06263545E-02;
  COFD[428] = -1.32243932E+01;
  COFD[429] = 2.90778936E+00;
  COFD[430] = -1.67388544E-01;
  COFD[431] = 7.45220609E-03;
  COFD[432] = -1.32399011E+01;
  COFD[433] = 2.90778936E+00;
  COFD[434] = -1.67388544E-01;
  COFD[435] = 7.45220609E-03;
  COFD[436] = -1.43393972E+01;
  COFD[437] = 3.17651319E+00;
  COFD[438] = -2.02028974E-01;
  COFD[439] = 8.94232502E-03;
  COFD[440] = -1.09629118E+01;
  COFD[441] = 2.30836460E+00;
  COFD[442] = -8.76339315E-02;
  COFD[443] = 3.90878445E-03;
  COFD[444] = -1.94252948E+01;
  COFD[445] = 5.16013126E+00;
  COFD[446] = -4.46824543E-01;
  COFD[447] = 1.90464887E-02;
  COFD[448] = -1.43444614E+01;
  COFD[449] = 3.17651319E+00;
  COFD[450] = -2.02028974E-01;
  COFD[451] = 8.94232502E-03;
  COFD[452] = -1.43340695E+01;
  COFD[453] = 3.17651319E+00;
  COFD[454] = -2.02028974E-01;
  COFD[455] = 8.94232502E-03;
  COFD[456] = -1.50911746E+01;
  COFD[457] = 3.47945612E+00;
  COFD[458] = -2.40703722E-01;
  COFD[459] = 1.05907441E-02;
  COFD[460] = -1.50420909E+01;
  COFD[461] = 3.46140064E+00;
  COFD[462] = -2.38440092E-01;
  COFD[463] = 1.04960087E-02;
  COFD[464] = -1.94570202E+01;
  COFD[465] = 5.02567894E+00;
  COFD[466] = -4.32045169E-01;
  COFD[467] = 1.85132214E-02;
  COFD[468] = -1.41191170E+01;
  COFD[469] = 3.08120012E+00;
  COFD[470] = -1.89629903E-01;
  COFD[471] = 8.40361952E-03;
  COFD[472] = -1.70756953E+01;
  COFD[473] = 4.14240922E+00;
  COFD[474] = -3.25239774E-01;
  COFD[475] = 1.41980687E-02;
  COFD[476] = -1.65675292E+01;
  COFD[477] = 3.95035840E+00;
  COFD[478] = -3.00959418E-01;
  COFD[479] = 1.31692593E-02;
  COFD[480] = -1.74984410E+01;
  COFD[481] = 4.29676909E+00;
  COFD[482] = -3.44085306E-01;
  COFD[483] = 1.49671135E-02;
  COFD[484] = -1.72753698E+01;
  COFD[485] = 4.17889917E+00;
  COFD[486] = -3.29752510E-01;
  COFD[487] = 1.43850275E-02;
  COFD[488] = -1.91136407E+01;
  COFD[489] = 4.84384483E+00;
  COFD[490] = -4.10265575E-01;
  COFD[491] = 1.76414287E-02;
  COFD[492] = -1.76992903E+01;
  COFD[493] = 4.24719726E+00;
  COFD[494] = -3.38206061E-01;
  COFD[495] = 1.47350654E-02;
  COFD[496] = -1.77028097E+01;
  COFD[497] = 4.24719726E+00;
  COFD[498] = -3.38206061E-01;
  COFD[499] = 1.47350654E-02;
  COFD[500] = -1.88113928E+01;
  COFD[501] = 4.61260432E+00;
  COFD[502] = -3.82854484E-01;
  COFD[503] = 1.65575163E-02;
  COFD[504] = -1.88093609E+01;
  COFD[505] = 4.61260432E+00;
  COFD[506] = -3.82854484E-01;
  COFD[507] = 1.65575163E-02;
  COFD[508] = -1.88114840E+01;
  COFD[509] = 4.61260432E+00;
  COFD[510] = -3.82854484E-01;
  COFD[511] = 1.65575163E-02;
  COFD[512] = -1.96513830E+01;
  COFD[513] = 4.88238340E+00;
  COFD[514] = -4.14880316E-01;
  COFD[515] = 1.78258928E-02;
  COFD[516] = -1.96528039E+01;
  COFD[517] = 4.88238340E+00;
  COFD[518] = -4.14880316E-01;
  COFD[519] = 1.78258928E-02;
  COFD[520] = -2.01934178E+01;
  COFD[521] = 5.04165097E+00;
  COFD[522] = -4.33913744E-01;
  COFD[523] = 1.85861246E-02;
  COFD[524] = -2.05835748E+01;
  COFD[525] = 5.14795860E+00;
  COFD[526] = -4.45935789E-01;
  COFD[527] = 1.90364341E-02;
  COFD[528] = -2.09107212E+01;
  COFD[529] = 5.23394577E+00;
  COFD[530] = -4.55294957E-01;
  COFD[531] = 1.93696950E-02;
  COFD[532] = -2.12686288E+01;
  COFD[533] = 5.33751161E+00;
  COFD[534] = -4.67531962E-01;
  COFD[535] = 1.98534391E-02;
  COFD[536] = -2.13198145E+01;
  COFD[537] = 5.34414631E+00;
  COFD[538] = -4.68238030E-01;
  COFD[539] = 1.98779007E-02;
  COFD[540] = -2.14640843E+01;
  COFD[541] = 5.37405372E+00;
  COFD[542] = -4.70540525E-01;
  COFD[543] = 1.99137160E-02;
  COFD[544] = -2.17689618E+01;
  COFD[545] = 5.41958585E+00;
  COFD[546] = -4.73477571E-01;
  COFD[547] = 1.99215358E-02;
  COFD[548] = -2.19052670E+01;
  COFD[549] = 5.46038651E+00;
  COFD[550] = -4.77939293E-01;
  COFD[551] = 2.00823652E-02;
  COFD[552] = -2.20949114E+01;
  COFD[553] = 5.51007247E+00;
  COFD[554] = -4.83411907E-01;
  COFD[555] = 2.02812924E-02;
  COFD[556] = -1.40949183E+01;
  COFD[557] = 3.07549274E+00;
  COFD[558] = -1.88889344E-01;
  COFD[559] = 8.37152866E-03;
  COFD[560] = -2.28852566E+01;
  COFD[561] = 5.60324057E+00;
  COFD[562] = -4.88278590E-01;
  COFD[563] = 2.02076422E-02;
  COFD[564] = -1.46554904E+01;
  COFD[565] = 3.83606243E+00;
  COFD[566] = -2.86076532E-01;
  COFD[567] = 1.25205829E-02;
  COFD[568] = -1.43190281E+01;
  COFD[569] = 3.17651319E+00;
  COFD[570] = -2.02028974E-01;
  COFD[571] = 8.94232502E-03;
  COFD[572] = -1.43393972E+01;
  COFD[573] = 3.17651319E+00;
  COFD[574] = -2.02028974E-01;
  COFD[575] = 8.94232502E-03;
  COFD[576] = -1.55666313E+01;
  COFD[577] = 3.48070094E+00;
  COFD[578] = -2.40859499E-01;
  COFD[579] = 1.05972514E-02;
  COFD[580] = -1.18998160E+01;
  COFD[581] = 2.57507000E+00;
  COFD[582] = -1.24033737E-01;
  COFD[583] = 5.56694959E-03;
  COFD[584] = -2.06463656E+01;
  COFD[585] = 5.41688482E+00;
  COFD[586] = -4.73387188E-01;
  COFD[587] = 1.99280175E-02;
  COFD[588] = -1.55740954E+01;
  COFD[589] = 3.48070094E+00;
  COFD[590] = -2.40859499E-01;
  COFD[591] = 1.05972514E-02;
  COFD[592] = -1.55588172E+01;
  COFD[593] = 3.48070094E+00;
  COFD[594] = -2.40859499E-01;
  COFD[595] = 1.05972514E-02;
  COFD[596] = -1.63542358E+01;
  COFD[597] = 3.82388595E+00;
  COFD[598] = -2.84480724E-01;
  COFD[599] = 1.24506311E-02;
  COFD[600] = -1.62775683E+01;
  COFD[601] = 3.79163564E+00;
  COFD[602] = -2.80257365E-01;
  COFD[603] = 1.22656902E-02;
  COFD[604] = -2.08367641E+01;
  COFD[605] = 5.35267674E+00;
  COFD[606] = -4.69010505E-01;
  COFD[607] = 1.98979152E-02;
  COFD[608] = -1.52792799E+01;
  COFD[609] = 3.36790500E+00;
  COFD[610] = -2.26321740E-01;
  COFD[611] = 9.97135055E-03;
  COFD[612] = -1.84777509E+01;
  COFD[613] = 4.49330851E+00;
  COFD[614] = -3.68208715E-01;
  COFD[615] = 1.59565402E-02;
  COFD[616] = -1.78903850E+01;
  COFD[617] = 4.29613154E+00;
  COFD[618] = -3.44012526E-01;
  COFD[619] = 1.49643715E-02;
  COFD[620] = -1.89616566E+01;
  COFD[621] = 4.68595732E+00;
  COFD[622] = -3.91842840E-01;
  COFD[623] = 1.69262542E-02;
  COFD[624] = -1.86499019E+01;
  COFD[625] = 4.53572533E+00;
  COFD[626] = -3.73386925E-01;
  COFD[627] = 1.61678881E-02;
  COFD[628] = -2.05324009E+01;
  COFD[629] = 5.18417470E+00;
  COFD[630] = -4.49491573E-01;
  COFD[631] = 1.91438508E-02;
  COFD[632] = -1.91208247E+01;
  COFD[633] = 4.61801405E+00;
  COFD[634] = -3.83535652E-01;
  COFD[635] = 1.65862513E-02;
  COFD[636] = -1.91261897E+01;
  COFD[637] = 4.61801405E+00;
  COFD[638] = -3.83535652E-01;
  COFD[639] = 1.65862513E-02;
  COFD[640] = -2.02564700E+01;
  COFD[641] = 4.97613338E+00;
  COFD[642] = -4.26175206E-01;
  COFD[643] = 1.82809270E-02;
  COFD[644] = -2.02532389E+01;
  COFD[645] = 4.97613338E+00;
  COFD[646] = -4.26175206E-01;
  COFD[647] = 1.82809270E-02;
  COFD[648] = -2.02566153E+01;
  COFD[649] = 4.97613338E+00;
  COFD[650] = -4.26175206E-01;
  COFD[651] = 1.82809270E-02;
  COFD[652] = -2.10673190E+01;
  COFD[653] = 5.22065615E+00;
  COFD[654] = -4.53751850E-01;
  COFD[655] = 1.93099506E-02;
  COFD[656] = -2.10696468E+01;
  COFD[657] = 5.22065615E+00;
  COFD[658] = -4.53751850E-01;
  COFD[659] = 1.93099506E-02;
  COFD[660] = -2.15776504E+01;
  COFD[661] = 5.35995365E+00;
  COFD[662] = -4.69587823E-01;
  COFD[663] = 1.99080702E-02;
  COFD[664] = -2.18432468E+01;
  COFD[665] = 5.40768793E+00;
  COFD[666] = -4.72942538E-01;
  COFD[667] = 1.99389038E-02;
  COFD[668] = -2.21426228E+01;
  COFD[669] = 5.47842731E+00;
  COFD[670] = -4.79952894E-01;
  COFD[671] = 2.01568406E-02;
  COFD[672] = -2.24428055E+01;
  COFD[673] = 5.55319328E+00;
  COFD[674] = -4.87759313E-01;
  COFD[675] = 2.04205124E-02;
  COFD[676] = -2.24883897E+01;
  COFD[677] = 5.55793029E+00;
  COFD[678] = -4.88170533E-01;
  COFD[679] = 2.04302911E-02;
  COFD[680] = -2.26547956E+01;
  COFD[681] = 5.59528609E+00;
  COFD[682] = -4.91473190E-01;
  COFD[683] = 2.05131236E-02;
  COFD[684] = -2.28924392E+01;
  COFD[685] = 5.61013561E+00;
  COFD[686] = -4.89933558E-01;
  COFD[687] = 2.03098561E-02;
  COFD[688] = -2.29058182E+01;
  COFD[689] = 5.59504443E+00;
  COFD[690] = -4.86415566E-01;
  COFD[691] = 2.00947399E-02;
  COFD[692] = -2.29515207E+01;
  COFD[693] = 5.58219321E+00;
  COFD[694] = -4.82941269E-01;
  COFD[695] = 1.98711890E-02;
  COFD[696] = -1.52486292E+01;
  COFD[697] = 3.35922578E+00;
  COFD[698] = -2.25181399E-01;
  COFD[699] = 9.92132878E-03;
  COFD[700] = -1.85196652E+01;
  COFD[701] = 4.68077396E+00;
  COFD[702] = -3.91229141E-01;
  COFD[703] = 1.69020200E-02;
  COFD[704] = -1.14366544E+01;
  COFD[705] = 2.78323501E+00;
  COFD[706] = -1.51214064E-01;
  COFD[707] = 6.75150012E-03;
  COFD[708] = -1.09595844E+01;
  COFD[709] = 2.30836460E+00;
  COFD[710] = -8.76339315E-02;
  COFD[711] = 3.90878445E-03;
  COFD[712] = -1.09629118E+01;
  COFD[713] = 2.30836460E+00;
  COFD[714] = -8.76339315E-02;
  COFD[715] = 3.90878445E-03;
  COFD[716] = -1.18998160E+01;
  COFD[717] = 2.57507000E+00;
  COFD[718] = -1.24033737E-01;
  COFD[719] = 5.56694959E-03;
  COFD[720] = -1.03270769E+01;
  COFD[721] = 2.19285409E+00;
  COFD[722] = -7.54492786E-02;
  COFD[723] = 3.51398213E-03;
  COFD[724] = -1.71983144E+01;
  COFD[725] = 4.63881440E+00;
  COFD[726] = -3.86139677E-01;
  COFD[727] = 1.66955099E-02;
  COFD[728] = -1.19006697E+01;
  COFD[729] = 2.57507000E+00;
  COFD[730] = -1.24033737E-01;
  COFD[731] = 5.56694959E-03;
  COFD[732] = -1.18989101E+01;
  COFD[733] = 2.57507000E+00;
  COFD[734] = -1.24033737E-01;
  COFD[735] = 5.56694959E-03;
  COFD[736] = -1.25141403E+01;
  COFD[737] = 2.77873601E+00;
  COFD[738] = -1.50637360E-01;
  COFD[739] = 6.72684281E-03;
  COFD[740] = -1.24693714E+01;
  COFD[741] = 2.76686648E+00;
  COFD[742] = -1.49120141E-01;
  COFD[743] = 6.66220432E-03;
  COFD[744] = -1.60528433E+01;
  COFD[745] = 4.11188603E+00;
  COFD[746] = -3.21540884E-01;
  COFD[747] = 1.40482564E-02;
  COFD[748] = -1.17159884E+01;
  COFD[749] = 2.48123210E+00;
  COFD[750] = -1.11322604E-01;
  COFD[751] = 4.99282389E-03;
  COFD[752] = -1.37794466E+01;
  COFD[753] = 3.23973858E+00;
  COFD[754] = -2.09989036E-01;
  COFD[755] = 9.27667906E-03;
  COFD[756] = -1.34709956E+01;
  COFD[757] = 3.09379603E+00;
  COFD[758] = -1.91268635E-01;
  COFD[759] = 8.47480224E-03;
  COFD[760] = -1.42229344E+01;
  COFD[761] = 3.38669384E+00;
  COFD[762] = -2.28784122E-01;
  COFD[763] = 1.00790953E-02;
  COFD[764] = -1.39924933E+01;
  COFD[765] = 3.26384506E+00;
  COFD[766] = -2.12947087E-01;
  COFD[767] = 9.39743888E-03;
  COFD[768] = -1.57040365E+01;
  COFD[769] = 3.93614244E+00;
  COFD[770] = -2.99111497E-01;
  COFD[771] = 1.30888229E-02;
  COFD[772] = -1.43129867E+01;
  COFD[773] = 3.31177824E+00;
  COFD[774] = -2.18945280E-01;
  COFD[775] = 9.64764419E-03;
  COFD[776] = -1.43135474E+01;
  COFD[777] = 3.31177824E+00;
  COFD[778] = -2.18945280E-01;
  COFD[779] = 9.64764419E-03;
  COFD[780] = -1.52614209E+01;
  COFD[781] = 3.64565939E+00;
  COFD[782] = -2.61726871E-01;
  COFD[783] = 1.14799244E-02;
  COFD[784] = -1.52611173E+01;
  COFD[785] = 3.64565939E+00;
  COFD[786] = -2.61726871E-01;
  COFD[787] = 1.14799244E-02;
  COFD[788] = -1.52614345E+01;
  COFD[789] = 3.64565939E+00;
  COFD[790] = -2.61726871E-01;
  COFD[791] = 1.14799244E-02;
  COFD[792] = -1.61866111E+01;
  COFD[793] = 3.97811734E+00;
  COFD[794] = -3.04543772E-01;
  COFD[795] = 1.33243270E-02;
  COFD[796] = -1.61868148E+01;
  COFD[797] = 3.97811734E+00;
  COFD[798] = -3.04543772E-01;
  COFD[799] = 1.33243270E-02;
  COFD[800] = -1.66550985E+01;
  COFD[801] = 4.12489968E+00;
  COFD[802] = -3.23119338E-01;
  COFD[803] = 1.41122711E-02;
  COFD[804] = -1.70329250E+01;
  COFD[805] = 4.23969256E+00;
  COFD[806] = -3.37288904E-01;
  COFD[807] = 1.46975974E-02;
  COFD[808] = -1.73560950E+01;
  COFD[809] = 4.33584314E+00;
  COFD[810] = -3.48938603E-01;
  COFD[811] = 1.51686902E-02;
  COFD[812] = -1.76841386E+01;
  COFD[813] = 4.43623609E+00;
  COFD[814] = -3.61391880E-01;
  COFD[815] = 1.56853368E-02;
  COFD[816] = -1.77370430E+01;
  COFD[817] = 4.44459213E+00;
  COFD[818] = -3.62399607E-01;
  COFD[819] = 1.57258496E-02;
  COFD[820] = -1.79421312E+01;
  COFD[821] = 4.50796148E+00;
  COFD[822] = -3.69986604E-01;
  COFD[823] = 1.60286525E-02;
  COFD[824] = -1.84634396E+01;
  COFD[825] = 4.65797225E+00;
  COFD[826] = -3.88483952E-01;
  COFD[827] = 1.67915384E-02;
  COFD[828] = -1.85877757E+01;
  COFD[829] = 4.69975029E+00;
  COFD[830] = -3.93412211E-01;
  COFD[831] = 1.69852534E-02;
  COFD[832] = -1.87542772E+01;
  COFD[833] = 4.74513688E+00;
  COFD[834] = -3.98725524E-01;
  COFD[835] = 1.71922391E-02;
  COFD[836] = -1.16906458E+01;
  COFD[837] = 2.47469981E+00;
  COFD[838] = -1.10436257E-01;
  COFD[839] = 4.95273813E-03;
  COFD[840] = -1.47122747E+01;
  COFD[841] = 1.67339458E+00;
  COFD[842] = 1.22536705E-01;
  COFD[843] = -1.01692680E-02;
  COFD[844] = -1.95739720E+01;
  COFD[845] = 5.61113230E+00;
  COFD[846] = -4.90190187E-01;
  COFD[847] = 2.03260675E-02;
  COFD[848] = -1.94093476E+01;
  COFD[849] = 5.16013126E+00;
  COFD[850] = -4.46824543E-01;
  COFD[851] = 1.90464887E-02;
  COFD[852] = -1.94252948E+01;
  COFD[853] = 5.16013126E+00;
  COFD[854] = -4.46824543E-01;
  COFD[855] = 1.90464887E-02;
  COFD[856] = -2.06463656E+01;
  COFD[857] = 5.41688482E+00;
  COFD[858] = -4.73387188E-01;
  COFD[859] = 1.99280175E-02;
  COFD[860] = -1.71983144E+01;
  COFD[861] = 4.63881440E+00;
  COFD[862] = -3.86139677E-01;
  COFD[863] = 1.66955099E-02;
  COFD[864] = -1.19157788E+01;
  COFD[865] = 9.28952533E-01;
  COFD[866] = 2.42107483E-01;
  COFD[867] = -1.59824150E-02;
  COFD[868] = -2.06516251E+01;
  COFD[869] = 5.41688482E+00;
  COFD[870] = -4.73387188E-01;
  COFD[871] = 1.99280175E-02;
  COFD[872] = -2.12652444E+01;
  COFD[873] = 5.59961822E+00;
  COFD[874] = -4.91624856E-01;
  COFD[875] = 2.05035546E-02;
  COFD[876] = -2.12831283E+01;
  COFD[877] = 5.61184117E+00;
  COFD[878] = -4.90532156E-01;
  COFD[879] = 2.03507922E-02;
  COFD[880] = -2.14087360E+01;
  COFD[881] = 5.57281993E+00;
  COFD[882] = -4.76690860E-01;
  COFD[883] = 1.94000702E-02;
  COFD[884] = -1.77563175E+01;
  COFD[885] = 3.57475686E+00;
  COFD[886] = -1.56396297E-01;
  COFD[887] = 3.12157721E-03;
  COFD[888] = -2.11388255E+01;
  COFD[889] = 5.55529689E+00;
  COFD[890] = -4.87942530E-01;
  COFD[891] = 2.04249057E-02;
  COFD[892] = -2.07653629E+01;
  COFD[893] = 5.01091988E+00;
  COFD[894] = -3.77985581E-01;
  COFD[895] = 1.40968617E-02;
  COFD[896] = -2.15095920E+01;
  COFD[897] = 5.46737673E+00;
  COFD[898] = -4.55696085E-01;
  COFD[899] = 1.81982625E-02;
  COFD[900] = -2.08812277E+01;
  COFD[901] = 5.08859217E+00;
  COFD[902] = -3.90525428E-01;
  COFD[903] = 1.47376395E-02;
  COFD[904] = -2.12661812E+01;
  COFD[905] = 5.24930667E+00;
  COFD[906] = -4.17435088E-01;
  COFD[907] = 1.61434424E-02;
  COFD[908] = -1.87419126E+01;
  COFD[909] = 3.96926341E+00;
  COFD[910] = -2.16412264E-01;
  COFD[911] = 6.06012078E-03;
  COFD[912] = -2.13847376E+01;
  COFD[913] = 5.17440955E+00;
  COFD[914] = -4.04678430E-01;
  COFD[915] = 1.54706350E-02;
  COFD[916] = -2.13884026E+01;
  COFD[917] = 5.17440955E+00;
  COFD[918] = -4.04678430E-01;
  COFD[919] = 1.54706350E-02;
  COFD[920] = -2.03436817E+01;
  COFD[921] = 4.57152878E+00;
  COFD[922] = -3.08371263E-01;
  COFD[923] = 1.05838559E-02;
  COFD[924] = -2.03415589E+01;
  COFD[925] = 4.57152878E+00;
  COFD[926] = -3.08371263E-01;
  COFD[927] = 1.05838559E-02;
  COFD[928] = -2.03437771E+01;
  COFD[929] = 4.57152878E+00;
  COFD[930] = -3.08371263E-01;
  COFD[931] = 1.05838559E-02;
  COFD[932] = -1.90109309E+01;
  COFD[933] = 3.88639599E+00;
  COFD[934] = -2.03781856E-01;
  COFD[935] = 5.44050761E-03;
  COFD[936] = -1.90124187E+01;
  COFD[937] = 3.88639599E+00;
  COFD[938] = -2.03781856E-01;
  COFD[939] = 5.44050761E-03;
  COFD[940] = -1.83523817E+01;
  COFD[941] = 3.52256138E+00;
  COFD[942] = -1.48611326E-01;
  COFD[943] = 2.74505262E-03;
  COFD[944] = -1.76500812E+01;
  COFD[945] = 3.15831209E+00;
  COFD[946] = -9.45393054E-02;
  COFD[947] = 1.45090308E-04;
  COFD[948] = -1.68531525E+01;
  COFD[949] = 2.76314344E+00;
  COFD[950] = -3.65464735E-02;
  COFD[951] = -2.62462500E-03;
  COFD[952] = -1.62777166E+01;
  COFD[953] = 2.46665777E+00;
  COFD[954] = 7.25684399E-03;
  COFD[955] = -4.72424494E-03;
  COFD[956] = -1.62527662E+01;
  COFD[957] = 2.44062989E+00;
  COFD[958] = 1.10981222E-02;
  COFD[959] = -4.90788998E-03;
  COFD[960] = -1.58057803E+01;
  COFD[961] = 2.22000952E+00;
  COFD[962] = 4.34143206E-02;
  COFD[963] = -6.44371681E-03;
  COFD[964] = -1.49248327E+01;
  COFD[965] = 1.76546946E+00;
  COFD[966] = 1.09258240E-01;
  COFD[967] = -9.54522038E-03;
  COFD[968] = -1.45392396E+01;
  COFD[969] = 1.58706272E+00;
  COFD[970] = 1.34937972E-01;
  COFD[971] = -1.07491300E-02;
  COFD[972] = -1.41324917E+01;
  COFD[973] = 1.38727136E+00;
  COFD[974] = 1.63642976E-01;
  COFD[975] = -1.20926895E-02;
  COFD[976] = -2.10643264E+01;
  COFD[977] = 5.53614864E+00;
  COFD[978] = -4.86046753E-01;
  COFD[979] = 2.03659193E-02;
  COFD[980] = -2.28978256E+01;
  COFD[981] = 5.60324057E+00;
  COFD[982] = -4.88278590E-01;
  COFD[983] = 2.02076422E-02;
  COFD[984] = -1.46559297E+01;
  COFD[985] = 3.83606243E+00;
  COFD[986] = -2.86076532E-01;
  COFD[987] = 1.25205829E-02;
  COFD[988] = -1.43238892E+01;
  COFD[989] = 3.17651319E+00;
  COFD[990] = -2.02028974E-01;
  COFD[991] = 8.94232502E-03;
  COFD[992] = -1.43444614E+01;
  COFD[993] = 3.17651319E+00;
  COFD[994] = -2.02028974E-01;
  COFD[995] = 8.94232502E-03;
  COFD[996] = -1.55740954E+01;
  COFD[997] = 3.48070094E+00;
  COFD[998] = -2.40859499E-01;
  COFD[999] = 1.05972514E-02;
  COFD[1000] = -1.19006697E+01;
  COFD[1001] = 2.57507000E+00;
  COFD[1002] = -1.24033737E-01;
  COFD[1003] = 5.56694959E-03;
  COFD[1004] = -2.06516251E+01;
  COFD[1005] = 5.41688482E+00;
  COFD[1006] = -4.73387188E-01;
  COFD[1007] = 1.99280175E-02;
  COFD[1008] = -1.55816727E+01;
  COFD[1009] = 3.48070094E+00;
  COFD[1010] = -2.40859499E-01;
  COFD[1011] = 1.05972514E-02;
  COFD[1012] = -1.55661647E+01;
  COFD[1013] = 3.48070094E+00;
  COFD[1014] = -2.40859499E-01;
  COFD[1015] = 1.05972514E-02;
  COFD[1016] = -1.63588948E+01;
  COFD[1017] = 3.82388595E+00;
  COFD[1018] = -2.84480724E-01;
  COFD[1019] = 1.24506311E-02;
  COFD[1020] = -1.62824385E+01;
  COFD[1021] = 3.79163564E+00;
  COFD[1022] = -2.80257365E-01;
  COFD[1023] = 1.22656902E-02;
  COFD[1024] = -2.08438728E+01;
  COFD[1025] = 5.35267674E+00;
  COFD[1026] = -4.69010505E-01;
  COFD[1027] = 1.98979152E-02;
  COFD[1028] = -1.52861287E+01;
  COFD[1029] = 3.36790500E+00;
  COFD[1030] = -2.26321740E-01;
  COFD[1031] = 9.97135055E-03;
  COFD[1032] = -1.84862906E+01;
  COFD[1033] = 4.49330851E+00;
  COFD[1034] = -3.68208715E-01;
  COFD[1035] = 1.59565402E-02;
  COFD[1036] = -1.78969625E+01;
  COFD[1037] = 4.29613154E+00;
  COFD[1038] = -3.44012526E-01;
  COFD[1039] = 1.49643715E-02;
  COFD[1040] = -1.89685112E+01;
  COFD[1041] = 4.68595732E+00;
  COFD[1042] = -3.91842840E-01;
  COFD[1043] = 1.69262542E-02;
  COFD[1044] = -1.86570161E+01;
  COFD[1045] = 4.53572533E+00;
  COFD[1046] = -3.73386925E-01;
  COFD[1047] = 1.61678881E-02;
  COFD[1048] = -2.05408587E+01;
  COFD[1049] = 5.18417470E+00;
  COFD[1050] = -4.49491573E-01;
  COFD[1051] = 1.91438508E-02;
  COFD[1052] = -1.91291085E+01;
  COFD[1053] = 4.61801405E+00;
  COFD[1054] = -3.83535652E-01;
  COFD[1055] = 1.65862513E-02;
  COFD[1056] = -1.91345636E+01;
  COFD[1057] = 4.61801405E+00;
  COFD[1058] = -3.83535652E-01;
  COFD[1059] = 1.65862513E-02;
  COFD[1060] = -2.02658847E+01;
  COFD[1061] = 4.97613338E+00;
  COFD[1062] = -4.26175206E-01;
  COFD[1063] = 1.82809270E-02;
  COFD[1064] = -2.02625924E+01;
  COFD[1065] = 4.97613338E+00;
  COFD[1066] = -4.26175206E-01;
  COFD[1067] = 1.82809270E-02;
  COFD[1068] = -2.02660328E+01;
  COFD[1069] = 4.97613338E+00;
  COFD[1070] = -4.26175206E-01;
  COFD[1071] = 1.82809270E-02;
  COFD[1072] = -2.10774499E+01;
  COFD[1073] = 5.22065615E+00;
  COFD[1074] = -4.53751850E-01;
  COFD[1075] = 1.93099506E-02;
  COFD[1076] = -2.10798254E+01;
  COFD[1077] = 5.22065615E+00;
  COFD[1078] = -4.53751850E-01;
  COFD[1079] = 1.93099506E-02;
  COFD[1080] = -2.15884087E+01;
  COFD[1081] = 5.35995365E+00;
  COFD[1082] = -4.69587823E-01;
  COFD[1083] = 1.99080702E-02;
  COFD[1084] = -2.18544613E+01;
  COFD[1085] = 5.40768793E+00;
  COFD[1086] = -4.72942538E-01;
  COFD[1087] = 1.99389038E-02;
  COFD[1088] = -2.21542057E+01;
  COFD[1089] = 5.47842731E+00;
  COFD[1090] = -4.79952894E-01;
  COFD[1091] = 2.01568406E-02;
  COFD[1092] = -2.24546921E+01;
  COFD[1093] = 5.55319328E+00;
  COFD[1094] = -4.87759313E-01;
  COFD[1095] = 2.04205124E-02;
  COFD[1096] = -2.25002960E+01;
  COFD[1097] = 5.55793029E+00;
  COFD[1098] = -4.88170533E-01;
  COFD[1099] = 2.04302911E-02;
  COFD[1100] = -2.26669368E+01;
  COFD[1101] = 5.59528609E+00;
  COFD[1102] = -4.91473190E-01;
  COFD[1103] = 2.05131236E-02;
  COFD[1104] = -2.29049835E+01;
  COFD[1105] = 5.61013561E+00;
  COFD[1106] = -4.89933558E-01;
  COFD[1107] = 2.03098561E-02;
  COFD[1108] = -2.29187135E+01;
  COFD[1109] = 5.59504443E+00;
  COFD[1110] = -4.86415566E-01;
  COFD[1111] = 2.00947399E-02;
  COFD[1112] = -2.29645447E+01;
  COFD[1113] = 5.58219321E+00;
  COFD[1114] = -4.82941269E-01;
  COFD[1115] = 1.98711890E-02;
  COFD[1116] = -1.52554785E+01;
  COFD[1117] = 3.35922578E+00;
  COFD[1118] = -2.25181399E-01;
  COFD[1119] = 9.92132878E-03;
  COFD[1120] = -2.28722333E+01;
  COFD[1121] = 5.60324057E+00;
  COFD[1122] = -4.88278590E-01;
  COFD[1123] = 2.02076422E-02;
  COFD[1124] = -1.46550238E+01;
  COFD[1125] = 3.83606243E+00;
  COFD[1126] = -2.86076532E-01;
  COFD[1127] = 1.25205829E-02;
  COFD[1128] = -1.43139120E+01;
  COFD[1129] = 3.17651319E+00;
  COFD[1130] = -2.02028974E-01;
  COFD[1131] = 8.94232502E-03;
  COFD[1132] = -1.43340695E+01;
  COFD[1133] = 3.17651319E+00;
  COFD[1134] = -2.02028974E-01;
  COFD[1135] = 8.94232502E-03;
  COFD[1136] = -1.55588172E+01;
  COFD[1137] = 3.48070094E+00;
  COFD[1138] = -2.40859499E-01;
  COFD[1139] = 1.05972514E-02;
  COFD[1140] = -1.18989101E+01;
  COFD[1141] = 2.57507000E+00;
  COFD[1142] = -1.24033737E-01;
  COFD[1143] = 5.56694959E-03;
  COFD[1144] = -2.12652444E+01;
  COFD[1145] = 5.59961822E+00;
  COFD[1146] = -4.91624856E-01;
  COFD[1147] = 2.05035546E-02;
  COFD[1148] = -1.55661647E+01;
  COFD[1149] = 3.48070094E+00;
  COFD[1150] = -2.40859499E-01;
  COFD[1151] = 1.05972514E-02;
  COFD[1152] = -1.55511233E+01;
  COFD[1153] = 3.48070094E+00;
  COFD[1154] = -2.40859499E-01;
  COFD[1155] = 1.05972514E-02;
  COFD[1156] = -1.63493305E+01;
  COFD[1157] = 3.82388595E+00;
  COFD[1158] = -2.84480724E-01;
  COFD[1159] = 1.24506311E-02;
  COFD[1160] = -1.62724429E+01;
  COFD[1161] = 3.79163564E+00;
  COFD[1162] = -2.80257365E-01;
  COFD[1163] = 1.22656902E-02;
  COFD[1164] = -2.08293167E+01;
  COFD[1165] = 5.35267674E+00;
  COFD[1166] = -4.69010505E-01;
  COFD[1167] = 1.98979152E-02;
  COFD[1168] = -1.52721010E+01;
  COFD[1169] = 3.36790500E+00;
  COFD[1170] = -2.26321740E-01;
  COFD[1171] = 9.97135055E-03;
  COFD[1172] = -1.84688303E+01;
  COFD[1173] = 4.49330851E+00;
  COFD[1174] = -3.68208715E-01;
  COFD[1175] = 1.59565402E-02;
  COFD[1176] = -1.78834868E+01;
  COFD[1177] = 4.29613154E+00;
  COFD[1178] = -3.44012526E-01;
  COFD[1179] = 1.49643715E-02;
  COFD[1180] = -1.89544717E+01;
  COFD[1181] = 4.68595732E+00;
  COFD[1182] = -3.91842840E-01;
  COFD[1183] = 1.69262542E-02;
  COFD[1184] = -1.86424488E+01;
  COFD[1185] = 4.53572533E+00;
  COFD[1186] = -3.73386925E-01;
  COFD[1187] = 1.61678881E-02;
  COFD[1188] = -2.05235643E+01;
  COFD[1189] = 5.18417470E+00;
  COFD[1190] = -4.49491573E-01;
  COFD[1191] = 1.91438508E-02;
  COFD[1192] = -1.91121670E+01;
  COFD[1193] = 4.61801405E+00;
  COFD[1194] = -3.83535652E-01;
  COFD[1195] = 1.65862513E-02;
  COFD[1196] = -1.91174394E+01;
  COFD[1197] = 4.61801405E+00;
  COFD[1198] = -3.83535652E-01;
  COFD[1199] = 1.65862513E-02;
  COFD[1200] = -2.02466527E+01;
  COFD[1201] = 4.97613338E+00;
  COFD[1202] = -4.26175206E-01;
  COFD[1203] = 1.82809270E-02;
  COFD[1204] = -2.02434842E+01;
  COFD[1205] = 4.97613338E+00;
  COFD[1206] = -4.26175206E-01;
  COFD[1207] = 1.82809270E-02;
  COFD[1208] = -2.02467952E+01;
  COFD[1209] = 4.97613338E+00;
  COFD[1210] = -4.26175206E-01;
  COFD[1211] = 1.82809270E-02;
  COFD[1212] = -2.10567703E+01;
  COFD[1213] = 5.22065615E+00;
  COFD[1214] = -4.53751850E-01;
  COFD[1215] = 1.93099506E-02;
  COFD[1216] = -2.10590493E+01;
  COFD[1217] = 5.22065615E+00;
  COFD[1218] = -4.53751850E-01;
  COFD[1219] = 1.93099506E-02;
  COFD[1220] = -2.15664626E+01;
  COFD[1221] = 5.35995365E+00;
  COFD[1222] = -4.69587823E-01;
  COFD[1223] = 1.99080702E-02;
  COFD[1224] = -2.18315953E+01;
  COFD[1225] = 5.40768793E+00;
  COFD[1226] = -4.72942538E-01;
  COFD[1227] = 1.99389038E-02;
  COFD[1228] = -2.21305975E+01;
  COFD[1229] = 5.47842731E+00;
  COFD[1230] = -4.79952894E-01;
  COFD[1231] = 2.01568406E-02;
  COFD[1232] = -2.24304725E+01;
  COFD[1233] = 5.55319328E+00;
  COFD[1234] = -4.87759313E-01;
  COFD[1235] = 2.04205124E-02;
  COFD[1236] = -2.24760366E+01;
  COFD[1237] = 5.55793029E+00;
  COFD[1238] = -4.88170533E-01;
  COFD[1239] = 2.04302911E-02;
  COFD[1240] = -2.26422048E+01;
  COFD[1241] = 5.59528609E+00;
  COFD[1242] = -4.91473190E-01;
  COFD[1243] = 2.05131236E-02;
  COFD[1244] = -2.28794409E+01;
  COFD[1245] = 5.61013561E+00;
  COFD[1246] = -4.89933558E-01;
  COFD[1247] = 2.03098561E-02;
  COFD[1248] = -2.28924656E+01;
  COFD[1249] = 5.59504443E+00;
  COFD[1250] = -4.86415566E-01;
  COFD[1251] = 2.00947399E-02;
  COFD[1252] = -2.29380382E+01;
  COFD[1253] = 5.58219321E+00;
  COFD[1254] = -4.82941269E-01;
  COFD[1255] = 1.98711890E-02;
  COFD[1256] = -1.52414498E+01;
  COFD[1257] = 3.35922578E+00;
  COFD[1258] = -2.25181399E-01;
  COFD[1259] = 9.92132878E-03;
  COFD[1260] = -2.26337129E+01;
  COFD[1261] = 5.50133264E+00;
  COFD[1262] = -4.62484498E-01;
  COFD[1263] = 1.85871217E-02;
  COFD[1264] = -1.57995045E+01;
  COFD[1265] = 4.22225052E+00;
  COFD[1266] = -3.35156428E-01;
  COFD[1267] = 1.46104855E-02;
  COFD[1268] = -1.50766073E+01;
  COFD[1269] = 3.47945612E+00;
  COFD[1270] = -2.40703722E-01;
  COFD[1271] = 1.05907441E-02;
  COFD[1272] = -1.50911746E+01;
  COFD[1273] = 3.47945612E+00;
  COFD[1274] = -2.40703722E-01;
  COFD[1275] = 1.05907441E-02;
  COFD[1276] = -1.63542358E+01;
  COFD[1277] = 3.82388595E+00;
  COFD[1278] = -2.84480724E-01;
  COFD[1279] = 1.24506311E-02;
  COFD[1280] = -1.25141403E+01;
  COFD[1281] = 2.77873601E+00;
  COFD[1282] = -1.50637360E-01;
  COFD[1283] = 6.72684281E-03;
  COFD[1284] = -2.12831283E+01;
  COFD[1285] = 5.61184117E+00;
  COFD[1286] = -4.90532156E-01;
  COFD[1287] = 2.03507922E-02;
  COFD[1288] = -1.63588948E+01;
  COFD[1289] = 3.82388595E+00;
  COFD[1290] = -2.84480724E-01;
  COFD[1291] = 1.24506311E-02;
  COFD[1292] = -1.63493305E+01;
  COFD[1293] = 3.82388595E+00;
  COFD[1294] = -2.84480724E-01;
  COFD[1295] = 1.24506311E-02;
  COFD[1296] = -1.73374523E+01;
  COFD[1297] = 4.21416723E+00;
  COFD[1298] = -3.34163932E-01;
  COFD[1299] = 1.45697432E-02;
  COFD[1300] = -1.72738845E+01;
  COFD[1301] = 4.19029808E+00;
  COFD[1302] = -3.31177076E-01;
  COFD[1303] = 1.44446234E-02;
  COFD[1304] = -2.14449532E+01;
  COFD[1305] = 5.56531152E+00;
  COFD[1306] = -4.88789821E-01;
  COFD[1307] = 2.04437116E-02;
  COFD[1308] = -1.59862997E+01;
  COFD[1309] = 3.67388294E+00;
  COFD[1310] = -2.64990709E-01;
  COFD[1311] = 1.16042706E-02;
  COFD[1312] = -1.93276406E+01;
  COFD[1313] = 4.85015581E+00;
  COFD[1314] = -4.10945109E-01;
  COFD[1315] = 1.76651398E-02;
  COFD[1316] = -1.88463801E+01;
  COFD[1317] = 4.68393046E+00;
  COFD[1318] = -3.91610863E-01;
  COFD[1319] = 1.69174645E-02;
  COFD[1320] = -1.98646724E+01;
  COFD[1321] = 5.04367502E+00;
  COFD[1322] = -4.34153325E-01;
  COFD[1323] = 1.85956055E-02;
  COFD[1324] = -1.95552136E+01;
  COFD[1325] = 4.90255048E+00;
  COFD[1326] = -4.17368501E-01;
  COFD[1327] = 1.79287358E-02;
  COFD[1328] = -2.11637883E+01;
  COFD[1329] = 5.42846112E+00;
  COFD[1330] = -4.74321870E-01;
  COFD[1331] = 1.99459749E-02;
  COFD[1332] = -1.99803480E+01;
  COFD[1333] = 4.97875278E+00;
  COFD[1334] = -4.26485475E-01;
  COFD[1335] = 1.82931933E-02;
  COFD[1336] = -1.99835677E+01;
  COFD[1337] = 4.97875278E+00;
  COFD[1338] = -4.26485475E-01;
  COFD[1339] = 1.82931933E-02;
  COFD[1340] = -2.10571697E+01;
  COFD[1341] = 5.31360223E+00;
  COFD[1342] = -4.64787000E-01;
  COFD[1343] = 1.97483720E-02;
  COFD[1344] = -2.10553233E+01;
  COFD[1345] = 5.31360223E+00;
  COFD[1346] = -4.64787000E-01;
  COFD[1347] = 1.97483720E-02;
  COFD[1348] = -2.10572526E+01;
  COFD[1349] = 5.31360223E+00;
  COFD[1350] = -4.64787000E-01;
  COFD[1351] = 1.97483720E-02;
  COFD[1352] = -2.16471880E+01;
  COFD[1353] = 5.46403569E+00;
  COFD[1354] = -4.78350420E-01;
  COFD[1355] = 2.00977393E-02;
  COFD[1356] = -2.16484734E+01;
  COFD[1357] = 5.46403569E+00;
  COFD[1358] = -4.78350420E-01;
  COFD[1359] = 2.00977393E-02;
  COFD[1360] = -2.20820509E+01;
  COFD[1361] = 5.57296554E+00;
  COFD[1362] = -4.89394407E-01;
  COFD[1363] = 2.04545698E-02;
  COFD[1364] = -2.23196288E+01;
  COFD[1365] = 5.61199715E+00;
  COFD[1366] = -4.91433824E-01;
  COFD[1367] = 2.04245969E-02;
  COFD[1368] = -2.23961398E+01;
  COFD[1369] = 5.58969231E+00;
  COFD[1370] = -4.85146102E-01;
  COFD[1371] = 2.00165025E-02;
  COFD[1372] = -2.25070771E+01;
  COFD[1373] = 5.58488808E+00;
  COFD[1374] = -4.81505670E-01;
  COFD[1375] = 1.97377350E-02;
  COFD[1376] = -2.25413162E+01;
  COFD[1377] = 5.58519141E+00;
  COFD[1378] = -4.81277367E-01;
  COFD[1379] = 1.97172346E-02;
  COFD[1380] = -2.26104723E+01;
  COFD[1381] = 5.58175450E+00;
  COFD[1382] = -4.78660487E-01;
  COFD[1383] = 1.95178220E-02;
  COFD[1384] = -2.26368459E+01;
  COFD[1385] = 5.50714270E+00;
  COFD[1386] = -4.64060018E-01;
  COFD[1387] = 1.86881341E-02;
  COFD[1388] = -2.26543431E+01;
  COFD[1389] = 5.49570925E+00;
  COFD[1390] = -4.60969345E-01;
  COFD[1391] = 1.84906305E-02;
  COFD[1392] = -2.26384257E+01;
  COFD[1393] = 5.45743664E+00;
  COFD[1394] = -4.53877300E-01;
  COFD[1395] = 1.80982969E-02;
  COFD[1396] = -1.59633426E+01;
  COFD[1397] = 3.66853818E+00;
  COFD[1398] = -2.64346221E-01;
  COFD[1399] = 1.15784613E-02;
  COFD[1400] = -2.26491370E+01;
  COFD[1401] = 5.50690143E+00;
  COFD[1402] = -4.64003349E-01;
  COFD[1403] = 1.86846584E-02;
  COFD[1404] = -1.57199190E+01;
  COFD[1405] = 4.19936335E+00;
  COFD[1406] = -3.32311009E-01;
  COFD[1407] = 1.44921003E-02;
  COFD[1408] = -1.50270285E+01;
  COFD[1409] = 3.46140064E+00;
  COFD[1410] = -2.38440092E-01;
  COFD[1411] = 1.04960087E-02;
  COFD[1412] = -1.50420909E+01;
  COFD[1413] = 3.46140064E+00;
  COFD[1414] = -2.38440092E-01;
  COFD[1415] = 1.04960087E-02;
  COFD[1416] = -1.62775683E+01;
  COFD[1417] = 3.79163564E+00;
  COFD[1418] = -2.80257365E-01;
  COFD[1419] = 1.22656902E-02;
  COFD[1420] = -1.24693714E+01;
  COFD[1421] = 2.76686648E+00;
  COFD[1422] = -1.49120141E-01;
  COFD[1423] = 6.66220432E-03;
  COFD[1424] = -2.14087360E+01;
  COFD[1425] = 5.57281993E+00;
  COFD[1426] = -4.76690860E-01;
  COFD[1427] = 1.94000702E-02;
  COFD[1428] = -1.62824385E+01;
  COFD[1429] = 3.79163564E+00;
  COFD[1430] = -2.80257365E-01;
  COFD[1431] = 1.22656902E-02;
  COFD[1432] = -1.62724429E+01;
  COFD[1433] = 3.79163564E+00;
  COFD[1434] = -2.80257365E-01;
  COFD[1435] = 1.22656902E-02;
  COFD[1436] = -1.72738845E+01;
  COFD[1437] = 4.19029808E+00;
  COFD[1438] = -3.31177076E-01;
  COFD[1439] = 1.44446234E-02;
  COFD[1440] = -1.72167712E+01;
  COFD[1441] = 4.16886779E+00;
  COFD[1442] = -3.28518156E-01;
  COFD[1443] = 1.43341626E-02;
  COFD[1444] = -2.14082433E+01;
  COFD[1445] = 5.55346617E+00;
  COFD[1446] = -4.87783156E-01;
  COFD[1447] = 2.04210886E-02;
  COFD[1448] = -1.59525075E+01;
  COFD[1449] = 3.66023858E+00;
  COFD[1450] = -2.63401043E-01;
  COFD[1451] = 1.15432000E-02;
  COFD[1452] = -1.92867532E+01;
  COFD[1453] = 4.83375900E+00;
  COFD[1454] = -4.09146560E-01;
  COFD[1455] = 1.76006599E-02;
  COFD[1456] = -1.87897289E+01;
  COFD[1457] = 4.66162351E+00;
  COFD[1458] = -3.88920477E-01;
  COFD[1459] = 1.68089648E-02;
  COFD[1460] = -1.98075051E+01;
  COFD[1461] = 5.02169524E+00;
  COFD[1462] = -4.31582804E-01;
  COFD[1463] = 1.84953568E-02;
  COFD[1464] = -1.94823661E+01;
  COFD[1465] = 4.87333294E+00;
  COFD[1466] = -4.13769241E-01;
  COFD[1467] = 1.77802244E-02;
  COFD[1468] = -2.11341641E+01;
  COFD[1469] = 5.41773516E+00;
  COFD[1470] = -4.73414338E-01;
  COFD[1471] = 1.99258685E-02;
  COFD[1472] = -1.99235836E+01;
  COFD[1473] = 4.95514826E+00;
  COFD[1474] = -4.23691395E-01;
  COFD[1475] = 1.81828318E-02;
  COFD[1476] = -1.99269591E+01;
  COFD[1477] = 4.95514826E+00;
  COFD[1478] = -4.23691395E-01;
  COFD[1479] = 1.81828318E-02;
  COFD[1480] = -2.09912117E+01;
  COFD[1481] = 5.28557747E+00;
  COFD[1482] = -4.61402384E-01;
  COFD[1483] = 1.96111546E-02;
  COFD[1484] = -2.09892692E+01;
  COFD[1485] = 5.28557747E+00;
  COFD[1486] = -4.61402384E-01;
  COFD[1487] = 1.96111546E-02;
  COFD[1488] = -2.09912989E+01;
  COFD[1489] = 5.28557747E+00;
  COFD[1490] = -4.61402384E-01;
  COFD[1491] = 1.96111546E-02;
  COFD[1492] = -2.15968629E+01;
  COFD[1493] = 5.44280136E+00;
  COFD[1494] = -4.75998855E-01;
  COFD[1495] = 2.00116091E-02;
  COFD[1496] = -2.15982184E+01;
  COFD[1497] = 5.44280136E+00;
  COFD[1498] = -4.75998855E-01;
  COFD[1499] = 2.00116091E-02;
  COFD[1500] = -2.20571987E+01;
  COFD[1501] = 5.56221277E+00;
  COFD[1502] = -4.88535386E-01;
  COFD[1503] = 2.04385478E-02;
  COFD[1504] = -2.23089124E+01;
  COFD[1505] = 5.60657745E+00;
  COFD[1506] = -4.91280842E-01;
  COFD[1507] = 2.04393241E-02;
  COFD[1508] = -2.24147233E+01;
  COFD[1509] = 5.59714923E+00;
  COFD[1510] = -4.86899964E-01;
  COFD[1511] = 2.01242645E-02;
  COFD[1512] = -2.25078396E+01;
  COFD[1513] = 5.58461787E+00;
  COFD[1514] = -4.82178861E-01;
  COFD[1515] = 1.97950972E-02;
  COFD[1516] = -2.25423020E+01;
  COFD[1517] = 5.58490857E+00;
  COFD[1518] = -4.81943660E-01;
  COFD[1519] = 1.97740434E-02;
  COFD[1520] = -2.26201690E+01;
  COFD[1521] = 5.58491601E+00;
  COFD[1522] = -4.79798668E-01;
  COFD[1523] = 1.95960400E-02;
  COFD[1524] = -2.26685949E+01;
  COFD[1525] = 5.51963910E+00;
  COFD[1526] = -4.66555705E-01;
  COFD[1527] = 1.88313890E-02;
  COFD[1528] = -2.26705837E+01;
  COFD[1529] = 5.50119356E+00;
  COFD[1530] = -4.62439469E-01;
  COFD[1531] = 1.85841071E-02;
  COFD[1532] = -2.26836499E+01;
  COFD[1533] = 5.47552771E+00;
  COFD[1534] = -4.57173951E-01;
  COFD[1535] = 1.82791721E-02;
  COFD[1536] = -1.59327344E+01;
  COFD[1537] = 3.65620899E+00;
  COFD[1538] = -2.62933804E-01;
  COFD[1539] = 1.15253223E-02;
  COFD[1540] = -1.64683697E+01;
  COFD[1541] = 2.28170571E+00;
  COFD[1542] = 3.44078407E-02;
  COFD[1543] = -6.01703889E-03;
  COFD[1544] = -1.97550243E+01;
  COFD[1545] = 5.56931926E+00;
  COFD[1546] = -4.89105511E-01;
  COFD[1547] = 2.04493129E-02;
  COFD[1548] = -1.94373032E+01;
  COFD[1549] = 5.02567894E+00;
  COFD[1550] = -4.32045169E-01;
  COFD[1551] = 1.85132214E-02;
  COFD[1552] = -1.94570202E+01;
  COFD[1553] = 5.02567894E+00;
  COFD[1554] = -4.32045169E-01;
  COFD[1555] = 1.85132214E-02;
  COFD[1556] = -2.08367641E+01;
  COFD[1557] = 5.35267674E+00;
  COFD[1558] = -4.69010505E-01;
  COFD[1559] = 1.98979152E-02;
  COFD[1560] = -1.60528433E+01;
  COFD[1561] = 4.11188603E+00;
  COFD[1562] = -3.21540884E-01;
  COFD[1563] = 1.40482564E-02;
  COFD[1564] = -1.77563175E+01;
  COFD[1565] = 3.57475686E+00;
  COFD[1566] = -1.56396297E-01;
  COFD[1567] = 3.12157721E-03;
  COFD[1568] = -2.08438728E+01;
  COFD[1569] = 5.35267674E+00;
  COFD[1570] = -4.69010505E-01;
  COFD[1571] = 1.98979152E-02;
  COFD[1572] = -2.08293167E+01;
  COFD[1573] = 5.35267674E+00;
  COFD[1574] = -4.69010505E-01;
  COFD[1575] = 1.98979152E-02;
  COFD[1576] = -2.14449532E+01;
  COFD[1577] = 5.56531152E+00;
  COFD[1578] = -4.88789821E-01;
  COFD[1579] = 2.04437116E-02;
  COFD[1580] = -2.14082433E+01;
  COFD[1581] = 5.55346617E+00;
  COFD[1582] = -4.87783156E-01;
  COFD[1583] = 2.04210886E-02;
  COFD[1584] = -1.90499374E+01;
  COFD[1585] = 3.99221757E+00;
  COFD[1586] = -2.19854880E-01;
  COFD[1587] = 6.22736279E-03;
  COFD[1588] = -2.05128629E+01;
  COFD[1589] = 5.23843909E+00;
  COFD[1590] = -4.55815614E-01;
  COFD[1591] = 1.93898040E-02;
  COFD[1592] = -2.19317665E+01;
  COFD[1593] = 5.45216133E+00;
  COFD[1594] = -4.52916925E-01;
  COFD[1595] = 1.80456400E-02;
  COFD[1596] = -2.20036321E+01;
  COFD[1597] = 5.55935694E+00;
  COFD[1598] = -4.74154740E-01;
  COFD[1599] = 1.92584304E-02;
  COFD[1600] = -2.16379525E+01;
  COFD[1601] = 5.29019717E+00;
  COFD[1602] = -4.24502606E-01;
  COFD[1603] = 1.65197343E-02;
  COFD[1604] = -2.19399756E+01;
  COFD[1605] = 5.41841631E+00;
  COFD[1606] = -4.46818971E-01;
  COFD[1607] = 1.77127652E-02;
  COFD[1608] = -2.01064300E+01;
  COFD[1609] = 4.41511629E+00;
  COFD[1610] = -2.84086963E-01;
  COFD[1611] = 9.37586971E-03;
  COFD[1612] = -2.20947854E+01;
  COFD[1613] = 5.36053938E+00;
  COFD[1614] = -4.36434519E-01;
  COFD[1615] = 1.71484255E-02;
  COFD[1616] = -2.20998692E+01;
  COFD[1617] = 5.36053938E+00;
  COFD[1618] = -4.36434519E-01;
  COFD[1619] = 1.71484255E-02;
  COFD[1620] = -2.13351219E+01;
  COFD[1621] = 4.87252053E+00;
  COFD[1622] = -3.56127804E-01;
  COFD[1623] = 1.29948788E-02;
  COFD[1624] = -2.13320802E+01;
  COFD[1625] = 4.87252053E+00;
  COFD[1626] = -3.56127804E-01;
  COFD[1627] = 1.29948788E-02;
  COFD[1628] = -2.13352587E+01;
  COFD[1629] = 4.87252053E+00;
  COFD[1630] = -3.56127804E-01;
  COFD[1631] = 1.29948788E-02;
  COFD[1632] = -2.03618430E+01;
  COFD[1633] = 4.33469236E+00;
  COFD[1634] = -2.71728538E-01;
  COFD[1635] = 8.76524142E-03;
  COFD[1636] = -2.03640239E+01;
  COFD[1637] = 4.33469236E+00;
  COFD[1638] = -2.71728538E-01;
  COFD[1639] = 8.76524142E-03;
  COFD[1640] = -1.96505480E+01;
  COFD[1641] = 3.94748284E+00;
  COFD[1642] = -2.13105313E-01;
  COFD[1643] = 5.89820150E-03;
  COFD[1644] = -1.91553451E+01;
  COFD[1645] = 3.66719242E+00;
  COFD[1646] = -1.70260825E-01;
  COFD[1647] = 3.79442136E-03;
  COFD[1648] = -1.85405054E+01;
  COFD[1649] = 3.34746301E+00;
  COFD[1650] = -1.22575165E-01;
  COFD[1651] = 1.49120224E-03;
  COFD[1652] = -1.80138627E+01;
  COFD[1653] = 3.07345302E+00;
  COFD[1654] = -8.20536856E-02;
  COFD[1655] = -4.51137426E-04;
  COFD[1656] = -1.79714284E+01;
  COFD[1657] = 3.04109524E+00;
  COFD[1658] = -7.73097243E-02;
  COFD[1659] = -6.77522484E-04;
  COFD[1660] = -1.74160262E+01;
  COFD[1661] = 2.77201495E+00;
  COFD[1662] = -3.78503295E-02;
  COFD[1663] = -2.56220054E-03;
  COFD[1664] = -1.66390101E+01;
  COFD[1665] = 2.35716270E+00;
  COFD[1666] = 2.33630190E-02;
  COFD[1667] = -5.49227499E-03;
  COFD[1668] = -1.63277465E+01;
  COFD[1669] = 2.20684400E+00;
  COFD[1670] = 4.53338465E-02;
  COFD[1671] = -6.53458896E-03;
  COFD[1672] = -1.59785605E+01;
  COFD[1673] = 2.03061309E+00;
  COFD[1674] = 7.09547643E-02;
  COFD[1675] = -7.74512315E-03;
  COFD[1676] = -2.04833743E+01;
  COFD[1677] = 5.23112374E+00;
  COFD[1678] = -4.54967682E-01;
  COFD[1679] = 1.93570423E-02;
  COFD[1680] = -2.27747741E+01;
  COFD[1681] = 5.60263382E+00;
  COFD[1682] = -4.91348327E-01;
  COFD[1683] = 2.04651120E-02;
  COFD[1684] = -1.43151328E+01;
  COFD[1685] = 3.68038508E+00;
  COFD[1686] = -2.65779346E-01;
  COFD[1687] = 1.16360771E-02;
  COFD[1688] = -1.40998907E+01;
  COFD[1689] = 3.08120012E+00;
  COFD[1690] = -1.89629903E-01;
  COFD[1691] = 8.40361952E-03;
  COFD[1692] = -1.41191170E+01;
  COFD[1693] = 3.08120012E+00;
  COFD[1694] = -1.89629903E-01;
  COFD[1695] = 8.40361952E-03;
  COFD[1696] = -1.52792799E+01;
  COFD[1697] = 3.36790500E+00;
  COFD[1698] = -2.26321740E-01;
  COFD[1699] = 9.97135055E-03;
  COFD[1700] = -1.17159884E+01;
  COFD[1701] = 2.48123210E+00;
  COFD[1702] = -1.11322604E-01;
  COFD[1703] = 4.99282389E-03;
  COFD[1704] = -2.11388255E+01;
  COFD[1705] = 5.55529689E+00;
  COFD[1706] = -4.87942530E-01;
  COFD[1707] = 2.04249057E-02;
  COFD[1708] = -1.52861287E+01;
  COFD[1709] = 3.36790500E+00;
  COFD[1710] = -2.26321740E-01;
  COFD[1711] = 9.97135055E-03;
  COFD[1712] = -1.52721010E+01;
  COFD[1713] = 3.36790500E+00;
  COFD[1714] = -2.26321740E-01;
  COFD[1715] = 9.97135055E-03;
  COFD[1716] = -1.59862997E+01;
  COFD[1717] = 3.67388294E+00;
  COFD[1718] = -2.64990709E-01;
  COFD[1719] = 1.16042706E-02;
  COFD[1720] = -1.59525075E+01;
  COFD[1721] = 3.66023858E+00;
  COFD[1722] = -2.63401043E-01;
  COFD[1723] = 1.15432000E-02;
  COFD[1724] = -2.05128629E+01;
  COFD[1725] = 5.23843909E+00;
  COFD[1726] = -4.55815614E-01;
  COFD[1727] = 1.93898040E-02;
  COFD[1728] = -1.50233391E+01;
  COFD[1729] = 3.26660767E+00;
  COFD[1730] = -2.13287177E-01;
  COFD[1731] = 9.41137857E-03;
  COFD[1732] = -1.81735675E+01;
  COFD[1733] = 4.38391495E+00;
  COFD[1734] = -3.54941287E-01;
  COFD[1735] = 1.54195107E-02;
  COFD[1736] = -1.76285583E+01;
  COFD[1737] = 4.19935698E+00;
  COFD[1738] = -3.32310212E-01;
  COFD[1739] = 1.44920670E-02;
  COFD[1740] = -1.86157710E+01;
  COFD[1741] = 4.55689508E+00;
  COFD[1742] = -3.75937921E-01;
  COFD[1743] = 1.62703488E-02;
  COFD[1744] = -1.83538331E+01;
  COFD[1745] = 4.42828044E+00;
  COFD[1746] = -3.60417833E-01;
  COFD[1747] = 1.56455103E-02;
  COFD[1748] = -2.02969667E+01;
  COFD[1749] = 5.11106992E+00;
  COFD[1750] = -4.42047129E-01;
  COFD[1751] = 1.89042990E-02;
  COFD[1752] = -1.87684982E+01;
  COFD[1753] = 4.49191492E+00;
  COFD[1754] = -3.68041771E-01;
  COFD[1755] = 1.59498676E-02;
  COFD[1756] = -1.87733780E+01;
  COFD[1757] = 4.49191492E+00;
  COFD[1758] = -3.68041771E-01;
  COFD[1759] = 1.59498676E-02;
  COFD[1760] = -1.98830863E+01;
  COFD[1761] = 4.84731557E+00;
  COFD[1762] = -4.10638352E-01;
  COFD[1763] = 1.76543886E-02;
  COFD[1764] = -1.98801803E+01;
  COFD[1765] = 4.84731557E+00;
  COFD[1766] = -4.10638352E-01;
  COFD[1767] = 1.76543886E-02;
  COFD[1768] = -1.98832169E+01;
  COFD[1769] = 4.84731557E+00;
  COFD[1770] = -4.10638352E-01;
  COFD[1771] = 1.76543886E-02;
  COFD[1772] = -2.07935801E+01;
  COFD[1773] = 5.13870075E+00;
  COFD[1774] = -4.45087556E-01;
  COFD[1775] = 1.90141513E-02;
  COFD[1776] = -2.07956566E+01;
  COFD[1777] = 5.13870075E+00;
  COFD[1778] = -4.45087556E-01;
  COFD[1779] = 1.90141513E-02;
  COFD[1780] = -2.12462427E+01;
  COFD[1781] = 5.25612649E+00;
  COFD[1782] = -4.57885944E-01;
  COFD[1783] = 1.94706895E-02;
  COFD[1784] = -2.16479635E+01;
  COFD[1785] = 5.36415648E+00;
  COFD[1786] = -4.69836047E-01;
  COFD[1787] = 1.99067039E-02;
  COFD[1788] = -2.18744947E+01;
  COFD[1789] = 5.40581593E+00;
  COFD[1790] = -4.72804333E-01;
  COFD[1791] = 1.99370903E-02;
  COFD[1792] = -2.21149546E+01;
  COFD[1793] = 5.45837402E+00;
  COFD[1794] = -4.77716491E-01;
  COFD[1795] = 2.00742141E-02;
  COFD[1796] = -2.21693686E+01;
  COFD[1797] = 5.46715955E+00;
  COFD[1798] = -4.78699053E-01;
  COFD[1799] = 2.01106334E-02;
  COFD[1800] = -2.23927590E+01;
  COFD[1801] = 5.52880430E+00;
  COFD[1802] = -4.85323223E-01;
  COFD[1803] = 2.03436366E-02;
  COFD[1804] = -2.27595631E+01;
  COFD[1805] = 5.59981860E+00;
  COFD[1806] = -4.91614072E-01;
  COFD[1807] = 2.05016331E-02;
  COFD[1808] = -2.28218040E+01;
  COFD[1809] = 5.60692017E+00;
  COFD[1810] = -4.91295058E-01;
  COFD[1811] = 2.04387644E-02;
  COFD[1812] = -2.29034442E+01;
  COFD[1813] = 5.61183042E+00;
  COFD[1814] = -4.90566396E-01;
  COFD[1815] = 2.03536798E-02;
  COFD[1816] = -1.50031706E+01;
  COFD[1817] = 3.26223357E+00;
  COFD[1818] = -2.12746642E-01;
  COFD[1819] = 9.38912883E-03;
  COFD[1820] = -2.17131539E+01;
  COFD[1821] = 4.69815223E+00;
  COFD[1822] = -3.28454103E-01;
  COFD[1823] = 1.15970636E-02;
  COFD[1824] = -1.76147183E+01;
  COFD[1825] = 4.86049500E+00;
  COFD[1826] = -4.12200578E-01;
  COFD[1827] = 1.77160971E-02;
  COFD[1828] = -1.70534750E+01;
  COFD[1829] = 4.14240922E+00;
  COFD[1830] = -3.25239774E-01;
  COFD[1831] = 1.41980687E-02;
  COFD[1832] = -1.70756953E+01;
  COFD[1833] = 4.14240922E+00;
  COFD[1834] = -3.25239774E-01;
  COFD[1835] = 1.41980687E-02;
  COFD[1836] = -1.84777509E+01;
  COFD[1837] = 4.49330851E+00;
  COFD[1838] = -3.68208715E-01;
  COFD[1839] = 1.59565402E-02;
  COFD[1840] = -1.37794466E+01;
  COFD[1841] = 3.23973858E+00;
  COFD[1842] = -2.09989036E-01;
  COFD[1843] = 9.27667906E-03;
  COFD[1844] = -2.07653629E+01;
  COFD[1845] = 5.01091988E+00;
  COFD[1846] = -3.77985581E-01;
  COFD[1847] = 1.40968617E-02;
  COFD[1848] = -1.84862906E+01;
  COFD[1849] = 4.49330851E+00;
  COFD[1850] = -3.68208715E-01;
  COFD[1851] = 1.59565402E-02;
  COFD[1852] = -1.84688303E+01;
  COFD[1853] = 4.49330851E+00;
  COFD[1854] = -3.68208715E-01;
  COFD[1855] = 1.59565402E-02;
  COFD[1856] = -1.93276406E+01;
  COFD[1857] = 4.85015581E+00;
  COFD[1858] = -4.10945109E-01;
  COFD[1859] = 1.76651398E-02;
  COFD[1860] = -1.92867532E+01;
  COFD[1861] = 4.83375900E+00;
  COFD[1862] = -4.09146560E-01;
  COFD[1863] = 1.76006599E-02;
  COFD[1864] = -2.19317665E+01;
  COFD[1865] = 5.45216133E+00;
  COFD[1866] = -4.52916925E-01;
  COFD[1867] = 1.80456400E-02;
  COFD[1868] = -1.81735675E+01;
  COFD[1869] = 4.38391495E+00;
  COFD[1870] = -3.54941287E-01;
  COFD[1871] = 1.54195107E-02;
  COFD[1872] = -2.13425604E+01;
  COFD[1873] = 5.40460130E+00;
  COFD[1874] = -4.72718910E-01;
  COFD[1875] = 1.99362717E-02;
  COFD[1876] = -2.09191230E+01;
  COFD[1877] = 5.30153901E+00;
  COFD[1878] = -4.63335119E-01;
  COFD[1879] = 1.96897053E-02;
  COFD[1880] = -2.16802565E+01;
  COFD[1881] = 5.52918296E+00;
  COFD[1882] = -4.85360709E-01;
  COFD[1883] = 2.03448006E-02;
  COFD[1884] = -2.14326420E+01;
  COFD[1885] = 5.41729961E+00;
  COFD[1886] = -4.73400281E-01;
  COFD[1887] = 1.99269567E-02;
  COFD[1888] = -2.22176875E+01;
  COFD[1889] = 5.54251230E+00;
  COFD[1890] = -4.70946314E-01;
  COFD[1891] = 1.90785869E-02;
  COFD[1892] = -2.18590684E+01;
  COFD[1893] = 5.47368915E+00;
  COFD[1894] = -4.79424291E-01;
  COFD[1895] = 2.01372920E-02;
  COFD[1896] = -2.18653022E+01;
  COFD[1897] = 5.47368915E+00;
  COFD[1898] = -4.79424291E-01;
  COFD[1899] = 2.01372920E-02;
  COFD[1900] = -2.25016971E+01;
  COFD[1901] = 5.59178974E+00;
  COFD[1902] = -4.85668031E-01;
  COFD[1903] = 2.00491907E-02;
  COFD[1904] = -2.24978649E+01;
  COFD[1905] = 5.59178974E+00;
  COFD[1906] = -4.85668031E-01;
  COFD[1907] = 2.00491907E-02;
  COFD[1908] = -2.25018696E+01;
  COFD[1909] = 5.59178974E+00;
  COFD[1910] = -4.85668031E-01;
  COFD[1911] = 2.00491907E-02;
  COFD[1912] = -2.26255602E+01;
  COFD[1913] = 5.52088531E+00;
  COFD[1914] = -4.66799303E-01;
  COFD[1915] = 1.88452220E-02;
  COFD[1916] = -2.26283634E+01;
  COFD[1917] = 5.52088531E+00;
  COFD[1918] = -4.66799303E-01;
  COFD[1919] = 1.88452220E-02;
  COFD[1920] = -2.26428111E+01;
  COFD[1921] = 5.43854589E+00;
  COFD[1922] = -4.50460433E-01;
  COFD[1923] = 1.79115741E-02;
  COFD[1924] = -2.25594139E+01;
  COFD[1925] = 5.32923056E+00;
  COFD[1926] = -4.31065031E-01;
  COFD[1927] = 1.68637777E-02;
  COFD[1928] = -2.24455334E+01;
  COFD[1929] = 5.21716989E+00;
  COFD[1930] = -4.11825254E-01;
  COFD[1931] = 1.58436458E-02;
  COFD[1932] = -2.23014058E+01;
  COFD[1933] = 5.09843164E+00;
  COFD[1934] = -3.92118361E-01;
  COFD[1935] = 1.48192579E-02;
  COFD[1936] = -2.23041648E+01;
  COFD[1937] = 5.08480808E+00;
  COFD[1938] = -3.89912767E-01;
  COFD[1939] = 1.47062570E-02;
  COFD[1940] = -2.21269336E+01;
  COFD[1941] = 4.97192306E+00;
  COFD[1942] = -3.71804005E-01;
  COFD[1943] = 1.37844212E-02;
  COFD[1944] = -2.17986999E+01;
  COFD[1945] = 4.73948321E+00;
  COFD[1946] = -3.35004943E-01;
  COFD[1947] = 1.19275825E-02;
  COFD[1948] = -2.16564571E+01;
  COFD[1949] = 4.65505428E+00;
  COFD[1950] = -3.21651467E-01;
  COFD[1951] = 1.12547138E-02;
  COFD[1952] = -2.15260200E+01;
  COFD[1953] = 4.56640766E+00;
  COFD[1954] = -3.07568513E-01;
  COFD[1955] = 1.05437086E-02;
  COFD[1956] = -1.81432499E+01;
  COFD[1957] = 4.37565431E+00;
  COFD[1958] = -3.53906025E-01;
  COFD[1959] = 1.53760786E-02;
  COFD[1960] = -2.22067717E+01;
  COFD[1961] = 5.03874797E+00;
  COFD[1962] = -3.82440213E-01;
  COFD[1963] = 1.43232015E-02;
  COFD[1964] = -1.72232379E+01;
  COFD[1965] = 4.69060745E+00;
  COFD[1966] = -3.92369888E-01;
  COFD[1967] = 1.69459661E-02;
  COFD[1968] = -1.65488277E+01;
  COFD[1969] = 3.95035840E+00;
  COFD[1970] = -3.00959418E-01;
  COFD[1971] = 1.31692593E-02;
  COFD[1972] = -1.65675292E+01;
  COFD[1973] = 3.95035840E+00;
  COFD[1974] = -3.00959418E-01;
  COFD[1975] = 1.31692593E-02;
  COFD[1976] = -1.78903850E+01;
  COFD[1977] = 4.29613154E+00;
  COFD[1978] = -3.44012526E-01;
  COFD[1979] = 1.49643715E-02;
  COFD[1980] = -1.34709956E+01;
  COFD[1981] = 3.09379603E+00;
  COFD[1982] = -1.91268635E-01;
  COFD[1983] = 8.47480224E-03;
  COFD[1984] = -2.15095920E+01;
  COFD[1985] = 5.46737673E+00;
  COFD[1986] = -4.55696085E-01;
  COFD[1987] = 1.81982625E-02;
  COFD[1988] = -1.78969625E+01;
  COFD[1989] = 4.29613154E+00;
  COFD[1990] = -3.44012526E-01;
  COFD[1991] = 1.49643715E-02;
  COFD[1992] = -1.78834868E+01;
  COFD[1993] = 4.29613154E+00;
  COFD[1994] = -3.44012526E-01;
  COFD[1995] = 1.49643715E-02;
  COFD[1996] = -1.88463801E+01;
  COFD[1997] = 4.68393046E+00;
  COFD[1998] = -3.91610863E-01;
  COFD[1999] = 1.69174645E-02;
  COFD[2000] = -1.87897289E+01;
  COFD[2001] = 4.66162351E+00;
  COFD[2002] = -3.88920477E-01;
  COFD[2003] = 1.68089648E-02;
  COFD[2004] = -2.20036321E+01;
  COFD[2005] = 5.55935694E+00;
  COFD[2006] = -4.74154740E-01;
  COFD[2007] = 1.92584304E-02;
  COFD[2008] = -1.76285583E+01;
  COFD[2009] = 4.19935698E+00;
  COFD[2010] = -3.32310212E-01;
  COFD[2011] = 1.44920670E-02;
  COFD[2012] = -2.09191230E+01;
  COFD[2013] = 5.30153901E+00;
  COFD[2014] = -4.63335119E-01;
  COFD[2015] = 1.96897053E-02;
  COFD[2016] = -2.03766918E+01;
  COFD[2017] = 5.13263469E+00;
  COFD[2018] = -4.44457285E-01;
  COFD[2019] = 1.89932102E-02;
  COFD[2020] = -2.12121345E+01;
  COFD[2021] = 5.39823225E+00;
  COFD[2022] = -4.72294645E-01;
  COFD[2023] = 1.99340225E-02;
  COFD[2024] = -2.10944068E+01;
  COFD[2025] = 5.34286099E+00;
  COFD[2026] = -4.68100992E-01;
  COFD[2027] = 1.98731399E-02;
  COFD[2028] = -2.21110249E+01;
  COFD[2029] = 5.58360799E+00;
  COFD[2030] = -4.82701436E-01;
  COFD[2031] = 1.98437922E-02;
  COFD[2032] = -2.14323161E+01;
  COFD[2033] = 5.37331605E+00;
  COFD[2034] = -4.70491203E-01;
  COFD[2035] = 1.99134666E-02;
  COFD[2036] = -2.14369847E+01;
  COFD[2037] = 5.37331605E+00;
  COFD[2038] = -4.70491203E-01;
  COFD[2039] = 1.99134666E-02;
  COFD[2040] = -2.22816073E+01;
  COFD[2041] = 5.59185582E+00;
  COFD[2042] = -4.91155812E-01;
  COFD[2043] = 2.05043018E-02;
  COFD[2044] = -2.22788407E+01;
  COFD[2045] = 5.59185582E+00;
  COFD[2046] = -4.91155812E-01;
  COFD[2047] = 2.05043018E-02;
  COFD[2048] = -2.22817317E+01;
  COFD[2049] = 5.59185582E+00;
  COFD[2050] = -4.91155812E-01;
  COFD[2051] = 2.05043018E-02;
  COFD[2052] = -2.25311979E+01;
  COFD[2053] = 5.58497731E+00;
  COFD[2054] = -4.81782064E-01;
  COFD[2055] = 1.97602508E-02;
  COFD[2056] = -2.25331679E+01;
  COFD[2057] = 5.58497731E+00;
  COFD[2058] = -4.81782064E-01;
  COFD[2059] = 1.97602508E-02;
  COFD[2060] = -2.26391595E+01;
  COFD[2061] = 5.54906697E+00;
  COFD[2062] = -4.72198999E-01;
  COFD[2063] = 1.91488843E-02;
  COFD[2064] = -2.26655242E+01;
  COFD[2065] = 5.49155307E+00;
  COFD[2066] = -4.60156593E-01;
  COFD[2067] = 1.84445999E-02;
  COFD[2068] = -2.26097243E+01;
  COFD[2069] = 5.40751776E+00;
  COFD[2070] = -4.44796499E-01;
  COFD[2071] = 1.76008889E-02;
  COFD[2072] = -2.25351154E+01;
  COFD[2073] = 5.32200412E+00;
  COFD[2074] = -4.29810296E-01;
  COFD[2075] = 1.67968656E-02;
  COFD[2076] = -2.25457395E+01;
  COFD[2077] = 5.31236460E+00;
  COFD[2078] = -4.28177190E-01;
  COFD[2079] = 1.67109235E-02;
  COFD[2080] = -2.24546794E+01;
  COFD[2081] = 5.23807779E+00;
  COFD[2082] = -4.15451615E-01;
  COFD[2083] = 1.60367849E-02;
  COFD[2084] = -2.22774154E+01;
  COFD[2085] = 5.07362417E+00;
  COFD[2086] = -3.88094414E-01;
  COFD[2087] = 1.46129219E-02;
  COFD[2088] = -2.21555521E+01;
  COFD[2089] = 5.00070625E+00;
  COFD[2090] = -3.76355283E-01;
  COFD[2091] = 1.40141622E-02;
  COFD[2092] = -2.20003434E+01;
  COFD[2093] = 4.90271383E+00;
  COFD[2094] = -3.60896715E-01;
  COFD[2095] = 1.32352181E-02;
  COFD[2096] = -1.76002073E+01;
  COFD[2097] = 4.19171952E+00;
  COFD[2098] = -3.31354810E-01;
  COFD[2099] = 1.44520623E-02;
  COFD[2100] = -2.08912810E+01;
  COFD[2101] = 4.35422933E+00;
  COFD[2102] = -2.74727512E-01;
  COFD[2103] = 8.91328380E-03;
  COFD[2104] = -1.82252070E+01;
  COFD[2105] = 5.05237312E+00;
  COFD[2106] = -4.35182396E-01;
  COFD[2107] = 1.86363074E-02;
  COFD[2108] = -1.74792034E+01;
  COFD[2109] = 4.29676909E+00;
  COFD[2110] = -3.44085306E-01;
  COFD[2111] = 1.49671135E-02;
  COFD[2112] = -1.74984410E+01;
  COFD[2113] = 4.29676909E+00;
  COFD[2114] = -3.44085306E-01;
  COFD[2115] = 1.49671135E-02;
  COFD[2116] = -1.89616566E+01;
  COFD[2117] = 4.68595732E+00;
  COFD[2118] = -3.91842840E-01;
  COFD[2119] = 1.69262542E-02;
  COFD[2120] = -1.42229344E+01;
  COFD[2121] = 3.38669384E+00;
  COFD[2122] = -2.28784122E-01;
  COFD[2123] = 1.00790953E-02;
  COFD[2124] = -2.08812277E+01;
  COFD[2125] = 5.08859217E+00;
  COFD[2126] = -3.90525428E-01;
  COFD[2127] = 1.47376395E-02;
  COFD[2128] = -1.89685112E+01;
  COFD[2129] = 4.68595732E+00;
  COFD[2130] = -3.91842840E-01;
  COFD[2131] = 1.69262542E-02;
  COFD[2132] = -1.89544717E+01;
  COFD[2133] = 4.68595732E+00;
  COFD[2134] = -3.91842840E-01;
  COFD[2135] = 1.69262542E-02;
  COFD[2136] = -1.98646724E+01;
  COFD[2137] = 5.04367502E+00;
  COFD[2138] = -4.34153325E-01;
  COFD[2139] = 1.85956055E-02;
  COFD[2140] = -1.98075051E+01;
  COFD[2141] = 5.02169524E+00;
  COFD[2142] = -4.31582804E-01;
  COFD[2143] = 1.84953568E-02;
  COFD[2144] = -2.16379525E+01;
  COFD[2145] = 5.29019717E+00;
  COFD[2146] = -4.24502606E-01;
  COFD[2147] = 1.65197343E-02;
  COFD[2148] = -1.86157710E+01;
  COFD[2149] = 4.55689508E+00;
  COFD[2150] = -3.75937921E-01;
  COFD[2151] = 1.62703488E-02;
  COFD[2152] = -2.16802565E+01;
  COFD[2153] = 5.52918296E+00;
  COFD[2154] = -4.85360709E-01;
  COFD[2155] = 2.03448006E-02;
  COFD[2156] = -2.12121345E+01;
  COFD[2157] = 5.39823225E+00;
  COFD[2158] = -4.72294645E-01;
  COFD[2159] = 1.99340225E-02;
  COFD[2160] = -2.19327379E+01;
  COFD[2161] = 5.60638188E+00;
  COFD[2162] = -4.91272522E-01;
  COFD[2163] = 2.04396264E-02;
  COFD[2164] = -2.18273535E+01;
  COFD[2165] = 5.55753905E+00;
  COFD[2166] = -4.88136714E-01;
  COFD[2167] = 2.04294957E-02;
  COFD[2168] = -2.20500773E+01;
  COFD[2169] = 5.44448440E+00;
  COFD[2170] = -4.51529024E-01;
  COFD[2171] = 1.79698119E-02;
  COFD[2172] = -2.21885121E+01;
  COFD[2173] = 5.59472344E+00;
  COFD[2174] = -4.91421518E-01;
  COFD[2175] = 2.05117088E-02;
  COFD[2176] = -2.21933965E+01;
  COFD[2177] = 5.59472344E+00;
  COFD[2178] = -4.91421518E-01;
  COFD[2179] = 2.05117088E-02;
  COFD[2180] = -2.25170445E+01;
  COFD[2181] = 5.58249828E+00;
  COFD[2182] = -4.78873376E-01;
  COFD[2183] = 1.95316774E-02;
  COFD[2184] = -2.25141356E+01;
  COFD[2185] = 5.58249828E+00;
  COFD[2186] = -4.78873376E-01;
  COFD[2187] = 1.95316774E-02;
  COFD[2188] = -2.25171753E+01;
  COFD[2189] = 5.58249828E+00;
  COFD[2190] = -4.78873376E-01;
  COFD[2191] = 1.95316774E-02;
  COFD[2192] = -2.24096903E+01;
  COFD[2193] = 5.41604244E+00;
  COFD[2194] = -4.46391067E-01;
  COFD[2195] = 1.76894436E-02;
  COFD[2196] = -2.24117691E+01;
  COFD[2197] = 5.41604244E+00;
  COFD[2198] = -4.46391067E-01;
  COFD[2199] = 1.76894436E-02;
  COFD[2200] = -2.22712203E+01;
  COFD[2201] = 5.27184216E+00;
  COFD[2202] = -4.21373345E-01;
  COFD[2203] = 1.63542609E-02;
  COFD[2204] = -2.21166766E+01;
  COFD[2205] = 5.13519978E+00;
  COFD[2206] = -3.98132825E-01;
  COFD[2207] = 1.51293092E-02;
  COFD[2208] = -2.18596576E+01;
  COFD[2209] = 4.96464859E+00;
  COFD[2210] = -3.70657753E-01;
  COFD[2211] = 1.37267014E-02;
  COFD[2212] = -2.15864547E+01;
  COFD[2213] = 4.79387853E+00;
  COFD[2214] = -3.43720861E-01;
  COFD[2215] = 1.23700578E-02;
  COFD[2216] = -2.15876129E+01;
  COFD[2217] = 4.77996453E+00;
  COFD[2218] = -3.41483820E-01;
  COFD[2219] = 1.22561537E-02;
  COFD[2220] = -2.13890556E+01;
  COFD[2221] = 4.65974918E+00;
  COFD[2222] = -3.22390767E-01;
  COFD[2223] = 1.12918650E-02;
  COFD[2224] = -2.10053277E+01;
  COFD[2225] = 4.40732366E+00;
  COFD[2226] = -2.82889322E-01;
  COFD[2227] = 9.31663975E-03;
  COFD[2228] = -2.08019949E+01;
  COFD[2229] = 4.29990973E+00;
  COFD[2230] = -2.66411377E-01;
  COFD[2231] = 8.50361424E-03;
  COFD[2232] = -2.05654423E+01;
  COFD[2233] = 4.16804380E+00;
  COFD[2234] = -2.46372859E-01;
  COFD[2235] = 7.52105030E-03;
  COFD[2236] = -1.85864196E+01;
  COFD[2237] = 4.54915847E+00;
  COFD[2238] = -3.75000738E-01;
  COFD[2239] = 1.62324821E-02;
  COFD[2240] = -2.15101026E+01;
  COFD[2241] = 4.62311744E+00;
  COFD[2242] = -3.16576672E-01;
  COFD[2243] = 1.09982058E-02;
  COFD[2244] = -1.79345106E+01;
  COFD[2245] = 4.91373893E+00;
  COFD[2246] = -4.18747629E-01;
  COFD[2247] = 1.79856610E-02;
  COFD[2248] = -1.72556425E+01;
  COFD[2249] = 4.17889917E+00;
  COFD[2250] = -3.29752510E-01;
  COFD[2251] = 1.43850275E-02;
  COFD[2252] = -1.72753698E+01;
  COFD[2253] = 4.17889917E+00;
  COFD[2254] = -3.29752510E-01;
  COFD[2255] = 1.43850275E-02;
  COFD[2256] = -1.86499019E+01;
  COFD[2257] = 4.53572533E+00;
  COFD[2258] = -3.73386925E-01;
  COFD[2259] = 1.61678881E-02;
  COFD[2260] = -1.39924933E+01;
  COFD[2261] = 3.26384506E+00;
  COFD[2262] = -2.12947087E-01;
  COFD[2263] = 9.39743888E-03;
  COFD[2264] = -2.12661812E+01;
  COFD[2265] = 5.24930667E+00;
  COFD[2266] = -4.17435088E-01;
  COFD[2267] = 1.61434424E-02;
  COFD[2268] = -1.86570161E+01;
  COFD[2269] = 4.53572533E+00;
  COFD[2270] = -3.73386925E-01;
  COFD[2271] = 1.61678881E-02;
  COFD[2272] = -1.86424488E+01;
  COFD[2273] = 4.53572533E+00;
  COFD[2274] = -3.73386925E-01;
  COFD[2275] = 1.61678881E-02;
  COFD[2276] = -1.95552136E+01;
  COFD[2277] = 4.90255048E+00;
  COFD[2278] = -4.17368501E-01;
  COFD[2279] = 1.79287358E-02;
  COFD[2280] = -1.94823661E+01;
  COFD[2281] = 4.87333294E+00;
  COFD[2282] = -4.13769241E-01;
  COFD[2283] = 1.77802244E-02;
  COFD[2284] = -2.19399756E+01;
  COFD[2285] = 5.41841631E+00;
  COFD[2286] = -4.46818971E-01;
  COFD[2287] = 1.77127652E-02;
  COFD[2288] = -1.83538331E+01;
  COFD[2289] = 4.42828044E+00;
  COFD[2290] = -3.60417833E-01;
  COFD[2291] = 1.56455103E-02;
  COFD[2292] = -2.14326420E+01;
  COFD[2293] = 5.41729961E+00;
  COFD[2294] = -4.73400281E-01;
  COFD[2295] = 1.99269567E-02;
  COFD[2296] = -2.10944068E+01;
  COFD[2297] = 5.34286099E+00;
  COFD[2298] = -4.68100992E-01;
  COFD[2299] = 1.98731399E-02;
  COFD[2300] = -2.18273535E+01;
  COFD[2301] = 5.55753905E+00;
  COFD[2302] = -4.88136714E-01;
  COFD[2303] = 2.04294957E-02;
  COFD[2304] = -2.15746130E+01;
  COFD[2305] = 5.44803850E+00;
  COFD[2306] = -4.76610560E-01;
  COFD[2307] = 2.00355294E-02;
  COFD[2308] = -2.22208668E+01;
  COFD[2309] = 5.51722375E+00;
  COFD[2310] = -4.66081431E-01;
  COFD[2311] = 1.88044011E-02;
  COFD[2312] = -2.19982906E+01;
  COFD[2313] = 5.51276597E+00;
  COFD[2314] = -4.83701824E-01;
  COFD[2315] = 2.02915297E-02;
  COFD[2316] = -2.20033786E+01;
  COFD[2317] = 5.51276597E+00;
  COFD[2318] = -4.83701824E-01;
  COFD[2319] = 2.02915297E-02;
  COFD[2320] = -2.25118138E+01;
  COFD[2321] = 5.58206320E+00;
  COFD[2322] = -4.82956809E-01;
  COFD[2323] = 1.98731634E-02;
  COFD[2324] = -2.25087692E+01;
  COFD[2325] = 5.58206320E+00;
  COFD[2326] = -4.82956809E-01;
  COFD[2327] = 1.98731634E-02;
  COFD[2328] = -2.25119507E+01;
  COFD[2329] = 5.58206320E+00;
  COFD[2330] = -4.82956809E-01;
  COFD[2331] = 1.98731634E-02;
  COFD[2332] = -2.26047176E+01;
  COFD[2333] = 5.50251732E+00;
  COFD[2334] = -4.62858785E-01;
  COFD[2335] = 1.86120573E-02;
  COFD[2336] = -2.26069007E+01;
  COFD[2337] = 5.50251732E+00;
  COFD[2338] = -4.62858785E-01;
  COFD[2339] = 1.86120573E-02;
  COFD[2340] = -2.25784310E+01;
  COFD[2341] = 5.40653540E+00;
  COFD[2342] = -4.44612351E-01;
  COFD[2343] = 1.75906515E-02;
  COFD[2344] = -2.24451961E+01;
  COFD[2345] = 5.27966625E+00;
  COFD[2346] = -4.22746172E-01;
  COFD[2347] = 1.64279811E-02;
  COFD[2348] = -2.23212614E+01;
  COFD[2349] = 5.16629594E+00;
  COFD[2350] = -4.03322392E-01;
  COFD[2351] = 1.53998221E-02;
  COFD[2352] = -2.21433222E+01;
  COFD[2353] = 5.03586935E+00;
  COFD[2354] = -3.81976071E-01;
  COFD[2355] = 1.42995069E-02;
  COFD[2356] = -2.21429975E+01;
  COFD[2357] = 5.02172689E+00;
  COFD[2358] = -3.79713172E-01;
  COFD[2359] = 1.41845745E-02;
  COFD[2360] = -2.19256559E+01;
  COFD[2361] = 4.89350049E+00;
  COFD[2362] = -3.59442064E-01;
  COFD[2363] = 1.31619214E-02;
  COFD[2364] = -2.15962977E+01;
  COFD[2365] = 4.66482266E+00;
  COFD[2366] = -3.23189752E-01;
  COFD[2367] = 1.13320181E-02;
  COFD[2368] = -2.14611157E+01;
  COFD[2369] = 4.58545934E+00;
  COFD[2370] = -3.10556391E-01;
  COFD[2371] = 1.06931834E-02;
  COFD[2372] = -2.12918063E+01;
  COFD[2373] = 4.48188359E+00;
  COFD[2374] = -2.94414571E-01;
  COFD[2375] = 9.88838906E-03;
  COFD[2376] = -1.83249359E+01;
  COFD[2377] = 4.42045763E+00;
  COFD[2378] = -3.59451578E-01;
  COFD[2379] = 1.56056164E-02;
  COFD[2380] = -1.78379202E+01;
  COFD[2381] = 2.81667592E+00;
  COFD[2382] = -4.44112417E-02;
  COFD[2383] = -2.24836515E-03;
  COFD[2384] = -1.94691588E+01;
  COFD[2385] = 5.43830787E+00;
  COFD[2386] = -4.75472880E-01;
  COFD[2387] = 1.99909996E-02;
  COFD[2388] = -1.90915553E+01;
  COFD[2389] = 4.84384483E+00;
  COFD[2390] = -4.10265575E-01;
  COFD[2391] = 1.76414287E-02;
  COFD[2392] = -1.91136407E+01;
  COFD[2393] = 4.84384483E+00;
  COFD[2394] = -4.10265575E-01;
  COFD[2395] = 1.76414287E-02;
  COFD[2396] = -2.05324009E+01;
  COFD[2397] = 5.18417470E+00;
  COFD[2398] = -4.49491573E-01;
  COFD[2399] = 1.91438508E-02;
  COFD[2400] = -1.57040365E+01;
  COFD[2401] = 3.93614244E+00;
  COFD[2402] = -2.99111497E-01;
  COFD[2403] = 1.30888229E-02;
  COFD[2404] = -1.87419126E+01;
  COFD[2405] = 3.96926341E+00;
  COFD[2406] = -2.16412264E-01;
  COFD[2407] = 6.06012078E-03;
  COFD[2408] = -2.05408587E+01;
  COFD[2409] = 5.18417470E+00;
  COFD[2410] = -4.49491573E-01;
  COFD[2411] = 1.91438508E-02;
  COFD[2412] = -2.05235643E+01;
  COFD[2413] = 5.18417470E+00;
  COFD[2414] = -4.49491573E-01;
  COFD[2415] = 1.91438508E-02;
  COFD[2416] = -2.11637883E+01;
  COFD[2417] = 5.42846112E+00;
  COFD[2418] = -4.74321870E-01;
  COFD[2419] = 1.99459749E-02;
  COFD[2420] = -2.11341641E+01;
  COFD[2421] = 5.41773516E+00;
  COFD[2422] = -4.73414338E-01;
  COFD[2423] = 1.99258685E-02;
  COFD[2424] = -2.01064300E+01;
  COFD[2425] = 4.41511629E+00;
  COFD[2426] = -2.84086963E-01;
  COFD[2427] = 9.37586971E-03;
  COFD[2428] = -2.02969667E+01;
  COFD[2429] = 5.11106992E+00;
  COFD[2430] = -4.42047129E-01;
  COFD[2431] = 1.89042990E-02;
  COFD[2432] = -2.22176875E+01;
  COFD[2433] = 5.54251230E+00;
  COFD[2434] = -4.70946314E-01;
  COFD[2435] = 1.90785869E-02;
  COFD[2436] = -2.21110249E+01;
  COFD[2437] = 5.58360799E+00;
  COFD[2438] = -4.82701436E-01;
  COFD[2439] = 1.98437922E-02;
  COFD[2440] = -2.20500773E+01;
  COFD[2441] = 5.44448440E+00;
  COFD[2442] = -4.51529024E-01;
  COFD[2443] = 1.79698119E-02;
  COFD[2444] = -2.22208668E+01;
  COFD[2445] = 5.51722375E+00;
  COFD[2446] = -4.66081431E-01;
  COFD[2447] = 1.88044011E-02;
  COFD[2448] = -2.09121160E+01;
  COFD[2449] = 4.72895031E+00;
  COFD[2450] = -3.33332771E-01;
  COFD[2451] = 1.18431478E-02;
  COFD[2452] = -2.24612680E+01;
  COFD[2453] = 5.49330641E+00;
  COFD[2454] = -4.60498247E-01;
  COFD[2455] = 1.84639199E-02;
  COFD[2456] = -2.24674347E+01;
  COFD[2457] = 5.49330641E+00;
  COFD[2458] = -4.60498247E-01;
  COFD[2459] = 1.84639199E-02;
  COFD[2460] = -2.20420791E+01;
  COFD[2461] = 5.14570932E+00;
  COFD[2462] = -3.99877142E-01;
  COFD[2463] = 1.52199557E-02;
  COFD[2464] = -2.20382941E+01;
  COFD[2465] = 5.14570932E+00;
  COFD[2466] = -3.99877142E-01;
  COFD[2467] = 1.52199557E-02;
  COFD[2468] = -2.20422494E+01;
  COFD[2469] = 5.14570932E+00;
  COFD[2470] = -3.99877142E-01;
  COFD[2471] = 1.52199557E-02;
  COFD[2472] = -2.12138975E+01;
  COFD[2473] = 4.66550450E+00;
  COFD[2474] = -3.23297137E-01;
  COFD[2475] = 1.13374150E-02;
  COFD[2476] = -2.12166627E+01;
  COFD[2477] = 4.66550450E+00;
  COFD[2478] = -3.23297137E-01;
  COFD[2479] = 1.13374150E-02;
  COFD[2480] = -2.07454253E+01;
  COFD[2481] = 4.37720767E+00;
  COFD[2482] = -2.78259024E-01;
  COFD[2483] = 9.08774918E-03;
  COFD[2484] = -2.01683835E+01;
  COFD[2485] = 4.06006798E+00;
  COFD[2486] = -2.30066357E-01;
  COFD[2487] = 6.72473245E-03;
  COFD[2488] = -1.97003035E+01;
  COFD[2489] = 3.79996103E+00;
  COFD[2490] = -1.90497694E-01;
  COFD[2491] = 4.78603172E-03;
  COFD[2492] = -1.92768391E+01;
  COFD[2493] = 3.56517881E+00;
  COFD[2494] = -1.54966016E-01;
  COFD[2495] = 3.05232702E-03;
  COFD[2496] = -1.92450104E+01;
  COFD[2497] = 3.53733698E+00;
  COFD[2498] = -1.50812570E-01;
  COFD[2499] = 2.85140727E-03;
  COFD[2500] = -1.88405662E+01;
  COFD[2501] = 3.33125761E+00;
  COFD[2502] = -1.20168824E-01;
  COFD[2503] = 1.37545815E-03;
  COFD[2504] = -1.80427104E+01;
  COFD[2505] = 2.90760528E+00;
  COFD[2506] = -5.77438179E-02;
  COFD[2507] = -1.61157463E-03;
  COFD[2508] = -1.76677009E+01;
  COFD[2509] = 2.72650149E+00;
  COFD[2510] = -3.11601195E-02;
  COFD[2511] = -2.88242823E-03;
  COFD[2512] = -1.73379092E+01;
  COFD[2513] = 2.55561949E+00;
  COFD[2514] = -5.90530207E-03;
  COFD[2515] = -4.09393782E-03;
  COFD[2516] = -2.02693704E+01;
  COFD[2517] = 5.10426133E+00;
  COFD[2518] = -4.41256919E-01;
  COFD[2519] = 1.88737290E-02;
  COFD[2520] = -2.15057005E+01;
  COFD[2521] = 4.49401210E+00;
  COFD[2522] = -2.96300228E-01;
  COFD[2523] = 9.98228772E-03;
  COFD[2524] = -1.83539845E+01;
  COFD[2525] = 4.98756925E+00;
  COFD[2526] = -4.27526072E-01;
  COFD[2527] = 1.83341755E-02;
  COFD[2528] = -1.76774947E+01;
  COFD[2529] = 4.24719726E+00;
  COFD[2530] = -3.38206061E-01;
  COFD[2531] = 1.47350654E-02;
  COFD[2532] = -1.76992903E+01;
  COFD[2533] = 4.24719726E+00;
  COFD[2534] = -3.38206061E-01;
  COFD[2535] = 1.47350654E-02;
  COFD[2536] = -1.91208247E+01;
  COFD[2537] = 4.61801405E+00;
  COFD[2538] = -3.83535652E-01;
  COFD[2539] = 1.65862513E-02;
  COFD[2540] = -1.43129867E+01;
  COFD[2541] = 3.31177824E+00;
  COFD[2542] = -2.18945280E-01;
  COFD[2543] = 9.64764419E-03;
  COFD[2544] = -2.13847376E+01;
  COFD[2545] = 5.17440955E+00;
  COFD[2546] = -4.04678430E-01;
  COFD[2547] = 1.54706350E-02;
  COFD[2548] = -1.91291085E+01;
  COFD[2549] = 4.61801405E+00;
  COFD[2550] = -3.83535652E-01;
  COFD[2551] = 1.65862513E-02;
  COFD[2552] = -1.91121670E+01;
  COFD[2553] = 4.61801405E+00;
  COFD[2554] = -3.83535652E-01;
  COFD[2555] = 1.65862513E-02;
  COFD[2556] = -1.99803480E+01;
  COFD[2557] = 4.97875278E+00;
  COFD[2558] = -4.26485475E-01;
  COFD[2559] = 1.82931933E-02;
  COFD[2560] = -1.99235836E+01;
  COFD[2561] = 4.95514826E+00;
  COFD[2562] = -4.23691395E-01;
  COFD[2563] = 1.81828318E-02;
  COFD[2564] = -2.20947854E+01;
  COFD[2565] = 5.36053938E+00;
  COFD[2566] = -4.36434519E-01;
  COFD[2567] = 1.71484255E-02;
  COFD[2568] = -1.87684982E+01;
  COFD[2569] = 4.49191492E+00;
  COFD[2570] = -3.68041771E-01;
  COFD[2571] = 1.59498676E-02;
  COFD[2572] = -2.18590684E+01;
  COFD[2573] = 5.47368915E+00;
  COFD[2574] = -4.79424291E-01;
  COFD[2575] = 2.01372920E-02;
  COFD[2576] = -2.14323161E+01;
  COFD[2577] = 5.37331605E+00;
  COFD[2578] = -4.70491203E-01;
  COFD[2579] = 1.99134666E-02;
  COFD[2580] = -2.21885121E+01;
  COFD[2581] = 5.59472344E+00;
  COFD[2582] = -4.91421518E-01;
  COFD[2583] = 2.05117088E-02;
  COFD[2584] = -2.19982906E+01;
  COFD[2585] = 5.51276597E+00;
  COFD[2586] = -4.83701824E-01;
  COFD[2587] = 2.02915297E-02;
  COFD[2588] = -2.24612680E+01;
  COFD[2589] = 5.49330641E+00;
  COFD[2590] = -4.60498247E-01;
  COFD[2591] = 1.84639199E-02;
  COFD[2592] = -2.23842793E+01;
  COFD[2593] = 5.56066804E+00;
  COFD[2594] = -4.88405706E-01;
  COFD[2595] = 2.04357330E-02;
  COFD[2596] = -2.23903039E+01;
  COFD[2597] = 5.56066804E+00;
  COFD[2598] = -4.88405706E-01;
  COFD[2599] = 2.04357330E-02;
  COFD[2600] = -2.28055286E+01;
  COFD[2601] = 5.58523510E+00;
  COFD[2602] = -4.81201481E-01;
  COFD[2603] = 1.97107111E-02;
  COFD[2604] = -2.28018434E+01;
  COFD[2605] = 5.58523510E+00;
  COFD[2606] = -4.81201481E-01;
  COFD[2607] = 1.97107111E-02;
  COFD[2608] = -2.28056945E+01;
  COFD[2609] = 5.58523510E+00;
  COFD[2610] = -4.81201481E-01;
  COFD[2611] = 1.97107111E-02;
  COFD[2612] = -2.28142710E+01;
  COFD[2613] = 5.46711245E+00;
  COFD[2614] = -4.55648352E-01;
  COFD[2615] = 1.81956544E-02;
  COFD[2616] = -2.28169566E+01;
  COFD[2617] = 5.46711245E+00;
  COFD[2618] = -4.55648352E-01;
  COFD[2619] = 1.81956544E-02;
  COFD[2620] = -2.27264067E+01;
  COFD[2621] = 5.34358207E+00;
  COFD[2622] = -4.33525531E-01;
  COFD[2623] = 1.69942087E-02;
  COFD[2624] = -2.25883284E+01;
  COFD[2625] = 5.21373152E+00;
  COFD[2626] = -4.11240905E-01;
  COFD[2627] = 1.58129026E-02;
  COFD[2628] = -2.23956511E+01;
  COFD[2629] = 5.07018801E+00;
  COFD[2630] = -3.87535402E-01;
  COFD[2631] = 1.45842225E-02;
  COFD[2632] = -2.21481001E+01;
  COFD[2633] = 4.91019065E+00;
  COFD[2634] = -3.62076012E-01;
  COFD[2635] = 1.32946182E-02;
  COFD[2636] = -2.21417169E+01;
  COFD[2637] = 4.89399517E+00;
  COFD[2638] = -3.59520327E-01;
  COFD[2639] = 1.31658681E-02;
  COFD[2640] = -2.19360355E+01;
  COFD[2641] = 4.77045497E+00;
  COFD[2642] = -3.39955491E-01;
  COFD[2643] = 1.21784372E-02;
  COFD[2644] = -2.16062590E+01;
  COFD[2645] = 4.54192945E+00;
  COFD[2646] = -3.03755204E-01;
  COFD[2647] = 1.03536977E-02;
  COFD[2648] = -2.14350667E+01;
  COFD[2649] = 4.44599921E+00;
  COFD[2650] = -2.88841525E-01;
  COFD[2651] = 9.61119142E-03;
  COFD[2652] = -2.12290046E+01;
  COFD[2653] = 4.32707381E+00;
  COFD[2654] = -2.70563830E-01;
  COFD[2655] = 8.70791456E-03;
  COFD[2656] = -1.87434421E+01;
  COFD[2657] = 4.48550694E+00;
  COFD[2658] = -3.67277454E-01;
  COFD[2659] = 1.59194755E-02;
  COFD[2660] = -2.15154449E+01;
  COFD[2661] = 4.49401210E+00;
  COFD[2662] = -2.96300228E-01;
  COFD[2663] = 9.98228772E-03;
  COFD[2664] = -1.83542714E+01;
  COFD[2665] = 4.98756925E+00;
  COFD[2666] = -4.27526072E-01;
  COFD[2667] = 1.83341755E-02;
  COFD[2668] = -1.76808635E+01;
  COFD[2669] = 4.24719726E+00;
  COFD[2670] = -3.38206061E-01;
  COFD[2671] = 1.47350654E-02;
  COFD[2672] = -1.77028097E+01;
  COFD[2673] = 4.24719726E+00;
  COFD[2674] = -3.38206061E-01;
  COFD[2675] = 1.47350654E-02;
  COFD[2676] = -1.91261897E+01;
  COFD[2677] = 4.61801405E+00;
  COFD[2678] = -3.83535652E-01;
  COFD[2679] = 1.65862513E-02;
  COFD[2680] = -1.43135474E+01;
  COFD[2681] = 3.31177824E+00;
  COFD[2682] = -2.18945280E-01;
  COFD[2683] = 9.64764419E-03;
  COFD[2684] = -2.13884026E+01;
  COFD[2685] = 5.17440955E+00;
  COFD[2686] = -4.04678430E-01;
  COFD[2687] = 1.54706350E-02;
  COFD[2688] = -1.91345636E+01;
  COFD[2689] = 4.61801405E+00;
  COFD[2690] = -3.83535652E-01;
  COFD[2691] = 1.65862513E-02;
  COFD[2692] = -1.91174394E+01;
  COFD[2693] = 4.61801405E+00;
  COFD[2694] = -3.83535652E-01;
  COFD[2695] = 1.65862513E-02;
  COFD[2696] = -1.99835677E+01;
  COFD[2697] = 4.97875278E+00;
  COFD[2698] = -4.26485475E-01;
  COFD[2699] = 1.82931933E-02;
  COFD[2700] = -1.99269591E+01;
  COFD[2701] = 4.95514826E+00;
  COFD[2702] = -4.23691395E-01;
  COFD[2703] = 1.81828318E-02;
  COFD[2704] = -2.20998692E+01;
  COFD[2705] = 5.36053938E+00;
  COFD[2706] = -4.36434519E-01;
  COFD[2707] = 1.71484255E-02;
  COFD[2708] = -1.87733780E+01;
  COFD[2709] = 4.49191492E+00;
  COFD[2710] = -3.68041771E-01;
  COFD[2711] = 1.59498676E-02;
  COFD[2712] = -2.18653022E+01;
  COFD[2713] = 5.47368915E+00;
  COFD[2714] = -4.79424291E-01;
  COFD[2715] = 2.01372920E-02;
  COFD[2716] = -2.14369847E+01;
  COFD[2717] = 5.37331605E+00;
  COFD[2718] = -4.70491203E-01;
  COFD[2719] = 1.99134666E-02;
  COFD[2720] = -2.21933965E+01;
  COFD[2721] = 5.59472344E+00;
  COFD[2722] = -4.91421518E-01;
  COFD[2723] = 2.05117088E-02;
  COFD[2724] = -2.20033786E+01;
  COFD[2725] = 5.51276597E+00;
  COFD[2726] = -4.83701824E-01;
  COFD[2727] = 2.02915297E-02;
  COFD[2728] = -2.24674347E+01;
  COFD[2729] = 5.49330641E+00;
  COFD[2730] = -4.60498247E-01;
  COFD[2731] = 1.84639199E-02;
  COFD[2732] = -2.23903039E+01;
  COFD[2733] = 5.56066804E+00;
  COFD[2734] = -4.88405706E-01;
  COFD[2735] = 2.04357330E-02;
  COFD[2736] = -2.23964020E+01;
  COFD[2737] = 5.56066804E+00;
  COFD[2738] = -4.88405706E-01;
  COFD[2739] = 2.04357330E-02;
  COFD[2740] = -2.28124895E+01;
  COFD[2741] = 5.58523510E+00;
  COFD[2742] = -4.81201481E-01;
  COFD[2743] = 1.97107111E-02;
  COFD[2744] = -2.28087528E+01;
  COFD[2745] = 5.58523510E+00;
  COFD[2746] = -4.81201481E-01;
  COFD[2747] = 1.97107111E-02;
  COFD[2748] = -2.28126577E+01;
  COFD[2749] = 5.58523510E+00;
  COFD[2750] = -4.81201481E-01;
  COFD[2751] = 1.97107111E-02;
  COFD[2752] = -2.28218410E+01;
  COFD[2753] = 5.46711245E+00;
  COFD[2754] = -4.55648352E-01;
  COFD[2755] = 1.81956544E-02;
  COFD[2756] = -2.28245676E+01;
  COFD[2757] = 5.46711245E+00;
  COFD[2758] = -4.55648352E-01;
  COFD[2759] = 1.81956544E-02;
  COFD[2760] = -2.27345210E+01;
  COFD[2761] = 5.34358207E+00;
  COFD[2762] = -4.33525531E-01;
  COFD[2763] = 1.69942087E-02;
  COFD[2764] = -2.25968450E+01;
  COFD[2765] = 5.21373152E+00;
  COFD[2766] = -4.11240905E-01;
  COFD[2767] = 1.58129026E-02;
  COFD[2768] = -2.24044966E+01;
  COFD[2769] = 5.07018801E+00;
  COFD[2770] = -3.87535402E-01;
  COFD[2771] = 1.45842225E-02;
  COFD[2772] = -2.21572195E+01;
  COFD[2773] = 4.91019065E+00;
  COFD[2774] = -3.62076012E-01;
  COFD[2775] = 1.32946182E-02;
  COFD[2776] = -2.21508543E+01;
  COFD[2777] = 4.89399517E+00;
  COFD[2778] = -3.59520327E-01;
  COFD[2779] = 1.31658681E-02;
  COFD[2780] = -2.19453866E+01;
  COFD[2781] = 4.77045497E+00;
  COFD[2782] = -3.39955491E-01;
  COFD[2783] = 1.21784372E-02;
  COFD[2784] = -2.16159805E+01;
  COFD[2785] = 4.54192945E+00;
  COFD[2786] = -3.03755204E-01;
  COFD[2787] = 1.03536977E-02;
  COFD[2788] = -2.14451145E+01;
  COFD[2789] = 4.44599921E+00;
  COFD[2790] = -2.88841525E-01;
  COFD[2791] = 9.61119142E-03;
  COFD[2792] = -2.12391730E+01;
  COFD[2793] = 4.32707381E+00;
  COFD[2794] = -2.70563830E-01;
  COFD[2795] = 8.70791456E-03;
  COFD[2796] = -1.87483223E+01;
  COFD[2797] = 4.48550694E+00;
  COFD[2798] = -3.67277454E-01;
  COFD[2799] = 1.59194755E-02;
  COFD[2800] = -1.98610330E+01;
  COFD[2801] = 3.61510430E+00;
  COFD[2802] = -1.62429647E-01;
  COFD[2803] = 3.41379096E-03;
  COFD[2804] = -1.94091246E+01;
  COFD[2805] = 5.32291505E+00;
  COFD[2806] = -4.65883522E-01;
  COFD[2807] = 1.97916109E-02;
  COFD[2808] = -1.87877888E+01;
  COFD[2809] = 4.61260432E+00;
  COFD[2810] = -3.82854484E-01;
  COFD[2811] = 1.65575163E-02;
  COFD[2812] = -1.88113928E+01;
  COFD[2813] = 4.61260432E+00;
  COFD[2814] = -3.82854484E-01;
  COFD[2815] = 1.65575163E-02;
  COFD[2816] = -2.02564700E+01;
  COFD[2817] = 4.97613338E+00;
  COFD[2818] = -4.26175206E-01;
  COFD[2819] = 1.82809270E-02;
  COFD[2820] = -1.52614209E+01;
  COFD[2821] = 3.64565939E+00;
  COFD[2822] = -2.61726871E-01;
  COFD[2823] = 1.14799244E-02;
  COFD[2824] = -2.03436817E+01;
  COFD[2825] = 4.57152878E+00;
  COFD[2826] = -3.08371263E-01;
  COFD[2827] = 1.05838559E-02;
  COFD[2828] = -2.02658847E+01;
  COFD[2829] = 4.97613338E+00;
  COFD[2830] = -4.26175206E-01;
  COFD[2831] = 1.82809270E-02;
  COFD[2832] = -2.02466527E+01;
  COFD[2833] = 4.97613338E+00;
  COFD[2834] = -4.26175206E-01;
  COFD[2835] = 1.82809270E-02;
  COFD[2836] = -2.10571697E+01;
  COFD[2837] = 5.31360223E+00;
  COFD[2838] = -4.64787000E-01;
  COFD[2839] = 1.97483720E-02;
  COFD[2840] = -2.09912117E+01;
  COFD[2841] = 5.28557747E+00;
  COFD[2842] = -4.61402384E-01;
  COFD[2843] = 1.96111546E-02;
  COFD[2844] = -2.13351219E+01;
  COFD[2845] = 4.87252053E+00;
  COFD[2846] = -3.56127804E-01;
  COFD[2847] = 1.29948788E-02;
  COFD[2848] = -1.98830863E+01;
  COFD[2849] = 4.84731557E+00;
  COFD[2850] = -4.10638352E-01;
  COFD[2851] = 1.76543886E-02;
  COFD[2852] = -2.25016971E+01;
  COFD[2853] = 5.59178974E+00;
  COFD[2854] = -4.85668031E-01;
  COFD[2855] = 2.00491907E-02;
  COFD[2856] = -2.22816073E+01;
  COFD[2857] = 5.59185582E+00;
  COFD[2858] = -4.91155812E-01;
  COFD[2859] = 2.05043018E-02;
  COFD[2860] = -2.25170445E+01;
  COFD[2861] = 5.58249828E+00;
  COFD[2862] = -4.78873376E-01;
  COFD[2863] = 1.95316774E-02;
  COFD[2864] = -2.25118138E+01;
  COFD[2865] = 5.58206320E+00;
  COFD[2866] = -4.82956809E-01;
  COFD[2867] = 1.98731634E-02;
  COFD[2868] = -2.20420791E+01;
  COFD[2869] = 5.14570932E+00;
  COFD[2870] = -3.99877142E-01;
  COFD[2871] = 1.52199557E-02;
  COFD[2872] = -2.28055286E+01;
  COFD[2873] = 5.58523510E+00;
  COFD[2874] = -4.81201481E-01;
  COFD[2875] = 1.97107111E-02;
  COFD[2876] = -2.28124895E+01;
  COFD[2877] = 5.58523510E+00;
  COFD[2878] = -4.81201481E-01;
  COFD[2879] = 1.97107111E-02;
  COFD[2880] = -2.27782105E+01;
  COFD[2881] = 5.40563818E+00;
  COFD[2882] = -4.44444322E-01;
  COFD[2883] = 1.75813146E-02;
  COFD[2884] = -2.27738556E+01;
  COFD[2885] = 5.40563818E+00;
  COFD[2886] = -4.44444322E-01;
  COFD[2887] = 1.75813146E-02;
  COFD[2888] = -2.27784066E+01;
  COFD[2889] = 5.40563818E+00;
  COFD[2890] = -4.44444322E-01;
  COFD[2891] = 1.75813146E-02;
  COFD[2892] = -2.23528150E+01;
  COFD[2893] = 5.09597242E+00;
  COFD[2894] = -3.91720233E-01;
  COFD[2895] = 1.47988554E-02;
  COFD[2896] = -2.23560436E+01;
  COFD[2897] = 5.09597242E+00;
  COFD[2898] = -3.91720233E-01;
  COFD[2899] = 1.47988554E-02;
  COFD[2900] = -2.19668378E+01;
  COFD[2901] = 4.84253971E+00;
  COFD[2902] = -3.51393460E-01;
  COFD[2903] = 1.27562727E-02;
  COFD[2904] = -2.16264924E+01;
  COFD[2905] = 4.62444880E+00;
  COFD[2906] = -3.16789032E-01;
  COFD[2907] = 1.10089656E-02;
  COFD[2908] = -2.12774421E+01;
  COFD[2909] = 4.41372939E+00;
  COFD[2910] = -2.83873783E-01;
  COFD[2911] = 9.36532569E-03;
  COFD[2912] = -2.08875172E+01;
  COFD[2913] = 4.19325533E+00;
  COFD[2914] = -2.50186251E-01;
  COFD[2915] = 7.70758812E-03;
  COFD[2916] = -2.08615626E+01;
  COFD[2917] = 4.16888533E+00;
  COFD[2918] = -2.46500133E-01;
  COFD[2919] = 7.52727544E-03;
  COFD[2920] = -2.04884449E+01;
  COFD[2921] = 3.97419032E+00;
  COFD[2922] = -2.17151244E-01;
  COFD[2923] = 6.09602105E-03;
  COFD[2924] = -2.00028585E+01;
  COFD[2925] = 3.68035914E+00;
  COFD[2926] = -1.72246313E-01;
  COFD[2927] = 3.89112485E-03;
  COFD[2928] = -1.97359634E+01;
  COFD[2929] = 3.54254584E+00;
  COFD[2930] = -1.51588685E-01;
  COFD[2931] = 2.88891088E-03;
  COFD[2932] = -1.94433367E+01;
  COFD[2933] = 3.38805125E+00;
  COFD[2934] = -1.28605694E-01;
  COFD[2935] = 1.78139928E-03;
  COFD[2936] = -1.98609159E+01;
  COFD[2937] = 4.84231878E+00;
  COFD[2938] = -4.10101001E-01;
  COFD[2939] = 1.76356687E-02;
  COFD[2940] = -1.98544943E+01;
  COFD[2941] = 3.61510430E+00;
  COFD[2942] = -1.62429647E-01;
  COFD[2943] = 3.41379096E-03;
  COFD[2944] = -1.94089702E+01;
  COFD[2945] = 5.32291505E+00;
  COFD[2946] = -4.65883522E-01;
  COFD[2947] = 1.97916109E-02;
  COFD[2948] = -1.87858504E+01;
  COFD[2949] = 4.61260432E+00;
  COFD[2950] = -3.82854484E-01;
  COFD[2951] = 1.65575163E-02;
  COFD[2952] = -1.88093609E+01;
  COFD[2953] = 4.61260432E+00;
  COFD[2954] = -3.82854484E-01;
  COFD[2955] = 1.65575163E-02;
  COFD[2956] = -2.02532389E+01;
  COFD[2957] = 4.97613338E+00;
  COFD[2958] = -4.26175206E-01;
  COFD[2959] = 1.82809270E-02;
  COFD[2960] = -1.52611173E+01;
  COFD[2961] = 3.64565939E+00;
  COFD[2962] = -2.61726871E-01;
  COFD[2963] = 1.14799244E-02;
  COFD[2964] = -2.03415589E+01;
  COFD[2965] = 4.57152878E+00;
  COFD[2966] = -3.08371263E-01;
  COFD[2967] = 1.05838559E-02;
  COFD[2968] = -2.02625924E+01;
  COFD[2969] = 4.97613338E+00;
  COFD[2970] = -4.26175206E-01;
  COFD[2971] = 1.82809270E-02;
  COFD[2972] = -2.02434842E+01;
  COFD[2973] = 4.97613338E+00;
  COFD[2974] = -4.26175206E-01;
  COFD[2975] = 1.82809270E-02;
  COFD[2976] = -2.10553233E+01;
  COFD[2977] = 5.31360223E+00;
  COFD[2978] = -4.64787000E-01;
  COFD[2979] = 1.97483720E-02;
  COFD[2980] = -2.09892692E+01;
  COFD[2981] = 5.28557747E+00;
  COFD[2982] = -4.61402384E-01;
  COFD[2983] = 1.96111546E-02;
  COFD[2984] = -2.13320802E+01;
  COFD[2985] = 4.87252053E+00;
  COFD[2986] = -3.56127804E-01;
  COFD[2987] = 1.29948788E-02;
  COFD[2988] = -1.98801803E+01;
  COFD[2989] = 4.84731557E+00;
  COFD[2990] = -4.10638352E-01;
  COFD[2991] = 1.76543886E-02;
  COFD[2992] = -2.24978649E+01;
  COFD[2993] = 5.59178974E+00;
  COFD[2994] = -4.85668031E-01;
  COFD[2995] = 2.00491907E-02;
  COFD[2996] = -2.22788407E+01;
  COFD[2997] = 5.59185582E+00;
  COFD[2998] = -4.91155812E-01;
  COFD[2999] = 2.05043018E-02;
  COFD[3000] = -2.25141356E+01;
  COFD[3001] = 5.58249828E+00;
  COFD[3002] = -4.78873376E-01;
  COFD[3003] = 1.95316774E-02;
  COFD[3004] = -2.25087692E+01;
  COFD[3005] = 5.58206320E+00;
  COFD[3006] = -4.82956809E-01;
  COFD[3007] = 1.98731634E-02;
  COFD[3008] = -2.20382941E+01;
  COFD[3009] = 5.14570932E+00;
  COFD[3010] = -3.99877142E-01;
  COFD[3011] = 1.52199557E-02;
  COFD[3012] = -2.28018434E+01;
  COFD[3013] = 5.58523510E+00;
  COFD[3014] = -4.81201481E-01;
  COFD[3015] = 1.97107111E-02;
  COFD[3016] = -2.28087528E+01;
  COFD[3017] = 5.58523510E+00;
  COFD[3018] = -4.81201481E-01;
  COFD[3019] = 1.97107111E-02;
  COFD[3020] = -2.27738556E+01;
  COFD[3021] = 5.40563818E+00;
  COFD[3022] = -4.44444322E-01;
  COFD[3023] = 1.75813146E-02;
  COFD[3024] = -2.27695384E+01;
  COFD[3025] = 5.40563818E+00;
  COFD[3026] = -4.44444322E-01;
  COFD[3027] = 1.75813146E-02;
  COFD[3028] = -2.27740500E+01;
  COFD[3029] = 5.40563818E+00;
  COFD[3030] = -4.44444322E-01;
  COFD[3031] = 1.75813146E-02;
  COFD[3032] = -2.23480079E+01;
  COFD[3033] = 5.09597242E+00;
  COFD[3034] = -3.91720233E-01;
  COFD[3035] = 1.47988554E-02;
  COFD[3036] = -2.23512055E+01;
  COFD[3037] = 5.09597242E+00;
  COFD[3038] = -3.91720233E-01;
  COFD[3039] = 1.47988554E-02;
  COFD[3040] = -2.19616149E+01;
  COFD[3041] = 4.84253971E+00;
  COFD[3042] = -3.51393460E-01;
  COFD[3043] = 1.27562727E-02;
  COFD[3044] = -2.16209549E+01;
  COFD[3045] = 4.62444880E+00;
  COFD[3046] = -3.16789032E-01;
  COFD[3047] = 1.10089656E-02;
  COFD[3048] = -2.12716426E+01;
  COFD[3049] = 4.41372939E+00;
  COFD[3050] = -2.83873783E-01;
  COFD[3051] = 9.36532569E-03;
  COFD[3052] = -2.08814960E+01;
  COFD[3053] = 4.19325533E+00;
  COFD[3054] = -2.50186251E-01;
  COFD[3055] = 7.70758812E-03;
  COFD[3056] = -2.08555268E+01;
  COFD[3057] = 4.16888533E+00;
  COFD[3058] = -2.46500133E-01;
  COFD[3059] = 7.52727544E-03;
  COFD[3060] = -2.04822338E+01;
  COFD[3061] = 3.97419032E+00;
  COFD[3062] = -2.17151244E-01;
  COFD[3063] = 6.09602105E-03;
  COFD[3064] = -1.99963391E+01;
  COFD[3065] = 3.68035914E+00;
  COFD[3066] = -1.72246313E-01;
  COFD[3067] = 3.89112485E-03;
  COFD[3068] = -1.97291674E+01;
  COFD[3069] = 3.54254584E+00;
  COFD[3070] = -1.51588685E-01;
  COFD[3071] = 2.88891088E-03;
  COFD[3072] = -1.94364373E+01;
  COFD[3073] = 3.38805125E+00;
  COFD[3074] = -1.28605694E-01;
  COFD[3075] = 1.78139928E-03;
  COFD[3076] = -1.98580097E+01;
  COFD[3077] = 4.84231878E+00;
  COFD[3078] = -4.10101001E-01;
  COFD[3079] = 1.76356687E-02;
  COFD[3080] = -1.98613280E+01;
  COFD[3081] = 3.61510430E+00;
  COFD[3082] = -1.62429647E-01;
  COFD[3083] = 3.41379096E-03;
  COFD[3084] = -1.94091316E+01;
  COFD[3085] = 5.32291505E+00;
  COFD[3086] = -4.65883522E-01;
  COFD[3087] = 1.97916109E-02;
  COFD[3088] = -1.87878758E+01;
  COFD[3089] = 4.61260432E+00;
  COFD[3090] = -3.82854484E-01;
  COFD[3091] = 1.65575163E-02;
  COFD[3092] = -1.88114840E+01;
  COFD[3093] = 4.61260432E+00;
  COFD[3094] = -3.82854484E-01;
  COFD[3095] = 1.65575163E-02;
  COFD[3096] = -2.02566153E+01;
  COFD[3097] = 4.97613338E+00;
  COFD[3098] = -4.26175206E-01;
  COFD[3099] = 1.82809270E-02;
  COFD[3100] = -1.52614345E+01;
  COFD[3101] = 3.64565939E+00;
  COFD[3102] = -2.61726871E-01;
  COFD[3103] = 1.14799244E-02;
  COFD[3104] = -2.03437771E+01;
  COFD[3105] = 4.57152878E+00;
  COFD[3106] = -3.08371263E-01;
  COFD[3107] = 1.05838559E-02;
  COFD[3108] = -2.02660328E+01;
  COFD[3109] = 4.97613338E+00;
  COFD[3110] = -4.26175206E-01;
  COFD[3111] = 1.82809270E-02;
  COFD[3112] = -2.02467952E+01;
  COFD[3113] = 4.97613338E+00;
  COFD[3114] = -4.26175206E-01;
  COFD[3115] = 1.82809270E-02;
  COFD[3116] = -2.10572526E+01;
  COFD[3117] = 5.31360223E+00;
  COFD[3118] = -4.64787000E-01;
  COFD[3119] = 1.97483720E-02;
  COFD[3120] = -2.09912989E+01;
  COFD[3121] = 5.28557747E+00;
  COFD[3122] = -4.61402384E-01;
  COFD[3123] = 1.96111546E-02;
  COFD[3124] = -2.13352587E+01;
  COFD[3125] = 4.87252053E+00;
  COFD[3126] = -3.56127804E-01;
  COFD[3127] = 1.29948788E-02;
  COFD[3128] = -1.98832169E+01;
  COFD[3129] = 4.84731557E+00;
  COFD[3130] = -4.10638352E-01;
  COFD[3131] = 1.76543886E-02;
  COFD[3132] = -2.25018696E+01;
  COFD[3133] = 5.59178974E+00;
  COFD[3134] = -4.85668031E-01;
  COFD[3135] = 2.00491907E-02;
  COFD[3136] = -2.22817317E+01;
  COFD[3137] = 5.59185582E+00;
  COFD[3138] = -4.91155812E-01;
  COFD[3139] = 2.05043018E-02;
  COFD[3140] = -2.25171753E+01;
  COFD[3141] = 5.58249828E+00;
  COFD[3142] = -4.78873376E-01;
  COFD[3143] = 1.95316774E-02;
  COFD[3144] = -2.25119507E+01;
  COFD[3145] = 5.58206320E+00;
  COFD[3146] = -4.82956809E-01;
  COFD[3147] = 1.98731634E-02;
  COFD[3148] = -2.20422494E+01;
  COFD[3149] = 5.14570932E+00;
  COFD[3150] = -3.99877142E-01;
  COFD[3151] = 1.52199557E-02;
  COFD[3152] = -2.28056945E+01;
  COFD[3153] = 5.58523510E+00;
  COFD[3154] = -4.81201481E-01;
  COFD[3155] = 1.97107111E-02;
  COFD[3156] = -2.28126577E+01;
  COFD[3157] = 5.58523510E+00;
  COFD[3158] = -4.81201481E-01;
  COFD[3159] = 1.97107111E-02;
  COFD[3160] = -2.27784066E+01;
  COFD[3161] = 5.40563818E+00;
  COFD[3162] = -4.44444322E-01;
  COFD[3163] = 1.75813146E-02;
  COFD[3164] = -2.27740500E+01;
  COFD[3165] = 5.40563818E+00;
  COFD[3166] = -4.44444322E-01;
  COFD[3167] = 1.75813146E-02;
  COFD[3168] = -2.27786027E+01;
  COFD[3169] = 5.40563818E+00;
  COFD[3170] = -4.44444322E-01;
  COFD[3171] = 1.75813146E-02;
  COFD[3172] = -2.23530316E+01;
  COFD[3173] = 5.09597242E+00;
  COFD[3174] = -3.91720233E-01;
  COFD[3175] = 1.47988554E-02;
  COFD[3176] = -2.23562615E+01;
  COFD[3177] = 5.09597242E+00;
  COFD[3178] = -3.91720233E-01;
  COFD[3179] = 1.47988554E-02;
  COFD[3180] = -2.19670732E+01;
  COFD[3181] = 4.84253971E+00;
  COFD[3182] = -3.51393460E-01;
  COFD[3183] = 1.27562727E-02;
  COFD[3184] = -2.16267421E+01;
  COFD[3185] = 4.62444880E+00;
  COFD[3186] = -3.16789032E-01;
  COFD[3187] = 1.10089656E-02;
  COFD[3188] = -2.12777037E+01;
  COFD[3189] = 4.41372939E+00;
  COFD[3190] = -2.83873783E-01;
  COFD[3191] = 9.36532569E-03;
  COFD[3192] = -2.08877888E+01;
  COFD[3193] = 4.19325533E+00;
  COFD[3194] = -2.50186251E-01;
  COFD[3195] = 7.70758812E-03;
  COFD[3196] = -2.08618348E+01;
  COFD[3197] = 4.16888533E+00;
  COFD[3198] = -2.46500133E-01;
  COFD[3199] = 7.52727544E-03;
  COFD[3200] = -2.04887251E+01;
  COFD[3201] = 3.97419032E+00;
  COFD[3202] = -2.17151244E-01;
  COFD[3203] = 6.09602105E-03;
  COFD[3204] = -2.00031527E+01;
  COFD[3205] = 3.68035914E+00;
  COFD[3206] = -1.72246313E-01;
  COFD[3207] = 3.89112485E-03;
  COFD[3208] = -1.97362702E+01;
  COFD[3209] = 3.54254584E+00;
  COFD[3210] = -1.51588685E-01;
  COFD[3211] = 2.88891088E-03;
  COFD[3212] = -1.94436482E+01;
  COFD[3213] = 3.38805125E+00;
  COFD[3214] = -1.28605694E-01;
  COFD[3215] = 1.78139928E-03;
  COFD[3216] = -1.98610465E+01;
  COFD[3217] = 4.84231878E+00;
  COFD[3218] = -4.10101001E-01;
  COFD[3219] = 1.76356687E-02;
  COFD[3220] = -1.79641953E+01;
  COFD[3221] = 2.68406243E+00;
  COFD[3222] = -2.49058117E-02;
  COFD[3223] = -3.18217796E-03;
  COFD[3224] = -1.99878889E+01;
  COFD[3225] = 5.47248098E+00;
  COFD[3226] = -4.79290468E-01;
  COFD[3227] = 2.01323903E-02;
  COFD[3228] = -1.96267194E+01;
  COFD[3229] = 4.88238340E+00;
  COFD[3230] = -4.14880316E-01;
  COFD[3231] = 1.78258928E-02;
  COFD[3232] = -1.96513830E+01;
  COFD[3233] = 4.88238340E+00;
  COFD[3234] = -4.14880316E-01;
  COFD[3235] = 1.78258928E-02;
  COFD[3236] = -2.10673190E+01;
  COFD[3237] = 5.22065615E+00;
  COFD[3238] = -4.53751850E-01;
  COFD[3239] = 1.93099506E-02;
  COFD[3240] = -1.61866111E+01;
  COFD[3241] = 3.97811734E+00;
  COFD[3242] = -3.04543772E-01;
  COFD[3243] = 1.33243270E-02;
  COFD[3244] = -1.90109309E+01;
  COFD[3245] = 3.88639599E+00;
  COFD[3246] = -2.03781856E-01;
  COFD[3247] = 5.44050761E-03;
  COFD[3248] = -2.10774499E+01;
  COFD[3249] = 5.22065615E+00;
  COFD[3250] = -4.53751850E-01;
  COFD[3251] = 1.93099506E-02;
  COFD[3252] = -2.10567703E+01;
  COFD[3253] = 5.22065615E+00;
  COFD[3254] = -4.53751850E-01;
  COFD[3255] = 1.93099506E-02;
  COFD[3256] = -2.16471880E+01;
  COFD[3257] = 5.46403569E+00;
  COFD[3258] = -4.78350420E-01;
  COFD[3259] = 2.00977393E-02;
  COFD[3260] = -2.15968629E+01;
  COFD[3261] = 5.44280136E+00;
  COFD[3262] = -4.75998855E-01;
  COFD[3263] = 2.00116091E-02;
  COFD[3264] = -2.03618430E+01;
  COFD[3265] = 4.33469236E+00;
  COFD[3266] = -2.71728538E-01;
  COFD[3267] = 8.76524142E-03;
  COFD[3268] = -2.07935801E+01;
  COFD[3269] = 5.13870075E+00;
  COFD[3270] = -4.45087556E-01;
  COFD[3271] = 1.90141513E-02;
  COFD[3272] = -2.26255602E+01;
  COFD[3273] = 5.52088531E+00;
  COFD[3274] = -4.66799303E-01;
  COFD[3275] = 1.88452220E-02;
  COFD[3276] = -2.25311979E+01;
  COFD[3277] = 5.58497731E+00;
  COFD[3278] = -4.81782064E-01;
  COFD[3279] = 1.97602508E-02;
  COFD[3280] = -2.24096903E+01;
  COFD[3281] = 5.41604244E+00;
  COFD[3282] = -4.46391067E-01;
  COFD[3283] = 1.76894436E-02;
  COFD[3284] = -2.26047176E+01;
  COFD[3285] = 5.50251732E+00;
  COFD[3286] = -4.62858785E-01;
  COFD[3287] = 1.86120573E-02;
  COFD[3288] = -2.12138975E+01;
  COFD[3289] = 4.66550450E+00;
  COFD[3290] = -3.23297137E-01;
  COFD[3291] = 1.13374150E-02;
  COFD[3292] = -2.28142710E+01;
  COFD[3293] = 5.46711245E+00;
  COFD[3294] = -4.55648352E-01;
  COFD[3295] = 1.81956544E-02;
  COFD[3296] = -2.28218410E+01;
  COFD[3297] = 5.46711245E+00;
  COFD[3298] = -4.55648352E-01;
  COFD[3299] = 1.81956544E-02;
  COFD[3300] = -2.23528150E+01;
  COFD[3301] = 5.09597242E+00;
  COFD[3302] = -3.91720233E-01;
  COFD[3303] = 1.47988554E-02;
  COFD[3304] = -2.23480079E+01;
  COFD[3305] = 5.09597242E+00;
  COFD[3306] = -3.91720233E-01;
  COFD[3307] = 1.47988554E-02;
  COFD[3308] = -2.23530316E+01;
  COFD[3309] = 5.09597242E+00;
  COFD[3310] = -3.91720233E-01;
  COFD[3311] = 1.47988554E-02;
  COFD[3312] = -2.15052198E+01;
  COFD[3313] = 4.60438096E+00;
  COFD[3314] = -3.13580143E-01;
  COFD[3315] = 1.08462412E-02;
  COFD[3316] = -2.15088259E+01;
  COFD[3317] = 4.60438096E+00;
  COFD[3318] = -3.13580143E-01;
  COFD[3319] = 1.08462412E-02;
  COFD[3320] = -2.09926096E+01;
  COFD[3321] = 4.29644275E+00;
  COFD[3322] = -2.65881077E-01;
  COFD[3323] = 8.47752275E-03;
  COFD[3324] = -2.03719013E+01;
  COFD[3325] = 3.96005658E+00;
  COFD[3326] = -2.15023838E-01;
  COFD[3327] = 5.99243668E-03;
  COFD[3328] = -1.99572085E+01;
  COFD[3329] = 3.72188482E+00;
  COFD[3330] = -1.78555760E-01;
  COFD[3331] = 4.19961806E-03;
  COFD[3332] = -1.94608337E+01;
  COFD[3333] = 3.45627503E+00;
  COFD[3334] = -1.38749652E-01;
  COFD[3335] = 2.26961182E-03;
  COFD[3336] = -1.94327462E+01;
  COFD[3337] = 3.43141909E+00;
  COFD[3338] = -1.35054012E-01;
  COFD[3339] = 2.09180741E-03;
  COFD[3340] = -1.90327818E+01;
  COFD[3341] = 3.22670299E+00;
  COFD[3342] = -1.04657166E-01;
  COFD[3343] = 6.29620572E-04;
  COFD[3344] = -1.81581189E+01;
  COFD[3345] = 2.77116239E+00;
  COFD[3346] = -3.77250246E-02;
  COFD[3347] = -2.56819995E-03;
  COFD[3348] = -1.78252903E+01;
  COFD[3349] = 2.60486558E+00;
  COFD[3350] = -1.32252668E-02;
  COFD[3351] = -3.74170980E-03;
  COFD[3352] = -1.75400768E+01;
  COFD[3353] = 2.45372496E+00;
  COFD[3354] = 9.16587873E-03;
  COFD[3355] = -4.81554146E-03;
  COFD[3356] = -2.07714631E+01;
  COFD[3357] = 5.13381106E+00;
  COFD[3358] = -4.44579059E-01;
  COFD[3359] = 1.89972323E-02;
  COFD[3360] = -1.79693333E+01;
  COFD[3361] = 2.68406243E+00;
  COFD[3362] = -2.49058117E-02;
  COFD[3363] = -3.18217796E-03;
  COFD[3364] = -1.99879922E+01;
  COFD[3365] = 5.47248098E+00;
  COFD[3366] = -4.79290468E-01;
  COFD[3367] = 2.01323903E-02;
  COFD[3368] = -1.96280719E+01;
  COFD[3369] = 4.88238340E+00;
  COFD[3370] = -4.14880316E-01;
  COFD[3371] = 1.78258928E-02;
  COFD[3372] = -1.96528039E+01;
  COFD[3373] = 4.88238340E+00;
  COFD[3374] = -4.14880316E-01;
  COFD[3375] = 1.78258928E-02;
  COFD[3376] = -2.10696468E+01;
  COFD[3377] = 5.22065615E+00;
  COFD[3378] = -4.53751850E-01;
  COFD[3379] = 1.93099506E-02;
  COFD[3380] = -1.61868148E+01;
  COFD[3381] = 3.97811734E+00;
  COFD[3382] = -3.04543772E-01;
  COFD[3383] = 1.33243270E-02;
  COFD[3384] = -1.90124187E+01;
  COFD[3385] = 3.88639599E+00;
  COFD[3386] = -2.03781856E-01;
  COFD[3387] = 5.44050761E-03;
  COFD[3388] = -2.10798254E+01;
  COFD[3389] = 5.22065615E+00;
  COFD[3390] = -4.53751850E-01;
  COFD[3391] = 1.93099506E-02;
  COFD[3392] = -2.10590493E+01;
  COFD[3393] = 5.22065615E+00;
  COFD[3394] = -4.53751850E-01;
  COFD[3395] = 1.93099506E-02;
  COFD[3396] = -2.16484734E+01;
  COFD[3397] = 5.46403569E+00;
  COFD[3398] = -4.78350420E-01;
  COFD[3399] = 2.00977393E-02;
  COFD[3400] = -2.15982184E+01;
  COFD[3401] = 5.44280136E+00;
  COFD[3402] = -4.75998855E-01;
  COFD[3403] = 2.00116091E-02;
  COFD[3404] = -2.03640239E+01;
  COFD[3405] = 4.33469236E+00;
  COFD[3406] = -2.71728538E-01;
  COFD[3407] = 8.76524142E-03;
  COFD[3408] = -2.07956566E+01;
  COFD[3409] = 5.13870075E+00;
  COFD[3410] = -4.45087556E-01;
  COFD[3411] = 1.90141513E-02;
  COFD[3412] = -2.26283634E+01;
  COFD[3413] = 5.52088531E+00;
  COFD[3414] = -4.66799303E-01;
  COFD[3415] = 1.88452220E-02;
  COFD[3416] = -2.25331679E+01;
  COFD[3417] = 5.58497731E+00;
  COFD[3418] = -4.81782064E-01;
  COFD[3419] = 1.97602508E-02;
  COFD[3420] = -2.24117691E+01;
  COFD[3421] = 5.41604244E+00;
  COFD[3422] = -4.46391067E-01;
  COFD[3423] = 1.76894436E-02;
  COFD[3424] = -2.26069007E+01;
  COFD[3425] = 5.50251732E+00;
  COFD[3426] = -4.62858785E-01;
  COFD[3427] = 1.86120573E-02;
  COFD[3428] = -2.12166627E+01;
  COFD[3429] = 4.66550450E+00;
  COFD[3430] = -3.23297137E-01;
  COFD[3431] = 1.13374150E-02;
  COFD[3432] = -2.28169566E+01;
  COFD[3433] = 5.46711245E+00;
  COFD[3434] = -4.55648352E-01;
  COFD[3435] = 1.81956544E-02;
  COFD[3436] = -2.28245676E+01;
  COFD[3437] = 5.46711245E+00;
  COFD[3438] = -4.55648352E-01;
  COFD[3439] = 1.81956544E-02;
  COFD[3440] = -2.23560436E+01;
  COFD[3441] = 5.09597242E+00;
  COFD[3442] = -3.91720233E-01;
  COFD[3443] = 1.47988554E-02;
  COFD[3444] = -2.23512055E+01;
  COFD[3445] = 5.09597242E+00;
  COFD[3446] = -3.91720233E-01;
  COFD[3447] = 1.47988554E-02;
  COFD[3448] = -2.23562615E+01;
  COFD[3449] = 5.09597242E+00;
  COFD[3450] = -3.91720233E-01;
  COFD[3451] = 1.47988554E-02;
  COFD[3452] = -2.15088259E+01;
  COFD[3453] = 4.60438096E+00;
  COFD[3454] = -3.13580143E-01;
  COFD[3455] = 1.08462412E-02;
  COFD[3456] = -2.15124581E+01;
  COFD[3457] = 4.60438096E+00;
  COFD[3458] = -3.13580143E-01;
  COFD[3459] = 1.08462412E-02;
  COFD[3460] = -2.09965707E+01;
  COFD[3461] = 4.29644275E+00;
  COFD[3462] = -2.65881077E-01;
  COFD[3463] = 8.47752275E-03;
  COFD[3464] = -2.03761364E+01;
  COFD[3465] = 3.96005658E+00;
  COFD[3466] = -2.15023838E-01;
  COFD[3467] = 5.99243668E-03;
  COFD[3468] = -1.99616752E+01;
  COFD[3469] = 3.72188482E+00;
  COFD[3470] = -1.78555760E-01;
  COFD[3471] = 4.19961806E-03;
  COFD[3472] = -1.94654989E+01;
  COFD[3473] = 3.45627503E+00;
  COFD[3474] = -1.38749652E-01;
  COFD[3475] = 2.26961182E-03;
  COFD[3476] = -1.94374245E+01;
  COFD[3477] = 3.43141909E+00;
  COFD[3478] = -1.35054012E-01;
  COFD[3479] = 2.09180741E-03;
  COFD[3480] = -1.90376189E+01;
  COFD[3481] = 3.22670299E+00;
  COFD[3482] = -1.04657166E-01;
  COFD[3483] = 6.29620572E-04;
  COFD[3484] = -1.81632392E+01;
  COFD[3485] = 2.77116239E+00;
  COFD[3486] = -3.77250246E-02;
  COFD[3487] = -2.56819995E-03;
  COFD[3488] = -1.78306685E+01;
  COFD[3489] = 2.60486558E+00;
  COFD[3490] = -1.32252668E-02;
  COFD[3491] = -3.74170980E-03;
  COFD[3492] = -1.75455525E+01;
  COFD[3493] = 2.45372496E+00;
  COFD[3494] = 9.16587873E-03;
  COFD[3495] = -4.81554146E-03;
  COFD[3496] = -2.07735397E+01;
  COFD[3497] = 5.13381106E+00;
  COFD[3498] = -4.44579059E-01;
  COFD[3499] = 1.89972323E-02;
  COFD[3500] = -1.71023549E+01;
  COFD[3501] = 2.22992608E+00;
  COFD[3502] = 4.19679647E-02;
  COFD[3503] = -6.37519657E-03;
  COFD[3504] = -2.04125771E+01;
  COFD[3505] = 5.57739710E+00;
  COFD[3506] = -4.89778630E-01;
  COFD[3507] = 2.04637924E-02;
  COFD[3508] = -2.01678752E+01;
  COFD[3509] = 5.04165097E+00;
  COFD[3510] = -4.33913744E-01;
  COFD[3511] = 1.85861246E-02;
  COFD[3512] = -2.01934178E+01;
  COFD[3513] = 5.04165097E+00;
  COFD[3514] = -4.33913744E-01;
  COFD[3515] = 1.85861246E-02;
  COFD[3516] = -2.15776504E+01;
  COFD[3517] = 5.35995365E+00;
  COFD[3518] = -4.69587823E-01;
  COFD[3519] = 1.99080702E-02;
  COFD[3520] = -1.66550985E+01;
  COFD[3521] = 4.12489968E+00;
  COFD[3522] = -3.23119338E-01;
  COFD[3523] = 1.41122711E-02;
  COFD[3524] = -1.83523817E+01;
  COFD[3525] = 3.52256138E+00;
  COFD[3526] = -1.48611326E-01;
  COFD[3527] = 2.74505262E-03;
  COFD[3528] = -2.15884087E+01;
  COFD[3529] = 5.35995365E+00;
  COFD[3530] = -4.69587823E-01;
  COFD[3531] = 1.99080702E-02;
  COFD[3532] = -2.15664626E+01;
  COFD[3533] = 5.35995365E+00;
  COFD[3534] = -4.69587823E-01;
  COFD[3535] = 1.99080702E-02;
  COFD[3536] = -2.20820509E+01;
  COFD[3537] = 5.57296554E+00;
  COFD[3538] = -4.89394407E-01;
  COFD[3539] = 2.04545698E-02;
  COFD[3540] = -2.20571987E+01;
  COFD[3541] = 5.56221277E+00;
  COFD[3542] = -4.88535386E-01;
  COFD[3543] = 2.04385478E-02;
  COFD[3544] = -1.96505480E+01;
  COFD[3545] = 3.94748284E+00;
  COFD[3546] = -2.13105313E-01;
  COFD[3547] = 5.89820150E-03;
  COFD[3548] = -2.12462427E+01;
  COFD[3549] = 5.25612649E+00;
  COFD[3550] = -4.57885944E-01;
  COFD[3551] = 1.94706895E-02;
  COFD[3552] = -2.26428111E+01;
  COFD[3553] = 5.43854589E+00;
  COFD[3554] = -4.50460433E-01;
  COFD[3555] = 1.79115741E-02;
  COFD[3556] = -2.26391595E+01;
  COFD[3557] = 5.54906697E+00;
  COFD[3558] = -4.72198999E-01;
  COFD[3559] = 1.91488843E-02;
  COFD[3560] = -2.22712203E+01;
  COFD[3561] = 5.27184216E+00;
  COFD[3562] = -4.21373345E-01;
  COFD[3563] = 1.63542609E-02;
  COFD[3564] = -2.25784310E+01;
  COFD[3565] = 5.40653540E+00;
  COFD[3566] = -4.44612351E-01;
  COFD[3567] = 1.75906515E-02;
  COFD[3568] = -2.07454253E+01;
  COFD[3569] = 4.37720767E+00;
  COFD[3570] = -2.78259024E-01;
  COFD[3571] = 9.08774918E-03;
  COFD[3572] = -2.27264067E+01;
  COFD[3573] = 5.34358207E+00;
  COFD[3574] = -4.33525531E-01;
  COFD[3575] = 1.69942087E-02;
  COFD[3576] = -2.27345210E+01;
  COFD[3577] = 5.34358207E+00;
  COFD[3578] = -4.33525531E-01;
  COFD[3579] = 1.69942087E-02;
  COFD[3580] = -2.19668378E+01;
  COFD[3581] = 4.84253971E+00;
  COFD[3582] = -3.51393460E-01;
  COFD[3583] = 1.27562727E-02;
  COFD[3584] = -2.19616149E+01;
  COFD[3585] = 4.84253971E+00;
  COFD[3586] = -3.51393460E-01;
  COFD[3587] = 1.27562727E-02;
  COFD[3588] = -2.19670732E+01;
  COFD[3589] = 4.84253971E+00;
  COFD[3590] = -3.51393460E-01;
  COFD[3591] = 1.27562727E-02;
  COFD[3592] = -2.09926096E+01;
  COFD[3593] = 4.29644275E+00;
  COFD[3594] = -2.65881077E-01;
  COFD[3595] = 8.47752275E-03;
  COFD[3596] = -2.09965707E+01;
  COFD[3597] = 4.29644275E+00;
  COFD[3598] = -2.65881077E-01;
  COFD[3599] = 8.47752275E-03;
  COFD[3600] = -2.02931537E+01;
  COFD[3601] = 3.90905923E+00;
  COFD[3602] = -2.07240428E-01;
  COFD[3603] = 5.61016042E-03;
  COFD[3604] = -1.97882319E+01;
  COFD[3605] = 3.62109503E+00;
  COFD[3606] = -1.63328103E-01;
  COFD[3607] = 3.45738977E-03;
  COFD[3608] = -1.91738684E+01;
  COFD[3609] = 3.29927367E+00;
  COFD[3610] = -1.15421965E-01;
  COFD[3611] = 1.14722453E-03;
  COFD[3612] = -1.86224107E+01;
  COFD[3613] = 3.01293116E+00;
  COFD[3614] = -7.31811485E-02;
  COFD[3615] = -8.74503577E-04;
  COFD[3616] = -1.85739749E+01;
  COFD[3617] = 2.97960589E+00;
  COFD[3618] = -6.82975765E-02;
  COFD[3619] = -1.10754786E-03;
  COFD[3620] = -1.80237996E+01;
  COFD[3621] = 2.70981781E+00;
  COFD[3622] = -2.87009191E-02;
  COFD[3623] = -3.00031484E-03;
  COFD[3624] = -1.72678897E+01;
  COFD[3625] = 2.30401734E+00;
  COFD[3626] = 3.11443222E-02;
  COFD[3627] = -5.86207495E-03;
  COFD[3628] = -1.69703233E+01;
  COFD[3629] = 2.15337734E+00;
  COFD[3630] = 5.31165264E-02;
  COFD[3631] = -6.90242414E-03;
  COFD[3632] = -1.66106763E+01;
  COFD[3633] = 1.97256518E+00;
  COFD[3634] = 7.93547823E-02;
  COFD[3635] = -8.14046199E-03;
  COFD[3636] = -2.12157081E+01;
  COFD[3637] = 5.24766160E+00;
  COFD[3638] = -4.56882620E-01;
  COFD[3639] = 1.94309393E-02;
  COFD[3640] = -1.62450421E+01;
  COFD[3641] = 1.79898308E+00;
  COFD[3642] = 1.04422970E-01;
  COFD[3643] = -9.31788260E-03;
  COFD[3644] = -2.06420448E+01;
  COFD[3645] = 5.61233640E+00;
  COFD[3646] = -4.91245632E-01;
  COFD[3647] = 2.04073252E-02;
  COFD[3648] = -2.05574198E+01;
  COFD[3649] = 5.14795860E+00;
  COFD[3650] = -4.45935789E-01;
  COFD[3651] = 1.90364341E-02;
  COFD[3652] = -2.05835748E+01;
  COFD[3653] = 5.14795860E+00;
  COFD[3654] = -4.45935789E-01;
  COFD[3655] = 1.90364341E-02;
  COFD[3656] = -2.18432468E+01;
  COFD[3657] = 5.40768793E+00;
  COFD[3658] = -4.72942538E-01;
  COFD[3659] = 1.99389038E-02;
  COFD[3660] = -1.70329250E+01;
  COFD[3661] = 4.23969256E+00;
  COFD[3662] = -3.37288904E-01;
  COFD[3663] = 1.46975974E-02;
  COFD[3664] = -1.76500812E+01;
  COFD[3665] = 3.15831209E+00;
  COFD[3666] = -9.45393054E-02;
  COFD[3667] = 1.45090308E-04;
  COFD[3668] = -2.18544613E+01;
  COFD[3669] = 5.40768793E+00;
  COFD[3670] = -4.72942538E-01;
  COFD[3671] = 1.99389038E-02;
  COFD[3672] = -2.18315953E+01;
  COFD[3673] = 5.40768793E+00;
  COFD[3674] = -4.72942538E-01;
  COFD[3675] = 1.99389038E-02;
  COFD[3676] = -2.23196288E+01;
  COFD[3677] = 5.61199715E+00;
  COFD[3678] = -4.91433824E-01;
  COFD[3679] = 2.04245969E-02;
  COFD[3680] = -2.23089124E+01;
  COFD[3681] = 5.60657745E+00;
  COFD[3682] = -4.91280842E-01;
  COFD[3683] = 2.04393241E-02;
  COFD[3684] = -1.91553451E+01;
  COFD[3685] = 3.66719242E+00;
  COFD[3686] = -1.70260825E-01;
  COFD[3687] = 3.79442136E-03;
  COFD[3688] = -2.16479635E+01;
  COFD[3689] = 5.36415648E+00;
  COFD[3690] = -4.69836047E-01;
  COFD[3691] = 1.99067039E-02;
  COFD[3692] = -2.25594139E+01;
  COFD[3693] = 5.32923056E+00;
  COFD[3694] = -4.31065031E-01;
  COFD[3695] = 1.68637777E-02;
  COFD[3696] = -2.26655242E+01;
  COFD[3697] = 5.49155307E+00;
  COFD[3698] = -4.60156593E-01;
  COFD[3699] = 1.84445999E-02;
  COFD[3700] = -2.21166766E+01;
  COFD[3701] = 5.13519978E+00;
  COFD[3702] = -3.98132825E-01;
  COFD[3703] = 1.51293092E-02;
  COFD[3704] = -2.24451961E+01;
  COFD[3705] = 5.27966625E+00;
  COFD[3706] = -4.22746172E-01;
  COFD[3707] = 1.64279811E-02;
  COFD[3708] = -2.01683835E+01;
  COFD[3709] = 4.06006798E+00;
  COFD[3710] = -2.30066357E-01;
  COFD[3711] = 6.72473245E-03;
  COFD[3712] = -2.25883284E+01;
  COFD[3713] = 5.21373152E+00;
  COFD[3714] = -4.11240905E-01;
  COFD[3715] = 1.58129026E-02;
  COFD[3716] = -2.25968450E+01;
  COFD[3717] = 5.21373152E+00;
  COFD[3718] = -4.11240905E-01;
  COFD[3719] = 1.58129026E-02;
  COFD[3720] = -2.16264924E+01;
  COFD[3721] = 4.62444880E+00;
  COFD[3722] = -3.16789032E-01;
  COFD[3723] = 1.10089656E-02;
  COFD[3724] = -2.16209549E+01;
  COFD[3725] = 4.62444880E+00;
  COFD[3726] = -3.16789032E-01;
  COFD[3727] = 1.10089656E-02;
  COFD[3728] = -2.16267421E+01;
  COFD[3729] = 4.62444880E+00;
  COFD[3730] = -3.16789032E-01;
  COFD[3731] = 1.10089656E-02;
  COFD[3732] = -2.03719013E+01;
  COFD[3733] = 3.96005658E+00;
  COFD[3734] = -2.15023838E-01;
  COFD[3735] = 5.99243668E-03;
  COFD[3736] = -2.03761364E+01;
  COFD[3737] = 3.96005658E+00;
  COFD[3738] = -2.15023838E-01;
  COFD[3739] = 5.99243668E-03;
  COFD[3740] = -1.97882319E+01;
  COFD[3741] = 3.62109503E+00;
  COFD[3742] = -1.63328103E-01;
  COFD[3743] = 3.45738977E-03;
  COFD[3744] = -1.90788962E+01;
  COFD[3745] = 3.24795923E+00;
  COFD[3746] = -1.07810281E-01;
  COFD[3747] = 7.81209780E-04;
  COFD[3748] = -1.83659502E+01;
  COFD[3749] = 2.88571035E+00;
  COFD[3750] = -5.45325785E-02;
  COFD[3751] = -1.76508613E-03;
  COFD[3752] = -1.77237799E+01;
  COFD[3753] = 2.55843008E+00;
  COFD[3754] = -6.32267950E-03;
  COFD[3755] = -4.07387397E-03;
  COFD[3756] = -1.76962230E+01;
  COFD[3757] = 2.53412632E+00;
  COFD[3758] = -2.71561927E-03;
  COFD[3759] = -4.24696836E-03;
  COFD[3760] = -1.72790079E+01;
  COFD[3761] = 2.32181806E+00;
  COFD[3762] = 2.85392164E-02;
  COFD[3763] = -5.73831066E-03;
  COFD[3764] = -1.64316331E+01;
  COFD[3765] = 1.88148066E+00;
  COFD[3766] = 9.25151744E-02;
  COFD[3767] = -8.75875844E-03;
  COFD[3768] = -1.60744402E+01;
  COFD[3769] = 1.70515393E+00;
  COFD[3770] = 1.17964458E-01;
  COFD[3771] = -9.95487344E-03;
  COFD[3772] = -1.56831472E+01;
  COFD[3773] = 1.51210139E+00;
  COFD[3774] = 1.45705555E-01;
  COFD[3775] = -1.12527582E-02;
  COFD[3776] = -2.16312330E+01;
  COFD[3777] = 5.36160575E+00;
  COFD[3778] = -4.69678973E-01;
  COFD[3779] = 1.99069834E-02;
  COFD[3780] = -1.54004377E+01;
  COFD[3781] = 1.38485345E+00;
  COFD[3782] = 1.63989484E-01;
  COFD[3783] = -1.21088577E-02;
  COFD[3784] = -2.07168035E+01;
  COFD[3785] = 5.58797624E+00;
  COFD[3786] = -4.84623564E-01;
  COFD[3787] = 1.99817352E-02;
  COFD[3788] = -2.08840874E+01;
  COFD[3789] = 5.23394577E+00;
  COFD[3790] = -4.55294957E-01;
  COFD[3791] = 1.93696950E-02;
  COFD[3792] = -2.09107212E+01;
  COFD[3793] = 5.23394577E+00;
  COFD[3794] = -4.55294957E-01;
  COFD[3795] = 1.93696950E-02;
  COFD[3796] = -2.21426228E+01;
  COFD[3797] = 5.47842731E+00;
  COFD[3798] = -4.79952894E-01;
  COFD[3799] = 2.01568406E-02;
  COFD[3800] = -1.73560950E+01;
  COFD[3801] = 4.33584314E+00;
  COFD[3802] = -3.48938603E-01;
  COFD[3803] = 1.51686902E-02;
  COFD[3804] = -1.68531525E+01;
  COFD[3805] = 2.76314344E+00;
  COFD[3806] = -3.65464735E-02;
  COFD[3807] = -2.62462500E-03;
  COFD[3808] = -2.21542057E+01;
  COFD[3809] = 5.47842731E+00;
  COFD[3810] = -4.79952894E-01;
  COFD[3811] = 2.01568406E-02;
  COFD[3812] = -2.21305975E+01;
  COFD[3813] = 5.47842731E+00;
  COFD[3814] = -4.79952894E-01;
  COFD[3815] = 2.01568406E-02;
  COFD[3816] = -2.23961398E+01;
  COFD[3817] = 5.58969231E+00;
  COFD[3818] = -4.85146102E-01;
  COFD[3819] = 2.00165025E-02;
  COFD[3820] = -2.24147233E+01;
  COFD[3821] = 5.59714923E+00;
  COFD[3822] = -4.86899964E-01;
  COFD[3823] = 2.01242645E-02;
  COFD[3824] = -1.85405054E+01;
  COFD[3825] = 3.34746301E+00;
  COFD[3826] = -1.22575165E-01;
  COFD[3827] = 1.49120224E-03;
  COFD[3828] = -2.18744947E+01;
  COFD[3829] = 5.40581593E+00;
  COFD[3830] = -4.72804333E-01;
  COFD[3831] = 1.99370903E-02;
  COFD[3832] = -2.24455334E+01;
  COFD[3833] = 5.21716989E+00;
  COFD[3834] = -4.11825254E-01;
  COFD[3835] = 1.58436458E-02;
  COFD[3836] = -2.26097243E+01;
  COFD[3837] = 5.40751776E+00;
  COFD[3838] = -4.44796499E-01;
  COFD[3839] = 1.76008889E-02;
  COFD[3840] = -2.18596576E+01;
  COFD[3841] = 4.96464859E+00;
  COFD[3842] = -3.70657753E-01;
  COFD[3843] = 1.37267014E-02;
  COFD[3844] = -2.23212614E+01;
  COFD[3845] = 5.16629594E+00;
  COFD[3846] = -4.03322392E-01;
  COFD[3847] = 1.53998221E-02;
  COFD[3848] = -1.97003035E+01;
  COFD[3849] = 3.79996103E+00;
  COFD[3850] = -1.90497694E-01;
  COFD[3851] = 4.78603172E-03;
  COFD[3852] = -2.23956511E+01;
  COFD[3853] = 5.07018801E+00;
  COFD[3854] = -3.87535402E-01;
  COFD[3855] = 1.45842225E-02;
  COFD[3856] = -2.24044966E+01;
  COFD[3857] = 5.07018801E+00;
  COFD[3858] = -3.87535402E-01;
  COFD[3859] = 1.45842225E-02;
  COFD[3860] = -2.12774421E+01;
  COFD[3861] = 4.41372939E+00;
  COFD[3862] = -2.83873783E-01;
  COFD[3863] = 9.36532569E-03;
  COFD[3864] = -2.12716426E+01;
  COFD[3865] = 4.41372939E+00;
  COFD[3866] = -2.83873783E-01;
  COFD[3867] = 9.36532569E-03;
  COFD[3868] = -2.12777037E+01;
  COFD[3869] = 4.41372939E+00;
  COFD[3870] = -2.83873783E-01;
  COFD[3871] = 9.36532569E-03;
  COFD[3872] = -1.99572085E+01;
  COFD[3873] = 3.72188482E+00;
  COFD[3874] = -1.78555760E-01;
  COFD[3875] = 4.19961806E-03;
  COFD[3876] = -1.99616752E+01;
  COFD[3877] = 3.72188482E+00;
  COFD[3878] = -1.78555760E-01;
  COFD[3879] = 4.19961806E-03;
  COFD[3880] = -1.91738684E+01;
  COFD[3881] = 3.29927367E+00;
  COFD[3882] = -1.15421965E-01;
  COFD[3883] = 1.14722453E-03;
  COFD[3884] = -1.83659502E+01;
  COFD[3885] = 2.88571035E+00;
  COFD[3886] = -5.45325785E-02;
  COFD[3887] = -1.76508613E-03;
  COFD[3888] = -1.76386321E+01;
  COFD[3889] = 2.51509845E+00;
  COFD[3890] = 1.02670796E-04;
  COFD[3891] = -4.38201691E-03;
  COFD[3892] = -1.70866988E+01;
  COFD[3893] = 2.22837243E+00;
  COFD[3894] = 4.21945850E-02;
  COFD[3895] = -6.38593308E-03;
  COFD[3896] = -1.70480275E+01;
  COFD[3897] = 2.19974886E+00;
  COFD[3898] = 4.63679485E-02;
  COFD[3899] = -6.58350992E-03;
  COFD[3900] = -1.65620353E+01;
  COFD[3901] = 1.95984412E+00;
  COFD[3902] = 8.11931925E-02;
  COFD[3903] = -8.22685123E-03;
  COFD[3904] = -1.56095653E+01;
  COFD[3905] = 1.47685497E+00;
  COFD[3906] = 1.50778364E-01;
  COFD[3907] = -1.14906180E-02;
  COFD[3908] = -1.52407610E+01;
  COFD[3909] = 1.29532808E+00;
  COFD[3910] = 1.76825909E-01;
  COFD[3911] = -1.27084392E-02;
  COFD[3912] = -1.48245663E+01;
  COFD[3913] = 1.09196780E+00;
  COFD[3914] = 2.05935790E-01;
  COFD[3915] = -1.40664564E-02;
  COFD[3916] = -2.18580027E+01;
  COFD[3917] = 5.40322773E+00;
  COFD[3918] = -4.72630192E-01;
  COFD[3919] = 1.99360102E-02;
  COFD[3920] = -1.46746702E+01;
  COFD[3921] = 1.02870676E+00;
  COFD[3922] = 2.14984638E-01;
  COFD[3923] = -1.44879090E-02;
  COFD[3924] = -2.08359032E+01;
  COFD[3925] = 5.58518783E+00;
  COFD[3926] = -4.81282144E-01;
  COFD[3927] = 1.97176495E-02;
  COFD[3928] = -2.12416101E+01;
  COFD[3929] = 5.33751161E+00;
  COFD[3930] = -4.67531962E-01;
  COFD[3931] = 1.98534391E-02;
  COFD[3932] = -2.12686288E+01;
  COFD[3933] = 5.33751161E+00;
  COFD[3934] = -4.67531962E-01;
  COFD[3935] = 1.98534391E-02;
  COFD[3936] = -2.24428055E+01;
  COFD[3937] = 5.55319328E+00;
  COFD[3938] = -4.87759313E-01;
  COFD[3939] = 2.04205124E-02;
  COFD[3940] = -1.76841386E+01;
  COFD[3941] = 4.43623609E+00;
  COFD[3942] = -3.61391880E-01;
  COFD[3943] = 1.56853368E-02;
  COFD[3944] = -1.62777166E+01;
  COFD[3945] = 2.46665777E+00;
  COFD[3946] = 7.25684399E-03;
  COFD[3947] = -4.72424494E-03;
  COFD[3948] = -2.24546921E+01;
  COFD[3949] = 5.55319328E+00;
  COFD[3950] = -4.87759313E-01;
  COFD[3951] = 2.04205124E-02;
  COFD[3952] = -2.24304725E+01;
  COFD[3953] = 5.55319328E+00;
  COFD[3954] = -4.87759313E-01;
  COFD[3955] = 2.04205124E-02;
  COFD[3956] = -2.25070771E+01;
  COFD[3957] = 5.58488808E+00;
  COFD[3958] = -4.81505670E-01;
  COFD[3959] = 1.97377350E-02;
  COFD[3960] = -2.25078396E+01;
  COFD[3961] = 5.58461787E+00;
  COFD[3962] = -4.82178861E-01;
  COFD[3963] = 1.97950972E-02;
  COFD[3964] = -1.80138627E+01;
  COFD[3965] = 3.07345302E+00;
  COFD[3966] = -8.20536856E-02;
  COFD[3967] = -4.51137426E-04;
  COFD[3968] = -2.21149546E+01;
  COFD[3969] = 5.45837402E+00;
  COFD[3970] = -4.77716491E-01;
  COFD[3971] = 2.00742141E-02;
  COFD[3972] = -2.23014058E+01;
  COFD[3973] = 5.09843164E+00;
  COFD[3974] = -3.92118361E-01;
  COFD[3975] = 1.48192579E-02;
  COFD[3976] = -2.25351154E+01;
  COFD[3977] = 5.32200412E+00;
  COFD[3978] = -4.29810296E-01;
  COFD[3979] = 1.67968656E-02;
  COFD[3980] = -2.15864547E+01;
  COFD[3981] = 4.79387853E+00;
  COFD[3982] = -3.43720861E-01;
  COFD[3983] = 1.23700578E-02;
  COFD[3984] = -2.21433222E+01;
  COFD[3985] = 5.03586935E+00;
  COFD[3986] = -3.81976071E-01;
  COFD[3987] = 1.42995069E-02;
  COFD[3988] = -1.92768391E+01;
  COFD[3989] = 3.56517881E+00;
  COFD[3990] = -1.54966016E-01;
  COFD[3991] = 3.05232702E-03;
  COFD[3992] = -2.21481001E+01;
  COFD[3993] = 4.91019065E+00;
  COFD[3994] = -3.62076012E-01;
  COFD[3995] = 1.32946182E-02;
  COFD[3996] = -2.21572195E+01;
  COFD[3997] = 4.91019065E+00;
  COFD[3998] = -3.62076012E-01;
  COFD[3999] = 1.32946182E-02;
  COFD[4000] = -2.08875172E+01;
  COFD[4001] = 4.19325533E+00;
  COFD[4002] = -2.50186251E-01;
  COFD[4003] = 7.70758812E-03;
  COFD[4004] = -2.08814960E+01;
  COFD[4005] = 4.19325533E+00;
  COFD[4006] = -2.50186251E-01;
  COFD[4007] = 7.70758812E-03;
  COFD[4008] = -2.08877888E+01;
  COFD[4009] = 4.19325533E+00;
  COFD[4010] = -2.50186251E-01;
  COFD[4011] = 7.70758812E-03;
  COFD[4012] = -1.94608337E+01;
  COFD[4013] = 3.45627503E+00;
  COFD[4014] = -1.38749652E-01;
  COFD[4015] = 2.26961182E-03;
  COFD[4016] = -1.94654989E+01;
  COFD[4017] = 3.45627503E+00;
  COFD[4018] = -1.38749652E-01;
  COFD[4019] = 2.26961182E-03;
  COFD[4020] = -1.86224107E+01;
  COFD[4021] = 3.01293116E+00;
  COFD[4022] = -7.31811485E-02;
  COFD[4023] = -8.74503577E-04;
  COFD[4024] = -1.77237799E+01;
  COFD[4025] = 2.55843008E+00;
  COFD[4026] = -6.32267950E-03;
  COFD[4027] = -4.07387397E-03;
  COFD[4028] = -1.70866988E+01;
  COFD[4029] = 2.22837243E+00;
  COFD[4030] = 4.21945850E-02;
  COFD[4031] = -6.38593308E-03;
  COFD[4032] = -1.64603499E+01;
  COFD[4033] = 1.91201651E+00;
  COFD[4034] = 8.81041778E-02;
  COFD[4035] = -8.55154551E-03;
  COFD[4036] = -1.64162642E+01;
  COFD[4037] = 1.88142640E+00;
  COFD[4038] = 9.25230102E-02;
  COFD[4039] = -8.75912646E-03;
  COFD[4040] = -1.58768288E+01;
  COFD[4041] = 1.61945878E+00;
  COFD[4042] = 1.30286421E-01;
  COFD[4043] = -1.05317289E-02;
  COFD[4044] = -1.48753967E+01;
  COFD[4045] = 1.11690017E+00;
  COFD[4046] = 2.02362955E-01;
  COFD[4047] = -1.38996262E-02;
  COFD[4048] = -1.45087618E+01;
  COFD[4049] = 9.35690838E-01;
  COFD[4050] = 2.28295914E-01;
  COFD[4051] = -1.51088791E-02;
  COFD[4052] = -1.40894144E+01;
  COFD[4053] = 7.31458802E-01;
  COFD[4054] = 2.57430647E-01;
  COFD[4055] = -1.64638268E-02;
  COFD[4056] = -2.20902743E+01;
  COFD[4057] = 5.45237285E+00;
  COFD[4058] = -4.77075672E-01;
  COFD[4059] = 2.00518642E-02;
  COFD[4060] = -1.46203241E+01;
  COFD[4061] = 9.94330848E-01;
  COFD[4062] = 2.19902430E-01;
  COFD[4063] = -1.47171735E-02;
  COFD[4064] = -2.08746358E+01;
  COFD[4065] = 5.58521622E+00;
  COFD[4066] = -4.81014671E-01;
  COFD[4067] = 1.96952964E-02;
  COFD[4068] = -2.12927711E+01;
  COFD[4069] = 5.34414631E+00;
  COFD[4070] = -4.68238030E-01;
  COFD[4071] = 1.98779007E-02;
  COFD[4072] = -2.13198145E+01;
  COFD[4073] = 5.34414631E+00;
  COFD[4074] = -4.68238030E-01;
  COFD[4075] = 1.98779007E-02;
  COFD[4076] = -2.24883897E+01;
  COFD[4077] = 5.55793029E+00;
  COFD[4078] = -4.88170533E-01;
  COFD[4079] = 2.04302911E-02;
  COFD[4080] = -1.77370430E+01;
  COFD[4081] = 4.44459213E+00;
  COFD[4082] = -3.62399607E-01;
  COFD[4083] = 1.57258496E-02;
  COFD[4084] = -1.62527662E+01;
  COFD[4085] = 2.44062989E+00;
  COFD[4086] = 1.10981222E-02;
  COFD[4087] = -4.90788998E-03;
  COFD[4088] = -2.25002960E+01;
  COFD[4089] = 5.55793029E+00;
  COFD[4090] = -4.88170533E-01;
  COFD[4091] = 2.04302911E-02;
  COFD[4092] = -2.24760366E+01;
  COFD[4093] = 5.55793029E+00;
  COFD[4094] = -4.88170533E-01;
  COFD[4095] = 2.04302911E-02;
  COFD[4096] = -2.25413162E+01;
  COFD[4097] = 5.58519141E+00;
  COFD[4098] = -4.81277367E-01;
  COFD[4099] = 1.97172346E-02;
  COFD[4100] = -2.25423020E+01;
  COFD[4101] = 5.58490857E+00;
  COFD[4102] = -4.81943660E-01;
  COFD[4103] = 1.97740434E-02;
  COFD[4104] = -1.79714284E+01;
  COFD[4105] = 3.04109524E+00;
  COFD[4106] = -7.73097243E-02;
  COFD[4107] = -6.77522484E-04;
  COFD[4108] = -2.21693686E+01;
  COFD[4109] = 5.46715955E+00;
  COFD[4110] = -4.78699053E-01;
  COFD[4111] = 2.01106334E-02;
  COFD[4112] = -2.23041648E+01;
  COFD[4113] = 5.08480808E+00;
  COFD[4114] = -3.89912767E-01;
  COFD[4115] = 1.47062570E-02;
  COFD[4116] = -2.25457395E+01;
  COFD[4117] = 5.31236460E+00;
  COFD[4118] = -4.28177190E-01;
  COFD[4119] = 1.67109235E-02;
  COFD[4120] = -2.15876129E+01;
  COFD[4121] = 4.77996453E+00;
  COFD[4122] = -3.41483820E-01;
  COFD[4123] = 1.22561537E-02;
  COFD[4124] = -2.21429975E+01;
  COFD[4125] = 5.02172689E+00;
  COFD[4126] = -3.79713172E-01;
  COFD[4127] = 1.41845745E-02;
  COFD[4128] = -1.92450104E+01;
  COFD[4129] = 3.53733698E+00;
  COFD[4130] = -1.50812570E-01;
  COFD[4131] = 2.85140727E-03;
  COFD[4132] = -2.21417169E+01;
  COFD[4133] = 4.89399517E+00;
  COFD[4134] = -3.59520327E-01;
  COFD[4135] = 1.31658681E-02;
  COFD[4136] = -2.21508543E+01;
  COFD[4137] = 4.89399517E+00;
  COFD[4138] = -3.59520327E-01;
  COFD[4139] = 1.31658681E-02;
  COFD[4140] = -2.08615626E+01;
  COFD[4141] = 4.16888533E+00;
  COFD[4142] = -2.46500133E-01;
  COFD[4143] = 7.52727544E-03;
  COFD[4144] = -2.08555268E+01;
  COFD[4145] = 4.16888533E+00;
  COFD[4146] = -2.46500133E-01;
  COFD[4147] = 7.52727544E-03;
  COFD[4148] = -2.08618348E+01;
  COFD[4149] = 4.16888533E+00;
  COFD[4150] = -2.46500133E-01;
  COFD[4151] = 7.52727544E-03;
  COFD[4152] = -1.94327462E+01;
  COFD[4153] = 3.43141909E+00;
  COFD[4154] = -1.35054012E-01;
  COFD[4155] = 2.09180741E-03;
  COFD[4156] = -1.94374245E+01;
  COFD[4157] = 3.43141909E+00;
  COFD[4158] = -1.35054012E-01;
  COFD[4159] = 2.09180741E-03;
  COFD[4160] = -1.85739749E+01;
  COFD[4161] = 2.97960589E+00;
  COFD[4162] = -6.82975765E-02;
  COFD[4163] = -1.10754786E-03;
  COFD[4164] = -1.76962230E+01;
  COFD[4165] = 2.53412632E+00;
  COFD[4166] = -2.71561927E-03;
  COFD[4167] = -4.24696836E-03;
  COFD[4168] = -1.70480275E+01;
  COFD[4169] = 2.19974886E+00;
  COFD[4170] = 4.63679485E-02;
  COFD[4171] = -6.58350992E-03;
  COFD[4172] = -1.64162642E+01;
  COFD[4173] = 1.88142640E+00;
  COFD[4174] = 9.25230102E-02;
  COFD[4175] = -8.75912646E-03;
  COFD[4176] = -1.63717733E+01;
  COFD[4177] = 1.85076855E+00;
  COFD[4178] = 9.69498546E-02;
  COFD[4179] = -8.96701578E-03;
  COFD[4180] = -1.58282415E+01;
  COFD[4181] = 1.58723024E+00;
  COFD[4182] = 1.34913922E-01;
  COFD[4183] = -1.07480061E-02;
  COFD[4184] = -1.48216698E+01;
  COFD[4185] = 1.08277276E+00;
  COFD[4186] = 2.07252450E-01;
  COFD[4187] = -1.41278714E-02;
  COFD[4188] = -1.44527111E+01;
  COFD[4189] = 9.00592968E-01;
  COFD[4190] = 2.33311114E-01;
  COFD[4191] = -1.53425385E-02;
  COFD[4192] = -1.40317416E+01;
  COFD[4193] = 6.95865823E-01;
  COFD[4194] = 2.62499652E-01;
  COFD[4195] = -1.66993047E-02;
  COFD[4196] = -2.21414190E+01;
  COFD[4197] = 5.45978982E+00;
  COFD[4198] = -4.77871946E-01;
  COFD[4199] = 2.00798414E-02;
  COFD[4200] = -1.40460915E+01;
  COFD[4201] = 7.18763378E-01;
  COFD[4202] = 2.59237872E-01;
  COFD[4203] = -1.65477278E-02;
  COFD[4204] = -2.09388450E+01;
  COFD[4205] = 5.57974996E+00;
  COFD[4206] = -4.78112864E-01;
  COFD[4207] = 1.94826410E-02;
  COFD[4208] = -2.14367497E+01;
  COFD[4209] = 5.37405372E+00;
  COFD[4210] = -4.70540525E-01;
  COFD[4211] = 1.99137160E-02;
  COFD[4212] = -2.14640843E+01;
  COFD[4213] = 5.37405372E+00;
  COFD[4214] = -4.70540525E-01;
  COFD[4215] = 1.99137160E-02;
  COFD[4216] = -2.26547956E+01;
  COFD[4217] = 5.59528609E+00;
  COFD[4218] = -4.91473190E-01;
  COFD[4219] = 2.05131236E-02;
  COFD[4220] = -1.79421312E+01;
  COFD[4221] = 4.50796148E+00;
  COFD[4222] = -3.69986604E-01;
  COFD[4223] = 1.60286525E-02;
  COFD[4224] = -1.58057803E+01;
  COFD[4225] = 2.22000952E+00;
  COFD[4226] = 4.34143206E-02;
  COFD[4227] = -6.44371681E-03;
  COFD[4228] = -2.26669368E+01;
  COFD[4229] = 5.59528609E+00;
  COFD[4230] = -4.91473190E-01;
  COFD[4231] = 2.05131236E-02;
  COFD[4232] = -2.26422048E+01;
  COFD[4233] = 5.59528609E+00;
  COFD[4234] = -4.91473190E-01;
  COFD[4235] = 2.05131236E-02;
  COFD[4236] = -2.26104723E+01;
  COFD[4237] = 5.58175450E+00;
  COFD[4238] = -4.78660487E-01;
  COFD[4239] = 1.95178220E-02;
  COFD[4240] = -2.26201690E+01;
  COFD[4241] = 5.58491601E+00;
  COFD[4242] = -4.79798668E-01;
  COFD[4243] = 1.95960400E-02;
  COFD[4244] = -1.74160262E+01;
  COFD[4245] = 2.77201495E+00;
  COFD[4246] = -3.78503295E-02;
  COFD[4247] = -2.56220054E-03;
  COFD[4248] = -2.23927590E+01;
  COFD[4249] = 5.52880430E+00;
  COFD[4250] = -4.85323223E-01;
  COFD[4251] = 2.03436366E-02;
  COFD[4252] = -2.21269336E+01;
  COFD[4253] = 4.97192306E+00;
  COFD[4254] = -3.71804005E-01;
  COFD[4255] = 1.37844212E-02;
  COFD[4256] = -2.24546794E+01;
  COFD[4257] = 5.23807779E+00;
  COFD[4258] = -4.15451615E-01;
  COFD[4259] = 1.60367849E-02;
  COFD[4260] = -2.13890556E+01;
  COFD[4261] = 4.65974918E+00;
  COFD[4262] = -3.22390767E-01;
  COFD[4263] = 1.12918650E-02;
  COFD[4264] = -2.19256559E+01;
  COFD[4265] = 4.89350049E+00;
  COFD[4266] = -3.59442064E-01;
  COFD[4267] = 1.31619214E-02;
  COFD[4268] = -1.88405662E+01;
  COFD[4269] = 3.33125761E+00;
  COFD[4270] = -1.20168824E-01;
  COFD[4271] = 1.37545815E-03;
  COFD[4272] = -2.19360355E+01;
  COFD[4273] = 4.77045497E+00;
  COFD[4274] = -3.39955491E-01;
  COFD[4275] = 1.21784372E-02;
  COFD[4276] = -2.19453866E+01;
  COFD[4277] = 4.77045497E+00;
  COFD[4278] = -3.39955491E-01;
  COFD[4279] = 1.21784372E-02;
  COFD[4280] = -2.04884449E+01;
  COFD[4281] = 3.97419032E+00;
  COFD[4282] = -2.17151244E-01;
  COFD[4283] = 6.09602105E-03;
  COFD[4284] = -2.04822338E+01;
  COFD[4285] = 3.97419032E+00;
  COFD[4286] = -2.17151244E-01;
  COFD[4287] = 6.09602105E-03;
  COFD[4288] = -2.04887251E+01;
  COFD[4289] = 3.97419032E+00;
  COFD[4290] = -2.17151244E-01;
  COFD[4291] = 6.09602105E-03;
  COFD[4292] = -1.90327818E+01;
  COFD[4293] = 3.22670299E+00;
  COFD[4294] = -1.04657166E-01;
  COFD[4295] = 6.29620572E-04;
  COFD[4296] = -1.90376189E+01;
  COFD[4297] = 3.22670299E+00;
  COFD[4298] = -1.04657166E-01;
  COFD[4299] = 6.29620572E-04;
  COFD[4300] = -1.80237996E+01;
  COFD[4301] = 2.70981781E+00;
  COFD[4302] = -2.87009191E-02;
  COFD[4303] = -3.00031484E-03;
  COFD[4304] = -1.72790079E+01;
  COFD[4305] = 2.32181806E+00;
  COFD[4306] = 2.85392164E-02;
  COFD[4307] = -5.73831066E-03;
  COFD[4308] = -1.65620353E+01;
  COFD[4309] = 1.95984412E+00;
  COFD[4310] = 8.11931925E-02;
  COFD[4311] = -8.22685123E-03;
  COFD[4312] = -1.58768288E+01;
  COFD[4313] = 1.61945878E+00;
  COFD[4314] = 1.30286421E-01;
  COFD[4315] = -1.05317289E-02;
  COFD[4316] = -1.58282415E+01;
  COFD[4317] = 1.58723024E+00;
  COFD[4318] = 1.34913922E-01;
  COFD[4319] = -1.07480061E-02;
  COFD[4320] = -1.52744229E+01;
  COFD[4321] = 1.31960863E+00;
  COFD[4322] = 1.73344299E-01;
  COFD[4323] = -1.25457703E-02;
  COFD[4324] = -1.42557605E+01;
  COFD[4325] = 8.10499162E-01;
  COFD[4326] = 2.46166208E-01;
  COFD[4327] = -1.59404478E-02;
  COFD[4328] = -1.38696867E+01;
  COFD[4329] = 6.20774670E-01;
  COFD[4330] = 2.73203413E-01;
  COFD[4331] = -1.71972787E-02;
  COFD[4332] = -1.34919805E+01;
  COFD[4333] = 4.34069354E-01;
  COFD[4334] = 2.99858223E-01;
  COFD[4335] = -1.84358359E-02;
  COFD[4336] = -2.23702158E+01;
  COFD[4337] = 5.52375635E+00;
  COFD[4338] = -4.84828265E-01;
  COFD[4339] = 2.03285256E-02;
  COFD[4340] = -1.30635373E+01;
  COFD[4341] = 2.26455242E-01;
  COFD[4342] = 3.29362482E-01;
  COFD[4343] = -1.98017964E-02;
  COFD[4344] = -2.09750990E+01;
  COFD[4345] = 5.50429364E+00;
  COFD[4346] = -4.63372495E-01;
  COFD[4347] = 1.86455814E-02;
  COFD[4348] = -2.17411393E+01;
  COFD[4349] = 5.41958585E+00;
  COFD[4350] = -4.73477571E-01;
  COFD[4351] = 1.99215358E-02;
  COFD[4352] = -2.17689618E+01;
  COFD[4353] = 5.41958585E+00;
  COFD[4354] = -4.73477571E-01;
  COFD[4355] = 1.99215358E-02;
  COFD[4356] = -2.28924392E+01;
  COFD[4357] = 5.61013561E+00;
  COFD[4358] = -4.89933558E-01;
  COFD[4359] = 2.03098561E-02;
  COFD[4360] = -1.84634396E+01;
  COFD[4361] = 4.65797225E+00;
  COFD[4362] = -3.88483952E-01;
  COFD[4363] = 1.67915384E-02;
  COFD[4364] = -1.49248327E+01;
  COFD[4365] = 1.76546946E+00;
  COFD[4366] = 1.09258240E-01;
  COFD[4367] = -9.54522038E-03;
  COFD[4368] = -2.29049835E+01;
  COFD[4369] = 5.61013561E+00;
  COFD[4370] = -4.89933558E-01;
  COFD[4371] = 2.03098561E-02;
  COFD[4372] = -2.28794409E+01;
  COFD[4373] = 5.61013561E+00;
  COFD[4374] = -4.89933558E-01;
  COFD[4375] = 2.03098561E-02;
  COFD[4376] = -2.26368459E+01;
  COFD[4377] = 5.50714270E+00;
  COFD[4378] = -4.64060018E-01;
  COFD[4379] = 1.86881341E-02;
  COFD[4380] = -2.26685949E+01;
  COFD[4381] = 5.51963910E+00;
  COFD[4382] = -4.66555705E-01;
  COFD[4383] = 1.88313890E-02;
  COFD[4384] = -1.66390101E+01;
  COFD[4385] = 2.35716270E+00;
  COFD[4386] = 2.33630190E-02;
  COFD[4387] = -5.49227499E-03;
  COFD[4388] = -2.27595631E+01;
  COFD[4389] = 5.59981860E+00;
  COFD[4390] = -4.91614072E-01;
  COFD[4391] = 2.05016331E-02;
  COFD[4392] = -2.17986999E+01;
  COFD[4393] = 4.73948321E+00;
  COFD[4394] = -3.35004943E-01;
  COFD[4395] = 1.19275825E-02;
  COFD[4396] = -2.22774154E+01;
  COFD[4397] = 5.07362417E+00;
  COFD[4398] = -3.88094414E-01;
  COFD[4399] = 1.46129219E-02;
  COFD[4400] = -2.10053277E+01;
  COFD[4401] = 4.40732366E+00;
  COFD[4402] = -2.82889322E-01;
  COFD[4403] = 9.31663975E-03;
  COFD[4404] = -2.15962977E+01;
  COFD[4405] = 4.66482266E+00;
  COFD[4406] = -3.23189752E-01;
  COFD[4407] = 1.13320181E-02;
  COFD[4408] = -1.80427104E+01;
  COFD[4409] = 2.90760528E+00;
  COFD[4410] = -5.77438179E-02;
  COFD[4411] = -1.61157463E-03;
  COFD[4412] = -2.16062590E+01;
  COFD[4413] = 4.54192945E+00;
  COFD[4414] = -3.03755204E-01;
  COFD[4415] = 1.03536977E-02;
  COFD[4416] = -2.16159805E+01;
  COFD[4417] = 4.54192945E+00;
  COFD[4418] = -3.03755204E-01;
  COFD[4419] = 1.03536977E-02;
  COFD[4420] = -2.00028585E+01;
  COFD[4421] = 3.68035914E+00;
  COFD[4422] = -1.72246313E-01;
  COFD[4423] = 3.89112485E-03;
  COFD[4424] = -1.99963391E+01;
  COFD[4425] = 3.68035914E+00;
  COFD[4426] = -1.72246313E-01;
  COFD[4427] = 3.89112485E-03;
  COFD[4428] = -2.00031527E+01;
  COFD[4429] = 3.68035914E+00;
  COFD[4430] = -1.72246313E-01;
  COFD[4431] = 3.89112485E-03;
  COFD[4432] = -1.81581189E+01;
  COFD[4433] = 2.77116239E+00;
  COFD[4434] = -3.77250246E-02;
  COFD[4435] = -2.56819995E-03;
  COFD[4436] = -1.81632392E+01;
  COFD[4437] = 2.77116239E+00;
  COFD[4438] = -3.77250246E-02;
  COFD[4439] = -2.56819995E-03;
  COFD[4440] = -1.72678897E+01;
  COFD[4441] = 2.30401734E+00;
  COFD[4442] = 3.11443222E-02;
  COFD[4443] = -5.86207495E-03;
  COFD[4444] = -1.64316331E+01;
  COFD[4445] = 1.88148066E+00;
  COFD[4446] = 9.25151744E-02;
  COFD[4447] = -8.75875844E-03;
  COFD[4448] = -1.56095653E+01;
  COFD[4449] = 1.47685497E+00;
  COFD[4450] = 1.50778364E-01;
  COFD[4451] = -1.14906180E-02;
  COFD[4452] = -1.48753967E+01;
  COFD[4453] = 1.11690017E+00;
  COFD[4454] = 2.02362955E-01;
  COFD[4455] = -1.38996262E-02;
  COFD[4456] = -1.48216698E+01;
  COFD[4457] = 1.08277276E+00;
  COFD[4458] = 2.07252450E-01;
  COFD[4459] = -1.41278714E-02;
  COFD[4460] = -1.42557605E+01;
  COFD[4461] = 8.10499162E-01;
  COFD[4462] = 2.46166208E-01;
  COFD[4463] = -1.59404478E-02;
  COFD[4464] = -1.32691270E+01;
  COFD[4465] = 3.16452414E-01;
  COFD[4466] = 3.16572048E-01;
  COFD[4467] = -1.92093720E-02;
  COFD[4468] = -1.29160144E+01;
  COFD[4469] = 1.39889301E-01;
  COFD[4470] = 3.41628534E-01;
  COFD[4471] = -2.03678767E-02;
  COFD[4472] = -1.24841063E+01;
  COFD[4473] = -6.86597662E-02;
  COFD[4474] = 3.71153707E-01;
  COFD[4475] = -2.17314375E-02;
  COFD[4476] = -2.27467840E+01;
  COFD[4477] = 5.59873321E+00;
  COFD[4478] = -4.91665779E-01;
  COFD[4479] = 2.05114831E-02;
  COFD[4480] = -1.27059833E+01;
  COFD[4481] = 4.81478906E-02;
  COFD[4482] = 3.54630676E-01;
  COFD[4483] = -2.09687597E-02;
  COFD[4484] = -2.09816459E+01;
  COFD[4485] = 5.49082104E+00;
  COFD[4486] = -4.60014303E-01;
  COFD[4487] = 1.84365627E-02;
  COFD[4488] = -2.18770313E+01;
  COFD[4489] = 5.46038651E+00;
  COFD[4490] = -4.77939293E-01;
  COFD[4491] = 2.00823652E-02;
  COFD[4492] = -2.19052670E+01;
  COFD[4493] = 5.46038651E+00;
  COFD[4494] = -4.77939293E-01;
  COFD[4495] = 2.00823652E-02;
  COFD[4496] = -2.29058182E+01;
  COFD[4497] = 5.59504443E+00;
  COFD[4498] = -4.86415566E-01;
  COFD[4499] = 2.00947399E-02;
  COFD[4500] = -1.85877757E+01;
  COFD[4501] = 4.69975029E+00;
  COFD[4502] = -3.93412211E-01;
  COFD[4503] = 1.69852534E-02;
  COFD[4504] = -1.45392396E+01;
  COFD[4505] = 1.58706272E+00;
  COFD[4506] = 1.34937972E-01;
  COFD[4507] = -1.07491300E-02;
  COFD[4508] = -2.29187135E+01;
  COFD[4509] = 5.59504443E+00;
  COFD[4510] = -4.86415566E-01;
  COFD[4511] = 2.00947399E-02;
  COFD[4512] = -2.28924656E+01;
  COFD[4513] = 5.59504443E+00;
  COFD[4514] = -4.86415566E-01;
  COFD[4515] = 2.00947399E-02;
  COFD[4516] = -2.26543431E+01;
  COFD[4517] = 5.49570925E+00;
  COFD[4518] = -4.60969345E-01;
  COFD[4519] = 1.84906305E-02;
  COFD[4520] = -2.26705837E+01;
  COFD[4521] = 5.50119356E+00;
  COFD[4522] = -4.62439469E-01;
  COFD[4523] = 1.85841071E-02;
  COFD[4524] = -1.63277465E+01;
  COFD[4525] = 2.20684400E+00;
  COFD[4526] = 4.53338465E-02;
  COFD[4527] = -6.53458896E-03;
  COFD[4528] = -2.28218040E+01;
  COFD[4529] = 5.60692017E+00;
  COFD[4530] = -4.91295058E-01;
  COFD[4531] = 2.04387644E-02;
  COFD[4532] = -2.16564571E+01;
  COFD[4533] = 4.65505428E+00;
  COFD[4534] = -3.21651467E-01;
  COFD[4535] = 1.12547138E-02;
  COFD[4536] = -2.21555521E+01;
  COFD[4537] = 5.00070625E+00;
  COFD[4538] = -3.76355283E-01;
  COFD[4539] = 1.40141622E-02;
  COFD[4540] = -2.08019949E+01;
  COFD[4541] = 4.29990973E+00;
  COFD[4542] = -2.66411377E-01;
  COFD[4543] = 8.50361424E-03;
  COFD[4544] = -2.14611157E+01;
  COFD[4545] = 4.58545934E+00;
  COFD[4546] = -3.10556391E-01;
  COFD[4547] = 1.06931834E-02;
  COFD[4548] = -1.76677009E+01;
  COFD[4549] = 2.72650149E+00;
  COFD[4550] = -3.11601195E-02;
  COFD[4551] = -2.88242823E-03;
  COFD[4552] = -2.14350667E+01;
  COFD[4553] = 4.44599921E+00;
  COFD[4554] = -2.88841525E-01;
  COFD[4555] = 9.61119142E-03;
  COFD[4556] = -2.14451145E+01;
  COFD[4557] = 4.44599921E+00;
  COFD[4558] = -2.88841525E-01;
  COFD[4559] = 9.61119142E-03;
  COFD[4560] = -1.97359634E+01;
  COFD[4561] = 3.54254584E+00;
  COFD[4562] = -1.51588685E-01;
  COFD[4563] = 2.88891088E-03;
  COFD[4564] = -1.97291674E+01;
  COFD[4565] = 3.54254584E+00;
  COFD[4566] = -1.51588685E-01;
  COFD[4567] = 2.88891088E-03;
  COFD[4568] = -1.97362702E+01;
  COFD[4569] = 3.54254584E+00;
  COFD[4570] = -1.51588685E-01;
  COFD[4571] = 2.88891088E-03;
  COFD[4572] = -1.78252903E+01;
  COFD[4573] = 2.60486558E+00;
  COFD[4574] = -1.32252668E-02;
  COFD[4575] = -3.74170980E-03;
  COFD[4576] = -1.78306685E+01;
  COFD[4577] = 2.60486558E+00;
  COFD[4578] = -1.32252668E-02;
  COFD[4579] = -3.74170980E-03;
  COFD[4580] = -1.69703233E+01;
  COFD[4581] = 2.15337734E+00;
  COFD[4582] = 5.31165264E-02;
  COFD[4583] = -6.90242414E-03;
  COFD[4584] = -1.60744402E+01;
  COFD[4585] = 1.70515393E+00;
  COFD[4586] = 1.17964458E-01;
  COFD[4587] = -9.95487344E-03;
  COFD[4588] = -1.52407610E+01;
  COFD[4589] = 1.29532808E+00;
  COFD[4590] = 1.76825909E-01;
  COFD[4591] = -1.27084392E-02;
  COFD[4592] = -1.45087618E+01;
  COFD[4593] = 9.35690838E-01;
  COFD[4594] = 2.28295914E-01;
  COFD[4595] = -1.51088791E-02;
  COFD[4596] = -1.44527111E+01;
  COFD[4597] = 9.00592968E-01;
  COFD[4598] = 2.33311114E-01;
  COFD[4599] = -1.53425385E-02;
  COFD[4600] = -1.38696867E+01;
  COFD[4601] = 6.20774670E-01;
  COFD[4602] = 2.73203413E-01;
  COFD[4603] = -1.71972787E-02;
  COFD[4604] = -1.29160144E+01;
  COFD[4605] = 1.39889301E-01;
  COFD[4606] = 3.41628534E-01;
  COFD[4607] = -2.03678767E-02;
  COFD[4608] = -1.25394850E+01;
  COFD[4609] = -4.80135853E-02;
  COFD[4610] = 3.68241930E-01;
  COFD[4611] = -2.15974735E-02;
  COFD[4612] = -1.21103757E+01;
  COFD[4613] = -2.54815099E-01;
  COFD[4614] = 3.97347047E-01;
  COFD[4615] = -2.29334921E-02;
  COFD[4616] = -2.28072905E+01;
  COFD[4617] = 5.60504512E+00;
  COFD[4618] = -4.91228535E-01;
  COFD[4619] = 2.04427740E-02;
  COFD[4620] = -1.22701310E+01;
  COFD[4621] = -1.61500371E-01;
  COFD[4622] = 3.84217824E-01;
  COFD[4623] = -2.23309656E-02;
  COFD[4624] = -2.09649992E+01;
  COFD[4625] = 5.45055984E+00;
  COFD[4626] = -4.52626477E-01;
  COFD[4627] = 1.80297457E-02;
  COFD[4628] = -2.20665268E+01;
  COFD[4629] = 5.51007247E+00;
  COFD[4630] = -4.83411907E-01;
  COFD[4631] = 2.02812924E-02;
  COFD[4632] = -2.20949114E+01;
  COFD[4633] = 5.51007247E+00;
  COFD[4634] = -4.83411907E-01;
  COFD[4635] = 2.02812924E-02;
  COFD[4636] = -2.29515207E+01;
  COFD[4637] = 5.58219321E+00;
  COFD[4638] = -4.82941269E-01;
  COFD[4639] = 1.98711890E-02;
  COFD[4640] = -1.87542772E+01;
  COFD[4641] = 4.74513688E+00;
  COFD[4642] = -3.98725524E-01;
  COFD[4643] = 1.71922391E-02;
  COFD[4644] = -1.41324917E+01;
  COFD[4645] = 1.38727136E+00;
  COFD[4646] = 1.63642976E-01;
  COFD[4647] = -1.20926895E-02;
  COFD[4648] = -2.29645447E+01;
  COFD[4649] = 5.58219321E+00;
  COFD[4650] = -4.82941269E-01;
  COFD[4651] = 1.98711890E-02;
  COFD[4652] = -2.29380382E+01;
  COFD[4653] = 5.58219321E+00;
  COFD[4654] = -4.82941269E-01;
  COFD[4655] = 1.98711890E-02;
  COFD[4656] = -2.26384257E+01;
  COFD[4657] = 5.45743664E+00;
  COFD[4658] = -4.53877300E-01;
  COFD[4659] = 1.80982969E-02;
  COFD[4660] = -2.26836499E+01;
  COFD[4661] = 5.47552771E+00;
  COFD[4662] = -4.57173951E-01;
  COFD[4663] = 1.82791721E-02;
  COFD[4664] = -1.59785605E+01;
  COFD[4665] = 2.03061309E+00;
  COFD[4666] = 7.09547643E-02;
  COFD[4667] = -7.74512315E-03;
  COFD[4668] = -2.29034442E+01;
  COFD[4669] = 5.61183042E+00;
  COFD[4670] = -4.90566396E-01;
  COFD[4671] = 2.03536798E-02;
  COFD[4672] = -2.15260200E+01;
  COFD[4673] = 4.56640766E+00;
  COFD[4674] = -3.07568513E-01;
  COFD[4675] = 1.05437086E-02;
  COFD[4676] = -2.20003434E+01;
  COFD[4677] = 4.90271383E+00;
  COFD[4678] = -3.60896715E-01;
  COFD[4679] = 1.32352181E-02;
  COFD[4680] = -2.05654423E+01;
  COFD[4681] = 4.16804380E+00;
  COFD[4682] = -2.46372859E-01;
  COFD[4683] = 7.52105030E-03;
  COFD[4684] = -2.12918063E+01;
  COFD[4685] = 4.48188359E+00;
  COFD[4686] = -2.94414571E-01;
  COFD[4687] = 9.88838906E-03;
  COFD[4688] = -1.73379092E+01;
  COFD[4689] = 2.55561949E+00;
  COFD[4690] = -5.90530207E-03;
  COFD[4691] = -4.09393782E-03;
  COFD[4692] = -2.12290046E+01;
  COFD[4693] = 4.32707381E+00;
  COFD[4694] = -2.70563830E-01;
  COFD[4695] = 8.70791456E-03;
  COFD[4696] = -2.12391730E+01;
  COFD[4697] = 4.32707381E+00;
  COFD[4698] = -2.70563830E-01;
  COFD[4699] = 8.70791456E-03;
  COFD[4700] = -1.94433367E+01;
  COFD[4701] = 3.38805125E+00;
  COFD[4702] = -1.28605694E-01;
  COFD[4703] = 1.78139928E-03;
  COFD[4704] = -1.94364373E+01;
  COFD[4705] = 3.38805125E+00;
  COFD[4706] = -1.28605694E-01;
  COFD[4707] = 1.78139928E-03;
  COFD[4708] = -1.94436482E+01;
  COFD[4709] = 3.38805125E+00;
  COFD[4710] = -1.28605694E-01;
  COFD[4711] = 1.78139928E-03;
  COFD[4712] = -1.75400768E+01;
  COFD[4713] = 2.45372496E+00;
  COFD[4714] = 9.16587873E-03;
  COFD[4715] = -4.81554146E-03;
  COFD[4716] = -1.75455525E+01;
  COFD[4717] = 2.45372496E+00;
  COFD[4718] = 9.16587873E-03;
  COFD[4719] = -4.81554146E-03;
  COFD[4720] = -1.66106763E+01;
  COFD[4721] = 1.97256518E+00;
  COFD[4722] = 7.93547823E-02;
  COFD[4723] = -8.14046199E-03;
  COFD[4724] = -1.56831472E+01;
  COFD[4725] = 1.51210139E+00;
  COFD[4726] = 1.45705555E-01;
  COFD[4727] = -1.12527582E-02;
  COFD[4728] = -1.48245663E+01;
  COFD[4729] = 1.09196780E+00;
  COFD[4730] = 2.05935790E-01;
  COFD[4731] = -1.40664564E-02;
  COFD[4732] = -1.40894144E+01;
  COFD[4733] = 7.31458802E-01;
  COFD[4734] = 2.57430647E-01;
  COFD[4735] = -1.64638268E-02;
  COFD[4736] = -1.40317416E+01;
  COFD[4737] = 6.95865823E-01;
  COFD[4738] = 2.62499652E-01;
  COFD[4739] = -1.66993047E-02;
  COFD[4740] = -1.34919805E+01;
  COFD[4741] = 4.34069354E-01;
  COFD[4742] = 2.99858223E-01;
  COFD[4743] = -1.84358359E-02;
  COFD[4744] = -1.24841063E+01;
  COFD[4745] = -6.86597662E-02;
  COFD[4746] = 3.71153707E-01;
  COFD[4747] = -2.17314375E-02;
  COFD[4748] = -1.21103757E+01;
  COFD[4749] = -2.54815099E-01;
  COFD[4750] = 3.97347047E-01;
  COFD[4751] = -2.29334921E-02;
  COFD[4752] = -1.16357512E+01;
  COFD[4753] = -4.81860216E-01;
  COFD[4754] = 4.29406287E-01;
  COFD[4755] = -2.44123168E-02;
  COFD[4756] = -2.28938469E+01;
  COFD[4757] = 5.61204588E+00;
  COFD[4758] = -4.90798632E-01;
  COFD[4759] = 2.03718133E-02;
  COFD[4760] = -2.27628265E+01;
  COFD[4761] = 5.60192583E+00;
  COFD[4762] = -4.91455403E-01;
  COFD[4763] = 2.04776556E-02;
  COFD[4764] = -1.42894603E+01;
  COFD[4765] = 3.67490723E+00;
  COFD[4766] = -2.65114792E-01;
  COFD[4767] = 1.16092671E-02;
  COFD[4768] = -1.40756909E+01;
  COFD[4769] = 3.07549274E+00;
  COFD[4770] = -1.88889344E-01;
  COFD[4771] = 8.37152866E-03;
  COFD[4772] = -1.40949183E+01;
  COFD[4773] = 3.07549274E+00;
  COFD[4774] = -1.88889344E-01;
  COFD[4775] = 8.37152866E-03;
  COFD[4776] = -1.52486292E+01;
  COFD[4777] = 3.35922578E+00;
  COFD[4778] = -2.25181399E-01;
  COFD[4779] = 9.92132878E-03;
  COFD[4780] = -1.16906458E+01;
  COFD[4781] = 2.47469981E+00;
  COFD[4782] = -1.10436257E-01;
  COFD[4783] = 4.95273813E-03;
  COFD[4784] = -2.10643264E+01;
  COFD[4785] = 5.53614864E+00;
  COFD[4786] = -4.86046753E-01;
  COFD[4787] = 2.03659193E-02;
  COFD[4788] = -1.52554785E+01;
  COFD[4789] = 3.35922578E+00;
  COFD[4790] = -2.25181399E-01;
  COFD[4791] = 9.92132878E-03;
  COFD[4792] = -1.52414498E+01;
  COFD[4793] = 3.35922578E+00;
  COFD[4794] = -2.25181399E-01;
  COFD[4795] = 9.92132878E-03;
  COFD[4796] = -1.59633426E+01;
  COFD[4797] = 3.66853818E+00;
  COFD[4798] = -2.64346221E-01;
  COFD[4799] = 1.15784613E-02;
  COFD[4800] = -1.59327344E+01;
  COFD[4801] = 3.65620899E+00;
  COFD[4802] = -2.62933804E-01;
  COFD[4803] = 1.15253223E-02;
  COFD[4804] = -2.04833743E+01;
  COFD[4805] = 5.23112374E+00;
  COFD[4806] = -4.54967682E-01;
  COFD[4807] = 1.93570423E-02;
  COFD[4808] = -1.50031706E+01;
  COFD[4809] = 3.26223357E+00;
  COFD[4810] = -2.12746642E-01;
  COFD[4811] = 9.38912883E-03;
  COFD[4812] = -1.81432499E+01;
  COFD[4813] = 4.37565431E+00;
  COFD[4814] = -3.53906025E-01;
  COFD[4815] = 1.53760786E-02;
  COFD[4816] = -1.76002073E+01;
  COFD[4817] = 4.19171952E+00;
  COFD[4818] = -3.31354810E-01;
  COFD[4819] = 1.44520623E-02;
  COFD[4820] = -1.85864196E+01;
  COFD[4821] = 4.54915847E+00;
  COFD[4822] = -3.75000738E-01;
  COFD[4823] = 1.62324821E-02;
  COFD[4824] = -1.83249359E+01;
  COFD[4825] = 4.42045763E+00;
  COFD[4826] = -3.59451578E-01;
  COFD[4827] = 1.56056164E-02;
  COFD[4828] = -2.02693704E+01;
  COFD[4829] = 5.10426133E+00;
  COFD[4830] = -4.41256919E-01;
  COFD[4831] = 1.88737290E-02;
  COFD[4832] = -1.87434421E+01;
  COFD[4833] = 4.48550694E+00;
  COFD[4834] = -3.67277454E-01;
  COFD[4835] = 1.59194755E-02;
  COFD[4836] = -1.87483223E+01;
  COFD[4837] = 4.48550694E+00;
  COFD[4838] = -3.67277454E-01;
  COFD[4839] = 1.59194755E-02;
  COFD[4840] = -1.98609159E+01;
  COFD[4841] = 4.84231878E+00;
  COFD[4842] = -4.10101001E-01;
  COFD[4843] = 1.76356687E-02;
  COFD[4844] = -1.98580097E+01;
  COFD[4845] = 4.84231878E+00;
  COFD[4846] = -4.10101001E-01;
  COFD[4847] = 1.76356687E-02;
  COFD[4848] = -1.98610465E+01;
  COFD[4849] = 4.84231878E+00;
  COFD[4850] = -4.10101001E-01;
  COFD[4851] = 1.76356687E-02;
  COFD[4852] = -2.07714631E+01;
  COFD[4853] = 5.13381106E+00;
  COFD[4854] = -4.44579059E-01;
  COFD[4855] = 1.89972323E-02;
  COFD[4856] = -2.07735397E+01;
  COFD[4857] = 5.13381106E+00;
  COFD[4858] = -4.44579059E-01;
  COFD[4859] = 1.89972323E-02;
  COFD[4860] = -2.12157081E+01;
  COFD[4861] = 5.24766160E+00;
  COFD[4862] = -4.56882620E-01;
  COFD[4863] = 1.94309393E-02;
  COFD[4864] = -2.16312330E+01;
  COFD[4865] = 5.36160575E+00;
  COFD[4866] = -4.69678973E-01;
  COFD[4867] = 1.99069834E-02;
  COFD[4868] = -2.18580027E+01;
  COFD[4869] = 5.40322773E+00;
  COFD[4870] = -4.72630192E-01;
  COFD[4871] = 1.99360102E-02;
  COFD[4872] = -2.20902743E+01;
  COFD[4873] = 5.45237285E+00;
  COFD[4874] = -4.77075672E-01;
  COFD[4875] = 2.00518642E-02;
  COFD[4876] = -2.21414190E+01;
  COFD[4877] = 5.45978982E+00;
  COFD[4878] = -4.77871946E-01;
  COFD[4879] = 2.00798414E-02;
  COFD[4880] = -2.23702158E+01;
  COFD[4881] = 5.52375635E+00;
  COFD[4882] = -4.84828265E-01;
  COFD[4883] = 2.03285256E-02;
  COFD[4884] = -2.27467840E+01;
  COFD[4885] = 5.59873321E+00;
  COFD[4886] = -4.91665779E-01;
  COFD[4887] = 2.05114831E-02;
  COFD[4888] = -2.28072905E+01;
  COFD[4889] = 5.60504512E+00;
  COFD[4890] = -4.91228535E-01;
  COFD[4891] = 2.04427740E-02;
  COFD[4892] = -2.28938469E+01;
  COFD[4893] = 5.61204588E+00;
  COFD[4894] = -4.90798632E-01;
  COFD[4895] = 2.03718133E-02;
  COFD[4896] = -1.49828551E+01;
  COFD[4897] = 3.25781069E+00;
  COFD[4898] = -2.12199367E-01;
  COFD[4899] = 9.36657283E-03;
}

// List of specs with small weight, dim NLITE
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKTDIF(int* KTDIF)
{
  KTDIF[0] = 1;
  KTDIF[1] = 5;
}

// Poly fits for thermal diff ratios, dim NO*NLITE*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFTD(amrex::Real* COFTD)
{
  COFTD[0] = -2.32473219E-01;
  COFTD[1] = 9.16129716E-04;
  COFTD[2] = -3.79155489E-07;
  COFTD[3] = 5.37766351E-11;
  COFTD[4] = 0.00000000E+00;
  COFTD[5] = 0.00000000E+00;
  COFTD[6] = 0.00000000E+00;
  COFTD[7] = 0.00000000E+00;
  COFTD[8] = 2.35281489E-01;
  COFTD[9] = 4.65667373E-04;
  COFTD[10] = -2.60938016E-07;
  COFTD[11] = 4.49268709E-11;
  COFTD[12] = 2.37051899E-01;
  COFTD[13] = 4.69171356E-04;
  COFTD[14] = -2.62901483E-07;
  COFTD[15] = 4.52649298E-11;
  COFTD[16] = 1.80186380E-01;
  COFTD[17] = 6.02880848E-04;
  COFTD[18] = -3.27062078E-07;
  COFTD[19] = 5.50169005E-11;
  COFTD[20] = 1.44152190E-01;
  COFTD[21] = 7.99993584E-05;
  COFTD[22] = -4.89707442E-08;
  COFTD[23] = 9.14277269E-12;
  COFTD[24] = -1.74351746E-01;
  COFTD[25] = 8.62242165E-04;
  COFTD[26] = -3.79543417E-07;
  COFTD[27] = 5.60259034E-11;
  COFTD[28] = 1.80513126E-01;
  COFTD[29] = 6.03974096E-04;
  COFTD[30] = -3.27655164E-07;
  COFTD[31] = 5.51166667E-11;
  COFTD[32] = 1.79839678E-01;
  COFTD[33] = 6.01720824E-04;
  COFTD[34] = -3.26432767E-07;
  COFTD[35] = 5.49110406E-11;
  COFTD[36] = 1.00038655E-01;
  COFTD[37] = 6.50465703E-04;
  COFTD[38] = -3.41777446E-07;
  COFTD[39] = 5.62776574E-11;
  COFTD[40] = 1.05123703E-01;
  COFTD[41] = 6.50663360E-04;
  COFTD[42] = -3.42563171E-07;
  COFTD[43] = 5.64801866E-11;
  COFTD[44] = -1.61357064E-01;
  COFTD[45] = 9.05917454E-04;
  COFTD[46] = -4.07877889E-07;
  COFTD[47] = 6.10624399E-11;
  COFTD[48] = 2.00119185E-01;
  COFTD[49] = 5.64791694E-04;
  COFTD[50] = -3.09444383E-07;
  COFTD[51] = 5.24137469E-11;
  COFTD[52] = -2.00308977E-02;
  COFTD[53] = 8.50438113E-04;
  COFTD[54] = -4.21063477E-07;
  COFTD[55] = 6.67958138E-11;
  COFTD[56] = 1.63244604E-02;
  COFTD[57] = 7.90131000E-04;
  COFTD[58] = -3.98291254E-07;
  COFTD[59] = 6.38849501E-11;
  COFTD[60] = -5.08743421E-02;
  COFTD[61] = 8.54340362E-04;
  COFTD[62] = -4.15925370E-07;
  COFTD[63] = 6.53061561E-11;
  COFTD[64] = -2.72323151E-02;
  COFTD[65] = 8.39182512E-04;
  COFTD[66] = -4.13848987E-07;
  COFTD[67] = 6.54926559E-11;
  COFTD[68] = -1.41799447E-01;
  COFTD[69] = 9.22438273E-04;
  COFTD[70] = -4.23685013E-07;
  COFTD[71] = 6.42120066E-11;
  COFTD[72] = -4.05264355E-02;
  COFTD[73] = 8.65034494E-04;
  COFTD[74] = -4.23754623E-07;
  COFTD[75] = 6.67873033E-11;
  COFTD[76] = -4.05741399E-02;
  COFTD[77] = 8.66052741E-04;
  COFTD[78] = -4.24253431E-07;
  COFTD[79] = 6.68659197E-11;
  COFTD[80] = -1.04600639E-01;
  COFTD[81] = 9.18520347E-04;
  COFTD[82] = -4.33727277E-07;
  COFTD[83] = 6.68515219E-11;
  COFTD[84] = -1.04534832E-01;
  COFTD[85] = 9.17942482E-04;
  COFTD[86] = -4.33454408E-07;
  COFTD[87] = 6.68094638E-11;
  COFTD[88] = -1.04603590E-01;
  COFTD[89] = 9.18546258E-04;
  COFTD[90] = -4.33739512E-07;
  COFTD[91] = 6.68534077E-11;
  COFTD[92] = -1.49470017E-01;
  COFTD[93] = 9.39836937E-04;
  COFTD[94] = -4.29897941E-07;
  COFTD[95] = 6.49890671E-11;
  COFTD[96] = -1.49532693E-01;
  COFTD[97] = 9.40231034E-04;
  COFTD[98] = -4.30078208E-07;
  COFTD[99] = 6.50163186E-11;
  COFTD[100] = -1.70681717E-01;
  COFTD[101] = 9.45804136E-04;
  COFTD[102] = -4.24958076E-07;
  COFTD[103] = 6.35382171E-11;
  COFTD[104] = -1.87225880E-01;
  COFTD[105] = 9.46155112E-04;
  COFTD[106] = -4.18273792E-07;
  COFTD[107] = 6.19098425E-11;
  COFTD[108] = -2.00326797E-01;
  COFTD[109] = 9.43206411E-04;
  COFTD[110] = -4.10815084E-07;
  COFTD[111] = 6.02382335E-11;
  COFTD[112] = -2.10628102E-01;
  COFTD[113] = 9.38318430E-04;
  COFTD[114] = -4.03217097E-07;
  COFTD[115] = 5.86175281E-11;
  COFTD[116] = -2.11550069E-01;
  COFTD[117] = 9.37688881E-04;
  COFTD[118] = -4.02415206E-07;
  COFTD[119] = 5.84513118E-11;
  COFTD[120] = -2.18698457E-01;
  COFTD[121] = 9.32462257E-04;
  COFTD[122] = -3.95892983E-07;
  COFTD[123] = 5.71051456E-11;
  COFTD[124] = -2.30604706E-01;
  COFTD[125] = 9.19203996E-04;
  COFTD[126] = -3.81973633E-07;
  COFTD[127] = 5.43234320E-11;
  COFTD[128] = -2.34683739E-01;
  COFTD[129] = 9.14438684E-04;
  COFTD[130] = -3.76888486E-07;
  COFTD[131] = 5.33062577E-11;
  COFTD[132] = -2.38573600E-01;
  COFTD[133] = 9.07159457E-04;
  COFTD[134] = -3.70373634E-07;
  COFTD[135] = 5.20505995E-11;
  COFTD[136] = 2.01521521E-01;
  COFTD[137] = 5.62743751E-04;
  COFTD[138] = -3.08519054E-07;
  COFTD[139] = 5.22805672E-11;
  COFTD[140] = 1.95741220E-02;
  COFTD[141] = 8.31428465E-04;
  COFTD[142] = -4.19561913E-07;
  COFTD[143] = 6.73417788E-11;
  COFTD[144] = -1.44152190E-01;
  COFTD[145] = -7.99993584E-05;
  COFTD[146] = 4.89707442E-08;
  COFTD[147] = -9.14277269E-12;
  COFTD[148] = 4.06676789E-01;
  COFTD[149] = 3.84699853E-05;
  COFTD[150] = -2.54843294E-08;
  COFTD[151] = 5.86294132E-12;
  COFTD[152] = 4.12890501E-01;
  COFTD[153] = 3.90577773E-05;
  COFTD[154] = -2.58737105E-08;
  COFTD[155] = 5.95252260E-12;
  COFTD[156] = 4.28228101E-01;
  COFTD[157] = 1.20872486E-04;
  COFTD[158] = -7.70263335E-08;
  COFTD[159] = 1.52677960E-11;
  COFTD[160] = 0.00000000E+00;
  COFTD[161] = 0.00000000E+00;
  COFTD[162] = 0.00000000E+00;
  COFTD[163] = 0.00000000E+00;
  COFTD[164] = 2.27466103E-02;
  COFTD[165] = 6.73071543E-04;
  COFTD[166] = -3.40932103E-07;
  COFTD[167] = 5.48493184E-11;
  COFTD[168] = 4.29786829E-01;
  COFTD[169] = 1.21312456E-04;
  COFTD[170] = -7.73067054E-08;
  COFTD[171] = 1.53233700E-11;
  COFTD[172] = 4.26576987E-01;
  COFTD[173] = 1.20406440E-04;
  COFTD[174] = -7.67293441E-08;
  COFTD[175] = 1.52089282E-11;
  COFTD[176] = 3.31188133E-01;
  COFTD[177] = 1.81325042E-04;
  COFTD[178] = -1.11095367E-07;
  COFTD[179] = 2.07634046E-11;
  COFTD[180] = 3.39554500E-01;
  COFTD[181] = 1.79333587E-04;
  COFTD[182] = -1.10134815E-07;
  COFTD[183] = 2.06425572E-11;
  COFTD[184] = 1.22692619E-01;
  COFTD[185] = 6.21274281E-04;
  COFTD[186] = -3.29963157E-07;
  COFTD[187] = 5.47158146E-11;
  COFTD[188] = 4.30602469E-01;
  COFTD[189] = 9.35955212E-05;
  COFTD[190] = -6.03979306E-08;
  COFTD[191] = 1.23114290E-11;
  COFTD[192] = 2.93190141E-01;
  COFTD[193] = 4.01428114E-04;
  COFTD[194] = -2.30704675E-07;
  COFTD[195] = 4.05174676E-11;
  COFTD[196] = 3.05611370E-01;
  COFTD[197] = 3.24503916E-04;
  COFTD[198] = -1.89888419E-07;
  COFTD[199] = 3.38661408E-11;
  COFTD[200] = 2.49016176E-01;
  COFTD[201] = 4.29034331E-04;
  COFTD[202] = -2.42667349E-07;
  COFTD[203] = 4.20799172E-11;
  COFTD[204] = 2.74035711E-01;
  COFTD[205] = 3.96247941E-04;
  COFTD[206] = -2.26856932E-07;
  COFTD[207] = 3.97175174E-11;
  COFTD[208] = 1.59647280E-01;
  COFTD[209] = 6.04189783E-04;
  COFTD[210] = -3.25568248E-07;
  COFTD[211] = 5.45132450E-11;
  COFTD[212] = 2.71945062E-01;
  COFTD[213] = 4.30812732E-04;
  COFTD[214] = -2.45083425E-07;
  COFTD[215] = 4.26911430E-11;
  COFTD[216] = 2.72586795E-01;
  COFTD[217] = 4.31829359E-04;
  COFTD[218] = -2.45661770E-07;
  COFTD[219] = 4.27918850E-11;
  COFTD[220] = 2.11488756E-01;
  COFTD[221] = 5.48043055E-04;
  COFTD[222] = -3.01831774E-07;
  COFTD[223] = 5.13133698E-11;
  COFTD[224] = 2.11222471E-01;
  COFTD[225] = 5.47353014E-04;
  COFTD[226] = -3.01451738E-07;
  COFTD[227] = 5.12487611E-11;
  COFTD[228] = 2.11500700E-01;
  COFTD[229] = 5.48074004E-04;
  COFTD[230] = -3.01848819E-07;
  COFTD[231] = 5.13162676E-11;
  COFTD[232] = 1.58396101E-01;
  COFTD[233] = 6.35597673E-04;
  COFTD[234] = -3.41439546E-07;
  COFTD[235] = 5.70515995E-11;
  COFTD[236] = 1.58529051E-01;
  COFTD[237] = 6.36131164E-04;
  COFTD[238] = -3.41726134E-07;
  COFTD[239] = 5.70994860E-11;
  COFTD[240] = 1.30463447E-01;
  COFTD[241] = 6.81796796E-04;
  COFTD[242] = -3.61585604E-07;
  COFTD[243] = 5.99025499E-11;
  COFTD[244] = 1.05942671E-01;
  COFTD[245] = 7.18848555E-04;
  COFTD[246] = -3.77076057E-07;
  COFTD[247] = 6.20225689E-11;
  COFTD[248] = 8.44926326E-02;
  COFTD[249] = 7.49323727E-04;
  COFTD[250] = -3.89336188E-07;
  COFTD[251] = 6.36479819E-11;
  COFTD[252] = 6.60203320E-02;
  COFTD[253] = 7.74269824E-04;
  COFTD[254] = -3.99007487E-07;
  COFTD[255] = 6.48893661E-11;
  COFTD[256] = 6.42551462E-02;
  COFTD[257] = 7.76497976E-04;
  COFTD[258] = -3.99842171E-07;
  COFTD[259] = 6.49928891E-11;
  COFTD[260] = 5.02866745E-02;
  COFTD[261] = 7.94635109E-04;
  COFTD[262] = -4.06630112E-07;
  COFTD[263] = 6.58364054E-11;
  COFTD[264] = 2.42287950E-02;
  COFTD[265] = 8.26439872E-04;
  COFTD[266] = -4.17936294E-07;
  COFTD[267] = 6.71697638E-11;
  COFTD[268] = 1.49563336E-02;
  COFTD[269] = 8.39180881E-04;
  COFTD[270] = -4.22562254E-07;
  COFTD[271] = 6.77329243E-11;
  COFTD[272] = 4.65223723E-03;
  COFTD[273] = 8.50497228E-04;
  COFTD[274] = -4.26212406E-07;
  COFTD[275] = 6.81161229E-11;
  COFTD[276] = 4.31330748E-01;
  COFTD[277] = 9.20535689E-05;
  COFTD[278] = -5.94508898E-08;
  COFTD[279] = 1.21437846E-11;
}

// compute the critical parameters for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS(
  amrex::Real* Tci, amrex::Real* ai, amrex::Real* bi, amrex::Real* acentric_i)
{

  amrex::Real EPS[35];
  amrex::Real SIG[35];
  amrex::Real wt[35];
  amrex::Real avogadro = 6.02214199e23;
  amrex::Real boltzmann = 1.3806503e-16; // we work in CGS
  amrex::Real Rcst = 83.144598;          // in bar [CGS] !

  egtransetEPS(EPS);
  egtransetSIG(SIG);
  get_mw(wt);

  // species 0: NC12H26
  Tci[0] = 1.316 * EPS[0];
  ai[0] = (5.55 * avogadro * avogadro * EPS[0] * boltzmann *
           pow(1e-8 * SIG[0], 3.0)) /
          (wt[0] * wt[0]);
  bi[0] = 0.855 * avogadro * pow(1e-8 * SIG[0], 3.0) / (wt[0]);
  acentric_i[0] = 0.0;

  // species 1: H
  Tci[1] = 1.316 * EPS[1];
  ai[1] = (5.55 * avogadro * avogadro * EPS[1] * boltzmann *
           pow(1e-8 * SIG[1], 3.0)) /
          (wt[1] * wt[1]);
  bi[1] = 0.855 * avogadro * pow(1e-8 * SIG[1], 3.0) / (wt[1]);
  acentric_i[1] = 0.0;

  // species 2: O
  Tci[2] = 1.316 * EPS[2];
  ai[2] = (5.55 * avogadro * avogadro * EPS[2] * boltzmann *
           pow(1e-8 * SIG[2], 3.0)) /
          (wt[2] * wt[2]);
  bi[2] = 0.855 * avogadro * pow(1e-8 * SIG[2], 3.0) / (wt[2]);
  acentric_i[2] = 0.0;

  // species 3: OH
  Tci[3] = 1.316 * EPS[3];
  ai[3] = (5.55 * avogadro * avogadro * EPS[3] * boltzmann *
           pow(1e-8 * SIG[3], 3.0)) /
          (wt[3] * wt[3]);
  bi[3] = 0.855 * avogadro * pow(1e-8 * SIG[3], 3.0) / (wt[3]);
  acentric_i[3] = 0.0;

  // species 4: HO2
  Tci[4] = 1.316 * EPS[4];
  ai[4] = (5.55 * avogadro * avogadro * EPS[4] * boltzmann *
           pow(1e-8 * SIG[4], 3.0)) /
          (wt[4] * wt[4]);
  bi[4] = 0.855 * avogadro * pow(1e-8 * SIG[4], 3.0) / (wt[4]);
  acentric_i[4] = 0.0;

  // species 5: H2
  // Imported from NIST
  Tci[5] = 33.145000;
  ai[5] = 1e6 * 0.42748 * Rcst * Rcst * Tci[5] * Tci[5] /
          (2.015880 * 2.015880 * 12.964000);
  bi[5] = 0.08664 * Rcst * Tci[5] / (2.015880 * 12.964000);
  acentric_i[5] = -0.219000;

  // species 6: H2O
  // Imported from NIST
  Tci[6] = 647.096000;
  ai[6] = 1e6 * 0.42748 * Rcst * Rcst * Tci[6] * Tci[6] /
          (18.015340 * 18.015340 * 220.640000);
  bi[6] = 0.08664 * Rcst * Tci[6] / (18.015340 * 220.640000);
  acentric_i[6] = 0.344300;

  // species 7: H2O2
  Tci[7] = 1.316 * EPS[7];
  ai[7] = (5.55 * avogadro * avogadro * EPS[7] * boltzmann *
           pow(1e-8 * SIG[7], 3.0)) /
          (wt[7] * wt[7]);
  bi[7] = 0.855 * avogadro * pow(1e-8 * SIG[7], 3.0) / (wt[7]);
  acentric_i[7] = 0.0;

  // species 8: O2
  // Imported from NIST
  Tci[8] = 154.581000;
  ai[8] = 1e6 * 0.42748 * Rcst * Rcst * Tci[8] * Tci[8] /
          (31.998800 * 31.998800 * 50.430466);
  bi[8] = 0.08664 * Rcst * Tci[8] / (31.998800 * 50.430466);
  acentric_i[8] = 0.022200;

  // species 9: CH3
  Tci[9] = 1.316 * EPS[9];
  ai[9] = (5.55 * avogadro * avogadro * EPS[9] * boltzmann *
           pow(1e-8 * SIG[9], 3.0)) /
          (wt[9] * wt[9]);
  bi[9] = 0.855 * avogadro * pow(1e-8 * SIG[9], 3.0) / (wt[9]);
  acentric_i[9] = 0.0;

  // species 10: CH4
  // Imported from NIST
  Tci[10] = 190.560000;
  ai[10] = 1e6 * 0.42748 * Rcst * Rcst * Tci[10] * Tci[10] /
           (16.043030 * 16.043030 * 45.990000);
  bi[10] = 0.08664 * Rcst * Tci[10] / (16.043030 * 45.990000);
  acentric_i[10] = 0.011000;

  // species 11: CH2O
  Tci[11] = 1.316 * EPS[11];
  ai[11] = (5.55 * avogadro * avogadro * EPS[11] * boltzmann *
            pow(1e-8 * SIG[11], 3.0)) /
           (wt[11] * wt[11]);
  bi[11] = 0.855 * avogadro * pow(1e-8 * SIG[11], 3.0) / (wt[11]);
  acentric_i[11] = 0.0;

  // species 12: CO
  // Imported from NIST
  Tci[12] = 132.850000;
  ai[12] = 1e6 * 0.42748 * Rcst * Rcst * Tci[12] * Tci[12] /
           (28.010000 * 28.010000 * 34.940000);
  bi[12] = 0.08664 * Rcst * Tci[12] / (28.010000 * 34.940000);
  acentric_i[12] = 0.045000;

  // species 13: CO2
  // Imported from NIST
  Tci[13] = 304.120000;
  ai[13] = 1e6 * 0.42748 * Rcst * Rcst * Tci[13] * Tci[13] /
           (44.009950 * 44.009950 * 73.740000);
  bi[13] = 0.08664 * Rcst * Tci[13] / (44.009950 * 73.740000);
  acentric_i[13] = 0.225000;

  // species 14: C2H2
  // Imported from NIST
  Tci[14] = 308.300000;
  ai[14] = 1e6 * 0.42748 * Rcst * Rcst * Tci[14] * Tci[14] /
           (26.038000 * 26.038000 * 61.140000);
  bi[14] = 0.08664 * Rcst * Tci[14] / (26.038000 * 61.140000);
  acentric_i[14] = 0.189000;

  // species 15: C2H4
  // Imported from NIST
  Tci[15] = 282.340000;
  ai[15] = 1e6 * 0.42748 * Rcst * Rcst * Tci[15] * Tci[15] /
           (28.054000 * 28.054000 * 50.410000);
  bi[15] = 0.08664 * Rcst * Tci[15] / (28.054000 * 50.410000);
  acentric_i[15] = 0.087000;

  // species 16: C2H6
  // Imported from NIST
  Tci[16] = 305.320000;
  ai[16] = 1e6 * 0.42748 * Rcst * Rcst * Tci[16] * Tci[16] /
           (30.070120 * 30.070120 * 48.720000);
  bi[16] = 0.08664 * Rcst * Tci[16] / (30.070120 * 48.720000);
  acentric_i[16] = 0.099000;

  // species 17: CH2CHO
  Tci[17] = 1.316 * EPS[17];
  ai[17] = (5.55 * avogadro * avogadro * EPS[17] * boltzmann *
            pow(1e-8 * SIG[17], 3.0)) /
           (wt[17] * wt[17]);
  bi[17] = 0.855 * avogadro * pow(1e-8 * SIG[17], 3.0) / (wt[17]);
  acentric_i[17] = 0.0;

  // species 18: aC3H5
  Tci[18] = 1.316 * EPS[18];
  ai[18] = (5.55 * avogadro * avogadro * EPS[18] * boltzmann *
            pow(1e-8 * SIG[18], 3.0)) /
           (wt[18] * wt[18]);
  bi[18] = 0.855 * avogadro * pow(1e-8 * SIG[18], 3.0) / (wt[18]);
  acentric_i[18] = 0.0;

  // species 19: C3H6
  Tci[19] = 1.316 * EPS[19];
  ai[19] = (5.55 * avogadro * avogadro * EPS[19] * boltzmann *
            pow(1e-8 * SIG[19], 3.0)) /
           (wt[19] * wt[19]);
  bi[19] = 0.855 * avogadro * pow(1e-8 * SIG[19], 3.0) / (wt[19]);
  acentric_i[19] = 0.0;

  // species 20: C2H3CHO
  Tci[20] = 1.316 * EPS[20];
  ai[20] = (5.55 * avogadro * avogadro * EPS[20] * boltzmann *
            pow(1e-8 * SIG[20], 3.0)) /
           (wt[20] * wt[20]);
  bi[20] = 0.855 * avogadro * pow(1e-8 * SIG[20], 3.0) / (wt[20]);
  acentric_i[20] = 0.0;

  // species 21: C4H7
  Tci[21] = 1.316 * EPS[21];
  ai[21] = (5.55 * avogadro * avogadro * EPS[21] * boltzmann *
            pow(1e-8 * SIG[21], 3.0)) /
           (wt[21] * wt[21]);
  bi[21] = 0.855 * avogadro * pow(1e-8 * SIG[21], 3.0) / (wt[21]);
  acentric_i[21] = 0.0;

  // species 22: C4H81
  Tci[22] = 1.316 * EPS[22];
  ai[22] = (5.55 * avogadro * avogadro * EPS[22] * boltzmann *
            pow(1e-8 * SIG[22], 3.0)) /
           (wt[22] * wt[22]);
  bi[22] = 0.855 * avogadro * pow(1e-8 * SIG[22], 3.0) / (wt[22]);
  acentric_i[22] = 0.0;

  // species 23: C5H9
  Tci[23] = 1.316 * EPS[23];
  ai[23] = (5.55 * avogadro * avogadro * EPS[23] * boltzmann *
            pow(1e-8 * SIG[23], 3.0)) /
           (wt[23] * wt[23]);
  bi[23] = 0.855 * avogadro * pow(1e-8 * SIG[23], 3.0) / (wt[23]);
  acentric_i[23] = 0.0;

  // species 24: C5H10
  Tci[24] = 1.316 * EPS[24];
  ai[24] = (5.55 * avogadro * avogadro * EPS[24] * boltzmann *
            pow(1e-8 * SIG[24], 3.0)) /
           (wt[24] * wt[24]);
  bi[24] = 0.855 * avogadro * pow(1e-8 * SIG[24], 3.0) / (wt[24]);
  acentric_i[24] = 0.0;

  // species 25: C6H12
  Tci[25] = 1.316 * EPS[25];
  ai[25] = (5.55 * avogadro * avogadro * EPS[25] * boltzmann *
            pow(1e-8 * SIG[25], 3.0)) /
           (wt[25] * wt[25]);
  bi[25] = 0.855 * avogadro * pow(1e-8 * SIG[25], 3.0) / (wt[25]);
  acentric_i[25] = 0.0;

  // species 26: C7H14
  Tci[26] = 1.316 * EPS[26];
  ai[26] = (5.55 * avogadro * avogadro * EPS[26] * boltzmann *
            pow(1e-8 * SIG[26], 3.0)) /
           (wt[26] * wt[26]);
  bi[26] = 0.855 * avogadro * pow(1e-8 * SIG[26], 3.0) / (wt[26]);
  acentric_i[26] = 0.0;

  // species 27: C8H16
  Tci[27] = 1.316 * EPS[27];
  ai[27] = (5.55 * avogadro * avogadro * EPS[27] * boltzmann *
            pow(1e-8 * SIG[27], 3.0)) /
           (wt[27] * wt[27]);
  bi[27] = 0.855 * avogadro * pow(1e-8 * SIG[27], 3.0) / (wt[27]);
  acentric_i[27] = 0.0;

  // species 28: C9H18
  Tci[28] = 1.316 * EPS[28];
  ai[28] = (5.55 * avogadro * avogadro * EPS[28] * boltzmann *
            pow(1e-8 * SIG[28], 3.0)) /
           (wt[28] * wt[28]);
  bi[28] = 0.855 * avogadro * pow(1e-8 * SIG[28], 3.0) / (wt[28]);
  acentric_i[28] = 0.0;

  // species 29: PXC9H19
  Tci[29] = 1.316 * EPS[29];
  ai[29] = (5.55 * avogadro * avogadro * EPS[29] * boltzmann *
            pow(1e-8 * SIG[29], 3.0)) /
           (wt[29] * wt[29]);
  bi[29] = 0.855 * avogadro * pow(1e-8 * SIG[29], 3.0) / (wt[29]);
  acentric_i[29] = 0.0;

  // species 30: C10H20
  Tci[30] = 1.316 * EPS[30];
  ai[30] = (5.55 * avogadro * avogadro * EPS[30] * boltzmann *
            pow(1e-8 * SIG[30], 3.0)) /
           (wt[30] * wt[30]);
  bi[30] = 0.855 * avogadro * pow(1e-8 * SIG[30], 3.0) / (wt[30]);
  acentric_i[30] = 0.0;

  // species 31: C12H24
  Tci[31] = 1.316 * EPS[31];
  ai[31] = (5.55 * avogadro * avogadro * EPS[31] * boltzmann *
            pow(1e-8 * SIG[31], 3.0)) /
           (wt[31] * wt[31]);
  bi[31] = 0.855 * avogadro * pow(1e-8 * SIG[31], 3.0) / (wt[31]);
  acentric_i[31] = 0.0;

  // species 32: C12H25O2
  Tci[32] = 1.316 * EPS[32];
  ai[32] = (5.55 * avogadro * avogadro * EPS[32] * boltzmann *
            pow(1e-8 * SIG[32], 3.0)) /
           (wt[32] * wt[32]);
  bi[32] = 0.855 * avogadro * pow(1e-8 * SIG[32], 3.0) / (wt[32]);
  acentric_i[32] = 0.0;

  // species 33: OC12H23OOH
  Tci[33] = 1.316 * EPS[33];
  ai[33] = (5.55 * avogadro * avogadro * EPS[33] * boltzmann *
            pow(1e-8 * SIG[33], 3.0)) /
           (wt[33] * wt[33]);
  bi[33] = 0.855 * avogadro * pow(1e-8 * SIG[33], 3.0) / (wt[33]);
  acentric_i[33] = 0.0;

  // species 34: N2
  // Imported from NIST
  Tci[34] = 126.192000;
  ai[34] = 1e6 * 0.42748 * Rcst * Rcst * Tci[34] * Tci[34] /
           (28.013400 * 28.013400 * 33.958000);
  bi[34] = 0.08664 * Rcst * Tci[34] / (28.013400 * 33.958000);
  acentric_i[34] = 0.037200;

  return;
}

// gauss-jordan solver external routine
// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort("sgjsolve not implemented, choose a different solver ");
}

// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve_simplified(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort(
    "sgjsolve_simplified not implemented, choose a different solver ");
}

#endif
