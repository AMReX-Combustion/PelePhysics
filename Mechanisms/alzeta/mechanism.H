#ifndef MECHANISM_H
#define MECHANISM_H

#include <AMReX_Gpu.H>
#include <AMReX_REAL.H>

/* Elements
0  O
1  H
2  C
3  N
4  Ar
5  F
*/

// Species
#define H2_ID 0
#define H_ID 1
#define O_ID 2
#define O2_ID 3
#define OH_ID 4
#define H2O_ID 5
#define HO2_ID 6
#define H2O2_ID 7
#define C_ID 8
#define CH_ID 9
#define CH2_ID 10
#define CH2_S_ID 11
#define CH3_ID 12
#define CH4_ID 13
#define CO_ID 14
#define CO2_ID 15
#define HCO_ID 16
#define CH2O_ID 17
#define CH2OH_ID 18
#define CH3O_ID 19
#define CH3OH_ID 20
#define C2H_ID 21
#define C2H2_ID 22
#define C2H3_ID 23
#define C2H4_ID 24
#define C2H5_ID 25
#define C2H6_ID 26
#define HCCO_ID 27
#define CH2CO_ID 28
#define HCCOH_ID 29
#define N_ID 30
#define NH_ID 31
#define NH2_ID 32
#define NH3_ID 33
#define NNH_ID 34
#define NO_ID 35
#define NO2_ID 36
#define N2O_ID 37
#define HNO_ID 38
#define CN_ID 39
#define HCN_ID 40
#define H2CN_ID 41
#define HCNN_ID 42
#define HCNO_ID 43
#define HOCN_ID 44
#define HNCO_ID 45
#define NCO_ID 46
#define N2_ID 47
#define AR_ID 48
#define C3H7_ID 49
#define C3H8_ID 50
#define CH2CHO_ID 51
#define CH3CHO_ID 52
#define HF_ID 53
#define F_ID 54
#define F2_ID 55
#define CH3F_ID 56
#define CH2F2_ID 57
#define CHF3_ID 58
#define CF4_ID 59
#define CH2F_ID 60
#define CHF2_ID 61
#define CF3_ID 62
#define CHF_ID 63
#define CF2_ID 64
#define CF_ID 65
#define CF3O_ID 66
#define CF2O_ID 67
#define CHFO_ID 68
#define CFO_ID 69
#define iC3H7_ID 70
#define nC3H7_ID 71

#define NUM_GAS_ELEMENTS 6    // Elements in the homogeneous phase
#define NUM_GAS_SPECIES 72    // Species in the homogeneous phase
#define NUM_GAS_REACTIONS 518 // Reactions in the homogeneous phase

#define SITE_DENSITY 0.000000E+00 // mol/cm^2

#define NUM_SURFACE_ELEMENTS 0  // Additional elements in heterogeneous phase
#define NUM_SURFACE_SPECIES 0   // Species in the heterogeneous phase
#define NUM_SURFACE_REACTIONS 0 // Reactions in the heterogeneous phase

#define NUM_ELEMENTS (NUM_GAS_ELEMENTS + NUM_SURFACE_ELEMENTS)
#define NUM_SPECIES (NUM_GAS_SPECIES + NUM_SURFACE_SPECIES)
#define NUM_REACTIONS (NUM_GAS_REACTIONS + NUM_SURFACE_REACTIONS)

#define NUM_IONS 0

#define NUM_FIT 4

//  ALWAYS on CPU stuff -- can have different def depending on if we are CPU or
//  GPU based. Defined in mechanism.cpp
void atomicWeight(amrex::Real* awt);
//  MISC
void CKAWT(amrex::Real* awt);
void CKNCF(int* ncf);
void CKSYME_STR(amrex::Vector<std::string>& ename);
void CKSYMS_STR(amrex::Vector<std::string>& kname);
void GET_RMAP(int* _rmap);
void CKINU(const int i, int& nspec, int* ki, int* nu);
void CKKFKR(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real* x,
  amrex::Real* q_f,
  amrex::Real* q_r);
void progressRateFR(
  amrex::Real* q_f, amrex::Real* q_r, amrex::Real* sc, amrex::Real T);
//  SPARSE INFORMATION
void SPARSITY_INFO(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST_SIMPLIFIED(int* nJdata, const int* consP);
void
SPARSITY_PREPROC_CSC(int* rowVals, int* colPtrs, const int* consP, int NCELLS);
void SPARSITY_PREPROC_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSC(
  int* rowVals, int* colPtrs, int* indx, const int* consP);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSR(
  int* colVals, int* rowPtr, const int* consP, int base);

// A few mechanism parameters
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKINDX(int& mm, int& kk, int& ii, int& nfit)
{
  mm = 6;
  kk = 72;
  ii = 518;
  nfit = -1; // Why do you need this anyway ?
}

//  inverse molecular weights
#ifdef AMREX_USE_GPU
AMREX_GPU_CONSTANT const amrex::Real global_imw[72] = {
  0.4960317460317460, // H2
  0.9920634920634921, // H
  0.0625039064941559, // O
  0.0312519532470779, // O2
  0.0587993179279120, // OH
  0.0555092978073827, // H2O
  0.0302975216627280, // HO2
  0.0293996589639560, // H2O2
  0.0832570144034635, // C
  0.0768108149627468, // CH
  0.0712910814857061, // CH2
  0.0712910814857061, // CH2(S)
  0.0665114732291320, // CH3
  0.0623324814560868, // CH4
  0.0357015351660121, // CO
  0.0227226249176305, // CO2
  0.0344613688055690, // HCO
  0.0333044694598015, // CH2O
  0.0322227234645872, // CH2OH
  0.0322227234645872, // CH3O
  0.0312090381374446, // CH3OH
  0.0399520575309628, // C2H
  0.0384054074813734, // C2H2
  0.0369740442209569, // C2H3
  0.0356455407428531, // C2H4
  0.0344091941366733, // C2H5
  0.0332557366145660, // C2H6
  0.0243730044602598, // HCCO
  0.0237885672145967, // CH2CO
  0.0237885672145967, // HCCOH
  0.0713928749910759, // N
  0.0666000666000666, // NH
  0.0624102852150034, // NH2
  0.0587164582232400, // NH3
  0.0344566191165323, // NNH
  0.0333266679997334, // NO
  0.0217367677426367, // NO2
  0.0227205598345943, // N2O
  0.0322435029341588, // HNO
  0.0384349296640787, // CN
  0.0370014060534300, // HCN
  0.0356709709638296, // H2CN
  0.0243706285185095, // HCNN
  0.0232423009877978, // HCNO
  0.0232423009877978, // HOCN
  0.0232423009877978, // HNCO
  0.0237998905205036, // NCO
  0.0356964374955379, // N2
  0.0250312891113892, // AR
  0.0232077792476038, // C3H7
  0.0226772796335352, // C3H8
  0.0232315019165989, // CH2CHO
  0.0226999296302181, // CH3CHO
  0.0499839972159217, // HF
  0.0526360026903488, // F
  0.0263180013451744, // F2
  0.0293828975965344, // CH3F
  0.0192219691449264, // CH2F2
  0.0142828149785382, // CHF3
  0.0113630407528107, // CF4
  0.0302797211911208, // CH2F
  0.0196017680012705, // CHF2
  0.0144914495000541, // CF3
  0.0312330139614702, // CHF
  0.0199968779570337, // CF2
  0.0322482827142312, // CF
  0.0117639848900014, // CF3O
  0.0151499527951878, // CF2O
  0.0208262163370573, // CHFO
  0.0212727923671973, // CFO
  0.0232077792476038, // iC3H7
  0.0232077792476038, // nC3H7
};
#endif
const amrex::Real h_global_imw[72] = {
  0.4960317460317460, // H2
  0.9920634920634921, // H
  0.0625039064941559, // O
  0.0312519532470779, // O2
  0.0587993179279120, // OH
  0.0555092978073827, // H2O
  0.0302975216627280, // HO2
  0.0293996589639560, // H2O2
  0.0832570144034635, // C
  0.0768108149627468, // CH
  0.0712910814857061, // CH2
  0.0712910814857061, // CH2(S)
  0.0665114732291320, // CH3
  0.0623324814560868, // CH4
  0.0357015351660121, // CO
  0.0227226249176305, // CO2
  0.0344613688055690, // HCO
  0.0333044694598015, // CH2O
  0.0322227234645872, // CH2OH
  0.0322227234645872, // CH3O
  0.0312090381374446, // CH3OH
  0.0399520575309628, // C2H
  0.0384054074813734, // C2H2
  0.0369740442209569, // C2H3
  0.0356455407428531, // C2H4
  0.0344091941366733, // C2H5
  0.0332557366145660, // C2H6
  0.0243730044602598, // HCCO
  0.0237885672145967, // CH2CO
  0.0237885672145967, // HCCOH
  0.0713928749910759, // N
  0.0666000666000666, // NH
  0.0624102852150034, // NH2
  0.0587164582232400, // NH3
  0.0344566191165323, // NNH
  0.0333266679997334, // NO
  0.0217367677426367, // NO2
  0.0227205598345943, // N2O
  0.0322435029341588, // HNO
  0.0384349296640787, // CN
  0.0370014060534300, // HCN
  0.0356709709638296, // H2CN
  0.0243706285185095, // HCNN
  0.0232423009877978, // HCNO
  0.0232423009877978, // HOCN
  0.0232423009877978, // HNCO
  0.0237998905205036, // NCO
  0.0356964374955379, // N2
  0.0250312891113892, // AR
  0.0232077792476038, // C3H7
  0.0226772796335352, // C3H8
  0.0232315019165989, // CH2CHO
  0.0226999296302181, // CH3CHO
  0.0499839972159217, // HF
  0.0526360026903488, // F
  0.0263180013451744, // F2
  0.0293828975965344, // CH3F
  0.0192219691449264, // CH2F2
  0.0142828149785382, // CHF3
  0.0113630407528107, // CF4
  0.0302797211911208, // CH2F
  0.0196017680012705, // CHF2
  0.0144914495000541, // CF3
  0.0312330139614702, // CHF
  0.0199968779570337, // CF2
  0.0322482827142312, // CF
  0.0117639848900014, // CF3O
  0.0151499527951878, // CF2O
  0.0208262163370573, // CHFO
  0.0212727923671973, // CFO
  0.0232077792476038, // iC3H7
  0.0232077792476038, // nC3H7
};

//  molecular weights
#ifdef AMREX_USE_GPU
AMREX_GPU_CONSTANT const amrex::Real global_mw[72] = {
  2.016000,  // H2
  1.008000,  // H
  15.999000, // O
  31.998000, // O2
  17.007000, // OH
  18.015000, // H2O
  33.006000, // HO2
  34.014000, // H2O2
  12.011000, // C
  13.019000, // CH
  14.027000, // CH2
  14.027000, // CH2(S)
  15.035000, // CH3
  16.043000, // CH4
  28.010000, // CO
  44.009000, // CO2
  29.018000, // HCO
  30.026000, // CH2O
  31.034000, // CH2OH
  31.034000, // CH3O
  32.042000, // CH3OH
  25.030000, // C2H
  26.038000, // C2H2
  27.046000, // C2H3
  28.054000, // C2H4
  29.062000, // C2H5
  30.070000, // C2H6
  41.029000, // HCCO
  42.037000, // CH2CO
  42.037000, // HCCOH
  14.007000, // N
  15.015000, // NH
  16.023000, // NH2
  17.031000, // NH3
  29.022000, // NNH
  30.006000, // NO
  46.005000, // NO2
  44.013000, // N2O
  31.014000, // HNO
  26.018000, // CN
  27.026000, // HCN
  28.034000, // H2CN
  41.033000, // HCNN
  43.025000, // HCNO
  43.025000, // HOCN
  43.025000, // HNCO
  42.017000, // NCO
  28.014000, // N2
  39.950000, // AR
  43.089000, // C3H7
  44.097000, // C3H8
  43.045000, // CH2CHO
  44.053000, // CH3CHO
  20.006403, // HF
  18.998403, // F
  37.996806, // F2
  34.033403, // CH3F
  52.023806, // CH2F2
  70.014209, // CHF3
  88.004613, // CF4
  33.025403, // CH2F
  51.015806, // CHF2
  69.006209, // CF3
  32.017403, // CHF
  50.007806, // CF2
  31.009403, // CF
  85.005209, // CF3O
  66.006806, // CF2O
  48.016403, // CHFO
  47.008403, // CFO
  43.089000, // iC3H7
  43.089000, // nC3H7
};
#endif
const amrex::Real h_global_mw[72] = {
  2.016000,  // H2
  1.008000,  // H
  15.999000, // O
  31.998000, // O2
  17.007000, // OH
  18.015000, // H2O
  33.006000, // HO2
  34.014000, // H2O2
  12.011000, // C
  13.019000, // CH
  14.027000, // CH2
  14.027000, // CH2(S)
  15.035000, // CH3
  16.043000, // CH4
  28.010000, // CO
  44.009000, // CO2
  29.018000, // HCO
  30.026000, // CH2O
  31.034000, // CH2OH
  31.034000, // CH3O
  32.042000, // CH3OH
  25.030000, // C2H
  26.038000, // C2H2
  27.046000, // C2H3
  28.054000, // C2H4
  29.062000, // C2H5
  30.070000, // C2H6
  41.029000, // HCCO
  42.037000, // CH2CO
  42.037000, // HCCOH
  14.007000, // N
  15.015000, // NH
  16.023000, // NH2
  17.031000, // NH3
  29.022000, // NNH
  30.006000, // NO
  46.005000, // NO2
  44.013000, // N2O
  31.014000, // HNO
  26.018000, // CN
  27.026000, // HCN
  28.034000, // H2CN
  41.033000, // HCNN
  43.025000, // HCNO
  43.025000, // HOCN
  43.025000, // HNCO
  42.017000, // NCO
  28.014000, // N2
  39.950000, // AR
  43.089000, // C3H7
  44.097000, // C3H8
  43.045000, // CH2CHO
  44.053000, // CH3CHO
  20.006403, // HF
  18.998403, // F
  37.996806, // F2
  34.033403, // CH3F
  52.023806, // CH2F2
  70.014209, // CHF3
  88.004613, // CF4
  33.025403, // CH2F
  51.015806, // CHF2
  69.006209, // CF3
  32.017403, // CHF
  50.007806, // CF2
  31.009403, // CF
  85.005209, // CF3O
  66.006806, // CF2O
  48.016403, // CHFO
  47.008403, // CFO
  43.089000, // iC3H7
  43.089000, // nC3H7
};

//  inverse molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_imw(amrex::Real* imw_new)
{
  imw_new[0] = 0.4960317460317460;  // H2
  imw_new[1] = 0.9920634920634921;  // H
  imw_new[2] = 0.0625039064941559;  // O
  imw_new[3] = 0.0312519532470779;  // O2
  imw_new[4] = 0.0587993179279120;  // OH
  imw_new[5] = 0.0555092978073827;  // H2O
  imw_new[6] = 0.0302975216627280;  // HO2
  imw_new[7] = 0.0293996589639560;  // H2O2
  imw_new[8] = 0.0832570144034635;  // C
  imw_new[9] = 0.0768108149627468;  // CH
  imw_new[10] = 0.0712910814857061; // CH2
  imw_new[11] = 0.0712910814857061; // CH2(S)
  imw_new[12] = 0.0665114732291320; // CH3
  imw_new[13] = 0.0623324814560868; // CH4
  imw_new[14] = 0.0357015351660121; // CO
  imw_new[15] = 0.0227226249176305; // CO2
  imw_new[16] = 0.0344613688055690; // HCO
  imw_new[17] = 0.0333044694598015; // CH2O
  imw_new[18] = 0.0322227234645872; // CH2OH
  imw_new[19] = 0.0322227234645872; // CH3O
  imw_new[20] = 0.0312090381374446; // CH3OH
  imw_new[21] = 0.0399520575309628; // C2H
  imw_new[22] = 0.0384054074813734; // C2H2
  imw_new[23] = 0.0369740442209569; // C2H3
  imw_new[24] = 0.0356455407428531; // C2H4
  imw_new[25] = 0.0344091941366733; // C2H5
  imw_new[26] = 0.0332557366145660; // C2H6
  imw_new[27] = 0.0243730044602598; // HCCO
  imw_new[28] = 0.0237885672145967; // CH2CO
  imw_new[29] = 0.0237885672145967; // HCCOH
  imw_new[30] = 0.0713928749910759; // N
  imw_new[31] = 0.0666000666000666; // NH
  imw_new[32] = 0.0624102852150034; // NH2
  imw_new[33] = 0.0587164582232400; // NH3
  imw_new[34] = 0.0344566191165323; // NNH
  imw_new[35] = 0.0333266679997334; // NO
  imw_new[36] = 0.0217367677426367; // NO2
  imw_new[37] = 0.0227205598345943; // N2O
  imw_new[38] = 0.0322435029341588; // HNO
  imw_new[39] = 0.0384349296640787; // CN
  imw_new[40] = 0.0370014060534300; // HCN
  imw_new[41] = 0.0356709709638296; // H2CN
  imw_new[42] = 0.0243706285185095; // HCNN
  imw_new[43] = 0.0232423009877978; // HCNO
  imw_new[44] = 0.0232423009877978; // HOCN
  imw_new[45] = 0.0232423009877978; // HNCO
  imw_new[46] = 0.0237998905205036; // NCO
  imw_new[47] = 0.0356964374955379; // N2
  imw_new[48] = 0.0250312891113892; // AR
  imw_new[49] = 0.0232077792476038; // C3H7
  imw_new[50] = 0.0226772796335352; // C3H8
  imw_new[51] = 0.0232315019165989; // CH2CHO
  imw_new[52] = 0.0226999296302181; // CH3CHO
  imw_new[53] = 0.0499839972159217; // HF
  imw_new[54] = 0.0526360026903488; // F
  imw_new[55] = 0.0263180013451744; // F2
  imw_new[56] = 0.0293828975965344; // CH3F
  imw_new[57] = 0.0192219691449264; // CH2F2
  imw_new[58] = 0.0142828149785382; // CHF3
  imw_new[59] = 0.0113630407528107; // CF4
  imw_new[60] = 0.0302797211911208; // CH2F
  imw_new[61] = 0.0196017680012705; // CHF2
  imw_new[62] = 0.0144914495000541; // CF3
  imw_new[63] = 0.0312330139614702; // CHF
  imw_new[64] = 0.0199968779570337; // CF2
  imw_new[65] = 0.0322482827142312; // CF
  imw_new[66] = 0.0117639848900014; // CF3O
  imw_new[67] = 0.0151499527951878; // CF2O
  imw_new[68] = 0.0208262163370573; // CHFO
  imw_new[69] = 0.0212727923671973; // CFO
  imw_new[70] = 0.0232077792476038; // iC3H7
  imw_new[71] = 0.0232077792476038; // nC3H7
}

//  inverse molecular weight
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
imw(const int n)
{
#if AMREX_DEVICE_COMPILE
  return global_imw[n];
#else
  return h_global_imw[n];
#endif
}
//  molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_mw(amrex::Real* mw_new)
{
  mw_new[0] = 2.016000;   // H2
  mw_new[1] = 1.008000;   // H
  mw_new[2] = 15.999000;  // O
  mw_new[3] = 31.998000;  // O2
  mw_new[4] = 17.007000;  // OH
  mw_new[5] = 18.015000;  // H2O
  mw_new[6] = 33.006000;  // HO2
  mw_new[7] = 34.014000;  // H2O2
  mw_new[8] = 12.011000;  // C
  mw_new[9] = 13.019000;  // CH
  mw_new[10] = 14.027000; // CH2
  mw_new[11] = 14.027000; // CH2(S)
  mw_new[12] = 15.035000; // CH3
  mw_new[13] = 16.043000; // CH4
  mw_new[14] = 28.010000; // CO
  mw_new[15] = 44.009000; // CO2
  mw_new[16] = 29.018000; // HCO
  mw_new[17] = 30.026000; // CH2O
  mw_new[18] = 31.034000; // CH2OH
  mw_new[19] = 31.034000; // CH3O
  mw_new[20] = 32.042000; // CH3OH
  mw_new[21] = 25.030000; // C2H
  mw_new[22] = 26.038000; // C2H2
  mw_new[23] = 27.046000; // C2H3
  mw_new[24] = 28.054000; // C2H4
  mw_new[25] = 29.062000; // C2H5
  mw_new[26] = 30.070000; // C2H6
  mw_new[27] = 41.029000; // HCCO
  mw_new[28] = 42.037000; // CH2CO
  mw_new[29] = 42.037000; // HCCOH
  mw_new[30] = 14.007000; // N
  mw_new[31] = 15.015000; // NH
  mw_new[32] = 16.023000; // NH2
  mw_new[33] = 17.031000; // NH3
  mw_new[34] = 29.022000; // NNH
  mw_new[35] = 30.006000; // NO
  mw_new[36] = 46.005000; // NO2
  mw_new[37] = 44.013000; // N2O
  mw_new[38] = 31.014000; // HNO
  mw_new[39] = 26.018000; // CN
  mw_new[40] = 27.026000; // HCN
  mw_new[41] = 28.034000; // H2CN
  mw_new[42] = 41.033000; // HCNN
  mw_new[43] = 43.025000; // HCNO
  mw_new[44] = 43.025000; // HOCN
  mw_new[45] = 43.025000; // HNCO
  mw_new[46] = 42.017000; // NCO
  mw_new[47] = 28.014000; // N2
  mw_new[48] = 39.950000; // AR
  mw_new[49] = 43.089000; // C3H7
  mw_new[50] = 44.097000; // C3H8
  mw_new[51] = 43.045000; // CH2CHO
  mw_new[52] = 44.053000; // CH3CHO
  mw_new[53] = 20.006403; // HF
  mw_new[54] = 18.998403; // F
  mw_new[55] = 37.996806; // F2
  mw_new[56] = 34.033403; // CH3F
  mw_new[57] = 52.023806; // CH2F2
  mw_new[58] = 70.014209; // CHF3
  mw_new[59] = 88.004613; // CF4
  mw_new[60] = 33.025403; // CH2F
  mw_new[61] = 51.015806; // CHF2
  mw_new[62] = 69.006209; // CF3
  mw_new[63] = 32.017403; // CHF
  mw_new[64] = 50.007806; // CF2
  mw_new[65] = 31.009403; // CF
  mw_new[66] = 85.005209; // CF3O
  mw_new[67] = 66.006806; // CF2O
  mw_new[68] = 48.016403; // CHFO
  mw_new[69] = 47.008403; // CFO
  mw_new[70] = 43.089000; // iC3H7
  mw_new[71] = 43.089000; // nC3H7
}

//  molecular weight
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
mw(const int n)
{
#if AMREX_DEVICE_COMPILE
  return global_mw[n];
#else
  return h_global_mw[n];
#endif
}

//  Returns R, Rc, Patm
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRP(amrex::Real& ru, amrex::Real& ruc, amrex::Real& pa)
{
  ru = 8.31446261815324e+07;
  ruc = 1.98721558317399615845;
  pa = 1.01325e+06;
}

// compute Cv/R at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cv_R(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with no change across T
  // species 48: AR
  species[48] = +1.50000000e+00;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +1.34433112e+00 + 7.98052075e-03 * T - 1.94781510e-05 * T2 +
                 2.01572094e-08 * T3 - 7.37611761e-12 * T4;
    // species 1: H
    species[1] = +1.50000000e+00 + 7.05332819e-13 * T - 1.99591964e-15 * T2 +
                 2.30081632e-18 * T3 - 9.27732332e-22 * T4;
    // species 2: O
    species[2] = +2.16826710e+00 - 3.27931884e-03 * T + 6.64306396e-06 * T2 -
                 6.12806624e-09 * T3 + 2.11265971e-12 * T4;
    // species 3: O2
    species[3] = +2.78245636e+00 - 2.99673416e-03 * T + 9.84730201e-06 * T2 -
                 9.68129509e-09 * T3 + 3.24372837e-12 * T4;
    // species 4: OH
    species[4] = +2.99201543e+00 - 2.40131752e-03 * T + 4.61793841e-06 * T2 -
                 3.88113333e-09 * T3 + 1.36411470e-12 * T4;
    // species 5: H2O
    species[5] = +3.19864056e+00 - 2.03643410e-03 * T + 6.52040211e-06 * T2 -
                 5.48797062e-09 * T3 + 1.77197817e-12 * T4;
    // species 6: HO2
    species[6] = +3.30179801e+00 - 4.74912051e-03 * T + 2.11582891e-05 * T2 -
                 2.42763894e-08 * T3 + 9.29225124e-12 * T4;
    // species 7: H2O2
    species[7] = +3.27611269e+00 - 5.42822417e-04 * T + 1.67335701e-05 * T2 -
                 2.15770813e-08 * T3 + 8.62454363e-12 * T4;
    // species 8: C
    species[8] = +1.55423955e+00 - 3.21537724e-04 * T + 7.33792245e-07 * T2 -
                 7.32234889e-10 * T3 + 2.66521446e-13 * T4;
    // species 9: CH
    species[9] = +2.48981665e+00 + 3.23835541e-04 * T - 1.68899065e-06 * T2 +
                 3.16217327e-09 * T3 - 1.40609067e-12 * T4;
    // species 10: CH2
    species[10] = +2.76267867e+00 + 9.68872143e-04 * T + 2.79489841e-06 * T2 -
                  3.85091153e-09 * T3 + 1.68741719e-12 * T4;
    // species 11: CH2(S)
    species[11] = +3.19860411e+00 - 2.36661419e-03 * T + 8.23296220e-06 * T2 -
                  6.68815981e-09 * T3 + 1.94314737e-12 * T4;
    // species 12: CH3
    species[12] = +2.67359040e+00 + 2.01095175e-03 * T + 5.73021856e-06 * T2 -
                  6.87117425e-09 * T3 + 2.54385734e-12 * T4;
    // species 13: CH4
    species[13] = +4.14987613e+00 - 1.36709788e-02 * T + 4.91800599e-05 * T2 -
                  4.84743026e-08 * T3 + 1.66693956e-11 * T4;
    // species 14: CO
    species[14] = +2.57953347e+00 - 6.10353680e-04 * T + 1.01681433e-06 * T2 +
                  9.07005884e-10 * T3 - 9.04424499e-13 * T4;
    // species 15: CO2
    species[15] = +1.35677352e+00 + 8.98459677e-03 * T - 7.12356269e-06 * T2 +
                  2.45919022e-09 * T3 - 1.43699548e-13 * T4;
    // species 16: HCO
    species[16] = +3.22118584e+00 - 3.24392532e-03 * T + 1.37799446e-05 * T2 -
                  1.33144093e-08 * T3 + 4.33768865e-12 * T4;
    // species 17: CH2O
    species[17] = +3.79372315e+00 - 9.90833369e-03 * T + 3.73220008e-05 * T2 -
                  3.79285261e-08 * T3 + 1.31772652e-11 * T4;
    // species 18: CH2OH
    species[18] = +2.86388918e+00 + 5.59672304e-03 * T + 5.93271791e-06 * T2 -
                  1.04532012e-08 * T3 + 4.36967278e-12 * T4;
    // species 19: CH3O
    species[19] = +1.10620400e+00 + 7.21659500e-03 * T + 5.33847200e-06 * T2 -
                  7.37763600e-09 * T3 + 2.07561000e-12 * T4;
    // species 20: CH3OH
    species[20] = +4.71539582e+00 - 1.52309129e-02 * T + 6.52441155e-05 * T2 -
                  7.10806889e-08 * T3 + 2.61352698e-11 * T4;
    // species 21: C2H
    species[21] = +1.88965733e+00 + 1.34099611e-02 * T - 2.84769501e-05 * T2 +
                  2.94791045e-08 * T3 - 1.09331511e-11 * T4;
    // species 22: C2H2
    species[22] = -1.91318906e-01 + 2.33615629e-02 * T - 3.55171815e-05 * T2 +
                  2.80152437e-08 * T3 - 8.50072974e-12 * T4;
    // species 23: C2H3
    species[23] = +2.21246645e+00 + 1.51479162e-03 * T + 2.59209412e-05 * T2 -
                  3.57657847e-08 * T3 + 1.47150873e-11 * T4;
    // species 24: C2H4
    species[24] = +2.95920148e+00 - 7.57052247e-03 * T + 5.70990292e-05 * T2 -
                  6.91588753e-08 * T3 + 2.69884373e-11 * T4;
    // species 25: C2H5
    species[25] = +3.30646568e+00 - 4.18658892e-03 * T + 4.97142807e-05 * T2 -
                  5.99126606e-08 * T3 + 2.30509004e-11 * T4;
    // species 26: C2H6
    species[26] = +3.29142492e+00 - 5.50154270e-03 * T + 5.99438288e-05 * T2 -
                  7.08466285e-08 * T3 + 2.68685771e-11 * T4;
    // species 27: HCCO
    species[27] = +1.25172140e+00 + 1.76550210e-02 * T - 2.37291010e-05 * T2 +
                  1.72757590e-08 * T3 - 5.06648110e-12 * T4;
    // species 28: CH2CO
    species[28] = +1.13583630e+00 + 1.81188721e-02 * T - 1.73947474e-05 * T2 +
                  9.34397568e-09 * T3 - 2.01457615e-12 * T4;
    // species 29: HCCOH
    species[29] = +2.42373300e-01 + 3.10722010e-02 * T - 5.08668640e-05 * T2 +
                  4.31371310e-08 * T3 - 1.40145940e-11 * T4;
    // species 30: N
    species[30] = +1.50000000e+00;
    // species 31: NH
    species[31] = +2.49290850e+00 + 3.11791980e-04 * T - 1.48904840e-06 * T2 +
                  2.48164420e-09 * T3 - 1.03569670e-12 * T4;
    // species 32: NH2
    species[32] = +3.20400290e+00 - 2.10613850e-03 * T + 7.10683480e-06 * T2 -
                  5.61151970e-09 * T3 + 1.64407170e-12 * T4;
    // species 33: NH3
    species[33] = +3.28602740e+00 - 4.66052300e-03 * T + 2.17185130e-05 * T2 -
                  2.28088870e-08 * T3 + 8.26380460e-12 * T4;
    // species 34: NNH
    species[34] = +3.34469270e+00 - 4.84970720e-03 * T + 2.00594590e-05 * T2 -
                  2.17264640e-08 * T3 + 7.94695390e-12 * T4;
    // species 35: NO
    species[35] = +3.21847630e+00 - 4.63897600e-03 * T + 1.10410220e-05 * T2 -
                  9.33613540e-09 * T3 + 2.80357700e-12 * T4;
    // species 36: NO2
    species[36] = +2.94403120e+00 - 1.58542900e-03 * T + 1.66578120e-05 * T2 -
                  2.04754260e-08 * T3 + 7.83505640e-12 * T4;
    // species 37: N2O
    species[37] = +1.25715020e+00 + 1.13047280e-02 * T - 1.36713190e-05 * T2 +
                  9.68198060e-09 * T3 - 2.93071820e-12 * T4;
    // species 38: HNO
    species[38] = +3.53349160e+00 - 5.66961710e-03 * T + 1.84732070e-05 * T2 -
                  1.71370940e-08 * T3 + 5.54545730e-12 * T4;
    // species 39: CN
    species[39] = +2.61293510e+00 - 9.55513270e-04 * T + 2.14429770e-06 * T2 -
                  3.15163230e-10 * T3 - 4.64303560e-13 * T4;
    // species 40: HCN
    species[40] = +1.25898860e+00 + 1.00511700e-02 * T - 1.33517630e-05 * T2 +
                  1.00923490e-08 * T3 - 3.00890280e-12 * T4;
    // species 41: H2CN
    species[41] = +1.85166100e+00 + 5.69523310e-03 * T + 1.07114000e-06 * T2 -
                  1.62261200e-09 * T3 - 2.35110810e-13 * T4;
    // species 42: HCNN
    species[42] = +1.52431940e+00 + 1.59606190e-02 * T - 1.88163540e-05 * T2 +
                  1.21255400e-08 * T3 - 3.23573780e-12 * T4;
    // species 46: NCO
    species[46] = +1.82693080e+00 + 8.80516880e-03 * T - 8.38661340e-06 * T2 +
                  4.80169640e-09 * T3 - 1.33135950e-12 * T4;
    // species 47: N2
    species[47] = +2.29867700e+00 + 1.40824040e-03 * T - 3.96322200e-06 * T2 +
                  5.64151500e-09 * T3 - 2.44485400e-12 * T4;
    // species 49: C3H7
    species[49] = +5.15518000e-02 + 2.59919800e-02 * T + 2.38005400e-06 * T2 -
                  1.96095690e-08 * T3 + 9.37324700e-12 * T4;
    // species 50: C3H8
    species[50] = -6.64461900e-02 + 2.64245790e-02 * T + 6.10597270e-06 * T2 -
                  2.19774990e-08 * T3 + 9.51492530e-12 * T4;
    // species 51: CH2CHO
    species[51] = +2.40906200e+00 + 1.07385740e-02 * T + 1.89149200e-06 * T2 -
                  7.15858300e-09 * T3 + 2.86738500e-12 * T4;
    // species 52: CH3CHO
    species[52] = +3.72945950e+00 - 3.19328580e-03 * T + 4.75349210e-05 * T2 -
                  5.74586110e-08 * T3 + 2.19311120e-11 * T4;
    // species 70: iC3H7
    species[70] = +4.44919900e-01 + 2.09991120e-02 * T + 7.70362220e-06 * T2 -
                  1.84762530e-08 * T3 + 7.12829620e-12 * T4;
    // species 71: nC3H7
    species[71] = +4.91173000e-02 + 2.60089730e-02 * T + 2.35425160e-06 * T2 -
                  1.95951320e-08 * T3 + 9.37202070e-12 * T4;
  } else {
    // species 0: H2
    species[0] = +2.33727920e+00 - 4.94024731e-05 * T + 4.99456778e-07 * T2 -
                 1.79566394e-10 * T3 + 2.00255376e-14 * T4;
    // species 1: H
    species[1] = +1.50000001e+00 - 2.30842973e-11 * T + 1.61561948e-14 * T2 -
                 4.73515235e-18 * T3 + 4.98197357e-22 * T4;
    // species 2: O
    species[2] = +1.56942078e+00 - 8.59741137e-05 * T + 4.19484589e-08 * T2 -
                 1.00177799e-11 * T3 + 1.22833691e-15 * T4;
    // species 3: O2
    species[3] = +2.28253784e+00 + 1.48308754e-03 * T - 7.57966669e-07 * T2 +
                 2.09470555e-10 * T3 - 2.16717794e-14 * T4;
    // species 4: OH
    species[4] = +2.09288767e+00 + 5.48429716e-04 * T + 1.26505228e-07 * T2 -
                 8.79461556e-11 * T3 + 1.17412376e-14 * T4;
    // species 5: H2O
    species[5] = +2.03399249e+00 + 2.17691804e-03 * T - 1.64072518e-07 * T2 -
                 9.70419870e-11 * T3 + 1.68200992e-14 * T4;
    // species 6: HO2
    species[6] = +3.01721090e+00 + 2.23982013e-03 * T - 6.33658150e-07 * T2 +
                 1.14246370e-10 * T3 - 1.07908535e-14 * T4;
    // species 7: H2O2
    species[7] = +3.16500285e+00 + 4.90831694e-03 * T - 1.90139225e-06 * T2 +
                 3.71185986e-10 * T3 - 2.87908305e-14 * T4;
    // species 8: C
    species[8] = +1.49266888e+00 + 4.79889284e-05 * T - 7.24335020e-08 * T2 +
                 3.74291029e-11 * T3 - 4.87277893e-15 * T4;
    // species 9: CH
    species[9] = +1.87846473e+00 + 9.70913681e-04 * T + 1.44445655e-07 * T2 -
                 1.30687849e-10 * T3 + 1.76079383e-14 * T4;
    // species 10: CH2
    species[10] = +1.87410113e+00 + 3.65639292e-03 * T - 1.40894597e-06 * T2 +
                  2.60179549e-10 * T3 - 1.87727567e-14 * T4;
    // species 11: CH2(S)
    species[11] = +1.29203842e+00 + 4.65588637e-03 * T - 2.01191947e-06 * T2 +
                  4.17906000e-10 * T3 - 3.39716365e-14 * T4;
    // species 12: CH3
    species[12] = +1.28571772e+00 + 7.23990037e-03 * T - 2.98714348e-06 * T2 +
                  5.95684644e-10 * T3 - 4.67154394e-14 * T4;
    // species 13: CH4
    species[13] = -9.25148505e-01 + 1.33909467e-02 * T - 5.73285809e-06 * T2 +
                  1.22292535e-09 * T3 - 1.01815230e-13 * T4;
    // species 14: CO
    species[14] = +1.71518561e+00 + 2.06252743e-03 * T - 9.98825771e-07 * T2 +
                  2.30053008e-10 * T3 - 2.03647716e-14 * T4;
    // species 15: CO2
    species[15] = +2.85746029e+00 + 4.41437026e-03 * T - 2.21481404e-06 * T2 +
                  5.23490188e-10 * T3 - 4.72084164e-14 * T4;
    // species 16: HCO
    species[16] = +1.77217438e+00 + 4.95695526e-03 * T - 2.48445613e-06 * T2 +
                  5.89161778e-10 * T3 - 5.33508711e-14 * T4;
    // species 17: CH2O
    species[17] = +7.60690080e-01 + 9.20000082e-03 * T - 4.42258813e-06 * T2 +
                  1.00641212e-09 * T3 - 8.83855640e-14 * T4;
    // species 18: CH2OH
    species[18] = +2.69266569e+00 + 8.64576797e-03 * T - 3.75101120e-06 * T2 +
                  7.87234636e-10 * T3 - 6.48554201e-14 * T4;
    // species 19: CH3O
    species[19] = +2.77079900e+00 + 7.87149700e-03 * T - 2.65638400e-06 * T2 +
                  3.94443100e-10 * T3 - 2.11261600e-14 * T4;
    // species 20: CH3OH
    species[20] = +7.89707910e-01 + 1.40938292e-02 * T - 6.36500835e-06 * T2 +
                  1.38171085e-09 * T3 - 1.17060220e-13 * T4;
    // species 21: C2H
    species[21] = +2.16780652e+00 + 4.75221902e-03 * T - 1.83787077e-06 * T2 +
                  3.04190252e-10 * T3 - 1.77232770e-14 * T4;
    // species 22: C2H2
    species[22] = +3.14756964e+00 + 5.96166664e-03 * T - 2.37294852e-06 * T2 +
                  4.67412171e-10 * T3 - 3.61235213e-14 * T4;
    // species 23: C2H3
    species[23] = +2.01672400e+00 + 1.03302292e-02 * T - 4.68082349e-06 * T2 +
                  1.01763288e-09 * T3 - 8.62607041e-14 * T4;
    // species 24: C2H4
    species[24] = +1.03611116e+00 + 1.46454151e-02 * T - 6.71077915e-06 * T2 +
                  1.47222923e-09 * T3 - 1.25706061e-13 * T4;
    // species 25: C2H5
    species[25] = +9.54656420e-01 + 1.73972722e-02 * T - 7.98206668e-06 * T2 +
                  1.75217689e-09 * T3 - 1.49641576e-13 * T4;
    // species 26: C2H6
    species[26] = +7.18815000e-02 + 2.16852677e-02 * T - 1.00256067e-05 * T2 +
                  2.21412001e-09 * T3 - 1.90002890e-13 * T4;
    // species 27: HCCO
    species[27] = +4.62820580e+00 + 4.08534010e-03 * T - 1.59345470e-06 * T2 +
                  2.86260520e-10 * T3 - 1.94078320e-14 * T4;
    // species 28: CH2CO
    species[28] = +3.51129732e+00 + 9.00359745e-03 * T - 4.16939635e-06 * T2 +
                  9.23345882e-10 * T3 - 7.94838201e-14 * T4;
    // species 29: HCCOH
    species[29] = +4.92382910e+00 + 6.79236000e-03 * T - 2.56585640e-06 * T2 +
                  4.49878410e-10 * T3 - 2.99401010e-14 * T4;
    // species 30: N
    species[30] = +1.41594290e+00 + 1.74890650e-04 * T - 1.19023690e-07 * T2 +
                  3.02262450e-11 * T3 - 2.03609820e-15 * T4;
    // species 31: NH
    species[31] = +1.78369280e+00 + 1.32984300e-03 * T - 4.24780470e-07 * T2 +
                  7.83485010e-11 * T3 - 5.50444700e-15 * T4;
    // species 32: NH2
    species[32] = +1.83474210e+00 + 3.20730820e-03 * T - 9.33908040e-07 * T2 +
                  1.37029530e-10 * T3 - 7.92061440e-15 * T4;
    // species 33: NH3
    species[33] = +1.63445210e+00 + 5.66625600e-03 * T - 1.72786760e-06 * T2 +
                  2.38671610e-10 * T3 - 1.25787860e-14 * T4;
    // species 34: NNH
    species[34] = +2.76675440e+00 + 2.89150820e-03 * T - 1.04166200e-06 * T2 +
                  1.68425940e-10 * T3 - 1.00918960e-14 * T4;
    // species 35: NO
    species[35] = +2.26060560e+00 + 1.19110430e-03 * T - 4.29170480e-07 * T2 +
                  6.94576690e-11 * T3 - 4.03360990e-15 * T4;
    // species 36: NO2
    species[36] = +3.88475420e+00 + 2.17239560e-03 * T - 8.28069060e-07 * T2 +
                  1.57475100e-10 * T3 - 1.05108950e-14 * T4;
    // species 37: N2O
    species[37] = +3.82307290e+00 + 2.62702510e-03 * T - 9.58508740e-07 * T2 +
                  1.60007120e-10 * T3 - 9.77523030e-15 * T4;
    // species 38: HNO
    species[38] = +1.97925090e+00 + 3.49440590e-03 * T - 7.85497780e-07 * T2 +
                  5.74795940e-11 * T3 - 1.93359160e-16 * T4;
    // species 39: CN
    species[39] = +2.74598050e+00 + 4.34507750e-05 * T + 2.97059840e-07 * T2 -
                  6.86518060e-11 * T3 + 4.41341730e-15 * T4;
    // species 40: HCN
    species[40] = +2.80223920e+00 + 3.14642280e-03 * T - 1.06321850e-06 * T2 +
                  1.66197570e-10 * T3 - 9.79975700e-15 * T4;
    // species 41: H2CN
    species[41] = +4.20970300e+00 + 2.96929110e-03 * T - 2.85558910e-07 * T2 -
                  1.63555000e-10 * T3 + 3.04325890e-14 * T4;
    // species 42: HCNN
    species[42] = +4.89463620e+00 + 3.98959590e-03 * T - 1.59823800e-06 * T2 +
                  2.92493950e-10 * T3 - 2.00946860e-14 * T4;
    // species 46: NCO
    species[46] = +4.15218450e+00 + 2.30517610e-03 * T - 8.80331530e-07 * T2 +
                  1.47890980e-10 * T3 - 9.09779960e-15 * T4;
    // species 47: N2
    species[47] = +1.92664000e+00 + 1.48797680e-03 * T - 5.68476000e-07 * T2 +
                  1.00970380e-10 * T3 - 6.75335100e-15 * T4;
    // species 49: C3H7
    species[49] = +6.70269870e+00 + 1.60442030e-02 * T - 5.28332200e-06 * T2 +
                  7.62985900e-10 * T3 - 3.93922840e-14 * T4;
    // species 50: C3H8
    species[50] = +6.53413680e+00 + 1.88722390e-02 * T - 6.27184910e-06 * T2 +
                  9.14756490e-10 * T3 - 4.78380690e-14 * T4;
    // species 51: CH2CHO
    species[51] = +4.97567000e+00 + 8.13059100e-03 * T - 2.74362400e-06 * T2 +
                  4.07030400e-10 * T3 - 2.17601700e-14 * T4;
    // species 52: CH3CHO
    species[52] = +4.40411080e+00 + 1.17230590e-02 * T - 4.22631370e-06 * T2 +
                  6.83724510e-10 * T3 - 4.09848630e-14 * T4;
    // species 70: iC3H7
    species[70] = +5.51927410e+00 + 1.72201040e-02 * T - 5.73642170e-06 * T2 +
                  8.41307320e-10 * T3 - 4.45659130e-14 * T4;
    // species 71: nC3H7
    species[71] = +6.70974790e+00 + 1.60314850e-02 * T - 5.27202380e-06 * T2 +
                  7.58883520e-10 * T3 - 3.88627190e-14 * T4;
  }

  // species with midpoint at T=1100 kelvin
  if (T < 1100) {
    // species 56: CH3F
    species[56] = +1.59623660e+00 + 3.65316940e-03 * T + 1.31032310e-05 * T2 -
                  1.45329890e-08 * T3 + 4.48014270e-12 * T4;
    // species 57: CH2F2
    species[57] = +7.39005400e-01 + 1.19379250e-02 * T - 2.69320910e-07 * T2 -
                  5.51893530e-09 * T3 + 2.18135490e-12 * T4;
    // species 65: CF
    species[65] = +2.35383910e+00 + 2.09097030e-04 * T + 3.20774310e-06 * T2 -
                  3.66875370e-09 * T3 + 1.19863110e-12 * T4;
  } else {
    // species 56: CH3F
    species[56] = +1.64400090e+00 + 9.97250770e-03 * T - 3.98497250e-06 * T2 +
                  7.25147620e-10 * T3 - 4.88439960e-14 * T4;
    // species 57: CH2F2
    species[57] = +3.55849840e+00 + 8.31978790e-03 * T - 3.37156980e-06 * T2 +
                  6.18796870e-10 * T3 - 4.19515430e-14 * T4;
    // species 65: CF
    species[65] = +2.66496780e+00 + 9.73680640e-04 * T - 4.10982360e-07 * T2 +
                  8.00628750e-11 * T3 - 5.64980680e-15 * T4;
  }

  // species with midpoint at T=1150 kelvin
  if (T < 1150) {
    // species 55: F2
    species[55] = +1.66955040e+00 + 5.29418460e-03 * T - 6.47090950e-06 * T2 +
                  3.91833470e-09 * T3 - 9.38451350e-13 * T4;
    // species 61: CHF2
    species[61] = +8.32763300e-01 + 1.34163800e-02 * T - 9.54328380e-06 * T2 +
                  2.95929680e-09 * T3 - 2.79199920e-13 * T4;
    // species 67: CF2O
    species[67] = +1.76138600e-01 + 2.10869880e-02 * T - 2.39215710e-05 * T2 +
                  1.39949130e-08 * T3 - 3.37605360e-12 * T4;
    // species 68: CHFO
    species[68] = +1.11849750e+00 + 1.07739880e-02 * T - 5.51581630e-06 * T2 +
                  5.81519320e-10 * T3 + 2.17042090e-13 * T4;
  } else {
    // species 55: F2
    species[55] = +3.05774200e+00 + 6.00033760e-04 * T - 2.19217870e-07 * T2 +
                  4.31507570e-11 * T3 - 3.12588420e-15 * T4;
    // species 61: CHF2
    species[61] = +4.44828140e+00 + 4.41165400e-03 * T - 1.74188580e-06 * T2 +
                  3.09199590e-10 * T3 - 2.01761880e-14 * T4;
    // species 67: CF2O
    species[67] = +5.79131030e+00 + 3.38305420e-03 * T - 1.43011730e-06 * T2 +
                  2.71225720e-10 * T3 - 1.90523810e-14 * T4;
    // species 68: CHFO
    species[68] = +3.81925460e+00 + 5.05418230e-03 * T - 2.01421170e-06 * T2 +
                  3.63590850e-10 * T3 - 2.44724070e-14 * T4;
  }

  // species with midpoint at T=1250 kelvin
  if (T < 1250) {
    // species 53: HF
    species[53] = +2.43657390e+00 + 4.86020720e-04 * T - 1.25239710e-06 * T2 +
                  1.36475000e-09 * T3 - 4.09574040e-13 * T4;
    // species 59: CF4
    species[59] = -6.70426470e-01 + 3.32696030e-02 * T - 3.88267060e-05 * T2 +
                  2.20593470e-08 * T3 - 4.94837330e-12 * T4;
    // species 62: CF3
    species[62] = +3.57287100e-01 + 2.15758050e-02 * T - 2.39019820e-05 * T2 +
                  1.29611090e-08 * T3 - 2.80173150e-12 * T4;
    // species 66: CF3O
    species[66] = +3.87239800e-01 + 2.98955400e-02 * T - 3.42744960e-05 * T2 +
                  1.91805700e-08 * T3 - 4.24959350e-12 * T4;
    // species 69: CFO
    species[69] = +1.94060800e+00 + 7.47091680e-03 * T - 6.21833160e-06 * T2 +
                  2.62916350e-09 * T3 - 4.73221880e-13 * T4;
  } else {
    // species 53: HF
    species[53] = +1.78129810e+00 + 1.03959080e-03 * T - 2.41735500e-07 * T2 +
                  2.68415900e-11 * T3 - 1.09766370e-15 * T4;
    // species 59: CF4
    species[59] = +8.80831530e+00 + 3.28269300e-03 * T - 1.34044840e-06 * T2 +
                  2.43738290e-10 * T3 - 1.62861580e-14 * T4;
    // species 62: CF3
    species[62] = +6.73167070e+00 + 2.27114640e-03 * T - 8.90496400e-07 * T2 +
                  1.52938340e-10 * T3 - 9.50837580e-15 * T4;
    // species 66: CF3O
    species[66] = +8.82040840e+00 + 3.38915830e-03 * T - 1.44653890e-06 * T2 +
                  2.76961700e-10 * T3 - 1.95580340e-14 * T4;
    // species 69: CFO
    species[69] = +4.14996370e+00 + 1.84938470e-03 * T - 7.40231870e-07 * T2 +
                  1.32784990e-10 * T3 - 8.83059970e-15 * T4;
  }

  // species with midpoint at T=1300 kelvin
  if (T < 1300) {
    // species 58: CHF3
    species[58] = -3.19241710e-01 + 2.39859100e-02 * T - 2.18335980e-05 * T2 +
                  9.98025680e-09 * T3 - 1.85179010e-12 * T4;
    // species 60: CH2F
    species[60] = +1.11797450e+00 + 1.02392700e-02 * T - 6.62088920e-06 * T2 +
                  2.37857030e-09 * T3 - 3.89335870e-13 * T4;
    // species 63: CHF
    species[63] = +2.34483880e+00 + 2.35460520e-03 * T + 1.93982930e-06 * T2 -
                  2.65250570e-09 * T3 + 7.91169370e-13 * T4;
    // species 64: CF2
    species[64] = +1.28591330e+00 + 1.07607860e-02 * T - 1.05382010e-05 * T2 +
                  4.89881380e-09 * T3 - 8.86384280e-13 * T4;
  } else {
    // species 58: CHF3
    species[58] = +6.52416890e+00 + 5.23004720e-03 * T - 2.03600320e-06 * T2 +
                  3.57295560e-10 * T3 - 2.30997270e-14 * T4;
    // species 60: CH2F
    species[60] = +3.06013010e+00 + 5.46642290e-03 * T - 2.10949390e-06 * T2 +
                  3.74458110e-10 * T3 - 2.47400060e-14 * T4;
    // species 63: CHF
    species[63] = +3.48365700e+00 + 1.74963530e-03 * T - 5.04790250e-07 * T2 +
                  1.08952650e-10 * T3 - 9.87898230e-15 * T4;
    // species 64: CF2
    species[64] = +4.33120660e+00 + 1.97748380e-03 * T - 9.60247910e-07 * T2 +
                  2.10703690e-10 * T3 - 1.59539770e-14 * T4;
  }

  // species with midpoint at T=1368 kelvin
  if (T < 1368) {
    // species 44: HOCN
    species[44] = +2.78604952e+00 + 6.88667922e-03 * T - 3.21487864e-06 * T2 +
                  5.17195767e-10 * T3 + 1.19360788e-14 * T4;
  } else {
    // species 44: HOCN
    species[44] = +4.89784885e+00 + 3.16789393e-03 * T - 1.11801064e-06 * T2 +
                  1.77243144e-10 * T3 - 1.04339177e-14 * T4;
  }

  // species with midpoint at T=1382 kelvin
  if (T < 1382) {
    // species 43: HCNO
    species[43] = +1.64727989e+00 + 1.27505342e-02 * T - 1.04794236e-05 * T2 +
                  4.41432836e-09 * T3 - 7.57521466e-13 * T4;
  } else {
    // species 43: HCNO
    species[43] = +5.59860456e+00 + 3.02778626e-03 * T - 1.07704346e-06 * T2 +
                  1.71666528e-10 * T3 - 1.01439391e-14 * T4;
  }

  // species with midpoint at T=1400 kelvin
  if (T < 1400) {
    // species 54: F
    species[54] = +1.90370760e+00 - 6.35296320e-04 * T + 2.64734870e-07 * T2 +
                  7.69063060e-11 * T3 - 5.45253550e-14 * T4;
  } else {
    // species 54: F
    species[54] = +1.65116610e+00 - 1.40129710e-04 * T + 5.19236430e-08 * T2 -
                  8.84954450e-12 * T3 + 5.90280140e-16 * T4;
  }

  // species with midpoint at T=1478 kelvin
  if (T < 1478) {
    // species 45: HNCO
    species[45] = +2.63096317e+00 + 7.30282357e-03 * T - 2.28050003e-06 * T2 -
                  6.61271298e-10 * T3 + 3.62235752e-13 * T4;
  } else {
    // species 45: HNCO
    species[45] = +5.22395134e+00 + 3.17864004e-03 * T - 1.09378755e-06 * T2 +
                  1.70735163e-10 * T3 - 9.95021955e-15 * T4;
  }
}

// compute Cp/R at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cp_R(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with no change across T
  // species 48: AR
  species[48] = +2.50000000e+00;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +2.34433112e+00 + 7.98052075e-03 * T - 1.94781510e-05 * T2 +
                 2.01572094e-08 * T3 - 7.37611761e-12 * T4;
    // species 1: H
    species[1] = +2.50000000e+00 + 7.05332819e-13 * T - 1.99591964e-15 * T2 +
                 2.30081632e-18 * T3 - 9.27732332e-22 * T4;
    // species 2: O
    species[2] = +3.16826710e+00 - 3.27931884e-03 * T + 6.64306396e-06 * T2 -
                 6.12806624e-09 * T3 + 2.11265971e-12 * T4;
    // species 3: O2
    species[3] = +3.78245636e+00 - 2.99673416e-03 * T + 9.84730201e-06 * T2 -
                 9.68129509e-09 * T3 + 3.24372837e-12 * T4;
    // species 4: OH
    species[4] = +3.99201543e+00 - 2.40131752e-03 * T + 4.61793841e-06 * T2 -
                 3.88113333e-09 * T3 + 1.36411470e-12 * T4;
    // species 5: H2O
    species[5] = +4.19864056e+00 - 2.03643410e-03 * T + 6.52040211e-06 * T2 -
                 5.48797062e-09 * T3 + 1.77197817e-12 * T4;
    // species 6: HO2
    species[6] = +4.30179801e+00 - 4.74912051e-03 * T + 2.11582891e-05 * T2 -
                 2.42763894e-08 * T3 + 9.29225124e-12 * T4;
    // species 7: H2O2
    species[7] = +4.27611269e+00 - 5.42822417e-04 * T + 1.67335701e-05 * T2 -
                 2.15770813e-08 * T3 + 8.62454363e-12 * T4;
    // species 8: C
    species[8] = +2.55423955e+00 - 3.21537724e-04 * T + 7.33792245e-07 * T2 -
                 7.32234889e-10 * T3 + 2.66521446e-13 * T4;
    // species 9: CH
    species[9] = +3.48981665e+00 + 3.23835541e-04 * T - 1.68899065e-06 * T2 +
                 3.16217327e-09 * T3 - 1.40609067e-12 * T4;
    // species 10: CH2
    species[10] = +3.76267867e+00 + 9.68872143e-04 * T + 2.79489841e-06 * T2 -
                  3.85091153e-09 * T3 + 1.68741719e-12 * T4;
    // species 11: CH2(S)
    species[11] = +4.19860411e+00 - 2.36661419e-03 * T + 8.23296220e-06 * T2 -
                  6.68815981e-09 * T3 + 1.94314737e-12 * T4;
    // species 12: CH3
    species[12] = +3.67359040e+00 + 2.01095175e-03 * T + 5.73021856e-06 * T2 -
                  6.87117425e-09 * T3 + 2.54385734e-12 * T4;
    // species 13: CH4
    species[13] = +5.14987613e+00 - 1.36709788e-02 * T + 4.91800599e-05 * T2 -
                  4.84743026e-08 * T3 + 1.66693956e-11 * T4;
    // species 14: CO
    species[14] = +3.57953347e+00 - 6.10353680e-04 * T + 1.01681433e-06 * T2 +
                  9.07005884e-10 * T3 - 9.04424499e-13 * T4;
    // species 15: CO2
    species[15] = +2.35677352e+00 + 8.98459677e-03 * T - 7.12356269e-06 * T2 +
                  2.45919022e-09 * T3 - 1.43699548e-13 * T4;
    // species 16: HCO
    species[16] = +4.22118584e+00 - 3.24392532e-03 * T + 1.37799446e-05 * T2 -
                  1.33144093e-08 * T3 + 4.33768865e-12 * T4;
    // species 17: CH2O
    species[17] = +4.79372315e+00 - 9.90833369e-03 * T + 3.73220008e-05 * T2 -
                  3.79285261e-08 * T3 + 1.31772652e-11 * T4;
    // species 18: CH2OH
    species[18] = +3.86388918e+00 + 5.59672304e-03 * T + 5.93271791e-06 * T2 -
                  1.04532012e-08 * T3 + 4.36967278e-12 * T4;
    // species 19: CH3O
    species[19] = +2.10620400e+00 + 7.21659500e-03 * T + 5.33847200e-06 * T2 -
                  7.37763600e-09 * T3 + 2.07561000e-12 * T4;
    // species 20: CH3OH
    species[20] = +5.71539582e+00 - 1.52309129e-02 * T + 6.52441155e-05 * T2 -
                  7.10806889e-08 * T3 + 2.61352698e-11 * T4;
    // species 21: C2H
    species[21] = +2.88965733e+00 + 1.34099611e-02 * T - 2.84769501e-05 * T2 +
                  2.94791045e-08 * T3 - 1.09331511e-11 * T4;
    // species 22: C2H2
    species[22] = +8.08681094e-01 + 2.33615629e-02 * T - 3.55171815e-05 * T2 +
                  2.80152437e-08 * T3 - 8.50072974e-12 * T4;
    // species 23: C2H3
    species[23] = +3.21246645e+00 + 1.51479162e-03 * T + 2.59209412e-05 * T2 -
                  3.57657847e-08 * T3 + 1.47150873e-11 * T4;
    // species 24: C2H4
    species[24] = +3.95920148e+00 - 7.57052247e-03 * T + 5.70990292e-05 * T2 -
                  6.91588753e-08 * T3 + 2.69884373e-11 * T4;
    // species 25: C2H5
    species[25] = +4.30646568e+00 - 4.18658892e-03 * T + 4.97142807e-05 * T2 -
                  5.99126606e-08 * T3 + 2.30509004e-11 * T4;
    // species 26: C2H6
    species[26] = +4.29142492e+00 - 5.50154270e-03 * T + 5.99438288e-05 * T2 -
                  7.08466285e-08 * T3 + 2.68685771e-11 * T4;
    // species 27: HCCO
    species[27] = +2.25172140e+00 + 1.76550210e-02 * T - 2.37291010e-05 * T2 +
                  1.72757590e-08 * T3 - 5.06648110e-12 * T4;
    // species 28: CH2CO
    species[28] = +2.13583630e+00 + 1.81188721e-02 * T - 1.73947474e-05 * T2 +
                  9.34397568e-09 * T3 - 2.01457615e-12 * T4;
    // species 29: HCCOH
    species[29] = +1.24237330e+00 + 3.10722010e-02 * T - 5.08668640e-05 * T2 +
                  4.31371310e-08 * T3 - 1.40145940e-11 * T4;
    // species 30: N
    species[30] = +2.50000000e+00;
    // species 31: NH
    species[31] = +3.49290850e+00 + 3.11791980e-04 * T - 1.48904840e-06 * T2 +
                  2.48164420e-09 * T3 - 1.03569670e-12 * T4;
    // species 32: NH2
    species[32] = +4.20400290e+00 - 2.10613850e-03 * T + 7.10683480e-06 * T2 -
                  5.61151970e-09 * T3 + 1.64407170e-12 * T4;
    // species 33: NH3
    species[33] = +4.28602740e+00 - 4.66052300e-03 * T + 2.17185130e-05 * T2 -
                  2.28088870e-08 * T3 + 8.26380460e-12 * T4;
    // species 34: NNH
    species[34] = +4.34469270e+00 - 4.84970720e-03 * T + 2.00594590e-05 * T2 -
                  2.17264640e-08 * T3 + 7.94695390e-12 * T4;
    // species 35: NO
    species[35] = +4.21847630e+00 - 4.63897600e-03 * T + 1.10410220e-05 * T2 -
                  9.33613540e-09 * T3 + 2.80357700e-12 * T4;
    // species 36: NO2
    species[36] = +3.94403120e+00 - 1.58542900e-03 * T + 1.66578120e-05 * T2 -
                  2.04754260e-08 * T3 + 7.83505640e-12 * T4;
    // species 37: N2O
    species[37] = +2.25715020e+00 + 1.13047280e-02 * T - 1.36713190e-05 * T2 +
                  9.68198060e-09 * T3 - 2.93071820e-12 * T4;
    // species 38: HNO
    species[38] = +4.53349160e+00 - 5.66961710e-03 * T + 1.84732070e-05 * T2 -
                  1.71370940e-08 * T3 + 5.54545730e-12 * T4;
    // species 39: CN
    species[39] = +3.61293510e+00 - 9.55513270e-04 * T + 2.14429770e-06 * T2 -
                  3.15163230e-10 * T3 - 4.64303560e-13 * T4;
    // species 40: HCN
    species[40] = +2.25898860e+00 + 1.00511700e-02 * T - 1.33517630e-05 * T2 +
                  1.00923490e-08 * T3 - 3.00890280e-12 * T4;
    // species 41: H2CN
    species[41] = +2.85166100e+00 + 5.69523310e-03 * T + 1.07114000e-06 * T2 -
                  1.62261200e-09 * T3 - 2.35110810e-13 * T4;
    // species 42: HCNN
    species[42] = +2.52431940e+00 + 1.59606190e-02 * T - 1.88163540e-05 * T2 +
                  1.21255400e-08 * T3 - 3.23573780e-12 * T4;
    // species 46: NCO
    species[46] = +2.82693080e+00 + 8.80516880e-03 * T - 8.38661340e-06 * T2 +
                  4.80169640e-09 * T3 - 1.33135950e-12 * T4;
    // species 47: N2
    species[47] = +3.29867700e+00 + 1.40824040e-03 * T - 3.96322200e-06 * T2 +
                  5.64151500e-09 * T3 - 2.44485400e-12 * T4;
    // species 49: C3H7
    species[49] = +1.05155180e+00 + 2.59919800e-02 * T + 2.38005400e-06 * T2 -
                  1.96095690e-08 * T3 + 9.37324700e-12 * T4;
    // species 50: C3H8
    species[50] = +9.33553810e-01 + 2.64245790e-02 * T + 6.10597270e-06 * T2 -
                  2.19774990e-08 * T3 + 9.51492530e-12 * T4;
    // species 51: CH2CHO
    species[51] = +3.40906200e+00 + 1.07385740e-02 * T + 1.89149200e-06 * T2 -
                  7.15858300e-09 * T3 + 2.86738500e-12 * T4;
    // species 52: CH3CHO
    species[52] = +4.72945950e+00 - 3.19328580e-03 * T + 4.75349210e-05 * T2 -
                  5.74586110e-08 * T3 + 2.19311120e-11 * T4;
    // species 70: iC3H7
    species[70] = +1.44491990e+00 + 2.09991120e-02 * T + 7.70362220e-06 * T2 -
                  1.84762530e-08 * T3 + 7.12829620e-12 * T4;
    // species 71: nC3H7
    species[71] = +1.04911730e+00 + 2.60089730e-02 * T + 2.35425160e-06 * T2 -
                  1.95951320e-08 * T3 + 9.37202070e-12 * T4;
  } else {
    // species 0: H2
    species[0] = +3.33727920e+00 - 4.94024731e-05 * T + 4.99456778e-07 * T2 -
                 1.79566394e-10 * T3 + 2.00255376e-14 * T4;
    // species 1: H
    species[1] = +2.50000001e+00 - 2.30842973e-11 * T + 1.61561948e-14 * T2 -
                 4.73515235e-18 * T3 + 4.98197357e-22 * T4;
    // species 2: O
    species[2] = +2.56942078e+00 - 8.59741137e-05 * T + 4.19484589e-08 * T2 -
                 1.00177799e-11 * T3 + 1.22833691e-15 * T4;
    // species 3: O2
    species[3] = +3.28253784e+00 + 1.48308754e-03 * T - 7.57966669e-07 * T2 +
                 2.09470555e-10 * T3 - 2.16717794e-14 * T4;
    // species 4: OH
    species[4] = +3.09288767e+00 + 5.48429716e-04 * T + 1.26505228e-07 * T2 -
                 8.79461556e-11 * T3 + 1.17412376e-14 * T4;
    // species 5: H2O
    species[5] = +3.03399249e+00 + 2.17691804e-03 * T - 1.64072518e-07 * T2 -
                 9.70419870e-11 * T3 + 1.68200992e-14 * T4;
    // species 6: HO2
    species[6] = +4.01721090e+00 + 2.23982013e-03 * T - 6.33658150e-07 * T2 +
                 1.14246370e-10 * T3 - 1.07908535e-14 * T4;
    // species 7: H2O2
    species[7] = +4.16500285e+00 + 4.90831694e-03 * T - 1.90139225e-06 * T2 +
                 3.71185986e-10 * T3 - 2.87908305e-14 * T4;
    // species 8: C
    species[8] = +2.49266888e+00 + 4.79889284e-05 * T - 7.24335020e-08 * T2 +
                 3.74291029e-11 * T3 - 4.87277893e-15 * T4;
    // species 9: CH
    species[9] = +2.87846473e+00 + 9.70913681e-04 * T + 1.44445655e-07 * T2 -
                 1.30687849e-10 * T3 + 1.76079383e-14 * T4;
    // species 10: CH2
    species[10] = +2.87410113e+00 + 3.65639292e-03 * T - 1.40894597e-06 * T2 +
                  2.60179549e-10 * T3 - 1.87727567e-14 * T4;
    // species 11: CH2(S)
    species[11] = +2.29203842e+00 + 4.65588637e-03 * T - 2.01191947e-06 * T2 +
                  4.17906000e-10 * T3 - 3.39716365e-14 * T4;
    // species 12: CH3
    species[12] = +2.28571772e+00 + 7.23990037e-03 * T - 2.98714348e-06 * T2 +
                  5.95684644e-10 * T3 - 4.67154394e-14 * T4;
    // species 13: CH4
    species[13] = +7.48514950e-02 + 1.33909467e-02 * T - 5.73285809e-06 * T2 +
                  1.22292535e-09 * T3 - 1.01815230e-13 * T4;
    // species 14: CO
    species[14] = +2.71518561e+00 + 2.06252743e-03 * T - 9.98825771e-07 * T2 +
                  2.30053008e-10 * T3 - 2.03647716e-14 * T4;
    // species 15: CO2
    species[15] = +3.85746029e+00 + 4.41437026e-03 * T - 2.21481404e-06 * T2 +
                  5.23490188e-10 * T3 - 4.72084164e-14 * T4;
    // species 16: HCO
    species[16] = +2.77217438e+00 + 4.95695526e-03 * T - 2.48445613e-06 * T2 +
                  5.89161778e-10 * T3 - 5.33508711e-14 * T4;
    // species 17: CH2O
    species[17] = +1.76069008e+00 + 9.20000082e-03 * T - 4.42258813e-06 * T2 +
                  1.00641212e-09 * T3 - 8.83855640e-14 * T4;
    // species 18: CH2OH
    species[18] = +3.69266569e+00 + 8.64576797e-03 * T - 3.75101120e-06 * T2 +
                  7.87234636e-10 * T3 - 6.48554201e-14 * T4;
    // species 19: CH3O
    species[19] = +3.77079900e+00 + 7.87149700e-03 * T - 2.65638400e-06 * T2 +
                  3.94443100e-10 * T3 - 2.11261600e-14 * T4;
    // species 20: CH3OH
    species[20] = +1.78970791e+00 + 1.40938292e-02 * T - 6.36500835e-06 * T2 +
                  1.38171085e-09 * T3 - 1.17060220e-13 * T4;
    // species 21: C2H
    species[21] = +3.16780652e+00 + 4.75221902e-03 * T - 1.83787077e-06 * T2 +
                  3.04190252e-10 * T3 - 1.77232770e-14 * T4;
    // species 22: C2H2
    species[22] = +4.14756964e+00 + 5.96166664e-03 * T - 2.37294852e-06 * T2 +
                  4.67412171e-10 * T3 - 3.61235213e-14 * T4;
    // species 23: C2H3
    species[23] = +3.01672400e+00 + 1.03302292e-02 * T - 4.68082349e-06 * T2 +
                  1.01763288e-09 * T3 - 8.62607041e-14 * T4;
    // species 24: C2H4
    species[24] = +2.03611116e+00 + 1.46454151e-02 * T - 6.71077915e-06 * T2 +
                  1.47222923e-09 * T3 - 1.25706061e-13 * T4;
    // species 25: C2H5
    species[25] = +1.95465642e+00 + 1.73972722e-02 * T - 7.98206668e-06 * T2 +
                  1.75217689e-09 * T3 - 1.49641576e-13 * T4;
    // species 26: C2H6
    species[26] = +1.07188150e+00 + 2.16852677e-02 * T - 1.00256067e-05 * T2 +
                  2.21412001e-09 * T3 - 1.90002890e-13 * T4;
    // species 27: HCCO
    species[27] = +5.62820580e+00 + 4.08534010e-03 * T - 1.59345470e-06 * T2 +
                  2.86260520e-10 * T3 - 1.94078320e-14 * T4;
    // species 28: CH2CO
    species[28] = +4.51129732e+00 + 9.00359745e-03 * T - 4.16939635e-06 * T2 +
                  9.23345882e-10 * T3 - 7.94838201e-14 * T4;
    // species 29: HCCOH
    species[29] = +5.92382910e+00 + 6.79236000e-03 * T - 2.56585640e-06 * T2 +
                  4.49878410e-10 * T3 - 2.99401010e-14 * T4;
    // species 30: N
    species[30] = +2.41594290e+00 + 1.74890650e-04 * T - 1.19023690e-07 * T2 +
                  3.02262450e-11 * T3 - 2.03609820e-15 * T4;
    // species 31: NH
    species[31] = +2.78369280e+00 + 1.32984300e-03 * T - 4.24780470e-07 * T2 +
                  7.83485010e-11 * T3 - 5.50444700e-15 * T4;
    // species 32: NH2
    species[32] = +2.83474210e+00 + 3.20730820e-03 * T - 9.33908040e-07 * T2 +
                  1.37029530e-10 * T3 - 7.92061440e-15 * T4;
    // species 33: NH3
    species[33] = +2.63445210e+00 + 5.66625600e-03 * T - 1.72786760e-06 * T2 +
                  2.38671610e-10 * T3 - 1.25787860e-14 * T4;
    // species 34: NNH
    species[34] = +3.76675440e+00 + 2.89150820e-03 * T - 1.04166200e-06 * T2 +
                  1.68425940e-10 * T3 - 1.00918960e-14 * T4;
    // species 35: NO
    species[35] = +3.26060560e+00 + 1.19110430e-03 * T - 4.29170480e-07 * T2 +
                  6.94576690e-11 * T3 - 4.03360990e-15 * T4;
    // species 36: NO2
    species[36] = +4.88475420e+00 + 2.17239560e-03 * T - 8.28069060e-07 * T2 +
                  1.57475100e-10 * T3 - 1.05108950e-14 * T4;
    // species 37: N2O
    species[37] = +4.82307290e+00 + 2.62702510e-03 * T - 9.58508740e-07 * T2 +
                  1.60007120e-10 * T3 - 9.77523030e-15 * T4;
    // species 38: HNO
    species[38] = +2.97925090e+00 + 3.49440590e-03 * T - 7.85497780e-07 * T2 +
                  5.74795940e-11 * T3 - 1.93359160e-16 * T4;
    // species 39: CN
    species[39] = +3.74598050e+00 + 4.34507750e-05 * T + 2.97059840e-07 * T2 -
                  6.86518060e-11 * T3 + 4.41341730e-15 * T4;
    // species 40: HCN
    species[40] = +3.80223920e+00 + 3.14642280e-03 * T - 1.06321850e-06 * T2 +
                  1.66197570e-10 * T3 - 9.79975700e-15 * T4;
    // species 41: H2CN
    species[41] = +5.20970300e+00 + 2.96929110e-03 * T - 2.85558910e-07 * T2 -
                  1.63555000e-10 * T3 + 3.04325890e-14 * T4;
    // species 42: HCNN
    species[42] = +5.89463620e+00 + 3.98959590e-03 * T - 1.59823800e-06 * T2 +
                  2.92493950e-10 * T3 - 2.00946860e-14 * T4;
    // species 46: NCO
    species[46] = +5.15218450e+00 + 2.30517610e-03 * T - 8.80331530e-07 * T2 +
                  1.47890980e-10 * T3 - 9.09779960e-15 * T4;
    // species 47: N2
    species[47] = +2.92664000e+00 + 1.48797680e-03 * T - 5.68476000e-07 * T2 +
                  1.00970380e-10 * T3 - 6.75335100e-15 * T4;
    // species 49: C3H7
    species[49] = +7.70269870e+00 + 1.60442030e-02 * T - 5.28332200e-06 * T2 +
                  7.62985900e-10 * T3 - 3.93922840e-14 * T4;
    // species 50: C3H8
    species[50] = +7.53413680e+00 + 1.88722390e-02 * T - 6.27184910e-06 * T2 +
                  9.14756490e-10 * T3 - 4.78380690e-14 * T4;
    // species 51: CH2CHO
    species[51] = +5.97567000e+00 + 8.13059100e-03 * T - 2.74362400e-06 * T2 +
                  4.07030400e-10 * T3 - 2.17601700e-14 * T4;
    // species 52: CH3CHO
    species[52] = +5.40411080e+00 + 1.17230590e-02 * T - 4.22631370e-06 * T2 +
                  6.83724510e-10 * T3 - 4.09848630e-14 * T4;
    // species 70: iC3H7
    species[70] = +6.51927410e+00 + 1.72201040e-02 * T - 5.73642170e-06 * T2 +
                  8.41307320e-10 * T3 - 4.45659130e-14 * T4;
    // species 71: nC3H7
    species[71] = +7.70974790e+00 + 1.60314850e-02 * T - 5.27202380e-06 * T2 +
                  7.58883520e-10 * T3 - 3.88627190e-14 * T4;
  }

  // species with midpoint at T=1100 kelvin
  if (T < 1100) {
    // species 56: CH3F
    species[56] = +2.59623660e+00 + 3.65316940e-03 * T + 1.31032310e-05 * T2 -
                  1.45329890e-08 * T3 + 4.48014270e-12 * T4;
    // species 57: CH2F2
    species[57] = +1.73900540e+00 + 1.19379250e-02 * T - 2.69320910e-07 * T2 -
                  5.51893530e-09 * T3 + 2.18135490e-12 * T4;
    // species 65: CF
    species[65] = +3.35383910e+00 + 2.09097030e-04 * T + 3.20774310e-06 * T2 -
                  3.66875370e-09 * T3 + 1.19863110e-12 * T4;
  } else {
    // species 56: CH3F
    species[56] = +2.64400090e+00 + 9.97250770e-03 * T - 3.98497250e-06 * T2 +
                  7.25147620e-10 * T3 - 4.88439960e-14 * T4;
    // species 57: CH2F2
    species[57] = +4.55849840e+00 + 8.31978790e-03 * T - 3.37156980e-06 * T2 +
                  6.18796870e-10 * T3 - 4.19515430e-14 * T4;
    // species 65: CF
    species[65] = +3.66496780e+00 + 9.73680640e-04 * T - 4.10982360e-07 * T2 +
                  8.00628750e-11 * T3 - 5.64980680e-15 * T4;
  }

  // species with midpoint at T=1150 kelvin
  if (T < 1150) {
    // species 55: F2
    species[55] = +2.66955040e+00 + 5.29418460e-03 * T - 6.47090950e-06 * T2 +
                  3.91833470e-09 * T3 - 9.38451350e-13 * T4;
    // species 61: CHF2
    species[61] = +1.83276330e+00 + 1.34163800e-02 * T - 9.54328380e-06 * T2 +
                  2.95929680e-09 * T3 - 2.79199920e-13 * T4;
    // species 67: CF2O
    species[67] = +1.17613860e+00 + 2.10869880e-02 * T - 2.39215710e-05 * T2 +
                  1.39949130e-08 * T3 - 3.37605360e-12 * T4;
    // species 68: CHFO
    species[68] = +2.11849750e+00 + 1.07739880e-02 * T - 5.51581630e-06 * T2 +
                  5.81519320e-10 * T3 + 2.17042090e-13 * T4;
  } else {
    // species 55: F2
    species[55] = +4.05774200e+00 + 6.00033760e-04 * T - 2.19217870e-07 * T2 +
                  4.31507570e-11 * T3 - 3.12588420e-15 * T4;
    // species 61: CHF2
    species[61] = +5.44828140e+00 + 4.41165400e-03 * T - 1.74188580e-06 * T2 +
                  3.09199590e-10 * T3 - 2.01761880e-14 * T4;
    // species 67: CF2O
    species[67] = +6.79131030e+00 + 3.38305420e-03 * T - 1.43011730e-06 * T2 +
                  2.71225720e-10 * T3 - 1.90523810e-14 * T4;
    // species 68: CHFO
    species[68] = +4.81925460e+00 + 5.05418230e-03 * T - 2.01421170e-06 * T2 +
                  3.63590850e-10 * T3 - 2.44724070e-14 * T4;
  }

  // species with midpoint at T=1250 kelvin
  if (T < 1250) {
    // species 53: HF
    species[53] = +3.43657390e+00 + 4.86020720e-04 * T - 1.25239710e-06 * T2 +
                  1.36475000e-09 * T3 - 4.09574040e-13 * T4;
    // species 59: CF4
    species[59] = +3.29573530e-01 + 3.32696030e-02 * T - 3.88267060e-05 * T2 +
                  2.20593470e-08 * T3 - 4.94837330e-12 * T4;
    // species 62: CF3
    species[62] = +1.35728710e+00 + 2.15758050e-02 * T - 2.39019820e-05 * T2 +
                  1.29611090e-08 * T3 - 2.80173150e-12 * T4;
    // species 66: CF3O
    species[66] = +1.38723980e+00 + 2.98955400e-02 * T - 3.42744960e-05 * T2 +
                  1.91805700e-08 * T3 - 4.24959350e-12 * T4;
    // species 69: CFO
    species[69] = +2.94060800e+00 + 7.47091680e-03 * T - 6.21833160e-06 * T2 +
                  2.62916350e-09 * T3 - 4.73221880e-13 * T4;
  } else {
    // species 53: HF
    species[53] = +2.78129810e+00 + 1.03959080e-03 * T - 2.41735500e-07 * T2 +
                  2.68415900e-11 * T3 - 1.09766370e-15 * T4;
    // species 59: CF4
    species[59] = +9.80831530e+00 + 3.28269300e-03 * T - 1.34044840e-06 * T2 +
                  2.43738290e-10 * T3 - 1.62861580e-14 * T4;
    // species 62: CF3
    species[62] = +7.73167070e+00 + 2.27114640e-03 * T - 8.90496400e-07 * T2 +
                  1.52938340e-10 * T3 - 9.50837580e-15 * T4;
    // species 66: CF3O
    species[66] = +9.82040840e+00 + 3.38915830e-03 * T - 1.44653890e-06 * T2 +
                  2.76961700e-10 * T3 - 1.95580340e-14 * T4;
    // species 69: CFO
    species[69] = +5.14996370e+00 + 1.84938470e-03 * T - 7.40231870e-07 * T2 +
                  1.32784990e-10 * T3 - 8.83059970e-15 * T4;
  }

  // species with midpoint at T=1300 kelvin
  if (T < 1300) {
    // species 58: CHF3
    species[58] = +6.80758290e-01 + 2.39859100e-02 * T - 2.18335980e-05 * T2 +
                  9.98025680e-09 * T3 - 1.85179010e-12 * T4;
    // species 60: CH2F
    species[60] = +2.11797450e+00 + 1.02392700e-02 * T - 6.62088920e-06 * T2 +
                  2.37857030e-09 * T3 - 3.89335870e-13 * T4;
    // species 63: CHF
    species[63] = +3.34483880e+00 + 2.35460520e-03 * T + 1.93982930e-06 * T2 -
                  2.65250570e-09 * T3 + 7.91169370e-13 * T4;
    // species 64: CF2
    species[64] = +2.28591330e+00 + 1.07607860e-02 * T - 1.05382010e-05 * T2 +
                  4.89881380e-09 * T3 - 8.86384280e-13 * T4;
  } else {
    // species 58: CHF3
    species[58] = +7.52416890e+00 + 5.23004720e-03 * T - 2.03600320e-06 * T2 +
                  3.57295560e-10 * T3 - 2.30997270e-14 * T4;
    // species 60: CH2F
    species[60] = +4.06013010e+00 + 5.46642290e-03 * T - 2.10949390e-06 * T2 +
                  3.74458110e-10 * T3 - 2.47400060e-14 * T4;
    // species 63: CHF
    species[63] = +4.48365700e+00 + 1.74963530e-03 * T - 5.04790250e-07 * T2 +
                  1.08952650e-10 * T3 - 9.87898230e-15 * T4;
    // species 64: CF2
    species[64] = +5.33120660e+00 + 1.97748380e-03 * T - 9.60247910e-07 * T2 +
                  2.10703690e-10 * T3 - 1.59539770e-14 * T4;
  }

  // species with midpoint at T=1368 kelvin
  if (T < 1368) {
    // species 44: HOCN
    species[44] = +3.78604952e+00 + 6.88667922e-03 * T - 3.21487864e-06 * T2 +
                  5.17195767e-10 * T3 + 1.19360788e-14 * T4;
  } else {
    // species 44: HOCN
    species[44] = +5.89784885e+00 + 3.16789393e-03 * T - 1.11801064e-06 * T2 +
                  1.77243144e-10 * T3 - 1.04339177e-14 * T4;
  }

  // species with midpoint at T=1382 kelvin
  if (T < 1382) {
    // species 43: HCNO
    species[43] = +2.64727989e+00 + 1.27505342e-02 * T - 1.04794236e-05 * T2 +
                  4.41432836e-09 * T3 - 7.57521466e-13 * T4;
  } else {
    // species 43: HCNO
    species[43] = +6.59860456e+00 + 3.02778626e-03 * T - 1.07704346e-06 * T2 +
                  1.71666528e-10 * T3 - 1.01439391e-14 * T4;
  }

  // species with midpoint at T=1400 kelvin
  if (T < 1400) {
    // species 54: F
    species[54] = +2.90370760e+00 - 6.35296320e-04 * T + 2.64734870e-07 * T2 +
                  7.69063060e-11 * T3 - 5.45253550e-14 * T4;
  } else {
    // species 54: F
    species[54] = +2.65116610e+00 - 1.40129710e-04 * T + 5.19236430e-08 * T2 -
                  8.84954450e-12 * T3 + 5.90280140e-16 * T4;
  }

  // species with midpoint at T=1478 kelvin
  if (T < 1478) {
    // species 45: HNCO
    species[45] = +3.63096317e+00 + 7.30282357e-03 * T - 2.28050003e-06 * T2 -
                  6.61271298e-10 * T3 + 3.62235752e-13 * T4;
  } else {
    // species 45: HNCO
    species[45] = +6.22395134e+00 + 3.17864004e-03 * T - 1.09378755e-06 * T2 +
                  1.70735163e-10 * T3 - 9.95021955e-15 * T4;
  }
}

// compute the g/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
gibbs(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);

  // species with no change across T
  // species 48: AR
  species[48] = -7.453750000000000e+02 * invT - 1.866000000000000e+00 -
                2.500000000000000e+00 * logT;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = -9.179351730000000e+02 * invT + 1.661320882000000e+00 -
                 2.344331120000000e+00 * logT - 3.990260375000000e-03 * T +
                 3.246358500000000e-06 * T2 - 1.679767450000000e-09 * T3 +
                 3.688058805000000e-13 * T4;
    // species 1: H
    species[1] = +2.547365990000000e+04 * invT + 2.946682853000000e+00 -
                 2.500000000000000e+00 * logT - 3.526664095000000e-13 * T +
                 3.326532733333333e-16 * T2 - 1.917346933333333e-19 * T3 +
                 4.638661660000000e-23 * T4;
    // species 2: O
    species[2] = +2.912225920000000e+04 * invT + 1.116333640000000e+00 -
                 3.168267100000000e+00 * logT + 1.639659420000000e-03 * T -
                 1.107177326666667e-06 * T2 + 5.106721866666666e-10 * T3 -
                 1.056329855000000e-13 * T4;
    // species 3: O2
    species[3] = -1.063943560000000e+03 * invT + 1.247806300000001e-01 -
                 3.782456360000000e+00 * logT + 1.498367080000000e-03 * T -
                 1.641217001666667e-06 * T2 + 8.067745908333334e-10 * T3 -
                 1.621864185000000e-13 * T4;
    // species 4: OH
    species[4] = +3.615080560000000e+03 * invT + 4.095940888000000e+00 -
                 3.992015430000000e+00 * logT + 1.200658760000000e-03 * T -
                 7.696564016666666e-07 * T2 + 3.234277775000000e-10 * T3 -
                 6.820573500000000e-14 * T4;
    // species 5: H2O
    species[5] = -3.029372670000000e+04 * invT + 5.047672768000000e+00 -
                 4.198640560000000e+00 * logT + 1.018217050000000e-03 * T -
                 1.086733685000000e-06 * T2 + 4.573308850000000e-10 * T3 -
                 8.859890850000000e-14 * T4;
    // species 6: HO2
    species[6] = +2.948080400000000e+02 * invT + 5.851355599999999e-01 -
                 4.301798010000000e+00 * logT + 2.374560255000000e-03 * T -
                 3.526381516666666e-06 * T2 + 2.023032450000000e-09 * T3 -
                 4.646125620000001e-13 * T4;
    // species 7: H2O2
    species[7] = -1.770258210000000e+04 * invT + 8.410619499999998e-01 -
                 4.276112690000000e+00 * logT + 2.714112085000000e-04 * T -
                 2.788928350000000e-06 * T2 + 1.798090108333333e-09 * T3 -
                 4.312271815000000e-13 * T4;
    // species 8: C
    species[8] = +8.544388320000000e+04 * invT - 1.977068930000000e+00 -
                 2.554239550000000e+00 * logT + 1.607688620000000e-04 * T -
                 1.222987075000000e-07 * T2 + 6.101957408333333e-11 * T3 -
                 1.332607230000000e-14 * T4;
    // species 9: CH
    species[9] = +7.079729340000000e+04 * invT + 1.405805570000000e+00 -
                 3.489816650000000e+00 * logT - 1.619177705000000e-04 * T +
                 2.814984416666667e-07 * T2 - 2.635144391666666e-10 * T3 +
                 7.030453350000001e-14 * T4;
    // species 10: CH2
    species[10] = +4.600404010000000e+04 * invT + 2.200146820000000e+00 -
                  3.762678670000000e+00 * logT - 4.844360715000000e-04 * T -
                  4.658164016666667e-07 * T2 + 3.209092941666667e-10 * T3 -
                  8.437085950000000e-14 * T4;
    // species 11: CH2(S)
    species[11] = +5.049681630000000e+04 * invT + 4.967723077000000e+00 -
                  4.198604110000000e+00 * logT + 1.183307095000000e-03 * T -
                  1.372160366666667e-06 * T2 + 5.573466508333334e-10 * T3 -
                  9.715736850000000e-14 * T4;
    // species 12: CH3
    species[12] = +1.644499880000000e+04 * invT + 2.069026070000000e+00 -
                  3.673590400000000e+00 * logT - 1.005475875000000e-03 * T -
                  9.550364266666668e-07 * T2 + 5.725978541666666e-10 * T3 -
                  1.271928670000000e-13 * T4;
    // species 13: CH4
    species[13] = -1.024664760000000e+04 * invT + 9.791179889999999e+00 -
                  5.149876130000000e+00 * logT + 6.835489400000000e-03 * T -
                  8.196676650000000e-06 * T2 + 4.039525216666667e-09 * T3 -
                  8.334697800000000e-13 * T4;
    // species 14: CO
    species[14] = -1.434408600000000e+04 * invT + 7.112418999999992e-02 -
                  3.579533470000000e+00 * logT + 3.051768400000000e-04 * T -
                  1.694690550000000e-07 * T2 - 7.558382366666667e-11 * T3 +
                  4.522122495000000e-14 * T4;
    // species 15: CO2
    species[15] = -4.837196970000000e+04 * invT - 7.544278700000000e+00 -
                  2.356773520000000e+00 * logT - 4.492298385000000e-03 * T +
                  1.187260448333333e-06 * T2 - 2.049325183333333e-10 * T3 +
                  7.184977399999999e-15 * T4;
    // species 16: HCO
    species[16] = +3.839564960000000e+03 * invT + 8.268134100000002e-01 -
                  4.221185840000000e+00 * logT + 1.621962660000000e-03 * T -
                  2.296657433333333e-06 * T2 + 1.109534108333333e-09 * T3 -
                  2.168844325000000e-13 * T4;
    // species 17: CH2O
    species[17] = -1.430895670000000e+04 * invT + 4.190910250000000e+00 -
                  4.793723150000000e+00 * logT + 4.954166845000000e-03 * T -
                  6.220333466666666e-06 * T2 + 3.160710508333333e-09 * T3 -
                  6.588632600000000e-13 * T4;
    // species 18: CH2OH
    species[18] = -3.193913670000000e+03 * invT - 1.609133250000000e+00 -
                  3.863889180000000e+00 * logT - 2.798361520000000e-03 * T -
                  9.887863183333334e-07 * T2 + 8.711001000000001e-10 * T3 -
                  2.184836390000000e-13 * T4;
    // species 19: CH3O
    species[19] = +9.786011000000000e+02 * invT - 1.104597300000000e+01 -
                  2.106204000000000e+00 * logT - 3.608297500000000e-03 * T -
                  8.897453333333333e-07 * T2 + 6.148030000000000e-10 * T3 -
                  1.037805000000000e-13 * T4;
    // species 20: CH3OH
    species[20] = -2.564276560000000e+04 * invT + 7.219494050000001e+00 -
                  5.715395820000000e+00 * logT + 7.615456450000000e-03 * T -
                  1.087401925000000e-05 * T2 + 5.923390741666667e-09 * T3 -
                  1.306763490000000e-12 * T4;
    // species 21: C2H
    species[21] = +6.683939320000001e+04 * invT - 3.333307050000000e+00 -
                  2.889657330000000e+00 * logT - 6.704980550000000e-03 * T +
                  4.746158350000000e-06 * T2 - 2.456592041666667e-09 * T3 +
                  5.466575550000000e-13 * T4;
    // species 22: C2H2
    species[22] = +2.642898070000000e+04 * invT - 1.313102400600000e+01 -
                  8.086810940000000e-01 * logT - 1.168078145000000e-02 * T +
                  5.919530250000000e-06 * T2 - 2.334603641666667e-09 * T3 +
                  4.250364870000000e-13 * T4;
    // species 23: C2H3
    species[23] = +3.485984680000000e+04 * invT - 5.298073800000000e+00 -
                  3.212466450000000e+00 * logT - 7.573958100000000e-04 * T -
                  4.320156866666666e-06 * T2 + 2.980482058333333e-09 * T3 -
                  7.357543650000000e-13 * T4;
    // species 24: C2H4
    species[24] = +5.089775930000000e+03 * invT - 1.381294799999999e-01 -
                  3.959201480000000e+00 * logT + 3.785261235000000e-03 * T -
                  9.516504866666667e-06 * T2 + 5.763239608333333e-09 * T3 -
                  1.349421865000000e-12 * T4;
    // species 25: C2H5
    species[25] = +1.284162650000000e+04 * invT - 4.007435600000004e-01 -
                  4.306465680000000e+00 * logT + 2.093294460000000e-03 * T -
                  8.285713450000000e-06 * T2 + 4.992721716666666e-09 * T3 -
                  1.152545020000000e-12 * T4;
    // species 26: C2H6
    species[26] = -1.152220550000000e+04 * invT + 1.624601760000000e+00 -
                  4.291424920000000e+00 * logT + 2.750771350000000e-03 * T -
                  9.990638133333334e-06 * T2 + 5.903885708333334e-09 * T3 -
                  1.343428855000000e-12 * T4;
    // species 27: HCCO
    species[27] = +2.005944900000000e+04 * invT - 1.023869560000000e+01 -
                  2.251721400000000e+00 * logT - 8.827510500000000e-03 * T +
                  3.954850166666666e-06 * T2 - 1.439646583333334e-09 * T3 +
                  2.533240550000000e-13 * T4;
    // species 28: CH2CO
    species[28] = -7.042918040000000e+03 * invT - 1.007981170000000e+01 -
                  2.135836300000000e+00 * logT - 9.059436050000000e-03 * T +
                  2.899124566666666e-06 * T2 - 7.786646400000000e-10 * T3 +
                  1.007288075000000e-13 * T4;
    // species 29: HCCOH
    species[29] = +8.031614300000000e+03 * invT - 1.263194570000000e+01 -
                  1.242373300000000e+00 * logT - 1.553610050000000e-02 * T +
                  8.477810666666667e-06 * T2 - 3.594760916666667e-09 * T3 +
                  7.007297000000000e-13 * T4;
    // species 30: N
    species[30] = +5.610463700000000e+04 * invT - 1.693908700000000e+00 -
                  2.500000000000000e+00 * logT;
    // species 31: NH
    species[31] = +4.188062900000000e+04 * invT + 1.644580700000000e+00 -
                  3.492908500000000e+00 * logT - 1.558959900000000e-04 * T +
                  2.481747333333333e-07 * T2 - 2.068036833333333e-10 * T3 +
                  5.178483500000000e-14 * T4;
    // species 32: NH2
    species[32] = +2.188591000000000e+04 * invT + 4.345845380000000e+00 -
                  4.204002900000000e+00 * logT + 1.053069250000000e-03 * T -
                  1.184472466666667e-06 * T2 + 4.676266416666667e-10 * T3 -
                  8.220358500000000e-14 * T4;
    // species 33: NH3
    species[33] = -6.741728500000000e+03 * invT + 4.911400170000000e+00 -
                  4.286027400000000e+00 * logT + 2.330261500000000e-03 * T -
                  3.619752166666667e-06 * T2 + 1.900740583333333e-09 * T3 -
                  4.131902300000000e-13 * T4;
    // species 34: NNH
    species[34] = +2.879197300000000e+04 * invT + 1.366751700000000e+00 -
                  4.344692700000000e+00 * logT + 2.424853600000000e-03 * T -
                  3.343243166666667e-06 * T2 + 1.810538666666667e-09 * T3 -
                  3.973476950000000e-13 * T4;
    // species 35: NO
    species[35] = +9.844623000000000e+03 * invT + 1.937629900000000e+00 -
                  4.218476300000000e+00 * logT + 2.319488000000000e-03 * T -
                  1.840170333333333e-06 * T2 + 7.780112833333333e-10 * T3 -
                  1.401788500000000e-13 * T4;
    // species 36: NO2
    species[36] = +2.896617900000000e+03 * invT - 2.367960500000000e+00 -
                  3.944031200000000e+00 * logT + 7.927145000000000e-04 * T -
                  2.776302000000000e-06 * T2 + 1.706285500000000e-09 * T3 -
                  3.917528200000000e-13 * T4;
    // species 37: N2O
    species[37] = +8.741774400000000e+03 * invT - 8.500841800000000e+00 -
                  2.257150200000000e+00 * logT - 5.652364000000000e-03 * T +
                  2.278553166666666e-06 * T2 - 8.068317166666668e-10 * T3 +
                  1.465359100000000e-13 * T4;
    // species 38: HNO
    species[38] = +1.154829700000000e+04 * invT + 2.783649899999999e+00 -
                  4.533491600000000e+00 * logT + 2.834808550000000e-03 * T -
                  3.078867833333333e-06 * T2 + 1.428091166666667e-09 * T3 -
                  2.772728650000000e-13 * T4;
    // species 39: CN
    species[39] = +5.170834000000000e+04 * invT - 3.675644000000000e-01 -
                  3.612935100000000e+00 * logT + 4.777566350000000e-04 * T -
                  3.573829500000000e-07 * T2 + 2.626360250000000e-11 * T3 +
                  2.321517800000000e-14 * T4;
    // species 40: HCN
    species[40] = +1.471263300000000e+04 * invT - 6.657453300000000e+00 -
                  2.258988600000000e+00 * logT - 5.025585000000000e-03 * T +
                  2.225293833333333e-06 * T2 - 8.410290833333334e-10 * T3 +
                  1.504451400000000e-13 * T4;
    // species 41: H2CN
    species[41] = +2.863782000000000e+04 * invT - 6.141090100000000e+00 -
                  2.851661000000000e+00 * logT - 2.847616550000000e-03 * T -
                  1.785233333333333e-07 * T2 + 1.352176666666667e-10 * T3 +
                  1.175554050000000e-14 * T4;
    // species 42: HCNN
    species[42] = +5.426198400000000e+04 * invT - 9.151550600000000e+00 -
                  2.524319400000000e+00 * logT - 7.980309499999999e-03 * T +
                  3.136059000000000e-06 * T2 - 1.010461666666667e-09 * T3 +
                  1.617868900000000e-13 * T4;
    // species 46: NCO
    species[46] = +1.468247700000000e+04 * invT - 6.723533800000000e+00 -
                  2.826930800000000e+00 * logT - 4.402584400000000e-03 * T +
                  1.397768900000000e-06 * T2 - 4.001413666666666e-10 * T3 +
                  6.656797500000001e-14 * T4;
    // species 47: N2
    species[47] = -1.020899900000000e+03 * invT - 6.516950000000001e-01 -
                  3.298677000000000e+00 * logT - 7.041202000000000e-04 * T +
                  6.605369999999999e-07 * T2 - 4.701262500000001e-10 * T3 +
                  1.222427000000000e-13 * T4;
    // species 49: C3H7
    species[49] = +1.063186300000000e+04 * invT - 2.007100720000000e+01 -
                  1.051551800000000e+00 * logT - 1.299599000000000e-02 * T -
                  3.966756666666666e-07 * T2 + 1.634130750000000e-09 * T3 -
                  4.686623500000000e-13 * T4;
    // species 50: C3H8
    species[50] = -1.395852000000000e+04 * invT - 1.826813719000000e+01 -
                  9.335538100000000e-01 * logT - 1.321228950000000e-02 * T -
                  1.017662116666667e-06 * T2 + 1.831458250000000e-09 * T3 -
                  4.757462650000000e-13 * T4;
    // species 51: CH2CHO
    species[51] = +1.521476600000000e+03 * invT - 6.149227999999999e+00 -
                  3.409062000000000e+00 * logT - 5.369287000000000e-03 * T -
                  3.152486666666667e-07 * T2 + 5.965485833333333e-10 * T3 -
                  1.433692500000000e-13 * T4;
    // species 52: CH3CHO
    species[52] = -2.157287800000000e+04 * invT + 6.264436000000000e-01 -
                  4.729459500000000e+00 * logT + 1.596642900000000e-03 * T -
                  7.922486833333334e-06 * T2 + 4.788217583333333e-09 * T3 -
                  1.096555600000000e-12 * T4;
    // species 70: iC3H7
    species[70] = +9.422372400000000e+03 * invT - 1.867139710000000e+01 -
                  1.444919900000000e+00 * logT - 1.049955600000000e-02 * T -
                  1.283937033333333e-06 * T2 + 1.539687750000000e-09 * T3 -
                  3.564148100000000e-13 * T4;
    // species 71: nC3H7
    species[71] = +1.031234600000000e+04 * invT - 2.008691670000000e+01 -
                  1.049117300000000e+00 * logT - 1.300448650000000e-02 * T -
                  3.923752666666667e-07 * T2 + 1.632927666666667e-09 * T3 -
                  4.686010350000000e-13 * T4;
  } else {
    // species 0: H2
    species[0] = -9.501589220000000e+02 * invT + 6.542302510000000e+00 -
                 3.337279200000000e+00 * logT + 2.470123655000000e-05 * T -
                 8.324279633333333e-08 * T2 + 1.496386616666667e-11 * T3 -
                 1.001276880000000e-15 * T4;
    // species 1: H
    species[1] = +2.547365990000000e+04 * invT + 2.946682924000000e+00 -
                 2.500000010000000e+00 * logT + 1.154214865000000e-11 * T -
                 2.692699133333334e-15 * T2 + 3.945960291666667e-19 * T3 -
                 2.490986785000000e-23 * T4;
    // species 2: O
    species[2] = +2.921757910000000e+04 * invT - 2.214917859999999e+00 -
                 2.569420780000000e+00 * logT + 4.298705685000000e-05 * T -
                 6.991409816666667e-09 * T2 + 8.348149916666666e-13 * T3 -
                 6.141684549999999e-17 * T4;
    // species 3: O2
    species[3] = -1.088457720000000e+03 * invT - 2.170693450000000e+00 -
                 3.282537840000000e+00 * logT - 7.415437700000000e-04 * T +
                 1.263277781666667e-07 * T2 - 1.745587958333333e-11 * T3 +
                 1.083588970000000e-15 * T4;
    // species 4: OH
    species[4] = +3.858657000000000e+03 * invT - 1.383808430000000e+00 -
                 3.092887670000000e+00 * logT - 2.742148580000000e-04 * T -
                 2.108420466666667e-08 * T2 + 7.328846300000000e-12 * T3 -
                 5.870618800000000e-16 * T4;
    // species 5: H2O
    species[5] = -3.000429710000000e+04 * invT - 1.932777610000000e+00 -
                 3.033992490000000e+00 * logT - 1.088459020000000e-03 * T +
                 2.734541966666666e-08 * T2 + 8.086832250000000e-12 * T3 -
                 8.410049600000000e-16 * T4;
    // species 6: HO2
    species[6] = +1.118567130000000e+02 * invT + 2.321087500000001e-01 -
                 4.017210900000000e+00 * logT - 1.119910065000000e-03 * T +
                 1.056096916666667e-07 * T2 - 9.520530833333334e-12 * T3 +
                 5.395426750000000e-16 * T4;
    // species 7: H2O2
    species[7] = -1.786178770000000e+04 * invT + 1.248846229999999e+00 -
                 4.165002850000000e+00 * logT - 2.454158470000000e-03 * T +
                 3.168987083333333e-07 * T2 - 3.093216550000000e-11 * T3 +
                 1.439541525000000e-15 * T4;
    // species 8: C
    species[8] = +8.545129530000000e+04 * invT - 2.308834850000000e+00 -
                 2.492668880000000e+00 * logT - 2.399446420000000e-05 * T +
                 1.207225033333333e-08 * T2 - 3.119091908333333e-12 * T3 +
                 2.436389465000000e-16 * T4;
    // species 9: CH
    species[9] = +7.101243640000001e+04 * invT - 2.606515260000000e+00 -
                 2.878464730000000e+00 * logT - 4.854568405000000e-04 * T -
                 2.407427583333333e-08 * T2 + 1.089065408333333e-11 * T3 -
                 8.803969149999999e-16 * T4;
    // species 10: CH2
    species[10] = +4.626360400000000e+04 * invT - 3.297092110000000e+00 -
                  2.874101130000000e+00 * logT - 1.828196460000000e-03 * T +
                  2.348243283333333e-07 * T2 - 2.168162908333333e-11 * T3 +
                  9.386378350000000e-16 * T4;
    // species 11: CH2(S)
    species[11] = +5.092599970000000e+04 * invT - 6.334463270000000e+00 -
                  2.292038420000000e+00 * logT - 2.327943185000000e-03 * T +
                  3.353199116666667e-07 * T2 - 3.482550000000000e-11 * T3 +
                  1.698581825000000e-15 * T4;
    // species 12: CH3
    species[12] = +1.677558430000000e+04 * invT - 6.194354070000000e+00 -
                  2.285717720000000e+00 * logT - 3.619950185000000e-03 * T +
                  4.978572466666667e-07 * T2 - 4.964038700000000e-11 * T3 +
                  2.335771970000000e-15 * T4;
    // species 13: CH4
    species[13] = -9.468344590000001e+03 * invT - 1.836246650500000e+01 -
                  7.485149500000000e-02 * logT - 6.695473350000000e-03 * T +
                  9.554763483333333e-07 * T2 - 1.019104458333333e-10 * T3 +
                  5.090761500000000e-15 * T4;
    // species 14: CO
    species[14] = -1.415187240000000e+04 * invT - 5.103502110000000e+00 -
                  2.715185610000000e+00 * logT - 1.031263715000000e-03 * T +
                  1.664709618333334e-07 * T2 - 1.917108400000000e-11 * T3 +
                  1.018238580000000e-15 * T4;
    // species 15: CO2
    species[15] = -4.875916600000000e+04 * invT + 1.585822230000000e+00 -
                  3.857460290000000e+00 * logT - 2.207185130000000e-03 * T +
                  3.691356733333334e-07 * T2 - 4.362418233333334e-11 * T3 +
                  2.360420820000000e-15 * T4;
    // species 16: HCO
    species[16] = +4.011918150000000e+03 * invT - 7.026170540000000e+00 -
                  2.772174380000000e+00 * logT - 2.478477630000000e-03 * T +
                  4.140760216666667e-07 * T2 - 4.909681483333334e-11 * T3 +
                  2.667543555000000e-15 * T4;
    // species 17: CH2O
    species[17] = -1.399583230000000e+04 * invT - 1.189563292000000e+01 -
                  1.760690080000000e+00 * logT - 4.600000410000000e-03 * T +
                  7.370980216666666e-07 * T2 - 8.386767666666666e-11 * T3 +
                  4.419278200000001e-15 * T4;
    // species 18: CH2OH
    species[18] = -3.242506270000000e+03 * invT - 2.117766459999999e+00 -
                  3.692665690000000e+00 * logT - 4.322883985000000e-03 * T +
                  6.251685333333334e-07 * T2 - 6.560288633333334e-11 * T3 +
                  3.242771005000000e-15 * T4;
    // species 19: CH3O
    species[19] = +1.278325200000000e+02 * invT + 8.412240000000000e-01 -
                  3.770799000000000e+00 * logT - 3.935748500000000e-03 * T +
                  4.427306666666667e-07 * T2 - 3.287025833333333e-11 * T3 +
                  1.056308000000000e-15 * T4;
    // species 20: CH3OH
    species[20] = -2.537487470000000e+04 * invT - 1.271265439000000e+01 -
                  1.789707910000000e+00 * logT - 7.046914600000000e-03 * T +
                  1.060834725000000e-06 * T2 - 1.151425708333333e-10 * T3 +
                  5.853011000000000e-15 * T4;
    // species 21: C2H
    species[21] = +6.712106500000000e+04 * invT - 3.468088230000000e+00 -
                  3.167806520000000e+00 * logT - 2.376109510000000e-03 * T +
                  3.063117950000000e-07 * T2 - 2.534918766666666e-11 * T3 +
                  8.861638500000000e-16 * T4;
    // species 22: C2H2
    species[22] = +2.593599920000000e+04 * invT + 5.377850850000001e+00 -
                  4.147569640000000e+00 * logT - 2.980833320000000e-03 * T +
                  3.954914200000000e-07 * T2 - 3.895101425000000e-11 * T3 +
                  1.806176065000000e-15 * T4;
    // species 23: C2H3
    species[23] = +3.461287390000000e+04 * invT - 4.770599780000000e+00 -
                  3.016724000000000e+00 * logT - 5.165114600000000e-03 * T +
                  7.801372483333333e-07 * T2 - 8.480274000000000e-11 * T3 +
                  4.313035205000000e-15 * T4;
    // species 24: C2H4
    species[24] = +4.939886140000000e+03 * invT - 8.269258140000002e+00 -
                  2.036111160000000e+00 * logT - 7.322707550000000e-03 * T +
                  1.118463191666667e-06 * T2 - 1.226857691666667e-10 * T3 +
                  6.285303050000000e-15 * T4;
    // species 25: C2H5
    species[25] = +1.285752000000000e+04 * invT - 1.150777788000000e+01 -
                  1.954656420000000e+00 * logT - 8.698636100000001e-03 * T +
                  1.330344446666667e-06 * T2 - 1.460147408333333e-10 * T3 +
                  7.482078800000000e-15 * T4;
    // species 26: C2H6
    species[26] = -1.142639320000000e+04 * invT - 1.404372920000000e+01 -
                  1.071881500000000e+00 * logT - 1.084263385000000e-02 * T +
                  1.670934450000000e-06 * T2 - 1.845100008333333e-10 * T3 +
                  9.500144500000000e-15 * T4;
    // species 27: HCCO
    species[27] = +1.932721500000000e+04 * invT + 9.558465300000000e+00 -
                  5.628205800000000e+00 * logT - 2.042670050000000e-03 * T +
                  2.655757833333333e-07 * T2 - 2.385504333333333e-11 * T3 +
                  9.703915999999999e-16 * T4;
    // species 28: CH2CO
    species[28] = -7.551053110000000e+03 * invT + 3.879050115000000e+00 -
                  4.511297320000000e+00 * logT - 4.501798725000000e-03 * T +
                  6.948993916666666e-07 * T2 - 7.694549016666667e-11 * T3 +
                  3.974191005000000e-15 * T4;
    // species 29: HCCOH
    species[29] = +7.264626000000000e+03 * invT + 1.352560330000000e+01 -
                  5.923829100000000e+00 * logT - 3.396180000000000e-03 * T +
                  4.276427333333333e-07 * T2 - 3.748986750000000e-11 * T3 +
                  1.497005050000000e-15 * T4;
    // species 30: N
    species[30] = +5.613377300000000e+04 * invT - 2.233666700000000e+00 -
                  2.415942900000000e+00 * logT - 8.744532500000000e-05 * T +
                  1.983728166666667e-08 * T2 - 2.518853750000000e-12 * T3 +
                  1.018049100000000e-16 * T4;
    // species 31: NH
    species[31] = +4.212084800000000e+04 * invT - 2.957087100000000e+00 -
                  2.783692800000000e+00 * logT - 6.649215000000000e-04 * T +
                  7.079674500000000e-08 * T2 - 6.529041750000000e-12 * T3 +
                  2.752223500000000e-16 * T4;
    // species 32: NH2
    species[32] = +2.217195700000000e+04 * invT - 3.685674200000000e+00 -
                  2.834742100000000e+00 * logT - 1.603654100000000e-03 * T +
                  1.556513400000000e-07 * T2 - 1.141912750000000e-11 * T3 +
                  3.960307200000000e-16 * T4;
    // species 33: NH3
    species[33] = -6.544695800000000e+03 * invT - 3.931840700000000e+00 -
                  2.634452100000000e+00 * logT - 2.833128000000000e-03 * T +
                  2.879779333333333e-07 * T2 - 1.988930083333333e-11 * T3 +
                  6.289392999999999e-16 * T4;
    // species 34: NNH
    species[34] = +2.865069700000000e+04 * invT - 7.037522999999997e-01 -
                  3.766754400000000e+00 * logT - 1.445754100000000e-03 * T +
                  1.736103333333333e-07 * T2 - 1.403549500000000e-11 * T3 +
                  5.045948000000000e-16 * T4;
    // species 35: NO
    species[35] = +9.920974600000000e+03 * invT - 3.108697100000001e+00 -
                  3.260605600000000e+00 * logT - 5.955521500000000e-04 * T +
                  7.152841333333333e-08 * T2 - 5.788139083333334e-12 * T3 +
                  2.016804950000000e-16 * T4;
    // species 36: NO2
    species[36] = +2.316498300000000e+03 * invT + 5.002171150000000e+00 -
                  4.884754200000000e+00 * logT - 1.086197800000000e-03 * T +
                  1.380115100000000e-07 * T2 - 1.312292500000000e-11 * T3 +
                  5.255447500000000e-16 * T4;
    // species 37: N2O
    species[37] = +8.073404800000000e+03 * invT + 7.024793600000000e+00 -
                  4.823072900000000e+00 * logT - 1.313512550000000e-03 * T +
                  1.597514566666667e-07 * T2 - 1.333392666666667e-11 * T3 +
                  4.887615150000000e-16 * T4;
    // species 38: HNO
    species[38] = +1.175058200000000e+04 * invT - 5.627121900000001e+00 -
                  2.979250900000000e+00 * logT - 1.747202950000000e-03 * T +
                  1.309162966666667e-07 * T2 - 4.789966166666667e-12 * T3 +
                  9.667958000000000e-18 * T4;
    // species 39: CN
    species[39] = +5.153618800000000e+04 * invT + 9.592204000000000e-01 -
                  3.745980500000000e+00 * logT - 2.172538750000000e-05 * T -
                  4.950997333333333e-08 * T2 + 5.720983833333333e-12 * T3 -
                  2.206708650000000e-16 * T4;
    // species 40: HCN
    species[40] = +1.440729200000000e+04 * invT + 2.226779100000000e+00 -
                  3.802239200000000e+00 * logT - 1.573211400000000e-03 * T +
                  1.772030833333333e-07 * T2 - 1.384979750000000e-11 * T3 +
                  4.899878500000000e-16 * T4;
    // species 41: H2CN
    species[41] = +2.767710900000000e+04 * invT + 9.654181000000001e+00 -
                  5.209703000000000e+00 * logT - 1.484645550000000e-03 * T +
                  4.759315166666666e-08 * T2 + 1.362958333333333e-11 * T3 -
                  1.521629450000000e-15 * T4;
    // species 42: HCNN
    species[42] = +5.345294100000000e+04 * invT + 1.099768640000000e+01 -
                  5.894636200000000e+00 * logT - 1.994797950000000e-03 * T +
                  2.663730000000000e-07 * T2 - 2.437449583333333e-11 * T3 +
                  1.004734300000000e-15 * T4;
    // species 46: NCO
    species[46] = +1.400412300000000e+04 * invT + 7.696450499999999e+00 -
                  5.152184500000000e+00 * logT - 1.152588050000000e-03 * T +
                  1.467219216666667e-07 * T2 - 1.232424833333333e-11 * T3 +
                  4.548899800000000e-16 * T4;
    // species 47: N2
    species[47] = -9.227977000000000e+02 * invT - 3.053888000000000e+00 -
                  2.926640000000000e+00 * logT - 7.439884000000000e-04 * T +
                  9.474600000000001e-08 * T2 - 8.414198333333333e-12 * T3 +
                  3.376675500000000e-16 * T4;
    // species 49: C3H7
    species[49] = +8.298433600000000e+03 * invT + 2.318287870000000e+01 -
                  7.702698700000000e+00 * logT - 8.022101500000000e-03 * T +
                  8.805536666666666e-07 * T2 - 6.358215833333333e-11 * T3 +
                  1.969614200000000e-15 * T4;
    // species 50: C3H8
    species[50] = -1.646751600000000e+04 * invT + 2.542648580000000e+01 -
                  7.534136800000000e+00 * logT - 9.436119499999999e-03 * T +
                  1.045308183333333e-06 * T2 - 7.622970750000001e-11 * T3 +
                  2.391903450000000e-15 * T4;
    // species 51: CH2CHO
    species[51] = +4.903218000000000e+02 * invT + 1.102092100000000e+01 -
                  5.975670000000000e+00 * logT - 4.065295500000000e-03 * T +
                  4.572706666666667e-07 * T2 - 3.391920000000000e-11 * T3 +
                  1.088008500000000e-15 * T4;
    // species 52: CH3CHO
    species[52] = -2.259312200000000e+04 * invT + 8.884902499999999e+00 -
                  5.404110800000000e+00 * logT - 5.861529500000000e-03 * T +
                  7.043856166666666e-07 * T2 - 5.697704250000000e-11 * T3 +
                  2.049243150000000e-15 * T4;
    // species 70: iC3H7
    species[70] = +7.322719300000000e+03 * invT + 1.560229560000000e+01 -
                  6.519274100000000e+00 * logT - 8.610052000000000e-03 * T +
                  9.560702833333334e-07 * T2 - 7.010894333333333e-11 * T3 +
                  2.228295650000000e-15 * T4;
    // species 71: nC3H7
    species[71] = +7.976223600000000e+03 * invT + 2.322504490000000e+01 -
                  7.709747900000000e+00 * logT - 8.015742500000001e-03 * T +
                  8.786706333333332e-07 * T2 - 6.324029333333334e-11 * T3 +
                  1.943135950000000e-15 * T4;
  }

  // species with midpoint at T=1100 kelvin
  if (T < 1100) {
    // species 56: CH3F
    species[56] = -2.900680800000000e+04 * invT - 7.886030400000000e+00 -
                  2.596236600000000e+00 * logT - 1.826584700000000e-03 * T -
                  2.183871833333333e-06 * T2 + 1.211082416666667e-09 * T3 -
                  2.240071350000000e-13 * T4;
    // species 57: CH2F2
    species[57] = -5.543968400000000e+04 * invT - 1.449523560000000e+01 -
                  1.739005400000000e+00 * logT - 5.968962500000000e-03 * T +
                  4.488681833333333e-08 * T2 + 4.599112750000000e-10 * T3 -
                  1.090677450000000e-13 * T4;
    // species 65: CF
    species[65] = +2.790774300000000e+04 * invT - 2.980791800000000e+00 -
                  3.353839100000000e+00 * logT - 1.045485150000000e-04 * T -
                  5.346238499999999e-07 * T2 + 3.057294750000000e-10 * T3 -
                  5.993155499999999e-14 * T4;
  } else {
    // species 56: CH3F
    species[56] = -2.942714600000000e+04 * invT - 5.779056700000000e+00 -
                  2.644000900000000e+00 * logT - 4.986253850000000e-03 * T +
                  6.641620833333333e-07 * T2 - 6.042896833333333e-11 * T3 +
                  2.442199800000000e-15 * T4;
    // species 57: CH2F2
    species[57] = -5.650622100000000e+04 * invT + 4.121861700000000e+00 -
                  4.558498400000000e+00 * logT - 4.159893950000000e-03 * T +
                  5.619283000000000e-07 * T2 - 5.156640583333333e-11 * T3 +
                  2.097577150000000e-15 * T4;
    // species 65: CF
    species[65] = +2.772417700000000e+04 * invT - 6.166671999999997e-01 -
                  3.664967800000000e+00 * logT - 4.868403200000000e-04 * T +
                  6.849706000000000e-08 * T2 - 6.671906250000001e-12 * T3 +
                  2.824903400000000e-16 * T4;
  }

  // species with midpoint at T=1150 kelvin
  if (T < 1150) {
    // species 55: F2
    species[55] = -9.808012800000000e+02 * invT - 5.157040900000000e+00 -
                  2.669550400000000e+00 * logT - 2.647092300000000e-03 * T +
                  1.078484916666667e-06 * T2 - 3.265278916666666e-10 * T3 +
                  4.692256750000001e-14 * T4;
    // species 61: CHF2
    species[61] = -3.085705600000000e+04 * invT - 1.492611970000000e+01 -
                  1.832763300000000e+00 * logT - 6.708190000000000e-03 * T +
                  1.590547300000000e-06 * T2 - 2.466080666666667e-10 * T3 +
                  1.395999600000000e-14 * T4;
    // species 67: CF2O
    species[67] = -7.795130300000000e+04 * invT - 1.793722840000000e+01 -
                  1.176138600000000e+00 * logT - 1.054349400000000e-02 * T +
                  3.986928500000000e-06 * T2 - 1.166242750000000e-09 * T3 +
                  1.688026800000000e-13 * T4;
    // species 68: CHFO
    species[68] = -4.635670500000000e+04 * invT - 1.253393650000000e+01 -
                  2.118497500000000e+00 * logT - 5.386994000000000e-03 * T +
                  9.193027166666666e-07 * T2 - 4.845994333333334e-11 * T3 -
                  1.085210450000000e-14 * T4;
  } else {
    // species 55: F2
    species[55] = -1.324386000000000e+03 * invT + 3.194528340000000e+00 -
                  4.057742000000000e+00 * logT - 3.000168800000000e-04 * T +
                  3.653631166666666e-08 * T2 - 3.595896416666667e-12 * T3 +
                  1.562942100000000e-16 * T4;
    // species 61: CHF2
    species[61] = -3.196095000000000e+04 * invT + 7.742833900000000e+00 -
                  5.448281400000000e+00 * logT - 2.205827000000000e-03 * T +
                  2.903143000000000e-07 * T2 - 2.576663250000000e-11 * T3 +
                  1.008809400000000e-15 * T4;
    // species 67: CF2O
    species[67] = -7.945397700000000e+04 * invT + 1.627442960000000e+01 -
                  6.791310300000000e+00 * logT - 1.691527100000000e-03 * T +
                  2.383528833333333e-07 * T2 - 2.260214333333333e-11 * T3 +
                  9.526190499999999e-16 * T4;
    // species 68: CHFO
    species[68] = -4.726307800000000e+04 * invT + 4.722029481000000e+00 -
                  4.819254600000000e+00 * logT - 2.527091150000000e-03 * T +
                  3.357019499999999e-07 * T2 - 3.029923750000000e-11 * T3 +
                  1.223620350000000e-15 * T4;
  }

  // species with midpoint at T=1250 kelvin
  if (T < 1250) {
    // species 53: HF
    species[53] = -3.380008900000000e+04 * invT + 2.229755500000000e+00 -
                  3.436573900000000e+00 * logT - 2.430103600000000e-04 * T +
                  2.087328500000000e-07 * T2 - 1.137291666666667e-10 * T3 +
                  2.047870200000000e-14 * T4;
    // species 59: CF4
    species[59] = -1.135036100000000e+05 * invT - 2.087207747000000e+01 -
                  3.295735300000000e-01 * logT - 1.663480150000000e-02 * T +
                  6.471117666666667e-06 * T2 - 1.838278916666667e-09 * T3 +
                  2.474186650000000e-13 * T4;
    // species 62: CF3
    species[62] = -5.739127300000000e+04 * invT - 1.729008890000000e+01 -
                  1.357287100000000e+00 * logT - 1.078790250000000e-02 * T +
                  3.983663666666666e-06 * T2 - 1.080092416666667e-09 * T3 +
                  1.400865750000000e-13 * T4;
    // species 66: CF3O
    species[66] = -8.033690200000000e+04 * invT - 1.834035420000000e+01 -
                  1.387239800000000e+00 * logT - 1.494777000000000e-02 * T +
                  5.712416000000000e-06 * T2 - 1.598380833333333e-09 * T3 +
                  2.124796750000000e-13 * T4;
    // species 69: CFO
    species[69] = -2.179225500000000e+04 * invT - 8.228300000000001e+00 -
                  2.940608000000000e+00 * logT - 3.735458400000000e-03 * T +
                  1.036388600000000e-06 * T2 - 2.190969583333333e-10 * T3 +
                  2.366109400000000e-14 * T4;
  } else {
    // species 53: HF
    species[53] = -3.350417400000000e+04 * invT - 2.238403100000000e+00 -
                  2.781298100000000e+00 * logT - 5.197954000000000e-04 * T +
                  4.028925000000000e-08 * T2 - 2.236799166666667e-12 * T3 +
                  5.488318500000000e-17 * T4;
    // species 59: CF4
    species[59] = -1.160249900000000e+05 * invT + 3.680855230000000e+01 -
                  9.808315300000000e+00 * logT - 1.641346500000000e-03 * T +
                  2.234080666666667e-07 * T2 - 2.031152416666667e-11 * T3 +
                  8.143079000000000e-16 * T4;
    // species 62: CF3
    species[62] = -5.914567500000000e+04 * invT + 2.175186370000000e+01 -
                  7.731670700000000e+00 * logT - 1.135573200000000e-03 * T +
                  1.484160666666666e-07 * T2 - 1.274486166666667e-11 * T3 +
                  4.754187900000000e-16 * T4;
    // species 66: CF3O
    species[66] = -8.258658199999999e+04 * invT + 3.301752340000000e+01 -
                  9.820408400000000e+00 * logT - 1.694579150000000e-03 * T +
                  2.410898166666667e-07 * T2 - 2.308014166666667e-11 * T3 +
                  9.779017000000001e-16 * T4;
    // species 69: CFO
    species[69] = -2.248837200000000e+04 * invT + 5.646793700000000e+00 -
                  5.149963700000000e+00 * logT - 9.246923500000000e-04 * T +
                  1.233719783333333e-07 * T2 - 1.106541583333333e-11 * T3 +
                  4.415299850000000e-16 * T4;
  }

  // species with midpoint at T=1300 kelvin
  if (T < 1300) {
    // species 58: CHF3
    species[58] = -8.498941600000000e+04 * invT - 2.038098371000000e+01 -
                  6.807582900000000e-01 * logT - 1.199295500000000e-02 * T +
                  3.638933000000000e-06 * T2 - 8.316880666666667e-10 * T3 +
                  9.258950500000001e-14 * T4;
    // species 60: CH2F
    species[60] = -4.957418600000000e+03 * invT - 1.122138150000000e+01 -
                  2.117974500000000e+00 * logT - 5.119635000000000e-03 * T +
                  1.103481533333333e-06 * T2 - 1.982141916666667e-10 * T3 +
                  1.946679350000000e-14 * T4;
    // species 63: CHF
    species[63] = +1.851401400000000e+04 * invT - 3.708020900000000e+00 -
                  3.344838800000000e+00 * logT - 1.177302600000000e-03 * T -
                  3.233048833333333e-07 * T2 + 2.210421416666667e-10 * T3 -
                  3.955846850000000e-14 * T4;
    // species 64: CF2
    species[64] = -2.352118300000000e+04 * invT - 1.084885970000000e+01 -
                  2.285913300000000e+00 * logT - 5.380393000000000e-03 * T +
                  1.756366833333333e-06 * T2 - 4.082344833333333e-10 * T3 +
                  4.431921400000000e-14 * T4;
  } else {
    // species 58: CHF3
    species[58] = -8.702250800000000e+04 * invT + 2.213535990000000e+01 -
                  7.524168900000000e+00 * logT - 2.615023600000000e-03 * T +
                  3.393338666666667e-07 * T2 - 2.977463000000000e-11 * T3 +
                  1.154986350000000e-15 * T4;
    // species 60: CH2F
    species[60] = -5.592767800000000e+03 * invT + 1.046342300000001e+00 -
                  4.060130100000000e+00 * logT - 2.733211450000000e-03 * T +
                  3.515823166666667e-07 * T2 - 3.120484250000000e-11 * T3 +
                  1.237000300000000e-15 * T4;
    // species 63: CHF
    species[63] = +1.795812300000000e+04 * invT + 4.194434700000000e+00 -
                  4.483657000000000e+00 * logT - 8.748176500000000e-04 * T +
                  8.413170833333334e-08 * T2 - 9.079387500000000e-12 * T3 +
                  4.939491150000000e-16 * T4;
    // species 64: CF2
    species[64] = -2.437137000000000e+04 * invT + 7.894878400000000e+00 -
                  5.331206600000000e+00 * logT - 9.887419000000001e-04 * T +
                  1.600413183333333e-07 * T2 - 1.755864083333333e-11 * T3 +
                  7.976988500000000e-16 * T4;
  }

  // species with midpoint at T=1368 kelvin
  if (T < 1368) {
    // species 44: HOCN
    species[44] = -2.826984000000000e+03 * invT - 1.846872100000000e+00 -
                  3.786049520000000e+00 * logT - 3.443339610000000e-03 * T +
                  5.358131066666666e-07 * T2 - 4.309964725000000e-11 * T3 -
                  5.968039400000000e-16 * T4;
  } else {
    // species 44: HOCN
    species[44] = -3.706533310000000e+03 * invT + 1.207952710000000e+01 -
                  5.897848850000000e+00 * logT - 1.583946965000000e-03 * T +
                  1.863351066666667e-07 * T2 - 1.477026200000000e-11 * T3 +
                  5.216958849999999e-16 * T4;
  }

  // species with midpoint at T=1382 kelvin
  if (T < 1382) {
    // species 43: HCNO
    species[43] = +1.929902520000000e+04 * invT - 8.086017310000001e+00 -
                  2.647279890000000e+00 * logT - 6.375267100000000e-03 * T +
                  1.746570600000000e-06 * T2 - 3.678606966666667e-10 * T3 +
                  3.787607330000000e-14 * T4;
  } else {
    // species 43: HCNO
    species[43] = +1.796613390000000e+04 * invT + 1.692926446000000e+01 -
                  6.598604560000000e+00 * logT - 1.513893130000000e-03 * T +
                  1.795072433333333e-07 * T2 - 1.430554400000000e-11 * T3 +
                  5.071969550000000e-16 * T4;
  }

  // species with midpoint at T=1400 kelvin
  if (T < 1400) {
    // species 54: F
    species[54] = +8.672269200000001e+03 * invT + 1.954276000000004e-01 -
                  2.903707600000000e+00 * logT + 3.176481600000000e-04 * T -
                  4.412247833333334e-08 * T2 - 6.408858833333333e-12 * T3 +
                  2.726267750000000e-15 * T4;
  } else {
    // species 54: F
    species[54] = +8.758290100000000e+03 * invT - 1.427408199999999e+00 -
                  2.651166100000000e+00 * logT + 7.006485500000000e-05 * T -
                  8.653940500000000e-09 * T2 + 7.374620416666666e-13 * T3 -
                  2.951400700000000e-17 * T4;
  }

  // species with midpoint at T=1478 kelvin
  if (T < 1478) {
    // species 45: HNCO
    species[45] = -1.558736360000000e+04 * invT - 2.563614100000000e+00 -
                  3.630963170000000e+00 * logT - 3.651411785000000e-03 * T +
                  3.800833383333333e-07 * T2 + 5.510594150000000e-11 * T3 -
                  1.811178760000000e-14 * T4;
  } else {
    // species 45: HNCO
    species[45] = -1.665993440000000e+04 * invT + 1.460619875000000e+01 -
                  6.223951340000000e+00 * logT - 1.589320020000000e-03 * T +
                  1.822979250000000e-07 * T2 - 1.422793025000000e-11 * T3 +
                  4.975109775000000e-16 * T4;
  }
}

// compute the a/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
helmholtz(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);

  // species with no change across T
  // species 48: AR
  species[48] = -7.45375000e+02 * invT - 2.86600000e+00 - 2.50000000e+00 * logT;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = -9.17935173e+02 * invT + 6.61320882e-01 -
                 2.34433112e+00 * logT - 3.99026037e-03 * T +
                 3.24635850e-06 * T2 - 1.67976745e-09 * T3 +
                 3.68805881e-13 * T4;
    // species 1: H
    species[1] = +2.54736599e+04 * invT + 1.94668285e+00 -
                 2.50000000e+00 * logT - 3.52666409e-13 * T +
                 3.32653273e-16 * T2 - 1.91734693e-19 * T3 +
                 4.63866166e-23 * T4;
    // species 2: O
    species[2] = +2.91222592e+04 * invT + 1.16333640e-01 -
                 3.16826710e+00 * logT + 1.63965942e-03 * T -
                 1.10717733e-06 * T2 + 5.10672187e-10 * T3 -
                 1.05632985e-13 * T4;
    // species 3: O2
    species[3] = -1.06394356e+03 * invT - 8.75219370e-01 -
                 3.78245636e+00 * logT + 1.49836708e-03 * T -
                 1.64121700e-06 * T2 + 8.06774591e-10 * T3 -
                 1.62186418e-13 * T4;
    // species 4: OH
    species[4] = +3.61508056e+03 * invT + 3.09594089e+00 -
                 3.99201543e+00 * logT + 1.20065876e-03 * T -
                 7.69656402e-07 * T2 + 3.23427778e-10 * T3 -
                 6.82057350e-14 * T4;
    // species 5: H2O
    species[5] = -3.02937267e+04 * invT + 4.04767277e+00 -
                 4.19864056e+00 * logT + 1.01821705e-03 * T -
                 1.08673369e-06 * T2 + 4.57330885e-10 * T3 -
                 8.85989085e-14 * T4;
    // species 6: HO2
    species[6] = +2.94808040e+02 * invT - 4.14864440e-01 -
                 4.30179801e+00 * logT + 2.37456025e-03 * T -
                 3.52638152e-06 * T2 + 2.02303245e-09 * T3 -
                 4.64612562e-13 * T4;
    // species 7: H2O2
    species[7] = -1.77025821e+04 * invT - 1.58938050e-01 -
                 4.27611269e+00 * logT + 2.71411208e-04 * T -
                 2.78892835e-06 * T2 + 1.79809011e-09 * T3 -
                 4.31227182e-13 * T4;
    // species 8: C
    species[8] = +8.54438832e+04 * invT - 2.97706893e+00 -
                 2.55423955e+00 * logT + 1.60768862e-04 * T -
                 1.22298707e-07 * T2 + 6.10195741e-11 * T3 -
                 1.33260723e-14 * T4;
    // species 9: CH
    species[9] = +7.07972934e+04 * invT + 4.05805570e-01 -
                 3.48981665e+00 * logT - 1.61917771e-04 * T +
                 2.81498442e-07 * T2 - 2.63514439e-10 * T3 +
                 7.03045335e-14 * T4;
    // species 10: CH2
    species[10] = +4.60040401e+04 * invT + 1.20014682e+00 -
                  3.76267867e+00 * logT - 4.84436072e-04 * T -
                  4.65816402e-07 * T2 + 3.20909294e-10 * T3 -
                  8.43708595e-14 * T4;
    // species 11: CH2(S)
    species[11] = +5.04968163e+04 * invT + 3.96772308e+00 -
                  4.19860411e+00 * logT + 1.18330710e-03 * T -
                  1.37216037e-06 * T2 + 5.57346651e-10 * T3 -
                  9.71573685e-14 * T4;
    // species 12: CH3
    species[12] = +1.64449988e+04 * invT + 1.06902607e+00 -
                  3.67359040e+00 * logT - 1.00547588e-03 * T -
                  9.55036427e-07 * T2 + 5.72597854e-10 * T3 -
                  1.27192867e-13 * T4;
    // species 13: CH4
    species[13] = -1.02466476e+04 * invT + 8.79117989e+00 -
                  5.14987613e+00 * logT + 6.83548940e-03 * T -
                  8.19667665e-06 * T2 + 4.03952522e-09 * T3 -
                  8.33469780e-13 * T4;
    // species 14: CO
    species[14] = -1.43440860e+04 * invT - 9.28875810e-01 -
                  3.57953347e+00 * logT + 3.05176840e-04 * T -
                  1.69469055e-07 * T2 - 7.55838237e-11 * T3 +
                  4.52212249e-14 * T4;
    // species 15: CO2
    species[15] = -4.83719697e+04 * invT - 8.54427870e+00 -
                  2.35677352e+00 * logT - 4.49229839e-03 * T +
                  1.18726045e-06 * T2 - 2.04932518e-10 * T3 +
                  7.18497740e-15 * T4;
    // species 16: HCO
    species[16] = +3.83956496e+03 * invT - 1.73186590e-01 -
                  4.22118584e+00 * logT + 1.62196266e-03 * T -
                  2.29665743e-06 * T2 + 1.10953411e-09 * T3 -
                  2.16884432e-13 * T4;
    // species 17: CH2O
    species[17] = -1.43089567e+04 * invT + 3.19091025e+00 -
                  4.79372315e+00 * logT + 4.95416684e-03 * T -
                  6.22033347e-06 * T2 + 3.16071051e-09 * T3 -
                  6.58863260e-13 * T4;
    // species 18: CH2OH
    species[18] = -3.19391367e+03 * invT - 2.60913325e+00 -
                  3.86388918e+00 * logT - 2.79836152e-03 * T -
                  9.88786318e-07 * T2 + 8.71100100e-10 * T3 -
                  2.18483639e-13 * T4;
    // species 19: CH3O
    species[19] = +9.78601100e+02 * invT - 1.20459730e+01 -
                  2.10620400e+00 * logT - 3.60829750e-03 * T -
                  8.89745333e-07 * T2 + 6.14803000e-10 * T3 -
                  1.03780500e-13 * T4;
    // species 20: CH3OH
    species[20] = -2.56427656e+04 * invT + 6.21949405e+00 -
                  5.71539582e+00 * logT + 7.61545645e-03 * T -
                  1.08740193e-05 * T2 + 5.92339074e-09 * T3 -
                  1.30676349e-12 * T4;
    // species 21: C2H
    species[21] = +6.68393932e+04 * invT - 4.33330705e+00 -
                  2.88965733e+00 * logT - 6.70498055e-03 * T +
                  4.74615835e-06 * T2 - 2.45659204e-09 * T3 +
                  5.46657555e-13 * T4;
    // species 22: C2H2
    species[22] = +2.64289807e+04 * invT - 1.41310240e+01 -
                  8.08681094e-01 * logT - 1.16807815e-02 * T +
                  5.91953025e-06 * T2 - 2.33460364e-09 * T3 +
                  4.25036487e-13 * T4;
    // species 23: C2H3
    species[23] = +3.48598468e+04 * invT - 6.29807380e+00 -
                  3.21246645e+00 * logT - 7.57395810e-04 * T -
                  4.32015687e-06 * T2 + 2.98048206e-09 * T3 -
                  7.35754365e-13 * T4;
    // species 24: C2H4
    species[24] = +5.08977593e+03 * invT - 1.13812948e+00 -
                  3.95920148e+00 * logT + 3.78526124e-03 * T -
                  9.51650487e-06 * T2 + 5.76323961e-09 * T3 -
                  1.34942187e-12 * T4;
    // species 25: C2H5
    species[25] = +1.28416265e+04 * invT - 1.40074356e+00 -
                  4.30646568e+00 * logT + 2.09329446e-03 * T -
                  8.28571345e-06 * T2 + 4.99272172e-09 * T3 -
                  1.15254502e-12 * T4;
    // species 26: C2H6
    species[26] = -1.15222055e+04 * invT + 6.24601760e-01 -
                  4.29142492e+00 * logT + 2.75077135e-03 * T -
                  9.99063813e-06 * T2 + 5.90388571e-09 * T3 -
                  1.34342886e-12 * T4;
    // species 27: HCCO
    species[27] = +2.00594490e+04 * invT - 1.12386956e+01 -
                  2.25172140e+00 * logT - 8.82751050e-03 * T +
                  3.95485017e-06 * T2 - 1.43964658e-09 * T3 +
                  2.53324055e-13 * T4;
    // species 28: CH2CO
    species[28] = -7.04291804e+03 * invT - 1.10798117e+01 -
                  2.13583630e+00 * logT - 9.05943605e-03 * T +
                  2.89912457e-06 * T2 - 7.78664640e-10 * T3 +
                  1.00728807e-13 * T4;
    // species 29: HCCOH
    species[29] = +8.03161430e+03 * invT - 1.36319457e+01 -
                  1.24237330e+00 * logT - 1.55361005e-02 * T +
                  8.47781067e-06 * T2 - 3.59476092e-09 * T3 +
                  7.00729700e-13 * T4;
    // species 30: N
    species[30] =
      +5.61046370e+04 * invT - 2.69390870e+00 - 2.50000000e+00 * logT;
    // species 31: NH
    species[31] = +4.18806290e+04 * invT + 6.44580700e-01 -
                  3.49290850e+00 * logT - 1.55895990e-04 * T +
                  2.48174733e-07 * T2 - 2.06803683e-10 * T3 +
                  5.17848350e-14 * T4;
    // species 32: NH2
    species[32] = +2.18859100e+04 * invT + 3.34584538e+00 -
                  4.20400290e+00 * logT + 1.05306925e-03 * T -
                  1.18447247e-06 * T2 + 4.67626642e-10 * T3 -
                  8.22035850e-14 * T4;
    // species 33: NH3
    species[33] = -6.74172850e+03 * invT + 3.91140017e+00 -
                  4.28602740e+00 * logT + 2.33026150e-03 * T -
                  3.61975217e-06 * T2 + 1.90074058e-09 * T3 -
                  4.13190230e-13 * T4;
    // species 34: NNH
    species[34] = +2.87919730e+04 * invT + 3.66751700e-01 -
                  4.34469270e+00 * logT + 2.42485360e-03 * T -
                  3.34324317e-06 * T2 + 1.81053867e-09 * T3 -
                  3.97347695e-13 * T4;
    // species 35: NO
    species[35] = +9.84462300e+03 * invT + 9.37629900e-01 -
                  4.21847630e+00 * logT + 2.31948800e-03 * T -
                  1.84017033e-06 * T2 + 7.78011283e-10 * T3 -
                  1.40178850e-13 * T4;
    // species 36: NO2
    species[36] = +2.89661790e+03 * invT - 3.36796050e+00 -
                  3.94403120e+00 * logT + 7.92714500e-04 * T -
                  2.77630200e-06 * T2 + 1.70628550e-09 * T3 -
                  3.91752820e-13 * T4;
    // species 37: N2O
    species[37] = +8.74177440e+03 * invT - 9.50084180e+00 -
                  2.25715020e+00 * logT - 5.65236400e-03 * T +
                  2.27855317e-06 * T2 - 8.06831717e-10 * T3 +
                  1.46535910e-13 * T4;
    // species 38: HNO
    species[38] = +1.15482970e+04 * invT + 1.78364990e+00 -
                  4.53349160e+00 * logT + 2.83480855e-03 * T -
                  3.07886783e-06 * T2 + 1.42809117e-09 * T3 -
                  2.77272865e-13 * T4;
    // species 39: CN
    species[39] = +5.17083400e+04 * invT - 1.36756440e+00 -
                  3.61293510e+00 * logT + 4.77756635e-04 * T -
                  3.57382950e-07 * T2 + 2.62636025e-11 * T3 +
                  2.32151780e-14 * T4;
    // species 40: HCN
    species[40] = +1.47126330e+04 * invT - 7.65745330e+00 -
                  2.25898860e+00 * logT - 5.02558500e-03 * T +
                  2.22529383e-06 * T2 - 8.41029083e-10 * T3 +
                  1.50445140e-13 * T4;
    // species 41: H2CN
    species[41] = +2.86378200e+04 * invT - 7.14109010e+00 -
                  2.85166100e+00 * logT - 2.84761655e-03 * T -
                  1.78523333e-07 * T2 + 1.35217667e-10 * T3 +
                  1.17555405e-14 * T4;
    // species 42: HCNN
    species[42] = +5.42619840e+04 * invT - 1.01515506e+01 -
                  2.52431940e+00 * logT - 7.98030950e-03 * T +
                  3.13605900e-06 * T2 - 1.01046167e-09 * T3 +
                  1.61786890e-13 * T4;
    // species 46: NCO
    species[46] = +1.46824770e+04 * invT - 7.72353380e+00 -
                  2.82693080e+00 * logT - 4.40258440e-03 * T +
                  1.39776890e-06 * T2 - 4.00141367e-10 * T3 +
                  6.65679750e-14 * T4;
    // species 47: N2
    species[47] = -1.02089990e+03 * invT - 1.65169500e+00 -
                  3.29867700e+00 * logT - 7.04120200e-04 * T +
                  6.60537000e-07 * T2 - 4.70126250e-10 * T3 +
                  1.22242700e-13 * T4;
    // species 49: C3H7
    species[49] = +1.06318630e+04 * invT - 2.10710072e+01 -
                  1.05155180e+00 * logT - 1.29959900e-02 * T -
                  3.96675667e-07 * T2 + 1.63413075e-09 * T3 -
                  4.68662350e-13 * T4;
    // species 50: C3H8
    species[50] = -1.39585200e+04 * invT - 1.92681372e+01 -
                  9.33553810e-01 * logT - 1.32122895e-02 * T -
                  1.01766212e-06 * T2 + 1.83145825e-09 * T3 -
                  4.75746265e-13 * T4;
    // species 51: CH2CHO
    species[51] = +1.52147660e+03 * invT - 7.14922800e+00 -
                  3.40906200e+00 * logT - 5.36928700e-03 * T -
                  3.15248667e-07 * T2 + 5.96548583e-10 * T3 -
                  1.43369250e-13 * T4;
    // species 52: CH3CHO
    species[52] = -2.15728780e+04 * invT - 3.73556400e-01 -
                  4.72945950e+00 * logT + 1.59664290e-03 * T -
                  7.92248683e-06 * T2 + 4.78821758e-09 * T3 -
                  1.09655560e-12 * T4;
    // species 70: iC3H7
    species[70] = +9.42237240e+03 * invT - 1.96713971e+01 -
                  1.44491990e+00 * logT - 1.04995560e-02 * T -
                  1.28393703e-06 * T2 + 1.53968775e-09 * T3 -
                  3.56414810e-13 * T4;
    // species 71: nC3H7
    species[71] = +1.03123460e+04 * invT - 2.10869167e+01 -
                  1.04911730e+00 * logT - 1.30044865e-02 * T -
                  3.92375267e-07 * T2 + 1.63292767e-09 * T3 -
                  4.68601035e-13 * T4;
  } else {
    // species 0: H2
    species[0] = -9.50158922e+02 * invT + 5.54230251e+00 -
                 3.33727920e+00 * logT + 2.47012365e-05 * T -
                 8.32427963e-08 * T2 + 1.49638662e-11 * T3 -
                 1.00127688e-15 * T4;
    // species 1: H
    species[1] = +2.54736599e+04 * invT + 1.94668292e+00 -
                 2.50000001e+00 * logT + 1.15421486e-11 * T -
                 2.69269913e-15 * T2 + 3.94596029e-19 * T3 -
                 2.49098679e-23 * T4;
    // species 2: O
    species[2] = +2.92175791e+04 * invT - 3.21491786e+00 -
                 2.56942078e+00 * logT + 4.29870569e-05 * T -
                 6.99140982e-09 * T2 + 8.34814992e-13 * T3 -
                 6.14168455e-17 * T4;
    // species 3: O2
    species[3] = -1.08845772e+03 * invT - 3.17069345e+00 -
                 3.28253784e+00 * logT - 7.41543770e-04 * T +
                 1.26327778e-07 * T2 - 1.74558796e-11 * T3 +
                 1.08358897e-15 * T4;
    // species 4: OH
    species[4] = +3.85865700e+03 * invT - 2.38380843e+00 -
                 3.09288767e+00 * logT - 2.74214858e-04 * T -
                 2.10842047e-08 * T2 + 7.32884630e-12 * T3 -
                 5.87061880e-16 * T4;
    // species 5: H2O
    species[5] = -3.00042971e+04 * invT - 2.93277761e+00 -
                 3.03399249e+00 * logT - 1.08845902e-03 * T +
                 2.73454197e-08 * T2 + 8.08683225e-12 * T3 -
                 8.41004960e-16 * T4;
    // species 6: HO2
    species[6] = +1.11856713e+02 * invT - 7.67891250e-01 -
                 4.01721090e+00 * logT - 1.11991006e-03 * T +
                 1.05609692e-07 * T2 - 9.52053083e-12 * T3 +
                 5.39542675e-16 * T4;
    // species 7: H2O2
    species[7] = -1.78617877e+04 * invT + 2.48846230e-01 -
                 4.16500285e+00 * logT - 2.45415847e-03 * T +
                 3.16898708e-07 * T2 - 3.09321655e-11 * T3 +
                 1.43954153e-15 * T4;
    // species 8: C
    species[8] = +8.54512953e+04 * invT - 3.30883485e+00 -
                 2.49266888e+00 * logT - 2.39944642e-05 * T +
                 1.20722503e-08 * T2 - 3.11909191e-12 * T3 +
                 2.43638946e-16 * T4;
    // species 9: CH
    species[9] = +7.10124364e+04 * invT - 3.60651526e+00 -
                 2.87846473e+00 * logT - 4.85456840e-04 * T -
                 2.40742758e-08 * T2 + 1.08906541e-11 * T3 -
                 8.80396915e-16 * T4;
    // species 10: CH2
    species[10] = +4.62636040e+04 * invT - 4.29709211e+00 -
                  2.87410113e+00 * logT - 1.82819646e-03 * T +
                  2.34824328e-07 * T2 - 2.16816291e-11 * T3 +
                  9.38637835e-16 * T4;
    // species 11: CH2(S)
    species[11] = +5.09259997e+04 * invT - 7.33446327e+00 -
                  2.29203842e+00 * logT - 2.32794318e-03 * T +
                  3.35319912e-07 * T2 - 3.48255000e-11 * T3 +
                  1.69858182e-15 * T4;
    // species 12: CH3
    species[12] = +1.67755843e+04 * invT - 7.19435407e+00 -
                  2.28571772e+00 * logT - 3.61995018e-03 * T +
                  4.97857247e-07 * T2 - 4.96403870e-11 * T3 +
                  2.33577197e-15 * T4;
    // species 13: CH4
    species[13] = -9.46834459e+03 * invT - 1.93624665e+01 -
                  7.48514950e-02 * logT - 6.69547335e-03 * T +
                  9.55476348e-07 * T2 - 1.01910446e-10 * T3 +
                  5.09076150e-15 * T4;
    // species 14: CO
    species[14] = -1.41518724e+04 * invT - 6.10350211e+00 -
                  2.71518561e+00 * logT - 1.03126372e-03 * T +
                  1.66470962e-07 * T2 - 1.91710840e-11 * T3 +
                  1.01823858e-15 * T4;
    // species 15: CO2
    species[15] = -4.87591660e+04 * invT + 5.85822230e-01 -
                  3.85746029e+00 * logT - 2.20718513e-03 * T +
                  3.69135673e-07 * T2 - 4.36241823e-11 * T3 +
                  2.36042082e-15 * T4;
    // species 16: HCO
    species[16] = +4.01191815e+03 * invT - 8.02617054e+00 -
                  2.77217438e+00 * logT - 2.47847763e-03 * T +
                  4.14076022e-07 * T2 - 4.90968148e-11 * T3 +
                  2.66754356e-15 * T4;
    // species 17: CH2O
    species[17] = -1.39958323e+04 * invT - 1.28956329e+01 -
                  1.76069008e+00 * logT - 4.60000041e-03 * T +
                  7.37098022e-07 * T2 - 8.38676767e-11 * T3 +
                  4.41927820e-15 * T4;
    // species 18: CH2OH
    species[18] = -3.24250627e+03 * invT - 3.11776646e+00 -
                  3.69266569e+00 * logT - 4.32288399e-03 * T +
                  6.25168533e-07 * T2 - 6.56028863e-11 * T3 +
                  3.24277101e-15 * T4;
    // species 19: CH3O
    species[19] = +1.27832520e+02 * invT - 1.58776000e-01 -
                  3.77079900e+00 * logT - 3.93574850e-03 * T +
                  4.42730667e-07 * T2 - 3.28702583e-11 * T3 +
                  1.05630800e-15 * T4;
    // species 20: CH3OH
    species[20] = -2.53748747e+04 * invT - 1.37126544e+01 -
                  1.78970791e+00 * logT - 7.04691460e-03 * T +
                  1.06083472e-06 * T2 - 1.15142571e-10 * T3 +
                  5.85301100e-15 * T4;
    // species 21: C2H
    species[21] = +6.71210650e+04 * invT - 4.46808823e+00 -
                  3.16780652e+00 * logT - 2.37610951e-03 * T +
                  3.06311795e-07 * T2 - 2.53491877e-11 * T3 +
                  8.86163850e-16 * T4;
    // species 22: C2H2
    species[22] = +2.59359992e+04 * invT + 4.37785085e+00 -
                  4.14756964e+00 * logT - 2.98083332e-03 * T +
                  3.95491420e-07 * T2 - 3.89510143e-11 * T3 +
                  1.80617607e-15 * T4;
    // species 23: C2H3
    species[23] = +3.46128739e+04 * invT - 5.77059978e+00 -
                  3.01672400e+00 * logT - 5.16511460e-03 * T +
                  7.80137248e-07 * T2 - 8.48027400e-11 * T3 +
                  4.31303520e-15 * T4;
    // species 24: C2H4
    species[24] = +4.93988614e+03 * invT - 9.26925814e+00 -
                  2.03611116e+00 * logT - 7.32270755e-03 * T +
                  1.11846319e-06 * T2 - 1.22685769e-10 * T3 +
                  6.28530305e-15 * T4;
    // species 25: C2H5
    species[25] = +1.28575200e+04 * invT - 1.25077779e+01 -
                  1.95465642e+00 * logT - 8.69863610e-03 * T +
                  1.33034445e-06 * T2 - 1.46014741e-10 * T3 +
                  7.48207880e-15 * T4;
    // species 26: C2H6
    species[26] = -1.14263932e+04 * invT - 1.50437292e+01 -
                  1.07188150e+00 * logT - 1.08426339e-02 * T +
                  1.67093445e-06 * T2 - 1.84510001e-10 * T3 +
                  9.50014450e-15 * T4;
    // species 27: HCCO
    species[27] = +1.93272150e+04 * invT + 8.55846530e+00 -
                  5.62820580e+00 * logT - 2.04267005e-03 * T +
                  2.65575783e-07 * T2 - 2.38550433e-11 * T3 +
                  9.70391600e-16 * T4;
    // species 28: CH2CO
    species[28] = -7.55105311e+03 * invT + 2.87905011e+00 -
                  4.51129732e+00 * logT - 4.50179872e-03 * T +
                  6.94899392e-07 * T2 - 7.69454902e-11 * T3 +
                  3.97419100e-15 * T4;
    // species 29: HCCOH
    species[29] = +7.26462600e+03 * invT + 1.25256033e+01 -
                  5.92382910e+00 * logT - 3.39618000e-03 * T +
                  4.27642733e-07 * T2 - 3.74898675e-11 * T3 +
                  1.49700505e-15 * T4;
    // species 30: N
    species[30] = +5.61337730e+04 * invT - 3.23366670e+00 -
                  2.41594290e+00 * logT - 8.74453250e-05 * T +
                  1.98372817e-08 * T2 - 2.51885375e-12 * T3 +
                  1.01804910e-16 * T4;
    // species 31: NH
    species[31] = +4.21208480e+04 * invT - 3.95708710e+00 -
                  2.78369280e+00 * logT - 6.64921500e-04 * T +
                  7.07967450e-08 * T2 - 6.52904175e-12 * T3 +
                  2.75222350e-16 * T4;
    // species 32: NH2
    species[32] = +2.21719570e+04 * invT - 4.68567420e+00 -
                  2.83474210e+00 * logT - 1.60365410e-03 * T +
                  1.55651340e-07 * T2 - 1.14191275e-11 * T3 +
                  3.96030720e-16 * T4;
    // species 33: NH3
    species[33] = -6.54469580e+03 * invT - 4.93184070e+00 -
                  2.63445210e+00 * logT - 2.83312800e-03 * T +
                  2.87977933e-07 * T2 - 1.98893008e-11 * T3 +
                  6.28939300e-16 * T4;
    // species 34: NNH
    species[34] = +2.86506970e+04 * invT - 1.70375230e+00 -
                  3.76675440e+00 * logT - 1.44575410e-03 * T +
                  1.73610333e-07 * T2 - 1.40354950e-11 * T3 +
                  5.04594800e-16 * T4;
    // species 35: NO
    species[35] = +9.92097460e+03 * invT - 4.10869710e+00 -
                  3.26060560e+00 * logT - 5.95552150e-04 * T +
                  7.15284133e-08 * T2 - 5.78813908e-12 * T3 +
                  2.01680495e-16 * T4;
    // species 36: NO2
    species[36] = +2.31649830e+03 * invT + 4.00217115e+00 -
                  4.88475420e+00 * logT - 1.08619780e-03 * T +
                  1.38011510e-07 * T2 - 1.31229250e-11 * T3 +
                  5.25544750e-16 * T4;
    // species 37: N2O
    species[37] = +8.07340480e+03 * invT + 6.02479360e+00 -
                  4.82307290e+00 * logT - 1.31351255e-03 * T +
                  1.59751457e-07 * T2 - 1.33339267e-11 * T3 +
                  4.88761515e-16 * T4;
    // species 38: HNO
    species[38] = +1.17505820e+04 * invT - 6.62712190e+00 -
                  2.97925090e+00 * logT - 1.74720295e-03 * T +
                  1.30916297e-07 * T2 - 4.78996617e-12 * T3 +
                  9.66795800e-18 * T4;
    // species 39: CN
    species[39] = +5.15361880e+04 * invT - 4.07796000e-02 -
                  3.74598050e+00 * logT - 2.17253875e-05 * T -
                  4.95099733e-08 * T2 + 5.72098383e-12 * T3 -
                  2.20670865e-16 * T4;
    // species 40: HCN
    species[40] = +1.44072920e+04 * invT + 1.22677910e+00 -
                  3.80223920e+00 * logT - 1.57321140e-03 * T +
                  1.77203083e-07 * T2 - 1.38497975e-11 * T3 +
                  4.89987850e-16 * T4;
    // species 41: H2CN
    species[41] = +2.76771090e+04 * invT + 8.65418100e+00 -
                  5.20970300e+00 * logT - 1.48464555e-03 * T +
                  4.75931517e-08 * T2 + 1.36295833e-11 * T3 -
                  1.52162945e-15 * T4;
    // species 42: HCNN
    species[42] = +5.34529410e+04 * invT + 9.99768640e+00 -
                  5.89463620e+00 * logT - 1.99479795e-03 * T +
                  2.66373000e-07 * T2 - 2.43744958e-11 * T3 +
                  1.00473430e-15 * T4;
    // species 46: NCO
    species[46] = +1.40041230e+04 * invT + 6.69645050e+00 -
                  5.15218450e+00 * logT - 1.15258805e-03 * T +
                  1.46721922e-07 * T2 - 1.23242483e-11 * T3 +
                  4.54889980e-16 * T4;
    // species 47: N2
    species[47] = -9.22797700e+02 * invT - 4.05388800e+00 -
                  2.92664000e+00 * logT - 7.43988400e-04 * T +
                  9.47460000e-08 * T2 - 8.41419833e-12 * T3 +
                  3.37667550e-16 * T4;
    // species 49: C3H7
    species[49] = +8.29843360e+03 * invT + 2.21828787e+01 -
                  7.70269870e+00 * logT - 8.02210150e-03 * T +
                  8.80553667e-07 * T2 - 6.35821583e-11 * T3 +
                  1.96961420e-15 * T4;
    // species 50: C3H8
    species[50] = -1.64675160e+04 * invT + 2.44264858e+01 -
                  7.53413680e+00 * logT - 9.43611950e-03 * T +
                  1.04530818e-06 * T2 - 7.62297075e-11 * T3 +
                  2.39190345e-15 * T4;
    // species 51: CH2CHO
    species[51] = +4.90321800e+02 * invT + 1.00209210e+01 -
                  5.97567000e+00 * logT - 4.06529550e-03 * T +
                  4.57270667e-07 * T2 - 3.39192000e-11 * T3 +
                  1.08800850e-15 * T4;
    // species 52: CH3CHO
    species[52] = -2.25931220e+04 * invT + 7.88490250e+00 -
                  5.40411080e+00 * logT - 5.86152950e-03 * T +
                  7.04385617e-07 * T2 - 5.69770425e-11 * T3 +
                  2.04924315e-15 * T4;
    // species 70: iC3H7
    species[70] = +7.32271930e+03 * invT + 1.46022956e+01 -
                  6.51927410e+00 * logT - 8.61005200e-03 * T +
                  9.56070283e-07 * T2 - 7.01089433e-11 * T3 +
                  2.22829565e-15 * T4;
    // species 71: nC3H7
    species[71] = +7.97622360e+03 * invT + 2.22250449e+01 -
                  7.70974790e+00 * logT - 8.01574250e-03 * T +
                  8.78670633e-07 * T2 - 6.32402933e-11 * T3 +
                  1.94313595e-15 * T4;
  }

  // species with midpoint at T=1100 kelvin
  if (T < 1100) {
    // species 56: CH3F
    species[56] = -2.90068080e+04 * invT - 8.88603040e+00 -
                  2.59623660e+00 * logT - 1.82658470e-03 * T -
                  2.18387183e-06 * T2 + 1.21108242e-09 * T3 -
                  2.24007135e-13 * T4;
    // species 57: CH2F2
    species[57] = -5.54396840e+04 * invT - 1.54952356e+01 -
                  1.73900540e+00 * logT - 5.96896250e-03 * T +
                  4.48868183e-08 * T2 + 4.59911275e-10 * T3 -
                  1.09067745e-13 * T4;
    // species 65: CF
    species[65] = +2.79077430e+04 * invT - 3.98079180e+00 -
                  3.35383910e+00 * logT - 1.04548515e-04 * T -
                  5.34623850e-07 * T2 + 3.05729475e-10 * T3 -
                  5.99315550e-14 * T4;
  } else {
    // species 56: CH3F
    species[56] = -2.94271460e+04 * invT - 6.77905670e+00 -
                  2.64400090e+00 * logT - 4.98625385e-03 * T +
                  6.64162083e-07 * T2 - 6.04289683e-11 * T3 +
                  2.44219980e-15 * T4;
    // species 57: CH2F2
    species[57] = -5.65062210e+04 * invT + 3.12186170e+00 -
                  4.55849840e+00 * logT - 4.15989395e-03 * T +
                  5.61928300e-07 * T2 - 5.15664058e-11 * T3 +
                  2.09757715e-15 * T4;
    // species 65: CF
    species[65] = +2.77241770e+04 * invT - 1.61666720e+00 -
                  3.66496780e+00 * logT - 4.86840320e-04 * T +
                  6.84970600e-08 * T2 - 6.67190625e-12 * T3 +
                  2.82490340e-16 * T4;
  }

  // species with midpoint at T=1150 kelvin
  if (T < 1150) {
    // species 55: F2
    species[55] = -9.80801280e+02 * invT - 6.15704090e+00 -
                  2.66955040e+00 * logT - 2.64709230e-03 * T +
                  1.07848492e-06 * T2 - 3.26527892e-10 * T3 +
                  4.69225675e-14 * T4;
    // species 61: CHF2
    species[61] = -3.08570560e+04 * invT - 1.59261197e+01 -
                  1.83276330e+00 * logT - 6.70819000e-03 * T +
                  1.59054730e-06 * T2 - 2.46608067e-10 * T3 +
                  1.39599960e-14 * T4;
    // species 67: CF2O
    species[67] = -7.79513030e+04 * invT - 1.89372284e+01 -
                  1.17613860e+00 * logT - 1.05434940e-02 * T +
                  3.98692850e-06 * T2 - 1.16624275e-09 * T3 +
                  1.68802680e-13 * T4;
    // species 68: CHFO
    species[68] = -4.63567050e+04 * invT - 1.35339365e+01 -
                  2.11849750e+00 * logT - 5.38699400e-03 * T +
                  9.19302717e-07 * T2 - 4.84599433e-11 * T3 -
                  1.08521045e-14 * T4;
  } else {
    // species 55: F2
    species[55] = -1.32438600e+03 * invT + 2.19452834e+00 -
                  4.05774200e+00 * logT - 3.00016880e-04 * T +
                  3.65363117e-08 * T2 - 3.59589642e-12 * T3 +
                  1.56294210e-16 * T4;
    // species 61: CHF2
    species[61] = -3.19609500e+04 * invT + 6.74283390e+00 -
                  5.44828140e+00 * logT - 2.20582700e-03 * T +
                  2.90314300e-07 * T2 - 2.57666325e-11 * T3 +
                  1.00880940e-15 * T4;
    // species 67: CF2O
    species[67] = -7.94539770e+04 * invT + 1.52744296e+01 -
                  6.79131030e+00 * logT - 1.69152710e-03 * T +
                  2.38352883e-07 * T2 - 2.26021433e-11 * T3 +
                  9.52619050e-16 * T4;
    // species 68: CHFO
    species[68] = -4.72630780e+04 * invT + 3.72202948e+00 -
                  4.81925460e+00 * logT - 2.52709115e-03 * T +
                  3.35701950e-07 * T2 - 3.02992375e-11 * T3 +
                  1.22362035e-15 * T4;
  }

  // species with midpoint at T=1250 kelvin
  if (T < 1250) {
    // species 53: HF
    species[53] = -3.38000890e+04 * invT + 1.22975550e+00 -
                  3.43657390e+00 * logT - 2.43010360e-04 * T +
                  2.08732850e-07 * T2 - 1.13729167e-10 * T3 +
                  2.04787020e-14 * T4;
    // species 59: CF4
    species[59] = -1.13503610e+05 * invT - 2.18720775e+01 -
                  3.29573530e-01 * logT - 1.66348015e-02 * T +
                  6.47111767e-06 * T2 - 1.83827892e-09 * T3 +
                  2.47418665e-13 * T4;
    // species 62: CF3
    species[62] = -5.73912730e+04 * invT - 1.82900889e+01 -
                  1.35728710e+00 * logT - 1.07879025e-02 * T +
                  3.98366367e-06 * T2 - 1.08009242e-09 * T3 +
                  1.40086575e-13 * T4;
    // species 66: CF3O
    species[66] = -8.03369020e+04 * invT - 1.93403542e+01 -
                  1.38723980e+00 * logT - 1.49477700e-02 * T +
                  5.71241600e-06 * T2 - 1.59838083e-09 * T3 +
                  2.12479675e-13 * T4;
    // species 69: CFO
    species[69] = -2.17922550e+04 * invT - 9.22830000e+00 -
                  2.94060800e+00 * logT - 3.73545840e-03 * T +
                  1.03638860e-06 * T2 - 2.19096958e-10 * T3 +
                  2.36610940e-14 * T4;
  } else {
    // species 53: HF
    species[53] = -3.35041740e+04 * invT - 3.23840310e+00 -
                  2.78129810e+00 * logT - 5.19795400e-04 * T +
                  4.02892500e-08 * T2 - 2.23679917e-12 * T3 +
                  5.48831850e-17 * T4;
    // species 59: CF4
    species[59] = -1.16024990e+05 * invT + 3.58085523e+01 -
                  9.80831530e+00 * logT - 1.64134650e-03 * T +
                  2.23408067e-07 * T2 - 2.03115242e-11 * T3 +
                  8.14307900e-16 * T4;
    // species 62: CF3
    species[62] = -5.91456750e+04 * invT + 2.07518637e+01 -
                  7.73167070e+00 * logT - 1.13557320e-03 * T +
                  1.48416067e-07 * T2 - 1.27448617e-11 * T3 +
                  4.75418790e-16 * T4;
    // species 66: CF3O
    species[66] = -8.25865820e+04 * invT + 3.20175234e+01 -
                  9.82040840e+00 * logT - 1.69457915e-03 * T +
                  2.41089817e-07 * T2 - 2.30801417e-11 * T3 +
                  9.77901700e-16 * T4;
    // species 69: CFO
    species[69] = -2.24883720e+04 * invT + 4.64679370e+00 -
                  5.14996370e+00 * logT - 9.24692350e-04 * T +
                  1.23371978e-07 * T2 - 1.10654158e-11 * T3 +
                  4.41529985e-16 * T4;
  }

  // species with midpoint at T=1300 kelvin
  if (T < 1300) {
    // species 58: CHF3
    species[58] = -8.49894160e+04 * invT - 2.13809837e+01 -
                  6.80758290e-01 * logT - 1.19929550e-02 * T +
                  3.63893300e-06 * T2 - 8.31688067e-10 * T3 +
                  9.25895050e-14 * T4;
    // species 60: CH2F
    species[60] = -4.95741860e+03 * invT - 1.22213815e+01 -
                  2.11797450e+00 * logT - 5.11963500e-03 * T +
                  1.10348153e-06 * T2 - 1.98214192e-10 * T3 +
                  1.94667935e-14 * T4;
    // species 63: CHF
    species[63] = +1.85140140e+04 * invT - 4.70802090e+00 -
                  3.34483880e+00 * logT - 1.17730260e-03 * T -
                  3.23304883e-07 * T2 + 2.21042142e-10 * T3 -
                  3.95584685e-14 * T4;
    // species 64: CF2
    species[64] = -2.35211830e+04 * invT - 1.18488597e+01 -
                  2.28591330e+00 * logT - 5.38039300e-03 * T +
                  1.75636683e-06 * T2 - 4.08234483e-10 * T3 +
                  4.43192140e-14 * T4;
  } else {
    // species 58: CHF3
    species[58] = -8.70225080e+04 * invT + 2.11353599e+01 -
                  7.52416890e+00 * logT - 2.61502360e-03 * T +
                  3.39333867e-07 * T2 - 2.97746300e-11 * T3 +
                  1.15498635e-15 * T4;
    // species 60: CH2F
    species[60] = -5.59276780e+03 * invT + 4.63423000e-02 -
                  4.06013010e+00 * logT - 2.73321145e-03 * T +
                  3.51582317e-07 * T2 - 3.12048425e-11 * T3 +
                  1.23700030e-15 * T4;
    // species 63: CHF
    species[63] = +1.79581230e+04 * invT + 3.19443470e+00 -
                  4.48365700e+00 * logT - 8.74817650e-04 * T +
                  8.41317083e-08 * T2 - 9.07938750e-12 * T3 +
                  4.93949115e-16 * T4;
    // species 64: CF2
    species[64] = -2.43713700e+04 * invT + 6.89487840e+00 -
                  5.33120660e+00 * logT - 9.88741900e-04 * T +
                  1.60041318e-07 * T2 - 1.75586408e-11 * T3 +
                  7.97698850e-16 * T4;
  }

  // species with midpoint at T=1368 kelvin
  if (T < 1368) {
    // species 44: HOCN
    species[44] = -2.82698400e+03 * invT - 2.84687210e+00 -
                  3.78604952e+00 * logT - 3.44333961e-03 * T +
                  5.35813107e-07 * T2 - 4.30996473e-11 * T3 -
                  5.96803940e-16 * T4;
  } else {
    // species 44: HOCN
    species[44] = -3.70653331e+03 * invT + 1.10795271e+01 -
                  5.89784885e+00 * logT - 1.58394696e-03 * T +
                  1.86335107e-07 * T2 - 1.47702620e-11 * T3 +
                  5.21695885e-16 * T4;
  }

  // species with midpoint at T=1382 kelvin
  if (T < 1382) {
    // species 43: HCNO
    species[43] = +1.92990252e+04 * invT - 9.08601731e+00 -
                  2.64727989e+00 * logT - 6.37526710e-03 * T +
                  1.74657060e-06 * T2 - 3.67860697e-10 * T3 +
                  3.78760733e-14 * T4;
  } else {
    // species 43: HCNO
    species[43] = +1.79661339e+04 * invT + 1.59292645e+01 -
                  6.59860456e+00 * logT - 1.51389313e-03 * T +
                  1.79507243e-07 * T2 - 1.43055440e-11 * T3 +
                  5.07196955e-16 * T4;
  }

  // species with midpoint at T=1400 kelvin
  if (T < 1400) {
    // species 54: F
    species[54] = +8.67226920e+03 * invT - 8.04572400e-01 -
                  2.90370760e+00 * logT + 3.17648160e-04 * T -
                  4.41224783e-08 * T2 - 6.40885883e-12 * T3 +
                  2.72626775e-15 * T4;
  } else {
    // species 54: F
    species[54] = +8.75829010e+03 * invT - 2.42740820e+00 -
                  2.65116610e+00 * logT + 7.00648550e-05 * T -
                  8.65394050e-09 * T2 + 7.37462042e-13 * T3 -
                  2.95140070e-17 * T4;
  }

  // species with midpoint at T=1478 kelvin
  if (T < 1478) {
    // species 45: HNCO
    species[45] = -1.55873636e+04 * invT - 3.56361410e+00 -
                  3.63096317e+00 * logT - 3.65141179e-03 * T +
                  3.80083338e-07 * T2 + 5.51059415e-11 * T3 -
                  1.81117876e-14 * T4;
  } else {
    // species 45: HNCO
    species[45] = -1.66599344e+04 * invT + 1.36061988e+01 -
                  6.22395134e+00 * logT - 1.58932002e-03 * T +
                  1.82297925e-07 * T2 - 1.42279302e-11 * T3 +
                  4.97510977e-16 * T4;
  }
}

// compute the e/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesInternalEnergy(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with no change across T
  // species 48: AR
  species[48] = +1.50000000e+00 - 7.45375000e+02 * invT;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +1.34433112e+00 + 3.99026037e-03 * T - 6.49271700e-06 * T2 +
                 5.03930235e-09 * T3 - 1.47522352e-12 * T4 -
                 9.17935173e+02 * invT;
    // species 1: H
    species[1] = +1.50000000e+00 + 3.52666409e-13 * T - 6.65306547e-16 * T2 +
                 5.75204080e-19 * T3 - 1.85546466e-22 * T4 +
                 2.54736599e+04 * invT;
    // species 2: O
    species[2] = +2.16826710e+00 - 1.63965942e-03 * T + 2.21435465e-06 * T2 -
                 1.53201656e-09 * T3 + 4.22531942e-13 * T4 +
                 2.91222592e+04 * invT;
    // species 3: O2
    species[3] = +2.78245636e+00 - 1.49836708e-03 * T + 3.28243400e-06 * T2 -
                 2.42032377e-09 * T3 + 6.48745674e-13 * T4 -
                 1.06394356e+03 * invT;
    // species 4: OH
    species[4] = +2.99201543e+00 - 1.20065876e-03 * T + 1.53931280e-06 * T2 -
                 9.70283332e-10 * T3 + 2.72822940e-13 * T4 +
                 3.61508056e+03 * invT;
    // species 5: H2O
    species[5] = +3.19864056e+00 - 1.01821705e-03 * T + 2.17346737e-06 * T2 -
                 1.37199266e-09 * T3 + 3.54395634e-13 * T4 -
                 3.02937267e+04 * invT;
    // species 6: HO2
    species[6] = +3.30179801e+00 - 2.37456025e-03 * T + 7.05276303e-06 * T2 -
                 6.06909735e-09 * T3 + 1.85845025e-12 * T4 +
                 2.94808040e+02 * invT;
    // species 7: H2O2
    species[7] = +3.27611269e+00 - 2.71411208e-04 * T + 5.57785670e-06 * T2 -
                 5.39427032e-09 * T3 + 1.72490873e-12 * T4 -
                 1.77025821e+04 * invT;
    // species 8: C
    species[8] = +1.55423955e+00 - 1.60768862e-04 * T + 2.44597415e-07 * T2 -
                 1.83058722e-10 * T3 + 5.33042892e-14 * T4 +
                 8.54438832e+04 * invT;
    // species 9: CH
    species[9] = +2.48981665e+00 + 1.61917771e-04 * T - 5.62996883e-07 * T2 +
                 7.90543317e-10 * T3 - 2.81218134e-13 * T4 +
                 7.07972934e+04 * invT;
    // species 10: CH2
    species[10] = +2.76267867e+00 + 4.84436072e-04 * T + 9.31632803e-07 * T2 -
                  9.62727883e-10 * T3 + 3.37483438e-13 * T4 +
                  4.60040401e+04 * invT;
    // species 11: CH2(S)
    species[11] = +3.19860411e+00 - 1.18330710e-03 * T + 2.74432073e-06 * T2 -
                  1.67203995e-09 * T3 + 3.88629474e-13 * T4 +
                  5.04968163e+04 * invT;
    // species 12: CH3
    species[12] = +2.67359040e+00 + 1.00547588e-03 * T + 1.91007285e-06 * T2 -
                  1.71779356e-09 * T3 + 5.08771468e-13 * T4 +
                  1.64449988e+04 * invT;
    // species 13: CH4
    species[13] = +4.14987613e+00 - 6.83548940e-03 * T + 1.63933533e-05 * T2 -
                  1.21185757e-08 * T3 + 3.33387912e-12 * T4 -
                  1.02466476e+04 * invT;
    // species 14: CO
    species[14] = +2.57953347e+00 - 3.05176840e-04 * T + 3.38938110e-07 * T2 +
                  2.26751471e-10 * T3 - 1.80884900e-13 * T4 -
                  1.43440860e+04 * invT;
    // species 15: CO2
    species[15] = +1.35677352e+00 + 4.49229839e-03 * T - 2.37452090e-06 * T2 +
                  6.14797555e-10 * T3 - 2.87399096e-14 * T4 -
                  4.83719697e+04 * invT;
    // species 16: HCO
    species[16] = +3.22118584e+00 - 1.62196266e-03 * T + 4.59331487e-06 * T2 -
                  3.32860233e-09 * T3 + 8.67537730e-13 * T4 +
                  3.83956496e+03 * invT;
    // species 17: CH2O
    species[17] = +3.79372315e+00 - 4.95416684e-03 * T + 1.24406669e-05 * T2 -
                  9.48213152e-09 * T3 + 2.63545304e-12 * T4 -
                  1.43089567e+04 * invT;
    // species 18: CH2OH
    species[18] = +2.86388918e+00 + 2.79836152e-03 * T + 1.97757264e-06 * T2 -
                  2.61330030e-09 * T3 + 8.73934556e-13 * T4 -
                  3.19391367e+03 * invT;
    // species 19: CH3O
    species[19] = +1.10620400e+00 + 3.60829750e-03 * T + 1.77949067e-06 * T2 -
                  1.84440900e-09 * T3 + 4.15122000e-13 * T4 +
                  9.78601100e+02 * invT;
    // species 20: CH3OH
    species[20] = +4.71539582e+00 - 7.61545645e-03 * T + 2.17480385e-05 * T2 -
                  1.77701722e-08 * T3 + 5.22705396e-12 * T4 -
                  2.56427656e+04 * invT;
    // species 21: C2H
    species[21] = +1.88965733e+00 + 6.70498055e-03 * T - 9.49231670e-06 * T2 +
                  7.36977613e-09 * T3 - 2.18663022e-12 * T4 +
                  6.68393932e+04 * invT;
    // species 22: C2H2
    species[22] = -1.91318906e-01 + 1.16807815e-02 * T - 1.18390605e-05 * T2 +
                  7.00381092e-09 * T3 - 1.70014595e-12 * T4 +
                  2.64289807e+04 * invT;
    // species 23: C2H3
    species[23] = +2.21246645e+00 + 7.57395810e-04 * T + 8.64031373e-06 * T2 -
                  8.94144617e-09 * T3 + 2.94301746e-12 * T4 +
                  3.48598468e+04 * invT;
    // species 24: C2H4
    species[24] = +2.95920148e+00 - 3.78526124e-03 * T + 1.90330097e-05 * T2 -
                  1.72897188e-08 * T3 + 5.39768746e-12 * T4 +
                  5.08977593e+03 * invT;
    // species 25: C2H5
    species[25] = +3.30646568e+00 - 2.09329446e-03 * T + 1.65714269e-05 * T2 -
                  1.49781651e-08 * T3 + 4.61018008e-12 * T4 +
                  1.28416265e+04 * invT;
    // species 26: C2H6
    species[26] = +3.29142492e+00 - 2.75077135e-03 * T + 1.99812763e-05 * T2 -
                  1.77116571e-08 * T3 + 5.37371542e-12 * T4 -
                  1.15222055e+04 * invT;
    // species 27: HCCO
    species[27] = +1.25172140e+00 + 8.82751050e-03 * T - 7.90970033e-06 * T2 +
                  4.31893975e-09 * T3 - 1.01329622e-12 * T4 +
                  2.00594490e+04 * invT;
    // species 28: CH2CO
    species[28] = +1.13583630e+00 + 9.05943605e-03 * T - 5.79824913e-06 * T2 +
                  2.33599392e-09 * T3 - 4.02915230e-13 * T4 -
                  7.04291804e+03 * invT;
    // species 29: HCCOH
    species[29] = +2.42373300e-01 + 1.55361005e-02 * T - 1.69556213e-05 * T2 +
                  1.07842828e-08 * T3 - 2.80291880e-12 * T4 +
                  8.03161430e+03 * invT;
    // species 30: N
    species[30] = +1.50000000e+00 + 5.61046370e+04 * invT;
    // species 31: NH
    species[31] = +2.49290850e+00 + 1.55895990e-04 * T - 4.96349467e-07 * T2 +
                  6.20411050e-10 * T3 - 2.07139340e-13 * T4 +
                  4.18806290e+04 * invT;
    // species 32: NH2
    species[32] = +3.20400290e+00 - 1.05306925e-03 * T + 2.36894493e-06 * T2 -
                  1.40287992e-09 * T3 + 3.28814340e-13 * T4 +
                  2.18859100e+04 * invT;
    // species 33: NH3
    species[33] = +3.28602740e+00 - 2.33026150e-03 * T + 7.23950433e-06 * T2 -
                  5.70222175e-09 * T3 + 1.65276092e-12 * T4 -
                  6.74172850e+03 * invT;
    // species 34: NNH
    species[34] = +3.34469270e+00 - 2.42485360e-03 * T + 6.68648633e-06 * T2 -
                  5.43161600e-09 * T3 + 1.58939078e-12 * T4 +
                  2.87919730e+04 * invT;
    // species 35: NO
    species[35] = +3.21847630e+00 - 2.31948800e-03 * T + 3.68034067e-06 * T2 -
                  2.33403385e-09 * T3 + 5.60715400e-13 * T4 +
                  9.84462300e+03 * invT;
    // species 36: NO2
    species[36] = +2.94403120e+00 - 7.92714500e-04 * T + 5.55260400e-06 * T2 -
                  5.11885650e-09 * T3 + 1.56701128e-12 * T4 +
                  2.89661790e+03 * invT;
    // species 37: N2O
    species[37] = +1.25715020e+00 + 5.65236400e-03 * T - 4.55710633e-06 * T2 +
                  2.42049515e-09 * T3 - 5.86143640e-13 * T4 +
                  8.74177440e+03 * invT;
    // species 38: HNO
    species[38] = +3.53349160e+00 - 2.83480855e-03 * T + 6.15773567e-06 * T2 -
                  4.28427350e-09 * T3 + 1.10909146e-12 * T4 +
                  1.15482970e+04 * invT;
    // species 39: CN
    species[39] = +2.61293510e+00 - 4.77756635e-04 * T + 7.14765900e-07 * T2 -
                  7.87908075e-11 * T3 - 9.28607120e-14 * T4 +
                  5.17083400e+04 * invT;
    // species 40: HCN
    species[40] = +1.25898860e+00 + 5.02558500e-03 * T - 4.45058767e-06 * T2 +
                  2.52308725e-09 * T3 - 6.01780560e-13 * T4 +
                  1.47126330e+04 * invT;
    // species 41: H2CN
    species[41] = +1.85166100e+00 + 2.84761655e-03 * T + 3.57046667e-07 * T2 -
                  4.05653000e-10 * T3 - 4.70221620e-14 * T4 +
                  2.86378200e+04 * invT;
    // species 42: HCNN
    species[42] = +1.52431940e+00 + 7.98030950e-03 * T - 6.27211800e-06 * T2 +
                  3.03138500e-09 * T3 - 6.47147560e-13 * T4 +
                  5.42619840e+04 * invT;
    // species 46: NCO
    species[46] = +1.82693080e+00 + 4.40258440e-03 * T - 2.79553780e-06 * T2 +
                  1.20042410e-09 * T3 - 2.66271900e-13 * T4 +
                  1.46824770e+04 * invT;
    // species 47: N2
    species[47] = +2.29867700e+00 + 7.04120200e-04 * T - 1.32107400e-06 * T2 +
                  1.41037875e-09 * T3 - 4.88970800e-13 * T4 -
                  1.02089990e+03 * invT;
    // species 49: C3H7
    species[49] = +5.15518000e-02 + 1.29959900e-02 * T + 7.93351333e-07 * T2 -
                  4.90239225e-09 * T3 + 1.87464940e-12 * T4 +
                  1.06318630e+04 * invT;
    // species 50: C3H8
    species[50] = -6.64461900e-02 + 1.32122895e-02 * T + 2.03532423e-06 * T2 -
                  5.49437475e-09 * T3 + 1.90298506e-12 * T4 -
                  1.39585200e+04 * invT;
    // species 51: CH2CHO
    species[51] = +2.40906200e+00 + 5.36928700e-03 * T + 6.30497333e-07 * T2 -
                  1.78964575e-09 * T3 + 5.73477000e-13 * T4 +
                  1.52147660e+03 * invT;
    // species 52: CH3CHO
    species[52] = +3.72945950e+00 - 1.59664290e-03 * T + 1.58449737e-05 * T2 -
                  1.43646527e-08 * T3 + 4.38622240e-12 * T4 -
                  2.15728780e+04 * invT;
    // species 70: iC3H7
    species[70] = +4.44919900e-01 + 1.04995560e-02 * T + 2.56787407e-06 * T2 -
                  4.61906325e-09 * T3 + 1.42565924e-12 * T4 +
                  9.42237240e+03 * invT;
    // species 71: nC3H7
    species[71] = +4.91173000e-02 + 1.30044865e-02 * T + 7.84750533e-07 * T2 -
                  4.89878300e-09 * T3 + 1.87440414e-12 * T4 +
                  1.03123460e+04 * invT;
  } else {
    // species 0: H2
    species[0] = +2.33727920e+00 - 2.47012365e-05 * T + 1.66485593e-07 * T2 -
                 4.48915985e-11 * T3 + 4.00510752e-15 * T4 -
                 9.50158922e+02 * invT;
    // species 1: H
    species[1] = +1.50000001e+00 - 1.15421486e-11 * T + 5.38539827e-15 * T2 -
                 1.18378809e-18 * T3 + 9.96394714e-23 * T4 +
                 2.54736599e+04 * invT;
    // species 2: O
    species[2] = +1.56942078e+00 - 4.29870569e-05 * T + 1.39828196e-08 * T2 -
                 2.50444497e-12 * T3 + 2.45667382e-16 * T4 +
                 2.92175791e+04 * invT;
    // species 3: O2
    species[3] = +2.28253784e+00 + 7.41543770e-04 * T - 2.52655556e-07 * T2 +
                 5.23676387e-11 * T3 - 4.33435588e-15 * T4 -
                 1.08845772e+03 * invT;
    // species 4: OH
    species[4] = +2.09288767e+00 + 2.74214858e-04 * T + 4.21684093e-08 * T2 -
                 2.19865389e-11 * T3 + 2.34824752e-15 * T4 +
                 3.85865700e+03 * invT;
    // species 5: H2O
    species[5] = +2.03399249e+00 + 1.08845902e-03 * T - 5.46908393e-08 * T2 -
                 2.42604967e-11 * T3 + 3.36401984e-15 * T4 -
                 3.00042971e+04 * invT;
    // species 6: HO2
    species[6] = +3.01721090e+00 + 1.11991006e-03 * T - 2.11219383e-07 * T2 +
                 2.85615925e-11 * T3 - 2.15817070e-15 * T4 +
                 1.11856713e+02 * invT;
    // species 7: H2O2
    species[7] = +3.16500285e+00 + 2.45415847e-03 * T - 6.33797417e-07 * T2 +
                 9.27964965e-11 * T3 - 5.75816610e-15 * T4 -
                 1.78617877e+04 * invT;
    // species 8: C
    species[8] = +1.49266888e+00 + 2.39944642e-05 * T - 2.41445007e-08 * T2 +
                 9.35727573e-12 * T3 - 9.74555786e-16 * T4 +
                 8.54512953e+04 * invT;
    // species 9: CH
    species[9] = +1.87846473e+00 + 4.85456840e-04 * T + 4.81485517e-08 * T2 -
                 3.26719623e-11 * T3 + 3.52158766e-15 * T4 +
                 7.10124364e+04 * invT;
    // species 10: CH2
    species[10] = +1.87410113e+00 + 1.82819646e-03 * T - 4.69648657e-07 * T2 +
                  6.50448872e-11 * T3 - 3.75455134e-15 * T4 +
                  4.62636040e+04 * invT;
    // species 11: CH2(S)
    species[11] = +1.29203842e+00 + 2.32794318e-03 * T - 6.70639823e-07 * T2 +
                  1.04476500e-10 * T3 - 6.79432730e-15 * T4 +
                  5.09259997e+04 * invT;
    // species 12: CH3
    species[12] = +1.28571772e+00 + 3.61995018e-03 * T - 9.95714493e-07 * T2 +
                  1.48921161e-10 * T3 - 9.34308788e-15 * T4 +
                  1.67755843e+04 * invT;
    // species 13: CH4
    species[13] = -9.25148505e-01 + 6.69547335e-03 * T - 1.91095270e-06 * T2 +
                  3.05731338e-10 * T3 - 2.03630460e-14 * T4 -
                  9.46834459e+03 * invT;
    // species 14: CO
    species[14] = +1.71518561e+00 + 1.03126372e-03 * T - 3.32941924e-07 * T2 +
                  5.75132520e-11 * T3 - 4.07295432e-15 * T4 -
                  1.41518724e+04 * invT;
    // species 15: CO2
    species[15] = +2.85746029e+00 + 2.20718513e-03 * T - 7.38271347e-07 * T2 +
                  1.30872547e-10 * T3 - 9.44168328e-15 * T4 -
                  4.87591660e+04 * invT;
    // species 16: HCO
    species[16] = +1.77217438e+00 + 2.47847763e-03 * T - 8.28152043e-07 * T2 +
                  1.47290445e-10 * T3 - 1.06701742e-14 * T4 +
                  4.01191815e+03 * invT;
    // species 17: CH2O
    species[17] = +7.60690080e-01 + 4.60000041e-03 * T - 1.47419604e-06 * T2 +
                  2.51603030e-10 * T3 - 1.76771128e-14 * T4 -
                  1.39958323e+04 * invT;
    // species 18: CH2OH
    species[18] = +2.69266569e+00 + 4.32288399e-03 * T - 1.25033707e-06 * T2 +
                  1.96808659e-10 * T3 - 1.29710840e-14 * T4 -
                  3.24250627e+03 * invT;
    // species 19: CH3O
    species[19] = +2.77079900e+00 + 3.93574850e-03 * T - 8.85461333e-07 * T2 +
                  9.86107750e-11 * T3 - 4.22523200e-15 * T4 +
                  1.27832520e+02 * invT;
    // species 20: CH3OH
    species[20] = +7.89707910e-01 + 7.04691460e-03 * T - 2.12166945e-06 * T2 +
                  3.45427713e-10 * T3 - 2.34120440e-14 * T4 -
                  2.53748747e+04 * invT;
    // species 21: C2H
    species[21] = +2.16780652e+00 + 2.37610951e-03 * T - 6.12623590e-07 * T2 +
                  7.60475630e-11 * T3 - 3.54465540e-15 * T4 +
                  6.71210650e+04 * invT;
    // species 22: C2H2
    species[22] = +3.14756964e+00 + 2.98083332e-03 * T - 7.90982840e-07 * T2 +
                  1.16853043e-10 * T3 - 7.22470426e-15 * T4 +
                  2.59359992e+04 * invT;
    // species 23: C2H3
    species[23] = +2.01672400e+00 + 5.16511460e-03 * T - 1.56027450e-06 * T2 +
                  2.54408220e-10 * T3 - 1.72521408e-14 * T4 +
                  3.46128739e+04 * invT;
    // species 24: C2H4
    species[24] = +1.03611116e+00 + 7.32270755e-03 * T - 2.23692638e-06 * T2 +
                  3.68057308e-10 * T3 - 2.51412122e-14 * T4 +
                  4.93988614e+03 * invT;
    // species 25: C2H5
    species[25] = +9.54656420e-01 + 8.69863610e-03 * T - 2.66068889e-06 * T2 +
                  4.38044223e-10 * T3 - 2.99283152e-14 * T4 +
                  1.28575200e+04 * invT;
    // species 26: C2H6
    species[26] = +7.18815000e-02 + 1.08426339e-02 * T - 3.34186890e-06 * T2 +
                  5.53530003e-10 * T3 - 3.80005780e-14 * T4 -
                  1.14263932e+04 * invT;
    // species 27: HCCO
    species[27] = +4.62820580e+00 + 2.04267005e-03 * T - 5.31151567e-07 * T2 +
                  7.15651300e-11 * T3 - 3.88156640e-15 * T4 +
                  1.93272150e+04 * invT;
    // species 28: CH2CO
    species[28] = +3.51129732e+00 + 4.50179872e-03 * T - 1.38979878e-06 * T2 +
                  2.30836470e-10 * T3 - 1.58967640e-14 * T4 -
                  7.55105311e+03 * invT;
    // species 29: HCCOH
    species[29] = +4.92382910e+00 + 3.39618000e-03 * T - 8.55285467e-07 * T2 +
                  1.12469603e-10 * T3 - 5.98802020e-15 * T4 +
                  7.26462600e+03 * invT;
    // species 30: N
    species[30] = +1.41594290e+00 + 8.74453250e-05 * T - 3.96745633e-08 * T2 +
                  7.55656125e-12 * T3 - 4.07219640e-16 * T4 +
                  5.61337730e+04 * invT;
    // species 31: NH
    species[31] = +1.78369280e+00 + 6.64921500e-04 * T - 1.41593490e-07 * T2 +
                  1.95871253e-11 * T3 - 1.10088940e-15 * T4 +
                  4.21208480e+04 * invT;
    // species 32: NH2
    species[32] = +1.83474210e+00 + 1.60365410e-03 * T - 3.11302680e-07 * T2 +
                  3.42573825e-11 * T3 - 1.58412288e-15 * T4 +
                  2.21719570e+04 * invT;
    // species 33: NH3
    species[33] = +1.63445210e+00 + 2.83312800e-03 * T - 5.75955867e-07 * T2 +
                  5.96679025e-11 * T3 - 2.51575720e-15 * T4 -
                  6.54469580e+03 * invT;
    // species 34: NNH
    species[34] = +2.76675440e+00 + 1.44575410e-03 * T - 3.47220667e-07 * T2 +
                  4.21064850e-11 * T3 - 2.01837920e-15 * T4 +
                  2.86506970e+04 * invT;
    // species 35: NO
    species[35] = +2.26060560e+00 + 5.95552150e-04 * T - 1.43056827e-07 * T2 +
                  1.73644173e-11 * T3 - 8.06721980e-16 * T4 +
                  9.92097460e+03 * invT;
    // species 36: NO2
    species[36] = +3.88475420e+00 + 1.08619780e-03 * T - 2.76023020e-07 * T2 +
                  3.93687750e-11 * T3 - 2.10217900e-15 * T4 +
                  2.31649830e+03 * invT;
    // species 37: N2O
    species[37] = +3.82307290e+00 + 1.31351255e-03 * T - 3.19502913e-07 * T2 +
                  4.00017800e-11 * T3 - 1.95504606e-15 * T4 +
                  8.07340480e+03 * invT;
    // species 38: HNO
    species[38] = +1.97925090e+00 + 1.74720295e-03 * T - 2.61832593e-07 * T2 +
                  1.43698985e-11 * T3 - 3.86718320e-17 * T4 +
                  1.17505820e+04 * invT;
    // species 39: CN
    species[39] = +2.74598050e+00 + 2.17253875e-05 * T + 9.90199467e-08 * T2 -
                  1.71629515e-11 * T3 + 8.82683460e-16 * T4 +
                  5.15361880e+04 * invT;
    // species 40: HCN
    species[40] = +2.80223920e+00 + 1.57321140e-03 * T - 3.54406167e-07 * T2 +
                  4.15493925e-11 * T3 - 1.95995140e-15 * T4 +
                  1.44072920e+04 * invT;
    // species 41: H2CN
    species[41] = +4.20970300e+00 + 1.48464555e-03 * T - 9.51863033e-08 * T2 -
                  4.08887500e-11 * T3 + 6.08651780e-15 * T4 +
                  2.76771090e+04 * invT;
    // species 42: HCNN
    species[42] = +4.89463620e+00 + 1.99479795e-03 * T - 5.32746000e-07 * T2 +
                  7.31234875e-11 * T3 - 4.01893720e-15 * T4 +
                  5.34529410e+04 * invT;
    // species 46: NCO
    species[46] = +4.15218450e+00 + 1.15258805e-03 * T - 2.93443843e-07 * T2 +
                  3.69727450e-11 * T3 - 1.81955992e-15 * T4 +
                  1.40041230e+04 * invT;
    // species 47: N2
    species[47] = +1.92664000e+00 + 7.43988400e-04 * T - 1.89492000e-07 * T2 +
                  2.52425950e-11 * T3 - 1.35067020e-15 * T4 -
                  9.22797700e+02 * invT;
    // species 49: C3H7
    species[49] = +6.70269870e+00 + 8.02210150e-03 * T - 1.76110733e-06 * T2 +
                  1.90746475e-10 * T3 - 7.87845680e-15 * T4 +
                  8.29843360e+03 * invT;
    // species 50: C3H8
    species[50] = +6.53413680e+00 + 9.43611950e-03 * T - 2.09061637e-06 * T2 +
                  2.28689123e-10 * T3 - 9.56761380e-15 * T4 -
                  1.64675160e+04 * invT;
    // species 51: CH2CHO
    species[51] = +4.97567000e+00 + 4.06529550e-03 * T - 9.14541333e-07 * T2 +
                  1.01757600e-10 * T3 - 4.35203400e-15 * T4 +
                  4.90321800e+02 * invT;
    // species 52: CH3CHO
    species[52] = +4.40411080e+00 + 5.86152950e-03 * T - 1.40877123e-06 * T2 +
                  1.70931128e-10 * T3 - 8.19697260e-15 * T4 -
                  2.25931220e+04 * invT;
    // species 70: iC3H7
    species[70] = +5.51927410e+00 + 8.61005200e-03 * T - 1.91214057e-06 * T2 +
                  2.10326830e-10 * T3 - 8.91318260e-15 * T4 +
                  7.32271930e+03 * invT;
    // species 71: nC3H7
    species[71] = +6.70974790e+00 + 8.01574250e-03 * T - 1.75734127e-06 * T2 +
                  1.89720880e-10 * T3 - 7.77254380e-15 * T4 +
                  7.97622360e+03 * invT;
  }

  // species with midpoint at T=1100 kelvin
  if (T < 1100) {
    // species 56: CH3F
    species[56] = +1.59623660e+00 + 1.82658470e-03 * T + 4.36774367e-06 * T2 -
                  3.63324725e-09 * T3 + 8.96028540e-13 * T4 -
                  2.90068080e+04 * invT;
    // species 57: CH2F2
    species[57] = +7.39005400e-01 + 5.96896250e-03 * T - 8.97736367e-08 * T2 -
                  1.37973382e-09 * T3 + 4.36270980e-13 * T4 -
                  5.54396840e+04 * invT;
    // species 65: CF
    species[65] = +2.35383910e+00 + 1.04548515e-04 * T + 1.06924770e-06 * T2 -
                  9.17188425e-10 * T3 + 2.39726220e-13 * T4 +
                  2.79077430e+04 * invT;
  } else {
    // species 56: CH3F
    species[56] = +1.64400090e+00 + 4.98625385e-03 * T - 1.32832417e-06 * T2 +
                  1.81286905e-10 * T3 - 9.76879920e-15 * T4 -
                  2.94271460e+04 * invT;
    // species 57: CH2F2
    species[57] = +3.55849840e+00 + 4.15989395e-03 * T - 1.12385660e-06 * T2 +
                  1.54699217e-10 * T3 - 8.39030860e-15 * T4 -
                  5.65062210e+04 * invT;
    // species 65: CF
    species[65] = +2.66496780e+00 + 4.86840320e-04 * T - 1.36994120e-07 * T2 +
                  2.00157188e-11 * T3 - 1.12996136e-15 * T4 +
                  2.77241770e+04 * invT;
  }

  // species with midpoint at T=1150 kelvin
  if (T < 1150) {
    // species 55: F2
    species[55] = +1.66955040e+00 + 2.64709230e-03 * T - 2.15696983e-06 * T2 +
                  9.79583675e-10 * T3 - 1.87690270e-13 * T4 -
                  9.80801280e+02 * invT;
    // species 61: CHF2
    species[61] = +8.32763300e-01 + 6.70819000e-03 * T - 3.18109460e-06 * T2 +
                  7.39824200e-10 * T3 - 5.58399840e-14 * T4 -
                  3.08570560e+04 * invT;
    // species 67: CF2O
    species[67] = +1.76138600e-01 + 1.05434940e-02 * T - 7.97385700e-06 * T2 +
                  3.49872825e-09 * T3 - 6.75210720e-13 * T4 -
                  7.79513030e+04 * invT;
    // species 68: CHFO
    species[68] = +1.11849750e+00 + 5.38699400e-03 * T - 1.83860543e-06 * T2 +
                  1.45379830e-10 * T3 + 4.34084180e-14 * T4 -
                  4.63567050e+04 * invT;
  } else {
    // species 55: F2
    species[55] = +3.05774200e+00 + 3.00016880e-04 * T - 7.30726233e-08 * T2 +
                  1.07876892e-11 * T3 - 6.25176840e-16 * T4 -
                  1.32438600e+03 * invT;
    // species 61: CHF2
    species[61] = +4.44828140e+00 + 2.20582700e-03 * T - 5.80628600e-07 * T2 +
                  7.72998975e-11 * T3 - 4.03523760e-15 * T4 -
                  3.19609500e+04 * invT;
    // species 67: CF2O
    species[67] = +5.79131030e+00 + 1.69152710e-03 * T - 4.76705767e-07 * T2 +
                  6.78064300e-11 * T3 - 3.81047620e-15 * T4 -
                  7.94539770e+04 * invT;
    // species 68: CHFO
    species[68] = +3.81925460e+00 + 2.52709115e-03 * T - 6.71403900e-07 * T2 +
                  9.08977125e-11 * T3 - 4.89448140e-15 * T4 -
                  4.72630780e+04 * invT;
  }

  // species with midpoint at T=1250 kelvin
  if (T < 1250) {
    // species 53: HF
    species[53] = +2.43657390e+00 + 2.43010360e-04 * T - 4.17465700e-07 * T2 +
                  3.41187500e-10 * T3 - 8.19148080e-14 * T4 -
                  3.38000890e+04 * invT;
    // species 59: CF4
    species[59] = -6.70426470e-01 + 1.66348015e-02 * T - 1.29422353e-05 * T2 +
                  5.51483675e-09 * T3 - 9.89674660e-13 * T4 -
                  1.13503610e+05 * invT;
    // species 62: CF3
    species[62] = +3.57287100e-01 + 1.07879025e-02 * T - 7.96732733e-06 * T2 +
                  3.24027725e-09 * T3 - 5.60346300e-13 * T4 -
                  5.73912730e+04 * invT;
    // species 66: CF3O
    species[66] = +3.87239800e-01 + 1.49477700e-02 * T - 1.14248320e-05 * T2 +
                  4.79514250e-09 * T3 - 8.49918700e-13 * T4 -
                  8.03369020e+04 * invT;
    // species 69: CFO
    species[69] = +1.94060800e+00 + 3.73545840e-03 * T - 2.07277720e-06 * T2 +
                  6.57290875e-10 * T3 - 9.46443760e-14 * T4 -
                  2.17922550e+04 * invT;
  } else {
    // species 53: HF
    species[53] = +1.78129810e+00 + 5.19795400e-04 * T - 8.05785000e-08 * T2 +
                  6.71039750e-12 * T3 - 2.19532740e-16 * T4 -
                  3.35041740e+04 * invT;
    // species 59: CF4
    species[59] = +8.80831530e+00 + 1.64134650e-03 * T - 4.46816133e-07 * T2 +
                  6.09345725e-11 * T3 - 3.25723160e-15 * T4 -
                  1.16024990e+05 * invT;
    // species 62: CF3
    species[62] = +6.73167070e+00 + 1.13557320e-03 * T - 2.96832133e-07 * T2 +
                  3.82345850e-11 * T3 - 1.90167516e-15 * T4 -
                  5.91456750e+04 * invT;
    // species 66: CF3O
    species[66] = +8.82040840e+00 + 1.69457915e-03 * T - 4.82179633e-07 * T2 +
                  6.92404250e-11 * T3 - 3.91160680e-15 * T4 -
                  8.25865820e+04 * invT;
    // species 69: CFO
    species[69] = +4.14996370e+00 + 9.24692350e-04 * T - 2.46743957e-07 * T2 +
                  3.31962475e-11 * T3 - 1.76611994e-15 * T4 -
                  2.24883720e+04 * invT;
  }

  // species with midpoint at T=1300 kelvin
  if (T < 1300) {
    // species 58: CHF3
    species[58] = -3.19241710e-01 + 1.19929550e-02 * T - 7.27786600e-06 * T2 +
                  2.49506420e-09 * T3 - 3.70358020e-13 * T4 -
                  8.49894160e+04 * invT;
    // species 60: CH2F
    species[60] = +1.11797450e+00 + 5.11963500e-03 * T - 2.20696307e-06 * T2 +
                  5.94642575e-10 * T3 - 7.78671740e-14 * T4 -
                  4.95741860e+03 * invT;
    // species 63: CHF
    species[63] = +2.34483880e+00 + 1.17730260e-03 * T + 6.46609767e-07 * T2 -
                  6.63126425e-10 * T3 + 1.58233874e-13 * T4 +
                  1.85140140e+04 * invT;
    // species 64: CF2
    species[64] = +1.28591330e+00 + 5.38039300e-03 * T - 3.51273367e-06 * T2 +
                  1.22470345e-09 * T3 - 1.77276856e-13 * T4 -
                  2.35211830e+04 * invT;
  } else {
    // species 58: CHF3
    species[58] = +6.52416890e+00 + 2.61502360e-03 * T - 6.78667733e-07 * T2 +
                  8.93238900e-11 * T3 - 4.61994540e-15 * T4 -
                  8.70225080e+04 * invT;
    // species 60: CH2F
    species[60] = +3.06013010e+00 + 2.73321145e-03 * T - 7.03164633e-07 * T2 +
                  9.36145275e-11 * T3 - 4.94800120e-15 * T4 -
                  5.59276780e+03 * invT;
    // species 63: CHF
    species[63] = +3.48365700e+00 + 8.74817650e-04 * T - 1.68263417e-07 * T2 +
                  2.72381625e-11 * T3 - 1.97579646e-15 * T4 +
                  1.79581230e+04 * invT;
    // species 64: CF2
    species[64] = +4.33120660e+00 + 9.88741900e-04 * T - 3.20082637e-07 * T2 +
                  5.26759225e-11 * T3 - 3.19079540e-15 * T4 -
                  2.43713700e+04 * invT;
  }

  // species with midpoint at T=1368 kelvin
  if (T < 1368) {
    // species 44: HOCN
    species[44] = +2.78604952e+00 + 3.44333961e-03 * T - 1.07162621e-06 * T2 +
                  1.29298942e-10 * T3 + 2.38721576e-15 * T4 -
                  2.82698400e+03 * invT;
  } else {
    // species 44: HOCN
    species[44] = +4.89784885e+00 + 1.58394696e-03 * T - 3.72670213e-07 * T2 +
                  4.43107860e-11 * T3 - 2.08678354e-15 * T4 -
                  3.70653331e+03 * invT;
  }

  // species with midpoint at T=1382 kelvin
  if (T < 1382) {
    // species 43: HCNO
    species[43] = +1.64727989e+00 + 6.37526710e-03 * T - 3.49314120e-06 * T2 +
                  1.10358209e-09 * T3 - 1.51504293e-13 * T4 +
                  1.92990252e+04 * invT;
  } else {
    // species 43: HCNO
    species[43] = +5.59860456e+00 + 1.51389313e-03 * T - 3.59014487e-07 * T2 +
                  4.29166320e-11 * T3 - 2.02878782e-15 * T4 +
                  1.79661339e+04 * invT;
  }

  // species with midpoint at T=1400 kelvin
  if (T < 1400) {
    // species 54: F
    species[54] = +1.90370760e+00 - 3.17648160e-04 * T + 8.82449567e-08 * T2 +
                  1.92265765e-11 * T3 - 1.09050710e-14 * T4 +
                  8.67226920e+03 * invT;
  } else {
    // species 54: F
    species[54] = +1.65116610e+00 - 7.00648550e-05 * T + 1.73078810e-08 * T2 -
                  2.21238612e-12 * T3 + 1.18056028e-16 * T4 +
                  8.75829010e+03 * invT;
  }

  // species with midpoint at T=1478 kelvin
  if (T < 1478) {
    // species 45: HNCO
    species[45] = +2.63096317e+00 + 3.65141179e-03 * T - 7.60166677e-07 * T2 -
                  1.65317825e-10 * T3 + 7.24471504e-14 * T4 -
                  1.55873636e+04 * invT;
  } else {
    // species 45: HNCO
    species[45] = +5.22395134e+00 + 1.58932002e-03 * T - 3.64595850e-07 * T2 +
                  4.26837908e-11 * T3 - 1.99004391e-15 * T4 -
                  1.66599344e+04 * invT;
  }
}

// compute the h/(RT) at the given temperature (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEnthalpy(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with no change across T
  // species 48: AR
  species[48] = +2.50000000e+00 - 7.45375000e+02 * invT;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +2.34433112e+00 + 3.99026037e-03 * T - 6.49271700e-06 * T2 +
                 5.03930235e-09 * T3 - 1.47522352e-12 * T4 -
                 9.17935173e+02 * invT;
    // species 1: H
    species[1] = +2.50000000e+00 + 3.52666409e-13 * T - 6.65306547e-16 * T2 +
                 5.75204080e-19 * T3 - 1.85546466e-22 * T4 +
                 2.54736599e+04 * invT;
    // species 2: O
    species[2] = +3.16826710e+00 - 1.63965942e-03 * T + 2.21435465e-06 * T2 -
                 1.53201656e-09 * T3 + 4.22531942e-13 * T4 +
                 2.91222592e+04 * invT;
    // species 3: O2
    species[3] = +3.78245636e+00 - 1.49836708e-03 * T + 3.28243400e-06 * T2 -
                 2.42032377e-09 * T3 + 6.48745674e-13 * T4 -
                 1.06394356e+03 * invT;
    // species 4: OH
    species[4] = +3.99201543e+00 - 1.20065876e-03 * T + 1.53931280e-06 * T2 -
                 9.70283332e-10 * T3 + 2.72822940e-13 * T4 +
                 3.61508056e+03 * invT;
    // species 5: H2O
    species[5] = +4.19864056e+00 - 1.01821705e-03 * T + 2.17346737e-06 * T2 -
                 1.37199266e-09 * T3 + 3.54395634e-13 * T4 -
                 3.02937267e+04 * invT;
    // species 6: HO2
    species[6] = +4.30179801e+00 - 2.37456025e-03 * T + 7.05276303e-06 * T2 -
                 6.06909735e-09 * T3 + 1.85845025e-12 * T4 +
                 2.94808040e+02 * invT;
    // species 7: H2O2
    species[7] = +4.27611269e+00 - 2.71411208e-04 * T + 5.57785670e-06 * T2 -
                 5.39427032e-09 * T3 + 1.72490873e-12 * T4 -
                 1.77025821e+04 * invT;
    // species 8: C
    species[8] = +2.55423955e+00 - 1.60768862e-04 * T + 2.44597415e-07 * T2 -
                 1.83058722e-10 * T3 + 5.33042892e-14 * T4 +
                 8.54438832e+04 * invT;
    // species 9: CH
    species[9] = +3.48981665e+00 + 1.61917771e-04 * T - 5.62996883e-07 * T2 +
                 7.90543317e-10 * T3 - 2.81218134e-13 * T4 +
                 7.07972934e+04 * invT;
    // species 10: CH2
    species[10] = +3.76267867e+00 + 4.84436072e-04 * T + 9.31632803e-07 * T2 -
                  9.62727883e-10 * T3 + 3.37483438e-13 * T4 +
                  4.60040401e+04 * invT;
    // species 11: CH2(S)
    species[11] = +4.19860411e+00 - 1.18330710e-03 * T + 2.74432073e-06 * T2 -
                  1.67203995e-09 * T3 + 3.88629474e-13 * T4 +
                  5.04968163e+04 * invT;
    // species 12: CH3
    species[12] = +3.67359040e+00 + 1.00547588e-03 * T + 1.91007285e-06 * T2 -
                  1.71779356e-09 * T3 + 5.08771468e-13 * T4 +
                  1.64449988e+04 * invT;
    // species 13: CH4
    species[13] = +5.14987613e+00 - 6.83548940e-03 * T + 1.63933533e-05 * T2 -
                  1.21185757e-08 * T3 + 3.33387912e-12 * T4 -
                  1.02466476e+04 * invT;
    // species 14: CO
    species[14] = +3.57953347e+00 - 3.05176840e-04 * T + 3.38938110e-07 * T2 +
                  2.26751471e-10 * T3 - 1.80884900e-13 * T4 -
                  1.43440860e+04 * invT;
    // species 15: CO2
    species[15] = +2.35677352e+00 + 4.49229839e-03 * T - 2.37452090e-06 * T2 +
                  6.14797555e-10 * T3 - 2.87399096e-14 * T4 -
                  4.83719697e+04 * invT;
    // species 16: HCO
    species[16] = +4.22118584e+00 - 1.62196266e-03 * T + 4.59331487e-06 * T2 -
                  3.32860233e-09 * T3 + 8.67537730e-13 * T4 +
                  3.83956496e+03 * invT;
    // species 17: CH2O
    species[17] = +4.79372315e+00 - 4.95416684e-03 * T + 1.24406669e-05 * T2 -
                  9.48213152e-09 * T3 + 2.63545304e-12 * T4 -
                  1.43089567e+04 * invT;
    // species 18: CH2OH
    species[18] = +3.86388918e+00 + 2.79836152e-03 * T + 1.97757264e-06 * T2 -
                  2.61330030e-09 * T3 + 8.73934556e-13 * T4 -
                  3.19391367e+03 * invT;
    // species 19: CH3O
    species[19] = +2.10620400e+00 + 3.60829750e-03 * T + 1.77949067e-06 * T2 -
                  1.84440900e-09 * T3 + 4.15122000e-13 * T4 +
                  9.78601100e+02 * invT;
    // species 20: CH3OH
    species[20] = +5.71539582e+00 - 7.61545645e-03 * T + 2.17480385e-05 * T2 -
                  1.77701722e-08 * T3 + 5.22705396e-12 * T4 -
                  2.56427656e+04 * invT;
    // species 21: C2H
    species[21] = +2.88965733e+00 + 6.70498055e-03 * T - 9.49231670e-06 * T2 +
                  7.36977613e-09 * T3 - 2.18663022e-12 * T4 +
                  6.68393932e+04 * invT;
    // species 22: C2H2
    species[22] = +8.08681094e-01 + 1.16807815e-02 * T - 1.18390605e-05 * T2 +
                  7.00381092e-09 * T3 - 1.70014595e-12 * T4 +
                  2.64289807e+04 * invT;
    // species 23: C2H3
    species[23] = +3.21246645e+00 + 7.57395810e-04 * T + 8.64031373e-06 * T2 -
                  8.94144617e-09 * T3 + 2.94301746e-12 * T4 +
                  3.48598468e+04 * invT;
    // species 24: C2H4
    species[24] = +3.95920148e+00 - 3.78526124e-03 * T + 1.90330097e-05 * T2 -
                  1.72897188e-08 * T3 + 5.39768746e-12 * T4 +
                  5.08977593e+03 * invT;
    // species 25: C2H5
    species[25] = +4.30646568e+00 - 2.09329446e-03 * T + 1.65714269e-05 * T2 -
                  1.49781651e-08 * T3 + 4.61018008e-12 * T4 +
                  1.28416265e+04 * invT;
    // species 26: C2H6
    species[26] = +4.29142492e+00 - 2.75077135e-03 * T + 1.99812763e-05 * T2 -
                  1.77116571e-08 * T3 + 5.37371542e-12 * T4 -
                  1.15222055e+04 * invT;
    // species 27: HCCO
    species[27] = +2.25172140e+00 + 8.82751050e-03 * T - 7.90970033e-06 * T2 +
                  4.31893975e-09 * T3 - 1.01329622e-12 * T4 +
                  2.00594490e+04 * invT;
    // species 28: CH2CO
    species[28] = +2.13583630e+00 + 9.05943605e-03 * T - 5.79824913e-06 * T2 +
                  2.33599392e-09 * T3 - 4.02915230e-13 * T4 -
                  7.04291804e+03 * invT;
    // species 29: HCCOH
    species[29] = +1.24237330e+00 + 1.55361005e-02 * T - 1.69556213e-05 * T2 +
                  1.07842828e-08 * T3 - 2.80291880e-12 * T4 +
                  8.03161430e+03 * invT;
    // species 30: N
    species[30] = +2.50000000e+00 + 5.61046370e+04 * invT;
    // species 31: NH
    species[31] = +3.49290850e+00 + 1.55895990e-04 * T - 4.96349467e-07 * T2 +
                  6.20411050e-10 * T3 - 2.07139340e-13 * T4 +
                  4.18806290e+04 * invT;
    // species 32: NH2
    species[32] = +4.20400290e+00 - 1.05306925e-03 * T + 2.36894493e-06 * T2 -
                  1.40287992e-09 * T3 + 3.28814340e-13 * T4 +
                  2.18859100e+04 * invT;
    // species 33: NH3
    species[33] = +4.28602740e+00 - 2.33026150e-03 * T + 7.23950433e-06 * T2 -
                  5.70222175e-09 * T3 + 1.65276092e-12 * T4 -
                  6.74172850e+03 * invT;
    // species 34: NNH
    species[34] = +4.34469270e+00 - 2.42485360e-03 * T + 6.68648633e-06 * T2 -
                  5.43161600e-09 * T3 + 1.58939078e-12 * T4 +
                  2.87919730e+04 * invT;
    // species 35: NO
    species[35] = +4.21847630e+00 - 2.31948800e-03 * T + 3.68034067e-06 * T2 -
                  2.33403385e-09 * T3 + 5.60715400e-13 * T4 +
                  9.84462300e+03 * invT;
    // species 36: NO2
    species[36] = +3.94403120e+00 - 7.92714500e-04 * T + 5.55260400e-06 * T2 -
                  5.11885650e-09 * T3 + 1.56701128e-12 * T4 +
                  2.89661790e+03 * invT;
    // species 37: N2O
    species[37] = +2.25715020e+00 + 5.65236400e-03 * T - 4.55710633e-06 * T2 +
                  2.42049515e-09 * T3 - 5.86143640e-13 * T4 +
                  8.74177440e+03 * invT;
    // species 38: HNO
    species[38] = +4.53349160e+00 - 2.83480855e-03 * T + 6.15773567e-06 * T2 -
                  4.28427350e-09 * T3 + 1.10909146e-12 * T4 +
                  1.15482970e+04 * invT;
    // species 39: CN
    species[39] = +3.61293510e+00 - 4.77756635e-04 * T + 7.14765900e-07 * T2 -
                  7.87908075e-11 * T3 - 9.28607120e-14 * T4 +
                  5.17083400e+04 * invT;
    // species 40: HCN
    species[40] = +2.25898860e+00 + 5.02558500e-03 * T - 4.45058767e-06 * T2 +
                  2.52308725e-09 * T3 - 6.01780560e-13 * T4 +
                  1.47126330e+04 * invT;
    // species 41: H2CN
    species[41] = +2.85166100e+00 + 2.84761655e-03 * T + 3.57046667e-07 * T2 -
                  4.05653000e-10 * T3 - 4.70221620e-14 * T4 +
                  2.86378200e+04 * invT;
    // species 42: HCNN
    species[42] = +2.52431940e+00 + 7.98030950e-03 * T - 6.27211800e-06 * T2 +
                  3.03138500e-09 * T3 - 6.47147560e-13 * T4 +
                  5.42619840e+04 * invT;
    // species 46: NCO
    species[46] = +2.82693080e+00 + 4.40258440e-03 * T - 2.79553780e-06 * T2 +
                  1.20042410e-09 * T3 - 2.66271900e-13 * T4 +
                  1.46824770e+04 * invT;
    // species 47: N2
    species[47] = +3.29867700e+00 + 7.04120200e-04 * T - 1.32107400e-06 * T2 +
                  1.41037875e-09 * T3 - 4.88970800e-13 * T4 -
                  1.02089990e+03 * invT;
    // species 49: C3H7
    species[49] = +1.05155180e+00 + 1.29959900e-02 * T + 7.93351333e-07 * T2 -
                  4.90239225e-09 * T3 + 1.87464940e-12 * T4 +
                  1.06318630e+04 * invT;
    // species 50: C3H8
    species[50] = +9.33553810e-01 + 1.32122895e-02 * T + 2.03532423e-06 * T2 -
                  5.49437475e-09 * T3 + 1.90298506e-12 * T4 -
                  1.39585200e+04 * invT;
    // species 51: CH2CHO
    species[51] = +3.40906200e+00 + 5.36928700e-03 * T + 6.30497333e-07 * T2 -
                  1.78964575e-09 * T3 + 5.73477000e-13 * T4 +
                  1.52147660e+03 * invT;
    // species 52: CH3CHO
    species[52] = +4.72945950e+00 - 1.59664290e-03 * T + 1.58449737e-05 * T2 -
                  1.43646527e-08 * T3 + 4.38622240e-12 * T4 -
                  2.15728780e+04 * invT;
    // species 70: iC3H7
    species[70] = +1.44491990e+00 + 1.04995560e-02 * T + 2.56787407e-06 * T2 -
                  4.61906325e-09 * T3 + 1.42565924e-12 * T4 +
                  9.42237240e+03 * invT;
    // species 71: nC3H7
    species[71] = +1.04911730e+00 + 1.30044865e-02 * T + 7.84750533e-07 * T2 -
                  4.89878300e-09 * T3 + 1.87440414e-12 * T4 +
                  1.03123460e+04 * invT;
  } else {
    // species 0: H2
    species[0] = +3.33727920e+00 - 2.47012365e-05 * T + 1.66485593e-07 * T2 -
                 4.48915985e-11 * T3 + 4.00510752e-15 * T4 -
                 9.50158922e+02 * invT;
    // species 1: H
    species[1] = +2.50000001e+00 - 1.15421486e-11 * T + 5.38539827e-15 * T2 -
                 1.18378809e-18 * T3 + 9.96394714e-23 * T4 +
                 2.54736599e+04 * invT;
    // species 2: O
    species[2] = +2.56942078e+00 - 4.29870569e-05 * T + 1.39828196e-08 * T2 -
                 2.50444497e-12 * T3 + 2.45667382e-16 * T4 +
                 2.92175791e+04 * invT;
    // species 3: O2
    species[3] = +3.28253784e+00 + 7.41543770e-04 * T - 2.52655556e-07 * T2 +
                 5.23676387e-11 * T3 - 4.33435588e-15 * T4 -
                 1.08845772e+03 * invT;
    // species 4: OH
    species[4] = +3.09288767e+00 + 2.74214858e-04 * T + 4.21684093e-08 * T2 -
                 2.19865389e-11 * T3 + 2.34824752e-15 * T4 +
                 3.85865700e+03 * invT;
    // species 5: H2O
    species[5] = +3.03399249e+00 + 1.08845902e-03 * T - 5.46908393e-08 * T2 -
                 2.42604967e-11 * T3 + 3.36401984e-15 * T4 -
                 3.00042971e+04 * invT;
    // species 6: HO2
    species[6] = +4.01721090e+00 + 1.11991006e-03 * T - 2.11219383e-07 * T2 +
                 2.85615925e-11 * T3 - 2.15817070e-15 * T4 +
                 1.11856713e+02 * invT;
    // species 7: H2O2
    species[7] = +4.16500285e+00 + 2.45415847e-03 * T - 6.33797417e-07 * T2 +
                 9.27964965e-11 * T3 - 5.75816610e-15 * T4 -
                 1.78617877e+04 * invT;
    // species 8: C
    species[8] = +2.49266888e+00 + 2.39944642e-05 * T - 2.41445007e-08 * T2 +
                 9.35727573e-12 * T3 - 9.74555786e-16 * T4 +
                 8.54512953e+04 * invT;
    // species 9: CH
    species[9] = +2.87846473e+00 + 4.85456840e-04 * T + 4.81485517e-08 * T2 -
                 3.26719623e-11 * T3 + 3.52158766e-15 * T4 +
                 7.10124364e+04 * invT;
    // species 10: CH2
    species[10] = +2.87410113e+00 + 1.82819646e-03 * T - 4.69648657e-07 * T2 +
                  6.50448872e-11 * T3 - 3.75455134e-15 * T4 +
                  4.62636040e+04 * invT;
    // species 11: CH2(S)
    species[11] = +2.29203842e+00 + 2.32794318e-03 * T - 6.70639823e-07 * T2 +
                  1.04476500e-10 * T3 - 6.79432730e-15 * T4 +
                  5.09259997e+04 * invT;
    // species 12: CH3
    species[12] = +2.28571772e+00 + 3.61995018e-03 * T - 9.95714493e-07 * T2 +
                  1.48921161e-10 * T3 - 9.34308788e-15 * T4 +
                  1.67755843e+04 * invT;
    // species 13: CH4
    species[13] = +7.48514950e-02 + 6.69547335e-03 * T - 1.91095270e-06 * T2 +
                  3.05731338e-10 * T3 - 2.03630460e-14 * T4 -
                  9.46834459e+03 * invT;
    // species 14: CO
    species[14] = +2.71518561e+00 + 1.03126372e-03 * T - 3.32941924e-07 * T2 +
                  5.75132520e-11 * T3 - 4.07295432e-15 * T4 -
                  1.41518724e+04 * invT;
    // species 15: CO2
    species[15] = +3.85746029e+00 + 2.20718513e-03 * T - 7.38271347e-07 * T2 +
                  1.30872547e-10 * T3 - 9.44168328e-15 * T4 -
                  4.87591660e+04 * invT;
    // species 16: HCO
    species[16] = +2.77217438e+00 + 2.47847763e-03 * T - 8.28152043e-07 * T2 +
                  1.47290445e-10 * T3 - 1.06701742e-14 * T4 +
                  4.01191815e+03 * invT;
    // species 17: CH2O
    species[17] = +1.76069008e+00 + 4.60000041e-03 * T - 1.47419604e-06 * T2 +
                  2.51603030e-10 * T3 - 1.76771128e-14 * T4 -
                  1.39958323e+04 * invT;
    // species 18: CH2OH
    species[18] = +3.69266569e+00 + 4.32288399e-03 * T - 1.25033707e-06 * T2 +
                  1.96808659e-10 * T3 - 1.29710840e-14 * T4 -
                  3.24250627e+03 * invT;
    // species 19: CH3O
    species[19] = +3.77079900e+00 + 3.93574850e-03 * T - 8.85461333e-07 * T2 +
                  9.86107750e-11 * T3 - 4.22523200e-15 * T4 +
                  1.27832520e+02 * invT;
    // species 20: CH3OH
    species[20] = +1.78970791e+00 + 7.04691460e-03 * T - 2.12166945e-06 * T2 +
                  3.45427713e-10 * T3 - 2.34120440e-14 * T4 -
                  2.53748747e+04 * invT;
    // species 21: C2H
    species[21] = +3.16780652e+00 + 2.37610951e-03 * T - 6.12623590e-07 * T2 +
                  7.60475630e-11 * T3 - 3.54465540e-15 * T4 +
                  6.71210650e+04 * invT;
    // species 22: C2H2
    species[22] = +4.14756964e+00 + 2.98083332e-03 * T - 7.90982840e-07 * T2 +
                  1.16853043e-10 * T3 - 7.22470426e-15 * T4 +
                  2.59359992e+04 * invT;
    // species 23: C2H3
    species[23] = +3.01672400e+00 + 5.16511460e-03 * T - 1.56027450e-06 * T2 +
                  2.54408220e-10 * T3 - 1.72521408e-14 * T4 +
                  3.46128739e+04 * invT;
    // species 24: C2H4
    species[24] = +2.03611116e+00 + 7.32270755e-03 * T - 2.23692638e-06 * T2 +
                  3.68057308e-10 * T3 - 2.51412122e-14 * T4 +
                  4.93988614e+03 * invT;
    // species 25: C2H5
    species[25] = +1.95465642e+00 + 8.69863610e-03 * T - 2.66068889e-06 * T2 +
                  4.38044223e-10 * T3 - 2.99283152e-14 * T4 +
                  1.28575200e+04 * invT;
    // species 26: C2H6
    species[26] = +1.07188150e+00 + 1.08426339e-02 * T - 3.34186890e-06 * T2 +
                  5.53530003e-10 * T3 - 3.80005780e-14 * T4 -
                  1.14263932e+04 * invT;
    // species 27: HCCO
    species[27] = +5.62820580e+00 + 2.04267005e-03 * T - 5.31151567e-07 * T2 +
                  7.15651300e-11 * T3 - 3.88156640e-15 * T4 +
                  1.93272150e+04 * invT;
    // species 28: CH2CO
    species[28] = +4.51129732e+00 + 4.50179872e-03 * T - 1.38979878e-06 * T2 +
                  2.30836470e-10 * T3 - 1.58967640e-14 * T4 -
                  7.55105311e+03 * invT;
    // species 29: HCCOH
    species[29] = +5.92382910e+00 + 3.39618000e-03 * T - 8.55285467e-07 * T2 +
                  1.12469603e-10 * T3 - 5.98802020e-15 * T4 +
                  7.26462600e+03 * invT;
    // species 30: N
    species[30] = +2.41594290e+00 + 8.74453250e-05 * T - 3.96745633e-08 * T2 +
                  7.55656125e-12 * T3 - 4.07219640e-16 * T4 +
                  5.61337730e+04 * invT;
    // species 31: NH
    species[31] = +2.78369280e+00 + 6.64921500e-04 * T - 1.41593490e-07 * T2 +
                  1.95871253e-11 * T3 - 1.10088940e-15 * T4 +
                  4.21208480e+04 * invT;
    // species 32: NH2
    species[32] = +2.83474210e+00 + 1.60365410e-03 * T - 3.11302680e-07 * T2 +
                  3.42573825e-11 * T3 - 1.58412288e-15 * T4 +
                  2.21719570e+04 * invT;
    // species 33: NH3
    species[33] = +2.63445210e+00 + 2.83312800e-03 * T - 5.75955867e-07 * T2 +
                  5.96679025e-11 * T3 - 2.51575720e-15 * T4 -
                  6.54469580e+03 * invT;
    // species 34: NNH
    species[34] = +3.76675440e+00 + 1.44575410e-03 * T - 3.47220667e-07 * T2 +
                  4.21064850e-11 * T3 - 2.01837920e-15 * T4 +
                  2.86506970e+04 * invT;
    // species 35: NO
    species[35] = +3.26060560e+00 + 5.95552150e-04 * T - 1.43056827e-07 * T2 +
                  1.73644173e-11 * T3 - 8.06721980e-16 * T4 +
                  9.92097460e+03 * invT;
    // species 36: NO2
    species[36] = +4.88475420e+00 + 1.08619780e-03 * T - 2.76023020e-07 * T2 +
                  3.93687750e-11 * T3 - 2.10217900e-15 * T4 +
                  2.31649830e+03 * invT;
    // species 37: N2O
    species[37] = +4.82307290e+00 + 1.31351255e-03 * T - 3.19502913e-07 * T2 +
                  4.00017800e-11 * T3 - 1.95504606e-15 * T4 +
                  8.07340480e+03 * invT;
    // species 38: HNO
    species[38] = +2.97925090e+00 + 1.74720295e-03 * T - 2.61832593e-07 * T2 +
                  1.43698985e-11 * T3 - 3.86718320e-17 * T4 +
                  1.17505820e+04 * invT;
    // species 39: CN
    species[39] = +3.74598050e+00 + 2.17253875e-05 * T + 9.90199467e-08 * T2 -
                  1.71629515e-11 * T3 + 8.82683460e-16 * T4 +
                  5.15361880e+04 * invT;
    // species 40: HCN
    species[40] = +3.80223920e+00 + 1.57321140e-03 * T - 3.54406167e-07 * T2 +
                  4.15493925e-11 * T3 - 1.95995140e-15 * T4 +
                  1.44072920e+04 * invT;
    // species 41: H2CN
    species[41] = +5.20970300e+00 + 1.48464555e-03 * T - 9.51863033e-08 * T2 -
                  4.08887500e-11 * T3 + 6.08651780e-15 * T4 +
                  2.76771090e+04 * invT;
    // species 42: HCNN
    species[42] = +5.89463620e+00 + 1.99479795e-03 * T - 5.32746000e-07 * T2 +
                  7.31234875e-11 * T3 - 4.01893720e-15 * T4 +
                  5.34529410e+04 * invT;
    // species 46: NCO
    species[46] = +5.15218450e+00 + 1.15258805e-03 * T - 2.93443843e-07 * T2 +
                  3.69727450e-11 * T3 - 1.81955992e-15 * T4 +
                  1.40041230e+04 * invT;
    // species 47: N2
    species[47] = +2.92664000e+00 + 7.43988400e-04 * T - 1.89492000e-07 * T2 +
                  2.52425950e-11 * T3 - 1.35067020e-15 * T4 -
                  9.22797700e+02 * invT;
    // species 49: C3H7
    species[49] = +7.70269870e+00 + 8.02210150e-03 * T - 1.76110733e-06 * T2 +
                  1.90746475e-10 * T3 - 7.87845680e-15 * T4 +
                  8.29843360e+03 * invT;
    // species 50: C3H8
    species[50] = +7.53413680e+00 + 9.43611950e-03 * T - 2.09061637e-06 * T2 +
                  2.28689123e-10 * T3 - 9.56761380e-15 * T4 -
                  1.64675160e+04 * invT;
    // species 51: CH2CHO
    species[51] = +5.97567000e+00 + 4.06529550e-03 * T - 9.14541333e-07 * T2 +
                  1.01757600e-10 * T3 - 4.35203400e-15 * T4 +
                  4.90321800e+02 * invT;
    // species 52: CH3CHO
    species[52] = +5.40411080e+00 + 5.86152950e-03 * T - 1.40877123e-06 * T2 +
                  1.70931128e-10 * T3 - 8.19697260e-15 * T4 -
                  2.25931220e+04 * invT;
    // species 70: iC3H7
    species[70] = +6.51927410e+00 + 8.61005200e-03 * T - 1.91214057e-06 * T2 +
                  2.10326830e-10 * T3 - 8.91318260e-15 * T4 +
                  7.32271930e+03 * invT;
    // species 71: nC3H7
    species[71] = +7.70974790e+00 + 8.01574250e-03 * T - 1.75734127e-06 * T2 +
                  1.89720880e-10 * T3 - 7.77254380e-15 * T4 +
                  7.97622360e+03 * invT;
  }

  // species with midpoint at T=1100 kelvin
  if (T < 1100) {
    // species 56: CH3F
    species[56] = +2.59623660e+00 + 1.82658470e-03 * T + 4.36774367e-06 * T2 -
                  3.63324725e-09 * T3 + 8.96028540e-13 * T4 -
                  2.90068080e+04 * invT;
    // species 57: CH2F2
    species[57] = +1.73900540e+00 + 5.96896250e-03 * T - 8.97736367e-08 * T2 -
                  1.37973382e-09 * T3 + 4.36270980e-13 * T4 -
                  5.54396840e+04 * invT;
    // species 65: CF
    species[65] = +3.35383910e+00 + 1.04548515e-04 * T + 1.06924770e-06 * T2 -
                  9.17188425e-10 * T3 + 2.39726220e-13 * T4 +
                  2.79077430e+04 * invT;
  } else {
    // species 56: CH3F
    species[56] = +2.64400090e+00 + 4.98625385e-03 * T - 1.32832417e-06 * T2 +
                  1.81286905e-10 * T3 - 9.76879920e-15 * T4 -
                  2.94271460e+04 * invT;
    // species 57: CH2F2
    species[57] = +4.55849840e+00 + 4.15989395e-03 * T - 1.12385660e-06 * T2 +
                  1.54699217e-10 * T3 - 8.39030860e-15 * T4 -
                  5.65062210e+04 * invT;
    // species 65: CF
    species[65] = +3.66496780e+00 + 4.86840320e-04 * T - 1.36994120e-07 * T2 +
                  2.00157188e-11 * T3 - 1.12996136e-15 * T4 +
                  2.77241770e+04 * invT;
  }

  // species with midpoint at T=1150 kelvin
  if (T < 1150) {
    // species 55: F2
    species[55] = +2.66955040e+00 + 2.64709230e-03 * T - 2.15696983e-06 * T2 +
                  9.79583675e-10 * T3 - 1.87690270e-13 * T4 -
                  9.80801280e+02 * invT;
    // species 61: CHF2
    species[61] = +1.83276330e+00 + 6.70819000e-03 * T - 3.18109460e-06 * T2 +
                  7.39824200e-10 * T3 - 5.58399840e-14 * T4 -
                  3.08570560e+04 * invT;
    // species 67: CF2O
    species[67] = +1.17613860e+00 + 1.05434940e-02 * T - 7.97385700e-06 * T2 +
                  3.49872825e-09 * T3 - 6.75210720e-13 * T4 -
                  7.79513030e+04 * invT;
    // species 68: CHFO
    species[68] = +2.11849750e+00 + 5.38699400e-03 * T - 1.83860543e-06 * T2 +
                  1.45379830e-10 * T3 + 4.34084180e-14 * T4 -
                  4.63567050e+04 * invT;
  } else {
    // species 55: F2
    species[55] = +4.05774200e+00 + 3.00016880e-04 * T - 7.30726233e-08 * T2 +
                  1.07876892e-11 * T3 - 6.25176840e-16 * T4 -
                  1.32438600e+03 * invT;
    // species 61: CHF2
    species[61] = +5.44828140e+00 + 2.20582700e-03 * T - 5.80628600e-07 * T2 +
                  7.72998975e-11 * T3 - 4.03523760e-15 * T4 -
                  3.19609500e+04 * invT;
    // species 67: CF2O
    species[67] = +6.79131030e+00 + 1.69152710e-03 * T - 4.76705767e-07 * T2 +
                  6.78064300e-11 * T3 - 3.81047620e-15 * T4 -
                  7.94539770e+04 * invT;
    // species 68: CHFO
    species[68] = +4.81925460e+00 + 2.52709115e-03 * T - 6.71403900e-07 * T2 +
                  9.08977125e-11 * T3 - 4.89448140e-15 * T4 -
                  4.72630780e+04 * invT;
  }

  // species with midpoint at T=1250 kelvin
  if (T < 1250) {
    // species 53: HF
    species[53] = +3.43657390e+00 + 2.43010360e-04 * T - 4.17465700e-07 * T2 +
                  3.41187500e-10 * T3 - 8.19148080e-14 * T4 -
                  3.38000890e+04 * invT;
    // species 59: CF4
    species[59] = +3.29573530e-01 + 1.66348015e-02 * T - 1.29422353e-05 * T2 +
                  5.51483675e-09 * T3 - 9.89674660e-13 * T4 -
                  1.13503610e+05 * invT;
    // species 62: CF3
    species[62] = +1.35728710e+00 + 1.07879025e-02 * T - 7.96732733e-06 * T2 +
                  3.24027725e-09 * T3 - 5.60346300e-13 * T4 -
                  5.73912730e+04 * invT;
    // species 66: CF3O
    species[66] = +1.38723980e+00 + 1.49477700e-02 * T - 1.14248320e-05 * T2 +
                  4.79514250e-09 * T3 - 8.49918700e-13 * T4 -
                  8.03369020e+04 * invT;
    // species 69: CFO
    species[69] = +2.94060800e+00 + 3.73545840e-03 * T - 2.07277720e-06 * T2 +
                  6.57290875e-10 * T3 - 9.46443760e-14 * T4 -
                  2.17922550e+04 * invT;
  } else {
    // species 53: HF
    species[53] = +2.78129810e+00 + 5.19795400e-04 * T - 8.05785000e-08 * T2 +
                  6.71039750e-12 * T3 - 2.19532740e-16 * T4 -
                  3.35041740e+04 * invT;
    // species 59: CF4
    species[59] = +9.80831530e+00 + 1.64134650e-03 * T - 4.46816133e-07 * T2 +
                  6.09345725e-11 * T3 - 3.25723160e-15 * T4 -
                  1.16024990e+05 * invT;
    // species 62: CF3
    species[62] = +7.73167070e+00 + 1.13557320e-03 * T - 2.96832133e-07 * T2 +
                  3.82345850e-11 * T3 - 1.90167516e-15 * T4 -
                  5.91456750e+04 * invT;
    // species 66: CF3O
    species[66] = +9.82040840e+00 + 1.69457915e-03 * T - 4.82179633e-07 * T2 +
                  6.92404250e-11 * T3 - 3.91160680e-15 * T4 -
                  8.25865820e+04 * invT;
    // species 69: CFO
    species[69] = +5.14996370e+00 + 9.24692350e-04 * T - 2.46743957e-07 * T2 +
                  3.31962475e-11 * T3 - 1.76611994e-15 * T4 -
                  2.24883720e+04 * invT;
  }

  // species with midpoint at T=1300 kelvin
  if (T < 1300) {
    // species 58: CHF3
    species[58] = +6.80758290e-01 + 1.19929550e-02 * T - 7.27786600e-06 * T2 +
                  2.49506420e-09 * T3 - 3.70358020e-13 * T4 -
                  8.49894160e+04 * invT;
    // species 60: CH2F
    species[60] = +2.11797450e+00 + 5.11963500e-03 * T - 2.20696307e-06 * T2 +
                  5.94642575e-10 * T3 - 7.78671740e-14 * T4 -
                  4.95741860e+03 * invT;
    // species 63: CHF
    species[63] = +3.34483880e+00 + 1.17730260e-03 * T + 6.46609767e-07 * T2 -
                  6.63126425e-10 * T3 + 1.58233874e-13 * T4 +
                  1.85140140e+04 * invT;
    // species 64: CF2
    species[64] = +2.28591330e+00 + 5.38039300e-03 * T - 3.51273367e-06 * T2 +
                  1.22470345e-09 * T3 - 1.77276856e-13 * T4 -
                  2.35211830e+04 * invT;
  } else {
    // species 58: CHF3
    species[58] = +7.52416890e+00 + 2.61502360e-03 * T - 6.78667733e-07 * T2 +
                  8.93238900e-11 * T3 - 4.61994540e-15 * T4 -
                  8.70225080e+04 * invT;
    // species 60: CH2F
    species[60] = +4.06013010e+00 + 2.73321145e-03 * T - 7.03164633e-07 * T2 +
                  9.36145275e-11 * T3 - 4.94800120e-15 * T4 -
                  5.59276780e+03 * invT;
    // species 63: CHF
    species[63] = +4.48365700e+00 + 8.74817650e-04 * T - 1.68263417e-07 * T2 +
                  2.72381625e-11 * T3 - 1.97579646e-15 * T4 +
                  1.79581230e+04 * invT;
    // species 64: CF2
    species[64] = +5.33120660e+00 + 9.88741900e-04 * T - 3.20082637e-07 * T2 +
                  5.26759225e-11 * T3 - 3.19079540e-15 * T4 -
                  2.43713700e+04 * invT;
  }

  // species with midpoint at T=1368 kelvin
  if (T < 1368) {
    // species 44: HOCN
    species[44] = +3.78604952e+00 + 3.44333961e-03 * T - 1.07162621e-06 * T2 +
                  1.29298942e-10 * T3 + 2.38721576e-15 * T4 -
                  2.82698400e+03 * invT;
  } else {
    // species 44: HOCN
    species[44] = +5.89784885e+00 + 1.58394696e-03 * T - 3.72670213e-07 * T2 +
                  4.43107860e-11 * T3 - 2.08678354e-15 * T4 -
                  3.70653331e+03 * invT;
  }

  // species with midpoint at T=1382 kelvin
  if (T < 1382) {
    // species 43: HCNO
    species[43] = +2.64727989e+00 + 6.37526710e-03 * T - 3.49314120e-06 * T2 +
                  1.10358209e-09 * T3 - 1.51504293e-13 * T4 +
                  1.92990252e+04 * invT;
  } else {
    // species 43: HCNO
    species[43] = +6.59860456e+00 + 1.51389313e-03 * T - 3.59014487e-07 * T2 +
                  4.29166320e-11 * T3 - 2.02878782e-15 * T4 +
                  1.79661339e+04 * invT;
  }

  // species with midpoint at T=1400 kelvin
  if (T < 1400) {
    // species 54: F
    species[54] = +2.90370760e+00 - 3.17648160e-04 * T + 8.82449567e-08 * T2 +
                  1.92265765e-11 * T3 - 1.09050710e-14 * T4 +
                  8.67226920e+03 * invT;
  } else {
    // species 54: F
    species[54] = +2.65116610e+00 - 7.00648550e-05 * T + 1.73078810e-08 * T2 -
                  2.21238612e-12 * T3 + 1.18056028e-16 * T4 +
                  8.75829010e+03 * invT;
  }

  // species with midpoint at T=1478 kelvin
  if (T < 1478) {
    // species 45: HNCO
    species[45] = +3.63096317e+00 + 3.65141179e-03 * T - 7.60166677e-07 * T2 -
                  1.65317825e-10 * T3 + 7.24471504e-14 * T4 -
                  1.55873636e+04 * invT;
  } else {
    // species 45: HNCO
    species[45] = +6.22395134e+00 + 1.58932002e-03 * T - 3.64595850e-07 * T2 +
                  4.26837908e-11 * T3 - 1.99004391e-15 * T4 -
                  1.66599344e+04 * invT;
  }
}

// compute the S/R at the given temperature (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEntropy(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real logT = log(T);

  // species with no change across T
  // species 48: AR
  species[48] = +2.50000000e+00 * logT + 4.36600000e+00;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +2.34433112e+00 * logT + 7.98052075e-03 * T -
                 9.73907550e-06 * T2 + 6.71906980e-09 * T3 -
                 1.84402940e-12 * T4 + 6.83010238e-01;
    // species 1: H
    species[1] = +2.50000000e+00 * logT + 7.05332819e-13 * T -
                 9.97959820e-16 * T2 + 7.66938773e-19 * T3 -
                 2.31933083e-22 * T4 - 4.46682853e-01;
    // species 2: O
    species[2] = +3.16826710e+00 * logT - 3.27931884e-03 * T +
                 3.32153198e-06 * T2 - 2.04268875e-09 * T3 +
                 5.28164927e-13 * T4 + 2.05193346e+00;
    // species 3: O2
    species[3] = +3.78245636e+00 * logT - 2.99673416e-03 * T +
                 4.92365101e-06 * T2 - 3.22709836e-09 * T3 +
                 8.10932092e-13 * T4 + 3.65767573e+00;
    // species 4: OH
    species[4] = +3.99201543e+00 * logT - 2.40131752e-03 * T +
                 2.30896920e-06 * T2 - 1.29371111e-09 * T3 +
                 3.41028675e-13 * T4 - 1.03925458e-01;
    // species 5: H2O
    species[5] = +4.19864056e+00 * logT - 2.03643410e-03 * T +
                 3.26020105e-06 * T2 - 1.82932354e-09 * T3 +
                 4.42994543e-13 * T4 - 8.49032208e-01;
    // species 6: HO2
    species[6] = +4.30179801e+00 * logT - 4.74912051e-03 * T +
                 1.05791445e-05 * T2 - 8.09212980e-09 * T3 +
                 2.32306281e-12 * T4 + 3.71666245e+00;
    // species 7: H2O2
    species[7] = +4.27611269e+00 * logT - 5.42822417e-04 * T +
                 8.36678505e-06 * T2 - 7.19236043e-09 * T3 +
                 2.15613591e-12 * T4 + 3.43505074e+00;
    // species 8: C
    species[8] = +2.55423955e+00 * logT - 3.21537724e-04 * T +
                 3.66896122e-07 * T2 - 2.44078296e-10 * T3 +
                 6.66303615e-14 * T4 + 4.53130848e+00;
    // species 9: CH
    species[9] = +3.48981665e+00 * logT + 3.23835541e-04 * T -
                 8.44495325e-07 * T2 + 1.05405776e-09 * T3 -
                 3.51522668e-13 * T4 + 2.08401108e+00;
    // species 10: CH2
    species[10] = +3.76267867e+00 * logT + 9.68872143e-04 * T +
                  1.39744921e-06 * T2 - 1.28363718e-09 * T3 +
                  4.21854298e-13 * T4 + 1.56253185e+00;
    // species 11: CH2(S)
    species[11] = +4.19860411e+00 * logT - 2.36661419e-03 * T +
                  4.11648110e-06 * T2 - 2.22938660e-09 * T3 +
                  4.85786843e-13 * T4 - 7.69118967e-01;
    // species 12: CH3
    species[12] = +3.67359040e+00 * logT + 2.01095175e-03 * T +
                  2.86510928e-06 * T2 - 2.29039142e-09 * T3 +
                  6.35964335e-13 * T4 + 1.60456433e+00;
    // species 13: CH4
    species[13] = +5.14987613e+00 * logT - 1.36709788e-02 * T +
                  2.45900299e-05 * T2 - 1.61581009e-08 * T3 +
                  4.16734890e-12 * T4 - 4.64130376e+00;
    // species 14: CO
    species[14] = +3.57953347e+00 * logT - 6.10353680e-04 * T +
                  5.08407165e-07 * T2 + 3.02335295e-10 * T3 -
                  2.26106125e-13 * T4 + 3.50840928e+00;
    // species 15: CO2
    species[15] = +2.35677352e+00 * logT + 8.98459677e-03 * T -
                  3.56178134e-06 * T2 + 8.19730073e-10 * T3 -
                  3.59248870e-14 * T4 + 9.90105222e+00;
    // species 16: HCO
    species[16] = +4.22118584e+00 * logT - 3.24392532e-03 * T +
                  6.88997230e-06 * T2 - 4.43813643e-09 * T3 +
                  1.08442216e-12 * T4 + 3.39437243e+00;
    // species 17: CH2O
    species[17] = +4.79372315e+00 * logT - 9.90833369e-03 * T +
                  1.86610004e-05 * T2 - 1.26428420e-08 * T3 +
                  3.29431630e-12 * T4 + 6.02812900e-01;
    // species 18: CH2OH
    species[18] = +3.86388918e+00 * logT + 5.59672304e-03 * T +
                  2.96635895e-06 * T2 - 3.48440040e-09 * T3 +
                  1.09241820e-12 * T4 + 5.47302243e+00;
    // species 19: CH3O
    species[19] = +2.10620400e+00 * logT + 7.21659500e-03 * T +
                  2.66923600e-06 * T2 - 2.45921200e-09 * T3 +
                  5.18902500e-13 * T4 + 1.31521770e+01;
    // species 20: CH3OH
    species[20] = +5.71539582e+00 * logT - 1.52309129e-02 * T +
                  3.26220578e-05 * T2 - 2.36935630e-08 * T3 +
                  6.53381745e-12 * T4 - 1.50409823e+00;
    // species 21: C2H
    species[21] = +2.88965733e+00 * logT + 1.34099611e-02 * T -
                  1.42384751e-05 * T2 + 9.82636817e-09 * T3 -
                  2.73328777e-12 * T4 + 6.22296438e+00;
    // species 22: C2H2
    species[22] = +8.08681094e-01 * logT + 2.33615629e-02 * T -
                  1.77585907e-05 * T2 + 9.33841457e-09 * T3 -
                  2.12518243e-12 * T4 + 1.39397051e+01;
    // species 23: C2H3
    species[23] = +3.21246645e+00 * logT + 1.51479162e-03 * T +
                  1.29604706e-05 * T2 - 1.19219282e-08 * T3 +
                  3.67877182e-12 * T4 + 8.51054025e+00;
    // species 24: C2H4
    species[24] = +3.95920148e+00 * logT - 7.57052247e-03 * T +
                  2.85495146e-05 * T2 - 2.30529584e-08 * T3 +
                  6.74710933e-12 * T4 + 4.09733096e+00;
    // species 25: C2H5
    species[25] = +4.30646568e+00 * logT - 4.18658892e-03 * T +
                  2.48571403e-05 * T2 - 1.99708869e-08 * T3 +
                  5.76272510e-12 * T4 + 4.70720924e+00;
    // species 26: C2H6
    species[26] = +4.29142492e+00 * logT - 5.50154270e-03 * T +
                  2.99719144e-05 * T2 - 2.36155428e-08 * T3 +
                  6.71714427e-12 * T4 + 2.66682316e+00;
    // species 27: HCCO
    species[27] = +2.25172140e+00 * logT + 1.76550210e-02 * T -
                  1.18645505e-05 * T2 + 5.75858633e-09 * T3 -
                  1.26662028e-12 * T4 + 1.24904170e+01;
    // species 28: CH2CO
    species[28] = +2.13583630e+00 * logT + 1.81188721e-02 * T -
                  8.69737370e-06 * T2 + 3.11465856e-09 * T3 -
                  5.03644037e-13 * T4 + 1.22156480e+01;
    // species 29: HCCOH
    species[29] = +1.24237330e+00 * logT + 3.10722010e-02 * T -
                  2.54334320e-05 * T2 + 1.43790437e-08 * T3 -
                  3.50364850e-12 * T4 + 1.38743190e+01;
    // species 30: N
    species[30] = +2.50000000e+00 * logT + 4.19390870e+00;
    // species 31: NH
    species[31] = +3.49290850e+00 * logT + 3.11791980e-04 * T -
                  7.44524200e-07 * T2 + 8.27214733e-10 * T3 -
                  2.58924175e-13 * T4 + 1.84832780e+00;
    // species 32: NH2
    species[32] = +4.20400290e+00 * logT - 2.10613850e-03 * T +
                  3.55341740e-06 * T2 - 1.87050657e-09 * T3 +
                  4.11017925e-13 * T4 - 1.41842480e-01;
    // species 33: NH3
    species[33] = +4.28602740e+00 * logT - 4.66052300e-03 * T +
                  1.08592565e-05 * T2 - 7.60296233e-09 * T3 +
                  2.06595115e-12 * T4 - 6.25372770e-01;
    // species 34: NNH
    species[34] = +4.34469270e+00 * logT - 4.84970720e-03 * T +
                  1.00297295e-05 * T2 - 7.24215467e-09 * T3 +
                  1.98673848e-12 * T4 + 2.97794100e+00;
    // species 35: NO
    species[35] = +4.21847630e+00 * logT - 4.63897600e-03 * T +
                  5.52051100e-06 * T2 - 3.11204513e-09 * T3 +
                  7.00894250e-13 * T4 + 2.28084640e+00;
    // species 36: NO2
    species[36] = +3.94403120e+00 * logT - 1.58542900e-03 * T +
                  8.32890600e-06 * T2 - 6.82514200e-09 * T3 +
                  1.95876410e-12 * T4 + 6.31199170e+00;
    // species 37: N2O
    species[37] = +2.25715020e+00 * logT + 1.13047280e-02 * T -
                  6.83565950e-06 * T2 + 3.22732687e-09 * T3 -
                  7.32679550e-13 * T4 + 1.07579920e+01;
    // species 38: HNO
    species[38] = +4.53349160e+00 * logT - 5.66961710e-03 * T +
                  9.23660350e-06 * T2 - 5.71236467e-09 * T3 +
                  1.38636433e-12 * T4 + 1.74984170e+00;
    // species 39: CN
    species[39] = +3.61293510e+00 * logT - 9.55513270e-04 * T +
                  1.07214885e-06 * T2 - 1.05054410e-10 * T3 -
                  1.16075890e-13 * T4 + 3.98049950e+00;
    // species 40: HCN
    species[40] = +2.25898860e+00 * logT + 1.00511700e-02 * T -
                  6.67588150e-06 * T2 + 3.36411633e-09 * T3 -
                  7.52225700e-13 * T4 + 8.91644190e+00;
    // species 41: H2CN
    species[41] = +2.85166100e+00 * logT + 5.69523310e-03 * T +
                  5.35570000e-07 * T2 - 5.40870667e-10 * T3 -
                  5.87777025e-14 * T4 + 8.99275110e+00;
    // species 42: HCNN
    species[42] = +2.52431940e+00 * logT + 1.59606190e-02 * T -
                  9.40817700e-06 * T2 + 4.04184667e-09 * T3 -
                  8.08934450e-13 * T4 + 1.16758700e+01;
    // species 46: NCO
    species[46] = +2.82693080e+00 * logT + 8.80516880e-03 * T -
                  4.19330670e-06 * T2 + 1.60056547e-09 * T3 -
                  3.32839875e-13 * T4 + 9.55046460e+00;
    // species 47: N2
    species[47] = +3.29867700e+00 * logT + 1.40824040e-03 * T -
                  1.98161100e-06 * T2 + 1.88050500e-09 * T3 -
                  6.11213500e-13 * T4 + 3.95037200e+00;
    // species 49: C3H7
    species[49] = +1.05155180e+00 * logT + 2.59919800e-02 * T +
                  1.19002700e-06 * T2 - 6.53652300e-09 * T3 +
                  2.34331175e-12 * T4 + 2.11225590e+01;
    // species 50: C3H8
    species[50] = +9.33553810e-01 * logT + 2.64245790e-02 * T +
                  3.05298635e-06 * T2 - 7.32583300e-09 * T3 +
                  2.37873132e-12 * T4 + 1.92016910e+01;
    // species 51: CH2CHO
    species[51] = +3.40906200e+00 * logT + 1.07385740e-02 * T +
                  9.45746000e-07 * T2 - 2.38619433e-09 * T3 +
                  7.16846250e-13 * T4 + 9.55829000e+00;
    // species 52: CH3CHO
    species[52] = +4.72945950e+00 * logT - 3.19328580e-03 * T +
                  2.37674605e-05 * T2 - 1.91528703e-08 * T3 +
                  5.48277800e-12 * T4 + 4.10301590e+00;
    // species 70: iC3H7
    species[70] = +1.44491990e+00 * logT + 2.09991120e-02 * T +
                  3.85181110e-06 * T2 - 6.15875100e-09 * T3 +
                  1.78207405e-12 * T4 + 2.01163170e+01;
    // species 71: nC3H7
    species[71] = +1.04911730e+00 * logT + 2.60089730e-02 * T +
                  1.17712580e-06 * T2 - 6.53171067e-09 * T3 +
                  2.34300518e-12 * T4 + 2.11360340e+01;
  } else {
    // species 0: H2
    species[0] = +3.33727920e+00 * logT - 4.94024731e-05 * T +
                 2.49728389e-07 * T2 - 5.98554647e-11 * T3 +
                 5.00638440e-15 * T4 - 3.20502331e+00;
    // species 1: H
    species[1] = +2.50000001e+00 * logT - 2.30842973e-11 * T +
                 8.07809740e-15 * T2 - 1.57838412e-18 * T3 +
                 1.24549339e-22 * T4 - 4.46682914e-01;
    // species 2: O
    species[2] = +2.56942078e+00 * logT - 8.59741137e-05 * T +
                 2.09742295e-08 * T2 - 3.33925997e-12 * T3 +
                 3.07084227e-16 * T4 + 4.78433864e+00;
    // species 3: O2
    species[3] = +3.28253784e+00 * logT + 1.48308754e-03 * T -
                 3.78983334e-07 * T2 + 6.98235183e-11 * T3 -
                 5.41794485e-15 * T4 + 5.45323129e+00;
    // species 4: OH
    species[4] = +3.09288767e+00 * logT + 5.48429716e-04 * T +
                 6.32526140e-08 * T2 - 2.93153852e-11 * T3 +
                 2.93530940e-15 * T4 + 4.47669610e+00;
    // species 5: H2O
    species[5] = +3.03399249e+00 * logT + 2.17691804e-03 * T -
                 8.20362590e-08 * T2 - 3.23473290e-11 * T3 +
                 4.20502480e-15 * T4 + 4.96677010e+00;
    // species 6: HO2
    species[6] = +4.01721090e+00 * logT + 2.23982013e-03 * T -
                 3.16829075e-07 * T2 + 3.80821233e-11 * T3 -
                 2.69771337e-15 * T4 + 3.78510215e+00;
    // species 7: H2O2
    species[7] = +4.16500285e+00 * logT + 4.90831694e-03 * T -
                 9.50696125e-07 * T2 + 1.23728662e-10 * T3 -
                 7.19770763e-15 * T4 + 2.91615662e+00;
    // species 8: C
    species[8] = +2.49266888e+00 * logT + 4.79889284e-05 * T -
                 3.62167510e-08 * T2 + 1.24763676e-11 * T3 -
                 1.21819473e-15 * T4 + 4.80150373e+00;
    // species 9: CH
    species[9] = +2.87846473e+00 * logT + 9.70913681e-04 * T +
                 7.22228275e-08 * T2 - 4.35626163e-11 * T3 +
                 4.40198457e-15 * T4 + 5.48497999e+00;
    // species 10: CH2
    species[10] = +2.87410113e+00 * logT + 3.65639292e-03 * T -
                  7.04472985e-07 * T2 + 8.67265163e-11 * T3 -
                  4.69318918e-15 * T4 + 6.17119324e+00;
    // species 11: CH2(S)
    species[11] = +2.29203842e+00 * logT + 4.65588637e-03 * T -
                  1.00595973e-06 * T2 + 1.39302000e-10 * T3 -
                  8.49290912e-15 * T4 + 8.62650169e+00;
    // species 12: CH3
    species[12] = +2.28571772e+00 * logT + 7.23990037e-03 * T -
                  1.49357174e-06 * T2 + 1.98561548e-10 * T3 -
                  1.16788599e-14 * T4 + 8.48007179e+00;
    // species 13: CH4
    species[13] = +7.48514950e-02 * logT + 1.33909467e-02 * T -
                  2.86642905e-06 * T2 + 4.07641783e-10 * T3 -
                  2.54538075e-14 * T4 + 1.84373180e+01;
    // species 14: CO
    species[14] = +2.71518561e+00 * logT + 2.06252743e-03 * T -
                  4.99412886e-07 * T2 + 7.66843360e-11 * T3 -
                  5.09119290e-15 * T4 + 7.81868772e+00;
    // species 15: CO2
    species[15] = +3.85746029e+00 * logT + 4.41437026e-03 * T -
                  1.10740702e-06 * T2 + 1.74496729e-10 * T3 -
                  1.18021041e-14 * T4 + 2.27163806e+00;
    // species 16: HCO
    species[16] = +2.77217438e+00 * logT + 4.95695526e-03 * T -
                  1.24222806e-06 * T2 + 1.96387259e-10 * T3 -
                  1.33377178e-14 * T4 + 9.79834492e+00;
    // species 17: CH2O
    species[17] = +1.76069008e+00 * logT + 9.20000082e-03 * T -
                  2.21129406e-06 * T2 + 3.35470707e-10 * T3 -
                  2.20963910e-14 * T4 + 1.36563230e+01;
    // species 18: CH2OH
    species[18] = +3.69266569e+00 * logT + 8.64576797e-03 * T -
                  1.87550560e-06 * T2 + 2.62411545e-10 * T3 -
                  1.62138550e-14 * T4 + 5.81043215e+00;
    // species 19: CH3O
    species[19] = +3.77079900e+00 * logT + 7.87149700e-03 * T -
                  1.32819200e-06 * T2 + 1.31481033e-10 * T3 -
                  5.28154000e-15 * T4 + 2.92957500e+00;
    // species 20: CH3OH
    species[20] = +1.78970791e+00 * logT + 1.40938292e-02 * T -
                  3.18250418e-06 * T2 + 4.60570283e-10 * T3 -
                  2.92650550e-14 * T4 + 1.45023623e+01;
    // species 21: C2H
    species[21] = +3.16780652e+00 * logT + 4.75221902e-03 * T -
                  9.18935385e-07 * T2 + 1.01396751e-10 * T3 -
                  4.43081925e-15 * T4 + 6.63589475e+00;
    // species 22: C2H2
    species[22] = +4.14756964e+00 * logT + 5.96166664e-03 * T -
                  1.18647426e-06 * T2 + 1.55804057e-10 * T3 -
                  9.03088033e-15 * T4 - 1.23028121e+00;
    // species 23: C2H3
    species[23] = +3.01672400e+00 * logT + 1.03302292e-02 * T -
                  2.34041174e-06 * T2 + 3.39210960e-10 * T3 -
                  2.15651760e-14 * T4 + 7.78732378e+00;
    // species 24: C2H4
    species[24] = +2.03611116e+00 * logT + 1.46454151e-02 * T -
                  3.35538958e-06 * T2 + 4.90743077e-10 * T3 -
                  3.14265152e-14 * T4 + 1.03053693e+01;
    // species 25: C2H5
    species[25] = +1.95465642e+00 * logT + 1.73972722e-02 * T -
                  3.99103334e-06 * T2 + 5.84058963e-10 * T3 -
                  3.74103940e-14 * T4 + 1.34624343e+01;
    // species 26: C2H6
    species[26] = +1.07188150e+00 * logT + 2.16852677e-02 * T -
                  5.01280335e-06 * T2 + 7.38040003e-10 * T3 -
                  4.75007225e-14 * T4 + 1.51156107e+01;
    // species 27: HCCO
    species[27] = +5.62820580e+00 * logT + 4.08534010e-03 * T -
                  7.96727350e-07 * T2 + 9.54201733e-11 * T3 -
                  4.85195800e-15 * T4 - 3.93025950e+00;
    // species 28: CH2CO
    species[28] = +4.51129732e+00 * logT + 9.00359745e-03 * T -
                  2.08469817e-06 * T2 + 3.07781961e-10 * T3 -
                  1.98709550e-14 * T4 + 6.32247205e-01;
    // species 29: HCCOH
    species[29] = +5.92382910e+00 * logT + 6.79236000e-03 * T -
                  1.28292820e-06 * T2 + 1.49959470e-10 * T3 -
                  7.48502525e-15 * T4 - 7.60177420e+00;
    // species 30: N
    species[30] = +2.41594290e+00 * logT + 1.74890650e-04 * T -
                  5.95118450e-08 * T2 + 1.00754150e-11 * T3 -
                  5.09024550e-16 * T4 + 4.64960960e+00;
    // species 31: NH
    species[31] = +2.78369280e+00 * logT + 1.32984300e-03 * T -
                  2.12390235e-07 * T2 + 2.61161670e-11 * T3 -
                  1.37611175e-15 * T4 + 5.74077990e+00;
    // species 32: NH2
    species[32] = +2.83474210e+00 * logT + 3.20730820e-03 * T -
                  4.66954020e-07 * T2 + 4.56765100e-11 * T3 -
                  1.98015360e-15 * T4 + 6.52041630e+00;
    // species 33: NH3
    species[33] = +2.63445210e+00 * logT + 5.66625600e-03 * T -
                  8.63933800e-07 * T2 + 7.95572033e-11 * T3 -
                  3.14469650e-15 * T4 + 6.56629280e+00;
    // species 34: NNH
    species[34] = +3.76675440e+00 * logT + 2.89150820e-03 * T -
                  5.20831000e-07 * T2 + 5.61419800e-11 * T3 -
                  2.52297400e-15 * T4 + 4.47050670e+00;
    // species 35: NO
    species[35] = +3.26060560e+00 * logT + 1.19110430e-03 * T -
                  2.14585240e-07 * T2 + 2.31525563e-11 * T3 -
                  1.00840247e-15 * T4 + 6.36930270e+00;
    // species 36: NO2
    species[36] = +4.88475420e+00 * logT + 2.17239560e-03 * T -
                  4.14034530e-07 * T2 + 5.24917000e-11 * T3 -
                  2.62772375e-15 * T4 - 1.17416950e-01;
    // species 37: N2O
    species[37] = +4.82307290e+00 * logT + 2.62702510e-03 * T -
                  4.79254370e-07 * T2 + 5.33357067e-11 * T3 -
                  2.44380757e-15 * T4 - 2.20172070e+00;
    // species 38: HNO
    species[38] = +2.97925090e+00 * logT + 3.49440590e-03 * T -
                  3.92748890e-07 * T2 + 1.91598647e-11 * T3 -
                  4.83397900e-17 * T4 + 8.60637280e+00;
    // species 39: CN
    species[39] = +3.74598050e+00 * logT + 4.34507750e-05 * T +
                  1.48529920e-07 * T2 - 2.28839353e-11 * T3 +
                  1.10335433e-15 * T4 + 2.78676010e+00;
    // species 40: HCN
    species[40] = +3.80223920e+00 * logT + 3.14642280e-03 * T -
                  5.31609250e-07 * T2 + 5.53991900e-11 * T3 -
                  2.44993925e-15 * T4 + 1.57546010e+00;
    // species 41: H2CN
    species[41] = +5.20970300e+00 * logT + 2.96929110e-03 * T -
                  1.42779455e-07 * T2 - 5.45183333e-11 * T3 +
                  7.60814725e-15 * T4 - 4.44447800e+00;
    // species 42: HCNN
    species[42] = +5.89463620e+00 * logT + 3.98959590e-03 * T -
                  7.99119000e-07 * T2 + 9.74979833e-11 * T3 -
                  5.02367150e-15 * T4 - 5.10305020e+00;
    // species 46: NCO
    species[46] = +5.15218450e+00 * logT + 2.30517610e-03 * T -
                  4.40165765e-07 * T2 + 4.92969933e-11 * T3 -
                  2.27444990e-15 * T4 - 2.54426600e+00;
    // species 47: N2
    species[47] = +2.92664000e+00 * logT + 1.48797680e-03 * T -
                  2.84238000e-07 * T2 + 3.36567933e-11 * T3 -
                  1.68833775e-15 * T4 + 5.98052800e+00;
    // species 49: C3H7
    species[49] = +7.70269870e+00 * logT + 1.60442030e-02 * T -
                  2.64166100e-06 * T2 + 2.54328633e-10 * T3 -
                  9.84807100e-15 * T4 - 1.54801800e+01;
    // species 50: C3H8
    species[50] = +7.53413680e+00 * logT + 1.88722390e-02 * T -
                  3.13592455e-06 * T2 + 3.04918830e-10 * T3 -
                  1.19595173e-14 * T4 - 1.78923490e+01;
    // species 51: CH2CHO
    species[51] = +5.97567000e+00 * logT + 8.13059100e-03 * T -
                  1.37181200e-06 * T2 + 1.35676800e-10 * T3 -
                  5.44004250e-15 * T4 - 5.04525100e+00;
    // species 52: CH3CHO
    species[52] = +5.40411080e+00 * logT + 1.17230590e-02 * T -
                  2.11315685e-06 * T2 + 2.27908170e-10 * T3 -
                  1.02462158e-14 * T4 - 3.48079170e+00;
    // species 70: iC3H7
    species[70] = +6.51927410e+00 * logT + 1.72201040e-02 * T -
                  2.86821085e-06 * T2 + 2.80435773e-10 * T3 -
                  1.11414782e-14 * T4 - 9.08302150e+00;
    // species 71: nC3H7
    species[71] = +7.70974790e+00 * logT + 1.60314850e-02 * T -
                  2.63601190e-06 * T2 + 2.52961173e-10 * T3 -
                  9.71567975e-15 * T4 - 1.55152970e+01;
  }

  // species with midpoint at T=1100 kelvin
  if (T < 1100) {
    // species 56: CH3F
    species[56] = +2.59623660e+00 * logT + 3.65316940e-03 * T +
                  6.55161550e-06 * T2 - 4.84432967e-09 * T3 +
                  1.12003568e-12 * T4 + 1.04822670e+01;
    // species 57: CH2F2
    species[57] = +1.73900540e+00 * logT + 1.19379250e-02 * T -
                  1.34660455e-07 * T2 - 1.83964510e-09 * T3 +
                  5.45338725e-13 * T4 + 1.62342410e+01;
    // species 65: CF
    species[65] = +3.35383910e+00 * logT + 2.09097030e-04 * T +
                  1.60387155e-06 * T2 - 1.22291790e-09 * T3 +
                  2.99657775e-13 * T4 + 6.33463090e+00;
  } else {
    // species 56: CH3F
    species[56] = +2.64400090e+00 * logT + 9.97250770e-03 * T -
                  1.99248625e-06 * T2 + 2.41715873e-10 * T3 -
                  1.22109990e-14 * T4 + 8.42305760e+00;
    // species 57: CH2F2
    species[57] = +4.55849840e+00 * logT + 8.31978790e-03 * T -
                  1.68578490e-06 * T2 + 2.06265623e-10 * T3 -
                  1.04878858e-14 * T4 + 4.36636700e-01;
    // species 65: CF
    species[65] = +3.66496780e+00 * logT + 9.73680640e-04 * T -
                  2.05491180e-07 * T2 + 2.66876250e-11 * T3 -
                  1.41245170e-15 * T4 + 4.28163500e+00;
  }

  // species with midpoint at T=1150 kelvin
  if (T < 1150) {
    // species 55: F2
    species[55] = +2.66955040e+00 * logT + 5.29418460e-03 * T -
                  3.23545475e-06 * T2 + 1.30611157e-09 * T3 -
                  2.34612838e-13 * T4 + 7.82659130e+00;
    // species 61: CHF2
    species[61] = +1.83276330e+00 * logT + 1.34163800e-02 * T -
                  4.77164190e-06 * T2 + 9.86432267e-10 * T3 -
                  6.97999800e-14 * T4 + 1.67588830e+01;
    // species 67: CF2O
    species[67] = +1.17613860e+00 * logT + 2.10869880e-02 * T -
                  1.19607855e-05 * T2 + 4.66497100e-09 * T3 -
                  8.44013400e-13 * T4 + 1.91133670e+01;
    // species 68: CHFO
    species[68] = +2.11849750e+00 * logT + 1.07739880e-02 * T -
                  2.75790815e-06 * T2 + 1.93839773e-10 * T3 +
                  5.42605225e-14 * T4 + 1.46524340e+01;
  } else {
    // species 55: F2
    species[55] = +4.05774200e+00 * logT + 6.00033760e-04 * T -
                  1.09608935e-07 * T2 + 1.43835857e-11 * T3 -
                  7.81471050e-16 * T4 + 8.63213660e-01;
    // species 61: CHF2
    species[61] = +5.44828140e+00 * logT + 4.41165400e-03 * T -
                  8.70942900e-07 * T2 + 1.03066530e-10 * T3 -
                  5.04404700e-15 * T4 - 2.29455250e+00;
    // species 67: CF2O
    species[67] = +6.79131030e+00 * logT + 3.38305420e-03 * T -
                  7.15058650e-07 * T2 + 9.04085733e-11 * T3 -
                  4.76309525e-15 * T4 - 9.48311930e+00;
    // species 68: CHFO
    species[68] = +4.81925460e+00 * logT + 5.05418230e-03 * T -
                  1.00710585e-06 * T2 + 1.21196950e-10 * T3 -
                  6.11810175e-15 * T4 + 9.72251190e-02;
  }

  // species with midpoint at T=1250 kelvin
  if (T < 1250) {
    // species 53: HF
    species[53] = +3.43657390e+00 * logT + 4.86020720e-04 * T -
                  6.26198550e-07 * T2 + 4.54916667e-10 * T3 -
                  1.02393510e-13 * T4 + 1.20681840e+00;
    // species 59: CF4
    species[59] = +3.29573530e-01 * logT + 3.32696030e-02 * T -
                  1.94133530e-05 * T2 + 7.35311567e-09 * T3 -
                  1.23709333e-12 * T4 + 2.12016510e+01;
    // species 62: CF3
    species[62] = +1.35728710e+00 * logT + 2.15758050e-02 * T -
                  1.19509910e-05 * T2 + 4.32036967e-09 * T3 -
                  7.00432875e-13 * T4 + 1.86473760e+01;
    // species 66: CF3O
    species[66] = +1.38723980e+00 * logT + 2.98955400e-02 * T -
                  1.71372480e-05 * T2 + 6.39352333e-09 * T3 -
                  1.06239838e-12 * T4 + 1.97275940e+01;
    // species 69: CFO
    species[69] = +2.94060800e+00 * logT + 7.47091680e-03 * T -
                  3.10916580e-06 * T2 + 8.76387833e-10 * T3 -
                  1.18305470e-13 * T4 + 1.11689080e+01;
  } else {
    // species 53: HF
    species[53] = +2.78129810e+00 * logT + 1.03959080e-03 * T -
                  1.20867750e-07 * T2 + 8.94719667e-12 * T3 -
                  2.74415925e-16 * T4 + 5.01970120e+00;
    // species 59: CF4
    species[59] = +9.80831530e+00 * logT + 3.28269300e-03 * T -
                  6.70224200e-07 * T2 + 8.12460967e-11 * T3 -
                  4.07153950e-15 * T4 - 2.70002370e+01;
    // species 62: CF3
    species[62] = +7.73167070e+00 * logT + 2.27114640e-03 * T -
                  4.45248200e-07 * T2 + 5.09794467e-11 * T3 -
                  2.37709395e-15 * T4 - 1.40201930e+01;
    // species 66: CF3O
    species[66] = +9.82040840e+00 * logT + 3.38915830e-03 * T -
                  7.23269450e-07 * T2 + 9.23205667e-11 * T3 -
                  4.88950850e-15 * T4 - 2.31971150e+01;
    // species 69: CFO
    species[69] = +5.14996370e+00 * logT + 1.84938470e-03 * T -
                  3.70115935e-07 * T2 + 4.42616633e-11 * T3 -
                  2.20764992e-15 * T4 - 4.96830000e-01;
  }

  // species with midpoint at T=1300 kelvin
  if (T < 1300) {
    // species 58: CHF3
    species[58] = +6.80758290e-01 * logT + 2.39859100e-02 * T -
                  1.09167990e-05 * T2 + 3.32675227e-09 * T3 -
                  4.62947525e-13 * T4 + 2.10617420e+01;
    // species 60: CH2F
    species[60] = +2.11797450e+00 * logT + 1.02392700e-02 * T -
                  3.31044460e-06 * T2 + 7.92856767e-10 * T3 -
                  9.73339675e-14 * T4 + 1.33393560e+01;
    // species 63: CHF
    species[63] = +3.34483880e+00 * logT + 2.35460520e-03 * T +
                  9.69914650e-07 * T2 - 8.84168567e-10 * T3 +
                  1.97792342e-13 * T4 + 7.05285970e+00;
    // species 64: CF2
    species[64] = +2.28591330e+00 * logT + 1.07607860e-02 * T -
                  5.26910050e-06 * T2 + 1.63293793e-09 * T3 -
                  2.21596070e-13 * T4 + 1.31347730e+01;
  } else {
    // species 58: CHF3
    species[58] = +7.52416890e+00 * logT + 5.23004720e-03 * T -
                  1.01800160e-06 * T2 + 1.19098520e-10 * T3 -
                  5.77493175e-15 * T4 - 1.46111910e+01;
    // species 60: CH2F
    species[60] = +4.06013010e+00 * logT + 5.46642290e-03 * T -
                  1.05474695e-06 * T2 + 1.24819370e-10 * T3 -
                  6.18500150e-15 * T4 + 3.01378780e+00;
    // species 63: CHF
    species[63] = +4.48365700e+00 * logT + 1.74963530e-03 * T -
                  2.52395125e-07 * T2 + 3.63175500e-11 * T3 -
                  2.46974557e-15 * T4 + 2.89222300e-01;
    // species 64: CF2
    species[64] = +5.33120660e+00 * logT + 1.97748380e-03 * T -
                  4.80123955e-07 * T2 + 7.02345633e-11 * T3 -
                  3.98849425e-15 * T4 - 2.56367180e+00;
  }

  // species with midpoint at T=1368 kelvin
  if (T < 1368) {
    // species 44: HOCN
    species[44] = +3.78604952e+00 * logT + 6.88667922e-03 * T -
                  1.60743932e-06 * T2 + 1.72398589e-10 * T3 +
                  2.98401970e-15 * T4 + 5.63292162e+00;
  } else {
    // species 44: HOCN
    species[44] = +5.89784885e+00 * logT + 3.16789393e-03 * T -
                  5.59005320e-07 * T2 + 5.90810480e-11 * T3 -
                  2.60847942e-15 * T4 - 6.18167825e+00;
  }

  // species with midpoint at T=1382 kelvin
  if (T < 1382) {
    // species 43: HCNO
    species[43] = +2.64727989e+00 * logT + 1.27505342e-02 * T -
                  5.23971180e-06 * T2 + 1.47144279e-09 * T3 -
                  1.89380367e-13 * T4 + 1.07332972e+01;
  } else {
    // species 43: HCNO
    species[43] = +6.59860456e+00 * logT + 3.02778626e-03 * T -
                  5.38521730e-07 * T2 + 5.72221760e-11 * T3 -
                  2.53598478e-15 * T4 - 1.03306599e+01;
  }

  // species with midpoint at T=1400 kelvin
  if (T < 1400) {
    // species 54: F
    species[54] = +2.90370760e+00 * logT - 6.35296320e-04 * T +
                  1.32367435e-07 * T2 + 2.56354353e-11 * T3 -
                  1.36313387e-14 * T4 + 2.70828000e+00;
  } else {
    // species 54: F
    species[54] = +2.65116610e+00 * logT - 1.40129710e-04 * T +
                  2.59618215e-08 * T2 - 2.94984817e-12 * T3 +
                  1.47570035e-16 * T4 + 4.07857430e+00;
  }

  // species with midpoint at T=1478 kelvin
  if (T < 1478) {
    // species 45: HNCO
    species[45] = +3.63096317e+00 * logT + 7.30282357e-03 * T -
                  1.14025001e-06 * T2 - 2.20423766e-10 * T3 +
                  9.05589380e-14 * T4 + 6.19457727e+00;
  } else {
    // species 45: HNCO
    species[45] = +6.22395134e+00 * logT + 3.17864004e-03 * T -
                  5.46893775e-07 * T2 + 5.69117210e-11 * T3 -
                  2.48755489e-15 * T4 - 8.38224741e+00;
  }
}

// compute d(Cp/R)/dT and d(Cv/R)/dT at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
dcvpRdT(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;

  // species with no change across T
  // species 48: AR
  species[48] = 0.0;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    species[0] = +7.98052075e-03 - 3.89563020e-05 * T + 6.04716282e-08 * T2 -
                 2.95044704e-11 * T3;
    // species 1: H
    species[1] = +7.05332819e-13 - 3.99183928e-15 * T + 6.90244896e-18 * T2 -
                 3.71092933e-21 * T3;
    // species 2: O
    species[2] = -3.27931884e-03 + 1.32861279e-05 * T - 1.83841987e-08 * T2 +
                 8.45063884e-12 * T3;
    // species 3: O2
    species[3] = -2.99673416e-03 + 1.96946040e-05 * T - 2.90438853e-08 * T2 +
                 1.29749135e-11 * T3;
    // species 4: OH
    species[4] = -2.40131752e-03 + 9.23587682e-06 * T - 1.16434000e-08 * T2 +
                 5.45645880e-12 * T3;
    // species 5: H2O
    species[5] = -2.03643410e-03 + 1.30408042e-05 * T - 1.64639119e-08 * T2 +
                 7.08791268e-12 * T3;
    // species 6: HO2
    species[6] = -4.74912051e-03 + 4.23165782e-05 * T - 7.28291682e-08 * T2 +
                 3.71690050e-11 * T3;
    // species 7: H2O2
    species[7] = -5.42822417e-04 + 3.34671402e-05 * T - 6.47312439e-08 * T2 +
                 3.44981745e-11 * T3;
    // species 8: C
    species[8] = -3.21537724e-04 + 1.46758449e-06 * T - 2.19670467e-09 * T2 +
                 1.06608578e-12 * T3;
    // species 9: CH
    species[9] = +3.23835541e-04 - 3.37798130e-06 * T + 9.48651981e-09 * T2 -
                 5.62436268e-12 * T3;
    // species 10: CH2
    species[10] = +9.68872143e-04 + 5.58979682e-06 * T - 1.15527346e-08 * T2 +
                  6.74966876e-12 * T3;
    // species 11: CH2(S)
    species[11] = -2.36661419e-03 + 1.64659244e-05 * T - 2.00644794e-08 * T2 +
                  7.77258948e-12 * T3;
    // species 12: CH3
    species[12] = +2.01095175e-03 + 1.14604371e-05 * T - 2.06135228e-08 * T2 +
                  1.01754294e-11 * T3;
    // species 13: CH4
    species[13] = -1.36709788e-02 + 9.83601198e-05 * T - 1.45422908e-07 * T2 +
                  6.66775824e-11 * T3;
    // species 14: CO
    species[14] = -6.10353680e-04 + 2.03362866e-06 * T + 2.72101765e-09 * T2 -
                  3.61769800e-12 * T3;
    // species 15: CO2
    species[15] = +8.98459677e-03 - 1.42471254e-05 * T + 7.37757066e-09 * T2 -
                  5.74798192e-13 * T3;
    // species 16: HCO
    species[16] = -3.24392532e-03 + 2.75598892e-05 * T - 3.99432279e-08 * T2 +
                  1.73507546e-11 * T3;
    // species 17: CH2O
    species[17] = -9.90833369e-03 + 7.46440016e-05 * T - 1.13785578e-07 * T2 +
                  5.27090608e-11 * T3;
    // species 18: CH2OH
    species[18] = +5.59672304e-03 + 1.18654358e-05 * T - 3.13596036e-08 * T2 +
                  1.74786911e-11 * T3;
    // species 19: CH3O
    species[19] = +7.21659500e-03 + 1.06769440e-05 * T - 2.21329080e-08 * T2 +
                  8.30244000e-12 * T3;
    // species 20: CH3OH
    species[20] = -1.52309129e-02 + 1.30488231e-04 * T - 2.13242067e-07 * T2 +
                  1.04541079e-10 * T3;
    // species 21: C2H
    species[21] = +1.34099611e-02 - 5.69539002e-05 * T + 8.84373135e-08 * T2 -
                  4.37326044e-11 * T3;
    // species 22: C2H2
    species[22] = +2.33615629e-02 - 7.10343630e-05 * T + 8.40457311e-08 * T2 -
                  3.40029190e-11 * T3;
    // species 23: C2H3
    species[23] = +1.51479162e-03 + 5.18418824e-05 * T - 1.07297354e-07 * T2 +
                  5.88603492e-11 * T3;
    // species 24: C2H4
    species[24] = -7.57052247e-03 + 1.14198058e-04 * T - 2.07476626e-07 * T2 +
                  1.07953749e-10 * T3;
    // species 25: C2H5
    species[25] = -4.18658892e-03 + 9.94285614e-05 * T - 1.79737982e-07 * T2 +
                  9.22036016e-11 * T3;
    // species 26: C2H6
    species[26] = -5.50154270e-03 + 1.19887658e-04 * T - 2.12539886e-07 * T2 +
                  1.07474308e-10 * T3;
    // species 27: HCCO
    species[27] = +1.76550210e-02 - 4.74582020e-05 * T + 5.18272770e-08 * T2 -
                  2.02659244e-11 * T3;
    // species 28: CH2CO
    species[28] = +1.81188721e-02 - 3.47894948e-05 * T + 2.80319270e-08 * T2 -
                  8.05830460e-12 * T3;
    // species 29: HCCOH
    species[29] = +3.10722010e-02 - 1.01733728e-04 * T + 1.29411393e-07 * T2 -
                  5.60583760e-11 * T3;
    // species 30: N
    species[30] = 0.0;
    // species 31: NH
    species[31] = +3.11791980e-04 - 2.97809680e-06 * T + 7.44493260e-09 * T2 -
                  4.14278680e-12 * T3;
    // species 32: NH2
    species[32] = -2.10613850e-03 + 1.42136696e-05 * T - 1.68345591e-08 * T2 +
                  6.57628680e-12 * T3;
    // species 33: NH3
    species[33] = -4.66052300e-03 + 4.34370260e-05 * T - 6.84266610e-08 * T2 +
                  3.30552184e-11 * T3;
    // species 34: NNH
    species[34] = -4.84970720e-03 + 4.01189180e-05 * T - 6.51793920e-08 * T2 +
                  3.17878156e-11 * T3;
    // species 35: NO
    species[35] = -4.63897600e-03 + 2.20820440e-05 * T - 2.80084062e-08 * T2 +
                  1.12143080e-11 * T3;
    // species 36: NO2
    species[36] = -1.58542900e-03 + 3.33156240e-05 * T - 6.14262780e-08 * T2 +
                  3.13402256e-11 * T3;
    // species 37: N2O
    species[37] = +1.13047280e-02 - 2.73426380e-05 * T + 2.90459418e-08 * T2 -
                  1.17228728e-11 * T3;
    // species 38: HNO
    species[38] = -5.66961710e-03 + 3.69464140e-05 * T - 5.14112820e-08 * T2 +
                  2.21818292e-11 * T3;
    // species 39: CN
    species[39] = -9.55513270e-04 + 4.28859540e-06 * T - 9.45489690e-10 * T2 -
                  1.85721424e-12 * T3;
    // species 40: HCN
    species[40] = +1.00511700e-02 - 2.67035260e-05 * T + 3.02770470e-08 * T2 -
                  1.20356112e-11 * T3;
    // species 41: H2CN
    species[41] = +5.69523310e-03 + 2.14228000e-06 * T - 4.86783600e-09 * T2 -
                  9.40443240e-13 * T3;
    // species 42: HCNN
    species[42] = +1.59606190e-02 - 3.76327080e-05 * T + 3.63766200e-08 * T2 -
                  1.29429512e-11 * T3;
    // species 46: NCO
    species[46] = +8.80516880e-03 - 1.67732268e-05 * T + 1.44050892e-08 * T2 -
                  5.32543800e-12 * T3;
    // species 47: N2
    species[47] = +1.40824040e-03 - 7.92644400e-06 * T + 1.69245450e-08 * T2 -
                  9.77941600e-12 * T3;
    // species 49: C3H7
    species[49] = +2.59919800e-02 + 4.76010800e-06 * T - 5.88287070e-08 * T2 +
                  3.74929880e-11 * T3;
    // species 50: C3H8
    species[50] = +2.64245790e-02 + 1.22119454e-05 * T - 6.59324970e-08 * T2 +
                  3.80597012e-11 * T3;
    // species 51: CH2CHO
    species[51] = +1.07385740e-02 + 3.78298400e-06 * T - 2.14757490e-08 * T2 +
                  1.14695400e-11 * T3;
    // species 52: CH3CHO
    species[52] = -3.19328580e-03 + 9.50698420e-05 * T - 1.72375833e-07 * T2 +
                  8.77244480e-11 * T3;
    // species 70: iC3H7
    species[70] = +2.09991120e-02 + 1.54072444e-05 * T - 5.54287590e-08 * T2 +
                  2.85131848e-11 * T3;
    // species 71: nC3H7
    species[71] = +2.60089730e-02 + 4.70850320e-06 * T - 5.87853960e-08 * T2 +
                  3.74880828e-11 * T3;
  } else {
    // species 0: H2
    species[0] = -4.94024731e-05 + 9.98913556e-07 * T - 5.38699182e-10 * T2 +
                 8.01021504e-14 * T3;
    // species 1: H
    species[1] = -2.30842973e-11 + 3.23123896e-14 * T - 1.42054571e-17 * T2 +
                 1.99278943e-21 * T3;
    // species 2: O
    species[2] = -8.59741137e-05 + 8.38969178e-08 * T - 3.00533397e-11 * T2 +
                 4.91334764e-15 * T3;
    // species 3: O2
    species[3] = +1.48308754e-03 - 1.51593334e-06 * T + 6.28411665e-10 * T2 -
                 8.66871176e-14 * T3;
    // species 4: OH
    species[4] = +5.48429716e-04 + 2.53010456e-07 * T - 2.63838467e-10 * T2 +
                 4.69649504e-14 * T3;
    // species 5: H2O
    species[5] = +2.17691804e-03 - 3.28145036e-07 * T - 2.91125961e-10 * T2 +
                 6.72803968e-14 * T3;
    // species 6: HO2
    species[6] = +2.23982013e-03 - 1.26731630e-06 * T + 3.42739110e-10 * T2 -
                 4.31634140e-14 * T3;
    // species 7: H2O2
    species[7] = +4.90831694e-03 - 3.80278450e-06 * T + 1.11355796e-09 * T2 -
                 1.15163322e-13 * T3;
    // species 8: C
    species[8] = +4.79889284e-05 - 1.44867004e-07 * T + 1.12287309e-10 * T2 -
                 1.94911157e-14 * T3;
    // species 9: CH
    species[9] = +9.70913681e-04 + 2.88891310e-07 * T - 3.92063547e-10 * T2 +
                 7.04317532e-14 * T3;
    // species 10: CH2
    species[10] = +3.65639292e-03 - 2.81789194e-06 * T + 7.80538647e-10 * T2 -
                  7.50910268e-14 * T3;
    // species 11: CH2(S)
    species[11] = +4.65588637e-03 - 4.02383894e-06 * T + 1.25371800e-09 * T2 -
                  1.35886546e-13 * T3;
    // species 12: CH3
    species[12] = +7.23990037e-03 - 5.97428696e-06 * T + 1.78705393e-09 * T2 -
                  1.86861758e-13 * T3;
    // species 13: CH4
    species[13] = +1.33909467e-02 - 1.14657162e-05 * T + 3.66877605e-09 * T2 -
                  4.07260920e-13 * T3;
    // species 14: CO
    species[14] = +2.06252743e-03 - 1.99765154e-06 * T + 6.90159024e-10 * T2 -
                  8.14590864e-14 * T3;
    // species 15: CO2
    species[15] = +4.41437026e-03 - 4.42962808e-06 * T + 1.57047056e-09 * T2 -
                  1.88833666e-13 * T3;
    // species 16: HCO
    species[16] = +4.95695526e-03 - 4.96891226e-06 * T + 1.76748533e-09 * T2 -
                  2.13403484e-13 * T3;
    // species 17: CH2O
    species[17] = +9.20000082e-03 - 8.84517626e-06 * T + 3.01923636e-09 * T2 -
                  3.53542256e-13 * T3;
    // species 18: CH2OH
    species[18] = +8.64576797e-03 - 7.50202240e-06 * T + 2.36170391e-09 * T2 -
                  2.59421680e-13 * T3;
    // species 19: CH3O
    species[19] = +7.87149700e-03 - 5.31276800e-06 * T + 1.18332930e-09 * T2 -
                  8.45046400e-14 * T3;
    // species 20: CH3OH
    species[20] = +1.40938292e-02 - 1.27300167e-05 * T + 4.14513255e-09 * T2 -
                  4.68240880e-13 * T3;
    // species 21: C2H
    species[21] = +4.75221902e-03 - 3.67574154e-06 * T + 9.12570756e-10 * T2 -
                  7.08931080e-14 * T3;
    // species 22: C2H2
    species[22] = +5.96166664e-03 - 4.74589704e-06 * T + 1.40223651e-09 * T2 -
                  1.44494085e-13 * T3;
    // species 23: C2H3
    species[23] = +1.03302292e-02 - 9.36164698e-06 * T + 3.05289864e-09 * T2 -
                  3.45042816e-13 * T3;
    // species 24: C2H4
    species[24] = +1.46454151e-02 - 1.34215583e-05 * T + 4.41668769e-09 * T2 -
                  5.02824244e-13 * T3;
    // species 25: C2H5
    species[25] = +1.73972722e-02 - 1.59641334e-05 * T + 5.25653067e-09 * T2 -
                  5.98566304e-13 * T3;
    // species 26: C2H6
    species[26] = +2.16852677e-02 - 2.00512134e-05 * T + 6.64236003e-09 * T2 -
                  7.60011560e-13 * T3;
    // species 27: HCCO
    species[27] = +4.08534010e-03 - 3.18690940e-06 * T + 8.58781560e-10 * T2 -
                  7.76313280e-14 * T3;
    // species 28: CH2CO
    species[28] = +9.00359745e-03 - 8.33879270e-06 * T + 2.77003765e-09 * T2 -
                  3.17935280e-13 * T3;
    // species 29: HCCOH
    species[29] = +6.79236000e-03 - 5.13171280e-06 * T + 1.34963523e-09 * T2 -
                  1.19760404e-13 * T3;
    // species 30: N
    species[30] = +1.74890650e-04 - 2.38047380e-07 * T + 9.06787350e-11 * T2 -
                  8.14439280e-15 * T3;
    // species 31: NH
    species[31] = +1.32984300e-03 - 8.49560940e-07 * T + 2.35045503e-10 * T2 -
                  2.20177880e-14 * T3;
    // species 32: NH2
    species[32] = +3.20730820e-03 - 1.86781608e-06 * T + 4.11088590e-10 * T2 -
                  3.16824576e-14 * T3;
    // species 33: NH3
    species[33] = +5.66625600e-03 - 3.45573520e-06 * T + 7.16014830e-10 * T2 -
                  5.03151440e-14 * T3;
    // species 34: NNH
    species[34] = +2.89150820e-03 - 2.08332400e-06 * T + 5.05277820e-10 * T2 -
                  4.03675840e-14 * T3;
    // species 35: NO
    species[35] = +1.19110430e-03 - 8.58340960e-07 * T + 2.08373007e-10 * T2 -
                  1.61344396e-14 * T3;
    // species 36: NO2
    species[36] = +2.17239560e-03 - 1.65613812e-06 * T + 4.72425300e-10 * T2 -
                  4.20435800e-14 * T3;
    // species 37: N2O
    species[37] = +2.62702510e-03 - 1.91701748e-06 * T + 4.80021360e-10 * T2 -
                  3.91009212e-14 * T3;
    // species 38: HNO
    species[38] = +3.49440590e-03 - 1.57099556e-06 * T + 1.72438782e-10 * T2 -
                  7.73436640e-16 * T3;
    // species 39: CN
    species[39] = +4.34507750e-05 + 5.94119680e-07 * T - 2.05955418e-10 * T2 +
                  1.76536692e-14 * T3;
    // species 40: HCN
    species[40] = +3.14642280e-03 - 2.12643700e-06 * T + 4.98592710e-10 * T2 -
                  3.91990280e-14 * T3;
    // species 41: H2CN
    species[41] = +2.96929110e-03 - 5.71117820e-07 * T - 4.90665000e-10 * T2 +
                  1.21730356e-13 * T3;
    // species 42: HCNN
    species[42] = +3.98959590e-03 - 3.19647600e-06 * T + 8.77481850e-10 * T2 -
                  8.03787440e-14 * T3;
    // species 46: NCO
    species[46] = +2.30517610e-03 - 1.76066306e-06 * T + 4.43672940e-10 * T2 -
                  3.63911984e-14 * T3;
    // species 47: N2
    species[47] = +1.48797680e-03 - 1.13695200e-06 * T + 3.02911140e-10 * T2 -
                  2.70134040e-14 * T3;
    // species 49: C3H7
    species[49] = +1.60442030e-02 - 1.05666440e-05 * T + 2.28895770e-09 * T2 -
                  1.57569136e-13 * T3;
    // species 50: C3H8
    species[50] = +1.88722390e-02 - 1.25436982e-05 * T + 2.74426947e-09 * T2 -
                  1.91352276e-13 * T3;
    // species 51: CH2CHO
    species[51] = +8.13059100e-03 - 5.48724800e-06 * T + 1.22109120e-09 * T2 -
                  8.70406800e-14 * T3;
    // species 52: CH3CHO
    species[52] = +1.17230590e-02 - 8.45262740e-06 * T + 2.05117353e-09 * T2 -
                  1.63939452e-13 * T3;
    // species 70: iC3H7
    species[70] = +1.72201040e-02 - 1.14728434e-05 * T + 2.52392196e-09 * T2 -
                  1.78263652e-13 * T3;
    // species 71: nC3H7
    species[71] = +1.60314850e-02 - 1.05440476e-05 * T + 2.27665056e-09 * T2 -
                  1.55450876e-13 * T3;
  }

  // species with midpoint at T=1100 kelvin
  if (T < 1100) {
    // species 56: CH3F
    species[56] = +3.65316940e-03 + 2.62064620e-05 * T - 4.35989670e-08 * T2 +
                  1.79205708e-11 * T3;
    // species 57: CH2F2
    species[57] = +1.19379250e-02 - 5.38641820e-07 * T - 1.65568059e-08 * T2 +
                  8.72541960e-12 * T3;
    // species 65: CF
    species[65] = +2.09097030e-04 + 6.41548620e-06 * T - 1.10062611e-08 * T2 +
                  4.79452440e-12 * T3;
  } else {
    // species 56: CH3F
    species[56] = +9.97250770e-03 - 7.96994500e-06 * T + 2.17544286e-09 * T2 -
                  1.95375984e-13 * T3;
    // species 57: CH2F2
    species[57] = +8.31978790e-03 - 6.74313960e-06 * T + 1.85639061e-09 * T2 -
                  1.67806172e-13 * T3;
    // species 65: CF
    species[65] = +9.73680640e-04 - 8.21964720e-07 * T + 2.40188625e-10 * T2 -
                  2.25992272e-14 * T3;
  }

  // species with midpoint at T=1150 kelvin
  if (T < 1150) {
    // species 55: F2
    species[55] = +5.29418460e-03 - 1.29418190e-05 * T + 1.17550041e-08 * T2 -
                  3.75380540e-12 * T3;
    // species 61: CHF2
    species[61] = +1.34163800e-02 - 1.90865676e-05 * T + 8.87789040e-09 * T2 -
                  1.11679968e-12 * T3;
    // species 67: CF2O
    species[67] = +2.10869880e-02 - 4.78431420e-05 * T + 4.19847390e-08 * T2 -
                  1.35042144e-11 * T3;
    // species 68: CHFO
    species[68] = +1.07739880e-02 - 1.10316326e-05 * T + 1.74455796e-09 * T2 +
                  8.68168360e-13 * T3;
  } else {
    // species 55: F2
    species[55] = +6.00033760e-04 - 4.38435740e-07 * T + 1.29452271e-10 * T2 -
                  1.25035368e-14 * T3;
    // species 61: CHF2
    species[61] = +4.41165400e-03 - 3.48377160e-06 * T + 9.27598770e-10 * T2 -
                  8.07047520e-14 * T3;
    // species 67: CF2O
    species[67] = +3.38305420e-03 - 2.86023460e-06 * T + 8.13677160e-10 * T2 -
                  7.62095240e-14 * T3;
    // species 68: CHFO
    species[68] = +5.05418230e-03 - 4.02842340e-06 * T + 1.09077255e-09 * T2 -
                  9.78896280e-14 * T3;
  }

  // species with midpoint at T=1250 kelvin
  if (T < 1250) {
    // species 53: HF
    species[53] = +4.86020720e-04 - 2.50479420e-06 * T + 4.09425000e-09 * T2 -
                  1.63829616e-12 * T3;
    // species 59: CF4
    species[59] = +3.32696030e-02 - 7.76534120e-05 * T + 6.61780410e-08 * T2 -
                  1.97934932e-11 * T3;
    // species 62: CF3
    species[62] = +2.15758050e-02 - 4.78039640e-05 * T + 3.88833270e-08 * T2 -
                  1.12069260e-11 * T3;
    // species 66: CF3O
    species[66] = +2.98955400e-02 - 6.85489920e-05 * T + 5.75417100e-08 * T2 -
                  1.69983740e-11 * T3;
    // species 69: CFO
    species[69] = +7.47091680e-03 - 1.24366632e-05 * T + 7.88749050e-09 * T2 -
                  1.89288752e-12 * T3;
  } else {
    // species 53: HF
    species[53] = +1.03959080e-03 - 4.83471000e-07 * T + 8.05247700e-11 * T2 -
                  4.39065480e-15 * T3;
    // species 59: CF4
    species[59] = +3.28269300e-03 - 2.68089680e-06 * T + 7.31214870e-10 * T2 -
                  6.51446320e-14 * T3;
    // species 62: CF3
    species[62] = +2.27114640e-03 - 1.78099280e-06 * T + 4.58815020e-10 * T2 -
                  3.80335032e-14 * T3;
    // species 66: CF3O
    species[66] = +3.38915830e-03 - 2.89307780e-06 * T + 8.30885100e-10 * T2 -
                  7.82321360e-14 * T3;
    // species 69: CFO
    species[69] = +1.84938470e-03 - 1.48046374e-06 * T + 3.98354970e-10 * T2 -
                  3.53223988e-14 * T3;
  }

  // species with midpoint at T=1300 kelvin
  if (T < 1300) {
    // species 58: CHF3
    species[58] = +2.39859100e-02 - 4.36671960e-05 * T + 2.99407704e-08 * T2 -
                  7.40716040e-12 * T3;
    // species 60: CH2F
    species[60] = +1.02392700e-02 - 1.32417784e-05 * T + 7.13571090e-09 * T2 -
                  1.55734348e-12 * T3;
    // species 63: CHF
    species[63] = +2.35460520e-03 + 3.87965860e-06 * T - 7.95751710e-09 * T2 +
                  3.16467748e-12 * T3;
    // species 64: CF2
    species[64] = +1.07607860e-02 - 2.10764020e-05 * T + 1.46964414e-08 * T2 -
                  3.54553712e-12 * T3;
  } else {
    // species 58: CHF3
    species[58] = +5.23004720e-03 - 4.07200640e-06 * T + 1.07188668e-09 * T2 -
                  9.23989080e-14 * T3;
    // species 60: CH2F
    species[60] = +5.46642290e-03 - 4.21898780e-06 * T + 1.12337433e-09 * T2 -
                  9.89600240e-14 * T3;
    // species 63: CHF
    species[63] = +1.74963530e-03 - 1.00958050e-06 * T + 3.26857950e-10 * T2 -
                  3.95159292e-14 * T3;
    // species 64: CF2
    species[64] = +1.97748380e-03 - 1.92049582e-06 * T + 6.32111070e-10 * T2 -
                  6.38159080e-14 * T3;
  }

  // species with midpoint at T=1368 kelvin
  if (T < 1368) {
    // species 44: HOCN
    species[44] = +6.88667922e-03 - 6.42975728e-06 * T + 1.55158730e-09 * T2 +
                  4.77443152e-14 * T3;
  } else {
    // species 44: HOCN
    species[44] = +3.16789393e-03 - 2.23602128e-06 * T + 5.31729432e-10 * T2 -
                  4.17356708e-14 * T3;
  }

  // species with midpoint at T=1382 kelvin
  if (T < 1382) {
    // species 43: HCNO
    species[43] = +1.27505342e-02 - 2.09588472e-05 * T + 1.32429851e-08 * T2 -
                  3.03008586e-12 * T3;
  } else {
    // species 43: HCNO
    species[43] = +3.02778626e-03 - 2.15408692e-06 * T + 5.14999584e-10 * T2 -
                  4.05757564e-14 * T3;
  }

  // species with midpoint at T=1400 kelvin
  if (T < 1400) {
    // species 54: F
    species[54] = -6.35296320e-04 + 5.29469740e-07 * T + 2.30718918e-10 * T2 -
                  2.18101420e-13 * T3;
  } else {
    // species 54: F
    species[54] = -1.40129710e-04 + 1.03847286e-07 * T - 2.65486335e-11 * T2 +
                  2.36112056e-15 * T3;
  }

  // species with midpoint at T=1478 kelvin
  if (T < 1478) {
    // species 45: HNCO
    species[45] = +7.30282357e-03 - 4.56100006e-06 * T - 1.98381389e-09 * T2 +
                  1.44894301e-12 * T3;
  } else {
    // species 45: HNCO
    species[45] = +3.17864004e-03 - 2.18757510e-06 * T + 5.12205489e-10 * T2 -
                  3.98008782e-14 * T3;
  }
}

// Returns the mean specific heat at CP (Eq. 33)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cpbl)
{
  amrex::Real result = 0;
  amrex::Real cpor[72]; //  temporary storage
  cp_R(cpor, T);

  // perform dot product
  for (int id = 0; id < 72; ++id) {
    result += x[id] * cpor[id];
  }

  cpbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CP (Eq. 34)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cpbs)
{
  amrex::Real result = 0.0;

  // compute Cp/R at the given temperature
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with no change across T
  // species 48: AR
  result += y[48] * (+2.50000000e+00) * 0.0250312891113892;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    result += y[0] *
              (+2.34433112e+00 + 7.98052075e-03 * T - 1.94781510e-05 * T2 +
               2.01572094e-08 * T3 - 7.37611761e-12 * T4) *
              0.4960317460317460;
    // species 1: H
    result += y[1] *
              (+2.50000000e+00 + 7.05332819e-13 * T - 1.99591964e-15 * T2 +
               2.30081632e-18 * T3 - 9.27732332e-22 * T4) *
              0.9920634920634921;
    // species 2: O
    result += y[2] *
              (+3.16826710e+00 - 3.27931884e-03 * T + 6.64306396e-06 * T2 -
               6.12806624e-09 * T3 + 2.11265971e-12 * T4) *
              0.0625039064941559;
    // species 3: O2
    result += y[3] *
              (+3.78245636e+00 - 2.99673416e-03 * T + 9.84730201e-06 * T2 -
               9.68129509e-09 * T3 + 3.24372837e-12 * T4) *
              0.0312519532470779;
    // species 4: OH
    result += y[4] *
              (+3.99201543e+00 - 2.40131752e-03 * T + 4.61793841e-06 * T2 -
               3.88113333e-09 * T3 + 1.36411470e-12 * T4) *
              0.0587993179279120;
    // species 5: H2O
    result += y[5] *
              (+4.19864056e+00 - 2.03643410e-03 * T + 6.52040211e-06 * T2 -
               5.48797062e-09 * T3 + 1.77197817e-12 * T4) *
              0.0555092978073827;
    // species 6: HO2
    result += y[6] *
              (+4.30179801e+00 - 4.74912051e-03 * T + 2.11582891e-05 * T2 -
               2.42763894e-08 * T3 + 9.29225124e-12 * T4) *
              0.0302975216627280;
    // species 7: H2O2
    result += y[7] *
              (+4.27611269e+00 - 5.42822417e-04 * T + 1.67335701e-05 * T2 -
               2.15770813e-08 * T3 + 8.62454363e-12 * T4) *
              0.0293996589639560;
    // species 8: C
    result += y[8] *
              (+2.55423955e+00 - 3.21537724e-04 * T + 7.33792245e-07 * T2 -
               7.32234889e-10 * T3 + 2.66521446e-13 * T4) *
              0.0832570144034635;
    // species 9: CH
    result += y[9] *
              (+3.48981665e+00 + 3.23835541e-04 * T - 1.68899065e-06 * T2 +
               3.16217327e-09 * T3 - 1.40609067e-12 * T4) *
              0.0768108149627468;
    // species 10: CH2
    result += y[10] *
              (+3.76267867e+00 + 9.68872143e-04 * T + 2.79489841e-06 * T2 -
               3.85091153e-09 * T3 + 1.68741719e-12 * T4) *
              0.0712910814857061;
    // species 11: CH2(S)
    result += y[11] *
              (+4.19860411e+00 - 2.36661419e-03 * T + 8.23296220e-06 * T2 -
               6.68815981e-09 * T3 + 1.94314737e-12 * T4) *
              0.0712910814857061;
    // species 12: CH3
    result += y[12] *
              (+3.67359040e+00 + 2.01095175e-03 * T + 5.73021856e-06 * T2 -
               6.87117425e-09 * T3 + 2.54385734e-12 * T4) *
              0.0665114732291320;
    // species 13: CH4
    result += y[13] *
              (+5.14987613e+00 - 1.36709788e-02 * T + 4.91800599e-05 * T2 -
               4.84743026e-08 * T3 + 1.66693956e-11 * T4) *
              0.0623324814560868;
    // species 14: CO
    result += y[14] *
              (+3.57953347e+00 - 6.10353680e-04 * T + 1.01681433e-06 * T2 +
               9.07005884e-10 * T3 - 9.04424499e-13 * T4) *
              0.0357015351660121;
    // species 15: CO2
    result += y[15] *
              (+2.35677352e+00 + 8.98459677e-03 * T - 7.12356269e-06 * T2 +
               2.45919022e-09 * T3 - 1.43699548e-13 * T4) *
              0.0227226249176305;
    // species 16: HCO
    result += y[16] *
              (+4.22118584e+00 - 3.24392532e-03 * T + 1.37799446e-05 * T2 -
               1.33144093e-08 * T3 + 4.33768865e-12 * T4) *
              0.0344613688055690;
    // species 17: CH2O
    result += y[17] *
              (+4.79372315e+00 - 9.90833369e-03 * T + 3.73220008e-05 * T2 -
               3.79285261e-08 * T3 + 1.31772652e-11 * T4) *
              0.0333044694598015;
    // species 18: CH2OH
    result += y[18] *
              (+3.86388918e+00 + 5.59672304e-03 * T + 5.93271791e-06 * T2 -
               1.04532012e-08 * T3 + 4.36967278e-12 * T4) *
              0.0322227234645872;
    // species 19: CH3O
    result += y[19] *
              (+2.10620400e+00 + 7.21659500e-03 * T + 5.33847200e-06 * T2 -
               7.37763600e-09 * T3 + 2.07561000e-12 * T4) *
              0.0322227234645872;
    // species 20: CH3OH
    result += y[20] *
              (+5.71539582e+00 - 1.52309129e-02 * T + 6.52441155e-05 * T2 -
               7.10806889e-08 * T3 + 2.61352698e-11 * T4) *
              0.0312090381374446;
    // species 21: C2H
    result += y[21] *
              (+2.88965733e+00 + 1.34099611e-02 * T - 2.84769501e-05 * T2 +
               2.94791045e-08 * T3 - 1.09331511e-11 * T4) *
              0.0399520575309628;
    // species 22: C2H2
    result += y[22] *
              (+8.08681094e-01 + 2.33615629e-02 * T - 3.55171815e-05 * T2 +
               2.80152437e-08 * T3 - 8.50072974e-12 * T4) *
              0.0384054074813734;
    // species 23: C2H3
    result += y[23] *
              (+3.21246645e+00 + 1.51479162e-03 * T + 2.59209412e-05 * T2 -
               3.57657847e-08 * T3 + 1.47150873e-11 * T4) *
              0.0369740442209569;
    // species 24: C2H4
    result += y[24] *
              (+3.95920148e+00 - 7.57052247e-03 * T + 5.70990292e-05 * T2 -
               6.91588753e-08 * T3 + 2.69884373e-11 * T4) *
              0.0356455407428531;
    // species 25: C2H5
    result += y[25] *
              (+4.30646568e+00 - 4.18658892e-03 * T + 4.97142807e-05 * T2 -
               5.99126606e-08 * T3 + 2.30509004e-11 * T4) *
              0.0344091941366733;
    // species 26: C2H6
    result += y[26] *
              (+4.29142492e+00 - 5.50154270e-03 * T + 5.99438288e-05 * T2 -
               7.08466285e-08 * T3 + 2.68685771e-11 * T4) *
              0.0332557366145660;
    // species 27: HCCO
    result += y[27] *
              (+2.25172140e+00 + 1.76550210e-02 * T - 2.37291010e-05 * T2 +
               1.72757590e-08 * T3 - 5.06648110e-12 * T4) *
              0.0243730044602598;
    // species 28: CH2CO
    result += y[28] *
              (+2.13583630e+00 + 1.81188721e-02 * T - 1.73947474e-05 * T2 +
               9.34397568e-09 * T3 - 2.01457615e-12 * T4) *
              0.0237885672145967;
    // species 29: HCCOH
    result += y[29] *
              (+1.24237330e+00 + 3.10722010e-02 * T - 5.08668640e-05 * T2 +
               4.31371310e-08 * T3 - 1.40145940e-11 * T4) *
              0.0237885672145967;
    // species 30: N
    result += y[30] * (+2.50000000e+00) * 0.0713928749910759;
    // species 31: NH
    result += y[31] *
              (+3.49290850e+00 + 3.11791980e-04 * T - 1.48904840e-06 * T2 +
               2.48164420e-09 * T3 - 1.03569670e-12 * T4) *
              0.0666000666000666;
    // species 32: NH2
    result += y[32] *
              (+4.20400290e+00 - 2.10613850e-03 * T + 7.10683480e-06 * T2 -
               5.61151970e-09 * T3 + 1.64407170e-12 * T4) *
              0.0624102852150034;
    // species 33: NH3
    result += y[33] *
              (+4.28602740e+00 - 4.66052300e-03 * T + 2.17185130e-05 * T2 -
               2.28088870e-08 * T3 + 8.26380460e-12 * T4) *
              0.0587164582232400;
    // species 34: NNH
    result += y[34] *
              (+4.34469270e+00 - 4.84970720e-03 * T + 2.00594590e-05 * T2 -
               2.17264640e-08 * T3 + 7.94695390e-12 * T4) *
              0.0344566191165323;
    // species 35: NO
    result += y[35] *
              (+4.21847630e+00 - 4.63897600e-03 * T + 1.10410220e-05 * T2 -
               9.33613540e-09 * T3 + 2.80357700e-12 * T4) *
              0.0333266679997334;
    // species 36: NO2
    result += y[36] *
              (+3.94403120e+00 - 1.58542900e-03 * T + 1.66578120e-05 * T2 -
               2.04754260e-08 * T3 + 7.83505640e-12 * T4) *
              0.0217367677426367;
    // species 37: N2O
    result += y[37] *
              (+2.25715020e+00 + 1.13047280e-02 * T - 1.36713190e-05 * T2 +
               9.68198060e-09 * T3 - 2.93071820e-12 * T4) *
              0.0227205598345943;
    // species 38: HNO
    result += y[38] *
              (+4.53349160e+00 - 5.66961710e-03 * T + 1.84732070e-05 * T2 -
               1.71370940e-08 * T3 + 5.54545730e-12 * T4) *
              0.0322435029341588;
    // species 39: CN
    result += y[39] *
              (+3.61293510e+00 - 9.55513270e-04 * T + 2.14429770e-06 * T2 -
               3.15163230e-10 * T3 - 4.64303560e-13 * T4) *
              0.0384349296640787;
    // species 40: HCN
    result += y[40] *
              (+2.25898860e+00 + 1.00511700e-02 * T - 1.33517630e-05 * T2 +
               1.00923490e-08 * T3 - 3.00890280e-12 * T4) *
              0.0370014060534300;
    // species 41: H2CN
    result += y[41] *
              (+2.85166100e+00 + 5.69523310e-03 * T + 1.07114000e-06 * T2 -
               1.62261200e-09 * T3 - 2.35110810e-13 * T4) *
              0.0356709709638296;
    // species 42: HCNN
    result += y[42] *
              (+2.52431940e+00 + 1.59606190e-02 * T - 1.88163540e-05 * T2 +
               1.21255400e-08 * T3 - 3.23573780e-12 * T4) *
              0.0243706285185095;
    // species 46: NCO
    result += y[46] *
              (+2.82693080e+00 + 8.80516880e-03 * T - 8.38661340e-06 * T2 +
               4.80169640e-09 * T3 - 1.33135950e-12 * T4) *
              0.0237998905205036;
    // species 47: N2
    result += y[47] *
              (+3.29867700e+00 + 1.40824040e-03 * T - 3.96322200e-06 * T2 +
               5.64151500e-09 * T3 - 2.44485400e-12 * T4) *
              0.0356964374955379;
    // species 49: C3H7
    result += y[49] *
              (+1.05155180e+00 + 2.59919800e-02 * T + 2.38005400e-06 * T2 -
               1.96095690e-08 * T3 + 9.37324700e-12 * T4) *
              0.0232077792476038;
    // species 50: C3H8
    result += y[50] *
              (+9.33553810e-01 + 2.64245790e-02 * T + 6.10597270e-06 * T2 -
               2.19774990e-08 * T3 + 9.51492530e-12 * T4) *
              0.0226772796335352;
    // species 51: CH2CHO
    result += y[51] *
              (+3.40906200e+00 + 1.07385740e-02 * T + 1.89149200e-06 * T2 -
               7.15858300e-09 * T3 + 2.86738500e-12 * T4) *
              0.0232315019165989;
    // species 52: CH3CHO
    result += y[52] *
              (+4.72945950e+00 - 3.19328580e-03 * T + 4.75349210e-05 * T2 -
               5.74586110e-08 * T3 + 2.19311120e-11 * T4) *
              0.0226999296302181;
    // species 70: iC3H7
    result += y[70] *
              (+1.44491990e+00 + 2.09991120e-02 * T + 7.70362220e-06 * T2 -
               1.84762530e-08 * T3 + 7.12829620e-12 * T4) *
              0.0232077792476038;
    // species 71: nC3H7
    result += y[71] *
              (+1.04911730e+00 + 2.60089730e-02 * T + 2.35425160e-06 * T2 -
               1.95951320e-08 * T3 + 9.37202070e-12 * T4) *
              0.0232077792476038;
  } else {
    // species 0: H2
    result += y[0] *
              (+3.33727920e+00 - 4.94024731e-05 * T + 4.99456778e-07 * T2 -
               1.79566394e-10 * T3 + 2.00255376e-14 * T4) *
              0.4960317460317460;
    // species 1: H
    result += y[1] *
              (+2.50000001e+00 - 2.30842973e-11 * T + 1.61561948e-14 * T2 -
               4.73515235e-18 * T3 + 4.98197357e-22 * T4) *
              0.9920634920634921;
    // species 2: O
    result += y[2] *
              (+2.56942078e+00 - 8.59741137e-05 * T + 4.19484589e-08 * T2 -
               1.00177799e-11 * T3 + 1.22833691e-15 * T4) *
              0.0625039064941559;
    // species 3: O2
    result += y[3] *
              (+3.28253784e+00 + 1.48308754e-03 * T - 7.57966669e-07 * T2 +
               2.09470555e-10 * T3 - 2.16717794e-14 * T4) *
              0.0312519532470779;
    // species 4: OH
    result += y[4] *
              (+3.09288767e+00 + 5.48429716e-04 * T + 1.26505228e-07 * T2 -
               8.79461556e-11 * T3 + 1.17412376e-14 * T4) *
              0.0587993179279120;
    // species 5: H2O
    result += y[5] *
              (+3.03399249e+00 + 2.17691804e-03 * T - 1.64072518e-07 * T2 -
               9.70419870e-11 * T3 + 1.68200992e-14 * T4) *
              0.0555092978073827;
    // species 6: HO2
    result += y[6] *
              (+4.01721090e+00 + 2.23982013e-03 * T - 6.33658150e-07 * T2 +
               1.14246370e-10 * T3 - 1.07908535e-14 * T4) *
              0.0302975216627280;
    // species 7: H2O2
    result += y[7] *
              (+4.16500285e+00 + 4.90831694e-03 * T - 1.90139225e-06 * T2 +
               3.71185986e-10 * T3 - 2.87908305e-14 * T4) *
              0.0293996589639560;
    // species 8: C
    result += y[8] *
              (+2.49266888e+00 + 4.79889284e-05 * T - 7.24335020e-08 * T2 +
               3.74291029e-11 * T3 - 4.87277893e-15 * T4) *
              0.0832570144034635;
    // species 9: CH
    result += y[9] *
              (+2.87846473e+00 + 9.70913681e-04 * T + 1.44445655e-07 * T2 -
               1.30687849e-10 * T3 + 1.76079383e-14 * T4) *
              0.0768108149627468;
    // species 10: CH2
    result += y[10] *
              (+2.87410113e+00 + 3.65639292e-03 * T - 1.40894597e-06 * T2 +
               2.60179549e-10 * T3 - 1.87727567e-14 * T4) *
              0.0712910814857061;
    // species 11: CH2(S)
    result += y[11] *
              (+2.29203842e+00 + 4.65588637e-03 * T - 2.01191947e-06 * T2 +
               4.17906000e-10 * T3 - 3.39716365e-14 * T4) *
              0.0712910814857061;
    // species 12: CH3
    result += y[12] *
              (+2.28571772e+00 + 7.23990037e-03 * T - 2.98714348e-06 * T2 +
               5.95684644e-10 * T3 - 4.67154394e-14 * T4) *
              0.0665114732291320;
    // species 13: CH4
    result += y[13] *
              (+7.48514950e-02 + 1.33909467e-02 * T - 5.73285809e-06 * T2 +
               1.22292535e-09 * T3 - 1.01815230e-13 * T4) *
              0.0623324814560868;
    // species 14: CO
    result += y[14] *
              (+2.71518561e+00 + 2.06252743e-03 * T - 9.98825771e-07 * T2 +
               2.30053008e-10 * T3 - 2.03647716e-14 * T4) *
              0.0357015351660121;
    // species 15: CO2
    result += y[15] *
              (+3.85746029e+00 + 4.41437026e-03 * T - 2.21481404e-06 * T2 +
               5.23490188e-10 * T3 - 4.72084164e-14 * T4) *
              0.0227226249176305;
    // species 16: HCO
    result += y[16] *
              (+2.77217438e+00 + 4.95695526e-03 * T - 2.48445613e-06 * T2 +
               5.89161778e-10 * T3 - 5.33508711e-14 * T4) *
              0.0344613688055690;
    // species 17: CH2O
    result += y[17] *
              (+1.76069008e+00 + 9.20000082e-03 * T - 4.42258813e-06 * T2 +
               1.00641212e-09 * T3 - 8.83855640e-14 * T4) *
              0.0333044694598015;
    // species 18: CH2OH
    result += y[18] *
              (+3.69266569e+00 + 8.64576797e-03 * T - 3.75101120e-06 * T2 +
               7.87234636e-10 * T3 - 6.48554201e-14 * T4) *
              0.0322227234645872;
    // species 19: CH3O
    result += y[19] *
              (+3.77079900e+00 + 7.87149700e-03 * T - 2.65638400e-06 * T2 +
               3.94443100e-10 * T3 - 2.11261600e-14 * T4) *
              0.0322227234645872;
    // species 20: CH3OH
    result += y[20] *
              (+1.78970791e+00 + 1.40938292e-02 * T - 6.36500835e-06 * T2 +
               1.38171085e-09 * T3 - 1.17060220e-13 * T4) *
              0.0312090381374446;
    // species 21: C2H
    result += y[21] *
              (+3.16780652e+00 + 4.75221902e-03 * T - 1.83787077e-06 * T2 +
               3.04190252e-10 * T3 - 1.77232770e-14 * T4) *
              0.0399520575309628;
    // species 22: C2H2
    result += y[22] *
              (+4.14756964e+00 + 5.96166664e-03 * T - 2.37294852e-06 * T2 +
               4.67412171e-10 * T3 - 3.61235213e-14 * T4) *
              0.0384054074813734;
    // species 23: C2H3
    result += y[23] *
              (+3.01672400e+00 + 1.03302292e-02 * T - 4.68082349e-06 * T2 +
               1.01763288e-09 * T3 - 8.62607041e-14 * T4) *
              0.0369740442209569;
    // species 24: C2H4
    result += y[24] *
              (+2.03611116e+00 + 1.46454151e-02 * T - 6.71077915e-06 * T2 +
               1.47222923e-09 * T3 - 1.25706061e-13 * T4) *
              0.0356455407428531;
    // species 25: C2H5
    result += y[25] *
              (+1.95465642e+00 + 1.73972722e-02 * T - 7.98206668e-06 * T2 +
               1.75217689e-09 * T3 - 1.49641576e-13 * T4) *
              0.0344091941366733;
    // species 26: C2H6
    result += y[26] *
              (+1.07188150e+00 + 2.16852677e-02 * T - 1.00256067e-05 * T2 +
               2.21412001e-09 * T3 - 1.90002890e-13 * T4) *
              0.0332557366145660;
    // species 27: HCCO
    result += y[27] *
              (+5.62820580e+00 + 4.08534010e-03 * T - 1.59345470e-06 * T2 +
               2.86260520e-10 * T3 - 1.94078320e-14 * T4) *
              0.0243730044602598;
    // species 28: CH2CO
    result += y[28] *
              (+4.51129732e+00 + 9.00359745e-03 * T - 4.16939635e-06 * T2 +
               9.23345882e-10 * T3 - 7.94838201e-14 * T4) *
              0.0237885672145967;
    // species 29: HCCOH
    result += y[29] *
              (+5.92382910e+00 + 6.79236000e-03 * T - 2.56585640e-06 * T2 +
               4.49878410e-10 * T3 - 2.99401010e-14 * T4) *
              0.0237885672145967;
    // species 30: N
    result += y[30] *
              (+2.41594290e+00 + 1.74890650e-04 * T - 1.19023690e-07 * T2 +
               3.02262450e-11 * T3 - 2.03609820e-15 * T4) *
              0.0713928749910759;
    // species 31: NH
    result += y[31] *
              (+2.78369280e+00 + 1.32984300e-03 * T - 4.24780470e-07 * T2 +
               7.83485010e-11 * T3 - 5.50444700e-15 * T4) *
              0.0666000666000666;
    // species 32: NH2
    result += y[32] *
              (+2.83474210e+00 + 3.20730820e-03 * T - 9.33908040e-07 * T2 +
               1.37029530e-10 * T3 - 7.92061440e-15 * T4) *
              0.0624102852150034;
    // species 33: NH3
    result += y[33] *
              (+2.63445210e+00 + 5.66625600e-03 * T - 1.72786760e-06 * T2 +
               2.38671610e-10 * T3 - 1.25787860e-14 * T4) *
              0.0587164582232400;
    // species 34: NNH
    result += y[34] *
              (+3.76675440e+00 + 2.89150820e-03 * T - 1.04166200e-06 * T2 +
               1.68425940e-10 * T3 - 1.00918960e-14 * T4) *
              0.0344566191165323;
    // species 35: NO
    result += y[35] *
              (+3.26060560e+00 + 1.19110430e-03 * T - 4.29170480e-07 * T2 +
               6.94576690e-11 * T3 - 4.03360990e-15 * T4) *
              0.0333266679997334;
    // species 36: NO2
    result += y[36] *
              (+4.88475420e+00 + 2.17239560e-03 * T - 8.28069060e-07 * T2 +
               1.57475100e-10 * T3 - 1.05108950e-14 * T4) *
              0.0217367677426367;
    // species 37: N2O
    result += y[37] *
              (+4.82307290e+00 + 2.62702510e-03 * T - 9.58508740e-07 * T2 +
               1.60007120e-10 * T3 - 9.77523030e-15 * T4) *
              0.0227205598345943;
    // species 38: HNO
    result += y[38] *
              (+2.97925090e+00 + 3.49440590e-03 * T - 7.85497780e-07 * T2 +
               5.74795940e-11 * T3 - 1.93359160e-16 * T4) *
              0.0322435029341588;
    // species 39: CN
    result += y[39] *
              (+3.74598050e+00 + 4.34507750e-05 * T + 2.97059840e-07 * T2 -
               6.86518060e-11 * T3 + 4.41341730e-15 * T4) *
              0.0384349296640787;
    // species 40: HCN
    result += y[40] *
              (+3.80223920e+00 + 3.14642280e-03 * T - 1.06321850e-06 * T2 +
               1.66197570e-10 * T3 - 9.79975700e-15 * T4) *
              0.0370014060534300;
    // species 41: H2CN
    result += y[41] *
              (+5.20970300e+00 + 2.96929110e-03 * T - 2.85558910e-07 * T2 -
               1.63555000e-10 * T3 + 3.04325890e-14 * T4) *
              0.0356709709638296;
    // species 42: HCNN
    result += y[42] *
              (+5.89463620e+00 + 3.98959590e-03 * T - 1.59823800e-06 * T2 +
               2.92493950e-10 * T3 - 2.00946860e-14 * T4) *
              0.0243706285185095;
    // species 46: NCO
    result += y[46] *
              (+5.15218450e+00 + 2.30517610e-03 * T - 8.80331530e-07 * T2 +
               1.47890980e-10 * T3 - 9.09779960e-15 * T4) *
              0.0237998905205036;
    // species 47: N2
    result += y[47] *
              (+2.92664000e+00 + 1.48797680e-03 * T - 5.68476000e-07 * T2 +
               1.00970380e-10 * T3 - 6.75335100e-15 * T4) *
              0.0356964374955379;
    // species 49: C3H7
    result += y[49] *
              (+7.70269870e+00 + 1.60442030e-02 * T - 5.28332200e-06 * T2 +
               7.62985900e-10 * T3 - 3.93922840e-14 * T4) *
              0.0232077792476038;
    // species 50: C3H8
    result += y[50] *
              (+7.53413680e+00 + 1.88722390e-02 * T - 6.27184910e-06 * T2 +
               9.14756490e-10 * T3 - 4.78380690e-14 * T4) *
              0.0226772796335352;
    // species 51: CH2CHO
    result += y[51] *
              (+5.97567000e+00 + 8.13059100e-03 * T - 2.74362400e-06 * T2 +
               4.07030400e-10 * T3 - 2.17601700e-14 * T4) *
              0.0232315019165989;
    // species 52: CH3CHO
    result += y[52] *
              (+5.40411080e+00 + 1.17230590e-02 * T - 4.22631370e-06 * T2 +
               6.83724510e-10 * T3 - 4.09848630e-14 * T4) *
              0.0226999296302181;
    // species 70: iC3H7
    result += y[70] *
              (+6.51927410e+00 + 1.72201040e-02 * T - 5.73642170e-06 * T2 +
               8.41307320e-10 * T3 - 4.45659130e-14 * T4) *
              0.0232077792476038;
    // species 71: nC3H7
    result += y[71] *
              (+7.70974790e+00 + 1.60314850e-02 * T - 5.27202380e-06 * T2 +
               7.58883520e-10 * T3 - 3.88627190e-14 * T4) *
              0.0232077792476038;
  }

  // species with midpoint at T=1100 kelvin
  if (T < 1100) {
    // species 56: CH3F
    result += y[56] *
              (+2.59623660e+00 + 3.65316940e-03 * T + 1.31032310e-05 * T2 -
               1.45329890e-08 * T3 + 4.48014270e-12 * T4) *
              0.0293828975965344;
    // species 57: CH2F2
    result += y[57] *
              (+1.73900540e+00 + 1.19379250e-02 * T - 2.69320910e-07 * T2 -
               5.51893530e-09 * T3 + 2.18135490e-12 * T4) *
              0.0192219691449264;
    // species 65: CF
    result += y[65] *
              (+3.35383910e+00 + 2.09097030e-04 * T + 3.20774310e-06 * T2 -
               3.66875370e-09 * T3 + 1.19863110e-12 * T4) *
              0.0322482827142312;
  } else {
    // species 56: CH3F
    result += y[56] *
              (+2.64400090e+00 + 9.97250770e-03 * T - 3.98497250e-06 * T2 +
               7.25147620e-10 * T3 - 4.88439960e-14 * T4) *
              0.0293828975965344;
    // species 57: CH2F2
    result += y[57] *
              (+4.55849840e+00 + 8.31978790e-03 * T - 3.37156980e-06 * T2 +
               6.18796870e-10 * T3 - 4.19515430e-14 * T4) *
              0.0192219691449264;
    // species 65: CF
    result += y[65] *
              (+3.66496780e+00 + 9.73680640e-04 * T - 4.10982360e-07 * T2 +
               8.00628750e-11 * T3 - 5.64980680e-15 * T4) *
              0.0322482827142312;
  }

  // species with midpoint at T=1150 kelvin
  if (T < 1150) {
    // species 55: F2
    result += y[55] *
              (+2.66955040e+00 + 5.29418460e-03 * T - 6.47090950e-06 * T2 +
               3.91833470e-09 * T3 - 9.38451350e-13 * T4) *
              0.0263180013451744;
    // species 61: CHF2
    result += y[61] *
              (+1.83276330e+00 + 1.34163800e-02 * T - 9.54328380e-06 * T2 +
               2.95929680e-09 * T3 - 2.79199920e-13 * T4) *
              0.0196017680012705;
    // species 67: CF2O
    result += y[67] *
              (+1.17613860e+00 + 2.10869880e-02 * T - 2.39215710e-05 * T2 +
               1.39949130e-08 * T3 - 3.37605360e-12 * T4) *
              0.0151499527951878;
    // species 68: CHFO
    result += y[68] *
              (+2.11849750e+00 + 1.07739880e-02 * T - 5.51581630e-06 * T2 +
               5.81519320e-10 * T3 + 2.17042090e-13 * T4) *
              0.0208262163370573;
  } else {
    // species 55: F2
    result += y[55] *
              (+4.05774200e+00 + 6.00033760e-04 * T - 2.19217870e-07 * T2 +
               4.31507570e-11 * T3 - 3.12588420e-15 * T4) *
              0.0263180013451744;
    // species 61: CHF2
    result += y[61] *
              (+5.44828140e+00 + 4.41165400e-03 * T - 1.74188580e-06 * T2 +
               3.09199590e-10 * T3 - 2.01761880e-14 * T4) *
              0.0196017680012705;
    // species 67: CF2O
    result += y[67] *
              (+6.79131030e+00 + 3.38305420e-03 * T - 1.43011730e-06 * T2 +
               2.71225720e-10 * T3 - 1.90523810e-14 * T4) *
              0.0151499527951878;
    // species 68: CHFO
    result += y[68] *
              (+4.81925460e+00 + 5.05418230e-03 * T - 2.01421170e-06 * T2 +
               3.63590850e-10 * T3 - 2.44724070e-14 * T4) *
              0.0208262163370573;
  }

  // species with midpoint at T=1250 kelvin
  if (T < 1250) {
    // species 53: HF
    result += y[53] *
              (+3.43657390e+00 + 4.86020720e-04 * T - 1.25239710e-06 * T2 +
               1.36475000e-09 * T3 - 4.09574040e-13 * T4) *
              0.0499839972159217;
    // species 59: CF4
    result += y[59] *
              (+3.29573530e-01 + 3.32696030e-02 * T - 3.88267060e-05 * T2 +
               2.20593470e-08 * T3 - 4.94837330e-12 * T4) *
              0.0113630407528107;
    // species 62: CF3
    result += y[62] *
              (+1.35728710e+00 + 2.15758050e-02 * T - 2.39019820e-05 * T2 +
               1.29611090e-08 * T3 - 2.80173150e-12 * T4) *
              0.0144914495000541;
    // species 66: CF3O
    result += y[66] *
              (+1.38723980e+00 + 2.98955400e-02 * T - 3.42744960e-05 * T2 +
               1.91805700e-08 * T3 - 4.24959350e-12 * T4) *
              0.0117639848900014;
    // species 69: CFO
    result += y[69] *
              (+2.94060800e+00 + 7.47091680e-03 * T - 6.21833160e-06 * T2 +
               2.62916350e-09 * T3 - 4.73221880e-13 * T4) *
              0.0212727923671973;
  } else {
    // species 53: HF
    result += y[53] *
              (+2.78129810e+00 + 1.03959080e-03 * T - 2.41735500e-07 * T2 +
               2.68415900e-11 * T3 - 1.09766370e-15 * T4) *
              0.0499839972159217;
    // species 59: CF4
    result += y[59] *
              (+9.80831530e+00 + 3.28269300e-03 * T - 1.34044840e-06 * T2 +
               2.43738290e-10 * T3 - 1.62861580e-14 * T4) *
              0.0113630407528107;
    // species 62: CF3
    result += y[62] *
              (+7.73167070e+00 + 2.27114640e-03 * T - 8.90496400e-07 * T2 +
               1.52938340e-10 * T3 - 9.50837580e-15 * T4) *
              0.0144914495000541;
    // species 66: CF3O
    result += y[66] *
              (+9.82040840e+00 + 3.38915830e-03 * T - 1.44653890e-06 * T2 +
               2.76961700e-10 * T3 - 1.95580340e-14 * T4) *
              0.0117639848900014;
    // species 69: CFO
    result += y[69] *
              (+5.14996370e+00 + 1.84938470e-03 * T - 7.40231870e-07 * T2 +
               1.32784990e-10 * T3 - 8.83059970e-15 * T4) *
              0.0212727923671973;
  }

  // species with midpoint at T=1300 kelvin
  if (T < 1300) {
    // species 58: CHF3
    result += y[58] *
              (+6.80758290e-01 + 2.39859100e-02 * T - 2.18335980e-05 * T2 +
               9.98025680e-09 * T3 - 1.85179010e-12 * T4) *
              0.0142828149785382;
    // species 60: CH2F
    result += y[60] *
              (+2.11797450e+00 + 1.02392700e-02 * T - 6.62088920e-06 * T2 +
               2.37857030e-09 * T3 - 3.89335870e-13 * T4) *
              0.0302797211911208;
    // species 63: CHF
    result += y[63] *
              (+3.34483880e+00 + 2.35460520e-03 * T + 1.93982930e-06 * T2 -
               2.65250570e-09 * T3 + 7.91169370e-13 * T4) *
              0.0312330139614702;
    // species 64: CF2
    result += y[64] *
              (+2.28591330e+00 + 1.07607860e-02 * T - 1.05382010e-05 * T2 +
               4.89881380e-09 * T3 - 8.86384280e-13 * T4) *
              0.0199968779570337;
  } else {
    // species 58: CHF3
    result += y[58] *
              (+7.52416890e+00 + 5.23004720e-03 * T - 2.03600320e-06 * T2 +
               3.57295560e-10 * T3 - 2.30997270e-14 * T4) *
              0.0142828149785382;
    // species 60: CH2F
    result += y[60] *
              (+4.06013010e+00 + 5.46642290e-03 * T - 2.10949390e-06 * T2 +
               3.74458110e-10 * T3 - 2.47400060e-14 * T4) *
              0.0302797211911208;
    // species 63: CHF
    result += y[63] *
              (+4.48365700e+00 + 1.74963530e-03 * T - 5.04790250e-07 * T2 +
               1.08952650e-10 * T3 - 9.87898230e-15 * T4) *
              0.0312330139614702;
    // species 64: CF2
    result += y[64] *
              (+5.33120660e+00 + 1.97748380e-03 * T - 9.60247910e-07 * T2 +
               2.10703690e-10 * T3 - 1.59539770e-14 * T4) *
              0.0199968779570337;
  }

  // species with midpoint at T=1368 kelvin
  if (T < 1368) {
    // species 44: HOCN
    result += y[44] *
              (+3.78604952e+00 + 6.88667922e-03 * T - 3.21487864e-06 * T2 +
               5.17195767e-10 * T3 + 1.19360788e-14 * T4) *
              0.0232423009877978;
  } else {
    // species 44: HOCN
    result += y[44] *
              (+5.89784885e+00 + 3.16789393e-03 * T - 1.11801064e-06 * T2 +
               1.77243144e-10 * T3 - 1.04339177e-14 * T4) *
              0.0232423009877978;
  }

  // species with midpoint at T=1382 kelvin
  if (T < 1382) {
    // species 43: HCNO
    result += y[43] *
              (+2.64727989e+00 + 1.27505342e-02 * T - 1.04794236e-05 * T2 +
               4.41432836e-09 * T3 - 7.57521466e-13 * T4) *
              0.0232423009877978;
  } else {
    // species 43: HCNO
    result += y[43] *
              (+6.59860456e+00 + 3.02778626e-03 * T - 1.07704346e-06 * T2 +
               1.71666528e-10 * T3 - 1.01439391e-14 * T4) *
              0.0232423009877978;
  }

  // species with midpoint at T=1400 kelvin
  if (T < 1400) {
    // species 54: F
    result += y[54] *
              (+2.90370760e+00 - 6.35296320e-04 * T + 2.64734870e-07 * T2 +
               7.69063060e-11 * T3 - 5.45253550e-14 * T4) *
              0.0526360026903488;
  } else {
    // species 54: F
    result += y[54] *
              (+2.65116610e+00 - 1.40129710e-04 * T + 5.19236430e-08 * T2 -
               8.84954450e-12 * T3 + 5.90280140e-16 * T4) *
              0.0526360026903488;
  }

  // species with midpoint at T=1478 kelvin
  if (T < 1478) {
    // species 45: HNCO
    result += y[45] *
              (+3.63096317e+00 + 7.30282357e-03 * T - 2.28050003e-06 * T2 -
               6.61271298e-10 * T3 + 3.62235752e-13 * T4) *
              0.0232423009877978;
  } else {
    // species 45: HNCO
    result += y[45] *
              (+6.22395134e+00 + 3.17864004e-03 * T - 1.09378755e-06 * T2 +
               1.70735163e-10 * T3 - 9.95021955e-15 * T4) *
              0.0232423009877978;
  }

  cpbs = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 35)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cvbl)
{
  amrex::Real result = 0;
  amrex::Real cvor[72]; //  temporary storage
  cv_R(cvor, T);

  // perform dot product
  for (int id = 0; id < 72; ++id) {
    result += x[id] * cvor[id];
  }

  cvbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 36)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cvbs)
{
  amrex::Real result = 0.0;
  // compute Cv/R at the given temperature
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with no change across T
  // species 48: AR
  result += y[48] * (+1.50000000e+00) * 0.0250312891113892;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    result += y[0] *
              (+1.34433112e+00 + 7.98052075e-03 * T - 1.94781510e-05 * T2 +
               2.01572094e-08 * T3 - 7.37611761e-12 * T4) *
              0.4960317460317460;
    // species 1: H
    result += y[1] *
              (+1.50000000e+00 + 7.05332819e-13 * T - 1.99591964e-15 * T2 +
               2.30081632e-18 * T3 - 9.27732332e-22 * T4) *
              0.9920634920634921;
    // species 2: O
    result += y[2] *
              (+2.16826710e+00 - 3.27931884e-03 * T + 6.64306396e-06 * T2 -
               6.12806624e-09 * T3 + 2.11265971e-12 * T4) *
              0.0625039064941559;
    // species 3: O2
    result += y[3] *
              (+2.78245636e+00 - 2.99673416e-03 * T + 9.84730201e-06 * T2 -
               9.68129509e-09 * T3 + 3.24372837e-12 * T4) *
              0.0312519532470779;
    // species 4: OH
    result += y[4] *
              (+2.99201543e+00 - 2.40131752e-03 * T + 4.61793841e-06 * T2 -
               3.88113333e-09 * T3 + 1.36411470e-12 * T4) *
              0.0587993179279120;
    // species 5: H2O
    result += y[5] *
              (+3.19864056e+00 - 2.03643410e-03 * T + 6.52040211e-06 * T2 -
               5.48797062e-09 * T3 + 1.77197817e-12 * T4) *
              0.0555092978073827;
    // species 6: HO2
    result += y[6] *
              (+3.30179801e+00 - 4.74912051e-03 * T + 2.11582891e-05 * T2 -
               2.42763894e-08 * T3 + 9.29225124e-12 * T4) *
              0.0302975216627280;
    // species 7: H2O2
    result += y[7] *
              (+3.27611269e+00 - 5.42822417e-04 * T + 1.67335701e-05 * T2 -
               2.15770813e-08 * T3 + 8.62454363e-12 * T4) *
              0.0293996589639560;
    // species 8: C
    result += y[8] *
              (+1.55423955e+00 - 3.21537724e-04 * T + 7.33792245e-07 * T2 -
               7.32234889e-10 * T3 + 2.66521446e-13 * T4) *
              0.0832570144034635;
    // species 9: CH
    result += y[9] *
              (+2.48981665e+00 + 3.23835541e-04 * T - 1.68899065e-06 * T2 +
               3.16217327e-09 * T3 - 1.40609067e-12 * T4) *
              0.0768108149627468;
    // species 10: CH2
    result += y[10] *
              (+2.76267867e+00 + 9.68872143e-04 * T + 2.79489841e-06 * T2 -
               3.85091153e-09 * T3 + 1.68741719e-12 * T4) *
              0.0712910814857061;
    // species 11: CH2(S)
    result += y[11] *
              (+3.19860411e+00 - 2.36661419e-03 * T + 8.23296220e-06 * T2 -
               6.68815981e-09 * T3 + 1.94314737e-12 * T4) *
              0.0712910814857061;
    // species 12: CH3
    result += y[12] *
              (+2.67359040e+00 + 2.01095175e-03 * T + 5.73021856e-06 * T2 -
               6.87117425e-09 * T3 + 2.54385734e-12 * T4) *
              0.0665114732291320;
    // species 13: CH4
    result += y[13] *
              (+4.14987613e+00 - 1.36709788e-02 * T + 4.91800599e-05 * T2 -
               4.84743026e-08 * T3 + 1.66693956e-11 * T4) *
              0.0623324814560868;
    // species 14: CO
    result += y[14] *
              (+2.57953347e+00 - 6.10353680e-04 * T + 1.01681433e-06 * T2 +
               9.07005884e-10 * T3 - 9.04424499e-13 * T4) *
              0.0357015351660121;
    // species 15: CO2
    result += y[15] *
              (+1.35677352e+00 + 8.98459677e-03 * T - 7.12356269e-06 * T2 +
               2.45919022e-09 * T3 - 1.43699548e-13 * T4) *
              0.0227226249176305;
    // species 16: HCO
    result += y[16] *
              (+3.22118584e+00 - 3.24392532e-03 * T + 1.37799446e-05 * T2 -
               1.33144093e-08 * T3 + 4.33768865e-12 * T4) *
              0.0344613688055690;
    // species 17: CH2O
    result += y[17] *
              (+3.79372315e+00 - 9.90833369e-03 * T + 3.73220008e-05 * T2 -
               3.79285261e-08 * T3 + 1.31772652e-11 * T4) *
              0.0333044694598015;
    // species 18: CH2OH
    result += y[18] *
              (+2.86388918e+00 + 5.59672304e-03 * T + 5.93271791e-06 * T2 -
               1.04532012e-08 * T3 + 4.36967278e-12 * T4) *
              0.0322227234645872;
    // species 19: CH3O
    result += y[19] *
              (+1.10620400e+00 + 7.21659500e-03 * T + 5.33847200e-06 * T2 -
               7.37763600e-09 * T3 + 2.07561000e-12 * T4) *
              0.0322227234645872;
    // species 20: CH3OH
    result += y[20] *
              (+4.71539582e+00 - 1.52309129e-02 * T + 6.52441155e-05 * T2 -
               7.10806889e-08 * T3 + 2.61352698e-11 * T4) *
              0.0312090381374446;
    // species 21: C2H
    result += y[21] *
              (+1.88965733e+00 + 1.34099611e-02 * T - 2.84769501e-05 * T2 +
               2.94791045e-08 * T3 - 1.09331511e-11 * T4) *
              0.0399520575309628;
    // species 22: C2H2
    result += y[22] *
              (-1.91318906e-01 + 2.33615629e-02 * T - 3.55171815e-05 * T2 +
               2.80152437e-08 * T3 - 8.50072974e-12 * T4) *
              0.0384054074813734;
    // species 23: C2H3
    result += y[23] *
              (+2.21246645e+00 + 1.51479162e-03 * T + 2.59209412e-05 * T2 -
               3.57657847e-08 * T3 + 1.47150873e-11 * T4) *
              0.0369740442209569;
    // species 24: C2H4
    result += y[24] *
              (+2.95920148e+00 - 7.57052247e-03 * T + 5.70990292e-05 * T2 -
               6.91588753e-08 * T3 + 2.69884373e-11 * T4) *
              0.0356455407428531;
    // species 25: C2H5
    result += y[25] *
              (+3.30646568e+00 - 4.18658892e-03 * T + 4.97142807e-05 * T2 -
               5.99126606e-08 * T3 + 2.30509004e-11 * T4) *
              0.0344091941366733;
    // species 26: C2H6
    result += y[26] *
              (+3.29142492e+00 - 5.50154270e-03 * T + 5.99438288e-05 * T2 -
               7.08466285e-08 * T3 + 2.68685771e-11 * T4) *
              0.0332557366145660;
    // species 27: HCCO
    result += y[27] *
              (+1.25172140e+00 + 1.76550210e-02 * T - 2.37291010e-05 * T2 +
               1.72757590e-08 * T3 - 5.06648110e-12 * T4) *
              0.0243730044602598;
    // species 28: CH2CO
    result += y[28] *
              (+1.13583630e+00 + 1.81188721e-02 * T - 1.73947474e-05 * T2 +
               9.34397568e-09 * T3 - 2.01457615e-12 * T4) *
              0.0237885672145967;
    // species 29: HCCOH
    result += y[29] *
              (+2.42373300e-01 + 3.10722010e-02 * T - 5.08668640e-05 * T2 +
               4.31371310e-08 * T3 - 1.40145940e-11 * T4) *
              0.0237885672145967;
    // species 30: N
    result += y[30] * (+1.50000000e+00) * 0.0713928749910759;
    // species 31: NH
    result += y[31] *
              (+2.49290850e+00 + 3.11791980e-04 * T - 1.48904840e-06 * T2 +
               2.48164420e-09 * T3 - 1.03569670e-12 * T4) *
              0.0666000666000666;
    // species 32: NH2
    result += y[32] *
              (+3.20400290e+00 - 2.10613850e-03 * T + 7.10683480e-06 * T2 -
               5.61151970e-09 * T3 + 1.64407170e-12 * T4) *
              0.0624102852150034;
    // species 33: NH3
    result += y[33] *
              (+3.28602740e+00 - 4.66052300e-03 * T + 2.17185130e-05 * T2 -
               2.28088870e-08 * T3 + 8.26380460e-12 * T4) *
              0.0587164582232400;
    // species 34: NNH
    result += y[34] *
              (+3.34469270e+00 - 4.84970720e-03 * T + 2.00594590e-05 * T2 -
               2.17264640e-08 * T3 + 7.94695390e-12 * T4) *
              0.0344566191165323;
    // species 35: NO
    result += y[35] *
              (+3.21847630e+00 - 4.63897600e-03 * T + 1.10410220e-05 * T2 -
               9.33613540e-09 * T3 + 2.80357700e-12 * T4) *
              0.0333266679997334;
    // species 36: NO2
    result += y[36] *
              (+2.94403120e+00 - 1.58542900e-03 * T + 1.66578120e-05 * T2 -
               2.04754260e-08 * T3 + 7.83505640e-12 * T4) *
              0.0217367677426367;
    // species 37: N2O
    result += y[37] *
              (+1.25715020e+00 + 1.13047280e-02 * T - 1.36713190e-05 * T2 +
               9.68198060e-09 * T3 - 2.93071820e-12 * T4) *
              0.0227205598345943;
    // species 38: HNO
    result += y[38] *
              (+3.53349160e+00 - 5.66961710e-03 * T + 1.84732070e-05 * T2 -
               1.71370940e-08 * T3 + 5.54545730e-12 * T4) *
              0.0322435029341588;
    // species 39: CN
    result += y[39] *
              (+2.61293510e+00 - 9.55513270e-04 * T + 2.14429770e-06 * T2 -
               3.15163230e-10 * T3 - 4.64303560e-13 * T4) *
              0.0384349296640787;
    // species 40: HCN
    result += y[40] *
              (+1.25898860e+00 + 1.00511700e-02 * T - 1.33517630e-05 * T2 +
               1.00923490e-08 * T3 - 3.00890280e-12 * T4) *
              0.0370014060534300;
    // species 41: H2CN
    result += y[41] *
              (+1.85166100e+00 + 5.69523310e-03 * T + 1.07114000e-06 * T2 -
               1.62261200e-09 * T3 - 2.35110810e-13 * T4) *
              0.0356709709638296;
    // species 42: HCNN
    result += y[42] *
              (+1.52431940e+00 + 1.59606190e-02 * T - 1.88163540e-05 * T2 +
               1.21255400e-08 * T3 - 3.23573780e-12 * T4) *
              0.0243706285185095;
    // species 46: NCO
    result += y[46] *
              (+1.82693080e+00 + 8.80516880e-03 * T - 8.38661340e-06 * T2 +
               4.80169640e-09 * T3 - 1.33135950e-12 * T4) *
              0.0237998905205036;
    // species 47: N2
    result += y[47] *
              (+2.29867700e+00 + 1.40824040e-03 * T - 3.96322200e-06 * T2 +
               5.64151500e-09 * T3 - 2.44485400e-12 * T4) *
              0.0356964374955379;
    // species 49: C3H7
    result += y[49] *
              (+5.15518000e-02 + 2.59919800e-02 * T + 2.38005400e-06 * T2 -
               1.96095690e-08 * T3 + 9.37324700e-12 * T4) *
              0.0232077792476038;
    // species 50: C3H8
    result += y[50] *
              (-6.64461900e-02 + 2.64245790e-02 * T + 6.10597270e-06 * T2 -
               2.19774990e-08 * T3 + 9.51492530e-12 * T4) *
              0.0226772796335352;
    // species 51: CH2CHO
    result += y[51] *
              (+2.40906200e+00 + 1.07385740e-02 * T + 1.89149200e-06 * T2 -
               7.15858300e-09 * T3 + 2.86738500e-12 * T4) *
              0.0232315019165989;
    // species 52: CH3CHO
    result += y[52] *
              (+3.72945950e+00 - 3.19328580e-03 * T + 4.75349210e-05 * T2 -
               5.74586110e-08 * T3 + 2.19311120e-11 * T4) *
              0.0226999296302181;
    // species 70: iC3H7
    result += y[70] *
              (+4.44919900e-01 + 2.09991120e-02 * T + 7.70362220e-06 * T2 -
               1.84762530e-08 * T3 + 7.12829620e-12 * T4) *
              0.0232077792476038;
    // species 71: nC3H7
    result += y[71] *
              (+4.91173000e-02 + 2.60089730e-02 * T + 2.35425160e-06 * T2 -
               1.95951320e-08 * T3 + 9.37202070e-12 * T4) *
              0.0232077792476038;
  } else {
    // species 0: H2
    result += y[0] *
              (+2.33727920e+00 - 4.94024731e-05 * T + 4.99456778e-07 * T2 -
               1.79566394e-10 * T3 + 2.00255376e-14 * T4) *
              0.4960317460317460;
    // species 1: H
    result += y[1] *
              (+1.50000001e+00 - 2.30842973e-11 * T + 1.61561948e-14 * T2 -
               4.73515235e-18 * T3 + 4.98197357e-22 * T4) *
              0.9920634920634921;
    // species 2: O
    result += y[2] *
              (+1.56942078e+00 - 8.59741137e-05 * T + 4.19484589e-08 * T2 -
               1.00177799e-11 * T3 + 1.22833691e-15 * T4) *
              0.0625039064941559;
    // species 3: O2
    result += y[3] *
              (+2.28253784e+00 + 1.48308754e-03 * T - 7.57966669e-07 * T2 +
               2.09470555e-10 * T3 - 2.16717794e-14 * T4) *
              0.0312519532470779;
    // species 4: OH
    result += y[4] *
              (+2.09288767e+00 + 5.48429716e-04 * T + 1.26505228e-07 * T2 -
               8.79461556e-11 * T3 + 1.17412376e-14 * T4) *
              0.0587993179279120;
    // species 5: H2O
    result += y[5] *
              (+2.03399249e+00 + 2.17691804e-03 * T - 1.64072518e-07 * T2 -
               9.70419870e-11 * T3 + 1.68200992e-14 * T4) *
              0.0555092978073827;
    // species 6: HO2
    result += y[6] *
              (+3.01721090e+00 + 2.23982013e-03 * T - 6.33658150e-07 * T2 +
               1.14246370e-10 * T3 - 1.07908535e-14 * T4) *
              0.0302975216627280;
    // species 7: H2O2
    result += y[7] *
              (+3.16500285e+00 + 4.90831694e-03 * T - 1.90139225e-06 * T2 +
               3.71185986e-10 * T3 - 2.87908305e-14 * T4) *
              0.0293996589639560;
    // species 8: C
    result += y[8] *
              (+1.49266888e+00 + 4.79889284e-05 * T - 7.24335020e-08 * T2 +
               3.74291029e-11 * T3 - 4.87277893e-15 * T4) *
              0.0832570144034635;
    // species 9: CH
    result += y[9] *
              (+1.87846473e+00 + 9.70913681e-04 * T + 1.44445655e-07 * T2 -
               1.30687849e-10 * T3 + 1.76079383e-14 * T4) *
              0.0768108149627468;
    // species 10: CH2
    result += y[10] *
              (+1.87410113e+00 + 3.65639292e-03 * T - 1.40894597e-06 * T2 +
               2.60179549e-10 * T3 - 1.87727567e-14 * T4) *
              0.0712910814857061;
    // species 11: CH2(S)
    result += y[11] *
              (+1.29203842e+00 + 4.65588637e-03 * T - 2.01191947e-06 * T2 +
               4.17906000e-10 * T3 - 3.39716365e-14 * T4) *
              0.0712910814857061;
    // species 12: CH3
    result += y[12] *
              (+1.28571772e+00 + 7.23990037e-03 * T - 2.98714348e-06 * T2 +
               5.95684644e-10 * T3 - 4.67154394e-14 * T4) *
              0.0665114732291320;
    // species 13: CH4
    result += y[13] *
              (-9.25148505e-01 + 1.33909467e-02 * T - 5.73285809e-06 * T2 +
               1.22292535e-09 * T3 - 1.01815230e-13 * T4) *
              0.0623324814560868;
    // species 14: CO
    result += y[14] *
              (+1.71518561e+00 + 2.06252743e-03 * T - 9.98825771e-07 * T2 +
               2.30053008e-10 * T3 - 2.03647716e-14 * T4) *
              0.0357015351660121;
    // species 15: CO2
    result += y[15] *
              (+2.85746029e+00 + 4.41437026e-03 * T - 2.21481404e-06 * T2 +
               5.23490188e-10 * T3 - 4.72084164e-14 * T4) *
              0.0227226249176305;
    // species 16: HCO
    result += y[16] *
              (+1.77217438e+00 + 4.95695526e-03 * T - 2.48445613e-06 * T2 +
               5.89161778e-10 * T3 - 5.33508711e-14 * T4) *
              0.0344613688055690;
    // species 17: CH2O
    result += y[17] *
              (+7.60690080e-01 + 9.20000082e-03 * T - 4.42258813e-06 * T2 +
               1.00641212e-09 * T3 - 8.83855640e-14 * T4) *
              0.0333044694598015;
    // species 18: CH2OH
    result += y[18] *
              (+2.69266569e+00 + 8.64576797e-03 * T - 3.75101120e-06 * T2 +
               7.87234636e-10 * T3 - 6.48554201e-14 * T4) *
              0.0322227234645872;
    // species 19: CH3O
    result += y[19] *
              (+2.77079900e+00 + 7.87149700e-03 * T - 2.65638400e-06 * T2 +
               3.94443100e-10 * T3 - 2.11261600e-14 * T4) *
              0.0322227234645872;
    // species 20: CH3OH
    result += y[20] *
              (+7.89707910e-01 + 1.40938292e-02 * T - 6.36500835e-06 * T2 +
               1.38171085e-09 * T3 - 1.17060220e-13 * T4) *
              0.0312090381374446;
    // species 21: C2H
    result += y[21] *
              (+2.16780652e+00 + 4.75221902e-03 * T - 1.83787077e-06 * T2 +
               3.04190252e-10 * T3 - 1.77232770e-14 * T4) *
              0.0399520575309628;
    // species 22: C2H2
    result += y[22] *
              (+3.14756964e+00 + 5.96166664e-03 * T - 2.37294852e-06 * T2 +
               4.67412171e-10 * T3 - 3.61235213e-14 * T4) *
              0.0384054074813734;
    // species 23: C2H3
    result += y[23] *
              (+2.01672400e+00 + 1.03302292e-02 * T - 4.68082349e-06 * T2 +
               1.01763288e-09 * T3 - 8.62607041e-14 * T4) *
              0.0369740442209569;
    // species 24: C2H4
    result += y[24] *
              (+1.03611116e+00 + 1.46454151e-02 * T - 6.71077915e-06 * T2 +
               1.47222923e-09 * T3 - 1.25706061e-13 * T4) *
              0.0356455407428531;
    // species 25: C2H5
    result += y[25] *
              (+9.54656420e-01 + 1.73972722e-02 * T - 7.98206668e-06 * T2 +
               1.75217689e-09 * T3 - 1.49641576e-13 * T4) *
              0.0344091941366733;
    // species 26: C2H6
    result += y[26] *
              (+7.18815000e-02 + 2.16852677e-02 * T - 1.00256067e-05 * T2 +
               2.21412001e-09 * T3 - 1.90002890e-13 * T4) *
              0.0332557366145660;
    // species 27: HCCO
    result += y[27] *
              (+4.62820580e+00 + 4.08534010e-03 * T - 1.59345470e-06 * T2 +
               2.86260520e-10 * T3 - 1.94078320e-14 * T4) *
              0.0243730044602598;
    // species 28: CH2CO
    result += y[28] *
              (+3.51129732e+00 + 9.00359745e-03 * T - 4.16939635e-06 * T2 +
               9.23345882e-10 * T3 - 7.94838201e-14 * T4) *
              0.0237885672145967;
    // species 29: HCCOH
    result += y[29] *
              (+4.92382910e+00 + 6.79236000e-03 * T - 2.56585640e-06 * T2 +
               4.49878410e-10 * T3 - 2.99401010e-14 * T4) *
              0.0237885672145967;
    // species 30: N
    result += y[30] *
              (+1.41594290e+00 + 1.74890650e-04 * T - 1.19023690e-07 * T2 +
               3.02262450e-11 * T3 - 2.03609820e-15 * T4) *
              0.0713928749910759;
    // species 31: NH
    result += y[31] *
              (+1.78369280e+00 + 1.32984300e-03 * T - 4.24780470e-07 * T2 +
               7.83485010e-11 * T3 - 5.50444700e-15 * T4) *
              0.0666000666000666;
    // species 32: NH2
    result += y[32] *
              (+1.83474210e+00 + 3.20730820e-03 * T - 9.33908040e-07 * T2 +
               1.37029530e-10 * T3 - 7.92061440e-15 * T4) *
              0.0624102852150034;
    // species 33: NH3
    result += y[33] *
              (+1.63445210e+00 + 5.66625600e-03 * T - 1.72786760e-06 * T2 +
               2.38671610e-10 * T3 - 1.25787860e-14 * T4) *
              0.0587164582232400;
    // species 34: NNH
    result += y[34] *
              (+2.76675440e+00 + 2.89150820e-03 * T - 1.04166200e-06 * T2 +
               1.68425940e-10 * T3 - 1.00918960e-14 * T4) *
              0.0344566191165323;
    // species 35: NO
    result += y[35] *
              (+2.26060560e+00 + 1.19110430e-03 * T - 4.29170480e-07 * T2 +
               6.94576690e-11 * T3 - 4.03360990e-15 * T4) *
              0.0333266679997334;
    // species 36: NO2
    result += y[36] *
              (+3.88475420e+00 + 2.17239560e-03 * T - 8.28069060e-07 * T2 +
               1.57475100e-10 * T3 - 1.05108950e-14 * T4) *
              0.0217367677426367;
    // species 37: N2O
    result += y[37] *
              (+3.82307290e+00 + 2.62702510e-03 * T - 9.58508740e-07 * T2 +
               1.60007120e-10 * T3 - 9.77523030e-15 * T4) *
              0.0227205598345943;
    // species 38: HNO
    result += y[38] *
              (+1.97925090e+00 + 3.49440590e-03 * T - 7.85497780e-07 * T2 +
               5.74795940e-11 * T3 - 1.93359160e-16 * T4) *
              0.0322435029341588;
    // species 39: CN
    result += y[39] *
              (+2.74598050e+00 + 4.34507750e-05 * T + 2.97059840e-07 * T2 -
               6.86518060e-11 * T3 + 4.41341730e-15 * T4) *
              0.0384349296640787;
    // species 40: HCN
    result += y[40] *
              (+2.80223920e+00 + 3.14642280e-03 * T - 1.06321850e-06 * T2 +
               1.66197570e-10 * T3 - 9.79975700e-15 * T4) *
              0.0370014060534300;
    // species 41: H2CN
    result += y[41] *
              (+4.20970300e+00 + 2.96929110e-03 * T - 2.85558910e-07 * T2 -
               1.63555000e-10 * T3 + 3.04325890e-14 * T4) *
              0.0356709709638296;
    // species 42: HCNN
    result += y[42] *
              (+4.89463620e+00 + 3.98959590e-03 * T - 1.59823800e-06 * T2 +
               2.92493950e-10 * T3 - 2.00946860e-14 * T4) *
              0.0243706285185095;
    // species 46: NCO
    result += y[46] *
              (+4.15218450e+00 + 2.30517610e-03 * T - 8.80331530e-07 * T2 +
               1.47890980e-10 * T3 - 9.09779960e-15 * T4) *
              0.0237998905205036;
    // species 47: N2
    result += y[47] *
              (+1.92664000e+00 + 1.48797680e-03 * T - 5.68476000e-07 * T2 +
               1.00970380e-10 * T3 - 6.75335100e-15 * T4) *
              0.0356964374955379;
    // species 49: C3H7
    result += y[49] *
              (+6.70269870e+00 + 1.60442030e-02 * T - 5.28332200e-06 * T2 +
               7.62985900e-10 * T3 - 3.93922840e-14 * T4) *
              0.0232077792476038;
    // species 50: C3H8
    result += y[50] *
              (+6.53413680e+00 + 1.88722390e-02 * T - 6.27184910e-06 * T2 +
               9.14756490e-10 * T3 - 4.78380690e-14 * T4) *
              0.0226772796335352;
    // species 51: CH2CHO
    result += y[51] *
              (+4.97567000e+00 + 8.13059100e-03 * T - 2.74362400e-06 * T2 +
               4.07030400e-10 * T3 - 2.17601700e-14 * T4) *
              0.0232315019165989;
    // species 52: CH3CHO
    result += y[52] *
              (+4.40411080e+00 + 1.17230590e-02 * T - 4.22631370e-06 * T2 +
               6.83724510e-10 * T3 - 4.09848630e-14 * T4) *
              0.0226999296302181;
    // species 70: iC3H7
    result += y[70] *
              (+5.51927410e+00 + 1.72201040e-02 * T - 5.73642170e-06 * T2 +
               8.41307320e-10 * T3 - 4.45659130e-14 * T4) *
              0.0232077792476038;
    // species 71: nC3H7
    result += y[71] *
              (+6.70974790e+00 + 1.60314850e-02 * T - 5.27202380e-06 * T2 +
               7.58883520e-10 * T3 - 3.88627190e-14 * T4) *
              0.0232077792476038;
  }

  // species with midpoint at T=1100 kelvin
  if (T < 1100) {
    // species 56: CH3F
    result += y[56] *
              (+1.59623660e+00 + 3.65316940e-03 * T + 1.31032310e-05 * T2 -
               1.45329890e-08 * T3 + 4.48014270e-12 * T4) *
              0.0293828975965344;
    // species 57: CH2F2
    result += y[57] *
              (+7.39005400e-01 + 1.19379250e-02 * T - 2.69320910e-07 * T2 -
               5.51893530e-09 * T3 + 2.18135490e-12 * T4) *
              0.0192219691449264;
    // species 65: CF
    result += y[65] *
              (+2.35383910e+00 + 2.09097030e-04 * T + 3.20774310e-06 * T2 -
               3.66875370e-09 * T3 + 1.19863110e-12 * T4) *
              0.0322482827142312;
  } else {
    // species 56: CH3F
    result += y[56] *
              (+1.64400090e+00 + 9.97250770e-03 * T - 3.98497250e-06 * T2 +
               7.25147620e-10 * T3 - 4.88439960e-14 * T4) *
              0.0293828975965344;
    // species 57: CH2F2
    result += y[57] *
              (+3.55849840e+00 + 8.31978790e-03 * T - 3.37156980e-06 * T2 +
               6.18796870e-10 * T3 - 4.19515430e-14 * T4) *
              0.0192219691449264;
    // species 65: CF
    result += y[65] *
              (+2.66496780e+00 + 9.73680640e-04 * T - 4.10982360e-07 * T2 +
               8.00628750e-11 * T3 - 5.64980680e-15 * T4) *
              0.0322482827142312;
  }

  // species with midpoint at T=1150 kelvin
  if (T < 1150) {
    // species 55: F2
    result += y[55] *
              (+1.66955040e+00 + 5.29418460e-03 * T - 6.47090950e-06 * T2 +
               3.91833470e-09 * T3 - 9.38451350e-13 * T4) *
              0.0263180013451744;
    // species 61: CHF2
    result += y[61] *
              (+8.32763300e-01 + 1.34163800e-02 * T - 9.54328380e-06 * T2 +
               2.95929680e-09 * T3 - 2.79199920e-13 * T4) *
              0.0196017680012705;
    // species 67: CF2O
    result += y[67] *
              (+1.76138600e-01 + 2.10869880e-02 * T - 2.39215710e-05 * T2 +
               1.39949130e-08 * T3 - 3.37605360e-12 * T4) *
              0.0151499527951878;
    // species 68: CHFO
    result += y[68] *
              (+1.11849750e+00 + 1.07739880e-02 * T - 5.51581630e-06 * T2 +
               5.81519320e-10 * T3 + 2.17042090e-13 * T4) *
              0.0208262163370573;
  } else {
    // species 55: F2
    result += y[55] *
              (+3.05774200e+00 + 6.00033760e-04 * T - 2.19217870e-07 * T2 +
               4.31507570e-11 * T3 - 3.12588420e-15 * T4) *
              0.0263180013451744;
    // species 61: CHF2
    result += y[61] *
              (+4.44828140e+00 + 4.41165400e-03 * T - 1.74188580e-06 * T2 +
               3.09199590e-10 * T3 - 2.01761880e-14 * T4) *
              0.0196017680012705;
    // species 67: CF2O
    result += y[67] *
              (+5.79131030e+00 + 3.38305420e-03 * T - 1.43011730e-06 * T2 +
               2.71225720e-10 * T3 - 1.90523810e-14 * T4) *
              0.0151499527951878;
    // species 68: CHFO
    result += y[68] *
              (+3.81925460e+00 + 5.05418230e-03 * T - 2.01421170e-06 * T2 +
               3.63590850e-10 * T3 - 2.44724070e-14 * T4) *
              0.0208262163370573;
  }

  // species with midpoint at T=1250 kelvin
  if (T < 1250) {
    // species 53: HF
    result += y[53] *
              (+2.43657390e+00 + 4.86020720e-04 * T - 1.25239710e-06 * T2 +
               1.36475000e-09 * T3 - 4.09574040e-13 * T4) *
              0.0499839972159217;
    // species 59: CF4
    result += y[59] *
              (-6.70426470e-01 + 3.32696030e-02 * T - 3.88267060e-05 * T2 +
               2.20593470e-08 * T3 - 4.94837330e-12 * T4) *
              0.0113630407528107;
    // species 62: CF3
    result += y[62] *
              (+3.57287100e-01 + 2.15758050e-02 * T - 2.39019820e-05 * T2 +
               1.29611090e-08 * T3 - 2.80173150e-12 * T4) *
              0.0144914495000541;
    // species 66: CF3O
    result += y[66] *
              (+3.87239800e-01 + 2.98955400e-02 * T - 3.42744960e-05 * T2 +
               1.91805700e-08 * T3 - 4.24959350e-12 * T4) *
              0.0117639848900014;
    // species 69: CFO
    result += y[69] *
              (+1.94060800e+00 + 7.47091680e-03 * T - 6.21833160e-06 * T2 +
               2.62916350e-09 * T3 - 4.73221880e-13 * T4) *
              0.0212727923671973;
  } else {
    // species 53: HF
    result += y[53] *
              (+1.78129810e+00 + 1.03959080e-03 * T - 2.41735500e-07 * T2 +
               2.68415900e-11 * T3 - 1.09766370e-15 * T4) *
              0.0499839972159217;
    // species 59: CF4
    result += y[59] *
              (+8.80831530e+00 + 3.28269300e-03 * T - 1.34044840e-06 * T2 +
               2.43738290e-10 * T3 - 1.62861580e-14 * T4) *
              0.0113630407528107;
    // species 62: CF3
    result += y[62] *
              (+6.73167070e+00 + 2.27114640e-03 * T - 8.90496400e-07 * T2 +
               1.52938340e-10 * T3 - 9.50837580e-15 * T4) *
              0.0144914495000541;
    // species 66: CF3O
    result += y[66] *
              (+8.82040840e+00 + 3.38915830e-03 * T - 1.44653890e-06 * T2 +
               2.76961700e-10 * T3 - 1.95580340e-14 * T4) *
              0.0117639848900014;
    // species 69: CFO
    result += y[69] *
              (+4.14996370e+00 + 1.84938470e-03 * T - 7.40231870e-07 * T2 +
               1.32784990e-10 * T3 - 8.83059970e-15 * T4) *
              0.0212727923671973;
  }

  // species with midpoint at T=1300 kelvin
  if (T < 1300) {
    // species 58: CHF3
    result += y[58] *
              (-3.19241710e-01 + 2.39859100e-02 * T - 2.18335980e-05 * T2 +
               9.98025680e-09 * T3 - 1.85179010e-12 * T4) *
              0.0142828149785382;
    // species 60: CH2F
    result += y[60] *
              (+1.11797450e+00 + 1.02392700e-02 * T - 6.62088920e-06 * T2 +
               2.37857030e-09 * T3 - 3.89335870e-13 * T4) *
              0.0302797211911208;
    // species 63: CHF
    result += y[63] *
              (+2.34483880e+00 + 2.35460520e-03 * T + 1.93982930e-06 * T2 -
               2.65250570e-09 * T3 + 7.91169370e-13 * T4) *
              0.0312330139614702;
    // species 64: CF2
    result += y[64] *
              (+1.28591330e+00 + 1.07607860e-02 * T - 1.05382010e-05 * T2 +
               4.89881380e-09 * T3 - 8.86384280e-13 * T4) *
              0.0199968779570337;
  } else {
    // species 58: CHF3
    result += y[58] *
              (+6.52416890e+00 + 5.23004720e-03 * T - 2.03600320e-06 * T2 +
               3.57295560e-10 * T3 - 2.30997270e-14 * T4) *
              0.0142828149785382;
    // species 60: CH2F
    result += y[60] *
              (+3.06013010e+00 + 5.46642290e-03 * T - 2.10949390e-06 * T2 +
               3.74458110e-10 * T3 - 2.47400060e-14 * T4) *
              0.0302797211911208;
    // species 63: CHF
    result += y[63] *
              (+3.48365700e+00 + 1.74963530e-03 * T - 5.04790250e-07 * T2 +
               1.08952650e-10 * T3 - 9.87898230e-15 * T4) *
              0.0312330139614702;
    // species 64: CF2
    result += y[64] *
              (+4.33120660e+00 + 1.97748380e-03 * T - 9.60247910e-07 * T2 +
               2.10703690e-10 * T3 - 1.59539770e-14 * T4) *
              0.0199968779570337;
  }

  // species with midpoint at T=1368 kelvin
  if (T < 1368) {
    // species 44: HOCN
    result += y[44] *
              (+2.78604952e+00 + 6.88667922e-03 * T - 3.21487864e-06 * T2 +
               5.17195767e-10 * T3 + 1.19360788e-14 * T4) *
              0.0232423009877978;
  } else {
    // species 44: HOCN
    result += y[44] *
              (+4.89784885e+00 + 3.16789393e-03 * T - 1.11801064e-06 * T2 +
               1.77243144e-10 * T3 - 1.04339177e-14 * T4) *
              0.0232423009877978;
  }

  // species with midpoint at T=1382 kelvin
  if (T < 1382) {
    // species 43: HCNO
    result += y[43] *
              (+1.64727989e+00 + 1.27505342e-02 * T - 1.04794236e-05 * T2 +
               4.41432836e-09 * T3 - 7.57521466e-13 * T4) *
              0.0232423009877978;
  } else {
    // species 43: HCNO
    result += y[43] *
              (+5.59860456e+00 + 3.02778626e-03 * T - 1.07704346e-06 * T2 +
               1.71666528e-10 * T3 - 1.01439391e-14 * T4) *
              0.0232423009877978;
  }

  // species with midpoint at T=1400 kelvin
  if (T < 1400) {
    // species 54: F
    result += y[54] *
              (+1.90370760e+00 - 6.35296320e-04 * T + 2.64734870e-07 * T2 +
               7.69063060e-11 * T3 - 5.45253550e-14 * T4) *
              0.0526360026903488;
  } else {
    // species 54: F
    result += y[54] *
              (+1.65116610e+00 - 1.40129710e-04 * T + 5.19236430e-08 * T2 -
               8.84954450e-12 * T3 + 5.90280140e-16 * T4) *
              0.0526360026903488;
  }

  // species with midpoint at T=1478 kelvin
  if (T < 1478) {
    // species 45: HNCO
    result += y[45] *
              (+2.63096317e+00 + 7.30282357e-03 * T - 2.28050003e-06 * T2 -
               6.61271298e-10 * T3 + 3.62235752e-13 * T4) *
              0.0232423009877978;
  } else {
    // species 45: HNCO
    result += y[45] *
              (+5.22395134e+00 + 3.17864004e-03 * T - 1.09378755e-06 * T2 +
               1.70735163e-10 * T3 - 9.95021955e-15 * T4) *
              0.0232423009877978;
  }

  cvbs = result * 8.31446261815324e+07;
}

// Returns the mean enthalpy of the mixture in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBML(const amrex::Real T, const amrex::Real x[], amrex::Real& hbml)
{
  amrex::Real result = 0;
  amrex::Real hml[72];                       //  temporary storage
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesEnthalpy(hml, T);

  // perform dot product
  for (int id = 0; id < 72; ++id) {
    result += x[id] * hml[id];
  }

  hbml = result * RT;
}

// Returns mean enthalpy of mixture in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& hbms)
{
  amrex::Real result = 0.0;
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with no change across T
  // species 48: AR
  result +=
    y[48] * (+2.50000000e+00 - 7.45375000e+02 * invT) * 0.0250312891113892;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    result +=
      y[0] *
      (+2.34433112e+00 + 3.99026037e-03 * T - 6.49271700e-06 * T2 +
       5.03930235e-09 * T3 - 1.47522352e-12 * T4 - 9.17935173e+02 * invT) *
      0.4960317460317460;
    // species 1: H
    result +=
      y[1] *
      (+2.50000000e+00 + 3.52666409e-13 * T - 6.65306547e-16 * T2 +
       5.75204080e-19 * T3 - 1.85546466e-22 * T4 + 2.54736599e+04 * invT) *
      0.9920634920634921;
    // species 2: O
    result +=
      y[2] *
      (+3.16826710e+00 - 1.63965942e-03 * T + 2.21435465e-06 * T2 -
       1.53201656e-09 * T3 + 4.22531942e-13 * T4 + 2.91222592e+04 * invT) *
      0.0625039064941559;
    // species 3: O2
    result +=
      y[3] *
      (+3.78245636e+00 - 1.49836708e-03 * T + 3.28243400e-06 * T2 -
       2.42032377e-09 * T3 + 6.48745674e-13 * T4 - 1.06394356e+03 * invT) *
      0.0312519532470779;
    // species 4: OH
    result +=
      y[4] *
      (+3.99201543e+00 - 1.20065876e-03 * T + 1.53931280e-06 * T2 -
       9.70283332e-10 * T3 + 2.72822940e-13 * T4 + 3.61508056e+03 * invT) *
      0.0587993179279120;
    // species 5: H2O
    result +=
      y[5] *
      (+4.19864056e+00 - 1.01821705e-03 * T + 2.17346737e-06 * T2 -
       1.37199266e-09 * T3 + 3.54395634e-13 * T4 - 3.02937267e+04 * invT) *
      0.0555092978073827;
    // species 6: HO2
    result +=
      y[6] *
      (+4.30179801e+00 - 2.37456025e-03 * T + 7.05276303e-06 * T2 -
       6.06909735e-09 * T3 + 1.85845025e-12 * T4 + 2.94808040e+02 * invT) *
      0.0302975216627280;
    // species 7: H2O2
    result +=
      y[7] *
      (+4.27611269e+00 - 2.71411208e-04 * T + 5.57785670e-06 * T2 -
       5.39427032e-09 * T3 + 1.72490873e-12 * T4 - 1.77025821e+04 * invT) *
      0.0293996589639560;
    // species 8: C
    result +=
      y[8] *
      (+2.55423955e+00 - 1.60768862e-04 * T + 2.44597415e-07 * T2 -
       1.83058722e-10 * T3 + 5.33042892e-14 * T4 + 8.54438832e+04 * invT) *
      0.0832570144034635;
    // species 9: CH
    result +=
      y[9] *
      (+3.48981665e+00 + 1.61917771e-04 * T - 5.62996883e-07 * T2 +
       7.90543317e-10 * T3 - 2.81218134e-13 * T4 + 7.07972934e+04 * invT) *
      0.0768108149627468;
    // species 10: CH2
    result +=
      y[10] *
      (+3.76267867e+00 + 4.84436072e-04 * T + 9.31632803e-07 * T2 -
       9.62727883e-10 * T3 + 3.37483438e-13 * T4 + 4.60040401e+04 * invT) *
      0.0712910814857061;
    // species 11: CH2(S)
    result +=
      y[11] *
      (+4.19860411e+00 - 1.18330710e-03 * T + 2.74432073e-06 * T2 -
       1.67203995e-09 * T3 + 3.88629474e-13 * T4 + 5.04968163e+04 * invT) *
      0.0712910814857061;
    // species 12: CH3
    result +=
      y[12] *
      (+3.67359040e+00 + 1.00547588e-03 * T + 1.91007285e-06 * T2 -
       1.71779356e-09 * T3 + 5.08771468e-13 * T4 + 1.64449988e+04 * invT) *
      0.0665114732291320;
    // species 13: CH4
    result +=
      y[13] *
      (+5.14987613e+00 - 6.83548940e-03 * T + 1.63933533e-05 * T2 -
       1.21185757e-08 * T3 + 3.33387912e-12 * T4 - 1.02466476e+04 * invT) *
      0.0623324814560868;
    // species 14: CO
    result +=
      y[14] *
      (+3.57953347e+00 - 3.05176840e-04 * T + 3.38938110e-07 * T2 +
       2.26751471e-10 * T3 - 1.80884900e-13 * T4 - 1.43440860e+04 * invT) *
      0.0357015351660121;
    // species 15: CO2
    result +=
      y[15] *
      (+2.35677352e+00 + 4.49229839e-03 * T - 2.37452090e-06 * T2 +
       6.14797555e-10 * T3 - 2.87399096e-14 * T4 - 4.83719697e+04 * invT) *
      0.0227226249176305;
    // species 16: HCO
    result +=
      y[16] *
      (+4.22118584e+00 - 1.62196266e-03 * T + 4.59331487e-06 * T2 -
       3.32860233e-09 * T3 + 8.67537730e-13 * T4 + 3.83956496e+03 * invT) *
      0.0344613688055690;
    // species 17: CH2O
    result +=
      y[17] *
      (+4.79372315e+00 - 4.95416684e-03 * T + 1.24406669e-05 * T2 -
       9.48213152e-09 * T3 + 2.63545304e-12 * T4 - 1.43089567e+04 * invT) *
      0.0333044694598015;
    // species 18: CH2OH
    result +=
      y[18] *
      (+3.86388918e+00 + 2.79836152e-03 * T + 1.97757264e-06 * T2 -
       2.61330030e-09 * T3 + 8.73934556e-13 * T4 - 3.19391367e+03 * invT) *
      0.0322227234645872;
    // species 19: CH3O
    result +=
      y[19] *
      (+2.10620400e+00 + 3.60829750e-03 * T + 1.77949067e-06 * T2 -
       1.84440900e-09 * T3 + 4.15122000e-13 * T4 + 9.78601100e+02 * invT) *
      0.0322227234645872;
    // species 20: CH3OH
    result +=
      y[20] *
      (+5.71539582e+00 - 7.61545645e-03 * T + 2.17480385e-05 * T2 -
       1.77701722e-08 * T3 + 5.22705396e-12 * T4 - 2.56427656e+04 * invT) *
      0.0312090381374446;
    // species 21: C2H
    result +=
      y[21] *
      (+2.88965733e+00 + 6.70498055e-03 * T - 9.49231670e-06 * T2 +
       7.36977613e-09 * T3 - 2.18663022e-12 * T4 + 6.68393932e+04 * invT) *
      0.0399520575309628;
    // species 22: C2H2
    result +=
      y[22] *
      (+8.08681094e-01 + 1.16807815e-02 * T - 1.18390605e-05 * T2 +
       7.00381092e-09 * T3 - 1.70014595e-12 * T4 + 2.64289807e+04 * invT) *
      0.0384054074813734;
    // species 23: C2H3
    result +=
      y[23] *
      (+3.21246645e+00 + 7.57395810e-04 * T + 8.64031373e-06 * T2 -
       8.94144617e-09 * T3 + 2.94301746e-12 * T4 + 3.48598468e+04 * invT) *
      0.0369740442209569;
    // species 24: C2H4
    result +=
      y[24] *
      (+3.95920148e+00 - 3.78526124e-03 * T + 1.90330097e-05 * T2 -
       1.72897188e-08 * T3 + 5.39768746e-12 * T4 + 5.08977593e+03 * invT) *
      0.0356455407428531;
    // species 25: C2H5
    result +=
      y[25] *
      (+4.30646568e+00 - 2.09329446e-03 * T + 1.65714269e-05 * T2 -
       1.49781651e-08 * T3 + 4.61018008e-12 * T4 + 1.28416265e+04 * invT) *
      0.0344091941366733;
    // species 26: C2H6
    result +=
      y[26] *
      (+4.29142492e+00 - 2.75077135e-03 * T + 1.99812763e-05 * T2 -
       1.77116571e-08 * T3 + 5.37371542e-12 * T4 - 1.15222055e+04 * invT) *
      0.0332557366145660;
    // species 27: HCCO
    result +=
      y[27] *
      (+2.25172140e+00 + 8.82751050e-03 * T - 7.90970033e-06 * T2 +
       4.31893975e-09 * T3 - 1.01329622e-12 * T4 + 2.00594490e+04 * invT) *
      0.0243730044602598;
    // species 28: CH2CO
    result +=
      y[28] *
      (+2.13583630e+00 + 9.05943605e-03 * T - 5.79824913e-06 * T2 +
       2.33599392e-09 * T3 - 4.02915230e-13 * T4 - 7.04291804e+03 * invT) *
      0.0237885672145967;
    // species 29: HCCOH
    result +=
      y[29] *
      (+1.24237330e+00 + 1.55361005e-02 * T - 1.69556213e-05 * T2 +
       1.07842828e-08 * T3 - 2.80291880e-12 * T4 + 8.03161430e+03 * invT) *
      0.0237885672145967;
    // species 30: N
    result +=
      y[30] * (+2.50000000e+00 + 5.61046370e+04 * invT) * 0.0713928749910759;
    // species 31: NH
    result +=
      y[31] *
      (+3.49290850e+00 + 1.55895990e-04 * T - 4.96349467e-07 * T2 +
       6.20411050e-10 * T3 - 2.07139340e-13 * T4 + 4.18806290e+04 * invT) *
      0.0666000666000666;
    // species 32: NH2
    result +=
      y[32] *
      (+4.20400290e+00 - 1.05306925e-03 * T + 2.36894493e-06 * T2 -
       1.40287992e-09 * T3 + 3.28814340e-13 * T4 + 2.18859100e+04 * invT) *
      0.0624102852150034;
    // species 33: NH3
    result +=
      y[33] *
      (+4.28602740e+00 - 2.33026150e-03 * T + 7.23950433e-06 * T2 -
       5.70222175e-09 * T3 + 1.65276092e-12 * T4 - 6.74172850e+03 * invT) *
      0.0587164582232400;
    // species 34: NNH
    result +=
      y[34] *
      (+4.34469270e+00 - 2.42485360e-03 * T + 6.68648633e-06 * T2 -
       5.43161600e-09 * T3 + 1.58939078e-12 * T4 + 2.87919730e+04 * invT) *
      0.0344566191165323;
    // species 35: NO
    result +=
      y[35] *
      (+4.21847630e+00 - 2.31948800e-03 * T + 3.68034067e-06 * T2 -
       2.33403385e-09 * T3 + 5.60715400e-13 * T4 + 9.84462300e+03 * invT) *
      0.0333266679997334;
    // species 36: NO2
    result +=
      y[36] *
      (+3.94403120e+00 - 7.92714500e-04 * T + 5.55260400e-06 * T2 -
       5.11885650e-09 * T3 + 1.56701128e-12 * T4 + 2.89661790e+03 * invT) *
      0.0217367677426367;
    // species 37: N2O
    result +=
      y[37] *
      (+2.25715020e+00 + 5.65236400e-03 * T - 4.55710633e-06 * T2 +
       2.42049515e-09 * T3 - 5.86143640e-13 * T4 + 8.74177440e+03 * invT) *
      0.0227205598345943;
    // species 38: HNO
    result +=
      y[38] *
      (+4.53349160e+00 - 2.83480855e-03 * T + 6.15773567e-06 * T2 -
       4.28427350e-09 * T3 + 1.10909146e-12 * T4 + 1.15482970e+04 * invT) *
      0.0322435029341588;
    // species 39: CN
    result +=
      y[39] *
      (+3.61293510e+00 - 4.77756635e-04 * T + 7.14765900e-07 * T2 -
       7.87908075e-11 * T3 - 9.28607120e-14 * T4 + 5.17083400e+04 * invT) *
      0.0384349296640787;
    // species 40: HCN
    result +=
      y[40] *
      (+2.25898860e+00 + 5.02558500e-03 * T - 4.45058767e-06 * T2 +
       2.52308725e-09 * T3 - 6.01780560e-13 * T4 + 1.47126330e+04 * invT) *
      0.0370014060534300;
    // species 41: H2CN
    result +=
      y[41] *
      (+2.85166100e+00 + 2.84761655e-03 * T + 3.57046667e-07 * T2 -
       4.05653000e-10 * T3 - 4.70221620e-14 * T4 + 2.86378200e+04 * invT) *
      0.0356709709638296;
    // species 42: HCNN
    result +=
      y[42] *
      (+2.52431940e+00 + 7.98030950e-03 * T - 6.27211800e-06 * T2 +
       3.03138500e-09 * T3 - 6.47147560e-13 * T4 + 5.42619840e+04 * invT) *
      0.0243706285185095;
    // species 46: NCO
    result +=
      y[46] *
      (+2.82693080e+00 + 4.40258440e-03 * T - 2.79553780e-06 * T2 +
       1.20042410e-09 * T3 - 2.66271900e-13 * T4 + 1.46824770e+04 * invT) *
      0.0237998905205036;
    // species 47: N2
    result +=
      y[47] *
      (+3.29867700e+00 + 7.04120200e-04 * T - 1.32107400e-06 * T2 +
       1.41037875e-09 * T3 - 4.88970800e-13 * T4 - 1.02089990e+03 * invT) *
      0.0356964374955379;
    // species 49: C3H7
    result +=
      y[49] *
      (+1.05155180e+00 + 1.29959900e-02 * T + 7.93351333e-07 * T2 -
       4.90239225e-09 * T3 + 1.87464940e-12 * T4 + 1.06318630e+04 * invT) *
      0.0232077792476038;
    // species 50: C3H8
    result +=
      y[50] *
      (+9.33553810e-01 + 1.32122895e-02 * T + 2.03532423e-06 * T2 -
       5.49437475e-09 * T3 + 1.90298506e-12 * T4 - 1.39585200e+04 * invT) *
      0.0226772796335352;
    // species 51: CH2CHO
    result +=
      y[51] *
      (+3.40906200e+00 + 5.36928700e-03 * T + 6.30497333e-07 * T2 -
       1.78964575e-09 * T3 + 5.73477000e-13 * T4 + 1.52147660e+03 * invT) *
      0.0232315019165989;
    // species 52: CH3CHO
    result +=
      y[52] *
      (+4.72945950e+00 - 1.59664290e-03 * T + 1.58449737e-05 * T2 -
       1.43646527e-08 * T3 + 4.38622240e-12 * T4 - 2.15728780e+04 * invT) *
      0.0226999296302181;
    // species 70: iC3H7
    result +=
      y[70] *
      (+1.44491990e+00 + 1.04995560e-02 * T + 2.56787407e-06 * T2 -
       4.61906325e-09 * T3 + 1.42565924e-12 * T4 + 9.42237240e+03 * invT) *
      0.0232077792476038;
    // species 71: nC3H7
    result +=
      y[71] *
      (+1.04911730e+00 + 1.30044865e-02 * T + 7.84750533e-07 * T2 -
       4.89878300e-09 * T3 + 1.87440414e-12 * T4 + 1.03123460e+04 * invT) *
      0.0232077792476038;
  } else {
    // species 0: H2
    result +=
      y[0] *
      (+3.33727920e+00 - 2.47012365e-05 * T + 1.66485593e-07 * T2 -
       4.48915985e-11 * T3 + 4.00510752e-15 * T4 - 9.50158922e+02 * invT) *
      0.4960317460317460;
    // species 1: H
    result +=
      y[1] *
      (+2.50000001e+00 - 1.15421486e-11 * T + 5.38539827e-15 * T2 -
       1.18378809e-18 * T3 + 9.96394714e-23 * T4 + 2.54736599e+04 * invT) *
      0.9920634920634921;
    // species 2: O
    result +=
      y[2] *
      (+2.56942078e+00 - 4.29870569e-05 * T + 1.39828196e-08 * T2 -
       2.50444497e-12 * T3 + 2.45667382e-16 * T4 + 2.92175791e+04 * invT) *
      0.0625039064941559;
    // species 3: O2
    result +=
      y[3] *
      (+3.28253784e+00 + 7.41543770e-04 * T - 2.52655556e-07 * T2 +
       5.23676387e-11 * T3 - 4.33435588e-15 * T4 - 1.08845772e+03 * invT) *
      0.0312519532470779;
    // species 4: OH
    result +=
      y[4] *
      (+3.09288767e+00 + 2.74214858e-04 * T + 4.21684093e-08 * T2 -
       2.19865389e-11 * T3 + 2.34824752e-15 * T4 + 3.85865700e+03 * invT) *
      0.0587993179279120;
    // species 5: H2O
    result +=
      y[5] *
      (+3.03399249e+00 + 1.08845902e-03 * T - 5.46908393e-08 * T2 -
       2.42604967e-11 * T3 + 3.36401984e-15 * T4 - 3.00042971e+04 * invT) *
      0.0555092978073827;
    // species 6: HO2
    result +=
      y[6] *
      (+4.01721090e+00 + 1.11991006e-03 * T - 2.11219383e-07 * T2 +
       2.85615925e-11 * T3 - 2.15817070e-15 * T4 + 1.11856713e+02 * invT) *
      0.0302975216627280;
    // species 7: H2O2
    result +=
      y[7] *
      (+4.16500285e+00 + 2.45415847e-03 * T - 6.33797417e-07 * T2 +
       9.27964965e-11 * T3 - 5.75816610e-15 * T4 - 1.78617877e+04 * invT) *
      0.0293996589639560;
    // species 8: C
    result +=
      y[8] *
      (+2.49266888e+00 + 2.39944642e-05 * T - 2.41445007e-08 * T2 +
       9.35727573e-12 * T3 - 9.74555786e-16 * T4 + 8.54512953e+04 * invT) *
      0.0832570144034635;
    // species 9: CH
    result +=
      y[9] *
      (+2.87846473e+00 + 4.85456840e-04 * T + 4.81485517e-08 * T2 -
       3.26719623e-11 * T3 + 3.52158766e-15 * T4 + 7.10124364e+04 * invT) *
      0.0768108149627468;
    // species 10: CH2
    result +=
      y[10] *
      (+2.87410113e+00 + 1.82819646e-03 * T - 4.69648657e-07 * T2 +
       6.50448872e-11 * T3 - 3.75455134e-15 * T4 + 4.62636040e+04 * invT) *
      0.0712910814857061;
    // species 11: CH2(S)
    result +=
      y[11] *
      (+2.29203842e+00 + 2.32794318e-03 * T - 6.70639823e-07 * T2 +
       1.04476500e-10 * T3 - 6.79432730e-15 * T4 + 5.09259997e+04 * invT) *
      0.0712910814857061;
    // species 12: CH3
    result +=
      y[12] *
      (+2.28571772e+00 + 3.61995018e-03 * T - 9.95714493e-07 * T2 +
       1.48921161e-10 * T3 - 9.34308788e-15 * T4 + 1.67755843e+04 * invT) *
      0.0665114732291320;
    // species 13: CH4
    result +=
      y[13] *
      (+7.48514950e-02 + 6.69547335e-03 * T - 1.91095270e-06 * T2 +
       3.05731338e-10 * T3 - 2.03630460e-14 * T4 - 9.46834459e+03 * invT) *
      0.0623324814560868;
    // species 14: CO
    result +=
      y[14] *
      (+2.71518561e+00 + 1.03126372e-03 * T - 3.32941924e-07 * T2 +
       5.75132520e-11 * T3 - 4.07295432e-15 * T4 - 1.41518724e+04 * invT) *
      0.0357015351660121;
    // species 15: CO2
    result +=
      y[15] *
      (+3.85746029e+00 + 2.20718513e-03 * T - 7.38271347e-07 * T2 +
       1.30872547e-10 * T3 - 9.44168328e-15 * T4 - 4.87591660e+04 * invT) *
      0.0227226249176305;
    // species 16: HCO
    result +=
      y[16] *
      (+2.77217438e+00 + 2.47847763e-03 * T - 8.28152043e-07 * T2 +
       1.47290445e-10 * T3 - 1.06701742e-14 * T4 + 4.01191815e+03 * invT) *
      0.0344613688055690;
    // species 17: CH2O
    result +=
      y[17] *
      (+1.76069008e+00 + 4.60000041e-03 * T - 1.47419604e-06 * T2 +
       2.51603030e-10 * T3 - 1.76771128e-14 * T4 - 1.39958323e+04 * invT) *
      0.0333044694598015;
    // species 18: CH2OH
    result +=
      y[18] *
      (+3.69266569e+00 + 4.32288399e-03 * T - 1.25033707e-06 * T2 +
       1.96808659e-10 * T3 - 1.29710840e-14 * T4 - 3.24250627e+03 * invT) *
      0.0322227234645872;
    // species 19: CH3O
    result +=
      y[19] *
      (+3.77079900e+00 + 3.93574850e-03 * T - 8.85461333e-07 * T2 +
       9.86107750e-11 * T3 - 4.22523200e-15 * T4 + 1.27832520e+02 * invT) *
      0.0322227234645872;
    // species 20: CH3OH
    result +=
      y[20] *
      (+1.78970791e+00 + 7.04691460e-03 * T - 2.12166945e-06 * T2 +
       3.45427713e-10 * T3 - 2.34120440e-14 * T4 - 2.53748747e+04 * invT) *
      0.0312090381374446;
    // species 21: C2H
    result +=
      y[21] *
      (+3.16780652e+00 + 2.37610951e-03 * T - 6.12623590e-07 * T2 +
       7.60475630e-11 * T3 - 3.54465540e-15 * T4 + 6.71210650e+04 * invT) *
      0.0399520575309628;
    // species 22: C2H2
    result +=
      y[22] *
      (+4.14756964e+00 + 2.98083332e-03 * T - 7.90982840e-07 * T2 +
       1.16853043e-10 * T3 - 7.22470426e-15 * T4 + 2.59359992e+04 * invT) *
      0.0384054074813734;
    // species 23: C2H3
    result +=
      y[23] *
      (+3.01672400e+00 + 5.16511460e-03 * T - 1.56027450e-06 * T2 +
       2.54408220e-10 * T3 - 1.72521408e-14 * T4 + 3.46128739e+04 * invT) *
      0.0369740442209569;
    // species 24: C2H4
    result +=
      y[24] *
      (+2.03611116e+00 + 7.32270755e-03 * T - 2.23692638e-06 * T2 +
       3.68057308e-10 * T3 - 2.51412122e-14 * T4 + 4.93988614e+03 * invT) *
      0.0356455407428531;
    // species 25: C2H5
    result +=
      y[25] *
      (+1.95465642e+00 + 8.69863610e-03 * T - 2.66068889e-06 * T2 +
       4.38044223e-10 * T3 - 2.99283152e-14 * T4 + 1.28575200e+04 * invT) *
      0.0344091941366733;
    // species 26: C2H6
    result +=
      y[26] *
      (+1.07188150e+00 + 1.08426339e-02 * T - 3.34186890e-06 * T2 +
       5.53530003e-10 * T3 - 3.80005780e-14 * T4 - 1.14263932e+04 * invT) *
      0.0332557366145660;
    // species 27: HCCO
    result +=
      y[27] *
      (+5.62820580e+00 + 2.04267005e-03 * T - 5.31151567e-07 * T2 +
       7.15651300e-11 * T3 - 3.88156640e-15 * T4 + 1.93272150e+04 * invT) *
      0.0243730044602598;
    // species 28: CH2CO
    result +=
      y[28] *
      (+4.51129732e+00 + 4.50179872e-03 * T - 1.38979878e-06 * T2 +
       2.30836470e-10 * T3 - 1.58967640e-14 * T4 - 7.55105311e+03 * invT) *
      0.0237885672145967;
    // species 29: HCCOH
    result +=
      y[29] *
      (+5.92382910e+00 + 3.39618000e-03 * T - 8.55285467e-07 * T2 +
       1.12469603e-10 * T3 - 5.98802020e-15 * T4 + 7.26462600e+03 * invT) *
      0.0237885672145967;
    // species 30: N
    result +=
      y[30] *
      (+2.41594290e+00 + 8.74453250e-05 * T - 3.96745633e-08 * T2 +
       7.55656125e-12 * T3 - 4.07219640e-16 * T4 + 5.61337730e+04 * invT) *
      0.0713928749910759;
    // species 31: NH
    result +=
      y[31] *
      (+2.78369280e+00 + 6.64921500e-04 * T - 1.41593490e-07 * T2 +
       1.95871253e-11 * T3 - 1.10088940e-15 * T4 + 4.21208480e+04 * invT) *
      0.0666000666000666;
    // species 32: NH2
    result +=
      y[32] *
      (+2.83474210e+00 + 1.60365410e-03 * T - 3.11302680e-07 * T2 +
       3.42573825e-11 * T3 - 1.58412288e-15 * T4 + 2.21719570e+04 * invT) *
      0.0624102852150034;
    // species 33: NH3
    result +=
      y[33] *
      (+2.63445210e+00 + 2.83312800e-03 * T - 5.75955867e-07 * T2 +
       5.96679025e-11 * T3 - 2.51575720e-15 * T4 - 6.54469580e+03 * invT) *
      0.0587164582232400;
    // species 34: NNH
    result +=
      y[34] *
      (+3.76675440e+00 + 1.44575410e-03 * T - 3.47220667e-07 * T2 +
       4.21064850e-11 * T3 - 2.01837920e-15 * T4 + 2.86506970e+04 * invT) *
      0.0344566191165323;
    // species 35: NO
    result +=
      y[35] *
      (+3.26060560e+00 + 5.95552150e-04 * T - 1.43056827e-07 * T2 +
       1.73644173e-11 * T3 - 8.06721980e-16 * T4 + 9.92097460e+03 * invT) *
      0.0333266679997334;
    // species 36: NO2
    result +=
      y[36] *
      (+4.88475420e+00 + 1.08619780e-03 * T - 2.76023020e-07 * T2 +
       3.93687750e-11 * T3 - 2.10217900e-15 * T4 + 2.31649830e+03 * invT) *
      0.0217367677426367;
    // species 37: N2O
    result +=
      y[37] *
      (+4.82307290e+00 + 1.31351255e-03 * T - 3.19502913e-07 * T2 +
       4.00017800e-11 * T3 - 1.95504606e-15 * T4 + 8.07340480e+03 * invT) *
      0.0227205598345943;
    // species 38: HNO
    result +=
      y[38] *
      (+2.97925090e+00 + 1.74720295e-03 * T - 2.61832593e-07 * T2 +
       1.43698985e-11 * T3 - 3.86718320e-17 * T4 + 1.17505820e+04 * invT) *
      0.0322435029341588;
    // species 39: CN
    result +=
      y[39] *
      (+3.74598050e+00 + 2.17253875e-05 * T + 9.90199467e-08 * T2 -
       1.71629515e-11 * T3 + 8.82683460e-16 * T4 + 5.15361880e+04 * invT) *
      0.0384349296640787;
    // species 40: HCN
    result +=
      y[40] *
      (+3.80223920e+00 + 1.57321140e-03 * T - 3.54406167e-07 * T2 +
       4.15493925e-11 * T3 - 1.95995140e-15 * T4 + 1.44072920e+04 * invT) *
      0.0370014060534300;
    // species 41: H2CN
    result +=
      y[41] *
      (+5.20970300e+00 + 1.48464555e-03 * T - 9.51863033e-08 * T2 -
       4.08887500e-11 * T3 + 6.08651780e-15 * T4 + 2.76771090e+04 * invT) *
      0.0356709709638296;
    // species 42: HCNN
    result +=
      y[42] *
      (+5.89463620e+00 + 1.99479795e-03 * T - 5.32746000e-07 * T2 +
       7.31234875e-11 * T3 - 4.01893720e-15 * T4 + 5.34529410e+04 * invT) *
      0.0243706285185095;
    // species 46: NCO
    result +=
      y[46] *
      (+5.15218450e+00 + 1.15258805e-03 * T - 2.93443843e-07 * T2 +
       3.69727450e-11 * T3 - 1.81955992e-15 * T4 + 1.40041230e+04 * invT) *
      0.0237998905205036;
    // species 47: N2
    result +=
      y[47] *
      (+2.92664000e+00 + 7.43988400e-04 * T - 1.89492000e-07 * T2 +
       2.52425950e-11 * T3 - 1.35067020e-15 * T4 - 9.22797700e+02 * invT) *
      0.0356964374955379;
    // species 49: C3H7
    result +=
      y[49] *
      (+7.70269870e+00 + 8.02210150e-03 * T - 1.76110733e-06 * T2 +
       1.90746475e-10 * T3 - 7.87845680e-15 * T4 + 8.29843360e+03 * invT) *
      0.0232077792476038;
    // species 50: C3H8
    result +=
      y[50] *
      (+7.53413680e+00 + 9.43611950e-03 * T - 2.09061637e-06 * T2 +
       2.28689123e-10 * T3 - 9.56761380e-15 * T4 - 1.64675160e+04 * invT) *
      0.0226772796335352;
    // species 51: CH2CHO
    result +=
      y[51] *
      (+5.97567000e+00 + 4.06529550e-03 * T - 9.14541333e-07 * T2 +
       1.01757600e-10 * T3 - 4.35203400e-15 * T4 + 4.90321800e+02 * invT) *
      0.0232315019165989;
    // species 52: CH3CHO
    result +=
      y[52] *
      (+5.40411080e+00 + 5.86152950e-03 * T - 1.40877123e-06 * T2 +
       1.70931128e-10 * T3 - 8.19697260e-15 * T4 - 2.25931220e+04 * invT) *
      0.0226999296302181;
    // species 70: iC3H7
    result +=
      y[70] *
      (+6.51927410e+00 + 8.61005200e-03 * T - 1.91214057e-06 * T2 +
       2.10326830e-10 * T3 - 8.91318260e-15 * T4 + 7.32271930e+03 * invT) *
      0.0232077792476038;
    // species 71: nC3H7
    result +=
      y[71] *
      (+7.70974790e+00 + 8.01574250e-03 * T - 1.75734127e-06 * T2 +
       1.89720880e-10 * T3 - 7.77254380e-15 * T4 + 7.97622360e+03 * invT) *
      0.0232077792476038;
  }

  // species with midpoint at T=1100 kelvin
  if (T < 1100) {
    // species 56: CH3F
    result +=
      y[56] *
      (+2.59623660e+00 + 1.82658470e-03 * T + 4.36774367e-06 * T2 -
       3.63324725e-09 * T3 + 8.96028540e-13 * T4 - 2.90068080e+04 * invT) *
      0.0293828975965344;
    // species 57: CH2F2
    result +=
      y[57] *
      (+1.73900540e+00 + 5.96896250e-03 * T - 8.97736367e-08 * T2 -
       1.37973382e-09 * T3 + 4.36270980e-13 * T4 - 5.54396840e+04 * invT) *
      0.0192219691449264;
    // species 65: CF
    result +=
      y[65] *
      (+3.35383910e+00 + 1.04548515e-04 * T + 1.06924770e-06 * T2 -
       9.17188425e-10 * T3 + 2.39726220e-13 * T4 + 2.79077430e+04 * invT) *
      0.0322482827142312;
  } else {
    // species 56: CH3F
    result +=
      y[56] *
      (+2.64400090e+00 + 4.98625385e-03 * T - 1.32832417e-06 * T2 +
       1.81286905e-10 * T3 - 9.76879920e-15 * T4 - 2.94271460e+04 * invT) *
      0.0293828975965344;
    // species 57: CH2F2
    result +=
      y[57] *
      (+4.55849840e+00 + 4.15989395e-03 * T - 1.12385660e-06 * T2 +
       1.54699217e-10 * T3 - 8.39030860e-15 * T4 - 5.65062210e+04 * invT) *
      0.0192219691449264;
    // species 65: CF
    result +=
      y[65] *
      (+3.66496780e+00 + 4.86840320e-04 * T - 1.36994120e-07 * T2 +
       2.00157188e-11 * T3 - 1.12996136e-15 * T4 + 2.77241770e+04 * invT) *
      0.0322482827142312;
  }

  // species with midpoint at T=1150 kelvin
  if (T < 1150) {
    // species 55: F2
    result +=
      y[55] *
      (+2.66955040e+00 + 2.64709230e-03 * T - 2.15696983e-06 * T2 +
       9.79583675e-10 * T3 - 1.87690270e-13 * T4 - 9.80801280e+02 * invT) *
      0.0263180013451744;
    // species 61: CHF2
    result +=
      y[61] *
      (+1.83276330e+00 + 6.70819000e-03 * T - 3.18109460e-06 * T2 +
       7.39824200e-10 * T3 - 5.58399840e-14 * T4 - 3.08570560e+04 * invT) *
      0.0196017680012705;
    // species 67: CF2O
    result +=
      y[67] *
      (+1.17613860e+00 + 1.05434940e-02 * T - 7.97385700e-06 * T2 +
       3.49872825e-09 * T3 - 6.75210720e-13 * T4 - 7.79513030e+04 * invT) *
      0.0151499527951878;
    // species 68: CHFO
    result +=
      y[68] *
      (+2.11849750e+00 + 5.38699400e-03 * T - 1.83860543e-06 * T2 +
       1.45379830e-10 * T3 + 4.34084180e-14 * T4 - 4.63567050e+04 * invT) *
      0.0208262163370573;
  } else {
    // species 55: F2
    result +=
      y[55] *
      (+4.05774200e+00 + 3.00016880e-04 * T - 7.30726233e-08 * T2 +
       1.07876892e-11 * T3 - 6.25176840e-16 * T4 - 1.32438600e+03 * invT) *
      0.0263180013451744;
    // species 61: CHF2
    result +=
      y[61] *
      (+5.44828140e+00 + 2.20582700e-03 * T - 5.80628600e-07 * T2 +
       7.72998975e-11 * T3 - 4.03523760e-15 * T4 - 3.19609500e+04 * invT) *
      0.0196017680012705;
    // species 67: CF2O
    result +=
      y[67] *
      (+6.79131030e+00 + 1.69152710e-03 * T - 4.76705767e-07 * T2 +
       6.78064300e-11 * T3 - 3.81047620e-15 * T4 - 7.94539770e+04 * invT) *
      0.0151499527951878;
    // species 68: CHFO
    result +=
      y[68] *
      (+4.81925460e+00 + 2.52709115e-03 * T - 6.71403900e-07 * T2 +
       9.08977125e-11 * T3 - 4.89448140e-15 * T4 - 4.72630780e+04 * invT) *
      0.0208262163370573;
  }

  // species with midpoint at T=1250 kelvin
  if (T < 1250) {
    // species 53: HF
    result +=
      y[53] *
      (+3.43657390e+00 + 2.43010360e-04 * T - 4.17465700e-07 * T2 +
       3.41187500e-10 * T3 - 8.19148080e-14 * T4 - 3.38000890e+04 * invT) *
      0.0499839972159217;
    // species 59: CF4
    result +=
      y[59] *
      (+3.29573530e-01 + 1.66348015e-02 * T - 1.29422353e-05 * T2 +
       5.51483675e-09 * T3 - 9.89674660e-13 * T4 - 1.13503610e+05 * invT) *
      0.0113630407528107;
    // species 62: CF3
    result +=
      y[62] *
      (+1.35728710e+00 + 1.07879025e-02 * T - 7.96732733e-06 * T2 +
       3.24027725e-09 * T3 - 5.60346300e-13 * T4 - 5.73912730e+04 * invT) *
      0.0144914495000541;
    // species 66: CF3O
    result +=
      y[66] *
      (+1.38723980e+00 + 1.49477700e-02 * T - 1.14248320e-05 * T2 +
       4.79514250e-09 * T3 - 8.49918700e-13 * T4 - 8.03369020e+04 * invT) *
      0.0117639848900014;
    // species 69: CFO
    result +=
      y[69] *
      (+2.94060800e+00 + 3.73545840e-03 * T - 2.07277720e-06 * T2 +
       6.57290875e-10 * T3 - 9.46443760e-14 * T4 - 2.17922550e+04 * invT) *
      0.0212727923671973;
  } else {
    // species 53: HF
    result +=
      y[53] *
      (+2.78129810e+00 + 5.19795400e-04 * T - 8.05785000e-08 * T2 +
       6.71039750e-12 * T3 - 2.19532740e-16 * T4 - 3.35041740e+04 * invT) *
      0.0499839972159217;
    // species 59: CF4
    result +=
      y[59] *
      (+9.80831530e+00 + 1.64134650e-03 * T - 4.46816133e-07 * T2 +
       6.09345725e-11 * T3 - 3.25723160e-15 * T4 - 1.16024990e+05 * invT) *
      0.0113630407528107;
    // species 62: CF3
    result +=
      y[62] *
      (+7.73167070e+00 + 1.13557320e-03 * T - 2.96832133e-07 * T2 +
       3.82345850e-11 * T3 - 1.90167516e-15 * T4 - 5.91456750e+04 * invT) *
      0.0144914495000541;
    // species 66: CF3O
    result +=
      y[66] *
      (+9.82040840e+00 + 1.69457915e-03 * T - 4.82179633e-07 * T2 +
       6.92404250e-11 * T3 - 3.91160680e-15 * T4 - 8.25865820e+04 * invT) *
      0.0117639848900014;
    // species 69: CFO
    result +=
      y[69] *
      (+5.14996370e+00 + 9.24692350e-04 * T - 2.46743957e-07 * T2 +
       3.31962475e-11 * T3 - 1.76611994e-15 * T4 - 2.24883720e+04 * invT) *
      0.0212727923671973;
  }

  // species with midpoint at T=1300 kelvin
  if (T < 1300) {
    // species 58: CHF3
    result +=
      y[58] *
      (+6.80758290e-01 + 1.19929550e-02 * T - 7.27786600e-06 * T2 +
       2.49506420e-09 * T3 - 3.70358020e-13 * T4 - 8.49894160e+04 * invT) *
      0.0142828149785382;
    // species 60: CH2F
    result +=
      y[60] *
      (+2.11797450e+00 + 5.11963500e-03 * T - 2.20696307e-06 * T2 +
       5.94642575e-10 * T3 - 7.78671740e-14 * T4 - 4.95741860e+03 * invT) *
      0.0302797211911208;
    // species 63: CHF
    result +=
      y[63] *
      (+3.34483880e+00 + 1.17730260e-03 * T + 6.46609767e-07 * T2 -
       6.63126425e-10 * T3 + 1.58233874e-13 * T4 + 1.85140140e+04 * invT) *
      0.0312330139614702;
    // species 64: CF2
    result +=
      y[64] *
      (+2.28591330e+00 + 5.38039300e-03 * T - 3.51273367e-06 * T2 +
       1.22470345e-09 * T3 - 1.77276856e-13 * T4 - 2.35211830e+04 * invT) *
      0.0199968779570337;
  } else {
    // species 58: CHF3
    result +=
      y[58] *
      (+7.52416890e+00 + 2.61502360e-03 * T - 6.78667733e-07 * T2 +
       8.93238900e-11 * T3 - 4.61994540e-15 * T4 - 8.70225080e+04 * invT) *
      0.0142828149785382;
    // species 60: CH2F
    result +=
      y[60] *
      (+4.06013010e+00 + 2.73321145e-03 * T - 7.03164633e-07 * T2 +
       9.36145275e-11 * T3 - 4.94800120e-15 * T4 - 5.59276780e+03 * invT) *
      0.0302797211911208;
    // species 63: CHF
    result +=
      y[63] *
      (+4.48365700e+00 + 8.74817650e-04 * T - 1.68263417e-07 * T2 +
       2.72381625e-11 * T3 - 1.97579646e-15 * T4 + 1.79581230e+04 * invT) *
      0.0312330139614702;
    // species 64: CF2
    result +=
      y[64] *
      (+5.33120660e+00 + 9.88741900e-04 * T - 3.20082637e-07 * T2 +
       5.26759225e-11 * T3 - 3.19079540e-15 * T4 - 2.43713700e+04 * invT) *
      0.0199968779570337;
  }

  // species with midpoint at T=1368 kelvin
  if (T < 1368) {
    // species 44: HOCN
    result +=
      y[44] *
      (+3.78604952e+00 + 3.44333961e-03 * T - 1.07162621e-06 * T2 +
       1.29298942e-10 * T3 + 2.38721576e-15 * T4 - 2.82698400e+03 * invT) *
      0.0232423009877978;
  } else {
    // species 44: HOCN
    result +=
      y[44] *
      (+5.89784885e+00 + 1.58394696e-03 * T - 3.72670213e-07 * T2 +
       4.43107860e-11 * T3 - 2.08678354e-15 * T4 - 3.70653331e+03 * invT) *
      0.0232423009877978;
  }

  // species with midpoint at T=1382 kelvin
  if (T < 1382) {
    // species 43: HCNO
    result +=
      y[43] *
      (+2.64727989e+00 + 6.37526710e-03 * T - 3.49314120e-06 * T2 +
       1.10358209e-09 * T3 - 1.51504293e-13 * T4 + 1.92990252e+04 * invT) *
      0.0232423009877978;
  } else {
    // species 43: HCNO
    result +=
      y[43] *
      (+6.59860456e+00 + 1.51389313e-03 * T - 3.59014487e-07 * T2 +
       4.29166320e-11 * T3 - 2.02878782e-15 * T4 + 1.79661339e+04 * invT) *
      0.0232423009877978;
  }

  // species with midpoint at T=1400 kelvin
  if (T < 1400) {
    // species 54: F
    result +=
      y[54] *
      (+2.90370760e+00 - 3.17648160e-04 * T + 8.82449567e-08 * T2 +
       1.92265765e-11 * T3 - 1.09050710e-14 * T4 + 8.67226920e+03 * invT) *
      0.0526360026903488;
  } else {
    // species 54: F
    result +=
      y[54] *
      (+2.65116610e+00 - 7.00648550e-05 * T + 1.73078810e-08 * T2 -
       2.21238612e-12 * T3 + 1.18056028e-16 * T4 + 8.75829010e+03 * invT) *
      0.0526360026903488;
  }

  // species with midpoint at T=1478 kelvin
  if (T < 1478) {
    // species 45: HNCO
    result +=
      y[45] *
      (+3.63096317e+00 + 3.65141179e-03 * T - 7.60166677e-07 * T2 -
       1.65317825e-10 * T3 + 7.24471504e-14 * T4 - 1.55873636e+04 * invT) *
      0.0232423009877978;
  } else {
    // species 45: HNCO
    result +=
      y[45] *
      (+6.22395134e+00 + 1.58932002e-03 * T - 3.64595850e-07 * T2 +
       4.26837908e-11 * T3 - 1.99004391e-15 * T4 - 1.66599344e+04 * invT) *
      0.0232423009877978;
  }

  const amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  hbms = result * RT;
}

// get mean internal energy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBML(const amrex::Real T, const amrex::Real x[], amrex::Real& ubml)
{
  amrex::Real result = 0;
  amrex::Real uml[72];                       //  temporary energy array
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesInternalEnergy(uml, T);

  // perform dot product
  for (int id = 0; id < 72; ++id) {
    result += x[id] * uml[id];
  }

  ubml = result * RT;
}

// get mean internal energy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& ubms)
{
  amrex::Real result = 0.0;
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with no change across T
  // species 48: AR
  result +=
    y[48] * (+1.50000000e+00 - 7.45375000e+02 * invT) * 0.0250312891113892;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: H2
    result +=
      y[0] *
      (+1.34433112e+00 + 3.99026037e-03 * T - 6.49271700e-06 * T2 +
       5.03930235e-09 * T3 - 1.47522352e-12 * T4 - 9.17935173e+02 * invT) *
      0.4960317460317460;
    // species 1: H
    result +=
      y[1] *
      (+1.50000000e+00 + 3.52666409e-13 * T - 6.65306547e-16 * T2 +
       5.75204080e-19 * T3 - 1.85546466e-22 * T4 + 2.54736599e+04 * invT) *
      0.9920634920634921;
    // species 2: O
    result +=
      y[2] *
      (+2.16826710e+00 - 1.63965942e-03 * T + 2.21435465e-06 * T2 -
       1.53201656e-09 * T3 + 4.22531942e-13 * T4 + 2.91222592e+04 * invT) *
      0.0625039064941559;
    // species 3: O2
    result +=
      y[3] *
      (+2.78245636e+00 - 1.49836708e-03 * T + 3.28243400e-06 * T2 -
       2.42032377e-09 * T3 + 6.48745674e-13 * T4 - 1.06394356e+03 * invT) *
      0.0312519532470779;
    // species 4: OH
    result +=
      y[4] *
      (+2.99201543e+00 - 1.20065876e-03 * T + 1.53931280e-06 * T2 -
       9.70283332e-10 * T3 + 2.72822940e-13 * T4 + 3.61508056e+03 * invT) *
      0.0587993179279120;
    // species 5: H2O
    result +=
      y[5] *
      (+3.19864056e+00 - 1.01821705e-03 * T + 2.17346737e-06 * T2 -
       1.37199266e-09 * T3 + 3.54395634e-13 * T4 - 3.02937267e+04 * invT) *
      0.0555092978073827;
    // species 6: HO2
    result +=
      y[6] *
      (+3.30179801e+00 - 2.37456025e-03 * T + 7.05276303e-06 * T2 -
       6.06909735e-09 * T3 + 1.85845025e-12 * T4 + 2.94808040e+02 * invT) *
      0.0302975216627280;
    // species 7: H2O2
    result +=
      y[7] *
      (+3.27611269e+00 - 2.71411208e-04 * T + 5.57785670e-06 * T2 -
       5.39427032e-09 * T3 + 1.72490873e-12 * T4 - 1.77025821e+04 * invT) *
      0.0293996589639560;
    // species 8: C
    result +=
      y[8] *
      (+1.55423955e+00 - 1.60768862e-04 * T + 2.44597415e-07 * T2 -
       1.83058722e-10 * T3 + 5.33042892e-14 * T4 + 8.54438832e+04 * invT) *
      0.0832570144034635;
    // species 9: CH
    result +=
      y[9] *
      (+2.48981665e+00 + 1.61917771e-04 * T - 5.62996883e-07 * T2 +
       7.90543317e-10 * T3 - 2.81218134e-13 * T4 + 7.07972934e+04 * invT) *
      0.0768108149627468;
    // species 10: CH2
    result +=
      y[10] *
      (+2.76267867e+00 + 4.84436072e-04 * T + 9.31632803e-07 * T2 -
       9.62727883e-10 * T3 + 3.37483438e-13 * T4 + 4.60040401e+04 * invT) *
      0.0712910814857061;
    // species 11: CH2(S)
    result +=
      y[11] *
      (+3.19860411e+00 - 1.18330710e-03 * T + 2.74432073e-06 * T2 -
       1.67203995e-09 * T3 + 3.88629474e-13 * T4 + 5.04968163e+04 * invT) *
      0.0712910814857061;
    // species 12: CH3
    result +=
      y[12] *
      (+2.67359040e+00 + 1.00547588e-03 * T + 1.91007285e-06 * T2 -
       1.71779356e-09 * T3 + 5.08771468e-13 * T4 + 1.64449988e+04 * invT) *
      0.0665114732291320;
    // species 13: CH4
    result +=
      y[13] *
      (+4.14987613e+00 - 6.83548940e-03 * T + 1.63933533e-05 * T2 -
       1.21185757e-08 * T3 + 3.33387912e-12 * T4 - 1.02466476e+04 * invT) *
      0.0623324814560868;
    // species 14: CO
    result +=
      y[14] *
      (+2.57953347e+00 - 3.05176840e-04 * T + 3.38938110e-07 * T2 +
       2.26751471e-10 * T3 - 1.80884900e-13 * T4 - 1.43440860e+04 * invT) *
      0.0357015351660121;
    // species 15: CO2
    result +=
      y[15] *
      (+1.35677352e+00 + 4.49229839e-03 * T - 2.37452090e-06 * T2 +
       6.14797555e-10 * T3 - 2.87399096e-14 * T4 - 4.83719697e+04 * invT) *
      0.0227226249176305;
    // species 16: HCO
    result +=
      y[16] *
      (+3.22118584e+00 - 1.62196266e-03 * T + 4.59331487e-06 * T2 -
       3.32860233e-09 * T3 + 8.67537730e-13 * T4 + 3.83956496e+03 * invT) *
      0.0344613688055690;
    // species 17: CH2O
    result +=
      y[17] *
      (+3.79372315e+00 - 4.95416684e-03 * T + 1.24406669e-05 * T2 -
       9.48213152e-09 * T3 + 2.63545304e-12 * T4 - 1.43089567e+04 * invT) *
      0.0333044694598015;
    // species 18: CH2OH
    result +=
      y[18] *
      (+2.86388918e+00 + 2.79836152e-03 * T + 1.97757264e-06 * T2 -
       2.61330030e-09 * T3 + 8.73934556e-13 * T4 - 3.19391367e+03 * invT) *
      0.0322227234645872;
    // species 19: CH3O
    result +=
      y[19] *
      (+1.10620400e+00 + 3.60829750e-03 * T + 1.77949067e-06 * T2 -
       1.84440900e-09 * T3 + 4.15122000e-13 * T4 + 9.78601100e+02 * invT) *
      0.0322227234645872;
    // species 20: CH3OH
    result +=
      y[20] *
      (+4.71539582e+00 - 7.61545645e-03 * T + 2.17480385e-05 * T2 -
       1.77701722e-08 * T3 + 5.22705396e-12 * T4 - 2.56427656e+04 * invT) *
      0.0312090381374446;
    // species 21: C2H
    result +=
      y[21] *
      (+1.88965733e+00 + 6.70498055e-03 * T - 9.49231670e-06 * T2 +
       7.36977613e-09 * T3 - 2.18663022e-12 * T4 + 6.68393932e+04 * invT) *
      0.0399520575309628;
    // species 22: C2H2
    result +=
      y[22] *
      (-1.91318906e-01 + 1.16807815e-02 * T - 1.18390605e-05 * T2 +
       7.00381092e-09 * T3 - 1.70014595e-12 * T4 + 2.64289807e+04 * invT) *
      0.0384054074813734;
    // species 23: C2H3
    result +=
      y[23] *
      (+2.21246645e+00 + 7.57395810e-04 * T + 8.64031373e-06 * T2 -
       8.94144617e-09 * T3 + 2.94301746e-12 * T4 + 3.48598468e+04 * invT) *
      0.0369740442209569;
    // species 24: C2H4
    result +=
      y[24] *
      (+2.95920148e+00 - 3.78526124e-03 * T + 1.90330097e-05 * T2 -
       1.72897188e-08 * T3 + 5.39768746e-12 * T4 + 5.08977593e+03 * invT) *
      0.0356455407428531;
    // species 25: C2H5
    result +=
      y[25] *
      (+3.30646568e+00 - 2.09329446e-03 * T + 1.65714269e-05 * T2 -
       1.49781651e-08 * T3 + 4.61018008e-12 * T4 + 1.28416265e+04 * invT) *
      0.0344091941366733;
    // species 26: C2H6
    result +=
      y[26] *
      (+3.29142492e+00 - 2.75077135e-03 * T + 1.99812763e-05 * T2 -
       1.77116571e-08 * T3 + 5.37371542e-12 * T4 - 1.15222055e+04 * invT) *
      0.0332557366145660;
    // species 27: HCCO
    result +=
      y[27] *
      (+1.25172140e+00 + 8.82751050e-03 * T - 7.90970033e-06 * T2 +
       4.31893975e-09 * T3 - 1.01329622e-12 * T4 + 2.00594490e+04 * invT) *
      0.0243730044602598;
    // species 28: CH2CO
    result +=
      y[28] *
      (+1.13583630e+00 + 9.05943605e-03 * T - 5.79824913e-06 * T2 +
       2.33599392e-09 * T3 - 4.02915230e-13 * T4 - 7.04291804e+03 * invT) *
      0.0237885672145967;
    // species 29: HCCOH
    result +=
      y[29] *
      (+2.42373300e-01 + 1.55361005e-02 * T - 1.69556213e-05 * T2 +
       1.07842828e-08 * T3 - 2.80291880e-12 * T4 + 8.03161430e+03 * invT) *
      0.0237885672145967;
    // species 30: N
    result +=
      y[30] * (+1.50000000e+00 + 5.61046370e+04 * invT) * 0.0713928749910759;
    // species 31: NH
    result +=
      y[31] *
      (+2.49290850e+00 + 1.55895990e-04 * T - 4.96349467e-07 * T2 +
       6.20411050e-10 * T3 - 2.07139340e-13 * T4 + 4.18806290e+04 * invT) *
      0.0666000666000666;
    // species 32: NH2
    result +=
      y[32] *
      (+3.20400290e+00 - 1.05306925e-03 * T + 2.36894493e-06 * T2 -
       1.40287992e-09 * T3 + 3.28814340e-13 * T4 + 2.18859100e+04 * invT) *
      0.0624102852150034;
    // species 33: NH3
    result +=
      y[33] *
      (+3.28602740e+00 - 2.33026150e-03 * T + 7.23950433e-06 * T2 -
       5.70222175e-09 * T3 + 1.65276092e-12 * T4 - 6.74172850e+03 * invT) *
      0.0587164582232400;
    // species 34: NNH
    result +=
      y[34] *
      (+3.34469270e+00 - 2.42485360e-03 * T + 6.68648633e-06 * T2 -
       5.43161600e-09 * T3 + 1.58939078e-12 * T4 + 2.87919730e+04 * invT) *
      0.0344566191165323;
    // species 35: NO
    result +=
      y[35] *
      (+3.21847630e+00 - 2.31948800e-03 * T + 3.68034067e-06 * T2 -
       2.33403385e-09 * T3 + 5.60715400e-13 * T4 + 9.84462300e+03 * invT) *
      0.0333266679997334;
    // species 36: NO2
    result +=
      y[36] *
      (+2.94403120e+00 - 7.92714500e-04 * T + 5.55260400e-06 * T2 -
       5.11885650e-09 * T3 + 1.56701128e-12 * T4 + 2.89661790e+03 * invT) *
      0.0217367677426367;
    // species 37: N2O
    result +=
      y[37] *
      (+1.25715020e+00 + 5.65236400e-03 * T - 4.55710633e-06 * T2 +
       2.42049515e-09 * T3 - 5.86143640e-13 * T4 + 8.74177440e+03 * invT) *
      0.0227205598345943;
    // species 38: HNO
    result +=
      y[38] *
      (+3.53349160e+00 - 2.83480855e-03 * T + 6.15773567e-06 * T2 -
       4.28427350e-09 * T3 + 1.10909146e-12 * T4 + 1.15482970e+04 * invT) *
      0.0322435029341588;
    // species 39: CN
    result +=
      y[39] *
      (+2.61293510e+00 - 4.77756635e-04 * T + 7.14765900e-07 * T2 -
       7.87908075e-11 * T3 - 9.28607120e-14 * T4 + 5.17083400e+04 * invT) *
      0.0384349296640787;
    // species 40: HCN
    result +=
      y[40] *
      (+1.25898860e+00 + 5.02558500e-03 * T - 4.45058767e-06 * T2 +
       2.52308725e-09 * T3 - 6.01780560e-13 * T4 + 1.47126330e+04 * invT) *
      0.0370014060534300;
    // species 41: H2CN
    result +=
      y[41] *
      (+1.85166100e+00 + 2.84761655e-03 * T + 3.57046667e-07 * T2 -
       4.05653000e-10 * T3 - 4.70221620e-14 * T4 + 2.86378200e+04 * invT) *
      0.0356709709638296;
    // species 42: HCNN
    result +=
      y[42] *
      (+1.52431940e+00 + 7.98030950e-03 * T - 6.27211800e-06 * T2 +
       3.03138500e-09 * T3 - 6.47147560e-13 * T4 + 5.42619840e+04 * invT) *
      0.0243706285185095;
    // species 46: NCO
    result +=
      y[46] *
      (+1.82693080e+00 + 4.40258440e-03 * T - 2.79553780e-06 * T2 +
       1.20042410e-09 * T3 - 2.66271900e-13 * T4 + 1.46824770e+04 * invT) *
      0.0237998905205036;
    // species 47: N2
    result +=
      y[47] *
      (+2.29867700e+00 + 7.04120200e-04 * T - 1.32107400e-06 * T2 +
       1.41037875e-09 * T3 - 4.88970800e-13 * T4 - 1.02089990e+03 * invT) *
      0.0356964374955379;
    // species 49: C3H7
    result +=
      y[49] *
      (+5.15518000e-02 + 1.29959900e-02 * T + 7.93351333e-07 * T2 -
       4.90239225e-09 * T3 + 1.87464940e-12 * T4 + 1.06318630e+04 * invT) *
      0.0232077792476038;
    // species 50: C3H8
    result +=
      y[50] *
      (-6.64461900e-02 + 1.32122895e-02 * T + 2.03532423e-06 * T2 -
       5.49437475e-09 * T3 + 1.90298506e-12 * T4 - 1.39585200e+04 * invT) *
      0.0226772796335352;
    // species 51: CH2CHO
    result +=
      y[51] *
      (+2.40906200e+00 + 5.36928700e-03 * T + 6.30497333e-07 * T2 -
       1.78964575e-09 * T3 + 5.73477000e-13 * T4 + 1.52147660e+03 * invT) *
      0.0232315019165989;
    // species 52: CH3CHO
    result +=
      y[52] *
      (+3.72945950e+00 - 1.59664290e-03 * T + 1.58449737e-05 * T2 -
       1.43646527e-08 * T3 + 4.38622240e-12 * T4 - 2.15728780e+04 * invT) *
      0.0226999296302181;
    // species 70: iC3H7
    result +=
      y[70] *
      (+4.44919900e-01 + 1.04995560e-02 * T + 2.56787407e-06 * T2 -
       4.61906325e-09 * T3 + 1.42565924e-12 * T4 + 9.42237240e+03 * invT) *
      0.0232077792476038;
    // species 71: nC3H7
    result +=
      y[71] *
      (+4.91173000e-02 + 1.30044865e-02 * T + 7.84750533e-07 * T2 -
       4.89878300e-09 * T3 + 1.87440414e-12 * T4 + 1.03123460e+04 * invT) *
      0.0232077792476038;
  } else {
    // species 0: H2
    result +=
      y[0] *
      (+2.33727920e+00 - 2.47012365e-05 * T + 1.66485593e-07 * T2 -
       4.48915985e-11 * T3 + 4.00510752e-15 * T4 - 9.50158922e+02 * invT) *
      0.4960317460317460;
    // species 1: H
    result +=
      y[1] *
      (+1.50000001e+00 - 1.15421486e-11 * T + 5.38539827e-15 * T2 -
       1.18378809e-18 * T3 + 9.96394714e-23 * T4 + 2.54736599e+04 * invT) *
      0.9920634920634921;
    // species 2: O
    result +=
      y[2] *
      (+1.56942078e+00 - 4.29870569e-05 * T + 1.39828196e-08 * T2 -
       2.50444497e-12 * T3 + 2.45667382e-16 * T4 + 2.92175791e+04 * invT) *
      0.0625039064941559;
    // species 3: O2
    result +=
      y[3] *
      (+2.28253784e+00 + 7.41543770e-04 * T - 2.52655556e-07 * T2 +
       5.23676387e-11 * T3 - 4.33435588e-15 * T4 - 1.08845772e+03 * invT) *
      0.0312519532470779;
    // species 4: OH
    result +=
      y[4] *
      (+2.09288767e+00 + 2.74214858e-04 * T + 4.21684093e-08 * T2 -
       2.19865389e-11 * T3 + 2.34824752e-15 * T4 + 3.85865700e+03 * invT) *
      0.0587993179279120;
    // species 5: H2O
    result +=
      y[5] *
      (+2.03399249e+00 + 1.08845902e-03 * T - 5.46908393e-08 * T2 -
       2.42604967e-11 * T3 + 3.36401984e-15 * T4 - 3.00042971e+04 * invT) *
      0.0555092978073827;
    // species 6: HO2
    result +=
      y[6] *
      (+3.01721090e+00 + 1.11991006e-03 * T - 2.11219383e-07 * T2 +
       2.85615925e-11 * T3 - 2.15817070e-15 * T4 + 1.11856713e+02 * invT) *
      0.0302975216627280;
    // species 7: H2O2
    result +=
      y[7] *
      (+3.16500285e+00 + 2.45415847e-03 * T - 6.33797417e-07 * T2 +
       9.27964965e-11 * T3 - 5.75816610e-15 * T4 - 1.78617877e+04 * invT) *
      0.0293996589639560;
    // species 8: C
    result +=
      y[8] *
      (+1.49266888e+00 + 2.39944642e-05 * T - 2.41445007e-08 * T2 +
       9.35727573e-12 * T3 - 9.74555786e-16 * T4 + 8.54512953e+04 * invT) *
      0.0832570144034635;
    // species 9: CH
    result +=
      y[9] *
      (+1.87846473e+00 + 4.85456840e-04 * T + 4.81485517e-08 * T2 -
       3.26719623e-11 * T3 + 3.52158766e-15 * T4 + 7.10124364e+04 * invT) *
      0.0768108149627468;
    // species 10: CH2
    result +=
      y[10] *
      (+1.87410113e+00 + 1.82819646e-03 * T - 4.69648657e-07 * T2 +
       6.50448872e-11 * T3 - 3.75455134e-15 * T4 + 4.62636040e+04 * invT) *
      0.0712910814857061;
    // species 11: CH2(S)
    result +=
      y[11] *
      (+1.29203842e+00 + 2.32794318e-03 * T - 6.70639823e-07 * T2 +
       1.04476500e-10 * T3 - 6.79432730e-15 * T4 + 5.09259997e+04 * invT) *
      0.0712910814857061;
    // species 12: CH3
    result +=
      y[12] *
      (+1.28571772e+00 + 3.61995018e-03 * T - 9.95714493e-07 * T2 +
       1.48921161e-10 * T3 - 9.34308788e-15 * T4 + 1.67755843e+04 * invT) *
      0.0665114732291320;
    // species 13: CH4
    result +=
      y[13] *
      (-9.25148505e-01 + 6.69547335e-03 * T - 1.91095270e-06 * T2 +
       3.05731338e-10 * T3 - 2.03630460e-14 * T4 - 9.46834459e+03 * invT) *
      0.0623324814560868;
    // species 14: CO
    result +=
      y[14] *
      (+1.71518561e+00 + 1.03126372e-03 * T - 3.32941924e-07 * T2 +
       5.75132520e-11 * T3 - 4.07295432e-15 * T4 - 1.41518724e+04 * invT) *
      0.0357015351660121;
    // species 15: CO2
    result +=
      y[15] *
      (+2.85746029e+00 + 2.20718513e-03 * T - 7.38271347e-07 * T2 +
       1.30872547e-10 * T3 - 9.44168328e-15 * T4 - 4.87591660e+04 * invT) *
      0.0227226249176305;
    // species 16: HCO
    result +=
      y[16] *
      (+1.77217438e+00 + 2.47847763e-03 * T - 8.28152043e-07 * T2 +
       1.47290445e-10 * T3 - 1.06701742e-14 * T4 + 4.01191815e+03 * invT) *
      0.0344613688055690;
    // species 17: CH2O
    result +=
      y[17] *
      (+7.60690080e-01 + 4.60000041e-03 * T - 1.47419604e-06 * T2 +
       2.51603030e-10 * T3 - 1.76771128e-14 * T4 - 1.39958323e+04 * invT) *
      0.0333044694598015;
    // species 18: CH2OH
    result +=
      y[18] *
      (+2.69266569e+00 + 4.32288399e-03 * T - 1.25033707e-06 * T2 +
       1.96808659e-10 * T3 - 1.29710840e-14 * T4 - 3.24250627e+03 * invT) *
      0.0322227234645872;
    // species 19: CH3O
    result +=
      y[19] *
      (+2.77079900e+00 + 3.93574850e-03 * T - 8.85461333e-07 * T2 +
       9.86107750e-11 * T3 - 4.22523200e-15 * T4 + 1.27832520e+02 * invT) *
      0.0322227234645872;
    // species 20: CH3OH
    result +=
      y[20] *
      (+7.89707910e-01 + 7.04691460e-03 * T - 2.12166945e-06 * T2 +
       3.45427713e-10 * T3 - 2.34120440e-14 * T4 - 2.53748747e+04 * invT) *
      0.0312090381374446;
    // species 21: C2H
    result +=
      y[21] *
      (+2.16780652e+00 + 2.37610951e-03 * T - 6.12623590e-07 * T2 +
       7.60475630e-11 * T3 - 3.54465540e-15 * T4 + 6.71210650e+04 * invT) *
      0.0399520575309628;
    // species 22: C2H2
    result +=
      y[22] *
      (+3.14756964e+00 + 2.98083332e-03 * T - 7.90982840e-07 * T2 +
       1.16853043e-10 * T3 - 7.22470426e-15 * T4 + 2.59359992e+04 * invT) *
      0.0384054074813734;
    // species 23: C2H3
    result +=
      y[23] *
      (+2.01672400e+00 + 5.16511460e-03 * T - 1.56027450e-06 * T2 +
       2.54408220e-10 * T3 - 1.72521408e-14 * T4 + 3.46128739e+04 * invT) *
      0.0369740442209569;
    // species 24: C2H4
    result +=
      y[24] *
      (+1.03611116e+00 + 7.32270755e-03 * T - 2.23692638e-06 * T2 +
       3.68057308e-10 * T3 - 2.51412122e-14 * T4 + 4.93988614e+03 * invT) *
      0.0356455407428531;
    // species 25: C2H5
    result +=
      y[25] *
      (+9.54656420e-01 + 8.69863610e-03 * T - 2.66068889e-06 * T2 +
       4.38044223e-10 * T3 - 2.99283152e-14 * T4 + 1.28575200e+04 * invT) *
      0.0344091941366733;
    // species 26: C2H6
    result +=
      y[26] *
      (+7.18815000e-02 + 1.08426339e-02 * T - 3.34186890e-06 * T2 +
       5.53530003e-10 * T3 - 3.80005780e-14 * T4 - 1.14263932e+04 * invT) *
      0.0332557366145660;
    // species 27: HCCO
    result +=
      y[27] *
      (+4.62820580e+00 + 2.04267005e-03 * T - 5.31151567e-07 * T2 +
       7.15651300e-11 * T3 - 3.88156640e-15 * T4 + 1.93272150e+04 * invT) *
      0.0243730044602598;
    // species 28: CH2CO
    result +=
      y[28] *
      (+3.51129732e+00 + 4.50179872e-03 * T - 1.38979878e-06 * T2 +
       2.30836470e-10 * T3 - 1.58967640e-14 * T4 - 7.55105311e+03 * invT) *
      0.0237885672145967;
    // species 29: HCCOH
    result +=
      y[29] *
      (+4.92382910e+00 + 3.39618000e-03 * T - 8.55285467e-07 * T2 +
       1.12469603e-10 * T3 - 5.98802020e-15 * T4 + 7.26462600e+03 * invT) *
      0.0237885672145967;
    // species 30: N
    result +=
      y[30] *
      (+1.41594290e+00 + 8.74453250e-05 * T - 3.96745633e-08 * T2 +
       7.55656125e-12 * T3 - 4.07219640e-16 * T4 + 5.61337730e+04 * invT) *
      0.0713928749910759;
    // species 31: NH
    result +=
      y[31] *
      (+1.78369280e+00 + 6.64921500e-04 * T - 1.41593490e-07 * T2 +
       1.95871253e-11 * T3 - 1.10088940e-15 * T4 + 4.21208480e+04 * invT) *
      0.0666000666000666;
    // species 32: NH2
    result +=
      y[32] *
      (+1.83474210e+00 + 1.60365410e-03 * T - 3.11302680e-07 * T2 +
       3.42573825e-11 * T3 - 1.58412288e-15 * T4 + 2.21719570e+04 * invT) *
      0.0624102852150034;
    // species 33: NH3
    result +=
      y[33] *
      (+1.63445210e+00 + 2.83312800e-03 * T - 5.75955867e-07 * T2 +
       5.96679025e-11 * T3 - 2.51575720e-15 * T4 - 6.54469580e+03 * invT) *
      0.0587164582232400;
    // species 34: NNH
    result +=
      y[34] *
      (+2.76675440e+00 + 1.44575410e-03 * T - 3.47220667e-07 * T2 +
       4.21064850e-11 * T3 - 2.01837920e-15 * T4 + 2.86506970e+04 * invT) *
      0.0344566191165323;
    // species 35: NO
    result +=
      y[35] *
      (+2.26060560e+00 + 5.95552150e-04 * T - 1.43056827e-07 * T2 +
       1.73644173e-11 * T3 - 8.06721980e-16 * T4 + 9.92097460e+03 * invT) *
      0.0333266679997334;
    // species 36: NO2
    result +=
      y[36] *
      (+3.88475420e+00 + 1.08619780e-03 * T - 2.76023020e-07 * T2 +
       3.93687750e-11 * T3 - 2.10217900e-15 * T4 + 2.31649830e+03 * invT) *
      0.0217367677426367;
    // species 37: N2O
    result +=
      y[37] *
      (+3.82307290e+00 + 1.31351255e-03 * T - 3.19502913e-07 * T2 +
       4.00017800e-11 * T3 - 1.95504606e-15 * T4 + 8.07340480e+03 * invT) *
      0.0227205598345943;
    // species 38: HNO
    result +=
      y[38] *
      (+1.97925090e+00 + 1.74720295e-03 * T - 2.61832593e-07 * T2 +
       1.43698985e-11 * T3 - 3.86718320e-17 * T4 + 1.17505820e+04 * invT) *
      0.0322435029341588;
    // species 39: CN
    result +=
      y[39] *
      (+2.74598050e+00 + 2.17253875e-05 * T + 9.90199467e-08 * T2 -
       1.71629515e-11 * T3 + 8.82683460e-16 * T4 + 5.15361880e+04 * invT) *
      0.0384349296640787;
    // species 40: HCN
    result +=
      y[40] *
      (+2.80223920e+00 + 1.57321140e-03 * T - 3.54406167e-07 * T2 +
       4.15493925e-11 * T3 - 1.95995140e-15 * T4 + 1.44072920e+04 * invT) *
      0.0370014060534300;
    // species 41: H2CN
    result +=
      y[41] *
      (+4.20970300e+00 + 1.48464555e-03 * T - 9.51863033e-08 * T2 -
       4.08887500e-11 * T3 + 6.08651780e-15 * T4 + 2.76771090e+04 * invT) *
      0.0356709709638296;
    // species 42: HCNN
    result +=
      y[42] *
      (+4.89463620e+00 + 1.99479795e-03 * T - 5.32746000e-07 * T2 +
       7.31234875e-11 * T3 - 4.01893720e-15 * T4 + 5.34529410e+04 * invT) *
      0.0243706285185095;
    // species 46: NCO
    result +=
      y[46] *
      (+4.15218450e+00 + 1.15258805e-03 * T - 2.93443843e-07 * T2 +
       3.69727450e-11 * T3 - 1.81955992e-15 * T4 + 1.40041230e+04 * invT) *
      0.0237998905205036;
    // species 47: N2
    result +=
      y[47] *
      (+1.92664000e+00 + 7.43988400e-04 * T - 1.89492000e-07 * T2 +
       2.52425950e-11 * T3 - 1.35067020e-15 * T4 - 9.22797700e+02 * invT) *
      0.0356964374955379;
    // species 49: C3H7
    result +=
      y[49] *
      (+6.70269870e+00 + 8.02210150e-03 * T - 1.76110733e-06 * T2 +
       1.90746475e-10 * T3 - 7.87845680e-15 * T4 + 8.29843360e+03 * invT) *
      0.0232077792476038;
    // species 50: C3H8
    result +=
      y[50] *
      (+6.53413680e+00 + 9.43611950e-03 * T - 2.09061637e-06 * T2 +
       2.28689123e-10 * T3 - 9.56761380e-15 * T4 - 1.64675160e+04 * invT) *
      0.0226772796335352;
    // species 51: CH2CHO
    result +=
      y[51] *
      (+4.97567000e+00 + 4.06529550e-03 * T - 9.14541333e-07 * T2 +
       1.01757600e-10 * T3 - 4.35203400e-15 * T4 + 4.90321800e+02 * invT) *
      0.0232315019165989;
    // species 52: CH3CHO
    result +=
      y[52] *
      (+4.40411080e+00 + 5.86152950e-03 * T - 1.40877123e-06 * T2 +
       1.70931128e-10 * T3 - 8.19697260e-15 * T4 - 2.25931220e+04 * invT) *
      0.0226999296302181;
    // species 70: iC3H7
    result +=
      y[70] *
      (+5.51927410e+00 + 8.61005200e-03 * T - 1.91214057e-06 * T2 +
       2.10326830e-10 * T3 - 8.91318260e-15 * T4 + 7.32271930e+03 * invT) *
      0.0232077792476038;
    // species 71: nC3H7
    result +=
      y[71] *
      (+6.70974790e+00 + 8.01574250e-03 * T - 1.75734127e-06 * T2 +
       1.89720880e-10 * T3 - 7.77254380e-15 * T4 + 7.97622360e+03 * invT) *
      0.0232077792476038;
  }

  // species with midpoint at T=1100 kelvin
  if (T < 1100) {
    // species 56: CH3F
    result +=
      y[56] *
      (+1.59623660e+00 + 1.82658470e-03 * T + 4.36774367e-06 * T2 -
       3.63324725e-09 * T3 + 8.96028540e-13 * T4 - 2.90068080e+04 * invT) *
      0.0293828975965344;
    // species 57: CH2F2
    result +=
      y[57] *
      (+7.39005400e-01 + 5.96896250e-03 * T - 8.97736367e-08 * T2 -
       1.37973382e-09 * T3 + 4.36270980e-13 * T4 - 5.54396840e+04 * invT) *
      0.0192219691449264;
    // species 65: CF
    result +=
      y[65] *
      (+2.35383910e+00 + 1.04548515e-04 * T + 1.06924770e-06 * T2 -
       9.17188425e-10 * T3 + 2.39726220e-13 * T4 + 2.79077430e+04 * invT) *
      0.0322482827142312;
  } else {
    // species 56: CH3F
    result +=
      y[56] *
      (+1.64400090e+00 + 4.98625385e-03 * T - 1.32832417e-06 * T2 +
       1.81286905e-10 * T3 - 9.76879920e-15 * T4 - 2.94271460e+04 * invT) *
      0.0293828975965344;
    // species 57: CH2F2
    result +=
      y[57] *
      (+3.55849840e+00 + 4.15989395e-03 * T - 1.12385660e-06 * T2 +
       1.54699217e-10 * T3 - 8.39030860e-15 * T4 - 5.65062210e+04 * invT) *
      0.0192219691449264;
    // species 65: CF
    result +=
      y[65] *
      (+2.66496780e+00 + 4.86840320e-04 * T - 1.36994120e-07 * T2 +
       2.00157188e-11 * T3 - 1.12996136e-15 * T4 + 2.77241770e+04 * invT) *
      0.0322482827142312;
  }

  // species with midpoint at T=1150 kelvin
  if (T < 1150) {
    // species 55: F2
    result +=
      y[55] *
      (+1.66955040e+00 + 2.64709230e-03 * T - 2.15696983e-06 * T2 +
       9.79583675e-10 * T3 - 1.87690270e-13 * T4 - 9.80801280e+02 * invT) *
      0.0263180013451744;
    // species 61: CHF2
    result +=
      y[61] *
      (+8.32763300e-01 + 6.70819000e-03 * T - 3.18109460e-06 * T2 +
       7.39824200e-10 * T3 - 5.58399840e-14 * T4 - 3.08570560e+04 * invT) *
      0.0196017680012705;
    // species 67: CF2O
    result +=
      y[67] *
      (+1.76138600e-01 + 1.05434940e-02 * T - 7.97385700e-06 * T2 +
       3.49872825e-09 * T3 - 6.75210720e-13 * T4 - 7.79513030e+04 * invT) *
      0.0151499527951878;
    // species 68: CHFO
    result +=
      y[68] *
      (+1.11849750e+00 + 5.38699400e-03 * T - 1.83860543e-06 * T2 +
       1.45379830e-10 * T3 + 4.34084180e-14 * T4 - 4.63567050e+04 * invT) *
      0.0208262163370573;
  } else {
    // species 55: F2
    result +=
      y[55] *
      (+3.05774200e+00 + 3.00016880e-04 * T - 7.30726233e-08 * T2 +
       1.07876892e-11 * T3 - 6.25176840e-16 * T4 - 1.32438600e+03 * invT) *
      0.0263180013451744;
    // species 61: CHF2
    result +=
      y[61] *
      (+4.44828140e+00 + 2.20582700e-03 * T - 5.80628600e-07 * T2 +
       7.72998975e-11 * T3 - 4.03523760e-15 * T4 - 3.19609500e+04 * invT) *
      0.0196017680012705;
    // species 67: CF2O
    result +=
      y[67] *
      (+5.79131030e+00 + 1.69152710e-03 * T - 4.76705767e-07 * T2 +
       6.78064300e-11 * T3 - 3.81047620e-15 * T4 - 7.94539770e+04 * invT) *
      0.0151499527951878;
    // species 68: CHFO
    result +=
      y[68] *
      (+3.81925460e+00 + 2.52709115e-03 * T - 6.71403900e-07 * T2 +
       9.08977125e-11 * T3 - 4.89448140e-15 * T4 - 4.72630780e+04 * invT) *
      0.0208262163370573;
  }

  // species with midpoint at T=1250 kelvin
  if (T < 1250) {
    // species 53: HF
    result +=
      y[53] *
      (+2.43657390e+00 + 2.43010360e-04 * T - 4.17465700e-07 * T2 +
       3.41187500e-10 * T3 - 8.19148080e-14 * T4 - 3.38000890e+04 * invT) *
      0.0499839972159217;
    // species 59: CF4
    result +=
      y[59] *
      (-6.70426470e-01 + 1.66348015e-02 * T - 1.29422353e-05 * T2 +
       5.51483675e-09 * T3 - 9.89674660e-13 * T4 - 1.13503610e+05 * invT) *
      0.0113630407528107;
    // species 62: CF3
    result +=
      y[62] *
      (+3.57287100e-01 + 1.07879025e-02 * T - 7.96732733e-06 * T2 +
       3.24027725e-09 * T3 - 5.60346300e-13 * T4 - 5.73912730e+04 * invT) *
      0.0144914495000541;
    // species 66: CF3O
    result +=
      y[66] *
      (+3.87239800e-01 + 1.49477700e-02 * T - 1.14248320e-05 * T2 +
       4.79514250e-09 * T3 - 8.49918700e-13 * T4 - 8.03369020e+04 * invT) *
      0.0117639848900014;
    // species 69: CFO
    result +=
      y[69] *
      (+1.94060800e+00 + 3.73545840e-03 * T - 2.07277720e-06 * T2 +
       6.57290875e-10 * T3 - 9.46443760e-14 * T4 - 2.17922550e+04 * invT) *
      0.0212727923671973;
  } else {
    // species 53: HF
    result +=
      y[53] *
      (+1.78129810e+00 + 5.19795400e-04 * T - 8.05785000e-08 * T2 +
       6.71039750e-12 * T3 - 2.19532740e-16 * T4 - 3.35041740e+04 * invT) *
      0.0499839972159217;
    // species 59: CF4
    result +=
      y[59] *
      (+8.80831530e+00 + 1.64134650e-03 * T - 4.46816133e-07 * T2 +
       6.09345725e-11 * T3 - 3.25723160e-15 * T4 - 1.16024990e+05 * invT) *
      0.0113630407528107;
    // species 62: CF3
    result +=
      y[62] *
      (+6.73167070e+00 + 1.13557320e-03 * T - 2.96832133e-07 * T2 +
       3.82345850e-11 * T3 - 1.90167516e-15 * T4 - 5.91456750e+04 * invT) *
      0.0144914495000541;
    // species 66: CF3O
    result +=
      y[66] *
      (+8.82040840e+00 + 1.69457915e-03 * T - 4.82179633e-07 * T2 +
       6.92404250e-11 * T3 - 3.91160680e-15 * T4 - 8.25865820e+04 * invT) *
      0.0117639848900014;
    // species 69: CFO
    result +=
      y[69] *
      (+4.14996370e+00 + 9.24692350e-04 * T - 2.46743957e-07 * T2 +
       3.31962475e-11 * T3 - 1.76611994e-15 * T4 - 2.24883720e+04 * invT) *
      0.0212727923671973;
  }

  // species with midpoint at T=1300 kelvin
  if (T < 1300) {
    // species 58: CHF3
    result +=
      y[58] *
      (-3.19241710e-01 + 1.19929550e-02 * T - 7.27786600e-06 * T2 +
       2.49506420e-09 * T3 - 3.70358020e-13 * T4 - 8.49894160e+04 * invT) *
      0.0142828149785382;
    // species 60: CH2F
    result +=
      y[60] *
      (+1.11797450e+00 + 5.11963500e-03 * T - 2.20696307e-06 * T2 +
       5.94642575e-10 * T3 - 7.78671740e-14 * T4 - 4.95741860e+03 * invT) *
      0.0302797211911208;
    // species 63: CHF
    result +=
      y[63] *
      (+2.34483880e+00 + 1.17730260e-03 * T + 6.46609767e-07 * T2 -
       6.63126425e-10 * T3 + 1.58233874e-13 * T4 + 1.85140140e+04 * invT) *
      0.0312330139614702;
    // species 64: CF2
    result +=
      y[64] *
      (+1.28591330e+00 + 5.38039300e-03 * T - 3.51273367e-06 * T2 +
       1.22470345e-09 * T3 - 1.77276856e-13 * T4 - 2.35211830e+04 * invT) *
      0.0199968779570337;
  } else {
    // species 58: CHF3
    result +=
      y[58] *
      (+6.52416890e+00 + 2.61502360e-03 * T - 6.78667733e-07 * T2 +
       8.93238900e-11 * T3 - 4.61994540e-15 * T4 - 8.70225080e+04 * invT) *
      0.0142828149785382;
    // species 60: CH2F
    result +=
      y[60] *
      (+3.06013010e+00 + 2.73321145e-03 * T - 7.03164633e-07 * T2 +
       9.36145275e-11 * T3 - 4.94800120e-15 * T4 - 5.59276780e+03 * invT) *
      0.0302797211911208;
    // species 63: CHF
    result +=
      y[63] *
      (+3.48365700e+00 + 8.74817650e-04 * T - 1.68263417e-07 * T2 +
       2.72381625e-11 * T3 - 1.97579646e-15 * T4 + 1.79581230e+04 * invT) *
      0.0312330139614702;
    // species 64: CF2
    result +=
      y[64] *
      (+4.33120660e+00 + 9.88741900e-04 * T - 3.20082637e-07 * T2 +
       5.26759225e-11 * T3 - 3.19079540e-15 * T4 - 2.43713700e+04 * invT) *
      0.0199968779570337;
  }

  // species with midpoint at T=1368 kelvin
  if (T < 1368) {
    // species 44: HOCN
    result +=
      y[44] *
      (+2.78604952e+00 + 3.44333961e-03 * T - 1.07162621e-06 * T2 +
       1.29298942e-10 * T3 + 2.38721576e-15 * T4 - 2.82698400e+03 * invT) *
      0.0232423009877978;
  } else {
    // species 44: HOCN
    result +=
      y[44] *
      (+4.89784885e+00 + 1.58394696e-03 * T - 3.72670213e-07 * T2 +
       4.43107860e-11 * T3 - 2.08678354e-15 * T4 - 3.70653331e+03 * invT) *
      0.0232423009877978;
  }

  // species with midpoint at T=1382 kelvin
  if (T < 1382) {
    // species 43: HCNO
    result +=
      y[43] *
      (+1.64727989e+00 + 6.37526710e-03 * T - 3.49314120e-06 * T2 +
       1.10358209e-09 * T3 - 1.51504293e-13 * T4 + 1.92990252e+04 * invT) *
      0.0232423009877978;
  } else {
    // species 43: HCNO
    result +=
      y[43] *
      (+5.59860456e+00 + 1.51389313e-03 * T - 3.59014487e-07 * T2 +
       4.29166320e-11 * T3 - 2.02878782e-15 * T4 + 1.79661339e+04 * invT) *
      0.0232423009877978;
  }

  // species with midpoint at T=1400 kelvin
  if (T < 1400) {
    // species 54: F
    result +=
      y[54] *
      (+1.90370760e+00 - 3.17648160e-04 * T + 8.82449567e-08 * T2 +
       1.92265765e-11 * T3 - 1.09050710e-14 * T4 + 8.67226920e+03 * invT) *
      0.0526360026903488;
  } else {
    // species 54: F
    result +=
      y[54] *
      (+1.65116610e+00 - 7.00648550e-05 * T + 1.73078810e-08 * T2 -
       2.21238612e-12 * T3 + 1.18056028e-16 * T4 + 8.75829010e+03 * invT) *
      0.0526360026903488;
  }

  // species with midpoint at T=1478 kelvin
  if (T < 1478) {
    // species 45: HNCO
    result +=
      y[45] *
      (+2.63096317e+00 + 3.65141179e-03 * T - 7.60166677e-07 * T2 -
       1.65317825e-10 * T3 + 7.24471504e-14 * T4 - 1.55873636e+04 * invT) *
      0.0232423009877978;
  } else {
    // species 45: HNCO
    result +=
      y[45] *
      (+5.22395134e+00 + 1.58932002e-03 * T - 3.64595850e-07 * T2 +
       4.26837908e-11 * T3 - 1.99004391e-15 * T4 - 1.66599344e+04 * invT) *
      0.0232423009877978;
  }

  const amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  ubms = result * RT;
}

// get mixture entropy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBML(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& sbml)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real sor[72]; //  temporary storage
  speciesEntropy(sor, T);

  // Compute Eq 42
  for (int id = 0; id < 72; ++id) {
    result += x[id] * (sor[id] - log((x[id] + 1e-100)) - logPratio);
  }

  sbml = result * 8.31446261815324e+07;
}

// get mixture entropy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBMS(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& sbms)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real sor[72]; //  temporary storage
  amrex::Real x[72];   //  need a ytx conversion
  amrex::Real YOW = 0; // See Eq 4, 6 in CK Manual

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 72; i++) {
    YOW += y[i] * imw(i);
  }
  // Now compute y to x conversion
  x[0] = y[0] / (2.016000 * YOW);
  x[1] = y[1] / (1.008000 * YOW);
  x[2] = y[2] / (15.999000 * YOW);
  x[3] = y[3] / (31.998000 * YOW);
  x[4] = y[4] / (17.007000 * YOW);
  x[5] = y[5] / (18.015000 * YOW);
  x[6] = y[6] / (33.006000 * YOW);
  x[7] = y[7] / (34.014000 * YOW);
  x[8] = y[8] / (12.011000 * YOW);
  x[9] = y[9] / (13.019000 * YOW);
  x[10] = y[10] / (14.027000 * YOW);
  x[11] = y[11] / (14.027000 * YOW);
  x[12] = y[12] / (15.035000 * YOW);
  x[13] = y[13] / (16.043000 * YOW);
  x[14] = y[14] / (28.010000 * YOW);
  x[15] = y[15] / (44.009000 * YOW);
  x[16] = y[16] / (29.018000 * YOW);
  x[17] = y[17] / (30.026000 * YOW);
  x[18] = y[18] / (31.034000 * YOW);
  x[19] = y[19] / (31.034000 * YOW);
  x[20] = y[20] / (32.042000 * YOW);
  x[21] = y[21] / (25.030000 * YOW);
  x[22] = y[22] / (26.038000 * YOW);
  x[23] = y[23] / (27.046000 * YOW);
  x[24] = y[24] / (28.054000 * YOW);
  x[25] = y[25] / (29.062000 * YOW);
  x[26] = y[26] / (30.070000 * YOW);
  x[27] = y[27] / (41.029000 * YOW);
  x[28] = y[28] / (42.037000 * YOW);
  x[29] = y[29] / (42.037000 * YOW);
  x[30] = y[30] / (14.007000 * YOW);
  x[31] = y[31] / (15.015000 * YOW);
  x[32] = y[32] / (16.023000 * YOW);
  x[33] = y[33] / (17.031000 * YOW);
  x[34] = y[34] / (29.022000 * YOW);
  x[35] = y[35] / (30.006000 * YOW);
  x[36] = y[36] / (46.005000 * YOW);
  x[37] = y[37] / (44.013000 * YOW);
  x[38] = y[38] / (31.014000 * YOW);
  x[39] = y[39] / (26.018000 * YOW);
  x[40] = y[40] / (27.026000 * YOW);
  x[41] = y[41] / (28.034000 * YOW);
  x[42] = y[42] / (41.033000 * YOW);
  x[43] = y[43] / (43.025000 * YOW);
  x[44] = y[44] / (43.025000 * YOW);
  x[45] = y[45] / (43.025000 * YOW);
  x[46] = y[46] / (42.017000 * YOW);
  x[47] = y[47] / (28.014000 * YOW);
  x[48] = y[48] / (39.950000 * YOW);
  x[49] = y[49] / (43.089000 * YOW);
  x[50] = y[50] / (44.097000 * YOW);
  x[51] = y[51] / (43.045000 * YOW);
  x[52] = y[52] / (44.053000 * YOW);
  x[53] = y[53] / (20.006403 * YOW);
  x[54] = y[54] / (18.998403 * YOW);
  x[55] = y[55] / (37.996806 * YOW);
  x[56] = y[56] / (34.033403 * YOW);
  x[57] = y[57] / (52.023806 * YOW);
  x[58] = y[58] / (70.014209 * YOW);
  x[59] = y[59] / (88.004613 * YOW);
  x[60] = y[60] / (33.025403 * YOW);
  x[61] = y[61] / (51.015806 * YOW);
  x[62] = y[62] / (69.006209 * YOW);
  x[63] = y[63] / (32.017403 * YOW);
  x[64] = y[64] / (50.007806 * YOW);
  x[65] = y[65] / (31.009403 * YOW);
  x[66] = y[66] / (85.005209 * YOW);
  x[67] = y[67] / (66.006806 * YOW);
  x[68] = y[68] / (48.016403 * YOW);
  x[69] = y[69] / (47.008403 * YOW);
  x[70] = y[70] / (43.089000 * YOW);
  x[71] = y[71] / (43.089000 * YOW);
  speciesEntropy(sor, T);
  // Perform computation in Eq 42 and 43
  for (int i = 0; i < 72; i++) {
    result += x[i] * (sor[i] - log((x[i] + 1e-100)) - logPratio);
  }
  // Scale by R/W
  sbms = result * 8.31446261815324e+07 * YOW;
}

//  get temperature given internal energy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_EY(
  const amrex::Real e, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real e1, emin, emax, cv, t1, dt;
  CKUBMS(tmin, y, emin);
  CKUBMS(tmax, y, emax);
  if (e < emin) {
    // Linear Extrapolation below tmin
    CKCVBS(tmin, y, cv);
    t = tmin - (emin - e) / cv;
    ierr = 1;
    return;
  }
  if (e > emax) {
    // Linear Extrapolation above tmax
    CKCVBS(tmax, y, cv);
    t = tmax - (emax - e) / cv;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (emax - emin) * (e - emin);
  }
  for (int i = 0; i < maxiter; ++i) {
    CKUBMS(t1, y, e1);
    CKCVBS(t1, y, cv);
    dt = (e - e1) / cv;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

//  get temperature given enthalpy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_HY(
  const amrex::Real h, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real h1, hmin, hmax, cp, t1, dt;
  CKHBMS(tmin, y, hmin);
  CKHBMS(tmax, y, hmax);
  if (h < hmin) {
    // Linear Extrapolation below tmin
    CKCPBS(tmin, y, cp);
    t = tmin - (hmin - h) / cp;
    ierr = 1;
    return;
  }
  if (h > hmax) {
    // Linear Extrapolation above tmax
    CKCPBS(tmax, y, cp);
    t = tmax - (hmax - h) / cp;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (hmax - hmin) * (h - hmin);
  }
  for (int i = 0; i < maxiter; ++i) {
    CKHBMS(t1, y, h1);
    CKCPBS(t1, y, cp);
    dt = (h - h1) / cp;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

// Compute P = rhoRT/W(x)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPX(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& P)
{
  amrex::Real XW = 0;                      //  To hold mean molecular wt
  XW += x[0] * 2.016000;                   // H2
  XW += x[1] * 1.008000;                   // H
  XW += x[2] * 15.999000;                  // O
  XW += x[3] * 31.998000;                  // O2
  XW += x[4] * 17.007000;                  // OH
  XW += x[5] * 18.015000;                  // H2O
  XW += x[6] * 33.006000;                  // HO2
  XW += x[7] * 34.014000;                  // H2O2
  XW += x[8] * 12.011000;                  // C
  XW += x[9] * 13.019000;                  // CH
  XW += x[10] * 14.027000;                 // CH2
  XW += x[11] * 14.027000;                 // CH2(S)
  XW += x[12] * 15.035000;                 // CH3
  XW += x[13] * 16.043000;                 // CH4
  XW += x[14] * 28.010000;                 // CO
  XW += x[15] * 44.009000;                 // CO2
  XW += x[16] * 29.018000;                 // HCO
  XW += x[17] * 30.026000;                 // CH2O
  XW += x[18] * 31.034000;                 // CH2OH
  XW += x[19] * 31.034000;                 // CH3O
  XW += x[20] * 32.042000;                 // CH3OH
  XW += x[21] * 25.030000;                 // C2H
  XW += x[22] * 26.038000;                 // C2H2
  XW += x[23] * 27.046000;                 // C2H3
  XW += x[24] * 28.054000;                 // C2H4
  XW += x[25] * 29.062000;                 // C2H5
  XW += x[26] * 30.070000;                 // C2H6
  XW += x[27] * 41.029000;                 // HCCO
  XW += x[28] * 42.037000;                 // CH2CO
  XW += x[29] * 42.037000;                 // HCCOH
  XW += x[30] * 14.007000;                 // N
  XW += x[31] * 15.015000;                 // NH
  XW += x[32] * 16.023000;                 // NH2
  XW += x[33] * 17.031000;                 // NH3
  XW += x[34] * 29.022000;                 // NNH
  XW += x[35] * 30.006000;                 // NO
  XW += x[36] * 46.005000;                 // NO2
  XW += x[37] * 44.013000;                 // N2O
  XW += x[38] * 31.014000;                 // HNO
  XW += x[39] * 26.018000;                 // CN
  XW += x[40] * 27.026000;                 // HCN
  XW += x[41] * 28.034000;                 // H2CN
  XW += x[42] * 41.033000;                 // HCNN
  XW += x[43] * 43.025000;                 // HCNO
  XW += x[44] * 43.025000;                 // HOCN
  XW += x[45] * 43.025000;                 // HNCO
  XW += x[46] * 42.017000;                 // NCO
  XW += x[47] * 28.014000;                 // N2
  XW += x[48] * 39.950000;                 // AR
  XW += x[49] * 43.089000;                 // C3H7
  XW += x[50] * 44.097000;                 // C3H8
  XW += x[51] * 43.045000;                 // CH2CHO
  XW += x[52] * 44.053000;                 // CH3CHO
  XW += x[53] * 20.006403;                 // HF
  XW += x[54] * 18.998403;                 // F
  XW += x[55] * 37.996806;                 // F2
  XW += x[56] * 34.033403;                 // CH3F
  XW += x[57] * 52.023806;                 // CH2F2
  XW += x[58] * 70.014209;                 // CHF3
  XW += x[59] * 88.004613;                 // CF4
  XW += x[60] * 33.025403;                 // CH2F
  XW += x[61] * 51.015806;                 // CHF2
  XW += x[62] * 69.006209;                 // CF3
  XW += x[63] * 32.017403;                 // CHF
  XW += x[64] * 50.007806;                 // CF2
  XW += x[65] * 31.009403;                 // CF
  XW += x[66] * 85.005209;                 // CF3O
  XW += x[67] * 66.006806;                 // CF2O
  XW += x[68] * 48.016403;                 // CHFO
  XW += x[69] * 47.008403;                 // CFO
  XW += x[70] * 43.089000;                 // iC3H7
  XW += x[71] * 43.089000;                 // nC3H7
  P = rho * 8.31446261815324e+07 * T / XW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(y)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPY(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& P)
{
  amrex::Real YOW = 0; //  for computing mean MW

  for (int i = 0; i < 72; i++) {
    YOW += y[i] * imw(i);
  }
  P = rho * 8.31446261815324e+07 * T * YOW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(c)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPC(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& P)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 2.016000;   // H2
  W += c[1] * 1.008000;   // H
  W += c[2] * 15.999000;  // O
  W += c[3] * 31.998000;  // O2
  W += c[4] * 17.007000;  // OH
  W += c[5] * 18.015000;  // H2O
  W += c[6] * 33.006000;  // HO2
  W += c[7] * 34.014000;  // H2O2
  W += c[8] * 12.011000;  // C
  W += c[9] * 13.019000;  // CH
  W += c[10] * 14.027000; // CH2
  W += c[11] * 14.027000; // CH2(S)
  W += c[12] * 15.035000; // CH3
  W += c[13] * 16.043000; // CH4
  W += c[14] * 28.010000; // CO
  W += c[15] * 44.009000; // CO2
  W += c[16] * 29.018000; // HCO
  W += c[17] * 30.026000; // CH2O
  W += c[18] * 31.034000; // CH2OH
  W += c[19] * 31.034000; // CH3O
  W += c[20] * 32.042000; // CH3OH
  W += c[21] * 25.030000; // C2H
  W += c[22] * 26.038000; // C2H2
  W += c[23] * 27.046000; // C2H3
  W += c[24] * 28.054000; // C2H4
  W += c[25] * 29.062000; // C2H5
  W += c[26] * 30.070000; // C2H6
  W += c[27] * 41.029000; // HCCO
  W += c[28] * 42.037000; // CH2CO
  W += c[29] * 42.037000; // HCCOH
  W += c[30] * 14.007000; // N
  W += c[31] * 15.015000; // NH
  W += c[32] * 16.023000; // NH2
  W += c[33] * 17.031000; // NH3
  W += c[34] * 29.022000; // NNH
  W += c[35] * 30.006000; // NO
  W += c[36] * 46.005000; // NO2
  W += c[37] * 44.013000; // N2O
  W += c[38] * 31.014000; // HNO
  W += c[39] * 26.018000; // CN
  W += c[40] * 27.026000; // HCN
  W += c[41] * 28.034000; // H2CN
  W += c[42] * 41.033000; // HCNN
  W += c[43] * 43.025000; // HCNO
  W += c[44] * 43.025000; // HOCN
  W += c[45] * 43.025000; // HNCO
  W += c[46] * 42.017000; // NCO
  W += c[47] * 28.014000; // N2
  W += c[48] * 39.950000; // AR
  W += c[49] * 43.089000; // C3H7
  W += c[50] * 44.097000; // C3H8
  W += c[51] * 43.045000; // CH2CHO
  W += c[52] * 44.053000; // CH3CHO
  W += c[53] * 20.006403; // HF
  W += c[54] * 18.998403; // F
  W += c[55] * 37.996806; // F2
  W += c[56] * 34.033403; // CH3F
  W += c[57] * 52.023806; // CH2F2
  W += c[58] * 70.014209; // CHF3
  W += c[59] * 88.004613; // CF4
  W += c[60] * 33.025403; // CH2F
  W += c[61] * 51.015806; // CHF2
  W += c[62] * 69.006209; // CF3
  W += c[63] * 32.017403; // CHF
  W += c[64] * 50.007806; // CF2
  W += c[65] * 31.009403; // CF
  W += c[66] * 85.005209; // CF3O
  W += c[67] * 66.006806; // CF2O
  W += c[68] * 48.016403; // CHFO
  W += c[69] * 47.008403; // CFO
  W += c[70] * 43.089000; // iC3H7
  W += c[71] * 43.089000; // nC3H7

  for (int id = 0; id < 72; ++id) {
    sumC += c[id];
  }
  P = rho * 8.31446261815324e+07 * T * sumC / W; // P = rho*R*T/W
}

// Compute rho = PW(x)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOX(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& rho)
{
  amrex::Real XW = 0;                        //  To hold mean molecular wt
  XW += x[0] * 2.016000;                     // H2
  XW += x[1] * 1.008000;                     // H
  XW += x[2] * 15.999000;                    // O
  XW += x[3] * 31.998000;                    // O2
  XW += x[4] * 17.007000;                    // OH
  XW += x[5] * 18.015000;                    // H2O
  XW += x[6] * 33.006000;                    // HO2
  XW += x[7] * 34.014000;                    // H2O2
  XW += x[8] * 12.011000;                    // C
  XW += x[9] * 13.019000;                    // CH
  XW += x[10] * 14.027000;                   // CH2
  XW += x[11] * 14.027000;                   // CH2(S)
  XW += x[12] * 15.035000;                   // CH3
  XW += x[13] * 16.043000;                   // CH4
  XW += x[14] * 28.010000;                   // CO
  XW += x[15] * 44.009000;                   // CO2
  XW += x[16] * 29.018000;                   // HCO
  XW += x[17] * 30.026000;                   // CH2O
  XW += x[18] * 31.034000;                   // CH2OH
  XW += x[19] * 31.034000;                   // CH3O
  XW += x[20] * 32.042000;                   // CH3OH
  XW += x[21] * 25.030000;                   // C2H
  XW += x[22] * 26.038000;                   // C2H2
  XW += x[23] * 27.046000;                   // C2H3
  XW += x[24] * 28.054000;                   // C2H4
  XW += x[25] * 29.062000;                   // C2H5
  XW += x[26] * 30.070000;                   // C2H6
  XW += x[27] * 41.029000;                   // HCCO
  XW += x[28] * 42.037000;                   // CH2CO
  XW += x[29] * 42.037000;                   // HCCOH
  XW += x[30] * 14.007000;                   // N
  XW += x[31] * 15.015000;                   // NH
  XW += x[32] * 16.023000;                   // NH2
  XW += x[33] * 17.031000;                   // NH3
  XW += x[34] * 29.022000;                   // NNH
  XW += x[35] * 30.006000;                   // NO
  XW += x[36] * 46.005000;                   // NO2
  XW += x[37] * 44.013000;                   // N2O
  XW += x[38] * 31.014000;                   // HNO
  XW += x[39] * 26.018000;                   // CN
  XW += x[40] * 27.026000;                   // HCN
  XW += x[41] * 28.034000;                   // H2CN
  XW += x[42] * 41.033000;                   // HCNN
  XW += x[43] * 43.025000;                   // HCNO
  XW += x[44] * 43.025000;                   // HOCN
  XW += x[45] * 43.025000;                   // HNCO
  XW += x[46] * 42.017000;                   // NCO
  XW += x[47] * 28.014000;                   // N2
  XW += x[48] * 39.950000;                   // AR
  XW += x[49] * 43.089000;                   // C3H7
  XW += x[50] * 44.097000;                   // C3H8
  XW += x[51] * 43.045000;                   // CH2CHO
  XW += x[52] * 44.053000;                   // CH3CHO
  XW += x[53] * 20.006403;                   // HF
  XW += x[54] * 18.998403;                   // F
  XW += x[55] * 37.996806;                   // F2
  XW += x[56] * 34.033403;                   // CH3F
  XW += x[57] * 52.023806;                   // CH2F2
  XW += x[58] * 70.014209;                   // CHF3
  XW += x[59] * 88.004613;                   // CF4
  XW += x[60] * 33.025403;                   // CH2F
  XW += x[61] * 51.015806;                   // CHF2
  XW += x[62] * 69.006209;                   // CF3
  XW += x[63] * 32.017403;                   // CHF
  XW += x[64] * 50.007806;                   // CF2
  XW += x[65] * 31.009403;                   // CF
  XW += x[66] * 85.005209;                   // CF3O
  XW += x[67] * 66.006806;                   // CF2O
  XW += x[68] * 48.016403;                   // CHFO
  XW += x[69] * 47.008403;                   // CFO
  XW += x[70] * 43.089000;                   // iC3H7
  XW += x[71] * 43.089000;                   // nC3H7
  rho = P * XW / (8.31446261815324e+07 * T); // rho = P*W/(R*T)
}

// Compute rho = P*W(y)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOY(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& rho)
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 72; i++) {
    YOW += y[i] * imw(i);
  }

  rho = P / (8.31446261815324e+07 * T * YOW); // rho = P*W/(R*T)
}

// Compute rho = P*W(c)/(R*T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOC(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& rho)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 2.016000;   // H2
  W += c[1] * 1.008000;   // H
  W += c[2] * 15.999000;  // O
  W += c[3] * 31.998000;  // O2
  W += c[4] * 17.007000;  // OH
  W += c[5] * 18.015000;  // H2O
  W += c[6] * 33.006000;  // HO2
  W += c[7] * 34.014000;  // H2O2
  W += c[8] * 12.011000;  // C
  W += c[9] * 13.019000;  // CH
  W += c[10] * 14.027000; // CH2
  W += c[11] * 14.027000; // CH2(S)
  W += c[12] * 15.035000; // CH3
  W += c[13] * 16.043000; // CH4
  W += c[14] * 28.010000; // CO
  W += c[15] * 44.009000; // CO2
  W += c[16] * 29.018000; // HCO
  W += c[17] * 30.026000; // CH2O
  W += c[18] * 31.034000; // CH2OH
  W += c[19] * 31.034000; // CH3O
  W += c[20] * 32.042000; // CH3OH
  W += c[21] * 25.030000; // C2H
  W += c[22] * 26.038000; // C2H2
  W += c[23] * 27.046000; // C2H3
  W += c[24] * 28.054000; // C2H4
  W += c[25] * 29.062000; // C2H5
  W += c[26] * 30.070000; // C2H6
  W += c[27] * 41.029000; // HCCO
  W += c[28] * 42.037000; // CH2CO
  W += c[29] * 42.037000; // HCCOH
  W += c[30] * 14.007000; // N
  W += c[31] * 15.015000; // NH
  W += c[32] * 16.023000; // NH2
  W += c[33] * 17.031000; // NH3
  W += c[34] * 29.022000; // NNH
  W += c[35] * 30.006000; // NO
  W += c[36] * 46.005000; // NO2
  W += c[37] * 44.013000; // N2O
  W += c[38] * 31.014000; // HNO
  W += c[39] * 26.018000; // CN
  W += c[40] * 27.026000; // HCN
  W += c[41] * 28.034000; // H2CN
  W += c[42] * 41.033000; // HCNN
  W += c[43] * 43.025000; // HCNO
  W += c[44] * 43.025000; // HOCN
  W += c[45] * 43.025000; // HNCO
  W += c[46] * 42.017000; // NCO
  W += c[47] * 28.014000; // N2
  W += c[48] * 39.950000; // AR
  W += c[49] * 43.089000; // C3H7
  W += c[50] * 44.097000; // C3H8
  W += c[51] * 43.045000; // CH2CHO
  W += c[52] * 44.053000; // CH3CHO
  W += c[53] * 20.006403; // HF
  W += c[54] * 18.998403; // F
  W += c[55] * 37.996806; // F2
  W += c[56] * 34.033403; // CH3F
  W += c[57] * 52.023806; // CH2F2
  W += c[58] * 70.014209; // CHF3
  W += c[59] * 88.004613; // CF4
  W += c[60] * 33.025403; // CH2F
  W += c[61] * 51.015806; // CHF2
  W += c[62] * 69.006209; // CF3
  W += c[63] * 32.017403; // CHF
  W += c[64] * 50.007806; // CF2
  W += c[65] * 31.009403; // CF
  W += c[66] * 85.005209; // CF3O
  W += c[67] * 66.006806; // CF2O
  W += c[68] * 48.016403; // CHFO
  W += c[69] * 47.008403; // CFO
  W += c[70] * 43.089000; // iC3H7
  W += c[71] * 43.089000; // nC3H7

  for (int id = 0; id < 72; ++id) {
    sumC += c[id];
  }
  rho = P * W / (sumC * T * 8.31446261815324e+07); // rho = PW/(R*T)
}

// get molecular weight for all species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWT(amrex::Real wt[])
{
  get_mw(wt);
}

// given y[species]: mass fractions
// s mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWY(const amrex::Real y[], amrex::Real& wtm)
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 72; i++) {
    YOW += y[i] * imw(i);
  }

  wtm = 1.0 / YOW;
}

// given x[species]: mole fractions
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWX(const amrex::Real x[], amrex::Real& wtm)
{
  amrex::Real XW = 0;      //  see Eq 4 in CK Manual
  XW += x[0] * 2.016000;   // H2
  XW += x[1] * 1.008000;   // H
  XW += x[2] * 15.999000;  // O
  XW += x[3] * 31.998000;  // O2
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 18.015000;  // H2O
  XW += x[6] * 33.006000;  // HO2
  XW += x[7] * 34.014000;  // H2O2
  XW += x[8] * 12.011000;  // C
  XW += x[9] * 13.019000;  // CH
  XW += x[10] * 14.027000; // CH2
  XW += x[11] * 14.027000; // CH2(S)
  XW += x[12] * 15.035000; // CH3
  XW += x[13] * 16.043000; // CH4
  XW += x[14] * 28.010000; // CO
  XW += x[15] * 44.009000; // CO2
  XW += x[16] * 29.018000; // HCO
  XW += x[17] * 30.026000; // CH2O
  XW += x[18] * 31.034000; // CH2OH
  XW += x[19] * 31.034000; // CH3O
  XW += x[20] * 32.042000; // CH3OH
  XW += x[21] * 25.030000; // C2H
  XW += x[22] * 26.038000; // C2H2
  XW += x[23] * 27.046000; // C2H3
  XW += x[24] * 28.054000; // C2H4
  XW += x[25] * 29.062000; // C2H5
  XW += x[26] * 30.070000; // C2H6
  XW += x[27] * 41.029000; // HCCO
  XW += x[28] * 42.037000; // CH2CO
  XW += x[29] * 42.037000; // HCCOH
  XW += x[30] * 14.007000; // N
  XW += x[31] * 15.015000; // NH
  XW += x[32] * 16.023000; // NH2
  XW += x[33] * 17.031000; // NH3
  XW += x[34] * 29.022000; // NNH
  XW += x[35] * 30.006000; // NO
  XW += x[36] * 46.005000; // NO2
  XW += x[37] * 44.013000; // N2O
  XW += x[38] * 31.014000; // HNO
  XW += x[39] * 26.018000; // CN
  XW += x[40] * 27.026000; // HCN
  XW += x[41] * 28.034000; // H2CN
  XW += x[42] * 41.033000; // HCNN
  XW += x[43] * 43.025000; // HCNO
  XW += x[44] * 43.025000; // HOCN
  XW += x[45] * 43.025000; // HNCO
  XW += x[46] * 42.017000; // NCO
  XW += x[47] * 28.014000; // N2
  XW += x[48] * 39.950000; // AR
  XW += x[49] * 43.089000; // C3H7
  XW += x[50] * 44.097000; // C3H8
  XW += x[51] * 43.045000; // CH2CHO
  XW += x[52] * 44.053000; // CH3CHO
  XW += x[53] * 20.006403; // HF
  XW += x[54] * 18.998403; // F
  XW += x[55] * 37.996806; // F2
  XW += x[56] * 34.033403; // CH3F
  XW += x[57] * 52.023806; // CH2F2
  XW += x[58] * 70.014209; // CHF3
  XW += x[59] * 88.004613; // CF4
  XW += x[60] * 33.025403; // CH2F
  XW += x[61] * 51.015806; // CHF2
  XW += x[62] * 69.006209; // CF3
  XW += x[63] * 32.017403; // CHF
  XW += x[64] * 50.007806; // CF2
  XW += x[65] * 31.009403; // CF
  XW += x[66] * 85.005209; // CF3O
  XW += x[67] * 66.006806; // CF2O
  XW += x[68] * 48.016403; // CHFO
  XW += x[69] * 47.008403; // CFO
  XW += x[70] * 43.089000; // iC3H7
  XW += x[71] * 43.089000; // nC3H7
  wtm = XW;
}

// given c[species]: molar concentration
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWC(const amrex::Real c[], amrex::Real& wtm)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 2.016000;   // H2
  W += c[1] * 1.008000;   // H
  W += c[2] * 15.999000;  // O
  W += c[3] * 31.998000;  // O2
  W += c[4] * 17.007000;  // OH
  W += c[5] * 18.015000;  // H2O
  W += c[6] * 33.006000;  // HO2
  W += c[7] * 34.014000;  // H2O2
  W += c[8] * 12.011000;  // C
  W += c[9] * 13.019000;  // CH
  W += c[10] * 14.027000; // CH2
  W += c[11] * 14.027000; // CH2(S)
  W += c[12] * 15.035000; // CH3
  W += c[13] * 16.043000; // CH4
  W += c[14] * 28.010000; // CO
  W += c[15] * 44.009000; // CO2
  W += c[16] * 29.018000; // HCO
  W += c[17] * 30.026000; // CH2O
  W += c[18] * 31.034000; // CH2OH
  W += c[19] * 31.034000; // CH3O
  W += c[20] * 32.042000; // CH3OH
  W += c[21] * 25.030000; // C2H
  W += c[22] * 26.038000; // C2H2
  W += c[23] * 27.046000; // C2H3
  W += c[24] * 28.054000; // C2H4
  W += c[25] * 29.062000; // C2H5
  W += c[26] * 30.070000; // C2H6
  W += c[27] * 41.029000; // HCCO
  W += c[28] * 42.037000; // CH2CO
  W += c[29] * 42.037000; // HCCOH
  W += c[30] * 14.007000; // N
  W += c[31] * 15.015000; // NH
  W += c[32] * 16.023000; // NH2
  W += c[33] * 17.031000; // NH3
  W += c[34] * 29.022000; // NNH
  W += c[35] * 30.006000; // NO
  W += c[36] * 46.005000; // NO2
  W += c[37] * 44.013000; // N2O
  W += c[38] * 31.014000; // HNO
  W += c[39] * 26.018000; // CN
  W += c[40] * 27.026000; // HCN
  W += c[41] * 28.034000; // H2CN
  W += c[42] * 41.033000; // HCNN
  W += c[43] * 43.025000; // HCNO
  W += c[44] * 43.025000; // HOCN
  W += c[45] * 43.025000; // HNCO
  W += c[46] * 42.017000; // NCO
  W += c[47] * 28.014000; // N2
  W += c[48] * 39.950000; // AR
  W += c[49] * 43.089000; // C3H7
  W += c[50] * 44.097000; // C3H8
  W += c[51] * 43.045000; // CH2CHO
  W += c[52] * 44.053000; // CH3CHO
  W += c[53] * 20.006403; // HF
  W += c[54] * 18.998403; // F
  W += c[55] * 37.996806; // F2
  W += c[56] * 34.033403; // CH3F
  W += c[57] * 52.023806; // CH2F2
  W += c[58] * 70.014209; // CHF3
  W += c[59] * 88.004613; // CF4
  W += c[60] * 33.025403; // CH2F
  W += c[61] * 51.015806; // CHF2
  W += c[62] * 69.006209; // CF3
  W += c[63] * 32.017403; // CHF
  W += c[64] * 50.007806; // CF2
  W += c[65] * 31.009403; // CF
  W += c[66] * 85.005209; // CF3O
  W += c[67] * 66.006806; // CF2O
  W += c[68] * 48.016403; // CHFO
  W += c[69] * 47.008403; // CFO
  W += c[70] * 43.089000; // iC3H7
  W += c[71] * 43.089000; // nC3H7

  for (int id = 0; id < 72; ++id) {
    sumC += c[id];
  }
  //  CK provides no guard against division by zero
  wtm = W / sumC;
}

// get Cp/R as a function of T
// for all species (Eq 19)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPOR(const amrex::Real T, amrex::Real cpor[])
{
  cp_R(cpor, T);
}

// get H/RT as a function of T
// for all species (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHORT(const amrex::Real T, amrex::Real hort[])
{
  speciesEnthalpy(hort, T);
}

// get S/R as a function of T
// for all species (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSOR(const amrex::Real T, amrex::Real sor[])
{
  speciesEntropy(sor, T);
}

// convert y[species] (mass fracs) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTX(const amrex::Real y[], amrex::Real x[])
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 72; i++) {
    YOW += y[i] * imw(i);
  }

  amrex::Real YOWINV = 1.0 / YOW;

  for (int i = 0; i < 72; i++) {
    x[i] = y[i] * imw(i) * YOWINV;
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real c[])
{
  amrex::Real YOW = 0;
  amrex::Real PWORT;

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 72; i++) {
    c[i] = y[i] * imw(i);
  }
  for (int i = 0; i < 72; i++) {
    YOW += c[i];
  }

  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // Now compute conversion

  for (int i = 0; i < 72; i++) {
    c[i] = PWORT * y[i] * imw(i);
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCR(
  const amrex::Real rho,
  amrex::Real /*T*/,
  const amrex::Real y[],
  amrex::Real c[])
{

  for (int i = 0; i < 72; i++) {
    c[i] = rho * y[i] * imw(i);
  }
}

// convert x[species] (mole fracs) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTY(const amrex::Real x[], amrex::Real y[])
{
  amrex::Real XW = 0; // See Eq 4, 9 in CK Manual
  // Compute mean molecular wt first
  XW += x[0] * 2.016000;   // H2
  XW += x[1] * 1.008000;   // H
  XW += x[2] * 15.999000;  // O
  XW += x[3] * 31.998000;  // O2
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 18.015000;  // H2O
  XW += x[6] * 33.006000;  // HO2
  XW += x[7] * 34.014000;  // H2O2
  XW += x[8] * 12.011000;  // C
  XW += x[9] * 13.019000;  // CH
  XW += x[10] * 14.027000; // CH2
  XW += x[11] * 14.027000; // CH2(S)
  XW += x[12] * 15.035000; // CH3
  XW += x[13] * 16.043000; // CH4
  XW += x[14] * 28.010000; // CO
  XW += x[15] * 44.009000; // CO2
  XW += x[16] * 29.018000; // HCO
  XW += x[17] * 30.026000; // CH2O
  XW += x[18] * 31.034000; // CH2OH
  XW += x[19] * 31.034000; // CH3O
  XW += x[20] * 32.042000; // CH3OH
  XW += x[21] * 25.030000; // C2H
  XW += x[22] * 26.038000; // C2H2
  XW += x[23] * 27.046000; // C2H3
  XW += x[24] * 28.054000; // C2H4
  XW += x[25] * 29.062000; // C2H5
  XW += x[26] * 30.070000; // C2H6
  XW += x[27] * 41.029000; // HCCO
  XW += x[28] * 42.037000; // CH2CO
  XW += x[29] * 42.037000; // HCCOH
  XW += x[30] * 14.007000; // N
  XW += x[31] * 15.015000; // NH
  XW += x[32] * 16.023000; // NH2
  XW += x[33] * 17.031000; // NH3
  XW += x[34] * 29.022000; // NNH
  XW += x[35] * 30.006000; // NO
  XW += x[36] * 46.005000; // NO2
  XW += x[37] * 44.013000; // N2O
  XW += x[38] * 31.014000; // HNO
  XW += x[39] * 26.018000; // CN
  XW += x[40] * 27.026000; // HCN
  XW += x[41] * 28.034000; // H2CN
  XW += x[42] * 41.033000; // HCNN
  XW += x[43] * 43.025000; // HCNO
  XW += x[44] * 43.025000; // HOCN
  XW += x[45] * 43.025000; // HNCO
  XW += x[46] * 42.017000; // NCO
  XW += x[47] * 28.014000; // N2
  XW += x[48] * 39.950000; // AR
  XW += x[49] * 43.089000; // C3H7
  XW += x[50] * 44.097000; // C3H8
  XW += x[51] * 43.045000; // CH2CHO
  XW += x[52] * 44.053000; // CH3CHO
  XW += x[53] * 20.006403; // HF
  XW += x[54] * 18.998403; // F
  XW += x[55] * 37.996806; // F2
  XW += x[56] * 34.033403; // CH3F
  XW += x[57] * 52.023806; // CH2F2
  XW += x[58] * 70.014209; // CHF3
  XW += x[59] * 88.004613; // CF4
  XW += x[60] * 33.025403; // CH2F
  XW += x[61] * 51.015806; // CHF2
  XW += x[62] * 69.006209; // CF3
  XW += x[63] * 32.017403; // CHF
  XW += x[64] * 50.007806; // CF2
  XW += x[65] * 31.009403; // CF
  XW += x[66] * 85.005209; // CF3O
  XW += x[67] * 66.006806; // CF2O
  XW += x[68] * 48.016403; // CHFO
  XW += x[69] * 47.008403; // CFO
  XW += x[70] * 43.089000; // iC3H7
  XW += x[71] * 43.089000; // nC3H7
  // Now compute conversion
  amrex::Real XWinv = 1.0 / XW;
  y[0] = x[0] * 2.016000 * XWinv;
  y[1] = x[1] * 1.008000 * XWinv;
  y[2] = x[2] * 15.999000 * XWinv;
  y[3] = x[3] * 31.998000 * XWinv;
  y[4] = x[4] * 17.007000 * XWinv;
  y[5] = x[5] * 18.015000 * XWinv;
  y[6] = x[6] * 33.006000 * XWinv;
  y[7] = x[7] * 34.014000 * XWinv;
  y[8] = x[8] * 12.011000 * XWinv;
  y[9] = x[9] * 13.019000 * XWinv;
  y[10] = x[10] * 14.027000 * XWinv;
  y[11] = x[11] * 14.027000 * XWinv;
  y[12] = x[12] * 15.035000 * XWinv;
  y[13] = x[13] * 16.043000 * XWinv;
  y[14] = x[14] * 28.010000 * XWinv;
  y[15] = x[15] * 44.009000 * XWinv;
  y[16] = x[16] * 29.018000 * XWinv;
  y[17] = x[17] * 30.026000 * XWinv;
  y[18] = x[18] * 31.034000 * XWinv;
  y[19] = x[19] * 31.034000 * XWinv;
  y[20] = x[20] * 32.042000 * XWinv;
  y[21] = x[21] * 25.030000 * XWinv;
  y[22] = x[22] * 26.038000 * XWinv;
  y[23] = x[23] * 27.046000 * XWinv;
  y[24] = x[24] * 28.054000 * XWinv;
  y[25] = x[25] * 29.062000 * XWinv;
  y[26] = x[26] * 30.070000 * XWinv;
  y[27] = x[27] * 41.029000 * XWinv;
  y[28] = x[28] * 42.037000 * XWinv;
  y[29] = x[29] * 42.037000 * XWinv;
  y[30] = x[30] * 14.007000 * XWinv;
  y[31] = x[31] * 15.015000 * XWinv;
  y[32] = x[32] * 16.023000 * XWinv;
  y[33] = x[33] * 17.031000 * XWinv;
  y[34] = x[34] * 29.022000 * XWinv;
  y[35] = x[35] * 30.006000 * XWinv;
  y[36] = x[36] * 46.005000 * XWinv;
  y[37] = x[37] * 44.013000 * XWinv;
  y[38] = x[38] * 31.014000 * XWinv;
  y[39] = x[39] * 26.018000 * XWinv;
  y[40] = x[40] * 27.026000 * XWinv;
  y[41] = x[41] * 28.034000 * XWinv;
  y[42] = x[42] * 41.033000 * XWinv;
  y[43] = x[43] * 43.025000 * XWinv;
  y[44] = x[44] * 43.025000 * XWinv;
  y[45] = x[45] * 43.025000 * XWinv;
  y[46] = x[46] * 42.017000 * XWinv;
  y[47] = x[47] * 28.014000 * XWinv;
  y[48] = x[48] * 39.950000 * XWinv;
  y[49] = x[49] * 43.089000 * XWinv;
  y[50] = x[50] * 44.097000 * XWinv;
  y[51] = x[51] * 43.045000 * XWinv;
  y[52] = x[52] * 44.053000 * XWinv;
  y[53] = x[53] * 20.006403 * XWinv;
  y[54] = x[54] * 18.998403 * XWinv;
  y[55] = x[55] * 37.996806 * XWinv;
  y[56] = x[56] * 34.033403 * XWinv;
  y[57] = x[57] * 52.023806 * XWinv;
  y[58] = x[58] * 70.014209 * XWinv;
  y[59] = x[59] * 88.004613 * XWinv;
  y[60] = x[60] * 33.025403 * XWinv;
  y[61] = x[61] * 51.015806 * XWinv;
  y[62] = x[62] * 69.006209 * XWinv;
  y[63] = x[63] * 32.017403 * XWinv;
  y[64] = x[64] * 50.007806 * XWinv;
  y[65] = x[65] * 31.009403 * XWinv;
  y[66] = x[66] * 85.005209 * XWinv;
  y[67] = x[67] * 66.006806 * XWinv;
  y[68] = x[68] * 48.016403 * XWinv;
  y[69] = x[69] * 47.008403 * XWinv;
  y[70] = x[70] * 43.089000 * XWinv;
  y[71] = x[71] * 43.089000 * XWinv;
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real c[])
{
  amrex::Real PORT = P / (8.31446261815324e+07 * T); // P/RT

  // Compute conversion, see Eq 10
  for (int id = 0; id < 72; ++id) {
    c[id] = x[id] * PORT;
  }
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCR(
  const amrex::Real rho,
  const amrex::Real /*T*/,
  const amrex::Real x[],
  amrex::Real c[])
{
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 2.016000;   // H2
  XW += x[1] * 1.008000;   // H
  XW += x[2] * 15.999000;  // O
  XW += x[3] * 31.998000;  // O2
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 18.015000;  // H2O
  XW += x[6] * 33.006000;  // HO2
  XW += x[7] * 34.014000;  // H2O2
  XW += x[8] * 12.011000;  // C
  XW += x[9] * 13.019000;  // CH
  XW += x[10] * 14.027000; // CH2
  XW += x[11] * 14.027000; // CH2(S)
  XW += x[12] * 15.035000; // CH3
  XW += x[13] * 16.043000; // CH4
  XW += x[14] * 28.010000; // CO
  XW += x[15] * 44.009000; // CO2
  XW += x[16] * 29.018000; // HCO
  XW += x[17] * 30.026000; // CH2O
  XW += x[18] * 31.034000; // CH2OH
  XW += x[19] * 31.034000; // CH3O
  XW += x[20] * 32.042000; // CH3OH
  XW += x[21] * 25.030000; // C2H
  XW += x[22] * 26.038000; // C2H2
  XW += x[23] * 27.046000; // C2H3
  XW += x[24] * 28.054000; // C2H4
  XW += x[25] * 29.062000; // C2H5
  XW += x[26] * 30.070000; // C2H6
  XW += x[27] * 41.029000; // HCCO
  XW += x[28] * 42.037000; // CH2CO
  XW += x[29] * 42.037000; // HCCOH
  XW += x[30] * 14.007000; // N
  XW += x[31] * 15.015000; // NH
  XW += x[32] * 16.023000; // NH2
  XW += x[33] * 17.031000; // NH3
  XW += x[34] * 29.022000; // NNH
  XW += x[35] * 30.006000; // NO
  XW += x[36] * 46.005000; // NO2
  XW += x[37] * 44.013000; // N2O
  XW += x[38] * 31.014000; // HNO
  XW += x[39] * 26.018000; // CN
  XW += x[40] * 27.026000; // HCN
  XW += x[41] * 28.034000; // H2CN
  XW += x[42] * 41.033000; // HCNN
  XW += x[43] * 43.025000; // HCNO
  XW += x[44] * 43.025000; // HOCN
  XW += x[45] * 43.025000; // HNCO
  XW += x[46] * 42.017000; // NCO
  XW += x[47] * 28.014000; // N2
  XW += x[48] * 39.950000; // AR
  XW += x[49] * 43.089000; // C3H7
  XW += x[50] * 44.097000; // C3H8
  XW += x[51] * 43.045000; // CH2CHO
  XW += x[52] * 44.053000; // CH3CHO
  XW += x[53] * 20.006403; // HF
  XW += x[54] * 18.998403; // F
  XW += x[55] * 37.996806; // F2
  XW += x[56] * 34.033403; // CH3F
  XW += x[57] * 52.023806; // CH2F2
  XW += x[58] * 70.014209; // CHF3
  XW += x[59] * 88.004613; // CF4
  XW += x[60] * 33.025403; // CH2F
  XW += x[61] * 51.015806; // CHF2
  XW += x[62] * 69.006209; // CF3
  XW += x[63] * 32.017403; // CHF
  XW += x[64] * 50.007806; // CF2
  XW += x[65] * 31.009403; // CF
  XW += x[66] * 85.005209; // CF3O
  XW += x[67] * 66.006806; // CF2O
  XW += x[68] * 48.016403; // CHFO
  XW += x[69] * 47.008403; // CFO
  XW += x[70] * 43.089000; // iC3H7
  XW += x[71] * 43.089000; // nC3H7
  ROW = rho / XW;

  // Compute conversion, see Eq 11
  for (int id = 0; id < 72; ++id) {
    c[id] = x[id] * ROW;
  }
}

// convert c[species] (molar conc) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTX(const amrex::Real c[], amrex::Real x[])
{
  amrex::Real sumC = 0;

  // compute sum of c
  for (int id = 0; id < 72; ++id) {
    sumC += c[id];
  }

  //  See Eq 13
  amrex::Real sumCinv = 1.0 / sumC;
  for (int id = 0; id < 72; ++id) {
    x[id] = c[id] * sumCinv;
  }
}

// convert c[species] (molar conc) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTY(const amrex::Real c[], amrex::Real y[])
{
  amrex::Real CW = 0; // See Eq 12 in CK Manual
  // compute denominator in eq 12 first
  CW += c[0] * 2.016000;   // H2
  CW += c[1] * 1.008000;   // H
  CW += c[2] * 15.999000;  // O
  CW += c[3] * 31.998000;  // O2
  CW += c[4] * 17.007000;  // OH
  CW += c[5] * 18.015000;  // H2O
  CW += c[6] * 33.006000;  // HO2
  CW += c[7] * 34.014000;  // H2O2
  CW += c[8] * 12.011000;  // C
  CW += c[9] * 13.019000;  // CH
  CW += c[10] * 14.027000; // CH2
  CW += c[11] * 14.027000; // CH2(S)
  CW += c[12] * 15.035000; // CH3
  CW += c[13] * 16.043000; // CH4
  CW += c[14] * 28.010000; // CO
  CW += c[15] * 44.009000; // CO2
  CW += c[16] * 29.018000; // HCO
  CW += c[17] * 30.026000; // CH2O
  CW += c[18] * 31.034000; // CH2OH
  CW += c[19] * 31.034000; // CH3O
  CW += c[20] * 32.042000; // CH3OH
  CW += c[21] * 25.030000; // C2H
  CW += c[22] * 26.038000; // C2H2
  CW += c[23] * 27.046000; // C2H3
  CW += c[24] * 28.054000; // C2H4
  CW += c[25] * 29.062000; // C2H5
  CW += c[26] * 30.070000; // C2H6
  CW += c[27] * 41.029000; // HCCO
  CW += c[28] * 42.037000; // CH2CO
  CW += c[29] * 42.037000; // HCCOH
  CW += c[30] * 14.007000; // N
  CW += c[31] * 15.015000; // NH
  CW += c[32] * 16.023000; // NH2
  CW += c[33] * 17.031000; // NH3
  CW += c[34] * 29.022000; // NNH
  CW += c[35] * 30.006000; // NO
  CW += c[36] * 46.005000; // NO2
  CW += c[37] * 44.013000; // N2O
  CW += c[38] * 31.014000; // HNO
  CW += c[39] * 26.018000; // CN
  CW += c[40] * 27.026000; // HCN
  CW += c[41] * 28.034000; // H2CN
  CW += c[42] * 41.033000; // HCNN
  CW += c[43] * 43.025000; // HCNO
  CW += c[44] * 43.025000; // HOCN
  CW += c[45] * 43.025000; // HNCO
  CW += c[46] * 42.017000; // NCO
  CW += c[47] * 28.014000; // N2
  CW += c[48] * 39.950000; // AR
  CW += c[49] * 43.089000; // C3H7
  CW += c[50] * 44.097000; // C3H8
  CW += c[51] * 43.045000; // CH2CHO
  CW += c[52] * 44.053000; // CH3CHO
  CW += c[53] * 20.006403; // HF
  CW += c[54] * 18.998403; // F
  CW += c[55] * 37.996806; // F2
  CW += c[56] * 34.033403; // CH3F
  CW += c[57] * 52.023806; // CH2F2
  CW += c[58] * 70.014209; // CHF3
  CW += c[59] * 88.004613; // CF4
  CW += c[60] * 33.025403; // CH2F
  CW += c[61] * 51.015806; // CHF2
  CW += c[62] * 69.006209; // CF3
  CW += c[63] * 32.017403; // CHF
  CW += c[64] * 50.007806; // CF2
  CW += c[65] * 31.009403; // CF
  CW += c[66] * 85.005209; // CF3O
  CW += c[67] * 66.006806; // CF2O
  CW += c[68] * 48.016403; // CHFO
  CW += c[69] * 47.008403; // CFO
  CW += c[70] * 43.089000; // iC3H7
  CW += c[71] * 43.089000; // nC3H7
  // Now compute conversion
  amrex::Real CWinv = 1.0 / CW;
  y[0] = c[0] * 2.016000 * CWinv;
  y[1] = c[1] * 1.008000 * CWinv;
  y[2] = c[2] * 15.999000 * CWinv;
  y[3] = c[3] * 31.998000 * CWinv;
  y[4] = c[4] * 17.007000 * CWinv;
  y[5] = c[5] * 18.015000 * CWinv;
  y[6] = c[6] * 33.006000 * CWinv;
  y[7] = c[7] * 34.014000 * CWinv;
  y[8] = c[8] * 12.011000 * CWinv;
  y[9] = c[9] * 13.019000 * CWinv;
  y[10] = c[10] * 14.027000 * CWinv;
  y[11] = c[11] * 14.027000 * CWinv;
  y[12] = c[12] * 15.035000 * CWinv;
  y[13] = c[13] * 16.043000 * CWinv;
  y[14] = c[14] * 28.010000 * CWinv;
  y[15] = c[15] * 44.009000 * CWinv;
  y[16] = c[16] * 29.018000 * CWinv;
  y[17] = c[17] * 30.026000 * CWinv;
  y[18] = c[18] * 31.034000 * CWinv;
  y[19] = c[19] * 31.034000 * CWinv;
  y[20] = c[20] * 32.042000 * CWinv;
  y[21] = c[21] * 25.030000 * CWinv;
  y[22] = c[22] * 26.038000 * CWinv;
  y[23] = c[23] * 27.046000 * CWinv;
  y[24] = c[24] * 28.054000 * CWinv;
  y[25] = c[25] * 29.062000 * CWinv;
  y[26] = c[26] * 30.070000 * CWinv;
  y[27] = c[27] * 41.029000 * CWinv;
  y[28] = c[28] * 42.037000 * CWinv;
  y[29] = c[29] * 42.037000 * CWinv;
  y[30] = c[30] * 14.007000 * CWinv;
  y[31] = c[31] * 15.015000 * CWinv;
  y[32] = c[32] * 16.023000 * CWinv;
  y[33] = c[33] * 17.031000 * CWinv;
  y[34] = c[34] * 29.022000 * CWinv;
  y[35] = c[35] * 30.006000 * CWinv;
  y[36] = c[36] * 46.005000 * CWinv;
  y[37] = c[37] * 44.013000 * CWinv;
  y[38] = c[38] * 31.014000 * CWinv;
  y[39] = c[39] * 26.018000 * CWinv;
  y[40] = c[40] * 27.026000 * CWinv;
  y[41] = c[41] * 28.034000 * CWinv;
  y[42] = c[42] * 41.033000 * CWinv;
  y[43] = c[43] * 43.025000 * CWinv;
  y[44] = c[44] * 43.025000 * CWinv;
  y[45] = c[45] * 43.025000 * CWinv;
  y[46] = c[46] * 42.017000 * CWinv;
  y[47] = c[47] * 28.014000 * CWinv;
  y[48] = c[48] * 39.950000 * CWinv;
  y[49] = c[49] * 43.089000 * CWinv;
  y[50] = c[50] * 44.097000 * CWinv;
  y[51] = c[51] * 43.045000 * CWinv;
  y[52] = c[52] * 44.053000 * CWinv;
  y[53] = c[53] * 20.006403 * CWinv;
  y[54] = c[54] * 18.998403 * CWinv;
  y[55] = c[55] * 37.996806 * CWinv;
  y[56] = c[56] * 34.033403 * CWinv;
  y[57] = c[57] * 52.023806 * CWinv;
  y[58] = c[58] * 70.014209 * CWinv;
  y[59] = c[59] * 88.004613 * CWinv;
  y[60] = c[60] * 33.025403 * CWinv;
  y[61] = c[61] * 51.015806 * CWinv;
  y[62] = c[62] * 69.006209 * CWinv;
  y[63] = c[63] * 32.017403 * CWinv;
  y[64] = c[64] * 50.007806 * CWinv;
  y[65] = c[65] * 31.009403 * CWinv;
  y[66] = c[66] * 85.005209 * CWinv;
  y[67] = c[67] * 66.006806 * CWinv;
  y[68] = c[68] * 48.016403 * CWinv;
  y[69] = c[69] * 47.008403 * CWinv;
  y[70] = c[70] * 43.089000 * CWinv;
  y[71] = c[71] * 43.089000 * CWinv;
}

// get specific heat at constant volume as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVML(const amrex::Real T, amrex::Real cvml[])
{
  cv_R(cvml, T);

  // convert to chemkin units
  for (int id = 0; id < 72; ++id) {
    cvml[id] *= 8.31446261815324e+07;
  }
}

// get specific heat at constant pressure as a
// function of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPML(const amrex::Real T, amrex::Real cpml[])
{
  cp_R(cpml, T);

  // convert to chemkin units
  for (int id = 0; id < 72; ++id) {
    cpml[id] *= 8.31446261815324e+07;
  }
}

// get internal energy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUML(const amrex::Real T, amrex::Real uml[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesInternalEnergy(uml, T);

  // convert to chemkin units
  for (int id = 0; id < 72; ++id) {
    uml[id] *= RT;
  }
}

// get enthalpy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHML(const amrex::Real T, amrex::Real hml[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesEnthalpy(hml, T);

  // convert to chemkin units
  for (int id = 0; id < 72; ++id) {
    hml[id] *= RT;
  }
}

// Returns the standard-state entropies in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSML(const amrex::Real T, amrex::Real sml[])
{
  speciesEntropy(sml, T);

  // convert to chemkin units
  for (int id = 0; id < 72; ++id) {
    sml[id] *= 8.31446261815324e+07;
  }
}

// Returns the specific heats at constant volume
// in mass units (Eq. 29)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVMS(const amrex::Real T, amrex::Real cvms[])
{
  cv_R(cvms, T);
  // multiply by R/molecularweight
  cvms[0] *= 4.124237409798234e+07;  // H2
  cvms[1] *= 8.248474819596468e+07;  // H
  cvms[2] *= 5.196863940342046e+06;  // O
  cvms[3] *= 2.598431970171023e+06;  // O2
  cvms[4] *= 4.888847308845322e+06;  // OH
  cvms[5] *= 4.615299815794193e+06;  // H2O
  cvms[6] *= 2.519076112874398e+06;  // HO2
  cvms[7] *= 2.444423654422661e+06;  // H2O2
  cvms[8] *= 6.922373339566431e+06;  // C
  cvms[9] *= 6.386406496776436e+06;  // CH
  cvms[10] *= 5.927470320206203e+06; // CH2
  cvms[11] *= 5.927470320206203e+06; // CH2(S)
  cvms[12] *= 5.530071578419182e+06; // CH3
  cvms[13] *= 5.182610869633635e+06; // CH4
  cvms[14] *= 2.968390795484913e+06; // CO
  cvms[15] *= 1.889264154639560e+06; // CO2
  cvms[16] *= 2.865277627042952e+06; // HCO
  cvms[17] *= 2.769087663409458e+06; // CH2O
  cvms[18] *= 2.679146297013998e+06; // CH2OH
  cvms[19] *= 2.679146297013998e+06; // CH3O
  cvms[20] *= 2.594863809423020e+06; // CH3OH
  cvms[21] *= 3.321798888594982e+06; // C2H
  cvms[22] *= 3.193203248388218e+06; // C2H2
  cvms[23] *= 3.074193085170909e+06; // C2H3
  cvms[24] *= 2.963735160103101e+06; // C2H4
  cvms[25] *= 2.860939583701480e+06; // C2H5
  cvms[26] *= 2.765035789209591e+06; // C2H6
  cvms[27] *= 2.026484344769124e+06; // HCCO
  cvms[28] *= 1.977891528451897e+06; // CH2CO
  cvms[29] *= 1.977891528451897e+06; // HCCOH
  cvms[30] *= 5.935933903157878e+06; // N
  cvms[31] *= 5.537437641127699e+06; // NH
  cvms[32] *= 5.189079834084279e+06; // NH2
  cvms[33] *= 4.881957969674852e+06; // NH3
  cvms[34] *= 2.864882715923520e+06; // NNH
  cvms[35] *= 2.770933352713870e+06; // NO
  cvms[36] *= 1.807295428356318e+06; // NO2
  cvms[37] *= 1.889092454082485e+06; // N2O
  cvms[38] *= 2.680873998243773e+06; // HNO
  cvms[39] *= 3.195657859233315e+06; // CN
  cvms[40] *= 3.076468074503530e+06; // HCN
  cvms[41] *= 2.965849546319912e+06; // H2CN
  cvms[42] *= 2.026286797980464e+06; // HCNN
  cvms[43] *= 1.932472427229109e+06; // HCNO
  cvms[44] *= 1.932472427229109e+06; // HOCN
  cvms[45] *= 1.932472427229109e+06; // HNCO
  cvms[46] *= 1.978833000488669e+06; // NCO
  cvms[47] *= 2.967966951578939e+06; // N2
  cvms[48] *= 2.081217176008320e+06; // AR
  cvms[49] *= 1.929602130045543e+06; // C3H7
  cvms[50] *= 1.885493937944359e+06; // C3H8
  cvms[51] *= 1.931574542491170e+06; // CH2CHO
  cvms[52] *= 1.887377163451579e+06; // CH3CHO
  cvms[53] *= 4.155900763576570e+06; // HF
  cvms[54] *= 4.376400767379189e+06; // F
  cvms[55] *= 2.188200383689594e+06; // F2
  cvms[56] *= 2.443030036794102e+06; // CH3F
  cvms[57] *= 1.598203439027858e+06; // CH2F2
  cvms[58] *= 1.187539312210550e+06; // CHF3
  cvms[59] *= 9.447757756779679e+05; // CF4
  cvms[60] *= 2.517596099316766e+06; // CH2F
  cvms[61] *= 1.629781672962759e+06; // CHF2
  cvms[62] *= 1.204886151510556e+06; // CF3
  cvms[63] *= 2.596857270349024e+06; // CHF
  cvms[64] *= 1.662632942535293e+06; // CF2
  cvms[65] *= 2.681271411271128e+06; // CF
  cvms[66] *= 9.781121260843624e+05; // CF3O
  cvms[67] *= 1.259637161823747e+06; // CF2O
  cvms[68] *= 1.731587972120351e+06; // CHFO
  cvms[69] *= 1.768718369207976e+06; // CFO
  cvms[70] *= 1.929602130045543e+06; // iC3H7
  cvms[71] *= 1.929602130045543e+06; // nC3H7
}

// Returns the specific heats at constant pressure
// in mass units (Eq. 26)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPMS(const amrex::Real T, amrex::Real cpms[])
{
  cp_R(cpms, T);
  // multiply by R/molecularweight
  cpms[0] *= 4.124237409798234e+07;  // H2
  cpms[1] *= 8.248474819596468e+07;  // H
  cpms[2] *= 5.196863940342046e+06;  // O
  cpms[3] *= 2.598431970171023e+06;  // O2
  cpms[4] *= 4.888847308845322e+06;  // OH
  cpms[5] *= 4.615299815794193e+06;  // H2O
  cpms[6] *= 2.519076112874398e+06;  // HO2
  cpms[7] *= 2.444423654422661e+06;  // H2O2
  cpms[8] *= 6.922373339566431e+06;  // C
  cpms[9] *= 6.386406496776436e+06;  // CH
  cpms[10] *= 5.927470320206203e+06; // CH2
  cpms[11] *= 5.927470320206203e+06; // CH2(S)
  cpms[12] *= 5.530071578419182e+06; // CH3
  cpms[13] *= 5.182610869633635e+06; // CH4
  cpms[14] *= 2.968390795484913e+06; // CO
  cpms[15] *= 1.889264154639560e+06; // CO2
  cpms[16] *= 2.865277627042952e+06; // HCO
  cpms[17] *= 2.769087663409458e+06; // CH2O
  cpms[18] *= 2.679146297013998e+06; // CH2OH
  cpms[19] *= 2.679146297013998e+06; // CH3O
  cpms[20] *= 2.594863809423020e+06; // CH3OH
  cpms[21] *= 3.321798888594982e+06; // C2H
  cpms[22] *= 3.193203248388218e+06; // C2H2
  cpms[23] *= 3.074193085170909e+06; // C2H3
  cpms[24] *= 2.963735160103101e+06; // C2H4
  cpms[25] *= 2.860939583701480e+06; // C2H5
  cpms[26] *= 2.765035789209591e+06; // C2H6
  cpms[27] *= 2.026484344769124e+06; // HCCO
  cpms[28] *= 1.977891528451897e+06; // CH2CO
  cpms[29] *= 1.977891528451897e+06; // HCCOH
  cpms[30] *= 5.935933903157878e+06; // N
  cpms[31] *= 5.537437641127699e+06; // NH
  cpms[32] *= 5.189079834084279e+06; // NH2
  cpms[33] *= 4.881957969674852e+06; // NH3
  cpms[34] *= 2.864882715923520e+06; // NNH
  cpms[35] *= 2.770933352713870e+06; // NO
  cpms[36] *= 1.807295428356318e+06; // NO2
  cpms[37] *= 1.889092454082485e+06; // N2O
  cpms[38] *= 2.680873998243773e+06; // HNO
  cpms[39] *= 3.195657859233315e+06; // CN
  cpms[40] *= 3.076468074503530e+06; // HCN
  cpms[41] *= 2.965849546319912e+06; // H2CN
  cpms[42] *= 2.026286797980464e+06; // HCNN
  cpms[43] *= 1.932472427229109e+06; // HCNO
  cpms[44] *= 1.932472427229109e+06; // HOCN
  cpms[45] *= 1.932472427229109e+06; // HNCO
  cpms[46] *= 1.978833000488669e+06; // NCO
  cpms[47] *= 2.967966951578939e+06; // N2
  cpms[48] *= 2.081217176008320e+06; // AR
  cpms[49] *= 1.929602130045543e+06; // C3H7
  cpms[50] *= 1.885493937944359e+06; // C3H8
  cpms[51] *= 1.931574542491170e+06; // CH2CHO
  cpms[52] *= 1.887377163451579e+06; // CH3CHO
  cpms[53] *= 4.155900763576570e+06; // HF
  cpms[54] *= 4.376400767379189e+06; // F
  cpms[55] *= 2.188200383689594e+06; // F2
  cpms[56] *= 2.443030036794102e+06; // CH3F
  cpms[57] *= 1.598203439027858e+06; // CH2F2
  cpms[58] *= 1.187539312210550e+06; // CHF3
  cpms[59] *= 9.447757756779679e+05; // CF4
  cpms[60] *= 2.517596099316766e+06; // CH2F
  cpms[61] *= 1.629781672962759e+06; // CHF2
  cpms[62] *= 1.204886151510556e+06; // CF3
  cpms[63] *= 2.596857270349024e+06; // CHF
  cpms[64] *= 1.662632942535293e+06; // CF2
  cpms[65] *= 2.681271411271128e+06; // CF
  cpms[66] *= 9.781121260843624e+05; // CF3O
  cpms[67] *= 1.259637161823747e+06; // CF2O
  cpms[68] *= 1.731587972120351e+06; // CHFO
  cpms[69] *= 1.768718369207976e+06; // CFO
  cpms[70] *= 1.929602130045543e+06; // iC3H7
  cpms[71] *= 1.929602130045543e+06; // nC3H7
}

// Returns internal energy in mass units (Eq 30.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUMS(const amrex::Real T, amrex::Real ums[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  speciesInternalEnergy(ums, T);

  for (int i = 0; i < 72; i++) {
    ums[i] *= RT * imw(i);
  }
}

// Returns enthalpy in mass units (Eq 27.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHMS(const amrex::Real T, amrex::Real hms[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  speciesEnthalpy(hms, T);

  for (int i = 0; i < 72; i++) {
    hms[i] *= RT * imw(i);
  }
}

// Returns the entropies in mass units (Eq 28.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSMS(const amrex::Real T, amrex::Real sms[])
{
  speciesEntropy(sms, T);
  // multiply by R/molecularweight
  sms[0] *= 4.124237409798234e+07;  // H2
  sms[1] *= 8.248474819596468e+07;  // H
  sms[2] *= 5.196863940342046e+06;  // O
  sms[3] *= 2.598431970171023e+06;  // O2
  sms[4] *= 4.888847308845322e+06;  // OH
  sms[5] *= 4.615299815794193e+06;  // H2O
  sms[6] *= 2.519076112874398e+06;  // HO2
  sms[7] *= 2.444423654422661e+06;  // H2O2
  sms[8] *= 6.922373339566431e+06;  // C
  sms[9] *= 6.386406496776436e+06;  // CH
  sms[10] *= 5.927470320206203e+06; // CH2
  sms[11] *= 5.927470320206203e+06; // CH2(S)
  sms[12] *= 5.530071578419182e+06; // CH3
  sms[13] *= 5.182610869633635e+06; // CH4
  sms[14] *= 2.968390795484913e+06; // CO
  sms[15] *= 1.889264154639560e+06; // CO2
  sms[16] *= 2.865277627042952e+06; // HCO
  sms[17] *= 2.769087663409458e+06; // CH2O
  sms[18] *= 2.679146297013998e+06; // CH2OH
  sms[19] *= 2.679146297013998e+06; // CH3O
  sms[20] *= 2.594863809423020e+06; // CH3OH
  sms[21] *= 3.321798888594982e+06; // C2H
  sms[22] *= 3.193203248388218e+06; // C2H2
  sms[23] *= 3.074193085170909e+06; // C2H3
  sms[24] *= 2.963735160103101e+06; // C2H4
  sms[25] *= 2.860939583701480e+06; // C2H5
  sms[26] *= 2.765035789209591e+06; // C2H6
  sms[27] *= 2.026484344769124e+06; // HCCO
  sms[28] *= 1.977891528451897e+06; // CH2CO
  sms[29] *= 1.977891528451897e+06; // HCCOH
  sms[30] *= 5.935933903157878e+06; // N
  sms[31] *= 5.537437641127699e+06; // NH
  sms[32] *= 5.189079834084279e+06; // NH2
  sms[33] *= 4.881957969674852e+06; // NH3
  sms[34] *= 2.864882715923520e+06; // NNH
  sms[35] *= 2.770933352713870e+06; // NO
  sms[36] *= 1.807295428356318e+06; // NO2
  sms[37] *= 1.889092454082485e+06; // N2O
  sms[38] *= 2.680873998243773e+06; // HNO
  sms[39] *= 3.195657859233315e+06; // CN
  sms[40] *= 3.076468074503530e+06; // HCN
  sms[41] *= 2.965849546319912e+06; // H2CN
  sms[42] *= 2.026286797980464e+06; // HCNN
  sms[43] *= 1.932472427229109e+06; // HCNO
  sms[44] *= 1.932472427229109e+06; // HOCN
  sms[45] *= 1.932472427229109e+06; // HNCO
  sms[46] *= 1.978833000488669e+06; // NCO
  sms[47] *= 2.967966951578939e+06; // N2
  sms[48] *= 2.081217176008320e+06; // AR
  sms[49] *= 1.929602130045543e+06; // C3H7
  sms[50] *= 1.885493937944359e+06; // C3H8
  sms[51] *= 1.931574542491170e+06; // CH2CHO
  sms[52] *= 1.887377163451579e+06; // CH3CHO
  sms[53] *= 4.155900763576570e+06; // HF
  sms[54] *= 4.376400767379189e+06; // F
  sms[55] *= 2.188200383689594e+06; // F2
  sms[56] *= 2.443030036794102e+06; // CH3F
  sms[57] *= 1.598203439027858e+06; // CH2F2
  sms[58] *= 1.187539312210550e+06; // CHF3
  sms[59] *= 9.447757756779679e+05; // CF4
  sms[60] *= 2.517596099316766e+06; // CH2F
  sms[61] *= 1.629781672962759e+06; // CHF2
  sms[62] *= 1.204886151510556e+06; // CF3
  sms[63] *= 2.596857270349024e+06; // CHF
  sms[64] *= 1.662632942535293e+06; // CF2
  sms[65] *= 2.681271411271128e+06; // CF
  sms[66] *= 9.781121260843624e+05; // CF3O
  sms[67] *= 1.259637161823747e+06; // CF2O
  sms[68] *= 1.731587972120351e+06; // CHFO
  sms[69] *= 1.768718369207976e+06; // CFO
  sms[70] *= 1.929602130045543e+06; // iC3H7
  sms[71] *= 1.929602130045543e+06; // nC3H7
}

// GPU version of productionRate: no more use of thermo namespace vectors
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_qfqr(
  amrex::Real* qf,
  amrex::Real* qr,
  const amrex::Real* sc,
  const amrex::Real* /*sc_qss*/,
  const amrex::Real T,
  const amrex::Real invT,
  const amrex::Real logT)
{

  // reaction 49: CH2 + H (+M) <=> CH3 (+M)
  qf[0] = sc[1] * sc[10];
  qr[0] = sc[12];

  // reaction 51: CH3 + H (+M) <=> CH4 (+M)
  qf[1] = sc[1] * sc[12];
  qr[1] = sc[13];

  // reaction 53: H + HCO (+M) <=> CH2O (+M)
  qf[2] = sc[1] * sc[16];
  qr[2] = sc[17];

  // reaction 55: CH2O + H (+M) <=> CH2OH (+M)
  qf[3] = sc[1] * sc[17];
  qr[3] = sc[18];

  // reaction 56: CH2O + H (+M) <=> CH3O (+M)
  qf[4] = sc[1] * sc[17];
  qr[4] = sc[19];

  // reaction 58: CH2OH + H (+M) <=> CH3OH (+M)
  qf[5] = sc[1] * sc[18];
  qr[5] = sc[20];

  // reaction 62: CH3O + H (+M) <=> CH3OH (+M)
  qf[6] = sc[1] * sc[19];
  qr[6] = sc[20];

  // reaction 69: C2H + H (+M) <=> C2H2 (+M)
  qf[7] = sc[1] * sc[21];
  qr[7] = sc[22];

  // reaction 70: C2H2 + H (+M) <=> C2H3 (+M)
  qf[8] = sc[1] * sc[22];
  qr[8] = sc[23];

  // reaction 71: C2H3 + H (+M) <=> C2H4 (+M)
  qf[9] = sc[1] * sc[23];
  qr[9] = sc[24];

  // reaction 73: C2H4 + H (+M) <=> C2H5 (+M)
  qf[10] = sc[1] * sc[24];
  qr[10] = sc[25];

  // reaction 75: C2H5 + H (+M) <=> C2H6 (+M)
  qf[11] = sc[1] * sc[25];
  qr[11] = sc[26];

  // reaction 82: CO + H2 (+M) <=> CH2O (+M)
  qf[12] = sc[0] * sc[14];
  qr[12] = sc[17];

  // reaction 84: 2 OH (+M) <=> H2O2 (+M)
  qf[13] = (sc[4] * sc[4]);
  qr[13] = sc[7];

  // reaction 94: CH3 + OH (+M) <=> CH3OH (+M)
  qf[14] = sc[4] * sc[12];
  qr[14] = sc[20];

  // reaction 130: CH + CO (+M) <=> HCCO (+M)
  qf[15] = sc[9] * sc[14];
  qr[15] = sc[27];

  // reaction 139: CH2 + CO (+M) <=> CH2CO (+M)
  qf[16] = sc[10] * sc[14];
  qr[16] = sc[28];

  // reaction 146: CH2(S) + H2O (+M) <=> CH3OH (+M)
  qf[17] = sc[5] * sc[11];
  qr[17] = sc[20];

  // reaction 157: 2 CH3 (+M) <=> C2H6 (+M)
  qf[18] = (sc[12] * sc[12]);
  qr[18] = sc[26];

  // reaction 173: C2H4 (+M) <=> C2H2 + H2 (+M)
  qf[19] = sc[24];
  qr[19] = sc[0] * sc[22];

  // reaction 240: CH + N2 (+M) <=> HCNN (+M)
  qf[20] = sc[9] * sc[47];
  qr[20] = sc[42];

  // reaction 288: CH + H2 (+M) <=> CH3 (+M)
  qf[21] = sc[0] * sc[9];
  qr[21] = sc[12];

  // reaction 303: CH2CO + H (+M) <=> CH2CHO (+M)
  qf[22] = sc[1] * sc[28];
  qr[22] = sc[51];

  // reaction 311: C2H5 + CH3 (+M) <=> C3H8 (+M)
  qf[23] = sc[12] * sc[25];
  qr[23] = sc[50];

  // reaction 317: C2H4 + CH3 (+M) <=> C3H7 (+M)
  qf[24] = sc[12] * sc[24];
  qr[24] = sc[49];

  // reaction 319: C3H7 + H (+M) <=> C3H8 (+M)
  qf[25] = sc[1] * sc[49];
  qr[25] = sc[50];

  // reaction 11: CO + O (+M) <=> CO2 (+M)
  qf[26] = sc[2] * sc[14];
  qr[26] = sc[15];

  // reaction 184: N2O (+M) <=> N2 + O (+M)
  qf[27] = sc[37];
  qr[27] = sc[2] * sc[47];

  // reaction 236: H + HCN (+M) <=> H2CN (+M)
  qf[28] = sc[1] * sc[40];
  qr[28] = sc[41];

  // reaction 346: CH3F (+M) <=> CH2(S) + HF (+M)
  qf[29] = sc[56];
  qr[29] = sc[11] * sc[53];

  // reaction 433: CF2 (+M) <=> CF + F (+M)
  qf[30] = sc[64];
  qr[30] = sc[54] * sc[65];

  // reaction 498: CF3 (+M) <=> CF2 + F (+M)
  qf[31] = sc[62];
  qr[31] = sc[54] * sc[64];

  // reaction 0: 2 O + M <=> O2 + M
  qf[32] = (sc[2] * sc[2]);
  qr[32] = sc[3];

  // reaction 1: H + O + M <=> OH + M
  qf[33] = sc[1] * sc[2];
  qr[33] = sc[4];

  // reaction 32: H + O2 + M <=> HO2 + M
  qf[34] = sc[1] * sc[3];
  qr[34] = sc[6];

  // reaction 33: H + O2 + O2 <=> HO2 + O2
  qf[35] = sc[1] * (sc[3] * sc[3]);
  qr[35] = sc[3] * sc[6];

  // reaction 34: H + O2 + H2O <=> HO2 + H2O
  qf[36] = sc[1] * sc[3] * sc[5];
  qr[36] = sc[5] * sc[6];

  // reaction 35: H + O2 + N2 <=> HO2 + N2
  qf[37] = sc[1] * sc[3] * sc[47];
  qr[37] = sc[6] * sc[47];

  // reaction 36: H + O2 + AR <=> HO2 + AR
  qf[38] = sc[1] * sc[3] * sc[48];
  qr[38] = sc[6] * sc[48];

  // reaction 38: 2 H + M <=> H2 + M
  qf[39] = (sc[1] * sc[1]);
  qr[39] = sc[0];

  // reaction 39: 2 H + H2 <=> H2 + H2
  qf[40] = sc[0] * (sc[1] * sc[1]);
  qr[40] = (sc[0] * sc[0]);

  // reaction 40: 2 H + H2O <=> H2 + H2O
  qf[41] = (sc[1] * sc[1]) * sc[5];
  qr[41] = sc[0] * sc[5];

  // reaction 41: 2 H + CO2 <=> H2 + CO2
  qf[42] = (sc[1] * sc[1]) * sc[15];
  qr[42] = sc[0] * sc[15];

  // reaction 42: H + OH + M <=> H2O + M
  qf[43] = sc[1] * sc[4];
  qr[43] = sc[5];

  // reaction 165: HCO + H2O <=> CO + H + H2O
  qf[44] = sc[5] * sc[16];
  qr[44] = sc[1] * sc[5] * sc[14];

  // reaction 166: HCO + M <=> CO + H + M
  qf[45] = sc[16];
  qr[45] = sc[1] * sc[14];

  // reaction 186: NO + O + M <=> NO2 + M
  qf[46] = sc[2] * sc[35];
  qr[46] = sc[36];

  // reaction 204: NNH + M <=> H + N2 + M
  qf[47] = sc[34];
  qr[47] = sc[1] * sc[47];

  // reaction 211: H + NO + M <=> HNO + M
  qf[48] = sc[1] * sc[35];
  qr[48] = sc[38];

  // reaction 226: NCO + M <=> CO + N + M
  qf[49] = sc[46];
  qr[49] = sc[14] * sc[30];

  // reaction 229: HCN + M <=> CN + H + M
  qf[50] = sc[40];
  qr[50] = sc[1] * sc[39];

  // reaction 268: HNCO + M <=> CO + NH + M
  qf[51] = sc[45];
  qr[51] = sc[14] * sc[31];

  // reaction 302: CH3CHO + CH3 => CH4 + CO + CH3
  qf[52] = sc[12] * sc[52];
  qr[52] = 0.0;

  // reaction 332: CO + F + M <=> CFO + M
  qf[53] = sc[14] * sc[54];
  qr[53] = sc[69];

  // reaction 340: HF + M <=> F + H + M
  qf[54] = sc[53];
  qr[54] = sc[1] * sc[54];

  // reaction 349: CHF + HF + M <=> CH2F2 + M
  qf[55] = sc[53] * sc[63];
  qr[55] = sc[57];

  // reaction 352: CHF3 + M <=> CF2 + HF + M
  qf[56] = sc[58];
  qr[56] = sc[53] * sc[64];

  // reaction 353: CF4 + M <=> CF3 + F + M
  qf[57] = sc[59];
  qr[57] = sc[54] * sc[62];

  // reaction 410: CF3O + M <=> CF2O + F + M
  qf[58] = sc[66];
  qr[58] = sc[54] * sc[67];

  // reaction 449: CHFO + M <=> CO + HF + M
  qf[59] = sc[68];
  qr[59] = sc[14] * sc[53];

  // reaction 502: 2 F + M <=> F2 + M
  qf[60] = (sc[54] * sc[54]);
  qr[60] = sc[55];

  // reaction 2: H2 + O <=> H + OH
  qf[61] = sc[0] * sc[2];
  qr[61] = sc[1] * sc[4];

  // reaction 3: HO2 + O <=> O2 + OH
  qf[62] = sc[2] * sc[6];
  qr[62] = sc[3] * sc[4];

  // reaction 4: H2O2 + O <=> HO2 + OH
  qf[63] = sc[2] * sc[7];
  qr[63] = sc[4] * sc[6];

  // reaction 5: CH + O <=> CO + H
  qf[64] = sc[2] * sc[9];
  qr[64] = sc[1] * sc[14];

  // reaction 6: CH2 + O <=> H + HCO
  qf[65] = sc[2] * sc[10];
  qr[65] = sc[1] * sc[16];

  // reaction 7: CH2(S) + O <=> CO + H2
  qf[66] = sc[2] * sc[11];
  qr[66] = sc[0] * sc[14];

  // reaction 8: CH2(S) + O <=> H + HCO
  qf[67] = sc[2] * sc[11];
  qr[67] = sc[1] * sc[16];

  // reaction 9: CH3 + O <=> CH2O + H
  qf[68] = sc[2] * sc[12];
  qr[68] = sc[1] * sc[17];

  // reaction 10: CH4 + O <=> CH3 + OH
  qf[69] = sc[2] * sc[13];
  qr[69] = sc[4] * sc[12];

  // reaction 12: HCO + O <=> CO + OH
  qf[70] = sc[2] * sc[16];
  qr[70] = sc[4] * sc[14];

  // reaction 13: HCO + O <=> CO2 + H
  qf[71] = sc[2] * sc[16];
  qr[71] = sc[1] * sc[15];

  // reaction 14: CH2O + O <=> HCO + OH
  qf[72] = sc[2] * sc[17];
  qr[72] = sc[4] * sc[16];

  // reaction 15: CH2OH + O <=> CH2O + OH
  qf[73] = sc[2] * sc[18];
  qr[73] = sc[4] * sc[17];

  // reaction 16: CH3O + O <=> CH2O + OH
  qf[74] = sc[2] * sc[19];
  qr[74] = sc[4] * sc[17];

  // reaction 17: CH3OH + O <=> CH2OH + OH
  qf[75] = sc[2] * sc[20];
  qr[75] = sc[4] * sc[18];

  // reaction 18: CH3OH + O <=> CH3O + OH
  qf[76] = sc[2] * sc[20];
  qr[76] = sc[4] * sc[19];

  // reaction 19: C2H + O <=> CH + CO
  qf[77] = sc[2] * sc[21];
  qr[77] = sc[9] * sc[14];

  // reaction 20: C2H2 + O <=> H + HCCO
  qf[78] = sc[2] * sc[22];
  qr[78] = sc[1] * sc[27];

  // reaction 21: C2H2 + O <=> C2H + OH
  qf[79] = sc[2] * sc[22];
  qr[79] = sc[4] * sc[21];

  // reaction 22: C2H2 + O <=> CH2 + CO
  qf[80] = sc[2] * sc[22];
  qr[80] = sc[10] * sc[14];

  // reaction 23: C2H3 + O <=> CH2CO + H
  qf[81] = sc[2] * sc[23];
  qr[81] = sc[1] * sc[28];

  // reaction 24: C2H4 + O <=> CH3 + HCO
  qf[82] = sc[2] * sc[24];
  qr[82] = sc[12] * sc[16];

  // reaction 25: C2H5 + O <=> CH2O + CH3
  qf[83] = sc[2] * sc[25];
  qr[83] = sc[12] * sc[17];

  // reaction 26: C2H6 + O <=> C2H5 + OH
  qf[84] = sc[2] * sc[26];
  qr[84] = sc[4] * sc[25];

  // reaction 27: HCCO + O <=> 2 CO + H
  qf[85] = sc[2] * sc[27];
  qr[85] = sc[1] * (sc[14] * sc[14]);

  // reaction 28: CH2CO + O <=> HCCO + OH
  qf[86] = sc[2] * sc[28];
  qr[86] = sc[4] * sc[27];

  // reaction 29: CH2CO + O <=> CH2 + CO2
  qf[87] = sc[2] * sc[28];
  qr[87] = sc[10] * sc[15];

  // reaction 30: CO + O2 <=> CO2 + O
  qf[88] = sc[3] * sc[14];
  qr[88] = sc[2] * sc[15];

  // reaction 31: CH2O + O2 <=> HCO + HO2
  qf[89] = sc[3] * sc[17];
  qr[89] = sc[6] * sc[16];

  // reaction 37: H + O2 <=> O + OH
  qf[90] = sc[1] * sc[3];
  qr[90] = sc[2] * sc[4];

  // reaction 43: H + HO2 <=> H2O + O
  qf[91] = sc[1] * sc[6];
  qr[91] = sc[2] * sc[5];

  // reaction 44: H + HO2 <=> H2 + O2
  qf[92] = sc[1] * sc[6];
  qr[92] = sc[0] * sc[3];

  // reaction 45: H + HO2 <=> 2 OH
  qf[93] = sc[1] * sc[6];
  qr[93] = (sc[4] * sc[4]);

  // reaction 46: H + H2O2 <=> H2 + HO2
  qf[94] = sc[1] * sc[7];
  qr[94] = sc[0] * sc[6];

  // reaction 47: H + H2O2 <=> H2O + OH
  qf[95] = sc[1] * sc[7];
  qr[95] = sc[4] * sc[5];

  // reaction 48: CH + H <=> C + H2
  qf[96] = sc[1] * sc[9];
  qr[96] = sc[0] * sc[8];

  // reaction 50: CH2(S) + H <=> CH + H2
  qf[97] = sc[1] * sc[11];
  qr[97] = sc[0] * sc[9];

  // reaction 52: CH4 + H <=> CH3 + H2
  qf[98] = sc[1] * sc[13];
  qr[98] = sc[0] * sc[12];

  // reaction 54: H + HCO <=> CO + H2
  qf[99] = sc[1] * sc[16];
  qr[99] = sc[0] * sc[14];

  // reaction 57: CH2O + H <=> H2 + HCO
  qf[100] = sc[1] * sc[17];
  qr[100] = sc[0] * sc[16];

  // reaction 59: CH2OH + H <=> CH2O + H2
  qf[101] = sc[1] * sc[18];
  qr[101] = sc[0] * sc[17];

  // reaction 60: CH2OH + H <=> CH3 + OH
  qf[102] = sc[1] * sc[18];
  qr[102] = sc[4] * sc[12];

  // reaction 61: CH2OH + H <=> CH2(S) + H2O
  qf[103] = sc[1] * sc[18];
  qr[103] = sc[5] * sc[11];

  // reaction 63: CH3O + H <=> CH2OH + H
  qf[104] = sc[1] * sc[19];
  qr[104] = sc[1] * sc[18];

  // reaction 64: CH3O + H <=> CH2O + H2
  qf[105] = sc[1] * sc[19];
  qr[105] = sc[0] * sc[17];

  // reaction 65: CH3O + H <=> CH3 + OH
  qf[106] = sc[1] * sc[19];
  qr[106] = sc[4] * sc[12];

  // reaction 66: CH3O + H <=> CH2(S) + H2O
  qf[107] = sc[1] * sc[19];
  qr[107] = sc[5] * sc[11];

  // reaction 67: CH3OH + H <=> CH2OH + H2
  qf[108] = sc[1] * sc[20];
  qr[108] = sc[0] * sc[18];

  // reaction 68: CH3OH + H <=> CH3O + H2
  qf[109] = sc[1] * sc[20];
  qr[109] = sc[0] * sc[19];

  // reaction 72: C2H3 + H <=> C2H2 + H2
  qf[110] = sc[1] * sc[23];
  qr[110] = sc[0] * sc[22];

  // reaction 74: C2H4 + H <=> C2H3 + H2
  qf[111] = sc[1] * sc[24];
  qr[111] = sc[0] * sc[23];

  // reaction 76: C2H5 + H <=> C2H4 + H2
  qf[112] = sc[1] * sc[25];
  qr[112] = sc[0] * sc[24];

  // reaction 77: C2H6 + H <=> C2H5 + H2
  qf[113] = sc[1] * sc[26];
  qr[113] = sc[0] * sc[25];

  // reaction 78: H + HCCO <=> CH2(S) + CO
  qf[114] = sc[1] * sc[27];
  qr[114] = sc[11] * sc[14];

  // reaction 79: CH2CO + H <=> H2 + HCCO
  qf[115] = sc[1] * sc[28];
  qr[115] = sc[0] * sc[27];

  // reaction 80: CH2CO + H <=> CH3 + CO
  qf[116] = sc[1] * sc[28];
  qr[116] = sc[12] * sc[14];

  // reaction 81: H + HCCOH <=> CH2CO + H
  qf[117] = sc[1] * sc[29];
  qr[117] = sc[1] * sc[28];

  // reaction 83: H2 + OH <=> H + H2O
  qf[118] = sc[0] * sc[4];
  qr[118] = sc[1] * sc[5];

  // reaction 85: 2 OH <=> H2O + O
  qf[119] = (sc[4] * sc[4]);
  qr[119] = sc[2] * sc[5];

  // reaction 86: HO2 + OH <=> H2O + O2
  qf[120] = sc[4] * sc[6];
  qr[120] = sc[3] * sc[5];

  // reaction 87: H2O2 + OH <=> H2O + HO2
  qf[121] = sc[4] * sc[7];
  qr[121] = sc[5] * sc[6];

  // reaction 88: H2O2 + OH <=> H2O + HO2
  qf[122] = sc[4] * sc[7];
  qr[122] = sc[5] * sc[6];

  // reaction 89: C + OH <=> CO + H
  qf[123] = sc[4] * sc[8];
  qr[123] = sc[1] * sc[14];

  // reaction 90: CH + OH <=> H + HCO
  qf[124] = sc[4] * sc[9];
  qr[124] = sc[1] * sc[16];

  // reaction 91: CH2 + OH <=> CH2O + H
  qf[125] = sc[4] * sc[10];
  qr[125] = sc[1] * sc[17];

  // reaction 92: CH2 + OH <=> CH + H2O
  qf[126] = sc[4] * sc[10];
  qr[126] = sc[5] * sc[9];

  // reaction 93: CH2(S) + OH <=> CH2O + H
  qf[127] = sc[4] * sc[11];
  qr[127] = sc[1] * sc[17];

  // reaction 95: CH3 + OH <=> CH2 + H2O
  qf[128] = sc[4] * sc[12];
  qr[128] = sc[5] * sc[10];

  // reaction 96: CH3 + OH <=> CH2(S) + H2O
  qf[129] = sc[4] * sc[12];
  qr[129] = sc[5] * sc[11];

  // reaction 97: CH4 + OH <=> CH3 + H2O
  qf[130] = sc[4] * sc[13];
  qr[130] = sc[5] * sc[12];

  // reaction 98: CO + OH <=> CO2 + H
  qf[131] = sc[4] * sc[14];
  qr[131] = sc[1] * sc[15];

  // reaction 99: HCO + OH <=> CO + H2O
  qf[132] = sc[4] * sc[16];
  qr[132] = sc[5] * sc[14];

  // reaction 100: CH2O + OH <=> H2O + HCO
  qf[133] = sc[4] * sc[17];
  qr[133] = sc[5] * sc[16];

  // reaction 101: CH2OH + OH <=> CH2O + H2O
  qf[134] = sc[4] * sc[18];
  qr[134] = sc[5] * sc[17];

  // reaction 102: CH3O + OH <=> CH2O + H2O
  qf[135] = sc[4] * sc[19];
  qr[135] = sc[5] * sc[17];

  // reaction 103: CH3OH + OH <=> CH2OH + H2O
  qf[136] = sc[4] * sc[20];
  qr[136] = sc[5] * sc[18];

  // reaction 104: CH3OH + OH <=> CH3O + H2O
  qf[137] = sc[4] * sc[20];
  qr[137] = sc[5] * sc[19];

  // reaction 105: C2H + OH <=> H + HCCO
  qf[138] = sc[4] * sc[21];
  qr[138] = sc[1] * sc[27];

  // reaction 106: C2H2 + OH <=> CH2CO + H
  qf[139] = sc[4] * sc[22];
  qr[139] = sc[1] * sc[28];

  // reaction 107: C2H2 + OH <=> H + HCCOH
  qf[140] = sc[4] * sc[22];
  qr[140] = sc[1] * sc[29];

  // reaction 108: C2H2 + OH <=> C2H + H2O
  qf[141] = sc[4] * sc[22];
  qr[141] = sc[5] * sc[21];

  // reaction 109: C2H2 + OH <=> CH3 + CO
  qf[142] = sc[4] * sc[22];
  qr[142] = sc[12] * sc[14];

  // reaction 110: C2H3 + OH <=> C2H2 + H2O
  qf[143] = sc[4] * sc[23];
  qr[143] = sc[5] * sc[22];

  // reaction 111: C2H4 + OH <=> C2H3 + H2O
  qf[144] = sc[4] * sc[24];
  qr[144] = sc[5] * sc[23];

  // reaction 112: C2H6 + OH <=> C2H5 + H2O
  qf[145] = sc[4] * sc[26];
  qr[145] = sc[5] * sc[25];

  // reaction 113: CH2CO + OH <=> H2O + HCCO
  qf[146] = sc[4] * sc[28];
  qr[146] = sc[5] * sc[27];

  // reaction 114: 2 HO2 <=> H2O2 + O2
  qf[147] = (sc[6] * sc[6]);
  qr[147] = sc[3] * sc[7];

  // reaction 115: 2 HO2 <=> H2O2 + O2
  qf[148] = (sc[6] * sc[6]);
  qr[148] = sc[3] * sc[7];

  // reaction 116: CH2 + HO2 <=> CH2O + OH
  qf[149] = sc[6] * sc[10];
  qr[149] = sc[4] * sc[17];

  // reaction 117: CH3 + HO2 <=> CH4 + O2
  qf[150] = sc[6] * sc[12];
  qr[150] = sc[3] * sc[13];

  // reaction 118: CH3 + HO2 <=> CH3O + OH
  qf[151] = sc[6] * sc[12];
  qr[151] = sc[4] * sc[19];

  // reaction 119: CO + HO2 <=> CO2 + OH
  qf[152] = sc[6] * sc[14];
  qr[152] = sc[4] * sc[15];

  // reaction 120: CH2O + HO2 <=> H2O2 + HCO
  qf[153] = sc[6] * sc[17];
  qr[153] = sc[7] * sc[16];

  // reaction 121: C + O2 <=> CO + O
  qf[154] = sc[3] * sc[8];
  qr[154] = sc[2] * sc[14];

  // reaction 122: C + CH2 <=> C2H + H
  qf[155] = sc[8] * sc[10];
  qr[155] = sc[1] * sc[21];

  // reaction 123: C + CH3 <=> C2H2 + H
  qf[156] = sc[8] * sc[12];
  qr[156] = sc[1] * sc[22];

  // reaction 124: CH + O2 <=> HCO + O
  qf[157] = sc[3] * sc[9];
  qr[157] = sc[2] * sc[16];

  // reaction 125: CH + H2 <=> CH2 + H
  qf[158] = sc[0] * sc[9];
  qr[158] = sc[1] * sc[10];

  // reaction 126: CH + H2O <=> CH2O + H
  qf[159] = sc[5] * sc[9];
  qr[159] = sc[1] * sc[17];

  // reaction 127: CH + CH2 <=> C2H2 + H
  qf[160] = sc[9] * sc[10];
  qr[160] = sc[1] * sc[22];

  // reaction 128: CH + CH3 <=> C2H3 + H
  qf[161] = sc[9] * sc[12];
  qr[161] = sc[1] * sc[23];

  // reaction 129: CH + CH4 <=> C2H4 + H
  qf[162] = sc[9] * sc[13];
  qr[162] = sc[1] * sc[24];

  // reaction 131: CH + CO2 <=> CO + HCO
  qf[163] = sc[9] * sc[15];
  qr[163] = sc[14] * sc[16];

  // reaction 132: CH + CH2O <=> CH2CO + H
  qf[164] = sc[9] * sc[17];
  qr[164] = sc[1] * sc[28];

  // reaction 133: CH + HCCO <=> C2H2 + CO
  qf[165] = sc[9] * sc[27];
  qr[165] = sc[14] * sc[22];

  // reaction 134: CH2 + O2 => CO + H + OH
  qf[166] = sc[3] * sc[10];
  qr[166] = 0.0;

  // reaction 135: CH2 + H2 <=> CH3 + H
  qf[167] = sc[0] * sc[10];
  qr[167] = sc[1] * sc[12];

  // reaction 136: 2 CH2 <=> C2H2 + H2
  qf[168] = (sc[10] * sc[10]);
  qr[168] = sc[0] * sc[22];

  // reaction 137: CH2 + CH3 <=> C2H4 + H
  qf[169] = sc[10] * sc[12];
  qr[169] = sc[1] * sc[24];

  // reaction 138: CH2 + CH4 <=> 2 CH3
  qf[170] = sc[10] * sc[13];
  qr[170] = (sc[12] * sc[12]);

  // reaction 140: CH2 + HCCO <=> C2H3 + CO
  qf[171] = sc[10] * sc[27];
  qr[171] = sc[14] * sc[23];

  // reaction 141: CH2(S) + N2 <=> CH2 + N2
  qf[172] = sc[11] * sc[47];
  qr[172] = sc[10] * sc[47];

  // reaction 142: AR + CH2(S) <=> AR + CH2
  qf[173] = sc[11] * sc[48];
  qr[173] = sc[10] * sc[48];

  // reaction 143: CH2(S) + O2 <=> CO + H + OH
  qf[174] = sc[3] * sc[11];
  qr[174] = sc[1] * sc[4] * sc[14];

  // reaction 144: CH2(S) + O2 <=> CO + H2O
  qf[175] = sc[3] * sc[11];
  qr[175] = sc[5] * sc[14];

  // reaction 145: CH2(S) + H2 <=> CH3 + H
  qf[176] = sc[0] * sc[11];
  qr[176] = sc[1] * sc[12];

  // reaction 147: CH2(S) + H2O <=> CH2 + H2O
  qf[177] = sc[5] * sc[11];
  qr[177] = sc[5] * sc[10];

  // reaction 148: CH2(S) + CH3 <=> C2H4 + H
  qf[178] = sc[11] * sc[12];
  qr[178] = sc[1] * sc[24];

  // reaction 149: CH2(S) + CH4 <=> 2 CH3
  qf[179] = sc[11] * sc[13];
  qr[179] = (sc[12] * sc[12]);

  // reaction 150: CH2(S) + CO <=> CH2 + CO
  qf[180] = sc[11] * sc[14];
  qr[180] = sc[10] * sc[14];

  // reaction 151: CH2(S) + CO2 <=> CH2 + CO2
  qf[181] = sc[11] * sc[15];
  qr[181] = sc[10] * sc[15];

  // reaction 152: CH2(S) + CO2 <=> CH2O + CO
  qf[182] = sc[11] * sc[15];
  qr[182] = sc[14] * sc[17];

  // reaction 153: C2H6 + CH2(S) <=> C2H5 + CH3
  qf[183] = sc[11] * sc[26];
  qr[183] = sc[12] * sc[25];

  // reaction 154: CH3 + O2 <=> CH3O + O
  qf[184] = sc[3] * sc[12];
  qr[184] = sc[2] * sc[19];

  // reaction 155: CH3 + O2 <=> CH2O + OH
  qf[185] = sc[3] * sc[12];
  qr[185] = sc[4] * sc[17];

  // reaction 156: CH3 + H2O2 <=> CH4 + HO2
  qf[186] = sc[7] * sc[12];
  qr[186] = sc[6] * sc[13];

  // reaction 158: 2 CH3 <=> C2H5 + H
  qf[187] = (sc[12] * sc[12]);
  qr[187] = sc[1] * sc[25];

  // reaction 159: CH3 + HCO <=> CH4 + CO
  qf[188] = sc[12] * sc[16];
  qr[188] = sc[13] * sc[14];

  // reaction 160: CH2O + CH3 <=> CH4 + HCO
  qf[189] = sc[12] * sc[17];
  qr[189] = sc[13] * sc[16];

  // reaction 161: CH3 + CH3OH <=> CH2OH + CH4
  qf[190] = sc[12] * sc[20];
  qr[190] = sc[13] * sc[18];

  // reaction 162: CH3 + CH3OH <=> CH3O + CH4
  qf[191] = sc[12] * sc[20];
  qr[191] = sc[13] * sc[19];

  // reaction 163: C2H4 + CH3 <=> C2H3 + CH4
  qf[192] = sc[12] * sc[24];
  qr[192] = sc[13] * sc[23];

  // reaction 164: C2H6 + CH3 <=> C2H5 + CH4
  qf[193] = sc[12] * sc[26];
  qr[193] = sc[13] * sc[25];

  // reaction 167: HCO + O2 <=> CO + HO2
  qf[194] = sc[3] * sc[16];
  qr[194] = sc[6] * sc[14];

  // reaction 168: CH2OH + O2 <=> CH2O + HO2
  qf[195] = sc[3] * sc[18];
  qr[195] = sc[6] * sc[17];

  // reaction 169: CH3O + O2 <=> CH2O + HO2
  qf[196] = sc[3] * sc[19];
  qr[196] = sc[6] * sc[17];

  // reaction 170: C2H + O2 <=> CO + HCO
  qf[197] = sc[3] * sc[21];
  qr[197] = sc[14] * sc[16];

  // reaction 171: C2H + H2 <=> C2H2 + H
  qf[198] = sc[0] * sc[21];
  qr[198] = sc[1] * sc[22];

  // reaction 172: C2H3 + O2 <=> CH2O + HCO
  qf[199] = sc[3] * sc[23];
  qr[199] = sc[16] * sc[17];

  // reaction 174: C2H5 + O2 <=> C2H4 + HO2
  qf[200] = sc[3] * sc[25];
  qr[200] = sc[6] * sc[24];

  // reaction 175: HCCO + O2 <=> 2 CO + OH
  qf[201] = sc[3] * sc[27];
  qr[201] = sc[4] * (sc[14] * sc[14]);

  // reaction 176: 2 HCCO <=> C2H2 + 2 CO
  qf[202] = (sc[27] * sc[27]);
  qr[202] = (sc[14] * sc[14]) * sc[22];

  // reaction 177: N + NO <=> N2 + O
  qf[203] = sc[30] * sc[35];
  qr[203] = sc[2] * sc[47];

  // reaction 178: N + O2 <=> NO + O
  qf[204] = sc[3] * sc[30];
  qr[204] = sc[2] * sc[35];

  // reaction 179: N + OH <=> H + NO
  qf[205] = sc[4] * sc[30];
  qr[205] = sc[1] * sc[35];

  // reaction 180: N2O + O <=> N2 + O2
  qf[206] = sc[2] * sc[37];
  qr[206] = sc[3] * sc[47];

  // reaction 181: N2O + O <=> 2 NO
  qf[207] = sc[2] * sc[37];
  qr[207] = (sc[35] * sc[35]);

  // reaction 182: H + N2O <=> N2 + OH
  qf[208] = sc[1] * sc[37];
  qr[208] = sc[4] * sc[47];

  // reaction 183: N2O + OH <=> HO2 + N2
  qf[209] = sc[4] * sc[37];
  qr[209] = sc[6] * sc[47];

  // reaction 185: HO2 + NO <=> NO2 + OH
  qf[210] = sc[6] * sc[35];
  qr[210] = sc[4] * sc[36];

  // reaction 187: NO2 + O <=> NO + O2
  qf[211] = sc[2] * sc[36];
  qr[211] = sc[3] * sc[35];

  // reaction 188: H + NO2 <=> NO + OH
  qf[212] = sc[1] * sc[36];
  qr[212] = sc[4] * sc[35];

  // reaction 189: NH + O <=> H + NO
  qf[213] = sc[2] * sc[31];
  qr[213] = sc[1] * sc[35];

  // reaction 190: H + NH <=> H2 + N
  qf[214] = sc[1] * sc[31];
  qr[214] = sc[0] * sc[30];

  // reaction 191: NH + OH <=> H + HNO
  qf[215] = sc[4] * sc[31];
  qr[215] = sc[1] * sc[38];

  // reaction 192: NH + OH <=> H2O + N
  qf[216] = sc[4] * sc[31];
  qr[216] = sc[5] * sc[30];

  // reaction 193: NH + O2 <=> HNO + O
  qf[217] = sc[3] * sc[31];
  qr[217] = sc[2] * sc[38];

  // reaction 194: NH + O2 <=> NO + OH
  qf[218] = sc[3] * sc[31];
  qr[218] = sc[4] * sc[35];

  // reaction 195: N + NH <=> H + N2
  qf[219] = sc[30] * sc[31];
  qr[219] = sc[1] * sc[47];

  // reaction 196: H2O + NH <=> H2 + HNO
  qf[220] = sc[5] * sc[31];
  qr[220] = sc[0] * sc[38];

  // reaction 197: NH + NO <=> N2 + OH
  qf[221] = sc[31] * sc[35];
  qr[221] = sc[4] * sc[47];

  // reaction 198: NH + NO <=> H + N2O
  qf[222] = sc[31] * sc[35];
  qr[222] = sc[1] * sc[37];

  // reaction 199: NH2 + O <=> NH + OH
  qf[223] = sc[2] * sc[32];
  qr[223] = sc[4] * sc[31];

  // reaction 200: NH2 + O <=> H + HNO
  qf[224] = sc[2] * sc[32];
  qr[224] = sc[1] * sc[38];

  // reaction 201: H + NH2 <=> H2 + NH
  qf[225] = sc[1] * sc[32];
  qr[225] = sc[0] * sc[31];

  // reaction 202: NH2 + OH <=> H2O + NH
  qf[226] = sc[4] * sc[32];
  qr[226] = sc[5] * sc[31];

  // reaction 203: NNH <=> H + N2
  qf[227] = sc[34];
  qr[227] = sc[1] * sc[47];

  // reaction 205: NNH + O2 <=> HO2 + N2
  qf[228] = sc[3] * sc[34];
  qr[228] = sc[6] * sc[47];

  // reaction 206: NNH + O <=> N2 + OH
  qf[229] = sc[2] * sc[34];
  qr[229] = sc[4] * sc[47];

  // reaction 207: NNH + O <=> NH + NO
  qf[230] = sc[2] * sc[34];
  qr[230] = sc[31] * sc[35];

  // reaction 208: H + NNH <=> H2 + N2
  qf[231] = sc[1] * sc[34];
  qr[231] = sc[0] * sc[47];

  // reaction 209: NNH + OH <=> H2O + N2
  qf[232] = sc[4] * sc[34];
  qr[232] = sc[5] * sc[47];

  // reaction 210: CH3 + NNH <=> CH4 + N2
  qf[233] = sc[12] * sc[34];
  qr[233] = sc[13] * sc[47];

  // reaction 212: HNO + O <=> NO + OH
  qf[234] = sc[2] * sc[38];
  qr[234] = sc[4] * sc[35];

  // reaction 213: H + HNO <=> H2 + NO
  qf[235] = sc[1] * sc[38];
  qr[235] = sc[0] * sc[35];

  // reaction 214: HNO + OH <=> H2O + NO
  qf[236] = sc[4] * sc[38];
  qr[236] = sc[5] * sc[35];

  // reaction 215: HNO + O2 <=> HO2 + NO
  qf[237] = sc[3] * sc[38];
  qr[237] = sc[6] * sc[35];

  // reaction 216: CN + O <=> CO + N
  qf[238] = sc[2] * sc[39];
  qr[238] = sc[14] * sc[30];

  // reaction 217: CN + OH <=> H + NCO
  qf[239] = sc[4] * sc[39];
  qr[239] = sc[1] * sc[46];

  // reaction 218: CN + H2O <=> HCN + OH
  qf[240] = sc[5] * sc[39];
  qr[240] = sc[4] * sc[40];

  // reaction 219: CN + O2 <=> NCO + O
  qf[241] = sc[3] * sc[39];
  qr[241] = sc[2] * sc[46];

  // reaction 220: CN + H2 <=> H + HCN
  qf[242] = sc[0] * sc[39];
  qr[242] = sc[1] * sc[40];

  // reaction 221: NCO + O <=> CO + NO
  qf[243] = sc[2] * sc[46];
  qr[243] = sc[14] * sc[35];

  // reaction 222: H + NCO <=> CO + NH
  qf[244] = sc[1] * sc[46];
  qr[244] = sc[14] * sc[31];

  // reaction 223: NCO + OH <=> CO + H + NO
  qf[245] = sc[4] * sc[46];
  qr[245] = sc[1] * sc[14] * sc[35];

  // reaction 224: N + NCO <=> CO + N2
  qf[246] = sc[30] * sc[46];
  qr[246] = sc[14] * sc[47];

  // reaction 225: NCO + O2 <=> CO2 + NO
  qf[247] = sc[3] * sc[46];
  qr[247] = sc[15] * sc[35];

  // reaction 227: NCO + NO <=> CO + N2O
  qf[248] = sc[35] * sc[46];
  qr[248] = sc[14] * sc[37];

  // reaction 228: NCO + NO <=> CO2 + N2
  qf[249] = sc[35] * sc[46];
  qr[249] = sc[15] * sc[47];

  // reaction 230: HCN + O <=> H + NCO
  qf[250] = sc[2] * sc[40];
  qr[250] = sc[1] * sc[46];

  // reaction 231: HCN + O <=> CO + NH
  qf[251] = sc[2] * sc[40];
  qr[251] = sc[14] * sc[31];

  // reaction 232: HCN + O <=> CN + OH
  qf[252] = sc[2] * sc[40];
  qr[252] = sc[4] * sc[39];

  // reaction 233: HCN + OH <=> H + HOCN
  qf[253] = sc[4] * sc[40];
  qr[253] = sc[1] * sc[44];

  // reaction 234: HCN + OH <=> H + HNCO
  qf[254] = sc[4] * sc[40];
  qr[254] = sc[1] * sc[45];

  // reaction 235: HCN + OH <=> CO + NH2
  qf[255] = sc[4] * sc[40];
  qr[255] = sc[14] * sc[32];

  // reaction 237: H2CN + N <=> CH2 + N2
  qf[256] = sc[30] * sc[41];
  qr[256] = sc[10] * sc[47];

  // reaction 238: C + N2 <=> CN + N
  qf[257] = sc[8] * sc[47];
  qr[257] = sc[30] * sc[39];

  // reaction 239: CH + N2 <=> HCN + N
  qf[258] = sc[9] * sc[47];
  qr[258] = sc[30] * sc[40];

  // reaction 241: CH2 + N2 <=> HCN + NH
  qf[259] = sc[10] * sc[47];
  qr[259] = sc[31] * sc[40];

  // reaction 242: CH2(S) + N2 <=> HCN + NH
  qf[260] = sc[11] * sc[47];
  qr[260] = sc[31] * sc[40];

  // reaction 243: C + NO <=> CN + O
  qf[261] = sc[8] * sc[35];
  qr[261] = sc[2] * sc[39];

  // reaction 244: C + NO <=> CO + N
  qf[262] = sc[8] * sc[35];
  qr[262] = sc[14] * sc[30];

  // reaction 245: CH + NO <=> HCN + O
  qf[263] = sc[9] * sc[35];
  qr[263] = sc[2] * sc[40];

  // reaction 246: CH + NO <=> H + NCO
  qf[264] = sc[9] * sc[35];
  qr[264] = sc[1] * sc[46];

  // reaction 247: CH + NO <=> HCO + N
  qf[265] = sc[9] * sc[35];
  qr[265] = sc[16] * sc[30];

  // reaction 248: CH2 + NO <=> H + HNCO
  qf[266] = sc[10] * sc[35];
  qr[266] = sc[1] * sc[45];

  // reaction 249: CH2 + NO <=> HCN + OH
  qf[267] = sc[10] * sc[35];
  qr[267] = sc[4] * sc[40];

  // reaction 250: CH2 + NO <=> H + HCNO
  qf[268] = sc[10] * sc[35];
  qr[268] = sc[1] * sc[43];

  // reaction 251: CH2(S) + NO <=> H + HNCO
  qf[269] = sc[11] * sc[35];
  qr[269] = sc[1] * sc[45];

  // reaction 252: CH2(S) + NO <=> HCN + OH
  qf[270] = sc[11] * sc[35];
  qr[270] = sc[4] * sc[40];

  // reaction 253: CH2(S) + NO <=> H + HCNO
  qf[271] = sc[11] * sc[35];
  qr[271] = sc[1] * sc[43];

  // reaction 254: CH3 + NO <=> H2O + HCN
  qf[272] = sc[12] * sc[35];
  qr[272] = sc[5] * sc[40];

  // reaction 255: CH3 + NO <=> H2CN + OH
  qf[273] = sc[12] * sc[35];
  qr[273] = sc[4] * sc[41];

  // reaction 256: HCNN + O <=> CO + H + N2
  qf[274] = sc[2] * sc[42];
  qr[274] = sc[1] * sc[14] * sc[47];

  // reaction 257: HCNN + O <=> HCN + NO
  qf[275] = sc[2] * sc[42];
  qr[275] = sc[35] * sc[40];

  // reaction 258: HCNN + O2 <=> HCO + N2 + O
  qf[276] = sc[3] * sc[42];
  qr[276] = sc[2] * sc[16] * sc[47];

  // reaction 259: HCNN + OH <=> H + HCO + N2
  qf[277] = sc[4] * sc[42];
  qr[277] = sc[1] * sc[16] * sc[47];

  // reaction 260: H + HCNN <=> CH2 + N2
  qf[278] = sc[1] * sc[42];
  qr[278] = sc[10] * sc[47];

  // reaction 261: HNCO + O <=> CO2 + NH
  qf[279] = sc[2] * sc[45];
  qr[279] = sc[15] * sc[31];

  // reaction 262: HNCO + O <=> CO + HNO
  qf[280] = sc[2] * sc[45];
  qr[280] = sc[14] * sc[38];

  // reaction 263: HNCO + O <=> NCO + OH
  qf[281] = sc[2] * sc[45];
  qr[281] = sc[4] * sc[46];

  // reaction 264: H + HNCO <=> CO + NH2
  qf[282] = sc[1] * sc[45];
  qr[282] = sc[14] * sc[32];

  // reaction 265: H + HNCO <=> H2 + NCO
  qf[283] = sc[1] * sc[45];
  qr[283] = sc[0] * sc[46];

  // reaction 266: HNCO + OH <=> H2O + NCO
  qf[284] = sc[4] * sc[45];
  qr[284] = sc[5] * sc[46];

  // reaction 267: HNCO + OH <=> CO2 + NH2
  qf[285] = sc[4] * sc[45];
  qr[285] = sc[15] * sc[32];

  // reaction 269: H + HCNO <=> H + HNCO
  qf[286] = sc[1] * sc[43];
  qr[286] = sc[1] * sc[45];

  // reaction 270: H + HCNO <=> HCN + OH
  qf[287] = sc[1] * sc[43];
  qr[287] = sc[4] * sc[40];

  // reaction 271: H + HCNO <=> CO + NH2
  qf[288] = sc[1] * sc[43];
  qr[288] = sc[14] * sc[32];

  // reaction 272: H + HOCN <=> H + HNCO
  qf[289] = sc[1] * sc[44];
  qr[289] = sc[1] * sc[45];

  // reaction 273: HCCO + NO <=> CO + HCNO
  qf[290] = sc[27] * sc[35];
  qr[290] = sc[14] * sc[43];

  // reaction 274: CH3 + N <=> H + H2CN
  qf[291] = sc[12] * sc[30];
  qr[291] = sc[1] * sc[41];

  // reaction 275: CH3 + N <=> H2 + HCN
  qf[292] = sc[12] * sc[30];
  qr[292] = sc[0] * sc[40];

  // reaction 276: H + NH3 <=> H2 + NH2
  qf[293] = sc[1] * sc[33];
  qr[293] = sc[0] * sc[32];

  // reaction 277: NH3 + OH <=> H2O + NH2
  qf[294] = sc[4] * sc[33];
  qr[294] = sc[5] * sc[32];

  // reaction 278: NH3 + O <=> NH2 + OH
  qf[295] = sc[2] * sc[33];
  qr[295] = sc[4] * sc[32];

  // reaction 279: CO2 + NH <=> CO + HNO
  qf[296] = sc[15] * sc[31];
  qr[296] = sc[14] * sc[38];

  // reaction 280: CN + NO2 <=> NCO + NO
  qf[297] = sc[36] * sc[39];
  qr[297] = sc[35] * sc[46];

  // reaction 281: NCO + NO2 <=> CO2 + N2O
  qf[298] = sc[36] * sc[46];
  qr[298] = sc[15] * sc[37];

  // reaction 282: CO2 + N <=> CO + NO
  qf[299] = sc[15] * sc[30];
  qr[299] = sc[14] * sc[35];

  // reaction 283: CH3 + O => CO + H + H2
  qf[300] = sc[2] * sc[12];
  qr[300] = 0.0;

  // reaction 284: C2H4 + O <=> CH2CHO + H
  qf[301] = sc[2] * sc[24];
  qr[301] = sc[1] * sc[51];

  // reaction 285: C2H5 + O <=> CH3CHO + H
  qf[302] = sc[2] * sc[25];
  qr[302] = sc[1] * sc[52];

  // reaction 286: HO2 + OH <=> H2O + O2
  qf[303] = sc[4] * sc[6];
  qr[303] = sc[3] * sc[5];

  // reaction 287: CH3 + OH => CH2O + H2
  qf[304] = sc[4] * sc[12];
  qr[304] = 0.0;

  // reaction 289: CH2 + O2 => CO2 + 2 H
  qf[305] = sc[3] * sc[10];
  qr[305] = 0.0;

  // reaction 290: CH2 + O2 <=> CH2O + O
  qf[306] = sc[3] * sc[10];
  qr[306] = sc[2] * sc[17];

  // reaction 291: 2 CH2 => C2H2 + 2 H
  qf[307] = (sc[10] * sc[10]);
  qr[307] = 0.0;

  // reaction 292: CH2(S) + H2O => CH2O + H2
  qf[308] = sc[5] * sc[11];
  qr[308] = 0.0;

  // reaction 293: C2H3 + O2 <=> CH2CHO + O
  qf[309] = sc[3] * sc[23];
  qr[309] = sc[2] * sc[51];

  // reaction 294: C2H3 + O2 <=> C2H2 + HO2
  qf[310] = sc[3] * sc[23];
  qr[310] = sc[6] * sc[22];

  // reaction 295: CH3CHO + O <=> CH2CHO + OH
  qf[311] = sc[2] * sc[52];
  qr[311] = sc[4] * sc[51];

  // reaction 296: CH3CHO + O => CH3 + CO + OH
  qf[312] = sc[2] * sc[52];
  qr[312] = 0.0;

  // reaction 297: CH3CHO + O2 => CH3 + CO + HO2
  qf[313] = sc[3] * sc[52];
  qr[313] = 0.0;

  // reaction 298: CH3CHO + H <=> CH2CHO + H2
  qf[314] = sc[1] * sc[52];
  qr[314] = sc[0] * sc[51];

  // reaction 299: CH3CHO + H => CH3 + CO + H2
  qf[315] = sc[1] * sc[52];
  qr[315] = 0.0;

  // reaction 300: CH3CHO + OH => CH3 + CO + H2O
  qf[316] = sc[4] * sc[52];
  qr[316] = 0.0;

  // reaction 301: CH3CHO + HO2 => CH3 + CO + H2O2
  qf[317] = sc[6] * sc[52];
  qr[317] = 0.0;

  // reaction 304: CH2CHO + O => CH2 + CO2 + H
  qf[318] = sc[2] * sc[51];
  qr[318] = 0.0;

  // reaction 305: CH2CHO + O2 => CH2O + CO + OH
  qf[319] = sc[3] * sc[51];
  qr[319] = 0.0;

  // reaction 306: CH2CHO + O2 => 2 HCO + OH
  qf[320] = sc[3] * sc[51];
  qr[320] = 0.0;

  // reaction 307: CH2CHO + H <=> CH3 + HCO
  qf[321] = sc[1] * sc[51];
  qr[321] = sc[12] * sc[16];

  // reaction 308: CH2CHO + H <=> CH2CO + H2
  qf[322] = sc[1] * sc[51];
  qr[322] = sc[0] * sc[28];

  // reaction 309: CH2CHO + OH <=> CH2CO + H2O
  qf[323] = sc[4] * sc[51];
  qr[323] = sc[5] * sc[28];

  // reaction 310: CH2CHO + OH <=> CH2OH + HCO
  qf[324] = sc[4] * sc[51];
  qr[324] = sc[16] * sc[18];

  // reaction 312: C3H8 + O <=> C3H7 + OH
  qf[325] = sc[2] * sc[50];
  qr[325] = sc[4] * sc[49];

  // reaction 313: C3H8 + H <=> C3H7 + H2
  qf[326] = sc[1] * sc[50];
  qr[326] = sc[0] * sc[49];

  // reaction 314: C3H8 + OH <=> C3H7 + H2O
  qf[327] = sc[4] * sc[50];
  qr[327] = sc[5] * sc[49];

  // reaction 315: C3H7 + H2O2 <=> C3H8 + HO2
  qf[328] = sc[7] * sc[49];
  qr[328] = sc[6] * sc[50];

  // reaction 316: C3H8 + CH3 <=> C3H7 + CH4
  qf[329] = sc[12] * sc[50];
  qr[329] = sc[13] * sc[49];

  // reaction 318: C3H7 + O <=> C2H5 + CH2O
  qf[330] = sc[2] * sc[49];
  qr[330] = sc[17] * sc[25];

  // reaction 320: C3H7 + H <=> C2H5 + CH3
  qf[331] = sc[1] * sc[49];
  qr[331] = sc[12] * sc[25];

  // reaction 321: C3H7 + OH <=> C2H5 + CH2OH
  qf[332] = sc[4] * sc[49];
  qr[332] = sc[18] * sc[25];

  // reaction 322: C3H7 + HO2 <=> C3H8 + O2
  qf[333] = sc[6] * sc[49];
  qr[333] = sc[3] * sc[50];

  // reaction 323: C3H7 + HO2 => C2H5 + CH2O + OH
  qf[334] = sc[6] * sc[49];
  qr[334] = 0.0;

  // reaction 324: C3H7 + CH3 <=> 2 C2H5
  qf[335] = sc[12] * sc[49];
  qr[335] = (sc[25] * sc[25]);

  // reaction 325: CH2F + H <=> CH2(S) + HF
  qf[336] = sc[1] * sc[60];
  qr[336] = sc[11] * sc[53];

  // reaction 326: CH2F + H <=> CHF + H2
  qf[337] = sc[1] * sc[60];
  qr[337] = sc[0] * sc[63];

  // reaction 327: CHF3 + H <=> CF3 + H2
  qf[338] = sc[1] * sc[58];
  qr[338] = sc[0] * sc[62];

  // reaction 328: CHF3 + H <=> CH2F2 + F
  qf[339] = sc[1] * sc[58];
  qr[339] = sc[54] * sc[57];

  // reaction 329: CHF + H <=> CH + HF
  qf[340] = sc[1] * sc[63];
  qr[340] = sc[9] * sc[53];

  // reaction 330: CHF + H <=> CF + H2
  qf[341] = sc[1] * sc[63];
  qr[341] = sc[0] * sc[65];

  // reaction 331: CH + HF <=> CF + H2
  qf[342] = sc[9] * sc[53];
  qr[342] = sc[0] * sc[65];

  // reaction 333: CFO + H <=> CO + HF
  qf[343] = sc[1] * sc[69];
  qr[343] = sc[14] * sc[53];

  // reaction 334: CH2F + O <=> CHFO + H
  qf[344] = sc[2] * sc[60];
  qr[344] = sc[1] * sc[68];

  // reaction 335: CHF2 + O <=> CF2O + H
  qf[345] = sc[2] * sc[61];
  qr[345] = sc[1] * sc[67];

  // reaction 336: CF3 + O <=> CF2O + F
  qf[346] = sc[2] * sc[62];
  qr[346] = sc[54] * sc[67];

  // reaction 337: CH2F + OH <=> CH2O + HF
  qf[347] = sc[4] * sc[60];
  qr[347] = sc[17] * sc[53];

  // reaction 338: CHF2 + OH <=> CHFO + HF
  qf[348] = sc[4] * sc[61];
  qr[348] = sc[53] * sc[68];

  // reaction 339: CF3 + OH <=> CF2O + HF
  qf[349] = sc[4] * sc[62];
  qr[349] = sc[53] * sc[67];

  // reaction 341: F + H2 <=> H + HF
  qf[350] = sc[0] * sc[54];
  qr[350] = sc[1] * sc[53];

  // reaction 342: F + OH <=> HF + O
  qf[351] = sc[4] * sc[54];
  qr[351] = sc[2] * sc[53];

  // reaction 343: F + HO2 <=> HF + O2
  qf[352] = sc[6] * sc[54];
  qr[352] = sc[3] * sc[53];

  // reaction 344: F + H2O <=> HF + OH
  qf[353] = sc[5] * sc[54];
  qr[353] = sc[4] * sc[53];

  // reaction 345: F + H2O2 <=> HF + HO2
  qf[354] = sc[7] * sc[54];
  qr[354] = sc[6] * sc[53];

  // reaction 347: CHF + H2 <=> CH3F
  qf[355] = sc[0] * sc[63];
  qr[355] = sc[56];

  // reaction 348: CH2F + H <=> CH3F
  qf[356] = sc[1] * sc[60];
  qr[356] = sc[56];

  // reaction 350: CF2 + H2 <=> CH2F2
  qf[357] = sc[0] * sc[64];
  qr[357] = sc[57];

  // reaction 351: CHF2 + H <=> CH2F2
  qf[358] = sc[1] * sc[61];
  qr[358] = sc[57];

  // reaction 354: CH2(S) + HF <=> CHF + H2
  qf[359] = sc[11] * sc[53];
  qr[359] = sc[0] * sc[63];

  // reaction 355: CH3 + F <=> CH2(S) + HF
  qf[360] = sc[12] * sc[54];
  qr[360] = sc[11] * sc[53];

  // reaction 356: CH3 + F <=> CH2F + H
  qf[361] = sc[12] * sc[54];
  qr[361] = sc[1] * sc[60];

  // reaction 357: CHF + HF <=> CF2 + H2
  qf[362] = sc[53] * sc[63];
  qr[362] = sc[0] * sc[64];

  // reaction 358: CHF2 + H <=> CHF + HF
  qf[363] = sc[1] * sc[61];
  qr[363] = sc[53] * sc[63];

  // reaction 359: CHF2 + H <=> CF2 + H2
  qf[364] = sc[1] * sc[61];
  qr[364] = sc[0] * sc[64];

  // reaction 360: CH2F + F <=> CHF + HF
  qf[365] = sc[54] * sc[60];
  qr[365] = sc[53] * sc[63];

  // reaction 361: CF3 + H <=> CF2 + HF
  qf[366] = sc[1] * sc[62];
  qr[366] = sc[53] * sc[64];

  // reaction 362: CHF2 + F <=> CF2 + HF
  qf[367] = sc[54] * sc[61];
  qr[367] = sc[53] * sc[64];

  // reaction 363: CH3F + H <=> CH2F + H2
  qf[368] = sc[1] * sc[56];
  qr[368] = sc[0] * sc[60];

  // reaction 364: CH2F2 + H <=> CHF2 + H2
  qf[369] = sc[1] * sc[57];
  qr[369] = sc[0] * sc[61];

  // reaction 365: CH3F + H <=> CH3 + HF
  qf[370] = sc[1] * sc[56];
  qr[370] = sc[12] * sc[53];

  // reaction 366: CH2F2 + H <=> CH2F + HF
  qf[371] = sc[1] * sc[57];
  qr[371] = sc[53] * sc[60];

  // reaction 367: CHF3 + H <=> CHF2 + HF
  qf[372] = sc[1] * sc[58];
  qr[372] = sc[53] * sc[61];

  // reaction 368: CF4 + H <=> CF3 + HF
  qf[373] = sc[1] * sc[59];
  qr[373] = sc[53] * sc[62];

  // reaction 369: CF4 + H <=> CHF3 + F
  qf[374] = sc[1] * sc[59];
  qr[374] = sc[54] * sc[58];

  // reaction 370: CH3F + O <=> CH2F + OH
  qf[375] = sc[2] * sc[56];
  qr[375] = sc[4] * sc[60];

  // reaction 371: CH2F2 + O <=> CHF2 + OH
  qf[376] = sc[2] * sc[57];
  qr[376] = sc[4] * sc[61];

  // reaction 372: CHF3 + O <=> CF3 + OH
  qf[377] = sc[2] * sc[58];
  qr[377] = sc[4] * sc[62];

  // reaction 373: CH3F + OH <=> CH2F + H2O
  qf[378] = sc[4] * sc[56];
  qr[378] = sc[5] * sc[60];

  // reaction 374: CH2F2 + OH <=> CHF2 + H2O
  qf[379] = sc[4] * sc[57];
  qr[379] = sc[5] * sc[61];

  // reaction 375: CHF3 + OH <=> CF3 + H2O
  qf[380] = sc[4] * sc[58];
  qr[380] = sc[5] * sc[62];

  // reaction 376: CH2F + H2O2 <=> CH3F + HO2
  qf[381] = sc[7] * sc[60];
  qr[381] = sc[6] * sc[56];

  // reaction 377: CHF2 + H2O2 <=> CH2F2 + HO2
  qf[382] = sc[7] * sc[61];
  qr[382] = sc[6] * sc[57];

  // reaction 378: CF3 + H2O2 <=> CHF3 + HO2
  qf[383] = sc[7] * sc[62];
  qr[383] = sc[6] * sc[58];

  // reaction 379: CH3 + CH3F <=> CH2F + CH4
  qf[384] = sc[12] * sc[56];
  qr[384] = sc[13] * sc[60];

  // reaction 380: CH2F2 + CH3 <=> CH4 + CHF2
  qf[385] = sc[12] * sc[57];
  qr[385] = sc[13] * sc[61];

  // reaction 381: CF3 + CH4 <=> CH3 + CHF3
  qf[386] = sc[13] * sc[62];
  qr[386] = sc[12] * sc[58];

  // reaction 382: C2H3 + CH3F <=> C2H4 + CH2F
  qf[387] = sc[23] * sc[56];
  qr[387] = sc[24] * sc[60];

  // reaction 383: C2H3 + CH2F2 <=> C2H4 + CHF2
  qf[388] = sc[23] * sc[57];
  qr[388] = sc[24] * sc[61];

  // reaction 384: C2H4 + CF3 <=> C2H3 + CHF3
  qf[389] = sc[24] * sc[62];
  qr[389] = sc[23] * sc[58];

  // reaction 385: CF3 + CH3F <=> CH2F + CHF3
  qf[390] = sc[56] * sc[62];
  qr[390] = sc[58] * sc[60];

  // reaction 386: CH2F + CH2F2 <=> CH3F + CHF2
  qf[391] = sc[57] * sc[60];
  qr[391] = sc[56] * sc[61];

  // reaction 387: CF3 + CH2F2 <=> CHF2 + CHF3
  qf[392] = sc[57] * sc[62];
  qr[392] = sc[58] * sc[61];

  // reaction 388: CH2F + CH3OH <=> CH3F + CH3O
  qf[393] = sc[20] * sc[60];
  qr[393] = sc[19] * sc[56];

  // reaction 389: CH3OH + CHF2 <=> CH2F2 + CH3O
  qf[394] = sc[20] * sc[61];
  qr[394] = sc[19] * sc[57];

  // reaction 390: CF3 + CH3OH <=> CH3O + CHF3
  qf[395] = sc[20] * sc[62];
  qr[395] = sc[19] * sc[58];

  // reaction 391: CH2F + CH3OH <=> CH2OH + CH3F
  qf[396] = sc[20] * sc[60];
  qr[396] = sc[18] * sc[56];

  // reaction 392: CH3OH + CHF2 <=> CH2F2 + CH2OH
  qf[397] = sc[20] * sc[61];
  qr[397] = sc[18] * sc[57];

  // reaction 393: CF3 + CH3OH <=> CH2OH + CHF3
  qf[398] = sc[20] * sc[62];
  qr[398] = sc[18] * sc[58];

  // reaction 394: CH2F + CH2O <=> CH3F + HCO
  qf[399] = sc[17] * sc[60];
  qr[399] = sc[16] * sc[56];

  // reaction 395: CH2O + CHF2 <=> CH2F2 + HCO
  qf[400] = sc[17] * sc[61];
  qr[400] = sc[16] * sc[57];

  // reaction 396: CF3 + CH2O <=> CHF3 + HCO
  qf[401] = sc[17] * sc[62];
  qr[401] = sc[16] * sc[58];

  // reaction 397: CH2F + HCO <=> CH3F + CO
  qf[402] = sc[16] * sc[60];
  qr[402] = sc[14] * sc[56];

  // reaction 398: CHF2 + HCO <=> CH2F2 + CO
  qf[403] = sc[16] * sc[61];
  qr[403] = sc[14] * sc[57];

  // reaction 399: CF3 + HCO <=> CHF3 + CO
  qf[404] = sc[16] * sc[62];
  qr[404] = sc[14] * sc[58];

  // reaction 400: CH2F + HCO <=> CH2CO + HF
  qf[405] = sc[16] * sc[60];
  qr[405] = sc[28] * sc[53];

  // reaction 401: CH2F + O2 => CHFO + H + O
  qf[406] = sc[3] * sc[60];
  qr[406] = 0.0;

  // reaction 402: CHF2 + O2 => CF2O + H + O
  qf[407] = sc[3] * sc[61];
  qr[407] = 0.0;

  // reaction 403: CF3 + O2 <=> CF3O + O
  qf[408] = sc[3] * sc[62];
  qr[408] = sc[2] * sc[66];

  // reaction 404: CH2F + HO2 => CHFO + H + OH
  qf[409] = sc[6] * sc[60];
  qr[409] = 0.0;

  // reaction 405: CHF2 + HO2 => CF2O + H + OH
  qf[410] = sc[6] * sc[61];
  qr[410] = 0.0;

  // reaction 406: CF3 + HO2 <=> CF3O + OH
  qf[411] = sc[6] * sc[62];
  qr[411] = sc[4] * sc[66];

  // reaction 407: CH2F + HO2 <=> CH3F + O2
  qf[412] = sc[6] * sc[60];
  qr[412] = sc[3] * sc[56];

  // reaction 408: CHF2 + HO2 <=> CH2F2 + O2
  qf[413] = sc[6] * sc[61];
  qr[413] = sc[3] * sc[57];

  // reaction 409: CF3 + HO2 <=> CHF3 + O2
  qf[414] = sc[6] * sc[62];
  qr[414] = sc[3] * sc[58];

  // reaction 411: CF3O + H <=> CF2O + HF
  qf[415] = sc[1] * sc[66];
  qr[415] = sc[53] * sc[67];

  // reaction 412: CF3O + H2 => CF2O + H + HF
  qf[416] = sc[0] * sc[66];
  qr[416] = 0.0;

  // reaction 413: CF3O + H2O => CF2O + HF + OH
  qf[417] = sc[5] * sc[66];
  qr[417] = 0.0;

  // reaction 414: CF3O + CH4 => CF2O + CH3 + HF
  qf[418] = sc[13] * sc[66];
  qr[418] = 0.0;

  // reaction 415: C2H6 + CF3O => C2H5 + CF2O + HF
  qf[419] = sc[26] * sc[66];
  qr[419] = 0.0;

  // reaction 416: C2H4 + CF3O => C2H3 + CF2O + HF
  qf[420] = sc[24] * sc[66];
  qr[420] = 0.0;

  // reaction 417: CF3O + CH2O => CF2O + HCO + HF
  qf[421] = sc[17] * sc[66];
  qr[421] = 0.0;

  // reaction 418: CF3O + HCO => CF2O + CO + HF
  qf[422] = sc[16] * sc[66];
  qr[422] = 0.0;

  // reaction 419: CHF + O2 <=> CHFO + O
  qf[423] = sc[3] * sc[63];
  qr[423] = sc[2] * sc[68];

  // reaction 420: CF2 + O2 <=> CF2O + O
  qf[424] = sc[3] * sc[64];
  qr[424] = sc[2] * sc[67];

  // reaction 421: CHF + O <=> CO + HF
  qf[425] = sc[2] * sc[63];
  qr[425] = sc[14] * sc[53];

  // reaction 422: CF2 + O <=> CFO + F
  qf[426] = sc[2] * sc[64];
  qr[426] = sc[54] * sc[69];

  // reaction 423: CHF + OH <=> CHFO + H
  qf[427] = sc[4] * sc[63];
  qr[427] = sc[1] * sc[68];

  // reaction 424: CF2 + OH <=> CF2O + H
  qf[428] = sc[4] * sc[64];
  qr[428] = sc[1] * sc[67];

  // reaction 425: CHF + OH <=> HCO + HF
  qf[429] = sc[4] * sc[63];
  qr[429] = sc[16] * sc[53];

  // reaction 426: CF2 + OH <=> CFO + HF
  qf[430] = sc[4] * sc[64];
  qr[430] = sc[53] * sc[69];

  // reaction 427: CHF + HO2 <=> CHFO + OH
  qf[431] = sc[6] * sc[63];
  qr[431] = sc[4] * sc[68];

  // reaction 428: CF2 + HO2 <=> CF2O + OH
  qf[432] = sc[6] * sc[64];
  qr[432] = sc[4] * sc[67];

  // reaction 429: CHF + HO2 <=> CH2F + O2
  qf[433] = sc[6] * sc[63];
  qr[433] = sc[3] * sc[60];

  // reaction 430: CF2 + HO2 <=> CHF2 + O2
  qf[434] = sc[6] * sc[64];
  qr[434] = sc[3] * sc[61];

  // reaction 431: CHF + H2O <=> CH2O + HF
  qf[435] = sc[5] * sc[63];
  qr[435] = sc[17] * sc[53];

  // reaction 432: CF2 + H2O <=> CHFO + HF
  qf[436] = sc[5] * sc[64];
  qr[436] = sc[53] * sc[68];

  // reaction 434: CF2 + H <=> CF + HF
  qf[437] = sc[1] * sc[64];
  qr[437] = sc[53] * sc[65];

  // reaction 435: CH2O + CHF <=> CH2F + HCO
  qf[438] = sc[17] * sc[63];
  qr[438] = sc[16] * sc[60];

  // reaction 436: CH2O + CHF <=> CH2CO + HF
  qf[439] = sc[17] * sc[63];
  qr[439] = sc[28] * sc[53];

  // reaction 437: CF2 + CH2O <=> CHF2 + HCO
  qf[440] = sc[17] * sc[64];
  qr[440] = sc[16] * sc[61];

  // reaction 438: CHF + HCO <=> CH2F + CO
  qf[441] = sc[16] * sc[63];
  qr[441] = sc[14] * sc[60];

  // reaction 439: CF2 + HCO <=> CHF2 + CO
  qf[442] = sc[16] * sc[64];
  qr[442] = sc[14] * sc[61];

  // reaction 440: CF + O2 <=> CFO + O
  qf[443] = sc[3] * sc[65];
  qr[443] = sc[2] * sc[69];

  // reaction 441: CF + H2O <=> CHFO + H
  qf[444] = sc[5] * sc[65];
  qr[444] = sc[1] * sc[68];

  // reaction 442: CF + H <=> C + HF
  qf[445] = sc[1] * sc[65];
  qr[445] = sc[8] * sc[53];

  // reaction 443: CF + O <=> CO + F
  qf[446] = sc[2] * sc[65];
  qr[446] = sc[14] * sc[54];

  // reaction 444: CF + OH <=> CO + HF
  qf[447] = sc[4] * sc[65];
  qr[447] = sc[14] * sc[53];

  // reaction 445: CF + HO2 => CFO + OH
  qf[448] = sc[6] * sc[65];
  qr[448] = 0.0;

  // reaction 446: C2H4 + CF => C2H2 + CH2F
  qf[449] = sc[24] * sc[65];
  qr[449] = 0.0;

  // reaction 447: CF + CH2O => CHF + HCO
  qf[450] = sc[17] * sc[65];
  qr[450] = 0.0;

  // reaction 448: CF + HCO => CHF + CO
  qf[451] = sc[16] * sc[65];
  qr[451] = 0.0;

  // reaction 450: CFO + F <=> CF2O
  qf[452] = sc[54] * sc[69];
  qr[452] = sc[67];

  // reaction 451: CHFO + H <=> CFO + H2
  qf[453] = sc[1] * sc[68];
  qr[453] = sc[0] * sc[69];

  // reaction 452: CF2O + H <=> CFO + HF
  qf[454] = sc[1] * sc[67];
  qr[454] = sc[53] * sc[69];

  // reaction 453: CF2O + H <=> CFO + HF
  qf[455] = sc[1] * sc[67];
  qr[455] = sc[53] * sc[69];

  // reaction 454: CF2O + H <=> CFO + HF
  qf[456] = sc[1] * sc[67];
  qr[456] = sc[53] * sc[69];

  // reaction 455: CF2O + H2O => CO2 + 2 HF
  qf[457] = sc[5] * sc[67];
  qr[457] = 0.0;

  // reaction 456: CHFO + O <=> CFO + OH
  qf[458] = sc[2] * sc[68];
  qr[458] = sc[4] * sc[69];

  // reaction 457: CHFO + OH <=> CFO + H2O
  qf[459] = sc[4] * sc[68];
  qr[459] = sc[5] * sc[69];

  // reaction 458: CF2O + OH => CO2 + F + HF
  qf[460] = sc[4] * sc[67];
  qr[460] = 0.0;

  // reaction 459: CFO + H2O2 <=> CHFO + HO2
  qf[461] = sc[7] * sc[69];
  qr[461] = sc[6] * sc[68];

  // reaction 460: CH3 + CHFO <=> CFO + CH4
  qf[462] = sc[12] * sc[68];
  qr[462] = sc[13] * sc[69];

  // reaction 461: CH2F + CHFO <=> CFO + CH3F
  qf[463] = sc[60] * sc[68];
  qr[463] = sc[56] * sc[69];

  // reaction 462: CHF2 + CHFO <=> CFO + CH2F2
  qf[464] = sc[61] * sc[68];
  qr[464] = sc[57] * sc[69];

  // reaction 463: CF3 + CHFO <=> CFO + CHF3
  qf[465] = sc[62] * sc[68];
  qr[465] = sc[58] * sc[69];

  // reaction 464: C2H3 + CHFO <=> C2H4 + CFO
  qf[466] = sc[23] * sc[68];
  qr[466] = sc[24] * sc[69];

  // reaction 465: CFO + O <=> CO2 + F
  qf[467] = sc[2] * sc[69];
  qr[467] = sc[15] * sc[54];

  // reaction 466: CFO + OH <=> CO2 + HF
  qf[468] = sc[4] * sc[69];
  qr[468] = sc[15] * sc[53];

  // reaction 467: CFO + HO2 => CO2 + F + OH
  qf[469] = sc[6] * sc[69];
  qr[469] = 0.0;

  // reaction 468: CFO + CH3 <=> CH2CO + HF
  qf[470] = sc[12] * sc[69];
  qr[470] = sc[28] * sc[53];

  // reaction 469: 2 CFO <=> CF2O + CO
  qf[471] = (sc[69] * sc[69]);
  qr[471] = sc[14] * sc[67];

  // reaction 470: CH2F + CH3 <=> C2H4 + HF
  qf[472] = sc[12] * sc[60];
  qr[472] = sc[24] * sc[53];

  // reaction 471: CH2(S) + CH3F <=> C2H4 + HF
  qf[473] = sc[11] * sc[56];
  qr[473] = sc[24] * sc[53];

  // reaction 472: CH4 + CHF <=> C2H4 + HF
  qf[474] = sc[13] * sc[63];
  qr[474] = sc[24] * sc[53];

  // reaction 473: CH2F + CH3 <=> CH4 + CHF
  qf[475] = sc[12] * sc[60];
  qr[475] = sc[13] * sc[63];

  // reaction 474: 2 CH2F <=> CH3F + CHF
  qf[476] = (sc[60] * sc[60]);
  qr[476] = sc[56] * sc[63];

  // reaction 475: CH2F + CHF2 <=> CH2F2 + CHF
  qf[477] = sc[60] * sc[61];
  qr[477] = sc[57] * sc[63];

  // reaction 476: CF3 + CH2F <=> CHF + CHF3
  qf[478] = sc[60] * sc[62];
  qr[478] = sc[58] * sc[63];

  // reaction 477: CH3 + CHF2 <=> CF2 + CH4
  qf[479] = sc[12] * sc[61];
  qr[479] = sc[13] * sc[64];

  // reaction 478: CH2F + CHF2 <=> CF2 + CH3F
  qf[480] = sc[60] * sc[61];
  qr[480] = sc[56] * sc[64];

  // reaction 479: 2 CHF2 <=> CF2 + CH2F2
  qf[481] = (sc[61] * sc[61]);
  qr[481] = sc[57] * sc[64];

  // reaction 480: CF3 + CHF2 <=> CF2 + CHF3
  qf[482] = sc[61] * sc[62];
  qr[482] = sc[58] * sc[64];

  // reaction 481: CH2(S) + CHF <=> C2H2 + HF
  qf[483] = sc[11] * sc[63];
  qr[483] = sc[22] * sc[53];

  // reaction 482: CH2 + CH2F <=> C2H4 + F
  qf[484] = sc[10] * sc[60];
  qr[484] = sc[24] * sc[54];

  // reaction 483: CH2(S) + CH2F <=> C2H4 + F
  qf[485] = sc[11] * sc[60];
  qr[485] = sc[24] * sc[54];

  // reaction 484: F + HCCO <=> CHF + CO
  qf[486] = sc[27] * sc[54];
  qr[486] = sc[14] * sc[63];

  // reaction 485: CH4 + F <=> CH3 + HF
  qf[487] = sc[13] * sc[54];
  qr[487] = sc[12] * sc[53];

  // reaction 486: CH3F + F <=> CH2F + HF
  qf[488] = sc[54] * sc[56];
  qr[488] = sc[53] * sc[60];

  // reaction 487: CH2F2 + F <=> CHF2 + HF
  qf[489] = sc[54] * sc[57];
  qr[489] = sc[53] * sc[61];

  // reaction 488: CHF3 + F <=> CF3 + HF
  qf[490] = sc[54] * sc[58];
  qr[490] = sc[53] * sc[62];

  // reaction 489: CH3OH + F <=> CH3O + HF
  qf[491] = sc[20] * sc[54];
  qr[491] = sc[19] * sc[53];

  // reaction 490: CH3OH + F <=> CH2OH + HF
  qf[492] = sc[20] * sc[54];
  qr[492] = sc[18] * sc[53];

  // reaction 491: CH2O + F <=> HCO + HF
  qf[493] = sc[17] * sc[54];
  qr[493] = sc[16] * sc[53];

  // reaction 492: CHFO + F <=> CFO + HF
  qf[494] = sc[54] * sc[68];
  qr[494] = sc[53] * sc[69];

  // reaction 493: CH3O + F <=> CH2O + HF
  qf[495] = sc[19] * sc[54];
  qr[495] = sc[17] * sc[53];

  // reaction 494: F + HCO <=> CO + HF
  qf[496] = sc[16] * sc[54];
  qr[496] = sc[14] * sc[53];

  // reaction 495: C2H6 + F <=> C2H5 + HF
  qf[497] = sc[26] * sc[54];
  qr[497] = sc[25] * sc[53];

  // reaction 496: C2H4 + F <=> C2H3 + HF
  qf[498] = sc[24] * sc[54];
  qr[498] = sc[23] * sc[53];

  // reaction 497: C2H3 + F <=> C2H2 + HF
  qf[499] = sc[23] * sc[54];
  qr[499] = sc[22] * sc[53];

  // reaction 499: CF4 + CH3 <=> CF3 + CH3F
  qf[500] = sc[12] * sc[59];
  qr[500] = sc[56] * sc[62];

  // reaction 500: CF3O + CO <=> CF3 + CO2
  qf[501] = sc[14] * sc[66];
  qr[501] = sc[15] * sc[62];

  // reaction 501: CF2 + CFO <=> CF3 + CO
  qf[502] = sc[64] * sc[69];
  qr[502] = sc[14] * sc[62];

  // reaction 503: F2 + H <=> F + HF
  qf[503] = sc[1] * sc[55];
  qr[503] = sc[53] * sc[54];

  // reaction 504: CF3 + F2 <=> CF4 + F
  qf[504] = sc[55] * sc[62];
  qr[504] = sc[54] * sc[59];

  // reaction 505: CH3 + F2 <=> CH3F + F
  qf[505] = sc[12] * sc[55];
  qr[505] = sc[54] * sc[56];

  // reaction 506: CF2 + F2 <=> CF3 + F
  qf[506] = sc[55] * sc[64];
  qr[506] = sc[54] * sc[62];

  // reaction 507: CFO + F2 <=> CF2O + F
  qf[507] = sc[55] * sc[69];
  qr[507] = sc[54] * sc[67];

  // reaction 508: F2 + H2 <=> F + H + HF
  qf[508] = sc[0] * sc[55];
  qr[508] = sc[1] * sc[53] * sc[54];

  // reaction 509: CO + F2 <=> CFO + F
  qf[509] = sc[14] * sc[55];
  qr[509] = sc[54] * sc[69];

  // reaction 510: C + F2 <=> CF + F
  qf[510] = sc[8] * sc[55];
  qr[510] = sc[54] * sc[65];

  // reaction 511: CF + F2 <=> CF2 + F
  qf[511] = sc[55] * sc[65];
  qr[511] = sc[54] * sc[64];

  // reaction 512: CH4 + F2 <=> CH3 + F + HF
  qf[512] = sc[13] * sc[55];
  qr[512] = sc[12] * sc[53] * sc[54];

  // reaction 513: F2 + OH <=> F + HF + O
  qf[513] = sc[4] * sc[55];
  qr[513] = sc[2] * sc[53] * sc[54];

  // reaction 514: C3H8 + F <=> HF + nC3H7
  qf[514] = sc[50] * sc[54];
  qr[514] = sc[53] * sc[71];

  // reaction 515: C3H8 + F <=> HF + iC3H7
  qf[515] = sc[50] * sc[54];
  qr[515] = sc[53] * sc[70];

  // reaction 516: C3H8 + CF3 <=> CHF3 + nC3H7
  qf[516] = sc[50] * sc[62];
  qr[516] = sc[58] * sc[71];

  // reaction 517: C3H8 + CF3 <=> CHF3 + iC3H7
  qf[517] = sc[50] * sc[62];
  qr[517] = sc[58] * sc[70];

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 72; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[72];
  gibbs(g_RT, T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 * invT;
  amrex::Real refCinv = 1 / refC;

  // Evaluate the kfs
  amrex::Real k_f, Corr;
  amrex::Real redP, F, logPred, logFcent, troe_c, troe_n, troe, F_troe;

  // reaction 0:  2 O + M <=> O2 + M
  k_f = 120000 * exp((-1) * logT);
  Corr = mixture + (1.4) * sc[0] + (14.4) * sc[5] + sc[13] + (0.75) * sc[14] +
         (2.6) * sc[15] + (2) * sc[26] + (-0.17) * sc[48];
  qf[32] *= Corr * k_f;
  qr[32] *= Corr * k_f * exp(-(2.000000 * g_RT[2] - g_RT[3])) * (refC);
  // reaction 1:  H + O + M <=> OH + M
  k_f = 500000 * exp((-1) * logT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  qf[33] *= Corr * k_f;
  qr[33] *= Corr * k_f * exp(-(g_RT[1] + g_RT[2] - g_RT[4])) * (refC);
  // reaction 2:  H2 + O <=> H + OH
  k_f = 0.0387 * exp((2.7) * logT - (3150.13632793755) * invT);
  qf[61] *= k_f;
  qr[61] *= k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[2] - g_RT[4]));
  // reaction 3:  HO2 + O <=> O2 + OH
  k_f = 20000000;
  qf[62] *= k_f;
  qr[62] *= k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[4] + g_RT[6]));
  // reaction 4:  H2O2 + O <=> HO2 + OH
  k_f = 9.63 * exp((2) * logT - (2012.86666321888) * invT);
  qf[63] *= k_f;
  qr[63] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[6] + g_RT[7]));
  // reaction 5:  CH + O <=> CO + H
  k_f = 57000000;
  qf[64] *= k_f;
  qr[64] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[9] - g_RT[14]));
  // reaction 6:  CH2 + O <=> H + HCO
  k_f = 80000000;
  qf[65] *= k_f;
  qr[65] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[10] - g_RT[16]));
  // reaction 7:  CH2(S) + O <=> CO + H2
  k_f = 15000000;
  qf[66] *= k_f;
  qr[66] *= k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[11] - g_RT[14]));
  // reaction 8:  CH2(S) + O <=> H + HCO
  k_f = 15000000;
  qf[67] *= k_f;
  qr[67] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[11] - g_RT[16]));
  // reaction 9:  CH3 + O <=> CH2O + H
  k_f = 50600000;
  qf[68] *= k_f;
  qr[68] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[12] - g_RT[17]));
  // reaction 10:  CH4 + O <=> CH3 + OH
  k_f = 1020 * exp((1.5) * logT - (4327.66332592059) * invT);
  qf[69] *= k_f;
  qr[69] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[12] + g_RT[13]));
  // reaction 11:  CO + O (+M) <=> CO2 (+M)
  k_f = 18000 * exp(-(1200.17174794426) * invT);
  Corr = mixture + sc[0] + (5) * sc[3] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
         (2.5) * sc[15] + (2) * sc[26] + (-0.5) * sc[48];
  redP = Corr / k_f * 602 * exp(-(1509.64999741416) * invT);
  Corr = redP / (1. + redP);
  qf[26] *= Corr * k_f;
  qr[26] *= Corr * k_f * exp(-(g_RT[2] + g_RT[14] - g_RT[15])) * (refC);
  // reaction 12:  HCO + O <=> CO + OH
  k_f = 30000000;
  qf[70] *= k_f;
  qr[70] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[14] + g_RT[16]));
  // reaction 13:  HCO + O <=> CO2 + H
  k_f = 30000000;
  qf[71] *= k_f;
  qr[71] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[15] + g_RT[16]));
  // reaction 14:  CH2O + O <=> HCO + OH
  k_f = 39000000 * exp(-(1781.38699694871) * invT);
  qf[72] *= k_f;
  qr[72] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[16] + g_RT[17]));
  // reaction 15:  CH2OH + O <=> CH2O + OH
  k_f = 10000000;
  qf[73] *= k_f;
  qr[73] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[17] + g_RT[18]));
  // reaction 16:  CH3O + O <=> CH2O + OH
  k_f = 10000000;
  qf[74] *= k_f;
  qr[74] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[17] + g_RT[19]));
  // reaction 17:  CH3OH + O <=> CH2OH + OH
  k_f = 0.388 * exp((2.5) * logT - (1559.97166399463) * invT);
  qf[75] *= k_f;
  qr[75] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[18] + g_RT[20]));
  // reaction 18:  CH3OH + O <=> CH3O + OH
  k_f = 0.13 * exp((2.5) * logT - (2516.0833290236) * invT);
  qf[76] *= k_f;
  qr[76] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[19] + g_RT[20]));
  // reaction 19:  C2H + O <=> CH + CO
  k_f = 50000000;
  qf[77] *= k_f;
  qr[77] *= k_f * exp(-(g_RT[2] - g_RT[9] - g_RT[14] + g_RT[21]));
  // reaction 20:  C2H2 + O <=> H + HCCO
  k_f = 13.5 * exp((2) * logT - (956.111665028967) * invT);
  qf[78] *= k_f;
  qr[78] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[22] - g_RT[27]));
  // reaction 21:  C2H2 + O <=> C2H + OH
  k_f = 46000000000000 * exp((-1.41) * logT - (14568.1224750466) * invT);
  qf[79] *= k_f;
  qr[79] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[21] + g_RT[22]));
  // reaction 22:  C2H2 + O <=> CH2 + CO
  k_f = 6.94 * exp((2) * logT - (956.111665028967) * invT);
  qf[80] *= k_f;
  qr[80] *= k_f * exp(-(g_RT[2] - g_RT[10] - g_RT[14] + g_RT[22]));
  // reaction 23:  C2H3 + O <=> CH2CO + H
  k_f = 30000000;
  qf[81] *= k_f;
  qr[81] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[23] - g_RT[28]));
  // reaction 24:  C2H4 + O <=> CH3 + HCO
  k_f = 12.5 * exp((1.83) * logT - (110.707666477038) * invT);
  qf[82] *= k_f;
  qr[82] *= k_f * exp(-(g_RT[2] - g_RT[12] - g_RT[16] + g_RT[24]));
  // reaction 25:  C2H5 + O <=> CH2O + CH3
  k_f = 22400000;
  qf[83] *= k_f;
  qr[83] *= k_f * exp(-(g_RT[2] - g_RT[12] - g_RT[17] + g_RT[25]));
  // reaction 26:  C2H6 + O <=> C2H5 + OH
  k_f = 89.8 * exp((1.92) * logT - (2863.30282842885) * invT);
  qf[84] *= k_f;
  qr[84] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[25] + g_RT[26]));
  // reaction 27:  HCCO + O <=> 2 CO + H
  k_f = 100000000;
  qf[85] *= k_f;
  qr[85] *= k_f * exp(-(-g_RT[1] + g_RT[2] - 2.000000 * g_RT[14] + g_RT[27])) *
            (refCinv);
  // reaction 28:  CH2CO + O <=> HCCO + OH
  k_f = 10000000 * exp(-(4025.73332643776) * invT);
  qf[86] *= k_f;
  qr[86] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[27] + g_RT[28]));
  // reaction 29:  CH2CO + O <=> CH2 + CO2
  k_f = 1750000 * exp(-(679.342498836372) * invT);
  qf[87] *= k_f;
  qr[87] *= k_f * exp(-(g_RT[2] - g_RT[10] - g_RT[15] + g_RT[28]));
  // reaction 30:  CO + O2 <=> CO2 + O
  k_f = 2500000 * exp(-(24053.7566254656) * invT);
  qf[88] *= k_f;
  qr[88] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[14] - g_RT[15]));
  // reaction 31:  CH2O + O2 <=> HCO + HO2
  k_f = 100000000 * exp(-(20128.6666321888) * invT);
  qf[89] *= k_f;
  qr[89] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[16] + g_RT[17]));
  // reaction 32:  H + O2 + M <=> HO2 + M
  k_f = 2800000 * exp((-0.86) * logT);
  Corr = mixture + (-1) * sc[3] + (-1) * sc[5] + (-0.25) * sc[14] +
         (0.5) * sc[15] + (0.5) * sc[26] + (-1) * sc[47] + (-1) * sc[48];
  qf[34] *= Corr * k_f;
  qr[34] *= Corr * k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC);
  // reaction 33:  H + O2 + O2 <=> HO2 + O2
  k_f = 20800000 * exp((-1.24) * logT);
  qf[35] *= k_f;
  qr[35] *= k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC);
  // reaction 34:  H + O2 + H2O <=> HO2 + H2O
  k_f = 11260000 * exp((-0.76) * logT);
  qf[36] *= k_f;
  qr[36] *= k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC);
  // reaction 35:  H + O2 + N2 <=> HO2 + N2
  k_f = 26000000 * exp((-1.24) * logT);
  qf[37] *= k_f;
  qr[37] *= k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC);
  // reaction 36:  H + O2 + AR <=> HO2 + AR
  k_f = 700000 * exp((-0.8) * logT);
  qf[38] *= k_f;
  qr[38] *= k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC);
  // reaction 37:  H + O2 <=> O + OH
  k_f = 26500000000 * exp((-0.6707) * logT - (8575.31520197823) * invT);
  qf[90] *= k_f;
  qr[90] *= k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[3] - g_RT[4]));
  // reaction 38:  2 H + M <=> H2 + M
  k_f = 1000000 * exp((-1) * logT);
  Corr = mixture + (-1) * sc[0] + (-1) * sc[5] + sc[13] + (-1) * sc[15] +
         (2) * sc[26] + (-0.37) * sc[48];
  qf[39] *= Corr * k_f;
  qr[39] *= Corr * k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC);
  // reaction 39:  2 H + H2 <=> H2 + H2
  k_f = 90000 * exp((-0.6) * logT);
  qf[40] *= k_f;
  qr[40] *= k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC);
  // reaction 40:  2 H + H2O <=> H2 + H2O
  k_f = 60000000 * exp((-1.25) * logT);
  qf[41] *= k_f;
  qr[41] *= k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC);
  // reaction 41:  2 H + CO2 <=> H2 + CO2
  k_f = 550000000 * exp((-2) * logT);
  qf[42] *= k_f;
  qr[42] *= k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC);
  // reaction 42:  H + OH + M <=> H2O + M
  k_f = 22000000000 * exp((-2) * logT);
  Corr = mixture + (-0.27) * sc[0] + (2.65) * sc[5] + sc[13] + (2) * sc[26] +
         (-0.62) * sc[48];
  qf[43] *= Corr * k_f;
  qr[43] *= Corr * k_f * exp(-(g_RT[1] + g_RT[4] - g_RT[5])) * (refC);
  // reaction 43:  H + HO2 <=> H2O + O
  k_f = 3970000 * exp(-(337.658382754967) * invT);
  qf[91] *= k_f;
  qr[91] *= k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[5] + g_RT[6]));
  // reaction 44:  H + HO2 <=> H2 + O2
  k_f = 44800000 * exp(-(537.435399079441) * invT);
  qf[92] *= k_f;
  qr[92] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[3] + g_RT[6]));
  // reaction 45:  H + HO2 <=> 2 OH
  k_f = 84000000 * exp(-(319.542582785997) * invT);
  qf[93] *= k_f;
  qr[93] *= k_f * exp(-(g_RT[1] - 2.000000 * g_RT[4] + g_RT[6]));
  // reaction 46:  H + H2O2 <=> H2 + HO2
  k_f = 12.1 * exp((2) * logT - (2616.72666218454) * invT);
  qf[94] *= k_f;
  qr[94] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[6] + g_RT[7]));
  // reaction 47:  H + H2O2 <=> H2O + OH
  k_f = 10000000 * exp(-(1811.57999689699) * invT);
  qf[95] *= k_f;
  qr[95] *= k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[5] + g_RT[7]));
  // reaction 48:  CH + H <=> C + H2
  k_f = 165000000;
  qf[96] *= k_f;
  qr[96] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[8] + g_RT[9]));
  // reaction 49:  CH2 + H (+M) <=> CH3 (+M)
  k_f = 600000000;
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  redP = Corr / k_f * 104000000000000 *
         exp(-2.76 * logT - (805.146665287552) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.438) * exp(-T * 0.010989010989011) +
    0.562 * exp(-T * 0.000171350239890336) + exp(-8552 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[0] *= Corr * k_f;
  qr[0] *= Corr * k_f * exp(-(g_RT[1] + g_RT[10] - g_RT[12])) * (refC);
  // reaction 50:  CH2(S) + H <=> CH + H2
  k_f = 30000000;
  qf[97] *= k_f;
  qr[97] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[9] + g_RT[11]));
  // reaction 51:  CH3 + H (+M) <=> CH4 (+M)
  k_f = 13900000000 * exp((-0.534) * logT - (269.72413287133) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + (2) * sc[13] + (0.5) * sc[14] +
         sc[15] + (2) * sc[26] + (-0.3) * sc[48];
  redP = Corr / k_f * 2.62e+21 * exp(-4.76 * logT - (1227.84866456352) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.217) * exp(-T * 0.0135135135135135) +
    0.783 * exp(-T * 0.000340020401224073) + exp(-6964 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[1] *= Corr * k_f;
  qr[1] *= Corr * k_f * exp(-(g_RT[1] + g_RT[12] - g_RT[13])) * (refC);
  // reaction 52:  CH4 + H <=> CH3 + H2
  k_f = 660 * exp((1.62) * logT - (5454.86865732316) * invT);
  qf[98] *= k_f;
  qr[98] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[12] + g_RT[13]));
  // reaction 53:  H + HCO (+M) <=> CH2O (+M)
  k_f = 1090000 * exp((0.48) * logT - (-130.836333109227) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  redP =
    Corr / k_f * 2470000000000 * exp(-2.57 * logT - (213.867082967006) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2176) * exp(-T * 0.003690036900369) +
    0.7824 * exp(-T * 0.000362976406533575) + exp(-6570 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[2] *= Corr * k_f;
  qr[2] *= Corr * k_f * exp(-(g_RT[1] + g_RT[16] - g_RT[17])) * (refC);
  // reaction 54:  H + HCO <=> CO + H2
  k_f = 73400000;
  qf[99] *= k_f;
  qr[99] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[14] + g_RT[16]));
  // reaction 55:  CH2O + H (+M) <=> CH2OH (+M)
  k_f = 540000 * exp((0.454) * logT - (1811.57999689699) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26];
  redP = Corr / k_f * 1.27e+20 * exp(-4.82 * logT - (3286.00482770482) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2813) * exp(-T * 0.00970873786407767) +
    0.7187 * exp(-T * 0.000774593338497289) + exp(-4160 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[3] *= Corr * k_f;
  qr[3] *= Corr * k_f * exp(-(g_RT[1] + g_RT[17] - g_RT[18])) * (refC);
  // reaction 56:  CH2O + H (+M) <=> CH3O (+M)
  k_f = 540000 * exp((0.454) * logT - (1308.36333109227) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26];
  redP = Corr / k_f * 2.2e+18 * exp(-4.8 * logT - (2797.88466187424) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.242) * exp(-T * 0.0106382978723404) +
    0.758 * exp(-T * 0.000643086816720257) + exp(-4200 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[4] *= Corr * k_f;
  qr[4] *= Corr * k_f * exp(-(g_RT[1] + g_RT[17] - g_RT[19])) * (refC);
  // reaction 57:  CH2O + H <=> H2 + HCO
  k_f = 57.4 * exp((1.9) * logT - (1379.82009763654) * invT);
  qf[100] *= k_f;
  qr[100] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[16] + g_RT[17]));
  // reaction 58:  CH2OH + H (+M) <=> CH3OH (+M)
  k_f = 1055000 * exp((0.5) * logT - (43.2766332592059) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26];
  redP = Corr / k_f * 4.36e+19 * exp(-4.65 * logT - (2556.34066228798) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.4) * exp(-T * 0.01) + 0.6 * exp(-T * 1.11111111111111e-05) +
    exp(-10000 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[5] *= Corr * k_f;
  qr[5] *= Corr * k_f * exp(-(g_RT[1] + g_RT[18] - g_RT[20])) * (refC);
  // reaction 59:  CH2OH + H <=> CH2O + H2
  k_f = 20000000;
  qf[101] *= k_f;
  qr[101] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[17] + g_RT[18]));
  // reaction 60:  CH2OH + H <=> CH3 + OH
  k_f = 165000 * exp((0.65) * logT - (-142.91353308854) * invT);
  qf[102] *= k_f;
  qr[102] *= k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[12] + g_RT[18]));
  // reaction 61:  CH2OH + H <=> CH2(S) + H2O
  k_f = 32800000 * exp((-0.09) * logT - (306.962166140879) * invT);
  qf[103] *= k_f;
  qr[103] *= k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[11] + g_RT[18]));
  // reaction 62:  CH3O + H (+M) <=> CH3OH (+M)
  k_f = 2430000 * exp((0.515) * logT - (25.160833290236) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26];
  redP = Corr / k_f * 4.66e+29 * exp(-7.44 * logT - (7085.29065453045) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.3) * exp(-T * 0.01) + 0.7 * exp(-T * 1.11111111111111e-05) +
    exp(-10000 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[6] *= Corr * k_f;
  qr[6] *= Corr * k_f * exp(-(g_RT[1] + g_RT[19] - g_RT[20])) * (refC);
  // reaction 63:  CH3O + H <=> CH2OH + H
  k_f = 41.5 * exp((1.63) * logT - (968.188865008281) * invT);
  qf[104] *= k_f;
  qr[104] *= k_f * exp(-(g_RT[1] - g_RT[1] - g_RT[18] + g_RT[19]));
  // reaction 64:  CH3O + H <=> CH2O + H2
  k_f = 20000000;
  qf[105] *= k_f;
  qr[105] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[17] + g_RT[19]));
  // reaction 65:  CH3O + H <=> CH3 + OH
  k_f = 1500000 * exp((0.5) * logT - (-55.3538332385192) * invT);
  qf[106] *= k_f;
  qr[106] *= k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[12] + g_RT[19]));
  // reaction 66:  CH3O + H <=> CH2(S) + H2O
  k_f = 262000000 * exp((-0.23) * logT - (538.44183241105) * invT);
  qf[107] *= k_f;
  qr[107] *= k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[11] + g_RT[19]));
  // reaction 67:  CH3OH + H <=> CH2OH + H2
  k_f = 17 * exp((2.1) * logT - (2450.66516246898) * invT);
  qf[108] *= k_f;
  qr[108] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[18] + g_RT[20]));
  // reaction 68:  CH3OH + H <=> CH3O + H2
  k_f = 4.2 * exp((2.1) * logT - (2450.66516246898) * invT);
  qf[109] *= k_f;
  qr[109] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[19] + g_RT[20]));
  // reaction 69:  C2H + H (+M) <=> C2H2 (+M)
  k_f = 100000000000 * exp((-1) * logT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  redP = Corr / k_f * 3.75e+21 * exp(-4.8 * logT - (956.111665028967) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.3536) * exp(-T * 0.00757575757575758) +
    0.6464 * exp(-T * 0.000760456273764259) + exp(-5566 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[7] *= Corr * k_f;
  qr[7] *= Corr * k_f * exp(-(g_RT[1] + g_RT[21] - g_RT[22])) * (refC);
  // reaction 70:  C2H2 + H (+M) <=> C2H3 (+M)
  k_f = 5600000 * exp(-(1207.71999793133) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  redP = Corr / k_f * 3.8e+28 * exp(-7.27 * logT - (3633.22432711008) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2493) * exp(-T * 0.0101522842639594) +
    0.7507 * exp(-T * 0.000768049155145929) + exp(-4167 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[8] *= Corr * k_f;
  qr[8] *= Corr * k_f * exp(-(g_RT[1] + g_RT[22] - g_RT[23])) * (refC);
  // reaction 71:  C2H3 + H (+M) <=> C2H4 (+M)
  k_f = 6080000 * exp((0.27) * logT - (140.900666425322) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  redP = Corr / k_f * 1.4e+18 * exp(-3.86 * logT - (1670.67933047167) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.218) * exp(-T * 0.00481927710843374) +
    0.782 * exp(-T * 0.000375516334960571) + exp(-6095 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[9] *= Corr * k_f;
  qr[9] *= Corr * k_f * exp(-(g_RT[1] + g_RT[23] - g_RT[24])) * (refC);
  // reaction 72:  C2H3 + H <=> C2H2 + H2
  k_f = 30000000;
  qf[110] *= k_f;
  qr[110] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[22] + g_RT[23]));
  // reaction 73:  C2H4 + H (+M) <=> C2H5 (+M)
  k_f = 540000 * exp((0.454) * logT - (915.85433176459) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  redP = Corr / k_f * 6e+29 * exp(-7.62 * logT - (3507.4201606589) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.0247000000000001) * exp(-T * 0.00476190476190476) +
    0.9753 * exp(-T * 0.00101626016260163) + exp(-4374 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[10] *= Corr * k_f;
  qr[10] *= Corr * k_f * exp(-(g_RT[1] + g_RT[24] - g_RT[25])) * (refC);
  // reaction 74:  C2H4 + H <=> C2H3 + H2
  k_f = 1.325 * exp((2.53) * logT - (6159.37198944977) * invT);
  qf[111] *= k_f;
  qr[111] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[23] + g_RT[24]));
  // reaction 75:  C2H5 + H (+M) <=> C2H6 (+M)
  k_f = 521000000000 * exp((-0.99) * logT - (795.082331971457) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  redP = Corr / k_f * 1.99e+29 * exp(-7.08 * logT - (3364.00341090455) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.1578) * exp(-T * 0.008) + 0.8422 * exp(-T * 0.000450653447498873) +
    exp(-6882 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[11] *= Corr * k_f;
  qr[11] *= Corr * k_f * exp(-(g_RT[1] + g_RT[25] - g_RT[26])) * (refC);
  // reaction 76:  C2H5 + H <=> C2H4 + H2
  k_f = 2000000;
  qf[112] *= k_f;
  qr[112] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[24] + g_RT[25]));
  // reaction 77:  C2H6 + H <=> C2H5 + H2
  k_f = 115 * exp((1.9) * logT - (3789.22149350954) * invT);
  qf[113] *= k_f;
  qr[113] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[25] + g_RT[26]));
  // reaction 78:  H + HCCO <=> CH2(S) + CO
  k_f = 100000000;
  qf[114] *= k_f;
  qr[114] *= k_f * exp(-(g_RT[1] - g_RT[11] - g_RT[14] + g_RT[27]));
  // reaction 79:  CH2CO + H <=> H2 + HCCO
  k_f = 50000000 * exp(-(4025.73332643776) * invT);
  qf[115] *= k_f;
  qr[115] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[27] + g_RT[28]));
  // reaction 80:  CH2CO + H <=> CH3 + CO
  k_f = 11300000 * exp(-(1725.02673037858) * invT);
  qf[116] *= k_f;
  qr[116] *= k_f * exp(-(g_RT[1] - g_RT[12] - g_RT[14] + g_RT[28]));
  // reaction 81:  H + HCCOH <=> CH2CO + H
  k_f = 10000000;
  qf[117] *= k_f;
  qr[117] *= k_f * exp(-(g_RT[1] - g_RT[1] - g_RT[28] + g_RT[29]));
  // reaction 82:  CO + H2 (+M) <=> CH2O (+M)
  k_f = 43 * exp((1.5) * logT - (40056.0465980557) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  redP = Corr / k_f * 5.07e+15 * exp(-3.42 * logT - (42446.3257606281) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.0679999999999999) * exp(-T * 0.0050761421319797) +
    0.932 * exp(-T * 0.000649350649350649) + exp(-10300 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[12] *= Corr * k_f;
  qr[12] *= Corr * k_f * exp(-(g_RT[0] + g_RT[14] - g_RT[17])) * (refC);
  // reaction 83:  H2 + OH <=> H + H2O
  k_f = 216 * exp((1.51) * logT - (1726.03316371019) * invT);
  qf[118] *= k_f;
  qr[118] *= k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[4] - g_RT[5]));
  // reaction 84:  2 OH (+M) <=> H2O2 (+M)
  k_f = 74000000 * exp((-0.37) * logT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  redP = Corr / k_f * 2300000 * exp(-0.9 * logT - (-855.468331868023) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2654) * exp(-T * 0.0106382978723404) +
    0.7346 * exp(-T * 0.000569476082004556) + exp(-5182 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[13] *= Corr * k_f;
  qr[13] *= Corr * k_f * exp(-(2.000000 * g_RT[4] - g_RT[7])) * (refC);
  // reaction 85:  2 OH <=> H2O + O
  k_f = 0.0357 * exp((2.4) * logT - (-1061.78716484796) * invT);
  qf[119] *= k_f;
  qr[119] *= k_f * exp(-(-g_RT[2] + 2.000000 * g_RT[4] - g_RT[5]));
  // reaction 86:  HO2 + OH <=> H2O + O2
  k_f = 14500000 * exp(-(-251.60833290236) * invT);
  qf[120] *= k_f;
  qr[120] *= k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[5] + g_RT[6]));
  // reaction 87:  H2O2 + OH <=> H2O + HO2
  k_f = 2000000 * exp(-(214.873516298615) * invT);
  qf[121] *= k_f;
  qr[121] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]));
  // reaction 88:  H2O2 + OH <=> H2O + HO2
  k_f = 1700000000000 * exp(-(14799.6021413168) * invT);
  qf[122] *= k_f;
  qr[122] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]));
  // reaction 89:  C + OH <=> CO + H
  k_f = 50000000;
  qf[123] *= k_f;
  qr[123] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[8] - g_RT[14]));
  // reaction 90:  CH + OH <=> H + HCO
  k_f = 30000000;
  qf[124] *= k_f;
  qr[124] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[9] - g_RT[16]));
  // reaction 91:  CH2 + OH <=> CH2O + H
  k_f = 20000000;
  qf[125] *= k_f;
  qr[125] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[10] - g_RT[17]));
  // reaction 92:  CH2 + OH <=> CH + H2O
  k_f = 11.3 * exp((2) * logT - (1509.64999741416) * invT);
  qf[126] *= k_f;
  qr[126] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[9] + g_RT[10]));
  // reaction 93:  CH2(S) + OH <=> CH2O + H
  k_f = 30000000;
  qf[127] *= k_f;
  qr[127] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[11] - g_RT[17]));
  // reaction 94:  CH3 + OH (+M) <=> CH3OH (+M)
  k_f = 2790000000000 * exp((-1.43) * logT - (669.278165520277) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26];
  redP = Corr / k_f * 4e+24 * exp(-5.92 * logT - (1580.10033062682) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.588) * exp(-T * 0.00512820512820513) +
    0.412 * exp(-T * 0.000169491525423729) + exp(-6394 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[14] *= Corr * k_f;
  qr[14] *= Corr * k_f * exp(-(g_RT[4] + g_RT[12] - g_RT[20])) * (refC);
  // reaction 95:  CH3 + OH <=> CH2 + H2O
  k_f = 56 * exp((1.6) * logT - (2727.43432866158) * invT);
  qf[128] *= k_f;
  qr[128] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[10] + g_RT[12]));
  // reaction 96:  CH3 + OH <=> CH2(S) + H2O
  k_f = 644000000000 * exp((-1.34) * logT - (713.058015445288) * invT);
  qf[129] *= k_f;
  qr[129] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[11] + g_RT[12]));
  // reaction 97:  CH4 + OH <=> CH3 + H2O
  k_f = 100 * exp((1.6) * logT - (1570.03599731073) * invT);
  qf[130] *= k_f;
  qr[130] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[12] + g_RT[13]));
  // reaction 98:  CO + OH <=> CO2 + H
  k_f = 47.6 * exp((1.228) * logT - (35.2251666063304) * invT);
  qf[131] *= k_f;
  qr[131] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[14] - g_RT[15]));
  // reaction 99:  HCO + OH <=> CO + H2O
  k_f = 50000000;
  qf[132] *= k_f;
  qr[132] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[14] + g_RT[16]));
  // reaction 100:  CH2O + OH <=> H2O + HCO
  k_f = 3430 * exp((1.18) * logT - (-224.93784961471) * invT);
  qf[133] *= k_f;
  qr[133] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[16] + g_RT[17]));
  // reaction 101:  CH2OH + OH <=> CH2O + H2O
  k_f = 5000000;
  qf[134] *= k_f;
  qr[134] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[17] + g_RT[18]));
  // reaction 102:  CH3O + OH <=> CH2O + H2O
  k_f = 5000000;
  qf[135] *= k_f;
  qr[135] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[17] + g_RT[19]));
  // reaction 103:  CH3OH + OH <=> CH2OH + H2O
  k_f = 1.44 * exp((2) * logT - (-422.701999275965) * invT);
  qf[136] *= k_f;
  qr[136] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[18] + g_RT[20]));
  // reaction 104:  CH3OH + OH <=> CH3O + H2O
  k_f = 6.3 * exp((2) * logT - (754.82499870708) * invT);
  qf[137] *= k_f;
  qr[137] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[19] + g_RT[20]));
  // reaction 105:  C2H + OH <=> H + HCCO
  k_f = 20000000;
  qf[138] *= k_f;
  qr[138] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[21] - g_RT[27]));
  // reaction 106:  C2H2 + OH <=> CH2CO + H
  k_f = 2.18e-10 * exp((4.5) * logT - (-503.21666580472) * invT);
  qf[139] *= k_f;
  qr[139] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[22] - g_RT[28]));
  // reaction 107:  C2H2 + OH <=> H + HCCOH
  k_f = 0.504 * exp((2.3) * logT - (6793.42498836372) * invT);
  qf[140] *= k_f;
  qr[140] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[22] - g_RT[29]));
  // reaction 108:  C2H2 + OH <=> C2H + H2O
  k_f = 33.7 * exp((2) * logT - (7045.03332126608) * invT);
  qf[141] *= k_f;
  qr[141] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[21] + g_RT[22]));
  // reaction 109:  C2H2 + OH <=> CH3 + CO
  k_f = 4.83e-10 * exp((4) * logT - (-1006.43333160944) * invT);
  qf[142] *= k_f;
  qr[142] *= k_f * exp(-(g_RT[4] - g_RT[12] - g_RT[14] + g_RT[22]));
  // reaction 110:  C2H3 + OH <=> C2H2 + H2O
  k_f = 5000000;
  qf[143] *= k_f;
  qr[143] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[22] + g_RT[23]));
  // reaction 111:  C2H4 + OH <=> C2H3 + H2O
  k_f = 3.6 * exp((2) * logT - (1258.0416645118) * invT);
  qf[144] *= k_f;
  qr[144] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[23] + g_RT[24]));
  // reaction 112:  C2H6 + OH <=> C2H5 + H2O
  k_f = 3.54 * exp((2.12) * logT - (437.798499250106) * invT);
  qf[145] *= k_f;
  qr[145] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[25] + g_RT[26]));
  // reaction 113:  CH2CO + OH <=> H2O + HCCO
  k_f = 7500000 * exp(-(1006.43333160944) * invT);
  qf[146] *= k_f;
  qr[146] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[27] + g_RT[28]));
  // reaction 114:  2 HO2 <=> H2O2 + O2
  k_f = 130000 * exp(-(-820.243165261693) * invT);
  qf[147] *= k_f;
  qr[147] *= k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[6] - g_RT[7]));
  // reaction 115:  2 HO2 <=> H2O2 + O2
  k_f = 420000000 * exp(-(6038.59998965664) * invT);
  qf[148] *= k_f;
  qr[148] *= k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[6] - g_RT[7]));
  // reaction 116:  CH2 + HO2 <=> CH2O + OH
  k_f = 20000000;
  qf[149] *= k_f;
  qr[149] *= k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[10] - g_RT[17]));
  // reaction 117:  CH3 + HO2 <=> CH4 + O2
  k_f = 1000000;
  qf[150] *= k_f;
  qr[150] *= k_f * exp(-(-g_RT[3] + g_RT[6] + g_RT[12] - g_RT[13]));
  // reaction 118:  CH3 + HO2 <=> CH3O + OH
  k_f = 37800000;
  qf[151] *= k_f;
  qr[151] *= k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[12] - g_RT[19]));
  // reaction 119:  CO + HO2 <=> CO2 + OH
  k_f = 150000000 * exp(-(11875.9133129914) * invT);
  qf[152] *= k_f;
  qr[152] *= k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[14] - g_RT[15]));
  // reaction 120:  CH2O + HO2 <=> H2O2 + HCO
  k_f = 5.6 * exp((2) * logT - (6038.59998965664) * invT);
  qf[153] *= k_f;
  qr[153] *= k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[16] + g_RT[17]));
  // reaction 121:  C + O2 <=> CO + O
  k_f = 58000000 * exp(-(289.852799503519) * invT);
  qf[154] *= k_f;
  qr[154] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[8] - g_RT[14]));
  // reaction 122:  C + CH2 <=> C2H + H
  k_f = 50000000;
  qf[155] *= k_f;
  qr[155] *= k_f * exp(-(-g_RT[1] + g_RT[8] + g_RT[10] - g_RT[21]));
  // reaction 123:  C + CH3 <=> C2H2 + H
  k_f = 50000000;
  qf[156] *= k_f;
  qr[156] *= k_f * exp(-(-g_RT[1] + g_RT[8] + g_RT[12] - g_RT[22]));
  // reaction 124:  CH + O2 <=> HCO + O
  k_f = 67100000;
  qf[157] *= k_f;
  qr[157] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[9] - g_RT[16]));
  // reaction 125:  CH + H2 <=> CH2 + H
  k_f = 108000000 * exp(-(1565.00383065268) * invT);
  qf[158] *= k_f;
  qr[158] *= k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[9] - g_RT[10]));
  // reaction 126:  CH + H2O <=> CH2O + H
  k_f = 5710000 * exp(-(-379.928582682563) * invT);
  qf[159] *= k_f;
  qr[159] *= k_f * exp(-(-g_RT[1] + g_RT[5] + g_RT[9] - g_RT[17]));
  // reaction 127:  CH + CH2 <=> C2H2 + H
  k_f = 40000000;
  qf[160] *= k_f;
  qr[160] *= k_f * exp(-(-g_RT[1] + g_RT[9] + g_RT[10] - g_RT[22]));
  // reaction 128:  CH + CH3 <=> C2H3 + H
  k_f = 30000000;
  qf[161] *= k_f;
  qr[161] *= k_f * exp(-(-g_RT[1] + g_RT[9] + g_RT[12] - g_RT[23]));
  // reaction 129:  CH + CH4 <=> C2H4 + H
  k_f = 60000000;
  qf[162] *= k_f;
  qr[162] *= k_f * exp(-(-g_RT[1] + g_RT[9] + g_RT[13] - g_RT[24]));
  // reaction 130:  CH + CO (+M) <=> HCCO (+M)
  k_f = 50000000;
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  redP = Corr / k_f * 2.69e+16 * exp(-3.74 * logT - (974.227464997937) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.4243) * exp(-T * 0.00421940928270042) +
    0.5757 * exp(-T * 0.000605326876513317) + exp(-5069 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[15] *= Corr * k_f;
  qr[15] *= Corr * k_f * exp(-(g_RT[9] + g_RT[14] - g_RT[27])) * (refC);
  // reaction 131:  CH + CO2 <=> CO + HCO
  k_f = 190000000 * exp(-(7946.79758638813) * invT);
  qf[163] *= k_f;
  qr[163] *= k_f * exp(-(g_RT[9] - g_RT[14] + g_RT[15] - g_RT[16]));
  // reaction 132:  CH + CH2O <=> CH2CO + H
  k_f = 94600000 * exp(-(-259.156582889431) * invT);
  qf[164] *= k_f;
  qr[164] *= k_f * exp(-(-g_RT[1] + g_RT[9] + g_RT[17] - g_RT[28]));
  // reaction 133:  CH + HCCO <=> C2H2 + CO
  k_f = 50000000;
  qf[165] *= k_f;
  qr[165] *= k_f * exp(-(g_RT[9] - g_RT[14] - g_RT[22] + g_RT[27]));
  // reaction 134:  CH2 + O2 => CO + H + OH
  k_f = 5000000 * exp(-(754.82499870708) * invT);
  qf[166] *= k_f;
  qr[166] *= k_f * exp(-(-g_RT[1] + g_RT[3] - g_RT[4] + g_RT[10] - g_RT[14])) *
             (refCinv);
  // reaction 135:  CH2 + H2 <=> CH3 + H
  k_f = 0.5 * exp((2) * logT - (3638.25649376812) * invT);
  qf[167] *= k_f;
  qr[167] *= k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[10] - g_RT[12]));
  // reaction 136:  2 CH2 <=> C2H2 + H2
  k_f = 1600000000 * exp(-(6010.41985637157) * invT);
  qf[168] *= k_f;
  qr[168] *= k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[10] - g_RT[22]));
  // reaction 137:  CH2 + CH3 <=> C2H4 + H
  k_f = 40000000;
  qf[169] *= k_f;
  qr[169] *= k_f * exp(-(-g_RT[1] + g_RT[10] + g_RT[12] - g_RT[24]));
  // reaction 138:  CH2 + CH4 <=> 2 CH3
  k_f = 2.46 * exp((2) * logT - (4161.60182620503) * invT);
  qf[170] *= k_f;
  qr[170] *= k_f * exp(-(g_RT[10] - 2.000000 * g_RT[12] + g_RT[13]));
  // reaction 139:  CH2 + CO (+M) <=> CH2CO (+M)
  k_f = 810000 * exp((0.5) * logT - (2269.50716277929) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  redP = Corr / k_f * 2.69e+21 * exp(-5.11 * logT - (3570.32224388449) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.4093) * exp(-T * 0.00363636363636364) +
    0.5907 * exp(-T * 0.000815660685154976) + exp(-5185 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[16] *= Corr * k_f;
  qr[16] *= Corr * k_f * exp(-(g_RT[10] + g_RT[14] - g_RT[28])) * (refC);
  // reaction 140:  CH2 + HCCO <=> C2H3 + CO
  k_f = 30000000;
  qf[171] *= k_f;
  qr[171] *= k_f * exp(-(g_RT[10] - g_RT[14] - g_RT[23] + g_RT[27]));
  // reaction 141:  CH2(S) + N2 <=> CH2 + N2
  k_f = 15000000 * exp(-(301.929999482832) * invT);
  qf[172] *= k_f;
  qr[172] *= k_f * exp(-(-g_RT[10] + g_RT[11] + g_RT[47] - g_RT[47]));
  // reaction 142:  AR + CH2(S) <=> AR + CH2
  k_f = 9000000 * exp(-(301.929999482832) * invT);
  qf[173] *= k_f;
  qr[173] *= k_f * exp(-(-g_RT[10] + g_RT[11] + g_RT[48] - g_RT[48]));
  // reaction 143:  CH2(S) + O2 <=> CO + H + OH
  k_f = 28000000;
  qf[174] *= k_f;
  qr[174] *= k_f * exp(-(-g_RT[1] + g_RT[3] - g_RT[4] + g_RT[11] - g_RT[14])) *
             (refCinv);
  // reaction 144:  CH2(S) + O2 <=> CO + H2O
  k_f = 12000000;
  qf[175] *= k_f;
  qr[175] *= k_f * exp(-(g_RT[3] - g_RT[5] + g_RT[11] - g_RT[14]));
  // reaction 145:  CH2(S) + H2 <=> CH3 + H
  k_f = 70000000;
  qf[176] *= k_f;
  qr[176] *= k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[11] - g_RT[12]));
  // reaction 146:  CH2(S) + H2O (+M) <=> CH3OH (+M)
  k_f = 482000000000 * exp((-1.16) * logT - (576.183082346404) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26];
  redP = Corr / k_f * 1.88e+26 * exp(-6.36 * logT - (2536.21199565579) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.3973) * exp(-T * 0.00480769230769231) +
    0.6027 * exp(-T * 0.000254971953085161) + exp(-10180 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[17] *= Corr * k_f;
  qr[17] *= Corr * k_f * exp(-(g_RT[5] + g_RT[11] - g_RT[20])) * (refC);
  // reaction 147:  CH2(S) + H2O <=> CH2 + H2O
  k_f = 30000000;
  qf[177] *= k_f;
  qr[177] *= k_f * exp(-(g_RT[5] - g_RT[5] - g_RT[10] + g_RT[11]));
  // reaction 148:  CH2(S) + CH3 <=> C2H4 + H
  k_f = 12000000 * exp(-(-286.83349950869) * invT);
  qf[178] *= k_f;
  qr[178] *= k_f * exp(-(-g_RT[1] + g_RT[11] + g_RT[12] - g_RT[24]));
  // reaction 149:  CH2(S) + CH4 <=> 2 CH3
  k_f = 16000000 * exp(-(-286.83349950869) * invT);
  qf[179] *= k_f;
  qr[179] *= k_f * exp(-(g_RT[11] - 2.000000 * g_RT[12] + g_RT[13]));
  // reaction 150:  CH2(S) + CO <=> CH2 + CO
  k_f = 9000000;
  qf[180] *= k_f;
  qr[180] *= k_f * exp(-(-g_RT[10] + g_RT[11] + g_RT[14] - g_RT[14]));
  // reaction 151:  CH2(S) + CO2 <=> CH2 + CO2
  k_f = 7000000;
  qf[181] *= k_f;
  qr[181] *= k_f * exp(-(-g_RT[10] + g_RT[11] + g_RT[15] - g_RT[15]));
  // reaction 152:  CH2(S) + CO2 <=> CH2O + CO
  k_f = 14000000;
  qf[182] *= k_f;
  qr[182] *= k_f * exp(-(g_RT[11] - g_RT[14] + g_RT[15] - g_RT[17]));
  // reaction 153:  C2H6 + CH2(S) <=> C2H5 + CH3
  k_f = 40000000 * exp(-(-276.769166192596) * invT);
  qf[183] *= k_f;
  qr[183] *= k_f * exp(-(g_RT[11] - g_RT[12] - g_RT[25] + g_RT[26]));
  // reaction 154:  CH3 + O2 <=> CH3O + O
  k_f = 35600000 * exp(-(15338.0439737279) * invT);
  qf[184] *= k_f;
  qr[184] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[12] - g_RT[19]));
  // reaction 155:  CH3 + O2 <=> CH2O + OH
  k_f = 2310000 * exp(-(10222.8465658229) * invT);
  qf[185] *= k_f;
  qr[185] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[12] - g_RT[17]));
  // reaction 156:  CH3 + H2O2 <=> CH4 + HO2
  k_f = 0.0245 * exp((2.47) * logT - (2606.66232886845) * invT);
  qf[186] *= k_f;
  qr[186] *= k_f * exp(-(-g_RT[6] + g_RT[7] + g_RT[12] - g_RT[13]));
  // reaction 157:  2 CH3 (+M) <=> C2H6 (+M)
  k_f = 67700000000 * exp((-1.18) * logT - (329.103699436287) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  redP = Corr / k_f * 3.4e+29 * exp(-7.03 * logT - (1389.88443095264) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.381) * exp(-T * 0.0136612021857923) +
    0.619 * exp(-T * 0.000847457627118644) + exp(-9999 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[18] *= Corr * k_f;
  qr[18] *= Corr * k_f * exp(-(2.000000 * g_RT[12] - g_RT[26])) * (refC);
  // reaction 158:  2 CH3 <=> C2H5 + H
  k_f = 6840000 * exp((0.1) * logT - (5334.09665753003) * invT);
  qf[187] *= k_f;
  qr[187] *= k_f * exp(-(-g_RT[1] + 2.000000 * g_RT[12] - g_RT[25]));
  // reaction 159:  CH3 + HCO <=> CH4 + CO
  k_f = 26480000;
  qf[188] *= k_f;
  qr[188] *= k_f * exp(-(g_RT[12] - g_RT[13] - g_RT[14] + g_RT[16]));
  // reaction 160:  CH2O + CH3 <=> CH4 + HCO
  k_f = 0.00332 * exp((2.81) * logT - (2948.84966161566) * invT);
  qf[189] *= k_f;
  qr[189] *= k_f * exp(-(g_RT[12] - g_RT[13] - g_RT[16] + g_RT[17]));
  // reaction 161:  CH3 + CH3OH <=> CH2OH + CH4
  k_f = 30 * exp((1.5) * logT - (5001.97365809891) * invT);
  qf[190] *= k_f;
  qr[190] *= k_f * exp(-(g_RT[12] - g_RT[13] - g_RT[18] + g_RT[20]));
  // reaction 162:  CH3 + CH3OH <=> CH3O + CH4
  k_f = 10 * exp((1.5) * logT - (5001.97365809891) * invT);
  qf[191] *= k_f;
  qr[191] *= k_f * exp(-(g_RT[12] - g_RT[13] - g_RT[19] + g_RT[20]));
  // reaction 163:  C2H4 + CH3 <=> C2H3 + CH4
  k_f = 0.227 * exp((2) * logT - (4629.59332540342) * invT);
  qf[192] *= k_f;
  qr[192] *= k_f * exp(-(g_RT[12] - g_RT[13] - g_RT[23] + g_RT[24]));
  // reaction 164:  C2H6 + CH3 <=> C2H5 + CH4
  k_f = 6.14 * exp((1.74) * logT - (5258.61415765932) * invT);
  qf[193] *= k_f;
  qr[193] *= k_f * exp(-(g_RT[12] - g_RT[13] - g_RT[25] + g_RT[26]));
  // reaction 165:  HCO + H2O <=> CO + H + H2O
  k_f = 1500000000000 * exp((-1) * logT - (8554.68331868023) * invT);
  qf[44] *= k_f;
  qr[44] *= k_f * exp(-(-g_RT[1] - g_RT[14] + g_RT[16])) * (refCinv);
  // reaction 166:  HCO + M <=> CO + H + M
  k_f = 187000000000 * exp((-1) * logT - (8554.68331868023) * invT);
  Corr = mixture + sc[0] + (-1) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26];
  qf[45] *= Corr * k_f;
  qr[45] *= Corr * k_f * exp(-(-g_RT[1] - g_RT[14] + g_RT[16])) * (refCinv);
  // reaction 167:  HCO + O2 <=> CO + HO2
  k_f = 13450000 * exp(-(201.286666321888) * invT);
  qf[194] *= k_f;
  qr[194] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[14] + g_RT[16]));
  // reaction 168:  CH2OH + O2 <=> CH2O + HO2
  k_f = 18000000 * exp(-(452.894999224248) * invT);
  qf[195] *= k_f;
  qr[195] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[17] + g_RT[18]));
  // reaction 169:  CH3O + O2 <=> CH2O + HO2
  k_f = 4.28e-19 * exp((7.6) * logT - (-1776.35483029066) * invT);
  qf[196] *= k_f;
  qr[196] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[17] + g_RT[19]));
  // reaction 170:  C2H + O2 <=> CO + HCO
  k_f = 10000000 * exp(-(-379.928582682563) * invT);
  qf[197] *= k_f;
  qr[197] *= k_f * exp(-(g_RT[3] - g_RT[14] - g_RT[16] + g_RT[21]));
  // reaction 171:  C2H + H2 <=> C2H2 + H
  k_f = 56800 * exp((0.9) * logT - (1002.91081494881) * invT);
  qf[198] *= k_f;
  qr[198] *= k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[21] - g_RT[22]));
  // reaction 172:  C2H3 + O2 <=> CH2O + HCO
  k_f = 45800000000 * exp((-1.39) * logT - (510.76491579179) * invT);
  qf[199] *= k_f;
  qr[199] *= k_f * exp(-(g_RT[3] - g_RT[16] - g_RT[17] + g_RT[23]));
  // reaction 173:  C2H4 (+M) <=> C2H2 + H2 (+M)
  k_f = 8000000000000 * exp((0.44) * logT - (43664.1100918755) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  redP = Corr / k_f * 1.58e+45 * exp(-9.3 * logT - (49214.5899157016) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2655) * exp(-T * 0.00555555555555556) +
    0.7345 * exp(-T * 0.000966183574879227) + exp(-5417 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[19] *= Corr * k_f;
  qr[19] *= Corr * k_f * exp(-(-g_RT[0] - g_RT[22] + g_RT[24])) * (refCinv);
  // reaction 174:  C2H5 + O2 <=> C2H4 + HO2
  k_f = 840000 * exp(-(1949.96457999329) * invT);
  qf[200] *= k_f;
  qr[200] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[24] + g_RT[25]));
  // reaction 175:  HCCO + O2 <=> 2 CO + OH
  k_f = 3200000 * exp(-(429.747032597231) * invT);
  qf[201] *= k_f;
  qr[201] *= k_f * exp(-(g_RT[3] - g_RT[4] - 2.000000 * g_RT[14] + g_RT[27])) *
             (refCinv);
  // reaction 176:  2 HCCO <=> C2H2 + 2 CO
  k_f = 10000000;
  qf[202] *= k_f;
  qr[202] *= k_f *
             exp(-(-2.000000 * g_RT[14] - g_RT[22] + 2.000000 * g_RT[27])) *
             (refCinv);
  // reaction 177:  N + NO <=> N2 + O
  k_f = 27000000 * exp(-(178.641916360675) * invT);
  qf[203] *= k_f;
  qr[203] *= k_f * exp(-(-g_RT[2] + g_RT[30] + g_RT[35] - g_RT[47]));
  // reaction 178:  N + O2 <=> NO + O
  k_f = 9000 * exp((1) * logT - (3270.90832773068) * invT);
  qf[204] *= k_f;
  qr[204] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[30] - g_RT[35]));
  // reaction 179:  N + OH <=> H + NO
  k_f = 33600000 * exp(-(193.738416334817) * invT);
  qf[205] *= k_f;
  qr[205] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[30] - g_RT[35]));
  // reaction 180:  N2O + O <=> N2 + O2
  k_f = 1400000 * exp(-(5439.77215734902) * invT);
  qf[206] *= k_f;
  qr[206] *= k_f * exp(-(g_RT[2] - g_RT[3] + g_RT[37] - g_RT[47]));
  // reaction 181:  N2O + O <=> 2 NO
  k_f = 29000000 * exp(-(11649.4658133793) * invT);
  qf[207] *= k_f;
  qr[207] *= k_f * exp(-(g_RT[2] - 2.000000 * g_RT[35] + g_RT[37]));
  // reaction 182:  H + N2O <=> N2 + OH
  k_f = 387000000 * exp(-(9500.73065039311) * invT);
  qf[208] *= k_f;
  qr[208] *= k_f * exp(-(g_RT[1] - g_RT[4] + g_RT[37] - g_RT[47]));
  // reaction 183:  N2O + OH <=> HO2 + N2
  k_f = 2000000 * exp(-(10597.7429818474) * invT);
  qf[209] *= k_f;
  qr[209] *= k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[37] - g_RT[47]));
  // reaction 184:  N2O (+M) <=> N2 + O (+M)
  k_f = 79100000000 * exp(-(28190.1976183804) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.375) * sc[48];
  redP = Corr / k_f * 637000000 * exp(-(28502.1919511793) * invT);
  Corr = redP / (1. + redP);
  qf[27] *= Corr * k_f;
  qr[27] *= Corr * k_f * exp(-(-g_RT[2] + g_RT[37] - g_RT[47])) * (refCinv);
  // reaction 185:  HO2 + NO <=> NO2 + OH
  k_f = 2110000 * exp(-(-241.543999586265) * invT);
  qf[210] *= k_f;
  qr[210] *= k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[35] - g_RT[36]));
  // reaction 186:  NO + O + M <=> NO2 + M
  k_f = 106000000 * exp((-1.41) * logT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  qf[46] *= Corr * k_f;
  qr[46] *= Corr * k_f * exp(-(g_RT[2] + g_RT[35] - g_RT[36])) * (refC);
  // reaction 187:  NO2 + O <=> NO + O2
  k_f = 3900000 * exp(-(-120.771999793133) * invT);
  qf[211] *= k_f;
  qr[211] *= k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[35] + g_RT[36]));
  // reaction 188:  H + NO2 <=> NO + OH
  k_f = 132000000 * exp(-(181.157999689699) * invT);
  qf[212] *= k_f;
  qr[212] *= k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[35] + g_RT[36]));
  // reaction 189:  NH + O <=> H + NO
  k_f = 40000000;
  qf[213] *= k_f;
  qr[213] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[31] - g_RT[35]));
  // reaction 190:  H + NH <=> H2 + N
  k_f = 32000000 * exp(-(166.061499715557) * invT);
  qf[214] *= k_f;
  qr[214] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[30] + g_RT[31]));
  // reaction 191:  NH + OH <=> H + HNO
  k_f = 20000000;
  qf[215] *= k_f;
  qr[215] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[31] - g_RT[38]));
  // reaction 192:  NH + OH <=> H2O + N
  k_f = 2000 * exp((1.2) * logT);
  qf[216] *= k_f;
  qr[216] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[30] + g_RT[31]));
  // reaction 193:  NH + O2 <=> HNO + O
  k_f = 0.461 * exp((2) * logT - (3270.90832773068) * invT);
  qf[217] *= k_f;
  qr[217] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[31] - g_RT[38]));
  // reaction 194:  NH + O2 <=> NO + OH
  k_f = 1.28 * exp((1.5) * logT - (50.321666580472) * invT);
  qf[218] *= k_f;
  qr[218] *= k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[31] - g_RT[35]));
  // reaction 195:  N + NH <=> H + N2
  k_f = 15000000;
  qf[219] *= k_f;
  qr[219] *= k_f * exp(-(-g_RT[1] + g_RT[30] + g_RT[31] - g_RT[47]));
  // reaction 196:  H2O + NH <=> H2 + HNO
  k_f = 20000000 * exp(-(6969.55082139537) * invT);
  qf[220] *= k_f;
  qr[220] *= k_f * exp(-(-g_RT[0] + g_RT[5] + g_RT[31] - g_RT[38]));
  // reaction 197:  NH + NO <=> N2 + OH
  k_f = 21600000 * exp((-0.23) * logT);
  qf[221] *= k_f;
  qr[221] *= k_f * exp(-(-g_RT[4] + g_RT[31] + g_RT[35] - g_RT[47]));
  // reaction 198:  NH + NO <=> H + N2O
  k_f = 365000000 * exp((-0.45) * logT);
  qf[222] *= k_f;
  qr[222] *= k_f * exp(-(-g_RT[1] + g_RT[31] + g_RT[35] - g_RT[37]));
  // reaction 199:  NH2 + O <=> NH + OH
  k_f = 3000000;
  qf[223] *= k_f;
  qr[223] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[31] + g_RT[32]));
  // reaction 200:  NH2 + O <=> H + HNO
  k_f = 39000000;
  qf[224] *= k_f;
  qr[224] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[32] - g_RT[38]));
  // reaction 201:  H + NH2 <=> H2 + NH
  k_f = 40000000 * exp(-(1836.74083018723) * invT);
  qf[225] *= k_f;
  qr[225] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[31] + g_RT[32]));
  // reaction 202:  NH2 + OH <=> H2O + NH
  k_f = 90 * exp((1.5) * logT - (-231.479666270171) * invT);
  qf[226] *= k_f;
  qr[226] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[31] + g_RT[32]));
  // reaction 203:  NNH <=> H + N2
  k_f = 330000000;
  qf[227] *= k_f;
  qr[227] *= k_f * exp(-(-g_RT[1] + g_RT[34] - g_RT[47])) * (refCinv);
  // reaction 204:  NNH + M <=> H + N2 + M
  k_f = 130000000 * exp((-0.11) * logT - (2506.0189957075) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  qf[47] *= Corr * k_f;
  qr[47] *= Corr * k_f * exp(-(-g_RT[1] + g_RT[34] - g_RT[47])) * (refCinv);
  // reaction 205:  NNH + O2 <=> HO2 + N2
  k_f = 5000000;
  qf[228] *= k_f;
  qr[228] *= k_f * exp(-(g_RT[3] - g_RT[6] + g_RT[34] - g_RT[47]));
  // reaction 206:  NNH + O <=> N2 + OH
  k_f = 25000000;
  qf[229] *= k_f;
  qr[229] *= k_f * exp(-(g_RT[2] - g_RT[4] + g_RT[34] - g_RT[47]));
  // reaction 207:  NNH + O <=> NH + NO
  k_f = 70000000;
  qf[230] *= k_f;
  qr[230] *= k_f * exp(-(g_RT[2] - g_RT[31] + g_RT[34] - g_RT[35]));
  // reaction 208:  H + NNH <=> H2 + N2
  k_f = 50000000;
  qf[231] *= k_f;
  qr[231] *= k_f * exp(-(-g_RT[0] + g_RT[1] + g_RT[34] - g_RT[47]));
  // reaction 209:  NNH + OH <=> H2O + N2
  k_f = 20000000;
  qf[232] *= k_f;
  qr[232] *= k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[34] - g_RT[47]));
  // reaction 210:  CH3 + NNH <=> CH4 + N2
  k_f = 25000000;
  qf[233] *= k_f;
  qr[233] *= k_f * exp(-(g_RT[12] - g_RT[13] + g_RT[34] - g_RT[47]));
  // reaction 211:  H + NO + M <=> HNO + M
  k_f = 44800000 * exp((-1.32) * logT - (372.380332695493) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  qf[48] *= Corr * k_f;
  qr[48] *= Corr * k_f * exp(-(g_RT[1] + g_RT[35] - g_RT[38])) * (refC);
  // reaction 212:  HNO + O <=> NO + OH
  k_f = 25000000;
  qf[234] *= k_f;
  qr[234] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[35] + g_RT[38]));
  // reaction 213:  H + HNO <=> H2 + NO
  k_f = 900000 * exp((0.72) * logT - (332.122999431115) * invT);
  qf[235] *= k_f;
  qr[235] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[35] + g_RT[38]));
  // reaction 214:  HNO + OH <=> H2O + NO
  k_f = 13 * exp((1.9) * logT - (-478.055832514484) * invT);
  qf[236] *= k_f;
  qr[236] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[35] + g_RT[38]));
  // reaction 215:  HNO + O2 <=> HO2 + NO
  k_f = 10000000 * exp(-(6541.81665546136) * invT);
  qf[237] *= k_f;
  qr[237] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[35] + g_RT[38]));
  // reaction 216:  CN + O <=> CO + N
  k_f = 77000000;
  qf[238] *= k_f;
  qr[238] *= k_f * exp(-(g_RT[2] - g_RT[14] - g_RT[30] + g_RT[39]));
  // reaction 217:  CN + OH <=> H + NCO
  k_f = 40000000;
  qf[239] *= k_f;
  qr[239] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[39] - g_RT[46]));
  // reaction 218:  CN + H2O <=> HCN + OH
  k_f = 8000000 * exp(-(3753.99632690321) * invT);
  qf[240] *= k_f;
  qr[240] *= k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[39] - g_RT[40]));
  // reaction 219:  CN + O2 <=> NCO + O
  k_f = 6140000 * exp(-(-221.415332954077) * invT);
  qf[241] *= k_f;
  qr[241] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[39] - g_RT[46]));
  // reaction 220:  CN + H2 <=> H + HCN
  k_f = 0.295 * exp((2.45) * logT - (1127.20533140257) * invT);
  qf[242] *= k_f;
  qr[242] *= k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[39] - g_RT[40]));
  // reaction 221:  NCO + O <=> CO + NO
  k_f = 23500000;
  qf[243] *= k_f;
  qr[243] *= k_f * exp(-(g_RT[2] - g_RT[14] - g_RT[35] + g_RT[46]));
  // reaction 222:  H + NCO <=> CO + NH
  k_f = 54000000;
  qf[244] *= k_f;
  qr[244] *= k_f * exp(-(g_RT[1] - g_RT[14] - g_RT[31] + g_RT[46]));
  // reaction 223:  NCO + OH <=> CO + H + NO
  k_f = 2500000;
  qf[245] *= k_f;
  qr[245] *= k_f * exp(-(-g_RT[1] + g_RT[4] - g_RT[14] - g_RT[35] + g_RT[46])) *
             (refCinv);
  // reaction 224:  N + NCO <=> CO + N2
  k_f = 20000000;
  qf[246] *= k_f;
  qr[246] *= k_f * exp(-(-g_RT[14] + g_RT[30] + g_RT[46] - g_RT[47]));
  // reaction 225:  NCO + O2 <=> CO2 + NO
  k_f = 2000000 * exp(-(10064.3333160944) * invT);
  qf[247] *= k_f;
  qr[247] *= k_f * exp(-(g_RT[3] - g_RT[15] - g_RT[35] + g_RT[46]));
  // reaction 226:  NCO + M <=> CO + N + M
  k_f = 310000000 * exp(-(27198.8607867451) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  qf[49] *= Corr * k_f;
  qr[49] *= Corr * k_f * exp(-(-g_RT[14] - g_RT[30] + g_RT[46])) * (refCinv);
  // reaction 227:  NCO + NO <=> CO + N2O
  k_f = 190000000000 * exp((-1.52) * logT - (372.380332695493) * invT);
  qf[248] *= k_f;
  qr[248] *= k_f * exp(-(-g_RT[14] + g_RT[35] - g_RT[37] + g_RT[46]));
  // reaction 228:  NCO + NO <=> CO2 + N2
  k_f = 3800000000000 * exp((-2) * logT - (402.573332643776) * invT);
  qf[249] *= k_f;
  qr[249] *= k_f * exp(-(-g_RT[15] + g_RT[35] + g_RT[46] - g_RT[47]));
  // reaction 229:  HCN + M <=> CN + H + M
  k_f = 1.04e+23 * exp((-3.3) * logT - (63707.2298908775) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  qf[50] *= Corr * k_f;
  qr[50] *= Corr * k_f * exp(-(-g_RT[1] - g_RT[39] + g_RT[40])) * (refCinv);
  // reaction 230:  HCN + O <=> H + NCO
  k_f = 0.0203 * exp((2.64) * logT - (2506.0189957075) * invT);
  qf[250] *= k_f;
  qr[250] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[40] - g_RT[46]));
  // reaction 231:  HCN + O <=> CO + NH
  k_f = 0.00507 * exp((2.64) * logT - (2506.0189957075) * invT);
  qf[251] *= k_f;
  qr[251] *= k_f * exp(-(g_RT[2] - g_RT[14] - g_RT[31] + g_RT[40]));
  // reaction 232:  HCN + O <=> CN + OH
  k_f = 3910 * exp((1.58) * logT - (13385.5633104055) * invT);
  qf[252] *= k_f;
  qr[252] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[39] + g_RT[40]));
  // reaction 233:  HCN + OH <=> H + HOCN
  k_f = 1.1 * exp((2.03) * logT - (6728.0068218091) * invT);
  qf[253] *= k_f;
  qr[253] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[40] - g_RT[44]));
  // reaction 234:  HCN + OH <=> H + HNCO
  k_f = 0.0044 * exp((2.26) * logT - (3220.58666115021) * invT);
  qf[254] *= k_f;
  qr[254] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[40] - g_RT[45]));
  // reaction 235:  HCN + OH <=> CO + NH2
  k_f = 0.00016 * exp((2.56) * logT - (4528.94999224248) * invT);
  qf[255] *= k_f;
  qr[255] *= k_f * exp(-(g_RT[4] - g_RT[14] - g_RT[32] + g_RT[40]));
  // reaction 236:  H + HCN (+M) <=> H2CN (+M)
  k_f = 33000000;
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  redP =
    Corr / k_f * 140000000000000 * exp(-3.4 * logT - (956.111665028967) * invT);
  Corr = redP / (1. + redP);
  qf[28] *= Corr * k_f;
  qr[28] *= Corr * k_f * exp(-(g_RT[1] + g_RT[40] - g_RT[41])) * (refC);
  // reaction 237:  H2CN + N <=> CH2 + N2
  k_f = 60000000 * exp(-(201.286666321888) * invT);
  qf[256] *= k_f;
  qr[256] *= k_f * exp(-(-g_RT[10] + g_RT[30] + g_RT[41] - g_RT[47]));
  // reaction 238:  C + N2 <=> CN + N
  k_f = 63000000 * exp(-(23158.0309603332) * invT);
  qf[257] *= k_f;
  qr[257] *= k_f * exp(-(g_RT[8] - g_RT[30] - g_RT[39] + g_RT[47]));
  // reaction 239:  CH + N2 <=> HCN + N
  k_f = 3120 * exp((0.88) * logT - (10129.751482649) * invT);
  qf[258] *= k_f;
  qr[258] *= k_f * exp(-(g_RT[9] - g_RT[30] - g_RT[40] + g_RT[47]));
  // reaction 240:  CH + N2 (+M) <=> HCNN (+M)
  k_f = 3100000 * exp((0.15) * logT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26];
  redP =
    Corr / k_f * 13000000000000 * exp(-3.16 * logT - (372.380332695493) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.333) * exp(-T * 0.00425531914893617) +
    0.667 * exp(-T * 0.000472366556447804) + exp(-4536 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[20] *= Corr * k_f;
  qr[20] *= Corr * k_f * exp(-(g_RT[9] - g_RT[42] + g_RT[47])) * (refC);
  // reaction 241:  CH2 + N2 <=> HCN + NH
  k_f = 10000000 * exp(-(37238.0332695493) * invT);
  qf[259] *= k_f;
  qr[259] *= k_f * exp(-(g_RT[10] - g_RT[31] - g_RT[40] + g_RT[47]));
  // reaction 242:  CH2(S) + N2 <=> HCN + NH
  k_f = 100000 * exp(-(32709.0832773068) * invT);
  qf[260] *= k_f;
  qr[260] *= k_f * exp(-(g_RT[11] - g_RT[31] - g_RT[40] + g_RT[47]));
  // reaction 243:  C + NO <=> CN + O
  k_f = 19000000;
  qf[261] *= k_f;
  qr[261] *= k_f * exp(-(-g_RT[2] + g_RT[8] + g_RT[35] - g_RT[39]));
  // reaction 244:  C + NO <=> CO + N
  k_f = 29000000;
  qf[262] *= k_f;
  qr[262] *= k_f * exp(-(g_RT[8] - g_RT[14] - g_RT[30] + g_RT[35]));
  // reaction 245:  CH + NO <=> HCN + O
  k_f = 41000000;
  qf[263] *= k_f;
  qr[263] *= k_f * exp(-(-g_RT[2] + g_RT[9] + g_RT[35] - g_RT[40]));
  // reaction 246:  CH + NO <=> H + NCO
  k_f = 16200000;
  qf[264] *= k_f;
  qr[264] *= k_f * exp(-(-g_RT[1] + g_RT[9] + g_RT[35] - g_RT[46]));
  // reaction 247:  CH + NO <=> HCO + N
  k_f = 24600000;
  qf[265] *= k_f;
  qr[265] *= k_f * exp(-(g_RT[9] - g_RT[16] - g_RT[30] + g_RT[35]));
  // reaction 248:  CH2 + NO <=> H + HNCO
  k_f = 310000000000 * exp((-1.38) * logT - (639.085165571994) * invT);
  qf[266] *= k_f;
  qr[266] *= k_f * exp(-(-g_RT[1] + g_RT[10] + g_RT[35] - g_RT[45]));
  // reaction 249:  CH2 + NO <=> HCN + OH
  k_f = 290000000 * exp((-0.69) * logT - (382.444666011587) * invT);
  qf[267] *= k_f;
  qr[267] *= k_f * exp(-(-g_RT[4] + g_RT[10] + g_RT[35] - g_RT[40]));
  // reaction 250:  CH2 + NO <=> H + HCNO
  k_f = 38000000 * exp((-0.36) * logT - (291.865666166737) * invT);
  qf[268] *= k_f;
  qr[268] *= k_f * exp(-(-g_RT[1] + g_RT[10] + g_RT[35] - g_RT[43]));
  // reaction 251:  CH2(S) + NO <=> H + HNCO
  k_f = 310000000000 * exp((-1.38) * logT - (639.085165571994) * invT);
  qf[269] *= k_f;
  qr[269] *= k_f * exp(-(-g_RT[1] + g_RT[11] + g_RT[35] - g_RT[45]));
  // reaction 252:  CH2(S) + NO <=> HCN + OH
  k_f = 290000000 * exp((-0.69) * logT - (382.444666011587) * invT);
  qf[270] *= k_f;
  qr[270] *= k_f * exp(-(-g_RT[4] + g_RT[11] + g_RT[35] - g_RT[40]));
  // reaction 253:  CH2(S) + NO <=> H + HCNO
  k_f = 38000000 * exp((-0.36) * logT - (291.865666166737) * invT);
  qf[271] *= k_f;
  qr[271] *= k_f * exp(-(-g_RT[1] + g_RT[11] + g_RT[35] - g_RT[43]));
  // reaction 254:  CH3 + NO <=> H2O + HCN
  k_f = 96000000 * exp(-(14492.6399751759) * invT);
  qf[272] *= k_f;
  qr[272] *= k_f * exp(-(-g_RT[5] + g_RT[12] + g_RT[35] - g_RT[40]));
  // reaction 255:  CH3 + NO <=> H2CN + OH
  k_f = 1000000 * exp(-(10944.9624812527) * invT);
  qf[273] *= k_f;
  qr[273] *= k_f * exp(-(-g_RT[4] + g_RT[12] + g_RT[35] - g_RT[41]));
  // reaction 256:  HCNN + O <=> CO + H + N2
  k_f = 22000000;
  qf[274] *= k_f;
  qr[274] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[14] + g_RT[42] - g_RT[47])) *
             (refCinv);
  // reaction 257:  HCNN + O <=> HCN + NO
  k_f = 2000000;
  qf[275] *= k_f;
  qr[275] *= k_f * exp(-(g_RT[2] - g_RT[35] - g_RT[40] + g_RT[42]));
  // reaction 258:  HCNN + O2 <=> HCO + N2 + O
  k_f = 12000000;
  qf[276] *= k_f;
  qr[276] *= k_f * exp(-(-g_RT[2] + g_RT[3] - g_RT[16] + g_RT[42] - g_RT[47])) *
             (refCinv);
  // reaction 259:  HCNN + OH <=> H + HCO + N2
  k_f = 12000000;
  qf[277] *= k_f;
  qr[277] *= k_f * exp(-(-g_RT[1] + g_RT[4] - g_RT[16] + g_RT[42] - g_RT[47])) *
             (refCinv);
  // reaction 260:  H + HCNN <=> CH2 + N2
  k_f = 100000000;
  qf[278] *= k_f;
  qr[278] *= k_f * exp(-(g_RT[1] - g_RT[10] + g_RT[42] - g_RT[47]));
  // reaction 261:  HNCO + O <=> CO2 + NH
  k_f = 98 * exp((1.41) * logT - (4277.34165934012) * invT);
  qf[279] *= k_f;
  qr[279] *= k_f * exp(-(g_RT[2] - g_RT[15] - g_RT[31] + g_RT[45]));
  // reaction 262:  HNCO + O <=> CO + HNO
  k_f = 150 * exp((1.57) * logT - (22141.5332954077) * invT);
  qf[280] *= k_f;
  qr[280] *= k_f * exp(-(g_RT[2] - g_RT[14] - g_RT[38] + g_RT[45]));
  // reaction 263:  HNCO + O <=> NCO + OH
  k_f = 2.2 * exp((2.11) * logT - (5736.6699901738) * invT);
  qf[281] *= k_f;
  qr[281] *= k_f * exp(-(g_RT[2] - g_RT[4] + g_RT[45] - g_RT[46]));
  // reaction 264:  H + HNCO <=> CO + NH2
  k_f = 22.5 * exp((1.7) * logT - (1912.22333005793) * invT);
  qf[282] *= k_f;
  qr[282] *= k_f * exp(-(g_RT[1] - g_RT[14] - g_RT[32] + g_RT[45]));
  // reaction 265:  H + HNCO <=> H2 + NCO
  k_f = 0.105 * exp((2.5) * logT - (6692.78165520277) * invT);
  qf[283] *= k_f;
  qr[283] *= k_f * exp(-(-g_RT[0] + g_RT[1] + g_RT[45] - g_RT[46]));
  // reaction 266:  HNCO + OH <=> H2O + NCO
  k_f = 33 * exp((1.5) * logT - (1811.57999689699) * invT);
  qf[284] *= k_f;
  qr[284] *= k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[45] - g_RT[46]));
  // reaction 267:  HNCO + OH <=> CO2 + NH2
  k_f = 3.3 * exp((1.5) * logT - (1811.57999689699) * invT);
  qf[285] *= k_f;
  qr[285] *= k_f * exp(-(g_RT[4] - g_RT[15] - g_RT[32] + g_RT[45]));
  // reaction 268:  HNCO + M <=> CO + NH + M
  k_f = 11800000000 * exp(-(42632.5159269759) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  qf[51] *= Corr * k_f;
  qr[51] *= Corr * k_f * exp(-(-g_RT[14] - g_RT[31] + g_RT[45])) * (refCinv);
  // reaction 269:  H + HCNO <=> H + HNCO
  k_f = 2100000000 * exp((-0.69) * logT - (1434.16749754345) * invT);
  qf[286] *= k_f;
  qr[286] *= k_f * exp(-(g_RT[1] - g_RT[1] + g_RT[43] - g_RT[45]));
  // reaction 270:  H + HCNO <=> HCN + OH
  k_f = 270000 * exp((0.18) * logT - (1066.81933150601) * invT);
  qf[287] *= k_f;
  qr[287] *= k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[40] + g_RT[43]));
  // reaction 271:  H + HCNO <=> CO + NH2
  k_f = 170000000 * exp((-0.75) * logT - (1454.29616417564) * invT);
  qf[288] *= k_f;
  qr[288] *= k_f * exp(-(g_RT[1] - g_RT[14] - g_RT[32] + g_RT[43]));
  // reaction 272:  H + HOCN <=> H + HNCO
  k_f = 20 * exp((2) * logT - (1006.43333160944) * invT);
  qf[289] *= k_f;
  qr[289] *= k_f * exp(-(g_RT[1] - g_RT[1] + g_RT[44] - g_RT[45]));
  // reaction 273:  HCCO + NO <=> CO + HCNO
  k_f = 9000000;
  qf[290] *= k_f;
  qr[290] *= k_f * exp(-(-g_RT[14] + g_RT[27] + g_RT[35] - g_RT[43]));
  // reaction 274:  CH3 + N <=> H + H2CN
  k_f = 610000000 * exp((-0.31) * logT - (145.932833083369) * invT);
  qf[291] *= k_f;
  qr[291] *= k_f * exp(-(-g_RT[1] + g_RT[12] + g_RT[30] - g_RT[41]));
  // reaction 275:  CH3 + N <=> H2 + HCN
  k_f = 3700000 * exp((0.15) * logT - (-45.2894999224248) * invT);
  qf[292] *= k_f;
  qr[292] *= k_f * exp(-(-g_RT[0] + g_RT[12] + g_RT[30] - g_RT[40]));
  // reaction 276:  H + NH3 <=> H2 + NH2
  k_f = 0.54 * exp((2.4) * logT - (4989.3932414538) * invT);
  qf[293] *= k_f;
  qr[293] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[32] + g_RT[33]));
  // reaction 277:  NH3 + OH <=> H2O + NH2
  k_f = 50 * exp((1.6) * logT - (480.571915843507) * invT);
  qf[294] *= k_f;
  qr[294] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[32] + g_RT[33]));
  // reaction 278:  NH3 + O <=> NH2 + OH
  k_f = 9.4 * exp((1.94) * logT - (3250.77966109849) * invT);
  qf[295] *= k_f;
  qr[295] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[32] + g_RT[33]));
  // reaction 279:  CO2 + NH <=> CO + HNO
  k_f = 10000000 * exp(-(7221.15915429773) * invT);
  qf[296] *= k_f;
  qr[296] *= k_f * exp(-(-g_RT[14] + g_RT[15] + g_RT[31] - g_RT[38]));
  // reaction 280:  CN + NO2 <=> NCO + NO
  k_f = 6160000000 * exp((-0.752) * logT - (173.609749702628) * invT);
  qf[297] *= k_f;
  qr[297] *= k_f * exp(-(-g_RT[35] + g_RT[36] + g_RT[39] - g_RT[46]));
  // reaction 281:  NCO + NO2 <=> CO2 + N2O
  k_f = 3250000 * exp(-(-354.767749392327) * invT);
  qf[298] *= k_f;
  qr[298] *= k_f * exp(-(-g_RT[15] + g_RT[36] - g_RT[37] + g_RT[46]));
  // reaction 282:  CO2 + N <=> CO + NO
  k_f = 3000000 * exp(-(5686.34832359333) * invT);
  qf[299] *= k_f;
  qr[299] *= k_f * exp(-(-g_RT[14] + g_RT[15] + g_RT[30] - g_RT[35]));
  // reaction 283:  CH3 + O => CO + H + H2
  k_f = 33700000;
  qf[300] *= k_f;
  qr[300] *= k_f * exp(-(-g_RT[0] - g_RT[1] + g_RT[2] + g_RT[12] - g_RT[14])) *
             (refCinv);
  // reaction 284:  C2H4 + O <=> CH2CHO + H
  k_f = 6.7 * exp((1.83) * logT - (110.707666477038) * invT);
  qf[301] *= k_f;
  qr[301] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[24] - g_RT[51]));
  // reaction 285:  C2H5 + O <=> CH3CHO + H
  k_f = 109600000;
  qf[302] *= k_f;
  qr[302] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[25] - g_RT[52]));
  // reaction 286:  HO2 + OH <=> H2O + O2
  k_f = 5000000000 * exp(-(8720.74481839579) * invT);
  qf[303] *= k_f;
  qr[303] *= k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[5] + g_RT[6]));
  // reaction 287:  CH3 + OH => CH2O + H2
  k_f = 8000 * exp((0.5) * logT - (-883.145248487283) * invT);
  qf[304] *= k_f;
  qr[304] *= k_f * exp(-(-g_RT[0] + g_RT[4] + g_RT[12] - g_RT[17]));
  // reaction 288:  CH + H2 (+M) <=> CH3 (+M)
  k_f = 1970000 * exp((0.43) * logT - (-186.190166347746) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  redP =
    Corr / k_f * 48200000000000 * exp(-2.8 * logT - (296.897832824785) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.422) * exp(-T * 0.00819672131147541) +
    0.578 * exp(-T * 0.000394477317554241) + exp(-9365 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[21] *= Corr * k_f;
  qr[21] *= Corr * k_f * exp(-(g_RT[0] + g_RT[9] - g_RT[12])) * (refC);
  // reaction 289:  CH2 + O2 => CO2 + 2 H
  k_f = 5800000 * exp(-(754.82499870708) * invT);
  qf[305] *= k_f;
  qr[305] *= k_f * exp(-(-2.000000 * g_RT[1] + g_RT[3] + g_RT[10] - g_RT[15])) *
             (refCinv);
  // reaction 290:  CH2 + O2 <=> CH2O + O
  k_f = 2400000 * exp(-(754.82499870708) * invT);
  qf[306] *= k_f;
  qr[306] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[10] - g_RT[17]));
  // reaction 291:  2 CH2 => C2H2 + 2 H
  k_f = 200000000 * exp(-(5529.84794052807) * invT);
  qf[307] *= k_f;
  qr[307] *= k_f *
             exp(-(-2.000000 * g_RT[1] + 2.000000 * g_RT[10] - g_RT[22])) *
             (refCinv);
  // reaction 292:  CH2(S) + H2O => CH2O + H2
  k_f = 68200 * exp((0.25) * logT - (-470.507582527413) * invT);
  qf[308] *= k_f;
  qr[308] *= k_f * exp(-(-g_RT[0] + g_RT[5] + g_RT[11] - g_RT[17]));
  // reaction 293:  C2H3 + O2 <=> CH2CHO + O
  k_f = 303000 * exp((0.29) * logT - (5.53538332385192) * invT);
  qf[309] *= k_f;
  qr[309] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[23] - g_RT[51]));
  // reaction 294:  C2H3 + O2 <=> C2H2 + HO2
  k_f = 1.337 * exp((1.61) * logT - (-193.235199669012) * invT);
  qf[310] *= k_f;
  qr[310] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[22] + g_RT[23]));
  // reaction 295:  CH3CHO + O <=> CH2CHO + OH
  k_f = 2920000 * exp(-(909.815731774933) * invT);
  qf[311] *= k_f;
  qr[311] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[51] + g_RT[52]));
  // reaction 296:  CH3CHO + O => CH3 + CO + OH
  k_f = 2920000 * exp(-(909.815731774933) * invT);
  qf[312] *= k_f;
  qr[312] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[12] - g_RT[14] + g_RT[52])) *
             (refCinv);
  // reaction 297:  CH3CHO + O2 => CH3 + CO + HO2
  k_f = 30100000 * exp(-(19700.9324662548) * invT);
  qf[313] *= k_f;
  qr[313] *= k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[12] - g_RT[14] + g_RT[52])) *
             (refCinv);
  // reaction 298:  CH3CHO + H <=> CH2CHO + H2
  k_f = 2050 * exp((1.16) * logT - (1210.23608126035) * invT);
  qf[314] *= k_f;
  qr[314] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[51] + g_RT[52]));
  // reaction 299:  CH3CHO + H => CH3 + CO + H2
  k_f = 2050 * exp((1.16) * logT - (1210.23608126035) * invT);
  qf[315] *= k_f;
  qr[315] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[12] - g_RT[14] + g_RT[52])) *
             (refCinv);
  // reaction 300:  CH3CHO + OH => CH3 + CO + H2O
  k_f = 23430 * exp((0.73) * logT - (-560.080149040653) * invT);
  qf[316] *= k_f;
  qr[316] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[12] - g_RT[14] + g_RT[52])) *
             (refCinv);
  // reaction 301:  CH3CHO + HO2 => CH3 + CO + H2O2
  k_f = 3010000 * exp(-(5999.85230638967) * invT);
  qf[317] *= k_f;
  qr[317] *= k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[12] - g_RT[14] + g_RT[52])) *
             (refCinv);
  // reaction 302:  CH3CHO + CH3 => CH4 + CO + CH3
  k_f = 2.72 * exp((1.77) * logT - (2979.04266156394) * invT);
  qf[52] *= k_f;
  qr[52] *= k_f * exp(-(-g_RT[13] - g_RT[14] + g_RT[52])) * (refCinv);
  // reaction 303:  CH2CO + H (+M) <=> CH2CHO (+M)
  k_f = 486500 * exp((0.422) * logT - (-883.145248487283) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  redP = Corr / k_f * 1.012e+30 * exp(-7.63 * logT - (1939.39703001139) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.535) * exp(-T * 0.00497512437810945) +
    0.465 * exp(-T * 0.000564015792442188) + exp(-5333 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[22] *= Corr * k_f;
  qr[22] *= Corr * k_f * exp(-(g_RT[1] + g_RT[28] - g_RT[51])) * (refC);
  // reaction 304:  CH2CHO + O => CH2 + CO2 + H
  k_f = 150000000;
  qf[318] *= k_f;
  qr[318] *= k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[10] - g_RT[15] + g_RT[51])) *
             (refCinv);
  // reaction 305:  CH2CHO + O2 => CH2O + CO + OH
  k_f = 18100;
  qf[319] *= k_f;
  qr[319] *= k_f * exp(-(g_RT[3] - g_RT[4] - g_RT[14] - g_RT[17] + g_RT[51])) *
             (refCinv);
  // reaction 306:  CH2CHO + O2 => 2 HCO + OH
  k_f = 23500;
  qf[320] *= k_f;
  qr[320] *= k_f * exp(-(g_RT[3] - g_RT[4] - 2.000000 * g_RT[16] + g_RT[51])) *
             (refCinv);
  // reaction 307:  CH2CHO + H <=> CH3 + HCO
  k_f = 22000000;
  qf[321] *= k_f;
  qr[321] *= k_f * exp(-(g_RT[1] - g_RT[12] - g_RT[16] + g_RT[51]));
  // reaction 308:  CH2CHO + H <=> CH2CO + H2
  k_f = 11000000;
  qf[322] *= k_f;
  qr[322] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[28] + g_RT[51]));
  // reaction 309:  CH2CHO + OH <=> CH2CO + H2O
  k_f = 12000000;
  qf[323] *= k_f;
  qr[323] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[28] + g_RT[51]));
  // reaction 310:  CH2CHO + OH <=> CH2OH + HCO
  k_f = 30100000;
  qf[324] *= k_f;
  qr[324] *= k_f * exp(-(g_RT[4] - g_RT[16] - g_RT[18] + g_RT[51]));
  // reaction 311:  C2H5 + CH3 (+M) <=> C3H8 (+M)
  k_f = 9430000;
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  redP = Corr / k_f * 2.71e+62 * exp(-16.82 * logT - (6574.52573873866) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.8473) * exp(-T * 0.00343642611683849) +
    0.1527 * exp(-T * 0.000364697301239971) + exp(-7748 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[23] *= Corr * k_f;
  qr[23] *= Corr * k_f * exp(-(g_RT[12] + g_RT[25] - g_RT[50])) * (refC);
  // reaction 312:  C3H8 + O <=> C3H7 + OH
  k_f = 0.193 * exp((2.68) * logT - (1869.95313013034) * invT);
  qf[325] *= k_f;
  qr[325] *= k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[49] + g_RT[50]));
  // reaction 313:  C3H8 + H <=> C3H7 + H2
  k_f = 1.32 * exp((2.54) * logT - (3399.73179417669) * invT);
  qf[326] *= k_f;
  qr[326] *= k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[49] + g_RT[50]));
  // reaction 314:  C3H8 + OH <=> C3H7 + H2O
  k_f = 31.6 * exp((1.8) * logT - (470.004365861608) * invT);
  qf[327] *= k_f;
  qr[327] *= k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[49] + g_RT[50]));
  // reaction 315:  C3H7 + H2O2 <=> C3H8 + HO2
  k_f = 0.000378 * exp((2.72) * logT - (754.82499870708) * invT);
  qf[328] *= k_f;
  qr[328] *= k_f * exp(-(-g_RT[6] + g_RT[7] + g_RT[49] - g_RT[50]));
  // reaction 316:  C3H8 + CH3 <=> C3H7 + CH4
  k_f = 9.03e-07 * exp((3.65) * logT - (3600.01202716696) * invT);
  qf[329] *= k_f;
  qr[329] *= k_f * exp(-(g_RT[12] - g_RT[13] - g_RT[49] + g_RT[50]));
  // reaction 317:  C2H4 + CH3 (+M) <=> C3H7 (+M)
  k_f = 2.55 * exp((1.6) * logT - (2868.3349950869) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  redP = Corr / k_f * 3e+51 * exp(-14.6 * logT - (9143.44681767176) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.8106) * exp(-T * 0.0036101083032491) +
    0.1894 * exp(-T * 0.000114311842706904) + exp(-7891 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[24] *= Corr * k_f;
  qr[24] *= Corr * k_f * exp(-(g_RT[12] + g_RT[24] - g_RT[49])) * (refC);
  // reaction 318:  C3H7 + O <=> C2H5 + CH2O
  k_f = 96400000;
  qf[330] *= k_f;
  qr[330] *= k_f * exp(-(g_RT[2] - g_RT[17] - g_RT[25] + g_RT[49]));
  // reaction 319:  C3H7 + H (+M) <=> C3H8 (+M)
  k_f = 36130000;
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48];
  redP = Corr / k_f * 4.42e+49 * exp(-13.545 * logT - (5715.0316735442) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.685) * exp(-T * 0.002710027100271) +
    0.315 * exp(-T * 0.00030441400304414) + exp(-6667 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[25] *= Corr * k_f;
  qr[25] *= Corr * k_f * exp(-(g_RT[1] + g_RT[49] - g_RT[50])) * (refC);
  // reaction 320:  C3H7 + H <=> C2H5 + CH3
  k_f = 4.06 * exp((2.19) * logT - (447.8628325662) * invT);
  qf[331] *= k_f;
  qr[331] *= k_f * exp(-(g_RT[1] - g_RT[12] - g_RT[25] + g_RT[49]));
  // reaction 321:  C3H7 + OH <=> C2H5 + CH2OH
  k_f = 24100000;
  qf[332] *= k_f;
  qr[332] *= k_f * exp(-(g_RT[4] - g_RT[18] - g_RT[25] + g_RT[49]));
  // reaction 322:  C3H7 + HO2 <=> C3H8 + O2
  k_f = 25500 * exp((0.255) * logT - (-474.533315853851) * invT);
  qf[333] *= k_f;
  qr[333] *= k_f * exp(-(-g_RT[3] + g_RT[6] + g_RT[49] - g_RT[50]));
  // reaction 323:  C3H7 + HO2 => C2H5 + CH2O + OH
  k_f = 24100000;
  qf[334] *= k_f;
  qr[334] *= k_f * exp(-(-g_RT[4] + g_RT[6] - g_RT[17] - g_RT[25] + g_RT[49])) *
             (refCinv);
  // reaction 324:  C3H7 + CH3 <=> 2 C2H5
  k_f = 19270000 * exp((-0.32) * logT);
  qf[335] *= k_f;
  qr[335] *= k_f * exp(-(g_RT[12] - 2.000000 * g_RT[25] + g_RT[49]));
  // reaction 325:  CH2F + H <=> CH2(S) + HF
  k_f = 110000000;
  qf[336] *= k_f;
  qr[336] *= k_f * exp(-(g_RT[1] - g_RT[11] - g_RT[53] + g_RT[60]));
  // reaction 326:  CH2F + H <=> CHF + H2
  k_f = 50000000;
  qf[337] *= k_f;
  qr[337] *= k_f * exp(-(-g_RT[0] + g_RT[1] + g_RT[60] - g_RT[63]));
  // reaction 327:  CHF3 + H <=> CF3 + H2
  k_f = 7.83 * exp((2.06) * logT - (6189.56498939805) * invT);
  qf[338] *= k_f;
  qr[338] *= k_f * exp(-(-g_RT[0] + g_RT[1] + g_RT[58] - g_RT[62]));
  // reaction 328:  CHF3 + H <=> CH2F2 + F
  k_f = 432 * exp((1.6) * logT - (31697.6177790393) * invT);
  qf[339] *= k_f;
  qr[339] *= k_f * exp(-(g_RT[1] - g_RT[54] - g_RT[57] + g_RT[58]));
  // reaction 329:  CHF + H <=> CH + HF
  k_f = 65000000;
  qf[340] *= k_f;
  qr[340] *= k_f * exp(-(g_RT[1] - g_RT[9] - g_RT[53] + g_RT[63]));
  // reaction 330:  CHF + H <=> CF + H2
  k_f = 230000000;
  qf[341] *= k_f;
  qr[341] *= k_f * exp(-(-g_RT[0] + g_RT[1] + g_RT[63] - g_RT[65]));
  // reaction 331:  CH + HF <=> CF + H2
  k_f = 20000000;
  qf[342] *= k_f;
  qr[342] *= k_f * exp(-(-g_RT[0] + g_RT[9] + g_RT[53] - g_RT[65]));
  // reaction 332:  CO + F + M <=> CFO + M
  k_f = 30900000 * exp((-1.4) * logT - (-245.066516246898) * invT);
  Corr = mixture + sc[0] + (17) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26];
  qf[53] *= Corr * k_f;
  qr[53] *= Corr * k_f * exp(-(g_RT[14] + g_RT[54] - g_RT[69])) * (refC);
  // reaction 333:  CFO + H <=> CO + HF
  k_f = 25000000;
  qf[343] *= k_f;
  qr[343] *= k_f * exp(-(g_RT[1] - g_RT[14] - g_RT[53] + g_RT[69]));
  // reaction 334:  CH2F + O <=> CHFO + H
  k_f = 57000000;
  qf[344] *= k_f;
  qr[344] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[60] - g_RT[68]));
  // reaction 335:  CHF2 + O <=> CF2O + H
  k_f = 37000000;
  qf[345] *= k_f;
  qr[345] *= k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[61] - g_RT[67]));
  // reaction 336:  CF3 + O <=> CF2O + F
  k_f = 15400000;
  qf[346] *= k_f;
  qr[346] *= k_f * exp(-(g_RT[2] - g_RT[54] + g_RT[62] - g_RT[67]));
  // reaction 337:  CH2F + OH <=> CH2O + HF
  k_f = 25000000;
  qf[347] *= k_f;
  qr[347] *= k_f * exp(-(g_RT[4] - g_RT[17] - g_RT[53] + g_RT[60]));
  // reaction 338:  CHF2 + OH <=> CHFO + HF
  k_f = 10000000;
  qf[348] *= k_f;
  qr[348] *= k_f * exp(-(g_RT[4] - g_RT[53] + g_RT[61] - g_RT[68]));
  // reaction 339:  CF3 + OH <=> CF2O + HF
  k_f = 14600000 * exp((-0.06) * logT - (-133.855633104055) * invT);
  qf[349] *= k_f;
  qr[349] *= k_f * exp(-(g_RT[4] - g_RT[53] + g_RT[62] - g_RT[67]));
  // reaction 340:  HF + M <=> F + H + M
  k_f = 31200000 * exp(-(49979.4792477248) * invT);
  Corr = mixture;
  qf[54] *= Corr * k_f;
  qr[54] *= Corr * k_f * exp(-(-g_RT[1] + g_RT[53] - g_RT[54])) * (refCinv);
  // reaction 341:  F + H2 <=> H + HF
  k_f = 2560000 * exp((0.5) * logT - (327.090832773068) * invT);
  qf[350] *= k_f;
  qr[350] *= k_f * exp(-(g_RT[0] - g_RT[1] - g_RT[53] + g_RT[54]));
  // reaction 342:  F + OH <=> HF + O
  k_f = 20000000;
  qf[351] *= k_f;
  qr[351] *= k_f * exp(-(-g_RT[2] + g_RT[4] - g_RT[53] + g_RT[54]));
  // reaction 343:  F + HO2 <=> HF + O2
  k_f = 2890000 * exp((0.5) * logT);
  qf[352] *= k_f;
  qr[352] *= k_f * exp(-(-g_RT[3] + g_RT[6] - g_RT[53] + g_RT[54]));
  // reaction 344:  F + H2O <=> HF + OH
  k_f = 1300 * exp((1.5) * logT);
  qf[353] *= k_f;
  qr[353] *= k_f * exp(-(-g_RT[4] + g_RT[5] - g_RT[53] + g_RT[54]));
  // reaction 345:  F + H2O2 <=> HF + HO2
  k_f = 1730000 * exp((0.5) * logT);
  qf[354] *= k_f;
  qr[354] *= k_f * exp(-(-g_RT[6] + g_RT[7] - g_RT[53] + g_RT[54]));
  // reaction 346:  CH3F (+M) <=> CH2(S) + HF (+M)
  k_f = 100000000000000 * exp(-(42773.4165934012) * invT);
  Corr = mixture + sc[0] + (8) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + sc[53] + (5) * sc[56] + (5) * sc[57] + (5) * sc[58];
  redP = Corr / k_f * 15000000000 * exp(-(33966.6217251528) * invT);
  Corr = redP / (1. + redP);
  qf[29] *= Corr * k_f;
  qr[29] *= Corr * k_f * exp(-(-g_RT[11] - g_RT[53] + g_RT[56])) * (refCinv);
  // reaction 347:  CHF + H2 <=> CH3F
  k_f = 225000000000 * exp((-2.85) * logT - (6541.81665546136) * invT);
  qf[355] *= k_f;
  qr[355] *= k_f * exp(-(g_RT[0] - g_RT[56] + g_RT[63])) * (refC);
  // reaction 348:  CH2F + H <=> CH3F
  k_f = 3.03e+15 * exp((-3.38) * logT - (1741.12966368433) * invT);
  qf[356] *= k_f;
  qr[356] *= k_f * exp(-(g_RT[1] - g_RT[56] + g_RT[60])) * (refC);
  // reaction 349:  CHF + HF + M <=> CH2F2 + M
  k_f = 304000000000000 * exp((-3.26) * logT - (2043.05966316716) * invT);
  Corr = mixture + sc[0] + (8) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + sc[53] + (5) * sc[56] + (5) * sc[57] + (5) * sc[58];
  qf[55] *= Corr * k_f;
  qr[55] *= Corr * k_f * exp(-(g_RT[53] - g_RT[57] + g_RT[63])) * (refC);
  // reaction 350:  CF2 + H2 <=> CH2F2
  k_f = 1.7 * exp((-0.71) * logT - (20581.561631413) * invT);
  qf[357] *= k_f;
  qr[357] *= k_f * exp(-(g_RT[0] - g_RT[57] + g_RT[64])) * (refC);
  // reaction 351:  CHF2 + H <=> CH2F2
  k_f = 2.75 * exp((-0.32) * logT - (3869.73616003829) * invT);
  qf[358] *= k_f;
  qr[358] *= k_f * exp(-(g_RT[1] - g_RT[57] + g_RT[61])) * (refC);
  // reaction 352:  CHF3 + M <=> CF2 + HF + M
  k_f = 3.41e+24 * exp((-4) * logT - (34747.1107738159) * invT);
  Corr = mixture + sc[0] + (8) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + sc[53] + (5) * sc[56] + (5) * sc[57] + (5) * sc[58];
  qf[56] *= Corr * k_f;
  qr[56] *= Corr * k_f * exp(-(-g_RT[53] + g_RT[58] - g_RT[64])) * (refCinv);
  // reaction 353:  CF4 + M <=> CF3 + F + M
  k_f = 9e+28 * exp((-4.64) * logT - (61593.7198944977) * invT);
  Corr = mixture + sc[0] + (8) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (5) * sc[56] + (5) * sc[57] + (5) * sc[58] +
         (5) * sc[59];
  qf[57] *= Corr * k_f;
  qr[57] *= Corr * k_f * exp(-(-g_RT[54] + g_RT[59] - g_RT[62])) * (refCinv);
  // reaction 354:  CH2(S) + HF <=> CHF + H2
  k_f = 20.8 * exp((1.27) * logT - (4191.79482615331) * invT);
  qf[359] *= k_f;
  qr[359] *= k_f * exp(-(-g_RT[0] + g_RT[11] + g_RT[53] - g_RT[63]));
  // reaction 355:  CH3 + F <=> CH2(S) + HF
  k_f = 16200000000 * exp((-0.88) * logT - (-493.65554915443) * invT);
  qf[360] *= k_f;
  qr[360] *= k_f * exp(-(-g_RT[11] + g_RT[12] - g_RT[53] + g_RT[54]));
  // reaction 356:  CH3 + F <=> CH2F + H
  k_f = 1360000 * exp((-0.39) * logT - (-133.352416438251) * invT);
  qf[361] *= k_f;
  qr[361] *= k_f * exp(-(-g_RT[1] + g_RT[12] + g_RT[54] - g_RT[60]));
  // reaction 357:  CHF + HF <=> CF2 + H2
  k_f = 5.77 * exp((1.35) * logT - (9007.57831790448) * invT);
  qf[362] *= k_f;
  qr[362] *= k_f * exp(-(-g_RT[0] + g_RT[53] + g_RT[63] - g_RT[64]));
  // reaction 358:  CHF2 + H <=> CHF + HF
  k_f = 149000000 * exp((-0.11) * logT - (50.8248832462767) * invT);
  qf[363] *= k_f;
  qr[363] *= k_f * exp(-(g_RT[1] - g_RT[53] + g_RT[61] - g_RT[63]));
  // reaction 359:  CHF2 + H <=> CF2 + H2
  k_f = 0.0055 * exp((2.42) * logT - (-211.350999637982) * invT);
  qf[364] *= k_f;
  qr[364] *= k_f * exp(-(-g_RT[0] + g_RT[1] + g_RT[61] - g_RT[64]));
  // reaction 360:  CH2F + F <=> CHF + HF
  k_f = 50000000;
  qf[365] *= k_f;
  qr[365] *= k_f * exp(-(-g_RT[53] + g_RT[54] + g_RT[60] - g_RT[63]));
  // reaction 361:  CF3 + H <=> CF2 + HF
  k_f = 53300000;
  qf[366] *= k_f;
  qr[366] *= k_f * exp(-(g_RT[1] - g_RT[53] + g_RT[62] - g_RT[64]));
  // reaction 362:  CHF2 + F <=> CF2 + HF
  k_f = 30000000;
  qf[367] *= k_f;
  qr[367] *= k_f * exp(-(-g_RT[53] + g_RT[54] + g_RT[61] - g_RT[64]));
  // reaction 363:  CH3F + H <=> CH2F + H2
  k_f = 0.0027 * exp((3) * logT - (2667.04832876501) * invT);
  qf[368] *= k_f;
  qr[368] *= k_f * exp(-(-g_RT[0] + g_RT[1] + g_RT[56] - g_RT[60]));
  // reaction 364:  CH2F2 + H <=> CHF2 + H2
  k_f = 0.00165 * exp((3) * logT - (2818.01332850643) * invT);
  qf[369] *= k_f;
  qr[369] *= k_f * exp(-(-g_RT[0] + g_RT[1] + g_RT[57] - g_RT[61]));
  // reaction 365:  CH3F + H <=> CH3 + HF
  k_f = 275000000 * exp(-(15801.0033062682) * invT);
  qf[370] *= k_f;
  qr[370] *= k_f * exp(-(g_RT[1] - g_RT[12] - g_RT[53] + g_RT[56]));
  // reaction 366:  CH2F2 + H <=> CH2F + HF
  k_f = 55000000 * exp(-(17159.6883039409) * invT);
  qf[371] *= k_f;
  qr[371] *= k_f * exp(-(g_RT[1] - g_RT[53] + g_RT[57] - g_RT[60]));
  // reaction 367:  CHF3 + H <=> CHF2 + HF
  k_f = 211 * exp((1.77) * logT - (20028.0232990278) * invT);
  qf[372] *= k_f;
  qr[372] *= k_f * exp(-(g_RT[1] - g_RT[53] + g_RT[58] - g_RT[61]));
  // reaction 368:  CF4 + H <=> CF3 + HF
  k_f = 3070 * exp((1.58) * logT - (20797.9447977091) * invT);
  qf[373] *= k_f;
  qr[373] *= k_f * exp(-(g_RT[1] - g_RT[53] + g_RT[59] - g_RT[62]));
  // reaction 369:  CF4 + H <=> CHF3 + F
  k_f = 915 * exp((1.45) * logT - (31999.5477785221) * invT);
  qf[374] *= k_f;
  qr[374] *= k_f * exp(-(g_RT[1] - g_RT[54] - g_RT[58] + g_RT[59]));
  // reaction 370:  CH3F + O <=> CH2F + OH
  k_f = 65 * exp((1.5) * logT - (3522.51666063304) * invT);
  qf[375] *= k_f;
  qr[375] *= k_f * exp(-(g_RT[2] - g_RT[4] + g_RT[56] - g_RT[60]));
  // reaction 371:  CH2F2 + O <=> CHF2 + OH
  k_f = 22.5 * exp((1.5) * logT - (3069.62166140879) * invT);
  qf[376] *= k_f;
  qr[376] *= k_f * exp(-(g_RT[2] - g_RT[4] + g_RT[57] - g_RT[61]));
  // reaction 372:  CHF3 + O <=> CF3 + OH
  k_f = 307000000 * exp(-(9535.95581699944) * invT);
  qf[377] *= k_f;
  qr[377] *= k_f * exp(-(g_RT[2] - g_RT[4] + g_RT[58] - g_RT[62]));
  // reaction 373:  CH3F + OH <=> CH2F + H2O
  k_f = 260 * exp((1.5) * logT - (1479.45699746588) * invT);
  qf[378] *= k_f;
  qr[378] *= k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[56] - g_RT[60]));
  // reaction 374:  CH2F2 + OH <=> CHF2 + H2O
  k_f = 28 * exp((1.7) * logT - (1278.17033114399) * invT);
  qf[379] *= k_f;
  qr[379] *= k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[57] - g_RT[61]));
  // reaction 375:  CHF3 + OH <=> CF3 + H2O
  k_f = 12.5 * exp((1.55) * logT - (1846.80516350332) * invT);
  qf[380] *= k_f;
  qr[380] *= k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[58] - g_RT[62]));
  // reaction 376:  CH2F + H2O2 <=> CH3F + HO2
  k_f = 12000 * exp(-(-301.929999482832) * invT);
  qf[381] *= k_f;
  qr[381] *= k_f * exp(-(-g_RT[6] + g_RT[7] - g_RT[56] + g_RT[60]));
  // reaction 377:  CHF2 + H2O2 <=> CH2F2 + HO2
  k_f = 12000 * exp(-(-301.929999482832) * invT);
  qf[382] *= k_f;
  qr[382] *= k_f * exp(-(-g_RT[6] + g_RT[7] - g_RT[57] + g_RT[61]));
  // reaction 378:  CF3 + H2O2 <=> CHF3 + HO2
  k_f = 12000 * exp(-(-301.929999482832) * invT);
  qf[383] *= k_f;
  qr[383] *= k_f * exp(-(-g_RT[6] + g_RT[7] - g_RT[58] + g_RT[62]));
  // reaction 379:  CH3 + CH3F <=> CH2F + CH4
  k_f = 150000 * exp(-(5736.6699901738) * invT);
  qf[384] *= k_f;
  qr[384] *= k_f * exp(-(g_RT[12] - g_RT[13] + g_RT[56] - g_RT[60]));
  // reaction 380:  CH2F2 + CH3 <=> CH4 + CHF2
  k_f = 87000 * exp(-(5132.80999120814) * invT);
  qf[385] *= k_f;
  qr[385] *= k_f * exp(-(g_RT[12] - g_RT[13] + g_RT[57] - g_RT[61]));
  // reaction 381:  CF3 + CH4 <=> CH3 + CHF3
  k_f = 834000 * exp(-(5495.12599058754) * invT);
  qf[386] *= k_f;
  qr[386] *= k_f * exp(-(-g_RT[12] + g_RT[13] - g_RT[58] + g_RT[62]));
  // reaction 382:  C2H3 + CH3F <=> C2H4 + CH2F
  k_f = 150000 * exp(-(5183.13165778861) * invT);
  qf[387] *= k_f;
  qr[387] *= k_f * exp(-(g_RT[23] - g_RT[24] + g_RT[56] - g_RT[60]));
  // reaction 383:  C2H3 + CH2F2 <=> C2H4 + CHF2
  k_f = 90000 * exp(-(4629.59332540342) * invT);
  qf[388] *= k_f;
  qr[388] *= k_f * exp(-(g_RT[23] - g_RT[24] + g_RT[57] - g_RT[61]));
  // reaction 384:  C2H4 + CF3 <=> C2H3 + CHF3
  k_f = 800000 * exp(-(6038.59998965664) * invT);
  qf[389] *= k_f;
  qr[389] *= k_f * exp(-(-g_RT[23] + g_RT[24] - g_RT[58] + g_RT[62]));
  // reaction 385:  CF3 + CH3F <=> CH2F + CHF3
  k_f = 575000 * exp(-(5641.05882367091) * invT);
  qf[390] *= k_f;
  qr[390] *= k_f * exp(-(g_RT[56] - g_RT[58] - g_RT[60] + g_RT[62]));
  // reaction 386:  CH2F + CH2F2 <=> CH3F + CHF2
  k_f = 90000 * exp(-(7045.03332126608) * invT);
  qf[391] *= k_f;
  qr[391] *= k_f * exp(-(-g_RT[56] + g_RT[57] + g_RT[60] - g_RT[61]));
  // reaction 387:  CF3 + CH2F2 <=> CHF2 + CHF3
  k_f = 427000 * exp(-(5686.34832359333) * invT);
  qf[392] *= k_f;
  qr[392] *= k_f * exp(-(g_RT[57] - g_RT[58] - g_RT[61] + g_RT[62]));
  // reaction 388:  CH2F + CH3OH <=> CH3F + CH3O
  k_f = 1.44e-05 * exp((3.1) * logT - (4931.52332488625) * invT);
  qf[393] *= k_f;
  qr[393] *= k_f * exp(-(-g_RT[19] + g_RT[20] - g_RT[56] + g_RT[60]));
  // reaction 389:  CH3OH + CHF2 <=> CH2F2 + CH3O
  k_f = 1.44e-05 * exp((3.1) * logT - (4528.94999224248) * invT);
  qf[394] *= k_f;
  qr[394] *= k_f * exp(-(-g_RT[19] + g_RT[20] - g_RT[57] + g_RT[61]));
  // reaction 390:  CF3 + CH3OH <=> CH3O + CHF3
  k_f = 1.44e-05 * exp((3.1) * logT - (2767.69166192596) * invT);
  qf[395] *= k_f;
  qr[395] *= k_f * exp(-(-g_RT[19] + g_RT[20] - g_RT[58] + g_RT[62]));
  // reaction 391:  CH2F + CH3OH <=> CH2OH + CH3F
  k_f = 3.2e-05 * exp((3.2) * logT - (5032.1666580472) * invT);
  qf[396] *= k_f;
  qr[396] *= k_f * exp(-(-g_RT[18] + g_RT[20] - g_RT[56] + g_RT[60]));
  // reaction 392:  CH3OH + CHF2 <=> CH2F2 + CH2OH
  k_f = 3.2e-05 * exp((3.2) * logT - (4679.91499198389) * invT);
  qf[397] *= k_f;
  qr[397] *= k_f * exp(-(-g_RT[18] + g_RT[20] - g_RT[57] + g_RT[61]));
  // reaction 393:  CF3 + CH3OH <=> CH2OH + CHF3
  k_f = 3.2e-05 * exp((3.2) * logT - (2868.3349950869) * invT);
  qf[398] *= k_f;
  qr[398] *= k_f * exp(-(-g_RT[18] + g_RT[20] - g_RT[58] + g_RT[62]));
  // reaction 394:  CH2F + CH2O <=> CH3F + HCO
  k_f = 0.00554 * exp((2.81) * logT - (4176.69832617917) * invT);
  qf[399] *= k_f;
  qr[399] *= k_f * exp(-(-g_RT[16] + g_RT[17] - g_RT[56] + g_RT[60]));
  // reaction 395:  CH2O + CHF2 <=> CH2F2 + HCO
  k_f = 0.00554 * exp((2.81) * logT - (3925.08999327681) * invT);
  qf[400] *= k_f;
  qr[400] *= k_f * exp(-(-g_RT[16] + g_RT[17] - g_RT[57] + g_RT[61]));
  // reaction 396:  CF3 + CH2O <=> CHF3 + HCO
  k_f = 0.00554 * exp((2.81) * logT - (2314.79666270171) * invT);
  qf[401] *= k_f;
  qr[401] *= k_f * exp(-(-g_RT[16] + g_RT[17] - g_RT[58] + g_RT[62]));
  // reaction 397:  CH2F + HCO <=> CH3F + CO
  k_f = 90000000;
  qf[402] *= k_f;
  qr[402] *= k_f * exp(-(-g_RT[14] + g_RT[16] - g_RT[56] + g_RT[60]));
  // reaction 398:  CHF2 + HCO <=> CH2F2 + CO
  k_f = 90000000;
  qf[403] *= k_f;
  qr[403] *= k_f * exp(-(-g_RT[14] + g_RT[16] - g_RT[57] + g_RT[61]));
  // reaction 399:  CF3 + HCO <=> CHF3 + CO
  k_f = 90000000;
  qf[404] *= k_f;
  qr[404] *= k_f * exp(-(-g_RT[14] + g_RT[16] - g_RT[58] + g_RT[62]));
  // reaction 400:  CH2F + HCO <=> CH2CO + HF
  k_f = 30000000;
  qf[405] *= k_f;
  qr[405] *= k_f * exp(-(g_RT[16] - g_RT[28] - g_RT[53] + g_RT[60]));
  // reaction 401:  CH2F + O2 => CHFO + H + O
  k_f = 2260 * exp((1.14) * logT - (14341.6749754345) * invT);
  qf[406] *= k_f;
  qr[406] *= k_f * exp(-(-g_RT[1] - g_RT[2] + g_RT[3] + g_RT[60] - g_RT[68])) *
             (refCinv);
  // reaction 402:  CHF2 + O2 => CF2O + H + O
  k_f = 2260 * exp((1.14) * logT - (8303.07498577788) * invT);
  qf[407] *= k_f;
  qr[407] *= k_f * exp(-(-g_RT[1] - g_RT[2] + g_RT[3] + g_RT[61] - g_RT[67])) *
             (refCinv);
  // reaction 403:  CF3 + O2 <=> CF3O + O
  k_f = 2260 * exp((1.14) * logT - (10819.1583148015) * invT);
  qf[408] *= k_f;
  qr[408] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[62] - g_RT[66]));
  // reaction 404:  CH2F + HO2 => CHFO + H + OH
  k_f = 15000000;
  qf[409] *= k_f;
  qr[409] *= k_f * exp(-(-g_RT[1] - g_RT[4] + g_RT[6] + g_RT[60] - g_RT[68])) *
             (refCinv);
  // reaction 405:  CHF2 + HO2 => CF2O + H + OH
  k_f = 15000000;
  qf[410] *= k_f;
  qr[410] *= k_f * exp(-(-g_RT[1] - g_RT[4] + g_RT[6] + g_RT[61] - g_RT[67])) *
             (refCinv);
  // reaction 406:  CF3 + HO2 <=> CF3O + OH
  k_f = 10000000;
  qf[411] *= k_f;
  qr[411] *= k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[62] - g_RT[66]));
  // reaction 407:  CH2F + HO2 <=> CH3F + O2
  k_f = 3000000;
  qf[412] *= k_f;
  qr[412] *= k_f * exp(-(-g_RT[3] + g_RT[6] - g_RT[56] + g_RT[60]));
  // reaction 408:  CHF2 + HO2 <=> CH2F2 + O2
  k_f = 3000000;
  qf[413] *= k_f;
  qr[413] *= k_f * exp(-(-g_RT[3] + g_RT[6] - g_RT[57] + g_RT[61]));
  // reaction 409:  CF3 + HO2 <=> CHF3 + O2
  k_f = 2000000;
  qf[414] *= k_f;
  qr[414] *= k_f * exp(-(-g_RT[3] + g_RT[6] - g_RT[58] + g_RT[62]));
  // reaction 410:  CF3O + M <=> CF2O + F + M
  k_f = 9.03e+20 * exp((-3.42) * logT - (10919.8016479624) * invT);
  Corr = mixture;
  qf[58] *= Corr * k_f;
  qr[58] *= Corr * k_f * exp(-(-g_RT[54] + g_RT[66] - g_RT[67])) * (refCinv);
  // reaction 411:  CF3O + H <=> CF2O + HF
  k_f = 100000000;
  qf[415] *= k_f;
  qr[415] *= k_f * exp(-(g_RT[1] - g_RT[53] + g_RT[66] - g_RT[67]));
  // reaction 412:  CF3O + H2 => CF2O + H + HF
  k_f = 10000000 * exp(-(2516.0833290236) * invT);
  qf[416] *= k_f;
  qr[416] *= k_f * exp(-(g_RT[0] - g_RT[1] - g_RT[53] + g_RT[66] - g_RT[67])) *
             (refCinv);
  // reaction 413:  CF3O + H2O => CF2O + HF + OH
  k_f = 10000000 * exp(-(2516.0833290236) * invT);
  qf[417] *= k_f;
  qr[417] *= k_f * exp(-(-g_RT[4] + g_RT[5] - g_RT[53] + g_RT[66] - g_RT[67])) *
             (refCinv);
  // reaction 414:  CF3O + CH4 => CF2O + CH3 + HF
  k_f = 8000000 * exp(-(1157.39833135086) * invT);
  qf[418] *= k_f;
  qr[418] *= k_f *
             exp(-(-g_RT[12] + g_RT[13] - g_RT[53] + g_RT[66] - g_RT[67])) *
             (refCinv);
  // reaction 415:  C2H6 + CF3O => C2H5 + CF2O + HF
  k_f = 12000000 * exp(-(1157.39833135086) * invT);
  qf[419] *= k_f;
  qr[419] *= k_f *
             exp(-(-g_RT[25] + g_RT[26] - g_RT[53] + g_RT[66] - g_RT[67])) *
             (refCinv);
  // reaction 416:  C2H4 + CF3O => C2H3 + CF2O + HF
  k_f = 10000000 * exp(-(2516.0833290236) * invT);
  qf[420] *= k_f;
  qr[420] *= k_f *
             exp(-(-g_RT[23] + g_RT[24] - g_RT[53] + g_RT[66] - g_RT[67])) *
             (refCinv);
  // reaction 417:  CF3O + CH2O => CF2O + HCO + HF
  k_f = 5000000 * exp(-(2516.0833290236) * invT);
  qf[421] *= k_f;
  qr[421] *= k_f *
             exp(-(-g_RT[16] + g_RT[17] - g_RT[53] + g_RT[66] - g_RT[67])) *
             (refCinv);
  // reaction 418:  CF3O + HCO => CF2O + CO + HF
  k_f = 5000000 * exp(-(1006.43333160944) * invT);
  qf[422] *= k_f;
  qr[422] *= k_f *
             exp(-(-g_RT[14] + g_RT[16] - g_RT[53] + g_RT[66] - g_RT[67])) *
             (refCinv);
  // reaction 419:  CHF + O2 <=> CHFO + O
  k_f = 20000000 * exp(-(8303.07498577788) * invT);
  qf[423] *= k_f;
  qr[423] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[63] - g_RT[68]));
  // reaction 420:  CF2 + O2 <=> CF2O + O
  k_f = 20000000 * exp(-(13335.2416438251) * invT);
  qf[424] *= k_f;
  qr[424] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[64] - g_RT[67]));
  // reaction 421:  CHF + O <=> CO + HF
  k_f = 90000000;
  qf[425] *= k_f;
  qr[425] *= k_f * exp(-(g_RT[2] - g_RT[14] - g_RT[53] + g_RT[63]));
  // reaction 422:  CF2 + O <=> CFO + F
  k_f = 24500000;
  qf[426] *= k_f;
  qr[426] *= k_f * exp(-(g_RT[2] - g_RT[54] + g_RT[64] - g_RT[69]));
  // reaction 423:  CHF + OH <=> CHFO + H
  k_f = 20000000;
  qf[427] *= k_f;
  qr[427] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[63] - g_RT[68]));
  // reaction 424:  CF2 + OH <=> CF2O + H
  k_f = 40000000;
  qf[428] *= k_f;
  qr[428] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[64] - g_RT[67]));
  // reaction 425:  CHF + OH <=> HCO + HF
  k_f = 4000000;
  qf[429] *= k_f;
  qr[429] *= k_f * exp(-(g_RT[4] - g_RT[16] - g_RT[53] + g_RT[63]));
  // reaction 426:  CF2 + OH <=> CFO + HF
  k_f = 10000000;
  qf[430] *= k_f;
  qr[430] *= k_f * exp(-(g_RT[4] - g_RT[53] + g_RT[64] - g_RT[69]));
  // reaction 427:  CHF + HO2 <=> CHFO + OH
  k_f = 10000000;
  qf[431] *= k_f;
  qr[431] *= k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[63] - g_RT[68]));
  // reaction 428:  CF2 + HO2 <=> CF2O + OH
  k_f = 10000000 * exp(-(1761.25833031652) * invT);
  qf[432] *= k_f;
  qr[432] *= k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[64] - g_RT[67]));
  // reaction 429:  CHF + HO2 <=> CH2F + O2
  k_f = 2000000;
  qf[433] *= k_f;
  qr[433] *= k_f * exp(-(-g_RT[3] + g_RT[6] - g_RT[60] + g_RT[63]));
  // reaction 430:  CF2 + HO2 <=> CHF2 + O2
  k_f = 2000000 * exp(-(1761.25833031652) * invT);
  qf[434] *= k_f;
  qr[434] *= k_f * exp(-(-g_RT[3] + g_RT[6] - g_RT[61] + g_RT[64]));
  // reaction 431:  CHF + H2O <=> CH2O + HF
  k_f = 5000000 * exp(-(3270.90832773068) * invT);
  qf[435] *= k_f;
  qr[435] *= k_f * exp(-(g_RT[5] - g_RT[17] - g_RT[53] + g_RT[63]));
  // reaction 432:  CF2 + H2O <=> CHFO + HF
  k_f = 5000000 * exp(-(12580.416645118) * invT);
  qf[436] *= k_f;
  qr[436] *= k_f * exp(-(g_RT[5] - g_RT[53] + g_RT[64] - g_RT[68]));
  // reaction 433:  CF2 (+M) <=> CF + F (+M)
  k_f = 530000000000000 * exp(-(59530.5315646983) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48] + sc[53] + (5) * sc[56] + (5) * sc[57] +
         (5) * sc[58] + (5) * sc[59];
  redP = Corr / k_f * 2290000000 * exp(-(48042.0950843766) * invT);
  Corr = redP / (1. + redP);
  qf[30] *= Corr * k_f;
  qr[30] *= Corr * k_f * exp(-(-g_RT[54] + g_RT[64] - g_RT[65])) * (refCinv);
  // reaction 434:  CF2 + H <=> CF + HF
  k_f = 39800000 * exp(-(2284.60366275343) * invT);
  qf[437] *= k_f;
  qr[437] *= k_f * exp(-(g_RT[1] - g_RT[53] + g_RT[64] - g_RT[65]));
  // reaction 435:  CH2O + CHF <=> CH2F + HCO
  k_f = 10000000 * exp(-(7548.2499870708) * invT);
  qf[438] *= k_f;
  qr[438] *= k_f * exp(-(-g_RT[16] + g_RT[17] - g_RT[60] + g_RT[63]));
  // reaction 436:  CH2O + CHF <=> CH2CO + HF
  k_f = 10000000 * exp(-(7548.2499870708) * invT);
  qf[439] *= k_f;
  qr[439] *= k_f * exp(-(g_RT[17] - g_RT[28] - g_RT[53] + g_RT[63]));
  // reaction 437:  CF2 + CH2O <=> CHF2 + HCO
  k_f = 10000000 * exp(-(20631.8832979935) * invT);
  qf[440] *= k_f;
  qr[440] *= k_f * exp(-(-g_RT[16] + g_RT[17] - g_RT[61] + g_RT[64]));
  // reaction 438:  CHF + HCO <=> CH2F + CO
  k_f = 20000000 * exp(-(7548.2499870708) * invT);
  qf[441] *= k_f;
  qr[441] *= k_f * exp(-(-g_RT[14] + g_RT[16] - g_RT[60] + g_RT[63]));
  // reaction 439:  CF2 + HCO <=> CHF2 + CO
  k_f = 20000000 * exp(-(20631.8832979935) * invT);
  qf[442] *= k_f;
  qr[442] *= k_f * exp(-(-g_RT[14] + g_RT[16] - g_RT[61] + g_RT[64]));
  // reaction 440:  CF + O2 <=> CFO + O
  k_f = 6620000 * exp(-(850.436165209976) * invT);
  qf[443] *= k_f;
  qr[443] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[65] - g_RT[69]));
  // reaction 441:  CF + H2O <=> CHFO + H
  k_f = 20000000 * exp(-(8554.68331868023) * invT);
  qf[444] *= k_f;
  qr[444] *= k_f * exp(-(-g_RT[1] + g_RT[5] + g_RT[65] - g_RT[68]));
  // reaction 442:  CF + H <=> C + HF
  k_f = 80000000 * exp(-(583.731332333475) * invT);
  qf[445] *= k_f;
  qr[445] *= k_f * exp(-(g_RT[1] - g_RT[8] - g_RT[53] + g_RT[65]));
  // reaction 443:  CF + O <=> CO + F
  k_f = 80000000 * exp(-(709.535498784655) * invT);
  qf[446] *= k_f;
  qr[446] *= k_f * exp(-(g_RT[2] - g_RT[14] - g_RT[54] + g_RT[65]));
  // reaction 444:  CF + OH <=> CO + HF
  k_f = 80000000 * exp(-(709.535498784655) * invT);
  qf[447] *= k_f;
  qr[447] *= k_f * exp(-(g_RT[4] - g_RT[14] - g_RT[53] + g_RT[65]));
  // reaction 445:  CF + HO2 => CFO + OH
  k_f = 30000000;
  qf[448] *= k_f;
  qr[448] *= k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[65] - g_RT[69]));
  // reaction 446:  C2H4 + CF => C2H2 + CH2F
  k_f = 10000000;
  qf[449] *= k_f;
  qr[449] *= k_f * exp(-(-g_RT[22] + g_RT[24] - g_RT[60] + g_RT[65]));
  // reaction 447:  CF + CH2O => CHF + HCO
  k_f = 10000000 * exp(-(4025.73332643776) * invT);
  qf[450] *= k_f;
  qr[450] *= k_f * exp(-(-g_RT[16] + g_RT[17] - g_RT[63] + g_RT[65]));
  // reaction 448:  CF + HCO => CHF + CO
  k_f = 10000000;
  qf[451] *= k_f;
  qr[451] *= k_f * exp(-(-g_RT[14] + g_RT[16] - g_RT[63] + g_RT[65]));
  // reaction 449:  CHFO + M <=> CO + HF + M
  k_f = 2.48e+19 * exp((-3) * logT - (21638.3166296029) * invT);
  Corr = mixture;
  qf[59] *= Corr * k_f;
  qr[59] *= Corr * k_f * exp(-(-g_RT[14] - g_RT[53] + g_RT[68])) * (refCinv);
  // reaction 450:  CFO + F <=> CF2O
  k_f = 1000000;
  qf[452] *= k_f;
  qr[452] *= k_f * exp(-(g_RT[54] - g_RT[67] + g_RT[69])) * (refC);
  // reaction 451:  CHFO + H <=> CFO + H2
  k_f = 110 * exp((1.77) * logT - (1509.64999741416) * invT);
  qf[453] *= k_f;
  qr[453] *= k_f * exp(-(-g_RT[0] + g_RT[1] + g_RT[68] - g_RT[69]));
  // reaction 452:  CF2O + H <=> CFO + HF
  k_f = 24 * exp((1.88) * logT - (18065.4783023894) * invT);
  qf[454] *= k_f;
  qr[454] *= k_f * exp(-(g_RT[1] - g_RT[53] + g_RT[67] - g_RT[69]));
  // reaction 453:  CF2O + H <=> CFO + HF
  k_f = 12000 * exp((0.83) * logT - (11221.7316474452) * invT);
  qf[455] *= k_f;
  qr[455] *= k_f * exp(-(g_RT[1] - g_RT[53] + g_RT[67] - g_RT[69]));
  // reaction 454:  CF2O + H <=> CFO + HF
  k_f = 550 * exp((1.42) * logT - (9510.7949837092) * invT);
  qf[456] *= k_f;
  qr[456] *= k_f * exp(-(g_RT[1] - g_RT[53] + g_RT[67] - g_RT[69]));
  // reaction 455:  CF2O + H2O => CO2 + 2 HF
  k_f = 7.4e-09 * exp((3.84) * logT - (12630.7383116985) * invT);
  qf[457] *= k_f;
  qr[457] *= k_f * exp(-(g_RT[5] - g_RT[15] - 2.000000 * g_RT[53] + g_RT[67])) *
             (refCinv);
  // reaction 456:  CHFO + O <=> CFO + OH
  k_f = 9000000 * exp(-(1549.90733067854) * invT);
  qf[458] *= k_f;
  qr[458] *= k_f * exp(-(g_RT[2] - g_RT[4] + g_RT[68] - g_RT[69]));
  // reaction 457:  CHFO + OH <=> CFO + H2O
  k_f = 1720 * exp((1.18) * logT - (-224.93784961471) * invT);
  qf[459] *= k_f;
  qr[459] *= k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[68] - g_RT[69]));
  // reaction 458:  CF2O + OH => CO2 + F + HF
  k_f = 0.0027 * exp((2.38) * logT - (10567.5499818991) * invT);
  qf[460] *= k_f;
  qr[460] *= k_f * exp(-(g_RT[4] - g_RT[15] - g_RT[53] - g_RT[54] + g_RT[67])) *
             (refCinv);
  // reaction 459:  CFO + H2O2 <=> CHFO + HO2
  k_f = 100000 * exp(-(1962.54499663841) * invT);
  qf[461] *= k_f;
  qr[461] *= k_f * exp(-(-g_RT[6] + g_RT[7] - g_RT[68] + g_RT[69]));
  // reaction 460:  CH3 + CHFO <=> CFO + CH4
  k_f = 2000000 * exp(-(4528.94999224248) * invT);
  qf[462] *= k_f;
  qr[462] *= k_f * exp(-(g_RT[12] - g_RT[13] + g_RT[68] - g_RT[69]));
  // reaction 461:  CH2F + CHFO <=> CFO + CH3F
  k_f = 2000000 * exp(-(4528.94999224248) * invT);
  qf[463] *= k_f;
  qr[463] *= k_f * exp(-(-g_RT[56] + g_RT[60] + g_RT[68] - g_RT[69]));
  // reaction 462:  CHF2 + CHFO <=> CFO + CH2F2
  k_f = 2000000 * exp(-(4528.94999224248) * invT);
  qf[464] *= k_f;
  qr[464] *= k_f * exp(-(-g_RT[57] + g_RT[61] + g_RT[68] - g_RT[69]));
  // reaction 463:  CF3 + CHFO <=> CFO + CHF3
  k_f = 2000000 * exp(-(4528.94999224248) * invT);
  qf[465] *= k_f;
  qr[465] *= k_f * exp(-(-g_RT[58] + g_RT[62] + g_RT[68] - g_RT[69]));
  // reaction 464:  C2H3 + CHFO <=> C2H4 + CFO
  k_f = 2000000 * exp(-(2516.0833290236) * invT);
  qf[466] *= k_f;
  qr[466] *= k_f * exp(-(g_RT[23] - g_RT[24] + g_RT[68] - g_RT[69]));
  // reaction 465:  CFO + O <=> CO2 + F
  k_f = 30000000;
  qf[467] *= k_f;
  qr[467] *= k_f * exp(-(g_RT[2] - g_RT[15] - g_RT[54] + g_RT[69]));
  // reaction 466:  CFO + OH <=> CO2 + HF
  k_f = 30000000;
  qf[468] *= k_f;
  qr[468] *= k_f * exp(-(g_RT[4] - g_RT[15] - g_RT[53] + g_RT[69]));
  // reaction 467:  CFO + HO2 => CO2 + F + OH
  k_f = 30000000;
  qf[469] *= k_f;
  qr[469] *= k_f * exp(-(-g_RT[4] + g_RT[6] - g_RT[15] - g_RT[54] + g_RT[69])) *
             (refCinv);
  // reaction 468:  CFO + CH3 <=> CH2CO + HF
  k_f = 27000000;
  qf[470] *= k_f;
  qr[470] *= k_f * exp(-(g_RT[12] - g_RT[28] - g_RT[53] + g_RT[69]));
  // reaction 469:  2 CFO <=> CF2O + CO
  k_f = 22300000 * exp(-(160.022899725901) * invT);
  qf[471] *= k_f;
  qr[471] *= k_f * exp(-(-g_RT[14] - g_RT[67] + 2.000000 * g_RT[69]));
  // reaction 470:  CH2F + CH3 <=> C2H4 + HF
  k_f = 18500000000000 * exp((-1.86) * logT - (941.015165054826) * invT);
  qf[472] *= k_f;
  qr[472] *= k_f * exp(-(g_RT[12] - g_RT[24] - g_RT[53] + g_RT[60]));
  // reaction 471:  CH2(S) + CH3F <=> C2H4 + HF
  k_f = 30000000;
  qf[473] *= k_f;
  qr[473] *= k_f * exp(-(g_RT[11] - g_RT[24] - g_RT[53] + g_RT[56]));
  // reaction 472:  CH4 + CHF <=> C2H4 + HF
  k_f = 40000000 * exp(-(7548.2499870708) * invT);
  qf[474] *= k_f;
  qr[474] *= k_f * exp(-(g_RT[13] - g_RT[24] - g_RT[53] + g_RT[63]));
  // reaction 473:  CH2F + CH3 <=> CH4 + CHF
  k_f = 30000000 * exp(-(1710.93666373605) * invT);
  qf[475] *= k_f;
  qr[475] *= k_f * exp(-(g_RT[12] - g_RT[13] + g_RT[60] - g_RT[63]));
  // reaction 474:  2 CH2F <=> CH3F + CHF
  k_f = 30000000 * exp(-(2415.43999586265) * invT);
  qf[476] *= k_f;
  qr[476] *= k_f * exp(-(-g_RT[56] + 2.000000 * g_RT[60] - g_RT[63]));
  // reaction 475:  CH2F + CHF2 <=> CH2F2 + CHF
  k_f = 10000000 * exp(-(2214.15332954077) * invT);
  qf[477] *= k_f;
  qr[477] *= k_f * exp(-(-g_RT[57] + g_RT[60] + g_RT[61] - g_RT[63]));
  // reaction 476:  CF3 + CH2F <=> CHF + CHF3
  k_f = 30000000 * exp(-(2314.79666270171) * invT);
  qf[478] *= k_f;
  qr[478] *= k_f * exp(-(-g_RT[58] + g_RT[60] + g_RT[62] - g_RT[63]));
  // reaction 477:  CH3 + CHF2 <=> CF2 + CH4
  k_f = 25000000 * exp(-(402.573332643776) * invT);
  qf[479] *= k_f;
  qr[479] *= k_f * exp(-(g_RT[12] - g_RT[13] + g_RT[61] - g_RT[64]));
  // reaction 478:  CH2F + CHF2 <=> CF2 + CH3F
  k_f = 30000000 * exp(-(1107.07666477038) * invT);
  qf[480] *= k_f;
  qr[480] *= k_f * exp(-(-g_RT[56] + g_RT[60] + g_RT[61] - g_RT[64]));
  // reaction 479:  2 CHF2 <=> CF2 + CH2F2
  k_f = 30000000 * exp(-(805.146665287552) * invT);
  qf[481] *= k_f;
  qr[481] *= k_f * exp(-(-g_RT[57] + 2.000000 * g_RT[61] - g_RT[64]));
  // reaction 480:  CF3 + CHF2 <=> CF2 + CHF3
  k_f = 30000000 * exp(-(1006.43333160944) * invT);
  qf[482] *= k_f;
  qr[482] *= k_f * exp(-(-g_RT[58] + g_RT[61] + g_RT[62] - g_RT[64]));
  // reaction 481:  CH2(S) + CHF <=> C2H2 + HF
  k_f = 170200000000000 * exp((-2.12) * logT - (1197.65566461523) * invT);
  qf[483] *= k_f;
  qr[483] *= k_f * exp(-(g_RT[11] - g_RT[22] - g_RT[53] + g_RT[63]));
  // reaction 482:  CH2 + CH2F <=> C2H4 + F
  k_f = 40000000;
  qf[484] *= k_f;
  qr[484] *= k_f * exp(-(g_RT[10] - g_RT[24] - g_RT[54] + g_RT[60]));
  // reaction 483:  CH2(S) + CH2F <=> C2H4 + F
  k_f = 2000000;
  qf[485] *= k_f;
  qr[485] *= k_f * exp(-(g_RT[11] - g_RT[24] - g_RT[54] + g_RT[60]));
  // reaction 484:  F + HCCO <=> CHF + CO
  k_f = 30000000;
  qf[486] *= k_f;
  qr[486] *= k_f * exp(-(-g_RT[14] + g_RT[27] + g_RT[54] - g_RT[63]));
  // reaction 485:  CH4 + F <=> CH3 + HF
  k_f = 5900000 * exp((0.5) * logT - (226.447499612124) * invT);
  qf[487] *= k_f;
  qr[487] *= k_f * exp(-(-g_RT[12] + g_RT[13] - g_RT[53] + g_RT[54]));
  // reaction 486:  CH3F + F <=> CH2F + HF
  k_f = 135000000 * exp(-(603.859998965664) * invT);
  qf[488] *= k_f;
  qr[488] *= k_f * exp(-(-g_RT[53] + g_RT[54] + g_RT[56] - g_RT[60]));
  // reaction 487:  CH2F2 + F <=> CHF2 + HF
  k_f = 90000000 * exp(-(930.950831738731) * invT);
  qf[489] *= k_f;
  qr[489] *= k_f * exp(-(-g_RT[53] + g_RT[54] + g_RT[57] - g_RT[61]));
  // reaction 488:  CHF3 + F <=> CF3 + HF
  k_f = 45000000 * exp(-(1861.90166347746) * invT);
  qf[490] *= k_f;
  qr[490] *= k_f * exp(-(-g_RT[53] + g_RT[54] + g_RT[58] - g_RT[62]));
  // reaction 489:  CH3OH + F <=> CH3O + HF
  k_f = 2620 * exp((1.44) * logT - (-103.159416489968) * invT);
  qf[491] *= k_f;
  qr[491] *= k_f * exp(-(-g_RT[19] + g_RT[20] - g_RT[53] + g_RT[54]));
  // reaction 490:  CH3OH + F <=> CH2OH + HF
  k_f = 46.2 * exp((1.97) * logT - (-150.964999741416) * invT);
  qf[492] *= k_f;
  qr[492] *= k_f * exp(-(-g_RT[18] + g_RT[20] - g_RT[53] + g_RT[54]));
  // reaction 491:  CH2O + F <=> HCO + HF
  k_f = 60000000 * exp(-(1006.43333160944) * invT);
  qf[493] *= k_f;
  qr[493] *= k_f * exp(-(-g_RT[16] + g_RT[17] - g_RT[53] + g_RT[54]));
  // reaction 492:  CHFO + F <=> CFO + HF
  k_f = 26500000 * exp(-(905.789998448495) * invT);
  qf[494] *= k_f;
  qr[494] *= k_f * exp(-(-g_RT[53] + g_RT[54] + g_RT[68] - g_RT[69]));
  // reaction 493:  CH3O + F <=> CH2O + HF
  k_f = 30000000;
  qf[495] *= k_f;
  qr[495] *= k_f * exp(-(-g_RT[17] + g_RT[19] - g_RT[53] + g_RT[54]));
  // reaction 494:  F + HCO <=> CO + HF
  k_f = 10000000;
  qf[496] *= k_f;
  qr[496] *= k_f * exp(-(-g_RT[14] + g_RT[16] - g_RT[53] + g_RT[54]));
  // reaction 495:  C2H6 + F <=> C2H5 + HF
  k_f = 8000000 * exp(-(150.964999741416) * invT);
  qf[497] *= k_f;
  qr[497] *= k_f * exp(-(-g_RT[25] + g_RT[26] - g_RT[53] + g_RT[54]));
  // reaction 496:  C2H4 + F <=> C2H3 + HF
  k_f = 100000000 * exp(-(1006.43333160944) * invT);
  qf[498] *= k_f;
  qr[498] *= k_f * exp(-(-g_RT[23] + g_RT[24] - g_RT[53] + g_RT[54]));
  // reaction 497:  C2H3 + F <=> C2H2 + HF
  k_f = 20000000;
  qf[499] *= k_f;
  qr[499] *= k_f * exp(-(-g_RT[22] + g_RT[23] - g_RT[53] + g_RT[54]));
  // reaction 498:  CF3 (+M) <=> CF2 + F (+M)
  k_f = 1e+15 * exp(-(41449.9567623348) * invT);
  Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
         (2) * sc[26] + (-0.3) * sc[48] + sc[53] + (5) * sc[56] + (5) * sc[57] +
         (5) * sc[58];
  redP = Corr / k_f * 5000000000 * exp(-(30021.9062819096) * invT);
  Corr = redP / (1. + redP);
  qf[31] *= Corr * k_f;
  qr[31] *= Corr * k_f * exp(-(-g_RT[54] + g_RT[62] - g_RT[64])) * (refCinv);
  // reaction 499:  CF4 + CH3 <=> CF3 + CH3F
  k_f = 0.0964 * exp((2.41) * logT - (13149.0514774773) * invT);
  qf[500] *= k_f;
  qr[500] *= k_f * exp(-(g_RT[12] - g_RT[56] + g_RT[59] - g_RT[62]));
  // reaction 500:  CF3O + CO <=> CF3 + CO2
  k_f = 31300;
  qf[501] *= k_f;
  qr[501] *= k_f * exp(-(g_RT[14] - g_RT[15] - g_RT[62] + g_RT[66]));
  // reaction 501:  CF2 + CFO <=> CF3 + CO
  k_f = 540000;
  qf[502] *= k_f;
  qr[502] *= k_f * exp(-(-g_RT[14] - g_RT[62] + g_RT[64] + g_RT[69]));
  // reaction 502:  2 F + M <=> F2 + M
  k_f = 100;
  Corr = mixture;
  qf[60] *= Corr * k_f;
  qr[60] *= Corr * k_f * exp(-(2.000000 * g_RT[54] - g_RT[55])) * (refC);
  // reaction 503:  F2 + H <=> F + HF
  k_f = 2900 * exp((1.4) * logT - (669.278165520277) * invT);
  qf[503] *= k_f;
  qr[503] *= k_f * exp(-(g_RT[1] - g_RT[53] - g_RT[54] + g_RT[55]));
  // reaction 504:  CF3 + F2 <=> CF4 + F
  k_f = 2650000 * exp(-(1258.0416645118) * invT);
  qf[504] *= k_f;
  qr[504] *= k_f * exp(-(-g_RT[54] + g_RT[55] - g_RT[59] + g_RT[62]));
  // reaction 505:  CH3 + F2 <=> CH3F + F
  k_f = 4000000 * exp(-(553.538332385192) * invT);
  qf[505] *= k_f;
  qr[505] *= k_f * exp(-(g_RT[12] - g_RT[54] + g_RT[55] - g_RT[56]));
  // reaction 506:  CF2 + F2 <=> CF3 + F
  k_f = 1200000 * exp(-(1509.64999741416) * invT);
  qf[506] *= k_f;
  qr[506] *= k_f * exp(-(-g_RT[54] + g_RT[55] - g_RT[62] + g_RT[64]));
  // reaction 507:  CFO + F2 <=> CF2O + F
  k_f = 1000000;
  qf[507] *= k_f;
  qr[507] *= k_f * exp(-(-g_RT[54] + g_RT[55] - g_RT[67] + g_RT[69]));
  // reaction 508:  F2 + H2 <=> F + H + HF
  k_f = 3440000 * exp(-(9958.6578162754) * invT);
  qf[508] *= k_f;
  qr[508] *= k_f * exp(-(g_RT[0] - g_RT[1] - g_RT[53] - g_RT[54] + g_RT[55])) *
             (refCinv);
  // reaction 509:  CO + F2 <=> CFO + F
  k_f = 470000 * exp(-(6793.42498836372) * invT);
  qf[509] *= k_f;
  qr[509] *= k_f * exp(-(g_RT[14] - g_RT[54] + g_RT[55] - g_RT[69]));
  // reaction 510:  C + F2 <=> CF + F
  k_f = 1700000 * exp(-(754.82499870708) * invT);
  qf[510] *= k_f;
  qr[510] *= k_f * exp(-(g_RT[8] - g_RT[54] + g_RT[55] - g_RT[65]));
  // reaction 511:  CF + F2 <=> CF2 + F
  k_f = 2400000;
  qf[511] *= k_f;
  qr[511] *= k_f * exp(-(-g_RT[54] + g_RT[55] - g_RT[64] + g_RT[65]));
  // reaction 512:  CH4 + F2 <=> CH3 + F + HF
  k_f = 2000000 * exp(-(5651.123156987) * invT);
  qf[512] *= k_f;
  qr[512] *= k_f *
             exp(-(-g_RT[12] + g_RT[13] - g_RT[53] - g_RT[54] + g_RT[55])) *
             (refCinv);
  // reaction 513:  F2 + OH <=> F + HF + O
  k_f = 70000000 * exp(-(4528.94999224248) * invT);
  qf[513] *= k_f;
  qr[513] *= k_f * exp(-(-g_RT[2] + g_RT[4] - g_RT[53] - g_RT[54] + g_RT[55])) *
             (refCinv);
  // reaction 514:  C3H8 + F <=> HF + nC3H7
  k_f = 35000000;
  qf[514] *= k_f;
  qr[514] *= k_f * exp(-(g_RT[50] - g_RT[53] + g_RT[54] - g_RT[71]));
  // reaction 515:  C3H8 + F <=> HF + iC3H7
  k_f = 41000000;
  qf[515] *= k_f;
  qr[515] *= k_f * exp(-(g_RT[50] - g_RT[53] + g_RT[54] - g_RT[70]));
  // reaction 516:  C3H8 + CF3 <=> CHF3 + nC3H7
  k_f = 540000 * exp(-(4297.47032597231) * invT);
  qf[516] *= k_f;
  qr[516] *= k_f * exp(-(g_RT[50] - g_RT[58] + g_RT[62] - g_RT[71]));
  // reaction 517:  C3H8 + CF3 <=> CHF3 + iC3H7
  k_f = 180000 * exp(-(3280.97266104677) * invT);
  qf[517] *= k_f;
  qr[517] *= k_f * exp(-(g_RT[50] - g_RT[58] + g_RT[62] - g_RT[70]));
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
productionRate(amrex::Real* wdot, const amrex::Real* sc, const amrex::Real T)
{
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1 / refC;

  for (int i = 0; i < 72; ++i) {
    wdot[i] = 0.0;
  }

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 72; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[72];
  gibbs(g_RT, T);

  {
    // reaction 49:  CH2 + H (+M) <=> CH3 (+M)
    const amrex::Real k_f = 600000000;
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[48];
    const amrex::Real redP = Corr / k_f * 104000000000000 *
                             exp(-2.76 * logT - 805.146665287552 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.438 * exp(-T * 0.010989010989011) +
      0.562 * exp(-T * 0.000171350239890336) + exp(-8552 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[10]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[10] - g_RT[12])) * (refC) * (sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[10] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 51:  CH3 + H (+M) <=> CH4 (+M)
    const amrex::Real k_f =
      13900000000 * exp((-0.534) * logT - (269.72413287133) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + (2) * sc[13] +
                       (0.5) * sc[14] + sc[15] + (2) * sc[26] + (-0.3) * sc[48];
    const amrex::Real redP =
      Corr / k_f * 2.62e+21 * exp(-4.76 * logT - 1227.84866456352 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.217 * exp(-T * 0.0135135135135135) +
      0.783 * exp(-T * 0.000340020401224073) + exp(-6964 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[12]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[12] - g_RT[13])) * (refC) * (sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 53:  H + HCO (+M) <=> CH2O (+M)
    const amrex::Real k_f =
      1090000 * exp((0.48) * logT - (-130.836333109227) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[48];
    const amrex::Real redP =
      Corr / k_f * 2470000000000 * exp(-2.57 * logT - 213.867082967006 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2176 * exp(-T * 0.003690036900369) +
      0.7824 * exp(-T * 0.000362976406533575) + exp(-6570 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[16]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[16] - g_RT[17])) * (refC) * (sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 55:  CH2O + H (+M) <=> CH2OH (+M)
    const amrex::Real k_f =
      540000 * exp((0.454) * logT - (1811.57999689699) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26];
    const amrex::Real redP =
      Corr / k_f * 1.27e+20 * exp(-4.82 * logT - 3286.00482770482 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2813 * exp(-T * 0.00970873786407767) +
      0.7187 * exp(-T * 0.000774593338497289) + exp(-4160 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[17]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[17] - g_RT[18])) * (refC) * (sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[17] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 56:  CH2O + H (+M) <=> CH3O (+M)
    const amrex::Real k_f =
      540000 * exp((0.454) * logT - (1308.36333109227) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26];
    const amrex::Real redP =
      Corr / k_f * 2.2e+18 * exp(-4.8 * logT - 2797.88466187424 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.242 * exp(-T * 0.0106382978723404) +
      0.758 * exp(-T * 0.000643086816720257) + exp(-4200 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[17]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[17] - g_RT[19])) * (refC) * (sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[17] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 58:  CH2OH + H (+M) <=> CH3OH (+M)
    const amrex::Real k_f =
      1055000 * exp((0.5) * logT - (43.2766332592059) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26];
    const amrex::Real redP =
      Corr / k_f * 4.36e+19 * exp(-4.65 * logT - 2556.34066228798 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4 * exp(-T * 0.01) + 0.6 * exp(-T * 1.11111111111111e-05) +
      exp(-10000 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[18]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[18] - g_RT[20])) * (refC) * (sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[18] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 62:  CH3O + H (+M) <=> CH3OH (+M)
    const amrex::Real k_f =
      2430000 * exp((0.515) * logT - (25.160833290236) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26];
    const amrex::Real redP =
      Corr / k_f * 4.66e+29 * exp(-7.44 * logT - 7085.29065453045 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.3 * exp(-T * 0.01) + 0.7 * exp(-T * 1.11111111111111e-05) +
      exp(-10000 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[19]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[19] - g_RT[20])) * (refC) * (sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[19] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 69:  C2H + H (+M) <=> C2H2 (+M)
    const amrex::Real k_f = 100000000000 * exp((-1) * logT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[48];
    const amrex::Real redP =
      Corr / k_f * 3.75e+21 * exp(-4.8 * logT - 956.111665028967 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.3536 * exp(-T * 0.00757575757575758) +
      0.6464 * exp(-T * 0.000760456273764259) + exp(-5566 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[21]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[21] - g_RT[22])) * (refC) * (sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[21] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 70:  C2H2 + H (+M) <=> C2H3 (+M)
    const amrex::Real k_f = 5600000 * exp(-(1207.71999793133) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[48];
    const amrex::Real redP =
      Corr / k_f * 3.8e+28 * exp(-7.27 * logT - 3633.22432711008 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2493 * exp(-T * 0.0101522842639594) +
      0.7507 * exp(-T * 0.000768049155145929) + exp(-4167 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[22]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[22] - g_RT[23])) * (refC) * (sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[22] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 71:  C2H3 + H (+M) <=> C2H4 (+M)
    const amrex::Real k_f =
      6080000 * exp((0.27) * logT - (140.900666425322) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[48];
    const amrex::Real redP =
      Corr / k_f * 1.4e+18 * exp(-3.86 * logT - 1670.67933047167 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.218 * exp(-T * 0.00481927710843374) +
      0.782 * exp(-T * 0.000375516334960571) + exp(-6095 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[23]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[23] - g_RT[24])) * (refC) * (sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[23] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 73:  C2H4 + H (+M) <=> C2H5 (+M)
    const amrex::Real k_f =
      540000 * exp((0.454) * logT - (915.85433176459) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[48];
    const amrex::Real redP =
      Corr / k_f * 6e+29 * exp(-7.62 * logT - 3507.4201606589 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.0247000000000001 * exp(-T * 0.00476190476190476) +
      0.9753 * exp(-T * 0.00101626016260163) + exp(-4374 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[24]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[24] - g_RT[25])) * (refC) * (sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[24] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 75:  C2H5 + H (+M) <=> C2H6 (+M)
    const amrex::Real k_f =
      521000000000 * exp((-0.99) * logT - (795.082331971457) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[48];
    const amrex::Real redP =
      Corr / k_f * 1.99e+29 * exp(-7.08 * logT - 3364.00341090455 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.1578 * exp(-T * 0.008) + 0.8422 * exp(-T * 0.000450653447498873) +
      exp(-6882 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[25]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[25] - g_RT[26])) * (refC) * (sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[25] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 82:  CO + H2 (+M) <=> CH2O (+M)
    const amrex::Real k_f = 43 * exp((1.5) * logT - (40056.0465980557) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[48];
    const amrex::Real redP =
      Corr / k_f * 5.07e+15 * exp(-3.42 * logT - 42446.3257606281 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.0679999999999999 * exp(-T * 0.0050761421319797) +
      0.932 * exp(-T * 0.000649350649350649) + exp(-10300 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[0] * sc[14]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[0] + g_RT[14] - g_RT[17])) * (refC) * (sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[14] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 84:  2 OH (+M) <=> H2O2 (+M)
    const amrex::Real k_f = 74000000 * exp((-0.37) * logT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[48];
    const amrex::Real redP =
      Corr / k_f * 2300000 * exp(-0.9 * logT - -855.468331868023 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2654 * exp(-T * 0.0106382978723404) +
      0.7346 * exp(-T * 0.000569476082004556) + exp(-5182 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * ((sc[4] * sc[4]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[4] - g_RT[7])) * (refC) * (sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= 2.000000 * qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 94:  CH3 + OH (+M) <=> CH3OH (+M)
    const amrex::Real k_f =
      2790000000000 * exp((-1.43) * logT - (669.278165520277) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26];
    const amrex::Real redP =
      Corr / k_f * 4e+24 * exp(-5.92 * logT - 1580.10033062682 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.588 * exp(-T * 0.00512820512820513) +
      0.412 * exp(-T * 0.000169491525423729) + exp(-6394 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[4] * sc[12]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[4] + g_RT[12] - g_RT[20])) * (refC) * (sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[12] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 130:  CH + CO (+M) <=> HCCO (+M)
    const amrex::Real k_f = 50000000;
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[48];
    const amrex::Real redP =
      Corr / k_f * 2.69e+16 * exp(-3.74 * logT - 974.227464997937 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4243 * exp(-T * 0.00421940928270042) +
      0.5757 * exp(-T * 0.000605326876513317) + exp(-5069 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[9] * sc[14]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[9] + g_RT[14] - g_RT[27])) * (refC) * (sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[14] -= qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 139:  CH2 + CO (+M) <=> CH2CO (+M)
    const amrex::Real k_f =
      810000 * exp((0.5) * logT - (2269.50716277929) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[48];
    const amrex::Real redP =
      Corr / k_f * 2.69e+21 * exp(-5.11 * logT - 3570.32224388449 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4093 * exp(-T * 0.00363636363636364) +
      0.5907 * exp(-T * 0.000815660685154976) + exp(-5185 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[10] * sc[14]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[10] + g_RT[14] - g_RT[28])) * (refC) * (sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[14] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 146:  CH2(S) + H2O (+M) <=> CH3OH (+M)
    const amrex::Real k_f =
      482000000000 * exp((-1.16) * logT - (576.183082346404) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26];
    const amrex::Real redP =
      Corr / k_f * 1.88e+26 * exp(-6.36 * logT - 2536.21199565579 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.3973 * exp(-T * 0.00480769230769231) +
      0.6027 * exp(-T * 0.000254971953085161) + exp(-10180 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[5] * sc[11]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[5] + g_RT[11] - g_RT[20])) * (refC) * (sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[11] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 157:  2 CH3 (+M) <=> C2H6 (+M)
    const amrex::Real k_f =
      67700000000 * exp((-1.18) * logT - (329.103699436287) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[48];
    const amrex::Real redP =
      Corr / k_f * 3.4e+29 * exp(-7.03 * logT - 1389.88443095264 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.381 * exp(-T * 0.0136612021857923) +
      0.619 * exp(-T * 0.000847457627118644) + exp(-9999 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * ((sc[12] * sc[12]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[12] - g_RT[26])) * (refC) * (sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= 2.000000 * qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 173:  C2H4 (+M) <=> C2H2 + H2 (+M)
    const amrex::Real k_f =
      8000000000000 * exp((0.44) * logT - (43664.1100918755) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[48];
    const amrex::Real redP =
      Corr / k_f * 1.58e+45 * exp(-9.3 * logT - 49214.5899157016 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2655 * exp(-T * 0.00555555555555556) +
      0.7345 * exp(-T * 0.000966183574879227) + exp(-5417 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[24]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[0] - g_RT[22] + g_RT[24])) *
                           (refCinv) * (sc[0] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[22] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 240:  CH + N2 (+M) <=> HCNN (+M)
    const amrex::Real k_f = 3100000 * exp((0.15) * logT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26];
    const amrex::Real redP =
      Corr / k_f * 13000000000000 * exp(-3.16 * logT - 372.380332695493 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.333 * exp(-T * 0.00425531914893617) +
      0.667 * exp(-T * 0.000472366556447804) + exp(-4536 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[9] * sc[47]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[9] - g_RT[42] + g_RT[47])) * (refC) * (sc[42]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[42] += qdot;
    wdot[47] -= qdot;
  }

  {
    // reaction 288:  CH + H2 (+M) <=> CH3 (+M)
    const amrex::Real k_f =
      1970000 * exp((0.43) * logT - (-186.190166347746) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[48];
    const amrex::Real redP =
      Corr / k_f * 48200000000000 * exp(-2.8 * logT - 296.897832824785 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.422 * exp(-T * 0.00819672131147541) +
      0.578 * exp(-T * 0.000394477317554241) + exp(-9365 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[0] * sc[9]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[0] + g_RT[9] - g_RT[12])) * (refC) * (sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[9] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 303:  CH2CO + H (+M) <=> CH2CHO (+M)
    const amrex::Real k_f =
      486500 * exp((0.422) * logT - (-883.145248487283) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[48];
    const amrex::Real redP =
      Corr / k_f * 1.012e+30 * exp(-7.63 * logT - 1939.39703001139 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.535 * exp(-T * 0.00497512437810945) +
      0.465 * exp(-T * 0.000564015792442188) + exp(-5333 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[28]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[28] - g_RT[51])) * (refC) * (sc[51]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[28] -= qdot;
    wdot[51] += qdot;
  }

  {
    // reaction 311:  C2H5 + CH3 (+M) <=> C3H8 (+M)
    const amrex::Real k_f = 9430000;
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[48];
    const amrex::Real redP =
      Corr / k_f * 2.71e+62 * exp(-16.82 * logT - 6574.52573873866 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.8473 * exp(-T * 0.00343642611683849) +
      0.1527 * exp(-T * 0.000364697301239971) + exp(-7748 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[12] * sc[25]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[12] + g_RT[25] - g_RT[50])) * (refC) * (sc[50]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[25] -= qdot;
    wdot[50] += qdot;
  }

  {
    // reaction 317:  C2H4 + CH3 (+M) <=> C3H7 (+M)
    const amrex::Real k_f = 2.55 * exp((1.6) * logT - (2868.3349950869) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[48];
    const amrex::Real redP =
      Corr / k_f * 3e+51 * exp(-14.6 * logT - 9143.44681767176 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.8106 * exp(-T * 0.0036101083032491) +
      0.1894 * exp(-T * 0.000114311842706904) + exp(-7891 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[12] * sc[24]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[12] + g_RT[24] - g_RT[49])) * (refC) * (sc[49]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[24] -= qdot;
    wdot[49] += qdot;
  }

  {
    // reaction 319:  C3H7 + H (+M) <=> C3H8 (+M)
    const amrex::Real k_f = 36130000;
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[48];
    const amrex::Real redP =
      Corr / k_f * 4.42e+49 * exp(-13.545 * logT - 5715.0316735442 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.685 * exp(-T * 0.002710027100271) +
      0.315 * exp(-T * 0.00030441400304414) + exp(-6667 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[49]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[49] - g_RT[50])) * (refC) * (sc[50]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[49] -= qdot;
    wdot[50] += qdot;
  }

  {
    // reaction 11:  CO + O (+M) <=> CO2 (+M)
    const amrex::Real k_f = 18000 * exp(-(1200.17174794426) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[3] + (5) * sc[5] + sc[13] +
                       (0.5) * sc[14] + (2.5) * sc[15] + (2) * sc[26] +
                       (-0.5) * sc[48];
    const amrex::Real redP = Corr / k_f * 602 * exp(-1509.64999741416 * invT);
    Corr = redP / (1.0 + redP);
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[14]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[14] - g_RT[15])) * (refC) * (sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 184:  N2O (+M) <=> N2 + O (+M)
    const amrex::Real k_f = 79100000000 * exp(-(28190.1976183804) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.375) * sc[48];
    const amrex::Real redP =
      Corr / k_f * 637000000 * exp(-28502.1919511793 * invT);
    Corr = redP / (1.0 + redP);
    const amrex::Real qf = Corr * k_f * (sc[37]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[2] + g_RT[37] - g_RT[47])) *
                           (refCinv) * (sc[2] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[37] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 236:  H + HCN (+M) <=> H2CN (+M)
    const amrex::Real k_f = 33000000;
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[48];
    const amrex::Real redP =
      Corr / k_f * 140000000000000 * exp(-3.4 * logT - 956.111665028967 * invT);
    Corr = redP / (1.0 + redP);
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[40]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[40] - g_RT[41])) * (refC) * (sc[41]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[40] -= qdot;
    wdot[41] += qdot;
  }

  {
    // reaction 346:  CH3F (+M) <=> CH2(S) + HF (+M)
    const amrex::Real k_f = 100000000000000 * exp(-(42773.4165934012) * invT);
    amrex::Real Corr = mixture + sc[0] + (8) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + sc[53] + (5) * sc[56] +
                       (5) * sc[57] + (5) * sc[58];
    const amrex::Real redP =
      Corr / k_f * 15000000000 * exp(-33966.6217251528 * invT);
    Corr = redP / (1.0 + redP);
    const amrex::Real qf = Corr * k_f * (sc[56]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[11] - g_RT[53] + g_RT[56])) * (refCinv) *
                           (sc[11] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[53] += qdot;
    wdot[56] -= qdot;
  }

  {
    // reaction 433:  CF2 (+M) <=> CF + F (+M)
    const amrex::Real k_f = 530000000000000 * exp(-(59530.5315646983) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[48] + sc[53] +
                       (5) * sc[56] + (5) * sc[57] + (5) * sc[58] +
                       (5) * sc[59];
    const amrex::Real redP =
      Corr / k_f * 2290000000 * exp(-48042.0950843766 * invT);
    Corr = redP / (1.0 + redP);
    const amrex::Real qf = Corr * k_f * (sc[64]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[54] + g_RT[64] - g_RT[65])) * (refCinv) *
                           (sc[54] * sc[65]);
    const amrex::Real qdot = qf - qr;
    wdot[54] += qdot;
    wdot[64] -= qdot;
    wdot[65] += qdot;
  }

  {
    // reaction 498:  CF3 (+M) <=> CF2 + F (+M)
    const amrex::Real k_f = 1e+15 * exp(-(41449.9567623348) * invT);
    amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] + (0.5) * sc[14] +
                       sc[15] + (2) * sc[26] + (-0.3) * sc[48] + sc[53] +
                       (5) * sc[56] + (5) * sc[57] + (5) * sc[58];
    const amrex::Real redP =
      Corr / k_f * 5000000000 * exp(-30021.9062819096 * invT);
    Corr = redP / (1.0 + redP);
    const amrex::Real qf = Corr * k_f * (sc[62]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[54] + g_RT[62] - g_RT[64])) * (refCinv) *
                           (sc[54] * sc[64]);
    const amrex::Real qdot = qf - qr;
    wdot[54] += qdot;
    wdot[62] -= qdot;
    wdot[64] += qdot;
  }

  {
    // reaction 0:  2 O + M <=> O2 + M
    const amrex::Real k_f = 120000 * exp((-1) * logT);
    const amrex::Real Corr = mixture + (1.4) * sc[0] + (14.4) * sc[5] + sc[13] +
                             (0.75) * sc[14] + (2.6) * sc[15] + (2) * sc[26] +
                             (-0.17) * sc[48];
    const amrex::Real qf = Corr * k_f * ((sc[2] * sc[2]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[2] - g_RT[3])) * (refC) * (sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= 2.000000 * qdot;
    wdot[3] += qdot;
  }

  {
    // reaction 1:  H + O + M <=> OH + M
    const amrex::Real k_f = 500000 * exp((-1) * logT);
    const amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] +
                             (0.5) * sc[14] + sc[15] + (2) * sc[26] +
                             (-0.3) * sc[48];
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[2]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[2] - g_RT[4])) * (refC) * (sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 32:  H + O2 + M <=> HO2 + M
    const amrex::Real k_f = 2800000 * exp((-0.86) * logT);
    const amrex::Real Corr = mixture + (-1) * sc[3] + (-1) * sc[5] +
                             (-0.25) * sc[14] + (0.5) * sc[15] +
                             (0.5) * sc[26] + (-1) * sc[47] + (-1) * sc[48];
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[3]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC) * (sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 33:  H + O2 + O2 <=> HO2 + O2
    const amrex::Real k_f = 20800000 * exp((-1.24) * logT);
    const amrex::Real qf = k_f * (sc[1] * (sc[3] * sc[3]));
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC) * (sc[3] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 34:  H + O2 + H2O <=> HO2 + H2O
    const amrex::Real k_f = 11260000 * exp((-0.76) * logT);
    const amrex::Real qf = k_f * (sc[1] * sc[3] * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC) * (sc[5] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 35:  H + O2 + N2 <=> HO2 + N2
    const amrex::Real k_f = 26000000 * exp((-1.24) * logT);
    const amrex::Real qf = k_f * (sc[1] * sc[3] * sc[47]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC) * (sc[6] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 36:  H + O2 + AR <=> HO2 + AR
    const amrex::Real k_f = 700000 * exp((-0.8) * logT);
    const amrex::Real qf = k_f * (sc[1] * sc[3] * sc[48]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] + g_RT[3] - g_RT[6])) * (refC) * (sc[6] * sc[48]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] -= qdot;
    wdot[6] += qdot;
  }

  {
    // reaction 38:  2 H + M <=> H2 + M
    const amrex::Real k_f = 1000000 * exp((-1) * logT);
    const amrex::Real Corr = mixture + (-1) * sc[0] + (-1) * sc[5] + sc[13] +
                             (-1) * sc[15] + (2) * sc[26] + (-0.37) * sc[48];
    const amrex::Real qf = Corr * k_f * ((sc[1] * sc[1]));
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC) * (sc[0]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= 2.000000 * qdot;
  }

  {
    // reaction 39:  2 H + H2 <=> H2 + H2
    const amrex::Real k_f = 90000 * exp((-0.6) * logT);
    const amrex::Real qf = k_f * (sc[0] * (sc[1] * sc[1]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC) * ((sc[0] * sc[0]));
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= 2.000000 * qdot;
  }

  {
    // reaction 40:  2 H + H2O <=> H2 + H2O
    const amrex::Real k_f = 60000000 * exp((-1.25) * logT);
    const amrex::Real qf = k_f * ((sc[1] * sc[1]) * sc[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC) * (sc[0] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= 2.000000 * qdot;
  }

  {
    // reaction 41:  2 H + CO2 <=> H2 + CO2
    const amrex::Real k_f = 550000000 * exp((-2) * logT);
    const amrex::Real qf = k_f * ((sc[1] * sc[1]) * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + 2.000000 * g_RT[1])) * (refC) * (sc[0] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= 2.000000 * qdot;
  }

  {
    // reaction 42:  H + OH + M <=> H2O + M
    const amrex::Real k_f = 22000000000 * exp((-2) * logT);
    const amrex::Real Corr = mixture + (-0.27) * sc[0] + (2.65) * sc[5] +
                             sc[13] + (2) * sc[26] + (-0.62) * sc[48];
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[4]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[4] - g_RT[5])) * (refC) * (sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 165:  HCO + H2O <=> CO + H + H2O
    const amrex::Real k_f =
      1500000000000 * exp((-1) * logT - (8554.68331868023) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[16]);
    const amrex::Real qr = k_f * exp(-(-g_RT[1] - g_RT[14] + g_RT[16])) *
                           (refCinv) * (sc[1] * sc[5] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[14] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 166:  HCO + M <=> CO + H + M
    const amrex::Real k_f =
      187000000000 * exp((-1) * logT - (8554.68331868023) * invT);
    const amrex::Real Corr = mixture + sc[0] + (-1) * sc[5] + sc[13] +
                             (0.5) * sc[14] + sc[15] + (2) * sc[26];
    const amrex::Real qf = Corr * k_f * (sc[16]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[1] - g_RT[14] + g_RT[16])) *
                           (refCinv) * (sc[1] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[14] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 186:  NO + O + M <=> NO2 + M
    const amrex::Real k_f = 106000000 * exp((-1.41) * logT);
    const amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] +
                             (0.5) * sc[14] + sc[15] + (2) * sc[26] +
                             (-0.3) * sc[48];
    const amrex::Real qf = Corr * k_f * (sc[2] * sc[35]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[2] + g_RT[35] - g_RT[36])) * (refC) * (sc[36]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[35] -= qdot;
    wdot[36] += qdot;
  }

  {
    // reaction 204:  NNH + M <=> H + N2 + M
    const amrex::Real k_f =
      130000000 * exp((-0.11) * logT - (2506.0189957075) * invT);
    const amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] +
                             (0.5) * sc[14] + sc[15] + (2) * sc[26] +
                             (-0.3) * sc[48];
    const amrex::Real qf = Corr * k_f * (sc[34]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[1] + g_RT[34] - g_RT[47])) *
                           (refCinv) * (sc[1] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[34] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 211:  H + NO + M <=> HNO + M
    const amrex::Real k_f =
      44800000 * exp((-1.32) * logT - (372.380332695493) * invT);
    const amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] +
                             (0.5) * sc[14] + sc[15] + (2) * sc[26] +
                             (-0.3) * sc[48];
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[35]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[35] - g_RT[38])) * (refC) * (sc[38]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[35] -= qdot;
    wdot[38] += qdot;
  }

  {
    // reaction 226:  NCO + M <=> CO + N + M
    const amrex::Real k_f = 310000000 * exp(-(27198.8607867451) * invT);
    const amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] +
                             (0.5) * sc[14] + sc[15] + (2) * sc[26] +
                             (-0.3) * sc[48];
    const amrex::Real qf = Corr * k_f * (sc[46]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[14] - g_RT[30] + g_RT[46])) * (refCinv) *
                           (sc[14] * sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[30] += qdot;
    wdot[46] -= qdot;
  }

  {
    // reaction 229:  HCN + M <=> CN + H + M
    const amrex::Real k_f =
      1.04e+23 * exp((-3.3) * logT - (63707.2298908775) * invT);
    const amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] +
                             (0.5) * sc[14] + sc[15] + (2) * sc[26] +
                             (-0.3) * sc[48];
    const amrex::Real qf = Corr * k_f * (sc[40]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[1] - g_RT[39] + g_RT[40])) *
                           (refCinv) * (sc[1] * sc[39]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[39] += qdot;
    wdot[40] -= qdot;
  }

  {
    // reaction 268:  HNCO + M <=> CO + NH + M
    const amrex::Real k_f = 11800000000 * exp(-(42632.5159269759) * invT);
    const amrex::Real Corr = mixture + sc[0] + (5) * sc[5] + sc[13] +
                             (0.5) * sc[14] + sc[15] + (2) * sc[26] +
                             (-0.3) * sc[48];
    const amrex::Real qf = Corr * k_f * (sc[45]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[14] - g_RT[31] + g_RT[45])) * (refCinv) *
                           (sc[14] * sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[31] += qdot;
    wdot[45] -= qdot;
  }

  {
    // reaction 302:  CH3CHO + CH3 => CH4 + CO + CH3
    const amrex::Real k_f =
      2.72 * exp((1.77) * logT - (2979.04266156394) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[52]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[14] += qdot;
    wdot[52] -= qdot;
  }

  {
    // reaction 332:  CO + F + M <=> CFO + M
    const amrex::Real k_f =
      30900000 * exp((-1.4) * logT - (-245.066516246898) * invT);
    const amrex::Real Corr = mixture + sc[0] + (17) * sc[5] + sc[13] +
                             (0.5) * sc[14] + sc[15] + (2) * sc[26];
    const amrex::Real qf = Corr * k_f * (sc[14] * sc[54]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[14] + g_RT[54] - g_RT[69])) * (refC) * (sc[69]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[54] -= qdot;
    wdot[69] += qdot;
  }

  {
    // reaction 340:  HF + M <=> F + H + M
    const amrex::Real k_f = 31200000 * exp(-(49979.4792477248) * invT);
    const amrex::Real Corr = mixture;
    const amrex::Real qf = Corr * k_f * (sc[53]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[1] + g_RT[53] - g_RT[54])) *
                           (refCinv) * (sc[1] * sc[54]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[53] -= qdot;
    wdot[54] += qdot;
  }

  {
    // reaction 349:  CHF + HF + M <=> CH2F2 + M
    const amrex::Real k_f =
      304000000000000 * exp((-3.26) * logT - (2043.05966316716) * invT);
    const amrex::Real Corr = mixture + sc[0] + (8) * sc[5] + sc[13] +
                             (0.5) * sc[14] + sc[15] + (2) * sc[26] + sc[53] +
                             (5) * sc[56] + (5) * sc[57] + (5) * sc[58];
    const amrex::Real qf = Corr * k_f * (sc[53] * sc[63]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[53] - g_RT[57] + g_RT[63])) * (refC) * (sc[57]);
    const amrex::Real qdot = qf - qr;
    wdot[53] -= qdot;
    wdot[57] += qdot;
    wdot[63] -= qdot;
  }

  {
    // reaction 352:  CHF3 + M <=> CF2 + HF + M
    const amrex::Real k_f =
      3.41e+24 * exp((-4) * logT - (34747.1107738159) * invT);
    const amrex::Real Corr = mixture + sc[0] + (8) * sc[5] + sc[13] +
                             (0.5) * sc[14] + sc[15] + (2) * sc[26] + sc[53] +
                             (5) * sc[56] + (5) * sc[57] + (5) * sc[58];
    const amrex::Real qf = Corr * k_f * (sc[58]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[53] + g_RT[58] - g_RT[64])) * (refCinv) *
                           (sc[53] * sc[64]);
    const amrex::Real qdot = qf - qr;
    wdot[53] += qdot;
    wdot[58] -= qdot;
    wdot[64] += qdot;
  }

  {
    // reaction 353:  CF4 + M <=> CF3 + F + M
    const amrex::Real k_f =
      9e+28 * exp((-4.64) * logT - (61593.7198944977) * invT);
    const amrex::Real Corr =
      mixture + sc[0] + (8) * sc[5] + sc[13] + (0.5) * sc[14] + sc[15] +
      (2) * sc[26] + (5) * sc[56] + (5) * sc[57] + (5) * sc[58] + (5) * sc[59];
    const amrex::Real qf = Corr * k_f * (sc[59]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[54] + g_RT[59] - g_RT[62])) * (refCinv) *
                           (sc[54] * sc[62]);
    const amrex::Real qdot = qf - qr;
    wdot[54] += qdot;
    wdot[59] -= qdot;
    wdot[62] += qdot;
  }

  {
    // reaction 410:  CF3O + M <=> CF2O + F + M
    const amrex::Real k_f =
      9.03e+20 * exp((-3.42) * logT - (10919.8016479624) * invT);
    const amrex::Real Corr = mixture;
    const amrex::Real qf = Corr * k_f * (sc[66]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[54] + g_RT[66] - g_RT[67])) * (refCinv) *
                           (sc[54] * sc[67]);
    const amrex::Real qdot = qf - qr;
    wdot[54] += qdot;
    wdot[66] -= qdot;
    wdot[67] += qdot;
  }

  {
    // reaction 449:  CHFO + M <=> CO + HF + M
    const amrex::Real k_f =
      2.48e+19 * exp((-3) * logT - (21638.3166296029) * invT);
    const amrex::Real Corr = mixture;
    const amrex::Real qf = Corr * k_f * (sc[68]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[14] - g_RT[53] + g_RT[68])) * (refCinv) *
                           (sc[14] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[53] += qdot;
    wdot[68] -= qdot;
  }

  {
    // reaction 502:  2 F + M <=> F2 + M
    const amrex::Real k_f = 100;
    const amrex::Real Corr = mixture;
    const amrex::Real qf = Corr * k_f * ((sc[54] * sc[54]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[54] - g_RT[55])) * (refC) * (sc[55]);
    const amrex::Real qdot = qf - qr;
    wdot[54] -= 2.000000 * qdot;
    wdot[55] += qdot;
  }

  {
    // reaction 2:  H2 + O <=> H + OH
    const amrex::Real k_f =
      0.0387 * exp((2.7) * logT - (3150.13632793755) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[2]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[2] - g_RT[4])) * (sc[1] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 3:  HO2 + O <=> O2 + OH
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[2] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[4] + g_RT[6])) * (sc[3] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[4] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 4:  H2O2 + O <=> HO2 + OH
    const amrex::Real k_f = 9.63 * exp((2) * logT - (2012.86666321888) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[6] + g_RT[7])) * (sc[4] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 5:  CH + O <=> CO + H
    const amrex::Real k_f = 57000000;
    const amrex::Real qf = k_f * (sc[2] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[9] - g_RT[14])) * (sc[1] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[9] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 6:  CH2 + O <=> H + HCO
    const amrex::Real k_f = 80000000;
    const amrex::Real qf = k_f * (sc[2] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[10] - g_RT[16])) * (sc[1] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[10] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 7:  CH2(S) + O <=> CO + H2
    const amrex::Real k_f = 15000000;
    const amrex::Real qf = k_f * (sc[2] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[2] + g_RT[11] - g_RT[14])) * (sc[0] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[2] -= qdot;
    wdot[11] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 8:  CH2(S) + O <=> H + HCO
    const amrex::Real k_f = 15000000;
    const amrex::Real qf = k_f * (sc[2] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[11] - g_RT[16])) * (sc[1] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[11] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 9:  CH3 + O <=> CH2O + H
    const amrex::Real k_f = 50600000;
    const amrex::Real qf = k_f * (sc[2] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[12] - g_RT[17])) * (sc[1] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[12] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 10:  CH4 + O <=> CH3 + OH
    const amrex::Real k_f =
      1020 * exp((1.5) * logT - (4327.66332592059) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[12] + g_RT[13])) * (sc[4] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 12:  HCO + O <=> CO + OH
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[2] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[14] + g_RT[16])) * (sc[4] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[14] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 13:  HCO + O <=> CO2 + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[2] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[15] + g_RT[16])) * (sc[1] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 14:  CH2O + O <=> HCO + OH
    const amrex::Real k_f = 39000000 * exp(-(1781.38699694871) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[16] + g_RT[17])) * (sc[4] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[16] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 15:  CH2OH + O <=> CH2O + OH
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[2] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[17] + g_RT[18])) * (sc[4] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[17] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 16:  CH3O + O <=> CH2O + OH
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[2] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[17] + g_RT[19])) * (sc[4] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[17] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 17:  CH3OH + O <=> CH2OH + OH
    const amrex::Real k_f =
      0.388 * exp((2.5) * logT - (1559.97166399463) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[18] + g_RT[20])) * (sc[4] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[18] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 18:  CH3OH + O <=> CH3O + OH
    const amrex::Real k_f = 0.13 * exp((2.5) * logT - (2516.0833290236) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[19] + g_RT[20])) * (sc[4] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 19:  C2H + O <=> CH + CO
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[2] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[9] - g_RT[14] + g_RT[21])) * (sc[9] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[9] += qdot;
    wdot[14] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 20:  C2H2 + O <=> H + HCCO
    const amrex::Real k_f = 13.5 * exp((2) * logT - (956.111665028967) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[22] - g_RT[27])) * (sc[1] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[22] -= qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 21:  C2H2 + O <=> C2H + OH
    const amrex::Real k_f =
      46000000000000 * exp((-1.41) * logT - (14568.1224750466) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[21] + g_RT[22])) * (sc[4] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 22:  C2H2 + O <=> CH2 + CO
    const amrex::Real k_f = 6.94 * exp((2) * logT - (956.111665028967) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[10] - g_RT[14] + g_RT[22])) *
                           (sc[10] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[10] += qdot;
    wdot[14] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 23:  C2H3 + O <=> CH2CO + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[2] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[23] - g_RT[28])) * (sc[1] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[23] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 24:  C2H4 + O <=> CH3 + HCO
    const amrex::Real k_f =
      12.5 * exp((1.83) * logT - (110.707666477038) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[12] - g_RT[16] + g_RT[24])) *
                           (sc[12] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[12] += qdot;
    wdot[16] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 25:  C2H5 + O <=> CH2O + CH3
    const amrex::Real k_f = 22400000;
    const amrex::Real qf = k_f * (sc[2] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[12] - g_RT[17] + g_RT[25])) *
                           (sc[12] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[12] += qdot;
    wdot[17] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 26:  C2H6 + O <=> C2H5 + OH
    const amrex::Real k_f =
      89.8 * exp((1.92) * logT - (2863.30282842885) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[25] + g_RT[26])) * (sc[4] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[25] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 27:  HCCO + O <=> 2 CO + H
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[2] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] - 2.000000 * g_RT[14] + g_RT[27])) *
      (refCinv) * (sc[1] * (sc[14] * sc[14]));
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[14] += 2.000000 * qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 28:  CH2CO + O <=> HCCO + OH
    const amrex::Real k_f = 10000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[27] + g_RT[28])) * (sc[4] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[27] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 29:  CH2CO + O <=> CH2 + CO2
    const amrex::Real k_f = 1750000 * exp(-(679.342498836372) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[28]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[10] - g_RT[15] + g_RT[28])) *
                           (sc[10] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[10] += qdot;
    wdot[15] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 30:  CO + O2 <=> CO2 + O
    const amrex::Real k_f = 2500000 * exp(-(24053.7566254656) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[14] - g_RT[15])) * (sc[2] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 31:  CH2O + O2 <=> HCO + HO2
    const amrex::Real k_f = 100000000 * exp(-(20128.6666321888) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[16] + g_RT[17])) * (sc[6] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[16] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 37:  H + O2 <=> O + OH
    const amrex::Real k_f =
      26500000000 * exp((-0.6707) * logT - (8575.31520197823) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[3] - g_RT[4])) * (sc[2] * sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
  }

  {
    // reaction 43:  H + HO2 <=> H2O + O
    const amrex::Real k_f = 3970000 * exp(-(337.658382754967) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] - g_RT[5] + g_RT[6])) * (sc[2] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 44:  H + HO2 <=> H2 + O2
    const amrex::Real k_f = 44800000 * exp(-(537.435399079441) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[3] + g_RT[6])) * (sc[0] * sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[3] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 45:  H + HO2 <=> 2 OH
    const amrex::Real k_f = 84000000 * exp(-(319.542582785997) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - 2.000000 * g_RT[4] + g_RT[6])) * ((sc[4] * sc[4]));
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += 2.000000 * qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 46:  H + H2O2 <=> H2 + HO2
    const amrex::Real k_f = 12.1 * exp((2) * logT - (2616.72666218454) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[6] + g_RT[7])) * (sc[0] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 47:  H + H2O2 <=> H2O + OH
    const amrex::Real k_f = 10000000 * exp(-(1811.57999689699) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[5] + g_RT[7])) * (sc[4] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[5] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 48:  CH + H <=> C + H2
    const amrex::Real k_f = 165000000;
    const amrex::Real qf = k_f * (sc[1] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[8] + g_RT[9])) * (sc[0] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[8] += qdot;
    wdot[9] -= qdot;
  }

  {
    // reaction 50:  CH2(S) + H <=> CH + H2
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[1] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[9] + g_RT[11])) * (sc[0] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[9] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 52:  CH4 + H <=> CH3 + H2
    const amrex::Real k_f =
      660 * exp((1.62) * logT - (5454.86865732316) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[12] + g_RT[13])) * (sc[0] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 54:  H + HCO <=> CO + H2
    const amrex::Real k_f = 73400000;
    const amrex::Real qf = k_f * (sc[1] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[14] + g_RT[16])) * (sc[0] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[14] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 57:  CH2O + H <=> H2 + HCO
    const amrex::Real k_f =
      57.4 * exp((1.9) * logT - (1379.82009763654) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[16] + g_RT[17])) * (sc[0] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[16] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 59:  CH2OH + H <=> CH2O + H2
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[1] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[17] + g_RT[18])) * (sc[0] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[17] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 60:  CH2OH + H <=> CH3 + OH
    const amrex::Real k_f =
      165000 * exp((0.65) * logT - (-142.91353308854) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[12] + g_RT[18])) * (sc[4] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[12] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 61:  CH2OH + H <=> CH2(S) + H2O
    const amrex::Real k_f =
      32800000 * exp((-0.09) * logT - (306.962166140879) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[11] + g_RT[18])) * (sc[5] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[11] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 63:  CH3O + H <=> CH2OH + H
    const amrex::Real k_f =
      41.5 * exp((1.63) * logT - (968.188865008281) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[1] - g_RT[18] + g_RT[19])) * (sc[1] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[1] += qdot;
    wdot[18] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 64:  CH3O + H <=> CH2O + H2
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[1] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[17] + g_RT[19])) * (sc[0] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[17] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 65:  CH3O + H <=> CH3 + OH
    const amrex::Real k_f =
      1500000 * exp((0.5) * logT - (-55.3538332385192) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[12] + g_RT[19])) * (sc[4] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[12] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 66:  CH3O + H <=> CH2(S) + H2O
    const amrex::Real k_f =
      262000000 * exp((-0.23) * logT - (538.44183241105) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[5] - g_RT[11] + g_RT[19])) * (sc[5] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[5] += qdot;
    wdot[11] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 67:  CH3OH + H <=> CH2OH + H2
    const amrex::Real k_f = 17 * exp((2.1) * logT - (2450.66516246898) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[18] + g_RT[20])) * (sc[0] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[18] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 68:  CH3OH + H <=> CH3O + H2
    const amrex::Real k_f = 4.2 * exp((2.1) * logT - (2450.66516246898) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[19] + g_RT[20])) * (sc[0] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 72:  C2H3 + H <=> C2H2 + H2
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[1] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[22] + g_RT[23])) * (sc[0] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[22] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 74:  C2H4 + H <=> C2H3 + H2
    const amrex::Real k_f =
      1.325 * exp((2.53) * logT - (6159.37198944977) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[23] + g_RT[24])) * (sc[0] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 76:  C2H5 + H <=> C2H4 + H2
    const amrex::Real k_f = 2000000;
    const amrex::Real qf = k_f * (sc[1] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[24] + g_RT[25])) * (sc[0] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[24] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 77:  C2H6 + H <=> C2H5 + H2
    const amrex::Real k_f = 115 * exp((1.9) * logT - (3789.22149350954) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[25] + g_RT[26])) * (sc[0] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[25] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 78:  H + HCCO <=> CH2(S) + CO
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[1] * sc[27]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[11] - g_RT[14] + g_RT[27])) *
                           (sc[11] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[11] += qdot;
    wdot[14] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 79:  CH2CO + H <=> H2 + HCCO
    const amrex::Real k_f = 50000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[27] + g_RT[28])) * (sc[0] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[27] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 80:  CH2CO + H <=> CH3 + CO
    const amrex::Real k_f = 11300000 * exp(-(1725.02673037858) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[28]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[12] - g_RT[14] + g_RT[28])) *
                           (sc[12] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[12] += qdot;
    wdot[14] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 81:  H + HCCOH <=> CH2CO + H
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[1] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[1] - g_RT[28] + g_RT[29])) * (sc[1] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[1] += qdot;
    wdot[28] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 83:  H2 + OH <=> H + H2O
    const amrex::Real k_f =
      216 * exp((1.51) * logT - (1726.03316371019) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[4] - g_RT[5])) * (sc[1] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 85:  2 OH <=> H2O + O
    const amrex::Real k_f =
      0.0357 * exp((2.4) * logT - (-1061.78716484796) * invT);
    const amrex::Real qf = k_f * ((sc[4] * sc[4]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + 2.000000 * g_RT[4] - g_RT[5])) * (sc[2] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= 2.000000 * qdot;
    wdot[5] += qdot;
  }

  {
    // reaction 86:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f = 14500000 * exp(-(-251.60833290236) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[5] + g_RT[6])) * (sc[3] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 87:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f = 2000000 * exp(-(214.873516298615) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7])) * (sc[5] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 88:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f = 1700000000000 * exp(-(14799.6021413168) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7])) * (sc[5] * sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[6] += qdot;
    wdot[7] -= qdot;
  }

  {
    // reaction 89:  C + OH <=> CO + H
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[4] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[8] - g_RT[14])) * (sc[1] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[8] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 90:  CH + OH <=> H + HCO
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[4] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[9] - g_RT[16])) * (sc[1] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[9] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 91:  CH2 + OH <=> CH2O + H
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[4] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[10] - g_RT[17])) * (sc[1] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[10] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 92:  CH2 + OH <=> CH + H2O
    const amrex::Real k_f = 11.3 * exp((2) * logT - (1509.64999741416) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[9] + g_RT[10])) * (sc[5] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[9] += qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 93:  CH2(S) + OH <=> CH2O + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[4] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[11] - g_RT[17])) * (sc[1] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[11] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 95:  CH3 + OH <=> CH2 + H2O
    const amrex::Real k_f = 56 * exp((1.6) * logT - (2727.43432866158) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[10] + g_RT[12])) * (sc[5] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[10] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 96:  CH3 + OH <=> CH2(S) + H2O
    const amrex::Real k_f =
      644000000000 * exp((-1.34) * logT - (713.058015445288) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[11] + g_RT[12])) * (sc[5] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[11] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 97:  CH4 + OH <=> CH3 + H2O
    const amrex::Real k_f = 100 * exp((1.6) * logT - (1570.03599731073) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[12] + g_RT[13])) * (sc[5] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[12] += qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 98:  CO + OH <=> CO2 + H
    const amrex::Real k_f =
      47.6 * exp((1.228) * logT - (35.2251666063304) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[14] - g_RT[15])) * (sc[1] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 99:  HCO + OH <=> CO + H2O
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[4] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[14] + g_RT[16])) * (sc[5] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[14] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 100:  CH2O + OH <=> H2O + HCO
    const amrex::Real k_f =
      3430 * exp((1.18) * logT - (-224.93784961471) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[16] + g_RT[17])) * (sc[5] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[16] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 101:  CH2OH + OH <=> CH2O + H2O
    const amrex::Real k_f = 5000000;
    const amrex::Real qf = k_f * (sc[4] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[17] + g_RT[18])) * (sc[5] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[17] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 102:  CH3O + OH <=> CH2O + H2O
    const amrex::Real k_f = 5000000;
    const amrex::Real qf = k_f * (sc[4] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[17] + g_RT[19])) * (sc[5] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[17] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 103:  CH3OH + OH <=> CH2OH + H2O
    const amrex::Real k_f = 1.44 * exp((2) * logT - (-422.701999275965) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[18] + g_RT[20])) * (sc[5] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[18] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 104:  CH3OH + OH <=> CH3O + H2O
    const amrex::Real k_f = 6.3 * exp((2) * logT - (754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[19] + g_RT[20])) * (sc[5] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 105:  C2H + OH <=> H + HCCO
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[4] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[21] - g_RT[27])) * (sc[1] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[21] -= qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 106:  C2H2 + OH <=> CH2CO + H
    const amrex::Real k_f =
      2.18e-10 * exp((4.5) * logT - (-503.21666580472) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[22] - g_RT[28])) * (sc[1] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[22] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 107:  C2H2 + OH <=> H + HCCOH
    const amrex::Real k_f =
      0.504 * exp((2.3) * logT - (6793.42498836372) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[22] - g_RT[29])) * (sc[1] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[22] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 108:  C2H2 + OH <=> C2H + H2O
    const amrex::Real k_f = 33.7 * exp((2) * logT - (7045.03332126608) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[21] + g_RT[22])) * (sc[5] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 109:  C2H2 + OH <=> CH3 + CO
    const amrex::Real k_f =
      4.83e-10 * exp((4) * logT - (-1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[12] - g_RT[14] + g_RT[22])) *
                           (sc[12] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[12] += qdot;
    wdot[14] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 110:  C2H3 + OH <=> C2H2 + H2O
    const amrex::Real k_f = 5000000;
    const amrex::Real qf = k_f * (sc[4] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[22] + g_RT[23])) * (sc[5] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[22] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 111:  C2H4 + OH <=> C2H3 + H2O
    const amrex::Real k_f = 3.6 * exp((2) * logT - (1258.0416645118) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[23] + g_RT[24])) * (sc[5] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 112:  C2H6 + OH <=> C2H5 + H2O
    const amrex::Real k_f =
      3.54 * exp((2.12) * logT - (437.798499250106) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[25] + g_RT[26])) * (sc[5] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[25] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 113:  CH2CO + OH <=> H2O + HCCO
    const amrex::Real k_f = 7500000 * exp(-(1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[27] + g_RT[28])) * (sc[5] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[27] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 114:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f = 130000 * exp(-(-820.243165261693) * invT);
    const amrex::Real qf = k_f * ((sc[6] * sc[6]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[6] - g_RT[7])) * (sc[3] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[6] -= 2.000000 * qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 115:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f = 420000000 * exp(-(6038.59998965664) * invT);
    const amrex::Real qf = k_f * ((sc[6] * sc[6]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[6] - g_RT[7])) * (sc[3] * sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[6] -= 2.000000 * qdot;
    wdot[7] += qdot;
  }

  {
    // reaction 116:  CH2 + HO2 <=> CH2O + OH
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[6] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[10] - g_RT[17])) * (sc[4] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[10] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 117:  CH3 + HO2 <=> CH4 + O2
    const amrex::Real k_f = 1000000;
    const amrex::Real qf = k_f * (sc[6] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[6] + g_RT[12] - g_RT[13])) * (sc[3] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[6] -= qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 118:  CH3 + HO2 <=> CH3O + OH
    const amrex::Real k_f = 37800000;
    const amrex::Real qf = k_f * (sc[6] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[12] - g_RT[19])) * (sc[4] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[12] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 119:  CO + HO2 <=> CO2 + OH
    const amrex::Real k_f = 150000000 * exp(-(11875.9133129914) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[14] - g_RT[15])) * (sc[4] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 120:  CH2O + HO2 <=> H2O2 + HCO
    const amrex::Real k_f = 5.6 * exp((2) * logT - (6038.59998965664) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[16] + g_RT[17])) * (sc[7] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[7] += qdot;
    wdot[16] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 121:  C + O2 <=> CO + O
    const amrex::Real k_f = 58000000 * exp(-(289.852799503519) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[8]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[8] - g_RT[14])) * (sc[2] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[8] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 122:  C + CH2 <=> C2H + H
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[8] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[8] + g_RT[10] - g_RT[21])) * (sc[1] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[8] -= qdot;
    wdot[10] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 123:  C + CH3 <=> C2H2 + H
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[8] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[8] + g_RT[12] - g_RT[22])) * (sc[1] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[8] -= qdot;
    wdot[12] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 124:  CH + O2 <=> HCO + O
    const amrex::Real k_f = 67100000;
    const amrex::Real qf = k_f * (sc[3] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[9] - g_RT[16])) * (sc[2] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[9] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 125:  CH + H2 <=> CH2 + H
    const amrex::Real k_f = 108000000 * exp(-(1565.00383065268) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[9] - g_RT[10])) * (sc[1] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[9] -= qdot;
    wdot[10] += qdot;
  }

  {
    // reaction 126:  CH + H2O <=> CH2O + H
    const amrex::Real k_f = 5710000 * exp(-(-379.928582682563) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[5] + g_RT[9] - g_RT[17])) * (sc[1] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[5] -= qdot;
    wdot[9] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 127:  CH + CH2 <=> C2H2 + H
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[9] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[9] + g_RT[10] - g_RT[22])) * (sc[1] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[9] -= qdot;
    wdot[10] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 128:  CH + CH3 <=> C2H3 + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[9] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[9] + g_RT[12] - g_RT[23])) * (sc[1] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[9] -= qdot;
    wdot[12] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 129:  CH + CH4 <=> C2H4 + H
    const amrex::Real k_f = 60000000;
    const amrex::Real qf = k_f * (sc[9] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[9] + g_RT[13] - g_RT[24])) * (sc[1] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[9] -= qdot;
    wdot[13] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 131:  CH + CO2 <=> CO + HCO
    const amrex::Real k_f = 190000000 * exp(-(7946.79758638813) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[14] + g_RT[15] - g_RT[16])) *
                           (sc[14] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[14] += qdot;
    wdot[15] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 132:  CH + CH2O <=> CH2CO + H
    const amrex::Real k_f = 94600000 * exp(-(-259.156582889431) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[9] + g_RT[17] - g_RT[28])) * (sc[1] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[9] -= qdot;
    wdot[17] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 133:  CH + HCCO <=> C2H2 + CO
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[9] * sc[27]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[14] - g_RT[22] + g_RT[27])) *
                           (sc[14] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[14] += qdot;
    wdot[22] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 134:  CH2 + O2 => CO + H + OH
    const amrex::Real k_f = 5000000 * exp(-(754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[10]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[10] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 135:  CH2 + H2 <=> CH3 + H
    const amrex::Real k_f = 0.5 * exp((2) * logT - (3638.25649376812) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[10] - g_RT[12])) * (sc[1] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[10] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 136:  2 CH2 <=> C2H2 + H2
    const amrex::Real k_f = 1600000000 * exp(-(6010.41985637157) * invT);
    const amrex::Real qf = k_f * ((sc[10] * sc[10]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + 2.000000 * g_RT[10] - g_RT[22])) *
                           (sc[0] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[10] -= 2.000000 * qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 137:  CH2 + CH3 <=> C2H4 + H
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[10] * sc[12]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[10] + g_RT[12] - g_RT[24])) *
                           (sc[1] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[10] -= qdot;
    wdot[12] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 138:  CH2 + CH4 <=> 2 CH3
    const amrex::Real k_f = 2.46 * exp((2) * logT - (4161.60182620503) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - 2.000000 * g_RT[12] + g_RT[13])) *
                           ((sc[12] * sc[12]));
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[12] += 2.000000 * qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 140:  CH2 + HCCO <=> C2H3 + CO
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[10] * sc[27]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[14] - g_RT[23] + g_RT[27])) *
                           (sc[14] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[14] += qdot;
    wdot[23] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 141:  CH2(S) + N2 <=> CH2 + N2
    const amrex::Real k_f = 15000000 * exp(-(301.929999482832) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[47]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[11] + g_RT[47] - g_RT[47])) *
                           (sc[10] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[11] -= qdot;
    wdot[47] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 142:  AR + CH2(S) <=> AR + CH2
    const amrex::Real k_f = 9000000 * exp(-(301.929999482832) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[48]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[11] + g_RT[48] - g_RT[48])) *
                           (sc[10] * sc[48]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[11] -= qdot;
    wdot[48] -= qdot;
    wdot[48] += qdot;
  }

  {
    // reaction 143:  CH2(S) + O2 <=> CO + H + OH
    const amrex::Real k_f = 28000000;
    const amrex::Real qf = k_f * (sc[3] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[3] - g_RT[4] + g_RT[11] - g_RT[14])) *
      (refCinv) * (sc[1] * sc[4] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[11] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 144:  CH2(S) + O2 <=> CO + H2O
    const amrex::Real k_f = 12000000;
    const amrex::Real qf = k_f * (sc[3] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[5] + g_RT[11] - g_RT[14])) * (sc[5] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[5] += qdot;
    wdot[11] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 145:  CH2(S) + H2 <=> CH3 + H
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[0] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[11] - g_RT[12])) * (sc[1] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[11] -= qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 147:  CH2(S) + H2O <=> CH2 + H2O
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[5] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[5] - g_RT[5] - g_RT[10] + g_RT[11])) * (sc[5] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[5] += qdot;
    wdot[10] += qdot;
    wdot[11] -= qdot;
  }

  {
    // reaction 148:  CH2(S) + CH3 <=> C2H4 + H
    const amrex::Real k_f = 12000000 * exp(-(-286.83349950869) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[12]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[11] + g_RT[12] - g_RT[24])) *
                           (sc[1] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[11] -= qdot;
    wdot[12] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 149:  CH2(S) + CH4 <=> 2 CH3
    const amrex::Real k_f = 16000000 * exp(-(-286.83349950869) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - 2.000000 * g_RT[12] + g_RT[13])) *
                           ((sc[12] * sc[12]));
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[12] += 2.000000 * qdot;
    wdot[13] -= qdot;
  }

  {
    // reaction 150:  CH2(S) + CO <=> CH2 + CO
    const amrex::Real k_f = 9000000;
    const amrex::Real qf = k_f * (sc[11] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[11] + g_RT[14] - g_RT[14])) *
                           (sc[10] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[11] -= qdot;
    wdot[14] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 151:  CH2(S) + CO2 <=> CH2 + CO2
    const amrex::Real k_f = 7000000;
    const amrex::Real qf = k_f * (sc[11] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[11] + g_RT[15] - g_RT[15])) *
                           (sc[10] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[11] -= qdot;
    wdot[15] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 152:  CH2(S) + CO2 <=> CH2O + CO
    const amrex::Real k_f = 14000000;
    const amrex::Real qf = k_f * (sc[11] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[14] + g_RT[15] - g_RT[17])) *
                           (sc[14] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[14] += qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 153:  C2H6 + CH2(S) <=> C2H5 + CH3
    const amrex::Real k_f = 40000000 * exp(-(-276.769166192596) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[26]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[12] - g_RT[25] + g_RT[26])) *
                           (sc[12] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[12] += qdot;
    wdot[25] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 154:  CH3 + O2 <=> CH3O + O
    const amrex::Real k_f = 35600000 * exp(-(15338.0439737279) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[12] - g_RT[19])) * (sc[2] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[12] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 155:  CH3 + O2 <=> CH2O + OH
    const amrex::Real k_f = 2310000 * exp(-(10222.8465658229) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[12] - g_RT[17])) * (sc[4] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[12] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 156:  CH3 + H2O2 <=> CH4 + HO2
    const amrex::Real k_f =
      0.0245 * exp((2.47) * logT - (2606.66232886845) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[7] + g_RT[12] - g_RT[13])) * (sc[6] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[7] -= qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 158:  2 CH3 <=> C2H5 + H
    const amrex::Real k_f =
      6840000 * exp((0.1) * logT - (5334.09665753003) * invT);
    const amrex::Real qf = k_f * ((sc[12] * sc[12]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + 2.000000 * g_RT[12] - g_RT[25])) *
                           (sc[1] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[12] -= 2.000000 * qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 159:  CH3 + HCO <=> CH4 + CO
    const amrex::Real k_f = 26480000;
    const amrex::Real qf = k_f * (sc[12] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[13] - g_RT[14] + g_RT[16])) *
                           (sc[13] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[14] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 160:  CH2O + CH3 <=> CH4 + HCO
    const amrex::Real k_f =
      0.00332 * exp((2.81) * logT - (2948.84966161566) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[17]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[13] - g_RT[16] + g_RT[17])) *
                           (sc[13] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[16] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 161:  CH3 + CH3OH <=> CH2OH + CH4
    const amrex::Real k_f = 30 * exp((1.5) * logT - (5001.97365809891) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[13] - g_RT[18] + g_RT[20])) *
                           (sc[13] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[18] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 162:  CH3 + CH3OH <=> CH3O + CH4
    const amrex::Real k_f = 10 * exp((1.5) * logT - (5001.97365809891) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[13] - g_RT[19] + g_RT[20])) *
                           (sc[13] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 163:  C2H4 + CH3 <=> C2H3 + CH4
    const amrex::Real k_f = 0.227 * exp((2) * logT - (4629.59332540342) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[13] - g_RT[23] + g_RT[24])) *
                           (sc[13] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[23] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 164:  C2H6 + CH3 <=> C2H5 + CH4
    const amrex::Real k_f =
      6.14 * exp((1.74) * logT - (5258.61415765932) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[26]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[13] - g_RT[25] + g_RT[26])) *
                           (sc[13] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[25] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 167:  HCO + O2 <=> CO + HO2
    const amrex::Real k_f = 13450000 * exp(-(201.286666321888) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[14] + g_RT[16])) * (sc[6] * sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[14] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 168:  CH2OH + O2 <=> CH2O + HO2
    const amrex::Real k_f = 18000000 * exp(-(452.894999224248) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[17] + g_RT[18])) * (sc[6] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[17] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 169:  CH3O + O2 <=> CH2O + HO2
    const amrex::Real k_f =
      4.28e-19 * exp((7.6) * logT - (-1776.35483029066) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[17] + g_RT[19])) * (sc[6] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[17] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 170:  C2H + O2 <=> CO + HCO
    const amrex::Real k_f = 10000000 * exp(-(-379.928582682563) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[21]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[14] - g_RT[16] + g_RT[21])) *
                           (sc[14] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[14] += qdot;
    wdot[16] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 171:  C2H + H2 <=> C2H2 + H
    const amrex::Real k_f =
      56800 * exp((0.9) * logT - (1002.91081494881) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[21] - g_RT[22])) * (sc[1] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[21] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 172:  C2H3 + O2 <=> CH2O + HCO
    const amrex::Real k_f =
      45800000000 * exp((-1.39) * logT - (510.76491579179) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[16] - g_RT[17] + g_RT[23])) *
                           (sc[16] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[16] += qdot;
    wdot[17] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 174:  C2H5 + O2 <=> C2H4 + HO2
    const amrex::Real k_f = 840000 * exp(-(1949.96457999329) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[24] + g_RT[25])) * (sc[6] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[24] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 175:  HCCO + O2 <=> 2 CO + OH
    const amrex::Real k_f = 3200000 * exp(-(429.747032597231) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] - 2.000000 * g_RT[14] + g_RT[27])) *
      (refCinv) * (sc[4] * (sc[14] * sc[14]));
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[14] += 2.000000 * qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 176:  2 HCCO <=> C2H2 + 2 CO
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * ((sc[27] * sc[27]));
    const amrex::Real qr =
      k_f * exp(-(-2.000000 * g_RT[14] - g_RT[22] + 2.000000 * g_RT[27])) *
      (refCinv) * ((sc[14] * sc[14]) * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += 2.000000 * qdot;
    wdot[22] += qdot;
    wdot[27] -= 2.000000 * qdot;
  }

  {
    // reaction 177:  N + NO <=> N2 + O
    const amrex::Real k_f = 27000000 * exp(-(178.641916360675) * invT);
    const amrex::Real qf = k_f * (sc[30] * sc[35]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[30] + g_RT[35] - g_RT[47])) *
                           (sc[2] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[30] -= qdot;
    wdot[35] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 178:  N + O2 <=> NO + O
    const amrex::Real k_f = 9000 * exp((1) * logT - (3270.90832773068) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[30]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[30] - g_RT[35])) * (sc[2] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[30] -= qdot;
    wdot[35] += qdot;
  }

  {
    // reaction 179:  N + OH <=> H + NO
    const amrex::Real k_f = 33600000 * exp(-(193.738416334817) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[30]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[30] - g_RT[35])) * (sc[1] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[30] -= qdot;
    wdot[35] += qdot;
  }

  {
    // reaction 180:  N2O + O <=> N2 + O2
    const amrex::Real k_f = 1400000 * exp(-(5439.77215734902) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[37]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[3] + g_RT[37] - g_RT[47])) * (sc[3] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[37] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 181:  N2O + O <=> 2 NO
    const amrex::Real k_f = 29000000 * exp(-(11649.4658133793) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[37]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - 2.000000 * g_RT[35] + g_RT[37])) *
                           ((sc[35] * sc[35]));
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[35] += 2.000000 * qdot;
    wdot[37] -= qdot;
  }

  {
    // reaction 182:  H + N2O <=> N2 + OH
    const amrex::Real k_f = 387000000 * exp(-(9500.73065039311) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[37]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] + g_RT[37] - g_RT[47])) * (sc[4] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[37] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 183:  N2O + OH <=> HO2 + N2
    const amrex::Real k_f = 2000000 * exp(-(10597.7429818474) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[37]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[6] + g_RT[37] - g_RT[47])) * (sc[6] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[6] += qdot;
    wdot[37] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 185:  HO2 + NO <=> NO2 + OH
    const amrex::Real k_f = 2110000 * exp(-(-241.543999586265) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[35]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[35] - g_RT[36])) * (sc[4] * sc[36]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[35] -= qdot;
    wdot[36] += qdot;
  }

  {
    // reaction 187:  NO2 + O <=> NO + O2
    const amrex::Real k_f = 3900000 * exp(-(-120.771999793133) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[36]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[3] - g_RT[35] + g_RT[36])) * (sc[3] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[35] += qdot;
    wdot[36] -= qdot;
  }

  {
    // reaction 188:  H + NO2 <=> NO + OH
    const amrex::Real k_f = 132000000 * exp(-(181.157999689699) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[36]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[35] + g_RT[36])) * (sc[4] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[35] += qdot;
    wdot[36] -= qdot;
  }

  {
    // reaction 189:  NH + O <=> H + NO
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[2] * sc[31]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[31] - g_RT[35])) * (sc[1] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[31] -= qdot;
    wdot[35] += qdot;
  }

  {
    // reaction 190:  H + NH <=> H2 + N
    const amrex::Real k_f = 32000000 * exp(-(166.061499715557) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[31]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[30] + g_RT[31])) * (sc[0] * sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[30] += qdot;
    wdot[31] -= qdot;
  }

  {
    // reaction 191:  NH + OH <=> H + HNO
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[4] * sc[31]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[31] - g_RT[38])) * (sc[1] * sc[38]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[31] -= qdot;
    wdot[38] += qdot;
  }

  {
    // reaction 192:  NH + OH <=> H2O + N
    const amrex::Real k_f = 2000 * exp((1.2) * logT);
    const amrex::Real qf = k_f * (sc[4] * sc[31]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[30] + g_RT[31])) * (sc[5] * sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[30] += qdot;
    wdot[31] -= qdot;
  }

  {
    // reaction 193:  NH + O2 <=> HNO + O
    const amrex::Real k_f = 0.461 * exp((2) * logT - (3270.90832773068) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[31]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[31] - g_RT[38])) * (sc[2] * sc[38]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[31] -= qdot;
    wdot[38] += qdot;
  }

  {
    // reaction 194:  NH + O2 <=> NO + OH
    const amrex::Real k_f = 1.28 * exp((1.5) * logT - (50.321666580472) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[31]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[4] + g_RT[31] - g_RT[35])) * (sc[4] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[31] -= qdot;
    wdot[35] += qdot;
  }

  {
    // reaction 195:  N + NH <=> H + N2
    const amrex::Real k_f = 15000000;
    const amrex::Real qf = k_f * (sc[30] * sc[31]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[30] + g_RT[31] - g_RT[47])) *
                           (sc[1] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[30] -= qdot;
    wdot[31] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 196:  H2O + NH <=> H2 + HNO
    const amrex::Real k_f = 20000000 * exp(-(6969.55082139537) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[31]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[5] + g_RT[31] - g_RT[38])) * (sc[0] * sc[38]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[5] -= qdot;
    wdot[31] -= qdot;
    wdot[38] += qdot;
  }

  {
    // reaction 197:  NH + NO <=> N2 + OH
    const amrex::Real k_f = 21600000 * exp((-0.23) * logT);
    const amrex::Real qf = k_f * (sc[31] * sc[35]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[31] + g_RT[35] - g_RT[47])) *
                           (sc[4] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[31] -= qdot;
    wdot[35] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 198:  NH + NO <=> H + N2O
    const amrex::Real k_f = 365000000 * exp((-0.45) * logT);
    const amrex::Real qf = k_f * (sc[31] * sc[35]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[31] + g_RT[35] - g_RT[37])) *
                           (sc[1] * sc[37]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[31] -= qdot;
    wdot[35] -= qdot;
    wdot[37] += qdot;
  }

  {
    // reaction 199:  NH2 + O <=> NH + OH
    const amrex::Real k_f = 3000000;
    const amrex::Real qf = k_f * (sc[2] * sc[32]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[31] + g_RT[32])) * (sc[4] * sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[31] += qdot;
    wdot[32] -= qdot;
  }

  {
    // reaction 200:  NH2 + O <=> H + HNO
    const amrex::Real k_f = 39000000;
    const amrex::Real qf = k_f * (sc[2] * sc[32]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[32] - g_RT[38])) * (sc[1] * sc[38]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[32] -= qdot;
    wdot[38] += qdot;
  }

  {
    // reaction 201:  H + NH2 <=> H2 + NH
    const amrex::Real k_f = 40000000 * exp(-(1836.74083018723) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[32]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[31] + g_RT[32])) * (sc[0] * sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[31] += qdot;
    wdot[32] -= qdot;
  }

  {
    // reaction 202:  NH2 + OH <=> H2O + NH
    const amrex::Real k_f = 90 * exp((1.5) * logT - (-231.479666270171) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[32]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[31] + g_RT[32])) * (sc[5] * sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[31] += qdot;
    wdot[32] -= qdot;
  }

  {
    // reaction 203:  NNH <=> H + N2
    const amrex::Real k_f = 330000000;
    const amrex::Real qf = k_f * (sc[34]);
    const amrex::Real qr = k_f * exp(-(-g_RT[1] + g_RT[34] - g_RT[47])) *
                           (refCinv) * (sc[1] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[34] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 205:  NNH + O2 <=> HO2 + N2
    const amrex::Real k_f = 5000000;
    const amrex::Real qf = k_f * (sc[3] * sc[34]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] + g_RT[34] - g_RT[47])) * (sc[6] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[34] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 206:  NNH + O <=> N2 + OH
    const amrex::Real k_f = 25000000;
    const amrex::Real qf = k_f * (sc[2] * sc[34]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] + g_RT[34] - g_RT[47])) * (sc[4] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[34] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 207:  NNH + O <=> NH + NO
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[2] * sc[34]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[31] + g_RT[34] - g_RT[35])) *
                           (sc[31] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[31] += qdot;
    wdot[34] -= qdot;
    wdot[35] += qdot;
  }

  {
    // reaction 208:  H + NNH <=> H2 + N2
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[1] * sc[34]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] + g_RT[34] - g_RT[47])) * (sc[0] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[34] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 209:  NNH + OH <=> H2O + N2
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[4] * sc[34]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[34] - g_RT[47])) * (sc[5] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[34] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 210:  CH3 + NNH <=> CH4 + N2
    const amrex::Real k_f = 25000000;
    const amrex::Real qf = k_f * (sc[12] * sc[34]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[13] + g_RT[34] - g_RT[47])) *
                           (sc[13] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[34] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 212:  HNO + O <=> NO + OH
    const amrex::Real k_f = 25000000;
    const amrex::Real qf = k_f * (sc[2] * sc[38]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[35] + g_RT[38])) * (sc[4] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[35] += qdot;
    wdot[38] -= qdot;
  }

  {
    // reaction 213:  H + HNO <=> H2 + NO
    const amrex::Real k_f =
      900000 * exp((0.72) * logT - (332.122999431115) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[38]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[35] + g_RT[38])) * (sc[0] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[35] += qdot;
    wdot[38] -= qdot;
  }

  {
    // reaction 214:  HNO + OH <=> H2O + NO
    const amrex::Real k_f = 13 * exp((1.9) * logT - (-478.055832514484) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[38]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[35] + g_RT[38])) * (sc[5] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[35] += qdot;
    wdot[38] -= qdot;
  }

  {
    // reaction 215:  HNO + O2 <=> HO2 + NO
    const amrex::Real k_f = 10000000 * exp(-(6541.81665546136) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[38]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[35] + g_RT[38])) * (sc[6] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[35] += qdot;
    wdot[38] -= qdot;
  }

  {
    // reaction 216:  CN + O <=> CO + N
    const amrex::Real k_f = 77000000;
    const amrex::Real qf = k_f * (sc[2] * sc[39]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[14] - g_RT[30] + g_RT[39])) *
                           (sc[14] * sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[14] += qdot;
    wdot[30] += qdot;
    wdot[39] -= qdot;
  }

  {
    // reaction 217:  CN + OH <=> H + NCO
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[4] * sc[39]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[39] - g_RT[46])) * (sc[1] * sc[46]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[39] -= qdot;
    wdot[46] += qdot;
  }

  {
    // reaction 218:  CN + H2O <=> HCN + OH
    const amrex::Real k_f = 8000000 * exp(-(3753.99632690321) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[39]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[39] - g_RT[40])) * (sc[4] * sc[40]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[39] -= qdot;
    wdot[40] += qdot;
  }

  {
    // reaction 219:  CN + O2 <=> NCO + O
    const amrex::Real k_f = 6140000 * exp(-(-221.415332954077) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[39]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[39] - g_RT[46])) * (sc[2] * sc[46]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[39] -= qdot;
    wdot[46] += qdot;
  }

  {
    // reaction 220:  CN + H2 <=> H + HCN
    const amrex::Real k_f =
      0.295 * exp((2.45) * logT - (1127.20533140257) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[39]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] + g_RT[39] - g_RT[40])) * (sc[1] * sc[40]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[39] -= qdot;
    wdot[40] += qdot;
  }

  {
    // reaction 221:  NCO + O <=> CO + NO
    const amrex::Real k_f = 23500000;
    const amrex::Real qf = k_f * (sc[2] * sc[46]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[14] - g_RT[35] + g_RT[46])) *
                           (sc[14] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[14] += qdot;
    wdot[35] += qdot;
    wdot[46] -= qdot;
  }

  {
    // reaction 222:  H + NCO <=> CO + NH
    const amrex::Real k_f = 54000000;
    const amrex::Real qf = k_f * (sc[1] * sc[46]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[14] - g_RT[31] + g_RT[46])) *
                           (sc[14] * sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[14] += qdot;
    wdot[31] += qdot;
    wdot[46] -= qdot;
  }

  {
    // reaction 223:  NCO + OH <=> CO + H + NO
    const amrex::Real k_f = 2500000;
    const amrex::Real qf = k_f * (sc[4] * sc[46]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] - g_RT[14] - g_RT[35] + g_RT[46])) *
      (refCinv) * (sc[1] * sc[14] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[14] += qdot;
    wdot[35] += qdot;
    wdot[46] -= qdot;
  }

  {
    // reaction 224:  N + NCO <=> CO + N2
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[30] * sc[46]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[14] + g_RT[30] + g_RT[46] - g_RT[47])) *
                           (sc[14] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[30] -= qdot;
    wdot[46] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 225:  NCO + O2 <=> CO2 + NO
    const amrex::Real k_f = 2000000 * exp(-(10064.3333160944) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[46]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] - g_RT[15] - g_RT[35] + g_RT[46])) *
                           (sc[15] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[15] += qdot;
    wdot[35] += qdot;
    wdot[46] -= qdot;
  }

  {
    // reaction 227:  NCO + NO <=> CO + N2O
    const amrex::Real k_f =
      190000000000 * exp((-1.52) * logT - (372.380332695493) * invT);
    const amrex::Real qf = k_f * (sc[35] * sc[46]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[14] + g_RT[35] - g_RT[37] + g_RT[46])) *
                           (sc[14] * sc[37]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[35] -= qdot;
    wdot[37] += qdot;
    wdot[46] -= qdot;
  }

  {
    // reaction 228:  NCO + NO <=> CO2 + N2
    const amrex::Real k_f =
      3800000000000 * exp((-2) * logT - (402.573332643776) * invT);
    const amrex::Real qf = k_f * (sc[35] * sc[46]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[15] + g_RT[35] + g_RT[46] - g_RT[47])) *
                           (sc[15] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[15] += qdot;
    wdot[35] -= qdot;
    wdot[46] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 230:  HCN + O <=> H + NCO
    const amrex::Real k_f =
      0.0203 * exp((2.64) * logT - (2506.0189957075) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[40]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[40] - g_RT[46])) * (sc[1] * sc[46]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[40] -= qdot;
    wdot[46] += qdot;
  }

  {
    // reaction 231:  HCN + O <=> CO + NH
    const amrex::Real k_f =
      0.00507 * exp((2.64) * logT - (2506.0189957075) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[40]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[14] - g_RT[31] + g_RT[40])) *
                           (sc[14] * sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[14] += qdot;
    wdot[31] += qdot;
    wdot[40] -= qdot;
  }

  {
    // reaction 232:  HCN + O <=> CN + OH
    const amrex::Real k_f =
      3910 * exp((1.58) * logT - (13385.5633104055) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[40]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[39] + g_RT[40])) * (sc[4] * sc[39]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[39] += qdot;
    wdot[40] -= qdot;
  }

  {
    // reaction 233:  HCN + OH <=> H + HOCN
    const amrex::Real k_f = 1.1 * exp((2.03) * logT - (6728.0068218091) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[40]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[40] - g_RT[44])) * (sc[1] * sc[44]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[40] -= qdot;
    wdot[44] += qdot;
  }

  {
    // reaction 234:  HCN + OH <=> H + HNCO
    const amrex::Real k_f =
      0.0044 * exp((2.26) * logT - (3220.58666115021) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[40]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[40] - g_RT[45])) * (sc[1] * sc[45]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[40] -= qdot;
    wdot[45] += qdot;
  }

  {
    // reaction 235:  HCN + OH <=> CO + NH2
    const amrex::Real k_f =
      0.00016 * exp((2.56) * logT - (4528.94999224248) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[40]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[14] - g_RT[32] + g_RT[40])) *
                           (sc[14] * sc[32]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[14] += qdot;
    wdot[32] += qdot;
    wdot[40] -= qdot;
  }

  {
    // reaction 237:  H2CN + N <=> CH2 + N2
    const amrex::Real k_f = 60000000 * exp(-(201.286666321888) * invT);
    const amrex::Real qf = k_f * (sc[30] * sc[41]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[30] + g_RT[41] - g_RT[47])) *
                           (sc[10] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[30] -= qdot;
    wdot[41] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 238:  C + N2 <=> CN + N
    const amrex::Real k_f = 63000000 * exp(-(23158.0309603332) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[47]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[8] - g_RT[30] - g_RT[39] + g_RT[47])) *
                           (sc[30] * sc[39]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[30] += qdot;
    wdot[39] += qdot;
    wdot[47] -= qdot;
  }

  {
    // reaction 239:  CH + N2 <=> HCN + N
    const amrex::Real k_f =
      3120 * exp((0.88) * logT - (10129.751482649) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[47]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[30] - g_RT[40] + g_RT[47])) *
                           (sc[30] * sc[40]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[30] += qdot;
    wdot[40] += qdot;
    wdot[47] -= qdot;
  }

  {
    // reaction 241:  CH2 + N2 <=> HCN + NH
    const amrex::Real k_f = 10000000 * exp(-(37238.0332695493) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[47]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[31] - g_RT[40] + g_RT[47])) *
                           (sc[31] * sc[40]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[31] += qdot;
    wdot[40] += qdot;
    wdot[47] -= qdot;
  }

  {
    // reaction 242:  CH2(S) + N2 <=> HCN + NH
    const amrex::Real k_f = 100000 * exp(-(32709.0832773068) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[47]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[31] - g_RT[40] + g_RT[47])) *
                           (sc[31] * sc[40]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[31] += qdot;
    wdot[40] += qdot;
    wdot[47] -= qdot;
  }

  {
    // reaction 243:  C + NO <=> CN + O
    const amrex::Real k_f = 19000000;
    const amrex::Real qf = k_f * (sc[8] * sc[35]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[8] + g_RT[35] - g_RT[39])) * (sc[2] * sc[39]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[8] -= qdot;
    wdot[35] -= qdot;
    wdot[39] += qdot;
  }

  {
    // reaction 244:  C + NO <=> CO + N
    const amrex::Real k_f = 29000000;
    const amrex::Real qf = k_f * (sc[8] * sc[35]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[8] - g_RT[14] - g_RT[30] + g_RT[35])) *
                           (sc[14] * sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[14] += qdot;
    wdot[30] += qdot;
    wdot[35] -= qdot;
  }

  {
    // reaction 245:  CH + NO <=> HCN + O
    const amrex::Real k_f = 41000000;
    const amrex::Real qf = k_f * (sc[9] * sc[35]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[9] + g_RT[35] - g_RT[40])) * (sc[2] * sc[40]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[9] -= qdot;
    wdot[35] -= qdot;
    wdot[40] += qdot;
  }

  {
    // reaction 246:  CH + NO <=> H + NCO
    const amrex::Real k_f = 16200000;
    const amrex::Real qf = k_f * (sc[9] * sc[35]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[9] + g_RT[35] - g_RT[46])) * (sc[1] * sc[46]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[9] -= qdot;
    wdot[35] -= qdot;
    wdot[46] += qdot;
  }

  {
    // reaction 247:  CH + NO <=> HCO + N
    const amrex::Real k_f = 24600000;
    const amrex::Real qf = k_f * (sc[9] * sc[35]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[16] - g_RT[30] + g_RT[35])) *
                           (sc[16] * sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[16] += qdot;
    wdot[30] += qdot;
    wdot[35] -= qdot;
  }

  {
    // reaction 248:  CH2 + NO <=> H + HNCO
    const amrex::Real k_f =
      310000000000 * exp((-1.38) * logT - (639.085165571994) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[35]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[10] + g_RT[35] - g_RT[45])) *
                           (sc[1] * sc[45]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[10] -= qdot;
    wdot[35] -= qdot;
    wdot[45] += qdot;
  }

  {
    // reaction 249:  CH2 + NO <=> HCN + OH
    const amrex::Real k_f =
      290000000 * exp((-0.69) * logT - (382.444666011587) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[35]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[10] + g_RT[35] - g_RT[40])) *
                           (sc[4] * sc[40]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[10] -= qdot;
    wdot[35] -= qdot;
    wdot[40] += qdot;
  }

  {
    // reaction 250:  CH2 + NO <=> H + HCNO
    const amrex::Real k_f =
      38000000 * exp((-0.36) * logT - (291.865666166737) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[35]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[10] + g_RT[35] - g_RT[43])) *
                           (sc[1] * sc[43]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[10] -= qdot;
    wdot[35] -= qdot;
    wdot[43] += qdot;
  }

  {
    // reaction 251:  CH2(S) + NO <=> H + HNCO
    const amrex::Real k_f =
      310000000000 * exp((-1.38) * logT - (639.085165571994) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[35]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[11] + g_RT[35] - g_RT[45])) *
                           (sc[1] * sc[45]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[11] -= qdot;
    wdot[35] -= qdot;
    wdot[45] += qdot;
  }

  {
    // reaction 252:  CH2(S) + NO <=> HCN + OH
    const amrex::Real k_f =
      290000000 * exp((-0.69) * logT - (382.444666011587) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[35]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[11] + g_RT[35] - g_RT[40])) *
                           (sc[4] * sc[40]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[11] -= qdot;
    wdot[35] -= qdot;
    wdot[40] += qdot;
  }

  {
    // reaction 253:  CH2(S) + NO <=> H + HCNO
    const amrex::Real k_f =
      38000000 * exp((-0.36) * logT - (291.865666166737) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[35]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[11] + g_RT[35] - g_RT[43])) *
                           (sc[1] * sc[43]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[11] -= qdot;
    wdot[35] -= qdot;
    wdot[43] += qdot;
  }

  {
    // reaction 254:  CH3 + NO <=> H2O + HCN
    const amrex::Real k_f = 96000000 * exp(-(14492.6399751759) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[35]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[5] + g_RT[12] + g_RT[35] - g_RT[40])) *
                           (sc[5] * sc[40]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[12] -= qdot;
    wdot[35] -= qdot;
    wdot[40] += qdot;
  }

  {
    // reaction 255:  CH3 + NO <=> H2CN + OH
    const amrex::Real k_f = 1000000 * exp(-(10944.9624812527) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[35]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[12] + g_RT[35] - g_RT[41])) *
                           (sc[4] * sc[41]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[12] -= qdot;
    wdot[35] -= qdot;
    wdot[41] += qdot;
  }

  {
    // reaction 256:  HCNN + O <=> CO + H + N2
    const amrex::Real k_f = 22000000;
    const amrex::Real qf = k_f * (sc[2] * sc[42]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] - g_RT[14] + g_RT[42] - g_RT[47])) *
      (refCinv) * (sc[1] * sc[14] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[14] += qdot;
    wdot[42] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 257:  HCNN + O <=> HCN + NO
    const amrex::Real k_f = 2000000;
    const amrex::Real qf = k_f * (sc[2] * sc[42]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[35] - g_RT[40] + g_RT[42])) *
                           (sc[35] * sc[40]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[35] += qdot;
    wdot[40] += qdot;
    wdot[42] -= qdot;
  }

  {
    // reaction 258:  HCNN + O2 <=> HCO + N2 + O
    const amrex::Real k_f = 12000000;
    const amrex::Real qf = k_f * (sc[3] * sc[42]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] - g_RT[16] + g_RT[42] - g_RT[47])) *
      (refCinv) * (sc[2] * sc[16] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[16] += qdot;
    wdot[42] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 259:  HCNN + OH <=> H + HCO + N2
    const amrex::Real k_f = 12000000;
    const amrex::Real qf = k_f * (sc[4] * sc[42]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] - g_RT[16] + g_RT[42] - g_RT[47])) *
      (refCinv) * (sc[1] * sc[16] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[16] += qdot;
    wdot[42] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 260:  H + HCNN <=> CH2 + N2
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[1] * sc[42]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[10] + g_RT[42] - g_RT[47])) *
                           (sc[10] * sc[47]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[10] += qdot;
    wdot[42] -= qdot;
    wdot[47] += qdot;
  }

  {
    // reaction 261:  HNCO + O <=> CO2 + NH
    const amrex::Real k_f = 98 * exp((1.41) * logT - (4277.34165934012) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[45]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[15] - g_RT[31] + g_RT[45])) *
                           (sc[15] * sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[15] += qdot;
    wdot[31] += qdot;
    wdot[45] -= qdot;
  }

  {
    // reaction 262:  HNCO + O <=> CO + HNO
    const amrex::Real k_f =
      150 * exp((1.57) * logT - (22141.5332954077) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[45]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[14] - g_RT[38] + g_RT[45])) *
                           (sc[14] * sc[38]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[14] += qdot;
    wdot[38] += qdot;
    wdot[45] -= qdot;
  }

  {
    // reaction 263:  HNCO + O <=> NCO + OH
    const amrex::Real k_f = 2.2 * exp((2.11) * logT - (5736.6699901738) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[45]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] + g_RT[45] - g_RT[46])) * (sc[4] * sc[46]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[45] -= qdot;
    wdot[46] += qdot;
  }

  {
    // reaction 264:  H + HNCO <=> CO + NH2
    const amrex::Real k_f =
      22.5 * exp((1.7) * logT - (1912.22333005793) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[45]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[14] - g_RT[32] + g_RT[45])) *
                           (sc[14] * sc[32]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[14] += qdot;
    wdot[32] += qdot;
    wdot[45] -= qdot;
  }

  {
    // reaction 265:  H + HNCO <=> H2 + NCO
    const amrex::Real k_f =
      0.105 * exp((2.5) * logT - (6692.78165520277) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[45]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] + g_RT[45] - g_RT[46])) * (sc[0] * sc[46]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[45] -= qdot;
    wdot[46] += qdot;
  }

  {
    // reaction 266:  HNCO + OH <=> H2O + NCO
    const amrex::Real k_f = 33 * exp((1.5) * logT - (1811.57999689699) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[45]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[45] - g_RT[46])) * (sc[5] * sc[46]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[45] -= qdot;
    wdot[46] += qdot;
  }

  {
    // reaction 267:  HNCO + OH <=> CO2 + NH2
    const amrex::Real k_f = 3.3 * exp((1.5) * logT - (1811.57999689699) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[45]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[15] - g_RT[32] + g_RT[45])) *
                           (sc[15] * sc[32]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[15] += qdot;
    wdot[32] += qdot;
    wdot[45] -= qdot;
  }

  {
    // reaction 269:  H + HCNO <=> H + HNCO
    const amrex::Real k_f =
      2100000000 * exp((-0.69) * logT - (1434.16749754345) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[43]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[1] + g_RT[43] - g_RT[45])) * (sc[1] * sc[45]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[1] += qdot;
    wdot[43] -= qdot;
    wdot[45] += qdot;
  }

  {
    // reaction 270:  H + HCNO <=> HCN + OH
    const amrex::Real k_f =
      270000 * exp((0.18) * logT - (1066.81933150601) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[43]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[4] - g_RT[40] + g_RT[43])) * (sc[4] * sc[40]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[4] += qdot;
    wdot[40] += qdot;
    wdot[43] -= qdot;
  }

  {
    // reaction 271:  H + HCNO <=> CO + NH2
    const amrex::Real k_f =
      170000000 * exp((-0.75) * logT - (1454.29616417564) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[43]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[14] - g_RT[32] + g_RT[43])) *
                           (sc[14] * sc[32]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[14] += qdot;
    wdot[32] += qdot;
    wdot[43] -= qdot;
  }

  {
    // reaction 272:  H + HOCN <=> H + HNCO
    const amrex::Real k_f = 20 * exp((2) * logT - (1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[44]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[1] + g_RT[44] - g_RT[45])) * (sc[1] * sc[45]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[1] += qdot;
    wdot[44] -= qdot;
    wdot[45] += qdot;
  }

  {
    // reaction 273:  HCCO + NO <=> CO + HCNO
    const amrex::Real k_f = 9000000;
    const amrex::Real qf = k_f * (sc[27] * sc[35]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[14] + g_RT[27] + g_RT[35] - g_RT[43])) *
                           (sc[14] * sc[43]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[27] -= qdot;
    wdot[35] -= qdot;
    wdot[43] += qdot;
  }

  {
    // reaction 274:  CH3 + N <=> H + H2CN
    const amrex::Real k_f =
      610000000 * exp((-0.31) * logT - (145.932833083369) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[30]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[12] + g_RT[30] - g_RT[41])) *
                           (sc[1] * sc[41]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[12] -= qdot;
    wdot[30] -= qdot;
    wdot[41] += qdot;
  }

  {
    // reaction 275:  CH3 + N <=> H2 + HCN
    const amrex::Real k_f =
      3700000 * exp((0.15) * logT - (-45.2894999224248) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[30]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + g_RT[12] + g_RT[30] - g_RT[40])) *
                           (sc[0] * sc[40]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[12] -= qdot;
    wdot[30] -= qdot;
    wdot[40] += qdot;
  }

  {
    // reaction 276:  H + NH3 <=> H2 + NH2
    const amrex::Real k_f = 0.54 * exp((2.4) * logT - (4989.3932414538) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[33]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[32] + g_RT[33])) * (sc[0] * sc[32]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[32] += qdot;
    wdot[33] -= qdot;
  }

  {
    // reaction 277:  NH3 + OH <=> H2O + NH2
    const amrex::Real k_f = 50 * exp((1.6) * logT - (480.571915843507) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[33]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[32] + g_RT[33])) * (sc[5] * sc[32]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[32] += qdot;
    wdot[33] -= qdot;
  }

  {
    // reaction 278:  NH3 + O <=> NH2 + OH
    const amrex::Real k_f =
      9.4 * exp((1.94) * logT - (3250.77966109849) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[33]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[32] + g_RT[33])) * (sc[4] * sc[32]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[32] += qdot;
    wdot[33] -= qdot;
  }

  {
    // reaction 279:  CO2 + NH <=> CO + HNO
    const amrex::Real k_f = 10000000 * exp(-(7221.15915429773) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[31]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[14] + g_RT[15] + g_RT[31] - g_RT[38])) *
                           (sc[14] * sc[38]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[15] -= qdot;
    wdot[31] -= qdot;
    wdot[38] += qdot;
  }

  {
    // reaction 280:  CN + NO2 <=> NCO + NO
    const amrex::Real k_f =
      6160000000 * exp((-0.752) * logT - (173.609749702628) * invT);
    const amrex::Real qf = k_f * (sc[36] * sc[39]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[35] + g_RT[36] + g_RT[39] - g_RT[46])) *
                           (sc[35] * sc[46]);
    const amrex::Real qdot = qf - qr;
    wdot[35] += qdot;
    wdot[36] -= qdot;
    wdot[39] -= qdot;
    wdot[46] += qdot;
  }

  {
    // reaction 281:  NCO + NO2 <=> CO2 + N2O
    const amrex::Real k_f = 3250000 * exp(-(-354.767749392327) * invT);
    const amrex::Real qf = k_f * (sc[36] * sc[46]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[15] + g_RT[36] - g_RT[37] + g_RT[46])) *
                           (sc[15] * sc[37]);
    const amrex::Real qdot = qf - qr;
    wdot[15] += qdot;
    wdot[36] -= qdot;
    wdot[37] += qdot;
    wdot[46] -= qdot;
  }

  {
    // reaction 282:  CO2 + N <=> CO + NO
    const amrex::Real k_f = 3000000 * exp(-(5686.34832359333) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[30]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[14] + g_RT[15] + g_RT[30] - g_RT[35])) *
                           (sc[14] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[15] -= qdot;
    wdot[30] -= qdot;
    wdot[35] += qdot;
  }

  {
    // reaction 283:  CH3 + O => CO + H + H2
    const amrex::Real k_f = 33700000;
    const amrex::Real qf = k_f * (sc[2] * sc[12]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[12] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 284:  C2H4 + O <=> CH2CHO + H
    const amrex::Real k_f =
      6.7 * exp((1.83) * logT - (110.707666477038) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[24] - g_RT[51])) * (sc[1] * sc[51]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[24] -= qdot;
    wdot[51] += qdot;
  }

  {
    // reaction 285:  C2H5 + O <=> CH3CHO + H
    const amrex::Real k_f = 109600000;
    const amrex::Real qf = k_f * (sc[2] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[25] - g_RT[52])) * (sc[1] * sc[52]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[25] -= qdot;
    wdot[52] += qdot;
  }

  {
    // reaction 286:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f = 5000000000 * exp(-(8720.74481839579) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[6]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[5] + g_RT[6])) * (sc[3] * sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[6] -= qdot;
  }

  {
    // reaction 287:  CH3 + OH => CH2O + H2
    const amrex::Real k_f =
      8000 * exp((0.5) * logT - (-883.145248487283) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[12]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[4] -= qdot;
    wdot[12] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 289:  CH2 + O2 => CO2 + 2 H
    const amrex::Real k_f = 5800000 * exp(-(754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[10]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[1] += 2.000000 * qdot;
    wdot[3] -= qdot;
    wdot[10] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 290:  CH2 + O2 <=> CH2O + O
    const amrex::Real k_f = 2400000 * exp(-(754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[10] - g_RT[17])) * (sc[2] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[10] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 291:  2 CH2 => C2H2 + 2 H
    const amrex::Real k_f = 200000000 * exp(-(5529.84794052807) * invT);
    const amrex::Real qf = k_f * ((sc[10] * sc[10]));
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[1] += 2.000000 * qdot;
    wdot[10] -= 2.000000 * qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 292:  CH2(S) + H2O => CH2O + H2
    const amrex::Real k_f =
      68200 * exp((0.25) * logT - (-470.507582527413) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[11]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[5] -= qdot;
    wdot[11] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 293:  C2H3 + O2 <=> CH2CHO + O
    const amrex::Real k_f =
      303000 * exp((0.29) * logT - (5.53538332385192) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[23] - g_RT[51])) * (sc[2] * sc[51]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[23] -= qdot;
    wdot[51] += qdot;
  }

  {
    // reaction 294:  C2H3 + O2 <=> C2H2 + HO2
    const amrex::Real k_f =
      1.337 * exp((1.61) * logT - (-193.235199669012) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] - g_RT[22] + g_RT[23])) * (sc[6] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[22] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 295:  CH3CHO + O <=> CH2CHO + OH
    const amrex::Real k_f = 2920000 * exp(-(909.815731774933) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[52]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[51] + g_RT[52])) * (sc[4] * sc[51]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[51] += qdot;
    wdot[52] -= qdot;
  }

  {
    // reaction 296:  CH3CHO + O => CH3 + CO + OH
    const amrex::Real k_f = 2920000 * exp(-(909.815731774933) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[52]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[12] += qdot;
    wdot[14] += qdot;
    wdot[52] -= qdot;
  }

  {
    // reaction 297:  CH3CHO + O2 => CH3 + CO + HO2
    const amrex::Real k_f = 30100000 * exp(-(19700.9324662548) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[52]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[12] += qdot;
    wdot[14] += qdot;
    wdot[52] -= qdot;
  }

  {
    // reaction 298:  CH3CHO + H <=> CH2CHO + H2
    const amrex::Real k_f =
      2050 * exp((1.16) * logT - (1210.23608126035) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[52]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[51] + g_RT[52])) * (sc[0] * sc[51]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[51] += qdot;
    wdot[52] -= qdot;
  }

  {
    // reaction 299:  CH3CHO + H => CH3 + CO + H2
    const amrex::Real k_f =
      2050 * exp((1.16) * logT - (1210.23608126035) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[52]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[12] += qdot;
    wdot[14] += qdot;
    wdot[52] -= qdot;
  }

  {
    // reaction 300:  CH3CHO + OH => CH3 + CO + H2O
    const amrex::Real k_f =
      23430 * exp((0.73) * logT - (-560.080149040653) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[52]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[12] += qdot;
    wdot[14] += qdot;
    wdot[52] -= qdot;
  }

  {
    // reaction 301:  CH3CHO + HO2 => CH3 + CO + H2O2
    const amrex::Real k_f = 3010000 * exp(-(5999.85230638967) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[52]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[7] += qdot;
    wdot[12] += qdot;
    wdot[14] += qdot;
    wdot[52] -= qdot;
  }

  {
    // reaction 304:  CH2CHO + O => CH2 + CO2 + H
    const amrex::Real k_f = 150000000;
    const amrex::Real qf = k_f * (sc[2] * sc[51]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[10] += qdot;
    wdot[15] += qdot;
    wdot[51] -= qdot;
  }

  {
    // reaction 305:  CH2CHO + O2 => CH2O + CO + OH
    const amrex::Real k_f = 18100;
    const amrex::Real qf = k_f * (sc[3] * sc[51]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[14] += qdot;
    wdot[17] += qdot;
    wdot[51] -= qdot;
  }

  {
    // reaction 306:  CH2CHO + O2 => 2 HCO + OH
    const amrex::Real k_f = 23500;
    const amrex::Real qf = k_f * (sc[3] * sc[51]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[4] += qdot;
    wdot[16] += 2.000000 * qdot;
    wdot[51] -= qdot;
  }

  {
    // reaction 307:  CH2CHO + H <=> CH3 + HCO
    const amrex::Real k_f = 22000000;
    const amrex::Real qf = k_f * (sc[1] * sc[51]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[12] - g_RT[16] + g_RT[51])) *
                           (sc[12] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[12] += qdot;
    wdot[16] += qdot;
    wdot[51] -= qdot;
  }

  {
    // reaction 308:  CH2CHO + H <=> CH2CO + H2
    const amrex::Real k_f = 11000000;
    const amrex::Real qf = k_f * (sc[1] * sc[51]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[28] + g_RT[51])) * (sc[0] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[28] += qdot;
    wdot[51] -= qdot;
  }

  {
    // reaction 309:  CH2CHO + OH <=> CH2CO + H2O
    const amrex::Real k_f = 12000000;
    const amrex::Real qf = k_f * (sc[4] * sc[51]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[28] + g_RT[51])) * (sc[5] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[28] += qdot;
    wdot[51] -= qdot;
  }

  {
    // reaction 310:  CH2CHO + OH <=> CH2OH + HCO
    const amrex::Real k_f = 30100000;
    const amrex::Real qf = k_f * (sc[4] * sc[51]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[16] - g_RT[18] + g_RT[51])) *
                           (sc[16] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[16] += qdot;
    wdot[18] += qdot;
    wdot[51] -= qdot;
  }

  {
    // reaction 312:  C3H8 + O <=> C3H7 + OH
    const amrex::Real k_f =
      0.193 * exp((2.68) * logT - (1869.95313013034) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[50]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] - g_RT[49] + g_RT[50])) * (sc[4] * sc[49]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[49] += qdot;
    wdot[50] -= qdot;
  }

  {
    // reaction 313:  C3H8 + H <=> C3H7 + H2
    const amrex::Real k_f =
      1.32 * exp((2.54) * logT - (3399.73179417669) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[50]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] - g_RT[49] + g_RT[50])) * (sc[0] * sc[49]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[49] += qdot;
    wdot[50] -= qdot;
  }

  {
    // reaction 314:  C3H8 + OH <=> C3H7 + H2O
    const amrex::Real k_f =
      31.6 * exp((1.8) * logT - (470.004365861608) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[50]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] - g_RT[49] + g_RT[50])) * (sc[5] * sc[49]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[49] += qdot;
    wdot[50] -= qdot;
  }

  {
    // reaction 315:  C3H7 + H2O2 <=> C3H8 + HO2
    const amrex::Real k_f =
      0.000378 * exp((2.72) * logT - (754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[49]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[7] + g_RT[49] - g_RT[50])) * (sc[6] * sc[50]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[7] -= qdot;
    wdot[49] -= qdot;
    wdot[50] += qdot;
  }

  {
    // reaction 316:  C3H8 + CH3 <=> C3H7 + CH4
    const amrex::Real k_f =
      9.03e-07 * exp((3.65) * logT - (3600.01202716696) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[50]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[13] - g_RT[49] + g_RT[50])) *
                           (sc[13] * sc[49]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[49] += qdot;
    wdot[50] -= qdot;
  }

  {
    // reaction 318:  C3H7 + O <=> C2H5 + CH2O
    const amrex::Real k_f = 96400000;
    const amrex::Real qf = k_f * (sc[2] * sc[49]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[17] - g_RT[25] + g_RT[49])) *
                           (sc[17] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[17] += qdot;
    wdot[25] += qdot;
    wdot[49] -= qdot;
  }

  {
    // reaction 320:  C3H7 + H <=> C2H5 + CH3
    const amrex::Real k_f = 4.06 * exp((2.19) * logT - (447.8628325662) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[49]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[12] - g_RT[25] + g_RT[49])) *
                           (sc[12] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[12] += qdot;
    wdot[25] += qdot;
    wdot[49] -= qdot;
  }

  {
    // reaction 321:  C3H7 + OH <=> C2H5 + CH2OH
    const amrex::Real k_f = 24100000;
    const amrex::Real qf = k_f * (sc[4] * sc[49]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[18] - g_RT[25] + g_RT[49])) *
                           (sc[18] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[18] += qdot;
    wdot[25] += qdot;
    wdot[49] -= qdot;
  }

  {
    // reaction 322:  C3H7 + HO2 <=> C3H8 + O2
    const amrex::Real k_f =
      25500 * exp((0.255) * logT - (-474.533315853851) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[49]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[6] + g_RT[49] - g_RT[50])) * (sc[3] * sc[50]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[6] -= qdot;
    wdot[49] -= qdot;
    wdot[50] += qdot;
  }

  {
    // reaction 323:  C3H7 + HO2 => C2H5 + CH2O + OH
    const amrex::Real k_f = 24100000;
    const amrex::Real qf = k_f * (sc[6] * sc[49]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[17] += qdot;
    wdot[25] += qdot;
    wdot[49] -= qdot;
  }

  {
    // reaction 324:  C3H7 + CH3 <=> 2 C2H5
    const amrex::Real k_f = 19270000 * exp((-0.32) * logT);
    const amrex::Real qf = k_f * (sc[12] * sc[49]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - 2.000000 * g_RT[25] + g_RT[49])) *
                           ((sc[25] * sc[25]));
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[25] += 2.000000 * qdot;
    wdot[49] -= qdot;
  }

  {
    // reaction 325:  CH2F + H <=> CH2(S) + HF
    const amrex::Real k_f = 110000000;
    const amrex::Real qf = k_f * (sc[1] * sc[60]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[11] - g_RT[53] + g_RT[60])) *
                           (sc[11] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[11] += qdot;
    wdot[53] += qdot;
    wdot[60] -= qdot;
  }

  {
    // reaction 326:  CH2F + H <=> CHF + H2
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[1] * sc[60]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] + g_RT[60] - g_RT[63])) * (sc[0] * sc[63]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[60] -= qdot;
    wdot[63] += qdot;
  }

  {
    // reaction 327:  CHF3 + H <=> CF3 + H2
    const amrex::Real k_f =
      7.83 * exp((2.06) * logT - (6189.56498939805) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[58]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] + g_RT[58] - g_RT[62])) * (sc[0] * sc[62]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[58] -= qdot;
    wdot[62] += qdot;
  }

  {
    // reaction 328:  CHF3 + H <=> CH2F2 + F
    const amrex::Real k_f = 432 * exp((1.6) * logT - (31697.6177790393) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[58]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[54] - g_RT[57] + g_RT[58])) *
                           (sc[54] * sc[57]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[54] += qdot;
    wdot[57] += qdot;
    wdot[58] -= qdot;
  }

  {
    // reaction 329:  CHF + H <=> CH + HF
    const amrex::Real k_f = 65000000;
    const amrex::Real qf = k_f * (sc[1] * sc[63]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[9] - g_RT[53] + g_RT[63])) * (sc[9] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[9] += qdot;
    wdot[53] += qdot;
    wdot[63] -= qdot;
  }

  {
    // reaction 330:  CHF + H <=> CF + H2
    const amrex::Real k_f = 230000000;
    const amrex::Real qf = k_f * (sc[1] * sc[63]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] + g_RT[63] - g_RT[65])) * (sc[0] * sc[65]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[63] -= qdot;
    wdot[65] += qdot;
  }

  {
    // reaction 331:  CH + HF <=> CF + H2
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[9] * sc[53]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[9] + g_RT[53] - g_RT[65])) * (sc[0] * sc[65]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[9] -= qdot;
    wdot[53] -= qdot;
    wdot[65] += qdot;
  }

  {
    // reaction 333:  CFO + H <=> CO + HF
    const amrex::Real k_f = 25000000;
    const amrex::Real qf = k_f * (sc[1] * sc[69]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[14] - g_RT[53] + g_RT[69])) *
                           (sc[14] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[14] += qdot;
    wdot[53] += qdot;
    wdot[69] -= qdot;
  }

  {
    // reaction 334:  CH2F + O <=> CHFO + H
    const amrex::Real k_f = 57000000;
    const amrex::Real qf = k_f * (sc[2] * sc[60]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[60] - g_RT[68])) * (sc[1] * sc[68]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[60] -= qdot;
    wdot[68] += qdot;
  }

  {
    // reaction 335:  CHF2 + O <=> CF2O + H
    const amrex::Real k_f = 37000000;
    const amrex::Real qf = k_f * (sc[2] * sc[61]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[2] + g_RT[61] - g_RT[67])) * (sc[1] * sc[67]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] -= qdot;
    wdot[61] -= qdot;
    wdot[67] += qdot;
  }

  {
    // reaction 336:  CF3 + O <=> CF2O + F
    const amrex::Real k_f = 15400000;
    const amrex::Real qf = k_f * (sc[2] * sc[62]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[54] + g_RT[62] - g_RT[67])) *
                           (sc[54] * sc[67]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[54] += qdot;
    wdot[62] -= qdot;
    wdot[67] += qdot;
  }

  {
    // reaction 337:  CH2F + OH <=> CH2O + HF
    const amrex::Real k_f = 25000000;
    const amrex::Real qf = k_f * (sc[4] * sc[60]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[17] - g_RT[53] + g_RT[60])) *
                           (sc[17] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[17] += qdot;
    wdot[53] += qdot;
    wdot[60] -= qdot;
  }

  {
    // reaction 338:  CHF2 + OH <=> CHFO + HF
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[4] * sc[61]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[53] + g_RT[61] - g_RT[68])) *
                           (sc[53] * sc[68]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[53] += qdot;
    wdot[61] -= qdot;
    wdot[68] += qdot;
  }

  {
    // reaction 339:  CF3 + OH <=> CF2O + HF
    const amrex::Real k_f =
      14600000 * exp((-0.06) * logT - (-133.855633104055) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[62]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[53] + g_RT[62] - g_RT[67])) *
                           (sc[53] * sc[67]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[53] += qdot;
    wdot[62] -= qdot;
    wdot[67] += qdot;
  }

  {
    // reaction 341:  F + H2 <=> H + HF
    const amrex::Real k_f =
      2560000 * exp((0.5) * logT - (327.090832773068) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[54]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] - g_RT[53] + g_RT[54])) * (sc[1] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[53] += qdot;
    wdot[54] -= qdot;
  }

  {
    // reaction 342:  F + OH <=> HF + O
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[4] * sc[54]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] - g_RT[53] + g_RT[54])) * (sc[2] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[53] += qdot;
    wdot[54] -= qdot;
  }

  {
    // reaction 343:  F + HO2 <=> HF + O2
    const amrex::Real k_f = 2890000 * exp((0.5) * logT);
    const amrex::Real qf = k_f * (sc[6] * sc[54]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[6] - g_RT[53] + g_RT[54])) * (sc[3] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[6] -= qdot;
    wdot[53] += qdot;
    wdot[54] -= qdot;
  }

  {
    // reaction 344:  F + H2O <=> HF + OH
    const amrex::Real k_f = 1300 * exp((1.5) * logT);
    const amrex::Real qf = k_f * (sc[5] * sc[54]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[5] - g_RT[53] + g_RT[54])) * (sc[4] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[53] += qdot;
    wdot[54] -= qdot;
  }

  {
    // reaction 345:  F + H2O2 <=> HF + HO2
    const amrex::Real k_f = 1730000 * exp((0.5) * logT);
    const amrex::Real qf = k_f * (sc[7] * sc[54]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[7] - g_RT[53] + g_RT[54])) * (sc[6] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[7] -= qdot;
    wdot[53] += qdot;
    wdot[54] -= qdot;
  }

  {
    // reaction 347:  CHF + H2 <=> CH3F
    const amrex::Real k_f =
      225000000000 * exp((-2.85) * logT - (6541.81665546136) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[63]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[56] + g_RT[63])) * (refC) * (sc[56]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[56] += qdot;
    wdot[63] -= qdot;
  }

  {
    // reaction 348:  CH2F + H <=> CH3F
    const amrex::Real k_f =
      3.03e+15 * exp((-3.38) * logT - (1741.12966368433) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[60]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[56] + g_RT[60])) * (refC) * (sc[56]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[56] += qdot;
    wdot[60] -= qdot;
  }

  {
    // reaction 350:  CF2 + H2 <=> CH2F2
    const amrex::Real k_f =
      1.7 * exp((-0.71) * logT - (20581.561631413) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[64]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[57] + g_RT[64])) * (refC) * (sc[57]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[57] += qdot;
    wdot[64] -= qdot;
  }

  {
    // reaction 351:  CHF2 + H <=> CH2F2
    const amrex::Real k_f =
      2.75 * exp((-0.32) * logT - (3869.73616003829) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[61]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[57] + g_RT[61])) * (refC) * (sc[57]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[57] += qdot;
    wdot[61] -= qdot;
  }

  {
    // reaction 354:  CH2(S) + HF <=> CHF + H2
    const amrex::Real k_f =
      20.8 * exp((1.27) * logT - (4191.79482615331) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[53]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + g_RT[11] + g_RT[53] - g_RT[63])) *
                           (sc[0] * sc[63]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[11] -= qdot;
    wdot[53] -= qdot;
    wdot[63] += qdot;
  }

  {
    // reaction 355:  CH3 + F <=> CH2(S) + HF
    const amrex::Real k_f =
      16200000000 * exp((-0.88) * logT - (-493.65554915443) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[54]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[11] + g_RT[12] - g_RT[53] + g_RT[54])) *
                           (sc[11] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[53] += qdot;
    wdot[54] -= qdot;
  }

  {
    // reaction 356:  CH3 + F <=> CH2F + H
    const amrex::Real k_f =
      1360000 * exp((-0.39) * logT - (-133.352416438251) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[54]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[12] + g_RT[54] - g_RT[60])) *
                           (sc[1] * sc[60]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[12] -= qdot;
    wdot[54] -= qdot;
    wdot[60] += qdot;
  }

  {
    // reaction 357:  CHF + HF <=> CF2 + H2
    const amrex::Real k_f =
      5.77 * exp((1.35) * logT - (9007.57831790448) * invT);
    const amrex::Real qf = k_f * (sc[53] * sc[63]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[0] + g_RT[53] + g_RT[63] - g_RT[64])) *
                           (sc[0] * sc[64]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[53] -= qdot;
    wdot[63] -= qdot;
    wdot[64] += qdot;
  }

  {
    // reaction 358:  CHF2 + H <=> CHF + HF
    const amrex::Real k_f =
      149000000 * exp((-0.11) * logT - (50.8248832462767) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[61]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[53] + g_RT[61] - g_RT[63])) *
                           (sc[53] * sc[63]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[53] += qdot;
    wdot[61] -= qdot;
    wdot[63] += qdot;
  }

  {
    // reaction 359:  CHF2 + H <=> CF2 + H2
    const amrex::Real k_f =
      0.0055 * exp((2.42) * logT - (-211.350999637982) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[61]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] + g_RT[61] - g_RT[64])) * (sc[0] * sc[64]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[61] -= qdot;
    wdot[64] += qdot;
  }

  {
    // reaction 360:  CH2F + F <=> CHF + HF
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[54] * sc[60]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[53] + g_RT[54] + g_RT[60] - g_RT[63])) *
                           (sc[53] * sc[63]);
    const amrex::Real qdot = qf - qr;
    wdot[53] += qdot;
    wdot[54] -= qdot;
    wdot[60] -= qdot;
    wdot[63] += qdot;
  }

  {
    // reaction 361:  CF3 + H <=> CF2 + HF
    const amrex::Real k_f = 53300000;
    const amrex::Real qf = k_f * (sc[1] * sc[62]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[53] + g_RT[62] - g_RT[64])) *
                           (sc[53] * sc[64]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[53] += qdot;
    wdot[62] -= qdot;
    wdot[64] += qdot;
  }

  {
    // reaction 362:  CHF2 + F <=> CF2 + HF
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[54] * sc[61]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[53] + g_RT[54] + g_RT[61] - g_RT[64])) *
                           (sc[53] * sc[64]);
    const amrex::Real qdot = qf - qr;
    wdot[53] += qdot;
    wdot[54] -= qdot;
    wdot[61] -= qdot;
    wdot[64] += qdot;
  }

  {
    // reaction 363:  CH3F + H <=> CH2F + H2
    const amrex::Real k_f =
      0.0027 * exp((3) * logT - (2667.04832876501) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[56]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] + g_RT[56] - g_RT[60])) * (sc[0] * sc[60]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[56] -= qdot;
    wdot[60] += qdot;
  }

  {
    // reaction 364:  CH2F2 + H <=> CHF2 + H2
    const amrex::Real k_f =
      0.00165 * exp((3) * logT - (2818.01332850643) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[57]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] + g_RT[57] - g_RT[61])) * (sc[0] * sc[61]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[57] -= qdot;
    wdot[61] += qdot;
  }

  {
    // reaction 365:  CH3F + H <=> CH3 + HF
    const amrex::Real k_f = 275000000 * exp(-(15801.0033062682) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[56]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[12] - g_RT[53] + g_RT[56])) *
                           (sc[12] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[12] += qdot;
    wdot[53] += qdot;
    wdot[56] -= qdot;
  }

  {
    // reaction 366:  CH2F2 + H <=> CH2F + HF
    const amrex::Real k_f = 55000000 * exp(-(17159.6883039409) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[57]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[53] + g_RT[57] - g_RT[60])) *
                           (sc[53] * sc[60]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[53] += qdot;
    wdot[57] -= qdot;
    wdot[60] += qdot;
  }

  {
    // reaction 367:  CHF3 + H <=> CHF2 + HF
    const amrex::Real k_f =
      211 * exp((1.77) * logT - (20028.0232990278) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[58]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[53] + g_RT[58] - g_RT[61])) *
                           (sc[53] * sc[61]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[53] += qdot;
    wdot[58] -= qdot;
    wdot[61] += qdot;
  }

  {
    // reaction 368:  CF4 + H <=> CF3 + HF
    const amrex::Real k_f =
      3070 * exp((1.58) * logT - (20797.9447977091) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[59]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[53] + g_RT[59] - g_RT[62])) *
                           (sc[53] * sc[62]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[53] += qdot;
    wdot[59] -= qdot;
    wdot[62] += qdot;
  }

  {
    // reaction 369:  CF4 + H <=> CHF3 + F
    const amrex::Real k_f =
      915 * exp((1.45) * logT - (31999.5477785221) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[59]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[54] - g_RT[58] + g_RT[59])) *
                           (sc[54] * sc[58]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[54] += qdot;
    wdot[58] += qdot;
    wdot[59] -= qdot;
  }

  {
    // reaction 370:  CH3F + O <=> CH2F + OH
    const amrex::Real k_f = 65 * exp((1.5) * logT - (3522.51666063304) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[56]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] + g_RT[56] - g_RT[60])) * (sc[4] * sc[60]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[56] -= qdot;
    wdot[60] += qdot;
  }

  {
    // reaction 371:  CH2F2 + O <=> CHF2 + OH
    const amrex::Real k_f =
      22.5 * exp((1.5) * logT - (3069.62166140879) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[57]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] + g_RT[57] - g_RT[61])) * (sc[4] * sc[61]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[57] -= qdot;
    wdot[61] += qdot;
  }

  {
    // reaction 372:  CHF3 + O <=> CF3 + OH
    const amrex::Real k_f = 307000000 * exp(-(9535.95581699944) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[58]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] + g_RT[58] - g_RT[62])) * (sc[4] * sc[62]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[58] -= qdot;
    wdot[62] += qdot;
  }

  {
    // reaction 373:  CH3F + OH <=> CH2F + H2O
    const amrex::Real k_f = 260 * exp((1.5) * logT - (1479.45699746588) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[56]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[56] - g_RT[60])) * (sc[5] * sc[60]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[56] -= qdot;
    wdot[60] += qdot;
  }

  {
    // reaction 374:  CH2F2 + OH <=> CHF2 + H2O
    const amrex::Real k_f = 28 * exp((1.7) * logT - (1278.17033114399) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[57]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[57] - g_RT[61])) * (sc[5] * sc[61]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[57] -= qdot;
    wdot[61] += qdot;
  }

  {
    // reaction 375:  CHF3 + OH <=> CF3 + H2O
    const amrex::Real k_f =
      12.5 * exp((1.55) * logT - (1846.80516350332) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[58]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[58] - g_RT[62])) * (sc[5] * sc[62]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[58] -= qdot;
    wdot[62] += qdot;
  }

  {
    // reaction 376:  CH2F + H2O2 <=> CH3F + HO2
    const amrex::Real k_f = 12000 * exp(-(-301.929999482832) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[60]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[7] - g_RT[56] + g_RT[60])) * (sc[6] * sc[56]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[7] -= qdot;
    wdot[56] += qdot;
    wdot[60] -= qdot;
  }

  {
    // reaction 377:  CHF2 + H2O2 <=> CH2F2 + HO2
    const amrex::Real k_f = 12000 * exp(-(-301.929999482832) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[61]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[7] - g_RT[57] + g_RT[61])) * (sc[6] * sc[57]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[7] -= qdot;
    wdot[57] += qdot;
    wdot[61] -= qdot;
  }

  {
    // reaction 378:  CF3 + H2O2 <=> CHF3 + HO2
    const amrex::Real k_f = 12000 * exp(-(-301.929999482832) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[62]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[7] - g_RT[58] + g_RT[62])) * (sc[6] * sc[58]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[7] -= qdot;
    wdot[58] += qdot;
    wdot[62] -= qdot;
  }

  {
    // reaction 379:  CH3 + CH3F <=> CH2F + CH4
    const amrex::Real k_f = 150000 * exp(-(5736.6699901738) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[56]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[13] + g_RT[56] - g_RT[60])) *
                           (sc[13] * sc[60]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[56] -= qdot;
    wdot[60] += qdot;
  }

  {
    // reaction 380:  CH2F2 + CH3 <=> CH4 + CHF2
    const amrex::Real k_f = 87000 * exp(-(5132.80999120814) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[57]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[13] + g_RT[57] - g_RT[61])) *
                           (sc[13] * sc[61]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[57] -= qdot;
    wdot[61] += qdot;
  }

  {
    // reaction 381:  CF3 + CH4 <=> CH3 + CHF3
    const amrex::Real k_f = 834000 * exp(-(5495.12599058754) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc[62]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[12] + g_RT[13] - g_RT[58] + g_RT[62])) *
                           (sc[12] * sc[58]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[13] -= qdot;
    wdot[58] += qdot;
    wdot[62] -= qdot;
  }

  {
    // reaction 382:  C2H3 + CH3F <=> C2H4 + CH2F
    const amrex::Real k_f = 150000 * exp(-(5183.13165778861) * invT);
    const amrex::Real qf = k_f * (sc[23] * sc[56]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[23] - g_RT[24] + g_RT[56] - g_RT[60])) *
                           (sc[24] * sc[60]);
    const amrex::Real qdot = qf - qr;
    wdot[23] -= qdot;
    wdot[24] += qdot;
    wdot[56] -= qdot;
    wdot[60] += qdot;
  }

  {
    // reaction 383:  C2H3 + CH2F2 <=> C2H4 + CHF2
    const amrex::Real k_f = 90000 * exp(-(4629.59332540342) * invT);
    const amrex::Real qf = k_f * (sc[23] * sc[57]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[23] - g_RT[24] + g_RT[57] - g_RT[61])) *
                           (sc[24] * sc[61]);
    const amrex::Real qdot = qf - qr;
    wdot[23] -= qdot;
    wdot[24] += qdot;
    wdot[57] -= qdot;
    wdot[61] += qdot;
  }

  {
    // reaction 384:  C2H4 + CF3 <=> C2H3 + CHF3
    const amrex::Real k_f = 800000 * exp(-(6038.59998965664) * invT);
    const amrex::Real qf = k_f * (sc[24] * sc[62]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[23] + g_RT[24] - g_RT[58] + g_RT[62])) *
                           (sc[23] * sc[58]);
    const amrex::Real qdot = qf - qr;
    wdot[23] += qdot;
    wdot[24] -= qdot;
    wdot[58] += qdot;
    wdot[62] -= qdot;
  }

  {
    // reaction 385:  CF3 + CH3F <=> CH2F + CHF3
    const amrex::Real k_f = 575000 * exp(-(5641.05882367091) * invT);
    const amrex::Real qf = k_f * (sc[56] * sc[62]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[56] - g_RT[58] - g_RT[60] + g_RT[62])) *
                           (sc[58] * sc[60]);
    const amrex::Real qdot = qf - qr;
    wdot[56] -= qdot;
    wdot[58] += qdot;
    wdot[60] += qdot;
    wdot[62] -= qdot;
  }

  {
    // reaction 386:  CH2F + CH2F2 <=> CH3F + CHF2
    const amrex::Real k_f = 90000 * exp(-(7045.03332126608) * invT);
    const amrex::Real qf = k_f * (sc[57] * sc[60]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[56] + g_RT[57] + g_RT[60] - g_RT[61])) *
                           (sc[56] * sc[61]);
    const amrex::Real qdot = qf - qr;
    wdot[56] += qdot;
    wdot[57] -= qdot;
    wdot[60] -= qdot;
    wdot[61] += qdot;
  }

  {
    // reaction 387:  CF3 + CH2F2 <=> CHF2 + CHF3
    const amrex::Real k_f = 427000 * exp(-(5686.34832359333) * invT);
    const amrex::Real qf = k_f * (sc[57] * sc[62]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[57] - g_RT[58] - g_RT[61] + g_RT[62])) *
                           (sc[58] * sc[61]);
    const amrex::Real qdot = qf - qr;
    wdot[57] -= qdot;
    wdot[58] += qdot;
    wdot[61] += qdot;
    wdot[62] -= qdot;
  }

  {
    // reaction 388:  CH2F + CH3OH <=> CH3F + CH3O
    const amrex::Real k_f =
      1.44e-05 * exp((3.1) * logT - (4931.52332488625) * invT);
    const amrex::Real qf = k_f * (sc[20] * sc[60]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[19] + g_RT[20] - g_RT[56] + g_RT[60])) *
                           (sc[19] * sc[56]);
    const amrex::Real qdot = qf - qr;
    wdot[19] += qdot;
    wdot[20] -= qdot;
    wdot[56] += qdot;
    wdot[60] -= qdot;
  }

  {
    // reaction 389:  CH3OH + CHF2 <=> CH2F2 + CH3O
    const amrex::Real k_f =
      1.44e-05 * exp((3.1) * logT - (4528.94999224248) * invT);
    const amrex::Real qf = k_f * (sc[20] * sc[61]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[19] + g_RT[20] - g_RT[57] + g_RT[61])) *
                           (sc[19] * sc[57]);
    const amrex::Real qdot = qf - qr;
    wdot[19] += qdot;
    wdot[20] -= qdot;
    wdot[57] += qdot;
    wdot[61] -= qdot;
  }

  {
    // reaction 390:  CF3 + CH3OH <=> CH3O + CHF3
    const amrex::Real k_f =
      1.44e-05 * exp((3.1) * logT - (2767.69166192596) * invT);
    const amrex::Real qf = k_f * (sc[20] * sc[62]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[19] + g_RT[20] - g_RT[58] + g_RT[62])) *
                           (sc[19] * sc[58]);
    const amrex::Real qdot = qf - qr;
    wdot[19] += qdot;
    wdot[20] -= qdot;
    wdot[58] += qdot;
    wdot[62] -= qdot;
  }

  {
    // reaction 391:  CH2F + CH3OH <=> CH2OH + CH3F
    const amrex::Real k_f =
      3.2e-05 * exp((3.2) * logT - (5032.1666580472) * invT);
    const amrex::Real qf = k_f * (sc[20] * sc[60]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[18] + g_RT[20] - g_RT[56] + g_RT[60])) *
                           (sc[18] * sc[56]);
    const amrex::Real qdot = qf - qr;
    wdot[18] += qdot;
    wdot[20] -= qdot;
    wdot[56] += qdot;
    wdot[60] -= qdot;
  }

  {
    // reaction 392:  CH3OH + CHF2 <=> CH2F2 + CH2OH
    const amrex::Real k_f =
      3.2e-05 * exp((3.2) * logT - (4679.91499198389) * invT);
    const amrex::Real qf = k_f * (sc[20] * sc[61]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[18] + g_RT[20] - g_RT[57] + g_RT[61])) *
                           (sc[18] * sc[57]);
    const amrex::Real qdot = qf - qr;
    wdot[18] += qdot;
    wdot[20] -= qdot;
    wdot[57] += qdot;
    wdot[61] -= qdot;
  }

  {
    // reaction 393:  CF3 + CH3OH <=> CH2OH + CHF3
    const amrex::Real k_f =
      3.2e-05 * exp((3.2) * logT - (2868.3349950869) * invT);
    const amrex::Real qf = k_f * (sc[20] * sc[62]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[18] + g_RT[20] - g_RT[58] + g_RT[62])) *
                           (sc[18] * sc[58]);
    const amrex::Real qdot = qf - qr;
    wdot[18] += qdot;
    wdot[20] -= qdot;
    wdot[58] += qdot;
    wdot[62] -= qdot;
  }

  {
    // reaction 394:  CH2F + CH2O <=> CH3F + HCO
    const amrex::Real k_f =
      0.00554 * exp((2.81) * logT - (4176.69832617917) * invT);
    const amrex::Real qf = k_f * (sc[17] * sc[60]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[16] + g_RT[17] - g_RT[56] + g_RT[60])) *
                           (sc[16] * sc[56]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[17] -= qdot;
    wdot[56] += qdot;
    wdot[60] -= qdot;
  }

  {
    // reaction 395:  CH2O + CHF2 <=> CH2F2 + HCO
    const amrex::Real k_f =
      0.00554 * exp((2.81) * logT - (3925.08999327681) * invT);
    const amrex::Real qf = k_f * (sc[17] * sc[61]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[16] + g_RT[17] - g_RT[57] + g_RT[61])) *
                           (sc[16] * sc[57]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[17] -= qdot;
    wdot[57] += qdot;
    wdot[61] -= qdot;
  }

  {
    // reaction 396:  CF3 + CH2O <=> CHF3 + HCO
    const amrex::Real k_f =
      0.00554 * exp((2.81) * logT - (2314.79666270171) * invT);
    const amrex::Real qf = k_f * (sc[17] * sc[62]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[16] + g_RT[17] - g_RT[58] + g_RT[62])) *
                           (sc[16] * sc[58]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[17] -= qdot;
    wdot[58] += qdot;
    wdot[62] -= qdot;
  }

  {
    // reaction 397:  CH2F + HCO <=> CH3F + CO
    const amrex::Real k_f = 90000000;
    const amrex::Real qf = k_f * (sc[16] * sc[60]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[14] + g_RT[16] - g_RT[56] + g_RT[60])) *
                           (sc[14] * sc[56]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[16] -= qdot;
    wdot[56] += qdot;
    wdot[60] -= qdot;
  }

  {
    // reaction 398:  CHF2 + HCO <=> CH2F2 + CO
    const amrex::Real k_f = 90000000;
    const amrex::Real qf = k_f * (sc[16] * sc[61]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[14] + g_RT[16] - g_RT[57] + g_RT[61])) *
                           (sc[14] * sc[57]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[16] -= qdot;
    wdot[57] += qdot;
    wdot[61] -= qdot;
  }

  {
    // reaction 399:  CF3 + HCO <=> CHF3 + CO
    const amrex::Real k_f = 90000000;
    const amrex::Real qf = k_f * (sc[16] * sc[62]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[14] + g_RT[16] - g_RT[58] + g_RT[62])) *
                           (sc[14] * sc[58]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[16] -= qdot;
    wdot[58] += qdot;
    wdot[62] -= qdot;
  }

  {
    // reaction 400:  CH2F + HCO <=> CH2CO + HF
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[16] * sc[60]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[16] - g_RT[28] - g_RT[53] + g_RT[60])) *
                           (sc[28] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[16] -= qdot;
    wdot[28] += qdot;
    wdot[53] += qdot;
    wdot[60] -= qdot;
  }

  {
    // reaction 401:  CH2F + O2 => CHFO + H + O
    const amrex::Real k_f =
      2260 * exp((1.14) * logT - (14341.6749754345) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[60]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[60] -= qdot;
    wdot[68] += qdot;
  }

  {
    // reaction 402:  CHF2 + O2 => CF2O + H + O
    const amrex::Real k_f =
      2260 * exp((1.14) * logT - (8303.07498577788) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[61]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[61] -= qdot;
    wdot[67] += qdot;
  }

  {
    // reaction 403:  CF3 + O2 <=> CF3O + O
    const amrex::Real k_f =
      2260 * exp((1.14) * logT - (10819.1583148015) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[62]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[62] - g_RT[66])) * (sc[2] * sc[66]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[62] -= qdot;
    wdot[66] += qdot;
  }

  {
    // reaction 404:  CH2F + HO2 => CHFO + H + OH
    const amrex::Real k_f = 15000000;
    const amrex::Real qf = k_f * (sc[6] * sc[60]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[60] -= qdot;
    wdot[68] += qdot;
  }

  {
    // reaction 405:  CHF2 + HO2 => CF2O + H + OH
    const amrex::Real k_f = 15000000;
    const amrex::Real qf = k_f * (sc[6] * sc[61]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[61] -= qdot;
    wdot[67] += qdot;
  }

  {
    // reaction 406:  CF3 + HO2 <=> CF3O + OH
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[6] * sc[62]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[62] - g_RT[66])) * (sc[4] * sc[66]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[62] -= qdot;
    wdot[66] += qdot;
  }

  {
    // reaction 407:  CH2F + HO2 <=> CH3F + O2
    const amrex::Real k_f = 3000000;
    const amrex::Real qf = k_f * (sc[6] * sc[60]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[6] - g_RT[56] + g_RT[60])) * (sc[3] * sc[56]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[6] -= qdot;
    wdot[56] += qdot;
    wdot[60] -= qdot;
  }

  {
    // reaction 408:  CHF2 + HO2 <=> CH2F2 + O2
    const amrex::Real k_f = 3000000;
    const amrex::Real qf = k_f * (sc[6] * sc[61]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[6] - g_RT[57] + g_RT[61])) * (sc[3] * sc[57]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[6] -= qdot;
    wdot[57] += qdot;
    wdot[61] -= qdot;
  }

  {
    // reaction 409:  CF3 + HO2 <=> CHF3 + O2
    const amrex::Real k_f = 2000000;
    const amrex::Real qf = k_f * (sc[6] * sc[62]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[6] - g_RT[58] + g_RT[62])) * (sc[3] * sc[58]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[6] -= qdot;
    wdot[58] += qdot;
    wdot[62] -= qdot;
  }

  {
    // reaction 411:  CF3O + H <=> CF2O + HF
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[1] * sc[66]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[53] + g_RT[66] - g_RT[67])) *
                           (sc[53] * sc[67]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[53] += qdot;
    wdot[66] -= qdot;
    wdot[67] += qdot;
  }

  {
    // reaction 412:  CF3O + H2 => CF2O + H + HF
    const amrex::Real k_f = 10000000 * exp(-(2516.0833290236) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[66]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[53] += qdot;
    wdot[66] -= qdot;
    wdot[67] += qdot;
  }

  {
    // reaction 413:  CF3O + H2O => CF2O + HF + OH
    const amrex::Real k_f = 10000000 * exp(-(2516.0833290236) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[66]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[53] += qdot;
    wdot[66] -= qdot;
    wdot[67] += qdot;
  }

  {
    // reaction 414:  CF3O + CH4 => CF2O + CH3 + HF
    const amrex::Real k_f = 8000000 * exp(-(1157.39833135086) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc[66]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[13] -= qdot;
    wdot[53] += qdot;
    wdot[66] -= qdot;
    wdot[67] += qdot;
  }

  {
    // reaction 415:  C2H6 + CF3O => C2H5 + CF2O + HF
    const amrex::Real k_f = 12000000 * exp(-(1157.39833135086) * invT);
    const amrex::Real qf = k_f * (sc[26] * sc[66]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[25] += qdot;
    wdot[26] -= qdot;
    wdot[53] += qdot;
    wdot[66] -= qdot;
    wdot[67] += qdot;
  }

  {
    // reaction 416:  C2H4 + CF3O => C2H3 + CF2O + HF
    const amrex::Real k_f = 10000000 * exp(-(2516.0833290236) * invT);
    const amrex::Real qf = k_f * (sc[24] * sc[66]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[23] += qdot;
    wdot[24] -= qdot;
    wdot[53] += qdot;
    wdot[66] -= qdot;
    wdot[67] += qdot;
  }

  {
    // reaction 417:  CF3O + CH2O => CF2O + HCO + HF
    const amrex::Real k_f = 5000000 * exp(-(2516.0833290236) * invT);
    const amrex::Real qf = k_f * (sc[17] * sc[66]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[17] -= qdot;
    wdot[53] += qdot;
    wdot[66] -= qdot;
    wdot[67] += qdot;
  }

  {
    // reaction 418:  CF3O + HCO => CF2O + CO + HF
    const amrex::Real k_f = 5000000 * exp(-(1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[16] * sc[66]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[16] -= qdot;
    wdot[53] += qdot;
    wdot[66] -= qdot;
    wdot[67] += qdot;
  }

  {
    // reaction 419:  CHF + O2 <=> CHFO + O
    const amrex::Real k_f = 20000000 * exp(-(8303.07498577788) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[63]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[63] - g_RT[68])) * (sc[2] * sc[68]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[63] -= qdot;
    wdot[68] += qdot;
  }

  {
    // reaction 420:  CF2 + O2 <=> CF2O + O
    const amrex::Real k_f = 20000000 * exp(-(13335.2416438251) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[64]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[64] - g_RT[67])) * (sc[2] * sc[67]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[64] -= qdot;
    wdot[67] += qdot;
  }

  {
    // reaction 421:  CHF + O <=> CO + HF
    const amrex::Real k_f = 90000000;
    const amrex::Real qf = k_f * (sc[2] * sc[63]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[14] - g_RT[53] + g_RT[63])) *
                           (sc[14] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[14] += qdot;
    wdot[53] += qdot;
    wdot[63] -= qdot;
  }

  {
    // reaction 422:  CF2 + O <=> CFO + F
    const amrex::Real k_f = 24500000;
    const amrex::Real qf = k_f * (sc[2] * sc[64]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[54] + g_RT[64] - g_RT[69])) *
                           (sc[54] * sc[69]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[54] += qdot;
    wdot[64] -= qdot;
    wdot[69] += qdot;
  }

  {
    // reaction 423:  CHF + OH <=> CHFO + H
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[4] * sc[63]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[63] - g_RT[68])) * (sc[1] * sc[68]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[63] -= qdot;
    wdot[68] += qdot;
  }

  {
    // reaction 424:  CF2 + OH <=> CF2O + H
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[4] * sc[64]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[64] - g_RT[67])) * (sc[1] * sc[67]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[64] -= qdot;
    wdot[67] += qdot;
  }

  {
    // reaction 425:  CHF + OH <=> HCO + HF
    const amrex::Real k_f = 4000000;
    const amrex::Real qf = k_f * (sc[4] * sc[63]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[16] - g_RT[53] + g_RT[63])) *
                           (sc[16] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[16] += qdot;
    wdot[53] += qdot;
    wdot[63] -= qdot;
  }

  {
    // reaction 426:  CF2 + OH <=> CFO + HF
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[4] * sc[64]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[53] + g_RT[64] - g_RT[69])) *
                           (sc[53] * sc[69]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[53] += qdot;
    wdot[64] -= qdot;
    wdot[69] += qdot;
  }

  {
    // reaction 427:  CHF + HO2 <=> CHFO + OH
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[6] * sc[63]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[63] - g_RT[68])) * (sc[4] * sc[68]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[63] -= qdot;
    wdot[68] += qdot;
  }

  {
    // reaction 428:  CF2 + HO2 <=> CF2O + OH
    const amrex::Real k_f = 10000000 * exp(-(1761.25833031652) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[64]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[64] - g_RT[67])) * (sc[4] * sc[67]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[64] -= qdot;
    wdot[67] += qdot;
  }

  {
    // reaction 429:  CHF + HO2 <=> CH2F + O2
    const amrex::Real k_f = 2000000;
    const amrex::Real qf = k_f * (sc[6] * sc[63]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[6] - g_RT[60] + g_RT[63])) * (sc[3] * sc[60]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[6] -= qdot;
    wdot[60] += qdot;
    wdot[63] -= qdot;
  }

  {
    // reaction 430:  CF2 + HO2 <=> CHF2 + O2
    const amrex::Real k_f = 2000000 * exp(-(1761.25833031652) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[64]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[6] - g_RT[61] + g_RT[64])) * (sc[3] * sc[61]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[6] -= qdot;
    wdot[61] += qdot;
    wdot[64] -= qdot;
  }

  {
    // reaction 431:  CHF + H2O <=> CH2O + HF
    const amrex::Real k_f = 5000000 * exp(-(3270.90832773068) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[63]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[5] - g_RT[17] - g_RT[53] + g_RT[63])) *
                           (sc[17] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[17] += qdot;
    wdot[53] += qdot;
    wdot[63] -= qdot;
  }

  {
    // reaction 432:  CF2 + H2O <=> CHFO + HF
    const amrex::Real k_f = 5000000 * exp(-(12580.416645118) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[64]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[5] - g_RT[53] + g_RT[64] - g_RT[68])) *
                           (sc[53] * sc[68]);
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[53] += qdot;
    wdot[64] -= qdot;
    wdot[68] += qdot;
  }

  {
    // reaction 434:  CF2 + H <=> CF + HF
    const amrex::Real k_f = 39800000 * exp(-(2284.60366275343) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[64]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[53] + g_RT[64] - g_RT[65])) *
                           (sc[53] * sc[65]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[53] += qdot;
    wdot[64] -= qdot;
    wdot[65] += qdot;
  }

  {
    // reaction 435:  CH2O + CHF <=> CH2F + HCO
    const amrex::Real k_f = 10000000 * exp(-(7548.2499870708) * invT);
    const amrex::Real qf = k_f * (sc[17] * sc[63]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[16] + g_RT[17] - g_RT[60] + g_RT[63])) *
                           (sc[16] * sc[60]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[17] -= qdot;
    wdot[60] += qdot;
    wdot[63] -= qdot;
  }

  {
    // reaction 436:  CH2O + CHF <=> CH2CO + HF
    const amrex::Real k_f = 10000000 * exp(-(7548.2499870708) * invT);
    const amrex::Real qf = k_f * (sc[17] * sc[63]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[17] - g_RT[28] - g_RT[53] + g_RT[63])) *
                           (sc[28] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[17] -= qdot;
    wdot[28] += qdot;
    wdot[53] += qdot;
    wdot[63] -= qdot;
  }

  {
    // reaction 437:  CF2 + CH2O <=> CHF2 + HCO
    const amrex::Real k_f = 10000000 * exp(-(20631.8832979935) * invT);
    const amrex::Real qf = k_f * (sc[17] * sc[64]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[16] + g_RT[17] - g_RT[61] + g_RT[64])) *
                           (sc[16] * sc[61]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[17] -= qdot;
    wdot[61] += qdot;
    wdot[64] -= qdot;
  }

  {
    // reaction 438:  CHF + HCO <=> CH2F + CO
    const amrex::Real k_f = 20000000 * exp(-(7548.2499870708) * invT);
    const amrex::Real qf = k_f * (sc[16] * sc[63]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[14] + g_RT[16] - g_RT[60] + g_RT[63])) *
                           (sc[14] * sc[60]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[16] -= qdot;
    wdot[60] += qdot;
    wdot[63] -= qdot;
  }

  {
    // reaction 439:  CF2 + HCO <=> CHF2 + CO
    const amrex::Real k_f = 20000000 * exp(-(20631.8832979935) * invT);
    const amrex::Real qf = k_f * (sc[16] * sc[64]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[14] + g_RT[16] - g_RT[61] + g_RT[64])) *
                           (sc[14] * sc[61]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[16] -= qdot;
    wdot[61] += qdot;
    wdot[64] -= qdot;
  }

  {
    // reaction 440:  CF + O2 <=> CFO + O
    const amrex::Real k_f = 6620000 * exp(-(850.436165209976) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[65]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[65] - g_RT[69])) * (sc[2] * sc[69]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[65] -= qdot;
    wdot[69] += qdot;
  }

  {
    // reaction 441:  CF + H2O <=> CHFO + H
    const amrex::Real k_f = 20000000 * exp(-(8554.68331868023) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[65]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[5] + g_RT[65] - g_RT[68])) * (sc[1] * sc[68]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[5] -= qdot;
    wdot[65] -= qdot;
    wdot[68] += qdot;
  }

  {
    // reaction 442:  CF + H <=> C + HF
    const amrex::Real k_f = 80000000 * exp(-(583.731332333475) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[65]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[8] - g_RT[53] + g_RT[65])) * (sc[8] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[8] += qdot;
    wdot[53] += qdot;
    wdot[65] -= qdot;
  }

  {
    // reaction 443:  CF + O <=> CO + F
    const amrex::Real k_f = 80000000 * exp(-(709.535498784655) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[65]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[14] - g_RT[54] + g_RT[65])) *
                           (sc[14] * sc[54]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[14] += qdot;
    wdot[54] += qdot;
    wdot[65] -= qdot;
  }

  {
    // reaction 444:  CF + OH <=> CO + HF
    const amrex::Real k_f = 80000000 * exp(-(709.535498784655) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[65]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[14] - g_RT[53] + g_RT[65])) *
                           (sc[14] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[14] += qdot;
    wdot[53] += qdot;
    wdot[65] -= qdot;
  }

  {
    // reaction 445:  CF + HO2 => CFO + OH
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[6] * sc[65]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[65] -= qdot;
    wdot[69] += qdot;
  }

  {
    // reaction 446:  C2H4 + CF => C2H2 + CH2F
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[24] * sc[65]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[22] += qdot;
    wdot[24] -= qdot;
    wdot[60] += qdot;
    wdot[65] -= qdot;
  }

  {
    // reaction 447:  CF + CH2O => CHF + HCO
    const amrex::Real k_f = 10000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[17] * sc[65]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[17] -= qdot;
    wdot[63] += qdot;
    wdot[65] -= qdot;
  }

  {
    // reaction 448:  CF + HCO => CHF + CO
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[16] * sc[65]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[16] -= qdot;
    wdot[63] += qdot;
    wdot[65] -= qdot;
  }

  {
    // reaction 450:  CFO + F <=> CF2O
    const amrex::Real k_f = 1000000;
    const amrex::Real qf = k_f * (sc[54] * sc[69]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[54] - g_RT[67] + g_RT[69])) * (refC) * (sc[67]);
    const amrex::Real qdot = qf - qr;
    wdot[54] -= qdot;
    wdot[67] += qdot;
    wdot[69] -= qdot;
  }

  {
    // reaction 451:  CHFO + H <=> CFO + H2
    const amrex::Real k_f =
      110 * exp((1.77) * logT - (1509.64999741416) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[68]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[0] + g_RT[1] + g_RT[68] - g_RT[69])) * (sc[0] * sc[69]);
    const amrex::Real qdot = qf - qr;
    wdot[0] += qdot;
    wdot[1] -= qdot;
    wdot[68] -= qdot;
    wdot[69] += qdot;
  }

  {
    // reaction 452:  CF2O + H <=> CFO + HF
    const amrex::Real k_f = 24 * exp((1.88) * logT - (18065.4783023894) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[67]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[53] + g_RT[67] - g_RT[69])) *
                           (sc[53] * sc[69]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[53] += qdot;
    wdot[67] -= qdot;
    wdot[69] += qdot;
  }

  {
    // reaction 453:  CF2O + H <=> CFO + HF
    const amrex::Real k_f =
      12000 * exp((0.83) * logT - (11221.7316474452) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[67]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[53] + g_RT[67] - g_RT[69])) *
                           (sc[53] * sc[69]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[53] += qdot;
    wdot[67] -= qdot;
    wdot[69] += qdot;
  }

  {
    // reaction 454:  CF2O + H <=> CFO + HF
    const amrex::Real k_f = 550 * exp((1.42) * logT - (9510.7949837092) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[67]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[53] + g_RT[67] - g_RT[69])) *
                           (sc[53] * sc[69]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[53] += qdot;
    wdot[67] -= qdot;
    wdot[69] += qdot;
  }

  {
    // reaction 455:  CF2O + H2O => CO2 + 2 HF
    const amrex::Real k_f =
      7.4e-09 * exp((3.84) * logT - (12630.7383116985) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[67]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[5] -= qdot;
    wdot[15] += qdot;
    wdot[53] += 2.000000 * qdot;
    wdot[67] -= qdot;
  }

  {
    // reaction 456:  CHFO + O <=> CFO + OH
    const amrex::Real k_f = 9000000 * exp(-(1549.90733067854) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[68]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[4] + g_RT[68] - g_RT[69])) * (sc[4] * sc[69]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[4] += qdot;
    wdot[68] -= qdot;
    wdot[69] += qdot;
  }

  {
    // reaction 457:  CHFO + OH <=> CFO + H2O
    const amrex::Real k_f =
      1720 * exp((1.18) * logT - (-224.93784961471) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[68]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[5] + g_RT[68] - g_RT[69])) * (sc[5] * sc[69]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[5] += qdot;
    wdot[68] -= qdot;
    wdot[69] += qdot;
  }

  {
    // reaction 458:  CF2O + OH => CO2 + F + HF
    const amrex::Real k_f =
      0.0027 * exp((2.38) * logT - (10567.5499818991) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[67]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[15] += qdot;
    wdot[53] += qdot;
    wdot[54] += qdot;
    wdot[67] -= qdot;
  }

  {
    // reaction 459:  CFO + H2O2 <=> CHFO + HO2
    const amrex::Real k_f = 100000 * exp(-(1962.54499663841) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[69]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[7] - g_RT[68] + g_RT[69])) * (sc[6] * sc[68]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[7] -= qdot;
    wdot[68] += qdot;
    wdot[69] -= qdot;
  }

  {
    // reaction 460:  CH3 + CHFO <=> CFO + CH4
    const amrex::Real k_f = 2000000 * exp(-(4528.94999224248) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[68]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[13] + g_RT[68] - g_RT[69])) *
                           (sc[13] * sc[69]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[68] -= qdot;
    wdot[69] += qdot;
  }

  {
    // reaction 461:  CH2F + CHFO <=> CFO + CH3F
    const amrex::Real k_f = 2000000 * exp(-(4528.94999224248) * invT);
    const amrex::Real qf = k_f * (sc[60] * sc[68]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[56] + g_RT[60] + g_RT[68] - g_RT[69])) *
                           (sc[56] * sc[69]);
    const amrex::Real qdot = qf - qr;
    wdot[56] += qdot;
    wdot[60] -= qdot;
    wdot[68] -= qdot;
    wdot[69] += qdot;
  }

  {
    // reaction 462:  CHF2 + CHFO <=> CFO + CH2F2
    const amrex::Real k_f = 2000000 * exp(-(4528.94999224248) * invT);
    const amrex::Real qf = k_f * (sc[61] * sc[68]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[57] + g_RT[61] + g_RT[68] - g_RT[69])) *
                           (sc[57] * sc[69]);
    const amrex::Real qdot = qf - qr;
    wdot[57] += qdot;
    wdot[61] -= qdot;
    wdot[68] -= qdot;
    wdot[69] += qdot;
  }

  {
    // reaction 463:  CF3 + CHFO <=> CFO + CHF3
    const amrex::Real k_f = 2000000 * exp(-(4528.94999224248) * invT);
    const amrex::Real qf = k_f * (sc[62] * sc[68]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[58] + g_RT[62] + g_RT[68] - g_RT[69])) *
                           (sc[58] * sc[69]);
    const amrex::Real qdot = qf - qr;
    wdot[58] += qdot;
    wdot[62] -= qdot;
    wdot[68] -= qdot;
    wdot[69] += qdot;
  }

  {
    // reaction 464:  C2H3 + CHFO <=> C2H4 + CFO
    const amrex::Real k_f = 2000000 * exp(-(2516.0833290236) * invT);
    const amrex::Real qf = k_f * (sc[23] * sc[68]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[23] - g_RT[24] + g_RT[68] - g_RT[69])) *
                           (sc[24] * sc[69]);
    const amrex::Real qdot = qf - qr;
    wdot[23] -= qdot;
    wdot[24] += qdot;
    wdot[68] -= qdot;
    wdot[69] += qdot;
  }

  {
    // reaction 465:  CFO + O <=> CO2 + F
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[2] * sc[69]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[15] - g_RT[54] + g_RT[69])) *
                           (sc[15] * sc[54]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[15] += qdot;
    wdot[54] += qdot;
    wdot[69] -= qdot;
  }

  {
    // reaction 466:  CFO + OH <=> CO2 + HF
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[4] * sc[69]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] - g_RT[15] - g_RT[53] + g_RT[69])) *
                           (sc[15] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[15] += qdot;
    wdot[53] += qdot;
    wdot[69] -= qdot;
  }

  {
    // reaction 467:  CFO + HO2 => CO2 + F + OH
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[6] * sc[69]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[15] += qdot;
    wdot[54] += qdot;
    wdot[69] -= qdot;
  }

  {
    // reaction 468:  CFO + CH3 <=> CH2CO + HF
    const amrex::Real k_f = 27000000;
    const amrex::Real qf = k_f * (sc[12] * sc[69]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[28] - g_RT[53] + g_RT[69])) *
                           (sc[28] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[28] += qdot;
    wdot[53] += qdot;
    wdot[69] -= qdot;
  }

  {
    // reaction 469:  2 CFO <=> CF2O + CO
    const amrex::Real k_f = 22300000 * exp(-(160.022899725901) * invT);
    const amrex::Real qf = k_f * ((sc[69] * sc[69]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[14] - g_RT[67] + 2.000000 * g_RT[69])) *
                           (sc[14] * sc[67]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[67] += qdot;
    wdot[69] -= 2.000000 * qdot;
  }

  {
    // reaction 470:  CH2F + CH3 <=> C2H4 + HF
    const amrex::Real k_f =
      18500000000000 * exp((-1.86) * logT - (941.015165054826) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[60]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[24] - g_RT[53] + g_RT[60])) *
                           (sc[24] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[24] += qdot;
    wdot[53] += qdot;
    wdot[60] -= qdot;
  }

  {
    // reaction 471:  CH2(S) + CH3F <=> C2H4 + HF
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[11] * sc[56]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[24] - g_RT[53] + g_RT[56])) *
                           (sc[24] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[24] += qdot;
    wdot[53] += qdot;
    wdot[56] -= qdot;
  }

  {
    // reaction 472:  CH4 + CHF <=> C2H4 + HF
    const amrex::Real k_f = 40000000 * exp(-(7548.2499870708) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc[63]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[13] - g_RT[24] - g_RT[53] + g_RT[63])) *
                           (sc[24] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[24] += qdot;
    wdot[53] += qdot;
    wdot[63] -= qdot;
  }

  {
    // reaction 473:  CH2F + CH3 <=> CH4 + CHF
    const amrex::Real k_f = 30000000 * exp(-(1710.93666373605) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[60]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[13] + g_RT[60] - g_RT[63])) *
                           (sc[13] * sc[63]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[60] -= qdot;
    wdot[63] += qdot;
  }

  {
    // reaction 474:  2 CH2F <=> CH3F + CHF
    const amrex::Real k_f = 30000000 * exp(-(2415.43999586265) * invT);
    const amrex::Real qf = k_f * ((sc[60] * sc[60]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[56] + 2.000000 * g_RT[60] - g_RT[63])) *
                           (sc[56] * sc[63]);
    const amrex::Real qdot = qf - qr;
    wdot[56] += qdot;
    wdot[60] -= 2.000000 * qdot;
    wdot[63] += qdot;
  }

  {
    // reaction 475:  CH2F + CHF2 <=> CH2F2 + CHF
    const amrex::Real k_f = 10000000 * exp(-(2214.15332954077) * invT);
    const amrex::Real qf = k_f * (sc[60] * sc[61]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[57] + g_RT[60] + g_RT[61] - g_RT[63])) *
                           (sc[57] * sc[63]);
    const amrex::Real qdot = qf - qr;
    wdot[57] += qdot;
    wdot[60] -= qdot;
    wdot[61] -= qdot;
    wdot[63] += qdot;
  }

  {
    // reaction 476:  CF3 + CH2F <=> CHF + CHF3
    const amrex::Real k_f = 30000000 * exp(-(2314.79666270171) * invT);
    const amrex::Real qf = k_f * (sc[60] * sc[62]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[58] + g_RT[60] + g_RT[62] - g_RT[63])) *
                           (sc[58] * sc[63]);
    const amrex::Real qdot = qf - qr;
    wdot[58] += qdot;
    wdot[60] -= qdot;
    wdot[62] -= qdot;
    wdot[63] += qdot;
  }

  {
    // reaction 477:  CH3 + CHF2 <=> CF2 + CH4
    const amrex::Real k_f = 25000000 * exp(-(402.573332643776) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[61]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[13] + g_RT[61] - g_RT[64])) *
                           (sc[13] * sc[64]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[61] -= qdot;
    wdot[64] += qdot;
  }

  {
    // reaction 478:  CH2F + CHF2 <=> CF2 + CH3F
    const amrex::Real k_f = 30000000 * exp(-(1107.07666477038) * invT);
    const amrex::Real qf = k_f * (sc[60] * sc[61]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[56] + g_RT[60] + g_RT[61] - g_RT[64])) *
                           (sc[56] * sc[64]);
    const amrex::Real qdot = qf - qr;
    wdot[56] += qdot;
    wdot[60] -= qdot;
    wdot[61] -= qdot;
    wdot[64] += qdot;
  }

  {
    // reaction 479:  2 CHF2 <=> CF2 + CH2F2
    const amrex::Real k_f = 30000000 * exp(-(805.146665287552) * invT);
    const amrex::Real qf = k_f * ((sc[61] * sc[61]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[57] + 2.000000 * g_RT[61] - g_RT[64])) *
                           (sc[57] * sc[64]);
    const amrex::Real qdot = qf - qr;
    wdot[57] += qdot;
    wdot[61] -= 2.000000 * qdot;
    wdot[64] += qdot;
  }

  {
    // reaction 480:  CF3 + CHF2 <=> CF2 + CHF3
    const amrex::Real k_f = 30000000 * exp(-(1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[61] * sc[62]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[58] + g_RT[61] + g_RT[62] - g_RT[64])) *
                           (sc[58] * sc[64]);
    const amrex::Real qdot = qf - qr;
    wdot[58] += qdot;
    wdot[61] -= qdot;
    wdot[62] -= qdot;
    wdot[64] += qdot;
  }

  {
    // reaction 481:  CH2(S) + CHF <=> C2H2 + HF
    const amrex::Real k_f =
      170200000000000 * exp((-2.12) * logT - (1197.65566461523) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[63]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[22] - g_RT[53] + g_RT[63])) *
                           (sc[22] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[22] += qdot;
    wdot[53] += qdot;
    wdot[63] -= qdot;
  }

  {
    // reaction 482:  CH2 + CH2F <=> C2H4 + F
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[10] * sc[60]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[24] - g_RT[54] + g_RT[60])) *
                           (sc[24] * sc[54]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[24] += qdot;
    wdot[54] += qdot;
    wdot[60] -= qdot;
  }

  {
    // reaction 483:  CH2(S) + CH2F <=> C2H4 + F
    const amrex::Real k_f = 2000000;
    const amrex::Real qf = k_f * (sc[11] * sc[60]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[24] - g_RT[54] + g_RT[60])) *
                           (sc[24] * sc[54]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[24] += qdot;
    wdot[54] += qdot;
    wdot[60] -= qdot;
  }

  {
    // reaction 484:  F + HCCO <=> CHF + CO
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[27] * sc[54]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[14] + g_RT[27] + g_RT[54] - g_RT[63])) *
                           (sc[14] * sc[63]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[27] -= qdot;
    wdot[54] -= qdot;
    wdot[63] += qdot;
  }

  {
    // reaction 485:  CH4 + F <=> CH3 + HF
    const amrex::Real k_f =
      5900000 * exp((0.5) * logT - (226.447499612124) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc[54]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[12] + g_RT[13] - g_RT[53] + g_RT[54])) *
                           (sc[12] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[13] -= qdot;
    wdot[53] += qdot;
    wdot[54] -= qdot;
  }

  {
    // reaction 486:  CH3F + F <=> CH2F + HF
    const amrex::Real k_f = 135000000 * exp(-(603.859998965664) * invT);
    const amrex::Real qf = k_f * (sc[54] * sc[56]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[53] + g_RT[54] + g_RT[56] - g_RT[60])) *
                           (sc[53] * sc[60]);
    const amrex::Real qdot = qf - qr;
    wdot[53] += qdot;
    wdot[54] -= qdot;
    wdot[56] -= qdot;
    wdot[60] += qdot;
  }

  {
    // reaction 487:  CH2F2 + F <=> CHF2 + HF
    const amrex::Real k_f = 90000000 * exp(-(930.950831738731) * invT);
    const amrex::Real qf = k_f * (sc[54] * sc[57]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[53] + g_RT[54] + g_RT[57] - g_RT[61])) *
                           (sc[53] * sc[61]);
    const amrex::Real qdot = qf - qr;
    wdot[53] += qdot;
    wdot[54] -= qdot;
    wdot[57] -= qdot;
    wdot[61] += qdot;
  }

  {
    // reaction 488:  CHF3 + F <=> CF3 + HF
    const amrex::Real k_f = 45000000 * exp(-(1861.90166347746) * invT);
    const amrex::Real qf = k_f * (sc[54] * sc[58]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[53] + g_RT[54] + g_RT[58] - g_RT[62])) *
                           (sc[53] * sc[62]);
    const amrex::Real qdot = qf - qr;
    wdot[53] += qdot;
    wdot[54] -= qdot;
    wdot[58] -= qdot;
    wdot[62] += qdot;
  }

  {
    // reaction 489:  CH3OH + F <=> CH3O + HF
    const amrex::Real k_f =
      2620 * exp((1.44) * logT - (-103.159416489968) * invT);
    const amrex::Real qf = k_f * (sc[20] * sc[54]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[19] + g_RT[20] - g_RT[53] + g_RT[54])) *
                           (sc[19] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[19] += qdot;
    wdot[20] -= qdot;
    wdot[53] += qdot;
    wdot[54] -= qdot;
  }

  {
    // reaction 490:  CH3OH + F <=> CH2OH + HF
    const amrex::Real k_f =
      46.2 * exp((1.97) * logT - (-150.964999741416) * invT);
    const amrex::Real qf = k_f * (sc[20] * sc[54]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[18] + g_RT[20] - g_RT[53] + g_RT[54])) *
                           (sc[18] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[18] += qdot;
    wdot[20] -= qdot;
    wdot[53] += qdot;
    wdot[54] -= qdot;
  }

  {
    // reaction 491:  CH2O + F <=> HCO + HF
    const amrex::Real k_f = 60000000 * exp(-(1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[17] * sc[54]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[16] + g_RT[17] - g_RT[53] + g_RT[54])) *
                           (sc[16] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[17] -= qdot;
    wdot[53] += qdot;
    wdot[54] -= qdot;
  }

  {
    // reaction 492:  CHFO + F <=> CFO + HF
    const amrex::Real k_f = 26500000 * exp(-(905.789998448495) * invT);
    const amrex::Real qf = k_f * (sc[54] * sc[68]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[53] + g_RT[54] + g_RT[68] - g_RT[69])) *
                           (sc[53] * sc[69]);
    const amrex::Real qdot = qf - qr;
    wdot[53] += qdot;
    wdot[54] -= qdot;
    wdot[68] -= qdot;
    wdot[69] += qdot;
  }

  {
    // reaction 493:  CH3O + F <=> CH2O + HF
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[19] * sc[54]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[17] + g_RT[19] - g_RT[53] + g_RT[54])) *
                           (sc[17] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[17] += qdot;
    wdot[19] -= qdot;
    wdot[53] += qdot;
    wdot[54] -= qdot;
  }

  {
    // reaction 494:  F + HCO <=> CO + HF
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[16] * sc[54]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[14] + g_RT[16] - g_RT[53] + g_RT[54])) *
                           (sc[14] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[16] -= qdot;
    wdot[53] += qdot;
    wdot[54] -= qdot;
  }

  {
    // reaction 495:  C2H6 + F <=> C2H5 + HF
    const amrex::Real k_f = 8000000 * exp(-(150.964999741416) * invT);
    const amrex::Real qf = k_f * (sc[26] * sc[54]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[25] + g_RT[26] - g_RT[53] + g_RT[54])) *
                           (sc[25] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[25] += qdot;
    wdot[26] -= qdot;
    wdot[53] += qdot;
    wdot[54] -= qdot;
  }

  {
    // reaction 496:  C2H4 + F <=> C2H3 + HF
    const amrex::Real k_f = 100000000 * exp(-(1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[24] * sc[54]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[23] + g_RT[24] - g_RT[53] + g_RT[54])) *
                           (sc[23] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[23] += qdot;
    wdot[24] -= qdot;
    wdot[53] += qdot;
    wdot[54] -= qdot;
  }

  {
    // reaction 497:  C2H3 + F <=> C2H2 + HF
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[23] * sc[54]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[22] + g_RT[23] - g_RT[53] + g_RT[54])) *
                           (sc[22] * sc[53]);
    const amrex::Real qdot = qf - qr;
    wdot[22] += qdot;
    wdot[23] -= qdot;
    wdot[53] += qdot;
    wdot[54] -= qdot;
  }

  {
    // reaction 499:  CF4 + CH3 <=> CF3 + CH3F
    const amrex::Real k_f =
      0.0964 * exp((2.41) * logT - (13149.0514774773) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[59]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[56] + g_RT[59] - g_RT[62])) *
                           (sc[56] * sc[62]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[56] += qdot;
    wdot[59] -= qdot;
    wdot[62] += qdot;
  }

  {
    // reaction 500:  CF3O + CO <=> CF3 + CO2
    const amrex::Real k_f = 31300;
    const amrex::Real qf = k_f * (sc[14] * sc[66]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[14] - g_RT[15] - g_RT[62] + g_RT[66])) *
                           (sc[15] * sc[62]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[62] += qdot;
    wdot[66] -= qdot;
  }

  {
    // reaction 501:  CF2 + CFO <=> CF3 + CO
    const amrex::Real k_f = 540000;
    const amrex::Real qf = k_f * (sc[64] * sc[69]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[14] - g_RT[62] + g_RT[64] + g_RT[69])) *
                           (sc[14] * sc[62]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[62] += qdot;
    wdot[64] -= qdot;
    wdot[69] -= qdot;
  }

  {
    // reaction 503:  F2 + H <=> F + HF
    const amrex::Real k_f =
      2900 * exp((1.4) * logT - (669.278165520277) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[55]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[53] - g_RT[54] + g_RT[55])) *
                           (sc[53] * sc[54]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[53] += qdot;
    wdot[54] += qdot;
    wdot[55] -= qdot;
  }

  {
    // reaction 504:  CF3 + F2 <=> CF4 + F
    const amrex::Real k_f = 2650000 * exp(-(1258.0416645118) * invT);
    const amrex::Real qf = k_f * (sc[55] * sc[62]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[54] + g_RT[55] - g_RT[59] + g_RT[62])) *
                           (sc[54] * sc[59]);
    const amrex::Real qdot = qf - qr;
    wdot[54] += qdot;
    wdot[55] -= qdot;
    wdot[59] += qdot;
    wdot[62] -= qdot;
  }

  {
    // reaction 505:  CH3 + F2 <=> CH3F + F
    const amrex::Real k_f = 4000000 * exp(-(553.538332385192) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[55]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[54] + g_RT[55] - g_RT[56])) *
                           (sc[54] * sc[56]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[54] += qdot;
    wdot[55] -= qdot;
    wdot[56] += qdot;
  }

  {
    // reaction 506:  CF2 + F2 <=> CF3 + F
    const amrex::Real k_f = 1200000 * exp(-(1509.64999741416) * invT);
    const amrex::Real qf = k_f * (sc[55] * sc[64]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[54] + g_RT[55] - g_RT[62] + g_RT[64])) *
                           (sc[54] * sc[62]);
    const amrex::Real qdot = qf - qr;
    wdot[54] += qdot;
    wdot[55] -= qdot;
    wdot[62] += qdot;
    wdot[64] -= qdot;
  }

  {
    // reaction 507:  CFO + F2 <=> CF2O + F
    const amrex::Real k_f = 1000000;
    const amrex::Real qf = k_f * (sc[55] * sc[69]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[54] + g_RT[55] - g_RT[67] + g_RT[69])) *
                           (sc[54] * sc[67]);
    const amrex::Real qdot = qf - qr;
    wdot[54] += qdot;
    wdot[55] -= qdot;
    wdot[67] += qdot;
    wdot[69] -= qdot;
  }

  {
    // reaction 508:  F2 + H2 <=> F + H + HF
    const amrex::Real k_f = 3440000 * exp(-(9958.6578162754) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[55]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[0] - g_RT[1] - g_RT[53] - g_RT[54] + g_RT[55])) *
      (refCinv) * (sc[1] * sc[53] * sc[54]);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += qdot;
    wdot[53] += qdot;
    wdot[54] += qdot;
    wdot[55] -= qdot;
  }

  {
    // reaction 509:  CO + F2 <=> CFO + F
    const amrex::Real k_f = 470000 * exp(-(6793.42498836372) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[55]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[14] - g_RT[54] + g_RT[55] - g_RT[69])) *
                           (sc[54] * sc[69]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[54] += qdot;
    wdot[55] -= qdot;
    wdot[69] += qdot;
  }

  {
    // reaction 510:  C + F2 <=> CF + F
    const amrex::Real k_f = 1700000 * exp(-(754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[55]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[8] - g_RT[54] + g_RT[55] - g_RT[65])) *
                           (sc[54] * sc[65]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[54] += qdot;
    wdot[55] -= qdot;
    wdot[65] += qdot;
  }

  {
    // reaction 511:  CF + F2 <=> CF2 + F
    const amrex::Real k_f = 2400000;
    const amrex::Real qf = k_f * (sc[55] * sc[65]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[54] + g_RT[55] - g_RT[64] + g_RT[65])) *
                           (sc[54] * sc[64]);
    const amrex::Real qdot = qf - qr;
    wdot[54] += qdot;
    wdot[55] -= qdot;
    wdot[64] += qdot;
    wdot[65] -= qdot;
  }

  {
    // reaction 512:  CH4 + F2 <=> CH3 + F + HF
    const amrex::Real k_f = 2000000 * exp(-(5651.123156987) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc[55]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[12] + g_RT[13] - g_RT[53] - g_RT[54] + g_RT[55])) *
      (refCinv) * (sc[12] * sc[53] * sc[54]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[13] -= qdot;
    wdot[53] += qdot;
    wdot[54] += qdot;
    wdot[55] -= qdot;
  }

  {
    // reaction 513:  F2 + OH <=> F + HF + O
    const amrex::Real k_f = 70000000 * exp(-(4528.94999224248) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[55]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] - g_RT[53] - g_RT[54] + g_RT[55])) *
      (refCinv) * (sc[2] * sc[53] * sc[54]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[53] += qdot;
    wdot[54] += qdot;
    wdot[55] -= qdot;
  }

  {
    // reaction 514:  C3H8 + F <=> HF + nC3H7
    const amrex::Real k_f = 35000000;
    const amrex::Real qf = k_f * (sc[50] * sc[54]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[50] - g_RT[53] + g_RT[54] - g_RT[71])) *
                           (sc[53] * sc[71]);
    const amrex::Real qdot = qf - qr;
    wdot[50] -= qdot;
    wdot[53] += qdot;
    wdot[54] -= qdot;
    wdot[71] += qdot;
  }

  {
    // reaction 515:  C3H8 + F <=> HF + iC3H7
    const amrex::Real k_f = 41000000;
    const amrex::Real qf = k_f * (sc[50] * sc[54]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[50] - g_RT[53] + g_RT[54] - g_RT[70])) *
                           (sc[53] * sc[70]);
    const amrex::Real qdot = qf - qr;
    wdot[50] -= qdot;
    wdot[53] += qdot;
    wdot[54] -= qdot;
    wdot[70] += qdot;
  }

  {
    // reaction 516:  C3H8 + CF3 <=> CHF3 + nC3H7
    const amrex::Real k_f = 540000 * exp(-(4297.47032597231) * invT);
    const amrex::Real qf = k_f * (sc[50] * sc[62]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[50] - g_RT[58] + g_RT[62] - g_RT[71])) *
                           (sc[58] * sc[71]);
    const amrex::Real qdot = qf - qr;
    wdot[50] -= qdot;
    wdot[58] += qdot;
    wdot[62] -= qdot;
    wdot[71] += qdot;
  }

  {
    // reaction 517:  C3H8 + CF3 <=> CHF3 + iC3H7
    const amrex::Real k_f = 180000 * exp(-(3280.97266104677) * invT);
    const amrex::Real qf = k_f * (sc[50] * sc[62]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[50] - g_RT[58] + g_RT[62] - g_RT[70])) *
                           (sc[58] * sc[70]);
    const amrex::Real qdot = qf - qr;
    wdot[50] -= qdot;
    wdot[58] += qdot;
    wdot[62] -= qdot;
    wdot[70] += qdot;
  }
}

// compute the production rate for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWC(const amrex::Real T, amrex::Real C[], amrex::Real wdot[])
{

  // convert to SI
  for (int id = 0; id < 72; ++id) {
    C[id] *= 1.0e6;
  }

  // convert to chemkin units
  productionRate(wdot, C, T);

  // convert to chemkin units
  for (int id = 0; id < 72; ++id) {
    C[id] *= 1.0e-6;
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[])
{
  amrex::Real c[72]; // temporary storage
  amrex::Real YOW = 0;
  amrex::Real PWORT;

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 72; i++) {
    YOW += y[i] * imw(i);
  }
  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // multiply by 1e6 so c goes to SI
  PWORT *= 1e6;
  // Now compute conversion (and go to SI)
  for (int i = 0; i < 72; i++) {
    c[i] = PWORT * y[i] * imw(i);
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 72; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[])
{
  amrex::Real c[72]; // temporary storage
  amrex::Real PORT =
    1e6 * P / (8.31446261815324e+07 * T); // 1e6 * P/RT so c goes to SI units

  // Compute conversion, see Eq 10
  for (int id = 0; id < 72; ++id) {
    c[id] = x[id] * PORT;
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 72; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[])
{
  amrex::Real c[72]; // temporary storage

  // See Eq 8 with an extra 1e6 so c goes to SI
  for (int i = 0; i < 72; i++) {
    c[i] = 1e6 * rho * y[i] * imw(i);
  }

  // call productionRate
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 72; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[])
{
  amrex::Real c[72];  // temporary storage
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 2.016000;   // H2
  XW += x[1] * 1.008000;   // H
  XW += x[2] * 15.999000;  // O
  XW += x[3] * 31.998000;  // O2
  XW += x[4] * 17.007000;  // OH
  XW += x[5] * 18.015000;  // H2O
  XW += x[6] * 33.006000;  // HO2
  XW += x[7] * 34.014000;  // H2O2
  XW += x[8] * 12.011000;  // C
  XW += x[9] * 13.019000;  // CH
  XW += x[10] * 14.027000; // CH2
  XW += x[11] * 14.027000; // CH2(S)
  XW += x[12] * 15.035000; // CH3
  XW += x[13] * 16.043000; // CH4
  XW += x[14] * 28.010000; // CO
  XW += x[15] * 44.009000; // CO2
  XW += x[16] * 29.018000; // HCO
  XW += x[17] * 30.026000; // CH2O
  XW += x[18] * 31.034000; // CH2OH
  XW += x[19] * 31.034000; // CH3O
  XW += x[20] * 32.042000; // CH3OH
  XW += x[21] * 25.030000; // C2H
  XW += x[22] * 26.038000; // C2H2
  XW += x[23] * 27.046000; // C2H3
  XW += x[24] * 28.054000; // C2H4
  XW += x[25] * 29.062000; // C2H5
  XW += x[26] * 30.070000; // C2H6
  XW += x[27] * 41.029000; // HCCO
  XW += x[28] * 42.037000; // CH2CO
  XW += x[29] * 42.037000; // HCCOH
  XW += x[30] * 14.007000; // N
  XW += x[31] * 15.015000; // NH
  XW += x[32] * 16.023000; // NH2
  XW += x[33] * 17.031000; // NH3
  XW += x[34] * 29.022000; // NNH
  XW += x[35] * 30.006000; // NO
  XW += x[36] * 46.005000; // NO2
  XW += x[37] * 44.013000; // N2O
  XW += x[38] * 31.014000; // HNO
  XW += x[39] * 26.018000; // CN
  XW += x[40] * 27.026000; // HCN
  XW += x[41] * 28.034000; // H2CN
  XW += x[42] * 41.033000; // HCNN
  XW += x[43] * 43.025000; // HCNO
  XW += x[44] * 43.025000; // HOCN
  XW += x[45] * 43.025000; // HNCO
  XW += x[46] * 42.017000; // NCO
  XW += x[47] * 28.014000; // N2
  XW += x[48] * 39.950000; // AR
  XW += x[49] * 43.089000; // C3H7
  XW += x[50] * 44.097000; // C3H8
  XW += x[51] * 43.045000; // CH2CHO
  XW += x[52] * 44.053000; // CH3CHO
  XW += x[53] * 20.006403; // HF
  XW += x[54] * 18.998403; // F
  XW += x[55] * 37.996806; // F2
  XW += x[56] * 34.033403; // CH3F
  XW += x[57] * 52.023806; // CH2F2
  XW += x[58] * 70.014209; // CHF3
  XW += x[59] * 88.004613; // CF4
  XW += x[60] * 33.025403; // CH2F
  XW += x[61] * 51.015806; // CHF2
  XW += x[62] * 69.006209; // CF3
  XW += x[63] * 32.017403; // CHF
  XW += x[64] * 50.007806; // CF2
  XW += x[65] * 31.009403; // CF
  XW += x[66] * 85.005209; // CF3O
  XW += x[67] * 66.006806; // CF2O
  XW += x[68] * 48.016403; // CHFO
  XW += x[69] * 47.008403; // CFO
  XW += x[70] * 43.089000; // iC3H7
  XW += x[71] * 43.089000; // nC3H7
  // Extra 1e6 factor to take c to SI
  ROW = 1e6 * rho / XW;

  // Compute conversion, see Eq 11
  for (int id = 0; id < 72; ++id) {
    c[id] = x[id] * ROW;
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 72; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

//  species unit charge number
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRG(int kcharge[])
{
  kcharge[0] = 0;  // H2
  kcharge[1] = 0;  // H
  kcharge[2] = 0;  // O
  kcharge[3] = 0;  // O2
  kcharge[4] = 0;  // OH
  kcharge[5] = 0;  // H2O
  kcharge[6] = 0;  // HO2
  kcharge[7] = 0;  // H2O2
  kcharge[8] = 0;  // C
  kcharge[9] = 0;  // CH
  kcharge[10] = 0; // CH2
  kcharge[11] = 0; // CH2(S)
  kcharge[12] = 0; // CH3
  kcharge[13] = 0; // CH4
  kcharge[14] = 0; // CO
  kcharge[15] = 0; // CO2
  kcharge[16] = 0; // HCO
  kcharge[17] = 0; // CH2O
  kcharge[18] = 0; // CH2OH
  kcharge[19] = 0; // CH3O
  kcharge[20] = 0; // CH3OH
  kcharge[21] = 0; // C2H
  kcharge[22] = 0; // C2H2
  kcharge[23] = 0; // C2H3
  kcharge[24] = 0; // C2H4
  kcharge[25] = 0; // C2H5
  kcharge[26] = 0; // C2H6
  kcharge[27] = 0; // HCCO
  kcharge[28] = 0; // CH2CO
  kcharge[29] = 0; // HCCOH
  kcharge[30] = 0; // N
  kcharge[31] = 0; // NH
  kcharge[32] = 0; // NH2
  kcharge[33] = 0; // NH3
  kcharge[34] = 0; // NNH
  kcharge[35] = 0; // NO
  kcharge[36] = 0; // NO2
  kcharge[37] = 0; // N2O
  kcharge[38] = 0; // HNO
  kcharge[39] = 0; // CN
  kcharge[40] = 0; // HCN
  kcharge[41] = 0; // H2CN
  kcharge[42] = 0; // HCNN
  kcharge[43] = 0; // HCNO
  kcharge[44] = 0; // HOCN
  kcharge[45] = 0; // HNCO
  kcharge[46] = 0; // NCO
  kcharge[47] = 0; // N2
  kcharge[48] = 0; // AR
  kcharge[49] = 0; // C3H7
  kcharge[50] = 0; // C3H8
  kcharge[51] = 0; // CH2CHO
  kcharge[52] = 0; // CH3CHO
  kcharge[53] = 0; // HF
  kcharge[54] = 0; // F
  kcharge[55] = 0; // F2
  kcharge[56] = 0; // CH3F
  kcharge[57] = 0; // CH2F2
  kcharge[58] = 0; // CHF3
  kcharge[59] = 0; // CF4
  kcharge[60] = 0; // CH2F
  kcharge[61] = 0; // CHF2
  kcharge[62] = 0; // CF3
  kcharge[63] = 0; // CHF
  kcharge[64] = 0; // CF2
  kcharge[65] = 0; // CF
  kcharge[66] = 0; // CF3O
  kcharge[67] = 0; // CF2O
  kcharge[68] = 0; // CHFO
  kcharge[69] = 0; // CFO
  kcharge[70] = 0; // iC3H7
  kcharge[71] = 0; // nC3H7
}

//  species charge per unit mass
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRGMASS(amrex::Real zk[])
{

  int kchrg[72];
  CKCHRG(kchrg);

  for (int id = 0; id < 72; ++id) {
    zk[id] = 6.02214076e+23 * 1.60217663e-19 * kchrg[id] * imw(id);
  }
}

// compute an approx to the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian_precond(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real T, const int HP)
{

#if defined(PELE_COMPILE_AJACOBIAN) || !defined(AMREX_USE_HIP)
  for (int i = 0; i < 5329; i++) {
    J[i] = 0.0;
  }

  amrex::Real wdot[72];
  for (auto& val : wdot) {
    val = 0.0;
  }

  const amrex::Real invT = 1.0 / T;
  const amrex::Real invT2 = invT * invT;
  const amrex::Real logT = log(T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 / T;
  amrex::Real refCinv = 1.0 / refC;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int k = 0; k < 72; ++k) {
    mixture += sc[k];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[72];
  gibbs(g_RT, T);

  // compute the species enthalpy
  amrex::Real h_RT[72];
  speciesEnthalpy(h_RT, T);

  amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
  amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
  amrex::Real dqdci, dcdc_fac, dqdc[72];
  amrex::Real Pr, fPr, F, k_0, logPr;
  amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
  amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
  amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
  amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
  const amrex::Real ln10 = log(10.0);
  const amrex::Real log10e = 1.0 / log(10.0);
  // reaction 49: CH2 + H (+M) <=> CH3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[10];
  k_f = 600000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 1.04e+26 * exp(-2.76 * logT - (805.146665287552) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.76 * invT + (805.146665287552) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.562) * exp(-T / 91);
  Fcent2 = 0.562 * exp(-T / 5836);
  Fcent3 = exp(-8552 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 91 - Fcent2 / 5836 + Fcent3 * 8552 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[12];
  Kc = refCinv * exp(g_RT[1] + g_RT[10] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[10]) + (h_RT[12]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[10] -= q; // CH2
  wdot[12] += q; // CH3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[10];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac + k_f * sc[1];
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac - k_r;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] -= dqdc[k];
    J[73 * k + 10] -= dqdc[k];
    J[73 * k + 12] += dqdc[k];
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT

  // reaction 51: CH3 + H (+M) <=> CH4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + (3 - 1) * sc[13] +
          (1.5 - 1) * sc[14] + sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[12];
  k_f = 13900000000 * exp(-0.534 * logT - (269.72413287133) * invT);
  dlnkfdT = -0.534 * invT + (269.72413287133) * invT2;
  // pressure-fall-off
  k_0 = 2.62e+33 * exp(-4.76 * logT - (1227.84866456352) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.76 * invT + (1227.84866456352) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.783) * exp(-T / 74);
  Fcent2 = 0.783 * exp(-T / 2941);
  Fcent3 = exp(-6964 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 74 - Fcent2 / 2941 + Fcent3 * 6964 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[13];
  Kc = refCinv * exp(g_RT[1] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[12]) + (h_RT[13]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[12];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac + k_f * sc[1];
  dqdc[13] = 3 * dcdc_fac - k_r;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] -= dqdc[k];
    J[73 * k + 12] -= dqdc[k];
    J[73 * k + 13] += dqdc[k];
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT

  // reaction 53: H + HCO (+M) <=> CH2O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[16];
  k_f = 1090000 * exp(0.48 * logT - (-130.836333109227) * invT);
  dlnkfdT = 0.48 * invT + (-130.836333109227) * invT2;
  // pressure-fall-off
  k_0 = 2.47e+24 * exp(-2.57 * logT - (213.867082967006) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.57 * invT + (213.867082967006) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7824) * exp(-T / 271);
  Fcent2 = 0.7824 * exp(-T / 2755);
  Fcent3 = exp(-6570 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 271 - Fcent2 / 2755 + Fcent3 * 6570 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[17];
  Kc = refCinv * exp(g_RT[1] + g_RT[16] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[16]) + (h_RT[17]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[16] -= q; // HCO
  wdot[17] += q; // CH2O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[16];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac + k_f * sc[1];
  dqdc[17] = dcdc_fac - k_r;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] -= dqdc[k];
    J[73 * k + 16] -= dqdc[k];
    J[73 * k + 17] += dqdc[k];
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 55: CH2O + H (+M) <=> CH2OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 540000 * exp(0.454 * logT - (1811.57999689699) * invT);
  dlnkfdT = 0.454 * invT + (1811.57999689699) * invT2;
  // pressure-fall-off
  k_0 = 1.27e+32 * exp(-4.82 * logT - (3286.00482770482) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.82 * invT + (3286.00482770482) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7187) * exp(-T / 103);
  Fcent2 = 0.7187 * exp(-T / 1291);
  Fcent3 = exp(-4160 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 103 - Fcent2 / 1291 + Fcent3 * 4160 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[18];
  Kc = refCinv * exp(g_RT[1] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[18]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[17] -= q; // CH2O
  wdot[18] += q; // CH2OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[17];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac + k_f * sc[1];
  dqdc[18] = dcdc_fac - k_r;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] -= dqdc[k];
    J[73 * k + 17] -= dqdc[k];
    J[73 * k + 18] += dqdc[k];
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT

  // reaction 56: CH2O + H (+M) <=> CH3O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 540000 * exp(0.454 * logT - (1308.36333109227) * invT);
  dlnkfdT = 0.454 * invT + (1308.36333109227) * invT2;
  // pressure-fall-off
  k_0 = 2.2e+30 * exp(-4.8 * logT - (2797.88466187424) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.8 * invT + (2797.88466187424) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.758) * exp(-T / 94);
  Fcent2 = 0.758 * exp(-T / 1555);
  Fcent3 = exp(-4200 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 94 - Fcent2 / 1555 + Fcent3 * 4200 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[19];
  Kc = refCinv * exp(g_RT[1] + g_RT[17] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[19]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[17] -= q; // CH2O
  wdot[19] += q; // CH3O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[17];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac + k_f * sc[1];
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac - k_r;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] -= dqdc[k];
    J[73 * k + 17] -= dqdc[k];
    J[73 * k + 19] += dqdc[k];
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT

  // reaction 58: CH2OH + H (+M) <=> CH3OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[1] * sc[18];
  k_f = 1055000 * exp(0.5 * logT - (43.2766332592059) * invT);
  dlnkfdT = 0.5 * invT + (43.2766332592059) * invT2;
  // pressure-fall-off
  k_0 = 4.36e+31 * exp(-4.65 * logT - (2556.34066228798) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.65 * invT + (2556.34066228798) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.6) * exp(-T / 100);
  Fcent2 = 0.6 * exp(-T / 90000);
  Fcent3 = exp(-10000 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 100 - Fcent2 / 90000 + Fcent3 * 10000 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[1] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[18]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[18] -= q; // CH2OH
  wdot[20] += q; // CH3OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[18];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac + k_f * sc[1];
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac - k_r;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] -= dqdc[k];
    J[73 * k + 18] -= dqdc[k];
    J[73 * k + 20] += dqdc[k];
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5274] -= dqdT; // dwdot[CH2OH]/dT
  J[5276] += dqdT; // dwdot[CH3OH]/dT

  // reaction 62: CH3O + H (+M) <=> CH3OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 2430000 * exp(0.515 * logT - (25.160833290236) * invT);
  dlnkfdT = 0.515 * invT + (25.160833290236) * invT2;
  // pressure-fall-off
  k_0 = 4.66e+41 * exp(-7.44 * logT - (7085.29065453045) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.44 * invT + (7085.29065453045) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7) * exp(-T / 100);
  Fcent2 = 0.7 * exp(-T / 90000);
  Fcent3 = exp(-10000 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 100 - Fcent2 / 90000 + Fcent3 * 10000 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[1] + g_RT[19] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[19] -= q; // CH3O
  wdot[20] += q; // CH3OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[19];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac + k_f * sc[1];
  dqdc[20] = dcdc_fac - k_r;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] -= dqdc[k];
    J[73 * k + 19] -= dqdc[k];
    J[73 * k + 20] += dqdc[k];
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5275] -= dqdT; // dwdot[CH3O]/dT
  J[5276] += dqdT; // dwdot[CH3OH]/dT

  // reaction 69: C2H + H (+M) <=> C2H2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[21];
  k_f = 100000000000 * exp(-1 * logT);
  dlnkfdT = -1 * invT;
  // pressure-fall-off
  k_0 = 3.75e+33 * exp(-4.8 * logT - (956.111665028967) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.8 * invT + (956.111665028967) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.6464) * exp(-T / 132);
  Fcent2 = 0.6464 * exp(-T / 1315);
  Fcent3 = exp(-5566 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 132 - Fcent2 / 1315 + Fcent3 * 5566 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[22];
  Kc = refCinv * exp(g_RT[1] + g_RT[21] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[21]) + (h_RT[22]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[21] -= q; // C2H
  wdot[22] += q; // C2H2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[21];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac + k_f * sc[1];
  dqdc[22] = dcdc_fac - k_r;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] -= dqdc[k];
    J[73 * k + 21] -= dqdc[k];
    J[73 * k + 22] += dqdc[k];
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5277] -= dqdT; // dwdot[C2H]/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT

  // reaction 70: C2H2 + H (+M) <=> C2H3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[22];
  k_f = 5600000 * exp(-(1207.71999793133) * invT);
  dlnkfdT = (1207.71999793133) * invT2;
  // pressure-fall-off
  k_0 = 3.8e+40 * exp(-7.27 * logT - (3633.22432711008) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.27 * invT + (3633.22432711008) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7507) * exp(-T / 98.5);
  Fcent2 = 0.7507 * exp(-T / 1302);
  Fcent3 = exp(-4167 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 98.5 - Fcent2 / 1302 + Fcent3 * 4167 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[23];
  Kc = refCinv * exp(g_RT[1] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[22]) + (h_RT[23]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[22] -= q; // C2H2
  wdot[23] += q; // C2H3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[22];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac + k_f * sc[1];
  dqdc[23] = dcdc_fac - k_r;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] -= dqdc[k];
    J[73 * k + 22] -= dqdc[k];
    J[73 * k + 23] += dqdc[k];
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5278] -= dqdT; // dwdot[C2H2]/dT
  J[5279] += dqdT; // dwdot[C2H3]/dT

  // reaction 71: C2H3 + H (+M) <=> C2H4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[23];
  k_f = 6080000 * exp(0.27 * logT - (140.900666425322) * invT);
  dlnkfdT = 0.27 * invT + (140.900666425322) * invT2;
  // pressure-fall-off
  k_0 = 1.4e+30 * exp(-3.86 * logT - (1670.67933047167) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.86 * invT + (1670.67933047167) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.782) * exp(-T / 207.5);
  Fcent2 = 0.782 * exp(-T / 2663);
  Fcent3 = exp(-6095 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 207.5 - Fcent2 / 2663 + Fcent3 * 6095 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[24];
  Kc = refCinv * exp(g_RT[1] + g_RT[23] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[23]) + (h_RT[24]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[23] -= q; // C2H3
  wdot[24] += q; // C2H4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[23];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac + k_f * sc[1];
  dqdc[24] = dcdc_fac - k_r;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] -= dqdc[k];
    J[73 * k + 23] -= dqdc[k];
    J[73 * k + 24] += dqdc[k];
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT

  // reaction 73: C2H4 + H (+M) <=> C2H5 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[24];
  k_f = 540000 * exp(0.454 * logT - (915.85433176459) * invT);
  dlnkfdT = 0.454 * invT + (915.85433176459) * invT2;
  // pressure-fall-off
  k_0 = 6e+41 * exp(-7.62 * logT - (3507.4201606589) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.62 * invT + (3507.4201606589) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.9753) * exp(-T / 210);
  Fcent2 = 0.9753 * exp(-T / 984);
  Fcent3 = exp(-4374 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 210 - Fcent2 / 984 + Fcent3 * 4374 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[25];
  Kc = refCinv * exp(g_RT[1] + g_RT[24] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[24]) + (h_RT[25]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[24] -= q; // C2H4
  wdot[25] += q; // C2H5
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[24];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac + k_f * sc[1];
  dqdc[25] = dcdc_fac - k_r;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] -= dqdc[k];
    J[73 * k + 24] -= dqdc[k];
    J[73 * k + 25] += dqdc[k];
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT

  // reaction 75: C2H5 + H (+M) <=> C2H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[25];
  k_f = 521000000000 * exp(-0.99 * logT - (795.082331971457) * invT);
  dlnkfdT = -0.99 * invT + (795.082331971457) * invT2;
  // pressure-fall-off
  k_0 = 1.99e+41 * exp(-7.08 * logT - (3364.00341090455) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.08 * invT + (3364.00341090455) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.8422) * exp(-T / 125);
  Fcent2 = 0.8422 * exp(-T / 2219);
  Fcent3 = exp(-6882 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 125 - Fcent2 / 2219 + Fcent3 * 6882 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[26];
  Kc = refCinv * exp(g_RT[1] + g_RT[25] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[25]) + (h_RT[26]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[25] -= q; // C2H5
  wdot[26] += q; // C2H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[25];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac + k_f * sc[1];
  dqdc[26] = 3 * dcdc_fac - k_r;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] -= dqdc[k];
    J[73 * k + 25] -= dqdc[k];
    J[73 * k + 26] += dqdc[k];
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5281] -= dqdT; // dwdot[C2H5]/dT
  J[5282] += dqdT; // dwdot[C2H6]/dT

  // reaction 82: CO + H2 (+M) <=> CH2O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[0] * sc[14];
  k_f = 43 * exp(1.5 * logT - (40056.0465980557) * invT);
  dlnkfdT = 1.5 * invT + (40056.0465980557) * invT2;
  // pressure-fall-off
  k_0 = 5.07e+27 * exp(-3.42 * logT - (42446.3257606281) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.42 * invT + (42446.3257606281) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.932) * exp(-T / 197);
  Fcent2 = 0.932 * exp(-T / 1540);
  Fcent3 = exp(-10300 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 197 - Fcent2 / 1540 + Fcent3 * 10300 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[17];
  Kc = refCinv * exp(g_RT[0] + g_RT[14] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[14]) + (h_RT[17]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[0] -= q;  // H2
  wdot[14] -= q; // CO
  wdot[17] += q; // CH2O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac + k_f * sc[14];
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac + k_f * sc[0];
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac - k_r;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 0] -= dqdc[k];
    J[73 * k + 14] -= dqdc[k];
    J[73 * k + 17] += dqdc[k];
  }
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5270] -= dqdT; // dwdot[CO]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 84: 2 OH (+M) <=> H2O2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 74000000 * exp(-0.37 * logT);
  dlnkfdT = -0.37 * invT;
  // pressure-fall-off
  k_0 = 2.3e+18 * exp(-0.9 * logT - (-855.468331868023) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -0.9 * invT + (-855.468331868023) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7346) * exp(-T / 94);
  Fcent2 = 0.7346 * exp(-T / 1756);
  Fcent3 = exp(-5182 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 94 - Fcent2 / 1756 + Fcent3 * 5182 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[7];
  Kc = refCinv * exp(2.000000 * g_RT[4] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[7]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= 2 * q; // OH
  wdot[7] += q;     // H2O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac + k_f * 2.000000 * sc[4];
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac - k_r;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 4] += -2 * dqdc[k];
    J[73 * k + 7] += dqdc[k];
  }
  J[5260] += -2 * dqdT; // dwdot[OH]/dT
  J[5263] += dqdT;      // dwdot[H2O2]/dT

  // reaction 94: CH3 + OH (+M) <=> CH3OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 2790000000000 * exp(-1.43 * logT - (669.278165520277) * invT);
  dlnkfdT = -1.43 * invT + (669.278165520277) * invT2;
  // pressure-fall-off
  k_0 = 4e+36 * exp(-5.92 * logT - (1580.10033062682) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.92 * invT + (1580.10033062682) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.412) * exp(-T / 195);
  Fcent2 = 0.412 * exp(-T / 5900);
  Fcent3 = exp(-6394 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 195 - Fcent2 / 5900 + Fcent3 * 6394 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[4] + g_RT[12] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= q;  // OH
  wdot[12] -= q; // CH3
  wdot[20] += q; // CH3OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac + k_f * sc[12];
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac + k_f * sc[4];
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac - k_r;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 4] -= dqdc[k];
    J[73 * k + 12] -= dqdc[k];
    J[73 * k + 20] += dqdc[k];
  }
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5276] += dqdT; // dwdot[CH3OH]/dT

  // reaction 130: CH + CO (+M) <=> HCCO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[9] * sc[14];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 2.69e+28 * exp(-3.74 * logT - (974.227464997937) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.74 * invT + (974.227464997937) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5757) * exp(-T / 237);
  Fcent2 = 0.5757 * exp(-T / 1652);
  Fcent3 = exp(-5069 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 237 - Fcent2 / 1652 + Fcent3 * 5069 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[27];
  Kc = refCinv * exp(g_RT[9] + g_RT[14] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[14]) + (h_RT[27]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // CH
  wdot[14] -= q; // CO
  wdot[27] += q; // HCCO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac + k_f * sc[14];
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac + k_f * sc[9];
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac - k_r;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 9] -= dqdc[k];
    J[73 * k + 14] -= dqdc[k];
    J[73 * k + 27] += dqdc[k];
  }
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5270] -= dqdT; // dwdot[CO]/dT
  J[5283] += dqdT; // dwdot[HCCO]/dT

  // reaction 139: CH2 + CO (+M) <=> CH2CO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[10] * sc[14];
  k_f = 810000 * exp(0.5 * logT - (2269.50716277929) * invT);
  dlnkfdT = 0.5 * invT + (2269.50716277929) * invT2;
  // pressure-fall-off
  k_0 = 2.69e+33 * exp(-5.11 * logT - (3570.32224388449) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.11 * invT + (3570.32224388449) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5907) * exp(-T / 275);
  Fcent2 = 0.5907 * exp(-T / 1226);
  Fcent3 = exp(-5185 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 275 - Fcent2 / 1226 + Fcent3 * 5185 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[28];
  Kc = refCinv * exp(g_RT[10] + g_RT[14] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[14]) + (h_RT[28]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[10] -= q; // CH2
  wdot[14] -= q; // CO
  wdot[28] += q; // CH2CO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac + k_f * sc[14];
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac + k_f * sc[10];
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac - k_r;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 10] -= dqdc[k];
    J[73 * k + 14] -= dqdc[k];
    J[73 * k + 28] += dqdc[k];
  }
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5270] -= dqdT; // dwdot[CO]/dT
  J[5284] += dqdT; // dwdot[CH2CO]/dT

  // reaction 146: CH2(S) + H2O (+M) <=> CH3OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[5] * sc[11];
  k_f = 482000000000 * exp(-1.16 * logT - (576.183082346404) * invT);
  dlnkfdT = -1.16 * invT + (576.183082346404) * invT2;
  // pressure-fall-off
  k_0 = 1.88e+38 * exp(-6.36 * logT - (2536.21199565579) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.36 * invT + (2536.21199565579) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.6027) * exp(-T / 208);
  Fcent2 = 0.6027 * exp(-T / 3922);
  Fcent3 = exp(-10180 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 208 - Fcent2 / 3922 + Fcent3 * 10180 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[5] + g_RT[11] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[11]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[5] -= q;  // H2O
  wdot[11] -= q; // CH2(S)
  wdot[20] += q; // CH3OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac + k_f * sc[11];
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac + k_f * sc[5];
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac - k_r;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 5] -= dqdc[k];
    J[73 * k + 11] -= dqdc[k];
    J[73 * k + 20] += dqdc[k];
  }
  J[5261] -= dqdT; // dwdot[H2O]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5276] += dqdT; // dwdot[CH3OH]/dT

  // reaction 157: 2 CH3 (+M) <=> C2H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = (sc[12] * sc[12]);
  k_f = 67700000000 * exp(-1.18 * logT - (329.103699436287) * invT);
  dlnkfdT = -1.18 * invT + (329.103699436287) * invT2;
  // pressure-fall-off
  k_0 = 3.4e+41 * exp(-7.03 * logT - (1389.88443095264) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.03 * invT + (1389.88443095264) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.619) * exp(-T / 73.2);
  Fcent2 = 0.619 * exp(-T / 1180);
  Fcent3 = exp(-9999 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 73.2 - Fcent2 / 1180 + Fcent3 * 9999 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[26];
  Kc = refCinv * exp(2.000000 * g_RT[12] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[12]) + (h_RT[26]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[12] -= 2 * q; // CH3
  wdot[26] += q;     // C2H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac + k_f * 2.000000 * sc[12];
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac - k_r;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 12] += -2 * dqdc[k];
    J[73 * k + 26] += dqdc[k];
  }
  J[5268] += -2 * dqdT; // dwdot[CH3]/dT
  J[5282] += dqdT;      // dwdot[C2H6]/dT

  // reaction 173: C2H4 (+M) <=> C2H2 + H2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[24];
  k_f = 8000000000000 * exp(0.44 * logT - (43664.1100918755) * invT);
  dlnkfdT = 0.44 * invT + (43664.1100918755) * invT2;
  // pressure-fall-off
  k_0 = 1.58e+51 * exp(-9.3 * logT - (49214.5899157016) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -9.3 * invT + (49214.5899157016) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7345) * exp(-T / 180);
  Fcent2 = 0.7345 * exp(-T / 1035);
  Fcent3 = exp(-5417 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 180 - Fcent2 / 1035 + Fcent3 * 5417 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[0] * sc[22];
  Kc = refC * exp(-g_RT[0] - g_RT[22] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[24]) + (h_RT[0] + h_RT[22]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[0] += q;  // H2
  wdot[22] += q; // C2H2
  wdot[24] -= q; // C2H4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac - k_r * sc[22];
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac - k_r * sc[0];
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac + k_f;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 0] += dqdc[k];
    J[73 * k + 22] += dqdc[k];
    J[73 * k + 24] -= dqdc[k];
  }
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT

  // reaction 240: CH + N2 (+M) <=> HCNN (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[9] * sc[47];
  k_f = 3100000 * exp(0.15 * logT);
  dlnkfdT = 0.15 * invT;
  // pressure-fall-off
  k_0 = 1.3e+25 * exp(-3.16 * logT - (372.380332695493) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.16 * invT + (372.380332695493) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.667) * exp(-T / 235);
  Fcent2 = 0.667 * exp(-T / 2117);
  Fcent3 = exp(-4536 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 235 - Fcent2 / 2117 + Fcent3 * 4536 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[42];
  Kc = refCinv * exp(g_RT[9] - g_RT[42] + g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[47]) + (h_RT[42]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // CH
  wdot[42] += q; // HCNN
  wdot[47] -= q; // N2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac + k_f * sc[47];
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac - k_r;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac + k_f * sc[9];
  dqdc[48] = dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 9] -= dqdc[k];
    J[73 * k + 42] += dqdc[k];
    J[73 * k + 47] -= dqdc[k];
  }
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5298] += dqdT; // dwdot[HCNN]/dT
  J[5303] -= dqdT; // dwdot[N2]/dT

  // reaction 288: CH + H2 (+M) <=> CH3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[0] * sc[9];
  k_f = 1970000 * exp(0.43 * logT - (-186.190166347746) * invT);
  dlnkfdT = 0.43 * invT + (-186.190166347746) * invT2;
  // pressure-fall-off
  k_0 = 4.82e+25 * exp(-2.8 * logT - (296.897832824785) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.8 * invT + (296.897832824785) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.578) * exp(-T / 122);
  Fcent2 = 0.578 * exp(-T / 2535);
  Fcent3 = exp(-9365 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 122 - Fcent2 / 2535 + Fcent3 * 9365 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[12];
  Kc = refCinv * exp(g_RT[0] + g_RT[9] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[9]) + (h_RT[12]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[0] -= q;  // H2
  wdot[9] -= q;  // CH
  wdot[12] += q; // CH3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac + k_f * sc[9];
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac + k_f * sc[0];
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac - k_r;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 0] -= dqdc[k];
    J[73 * k + 9] -= dqdc[k];
    J[73 * k + 12] += dqdc[k];
  }
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT

  // reaction 303: CH2CO + H (+M) <=> CH2CHO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[28];
  k_f = 486500 * exp(0.422 * logT - (-883.145248487283) * invT);
  dlnkfdT = 0.422 * invT + (-883.145248487283) * invT2;
  // pressure-fall-off
  k_0 = 1.012e+42 * exp(-7.63 * logT - (1939.39703001139) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.63 * invT + (1939.39703001139) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.465) * exp(-T / 201);
  Fcent2 = 0.465 * exp(-T / 1773);
  Fcent3 = exp(-5333 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 201 - Fcent2 / 1773 + Fcent3 * 5333 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[51];
  Kc = refCinv * exp(g_RT[1] + g_RT[28] - g_RT[51]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[28]) + (h_RT[51]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[28] -= q; // CH2CO
  wdot[51] += q; // CH2CHO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[28];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac + k_f * sc[1];
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac - k_r;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] -= dqdc[k];
    J[73 * k + 28] -= dqdc[k];
    J[73 * k + 51] += dqdc[k];
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5284] -= dqdT; // dwdot[CH2CO]/dT
  J[5307] += dqdT; // dwdot[CH2CHO]/dT

  // reaction 311: C2H5 + CH3 (+M) <=> C3H8 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[12] * sc[25];
  k_f = 9430000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 2.71e+74 * exp(-16.82 * logT - (6574.52573873866) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -16.82 * invT + (6574.52573873866) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.1527) * exp(-T / 291);
  Fcent2 = 0.1527 * exp(-T / 2742);
  Fcent3 = exp(-7748 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 291 - Fcent2 / 2742 + Fcent3 * 7748 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[50];
  Kc = refCinv * exp(g_RT[12] + g_RT[25] - g_RT[50]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[25]) + (h_RT[50]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[12] -= q; // CH3
  wdot[25] -= q; // C2H5
  wdot[50] += q; // C3H8
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac + k_f * sc[25];
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac + k_f * sc[12];
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac - k_r;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 12] -= dqdc[k];
    J[73 * k + 25] -= dqdc[k];
    J[73 * k + 50] += dqdc[k];
  }
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5281] -= dqdT; // dwdot[C2H5]/dT
  J[5306] += dqdT; // dwdot[C3H8]/dT

  // reaction 317: C2H4 + CH3 (+M) <=> C3H7 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[12] * sc[24];
  k_f = 2.55 * exp(1.6 * logT - (2868.3349950869) * invT);
  dlnkfdT = 1.6 * invT + (2868.3349950869) * invT2;
  // pressure-fall-off
  k_0 = 3e+63 * exp(-14.6 * logT - (9143.44681767176) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -14.6 * invT + (9143.44681767176) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.1894) * exp(-T / 277);
  Fcent2 = 0.1894 * exp(-T / 8748);
  Fcent3 = exp(-7891 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 277 - Fcent2 / 8748 + Fcent3 * 7891 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[49];
  Kc = refCinv * exp(g_RT[12] + g_RT[24] - g_RT[49]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[24]) + (h_RT[49]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[12] -= q; // CH3
  wdot[24] -= q; // C2H4
  wdot[49] += q; // C3H7
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac + k_f * sc[24];
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac + k_f * sc[12];
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac - k_r;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 12] -= dqdc[k];
    J[73 * k + 24] -= dqdc[k];
    J[73 * k + 49] += dqdc[k];
  }
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT
  J[5305] += dqdT; // dwdot[C3H7]/dT

  // reaction 319: C3H7 + H (+M) <=> C3H8 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[49];
  k_f = 36130000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 4.42e+61 * exp(-13.545 * logT - (5715.0316735442) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -13.545 * invT + (5715.0316735442) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.315) * exp(-T / 369);
  Fcent2 = 0.315 * exp(-T / 3285);
  Fcent3 = exp(-6667 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 369 - Fcent2 / 3285 + Fcent3 * 6667 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[50];
  Kc = refCinv * exp(g_RT[1] + g_RT[49] - g_RT[50]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[49]) + (h_RT[50]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[49] -= q; // C3H7
  wdot[50] += q; // C3H8
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[49];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac + k_f * sc[1];
  dqdc[50] = dcdc_fac - k_r;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] -= dqdc[k];
    J[73 * k + 49] -= dqdc[k];
    J[73 * k + 50] += dqdc[k];
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5305] -= dqdT; // dwdot[C3H7]/dT
  J[5306] += dqdT; // dwdot[C3H8]/dT

  // reaction 11: CO + O (+M) <=> CO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[3] + (6 - 1) * sc[5] + sc[13] +
          (1.5 - 1) * sc[14] + (3.5 - 1) * sc[15] + (3 - 1) * sc[26] +
          (0.5 - 1) * sc[48];
  // forward
  phi_f = sc[2] * sc[14];
  k_f = 18000 * exp(-(1200.17174794426) * invT);
  dlnkfdT = (1200.17174794426) * invT2;
  // pressure-fall-off
  k_0 = 602000000000000 * exp(-(1509.64999741416) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (1509.64999741416) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  // dlogFdlogPr is 0.0 and unused
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[15];
  Kc = refCinv * exp(g_RT[2] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[14]) + (h_RT[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] -= q;  // O
  wdot[14] -= q; // CO
  wdot[15] += q; // CO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac + k_f * sc[14];
  dqdc[3] = 6 * dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac + k_f * sc[2];
  dqdc[15] = 3.5 * dcdc_fac - k_r;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.5 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 2] -= dqdc[k];
    J[73 * k + 14] -= dqdc[k];
    J[73 * k + 15] += dqdc[k];
  }
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5270] -= dqdT; // dwdot[CO]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT

  // reaction 184: N2O (+M) <=> N2 + O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.625 - 1) * sc[48];
  // forward
  phi_f = sc[37];
  k_f = 79100000000 * exp(-(28190.1976183804) * invT);
  dlnkfdT = (28190.1976183804) * invT2;
  // pressure-fall-off
  k_0 = 637000000000000 * exp(-(28502.1919511793) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (28502.1919511793) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  // dlogFdlogPr is 0.0 and unused
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[47];
  Kc = refC * exp(-g_RT[2] + g_RT[37] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[37]) + (h_RT[2] + h_RT[47]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] += q;  // O
  wdot[37] -= q; // N2O
  wdot[47] += q; // N2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac - k_r * sc[47];
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac + k_f;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac - k_r * sc[2];
  dqdc[48] = 0.625 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 2] += dqdc[k];
    J[73 * k + 37] -= dqdc[k];
    J[73 * k + 47] += dqdc[k];
  }
  J[5258] += dqdT; // dwdot[O]/dT
  J[5293] -= dqdT; // dwdot[N2O]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 236: H + HCN (+M) <=> H2CN (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[40];
  k_f = 33000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 1.4e+26 * exp(-3.4 * logT - (956.111665028967) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.4 * invT + (956.111665028967) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  // dlogFdlogPr is 0.0 and unused
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[41];
  Kc = refCinv * exp(g_RT[1] + g_RT[40] - g_RT[41]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[40]) + (h_RT[41]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[40] -= q; // HCN
  wdot[41] += q; // H2CN
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[40];
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac + k_f * sc[1];
  dqdc[41] = dcdc_fac - k_r;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = dcdc_fac;
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = dcdc_fac;
  dqdc[57] = dcdc_fac;
  dqdc[58] = dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] -= dqdc[k];
    J[73 * k + 40] -= dqdc[k];
    J[73 * k + 41] += dqdc[k];
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5296] -= dqdT; // dwdot[HCN]/dT
  J[5297] += dqdT; // dwdot[H2CN]/dT

  // reaction 346: CH3F (+M) <=> CH2(S) + HF (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (9 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + sc[53] + (6 - 1) * sc[56] +
          (6 - 1) * sc[57] + (6 - 1) * sc[58];
  // forward
  phi_f = sc[56];
  k_f = 100000000000000 * exp(-(42773.4165934012) * invT);
  dlnkfdT = (42773.4165934012) * invT2;
  // pressure-fall-off
  k_0 = 1.5e+16 * exp(-(33966.6217251528) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (33966.6217251528) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  // dlogFdlogPr is 0.0 and unused
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[11] * sc[53];
  Kc = refC * exp(-g_RT[11] - g_RT[53] + g_RT[56]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[56]) + (h_RT[11] + h_RT[53]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[11] += q; // CH2(S)
  wdot[53] += q; // HF
  wdot[56] -= q; // CH3F
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 9 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac - k_r * sc[53];
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = 2 * dcdc_fac - k_r * sc[11];
  dqdc[54] = dcdc_fac;
  dqdc[55] = dcdc_fac;
  dqdc[56] = 6 * dcdc_fac + k_f;
  dqdc[57] = 6 * dcdc_fac;
  dqdc[58] = 6 * dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac;
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 11] += dqdc[k];
    J[73 * k + 53] += dqdc[k];
    J[73 * k + 56] -= dqdc[k];
  }
  J[5267] += dqdT; // dwdot[CH2(S)]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5312] -= dqdT; // dwdot[CH3F]/dT

  // reaction 433: CF2 (+M) <=> CF + F (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48] + sc[53] +
          (6 - 1) * sc[56] + (6 - 1) * sc[57] + (6 - 1) * sc[58] +
          (6 - 1) * sc[59];
  // forward
  phi_f = sc[64];
  k_f = 530000000000000 * exp(-(59530.5315646983) * invT);
  dlnkfdT = (59530.5315646983) * invT2;
  // pressure-fall-off
  k_0 = 2.29e+15 * exp(-(48042.0950843766) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (48042.0950843766) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  // dlogFdlogPr is 0.0 and unused
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[54] * sc[65];
  Kc = refC * exp(-g_RT[54] + g_RT[64] - g_RT[65]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[64]) + (h_RT[54] + h_RT[65]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[54] += q; // F
  wdot[64] -= q; // CF2
  wdot[65] += q; // CF
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = 2 * dcdc_fac;
  dqdc[54] = dcdc_fac - k_r * sc[65];
  dqdc[55] = dcdc_fac;
  dqdc[56] = 6 * dcdc_fac;
  dqdc[57] = 6 * dcdc_fac;
  dqdc[58] = 6 * dcdc_fac;
  dqdc[59] = 6 * dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac + k_f;
  dqdc[65] = dcdc_fac - k_r * sc[54];
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 54] += dqdc[k];
    J[73 * k + 64] -= dqdc[k];
    J[73 * k + 65] += dqdc[k];
  }
  J[5310] += dqdT; // dwdot[F]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT
  J[5321] += dqdT; // dwdot[CF]/dT

  // reaction 498: CF3 (+M) <=> CF2 + F (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48] + sc[53] +
          (6 - 1) * sc[56] + (6 - 1) * sc[57] + (6 - 1) * sc[58];
  // forward
  phi_f = sc[62];
  k_f = 1e+15 * exp(-(41449.9567623348) * invT);
  dlnkfdT = (41449.9567623348) * invT2;
  // pressure-fall-off
  k_0 = 5e+15 * exp(-(30021.9062819096) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (30021.9062819096) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  // dlogFdlogPr is 0.0 and unused
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[54] * sc[64];
  Kc = refC * exp(-g_RT[54] + g_RT[62] - g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[62]) + (h_RT[54] + h_RT[64]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[54] += q; // F
  wdot[62] -= q; // CF3
  wdot[64] += q; // CF2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = 2 * dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = 6 * dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 2 * dcdc_fac;
  dqdc[14] = 1.5 * dcdc_fac;
  dqdc[15] = 2 * dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = dcdc_fac;
  dqdc[23] = dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = 3 * dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  dqdc[38] = dcdc_fac;
  dqdc[39] = dcdc_fac;
  dqdc[40] = dcdc_fac;
  dqdc[41] = dcdc_fac;
  dqdc[42] = dcdc_fac;
  dqdc[43] = dcdc_fac;
  dqdc[44] = dcdc_fac;
  dqdc[45] = dcdc_fac;
  dqdc[46] = dcdc_fac;
  dqdc[47] = dcdc_fac;
  dqdc[48] = 0.7 * dcdc_fac;
  dqdc[49] = dcdc_fac;
  dqdc[50] = dcdc_fac;
  dqdc[51] = dcdc_fac;
  dqdc[52] = dcdc_fac;
  dqdc[53] = 2 * dcdc_fac;
  dqdc[54] = dcdc_fac - k_r * sc[64];
  dqdc[55] = dcdc_fac;
  dqdc[56] = 6 * dcdc_fac;
  dqdc[57] = 6 * dcdc_fac;
  dqdc[58] = 6 * dcdc_fac;
  dqdc[59] = dcdc_fac;
  dqdc[60] = dcdc_fac;
  dqdc[61] = dcdc_fac;
  dqdc[62] = dcdc_fac + k_f;
  dqdc[63] = dcdc_fac;
  dqdc[64] = dcdc_fac - k_r * sc[54];
  dqdc[65] = dcdc_fac;
  dqdc[66] = dcdc_fac;
  dqdc[67] = dcdc_fac;
  dqdc[68] = dcdc_fac;
  dqdc[69] = dcdc_fac;
  dqdc[70] = dcdc_fac;
  dqdc[71] = dcdc_fac;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 54] += dqdc[k];
    J[73 * k + 62] -= dqdc[k];
    J[73 * k + 64] += dqdc[k];
  }
  J[5310] += dqdT; // dwdot[F]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5320] += dqdT; // dwdot[CF2]/dT

  // reaction 0: 2 O + M <=> O2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.4 - 1) * sc[0] + (15.4 - 1) * sc[5] + sc[13] +
          (1.75 - 1) * sc[14] + (3.6 - 1) * sc[15] + (3 - 1) * sc[26] +
          (0.83 - 1) * sc[48];
  // forward
  phi_f = (sc[2] * sc[2]);
  k_f = 120000 * exp(-1 * logT);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[3];
  Kc = refCinv * exp(2.000000 * g_RT[2] - g_RT[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[2]) + (h_RT[3]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= 2 * q; // O
  wdot[3] += q;     // O2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2.4 * q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor + k_f * 2.000000 * sc[2];
  dqdc[3] = q_nocor - k_r;
  dqdc[4] = q_nocor;
  dqdc[5] = 15.4 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 2 * q_nocor;
  dqdc[14] = 1.75 * q_nocor;
  dqdc[15] = 3.6 * q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 3 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  dqdc[38] = q_nocor;
  dqdc[39] = q_nocor;
  dqdc[40] = q_nocor;
  dqdc[41] = q_nocor;
  dqdc[42] = q_nocor;
  dqdc[43] = q_nocor;
  dqdc[44] = q_nocor;
  dqdc[45] = q_nocor;
  dqdc[46] = q_nocor;
  dqdc[47] = q_nocor;
  dqdc[48] = 0.83 * q_nocor;
  dqdc[49] = q_nocor;
  dqdc[50] = q_nocor;
  dqdc[51] = q_nocor;
  dqdc[52] = q_nocor;
  dqdc[53] = q_nocor;
  dqdc[54] = q_nocor;
  dqdc[55] = q_nocor;
  dqdc[56] = q_nocor;
  dqdc[57] = q_nocor;
  dqdc[58] = q_nocor;
  dqdc[59] = q_nocor;
  dqdc[60] = q_nocor;
  dqdc[61] = q_nocor;
  dqdc[62] = q_nocor;
  dqdc[63] = q_nocor;
  dqdc[64] = q_nocor;
  dqdc[65] = q_nocor;
  dqdc[66] = q_nocor;
  dqdc[67] = q_nocor;
  dqdc[68] = q_nocor;
  dqdc[69] = q_nocor;
  dqdc[70] = q_nocor;
  dqdc[71] = q_nocor;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 2] += -2 * dqdc[k];
    J[73 * k + 3] += dqdc[k];
  }
  J[5258] += -2 * dqdT; // dwdot[O]/dT
  J[5259] += dqdT;      // dwdot[O2]/dT

  // reaction 1: H + O + M <=> OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[2];
  k_f = 500000 * exp(-1 * logT);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[4];
  Kc = refCinv * exp(g_RT[1] + g_RT[2] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[2]) + (h_RT[4]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] -= q; // O
  wdot[4] += q; // OH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2 * q_nocor;
  dqdc[1] = q_nocor + k_f * sc[2];
  dqdc[2] = q_nocor + k_f * sc[1];
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor - k_r;
  dqdc[5] = 6 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 2 * q_nocor;
  dqdc[14] = 1.5 * q_nocor;
  dqdc[15] = 2 * q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 3 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  dqdc[38] = q_nocor;
  dqdc[39] = q_nocor;
  dqdc[40] = q_nocor;
  dqdc[41] = q_nocor;
  dqdc[42] = q_nocor;
  dqdc[43] = q_nocor;
  dqdc[44] = q_nocor;
  dqdc[45] = q_nocor;
  dqdc[46] = q_nocor;
  dqdc[47] = q_nocor;
  dqdc[48] = 0.7 * q_nocor;
  dqdc[49] = q_nocor;
  dqdc[50] = q_nocor;
  dqdc[51] = q_nocor;
  dqdc[52] = q_nocor;
  dqdc[53] = q_nocor;
  dqdc[54] = q_nocor;
  dqdc[55] = q_nocor;
  dqdc[56] = q_nocor;
  dqdc[57] = q_nocor;
  dqdc[58] = q_nocor;
  dqdc[59] = q_nocor;
  dqdc[60] = q_nocor;
  dqdc[61] = q_nocor;
  dqdc[62] = q_nocor;
  dqdc[63] = q_nocor;
  dqdc[64] = q_nocor;
  dqdc[65] = q_nocor;
  dqdc[66] = q_nocor;
  dqdc[67] = q_nocor;
  dqdc[68] = q_nocor;
  dqdc[69] = q_nocor;
  dqdc[70] = q_nocor;
  dqdc[71] = q_nocor;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] -= dqdc[k];
    J[73 * k + 2] -= dqdc[k];
    J[73 * k + 4] += dqdc[k];
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT

  // reaction 32: H + O2 + M <=> HO2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0 - 1) * sc[3] + (0 - 1) * sc[5] + (0.75 - 1) * sc[14] +
          (1.5 - 1) * sc[15] + (1.5 - 1) * sc[26] + (0 - 1) * sc[47] +
          (0 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[3];
  k_f = 2800000 * exp(-0.86 * logT);
  dlnkfdT = -0.86 * invT;
  // reverse
  phi_r = sc[6];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[3]) + (h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O2
  wdot[6] += q; // HO2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor + k_f * sc[3];
  dqdc[2] = q_nocor;
  dqdc[3] = +k_f * sc[1];
  dqdc[4] = q_nocor;
  dqdc[5] = 0.0;
  dqdc[6] = q_nocor - k_r;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = 0.75 * q_nocor;
  dqdc[15] = 1.5 * q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 1.5 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  dqdc[38] = q_nocor;
  dqdc[39] = q_nocor;
  dqdc[40] = q_nocor;
  dqdc[41] = q_nocor;
  dqdc[42] = q_nocor;
  dqdc[43] = q_nocor;
  dqdc[44] = q_nocor;
  dqdc[45] = q_nocor;
  dqdc[46] = q_nocor;
  dqdc[47] = 0.0;
  dqdc[48] = 0.0;
  dqdc[49] = q_nocor;
  dqdc[50] = q_nocor;
  dqdc[51] = q_nocor;
  dqdc[52] = q_nocor;
  dqdc[53] = q_nocor;
  dqdc[54] = q_nocor;
  dqdc[55] = q_nocor;
  dqdc[56] = q_nocor;
  dqdc[57] = q_nocor;
  dqdc[58] = q_nocor;
  dqdc[59] = q_nocor;
  dqdc[60] = q_nocor;
  dqdc[61] = q_nocor;
  dqdc[62] = q_nocor;
  dqdc[63] = q_nocor;
  dqdc[64] = q_nocor;
  dqdc[65] = q_nocor;
  dqdc[66] = q_nocor;
  dqdc[67] = q_nocor;
  dqdc[68] = q_nocor;
  dqdc[69] = q_nocor;
  dqdc[70] = q_nocor;
  dqdc[71] = q_nocor;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] -= dqdc[k];
    J[73 * k + 3] -= dqdc[k];
    J[73 * k + 6] += dqdc[k];
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT

  // reaction 33: H + O2 + O2 <=> HO2 + O2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * (sc[3] * sc[3]);
  k_f = 20800000 * exp(-1.24 * logT);
  dlnkfdT = -1.24 * invT;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[1] + 2.000000 * h_RT[3]) + (h_RT[3] + h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O2
  wdot[6] += q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[3];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[76] -= dqdci; // dwdot[O2]/d[H]
  J[79] += dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * 2.000000 * sc[3] - k_r * sc[6];
  J[220] -= dqdci; // dwdot[H]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[3];
  J[439] -= dqdci; // dwdot[H]/d[HO2]
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT

  // reaction 34: H + O2 + H2O <=> HO2 + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[3] * sc[5];
  k_f = 11260000 * exp(-0.76 * logT);
  dlnkfdT = -0.76 * invT;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[1] + h_RT[3] + h_RT[5]) + (h_RT[5] + h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O2
  wdot[6] += q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[5];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[76] -= dqdci; // dwdot[O2]/d[H]
  J[79] += dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * sc[5];
  J[220] -= dqdci; // dwdot[H]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  // d()/d[H2O]
  dqdci = +k_f * sc[1] * sc[3] - k_r * sc[6];
  J[366] -= dqdci; // dwdot[H]/d[H2O]
  J[368] -= dqdci; // dwdot[O2]/d[H2O]
  J[371] += dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[439] -= dqdci; // dwdot[H]/d[HO2]
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT

  // reaction 35: H + O2 + N2 <=> HO2 + N2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[3] * sc[47];
  k_f = 26000000 * exp(-1.24 * logT);
  dlnkfdT = -1.24 * invT;
  // reverse
  phi_r = sc[6] * sc[47];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[1] + h_RT[3] + h_RT[47]) + (h_RT[6] + h_RT[47]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O2
  wdot[6] += q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[47];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[76] -= dqdci; // dwdot[O2]/d[H]
  J[79] += dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * sc[47];
  J[220] -= dqdci; // dwdot[H]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[47];
  J[439] -= dqdci; // dwdot[H]/d[HO2]
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/d[N2]
  dqdci = +k_f * sc[1] * sc[3] - k_r * sc[6];
  J[3432] -= dqdci; // dwdot[H]/d[N2]
  J[3434] -= dqdci; // dwdot[O2]/d[N2]
  J[3437] += dqdci; // dwdot[HO2]/d[N2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT

  // reaction 36: H + O2 + AR <=> HO2 + AR
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[3] * sc[48];
  k_f = 700000 * exp(-0.8 * logT);
  dlnkfdT = -0.8 * invT;
  // reverse
  phi_r = sc[6] * sc[48];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[1] + h_RT[3] + h_RT[48]) + (h_RT[6] + h_RT[48]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O2
  wdot[6] += q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[48];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[76] -= dqdci; // dwdot[O2]/d[H]
  J[79] += dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * sc[48];
  J[220] -= dqdci; // dwdot[H]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[48];
  J[439] -= dqdci; // dwdot[H]/d[HO2]
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/d[AR]
  dqdci = +k_f * sc[1] * sc[3] - k_r * sc[6];
  J[3505] -= dqdci; // dwdot[H]/d[AR]
  J[3507] -= dqdci; // dwdot[O2]/d[AR]
  J[3510] += dqdci; // dwdot[HO2]/d[AR]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT

  // reaction 38: 2 H + M <=> H2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0 - 1) * sc[0] + (0 - 1) * sc[5] + sc[13] +
          (0 - 1) * sc[15] + (3 - 1) * sc[26] + (0.63 - 1) * sc[48];
  // forward
  phi_f = (sc[1] * sc[1]);
  k_f = 1000000 * exp(-1 * logT);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[0];
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[1]) + (h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = -k_r;
  dqdc[1] = q_nocor + k_f * 2.000000 * sc[1];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 0.0;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 2 * q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = 0.0;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 3 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  dqdc[38] = q_nocor;
  dqdc[39] = q_nocor;
  dqdc[40] = q_nocor;
  dqdc[41] = q_nocor;
  dqdc[42] = q_nocor;
  dqdc[43] = q_nocor;
  dqdc[44] = q_nocor;
  dqdc[45] = q_nocor;
  dqdc[46] = q_nocor;
  dqdc[47] = q_nocor;
  dqdc[48] = 0.63 * q_nocor;
  dqdc[49] = q_nocor;
  dqdc[50] = q_nocor;
  dqdc[51] = q_nocor;
  dqdc[52] = q_nocor;
  dqdc[53] = q_nocor;
  dqdc[54] = q_nocor;
  dqdc[55] = q_nocor;
  dqdc[56] = q_nocor;
  dqdc[57] = q_nocor;
  dqdc[58] = q_nocor;
  dqdc[59] = q_nocor;
  dqdc[60] = q_nocor;
  dqdc[61] = q_nocor;
  dqdc[62] = q_nocor;
  dqdc[63] = q_nocor;
  dqdc[64] = q_nocor;
  dqdc[65] = q_nocor;
  dqdc[66] = q_nocor;
  dqdc[67] = q_nocor;
  dqdc[68] = q_nocor;
  dqdc[69] = q_nocor;
  dqdc[70] = q_nocor;
  dqdc[71] = q_nocor;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 0] += dqdc[k];
    J[73 * k + 1] += -2 * dqdc[k];
  }
  J[5256] += dqdT;      // dwdot[H2]/dT
  J[5257] += -2 * dqdT; // dwdot[H]/dT

  // reaction 39: 2 H + H2 <=> H2 + H2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * (sc[1] * sc[1]);
  k_f = 90000 * exp(-0.6 * logT);
  dlnkfdT = -0.6 * invT;
  // reverse
  phi_r = (sc[0] * sc[0]);
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[0] + 2.000000 * h_RT[1]) + (2.000000 * h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // d()/d[H2]
  dqdci = +k_f * sc[1] * sc[1] - k_r * 2.000000 * sc[0];
  J[0] += dqdci;      // dwdot[H2]/d[H2]
  J[1] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[0] * 2.000000 * sc[1];
  J[73] += dqdci;      // dwdot[H2]/d[H]
  J[74] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/dT
  J[5256] += dqdT;      // dwdot[H2]/dT
  J[5257] += -2 * dqdT; // dwdot[H]/dT

  // reaction 40: 2 H + H2O <=> H2 + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[5];
  k_f = 60000000 * exp(-1.25 * logT);
  dlnkfdT = -1.25 * invT;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[5]) + (h_RT[0] + h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // d()/d[H2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;      // dwdot[H2]/d[H2]
  J[1] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[5];
  J[73] += dqdci;      // dwdot[H2]/d[H]
  J[74] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * sc[1] * sc[1] - k_r * sc[0];
  J[365] += dqdci;      // dwdot[H2]/d[H2O]
  J[366] += -2 * dqdci; // dwdot[H]/d[H2O]
  // d()/dT
  J[5256] += dqdT;      // dwdot[H2]/dT
  J[5257] += -2 * dqdT; // dwdot[H]/dT

  // reaction 41: 2 H + CO2 <=> H2 + CO2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[15];
  k_f = 550000000 * exp(-2 * logT);
  dlnkfdT = -2 * invT;
  // reverse
  phi_r = sc[0] * sc[15];
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[15]) + (h_RT[0] + h_RT[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // d()/d[H2]
  dqdci = -k_r * sc[15];
  J[0] += dqdci;      // dwdot[H2]/d[H2]
  J[1] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[15];
  J[73] += dqdci;      // dwdot[H2]/d[H]
  J[74] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/d[CO2]
  dqdci = +k_f * sc[1] * sc[1] - k_r * sc[0];
  J[1095] += dqdci;      // dwdot[H2]/d[CO2]
  J[1096] += -2 * dqdci; // dwdot[H]/d[CO2]
  // d()/dT
  J[5256] += dqdT;      // dwdot[H2]/dT
  J[5257] += -2 * dqdT; // dwdot[H]/dT

  // reaction 42: H + OH + M <=> H2O + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0.73 - 1) * sc[0] + (3.65 - 1) * sc[5] + sc[13] +
          (3 - 1) * sc[26] + (0.38 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[4];
  k_f = 22000000000 * exp(-2 * logT);
  dlnkfdT = -2 * invT;
  // reverse
  phi_r = sc[5];
  Kc = refCinv * exp(g_RT[1] + g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[4]) + (h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 0.73 * q_nocor;
  dqdc[1] = q_nocor + k_f * sc[4];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor + k_f * sc[1];
  dqdc[5] = 3.65 * q_nocor - k_r;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 2 * q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 3 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  dqdc[38] = q_nocor;
  dqdc[39] = q_nocor;
  dqdc[40] = q_nocor;
  dqdc[41] = q_nocor;
  dqdc[42] = q_nocor;
  dqdc[43] = q_nocor;
  dqdc[44] = q_nocor;
  dqdc[45] = q_nocor;
  dqdc[46] = q_nocor;
  dqdc[47] = q_nocor;
  dqdc[48] = 0.38 * q_nocor;
  dqdc[49] = q_nocor;
  dqdc[50] = q_nocor;
  dqdc[51] = q_nocor;
  dqdc[52] = q_nocor;
  dqdc[53] = q_nocor;
  dqdc[54] = q_nocor;
  dqdc[55] = q_nocor;
  dqdc[56] = q_nocor;
  dqdc[57] = q_nocor;
  dqdc[58] = q_nocor;
  dqdc[59] = q_nocor;
  dqdc[60] = q_nocor;
  dqdc[61] = q_nocor;
  dqdc[62] = q_nocor;
  dqdc[63] = q_nocor;
  dqdc[64] = q_nocor;
  dqdc[65] = q_nocor;
  dqdc[66] = q_nocor;
  dqdc[67] = q_nocor;
  dqdc[68] = q_nocor;
  dqdc[69] = q_nocor;
  dqdc[70] = q_nocor;
  dqdc[71] = q_nocor;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] -= dqdc[k];
    J[73 * k + 4] -= dqdc[k];
    J[73 * k + 5] += dqdc[k];
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT

  // reaction 165: HCO + H2O <=> CO + H + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[16];
  k_f = 1500000000000 * exp(-1 * logT - (8554.68331868023) * invT);
  dlnkfdT = -1 * invT + (8554.68331868023) * invT2;
  // reverse
  phi_r = sc[1] * sc[5] * sc[14];
  Kc = refC * exp(-g_RT[1] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[5] + h_RT[16]) + (h_RT[1] + h_RT[5] + h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[5] * sc[14];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[87] += dqdci; // dwdot[CO]/d[H]
  J[89] -= dqdci; // dwdot[HCO]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * sc[16] - k_r * sc[1] * sc[14];
  J[366] += dqdci; // dwdot[H]/d[H2O]
  J[379] += dqdci; // dwdot[CO]/d[H2O]
  J[381] -= dqdci; // dwdot[HCO]/d[H2O]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * sc[5];
  J[1023] += dqdci; // dwdot[H]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[5];
  J[1169] += dqdci; // dwdot[H]/d[HCO]
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT

  // reaction 166: HCO + M <=> CO + H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (0 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[16];
  k_f = 187000000000 * exp(-1 * logT - (8554.68331868023) * invT);
  dlnkfdT = -1 * invT + (8554.68331868023) * invT2;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = refC * exp(-g_RT[1] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16]) + (h_RT[1] + h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2 * q_nocor;
  dqdc[1] = q_nocor - k_r * sc[14];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 0.0;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 2 * q_nocor;
  dqdc[14] = 1.5 * q_nocor - k_r * sc[1];
  dqdc[15] = 2 * q_nocor;
  dqdc[16] = q_nocor + k_f;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 3 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  dqdc[38] = q_nocor;
  dqdc[39] = q_nocor;
  dqdc[40] = q_nocor;
  dqdc[41] = q_nocor;
  dqdc[42] = q_nocor;
  dqdc[43] = q_nocor;
  dqdc[44] = q_nocor;
  dqdc[45] = q_nocor;
  dqdc[46] = q_nocor;
  dqdc[47] = q_nocor;
  dqdc[48] = q_nocor;
  dqdc[49] = q_nocor;
  dqdc[50] = q_nocor;
  dqdc[51] = q_nocor;
  dqdc[52] = q_nocor;
  dqdc[53] = q_nocor;
  dqdc[54] = q_nocor;
  dqdc[55] = q_nocor;
  dqdc[56] = q_nocor;
  dqdc[57] = q_nocor;
  dqdc[58] = q_nocor;
  dqdc[59] = q_nocor;
  dqdc[60] = q_nocor;
  dqdc[61] = q_nocor;
  dqdc[62] = q_nocor;
  dqdc[63] = q_nocor;
  dqdc[64] = q_nocor;
  dqdc[65] = q_nocor;
  dqdc[66] = q_nocor;
  dqdc[67] = q_nocor;
  dqdc[68] = q_nocor;
  dqdc[69] = q_nocor;
  dqdc[70] = q_nocor;
  dqdc[71] = q_nocor;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] += dqdc[k];
    J[73 * k + 14] += dqdc[k];
    J[73 * k + 16] -= dqdc[k];
  }
  J[5257] += dqdT; // dwdot[H]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT

  // reaction 186: NO + O + M <=> NO2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[2] * sc[35];
  k_f = 106000000 * exp(-1.41 * logT);
  dlnkfdT = -1.41 * invT;
  // reverse
  phi_r = sc[36];
  Kc = refCinv * exp(g_RT[2] + g_RT[35] - g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[35]) + (h_RT[36]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[35] -= q; // NO
  wdot[36] += q; // NO2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2 * q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor + k_f * sc[35];
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 6 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 2 * q_nocor;
  dqdc[14] = 1.5 * q_nocor;
  dqdc[15] = 2 * q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 3 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor + k_f * sc[2];
  dqdc[36] = q_nocor - k_r;
  dqdc[37] = q_nocor;
  dqdc[38] = q_nocor;
  dqdc[39] = q_nocor;
  dqdc[40] = q_nocor;
  dqdc[41] = q_nocor;
  dqdc[42] = q_nocor;
  dqdc[43] = q_nocor;
  dqdc[44] = q_nocor;
  dqdc[45] = q_nocor;
  dqdc[46] = q_nocor;
  dqdc[47] = q_nocor;
  dqdc[48] = 0.7 * q_nocor;
  dqdc[49] = q_nocor;
  dqdc[50] = q_nocor;
  dqdc[51] = q_nocor;
  dqdc[52] = q_nocor;
  dqdc[53] = q_nocor;
  dqdc[54] = q_nocor;
  dqdc[55] = q_nocor;
  dqdc[56] = q_nocor;
  dqdc[57] = q_nocor;
  dqdc[58] = q_nocor;
  dqdc[59] = q_nocor;
  dqdc[60] = q_nocor;
  dqdc[61] = q_nocor;
  dqdc[62] = q_nocor;
  dqdc[63] = q_nocor;
  dqdc[64] = q_nocor;
  dqdc[65] = q_nocor;
  dqdc[66] = q_nocor;
  dqdc[67] = q_nocor;
  dqdc[68] = q_nocor;
  dqdc[69] = q_nocor;
  dqdc[70] = q_nocor;
  dqdc[71] = q_nocor;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 2] -= dqdc[k];
    J[73 * k + 35] -= dqdc[k];
    J[73 * k + 36] += dqdc[k];
  }
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5292] += dqdT; // dwdot[NO2]/dT

  // reaction 204: NNH + M <=> H + N2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[34];
  k_f = 130000000 * exp(-0.11 * logT - (2506.0189957075) * invT);
  dlnkfdT = -0.11 * invT + (2506.0189957075) * invT2;
  // reverse
  phi_r = sc[1] * sc[47];
  Kc = refC * exp(-g_RT[1] + g_RT[34] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[34]) + (h_RT[1] + h_RT[47]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[34] -= q; // NNH
  wdot[47] += q; // N2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2 * q_nocor;
  dqdc[1] = q_nocor - k_r * sc[47];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 6 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 2 * q_nocor;
  dqdc[14] = 1.5 * q_nocor;
  dqdc[15] = 2 * q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 3 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor + k_f;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  dqdc[38] = q_nocor;
  dqdc[39] = q_nocor;
  dqdc[40] = q_nocor;
  dqdc[41] = q_nocor;
  dqdc[42] = q_nocor;
  dqdc[43] = q_nocor;
  dqdc[44] = q_nocor;
  dqdc[45] = q_nocor;
  dqdc[46] = q_nocor;
  dqdc[47] = q_nocor - k_r * sc[1];
  dqdc[48] = 0.7 * q_nocor;
  dqdc[49] = q_nocor;
  dqdc[50] = q_nocor;
  dqdc[51] = q_nocor;
  dqdc[52] = q_nocor;
  dqdc[53] = q_nocor;
  dqdc[54] = q_nocor;
  dqdc[55] = q_nocor;
  dqdc[56] = q_nocor;
  dqdc[57] = q_nocor;
  dqdc[58] = q_nocor;
  dqdc[59] = q_nocor;
  dqdc[60] = q_nocor;
  dqdc[61] = q_nocor;
  dqdc[62] = q_nocor;
  dqdc[63] = q_nocor;
  dqdc[64] = q_nocor;
  dqdc[65] = q_nocor;
  dqdc[66] = q_nocor;
  dqdc[67] = q_nocor;
  dqdc[68] = q_nocor;
  dqdc[69] = q_nocor;
  dqdc[70] = q_nocor;
  dqdc[71] = q_nocor;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] += dqdc[k];
    J[73 * k + 34] -= dqdc[k];
    J[73 * k + 47] += dqdc[k];
  }
  J[5257] += dqdT; // dwdot[H]/dT
  J[5290] -= dqdT; // dwdot[NNH]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 211: H + NO + M <=> HNO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[35];
  k_f = 44800000 * exp(-1.32 * logT - (372.380332695493) * invT);
  dlnkfdT = -1.32 * invT + (372.380332695493) * invT2;
  // reverse
  phi_r = sc[38];
  Kc = refCinv * exp(g_RT[1] + g_RT[35] - g_RT[38]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[35]) + (h_RT[38]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[35] -= q; // NO
  wdot[38] += q; // HNO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2 * q_nocor;
  dqdc[1] = q_nocor + k_f * sc[35];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 6 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 2 * q_nocor;
  dqdc[14] = 1.5 * q_nocor;
  dqdc[15] = 2 * q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 3 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor + k_f * sc[1];
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  dqdc[38] = q_nocor - k_r;
  dqdc[39] = q_nocor;
  dqdc[40] = q_nocor;
  dqdc[41] = q_nocor;
  dqdc[42] = q_nocor;
  dqdc[43] = q_nocor;
  dqdc[44] = q_nocor;
  dqdc[45] = q_nocor;
  dqdc[46] = q_nocor;
  dqdc[47] = q_nocor;
  dqdc[48] = 0.7 * q_nocor;
  dqdc[49] = q_nocor;
  dqdc[50] = q_nocor;
  dqdc[51] = q_nocor;
  dqdc[52] = q_nocor;
  dqdc[53] = q_nocor;
  dqdc[54] = q_nocor;
  dqdc[55] = q_nocor;
  dqdc[56] = q_nocor;
  dqdc[57] = q_nocor;
  dqdc[58] = q_nocor;
  dqdc[59] = q_nocor;
  dqdc[60] = q_nocor;
  dqdc[61] = q_nocor;
  dqdc[62] = q_nocor;
  dqdc[63] = q_nocor;
  dqdc[64] = q_nocor;
  dqdc[65] = q_nocor;
  dqdc[66] = q_nocor;
  dqdc[67] = q_nocor;
  dqdc[68] = q_nocor;
  dqdc[69] = q_nocor;
  dqdc[70] = q_nocor;
  dqdc[71] = q_nocor;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] -= dqdc[k];
    J[73 * k + 35] -= dqdc[k];
    J[73 * k + 38] += dqdc[k];
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5294] += dqdT; // dwdot[HNO]/dT

  // reaction 226: NCO + M <=> CO + N + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[46];
  k_f = 310000000 * exp(-(27198.8607867451) * invT);
  dlnkfdT = (27198.8607867451) * invT2;
  // reverse
  phi_r = sc[14] * sc[30];
  Kc = refC * exp(-g_RT[14] - g_RT[30] + g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[46]) + (h_RT[14] + h_RT[30]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[30] += q; // N
  wdot[46] -= q; // NCO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2 * q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 6 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 2 * q_nocor;
  dqdc[14] = 1.5 * q_nocor - k_r * sc[30];
  dqdc[15] = 2 * q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 3 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor - k_r * sc[14];
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  dqdc[38] = q_nocor;
  dqdc[39] = q_nocor;
  dqdc[40] = q_nocor;
  dqdc[41] = q_nocor;
  dqdc[42] = q_nocor;
  dqdc[43] = q_nocor;
  dqdc[44] = q_nocor;
  dqdc[45] = q_nocor;
  dqdc[46] = q_nocor + k_f;
  dqdc[47] = q_nocor;
  dqdc[48] = 0.7 * q_nocor;
  dqdc[49] = q_nocor;
  dqdc[50] = q_nocor;
  dqdc[51] = q_nocor;
  dqdc[52] = q_nocor;
  dqdc[53] = q_nocor;
  dqdc[54] = q_nocor;
  dqdc[55] = q_nocor;
  dqdc[56] = q_nocor;
  dqdc[57] = q_nocor;
  dqdc[58] = q_nocor;
  dqdc[59] = q_nocor;
  dqdc[60] = q_nocor;
  dqdc[61] = q_nocor;
  dqdc[62] = q_nocor;
  dqdc[63] = q_nocor;
  dqdc[64] = q_nocor;
  dqdc[65] = q_nocor;
  dqdc[66] = q_nocor;
  dqdc[67] = q_nocor;
  dqdc[68] = q_nocor;
  dqdc[69] = q_nocor;
  dqdc[70] = q_nocor;
  dqdc[71] = q_nocor;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 14] += dqdc[k];
    J[73 * k + 30] += dqdc[k];
    J[73 * k + 46] -= dqdc[k];
  }
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5286] += dqdT; // dwdot[N]/dT
  J[5302] -= dqdT; // dwdot[NCO]/dT

  // reaction 229: HCN + M <=> CN + H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[40];
  k_f = 1.04e+23 * exp(-3.3 * logT - (63707.2298908775) * invT);
  dlnkfdT = -3.3 * invT + (63707.2298908775) * invT2;
  // reverse
  phi_r = sc[1] * sc[39];
  Kc = refC * exp(-g_RT[1] - g_RT[39] + g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[40]) + (h_RT[1] + h_RT[39]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[39] += q; // CN
  wdot[40] -= q; // HCN
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2 * q_nocor;
  dqdc[1] = q_nocor - k_r * sc[39];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 6 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 2 * q_nocor;
  dqdc[14] = 1.5 * q_nocor;
  dqdc[15] = 2 * q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 3 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  dqdc[38] = q_nocor;
  dqdc[39] = q_nocor - k_r * sc[1];
  dqdc[40] = q_nocor + k_f;
  dqdc[41] = q_nocor;
  dqdc[42] = q_nocor;
  dqdc[43] = q_nocor;
  dqdc[44] = q_nocor;
  dqdc[45] = q_nocor;
  dqdc[46] = q_nocor;
  dqdc[47] = q_nocor;
  dqdc[48] = 0.7 * q_nocor;
  dqdc[49] = q_nocor;
  dqdc[50] = q_nocor;
  dqdc[51] = q_nocor;
  dqdc[52] = q_nocor;
  dqdc[53] = q_nocor;
  dqdc[54] = q_nocor;
  dqdc[55] = q_nocor;
  dqdc[56] = q_nocor;
  dqdc[57] = q_nocor;
  dqdc[58] = q_nocor;
  dqdc[59] = q_nocor;
  dqdc[60] = q_nocor;
  dqdc[61] = q_nocor;
  dqdc[62] = q_nocor;
  dqdc[63] = q_nocor;
  dqdc[64] = q_nocor;
  dqdc[65] = q_nocor;
  dqdc[66] = q_nocor;
  dqdc[67] = q_nocor;
  dqdc[68] = q_nocor;
  dqdc[69] = q_nocor;
  dqdc[70] = q_nocor;
  dqdc[71] = q_nocor;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] += dqdc[k];
    J[73 * k + 39] += dqdc[k];
    J[73 * k + 40] -= dqdc[k];
  }
  J[5257] += dqdT; // dwdot[H]/dT
  J[5295] += dqdT; // dwdot[CN]/dT
  J[5296] -= dqdT; // dwdot[HCN]/dT

  // reaction 268: HNCO + M <=> CO + NH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[45];
  k_f = 11800000000 * exp(-(42632.5159269759) * invT);
  dlnkfdT = (42632.5159269759) * invT2;
  // reverse
  phi_r = sc[14] * sc[31];
  Kc = refC * exp(-g_RT[14] - g_RT[31] + g_RT[45]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[45]) + (h_RT[14] + h_RT[31]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[31] += q; // NH
  wdot[45] -= q; // HNCO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2 * q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 6 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 2 * q_nocor;
  dqdc[14] = 1.5 * q_nocor - k_r * sc[31];
  dqdc[15] = 2 * q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 3 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor - k_r * sc[14];
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  dqdc[38] = q_nocor;
  dqdc[39] = q_nocor;
  dqdc[40] = q_nocor;
  dqdc[41] = q_nocor;
  dqdc[42] = q_nocor;
  dqdc[43] = q_nocor;
  dqdc[44] = q_nocor;
  dqdc[45] = q_nocor + k_f;
  dqdc[46] = q_nocor;
  dqdc[47] = q_nocor;
  dqdc[48] = 0.7 * q_nocor;
  dqdc[49] = q_nocor;
  dqdc[50] = q_nocor;
  dqdc[51] = q_nocor;
  dqdc[52] = q_nocor;
  dqdc[53] = q_nocor;
  dqdc[54] = q_nocor;
  dqdc[55] = q_nocor;
  dqdc[56] = q_nocor;
  dqdc[57] = q_nocor;
  dqdc[58] = q_nocor;
  dqdc[59] = q_nocor;
  dqdc[60] = q_nocor;
  dqdc[61] = q_nocor;
  dqdc[62] = q_nocor;
  dqdc[63] = q_nocor;
  dqdc[64] = q_nocor;
  dqdc[65] = q_nocor;
  dqdc[66] = q_nocor;
  dqdc[67] = q_nocor;
  dqdc[68] = q_nocor;
  dqdc[69] = q_nocor;
  dqdc[70] = q_nocor;
  dqdc[71] = q_nocor;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 14] += dqdc[k];
    J[73 * k + 31] += dqdc[k];
    J[73 * k + 45] -= dqdc[k];
  }
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5287] += dqdT; // dwdot[NH]/dT
  J[5301] -= dqdT; // dwdot[HNCO]/dT

  // reaction 302: CH3CHO + CH3 => CH4 + CO + CH3
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[52];
  k_f = 2.72 * exp(1.77 * logT - (2979.04266156394) * invT);
  dlnkfdT = 1.77 * invT + (2979.04266156394) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[13] += q; // CH4
  wdot[14] += q; // CO
  wdot[52] -= q; // CH3CHO
  // d()/d[CH3]
  dqdci = +k_f * sc[52];
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[890] += dqdci; // dwdot[CO]/d[CH3]
  J[928] -= dqdci; // dwdot[CH3CHO]/d[CH3]
  // d()/d[CH3CHO]
  dqdci = +k_f * sc[12];
  J[3809] += dqdci; // dwdot[CH4]/d[CH3CHO]
  J[3810] += dqdci; // dwdot[CO]/d[CH3CHO]
  J[3848] -= dqdci; // dwdot[CH3CHO]/d[CH3CHO]
  // d()/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5308] -= dqdT; // dwdot[CH3CHO]/dT

  // reaction 332: CO + F + M <=> CFO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (18 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[14] * sc[54];
  k_f = 30900000 * exp(-1.4 * logT - (-245.066516246898) * invT);
  dlnkfdT = -1.4 * invT + (-245.066516246898) * invT2;
  // reverse
  phi_r = sc[69];
  Kc = refCinv * exp(g_RT[14] + g_RT[54] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[54]) + (h_RT[69]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] -= q; // CO
  wdot[54] -= q; // F
  wdot[69] += q; // CFO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2 * q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 18 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 2 * q_nocor;
  dqdc[14] = 1.5 * q_nocor + k_f * sc[54];
  dqdc[15] = 2 * q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 3 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  dqdc[38] = q_nocor;
  dqdc[39] = q_nocor;
  dqdc[40] = q_nocor;
  dqdc[41] = q_nocor;
  dqdc[42] = q_nocor;
  dqdc[43] = q_nocor;
  dqdc[44] = q_nocor;
  dqdc[45] = q_nocor;
  dqdc[46] = q_nocor;
  dqdc[47] = q_nocor;
  dqdc[48] = q_nocor;
  dqdc[49] = q_nocor;
  dqdc[50] = q_nocor;
  dqdc[51] = q_nocor;
  dqdc[52] = q_nocor;
  dqdc[53] = q_nocor;
  dqdc[54] = q_nocor + k_f * sc[14];
  dqdc[55] = q_nocor;
  dqdc[56] = q_nocor;
  dqdc[57] = q_nocor;
  dqdc[58] = q_nocor;
  dqdc[59] = q_nocor;
  dqdc[60] = q_nocor;
  dqdc[61] = q_nocor;
  dqdc[62] = q_nocor;
  dqdc[63] = q_nocor;
  dqdc[64] = q_nocor;
  dqdc[65] = q_nocor;
  dqdc[66] = q_nocor;
  dqdc[67] = q_nocor;
  dqdc[68] = q_nocor;
  dqdc[69] = q_nocor - k_r;
  dqdc[70] = q_nocor;
  dqdc[71] = q_nocor;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 14] -= dqdc[k];
    J[73 * k + 54] -= dqdc[k];
    J[73 * k + 69] += dqdc[k];
  }
  J[5270] -= dqdT; // dwdot[CO]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 340: HF + M <=> F + H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[53];
  k_f = 31200000 * exp(-(49979.4792477248) * invT);
  dlnkfdT = (49979.4792477248) * invT2;
  // reverse
  phi_r = sc[1] * sc[54];
  Kc = refC * exp(-g_RT[1] + g_RT[53] - g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[53]) + (h_RT[1] + h_RT[54]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[53] -= q; // HF
  wdot[54] += q; // F
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor - k_r * sc[54];
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  dqdc[38] = q_nocor;
  dqdc[39] = q_nocor;
  dqdc[40] = q_nocor;
  dqdc[41] = q_nocor;
  dqdc[42] = q_nocor;
  dqdc[43] = q_nocor;
  dqdc[44] = q_nocor;
  dqdc[45] = q_nocor;
  dqdc[46] = q_nocor;
  dqdc[47] = q_nocor;
  dqdc[48] = q_nocor;
  dqdc[49] = q_nocor;
  dqdc[50] = q_nocor;
  dqdc[51] = q_nocor;
  dqdc[52] = q_nocor;
  dqdc[53] = q_nocor + k_f;
  dqdc[54] = q_nocor - k_r * sc[1];
  dqdc[55] = q_nocor;
  dqdc[56] = q_nocor;
  dqdc[57] = q_nocor;
  dqdc[58] = q_nocor;
  dqdc[59] = q_nocor;
  dqdc[60] = q_nocor;
  dqdc[61] = q_nocor;
  dqdc[62] = q_nocor;
  dqdc[63] = q_nocor;
  dqdc[64] = q_nocor;
  dqdc[65] = q_nocor;
  dqdc[66] = q_nocor;
  dqdc[67] = q_nocor;
  dqdc[68] = q_nocor;
  dqdc[69] = q_nocor;
  dqdc[70] = q_nocor;
  dqdc[71] = q_nocor;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 1] += dqdc[k];
    J[73 * k + 53] -= dqdc[k];
    J[73 * k + 54] += dqdc[k];
  }
  J[5257] += dqdT; // dwdot[H]/dT
  J[5309] -= dqdT; // dwdot[HF]/dT
  J[5310] += dqdT; // dwdot[F]/dT

  // reaction 349: CHF + HF + M <=> CH2F2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (9 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + sc[53] + (6 - 1) * sc[56] +
          (6 - 1) * sc[57] + (6 - 1) * sc[58];
  // forward
  phi_f = sc[53] * sc[63];
  k_f = 304000000000000 * exp(-3.26 * logT - (2043.05966316716) * invT);
  dlnkfdT = -3.26 * invT + (2043.05966316716) * invT2;
  // reverse
  phi_r = sc[57];
  Kc = refCinv * exp(g_RT[53] - g_RT[57] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[53] + h_RT[63]) + (h_RT[57]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[53] -= q; // HF
  wdot[57] += q; // CH2F2
  wdot[63] -= q; // CHF
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2 * q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 9 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 2 * q_nocor;
  dqdc[14] = 1.5 * q_nocor;
  dqdc[15] = 2 * q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 3 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  dqdc[38] = q_nocor;
  dqdc[39] = q_nocor;
  dqdc[40] = q_nocor;
  dqdc[41] = q_nocor;
  dqdc[42] = q_nocor;
  dqdc[43] = q_nocor;
  dqdc[44] = q_nocor;
  dqdc[45] = q_nocor;
  dqdc[46] = q_nocor;
  dqdc[47] = q_nocor;
  dqdc[48] = q_nocor;
  dqdc[49] = q_nocor;
  dqdc[50] = q_nocor;
  dqdc[51] = q_nocor;
  dqdc[52] = q_nocor;
  dqdc[53] = 2 * q_nocor + k_f * sc[63];
  dqdc[54] = q_nocor;
  dqdc[55] = q_nocor;
  dqdc[56] = 6 * q_nocor;
  dqdc[57] = 6 * q_nocor - k_r;
  dqdc[58] = 6 * q_nocor;
  dqdc[59] = q_nocor;
  dqdc[60] = q_nocor;
  dqdc[61] = q_nocor;
  dqdc[62] = q_nocor;
  dqdc[63] = q_nocor + k_f * sc[53];
  dqdc[64] = q_nocor;
  dqdc[65] = q_nocor;
  dqdc[66] = q_nocor;
  dqdc[67] = q_nocor;
  dqdc[68] = q_nocor;
  dqdc[69] = q_nocor;
  dqdc[70] = q_nocor;
  dqdc[71] = q_nocor;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 53] -= dqdc[k];
    J[73 * k + 57] += dqdc[k];
    J[73 * k + 63] -= dqdc[k];
  }
  J[5309] -= dqdT; // dwdot[HF]/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 352: CHF3 + M <=> CF2 + HF + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (9 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + sc[53] + (6 - 1) * sc[56] +
          (6 - 1) * sc[57] + (6 - 1) * sc[58];
  // forward
  phi_f = sc[58];
  k_f = 3.41e+24 * exp(-4 * logT - (34747.1107738159) * invT);
  dlnkfdT = -4 * invT + (34747.1107738159) * invT2;
  // reverse
  phi_r = sc[53] * sc[64];
  Kc = refC * exp(-g_RT[53] + g_RT[58] - g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[58]) + (h_RT[53] + h_RT[64]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[53] += q; // HF
  wdot[58] -= q; // CHF3
  wdot[64] += q; // CF2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2 * q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 9 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 2 * q_nocor;
  dqdc[14] = 1.5 * q_nocor;
  dqdc[15] = 2 * q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 3 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  dqdc[38] = q_nocor;
  dqdc[39] = q_nocor;
  dqdc[40] = q_nocor;
  dqdc[41] = q_nocor;
  dqdc[42] = q_nocor;
  dqdc[43] = q_nocor;
  dqdc[44] = q_nocor;
  dqdc[45] = q_nocor;
  dqdc[46] = q_nocor;
  dqdc[47] = q_nocor;
  dqdc[48] = q_nocor;
  dqdc[49] = q_nocor;
  dqdc[50] = q_nocor;
  dqdc[51] = q_nocor;
  dqdc[52] = q_nocor;
  dqdc[53] = 2 * q_nocor - k_r * sc[64];
  dqdc[54] = q_nocor;
  dqdc[55] = q_nocor;
  dqdc[56] = 6 * q_nocor;
  dqdc[57] = 6 * q_nocor;
  dqdc[58] = 6 * q_nocor + k_f;
  dqdc[59] = q_nocor;
  dqdc[60] = q_nocor;
  dqdc[61] = q_nocor;
  dqdc[62] = q_nocor;
  dqdc[63] = q_nocor;
  dqdc[64] = q_nocor - k_r * sc[53];
  dqdc[65] = q_nocor;
  dqdc[66] = q_nocor;
  dqdc[67] = q_nocor;
  dqdc[68] = q_nocor;
  dqdc[69] = q_nocor;
  dqdc[70] = q_nocor;
  dqdc[71] = q_nocor;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 53] += dqdc[k];
    J[73 * k + 58] -= dqdc[k];
    J[73 * k + 64] += dqdc[k];
  }
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5314] -= dqdT; // dwdot[CHF3]/dT
  J[5320] += dqdT; // dwdot[CF2]/dT

  // reaction 353: CF4 + M <=> CF3 + F + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (9 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (6 - 1) * sc[56] + (6 - 1) * sc[57] +
          (6 - 1) * sc[58] + (6 - 1) * sc[59];
  // forward
  phi_f = sc[59];
  k_f = 9e+28 * exp(-4.64 * logT - (61593.7198944977) * invT);
  dlnkfdT = -4.64 * invT + (61593.7198944977) * invT2;
  // reverse
  phi_r = sc[54] * sc[62];
  Kc = refC * exp(-g_RT[54] + g_RT[59] - g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[59]) + (h_RT[54] + h_RT[62]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[54] += q; // F
  wdot[59] -= q; // CF4
  wdot[62] += q; // CF3
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = 2 * q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = 9 * q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 2 * q_nocor;
  dqdc[14] = 1.5 * q_nocor;
  dqdc[15] = 2 * q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = 3 * q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  dqdc[38] = q_nocor;
  dqdc[39] = q_nocor;
  dqdc[40] = q_nocor;
  dqdc[41] = q_nocor;
  dqdc[42] = q_nocor;
  dqdc[43] = q_nocor;
  dqdc[44] = q_nocor;
  dqdc[45] = q_nocor;
  dqdc[46] = q_nocor;
  dqdc[47] = q_nocor;
  dqdc[48] = q_nocor;
  dqdc[49] = q_nocor;
  dqdc[50] = q_nocor;
  dqdc[51] = q_nocor;
  dqdc[52] = q_nocor;
  dqdc[53] = q_nocor;
  dqdc[54] = q_nocor - k_r * sc[62];
  dqdc[55] = q_nocor;
  dqdc[56] = 6 * q_nocor;
  dqdc[57] = 6 * q_nocor;
  dqdc[58] = 6 * q_nocor;
  dqdc[59] = 6 * q_nocor + k_f;
  dqdc[60] = q_nocor;
  dqdc[61] = q_nocor;
  dqdc[62] = q_nocor - k_r * sc[54];
  dqdc[63] = q_nocor;
  dqdc[64] = q_nocor;
  dqdc[65] = q_nocor;
  dqdc[66] = q_nocor;
  dqdc[67] = q_nocor;
  dqdc[68] = q_nocor;
  dqdc[69] = q_nocor;
  dqdc[70] = q_nocor;
  dqdc[71] = q_nocor;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 54] += dqdc[k];
    J[73 * k + 59] -= dqdc[k];
    J[73 * k + 62] += dqdc[k];
  }
  J[5310] += dqdT; // dwdot[F]/dT
  J[5315] -= dqdT; // dwdot[CF4]/dT
  J[5318] += dqdT; // dwdot[CF3]/dT

  // reaction 410: CF3O + M <=> CF2O + F + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[66];
  k_f = 9.03e+20 * exp(-3.42 * logT - (10919.8016479624) * invT);
  dlnkfdT = -3.42 * invT + (10919.8016479624) * invT2;
  // reverse
  phi_r = sc[54] * sc[67];
  Kc = refC * exp(-g_RT[54] + g_RT[66] - g_RT[67]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[66]) + (h_RT[54] + h_RT[67]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[54] += q; // F
  wdot[66] -= q; // CF3O
  wdot[67] += q; // CF2O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  dqdc[38] = q_nocor;
  dqdc[39] = q_nocor;
  dqdc[40] = q_nocor;
  dqdc[41] = q_nocor;
  dqdc[42] = q_nocor;
  dqdc[43] = q_nocor;
  dqdc[44] = q_nocor;
  dqdc[45] = q_nocor;
  dqdc[46] = q_nocor;
  dqdc[47] = q_nocor;
  dqdc[48] = q_nocor;
  dqdc[49] = q_nocor;
  dqdc[50] = q_nocor;
  dqdc[51] = q_nocor;
  dqdc[52] = q_nocor;
  dqdc[53] = q_nocor;
  dqdc[54] = q_nocor - k_r * sc[67];
  dqdc[55] = q_nocor;
  dqdc[56] = q_nocor;
  dqdc[57] = q_nocor;
  dqdc[58] = q_nocor;
  dqdc[59] = q_nocor;
  dqdc[60] = q_nocor;
  dqdc[61] = q_nocor;
  dqdc[62] = q_nocor;
  dqdc[63] = q_nocor;
  dqdc[64] = q_nocor;
  dqdc[65] = q_nocor;
  dqdc[66] = q_nocor + k_f;
  dqdc[67] = q_nocor - k_r * sc[54];
  dqdc[68] = q_nocor;
  dqdc[69] = q_nocor;
  dqdc[70] = q_nocor;
  dqdc[71] = q_nocor;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 54] += dqdc[k];
    J[73 * k + 66] -= dqdc[k];
    J[73 * k + 67] += dqdc[k];
  }
  J[5310] += dqdT; // dwdot[F]/dT
  J[5322] -= dqdT; // dwdot[CF3O]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 449: CHFO + M <=> CO + HF + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[68];
  k_f = 2.48e+19 * exp(-3 * logT - (21638.3166296029) * invT);
  dlnkfdT = -3 * invT + (21638.3166296029) * invT2;
  // reverse
  phi_r = sc[14] * sc[53];
  Kc = refC * exp(-g_RT[14] - g_RT[53] + g_RT[68]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[68]) + (h_RT[14] + h_RT[53]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[53] += q; // HF
  wdot[68] -= q; // CHFO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor - k_r * sc[53];
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  dqdc[38] = q_nocor;
  dqdc[39] = q_nocor;
  dqdc[40] = q_nocor;
  dqdc[41] = q_nocor;
  dqdc[42] = q_nocor;
  dqdc[43] = q_nocor;
  dqdc[44] = q_nocor;
  dqdc[45] = q_nocor;
  dqdc[46] = q_nocor;
  dqdc[47] = q_nocor;
  dqdc[48] = q_nocor;
  dqdc[49] = q_nocor;
  dqdc[50] = q_nocor;
  dqdc[51] = q_nocor;
  dqdc[52] = q_nocor;
  dqdc[53] = q_nocor - k_r * sc[14];
  dqdc[54] = q_nocor;
  dqdc[55] = q_nocor;
  dqdc[56] = q_nocor;
  dqdc[57] = q_nocor;
  dqdc[58] = q_nocor;
  dqdc[59] = q_nocor;
  dqdc[60] = q_nocor;
  dqdc[61] = q_nocor;
  dqdc[62] = q_nocor;
  dqdc[63] = q_nocor;
  dqdc[64] = q_nocor;
  dqdc[65] = q_nocor;
  dqdc[66] = q_nocor;
  dqdc[67] = q_nocor;
  dqdc[68] = q_nocor + k_f;
  dqdc[69] = q_nocor;
  dqdc[70] = q_nocor;
  dqdc[71] = q_nocor;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 14] += dqdc[k];
    J[73 * k + 53] += dqdc[k];
    J[73 * k + 68] -= dqdc[k];
  }
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5324] -= dqdT; // dwdot[CHFO]/dT

  // reaction 502: 2 F + M <=> F2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = (sc[54] * sc[54]);
  k_f = 100;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[55];
  Kc = refCinv * exp(2.000000 * g_RT[54] - g_RT[55]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[54]) + (h_RT[55]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[54] -= 2 * q; // F
  wdot[55] += q;     // F2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  dqdc[38] = q_nocor;
  dqdc[39] = q_nocor;
  dqdc[40] = q_nocor;
  dqdc[41] = q_nocor;
  dqdc[42] = q_nocor;
  dqdc[43] = q_nocor;
  dqdc[44] = q_nocor;
  dqdc[45] = q_nocor;
  dqdc[46] = q_nocor;
  dqdc[47] = q_nocor;
  dqdc[48] = q_nocor;
  dqdc[49] = q_nocor;
  dqdc[50] = q_nocor;
  dqdc[51] = q_nocor;
  dqdc[52] = q_nocor;
  dqdc[53] = q_nocor;
  dqdc[54] = q_nocor + k_f * 2.000000 * sc[54];
  dqdc[55] = q_nocor - k_r;
  dqdc[56] = q_nocor;
  dqdc[57] = q_nocor;
  dqdc[58] = q_nocor;
  dqdc[59] = q_nocor;
  dqdc[60] = q_nocor;
  dqdc[61] = q_nocor;
  dqdc[62] = q_nocor;
  dqdc[63] = q_nocor;
  dqdc[64] = q_nocor;
  dqdc[65] = q_nocor;
  dqdc[66] = q_nocor;
  dqdc[67] = q_nocor;
  dqdc[68] = q_nocor;
  dqdc[69] = q_nocor;
  dqdc[70] = q_nocor;
  dqdc[71] = q_nocor;
  for (int k = 0; k < 72; k++) {
    J[73 * k + 54] += -2 * dqdc[k];
    J[73 * k + 55] += dqdc[k];
  }
  J[5310] += -2 * dqdT; // dwdot[F]/dT
  J[5311] += dqdT;      // dwdot[F2]/dT

  // reaction 2: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[2];
  k_f = 0.0387 * exp(2.7 * logT - (3150.13632793755) * invT);
  dlnkfdT = 2.7 * invT + (3150.13632793755) * invT2;
  // reverse
  phi_r = sc[1] * sc[4];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[2] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[2]) + (h_RT[1] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // H2
  wdot[1] += q; // H
  wdot[2] -= q; // O
  wdot[4] += q; // OH
  // d()/d[H2]
  dqdci = +k_f * sc[2];
  J[0] -= dqdci; // dwdot[H2]/d[H2]
  J[1] += dqdci; // dwdot[H]/d[H2]
  J[2] -= dqdci; // dwdot[O]/d[H2]
  J[4] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[4];
  J[73] -= dqdci; // dwdot[H2]/d[H]
  J[74] += dqdci; // dwdot[H]/d[H]
  J[75] -= dqdci; // dwdot[O]/d[H]
  J[77] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[0];
  J[146] -= dqdci; // dwdot[H2]/d[O]
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[1];
  J[292] -= dqdci; // dwdot[H2]/d[OH]
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT

  // reaction 3: HO2 + O <=> O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[6];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[4];
  Kc = exp(g_RT[2] - g_RT[3] - g_RT[4] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[6]) + (h_RT[3] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // O
  wdot[3] += q; // O2
  wdot[4] += q; // OH
  wdot[6] -= q; // HO2
  // d()/d[O]
  dqdci = +k_f * sc[6];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[149] += dqdci; // dwdot[O2]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[152] -= dqdci; // dwdot[HO2]/d[O]
  // d()/d[O2]
  dqdci = -k_r * sc[4];
  J[221] -= dqdci; // dwdot[O]/d[O2]
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[223] += dqdci; // dwdot[OH]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[3];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[295] += dqdci; // dwdot[O2]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[298] -= dqdci; // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[2];
  J[440] -= dqdci; // dwdot[O]/d[HO2]
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT

  // reaction 4: H2O2 + O <=> HO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[7];
  k_f = 9.63 * exp(2 * logT - (2012.86666321888) * invT);
  dlnkfdT = 2 * invT + (2012.86666321888) * invT2;
  // reverse
  phi_r = sc[4] * sc[6];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[7]) + (h_RT[4] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // O
  wdot[4] += q; // OH
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[O]
  dqdci = +k_f * sc[7];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[152] += dqdci; // dwdot[HO2]/d[O]
  J[153] -= dqdci; // dwdot[H2O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[6];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[298] += dqdci; // dwdot[HO2]/d[OH]
  J[299] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[4];
  J[440] -= dqdci; // dwdot[O]/d[HO2]
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[2];
  J[513] -= dqdci; // dwdot[O]/d[H2O2]
  J[515] += dqdci; // dwdot[OH]/d[H2O2]
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT

  // reaction 5: CH + O <=> CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[9];
  k_f = 57000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[9] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[9]) + (h_RT[1] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[9] -= q;  // CH
  wdot[14] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[14];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[75] -= dqdci; // dwdot[O]/d[H]
  J[82] -= dqdci; // dwdot[CH]/d[H]
  J[87] += dqdci; // dwdot[CO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[9];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[155] -= dqdci; // dwdot[CH]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  // d()/d[CH]
  dqdci = +k_f * sc[2];
  J[658] += dqdci; // dwdot[H]/d[CH]
  J[659] -= dqdci; // dwdot[O]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[671] += dqdci; // dwdot[CO]/d[CH]
  // d()/d[CO]
  dqdci = -k_r * sc[1];
  J[1023] += dqdci; // dwdot[H]/d[CO]
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1031] -= dqdci; // dwdot[CH]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5270] += dqdT; // dwdot[CO]/dT

  // reaction 6: CH2 + O <=> H + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[10];
  k_f = 80000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[16];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[10] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[10]) + (h_RT[1] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[10] -= q; // CH2
  wdot[16] += q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[16];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[75] -= dqdci; // dwdot[O]/d[H]
  J[83] -= dqdci; // dwdot[CH2]/d[H]
  J[89] += dqdci; // dwdot[HCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[10];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[156] -= dqdci; // dwdot[CH2]/d[O]
  J[162] += dqdci; // dwdot[HCO]/d[O]
  // d()/d[CH2]
  dqdci = +k_f * sc[2];
  J[731] += dqdci; // dwdot[H]/d[CH2]
  J[732] -= dqdci; // dwdot[O]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[746] += dqdci; // dwdot[HCO]/d[CH2]
  // d()/d[HCO]
  dqdci = -k_r * sc[1];
  J[1169] += dqdci; // dwdot[H]/d[HCO]
  J[1170] -= dqdci; // dwdot[O]/d[HCO]
  J[1178] -= dqdci; // dwdot[CH2]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT

  // reaction 7: CH2(S) + O <=> CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[11];
  k_f = 15000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[14];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[11] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[11]) + (h_RT[0] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // O
  wdot[11] -= q; // CH2(S)
  wdot[14] += q; // CO
  // d()/d[H2]
  dqdci = -k_r * sc[14];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[O]/d[H2]
  J[11] -= dqdci; // dwdot[CH2(S)]/d[H2]
  J[14] += dqdci; // dwdot[CO]/d[H2]
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[146] += dqdci; // dwdot[H2]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[157] -= dqdci; // dwdot[CH2(S)]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[2];
  J[803] += dqdci; // dwdot[H2]/d[CH2(S)]
  J[805] -= dqdci; // dwdot[O]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[817] += dqdci; // dwdot[CO]/d[CH2(S)]
  // d()/d[CO]
  dqdci = -k_r * sc[0];
  J[1022] += dqdci; // dwdot[H2]/d[CO]
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1033] -= dqdci; // dwdot[CH2(S)]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5270] += dqdT; // dwdot[CO]/dT

  // reaction 8: CH2(S) + O <=> H + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[11];
  k_f = 15000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[16];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[11] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[11]) + (h_RT[1] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[11] -= q; // CH2(S)
  wdot[16] += q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[16];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[75] -= dqdci; // dwdot[O]/d[H]
  J[84] -= dqdci; // dwdot[CH2(S)]/d[H]
  J[89] += dqdci; // dwdot[HCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[157] -= dqdci; // dwdot[CH2(S)]/d[O]
  J[162] += dqdci; // dwdot[HCO]/d[O]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[2];
  J[804] += dqdci; // dwdot[H]/d[CH2(S)]
  J[805] -= dqdci; // dwdot[O]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[819] += dqdci; // dwdot[HCO]/d[CH2(S)]
  // d()/d[HCO]
  dqdci = -k_r * sc[1];
  J[1169] += dqdci; // dwdot[H]/d[HCO]
  J[1170] -= dqdci; // dwdot[O]/d[HCO]
  J[1179] -= dqdci; // dwdot[CH2(S)]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT

  // reaction 9: CH3 + O <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[12];
  k_f = 50600000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[17];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[12] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[12]) + (h_RT[1] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[12] -= q; // CH3
  wdot[17] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[17];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[75] -= dqdci; // dwdot[O]/d[H]
  J[85] -= dqdci; // dwdot[CH3]/d[H]
  J[90] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[12];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[158] -= dqdci; // dwdot[CH3]/d[O]
  J[163] += dqdci; // dwdot[CH2O]/d[O]
  // d()/d[CH3]
  dqdci = +k_f * sc[2];
  J[877] += dqdci; // dwdot[H]/d[CH3]
  J[878] -= dqdci; // dwdot[O]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[893] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[1242] += dqdci; // dwdot[H]/d[CH2O]
  J[1243] -= dqdci; // dwdot[O]/d[CH2O]
  J[1253] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 10: CH4 + O <=> CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[13];
  k_f = 1020 * exp(1.5 * logT - (4327.66332592059) * invT);
  dlnkfdT = 1.5 * invT + (4327.66332592059) * invT2;
  // reverse
  phi_r = sc[4] * sc[12];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[13]) + (h_RT[4] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[12] += q; // CH3
  wdot[13] -= q; // CH4
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[158] += dqdci; // dwdot[CH3]/d[O]
  J[159] -= dqdci; // dwdot[CH4]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[304] += dqdci; // dwdot[CH3]/d[OH]
  J[305] -= dqdci; // dwdot[CH4]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[4];
  J[878] -= dqdci; // dwdot[O]/d[CH3]
  J[880] += dqdci; // dwdot[OH]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[889] -= dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[2];
  J[951] -= dqdci; // dwdot[O]/d[CH4]
  J[953] += dqdci; // dwdot[OH]/d[CH4]
  J[961] += dqdci; // dwdot[CH3]/d[CH4]
  J[962] -= dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5269] -= dqdT; // dwdot[CH4]/dT

  // reaction 12: HCO + O <=> CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[16];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[14];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[4] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[162] -= dqdci; // dwdot[HCO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[14];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[306] += dqdci; // dwdot[CO]/d[OH]
  J[308] -= dqdci; // dwdot[HCO]/d[OH]
  // d()/d[CO]
  dqdci = -k_r * sc[4];
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1026] += dqdci; // dwdot[OH]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[2];
  J[1170] -= dqdci; // dwdot[O]/d[HCO]
  J[1172] += dqdci; // dwdot[OH]/d[HCO]
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT

  // reaction 13: HCO + O <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[16];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[15];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[1] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[15] += q; // CO2
  wdot[16] -= q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[15];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[75] -= dqdci; // dwdot[O]/d[H]
  J[88] += dqdci; // dwdot[CO2]/d[H]
  J[89] -= dqdci; // dwdot[HCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[161] += dqdci; // dwdot[CO2]/d[O]
  J[162] -= dqdci; // dwdot[HCO]/d[O]
  // d()/d[CO2]
  dqdci = -k_r * sc[1];
  J[1096] += dqdci; // dwdot[H]/d[CO2]
  J[1097] -= dqdci; // dwdot[O]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  J[1111] -= dqdci; // dwdot[HCO]/d[CO2]
  // d()/d[HCO]
  dqdci = +k_f * sc[2];
  J[1169] += dqdci; // dwdot[H]/d[HCO]
  J[1170] -= dqdci; // dwdot[O]/d[HCO]
  J[1183] += dqdci; // dwdot[CO2]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT

  // reaction 14: CH2O + O <=> HCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[17];
  k_f = 39000000 * exp(-(1781.38699694871) * invT);
  dlnkfdT = (1781.38699694871) * invT2;
  // reverse
  phi_r = sc[4] * sc[16];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[17]) + (h_RT[4] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[162] += dqdci; // dwdot[HCO]/d[O]
  J[163] -= dqdci; // dwdot[CH2O]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[16];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[308] += dqdci; // dwdot[HCO]/d[OH]
  J[309] -= dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[HCO]
  dqdci = -k_r * sc[4];
  J[1170] -= dqdci; // dwdot[O]/d[HCO]
  J[1172] += dqdci; // dwdot[OH]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[2];
  J[1243] -= dqdci; // dwdot[O]/d[CH2O]
  J[1245] += dqdci; // dwdot[OH]/d[CH2O]
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT

  // reaction 15: CH2OH + O <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[18];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[17];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[18]) + (h_RT[4] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[17] += q; // CH2O
  wdot[18] -= q; // CH2OH
  // d()/d[O]
  dqdci = +k_f * sc[18];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[163] += dqdci; // dwdot[CH2O]/d[O]
  J[164] -= dqdci; // dwdot[CH2OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[309] += dqdci; // dwdot[CH2O]/d[OH]
  J[310] -= dqdci; // dwdot[CH2OH]/d[OH]
  // d()/d[CH2O]
  dqdci = -k_r * sc[4];
  J[1243] -= dqdci; // dwdot[O]/d[CH2O]
  J[1245] += dqdci; // dwdot[OH]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1259] -= dqdci; // dwdot[CH2OH]/d[CH2O]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[2];
  J[1316] -= dqdci; // dwdot[O]/d[CH2OH]
  J[1318] += dqdci; // dwdot[OH]/d[CH2OH]
  J[1331] += dqdci; // dwdot[CH2O]/d[CH2OH]
  J[1332] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5274] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 16: CH3O + O <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[17];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[17] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[19]) + (h_RT[4] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[17] += q; // CH2O
  wdot[19] -= q; // CH3O
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[163] += dqdci; // dwdot[CH2O]/d[O]
  J[165] -= dqdci; // dwdot[CH3O]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[309] += dqdci; // dwdot[CH2O]/d[OH]
  J[311] -= dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[CH2O]
  dqdci = -k_r * sc[4];
  J[1243] -= dqdci; // dwdot[O]/d[CH2O]
  J[1245] += dqdci; // dwdot[OH]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1260] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[2];
  J[1389] -= dqdci; // dwdot[O]/d[CH3O]
  J[1391] += dqdci; // dwdot[OH]/d[CH3O]
  J[1404] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[1406] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5275] -= dqdT; // dwdot[CH3O]/dT

  // reaction 17: CH3OH + O <=> CH2OH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 0.388 * exp(2.5 * logT - (1559.97166399463) * invT);
  dlnkfdT = 2.5 * invT + (1559.97166399463) * invT2;
  // reverse
  phi_r = sc[4] * sc[18];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[4] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[164] += dqdci; // dwdot[CH2OH]/d[O]
  J[166] -= dqdci; // dwdot[CH3OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[310] += dqdci; // dwdot[CH2OH]/d[OH]
  J[312] -= dqdci; // dwdot[CH3OH]/d[OH]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[4];
  J[1316] -= dqdci; // dwdot[O]/d[CH2OH]
  J[1318] += dqdci; // dwdot[OH]/d[CH2OH]
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1334] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[2];
  J[1462] -= dqdci; // dwdot[O]/d[CH3OH]
  J[1464] += dqdci; // dwdot[OH]/d[CH3OH]
  J[1478] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 18: CH3OH + O <=> CH3O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 0.13 * exp(2.5 * logT - (2516.0833290236) * invT);
  dlnkfdT = 2.5 * invT + (2516.0833290236) * invT2;
  // reverse
  phi_r = sc[4] * sc[19];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[4] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[165] += dqdci; // dwdot[CH3O]/d[O]
  J[166] -= dqdci; // dwdot[CH3OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[19];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[311] += dqdci; // dwdot[CH3O]/d[OH]
  J[312] -= dqdci; // dwdot[CH3OH]/d[OH]
  // d()/d[CH3O]
  dqdci = -k_r * sc[4];
  J[1389] -= dqdci; // dwdot[O]/d[CH3O]
  J[1391] += dqdci; // dwdot[OH]/d[CH3O]
  J[1406] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[1407] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[2];
  J[1462] -= dqdci; // dwdot[O]/d[CH3OH]
  J[1464] += dqdci; // dwdot[OH]/d[CH3OH]
  J[1479] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 19: C2H + O <=> CH + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[21];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[9] * sc[14];
  Kc = exp(g_RT[2] - g_RT[9] - g_RT[14] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[21]) + (h_RT[9] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[9] += q;  // CH
  wdot[14] += q; // CO
  wdot[21] -= q; // C2H
  // d()/d[O]
  dqdci = +k_f * sc[21];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[155] += dqdci; // dwdot[CH]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[167] -= dqdci; // dwdot[C2H]/d[O]
  // d()/d[CH]
  dqdci = -k_r * sc[14];
  J[659] -= dqdci; // dwdot[O]/d[CH]
  J[666] += dqdci; // dwdot[CH]/d[CH]
  J[671] += dqdci; // dwdot[CO]/d[CH]
  J[678] -= dqdci; // dwdot[C2H]/d[CH]
  // d()/d[CO]
  dqdci = -k_r * sc[9];
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1031] += dqdci; // dwdot[CH]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1043] -= dqdci; // dwdot[C2H]/d[CO]
  // d()/d[C2H]
  dqdci = +k_f * sc[2];
  J[1535] -= dqdci; // dwdot[O]/d[C2H]
  J[1542] += dqdci; // dwdot[CH]/d[C2H]
  J[1547] += dqdci; // dwdot[CO]/d[C2H]
  J[1554] -= dqdci; // dwdot[C2H]/d[C2H]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5265] += dqdT; // dwdot[CH]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5277] -= dqdT; // dwdot[C2H]/dT

  // reaction 20: C2H2 + O <=> H + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 13.5 * exp(2 * logT - (956.111665028967) * invT);
  dlnkfdT = 2 * invT + (956.111665028967) * invT2;
  // reverse
  phi_r = sc[1] * sc[27];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[22] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[1] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[22] -= q; // C2H2
  wdot[27] += q; // HCCO
  // d()/d[H]
  dqdci = -k_r * sc[27];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[75] -= dqdci;  // dwdot[O]/d[H]
  J[95] -= dqdci;  // dwdot[C2H2]/d[H]
  J[100] += dqdci; // dwdot[HCCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[168] -= dqdci; // dwdot[C2H2]/d[O]
  J[173] += dqdci; // dwdot[HCCO]/d[O]
  // d()/d[C2H2]
  dqdci = +k_f * sc[2];
  J[1607] += dqdci; // dwdot[H]/d[C2H2]
  J[1608] -= dqdci; // dwdot[O]/d[C2H2]
  J[1628] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[1633] += dqdci; // dwdot[HCCO]/d[C2H2]
  // d()/d[HCCO]
  dqdci = -k_r * sc[1];
  J[1972] += dqdci; // dwdot[H]/d[HCCO]
  J[1973] -= dqdci; // dwdot[O]/d[HCCO]
  J[1993] -= dqdci; // dwdot[C2H2]/d[HCCO]
  J[1998] += dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5278] -= dqdT; // dwdot[C2H2]/dT
  J[5283] += dqdT; // dwdot[HCCO]/dT

  // reaction 21: C2H2 + O <=> C2H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 46000000000000 * exp(-1.41 * logT - (14568.1224750466) * invT);
  dlnkfdT = -1.41 * invT + (14568.1224750466) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[21] += q; // C2H
  wdot[22] -= q; // C2H2
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[167] += dqdci; // dwdot[C2H]/d[O]
  J[168] -= dqdci; // dwdot[C2H2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[313] += dqdci; // dwdot[C2H]/d[OH]
  J[314] -= dqdci; // dwdot[C2H2]/d[OH]
  // d()/d[C2H]
  dqdci = -k_r * sc[4];
  J[1535] -= dqdci; // dwdot[O]/d[C2H]
  J[1537] += dqdci; // dwdot[OH]/d[C2H]
  J[1554] += dqdci; // dwdot[C2H]/d[C2H]
  J[1555] -= dqdci; // dwdot[C2H2]/d[C2H]
  // d()/d[C2H2]
  dqdci = +k_f * sc[2];
  J[1608] -= dqdci; // dwdot[O]/d[C2H2]
  J[1610] += dqdci; // dwdot[OH]/d[C2H2]
  J[1627] += dqdci; // dwdot[C2H]/d[C2H2]
  J[1628] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5277] += dqdT; // dwdot[C2H]/dT
  J[5278] -= dqdT; // dwdot[C2H2]/dT

  // reaction 22: C2H2 + O <=> CH2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 6.94 * exp(2 * logT - (956.111665028967) * invT);
  dlnkfdT = 2 * invT + (956.111665028967) * invT2;
  // reverse
  phi_r = sc[10] * sc[14];
  Kc = exp(g_RT[2] - g_RT[10] - g_RT[14] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[10] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[10] += q; // CH2
  wdot[14] += q; // CO
  wdot[22] -= q; // C2H2
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[156] += dqdci; // dwdot[CH2]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[168] -= dqdci; // dwdot[C2H2]/d[O]
  // d()/d[CH2]
  dqdci = -k_r * sc[14];
  J[732] -= dqdci; // dwdot[O]/d[CH2]
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  J[744] += dqdci; // dwdot[CO]/d[CH2]
  J[752] -= dqdci; // dwdot[C2H2]/d[CH2]
  // d()/d[CO]
  dqdci = -k_r * sc[10];
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1032] += dqdci; // dwdot[CH2]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1044] -= dqdci; // dwdot[C2H2]/d[CO]
  // d()/d[C2H2]
  dqdci = +k_f * sc[2];
  J[1608] -= dqdci; // dwdot[O]/d[C2H2]
  J[1616] += dqdci; // dwdot[CH2]/d[C2H2]
  J[1620] += dqdci; // dwdot[CO]/d[C2H2]
  J[1628] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5278] -= dqdT; // dwdot[C2H2]/dT

  // reaction 23: C2H3 + O <=> CH2CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[23];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[28];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[23] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[23]) + (h_RT[1] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[23] -= q; // C2H3
  wdot[28] += q; // CH2CO
  // d()/d[H]
  dqdci = -k_r * sc[28];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[75] -= dqdci;  // dwdot[O]/d[H]
  J[96] -= dqdci;  // dwdot[C2H3]/d[H]
  J[101] += dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[23];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[169] -= dqdci; // dwdot[C2H3]/d[O]
  J[174] += dqdci; // dwdot[CH2CO]/d[O]
  // d()/d[C2H3]
  dqdci = +k_f * sc[2];
  J[1680] += dqdci; // dwdot[H]/d[C2H3]
  J[1681] -= dqdci; // dwdot[O]/d[C2H3]
  J[1702] -= dqdci; // dwdot[C2H3]/d[C2H3]
  J[1707] += dqdci; // dwdot[CH2CO]/d[C2H3]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[1];
  J[2045] += dqdci; // dwdot[H]/d[CH2CO]
  J[2046] -= dqdci; // dwdot[O]/d[CH2CO]
  J[2067] -= dqdci; // dwdot[C2H3]/d[CH2CO]
  J[2072] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT
  J[5284] += dqdT; // dwdot[CH2CO]/dT

  // reaction 24: C2H4 + O <=> CH3 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[24];
  k_f = 12.5 * exp(1.83 * logT - (110.707666477038) * invT);
  dlnkfdT = 1.83 * invT + (110.707666477038) * invT2;
  // reverse
  phi_r = sc[12] * sc[16];
  Kc = exp(g_RT[2] - g_RT[12] - g_RT[16] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[24]) + (h_RT[12] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[12] += q; // CH3
  wdot[16] += q; // HCO
  wdot[24] -= q; // C2H4
  // d()/d[O]
  dqdci = +k_f * sc[24];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[158] += dqdci; // dwdot[CH3]/d[O]
  J[162] += dqdci; // dwdot[HCO]/d[O]
  J[170] -= dqdci; // dwdot[C2H4]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc[16];
  J[878] -= dqdci; // dwdot[O]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[892] += dqdci; // dwdot[HCO]/d[CH3]
  J[900] -= dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[HCO]
  dqdci = -k_r * sc[12];
  J[1170] -= dqdci; // dwdot[O]/d[HCO]
  J[1180] += dqdci; // dwdot[CH3]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1192] -= dqdci; // dwdot[C2H4]/d[HCO]
  // d()/d[C2H4]
  dqdci = +k_f * sc[2];
  J[1754] -= dqdci; // dwdot[O]/d[C2H4]
  J[1764] += dqdci; // dwdot[CH3]/d[C2H4]
  J[1768] += dqdci; // dwdot[HCO]/d[C2H4]
  J[1776] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT

  // reaction 25: C2H5 + O <=> CH2O + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[25];
  k_f = 22400000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[12] * sc[17];
  Kc = exp(g_RT[2] - g_RT[12] - g_RT[17] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[25]) + (h_RT[12] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[12] += q; // CH3
  wdot[17] += q; // CH2O
  wdot[25] -= q; // C2H5
  // d()/d[O]
  dqdci = +k_f * sc[25];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[158] += dqdci; // dwdot[CH3]/d[O]
  J[163] += dqdci; // dwdot[CH2O]/d[O]
  J[171] -= dqdci; // dwdot[C2H5]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc[17];
  J[878] -= dqdci; // dwdot[O]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[893] += dqdci; // dwdot[CH2O]/d[CH3]
  J[901] -= dqdci; // dwdot[C2H5]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[12];
  J[1243] -= dqdci; // dwdot[O]/d[CH2O]
  J[1253] += dqdci; // dwdot[CH3]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1266] -= dqdci; // dwdot[C2H5]/d[CH2O]
  // d()/d[C2H5]
  dqdci = +k_f * sc[2];
  J[1827] -= dqdci; // dwdot[O]/d[C2H5]
  J[1837] += dqdci; // dwdot[CH3]/d[C2H5]
  J[1842] += dqdci; // dwdot[CH2O]/d[C2H5]
  J[1850] -= dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5281] -= dqdT; // dwdot[C2H5]/dT

  // reaction 26: C2H6 + O <=> C2H5 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[26];
  k_f = 89.8 * exp(1.92 * logT - (2863.30282842885) * invT);
  dlnkfdT = 1.92 * invT + (2863.30282842885) * invT2;
  // reverse
  phi_r = sc[4] * sc[25];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[26]) + (h_RT[4] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  // d()/d[O]
  dqdci = +k_f * sc[26];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[171] += dqdci; // dwdot[C2H5]/d[O]
  J[172] -= dqdci; // dwdot[C2H6]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[25];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[317] += dqdci; // dwdot[C2H5]/d[OH]
  J[318] -= dqdci; // dwdot[C2H6]/d[OH]
  // d()/d[C2H5]
  dqdci = -k_r * sc[4];
  J[1827] -= dqdci; // dwdot[O]/d[C2H5]
  J[1829] += dqdci; // dwdot[OH]/d[C2H5]
  J[1850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[2];
  J[1900] -= dqdci; // dwdot[O]/d[C2H6]
  J[1902] += dqdci; // dwdot[OH]/d[C2H6]
  J[1923] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1924] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5282] -= dqdT; // dwdot[C2H6]/dT

  // reaction 27: HCCO + O <=> 2 CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[27];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * (sc[14] * sc[14]);
  Kc = refC * exp(-g_RT[1] + g_RT[2] - 2.000000 * g_RT[14] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[2] + h_RT[27]) + (h_RT[1] + 2.000000 * h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;      // H
  wdot[2] -= q;      // O
  wdot[14] += 2 * q; // CO
  wdot[27] -= q;     // HCCO
  // d()/d[H]
  dqdci = -k_r * sc[14] * sc[14];
  J[74] += dqdci;     // dwdot[H]/d[H]
  J[75] -= dqdci;     // dwdot[O]/d[H]
  J[87] += 2 * dqdci; // dwdot[CO]/d[H]
  J[100] -= dqdci;    // dwdot[HCCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[27];
  J[147] += dqdci;     // dwdot[H]/d[O]
  J[148] -= dqdci;     // dwdot[O]/d[O]
  J[160] += 2 * dqdci; // dwdot[CO]/d[O]
  J[173] -= dqdci;     // dwdot[HCCO]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * 2.000000 * sc[14];
  J[1023] += dqdci;     // dwdot[H]/d[CO]
  J[1024] -= dqdci;     // dwdot[O]/d[CO]
  J[1036] += 2 * dqdci; // dwdot[CO]/d[CO]
  J[1049] -= dqdci;     // dwdot[HCCO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[2];
  J[1972] += dqdci;     // dwdot[H]/d[HCCO]
  J[1973] -= dqdci;     // dwdot[O]/d[HCCO]
  J[1985] += 2 * dqdci; // dwdot[CO]/d[HCCO]
  J[1998] -= dqdci;     // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[5257] += dqdT;     // dwdot[H]/dT
  J[5258] -= dqdT;     // dwdot[O]/dT
  J[5270] += 2 * dqdT; // dwdot[CO]/dT
  J[5283] -= dqdT;     // dwdot[HCCO]/dT

  // reaction 28: CH2CO + O <=> HCCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[28];
  k_f = 10000000 * exp(-(4025.73332643776) * invT);
  dlnkfdT = (4025.73332643776) * invT2;
  // reverse
  phi_r = sc[4] * sc[27];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[27] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[28]) + (h_RT[4] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[27] += q; // HCCO
  wdot[28] -= q; // CH2CO
  // d()/d[O]
  dqdci = +k_f * sc[28];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[173] += dqdci; // dwdot[HCCO]/d[O]
  J[174] -= dqdci; // dwdot[CH2CO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[27];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[319] += dqdci; // dwdot[HCCO]/d[OH]
  J[320] -= dqdci; // dwdot[CH2CO]/d[OH]
  // d()/d[HCCO]
  dqdci = -k_r * sc[4];
  J[1973] -= dqdci; // dwdot[O]/d[HCCO]
  J[1975] += dqdci; // dwdot[OH]/d[HCCO]
  J[1998] += dqdci; // dwdot[HCCO]/d[HCCO]
  J[1999] -= dqdci; // dwdot[CH2CO]/d[HCCO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[2];
  J[2046] -= dqdci; // dwdot[O]/d[CH2CO]
  J[2048] += dqdci; // dwdot[OH]/d[CH2CO]
  J[2071] += dqdci; // dwdot[HCCO]/d[CH2CO]
  J[2072] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5283] += dqdT; // dwdot[HCCO]/dT
  J[5284] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 29: CH2CO + O <=> CH2 + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[28];
  k_f = 1750000 * exp(-(679.342498836372) * invT);
  dlnkfdT = (679.342498836372) * invT2;
  // reverse
  phi_r = sc[10] * sc[15];
  Kc = exp(g_RT[2] - g_RT[10] - g_RT[15] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[28]) + (h_RT[10] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[10] += q; // CH2
  wdot[15] += q; // CO2
  wdot[28] -= q; // CH2CO
  // d()/d[O]
  dqdci = +k_f * sc[28];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[156] += dqdci; // dwdot[CH2]/d[O]
  J[161] += dqdci; // dwdot[CO2]/d[O]
  J[174] -= dqdci; // dwdot[CH2CO]/d[O]
  // d()/d[CH2]
  dqdci = -k_r * sc[15];
  J[732] -= dqdci; // dwdot[O]/d[CH2]
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  J[745] += dqdci; // dwdot[CO2]/d[CH2]
  J[758] -= dqdci; // dwdot[CH2CO]/d[CH2]
  // d()/d[CO2]
  dqdci = -k_r * sc[10];
  J[1097] -= dqdci; // dwdot[O]/d[CO2]
  J[1105] += dqdci; // dwdot[CH2]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  J[1123] -= dqdci; // dwdot[CH2CO]/d[CO2]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[2];
  J[2046] -= dqdci; // dwdot[O]/d[CH2CO]
  J[2054] += dqdci; // dwdot[CH2]/d[CH2CO]
  J[2059] += dqdci; // dwdot[CO2]/d[CH2CO]
  J[2072] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5284] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 30: CO + O2 <=> CO2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[14];
  k_f = 2500000 * exp(-(24053.7566254656) * invT);
  dlnkfdT = (24053.7566254656) * invT2;
  // reverse
  phi_r = sc[2] * sc[15];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[14]) + (h_RT[2] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[14] -= q; // CO
  wdot[15] += q; // CO2
  // d()/d[O]
  dqdci = -k_r * sc[15];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[160] -= dqdci; // dwdot[CO]/d[O]
  J[161] += dqdci; // dwdot[CO2]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[14];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[233] -= dqdci; // dwdot[CO]/d[O2]
  J[234] += dqdci; // dwdot[CO2]/d[O2]
  // d()/d[CO]
  dqdci = +k_f * sc[3];
  J[1024] += dqdci; // dwdot[O]/d[CO]
  J[1025] -= dqdci; // dwdot[O2]/d[CO]
  J[1036] -= dqdci; // dwdot[CO]/d[CO]
  J[1037] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[2];
  J[1097] += dqdci; // dwdot[O]/d[CO2]
  J[1098] -= dqdci; // dwdot[O2]/d[CO2]
  J[1109] -= dqdci; // dwdot[CO]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5270] -= dqdT; // dwdot[CO]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT

  // reaction 31: CH2O + O2 <=> HCO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[17];
  k_f = 100000000 * exp(-(20128.6666321888) * invT);
  dlnkfdT = (20128.6666321888) * invT2;
  // reverse
  phi_r = sc[6] * sc[16];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[17]) + (h_RT[6] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[O2]
  dqdci = +k_f * sc[17];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  J[235] += dqdci; // dwdot[HCO]/d[O2]
  J[236] -= dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[16];
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[454] += dqdci; // dwdot[HCO]/d[HO2]
  J[455] -= dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[HCO]
  dqdci = -k_r * sc[6];
  J[1171] -= dqdci; // dwdot[O2]/d[HCO]
  J[1174] += dqdci; // dwdot[HO2]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[3];
  J[1244] -= dqdci; // dwdot[O2]/d[CH2O]
  J[1247] += dqdci; // dwdot[HO2]/d[CH2O]
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT

  // reaction 37: H + O2 <=> O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[3];
  k_f = 26500000000 * exp(-0.6707 * logT - (8575.31520197823) * invT);
  dlnkfdT = -0.6707 * invT + (8575.31520197823) * invT2;
  // reverse
  phi_r = sc[2] * sc[4];
  Kc = exp(g_RT[1] - g_RT[2] + g_RT[3] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[3]) + (h_RT[2] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] += q; // O
  wdot[3] -= q; // O2
  wdot[4] += q; // OH
  // d()/d[H]
  dqdci = +k_f * sc[3];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[75] += dqdci; // dwdot[O]/d[H]
  J[76] -= dqdci; // dwdot[O2]/d[H]
  J[77] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[4];
  J[147] -= dqdci; // dwdot[H]/d[O]
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[1];
  J[220] -= dqdci; // dwdot[H]/d[O2]
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[223] += dqdci; // dwdot[OH]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[2];
  J[293] -= dqdci; // dwdot[H]/d[OH]
  J[294] += dqdci; // dwdot[O]/d[OH]
  J[295] -= dqdci; // dwdot[O2]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5260] += dqdT; // dwdot[OH]/dT

  // reaction 43: H + HO2 <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 3970000 * exp(-(337.658382754967) * invT);
  dlnkfdT = (337.658382754967) * invT2;
  // reverse
  phi_r = sc[2] * sc[5];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[5] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (h_RT[2] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] += q; // O
  wdot[5] += q; // H2O
  wdot[6] -= q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[75] += dqdci; // dwdot[O]/d[H]
  J[78] += dqdci; // dwdot[H2O]/d[H]
  J[79] -= dqdci; // dwdot[HO2]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[5];
  J[147] -= dqdci; // dwdot[H]/d[O]
  J[148] += dqdci; // dwdot[O]/d[O]
  J[151] += dqdci; // dwdot[H2O]/d[O]
  J[152] -= dqdci; // dwdot[HO2]/d[O]
  // d()/d[H2O]
  dqdci = -k_r * sc[2];
  J[366] -= dqdci; // dwdot[H]/d[H2O]
  J[367] += dqdci; // dwdot[O]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[371] -= dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[439] -= dqdci; // dwdot[H]/d[HO2]
  J[440] += dqdci; // dwdot[O]/d[HO2]
  J[443] += dqdci; // dwdot[H2O]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT

  // reaction 44: H + HO2 <=> H2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 44800000 * exp(-(537.435399079441) * invT);
  dlnkfdT = (537.435399079441) * invT2;
  // reverse
  phi_r = sc[0] * sc[3];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[3] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (h_RT[0] + h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // H2
  wdot[1] -= q; // H
  wdot[3] += q; // O2
  wdot[6] -= q; // HO2
  // d()/d[H2]
  dqdci = -k_r * sc[3];
  J[0] += dqdci; // dwdot[H2]/d[H2]
  J[1] -= dqdci; // dwdot[H]/d[H2]
  J[3] += dqdci; // dwdot[O2]/d[H2]
  J[6] -= dqdci; // dwdot[HO2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[76] += dqdci; // dwdot[O2]/d[H]
  J[79] -= dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = -k_r * sc[0];
  J[219] += dqdci; // dwdot[H2]/d[O2]
  J[220] -= dqdci; // dwdot[H]/d[O2]
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[438] += dqdci; // dwdot[H2]/d[HO2]
  J[439] -= dqdci; // dwdot[H]/d[HO2]
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT

  // reaction 45: H + HO2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 84000000 * exp(-(319.542582785997) * invT);
  dlnkfdT = (319.542582785997) * invT2;
  // reverse
  phi_r = (sc[4] * sc[4]);
  Kc = exp(g_RT[1] - 2.000000 * g_RT[4] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (2.000000 * h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;     // H
  wdot[4] += 2 * q; // OH
  wdot[6] -= q;     // HO2
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[74] -= dqdci;     // dwdot[H]/d[H]
  J[77] += 2 * dqdci; // dwdot[OH]/d[H]
  J[79] -= dqdci;     // dwdot[HO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[4];
  J[293] -= dqdci;     // dwdot[H]/d[OH]
  J[296] += 2 * dqdci; // dwdot[OH]/d[OH]
  J[298] -= dqdci;     // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[439] -= dqdci;     // dwdot[H]/d[HO2]
  J[442] += 2 * dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci;     // dwdot[HO2]/d[HO2]
  // d()/dT
  J[5257] -= dqdT;     // dwdot[H]/dT
  J[5260] += 2 * dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT;     // dwdot[HO2]/dT

  // reaction 46: H + H2O2 <=> H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[7];
  k_f = 12.1 * exp(2 * logT - (2616.72666218454) * invT);
  dlnkfdT = 2 * invT + (2616.72666218454) * invT2;
  // reverse
  phi_r = sc[0] * sc[6];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[0] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // H2
  wdot[1] -= q; // H
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[H2]
  dqdci = -k_r * sc[6];
  J[0] += dqdci; // dwdot[H2]/d[H2]
  J[1] -= dqdci; // dwdot[H]/d[H2]
  J[6] += dqdci; // dwdot[HO2]/d[H2]
  J[7] -= dqdci; // dwdot[H2O2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[79] += dqdci; // dwdot[HO2]/d[H]
  J[80] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[HO2]
  dqdci = -k_r * sc[0];
  J[438] += dqdci; // dwdot[H2]/d[HO2]
  J[439] -= dqdci; // dwdot[H]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[1];
  J[511] += dqdci; // dwdot[H2]/d[H2O2]
  J[512] -= dqdci; // dwdot[H]/d[H2O2]
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT

  // reaction 47: H + H2O2 <=> H2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[7];
  k_f = 10000000 * exp(-(1811.57999689699) * invT);
  dlnkfdT = (1811.57999689699) * invT2;
  // reverse
  phi_r = sc[4] * sc[5];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[5] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[4] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[4] += q; // OH
  wdot[5] += q; // H2O
  wdot[7] -= q; // H2O2
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[77] += dqdci; // dwdot[OH]/d[H]
  J[78] += dqdci; // dwdot[H2O]/d[H]
  J[80] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[5];
  J[293] -= dqdci; // dwdot[H]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[299] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[4];
  J[366] -= dqdci; // dwdot[H]/d[H2O]
  J[369] += dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[372] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[1];
  J[512] -= dqdci; // dwdot[H]/d[H2O2]
  J[515] += dqdci; // dwdot[OH]/d[H2O2]
  J[516] += dqdci; // dwdot[H2O]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT

  // reaction 48: CH + H <=> C + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[9];
  k_f = 165000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[8];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[8] + g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[9]) + (h_RT[0] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // H2
  wdot[1] -= q; // H
  wdot[8] += q; // C
  wdot[9] -= q; // CH
  // d()/d[H2]
  dqdci = -k_r * sc[8];
  J[0] += dqdci; // dwdot[H2]/d[H2]
  J[1] -= dqdci; // dwdot[H]/d[H2]
  J[8] += dqdci; // dwdot[C]/d[H2]
  J[9] -= dqdci; // dwdot[CH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[9];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[81] += dqdci; // dwdot[C]/d[H]
  J[82] -= dqdci; // dwdot[CH]/d[H]
  // d()/d[C]
  dqdci = -k_r * sc[0];
  J[584] += dqdci; // dwdot[H2]/d[C]
  J[585] -= dqdci; // dwdot[H]/d[C]
  J[592] += dqdci; // dwdot[C]/d[C]
  J[593] -= dqdci; // dwdot[CH]/d[C]
  // d()/d[CH]
  dqdci = +k_f * sc[1];
  J[657] += dqdci; // dwdot[H2]/d[CH]
  J[658] -= dqdci; // dwdot[H]/d[CH]
  J[665] += dqdci; // dwdot[C]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5264] += dqdT; // dwdot[C]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT

  // reaction 50: CH2(S) + H <=> CH + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[9];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[9] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[11]) + (h_RT[0] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[9] += q;  // CH
  wdot[11] -= q; // CH2(S)
  // d()/d[H2]
  dqdci = -k_r * sc[9];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[9] += dqdci;  // dwdot[CH]/d[H2]
  J[11] -= dqdci; // dwdot[CH2(S)]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[11];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[82] += dqdci; // dwdot[CH]/d[H]
  J[84] -= dqdci; // dwdot[CH2(S)]/d[H]
  // d()/d[CH]
  dqdci = -k_r * sc[0];
  J[657] += dqdci; // dwdot[H2]/d[CH]
  J[658] -= dqdci; // dwdot[H]/d[CH]
  J[666] += dqdci; // dwdot[CH]/d[CH]
  J[668] -= dqdci; // dwdot[CH2(S)]/d[CH]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[1];
  J[803] += dqdci; // dwdot[H2]/d[CH2(S)]
  J[804] -= dqdci; // dwdot[H]/d[CH2(S)]
  J[812] += dqdci; // dwdot[CH]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5265] += dqdT; // dwdot[CH]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 52: CH4 + H <=> CH3 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[13];
  k_f = 660 * exp(1.62 * logT - (5454.86865732316) * invT);
  dlnkfdT = 1.62 * invT + (5454.86865732316) * invT2;
  // reverse
  phi_r = sc[0] * sc[12];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[13]) + (h_RT[0] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[12] += q; // CH3
  wdot[13] -= q; // CH4
  // d()/d[H2]
  dqdci = -k_r * sc[12];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[12] += dqdci; // dwdot[CH3]/d[H2]
  J[13] -= dqdci; // dwdot[CH4]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[13];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[85] += dqdci; // dwdot[CH3]/d[H]
  J[86] -= dqdci; // dwdot[CH4]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[0];
  J[876] += dqdci; // dwdot[H2]/d[CH3]
  J[877] -= dqdci; // dwdot[H]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[889] -= dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[1];
  J[949] += dqdci; // dwdot[H2]/d[CH4]
  J[950] -= dqdci; // dwdot[H]/d[CH4]
  J[961] += dqdci; // dwdot[CH3]/d[CH4]
  J[962] -= dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5269] -= dqdT; // dwdot[CH4]/dT

  // reaction 54: H + HCO <=> CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[16];
  k_f = 73400000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[14];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[16]) + (h_RT[0] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[H2]
  dqdci = -k_r * sc[14];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[14] += dqdci; // dwdot[CO]/d[H2]
  J[16] -= dqdci; // dwdot[HCO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[16];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[87] += dqdci; // dwdot[CO]/d[H]
  J[89] -= dqdci; // dwdot[HCO]/d[H]
  // d()/d[CO]
  dqdci = -k_r * sc[0];
  J[1022] += dqdci; // dwdot[H2]/d[CO]
  J[1023] -= dqdci; // dwdot[H]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[1];
  J[1168] += dqdci; // dwdot[H2]/d[HCO]
  J[1169] -= dqdci; // dwdot[H]/d[HCO]
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT

  // reaction 57: CH2O + H <=> H2 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 57.4 * exp(1.9 * logT - (1379.82009763654) * invT);
  dlnkfdT = 1.9 * invT + (1379.82009763654) * invT2;
  // reverse
  phi_r = sc[0] * sc[16];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[0] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[H2]
  dqdci = -k_r * sc[16];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[16] += dqdci; // dwdot[HCO]/d[H2]
  J[17] -= dqdci; // dwdot[CH2O]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[17];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[89] += dqdci; // dwdot[HCO]/d[H]
  J[90] -= dqdci; // dwdot[CH2O]/d[H]
  // d()/d[HCO]
  dqdci = -k_r * sc[0];
  J[1168] += dqdci; // dwdot[H2]/d[HCO]
  J[1169] -= dqdci; // dwdot[H]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[1];
  J[1241] += dqdci; // dwdot[H2]/d[CH2O]
  J[1242] -= dqdci; // dwdot[H]/d[CH2O]
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT

  // reaction 59: CH2OH + H <=> CH2O + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[18];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[17];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[18]) + (h_RT[0] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[17] += q; // CH2O
  wdot[18] -= q; // CH2OH
  // d()/d[H2]
  dqdci = -k_r * sc[17];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[17] += dqdci; // dwdot[CH2O]/d[H2]
  J[18] -= dqdci; // dwdot[CH2OH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[18];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[90] += dqdci; // dwdot[CH2O]/d[H]
  J[91] -= dqdci; // dwdot[CH2OH]/d[H]
  // d()/d[CH2O]
  dqdci = -k_r * sc[0];
  J[1241] += dqdci; // dwdot[H2]/d[CH2O]
  J[1242] -= dqdci; // dwdot[H]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1259] -= dqdci; // dwdot[CH2OH]/d[CH2O]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[1];
  J[1314] += dqdci; // dwdot[H2]/d[CH2OH]
  J[1315] -= dqdci; // dwdot[H]/d[CH2OH]
  J[1331] += dqdci; // dwdot[CH2O]/d[CH2OH]
  J[1332] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5274] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 60: CH2OH + H <=> CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[18];
  k_f = 165000 * exp(0.65 * logT - (-142.91353308854) * invT);
  dlnkfdT = 0.65 * invT + (-142.91353308854) * invT2;
  // reverse
  phi_r = sc[4] * sc[12];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[12] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[18]) + (h_RT[4] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[12] += q; // CH3
  wdot[18] -= q; // CH2OH
  // d()/d[H]
  dqdci = +k_f * sc[18];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[77] += dqdci; // dwdot[OH]/d[H]
  J[85] += dqdci; // dwdot[CH3]/d[H]
  J[91] -= dqdci; // dwdot[CH2OH]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[293] -= dqdci; // dwdot[H]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[304] += dqdci; // dwdot[CH3]/d[OH]
  J[310] -= dqdci; // dwdot[CH2OH]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[4];
  J[877] -= dqdci; // dwdot[H]/d[CH3]
  J[880] += dqdci; // dwdot[OH]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[894] -= dqdci; // dwdot[CH2OH]/d[CH3]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[1];
  J[1315] -= dqdci; // dwdot[H]/d[CH2OH]
  J[1318] += dqdci; // dwdot[OH]/d[CH2OH]
  J[1326] += dqdci; // dwdot[CH3]/d[CH2OH]
  J[1332] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5274] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 61: CH2OH + H <=> CH2(S) + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[18];
  k_f = 32800000 * exp(-0.09 * logT - (306.962166140879) * invT);
  dlnkfdT = -0.09 * invT + (306.962166140879) * invT2;
  // reverse
  phi_r = sc[5] * sc[11];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[11] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[18]) + (h_RT[5] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2O
  wdot[11] += q; // CH2(S)
  wdot[18] -= q; // CH2OH
  // d()/d[H]
  dqdci = +k_f * sc[18];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[78] += dqdci; // dwdot[H2O]/d[H]
  J[84] += dqdci; // dwdot[CH2(S)]/d[H]
  J[91] -= dqdci; // dwdot[CH2OH]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[366] -= dqdci; // dwdot[H]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[376] += dqdci; // dwdot[CH2(S)]/d[H2O]
  J[383] -= dqdci; // dwdot[CH2OH]/d[H2O]
  // d()/d[CH2(S)]
  dqdci = -k_r * sc[5];
  J[804] -= dqdci; // dwdot[H]/d[CH2(S)]
  J[808] += dqdci; // dwdot[H2O]/d[CH2(S)]
  J[814] += dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[821] -= dqdci; // dwdot[CH2OH]/d[CH2(S)]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[1];
  J[1315] -= dqdci; // dwdot[H]/d[CH2OH]
  J[1319] += dqdci; // dwdot[H2O]/d[CH2OH]
  J[1325] += dqdci; // dwdot[CH2(S)]/d[CH2OH]
  J[1332] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5267] += dqdT; // dwdot[CH2(S)]/dT
  J[5274] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 63: CH3O + H <=> CH2OH + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 41.5 * exp(1.63 * logT - (968.188865008281) * invT);
  dlnkfdT = 1.63 * invT + (968.188865008281) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(g_RT[1] - g_RT[1] - g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // CH2OH
  wdot[19] -= q; // CH3O
  // d()/d[H]
  dqdci = +k_f * sc[19] - k_r * sc[18];
  J[91] += dqdci; // dwdot[CH2OH]/d[H]
  J[92] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[1];
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1333] -= dqdci; // dwdot[CH3O]/d[CH2OH]
  // d()/d[CH3O]
  dqdci = +k_f * sc[1];
  J[1405] += dqdci; // dwdot[CH2OH]/d[CH3O]
  J[1406] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5275] -= dqdT; // dwdot[CH3O]/dT

  // reaction 64: CH3O + H <=> CH2O + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[17];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[17] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[0] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[17] += q; // CH2O
  wdot[19] -= q; // CH3O
  // d()/d[H2]
  dqdci = -k_r * sc[17];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[17] += dqdci; // dwdot[CH2O]/d[H2]
  J[19] -= dqdci; // dwdot[CH3O]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[90] += dqdci; // dwdot[CH2O]/d[H]
  J[92] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[CH2O]
  dqdci = -k_r * sc[0];
  J[1241] += dqdci; // dwdot[H2]/d[CH2O]
  J[1242] -= dqdci; // dwdot[H]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1260] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[1];
  J[1387] += dqdci; // dwdot[H2]/d[CH3O]
  J[1388] -= dqdci; // dwdot[H]/d[CH3O]
  J[1404] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[1406] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5275] -= dqdT; // dwdot[CH3O]/dT

  // reaction 65: CH3O + H <=> CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 1500000 * exp(0.5 * logT - (-55.3538332385192) * invT);
  dlnkfdT = 0.5 * invT + (-55.3538332385192) * invT2;
  // reverse
  phi_r = sc[4] * sc[12];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[12] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[4] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[12] += q; // CH3
  wdot[19] -= q; // CH3O
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[77] += dqdci; // dwdot[OH]/d[H]
  J[85] += dqdci; // dwdot[CH3]/d[H]
  J[92] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[293] -= dqdci; // dwdot[H]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[304] += dqdci; // dwdot[CH3]/d[OH]
  J[311] -= dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[4];
  J[877] -= dqdci; // dwdot[H]/d[CH3]
  J[880] += dqdci; // dwdot[OH]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[895] -= dqdci; // dwdot[CH3O]/d[CH3]
  // d()/d[CH3O]
  dqdci = +k_f * sc[1];
  J[1388] -= dqdci; // dwdot[H]/d[CH3O]
  J[1391] += dqdci; // dwdot[OH]/d[CH3O]
  J[1399] += dqdci; // dwdot[CH3]/d[CH3O]
  J[1406] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5275] -= dqdT; // dwdot[CH3O]/dT

  // reaction 66: CH3O + H <=> CH2(S) + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 262000000 * exp(-0.23 * logT - (538.44183241105) * invT);
  dlnkfdT = -0.23 * invT + (538.44183241105) * invT2;
  // reverse
  phi_r = sc[5] * sc[11];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[11] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[5] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2O
  wdot[11] += q; // CH2(S)
  wdot[19] -= q; // CH3O
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[78] += dqdci; // dwdot[H2O]/d[H]
  J[84] += dqdci; // dwdot[CH2(S)]/d[H]
  J[92] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[366] -= dqdci; // dwdot[H]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[376] += dqdci; // dwdot[CH2(S)]/d[H2O]
  J[384] -= dqdci; // dwdot[CH3O]/d[H2O]
  // d()/d[CH2(S)]
  dqdci = -k_r * sc[5];
  J[804] -= dqdci; // dwdot[H]/d[CH2(S)]
  J[808] += dqdci; // dwdot[H2O]/d[CH2(S)]
  J[814] += dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[822] -= dqdci; // dwdot[CH3O]/d[CH2(S)]
  // d()/d[CH3O]
  dqdci = +k_f * sc[1];
  J[1388] -= dqdci; // dwdot[H]/d[CH3O]
  J[1392] += dqdci; // dwdot[H2O]/d[CH3O]
  J[1398] += dqdci; // dwdot[CH2(S)]/d[CH3O]
  J[1406] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5267] += dqdT; // dwdot[CH2(S)]/dT
  J[5275] -= dqdT; // dwdot[CH3O]/dT

  // reaction 67: CH3OH + H <=> CH2OH + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[20];
  k_f = 17 * exp(2.1 * logT - (2450.66516246898) * invT);
  dlnkfdT = 2.1 * invT + (2450.66516246898) * invT2;
  // reverse
  phi_r = sc[0] * sc[18];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[20]) + (h_RT[0] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  // d()/d[H2]
  dqdci = -k_r * sc[18];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[18] += dqdci; // dwdot[CH2OH]/d[H2]
  J[20] -= dqdci; // dwdot[CH3OH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[91] += dqdci; // dwdot[CH2OH]/d[H]
  J[93] -= dqdci; // dwdot[CH3OH]/d[H]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[0];
  J[1314] += dqdci; // dwdot[H2]/d[CH2OH]
  J[1315] -= dqdci; // dwdot[H]/d[CH2OH]
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1334] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[1];
  J[1460] += dqdci; // dwdot[H2]/d[CH3OH]
  J[1461] -= dqdci; // dwdot[H]/d[CH3OH]
  J[1478] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 68: CH3OH + H <=> CH3O + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[20];
  k_f = 4.2 * exp(2.1 * logT - (2450.66516246898) * invT);
  dlnkfdT = 2.1 * invT + (2450.66516246898) * invT2;
  // reverse
  phi_r = sc[0] * sc[19];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[20]) + (h_RT[0] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  // d()/d[H2]
  dqdci = -k_r * sc[19];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[19] += dqdci; // dwdot[CH3O]/d[H2]
  J[20] -= dqdci; // dwdot[CH3OH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[92] += dqdci; // dwdot[CH3O]/d[H]
  J[93] -= dqdci; // dwdot[CH3OH]/d[H]
  // d()/d[CH3O]
  dqdci = -k_r * sc[0];
  J[1387] += dqdci; // dwdot[H2]/d[CH3O]
  J[1388] -= dqdci; // dwdot[H]/d[CH3O]
  J[1406] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[1407] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[1];
  J[1460] += dqdci; // dwdot[H2]/d[CH3OH]
  J[1461] -= dqdci; // dwdot[H]/d[CH3OH]
  J[1479] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 72: C2H3 + H <=> C2H2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[23];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[22];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[22] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[23]) + (h_RT[0] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[22] += q; // C2H2
  wdot[23] -= q; // C2H3
  // d()/d[H2]
  dqdci = -k_r * sc[22];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[22] += dqdci; // dwdot[C2H2]/d[H2]
  J[23] -= dqdci; // dwdot[C2H3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[23];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[95] += dqdci; // dwdot[C2H2]/d[H]
  J[96] -= dqdci; // dwdot[C2H3]/d[H]
  // d()/d[C2H2]
  dqdci = -k_r * sc[0];
  J[1606] += dqdci; // dwdot[H2]/d[C2H2]
  J[1607] -= dqdci; // dwdot[H]/d[C2H2]
  J[1628] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[1629] -= dqdci; // dwdot[C2H3]/d[C2H2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[1];
  J[1679] += dqdci; // dwdot[H2]/d[C2H3]
  J[1680] -= dqdci; // dwdot[H]/d[C2H3]
  J[1701] += dqdci; // dwdot[C2H2]/d[C2H3]
  J[1702] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT

  // reaction 74: C2H4 + H <=> C2H3 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[24];
  k_f = 1.325 * exp(2.53 * logT - (6159.37198944977) * invT);
  dlnkfdT = 2.53 * invT + (6159.37198944977) * invT2;
  // reverse
  phi_r = sc[0] * sc[23];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[24]) + (h_RT[0] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[23] += q; // C2H3
  wdot[24] -= q; // C2H4
  // d()/d[H2]
  dqdci = -k_r * sc[23];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[23] += dqdci; // dwdot[C2H3]/d[H2]
  J[24] -= dqdci; // dwdot[C2H4]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[24];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[96] += dqdci; // dwdot[C2H3]/d[H]
  J[97] -= dqdci; // dwdot[C2H4]/d[H]
  // d()/d[C2H3]
  dqdci = -k_r * sc[0];
  J[1679] += dqdci; // dwdot[H2]/d[C2H3]
  J[1680] -= dqdci; // dwdot[H]/d[C2H3]
  J[1702] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[1703] -= dqdci; // dwdot[C2H4]/d[C2H3]
  // d()/d[C2H4]
  dqdci = +k_f * sc[1];
  J[1752] += dqdci; // dwdot[H2]/d[C2H4]
  J[1753] -= dqdci; // dwdot[H]/d[C2H4]
  J[1775] += dqdci; // dwdot[C2H3]/d[C2H4]
  J[1776] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5279] += dqdT; // dwdot[C2H3]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT

  // reaction 76: C2H5 + H <=> C2H4 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[25];
  k_f = 2000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[24];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[24] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[25]) + (h_RT[0] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[24] += q; // C2H4
  wdot[25] -= q; // C2H5
  // d()/d[H2]
  dqdci = -k_r * sc[24];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[24] += dqdci; // dwdot[C2H4]/d[H2]
  J[25] -= dqdci; // dwdot[C2H5]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[25];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[97] += dqdci; // dwdot[C2H4]/d[H]
  J[98] -= dqdci; // dwdot[C2H5]/d[H]
  // d()/d[C2H4]
  dqdci = -k_r * sc[0];
  J[1752] += dqdci; // dwdot[H2]/d[C2H4]
  J[1753] -= dqdci; // dwdot[H]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[1777] -= dqdci; // dwdot[C2H5]/d[C2H4]
  // d()/d[C2H5]
  dqdci = +k_f * sc[1];
  J[1825] += dqdci; // dwdot[H2]/d[C2H5]
  J[1826] -= dqdci; // dwdot[H]/d[C2H5]
  J[1849] += dqdci; // dwdot[C2H4]/d[C2H5]
  J[1850] -= dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT
  J[5281] -= dqdT; // dwdot[C2H5]/dT

  // reaction 77: C2H6 + H <=> C2H5 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[26];
  k_f = 115 * exp(1.9 * logT - (3789.22149350954) * invT);
  dlnkfdT = 1.9 * invT + (3789.22149350954) * invT2;
  // reverse
  phi_r = sc[0] * sc[25];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[26]) + (h_RT[0] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  // d()/d[H2]
  dqdci = -k_r * sc[25];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[25] += dqdci; // dwdot[C2H5]/d[H2]
  J[26] -= dqdci; // dwdot[C2H6]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[26];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[98] += dqdci; // dwdot[C2H5]/d[H]
  J[99] -= dqdci; // dwdot[C2H6]/d[H]
  // d()/d[C2H5]
  dqdci = -k_r * sc[0];
  J[1825] += dqdci; // dwdot[H2]/d[C2H5]
  J[1826] -= dqdci; // dwdot[H]/d[C2H5]
  J[1850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[1];
  J[1898] += dqdci; // dwdot[H2]/d[C2H6]
  J[1899] -= dqdci; // dwdot[H]/d[C2H6]
  J[1923] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1924] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5282] -= dqdT; // dwdot[C2H6]/dT

  // reaction 78: H + HCCO <=> CH2(S) + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[27];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[11] * sc[14];
  Kc = exp(g_RT[1] - g_RT[11] - g_RT[14] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[27]) + (h_RT[11] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[11] += q; // CH2(S)
  wdot[14] += q; // CO
  wdot[27] -= q; // HCCO
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[84] += dqdci;  // dwdot[CH2(S)]/d[H]
  J[87] += dqdci;  // dwdot[CO]/d[H]
  J[100] -= dqdci; // dwdot[HCCO]/d[H]
  // d()/d[CH2(S)]
  dqdci = -k_r * sc[14];
  J[804] -= dqdci; // dwdot[H]/d[CH2(S)]
  J[814] += dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[817] += dqdci; // dwdot[CO]/d[CH2(S)]
  J[830] -= dqdci; // dwdot[HCCO]/d[CH2(S)]
  // d()/d[CO]
  dqdci = -k_r * sc[11];
  J[1023] -= dqdci; // dwdot[H]/d[CO]
  J[1033] += dqdci; // dwdot[CH2(S)]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1049] -= dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[1];
  J[1972] -= dqdci; // dwdot[H]/d[HCCO]
  J[1982] += dqdci; // dwdot[CH2(S)]/d[HCCO]
  J[1985] += dqdci; // dwdot[CO]/d[HCCO]
  J[1998] -= dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5267] += dqdT; // dwdot[CH2(S)]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5283] -= dqdT; // dwdot[HCCO]/dT

  // reaction 79: CH2CO + H <=> H2 + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[28];
  k_f = 50000000 * exp(-(4025.73332643776) * invT);
  dlnkfdT = (4025.73332643776) * invT2;
  // reverse
  phi_r = sc[0] * sc[27];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[27] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[28]) + (h_RT[0] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[27] += q; // HCCO
  wdot[28] -= q; // CH2CO
  // d()/d[H2]
  dqdci = -k_r * sc[27];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[27] += dqdci; // dwdot[HCCO]/d[H2]
  J[28] -= dqdci; // dwdot[CH2CO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[28];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[100] += dqdci; // dwdot[HCCO]/d[H]
  J[101] -= dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[HCCO]
  dqdci = -k_r * sc[0];
  J[1971] += dqdci; // dwdot[H2]/d[HCCO]
  J[1972] -= dqdci; // dwdot[H]/d[HCCO]
  J[1998] += dqdci; // dwdot[HCCO]/d[HCCO]
  J[1999] -= dqdci; // dwdot[CH2CO]/d[HCCO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[1];
  J[2044] += dqdci; // dwdot[H2]/d[CH2CO]
  J[2045] -= dqdci; // dwdot[H]/d[CH2CO]
  J[2071] += dqdci; // dwdot[HCCO]/d[CH2CO]
  J[2072] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5283] += dqdT; // dwdot[HCCO]/dT
  J[5284] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 80: CH2CO + H <=> CH3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[28];
  k_f = 11300000 * exp(-(1725.02673037858) * invT);
  dlnkfdT = (1725.02673037858) * invT2;
  // reverse
  phi_r = sc[12] * sc[14];
  Kc = exp(g_RT[1] - g_RT[12] - g_RT[14] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[28]) + (h_RT[12] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[12] += q; // CH3
  wdot[14] += q; // CO
  wdot[28] -= q; // CH2CO
  // d()/d[H]
  dqdci = +k_f * sc[28];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[85] += dqdci;  // dwdot[CH3]/d[H]
  J[87] += dqdci;  // dwdot[CO]/d[H]
  J[101] -= dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[14];
  J[877] -= dqdci; // dwdot[H]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[890] += dqdci; // dwdot[CO]/d[CH3]
  J[904] -= dqdci; // dwdot[CH2CO]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[12];
  J[1023] -= dqdci; // dwdot[H]/d[CO]
  J[1034] += dqdci; // dwdot[CH3]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1050] -= dqdci; // dwdot[CH2CO]/d[CO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[1];
  J[2045] -= dqdci; // dwdot[H]/d[CH2CO]
  J[2056] += dqdci; // dwdot[CH3]/d[CH2CO]
  J[2058] += dqdci; // dwdot[CO]/d[CH2CO]
  J[2072] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5284] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 81: H + HCCOH <=> CH2CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[29];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[28];
  Kc = exp(g_RT[1] - g_RT[1] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[29]) + (h_RT[1] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[28] += q; // CH2CO
  wdot[29] -= q; // HCCOH
  // d()/d[H]
  dqdci = +k_f * sc[29] - k_r * sc[28];
  J[101] += dqdci; // dwdot[CH2CO]/d[H]
  J[102] -= dqdci; // dwdot[HCCOH]/d[H]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[1];
  J[2072] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[2073] -= dqdci; // dwdot[HCCOH]/d[CH2CO]
  // d()/d[HCCOH]
  dqdci = +k_f * sc[1];
  J[2145] += dqdci; // dwdot[CH2CO]/d[HCCOH]
  J[2146] -= dqdci; // dwdot[HCCOH]/d[HCCOH]
  // d()/dT
  J[5284] += dqdT; // dwdot[CH2CO]/dT
  J[5285] -= dqdT; // dwdot[HCCOH]/dT

  // reaction 83: H2 + OH <=> H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 216 * exp(1.51 * logT - (1726.03316371019) * invT);
  dlnkfdT = 1.51 * invT + (1726.03316371019) * invT2;
  // reverse
  phi_r = sc[1] * sc[5];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[4]) + (h_RT[1] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // H2
  wdot[1] += q; // H
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  // d()/d[H2]
  dqdci = +k_f * sc[4];
  J[0] -= dqdci; // dwdot[H2]/d[H2]
  J[1] += dqdci; // dwdot[H]/d[H2]
  J[4] -= dqdci; // dwdot[OH]/d[H2]
  J[5] += dqdci; // dwdot[H2O]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[5];
  J[73] -= dqdci; // dwdot[H2]/d[H]
  J[74] += dqdci; // dwdot[H]/d[H]
  J[77] -= dqdci; // dwdot[OH]/d[H]
  J[78] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[0];
  J[292] -= dqdci; // dwdot[H2]/d[OH]
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[1];
  J[365] -= dqdci; // dwdot[H2]/d[H2O]
  J[366] += dqdci; // dwdot[H]/d[H2O]
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT

  // reaction 85: 2 OH <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 0.0357 * exp(2.4 * logT - (-1061.78716484796) * invT);
  dlnkfdT = 2.4 * invT + (-1061.78716484796) * invT2;
  // reverse
  phi_r = sc[2] * sc[5];
  Kc = exp(-g_RT[2] + 2.000000 * g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[2] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;     // O
  wdot[4] -= 2 * q; // OH
  wdot[5] += q;     // H2O
  // d()/d[O]
  dqdci = -k_r * sc[5];
  J[148] += dqdci;      // dwdot[O]/d[O]
  J[150] += -2 * dqdci; // dwdot[OH]/d[O]
  J[151] += dqdci;      // dwdot[H2O]/d[O]
  // d()/d[OH]
  dqdci = +k_f * 2.000000 * sc[4];
  J[294] += dqdci;      // dwdot[O]/d[OH]
  J[296] += -2 * dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci;      // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[2];
  J[367] += dqdci;      // dwdot[O]/d[H2O]
  J[369] += -2 * dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci;      // dwdot[H2O]/d[H2O]
  // d()/dT
  J[5258] += dqdT;      // dwdot[O]/dT
  J[5260] += -2 * dqdT; // dwdot[OH]/dT
  J[5261] += dqdT;      // dwdot[H2O]/dT

  // reaction 86: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[6];
  k_f = 14500000 * exp(-(-251.60833290236) * invT);
  dlnkfdT = (-251.60833290236) * invT2;
  // reverse
  phi_r = sc[3] * sc[5];
  Kc = exp(-g_RT[3] + g_RT[4] - g_RT[5] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[6]) + (h_RT[3] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // O2
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] -= q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[5];
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[223] -= dqdci; // dwdot[OH]/d[O2]
  J[224] += dqdci; // dwdot[H2O]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[OH]
  dqdci = +k_f * sc[6];
  J[295] += dqdci; // dwdot[O2]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[298] -= dqdci; // dwdot[HO2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[368] += dqdci; // dwdot[O2]/d[H2O]
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[371] -= dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[4];
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[442] -= dqdci; // dwdot[OH]/d[HO2]
  J[443] += dqdci; // dwdot[H2O]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT

  // reaction 87: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 2000000 * exp(-(214.873516298615) * invT);
  dlnkfdT = (214.873516298615) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[7]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[298] += dqdci; // dwdot[HO2]/d[OH]
  J[299] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[6];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[371] += dqdci; // dwdot[HO2]/d[H2O]
  J[372] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[442] -= dqdci; // dwdot[OH]/d[HO2]
  J[443] += dqdci; // dwdot[H2O]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[4];
  J[515] -= dqdci; // dwdot[OH]/d[H2O2]
  J[516] += dqdci; // dwdot[H2O]/d[H2O2]
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT

  // reaction 88: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 1700000000000 * exp(-(14799.6021413168) * invT);
  dlnkfdT = (14799.6021413168) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[7]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[298] += dqdci; // dwdot[HO2]/d[OH]
  J[299] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[6];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[371] += dqdci; // dwdot[HO2]/d[H2O]
  J[372] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[442] -= dqdci; // dwdot[OH]/d[HO2]
  J[443] += dqdci; // dwdot[H2O]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[4];
  J[515] -= dqdci; // dwdot[OH]/d[H2O2]
  J[516] += dqdci; // dwdot[H2O]/d[H2O2]
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT

  // reaction 89: C + OH <=> CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[8];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[8] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[8]) + (h_RT[1] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[8] -= q;  // C
  wdot[14] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[14];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[77] -= dqdci; // dwdot[OH]/d[H]
  J[81] -= dqdci; // dwdot[C]/d[H]
  J[87] += dqdci; // dwdot[CO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[8];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[300] -= dqdci; // dwdot[C]/d[OH]
  J[306] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[C]
  dqdci = +k_f * sc[4];
  J[585] += dqdci; // dwdot[H]/d[C]
  J[588] -= dqdci; // dwdot[OH]/d[C]
  J[592] -= dqdci; // dwdot[C]/d[C]
  J[598] += dqdci; // dwdot[CO]/d[C]
  // d()/d[CO]
  dqdci = -k_r * sc[1];
  J[1023] += dqdci; // dwdot[H]/d[CO]
  J[1026] -= dqdci; // dwdot[OH]/d[CO]
  J[1030] -= dqdci; // dwdot[C]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5264] -= dqdT; // dwdot[C]/dT
  J[5270] += dqdT; // dwdot[CO]/dT

  // reaction 90: CH + OH <=> H + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[16];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[9] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[9]) + (h_RT[1] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[9] -= q;  // CH
  wdot[16] += q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[16];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[77] -= dqdci; // dwdot[OH]/d[H]
  J[82] -= dqdci; // dwdot[CH]/d[H]
  J[89] += dqdci; // dwdot[HCO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[9];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[301] -= dqdci; // dwdot[CH]/d[OH]
  J[308] += dqdci; // dwdot[HCO]/d[OH]
  // d()/d[CH]
  dqdci = +k_f * sc[4];
  J[658] += dqdci; // dwdot[H]/d[CH]
  J[661] -= dqdci; // dwdot[OH]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[673] += dqdci; // dwdot[HCO]/d[CH]
  // d()/d[HCO]
  dqdci = -k_r * sc[1];
  J[1169] += dqdci; // dwdot[H]/d[HCO]
  J[1172] -= dqdci; // dwdot[OH]/d[HCO]
  J[1177] -= dqdci; // dwdot[CH]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT

  // reaction 91: CH2 + OH <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[17];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[10] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[1] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[10] -= q; // CH2
  wdot[17] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[17];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[77] -= dqdci; // dwdot[OH]/d[H]
  J[83] -= dqdci; // dwdot[CH2]/d[H]
  J[90] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[302] -= dqdci; // dwdot[CH2]/d[OH]
  J[309] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH2]
  dqdci = +k_f * sc[4];
  J[731] += dqdci; // dwdot[H]/d[CH2]
  J[734] -= dqdci; // dwdot[OH]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[747] += dqdci; // dwdot[CH2O]/d[CH2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[1242] += dqdci; // dwdot[H]/d[CH2O]
  J[1245] -= dqdci; // dwdot[OH]/d[CH2O]
  J[1251] -= dqdci; // dwdot[CH2]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 92: CH2 + OH <=> CH + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 11.3 * exp(2 * logT - (1509.64999741416) * invT);
  dlnkfdT = 2 * invT + (1509.64999741416) * invT2;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[9] += q;  // CH
  wdot[10] -= q; // CH2
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[301] += dqdci; // dwdot[CH]/d[OH]
  J[302] -= dqdci; // dwdot[CH2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[9];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[374] += dqdci; // dwdot[CH]/d[H2O]
  J[375] -= dqdci; // dwdot[CH2]/d[H2O]
  // d()/d[CH]
  dqdci = -k_r * sc[5];
  J[661] -= dqdci; // dwdot[OH]/d[CH]
  J[662] += dqdci; // dwdot[H2O]/d[CH]
  J[666] += dqdci; // dwdot[CH]/d[CH]
  J[667] -= dqdci; // dwdot[CH2]/d[CH]
  // d()/d[CH2]
  dqdci = +k_f * sc[4];
  J[734] -= dqdci; // dwdot[OH]/d[CH2]
  J[735] += dqdci; // dwdot[H2O]/d[CH2]
  J[739] += dqdci; // dwdot[CH]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5265] += dqdT; // dwdot[CH]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT

  // reaction 93: CH2(S) + OH <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[11];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[17];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[11] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[11]) + (h_RT[1] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[11] -= q; // CH2(S)
  wdot[17] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[17];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[77] -= dqdci; // dwdot[OH]/d[H]
  J[84] -= dqdci; // dwdot[CH2(S)]/d[H]
  J[90] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[11];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[303] -= dqdci; // dwdot[CH2(S)]/d[OH]
  J[309] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[4];
  J[804] += dqdci; // dwdot[H]/d[CH2(S)]
  J[807] -= dqdci; // dwdot[OH]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[820] += dqdci; // dwdot[CH2O]/d[CH2(S)]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[1242] += dqdci; // dwdot[H]/d[CH2O]
  J[1245] -= dqdci; // dwdot[OH]/d[CH2O]
  J[1252] -= dqdci; // dwdot[CH2(S)]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 95: CH3 + OH <=> CH2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 56 * exp(1.6 * logT - (2727.43432866158) * invT);
  dlnkfdT = 1.6 * invT + (2727.43432866158) * invT2;
  // reverse
  phi_r = sc[5] * sc[10];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[10] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[5] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[10] += q; // CH2
  wdot[12] -= q; // CH3
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[302] += dqdci; // dwdot[CH2]/d[OH]
  J[304] -= dqdci; // dwdot[CH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[10];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[375] += dqdci; // dwdot[CH2]/d[H2O]
  J[377] -= dqdci; // dwdot[CH3]/d[H2O]
  // d()/d[CH2]
  dqdci = -k_r * sc[5];
  J[734] -= dqdci; // dwdot[OH]/d[CH2]
  J[735] += dqdci; // dwdot[H2O]/d[CH2]
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  J[742] -= dqdci; // dwdot[CH3]/d[CH2]
  // d()/d[CH3]
  dqdci = +k_f * sc[4];
  J[880] -= dqdci; // dwdot[OH]/d[CH3]
  J[881] += dqdci; // dwdot[H2O]/d[CH3]
  J[886] += dqdci; // dwdot[CH2]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT

  // reaction 96: CH3 + OH <=> CH2(S) + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 644000000000 * exp(-1.34 * logT - (713.058015445288) * invT);
  dlnkfdT = -1.34 * invT + (713.058015445288) * invT2;
  // reverse
  phi_r = sc[5] * sc[11];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[5] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[11] += q; // CH2(S)
  wdot[12] -= q; // CH3
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[303] += dqdci; // dwdot[CH2(S)]/d[OH]
  J[304] -= dqdci; // dwdot[CH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[376] += dqdci; // dwdot[CH2(S)]/d[H2O]
  J[377] -= dqdci; // dwdot[CH3]/d[H2O]
  // d()/d[CH2(S)]
  dqdci = -k_r * sc[5];
  J[807] -= dqdci; // dwdot[OH]/d[CH2(S)]
  J[808] += dqdci; // dwdot[H2O]/d[CH2(S)]
  J[814] += dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[815] -= dqdci; // dwdot[CH3]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = +k_f * sc[4];
  J[880] -= dqdci; // dwdot[OH]/d[CH3]
  J[881] += dqdci; // dwdot[H2O]/d[CH3]
  J[887] += dqdci; // dwdot[CH2(S)]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5267] += dqdT; // dwdot[CH2(S)]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT

  // reaction 97: CH4 + OH <=> CH3 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[13];
  k_f = 100 * exp(1.6 * logT - (1570.03599731073) * invT);
  dlnkfdT = 1.6 * invT + (1570.03599731073) * invT2;
  // reverse
  phi_r = sc[5] * sc[12];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[13]) + (h_RT[5] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[12] += q; // CH3
  wdot[13] -= q; // CH4
  // d()/d[OH]
  dqdci = +k_f * sc[13];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[304] += dqdci; // dwdot[CH3]/d[OH]
  J[305] -= dqdci; // dwdot[CH4]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[12];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[377] += dqdci; // dwdot[CH3]/d[H2O]
  J[378] -= dqdci; // dwdot[CH4]/d[H2O]
  // d()/d[CH3]
  dqdci = -k_r * sc[5];
  J[880] -= dqdci; // dwdot[OH]/d[CH3]
  J[881] += dqdci; // dwdot[H2O]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[889] -= dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[4];
  J[953] -= dqdci; // dwdot[OH]/d[CH4]
  J[954] += dqdci; // dwdot[H2O]/d[CH4]
  J[961] += dqdci; // dwdot[CH3]/d[CH4]
  J[962] -= dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5269] -= dqdT; // dwdot[CH4]/dT

  // reaction 98: CO + OH <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[14];
  k_f = 47.6 * exp(1.228 * logT - (35.2251666063304) * invT);
  dlnkfdT = 1.228 * invT + (35.2251666063304) * invT2;
  // reverse
  phi_r = sc[1] * sc[15];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[14]) + (h_RT[1] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[14] -= q; // CO
  wdot[15] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[15];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[77] -= dqdci; // dwdot[OH]/d[H]
  J[87] -= dqdci; // dwdot[CO]/d[H]
  J[88] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[14];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[306] -= dqdci; // dwdot[CO]/d[OH]
  J[307] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[CO]
  dqdci = +k_f * sc[4];
  J[1023] += dqdci; // dwdot[H]/d[CO]
  J[1026] -= dqdci; // dwdot[OH]/d[CO]
  J[1036] -= dqdci; // dwdot[CO]/d[CO]
  J[1037] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[1];
  J[1096] += dqdci; // dwdot[H]/d[CO2]
  J[1099] -= dqdci; // dwdot[OH]/d[CO2]
  J[1109] -= dqdci; // dwdot[CO]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5270] -= dqdT; // dwdot[CO]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT

  // reaction 99: HCO + OH <=> CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[16];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[14];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[16]) + (h_RT[5] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[OH]
  dqdci = +k_f * sc[16];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[306] += dqdci; // dwdot[CO]/d[OH]
  J[308] -= dqdci; // dwdot[HCO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[14];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[379] += dqdci; // dwdot[CO]/d[H2O]
  J[381] -= dqdci; // dwdot[HCO]/d[H2O]
  // d()/d[CO]
  dqdci = -k_r * sc[5];
  J[1026] -= dqdci; // dwdot[OH]/d[CO]
  J[1027] += dqdci; // dwdot[H2O]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[4];
  J[1172] -= dqdci; // dwdot[OH]/d[HCO]
  J[1173] += dqdci; // dwdot[H2O]/d[HCO]
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT

  // reaction 100: CH2O + OH <=> H2O + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[17];
  k_f = 3430 * exp(1.18 * logT - (-224.93784961471) * invT);
  dlnkfdT = 1.18 * invT + (-224.93784961471) * invT2;
  // reverse
  phi_r = sc[5] * sc[16];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[17]) + (h_RT[5] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[308] += dqdci; // dwdot[HCO]/d[OH]
  J[309] -= dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[16];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[381] += dqdci; // dwdot[HCO]/d[H2O]
  J[382] -= dqdci; // dwdot[CH2O]/d[H2O]
  // d()/d[HCO]
  dqdci = -k_r * sc[5];
  J[1172] -= dqdci; // dwdot[OH]/d[HCO]
  J[1173] += dqdci; // dwdot[H2O]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[4];
  J[1245] -= dqdci; // dwdot[OH]/d[CH2O]
  J[1246] += dqdci; // dwdot[H2O]/d[CH2O]
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT

  // reaction 101: CH2OH + OH <=> CH2O + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 5000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[17];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[5] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[17] += q; // CH2O
  wdot[18] -= q; // CH2OH
  // d()/d[OH]
  dqdci = +k_f * sc[18];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[309] += dqdci; // dwdot[CH2O]/d[OH]
  J[310] -= dqdci; // dwdot[CH2OH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[382] += dqdci; // dwdot[CH2O]/d[H2O]
  J[383] -= dqdci; // dwdot[CH2OH]/d[H2O]
  // d()/d[CH2O]
  dqdci = -k_r * sc[5];
  J[1245] -= dqdci; // dwdot[OH]/d[CH2O]
  J[1246] += dqdci; // dwdot[H2O]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1259] -= dqdci; // dwdot[CH2OH]/d[CH2O]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[4];
  J[1318] -= dqdci; // dwdot[OH]/d[CH2OH]
  J[1319] += dqdci; // dwdot[H2O]/d[CH2OH]
  J[1331] += dqdci; // dwdot[CH2O]/d[CH2OH]
  J[1332] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5274] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 102: CH3O + OH <=> CH2O + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[19];
  k_f = 5000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[17];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[17] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[19]) + (h_RT[5] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[17] += q; // CH2O
  wdot[19] -= q; // CH3O
  // d()/d[OH]
  dqdci = +k_f * sc[19];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[309] += dqdci; // dwdot[CH2O]/d[OH]
  J[311] -= dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[382] += dqdci; // dwdot[CH2O]/d[H2O]
  J[384] -= dqdci; // dwdot[CH3O]/d[H2O]
  // d()/d[CH2O]
  dqdci = -k_r * sc[5];
  J[1245] -= dqdci; // dwdot[OH]/d[CH2O]
  J[1246] += dqdci; // dwdot[H2O]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1260] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[4];
  J[1391] -= dqdci; // dwdot[OH]/d[CH3O]
  J[1392] += dqdci; // dwdot[H2O]/d[CH3O]
  J[1404] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[1406] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5275] -= dqdT; // dwdot[CH3O]/dT

  // reaction 103: CH3OH + OH <=> CH2OH + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[20];
  k_f = 1.44 * exp(2 * logT - (-422.701999275965) * invT);
  dlnkfdT = 2 * invT + (-422.701999275965) * invT2;
  // reverse
  phi_r = sc[5] * sc[18];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[20]) + (h_RT[5] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  // d()/d[OH]
  dqdci = +k_f * sc[20];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[310] += dqdci; // dwdot[CH2OH]/d[OH]
  J[312] -= dqdci; // dwdot[CH3OH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[18];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[383] += dqdci; // dwdot[CH2OH]/d[H2O]
  J[385] -= dqdci; // dwdot[CH3OH]/d[H2O]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[5];
  J[1318] -= dqdci; // dwdot[OH]/d[CH2OH]
  J[1319] += dqdci; // dwdot[H2O]/d[CH2OH]
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1334] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[4];
  J[1464] -= dqdci; // dwdot[OH]/d[CH3OH]
  J[1465] += dqdci; // dwdot[H2O]/d[CH3OH]
  J[1478] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 104: CH3OH + OH <=> CH3O + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[20];
  k_f = 6.3 * exp(2 * logT - (754.82499870708) * invT);
  dlnkfdT = 2 * invT + (754.82499870708) * invT2;
  // reverse
  phi_r = sc[5] * sc[19];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[20]) + (h_RT[5] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  // d()/d[OH]
  dqdci = +k_f * sc[20];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[311] += dqdci; // dwdot[CH3O]/d[OH]
  J[312] -= dqdci; // dwdot[CH3OH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[19];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[384] += dqdci; // dwdot[CH3O]/d[H2O]
  J[385] -= dqdci; // dwdot[CH3OH]/d[H2O]
  // d()/d[CH3O]
  dqdci = -k_r * sc[5];
  J[1391] -= dqdci; // dwdot[OH]/d[CH3O]
  J[1392] += dqdci; // dwdot[H2O]/d[CH3O]
  J[1406] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[1407] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[4];
  J[1464] -= dqdci; // dwdot[OH]/d[CH3OH]
  J[1465] += dqdci; // dwdot[H2O]/d[CH3OH]
  J[1479] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 105: C2H + OH <=> H + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[21];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[27];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[21] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[21]) + (h_RT[1] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[21] -= q; // C2H
  wdot[27] += q; // HCCO
  // d()/d[H]
  dqdci = -k_r * sc[27];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[94] -= dqdci;  // dwdot[C2H]/d[H]
  J[100] += dqdci; // dwdot[HCCO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[21];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[313] -= dqdci; // dwdot[C2H]/d[OH]
  J[319] += dqdci; // dwdot[HCCO]/d[OH]
  // d()/d[C2H]
  dqdci = +k_f * sc[4];
  J[1534] += dqdci; // dwdot[H]/d[C2H]
  J[1537] -= dqdci; // dwdot[OH]/d[C2H]
  J[1554] -= dqdci; // dwdot[C2H]/d[C2H]
  J[1560] += dqdci; // dwdot[HCCO]/d[C2H]
  // d()/d[HCCO]
  dqdci = -k_r * sc[1];
  J[1972] += dqdci; // dwdot[H]/d[HCCO]
  J[1975] -= dqdci; // dwdot[OH]/d[HCCO]
  J[1992] -= dqdci; // dwdot[C2H]/d[HCCO]
  J[1998] += dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5277] -= dqdT; // dwdot[C2H]/dT
  J[5283] += dqdT; // dwdot[HCCO]/dT

  // reaction 106: C2H2 + OH <=> CH2CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 2.18e-10 * exp(4.5 * logT - (-503.21666580472) * invT);
  dlnkfdT = 4.5 * invT + (-503.21666580472) * invT2;
  // reverse
  phi_r = sc[1] * sc[28];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[22] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[1] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[22] -= q; // C2H2
  wdot[28] += q; // CH2CO
  // d()/d[H]
  dqdci = -k_r * sc[28];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[95] -= dqdci;  // dwdot[C2H2]/d[H]
  J[101] += dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[314] -= dqdci; // dwdot[C2H2]/d[OH]
  J[320] += dqdci; // dwdot[CH2CO]/d[OH]
  // d()/d[C2H2]
  dqdci = +k_f * sc[4];
  J[1607] += dqdci; // dwdot[H]/d[C2H2]
  J[1610] -= dqdci; // dwdot[OH]/d[C2H2]
  J[1628] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[1634] += dqdci; // dwdot[CH2CO]/d[C2H2]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[1];
  J[2045] += dqdci; // dwdot[H]/d[CH2CO]
  J[2048] -= dqdci; // dwdot[OH]/d[CH2CO]
  J[2066] -= dqdci; // dwdot[C2H2]/d[CH2CO]
  J[2072] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5278] -= dqdT; // dwdot[C2H2]/dT
  J[5284] += dqdT; // dwdot[CH2CO]/dT

  // reaction 107: C2H2 + OH <=> H + HCCOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 0.504 * exp(2.3 * logT - (6793.42498836372) * invT);
  dlnkfdT = 2.3 * invT + (6793.42498836372) * invT2;
  // reverse
  phi_r = sc[1] * sc[29];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[22] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[1] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[22] -= q; // C2H2
  wdot[29] += q; // HCCOH
  // d()/d[H]
  dqdci = -k_r * sc[29];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[95] -= dqdci;  // dwdot[C2H2]/d[H]
  J[102] += dqdci; // dwdot[HCCOH]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[314] -= dqdci; // dwdot[C2H2]/d[OH]
  J[321] += dqdci; // dwdot[HCCOH]/d[OH]
  // d()/d[C2H2]
  dqdci = +k_f * sc[4];
  J[1607] += dqdci; // dwdot[H]/d[C2H2]
  J[1610] -= dqdci; // dwdot[OH]/d[C2H2]
  J[1628] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[1635] += dqdci; // dwdot[HCCOH]/d[C2H2]
  // d()/d[HCCOH]
  dqdci = -k_r * sc[1];
  J[2118] += dqdci; // dwdot[H]/d[HCCOH]
  J[2121] -= dqdci; // dwdot[OH]/d[HCCOH]
  J[2139] -= dqdci; // dwdot[C2H2]/d[HCCOH]
  J[2146] += dqdci; // dwdot[HCCOH]/d[HCCOH]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5278] -= dqdT; // dwdot[C2H2]/dT
  J[5285] += dqdT; // dwdot[HCCOH]/dT

  // reaction 108: C2H2 + OH <=> C2H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 33.7 * exp(2 * logT - (7045.03332126608) * invT);
  dlnkfdT = 2 * invT + (7045.03332126608) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[21] += q; // C2H
  wdot[22] -= q; // C2H2
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[313] += dqdci; // dwdot[C2H]/d[OH]
  J[314] -= dqdci; // dwdot[C2H2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[386] += dqdci; // dwdot[C2H]/d[H2O]
  J[387] -= dqdci; // dwdot[C2H2]/d[H2O]
  // d()/d[C2H]
  dqdci = -k_r * sc[5];
  J[1537] -= dqdci; // dwdot[OH]/d[C2H]
  J[1538] += dqdci; // dwdot[H2O]/d[C2H]
  J[1554] += dqdci; // dwdot[C2H]/d[C2H]
  J[1555] -= dqdci; // dwdot[C2H2]/d[C2H]
  // d()/d[C2H2]
  dqdci = +k_f * sc[4];
  J[1610] -= dqdci; // dwdot[OH]/d[C2H2]
  J[1611] += dqdci; // dwdot[H2O]/d[C2H2]
  J[1627] += dqdci; // dwdot[C2H]/d[C2H2]
  J[1628] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5277] += dqdT; // dwdot[C2H]/dT
  J[5278] -= dqdT; // dwdot[C2H2]/dT

  // reaction 109: C2H2 + OH <=> CH3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 4.83e-10 * exp(4 * logT - (-1006.43333160944) * invT);
  dlnkfdT = 4 * invT + (-1006.43333160944) * invT2;
  // reverse
  phi_r = sc[12] * sc[14];
  Kc = exp(g_RT[4] - g_RT[12] - g_RT[14] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[12] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[12] += q; // CH3
  wdot[14] += q; // CO
  wdot[22] -= q; // C2H2
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[304] += dqdci; // dwdot[CH3]/d[OH]
  J[306] += dqdci; // dwdot[CO]/d[OH]
  J[314] -= dqdci; // dwdot[C2H2]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[14];
  J[880] -= dqdci; // dwdot[OH]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[890] += dqdci; // dwdot[CO]/d[CH3]
  J[898] -= dqdci; // dwdot[C2H2]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[12];
  J[1026] -= dqdci; // dwdot[OH]/d[CO]
  J[1034] += dqdci; // dwdot[CH3]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1044] -= dqdci; // dwdot[C2H2]/d[CO]
  // d()/d[C2H2]
  dqdci = +k_f * sc[4];
  J[1610] -= dqdci; // dwdot[OH]/d[C2H2]
  J[1618] += dqdci; // dwdot[CH3]/d[C2H2]
  J[1620] += dqdci; // dwdot[CO]/d[C2H2]
  J[1628] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5278] -= dqdT; // dwdot[C2H2]/dT

  // reaction 110: C2H3 + OH <=> C2H2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[23];
  k_f = 5000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[22];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[22] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[23]) + (h_RT[5] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[22] += q; // C2H2
  wdot[23] -= q; // C2H3
  // d()/d[OH]
  dqdci = +k_f * sc[23];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[314] += dqdci; // dwdot[C2H2]/d[OH]
  J[315] -= dqdci; // dwdot[C2H3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[22];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[387] += dqdci; // dwdot[C2H2]/d[H2O]
  J[388] -= dqdci; // dwdot[C2H3]/d[H2O]
  // d()/d[C2H2]
  dqdci = -k_r * sc[5];
  J[1610] -= dqdci; // dwdot[OH]/d[C2H2]
  J[1611] += dqdci; // dwdot[H2O]/d[C2H2]
  J[1628] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[1629] -= dqdci; // dwdot[C2H3]/d[C2H2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[4];
  J[1683] -= dqdci; // dwdot[OH]/d[C2H3]
  J[1684] += dqdci; // dwdot[H2O]/d[C2H3]
  J[1701] += dqdci; // dwdot[C2H2]/d[C2H3]
  J[1702] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT

  // reaction 111: C2H4 + OH <=> C2H3 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[24];
  k_f = 3.6 * exp(2 * logT - (1258.0416645118) * invT);
  dlnkfdT = 2 * invT + (1258.0416645118) * invT2;
  // reverse
  phi_r = sc[5] * sc[23];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[24]) + (h_RT[5] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[23] += q; // C2H3
  wdot[24] -= q; // C2H4
  // d()/d[OH]
  dqdci = +k_f * sc[24];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[315] += dqdci; // dwdot[C2H3]/d[OH]
  J[316] -= dqdci; // dwdot[C2H4]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[388] += dqdci; // dwdot[C2H3]/d[H2O]
  J[389] -= dqdci; // dwdot[C2H4]/d[H2O]
  // d()/d[C2H3]
  dqdci = -k_r * sc[5];
  J[1683] -= dqdci; // dwdot[OH]/d[C2H3]
  J[1684] += dqdci; // dwdot[H2O]/d[C2H3]
  J[1702] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[1703] -= dqdci; // dwdot[C2H4]/d[C2H3]
  // d()/d[C2H4]
  dqdci = +k_f * sc[4];
  J[1756] -= dqdci; // dwdot[OH]/d[C2H4]
  J[1757] += dqdci; // dwdot[H2O]/d[C2H4]
  J[1775] += dqdci; // dwdot[C2H3]/d[C2H4]
  J[1776] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5279] += dqdT; // dwdot[C2H3]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT

  // reaction 112: C2H6 + OH <=> C2H5 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[26];
  k_f = 3.54 * exp(2.12 * logT - (437.798499250106) * invT);
  dlnkfdT = 2.12 * invT + (437.798499250106) * invT2;
  // reverse
  phi_r = sc[5] * sc[25];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[26]) + (h_RT[5] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  // d()/d[OH]
  dqdci = +k_f * sc[26];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[317] += dqdci; // dwdot[C2H5]/d[OH]
  J[318] -= dqdci; // dwdot[C2H6]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[25];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[390] += dqdci; // dwdot[C2H5]/d[H2O]
  J[391] -= dqdci; // dwdot[C2H6]/d[H2O]
  // d()/d[C2H5]
  dqdci = -k_r * sc[5];
  J[1829] -= dqdci; // dwdot[OH]/d[C2H5]
  J[1830] += dqdci; // dwdot[H2O]/d[C2H5]
  J[1850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[4];
  J[1902] -= dqdci; // dwdot[OH]/d[C2H6]
  J[1903] += dqdci; // dwdot[H2O]/d[C2H6]
  J[1923] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1924] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5282] -= dqdT; // dwdot[C2H6]/dT

  // reaction 113: CH2CO + OH <=> H2O + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[28];
  k_f = 7500000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[5] * sc[27];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[27] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[28]) + (h_RT[5] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[27] += q; // HCCO
  wdot[28] -= q; // CH2CO
  // d()/d[OH]
  dqdci = +k_f * sc[28];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[319] += dqdci; // dwdot[HCCO]/d[OH]
  J[320] -= dqdci; // dwdot[CH2CO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[27];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[392] += dqdci; // dwdot[HCCO]/d[H2O]
  J[393] -= dqdci; // dwdot[CH2CO]/d[H2O]
  // d()/d[HCCO]
  dqdci = -k_r * sc[5];
  J[1975] -= dqdci; // dwdot[OH]/d[HCCO]
  J[1976] += dqdci; // dwdot[H2O]/d[HCCO]
  J[1998] += dqdci; // dwdot[HCCO]/d[HCCO]
  J[1999] -= dqdci; // dwdot[CH2CO]/d[HCCO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[4];
  J[2048] -= dqdci; // dwdot[OH]/d[CH2CO]
  J[2049] += dqdci; // dwdot[H2O]/d[CH2CO]
  J[2071] += dqdci; // dwdot[HCCO]/d[CH2CO]
  J[2072] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5283] += dqdT; // dwdot[HCCO]/dT
  J[5284] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 114: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[6] * sc[6]);
  k_f = 130000 * exp(-(-820.243165261693) * invT);
  dlnkfdT = (-820.243165261693) * invT2;
  // reverse
  phi_r = sc[3] * sc[7];
  Kc = exp(-g_RT[3] + 2.000000 * g_RT[6] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[6]) + (h_RT[3] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O2
  wdot[6] -= 2 * q; // HO2
  wdot[7] += q;     // H2O2
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[222] += dqdci;      // dwdot[O2]/d[O2]
  J[225] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[226] += dqdci;      // dwdot[H2O2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[6];
  J[441] += dqdci;      // dwdot[O2]/d[HO2]
  J[444] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[445] += dqdci;      // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[3];
  J[514] += dqdci;      // dwdot[O2]/d[H2O2]
  J[517] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[518] += dqdci;      // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[5259] += dqdT;      // dwdot[O2]/dT
  J[5262] += -2 * dqdT; // dwdot[HO2]/dT
  J[5263] += dqdT;      // dwdot[H2O2]/dT

  // reaction 115: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[6] * sc[6]);
  k_f = 420000000 * exp(-(6038.59998965664) * invT);
  dlnkfdT = (6038.59998965664) * invT2;
  // reverse
  phi_r = sc[3] * sc[7];
  Kc = exp(-g_RT[3] + 2.000000 * g_RT[6] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[6]) + (h_RT[3] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O2
  wdot[6] -= 2 * q; // HO2
  wdot[7] += q;     // H2O2
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[222] += dqdci;      // dwdot[O2]/d[O2]
  J[225] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[226] += dqdci;      // dwdot[H2O2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[6];
  J[441] += dqdci;      // dwdot[O2]/d[HO2]
  J[444] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[445] += dqdci;      // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[3];
  J[514] += dqdci;      // dwdot[O2]/d[H2O2]
  J[517] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[518] += dqdci;      // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[5259] += dqdT;      // dwdot[O2]/dT
  J[5262] += -2 * dqdT; // dwdot[HO2]/dT
  J[5263] += dqdT;      // dwdot[H2O2]/dT

  // reaction 116: CH2 + HO2 <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[10];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[17];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[10] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[10]) + (h_RT[4] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[10] -= q; // CH2
  wdot[17] += q; // CH2O
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[298] -= dqdci; // dwdot[HO2]/d[OH]
  J[302] -= dqdci; // dwdot[CH2]/d[OH]
  J[309] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[448] -= dqdci; // dwdot[CH2]/d[HO2]
  J[455] += dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[CH2]
  dqdci = +k_f * sc[6];
  J[734] += dqdci; // dwdot[OH]/d[CH2]
  J[736] -= dqdci; // dwdot[HO2]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[747] += dqdci; // dwdot[CH2O]/d[CH2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[4];
  J[1245] += dqdci; // dwdot[OH]/d[CH2O]
  J[1247] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[1251] -= dqdci; // dwdot[CH2]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 117: CH3 + HO2 <=> CH4 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[12];
  k_f = 1000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[13];
  Kc = exp(-g_RT[3] + g_RT[6] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[12]) + (h_RT[3] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[6] -= q;  // HO2
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  // d()/d[O2]
  dqdci = -k_r * sc[13];
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  J[231] -= dqdci; // dwdot[CH3]/d[O2]
  J[232] += dqdci; // dwdot[CH4]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[450] -= dqdci; // dwdot[CH3]/d[HO2]
  J[451] += dqdci; // dwdot[CH4]/d[HO2]
  // d()/d[CH3]
  dqdci = +k_f * sc[6];
  J[879] += dqdci; // dwdot[O2]/d[CH3]
  J[882] -= dqdci; // dwdot[HO2]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[3];
  J[952] += dqdci; // dwdot[O2]/d[CH4]
  J[955] -= dqdci; // dwdot[HO2]/d[CH4]
  J[961] -= dqdci; // dwdot[CH3]/d[CH4]
  J[962] += dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT

  // reaction 118: CH3 + HO2 <=> CH3O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[12];
  k_f = 37800000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[19];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[12] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[12]) + (h_RT[4] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[12] -= q; // CH3
  wdot[19] += q; // CH3O
  // d()/d[OH]
  dqdci = -k_r * sc[19];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[298] -= dqdci; // dwdot[HO2]/d[OH]
  J[304] -= dqdci; // dwdot[CH3]/d[OH]
  J[311] += dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[450] -= dqdci; // dwdot[CH3]/d[HO2]
  J[457] += dqdci; // dwdot[CH3O]/d[HO2]
  // d()/d[CH3]
  dqdci = +k_f * sc[6];
  J[880] += dqdci; // dwdot[OH]/d[CH3]
  J[882] -= dqdci; // dwdot[HO2]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[895] += dqdci; // dwdot[CH3O]/d[CH3]
  // d()/d[CH3O]
  dqdci = -k_r * sc[4];
  J[1391] += dqdci; // dwdot[OH]/d[CH3O]
  J[1393] -= dqdci; // dwdot[HO2]/d[CH3O]
  J[1399] -= dqdci; // dwdot[CH3]/d[CH3O]
  J[1406] += dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT

  // reaction 119: CO + HO2 <=> CO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[14];
  k_f = 150000000 * exp(-(11875.9133129914) * invT);
  dlnkfdT = (11875.9133129914) * invT2;
  // reverse
  phi_r = sc[4] * sc[15];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[14]) + (h_RT[4] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[14] -= q; // CO
  wdot[15] += q; // CO2
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[298] -= dqdci; // dwdot[HO2]/d[OH]
  J[306] -= dqdci; // dwdot[CO]/d[OH]
  J[307] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[14];
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[452] -= dqdci; // dwdot[CO]/d[HO2]
  J[453] += dqdci; // dwdot[CO2]/d[HO2]
  // d()/d[CO]
  dqdci = +k_f * sc[6];
  J[1026] += dqdci; // dwdot[OH]/d[CO]
  J[1028] -= dqdci; // dwdot[HO2]/d[CO]
  J[1036] -= dqdci; // dwdot[CO]/d[CO]
  J[1037] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[4];
  J[1099] += dqdci; // dwdot[OH]/d[CO2]
  J[1101] -= dqdci; // dwdot[HO2]/d[CO2]
  J[1109] -= dqdci; // dwdot[CO]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5270] -= dqdT; // dwdot[CO]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT

  // reaction 120: CH2O + HO2 <=> H2O2 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[17];
  k_f = 5.6 * exp(2 * logT - (6038.59998965664) * invT);
  dlnkfdT = 2 * invT + (6038.59998965664) * invT2;
  // reverse
  phi_r = sc[7] * sc[16];
  Kc = exp(g_RT[6] - g_RT[7] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[17]) + (h_RT[7] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[HO2]
  dqdci = +k_f * sc[17];
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[445] += dqdci; // dwdot[H2O2]/d[HO2]
  J[454] += dqdci; // dwdot[HCO]/d[HO2]
  J[455] -= dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[16];
  J[517] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[518] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[527] += dqdci; // dwdot[HCO]/d[H2O2]
  J[528] -= dqdci; // dwdot[CH2O]/d[H2O2]
  // d()/d[HCO]
  dqdci = -k_r * sc[7];
  J[1174] -= dqdci; // dwdot[HO2]/d[HCO]
  J[1175] += dqdci; // dwdot[H2O2]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[6];
  J[1247] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[1248] += dqdci; // dwdot[H2O2]/d[CH2O]
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5263] += dqdT; // dwdot[H2O2]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT

  // reaction 121: C + O2 <=> CO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[8];
  k_f = 58000000 * exp(-(289.852799503519) * invT);
  dlnkfdT = (289.852799503519) * invT2;
  // reverse
  phi_r = sc[2] * sc[14];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[8] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[8]) + (h_RT[2] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[8] -= q;  // C
  wdot[14] += q; // CO
  // d()/d[O]
  dqdci = -k_r * sc[14];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[154] -= dqdci; // dwdot[C]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[8];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[227] -= dqdci; // dwdot[C]/d[O2]
  J[233] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[C]
  dqdci = +k_f * sc[3];
  J[586] += dqdci; // dwdot[O]/d[C]
  J[587] -= dqdci; // dwdot[O2]/d[C]
  J[592] -= dqdci; // dwdot[C]/d[C]
  J[598] += dqdci; // dwdot[CO]/d[C]
  // d()/d[CO]
  dqdci = -k_r * sc[2];
  J[1024] += dqdci; // dwdot[O]/d[CO]
  J[1025] -= dqdci; // dwdot[O2]/d[CO]
  J[1030] -= dqdci; // dwdot[C]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5264] -= dqdT; // dwdot[C]/dT
  J[5270] += dqdT; // dwdot[CO]/dT

  // reaction 122: C + CH2 <=> C2H + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[10];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = exp(-g_RT[1] + g_RT[8] + g_RT[10] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[10]) + (h_RT[1] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[8] -= q;  // C
  wdot[10] -= q; // CH2
  wdot[21] += q; // C2H
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[81] -= dqdci; // dwdot[C]/d[H]
  J[83] -= dqdci; // dwdot[CH2]/d[H]
  J[94] += dqdci; // dwdot[C2H]/d[H]
  // d()/d[C]
  dqdci = +k_f * sc[10];
  J[585] += dqdci; // dwdot[H]/d[C]
  J[592] -= dqdci; // dwdot[C]/d[C]
  J[594] -= dqdci; // dwdot[CH2]/d[C]
  J[605] += dqdci; // dwdot[C2H]/d[C]
  // d()/d[CH2]
  dqdci = +k_f * sc[8];
  J[731] += dqdci; // dwdot[H]/d[CH2]
  J[738] -= dqdci; // dwdot[C]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[751] += dqdci; // dwdot[C2H]/d[CH2]
  // d()/d[C2H]
  dqdci = -k_r * sc[1];
  J[1534] += dqdci; // dwdot[H]/d[C2H]
  J[1541] -= dqdci; // dwdot[C]/d[C2H]
  J[1543] -= dqdci; // dwdot[CH2]/d[C2H]
  J[1554] += dqdci; // dwdot[C2H]/d[C2H]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5264] -= dqdT; // dwdot[C]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5277] += dqdT; // dwdot[C2H]/dT

  // reaction 123: C + CH3 <=> C2H2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[12];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[22];
  Kc = exp(-g_RT[1] + g_RT[8] + g_RT[12] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[12]) + (h_RT[1] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[8] -= q;  // C
  wdot[12] -= q; // CH3
  wdot[22] += q; // C2H2
  // d()/d[H]
  dqdci = -k_r * sc[22];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[81] -= dqdci; // dwdot[C]/d[H]
  J[85] -= dqdci; // dwdot[CH3]/d[H]
  J[95] += dqdci; // dwdot[C2H2]/d[H]
  // d()/d[C]
  dqdci = +k_f * sc[12];
  J[585] += dqdci; // dwdot[H]/d[C]
  J[592] -= dqdci; // dwdot[C]/d[C]
  J[596] -= dqdci; // dwdot[CH3]/d[C]
  J[606] += dqdci; // dwdot[C2H2]/d[C]
  // d()/d[CH3]
  dqdci = +k_f * sc[8];
  J[877] += dqdci; // dwdot[H]/d[CH3]
  J[884] -= dqdci; // dwdot[C]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[898] += dqdci; // dwdot[C2H2]/d[CH3]
  // d()/d[C2H2]
  dqdci = -k_r * sc[1];
  J[1607] += dqdci; // dwdot[H]/d[C2H2]
  J[1614] -= dqdci; // dwdot[C]/d[C2H2]
  J[1618] -= dqdci; // dwdot[CH3]/d[C2H2]
  J[1628] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5264] -= dqdT; // dwdot[C]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT

  // reaction 124: CH + O2 <=> HCO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[9];
  k_f = 67100000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[16];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[9] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[9]) + (h_RT[2] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[9] -= q;  // CH
  wdot[16] += q; // HCO
  // d()/d[O]
  dqdci = -k_r * sc[16];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[155] -= dqdci; // dwdot[CH]/d[O]
  J[162] += dqdci; // dwdot[HCO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[9];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[228] -= dqdci; // dwdot[CH]/d[O2]
  J[235] += dqdci; // dwdot[HCO]/d[O2]
  // d()/d[CH]
  dqdci = +k_f * sc[3];
  J[659] += dqdci; // dwdot[O]/d[CH]
  J[660] -= dqdci; // dwdot[O2]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[673] += dqdci; // dwdot[HCO]/d[CH]
  // d()/d[HCO]
  dqdci = -k_r * sc[2];
  J[1170] += dqdci; // dwdot[O]/d[HCO]
  J[1171] -= dqdci; // dwdot[O2]/d[HCO]
  J[1177] -= dqdci; // dwdot[CH]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT

  // reaction 125: CH + H2 <=> CH2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[9];
  k_f = 108000000 * exp(-(1565.00383065268) * invT);
  dlnkfdT = (1565.00383065268) * invT2;
  // reverse
  phi_r = sc[1] * sc[10];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[9]) + (h_RT[1] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[10] += q; // CH2
  // d()/d[H2]
  dqdci = +k_f * sc[9];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[9] -= dqdci;  // dwdot[CH]/d[H2]
  J[10] += dqdci; // dwdot[CH2]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[10];
  J[73] -= dqdci; // dwdot[H2]/d[H]
  J[74] += dqdci; // dwdot[H]/d[H]
  J[82] -= dqdci; // dwdot[CH]/d[H]
  J[83] += dqdci; // dwdot[CH2]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[0];
  J[657] -= dqdci; // dwdot[H2]/d[CH]
  J[658] += dqdci; // dwdot[H]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[667] += dqdci; // dwdot[CH2]/d[CH]
  // d()/d[CH2]
  dqdci = -k_r * sc[1];
  J[730] -= dqdci; // dwdot[H2]/d[CH2]
  J[731] += dqdci; // dwdot[H]/d[CH2]
  J[739] -= dqdci; // dwdot[CH]/d[CH2]
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5266] += dqdT; // dwdot[CH2]/dT

  // reaction 126: CH + H2O <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[9];
  k_f = 5710000 * exp(-(-379.928582682563) * invT);
  dlnkfdT = (-379.928582682563) * invT2;
  // reverse
  phi_r = sc[1] * sc[17];
  Kc = exp(-g_RT[1] + g_RT[5] + g_RT[9] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[9]) + (h_RT[1] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[5] -= q;  // H2O
  wdot[9] -= q;  // CH
  wdot[17] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[17];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[78] -= dqdci; // dwdot[H2O]/d[H]
  J[82] -= dqdci; // dwdot[CH]/d[H]
  J[90] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * sc[9];
  J[366] += dqdci; // dwdot[H]/d[H2O]
  J[370] -= dqdci; // dwdot[H2O]/d[H2O]
  J[374] -= dqdci; // dwdot[CH]/d[H2O]
  J[382] += dqdci; // dwdot[CH2O]/d[H2O]
  // d()/d[CH]
  dqdci = +k_f * sc[5];
  J[658] += dqdci; // dwdot[H]/d[CH]
  J[662] -= dqdci; // dwdot[H2O]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[674] += dqdci; // dwdot[CH2O]/d[CH]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[1242] += dqdci; // dwdot[H]/d[CH2O]
  J[1246] -= dqdci; // dwdot[H2O]/d[CH2O]
  J[1250] -= dqdci; // dwdot[CH]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5261] -= dqdT; // dwdot[H2O]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 127: CH + CH2 <=> C2H2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[10];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[22];
  Kc = exp(-g_RT[1] + g_RT[9] + g_RT[10] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[10]) + (h_RT[1] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[10] -= q; // CH2
  wdot[22] += q; // C2H2
  // d()/d[H]
  dqdci = -k_r * sc[22];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[82] -= dqdci; // dwdot[CH]/d[H]
  J[83] -= dqdci; // dwdot[CH2]/d[H]
  J[95] += dqdci; // dwdot[C2H2]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[10];
  J[658] += dqdci; // dwdot[H]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[667] -= dqdci; // dwdot[CH2]/d[CH]
  J[679] += dqdci; // dwdot[C2H2]/d[CH]
  // d()/d[CH2]
  dqdci = +k_f * sc[9];
  J[731] += dqdci; // dwdot[H]/d[CH2]
  J[739] -= dqdci; // dwdot[CH]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[752] += dqdci; // dwdot[C2H2]/d[CH2]
  // d()/d[C2H2]
  dqdci = -k_r * sc[1];
  J[1607] += dqdci; // dwdot[H]/d[C2H2]
  J[1615] -= dqdci; // dwdot[CH]/d[C2H2]
  J[1616] -= dqdci; // dwdot[CH2]/d[C2H2]
  J[1628] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT

  // reaction 128: CH + CH3 <=> C2H3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[12];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[23];
  Kc = exp(-g_RT[1] + g_RT[9] + g_RT[12] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[12]) + (h_RT[1] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[12] -= q; // CH3
  wdot[23] += q; // C2H3
  // d()/d[H]
  dqdci = -k_r * sc[23];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[82] -= dqdci; // dwdot[CH]/d[H]
  J[85] -= dqdci; // dwdot[CH3]/d[H]
  J[96] += dqdci; // dwdot[C2H3]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[12];
  J[658] += dqdci; // dwdot[H]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[669] -= dqdci; // dwdot[CH3]/d[CH]
  J[680] += dqdci; // dwdot[C2H3]/d[CH]
  // d()/d[CH3]
  dqdci = +k_f * sc[9];
  J[877] += dqdci; // dwdot[H]/d[CH3]
  J[885] -= dqdci; // dwdot[CH]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[899] += dqdci; // dwdot[C2H3]/d[CH3]
  // d()/d[C2H3]
  dqdci = -k_r * sc[1];
  J[1680] += dqdci; // dwdot[H]/d[C2H3]
  J[1688] -= dqdci; // dwdot[CH]/d[C2H3]
  J[1691] -= dqdci; // dwdot[CH3]/d[C2H3]
  J[1702] += dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5279] += dqdT; // dwdot[C2H3]/dT

  // reaction 129: CH + CH4 <=> C2H4 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[13];
  k_f = 60000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[24];
  Kc = exp(-g_RT[1] + g_RT[9] + g_RT[13] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[13]) + (h_RT[1] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[13] -= q; // CH4
  wdot[24] += q; // C2H4
  // d()/d[H]
  dqdci = -k_r * sc[24];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[82] -= dqdci; // dwdot[CH]/d[H]
  J[86] -= dqdci; // dwdot[CH4]/d[H]
  J[97] += dqdci; // dwdot[C2H4]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[13];
  J[658] += dqdci; // dwdot[H]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[670] -= dqdci; // dwdot[CH4]/d[CH]
  J[681] += dqdci; // dwdot[C2H4]/d[CH]
  // d()/d[CH4]
  dqdci = +k_f * sc[9];
  J[950] += dqdci; // dwdot[H]/d[CH4]
  J[958] -= dqdci; // dwdot[CH]/d[CH4]
  J[962] -= dqdci; // dwdot[CH4]/d[CH4]
  J[973] += dqdci; // dwdot[C2H4]/d[CH4]
  // d()/d[C2H4]
  dqdci = -k_r * sc[1];
  J[1753] += dqdci; // dwdot[H]/d[C2H4]
  J[1761] -= dqdci; // dwdot[CH]/d[C2H4]
  J[1765] -= dqdci; // dwdot[CH4]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5269] -= dqdT; // dwdot[CH4]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT

  // reaction 131: CH + CO2 <=> CO + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[15];
  k_f = 190000000 * exp(-(7946.79758638813) * invT);
  dlnkfdT = (7946.79758638813) * invT2;
  // reverse
  phi_r = sc[14] * sc[16];
  Kc = exp(g_RT[9] - g_RT[14] + g_RT[15] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[15]) + (h_RT[14] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH
  wdot[14] += q; // CO
  wdot[15] -= q; // CO2
  wdot[16] += q; // HCO
  // d()/d[CH]
  dqdci = +k_f * sc[15];
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[671] += dqdci; // dwdot[CO]/d[CH]
  J[672] -= dqdci; // dwdot[CO2]/d[CH]
  J[673] += dqdci; // dwdot[HCO]/d[CH]
  // d()/d[CO]
  dqdci = -k_r * sc[16];
  J[1031] -= dqdci; // dwdot[CH]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1037] -= dqdci; // dwdot[CO2]/d[CO]
  J[1038] += dqdci; // dwdot[HCO]/d[CO]
  // d()/d[CO2]
  dqdci = +k_f * sc[9];
  J[1104] -= dqdci; // dwdot[CH]/d[CO2]
  J[1109] += dqdci; // dwdot[CO]/d[CO2]
  J[1110] -= dqdci; // dwdot[CO2]/d[CO2]
  J[1111] += dqdci; // dwdot[HCO]/d[CO2]
  // d()/d[HCO]
  dqdci = -k_r * sc[14];
  J[1177] -= dqdci; // dwdot[CH]/d[HCO]
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1183] -= dqdci; // dwdot[CO2]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5271] -= dqdT; // dwdot[CO2]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT

  // reaction 132: CH + CH2O <=> CH2CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[17];
  k_f = 94600000 * exp(-(-259.156582889431) * invT);
  dlnkfdT = (-259.156582889431) * invT2;
  // reverse
  phi_r = sc[1] * sc[28];
  Kc = exp(-g_RT[1] + g_RT[9] + g_RT[17] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[17]) + (h_RT[1] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[17] -= q; // CH2O
  wdot[28] += q; // CH2CO
  // d()/d[H]
  dqdci = -k_r * sc[28];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[82] -= dqdci;  // dwdot[CH]/d[H]
  J[90] -= dqdci;  // dwdot[CH2O]/d[H]
  J[101] += dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[17];
  J[658] += dqdci; // dwdot[H]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[674] -= dqdci; // dwdot[CH2O]/d[CH]
  J[685] += dqdci; // dwdot[CH2CO]/d[CH]
  // d()/d[CH2O]
  dqdci = +k_f * sc[9];
  J[1242] += dqdci; // dwdot[H]/d[CH2O]
  J[1250] -= dqdci; // dwdot[CH]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[1269] += dqdci; // dwdot[CH2CO]/d[CH2O]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[1];
  J[2045] += dqdci; // dwdot[H]/d[CH2CO]
  J[2053] -= dqdci; // dwdot[CH]/d[CH2CO]
  J[2061] -= dqdci; // dwdot[CH2O]/d[CH2CO]
  J[2072] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5284] += dqdT; // dwdot[CH2CO]/dT

  // reaction 133: CH + HCCO <=> C2H2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[27];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[22];
  Kc = exp(g_RT[9] - g_RT[14] - g_RT[22] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[27]) + (h_RT[14] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH
  wdot[14] += q; // CO
  wdot[22] += q; // C2H2
  wdot[27] -= q; // HCCO
  // d()/d[CH]
  dqdci = +k_f * sc[27];
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[671] += dqdci; // dwdot[CO]/d[CH]
  J[679] += dqdci; // dwdot[C2H2]/d[CH]
  J[684] -= dqdci; // dwdot[HCCO]/d[CH]
  // d()/d[CO]
  dqdci = -k_r * sc[22];
  J[1031] -= dqdci; // dwdot[CH]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1044] += dqdci; // dwdot[C2H2]/d[CO]
  J[1049] -= dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[C2H2]
  dqdci = -k_r * sc[14];
  J[1615] -= dqdci; // dwdot[CH]/d[C2H2]
  J[1620] += dqdci; // dwdot[CO]/d[C2H2]
  J[1628] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[1633] -= dqdci; // dwdot[HCCO]/d[C2H2]
  // d()/d[HCCO]
  dqdci = +k_f * sc[9];
  J[1980] -= dqdci; // dwdot[CH]/d[HCCO]
  J[1985] += dqdci; // dwdot[CO]/d[HCCO]
  J[1993] += dqdci; // dwdot[C2H2]/d[HCCO]
  J[1998] -= dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT
  J[5283] -= dqdT; // dwdot[HCCO]/dT

  // reaction 134: CH2 + O2 => CO + H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 5000000 * exp(-(754.82499870708) * invT);
  dlnkfdT = (754.82499870708) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // O2
  wdot[4] += q;  // OH
  wdot[10] -= q; // CH2
  wdot[14] += q; // CO
  // d()/d[O2]
  dqdci = +k_f * sc[10];
  J[220] += dqdci; // dwdot[H]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[223] += dqdci; // dwdot[OH]/d[O2]
  J[229] -= dqdci; // dwdot[CH2]/d[O2]
  J[233] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[CH2]
  dqdci = +k_f * sc[3];
  J[731] += dqdci; // dwdot[H]/d[CH2]
  J[733] -= dqdci; // dwdot[O2]/d[CH2]
  J[734] += dqdci; // dwdot[OH]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[744] += dqdci; // dwdot[CO]/d[CH2]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5270] += dqdT; // dwdot[CO]/dT

  // reaction 135: CH2 + H2 <=> CH3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[10];
  k_f = 0.5 * exp(2 * logT - (3638.25649376812) * invT);
  dlnkfdT = 2 * invT + (3638.25649376812) * invT2;
  // reverse
  phi_r = sc[1] * sc[12];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[10] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[10]) + (h_RT[1] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[10] -= q; // CH2
  wdot[12] += q; // CH3
  // d()/d[H2]
  dqdci = +k_f * sc[10];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[10] -= dqdci; // dwdot[CH2]/d[H2]
  J[12] += dqdci; // dwdot[CH3]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[12];
  J[73] -= dqdci; // dwdot[H2]/d[H]
  J[74] += dqdci; // dwdot[H]/d[H]
  J[83] -= dqdci; // dwdot[CH2]/d[H]
  J[85] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH2]
  dqdci = +k_f * sc[0];
  J[730] -= dqdci; // dwdot[H2]/d[CH2]
  J[731] += dqdci; // dwdot[H]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[742] += dqdci; // dwdot[CH3]/d[CH2]
  // d()/d[CH3]
  dqdci = -k_r * sc[1];
  J[876] -= dqdci; // dwdot[H2]/d[CH3]
  J[877] += dqdci; // dwdot[H]/d[CH3]
  J[886] -= dqdci; // dwdot[CH2]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT

  // reaction 136: 2 CH2 <=> C2H2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 1600000000 * exp(-(6010.41985637157) * invT);
  dlnkfdT = (6010.41985637157) * invT2;
  // reverse
  phi_r = sc[0] * sc[22];
  Kc = exp(-g_RT[0] + 2.000000 * g_RT[10] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[10]) + (h_RT[0] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;      // H2
  wdot[10] -= 2 * q; // CH2
  wdot[22] += q;     // C2H2
  // d()/d[H2]
  dqdci = -k_r * sc[22];
  J[0] += dqdci;       // dwdot[H2]/d[H2]
  J[10] += -2 * dqdci; // dwdot[CH2]/d[H2]
  J[22] += dqdci;      // dwdot[C2H2]/d[H2]
  // d()/d[CH2]
  dqdci = +k_f * 2.000000 * sc[10];
  J[730] += dqdci;      // dwdot[H2]/d[CH2]
  J[740] += -2 * dqdci; // dwdot[CH2]/d[CH2]
  J[752] += dqdci;      // dwdot[C2H2]/d[CH2]
  // d()/d[C2H2]
  dqdci = -k_r * sc[0];
  J[1606] += dqdci;      // dwdot[H2]/d[C2H2]
  J[1616] += -2 * dqdci; // dwdot[CH2]/d[C2H2]
  J[1628] += dqdci;      // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[5256] += dqdT;      // dwdot[H2]/dT
  J[5266] += -2 * dqdT; // dwdot[CH2]/dT
  J[5278] += dqdT;      // dwdot[C2H2]/dT

  // reaction 137: CH2 + CH3 <=> C2H4 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[12];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[24];
  Kc = exp(-g_RT[1] + g_RT[10] + g_RT[12] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[12]) + (h_RT[1] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[10] -= q; // CH2
  wdot[12] -= q; // CH3
  wdot[24] += q; // C2H4
  // d()/d[H]
  dqdci = -k_r * sc[24];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[83] -= dqdci; // dwdot[CH2]/d[H]
  J[85] -= dqdci; // dwdot[CH3]/d[H]
  J[97] += dqdci; // dwdot[C2H4]/d[H]
  // d()/d[CH2]
  dqdci = +k_f * sc[12];
  J[731] += dqdci; // dwdot[H]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[742] -= dqdci; // dwdot[CH3]/d[CH2]
  J[754] += dqdci; // dwdot[C2H4]/d[CH2]
  // d()/d[CH3]
  dqdci = +k_f * sc[10];
  J[877] += dqdci; // dwdot[H]/d[CH3]
  J[886] -= dqdci; // dwdot[CH2]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[900] += dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[1];
  J[1753] += dqdci; // dwdot[H]/d[C2H4]
  J[1762] -= dqdci; // dwdot[CH2]/d[C2H4]
  J[1764] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT

  // reaction 138: CH2 + CH4 <=> 2 CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[13];
  k_f = 2.46 * exp(2 * logT - (4161.60182620503) * invT);
  dlnkfdT = 2 * invT + (4161.60182620503) * invT2;
  // reverse
  phi_r = (sc[12] * sc[12]);
  Kc = exp(g_RT[10] - 2.000000 * g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[13]) + (2.000000 * h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q;     // CH2
  wdot[12] += 2 * q; // CH3
  wdot[13] -= q;     // CH4
  // d()/d[CH2]
  dqdci = +k_f * sc[13];
  J[740] -= dqdci;     // dwdot[CH2]/d[CH2]
  J[742] += 2 * dqdci; // dwdot[CH3]/d[CH2]
  J[743] -= dqdci;     // dwdot[CH4]/d[CH2]
  // d()/d[CH3]
  dqdci = -k_r * 2.000000 * sc[12];
  J[886] -= dqdci;     // dwdot[CH2]/d[CH3]
  J[888] += 2 * dqdci; // dwdot[CH3]/d[CH3]
  J[889] -= dqdci;     // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[10];
  J[959] -= dqdci;     // dwdot[CH2]/d[CH4]
  J[961] += 2 * dqdci; // dwdot[CH3]/d[CH4]
  J[962] -= dqdci;     // dwdot[CH4]/d[CH4]
  // d()/dT
  J[5266] -= dqdT;     // dwdot[CH2]/dT
  J[5268] += 2 * dqdT; // dwdot[CH3]/dT
  J[5269] -= dqdT;     // dwdot[CH4]/dT

  // reaction 140: CH2 + HCCO <=> C2H3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[27];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[23];
  Kc = exp(g_RT[10] - g_RT[14] - g_RT[23] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[27]) + (h_RT[14] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // CH2
  wdot[14] += q; // CO
  wdot[23] += q; // C2H3
  wdot[27] -= q; // HCCO
  // d()/d[CH2]
  dqdci = +k_f * sc[27];
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[744] += dqdci; // dwdot[CO]/d[CH2]
  J[753] += dqdci; // dwdot[C2H3]/d[CH2]
  J[757] -= dqdci; // dwdot[HCCO]/d[CH2]
  // d()/d[CO]
  dqdci = -k_r * sc[23];
  J[1032] -= dqdci; // dwdot[CH2]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1045] += dqdci; // dwdot[C2H3]/d[CO]
  J[1049] -= dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[C2H3]
  dqdci = -k_r * sc[14];
  J[1689] -= dqdci; // dwdot[CH2]/d[C2H3]
  J[1693] += dqdci; // dwdot[CO]/d[C2H3]
  J[1702] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[1706] -= dqdci; // dwdot[HCCO]/d[C2H3]
  // d()/d[HCCO]
  dqdci = +k_f * sc[10];
  J[1981] -= dqdci; // dwdot[CH2]/d[HCCO]
  J[1985] += dqdci; // dwdot[CO]/d[HCCO]
  J[1994] += dqdci; // dwdot[C2H3]/d[HCCO]
  J[1998] -= dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5279] += dqdT; // dwdot[C2H3]/dT
  J[5283] -= dqdT; // dwdot[HCCO]/dT

  // reaction 141: CH2(S) + N2 <=> CH2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[47];
  k_f = 15000000 * exp(-(301.929999482832) * invT);
  dlnkfdT = (301.929999482832) * invT2;
  // reverse
  phi_r = sc[10] * sc[47];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[47] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[47]) + (h_RT[10] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[11] -= q; // CH2(S)
  // d()/d[CH2]
  dqdci = -k_r * sc[47];
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  J[741] -= dqdci; // dwdot[CH2(S)]/d[CH2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[47];
  J[813] += dqdci; // dwdot[CH2]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/d[N2]
  dqdci = +k_f * sc[11] - k_r * sc[10];
  J[3441] += dqdci; // dwdot[CH2]/d[N2]
  J[3442] -= dqdci; // dwdot[CH2(S)]/d[N2]
  // d()/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 142: AR + CH2(S) <=> AR + CH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[48];
  k_f = 9000000 * exp(-(301.929999482832) * invT);
  dlnkfdT = (301.929999482832) * invT2;
  // reverse
  phi_r = sc[10] * sc[48];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[48] - g_RT[48]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[48]) + (h_RT[10] + h_RT[48]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[11] -= q; // CH2(S)
  // d()/d[CH2]
  dqdci = -k_r * sc[48];
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  J[741] -= dqdci; // dwdot[CH2(S)]/d[CH2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[48];
  J[813] += dqdci; // dwdot[CH2]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/d[AR]
  dqdci = +k_f * sc[11] - k_r * sc[10];
  J[3514] += dqdci; // dwdot[CH2]/d[AR]
  J[3515] -= dqdci; // dwdot[CH2(S)]/d[AR]
  // d()/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 143: CH2(S) + O2 <=> CO + H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[11];
  k_f = 28000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[4] * sc[14];
  Kc = refC * exp(-g_RT[1] + g_RT[3] - g_RT[4] + g_RT[11] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[3] + h_RT[11]) + (h_RT[1] + h_RT[4] + h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // O2
  wdot[4] += q;  // OH
  wdot[11] -= q; // CH2(S)
  wdot[14] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[4] * sc[14];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[76] -= dqdci; // dwdot[O2]/d[H]
  J[77] += dqdci; // dwdot[OH]/d[H]
  J[84] -= dqdci; // dwdot[CH2(S)]/d[H]
  J[87] += dqdci; // dwdot[CO]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[11];
  J[220] += dqdci; // dwdot[H]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[223] += dqdci; // dwdot[OH]/d[O2]
  J[230] -= dqdci; // dwdot[CH2(S)]/d[O2]
  J[233] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[1] * sc[14];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[295] -= dqdci; // dwdot[O2]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[303] -= dqdci; // dwdot[CH2(S)]/d[OH]
  J[306] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[3];
  J[804] += dqdci; // dwdot[H]/d[CH2(S)]
  J[806] -= dqdci; // dwdot[O2]/d[CH2(S)]
  J[807] += dqdci; // dwdot[OH]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[817] += dqdci; // dwdot[CO]/d[CH2(S)]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * sc[4];
  J[1023] += dqdci; // dwdot[H]/d[CO]
  J[1025] -= dqdci; // dwdot[O2]/d[CO]
  J[1026] += dqdci; // dwdot[OH]/d[CO]
  J[1033] -= dqdci; // dwdot[CH2(S)]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5270] += dqdT; // dwdot[CO]/dT

  // reaction 144: CH2(S) + O2 <=> CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[11];
  k_f = 12000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[14];
  Kc = exp(g_RT[3] - g_RT[5] + g_RT[11] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[11]) + (h_RT[5] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[5] += q;  // H2O
  wdot[11] -= q; // CH2(S)
  wdot[14] += q; // CO
  // d()/d[O2]
  dqdci = +k_f * sc[11];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[224] += dqdci; // dwdot[H2O]/d[O2]
  J[230] -= dqdci; // dwdot[CH2(S)]/d[O2]
  J[233] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[H2O]
  dqdci = -k_r * sc[14];
  J[368] -= dqdci; // dwdot[O2]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[376] -= dqdci; // dwdot[CH2(S)]/d[H2O]
  J[379] += dqdci; // dwdot[CO]/d[H2O]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[3];
  J[806] -= dqdci; // dwdot[O2]/d[CH2(S)]
  J[808] += dqdci; // dwdot[H2O]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[817] += dqdci; // dwdot[CO]/d[CH2(S)]
  // d()/d[CO]
  dqdci = -k_r * sc[5];
  J[1025] -= dqdci; // dwdot[O2]/d[CO]
  J[1027] += dqdci; // dwdot[H2O]/d[CO]
  J[1033] -= dqdci; // dwdot[CH2(S)]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5270] += dqdT; // dwdot[CO]/dT

  // reaction 145: CH2(S) + H2 <=> CH3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[11];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[12];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[11]) + (h_RT[1] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[11] -= q; // CH2(S)
  wdot[12] += q; // CH3
  // d()/d[H2]
  dqdci = +k_f * sc[11];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[11] -= dqdci; // dwdot[CH2(S)]/d[H2]
  J[12] += dqdci; // dwdot[CH3]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[12];
  J[73] -= dqdci; // dwdot[H2]/d[H]
  J[74] += dqdci; // dwdot[H]/d[H]
  J[84] -= dqdci; // dwdot[CH2(S)]/d[H]
  J[85] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[0];
  J[803] -= dqdci; // dwdot[H2]/d[CH2(S)]
  J[804] += dqdci; // dwdot[H]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[815] += dqdci; // dwdot[CH3]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = -k_r * sc[1];
  J[876] -= dqdci; // dwdot[H2]/d[CH3]
  J[877] += dqdci; // dwdot[H]/d[CH3]
  J[887] -= dqdci; // dwdot[CH2(S)]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT

  // reaction 147: CH2(S) + H2O <=> CH2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[11];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[10];
  Kc = exp(g_RT[5] - g_RT[5] - g_RT[10] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[11]) + (h_RT[5] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[11] -= q; // CH2(S)
  // d()/d[H2O]
  dqdci = +k_f * sc[11] - k_r * sc[10];
  J[375] += dqdci; // dwdot[CH2]/d[H2O]
  J[376] -= dqdci; // dwdot[CH2(S)]/d[H2O]
  // d()/d[CH2]
  dqdci = -k_r * sc[5];
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  J[741] -= dqdci; // dwdot[CH2(S)]/d[CH2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[5];
  J[813] += dqdci; // dwdot[CH2]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 148: CH2(S) + CH3 <=> C2H4 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[12];
  k_f = 12000000 * exp(-(-286.83349950869) * invT);
  dlnkfdT = (-286.83349950869) * invT2;
  // reverse
  phi_r = sc[1] * sc[24];
  Kc = exp(-g_RT[1] + g_RT[11] + g_RT[12] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[12]) + (h_RT[1] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[11] -= q; // CH2(S)
  wdot[12] -= q; // CH3
  wdot[24] += q; // C2H4
  // d()/d[H]
  dqdci = -k_r * sc[24];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[84] -= dqdci; // dwdot[CH2(S)]/d[H]
  J[85] -= dqdci; // dwdot[CH3]/d[H]
  J[97] += dqdci; // dwdot[C2H4]/d[H]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[12];
  J[804] += dqdci; // dwdot[H]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[815] -= dqdci; // dwdot[CH3]/d[CH2(S)]
  J[827] += dqdci; // dwdot[C2H4]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = +k_f * sc[11];
  J[877] += dqdci; // dwdot[H]/d[CH3]
  J[887] -= dqdci; // dwdot[CH2(S)]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[900] += dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[1];
  J[1753] += dqdci; // dwdot[H]/d[C2H4]
  J[1763] -= dqdci; // dwdot[CH2(S)]/d[C2H4]
  J[1764] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT

  // reaction 149: CH2(S) + CH4 <=> 2 CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[13];
  k_f = 16000000 * exp(-(-286.83349950869) * invT);
  dlnkfdT = (-286.83349950869) * invT2;
  // reverse
  phi_r = (sc[12] * sc[12]);
  Kc = exp(g_RT[11] - 2.000000 * g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[13]) + (2.000000 * h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q;     // CH2(S)
  wdot[12] += 2 * q; // CH3
  wdot[13] -= q;     // CH4
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[13];
  J[814] -= dqdci;     // dwdot[CH2(S)]/d[CH2(S)]
  J[815] += 2 * dqdci; // dwdot[CH3]/d[CH2(S)]
  J[816] -= dqdci;     // dwdot[CH4]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = -k_r * 2.000000 * sc[12];
  J[887] -= dqdci;     // dwdot[CH2(S)]/d[CH3]
  J[888] += 2 * dqdci; // dwdot[CH3]/d[CH3]
  J[889] -= dqdci;     // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[11];
  J[960] -= dqdci;     // dwdot[CH2(S)]/d[CH4]
  J[961] += 2 * dqdci; // dwdot[CH3]/d[CH4]
  J[962] -= dqdci;     // dwdot[CH4]/d[CH4]
  // d()/dT
  J[5267] -= dqdT;     // dwdot[CH2(S)]/dT
  J[5268] += 2 * dqdT; // dwdot[CH3]/dT
  J[5269] -= dqdT;     // dwdot[CH4]/dT

  // reaction 150: CH2(S) + CO <=> CH2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[14];
  k_f = 9000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[14];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[14] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[14]) + (h_RT[10] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[11] -= q; // CH2(S)
  // d()/d[CH2]
  dqdci = -k_r * sc[14];
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  J[741] -= dqdci; // dwdot[CH2(S)]/d[CH2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[14];
  J[813] += dqdci; // dwdot[CH2]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/d[CO]
  dqdci = +k_f * sc[11] - k_r * sc[10];
  J[1032] += dqdci; // dwdot[CH2]/d[CO]
  J[1033] -= dqdci; // dwdot[CH2(S)]/d[CO]
  // d()/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 151: CH2(S) + CO2 <=> CH2 + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[15];
  k_f = 7000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[15];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[15] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[15]) + (h_RT[10] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[11] -= q; // CH2(S)
  // d()/d[CH2]
  dqdci = -k_r * sc[15];
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  J[741] -= dqdci; // dwdot[CH2(S)]/d[CH2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[15];
  J[813] += dqdci; // dwdot[CH2]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/d[CO2]
  dqdci = +k_f * sc[11] - k_r * sc[10];
  J[1105] += dqdci; // dwdot[CH2]/d[CO2]
  J[1106] -= dqdci; // dwdot[CH2(S)]/d[CO2]
  // d()/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 152: CH2(S) + CO2 <=> CH2O + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[15];
  k_f = 14000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[17];
  Kc = exp(g_RT[11] - g_RT[14] + g_RT[15] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[15]) + (h_RT[14] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // CH2(S)
  wdot[14] += q; // CO
  wdot[15] -= q; // CO2
  wdot[17] += q; // CH2O
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[15];
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[817] += dqdci; // dwdot[CO]/d[CH2(S)]
  J[818] -= dqdci; // dwdot[CO2]/d[CH2(S)]
  J[820] += dqdci; // dwdot[CH2O]/d[CH2(S)]
  // d()/d[CO]
  dqdci = -k_r * sc[17];
  J[1033] -= dqdci; // dwdot[CH2(S)]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1037] -= dqdci; // dwdot[CO2]/d[CO]
  J[1039] += dqdci; // dwdot[CH2O]/d[CO]
  // d()/d[CO2]
  dqdci = +k_f * sc[11];
  J[1106] -= dqdci; // dwdot[CH2(S)]/d[CO2]
  J[1109] += dqdci; // dwdot[CO]/d[CO2]
  J[1110] -= dqdci; // dwdot[CO2]/d[CO2]
  J[1112] += dqdci; // dwdot[CH2O]/d[CO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[14];
  J[1252] -= dqdci; // dwdot[CH2(S)]/d[CH2O]
  J[1255] += dqdci; // dwdot[CO]/d[CH2O]
  J[1256] -= dqdci; // dwdot[CO2]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5271] -= dqdT; // dwdot[CO2]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 153: C2H6 + CH2(S) <=> C2H5 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[26];
  k_f = 40000000 * exp(-(-276.769166192596) * invT);
  dlnkfdT = (-276.769166192596) * invT2;
  // reverse
  phi_r = sc[12] * sc[25];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[26]) + (h_RT[12] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // CH2(S)
  wdot[12] += q; // CH3
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[26];
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[815] += dqdci; // dwdot[CH3]/d[CH2(S)]
  J[828] += dqdci; // dwdot[C2H5]/d[CH2(S)]
  J[829] -= dqdci; // dwdot[C2H6]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = -k_r * sc[25];
  J[887] -= dqdci; // dwdot[CH2(S)]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[901] += dqdci; // dwdot[C2H5]/d[CH3]
  J[902] -= dqdci; // dwdot[C2H6]/d[CH3]
  // d()/d[C2H5]
  dqdci = -k_r * sc[12];
  J[1836] -= dqdci; // dwdot[CH2(S)]/d[C2H5]
  J[1837] += dqdci; // dwdot[CH3]/d[C2H5]
  J[1850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[11];
  J[1909] -= dqdci; // dwdot[CH2(S)]/d[C2H6]
  J[1910] += dqdci; // dwdot[CH3]/d[C2H6]
  J[1923] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1924] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5282] -= dqdT; // dwdot[C2H6]/dT

  // reaction 154: CH3 + O2 <=> CH3O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[12];
  k_f = 35600000 * exp(-(15338.0439737279) * invT);
  dlnkfdT = (15338.0439737279) * invT2;
  // reverse
  phi_r = sc[2] * sc[19];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[12] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[12]) + (h_RT[2] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[12] -= q; // CH3
  wdot[19] += q; // CH3O
  // d()/d[O]
  dqdci = -k_r * sc[19];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[158] -= dqdci; // dwdot[CH3]/d[O]
  J[165] += dqdci; // dwdot[CH3O]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[12];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[231] -= dqdci; // dwdot[CH3]/d[O2]
  J[238] += dqdci; // dwdot[CH3O]/d[O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[3];
  J[878] += dqdci; // dwdot[O]/d[CH3]
  J[879] -= dqdci; // dwdot[O2]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[895] += dqdci; // dwdot[CH3O]/d[CH3]
  // d()/d[CH3O]
  dqdci = -k_r * sc[2];
  J[1389] += dqdci; // dwdot[O]/d[CH3O]
  J[1390] -= dqdci; // dwdot[O2]/d[CH3O]
  J[1399] -= dqdci; // dwdot[CH3]/d[CH3O]
  J[1406] += dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT

  // reaction 155: CH3 + O2 <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[12];
  k_f = 2310000 * exp(-(10222.8465658229) * invT);
  dlnkfdT = (10222.8465658229) * invT2;
  // reverse
  phi_r = sc[4] * sc[17];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[12] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[12]) + (h_RT[4] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // OH
  wdot[12] -= q; // CH3
  wdot[17] += q; // CH2O
  // d()/d[O2]
  dqdci = +k_f * sc[12];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[223] += dqdci; // dwdot[OH]/d[O2]
  J[231] -= dqdci; // dwdot[CH3]/d[O2]
  J[236] += dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[295] -= dqdci; // dwdot[O2]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[304] -= dqdci; // dwdot[CH3]/d[OH]
  J[309] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH3]
  dqdci = +k_f * sc[3];
  J[879] -= dqdci; // dwdot[O2]/d[CH3]
  J[880] += dqdci; // dwdot[OH]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[893] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[4];
  J[1244] -= dqdci; // dwdot[O2]/d[CH2O]
  J[1245] += dqdci; // dwdot[OH]/d[CH2O]
  J[1253] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 156: CH3 + H2O2 <=> CH4 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[12];
  k_f = 0.0245 * exp(2.47 * logT - (2606.66232886845) * invT);
  dlnkfdT = 2.47 * invT + (2606.66232886845) * invT2;
  // reverse
  phi_r = sc[6] * sc[13];
  Kc = exp(-g_RT[6] + g_RT[7] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[12]) + (h_RT[6] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  // d()/d[HO2]
  dqdci = -k_r * sc[13];
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[450] -= dqdci; // dwdot[CH3]/d[HO2]
  J[451] += dqdci; // dwdot[CH4]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[12];
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[523] -= dqdci; // dwdot[CH3]/d[H2O2]
  J[524] += dqdci; // dwdot[CH4]/d[H2O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[7];
  J[882] += dqdci; // dwdot[HO2]/d[CH3]
  J[883] -= dqdci; // dwdot[H2O2]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[6];
  J[955] += dqdci; // dwdot[HO2]/d[CH4]
  J[956] -= dqdci; // dwdot[H2O2]/d[CH4]
  J[961] -= dqdci; // dwdot[CH3]/d[CH4]
  J[962] += dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT

  // reaction 158: 2 CH3 <=> C2H5 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[12] * sc[12]);
  k_f = 6840000 * exp(0.1 * logT - (5334.09665753003) * invT);
  dlnkfdT = 0.1 * invT + (5334.09665753003) * invT2;
  // reverse
  phi_r = sc[1] * sc[25];
  Kc = exp(-g_RT[1] + 2.000000 * g_RT[12] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[12]) + (h_RT[1] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;      // H
  wdot[12] -= 2 * q; // CH3
  wdot[25] += q;     // C2H5
  // d()/d[H]
  dqdci = -k_r * sc[25];
  J[74] += dqdci;      // dwdot[H]/d[H]
  J[85] += -2 * dqdci; // dwdot[CH3]/d[H]
  J[98] += dqdci;      // dwdot[C2H5]/d[H]
  // d()/d[CH3]
  dqdci = +k_f * 2.000000 * sc[12];
  J[877] += dqdci;      // dwdot[H]/d[CH3]
  J[888] += -2 * dqdci; // dwdot[CH3]/d[CH3]
  J[901] += dqdci;      // dwdot[C2H5]/d[CH3]
  // d()/d[C2H5]
  dqdci = -k_r * sc[1];
  J[1826] += dqdci;      // dwdot[H]/d[C2H5]
  J[1837] += -2 * dqdci; // dwdot[CH3]/d[C2H5]
  J[1850] += dqdci;      // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[5257] += dqdT;      // dwdot[H]/dT
  J[5268] += -2 * dqdT; // dwdot[CH3]/dT
  J[5281] += dqdT;      // dwdot[C2H5]/dT

  // reaction 159: CH3 + HCO <=> CH4 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[16];
  k_f = 26480000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[13] * sc[14];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[16]) + (h_RT[13] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[CH3]
  dqdci = +k_f * sc[16];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[890] += dqdci; // dwdot[CO]/d[CH3]
  J[892] -= dqdci; // dwdot[HCO]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[14];
  J[961] -= dqdci; // dwdot[CH3]/d[CH4]
  J[962] += dqdci; // dwdot[CH4]/d[CH4]
  J[963] += dqdci; // dwdot[CO]/d[CH4]
  J[965] -= dqdci; // dwdot[HCO]/d[CH4]
  // d()/d[CO]
  dqdci = -k_r * sc[13];
  J[1034] -= dqdci; // dwdot[CH3]/d[CO]
  J[1035] += dqdci; // dwdot[CH4]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[12];
  J[1180] -= dqdci; // dwdot[CH3]/d[HCO]
  J[1181] += dqdci; // dwdot[CH4]/d[HCO]
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT

  // reaction 160: CH2O + CH3 <=> CH4 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[17];
  k_f = 0.00332 * exp(2.81 * logT - (2948.84966161566) * invT);
  dlnkfdT = 2.81 * invT + (2948.84966161566) * invT2;
  // reverse
  phi_r = sc[13] * sc[16];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[17]) + (h_RT[13] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[CH3]
  dqdci = +k_f * sc[17];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[892] += dqdci; // dwdot[HCO]/d[CH3]
  J[893] -= dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[16];
  J[961] -= dqdci; // dwdot[CH3]/d[CH4]
  J[962] += dqdci; // dwdot[CH4]/d[CH4]
  J[965] += dqdci; // dwdot[HCO]/d[CH4]
  J[966] -= dqdci; // dwdot[CH2O]/d[CH4]
  // d()/d[HCO]
  dqdci = -k_r * sc[13];
  J[1180] -= dqdci; // dwdot[CH3]/d[HCO]
  J[1181] += dqdci; // dwdot[CH4]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[12];
  J[1253] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[1254] += dqdci; // dwdot[CH4]/d[CH2O]
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT

  // reaction 161: CH3 + CH3OH <=> CH2OH + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[20];
  k_f = 30 * exp(1.5 * logT - (5001.97365809891) * invT);
  dlnkfdT = 1.5 * invT + (5001.97365809891) * invT2;
  // reverse
  phi_r = sc[13] * sc[18];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[20]) + (h_RT[13] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  // d()/d[CH3]
  dqdci = +k_f * sc[20];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[894] += dqdci; // dwdot[CH2OH]/d[CH3]
  J[896] -= dqdci; // dwdot[CH3OH]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[18];
  J[961] -= dqdci; // dwdot[CH3]/d[CH4]
  J[962] += dqdci; // dwdot[CH4]/d[CH4]
  J[967] += dqdci; // dwdot[CH2OH]/d[CH4]
  J[969] -= dqdci; // dwdot[CH3OH]/d[CH4]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[13];
  J[1326] -= dqdci; // dwdot[CH3]/d[CH2OH]
  J[1327] += dqdci; // dwdot[CH4]/d[CH2OH]
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1334] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[12];
  J[1472] -= dqdci; // dwdot[CH3]/d[CH3OH]
  J[1473] += dqdci; // dwdot[CH4]/d[CH3OH]
  J[1478] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 162: CH3 + CH3OH <=> CH3O + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[20];
  k_f = 10 * exp(1.5 * logT - (5001.97365809891) * invT);
  dlnkfdT = 1.5 * invT + (5001.97365809891) * invT2;
  // reverse
  phi_r = sc[13] * sc[19];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[20]) + (h_RT[13] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  // d()/d[CH3]
  dqdci = +k_f * sc[20];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[895] += dqdci; // dwdot[CH3O]/d[CH3]
  J[896] -= dqdci; // dwdot[CH3OH]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[19];
  J[961] -= dqdci; // dwdot[CH3]/d[CH4]
  J[962] += dqdci; // dwdot[CH4]/d[CH4]
  J[968] += dqdci; // dwdot[CH3O]/d[CH4]
  J[969] -= dqdci; // dwdot[CH3OH]/d[CH4]
  // d()/d[CH3O]
  dqdci = -k_r * sc[13];
  J[1399] -= dqdci; // dwdot[CH3]/d[CH3O]
  J[1400] += dqdci; // dwdot[CH4]/d[CH3O]
  J[1406] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[1407] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[12];
  J[1472] -= dqdci; // dwdot[CH3]/d[CH3OH]
  J[1473] += dqdci; // dwdot[CH4]/d[CH3OH]
  J[1479] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 163: C2H4 + CH3 <=> C2H3 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[24];
  k_f = 0.227 * exp(2 * logT - (4629.59332540342) * invT);
  dlnkfdT = 2 * invT + (4629.59332540342) * invT2;
  // reverse
  phi_r = sc[13] * sc[23];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[24]) + (h_RT[13] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[23] += q; // C2H3
  wdot[24] -= q; // C2H4
  // d()/d[CH3]
  dqdci = +k_f * sc[24];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[899] += dqdci; // dwdot[C2H3]/d[CH3]
  J[900] -= dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[23];
  J[961] -= dqdci; // dwdot[CH3]/d[CH4]
  J[962] += dqdci; // dwdot[CH4]/d[CH4]
  J[972] += dqdci; // dwdot[C2H3]/d[CH4]
  J[973] -= dqdci; // dwdot[C2H4]/d[CH4]
  // d()/d[C2H3]
  dqdci = -k_r * sc[13];
  J[1691] -= dqdci; // dwdot[CH3]/d[C2H3]
  J[1692] += dqdci; // dwdot[CH4]/d[C2H3]
  J[1702] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[1703] -= dqdci; // dwdot[C2H4]/d[C2H3]
  // d()/d[C2H4]
  dqdci = +k_f * sc[12];
  J[1764] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[1765] += dqdci; // dwdot[CH4]/d[C2H4]
  J[1775] += dqdci; // dwdot[C2H3]/d[C2H4]
  J[1776] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5279] += dqdT; // dwdot[C2H3]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT

  // reaction 164: C2H6 + CH3 <=> C2H5 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[26];
  k_f = 6.14 * exp(1.74 * logT - (5258.61415765932) * invT);
  dlnkfdT = 1.74 * invT + (5258.61415765932) * invT2;
  // reverse
  phi_r = sc[13] * sc[25];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[26]) + (h_RT[13] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  // d()/d[CH3]
  dqdci = +k_f * sc[26];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[901] += dqdci; // dwdot[C2H5]/d[CH3]
  J[902] -= dqdci; // dwdot[C2H6]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[25];
  J[961] -= dqdci; // dwdot[CH3]/d[CH4]
  J[962] += dqdci; // dwdot[CH4]/d[CH4]
  J[974] += dqdci; // dwdot[C2H5]/d[CH4]
  J[975] -= dqdci; // dwdot[C2H6]/d[CH4]
  // d()/d[C2H5]
  dqdci = -k_r * sc[13];
  J[1837] -= dqdci; // dwdot[CH3]/d[C2H5]
  J[1838] += dqdci; // dwdot[CH4]/d[C2H5]
  J[1850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[12];
  J[1910] -= dqdci; // dwdot[CH3]/d[C2H6]
  J[1911] += dqdci; // dwdot[CH4]/d[C2H6]
  J[1923] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1924] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5282] -= dqdT; // dwdot[C2H6]/dT

  // reaction 167: HCO + O2 <=> CO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[16];
  k_f = 13450000 * exp(-(201.286666321888) * invT);
  dlnkfdT = (201.286666321888) * invT2;
  // reverse
  phi_r = sc[6] * sc[14];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[16]) + (h_RT[6] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[O2]
  dqdci = +k_f * sc[16];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  J[233] += dqdci; // dwdot[CO]/d[O2]
  J[235] -= dqdci; // dwdot[HCO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[14];
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[452] += dqdci; // dwdot[CO]/d[HO2]
  J[454] -= dqdci; // dwdot[HCO]/d[HO2]
  // d()/d[CO]
  dqdci = -k_r * sc[6];
  J[1025] -= dqdci; // dwdot[O2]/d[CO]
  J[1028] += dqdci; // dwdot[HO2]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[3];
  J[1171] -= dqdci; // dwdot[O2]/d[HCO]
  J[1174] += dqdci; // dwdot[HO2]/d[HCO]
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT

  // reaction 168: CH2OH + O2 <=> CH2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[18];
  k_f = 18000000 * exp(-(452.894999224248) * invT);
  dlnkfdT = (452.894999224248) * invT2;
  // reverse
  phi_r = sc[6] * sc[17];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[18]) + (h_RT[6] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[17] += q; // CH2O
  wdot[18] -= q; // CH2OH
  // d()/d[O2]
  dqdci = +k_f * sc[18];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  J[236] += dqdci; // dwdot[CH2O]/d[O2]
  J[237] -= dqdci; // dwdot[CH2OH]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[17];
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[455] += dqdci; // dwdot[CH2O]/d[HO2]
  J[456] -= dqdci; // dwdot[CH2OH]/d[HO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[6];
  J[1244] -= dqdci; // dwdot[O2]/d[CH2O]
  J[1247] += dqdci; // dwdot[HO2]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1259] -= dqdci; // dwdot[CH2OH]/d[CH2O]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[3];
  J[1317] -= dqdci; // dwdot[O2]/d[CH2OH]
  J[1320] += dqdci; // dwdot[HO2]/d[CH2OH]
  J[1331] += dqdci; // dwdot[CH2O]/d[CH2OH]
  J[1332] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5274] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 169: CH3O + O2 <=> CH2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[19];
  k_f = 4.28e-19 * exp(7.6 * logT - (-1776.35483029066) * invT);
  dlnkfdT = 7.6 * invT + (-1776.35483029066) * invT2;
  // reverse
  phi_r = sc[6] * sc[17];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[17] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[19]) + (h_RT[6] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[17] += q; // CH2O
  wdot[19] -= q; // CH3O
  // d()/d[O2]
  dqdci = +k_f * sc[19];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  J[236] += dqdci; // dwdot[CH2O]/d[O2]
  J[238] -= dqdci; // dwdot[CH3O]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[17];
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[455] += dqdci; // dwdot[CH2O]/d[HO2]
  J[457] -= dqdci; // dwdot[CH3O]/d[HO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[6];
  J[1244] -= dqdci; // dwdot[O2]/d[CH2O]
  J[1247] += dqdci; // dwdot[HO2]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1260] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[3];
  J[1390] -= dqdci; // dwdot[O2]/d[CH3O]
  J[1393] += dqdci; // dwdot[HO2]/d[CH3O]
  J[1404] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[1406] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5275] -= dqdT; // dwdot[CH3O]/dT

  // reaction 170: C2H + O2 <=> CO + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[21];
  k_f = 10000000 * exp(-(-379.928582682563) * invT);
  dlnkfdT = (-379.928582682563) * invT2;
  // reverse
  phi_r = sc[14] * sc[16];
  Kc = exp(g_RT[3] - g_RT[14] - g_RT[16] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[21]) + (h_RT[14] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[14] += q; // CO
  wdot[16] += q; // HCO
  wdot[21] -= q; // C2H
  // d()/d[O2]
  dqdci = +k_f * sc[21];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[233] += dqdci; // dwdot[CO]/d[O2]
  J[235] += dqdci; // dwdot[HCO]/d[O2]
  J[240] -= dqdci; // dwdot[C2H]/d[O2]
  // d()/d[CO]
  dqdci = -k_r * sc[16];
  J[1025] -= dqdci; // dwdot[O2]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] += dqdci; // dwdot[HCO]/d[CO]
  J[1043] -= dqdci; // dwdot[C2H]/d[CO]
  // d()/d[HCO]
  dqdci = -k_r * sc[14];
  J[1171] -= dqdci; // dwdot[O2]/d[HCO]
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1189] -= dqdci; // dwdot[C2H]/d[HCO]
  // d()/d[C2H]
  dqdci = +k_f * sc[3];
  J[1536] -= dqdci; // dwdot[O2]/d[C2H]
  J[1547] += dqdci; // dwdot[CO]/d[C2H]
  J[1549] += dqdci; // dwdot[HCO]/d[C2H]
  J[1554] -= dqdci; // dwdot[C2H]/d[C2H]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5277] -= dqdT; // dwdot[C2H]/dT

  // reaction 171: C2H + H2 <=> C2H2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[21];
  k_f = 56800 * exp(0.9 * logT - (1002.91081494881) * invT);
  dlnkfdT = 0.9 * invT + (1002.91081494881) * invT2;
  // reverse
  phi_r = sc[1] * sc[22];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[21] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[21]) + (h_RT[1] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[21] -= q; // C2H
  wdot[22] += q; // C2H2
  // d()/d[H2]
  dqdci = +k_f * sc[21];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[21] -= dqdci; // dwdot[C2H]/d[H2]
  J[22] += dqdci; // dwdot[C2H2]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[22];
  J[73] -= dqdci; // dwdot[H2]/d[H]
  J[74] += dqdci; // dwdot[H]/d[H]
  J[94] -= dqdci; // dwdot[C2H]/d[H]
  J[95] += dqdci; // dwdot[C2H2]/d[H]
  // d()/d[C2H]
  dqdci = +k_f * sc[0];
  J[1533] -= dqdci; // dwdot[H2]/d[C2H]
  J[1534] += dqdci; // dwdot[H]/d[C2H]
  J[1554] -= dqdci; // dwdot[C2H]/d[C2H]
  J[1555] += dqdci; // dwdot[C2H2]/d[C2H]
  // d()/d[C2H2]
  dqdci = -k_r * sc[1];
  J[1606] -= dqdci; // dwdot[H2]/d[C2H2]
  J[1607] += dqdci; // dwdot[H]/d[C2H2]
  J[1627] -= dqdci; // dwdot[C2H]/d[C2H2]
  J[1628] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5277] -= dqdT; // dwdot[C2H]/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT

  // reaction 172: C2H3 + O2 <=> CH2O + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[23];
  k_f = 45800000000 * exp(-1.39 * logT - (510.76491579179) * invT);
  dlnkfdT = -1.39 * invT + (510.76491579179) * invT2;
  // reverse
  phi_r = sc[16] * sc[17];
  Kc = exp(g_RT[3] - g_RT[16] - g_RT[17] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[23]) + (h_RT[16] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[16] += q; // HCO
  wdot[17] += q; // CH2O
  wdot[23] -= q; // C2H3
  // d()/d[O2]
  dqdci = +k_f * sc[23];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[235] += dqdci; // dwdot[HCO]/d[O2]
  J[236] += dqdci; // dwdot[CH2O]/d[O2]
  J[242] -= dqdci; // dwdot[C2H3]/d[O2]
  // d()/d[HCO]
  dqdci = -k_r * sc[17];
  J[1171] -= dqdci; // dwdot[O2]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] += dqdci; // dwdot[CH2O]/d[HCO]
  J[1191] -= dqdci; // dwdot[C2H3]/d[HCO]
  // d()/d[CH2O]
  dqdci = -k_r * sc[16];
  J[1244] -= dqdci; // dwdot[O2]/d[CH2O]
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1264] -= dqdci; // dwdot[C2H3]/d[CH2O]
  // d()/d[C2H3]
  dqdci = +k_f * sc[3];
  J[1682] -= dqdci; // dwdot[O2]/d[C2H3]
  J[1695] += dqdci; // dwdot[HCO]/d[C2H3]
  J[1696] += dqdci; // dwdot[CH2O]/d[C2H3]
  J[1702] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT

  // reaction 174: C2H5 + O2 <=> C2H4 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[25];
  k_f = 840000 * exp(-(1949.96457999329) * invT);
  dlnkfdT = (1949.96457999329) * invT2;
  // reverse
  phi_r = sc[6] * sc[24];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[24] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[25]) + (h_RT[6] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[24] += q; // C2H4
  wdot[25] -= q; // C2H5
  // d()/d[O2]
  dqdci = +k_f * sc[25];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  J[243] += dqdci; // dwdot[C2H4]/d[O2]
  J[244] -= dqdci; // dwdot[C2H5]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[24];
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[462] += dqdci; // dwdot[C2H4]/d[HO2]
  J[463] -= dqdci; // dwdot[C2H5]/d[HO2]
  // d()/d[C2H4]
  dqdci = -k_r * sc[6];
  J[1755] -= dqdci; // dwdot[O2]/d[C2H4]
  J[1758] += dqdci; // dwdot[HO2]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[1777] -= dqdci; // dwdot[C2H5]/d[C2H4]
  // d()/d[C2H5]
  dqdci = +k_f * sc[3];
  J[1828] -= dqdci; // dwdot[O2]/d[C2H5]
  J[1831] += dqdci; // dwdot[HO2]/d[C2H5]
  J[1849] += dqdci; // dwdot[C2H4]/d[C2H5]
  J[1850] -= dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT
  J[5281] -= dqdT; // dwdot[C2H5]/dT

  // reaction 175: HCCO + O2 <=> 2 CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[27];
  k_f = 3200000 * exp(-(429.747032597231) * invT);
  dlnkfdT = (429.747032597231) * invT2;
  // reverse
  phi_r = sc[4] * (sc[14] * sc[14]);
  Kc = refC * exp(g_RT[3] - g_RT[4] - 2.000000 * g_RT[14] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[3] + h_RT[27]) + (h_RT[4] + 2.000000 * h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;      // O2
  wdot[4] += q;      // OH
  wdot[14] += 2 * q; // CO
  wdot[27] -= q;     // HCCO
  // d()/d[O2]
  dqdci = +k_f * sc[27];
  J[222] -= dqdci;     // dwdot[O2]/d[O2]
  J[223] += dqdci;     // dwdot[OH]/d[O2]
  J[233] += 2 * dqdci; // dwdot[CO]/d[O2]
  J[246] -= dqdci;     // dwdot[HCCO]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[14] * sc[14];
  J[295] -= dqdci;     // dwdot[O2]/d[OH]
  J[296] += dqdci;     // dwdot[OH]/d[OH]
  J[306] += 2 * dqdci; // dwdot[CO]/d[OH]
  J[319] -= dqdci;     // dwdot[HCCO]/d[OH]
  // d()/d[CO]
  dqdci = -k_r * sc[4] * 2.000000 * sc[14];
  J[1025] -= dqdci;     // dwdot[O2]/d[CO]
  J[1026] += dqdci;     // dwdot[OH]/d[CO]
  J[1036] += 2 * dqdci; // dwdot[CO]/d[CO]
  J[1049] -= dqdci;     // dwdot[HCCO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[3];
  J[1974] -= dqdci;     // dwdot[O2]/d[HCCO]
  J[1975] += dqdci;     // dwdot[OH]/d[HCCO]
  J[1985] += 2 * dqdci; // dwdot[CO]/d[HCCO]
  J[1998] -= dqdci;     // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[5259] -= dqdT;     // dwdot[O2]/dT
  J[5260] += dqdT;     // dwdot[OH]/dT
  J[5270] += 2 * dqdT; // dwdot[CO]/dT
  J[5283] -= dqdT;     // dwdot[HCCO]/dT

  // reaction 176: 2 HCCO <=> C2H2 + 2 CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[27] * sc[27]);
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = (sc[14] * sc[14]) * sc[22];
  Kc = refC * exp(-2.000000 * g_RT[14] - g_RT[22] + 2.000000 * g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[27]) + (2.000000 * h_RT[14] + h_RT[22]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += 2 * q; // CO
  wdot[22] += q;     // C2H2
  wdot[27] -= 2 * q; // HCCO
  // d()/d[CO]
  dqdci = -k_r * 2.000000 * sc[14] * sc[22];
  J[1036] += 2 * dqdci;  // dwdot[CO]/d[CO]
  J[1044] += dqdci;      // dwdot[C2H2]/d[CO]
  J[1049] += -2 * dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[C2H2]
  dqdci = -k_r * sc[14] * sc[14];
  J[1620] += 2 * dqdci;  // dwdot[CO]/d[C2H2]
  J[1628] += dqdci;      // dwdot[C2H2]/d[C2H2]
  J[1633] += -2 * dqdci; // dwdot[HCCO]/d[C2H2]
  // d()/d[HCCO]
  dqdci = +k_f * 2.000000 * sc[27];
  J[1985] += 2 * dqdci;  // dwdot[CO]/d[HCCO]
  J[1993] += dqdci;      // dwdot[C2H2]/d[HCCO]
  J[1998] += -2 * dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[5270] += 2 * dqdT;  // dwdot[CO]/dT
  J[5278] += dqdT;      // dwdot[C2H2]/dT
  J[5283] += -2 * dqdT; // dwdot[HCCO]/dT

  // reaction 177: N + NO <=> N2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[30] * sc[35];
  k_f = 27000000 * exp(-(178.641916360675) * invT);
  dlnkfdT = (178.641916360675) * invT2;
  // reverse
  phi_r = sc[2] * sc[47];
  Kc = exp(-g_RT[2] + g_RT[30] + g_RT[35] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[30] + h_RT[35]) + (h_RT[2] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[30] -= q; // N
  wdot[35] -= q; // NO
  wdot[47] += q; // N2
  // d()/d[O]
  dqdci = -k_r * sc[47];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[176] -= dqdci; // dwdot[N]/d[O]
  J[181] -= dqdci; // dwdot[NO]/d[O]
  J[193] += dqdci; // dwdot[N2]/d[O]
  // d()/d[N]
  dqdci = +k_f * sc[35];
  J[2192] += dqdci; // dwdot[O]/d[N]
  J[2220] -= dqdci; // dwdot[N]/d[N]
  J[2225] -= dqdci; // dwdot[NO]/d[N]
  J[2237] += dqdci; // dwdot[N2]/d[N]
  // d()/d[NO]
  dqdci = +k_f * sc[30];
  J[2557] += dqdci; // dwdot[O]/d[NO]
  J[2585] -= dqdci; // dwdot[N]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2602] += dqdci; // dwdot[N2]/d[NO]
  // d()/d[N2]
  dqdci = -k_r * sc[2];
  J[3433] += dqdci; // dwdot[O]/d[N2]
  J[3461] -= dqdci; // dwdot[N]/d[N2]
  J[3466] -= dqdci; // dwdot[NO]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5286] -= dqdT; // dwdot[N]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 178: N + O2 <=> NO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[30];
  k_f = 9000 * exp(1 * logT - (3270.90832773068) * invT);
  dlnkfdT = 1 * invT + (3270.90832773068) * invT2;
  // reverse
  phi_r = sc[2] * sc[35];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[30] - g_RT[35]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[30]) + (h_RT[2] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[30] -= q; // N
  wdot[35] += q; // NO
  // d()/d[O]
  dqdci = -k_r * sc[35];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[176] -= dqdci; // dwdot[N]/d[O]
  J[181] += dqdci; // dwdot[NO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[30];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[249] -= dqdci; // dwdot[N]/d[O2]
  J[254] += dqdci; // dwdot[NO]/d[O2]
  // d()/d[N]
  dqdci = +k_f * sc[3];
  J[2192] += dqdci; // dwdot[O]/d[N]
  J[2193] -= dqdci; // dwdot[O2]/d[N]
  J[2220] -= dqdci; // dwdot[N]/d[N]
  J[2225] += dqdci; // dwdot[NO]/d[N]
  // d()/d[NO]
  dqdci = -k_r * sc[2];
  J[2557] += dqdci; // dwdot[O]/d[NO]
  J[2558] -= dqdci; // dwdot[O2]/d[NO]
  J[2585] -= dqdci; // dwdot[N]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5286] -= dqdT; // dwdot[N]/dT
  J[5291] += dqdT; // dwdot[NO]/dT

  // reaction 179: N + OH <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[30];
  k_f = 33600000 * exp(-(193.738416334817) * invT);
  dlnkfdT = (193.738416334817) * invT2;
  // reverse
  phi_r = sc[1] * sc[35];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[30] - g_RT[35]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[30]) + (h_RT[1] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[30] -= q; // N
  wdot[35] += q; // NO
  // d()/d[H]
  dqdci = -k_r * sc[35];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[103] -= dqdci; // dwdot[N]/d[H]
  J[108] += dqdci; // dwdot[NO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[30];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[322] -= dqdci; // dwdot[N]/d[OH]
  J[327] += dqdci; // dwdot[NO]/d[OH]
  // d()/d[N]
  dqdci = +k_f * sc[4];
  J[2191] += dqdci; // dwdot[H]/d[N]
  J[2194] -= dqdci; // dwdot[OH]/d[N]
  J[2220] -= dqdci; // dwdot[N]/d[N]
  J[2225] += dqdci; // dwdot[NO]/d[N]
  // d()/d[NO]
  dqdci = -k_r * sc[1];
  J[2556] += dqdci; // dwdot[H]/d[NO]
  J[2559] -= dqdci; // dwdot[OH]/d[NO]
  J[2585] -= dqdci; // dwdot[N]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5286] -= dqdT; // dwdot[N]/dT
  J[5291] += dqdT; // dwdot[NO]/dT

  // reaction 180: N2O + O <=> N2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[37];
  k_f = 1400000 * exp(-(5439.77215734902) * invT);
  dlnkfdT = (5439.77215734902) * invT2;
  // reverse
  phi_r = sc[3] * sc[47];
  Kc = exp(g_RT[2] - g_RT[3] + g_RT[37] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[37]) + (h_RT[3] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // O2
  wdot[37] -= q; // N2O
  wdot[47] += q; // N2
  // d()/d[O]
  dqdci = +k_f * sc[37];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[149] += dqdci; // dwdot[O2]/d[O]
  J[183] -= dqdci; // dwdot[N2O]/d[O]
  J[193] += dqdci; // dwdot[N2]/d[O]
  // d()/d[O2]
  dqdci = -k_r * sc[47];
  J[221] -= dqdci; // dwdot[O]/d[O2]
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[256] -= dqdci; // dwdot[N2O]/d[O2]
  J[266] += dqdci; // dwdot[N2]/d[O2]
  // d()/d[N2O]
  dqdci = +k_f * sc[2];
  J[2703] -= dqdci; // dwdot[O]/d[N2O]
  J[2704] += dqdci; // dwdot[O2]/d[N2O]
  J[2738] -= dqdci; // dwdot[N2O]/d[N2O]
  J[2748] += dqdci; // dwdot[N2]/d[N2O]
  // d()/d[N2]
  dqdci = -k_r * sc[3];
  J[3433] -= dqdci; // dwdot[O]/d[N2]
  J[3434] += dqdci; // dwdot[O2]/d[N2]
  J[3468] -= dqdci; // dwdot[N2O]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5293] -= dqdT; // dwdot[N2O]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 181: N2O + O <=> 2 NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[37];
  k_f = 29000000 * exp(-(11649.4658133793) * invT);
  dlnkfdT = (11649.4658133793) * invT2;
  // reverse
  phi_r = (sc[35] * sc[35]);
  Kc = exp(g_RT[2] - 2.000000 * g_RT[35] + g_RT[37]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[37]) + (2.000000 * h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;      // O
  wdot[35] += 2 * q; // NO
  wdot[37] -= q;     // N2O
  // d()/d[O]
  dqdci = +k_f * sc[37];
  J[148] -= dqdci;     // dwdot[O]/d[O]
  J[181] += 2 * dqdci; // dwdot[NO]/d[O]
  J[183] -= dqdci;     // dwdot[N2O]/d[O]
  // d()/d[NO]
  dqdci = -k_r * 2.000000 * sc[35];
  J[2557] -= dqdci;     // dwdot[O]/d[NO]
  J[2590] += 2 * dqdci; // dwdot[NO]/d[NO]
  J[2592] -= dqdci;     // dwdot[N2O]/d[NO]
  // d()/d[N2O]
  dqdci = +k_f * sc[2];
  J[2703] -= dqdci;     // dwdot[O]/d[N2O]
  J[2736] += 2 * dqdci; // dwdot[NO]/d[N2O]
  J[2738] -= dqdci;     // dwdot[N2O]/d[N2O]
  // d()/dT
  J[5258] -= dqdT;     // dwdot[O]/dT
  J[5291] += 2 * dqdT; // dwdot[NO]/dT
  J[5293] -= dqdT;     // dwdot[N2O]/dT

  // reaction 182: H + N2O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[37];
  k_f = 387000000 * exp(-(9500.73065039311) * invT);
  dlnkfdT = (9500.73065039311) * invT2;
  // reverse
  phi_r = sc[4] * sc[47];
  Kc = exp(g_RT[1] - g_RT[4] + g_RT[37] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[37]) + (h_RT[4] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[37] -= q; // N2O
  wdot[47] += q; // N2
  // d()/d[H]
  dqdci = +k_f * sc[37];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[77] += dqdci;  // dwdot[OH]/d[H]
  J[110] -= dqdci; // dwdot[N2O]/d[H]
  J[120] += dqdci; // dwdot[N2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[47];
  J[293] -= dqdci; // dwdot[H]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[329] -= dqdci; // dwdot[N2O]/d[OH]
  J[339] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[N2O]
  dqdci = +k_f * sc[1];
  J[2702] -= dqdci; // dwdot[H]/d[N2O]
  J[2705] += dqdci; // dwdot[OH]/d[N2O]
  J[2738] -= dqdci; // dwdot[N2O]/d[N2O]
  J[2748] += dqdci; // dwdot[N2]/d[N2O]
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[3432] -= dqdci; // dwdot[H]/d[N2]
  J[3435] += dqdci; // dwdot[OH]/d[N2]
  J[3468] -= dqdci; // dwdot[N2O]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5293] -= dqdT; // dwdot[N2O]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 183: N2O + OH <=> HO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[37];
  k_f = 2000000 * exp(-(10597.7429818474) * invT);
  dlnkfdT = (10597.7429818474) * invT2;
  // reverse
  phi_r = sc[6] * sc[47];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[37] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[37]) + (h_RT[6] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // HO2
  wdot[37] -= q; // N2O
  wdot[47] += q; // N2
  // d()/d[OH]
  dqdci = +k_f * sc[37];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[298] += dqdci; // dwdot[HO2]/d[OH]
  J[329] -= dqdci; // dwdot[N2O]/d[OH]
  J[339] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[47];
  J[442] -= dqdci; // dwdot[OH]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[475] -= dqdci; // dwdot[N2O]/d[HO2]
  J[485] += dqdci; // dwdot[N2]/d[HO2]
  // d()/d[N2O]
  dqdci = +k_f * sc[4];
  J[2705] -= dqdci; // dwdot[OH]/d[N2O]
  J[2707] += dqdci; // dwdot[HO2]/d[N2O]
  J[2738] -= dqdci; // dwdot[N2O]/d[N2O]
  J[2748] += dqdci; // dwdot[N2]/d[N2O]
  // d()/d[N2]
  dqdci = -k_r * sc[6];
  J[3435] -= dqdci; // dwdot[OH]/d[N2]
  J[3437] += dqdci; // dwdot[HO2]/d[N2]
  J[3468] -= dqdci; // dwdot[N2O]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5293] -= dqdT; // dwdot[N2O]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 185: HO2 + NO <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[35];
  k_f = 2110000 * exp(-(-241.543999586265) * invT);
  dlnkfdT = (-241.543999586265) * invT2;
  // reverse
  phi_r = sc[4] * sc[36];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[35] - g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[35]) + (h_RT[4] + h_RT[36]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[35] -= q; // NO
  wdot[36] += q; // NO2
  // d()/d[OH]
  dqdci = -k_r * sc[36];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[298] -= dqdci; // dwdot[HO2]/d[OH]
  J[327] -= dqdci; // dwdot[NO]/d[OH]
  J[328] += dqdci; // dwdot[NO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[35];
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[473] -= dqdci; // dwdot[NO]/d[HO2]
  J[474] += dqdci; // dwdot[NO2]/d[HO2]
  // d()/d[NO]
  dqdci = +k_f * sc[6];
  J[2559] += dqdci; // dwdot[OH]/d[NO]
  J[2561] -= dqdci; // dwdot[HO2]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2591] += dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[4];
  J[2632] += dqdci; // dwdot[OH]/d[NO2]
  J[2634] -= dqdci; // dwdot[HO2]/d[NO2]
  J[2663] -= dqdci; // dwdot[NO]/d[NO2]
  J[2664] += dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5292] += dqdT; // dwdot[NO2]/dT

  // reaction 187: NO2 + O <=> NO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[36];
  k_f = 3900000 * exp(-(-120.771999793133) * invT);
  dlnkfdT = (-120.771999793133) * invT2;
  // reverse
  phi_r = sc[3] * sc[35];
  Kc = exp(g_RT[2] - g_RT[3] - g_RT[35] + g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[36]) + (h_RT[3] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // O2
  wdot[35] += q; // NO
  wdot[36] -= q; // NO2
  // d()/d[O]
  dqdci = +k_f * sc[36];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[149] += dqdci; // dwdot[O2]/d[O]
  J[181] += dqdci; // dwdot[NO]/d[O]
  J[182] -= dqdci; // dwdot[NO2]/d[O]
  // d()/d[O2]
  dqdci = -k_r * sc[35];
  J[221] -= dqdci; // dwdot[O]/d[O2]
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[254] += dqdci; // dwdot[NO]/d[O2]
  J[255] -= dqdci; // dwdot[NO2]/d[O2]
  // d()/d[NO]
  dqdci = -k_r * sc[3];
  J[2557] -= dqdci; // dwdot[O]/d[NO]
  J[2558] += dqdci; // dwdot[O2]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2591] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[2];
  J[2630] -= dqdci; // dwdot[O]/d[NO2]
  J[2631] += dqdci; // dwdot[O2]/d[NO2]
  J[2663] += dqdci; // dwdot[NO]/d[NO2]
  J[2664] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5292] -= dqdT; // dwdot[NO2]/dT

  // reaction 188: H + NO2 <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[36];
  k_f = 132000000 * exp(-(181.157999689699) * invT);
  dlnkfdT = (181.157999689699) * invT2;
  // reverse
  phi_r = sc[4] * sc[35];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[35] + g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[36]) + (h_RT[4] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[35] += q; // NO
  wdot[36] -= q; // NO2
  // d()/d[H]
  dqdci = +k_f * sc[36];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[77] += dqdci;  // dwdot[OH]/d[H]
  J[108] += dqdci; // dwdot[NO]/d[H]
  J[109] -= dqdci; // dwdot[NO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[35];
  J[293] -= dqdci; // dwdot[H]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[327] += dqdci; // dwdot[NO]/d[OH]
  J[328] -= dqdci; // dwdot[NO2]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[2556] -= dqdci; // dwdot[H]/d[NO]
  J[2559] += dqdci; // dwdot[OH]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2591] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[1];
  J[2629] -= dqdci; // dwdot[H]/d[NO2]
  J[2632] += dqdci; // dwdot[OH]/d[NO2]
  J[2663] += dqdci; // dwdot[NO]/d[NO2]
  J[2664] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5292] -= dqdT; // dwdot[NO2]/dT

  // reaction 189: NH + O <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[31];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[35];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[31] - g_RT[35]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[31]) + (h_RT[1] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[31] -= q; // NH
  wdot[35] += q; // NO
  // d()/d[H]
  dqdci = -k_r * sc[35];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[75] -= dqdci;  // dwdot[O]/d[H]
  J[104] -= dqdci; // dwdot[NH]/d[H]
  J[108] += dqdci; // dwdot[NO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[31];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[177] -= dqdci; // dwdot[NH]/d[O]
  J[181] += dqdci; // dwdot[NO]/d[O]
  // d()/d[NH]
  dqdci = +k_f * sc[2];
  J[2264] += dqdci; // dwdot[H]/d[NH]
  J[2265] -= dqdci; // dwdot[O]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  J[2298] += dqdci; // dwdot[NO]/d[NH]
  // d()/d[NO]
  dqdci = -k_r * sc[1];
  J[2556] += dqdci; // dwdot[H]/d[NO]
  J[2557] -= dqdci; // dwdot[O]/d[NO]
  J[2586] -= dqdci; // dwdot[NH]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT
  J[5291] += dqdT; // dwdot[NO]/dT

  // reaction 190: H + NH <=> H2 + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[31];
  k_f = 32000000 * exp(-(166.061499715557) * invT);
  dlnkfdT = (166.061499715557) * invT2;
  // reverse
  phi_r = sc[0] * sc[30];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[30] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[31]) + (h_RT[0] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[30] += q; // N
  wdot[31] -= q; // NH
  // d()/d[H2]
  dqdci = -k_r * sc[30];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[30] += dqdci; // dwdot[N]/d[H2]
  J[31] -= dqdci; // dwdot[NH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[31];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[103] += dqdci; // dwdot[N]/d[H]
  J[104] -= dqdci; // dwdot[NH]/d[H]
  // d()/d[N]
  dqdci = -k_r * sc[0];
  J[2190] += dqdci; // dwdot[H2]/d[N]
  J[2191] -= dqdci; // dwdot[H]/d[N]
  J[2220] += dqdci; // dwdot[N]/d[N]
  J[2221] -= dqdci; // dwdot[NH]/d[N]
  // d()/d[NH]
  dqdci = +k_f * sc[1];
  J[2263] += dqdci; // dwdot[H2]/d[NH]
  J[2264] -= dqdci; // dwdot[H]/d[NH]
  J[2293] += dqdci; // dwdot[N]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5286] += dqdT; // dwdot[N]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT

  // reaction 191: NH + OH <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[31];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[38];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[31] - g_RT[38]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[31]) + (h_RT[1] + h_RT[38]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[31] -= q; // NH
  wdot[38] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[38];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[104] -= dqdci; // dwdot[NH]/d[H]
  J[111] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[31];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[323] -= dqdci; // dwdot[NH]/d[OH]
  J[330] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[4];
  J[2264] += dqdci; // dwdot[H]/d[NH]
  J[2267] -= dqdci; // dwdot[OH]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  J[2301] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[1];
  J[2775] += dqdci; // dwdot[H]/d[HNO]
  J[2778] -= dqdci; // dwdot[OH]/d[HNO]
  J[2805] -= dqdci; // dwdot[NH]/d[HNO]
  J[2812] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT
  J[5294] += dqdT; // dwdot[HNO]/dT

  // reaction 192: NH + OH <=> H2O + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[31];
  k_f = 2000 * exp(1.2 * logT);
  dlnkfdT = 1.2 * invT;
  // reverse
  phi_r = sc[5] * sc[30];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[30] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[31]) + (h_RT[5] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[30] += q; // N
  wdot[31] -= q; // NH
  // d()/d[OH]
  dqdci = +k_f * sc[31];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[322] += dqdci; // dwdot[N]/d[OH]
  J[323] -= dqdci; // dwdot[NH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[30];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[395] += dqdci; // dwdot[N]/d[H2O]
  J[396] -= dqdci; // dwdot[NH]/d[H2O]
  // d()/d[N]
  dqdci = -k_r * sc[5];
  J[2194] -= dqdci; // dwdot[OH]/d[N]
  J[2195] += dqdci; // dwdot[H2O]/d[N]
  J[2220] += dqdci; // dwdot[N]/d[N]
  J[2221] -= dqdci; // dwdot[NH]/d[N]
  // d()/d[NH]
  dqdci = +k_f * sc[4];
  J[2267] -= dqdci; // dwdot[OH]/d[NH]
  J[2268] += dqdci; // dwdot[H2O]/d[NH]
  J[2293] += dqdci; // dwdot[N]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5286] += dqdT; // dwdot[N]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT

  // reaction 193: NH + O2 <=> HNO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[31];
  k_f = 0.461 * exp(2 * logT - (3270.90832773068) * invT);
  dlnkfdT = 2 * invT + (3270.90832773068) * invT2;
  // reverse
  phi_r = sc[2] * sc[38];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[31] - g_RT[38]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[31]) + (h_RT[2] + h_RT[38]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[31] -= q; // NH
  wdot[38] += q; // HNO
  // d()/d[O]
  dqdci = -k_r * sc[38];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[177] -= dqdci; // dwdot[NH]/d[O]
  J[184] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[31];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[250] -= dqdci; // dwdot[NH]/d[O2]
  J[257] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[NH]
  dqdci = +k_f * sc[3];
  J[2265] += dqdci; // dwdot[O]/d[NH]
  J[2266] -= dqdci; // dwdot[O2]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  J[2301] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[2776] += dqdci; // dwdot[O]/d[HNO]
  J[2777] -= dqdci; // dwdot[O2]/d[HNO]
  J[2805] -= dqdci; // dwdot[NH]/d[HNO]
  J[2812] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT
  J[5294] += dqdT; // dwdot[HNO]/dT

  // reaction 194: NH + O2 <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[31];
  k_f = 1.28 * exp(1.5 * logT - (50.321666580472) * invT);
  dlnkfdT = 1.5 * invT + (50.321666580472) * invT2;
  // reverse
  phi_r = sc[4] * sc[35];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[31] - g_RT[35]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[31]) + (h_RT[4] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // OH
  wdot[31] -= q; // NH
  wdot[35] += q; // NO
  // d()/d[O2]
  dqdci = +k_f * sc[31];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[223] += dqdci; // dwdot[OH]/d[O2]
  J[250] -= dqdci; // dwdot[NH]/d[O2]
  J[254] += dqdci; // dwdot[NO]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[35];
  J[295] -= dqdci; // dwdot[O2]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[323] -= dqdci; // dwdot[NH]/d[OH]
  J[327] += dqdci; // dwdot[NO]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[3];
  J[2266] -= dqdci; // dwdot[O2]/d[NH]
  J[2267] += dqdci; // dwdot[OH]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  J[2298] += dqdci; // dwdot[NO]/d[NH]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[2558] -= dqdci; // dwdot[O2]/d[NO]
  J[2559] += dqdci; // dwdot[OH]/d[NO]
  J[2586] -= dqdci; // dwdot[NH]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT
  J[5291] += dqdT; // dwdot[NO]/dT

  // reaction 195: N + NH <=> H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[30] * sc[31];
  k_f = 15000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[47];
  Kc = exp(-g_RT[1] + g_RT[30] + g_RT[31] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[30] + h_RT[31]) + (h_RT[1] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[30] -= q; // N
  wdot[31] -= q; // NH
  wdot[47] += q; // N2
  // d()/d[H]
  dqdci = -k_r * sc[47];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[103] -= dqdci; // dwdot[N]/d[H]
  J[104] -= dqdci; // dwdot[NH]/d[H]
  J[120] += dqdci; // dwdot[N2]/d[H]
  // d()/d[N]
  dqdci = +k_f * sc[31];
  J[2191] += dqdci; // dwdot[H]/d[N]
  J[2220] -= dqdci; // dwdot[N]/d[N]
  J[2221] -= dqdci; // dwdot[NH]/d[N]
  J[2237] += dqdci; // dwdot[N2]/d[N]
  // d()/d[NH]
  dqdci = +k_f * sc[30];
  J[2264] += dqdci; // dwdot[H]/d[NH]
  J[2293] -= dqdci; // dwdot[N]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  J[2310] += dqdci; // dwdot[N2]/d[NH]
  // d()/d[N2]
  dqdci = -k_r * sc[1];
  J[3432] += dqdci; // dwdot[H]/d[N2]
  J[3461] -= dqdci; // dwdot[N]/d[N2]
  J[3462] -= dqdci; // dwdot[NH]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5286] -= dqdT; // dwdot[N]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 196: H2O + NH <=> H2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[31];
  k_f = 20000000 * exp(-(6969.55082139537) * invT);
  dlnkfdT = (6969.55082139537) * invT2;
  // reverse
  phi_r = sc[0] * sc[38];
  Kc = exp(-g_RT[0] + g_RT[5] + g_RT[31] - g_RT[38]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[31]) + (h_RT[0] + h_RT[38]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[5] -= q;  // H2O
  wdot[31] -= q; // NH
  wdot[38] += q; // HNO
  // d()/d[H2]
  dqdci = -k_r * sc[38];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[5] -= dqdci;  // dwdot[H2O]/d[H2]
  J[31] -= dqdci; // dwdot[NH]/d[H2]
  J[38] += dqdci; // dwdot[HNO]/d[H2]
  // d()/d[H2O]
  dqdci = +k_f * sc[31];
  J[365] += dqdci; // dwdot[H2]/d[H2O]
  J[370] -= dqdci; // dwdot[H2O]/d[H2O]
  J[396] -= dqdci; // dwdot[NH]/d[H2O]
  J[403] += dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[NH]
  dqdci = +k_f * sc[5];
  J[2263] += dqdci; // dwdot[H2]/d[NH]
  J[2268] -= dqdci; // dwdot[H2O]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  J[2301] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[0];
  J[2774] += dqdci; // dwdot[H2]/d[HNO]
  J[2779] -= dqdci; // dwdot[H2O]/d[HNO]
  J[2805] -= dqdci; // dwdot[NH]/d[HNO]
  J[2812] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5261] -= dqdT; // dwdot[H2O]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT
  J[5294] += dqdT; // dwdot[HNO]/dT

  // reaction 197: NH + NO <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[31] * sc[35];
  k_f = 21600000 * exp(-0.23 * logT);
  dlnkfdT = -0.23 * invT;
  // reverse
  phi_r = sc[4] * sc[47];
  Kc = exp(-g_RT[4] + g_RT[31] + g_RT[35] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[31] + h_RT[35]) + (h_RT[4] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[31] -= q; // NH
  wdot[35] -= q; // NO
  wdot[47] += q; // N2
  // d()/d[OH]
  dqdci = -k_r * sc[47];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[323] -= dqdci; // dwdot[NH]/d[OH]
  J[327] -= dqdci; // dwdot[NO]/d[OH]
  J[339] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[35];
  J[2267] += dqdci; // dwdot[OH]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  J[2298] -= dqdci; // dwdot[NO]/d[NH]
  J[2310] += dqdci; // dwdot[N2]/d[NH]
  // d()/d[NO]
  dqdci = +k_f * sc[31];
  J[2559] += dqdci; // dwdot[OH]/d[NO]
  J[2586] -= dqdci; // dwdot[NH]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2602] += dqdci; // dwdot[N2]/d[NO]
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[3435] += dqdci; // dwdot[OH]/d[N2]
  J[3462] -= dqdci; // dwdot[NH]/d[N2]
  J[3466] -= dqdci; // dwdot[NO]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 198: NH + NO <=> H + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[31] * sc[35];
  k_f = 365000000 * exp(-0.45 * logT);
  dlnkfdT = -0.45 * invT;
  // reverse
  phi_r = sc[1] * sc[37];
  Kc = exp(-g_RT[1] + g_RT[31] + g_RT[35] - g_RT[37]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[31] + h_RT[35]) + (h_RT[1] + h_RT[37]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[31] -= q; // NH
  wdot[35] -= q; // NO
  wdot[37] += q; // N2O
  // d()/d[H]
  dqdci = -k_r * sc[37];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[104] -= dqdci; // dwdot[NH]/d[H]
  J[108] -= dqdci; // dwdot[NO]/d[H]
  J[110] += dqdci; // dwdot[N2O]/d[H]
  // d()/d[NH]
  dqdci = +k_f * sc[35];
  J[2264] += dqdci; // dwdot[H]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  J[2298] -= dqdci; // dwdot[NO]/d[NH]
  J[2300] += dqdci; // dwdot[N2O]/d[NH]
  // d()/d[NO]
  dqdci = +k_f * sc[31];
  J[2556] += dqdci; // dwdot[H]/d[NO]
  J[2586] -= dqdci; // dwdot[NH]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2592] += dqdci; // dwdot[N2O]/d[NO]
  // d()/d[N2O]
  dqdci = -k_r * sc[1];
  J[2702] += dqdci; // dwdot[H]/d[N2O]
  J[2732] -= dqdci; // dwdot[NH]/d[N2O]
  J[2736] -= dqdci; // dwdot[NO]/d[N2O]
  J[2738] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5293] += dqdT; // dwdot[N2O]/dT

  // reaction 199: NH2 + O <=> NH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[32];
  k_f = 3000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[31];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[31] + g_RT[32]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[32]) + (h_RT[4] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[31] += q; // NH
  wdot[32] -= q; // NH2
  // d()/d[O]
  dqdci = +k_f * sc[32];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[177] += dqdci; // dwdot[NH]/d[O]
  J[178] -= dqdci; // dwdot[NH2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[31];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[323] += dqdci; // dwdot[NH]/d[OH]
  J[324] -= dqdci; // dwdot[NH2]/d[OH]
  // d()/d[NH]
  dqdci = -k_r * sc[4];
  J[2265] -= dqdci; // dwdot[O]/d[NH]
  J[2267] += dqdci; // dwdot[OH]/d[NH]
  J[2294] += dqdci; // dwdot[NH]/d[NH]
  J[2295] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[2];
  J[2338] -= dqdci; // dwdot[O]/d[NH2]
  J[2340] += dqdci; // dwdot[OH]/d[NH2]
  J[2367] += dqdci; // dwdot[NH]/d[NH2]
  J[2368] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5287] += dqdT; // dwdot[NH]/dT
  J[5288] -= dqdT; // dwdot[NH2]/dT

  // reaction 200: NH2 + O <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[32];
  k_f = 39000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[38];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[32] - g_RT[38]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[32]) + (h_RT[1] + h_RT[38]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[32] -= q; // NH2
  wdot[38] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[38];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[75] -= dqdci;  // dwdot[O]/d[H]
  J[105] -= dqdci; // dwdot[NH2]/d[H]
  J[111] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[32];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[178] -= dqdci; // dwdot[NH2]/d[O]
  J[184] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH2]
  dqdci = +k_f * sc[2];
  J[2337] += dqdci; // dwdot[H]/d[NH2]
  J[2338] -= dqdci; // dwdot[O]/d[NH2]
  J[2368] -= dqdci; // dwdot[NH2]/d[NH2]
  J[2374] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[1];
  J[2775] += dqdci; // dwdot[H]/d[HNO]
  J[2776] -= dqdci; // dwdot[O]/d[HNO]
  J[2806] -= dqdci; // dwdot[NH2]/d[HNO]
  J[2812] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5288] -= dqdT; // dwdot[NH2]/dT
  J[5294] += dqdT; // dwdot[HNO]/dT

  // reaction 201: H + NH2 <=> H2 + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[32];
  k_f = 40000000 * exp(-(1836.74083018723) * invT);
  dlnkfdT = (1836.74083018723) * invT2;
  // reverse
  phi_r = sc[0] * sc[31];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[31] + g_RT[32]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[32]) + (h_RT[0] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[31] += q; // NH
  wdot[32] -= q; // NH2
  // d()/d[H2]
  dqdci = -k_r * sc[31];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[31] += dqdci; // dwdot[NH]/d[H2]
  J[32] -= dqdci; // dwdot[NH2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[32];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[104] += dqdci; // dwdot[NH]/d[H]
  J[105] -= dqdci; // dwdot[NH2]/d[H]
  // d()/d[NH]
  dqdci = -k_r * sc[0];
  J[2263] += dqdci; // dwdot[H2]/d[NH]
  J[2264] -= dqdci; // dwdot[H]/d[NH]
  J[2294] += dqdci; // dwdot[NH]/d[NH]
  J[2295] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[1];
  J[2336] += dqdci; // dwdot[H2]/d[NH2]
  J[2337] -= dqdci; // dwdot[H]/d[NH2]
  J[2367] += dqdci; // dwdot[NH]/d[NH2]
  J[2368] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5287] += dqdT; // dwdot[NH]/dT
  J[5288] -= dqdT; // dwdot[NH2]/dT

  // reaction 202: NH2 + OH <=> H2O + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[32];
  k_f = 90 * exp(1.5 * logT - (-231.479666270171) * invT);
  dlnkfdT = 1.5 * invT + (-231.479666270171) * invT2;
  // reverse
  phi_r = sc[5] * sc[31];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[31] + g_RT[32]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[32]) + (h_RT[5] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[31] += q; // NH
  wdot[32] -= q; // NH2
  // d()/d[OH]
  dqdci = +k_f * sc[32];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[323] += dqdci; // dwdot[NH]/d[OH]
  J[324] -= dqdci; // dwdot[NH2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[31];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[396] += dqdci; // dwdot[NH]/d[H2O]
  J[397] -= dqdci; // dwdot[NH2]/d[H2O]
  // d()/d[NH]
  dqdci = -k_r * sc[5];
  J[2267] -= dqdci; // dwdot[OH]/d[NH]
  J[2268] += dqdci; // dwdot[H2O]/d[NH]
  J[2294] += dqdci; // dwdot[NH]/d[NH]
  J[2295] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[4];
  J[2340] -= dqdci; // dwdot[OH]/d[NH2]
  J[2341] += dqdci; // dwdot[H2O]/d[NH2]
  J[2367] += dqdci; // dwdot[NH]/d[NH2]
  J[2368] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5287] += dqdT; // dwdot[NH]/dT
  J[5288] -= dqdT; // dwdot[NH2]/dT

  // reaction 203: NNH <=> H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[34];
  k_f = 330000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[47];
  Kc = refC * exp(-g_RT[1] + g_RT[34] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[34]) + (h_RT[1] + h_RT[47]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[34] -= q; // NNH
  wdot[47] += q; // N2
  // d()/d[H]
  dqdci = -k_r * sc[47];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[107] -= dqdci; // dwdot[NNH]/d[H]
  J[120] += dqdci; // dwdot[N2]/d[H]
  // d()/d[NNH]
  dqdci = +k_f;
  J[2483] += dqdci; // dwdot[H]/d[NNH]
  J[2516] -= dqdci; // dwdot[NNH]/d[NNH]
  J[2529] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[1];
  J[3432] += dqdci; // dwdot[H]/d[N2]
  J[3465] -= dqdci; // dwdot[NNH]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5290] -= dqdT; // dwdot[NNH]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 205: NNH + O2 <=> HO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[34];
  k_f = 5000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[47];
  Kc = exp(g_RT[3] - g_RT[6] + g_RT[34] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[34]) + (h_RT[6] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[34] -= q; // NNH
  wdot[47] += q; // N2
  // d()/d[O2]
  dqdci = +k_f * sc[34];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  J[253] -= dqdci; // dwdot[NNH]/d[O2]
  J[266] += dqdci; // dwdot[N2]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[47];
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[472] -= dqdci; // dwdot[NNH]/d[HO2]
  J[485] += dqdci; // dwdot[N2]/d[HO2]
  // d()/d[NNH]
  dqdci = +k_f * sc[3];
  J[2485] -= dqdci; // dwdot[O2]/d[NNH]
  J[2488] += dqdci; // dwdot[HO2]/d[NNH]
  J[2516] -= dqdci; // dwdot[NNH]/d[NNH]
  J[2529] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[6];
  J[3434] -= dqdci; // dwdot[O2]/d[N2]
  J[3437] += dqdci; // dwdot[HO2]/d[N2]
  J[3465] -= dqdci; // dwdot[NNH]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5290] -= dqdT; // dwdot[NNH]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 206: NNH + O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[34];
  k_f = 25000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[47];
  Kc = exp(g_RT[2] - g_RT[4] + g_RT[34] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[34]) + (h_RT[4] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[34] -= q; // NNH
  wdot[47] += q; // N2
  // d()/d[O]
  dqdci = +k_f * sc[34];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[180] -= dqdci; // dwdot[NNH]/d[O]
  J[193] += dqdci; // dwdot[N2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[47];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[326] -= dqdci; // dwdot[NNH]/d[OH]
  J[339] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[NNH]
  dqdci = +k_f * sc[2];
  J[2484] -= dqdci; // dwdot[O]/d[NNH]
  J[2486] += dqdci; // dwdot[OH]/d[NNH]
  J[2516] -= dqdci; // dwdot[NNH]/d[NNH]
  J[2529] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[3433] -= dqdci; // dwdot[O]/d[N2]
  J[3435] += dqdci; // dwdot[OH]/d[N2]
  J[3465] -= dqdci; // dwdot[NNH]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5290] -= dqdT; // dwdot[NNH]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 207: NNH + O <=> NH + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[34];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[31] * sc[35];
  Kc = exp(g_RT[2] - g_RT[31] + g_RT[34] - g_RT[35]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[34]) + (h_RT[31] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[31] += q; // NH
  wdot[34] -= q; // NNH
  wdot[35] += q; // NO
  // d()/d[O]
  dqdci = +k_f * sc[34];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[177] += dqdci; // dwdot[NH]/d[O]
  J[180] -= dqdci; // dwdot[NNH]/d[O]
  J[181] += dqdci; // dwdot[NO]/d[O]
  // d()/d[NH]
  dqdci = -k_r * sc[35];
  J[2265] -= dqdci; // dwdot[O]/d[NH]
  J[2294] += dqdci; // dwdot[NH]/d[NH]
  J[2297] -= dqdci; // dwdot[NNH]/d[NH]
  J[2298] += dqdci; // dwdot[NO]/d[NH]
  // d()/d[NNH]
  dqdci = +k_f * sc[2];
  J[2484] -= dqdci; // dwdot[O]/d[NNH]
  J[2513] += dqdci; // dwdot[NH]/d[NNH]
  J[2516] -= dqdci; // dwdot[NNH]/d[NNH]
  J[2517] += dqdci; // dwdot[NO]/d[NNH]
  // d()/d[NO]
  dqdci = -k_r * sc[31];
  J[2557] -= dqdci; // dwdot[O]/d[NO]
  J[2586] += dqdci; // dwdot[NH]/d[NO]
  J[2589] -= dqdci; // dwdot[NNH]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5287] += dqdT; // dwdot[NH]/dT
  J[5290] -= dqdT; // dwdot[NNH]/dT
  J[5291] += dqdT; // dwdot[NO]/dT

  // reaction 208: H + NNH <=> H2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[34];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[47];
  Kc = exp(-g_RT[0] + g_RT[1] + g_RT[34] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[34]) + (h_RT[0] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[34] -= q; // NNH
  wdot[47] += q; // N2
  // d()/d[H2]
  dqdci = -k_r * sc[47];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[34] -= dqdci; // dwdot[NNH]/d[H2]
  J[47] += dqdci; // dwdot[N2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[34];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[107] -= dqdci; // dwdot[NNH]/d[H]
  J[120] += dqdci; // dwdot[N2]/d[H]
  // d()/d[NNH]
  dqdci = +k_f * sc[1];
  J[2482] += dqdci; // dwdot[H2]/d[NNH]
  J[2483] -= dqdci; // dwdot[H]/d[NNH]
  J[2516] -= dqdci; // dwdot[NNH]/d[NNH]
  J[2529] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[0];
  J[3431] += dqdci; // dwdot[H2]/d[N2]
  J[3432] -= dqdci; // dwdot[H]/d[N2]
  J[3465] -= dqdci; // dwdot[NNH]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5290] -= dqdT; // dwdot[NNH]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 209: NNH + OH <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[34];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[47];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[34] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[34]) + (h_RT[5] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[34] -= q; // NNH
  wdot[47] += q; // N2
  // d()/d[OH]
  dqdci = +k_f * sc[34];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[326] -= dqdci; // dwdot[NNH]/d[OH]
  J[339] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[47];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[399] -= dqdci; // dwdot[NNH]/d[H2O]
  J[412] += dqdci; // dwdot[N2]/d[H2O]
  // d()/d[NNH]
  dqdci = +k_f * sc[4];
  J[2486] -= dqdci; // dwdot[OH]/d[NNH]
  J[2487] += dqdci; // dwdot[H2O]/d[NNH]
  J[2516] -= dqdci; // dwdot[NNH]/d[NNH]
  J[2529] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[3435] -= dqdci; // dwdot[OH]/d[N2]
  J[3436] += dqdci; // dwdot[H2O]/d[N2]
  J[3465] -= dqdci; // dwdot[NNH]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5290] -= dqdT; // dwdot[NNH]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 210: CH3 + NNH <=> CH4 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[34];
  k_f = 25000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[13] * sc[47];
  Kc = exp(g_RT[12] - g_RT[13] + g_RT[34] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[34]) + (h_RT[13] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[34] -= q; // NNH
  wdot[47] += q; // N2
  // d()/d[CH3]
  dqdci = +k_f * sc[34];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[910] -= dqdci; // dwdot[NNH]/d[CH3]
  J[923] += dqdci; // dwdot[N2]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[47];
  J[961] -= dqdci; // dwdot[CH3]/d[CH4]
  J[962] += dqdci; // dwdot[CH4]/d[CH4]
  J[983] -= dqdci; // dwdot[NNH]/d[CH4]
  J[996] += dqdci; // dwdot[N2]/d[CH4]
  // d()/d[NNH]
  dqdci = +k_f * sc[12];
  J[2494] -= dqdci; // dwdot[CH3]/d[NNH]
  J[2495] += dqdci; // dwdot[CH4]/d[NNH]
  J[2516] -= dqdci; // dwdot[NNH]/d[NNH]
  J[2529] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[13];
  J[3443] -= dqdci; // dwdot[CH3]/d[N2]
  J[3444] += dqdci; // dwdot[CH4]/d[N2]
  J[3465] -= dqdci; // dwdot[NNH]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5290] -= dqdT; // dwdot[NNH]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 212: HNO + O <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[38];
  k_f = 25000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[35];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[35] + g_RT[38]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[38]) + (h_RT[4] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[35] += q; // NO
  wdot[38] -= q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[38];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[181] += dqdci; // dwdot[NO]/d[O]
  J[184] -= dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[35];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[327] += dqdci; // dwdot[NO]/d[OH]
  J[330] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[2557] -= dqdci; // dwdot[O]/d[NO]
  J[2559] += dqdci; // dwdot[OH]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2593] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[2];
  J[2776] -= dqdci; // dwdot[O]/d[HNO]
  J[2778] += dqdci; // dwdot[OH]/d[HNO]
  J[2809] += dqdci; // dwdot[NO]/d[HNO]
  J[2812] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5294] -= dqdT; // dwdot[HNO]/dT

  // reaction 213: H + HNO <=> H2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[38];
  k_f = 900000 * exp(0.72 * logT - (332.122999431115) * invT);
  dlnkfdT = 0.72 * invT + (332.122999431115) * invT2;
  // reverse
  phi_r = sc[0] * sc[35];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[35] + g_RT[38]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[38]) + (h_RT[0] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[35] += q; // NO
  wdot[38] -= q; // HNO
  // d()/d[H2]
  dqdci = -k_r * sc[35];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[35] += dqdci; // dwdot[NO]/d[H2]
  J[38] -= dqdci; // dwdot[HNO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[38];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[108] += dqdci; // dwdot[NO]/d[H]
  J[111] -= dqdci; // dwdot[HNO]/d[H]
  // d()/d[NO]
  dqdci = -k_r * sc[0];
  J[2555] += dqdci; // dwdot[H2]/d[NO]
  J[2556] -= dqdci; // dwdot[H]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2593] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[1];
  J[2774] += dqdci; // dwdot[H2]/d[HNO]
  J[2775] -= dqdci; // dwdot[H]/d[HNO]
  J[2809] += dqdci; // dwdot[NO]/d[HNO]
  J[2812] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5294] -= dqdT; // dwdot[HNO]/dT

  // reaction 214: HNO + OH <=> H2O + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[38];
  k_f = 13 * exp(1.9 * logT - (-478.055832514484) * invT);
  dlnkfdT = 1.9 * invT + (-478.055832514484) * invT2;
  // reverse
  phi_r = sc[5] * sc[35];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[35] + g_RT[38]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[38]) + (h_RT[5] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[35] += q; // NO
  wdot[38] -= q; // HNO
  // d()/d[OH]
  dqdci = +k_f * sc[38];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[327] += dqdci; // dwdot[NO]/d[OH]
  J[330] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[35];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[400] += dqdci; // dwdot[NO]/d[H2O]
  J[403] -= dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[5];
  J[2559] -= dqdci; // dwdot[OH]/d[NO]
  J[2560] += dqdci; // dwdot[H2O]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2593] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[4];
  J[2778] -= dqdci; // dwdot[OH]/d[HNO]
  J[2779] += dqdci; // dwdot[H2O]/d[HNO]
  J[2809] += dqdci; // dwdot[NO]/d[HNO]
  J[2812] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5294] -= dqdT; // dwdot[HNO]/dT

  // reaction 215: HNO + O2 <=> HO2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[38];
  k_f = 10000000 * exp(-(6541.81665546136) * invT);
  dlnkfdT = (6541.81665546136) * invT2;
  // reverse
  phi_r = sc[6] * sc[35];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[35] + g_RT[38]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[38]) + (h_RT[6] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[35] += q; // NO
  wdot[38] -= q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[38];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  J[254] += dqdci; // dwdot[NO]/d[O2]
  J[257] -= dqdci; // dwdot[HNO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[35];
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[473] += dqdci; // dwdot[NO]/d[HO2]
  J[476] -= dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[NO]
  dqdci = -k_r * sc[6];
  J[2558] -= dqdci; // dwdot[O2]/d[NO]
  J[2561] += dqdci; // dwdot[HO2]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2593] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[3];
  J[2777] -= dqdci; // dwdot[O2]/d[HNO]
  J[2780] += dqdci; // dwdot[HO2]/d[HNO]
  J[2809] += dqdci; // dwdot[NO]/d[HNO]
  J[2812] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5294] -= dqdT; // dwdot[HNO]/dT

  // reaction 216: CN + O <=> CO + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[39];
  k_f = 77000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[30];
  Kc = exp(g_RT[2] - g_RT[14] - g_RT[30] + g_RT[39]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[39]) + (h_RT[14] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[14] += q; // CO
  wdot[30] += q; // N
  wdot[39] -= q; // CN
  // d()/d[O]
  dqdci = +k_f * sc[39];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[176] += dqdci; // dwdot[N]/d[O]
  J[185] -= dqdci; // dwdot[CN]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc[30];
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1052] += dqdci; // dwdot[N]/d[CO]
  J[1061] -= dqdci; // dwdot[CN]/d[CO]
  // d()/d[N]
  dqdci = -k_r * sc[14];
  J[2192] -= dqdci; // dwdot[O]/d[N]
  J[2204] += dqdci; // dwdot[CO]/d[N]
  J[2220] += dqdci; // dwdot[N]/d[N]
  J[2229] -= dqdci; // dwdot[CN]/d[N]
  // d()/d[CN]
  dqdci = +k_f * sc[2];
  J[2849] -= dqdci; // dwdot[O]/d[CN]
  J[2861] += dqdci; // dwdot[CO]/d[CN]
  J[2877] += dqdci; // dwdot[N]/d[CN]
  J[2886] -= dqdci; // dwdot[CN]/d[CN]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5286] += dqdT; // dwdot[N]/dT
  J[5295] -= dqdT; // dwdot[CN]/dT

  // reaction 217: CN + OH <=> H + NCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[39];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[46];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[39] - g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[39]) + (h_RT[1] + h_RT[46]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[39] -= q; // CN
  wdot[46] += q; // NCO
  // d()/d[H]
  dqdci = -k_r * sc[46];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[112] -= dqdci; // dwdot[CN]/d[H]
  J[119] += dqdci; // dwdot[NCO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[39];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[331] -= dqdci; // dwdot[CN]/d[OH]
  J[338] += dqdci; // dwdot[NCO]/d[OH]
  // d()/d[CN]
  dqdci = +k_f * sc[4];
  J[2848] += dqdci; // dwdot[H]/d[CN]
  J[2851] -= dqdci; // dwdot[OH]/d[CN]
  J[2886] -= dqdci; // dwdot[CN]/d[CN]
  J[2893] += dqdci; // dwdot[NCO]/d[CN]
  // d()/d[NCO]
  dqdci = -k_r * sc[1];
  J[3359] += dqdci; // dwdot[H]/d[NCO]
  J[3362] -= dqdci; // dwdot[OH]/d[NCO]
  J[3397] -= dqdci; // dwdot[CN]/d[NCO]
  J[3404] += dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5295] -= dqdT; // dwdot[CN]/dT
  J[5302] += dqdT; // dwdot[NCO]/dT

  // reaction 218: CN + H2O <=> HCN + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[39];
  k_f = 8000000 * exp(-(3753.99632690321) * invT);
  dlnkfdT = (3753.99632690321) * invT2;
  // reverse
  phi_r = sc[4] * sc[40];
  Kc = exp(-g_RT[4] + g_RT[5] + g_RT[39] - g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[39]) + (h_RT[4] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[5] -= q;  // H2O
  wdot[39] -= q; // CN
  wdot[40] += q; // HCN
  // d()/d[OH]
  dqdci = -k_r * sc[40];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[297] -= dqdci; // dwdot[H2O]/d[OH]
  J[331] -= dqdci; // dwdot[CN]/d[OH]
  J[332] += dqdci; // dwdot[HCN]/d[OH]
  // d()/d[H2O]
  dqdci = +k_f * sc[39];
  J[369] += dqdci; // dwdot[OH]/d[H2O]
  J[370] -= dqdci; // dwdot[H2O]/d[H2O]
  J[404] -= dqdci; // dwdot[CN]/d[H2O]
  J[405] += dqdci; // dwdot[HCN]/d[H2O]
  // d()/d[CN]
  dqdci = +k_f * sc[5];
  J[2851] += dqdci; // dwdot[OH]/d[CN]
  J[2852] -= dqdci; // dwdot[H2O]/d[CN]
  J[2886] -= dqdci; // dwdot[CN]/d[CN]
  J[2887] += dqdci; // dwdot[HCN]/d[CN]
  // d()/d[HCN]
  dqdci = -k_r * sc[4];
  J[2924] += dqdci; // dwdot[OH]/d[HCN]
  J[2925] -= dqdci; // dwdot[H2O]/d[HCN]
  J[2959] -= dqdci; // dwdot[CN]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5261] -= dqdT; // dwdot[H2O]/dT
  J[5295] -= dqdT; // dwdot[CN]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT

  // reaction 219: CN + O2 <=> NCO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[39];
  k_f = 6140000 * exp(-(-221.415332954077) * invT);
  dlnkfdT = (-221.415332954077) * invT2;
  // reverse
  phi_r = sc[2] * sc[46];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[39] - g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[39]) + (h_RT[2] + h_RT[46]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[39] -= q; // CN
  wdot[46] += q; // NCO
  // d()/d[O]
  dqdci = -k_r * sc[46];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[185] -= dqdci; // dwdot[CN]/d[O]
  J[192] += dqdci; // dwdot[NCO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[39];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[258] -= dqdci; // dwdot[CN]/d[O2]
  J[265] += dqdci; // dwdot[NCO]/d[O2]
  // d()/d[CN]
  dqdci = +k_f * sc[3];
  J[2849] += dqdci; // dwdot[O]/d[CN]
  J[2850] -= dqdci; // dwdot[O2]/d[CN]
  J[2886] -= dqdci; // dwdot[CN]/d[CN]
  J[2893] += dqdci; // dwdot[NCO]/d[CN]
  // d()/d[NCO]
  dqdci = -k_r * sc[2];
  J[3360] += dqdci; // dwdot[O]/d[NCO]
  J[3361] -= dqdci; // dwdot[O2]/d[NCO]
  J[3397] -= dqdci; // dwdot[CN]/d[NCO]
  J[3404] += dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5295] -= dqdT; // dwdot[CN]/dT
  J[5302] += dqdT; // dwdot[NCO]/dT

  // reaction 220: CN + H2 <=> H + HCN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[39];
  k_f = 0.295 * exp(2.45 * logT - (1127.20533140257) * invT);
  dlnkfdT = 2.45 * invT + (1127.20533140257) * invT2;
  // reverse
  phi_r = sc[1] * sc[40];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[39] - g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[39]) + (h_RT[1] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[39] -= q; // CN
  wdot[40] += q; // HCN
  // d()/d[H2]
  dqdci = +k_f * sc[39];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[39] -= dqdci; // dwdot[CN]/d[H2]
  J[40] += dqdci; // dwdot[HCN]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[40];
  J[73] -= dqdci;  // dwdot[H2]/d[H]
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[112] -= dqdci; // dwdot[CN]/d[H]
  J[113] += dqdci; // dwdot[HCN]/d[H]
  // d()/d[CN]
  dqdci = +k_f * sc[0];
  J[2847] -= dqdci; // dwdot[H2]/d[CN]
  J[2848] += dqdci; // dwdot[H]/d[CN]
  J[2886] -= dqdci; // dwdot[CN]/d[CN]
  J[2887] += dqdci; // dwdot[HCN]/d[CN]
  // d()/d[HCN]
  dqdci = -k_r * sc[1];
  J[2920] -= dqdci; // dwdot[H2]/d[HCN]
  J[2921] += dqdci; // dwdot[H]/d[HCN]
  J[2959] -= dqdci; // dwdot[CN]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5295] -= dqdT; // dwdot[CN]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT

  // reaction 221: NCO + O <=> CO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[46];
  k_f = 23500000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[35];
  Kc = exp(g_RT[2] - g_RT[14] - g_RT[35] + g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[46]) + (h_RT[14] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[14] += q; // CO
  wdot[35] += q; // NO
  wdot[46] -= q; // NCO
  // d()/d[O]
  dqdci = +k_f * sc[46];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[181] += dqdci; // dwdot[NO]/d[O]
  J[192] -= dqdci; // dwdot[NCO]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc[35];
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1057] += dqdci; // dwdot[NO]/d[CO]
  J[1068] -= dqdci; // dwdot[NCO]/d[CO]
  // d()/d[NO]
  dqdci = -k_r * sc[14];
  J[2557] -= dqdci; // dwdot[O]/d[NO]
  J[2569] += dqdci; // dwdot[CO]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2601] -= dqdci; // dwdot[NCO]/d[NO]
  // d()/d[NCO]
  dqdci = +k_f * sc[2];
  J[3360] -= dqdci; // dwdot[O]/d[NCO]
  J[3372] += dqdci; // dwdot[CO]/d[NCO]
  J[3393] += dqdci; // dwdot[NO]/d[NCO]
  J[3404] -= dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5302] -= dqdT; // dwdot[NCO]/dT

  // reaction 222: H + NCO <=> CO + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[46];
  k_f = 54000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[31];
  Kc = exp(g_RT[1] - g_RT[14] - g_RT[31] + g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[46]) + (h_RT[14] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[14] += q; // CO
  wdot[31] += q; // NH
  wdot[46] -= q; // NCO
  // d()/d[H]
  dqdci = +k_f * sc[46];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[87] += dqdci;  // dwdot[CO]/d[H]
  J[104] += dqdci; // dwdot[NH]/d[H]
  J[119] -= dqdci; // dwdot[NCO]/d[H]
  // d()/d[CO]
  dqdci = -k_r * sc[31];
  J[1023] -= dqdci; // dwdot[H]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1053] += dqdci; // dwdot[NH]/d[CO]
  J[1068] -= dqdci; // dwdot[NCO]/d[CO]
  // d()/d[NH]
  dqdci = -k_r * sc[14];
  J[2264] -= dqdci; // dwdot[H]/d[NH]
  J[2277] += dqdci; // dwdot[CO]/d[NH]
  J[2294] += dqdci; // dwdot[NH]/d[NH]
  J[2309] -= dqdci; // dwdot[NCO]/d[NH]
  // d()/d[NCO]
  dqdci = +k_f * sc[1];
  J[3359] -= dqdci; // dwdot[H]/d[NCO]
  J[3372] += dqdci; // dwdot[CO]/d[NCO]
  J[3389] += dqdci; // dwdot[NH]/d[NCO]
  J[3404] -= dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5287] += dqdT; // dwdot[NH]/dT
  J[5302] -= dqdT; // dwdot[NCO]/dT

  // reaction 223: NCO + OH <=> CO + H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[46];
  k_f = 2500000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[14] * sc[35];
  Kc = refC * exp(-g_RT[1] + g_RT[4] - g_RT[14] - g_RT[35] + g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[4] + h_RT[46]) + (h_RT[1] + h_RT[14] + h_RT[35]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[14] += q; // CO
  wdot[35] += q; // NO
  wdot[46] -= q; // NCO
  // d()/d[H]
  dqdci = -k_r * sc[14] * sc[35];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[87] += dqdci;  // dwdot[CO]/d[H]
  J[108] += dqdci; // dwdot[NO]/d[H]
  J[119] -= dqdci; // dwdot[NCO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[46];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[306] += dqdci; // dwdot[CO]/d[OH]
  J[327] += dqdci; // dwdot[NO]/d[OH]
  J[338] -= dqdci; // dwdot[NCO]/d[OH]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * sc[35];
  J[1023] += dqdci; // dwdot[H]/d[CO]
  J[1026] -= dqdci; // dwdot[OH]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1057] += dqdci; // dwdot[NO]/d[CO]
  J[1068] -= dqdci; // dwdot[NCO]/d[CO]
  // d()/d[NO]
  dqdci = -k_r * sc[1] * sc[14];
  J[2556] += dqdci; // dwdot[H]/d[NO]
  J[2559] -= dqdci; // dwdot[OH]/d[NO]
  J[2569] += dqdci; // dwdot[CO]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2601] -= dqdci; // dwdot[NCO]/d[NO]
  // d()/d[NCO]
  dqdci = +k_f * sc[4];
  J[3359] += dqdci; // dwdot[H]/d[NCO]
  J[3362] -= dqdci; // dwdot[OH]/d[NCO]
  J[3372] += dqdci; // dwdot[CO]/d[NCO]
  J[3393] += dqdci; // dwdot[NO]/d[NCO]
  J[3404] -= dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5302] -= dqdT; // dwdot[NCO]/dT

  // reaction 224: N + NCO <=> CO + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[30] * sc[46];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[47];
  Kc = exp(-g_RT[14] + g_RT[30] + g_RT[46] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[30] + h_RT[46]) + (h_RT[14] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[30] -= q; // N
  wdot[46] -= q; // NCO
  wdot[47] += q; // N2
  // d()/d[CO]
  dqdci = -k_r * sc[47];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1052] -= dqdci; // dwdot[N]/d[CO]
  J[1068] -= dqdci; // dwdot[NCO]/d[CO]
  J[1069] += dqdci; // dwdot[N2]/d[CO]
  // d()/d[N]
  dqdci = +k_f * sc[46];
  J[2204] += dqdci; // dwdot[CO]/d[N]
  J[2220] -= dqdci; // dwdot[N]/d[N]
  J[2236] -= dqdci; // dwdot[NCO]/d[N]
  J[2237] += dqdci; // dwdot[N2]/d[N]
  // d()/d[NCO]
  dqdci = +k_f * sc[30];
  J[3372] += dqdci; // dwdot[CO]/d[NCO]
  J[3388] -= dqdci; // dwdot[N]/d[NCO]
  J[3404] -= dqdci; // dwdot[NCO]/d[NCO]
  J[3405] += dqdci; // dwdot[N2]/d[NCO]
  // d()/d[N2]
  dqdci = -k_r * sc[14];
  J[3445] += dqdci; // dwdot[CO]/d[N2]
  J[3461] -= dqdci; // dwdot[N]/d[N2]
  J[3477] -= dqdci; // dwdot[NCO]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5286] -= dqdT; // dwdot[N]/dT
  J[5302] -= dqdT; // dwdot[NCO]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 225: NCO + O2 <=> CO2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[46];
  k_f = 2000000 * exp(-(10064.3333160944) * invT);
  dlnkfdT = (10064.3333160944) * invT2;
  // reverse
  phi_r = sc[15] * sc[35];
  Kc = exp(g_RT[3] - g_RT[15] - g_RT[35] + g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[46]) + (h_RT[15] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[15] += q; // CO2
  wdot[35] += q; // NO
  wdot[46] -= q; // NCO
  // d()/d[O2]
  dqdci = +k_f * sc[46];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[234] += dqdci; // dwdot[CO2]/d[O2]
  J[254] += dqdci; // dwdot[NO]/d[O2]
  J[265] -= dqdci; // dwdot[NCO]/d[O2]
  // d()/d[CO2]
  dqdci = -k_r * sc[35];
  J[1098] -= dqdci; // dwdot[O2]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  J[1130] += dqdci; // dwdot[NO]/d[CO2]
  J[1141] -= dqdci; // dwdot[NCO]/d[CO2]
  // d()/d[NO]
  dqdci = -k_r * sc[15];
  J[2558] -= dqdci; // dwdot[O2]/d[NO]
  J[2570] += dqdci; // dwdot[CO2]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2601] -= dqdci; // dwdot[NCO]/d[NO]
  // d()/d[NCO]
  dqdci = +k_f * sc[3];
  J[3361] -= dqdci; // dwdot[O2]/d[NCO]
  J[3373] += dqdci; // dwdot[CO2]/d[NCO]
  J[3393] += dqdci; // dwdot[NO]/d[NCO]
  J[3404] -= dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5302] -= dqdT; // dwdot[NCO]/dT

  // reaction 227: NCO + NO <=> CO + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[35] * sc[46];
  k_f = 190000000000 * exp(-1.52 * logT - (372.380332695493) * invT);
  dlnkfdT = -1.52 * invT + (372.380332695493) * invT2;
  // reverse
  phi_r = sc[14] * sc[37];
  Kc = exp(-g_RT[14] + g_RT[35] - g_RT[37] + g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[35] + h_RT[46]) + (h_RT[14] + h_RT[37]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[35] -= q; // NO
  wdot[37] += q; // N2O
  wdot[46] -= q; // NCO
  // d()/d[CO]
  dqdci = -k_r * sc[37];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1057] -= dqdci; // dwdot[NO]/d[CO]
  J[1059] += dqdci; // dwdot[N2O]/d[CO]
  J[1068] -= dqdci; // dwdot[NCO]/d[CO]
  // d()/d[NO]
  dqdci = +k_f * sc[46];
  J[2569] += dqdci; // dwdot[CO]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2592] += dqdci; // dwdot[N2O]/d[NO]
  J[2601] -= dqdci; // dwdot[NCO]/d[NO]
  // d()/d[N2O]
  dqdci = -k_r * sc[14];
  J[2715] += dqdci; // dwdot[CO]/d[N2O]
  J[2736] -= dqdci; // dwdot[NO]/d[N2O]
  J[2738] += dqdci; // dwdot[N2O]/d[N2O]
  J[2747] -= dqdci; // dwdot[NCO]/d[N2O]
  // d()/d[NCO]
  dqdci = +k_f * sc[35];
  J[3372] += dqdci; // dwdot[CO]/d[NCO]
  J[3393] -= dqdci; // dwdot[NO]/d[NCO]
  J[3395] += dqdci; // dwdot[N2O]/d[NCO]
  J[3404] -= dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5293] += dqdT; // dwdot[N2O]/dT
  J[5302] -= dqdT; // dwdot[NCO]/dT

  // reaction 228: NCO + NO <=> CO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[35] * sc[46];
  k_f = 3800000000000 * exp(-2 * logT - (402.573332643776) * invT);
  dlnkfdT = -2 * invT + (402.573332643776) * invT2;
  // reverse
  phi_r = sc[15] * sc[47];
  Kc = exp(-g_RT[15] + g_RT[35] + g_RT[46] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[35] + h_RT[46]) + (h_RT[15] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] += q; // CO2
  wdot[35] -= q; // NO
  wdot[46] -= q; // NCO
  wdot[47] += q; // N2
  // d()/d[CO2]
  dqdci = -k_r * sc[47];
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  J[1130] -= dqdci; // dwdot[NO]/d[CO2]
  J[1141] -= dqdci; // dwdot[NCO]/d[CO2]
  J[1142] += dqdci; // dwdot[N2]/d[CO2]
  // d()/d[NO]
  dqdci = +k_f * sc[46];
  J[2570] += dqdci; // dwdot[CO2]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2601] -= dqdci; // dwdot[NCO]/d[NO]
  J[2602] += dqdci; // dwdot[N2]/d[NO]
  // d()/d[NCO]
  dqdci = +k_f * sc[35];
  J[3373] += dqdci; // dwdot[CO2]/d[NCO]
  J[3393] -= dqdci; // dwdot[NO]/d[NCO]
  J[3404] -= dqdci; // dwdot[NCO]/d[NCO]
  J[3405] += dqdci; // dwdot[N2]/d[NCO]
  // d()/d[N2]
  dqdci = -k_r * sc[15];
  J[3446] += dqdci; // dwdot[CO2]/d[N2]
  J[3466] -= dqdci; // dwdot[NO]/d[N2]
  J[3477] -= dqdci; // dwdot[NCO]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5302] -= dqdT; // dwdot[NCO]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 230: HCN + O <=> H + NCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[40];
  k_f = 0.0203 * exp(2.64 * logT - (2506.0189957075) * invT);
  dlnkfdT = 2.64 * invT + (2506.0189957075) * invT2;
  // reverse
  phi_r = sc[1] * sc[46];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[40] - g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[40]) + (h_RT[1] + h_RT[46]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[40] -= q; // HCN
  wdot[46] += q; // NCO
  // d()/d[H]
  dqdci = -k_r * sc[46];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[75] -= dqdci;  // dwdot[O]/d[H]
  J[113] -= dqdci; // dwdot[HCN]/d[H]
  J[119] += dqdci; // dwdot[NCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[40];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[186] -= dqdci; // dwdot[HCN]/d[O]
  J[192] += dqdci; // dwdot[NCO]/d[O]
  // d()/d[HCN]
  dqdci = +k_f * sc[2];
  J[2921] += dqdci; // dwdot[H]/d[HCN]
  J[2922] -= dqdci; // dwdot[O]/d[HCN]
  J[2960] -= dqdci; // dwdot[HCN]/d[HCN]
  J[2966] += dqdci; // dwdot[NCO]/d[HCN]
  // d()/d[NCO]
  dqdci = -k_r * sc[1];
  J[3359] += dqdci; // dwdot[H]/d[NCO]
  J[3360] -= dqdci; // dwdot[O]/d[NCO]
  J[3398] -= dqdci; // dwdot[HCN]/d[NCO]
  J[3404] += dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5296] -= dqdT; // dwdot[HCN]/dT
  J[5302] += dqdT; // dwdot[NCO]/dT

  // reaction 231: HCN + O <=> CO + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[40];
  k_f = 0.00507 * exp(2.64 * logT - (2506.0189957075) * invT);
  dlnkfdT = 2.64 * invT + (2506.0189957075) * invT2;
  // reverse
  phi_r = sc[14] * sc[31];
  Kc = exp(g_RT[2] - g_RT[14] - g_RT[31] + g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[40]) + (h_RT[14] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[14] += q; // CO
  wdot[31] += q; // NH
  wdot[40] -= q; // HCN
  // d()/d[O]
  dqdci = +k_f * sc[40];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[177] += dqdci; // dwdot[NH]/d[O]
  J[186] -= dqdci; // dwdot[HCN]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc[31];
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1053] += dqdci; // dwdot[NH]/d[CO]
  J[1062] -= dqdci; // dwdot[HCN]/d[CO]
  // d()/d[NH]
  dqdci = -k_r * sc[14];
  J[2265] -= dqdci; // dwdot[O]/d[NH]
  J[2277] += dqdci; // dwdot[CO]/d[NH]
  J[2294] += dqdci; // dwdot[NH]/d[NH]
  J[2303] -= dqdci; // dwdot[HCN]/d[NH]
  // d()/d[HCN]
  dqdci = +k_f * sc[2];
  J[2922] -= dqdci; // dwdot[O]/d[HCN]
  J[2934] += dqdci; // dwdot[CO]/d[HCN]
  J[2951] += dqdci; // dwdot[NH]/d[HCN]
  J[2960] -= dqdci; // dwdot[HCN]/d[HCN]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5287] += dqdT; // dwdot[NH]/dT
  J[5296] -= dqdT; // dwdot[HCN]/dT

  // reaction 232: HCN + O <=> CN + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[40];
  k_f = 3910 * exp(1.58 * logT - (13385.5633104055) * invT);
  dlnkfdT = 1.58 * invT + (13385.5633104055) * invT2;
  // reverse
  phi_r = sc[4] * sc[39];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[39] + g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[40]) + (h_RT[4] + h_RT[39]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[39] += q; // CN
  wdot[40] -= q; // HCN
  // d()/d[O]
  dqdci = +k_f * sc[40];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[185] += dqdci; // dwdot[CN]/d[O]
  J[186] -= dqdci; // dwdot[HCN]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[39];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[331] += dqdci; // dwdot[CN]/d[OH]
  J[332] -= dqdci; // dwdot[HCN]/d[OH]
  // d()/d[CN]
  dqdci = -k_r * sc[4];
  J[2849] -= dqdci; // dwdot[O]/d[CN]
  J[2851] += dqdci; // dwdot[OH]/d[CN]
  J[2886] += dqdci; // dwdot[CN]/d[CN]
  J[2887] -= dqdci; // dwdot[HCN]/d[CN]
  // d()/d[HCN]
  dqdci = +k_f * sc[2];
  J[2922] -= dqdci; // dwdot[O]/d[HCN]
  J[2924] += dqdci; // dwdot[OH]/d[HCN]
  J[2959] += dqdci; // dwdot[CN]/d[HCN]
  J[2960] -= dqdci; // dwdot[HCN]/d[HCN]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5295] += dqdT; // dwdot[CN]/dT
  J[5296] -= dqdT; // dwdot[HCN]/dT

  // reaction 233: HCN + OH <=> H + HOCN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[40];
  k_f = 1.1 * exp(2.03 * logT - (6728.0068218091) * invT);
  dlnkfdT = 2.03 * invT + (6728.0068218091) * invT2;
  // reverse
  phi_r = sc[1] * sc[44];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[40] - g_RT[44]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[40]) + (h_RT[1] + h_RT[44]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[40] -= q; // HCN
  wdot[44] += q; // HOCN
  // d()/d[H]
  dqdci = -k_r * sc[44];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[113] -= dqdci; // dwdot[HCN]/d[H]
  J[117] += dqdci; // dwdot[HOCN]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[40];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[332] -= dqdci; // dwdot[HCN]/d[OH]
  J[336] += dqdci; // dwdot[HOCN]/d[OH]
  // d()/d[HCN]
  dqdci = +k_f * sc[4];
  J[2921] += dqdci; // dwdot[H]/d[HCN]
  J[2924] -= dqdci; // dwdot[OH]/d[HCN]
  J[2960] -= dqdci; // dwdot[HCN]/d[HCN]
  J[2964] += dqdci; // dwdot[HOCN]/d[HCN]
  // d()/d[HOCN]
  dqdci = -k_r * sc[1];
  J[3213] += dqdci; // dwdot[H]/d[HOCN]
  J[3216] -= dqdci; // dwdot[OH]/d[HOCN]
  J[3252] -= dqdci; // dwdot[HCN]/d[HOCN]
  J[3256] += dqdci; // dwdot[HOCN]/d[HOCN]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5296] -= dqdT; // dwdot[HCN]/dT
  J[5300] += dqdT; // dwdot[HOCN]/dT

  // reaction 234: HCN + OH <=> H + HNCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[40];
  k_f = 0.0044 * exp(2.26 * logT - (3220.58666115021) * invT);
  dlnkfdT = 2.26 * invT + (3220.58666115021) * invT2;
  // reverse
  phi_r = sc[1] * sc[45];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[40] - g_RT[45]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[40]) + (h_RT[1] + h_RT[45]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[40] -= q; // HCN
  wdot[45] += q; // HNCO
  // d()/d[H]
  dqdci = -k_r * sc[45];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[113] -= dqdci; // dwdot[HCN]/d[H]
  J[118] += dqdci; // dwdot[HNCO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[40];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[332] -= dqdci; // dwdot[HCN]/d[OH]
  J[337] += dqdci; // dwdot[HNCO]/d[OH]
  // d()/d[HCN]
  dqdci = +k_f * sc[4];
  J[2921] += dqdci; // dwdot[H]/d[HCN]
  J[2924] -= dqdci; // dwdot[OH]/d[HCN]
  J[2960] -= dqdci; // dwdot[HCN]/d[HCN]
  J[2965] += dqdci; // dwdot[HNCO]/d[HCN]
  // d()/d[HNCO]
  dqdci = -k_r * sc[1];
  J[3286] += dqdci; // dwdot[H]/d[HNCO]
  J[3289] -= dqdci; // dwdot[OH]/d[HNCO]
  J[3325] -= dqdci; // dwdot[HCN]/d[HNCO]
  J[3330] += dqdci; // dwdot[HNCO]/d[HNCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5296] -= dqdT; // dwdot[HCN]/dT
  J[5301] += dqdT; // dwdot[HNCO]/dT

  // reaction 235: HCN + OH <=> CO + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[40];
  k_f = 0.00016 * exp(2.56 * logT - (4528.94999224248) * invT);
  dlnkfdT = 2.56 * invT + (4528.94999224248) * invT2;
  // reverse
  phi_r = sc[14] * sc[32];
  Kc = exp(g_RT[4] - g_RT[14] - g_RT[32] + g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[40]) + (h_RT[14] + h_RT[32]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[14] += q; // CO
  wdot[32] += q; // NH2
  wdot[40] -= q; // HCN
  // d()/d[OH]
  dqdci = +k_f * sc[40];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[306] += dqdci; // dwdot[CO]/d[OH]
  J[324] += dqdci; // dwdot[NH2]/d[OH]
  J[332] -= dqdci; // dwdot[HCN]/d[OH]
  // d()/d[CO]
  dqdci = -k_r * sc[32];
  J[1026] -= dqdci; // dwdot[OH]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1054] += dqdci; // dwdot[NH2]/d[CO]
  J[1062] -= dqdci; // dwdot[HCN]/d[CO]
  // d()/d[NH2]
  dqdci = -k_r * sc[14];
  J[2340] -= dqdci; // dwdot[OH]/d[NH2]
  J[2350] += dqdci; // dwdot[CO]/d[NH2]
  J[2368] += dqdci; // dwdot[NH2]/d[NH2]
  J[2376] -= dqdci; // dwdot[HCN]/d[NH2]
  // d()/d[HCN]
  dqdci = +k_f * sc[4];
  J[2924] -= dqdci; // dwdot[OH]/d[HCN]
  J[2934] += dqdci; // dwdot[CO]/d[HCN]
  J[2952] += dqdci; // dwdot[NH2]/d[HCN]
  J[2960] -= dqdci; // dwdot[HCN]/d[HCN]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5288] += dqdT; // dwdot[NH2]/dT
  J[5296] -= dqdT; // dwdot[HCN]/dT

  // reaction 237: H2CN + N <=> CH2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[30] * sc[41];
  k_f = 60000000 * exp(-(201.286666321888) * invT);
  dlnkfdT = (201.286666321888) * invT2;
  // reverse
  phi_r = sc[10] * sc[47];
  Kc = exp(-g_RT[10] + g_RT[30] + g_RT[41] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[30] + h_RT[41]) + (h_RT[10] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[30] -= q; // N
  wdot[41] -= q; // H2CN
  wdot[47] += q; // N2
  // d()/d[CH2]
  dqdci = -k_r * sc[47];
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  J[760] -= dqdci; // dwdot[N]/d[CH2]
  J[771] -= dqdci; // dwdot[H2CN]/d[CH2]
  J[777] += dqdci; // dwdot[N2]/d[CH2]
  // d()/d[N]
  dqdci = +k_f * sc[41];
  J[2200] += dqdci; // dwdot[CH2]/d[N]
  J[2220] -= dqdci; // dwdot[N]/d[N]
  J[2231] -= dqdci; // dwdot[H2CN]/d[N]
  J[2237] += dqdci; // dwdot[N2]/d[N]
  // d()/d[H2CN]
  dqdci = +k_f * sc[30];
  J[3003] += dqdci; // dwdot[CH2]/d[H2CN]
  J[3023] -= dqdci; // dwdot[N]/d[H2CN]
  J[3034] -= dqdci; // dwdot[H2CN]/d[H2CN]
  J[3040] += dqdci; // dwdot[N2]/d[H2CN]
  // d()/d[N2]
  dqdci = -k_r * sc[10];
  J[3441] += dqdci; // dwdot[CH2]/d[N2]
  J[3461] -= dqdci; // dwdot[N]/d[N2]
  J[3472] -= dqdci; // dwdot[H2CN]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5286] -= dqdT; // dwdot[N]/dT
  J[5297] -= dqdT; // dwdot[H2CN]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 238: C + N2 <=> CN + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[47];
  k_f = 63000000 * exp(-(23158.0309603332) * invT);
  dlnkfdT = (23158.0309603332) * invT2;
  // reverse
  phi_r = sc[30] * sc[39];
  Kc = exp(g_RT[8] - g_RT[30] - g_RT[39] + g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[47]) + (h_RT[30] + h_RT[39]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // C
  wdot[30] += q; // N
  wdot[39] += q; // CN
  wdot[47] -= q; // N2
  // d()/d[C]
  dqdci = +k_f * sc[47];
  J[592] -= dqdci; // dwdot[C]/d[C]
  J[614] += dqdci; // dwdot[N]/d[C]
  J[623] += dqdci; // dwdot[CN]/d[C]
  J[631] -= dqdci; // dwdot[N2]/d[C]
  // d()/d[N]
  dqdci = -k_r * sc[39];
  J[2198] -= dqdci; // dwdot[C]/d[N]
  J[2220] += dqdci; // dwdot[N]/d[N]
  J[2229] += dqdci; // dwdot[CN]/d[N]
  J[2237] -= dqdci; // dwdot[N2]/d[N]
  // d()/d[CN]
  dqdci = -k_r * sc[30];
  J[2855] -= dqdci; // dwdot[C]/d[CN]
  J[2877] += dqdci; // dwdot[N]/d[CN]
  J[2886] += dqdci; // dwdot[CN]/d[CN]
  J[2894] -= dqdci; // dwdot[N2]/d[CN]
  // d()/d[N2]
  dqdci = +k_f * sc[8];
  J[3439] -= dqdci; // dwdot[C]/d[N2]
  J[3461] += dqdci; // dwdot[N]/d[N2]
  J[3470] += dqdci; // dwdot[CN]/d[N2]
  J[3478] -= dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5264] -= dqdT; // dwdot[C]/dT
  J[5286] += dqdT; // dwdot[N]/dT
  J[5295] += dqdT; // dwdot[CN]/dT
  J[5303] -= dqdT; // dwdot[N2]/dT

  // reaction 239: CH + N2 <=> HCN + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[47];
  k_f = 3120 * exp(0.88 * logT - (10129.751482649) * invT);
  dlnkfdT = 0.88 * invT + (10129.751482649) * invT2;
  // reverse
  phi_r = sc[30] * sc[40];
  Kc = exp(g_RT[9] - g_RT[30] - g_RT[40] + g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[47]) + (h_RT[30] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH
  wdot[30] += q; // N
  wdot[40] += q; // HCN
  wdot[47] -= q; // N2
  // d()/d[CH]
  dqdci = +k_f * sc[47];
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[687] += dqdci; // dwdot[N]/d[CH]
  J[697] += dqdci; // dwdot[HCN]/d[CH]
  J[704] -= dqdci; // dwdot[N2]/d[CH]
  // d()/d[N]
  dqdci = -k_r * sc[40];
  J[2199] -= dqdci; // dwdot[CH]/d[N]
  J[2220] += dqdci; // dwdot[N]/d[N]
  J[2230] += dqdci; // dwdot[HCN]/d[N]
  J[2237] -= dqdci; // dwdot[N2]/d[N]
  // d()/d[HCN]
  dqdci = -k_r * sc[30];
  J[2929] -= dqdci; // dwdot[CH]/d[HCN]
  J[2950] += dqdci; // dwdot[N]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  J[2967] -= dqdci; // dwdot[N2]/d[HCN]
  // d()/d[N2]
  dqdci = +k_f * sc[9];
  J[3440] -= dqdci; // dwdot[CH]/d[N2]
  J[3461] += dqdci; // dwdot[N]/d[N2]
  J[3471] += dqdci; // dwdot[HCN]/d[N2]
  J[3478] -= dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5286] += dqdT; // dwdot[N]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT
  J[5303] -= dqdT; // dwdot[N2]/dT

  // reaction 241: CH2 + N2 <=> HCN + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[47];
  k_f = 10000000 * exp(-(37238.0332695493) * invT);
  dlnkfdT = (37238.0332695493) * invT2;
  // reverse
  phi_r = sc[31] * sc[40];
  Kc = exp(g_RT[10] - g_RT[31] - g_RT[40] + g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[47]) + (h_RT[31] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // CH2
  wdot[31] += q; // NH
  wdot[40] += q; // HCN
  wdot[47] -= q; // N2
  // d()/d[CH2]
  dqdci = +k_f * sc[47];
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[761] += dqdci; // dwdot[NH]/d[CH2]
  J[770] += dqdci; // dwdot[HCN]/d[CH2]
  J[777] -= dqdci; // dwdot[N2]/d[CH2]
  // d()/d[NH]
  dqdci = -k_r * sc[40];
  J[2273] -= dqdci; // dwdot[CH2]/d[NH]
  J[2294] += dqdci; // dwdot[NH]/d[NH]
  J[2303] += dqdci; // dwdot[HCN]/d[NH]
  J[2310] -= dqdci; // dwdot[N2]/d[NH]
  // d()/d[HCN]
  dqdci = -k_r * sc[31];
  J[2930] -= dqdci; // dwdot[CH2]/d[HCN]
  J[2951] += dqdci; // dwdot[NH]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  J[2967] -= dqdci; // dwdot[N2]/d[HCN]
  // d()/d[N2]
  dqdci = +k_f * sc[10];
  J[3441] -= dqdci; // dwdot[CH2]/d[N2]
  J[3462] += dqdci; // dwdot[NH]/d[N2]
  J[3471] += dqdci; // dwdot[HCN]/d[N2]
  J[3478] -= dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5287] += dqdT; // dwdot[NH]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT
  J[5303] -= dqdT; // dwdot[N2]/dT

  // reaction 242: CH2(S) + N2 <=> HCN + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[47];
  k_f = 100000 * exp(-(32709.0832773068) * invT);
  dlnkfdT = (32709.0832773068) * invT2;
  // reverse
  phi_r = sc[31] * sc[40];
  Kc = exp(g_RT[11] - g_RT[31] - g_RT[40] + g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[47]) + (h_RT[31] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // CH2(S)
  wdot[31] += q; // NH
  wdot[40] += q; // HCN
  wdot[47] -= q; // N2
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[47];
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[834] += dqdci; // dwdot[NH]/d[CH2(S)]
  J[843] += dqdci; // dwdot[HCN]/d[CH2(S)]
  J[850] -= dqdci; // dwdot[N2]/d[CH2(S)]
  // d()/d[NH]
  dqdci = -k_r * sc[40];
  J[2274] -= dqdci; // dwdot[CH2(S)]/d[NH]
  J[2294] += dqdci; // dwdot[NH]/d[NH]
  J[2303] += dqdci; // dwdot[HCN]/d[NH]
  J[2310] -= dqdci; // dwdot[N2]/d[NH]
  // d()/d[HCN]
  dqdci = -k_r * sc[31];
  J[2931] -= dqdci; // dwdot[CH2(S)]/d[HCN]
  J[2951] += dqdci; // dwdot[NH]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  J[2967] -= dqdci; // dwdot[N2]/d[HCN]
  // d()/d[N2]
  dqdci = +k_f * sc[11];
  J[3442] -= dqdci; // dwdot[CH2(S)]/d[N2]
  J[3462] += dqdci; // dwdot[NH]/d[N2]
  J[3471] += dqdci; // dwdot[HCN]/d[N2]
  J[3478] -= dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5287] += dqdT; // dwdot[NH]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT
  J[5303] -= dqdT; // dwdot[N2]/dT

  // reaction 243: C + NO <=> CN + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[35];
  k_f = 19000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[39];
  Kc = exp(-g_RT[2] + g_RT[8] + g_RT[35] - g_RT[39]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[35]) + (h_RT[2] + h_RT[39]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[8] -= q;  // C
  wdot[35] -= q; // NO
  wdot[39] += q; // CN
  // d()/d[O]
  dqdci = -k_r * sc[39];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[154] -= dqdci; // dwdot[C]/d[O]
  J[181] -= dqdci; // dwdot[NO]/d[O]
  J[185] += dqdci; // dwdot[CN]/d[O]
  // d()/d[C]
  dqdci = +k_f * sc[35];
  J[586] += dqdci; // dwdot[O]/d[C]
  J[592] -= dqdci; // dwdot[C]/d[C]
  J[619] -= dqdci; // dwdot[NO]/d[C]
  J[623] += dqdci; // dwdot[CN]/d[C]
  // d()/d[NO]
  dqdci = +k_f * sc[8];
  J[2557] += dqdci; // dwdot[O]/d[NO]
  J[2563] -= dqdci; // dwdot[C]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2594] += dqdci; // dwdot[CN]/d[NO]
  // d()/d[CN]
  dqdci = -k_r * sc[2];
  J[2849] += dqdci; // dwdot[O]/d[CN]
  J[2855] -= dqdci; // dwdot[C]/d[CN]
  J[2882] -= dqdci; // dwdot[NO]/d[CN]
  J[2886] += dqdci; // dwdot[CN]/d[CN]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5264] -= dqdT; // dwdot[C]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5295] += dqdT; // dwdot[CN]/dT

  // reaction 244: C + NO <=> CO + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[35];
  k_f = 29000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[30];
  Kc = exp(g_RT[8] - g_RT[14] - g_RT[30] + g_RT[35]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[35]) + (h_RT[14] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // C
  wdot[14] += q; // CO
  wdot[30] += q; // N
  wdot[35] -= q; // NO
  // d()/d[C]
  dqdci = +k_f * sc[35];
  J[592] -= dqdci; // dwdot[C]/d[C]
  J[598] += dqdci; // dwdot[CO]/d[C]
  J[614] += dqdci; // dwdot[N]/d[C]
  J[619] -= dqdci; // dwdot[NO]/d[C]
  // d()/d[CO]
  dqdci = -k_r * sc[30];
  J[1030] -= dqdci; // dwdot[C]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1052] += dqdci; // dwdot[N]/d[CO]
  J[1057] -= dqdci; // dwdot[NO]/d[CO]
  // d()/d[N]
  dqdci = -k_r * sc[14];
  J[2198] -= dqdci; // dwdot[C]/d[N]
  J[2204] += dqdci; // dwdot[CO]/d[N]
  J[2220] += dqdci; // dwdot[N]/d[N]
  J[2225] -= dqdci; // dwdot[NO]/d[N]
  // d()/d[NO]
  dqdci = +k_f * sc[8];
  J[2563] -= dqdci; // dwdot[C]/d[NO]
  J[2569] += dqdci; // dwdot[CO]/d[NO]
  J[2585] += dqdci; // dwdot[N]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[5264] -= dqdT; // dwdot[C]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5286] += dqdT; // dwdot[N]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT

  // reaction 245: CH + NO <=> HCN + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[35];
  k_f = 41000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[40];
  Kc = exp(-g_RT[2] + g_RT[9] + g_RT[35] - g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[35]) + (h_RT[2] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[9] -= q;  // CH
  wdot[35] -= q; // NO
  wdot[40] += q; // HCN
  // d()/d[O]
  dqdci = -k_r * sc[40];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[155] -= dqdci; // dwdot[CH]/d[O]
  J[181] -= dqdci; // dwdot[NO]/d[O]
  J[186] += dqdci; // dwdot[HCN]/d[O]
  // d()/d[CH]
  dqdci = +k_f * sc[35];
  J[659] += dqdci; // dwdot[O]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[692] -= dqdci; // dwdot[NO]/d[CH]
  J[697] += dqdci; // dwdot[HCN]/d[CH]
  // d()/d[NO]
  dqdci = +k_f * sc[9];
  J[2557] += dqdci; // dwdot[O]/d[NO]
  J[2564] -= dqdci; // dwdot[CH]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2595] += dqdci; // dwdot[HCN]/d[NO]
  // d()/d[HCN]
  dqdci = -k_r * sc[2];
  J[2922] += dqdci; // dwdot[O]/d[HCN]
  J[2929] -= dqdci; // dwdot[CH]/d[HCN]
  J[2955] -= dqdci; // dwdot[NO]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT

  // reaction 246: CH + NO <=> H + NCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[35];
  k_f = 16200000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[46];
  Kc = exp(-g_RT[1] + g_RT[9] + g_RT[35] - g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[35]) + (h_RT[1] + h_RT[46]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[35] -= q; // NO
  wdot[46] += q; // NCO
  // d()/d[H]
  dqdci = -k_r * sc[46];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[82] -= dqdci;  // dwdot[CH]/d[H]
  J[108] -= dqdci; // dwdot[NO]/d[H]
  J[119] += dqdci; // dwdot[NCO]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[35];
  J[658] += dqdci; // dwdot[H]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[692] -= dqdci; // dwdot[NO]/d[CH]
  J[703] += dqdci; // dwdot[NCO]/d[CH]
  // d()/d[NO]
  dqdci = +k_f * sc[9];
  J[2556] += dqdci; // dwdot[H]/d[NO]
  J[2564] -= dqdci; // dwdot[CH]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2601] += dqdci; // dwdot[NCO]/d[NO]
  // d()/d[NCO]
  dqdci = -k_r * sc[1];
  J[3359] += dqdci; // dwdot[H]/d[NCO]
  J[3367] -= dqdci; // dwdot[CH]/d[NCO]
  J[3393] -= dqdci; // dwdot[NO]/d[NCO]
  J[3404] += dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5302] += dqdT; // dwdot[NCO]/dT

  // reaction 247: CH + NO <=> HCO + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[35];
  k_f = 24600000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[16] * sc[30];
  Kc = exp(g_RT[9] - g_RT[16] - g_RT[30] + g_RT[35]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[35]) + (h_RT[16] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH
  wdot[16] += q; // HCO
  wdot[30] += q; // N
  wdot[35] -= q; // NO
  // d()/d[CH]
  dqdci = +k_f * sc[35];
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[673] += dqdci; // dwdot[HCO]/d[CH]
  J[687] += dqdci; // dwdot[N]/d[CH]
  J[692] -= dqdci; // dwdot[NO]/d[CH]
  // d()/d[HCO]
  dqdci = -k_r * sc[30];
  J[1177] -= dqdci; // dwdot[CH]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1198] += dqdci; // dwdot[N]/d[HCO]
  J[1203] -= dqdci; // dwdot[NO]/d[HCO]
  // d()/d[N]
  dqdci = -k_r * sc[16];
  J[2199] -= dqdci; // dwdot[CH]/d[N]
  J[2206] += dqdci; // dwdot[HCO]/d[N]
  J[2220] += dqdci; // dwdot[N]/d[N]
  J[2225] -= dqdci; // dwdot[NO]/d[N]
  // d()/d[NO]
  dqdci = +k_f * sc[9];
  J[2564] -= dqdci; // dwdot[CH]/d[NO]
  J[2571] += dqdci; // dwdot[HCO]/d[NO]
  J[2585] += dqdci; // dwdot[N]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5286] += dqdT; // dwdot[N]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT

  // reaction 248: CH2 + NO <=> H + HNCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[35];
  k_f = 310000000000 * exp(-1.38 * logT - (639.085165571994) * invT);
  dlnkfdT = -1.38 * invT + (639.085165571994) * invT2;
  // reverse
  phi_r = sc[1] * sc[45];
  Kc = exp(-g_RT[1] + g_RT[10] + g_RT[35] - g_RT[45]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[35]) + (h_RT[1] + h_RT[45]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[10] -= q; // CH2
  wdot[35] -= q; // NO
  wdot[45] += q; // HNCO
  // d()/d[H]
  dqdci = -k_r * sc[45];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[83] -= dqdci;  // dwdot[CH2]/d[H]
  J[108] -= dqdci; // dwdot[NO]/d[H]
  J[118] += dqdci; // dwdot[HNCO]/d[H]
  // d()/d[CH2]
  dqdci = +k_f * sc[35];
  J[731] += dqdci; // dwdot[H]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[765] -= dqdci; // dwdot[NO]/d[CH2]
  J[775] += dqdci; // dwdot[HNCO]/d[CH2]
  // d()/d[NO]
  dqdci = +k_f * sc[10];
  J[2556] += dqdci; // dwdot[H]/d[NO]
  J[2565] -= dqdci; // dwdot[CH2]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2600] += dqdci; // dwdot[HNCO]/d[NO]
  // d()/d[HNCO]
  dqdci = -k_r * sc[1];
  J[3286] += dqdci; // dwdot[H]/d[HNCO]
  J[3295] -= dqdci; // dwdot[CH2]/d[HNCO]
  J[3320] -= dqdci; // dwdot[NO]/d[HNCO]
  J[3330] += dqdci; // dwdot[HNCO]/d[HNCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5301] += dqdT; // dwdot[HNCO]/dT

  // reaction 249: CH2 + NO <=> HCN + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[35];
  k_f = 290000000 * exp(-0.69 * logT - (382.444666011587) * invT);
  dlnkfdT = -0.69 * invT + (382.444666011587) * invT2;
  // reverse
  phi_r = sc[4] * sc[40];
  Kc = exp(-g_RT[4] + g_RT[10] + g_RT[35] - g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[35]) + (h_RT[4] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[10] -= q; // CH2
  wdot[35] -= q; // NO
  wdot[40] += q; // HCN
  // d()/d[OH]
  dqdci = -k_r * sc[40];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[302] -= dqdci; // dwdot[CH2]/d[OH]
  J[327] -= dqdci; // dwdot[NO]/d[OH]
  J[332] += dqdci; // dwdot[HCN]/d[OH]
  // d()/d[CH2]
  dqdci = +k_f * sc[35];
  J[734] += dqdci; // dwdot[OH]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[765] -= dqdci; // dwdot[NO]/d[CH2]
  J[770] += dqdci; // dwdot[HCN]/d[CH2]
  // d()/d[NO]
  dqdci = +k_f * sc[10];
  J[2559] += dqdci; // dwdot[OH]/d[NO]
  J[2565] -= dqdci; // dwdot[CH2]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2595] += dqdci; // dwdot[HCN]/d[NO]
  // d()/d[HCN]
  dqdci = -k_r * sc[4];
  J[2924] += dqdci; // dwdot[OH]/d[HCN]
  J[2930] -= dqdci; // dwdot[CH2]/d[HCN]
  J[2955] -= dqdci; // dwdot[NO]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT

  // reaction 250: CH2 + NO <=> H + HCNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[35];
  k_f = 38000000 * exp(-0.36 * logT - (291.865666166737) * invT);
  dlnkfdT = -0.36 * invT + (291.865666166737) * invT2;
  // reverse
  phi_r = sc[1] * sc[43];
  Kc = exp(-g_RT[1] + g_RT[10] + g_RT[35] - g_RT[43]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[35]) + (h_RT[1] + h_RT[43]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[10] -= q; // CH2
  wdot[35] -= q; // NO
  wdot[43] += q; // HCNO
  // d()/d[H]
  dqdci = -k_r * sc[43];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[83] -= dqdci;  // dwdot[CH2]/d[H]
  J[108] -= dqdci; // dwdot[NO]/d[H]
  J[116] += dqdci; // dwdot[HCNO]/d[H]
  // d()/d[CH2]
  dqdci = +k_f * sc[35];
  J[731] += dqdci; // dwdot[H]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[765] -= dqdci; // dwdot[NO]/d[CH2]
  J[773] += dqdci; // dwdot[HCNO]/d[CH2]
  // d()/d[NO]
  dqdci = +k_f * sc[10];
  J[2556] += dqdci; // dwdot[H]/d[NO]
  J[2565] -= dqdci; // dwdot[CH2]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2598] += dqdci; // dwdot[HCNO]/d[NO]
  // d()/d[HCNO]
  dqdci = -k_r * sc[1];
  J[3140] += dqdci; // dwdot[H]/d[HCNO]
  J[3149] -= dqdci; // dwdot[CH2]/d[HCNO]
  J[3174] -= dqdci; // dwdot[NO]/d[HCNO]
  J[3182] += dqdci; // dwdot[HCNO]/d[HCNO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5299] += dqdT; // dwdot[HCNO]/dT

  // reaction 251: CH2(S) + NO <=> H + HNCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[35];
  k_f = 310000000000 * exp(-1.38 * logT - (639.085165571994) * invT);
  dlnkfdT = -1.38 * invT + (639.085165571994) * invT2;
  // reverse
  phi_r = sc[1] * sc[45];
  Kc = exp(-g_RT[1] + g_RT[11] + g_RT[35] - g_RT[45]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[35]) + (h_RT[1] + h_RT[45]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[11] -= q; // CH2(S)
  wdot[35] -= q; // NO
  wdot[45] += q; // HNCO
  // d()/d[H]
  dqdci = -k_r * sc[45];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[84] -= dqdci;  // dwdot[CH2(S)]/d[H]
  J[108] -= dqdci; // dwdot[NO]/d[H]
  J[118] += dqdci; // dwdot[HNCO]/d[H]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[35];
  J[804] += dqdci; // dwdot[H]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[838] -= dqdci; // dwdot[NO]/d[CH2(S)]
  J[848] += dqdci; // dwdot[HNCO]/d[CH2(S)]
  // d()/d[NO]
  dqdci = +k_f * sc[11];
  J[2556] += dqdci; // dwdot[H]/d[NO]
  J[2566] -= dqdci; // dwdot[CH2(S)]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2600] += dqdci; // dwdot[HNCO]/d[NO]
  // d()/d[HNCO]
  dqdci = -k_r * sc[1];
  J[3286] += dqdci; // dwdot[H]/d[HNCO]
  J[3296] -= dqdci; // dwdot[CH2(S)]/d[HNCO]
  J[3320] -= dqdci; // dwdot[NO]/d[HNCO]
  J[3330] += dqdci; // dwdot[HNCO]/d[HNCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5301] += dqdT; // dwdot[HNCO]/dT

  // reaction 252: CH2(S) + NO <=> HCN + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[35];
  k_f = 290000000 * exp(-0.69 * logT - (382.444666011587) * invT);
  dlnkfdT = -0.69 * invT + (382.444666011587) * invT2;
  // reverse
  phi_r = sc[4] * sc[40];
  Kc = exp(-g_RT[4] + g_RT[11] + g_RT[35] - g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[35]) + (h_RT[4] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[11] -= q; // CH2(S)
  wdot[35] -= q; // NO
  wdot[40] += q; // HCN
  // d()/d[OH]
  dqdci = -k_r * sc[40];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[303] -= dqdci; // dwdot[CH2(S)]/d[OH]
  J[327] -= dqdci; // dwdot[NO]/d[OH]
  J[332] += dqdci; // dwdot[HCN]/d[OH]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[35];
  J[807] += dqdci; // dwdot[OH]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[838] -= dqdci; // dwdot[NO]/d[CH2(S)]
  J[843] += dqdci; // dwdot[HCN]/d[CH2(S)]
  // d()/d[NO]
  dqdci = +k_f * sc[11];
  J[2559] += dqdci; // dwdot[OH]/d[NO]
  J[2566] -= dqdci; // dwdot[CH2(S)]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2595] += dqdci; // dwdot[HCN]/d[NO]
  // d()/d[HCN]
  dqdci = -k_r * sc[4];
  J[2924] += dqdci; // dwdot[OH]/d[HCN]
  J[2931] -= dqdci; // dwdot[CH2(S)]/d[HCN]
  J[2955] -= dqdci; // dwdot[NO]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT

  // reaction 253: CH2(S) + NO <=> H + HCNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[35];
  k_f = 38000000 * exp(-0.36 * logT - (291.865666166737) * invT);
  dlnkfdT = -0.36 * invT + (291.865666166737) * invT2;
  // reverse
  phi_r = sc[1] * sc[43];
  Kc = exp(-g_RT[1] + g_RT[11] + g_RT[35] - g_RT[43]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[35]) + (h_RT[1] + h_RT[43]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[11] -= q; // CH2(S)
  wdot[35] -= q; // NO
  wdot[43] += q; // HCNO
  // d()/d[H]
  dqdci = -k_r * sc[43];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[84] -= dqdci;  // dwdot[CH2(S)]/d[H]
  J[108] -= dqdci; // dwdot[NO]/d[H]
  J[116] += dqdci; // dwdot[HCNO]/d[H]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[35];
  J[804] += dqdci; // dwdot[H]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[838] -= dqdci; // dwdot[NO]/d[CH2(S)]
  J[846] += dqdci; // dwdot[HCNO]/d[CH2(S)]
  // d()/d[NO]
  dqdci = +k_f * sc[11];
  J[2556] += dqdci; // dwdot[H]/d[NO]
  J[2566] -= dqdci; // dwdot[CH2(S)]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2598] += dqdci; // dwdot[HCNO]/d[NO]
  // d()/d[HCNO]
  dqdci = -k_r * sc[1];
  J[3140] += dqdci; // dwdot[H]/d[HCNO]
  J[3150] -= dqdci; // dwdot[CH2(S)]/d[HCNO]
  J[3174] -= dqdci; // dwdot[NO]/d[HCNO]
  J[3182] += dqdci; // dwdot[HCNO]/d[HCNO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5299] += dqdT; // dwdot[HCNO]/dT

  // reaction 254: CH3 + NO <=> H2O + HCN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[35];
  k_f = 96000000 * exp(-(14492.6399751759) * invT);
  dlnkfdT = (14492.6399751759) * invT2;
  // reverse
  phi_r = sc[5] * sc[40];
  Kc = exp(-g_RT[5] + g_RT[12] + g_RT[35] - g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[35]) + (h_RT[5] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[12] -= q; // CH3
  wdot[35] -= q; // NO
  wdot[40] += q; // HCN
  // d()/d[H2O]
  dqdci = -k_r * sc[40];
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[377] -= dqdci; // dwdot[CH3]/d[H2O]
  J[400] -= dqdci; // dwdot[NO]/d[H2O]
  J[405] += dqdci; // dwdot[HCN]/d[H2O]
  // d()/d[CH3]
  dqdci = +k_f * sc[35];
  J[881] += dqdci; // dwdot[H2O]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[911] -= dqdci; // dwdot[NO]/d[CH3]
  J[916] += dqdci; // dwdot[HCN]/d[CH3]
  // d()/d[NO]
  dqdci = +k_f * sc[12];
  J[2560] += dqdci; // dwdot[H2O]/d[NO]
  J[2567] -= dqdci; // dwdot[CH3]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2595] += dqdci; // dwdot[HCN]/d[NO]
  // d()/d[HCN]
  dqdci = -k_r * sc[5];
  J[2925] += dqdci; // dwdot[H2O]/d[HCN]
  J[2932] -= dqdci; // dwdot[CH3]/d[HCN]
  J[2955] -= dqdci; // dwdot[NO]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  // d()/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT

  // reaction 255: CH3 + NO <=> H2CN + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[35];
  k_f = 1000000 * exp(-(10944.9624812527) * invT);
  dlnkfdT = (10944.9624812527) * invT2;
  // reverse
  phi_r = sc[4] * sc[41];
  Kc = exp(-g_RT[4] + g_RT[12] + g_RT[35] - g_RT[41]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[35]) + (h_RT[4] + h_RT[41]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[12] -= q; // CH3
  wdot[35] -= q; // NO
  wdot[41] += q; // H2CN
  // d()/d[OH]
  dqdci = -k_r * sc[41];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[304] -= dqdci; // dwdot[CH3]/d[OH]
  J[327] -= dqdci; // dwdot[NO]/d[OH]
  J[333] += dqdci; // dwdot[H2CN]/d[OH]
  // d()/d[CH3]
  dqdci = +k_f * sc[35];
  J[880] += dqdci; // dwdot[OH]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[911] -= dqdci; // dwdot[NO]/d[CH3]
  J[917] += dqdci; // dwdot[H2CN]/d[CH3]
  // d()/d[NO]
  dqdci = +k_f * sc[12];
  J[2559] += dqdci; // dwdot[OH]/d[NO]
  J[2567] -= dqdci; // dwdot[CH3]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2596] += dqdci; // dwdot[H2CN]/d[NO]
  // d()/d[H2CN]
  dqdci = -k_r * sc[4];
  J[2997] += dqdci; // dwdot[OH]/d[H2CN]
  J[3005] -= dqdci; // dwdot[CH3]/d[H2CN]
  J[3028] -= dqdci; // dwdot[NO]/d[H2CN]
  J[3034] += dqdci; // dwdot[H2CN]/d[H2CN]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5297] += dqdT; // dwdot[H2CN]/dT

  // reaction 256: HCNN + O <=> CO + H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[42];
  k_f = 22000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[14] * sc[47];
  Kc = refC * exp(-g_RT[1] + g_RT[2] - g_RT[14] + g_RT[42] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[2] + h_RT[42]) + (h_RT[1] + h_RT[14] + h_RT[47]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[14] += q; // CO
  wdot[42] -= q; // HCNN
  wdot[47] += q; // N2
  // d()/d[H]
  dqdci = -k_r * sc[14] * sc[47];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[75] -= dqdci;  // dwdot[O]/d[H]
  J[87] += dqdci;  // dwdot[CO]/d[H]
  J[115] -= dqdci; // dwdot[HCNN]/d[H]
  J[120] += dqdci; // dwdot[N2]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[42];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[188] -= dqdci; // dwdot[HCNN]/d[O]
  J[193] += dqdci; // dwdot[N2]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * sc[47];
  J[1023] += dqdci; // dwdot[H]/d[CO]
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1064] -= dqdci; // dwdot[HCNN]/d[CO]
  J[1069] += dqdci; // dwdot[N2]/d[CO]
  // d()/d[HCNN]
  dqdci = +k_f * sc[2];
  J[3067] += dqdci; // dwdot[H]/d[HCNN]
  J[3068] -= dqdci; // dwdot[O]/d[HCNN]
  J[3080] += dqdci; // dwdot[CO]/d[HCNN]
  J[3108] -= dqdci; // dwdot[HCNN]/d[HCNN]
  J[3113] += dqdci; // dwdot[N2]/d[HCNN]
  // d()/d[N2]
  dqdci = -k_r * sc[1] * sc[14];
  J[3432] += dqdci; // dwdot[H]/d[N2]
  J[3433] -= dqdci; // dwdot[O]/d[N2]
  J[3445] += dqdci; // dwdot[CO]/d[N2]
  J[3473] -= dqdci; // dwdot[HCNN]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5298] -= dqdT; // dwdot[HCNN]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 257: HCNN + O <=> HCN + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[42];
  k_f = 2000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[35] * sc[40];
  Kc = exp(g_RT[2] - g_RT[35] - g_RT[40] + g_RT[42]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[42]) + (h_RT[35] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[35] += q; // NO
  wdot[40] += q; // HCN
  wdot[42] -= q; // HCNN
  // d()/d[O]
  dqdci = +k_f * sc[42];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[181] += dqdci; // dwdot[NO]/d[O]
  J[186] += dqdci; // dwdot[HCN]/d[O]
  J[188] -= dqdci; // dwdot[HCNN]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[40];
  J[2557] -= dqdci; // dwdot[O]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2595] += dqdci; // dwdot[HCN]/d[NO]
  J[2597] -= dqdci; // dwdot[HCNN]/d[NO]
  // d()/d[HCN]
  dqdci = -k_r * sc[35];
  J[2922] -= dqdci; // dwdot[O]/d[HCN]
  J[2955] += dqdci; // dwdot[NO]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  J[2962] -= dqdci; // dwdot[HCNN]/d[HCN]
  // d()/d[HCNN]
  dqdci = +k_f * sc[2];
  J[3068] -= dqdci; // dwdot[O]/d[HCNN]
  J[3101] += dqdci; // dwdot[NO]/d[HCNN]
  J[3106] += dqdci; // dwdot[HCN]/d[HCNN]
  J[3108] -= dqdci; // dwdot[HCNN]/d[HCNN]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT
  J[5298] -= dqdT; // dwdot[HCNN]/dT

  // reaction 258: HCNN + O2 <=> HCO + N2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[42];
  k_f = 12000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[16] * sc[47];
  Kc = refC * exp(-g_RT[2] + g_RT[3] - g_RT[16] + g_RT[42] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[3] + h_RT[42]) + (h_RT[2] + h_RT[16] + h_RT[47]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[16] += q; // HCO
  wdot[42] -= q; // HCNN
  wdot[47] += q; // N2
  // d()/d[O]
  dqdci = -k_r * sc[16] * sc[47];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[162] += dqdci; // dwdot[HCO]/d[O]
  J[188] -= dqdci; // dwdot[HCNN]/d[O]
  J[193] += dqdci; // dwdot[N2]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[42];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[235] += dqdci; // dwdot[HCO]/d[O2]
  J[261] -= dqdci; // dwdot[HCNN]/d[O2]
  J[266] += dqdci; // dwdot[N2]/d[O2]
  // d()/d[HCO]
  dqdci = -k_r * sc[2] * sc[47];
  J[1170] += dqdci; // dwdot[O]/d[HCO]
  J[1171] -= dqdci; // dwdot[O2]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1210] -= dqdci; // dwdot[HCNN]/d[HCO]
  J[1215] += dqdci; // dwdot[N2]/d[HCO]
  // d()/d[HCNN]
  dqdci = +k_f * sc[3];
  J[3068] += dqdci; // dwdot[O]/d[HCNN]
  J[3069] -= dqdci; // dwdot[O2]/d[HCNN]
  J[3082] += dqdci; // dwdot[HCO]/d[HCNN]
  J[3108] -= dqdci; // dwdot[HCNN]/d[HCNN]
  J[3113] += dqdci; // dwdot[N2]/d[HCNN]
  // d()/d[N2]
  dqdci = -k_r * sc[2] * sc[16];
  J[3433] += dqdci; // dwdot[O]/d[N2]
  J[3434] -= dqdci; // dwdot[O2]/d[N2]
  J[3447] += dqdci; // dwdot[HCO]/d[N2]
  J[3473] -= dqdci; // dwdot[HCNN]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5298] -= dqdT; // dwdot[HCNN]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 259: HCNN + OH <=> H + HCO + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[42];
  k_f = 12000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[16] * sc[47];
  Kc = refC * exp(-g_RT[1] + g_RT[4] - g_RT[16] + g_RT[42] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[4] + h_RT[42]) + (h_RT[1] + h_RT[16] + h_RT[47]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[16] += q; // HCO
  wdot[42] -= q; // HCNN
  wdot[47] += q; // N2
  // d()/d[H]
  dqdci = -k_r * sc[16] * sc[47];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[89] += dqdci;  // dwdot[HCO]/d[H]
  J[115] -= dqdci; // dwdot[HCNN]/d[H]
  J[120] += dqdci; // dwdot[N2]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[42];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[308] += dqdci; // dwdot[HCO]/d[OH]
  J[334] -= dqdci; // dwdot[HCNN]/d[OH]
  J[339] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[HCO]
  dqdci = -k_r * sc[1] * sc[47];
  J[1169] += dqdci; // dwdot[H]/d[HCO]
  J[1172] -= dqdci; // dwdot[OH]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1210] -= dqdci; // dwdot[HCNN]/d[HCO]
  J[1215] += dqdci; // dwdot[N2]/d[HCO]
  // d()/d[HCNN]
  dqdci = +k_f * sc[4];
  J[3067] += dqdci; // dwdot[H]/d[HCNN]
  J[3070] -= dqdci; // dwdot[OH]/d[HCNN]
  J[3082] += dqdci; // dwdot[HCO]/d[HCNN]
  J[3108] -= dqdci; // dwdot[HCNN]/d[HCNN]
  J[3113] += dqdci; // dwdot[N2]/d[HCNN]
  // d()/d[N2]
  dqdci = -k_r * sc[1] * sc[16];
  J[3432] += dqdci; // dwdot[H]/d[N2]
  J[3435] -= dqdci; // dwdot[OH]/d[N2]
  J[3447] += dqdci; // dwdot[HCO]/d[N2]
  J[3473] -= dqdci; // dwdot[HCNN]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5298] -= dqdT; // dwdot[HCNN]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 260: H + HCNN <=> CH2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[42];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[47];
  Kc = exp(g_RT[1] - g_RT[10] + g_RT[42] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[42]) + (h_RT[10] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[10] += q; // CH2
  wdot[42] -= q; // HCNN
  wdot[47] += q; // N2
  // d()/d[H]
  dqdci = +k_f * sc[42];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[83] += dqdci;  // dwdot[CH2]/d[H]
  J[115] -= dqdci; // dwdot[HCNN]/d[H]
  J[120] += dqdci; // dwdot[N2]/d[H]
  // d()/d[CH2]
  dqdci = -k_r * sc[47];
  J[731] -= dqdci; // dwdot[H]/d[CH2]
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  J[772] -= dqdci; // dwdot[HCNN]/d[CH2]
  J[777] += dqdci; // dwdot[N2]/d[CH2]
  // d()/d[HCNN]
  dqdci = +k_f * sc[1];
  J[3067] -= dqdci; // dwdot[H]/d[HCNN]
  J[3076] += dqdci; // dwdot[CH2]/d[HCNN]
  J[3108] -= dqdci; // dwdot[HCNN]/d[HCNN]
  J[3113] += dqdci; // dwdot[N2]/d[HCNN]
  // d()/d[N2]
  dqdci = -k_r * sc[10];
  J[3432] -= dqdci; // dwdot[H]/d[N2]
  J[3441] += dqdci; // dwdot[CH2]/d[N2]
  J[3473] -= dqdci; // dwdot[HCNN]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5298] -= dqdT; // dwdot[HCNN]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 261: HNCO + O <=> CO2 + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[45];
  k_f = 98 * exp(1.41 * logT - (4277.34165934012) * invT);
  dlnkfdT = 1.41 * invT + (4277.34165934012) * invT2;
  // reverse
  phi_r = sc[15] * sc[31];
  Kc = exp(g_RT[2] - g_RT[15] - g_RT[31] + g_RT[45]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[45]) + (h_RT[15] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[15] += q; // CO2
  wdot[31] += q; // NH
  wdot[45] -= q; // HNCO
  // d()/d[O]
  dqdci = +k_f * sc[45];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[161] += dqdci; // dwdot[CO2]/d[O]
  J[177] += dqdci; // dwdot[NH]/d[O]
  J[191] -= dqdci; // dwdot[HNCO]/d[O]
  // d()/d[CO2]
  dqdci = -k_r * sc[31];
  J[1097] -= dqdci; // dwdot[O]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  J[1126] += dqdci; // dwdot[NH]/d[CO2]
  J[1140] -= dqdci; // dwdot[HNCO]/d[CO2]
  // d()/d[NH]
  dqdci = -k_r * sc[15];
  J[2265] -= dqdci; // dwdot[O]/d[NH]
  J[2278] += dqdci; // dwdot[CO2]/d[NH]
  J[2294] += dqdci; // dwdot[NH]/d[NH]
  J[2308] -= dqdci; // dwdot[HNCO]/d[NH]
  // d()/d[HNCO]
  dqdci = +k_f * sc[2];
  J[3287] -= dqdci; // dwdot[O]/d[HNCO]
  J[3300] += dqdci; // dwdot[CO2]/d[HNCO]
  J[3316] += dqdci; // dwdot[NH]/d[HNCO]
  J[3330] -= dqdci; // dwdot[HNCO]/d[HNCO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5287] += dqdT; // dwdot[NH]/dT
  J[5301] -= dqdT; // dwdot[HNCO]/dT

  // reaction 262: HNCO + O <=> CO + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[45];
  k_f = 150 * exp(1.57 * logT - (22141.5332954077) * invT);
  dlnkfdT = 1.57 * invT + (22141.5332954077) * invT2;
  // reverse
  phi_r = sc[14] * sc[38];
  Kc = exp(g_RT[2] - g_RT[14] - g_RT[38] + g_RT[45]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[45]) + (h_RT[14] + h_RT[38]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[14] += q; // CO
  wdot[38] += q; // HNO
  wdot[45] -= q; // HNCO
  // d()/d[O]
  dqdci = +k_f * sc[45];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[184] += dqdci; // dwdot[HNO]/d[O]
  J[191] -= dqdci; // dwdot[HNCO]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc[38];
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1060] += dqdci; // dwdot[HNO]/d[CO]
  J[1067] -= dqdci; // dwdot[HNCO]/d[CO]
  // d()/d[HNO]
  dqdci = -k_r * sc[14];
  J[2776] -= dqdci; // dwdot[O]/d[HNO]
  J[2788] += dqdci; // dwdot[CO]/d[HNO]
  J[2812] += dqdci; // dwdot[HNO]/d[HNO]
  J[2819] -= dqdci; // dwdot[HNCO]/d[HNO]
  // d()/d[HNCO]
  dqdci = +k_f * sc[2];
  J[3287] -= dqdci; // dwdot[O]/d[HNCO]
  J[3299] += dqdci; // dwdot[CO]/d[HNCO]
  J[3323] += dqdci; // dwdot[HNO]/d[HNCO]
  J[3330] -= dqdci; // dwdot[HNCO]/d[HNCO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5294] += dqdT; // dwdot[HNO]/dT
  J[5301] -= dqdT; // dwdot[HNCO]/dT

  // reaction 263: HNCO + O <=> NCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[45];
  k_f = 2.2 * exp(2.11 * logT - (5736.6699901738) * invT);
  dlnkfdT = 2.11 * invT + (5736.6699901738) * invT2;
  // reverse
  phi_r = sc[4] * sc[46];
  Kc = exp(g_RT[2] - g_RT[4] + g_RT[45] - g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[45]) + (h_RT[4] + h_RT[46]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[45] -= q; // HNCO
  wdot[46] += q; // NCO
  // d()/d[O]
  dqdci = +k_f * sc[45];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[191] -= dqdci; // dwdot[HNCO]/d[O]
  J[192] += dqdci; // dwdot[NCO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[46];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[337] -= dqdci; // dwdot[HNCO]/d[OH]
  J[338] += dqdci; // dwdot[NCO]/d[OH]
  // d()/d[HNCO]
  dqdci = +k_f * sc[2];
  J[3287] -= dqdci; // dwdot[O]/d[HNCO]
  J[3289] += dqdci; // dwdot[OH]/d[HNCO]
  J[3330] -= dqdci; // dwdot[HNCO]/d[HNCO]
  J[3331] += dqdci; // dwdot[NCO]/d[HNCO]
  // d()/d[NCO]
  dqdci = -k_r * sc[4];
  J[3360] -= dqdci; // dwdot[O]/d[NCO]
  J[3362] += dqdci; // dwdot[OH]/d[NCO]
  J[3403] -= dqdci; // dwdot[HNCO]/d[NCO]
  J[3404] += dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5301] -= dqdT; // dwdot[HNCO]/dT
  J[5302] += dqdT; // dwdot[NCO]/dT

  // reaction 264: H + HNCO <=> CO + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[45];
  k_f = 22.5 * exp(1.7 * logT - (1912.22333005793) * invT);
  dlnkfdT = 1.7 * invT + (1912.22333005793) * invT2;
  // reverse
  phi_r = sc[14] * sc[32];
  Kc = exp(g_RT[1] - g_RT[14] - g_RT[32] + g_RT[45]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[45]) + (h_RT[14] + h_RT[32]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[14] += q; // CO
  wdot[32] += q; // NH2
  wdot[45] -= q; // HNCO
  // d()/d[H]
  dqdci = +k_f * sc[45];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[87] += dqdci;  // dwdot[CO]/d[H]
  J[105] += dqdci; // dwdot[NH2]/d[H]
  J[118] -= dqdci; // dwdot[HNCO]/d[H]
  // d()/d[CO]
  dqdci = -k_r * sc[32];
  J[1023] -= dqdci; // dwdot[H]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1054] += dqdci; // dwdot[NH2]/d[CO]
  J[1067] -= dqdci; // dwdot[HNCO]/d[CO]
  // d()/d[NH2]
  dqdci = -k_r * sc[14];
  J[2337] -= dqdci; // dwdot[H]/d[NH2]
  J[2350] += dqdci; // dwdot[CO]/d[NH2]
  J[2368] += dqdci; // dwdot[NH2]/d[NH2]
  J[2381] -= dqdci; // dwdot[HNCO]/d[NH2]
  // d()/d[HNCO]
  dqdci = +k_f * sc[1];
  J[3286] -= dqdci; // dwdot[H]/d[HNCO]
  J[3299] += dqdci; // dwdot[CO]/d[HNCO]
  J[3317] += dqdci; // dwdot[NH2]/d[HNCO]
  J[3330] -= dqdci; // dwdot[HNCO]/d[HNCO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5288] += dqdT; // dwdot[NH2]/dT
  J[5301] -= dqdT; // dwdot[HNCO]/dT

  // reaction 265: H + HNCO <=> H2 + NCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[45];
  k_f = 0.105 * exp(2.5 * logT - (6692.78165520277) * invT);
  dlnkfdT = 2.5 * invT + (6692.78165520277) * invT2;
  // reverse
  phi_r = sc[0] * sc[46];
  Kc = exp(-g_RT[0] + g_RT[1] + g_RT[45] - g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[45]) + (h_RT[0] + h_RT[46]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[45] -= q; // HNCO
  wdot[46] += q; // NCO
  // d()/d[H2]
  dqdci = -k_r * sc[46];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[45] -= dqdci; // dwdot[HNCO]/d[H2]
  J[46] += dqdci; // dwdot[NCO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[45];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[118] -= dqdci; // dwdot[HNCO]/d[H]
  J[119] += dqdci; // dwdot[NCO]/d[H]
  // d()/d[HNCO]
  dqdci = +k_f * sc[1];
  J[3285] += dqdci; // dwdot[H2]/d[HNCO]
  J[3286] -= dqdci; // dwdot[H]/d[HNCO]
  J[3330] -= dqdci; // dwdot[HNCO]/d[HNCO]
  J[3331] += dqdci; // dwdot[NCO]/d[HNCO]
  // d()/d[NCO]
  dqdci = -k_r * sc[0];
  J[3358] += dqdci; // dwdot[H2]/d[NCO]
  J[3359] -= dqdci; // dwdot[H]/d[NCO]
  J[3403] -= dqdci; // dwdot[HNCO]/d[NCO]
  J[3404] += dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5301] -= dqdT; // dwdot[HNCO]/dT
  J[5302] += dqdT; // dwdot[NCO]/dT

  // reaction 266: HNCO + OH <=> H2O + NCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[45];
  k_f = 33 * exp(1.5 * logT - (1811.57999689699) * invT);
  dlnkfdT = 1.5 * invT + (1811.57999689699) * invT2;
  // reverse
  phi_r = sc[5] * sc[46];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[45] - g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[45]) + (h_RT[5] + h_RT[46]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[45] -= q; // HNCO
  wdot[46] += q; // NCO
  // d()/d[OH]
  dqdci = +k_f * sc[45];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[337] -= dqdci; // dwdot[HNCO]/d[OH]
  J[338] += dqdci; // dwdot[NCO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[46];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[410] -= dqdci; // dwdot[HNCO]/d[H2O]
  J[411] += dqdci; // dwdot[NCO]/d[H2O]
  // d()/d[HNCO]
  dqdci = +k_f * sc[4];
  J[3289] -= dqdci; // dwdot[OH]/d[HNCO]
  J[3290] += dqdci; // dwdot[H2O]/d[HNCO]
  J[3330] -= dqdci; // dwdot[HNCO]/d[HNCO]
  J[3331] += dqdci; // dwdot[NCO]/d[HNCO]
  // d()/d[NCO]
  dqdci = -k_r * sc[5];
  J[3362] -= dqdci; // dwdot[OH]/d[NCO]
  J[3363] += dqdci; // dwdot[H2O]/d[NCO]
  J[3403] -= dqdci; // dwdot[HNCO]/d[NCO]
  J[3404] += dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5301] -= dqdT; // dwdot[HNCO]/dT
  J[5302] += dqdT; // dwdot[NCO]/dT

  // reaction 267: HNCO + OH <=> CO2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[45];
  k_f = 3.3 * exp(1.5 * logT - (1811.57999689699) * invT);
  dlnkfdT = 1.5 * invT + (1811.57999689699) * invT2;
  // reverse
  phi_r = sc[15] * sc[32];
  Kc = exp(g_RT[4] - g_RT[15] - g_RT[32] + g_RT[45]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[45]) + (h_RT[15] + h_RT[32]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[15] += q; // CO2
  wdot[32] += q; // NH2
  wdot[45] -= q; // HNCO
  // d()/d[OH]
  dqdci = +k_f * sc[45];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[307] += dqdci; // dwdot[CO2]/d[OH]
  J[324] += dqdci; // dwdot[NH2]/d[OH]
  J[337] -= dqdci; // dwdot[HNCO]/d[OH]
  // d()/d[CO2]
  dqdci = -k_r * sc[32];
  J[1099] -= dqdci; // dwdot[OH]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  J[1127] += dqdci; // dwdot[NH2]/d[CO2]
  J[1140] -= dqdci; // dwdot[HNCO]/d[CO2]
  // d()/d[NH2]
  dqdci = -k_r * sc[15];
  J[2340] -= dqdci; // dwdot[OH]/d[NH2]
  J[2351] += dqdci; // dwdot[CO2]/d[NH2]
  J[2368] += dqdci; // dwdot[NH2]/d[NH2]
  J[2381] -= dqdci; // dwdot[HNCO]/d[NH2]
  // d()/d[HNCO]
  dqdci = +k_f * sc[4];
  J[3289] -= dqdci; // dwdot[OH]/d[HNCO]
  J[3300] += dqdci; // dwdot[CO2]/d[HNCO]
  J[3317] += dqdci; // dwdot[NH2]/d[HNCO]
  J[3330] -= dqdci; // dwdot[HNCO]/d[HNCO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5288] += dqdT; // dwdot[NH2]/dT
  J[5301] -= dqdT; // dwdot[HNCO]/dT

  // reaction 269: H + HCNO <=> H + HNCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[43];
  k_f = 2100000000 * exp(-0.69 * logT - (1434.16749754345) * invT);
  dlnkfdT = -0.69 * invT + (1434.16749754345) * invT2;
  // reverse
  phi_r = sc[1] * sc[45];
  Kc = exp(g_RT[1] - g_RT[1] + g_RT[43] - g_RT[45]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[43]) + (h_RT[1] + h_RT[45]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[43] -= q; // HCNO
  wdot[45] += q; // HNCO
  // d()/d[H]
  dqdci = +k_f * sc[43] - k_r * sc[45];
  J[116] -= dqdci; // dwdot[HCNO]/d[H]
  J[118] += dqdci; // dwdot[HNCO]/d[H]
  // d()/d[HCNO]
  dqdci = +k_f * sc[1];
  J[3182] -= dqdci; // dwdot[HCNO]/d[HCNO]
  J[3184] += dqdci; // dwdot[HNCO]/d[HCNO]
  // d()/d[HNCO]
  dqdci = -k_r * sc[1];
  J[3328] -= dqdci; // dwdot[HCNO]/d[HNCO]
  J[3330] += dqdci; // dwdot[HNCO]/d[HNCO]
  // d()/dT
  J[5299] -= dqdT; // dwdot[HCNO]/dT
  J[5301] += dqdT; // dwdot[HNCO]/dT

  // reaction 270: H + HCNO <=> HCN + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[43];
  k_f = 270000 * exp(0.18 * logT - (1066.81933150601) * invT);
  dlnkfdT = 0.18 * invT + (1066.81933150601) * invT2;
  // reverse
  phi_r = sc[4] * sc[40];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[40] + g_RT[43]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[43]) + (h_RT[4] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[40] += q; // HCN
  wdot[43] -= q; // HCNO
  // d()/d[H]
  dqdci = +k_f * sc[43];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[77] += dqdci;  // dwdot[OH]/d[H]
  J[113] += dqdci; // dwdot[HCN]/d[H]
  J[116] -= dqdci; // dwdot[HCNO]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[40];
  J[293] -= dqdci; // dwdot[H]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[332] += dqdci; // dwdot[HCN]/d[OH]
  J[335] -= dqdci; // dwdot[HCNO]/d[OH]
  // d()/d[HCN]
  dqdci = -k_r * sc[4];
  J[2921] -= dqdci; // dwdot[H]/d[HCN]
  J[2924] += dqdci; // dwdot[OH]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  J[2963] -= dqdci; // dwdot[HCNO]/d[HCN]
  // d()/d[HCNO]
  dqdci = +k_f * sc[1];
  J[3140] -= dqdci; // dwdot[H]/d[HCNO]
  J[3143] += dqdci; // dwdot[OH]/d[HCNO]
  J[3179] += dqdci; // dwdot[HCN]/d[HCNO]
  J[3182] -= dqdci; // dwdot[HCNO]/d[HCNO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT
  J[5299] -= dqdT; // dwdot[HCNO]/dT

  // reaction 271: H + HCNO <=> CO + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[43];
  k_f = 170000000 * exp(-0.75 * logT - (1454.29616417564) * invT);
  dlnkfdT = -0.75 * invT + (1454.29616417564) * invT2;
  // reverse
  phi_r = sc[14] * sc[32];
  Kc = exp(g_RT[1] - g_RT[14] - g_RT[32] + g_RT[43]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[43]) + (h_RT[14] + h_RT[32]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[14] += q; // CO
  wdot[32] += q; // NH2
  wdot[43] -= q; // HCNO
  // d()/d[H]
  dqdci = +k_f * sc[43];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[87] += dqdci;  // dwdot[CO]/d[H]
  J[105] += dqdci; // dwdot[NH2]/d[H]
  J[116] -= dqdci; // dwdot[HCNO]/d[H]
  // d()/d[CO]
  dqdci = -k_r * sc[32];
  J[1023] -= dqdci; // dwdot[H]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1054] += dqdci; // dwdot[NH2]/d[CO]
  J[1065] -= dqdci; // dwdot[HCNO]/d[CO]
  // d()/d[NH2]
  dqdci = -k_r * sc[14];
  J[2337] -= dqdci; // dwdot[H]/d[NH2]
  J[2350] += dqdci; // dwdot[CO]/d[NH2]
  J[2368] += dqdci; // dwdot[NH2]/d[NH2]
  J[2379] -= dqdci; // dwdot[HCNO]/d[NH2]
  // d()/d[HCNO]
  dqdci = +k_f * sc[1];
  J[3140] -= dqdci; // dwdot[H]/d[HCNO]
  J[3153] += dqdci; // dwdot[CO]/d[HCNO]
  J[3171] += dqdci; // dwdot[NH2]/d[HCNO]
  J[3182] -= dqdci; // dwdot[HCNO]/d[HCNO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5288] += dqdT; // dwdot[NH2]/dT
  J[5299] -= dqdT; // dwdot[HCNO]/dT

  // reaction 272: H + HOCN <=> H + HNCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[44];
  k_f = 20 * exp(2 * logT - (1006.43333160944) * invT);
  dlnkfdT = 2 * invT + (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[1] * sc[45];
  Kc = exp(g_RT[1] - g_RT[1] + g_RT[44] - g_RT[45]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[44]) + (h_RT[1] + h_RT[45]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[44] -= q; // HOCN
  wdot[45] += q; // HNCO
  // d()/d[H]
  dqdci = +k_f * sc[44] - k_r * sc[45];
  J[117] -= dqdci; // dwdot[HOCN]/d[H]
  J[118] += dqdci; // dwdot[HNCO]/d[H]
  // d()/d[HOCN]
  dqdci = +k_f * sc[1];
  J[3256] -= dqdci; // dwdot[HOCN]/d[HOCN]
  J[3257] += dqdci; // dwdot[HNCO]/d[HOCN]
  // d()/d[HNCO]
  dqdci = -k_r * sc[1];
  J[3329] -= dqdci; // dwdot[HOCN]/d[HNCO]
  J[3330] += dqdci; // dwdot[HNCO]/d[HNCO]
  // d()/dT
  J[5300] -= dqdT; // dwdot[HOCN]/dT
  J[5301] += dqdT; // dwdot[HNCO]/dT

  // reaction 273: HCCO + NO <=> CO + HCNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[27] * sc[35];
  k_f = 9000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[43];
  Kc = exp(-g_RT[14] + g_RT[27] + g_RT[35] - g_RT[43]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[27] + h_RT[35]) + (h_RT[14] + h_RT[43]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[27] -= q; // HCCO
  wdot[35] -= q; // NO
  wdot[43] += q; // HCNO
  // d()/d[CO]
  dqdci = -k_r * sc[43];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1049] -= dqdci; // dwdot[HCCO]/d[CO]
  J[1057] -= dqdci; // dwdot[NO]/d[CO]
  J[1065] += dqdci; // dwdot[HCNO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[35];
  J[1985] += dqdci; // dwdot[CO]/d[HCCO]
  J[1998] -= dqdci; // dwdot[HCCO]/d[HCCO]
  J[2006] -= dqdci; // dwdot[NO]/d[HCCO]
  J[2014] += dqdci; // dwdot[HCNO]/d[HCCO]
  // d()/d[NO]
  dqdci = +k_f * sc[27];
  J[2569] += dqdci; // dwdot[CO]/d[NO]
  J[2582] -= dqdci; // dwdot[HCCO]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2598] += dqdci; // dwdot[HCNO]/d[NO]
  // d()/d[HCNO]
  dqdci = -k_r * sc[14];
  J[3153] += dqdci; // dwdot[CO]/d[HCNO]
  J[3166] -= dqdci; // dwdot[HCCO]/d[HCNO]
  J[3174] -= dqdci; // dwdot[NO]/d[HCNO]
  J[3182] += dqdci; // dwdot[HCNO]/d[HCNO]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5283] -= dqdT; // dwdot[HCCO]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5299] += dqdT; // dwdot[HCNO]/dT

  // reaction 274: CH3 + N <=> H + H2CN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[30];
  k_f = 610000000 * exp(-0.31 * logT - (145.932833083369) * invT);
  dlnkfdT = -0.31 * invT + (145.932833083369) * invT2;
  // reverse
  phi_r = sc[1] * sc[41];
  Kc = exp(-g_RT[1] + g_RT[12] + g_RT[30] - g_RT[41]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[30]) + (h_RT[1] + h_RT[41]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[12] -= q; // CH3
  wdot[30] -= q; // N
  wdot[41] += q; // H2CN
  // d()/d[H]
  dqdci = -k_r * sc[41];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[85] -= dqdci;  // dwdot[CH3]/d[H]
  J[103] -= dqdci; // dwdot[N]/d[H]
  J[114] += dqdci; // dwdot[H2CN]/d[H]
  // d()/d[CH3]
  dqdci = +k_f * sc[30];
  J[877] += dqdci; // dwdot[H]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[906] -= dqdci; // dwdot[N]/d[CH3]
  J[917] += dqdci; // dwdot[H2CN]/d[CH3]
  // d()/d[N]
  dqdci = +k_f * sc[12];
  J[2191] += dqdci; // dwdot[H]/d[N]
  J[2202] -= dqdci; // dwdot[CH3]/d[N]
  J[2220] -= dqdci; // dwdot[N]/d[N]
  J[2231] += dqdci; // dwdot[H2CN]/d[N]
  // d()/d[H2CN]
  dqdci = -k_r * sc[1];
  J[2994] += dqdci; // dwdot[H]/d[H2CN]
  J[3005] -= dqdci; // dwdot[CH3]/d[H2CN]
  J[3023] -= dqdci; // dwdot[N]/d[H2CN]
  J[3034] += dqdci; // dwdot[H2CN]/d[H2CN]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5286] -= dqdT; // dwdot[N]/dT
  J[5297] += dqdT; // dwdot[H2CN]/dT

  // reaction 275: CH3 + N <=> H2 + HCN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[30];
  k_f = 3700000 * exp(0.15 * logT - (-45.2894999224248) * invT);
  dlnkfdT = 0.15 * invT + (-45.2894999224248) * invT2;
  // reverse
  phi_r = sc[0] * sc[40];
  Kc = exp(-g_RT[0] + g_RT[12] + g_RT[30] - g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[30]) + (h_RT[0] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[12] -= q; // CH3
  wdot[30] -= q; // N
  wdot[40] += q; // HCN
  // d()/d[H2]
  dqdci = -k_r * sc[40];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[12] -= dqdci; // dwdot[CH3]/d[H2]
  J[30] -= dqdci; // dwdot[N]/d[H2]
  J[40] += dqdci; // dwdot[HCN]/d[H2]
  // d()/d[CH3]
  dqdci = +k_f * sc[30];
  J[876] += dqdci; // dwdot[H2]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[906] -= dqdci; // dwdot[N]/d[CH3]
  J[916] += dqdci; // dwdot[HCN]/d[CH3]
  // d()/d[N]
  dqdci = +k_f * sc[12];
  J[2190] += dqdci; // dwdot[H2]/d[N]
  J[2202] -= dqdci; // dwdot[CH3]/d[N]
  J[2220] -= dqdci; // dwdot[N]/d[N]
  J[2230] += dqdci; // dwdot[HCN]/d[N]
  // d()/d[HCN]
  dqdci = -k_r * sc[0];
  J[2920] += dqdci; // dwdot[H2]/d[HCN]
  J[2932] -= dqdci; // dwdot[CH3]/d[HCN]
  J[2950] -= dqdci; // dwdot[N]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5286] -= dqdT; // dwdot[N]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT

  // reaction 276: H + NH3 <=> H2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[33];
  k_f = 0.54 * exp(2.4 * logT - (4989.3932414538) * invT);
  dlnkfdT = 2.4 * invT + (4989.3932414538) * invT2;
  // reverse
  phi_r = sc[0] * sc[32];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[32] + g_RT[33]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[33]) + (h_RT[0] + h_RT[32]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[32] += q; // NH2
  wdot[33] -= q; // NH3
  // d()/d[H2]
  dqdci = -k_r * sc[32];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[32] += dqdci; // dwdot[NH2]/d[H2]
  J[33] -= dqdci; // dwdot[NH3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[33];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[105] += dqdci; // dwdot[NH2]/d[H]
  J[106] -= dqdci; // dwdot[NH3]/d[H]
  // d()/d[NH2]
  dqdci = -k_r * sc[0];
  J[2336] += dqdci; // dwdot[H2]/d[NH2]
  J[2337] -= dqdci; // dwdot[H]/d[NH2]
  J[2368] += dqdci; // dwdot[NH2]/d[NH2]
  J[2369] -= dqdci; // dwdot[NH3]/d[NH2]
  // d()/d[NH3]
  dqdci = +k_f * sc[1];
  J[2409] += dqdci; // dwdot[H2]/d[NH3]
  J[2410] -= dqdci; // dwdot[H]/d[NH3]
  J[2441] += dqdci; // dwdot[NH2]/d[NH3]
  J[2442] -= dqdci; // dwdot[NH3]/d[NH3]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5288] += dqdT; // dwdot[NH2]/dT
  J[5289] -= dqdT; // dwdot[NH3]/dT

  // reaction 277: NH3 + OH <=> H2O + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[33];
  k_f = 50 * exp(1.6 * logT - (480.571915843507) * invT);
  dlnkfdT = 1.6 * invT + (480.571915843507) * invT2;
  // reverse
  phi_r = sc[5] * sc[32];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[32] + g_RT[33]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[33]) + (h_RT[5] + h_RT[32]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[32] += q; // NH2
  wdot[33] -= q; // NH3
  // d()/d[OH]
  dqdci = +k_f * sc[33];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[324] += dqdci; // dwdot[NH2]/d[OH]
  J[325] -= dqdci; // dwdot[NH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[32];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[397] += dqdci; // dwdot[NH2]/d[H2O]
  J[398] -= dqdci; // dwdot[NH3]/d[H2O]
  // d()/d[NH2]
  dqdci = -k_r * sc[5];
  J[2340] -= dqdci; // dwdot[OH]/d[NH2]
  J[2341] += dqdci; // dwdot[H2O]/d[NH2]
  J[2368] += dqdci; // dwdot[NH2]/d[NH2]
  J[2369] -= dqdci; // dwdot[NH3]/d[NH2]
  // d()/d[NH3]
  dqdci = +k_f * sc[4];
  J[2413] -= dqdci; // dwdot[OH]/d[NH3]
  J[2414] += dqdci; // dwdot[H2O]/d[NH3]
  J[2441] += dqdci; // dwdot[NH2]/d[NH3]
  J[2442] -= dqdci; // dwdot[NH3]/d[NH3]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5288] += dqdT; // dwdot[NH2]/dT
  J[5289] -= dqdT; // dwdot[NH3]/dT

  // reaction 278: NH3 + O <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[33];
  k_f = 9.4 * exp(1.94 * logT - (3250.77966109849) * invT);
  dlnkfdT = 1.94 * invT + (3250.77966109849) * invT2;
  // reverse
  phi_r = sc[4] * sc[32];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[32] + g_RT[33]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[33]) + (h_RT[4] + h_RT[32]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[32] += q; // NH2
  wdot[33] -= q; // NH3
  // d()/d[O]
  dqdci = +k_f * sc[33];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[178] += dqdci; // dwdot[NH2]/d[O]
  J[179] -= dqdci; // dwdot[NH3]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[32];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[324] += dqdci; // dwdot[NH2]/d[OH]
  J[325] -= dqdci; // dwdot[NH3]/d[OH]
  // d()/d[NH2]
  dqdci = -k_r * sc[4];
  J[2338] -= dqdci; // dwdot[O]/d[NH2]
  J[2340] += dqdci; // dwdot[OH]/d[NH2]
  J[2368] += dqdci; // dwdot[NH2]/d[NH2]
  J[2369] -= dqdci; // dwdot[NH3]/d[NH2]
  // d()/d[NH3]
  dqdci = +k_f * sc[2];
  J[2411] -= dqdci; // dwdot[O]/d[NH3]
  J[2413] += dqdci; // dwdot[OH]/d[NH3]
  J[2441] += dqdci; // dwdot[NH2]/d[NH3]
  J[2442] -= dqdci; // dwdot[NH3]/d[NH3]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5288] += dqdT; // dwdot[NH2]/dT
  J[5289] -= dqdT; // dwdot[NH3]/dT

  // reaction 279: CO2 + NH <=> CO + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[31];
  k_f = 10000000 * exp(-(7221.15915429773) * invT);
  dlnkfdT = (7221.15915429773) * invT2;
  // reverse
  phi_r = sc[14] * sc[38];
  Kc = exp(-g_RT[14] + g_RT[15] + g_RT[31] - g_RT[38]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[31]) + (h_RT[14] + h_RT[38]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[15] -= q; // CO2
  wdot[31] -= q; // NH
  wdot[38] += q; // HNO
  // d()/d[CO]
  dqdci = -k_r * sc[38];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1037] -= dqdci; // dwdot[CO2]/d[CO]
  J[1053] -= dqdci; // dwdot[NH]/d[CO]
  J[1060] += dqdci; // dwdot[HNO]/d[CO]
  // d()/d[CO2]
  dqdci = +k_f * sc[31];
  J[1109] += dqdci; // dwdot[CO]/d[CO2]
  J[1110] -= dqdci; // dwdot[CO2]/d[CO2]
  J[1126] -= dqdci; // dwdot[NH]/d[CO2]
  J[1133] += dqdci; // dwdot[HNO]/d[CO2]
  // d()/d[NH]
  dqdci = +k_f * sc[15];
  J[2277] += dqdci; // dwdot[CO]/d[NH]
  J[2278] -= dqdci; // dwdot[CO2]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  J[2301] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[14];
  J[2788] += dqdci; // dwdot[CO]/d[HNO]
  J[2789] -= dqdci; // dwdot[CO2]/d[HNO]
  J[2805] -= dqdci; // dwdot[NH]/d[HNO]
  J[2812] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5271] -= dqdT; // dwdot[CO2]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT
  J[5294] += dqdT; // dwdot[HNO]/dT

  // reaction 280: CN + NO2 <=> NCO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[36] * sc[39];
  k_f = 6160000000 * exp(-0.752 * logT - (173.609749702628) * invT);
  dlnkfdT = -0.752 * invT + (173.609749702628) * invT2;
  // reverse
  phi_r = sc[35] * sc[46];
  Kc = exp(-g_RT[35] + g_RT[36] + g_RT[39] - g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[36] + h_RT[39]) + (h_RT[35] + h_RT[46]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[35] += q; // NO
  wdot[36] -= q; // NO2
  wdot[39] -= q; // CN
  wdot[46] += q; // NCO
  // d()/d[NO]
  dqdci = -k_r * sc[46];
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2591] -= dqdci; // dwdot[NO2]/d[NO]
  J[2594] -= dqdci; // dwdot[CN]/d[NO]
  J[2601] += dqdci; // dwdot[NCO]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[39];
  J[2663] += dqdci; // dwdot[NO]/d[NO2]
  J[2664] -= dqdci; // dwdot[NO2]/d[NO2]
  J[2667] -= dqdci; // dwdot[CN]/d[NO2]
  J[2674] += dqdci; // dwdot[NCO]/d[NO2]
  // d()/d[CN]
  dqdci = +k_f * sc[36];
  J[2882] += dqdci; // dwdot[NO]/d[CN]
  J[2883] -= dqdci; // dwdot[NO2]/d[CN]
  J[2886] -= dqdci; // dwdot[CN]/d[CN]
  J[2893] += dqdci; // dwdot[NCO]/d[CN]
  // d()/d[NCO]
  dqdci = -k_r * sc[35];
  J[3393] += dqdci; // dwdot[NO]/d[NCO]
  J[3394] -= dqdci; // dwdot[NO2]/d[NCO]
  J[3397] -= dqdci; // dwdot[CN]/d[NCO]
  J[3404] += dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5292] -= dqdT; // dwdot[NO2]/dT
  J[5295] -= dqdT; // dwdot[CN]/dT
  J[5302] += dqdT; // dwdot[NCO]/dT

  // reaction 281: NCO + NO2 <=> CO2 + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[36] * sc[46];
  k_f = 3250000 * exp(-(-354.767749392327) * invT);
  dlnkfdT = (-354.767749392327) * invT2;
  // reverse
  phi_r = sc[15] * sc[37];
  Kc = exp(-g_RT[15] + g_RT[36] - g_RT[37] + g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[36] + h_RT[46]) + (h_RT[15] + h_RT[37]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] += q; // CO2
  wdot[36] -= q; // NO2
  wdot[37] += q; // N2O
  wdot[46] -= q; // NCO
  // d()/d[CO2]
  dqdci = -k_r * sc[37];
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  J[1131] -= dqdci; // dwdot[NO2]/d[CO2]
  J[1132] += dqdci; // dwdot[N2O]/d[CO2]
  J[1141] -= dqdci; // dwdot[NCO]/d[CO2]
  // d()/d[NO2]
  dqdci = +k_f * sc[46];
  J[2643] += dqdci; // dwdot[CO2]/d[NO2]
  J[2664] -= dqdci; // dwdot[NO2]/d[NO2]
  J[2665] += dqdci; // dwdot[N2O]/d[NO2]
  J[2674] -= dqdci; // dwdot[NCO]/d[NO2]
  // d()/d[N2O]
  dqdci = -k_r * sc[15];
  J[2716] += dqdci; // dwdot[CO2]/d[N2O]
  J[2737] -= dqdci; // dwdot[NO2]/d[N2O]
  J[2738] += dqdci; // dwdot[N2O]/d[N2O]
  J[2747] -= dqdci; // dwdot[NCO]/d[N2O]
  // d()/d[NCO]
  dqdci = +k_f * sc[36];
  J[3373] += dqdci; // dwdot[CO2]/d[NCO]
  J[3394] -= dqdci; // dwdot[NO2]/d[NCO]
  J[3395] += dqdci; // dwdot[N2O]/d[NCO]
  J[3404] -= dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5292] -= dqdT; // dwdot[NO2]/dT
  J[5293] += dqdT; // dwdot[N2O]/dT
  J[5302] -= dqdT; // dwdot[NCO]/dT

  // reaction 282: CO2 + N <=> CO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[30];
  k_f = 3000000 * exp(-(5686.34832359333) * invT);
  dlnkfdT = (5686.34832359333) * invT2;
  // reverse
  phi_r = sc[14] * sc[35];
  Kc = exp(-g_RT[14] + g_RT[15] + g_RT[30] - g_RT[35]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[30]) + (h_RT[14] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[15] -= q; // CO2
  wdot[30] -= q; // N
  wdot[35] += q; // NO
  // d()/d[CO]
  dqdci = -k_r * sc[35];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1037] -= dqdci; // dwdot[CO2]/d[CO]
  J[1052] -= dqdci; // dwdot[N]/d[CO]
  J[1057] += dqdci; // dwdot[NO]/d[CO]
  // d()/d[CO2]
  dqdci = +k_f * sc[30];
  J[1109] += dqdci; // dwdot[CO]/d[CO2]
  J[1110] -= dqdci; // dwdot[CO2]/d[CO2]
  J[1125] -= dqdci; // dwdot[N]/d[CO2]
  J[1130] += dqdci; // dwdot[NO]/d[CO2]
  // d()/d[N]
  dqdci = +k_f * sc[15];
  J[2204] += dqdci; // dwdot[CO]/d[N]
  J[2205] -= dqdci; // dwdot[CO2]/d[N]
  J[2220] -= dqdci; // dwdot[N]/d[N]
  J[2225] += dqdci; // dwdot[NO]/d[N]
  // d()/d[NO]
  dqdci = -k_r * sc[14];
  J[2569] += dqdci; // dwdot[CO]/d[NO]
  J[2570] -= dqdci; // dwdot[CO2]/d[NO]
  J[2585] -= dqdci; // dwdot[N]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5271] -= dqdT; // dwdot[CO2]/dT
  J[5286] -= dqdT; // dwdot[N]/dT
  J[5291] += dqdT; // dwdot[NO]/dT

  // reaction 283: CH3 + O => CO + H + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[12];
  k_f = 33700000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[12] -= q; // CH3
  wdot[14] += q; // CO
  // d()/d[O]
  dqdci = +k_f * sc[12];
  J[146] += dqdci; // dwdot[H2]/d[O]
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[158] -= dqdci; // dwdot[CH3]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  // d()/d[CH3]
  dqdci = +k_f * sc[2];
  J[876] += dqdci; // dwdot[H2]/d[CH3]
  J[877] += dqdci; // dwdot[H]/d[CH3]
  J[878] -= dqdci; // dwdot[O]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[890] += dqdci; // dwdot[CO]/d[CH3]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5270] += dqdT; // dwdot[CO]/dT

  // reaction 284: C2H4 + O <=> CH2CHO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[24];
  k_f = 6.7 * exp(1.83 * logT - (110.707666477038) * invT);
  dlnkfdT = 1.83 * invT + (110.707666477038) * invT2;
  // reverse
  phi_r = sc[1] * sc[51];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[24] - g_RT[51]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[24]) + (h_RT[1] + h_RT[51]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[24] -= q; // C2H4
  wdot[51] += q; // CH2CHO
  // d()/d[H]
  dqdci = -k_r * sc[51];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[75] -= dqdci;  // dwdot[O]/d[H]
  J[97] -= dqdci;  // dwdot[C2H4]/d[H]
  J[124] += dqdci; // dwdot[CH2CHO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[24];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[170] -= dqdci; // dwdot[C2H4]/d[O]
  J[197] += dqdci; // dwdot[CH2CHO]/d[O]
  // d()/d[C2H4]
  dqdci = +k_f * sc[2];
  J[1753] += dqdci; // dwdot[H]/d[C2H4]
  J[1754] -= dqdci; // dwdot[O]/d[C2H4]
  J[1776] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[1803] += dqdci; // dwdot[CH2CHO]/d[C2H4]
  // d()/d[CH2CHO]
  dqdci = -k_r * sc[1];
  J[3724] += dqdci; // dwdot[H]/d[CH2CHO]
  J[3725] -= dqdci; // dwdot[O]/d[CH2CHO]
  J[3747] -= dqdci; // dwdot[C2H4]/d[CH2CHO]
  J[3774] += dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT
  J[5307] += dqdT; // dwdot[CH2CHO]/dT

  // reaction 285: C2H5 + O <=> CH3CHO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[25];
  k_f = 109600000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[52];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[25] - g_RT[52]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[25]) + (h_RT[1] + h_RT[52]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[25] -= q; // C2H5
  wdot[52] += q; // CH3CHO
  // d()/d[H]
  dqdci = -k_r * sc[52];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[75] -= dqdci;  // dwdot[O]/d[H]
  J[98] -= dqdci;  // dwdot[C2H5]/d[H]
  J[125] += dqdci; // dwdot[CH3CHO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[25];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[171] -= dqdci; // dwdot[C2H5]/d[O]
  J[198] += dqdci; // dwdot[CH3CHO]/d[O]
  // d()/d[C2H5]
  dqdci = +k_f * sc[2];
  J[1826] += dqdci; // dwdot[H]/d[C2H5]
  J[1827] -= dqdci; // dwdot[O]/d[C2H5]
  J[1850] -= dqdci; // dwdot[C2H5]/d[C2H5]
  J[1877] += dqdci; // dwdot[CH3CHO]/d[C2H5]
  // d()/d[CH3CHO]
  dqdci = -k_r * sc[1];
  J[3797] += dqdci; // dwdot[H]/d[CH3CHO]
  J[3798] -= dqdci; // dwdot[O]/d[CH3CHO]
  J[3821] -= dqdci; // dwdot[C2H5]/d[CH3CHO]
  J[3848] += dqdci; // dwdot[CH3CHO]/d[CH3CHO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5281] -= dqdT; // dwdot[C2H5]/dT
  J[5308] += dqdT; // dwdot[CH3CHO]/dT

  // reaction 286: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[6];
  k_f = 5000000000 * exp(-(8720.74481839579) * invT);
  dlnkfdT = (8720.74481839579) * invT2;
  // reverse
  phi_r = sc[3] * sc[5];
  Kc = exp(-g_RT[3] + g_RT[4] - g_RT[5] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[6]) + (h_RT[3] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // O2
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] -= q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[5];
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[223] -= dqdci; // dwdot[OH]/d[O2]
  J[224] += dqdci; // dwdot[H2O]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[OH]
  dqdci = +k_f * sc[6];
  J[295] += dqdci; // dwdot[O2]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[298] -= dqdci; // dwdot[HO2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[368] += dqdci; // dwdot[O2]/d[H2O]
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[371] -= dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[4];
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[442] -= dqdci; // dwdot[OH]/d[HO2]
  J[443] += dqdci; // dwdot[H2O]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT

  // reaction 287: CH3 + OH => CH2O + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 8000 * exp(0.5 * logT - (-883.145248487283) * invT);
  dlnkfdT = 0.5 * invT + (-883.145248487283) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // H2
  wdot[4] -= q;  // OH
  wdot[12] -= q; // CH3
  wdot[17] += q; // CH2O
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[292] += dqdci; // dwdot[H2]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[304] -= dqdci; // dwdot[CH3]/d[OH]
  J[309] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH3]
  dqdci = +k_f * sc[4];
  J[876] += dqdci; // dwdot[H2]/d[CH3]
  J[880] -= dqdci; // dwdot[OH]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[893] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 289: CH2 + O2 => CO2 + 2 H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 5800000 * exp(-(754.82499870708) * invT);
  dlnkfdT = (754.82499870708) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += 2 * q; // H
  wdot[3] -= q;     // O2
  wdot[10] -= q;    // CH2
  wdot[15] += q;    // CO2
  // d()/d[O2]
  dqdci = +k_f * sc[10];
  J[220] += 2 * dqdci; // dwdot[H]/d[O2]
  J[222] -= dqdci;     // dwdot[O2]/d[O2]
  J[229] -= dqdci;     // dwdot[CH2]/d[O2]
  J[234] += dqdci;     // dwdot[CO2]/d[O2]
  // d()/d[CH2]
  dqdci = +k_f * sc[3];
  J[731] += 2 * dqdci; // dwdot[H]/d[CH2]
  J[733] -= dqdci;     // dwdot[O2]/d[CH2]
  J[740] -= dqdci;     // dwdot[CH2]/d[CH2]
  J[745] += dqdci;     // dwdot[CO2]/d[CH2]
  // d()/dT
  J[5257] += 2 * dqdT; // dwdot[H]/dT
  J[5259] -= dqdT;     // dwdot[O2]/dT
  J[5266] -= dqdT;     // dwdot[CH2]/dT
  J[5271] += dqdT;     // dwdot[CO2]/dT

  // reaction 290: CH2 + O2 <=> CH2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 2400000 * exp(-(754.82499870708) * invT);
  dlnkfdT = (754.82499870708) * invT2;
  // reverse
  phi_r = sc[2] * sc[17];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[10] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[10]) + (h_RT[2] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[10] -= q; // CH2
  wdot[17] += q; // CH2O
  // d()/d[O]
  dqdci = -k_r * sc[17];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[156] -= dqdci; // dwdot[CH2]/d[O]
  J[163] += dqdci; // dwdot[CH2O]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[10];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[229] -= dqdci; // dwdot[CH2]/d[O2]
  J[236] += dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[CH2]
  dqdci = +k_f * sc[3];
  J[732] += dqdci; // dwdot[O]/d[CH2]
  J[733] -= dqdci; // dwdot[O2]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[747] += dqdci; // dwdot[CH2O]/d[CH2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[2];
  J[1243] += dqdci; // dwdot[O]/d[CH2O]
  J[1244] -= dqdci; // dwdot[O2]/d[CH2O]
  J[1251] -= dqdci; // dwdot[CH2]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 291: 2 CH2 => C2H2 + 2 H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 200000000 * exp(-(5529.84794052807) * invT);
  dlnkfdT = (5529.84794052807) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += 2 * q;  // H
  wdot[10] -= 2 * q; // CH2
  wdot[22] += q;     // C2H2
  // d()/d[CH2]
  dqdci = +k_f * 2.000000 * sc[10];
  J[731] += 2 * dqdci;  // dwdot[H]/d[CH2]
  J[740] += -2 * dqdci; // dwdot[CH2]/d[CH2]
  J[752] += dqdci;      // dwdot[C2H2]/d[CH2]
  // d()/dT
  J[5257] += 2 * dqdT;  // dwdot[H]/dT
  J[5266] += -2 * dqdT; // dwdot[CH2]/dT
  J[5278] += dqdT;      // dwdot[C2H2]/dT

  // reaction 292: CH2(S) + H2O => CH2O + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[11];
  k_f = 68200 * exp(0.25 * logT - (-470.507582527413) * invT);
  dlnkfdT = 0.25 * invT + (-470.507582527413) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // H2
  wdot[5] -= q;  // H2O
  wdot[11] -= q; // CH2(S)
  wdot[17] += q; // CH2O
  // d()/d[H2O]
  dqdci = +k_f * sc[11];
  J[365] += dqdci; // dwdot[H2]/d[H2O]
  J[370] -= dqdci; // dwdot[H2O]/d[H2O]
  J[376] -= dqdci; // dwdot[CH2(S)]/d[H2O]
  J[382] += dqdci; // dwdot[CH2O]/d[H2O]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[5];
  J[803] += dqdci; // dwdot[H2]/d[CH2(S)]
  J[808] -= dqdci; // dwdot[H2O]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[820] += dqdci; // dwdot[CH2O]/d[CH2(S)]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5261] -= dqdT; // dwdot[H2O]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 293: C2H3 + O2 <=> CH2CHO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[23];
  k_f = 303000 * exp(0.29 * logT - (5.53538332385192) * invT);
  dlnkfdT = 0.29 * invT + (5.53538332385192) * invT2;
  // reverse
  phi_r = sc[2] * sc[51];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[23] - g_RT[51]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[23]) + (h_RT[2] + h_RT[51]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[23] -= q; // C2H3
  wdot[51] += q; // CH2CHO
  // d()/d[O]
  dqdci = -k_r * sc[51];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[169] -= dqdci; // dwdot[C2H3]/d[O]
  J[197] += dqdci; // dwdot[CH2CHO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[23];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[242] -= dqdci; // dwdot[C2H3]/d[O2]
  J[270] += dqdci; // dwdot[CH2CHO]/d[O2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[3];
  J[1681] += dqdci; // dwdot[O]/d[C2H3]
  J[1682] -= dqdci; // dwdot[O2]/d[C2H3]
  J[1702] -= dqdci; // dwdot[C2H3]/d[C2H3]
  J[1730] += dqdci; // dwdot[CH2CHO]/d[C2H3]
  // d()/d[CH2CHO]
  dqdci = -k_r * sc[2];
  J[3725] += dqdci; // dwdot[O]/d[CH2CHO]
  J[3726] -= dqdci; // dwdot[O2]/d[CH2CHO]
  J[3746] -= dqdci; // dwdot[C2H3]/d[CH2CHO]
  J[3774] += dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT
  J[5307] += dqdT; // dwdot[CH2CHO]/dT

  // reaction 294: C2H3 + O2 <=> C2H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[23];
  k_f = 1.337 * exp(1.61 * logT - (-193.235199669012) * invT);
  dlnkfdT = 1.61 * invT + (-193.235199669012) * invT2;
  // reverse
  phi_r = sc[6] * sc[22];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[22] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[23]) + (h_RT[6] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[22] += q; // C2H2
  wdot[23] -= q; // C2H3
  // d()/d[O2]
  dqdci = +k_f * sc[23];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  J[241] += dqdci; // dwdot[C2H2]/d[O2]
  J[242] -= dqdci; // dwdot[C2H3]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[22];
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[460] += dqdci; // dwdot[C2H2]/d[HO2]
  J[461] -= dqdci; // dwdot[C2H3]/d[HO2]
  // d()/d[C2H2]
  dqdci = -k_r * sc[6];
  J[1609] -= dqdci; // dwdot[O2]/d[C2H2]
  J[1612] += dqdci; // dwdot[HO2]/d[C2H2]
  J[1628] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[1629] -= dqdci; // dwdot[C2H3]/d[C2H2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[3];
  J[1682] -= dqdci; // dwdot[O2]/d[C2H3]
  J[1685] += dqdci; // dwdot[HO2]/d[C2H3]
  J[1701] += dqdci; // dwdot[C2H2]/d[C2H3]
  J[1702] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT

  // reaction 295: CH3CHO + O <=> CH2CHO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[52];
  k_f = 2920000 * exp(-(909.815731774933) * invT);
  dlnkfdT = (909.815731774933) * invT2;
  // reverse
  phi_r = sc[4] * sc[51];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[51] + g_RT[52]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[52]) + (h_RT[4] + h_RT[51]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[51] += q; // CH2CHO
  wdot[52] -= q; // CH3CHO
  // d()/d[O]
  dqdci = +k_f * sc[52];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[197] += dqdci; // dwdot[CH2CHO]/d[O]
  J[198] -= dqdci; // dwdot[CH3CHO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[51];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[343] += dqdci; // dwdot[CH2CHO]/d[OH]
  J[344] -= dqdci; // dwdot[CH3CHO]/d[OH]
  // d()/d[CH2CHO]
  dqdci = -k_r * sc[4];
  J[3725] -= dqdci; // dwdot[O]/d[CH2CHO]
  J[3727] += dqdci; // dwdot[OH]/d[CH2CHO]
  J[3774] += dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  J[3775] -= dqdci; // dwdot[CH3CHO]/d[CH2CHO]
  // d()/d[CH3CHO]
  dqdci = +k_f * sc[2];
  J[3798] -= dqdci; // dwdot[O]/d[CH3CHO]
  J[3800] += dqdci; // dwdot[OH]/d[CH3CHO]
  J[3847] += dqdci; // dwdot[CH2CHO]/d[CH3CHO]
  J[3848] -= dqdci; // dwdot[CH3CHO]/d[CH3CHO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5307] += dqdT; // dwdot[CH2CHO]/dT
  J[5308] -= dqdT; // dwdot[CH3CHO]/dT

  // reaction 296: CH3CHO + O => CH3 + CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[52];
  k_f = 2920000 * exp(-(909.815731774933) * invT);
  dlnkfdT = (909.815731774933) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[12] += q; // CH3
  wdot[14] += q; // CO
  wdot[52] -= q; // CH3CHO
  // d()/d[O]
  dqdci = +k_f * sc[52];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[158] += dqdci; // dwdot[CH3]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[198] -= dqdci; // dwdot[CH3CHO]/d[O]
  // d()/d[CH3CHO]
  dqdci = +k_f * sc[2];
  J[3798] -= dqdci; // dwdot[O]/d[CH3CHO]
  J[3800] += dqdci; // dwdot[OH]/d[CH3CHO]
  J[3808] += dqdci; // dwdot[CH3]/d[CH3CHO]
  J[3810] += dqdci; // dwdot[CO]/d[CH3CHO]
  J[3848] -= dqdci; // dwdot[CH3CHO]/d[CH3CHO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5308] -= dqdT; // dwdot[CH3CHO]/dT

  // reaction 297: CH3CHO + O2 => CH3 + CO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[52];
  k_f = 30100000 * exp(-(19700.9324662548) * invT);
  dlnkfdT = (19700.9324662548) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[12] += q; // CH3
  wdot[14] += q; // CO
  wdot[52] -= q; // CH3CHO
  // d()/d[O2]
  dqdci = +k_f * sc[52];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  J[231] += dqdci; // dwdot[CH3]/d[O2]
  J[233] += dqdci; // dwdot[CO]/d[O2]
  J[271] -= dqdci; // dwdot[CH3CHO]/d[O2]
  // d()/d[CH3CHO]
  dqdci = +k_f * sc[3];
  J[3799] -= dqdci; // dwdot[O2]/d[CH3CHO]
  J[3802] += dqdci; // dwdot[HO2]/d[CH3CHO]
  J[3808] += dqdci; // dwdot[CH3]/d[CH3CHO]
  J[3810] += dqdci; // dwdot[CO]/d[CH3CHO]
  J[3848] -= dqdci; // dwdot[CH3CHO]/d[CH3CHO]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5308] -= dqdT; // dwdot[CH3CHO]/dT

  // reaction 298: CH3CHO + H <=> CH2CHO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[52];
  k_f = 2050 * exp(1.16 * logT - (1210.23608126035) * invT);
  dlnkfdT = 1.16 * invT + (1210.23608126035) * invT2;
  // reverse
  phi_r = sc[0] * sc[51];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[51] + g_RT[52]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[52]) + (h_RT[0] + h_RT[51]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[51] += q; // CH2CHO
  wdot[52] -= q; // CH3CHO
  // d()/d[H2]
  dqdci = -k_r * sc[51];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[51] += dqdci; // dwdot[CH2CHO]/d[H2]
  J[52] -= dqdci; // dwdot[CH3CHO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[52];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[124] += dqdci; // dwdot[CH2CHO]/d[H]
  J[125] -= dqdci; // dwdot[CH3CHO]/d[H]
  // d()/d[CH2CHO]
  dqdci = -k_r * sc[0];
  J[3723] += dqdci; // dwdot[H2]/d[CH2CHO]
  J[3724] -= dqdci; // dwdot[H]/d[CH2CHO]
  J[3774] += dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  J[3775] -= dqdci; // dwdot[CH3CHO]/d[CH2CHO]
  // d()/d[CH3CHO]
  dqdci = +k_f * sc[1];
  J[3796] += dqdci; // dwdot[H2]/d[CH3CHO]
  J[3797] -= dqdci; // dwdot[H]/d[CH3CHO]
  J[3847] += dqdci; // dwdot[CH2CHO]/d[CH3CHO]
  J[3848] -= dqdci; // dwdot[CH3CHO]/d[CH3CHO]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5307] += dqdT; // dwdot[CH2CHO]/dT
  J[5308] -= dqdT; // dwdot[CH3CHO]/dT

  // reaction 299: CH3CHO + H => CH3 + CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[52];
  k_f = 2050 * exp(1.16 * logT - (1210.23608126035) * invT);
  dlnkfdT = 1.16 * invT + (1210.23608126035) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[12] += q; // CH3
  wdot[14] += q; // CO
  wdot[52] -= q; // CH3CHO
  // d()/d[H]
  dqdci = +k_f * sc[52];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[85] += dqdci;  // dwdot[CH3]/d[H]
  J[87] += dqdci;  // dwdot[CO]/d[H]
  J[125] -= dqdci; // dwdot[CH3CHO]/d[H]
  // d()/d[CH3CHO]
  dqdci = +k_f * sc[1];
  J[3796] += dqdci; // dwdot[H2]/d[CH3CHO]
  J[3797] -= dqdci; // dwdot[H]/d[CH3CHO]
  J[3808] += dqdci; // dwdot[CH3]/d[CH3CHO]
  J[3810] += dqdci; // dwdot[CO]/d[CH3CHO]
  J[3848] -= dqdci; // dwdot[CH3CHO]/d[CH3CHO]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5308] -= dqdT; // dwdot[CH3CHO]/dT

  // reaction 300: CH3CHO + OH => CH3 + CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[52];
  k_f = 23430 * exp(0.73 * logT - (-560.080149040653) * invT);
  dlnkfdT = 0.73 * invT + (-560.080149040653) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[12] += q; // CH3
  wdot[14] += q; // CO
  wdot[52] -= q; // CH3CHO
  // d()/d[OH]
  dqdci = +k_f * sc[52];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[304] += dqdci; // dwdot[CH3]/d[OH]
  J[306] += dqdci; // dwdot[CO]/d[OH]
  J[344] -= dqdci; // dwdot[CH3CHO]/d[OH]
  // d()/d[CH3CHO]
  dqdci = +k_f * sc[4];
  J[3800] -= dqdci; // dwdot[OH]/d[CH3CHO]
  J[3801] += dqdci; // dwdot[H2O]/d[CH3CHO]
  J[3808] += dqdci; // dwdot[CH3]/d[CH3CHO]
  J[3810] += dqdci; // dwdot[CO]/d[CH3CHO]
  J[3848] -= dqdci; // dwdot[CH3CHO]/d[CH3CHO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5308] -= dqdT; // dwdot[CH3CHO]/dT

  // reaction 301: CH3CHO + HO2 => CH3 + CO + H2O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[52];
  k_f = 3010000 * exp(-(5999.85230638967) * invT);
  dlnkfdT = (5999.85230638967) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[12] += q; // CH3
  wdot[14] += q; // CO
  wdot[52] -= q; // CH3CHO
  // d()/d[HO2]
  dqdci = +k_f * sc[52];
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[445] += dqdci; // dwdot[H2O2]/d[HO2]
  J[450] += dqdci; // dwdot[CH3]/d[HO2]
  J[452] += dqdci; // dwdot[CO]/d[HO2]
  J[490] -= dqdci; // dwdot[CH3CHO]/d[HO2]
  // d()/d[CH3CHO]
  dqdci = +k_f * sc[6];
  J[3802] -= dqdci; // dwdot[HO2]/d[CH3CHO]
  J[3803] += dqdci; // dwdot[H2O2]/d[CH3CHO]
  J[3808] += dqdci; // dwdot[CH3]/d[CH3CHO]
  J[3810] += dqdci; // dwdot[CO]/d[CH3CHO]
  J[3848] -= dqdci; // dwdot[CH3CHO]/d[CH3CHO]
  // d()/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5263] += dqdT; // dwdot[H2O2]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5308] -= dqdT; // dwdot[CH3CHO]/dT

  // reaction 304: CH2CHO + O => CH2 + CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[51];
  k_f = 150000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[10] += q; // CH2
  wdot[15] += q; // CO2
  wdot[51] -= q; // CH2CHO
  // d()/d[O]
  dqdci = +k_f * sc[51];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[156] += dqdci; // dwdot[CH2]/d[O]
  J[161] += dqdci; // dwdot[CO2]/d[O]
  J[197] -= dqdci; // dwdot[CH2CHO]/d[O]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[2];
  J[3724] += dqdci; // dwdot[H]/d[CH2CHO]
  J[3725] -= dqdci; // dwdot[O]/d[CH2CHO]
  J[3733] += dqdci; // dwdot[CH2]/d[CH2CHO]
  J[3738] += dqdci; // dwdot[CO2]/d[CH2CHO]
  J[3774] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5307] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 305: CH2CHO + O2 => CH2O + CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[51];
  k_f = 18100;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // OH
  wdot[14] += q; // CO
  wdot[17] += q; // CH2O
  wdot[51] -= q; // CH2CHO
  // d()/d[O2]
  dqdci = +k_f * sc[51];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[223] += dqdci; // dwdot[OH]/d[O2]
  J[233] += dqdci; // dwdot[CO]/d[O2]
  J[236] += dqdci; // dwdot[CH2O]/d[O2]
  J[270] -= dqdci; // dwdot[CH2CHO]/d[O2]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[3];
  J[3726] -= dqdci; // dwdot[O2]/d[CH2CHO]
  J[3727] += dqdci; // dwdot[OH]/d[CH2CHO]
  J[3737] += dqdci; // dwdot[CO]/d[CH2CHO]
  J[3740] += dqdci; // dwdot[CH2O]/d[CH2CHO]
  J[3774] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5307] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 306: CH2CHO + O2 => 2 HCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[51];
  k_f = 23500;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[3] -= q;      // O2
  wdot[4] += q;      // OH
  wdot[16] += 2 * q; // HCO
  wdot[51] -= q;     // CH2CHO
  // d()/d[O2]
  dqdci = +k_f * sc[51];
  J[222] -= dqdci;     // dwdot[O2]/d[O2]
  J[223] += dqdci;     // dwdot[OH]/d[O2]
  J[235] += 2 * dqdci; // dwdot[HCO]/d[O2]
  J[270] -= dqdci;     // dwdot[CH2CHO]/d[O2]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[3];
  J[3726] -= dqdci;     // dwdot[O2]/d[CH2CHO]
  J[3727] += dqdci;     // dwdot[OH]/d[CH2CHO]
  J[3739] += 2 * dqdci; // dwdot[HCO]/d[CH2CHO]
  J[3774] -= dqdci;     // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[5259] -= dqdT;     // dwdot[O2]/dT
  J[5260] += dqdT;     // dwdot[OH]/dT
  J[5272] += 2 * dqdT; // dwdot[HCO]/dT
  J[5307] -= dqdT;     // dwdot[CH2CHO]/dT

  // reaction 307: CH2CHO + H <=> CH3 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[51];
  k_f = 22000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[12] * sc[16];
  Kc = exp(g_RT[1] - g_RT[12] - g_RT[16] + g_RT[51]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[51]) + (h_RT[12] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[12] += q; // CH3
  wdot[16] += q; // HCO
  wdot[51] -= q; // CH2CHO
  // d()/d[H]
  dqdci = +k_f * sc[51];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[85] += dqdci;  // dwdot[CH3]/d[H]
  J[89] += dqdci;  // dwdot[HCO]/d[H]
  J[124] -= dqdci; // dwdot[CH2CHO]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[16];
  J[877] -= dqdci; // dwdot[H]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[892] += dqdci; // dwdot[HCO]/d[CH3]
  J[927] -= dqdci; // dwdot[CH2CHO]/d[CH3]
  // d()/d[HCO]
  dqdci = -k_r * sc[12];
  J[1169] -= dqdci; // dwdot[H]/d[HCO]
  J[1180] += dqdci; // dwdot[CH3]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1219] -= dqdci; // dwdot[CH2CHO]/d[HCO]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[1];
  J[3724] -= dqdci; // dwdot[H]/d[CH2CHO]
  J[3735] += dqdci; // dwdot[CH3]/d[CH2CHO]
  J[3739] += dqdci; // dwdot[HCO]/d[CH2CHO]
  J[3774] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5307] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 308: CH2CHO + H <=> CH2CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[51];
  k_f = 11000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[28];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[28] + g_RT[51]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[51]) + (h_RT[0] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[28] += q; // CH2CO
  wdot[51] -= q; // CH2CHO
  // d()/d[H2]
  dqdci = -k_r * sc[28];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[28] += dqdci; // dwdot[CH2CO]/d[H2]
  J[51] -= dqdci; // dwdot[CH2CHO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[51];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[101] += dqdci; // dwdot[CH2CO]/d[H]
  J[124] -= dqdci; // dwdot[CH2CHO]/d[H]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[0];
  J[2044] += dqdci; // dwdot[H2]/d[CH2CO]
  J[2045] -= dqdci; // dwdot[H]/d[CH2CO]
  J[2072] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[2095] -= dqdci; // dwdot[CH2CHO]/d[CH2CO]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[1];
  J[3723] += dqdci; // dwdot[H2]/d[CH2CHO]
  J[3724] -= dqdci; // dwdot[H]/d[CH2CHO]
  J[3751] += dqdci; // dwdot[CH2CO]/d[CH2CHO]
  J[3774] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5284] += dqdT; // dwdot[CH2CO]/dT
  J[5307] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 309: CH2CHO + OH <=> CH2CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[51];
  k_f = 12000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[28];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[28] + g_RT[51]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[51]) + (h_RT[5] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[28] += q; // CH2CO
  wdot[51] -= q; // CH2CHO
  // d()/d[OH]
  dqdci = +k_f * sc[51];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[320] += dqdci; // dwdot[CH2CO]/d[OH]
  J[343] -= dqdci; // dwdot[CH2CHO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[28];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[393] += dqdci; // dwdot[CH2CO]/d[H2O]
  J[416] -= dqdci; // dwdot[CH2CHO]/d[H2O]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[5];
  J[2048] -= dqdci; // dwdot[OH]/d[CH2CO]
  J[2049] += dqdci; // dwdot[H2O]/d[CH2CO]
  J[2072] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[2095] -= dqdci; // dwdot[CH2CHO]/d[CH2CO]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[4];
  J[3727] -= dqdci; // dwdot[OH]/d[CH2CHO]
  J[3728] += dqdci; // dwdot[H2O]/d[CH2CHO]
  J[3751] += dqdci; // dwdot[CH2CO]/d[CH2CHO]
  J[3774] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5284] += dqdT; // dwdot[CH2CO]/dT
  J[5307] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 310: CH2CHO + OH <=> CH2OH + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[51];
  k_f = 30100000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[16] * sc[18];
  Kc = exp(g_RT[4] - g_RT[16] - g_RT[18] + g_RT[51]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[51]) + (h_RT[16] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[16] += q; // HCO
  wdot[18] += q; // CH2OH
  wdot[51] -= q; // CH2CHO
  // d()/d[OH]
  dqdci = +k_f * sc[51];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[308] += dqdci; // dwdot[HCO]/d[OH]
  J[310] += dqdci; // dwdot[CH2OH]/d[OH]
  J[343] -= dqdci; // dwdot[CH2CHO]/d[OH]
  // d()/d[HCO]
  dqdci = -k_r * sc[18];
  J[1172] -= dqdci; // dwdot[OH]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1186] += dqdci; // dwdot[CH2OH]/d[HCO]
  J[1219] -= dqdci; // dwdot[CH2CHO]/d[HCO]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[16];
  J[1318] -= dqdci; // dwdot[OH]/d[CH2OH]
  J[1330] += dqdci; // dwdot[HCO]/d[CH2OH]
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1365] -= dqdci; // dwdot[CH2CHO]/d[CH2OH]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[4];
  J[3727] -= dqdci; // dwdot[OH]/d[CH2CHO]
  J[3739] += dqdci; // dwdot[HCO]/d[CH2CHO]
  J[3741] += dqdci; // dwdot[CH2OH]/d[CH2CHO]
  J[3774] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5307] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 312: C3H8 + O <=> C3H7 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[50];
  k_f = 0.193 * exp(2.68 * logT - (1869.95313013034) * invT);
  dlnkfdT = 2.68 * invT + (1869.95313013034) * invT2;
  // reverse
  phi_r = sc[4] * sc[49];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[49] + g_RT[50]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[50]) + (h_RT[4] + h_RT[49]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[49] += q; // C3H7
  wdot[50] -= q; // C3H8
  // d()/d[O]
  dqdci = +k_f * sc[50];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[195] += dqdci; // dwdot[C3H7]/d[O]
  J[196] -= dqdci; // dwdot[C3H8]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[49];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[341] += dqdci; // dwdot[C3H7]/d[OH]
  J[342] -= dqdci; // dwdot[C3H8]/d[OH]
  // d()/d[C3H7]
  dqdci = -k_r * sc[4];
  J[3579] -= dqdci; // dwdot[O]/d[C3H7]
  J[3581] += dqdci; // dwdot[OH]/d[C3H7]
  J[3626] += dqdci; // dwdot[C3H7]/d[C3H7]
  J[3627] -= dqdci; // dwdot[C3H8]/d[C3H7]
  // d()/d[C3H8]
  dqdci = +k_f * sc[2];
  J[3652] -= dqdci; // dwdot[O]/d[C3H8]
  J[3654] += dqdci; // dwdot[OH]/d[C3H8]
  J[3699] += dqdci; // dwdot[C3H7]/d[C3H8]
  J[3700] -= dqdci; // dwdot[C3H8]/d[C3H8]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5305] += dqdT; // dwdot[C3H7]/dT
  J[5306] -= dqdT; // dwdot[C3H8]/dT

  // reaction 313: C3H8 + H <=> C3H7 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[50];
  k_f = 1.32 * exp(2.54 * logT - (3399.73179417669) * invT);
  dlnkfdT = 2.54 * invT + (3399.73179417669) * invT2;
  // reverse
  phi_r = sc[0] * sc[49];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[49] + g_RT[50]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[50]) + (h_RT[0] + h_RT[49]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[49] += q; // C3H7
  wdot[50] -= q; // C3H8
  // d()/d[H2]
  dqdci = -k_r * sc[49];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[49] += dqdci; // dwdot[C3H7]/d[H2]
  J[50] -= dqdci; // dwdot[C3H8]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[50];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[122] += dqdci; // dwdot[C3H7]/d[H]
  J[123] -= dqdci; // dwdot[C3H8]/d[H]
  // d()/d[C3H7]
  dqdci = -k_r * sc[0];
  J[3577] += dqdci; // dwdot[H2]/d[C3H7]
  J[3578] -= dqdci; // dwdot[H]/d[C3H7]
  J[3626] += dqdci; // dwdot[C3H7]/d[C3H7]
  J[3627] -= dqdci; // dwdot[C3H8]/d[C3H7]
  // d()/d[C3H8]
  dqdci = +k_f * sc[1];
  J[3650] += dqdci; // dwdot[H2]/d[C3H8]
  J[3651] -= dqdci; // dwdot[H]/d[C3H8]
  J[3699] += dqdci; // dwdot[C3H7]/d[C3H8]
  J[3700] -= dqdci; // dwdot[C3H8]/d[C3H8]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5305] += dqdT; // dwdot[C3H7]/dT
  J[5306] -= dqdT; // dwdot[C3H8]/dT

  // reaction 314: C3H8 + OH <=> C3H7 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[50];
  k_f = 31.6 * exp(1.8 * logT - (470.004365861608) * invT);
  dlnkfdT = 1.8 * invT + (470.004365861608) * invT2;
  // reverse
  phi_r = sc[5] * sc[49];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[49] + g_RT[50]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[50]) + (h_RT[5] + h_RT[49]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[49] += q; // C3H7
  wdot[50] -= q; // C3H8
  // d()/d[OH]
  dqdci = +k_f * sc[50];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[341] += dqdci; // dwdot[C3H7]/d[OH]
  J[342] -= dqdci; // dwdot[C3H8]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[49];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[414] += dqdci; // dwdot[C3H7]/d[H2O]
  J[415] -= dqdci; // dwdot[C3H8]/d[H2O]
  // d()/d[C3H7]
  dqdci = -k_r * sc[5];
  J[3581] -= dqdci; // dwdot[OH]/d[C3H7]
  J[3582] += dqdci; // dwdot[H2O]/d[C3H7]
  J[3626] += dqdci; // dwdot[C3H7]/d[C3H7]
  J[3627] -= dqdci; // dwdot[C3H8]/d[C3H7]
  // d()/d[C3H8]
  dqdci = +k_f * sc[4];
  J[3654] -= dqdci; // dwdot[OH]/d[C3H8]
  J[3655] += dqdci; // dwdot[H2O]/d[C3H8]
  J[3699] += dqdci; // dwdot[C3H7]/d[C3H8]
  J[3700] -= dqdci; // dwdot[C3H8]/d[C3H8]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5305] += dqdT; // dwdot[C3H7]/dT
  J[5306] -= dqdT; // dwdot[C3H8]/dT

  // reaction 315: C3H7 + H2O2 <=> C3H8 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[49];
  k_f = 0.000378 * exp(2.72 * logT - (754.82499870708) * invT);
  dlnkfdT = 2.72 * invT + (754.82499870708) * invT2;
  // reverse
  phi_r = sc[6] * sc[50];
  Kc = exp(-g_RT[6] + g_RT[7] + g_RT[49] - g_RT[50]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[49]) + (h_RT[6] + h_RT[50]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[49] -= q; // C3H7
  wdot[50] += q; // C3H8
  // d()/d[HO2]
  dqdci = -k_r * sc[50];
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[487] -= dqdci; // dwdot[C3H7]/d[HO2]
  J[488] += dqdci; // dwdot[C3H8]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[49];
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[560] -= dqdci; // dwdot[C3H7]/d[H2O2]
  J[561] += dqdci; // dwdot[C3H8]/d[H2O2]
  // d()/d[C3H7]
  dqdci = +k_f * sc[7];
  J[3583] += dqdci; // dwdot[HO2]/d[C3H7]
  J[3584] -= dqdci; // dwdot[H2O2]/d[C3H7]
  J[3626] -= dqdci; // dwdot[C3H7]/d[C3H7]
  J[3627] += dqdci; // dwdot[C3H8]/d[C3H7]
  // d()/d[C3H8]
  dqdci = -k_r * sc[6];
  J[3656] += dqdci; // dwdot[HO2]/d[C3H8]
  J[3657] -= dqdci; // dwdot[H2O2]/d[C3H8]
  J[3699] -= dqdci; // dwdot[C3H7]/d[C3H8]
  J[3700] += dqdci; // dwdot[C3H8]/d[C3H8]
  // d()/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT
  J[5305] -= dqdT; // dwdot[C3H7]/dT
  J[5306] += dqdT; // dwdot[C3H8]/dT

  // reaction 316: C3H8 + CH3 <=> C3H7 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[50];
  k_f = 9.03e-07 * exp(3.65 * logT - (3600.01202716696) * invT);
  dlnkfdT = 3.65 * invT + (3600.01202716696) * invT2;
  // reverse
  phi_r = sc[13] * sc[49];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[49] + g_RT[50]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[50]) + (h_RT[13] + h_RT[49]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[49] += q; // C3H7
  wdot[50] -= q; // C3H8
  // d()/d[CH3]
  dqdci = +k_f * sc[50];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[925] += dqdci; // dwdot[C3H7]/d[CH3]
  J[926] -= dqdci; // dwdot[C3H8]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[49];
  J[961] -= dqdci; // dwdot[CH3]/d[CH4]
  J[962] += dqdci; // dwdot[CH4]/d[CH4]
  J[998] += dqdci; // dwdot[C3H7]/d[CH4]
  J[999] -= dqdci; // dwdot[C3H8]/d[CH4]
  // d()/d[C3H7]
  dqdci = -k_r * sc[13];
  J[3589] -= dqdci; // dwdot[CH3]/d[C3H7]
  J[3590] += dqdci; // dwdot[CH4]/d[C3H7]
  J[3626] += dqdci; // dwdot[C3H7]/d[C3H7]
  J[3627] -= dqdci; // dwdot[C3H8]/d[C3H7]
  // d()/d[C3H8]
  dqdci = +k_f * sc[12];
  J[3662] -= dqdci; // dwdot[CH3]/d[C3H8]
  J[3663] += dqdci; // dwdot[CH4]/d[C3H8]
  J[3699] += dqdci; // dwdot[C3H7]/d[C3H8]
  J[3700] -= dqdci; // dwdot[C3H8]/d[C3H8]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5305] += dqdT; // dwdot[C3H7]/dT
  J[5306] -= dqdT; // dwdot[C3H8]/dT

  // reaction 318: C3H7 + O <=> C2H5 + CH2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[49];
  k_f = 96400000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[17] * sc[25];
  Kc = exp(g_RT[2] - g_RT[17] - g_RT[25] + g_RT[49]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[49]) + (h_RT[17] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[17] += q; // CH2O
  wdot[25] += q; // C2H5
  wdot[49] -= q; // C3H7
  // d()/d[O]
  dqdci = +k_f * sc[49];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[163] += dqdci; // dwdot[CH2O]/d[O]
  J[171] += dqdci; // dwdot[C2H5]/d[O]
  J[195] -= dqdci; // dwdot[C3H7]/d[O]
  // d()/d[CH2O]
  dqdci = -k_r * sc[25];
  J[1243] -= dqdci; // dwdot[O]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1266] += dqdci; // dwdot[C2H5]/d[CH2O]
  J[1290] -= dqdci; // dwdot[C3H7]/d[CH2O]
  // d()/d[C2H5]
  dqdci = -k_r * sc[17];
  J[1827] -= dqdci; // dwdot[O]/d[C2H5]
  J[1842] += dqdci; // dwdot[CH2O]/d[C2H5]
  J[1850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1874] -= dqdci; // dwdot[C3H7]/d[C2H5]
  // d()/d[C3H7]
  dqdci = +k_f * sc[2];
  J[3579] -= dqdci; // dwdot[O]/d[C3H7]
  J[3594] += dqdci; // dwdot[CH2O]/d[C3H7]
  J[3602] += dqdci; // dwdot[C2H5]/d[C3H7]
  J[3626] -= dqdci; // dwdot[C3H7]/d[C3H7]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5305] -= dqdT; // dwdot[C3H7]/dT

  // reaction 320: C3H7 + H <=> C2H5 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[49];
  k_f = 4.06 * exp(2.19 * logT - (447.8628325662) * invT);
  dlnkfdT = 2.19 * invT + (447.8628325662) * invT2;
  // reverse
  phi_r = sc[12] * sc[25];
  Kc = exp(g_RT[1] - g_RT[12] - g_RT[25] + g_RT[49]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[49]) + (h_RT[12] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[12] += q; // CH3
  wdot[25] += q; // C2H5
  wdot[49] -= q; // C3H7
  // d()/d[H]
  dqdci = +k_f * sc[49];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[85] += dqdci;  // dwdot[CH3]/d[H]
  J[98] += dqdci;  // dwdot[C2H5]/d[H]
  J[122] -= dqdci; // dwdot[C3H7]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[25];
  J[877] -= dqdci; // dwdot[H]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[901] += dqdci; // dwdot[C2H5]/d[CH3]
  J[925] -= dqdci; // dwdot[C3H7]/d[CH3]
  // d()/d[C2H5]
  dqdci = -k_r * sc[12];
  J[1826] -= dqdci; // dwdot[H]/d[C2H5]
  J[1837] += dqdci; // dwdot[CH3]/d[C2H5]
  J[1850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1874] -= dqdci; // dwdot[C3H7]/d[C2H5]
  // d()/d[C3H7]
  dqdci = +k_f * sc[1];
  J[3578] -= dqdci; // dwdot[H]/d[C3H7]
  J[3589] += dqdci; // dwdot[CH3]/d[C3H7]
  J[3602] += dqdci; // dwdot[C2H5]/d[C3H7]
  J[3626] -= dqdci; // dwdot[C3H7]/d[C3H7]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5305] -= dqdT; // dwdot[C3H7]/dT

  // reaction 321: C3H7 + OH <=> C2H5 + CH2OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[49];
  k_f = 24100000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[18] * sc[25];
  Kc = exp(g_RT[4] - g_RT[18] - g_RT[25] + g_RT[49]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[49]) + (h_RT[18] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[18] += q; // CH2OH
  wdot[25] += q; // C2H5
  wdot[49] -= q; // C3H7
  // d()/d[OH]
  dqdci = +k_f * sc[49];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[310] += dqdci; // dwdot[CH2OH]/d[OH]
  J[317] += dqdci; // dwdot[C2H5]/d[OH]
  J[341] -= dqdci; // dwdot[C3H7]/d[OH]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[25];
  J[1318] -= dqdci; // dwdot[OH]/d[CH2OH]
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1339] += dqdci; // dwdot[C2H5]/d[CH2OH]
  J[1363] -= dqdci; // dwdot[C3H7]/d[CH2OH]
  // d()/d[C2H5]
  dqdci = -k_r * sc[18];
  J[1829] -= dqdci; // dwdot[OH]/d[C2H5]
  J[1843] += dqdci; // dwdot[CH2OH]/d[C2H5]
  J[1850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1874] -= dqdci; // dwdot[C3H7]/d[C2H5]
  // d()/d[C3H7]
  dqdci = +k_f * sc[4];
  J[3581] -= dqdci; // dwdot[OH]/d[C3H7]
  J[3595] += dqdci; // dwdot[CH2OH]/d[C3H7]
  J[3602] += dqdci; // dwdot[C2H5]/d[C3H7]
  J[3626] -= dqdci; // dwdot[C3H7]/d[C3H7]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5305] -= dqdT; // dwdot[C3H7]/dT

  // reaction 322: C3H7 + HO2 <=> C3H8 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[49];
  k_f = 25500 * exp(0.255 * logT - (-474.533315853851) * invT);
  dlnkfdT = 0.255 * invT + (-474.533315853851) * invT2;
  // reverse
  phi_r = sc[3] * sc[50];
  Kc = exp(-g_RT[3] + g_RT[6] + g_RT[49] - g_RT[50]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[49]) + (h_RT[3] + h_RT[50]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[6] -= q;  // HO2
  wdot[49] -= q; // C3H7
  wdot[50] += q; // C3H8
  // d()/d[O2]
  dqdci = -k_r * sc[50];
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  J[268] -= dqdci; // dwdot[C3H7]/d[O2]
  J[269] += dqdci; // dwdot[C3H8]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[49];
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[487] -= dqdci; // dwdot[C3H7]/d[HO2]
  J[488] += dqdci; // dwdot[C3H8]/d[HO2]
  // d()/d[C3H7]
  dqdci = +k_f * sc[6];
  J[3580] += dqdci; // dwdot[O2]/d[C3H7]
  J[3583] -= dqdci; // dwdot[HO2]/d[C3H7]
  J[3626] -= dqdci; // dwdot[C3H7]/d[C3H7]
  J[3627] += dqdci; // dwdot[C3H8]/d[C3H7]
  // d()/d[C3H8]
  dqdci = -k_r * sc[3];
  J[3653] += dqdci; // dwdot[O2]/d[C3H8]
  J[3656] -= dqdci; // dwdot[HO2]/d[C3H8]
  J[3699] -= dqdci; // dwdot[C3H7]/d[C3H8]
  J[3700] += dqdci; // dwdot[C3H8]/d[C3H8]
  // d()/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5305] -= dqdT; // dwdot[C3H7]/dT
  J[5306] += dqdT; // dwdot[C3H8]/dT

  // reaction 323: C3H7 + HO2 => C2H5 + CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[49];
  k_f = 24100000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[17] += q; // CH2O
  wdot[25] += q; // C2H5
  wdot[49] -= q; // C3H7
  // d()/d[HO2]
  dqdci = +k_f * sc[49];
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[455] += dqdci; // dwdot[CH2O]/d[HO2]
  J[463] += dqdci; // dwdot[C2H5]/d[HO2]
  J[487] -= dqdci; // dwdot[C3H7]/d[HO2]
  // d()/d[C3H7]
  dqdci = +k_f * sc[6];
  J[3581] += dqdci; // dwdot[OH]/d[C3H7]
  J[3583] -= dqdci; // dwdot[HO2]/d[C3H7]
  J[3594] += dqdci; // dwdot[CH2O]/d[C3H7]
  J[3602] += dqdci; // dwdot[C2H5]/d[C3H7]
  J[3626] -= dqdci; // dwdot[C3H7]/d[C3H7]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5305] -= dqdT; // dwdot[C3H7]/dT

  // reaction 324: C3H7 + CH3 <=> 2 C2H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[49];
  k_f = 19270000 * exp(-0.32 * logT);
  dlnkfdT = -0.32 * invT;
  // reverse
  phi_r = (sc[25] * sc[25]);
  Kc = exp(g_RT[12] - 2.000000 * g_RT[25] + g_RT[49]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[49]) + (2.000000 * h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q;     // CH3
  wdot[25] += 2 * q; // C2H5
  wdot[49] -= q;     // C3H7
  // d()/d[CH3]
  dqdci = +k_f * sc[49];
  J[888] -= dqdci;     // dwdot[CH3]/d[CH3]
  J[901] += 2 * dqdci; // dwdot[C2H5]/d[CH3]
  J[925] -= dqdci;     // dwdot[C3H7]/d[CH3]
  // d()/d[C2H5]
  dqdci = -k_r * 2.000000 * sc[25];
  J[1837] -= dqdci;     // dwdot[CH3]/d[C2H5]
  J[1850] += 2 * dqdci; // dwdot[C2H5]/d[C2H5]
  J[1874] -= dqdci;     // dwdot[C3H7]/d[C2H5]
  // d()/d[C3H7]
  dqdci = +k_f * sc[12];
  J[3589] -= dqdci;     // dwdot[CH3]/d[C3H7]
  J[3602] += 2 * dqdci; // dwdot[C2H5]/d[C3H7]
  J[3626] -= dqdci;     // dwdot[C3H7]/d[C3H7]
  // d()/dT
  J[5268] -= dqdT;     // dwdot[CH3]/dT
  J[5281] += 2 * dqdT; // dwdot[C2H5]/dT
  J[5305] -= dqdT;     // dwdot[C3H7]/dT

  // reaction 325: CH2F + H <=> CH2(S) + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[60];
  k_f = 110000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[11] * sc[53];
  Kc = exp(g_RT[1] - g_RT[11] - g_RT[53] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[60]) + (h_RT[11] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[11] += q; // CH2(S)
  wdot[53] += q; // HF
  wdot[60] -= q; // CH2F
  // d()/d[H]
  dqdci = +k_f * sc[60];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[84] += dqdci;  // dwdot[CH2(S)]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[133] -= dqdci; // dwdot[CH2F]/d[H]
  // d()/d[CH2(S)]
  dqdci = -k_r * sc[53];
  J[804] -= dqdci; // dwdot[H]/d[CH2(S)]
  J[814] += dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[856] += dqdci; // dwdot[HF]/d[CH2(S)]
  J[863] -= dqdci; // dwdot[CH2F]/d[CH2(S)]
  // d()/d[HF]
  dqdci = -k_r * sc[11];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3880] += dqdci; // dwdot[CH2(S)]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3929] -= dqdci; // dwdot[CH2F]/d[HF]
  // d()/d[CH2F]
  dqdci = +k_f * sc[1];
  J[4381] -= dqdci; // dwdot[H]/d[CH2F]
  J[4391] += dqdci; // dwdot[CH2(S)]/d[CH2F]
  J[4433] += dqdci; // dwdot[HF]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5267] += dqdT; // dwdot[CH2(S)]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 326: CH2F + H <=> CHF + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[60];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[63];
  Kc = exp(-g_RT[0] + g_RT[1] + g_RT[60] - g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[60]) + (h_RT[0] + h_RT[63]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[60] -= q; // CH2F
  wdot[63] += q; // CHF
  // d()/d[H2]
  dqdci = -k_r * sc[63];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[60] -= dqdci; // dwdot[CH2F]/d[H2]
  J[63] += dqdci; // dwdot[CHF]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[60];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[133] -= dqdci; // dwdot[CH2F]/d[H]
  J[136] += dqdci; // dwdot[CHF]/d[H]
  // d()/d[CH2F]
  dqdci = +k_f * sc[1];
  J[4380] += dqdci; // dwdot[H2]/d[CH2F]
  J[4381] -= dqdci; // dwdot[H]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4443] += dqdci; // dwdot[CHF]/d[CH2F]
  // d()/d[CHF]
  dqdci = -k_r * sc[0];
  J[4599] += dqdci; // dwdot[H2]/d[CHF]
  J[4600] -= dqdci; // dwdot[H]/d[CHF]
  J[4659] -= dqdci; // dwdot[CH2F]/d[CHF]
  J[4662] += dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5319] += dqdT; // dwdot[CHF]/dT

  // reaction 327: CHF3 + H <=> CF3 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[58];
  k_f = 7.83 * exp(2.06 * logT - (6189.56498939805) * invT);
  dlnkfdT = 2.06 * invT + (6189.56498939805) * invT2;
  // reverse
  phi_r = sc[0] * sc[62];
  Kc = exp(-g_RT[0] + g_RT[1] + g_RT[58] - g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[58]) + (h_RT[0] + h_RT[62]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[58] -= q; // CHF3
  wdot[62] += q; // CF3
  // d()/d[H2]
  dqdci = -k_r * sc[62];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[58] -= dqdci; // dwdot[CHF3]/d[H2]
  J[62] += dqdci; // dwdot[CF3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[58];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[131] -= dqdci; // dwdot[CHF3]/d[H]
  J[135] += dqdci; // dwdot[CF3]/d[H]
  // d()/d[CHF3]
  dqdci = +k_f * sc[1];
  J[4234] += dqdci; // dwdot[H2]/d[CHF3]
  J[4235] -= dqdci; // dwdot[H]/d[CHF3]
  J[4292] -= dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] += dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = -k_r * sc[0];
  J[4526] += dqdci; // dwdot[H2]/d[CF3]
  J[4527] -= dqdci; // dwdot[H]/d[CF3]
  J[4584] -= dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] += dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5314] -= dqdT; // dwdot[CHF3]/dT
  J[5318] += dqdT; // dwdot[CF3]/dT

  // reaction 328: CHF3 + H <=> CH2F2 + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[58];
  k_f = 432 * exp(1.6 * logT - (31697.6177790393) * invT);
  dlnkfdT = 1.6 * invT + (31697.6177790393) * invT2;
  // reverse
  phi_r = sc[54] * sc[57];
  Kc = exp(g_RT[1] - g_RT[54] - g_RT[57] + g_RT[58]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[58]) + (h_RT[54] + h_RT[57]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[54] += q; // F
  wdot[57] += q; // CH2F2
  wdot[58] -= q; // CHF3
  // d()/d[H]
  dqdci = +k_f * sc[58];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[127] += dqdci; // dwdot[F]/d[H]
  J[130] += dqdci; // dwdot[CH2F2]/d[H]
  J[131] -= dqdci; // dwdot[CHF3]/d[H]
  // d()/d[F]
  dqdci = -k_r * sc[57];
  J[3943] -= dqdci; // dwdot[H]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3999] += dqdci; // dwdot[CH2F2]/d[F]
  J[4000] -= dqdci; // dwdot[CHF3]/d[F]
  // d()/d[CH2F2]
  dqdci = -k_r * sc[54];
  J[4162] -= dqdci; // dwdot[H]/d[CH2F2]
  J[4215] += dqdci; // dwdot[F]/d[CH2F2]
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4219] -= dqdci; // dwdot[CHF3]/d[CH2F2]
  // d()/d[CHF3]
  dqdci = +k_f * sc[1];
  J[4235] -= dqdci; // dwdot[H]/d[CHF3]
  J[4288] += dqdci; // dwdot[F]/d[CHF3]
  J[4291] += dqdci; // dwdot[CH2F2]/d[CHF3]
  J[4292] -= dqdci; // dwdot[CHF3]/d[CHF3]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5314] -= dqdT; // dwdot[CHF3]/dT

  // reaction 329: CHF + H <=> CH + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[63];
  k_f = 65000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[9] * sc[53];
  Kc = exp(g_RT[1] - g_RT[9] - g_RT[53] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[63]) + (h_RT[9] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[9] += q;  // CH
  wdot[53] += q; // HF
  wdot[63] -= q; // CHF
  // d()/d[H]
  dqdci = +k_f * sc[63];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[82] += dqdci;  // dwdot[CH]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[136] -= dqdci; // dwdot[CHF]/d[H]
  // d()/d[CH]
  dqdci = -k_r * sc[53];
  J[658] -= dqdci; // dwdot[H]/d[CH]
  J[666] += dqdci; // dwdot[CH]/d[CH]
  J[710] += dqdci; // dwdot[HF]/d[CH]
  J[720] -= dqdci; // dwdot[CHF]/d[CH]
  // d()/d[HF]
  dqdci = -k_r * sc[9];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3878] += dqdci; // dwdot[CH]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3932] -= dqdci; // dwdot[CHF]/d[HF]
  // d()/d[CHF]
  dqdci = +k_f * sc[1];
  J[4600] -= dqdci; // dwdot[H]/d[CHF]
  J[4608] += dqdci; // dwdot[CH]/d[CHF]
  J[4652] += dqdci; // dwdot[HF]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5265] += dqdT; // dwdot[CH]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 330: CHF + H <=> CF + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[63];
  k_f = 230000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[65];
  Kc = exp(-g_RT[0] + g_RT[1] + g_RT[63] - g_RT[65]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[63]) + (h_RT[0] + h_RT[65]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[63] -= q; // CHF
  wdot[65] += q; // CF
  // d()/d[H2]
  dqdci = -k_r * sc[65];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[63] -= dqdci; // dwdot[CHF]/d[H2]
  J[65] += dqdci; // dwdot[CF]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[63];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[136] -= dqdci; // dwdot[CHF]/d[H]
  J[138] += dqdci; // dwdot[CF]/d[H]
  // d()/d[CHF]
  dqdci = +k_f * sc[1];
  J[4599] += dqdci; // dwdot[H2]/d[CHF]
  J[4600] -= dqdci; // dwdot[H]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  J[4664] += dqdci; // dwdot[CF]/d[CHF]
  // d()/d[CF]
  dqdci = -k_r * sc[0];
  J[4745] += dqdci; // dwdot[H2]/d[CF]
  J[4746] -= dqdci; // dwdot[H]/d[CF]
  J[4808] -= dqdci; // dwdot[CHF]/d[CF]
  J[4810] += dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT
  J[5321] += dqdT; // dwdot[CF]/dT

  // reaction 331: CH + HF <=> CF + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[53];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[65];
  Kc = exp(-g_RT[0] + g_RT[9] + g_RT[53] - g_RT[65]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[53]) + (h_RT[0] + h_RT[65]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[9] -= q;  // CH
  wdot[53] -= q; // HF
  wdot[65] += q; // CF
  // d()/d[H2]
  dqdci = -k_r * sc[65];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[9] -= dqdci;  // dwdot[CH]/d[H2]
  J[53] -= dqdci; // dwdot[HF]/d[H2]
  J[65] += dqdci; // dwdot[CF]/d[H2]
  // d()/d[CH]
  dqdci = +k_f * sc[53];
  J[657] += dqdci; // dwdot[H2]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[710] -= dqdci; // dwdot[HF]/d[CH]
  J[722] += dqdci; // dwdot[CF]/d[CH]
  // d()/d[HF]
  dqdci = +k_f * sc[9];
  J[3869] += dqdci; // dwdot[H2]/d[HF]
  J[3878] -= dqdci; // dwdot[CH]/d[HF]
  J[3922] -= dqdci; // dwdot[HF]/d[HF]
  J[3934] += dqdci; // dwdot[CF]/d[HF]
  // d()/d[CF]
  dqdci = -k_r * sc[0];
  J[4745] += dqdci; // dwdot[H2]/d[CF]
  J[4754] -= dqdci; // dwdot[CH]/d[CF]
  J[4798] -= dqdci; // dwdot[HF]/d[CF]
  J[4810] += dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5309] -= dqdT; // dwdot[HF]/dT
  J[5321] += dqdT; // dwdot[CF]/dT

  // reaction 333: CFO + H <=> CO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[69];
  k_f = 25000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[53];
  Kc = exp(g_RT[1] - g_RT[14] - g_RT[53] + g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[69]) + (h_RT[14] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[14] += q; // CO
  wdot[53] += q; // HF
  wdot[69] -= q; // CFO
  // d()/d[H]
  dqdci = +k_f * sc[69];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[87] += dqdci;  // dwdot[CO]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[142] -= dqdci; // dwdot[CFO]/d[H]
  // d()/d[CO]
  dqdci = -k_r * sc[53];
  J[1023] -= dqdci; // dwdot[H]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1075] += dqdci; // dwdot[HF]/d[CO]
  J[1091] -= dqdci; // dwdot[CFO]/d[CO]
  // d()/d[HF]
  dqdci = -k_r * sc[14];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3883] += dqdci; // dwdot[CO]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3938] -= dqdci; // dwdot[CFO]/d[HF]
  // d()/d[CFO]
  dqdci = +k_f * sc[1];
  J[5038] -= dqdci; // dwdot[H]/d[CFO]
  J[5051] += dqdci; // dwdot[CO]/d[CFO]
  J[5090] += dqdci; // dwdot[HF]/d[CFO]
  J[5106] -= dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5325] -= dqdT; // dwdot[CFO]/dT

  // reaction 334: CH2F + O <=> CHFO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[60];
  k_f = 57000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[68];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[60] - g_RT[68]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[60]) + (h_RT[1] + h_RT[68]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[60] -= q; // CH2F
  wdot[68] += q; // CHFO
  // d()/d[H]
  dqdci = -k_r * sc[68];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[75] -= dqdci;  // dwdot[O]/d[H]
  J[133] -= dqdci; // dwdot[CH2F]/d[H]
  J[141] += dqdci; // dwdot[CHFO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[60];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[206] -= dqdci; // dwdot[CH2F]/d[O]
  J[214] += dqdci; // dwdot[CHFO]/d[O]
  // d()/d[CH2F]
  dqdci = +k_f * sc[2];
  J[4381] += dqdci; // dwdot[H]/d[CH2F]
  J[4382] -= dqdci; // dwdot[O]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4448] += dqdci; // dwdot[CHFO]/d[CH2F]
  // d()/d[CHFO]
  dqdci = -k_r * sc[1];
  J[4965] += dqdci; // dwdot[H]/d[CHFO]
  J[4966] -= dqdci; // dwdot[O]/d[CHFO]
  J[5024] -= dqdci; // dwdot[CH2F]/d[CHFO]
  J[5032] += dqdci; // dwdot[CHFO]/d[CHFO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5324] += dqdT; // dwdot[CHFO]/dT

  // reaction 335: CHF2 + O <=> CF2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[61];
  k_f = 37000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[67];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[61] - g_RT[67]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[61]) + (h_RT[1] + h_RT[67]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[61] -= q; // CHF2
  wdot[67] += q; // CF2O
  // d()/d[H]
  dqdci = -k_r * sc[67];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[75] -= dqdci;  // dwdot[O]/d[H]
  J[134] -= dqdci; // dwdot[CHF2]/d[H]
  J[140] += dqdci; // dwdot[CF2O]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[61];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[207] -= dqdci; // dwdot[CHF2]/d[O]
  J[213] += dqdci; // dwdot[CF2O]/d[O]
  // d()/d[CHF2]
  dqdci = +k_f * sc[2];
  J[4454] += dqdci; // dwdot[H]/d[CHF2]
  J[4455] -= dqdci; // dwdot[O]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4520] += dqdci; // dwdot[CF2O]/d[CHF2]
  // d()/d[CF2O]
  dqdci = -k_r * sc[1];
  J[4892] += dqdci; // dwdot[H]/d[CF2O]
  J[4893] -= dqdci; // dwdot[O]/d[CF2O]
  J[4952] -= dqdci; // dwdot[CHF2]/d[CF2O]
  J[4958] += dqdci; // dwdot[CF2O]/d[CF2O]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 336: CF3 + O <=> CF2O + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[62];
  k_f = 15400000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[54] * sc[67];
  Kc = exp(g_RT[2] - g_RT[54] + g_RT[62] - g_RT[67]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[62]) + (h_RT[54] + h_RT[67]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[54] += q; // F
  wdot[62] -= q; // CF3
  wdot[67] += q; // CF2O
  // d()/d[O]
  dqdci = +k_f * sc[62];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[200] += dqdci; // dwdot[F]/d[O]
  J[208] -= dqdci; // dwdot[CF3]/d[O]
  J[213] += dqdci; // dwdot[CF2O]/d[O]
  // d()/d[F]
  dqdci = -k_r * sc[67];
  J[3944] -= dqdci; // dwdot[O]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[4004] -= dqdci; // dwdot[CF3]/d[F]
  J[4009] += dqdci; // dwdot[CF2O]/d[F]
  // d()/d[CF3]
  dqdci = +k_f * sc[2];
  J[4528] -= dqdci; // dwdot[O]/d[CF3]
  J[4580] += dqdci; // dwdot[F]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  J[4593] += dqdci; // dwdot[CF2O]/d[CF3]
  // d()/d[CF2O]
  dqdci = -k_r * sc[54];
  J[4893] -= dqdci; // dwdot[O]/d[CF2O]
  J[4945] += dqdci; // dwdot[F]/d[CF2O]
  J[4953] -= dqdci; // dwdot[CF3]/d[CF2O]
  J[4958] += dqdci; // dwdot[CF2O]/d[CF2O]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 337: CH2F + OH <=> CH2O + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[60];
  k_f = 25000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[17] * sc[53];
  Kc = exp(g_RT[4] - g_RT[17] - g_RT[53] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[60]) + (h_RT[17] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[17] += q; // CH2O
  wdot[53] += q; // HF
  wdot[60] -= q; // CH2F
  // d()/d[OH]
  dqdci = +k_f * sc[60];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[309] += dqdci; // dwdot[CH2O]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[352] -= dqdci; // dwdot[CH2F]/d[OH]
  // d()/d[CH2O]
  dqdci = -k_r * sc[53];
  J[1245] -= dqdci; // dwdot[OH]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1294] += dqdci; // dwdot[HF]/d[CH2O]
  J[1301] -= dqdci; // dwdot[CH2F]/d[CH2O]
  // d()/d[HF]
  dqdci = -k_r * sc[17];
  J[3873] -= dqdci; // dwdot[OH]/d[HF]
  J[3886] += dqdci; // dwdot[CH2O]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3929] -= dqdci; // dwdot[CH2F]/d[HF]
  // d()/d[CH2F]
  dqdci = +k_f * sc[4];
  J[4384] -= dqdci; // dwdot[OH]/d[CH2F]
  J[4397] += dqdci; // dwdot[CH2O]/d[CH2F]
  J[4433] += dqdci; // dwdot[HF]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 338: CHF2 + OH <=> CHFO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[61];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[53] * sc[68];
  Kc = exp(g_RT[4] - g_RT[53] + g_RT[61] - g_RT[68]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[61]) + (h_RT[53] + h_RT[68]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[53] += q; // HF
  wdot[61] -= q; // CHF2
  wdot[68] += q; // CHFO
  // d()/d[OH]
  dqdci = +k_f * sc[61];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[353] -= dqdci; // dwdot[CHF2]/d[OH]
  J[360] += dqdci; // dwdot[CHFO]/d[OH]
  // d()/d[HF]
  dqdci = -k_r * sc[68];
  J[3873] -= dqdci; // dwdot[OH]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3930] -= dqdci; // dwdot[CHF2]/d[HF]
  J[3937] += dqdci; // dwdot[CHFO]/d[HF]
  // d()/d[CHF2]
  dqdci = +k_f * sc[4];
  J[4457] -= dqdci; // dwdot[OH]/d[CHF2]
  J[4506] += dqdci; // dwdot[HF]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4521] += dqdci; // dwdot[CHFO]/d[CHF2]
  // d()/d[CHFO]
  dqdci = -k_r * sc[53];
  J[4968] -= dqdci; // dwdot[OH]/d[CHFO]
  J[5017] += dqdci; // dwdot[HF]/d[CHFO]
  J[5025] -= dqdci; // dwdot[CHF2]/d[CHFO]
  J[5032] += dqdci; // dwdot[CHFO]/d[CHFO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5324] += dqdT; // dwdot[CHFO]/dT

  // reaction 339: CF3 + OH <=> CF2O + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[62];
  k_f = 14600000 * exp(-0.06 * logT - (-133.855633104055) * invT);
  dlnkfdT = -0.06 * invT + (-133.855633104055) * invT2;
  // reverse
  phi_r = sc[53] * sc[67];
  Kc = exp(g_RT[4] - g_RT[53] + g_RT[62] - g_RT[67]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[62]) + (h_RT[53] + h_RT[67]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[53] += q; // HF
  wdot[62] -= q; // CF3
  wdot[67] += q; // CF2O
  // d()/d[OH]
  dqdci = +k_f * sc[62];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[354] -= dqdci; // dwdot[CF3]/d[OH]
  J[359] += dqdci; // dwdot[CF2O]/d[OH]
  // d()/d[HF]
  dqdci = -k_r * sc[67];
  J[3873] -= dqdci; // dwdot[OH]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3931] -= dqdci; // dwdot[CF3]/d[HF]
  J[3936] += dqdci; // dwdot[CF2O]/d[HF]
  // d()/d[CF3]
  dqdci = +k_f * sc[4];
  J[4530] -= dqdci; // dwdot[OH]/d[CF3]
  J[4579] += dqdci; // dwdot[HF]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  J[4593] += dqdci; // dwdot[CF2O]/d[CF3]
  // d()/d[CF2O]
  dqdci = -k_r * sc[53];
  J[4895] -= dqdci; // dwdot[OH]/d[CF2O]
  J[4944] += dqdci; // dwdot[HF]/d[CF2O]
  J[4953] -= dqdci; // dwdot[CF3]/d[CF2O]
  J[4958] += dqdci; // dwdot[CF2O]/d[CF2O]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 341: F + H2 <=> H + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[54];
  k_f = 2560000 * exp(0.5 * logT - (327.090832773068) * invT);
  dlnkfdT = 0.5 * invT + (327.090832773068) * invT2;
  // reverse
  phi_r = sc[1] * sc[53];
  Kc = exp(g_RT[0] - g_RT[1] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[54]) + (h_RT[1] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[H2]
  dqdci = +k_f * sc[54];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[53] += dqdci; // dwdot[HF]/d[H2]
  J[54] -= dqdci; // dwdot[F]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[53];
  J[73] -= dqdci;  // dwdot[H2]/d[H]
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[127] -= dqdci; // dwdot[F]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[1];
  J[3869] -= dqdci; // dwdot[H2]/d[HF]
  J[3870] += dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[0];
  J[3942] -= dqdci; // dwdot[H2]/d[F]
  J[3943] += dqdci; // dwdot[H]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 342: F + OH <=> HF + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[54];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[53];
  Kc = exp(-g_RT[2] + g_RT[4] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[54]) + (h_RT[2] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[4] -= q;  // OH
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[O]
  dqdci = -k_r * sc[53];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[150] -= dqdci; // dwdot[OH]/d[O]
  J[199] += dqdci; // dwdot[HF]/d[O]
  J[200] -= dqdci; // dwdot[F]/d[O]
  // d()/d[OH]
  dqdci = +k_f * sc[54];
  J[294] += dqdci; // dwdot[O]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[346] -= dqdci; // dwdot[F]/d[OH]
  // d()/d[HF]
  dqdci = -k_r * sc[2];
  J[3871] += dqdci; // dwdot[O]/d[HF]
  J[3873] -= dqdci; // dwdot[OH]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[4];
  J[3944] += dqdci; // dwdot[O]/d[F]
  J[3946] -= dqdci; // dwdot[OH]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 343: F + HO2 <=> HF + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[54];
  k_f = 2890000 * exp(0.5 * logT);
  dlnkfdT = 0.5 * invT;
  // reverse
  phi_r = sc[3] * sc[53];
  Kc = exp(-g_RT[3] + g_RT[6] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[54]) + (h_RT[3] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[6] -= q;  // HO2
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[O2]
  dqdci = -k_r * sc[53];
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  J[272] += dqdci; // dwdot[HF]/d[O2]
  J[273] -= dqdci; // dwdot[F]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[54];
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[491] += dqdci; // dwdot[HF]/d[HO2]
  J[492] -= dqdci; // dwdot[F]/d[HO2]
  // d()/d[HF]
  dqdci = -k_r * sc[3];
  J[3872] += dqdci; // dwdot[O2]/d[HF]
  J[3875] -= dqdci; // dwdot[HO2]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[6];
  J[3945] += dqdci; // dwdot[O2]/d[F]
  J[3948] -= dqdci; // dwdot[HO2]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 344: F + H2O <=> HF + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[54];
  k_f = 1300 * exp(1.5 * logT);
  dlnkfdT = 1.5 * invT;
  // reverse
  phi_r = sc[4] * sc[53];
  Kc = exp(-g_RT[4] + g_RT[5] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[54]) + (h_RT[4] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[5] -= q;  // H2O
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[OH]
  dqdci = -k_r * sc[53];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[297] -= dqdci; // dwdot[H2O]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[346] -= dqdci; // dwdot[F]/d[OH]
  // d()/d[H2O]
  dqdci = +k_f * sc[54];
  J[369] += dqdci; // dwdot[OH]/d[H2O]
  J[370] -= dqdci; // dwdot[H2O]/d[H2O]
  J[418] += dqdci; // dwdot[HF]/d[H2O]
  J[419] -= dqdci; // dwdot[F]/d[H2O]
  // d()/d[HF]
  dqdci = -k_r * sc[4];
  J[3873] += dqdci; // dwdot[OH]/d[HF]
  J[3874] -= dqdci; // dwdot[H2O]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[5];
  J[3946] += dqdci; // dwdot[OH]/d[F]
  J[3947] -= dqdci; // dwdot[H2O]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5261] -= dqdT; // dwdot[H2O]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 345: F + H2O2 <=> HF + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[54];
  k_f = 1730000 * exp(0.5 * logT);
  dlnkfdT = 0.5 * invT;
  // reverse
  phi_r = sc[6] * sc[53];
  Kc = exp(-g_RT[6] + g_RT[7] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[54]) + (h_RT[6] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[HO2]
  dqdci = -k_r * sc[53];
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[491] += dqdci; // dwdot[HF]/d[HO2]
  J[492] -= dqdci; // dwdot[F]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[54];
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[564] += dqdci; // dwdot[HF]/d[H2O2]
  J[565] -= dqdci; // dwdot[F]/d[H2O2]
  // d()/d[HF]
  dqdci = -k_r * sc[6];
  J[3875] += dqdci; // dwdot[HO2]/d[HF]
  J[3876] -= dqdci; // dwdot[H2O2]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[7];
  J[3948] += dqdci; // dwdot[HO2]/d[F]
  J[3949] -= dqdci; // dwdot[H2O2]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 347: CHF + H2 <=> CH3F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[63];
  k_f = 225000000000 * exp(-2.85 * logT - (6541.81665546136) * invT);
  dlnkfdT = -2.85 * invT + (6541.81665546136) * invT2;
  // reverse
  phi_r = sc[56];
  Kc = refCinv * exp(g_RT[0] - g_RT[56] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[63]) + (h_RT[56]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[56] += q; // CH3F
  wdot[63] -= q; // CHF
  // d()/d[H2]
  dqdci = +k_f * sc[63];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[56] += dqdci; // dwdot[CH3F]/d[H2]
  J[63] -= dqdci; // dwdot[CHF]/d[H2]
  // d()/d[CH3F]
  dqdci = -k_r;
  J[4088] -= dqdci; // dwdot[H2]/d[CH3F]
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4151] -= dqdci; // dwdot[CHF]/d[CH3F]
  // d()/d[CHF]
  dqdci = +k_f * sc[0];
  J[4599] -= dqdci; // dwdot[H2]/d[CHF]
  J[4655] += dqdci; // dwdot[CH3F]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 348: CH2F + H <=> CH3F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[60];
  k_f = 3.03e+15 * exp(-3.38 * logT - (1741.12966368433) * invT);
  dlnkfdT = -3.38 * invT + (1741.12966368433) * invT2;
  // reverse
  phi_r = sc[56];
  Kc = refCinv * exp(g_RT[1] - g_RT[56] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[60]) + (h_RT[56]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[56] += q; // CH3F
  wdot[60] -= q; // CH2F
  // d()/d[H]
  dqdci = +k_f * sc[60];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[129] += dqdci; // dwdot[CH3F]/d[H]
  J[133] -= dqdci; // dwdot[CH2F]/d[H]
  // d()/d[CH3F]
  dqdci = -k_r;
  J[4089] -= dqdci; // dwdot[H]/d[CH3F]
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] -= dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[1];
  J[4381] -= dqdci; // dwdot[H]/d[CH2F]
  J[4436] += dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 350: CF2 + H2 <=> CH2F2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[64];
  k_f = 1.7 * exp(-0.71 * logT - (20581.561631413) * invT);
  dlnkfdT = -0.71 * invT + (20581.561631413) * invT2;
  // reverse
  phi_r = sc[57];
  Kc = refCinv * exp(g_RT[0] - g_RT[57] + g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[64]) + (h_RT[57]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[57] += q; // CH2F2
  wdot[64] -= q; // CF2
  // d()/d[H2]
  dqdci = +k_f * sc[64];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[57] += dqdci; // dwdot[CH2F2]/d[H2]
  J[64] -= dqdci; // dwdot[CF2]/d[H2]
  // d()/d[CH2F2]
  dqdci = -k_r;
  J[4161] -= dqdci; // dwdot[H2]/d[CH2F2]
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4225] -= dqdci; // dwdot[CF2]/d[CH2F2]
  // d()/d[CF2]
  dqdci = +k_f * sc[0];
  J[4672] -= dqdci; // dwdot[H2]/d[CF2]
  J[4729] += dqdci; // dwdot[CH2F2]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT

  // reaction 351: CHF2 + H <=> CH2F2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[61];
  k_f = 2.75 * exp(-0.32 * logT - (3869.73616003829) * invT);
  dlnkfdT = -0.32 * invT + (3869.73616003829) * invT2;
  // reverse
  phi_r = sc[57];
  Kc = refCinv * exp(g_RT[1] - g_RT[57] + g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[61]) + (h_RT[57]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[57] += q; // CH2F2
  wdot[61] -= q; // CHF2
  // d()/d[H]
  dqdci = +k_f * sc[61];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[130] += dqdci; // dwdot[CH2F2]/d[H]
  J[134] -= dqdci; // dwdot[CHF2]/d[H]
  // d()/d[CH2F2]
  dqdci = -k_r;
  J[4162] -= dqdci; // dwdot[H]/d[CH2F2]
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] -= dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = +k_f * sc[1];
  J[4454] -= dqdci; // dwdot[H]/d[CHF2]
  J[4510] += dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT

  // reaction 354: CH2(S) + HF <=> CHF + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[53];
  k_f = 20.8 * exp(1.27 * logT - (4191.79482615331) * invT);
  dlnkfdT = 1.27 * invT + (4191.79482615331) * invT2;
  // reverse
  phi_r = sc[0] * sc[63];
  Kc = exp(-g_RT[0] + g_RT[11] + g_RT[53] - g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[53]) + (h_RT[0] + h_RT[63]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[11] -= q; // CH2(S)
  wdot[53] -= q; // HF
  wdot[63] += q; // CHF
  // d()/d[H2]
  dqdci = -k_r * sc[63];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[11] -= dqdci; // dwdot[CH2(S)]/d[H2]
  J[53] -= dqdci; // dwdot[HF]/d[H2]
  J[63] += dqdci; // dwdot[CHF]/d[H2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[53];
  J[803] += dqdci; // dwdot[H2]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[856] -= dqdci; // dwdot[HF]/d[CH2(S)]
  J[866] += dqdci; // dwdot[CHF]/d[CH2(S)]
  // d()/d[HF]
  dqdci = +k_f * sc[11];
  J[3869] += dqdci; // dwdot[H2]/d[HF]
  J[3880] -= dqdci; // dwdot[CH2(S)]/d[HF]
  J[3922] -= dqdci; // dwdot[HF]/d[HF]
  J[3932] += dqdci; // dwdot[CHF]/d[HF]
  // d()/d[CHF]
  dqdci = -k_r * sc[0];
  J[4599] += dqdci; // dwdot[H2]/d[CHF]
  J[4610] -= dqdci; // dwdot[CH2(S)]/d[CHF]
  J[4652] -= dqdci; // dwdot[HF]/d[CHF]
  J[4662] += dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5309] -= dqdT; // dwdot[HF]/dT
  J[5319] += dqdT; // dwdot[CHF]/dT

  // reaction 355: CH3 + F <=> CH2(S) + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[54];
  k_f = 16200000000 * exp(-0.88 * logT - (-493.65554915443) * invT);
  dlnkfdT = -0.88 * invT + (-493.65554915443) * invT2;
  // reverse
  phi_r = sc[11] * sc[53];
  Kc = exp(-g_RT[11] + g_RT[12] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[54]) + (h_RT[11] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // CH2(S)
  wdot[12] -= q; // CH3
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[CH2(S)]
  dqdci = -k_r * sc[53];
  J[814] += dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[815] -= dqdci; // dwdot[CH3]/d[CH2(S)]
  J[856] += dqdci; // dwdot[HF]/d[CH2(S)]
  J[857] -= dqdci; // dwdot[F]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = +k_f * sc[54];
  J[887] += dqdci; // dwdot[CH2(S)]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[929] += dqdci; // dwdot[HF]/d[CH3]
  J[930] -= dqdci; // dwdot[F]/d[CH3]
  // d()/d[HF]
  dqdci = -k_r * sc[11];
  J[3880] += dqdci; // dwdot[CH2(S)]/d[HF]
  J[3881] -= dqdci; // dwdot[CH3]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[12];
  J[3953] += dqdci; // dwdot[CH2(S)]/d[F]
  J[3954] -= dqdci; // dwdot[CH3]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5267] += dqdT; // dwdot[CH2(S)]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 356: CH3 + F <=> CH2F + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[54];
  k_f = 1360000 * exp(-0.39 * logT - (-133.352416438251) * invT);
  dlnkfdT = -0.39 * invT + (-133.352416438251) * invT2;
  // reverse
  phi_r = sc[1] * sc[60];
  Kc = exp(-g_RT[1] + g_RT[12] + g_RT[54] - g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[54]) + (h_RT[1] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[12] -= q; // CH3
  wdot[54] -= q; // F
  wdot[60] += q; // CH2F
  // d()/d[H]
  dqdci = -k_r * sc[60];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[85] -= dqdci;  // dwdot[CH3]/d[H]
  J[127] -= dqdci; // dwdot[F]/d[H]
  J[133] += dqdci; // dwdot[CH2F]/d[H]
  // d()/d[CH3]
  dqdci = +k_f * sc[54];
  J[877] += dqdci; // dwdot[H]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[930] -= dqdci; // dwdot[F]/d[CH3]
  J[936] += dqdci; // dwdot[CH2F]/d[CH3]
  // d()/d[F]
  dqdci = +k_f * sc[12];
  J[3943] += dqdci; // dwdot[H]/d[F]
  J[3954] -= dqdci; // dwdot[CH3]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[4002] += dqdci; // dwdot[CH2F]/d[F]
  // d()/d[CH2F]
  dqdci = -k_r * sc[1];
  J[4381] += dqdci; // dwdot[H]/d[CH2F]
  J[4392] -= dqdci; // dwdot[CH3]/d[CH2F]
  J[4434] -= dqdci; // dwdot[F]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT

  // reaction 357: CHF + HF <=> CF2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[53] * sc[63];
  k_f = 5.77 * exp(1.35 * logT - (9007.57831790448) * invT);
  dlnkfdT = 1.35 * invT + (9007.57831790448) * invT2;
  // reverse
  phi_r = sc[0] * sc[64];
  Kc = exp(-g_RT[0] + g_RT[53] + g_RT[63] - g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[53] + h_RT[63]) + (h_RT[0] + h_RT[64]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[53] -= q; // HF
  wdot[63] -= q; // CHF
  wdot[64] += q; // CF2
  // d()/d[H2]
  dqdci = -k_r * sc[64];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[53] -= dqdci; // dwdot[HF]/d[H2]
  J[63] -= dqdci; // dwdot[CHF]/d[H2]
  J[64] += dqdci; // dwdot[CF2]/d[H2]
  // d()/d[HF]
  dqdci = +k_f * sc[63];
  J[3869] += dqdci; // dwdot[H2]/d[HF]
  J[3922] -= dqdci; // dwdot[HF]/d[HF]
  J[3932] -= dqdci; // dwdot[CHF]/d[HF]
  J[3933] += dqdci; // dwdot[CF2]/d[HF]
  // d()/d[CHF]
  dqdci = +k_f * sc[53];
  J[4599] += dqdci; // dwdot[H2]/d[CHF]
  J[4652] -= dqdci; // dwdot[HF]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  J[4663] += dqdci; // dwdot[CF2]/d[CHF]
  // d()/d[CF2]
  dqdci = -k_r * sc[0];
  J[4672] += dqdci; // dwdot[H2]/d[CF2]
  J[4725] -= dqdci; // dwdot[HF]/d[CF2]
  J[4735] -= dqdci; // dwdot[CHF]/d[CF2]
  J[4736] += dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5309] -= dqdT; // dwdot[HF]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT
  J[5320] += dqdT; // dwdot[CF2]/dT

  // reaction 358: CHF2 + H <=> CHF + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[61];
  k_f = 149000000 * exp(-0.11 * logT - (50.8248832462767) * invT);
  dlnkfdT = -0.11 * invT + (50.8248832462767) * invT2;
  // reverse
  phi_r = sc[53] * sc[63];
  Kc = exp(g_RT[1] - g_RT[53] + g_RT[61] - g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[61]) + (h_RT[53] + h_RT[63]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[61] -= q; // CHF2
  wdot[63] += q; // CHF
  // d()/d[H]
  dqdci = +k_f * sc[61];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[134] -= dqdci; // dwdot[CHF2]/d[H]
  J[136] += dqdci; // dwdot[CHF]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[63];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3930] -= dqdci; // dwdot[CHF2]/d[HF]
  J[3932] += dqdci; // dwdot[CHF]/d[HF]
  // d()/d[CHF2]
  dqdci = +k_f * sc[1];
  J[4454] -= dqdci; // dwdot[H]/d[CHF2]
  J[4506] += dqdci; // dwdot[HF]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4516] += dqdci; // dwdot[CHF]/d[CHF2]
  // d()/d[CHF]
  dqdci = -k_r * sc[53];
  J[4600] -= dqdci; // dwdot[H]/d[CHF]
  J[4652] += dqdci; // dwdot[HF]/d[CHF]
  J[4660] -= dqdci; // dwdot[CHF2]/d[CHF]
  J[4662] += dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5319] += dqdT; // dwdot[CHF]/dT

  // reaction 359: CHF2 + H <=> CF2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[61];
  k_f = 0.0055 * exp(2.42 * logT - (-211.350999637982) * invT);
  dlnkfdT = 2.42 * invT + (-211.350999637982) * invT2;
  // reverse
  phi_r = sc[0] * sc[64];
  Kc = exp(-g_RT[0] + g_RT[1] + g_RT[61] - g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[61]) + (h_RT[0] + h_RT[64]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[61] -= q; // CHF2
  wdot[64] += q; // CF2
  // d()/d[H2]
  dqdci = -k_r * sc[64];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[61] -= dqdci; // dwdot[CHF2]/d[H2]
  J[64] += dqdci; // dwdot[CF2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[61];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[134] -= dqdci; // dwdot[CHF2]/d[H]
  J[137] += dqdci; // dwdot[CF2]/d[H]
  // d()/d[CHF2]
  dqdci = +k_f * sc[1];
  J[4453] += dqdci; // dwdot[H2]/d[CHF2]
  J[4454] -= dqdci; // dwdot[H]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4517] += dqdci; // dwdot[CF2]/d[CHF2]
  // d()/d[CF2]
  dqdci = -k_r * sc[0];
  J[4672] += dqdci; // dwdot[H2]/d[CF2]
  J[4673] -= dqdci; // dwdot[H]/d[CF2]
  J[4733] -= dqdci; // dwdot[CHF2]/d[CF2]
  J[4736] += dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5320] += dqdT; // dwdot[CF2]/dT

  // reaction 360: CH2F + F <=> CHF + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[54] * sc[60];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[53] * sc[63];
  Kc = exp(-g_RT[53] + g_RT[54] + g_RT[60] - g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[54] + h_RT[60]) + (h_RT[53] + h_RT[63]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  wdot[60] -= q; // CH2F
  wdot[63] += q; // CHF
  // d()/d[HF]
  dqdci = -k_r * sc[63];
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  J[3929] -= dqdci; // dwdot[CH2F]/d[HF]
  J[3932] += dqdci; // dwdot[CHF]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[60];
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[4002] -= dqdci; // dwdot[CH2F]/d[F]
  J[4005] += dqdci; // dwdot[CHF]/d[F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[54];
  J[4433] += dqdci; // dwdot[HF]/d[CH2F]
  J[4434] -= dqdci; // dwdot[F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4443] += dqdci; // dwdot[CHF]/d[CH2F]
  // d()/d[CHF]
  dqdci = -k_r * sc[53];
  J[4652] += dqdci; // dwdot[HF]/d[CHF]
  J[4653] -= dqdci; // dwdot[F]/d[CHF]
  J[4659] -= dqdci; // dwdot[CH2F]/d[CHF]
  J[4662] += dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5319] += dqdT; // dwdot[CHF]/dT

  // reaction 361: CF3 + H <=> CF2 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[62];
  k_f = 53300000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[53] * sc[64];
  Kc = exp(g_RT[1] - g_RT[53] + g_RT[62] - g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[62]) + (h_RT[53] + h_RT[64]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[62] -= q; // CF3
  wdot[64] += q; // CF2
  // d()/d[H]
  dqdci = +k_f * sc[62];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[135] -= dqdci; // dwdot[CF3]/d[H]
  J[137] += dqdci; // dwdot[CF2]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[64];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3931] -= dqdci; // dwdot[CF3]/d[HF]
  J[3933] += dqdci; // dwdot[CF2]/d[HF]
  // d()/d[CF3]
  dqdci = +k_f * sc[1];
  J[4527] -= dqdci; // dwdot[H]/d[CF3]
  J[4579] += dqdci; // dwdot[HF]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  J[4590] += dqdci; // dwdot[CF2]/d[CF3]
  // d()/d[CF2]
  dqdci = -k_r * sc[53];
  J[4673] -= dqdci; // dwdot[H]/d[CF2]
  J[4725] += dqdci; // dwdot[HF]/d[CF2]
  J[4734] -= dqdci; // dwdot[CF3]/d[CF2]
  J[4736] += dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5320] += dqdT; // dwdot[CF2]/dT

  // reaction 362: CHF2 + F <=> CF2 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[54] * sc[61];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[53] * sc[64];
  Kc = exp(-g_RT[53] + g_RT[54] + g_RT[61] - g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[54] + h_RT[61]) + (h_RT[53] + h_RT[64]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  wdot[61] -= q; // CHF2
  wdot[64] += q; // CF2
  // d()/d[HF]
  dqdci = -k_r * sc[64];
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  J[3930] -= dqdci; // dwdot[CHF2]/d[HF]
  J[3933] += dqdci; // dwdot[CF2]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[61];
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[4003] -= dqdci; // dwdot[CHF2]/d[F]
  J[4006] += dqdci; // dwdot[CF2]/d[F]
  // d()/d[CHF2]
  dqdci = +k_f * sc[54];
  J[4506] += dqdci; // dwdot[HF]/d[CHF2]
  J[4507] -= dqdci; // dwdot[F]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4517] += dqdci; // dwdot[CF2]/d[CHF2]
  // d()/d[CF2]
  dqdci = -k_r * sc[53];
  J[4725] += dqdci; // dwdot[HF]/d[CF2]
  J[4726] -= dqdci; // dwdot[F]/d[CF2]
  J[4733] -= dqdci; // dwdot[CHF2]/d[CF2]
  J[4736] += dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5320] += dqdT; // dwdot[CF2]/dT

  // reaction 363: CH3F + H <=> CH2F + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[56];
  k_f = 0.0027 * exp(3 * logT - (2667.04832876501) * invT);
  dlnkfdT = 3 * invT + (2667.04832876501) * invT2;
  // reverse
  phi_r = sc[0] * sc[60];
  Kc = exp(-g_RT[0] + g_RT[1] + g_RT[56] - g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[56]) + (h_RT[0] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[56] -= q; // CH3F
  wdot[60] += q; // CH2F
  // d()/d[H2]
  dqdci = -k_r * sc[60];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[56] -= dqdci; // dwdot[CH3F]/d[H2]
  J[60] += dqdci; // dwdot[CH2F]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[56];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[129] -= dqdci; // dwdot[CH3F]/d[H]
  J[133] += dqdci; // dwdot[CH2F]/d[H]
  // d()/d[CH3F]
  dqdci = +k_f * sc[1];
  J[4088] += dqdci; // dwdot[H2]/d[CH3F]
  J[4089] -= dqdci; // dwdot[H]/d[CH3F]
  J[4144] -= dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] += dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = -k_r * sc[0];
  J[4380] += dqdci; // dwdot[H2]/d[CH2F]
  J[4381] -= dqdci; // dwdot[H]/d[CH2F]
  J[4436] -= dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5312] -= dqdT; // dwdot[CH3F]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT

  // reaction 364: CH2F2 + H <=> CHF2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[57];
  k_f = 0.00165 * exp(3 * logT - (2818.01332850643) * invT);
  dlnkfdT = 3 * invT + (2818.01332850643) * invT2;
  // reverse
  phi_r = sc[0] * sc[61];
  Kc = exp(-g_RT[0] + g_RT[1] + g_RT[57] - g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[57]) + (h_RT[0] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[57] -= q; // CH2F2
  wdot[61] += q; // CHF2
  // d()/d[H2]
  dqdci = -k_r * sc[61];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[57] -= dqdci; // dwdot[CH2F2]/d[H2]
  J[61] += dqdci; // dwdot[CHF2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[57];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[130] -= dqdci; // dwdot[CH2F2]/d[H]
  J[134] += dqdci; // dwdot[CHF2]/d[H]
  // d()/d[CH2F2]
  dqdci = +k_f * sc[1];
  J[4161] += dqdci; // dwdot[H2]/d[CH2F2]
  J[4162] -= dqdci; // dwdot[H]/d[CH2F2]
  J[4218] -= dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] += dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = -k_r * sc[0];
  J[4453] += dqdci; // dwdot[H2]/d[CHF2]
  J[4454] -= dqdci; // dwdot[H]/d[CHF2]
  J[4510] -= dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5313] -= dqdT; // dwdot[CH2F2]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT

  // reaction 365: CH3F + H <=> CH3 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[56];
  k_f = 275000000 * exp(-(15801.0033062682) * invT);
  dlnkfdT = (15801.0033062682) * invT2;
  // reverse
  phi_r = sc[12] * sc[53];
  Kc = exp(g_RT[1] - g_RT[12] - g_RT[53] + g_RT[56]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[56]) + (h_RT[12] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[12] += q; // CH3
  wdot[53] += q; // HF
  wdot[56] -= q; // CH3F
  // d()/d[H]
  dqdci = +k_f * sc[56];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[85] += dqdci;  // dwdot[CH3]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[129] -= dqdci; // dwdot[CH3F]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[53];
  J[877] -= dqdci; // dwdot[H]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[929] += dqdci; // dwdot[HF]/d[CH3]
  J[932] -= dqdci; // dwdot[CH3F]/d[CH3]
  // d()/d[HF]
  dqdci = -k_r * sc[12];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3881] += dqdci; // dwdot[CH3]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3925] -= dqdci; // dwdot[CH3F]/d[HF]
  // d()/d[CH3F]
  dqdci = +k_f * sc[1];
  J[4089] -= dqdci; // dwdot[H]/d[CH3F]
  J[4100] += dqdci; // dwdot[CH3]/d[CH3F]
  J[4141] += dqdci; // dwdot[HF]/d[CH3F]
  J[4144] -= dqdci; // dwdot[CH3F]/d[CH3F]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5312] -= dqdT; // dwdot[CH3F]/dT

  // reaction 366: CH2F2 + H <=> CH2F + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[57];
  k_f = 55000000 * exp(-(17159.6883039409) * invT);
  dlnkfdT = (17159.6883039409) * invT2;
  // reverse
  phi_r = sc[53] * sc[60];
  Kc = exp(g_RT[1] - g_RT[53] + g_RT[57] - g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[57]) + (h_RT[53] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[57] -= q; // CH2F2
  wdot[60] += q; // CH2F
  // d()/d[H]
  dqdci = +k_f * sc[57];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[130] -= dqdci; // dwdot[CH2F2]/d[H]
  J[133] += dqdci; // dwdot[CH2F]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[60];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3926] -= dqdci; // dwdot[CH2F2]/d[HF]
  J[3929] += dqdci; // dwdot[CH2F]/d[HF]
  // d()/d[CH2F2]
  dqdci = +k_f * sc[1];
  J[4162] -= dqdci; // dwdot[H]/d[CH2F2]
  J[4214] += dqdci; // dwdot[HF]/d[CH2F2]
  J[4218] -= dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4221] += dqdci; // dwdot[CH2F]/d[CH2F2]
  // d()/d[CH2F]
  dqdci = -k_r * sc[53];
  J[4381] -= dqdci; // dwdot[H]/d[CH2F]
  J[4433] += dqdci; // dwdot[HF]/d[CH2F]
  J[4437] -= dqdci; // dwdot[CH2F2]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5313] -= dqdT; // dwdot[CH2F2]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT

  // reaction 367: CHF3 + H <=> CHF2 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[58];
  k_f = 211 * exp(1.77 * logT - (20028.0232990278) * invT);
  dlnkfdT = 1.77 * invT + (20028.0232990278) * invT2;
  // reverse
  phi_r = sc[53] * sc[61];
  Kc = exp(g_RT[1] - g_RT[53] + g_RT[58] - g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[58]) + (h_RT[53] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[58] -= q; // CHF3
  wdot[61] += q; // CHF2
  // d()/d[H]
  dqdci = +k_f * sc[58];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[131] -= dqdci; // dwdot[CHF3]/d[H]
  J[134] += dqdci; // dwdot[CHF2]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[61];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3927] -= dqdci; // dwdot[CHF3]/d[HF]
  J[3930] += dqdci; // dwdot[CHF2]/d[HF]
  // d()/d[CHF3]
  dqdci = +k_f * sc[1];
  J[4235] -= dqdci; // dwdot[H]/d[CHF3]
  J[4287] += dqdci; // dwdot[HF]/d[CHF3]
  J[4292] -= dqdci; // dwdot[CHF3]/d[CHF3]
  J[4295] += dqdci; // dwdot[CHF2]/d[CHF3]
  // d()/d[CHF2]
  dqdci = -k_r * sc[53];
  J[4454] -= dqdci; // dwdot[H]/d[CHF2]
  J[4506] += dqdci; // dwdot[HF]/d[CHF2]
  J[4511] -= dqdci; // dwdot[CHF3]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5314] -= dqdT; // dwdot[CHF3]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT

  // reaction 368: CF4 + H <=> CF3 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[59];
  k_f = 3070 * exp(1.58 * logT - (20797.9447977091) * invT);
  dlnkfdT = 1.58 * invT + (20797.9447977091) * invT2;
  // reverse
  phi_r = sc[53] * sc[62];
  Kc = exp(g_RT[1] - g_RT[53] + g_RT[59] - g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[59]) + (h_RT[53] + h_RT[62]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[59] -= q; // CF4
  wdot[62] += q; // CF3
  // d()/d[H]
  dqdci = +k_f * sc[59];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[132] -= dqdci; // dwdot[CF4]/d[H]
  J[135] += dqdci; // dwdot[CF3]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[62];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3928] -= dqdci; // dwdot[CF4]/d[HF]
  J[3931] += dqdci; // dwdot[CF3]/d[HF]
  // d()/d[CF4]
  dqdci = +k_f * sc[1];
  J[4308] -= dqdci; // dwdot[H]/d[CF4]
  J[4360] += dqdci; // dwdot[HF]/d[CF4]
  J[4366] -= dqdci; // dwdot[CF4]/d[CF4]
  J[4369] += dqdci; // dwdot[CF3]/d[CF4]
  // d()/d[CF3]
  dqdci = -k_r * sc[53];
  J[4527] -= dqdci; // dwdot[H]/d[CF3]
  J[4579] += dqdci; // dwdot[HF]/d[CF3]
  J[4585] -= dqdci; // dwdot[CF4]/d[CF3]
  J[4588] += dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5315] -= dqdT; // dwdot[CF4]/dT
  J[5318] += dqdT; // dwdot[CF3]/dT

  // reaction 369: CF4 + H <=> CHF3 + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[59];
  k_f = 915 * exp(1.45 * logT - (31999.5477785221) * invT);
  dlnkfdT = 1.45 * invT + (31999.5477785221) * invT2;
  // reverse
  phi_r = sc[54] * sc[58];
  Kc = exp(g_RT[1] - g_RT[54] - g_RT[58] + g_RT[59]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[59]) + (h_RT[54] + h_RT[58]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[54] += q; // F
  wdot[58] += q; // CHF3
  wdot[59] -= q; // CF4
  // d()/d[H]
  dqdci = +k_f * sc[59];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[127] += dqdci; // dwdot[F]/d[H]
  J[131] += dqdci; // dwdot[CHF3]/d[H]
  J[132] -= dqdci; // dwdot[CF4]/d[H]
  // d()/d[F]
  dqdci = -k_r * sc[58];
  J[3943] -= dqdci; // dwdot[H]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[4000] += dqdci; // dwdot[CHF3]/d[F]
  J[4001] -= dqdci; // dwdot[CF4]/d[F]
  // d()/d[CHF3]
  dqdci = -k_r * sc[54];
  J[4235] -= dqdci; // dwdot[H]/d[CHF3]
  J[4288] += dqdci; // dwdot[F]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4293] -= dqdci; // dwdot[CF4]/d[CHF3]
  // d()/d[CF4]
  dqdci = +k_f * sc[1];
  J[4308] -= dqdci; // dwdot[H]/d[CF4]
  J[4361] += dqdci; // dwdot[F]/d[CF4]
  J[4365] += dqdci; // dwdot[CHF3]/d[CF4]
  J[4366] -= dqdci; // dwdot[CF4]/d[CF4]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5315] -= dqdT; // dwdot[CF4]/dT

  // reaction 370: CH3F + O <=> CH2F + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[56];
  k_f = 65 * exp(1.5 * logT - (3522.51666063304) * invT);
  dlnkfdT = 1.5 * invT + (3522.51666063304) * invT2;
  // reverse
  phi_r = sc[4] * sc[60];
  Kc = exp(g_RT[2] - g_RT[4] + g_RT[56] - g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[56]) + (h_RT[4] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[56] -= q; // CH3F
  wdot[60] += q; // CH2F
  // d()/d[O]
  dqdci = +k_f * sc[56];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[202] -= dqdci; // dwdot[CH3F]/d[O]
  J[206] += dqdci; // dwdot[CH2F]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[60];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[348] -= dqdci; // dwdot[CH3F]/d[OH]
  J[352] += dqdci; // dwdot[CH2F]/d[OH]
  // d()/d[CH3F]
  dqdci = +k_f * sc[2];
  J[4090] -= dqdci; // dwdot[O]/d[CH3F]
  J[4092] += dqdci; // dwdot[OH]/d[CH3F]
  J[4144] -= dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] += dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = -k_r * sc[4];
  J[4382] -= dqdci; // dwdot[O]/d[CH2F]
  J[4384] += dqdci; // dwdot[OH]/d[CH2F]
  J[4436] -= dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5312] -= dqdT; // dwdot[CH3F]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT

  // reaction 371: CH2F2 + O <=> CHF2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[57];
  k_f = 22.5 * exp(1.5 * logT - (3069.62166140879) * invT);
  dlnkfdT = 1.5 * invT + (3069.62166140879) * invT2;
  // reverse
  phi_r = sc[4] * sc[61];
  Kc = exp(g_RT[2] - g_RT[4] + g_RT[57] - g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[57]) + (h_RT[4] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[57] -= q; // CH2F2
  wdot[61] += q; // CHF2
  // d()/d[O]
  dqdci = +k_f * sc[57];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[203] -= dqdci; // dwdot[CH2F2]/d[O]
  J[207] += dqdci; // dwdot[CHF2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[61];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[349] -= dqdci; // dwdot[CH2F2]/d[OH]
  J[353] += dqdci; // dwdot[CHF2]/d[OH]
  // d()/d[CH2F2]
  dqdci = +k_f * sc[2];
  J[4163] -= dqdci; // dwdot[O]/d[CH2F2]
  J[4165] += dqdci; // dwdot[OH]/d[CH2F2]
  J[4218] -= dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] += dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = -k_r * sc[4];
  J[4455] -= dqdci; // dwdot[O]/d[CHF2]
  J[4457] += dqdci; // dwdot[OH]/d[CHF2]
  J[4510] -= dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5313] -= dqdT; // dwdot[CH2F2]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT

  // reaction 372: CHF3 + O <=> CF3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[58];
  k_f = 307000000 * exp(-(9535.95581699944) * invT);
  dlnkfdT = (9535.95581699944) * invT2;
  // reverse
  phi_r = sc[4] * sc[62];
  Kc = exp(g_RT[2] - g_RT[4] + g_RT[58] - g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[58]) + (h_RT[4] + h_RT[62]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[58] -= q; // CHF3
  wdot[62] += q; // CF3
  // d()/d[O]
  dqdci = +k_f * sc[58];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[204] -= dqdci; // dwdot[CHF3]/d[O]
  J[208] += dqdci; // dwdot[CF3]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[62];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[350] -= dqdci; // dwdot[CHF3]/d[OH]
  J[354] += dqdci; // dwdot[CF3]/d[OH]
  // d()/d[CHF3]
  dqdci = +k_f * sc[2];
  J[4236] -= dqdci; // dwdot[O]/d[CHF3]
  J[4238] += dqdci; // dwdot[OH]/d[CHF3]
  J[4292] -= dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] += dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = -k_r * sc[4];
  J[4528] -= dqdci; // dwdot[O]/d[CF3]
  J[4530] += dqdci; // dwdot[OH]/d[CF3]
  J[4584] -= dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] += dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5314] -= dqdT; // dwdot[CHF3]/dT
  J[5318] += dqdT; // dwdot[CF3]/dT

  // reaction 373: CH3F + OH <=> CH2F + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[56];
  k_f = 260 * exp(1.5 * logT - (1479.45699746588) * invT);
  dlnkfdT = 1.5 * invT + (1479.45699746588) * invT2;
  // reverse
  phi_r = sc[5] * sc[60];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[56] - g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[56]) + (h_RT[5] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[56] -= q; // CH3F
  wdot[60] += q; // CH2F
  // d()/d[OH]
  dqdci = +k_f * sc[56];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[348] -= dqdci; // dwdot[CH3F]/d[OH]
  J[352] += dqdci; // dwdot[CH2F]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[60];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[421] -= dqdci; // dwdot[CH3F]/d[H2O]
  J[425] += dqdci; // dwdot[CH2F]/d[H2O]
  // d()/d[CH3F]
  dqdci = +k_f * sc[4];
  J[4092] -= dqdci; // dwdot[OH]/d[CH3F]
  J[4093] += dqdci; // dwdot[H2O]/d[CH3F]
  J[4144] -= dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] += dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = -k_r * sc[5];
  J[4384] -= dqdci; // dwdot[OH]/d[CH2F]
  J[4385] += dqdci; // dwdot[H2O]/d[CH2F]
  J[4436] -= dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5312] -= dqdT; // dwdot[CH3F]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT

  // reaction 374: CH2F2 + OH <=> CHF2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[57];
  k_f = 28 * exp(1.7 * logT - (1278.17033114399) * invT);
  dlnkfdT = 1.7 * invT + (1278.17033114399) * invT2;
  // reverse
  phi_r = sc[5] * sc[61];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[57] - g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[57]) + (h_RT[5] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[57] -= q; // CH2F2
  wdot[61] += q; // CHF2
  // d()/d[OH]
  dqdci = +k_f * sc[57];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[349] -= dqdci; // dwdot[CH2F2]/d[OH]
  J[353] += dqdci; // dwdot[CHF2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[61];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[422] -= dqdci; // dwdot[CH2F2]/d[H2O]
  J[426] += dqdci; // dwdot[CHF2]/d[H2O]
  // d()/d[CH2F2]
  dqdci = +k_f * sc[4];
  J[4165] -= dqdci; // dwdot[OH]/d[CH2F2]
  J[4166] += dqdci; // dwdot[H2O]/d[CH2F2]
  J[4218] -= dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] += dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = -k_r * sc[5];
  J[4457] -= dqdci; // dwdot[OH]/d[CHF2]
  J[4458] += dqdci; // dwdot[H2O]/d[CHF2]
  J[4510] -= dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5313] -= dqdT; // dwdot[CH2F2]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT

  // reaction 375: CHF3 + OH <=> CF3 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[58];
  k_f = 12.5 * exp(1.55 * logT - (1846.80516350332) * invT);
  dlnkfdT = 1.55 * invT + (1846.80516350332) * invT2;
  // reverse
  phi_r = sc[5] * sc[62];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[58] - g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[58]) + (h_RT[5] + h_RT[62]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[58] -= q; // CHF3
  wdot[62] += q; // CF3
  // d()/d[OH]
  dqdci = +k_f * sc[58];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[350] -= dqdci; // dwdot[CHF3]/d[OH]
  J[354] += dqdci; // dwdot[CF3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[62];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[423] -= dqdci; // dwdot[CHF3]/d[H2O]
  J[427] += dqdci; // dwdot[CF3]/d[H2O]
  // d()/d[CHF3]
  dqdci = +k_f * sc[4];
  J[4238] -= dqdci; // dwdot[OH]/d[CHF3]
  J[4239] += dqdci; // dwdot[H2O]/d[CHF3]
  J[4292] -= dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] += dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = -k_r * sc[5];
  J[4530] -= dqdci; // dwdot[OH]/d[CF3]
  J[4531] += dqdci; // dwdot[H2O]/d[CF3]
  J[4584] -= dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] += dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5314] -= dqdT; // dwdot[CHF3]/dT
  J[5318] += dqdT; // dwdot[CF3]/dT

  // reaction 376: CH2F + H2O2 <=> CH3F + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[60];
  k_f = 12000 * exp(-(-301.929999482832) * invT);
  dlnkfdT = (-301.929999482832) * invT2;
  // reverse
  phi_r = sc[6] * sc[56];
  Kc = exp(-g_RT[6] + g_RT[7] - g_RT[56] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[60]) + (h_RT[6] + h_RT[56]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[56] += q; // CH3F
  wdot[60] -= q; // CH2F
  // d()/d[HO2]
  dqdci = -k_r * sc[56];
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[494] += dqdci; // dwdot[CH3F]/d[HO2]
  J[498] -= dqdci; // dwdot[CH2F]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[60];
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[567] += dqdci; // dwdot[CH3F]/d[H2O2]
  J[571] -= dqdci; // dwdot[CH2F]/d[H2O2]
  // d()/d[CH3F]
  dqdci = -k_r * sc[6];
  J[4094] += dqdci; // dwdot[HO2]/d[CH3F]
  J[4095] -= dqdci; // dwdot[H2O2]/d[CH3F]
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] -= dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[7];
  J[4386] += dqdci; // dwdot[HO2]/d[CH2F]
  J[4387] -= dqdci; // dwdot[H2O2]/d[CH2F]
  J[4436] += dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 377: CHF2 + H2O2 <=> CH2F2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[61];
  k_f = 12000 * exp(-(-301.929999482832) * invT);
  dlnkfdT = (-301.929999482832) * invT2;
  // reverse
  phi_r = sc[6] * sc[57];
  Kc = exp(-g_RT[6] + g_RT[7] - g_RT[57] + g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[61]) + (h_RT[6] + h_RT[57]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[57] += q; // CH2F2
  wdot[61] -= q; // CHF2
  // d()/d[HO2]
  dqdci = -k_r * sc[57];
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[495] += dqdci; // dwdot[CH2F2]/d[HO2]
  J[499] -= dqdci; // dwdot[CHF2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[61];
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[568] += dqdci; // dwdot[CH2F2]/d[H2O2]
  J[572] -= dqdci; // dwdot[CHF2]/d[H2O2]
  // d()/d[CH2F2]
  dqdci = -k_r * sc[6];
  J[4167] += dqdci; // dwdot[HO2]/d[CH2F2]
  J[4168] -= dqdci; // dwdot[H2O2]/d[CH2F2]
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] -= dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = +k_f * sc[7];
  J[4459] += dqdci; // dwdot[HO2]/d[CHF2]
  J[4460] -= dqdci; // dwdot[H2O2]/d[CHF2]
  J[4510] += dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT

  // reaction 378: CF3 + H2O2 <=> CHF3 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[62];
  k_f = 12000 * exp(-(-301.929999482832) * invT);
  dlnkfdT = (-301.929999482832) * invT2;
  // reverse
  phi_r = sc[6] * sc[58];
  Kc = exp(-g_RT[6] + g_RT[7] - g_RT[58] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[62]) + (h_RT[6] + h_RT[58]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  // d()/d[HO2]
  dqdci = -k_r * sc[58];
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[496] += dqdci; // dwdot[CHF3]/d[HO2]
  J[500] -= dqdci; // dwdot[CF3]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[62];
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[569] += dqdci; // dwdot[CHF3]/d[H2O2]
  J[573] -= dqdci; // dwdot[CF3]/d[H2O2]
  // d()/d[CHF3]
  dqdci = -k_r * sc[6];
  J[4240] += dqdci; // dwdot[HO2]/d[CHF3]
  J[4241] -= dqdci; // dwdot[H2O2]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[7];
  J[4532] += dqdci; // dwdot[HO2]/d[CF3]
  J[4533] -= dqdci; // dwdot[H2O2]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 379: CH3 + CH3F <=> CH2F + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[56];
  k_f = 150000 * exp(-(5736.6699901738) * invT);
  dlnkfdT = (5736.6699901738) * invT2;
  // reverse
  phi_r = sc[13] * sc[60];
  Kc = exp(g_RT[12] - g_RT[13] + g_RT[56] - g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[56]) + (h_RT[13] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[56] -= q; // CH3F
  wdot[60] += q; // CH2F
  // d()/d[CH3]
  dqdci = +k_f * sc[56];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[932] -= dqdci; // dwdot[CH3F]/d[CH3]
  J[936] += dqdci; // dwdot[CH2F]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[60];
  J[961] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[962] += dqdci;  // dwdot[CH4]/d[CH4]
  J[1005] -= dqdci; // dwdot[CH3F]/d[CH4]
  J[1009] += dqdci; // dwdot[CH2F]/d[CH4]
  // d()/d[CH3F]
  dqdci = +k_f * sc[12];
  J[4100] -= dqdci; // dwdot[CH3]/d[CH3F]
  J[4101] += dqdci; // dwdot[CH4]/d[CH3F]
  J[4144] -= dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] += dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = -k_r * sc[13];
  J[4392] -= dqdci; // dwdot[CH3]/d[CH2F]
  J[4393] += dqdci; // dwdot[CH4]/d[CH2F]
  J[4436] -= dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5312] -= dqdT; // dwdot[CH3F]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT

  // reaction 380: CH2F2 + CH3 <=> CH4 + CHF2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[57];
  k_f = 87000 * exp(-(5132.80999120814) * invT);
  dlnkfdT = (5132.80999120814) * invT2;
  // reverse
  phi_r = sc[13] * sc[61];
  Kc = exp(g_RT[12] - g_RT[13] + g_RT[57] - g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[57]) + (h_RT[13] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[57] -= q; // CH2F2
  wdot[61] += q; // CHF2
  // d()/d[CH3]
  dqdci = +k_f * sc[57];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[933] -= dqdci; // dwdot[CH2F2]/d[CH3]
  J[937] += dqdci; // dwdot[CHF2]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[61];
  J[961] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[962] += dqdci;  // dwdot[CH4]/d[CH4]
  J[1006] -= dqdci; // dwdot[CH2F2]/d[CH4]
  J[1010] += dqdci; // dwdot[CHF2]/d[CH4]
  // d()/d[CH2F2]
  dqdci = +k_f * sc[12];
  J[4173] -= dqdci; // dwdot[CH3]/d[CH2F2]
  J[4174] += dqdci; // dwdot[CH4]/d[CH2F2]
  J[4218] -= dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] += dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = -k_r * sc[13];
  J[4465] -= dqdci; // dwdot[CH3]/d[CHF2]
  J[4466] += dqdci; // dwdot[CH4]/d[CHF2]
  J[4510] -= dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5313] -= dqdT; // dwdot[CH2F2]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT

  // reaction 381: CF3 + CH4 <=> CH3 + CHF3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[62];
  k_f = 834000 * exp(-(5495.12599058754) * invT);
  dlnkfdT = (5495.12599058754) * invT2;
  // reverse
  phi_r = sc[12] * sc[58];
  Kc = exp(-g_RT[12] + g_RT[13] - g_RT[58] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[62]) + (h_RT[12] + h_RT[58]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // CH3
  wdot[13] -= q; // CH4
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  // d()/d[CH3]
  dqdci = -k_r * sc[58];
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[889] -= dqdci; // dwdot[CH4]/d[CH3]
  J[934] += dqdci; // dwdot[CHF3]/d[CH3]
  J[938] -= dqdci; // dwdot[CF3]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[62];
  J[961] += dqdci;  // dwdot[CH3]/d[CH4]
  J[962] -= dqdci;  // dwdot[CH4]/d[CH4]
  J[1007] += dqdci; // dwdot[CHF3]/d[CH4]
  J[1011] -= dqdci; // dwdot[CF3]/d[CH4]
  // d()/d[CHF3]
  dqdci = -k_r * sc[12];
  J[4246] += dqdci; // dwdot[CH3]/d[CHF3]
  J[4247] -= dqdci; // dwdot[CH4]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[13];
  J[4538] += dqdci; // dwdot[CH3]/d[CF3]
  J[4539] -= dqdci; // dwdot[CH4]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5269] -= dqdT; // dwdot[CH4]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 382: C2H3 + CH3F <=> C2H4 + CH2F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[23] * sc[56];
  k_f = 150000 * exp(-(5183.13165778861) * invT);
  dlnkfdT = (5183.13165778861) * invT2;
  // reverse
  phi_r = sc[24] * sc[60];
  Kc = exp(g_RT[23] - g_RT[24] + g_RT[56] - g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[23] + h_RT[56]) + (h_RT[24] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[23] -= q; // C2H3
  wdot[24] += q; // C2H4
  wdot[56] -= q; // CH3F
  wdot[60] += q; // CH2F
  // d()/d[C2H3]
  dqdci = +k_f * sc[56];
  J[1702] -= dqdci; // dwdot[C2H3]/d[C2H3]
  J[1703] += dqdci; // dwdot[C2H4]/d[C2H3]
  J[1735] -= dqdci; // dwdot[CH3F]/d[C2H3]
  J[1739] += dqdci; // dwdot[CH2F]/d[C2H3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[60];
  J[1775] -= dqdci; // dwdot[C2H3]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[1808] -= dqdci; // dwdot[CH3F]/d[C2H4]
  J[1812] += dqdci; // dwdot[CH2F]/d[C2H4]
  // d()/d[CH3F]
  dqdci = +k_f * sc[23];
  J[4111] -= dqdci; // dwdot[C2H3]/d[CH3F]
  J[4112] += dqdci; // dwdot[C2H4]/d[CH3F]
  J[4144] -= dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] += dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = -k_r * sc[24];
  J[4403] -= dqdci; // dwdot[C2H3]/d[CH2F]
  J[4404] += dqdci; // dwdot[C2H4]/d[CH2F]
  J[4436] -= dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT
  J[5312] -= dqdT; // dwdot[CH3F]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT

  // reaction 383: C2H3 + CH2F2 <=> C2H4 + CHF2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[23] * sc[57];
  k_f = 90000 * exp(-(4629.59332540342) * invT);
  dlnkfdT = (4629.59332540342) * invT2;
  // reverse
  phi_r = sc[24] * sc[61];
  Kc = exp(g_RT[23] - g_RT[24] + g_RT[57] - g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[23] + h_RT[57]) + (h_RT[24] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[23] -= q; // C2H3
  wdot[24] += q; // C2H4
  wdot[57] -= q; // CH2F2
  wdot[61] += q; // CHF2
  // d()/d[C2H3]
  dqdci = +k_f * sc[57];
  J[1702] -= dqdci; // dwdot[C2H3]/d[C2H3]
  J[1703] += dqdci; // dwdot[C2H4]/d[C2H3]
  J[1736] -= dqdci; // dwdot[CH2F2]/d[C2H3]
  J[1740] += dqdci; // dwdot[CHF2]/d[C2H3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[61];
  J[1775] -= dqdci; // dwdot[C2H3]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[1809] -= dqdci; // dwdot[CH2F2]/d[C2H4]
  J[1813] += dqdci; // dwdot[CHF2]/d[C2H4]
  // d()/d[CH2F2]
  dqdci = +k_f * sc[23];
  J[4184] -= dqdci; // dwdot[C2H3]/d[CH2F2]
  J[4185] += dqdci; // dwdot[C2H4]/d[CH2F2]
  J[4218] -= dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] += dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = -k_r * sc[24];
  J[4476] -= dqdci; // dwdot[C2H3]/d[CHF2]
  J[4477] += dqdci; // dwdot[C2H4]/d[CHF2]
  J[4510] -= dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT
  J[5313] -= dqdT; // dwdot[CH2F2]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT

  // reaction 384: C2H4 + CF3 <=> C2H3 + CHF3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[24] * sc[62];
  k_f = 800000 * exp(-(6038.59998965664) * invT);
  dlnkfdT = (6038.59998965664) * invT2;
  // reverse
  phi_r = sc[23] * sc[58];
  Kc = exp(-g_RT[23] + g_RT[24] - g_RT[58] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[24] + h_RT[62]) + (h_RT[23] + h_RT[58]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[23] += q; // C2H3
  wdot[24] -= q; // C2H4
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  // d()/d[C2H3]
  dqdci = -k_r * sc[58];
  J[1702] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[1703] -= dqdci; // dwdot[C2H4]/d[C2H3]
  J[1737] += dqdci; // dwdot[CHF3]/d[C2H3]
  J[1741] -= dqdci; // dwdot[CF3]/d[C2H3]
  // d()/d[C2H4]
  dqdci = +k_f * sc[62];
  J[1775] += dqdci; // dwdot[C2H3]/d[C2H4]
  J[1776] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[1810] += dqdci; // dwdot[CHF3]/d[C2H4]
  J[1814] -= dqdci; // dwdot[CF3]/d[C2H4]
  // d()/d[CHF3]
  dqdci = -k_r * sc[23];
  J[4257] += dqdci; // dwdot[C2H3]/d[CHF3]
  J[4258] -= dqdci; // dwdot[C2H4]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[24];
  J[4549] += dqdci; // dwdot[C2H3]/d[CF3]
  J[4550] -= dqdci; // dwdot[C2H4]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5279] += dqdT; // dwdot[C2H3]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 385: CF3 + CH3F <=> CH2F + CHF3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[56] * sc[62];
  k_f = 575000 * exp(-(5641.05882367091) * invT);
  dlnkfdT = (5641.05882367091) * invT2;
  // reverse
  phi_r = sc[58] * sc[60];
  Kc = exp(g_RT[56] - g_RT[58] - g_RT[60] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[56] + h_RT[62]) + (h_RT[58] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[56] -= q; // CH3F
  wdot[58] += q; // CHF3
  wdot[60] += q; // CH2F
  wdot[62] -= q; // CF3
  // d()/d[CH3F]
  dqdci = +k_f * sc[62];
  J[4144] -= dqdci; // dwdot[CH3F]/d[CH3F]
  J[4146] += dqdci; // dwdot[CHF3]/d[CH3F]
  J[4148] += dqdci; // dwdot[CH2F]/d[CH3F]
  J[4150] -= dqdci; // dwdot[CF3]/d[CH3F]
  // d()/d[CHF3]
  dqdci = -k_r * sc[60];
  J[4290] -= dqdci; // dwdot[CH3F]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4294] += dqdci; // dwdot[CH2F]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CH2F]
  dqdci = -k_r * sc[58];
  J[4436] -= dqdci; // dwdot[CH3F]/d[CH2F]
  J[4438] += dqdci; // dwdot[CHF3]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  J[4442] -= dqdci; // dwdot[CF3]/d[CH2F]
  // d()/d[CF3]
  dqdci = +k_f * sc[56];
  J[4582] -= dqdci; // dwdot[CH3F]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4586] += dqdci; // dwdot[CH2F]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5312] -= dqdT; // dwdot[CH3F]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 386: CH2F + CH2F2 <=> CH3F + CHF2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[57] * sc[60];
  k_f = 90000 * exp(-(7045.03332126608) * invT);
  dlnkfdT = (7045.03332126608) * invT2;
  // reverse
  phi_r = sc[56] * sc[61];
  Kc = exp(-g_RT[56] + g_RT[57] + g_RT[60] - g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[57] + h_RT[60]) + (h_RT[56] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[56] += q; // CH3F
  wdot[57] -= q; // CH2F2
  wdot[60] -= q; // CH2F
  wdot[61] += q; // CHF2
  // d()/d[CH3F]
  dqdci = -k_r * sc[61];
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4145] -= dqdci; // dwdot[CH2F2]/d[CH3F]
  J[4148] -= dqdci; // dwdot[CH2F]/d[CH3F]
  J[4149] += dqdci; // dwdot[CHF2]/d[CH3F]
  // d()/d[CH2F2]
  dqdci = +k_f * sc[60];
  J[4217] += dqdci; // dwdot[CH3F]/d[CH2F2]
  J[4218] -= dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4221] -= dqdci; // dwdot[CH2F]/d[CH2F2]
  J[4222] += dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CH2F]
  dqdci = +k_f * sc[57];
  J[4436] += dqdci; // dwdot[CH3F]/d[CH2F]
  J[4437] -= dqdci; // dwdot[CH2F2]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4441] += dqdci; // dwdot[CHF2]/d[CH2F]
  // d()/d[CHF2]
  dqdci = -k_r * sc[56];
  J[4509] += dqdci; // dwdot[CH3F]/d[CHF2]
  J[4510] -= dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4513] -= dqdci; // dwdot[CH2F]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5313] -= dqdT; // dwdot[CH2F2]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT

  // reaction 387: CF3 + CH2F2 <=> CHF2 + CHF3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[57] * sc[62];
  k_f = 427000 * exp(-(5686.34832359333) * invT);
  dlnkfdT = (5686.34832359333) * invT2;
  // reverse
  phi_r = sc[58] * sc[61];
  Kc = exp(g_RT[57] - g_RT[58] - g_RT[61] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[57] + h_RT[62]) + (h_RT[58] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[57] -= q; // CH2F2
  wdot[58] += q; // CHF3
  wdot[61] += q; // CHF2
  wdot[62] -= q; // CF3
  // d()/d[CH2F2]
  dqdci = +k_f * sc[62];
  J[4218] -= dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4219] += dqdci; // dwdot[CHF3]/d[CH2F2]
  J[4222] += dqdci; // dwdot[CHF2]/d[CH2F2]
  J[4223] -= dqdci; // dwdot[CF3]/d[CH2F2]
  // d()/d[CHF3]
  dqdci = -k_r * sc[61];
  J[4291] -= dqdci; // dwdot[CH2F2]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4295] += dqdci; // dwdot[CHF2]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CHF2]
  dqdci = -k_r * sc[58];
  J[4510] -= dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4511] += dqdci; // dwdot[CHF3]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  J[4515] -= dqdci; // dwdot[CF3]/d[CHF2]
  // d()/d[CF3]
  dqdci = +k_f * sc[57];
  J[4583] -= dqdci; // dwdot[CH2F2]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4587] += dqdci; // dwdot[CHF2]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5313] -= dqdT; // dwdot[CH2F2]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 388: CH2F + CH3OH <=> CH3F + CH3O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[60];
  k_f = 1.44e-05 * exp(3.1 * logT - (4931.52332488625) * invT);
  dlnkfdT = 3.1 * invT + (4931.52332488625) * invT2;
  // reverse
  phi_r = sc[19] * sc[56];
  Kc = exp(-g_RT[19] + g_RT[20] - g_RT[56] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[60]) + (h_RT[19] + h_RT[56]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  wdot[56] += q; // CH3F
  wdot[60] -= q; // CH2F
  // d()/d[CH3O]
  dqdci = -k_r * sc[56];
  J[1406] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[1407] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  J[1443] += dqdci; // dwdot[CH3F]/d[CH3O]
  J[1447] -= dqdci; // dwdot[CH2F]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[60];
  J[1479] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  J[1516] += dqdci; // dwdot[CH3F]/d[CH3OH]
  J[1520] -= dqdci; // dwdot[CH2F]/d[CH3OH]
  // d()/d[CH3F]
  dqdci = -k_r * sc[19];
  J[4107] += dqdci; // dwdot[CH3O]/d[CH3F]
  J[4108] -= dqdci; // dwdot[CH3OH]/d[CH3F]
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] -= dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[20];
  J[4399] += dqdci; // dwdot[CH3O]/d[CH2F]
  J[4400] -= dqdci; // dwdot[CH3OH]/d[CH2F]
  J[4436] += dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 389: CH3OH + CHF2 <=> CH2F2 + CH3O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[61];
  k_f = 1.44e-05 * exp(3.1 * logT - (4528.94999224248) * invT);
  dlnkfdT = 3.1 * invT + (4528.94999224248) * invT2;
  // reverse
  phi_r = sc[19] * sc[57];
  Kc = exp(-g_RT[19] + g_RT[20] - g_RT[57] + g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[61]) + (h_RT[19] + h_RT[57]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  wdot[57] += q; // CH2F2
  wdot[61] -= q; // CHF2
  // d()/d[CH3O]
  dqdci = -k_r * sc[57];
  J[1406] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[1407] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  J[1444] += dqdci; // dwdot[CH2F2]/d[CH3O]
  J[1448] -= dqdci; // dwdot[CHF2]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[61];
  J[1479] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  J[1517] += dqdci; // dwdot[CH2F2]/d[CH3OH]
  J[1521] -= dqdci; // dwdot[CHF2]/d[CH3OH]
  // d()/d[CH2F2]
  dqdci = -k_r * sc[19];
  J[4180] += dqdci; // dwdot[CH3O]/d[CH2F2]
  J[4181] -= dqdci; // dwdot[CH3OH]/d[CH2F2]
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] -= dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = +k_f * sc[20];
  J[4472] += dqdci; // dwdot[CH3O]/d[CHF2]
  J[4473] -= dqdci; // dwdot[CH3OH]/d[CHF2]
  J[4510] += dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT

  // reaction 390: CF3 + CH3OH <=> CH3O + CHF3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[62];
  k_f = 1.44e-05 * exp(3.1 * logT - (2767.69166192596) * invT);
  dlnkfdT = 3.1 * invT + (2767.69166192596) * invT2;
  // reverse
  phi_r = sc[19] * sc[58];
  Kc = exp(-g_RT[19] + g_RT[20] - g_RT[58] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[62]) + (h_RT[19] + h_RT[58]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  // d()/d[CH3O]
  dqdci = -k_r * sc[58];
  J[1406] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[1407] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  J[1445] += dqdci; // dwdot[CHF3]/d[CH3O]
  J[1449] -= dqdci; // dwdot[CF3]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[62];
  J[1479] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  J[1518] += dqdci; // dwdot[CHF3]/d[CH3OH]
  J[1522] -= dqdci; // dwdot[CF3]/d[CH3OH]
  // d()/d[CHF3]
  dqdci = -k_r * sc[19];
  J[4253] += dqdci; // dwdot[CH3O]/d[CHF3]
  J[4254] -= dqdci; // dwdot[CH3OH]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[20];
  J[4545] += dqdci; // dwdot[CH3O]/d[CF3]
  J[4546] -= dqdci; // dwdot[CH3OH]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 391: CH2F + CH3OH <=> CH2OH + CH3F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[60];
  k_f = 3.2e-05 * exp(3.2 * logT - (5032.1666580472) * invT);
  dlnkfdT = 3.2 * invT + (5032.1666580472) * invT2;
  // reverse
  phi_r = sc[18] * sc[56];
  Kc = exp(-g_RT[18] + g_RT[20] - g_RT[56] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[60]) + (h_RT[18] + h_RT[56]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  wdot[56] += q; // CH3F
  wdot[60] -= q; // CH2F
  // d()/d[CH2OH]
  dqdci = -k_r * sc[56];
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1334] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  J[1370] += dqdci; // dwdot[CH3F]/d[CH2OH]
  J[1374] -= dqdci; // dwdot[CH2F]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[60];
  J[1478] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  J[1516] += dqdci; // dwdot[CH3F]/d[CH3OH]
  J[1520] -= dqdci; // dwdot[CH2F]/d[CH3OH]
  // d()/d[CH3F]
  dqdci = -k_r * sc[18];
  J[4106] += dqdci; // dwdot[CH2OH]/d[CH3F]
  J[4108] -= dqdci; // dwdot[CH3OH]/d[CH3F]
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] -= dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[20];
  J[4398] += dqdci; // dwdot[CH2OH]/d[CH2F]
  J[4400] -= dqdci; // dwdot[CH3OH]/d[CH2F]
  J[4436] += dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 392: CH3OH + CHF2 <=> CH2F2 + CH2OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[61];
  k_f = 3.2e-05 * exp(3.2 * logT - (4679.91499198389) * invT);
  dlnkfdT = 3.2 * invT + (4679.91499198389) * invT2;
  // reverse
  phi_r = sc[18] * sc[57];
  Kc = exp(-g_RT[18] + g_RT[20] - g_RT[57] + g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[61]) + (h_RT[18] + h_RT[57]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  wdot[57] += q; // CH2F2
  wdot[61] -= q; // CHF2
  // d()/d[CH2OH]
  dqdci = -k_r * sc[57];
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1334] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  J[1371] += dqdci; // dwdot[CH2F2]/d[CH2OH]
  J[1375] -= dqdci; // dwdot[CHF2]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[61];
  J[1478] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  J[1517] += dqdci; // dwdot[CH2F2]/d[CH3OH]
  J[1521] -= dqdci; // dwdot[CHF2]/d[CH3OH]
  // d()/d[CH2F2]
  dqdci = -k_r * sc[18];
  J[4179] += dqdci; // dwdot[CH2OH]/d[CH2F2]
  J[4181] -= dqdci; // dwdot[CH3OH]/d[CH2F2]
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] -= dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = +k_f * sc[20];
  J[4471] += dqdci; // dwdot[CH2OH]/d[CHF2]
  J[4473] -= dqdci; // dwdot[CH3OH]/d[CHF2]
  J[4510] += dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT

  // reaction 393: CF3 + CH3OH <=> CH2OH + CHF3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[62];
  k_f = 3.2e-05 * exp(3.2 * logT - (2868.3349950869) * invT);
  dlnkfdT = 3.2 * invT + (2868.3349950869) * invT2;
  // reverse
  phi_r = sc[18] * sc[58];
  Kc = exp(-g_RT[18] + g_RT[20] - g_RT[58] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[62]) + (h_RT[18] + h_RT[58]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  // d()/d[CH2OH]
  dqdci = -k_r * sc[58];
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1334] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  J[1372] += dqdci; // dwdot[CHF3]/d[CH2OH]
  J[1376] -= dqdci; // dwdot[CF3]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[62];
  J[1478] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  J[1518] += dqdci; // dwdot[CHF3]/d[CH3OH]
  J[1522] -= dqdci; // dwdot[CF3]/d[CH3OH]
  // d()/d[CHF3]
  dqdci = -k_r * sc[18];
  J[4252] += dqdci; // dwdot[CH2OH]/d[CHF3]
  J[4254] -= dqdci; // dwdot[CH3OH]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[20];
  J[4544] += dqdci; // dwdot[CH2OH]/d[CF3]
  J[4546] -= dqdci; // dwdot[CH3OH]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 394: CH2F + CH2O <=> CH3F + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[60];
  k_f = 0.00554 * exp(2.81 * logT - (4176.69832617917) * invT);
  dlnkfdT = 2.81 * invT + (4176.69832617917) * invT2;
  // reverse
  phi_r = sc[16] * sc[56];
  Kc = exp(-g_RT[16] + g_RT[17] - g_RT[56] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[60]) + (h_RT[16] + h_RT[56]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  wdot[56] += q; // CH3F
  wdot[60] -= q; // CH2F
  // d()/d[HCO]
  dqdci = -k_r * sc[56];
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  J[1224] += dqdci; // dwdot[CH3F]/d[HCO]
  J[1228] -= dqdci; // dwdot[CH2F]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[60];
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[1297] += dqdci; // dwdot[CH3F]/d[CH2O]
  J[1301] -= dqdci; // dwdot[CH2F]/d[CH2O]
  // d()/d[CH3F]
  dqdci = -k_r * sc[16];
  J[4104] += dqdci; // dwdot[HCO]/d[CH3F]
  J[4105] -= dqdci; // dwdot[CH2O]/d[CH3F]
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] -= dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[17];
  J[4396] += dqdci; // dwdot[HCO]/d[CH2F]
  J[4397] -= dqdci; // dwdot[CH2O]/d[CH2F]
  J[4436] += dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 395: CH2O + CHF2 <=> CH2F2 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[61];
  k_f = 0.00554 * exp(2.81 * logT - (3925.08999327681) * invT);
  dlnkfdT = 2.81 * invT + (3925.08999327681) * invT2;
  // reverse
  phi_r = sc[16] * sc[57];
  Kc = exp(-g_RT[16] + g_RT[17] - g_RT[57] + g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[61]) + (h_RT[16] + h_RT[57]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  wdot[57] += q; // CH2F2
  wdot[61] -= q; // CHF2
  // d()/d[HCO]
  dqdci = -k_r * sc[57];
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  J[1225] += dqdci; // dwdot[CH2F2]/d[HCO]
  J[1229] -= dqdci; // dwdot[CHF2]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[61];
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[1298] += dqdci; // dwdot[CH2F2]/d[CH2O]
  J[1302] -= dqdci; // dwdot[CHF2]/d[CH2O]
  // d()/d[CH2F2]
  dqdci = -k_r * sc[16];
  J[4177] += dqdci; // dwdot[HCO]/d[CH2F2]
  J[4178] -= dqdci; // dwdot[CH2O]/d[CH2F2]
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] -= dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = +k_f * sc[17];
  J[4469] += dqdci; // dwdot[HCO]/d[CHF2]
  J[4470] -= dqdci; // dwdot[CH2O]/d[CHF2]
  J[4510] += dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT

  // reaction 396: CF3 + CH2O <=> CHF3 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[62];
  k_f = 0.00554 * exp(2.81 * logT - (2314.79666270171) * invT);
  dlnkfdT = 2.81 * invT + (2314.79666270171) * invT2;
  // reverse
  phi_r = sc[16] * sc[58];
  Kc = exp(-g_RT[16] + g_RT[17] - g_RT[58] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[62]) + (h_RT[16] + h_RT[58]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  // d()/d[HCO]
  dqdci = -k_r * sc[58];
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  J[1226] += dqdci; // dwdot[CHF3]/d[HCO]
  J[1230] -= dqdci; // dwdot[CF3]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[62];
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[1299] += dqdci; // dwdot[CHF3]/d[CH2O]
  J[1303] -= dqdci; // dwdot[CF3]/d[CH2O]
  // d()/d[CHF3]
  dqdci = -k_r * sc[16];
  J[4250] += dqdci; // dwdot[HCO]/d[CHF3]
  J[4251] -= dqdci; // dwdot[CH2O]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[17];
  J[4542] += dqdci; // dwdot[HCO]/d[CF3]
  J[4543] -= dqdci; // dwdot[CH2O]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 397: CH2F + HCO <=> CH3F + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[60];
  k_f = 90000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[56];
  Kc = exp(-g_RT[14] + g_RT[16] - g_RT[56] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[60]) + (h_RT[14] + h_RT[56]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  wdot[56] += q; // CH3F
  wdot[60] -= q; // CH2F
  // d()/d[CO]
  dqdci = -k_r * sc[56];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  J[1078] += dqdci; // dwdot[CH3F]/d[CO]
  J[1082] -= dqdci; // dwdot[CH2F]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[60];
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  J[1224] += dqdci; // dwdot[CH3F]/d[HCO]
  J[1228] -= dqdci; // dwdot[CH2F]/d[HCO]
  // d()/d[CH3F]
  dqdci = -k_r * sc[14];
  J[4102] += dqdci; // dwdot[CO]/d[CH3F]
  J[4104] -= dqdci; // dwdot[HCO]/d[CH3F]
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] -= dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[16];
  J[4394] += dqdci; // dwdot[CO]/d[CH2F]
  J[4396] -= dqdci; // dwdot[HCO]/d[CH2F]
  J[4436] += dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 398: CHF2 + HCO <=> CH2F2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[61];
  k_f = 90000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[57];
  Kc = exp(-g_RT[14] + g_RT[16] - g_RT[57] + g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[61]) + (h_RT[14] + h_RT[57]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  wdot[57] += q; // CH2F2
  wdot[61] -= q; // CHF2
  // d()/d[CO]
  dqdci = -k_r * sc[57];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  J[1079] += dqdci; // dwdot[CH2F2]/d[CO]
  J[1083] -= dqdci; // dwdot[CHF2]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[61];
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  J[1225] += dqdci; // dwdot[CH2F2]/d[HCO]
  J[1229] -= dqdci; // dwdot[CHF2]/d[HCO]
  // d()/d[CH2F2]
  dqdci = -k_r * sc[14];
  J[4175] += dqdci; // dwdot[CO]/d[CH2F2]
  J[4177] -= dqdci; // dwdot[HCO]/d[CH2F2]
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] -= dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = +k_f * sc[16];
  J[4467] += dqdci; // dwdot[CO]/d[CHF2]
  J[4469] -= dqdci; // dwdot[HCO]/d[CHF2]
  J[4510] += dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT

  // reaction 399: CF3 + HCO <=> CHF3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[62];
  k_f = 90000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[58];
  Kc = exp(-g_RT[14] + g_RT[16] - g_RT[58] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[62]) + (h_RT[14] + h_RT[58]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  // d()/d[CO]
  dqdci = -k_r * sc[58];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  J[1080] += dqdci; // dwdot[CHF3]/d[CO]
  J[1084] -= dqdci; // dwdot[CF3]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[62];
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  J[1226] += dqdci; // dwdot[CHF3]/d[HCO]
  J[1230] -= dqdci; // dwdot[CF3]/d[HCO]
  // d()/d[CHF3]
  dqdci = -k_r * sc[14];
  J[4248] += dqdci; // dwdot[CO]/d[CHF3]
  J[4250] -= dqdci; // dwdot[HCO]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[16];
  J[4540] += dqdci; // dwdot[CO]/d[CF3]
  J[4542] -= dqdci; // dwdot[HCO]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 400: CH2F + HCO <=> CH2CO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[60];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[28] * sc[53];
  Kc = exp(g_RT[16] - g_RT[28] - g_RT[53] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[60]) + (h_RT[28] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] -= q; // HCO
  wdot[28] += q; // CH2CO
  wdot[53] += q; // HF
  wdot[60] -= q; // CH2F
  // d()/d[HCO]
  dqdci = +k_f * sc[60];
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  J[1196] += dqdci; // dwdot[CH2CO]/d[HCO]
  J[1221] += dqdci; // dwdot[HF]/d[HCO]
  J[1228] -= dqdci; // dwdot[CH2F]/d[HCO]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[53];
  J[2060] -= dqdci; // dwdot[HCO]/d[CH2CO]
  J[2072] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[2097] += dqdci; // dwdot[HF]/d[CH2CO]
  J[2104] -= dqdci; // dwdot[CH2F]/d[CH2CO]
  // d()/d[HF]
  dqdci = -k_r * sc[28];
  J[3885] -= dqdci; // dwdot[HCO]/d[HF]
  J[3897] += dqdci; // dwdot[CH2CO]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3929] -= dqdci; // dwdot[CH2F]/d[HF]
  // d()/d[CH2F]
  dqdci = +k_f * sc[16];
  J[4396] -= dqdci; // dwdot[HCO]/d[CH2F]
  J[4408] += dqdci; // dwdot[CH2CO]/d[CH2F]
  J[4433] += dqdci; // dwdot[HF]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT
  J[5284] += dqdT; // dwdot[CH2CO]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 401: CH2F + O2 => CHFO + H + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[60];
  k_f = 2260 * exp(1.14 * logT - (14341.6749754345) * invT);
  dlnkfdT = 1.14 * invT + (14341.6749754345) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // H
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[60] -= q; // CH2F
  wdot[68] += q; // CHFO
  // d()/d[O2]
  dqdci = +k_f * sc[60];
  J[220] += dqdci; // dwdot[H]/d[O2]
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[279] -= dqdci; // dwdot[CH2F]/d[O2]
  J[287] += dqdci; // dwdot[CHFO]/d[O2]
  // d()/d[CH2F]
  dqdci = +k_f * sc[3];
  J[4381] += dqdci; // dwdot[H]/d[CH2F]
  J[4382] += dqdci; // dwdot[O]/d[CH2F]
  J[4383] -= dqdci; // dwdot[O2]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4448] += dqdci; // dwdot[CHFO]/d[CH2F]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5324] += dqdT; // dwdot[CHFO]/dT

  // reaction 402: CHF2 + O2 => CF2O + H + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[61];
  k_f = 2260 * exp(1.14 * logT - (8303.07498577788) * invT);
  dlnkfdT = 1.14 * invT + (8303.07498577788) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // H
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[61] -= q; // CHF2
  wdot[67] += q; // CF2O
  // d()/d[O2]
  dqdci = +k_f * sc[61];
  J[220] += dqdci; // dwdot[H]/d[O2]
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[280] -= dqdci; // dwdot[CHF2]/d[O2]
  J[286] += dqdci; // dwdot[CF2O]/d[O2]
  // d()/d[CHF2]
  dqdci = +k_f * sc[3];
  J[4454] += dqdci; // dwdot[H]/d[CHF2]
  J[4455] += dqdci; // dwdot[O]/d[CHF2]
  J[4456] -= dqdci; // dwdot[O2]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4520] += dqdci; // dwdot[CF2O]/d[CHF2]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 403: CF3 + O2 <=> CF3O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[62];
  k_f = 2260 * exp(1.14 * logT - (10819.1583148015) * invT);
  dlnkfdT = 1.14 * invT + (10819.1583148015) * invT2;
  // reverse
  phi_r = sc[2] * sc[66];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[62] - g_RT[66]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[62]) + (h_RT[2] + h_RT[66]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[62] -= q; // CF3
  wdot[66] += q; // CF3O
  // d()/d[O]
  dqdci = -k_r * sc[66];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[208] -= dqdci; // dwdot[CF3]/d[O]
  J[212] += dqdci; // dwdot[CF3O]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[62];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[281] -= dqdci; // dwdot[CF3]/d[O2]
  J[285] += dqdci; // dwdot[CF3O]/d[O2]
  // d()/d[CF3]
  dqdci = +k_f * sc[3];
  J[4528] += dqdci; // dwdot[O]/d[CF3]
  J[4529] -= dqdci; // dwdot[O2]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  J[4592] += dqdci; // dwdot[CF3O]/d[CF3]
  // d()/d[CF3O]
  dqdci = -k_r * sc[2];
  J[4820] += dqdci; // dwdot[O]/d[CF3O]
  J[4821] -= dqdci; // dwdot[O2]/d[CF3O]
  J[4880] -= dqdci; // dwdot[CF3]/d[CF3O]
  J[4884] += dqdci; // dwdot[CF3O]/d[CF3O]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5322] += dqdT; // dwdot[CF3O]/dT

  // reaction 404: CH2F + HO2 => CHFO + H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[60];
  k_f = 15000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // H
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[60] -= q; // CH2F
  wdot[68] += q; // CHFO
  // d()/d[HO2]
  dqdci = +k_f * sc[60];
  J[439] += dqdci; // dwdot[H]/d[HO2]
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[498] -= dqdci; // dwdot[CH2F]/d[HO2]
  J[506] += dqdci; // dwdot[CHFO]/d[HO2]
  // d()/d[CH2F]
  dqdci = +k_f * sc[6];
  J[4381] += dqdci; // dwdot[H]/d[CH2F]
  J[4384] += dqdci; // dwdot[OH]/d[CH2F]
  J[4386] -= dqdci; // dwdot[HO2]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4448] += dqdci; // dwdot[CHFO]/d[CH2F]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5324] += dqdT; // dwdot[CHFO]/dT

  // reaction 405: CHF2 + HO2 => CF2O + H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[61];
  k_f = 15000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // H
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[61] -= q; // CHF2
  wdot[67] += q; // CF2O
  // d()/d[HO2]
  dqdci = +k_f * sc[61];
  J[439] += dqdci; // dwdot[H]/d[HO2]
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[499] -= dqdci; // dwdot[CHF2]/d[HO2]
  J[505] += dqdci; // dwdot[CF2O]/d[HO2]
  // d()/d[CHF2]
  dqdci = +k_f * sc[6];
  J[4454] += dqdci; // dwdot[H]/d[CHF2]
  J[4457] += dqdci; // dwdot[OH]/d[CHF2]
  J[4459] -= dqdci; // dwdot[HO2]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4520] += dqdci; // dwdot[CF2O]/d[CHF2]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 406: CF3 + HO2 <=> CF3O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[62];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[66];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[62] - g_RT[66]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[62]) + (h_RT[4] + h_RT[66]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[62] -= q; // CF3
  wdot[66] += q; // CF3O
  // d()/d[OH]
  dqdci = -k_r * sc[66];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[298] -= dqdci; // dwdot[HO2]/d[OH]
  J[354] -= dqdci; // dwdot[CF3]/d[OH]
  J[358] += dqdci; // dwdot[CF3O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[62];
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[500] -= dqdci; // dwdot[CF3]/d[HO2]
  J[504] += dqdci; // dwdot[CF3O]/d[HO2]
  // d()/d[CF3]
  dqdci = +k_f * sc[6];
  J[4530] += dqdci; // dwdot[OH]/d[CF3]
  J[4532] -= dqdci; // dwdot[HO2]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  J[4592] += dqdci; // dwdot[CF3O]/d[CF3]
  // d()/d[CF3O]
  dqdci = -k_r * sc[4];
  J[4822] += dqdci; // dwdot[OH]/d[CF3O]
  J[4824] -= dqdci; // dwdot[HO2]/d[CF3O]
  J[4880] -= dqdci; // dwdot[CF3]/d[CF3O]
  J[4884] += dqdci; // dwdot[CF3O]/d[CF3O]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5322] += dqdT; // dwdot[CF3O]/dT

  // reaction 407: CH2F + HO2 <=> CH3F + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[60];
  k_f = 3000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[56];
  Kc = exp(-g_RT[3] + g_RT[6] - g_RT[56] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[60]) + (h_RT[3] + h_RT[56]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[6] -= q;  // HO2
  wdot[56] += q; // CH3F
  wdot[60] -= q; // CH2F
  // d()/d[O2]
  dqdci = -k_r * sc[56];
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  J[275] += dqdci; // dwdot[CH3F]/d[O2]
  J[279] -= dqdci; // dwdot[CH2F]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[60];
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[494] += dqdci; // dwdot[CH3F]/d[HO2]
  J[498] -= dqdci; // dwdot[CH2F]/d[HO2]
  // d()/d[CH3F]
  dqdci = -k_r * sc[3];
  J[4091] += dqdci; // dwdot[O2]/d[CH3F]
  J[4094] -= dqdci; // dwdot[HO2]/d[CH3F]
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] -= dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[6];
  J[4383] += dqdci; // dwdot[O2]/d[CH2F]
  J[4386] -= dqdci; // dwdot[HO2]/d[CH2F]
  J[4436] += dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 408: CHF2 + HO2 <=> CH2F2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[61];
  k_f = 3000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[57];
  Kc = exp(-g_RT[3] + g_RT[6] - g_RT[57] + g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[61]) + (h_RT[3] + h_RT[57]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[6] -= q;  // HO2
  wdot[57] += q; // CH2F2
  wdot[61] -= q; // CHF2
  // d()/d[O2]
  dqdci = -k_r * sc[57];
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  J[276] += dqdci; // dwdot[CH2F2]/d[O2]
  J[280] -= dqdci; // dwdot[CHF2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[61];
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[495] += dqdci; // dwdot[CH2F2]/d[HO2]
  J[499] -= dqdci; // dwdot[CHF2]/d[HO2]
  // d()/d[CH2F2]
  dqdci = -k_r * sc[3];
  J[4164] += dqdci; // dwdot[O2]/d[CH2F2]
  J[4167] -= dqdci; // dwdot[HO2]/d[CH2F2]
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] -= dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = +k_f * sc[6];
  J[4456] += dqdci; // dwdot[O2]/d[CHF2]
  J[4459] -= dqdci; // dwdot[HO2]/d[CHF2]
  J[4510] += dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT

  // reaction 409: CF3 + HO2 <=> CHF3 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[62];
  k_f = 2000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[58];
  Kc = exp(-g_RT[3] + g_RT[6] - g_RT[58] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[62]) + (h_RT[3] + h_RT[58]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[6] -= q;  // HO2
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  // d()/d[O2]
  dqdci = -k_r * sc[58];
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  J[277] += dqdci; // dwdot[CHF3]/d[O2]
  J[281] -= dqdci; // dwdot[CF3]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[62];
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[496] += dqdci; // dwdot[CHF3]/d[HO2]
  J[500] -= dqdci; // dwdot[CF3]/d[HO2]
  // d()/d[CHF3]
  dqdci = -k_r * sc[3];
  J[4237] += dqdci; // dwdot[O2]/d[CHF3]
  J[4240] -= dqdci; // dwdot[HO2]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[6];
  J[4529] += dqdci; // dwdot[O2]/d[CF3]
  J[4532] -= dqdci; // dwdot[HO2]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 411: CF3O + H <=> CF2O + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[66];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[53] * sc[67];
  Kc = exp(g_RT[1] - g_RT[53] + g_RT[66] - g_RT[67]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[66]) + (h_RT[53] + h_RT[67]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[66] -= q; // CF3O
  wdot[67] += q; // CF2O
  // d()/d[H]
  dqdci = +k_f * sc[66];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[139] -= dqdci; // dwdot[CF3O]/d[H]
  J[140] += dqdci; // dwdot[CF2O]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[67];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3935] -= dqdci; // dwdot[CF3O]/d[HF]
  J[3936] += dqdci; // dwdot[CF2O]/d[HF]
  // d()/d[CF3O]
  dqdci = +k_f * sc[1];
  J[4819] -= dqdci; // dwdot[H]/d[CF3O]
  J[4871] += dqdci; // dwdot[HF]/d[CF3O]
  J[4884] -= dqdci; // dwdot[CF3O]/d[CF3O]
  J[4885] += dqdci; // dwdot[CF2O]/d[CF3O]
  // d()/d[CF2O]
  dqdci = -k_r * sc[53];
  J[4892] -= dqdci; // dwdot[H]/d[CF2O]
  J[4944] += dqdci; // dwdot[HF]/d[CF2O]
  J[4957] -= dqdci; // dwdot[CF3O]/d[CF2O]
  J[4958] += dqdci; // dwdot[CF2O]/d[CF2O]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5322] -= dqdT; // dwdot[CF3O]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 412: CF3O + H2 => CF2O + H + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[66];
  k_f = 10000000 * exp(-(2516.0833290236) * invT);
  dlnkfdT = (2516.0833290236) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[53] += q; // HF
  wdot[66] -= q; // CF3O
  wdot[67] += q; // CF2O
  // d()/d[H2]
  dqdci = +k_f * sc[66];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[53] += dqdci; // dwdot[HF]/d[H2]
  J[66] -= dqdci; // dwdot[CF3O]/d[H2]
  J[67] += dqdci; // dwdot[CF2O]/d[H2]
  // d()/d[CF3O]
  dqdci = +k_f * sc[0];
  J[4818] -= dqdci; // dwdot[H2]/d[CF3O]
  J[4819] += dqdci; // dwdot[H]/d[CF3O]
  J[4871] += dqdci; // dwdot[HF]/d[CF3O]
  J[4884] -= dqdci; // dwdot[CF3O]/d[CF3O]
  J[4885] += dqdci; // dwdot[CF2O]/d[CF3O]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5322] -= dqdT; // dwdot[CF3O]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 413: CF3O + H2O => CF2O + HF + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[66];
  k_f = 10000000 * exp(-(2516.0833290236) * invT);
  dlnkfdT = (2516.0833290236) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q;  // OH
  wdot[5] -= q;  // H2O
  wdot[53] += q; // HF
  wdot[66] -= q; // CF3O
  wdot[67] += q; // CF2O
  // d()/d[H2O]
  dqdci = +k_f * sc[66];
  J[369] += dqdci; // dwdot[OH]/d[H2O]
  J[370] -= dqdci; // dwdot[H2O]/d[H2O]
  J[418] += dqdci; // dwdot[HF]/d[H2O]
  J[431] -= dqdci; // dwdot[CF3O]/d[H2O]
  J[432] += dqdci; // dwdot[CF2O]/d[H2O]
  // d()/d[CF3O]
  dqdci = +k_f * sc[5];
  J[4822] += dqdci; // dwdot[OH]/d[CF3O]
  J[4823] -= dqdci; // dwdot[H2O]/d[CF3O]
  J[4871] += dqdci; // dwdot[HF]/d[CF3O]
  J[4884] -= dqdci; // dwdot[CF3O]/d[CF3O]
  J[4885] += dqdci; // dwdot[CF2O]/d[CF3O]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5261] -= dqdT; // dwdot[H2O]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5322] -= dqdT; // dwdot[CF3O]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 414: CF3O + CH4 => CF2O + CH3 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[66];
  k_f = 8000000 * exp(-(1157.39833135086) * invT);
  dlnkfdT = (1157.39833135086) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[12] += q; // CH3
  wdot[13] -= q; // CH4
  wdot[53] += q; // HF
  wdot[66] -= q; // CF3O
  wdot[67] += q; // CF2O
  // d()/d[CH4]
  dqdci = +k_f * sc[66];
  J[961] += dqdci;  // dwdot[CH3]/d[CH4]
  J[962] -= dqdci;  // dwdot[CH4]/d[CH4]
  J[1002] += dqdci; // dwdot[HF]/d[CH4]
  J[1015] -= dqdci; // dwdot[CF3O]/d[CH4]
  J[1016] += dqdci; // dwdot[CF2O]/d[CH4]
  // d()/d[CF3O]
  dqdci = +k_f * sc[13];
  J[4830] += dqdci; // dwdot[CH3]/d[CF3O]
  J[4831] -= dqdci; // dwdot[CH4]/d[CF3O]
  J[4871] += dqdci; // dwdot[HF]/d[CF3O]
  J[4884] -= dqdci; // dwdot[CF3O]/d[CF3O]
  J[4885] += dqdci; // dwdot[CF2O]/d[CF3O]
  // d()/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5269] -= dqdT; // dwdot[CH4]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5322] -= dqdT; // dwdot[CF3O]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 415: C2H6 + CF3O => C2H5 + CF2O + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[26] * sc[66];
  k_f = 12000000 * exp(-(1157.39833135086) * invT);
  dlnkfdT = (1157.39833135086) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  wdot[53] += q; // HF
  wdot[66] -= q; // CF3O
  wdot[67] += q; // CF2O
  // d()/d[C2H6]
  dqdci = +k_f * sc[66];
  J[1923] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1924] -= dqdci; // dwdot[C2H6]/d[C2H6]
  J[1951] += dqdci; // dwdot[HF]/d[C2H6]
  J[1964] -= dqdci; // dwdot[CF3O]/d[C2H6]
  J[1965] += dqdci; // dwdot[CF2O]/d[C2H6]
  // d()/d[CF3O]
  dqdci = +k_f * sc[26];
  J[4843] += dqdci; // dwdot[C2H5]/d[CF3O]
  J[4844] -= dqdci; // dwdot[C2H6]/d[CF3O]
  J[4871] += dqdci; // dwdot[HF]/d[CF3O]
  J[4884] -= dqdci; // dwdot[CF3O]/d[CF3O]
  J[4885] += dqdci; // dwdot[CF2O]/d[CF3O]
  // d()/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5282] -= dqdT; // dwdot[C2H6]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5322] -= dqdT; // dwdot[CF3O]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 416: C2H4 + CF3O => C2H3 + CF2O + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[24] * sc[66];
  k_f = 10000000 * exp(-(2516.0833290236) * invT);
  dlnkfdT = (2516.0833290236) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[23] += q; // C2H3
  wdot[24] -= q; // C2H4
  wdot[53] += q; // HF
  wdot[66] -= q; // CF3O
  wdot[67] += q; // CF2O
  // d()/d[C2H4]
  dqdci = +k_f * sc[66];
  J[1775] += dqdci; // dwdot[C2H3]/d[C2H4]
  J[1776] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[1805] += dqdci; // dwdot[HF]/d[C2H4]
  J[1818] -= dqdci; // dwdot[CF3O]/d[C2H4]
  J[1819] += dqdci; // dwdot[CF2O]/d[C2H4]
  // d()/d[CF3O]
  dqdci = +k_f * sc[24];
  J[4841] += dqdci; // dwdot[C2H3]/d[CF3O]
  J[4842] -= dqdci; // dwdot[C2H4]/d[CF3O]
  J[4871] += dqdci; // dwdot[HF]/d[CF3O]
  J[4884] -= dqdci; // dwdot[CF3O]/d[CF3O]
  J[4885] += dqdci; // dwdot[CF2O]/d[CF3O]
  // d()/dT
  J[5279] += dqdT; // dwdot[C2H3]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5322] -= dqdT; // dwdot[CF3O]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 417: CF3O + CH2O => CF2O + HCO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[66];
  k_f = 5000000 * exp(-(2516.0833290236) * invT);
  dlnkfdT = (2516.0833290236) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  wdot[53] += q; // HF
  wdot[66] -= q; // CF3O
  wdot[67] += q; // CF2O
  // d()/d[CH2O]
  dqdci = +k_f * sc[66];
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[1294] += dqdci; // dwdot[HF]/d[CH2O]
  J[1307] -= dqdci; // dwdot[CF3O]/d[CH2O]
  J[1308] += dqdci; // dwdot[CF2O]/d[CH2O]
  // d()/d[CF3O]
  dqdci = +k_f * sc[17];
  J[4834] += dqdci; // dwdot[HCO]/d[CF3O]
  J[4835] -= dqdci; // dwdot[CH2O]/d[CF3O]
  J[4871] += dqdci; // dwdot[HF]/d[CF3O]
  J[4884] -= dqdci; // dwdot[CF3O]/d[CF3O]
  J[4885] += dqdci; // dwdot[CF2O]/d[CF3O]
  // d()/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5322] -= dqdT; // dwdot[CF3O]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 418: CF3O + HCO => CF2O + CO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[66];
  k_f = 5000000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  wdot[53] += q; // HF
  wdot[66] -= q; // CF3O
  wdot[67] += q; // CF2O
  // d()/d[HCO]
  dqdci = +k_f * sc[66];
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  J[1221] += dqdci; // dwdot[HF]/d[HCO]
  J[1234] -= dqdci; // dwdot[CF3O]/d[HCO]
  J[1235] += dqdci; // dwdot[CF2O]/d[HCO]
  // d()/d[CF3O]
  dqdci = +k_f * sc[16];
  J[4832] += dqdci; // dwdot[CO]/d[CF3O]
  J[4834] -= dqdci; // dwdot[HCO]/d[CF3O]
  J[4871] += dqdci; // dwdot[HF]/d[CF3O]
  J[4884] -= dqdci; // dwdot[CF3O]/d[CF3O]
  J[4885] += dqdci; // dwdot[CF2O]/d[CF3O]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5322] -= dqdT; // dwdot[CF3O]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 419: CHF + O2 <=> CHFO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[63];
  k_f = 20000000 * exp(-(8303.07498577788) * invT);
  dlnkfdT = (8303.07498577788) * invT2;
  // reverse
  phi_r = sc[2] * sc[68];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[63] - g_RT[68]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[63]) + (h_RT[2] + h_RT[68]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[63] -= q; // CHF
  wdot[68] += q; // CHFO
  // d()/d[O]
  dqdci = -k_r * sc[68];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[209] -= dqdci; // dwdot[CHF]/d[O]
  J[214] += dqdci; // dwdot[CHFO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[63];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[282] -= dqdci; // dwdot[CHF]/d[O2]
  J[287] += dqdci; // dwdot[CHFO]/d[O2]
  // d()/d[CHF]
  dqdci = +k_f * sc[3];
  J[4601] += dqdci; // dwdot[O]/d[CHF]
  J[4602] -= dqdci; // dwdot[O2]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  J[4667] += dqdci; // dwdot[CHFO]/d[CHF]
  // d()/d[CHFO]
  dqdci = -k_r * sc[2];
  J[4966] += dqdci; // dwdot[O]/d[CHFO]
  J[4967] -= dqdci; // dwdot[O2]/d[CHFO]
  J[5027] -= dqdci; // dwdot[CHF]/d[CHFO]
  J[5032] += dqdci; // dwdot[CHFO]/d[CHFO]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT
  J[5324] += dqdT; // dwdot[CHFO]/dT

  // reaction 420: CF2 + O2 <=> CF2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[64];
  k_f = 20000000 * exp(-(13335.2416438251) * invT);
  dlnkfdT = (13335.2416438251) * invT2;
  // reverse
  phi_r = sc[2] * sc[67];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[64] - g_RT[67]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[64]) + (h_RT[2] + h_RT[67]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[64] -= q; // CF2
  wdot[67] += q; // CF2O
  // d()/d[O]
  dqdci = -k_r * sc[67];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[210] -= dqdci; // dwdot[CF2]/d[O]
  J[213] += dqdci; // dwdot[CF2O]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[64];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[283] -= dqdci; // dwdot[CF2]/d[O2]
  J[286] += dqdci; // dwdot[CF2O]/d[O2]
  // d()/d[CF2]
  dqdci = +k_f * sc[3];
  J[4674] += dqdci; // dwdot[O]/d[CF2]
  J[4675] -= dqdci; // dwdot[O2]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  J[4739] += dqdci; // dwdot[CF2O]/d[CF2]
  // d()/d[CF2O]
  dqdci = -k_r * sc[2];
  J[4893] += dqdci; // dwdot[O]/d[CF2O]
  J[4894] -= dqdci; // dwdot[O2]/d[CF2O]
  J[4955] -= dqdci; // dwdot[CF2]/d[CF2O]
  J[4958] += dqdci; // dwdot[CF2O]/d[CF2O]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 421: CHF + O <=> CO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[63];
  k_f = 90000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[53];
  Kc = exp(g_RT[2] - g_RT[14] - g_RT[53] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[63]) + (h_RT[14] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[14] += q; // CO
  wdot[53] += q; // HF
  wdot[63] -= q; // CHF
  // d()/d[O]
  dqdci = +k_f * sc[63];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[199] += dqdci; // dwdot[HF]/d[O]
  J[209] -= dqdci; // dwdot[CHF]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc[53];
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1075] += dqdci; // dwdot[HF]/d[CO]
  J[1085] -= dqdci; // dwdot[CHF]/d[CO]
  // d()/d[HF]
  dqdci = -k_r * sc[14];
  J[3871] -= dqdci; // dwdot[O]/d[HF]
  J[3883] += dqdci; // dwdot[CO]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3932] -= dqdci; // dwdot[CHF]/d[HF]
  // d()/d[CHF]
  dqdci = +k_f * sc[2];
  J[4601] -= dqdci; // dwdot[O]/d[CHF]
  J[4613] += dqdci; // dwdot[CO]/d[CHF]
  J[4652] += dqdci; // dwdot[HF]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 422: CF2 + O <=> CFO + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[64];
  k_f = 24500000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[54] * sc[69];
  Kc = exp(g_RT[2] - g_RT[54] + g_RT[64] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[64]) + (h_RT[54] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[54] += q; // F
  wdot[64] -= q; // CF2
  wdot[69] += q; // CFO
  // d()/d[O]
  dqdci = +k_f * sc[64];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[200] += dqdci; // dwdot[F]/d[O]
  J[210] -= dqdci; // dwdot[CF2]/d[O]
  J[215] += dqdci; // dwdot[CFO]/d[O]
  // d()/d[F]
  dqdci = -k_r * sc[69];
  J[3944] -= dqdci; // dwdot[O]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[4006] -= dqdci; // dwdot[CF2]/d[F]
  J[4011] += dqdci; // dwdot[CFO]/d[F]
  // d()/d[CF2]
  dqdci = +k_f * sc[2];
  J[4674] -= dqdci; // dwdot[O]/d[CF2]
  J[4726] += dqdci; // dwdot[F]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  J[4741] += dqdci; // dwdot[CFO]/d[CF2]
  // d()/d[CFO]
  dqdci = -k_r * sc[54];
  J[5039] -= dqdci; // dwdot[O]/d[CFO]
  J[5091] += dqdci; // dwdot[F]/d[CFO]
  J[5101] -= dqdci; // dwdot[CF2]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 423: CHF + OH <=> CHFO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[63];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[68];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[63] - g_RT[68]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[63]) + (h_RT[1] + h_RT[68]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[63] -= q; // CHF
  wdot[68] += q; // CHFO
  // d()/d[H]
  dqdci = -k_r * sc[68];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[136] -= dqdci; // dwdot[CHF]/d[H]
  J[141] += dqdci; // dwdot[CHFO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[63];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[355] -= dqdci; // dwdot[CHF]/d[OH]
  J[360] += dqdci; // dwdot[CHFO]/d[OH]
  // d()/d[CHF]
  dqdci = +k_f * sc[4];
  J[4600] += dqdci; // dwdot[H]/d[CHF]
  J[4603] -= dqdci; // dwdot[OH]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  J[4667] += dqdci; // dwdot[CHFO]/d[CHF]
  // d()/d[CHFO]
  dqdci = -k_r * sc[1];
  J[4965] += dqdci; // dwdot[H]/d[CHFO]
  J[4968] -= dqdci; // dwdot[OH]/d[CHFO]
  J[5027] -= dqdci; // dwdot[CHF]/d[CHFO]
  J[5032] += dqdci; // dwdot[CHFO]/d[CHFO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT
  J[5324] += dqdT; // dwdot[CHFO]/dT

  // reaction 424: CF2 + OH <=> CF2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[64];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[67];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[64] - g_RT[67]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[64]) + (h_RT[1] + h_RT[67]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[64] -= q; // CF2
  wdot[67] += q; // CF2O
  // d()/d[H]
  dqdci = -k_r * sc[67];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[137] -= dqdci; // dwdot[CF2]/d[H]
  J[140] += dqdci; // dwdot[CF2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[64];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[356] -= dqdci; // dwdot[CF2]/d[OH]
  J[359] += dqdci; // dwdot[CF2O]/d[OH]
  // d()/d[CF2]
  dqdci = +k_f * sc[4];
  J[4673] += dqdci; // dwdot[H]/d[CF2]
  J[4676] -= dqdci; // dwdot[OH]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  J[4739] += dqdci; // dwdot[CF2O]/d[CF2]
  // d()/d[CF2O]
  dqdci = -k_r * sc[1];
  J[4892] += dqdci; // dwdot[H]/d[CF2O]
  J[4895] -= dqdci; // dwdot[OH]/d[CF2O]
  J[4955] -= dqdci; // dwdot[CF2]/d[CF2O]
  J[4958] += dqdci; // dwdot[CF2O]/d[CF2O]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 425: CHF + OH <=> HCO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[63];
  k_f = 4000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[16] * sc[53];
  Kc = exp(g_RT[4] - g_RT[16] - g_RT[53] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[63]) + (h_RT[16] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[16] += q; // HCO
  wdot[53] += q; // HF
  wdot[63] -= q; // CHF
  // d()/d[OH]
  dqdci = +k_f * sc[63];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[308] += dqdci; // dwdot[HCO]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[355] -= dqdci; // dwdot[CHF]/d[OH]
  // d()/d[HCO]
  dqdci = -k_r * sc[53];
  J[1172] -= dqdci; // dwdot[OH]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1221] += dqdci; // dwdot[HF]/d[HCO]
  J[1231] -= dqdci; // dwdot[CHF]/d[HCO]
  // d()/d[HF]
  dqdci = -k_r * sc[16];
  J[3873] -= dqdci; // dwdot[OH]/d[HF]
  J[3885] += dqdci; // dwdot[HCO]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3932] -= dqdci; // dwdot[CHF]/d[HF]
  // d()/d[CHF]
  dqdci = +k_f * sc[4];
  J[4603] -= dqdci; // dwdot[OH]/d[CHF]
  J[4615] += dqdci; // dwdot[HCO]/d[CHF]
  J[4652] += dqdci; // dwdot[HF]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 426: CF2 + OH <=> CFO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[64];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[53] * sc[69];
  Kc = exp(g_RT[4] - g_RT[53] + g_RT[64] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[64]) + (h_RT[53] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[53] += q; // HF
  wdot[64] -= q; // CF2
  wdot[69] += q; // CFO
  // d()/d[OH]
  dqdci = +k_f * sc[64];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[356] -= dqdci; // dwdot[CF2]/d[OH]
  J[361] += dqdci; // dwdot[CFO]/d[OH]
  // d()/d[HF]
  dqdci = -k_r * sc[69];
  J[3873] -= dqdci; // dwdot[OH]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3933] -= dqdci; // dwdot[CF2]/d[HF]
  J[3938] += dqdci; // dwdot[CFO]/d[HF]
  // d()/d[CF2]
  dqdci = +k_f * sc[4];
  J[4676] -= dqdci; // dwdot[OH]/d[CF2]
  J[4725] += dqdci; // dwdot[HF]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  J[4741] += dqdci; // dwdot[CFO]/d[CF2]
  // d()/d[CFO]
  dqdci = -k_r * sc[53];
  J[5041] -= dqdci; // dwdot[OH]/d[CFO]
  J[5090] += dqdci; // dwdot[HF]/d[CFO]
  J[5101] -= dqdci; // dwdot[CF2]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 427: CHF + HO2 <=> CHFO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[63];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[68];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[63] - g_RT[68]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[63]) + (h_RT[4] + h_RT[68]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[63] -= q; // CHF
  wdot[68] += q; // CHFO
  // d()/d[OH]
  dqdci = -k_r * sc[68];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[298] -= dqdci; // dwdot[HO2]/d[OH]
  J[355] -= dqdci; // dwdot[CHF]/d[OH]
  J[360] += dqdci; // dwdot[CHFO]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[63];
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[501] -= dqdci; // dwdot[CHF]/d[HO2]
  J[506] += dqdci; // dwdot[CHFO]/d[HO2]
  // d()/d[CHF]
  dqdci = +k_f * sc[6];
  J[4603] += dqdci; // dwdot[OH]/d[CHF]
  J[4605] -= dqdci; // dwdot[HO2]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  J[4667] += dqdci; // dwdot[CHFO]/d[CHF]
  // d()/d[CHFO]
  dqdci = -k_r * sc[4];
  J[4968] += dqdci; // dwdot[OH]/d[CHFO]
  J[4970] -= dqdci; // dwdot[HO2]/d[CHFO]
  J[5027] -= dqdci; // dwdot[CHF]/d[CHFO]
  J[5032] += dqdci; // dwdot[CHFO]/d[CHFO]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT
  J[5324] += dqdT; // dwdot[CHFO]/dT

  // reaction 428: CF2 + HO2 <=> CF2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[64];
  k_f = 10000000 * exp(-(1761.25833031652) * invT);
  dlnkfdT = (1761.25833031652) * invT2;
  // reverse
  phi_r = sc[4] * sc[67];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[64] - g_RT[67]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[64]) + (h_RT[4] + h_RT[67]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[64] -= q; // CF2
  wdot[67] += q; // CF2O
  // d()/d[OH]
  dqdci = -k_r * sc[67];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[298] -= dqdci; // dwdot[HO2]/d[OH]
  J[356] -= dqdci; // dwdot[CF2]/d[OH]
  J[359] += dqdci; // dwdot[CF2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[64];
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[502] -= dqdci; // dwdot[CF2]/d[HO2]
  J[505] += dqdci; // dwdot[CF2O]/d[HO2]
  // d()/d[CF2]
  dqdci = +k_f * sc[6];
  J[4676] += dqdci; // dwdot[OH]/d[CF2]
  J[4678] -= dqdci; // dwdot[HO2]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  J[4739] += dqdci; // dwdot[CF2O]/d[CF2]
  // d()/d[CF2O]
  dqdci = -k_r * sc[4];
  J[4895] += dqdci; // dwdot[OH]/d[CF2O]
  J[4897] -= dqdci; // dwdot[HO2]/d[CF2O]
  J[4955] -= dqdci; // dwdot[CF2]/d[CF2O]
  J[4958] += dqdci; // dwdot[CF2O]/d[CF2O]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 429: CHF + HO2 <=> CH2F + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[63];
  k_f = 2000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[60];
  Kc = exp(-g_RT[3] + g_RT[6] - g_RT[60] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[63]) + (h_RT[3] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[6] -= q;  // HO2
  wdot[60] += q; // CH2F
  wdot[63] -= q; // CHF
  // d()/d[O2]
  dqdci = -k_r * sc[60];
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  J[279] += dqdci; // dwdot[CH2F]/d[O2]
  J[282] -= dqdci; // dwdot[CHF]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[63];
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[498] += dqdci; // dwdot[CH2F]/d[HO2]
  J[501] -= dqdci; // dwdot[CHF]/d[HO2]
  // d()/d[CH2F]
  dqdci = -k_r * sc[3];
  J[4383] += dqdci; // dwdot[O2]/d[CH2F]
  J[4386] -= dqdci; // dwdot[HO2]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  J[4443] -= dqdci; // dwdot[CHF]/d[CH2F]
  // d()/d[CHF]
  dqdci = +k_f * sc[6];
  J[4602] += dqdci; // dwdot[O2]/d[CHF]
  J[4605] -= dqdci; // dwdot[HO2]/d[CHF]
  J[4659] += dqdci; // dwdot[CH2F]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 430: CF2 + HO2 <=> CHF2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[64];
  k_f = 2000000 * exp(-(1761.25833031652) * invT);
  dlnkfdT = (1761.25833031652) * invT2;
  // reverse
  phi_r = sc[3] * sc[61];
  Kc = exp(-g_RT[3] + g_RT[6] - g_RT[61] + g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[64]) + (h_RT[3] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[6] -= q;  // HO2
  wdot[61] += q; // CHF2
  wdot[64] -= q; // CF2
  // d()/d[O2]
  dqdci = -k_r * sc[61];
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  J[280] += dqdci; // dwdot[CHF2]/d[O2]
  J[283] -= dqdci; // dwdot[CF2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[64];
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[499] += dqdci; // dwdot[CHF2]/d[HO2]
  J[502] -= dqdci; // dwdot[CF2]/d[HO2]
  // d()/d[CHF2]
  dqdci = -k_r * sc[3];
  J[4456] += dqdci; // dwdot[O2]/d[CHF2]
  J[4459] -= dqdci; // dwdot[HO2]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  J[4517] -= dqdci; // dwdot[CF2]/d[CHF2]
  // d()/d[CF2]
  dqdci = +k_f * sc[6];
  J[4675] += dqdci; // dwdot[O2]/d[CF2]
  J[4678] -= dqdci; // dwdot[HO2]/d[CF2]
  J[4733] += dqdci; // dwdot[CHF2]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT

  // reaction 431: CHF + H2O <=> CH2O + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[63];
  k_f = 5000000 * exp(-(3270.90832773068) * invT);
  dlnkfdT = (3270.90832773068) * invT2;
  // reverse
  phi_r = sc[17] * sc[53];
  Kc = exp(g_RT[5] - g_RT[17] - g_RT[53] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[63]) + (h_RT[17] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // H2O
  wdot[17] += q; // CH2O
  wdot[53] += q; // HF
  wdot[63] -= q; // CHF
  // d()/d[H2O]
  dqdci = +k_f * sc[63];
  J[370] -= dqdci; // dwdot[H2O]/d[H2O]
  J[382] += dqdci; // dwdot[CH2O]/d[H2O]
  J[418] += dqdci; // dwdot[HF]/d[H2O]
  J[428] -= dqdci; // dwdot[CHF]/d[H2O]
  // d()/d[CH2O]
  dqdci = -k_r * sc[53];
  J[1246] -= dqdci; // dwdot[H2O]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1294] += dqdci; // dwdot[HF]/d[CH2O]
  J[1304] -= dqdci; // dwdot[CHF]/d[CH2O]
  // d()/d[HF]
  dqdci = -k_r * sc[17];
  J[3874] -= dqdci; // dwdot[H2O]/d[HF]
  J[3886] += dqdci; // dwdot[CH2O]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3932] -= dqdci; // dwdot[CHF]/d[HF]
  // d()/d[CHF]
  dqdci = +k_f * sc[5];
  J[4604] -= dqdci; // dwdot[H2O]/d[CHF]
  J[4616] += dqdci; // dwdot[CH2O]/d[CHF]
  J[4652] += dqdci; // dwdot[HF]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5261] -= dqdT; // dwdot[H2O]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 432: CF2 + H2O <=> CHFO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[64];
  k_f = 5000000 * exp(-(12580.416645118) * invT);
  dlnkfdT = (12580.416645118) * invT2;
  // reverse
  phi_r = sc[53] * sc[68];
  Kc = exp(g_RT[5] - g_RT[53] + g_RT[64] - g_RT[68]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[64]) + (h_RT[53] + h_RT[68]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // H2O
  wdot[53] += q; // HF
  wdot[64] -= q; // CF2
  wdot[68] += q; // CHFO
  // d()/d[H2O]
  dqdci = +k_f * sc[64];
  J[370] -= dqdci; // dwdot[H2O]/d[H2O]
  J[418] += dqdci; // dwdot[HF]/d[H2O]
  J[429] -= dqdci; // dwdot[CF2]/d[H2O]
  J[433] += dqdci; // dwdot[CHFO]/d[H2O]
  // d()/d[HF]
  dqdci = -k_r * sc[68];
  J[3874] -= dqdci; // dwdot[H2O]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3933] -= dqdci; // dwdot[CF2]/d[HF]
  J[3937] += dqdci; // dwdot[CHFO]/d[HF]
  // d()/d[CF2]
  dqdci = +k_f * sc[5];
  J[4677] -= dqdci; // dwdot[H2O]/d[CF2]
  J[4725] += dqdci; // dwdot[HF]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  J[4740] += dqdci; // dwdot[CHFO]/d[CF2]
  // d()/d[CHFO]
  dqdci = -k_r * sc[53];
  J[4969] -= dqdci; // dwdot[H2O]/d[CHFO]
  J[5017] += dqdci; // dwdot[HF]/d[CHFO]
  J[5028] -= dqdci; // dwdot[CF2]/d[CHFO]
  J[5032] += dqdci; // dwdot[CHFO]/d[CHFO]
  // d()/dT
  J[5261] -= dqdT; // dwdot[H2O]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT
  J[5324] += dqdT; // dwdot[CHFO]/dT

  // reaction 434: CF2 + H <=> CF + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[64];
  k_f = 39800000 * exp(-(2284.60366275343) * invT);
  dlnkfdT = (2284.60366275343) * invT2;
  // reverse
  phi_r = sc[53] * sc[65];
  Kc = exp(g_RT[1] - g_RT[53] + g_RT[64] - g_RT[65]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[64]) + (h_RT[53] + h_RT[65]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[64] -= q; // CF2
  wdot[65] += q; // CF
  // d()/d[H]
  dqdci = +k_f * sc[64];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[137] -= dqdci; // dwdot[CF2]/d[H]
  J[138] += dqdci; // dwdot[CF]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[65];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3933] -= dqdci; // dwdot[CF2]/d[HF]
  J[3934] += dqdci; // dwdot[CF]/d[HF]
  // d()/d[CF2]
  dqdci = +k_f * sc[1];
  J[4673] -= dqdci; // dwdot[H]/d[CF2]
  J[4725] += dqdci; // dwdot[HF]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  J[4737] += dqdci; // dwdot[CF]/d[CF2]
  // d()/d[CF]
  dqdci = -k_r * sc[53];
  J[4746] -= dqdci; // dwdot[H]/d[CF]
  J[4798] += dqdci; // dwdot[HF]/d[CF]
  J[4809] -= dqdci; // dwdot[CF2]/d[CF]
  J[4810] += dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT
  J[5321] += dqdT; // dwdot[CF]/dT

  // reaction 435: CH2O + CHF <=> CH2F + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[63];
  k_f = 10000000 * exp(-(7548.2499870708) * invT);
  dlnkfdT = (7548.2499870708) * invT2;
  // reverse
  phi_r = sc[16] * sc[60];
  Kc = exp(-g_RT[16] + g_RT[17] - g_RT[60] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[63]) + (h_RT[16] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  wdot[60] += q; // CH2F
  wdot[63] -= q; // CHF
  // d()/d[HCO]
  dqdci = -k_r * sc[60];
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  J[1228] += dqdci; // dwdot[CH2F]/d[HCO]
  J[1231] -= dqdci; // dwdot[CHF]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[63];
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[1301] += dqdci; // dwdot[CH2F]/d[CH2O]
  J[1304] -= dqdci; // dwdot[CHF]/d[CH2O]
  // d()/d[CH2F]
  dqdci = -k_r * sc[16];
  J[4396] += dqdci; // dwdot[HCO]/d[CH2F]
  J[4397] -= dqdci; // dwdot[CH2O]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  J[4443] -= dqdci; // dwdot[CHF]/d[CH2F]
  // d()/d[CHF]
  dqdci = +k_f * sc[17];
  J[4615] += dqdci; // dwdot[HCO]/d[CHF]
  J[4616] -= dqdci; // dwdot[CH2O]/d[CHF]
  J[4659] += dqdci; // dwdot[CH2F]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 436: CH2O + CHF <=> CH2CO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[63];
  k_f = 10000000 * exp(-(7548.2499870708) * invT);
  dlnkfdT = (7548.2499870708) * invT2;
  // reverse
  phi_r = sc[28] * sc[53];
  Kc = exp(g_RT[17] - g_RT[28] - g_RT[53] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[63]) + (h_RT[28] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[17] -= q; // CH2O
  wdot[28] += q; // CH2CO
  wdot[53] += q; // HF
  wdot[63] -= q; // CHF
  // d()/d[CH2O]
  dqdci = +k_f * sc[63];
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[1269] += dqdci; // dwdot[CH2CO]/d[CH2O]
  J[1294] += dqdci; // dwdot[HF]/d[CH2O]
  J[1304] -= dqdci; // dwdot[CHF]/d[CH2O]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[53];
  J[2061] -= dqdci; // dwdot[CH2O]/d[CH2CO]
  J[2072] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[2097] += dqdci; // dwdot[HF]/d[CH2CO]
  J[2107] -= dqdci; // dwdot[CHF]/d[CH2CO]
  // d()/d[HF]
  dqdci = -k_r * sc[28];
  J[3886] -= dqdci; // dwdot[CH2O]/d[HF]
  J[3897] += dqdci; // dwdot[CH2CO]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3932] -= dqdci; // dwdot[CHF]/d[HF]
  // d()/d[CHF]
  dqdci = +k_f * sc[17];
  J[4616] -= dqdci; // dwdot[CH2O]/d[CHF]
  J[4627] += dqdci; // dwdot[CH2CO]/d[CHF]
  J[4652] += dqdci; // dwdot[HF]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5284] += dqdT; // dwdot[CH2CO]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 437: CF2 + CH2O <=> CHF2 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[64];
  k_f = 10000000 * exp(-(20631.8832979935) * invT);
  dlnkfdT = (20631.8832979935) * invT2;
  // reverse
  phi_r = sc[16] * sc[61];
  Kc = exp(-g_RT[16] + g_RT[17] - g_RT[61] + g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[64]) + (h_RT[16] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  wdot[61] += q; // CHF2
  wdot[64] -= q; // CF2
  // d()/d[HCO]
  dqdci = -k_r * sc[61];
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  J[1229] += dqdci; // dwdot[CHF2]/d[HCO]
  J[1232] -= dqdci; // dwdot[CF2]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[64];
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[1302] += dqdci; // dwdot[CHF2]/d[CH2O]
  J[1305] -= dqdci; // dwdot[CF2]/d[CH2O]
  // d()/d[CHF2]
  dqdci = -k_r * sc[16];
  J[4469] += dqdci; // dwdot[HCO]/d[CHF2]
  J[4470] -= dqdci; // dwdot[CH2O]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  J[4517] -= dqdci; // dwdot[CF2]/d[CHF2]
  // d()/d[CF2]
  dqdci = +k_f * sc[17];
  J[4688] += dqdci; // dwdot[HCO]/d[CF2]
  J[4689] -= dqdci; // dwdot[CH2O]/d[CF2]
  J[4733] += dqdci; // dwdot[CHF2]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT

  // reaction 438: CHF + HCO <=> CH2F + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[63];
  k_f = 20000000 * exp(-(7548.2499870708) * invT);
  dlnkfdT = (7548.2499870708) * invT2;
  // reverse
  phi_r = sc[14] * sc[60];
  Kc = exp(-g_RT[14] + g_RT[16] - g_RT[60] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[63]) + (h_RT[14] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  wdot[60] += q; // CH2F
  wdot[63] -= q; // CHF
  // d()/d[CO]
  dqdci = -k_r * sc[60];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  J[1082] += dqdci; // dwdot[CH2F]/d[CO]
  J[1085] -= dqdci; // dwdot[CHF]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[63];
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  J[1228] += dqdci; // dwdot[CH2F]/d[HCO]
  J[1231] -= dqdci; // dwdot[CHF]/d[HCO]
  // d()/d[CH2F]
  dqdci = -k_r * sc[14];
  J[4394] += dqdci; // dwdot[CO]/d[CH2F]
  J[4396] -= dqdci; // dwdot[HCO]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  J[4443] -= dqdci; // dwdot[CHF]/d[CH2F]
  // d()/d[CHF]
  dqdci = +k_f * sc[16];
  J[4613] += dqdci; // dwdot[CO]/d[CHF]
  J[4615] -= dqdci; // dwdot[HCO]/d[CHF]
  J[4659] += dqdci; // dwdot[CH2F]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 439: CF2 + HCO <=> CHF2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[64];
  k_f = 20000000 * exp(-(20631.8832979935) * invT);
  dlnkfdT = (20631.8832979935) * invT2;
  // reverse
  phi_r = sc[14] * sc[61];
  Kc = exp(-g_RT[14] + g_RT[16] - g_RT[61] + g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[64]) + (h_RT[14] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  wdot[61] += q; // CHF2
  wdot[64] -= q; // CF2
  // d()/d[CO]
  dqdci = -k_r * sc[61];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  J[1083] += dqdci; // dwdot[CHF2]/d[CO]
  J[1086] -= dqdci; // dwdot[CF2]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[64];
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  J[1229] += dqdci; // dwdot[CHF2]/d[HCO]
  J[1232] -= dqdci; // dwdot[CF2]/d[HCO]
  // d()/d[CHF2]
  dqdci = -k_r * sc[14];
  J[4467] += dqdci; // dwdot[CO]/d[CHF2]
  J[4469] -= dqdci; // dwdot[HCO]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  J[4517] -= dqdci; // dwdot[CF2]/d[CHF2]
  // d()/d[CF2]
  dqdci = +k_f * sc[16];
  J[4686] += dqdci; // dwdot[CO]/d[CF2]
  J[4688] -= dqdci; // dwdot[HCO]/d[CF2]
  J[4733] += dqdci; // dwdot[CHF2]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT

  // reaction 440: CF + O2 <=> CFO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[65];
  k_f = 6620000 * exp(-(850.436165209976) * invT);
  dlnkfdT = (850.436165209976) * invT2;
  // reverse
  phi_r = sc[2] * sc[69];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[65] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[65]) + (h_RT[2] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[65] -= q; // CF
  wdot[69] += q; // CFO
  // d()/d[O]
  dqdci = -k_r * sc[69];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[211] -= dqdci; // dwdot[CF]/d[O]
  J[215] += dqdci; // dwdot[CFO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[65];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[284] -= dqdci; // dwdot[CF]/d[O2]
  J[288] += dqdci; // dwdot[CFO]/d[O2]
  // d()/d[CF]
  dqdci = +k_f * sc[3];
  J[4747] += dqdci; // dwdot[O]/d[CF]
  J[4748] -= dqdci; // dwdot[O2]/d[CF]
  J[4810] -= dqdci; // dwdot[CF]/d[CF]
  J[4814] += dqdci; // dwdot[CFO]/d[CF]
  // d()/d[CFO]
  dqdci = -k_r * sc[2];
  J[5039] += dqdci; // dwdot[O]/d[CFO]
  J[5040] -= dqdci; // dwdot[O2]/d[CFO]
  J[5102] -= dqdci; // dwdot[CF]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5321] -= dqdT; // dwdot[CF]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 441: CF + H2O <=> CHFO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[65];
  k_f = 20000000 * exp(-(8554.68331868023) * invT);
  dlnkfdT = (8554.68331868023) * invT2;
  // reverse
  phi_r = sc[1] * sc[68];
  Kc = exp(-g_RT[1] + g_RT[5] + g_RT[65] - g_RT[68]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[65]) + (h_RT[1] + h_RT[68]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[5] -= q;  // H2O
  wdot[65] -= q; // CF
  wdot[68] += q; // CHFO
  // d()/d[H]
  dqdci = -k_r * sc[68];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[78] -= dqdci;  // dwdot[H2O]/d[H]
  J[138] -= dqdci; // dwdot[CF]/d[H]
  J[141] += dqdci; // dwdot[CHFO]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * sc[65];
  J[366] += dqdci; // dwdot[H]/d[H2O]
  J[370] -= dqdci; // dwdot[H2O]/d[H2O]
  J[430] -= dqdci; // dwdot[CF]/d[H2O]
  J[433] += dqdci; // dwdot[CHFO]/d[H2O]
  // d()/d[CF]
  dqdci = +k_f * sc[5];
  J[4746] += dqdci; // dwdot[H]/d[CF]
  J[4750] -= dqdci; // dwdot[H2O]/d[CF]
  J[4810] -= dqdci; // dwdot[CF]/d[CF]
  J[4813] += dqdci; // dwdot[CHFO]/d[CF]
  // d()/d[CHFO]
  dqdci = -k_r * sc[1];
  J[4965] += dqdci; // dwdot[H]/d[CHFO]
  J[4969] -= dqdci; // dwdot[H2O]/d[CHFO]
  J[5029] -= dqdci; // dwdot[CF]/d[CHFO]
  J[5032] += dqdci; // dwdot[CHFO]/d[CHFO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5261] -= dqdT; // dwdot[H2O]/dT
  J[5321] -= dqdT; // dwdot[CF]/dT
  J[5324] += dqdT; // dwdot[CHFO]/dT

  // reaction 442: CF + H <=> C + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[65];
  k_f = 80000000 * exp(-(583.731332333475) * invT);
  dlnkfdT = (583.731332333475) * invT2;
  // reverse
  phi_r = sc[8] * sc[53];
  Kc = exp(g_RT[1] - g_RT[8] - g_RT[53] + g_RT[65]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[65]) + (h_RT[8] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[8] += q;  // C
  wdot[53] += q; // HF
  wdot[65] -= q; // CF
  // d()/d[H]
  dqdci = +k_f * sc[65];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[81] += dqdci;  // dwdot[C]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[138] -= dqdci; // dwdot[CF]/d[H]
  // d()/d[C]
  dqdci = -k_r * sc[53];
  J[585] -= dqdci; // dwdot[H]/d[C]
  J[592] += dqdci; // dwdot[C]/d[C]
  J[637] += dqdci; // dwdot[HF]/d[C]
  J[649] -= dqdci; // dwdot[CF]/d[C]
  // d()/d[HF]
  dqdci = -k_r * sc[8];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3877] += dqdci; // dwdot[C]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3934] -= dqdci; // dwdot[CF]/d[HF]
  // d()/d[CF]
  dqdci = +k_f * sc[1];
  J[4746] -= dqdci; // dwdot[H]/d[CF]
  J[4753] += dqdci; // dwdot[C]/d[CF]
  J[4798] += dqdci; // dwdot[HF]/d[CF]
  J[4810] -= dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5264] += dqdT; // dwdot[C]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5321] -= dqdT; // dwdot[CF]/dT

  // reaction 443: CF + O <=> CO + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[65];
  k_f = 80000000 * exp(-(709.535498784655) * invT);
  dlnkfdT = (709.535498784655) * invT2;
  // reverse
  phi_r = sc[14] * sc[54];
  Kc = exp(g_RT[2] - g_RT[14] - g_RT[54] + g_RT[65]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[65]) + (h_RT[14] + h_RT[54]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[14] += q; // CO
  wdot[54] += q; // F
  wdot[65] -= q; // CF
  // d()/d[O]
  dqdci = +k_f * sc[65];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[200] += dqdci; // dwdot[F]/d[O]
  J[211] -= dqdci; // dwdot[CF]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc[54];
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1076] += dqdci; // dwdot[F]/d[CO]
  J[1087] -= dqdci; // dwdot[CF]/d[CO]
  // d()/d[F]
  dqdci = -k_r * sc[14];
  J[3944] -= dqdci; // dwdot[O]/d[F]
  J[3956] += dqdci; // dwdot[CO]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[4007] -= dqdci; // dwdot[CF]/d[F]
  // d()/d[CF]
  dqdci = +k_f * sc[2];
  J[4747] -= dqdci; // dwdot[O]/d[CF]
  J[4759] += dqdci; // dwdot[CO]/d[CF]
  J[4799] += dqdci; // dwdot[F]/d[CF]
  J[4810] -= dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5321] -= dqdT; // dwdot[CF]/dT

  // reaction 444: CF + OH <=> CO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[65];
  k_f = 80000000 * exp(-(709.535498784655) * invT);
  dlnkfdT = (709.535498784655) * invT2;
  // reverse
  phi_r = sc[14] * sc[53];
  Kc = exp(g_RT[4] - g_RT[14] - g_RT[53] + g_RT[65]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[65]) + (h_RT[14] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[14] += q; // CO
  wdot[53] += q; // HF
  wdot[65] -= q; // CF
  // d()/d[OH]
  dqdci = +k_f * sc[65];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[306] += dqdci; // dwdot[CO]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[357] -= dqdci; // dwdot[CF]/d[OH]
  // d()/d[CO]
  dqdci = -k_r * sc[53];
  J[1026] -= dqdci; // dwdot[OH]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1075] += dqdci; // dwdot[HF]/d[CO]
  J[1087] -= dqdci; // dwdot[CF]/d[CO]
  // d()/d[HF]
  dqdci = -k_r * sc[14];
  J[3873] -= dqdci; // dwdot[OH]/d[HF]
  J[3883] += dqdci; // dwdot[CO]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3934] -= dqdci; // dwdot[CF]/d[HF]
  // d()/d[CF]
  dqdci = +k_f * sc[4];
  J[4749] -= dqdci; // dwdot[OH]/d[CF]
  J[4759] += dqdci; // dwdot[CO]/d[CF]
  J[4798] += dqdci; // dwdot[HF]/d[CF]
  J[4810] -= dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5321] -= dqdT; // dwdot[CF]/dT

  // reaction 445: CF + HO2 => CFO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[65];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[65] -= q; // CF
  wdot[69] += q; // CFO
  // d()/d[HO2]
  dqdci = +k_f * sc[65];
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[503] -= dqdci; // dwdot[CF]/d[HO2]
  J[507] += dqdci; // dwdot[CFO]/d[HO2]
  // d()/d[CF]
  dqdci = +k_f * sc[6];
  J[4749] += dqdci; // dwdot[OH]/d[CF]
  J[4751] -= dqdci; // dwdot[HO2]/d[CF]
  J[4810] -= dqdci; // dwdot[CF]/d[CF]
  J[4814] += dqdci; // dwdot[CFO]/d[CF]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5321] -= dqdT; // dwdot[CF]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 446: C2H4 + CF => C2H2 + CH2F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[24] * sc[65];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[22] += q; // C2H2
  wdot[24] -= q; // C2H4
  wdot[60] += q; // CH2F
  wdot[65] -= q; // CF
  // d()/d[C2H4]
  dqdci = +k_f * sc[65];
  J[1774] += dqdci; // dwdot[C2H2]/d[C2H4]
  J[1776] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[1812] += dqdci; // dwdot[CH2F]/d[C2H4]
  J[1817] -= dqdci; // dwdot[CF]/d[C2H4]
  // d()/d[CF]
  dqdci = +k_f * sc[24];
  J[4767] += dqdci; // dwdot[C2H2]/d[CF]
  J[4769] -= dqdci; // dwdot[C2H4]/d[CF]
  J[4805] += dqdci; // dwdot[CH2F]/d[CF]
  J[4810] -= dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT
  J[5321] -= dqdT; // dwdot[CF]/dT

  // reaction 447: CF + CH2O => CHF + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[65];
  k_f = 10000000 * exp(-(4025.73332643776) * invT);
  dlnkfdT = (4025.73332643776) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  wdot[63] += q; // CHF
  wdot[65] -= q; // CF
  // d()/d[CH2O]
  dqdci = +k_f * sc[65];
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[1304] += dqdci; // dwdot[CHF]/d[CH2O]
  J[1306] -= dqdci; // dwdot[CF]/d[CH2O]
  // d()/d[CF]
  dqdci = +k_f * sc[17];
  J[4761] += dqdci; // dwdot[HCO]/d[CF]
  J[4762] -= dqdci; // dwdot[CH2O]/d[CF]
  J[4808] += dqdci; // dwdot[CHF]/d[CF]
  J[4810] -= dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5319] += dqdT; // dwdot[CHF]/dT
  J[5321] -= dqdT; // dwdot[CF]/dT

  // reaction 448: CF + HCO => CHF + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[65];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  wdot[63] += q; // CHF
  wdot[65] -= q; // CF
  // d()/d[HCO]
  dqdci = +k_f * sc[65];
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  J[1231] += dqdci; // dwdot[CHF]/d[HCO]
  J[1233] -= dqdci; // dwdot[CF]/d[HCO]
  // d()/d[CF]
  dqdci = +k_f * sc[16];
  J[4759] += dqdci; // dwdot[CO]/d[CF]
  J[4761] -= dqdci; // dwdot[HCO]/d[CF]
  J[4808] += dqdci; // dwdot[CHF]/d[CF]
  J[4810] -= dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT
  J[5319] += dqdT; // dwdot[CHF]/dT
  J[5321] -= dqdT; // dwdot[CF]/dT

  // reaction 450: CFO + F <=> CF2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[54] * sc[69];
  k_f = 1000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[67];
  Kc = refCinv * exp(g_RT[54] - g_RT[67] + g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[54] + h_RT[69]) + (h_RT[67]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[54] -= q; // F
  wdot[67] += q; // CF2O
  wdot[69] -= q; // CFO
  // d()/d[F]
  dqdci = +k_f * sc[69];
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[4009] += dqdci; // dwdot[CF2O]/d[F]
  J[4011] -= dqdci; // dwdot[CFO]/d[F]
  // d()/d[CF2O]
  dqdci = -k_r;
  J[4945] -= dqdci; // dwdot[F]/d[CF2O]
  J[4958] += dqdci; // dwdot[CF2O]/d[CF2O]
  J[4960] -= dqdci; // dwdot[CFO]/d[CF2O]
  // d()/d[CFO]
  dqdci = +k_f * sc[54];
  J[5091] -= dqdci; // dwdot[F]/d[CFO]
  J[5104] += dqdci; // dwdot[CF2O]/d[CFO]
  J[5106] -= dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT
  J[5325] -= dqdT; // dwdot[CFO]/dT

  // reaction 451: CHFO + H <=> CFO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[68];
  k_f = 110 * exp(1.77 * logT - (1509.64999741416) * invT);
  dlnkfdT = 1.77 * invT + (1509.64999741416) * invT2;
  // reverse
  phi_r = sc[0] * sc[69];
  Kc = exp(-g_RT[0] + g_RT[1] + g_RT[68] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[68]) + (h_RT[0] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[68] -= q; // CHFO
  wdot[69] += q; // CFO
  // d()/d[H2]
  dqdci = -k_r * sc[69];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[68] -= dqdci; // dwdot[CHFO]/d[H2]
  J[69] += dqdci; // dwdot[CFO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[68];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[141] -= dqdci; // dwdot[CHFO]/d[H]
  J[142] += dqdci; // dwdot[CFO]/d[H]
  // d()/d[CHFO]
  dqdci = +k_f * sc[1];
  J[4964] += dqdci; // dwdot[H2]/d[CHFO]
  J[4965] -= dqdci; // dwdot[H]/d[CHFO]
  J[5032] -= dqdci; // dwdot[CHFO]/d[CHFO]
  J[5033] += dqdci; // dwdot[CFO]/d[CHFO]
  // d()/d[CFO]
  dqdci = -k_r * sc[0];
  J[5037] += dqdci; // dwdot[H2]/d[CFO]
  J[5038] -= dqdci; // dwdot[H]/d[CFO]
  J[5105] -= dqdci; // dwdot[CHFO]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5324] -= dqdT; // dwdot[CHFO]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 452: CF2O + H <=> CFO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[67];
  k_f = 24 * exp(1.88 * logT - (18065.4783023894) * invT);
  dlnkfdT = 1.88 * invT + (18065.4783023894) * invT2;
  // reverse
  phi_r = sc[53] * sc[69];
  Kc = exp(g_RT[1] - g_RT[53] + g_RT[67] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[67]) + (h_RT[53] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[67] -= q; // CF2O
  wdot[69] += q; // CFO
  // d()/d[H]
  dqdci = +k_f * sc[67];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[140] -= dqdci; // dwdot[CF2O]/d[H]
  J[142] += dqdci; // dwdot[CFO]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[69];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3936] -= dqdci; // dwdot[CF2O]/d[HF]
  J[3938] += dqdci; // dwdot[CFO]/d[HF]
  // d()/d[CF2O]
  dqdci = +k_f * sc[1];
  J[4892] -= dqdci; // dwdot[H]/d[CF2O]
  J[4944] += dqdci; // dwdot[HF]/d[CF2O]
  J[4958] -= dqdci; // dwdot[CF2O]/d[CF2O]
  J[4960] += dqdci; // dwdot[CFO]/d[CF2O]
  // d()/d[CFO]
  dqdci = -k_r * sc[53];
  J[5038] -= dqdci; // dwdot[H]/d[CFO]
  J[5090] += dqdci; // dwdot[HF]/d[CFO]
  J[5104] -= dqdci; // dwdot[CF2O]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5323] -= dqdT; // dwdot[CF2O]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 453: CF2O + H <=> CFO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[67];
  k_f = 12000 * exp(0.83 * logT - (11221.7316474452) * invT);
  dlnkfdT = 0.83 * invT + (11221.7316474452) * invT2;
  // reverse
  phi_r = sc[53] * sc[69];
  Kc = exp(g_RT[1] - g_RT[53] + g_RT[67] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[67]) + (h_RT[53] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[67] -= q; // CF2O
  wdot[69] += q; // CFO
  // d()/d[H]
  dqdci = +k_f * sc[67];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[140] -= dqdci; // dwdot[CF2O]/d[H]
  J[142] += dqdci; // dwdot[CFO]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[69];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3936] -= dqdci; // dwdot[CF2O]/d[HF]
  J[3938] += dqdci; // dwdot[CFO]/d[HF]
  // d()/d[CF2O]
  dqdci = +k_f * sc[1];
  J[4892] -= dqdci; // dwdot[H]/d[CF2O]
  J[4944] += dqdci; // dwdot[HF]/d[CF2O]
  J[4958] -= dqdci; // dwdot[CF2O]/d[CF2O]
  J[4960] += dqdci; // dwdot[CFO]/d[CF2O]
  // d()/d[CFO]
  dqdci = -k_r * sc[53];
  J[5038] -= dqdci; // dwdot[H]/d[CFO]
  J[5090] += dqdci; // dwdot[HF]/d[CFO]
  J[5104] -= dqdci; // dwdot[CF2O]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5323] -= dqdT; // dwdot[CF2O]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 454: CF2O + H <=> CFO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[67];
  k_f = 550 * exp(1.42 * logT - (9510.7949837092) * invT);
  dlnkfdT = 1.42 * invT + (9510.7949837092) * invT2;
  // reverse
  phi_r = sc[53] * sc[69];
  Kc = exp(g_RT[1] - g_RT[53] + g_RT[67] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[67]) + (h_RT[53] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[67] -= q; // CF2O
  wdot[69] += q; // CFO
  // d()/d[H]
  dqdci = +k_f * sc[67];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[140] -= dqdci; // dwdot[CF2O]/d[H]
  J[142] += dqdci; // dwdot[CFO]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[69];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3936] -= dqdci; // dwdot[CF2O]/d[HF]
  J[3938] += dqdci; // dwdot[CFO]/d[HF]
  // d()/d[CF2O]
  dqdci = +k_f * sc[1];
  J[4892] -= dqdci; // dwdot[H]/d[CF2O]
  J[4944] += dqdci; // dwdot[HF]/d[CF2O]
  J[4958] -= dqdci; // dwdot[CF2O]/d[CF2O]
  J[4960] += dqdci; // dwdot[CFO]/d[CF2O]
  // d()/d[CFO]
  dqdci = -k_r * sc[53];
  J[5038] -= dqdci; // dwdot[H]/d[CFO]
  J[5090] += dqdci; // dwdot[HF]/d[CFO]
  J[5104] -= dqdci; // dwdot[CF2O]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5323] -= dqdT; // dwdot[CF2O]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 455: CF2O + H2O => CO2 + 2 HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[67];
  k_f = 7.4e-09 * exp(3.84 * logT - (12630.7383116985) * invT);
  dlnkfdT = 3.84 * invT + (12630.7383116985) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[5] -= q;      // H2O
  wdot[15] += q;     // CO2
  wdot[53] += 2 * q; // HF
  wdot[67] -= q;     // CF2O
  // d()/d[H2O]
  dqdci = +k_f * sc[67];
  J[370] -= dqdci;     // dwdot[H2O]/d[H2O]
  J[380] += dqdci;     // dwdot[CO2]/d[H2O]
  J[418] += 2 * dqdci; // dwdot[HF]/d[H2O]
  J[432] -= dqdci;     // dwdot[CF2O]/d[H2O]
  // d()/d[CF2O]
  dqdci = +k_f * sc[5];
  J[4896] -= dqdci;     // dwdot[H2O]/d[CF2O]
  J[4906] += dqdci;     // dwdot[CO2]/d[CF2O]
  J[4944] += 2 * dqdci; // dwdot[HF]/d[CF2O]
  J[4958] -= dqdci;     // dwdot[CF2O]/d[CF2O]
  // d()/dT
  J[5261] -= dqdT;     // dwdot[H2O]/dT
  J[5271] += dqdT;     // dwdot[CO2]/dT
  J[5309] += 2 * dqdT; // dwdot[HF]/dT
  J[5323] -= dqdT;     // dwdot[CF2O]/dT

  // reaction 456: CHFO + O <=> CFO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[68];
  k_f = 9000000 * exp(-(1549.90733067854) * invT);
  dlnkfdT = (1549.90733067854) * invT2;
  // reverse
  phi_r = sc[4] * sc[69];
  Kc = exp(g_RT[2] - g_RT[4] + g_RT[68] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[68]) + (h_RT[4] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[68] -= q; // CHFO
  wdot[69] += q; // CFO
  // d()/d[O]
  dqdci = +k_f * sc[68];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[214] -= dqdci; // dwdot[CHFO]/d[O]
  J[215] += dqdci; // dwdot[CFO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[69];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[360] -= dqdci; // dwdot[CHFO]/d[OH]
  J[361] += dqdci; // dwdot[CFO]/d[OH]
  // d()/d[CHFO]
  dqdci = +k_f * sc[2];
  J[4966] -= dqdci; // dwdot[O]/d[CHFO]
  J[4968] += dqdci; // dwdot[OH]/d[CHFO]
  J[5032] -= dqdci; // dwdot[CHFO]/d[CHFO]
  J[5033] += dqdci; // dwdot[CFO]/d[CHFO]
  // d()/d[CFO]
  dqdci = -k_r * sc[4];
  J[5039] -= dqdci; // dwdot[O]/d[CFO]
  J[5041] += dqdci; // dwdot[OH]/d[CFO]
  J[5105] -= dqdci; // dwdot[CHFO]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5324] -= dqdT; // dwdot[CHFO]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 457: CHFO + OH <=> CFO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[68];
  k_f = 1720 * exp(1.18 * logT - (-224.93784961471) * invT);
  dlnkfdT = 1.18 * invT + (-224.93784961471) * invT2;
  // reverse
  phi_r = sc[5] * sc[69];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[68] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[68]) + (h_RT[5] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[68] -= q; // CHFO
  wdot[69] += q; // CFO
  // d()/d[OH]
  dqdci = +k_f * sc[68];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[360] -= dqdci; // dwdot[CHFO]/d[OH]
  J[361] += dqdci; // dwdot[CFO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[69];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[433] -= dqdci; // dwdot[CHFO]/d[H2O]
  J[434] += dqdci; // dwdot[CFO]/d[H2O]
  // d()/d[CHFO]
  dqdci = +k_f * sc[4];
  J[4968] -= dqdci; // dwdot[OH]/d[CHFO]
  J[4969] += dqdci; // dwdot[H2O]/d[CHFO]
  J[5032] -= dqdci; // dwdot[CHFO]/d[CHFO]
  J[5033] += dqdci; // dwdot[CFO]/d[CHFO]
  // d()/d[CFO]
  dqdci = -k_r * sc[5];
  J[5041] -= dqdci; // dwdot[OH]/d[CFO]
  J[5042] += dqdci; // dwdot[H2O]/d[CFO]
  J[5105] -= dqdci; // dwdot[CHFO]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5324] -= dqdT; // dwdot[CHFO]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 458: CF2O + OH => CO2 + F + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[67];
  k_f = 0.0027 * exp(2.38 * logT - (10567.5499818991) * invT);
  dlnkfdT = 2.38 * invT + (10567.5499818991) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q;  // OH
  wdot[15] += q; // CO2
  wdot[53] += q; // HF
  wdot[54] += q; // F
  wdot[67] -= q; // CF2O
  // d()/d[OH]
  dqdci = +k_f * sc[67];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[307] += dqdci; // dwdot[CO2]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[346] += dqdci; // dwdot[F]/d[OH]
  J[359] -= dqdci; // dwdot[CF2O]/d[OH]
  // d()/d[CF2O]
  dqdci = +k_f * sc[4];
  J[4895] -= dqdci; // dwdot[OH]/d[CF2O]
  J[4906] += dqdci; // dwdot[CO2]/d[CF2O]
  J[4944] += dqdci; // dwdot[HF]/d[CF2O]
  J[4945] += dqdci; // dwdot[F]/d[CF2O]
  J[4958] -= dqdci; // dwdot[CF2O]/d[CF2O]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5323] -= dqdT; // dwdot[CF2O]/dT

  // reaction 459: CFO + H2O2 <=> CHFO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[69];
  k_f = 100000 * exp(-(1962.54499663841) * invT);
  dlnkfdT = (1962.54499663841) * invT2;
  // reverse
  phi_r = sc[6] * sc[68];
  Kc = exp(-g_RT[6] + g_RT[7] - g_RT[68] + g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[69]) + (h_RT[6] + h_RT[68]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[68] += q; // CHFO
  wdot[69] -= q; // CFO
  // d()/d[HO2]
  dqdci = -k_r * sc[68];
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[506] += dqdci; // dwdot[CHFO]/d[HO2]
  J[507] -= dqdci; // dwdot[CFO]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[69];
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[579] += dqdci; // dwdot[CHFO]/d[H2O2]
  J[580] -= dqdci; // dwdot[CFO]/d[H2O2]
  // d()/d[CHFO]
  dqdci = -k_r * sc[6];
  J[4970] += dqdci; // dwdot[HO2]/d[CHFO]
  J[4971] -= dqdci; // dwdot[H2O2]/d[CHFO]
  J[5032] += dqdci; // dwdot[CHFO]/d[CHFO]
  J[5033] -= dqdci; // dwdot[CFO]/d[CHFO]
  // d()/d[CFO]
  dqdci = +k_f * sc[7];
  J[5043] += dqdci; // dwdot[HO2]/d[CFO]
  J[5044] -= dqdci; // dwdot[H2O2]/d[CFO]
  J[5105] += dqdci; // dwdot[CHFO]/d[CFO]
  J[5106] -= dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT
  J[5324] += dqdT; // dwdot[CHFO]/dT
  J[5325] -= dqdT; // dwdot[CFO]/dT

  // reaction 460: CH3 + CHFO <=> CFO + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[68];
  k_f = 2000000 * exp(-(4528.94999224248) * invT);
  dlnkfdT = (4528.94999224248) * invT2;
  // reverse
  phi_r = sc[13] * sc[69];
  Kc = exp(g_RT[12] - g_RT[13] + g_RT[68] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[68]) + (h_RT[13] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[68] -= q; // CHFO
  wdot[69] += q; // CFO
  // d()/d[CH3]
  dqdci = +k_f * sc[68];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[944] -= dqdci; // dwdot[CHFO]/d[CH3]
  J[945] += dqdci; // dwdot[CFO]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[69];
  J[961] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[962] += dqdci;  // dwdot[CH4]/d[CH4]
  J[1017] -= dqdci; // dwdot[CHFO]/d[CH4]
  J[1018] += dqdci; // dwdot[CFO]/d[CH4]
  // d()/d[CHFO]
  dqdci = +k_f * sc[12];
  J[4976] -= dqdci; // dwdot[CH3]/d[CHFO]
  J[4977] += dqdci; // dwdot[CH4]/d[CHFO]
  J[5032] -= dqdci; // dwdot[CHFO]/d[CHFO]
  J[5033] += dqdci; // dwdot[CFO]/d[CHFO]
  // d()/d[CFO]
  dqdci = -k_r * sc[13];
  J[5049] -= dqdci; // dwdot[CH3]/d[CFO]
  J[5050] += dqdci; // dwdot[CH4]/d[CFO]
  J[5105] -= dqdci; // dwdot[CHFO]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5324] -= dqdT; // dwdot[CHFO]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 461: CH2F + CHFO <=> CFO + CH3F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[60] * sc[68];
  k_f = 2000000 * exp(-(4528.94999224248) * invT);
  dlnkfdT = (4528.94999224248) * invT2;
  // reverse
  phi_r = sc[56] * sc[69];
  Kc = exp(-g_RT[56] + g_RT[60] + g_RT[68] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[60] + h_RT[68]) + (h_RT[56] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[56] += q; // CH3F
  wdot[60] -= q; // CH2F
  wdot[68] -= q; // CHFO
  wdot[69] += q; // CFO
  // d()/d[CH3F]
  dqdci = -k_r * sc[69];
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] -= dqdci; // dwdot[CH2F]/d[CH3F]
  J[4156] -= dqdci; // dwdot[CHFO]/d[CH3F]
  J[4157] += dqdci; // dwdot[CFO]/d[CH3F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[68];
  J[4436] += dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4448] -= dqdci; // dwdot[CHFO]/d[CH2F]
  J[4449] += dqdci; // dwdot[CFO]/d[CH2F]
  // d()/d[CHFO]
  dqdci = +k_f * sc[60];
  J[5020] += dqdci; // dwdot[CH3F]/d[CHFO]
  J[5024] -= dqdci; // dwdot[CH2F]/d[CHFO]
  J[5032] -= dqdci; // dwdot[CHFO]/d[CHFO]
  J[5033] += dqdci; // dwdot[CFO]/d[CHFO]
  // d()/d[CFO]
  dqdci = -k_r * sc[56];
  J[5093] += dqdci; // dwdot[CH3F]/d[CFO]
  J[5097] -= dqdci; // dwdot[CH2F]/d[CFO]
  J[5105] -= dqdci; // dwdot[CHFO]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5324] -= dqdT; // dwdot[CHFO]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 462: CHF2 + CHFO <=> CFO + CH2F2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[61] * sc[68];
  k_f = 2000000 * exp(-(4528.94999224248) * invT);
  dlnkfdT = (4528.94999224248) * invT2;
  // reverse
  phi_r = sc[57] * sc[69];
  Kc = exp(-g_RT[57] + g_RT[61] + g_RT[68] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[61] + h_RT[68]) + (h_RT[57] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[57] += q; // CH2F2
  wdot[61] -= q; // CHF2
  wdot[68] -= q; // CHFO
  wdot[69] += q; // CFO
  // d()/d[CH2F2]
  dqdci = -k_r * sc[69];
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] -= dqdci; // dwdot[CHF2]/d[CH2F2]
  J[4229] -= dqdci; // dwdot[CHFO]/d[CH2F2]
  J[4230] += dqdci; // dwdot[CFO]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = +k_f * sc[68];
  J[4510] += dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4521] -= dqdci; // dwdot[CHFO]/d[CHF2]
  J[4522] += dqdci; // dwdot[CFO]/d[CHF2]
  // d()/d[CHFO]
  dqdci = +k_f * sc[61];
  J[5021] += dqdci; // dwdot[CH2F2]/d[CHFO]
  J[5025] -= dqdci; // dwdot[CHF2]/d[CHFO]
  J[5032] -= dqdci; // dwdot[CHFO]/d[CHFO]
  J[5033] += dqdci; // dwdot[CFO]/d[CHFO]
  // d()/d[CFO]
  dqdci = -k_r * sc[57];
  J[5094] += dqdci; // dwdot[CH2F2]/d[CFO]
  J[5098] -= dqdci; // dwdot[CHF2]/d[CFO]
  J[5105] -= dqdci; // dwdot[CHFO]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5324] -= dqdT; // dwdot[CHFO]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 463: CF3 + CHFO <=> CFO + CHF3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[62] * sc[68];
  k_f = 2000000 * exp(-(4528.94999224248) * invT);
  dlnkfdT = (4528.94999224248) * invT2;
  // reverse
  phi_r = sc[58] * sc[69];
  Kc = exp(-g_RT[58] + g_RT[62] + g_RT[68] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[62] + h_RT[68]) + (h_RT[58] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  wdot[68] -= q; // CHFO
  wdot[69] += q; // CFO
  // d()/d[CHF3]
  dqdci = -k_r * sc[69];
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  J[4302] -= dqdci; // dwdot[CHFO]/d[CHF3]
  J[4303] += dqdci; // dwdot[CFO]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[68];
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  J[4594] -= dqdci; // dwdot[CHFO]/d[CF3]
  J[4595] += dqdci; // dwdot[CFO]/d[CF3]
  // d()/d[CHFO]
  dqdci = +k_f * sc[62];
  J[5022] += dqdci; // dwdot[CHF3]/d[CHFO]
  J[5026] -= dqdci; // dwdot[CF3]/d[CHFO]
  J[5032] -= dqdci; // dwdot[CHFO]/d[CHFO]
  J[5033] += dqdci; // dwdot[CFO]/d[CHFO]
  // d()/d[CFO]
  dqdci = -k_r * sc[58];
  J[5095] += dqdci; // dwdot[CHF3]/d[CFO]
  J[5099] -= dqdci; // dwdot[CF3]/d[CFO]
  J[5105] -= dqdci; // dwdot[CHFO]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5324] -= dqdT; // dwdot[CHFO]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 464: C2H3 + CHFO <=> C2H4 + CFO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[23] * sc[68];
  k_f = 2000000 * exp(-(2516.0833290236) * invT);
  dlnkfdT = (2516.0833290236) * invT2;
  // reverse
  phi_r = sc[24] * sc[69];
  Kc = exp(g_RT[23] - g_RT[24] + g_RT[68] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[23] + h_RT[68]) + (h_RT[24] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[23] -= q; // C2H3
  wdot[24] += q; // C2H4
  wdot[68] -= q; // CHFO
  wdot[69] += q; // CFO
  // d()/d[C2H3]
  dqdci = +k_f * sc[68];
  J[1702] -= dqdci; // dwdot[C2H3]/d[C2H3]
  J[1703] += dqdci; // dwdot[C2H4]/d[C2H3]
  J[1747] -= dqdci; // dwdot[CHFO]/d[C2H3]
  J[1748] += dqdci; // dwdot[CFO]/d[C2H3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[69];
  J[1775] -= dqdci; // dwdot[C2H3]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[1820] -= dqdci; // dwdot[CHFO]/d[C2H4]
  J[1821] += dqdci; // dwdot[CFO]/d[C2H4]
  // d()/d[CHFO]
  dqdci = +k_f * sc[23];
  J[4987] -= dqdci; // dwdot[C2H3]/d[CHFO]
  J[4988] += dqdci; // dwdot[C2H4]/d[CHFO]
  J[5032] -= dqdci; // dwdot[CHFO]/d[CHFO]
  J[5033] += dqdci; // dwdot[CFO]/d[CHFO]
  // d()/d[CFO]
  dqdci = -k_r * sc[24];
  J[5060] -= dqdci; // dwdot[C2H3]/d[CFO]
  J[5061] += dqdci; // dwdot[C2H4]/d[CFO]
  J[5105] -= dqdci; // dwdot[CHFO]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT
  J[5324] -= dqdT; // dwdot[CHFO]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 465: CFO + O <=> CO2 + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[69];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[15] * sc[54];
  Kc = exp(g_RT[2] - g_RT[15] - g_RT[54] + g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[69]) + (h_RT[15] + h_RT[54]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[15] += q; // CO2
  wdot[54] += q; // F
  wdot[69] -= q; // CFO
  // d()/d[O]
  dqdci = +k_f * sc[69];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[161] += dqdci; // dwdot[CO2]/d[O]
  J[200] += dqdci; // dwdot[F]/d[O]
  J[215] -= dqdci; // dwdot[CFO]/d[O]
  // d()/d[CO2]
  dqdci = -k_r * sc[54];
  J[1097] -= dqdci; // dwdot[O]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  J[1149] += dqdci; // dwdot[F]/d[CO2]
  J[1164] -= dqdci; // dwdot[CFO]/d[CO2]
  // d()/d[F]
  dqdci = -k_r * sc[15];
  J[3944] -= dqdci; // dwdot[O]/d[F]
  J[3957] += dqdci; // dwdot[CO2]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[4011] -= dqdci; // dwdot[CFO]/d[F]
  // d()/d[CFO]
  dqdci = +k_f * sc[2];
  J[5039] -= dqdci; // dwdot[O]/d[CFO]
  J[5052] += dqdci; // dwdot[CO2]/d[CFO]
  J[5091] += dqdci; // dwdot[F]/d[CFO]
  J[5106] -= dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5325] -= dqdT; // dwdot[CFO]/dT

  // reaction 466: CFO + OH <=> CO2 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[69];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[15] * sc[53];
  Kc = exp(g_RT[4] - g_RT[15] - g_RT[53] + g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[69]) + (h_RT[15] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[15] += q; // CO2
  wdot[53] += q; // HF
  wdot[69] -= q; // CFO
  // d()/d[OH]
  dqdci = +k_f * sc[69];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[307] += dqdci; // dwdot[CO2]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[361] -= dqdci; // dwdot[CFO]/d[OH]
  // d()/d[CO2]
  dqdci = -k_r * sc[53];
  J[1099] -= dqdci; // dwdot[OH]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  J[1148] += dqdci; // dwdot[HF]/d[CO2]
  J[1164] -= dqdci; // dwdot[CFO]/d[CO2]
  // d()/d[HF]
  dqdci = -k_r * sc[15];
  J[3873] -= dqdci; // dwdot[OH]/d[HF]
  J[3884] += dqdci; // dwdot[CO2]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3938] -= dqdci; // dwdot[CFO]/d[HF]
  // d()/d[CFO]
  dqdci = +k_f * sc[4];
  J[5041] -= dqdci; // dwdot[OH]/d[CFO]
  J[5052] += dqdci; // dwdot[CO2]/d[CFO]
  J[5090] += dqdci; // dwdot[HF]/d[CFO]
  J[5106] -= dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5325] -= dqdT; // dwdot[CFO]/dT

  // reaction 467: CFO + HO2 => CO2 + F + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[69];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[15] += q; // CO2
  wdot[54] += q; // F
  wdot[69] -= q; // CFO
  // d()/d[HO2]
  dqdci = +k_f * sc[69];
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[453] += dqdci; // dwdot[CO2]/d[HO2]
  J[492] += dqdci; // dwdot[F]/d[HO2]
  J[507] -= dqdci; // dwdot[CFO]/d[HO2]
  // d()/d[CFO]
  dqdci = +k_f * sc[6];
  J[5041] += dqdci; // dwdot[OH]/d[CFO]
  J[5043] -= dqdci; // dwdot[HO2]/d[CFO]
  J[5052] += dqdci; // dwdot[CO2]/d[CFO]
  J[5091] += dqdci; // dwdot[F]/d[CFO]
  J[5106] -= dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5325] -= dqdT; // dwdot[CFO]/dT

  // reaction 468: CFO + CH3 <=> CH2CO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[69];
  k_f = 27000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[28] * sc[53];
  Kc = exp(g_RT[12] - g_RT[28] - g_RT[53] + g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[69]) + (h_RT[28] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[28] += q; // CH2CO
  wdot[53] += q; // HF
  wdot[69] -= q; // CFO
  // d()/d[CH3]
  dqdci = +k_f * sc[69];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[904] += dqdci; // dwdot[CH2CO]/d[CH3]
  J[929] += dqdci; // dwdot[HF]/d[CH3]
  J[945] -= dqdci; // dwdot[CFO]/d[CH3]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[53];
  J[2056] -= dqdci; // dwdot[CH3]/d[CH2CO]
  J[2072] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[2097] += dqdci; // dwdot[HF]/d[CH2CO]
  J[2113] -= dqdci; // dwdot[CFO]/d[CH2CO]
  // d()/d[HF]
  dqdci = -k_r * sc[28];
  J[3881] -= dqdci; // dwdot[CH3]/d[HF]
  J[3897] += dqdci; // dwdot[CH2CO]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3938] -= dqdci; // dwdot[CFO]/d[HF]
  // d()/d[CFO]
  dqdci = +k_f * sc[12];
  J[5049] -= dqdci; // dwdot[CH3]/d[CFO]
  J[5065] += dqdci; // dwdot[CH2CO]/d[CFO]
  J[5090] += dqdci; // dwdot[HF]/d[CFO]
  J[5106] -= dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5284] += dqdT; // dwdot[CH2CO]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5325] -= dqdT; // dwdot[CFO]/dT

  // reaction 469: 2 CFO <=> CF2O + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[69] * sc[69]);
  k_f = 22300000 * exp(-(160.022899725901) * invT);
  dlnkfdT = (160.022899725901) * invT2;
  // reverse
  phi_r = sc[14] * sc[67];
  Kc = exp(-g_RT[14] - g_RT[67] + 2.000000 * g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[69]) + (h_RT[14] + h_RT[67]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q;     // CO
  wdot[67] += q;     // CF2O
  wdot[69] -= 2 * q; // CFO
  // d()/d[CO]
  dqdci = -k_r * sc[67];
  J[1036] += dqdci;      // dwdot[CO]/d[CO]
  J[1089] += dqdci;      // dwdot[CF2O]/d[CO]
  J[1091] += -2 * dqdci; // dwdot[CFO]/d[CO]
  // d()/d[CF2O]
  dqdci = -k_r * sc[14];
  J[4905] += dqdci;      // dwdot[CO]/d[CF2O]
  J[4958] += dqdci;      // dwdot[CF2O]/d[CF2O]
  J[4960] += -2 * dqdci; // dwdot[CFO]/d[CF2O]
  // d()/d[CFO]
  dqdci = +k_f * 2.000000 * sc[69];
  J[5051] += dqdci;      // dwdot[CO]/d[CFO]
  J[5104] += dqdci;      // dwdot[CF2O]/d[CFO]
  J[5106] += -2 * dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5270] += dqdT;      // dwdot[CO]/dT
  J[5323] += dqdT;      // dwdot[CF2O]/dT
  J[5325] += -2 * dqdT; // dwdot[CFO]/dT

  // reaction 470: CH2F + CH3 <=> C2H4 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[60];
  k_f = 18500000000000 * exp(-1.86 * logT - (941.015165054826) * invT);
  dlnkfdT = -1.86 * invT + (941.015165054826) * invT2;
  // reverse
  phi_r = sc[24] * sc[53];
  Kc = exp(g_RT[12] - g_RT[24] - g_RT[53] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[60]) + (h_RT[24] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[24] += q; // C2H4
  wdot[53] += q; // HF
  wdot[60] -= q; // CH2F
  // d()/d[CH3]
  dqdci = +k_f * sc[60];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[900] += dqdci; // dwdot[C2H4]/d[CH3]
  J[929] += dqdci; // dwdot[HF]/d[CH3]
  J[936] -= dqdci; // dwdot[CH2F]/d[CH3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[53];
  J[1764] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[1805] += dqdci; // dwdot[HF]/d[C2H4]
  J[1812] -= dqdci; // dwdot[CH2F]/d[C2H4]
  // d()/d[HF]
  dqdci = -k_r * sc[24];
  J[3881] -= dqdci; // dwdot[CH3]/d[HF]
  J[3893] += dqdci; // dwdot[C2H4]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3929] -= dqdci; // dwdot[CH2F]/d[HF]
  // d()/d[CH2F]
  dqdci = +k_f * sc[12];
  J[4392] -= dqdci; // dwdot[CH3]/d[CH2F]
  J[4404] += dqdci; // dwdot[C2H4]/d[CH2F]
  J[4433] += dqdci; // dwdot[HF]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 471: CH2(S) + CH3F <=> C2H4 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[56];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[24] * sc[53];
  Kc = exp(g_RT[11] - g_RT[24] - g_RT[53] + g_RT[56]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[56]) + (h_RT[24] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // CH2(S)
  wdot[24] += q; // C2H4
  wdot[53] += q; // HF
  wdot[56] -= q; // CH3F
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[56];
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[827] += dqdci; // dwdot[C2H4]/d[CH2(S)]
  J[856] += dqdci; // dwdot[HF]/d[CH2(S)]
  J[859] -= dqdci; // dwdot[CH3F]/d[CH2(S)]
  // d()/d[C2H4]
  dqdci = -k_r * sc[53];
  J[1763] -= dqdci; // dwdot[CH2(S)]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[1805] += dqdci; // dwdot[HF]/d[C2H4]
  J[1808] -= dqdci; // dwdot[CH3F]/d[C2H4]
  // d()/d[HF]
  dqdci = -k_r * sc[24];
  J[3880] -= dqdci; // dwdot[CH2(S)]/d[HF]
  J[3893] += dqdci; // dwdot[C2H4]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3925] -= dqdci; // dwdot[CH3F]/d[HF]
  // d()/d[CH3F]
  dqdci = +k_f * sc[11];
  J[4099] -= dqdci; // dwdot[CH2(S)]/d[CH3F]
  J[4112] += dqdci; // dwdot[C2H4]/d[CH3F]
  J[4141] += dqdci; // dwdot[HF]/d[CH3F]
  J[4144] -= dqdci; // dwdot[CH3F]/d[CH3F]
  // d()/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5312] -= dqdT; // dwdot[CH3F]/dT

  // reaction 472: CH4 + CHF <=> C2H4 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[63];
  k_f = 40000000 * exp(-(7548.2499870708) * invT);
  dlnkfdT = (7548.2499870708) * invT2;
  // reverse
  phi_r = sc[24] * sc[53];
  Kc = exp(g_RT[13] - g_RT[24] - g_RT[53] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[63]) + (h_RT[24] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] -= q; // CH4
  wdot[24] += q; // C2H4
  wdot[53] += q; // HF
  wdot[63] -= q; // CHF
  // d()/d[CH4]
  dqdci = +k_f * sc[63];
  J[962] -= dqdci;  // dwdot[CH4]/d[CH4]
  J[973] += dqdci;  // dwdot[C2H4]/d[CH4]
  J[1002] += dqdci; // dwdot[HF]/d[CH4]
  J[1012] -= dqdci; // dwdot[CHF]/d[CH4]
  // d()/d[C2H4]
  dqdci = -k_r * sc[53];
  J[1765] -= dqdci; // dwdot[CH4]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[1805] += dqdci; // dwdot[HF]/d[C2H4]
  J[1815] -= dqdci; // dwdot[CHF]/d[C2H4]
  // d()/d[HF]
  dqdci = -k_r * sc[24];
  J[3882] -= dqdci; // dwdot[CH4]/d[HF]
  J[3893] += dqdci; // dwdot[C2H4]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3932] -= dqdci; // dwdot[CHF]/d[HF]
  // d()/d[CHF]
  dqdci = +k_f * sc[13];
  J[4612] -= dqdci; // dwdot[CH4]/d[CHF]
  J[4623] += dqdci; // dwdot[C2H4]/d[CHF]
  J[4652] += dqdci; // dwdot[HF]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5269] -= dqdT; // dwdot[CH4]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 473: CH2F + CH3 <=> CH4 + CHF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[60];
  k_f = 30000000 * exp(-(1710.93666373605) * invT);
  dlnkfdT = (1710.93666373605) * invT2;
  // reverse
  phi_r = sc[13] * sc[63];
  Kc = exp(g_RT[12] - g_RT[13] + g_RT[60] - g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[60]) + (h_RT[13] + h_RT[63]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[60] -= q; // CH2F
  wdot[63] += q; // CHF
  // d()/d[CH3]
  dqdci = +k_f * sc[60];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[936] -= dqdci; // dwdot[CH2F]/d[CH3]
  J[939] += dqdci; // dwdot[CHF]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[63];
  J[961] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[962] += dqdci;  // dwdot[CH4]/d[CH4]
  J[1009] -= dqdci; // dwdot[CH2F]/d[CH4]
  J[1012] += dqdci; // dwdot[CHF]/d[CH4]
  // d()/d[CH2F]
  dqdci = +k_f * sc[12];
  J[4392] -= dqdci; // dwdot[CH3]/d[CH2F]
  J[4393] += dqdci; // dwdot[CH4]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4443] += dqdci; // dwdot[CHF]/d[CH2F]
  // d()/d[CHF]
  dqdci = -k_r * sc[13];
  J[4611] -= dqdci; // dwdot[CH3]/d[CHF]
  J[4612] += dqdci; // dwdot[CH4]/d[CHF]
  J[4659] -= dqdci; // dwdot[CH2F]/d[CHF]
  J[4662] += dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5319] += dqdT; // dwdot[CHF]/dT

  // reaction 474: 2 CH2F <=> CH3F + CHF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[60] * sc[60]);
  k_f = 30000000 * exp(-(2415.43999586265) * invT);
  dlnkfdT = (2415.43999586265) * invT2;
  // reverse
  phi_r = sc[56] * sc[63];
  Kc = exp(-g_RT[56] + 2.000000 * g_RT[60] - g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[60]) + (h_RT[56] + h_RT[63]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[56] += q;     // CH3F
  wdot[60] -= 2 * q; // CH2F
  wdot[63] += q;     // CHF
  // d()/d[CH3F]
  dqdci = -k_r * sc[63];
  J[4144] += dqdci;      // dwdot[CH3F]/d[CH3F]
  J[4148] += -2 * dqdci; // dwdot[CH2F]/d[CH3F]
  J[4151] += dqdci;      // dwdot[CHF]/d[CH3F]
  // d()/d[CH2F]
  dqdci = +k_f * 2.000000 * sc[60];
  J[4436] += dqdci;      // dwdot[CH3F]/d[CH2F]
  J[4440] += -2 * dqdci; // dwdot[CH2F]/d[CH2F]
  J[4443] += dqdci;      // dwdot[CHF]/d[CH2F]
  // d()/d[CHF]
  dqdci = -k_r * sc[56];
  J[4655] += dqdci;      // dwdot[CH3F]/d[CHF]
  J[4659] += -2 * dqdci; // dwdot[CH2F]/d[CHF]
  J[4662] += dqdci;      // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5312] += dqdT;      // dwdot[CH3F]/dT
  J[5316] += -2 * dqdT; // dwdot[CH2F]/dT
  J[5319] += dqdT;      // dwdot[CHF]/dT

  // reaction 475: CH2F + CHF2 <=> CH2F2 + CHF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[60] * sc[61];
  k_f = 10000000 * exp(-(2214.15332954077) * invT);
  dlnkfdT = (2214.15332954077) * invT2;
  // reverse
  phi_r = sc[57] * sc[63];
  Kc = exp(-g_RT[57] + g_RT[60] + g_RT[61] - g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[60] + h_RT[61]) + (h_RT[57] + h_RT[63]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[57] += q; // CH2F2
  wdot[60] -= q; // CH2F
  wdot[61] -= q; // CHF2
  wdot[63] += q; // CHF
  // d()/d[CH2F2]
  dqdci = -k_r * sc[63];
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4221] -= dqdci; // dwdot[CH2F]/d[CH2F2]
  J[4222] -= dqdci; // dwdot[CHF2]/d[CH2F2]
  J[4224] += dqdci; // dwdot[CHF]/d[CH2F2]
  // d()/d[CH2F]
  dqdci = +k_f * sc[61];
  J[4437] += dqdci; // dwdot[CH2F2]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4441] -= dqdci; // dwdot[CHF2]/d[CH2F]
  J[4443] += dqdci; // dwdot[CHF]/d[CH2F]
  // d()/d[CHF2]
  dqdci = +k_f * sc[60];
  J[4510] += dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4513] -= dqdci; // dwdot[CH2F]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4516] += dqdci; // dwdot[CHF]/d[CHF2]
  // d()/d[CHF]
  dqdci = -k_r * sc[57];
  J[4656] += dqdci; // dwdot[CH2F2]/d[CHF]
  J[4659] -= dqdci; // dwdot[CH2F]/d[CHF]
  J[4660] -= dqdci; // dwdot[CHF2]/d[CHF]
  J[4662] += dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5319] += dqdT; // dwdot[CHF]/dT

  // reaction 476: CF3 + CH2F <=> CHF + CHF3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[60] * sc[62];
  k_f = 30000000 * exp(-(2314.79666270171) * invT);
  dlnkfdT = (2314.79666270171) * invT2;
  // reverse
  phi_r = sc[58] * sc[63];
  Kc = exp(-g_RT[58] + g_RT[60] + g_RT[62] - g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[60] + h_RT[62]) + (h_RT[58] + h_RT[63]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[58] += q; // CHF3
  wdot[60] -= q; // CH2F
  wdot[62] -= q; // CF3
  wdot[63] += q; // CHF
  // d()/d[CHF3]
  dqdci = -k_r * sc[63];
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4294] -= dqdci; // dwdot[CH2F]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  J[4297] += dqdci; // dwdot[CHF]/d[CHF3]
  // d()/d[CH2F]
  dqdci = +k_f * sc[62];
  J[4438] += dqdci; // dwdot[CHF3]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4442] -= dqdci; // dwdot[CF3]/d[CH2F]
  J[4443] += dqdci; // dwdot[CHF]/d[CH2F]
  // d()/d[CF3]
  dqdci = +k_f * sc[60];
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4586] -= dqdci; // dwdot[CH2F]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  J[4589] += dqdci; // dwdot[CHF]/d[CF3]
  // d()/d[CHF]
  dqdci = -k_r * sc[58];
  J[4657] += dqdci; // dwdot[CHF3]/d[CHF]
  J[4659] -= dqdci; // dwdot[CH2F]/d[CHF]
  J[4661] -= dqdci; // dwdot[CF3]/d[CHF]
  J[4662] += dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5319] += dqdT; // dwdot[CHF]/dT

  // reaction 477: CH3 + CHF2 <=> CF2 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[61];
  k_f = 25000000 * exp(-(402.573332643776) * invT);
  dlnkfdT = (402.573332643776) * invT2;
  // reverse
  phi_r = sc[13] * sc[64];
  Kc = exp(g_RT[12] - g_RT[13] + g_RT[61] - g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[61]) + (h_RT[13] + h_RT[64]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[61] -= q; // CHF2
  wdot[64] += q; // CF2
  // d()/d[CH3]
  dqdci = +k_f * sc[61];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[937] -= dqdci; // dwdot[CHF2]/d[CH3]
  J[940] += dqdci; // dwdot[CF2]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[64];
  J[961] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[962] += dqdci;  // dwdot[CH4]/d[CH4]
  J[1010] -= dqdci; // dwdot[CHF2]/d[CH4]
  J[1013] += dqdci; // dwdot[CF2]/d[CH4]
  // d()/d[CHF2]
  dqdci = +k_f * sc[12];
  J[4465] -= dqdci; // dwdot[CH3]/d[CHF2]
  J[4466] += dqdci; // dwdot[CH4]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4517] += dqdci; // dwdot[CF2]/d[CHF2]
  // d()/d[CF2]
  dqdci = -k_r * sc[13];
  J[4684] -= dqdci; // dwdot[CH3]/d[CF2]
  J[4685] += dqdci; // dwdot[CH4]/d[CF2]
  J[4733] -= dqdci; // dwdot[CHF2]/d[CF2]
  J[4736] += dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5320] += dqdT; // dwdot[CF2]/dT

  // reaction 478: CH2F + CHF2 <=> CF2 + CH3F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[60] * sc[61];
  k_f = 30000000 * exp(-(1107.07666477038) * invT);
  dlnkfdT = (1107.07666477038) * invT2;
  // reverse
  phi_r = sc[56] * sc[64];
  Kc = exp(-g_RT[56] + g_RT[60] + g_RT[61] - g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[60] + h_RT[61]) + (h_RT[56] + h_RT[64]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[56] += q; // CH3F
  wdot[60] -= q; // CH2F
  wdot[61] -= q; // CHF2
  wdot[64] += q; // CF2
  // d()/d[CH3F]
  dqdci = -k_r * sc[64];
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] -= dqdci; // dwdot[CH2F]/d[CH3F]
  J[4149] -= dqdci; // dwdot[CHF2]/d[CH3F]
  J[4152] += dqdci; // dwdot[CF2]/d[CH3F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[61];
  J[4436] += dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4441] -= dqdci; // dwdot[CHF2]/d[CH2F]
  J[4444] += dqdci; // dwdot[CF2]/d[CH2F]
  // d()/d[CHF2]
  dqdci = +k_f * sc[60];
  J[4509] += dqdci; // dwdot[CH3F]/d[CHF2]
  J[4513] -= dqdci; // dwdot[CH2F]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4517] += dqdci; // dwdot[CF2]/d[CHF2]
  // d()/d[CF2]
  dqdci = -k_r * sc[56];
  J[4728] += dqdci; // dwdot[CH3F]/d[CF2]
  J[4732] -= dqdci; // dwdot[CH2F]/d[CF2]
  J[4733] -= dqdci; // dwdot[CHF2]/d[CF2]
  J[4736] += dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5320] += dqdT; // dwdot[CF2]/dT

  // reaction 479: 2 CHF2 <=> CF2 + CH2F2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[61] * sc[61]);
  k_f = 30000000 * exp(-(805.146665287552) * invT);
  dlnkfdT = (805.146665287552) * invT2;
  // reverse
  phi_r = sc[57] * sc[64];
  Kc = exp(-g_RT[57] + 2.000000 * g_RT[61] - g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[61]) + (h_RT[57] + h_RT[64]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[57] += q;     // CH2F2
  wdot[61] -= 2 * q; // CHF2
  wdot[64] += q;     // CF2
  // d()/d[CH2F2]
  dqdci = -k_r * sc[64];
  J[4218] += dqdci;      // dwdot[CH2F2]/d[CH2F2]
  J[4222] += -2 * dqdci; // dwdot[CHF2]/d[CH2F2]
  J[4225] += dqdci;      // dwdot[CF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = +k_f * 2.000000 * sc[61];
  J[4510] += dqdci;      // dwdot[CH2F2]/d[CHF2]
  J[4514] += -2 * dqdci; // dwdot[CHF2]/d[CHF2]
  J[4517] += dqdci;      // dwdot[CF2]/d[CHF2]
  // d()/d[CF2]
  dqdci = -k_r * sc[57];
  J[4729] += dqdci;      // dwdot[CH2F2]/d[CF2]
  J[4733] += -2 * dqdci; // dwdot[CHF2]/d[CF2]
  J[4736] += dqdci;      // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5313] += dqdT;      // dwdot[CH2F2]/dT
  J[5317] += -2 * dqdT; // dwdot[CHF2]/dT
  J[5320] += dqdT;      // dwdot[CF2]/dT

  // reaction 480: CF3 + CHF2 <=> CF2 + CHF3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[61] * sc[62];
  k_f = 30000000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[58] * sc[64];
  Kc = exp(-g_RT[58] + g_RT[61] + g_RT[62] - g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[61] + h_RT[62]) + (h_RT[58] + h_RT[64]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[58] += q; // CHF3
  wdot[61] -= q; // CHF2
  wdot[62] -= q; // CF3
  wdot[64] += q; // CF2
  // d()/d[CHF3]
  dqdci = -k_r * sc[64];
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4295] -= dqdci; // dwdot[CHF2]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  J[4298] += dqdci; // dwdot[CF2]/d[CHF3]
  // d()/d[CHF2]
  dqdci = +k_f * sc[62];
  J[4511] += dqdci; // dwdot[CHF3]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4515] -= dqdci; // dwdot[CF3]/d[CHF2]
  J[4517] += dqdci; // dwdot[CF2]/d[CHF2]
  // d()/d[CF3]
  dqdci = +k_f * sc[61];
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4587] -= dqdci; // dwdot[CHF2]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  J[4590] += dqdci; // dwdot[CF2]/d[CF3]
  // d()/d[CF2]
  dqdci = -k_r * sc[58];
  J[4730] += dqdci; // dwdot[CHF3]/d[CF2]
  J[4733] -= dqdci; // dwdot[CHF2]/d[CF2]
  J[4734] -= dqdci; // dwdot[CF3]/d[CF2]
  J[4736] += dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5320] += dqdT; // dwdot[CF2]/dT

  // reaction 481: CH2(S) + CHF <=> C2H2 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[63];
  k_f = 170200000000000 * exp(-2.12 * logT - (1197.65566461523) * invT);
  dlnkfdT = -2.12 * invT + (1197.65566461523) * invT2;
  // reverse
  phi_r = sc[22] * sc[53];
  Kc = exp(g_RT[11] - g_RT[22] - g_RT[53] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[63]) + (h_RT[22] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // CH2(S)
  wdot[22] += q; // C2H2
  wdot[53] += q; // HF
  wdot[63] -= q; // CHF
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[63];
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[825] += dqdci; // dwdot[C2H2]/d[CH2(S)]
  J[856] += dqdci; // dwdot[HF]/d[CH2(S)]
  J[866] -= dqdci; // dwdot[CHF]/d[CH2(S)]
  // d()/d[C2H2]
  dqdci = -k_r * sc[53];
  J[1617] -= dqdci; // dwdot[CH2(S)]/d[C2H2]
  J[1628] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[1659] += dqdci; // dwdot[HF]/d[C2H2]
  J[1669] -= dqdci; // dwdot[CHF]/d[C2H2]
  // d()/d[HF]
  dqdci = -k_r * sc[22];
  J[3880] -= dqdci; // dwdot[CH2(S)]/d[HF]
  J[3891] += dqdci; // dwdot[C2H2]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3932] -= dqdci; // dwdot[CHF]/d[HF]
  // d()/d[CHF]
  dqdci = +k_f * sc[11];
  J[4610] -= dqdci; // dwdot[CH2(S)]/d[CHF]
  J[4621] += dqdci; // dwdot[C2H2]/d[CHF]
  J[4652] += dqdci; // dwdot[HF]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 482: CH2 + CH2F <=> C2H4 + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[60];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[24] * sc[54];
  Kc = exp(g_RT[10] - g_RT[24] - g_RT[54] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[60]) + (h_RT[24] + h_RT[54]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // CH2
  wdot[24] += q; // C2H4
  wdot[54] += q; // F
  wdot[60] -= q; // CH2F
  // d()/d[CH2]
  dqdci = +k_f * sc[60];
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[754] += dqdci; // dwdot[C2H4]/d[CH2]
  J[784] += dqdci; // dwdot[F]/d[CH2]
  J[790] -= dqdci; // dwdot[CH2F]/d[CH2]
  // d()/d[C2H4]
  dqdci = -k_r * sc[54];
  J[1762] -= dqdci; // dwdot[CH2]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[1806] += dqdci; // dwdot[F]/d[C2H4]
  J[1812] -= dqdci; // dwdot[CH2F]/d[C2H4]
  // d()/d[F]
  dqdci = -k_r * sc[24];
  J[3952] -= dqdci; // dwdot[CH2]/d[F]
  J[3966] += dqdci; // dwdot[C2H4]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[4002] -= dqdci; // dwdot[CH2F]/d[F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[10];
  J[4390] -= dqdci; // dwdot[CH2]/d[CH2F]
  J[4404] += dqdci; // dwdot[C2H4]/d[CH2F]
  J[4434] += dqdci; // dwdot[F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 483: CH2(S) + CH2F <=> C2H4 + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[60];
  k_f = 2000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[24] * sc[54];
  Kc = exp(g_RT[11] - g_RT[24] - g_RT[54] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[60]) + (h_RT[24] + h_RT[54]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // CH2(S)
  wdot[24] += q; // C2H4
  wdot[54] += q; // F
  wdot[60] -= q; // CH2F
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[60];
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[827] += dqdci; // dwdot[C2H4]/d[CH2(S)]
  J[857] += dqdci; // dwdot[F]/d[CH2(S)]
  J[863] -= dqdci; // dwdot[CH2F]/d[CH2(S)]
  // d()/d[C2H4]
  dqdci = -k_r * sc[54];
  J[1763] -= dqdci; // dwdot[CH2(S)]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[1806] += dqdci; // dwdot[F]/d[C2H4]
  J[1812] -= dqdci; // dwdot[CH2F]/d[C2H4]
  // d()/d[F]
  dqdci = -k_r * sc[24];
  J[3953] -= dqdci; // dwdot[CH2(S)]/d[F]
  J[3966] += dqdci; // dwdot[C2H4]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[4002] -= dqdci; // dwdot[CH2F]/d[F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[11];
  J[4391] -= dqdci; // dwdot[CH2(S)]/d[CH2F]
  J[4404] += dqdci; // dwdot[C2H4]/d[CH2F]
  J[4434] += dqdci; // dwdot[F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 484: F + HCCO <=> CHF + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[27] * sc[54];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[63];
  Kc = exp(-g_RT[14] + g_RT[27] + g_RT[54] - g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[27] + h_RT[54]) + (h_RT[14] + h_RT[63]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[27] -= q; // HCCO
  wdot[54] -= q; // F
  wdot[63] += q; // CHF
  // d()/d[CO]
  dqdci = -k_r * sc[63];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1049] -= dqdci; // dwdot[HCCO]/d[CO]
  J[1076] -= dqdci; // dwdot[F]/d[CO]
  J[1085] += dqdci; // dwdot[CHF]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[54];
  J[1985] += dqdci; // dwdot[CO]/d[HCCO]
  J[1998] -= dqdci; // dwdot[HCCO]/d[HCCO]
  J[2025] -= dqdci; // dwdot[F]/d[HCCO]
  J[2034] += dqdci; // dwdot[CHF]/d[HCCO]
  // d()/d[F]
  dqdci = +k_f * sc[27];
  J[3956] += dqdci; // dwdot[CO]/d[F]
  J[3969] -= dqdci; // dwdot[HCCO]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[4005] += dqdci; // dwdot[CHF]/d[F]
  // d()/d[CHF]
  dqdci = -k_r * sc[14];
  J[4613] += dqdci; // dwdot[CO]/d[CHF]
  J[4626] -= dqdci; // dwdot[HCCO]/d[CHF]
  J[4653] -= dqdci; // dwdot[F]/d[CHF]
  J[4662] += dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5283] -= dqdT; // dwdot[HCCO]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5319] += dqdT; // dwdot[CHF]/dT

  // reaction 485: CH4 + F <=> CH3 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[54];
  k_f = 5900000 * exp(0.5 * logT - (226.447499612124) * invT);
  dlnkfdT = 0.5 * invT + (226.447499612124) * invT2;
  // reverse
  phi_r = sc[12] * sc[53];
  Kc = exp(-g_RT[12] + g_RT[13] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[54]) + (h_RT[12] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // CH3
  wdot[13] -= q; // CH4
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[CH3]
  dqdci = -k_r * sc[53];
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[889] -= dqdci; // dwdot[CH4]/d[CH3]
  J[929] += dqdci; // dwdot[HF]/d[CH3]
  J[930] -= dqdci; // dwdot[F]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[54];
  J[961] += dqdci;  // dwdot[CH3]/d[CH4]
  J[962] -= dqdci;  // dwdot[CH4]/d[CH4]
  J[1002] += dqdci; // dwdot[HF]/d[CH4]
  J[1003] -= dqdci; // dwdot[F]/d[CH4]
  // d()/d[HF]
  dqdci = -k_r * sc[12];
  J[3881] += dqdci; // dwdot[CH3]/d[HF]
  J[3882] -= dqdci; // dwdot[CH4]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[13];
  J[3954] += dqdci; // dwdot[CH3]/d[F]
  J[3955] -= dqdci; // dwdot[CH4]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5269] -= dqdT; // dwdot[CH4]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 486: CH3F + F <=> CH2F + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[54] * sc[56];
  k_f = 135000000 * exp(-(603.859998965664) * invT);
  dlnkfdT = (603.859998965664) * invT2;
  // reverse
  phi_r = sc[53] * sc[60];
  Kc = exp(-g_RT[53] + g_RT[54] + g_RT[56] - g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[54] + h_RT[56]) + (h_RT[53] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  wdot[56] -= q; // CH3F
  wdot[60] += q; // CH2F
  // d()/d[HF]
  dqdci = -k_r * sc[60];
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  J[3925] -= dqdci; // dwdot[CH3F]/d[HF]
  J[3929] += dqdci; // dwdot[CH2F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[56];
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[3998] -= dqdci; // dwdot[CH3F]/d[F]
  J[4002] += dqdci; // dwdot[CH2F]/d[F]
  // d()/d[CH3F]
  dqdci = +k_f * sc[54];
  J[4141] += dqdci; // dwdot[HF]/d[CH3F]
  J[4142] -= dqdci; // dwdot[F]/d[CH3F]
  J[4144] -= dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] += dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = -k_r * sc[53];
  J[4433] += dqdci; // dwdot[HF]/d[CH2F]
  J[4434] -= dqdci; // dwdot[F]/d[CH2F]
  J[4436] -= dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5312] -= dqdT; // dwdot[CH3F]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT

  // reaction 487: CH2F2 + F <=> CHF2 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[54] * sc[57];
  k_f = 90000000 * exp(-(930.950831738731) * invT);
  dlnkfdT = (930.950831738731) * invT2;
  // reverse
  phi_r = sc[53] * sc[61];
  Kc = exp(-g_RT[53] + g_RT[54] + g_RT[57] - g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[54] + h_RT[57]) + (h_RT[53] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  wdot[57] -= q; // CH2F2
  wdot[61] += q; // CHF2
  // d()/d[HF]
  dqdci = -k_r * sc[61];
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  J[3926] -= dqdci; // dwdot[CH2F2]/d[HF]
  J[3930] += dqdci; // dwdot[CHF2]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[57];
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[3999] -= dqdci; // dwdot[CH2F2]/d[F]
  J[4003] += dqdci; // dwdot[CHF2]/d[F]
  // d()/d[CH2F2]
  dqdci = +k_f * sc[54];
  J[4214] += dqdci; // dwdot[HF]/d[CH2F2]
  J[4215] -= dqdci; // dwdot[F]/d[CH2F2]
  J[4218] -= dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] += dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = -k_r * sc[53];
  J[4506] += dqdci; // dwdot[HF]/d[CHF2]
  J[4507] -= dqdci; // dwdot[F]/d[CHF2]
  J[4510] -= dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5313] -= dqdT; // dwdot[CH2F2]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT

  // reaction 488: CHF3 + F <=> CF3 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[54] * sc[58];
  k_f = 45000000 * exp(-(1861.90166347746) * invT);
  dlnkfdT = (1861.90166347746) * invT2;
  // reverse
  phi_r = sc[53] * sc[62];
  Kc = exp(-g_RT[53] + g_RT[54] + g_RT[58] - g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[54] + h_RT[58]) + (h_RT[53] + h_RT[62]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  wdot[58] -= q; // CHF3
  wdot[62] += q; // CF3
  // d()/d[HF]
  dqdci = -k_r * sc[62];
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  J[3927] -= dqdci; // dwdot[CHF3]/d[HF]
  J[3931] += dqdci; // dwdot[CF3]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[58];
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[4000] -= dqdci; // dwdot[CHF3]/d[F]
  J[4004] += dqdci; // dwdot[CF3]/d[F]
  // d()/d[CHF3]
  dqdci = +k_f * sc[54];
  J[4287] += dqdci; // dwdot[HF]/d[CHF3]
  J[4288] -= dqdci; // dwdot[F]/d[CHF3]
  J[4292] -= dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] += dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = -k_r * sc[53];
  J[4579] += dqdci; // dwdot[HF]/d[CF3]
  J[4580] -= dqdci; // dwdot[F]/d[CF3]
  J[4584] -= dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] += dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5314] -= dqdT; // dwdot[CHF3]/dT
  J[5318] += dqdT; // dwdot[CF3]/dT

  // reaction 489: CH3OH + F <=> CH3O + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[54];
  k_f = 2620 * exp(1.44 * logT - (-103.159416489968) * invT);
  dlnkfdT = 1.44 * invT + (-103.159416489968) * invT2;
  // reverse
  phi_r = sc[19] * sc[53];
  Kc = exp(-g_RT[19] + g_RT[20] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[54]) + (h_RT[19] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[CH3O]
  dqdci = -k_r * sc[53];
  J[1406] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[1407] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  J[1440] += dqdci; // dwdot[HF]/d[CH3O]
  J[1441] -= dqdci; // dwdot[F]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[54];
  J[1479] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  J[1513] += dqdci; // dwdot[HF]/d[CH3OH]
  J[1514] -= dqdci; // dwdot[F]/d[CH3OH]
  // d()/d[HF]
  dqdci = -k_r * sc[19];
  J[3888] += dqdci; // dwdot[CH3O]/d[HF]
  J[3889] -= dqdci; // dwdot[CH3OH]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[20];
  J[3961] += dqdci; // dwdot[CH3O]/d[F]
  J[3962] -= dqdci; // dwdot[CH3OH]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 490: CH3OH + F <=> CH2OH + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[54];
  k_f = 46.2 * exp(1.97 * logT - (-150.964999741416) * invT);
  dlnkfdT = 1.97 * invT + (-150.964999741416) * invT2;
  // reverse
  phi_r = sc[18] * sc[53];
  Kc = exp(-g_RT[18] + g_RT[20] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[54]) + (h_RT[18] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[CH2OH]
  dqdci = -k_r * sc[53];
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1334] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  J[1367] += dqdci; // dwdot[HF]/d[CH2OH]
  J[1368] -= dqdci; // dwdot[F]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[54];
  J[1478] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  J[1513] += dqdci; // dwdot[HF]/d[CH3OH]
  J[1514] -= dqdci; // dwdot[F]/d[CH3OH]
  // d()/d[HF]
  dqdci = -k_r * sc[18];
  J[3887] += dqdci; // dwdot[CH2OH]/d[HF]
  J[3889] -= dqdci; // dwdot[CH3OH]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[20];
  J[3960] += dqdci; // dwdot[CH2OH]/d[F]
  J[3962] -= dqdci; // dwdot[CH3OH]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 491: CH2O + F <=> HCO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[54];
  k_f = 60000000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[16] * sc[53];
  Kc = exp(-g_RT[16] + g_RT[17] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[54]) + (h_RT[16] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[HCO]
  dqdci = -k_r * sc[53];
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  J[1221] += dqdci; // dwdot[HF]/d[HCO]
  J[1222] -= dqdci; // dwdot[F]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[54];
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[1294] += dqdci; // dwdot[HF]/d[CH2O]
  J[1295] -= dqdci; // dwdot[F]/d[CH2O]
  // d()/d[HF]
  dqdci = -k_r * sc[16];
  J[3885] += dqdci; // dwdot[HCO]/d[HF]
  J[3886] -= dqdci; // dwdot[CH2O]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[17];
  J[3958] += dqdci; // dwdot[HCO]/d[F]
  J[3959] -= dqdci; // dwdot[CH2O]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 492: CHFO + F <=> CFO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[54] * sc[68];
  k_f = 26500000 * exp(-(905.789998448495) * invT);
  dlnkfdT = (905.789998448495) * invT2;
  // reverse
  phi_r = sc[53] * sc[69];
  Kc = exp(-g_RT[53] + g_RT[54] + g_RT[68] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[54] + h_RT[68]) + (h_RT[53] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  wdot[68] -= q; // CHFO
  wdot[69] += q; // CFO
  // d()/d[HF]
  dqdci = -k_r * sc[69];
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  J[3937] -= dqdci; // dwdot[CHFO]/d[HF]
  J[3938] += dqdci; // dwdot[CFO]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[68];
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[4010] -= dqdci; // dwdot[CHFO]/d[F]
  J[4011] += dqdci; // dwdot[CFO]/d[F]
  // d()/d[CHFO]
  dqdci = +k_f * sc[54];
  J[5017] += dqdci; // dwdot[HF]/d[CHFO]
  J[5018] -= dqdci; // dwdot[F]/d[CHFO]
  J[5032] -= dqdci; // dwdot[CHFO]/d[CHFO]
  J[5033] += dqdci; // dwdot[CFO]/d[CHFO]
  // d()/d[CFO]
  dqdci = -k_r * sc[53];
  J[5090] += dqdci; // dwdot[HF]/d[CFO]
  J[5091] -= dqdci; // dwdot[F]/d[CFO]
  J[5105] -= dqdci; // dwdot[CHFO]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5324] -= dqdT; // dwdot[CHFO]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 493: CH3O + F <=> CH2O + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19] * sc[54];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[17] * sc[53];
  Kc = exp(-g_RT[17] + g_RT[19] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19] + h_RT[54]) + (h_RT[17] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[17] += q; // CH2O
  wdot[19] -= q; // CH3O
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[CH2O]
  dqdci = -k_r * sc[53];
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1260] -= dqdci; // dwdot[CH3O]/d[CH2O]
  J[1294] += dqdci; // dwdot[HF]/d[CH2O]
  J[1295] -= dqdci; // dwdot[F]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[54];
  J[1404] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[1406] -= dqdci; // dwdot[CH3O]/d[CH3O]
  J[1440] += dqdci; // dwdot[HF]/d[CH3O]
  J[1441] -= dqdci; // dwdot[F]/d[CH3O]
  // d()/d[HF]
  dqdci = -k_r * sc[17];
  J[3886] += dqdci; // dwdot[CH2O]/d[HF]
  J[3888] -= dqdci; // dwdot[CH3O]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[19];
  J[3959] += dqdci; // dwdot[CH2O]/d[F]
  J[3961] -= dqdci; // dwdot[CH3O]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5275] -= dqdT; // dwdot[CH3O]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 494: F + HCO <=> CO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[54];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[53];
  Kc = exp(-g_RT[14] + g_RT[16] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[54]) + (h_RT[14] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[CO]
  dqdci = -k_r * sc[53];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  J[1075] += dqdci; // dwdot[HF]/d[CO]
  J[1076] -= dqdci; // dwdot[F]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[54];
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  J[1221] += dqdci; // dwdot[HF]/d[HCO]
  J[1222] -= dqdci; // dwdot[F]/d[HCO]
  // d()/d[HF]
  dqdci = -k_r * sc[14];
  J[3883] += dqdci; // dwdot[CO]/d[HF]
  J[3885] -= dqdci; // dwdot[HCO]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[16];
  J[3956] += dqdci; // dwdot[CO]/d[F]
  J[3958] -= dqdci; // dwdot[HCO]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 495: C2H6 + F <=> C2H5 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[26] * sc[54];
  k_f = 8000000 * exp(-(150.964999741416) * invT);
  dlnkfdT = (150.964999741416) * invT2;
  // reverse
  phi_r = sc[25] * sc[53];
  Kc = exp(-g_RT[25] + g_RT[26] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[26] + h_RT[54]) + (h_RT[25] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[C2H5]
  dqdci = -k_r * sc[53];
  J[1850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  J[1878] += dqdci; // dwdot[HF]/d[C2H5]
  J[1879] -= dqdci; // dwdot[F]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[54];
  J[1923] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1924] -= dqdci; // dwdot[C2H6]/d[C2H6]
  J[1951] += dqdci; // dwdot[HF]/d[C2H6]
  J[1952] -= dqdci; // dwdot[F]/d[C2H6]
  // d()/d[HF]
  dqdci = -k_r * sc[25];
  J[3894] += dqdci; // dwdot[C2H5]/d[HF]
  J[3895] -= dqdci; // dwdot[C2H6]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[26];
  J[3967] += dqdci; // dwdot[C2H5]/d[F]
  J[3968] -= dqdci; // dwdot[C2H6]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5282] -= dqdT; // dwdot[C2H6]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 496: C2H4 + F <=> C2H3 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[24] * sc[54];
  k_f = 100000000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[23] * sc[53];
  Kc = exp(-g_RT[23] + g_RT[24] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[24] + h_RT[54]) + (h_RT[23] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[23] += q; // C2H3
  wdot[24] -= q; // C2H4
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[C2H3]
  dqdci = -k_r * sc[53];
  J[1702] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[1703] -= dqdci; // dwdot[C2H4]/d[C2H3]
  J[1732] += dqdci; // dwdot[HF]/d[C2H3]
  J[1733] -= dqdci; // dwdot[F]/d[C2H3]
  // d()/d[C2H4]
  dqdci = +k_f * sc[54];
  J[1775] += dqdci; // dwdot[C2H3]/d[C2H4]
  J[1776] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[1805] += dqdci; // dwdot[HF]/d[C2H4]
  J[1806] -= dqdci; // dwdot[F]/d[C2H4]
  // d()/d[HF]
  dqdci = -k_r * sc[23];
  J[3892] += dqdci; // dwdot[C2H3]/d[HF]
  J[3893] -= dqdci; // dwdot[C2H4]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[24];
  J[3965] += dqdci; // dwdot[C2H3]/d[F]
  J[3966] -= dqdci; // dwdot[C2H4]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5279] += dqdT; // dwdot[C2H3]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 497: C2H3 + F <=> C2H2 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[23] * sc[54];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[22] * sc[53];
  Kc = exp(-g_RT[22] + g_RT[23] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[23] + h_RT[54]) + (h_RT[22] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[22] += q; // C2H2
  wdot[23] -= q; // C2H3
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[C2H2]
  dqdci = -k_r * sc[53];
  J[1628] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[1629] -= dqdci; // dwdot[C2H3]/d[C2H2]
  J[1659] += dqdci; // dwdot[HF]/d[C2H2]
  J[1660] -= dqdci; // dwdot[F]/d[C2H2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[54];
  J[1701] += dqdci; // dwdot[C2H2]/d[C2H3]
  J[1702] -= dqdci; // dwdot[C2H3]/d[C2H3]
  J[1732] += dqdci; // dwdot[HF]/d[C2H3]
  J[1733] -= dqdci; // dwdot[F]/d[C2H3]
  // d()/d[HF]
  dqdci = -k_r * sc[22];
  J[3891] += dqdci; // dwdot[C2H2]/d[HF]
  J[3892] -= dqdci; // dwdot[C2H3]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[23];
  J[3964] += dqdci; // dwdot[C2H2]/d[F]
  J[3965] -= dqdci; // dwdot[C2H3]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 499: CF4 + CH3 <=> CF3 + CH3F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[59];
  k_f = 0.0964 * exp(2.41 * logT - (13149.0514774773) * invT);
  dlnkfdT = 2.41 * invT + (13149.0514774773) * invT2;
  // reverse
  phi_r = sc[56] * sc[62];
  Kc = exp(g_RT[12] - g_RT[56] + g_RT[59] - g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[59]) + (h_RT[56] + h_RT[62]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[56] += q; // CH3F
  wdot[59] -= q; // CF4
  wdot[62] += q; // CF3
  // d()/d[CH3]
  dqdci = +k_f * sc[59];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[932] += dqdci; // dwdot[CH3F]/d[CH3]
  J[935] -= dqdci; // dwdot[CF4]/d[CH3]
  J[938] += dqdci; // dwdot[CF3]/d[CH3]
  // d()/d[CH3F]
  dqdci = -k_r * sc[62];
  J[4100] -= dqdci; // dwdot[CH3]/d[CH3F]
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4147] -= dqdci; // dwdot[CF4]/d[CH3F]
  J[4150] += dqdci; // dwdot[CF3]/d[CH3F]
  // d()/d[CF4]
  dqdci = +k_f * sc[12];
  J[4319] -= dqdci; // dwdot[CH3]/d[CF4]
  J[4363] += dqdci; // dwdot[CH3F]/d[CF4]
  J[4366] -= dqdci; // dwdot[CF4]/d[CF4]
  J[4369] += dqdci; // dwdot[CF3]/d[CF4]
  // d()/d[CF3]
  dqdci = -k_r * sc[56];
  J[4538] -= dqdci; // dwdot[CH3]/d[CF3]
  J[4582] += dqdci; // dwdot[CH3F]/d[CF3]
  J[4585] -= dqdci; // dwdot[CF4]/d[CF3]
  J[4588] += dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5315] -= dqdT; // dwdot[CF4]/dT
  J[5318] += dqdT; // dwdot[CF3]/dT

  // reaction 500: CF3O + CO <=> CF3 + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[66];
  k_f = 31300;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[15] * sc[62];
  Kc = exp(g_RT[14] - g_RT[15] - g_RT[62] + g_RT[66]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[66]) + (h_RT[15] + h_RT[62]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] -= q; // CO
  wdot[15] += q; // CO2
  wdot[62] += q; // CF3
  wdot[66] -= q; // CF3O
  // d()/d[CO]
  dqdci = +k_f * sc[66];
  J[1036] -= dqdci; // dwdot[CO]/d[CO]
  J[1037] += dqdci; // dwdot[CO2]/d[CO]
  J[1084] += dqdci; // dwdot[CF3]/d[CO]
  J[1088] -= dqdci; // dwdot[CF3O]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[62];
  J[1109] -= dqdci; // dwdot[CO]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  J[1157] += dqdci; // dwdot[CF3]/d[CO2]
  J[1161] -= dqdci; // dwdot[CF3O]/d[CO2]
  // d()/d[CF3]
  dqdci = -k_r * sc[15];
  J[4540] -= dqdci; // dwdot[CO]/d[CF3]
  J[4541] += dqdci; // dwdot[CO2]/d[CF3]
  J[4588] += dqdci; // dwdot[CF3]/d[CF3]
  J[4592] -= dqdci; // dwdot[CF3O]/d[CF3]
  // d()/d[CF3O]
  dqdci = +k_f * sc[14];
  J[4832] -= dqdci; // dwdot[CO]/d[CF3O]
  J[4833] += dqdci; // dwdot[CO2]/d[CF3O]
  J[4880] += dqdci; // dwdot[CF3]/d[CF3O]
  J[4884] -= dqdci; // dwdot[CF3O]/d[CF3O]
  // d()/dT
  J[5270] -= dqdT; // dwdot[CO]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5318] += dqdT; // dwdot[CF3]/dT
  J[5322] -= dqdT; // dwdot[CF3O]/dT

  // reaction 501: CF2 + CFO <=> CF3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[64] * sc[69];
  k_f = 540000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[62];
  Kc = exp(-g_RT[14] - g_RT[62] + g_RT[64] + g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[64] + h_RT[69]) + (h_RT[14] + h_RT[62]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[62] += q; // CF3
  wdot[64] -= q; // CF2
  wdot[69] -= q; // CFO
  // d()/d[CO]
  dqdci = -k_r * sc[62];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1084] += dqdci; // dwdot[CF3]/d[CO]
  J[1086] -= dqdci; // dwdot[CF2]/d[CO]
  J[1091] -= dqdci; // dwdot[CFO]/d[CO]
  // d()/d[CF3]
  dqdci = -k_r * sc[14];
  J[4540] += dqdci; // dwdot[CO]/d[CF3]
  J[4588] += dqdci; // dwdot[CF3]/d[CF3]
  J[4590] -= dqdci; // dwdot[CF2]/d[CF3]
  J[4595] -= dqdci; // dwdot[CFO]/d[CF3]
  // d()/d[CF2]
  dqdci = +k_f * sc[69];
  J[4686] += dqdci; // dwdot[CO]/d[CF2]
  J[4734] += dqdci; // dwdot[CF3]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  J[4741] -= dqdci; // dwdot[CFO]/d[CF2]
  // d()/d[CFO]
  dqdci = +k_f * sc[64];
  J[5051] += dqdci; // dwdot[CO]/d[CFO]
  J[5099] += dqdci; // dwdot[CF3]/d[CFO]
  J[5101] -= dqdci; // dwdot[CF2]/d[CFO]
  J[5106] -= dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5318] += dqdT; // dwdot[CF3]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT
  J[5325] -= dqdT; // dwdot[CFO]/dT

  // reaction 503: F2 + H <=> F + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[55];
  k_f = 2900 * exp(1.4 * logT - (669.278165520277) * invT);
  dlnkfdT = 1.4 * invT + (669.278165520277) * invT2;
  // reverse
  phi_r = sc[53] * sc[54];
  Kc = exp(g_RT[1] - g_RT[53] - g_RT[54] + g_RT[55]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[55]) + (h_RT[53] + h_RT[54]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  // d()/d[H]
  dqdci = +k_f * sc[55];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[127] += dqdci; // dwdot[F]/d[H]
  J[128] -= dqdci; // dwdot[F2]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[54];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] += dqdci; // dwdot[F]/d[HF]
  J[3924] -= dqdci; // dwdot[F2]/d[HF]
  // d()/d[F]
  dqdci = -k_r * sc[53];
  J[3943] -= dqdci; // dwdot[H]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[1];
  J[4016] -= dqdci; // dwdot[H]/d[F2]
  J[4068] += dqdci; // dwdot[HF]/d[F2]
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT

  // reaction 504: CF3 + F2 <=> CF4 + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[55] * sc[62];
  k_f = 2650000 * exp(-(1258.0416645118) * invT);
  dlnkfdT = (1258.0416645118) * invT2;
  // reverse
  phi_r = sc[54] * sc[59];
  Kc = exp(-g_RT[54] + g_RT[55] - g_RT[59] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[55] + h_RT[62]) + (h_RT[54] + h_RT[59]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  wdot[59] += q; // CF4
  wdot[62] -= q; // CF3
  // d()/d[F]
  dqdci = -k_r * sc[59];
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  J[4001] += dqdci; // dwdot[CF4]/d[F]
  J[4004] -= dqdci; // dwdot[CF3]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[62];
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  J[4074] += dqdci; // dwdot[CF4]/d[F2]
  J[4077] -= dqdci; // dwdot[CF3]/d[F2]
  // d()/d[CF4]
  dqdci = -k_r * sc[54];
  J[4361] += dqdci; // dwdot[F]/d[CF4]
  J[4362] -= dqdci; // dwdot[F2]/d[CF4]
  J[4366] += dqdci; // dwdot[CF4]/d[CF4]
  J[4369] -= dqdci; // dwdot[CF3]/d[CF4]
  // d()/d[CF3]
  dqdci = +k_f * sc[55];
  J[4580] += dqdci; // dwdot[F]/d[CF3]
  J[4581] -= dqdci; // dwdot[F2]/d[CF3]
  J[4585] += dqdci; // dwdot[CF4]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT
  J[5315] += dqdT; // dwdot[CF4]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 505: CH3 + F2 <=> CH3F + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[55];
  k_f = 4000000 * exp(-(553.538332385192) * invT);
  dlnkfdT = (553.538332385192) * invT2;
  // reverse
  phi_r = sc[54] * sc[56];
  Kc = exp(g_RT[12] - g_RT[54] + g_RT[55] - g_RT[56]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[55]) + (h_RT[54] + h_RT[56]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  wdot[56] += q; // CH3F
  // d()/d[CH3]
  dqdci = +k_f * sc[55];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[930] += dqdci; // dwdot[F]/d[CH3]
  J[931] -= dqdci; // dwdot[F2]/d[CH3]
  J[932] += dqdci; // dwdot[CH3F]/d[CH3]
  // d()/d[F]
  dqdci = -k_r * sc[56];
  J[3954] -= dqdci; // dwdot[CH3]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  J[3998] += dqdci; // dwdot[CH3F]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[12];
  J[4027] -= dqdci; // dwdot[CH3]/d[F2]
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  J[4071] += dqdci; // dwdot[CH3F]/d[F2]
  // d()/d[CH3F]
  dqdci = -k_r * sc[54];
  J[4100] -= dqdci; // dwdot[CH3]/d[CH3F]
  J[4142] += dqdci; // dwdot[F]/d[CH3F]
  J[4143] -= dqdci; // dwdot[F2]/d[CH3F]
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT

  // reaction 506: CF2 + F2 <=> CF3 + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[55] * sc[64];
  k_f = 1200000 * exp(-(1509.64999741416) * invT);
  dlnkfdT = (1509.64999741416) * invT2;
  // reverse
  phi_r = sc[54] * sc[62];
  Kc = exp(-g_RT[54] + g_RT[55] - g_RT[62] + g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[55] + h_RT[64]) + (h_RT[54] + h_RT[62]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  wdot[62] += q; // CF3
  wdot[64] -= q; // CF2
  // d()/d[F]
  dqdci = -k_r * sc[62];
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  J[4004] += dqdci; // dwdot[CF3]/d[F]
  J[4006] -= dqdci; // dwdot[CF2]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[64];
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  J[4077] += dqdci; // dwdot[CF3]/d[F2]
  J[4079] -= dqdci; // dwdot[CF2]/d[F2]
  // d()/d[CF3]
  dqdci = -k_r * sc[54];
  J[4580] += dqdci; // dwdot[F]/d[CF3]
  J[4581] -= dqdci; // dwdot[F2]/d[CF3]
  J[4588] += dqdci; // dwdot[CF3]/d[CF3]
  J[4590] -= dqdci; // dwdot[CF2]/d[CF3]
  // d()/d[CF2]
  dqdci = +k_f * sc[55];
  J[4726] += dqdci; // dwdot[F]/d[CF2]
  J[4727] -= dqdci; // dwdot[F2]/d[CF2]
  J[4734] += dqdci; // dwdot[CF3]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT
  J[5318] += dqdT; // dwdot[CF3]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT

  // reaction 507: CFO + F2 <=> CF2O + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[55] * sc[69];
  k_f = 1000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[54] * sc[67];
  Kc = exp(-g_RT[54] + g_RT[55] - g_RT[67] + g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[55] + h_RT[69]) + (h_RT[54] + h_RT[67]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  wdot[67] += q; // CF2O
  wdot[69] -= q; // CFO
  // d()/d[F]
  dqdci = -k_r * sc[67];
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  J[4009] += dqdci; // dwdot[CF2O]/d[F]
  J[4011] -= dqdci; // dwdot[CFO]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[69];
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  J[4082] += dqdci; // dwdot[CF2O]/d[F2]
  J[4084] -= dqdci; // dwdot[CFO]/d[F2]
  // d()/d[CF2O]
  dqdci = -k_r * sc[54];
  J[4945] += dqdci; // dwdot[F]/d[CF2O]
  J[4946] -= dqdci; // dwdot[F2]/d[CF2O]
  J[4958] += dqdci; // dwdot[CF2O]/d[CF2O]
  J[4960] -= dqdci; // dwdot[CFO]/d[CF2O]
  // d()/d[CFO]
  dqdci = +k_f * sc[55];
  J[5091] += dqdci; // dwdot[F]/d[CFO]
  J[5092] -= dqdci; // dwdot[F2]/d[CFO]
  J[5104] += dqdci; // dwdot[CF2O]/d[CFO]
  J[5106] -= dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT
  J[5325] -= dqdT; // dwdot[CFO]/dT

  // reaction 508: F2 + H2 <=> F + H + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[55];
  k_f = 3440000 * exp(-(9958.6578162754) * invT);
  dlnkfdT = (9958.6578162754) * invT2;
  // reverse
  phi_r = sc[1] * sc[53] * sc[54];
  Kc = refC * exp(g_RT[0] - g_RT[1] - g_RT[53] - g_RT[54] + g_RT[55]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[0] + h_RT[55]) + (h_RT[1] + h_RT[53] + h_RT[54]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[53] += q; // HF
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  // d()/d[H2]
  dqdci = +k_f * sc[55];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[53] += dqdci; // dwdot[HF]/d[H2]
  J[54] += dqdci; // dwdot[F]/d[H2]
  J[55] -= dqdci; // dwdot[F2]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[53] * sc[54];
  J[73] -= dqdci;  // dwdot[H2]/d[H]
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[127] += dqdci; // dwdot[F]/d[H]
  J[128] -= dqdci; // dwdot[F2]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[1] * sc[54];
  J[3869] -= dqdci; // dwdot[H2]/d[HF]
  J[3870] += dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] += dqdci; // dwdot[F]/d[HF]
  J[3924] -= dqdci; // dwdot[F2]/d[HF]
  // d()/d[F]
  dqdci = -k_r * sc[1] * sc[53];
  J[3942] -= dqdci; // dwdot[H2]/d[F]
  J[3943] += dqdci; // dwdot[H]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[0];
  J[4015] -= dqdci; // dwdot[H2]/d[F2]
  J[4016] += dqdci; // dwdot[H]/d[F2]
  J[4068] += dqdci; // dwdot[HF]/d[F2]
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT

  // reaction 509: CO + F2 <=> CFO + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[55];
  k_f = 470000 * exp(-(6793.42498836372) * invT);
  dlnkfdT = (6793.42498836372) * invT2;
  // reverse
  phi_r = sc[54] * sc[69];
  Kc = exp(g_RT[14] - g_RT[54] + g_RT[55] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[55]) + (h_RT[54] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] -= q; // CO
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  wdot[69] += q; // CFO
  // d()/d[CO]
  dqdci = +k_f * sc[55];
  J[1036] -= dqdci; // dwdot[CO]/d[CO]
  J[1076] += dqdci; // dwdot[F]/d[CO]
  J[1077] -= dqdci; // dwdot[F2]/d[CO]
  J[1091] += dqdci; // dwdot[CFO]/d[CO]
  // d()/d[F]
  dqdci = -k_r * sc[69];
  J[3956] -= dqdci; // dwdot[CO]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  J[4011] += dqdci; // dwdot[CFO]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[14];
  J[4029] -= dqdci; // dwdot[CO]/d[F2]
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  J[4084] += dqdci; // dwdot[CFO]/d[F2]
  // d()/d[CFO]
  dqdci = -k_r * sc[54];
  J[5051] -= dqdci; // dwdot[CO]/d[CFO]
  J[5091] += dqdci; // dwdot[F]/d[CFO]
  J[5092] -= dqdci; // dwdot[F2]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5270] -= dqdT; // dwdot[CO]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 510: C + F2 <=> CF + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[55];
  k_f = 1700000 * exp(-(754.82499870708) * invT);
  dlnkfdT = (754.82499870708) * invT2;
  // reverse
  phi_r = sc[54] * sc[65];
  Kc = exp(g_RT[8] - g_RT[54] + g_RT[55] - g_RT[65]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[55]) + (h_RT[54] + h_RT[65]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // C
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  wdot[65] += q; // CF
  // d()/d[C]
  dqdci = +k_f * sc[55];
  J[592] -= dqdci; // dwdot[C]/d[C]
  J[638] += dqdci; // dwdot[F]/d[C]
  J[639] -= dqdci; // dwdot[F2]/d[C]
  J[649] += dqdci; // dwdot[CF]/d[C]
  // d()/d[F]
  dqdci = -k_r * sc[65];
  J[3950] -= dqdci; // dwdot[C]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  J[4007] += dqdci; // dwdot[CF]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[8];
  J[4023] -= dqdci; // dwdot[C]/d[F2]
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  J[4080] += dqdci; // dwdot[CF]/d[F2]
  // d()/d[CF]
  dqdci = -k_r * sc[54];
  J[4753] -= dqdci; // dwdot[C]/d[CF]
  J[4799] += dqdci; // dwdot[F]/d[CF]
  J[4800] -= dqdci; // dwdot[F2]/d[CF]
  J[4810] += dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5264] -= dqdT; // dwdot[C]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT
  J[5321] += dqdT; // dwdot[CF]/dT

  // reaction 511: CF + F2 <=> CF2 + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[55] * sc[65];
  k_f = 2400000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[54] * sc[64];
  Kc = exp(-g_RT[54] + g_RT[55] - g_RT[64] + g_RT[65]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[55] + h_RT[65]) + (h_RT[54] + h_RT[64]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  wdot[64] += q; // CF2
  wdot[65] -= q; // CF
  // d()/d[F]
  dqdci = -k_r * sc[64];
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  J[4006] += dqdci; // dwdot[CF2]/d[F]
  J[4007] -= dqdci; // dwdot[CF]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[65];
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  J[4079] += dqdci; // dwdot[CF2]/d[F2]
  J[4080] -= dqdci; // dwdot[CF]/d[F2]
  // d()/d[CF2]
  dqdci = -k_r * sc[54];
  J[4726] += dqdci; // dwdot[F]/d[CF2]
  J[4727] -= dqdci; // dwdot[F2]/d[CF2]
  J[4736] += dqdci; // dwdot[CF2]/d[CF2]
  J[4737] -= dqdci; // dwdot[CF]/d[CF2]
  // d()/d[CF]
  dqdci = +k_f * sc[55];
  J[4799] += dqdci; // dwdot[F]/d[CF]
  J[4800] -= dqdci; // dwdot[F2]/d[CF]
  J[4809] += dqdci; // dwdot[CF2]/d[CF]
  J[4810] -= dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT
  J[5320] += dqdT; // dwdot[CF2]/dT
  J[5321] -= dqdT; // dwdot[CF]/dT

  // reaction 512: CH4 + F2 <=> CH3 + F + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[55];
  k_f = 2000000 * exp(-(5651.123156987) * invT);
  dlnkfdT = (5651.123156987) * invT2;
  // reverse
  phi_r = sc[12] * sc[53] * sc[54];
  Kc = refC * exp(-g_RT[12] + g_RT[13] - g_RT[53] - g_RT[54] + g_RT[55]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[55]) + (h_RT[12] + h_RT[53] + h_RT[54]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // CH3
  wdot[13] -= q; // CH4
  wdot[53] += q; // HF
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  // d()/d[CH3]
  dqdci = -k_r * sc[53] * sc[54];
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[889] -= dqdci; // dwdot[CH4]/d[CH3]
  J[929] += dqdci; // dwdot[HF]/d[CH3]
  J[930] += dqdci; // dwdot[F]/d[CH3]
  J[931] -= dqdci; // dwdot[F2]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[55];
  J[961] += dqdci;  // dwdot[CH3]/d[CH4]
  J[962] -= dqdci;  // dwdot[CH4]/d[CH4]
  J[1002] += dqdci; // dwdot[HF]/d[CH4]
  J[1003] += dqdci; // dwdot[F]/d[CH4]
  J[1004] -= dqdci; // dwdot[F2]/d[CH4]
  // d()/d[HF]
  dqdci = -k_r * sc[12] * sc[54];
  J[3881] += dqdci; // dwdot[CH3]/d[HF]
  J[3882] -= dqdci; // dwdot[CH4]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] += dqdci; // dwdot[F]/d[HF]
  J[3924] -= dqdci; // dwdot[F2]/d[HF]
  // d()/d[F]
  dqdci = -k_r * sc[12] * sc[53];
  J[3954] += dqdci; // dwdot[CH3]/d[F]
  J[3955] -= dqdci; // dwdot[CH4]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[13];
  J[4027] += dqdci; // dwdot[CH3]/d[F2]
  J[4028] -= dqdci; // dwdot[CH4]/d[F2]
  J[4068] += dqdci; // dwdot[HF]/d[F2]
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  // d()/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5269] -= dqdT; // dwdot[CH4]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT

  // reaction 513: F2 + OH <=> F + HF + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[55];
  k_f = 70000000 * exp(-(4528.94999224248) * invT);
  dlnkfdT = (4528.94999224248) * invT2;
  // reverse
  phi_r = sc[2] * sc[53] * sc[54];
  Kc = refC * exp(-g_RT[2] + g_RT[4] - g_RT[53] - g_RT[54] + g_RT[55]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[4] + h_RT[55]) + (h_RT[2] + h_RT[53] + h_RT[54]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[4] -= q;  // OH
  wdot[53] += q; // HF
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  // d()/d[O]
  dqdci = -k_r * sc[53] * sc[54];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[150] -= dqdci; // dwdot[OH]/d[O]
  J[199] += dqdci; // dwdot[HF]/d[O]
  J[200] += dqdci; // dwdot[F]/d[O]
  J[201] -= dqdci; // dwdot[F2]/d[O]
  // d()/d[OH]
  dqdci = +k_f * sc[55];
  J[294] += dqdci; // dwdot[O]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[346] += dqdci; // dwdot[F]/d[OH]
  J[347] -= dqdci; // dwdot[F2]/d[OH]
  // d()/d[HF]
  dqdci = -k_r * sc[2] * sc[54];
  J[3871] += dqdci; // dwdot[O]/d[HF]
  J[3873] -= dqdci; // dwdot[OH]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] += dqdci; // dwdot[F]/d[HF]
  J[3924] -= dqdci; // dwdot[F2]/d[HF]
  // d()/d[F]
  dqdci = -k_r * sc[2] * sc[53];
  J[3944] += dqdci; // dwdot[O]/d[F]
  J[3946] -= dqdci; // dwdot[OH]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[4];
  J[4017] += dqdci; // dwdot[O]/d[F2]
  J[4019] -= dqdci; // dwdot[OH]/d[F2]
  J[4068] += dqdci; // dwdot[HF]/d[F2]
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT

  // reaction 514: C3H8 + F <=> HF + nC3H7
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[50] * sc[54];
  k_f = 35000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[53] * sc[71];
  Kc = exp(g_RT[50] - g_RT[53] + g_RT[54] - g_RT[71]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[50] + h_RT[54]) + (h_RT[53] + h_RT[71]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[50] -= q; // C3H8
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  wdot[71] += q; // nC3H7
  // d()/d[C3H8]
  dqdci = +k_f * sc[54];
  J[3700] -= dqdci; // dwdot[C3H8]/d[C3H8]
  J[3703] += dqdci; // dwdot[HF]/d[C3H8]
  J[3704] -= dqdci; // dwdot[F]/d[C3H8]
  J[3721] += dqdci; // dwdot[nC3H7]/d[C3H8]
  // d()/d[HF]
  dqdci = -k_r * sc[71];
  J[3919] -= dqdci; // dwdot[C3H8]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  J[3940] += dqdci; // dwdot[nC3H7]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[50];
  J[3992] -= dqdci; // dwdot[C3H8]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[4013] += dqdci; // dwdot[nC3H7]/d[F]
  // d()/d[nC3H7]
  dqdci = -k_r * sc[53];
  J[5233] -= dqdci; // dwdot[C3H8]/d[nC3H7]
  J[5236] += dqdci; // dwdot[HF]/d[nC3H7]
  J[5237] -= dqdci; // dwdot[F]/d[nC3H7]
  J[5254] += dqdci; // dwdot[nC3H7]/d[nC3H7]
  // d()/dT
  J[5306] -= dqdT; // dwdot[C3H8]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5327] += dqdT; // dwdot[nC3H7]/dT

  // reaction 515: C3H8 + F <=> HF + iC3H7
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[50] * sc[54];
  k_f = 41000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[53] * sc[70];
  Kc = exp(g_RT[50] - g_RT[53] + g_RT[54] - g_RT[70]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[50] + h_RT[54]) + (h_RT[53] + h_RT[70]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[50] -= q; // C3H8
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  wdot[70] += q; // iC3H7
  // d()/d[C3H8]
  dqdci = +k_f * sc[54];
  J[3700] -= dqdci; // dwdot[C3H8]/d[C3H8]
  J[3703] += dqdci; // dwdot[HF]/d[C3H8]
  J[3704] -= dqdci; // dwdot[F]/d[C3H8]
  J[3720] += dqdci; // dwdot[iC3H7]/d[C3H8]
  // d()/d[HF]
  dqdci = -k_r * sc[70];
  J[3919] -= dqdci; // dwdot[C3H8]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  J[3939] += dqdci; // dwdot[iC3H7]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[50];
  J[3992] -= dqdci; // dwdot[C3H8]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[4012] += dqdci; // dwdot[iC3H7]/d[F]
  // d()/d[iC3H7]
  dqdci = -k_r * sc[53];
  J[5160] -= dqdci; // dwdot[C3H8]/d[iC3H7]
  J[5163] += dqdci; // dwdot[HF]/d[iC3H7]
  J[5164] -= dqdci; // dwdot[F]/d[iC3H7]
  J[5180] += dqdci; // dwdot[iC3H7]/d[iC3H7]
  // d()/dT
  J[5306] -= dqdT; // dwdot[C3H8]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5326] += dqdT; // dwdot[iC3H7]/dT

  // reaction 516: C3H8 + CF3 <=> CHF3 + nC3H7
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[50] * sc[62];
  k_f = 540000 * exp(-(4297.47032597231) * invT);
  dlnkfdT = (4297.47032597231) * invT2;
  // reverse
  phi_r = sc[58] * sc[71];
  Kc = exp(g_RT[50] - g_RT[58] + g_RT[62] - g_RT[71]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[50] + h_RT[62]) + (h_RT[58] + h_RT[71]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[50] -= q; // C3H8
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  wdot[71] += q; // nC3H7
  // d()/d[C3H8]
  dqdci = +k_f * sc[62];
  J[3700] -= dqdci; // dwdot[C3H8]/d[C3H8]
  J[3708] += dqdci; // dwdot[CHF3]/d[C3H8]
  J[3712] -= dqdci; // dwdot[CF3]/d[C3H8]
  J[3721] += dqdci; // dwdot[nC3H7]/d[C3H8]
  // d()/d[CHF3]
  dqdci = -k_r * sc[71];
  J[4284] -= dqdci; // dwdot[C3H8]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  J[4305] += dqdci; // dwdot[nC3H7]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[50];
  J[4576] -= dqdci; // dwdot[C3H8]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  J[4597] += dqdci; // dwdot[nC3H7]/d[CF3]
  // d()/d[nC3H7]
  dqdci = -k_r * sc[58];
  J[5233] -= dqdci; // dwdot[C3H8]/d[nC3H7]
  J[5241] += dqdci; // dwdot[CHF3]/d[nC3H7]
  J[5245] -= dqdci; // dwdot[CF3]/d[nC3H7]
  J[5254] += dqdci; // dwdot[nC3H7]/d[nC3H7]
  // d()/dT
  J[5306] -= dqdT; // dwdot[C3H8]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5327] += dqdT; // dwdot[nC3H7]/dT

  // reaction 517: C3H8 + CF3 <=> CHF3 + iC3H7
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[50] * sc[62];
  k_f = 180000 * exp(-(3280.97266104677) * invT);
  dlnkfdT = (3280.97266104677) * invT2;
  // reverse
  phi_r = sc[58] * sc[70];
  Kc = exp(g_RT[50] - g_RT[58] + g_RT[62] - g_RT[70]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[50] + h_RT[62]) + (h_RT[58] + h_RT[70]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[50] -= q; // C3H8
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  wdot[70] += q; // iC3H7
  // d()/d[C3H8]
  dqdci = +k_f * sc[62];
  J[3700] -= dqdci; // dwdot[C3H8]/d[C3H8]
  J[3708] += dqdci; // dwdot[CHF3]/d[C3H8]
  J[3712] -= dqdci; // dwdot[CF3]/d[C3H8]
  J[3720] += dqdci; // dwdot[iC3H7]/d[C3H8]
  // d()/d[CHF3]
  dqdci = -k_r * sc[70];
  J[4284] -= dqdci; // dwdot[C3H8]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  J[4304] += dqdci; // dwdot[iC3H7]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[50];
  J[4576] -= dqdci; // dwdot[C3H8]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  J[4596] += dqdci; // dwdot[iC3H7]/d[CF3]
  // d()/d[iC3H7]
  dqdci = -k_r * sc[58];
  J[5160] -= dqdci; // dwdot[C3H8]/d[iC3H7]
  J[5168] += dqdci; // dwdot[CHF3]/d[iC3H7]
  J[5172] -= dqdci; // dwdot[CF3]/d[iC3H7]
  J[5180] += dqdci; // dwdot[iC3H7]/d[iC3H7]
  // d()/dT
  J[5306] -= dqdT; // dwdot[C3H8]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5326] += dqdT; // dwdot[iC3H7]/dT

  amrex::Real c_R[72], dcRdT[72], e_RT[72];
  amrex::Real* eh_RT;
  if (HP == 1) {
    cp_R(c_R, T);
    dcvpRdT(dcRdT, T);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, T);
    dcvpRdT(dcRdT, T);
    speciesInternalEnergy(e_RT, T);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 72; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[5256 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 72; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 72; ++m) {
      dehmixdc += eh_RT[m] * J[k * 73 + m];
    }
    J[k * 73 + 72] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[5328] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
#else
  amrex::Abort();
#endif
}

// compute an approx to the reaction Jacobian (for preconditioning)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT_SIMPLIFIED(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real* Tp, const int* HP)
{
  amrex::Real c[72];

  for (int k = 0; k < 72; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian_precond(J, c, *Tp, *HP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 72; k++) {
    J[5256 + k] *= 1.e-6;
    J[k * 73 + 72] *= 1.e6;
  }
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real T, const int consP)
{

#if defined(PELE_COMPILE_AJACOBIAN) || !defined(AMREX_USE_HIP)
  for (int i = 0; i < 5329; i++) {
    J[i] = 0.0;
  }

  amrex::Real wdot[72];
  for (auto& val : wdot) {
    val = 0.0;
  }

  const amrex::Real invT = 1.0 / T;
  const amrex::Real invT2 = invT * invT;
  const amrex::Real logT = log(T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 / T;
  amrex::Real refCinv = 1.0 / refC;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int k = 0; k < 72; ++k) {
    mixture += sc[k];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[72];
  gibbs(g_RT, T);

  // compute the species enthalpy
  amrex::Real h_RT[72];
  speciesEnthalpy(h_RT, T);

  amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
  amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
  amrex::Real dqdci, dcdc_fac, dqdc[72];
  amrex::Real Pr, fPr, F, k_0, logPr;
  amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
  amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
  amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
  amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
  const amrex::Real ln10 = log(10.0);
  const amrex::Real log10e = 1.0 / log(10.0);
  // reaction 49: CH2 + H (+M) <=> CH3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[10];
  k_f = 600000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 1.04e+26 * exp(-2.76 * logT - (805.146665287552) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.76 * invT + (805.146665287552) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.562) * exp(-T / 91);
  Fcent2 = 0.562 * exp(-T / 5836);
  Fcent3 = exp(-8552 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 91 - Fcent2 / 5836 + Fcent3 * 8552 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[12];
  Kc = refCinv * exp(g_RT[1] + g_RT[10] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[10]) + (h_RT[12]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[10] -= q; // CH2
  wdot[12] += q; // CH3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[10] -= dqdci; // dwdot[CH2]/d[H2]
    J[12] += dqdci; // dwdot[CH3]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[10];
    J[74] -= dqdci; // dwdot[H]/d[H]
    J[83] -= dqdci; // dwdot[CH2]/d[H]
    J[85] += dqdci; // dwdot[CH3]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[366] -= dqdci; // dwdot[H]/d[H2O]
    J[375] -= dqdci; // dwdot[CH2]/d[H2O]
    J[377] += dqdci; // dwdot[CH3]/d[H2O]
    // d()/d[CH2]
    dqdci = +k_f * sc[1];
    J[731] -= dqdci; // dwdot[H]/d[CH2]
    J[740] -= dqdci; // dwdot[CH2]/d[CH2]
    J[742] += dqdci; // dwdot[CH3]/d[CH2]
    // d()/d[CH3]
    dqdci = -k_r;
    J[877] -= dqdci; // dwdot[H]/d[CH3]
    J[886] -= dqdci; // dwdot[CH2]/d[CH3]
    J[888] += dqdci; // dwdot[CH3]/d[CH3]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[950] -= dqdci; // dwdot[H]/d[CH4]
    J[959] -= dqdci; // dwdot[CH2]/d[CH4]
    J[961] += dqdci; // dwdot[CH3]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1023] -= dqdci; // dwdot[H]/d[CO]
    J[1032] -= dqdci; // dwdot[CH2]/d[CO]
    J[1034] += dqdci; // dwdot[CH3]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1096] -= dqdci; // dwdot[H]/d[CO2]
    J[1105] -= dqdci; // dwdot[CH2]/d[CO2]
    J[1107] += dqdci; // dwdot[CH3]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1899] -= dqdci; // dwdot[H]/d[C2H6]
    J[1908] -= dqdci; // dwdot[CH2]/d[C2H6]
    J[1910] += dqdci; // dwdot[CH3]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3505] -= dqdci; // dwdot[H]/d[AR]
    J[3514] -= dqdci; // dwdot[CH2]/d[AR]
    J[3516] += dqdci; // dwdot[CH3]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[10];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac + k_f * sc[1];
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac - k_r;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] -= dqdc[k];
      J[73 * k + 10] -= dqdc[k];
      J[73 * k + 12] += dqdc[k];
    }
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT

  // reaction 51: CH3 + H (+M) <=> CH4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + (3 - 1) * sc[13] +
          (1.5 - 1) * sc[14] + sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[12];
  k_f = 13900000000 * exp(-0.534 * logT - (269.72413287133) * invT);
  dlnkfdT = -0.534 * invT + (269.72413287133) * invT2;
  // pressure-fall-off
  k_0 = 2.62e+33 * exp(-4.76 * logT - (1227.84866456352) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.76 * invT + (1227.84866456352) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.783) * exp(-T / 74);
  Fcent2 = 0.783 * exp(-T / 2941);
  Fcent3 = exp(-6964 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 74 - Fcent2 / 2941 + Fcent3 * 6964 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[13];
  Kc = refCinv * exp(g_RT[1] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[12]) + (h_RT[13]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[12] -= dqdci; // dwdot[CH3]/d[H2]
    J[13] += dqdci; // dwdot[CH4]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[12];
    J[74] -= dqdci; // dwdot[H]/d[H]
    J[85] -= dqdci; // dwdot[CH3]/d[H]
    J[86] += dqdci; // dwdot[CH4]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[366] -= dqdci; // dwdot[H]/d[H2O]
    J[377] -= dqdci; // dwdot[CH3]/d[H2O]
    J[378] += dqdci; // dwdot[CH4]/d[H2O]
    // d()/d[CH3]
    dqdci = +k_f * sc[1];
    J[877] -= dqdci; // dwdot[H]/d[CH3]
    J[888] -= dqdci; // dwdot[CH3]/d[CH3]
    J[889] += dqdci; // dwdot[CH4]/d[CH3]
    // d()/d[CH4]
    dqdci = (3 - 1) * dcdc_fac - k_r;
    J[950] -= dqdci; // dwdot[H]/d[CH4]
    J[961] -= dqdci; // dwdot[CH3]/d[CH4]
    J[962] += dqdci; // dwdot[CH4]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1023] -= dqdci; // dwdot[H]/d[CO]
    J[1034] -= dqdci; // dwdot[CH3]/d[CO]
    J[1035] += dqdci; // dwdot[CH4]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1096] -= dqdci; // dwdot[H]/d[CO2]
    J[1107] -= dqdci; // dwdot[CH3]/d[CO2]
    J[1108] += dqdci; // dwdot[CH4]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1899] -= dqdci; // dwdot[H]/d[C2H6]
    J[1910] -= dqdci; // dwdot[CH3]/d[C2H6]
    J[1911] += dqdci; // dwdot[CH4]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3505] -= dqdci; // dwdot[H]/d[AR]
    J[3516] -= dqdci; // dwdot[CH3]/d[AR]
    J[3517] += dqdci; // dwdot[CH4]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[12];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac + k_f * sc[1];
    dqdc[13] = 3 * dcdc_fac - k_r;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] -= dqdc[k];
      J[73 * k + 12] -= dqdc[k];
      J[73 * k + 13] += dqdc[k];
    }
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT

  // reaction 53: H + HCO (+M) <=> CH2O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[16];
  k_f = 1090000 * exp(0.48 * logT - (-130.836333109227) * invT);
  dlnkfdT = 0.48 * invT + (-130.836333109227) * invT2;
  // pressure-fall-off
  k_0 = 2.47e+24 * exp(-2.57 * logT - (213.867082967006) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.57 * invT + (213.867082967006) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7824) * exp(-T / 271);
  Fcent2 = 0.7824 * exp(-T / 2755);
  Fcent3 = exp(-6570 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 271 - Fcent2 / 2755 + Fcent3 * 6570 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[17];
  Kc = refCinv * exp(g_RT[1] + g_RT[16] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[16]) + (h_RT[17]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[16] -= q; // HCO
  wdot[17] += q; // CH2O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[16] -= dqdci; // dwdot[HCO]/d[H2]
    J[17] += dqdci; // dwdot[CH2O]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[16];
    J[74] -= dqdci; // dwdot[H]/d[H]
    J[89] -= dqdci; // dwdot[HCO]/d[H]
    J[90] += dqdci; // dwdot[CH2O]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[366] -= dqdci; // dwdot[H]/d[H2O]
    J[381] -= dqdci; // dwdot[HCO]/d[H2O]
    J[382] += dqdci; // dwdot[CH2O]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[950] -= dqdci; // dwdot[H]/d[CH4]
    J[965] -= dqdci; // dwdot[HCO]/d[CH4]
    J[966] += dqdci; // dwdot[CH2O]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1023] -= dqdci; // dwdot[H]/d[CO]
    J[1038] -= dqdci; // dwdot[HCO]/d[CO]
    J[1039] += dqdci; // dwdot[CH2O]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1096] -= dqdci; // dwdot[H]/d[CO2]
    J[1111] -= dqdci; // dwdot[HCO]/d[CO2]
    J[1112] += dqdci; // dwdot[CH2O]/d[CO2]
    // d()/d[HCO]
    dqdci = +k_f * sc[1];
    J[1169] -= dqdci; // dwdot[H]/d[HCO]
    J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
    J[1185] += dqdci; // dwdot[CH2O]/d[HCO]
    // d()/d[CH2O]
    dqdci = -k_r;
    J[1242] -= dqdci; // dwdot[H]/d[CH2O]
    J[1257] -= dqdci; // dwdot[HCO]/d[CH2O]
    J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1899] -= dqdci; // dwdot[H]/d[C2H6]
    J[1914] -= dqdci; // dwdot[HCO]/d[C2H6]
    J[1915] += dqdci; // dwdot[CH2O]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3505] -= dqdci; // dwdot[H]/d[AR]
    J[3520] -= dqdci; // dwdot[HCO]/d[AR]
    J[3521] += dqdci; // dwdot[CH2O]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[16];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac + k_f * sc[1];
    dqdc[17] = dcdc_fac - k_r;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] -= dqdc[k];
      J[73 * k + 16] -= dqdc[k];
      J[73 * k + 17] += dqdc[k];
    }
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 55: CH2O + H (+M) <=> CH2OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 540000 * exp(0.454 * logT - (1811.57999689699) * invT);
  dlnkfdT = 0.454 * invT + (1811.57999689699) * invT2;
  // pressure-fall-off
  k_0 = 1.27e+32 * exp(-4.82 * logT - (3286.00482770482) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.82 * invT + (3286.00482770482) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7187) * exp(-T / 103);
  Fcent2 = 0.7187 * exp(-T / 1291);
  Fcent3 = exp(-4160 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 103 - Fcent2 / 1291 + Fcent3 * 4160 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[18];
  Kc = refCinv * exp(g_RT[1] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[18]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[17] -= q; // CH2O
  wdot[18] += q; // CH2OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[17] -= dqdci; // dwdot[CH2O]/d[H2]
    J[18] += dqdci; // dwdot[CH2OH]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[17];
    J[74] -= dqdci; // dwdot[H]/d[H]
    J[90] -= dqdci; // dwdot[CH2O]/d[H]
    J[91] += dqdci; // dwdot[CH2OH]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[366] -= dqdci; // dwdot[H]/d[H2O]
    J[382] -= dqdci; // dwdot[CH2O]/d[H2O]
    J[383] += dqdci; // dwdot[CH2OH]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[950] -= dqdci; // dwdot[H]/d[CH4]
    J[966] -= dqdci; // dwdot[CH2O]/d[CH4]
    J[967] += dqdci; // dwdot[CH2OH]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1023] -= dqdci; // dwdot[H]/d[CO]
    J[1039] -= dqdci; // dwdot[CH2O]/d[CO]
    J[1040] += dqdci; // dwdot[CH2OH]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1096] -= dqdci; // dwdot[H]/d[CO2]
    J[1112] -= dqdci; // dwdot[CH2O]/d[CO2]
    J[1113] += dqdci; // dwdot[CH2OH]/d[CO2]
    // d()/d[CH2O]
    dqdci = +k_f * sc[1];
    J[1242] -= dqdci; // dwdot[H]/d[CH2O]
    J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
    J[1259] += dqdci; // dwdot[CH2OH]/d[CH2O]
    // d()/d[CH2OH]
    dqdci = -k_r;
    J[1315] -= dqdci; // dwdot[H]/d[CH2OH]
    J[1331] -= dqdci; // dwdot[CH2O]/d[CH2OH]
    J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1899] -= dqdci; // dwdot[H]/d[C2H6]
    J[1915] -= dqdci; // dwdot[CH2O]/d[C2H6]
    J[1916] += dqdci; // dwdot[CH2OH]/d[C2H6]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[17];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac + k_f * sc[1];
    dqdc[18] = dcdc_fac - k_r;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] -= dqdc[k];
      J[73 * k + 17] -= dqdc[k];
      J[73 * k + 18] += dqdc[k];
    }
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT

  // reaction 56: CH2O + H (+M) <=> CH3O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 540000 * exp(0.454 * logT - (1308.36333109227) * invT);
  dlnkfdT = 0.454 * invT + (1308.36333109227) * invT2;
  // pressure-fall-off
  k_0 = 2.2e+30 * exp(-4.8 * logT - (2797.88466187424) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.8 * invT + (2797.88466187424) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.758) * exp(-T / 94);
  Fcent2 = 0.758 * exp(-T / 1555);
  Fcent3 = exp(-4200 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 94 - Fcent2 / 1555 + Fcent3 * 4200 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[19];
  Kc = refCinv * exp(g_RT[1] + g_RT[17] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[19]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[17] -= q; // CH2O
  wdot[19] += q; // CH3O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[17] -= dqdci; // dwdot[CH2O]/d[H2]
    J[19] += dqdci; // dwdot[CH3O]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[17];
    J[74] -= dqdci; // dwdot[H]/d[H]
    J[90] -= dqdci; // dwdot[CH2O]/d[H]
    J[92] += dqdci; // dwdot[CH3O]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[366] -= dqdci; // dwdot[H]/d[H2O]
    J[382] -= dqdci; // dwdot[CH2O]/d[H2O]
    J[384] += dqdci; // dwdot[CH3O]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[950] -= dqdci; // dwdot[H]/d[CH4]
    J[966] -= dqdci; // dwdot[CH2O]/d[CH4]
    J[968] += dqdci; // dwdot[CH3O]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1023] -= dqdci; // dwdot[H]/d[CO]
    J[1039] -= dqdci; // dwdot[CH2O]/d[CO]
    J[1041] += dqdci; // dwdot[CH3O]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1096] -= dqdci; // dwdot[H]/d[CO2]
    J[1112] -= dqdci; // dwdot[CH2O]/d[CO2]
    J[1114] += dqdci; // dwdot[CH3O]/d[CO2]
    // d()/d[CH2O]
    dqdci = +k_f * sc[1];
    J[1242] -= dqdci; // dwdot[H]/d[CH2O]
    J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
    J[1260] += dqdci; // dwdot[CH3O]/d[CH2O]
    // d()/d[CH3O]
    dqdci = -k_r;
    J[1388] -= dqdci; // dwdot[H]/d[CH3O]
    J[1404] -= dqdci; // dwdot[CH2O]/d[CH3O]
    J[1406] += dqdci; // dwdot[CH3O]/d[CH3O]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1899] -= dqdci; // dwdot[H]/d[C2H6]
    J[1915] -= dqdci; // dwdot[CH2O]/d[C2H6]
    J[1917] += dqdci; // dwdot[CH3O]/d[C2H6]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[17];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac + k_f * sc[1];
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac - k_r;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] -= dqdc[k];
      J[73 * k + 17] -= dqdc[k];
      J[73 * k + 19] += dqdc[k];
    }
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT

  // reaction 58: CH2OH + H (+M) <=> CH3OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[1] * sc[18];
  k_f = 1055000 * exp(0.5 * logT - (43.2766332592059) * invT);
  dlnkfdT = 0.5 * invT + (43.2766332592059) * invT2;
  // pressure-fall-off
  k_0 = 4.36e+31 * exp(-4.65 * logT - (2556.34066228798) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.65 * invT + (2556.34066228798) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.6) * exp(-T / 100);
  Fcent2 = 0.6 * exp(-T / 90000);
  Fcent3 = exp(-10000 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 100 - Fcent2 / 90000 + Fcent3 * 10000 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[1] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[18]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[18] -= q; // CH2OH
  wdot[20] += q; // CH3OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[18] -= dqdci; // dwdot[CH2OH]/d[H2]
    J[20] += dqdci; // dwdot[CH3OH]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[18];
    J[74] -= dqdci; // dwdot[H]/d[H]
    J[91] -= dqdci; // dwdot[CH2OH]/d[H]
    J[93] += dqdci; // dwdot[CH3OH]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[366] -= dqdci; // dwdot[H]/d[H2O]
    J[383] -= dqdci; // dwdot[CH2OH]/d[H2O]
    J[385] += dqdci; // dwdot[CH3OH]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[950] -= dqdci; // dwdot[H]/d[CH4]
    J[967] -= dqdci; // dwdot[CH2OH]/d[CH4]
    J[969] += dqdci; // dwdot[CH3OH]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1023] -= dqdci; // dwdot[H]/d[CO]
    J[1040] -= dqdci; // dwdot[CH2OH]/d[CO]
    J[1042] += dqdci; // dwdot[CH3OH]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1096] -= dqdci; // dwdot[H]/d[CO2]
    J[1113] -= dqdci; // dwdot[CH2OH]/d[CO2]
    J[1115] += dqdci; // dwdot[CH3OH]/d[CO2]
    // d()/d[CH2OH]
    dqdci = +k_f * sc[1];
    J[1315] -= dqdci; // dwdot[H]/d[CH2OH]
    J[1332] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
    J[1334] += dqdci; // dwdot[CH3OH]/d[CH2OH]
    // d()/d[CH3OH]
    dqdci = -k_r;
    J[1461] -= dqdci; // dwdot[H]/d[CH3OH]
    J[1478] -= dqdci; // dwdot[CH2OH]/d[CH3OH]
    J[1480] += dqdci; // dwdot[CH3OH]/d[CH3OH]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1899] -= dqdci; // dwdot[H]/d[C2H6]
    J[1916] -= dqdci; // dwdot[CH2OH]/d[C2H6]
    J[1918] += dqdci; // dwdot[CH3OH]/d[C2H6]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[18];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac + k_f * sc[1];
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac - k_r;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] -= dqdc[k];
      J[73 * k + 18] -= dqdc[k];
      J[73 * k + 20] += dqdc[k];
    }
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5274] -= dqdT; // dwdot[CH2OH]/dT
  J[5276] += dqdT; // dwdot[CH3OH]/dT

  // reaction 62: CH3O + H (+M) <=> CH3OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 2430000 * exp(0.515 * logT - (25.160833290236) * invT);
  dlnkfdT = 0.515 * invT + (25.160833290236) * invT2;
  // pressure-fall-off
  k_0 = 4.66e+41 * exp(-7.44 * logT - (7085.29065453045) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.44 * invT + (7085.29065453045) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7) * exp(-T / 100);
  Fcent2 = 0.7 * exp(-T / 90000);
  Fcent3 = exp(-10000 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 100 - Fcent2 / 90000 + Fcent3 * 10000 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[1] + g_RT[19] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[19] -= q; // CH3O
  wdot[20] += q; // CH3OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[19] -= dqdci; // dwdot[CH3O]/d[H2]
    J[20] += dqdci; // dwdot[CH3OH]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[19];
    J[74] -= dqdci; // dwdot[H]/d[H]
    J[92] -= dqdci; // dwdot[CH3O]/d[H]
    J[93] += dqdci; // dwdot[CH3OH]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[366] -= dqdci; // dwdot[H]/d[H2O]
    J[384] -= dqdci; // dwdot[CH3O]/d[H2O]
    J[385] += dqdci; // dwdot[CH3OH]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[950] -= dqdci; // dwdot[H]/d[CH4]
    J[968] -= dqdci; // dwdot[CH3O]/d[CH4]
    J[969] += dqdci; // dwdot[CH3OH]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1023] -= dqdci; // dwdot[H]/d[CO]
    J[1041] -= dqdci; // dwdot[CH3O]/d[CO]
    J[1042] += dqdci; // dwdot[CH3OH]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1096] -= dqdci; // dwdot[H]/d[CO2]
    J[1114] -= dqdci; // dwdot[CH3O]/d[CO2]
    J[1115] += dqdci; // dwdot[CH3OH]/d[CO2]
    // d()/d[CH3O]
    dqdci = +k_f * sc[1];
    J[1388] -= dqdci; // dwdot[H]/d[CH3O]
    J[1406] -= dqdci; // dwdot[CH3O]/d[CH3O]
    J[1407] += dqdci; // dwdot[CH3OH]/d[CH3O]
    // d()/d[CH3OH]
    dqdci = -k_r;
    J[1461] -= dqdci; // dwdot[H]/d[CH3OH]
    J[1479] -= dqdci; // dwdot[CH3O]/d[CH3OH]
    J[1480] += dqdci; // dwdot[CH3OH]/d[CH3OH]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1899] -= dqdci; // dwdot[H]/d[C2H6]
    J[1917] -= dqdci; // dwdot[CH3O]/d[C2H6]
    J[1918] += dqdci; // dwdot[CH3OH]/d[C2H6]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[19];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac + k_f * sc[1];
    dqdc[20] = dcdc_fac - k_r;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] -= dqdc[k];
      J[73 * k + 19] -= dqdc[k];
      J[73 * k + 20] += dqdc[k];
    }
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5275] -= dqdT; // dwdot[CH3O]/dT
  J[5276] += dqdT; // dwdot[CH3OH]/dT

  // reaction 69: C2H + H (+M) <=> C2H2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[21];
  k_f = 100000000000 * exp(-1 * logT);
  dlnkfdT = -1 * invT;
  // pressure-fall-off
  k_0 = 3.75e+33 * exp(-4.8 * logT - (956.111665028967) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.8 * invT + (956.111665028967) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.6464) * exp(-T / 132);
  Fcent2 = 0.6464 * exp(-T / 1315);
  Fcent3 = exp(-5566 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 132 - Fcent2 / 1315 + Fcent3 * 5566 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[22];
  Kc = refCinv * exp(g_RT[1] + g_RT[21] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[21]) + (h_RT[22]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[21] -= q; // C2H
  wdot[22] += q; // C2H2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[21] -= dqdci; // dwdot[C2H]/d[H2]
    J[22] += dqdci; // dwdot[C2H2]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[21];
    J[74] -= dqdci; // dwdot[H]/d[H]
    J[94] -= dqdci; // dwdot[C2H]/d[H]
    J[95] += dqdci; // dwdot[C2H2]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[366] -= dqdci; // dwdot[H]/d[H2O]
    J[386] -= dqdci; // dwdot[C2H]/d[H2O]
    J[387] += dqdci; // dwdot[C2H2]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[950] -= dqdci; // dwdot[H]/d[CH4]
    J[970] -= dqdci; // dwdot[C2H]/d[CH4]
    J[971] += dqdci; // dwdot[C2H2]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1023] -= dqdci; // dwdot[H]/d[CO]
    J[1043] -= dqdci; // dwdot[C2H]/d[CO]
    J[1044] += dqdci; // dwdot[C2H2]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1096] -= dqdci; // dwdot[H]/d[CO2]
    J[1116] -= dqdci; // dwdot[C2H]/d[CO2]
    J[1117] += dqdci; // dwdot[C2H2]/d[CO2]
    // d()/d[C2H]
    dqdci = +k_f * sc[1];
    J[1534] -= dqdci; // dwdot[H]/d[C2H]
    J[1554] -= dqdci; // dwdot[C2H]/d[C2H]
    J[1555] += dqdci; // dwdot[C2H2]/d[C2H]
    // d()/d[C2H2]
    dqdci = -k_r;
    J[1607] -= dqdci; // dwdot[H]/d[C2H2]
    J[1627] -= dqdci; // dwdot[C2H]/d[C2H2]
    J[1628] += dqdci; // dwdot[C2H2]/d[C2H2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1899] -= dqdci; // dwdot[H]/d[C2H6]
    J[1919] -= dqdci; // dwdot[C2H]/d[C2H6]
    J[1920] += dqdci; // dwdot[C2H2]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3505] -= dqdci; // dwdot[H]/d[AR]
    J[3525] -= dqdci; // dwdot[C2H]/d[AR]
    J[3526] += dqdci; // dwdot[C2H2]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[21];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac + k_f * sc[1];
    dqdc[22] = dcdc_fac - k_r;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] -= dqdc[k];
      J[73 * k + 21] -= dqdc[k];
      J[73 * k + 22] += dqdc[k];
    }
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5277] -= dqdT; // dwdot[C2H]/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT

  // reaction 70: C2H2 + H (+M) <=> C2H3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[22];
  k_f = 5600000 * exp(-(1207.71999793133) * invT);
  dlnkfdT = (1207.71999793133) * invT2;
  // pressure-fall-off
  k_0 = 3.8e+40 * exp(-7.27 * logT - (3633.22432711008) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.27 * invT + (3633.22432711008) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7507) * exp(-T / 98.5);
  Fcent2 = 0.7507 * exp(-T / 1302);
  Fcent3 = exp(-4167 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 98.5 - Fcent2 / 1302 + Fcent3 * 4167 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[23];
  Kc = refCinv * exp(g_RT[1] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[22]) + (h_RT[23]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[22] -= q; // C2H2
  wdot[23] += q; // C2H3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[22] -= dqdci; // dwdot[C2H2]/d[H2]
    J[23] += dqdci; // dwdot[C2H3]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[22];
    J[74] -= dqdci; // dwdot[H]/d[H]
    J[95] -= dqdci; // dwdot[C2H2]/d[H]
    J[96] += dqdci; // dwdot[C2H3]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[366] -= dqdci; // dwdot[H]/d[H2O]
    J[387] -= dqdci; // dwdot[C2H2]/d[H2O]
    J[388] += dqdci; // dwdot[C2H3]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[950] -= dqdci; // dwdot[H]/d[CH4]
    J[971] -= dqdci; // dwdot[C2H2]/d[CH4]
    J[972] += dqdci; // dwdot[C2H3]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1023] -= dqdci; // dwdot[H]/d[CO]
    J[1044] -= dqdci; // dwdot[C2H2]/d[CO]
    J[1045] += dqdci; // dwdot[C2H3]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1096] -= dqdci; // dwdot[H]/d[CO2]
    J[1117] -= dqdci; // dwdot[C2H2]/d[CO2]
    J[1118] += dqdci; // dwdot[C2H3]/d[CO2]
    // d()/d[C2H2]
    dqdci = +k_f * sc[1];
    J[1607] -= dqdci; // dwdot[H]/d[C2H2]
    J[1628] -= dqdci; // dwdot[C2H2]/d[C2H2]
    J[1629] += dqdci; // dwdot[C2H3]/d[C2H2]
    // d()/d[C2H3]
    dqdci = -k_r;
    J[1680] -= dqdci; // dwdot[H]/d[C2H3]
    J[1701] -= dqdci; // dwdot[C2H2]/d[C2H3]
    J[1702] += dqdci; // dwdot[C2H3]/d[C2H3]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1899] -= dqdci; // dwdot[H]/d[C2H6]
    J[1920] -= dqdci; // dwdot[C2H2]/d[C2H6]
    J[1921] += dqdci; // dwdot[C2H3]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3505] -= dqdci; // dwdot[H]/d[AR]
    J[3526] -= dqdci; // dwdot[C2H2]/d[AR]
    J[3527] += dqdci; // dwdot[C2H3]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[22];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac + k_f * sc[1];
    dqdc[23] = dcdc_fac - k_r;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] -= dqdc[k];
      J[73 * k + 22] -= dqdc[k];
      J[73 * k + 23] += dqdc[k];
    }
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5278] -= dqdT; // dwdot[C2H2]/dT
  J[5279] += dqdT; // dwdot[C2H3]/dT

  // reaction 71: C2H3 + H (+M) <=> C2H4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[23];
  k_f = 6080000 * exp(0.27 * logT - (140.900666425322) * invT);
  dlnkfdT = 0.27 * invT + (140.900666425322) * invT2;
  // pressure-fall-off
  k_0 = 1.4e+30 * exp(-3.86 * logT - (1670.67933047167) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.86 * invT + (1670.67933047167) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.782) * exp(-T / 207.5);
  Fcent2 = 0.782 * exp(-T / 2663);
  Fcent3 = exp(-6095 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 207.5 - Fcent2 / 2663 + Fcent3 * 6095 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[24];
  Kc = refCinv * exp(g_RT[1] + g_RT[23] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[23]) + (h_RT[24]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[23] -= q; // C2H3
  wdot[24] += q; // C2H4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[23] -= dqdci; // dwdot[C2H3]/d[H2]
    J[24] += dqdci; // dwdot[C2H4]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[23];
    J[74] -= dqdci; // dwdot[H]/d[H]
    J[96] -= dqdci; // dwdot[C2H3]/d[H]
    J[97] += dqdci; // dwdot[C2H4]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[366] -= dqdci; // dwdot[H]/d[H2O]
    J[388] -= dqdci; // dwdot[C2H3]/d[H2O]
    J[389] += dqdci; // dwdot[C2H4]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[950] -= dqdci; // dwdot[H]/d[CH4]
    J[972] -= dqdci; // dwdot[C2H3]/d[CH4]
    J[973] += dqdci; // dwdot[C2H4]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1023] -= dqdci; // dwdot[H]/d[CO]
    J[1045] -= dqdci; // dwdot[C2H3]/d[CO]
    J[1046] += dqdci; // dwdot[C2H4]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1096] -= dqdci; // dwdot[H]/d[CO2]
    J[1118] -= dqdci; // dwdot[C2H3]/d[CO2]
    J[1119] += dqdci; // dwdot[C2H4]/d[CO2]
    // d()/d[C2H3]
    dqdci = +k_f * sc[1];
    J[1680] -= dqdci; // dwdot[H]/d[C2H3]
    J[1702] -= dqdci; // dwdot[C2H3]/d[C2H3]
    J[1703] += dqdci; // dwdot[C2H4]/d[C2H3]
    // d()/d[C2H4]
    dqdci = -k_r;
    J[1753] -= dqdci; // dwdot[H]/d[C2H4]
    J[1775] -= dqdci; // dwdot[C2H3]/d[C2H4]
    J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1899] -= dqdci; // dwdot[H]/d[C2H6]
    J[1921] -= dqdci; // dwdot[C2H3]/d[C2H6]
    J[1922] += dqdci; // dwdot[C2H4]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3505] -= dqdci; // dwdot[H]/d[AR]
    J[3527] -= dqdci; // dwdot[C2H3]/d[AR]
    J[3528] += dqdci; // dwdot[C2H4]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[23];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac + k_f * sc[1];
    dqdc[24] = dcdc_fac - k_r;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] -= dqdc[k];
      J[73 * k + 23] -= dqdc[k];
      J[73 * k + 24] += dqdc[k];
    }
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT

  // reaction 73: C2H4 + H (+M) <=> C2H5 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[24];
  k_f = 540000 * exp(0.454 * logT - (915.85433176459) * invT);
  dlnkfdT = 0.454 * invT + (915.85433176459) * invT2;
  // pressure-fall-off
  k_0 = 6e+41 * exp(-7.62 * logT - (3507.4201606589) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.62 * invT + (3507.4201606589) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.9753) * exp(-T / 210);
  Fcent2 = 0.9753 * exp(-T / 984);
  Fcent3 = exp(-4374 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 210 - Fcent2 / 984 + Fcent3 * 4374 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[25];
  Kc = refCinv * exp(g_RT[1] + g_RT[24] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[24]) + (h_RT[25]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[24] -= q; // C2H4
  wdot[25] += q; // C2H5
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[24] -= dqdci; // dwdot[C2H4]/d[H2]
    J[25] += dqdci; // dwdot[C2H5]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[24];
    J[74] -= dqdci; // dwdot[H]/d[H]
    J[97] -= dqdci; // dwdot[C2H4]/d[H]
    J[98] += dqdci; // dwdot[C2H5]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[366] -= dqdci; // dwdot[H]/d[H2O]
    J[389] -= dqdci; // dwdot[C2H4]/d[H2O]
    J[390] += dqdci; // dwdot[C2H5]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[950] -= dqdci; // dwdot[H]/d[CH4]
    J[973] -= dqdci; // dwdot[C2H4]/d[CH4]
    J[974] += dqdci; // dwdot[C2H5]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1023] -= dqdci; // dwdot[H]/d[CO]
    J[1046] -= dqdci; // dwdot[C2H4]/d[CO]
    J[1047] += dqdci; // dwdot[C2H5]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1096] -= dqdci; // dwdot[H]/d[CO2]
    J[1119] -= dqdci; // dwdot[C2H4]/d[CO2]
    J[1120] += dqdci; // dwdot[C2H5]/d[CO2]
    // d()/d[C2H4]
    dqdci = +k_f * sc[1];
    J[1753] -= dqdci; // dwdot[H]/d[C2H4]
    J[1776] -= dqdci; // dwdot[C2H4]/d[C2H4]
    J[1777] += dqdci; // dwdot[C2H5]/d[C2H4]
    // d()/d[C2H5]
    dqdci = -k_r;
    J[1826] -= dqdci; // dwdot[H]/d[C2H5]
    J[1849] -= dqdci; // dwdot[C2H4]/d[C2H5]
    J[1850] += dqdci; // dwdot[C2H5]/d[C2H5]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1899] -= dqdci; // dwdot[H]/d[C2H6]
    J[1922] -= dqdci; // dwdot[C2H4]/d[C2H6]
    J[1923] += dqdci; // dwdot[C2H5]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3505] -= dqdci; // dwdot[H]/d[AR]
    J[3528] -= dqdci; // dwdot[C2H4]/d[AR]
    J[3529] += dqdci; // dwdot[C2H5]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[24];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac + k_f * sc[1];
    dqdc[25] = dcdc_fac - k_r;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] -= dqdc[k];
      J[73 * k + 24] -= dqdc[k];
      J[73 * k + 25] += dqdc[k];
    }
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT

  // reaction 75: C2H5 + H (+M) <=> C2H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[25];
  k_f = 521000000000 * exp(-0.99 * logT - (795.082331971457) * invT);
  dlnkfdT = -0.99 * invT + (795.082331971457) * invT2;
  // pressure-fall-off
  k_0 = 1.99e+41 * exp(-7.08 * logT - (3364.00341090455) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.08 * invT + (3364.00341090455) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.8422) * exp(-T / 125);
  Fcent2 = 0.8422 * exp(-T / 2219);
  Fcent3 = exp(-6882 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 125 - Fcent2 / 2219 + Fcent3 * 6882 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[26];
  Kc = refCinv * exp(g_RT[1] + g_RT[25] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[25]) + (h_RT[26]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[25] -= q; // C2H5
  wdot[26] += q; // C2H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[25] -= dqdci; // dwdot[C2H5]/d[H2]
    J[26] += dqdci; // dwdot[C2H6]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[25];
    J[74] -= dqdci; // dwdot[H]/d[H]
    J[98] -= dqdci; // dwdot[C2H5]/d[H]
    J[99] += dqdci; // dwdot[C2H6]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[366] -= dqdci; // dwdot[H]/d[H2O]
    J[390] -= dqdci; // dwdot[C2H5]/d[H2O]
    J[391] += dqdci; // dwdot[C2H6]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[950] -= dqdci; // dwdot[H]/d[CH4]
    J[974] -= dqdci; // dwdot[C2H5]/d[CH4]
    J[975] += dqdci; // dwdot[C2H6]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1023] -= dqdci; // dwdot[H]/d[CO]
    J[1047] -= dqdci; // dwdot[C2H5]/d[CO]
    J[1048] += dqdci; // dwdot[C2H6]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1096] -= dqdci; // dwdot[H]/d[CO2]
    J[1120] -= dqdci; // dwdot[C2H5]/d[CO2]
    J[1121] += dqdci; // dwdot[C2H6]/d[CO2]
    // d()/d[C2H5]
    dqdci = +k_f * sc[1];
    J[1826] -= dqdci; // dwdot[H]/d[C2H5]
    J[1850] -= dqdci; // dwdot[C2H5]/d[C2H5]
    J[1851] += dqdci; // dwdot[C2H6]/d[C2H5]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac - k_r;
    J[1899] -= dqdci; // dwdot[H]/d[C2H6]
    J[1923] -= dqdci; // dwdot[C2H5]/d[C2H6]
    J[1924] += dqdci; // dwdot[C2H6]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3505] -= dqdci; // dwdot[H]/d[AR]
    J[3529] -= dqdci; // dwdot[C2H5]/d[AR]
    J[3530] += dqdci; // dwdot[C2H6]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[25];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac + k_f * sc[1];
    dqdc[26] = 3 * dcdc_fac - k_r;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] -= dqdc[k];
      J[73 * k + 25] -= dqdc[k];
      J[73 * k + 26] += dqdc[k];
    }
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5281] -= dqdT; // dwdot[C2H5]/dT
  J[5282] += dqdT; // dwdot[C2H6]/dT

  // reaction 82: CO + H2 (+M) <=> CH2O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[0] * sc[14];
  k_f = 43 * exp(1.5 * logT - (40056.0465980557) * invT);
  dlnkfdT = 1.5 * invT + (40056.0465980557) * invT2;
  // pressure-fall-off
  k_0 = 5.07e+27 * exp(-3.42 * logT - (42446.3257606281) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.42 * invT + (42446.3257606281) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.932) * exp(-T / 197);
  Fcent2 = 0.932 * exp(-T / 1540);
  Fcent3 = exp(-10300 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 197 - Fcent2 / 1540 + Fcent3 * 10300 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[17];
  Kc = refCinv * exp(g_RT[0] + g_RT[14] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[14]) + (h_RT[17]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[0] -= q;  // H2
  wdot[14] -= q; // CO
  wdot[17] += q; // CH2O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac + k_f * sc[14];
    J[0] -= dqdci;  // dwdot[H2]/d[H2]
    J[14] -= dqdci; // dwdot[CO]/d[H2]
    J[17] += dqdci; // dwdot[CH2O]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[365] -= dqdci; // dwdot[H2]/d[H2O]
    J[379] -= dqdci; // dwdot[CO]/d[H2O]
    J[382] += dqdci; // dwdot[CH2O]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[949] -= dqdci; // dwdot[H2]/d[CH4]
    J[963] -= dqdci; // dwdot[CO]/d[CH4]
    J[966] += dqdci; // dwdot[CH2O]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac + k_f * sc[0];
    J[1022] -= dqdci; // dwdot[H2]/d[CO]
    J[1036] -= dqdci; // dwdot[CO]/d[CO]
    J[1039] += dqdci; // dwdot[CH2O]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1095] -= dqdci; // dwdot[H2]/d[CO2]
    J[1109] -= dqdci; // dwdot[CO]/d[CO2]
    J[1112] += dqdci; // dwdot[CH2O]/d[CO2]
    // d()/d[CH2O]
    dqdci = -k_r;
    J[1241] -= dqdci; // dwdot[H2]/d[CH2O]
    J[1255] -= dqdci; // dwdot[CO]/d[CH2O]
    J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1898] -= dqdci; // dwdot[H2]/d[C2H6]
    J[1912] -= dqdci; // dwdot[CO]/d[C2H6]
    J[1915] += dqdci; // dwdot[CH2O]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3504] -= dqdci; // dwdot[H2]/d[AR]
    J[3518] -= dqdci; // dwdot[CO]/d[AR]
    J[3521] += dqdci; // dwdot[CH2O]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac + k_f * sc[14];
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac + k_f * sc[0];
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac - k_r;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 0] -= dqdc[k];
      J[73 * k + 14] -= dqdc[k];
      J[73 * k + 17] += dqdc[k];
    }
  }
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5270] -= dqdT; // dwdot[CO]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 84: 2 OH (+M) <=> H2O2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 74000000 * exp(-0.37 * logT);
  dlnkfdT = -0.37 * invT;
  // pressure-fall-off
  k_0 = 2.3e+18 * exp(-0.9 * logT - (-855.468331868023) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -0.9 * invT + (-855.468331868023) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7346) * exp(-T / 94);
  Fcent2 = 0.7346 * exp(-T / 1756);
  Fcent3 = exp(-5182 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 94 - Fcent2 / 1756 + Fcent3 * 5182 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[7];
  Kc = refCinv * exp(2.000000 * g_RT[4] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[7]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= 2 * q; // OH
  wdot[7] += q;     // H2O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[4] += -2 * dqdci; // dwdot[OH]/d[H2]
    J[7] += dqdci;      // dwdot[H2O2]/d[H2]
    // d()/d[OH]
    dqdci = +k_f * 2.000000 * sc[4];
    J[296] += -2 * dqdci; // dwdot[OH]/d[OH]
    J[299] += dqdci;      // dwdot[H2O2]/d[OH]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[369] += -2 * dqdci; // dwdot[OH]/d[H2O]
    J[372] += dqdci;      // dwdot[H2O2]/d[H2O]
    // d()/d[H2O2]
    dqdci = -k_r;
    J[515] += -2 * dqdci; // dwdot[OH]/d[H2O2]
    J[518] += dqdci;      // dwdot[H2O2]/d[H2O2]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[953] += -2 * dqdci; // dwdot[OH]/d[CH4]
    J[956] += dqdci;      // dwdot[H2O2]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1026] += -2 * dqdci; // dwdot[OH]/d[CO]
    J[1029] += dqdci;      // dwdot[H2O2]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1099] += -2 * dqdci; // dwdot[OH]/d[CO2]
    J[1102] += dqdci;      // dwdot[H2O2]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1902] += -2 * dqdci; // dwdot[OH]/d[C2H6]
    J[1905] += dqdci;      // dwdot[H2O2]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3508] += -2 * dqdci; // dwdot[OH]/d[AR]
    J[3511] += dqdci;      // dwdot[H2O2]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac + k_f * 2.000000 * sc[4];
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac - k_r;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 4] += -2 * dqdc[k];
      J[73 * k + 7] += dqdc[k];
    }
  }
  J[5260] += -2 * dqdT; // dwdot[OH]/dT
  J[5263] += dqdT;      // dwdot[H2O2]/dT

  // reaction 94: CH3 + OH (+M) <=> CH3OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 2790000000000 * exp(-1.43 * logT - (669.278165520277) * invT);
  dlnkfdT = -1.43 * invT + (669.278165520277) * invT2;
  // pressure-fall-off
  k_0 = 4e+36 * exp(-5.92 * logT - (1580.10033062682) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.92 * invT + (1580.10033062682) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.412) * exp(-T / 195);
  Fcent2 = 0.412 * exp(-T / 5900);
  Fcent3 = exp(-6394 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 195 - Fcent2 / 5900 + Fcent3 * 6394 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[4] + g_RT[12] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] -= q;  // OH
  wdot[12] -= q; // CH3
  wdot[20] += q; // CH3OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[4] -= dqdci;  // dwdot[OH]/d[H2]
    J[12] -= dqdci; // dwdot[CH3]/d[H2]
    J[20] += dqdci; // dwdot[CH3OH]/d[H2]
    // d()/d[OH]
    dqdci = +k_f * sc[12];
    J[296] -= dqdci; // dwdot[OH]/d[OH]
    J[304] -= dqdci; // dwdot[CH3]/d[OH]
    J[312] += dqdci; // dwdot[CH3OH]/d[OH]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[369] -= dqdci; // dwdot[OH]/d[H2O]
    J[377] -= dqdci; // dwdot[CH3]/d[H2O]
    J[385] += dqdci; // dwdot[CH3OH]/d[H2O]
    // d()/d[CH3]
    dqdci = +k_f * sc[4];
    J[880] -= dqdci; // dwdot[OH]/d[CH3]
    J[888] -= dqdci; // dwdot[CH3]/d[CH3]
    J[896] += dqdci; // dwdot[CH3OH]/d[CH3]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[953] -= dqdci; // dwdot[OH]/d[CH4]
    J[961] -= dqdci; // dwdot[CH3]/d[CH4]
    J[969] += dqdci; // dwdot[CH3OH]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1026] -= dqdci; // dwdot[OH]/d[CO]
    J[1034] -= dqdci; // dwdot[CH3]/d[CO]
    J[1042] += dqdci; // dwdot[CH3OH]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1099] -= dqdci; // dwdot[OH]/d[CO2]
    J[1107] -= dqdci; // dwdot[CH3]/d[CO2]
    J[1115] += dqdci; // dwdot[CH3OH]/d[CO2]
    // d()/d[CH3OH]
    dqdci = -k_r;
    J[1464] -= dqdci; // dwdot[OH]/d[CH3OH]
    J[1472] -= dqdci; // dwdot[CH3]/d[CH3OH]
    J[1480] += dqdci; // dwdot[CH3OH]/d[CH3OH]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1902] -= dqdci; // dwdot[OH]/d[C2H6]
    J[1910] -= dqdci; // dwdot[CH3]/d[C2H6]
    J[1918] += dqdci; // dwdot[CH3OH]/d[C2H6]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac + k_f * sc[12];
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac + k_f * sc[4];
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac - k_r;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 4] -= dqdc[k];
      J[73 * k + 12] -= dqdc[k];
      J[73 * k + 20] += dqdc[k];
    }
  }
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5276] += dqdT; // dwdot[CH3OH]/dT

  // reaction 130: CH + CO (+M) <=> HCCO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[9] * sc[14];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 2.69e+28 * exp(-3.74 * logT - (974.227464997937) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.74 * invT + (974.227464997937) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5757) * exp(-T / 237);
  Fcent2 = 0.5757 * exp(-T / 1652);
  Fcent3 = exp(-5069 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 237 - Fcent2 / 1652 + Fcent3 * 5069 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[27];
  Kc = refCinv * exp(g_RT[9] + g_RT[14] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[14]) + (h_RT[27]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // CH
  wdot[14] -= q; // CO
  wdot[27] += q; // HCCO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[9] -= dqdci;  // dwdot[CH]/d[H2]
    J[14] -= dqdci; // dwdot[CO]/d[H2]
    J[27] += dqdci; // dwdot[HCCO]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[374] -= dqdci; // dwdot[CH]/d[H2O]
    J[379] -= dqdci; // dwdot[CO]/d[H2O]
    J[392] += dqdci; // dwdot[HCCO]/d[H2O]
    // d()/d[CH]
    dqdci = +k_f * sc[14];
    J[666] -= dqdci; // dwdot[CH]/d[CH]
    J[671] -= dqdci; // dwdot[CO]/d[CH]
    J[684] += dqdci; // dwdot[HCCO]/d[CH]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[958] -= dqdci; // dwdot[CH]/d[CH4]
    J[963] -= dqdci; // dwdot[CO]/d[CH4]
    J[976] += dqdci; // dwdot[HCCO]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac + k_f * sc[9];
    J[1031] -= dqdci; // dwdot[CH]/d[CO]
    J[1036] -= dqdci; // dwdot[CO]/d[CO]
    J[1049] += dqdci; // dwdot[HCCO]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1104] -= dqdci; // dwdot[CH]/d[CO2]
    J[1109] -= dqdci; // dwdot[CO]/d[CO2]
    J[1122] += dqdci; // dwdot[HCCO]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1907] -= dqdci; // dwdot[CH]/d[C2H6]
    J[1912] -= dqdci; // dwdot[CO]/d[C2H6]
    J[1925] += dqdci; // dwdot[HCCO]/d[C2H6]
    // d()/d[HCCO]
    dqdci = -k_r;
    J[1980] -= dqdci; // dwdot[CH]/d[HCCO]
    J[1985] -= dqdci; // dwdot[CO]/d[HCCO]
    J[1998] += dqdci; // dwdot[HCCO]/d[HCCO]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3513] -= dqdci; // dwdot[CH]/d[AR]
    J[3518] -= dqdci; // dwdot[CO]/d[AR]
    J[3531] += dqdci; // dwdot[HCCO]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac + k_f * sc[14];
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac + k_f * sc[9];
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac - k_r;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 9] -= dqdc[k];
      J[73 * k + 14] -= dqdc[k];
      J[73 * k + 27] += dqdc[k];
    }
  }
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5270] -= dqdT; // dwdot[CO]/dT
  J[5283] += dqdT; // dwdot[HCCO]/dT

  // reaction 139: CH2 + CO (+M) <=> CH2CO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[10] * sc[14];
  k_f = 810000 * exp(0.5 * logT - (2269.50716277929) * invT);
  dlnkfdT = 0.5 * invT + (2269.50716277929) * invT2;
  // pressure-fall-off
  k_0 = 2.69e+33 * exp(-5.11 * logT - (3570.32224388449) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.11 * invT + (3570.32224388449) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5907) * exp(-T / 275);
  Fcent2 = 0.5907 * exp(-T / 1226);
  Fcent3 = exp(-5185 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 275 - Fcent2 / 1226 + Fcent3 * 5185 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[28];
  Kc = refCinv * exp(g_RT[10] + g_RT[14] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[14]) + (h_RT[28]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[10] -= q; // CH2
  wdot[14] -= q; // CO
  wdot[28] += q; // CH2CO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[10] -= dqdci; // dwdot[CH2]/d[H2]
    J[14] -= dqdci; // dwdot[CO]/d[H2]
    J[28] += dqdci; // dwdot[CH2CO]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[375] -= dqdci; // dwdot[CH2]/d[H2O]
    J[379] -= dqdci; // dwdot[CO]/d[H2O]
    J[393] += dqdci; // dwdot[CH2CO]/d[H2O]
    // d()/d[CH2]
    dqdci = +k_f * sc[14];
    J[740] -= dqdci; // dwdot[CH2]/d[CH2]
    J[744] -= dqdci; // dwdot[CO]/d[CH2]
    J[758] += dqdci; // dwdot[CH2CO]/d[CH2]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[959] -= dqdci; // dwdot[CH2]/d[CH4]
    J[963] -= dqdci; // dwdot[CO]/d[CH4]
    J[977] += dqdci; // dwdot[CH2CO]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac + k_f * sc[10];
    J[1032] -= dqdci; // dwdot[CH2]/d[CO]
    J[1036] -= dqdci; // dwdot[CO]/d[CO]
    J[1050] += dqdci; // dwdot[CH2CO]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1105] -= dqdci; // dwdot[CH2]/d[CO2]
    J[1109] -= dqdci; // dwdot[CO]/d[CO2]
    J[1123] += dqdci; // dwdot[CH2CO]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1908] -= dqdci; // dwdot[CH2]/d[C2H6]
    J[1912] -= dqdci; // dwdot[CO]/d[C2H6]
    J[1926] += dqdci; // dwdot[CH2CO]/d[C2H6]
    // d()/d[CH2CO]
    dqdci = -k_r;
    J[2054] -= dqdci; // dwdot[CH2]/d[CH2CO]
    J[2058] -= dqdci; // dwdot[CO]/d[CH2CO]
    J[2072] += dqdci; // dwdot[CH2CO]/d[CH2CO]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3514] -= dqdci; // dwdot[CH2]/d[AR]
    J[3518] -= dqdci; // dwdot[CO]/d[AR]
    J[3532] += dqdci; // dwdot[CH2CO]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac + k_f * sc[14];
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac + k_f * sc[10];
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac - k_r;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 10] -= dqdc[k];
      J[73 * k + 14] -= dqdc[k];
      J[73 * k + 28] += dqdc[k];
    }
  }
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5270] -= dqdT; // dwdot[CO]/dT
  J[5284] += dqdT; // dwdot[CH2CO]/dT

  // reaction 146: CH2(S) + H2O (+M) <=> CH3OH (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[5] * sc[11];
  k_f = 482000000000 * exp(-1.16 * logT - (576.183082346404) * invT);
  dlnkfdT = -1.16 * invT + (576.183082346404) * invT2;
  // pressure-fall-off
  k_0 = 1.88e+38 * exp(-6.36 * logT - (2536.21199565579) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.36 * invT + (2536.21199565579) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.6027) * exp(-T / 208);
  Fcent2 = 0.6027 * exp(-T / 3922);
  Fcent3 = exp(-10180 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 208 - Fcent2 / 3922 + Fcent3 * 10180 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[5] + g_RT[11] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[11]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[5] -= q;  // H2O
  wdot[11] -= q; // CH2(S)
  wdot[20] += q; // CH3OH
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[5] -= dqdci;  // dwdot[H2O]/d[H2]
    J[11] -= dqdci; // dwdot[CH2(S)]/d[H2]
    J[20] += dqdci; // dwdot[CH3OH]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac + k_f * sc[11];
    J[370] -= dqdci; // dwdot[H2O]/d[H2O]
    J[376] -= dqdci; // dwdot[CH2(S)]/d[H2O]
    J[385] += dqdci; // dwdot[CH3OH]/d[H2O]
    // d()/d[CH2(S)]
    dqdci = +k_f * sc[5];
    J[808] -= dqdci; // dwdot[H2O]/d[CH2(S)]
    J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
    J[823] += dqdci; // dwdot[CH3OH]/d[CH2(S)]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[954] -= dqdci; // dwdot[H2O]/d[CH4]
    J[960] -= dqdci; // dwdot[CH2(S)]/d[CH4]
    J[969] += dqdci; // dwdot[CH3OH]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1027] -= dqdci; // dwdot[H2O]/d[CO]
    J[1033] -= dqdci; // dwdot[CH2(S)]/d[CO]
    J[1042] += dqdci; // dwdot[CH3OH]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1100] -= dqdci; // dwdot[H2O]/d[CO2]
    J[1106] -= dqdci; // dwdot[CH2(S)]/d[CO2]
    J[1115] += dqdci; // dwdot[CH3OH]/d[CO2]
    // d()/d[CH3OH]
    dqdci = -k_r;
    J[1465] -= dqdci; // dwdot[H2O]/d[CH3OH]
    J[1471] -= dqdci; // dwdot[CH2(S)]/d[CH3OH]
    J[1480] += dqdci; // dwdot[CH3OH]/d[CH3OH]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1903] -= dqdci; // dwdot[H2O]/d[C2H6]
    J[1909] -= dqdci; // dwdot[CH2(S)]/d[C2H6]
    J[1918] += dqdci; // dwdot[CH3OH]/d[C2H6]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac + k_f * sc[11];
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac + k_f * sc[5];
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac - k_r;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 5] -= dqdc[k];
      J[73 * k + 11] -= dqdc[k];
      J[73 * k + 20] += dqdc[k];
    }
  }
  J[5261] -= dqdT; // dwdot[H2O]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5276] += dqdT; // dwdot[CH3OH]/dT

  // reaction 157: 2 CH3 (+M) <=> C2H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = (sc[12] * sc[12]);
  k_f = 67700000000 * exp(-1.18 * logT - (329.103699436287) * invT);
  dlnkfdT = -1.18 * invT + (329.103699436287) * invT2;
  // pressure-fall-off
  k_0 = 3.4e+41 * exp(-7.03 * logT - (1389.88443095264) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.03 * invT + (1389.88443095264) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.619) * exp(-T / 73.2);
  Fcent2 = 0.619 * exp(-T / 1180);
  Fcent3 = exp(-9999 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 73.2 - Fcent2 / 1180 + Fcent3 * 9999 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[26];
  Kc = refCinv * exp(2.000000 * g_RT[12] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[12]) + (h_RT[26]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[12] -= 2 * q; // CH3
  wdot[26] += q;     // C2H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[12] += -2 * dqdci; // dwdot[CH3]/d[H2]
    J[26] += dqdci;      // dwdot[C2H6]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[377] += -2 * dqdci; // dwdot[CH3]/d[H2O]
    J[391] += dqdci;      // dwdot[C2H6]/d[H2O]
    // d()/d[CH3]
    dqdci = +k_f * 2.000000 * sc[12];
    J[888] += -2 * dqdci; // dwdot[CH3]/d[CH3]
    J[902] += dqdci;      // dwdot[C2H6]/d[CH3]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[961] += -2 * dqdci; // dwdot[CH3]/d[CH4]
    J[975] += dqdci;      // dwdot[C2H6]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1034] += -2 * dqdci; // dwdot[CH3]/d[CO]
    J[1048] += dqdci;      // dwdot[C2H6]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1107] += -2 * dqdci; // dwdot[CH3]/d[CO2]
    J[1121] += dqdci;      // dwdot[C2H6]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac - k_r;
    J[1910] += -2 * dqdci; // dwdot[CH3]/d[C2H6]
    J[1924] += dqdci;      // dwdot[C2H6]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3516] += -2 * dqdci; // dwdot[CH3]/d[AR]
    J[3530] += dqdci;      // dwdot[C2H6]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac + k_f * 2.000000 * sc[12];
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac - k_r;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 12] += -2 * dqdc[k];
      J[73 * k + 26] += dqdc[k];
    }
  }
  J[5268] += -2 * dqdT; // dwdot[CH3]/dT
  J[5282] += dqdT;      // dwdot[C2H6]/dT

  // reaction 173: C2H4 (+M) <=> C2H2 + H2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[24];
  k_f = 8000000000000 * exp(0.44 * logT - (43664.1100918755) * invT);
  dlnkfdT = 0.44 * invT + (43664.1100918755) * invT2;
  // pressure-fall-off
  k_0 = 1.58e+51 * exp(-9.3 * logT - (49214.5899157016) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -9.3 * invT + (49214.5899157016) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7345) * exp(-T / 180);
  Fcent2 = 0.7345 * exp(-T / 1035);
  Fcent3 = exp(-5417 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 180 - Fcent2 / 1035 + Fcent3 * 5417 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[0] * sc[22];
  Kc = refC * exp(-g_RT[0] - g_RT[22] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[24]) + (h_RT[0] + h_RT[22]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[0] += q;  // H2
  wdot[22] += q; // C2H2
  wdot[24] -= q; // C2H4
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac - k_r * sc[22];
    J[0] += dqdci;  // dwdot[H2]/d[H2]
    J[22] += dqdci; // dwdot[C2H2]/d[H2]
    J[24] -= dqdci; // dwdot[C2H4]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[365] += dqdci; // dwdot[H2]/d[H2O]
    J[387] += dqdci; // dwdot[C2H2]/d[H2O]
    J[389] -= dqdci; // dwdot[C2H4]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[949] += dqdci; // dwdot[H2]/d[CH4]
    J[971] += dqdci; // dwdot[C2H2]/d[CH4]
    J[973] -= dqdci; // dwdot[C2H4]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1022] += dqdci; // dwdot[H2]/d[CO]
    J[1044] += dqdci; // dwdot[C2H2]/d[CO]
    J[1046] -= dqdci; // dwdot[C2H4]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1095] += dqdci; // dwdot[H2]/d[CO2]
    J[1117] += dqdci; // dwdot[C2H2]/d[CO2]
    J[1119] -= dqdci; // dwdot[C2H4]/d[CO2]
    // d()/d[C2H2]
    dqdci = -k_r * sc[0];
    J[1606] += dqdci; // dwdot[H2]/d[C2H2]
    J[1628] += dqdci; // dwdot[C2H2]/d[C2H2]
    J[1630] -= dqdci; // dwdot[C2H4]/d[C2H2]
    // d()/d[C2H4]
    dqdci = +k_f;
    J[1752] += dqdci; // dwdot[H2]/d[C2H4]
    J[1774] += dqdci; // dwdot[C2H2]/d[C2H4]
    J[1776] -= dqdci; // dwdot[C2H4]/d[C2H4]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1898] += dqdci; // dwdot[H2]/d[C2H6]
    J[1920] += dqdci; // dwdot[C2H2]/d[C2H6]
    J[1922] -= dqdci; // dwdot[C2H4]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3504] += dqdci; // dwdot[H2]/d[AR]
    J[3526] += dqdci; // dwdot[C2H2]/d[AR]
    J[3528] -= dqdci; // dwdot[C2H4]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac - k_r * sc[22];
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac - k_r * sc[0];
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac + k_f;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 0] += dqdc[k];
      J[73 * k + 22] += dqdc[k];
      J[73 * k + 24] -= dqdc[k];
    }
  }
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT

  // reaction 240: CH + N2 (+M) <=> HCNN (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[9] * sc[47];
  k_f = 3100000 * exp(0.15 * logT);
  dlnkfdT = 0.15 * invT;
  // pressure-fall-off
  k_0 = 1.3e+25 * exp(-3.16 * logT - (372.380332695493) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.16 * invT + (372.380332695493) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.667) * exp(-T / 235);
  Fcent2 = 0.667 * exp(-T / 2117);
  Fcent3 = exp(-4536 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 235 - Fcent2 / 2117 + Fcent3 * 4536 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[42];
  Kc = refCinv * exp(g_RT[9] - g_RT[42] + g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[47]) + (h_RT[42]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // CH
  wdot[42] += q; // HCNN
  wdot[47] -= q; // N2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[9] -= dqdci;  // dwdot[CH]/d[H2]
    J[42] += dqdci; // dwdot[HCNN]/d[H2]
    J[47] -= dqdci; // dwdot[N2]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[374] -= dqdci; // dwdot[CH]/d[H2O]
    J[407] += dqdci; // dwdot[HCNN]/d[H2O]
    J[412] -= dqdci; // dwdot[N2]/d[H2O]
    // d()/d[CH]
    dqdci = +k_f * sc[47];
    J[666] -= dqdci; // dwdot[CH]/d[CH]
    J[699] += dqdci; // dwdot[HCNN]/d[CH]
    J[704] -= dqdci; // dwdot[N2]/d[CH]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[958] -= dqdci; // dwdot[CH]/d[CH4]
    J[991] += dqdci; // dwdot[HCNN]/d[CH4]
    J[996] -= dqdci; // dwdot[N2]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1031] -= dqdci; // dwdot[CH]/d[CO]
    J[1064] += dqdci; // dwdot[HCNN]/d[CO]
    J[1069] -= dqdci; // dwdot[N2]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1104] -= dqdci; // dwdot[CH]/d[CO2]
    J[1137] += dqdci; // dwdot[HCNN]/d[CO2]
    J[1142] -= dqdci; // dwdot[N2]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1907] -= dqdci; // dwdot[CH]/d[C2H6]
    J[1940] += dqdci; // dwdot[HCNN]/d[C2H6]
    J[1945] -= dqdci; // dwdot[N2]/d[C2H6]
    // d()/d[HCNN]
    dqdci = -k_r;
    J[3075] -= dqdci; // dwdot[CH]/d[HCNN]
    J[3108] += dqdci; // dwdot[HCNN]/d[HCNN]
    J[3113] -= dqdci; // dwdot[N2]/d[HCNN]
    // d()/d[N2]
    dqdci = +k_f * sc[9];
    J[3440] -= dqdci; // dwdot[CH]/d[N2]
    J[3473] += dqdci; // dwdot[HCNN]/d[N2]
    J[3478] -= dqdci; // dwdot[N2]/d[N2]
    // d()/d[AR]
    dqdci = (1 - 1) * dcdc_fac;
    J[3513] -= dqdci; // dwdot[CH]/d[AR]
    J[3546] += dqdci; // dwdot[HCNN]/d[AR]
    J[3551] -= dqdci; // dwdot[N2]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac + k_f * sc[47];
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac - k_r;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac + k_f * sc[9];
    dqdc[48] = dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 9] -= dqdc[k];
      J[73 * k + 42] += dqdc[k];
      J[73 * k + 47] -= dqdc[k];
    }
  }
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5298] += dqdT; // dwdot[HCNN]/dT
  J[5303] -= dqdT; // dwdot[N2]/dT

  // reaction 288: CH + H2 (+M) <=> CH3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[0] * sc[9];
  k_f = 1970000 * exp(0.43 * logT - (-186.190166347746) * invT);
  dlnkfdT = 0.43 * invT + (-186.190166347746) * invT2;
  // pressure-fall-off
  k_0 = 4.82e+25 * exp(-2.8 * logT - (296.897832824785) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.8 * invT + (296.897832824785) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.578) * exp(-T / 122);
  Fcent2 = 0.578 * exp(-T / 2535);
  Fcent3 = exp(-9365 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 122 - Fcent2 / 2535 + Fcent3 * 9365 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[12];
  Kc = refCinv * exp(g_RT[0] + g_RT[9] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[9]) + (h_RT[12]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[0] -= q;  // H2
  wdot[9] -= q;  // CH
  wdot[12] += q; // CH3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac + k_f * sc[9];
    J[0] -= dqdci;  // dwdot[H2]/d[H2]
    J[9] -= dqdci;  // dwdot[CH]/d[H2]
    J[12] += dqdci; // dwdot[CH3]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[365] -= dqdci; // dwdot[H2]/d[H2O]
    J[374] -= dqdci; // dwdot[CH]/d[H2O]
    J[377] += dqdci; // dwdot[CH3]/d[H2O]
    // d()/d[CH]
    dqdci = +k_f * sc[0];
    J[657] -= dqdci; // dwdot[H2]/d[CH]
    J[666] -= dqdci; // dwdot[CH]/d[CH]
    J[669] += dqdci; // dwdot[CH3]/d[CH]
    // d()/d[CH3]
    dqdci = -k_r;
    J[876] -= dqdci; // dwdot[H2]/d[CH3]
    J[885] -= dqdci; // dwdot[CH]/d[CH3]
    J[888] += dqdci; // dwdot[CH3]/d[CH3]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[949] -= dqdci; // dwdot[H2]/d[CH4]
    J[958] -= dqdci; // dwdot[CH]/d[CH4]
    J[961] += dqdci; // dwdot[CH3]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1022] -= dqdci; // dwdot[H2]/d[CO]
    J[1031] -= dqdci; // dwdot[CH]/d[CO]
    J[1034] += dqdci; // dwdot[CH3]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1095] -= dqdci; // dwdot[H2]/d[CO2]
    J[1104] -= dqdci; // dwdot[CH]/d[CO2]
    J[1107] += dqdci; // dwdot[CH3]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1898] -= dqdci; // dwdot[H2]/d[C2H6]
    J[1907] -= dqdci; // dwdot[CH]/d[C2H6]
    J[1910] += dqdci; // dwdot[CH3]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3504] -= dqdci; // dwdot[H2]/d[AR]
    J[3513] -= dqdci; // dwdot[CH]/d[AR]
    J[3516] += dqdci; // dwdot[CH3]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac + k_f * sc[9];
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac + k_f * sc[0];
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac - k_r;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 0] -= dqdc[k];
      J[73 * k + 9] -= dqdc[k];
      J[73 * k + 12] += dqdc[k];
    }
  }
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT

  // reaction 303: CH2CO + H (+M) <=> CH2CHO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[28];
  k_f = 486500 * exp(0.422 * logT - (-883.145248487283) * invT);
  dlnkfdT = 0.422 * invT + (-883.145248487283) * invT2;
  // pressure-fall-off
  k_0 = 1.012e+42 * exp(-7.63 * logT - (1939.39703001139) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.63 * invT + (1939.39703001139) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.465) * exp(-T / 201);
  Fcent2 = 0.465 * exp(-T / 1773);
  Fcent3 = exp(-5333 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 201 - Fcent2 / 1773 + Fcent3 * 5333 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[51];
  Kc = refCinv * exp(g_RT[1] + g_RT[28] - g_RT[51]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[28]) + (h_RT[51]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[28] -= q; // CH2CO
  wdot[51] += q; // CH2CHO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[28] -= dqdci; // dwdot[CH2CO]/d[H2]
    J[51] += dqdci; // dwdot[CH2CHO]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[28];
    J[74] -= dqdci;  // dwdot[H]/d[H]
    J[101] -= dqdci; // dwdot[CH2CO]/d[H]
    J[124] += dqdci; // dwdot[CH2CHO]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[366] -= dqdci; // dwdot[H]/d[H2O]
    J[393] -= dqdci; // dwdot[CH2CO]/d[H2O]
    J[416] += dqdci; // dwdot[CH2CHO]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[950] -= dqdci;  // dwdot[H]/d[CH4]
    J[977] -= dqdci;  // dwdot[CH2CO]/d[CH4]
    J[1000] += dqdci; // dwdot[CH2CHO]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1023] -= dqdci; // dwdot[H]/d[CO]
    J[1050] -= dqdci; // dwdot[CH2CO]/d[CO]
    J[1073] += dqdci; // dwdot[CH2CHO]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1096] -= dqdci; // dwdot[H]/d[CO2]
    J[1123] -= dqdci; // dwdot[CH2CO]/d[CO2]
    J[1146] += dqdci; // dwdot[CH2CHO]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1899] -= dqdci; // dwdot[H]/d[C2H6]
    J[1926] -= dqdci; // dwdot[CH2CO]/d[C2H6]
    J[1949] += dqdci; // dwdot[CH2CHO]/d[C2H6]
    // d()/d[CH2CO]
    dqdci = +k_f * sc[1];
    J[2045] -= dqdci; // dwdot[H]/d[CH2CO]
    J[2072] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
    J[2095] += dqdci; // dwdot[CH2CHO]/d[CH2CO]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3505] -= dqdci; // dwdot[H]/d[AR]
    J[3532] -= dqdci; // dwdot[CH2CO]/d[AR]
    J[3555] += dqdci; // dwdot[CH2CHO]/d[AR]
    // d()/d[CH2CHO]
    dqdci = -k_r;
    J[3724] -= dqdci; // dwdot[H]/d[CH2CHO]
    J[3751] -= dqdci; // dwdot[CH2CO]/d[CH2CHO]
    J[3774] += dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[28];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac + k_f * sc[1];
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac - k_r;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] -= dqdc[k];
      J[73 * k + 28] -= dqdc[k];
      J[73 * k + 51] += dqdc[k];
    }
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5284] -= dqdT; // dwdot[CH2CO]/dT
  J[5307] += dqdT; // dwdot[CH2CHO]/dT

  // reaction 311: C2H5 + CH3 (+M) <=> C3H8 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[12] * sc[25];
  k_f = 9430000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 2.71e+74 * exp(-16.82 * logT - (6574.52573873866) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -16.82 * invT + (6574.52573873866) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.1527) * exp(-T / 291);
  Fcent2 = 0.1527 * exp(-T / 2742);
  Fcent3 = exp(-7748 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 291 - Fcent2 / 2742 + Fcent3 * 7748 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[50];
  Kc = refCinv * exp(g_RT[12] + g_RT[25] - g_RT[50]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[25]) + (h_RT[50]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[12] -= q; // CH3
  wdot[25] -= q; // C2H5
  wdot[50] += q; // C3H8
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[12] -= dqdci; // dwdot[CH3]/d[H2]
    J[25] -= dqdci; // dwdot[C2H5]/d[H2]
    J[50] += dqdci; // dwdot[C3H8]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[377] -= dqdci; // dwdot[CH3]/d[H2O]
    J[390] -= dqdci; // dwdot[C2H5]/d[H2O]
    J[415] += dqdci; // dwdot[C3H8]/d[H2O]
    // d()/d[CH3]
    dqdci = +k_f * sc[25];
    J[888] -= dqdci; // dwdot[CH3]/d[CH3]
    J[901] -= dqdci; // dwdot[C2H5]/d[CH3]
    J[926] += dqdci; // dwdot[C3H8]/d[CH3]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[961] -= dqdci; // dwdot[CH3]/d[CH4]
    J[974] -= dqdci; // dwdot[C2H5]/d[CH4]
    J[999] += dqdci; // dwdot[C3H8]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1034] -= dqdci; // dwdot[CH3]/d[CO]
    J[1047] -= dqdci; // dwdot[C2H5]/d[CO]
    J[1072] += dqdci; // dwdot[C3H8]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1107] -= dqdci; // dwdot[CH3]/d[CO2]
    J[1120] -= dqdci; // dwdot[C2H5]/d[CO2]
    J[1145] += dqdci; // dwdot[C3H8]/d[CO2]
    // d()/d[C2H5]
    dqdci = +k_f * sc[12];
    J[1837] -= dqdci; // dwdot[CH3]/d[C2H5]
    J[1850] -= dqdci; // dwdot[C2H5]/d[C2H5]
    J[1875] += dqdci; // dwdot[C3H8]/d[C2H5]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1910] -= dqdci; // dwdot[CH3]/d[C2H6]
    J[1923] -= dqdci; // dwdot[C2H5]/d[C2H6]
    J[1948] += dqdci; // dwdot[C3H8]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3516] -= dqdci; // dwdot[CH3]/d[AR]
    J[3529] -= dqdci; // dwdot[C2H5]/d[AR]
    J[3554] += dqdci; // dwdot[C3H8]/d[AR]
    // d()/d[C3H8]
    dqdci = -k_r;
    J[3662] -= dqdci; // dwdot[CH3]/d[C3H8]
    J[3675] -= dqdci; // dwdot[C2H5]/d[C3H8]
    J[3700] += dqdci; // dwdot[C3H8]/d[C3H8]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac + k_f * sc[25];
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac + k_f * sc[12];
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac - k_r;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 12] -= dqdc[k];
      J[73 * k + 25] -= dqdc[k];
      J[73 * k + 50] += dqdc[k];
    }
  }
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5281] -= dqdT; // dwdot[C2H5]/dT
  J[5306] += dqdT; // dwdot[C3H8]/dT

  // reaction 317: C2H4 + CH3 (+M) <=> C3H7 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[12] * sc[24];
  k_f = 2.55 * exp(1.6 * logT - (2868.3349950869) * invT);
  dlnkfdT = 1.6 * invT + (2868.3349950869) * invT2;
  // pressure-fall-off
  k_0 = 3e+63 * exp(-14.6 * logT - (9143.44681767176) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -14.6 * invT + (9143.44681767176) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.1894) * exp(-T / 277);
  Fcent2 = 0.1894 * exp(-T / 8748);
  Fcent3 = exp(-7891 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 277 - Fcent2 / 8748 + Fcent3 * 7891 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[49];
  Kc = refCinv * exp(g_RT[12] + g_RT[24] - g_RT[49]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[24]) + (h_RT[49]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[12] -= q; // CH3
  wdot[24] -= q; // C2H4
  wdot[49] += q; // C3H7
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[12] -= dqdci; // dwdot[CH3]/d[H2]
    J[24] -= dqdci; // dwdot[C2H4]/d[H2]
    J[49] += dqdci; // dwdot[C3H7]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[377] -= dqdci; // dwdot[CH3]/d[H2O]
    J[389] -= dqdci; // dwdot[C2H4]/d[H2O]
    J[414] += dqdci; // dwdot[C3H7]/d[H2O]
    // d()/d[CH3]
    dqdci = +k_f * sc[24];
    J[888] -= dqdci; // dwdot[CH3]/d[CH3]
    J[900] -= dqdci; // dwdot[C2H4]/d[CH3]
    J[925] += dqdci; // dwdot[C3H7]/d[CH3]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[961] -= dqdci; // dwdot[CH3]/d[CH4]
    J[973] -= dqdci; // dwdot[C2H4]/d[CH4]
    J[998] += dqdci; // dwdot[C3H7]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1034] -= dqdci; // dwdot[CH3]/d[CO]
    J[1046] -= dqdci; // dwdot[C2H4]/d[CO]
    J[1071] += dqdci; // dwdot[C3H7]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1107] -= dqdci; // dwdot[CH3]/d[CO2]
    J[1119] -= dqdci; // dwdot[C2H4]/d[CO2]
    J[1144] += dqdci; // dwdot[C3H7]/d[CO2]
    // d()/d[C2H4]
    dqdci = +k_f * sc[12];
    J[1764] -= dqdci; // dwdot[CH3]/d[C2H4]
    J[1776] -= dqdci; // dwdot[C2H4]/d[C2H4]
    J[1801] += dqdci; // dwdot[C3H7]/d[C2H4]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1910] -= dqdci; // dwdot[CH3]/d[C2H6]
    J[1922] -= dqdci; // dwdot[C2H4]/d[C2H6]
    J[1947] += dqdci; // dwdot[C3H7]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3516] -= dqdci; // dwdot[CH3]/d[AR]
    J[3528] -= dqdci; // dwdot[C2H4]/d[AR]
    J[3553] += dqdci; // dwdot[C3H7]/d[AR]
    // d()/d[C3H7]
    dqdci = -k_r;
    J[3589] -= dqdci; // dwdot[CH3]/d[C3H7]
    J[3601] -= dqdci; // dwdot[C2H4]/d[C3H7]
    J[3626] += dqdci; // dwdot[C3H7]/d[C3H7]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac + k_f * sc[24];
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac + k_f * sc[12];
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac - k_r;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 12] -= dqdc[k];
      J[73 * k + 24] -= dqdc[k];
      J[73 * k + 49] += dqdc[k];
    }
  }
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT
  J[5305] += dqdT; // dwdot[C3H7]/dT

  // reaction 319: C3H7 + H (+M) <=> C3H8 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[49];
  k_f = 36130000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 4.42e+61 * exp(-13.545 * logT - (5715.0316735442) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -13.545 * invT + (5715.0316735442) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.315) * exp(-T / 369);
  Fcent2 = 0.315 * exp(-T / 3285);
  Fcent3 = exp(-6667 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = exp(M_LN10 * logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 369 - Fcent2 / 3285 + Fcent3 * 6667 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[50];
  Kc = refCinv * exp(g_RT[1] + g_RT[49] - g_RT[50]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[49]) + (h_RT[50]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[49] -= q; // C3H7
  wdot[50] += q; // C3H8
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[49] -= dqdci; // dwdot[C3H7]/d[H2]
    J[50] += dqdci; // dwdot[C3H8]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[49];
    J[74] -= dqdci;  // dwdot[H]/d[H]
    J[122] -= dqdci; // dwdot[C3H7]/d[H]
    J[123] += dqdci; // dwdot[C3H8]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[366] -= dqdci; // dwdot[H]/d[H2O]
    J[414] -= dqdci; // dwdot[C3H7]/d[H2O]
    J[415] += dqdci; // dwdot[C3H8]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[950] -= dqdci; // dwdot[H]/d[CH4]
    J[998] -= dqdci; // dwdot[C3H7]/d[CH4]
    J[999] += dqdci; // dwdot[C3H8]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1023] -= dqdci; // dwdot[H]/d[CO]
    J[1071] -= dqdci; // dwdot[C3H7]/d[CO]
    J[1072] += dqdci; // dwdot[C3H8]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1096] -= dqdci; // dwdot[H]/d[CO2]
    J[1144] -= dqdci; // dwdot[C3H7]/d[CO2]
    J[1145] += dqdci; // dwdot[C3H8]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1899] -= dqdci; // dwdot[H]/d[C2H6]
    J[1947] -= dqdci; // dwdot[C3H7]/d[C2H6]
    J[1948] += dqdci; // dwdot[C3H8]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3505] -= dqdci; // dwdot[H]/d[AR]
    J[3553] -= dqdci; // dwdot[C3H7]/d[AR]
    J[3554] += dqdci; // dwdot[C3H8]/d[AR]
    // d()/d[C3H7]
    dqdci = +k_f * sc[1];
    J[3578] -= dqdci; // dwdot[H]/d[C3H7]
    J[3626] -= dqdci; // dwdot[C3H7]/d[C3H7]
    J[3627] += dqdci; // dwdot[C3H8]/d[C3H7]
    // d()/d[C3H8]
    dqdci = -k_r;
    J[3651] -= dqdci; // dwdot[H]/d[C3H8]
    J[3699] -= dqdci; // dwdot[C3H7]/d[C3H8]
    J[3700] += dqdci; // dwdot[C3H8]/d[C3H8]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[49];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac + k_f * sc[1];
    dqdc[50] = dcdc_fac - k_r;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] -= dqdc[k];
      J[73 * k + 49] -= dqdc[k];
      J[73 * k + 50] += dqdc[k];
    }
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5305] -= dqdT; // dwdot[C3H7]/dT
  J[5306] += dqdT; // dwdot[C3H8]/dT

  // reaction 11: CO + O (+M) <=> CO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[3] + (6 - 1) * sc[5] + sc[13] +
          (1.5 - 1) * sc[14] + (3.5 - 1) * sc[15] + (3 - 1) * sc[26] +
          (0.5 - 1) * sc[48];
  // forward
  phi_f = sc[2] * sc[14];
  k_f = 18000 * exp(-(1200.17174794426) * invT);
  dlnkfdT = (1200.17174794426) * invT2;
  // pressure-fall-off
  k_0 = 602000000000000 * exp(-(1509.64999741416) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (1509.64999741416) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  dlogFdlogPr = 0.0;
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[15];
  Kc = refCinv * exp(g_RT[2] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[14]) + (h_RT[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] -= q;  // O
  wdot[14] -= q; // CO
  wdot[15] += q; // CO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[2] -= dqdci;  // dwdot[O]/d[H2]
    J[14] -= dqdci; // dwdot[CO]/d[H2]
    J[15] += dqdci; // dwdot[CO2]/d[H2]
    // d()/d[O]
    dqdci = +k_f * sc[14];
    J[148] -= dqdci; // dwdot[O]/d[O]
    J[160] -= dqdci; // dwdot[CO]/d[O]
    J[161] += dqdci; // dwdot[CO2]/d[O]
    // d()/d[O2]
    dqdci = (6 - 1) * dcdc_fac;
    J[221] -= dqdci; // dwdot[O]/d[O2]
    J[233] -= dqdci; // dwdot[CO]/d[O2]
    J[234] += dqdci; // dwdot[CO2]/d[O2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[367] -= dqdci; // dwdot[O]/d[H2O]
    J[379] -= dqdci; // dwdot[CO]/d[H2O]
    J[380] += dqdci; // dwdot[CO2]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[951] -= dqdci; // dwdot[O]/d[CH4]
    J[963] -= dqdci; // dwdot[CO]/d[CH4]
    J[964] += dqdci; // dwdot[CO2]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac + k_f * sc[2];
    J[1024] -= dqdci; // dwdot[O]/d[CO]
    J[1036] -= dqdci; // dwdot[CO]/d[CO]
    J[1037] += dqdci; // dwdot[CO2]/d[CO]
    // d()/d[CO2]
    dqdci = (3.5 - 1) * dcdc_fac - k_r;
    J[1097] -= dqdci; // dwdot[O]/d[CO2]
    J[1109] -= dqdci; // dwdot[CO]/d[CO2]
    J[1110] += dqdci; // dwdot[CO2]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1900] -= dqdci; // dwdot[O]/d[C2H6]
    J[1912] -= dqdci; // dwdot[CO]/d[C2H6]
    J[1913] += dqdci; // dwdot[CO2]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.5 - 1) * dcdc_fac;
    J[3506] -= dqdci; // dwdot[O]/d[AR]
    J[3518] -= dqdci; // dwdot[CO]/d[AR]
    J[3519] += dqdci; // dwdot[CO2]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac + k_f * sc[14];
    dqdc[3] = 6 * dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac + k_f * sc[2];
    dqdc[15] = 3.5 * dcdc_fac - k_r;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.5 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 2] -= dqdc[k];
      J[73 * k + 14] -= dqdc[k];
      J[73 * k + 15] += dqdc[k];
    }
  }
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5270] -= dqdT; // dwdot[CO]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT

  // reaction 184: N2O (+M) <=> N2 + O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.625 - 1) * sc[48];
  // forward
  phi_f = sc[37];
  k_f = 79100000000 * exp(-(28190.1976183804) * invT);
  dlnkfdT = (28190.1976183804) * invT2;
  // pressure-fall-off
  k_0 = 637000000000000 * exp(-(28502.1919511793) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (28502.1919511793) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  dlogFdlogPr = 0.0;
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[47];
  Kc = refC * exp(-g_RT[2] + g_RT[37] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[37]) + (h_RT[2] + h_RT[47]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] += q;  // O
  wdot[37] -= q; // N2O
  wdot[47] += q; // N2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[2] += dqdci;  // dwdot[O]/d[H2]
    J[37] -= dqdci; // dwdot[N2O]/d[H2]
    J[47] += dqdci; // dwdot[N2]/d[H2]
    // d()/d[O]
    dqdci = -k_r * sc[47];
    J[148] += dqdci; // dwdot[O]/d[O]
    J[183] -= dqdci; // dwdot[N2O]/d[O]
    J[193] += dqdci; // dwdot[N2]/d[O]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[367] += dqdci; // dwdot[O]/d[H2O]
    J[402] -= dqdci; // dwdot[N2O]/d[H2O]
    J[412] += dqdci; // dwdot[N2]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[951] += dqdci; // dwdot[O]/d[CH4]
    J[986] -= dqdci; // dwdot[N2O]/d[CH4]
    J[996] += dqdci; // dwdot[N2]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1024] += dqdci; // dwdot[O]/d[CO]
    J[1059] -= dqdci; // dwdot[N2O]/d[CO]
    J[1069] += dqdci; // dwdot[N2]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1097] += dqdci; // dwdot[O]/d[CO2]
    J[1132] -= dqdci; // dwdot[N2O]/d[CO2]
    J[1142] += dqdci; // dwdot[N2]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1900] += dqdci; // dwdot[O]/d[C2H6]
    J[1935] -= dqdci; // dwdot[N2O]/d[C2H6]
    J[1945] += dqdci; // dwdot[N2]/d[C2H6]
    // d()/d[N2O]
    dqdci = +k_f;
    J[2703] += dqdci; // dwdot[O]/d[N2O]
    J[2738] -= dqdci; // dwdot[N2O]/d[N2O]
    J[2748] += dqdci; // dwdot[N2]/d[N2O]
    // d()/d[N2]
    dqdci = -k_r * sc[2];
    J[3433] += dqdci; // dwdot[O]/d[N2]
    J[3468] -= dqdci; // dwdot[N2O]/d[N2]
    J[3478] += dqdci; // dwdot[N2]/d[N2]
    // d()/d[AR]
    dqdci = (0.625 - 1) * dcdc_fac;
    J[3506] += dqdci; // dwdot[O]/d[AR]
    J[3541] -= dqdci; // dwdot[N2O]/d[AR]
    J[3551] += dqdci; // dwdot[N2]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac - k_r * sc[47];
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac + k_f;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac - k_r * sc[2];
    dqdc[48] = 0.625 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 2] += dqdc[k];
      J[73 * k + 37] -= dqdc[k];
      J[73 * k + 47] += dqdc[k];
    }
  }
  J[5258] += dqdT; // dwdot[O]/dT
  J[5293] -= dqdT; // dwdot[N2O]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 236: H + HCN (+M) <=> H2CN (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[40];
  k_f = 33000000;
  dlnkfdT = 0.0;
  // pressure-fall-off
  k_0 = 1.4e+26 * exp(-3.4 * logT - (956.111665028967) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.4 * invT + (956.111665028967) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  dlogFdlogPr = 0.0;
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[41];
  Kc = refCinv * exp(g_RT[1] + g_RT[40] - g_RT[41]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[40]) + (h_RT[41]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // H
  wdot[40] -= q; // HCN
  wdot[41] += q; // H2CN
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[40] -= dqdci; // dwdot[HCN]/d[H2]
    J[41] += dqdci; // dwdot[H2CN]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[40];
    J[74] -= dqdci;  // dwdot[H]/d[H]
    J[113] -= dqdci; // dwdot[HCN]/d[H]
    J[114] += dqdci; // dwdot[H2CN]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[366] -= dqdci; // dwdot[H]/d[H2O]
    J[405] -= dqdci; // dwdot[HCN]/d[H2O]
    J[406] += dqdci; // dwdot[H2CN]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[950] -= dqdci; // dwdot[H]/d[CH4]
    J[989] -= dqdci; // dwdot[HCN]/d[CH4]
    J[990] += dqdci; // dwdot[H2CN]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1023] -= dqdci; // dwdot[H]/d[CO]
    J[1062] -= dqdci; // dwdot[HCN]/d[CO]
    J[1063] += dqdci; // dwdot[H2CN]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1096] -= dqdci; // dwdot[H]/d[CO2]
    J[1135] -= dqdci; // dwdot[HCN]/d[CO2]
    J[1136] += dqdci; // dwdot[H2CN]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1899] -= dqdci; // dwdot[H]/d[C2H6]
    J[1938] -= dqdci; // dwdot[HCN]/d[C2H6]
    J[1939] += dqdci; // dwdot[H2CN]/d[C2H6]
    // d()/d[HCN]
    dqdci = +k_f * sc[1];
    J[2921] -= dqdci; // dwdot[H]/d[HCN]
    J[2960] -= dqdci; // dwdot[HCN]/d[HCN]
    J[2961] += dqdci; // dwdot[H2CN]/d[HCN]
    // d()/d[H2CN]
    dqdci = -k_r;
    J[2994] -= dqdci; // dwdot[H]/d[H2CN]
    J[3033] -= dqdci; // dwdot[HCN]/d[H2CN]
    J[3034] += dqdci; // dwdot[H2CN]/d[H2CN]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3505] -= dqdci; // dwdot[H]/d[AR]
    J[3544] -= dqdci; // dwdot[HCN]/d[AR]
    J[3545] += dqdci; // dwdot[H2CN]/d[AR]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[40];
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac + k_f * sc[1];
    dqdc[41] = dcdc_fac - k_r;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = dcdc_fac;
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = dcdc_fac;
    dqdc[57] = dcdc_fac;
    dqdc[58] = dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] -= dqdc[k];
      J[73 * k + 40] -= dqdc[k];
      J[73 * k + 41] += dqdc[k];
    }
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5296] -= dqdT; // dwdot[HCN]/dT
  J[5297] += dqdT; // dwdot[H2CN]/dT

  // reaction 346: CH3F (+M) <=> CH2(S) + HF (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (9 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + sc[53] + (6 - 1) * sc[56] +
          (6 - 1) * sc[57] + (6 - 1) * sc[58];
  // forward
  phi_f = sc[56];
  k_f = 100000000000000 * exp(-(42773.4165934012) * invT);
  dlnkfdT = (42773.4165934012) * invT2;
  // pressure-fall-off
  k_0 = 1.5e+16 * exp(-(33966.6217251528) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (33966.6217251528) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  dlogFdlogPr = 0.0;
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[11] * sc[53];
  Kc = refC * exp(-g_RT[11] - g_RT[53] + g_RT[56]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[56]) + (h_RT[11] + h_RT[53]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[11] += q; // CH2(S)
  wdot[53] += q; // HF
  wdot[56] -= q; // CH3F
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[11] += dqdci; // dwdot[CH2(S)]/d[H2]
    J[53] += dqdci; // dwdot[HF]/d[H2]
    J[56] -= dqdci; // dwdot[CH3F]/d[H2]
    // d()/d[H2O]
    dqdci = (9 - 1) * dcdc_fac;
    J[376] += dqdci; // dwdot[CH2(S)]/d[H2O]
    J[418] += dqdci; // dwdot[HF]/d[H2O]
    J[421] -= dqdci; // dwdot[CH3F]/d[H2O]
    // d()/d[CH2(S)]
    dqdci = -k_r * sc[53];
    J[814] += dqdci; // dwdot[CH2(S)]/d[CH2(S)]
    J[856] += dqdci; // dwdot[HF]/d[CH2(S)]
    J[859] -= dqdci; // dwdot[CH3F]/d[CH2(S)]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[960] += dqdci;  // dwdot[CH2(S)]/d[CH4]
    J[1002] += dqdci; // dwdot[HF]/d[CH4]
    J[1005] -= dqdci; // dwdot[CH3F]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1033] += dqdci; // dwdot[CH2(S)]/d[CO]
    J[1075] += dqdci; // dwdot[HF]/d[CO]
    J[1078] -= dqdci; // dwdot[CH3F]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1106] += dqdci; // dwdot[CH2(S)]/d[CO2]
    J[1148] += dqdci; // dwdot[HF]/d[CO2]
    J[1151] -= dqdci; // dwdot[CH3F]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1909] += dqdci; // dwdot[CH2(S)]/d[C2H6]
    J[1951] += dqdci; // dwdot[HF]/d[C2H6]
    J[1954] -= dqdci; // dwdot[CH3F]/d[C2H6]
    // d()/d[HF]
    dqdci = (2 - 1) * dcdc_fac - k_r * sc[11];
    J[3880] += dqdci; // dwdot[CH2(S)]/d[HF]
    J[3922] += dqdci; // dwdot[HF]/d[HF]
    J[3925] -= dqdci; // dwdot[CH3F]/d[HF]
    // d()/d[CH3F]
    dqdci = (6 - 1) * dcdc_fac + k_f;
    J[4099] += dqdci; // dwdot[CH2(S)]/d[CH3F]
    J[4141] += dqdci; // dwdot[HF]/d[CH3F]
    J[4144] -= dqdci; // dwdot[CH3F]/d[CH3F]
    // d()/d[CH2F2]
    dqdci = (6 - 1) * dcdc_fac;
    J[4172] += dqdci; // dwdot[CH2(S)]/d[CH2F2]
    J[4214] += dqdci; // dwdot[HF]/d[CH2F2]
    J[4217] -= dqdci; // dwdot[CH3F]/d[CH2F2]
    // d()/d[CHF3]
    dqdci = (6 - 1) * dcdc_fac;
    J[4245] += dqdci; // dwdot[CH2(S)]/d[CHF3]
    J[4287] += dqdci; // dwdot[HF]/d[CHF3]
    J[4290] -= dqdci; // dwdot[CH3F]/d[CHF3]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 9 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac - k_r * sc[53];
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = 2 * dcdc_fac - k_r * sc[11];
    dqdc[54] = dcdc_fac;
    dqdc[55] = dcdc_fac;
    dqdc[56] = 6 * dcdc_fac + k_f;
    dqdc[57] = 6 * dcdc_fac;
    dqdc[58] = 6 * dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac;
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 11] += dqdc[k];
      J[73 * k + 53] += dqdc[k];
      J[73 * k + 56] -= dqdc[k];
    }
  }
  J[5267] += dqdT; // dwdot[CH2(S)]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5312] -= dqdT; // dwdot[CH3F]/dT

  // reaction 433: CF2 (+M) <=> CF + F (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48] + sc[53] +
          (6 - 1) * sc[56] + (6 - 1) * sc[57] + (6 - 1) * sc[58] +
          (6 - 1) * sc[59];
  // forward
  phi_f = sc[64];
  k_f = 530000000000000 * exp(-(59530.5315646983) * invT);
  dlnkfdT = (59530.5315646983) * invT2;
  // pressure-fall-off
  k_0 = 2.29e+15 * exp(-(48042.0950843766) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (48042.0950843766) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  dlogFdlogPr = 0.0;
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[54] * sc[65];
  Kc = refC * exp(-g_RT[54] + g_RT[64] - g_RT[65]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[64]) + (h_RT[54] + h_RT[65]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[54] += q; // F
  wdot[64] -= q; // CF2
  wdot[65] += q; // CF
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[54] += dqdci; // dwdot[F]/d[H2]
    J[64] -= dqdci; // dwdot[CF2]/d[H2]
    J[65] += dqdci; // dwdot[CF]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[419] += dqdci; // dwdot[F]/d[H2O]
    J[429] -= dqdci; // dwdot[CF2]/d[H2O]
    J[430] += dqdci; // dwdot[CF]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[1003] += dqdci; // dwdot[F]/d[CH4]
    J[1013] -= dqdci; // dwdot[CF2]/d[CH4]
    J[1014] += dqdci; // dwdot[CF]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1076] += dqdci; // dwdot[F]/d[CO]
    J[1086] -= dqdci; // dwdot[CF2]/d[CO]
    J[1087] += dqdci; // dwdot[CF]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1149] += dqdci; // dwdot[F]/d[CO2]
    J[1159] -= dqdci; // dwdot[CF2]/d[CO2]
    J[1160] += dqdci; // dwdot[CF]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1952] += dqdci; // dwdot[F]/d[C2H6]
    J[1962] -= dqdci; // dwdot[CF2]/d[C2H6]
    J[1963] += dqdci; // dwdot[CF]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3558] += dqdci; // dwdot[F]/d[AR]
    J[3568] -= dqdci; // dwdot[CF2]/d[AR]
    J[3569] += dqdci; // dwdot[CF]/d[AR]
    // d()/d[HF]
    dqdci = (2 - 1) * dcdc_fac;
    J[3923] += dqdci; // dwdot[F]/d[HF]
    J[3933] -= dqdci; // dwdot[CF2]/d[HF]
    J[3934] += dqdci; // dwdot[CF]/d[HF]
    // d()/d[F]
    dqdci = -k_r * sc[65];
    J[3996] += dqdci; // dwdot[F]/d[F]
    J[4006] -= dqdci; // dwdot[CF2]/d[F]
    J[4007] += dqdci; // dwdot[CF]/d[F]
    // d()/d[CH3F]
    dqdci = (6 - 1) * dcdc_fac;
    J[4142] += dqdci; // dwdot[F]/d[CH3F]
    J[4152] -= dqdci; // dwdot[CF2]/d[CH3F]
    J[4153] += dqdci; // dwdot[CF]/d[CH3F]
    // d()/d[CH2F2]
    dqdci = (6 - 1) * dcdc_fac;
    J[4215] += dqdci; // dwdot[F]/d[CH2F2]
    J[4225] -= dqdci; // dwdot[CF2]/d[CH2F2]
    J[4226] += dqdci; // dwdot[CF]/d[CH2F2]
    // d()/d[CHF3]
    dqdci = (6 - 1) * dcdc_fac;
    J[4288] += dqdci; // dwdot[F]/d[CHF3]
    J[4298] -= dqdci; // dwdot[CF2]/d[CHF3]
    J[4299] += dqdci; // dwdot[CF]/d[CHF3]
    // d()/d[CF4]
    dqdci = (6 - 1) * dcdc_fac;
    J[4361] += dqdci; // dwdot[F]/d[CF4]
    J[4371] -= dqdci; // dwdot[CF2]/d[CF4]
    J[4372] += dqdci; // dwdot[CF]/d[CF4]
    // d()/d[CF2]
    dqdci = +k_f;
    J[4726] += dqdci; // dwdot[F]/d[CF2]
    J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
    J[4737] += dqdci; // dwdot[CF]/d[CF2]
    // d()/d[CF]
    dqdci = -k_r * sc[54];
    J[4799] += dqdci; // dwdot[F]/d[CF]
    J[4809] -= dqdci; // dwdot[CF2]/d[CF]
    J[4810] += dqdci; // dwdot[CF]/d[CF]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = 2 * dcdc_fac;
    dqdc[54] = dcdc_fac - k_r * sc[65];
    dqdc[55] = dcdc_fac;
    dqdc[56] = 6 * dcdc_fac;
    dqdc[57] = 6 * dcdc_fac;
    dqdc[58] = 6 * dcdc_fac;
    dqdc[59] = 6 * dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac + k_f;
    dqdc[65] = dcdc_fac - k_r * sc[54];
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 54] += dqdc[k];
      J[73 * k + 64] -= dqdc[k];
      J[73 * k + 65] += dqdc[k];
    }
  }
  J[5310] += dqdT; // dwdot[F]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT
  J[5321] += dqdT; // dwdot[CF]/dT

  // reaction 498: CF3 (+M) <=> CF2 + F (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48] + sc[53] +
          (6 - 1) * sc[56] + (6 - 1) * sc[57] + (6 - 1) * sc[58];
  // forward
  phi_f = sc[62];
  k_f = 1e+15 * exp(-(41449.9567623348) * invT);
  dlnkfdT = (41449.9567623348) * invT2;
  // pressure-fall-off
  k_0 = 5e+15 * exp(-(30021.9062819096) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = (30021.9062819096) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  dlogFdlogPr = 0.0;
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[54] * sc[64];
  Kc = refC * exp(-g_RT[54] + g_RT[62] - g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[62]) + (h_RT[54] + h_RT[64]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[54] += q; // F
  wdot[62] -= q; // CF3
  wdot[64] += q; // CF2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[54] += dqdci; // dwdot[F]/d[H2]
    J[62] -= dqdci; // dwdot[CF3]/d[H2]
    J[64] += dqdci; // dwdot[CF2]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[419] += dqdci; // dwdot[F]/d[H2O]
    J[427] -= dqdci; // dwdot[CF3]/d[H2O]
    J[429] += dqdci; // dwdot[CF2]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[1003] += dqdci; // dwdot[F]/d[CH4]
    J[1011] -= dqdci; // dwdot[CF3]/d[CH4]
    J[1013] += dqdci; // dwdot[CF2]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[1076] += dqdci; // dwdot[F]/d[CO]
    J[1084] -= dqdci; // dwdot[CF3]/d[CO]
    J[1086] += dqdci; // dwdot[CF2]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[1149] += dqdci; // dwdot[F]/d[CO2]
    J[1157] -= dqdci; // dwdot[CF3]/d[CO2]
    J[1159] += dqdci; // dwdot[CF2]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1952] += dqdci; // dwdot[F]/d[C2H6]
    J[1960] -= dqdci; // dwdot[CF3]/d[C2H6]
    J[1962] += dqdci; // dwdot[CF2]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * dcdc_fac;
    J[3558] += dqdci; // dwdot[F]/d[AR]
    J[3566] -= dqdci; // dwdot[CF3]/d[AR]
    J[3568] += dqdci; // dwdot[CF2]/d[AR]
    // d()/d[HF]
    dqdci = (2 - 1) * dcdc_fac;
    J[3923] += dqdci; // dwdot[F]/d[HF]
    J[3931] -= dqdci; // dwdot[CF3]/d[HF]
    J[3933] += dqdci; // dwdot[CF2]/d[HF]
    // d()/d[F]
    dqdci = -k_r * sc[64];
    J[3996] += dqdci; // dwdot[F]/d[F]
    J[4004] -= dqdci; // dwdot[CF3]/d[F]
    J[4006] += dqdci; // dwdot[CF2]/d[F]
    // d()/d[CH3F]
    dqdci = (6 - 1) * dcdc_fac;
    J[4142] += dqdci; // dwdot[F]/d[CH3F]
    J[4150] -= dqdci; // dwdot[CF3]/d[CH3F]
    J[4152] += dqdci; // dwdot[CF2]/d[CH3F]
    // d()/d[CH2F2]
    dqdci = (6 - 1) * dcdc_fac;
    J[4215] += dqdci; // dwdot[F]/d[CH2F2]
    J[4223] -= dqdci; // dwdot[CF3]/d[CH2F2]
    J[4225] += dqdci; // dwdot[CF2]/d[CH2F2]
    // d()/d[CHF3]
    dqdci = (6 - 1) * dcdc_fac;
    J[4288] += dqdci; // dwdot[F]/d[CHF3]
    J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
    J[4298] += dqdci; // dwdot[CF2]/d[CHF3]
    // d()/d[CF3]
    dqdci = +k_f;
    J[4580] += dqdci; // dwdot[F]/d[CF3]
    J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
    J[4590] += dqdci; // dwdot[CF2]/d[CF3]
    // d()/d[CF2]
    dqdci = -k_r * sc[54];
    J[4726] += dqdci; // dwdot[F]/d[CF2]
    J[4734] -= dqdci; // dwdot[CF3]/d[CF2]
    J[4736] += dqdci; // dwdot[CF2]/d[CF2]
  } else {
    dqdc[0] = 2 * dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = 6 * dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 2 * dcdc_fac;
    dqdc[14] = 1.5 * dcdc_fac;
    dqdc[15] = 2 * dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = dcdc_fac;
    dqdc[23] = dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = 3 * dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    dqdc[38] = dcdc_fac;
    dqdc[39] = dcdc_fac;
    dqdc[40] = dcdc_fac;
    dqdc[41] = dcdc_fac;
    dqdc[42] = dcdc_fac;
    dqdc[43] = dcdc_fac;
    dqdc[44] = dcdc_fac;
    dqdc[45] = dcdc_fac;
    dqdc[46] = dcdc_fac;
    dqdc[47] = dcdc_fac;
    dqdc[48] = 0.7 * dcdc_fac;
    dqdc[49] = dcdc_fac;
    dqdc[50] = dcdc_fac;
    dqdc[51] = dcdc_fac;
    dqdc[52] = dcdc_fac;
    dqdc[53] = 2 * dcdc_fac;
    dqdc[54] = dcdc_fac - k_r * sc[64];
    dqdc[55] = dcdc_fac;
    dqdc[56] = 6 * dcdc_fac;
    dqdc[57] = 6 * dcdc_fac;
    dqdc[58] = 6 * dcdc_fac;
    dqdc[59] = dcdc_fac;
    dqdc[60] = dcdc_fac;
    dqdc[61] = dcdc_fac;
    dqdc[62] = dcdc_fac + k_f;
    dqdc[63] = dcdc_fac;
    dqdc[64] = dcdc_fac - k_r * sc[54];
    dqdc[65] = dcdc_fac;
    dqdc[66] = dcdc_fac;
    dqdc[67] = dcdc_fac;
    dqdc[68] = dcdc_fac;
    dqdc[69] = dcdc_fac;
    dqdc[70] = dcdc_fac;
    dqdc[71] = dcdc_fac;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 54] += dqdc[k];
      J[73 * k + 62] -= dqdc[k];
      J[73 * k + 64] += dqdc[k];
    }
  }
  J[5310] += dqdT; // dwdot[F]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5320] += dqdT; // dwdot[CF2]/dT

  // reaction 0: 2 O + M <=> O2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.4 - 1) * sc[0] + (15.4 - 1) * sc[5] + sc[13] +
          (1.75 - 1) * sc[14] + (3.6 - 1) * sc[15] + (3 - 1) * sc[26] +
          (0.83 - 1) * sc[48];
  // forward
  phi_f = (sc[2] * sc[2]);
  k_f = 120000 * exp(-1 * logT);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[3];
  Kc = refCinv * exp(2.000000 * g_RT[2] - g_RT[3]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[2]) + (h_RT[3]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= 2 * q; // O
  wdot[3] += q;     // O2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2.4 - 1) * q_nocor;
    J[2] += -2 * dqdci; // dwdot[O]/d[H2]
    J[3] += dqdci;      // dwdot[O2]/d[H2]
    // d()/d[O]
    dqdci = +k_f * 2.000000 * sc[2];
    J[148] += -2 * dqdci; // dwdot[O]/d[O]
    J[149] += dqdci;      // dwdot[O2]/d[O]
    // d()/d[O2]
    dqdci = -k_r;
    J[221] += -2 * dqdci; // dwdot[O]/d[O2]
    J[222] += dqdci;      // dwdot[O2]/d[O2]
    // d()/d[H2O]
    dqdci = (15.4 - 1) * q_nocor;
    J[367] += -2 * dqdci; // dwdot[O]/d[H2O]
    J[368] += dqdci;      // dwdot[O2]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * q_nocor;
    J[951] += -2 * dqdci; // dwdot[O]/d[CH4]
    J[952] += dqdci;      // dwdot[O2]/d[CH4]
    // d()/d[CO]
    dqdci = (1.75 - 1) * q_nocor;
    J[1024] += -2 * dqdci; // dwdot[O]/d[CO]
    J[1025] += dqdci;      // dwdot[O2]/d[CO]
    // d()/d[CO2]
    dqdci = (3.6 - 1) * q_nocor;
    J[1097] += -2 * dqdci; // dwdot[O]/d[CO2]
    J[1098] += dqdci;      // dwdot[O2]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * q_nocor;
    J[1900] += -2 * dqdci; // dwdot[O]/d[C2H6]
    J[1901] += dqdci;      // dwdot[O2]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.83 - 1) * q_nocor;
    J[3506] += -2 * dqdci; // dwdot[O]/d[AR]
    J[3507] += dqdci;      // dwdot[O2]/d[AR]
  } else {
    dqdc[0] = 2.4 * q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor + k_f * 2.000000 * sc[2];
    dqdc[3] = q_nocor - k_r;
    dqdc[4] = q_nocor;
    dqdc[5] = 15.4 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 2 * q_nocor;
    dqdc[14] = 1.75 * q_nocor;
    dqdc[15] = 3.6 * q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 3 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    dqdc[38] = q_nocor;
    dqdc[39] = q_nocor;
    dqdc[40] = q_nocor;
    dqdc[41] = q_nocor;
    dqdc[42] = q_nocor;
    dqdc[43] = q_nocor;
    dqdc[44] = q_nocor;
    dqdc[45] = q_nocor;
    dqdc[46] = q_nocor;
    dqdc[47] = q_nocor;
    dqdc[48] = 0.83 * q_nocor;
    dqdc[49] = q_nocor;
    dqdc[50] = q_nocor;
    dqdc[51] = q_nocor;
    dqdc[52] = q_nocor;
    dqdc[53] = q_nocor;
    dqdc[54] = q_nocor;
    dqdc[55] = q_nocor;
    dqdc[56] = q_nocor;
    dqdc[57] = q_nocor;
    dqdc[58] = q_nocor;
    dqdc[59] = q_nocor;
    dqdc[60] = q_nocor;
    dqdc[61] = q_nocor;
    dqdc[62] = q_nocor;
    dqdc[63] = q_nocor;
    dqdc[64] = q_nocor;
    dqdc[65] = q_nocor;
    dqdc[66] = q_nocor;
    dqdc[67] = q_nocor;
    dqdc[68] = q_nocor;
    dqdc[69] = q_nocor;
    dqdc[70] = q_nocor;
    dqdc[71] = q_nocor;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 2] += -2 * dqdc[k];
      J[73 * k + 3] += dqdc[k];
    }
  }
  J[5258] += -2 * dqdT; // dwdot[O]/dT
  J[5259] += dqdT;      // dwdot[O2]/dT

  // reaction 1: H + O + M <=> OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[2];
  k_f = 500000 * exp(-1 * logT);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[4];
  Kc = refCinv * exp(g_RT[1] + g_RT[2] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[2]) + (h_RT[4]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] -= q; // O
  wdot[4] += q; // OH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[1] -= dqdci; // dwdot[H]/d[H2]
    J[2] -= dqdci; // dwdot[O]/d[H2]
    J[4] += dqdci; // dwdot[OH]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[2];
    J[74] -= dqdci; // dwdot[H]/d[H]
    J[75] -= dqdci; // dwdot[O]/d[H]
    J[77] += dqdci; // dwdot[OH]/d[H]
    // d()/d[O]
    dqdci = +k_f * sc[1];
    J[147] -= dqdci; // dwdot[H]/d[O]
    J[148] -= dqdci; // dwdot[O]/d[O]
    J[150] += dqdci; // dwdot[OH]/d[O]
    // d()/d[OH]
    dqdci = -k_r;
    J[293] -= dqdci; // dwdot[H]/d[OH]
    J[294] -= dqdci; // dwdot[O]/d[OH]
    J[296] += dqdci; // dwdot[OH]/d[OH]
    // d()/d[H2O]
    dqdci = (6 - 1) * q_nocor;
    J[366] -= dqdci; // dwdot[H]/d[H2O]
    J[367] -= dqdci; // dwdot[O]/d[H2O]
    J[369] += dqdci; // dwdot[OH]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * q_nocor;
    J[950] -= dqdci; // dwdot[H]/d[CH4]
    J[951] -= dqdci; // dwdot[O]/d[CH4]
    J[953] += dqdci; // dwdot[OH]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * q_nocor;
    J[1023] -= dqdci; // dwdot[H]/d[CO]
    J[1024] -= dqdci; // dwdot[O]/d[CO]
    J[1026] += dqdci; // dwdot[OH]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * q_nocor;
    J[1096] -= dqdci; // dwdot[H]/d[CO2]
    J[1097] -= dqdci; // dwdot[O]/d[CO2]
    J[1099] += dqdci; // dwdot[OH]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * q_nocor;
    J[1899] -= dqdci; // dwdot[H]/d[C2H6]
    J[1900] -= dqdci; // dwdot[O]/d[C2H6]
    J[1902] += dqdci; // dwdot[OH]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.7 - 1) * q_nocor;
    J[3505] -= dqdci; // dwdot[H]/d[AR]
    J[3506] -= dqdci; // dwdot[O]/d[AR]
    J[3508] += dqdci; // dwdot[OH]/d[AR]
  } else {
    dqdc[0] = 2 * q_nocor;
    dqdc[1] = q_nocor + k_f * sc[2];
    dqdc[2] = q_nocor + k_f * sc[1];
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor - k_r;
    dqdc[5] = 6 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 2 * q_nocor;
    dqdc[14] = 1.5 * q_nocor;
    dqdc[15] = 2 * q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 3 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    dqdc[38] = q_nocor;
    dqdc[39] = q_nocor;
    dqdc[40] = q_nocor;
    dqdc[41] = q_nocor;
    dqdc[42] = q_nocor;
    dqdc[43] = q_nocor;
    dqdc[44] = q_nocor;
    dqdc[45] = q_nocor;
    dqdc[46] = q_nocor;
    dqdc[47] = q_nocor;
    dqdc[48] = 0.7 * q_nocor;
    dqdc[49] = q_nocor;
    dqdc[50] = q_nocor;
    dqdc[51] = q_nocor;
    dqdc[52] = q_nocor;
    dqdc[53] = q_nocor;
    dqdc[54] = q_nocor;
    dqdc[55] = q_nocor;
    dqdc[56] = q_nocor;
    dqdc[57] = q_nocor;
    dqdc[58] = q_nocor;
    dqdc[59] = q_nocor;
    dqdc[60] = q_nocor;
    dqdc[61] = q_nocor;
    dqdc[62] = q_nocor;
    dqdc[63] = q_nocor;
    dqdc[64] = q_nocor;
    dqdc[65] = q_nocor;
    dqdc[66] = q_nocor;
    dqdc[67] = q_nocor;
    dqdc[68] = q_nocor;
    dqdc[69] = q_nocor;
    dqdc[70] = q_nocor;
    dqdc[71] = q_nocor;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] -= dqdc[k];
      J[73 * k + 2] -= dqdc[k];
      J[73 * k + 4] += dqdc[k];
    }
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT

  // reaction 32: H + O2 + M <=> HO2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0 - 1) * sc[3] + (0 - 1) * sc[5] + (0.75 - 1) * sc[14] +
          (1.5 - 1) * sc[15] + (1.5 - 1) * sc[26] + (0 - 1) * sc[47] +
          (0 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[3];
  k_f = 2800000 * exp(-0.86 * logT);
  dlnkfdT = -0.86 * invT;
  // reverse
  phi_r = sc[6];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[3]) + (h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O2
  wdot[6] += q; // HO2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H]
    dqdci = +k_f * sc[3];
    J[74] -= dqdci; // dwdot[H]/d[H]
    J[76] -= dqdci; // dwdot[O2]/d[H]
    J[79] += dqdci; // dwdot[HO2]/d[H]
    // d()/d[O2]
    dqdci = (0 - 1) * q_nocor + k_f * sc[1];
    J[220] -= dqdci; // dwdot[H]/d[O2]
    J[222] -= dqdci; // dwdot[O2]/d[O2]
    J[225] += dqdci; // dwdot[HO2]/d[O2]
    // d()/d[H2O]
    dqdci = (0 - 1) * q_nocor;
    J[366] -= dqdci; // dwdot[H]/d[H2O]
    J[368] -= dqdci; // dwdot[O2]/d[H2O]
    J[371] += dqdci; // dwdot[HO2]/d[H2O]
    // d()/d[HO2]
    dqdci = -k_r;
    J[439] -= dqdci; // dwdot[H]/d[HO2]
    J[441] -= dqdci; // dwdot[O2]/d[HO2]
    J[444] += dqdci; // dwdot[HO2]/d[HO2]
    // d()/d[CO]
    dqdci = (0.75 - 1) * q_nocor;
    J[1023] -= dqdci; // dwdot[H]/d[CO]
    J[1025] -= dqdci; // dwdot[O2]/d[CO]
    J[1028] += dqdci; // dwdot[HO2]/d[CO]
    // d()/d[CO2]
    dqdci = (1.5 - 1) * q_nocor;
    J[1096] -= dqdci; // dwdot[H]/d[CO2]
    J[1098] -= dqdci; // dwdot[O2]/d[CO2]
    J[1101] += dqdci; // dwdot[HO2]/d[CO2]
    // d()/d[C2H6]
    dqdci = (1.5 - 1) * q_nocor;
    J[1899] -= dqdci; // dwdot[H]/d[C2H6]
    J[1901] -= dqdci; // dwdot[O2]/d[C2H6]
    J[1904] += dqdci; // dwdot[HO2]/d[C2H6]
    // d()/d[N2]
    dqdci = (0 - 1) * q_nocor;
    J[3432] -= dqdci; // dwdot[H]/d[N2]
    J[3434] -= dqdci; // dwdot[O2]/d[N2]
    J[3437] += dqdci; // dwdot[HO2]/d[N2]
    // d()/d[AR]
    dqdci = (0 - 1) * q_nocor;
    J[3505] -= dqdci; // dwdot[H]/d[AR]
    J[3507] -= dqdci; // dwdot[O2]/d[AR]
    J[3510] += dqdci; // dwdot[HO2]/d[AR]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor + k_f * sc[3];
    dqdc[2] = q_nocor;
    dqdc[3] = +k_f * sc[1];
    dqdc[4] = q_nocor;
    dqdc[6] = q_nocor - k_r;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = 0.75 * q_nocor;
    dqdc[15] = 1.5 * q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 1.5 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    dqdc[38] = q_nocor;
    dqdc[39] = q_nocor;
    dqdc[40] = q_nocor;
    dqdc[41] = q_nocor;
    dqdc[42] = q_nocor;
    dqdc[43] = q_nocor;
    dqdc[44] = q_nocor;
    dqdc[45] = q_nocor;
    dqdc[46] = q_nocor;
    dqdc[49] = q_nocor;
    dqdc[50] = q_nocor;
    dqdc[51] = q_nocor;
    dqdc[52] = q_nocor;
    dqdc[53] = q_nocor;
    dqdc[54] = q_nocor;
    dqdc[55] = q_nocor;
    dqdc[56] = q_nocor;
    dqdc[57] = q_nocor;
    dqdc[58] = q_nocor;
    dqdc[59] = q_nocor;
    dqdc[60] = q_nocor;
    dqdc[61] = q_nocor;
    dqdc[62] = q_nocor;
    dqdc[63] = q_nocor;
    dqdc[64] = q_nocor;
    dqdc[65] = q_nocor;
    dqdc[66] = q_nocor;
    dqdc[67] = q_nocor;
    dqdc[68] = q_nocor;
    dqdc[69] = q_nocor;
    dqdc[70] = q_nocor;
    dqdc[71] = q_nocor;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] -= dqdc[k];
      J[73 * k + 3] -= dqdc[k];
      J[73 * k + 6] += dqdc[k];
    }
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT

  // reaction 33: H + O2 + O2 <=> HO2 + O2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * (sc[3] * sc[3]);
  k_f = 20800000 * exp(-1.24 * logT);
  dlnkfdT = -1.24 * invT;
  // reverse
  phi_r = sc[3] * sc[6];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[1] + 2.000000 * h_RT[3]) + (h_RT[3] + h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O2
  wdot[6] += q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[3];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[76] -= dqdci; // dwdot[O2]/d[H]
  J[79] += dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * 2.000000 * sc[3] - k_r * sc[6];
  J[220] -= dqdci; // dwdot[H]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[3];
  J[439] -= dqdci; // dwdot[H]/d[HO2]
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT

  // reaction 34: H + O2 + H2O <=> HO2 + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[3] * sc[5];
  k_f = 11260000 * exp(-0.76 * logT);
  dlnkfdT = -0.76 * invT;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[1] + h_RT[3] + h_RT[5]) + (h_RT[5] + h_RT[6]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O2
  wdot[6] += q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[5];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[76] -= dqdci; // dwdot[O2]/d[H]
  J[79] += dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * sc[5];
  J[220] -= dqdci; // dwdot[H]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  // d()/d[H2O]
  dqdci = +k_f * sc[1] * sc[3] - k_r * sc[6];
  J[366] -= dqdci; // dwdot[H]/d[H2O]
  J[368] -= dqdci; // dwdot[O2]/d[H2O]
  J[371] += dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[439] -= dqdci; // dwdot[H]/d[HO2]
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT

  // reaction 35: H + O2 + N2 <=> HO2 + N2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[3] * sc[47];
  k_f = 26000000 * exp(-1.24 * logT);
  dlnkfdT = -1.24 * invT;
  // reverse
  phi_r = sc[6] * sc[47];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[1] + h_RT[3] + h_RT[47]) + (h_RT[6] + h_RT[47]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O2
  wdot[6] += q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[47];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[76] -= dqdci; // dwdot[O2]/d[H]
  J[79] += dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * sc[47];
  J[220] -= dqdci; // dwdot[H]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[47];
  J[439] -= dqdci; // dwdot[H]/d[HO2]
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/d[N2]
  dqdci = +k_f * sc[1] * sc[3] - k_r * sc[6];
  J[3432] -= dqdci; // dwdot[H]/d[N2]
  J[3434] -= dqdci; // dwdot[O2]/d[N2]
  J[3437] += dqdci; // dwdot[HO2]/d[N2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT

  // reaction 36: H + O2 + AR <=> HO2 + AR
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[3] * sc[48];
  k_f = 700000 * exp(-0.8 * logT);
  dlnkfdT = -0.8 * invT;
  // reverse
  phi_r = sc[6] * sc[48];
  Kc = refCinv * exp(g_RT[1] + g_RT[3] - g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[1] + h_RT[3] + h_RT[48]) + (h_RT[6] + h_RT[48]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[3] -= q; // O2
  wdot[6] += q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[3] * sc[48];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[76] -= dqdci; // dwdot[O2]/d[H]
  J[79] += dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[1] * sc[48];
  J[220] -= dqdci; // dwdot[H]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[48];
  J[439] -= dqdci; // dwdot[H]/d[HO2]
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  // d()/d[AR]
  dqdci = +k_f * sc[1] * sc[3] - k_r * sc[6];
  J[3505] -= dqdci; // dwdot[H]/d[AR]
  J[3507] -= dqdci; // dwdot[O2]/d[AR]
  J[3510] += dqdci; // dwdot[HO2]/d[AR]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT

  // reaction 38: 2 H + M <=> H2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0 - 1) * sc[0] + (0 - 1) * sc[5] + sc[13] +
          (0 - 1) * sc[15] + (3 - 1) * sc[26] + (0.63 - 1) * sc[48];
  // forward
  phi_f = (sc[1] * sc[1]);
  k_f = 1000000 * exp(-1 * logT);
  dlnkfdT = -1 * invT;
  // reverse
  phi_r = sc[0];
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[1]) + (h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (0 - 1) * q_nocor - k_r;
    J[0] += dqdci;      // dwdot[H2]/d[H2]
    J[1] += -2 * dqdci; // dwdot[H]/d[H2]
    // d()/d[H]
    dqdci = +k_f * 2.000000 * sc[1];
    J[73] += dqdci;      // dwdot[H2]/d[H]
    J[74] += -2 * dqdci; // dwdot[H]/d[H]
    // d()/d[H2O]
    dqdci = (0 - 1) * q_nocor;
    J[365] += dqdci;      // dwdot[H2]/d[H2O]
    J[366] += -2 * dqdci; // dwdot[H]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * q_nocor;
    J[949] += dqdci;      // dwdot[H2]/d[CH4]
    J[950] += -2 * dqdci; // dwdot[H]/d[CH4]
    // d()/d[CO2]
    dqdci = (0 - 1) * q_nocor;
    J[1095] += dqdci;      // dwdot[H2]/d[CO2]
    J[1096] += -2 * dqdci; // dwdot[H]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * q_nocor;
    J[1898] += dqdci;      // dwdot[H2]/d[C2H6]
    J[1899] += -2 * dqdci; // dwdot[H]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.63 - 1) * q_nocor;
    J[3504] += dqdci;      // dwdot[H2]/d[AR]
    J[3505] += -2 * dqdci; // dwdot[H]/d[AR]
  } else {
    dqdc[0] = -k_r;
    dqdc[1] = q_nocor + k_f * 2.000000 * sc[1];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 2 * q_nocor;
    dqdc[14] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 3 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    dqdc[38] = q_nocor;
    dqdc[39] = q_nocor;
    dqdc[40] = q_nocor;
    dqdc[41] = q_nocor;
    dqdc[42] = q_nocor;
    dqdc[43] = q_nocor;
    dqdc[44] = q_nocor;
    dqdc[45] = q_nocor;
    dqdc[46] = q_nocor;
    dqdc[47] = q_nocor;
    dqdc[48] = 0.63 * q_nocor;
    dqdc[49] = q_nocor;
    dqdc[50] = q_nocor;
    dqdc[51] = q_nocor;
    dqdc[52] = q_nocor;
    dqdc[53] = q_nocor;
    dqdc[54] = q_nocor;
    dqdc[55] = q_nocor;
    dqdc[56] = q_nocor;
    dqdc[57] = q_nocor;
    dqdc[58] = q_nocor;
    dqdc[59] = q_nocor;
    dqdc[60] = q_nocor;
    dqdc[61] = q_nocor;
    dqdc[62] = q_nocor;
    dqdc[63] = q_nocor;
    dqdc[64] = q_nocor;
    dqdc[65] = q_nocor;
    dqdc[66] = q_nocor;
    dqdc[67] = q_nocor;
    dqdc[68] = q_nocor;
    dqdc[69] = q_nocor;
    dqdc[70] = q_nocor;
    dqdc[71] = q_nocor;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 0] += dqdc[k];
      J[73 * k + 1] += -2 * dqdc[k];
    }
  }
  J[5256] += dqdT;      // dwdot[H2]/dT
  J[5257] += -2 * dqdT; // dwdot[H]/dT

  // reaction 39: 2 H + H2 <=> H2 + H2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * (sc[1] * sc[1]);
  k_f = 90000 * exp(-0.6 * logT);
  dlnkfdT = -0.6 * invT;
  // reverse
  phi_r = (sc[0] * sc[0]);
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[0] + 2.000000 * h_RT[1]) + (2.000000 * h_RT[0]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // d()/d[H2]
  dqdci = +k_f * sc[1] * sc[1] - k_r * 2.000000 * sc[0];
  J[0] += dqdci;      // dwdot[H2]/d[H2]
  J[1] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[0] * 2.000000 * sc[1];
  J[73] += dqdci;      // dwdot[H2]/d[H]
  J[74] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/dT
  J[5256] += dqdT;      // dwdot[H2]/dT
  J[5257] += -2 * dqdT; // dwdot[H]/dT

  // reaction 40: 2 H + H2O <=> H2 + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[5];
  k_f = 60000000 * exp(-1.25 * logT);
  dlnkfdT = -1.25 * invT;
  // reverse
  phi_r = sc[0] * sc[5];
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[5]) + (h_RT[0] + h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // d()/d[H2]
  dqdci = -k_r * sc[5];
  J[0] += dqdci;      // dwdot[H2]/d[H2]
  J[1] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[5];
  J[73] += dqdci;      // dwdot[H2]/d[H]
  J[74] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * sc[1] * sc[1] - k_r * sc[0];
  J[365] += dqdci;      // dwdot[H2]/d[H2O]
  J[366] += -2 * dqdci; // dwdot[H]/d[H2O]
  // d()/dT
  J[5256] += dqdT;      // dwdot[H2]/dT
  J[5257] += -2 * dqdT; // dwdot[H]/dT

  // reaction 41: 2 H + CO2 <=> H2 + CO2
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[1] * sc[1]) * sc[15];
  k_f = 550000000 * exp(-2 * logT);
  dlnkfdT = -2 * invT;
  // reverse
  phi_r = sc[0] * sc[15];
  Kc = refCinv * exp(-g_RT[0] + 2.000000 * g_RT[1]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[1] + h_RT[15]) + (h_RT[0] + h_RT[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;     // H2
  wdot[1] -= 2 * q; // H
  // d()/d[H2]
  dqdci = -k_r * sc[15];
  J[0] += dqdci;      // dwdot[H2]/d[H2]
  J[1] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[1] * sc[15];
  J[73] += dqdci;      // dwdot[H2]/d[H]
  J[74] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/d[CO2]
  dqdci = +k_f * sc[1] * sc[1] - k_r * sc[0];
  J[1095] += dqdci;      // dwdot[H2]/d[CO2]
  J[1096] += -2 * dqdci; // dwdot[H]/d[CO2]
  // d()/dT
  J[5256] += dqdT;      // dwdot[H2]/dT
  J[5257] += -2 * dqdT; // dwdot[H]/dT

  // reaction 42: H + OH + M <=> H2O + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0.73 - 1) * sc[0] + (3.65 - 1) * sc[5] + sc[13] +
          (3 - 1) * sc[26] + (0.38 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[4];
  k_f = 22000000000 * exp(-2 * logT);
  dlnkfdT = -2 * invT;
  // reverse
  phi_r = sc[5];
  Kc = refCinv * exp(g_RT[1] + g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[4]) + (h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (0.73 - 1) * q_nocor;
    J[1] -= dqdci; // dwdot[H]/d[H2]
    J[4] -= dqdci; // dwdot[OH]/d[H2]
    J[5] += dqdci; // dwdot[H2O]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[4];
    J[74] -= dqdci; // dwdot[H]/d[H]
    J[77] -= dqdci; // dwdot[OH]/d[H]
    J[78] += dqdci; // dwdot[H2O]/d[H]
    // d()/d[OH]
    dqdci = +k_f * sc[1];
    J[293] -= dqdci; // dwdot[H]/d[OH]
    J[296] -= dqdci; // dwdot[OH]/d[OH]
    J[297] += dqdci; // dwdot[H2O]/d[OH]
    // d()/d[H2O]
    dqdci = (3.65 - 1) * q_nocor - k_r;
    J[366] -= dqdci; // dwdot[H]/d[H2O]
    J[369] -= dqdci; // dwdot[OH]/d[H2O]
    J[370] += dqdci; // dwdot[H2O]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * q_nocor;
    J[950] -= dqdci; // dwdot[H]/d[CH4]
    J[953] -= dqdci; // dwdot[OH]/d[CH4]
    J[954] += dqdci; // dwdot[H2O]/d[CH4]
    // d()/d[C2H6]
    dqdci = (3 - 1) * q_nocor;
    J[1899] -= dqdci; // dwdot[H]/d[C2H6]
    J[1902] -= dqdci; // dwdot[OH]/d[C2H6]
    J[1903] += dqdci; // dwdot[H2O]/d[C2H6]
    // d()/d[AR]
    dqdci = (0.38 - 1) * q_nocor;
    J[3505] -= dqdci; // dwdot[H]/d[AR]
    J[3508] -= dqdci; // dwdot[OH]/d[AR]
    J[3509] += dqdci; // dwdot[H2O]/d[AR]
  } else {
    dqdc[0] = 0.73 * q_nocor;
    dqdc[1] = q_nocor + k_f * sc[4];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor + k_f * sc[1];
    dqdc[5] = 3.65 * q_nocor - k_r;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 2 * q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 3 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    dqdc[38] = q_nocor;
    dqdc[39] = q_nocor;
    dqdc[40] = q_nocor;
    dqdc[41] = q_nocor;
    dqdc[42] = q_nocor;
    dqdc[43] = q_nocor;
    dqdc[44] = q_nocor;
    dqdc[45] = q_nocor;
    dqdc[46] = q_nocor;
    dqdc[47] = q_nocor;
    dqdc[48] = 0.38 * q_nocor;
    dqdc[49] = q_nocor;
    dqdc[50] = q_nocor;
    dqdc[51] = q_nocor;
    dqdc[52] = q_nocor;
    dqdc[53] = q_nocor;
    dqdc[54] = q_nocor;
    dqdc[55] = q_nocor;
    dqdc[56] = q_nocor;
    dqdc[57] = q_nocor;
    dqdc[58] = q_nocor;
    dqdc[59] = q_nocor;
    dqdc[60] = q_nocor;
    dqdc[61] = q_nocor;
    dqdc[62] = q_nocor;
    dqdc[63] = q_nocor;
    dqdc[64] = q_nocor;
    dqdc[65] = q_nocor;
    dqdc[66] = q_nocor;
    dqdc[67] = q_nocor;
    dqdc[68] = q_nocor;
    dqdc[69] = q_nocor;
    dqdc[70] = q_nocor;
    dqdc[71] = q_nocor;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] -= dqdc[k];
      J[73 * k + 4] -= dqdc[k];
      J[73 * k + 5] += dqdc[k];
    }
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT

  // reaction 165: HCO + H2O <=> CO + H + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[16];
  k_f = 1500000000000 * exp(-1 * logT - (8554.68331868023) * invT);
  dlnkfdT = -1 * invT + (8554.68331868023) * invT2;
  // reverse
  phi_r = sc[1] * sc[5] * sc[14];
  Kc = refC * exp(-g_RT[1] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[5] + h_RT[16]) + (h_RT[1] + h_RT[5] + h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[5] * sc[14];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[87] += dqdci; // dwdot[CO]/d[H]
  J[89] -= dqdci; // dwdot[HCO]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * sc[16] - k_r * sc[1] * sc[14];
  J[366] += dqdci; // dwdot[H]/d[H2O]
  J[379] += dqdci; // dwdot[CO]/d[H2O]
  J[381] -= dqdci; // dwdot[HCO]/d[H2O]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * sc[5];
  J[1023] += dqdci; // dwdot[H]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[5];
  J[1169] += dqdci; // dwdot[H]/d[HCO]
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT

  // reaction 166: HCO + M <=> CO + H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (0 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[16];
  k_f = 187000000000 * exp(-1 * logT - (8554.68331868023) * invT);
  dlnkfdT = -1 * invT + (8554.68331868023) * invT2;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = refC * exp(-g_RT[1] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16]) + (h_RT[1] + h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[1] += dqdci;  // dwdot[H]/d[H2]
    J[14] += dqdci; // dwdot[CO]/d[H2]
    J[16] -= dqdci; // dwdot[HCO]/d[H2]
    // d()/d[H]
    dqdci = -k_r * sc[14];
    J[74] += dqdci; // dwdot[H]/d[H]
    J[87] += dqdci; // dwdot[CO]/d[H]
    J[89] -= dqdci; // dwdot[HCO]/d[H]
    // d()/d[H2O]
    dqdci = (0 - 1) * q_nocor;
    J[366] += dqdci; // dwdot[H]/d[H2O]
    J[379] += dqdci; // dwdot[CO]/d[H2O]
    J[381] -= dqdci; // dwdot[HCO]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * q_nocor;
    J[950] += dqdci; // dwdot[H]/d[CH4]
    J[963] += dqdci; // dwdot[CO]/d[CH4]
    J[965] -= dqdci; // dwdot[HCO]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * q_nocor - k_r * sc[1];
    J[1023] += dqdci; // dwdot[H]/d[CO]
    J[1036] += dqdci; // dwdot[CO]/d[CO]
    J[1038] -= dqdci; // dwdot[HCO]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * q_nocor;
    J[1096] += dqdci; // dwdot[H]/d[CO2]
    J[1109] += dqdci; // dwdot[CO]/d[CO2]
    J[1111] -= dqdci; // dwdot[HCO]/d[CO2]
    // d()/d[HCO]
    dqdci = +k_f;
    J[1169] += dqdci; // dwdot[H]/d[HCO]
    J[1182] += dqdci; // dwdot[CO]/d[HCO]
    J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
    // d()/d[C2H6]
    dqdci = (3 - 1) * q_nocor;
    J[1899] += dqdci; // dwdot[H]/d[C2H6]
    J[1912] += dqdci; // dwdot[CO]/d[C2H6]
    J[1914] -= dqdci; // dwdot[HCO]/d[C2H6]
  } else {
    dqdc[0] = 2 * q_nocor;
    dqdc[1] = q_nocor - k_r * sc[14];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 2 * q_nocor;
    dqdc[14] = 1.5 * q_nocor - k_r * sc[1];
    dqdc[15] = 2 * q_nocor;
    dqdc[16] = q_nocor + k_f;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 3 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    dqdc[38] = q_nocor;
    dqdc[39] = q_nocor;
    dqdc[40] = q_nocor;
    dqdc[41] = q_nocor;
    dqdc[42] = q_nocor;
    dqdc[43] = q_nocor;
    dqdc[44] = q_nocor;
    dqdc[45] = q_nocor;
    dqdc[46] = q_nocor;
    dqdc[47] = q_nocor;
    dqdc[48] = q_nocor;
    dqdc[49] = q_nocor;
    dqdc[50] = q_nocor;
    dqdc[51] = q_nocor;
    dqdc[52] = q_nocor;
    dqdc[53] = q_nocor;
    dqdc[54] = q_nocor;
    dqdc[55] = q_nocor;
    dqdc[56] = q_nocor;
    dqdc[57] = q_nocor;
    dqdc[58] = q_nocor;
    dqdc[59] = q_nocor;
    dqdc[60] = q_nocor;
    dqdc[61] = q_nocor;
    dqdc[62] = q_nocor;
    dqdc[63] = q_nocor;
    dqdc[64] = q_nocor;
    dqdc[65] = q_nocor;
    dqdc[66] = q_nocor;
    dqdc[67] = q_nocor;
    dqdc[68] = q_nocor;
    dqdc[69] = q_nocor;
    dqdc[70] = q_nocor;
    dqdc[71] = q_nocor;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] += dqdc[k];
      J[73 * k + 14] += dqdc[k];
      J[73 * k + 16] -= dqdc[k];
    }
  }
  J[5257] += dqdT; // dwdot[H]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT

  // reaction 186: NO + O + M <=> NO2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[2] * sc[35];
  k_f = 106000000 * exp(-1.41 * logT);
  dlnkfdT = -1.41 * invT;
  // reverse
  phi_r = sc[36];
  Kc = refCinv * exp(g_RT[2] + g_RT[35] - g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[35]) + (h_RT[36]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[35] -= q; // NO
  wdot[36] += q; // NO2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[2] -= dqdci;  // dwdot[O]/d[H2]
    J[35] -= dqdci; // dwdot[NO]/d[H2]
    J[36] += dqdci; // dwdot[NO2]/d[H2]
    // d()/d[O]
    dqdci = +k_f * sc[35];
    J[148] -= dqdci; // dwdot[O]/d[O]
    J[181] -= dqdci; // dwdot[NO]/d[O]
    J[182] += dqdci; // dwdot[NO2]/d[O]
    // d()/d[H2O]
    dqdci = (6 - 1) * q_nocor;
    J[367] -= dqdci; // dwdot[O]/d[H2O]
    J[400] -= dqdci; // dwdot[NO]/d[H2O]
    J[401] += dqdci; // dwdot[NO2]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * q_nocor;
    J[951] -= dqdci; // dwdot[O]/d[CH4]
    J[984] -= dqdci; // dwdot[NO]/d[CH4]
    J[985] += dqdci; // dwdot[NO2]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * q_nocor;
    J[1024] -= dqdci; // dwdot[O]/d[CO]
    J[1057] -= dqdci; // dwdot[NO]/d[CO]
    J[1058] += dqdci; // dwdot[NO2]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * q_nocor;
    J[1097] -= dqdci; // dwdot[O]/d[CO2]
    J[1130] -= dqdci; // dwdot[NO]/d[CO2]
    J[1131] += dqdci; // dwdot[NO2]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * q_nocor;
    J[1900] -= dqdci; // dwdot[O]/d[C2H6]
    J[1933] -= dqdci; // dwdot[NO]/d[C2H6]
    J[1934] += dqdci; // dwdot[NO2]/d[C2H6]
    // d()/d[NO]
    dqdci = +k_f * sc[2];
    J[2557] -= dqdci; // dwdot[O]/d[NO]
    J[2590] -= dqdci; // dwdot[NO]/d[NO]
    J[2591] += dqdci; // dwdot[NO2]/d[NO]
    // d()/d[NO2]
    dqdci = -k_r;
    J[2630] -= dqdci; // dwdot[O]/d[NO2]
    J[2663] -= dqdci; // dwdot[NO]/d[NO2]
    J[2664] += dqdci; // dwdot[NO2]/d[NO2]
    // d()/d[AR]
    dqdci = (0.7 - 1) * q_nocor;
    J[3506] -= dqdci; // dwdot[O]/d[AR]
    J[3539] -= dqdci; // dwdot[NO]/d[AR]
    J[3540] += dqdci; // dwdot[NO2]/d[AR]
  } else {
    dqdc[0] = 2 * q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor + k_f * sc[35];
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 6 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 2 * q_nocor;
    dqdc[14] = 1.5 * q_nocor;
    dqdc[15] = 2 * q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 3 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor + k_f * sc[2];
    dqdc[36] = q_nocor - k_r;
    dqdc[37] = q_nocor;
    dqdc[38] = q_nocor;
    dqdc[39] = q_nocor;
    dqdc[40] = q_nocor;
    dqdc[41] = q_nocor;
    dqdc[42] = q_nocor;
    dqdc[43] = q_nocor;
    dqdc[44] = q_nocor;
    dqdc[45] = q_nocor;
    dqdc[46] = q_nocor;
    dqdc[47] = q_nocor;
    dqdc[48] = 0.7 * q_nocor;
    dqdc[49] = q_nocor;
    dqdc[50] = q_nocor;
    dqdc[51] = q_nocor;
    dqdc[52] = q_nocor;
    dqdc[53] = q_nocor;
    dqdc[54] = q_nocor;
    dqdc[55] = q_nocor;
    dqdc[56] = q_nocor;
    dqdc[57] = q_nocor;
    dqdc[58] = q_nocor;
    dqdc[59] = q_nocor;
    dqdc[60] = q_nocor;
    dqdc[61] = q_nocor;
    dqdc[62] = q_nocor;
    dqdc[63] = q_nocor;
    dqdc[64] = q_nocor;
    dqdc[65] = q_nocor;
    dqdc[66] = q_nocor;
    dqdc[67] = q_nocor;
    dqdc[68] = q_nocor;
    dqdc[69] = q_nocor;
    dqdc[70] = q_nocor;
    dqdc[71] = q_nocor;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 2] -= dqdc[k];
      J[73 * k + 35] -= dqdc[k];
      J[73 * k + 36] += dqdc[k];
    }
  }
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5292] += dqdT; // dwdot[NO2]/dT

  // reaction 204: NNH + M <=> H + N2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[34];
  k_f = 130000000 * exp(-0.11 * logT - (2506.0189957075) * invT);
  dlnkfdT = -0.11 * invT + (2506.0189957075) * invT2;
  // reverse
  phi_r = sc[1] * sc[47];
  Kc = refC * exp(-g_RT[1] + g_RT[34] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[34]) + (h_RT[1] + h_RT[47]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[34] -= q; // NNH
  wdot[47] += q; // N2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[1] += dqdci;  // dwdot[H]/d[H2]
    J[34] -= dqdci; // dwdot[NNH]/d[H2]
    J[47] += dqdci; // dwdot[N2]/d[H2]
    // d()/d[H]
    dqdci = -k_r * sc[47];
    J[74] += dqdci;  // dwdot[H]/d[H]
    J[107] -= dqdci; // dwdot[NNH]/d[H]
    J[120] += dqdci; // dwdot[N2]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * q_nocor;
    J[366] += dqdci; // dwdot[H]/d[H2O]
    J[399] -= dqdci; // dwdot[NNH]/d[H2O]
    J[412] += dqdci; // dwdot[N2]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * q_nocor;
    J[950] += dqdci; // dwdot[H]/d[CH4]
    J[983] -= dqdci; // dwdot[NNH]/d[CH4]
    J[996] += dqdci; // dwdot[N2]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * q_nocor;
    J[1023] += dqdci; // dwdot[H]/d[CO]
    J[1056] -= dqdci; // dwdot[NNH]/d[CO]
    J[1069] += dqdci; // dwdot[N2]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * q_nocor;
    J[1096] += dqdci; // dwdot[H]/d[CO2]
    J[1129] -= dqdci; // dwdot[NNH]/d[CO2]
    J[1142] += dqdci; // dwdot[N2]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * q_nocor;
    J[1899] += dqdci; // dwdot[H]/d[C2H6]
    J[1932] -= dqdci; // dwdot[NNH]/d[C2H6]
    J[1945] += dqdci; // dwdot[N2]/d[C2H6]
    // d()/d[NNH]
    dqdci = +k_f;
    J[2483] += dqdci; // dwdot[H]/d[NNH]
    J[2516] -= dqdci; // dwdot[NNH]/d[NNH]
    J[2529] += dqdci; // dwdot[N2]/d[NNH]
    // d()/d[N2]
    dqdci = -k_r * sc[1];
    J[3432] += dqdci; // dwdot[H]/d[N2]
    J[3465] -= dqdci; // dwdot[NNH]/d[N2]
    J[3478] += dqdci; // dwdot[N2]/d[N2]
    // d()/d[AR]
    dqdci = (0.7 - 1) * q_nocor;
    J[3505] += dqdci; // dwdot[H]/d[AR]
    J[3538] -= dqdci; // dwdot[NNH]/d[AR]
    J[3551] += dqdci; // dwdot[N2]/d[AR]
  } else {
    dqdc[0] = 2 * q_nocor;
    dqdc[1] = q_nocor - k_r * sc[47];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 6 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 2 * q_nocor;
    dqdc[14] = 1.5 * q_nocor;
    dqdc[15] = 2 * q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 3 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor + k_f;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    dqdc[38] = q_nocor;
    dqdc[39] = q_nocor;
    dqdc[40] = q_nocor;
    dqdc[41] = q_nocor;
    dqdc[42] = q_nocor;
    dqdc[43] = q_nocor;
    dqdc[44] = q_nocor;
    dqdc[45] = q_nocor;
    dqdc[46] = q_nocor;
    dqdc[47] = q_nocor - k_r * sc[1];
    dqdc[48] = 0.7 * q_nocor;
    dqdc[49] = q_nocor;
    dqdc[50] = q_nocor;
    dqdc[51] = q_nocor;
    dqdc[52] = q_nocor;
    dqdc[53] = q_nocor;
    dqdc[54] = q_nocor;
    dqdc[55] = q_nocor;
    dqdc[56] = q_nocor;
    dqdc[57] = q_nocor;
    dqdc[58] = q_nocor;
    dqdc[59] = q_nocor;
    dqdc[60] = q_nocor;
    dqdc[61] = q_nocor;
    dqdc[62] = q_nocor;
    dqdc[63] = q_nocor;
    dqdc[64] = q_nocor;
    dqdc[65] = q_nocor;
    dqdc[66] = q_nocor;
    dqdc[67] = q_nocor;
    dqdc[68] = q_nocor;
    dqdc[69] = q_nocor;
    dqdc[70] = q_nocor;
    dqdc[71] = q_nocor;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] += dqdc[k];
      J[73 * k + 34] -= dqdc[k];
      J[73 * k + 47] += dqdc[k];
    }
  }
  J[5257] += dqdT; // dwdot[H]/dT
  J[5290] -= dqdT; // dwdot[NNH]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 211: H + NO + M <=> HNO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[1] * sc[35];
  k_f = 44800000 * exp(-1.32 * logT - (372.380332695493) * invT);
  dlnkfdT = -1.32 * invT + (372.380332695493) * invT2;
  // reverse
  phi_r = sc[38];
  Kc = refCinv * exp(g_RT[1] + g_RT[35] - g_RT[38]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[35]) + (h_RT[38]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[35] -= q; // NO
  wdot[38] += q; // HNO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[1] -= dqdci;  // dwdot[H]/d[H2]
    J[35] -= dqdci; // dwdot[NO]/d[H2]
    J[38] += dqdci; // dwdot[HNO]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[35];
    J[74] -= dqdci;  // dwdot[H]/d[H]
    J[108] -= dqdci; // dwdot[NO]/d[H]
    J[111] += dqdci; // dwdot[HNO]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * q_nocor;
    J[366] -= dqdci; // dwdot[H]/d[H2O]
    J[400] -= dqdci; // dwdot[NO]/d[H2O]
    J[403] += dqdci; // dwdot[HNO]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * q_nocor;
    J[950] -= dqdci; // dwdot[H]/d[CH4]
    J[984] -= dqdci; // dwdot[NO]/d[CH4]
    J[987] += dqdci; // dwdot[HNO]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * q_nocor;
    J[1023] -= dqdci; // dwdot[H]/d[CO]
    J[1057] -= dqdci; // dwdot[NO]/d[CO]
    J[1060] += dqdci; // dwdot[HNO]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * q_nocor;
    J[1096] -= dqdci; // dwdot[H]/d[CO2]
    J[1130] -= dqdci; // dwdot[NO]/d[CO2]
    J[1133] += dqdci; // dwdot[HNO]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * q_nocor;
    J[1899] -= dqdci; // dwdot[H]/d[C2H6]
    J[1933] -= dqdci; // dwdot[NO]/d[C2H6]
    J[1936] += dqdci; // dwdot[HNO]/d[C2H6]
    // d()/d[NO]
    dqdci = +k_f * sc[1];
    J[2556] -= dqdci; // dwdot[H]/d[NO]
    J[2590] -= dqdci; // dwdot[NO]/d[NO]
    J[2593] += dqdci; // dwdot[HNO]/d[NO]
    // d()/d[HNO]
    dqdci = -k_r;
    J[2775] -= dqdci; // dwdot[H]/d[HNO]
    J[2809] -= dqdci; // dwdot[NO]/d[HNO]
    J[2812] += dqdci; // dwdot[HNO]/d[HNO]
    // d()/d[AR]
    dqdci = (0.7 - 1) * q_nocor;
    J[3505] -= dqdci; // dwdot[H]/d[AR]
    J[3539] -= dqdci; // dwdot[NO]/d[AR]
    J[3542] += dqdci; // dwdot[HNO]/d[AR]
  } else {
    dqdc[0] = 2 * q_nocor;
    dqdc[1] = q_nocor + k_f * sc[35];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 6 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 2 * q_nocor;
    dqdc[14] = 1.5 * q_nocor;
    dqdc[15] = 2 * q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 3 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor + k_f * sc[1];
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    dqdc[38] = q_nocor - k_r;
    dqdc[39] = q_nocor;
    dqdc[40] = q_nocor;
    dqdc[41] = q_nocor;
    dqdc[42] = q_nocor;
    dqdc[43] = q_nocor;
    dqdc[44] = q_nocor;
    dqdc[45] = q_nocor;
    dqdc[46] = q_nocor;
    dqdc[47] = q_nocor;
    dqdc[48] = 0.7 * q_nocor;
    dqdc[49] = q_nocor;
    dqdc[50] = q_nocor;
    dqdc[51] = q_nocor;
    dqdc[52] = q_nocor;
    dqdc[53] = q_nocor;
    dqdc[54] = q_nocor;
    dqdc[55] = q_nocor;
    dqdc[56] = q_nocor;
    dqdc[57] = q_nocor;
    dqdc[58] = q_nocor;
    dqdc[59] = q_nocor;
    dqdc[60] = q_nocor;
    dqdc[61] = q_nocor;
    dqdc[62] = q_nocor;
    dqdc[63] = q_nocor;
    dqdc[64] = q_nocor;
    dqdc[65] = q_nocor;
    dqdc[66] = q_nocor;
    dqdc[67] = q_nocor;
    dqdc[68] = q_nocor;
    dqdc[69] = q_nocor;
    dqdc[70] = q_nocor;
    dqdc[71] = q_nocor;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] -= dqdc[k];
      J[73 * k + 35] -= dqdc[k];
      J[73 * k + 38] += dqdc[k];
    }
  }
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5294] += dqdT; // dwdot[HNO]/dT

  // reaction 226: NCO + M <=> CO + N + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[46];
  k_f = 310000000 * exp(-(27198.8607867451) * invT);
  dlnkfdT = (27198.8607867451) * invT2;
  // reverse
  phi_r = sc[14] * sc[30];
  Kc = refC * exp(-g_RT[14] - g_RT[30] + g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[46]) + (h_RT[14] + h_RT[30]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[30] += q; // N
  wdot[46] -= q; // NCO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[14] += dqdci; // dwdot[CO]/d[H2]
    J[30] += dqdci; // dwdot[N]/d[H2]
    J[46] -= dqdci; // dwdot[NCO]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * q_nocor;
    J[379] += dqdci; // dwdot[CO]/d[H2O]
    J[395] += dqdci; // dwdot[N]/d[H2O]
    J[411] -= dqdci; // dwdot[NCO]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * q_nocor;
    J[963] += dqdci; // dwdot[CO]/d[CH4]
    J[979] += dqdci; // dwdot[N]/d[CH4]
    J[995] -= dqdci; // dwdot[NCO]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * q_nocor - k_r * sc[30];
    J[1036] += dqdci; // dwdot[CO]/d[CO]
    J[1052] += dqdci; // dwdot[N]/d[CO]
    J[1068] -= dqdci; // dwdot[NCO]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * q_nocor;
    J[1109] += dqdci; // dwdot[CO]/d[CO2]
    J[1125] += dqdci; // dwdot[N]/d[CO2]
    J[1141] -= dqdci; // dwdot[NCO]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * q_nocor;
    J[1912] += dqdci; // dwdot[CO]/d[C2H6]
    J[1928] += dqdci; // dwdot[N]/d[C2H6]
    J[1944] -= dqdci; // dwdot[NCO]/d[C2H6]
    // d()/d[N]
    dqdci = -k_r * sc[14];
    J[2204] += dqdci; // dwdot[CO]/d[N]
    J[2220] += dqdci; // dwdot[N]/d[N]
    J[2236] -= dqdci; // dwdot[NCO]/d[N]
    // d()/d[NCO]
    dqdci = +k_f;
    J[3372] += dqdci; // dwdot[CO]/d[NCO]
    J[3388] += dqdci; // dwdot[N]/d[NCO]
    J[3404] -= dqdci; // dwdot[NCO]/d[NCO]
    // d()/d[AR]
    dqdci = (0.7 - 1) * q_nocor;
    J[3518] += dqdci; // dwdot[CO]/d[AR]
    J[3534] += dqdci; // dwdot[N]/d[AR]
    J[3550] -= dqdci; // dwdot[NCO]/d[AR]
  } else {
    dqdc[0] = 2 * q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 6 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 2 * q_nocor;
    dqdc[14] = 1.5 * q_nocor - k_r * sc[30];
    dqdc[15] = 2 * q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 3 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor - k_r * sc[14];
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    dqdc[38] = q_nocor;
    dqdc[39] = q_nocor;
    dqdc[40] = q_nocor;
    dqdc[41] = q_nocor;
    dqdc[42] = q_nocor;
    dqdc[43] = q_nocor;
    dqdc[44] = q_nocor;
    dqdc[45] = q_nocor;
    dqdc[46] = q_nocor + k_f;
    dqdc[47] = q_nocor;
    dqdc[48] = 0.7 * q_nocor;
    dqdc[49] = q_nocor;
    dqdc[50] = q_nocor;
    dqdc[51] = q_nocor;
    dqdc[52] = q_nocor;
    dqdc[53] = q_nocor;
    dqdc[54] = q_nocor;
    dqdc[55] = q_nocor;
    dqdc[56] = q_nocor;
    dqdc[57] = q_nocor;
    dqdc[58] = q_nocor;
    dqdc[59] = q_nocor;
    dqdc[60] = q_nocor;
    dqdc[61] = q_nocor;
    dqdc[62] = q_nocor;
    dqdc[63] = q_nocor;
    dqdc[64] = q_nocor;
    dqdc[65] = q_nocor;
    dqdc[66] = q_nocor;
    dqdc[67] = q_nocor;
    dqdc[68] = q_nocor;
    dqdc[69] = q_nocor;
    dqdc[70] = q_nocor;
    dqdc[71] = q_nocor;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 14] += dqdc[k];
      J[73 * k + 30] += dqdc[k];
      J[73 * k + 46] -= dqdc[k];
    }
  }
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5286] += dqdT; // dwdot[N]/dT
  J[5302] -= dqdT; // dwdot[NCO]/dT

  // reaction 229: HCN + M <=> CN + H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[40];
  k_f = 1.04e+23 * exp(-3.3 * logT - (63707.2298908775) * invT);
  dlnkfdT = -3.3 * invT + (63707.2298908775) * invT2;
  // reverse
  phi_r = sc[1] * sc[39];
  Kc = refC * exp(-g_RT[1] - g_RT[39] + g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[40]) + (h_RT[1] + h_RT[39]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[39] += q; // CN
  wdot[40] -= q; // HCN
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[1] += dqdci;  // dwdot[H]/d[H2]
    J[39] += dqdci; // dwdot[CN]/d[H2]
    J[40] -= dqdci; // dwdot[HCN]/d[H2]
    // d()/d[H]
    dqdci = -k_r * sc[39];
    J[74] += dqdci;  // dwdot[H]/d[H]
    J[112] += dqdci; // dwdot[CN]/d[H]
    J[113] -= dqdci; // dwdot[HCN]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * q_nocor;
    J[366] += dqdci; // dwdot[H]/d[H2O]
    J[404] += dqdci; // dwdot[CN]/d[H2O]
    J[405] -= dqdci; // dwdot[HCN]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * q_nocor;
    J[950] += dqdci; // dwdot[H]/d[CH4]
    J[988] += dqdci; // dwdot[CN]/d[CH4]
    J[989] -= dqdci; // dwdot[HCN]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * q_nocor;
    J[1023] += dqdci; // dwdot[H]/d[CO]
    J[1061] += dqdci; // dwdot[CN]/d[CO]
    J[1062] -= dqdci; // dwdot[HCN]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * q_nocor;
    J[1096] += dqdci; // dwdot[H]/d[CO2]
    J[1134] += dqdci; // dwdot[CN]/d[CO2]
    J[1135] -= dqdci; // dwdot[HCN]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * q_nocor;
    J[1899] += dqdci; // dwdot[H]/d[C2H6]
    J[1937] += dqdci; // dwdot[CN]/d[C2H6]
    J[1938] -= dqdci; // dwdot[HCN]/d[C2H6]
    // d()/d[CN]
    dqdci = -k_r * sc[1];
    J[2848] += dqdci; // dwdot[H]/d[CN]
    J[2886] += dqdci; // dwdot[CN]/d[CN]
    J[2887] -= dqdci; // dwdot[HCN]/d[CN]
    // d()/d[HCN]
    dqdci = +k_f;
    J[2921] += dqdci; // dwdot[H]/d[HCN]
    J[2959] += dqdci; // dwdot[CN]/d[HCN]
    J[2960] -= dqdci; // dwdot[HCN]/d[HCN]
    // d()/d[AR]
    dqdci = (0.7 - 1) * q_nocor;
    J[3505] += dqdci; // dwdot[H]/d[AR]
    J[3543] += dqdci; // dwdot[CN]/d[AR]
    J[3544] -= dqdci; // dwdot[HCN]/d[AR]
  } else {
    dqdc[0] = 2 * q_nocor;
    dqdc[1] = q_nocor - k_r * sc[39];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 6 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 2 * q_nocor;
    dqdc[14] = 1.5 * q_nocor;
    dqdc[15] = 2 * q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 3 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    dqdc[38] = q_nocor;
    dqdc[39] = q_nocor - k_r * sc[1];
    dqdc[40] = q_nocor + k_f;
    dqdc[41] = q_nocor;
    dqdc[42] = q_nocor;
    dqdc[43] = q_nocor;
    dqdc[44] = q_nocor;
    dqdc[45] = q_nocor;
    dqdc[46] = q_nocor;
    dqdc[47] = q_nocor;
    dqdc[48] = 0.7 * q_nocor;
    dqdc[49] = q_nocor;
    dqdc[50] = q_nocor;
    dqdc[51] = q_nocor;
    dqdc[52] = q_nocor;
    dqdc[53] = q_nocor;
    dqdc[54] = q_nocor;
    dqdc[55] = q_nocor;
    dqdc[56] = q_nocor;
    dqdc[57] = q_nocor;
    dqdc[58] = q_nocor;
    dqdc[59] = q_nocor;
    dqdc[60] = q_nocor;
    dqdc[61] = q_nocor;
    dqdc[62] = q_nocor;
    dqdc[63] = q_nocor;
    dqdc[64] = q_nocor;
    dqdc[65] = q_nocor;
    dqdc[66] = q_nocor;
    dqdc[67] = q_nocor;
    dqdc[68] = q_nocor;
    dqdc[69] = q_nocor;
    dqdc[70] = q_nocor;
    dqdc[71] = q_nocor;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] += dqdc[k];
      J[73 * k + 39] += dqdc[k];
      J[73 * k + 40] -= dqdc[k];
    }
  }
  J[5257] += dqdT; // dwdot[H]/dT
  J[5295] += dqdT; // dwdot[CN]/dT
  J[5296] -= dqdT; // dwdot[HCN]/dT

  // reaction 268: HNCO + M <=> CO + NH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (6 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (0.7 - 1) * sc[48];
  // forward
  phi_f = sc[45];
  k_f = 11800000000 * exp(-(42632.5159269759) * invT);
  dlnkfdT = (42632.5159269759) * invT2;
  // reverse
  phi_r = sc[14] * sc[31];
  Kc = refC * exp(-g_RT[14] - g_RT[31] + g_RT[45]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[45]) + (h_RT[14] + h_RT[31]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[31] += q; // NH
  wdot[45] -= q; // HNCO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[14] += dqdci; // dwdot[CO]/d[H2]
    J[31] += dqdci; // dwdot[NH]/d[H2]
    J[45] -= dqdci; // dwdot[HNCO]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * q_nocor;
    J[379] += dqdci; // dwdot[CO]/d[H2O]
    J[396] += dqdci; // dwdot[NH]/d[H2O]
    J[410] -= dqdci; // dwdot[HNCO]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * q_nocor;
    J[963] += dqdci; // dwdot[CO]/d[CH4]
    J[980] += dqdci; // dwdot[NH]/d[CH4]
    J[994] -= dqdci; // dwdot[HNCO]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * q_nocor - k_r * sc[31];
    J[1036] += dqdci; // dwdot[CO]/d[CO]
    J[1053] += dqdci; // dwdot[NH]/d[CO]
    J[1067] -= dqdci; // dwdot[HNCO]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * q_nocor;
    J[1109] += dqdci; // dwdot[CO]/d[CO2]
    J[1126] += dqdci; // dwdot[NH]/d[CO2]
    J[1140] -= dqdci; // dwdot[HNCO]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * q_nocor;
    J[1912] += dqdci; // dwdot[CO]/d[C2H6]
    J[1929] += dqdci; // dwdot[NH]/d[C2H6]
    J[1943] -= dqdci; // dwdot[HNCO]/d[C2H6]
    // d()/d[NH]
    dqdci = -k_r * sc[14];
    J[2277] += dqdci; // dwdot[CO]/d[NH]
    J[2294] += dqdci; // dwdot[NH]/d[NH]
    J[2308] -= dqdci; // dwdot[HNCO]/d[NH]
    // d()/d[HNCO]
    dqdci = +k_f;
    J[3299] += dqdci; // dwdot[CO]/d[HNCO]
    J[3316] += dqdci; // dwdot[NH]/d[HNCO]
    J[3330] -= dqdci; // dwdot[HNCO]/d[HNCO]
    // d()/d[AR]
    dqdci = (0.7 - 1) * q_nocor;
    J[3518] += dqdci; // dwdot[CO]/d[AR]
    J[3535] += dqdci; // dwdot[NH]/d[AR]
    J[3549] -= dqdci; // dwdot[HNCO]/d[AR]
  } else {
    dqdc[0] = 2 * q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 6 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 2 * q_nocor;
    dqdc[14] = 1.5 * q_nocor - k_r * sc[31];
    dqdc[15] = 2 * q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 3 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor - k_r * sc[14];
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    dqdc[38] = q_nocor;
    dqdc[39] = q_nocor;
    dqdc[40] = q_nocor;
    dqdc[41] = q_nocor;
    dqdc[42] = q_nocor;
    dqdc[43] = q_nocor;
    dqdc[44] = q_nocor;
    dqdc[45] = q_nocor + k_f;
    dqdc[46] = q_nocor;
    dqdc[47] = q_nocor;
    dqdc[48] = 0.7 * q_nocor;
    dqdc[49] = q_nocor;
    dqdc[50] = q_nocor;
    dqdc[51] = q_nocor;
    dqdc[52] = q_nocor;
    dqdc[53] = q_nocor;
    dqdc[54] = q_nocor;
    dqdc[55] = q_nocor;
    dqdc[56] = q_nocor;
    dqdc[57] = q_nocor;
    dqdc[58] = q_nocor;
    dqdc[59] = q_nocor;
    dqdc[60] = q_nocor;
    dqdc[61] = q_nocor;
    dqdc[62] = q_nocor;
    dqdc[63] = q_nocor;
    dqdc[64] = q_nocor;
    dqdc[65] = q_nocor;
    dqdc[66] = q_nocor;
    dqdc[67] = q_nocor;
    dqdc[68] = q_nocor;
    dqdc[69] = q_nocor;
    dqdc[70] = q_nocor;
    dqdc[71] = q_nocor;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 14] += dqdc[k];
      J[73 * k + 31] += dqdc[k];
      J[73 * k + 45] -= dqdc[k];
    }
  }
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5287] += dqdT; // dwdot[NH]/dT
  J[5301] -= dqdT; // dwdot[HNCO]/dT

  // reaction 302: CH3CHO + CH3 => CH4 + CO + CH3
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[52];
  k_f = 2.72 * exp(1.77 * logT - (2979.04266156394) * invT);
  dlnkfdT = 1.77 * invT + (2979.04266156394) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[13] += q; // CH4
  wdot[14] += q; // CO
  wdot[52] -= q; // CH3CHO
  // d()/d[CH3]
  dqdci = +k_f * sc[52];
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[890] += dqdci; // dwdot[CO]/d[CH3]
  J[928] -= dqdci; // dwdot[CH3CHO]/d[CH3]
  // d()/d[CH3CHO]
  dqdci = +k_f * sc[12];
  J[3809] += dqdci; // dwdot[CH4]/d[CH3CHO]
  J[3810] += dqdci; // dwdot[CO]/d[CH3CHO]
  J[3848] -= dqdci; // dwdot[CH3CHO]/d[CH3CHO]
  // d()/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5308] -= dqdT; // dwdot[CH3CHO]/dT

  // reaction 332: CO + F + M <=> CFO + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (18 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26];
  // forward
  phi_f = sc[14] * sc[54];
  k_f = 30900000 * exp(-1.4 * logT - (-245.066516246898) * invT);
  dlnkfdT = -1.4 * invT + (-245.066516246898) * invT2;
  // reverse
  phi_r = sc[69];
  Kc = refCinv * exp(g_RT[14] + g_RT[54] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[54]) + (h_RT[69]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] -= q; // CO
  wdot[54] -= q; // F
  wdot[69] += q; // CFO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[14] -= dqdci; // dwdot[CO]/d[H2]
    J[54] -= dqdci; // dwdot[F]/d[H2]
    J[69] += dqdci; // dwdot[CFO]/d[H2]
    // d()/d[H2O]
    dqdci = (18 - 1) * q_nocor;
    J[379] -= dqdci; // dwdot[CO]/d[H2O]
    J[419] -= dqdci; // dwdot[F]/d[H2O]
    J[434] += dqdci; // dwdot[CFO]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * q_nocor;
    J[963] -= dqdci;  // dwdot[CO]/d[CH4]
    J[1003] -= dqdci; // dwdot[F]/d[CH4]
    J[1018] += dqdci; // dwdot[CFO]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * q_nocor + k_f * sc[54];
    J[1036] -= dqdci; // dwdot[CO]/d[CO]
    J[1076] -= dqdci; // dwdot[F]/d[CO]
    J[1091] += dqdci; // dwdot[CFO]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * q_nocor;
    J[1109] -= dqdci; // dwdot[CO]/d[CO2]
    J[1149] -= dqdci; // dwdot[F]/d[CO2]
    J[1164] += dqdci; // dwdot[CFO]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * q_nocor;
    J[1912] -= dqdci; // dwdot[CO]/d[C2H6]
    J[1952] -= dqdci; // dwdot[F]/d[C2H6]
    J[1967] += dqdci; // dwdot[CFO]/d[C2H6]
    // d()/d[F]
    dqdci = +k_f * sc[14];
    J[3956] -= dqdci; // dwdot[CO]/d[F]
    J[3996] -= dqdci; // dwdot[F]/d[F]
    J[4011] += dqdci; // dwdot[CFO]/d[F]
    // d()/d[CFO]
    dqdci = -k_r;
    J[5051] -= dqdci; // dwdot[CO]/d[CFO]
    J[5091] -= dqdci; // dwdot[F]/d[CFO]
    J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  } else {
    dqdc[0] = 2 * q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 18 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 2 * q_nocor;
    dqdc[14] = 1.5 * q_nocor + k_f * sc[54];
    dqdc[15] = 2 * q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 3 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    dqdc[38] = q_nocor;
    dqdc[39] = q_nocor;
    dqdc[40] = q_nocor;
    dqdc[41] = q_nocor;
    dqdc[42] = q_nocor;
    dqdc[43] = q_nocor;
    dqdc[44] = q_nocor;
    dqdc[45] = q_nocor;
    dqdc[46] = q_nocor;
    dqdc[47] = q_nocor;
    dqdc[48] = q_nocor;
    dqdc[49] = q_nocor;
    dqdc[50] = q_nocor;
    dqdc[51] = q_nocor;
    dqdc[52] = q_nocor;
    dqdc[53] = q_nocor;
    dqdc[54] = q_nocor + k_f * sc[14];
    dqdc[55] = q_nocor;
    dqdc[56] = q_nocor;
    dqdc[57] = q_nocor;
    dqdc[58] = q_nocor;
    dqdc[59] = q_nocor;
    dqdc[60] = q_nocor;
    dqdc[61] = q_nocor;
    dqdc[62] = q_nocor;
    dqdc[63] = q_nocor;
    dqdc[64] = q_nocor;
    dqdc[65] = q_nocor;
    dqdc[66] = q_nocor;
    dqdc[67] = q_nocor;
    dqdc[68] = q_nocor;
    dqdc[69] = q_nocor - k_r;
    dqdc[70] = q_nocor;
    dqdc[71] = q_nocor;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 14] -= dqdc[k];
      J[73 * k + 54] -= dqdc[k];
      J[73 * k + 69] += dqdc[k];
    }
  }
  J[5270] -= dqdT; // dwdot[CO]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 340: HF + M <=> F + H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[53];
  k_f = 31200000 * exp(-(49979.4792477248) * invT);
  dlnkfdT = (49979.4792477248) * invT2;
  // reverse
  phi_r = sc[1] * sc[54];
  Kc = refC * exp(-g_RT[1] + g_RT[53] - g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[53]) + (h_RT[1] + h_RT[54]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[53] -= q; // HF
  wdot[54] += q; // F
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H]
    dqdci = -k_r * sc[54];
    J[74] += dqdci;  // dwdot[H]/d[H]
    J[126] -= dqdci; // dwdot[HF]/d[H]
    J[127] += dqdci; // dwdot[F]/d[H]
    // d()/d[HF]
    dqdci = +k_f;
    J[3870] += dqdci; // dwdot[H]/d[HF]
    J[3922] -= dqdci; // dwdot[HF]/d[HF]
    J[3923] += dqdci; // dwdot[F]/d[HF]
    // d()/d[F]
    dqdci = -k_r * sc[1];
    J[3943] += dqdci; // dwdot[H]/d[F]
    J[3995] -= dqdci; // dwdot[HF]/d[F]
    J[3996] += dqdci; // dwdot[F]/d[F]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor - k_r * sc[54];
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    dqdc[38] = q_nocor;
    dqdc[39] = q_nocor;
    dqdc[40] = q_nocor;
    dqdc[41] = q_nocor;
    dqdc[42] = q_nocor;
    dqdc[43] = q_nocor;
    dqdc[44] = q_nocor;
    dqdc[45] = q_nocor;
    dqdc[46] = q_nocor;
    dqdc[47] = q_nocor;
    dqdc[48] = q_nocor;
    dqdc[49] = q_nocor;
    dqdc[50] = q_nocor;
    dqdc[51] = q_nocor;
    dqdc[52] = q_nocor;
    dqdc[53] = q_nocor + k_f;
    dqdc[54] = q_nocor - k_r * sc[1];
    dqdc[55] = q_nocor;
    dqdc[56] = q_nocor;
    dqdc[57] = q_nocor;
    dqdc[58] = q_nocor;
    dqdc[59] = q_nocor;
    dqdc[60] = q_nocor;
    dqdc[61] = q_nocor;
    dqdc[62] = q_nocor;
    dqdc[63] = q_nocor;
    dqdc[64] = q_nocor;
    dqdc[65] = q_nocor;
    dqdc[66] = q_nocor;
    dqdc[67] = q_nocor;
    dqdc[68] = q_nocor;
    dqdc[69] = q_nocor;
    dqdc[70] = q_nocor;
    dqdc[71] = q_nocor;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 1] += dqdc[k];
      J[73 * k + 53] -= dqdc[k];
      J[73 * k + 54] += dqdc[k];
    }
  }
  J[5257] += dqdT; // dwdot[H]/dT
  J[5309] -= dqdT; // dwdot[HF]/dT
  J[5310] += dqdT; // dwdot[F]/dT

  // reaction 349: CHF + HF + M <=> CH2F2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (9 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + sc[53] + (6 - 1) * sc[56] +
          (6 - 1) * sc[57] + (6 - 1) * sc[58];
  // forward
  phi_f = sc[53] * sc[63];
  k_f = 304000000000000 * exp(-3.26 * logT - (2043.05966316716) * invT);
  dlnkfdT = -3.26 * invT + (2043.05966316716) * invT2;
  // reverse
  phi_r = sc[57];
  Kc = refCinv * exp(g_RT[53] - g_RT[57] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[53] + h_RT[63]) + (h_RT[57]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[53] -= q; // HF
  wdot[57] += q; // CH2F2
  wdot[63] -= q; // CHF
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[53] -= dqdci; // dwdot[HF]/d[H2]
    J[57] += dqdci; // dwdot[CH2F2]/d[H2]
    J[63] -= dqdci; // dwdot[CHF]/d[H2]
    // d()/d[H2O]
    dqdci = (9 - 1) * q_nocor;
    J[418] -= dqdci; // dwdot[HF]/d[H2O]
    J[422] += dqdci; // dwdot[CH2F2]/d[H2O]
    J[428] -= dqdci; // dwdot[CHF]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * q_nocor;
    J[1002] -= dqdci; // dwdot[HF]/d[CH4]
    J[1006] += dqdci; // dwdot[CH2F2]/d[CH4]
    J[1012] -= dqdci; // dwdot[CHF]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * q_nocor;
    J[1075] -= dqdci; // dwdot[HF]/d[CO]
    J[1079] += dqdci; // dwdot[CH2F2]/d[CO]
    J[1085] -= dqdci; // dwdot[CHF]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * q_nocor;
    J[1148] -= dqdci; // dwdot[HF]/d[CO2]
    J[1152] += dqdci; // dwdot[CH2F2]/d[CO2]
    J[1158] -= dqdci; // dwdot[CHF]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * q_nocor;
    J[1951] -= dqdci; // dwdot[HF]/d[C2H6]
    J[1955] += dqdci; // dwdot[CH2F2]/d[C2H6]
    J[1961] -= dqdci; // dwdot[CHF]/d[C2H6]
    // d()/d[HF]
    dqdci = (2 - 1) * q_nocor + k_f * sc[63];
    J[3922] -= dqdci; // dwdot[HF]/d[HF]
    J[3926] += dqdci; // dwdot[CH2F2]/d[HF]
    J[3932] -= dqdci; // dwdot[CHF]/d[HF]
    // d()/d[CH3F]
    dqdci = (6 - 1) * q_nocor;
    J[4141] -= dqdci; // dwdot[HF]/d[CH3F]
    J[4145] += dqdci; // dwdot[CH2F2]/d[CH3F]
    J[4151] -= dqdci; // dwdot[CHF]/d[CH3F]
    // d()/d[CH2F2]
    dqdci = (6 - 1) * q_nocor - k_r;
    J[4214] -= dqdci; // dwdot[HF]/d[CH2F2]
    J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
    J[4224] -= dqdci; // dwdot[CHF]/d[CH2F2]
    // d()/d[CHF3]
    dqdci = (6 - 1) * q_nocor;
    J[4287] -= dqdci; // dwdot[HF]/d[CHF3]
    J[4291] += dqdci; // dwdot[CH2F2]/d[CHF3]
    J[4297] -= dqdci; // dwdot[CHF]/d[CHF3]
    // d()/d[CHF]
    dqdci = +k_f * sc[53];
    J[4652] -= dqdci; // dwdot[HF]/d[CHF]
    J[4656] += dqdci; // dwdot[CH2F2]/d[CHF]
    J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  } else {
    dqdc[0] = 2 * q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 9 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 2 * q_nocor;
    dqdc[14] = 1.5 * q_nocor;
    dqdc[15] = 2 * q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 3 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    dqdc[38] = q_nocor;
    dqdc[39] = q_nocor;
    dqdc[40] = q_nocor;
    dqdc[41] = q_nocor;
    dqdc[42] = q_nocor;
    dqdc[43] = q_nocor;
    dqdc[44] = q_nocor;
    dqdc[45] = q_nocor;
    dqdc[46] = q_nocor;
    dqdc[47] = q_nocor;
    dqdc[48] = q_nocor;
    dqdc[49] = q_nocor;
    dqdc[50] = q_nocor;
    dqdc[51] = q_nocor;
    dqdc[52] = q_nocor;
    dqdc[53] = 2 * q_nocor + k_f * sc[63];
    dqdc[54] = q_nocor;
    dqdc[55] = q_nocor;
    dqdc[56] = 6 * q_nocor;
    dqdc[57] = 6 * q_nocor - k_r;
    dqdc[58] = 6 * q_nocor;
    dqdc[59] = q_nocor;
    dqdc[60] = q_nocor;
    dqdc[61] = q_nocor;
    dqdc[62] = q_nocor;
    dqdc[63] = q_nocor + k_f * sc[53];
    dqdc[64] = q_nocor;
    dqdc[65] = q_nocor;
    dqdc[66] = q_nocor;
    dqdc[67] = q_nocor;
    dqdc[68] = q_nocor;
    dqdc[69] = q_nocor;
    dqdc[70] = q_nocor;
    dqdc[71] = q_nocor;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 53] -= dqdc[k];
      J[73 * k + 57] += dqdc[k];
      J[73 * k + 63] -= dqdc[k];
    }
  }
  J[5309] -= dqdT; // dwdot[HF]/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 352: CHF3 + M <=> CF2 + HF + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (9 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + sc[53] + (6 - 1) * sc[56] +
          (6 - 1) * sc[57] + (6 - 1) * sc[58];
  // forward
  phi_f = sc[58];
  k_f = 3.41e+24 * exp(-4 * logT - (34747.1107738159) * invT);
  dlnkfdT = -4 * invT + (34747.1107738159) * invT2;
  // reverse
  phi_r = sc[53] * sc[64];
  Kc = refC * exp(-g_RT[53] + g_RT[58] - g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[58]) + (h_RT[53] + h_RT[64]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[53] += q; // HF
  wdot[58] -= q; // CHF3
  wdot[64] += q; // CF2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[53] += dqdci; // dwdot[HF]/d[H2]
    J[58] -= dqdci; // dwdot[CHF3]/d[H2]
    J[64] += dqdci; // dwdot[CF2]/d[H2]
    // d()/d[H2O]
    dqdci = (9 - 1) * q_nocor;
    J[418] += dqdci; // dwdot[HF]/d[H2O]
    J[423] -= dqdci; // dwdot[CHF3]/d[H2O]
    J[429] += dqdci; // dwdot[CF2]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * q_nocor;
    J[1002] += dqdci; // dwdot[HF]/d[CH4]
    J[1007] -= dqdci; // dwdot[CHF3]/d[CH4]
    J[1013] += dqdci; // dwdot[CF2]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * q_nocor;
    J[1075] += dqdci; // dwdot[HF]/d[CO]
    J[1080] -= dqdci; // dwdot[CHF3]/d[CO]
    J[1086] += dqdci; // dwdot[CF2]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * q_nocor;
    J[1148] += dqdci; // dwdot[HF]/d[CO2]
    J[1153] -= dqdci; // dwdot[CHF3]/d[CO2]
    J[1159] += dqdci; // dwdot[CF2]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * q_nocor;
    J[1951] += dqdci; // dwdot[HF]/d[C2H6]
    J[1956] -= dqdci; // dwdot[CHF3]/d[C2H6]
    J[1962] += dqdci; // dwdot[CF2]/d[C2H6]
    // d()/d[HF]
    dqdci = (2 - 1) * q_nocor - k_r * sc[64];
    J[3922] += dqdci; // dwdot[HF]/d[HF]
    J[3927] -= dqdci; // dwdot[CHF3]/d[HF]
    J[3933] += dqdci; // dwdot[CF2]/d[HF]
    // d()/d[CH3F]
    dqdci = (6 - 1) * q_nocor;
    J[4141] += dqdci; // dwdot[HF]/d[CH3F]
    J[4146] -= dqdci; // dwdot[CHF3]/d[CH3F]
    J[4152] += dqdci; // dwdot[CF2]/d[CH3F]
    // d()/d[CH2F2]
    dqdci = (6 - 1) * q_nocor;
    J[4214] += dqdci; // dwdot[HF]/d[CH2F2]
    J[4219] -= dqdci; // dwdot[CHF3]/d[CH2F2]
    J[4225] += dqdci; // dwdot[CF2]/d[CH2F2]
    // d()/d[CHF3]
    dqdci = (6 - 1) * q_nocor + k_f;
    J[4287] += dqdci; // dwdot[HF]/d[CHF3]
    J[4292] -= dqdci; // dwdot[CHF3]/d[CHF3]
    J[4298] += dqdci; // dwdot[CF2]/d[CHF3]
    // d()/d[CF2]
    dqdci = -k_r * sc[53];
    J[4725] += dqdci; // dwdot[HF]/d[CF2]
    J[4730] -= dqdci; // dwdot[CHF3]/d[CF2]
    J[4736] += dqdci; // dwdot[CF2]/d[CF2]
  } else {
    dqdc[0] = 2 * q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 9 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 2 * q_nocor;
    dqdc[14] = 1.5 * q_nocor;
    dqdc[15] = 2 * q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 3 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    dqdc[38] = q_nocor;
    dqdc[39] = q_nocor;
    dqdc[40] = q_nocor;
    dqdc[41] = q_nocor;
    dqdc[42] = q_nocor;
    dqdc[43] = q_nocor;
    dqdc[44] = q_nocor;
    dqdc[45] = q_nocor;
    dqdc[46] = q_nocor;
    dqdc[47] = q_nocor;
    dqdc[48] = q_nocor;
    dqdc[49] = q_nocor;
    dqdc[50] = q_nocor;
    dqdc[51] = q_nocor;
    dqdc[52] = q_nocor;
    dqdc[53] = 2 * q_nocor - k_r * sc[64];
    dqdc[54] = q_nocor;
    dqdc[55] = q_nocor;
    dqdc[56] = 6 * q_nocor;
    dqdc[57] = 6 * q_nocor;
    dqdc[58] = 6 * q_nocor + k_f;
    dqdc[59] = q_nocor;
    dqdc[60] = q_nocor;
    dqdc[61] = q_nocor;
    dqdc[62] = q_nocor;
    dqdc[63] = q_nocor;
    dqdc[64] = q_nocor - k_r * sc[53];
    dqdc[65] = q_nocor;
    dqdc[66] = q_nocor;
    dqdc[67] = q_nocor;
    dqdc[68] = q_nocor;
    dqdc[69] = q_nocor;
    dqdc[70] = q_nocor;
    dqdc[71] = q_nocor;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 53] += dqdc[k];
      J[73 * k + 58] -= dqdc[k];
      J[73 * k + 64] += dqdc[k];
    }
  }
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5314] -= dqdT; // dwdot[CHF3]/dT
  J[5320] += dqdT; // dwdot[CF2]/dT

  // reaction 353: CF4 + M <=> CF3 + F + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[0] + (9 - 1) * sc[5] + sc[13] + (1.5 - 1) * sc[14] +
          sc[15] + (3 - 1) * sc[26] + (6 - 1) * sc[56] + (6 - 1) * sc[57] +
          (6 - 1) * sc[58] + (6 - 1) * sc[59];
  // forward
  phi_f = sc[59];
  k_f = 9e+28 * exp(-4.64 * logT - (61593.7198944977) * invT);
  dlnkfdT = -4.64 * invT + (61593.7198944977) * invT2;
  // reverse
  phi_r = sc[54] * sc[62];
  Kc = refC * exp(-g_RT[54] + g_RT[59] - g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[59]) + (h_RT[54] + h_RT[62]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[54] += q; // F
  wdot[59] -= q; // CF4
  wdot[62] += q; // CF3
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[54] += dqdci; // dwdot[F]/d[H2]
    J[59] -= dqdci; // dwdot[CF4]/d[H2]
    J[62] += dqdci; // dwdot[CF3]/d[H2]
    // d()/d[H2O]
    dqdci = (9 - 1) * q_nocor;
    J[419] += dqdci; // dwdot[F]/d[H2O]
    J[424] -= dqdci; // dwdot[CF4]/d[H2O]
    J[427] += dqdci; // dwdot[CF3]/d[H2O]
    // d()/d[CH4]
    dqdci = (2 - 1) * q_nocor;
    J[1003] += dqdci; // dwdot[F]/d[CH4]
    J[1008] -= dqdci; // dwdot[CF4]/d[CH4]
    J[1011] += dqdci; // dwdot[CF3]/d[CH4]
    // d()/d[CO]
    dqdci = (1.5 - 1) * q_nocor;
    J[1076] += dqdci; // dwdot[F]/d[CO]
    J[1081] -= dqdci; // dwdot[CF4]/d[CO]
    J[1084] += dqdci; // dwdot[CF3]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * q_nocor;
    J[1149] += dqdci; // dwdot[F]/d[CO2]
    J[1154] -= dqdci; // dwdot[CF4]/d[CO2]
    J[1157] += dqdci; // dwdot[CF3]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * q_nocor;
    J[1952] += dqdci; // dwdot[F]/d[C2H6]
    J[1957] -= dqdci; // dwdot[CF4]/d[C2H6]
    J[1960] += dqdci; // dwdot[CF3]/d[C2H6]
    // d()/d[F]
    dqdci = -k_r * sc[62];
    J[3996] += dqdci; // dwdot[F]/d[F]
    J[4001] -= dqdci; // dwdot[CF4]/d[F]
    J[4004] += dqdci; // dwdot[CF3]/d[F]
    // d()/d[CH3F]
    dqdci = (6 - 1) * q_nocor;
    J[4142] += dqdci; // dwdot[F]/d[CH3F]
    J[4147] -= dqdci; // dwdot[CF4]/d[CH3F]
    J[4150] += dqdci; // dwdot[CF3]/d[CH3F]
    // d()/d[CH2F2]
    dqdci = (6 - 1) * q_nocor;
    J[4215] += dqdci; // dwdot[F]/d[CH2F2]
    J[4220] -= dqdci; // dwdot[CF4]/d[CH2F2]
    J[4223] += dqdci; // dwdot[CF3]/d[CH2F2]
    // d()/d[CHF3]
    dqdci = (6 - 1) * q_nocor;
    J[4288] += dqdci; // dwdot[F]/d[CHF3]
    J[4293] -= dqdci; // dwdot[CF4]/d[CHF3]
    J[4296] += dqdci; // dwdot[CF3]/d[CHF3]
    // d()/d[CF4]
    dqdci = (6 - 1) * q_nocor + k_f;
    J[4361] += dqdci; // dwdot[F]/d[CF4]
    J[4366] -= dqdci; // dwdot[CF4]/d[CF4]
    J[4369] += dqdci; // dwdot[CF3]/d[CF4]
    // d()/d[CF3]
    dqdci = -k_r * sc[54];
    J[4580] += dqdci; // dwdot[F]/d[CF3]
    J[4585] -= dqdci; // dwdot[CF4]/d[CF3]
    J[4588] += dqdci; // dwdot[CF3]/d[CF3]
  } else {
    dqdc[0] = 2 * q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = 9 * q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 2 * q_nocor;
    dqdc[14] = 1.5 * q_nocor;
    dqdc[15] = 2 * q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = 3 * q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    dqdc[38] = q_nocor;
    dqdc[39] = q_nocor;
    dqdc[40] = q_nocor;
    dqdc[41] = q_nocor;
    dqdc[42] = q_nocor;
    dqdc[43] = q_nocor;
    dqdc[44] = q_nocor;
    dqdc[45] = q_nocor;
    dqdc[46] = q_nocor;
    dqdc[47] = q_nocor;
    dqdc[48] = q_nocor;
    dqdc[49] = q_nocor;
    dqdc[50] = q_nocor;
    dqdc[51] = q_nocor;
    dqdc[52] = q_nocor;
    dqdc[53] = q_nocor;
    dqdc[54] = q_nocor - k_r * sc[62];
    dqdc[55] = q_nocor;
    dqdc[56] = 6 * q_nocor;
    dqdc[57] = 6 * q_nocor;
    dqdc[58] = 6 * q_nocor;
    dqdc[59] = 6 * q_nocor + k_f;
    dqdc[60] = q_nocor;
    dqdc[61] = q_nocor;
    dqdc[62] = q_nocor - k_r * sc[54];
    dqdc[63] = q_nocor;
    dqdc[64] = q_nocor;
    dqdc[65] = q_nocor;
    dqdc[66] = q_nocor;
    dqdc[67] = q_nocor;
    dqdc[68] = q_nocor;
    dqdc[69] = q_nocor;
    dqdc[70] = q_nocor;
    dqdc[71] = q_nocor;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 54] += dqdc[k];
      J[73 * k + 59] -= dqdc[k];
      J[73 * k + 62] += dqdc[k];
    }
  }
  J[5310] += dqdT; // dwdot[F]/dT
  J[5315] -= dqdT; // dwdot[CF4]/dT
  J[5318] += dqdT; // dwdot[CF3]/dT

  // reaction 410: CF3O + M <=> CF2O + F + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[66];
  k_f = 9.03e+20 * exp(-3.42 * logT - (10919.8016479624) * invT);
  dlnkfdT = -3.42 * invT + (10919.8016479624) * invT2;
  // reverse
  phi_r = sc[54] * sc[67];
  Kc = refC * exp(-g_RT[54] + g_RT[66] - g_RT[67]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[66]) + (h_RT[54] + h_RT[67]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[54] += q; // F
  wdot[66] -= q; // CF3O
  wdot[67] += q; // CF2O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[F]
    dqdci = -k_r * sc[67];
    J[3996] += dqdci; // dwdot[F]/d[F]
    J[4008] -= dqdci; // dwdot[CF3O]/d[F]
    J[4009] += dqdci; // dwdot[CF2O]/d[F]
    // d()/d[CF3O]
    dqdci = +k_f;
    J[4872] += dqdci; // dwdot[F]/d[CF3O]
    J[4884] -= dqdci; // dwdot[CF3O]/d[CF3O]
    J[4885] += dqdci; // dwdot[CF2O]/d[CF3O]
    // d()/d[CF2O]
    dqdci = -k_r * sc[54];
    J[4945] += dqdci; // dwdot[F]/d[CF2O]
    J[4957] -= dqdci; // dwdot[CF3O]/d[CF2O]
    J[4958] += dqdci; // dwdot[CF2O]/d[CF2O]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    dqdc[38] = q_nocor;
    dqdc[39] = q_nocor;
    dqdc[40] = q_nocor;
    dqdc[41] = q_nocor;
    dqdc[42] = q_nocor;
    dqdc[43] = q_nocor;
    dqdc[44] = q_nocor;
    dqdc[45] = q_nocor;
    dqdc[46] = q_nocor;
    dqdc[47] = q_nocor;
    dqdc[48] = q_nocor;
    dqdc[49] = q_nocor;
    dqdc[50] = q_nocor;
    dqdc[51] = q_nocor;
    dqdc[52] = q_nocor;
    dqdc[53] = q_nocor;
    dqdc[54] = q_nocor - k_r * sc[67];
    dqdc[55] = q_nocor;
    dqdc[56] = q_nocor;
    dqdc[57] = q_nocor;
    dqdc[58] = q_nocor;
    dqdc[59] = q_nocor;
    dqdc[60] = q_nocor;
    dqdc[61] = q_nocor;
    dqdc[62] = q_nocor;
    dqdc[63] = q_nocor;
    dqdc[64] = q_nocor;
    dqdc[65] = q_nocor;
    dqdc[66] = q_nocor + k_f;
    dqdc[67] = q_nocor - k_r * sc[54];
    dqdc[68] = q_nocor;
    dqdc[69] = q_nocor;
    dqdc[70] = q_nocor;
    dqdc[71] = q_nocor;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 54] += dqdc[k];
      J[73 * k + 66] -= dqdc[k];
      J[73 * k + 67] += dqdc[k];
    }
  }
  J[5310] += dqdT; // dwdot[F]/dT
  J[5322] -= dqdT; // dwdot[CF3O]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 449: CHFO + M <=> CO + HF + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = sc[68];
  k_f = 2.48e+19 * exp(-3 * logT - (21638.3166296029) * invT);
  dlnkfdT = -3 * invT + (21638.3166296029) * invT2;
  // reverse
  phi_r = sc[14] * sc[53];
  Kc = refC * exp(-g_RT[14] - g_RT[53] + g_RT[68]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[68]) + (h_RT[14] + h_RT[53]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[53] += q; // HF
  wdot[68] -= q; // CHFO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[CO]
    dqdci = -k_r * sc[53];
    J[1036] += dqdci; // dwdot[CO]/d[CO]
    J[1075] += dqdci; // dwdot[HF]/d[CO]
    J[1090] -= dqdci; // dwdot[CHFO]/d[CO]
    // d()/d[HF]
    dqdci = -k_r * sc[14];
    J[3883] += dqdci; // dwdot[CO]/d[HF]
    J[3922] += dqdci; // dwdot[HF]/d[HF]
    J[3937] -= dqdci; // dwdot[CHFO]/d[HF]
    // d()/d[CHFO]
    dqdci = +k_f;
    J[4978] += dqdci; // dwdot[CO]/d[CHFO]
    J[5017] += dqdci; // dwdot[HF]/d[CHFO]
    J[5032] -= dqdci; // dwdot[CHFO]/d[CHFO]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor - k_r * sc[53];
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    dqdc[38] = q_nocor;
    dqdc[39] = q_nocor;
    dqdc[40] = q_nocor;
    dqdc[41] = q_nocor;
    dqdc[42] = q_nocor;
    dqdc[43] = q_nocor;
    dqdc[44] = q_nocor;
    dqdc[45] = q_nocor;
    dqdc[46] = q_nocor;
    dqdc[47] = q_nocor;
    dqdc[48] = q_nocor;
    dqdc[49] = q_nocor;
    dqdc[50] = q_nocor;
    dqdc[51] = q_nocor;
    dqdc[52] = q_nocor;
    dqdc[53] = q_nocor - k_r * sc[14];
    dqdc[54] = q_nocor;
    dqdc[55] = q_nocor;
    dqdc[56] = q_nocor;
    dqdc[57] = q_nocor;
    dqdc[58] = q_nocor;
    dqdc[59] = q_nocor;
    dqdc[60] = q_nocor;
    dqdc[61] = q_nocor;
    dqdc[62] = q_nocor;
    dqdc[63] = q_nocor;
    dqdc[64] = q_nocor;
    dqdc[65] = q_nocor;
    dqdc[66] = q_nocor;
    dqdc[67] = q_nocor;
    dqdc[68] = q_nocor + k_f;
    dqdc[69] = q_nocor;
    dqdc[70] = q_nocor;
    dqdc[71] = q_nocor;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 14] += dqdc[k];
      J[73 * k + 53] += dqdc[k];
      J[73 * k + 68] -= dqdc[k];
    }
  }
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5324] -= dqdT; // dwdot[CHFO]/dT

  // reaction 502: 2 F + M <=> F2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture;
  // forward
  phi_f = (sc[54] * sc[54]);
  k_f = 100;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[55];
  Kc = refCinv * exp(2.000000 * g_RT[54] - g_RT[55]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[54]) + (h_RT[55]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[54] -= 2 * q; // F
  wdot[55] += q;     // F2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP == 1) {
    // d()/d[F]
    dqdci = +k_f * 2.000000 * sc[54];
    J[3996] += -2 * dqdci; // dwdot[F]/d[F]
    J[3997] += dqdci;      // dwdot[F2]/d[F]
    // d()/d[F2]
    dqdci = -k_r;
    J[4069] += -2 * dqdci; // dwdot[F]/d[F2]
    J[4070] += dqdci;      // dwdot[F2]/d[F2]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[23] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    dqdc[38] = q_nocor;
    dqdc[39] = q_nocor;
    dqdc[40] = q_nocor;
    dqdc[41] = q_nocor;
    dqdc[42] = q_nocor;
    dqdc[43] = q_nocor;
    dqdc[44] = q_nocor;
    dqdc[45] = q_nocor;
    dqdc[46] = q_nocor;
    dqdc[47] = q_nocor;
    dqdc[48] = q_nocor;
    dqdc[49] = q_nocor;
    dqdc[50] = q_nocor;
    dqdc[51] = q_nocor;
    dqdc[52] = q_nocor;
    dqdc[53] = q_nocor;
    dqdc[54] = q_nocor + k_f * 2.000000 * sc[54];
    dqdc[55] = q_nocor - k_r;
    dqdc[56] = q_nocor;
    dqdc[57] = q_nocor;
    dqdc[58] = q_nocor;
    dqdc[59] = q_nocor;
    dqdc[60] = q_nocor;
    dqdc[61] = q_nocor;
    dqdc[62] = q_nocor;
    dqdc[63] = q_nocor;
    dqdc[64] = q_nocor;
    dqdc[65] = q_nocor;
    dqdc[66] = q_nocor;
    dqdc[67] = q_nocor;
    dqdc[68] = q_nocor;
    dqdc[69] = q_nocor;
    dqdc[70] = q_nocor;
    dqdc[71] = q_nocor;
    for (int k = 0; k < 72; k++) {
      J[73 * k + 54] += -2 * dqdc[k];
      J[73 * k + 55] += dqdc[k];
    }
  }
  J[5310] += -2 * dqdT; // dwdot[F]/dT
  J[5311] += dqdT;      // dwdot[F2]/dT

  // reaction 2: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[2];
  k_f = 0.0387 * exp(2.7 * logT - (3150.13632793755) * invT);
  dlnkfdT = 2.7 * invT + (3150.13632793755) * invT2;
  // reverse
  phi_r = sc[1] * sc[4];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[2] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[2]) + (h_RT[1] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // H2
  wdot[1] += q; // H
  wdot[2] -= q; // O
  wdot[4] += q; // OH
  // d()/d[H2]
  dqdci = +k_f * sc[2];
  J[0] -= dqdci; // dwdot[H2]/d[H2]
  J[1] += dqdci; // dwdot[H]/d[H2]
  J[2] -= dqdci; // dwdot[O]/d[H2]
  J[4] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[4];
  J[73] -= dqdci; // dwdot[H2]/d[H]
  J[74] += dqdci; // dwdot[H]/d[H]
  J[75] -= dqdci; // dwdot[O]/d[H]
  J[77] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[0];
  J[146] -= dqdci; // dwdot[H2]/d[O]
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[1];
  J[292] -= dqdci; // dwdot[H2]/d[OH]
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT

  // reaction 3: HO2 + O <=> O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[6];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[4];
  Kc = exp(g_RT[2] - g_RT[3] - g_RT[4] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[6]) + (h_RT[3] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // O
  wdot[3] += q; // O2
  wdot[4] += q; // OH
  wdot[6] -= q; // HO2
  // d()/d[O]
  dqdci = +k_f * sc[6];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[149] += dqdci; // dwdot[O2]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[152] -= dqdci; // dwdot[HO2]/d[O]
  // d()/d[O2]
  dqdci = -k_r * sc[4];
  J[221] -= dqdci; // dwdot[O]/d[O2]
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[223] += dqdci; // dwdot[OH]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[3];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[295] += dqdci; // dwdot[O2]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[298] -= dqdci; // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[2];
  J[440] -= dqdci; // dwdot[O]/d[HO2]
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT

  // reaction 4: H2O2 + O <=> HO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[7];
  k_f = 9.63 * exp(2 * logT - (2012.86666321888) * invT);
  dlnkfdT = 2 * invT + (2012.86666321888) * invT2;
  // reverse
  phi_r = sc[4] * sc[6];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[7]) + (h_RT[4] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q; // O
  wdot[4] += q; // OH
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[O]
  dqdci = +k_f * sc[7];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[152] += dqdci; // dwdot[HO2]/d[O]
  J[153] -= dqdci; // dwdot[H2O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[6];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[298] += dqdci; // dwdot[HO2]/d[OH]
  J[299] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[4];
  J[440] -= dqdci; // dwdot[O]/d[HO2]
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[2];
  J[513] -= dqdci; // dwdot[O]/d[H2O2]
  J[515] += dqdci; // dwdot[OH]/d[H2O2]
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT

  // reaction 5: CH + O <=> CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[9];
  k_f = 57000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[9] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[9]) + (h_RT[1] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[9] -= q;  // CH
  wdot[14] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[14];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[75] -= dqdci; // dwdot[O]/d[H]
  J[82] -= dqdci; // dwdot[CH]/d[H]
  J[87] += dqdci; // dwdot[CO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[9];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[155] -= dqdci; // dwdot[CH]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  // d()/d[CH]
  dqdci = +k_f * sc[2];
  J[658] += dqdci; // dwdot[H]/d[CH]
  J[659] -= dqdci; // dwdot[O]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[671] += dqdci; // dwdot[CO]/d[CH]
  // d()/d[CO]
  dqdci = -k_r * sc[1];
  J[1023] += dqdci; // dwdot[H]/d[CO]
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1031] -= dqdci; // dwdot[CH]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5270] += dqdT; // dwdot[CO]/dT

  // reaction 6: CH2 + O <=> H + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[10];
  k_f = 80000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[16];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[10] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[10]) + (h_RT[1] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[10] -= q; // CH2
  wdot[16] += q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[16];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[75] -= dqdci; // dwdot[O]/d[H]
  J[83] -= dqdci; // dwdot[CH2]/d[H]
  J[89] += dqdci; // dwdot[HCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[10];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[156] -= dqdci; // dwdot[CH2]/d[O]
  J[162] += dqdci; // dwdot[HCO]/d[O]
  // d()/d[CH2]
  dqdci = +k_f * sc[2];
  J[731] += dqdci; // dwdot[H]/d[CH2]
  J[732] -= dqdci; // dwdot[O]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[746] += dqdci; // dwdot[HCO]/d[CH2]
  // d()/d[HCO]
  dqdci = -k_r * sc[1];
  J[1169] += dqdci; // dwdot[H]/d[HCO]
  J[1170] -= dqdci; // dwdot[O]/d[HCO]
  J[1178] -= dqdci; // dwdot[CH2]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT

  // reaction 7: CH2(S) + O <=> CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[11];
  k_f = 15000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[14];
  Kc = exp(-g_RT[0] + g_RT[2] + g_RT[11] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[11]) + (h_RT[0] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[2] -= q;  // O
  wdot[11] -= q; // CH2(S)
  wdot[14] += q; // CO
  // d()/d[H2]
  dqdci = -k_r * sc[14];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[2] -= dqdci;  // dwdot[O]/d[H2]
  J[11] -= dqdci; // dwdot[CH2(S)]/d[H2]
  J[14] += dqdci; // dwdot[CO]/d[H2]
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[146] += dqdci; // dwdot[H2]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[157] -= dqdci; // dwdot[CH2(S)]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[2];
  J[803] += dqdci; // dwdot[H2]/d[CH2(S)]
  J[805] -= dqdci; // dwdot[O]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[817] += dqdci; // dwdot[CO]/d[CH2(S)]
  // d()/d[CO]
  dqdci = -k_r * sc[0];
  J[1022] += dqdci; // dwdot[H2]/d[CO]
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1033] -= dqdci; // dwdot[CH2(S)]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5270] += dqdT; // dwdot[CO]/dT

  // reaction 8: CH2(S) + O <=> H + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[11];
  k_f = 15000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[16];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[11] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[11]) + (h_RT[1] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[11] -= q; // CH2(S)
  wdot[16] += q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[16];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[75] -= dqdci; // dwdot[O]/d[H]
  J[84] -= dqdci; // dwdot[CH2(S)]/d[H]
  J[89] += dqdci; // dwdot[HCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[11];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[157] -= dqdci; // dwdot[CH2(S)]/d[O]
  J[162] += dqdci; // dwdot[HCO]/d[O]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[2];
  J[804] += dqdci; // dwdot[H]/d[CH2(S)]
  J[805] -= dqdci; // dwdot[O]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[819] += dqdci; // dwdot[HCO]/d[CH2(S)]
  // d()/d[HCO]
  dqdci = -k_r * sc[1];
  J[1169] += dqdci; // dwdot[H]/d[HCO]
  J[1170] -= dqdci; // dwdot[O]/d[HCO]
  J[1179] -= dqdci; // dwdot[CH2(S)]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT

  // reaction 9: CH3 + O <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[12];
  k_f = 50600000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[17];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[12] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[12]) + (h_RT[1] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[12] -= q; // CH3
  wdot[17] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[17];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[75] -= dqdci; // dwdot[O]/d[H]
  J[85] -= dqdci; // dwdot[CH3]/d[H]
  J[90] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[12];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[158] -= dqdci; // dwdot[CH3]/d[O]
  J[163] += dqdci; // dwdot[CH2O]/d[O]
  // d()/d[CH3]
  dqdci = +k_f * sc[2];
  J[877] += dqdci; // dwdot[H]/d[CH3]
  J[878] -= dqdci; // dwdot[O]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[893] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[1242] += dqdci; // dwdot[H]/d[CH2O]
  J[1243] -= dqdci; // dwdot[O]/d[CH2O]
  J[1253] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 10: CH4 + O <=> CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[13];
  k_f = 1020 * exp(1.5 * logT - (4327.66332592059) * invT);
  dlnkfdT = 1.5 * invT + (4327.66332592059) * invT2;
  // reverse
  phi_r = sc[4] * sc[12];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[13]) + (h_RT[4] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[12] += q; // CH3
  wdot[13] -= q; // CH4
  // d()/d[O]
  dqdci = +k_f * sc[13];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[158] += dqdci; // dwdot[CH3]/d[O]
  J[159] -= dqdci; // dwdot[CH4]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[304] += dqdci; // dwdot[CH3]/d[OH]
  J[305] -= dqdci; // dwdot[CH4]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[4];
  J[878] -= dqdci; // dwdot[O]/d[CH3]
  J[880] += dqdci; // dwdot[OH]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[889] -= dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[2];
  J[951] -= dqdci; // dwdot[O]/d[CH4]
  J[953] += dqdci; // dwdot[OH]/d[CH4]
  J[961] += dqdci; // dwdot[CH3]/d[CH4]
  J[962] -= dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5269] -= dqdT; // dwdot[CH4]/dT

  // reaction 12: HCO + O <=> CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[16];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[14];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[4] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[162] -= dqdci; // dwdot[HCO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[14];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[306] += dqdci; // dwdot[CO]/d[OH]
  J[308] -= dqdci; // dwdot[HCO]/d[OH]
  // d()/d[CO]
  dqdci = -k_r * sc[4];
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1026] += dqdci; // dwdot[OH]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[2];
  J[1170] -= dqdci; // dwdot[O]/d[HCO]
  J[1172] += dqdci; // dwdot[OH]/d[HCO]
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT

  // reaction 13: HCO + O <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[16];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[15];
  Kc = exp(-g_RT[1] + g_RT[2] - g_RT[15] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[1] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[15] += q; // CO2
  wdot[16] -= q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[15];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[75] -= dqdci; // dwdot[O]/d[H]
  J[88] += dqdci; // dwdot[CO2]/d[H]
  J[89] -= dqdci; // dwdot[HCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[161] += dqdci; // dwdot[CO2]/d[O]
  J[162] -= dqdci; // dwdot[HCO]/d[O]
  // d()/d[CO2]
  dqdci = -k_r * sc[1];
  J[1096] += dqdci; // dwdot[H]/d[CO2]
  J[1097] -= dqdci; // dwdot[O]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  J[1111] -= dqdci; // dwdot[HCO]/d[CO2]
  // d()/d[HCO]
  dqdci = +k_f * sc[2];
  J[1169] += dqdci; // dwdot[H]/d[HCO]
  J[1170] -= dqdci; // dwdot[O]/d[HCO]
  J[1183] += dqdci; // dwdot[CO2]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT

  // reaction 14: CH2O + O <=> HCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[17];
  k_f = 39000000 * exp(-(1781.38699694871) * invT);
  dlnkfdT = (1781.38699694871) * invT2;
  // reverse
  phi_r = sc[4] * sc[16];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[17]) + (h_RT[4] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[162] += dqdci; // dwdot[HCO]/d[O]
  J[163] -= dqdci; // dwdot[CH2O]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[16];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[308] += dqdci; // dwdot[HCO]/d[OH]
  J[309] -= dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[HCO]
  dqdci = -k_r * sc[4];
  J[1170] -= dqdci; // dwdot[O]/d[HCO]
  J[1172] += dqdci; // dwdot[OH]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[2];
  J[1243] -= dqdci; // dwdot[O]/d[CH2O]
  J[1245] += dqdci; // dwdot[OH]/d[CH2O]
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT

  // reaction 15: CH2OH + O <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[18];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[17];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[18]) + (h_RT[4] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[17] += q; // CH2O
  wdot[18] -= q; // CH2OH
  // d()/d[O]
  dqdci = +k_f * sc[18];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[163] += dqdci; // dwdot[CH2O]/d[O]
  J[164] -= dqdci; // dwdot[CH2OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[309] += dqdci; // dwdot[CH2O]/d[OH]
  J[310] -= dqdci; // dwdot[CH2OH]/d[OH]
  // d()/d[CH2O]
  dqdci = -k_r * sc[4];
  J[1243] -= dqdci; // dwdot[O]/d[CH2O]
  J[1245] += dqdci; // dwdot[OH]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1259] -= dqdci; // dwdot[CH2OH]/d[CH2O]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[2];
  J[1316] -= dqdci; // dwdot[O]/d[CH2OH]
  J[1318] += dqdci; // dwdot[OH]/d[CH2OH]
  J[1331] += dqdci; // dwdot[CH2O]/d[CH2OH]
  J[1332] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5274] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 16: CH3O + O <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[19];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[17];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[17] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[19]) + (h_RT[4] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[17] += q; // CH2O
  wdot[19] -= q; // CH3O
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[163] += dqdci; // dwdot[CH2O]/d[O]
  J[165] -= dqdci; // dwdot[CH3O]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[309] += dqdci; // dwdot[CH2O]/d[OH]
  J[311] -= dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[CH2O]
  dqdci = -k_r * sc[4];
  J[1243] -= dqdci; // dwdot[O]/d[CH2O]
  J[1245] += dqdci; // dwdot[OH]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1260] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[2];
  J[1389] -= dqdci; // dwdot[O]/d[CH3O]
  J[1391] += dqdci; // dwdot[OH]/d[CH3O]
  J[1404] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[1406] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5275] -= dqdT; // dwdot[CH3O]/dT

  // reaction 17: CH3OH + O <=> CH2OH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 0.388 * exp(2.5 * logT - (1559.97166399463) * invT);
  dlnkfdT = 2.5 * invT + (1559.97166399463) * invT2;
  // reverse
  phi_r = sc[4] * sc[18];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[4] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[164] += dqdci; // dwdot[CH2OH]/d[O]
  J[166] -= dqdci; // dwdot[CH3OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[310] += dqdci; // dwdot[CH2OH]/d[OH]
  J[312] -= dqdci; // dwdot[CH3OH]/d[OH]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[4];
  J[1316] -= dqdci; // dwdot[O]/d[CH2OH]
  J[1318] += dqdci; // dwdot[OH]/d[CH2OH]
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1334] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[2];
  J[1462] -= dqdci; // dwdot[O]/d[CH3OH]
  J[1464] += dqdci; // dwdot[OH]/d[CH3OH]
  J[1478] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 18: CH3OH + O <=> CH3O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[20];
  k_f = 0.13 * exp(2.5 * logT - (2516.0833290236) * invT);
  dlnkfdT = 2.5 * invT + (2516.0833290236) * invT2;
  // reverse
  phi_r = sc[4] * sc[19];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[4] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[165] += dqdci; // dwdot[CH3O]/d[O]
  J[166] -= dqdci; // dwdot[CH3OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[19];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[311] += dqdci; // dwdot[CH3O]/d[OH]
  J[312] -= dqdci; // dwdot[CH3OH]/d[OH]
  // d()/d[CH3O]
  dqdci = -k_r * sc[4];
  J[1389] -= dqdci; // dwdot[O]/d[CH3O]
  J[1391] += dqdci; // dwdot[OH]/d[CH3O]
  J[1406] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[1407] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[2];
  J[1462] -= dqdci; // dwdot[O]/d[CH3OH]
  J[1464] += dqdci; // dwdot[OH]/d[CH3OH]
  J[1479] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 19: C2H + O <=> CH + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[21];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[9] * sc[14];
  Kc = exp(g_RT[2] - g_RT[9] - g_RT[14] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[21]) + (h_RT[9] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[9] += q;  // CH
  wdot[14] += q; // CO
  wdot[21] -= q; // C2H
  // d()/d[O]
  dqdci = +k_f * sc[21];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[155] += dqdci; // dwdot[CH]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[167] -= dqdci; // dwdot[C2H]/d[O]
  // d()/d[CH]
  dqdci = -k_r * sc[14];
  J[659] -= dqdci; // dwdot[O]/d[CH]
  J[666] += dqdci; // dwdot[CH]/d[CH]
  J[671] += dqdci; // dwdot[CO]/d[CH]
  J[678] -= dqdci; // dwdot[C2H]/d[CH]
  // d()/d[CO]
  dqdci = -k_r * sc[9];
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1031] += dqdci; // dwdot[CH]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1043] -= dqdci; // dwdot[C2H]/d[CO]
  // d()/d[C2H]
  dqdci = +k_f * sc[2];
  J[1535] -= dqdci; // dwdot[O]/d[C2H]
  J[1542] += dqdci; // dwdot[CH]/d[C2H]
  J[1547] += dqdci; // dwdot[CO]/d[C2H]
  J[1554] -= dqdci; // dwdot[C2H]/d[C2H]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5265] += dqdT; // dwdot[CH]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5277] -= dqdT; // dwdot[C2H]/dT

  // reaction 20: C2H2 + O <=> H + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 13.5 * exp(2 * logT - (956.111665028967) * invT);
  dlnkfdT = 2 * invT + (956.111665028967) * invT2;
  // reverse
  phi_r = sc[1] * sc[27];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[22] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[1] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[22] -= q; // C2H2
  wdot[27] += q; // HCCO
  // d()/d[H]
  dqdci = -k_r * sc[27];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[75] -= dqdci;  // dwdot[O]/d[H]
  J[95] -= dqdci;  // dwdot[C2H2]/d[H]
  J[100] += dqdci; // dwdot[HCCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[168] -= dqdci; // dwdot[C2H2]/d[O]
  J[173] += dqdci; // dwdot[HCCO]/d[O]
  // d()/d[C2H2]
  dqdci = +k_f * sc[2];
  J[1607] += dqdci; // dwdot[H]/d[C2H2]
  J[1608] -= dqdci; // dwdot[O]/d[C2H2]
  J[1628] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[1633] += dqdci; // dwdot[HCCO]/d[C2H2]
  // d()/d[HCCO]
  dqdci = -k_r * sc[1];
  J[1972] += dqdci; // dwdot[H]/d[HCCO]
  J[1973] -= dqdci; // dwdot[O]/d[HCCO]
  J[1993] -= dqdci; // dwdot[C2H2]/d[HCCO]
  J[1998] += dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5278] -= dqdT; // dwdot[C2H2]/dT
  J[5283] += dqdT; // dwdot[HCCO]/dT

  // reaction 21: C2H2 + O <=> C2H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 46000000000000 * exp(-1.41 * logT - (14568.1224750466) * invT);
  dlnkfdT = -1.41 * invT + (14568.1224750466) * invT2;
  // reverse
  phi_r = sc[4] * sc[21];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[4] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[21] += q; // C2H
  wdot[22] -= q; // C2H2
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[167] += dqdci; // dwdot[C2H]/d[O]
  J[168] -= dqdci; // dwdot[C2H2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[313] += dqdci; // dwdot[C2H]/d[OH]
  J[314] -= dqdci; // dwdot[C2H2]/d[OH]
  // d()/d[C2H]
  dqdci = -k_r * sc[4];
  J[1535] -= dqdci; // dwdot[O]/d[C2H]
  J[1537] += dqdci; // dwdot[OH]/d[C2H]
  J[1554] += dqdci; // dwdot[C2H]/d[C2H]
  J[1555] -= dqdci; // dwdot[C2H2]/d[C2H]
  // d()/d[C2H2]
  dqdci = +k_f * sc[2];
  J[1608] -= dqdci; // dwdot[O]/d[C2H2]
  J[1610] += dqdci; // dwdot[OH]/d[C2H2]
  J[1627] += dqdci; // dwdot[C2H]/d[C2H2]
  J[1628] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5277] += dqdT; // dwdot[C2H]/dT
  J[5278] -= dqdT; // dwdot[C2H2]/dT

  // reaction 22: C2H2 + O <=> CH2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[22];
  k_f = 6.94 * exp(2 * logT - (956.111665028967) * invT);
  dlnkfdT = 2 * invT + (956.111665028967) * invT2;
  // reverse
  phi_r = sc[10] * sc[14];
  Kc = exp(g_RT[2] - g_RT[10] - g_RT[14] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[22]) + (h_RT[10] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[10] += q; // CH2
  wdot[14] += q; // CO
  wdot[22] -= q; // C2H2
  // d()/d[O]
  dqdci = +k_f * sc[22];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[156] += dqdci; // dwdot[CH2]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[168] -= dqdci; // dwdot[C2H2]/d[O]
  // d()/d[CH2]
  dqdci = -k_r * sc[14];
  J[732] -= dqdci; // dwdot[O]/d[CH2]
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  J[744] += dqdci; // dwdot[CO]/d[CH2]
  J[752] -= dqdci; // dwdot[C2H2]/d[CH2]
  // d()/d[CO]
  dqdci = -k_r * sc[10];
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1032] += dqdci; // dwdot[CH2]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1044] -= dqdci; // dwdot[C2H2]/d[CO]
  // d()/d[C2H2]
  dqdci = +k_f * sc[2];
  J[1608] -= dqdci; // dwdot[O]/d[C2H2]
  J[1616] += dqdci; // dwdot[CH2]/d[C2H2]
  J[1620] += dqdci; // dwdot[CO]/d[C2H2]
  J[1628] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5278] -= dqdT; // dwdot[C2H2]/dT

  // reaction 23: C2H3 + O <=> CH2CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[23];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[28];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[23] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[23]) + (h_RT[1] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[23] -= q; // C2H3
  wdot[28] += q; // CH2CO
  // d()/d[H]
  dqdci = -k_r * sc[28];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[75] -= dqdci;  // dwdot[O]/d[H]
  J[96] -= dqdci;  // dwdot[C2H3]/d[H]
  J[101] += dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[23];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[169] -= dqdci; // dwdot[C2H3]/d[O]
  J[174] += dqdci; // dwdot[CH2CO]/d[O]
  // d()/d[C2H3]
  dqdci = +k_f * sc[2];
  J[1680] += dqdci; // dwdot[H]/d[C2H3]
  J[1681] -= dqdci; // dwdot[O]/d[C2H3]
  J[1702] -= dqdci; // dwdot[C2H3]/d[C2H3]
  J[1707] += dqdci; // dwdot[CH2CO]/d[C2H3]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[1];
  J[2045] += dqdci; // dwdot[H]/d[CH2CO]
  J[2046] -= dqdci; // dwdot[O]/d[CH2CO]
  J[2067] -= dqdci; // dwdot[C2H3]/d[CH2CO]
  J[2072] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT
  J[5284] += dqdT; // dwdot[CH2CO]/dT

  // reaction 24: C2H4 + O <=> CH3 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[24];
  k_f = 12.5 * exp(1.83 * logT - (110.707666477038) * invT);
  dlnkfdT = 1.83 * invT + (110.707666477038) * invT2;
  // reverse
  phi_r = sc[12] * sc[16];
  Kc = exp(g_RT[2] - g_RT[12] - g_RT[16] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[24]) + (h_RT[12] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[12] += q; // CH3
  wdot[16] += q; // HCO
  wdot[24] -= q; // C2H4
  // d()/d[O]
  dqdci = +k_f * sc[24];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[158] += dqdci; // dwdot[CH3]/d[O]
  J[162] += dqdci; // dwdot[HCO]/d[O]
  J[170] -= dqdci; // dwdot[C2H4]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc[16];
  J[878] -= dqdci; // dwdot[O]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[892] += dqdci; // dwdot[HCO]/d[CH3]
  J[900] -= dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[HCO]
  dqdci = -k_r * sc[12];
  J[1170] -= dqdci; // dwdot[O]/d[HCO]
  J[1180] += dqdci; // dwdot[CH3]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1192] -= dqdci; // dwdot[C2H4]/d[HCO]
  // d()/d[C2H4]
  dqdci = +k_f * sc[2];
  J[1754] -= dqdci; // dwdot[O]/d[C2H4]
  J[1764] += dqdci; // dwdot[CH3]/d[C2H4]
  J[1768] += dqdci; // dwdot[HCO]/d[C2H4]
  J[1776] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT

  // reaction 25: C2H5 + O <=> CH2O + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[25];
  k_f = 22400000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[12] * sc[17];
  Kc = exp(g_RT[2] - g_RT[12] - g_RT[17] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[25]) + (h_RT[12] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[12] += q; // CH3
  wdot[17] += q; // CH2O
  wdot[25] -= q; // C2H5
  // d()/d[O]
  dqdci = +k_f * sc[25];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[158] += dqdci; // dwdot[CH3]/d[O]
  J[163] += dqdci; // dwdot[CH2O]/d[O]
  J[171] -= dqdci; // dwdot[C2H5]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc[17];
  J[878] -= dqdci; // dwdot[O]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[893] += dqdci; // dwdot[CH2O]/d[CH3]
  J[901] -= dqdci; // dwdot[C2H5]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[12];
  J[1243] -= dqdci; // dwdot[O]/d[CH2O]
  J[1253] += dqdci; // dwdot[CH3]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1266] -= dqdci; // dwdot[C2H5]/d[CH2O]
  // d()/d[C2H5]
  dqdci = +k_f * sc[2];
  J[1827] -= dqdci; // dwdot[O]/d[C2H5]
  J[1837] += dqdci; // dwdot[CH3]/d[C2H5]
  J[1842] += dqdci; // dwdot[CH2O]/d[C2H5]
  J[1850] -= dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5281] -= dqdT; // dwdot[C2H5]/dT

  // reaction 26: C2H6 + O <=> C2H5 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[26];
  k_f = 89.8 * exp(1.92 * logT - (2863.30282842885) * invT);
  dlnkfdT = 1.92 * invT + (2863.30282842885) * invT2;
  // reverse
  phi_r = sc[4] * sc[25];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[26]) + (h_RT[4] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  // d()/d[O]
  dqdci = +k_f * sc[26];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[171] += dqdci; // dwdot[C2H5]/d[O]
  J[172] -= dqdci; // dwdot[C2H6]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[25];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[317] += dqdci; // dwdot[C2H5]/d[OH]
  J[318] -= dqdci; // dwdot[C2H6]/d[OH]
  // d()/d[C2H5]
  dqdci = -k_r * sc[4];
  J[1827] -= dqdci; // dwdot[O]/d[C2H5]
  J[1829] += dqdci; // dwdot[OH]/d[C2H5]
  J[1850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[2];
  J[1900] -= dqdci; // dwdot[O]/d[C2H6]
  J[1902] += dqdci; // dwdot[OH]/d[C2H6]
  J[1923] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1924] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5282] -= dqdT; // dwdot[C2H6]/dT

  // reaction 27: HCCO + O <=> 2 CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[27];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * (sc[14] * sc[14]);
  Kc = refC * exp(-g_RT[1] + g_RT[2] - 2.000000 * g_RT[14] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[2] + h_RT[27]) + (h_RT[1] + 2.000000 * h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;      // H
  wdot[2] -= q;      // O
  wdot[14] += 2 * q; // CO
  wdot[27] -= q;     // HCCO
  // d()/d[H]
  dqdci = -k_r * sc[14] * sc[14];
  J[74] += dqdci;     // dwdot[H]/d[H]
  J[75] -= dqdci;     // dwdot[O]/d[H]
  J[87] += 2 * dqdci; // dwdot[CO]/d[H]
  J[100] -= dqdci;    // dwdot[HCCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[27];
  J[147] += dqdci;     // dwdot[H]/d[O]
  J[148] -= dqdci;     // dwdot[O]/d[O]
  J[160] += 2 * dqdci; // dwdot[CO]/d[O]
  J[173] -= dqdci;     // dwdot[HCCO]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * 2.000000 * sc[14];
  J[1023] += dqdci;     // dwdot[H]/d[CO]
  J[1024] -= dqdci;     // dwdot[O]/d[CO]
  J[1036] += 2 * dqdci; // dwdot[CO]/d[CO]
  J[1049] -= dqdci;     // dwdot[HCCO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[2];
  J[1972] += dqdci;     // dwdot[H]/d[HCCO]
  J[1973] -= dqdci;     // dwdot[O]/d[HCCO]
  J[1985] += 2 * dqdci; // dwdot[CO]/d[HCCO]
  J[1998] -= dqdci;     // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[5257] += dqdT;     // dwdot[H]/dT
  J[5258] -= dqdT;     // dwdot[O]/dT
  J[5270] += 2 * dqdT; // dwdot[CO]/dT
  J[5283] -= dqdT;     // dwdot[HCCO]/dT

  // reaction 28: CH2CO + O <=> HCCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[28];
  k_f = 10000000 * exp(-(4025.73332643776) * invT);
  dlnkfdT = (4025.73332643776) * invT2;
  // reverse
  phi_r = sc[4] * sc[27];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[27] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[28]) + (h_RT[4] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[27] += q; // HCCO
  wdot[28] -= q; // CH2CO
  // d()/d[O]
  dqdci = +k_f * sc[28];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[173] += dqdci; // dwdot[HCCO]/d[O]
  J[174] -= dqdci; // dwdot[CH2CO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[27];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[319] += dqdci; // dwdot[HCCO]/d[OH]
  J[320] -= dqdci; // dwdot[CH2CO]/d[OH]
  // d()/d[HCCO]
  dqdci = -k_r * sc[4];
  J[1973] -= dqdci; // dwdot[O]/d[HCCO]
  J[1975] += dqdci; // dwdot[OH]/d[HCCO]
  J[1998] += dqdci; // dwdot[HCCO]/d[HCCO]
  J[1999] -= dqdci; // dwdot[CH2CO]/d[HCCO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[2];
  J[2046] -= dqdci; // dwdot[O]/d[CH2CO]
  J[2048] += dqdci; // dwdot[OH]/d[CH2CO]
  J[2071] += dqdci; // dwdot[HCCO]/d[CH2CO]
  J[2072] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5283] += dqdT; // dwdot[HCCO]/dT
  J[5284] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 29: CH2CO + O <=> CH2 + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[28];
  k_f = 1750000 * exp(-(679.342498836372) * invT);
  dlnkfdT = (679.342498836372) * invT2;
  // reverse
  phi_r = sc[10] * sc[15];
  Kc = exp(g_RT[2] - g_RT[10] - g_RT[15] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[28]) + (h_RT[10] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[10] += q; // CH2
  wdot[15] += q; // CO2
  wdot[28] -= q; // CH2CO
  // d()/d[O]
  dqdci = +k_f * sc[28];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[156] += dqdci; // dwdot[CH2]/d[O]
  J[161] += dqdci; // dwdot[CO2]/d[O]
  J[174] -= dqdci; // dwdot[CH2CO]/d[O]
  // d()/d[CH2]
  dqdci = -k_r * sc[15];
  J[732] -= dqdci; // dwdot[O]/d[CH2]
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  J[745] += dqdci; // dwdot[CO2]/d[CH2]
  J[758] -= dqdci; // dwdot[CH2CO]/d[CH2]
  // d()/d[CO2]
  dqdci = -k_r * sc[10];
  J[1097] -= dqdci; // dwdot[O]/d[CO2]
  J[1105] += dqdci; // dwdot[CH2]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  J[1123] -= dqdci; // dwdot[CH2CO]/d[CO2]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[2];
  J[2046] -= dqdci; // dwdot[O]/d[CH2CO]
  J[2054] += dqdci; // dwdot[CH2]/d[CH2CO]
  J[2059] += dqdci; // dwdot[CO2]/d[CH2CO]
  J[2072] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5284] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 30: CO + O2 <=> CO2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[14];
  k_f = 2500000 * exp(-(24053.7566254656) * invT);
  dlnkfdT = (24053.7566254656) * invT2;
  // reverse
  phi_r = sc[2] * sc[15];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[14]) + (h_RT[2] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[14] -= q; // CO
  wdot[15] += q; // CO2
  // d()/d[O]
  dqdci = -k_r * sc[15];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[160] -= dqdci; // dwdot[CO]/d[O]
  J[161] += dqdci; // dwdot[CO2]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[14];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[233] -= dqdci; // dwdot[CO]/d[O2]
  J[234] += dqdci; // dwdot[CO2]/d[O2]
  // d()/d[CO]
  dqdci = +k_f * sc[3];
  J[1024] += dqdci; // dwdot[O]/d[CO]
  J[1025] -= dqdci; // dwdot[O2]/d[CO]
  J[1036] -= dqdci; // dwdot[CO]/d[CO]
  J[1037] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[2];
  J[1097] += dqdci; // dwdot[O]/d[CO2]
  J[1098] -= dqdci; // dwdot[O2]/d[CO2]
  J[1109] -= dqdci; // dwdot[CO]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5270] -= dqdT; // dwdot[CO]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT

  // reaction 31: CH2O + O2 <=> HCO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[17];
  k_f = 100000000 * exp(-(20128.6666321888) * invT);
  dlnkfdT = (20128.6666321888) * invT2;
  // reverse
  phi_r = sc[6] * sc[16];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[17]) + (h_RT[6] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[O2]
  dqdci = +k_f * sc[17];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  J[235] += dqdci; // dwdot[HCO]/d[O2]
  J[236] -= dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[16];
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[454] += dqdci; // dwdot[HCO]/d[HO2]
  J[455] -= dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[HCO]
  dqdci = -k_r * sc[6];
  J[1171] -= dqdci; // dwdot[O2]/d[HCO]
  J[1174] += dqdci; // dwdot[HO2]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[3];
  J[1244] -= dqdci; // dwdot[O2]/d[CH2O]
  J[1247] += dqdci; // dwdot[HO2]/d[CH2O]
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT

  // reaction 37: H + O2 <=> O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[3];
  k_f = 26500000000 * exp(-0.6707 * logT - (8575.31520197823) * invT);
  dlnkfdT = -0.6707 * invT + (8575.31520197823) * invT2;
  // reverse
  phi_r = sc[2] * sc[4];
  Kc = exp(g_RT[1] - g_RT[2] + g_RT[3] - g_RT[4]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[3]) + (h_RT[2] + h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] += q; // O
  wdot[3] -= q; // O2
  wdot[4] += q; // OH
  // d()/d[H]
  dqdci = +k_f * sc[3];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[75] += dqdci; // dwdot[O]/d[H]
  J[76] -= dqdci; // dwdot[O2]/d[H]
  J[77] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[4];
  J[147] -= dqdci; // dwdot[H]/d[O]
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[1];
  J[220] -= dqdci; // dwdot[H]/d[O2]
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[223] += dqdci; // dwdot[OH]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[2];
  J[293] -= dqdci; // dwdot[H]/d[OH]
  J[294] += dqdci; // dwdot[O]/d[OH]
  J[295] -= dqdci; // dwdot[O2]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5260] += dqdT; // dwdot[OH]/dT

  // reaction 43: H + HO2 <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 3970000 * exp(-(337.658382754967) * invT);
  dlnkfdT = (337.658382754967) * invT2;
  // reverse
  phi_r = sc[2] * sc[5];
  Kc = exp(g_RT[1] - g_RT[2] - g_RT[5] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (h_RT[2] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[2] += q; // O
  wdot[5] += q; // H2O
  wdot[6] -= q; // HO2
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[75] += dqdci; // dwdot[O]/d[H]
  J[78] += dqdci; // dwdot[H2O]/d[H]
  J[79] -= dqdci; // dwdot[HO2]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[5];
  J[147] -= dqdci; // dwdot[H]/d[O]
  J[148] += dqdci; // dwdot[O]/d[O]
  J[151] += dqdci; // dwdot[H2O]/d[O]
  J[152] -= dqdci; // dwdot[HO2]/d[O]
  // d()/d[H2O]
  dqdci = -k_r * sc[2];
  J[366] -= dqdci; // dwdot[H]/d[H2O]
  J[367] += dqdci; // dwdot[O]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[371] -= dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[439] -= dqdci; // dwdot[H]/d[HO2]
  J[440] += dqdci; // dwdot[O]/d[HO2]
  J[443] += dqdci; // dwdot[H2O]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT

  // reaction 44: H + HO2 <=> H2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 44800000 * exp(-(537.435399079441) * invT);
  dlnkfdT = (537.435399079441) * invT2;
  // reverse
  phi_r = sc[0] * sc[3];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[3] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (h_RT[0] + h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // H2
  wdot[1] -= q; // H
  wdot[3] += q; // O2
  wdot[6] -= q; // HO2
  // d()/d[H2]
  dqdci = -k_r * sc[3];
  J[0] += dqdci; // dwdot[H2]/d[H2]
  J[1] -= dqdci; // dwdot[H]/d[H2]
  J[3] += dqdci; // dwdot[O2]/d[H2]
  J[6] -= dqdci; // dwdot[HO2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[76] += dqdci; // dwdot[O2]/d[H]
  J[79] -= dqdci; // dwdot[HO2]/d[H]
  // d()/d[O2]
  dqdci = -k_r * sc[0];
  J[219] += dqdci; // dwdot[H2]/d[O2]
  J[220] -= dqdci; // dwdot[H]/d[O2]
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[438] += dqdci; // dwdot[H2]/d[HO2]
  J[439] -= dqdci; // dwdot[H]/d[HO2]
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT

  // reaction 45: H + HO2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[6];
  k_f = 84000000 * exp(-(319.542582785997) * invT);
  dlnkfdT = (319.542582785997) * invT2;
  // reverse
  phi_r = (sc[4] * sc[4]);
  Kc = exp(g_RT[1] - 2.000000 * g_RT[4] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (2.000000 * h_RT[4]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;     // H
  wdot[4] += 2 * q; // OH
  wdot[6] -= q;     // HO2
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[74] -= dqdci;     // dwdot[H]/d[H]
  J[77] += 2 * dqdci; // dwdot[OH]/d[H]
  J[79] -= dqdci;     // dwdot[HO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[4];
  J[293] -= dqdci;     // dwdot[H]/d[OH]
  J[296] += 2 * dqdci; // dwdot[OH]/d[OH]
  J[298] -= dqdci;     // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[1];
  J[439] -= dqdci;     // dwdot[H]/d[HO2]
  J[442] += 2 * dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci;     // dwdot[HO2]/d[HO2]
  // d()/dT
  J[5257] -= dqdT;     // dwdot[H]/dT
  J[5260] += 2 * dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT;     // dwdot[HO2]/dT

  // reaction 46: H + H2O2 <=> H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[7];
  k_f = 12.1 * exp(2 * logT - (2616.72666218454) * invT);
  dlnkfdT = 2 * invT + (2616.72666218454) * invT2;
  // reverse
  phi_r = sc[0] * sc[6];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[0] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // H2
  wdot[1] -= q; // H
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[H2]
  dqdci = -k_r * sc[6];
  J[0] += dqdci; // dwdot[H2]/d[H2]
  J[1] -= dqdci; // dwdot[H]/d[H2]
  J[6] += dqdci; // dwdot[HO2]/d[H2]
  J[7] -= dqdci; // dwdot[H2O2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[79] += dqdci; // dwdot[HO2]/d[H]
  J[80] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[HO2]
  dqdci = -k_r * sc[0];
  J[438] += dqdci; // dwdot[H2]/d[HO2]
  J[439] -= dqdci; // dwdot[H]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[1];
  J[511] += dqdci; // dwdot[H2]/d[H2O2]
  J[512] -= dqdci; // dwdot[H]/d[H2O2]
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT

  // reaction 47: H + H2O2 <=> H2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[7];
  k_f = 10000000 * exp(-(1811.57999689699) * invT);
  dlnkfdT = (1811.57999689699) * invT2;
  // reverse
  phi_r = sc[4] * sc[5];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[5] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[4] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q; // H
  wdot[4] += q; // OH
  wdot[5] += q; // H2O
  wdot[7] -= q; // H2O2
  // d()/d[H]
  dqdci = +k_f * sc[7];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[77] += dqdci; // dwdot[OH]/d[H]
  J[78] += dqdci; // dwdot[H2O]/d[H]
  J[80] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[5];
  J[293] -= dqdci; // dwdot[H]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[299] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[4];
  J[366] -= dqdci; // dwdot[H]/d[H2O]
  J[369] += dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[372] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[1];
  J[512] -= dqdci; // dwdot[H]/d[H2O2]
  J[515] += dqdci; // dwdot[OH]/d[H2O2]
  J[516] += dqdci; // dwdot[H2O]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT

  // reaction 48: CH + H <=> C + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[9];
  k_f = 165000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[8];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[8] + g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[9]) + (h_RT[0] + h_RT[8]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q; // H2
  wdot[1] -= q; // H
  wdot[8] += q; // C
  wdot[9] -= q; // CH
  // d()/d[H2]
  dqdci = -k_r * sc[8];
  J[0] += dqdci; // dwdot[H2]/d[H2]
  J[1] -= dqdci; // dwdot[H]/d[H2]
  J[8] += dqdci; // dwdot[C]/d[H2]
  J[9] -= dqdci; // dwdot[CH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[9];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[81] += dqdci; // dwdot[C]/d[H]
  J[82] -= dqdci; // dwdot[CH]/d[H]
  // d()/d[C]
  dqdci = -k_r * sc[0];
  J[584] += dqdci; // dwdot[H2]/d[C]
  J[585] -= dqdci; // dwdot[H]/d[C]
  J[592] += dqdci; // dwdot[C]/d[C]
  J[593] -= dqdci; // dwdot[CH]/d[C]
  // d()/d[CH]
  dqdci = +k_f * sc[1];
  J[657] += dqdci; // dwdot[H2]/d[CH]
  J[658] -= dqdci; // dwdot[H]/d[CH]
  J[665] += dqdci; // dwdot[C]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5264] += dqdT; // dwdot[C]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT

  // reaction 50: CH2(S) + H <=> CH + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[9];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[9] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[11]) + (h_RT[0] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[9] += q;  // CH
  wdot[11] -= q; // CH2(S)
  // d()/d[H2]
  dqdci = -k_r * sc[9];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[9] += dqdci;  // dwdot[CH]/d[H2]
  J[11] -= dqdci; // dwdot[CH2(S)]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[11];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[82] += dqdci; // dwdot[CH]/d[H]
  J[84] -= dqdci; // dwdot[CH2(S)]/d[H]
  // d()/d[CH]
  dqdci = -k_r * sc[0];
  J[657] += dqdci; // dwdot[H2]/d[CH]
  J[658] -= dqdci; // dwdot[H]/d[CH]
  J[666] += dqdci; // dwdot[CH]/d[CH]
  J[668] -= dqdci; // dwdot[CH2(S)]/d[CH]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[1];
  J[803] += dqdci; // dwdot[H2]/d[CH2(S)]
  J[804] -= dqdci; // dwdot[H]/d[CH2(S)]
  J[812] += dqdci; // dwdot[CH]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5265] += dqdT; // dwdot[CH]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 52: CH4 + H <=> CH3 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[13];
  k_f = 660 * exp(1.62 * logT - (5454.86865732316) * invT);
  dlnkfdT = 1.62 * invT + (5454.86865732316) * invT2;
  // reverse
  phi_r = sc[0] * sc[12];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[13]) + (h_RT[0] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[12] += q; // CH3
  wdot[13] -= q; // CH4
  // d()/d[H2]
  dqdci = -k_r * sc[12];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[12] += dqdci; // dwdot[CH3]/d[H2]
  J[13] -= dqdci; // dwdot[CH4]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[13];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[85] += dqdci; // dwdot[CH3]/d[H]
  J[86] -= dqdci; // dwdot[CH4]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[0];
  J[876] += dqdci; // dwdot[H2]/d[CH3]
  J[877] -= dqdci; // dwdot[H]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[889] -= dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[1];
  J[949] += dqdci; // dwdot[H2]/d[CH4]
  J[950] -= dqdci; // dwdot[H]/d[CH4]
  J[961] += dqdci; // dwdot[CH3]/d[CH4]
  J[962] -= dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5269] -= dqdT; // dwdot[CH4]/dT

  // reaction 54: H + HCO <=> CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[16];
  k_f = 73400000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[14];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[16]) + (h_RT[0] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[H2]
  dqdci = -k_r * sc[14];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[14] += dqdci; // dwdot[CO]/d[H2]
  J[16] -= dqdci; // dwdot[HCO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[16];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[87] += dqdci; // dwdot[CO]/d[H]
  J[89] -= dqdci; // dwdot[HCO]/d[H]
  // d()/d[CO]
  dqdci = -k_r * sc[0];
  J[1022] += dqdci; // dwdot[H2]/d[CO]
  J[1023] -= dqdci; // dwdot[H]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[1];
  J[1168] += dqdci; // dwdot[H2]/d[HCO]
  J[1169] -= dqdci; // dwdot[H]/d[HCO]
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT

  // reaction 57: CH2O + H <=> H2 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 57.4 * exp(1.9 * logT - (1379.82009763654) * invT);
  dlnkfdT = 1.9 * invT + (1379.82009763654) * invT2;
  // reverse
  phi_r = sc[0] * sc[16];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[0] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[H2]
  dqdci = -k_r * sc[16];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[16] += dqdci; // dwdot[HCO]/d[H2]
  J[17] -= dqdci; // dwdot[CH2O]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[17];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[89] += dqdci; // dwdot[HCO]/d[H]
  J[90] -= dqdci; // dwdot[CH2O]/d[H]
  // d()/d[HCO]
  dqdci = -k_r * sc[0];
  J[1168] += dqdci; // dwdot[H2]/d[HCO]
  J[1169] -= dqdci; // dwdot[H]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[1];
  J[1241] += dqdci; // dwdot[H2]/d[CH2O]
  J[1242] -= dqdci; // dwdot[H]/d[CH2O]
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT

  // reaction 59: CH2OH + H <=> CH2O + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[18];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[17];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[18]) + (h_RT[0] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[17] += q; // CH2O
  wdot[18] -= q; // CH2OH
  // d()/d[H2]
  dqdci = -k_r * sc[17];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[17] += dqdci; // dwdot[CH2O]/d[H2]
  J[18] -= dqdci; // dwdot[CH2OH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[18];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[90] += dqdci; // dwdot[CH2O]/d[H]
  J[91] -= dqdci; // dwdot[CH2OH]/d[H]
  // d()/d[CH2O]
  dqdci = -k_r * sc[0];
  J[1241] += dqdci; // dwdot[H2]/d[CH2O]
  J[1242] -= dqdci; // dwdot[H]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1259] -= dqdci; // dwdot[CH2OH]/d[CH2O]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[1];
  J[1314] += dqdci; // dwdot[H2]/d[CH2OH]
  J[1315] -= dqdci; // dwdot[H]/d[CH2OH]
  J[1331] += dqdci; // dwdot[CH2O]/d[CH2OH]
  J[1332] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5274] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 60: CH2OH + H <=> CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[18];
  k_f = 165000 * exp(0.65 * logT - (-142.91353308854) * invT);
  dlnkfdT = 0.65 * invT + (-142.91353308854) * invT2;
  // reverse
  phi_r = sc[4] * sc[12];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[12] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[18]) + (h_RT[4] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[12] += q; // CH3
  wdot[18] -= q; // CH2OH
  // d()/d[H]
  dqdci = +k_f * sc[18];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[77] += dqdci; // dwdot[OH]/d[H]
  J[85] += dqdci; // dwdot[CH3]/d[H]
  J[91] -= dqdci; // dwdot[CH2OH]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[293] -= dqdci; // dwdot[H]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[304] += dqdci; // dwdot[CH3]/d[OH]
  J[310] -= dqdci; // dwdot[CH2OH]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[4];
  J[877] -= dqdci; // dwdot[H]/d[CH3]
  J[880] += dqdci; // dwdot[OH]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[894] -= dqdci; // dwdot[CH2OH]/d[CH3]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[1];
  J[1315] -= dqdci; // dwdot[H]/d[CH2OH]
  J[1318] += dqdci; // dwdot[OH]/d[CH2OH]
  J[1326] += dqdci; // dwdot[CH3]/d[CH2OH]
  J[1332] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5274] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 61: CH2OH + H <=> CH2(S) + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[18];
  k_f = 32800000 * exp(-0.09 * logT - (306.962166140879) * invT);
  dlnkfdT = -0.09 * invT + (306.962166140879) * invT2;
  // reverse
  phi_r = sc[5] * sc[11];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[11] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[18]) + (h_RT[5] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2O
  wdot[11] += q; // CH2(S)
  wdot[18] -= q; // CH2OH
  // d()/d[H]
  dqdci = +k_f * sc[18];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[78] += dqdci; // dwdot[H2O]/d[H]
  J[84] += dqdci; // dwdot[CH2(S)]/d[H]
  J[91] -= dqdci; // dwdot[CH2OH]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[366] -= dqdci; // dwdot[H]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[376] += dqdci; // dwdot[CH2(S)]/d[H2O]
  J[383] -= dqdci; // dwdot[CH2OH]/d[H2O]
  // d()/d[CH2(S)]
  dqdci = -k_r * sc[5];
  J[804] -= dqdci; // dwdot[H]/d[CH2(S)]
  J[808] += dqdci; // dwdot[H2O]/d[CH2(S)]
  J[814] += dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[821] -= dqdci; // dwdot[CH2OH]/d[CH2(S)]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[1];
  J[1315] -= dqdci; // dwdot[H]/d[CH2OH]
  J[1319] += dqdci; // dwdot[H2O]/d[CH2OH]
  J[1325] += dqdci; // dwdot[CH2(S)]/d[CH2OH]
  J[1332] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5267] += dqdT; // dwdot[CH2(S)]/dT
  J[5274] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 63: CH3O + H <=> CH2OH + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 41.5 * exp(1.63 * logT - (968.188865008281) * invT);
  dlnkfdT = 1.63 * invT + (968.188865008281) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(g_RT[1] - g_RT[1] - g_RT[18] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // CH2OH
  wdot[19] -= q; // CH3O
  // d()/d[H]
  dqdci = +k_f * sc[19] - k_r * sc[18];
  J[91] += dqdci; // dwdot[CH2OH]/d[H]
  J[92] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[1];
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1333] -= dqdci; // dwdot[CH3O]/d[CH2OH]
  // d()/d[CH3O]
  dqdci = +k_f * sc[1];
  J[1405] += dqdci; // dwdot[CH2OH]/d[CH3O]
  J[1406] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5275] -= dqdT; // dwdot[CH3O]/dT

  // reaction 64: CH3O + H <=> CH2O + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[17];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[17] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[0] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[17] += q; // CH2O
  wdot[19] -= q; // CH3O
  // d()/d[H2]
  dqdci = -k_r * sc[17];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[17] += dqdci; // dwdot[CH2O]/d[H2]
  J[19] -= dqdci; // dwdot[CH3O]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[90] += dqdci; // dwdot[CH2O]/d[H]
  J[92] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[CH2O]
  dqdci = -k_r * sc[0];
  J[1241] += dqdci; // dwdot[H2]/d[CH2O]
  J[1242] -= dqdci; // dwdot[H]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1260] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[1];
  J[1387] += dqdci; // dwdot[H2]/d[CH3O]
  J[1388] -= dqdci; // dwdot[H]/d[CH3O]
  J[1404] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[1406] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5275] -= dqdT; // dwdot[CH3O]/dT

  // reaction 65: CH3O + H <=> CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 1500000 * exp(0.5 * logT - (-55.3538332385192) * invT);
  dlnkfdT = 0.5 * invT + (-55.3538332385192) * invT2;
  // reverse
  phi_r = sc[4] * sc[12];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[12] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[4] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[12] += q; // CH3
  wdot[19] -= q; // CH3O
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[77] += dqdci; // dwdot[OH]/d[H]
  J[85] += dqdci; // dwdot[CH3]/d[H]
  J[92] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[12];
  J[293] -= dqdci; // dwdot[H]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[304] += dqdci; // dwdot[CH3]/d[OH]
  J[311] -= dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[4];
  J[877] -= dqdci; // dwdot[H]/d[CH3]
  J[880] += dqdci; // dwdot[OH]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[895] -= dqdci; // dwdot[CH3O]/d[CH3]
  // d()/d[CH3O]
  dqdci = +k_f * sc[1];
  J[1388] -= dqdci; // dwdot[H]/d[CH3O]
  J[1391] += dqdci; // dwdot[OH]/d[CH3O]
  J[1399] += dqdci; // dwdot[CH3]/d[CH3O]
  J[1406] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5275] -= dqdT; // dwdot[CH3O]/dT

  // reaction 66: CH3O + H <=> CH2(S) + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 262000000 * exp(-0.23 * logT - (538.44183241105) * invT);
  dlnkfdT = -0.23 * invT + (538.44183241105) * invT2;
  // reverse
  phi_r = sc[5] * sc[11];
  Kc = exp(g_RT[1] - g_RT[5] - g_RT[11] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[5] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[5] += q;  // H2O
  wdot[11] += q; // CH2(S)
  wdot[19] -= q; // CH3O
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[78] += dqdci; // dwdot[H2O]/d[H]
  J[84] += dqdci; // dwdot[CH2(S)]/d[H]
  J[92] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[366] -= dqdci; // dwdot[H]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[376] += dqdci; // dwdot[CH2(S)]/d[H2O]
  J[384] -= dqdci; // dwdot[CH3O]/d[H2O]
  // d()/d[CH2(S)]
  dqdci = -k_r * sc[5];
  J[804] -= dqdci; // dwdot[H]/d[CH2(S)]
  J[808] += dqdci; // dwdot[H2O]/d[CH2(S)]
  J[814] += dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[822] -= dqdci; // dwdot[CH3O]/d[CH2(S)]
  // d()/d[CH3O]
  dqdci = +k_f * sc[1];
  J[1388] -= dqdci; // dwdot[H]/d[CH3O]
  J[1392] += dqdci; // dwdot[H2O]/d[CH3O]
  J[1398] += dqdci; // dwdot[CH2(S)]/d[CH3O]
  J[1406] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5267] += dqdT; // dwdot[CH2(S)]/dT
  J[5275] -= dqdT; // dwdot[CH3O]/dT

  // reaction 67: CH3OH + H <=> CH2OH + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[20];
  k_f = 17 * exp(2.1 * logT - (2450.66516246898) * invT);
  dlnkfdT = 2.1 * invT + (2450.66516246898) * invT2;
  // reverse
  phi_r = sc[0] * sc[18];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[20]) + (h_RT[0] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  // d()/d[H2]
  dqdci = -k_r * sc[18];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[18] += dqdci; // dwdot[CH2OH]/d[H2]
  J[20] -= dqdci; // dwdot[CH3OH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[91] += dqdci; // dwdot[CH2OH]/d[H]
  J[93] -= dqdci; // dwdot[CH3OH]/d[H]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[0];
  J[1314] += dqdci; // dwdot[H2]/d[CH2OH]
  J[1315] -= dqdci; // dwdot[H]/d[CH2OH]
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1334] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[1];
  J[1460] += dqdci; // dwdot[H2]/d[CH3OH]
  J[1461] -= dqdci; // dwdot[H]/d[CH3OH]
  J[1478] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 68: CH3OH + H <=> CH3O + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[20];
  k_f = 4.2 * exp(2.1 * logT - (2450.66516246898) * invT);
  dlnkfdT = 2.1 * invT + (2450.66516246898) * invT2;
  // reverse
  phi_r = sc[0] * sc[19];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[20]) + (h_RT[0] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  // d()/d[H2]
  dqdci = -k_r * sc[19];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[19] += dqdci; // dwdot[CH3O]/d[H2]
  J[20] -= dqdci; // dwdot[CH3OH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[92] += dqdci; // dwdot[CH3O]/d[H]
  J[93] -= dqdci; // dwdot[CH3OH]/d[H]
  // d()/d[CH3O]
  dqdci = -k_r * sc[0];
  J[1387] += dqdci; // dwdot[H2]/d[CH3O]
  J[1388] -= dqdci; // dwdot[H]/d[CH3O]
  J[1406] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[1407] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[1];
  J[1460] += dqdci; // dwdot[H2]/d[CH3OH]
  J[1461] -= dqdci; // dwdot[H]/d[CH3OH]
  J[1479] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 72: C2H3 + H <=> C2H2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[23];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[22];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[22] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[23]) + (h_RT[0] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[22] += q; // C2H2
  wdot[23] -= q; // C2H3
  // d()/d[H2]
  dqdci = -k_r * sc[22];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[22] += dqdci; // dwdot[C2H2]/d[H2]
  J[23] -= dqdci; // dwdot[C2H3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[23];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[95] += dqdci; // dwdot[C2H2]/d[H]
  J[96] -= dqdci; // dwdot[C2H3]/d[H]
  // d()/d[C2H2]
  dqdci = -k_r * sc[0];
  J[1606] += dqdci; // dwdot[H2]/d[C2H2]
  J[1607] -= dqdci; // dwdot[H]/d[C2H2]
  J[1628] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[1629] -= dqdci; // dwdot[C2H3]/d[C2H2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[1];
  J[1679] += dqdci; // dwdot[H2]/d[C2H3]
  J[1680] -= dqdci; // dwdot[H]/d[C2H3]
  J[1701] += dqdci; // dwdot[C2H2]/d[C2H3]
  J[1702] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT

  // reaction 74: C2H4 + H <=> C2H3 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[24];
  k_f = 1.325 * exp(2.53 * logT - (6159.37198944977) * invT);
  dlnkfdT = 2.53 * invT + (6159.37198944977) * invT2;
  // reverse
  phi_r = sc[0] * sc[23];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[24]) + (h_RT[0] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[23] += q; // C2H3
  wdot[24] -= q; // C2H4
  // d()/d[H2]
  dqdci = -k_r * sc[23];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[23] += dqdci; // dwdot[C2H3]/d[H2]
  J[24] -= dqdci; // dwdot[C2H4]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[24];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[96] += dqdci; // dwdot[C2H3]/d[H]
  J[97] -= dqdci; // dwdot[C2H4]/d[H]
  // d()/d[C2H3]
  dqdci = -k_r * sc[0];
  J[1679] += dqdci; // dwdot[H2]/d[C2H3]
  J[1680] -= dqdci; // dwdot[H]/d[C2H3]
  J[1702] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[1703] -= dqdci; // dwdot[C2H4]/d[C2H3]
  // d()/d[C2H4]
  dqdci = +k_f * sc[1];
  J[1752] += dqdci; // dwdot[H2]/d[C2H4]
  J[1753] -= dqdci; // dwdot[H]/d[C2H4]
  J[1775] += dqdci; // dwdot[C2H3]/d[C2H4]
  J[1776] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5279] += dqdT; // dwdot[C2H3]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT

  // reaction 76: C2H5 + H <=> C2H4 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[25];
  k_f = 2000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[24];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[24] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[25]) + (h_RT[0] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[24] += q; // C2H4
  wdot[25] -= q; // C2H5
  // d()/d[H2]
  dqdci = -k_r * sc[24];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[24] += dqdci; // dwdot[C2H4]/d[H2]
  J[25] -= dqdci; // dwdot[C2H5]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[25];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[97] += dqdci; // dwdot[C2H4]/d[H]
  J[98] -= dqdci; // dwdot[C2H5]/d[H]
  // d()/d[C2H4]
  dqdci = -k_r * sc[0];
  J[1752] += dqdci; // dwdot[H2]/d[C2H4]
  J[1753] -= dqdci; // dwdot[H]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[1777] -= dqdci; // dwdot[C2H5]/d[C2H4]
  // d()/d[C2H5]
  dqdci = +k_f * sc[1];
  J[1825] += dqdci; // dwdot[H2]/d[C2H5]
  J[1826] -= dqdci; // dwdot[H]/d[C2H5]
  J[1849] += dqdci; // dwdot[C2H4]/d[C2H5]
  J[1850] -= dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT
  J[5281] -= dqdT; // dwdot[C2H5]/dT

  // reaction 77: C2H6 + H <=> C2H5 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[26];
  k_f = 115 * exp(1.9 * logT - (3789.22149350954) * invT);
  dlnkfdT = 1.9 * invT + (3789.22149350954) * invT2;
  // reverse
  phi_r = sc[0] * sc[25];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[26]) + (h_RT[0] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  // d()/d[H2]
  dqdci = -k_r * sc[25];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[25] += dqdci; // dwdot[C2H5]/d[H2]
  J[26] -= dqdci; // dwdot[C2H6]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[26];
  J[73] += dqdci; // dwdot[H2]/d[H]
  J[74] -= dqdci; // dwdot[H]/d[H]
  J[98] += dqdci; // dwdot[C2H5]/d[H]
  J[99] -= dqdci; // dwdot[C2H6]/d[H]
  // d()/d[C2H5]
  dqdci = -k_r * sc[0];
  J[1825] += dqdci; // dwdot[H2]/d[C2H5]
  J[1826] -= dqdci; // dwdot[H]/d[C2H5]
  J[1850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[1];
  J[1898] += dqdci; // dwdot[H2]/d[C2H6]
  J[1899] -= dqdci; // dwdot[H]/d[C2H6]
  J[1923] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1924] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5282] -= dqdT; // dwdot[C2H6]/dT

  // reaction 78: H + HCCO <=> CH2(S) + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[27];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[11] * sc[14];
  Kc = exp(g_RT[1] - g_RT[11] - g_RT[14] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[27]) + (h_RT[11] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[11] += q; // CH2(S)
  wdot[14] += q; // CO
  wdot[27] -= q; // HCCO
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[84] += dqdci;  // dwdot[CH2(S)]/d[H]
  J[87] += dqdci;  // dwdot[CO]/d[H]
  J[100] -= dqdci; // dwdot[HCCO]/d[H]
  // d()/d[CH2(S)]
  dqdci = -k_r * sc[14];
  J[804] -= dqdci; // dwdot[H]/d[CH2(S)]
  J[814] += dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[817] += dqdci; // dwdot[CO]/d[CH2(S)]
  J[830] -= dqdci; // dwdot[HCCO]/d[CH2(S)]
  // d()/d[CO]
  dqdci = -k_r * sc[11];
  J[1023] -= dqdci; // dwdot[H]/d[CO]
  J[1033] += dqdci; // dwdot[CH2(S)]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1049] -= dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[1];
  J[1972] -= dqdci; // dwdot[H]/d[HCCO]
  J[1982] += dqdci; // dwdot[CH2(S)]/d[HCCO]
  J[1985] += dqdci; // dwdot[CO]/d[HCCO]
  J[1998] -= dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5267] += dqdT; // dwdot[CH2(S)]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5283] -= dqdT; // dwdot[HCCO]/dT

  // reaction 79: CH2CO + H <=> H2 + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[28];
  k_f = 50000000 * exp(-(4025.73332643776) * invT);
  dlnkfdT = (4025.73332643776) * invT2;
  // reverse
  phi_r = sc[0] * sc[27];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[27] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[28]) + (h_RT[0] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[27] += q; // HCCO
  wdot[28] -= q; // CH2CO
  // d()/d[H2]
  dqdci = -k_r * sc[27];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[27] += dqdci; // dwdot[HCCO]/d[H2]
  J[28] -= dqdci; // dwdot[CH2CO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[28];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[100] += dqdci; // dwdot[HCCO]/d[H]
  J[101] -= dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[HCCO]
  dqdci = -k_r * sc[0];
  J[1971] += dqdci; // dwdot[H2]/d[HCCO]
  J[1972] -= dqdci; // dwdot[H]/d[HCCO]
  J[1998] += dqdci; // dwdot[HCCO]/d[HCCO]
  J[1999] -= dqdci; // dwdot[CH2CO]/d[HCCO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[1];
  J[2044] += dqdci; // dwdot[H2]/d[CH2CO]
  J[2045] -= dqdci; // dwdot[H]/d[CH2CO]
  J[2071] += dqdci; // dwdot[HCCO]/d[CH2CO]
  J[2072] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5283] += dqdT; // dwdot[HCCO]/dT
  J[5284] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 80: CH2CO + H <=> CH3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[28];
  k_f = 11300000 * exp(-(1725.02673037858) * invT);
  dlnkfdT = (1725.02673037858) * invT2;
  // reverse
  phi_r = sc[12] * sc[14];
  Kc = exp(g_RT[1] - g_RT[12] - g_RT[14] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[28]) + (h_RT[12] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[12] += q; // CH3
  wdot[14] += q; // CO
  wdot[28] -= q; // CH2CO
  // d()/d[H]
  dqdci = +k_f * sc[28];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[85] += dqdci;  // dwdot[CH3]/d[H]
  J[87] += dqdci;  // dwdot[CO]/d[H]
  J[101] -= dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[14];
  J[877] -= dqdci; // dwdot[H]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[890] += dqdci; // dwdot[CO]/d[CH3]
  J[904] -= dqdci; // dwdot[CH2CO]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[12];
  J[1023] -= dqdci; // dwdot[H]/d[CO]
  J[1034] += dqdci; // dwdot[CH3]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1050] -= dqdci; // dwdot[CH2CO]/d[CO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[1];
  J[2045] -= dqdci; // dwdot[H]/d[CH2CO]
  J[2056] += dqdci; // dwdot[CH3]/d[CH2CO]
  J[2058] += dqdci; // dwdot[CO]/d[CH2CO]
  J[2072] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5284] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 81: H + HCCOH <=> CH2CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[29];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[28];
  Kc = exp(g_RT[1] - g_RT[1] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[29]) + (h_RT[1] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[28] += q; // CH2CO
  wdot[29] -= q; // HCCOH
  // d()/d[H]
  dqdci = +k_f * sc[29] - k_r * sc[28];
  J[101] += dqdci; // dwdot[CH2CO]/d[H]
  J[102] -= dqdci; // dwdot[HCCOH]/d[H]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[1];
  J[2072] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[2073] -= dqdci; // dwdot[HCCOH]/d[CH2CO]
  // d()/d[HCCOH]
  dqdci = +k_f * sc[1];
  J[2145] += dqdci; // dwdot[CH2CO]/d[HCCOH]
  J[2146] -= dqdci; // dwdot[HCCOH]/d[HCCOH]
  // d()/dT
  J[5284] += dqdT; // dwdot[CH2CO]/dT
  J[5285] -= dqdT; // dwdot[HCCOH]/dT

  // reaction 83: H2 + OH <=> H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[4];
  k_f = 216 * exp(1.51 * logT - (1726.03316371019) * invT);
  dlnkfdT = 1.51 * invT + (1726.03316371019) * invT2;
  // reverse
  phi_r = sc[1] * sc[5];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[4]) + (h_RT[1] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q; // H2
  wdot[1] += q; // H
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  // d()/d[H2]
  dqdci = +k_f * sc[4];
  J[0] -= dqdci; // dwdot[H2]/d[H2]
  J[1] += dqdci; // dwdot[H]/d[H2]
  J[4] -= dqdci; // dwdot[OH]/d[H2]
  J[5] += dqdci; // dwdot[H2O]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[5];
  J[73] -= dqdci; // dwdot[H2]/d[H]
  J[74] += dqdci; // dwdot[H]/d[H]
  J[77] -= dqdci; // dwdot[OH]/d[H]
  J[78] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[0];
  J[292] -= dqdci; // dwdot[H2]/d[OH]
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[1];
  J[365] -= dqdci; // dwdot[H2]/d[H2O]
  J[366] += dqdci; // dwdot[H]/d[H2O]
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT

  // reaction 85: 2 OH <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[4] * sc[4]);
  k_f = 0.0357 * exp(2.4 * logT - (-1061.78716484796) * invT);
  dlnkfdT = 2.4 * invT + (-1061.78716484796) * invT2;
  // reverse
  phi_r = sc[2] * sc[5];
  Kc = exp(-g_RT[2] + 2.000000 * g_RT[4] - g_RT[5]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[4]) + (h_RT[2] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;     // O
  wdot[4] -= 2 * q; // OH
  wdot[5] += q;     // H2O
  // d()/d[O]
  dqdci = -k_r * sc[5];
  J[148] += dqdci;      // dwdot[O]/d[O]
  J[150] += -2 * dqdci; // dwdot[OH]/d[O]
  J[151] += dqdci;      // dwdot[H2O]/d[O]
  // d()/d[OH]
  dqdci = +k_f * 2.000000 * sc[4];
  J[294] += dqdci;      // dwdot[O]/d[OH]
  J[296] += -2 * dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci;      // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[2];
  J[367] += dqdci;      // dwdot[O]/d[H2O]
  J[369] += -2 * dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci;      // dwdot[H2O]/d[H2O]
  // d()/dT
  J[5258] += dqdT;      // dwdot[O]/dT
  J[5260] += -2 * dqdT; // dwdot[OH]/dT
  J[5261] += dqdT;      // dwdot[H2O]/dT

  // reaction 86: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[6];
  k_f = 14500000 * exp(-(-251.60833290236) * invT);
  dlnkfdT = (-251.60833290236) * invT2;
  // reverse
  phi_r = sc[3] * sc[5];
  Kc = exp(-g_RT[3] + g_RT[4] - g_RT[5] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[6]) + (h_RT[3] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // O2
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] -= q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[5];
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[223] -= dqdci; // dwdot[OH]/d[O2]
  J[224] += dqdci; // dwdot[H2O]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[OH]
  dqdci = +k_f * sc[6];
  J[295] += dqdci; // dwdot[O2]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[298] -= dqdci; // dwdot[HO2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[368] += dqdci; // dwdot[O2]/d[H2O]
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[371] -= dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[4];
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[442] -= dqdci; // dwdot[OH]/d[HO2]
  J[443] += dqdci; // dwdot[H2O]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT

  // reaction 87: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 2000000 * exp(-(214.873516298615) * invT);
  dlnkfdT = (214.873516298615) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[7]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[298] += dqdci; // dwdot[HO2]/d[OH]
  J[299] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[6];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[371] += dqdci; // dwdot[HO2]/d[H2O]
  J[372] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[442] -= dqdci; // dwdot[OH]/d[HO2]
  J[443] += dqdci; // dwdot[H2O]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[4];
  J[515] -= dqdci; // dwdot[OH]/d[H2O2]
  J[516] += dqdci; // dwdot[H2O]/d[H2O2]
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT

  // reaction 88: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[7];
  k_f = 1700000000000 * exp(-(14799.6021413168) * invT);
  dlnkfdT = (14799.6021413168) * invT2;
  // reverse
  phi_r = sc[5] * sc[6];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[6] + g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[7]) + (h_RT[5] + h_RT[6]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] += q; // HO2
  wdot[7] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[298] += dqdci; // dwdot[HO2]/d[OH]
  J[299] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[6];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[371] += dqdci; // dwdot[HO2]/d[H2O]
  J[372] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[HO2]
  dqdci = -k_r * sc[5];
  J[442] -= dqdci; // dwdot[OH]/d[HO2]
  J[443] += dqdci; // dwdot[H2O]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[4];
  J[515] -= dqdci; // dwdot[OH]/d[H2O2]
  J[516] += dqdci; // dwdot[H2O]/d[H2O2]
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT

  // reaction 89: C + OH <=> CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[8];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[14];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[8] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[8]) + (h_RT[1] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[8] -= q;  // C
  wdot[14] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[14];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[77] -= dqdci; // dwdot[OH]/d[H]
  J[81] -= dqdci; // dwdot[C]/d[H]
  J[87] += dqdci; // dwdot[CO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[8];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[300] -= dqdci; // dwdot[C]/d[OH]
  J[306] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[C]
  dqdci = +k_f * sc[4];
  J[585] += dqdci; // dwdot[H]/d[C]
  J[588] -= dqdci; // dwdot[OH]/d[C]
  J[592] -= dqdci; // dwdot[C]/d[C]
  J[598] += dqdci; // dwdot[CO]/d[C]
  // d()/d[CO]
  dqdci = -k_r * sc[1];
  J[1023] += dqdci; // dwdot[H]/d[CO]
  J[1026] -= dqdci; // dwdot[OH]/d[CO]
  J[1030] -= dqdci; // dwdot[C]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5264] -= dqdT; // dwdot[C]/dT
  J[5270] += dqdT; // dwdot[CO]/dT

  // reaction 90: CH + OH <=> H + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[16];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[9] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[9]) + (h_RT[1] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[9] -= q;  // CH
  wdot[16] += q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[16];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[77] -= dqdci; // dwdot[OH]/d[H]
  J[82] -= dqdci; // dwdot[CH]/d[H]
  J[89] += dqdci; // dwdot[HCO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[9];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[301] -= dqdci; // dwdot[CH]/d[OH]
  J[308] += dqdci; // dwdot[HCO]/d[OH]
  // d()/d[CH]
  dqdci = +k_f * sc[4];
  J[658] += dqdci; // dwdot[H]/d[CH]
  J[661] -= dqdci; // dwdot[OH]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[673] += dqdci; // dwdot[HCO]/d[CH]
  // d()/d[HCO]
  dqdci = -k_r * sc[1];
  J[1169] += dqdci; // dwdot[H]/d[HCO]
  J[1172] -= dqdci; // dwdot[OH]/d[HCO]
  J[1177] -= dqdci; // dwdot[CH]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT

  // reaction 91: CH2 + OH <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[17];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[10] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[1] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[10] -= q; // CH2
  wdot[17] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[17];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[77] -= dqdci; // dwdot[OH]/d[H]
  J[83] -= dqdci; // dwdot[CH2]/d[H]
  J[90] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[302] -= dqdci; // dwdot[CH2]/d[OH]
  J[309] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH2]
  dqdci = +k_f * sc[4];
  J[731] += dqdci; // dwdot[H]/d[CH2]
  J[734] -= dqdci; // dwdot[OH]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[747] += dqdci; // dwdot[CH2O]/d[CH2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[1242] += dqdci; // dwdot[H]/d[CH2O]
  J[1245] -= dqdci; // dwdot[OH]/d[CH2O]
  J[1251] -= dqdci; // dwdot[CH2]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 92: CH2 + OH <=> CH + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 11.3 * exp(2 * logT - (1509.64999741416) * invT);
  dlnkfdT = 2 * invT + (1509.64999741416) * invT2;
  // reverse
  phi_r = sc[5] * sc[9];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[9] + g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[5] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[9] += q;  // CH
  wdot[10] -= q; // CH2
  // d()/d[OH]
  dqdci = +k_f * sc[10];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[301] += dqdci; // dwdot[CH]/d[OH]
  J[302] -= dqdci; // dwdot[CH2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[9];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[374] += dqdci; // dwdot[CH]/d[H2O]
  J[375] -= dqdci; // dwdot[CH2]/d[H2O]
  // d()/d[CH]
  dqdci = -k_r * sc[5];
  J[661] -= dqdci; // dwdot[OH]/d[CH]
  J[662] += dqdci; // dwdot[H2O]/d[CH]
  J[666] += dqdci; // dwdot[CH]/d[CH]
  J[667] -= dqdci; // dwdot[CH2]/d[CH]
  // d()/d[CH2]
  dqdci = +k_f * sc[4];
  J[734] -= dqdci; // dwdot[OH]/d[CH2]
  J[735] += dqdci; // dwdot[H2O]/d[CH2]
  J[739] += dqdci; // dwdot[CH]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5265] += dqdT; // dwdot[CH]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT

  // reaction 93: CH2(S) + OH <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[11];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[17];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[11] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[11]) + (h_RT[1] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[11] -= q; // CH2(S)
  wdot[17] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[17];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[77] -= dqdci; // dwdot[OH]/d[H]
  J[84] -= dqdci; // dwdot[CH2(S)]/d[H]
  J[90] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[11];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[303] -= dqdci; // dwdot[CH2(S)]/d[OH]
  J[309] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[4];
  J[804] += dqdci; // dwdot[H]/d[CH2(S)]
  J[807] -= dqdci; // dwdot[OH]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[820] += dqdci; // dwdot[CH2O]/d[CH2(S)]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[1242] += dqdci; // dwdot[H]/d[CH2O]
  J[1245] -= dqdci; // dwdot[OH]/d[CH2O]
  J[1252] -= dqdci; // dwdot[CH2(S)]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 95: CH3 + OH <=> CH2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 56 * exp(1.6 * logT - (2727.43432866158) * invT);
  dlnkfdT = 1.6 * invT + (2727.43432866158) * invT2;
  // reverse
  phi_r = sc[5] * sc[10];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[10] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[5] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[10] += q; // CH2
  wdot[12] -= q; // CH3
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[302] += dqdci; // dwdot[CH2]/d[OH]
  J[304] -= dqdci; // dwdot[CH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[10];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[375] += dqdci; // dwdot[CH2]/d[H2O]
  J[377] -= dqdci; // dwdot[CH3]/d[H2O]
  // d()/d[CH2]
  dqdci = -k_r * sc[5];
  J[734] -= dqdci; // dwdot[OH]/d[CH2]
  J[735] += dqdci; // dwdot[H2O]/d[CH2]
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  J[742] -= dqdci; // dwdot[CH3]/d[CH2]
  // d()/d[CH3]
  dqdci = +k_f * sc[4];
  J[880] -= dqdci; // dwdot[OH]/d[CH3]
  J[881] += dqdci; // dwdot[H2O]/d[CH3]
  J[886] += dqdci; // dwdot[CH2]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT

  // reaction 96: CH3 + OH <=> CH2(S) + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 644000000000 * exp(-1.34 * logT - (713.058015445288) * invT);
  dlnkfdT = -1.34 * invT + (713.058015445288) * invT2;
  // reverse
  phi_r = sc[5] * sc[11];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[12]) + (h_RT[5] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[11] += q; // CH2(S)
  wdot[12] -= q; // CH3
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[303] += dqdci; // dwdot[CH2(S)]/d[OH]
  J[304] -= dqdci; // dwdot[CH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[376] += dqdci; // dwdot[CH2(S)]/d[H2O]
  J[377] -= dqdci; // dwdot[CH3]/d[H2O]
  // d()/d[CH2(S)]
  dqdci = -k_r * sc[5];
  J[807] -= dqdci; // dwdot[OH]/d[CH2(S)]
  J[808] += dqdci; // dwdot[H2O]/d[CH2(S)]
  J[814] += dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[815] -= dqdci; // dwdot[CH3]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = +k_f * sc[4];
  J[880] -= dqdci; // dwdot[OH]/d[CH3]
  J[881] += dqdci; // dwdot[H2O]/d[CH3]
  J[887] += dqdci; // dwdot[CH2(S)]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5267] += dqdT; // dwdot[CH2(S)]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT

  // reaction 97: CH4 + OH <=> CH3 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[13];
  k_f = 100 * exp(1.6 * logT - (1570.03599731073) * invT);
  dlnkfdT = 1.6 * invT + (1570.03599731073) * invT2;
  // reverse
  phi_r = sc[5] * sc[12];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[13]) + (h_RT[5] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[12] += q; // CH3
  wdot[13] -= q; // CH4
  // d()/d[OH]
  dqdci = +k_f * sc[13];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[304] += dqdci; // dwdot[CH3]/d[OH]
  J[305] -= dqdci; // dwdot[CH4]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[12];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[377] += dqdci; // dwdot[CH3]/d[H2O]
  J[378] -= dqdci; // dwdot[CH4]/d[H2O]
  // d()/d[CH3]
  dqdci = -k_r * sc[5];
  J[880] -= dqdci; // dwdot[OH]/d[CH3]
  J[881] += dqdci; // dwdot[H2O]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[889] -= dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[4];
  J[953] -= dqdci; // dwdot[OH]/d[CH4]
  J[954] += dqdci; // dwdot[H2O]/d[CH4]
  J[961] += dqdci; // dwdot[CH3]/d[CH4]
  J[962] -= dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5269] -= dqdT; // dwdot[CH4]/dT

  // reaction 98: CO + OH <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[14];
  k_f = 47.6 * exp(1.228 * logT - (35.2251666063304) * invT);
  dlnkfdT = 1.228 * invT + (35.2251666063304) * invT2;
  // reverse
  phi_r = sc[1] * sc[15];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[14]) + (h_RT[1] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[14] -= q; // CO
  wdot[15] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[15];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[77] -= dqdci; // dwdot[OH]/d[H]
  J[87] -= dqdci; // dwdot[CO]/d[H]
  J[88] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[14];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[306] -= dqdci; // dwdot[CO]/d[OH]
  J[307] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[CO]
  dqdci = +k_f * sc[4];
  J[1023] += dqdci; // dwdot[H]/d[CO]
  J[1026] -= dqdci; // dwdot[OH]/d[CO]
  J[1036] -= dqdci; // dwdot[CO]/d[CO]
  J[1037] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[1];
  J[1096] += dqdci; // dwdot[H]/d[CO2]
  J[1099] -= dqdci; // dwdot[OH]/d[CO2]
  J[1109] -= dqdci; // dwdot[CO]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5270] -= dqdT; // dwdot[CO]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT

  // reaction 99: HCO + OH <=> CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[16];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[14];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[16]) + (h_RT[5] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[OH]
  dqdci = +k_f * sc[16];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[306] += dqdci; // dwdot[CO]/d[OH]
  J[308] -= dqdci; // dwdot[HCO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[14];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[379] += dqdci; // dwdot[CO]/d[H2O]
  J[381] -= dqdci; // dwdot[HCO]/d[H2O]
  // d()/d[CO]
  dqdci = -k_r * sc[5];
  J[1026] -= dqdci; // dwdot[OH]/d[CO]
  J[1027] += dqdci; // dwdot[H2O]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[4];
  J[1172] -= dqdci; // dwdot[OH]/d[HCO]
  J[1173] += dqdci; // dwdot[H2O]/d[HCO]
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT

  // reaction 100: CH2O + OH <=> H2O + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[17];
  k_f = 3430 * exp(1.18 * logT - (-224.93784961471) * invT);
  dlnkfdT = 1.18 * invT + (-224.93784961471) * invT2;
  // reverse
  phi_r = sc[5] * sc[16];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[17]) + (h_RT[5] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[308] += dqdci; // dwdot[HCO]/d[OH]
  J[309] -= dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[16];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[381] += dqdci; // dwdot[HCO]/d[H2O]
  J[382] -= dqdci; // dwdot[CH2O]/d[H2O]
  // d()/d[HCO]
  dqdci = -k_r * sc[5];
  J[1172] -= dqdci; // dwdot[OH]/d[HCO]
  J[1173] += dqdci; // dwdot[H2O]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[4];
  J[1245] -= dqdci; // dwdot[OH]/d[CH2O]
  J[1246] += dqdci; // dwdot[H2O]/d[CH2O]
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT

  // reaction 101: CH2OH + OH <=> CH2O + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 5000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[17];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[5] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[17] += q; // CH2O
  wdot[18] -= q; // CH2OH
  // d()/d[OH]
  dqdci = +k_f * sc[18];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[309] += dqdci; // dwdot[CH2O]/d[OH]
  J[310] -= dqdci; // dwdot[CH2OH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[382] += dqdci; // dwdot[CH2O]/d[H2O]
  J[383] -= dqdci; // dwdot[CH2OH]/d[H2O]
  // d()/d[CH2O]
  dqdci = -k_r * sc[5];
  J[1245] -= dqdci; // dwdot[OH]/d[CH2O]
  J[1246] += dqdci; // dwdot[H2O]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1259] -= dqdci; // dwdot[CH2OH]/d[CH2O]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[4];
  J[1318] -= dqdci; // dwdot[OH]/d[CH2OH]
  J[1319] += dqdci; // dwdot[H2O]/d[CH2OH]
  J[1331] += dqdci; // dwdot[CH2O]/d[CH2OH]
  J[1332] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5274] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 102: CH3O + OH <=> CH2O + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[19];
  k_f = 5000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[17];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[17] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[19]) + (h_RT[5] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[17] += q; // CH2O
  wdot[19] -= q; // CH3O
  // d()/d[OH]
  dqdci = +k_f * sc[19];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[309] += dqdci; // dwdot[CH2O]/d[OH]
  J[311] -= dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[382] += dqdci; // dwdot[CH2O]/d[H2O]
  J[384] -= dqdci; // dwdot[CH3O]/d[H2O]
  // d()/d[CH2O]
  dqdci = -k_r * sc[5];
  J[1245] -= dqdci; // dwdot[OH]/d[CH2O]
  J[1246] += dqdci; // dwdot[H2O]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1260] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[4];
  J[1391] -= dqdci; // dwdot[OH]/d[CH3O]
  J[1392] += dqdci; // dwdot[H2O]/d[CH3O]
  J[1404] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[1406] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5275] -= dqdT; // dwdot[CH3O]/dT

  // reaction 103: CH3OH + OH <=> CH2OH + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[20];
  k_f = 1.44 * exp(2 * logT - (-422.701999275965) * invT);
  dlnkfdT = 2 * invT + (-422.701999275965) * invT2;
  // reverse
  phi_r = sc[5] * sc[18];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[20]) + (h_RT[5] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  // d()/d[OH]
  dqdci = +k_f * sc[20];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[310] += dqdci; // dwdot[CH2OH]/d[OH]
  J[312] -= dqdci; // dwdot[CH3OH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[18];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[383] += dqdci; // dwdot[CH2OH]/d[H2O]
  J[385] -= dqdci; // dwdot[CH3OH]/d[H2O]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[5];
  J[1318] -= dqdci; // dwdot[OH]/d[CH2OH]
  J[1319] += dqdci; // dwdot[H2O]/d[CH2OH]
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1334] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[4];
  J[1464] -= dqdci; // dwdot[OH]/d[CH3OH]
  J[1465] += dqdci; // dwdot[H2O]/d[CH3OH]
  J[1478] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 104: CH3OH + OH <=> CH3O + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[20];
  k_f = 6.3 * exp(2 * logT - (754.82499870708) * invT);
  dlnkfdT = 2 * invT + (754.82499870708) * invT2;
  // reverse
  phi_r = sc[5] * sc[19];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[20]) + (h_RT[5] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  // d()/d[OH]
  dqdci = +k_f * sc[20];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[311] += dqdci; // dwdot[CH3O]/d[OH]
  J[312] -= dqdci; // dwdot[CH3OH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[19];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[384] += dqdci; // dwdot[CH3O]/d[H2O]
  J[385] -= dqdci; // dwdot[CH3OH]/d[H2O]
  // d()/d[CH3O]
  dqdci = -k_r * sc[5];
  J[1391] -= dqdci; // dwdot[OH]/d[CH3O]
  J[1392] += dqdci; // dwdot[H2O]/d[CH3O]
  J[1406] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[1407] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[4];
  J[1464] -= dqdci; // dwdot[OH]/d[CH3OH]
  J[1465] += dqdci; // dwdot[H2O]/d[CH3OH]
  J[1479] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 105: C2H + OH <=> H + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[21];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[27];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[21] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[21]) + (h_RT[1] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[21] -= q; // C2H
  wdot[27] += q; // HCCO
  // d()/d[H]
  dqdci = -k_r * sc[27];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[94] -= dqdci;  // dwdot[C2H]/d[H]
  J[100] += dqdci; // dwdot[HCCO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[21];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[313] -= dqdci; // dwdot[C2H]/d[OH]
  J[319] += dqdci; // dwdot[HCCO]/d[OH]
  // d()/d[C2H]
  dqdci = +k_f * sc[4];
  J[1534] += dqdci; // dwdot[H]/d[C2H]
  J[1537] -= dqdci; // dwdot[OH]/d[C2H]
  J[1554] -= dqdci; // dwdot[C2H]/d[C2H]
  J[1560] += dqdci; // dwdot[HCCO]/d[C2H]
  // d()/d[HCCO]
  dqdci = -k_r * sc[1];
  J[1972] += dqdci; // dwdot[H]/d[HCCO]
  J[1975] -= dqdci; // dwdot[OH]/d[HCCO]
  J[1992] -= dqdci; // dwdot[C2H]/d[HCCO]
  J[1998] += dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5277] -= dqdT; // dwdot[C2H]/dT
  J[5283] += dqdT; // dwdot[HCCO]/dT

  // reaction 106: C2H2 + OH <=> CH2CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 2.18e-10 * exp(4.5 * logT - (-503.21666580472) * invT);
  dlnkfdT = 4.5 * invT + (-503.21666580472) * invT2;
  // reverse
  phi_r = sc[1] * sc[28];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[22] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[1] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[22] -= q; // C2H2
  wdot[28] += q; // CH2CO
  // d()/d[H]
  dqdci = -k_r * sc[28];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[95] -= dqdci;  // dwdot[C2H2]/d[H]
  J[101] += dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[314] -= dqdci; // dwdot[C2H2]/d[OH]
  J[320] += dqdci; // dwdot[CH2CO]/d[OH]
  // d()/d[C2H2]
  dqdci = +k_f * sc[4];
  J[1607] += dqdci; // dwdot[H]/d[C2H2]
  J[1610] -= dqdci; // dwdot[OH]/d[C2H2]
  J[1628] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[1634] += dqdci; // dwdot[CH2CO]/d[C2H2]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[1];
  J[2045] += dqdci; // dwdot[H]/d[CH2CO]
  J[2048] -= dqdci; // dwdot[OH]/d[CH2CO]
  J[2066] -= dqdci; // dwdot[C2H2]/d[CH2CO]
  J[2072] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5278] -= dqdT; // dwdot[C2H2]/dT
  J[5284] += dqdT; // dwdot[CH2CO]/dT

  // reaction 107: C2H2 + OH <=> H + HCCOH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 0.504 * exp(2.3 * logT - (6793.42498836372) * invT);
  dlnkfdT = 2.3 * invT + (6793.42498836372) * invT2;
  // reverse
  phi_r = sc[1] * sc[29];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[22] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[1] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[22] -= q; // C2H2
  wdot[29] += q; // HCCOH
  // d()/d[H]
  dqdci = -k_r * sc[29];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[95] -= dqdci;  // dwdot[C2H2]/d[H]
  J[102] += dqdci; // dwdot[HCCOH]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[314] -= dqdci; // dwdot[C2H2]/d[OH]
  J[321] += dqdci; // dwdot[HCCOH]/d[OH]
  // d()/d[C2H2]
  dqdci = +k_f * sc[4];
  J[1607] += dqdci; // dwdot[H]/d[C2H2]
  J[1610] -= dqdci; // dwdot[OH]/d[C2H2]
  J[1628] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[1635] += dqdci; // dwdot[HCCOH]/d[C2H2]
  // d()/d[HCCOH]
  dqdci = -k_r * sc[1];
  J[2118] += dqdci; // dwdot[H]/d[HCCOH]
  J[2121] -= dqdci; // dwdot[OH]/d[HCCOH]
  J[2139] -= dqdci; // dwdot[C2H2]/d[HCCOH]
  J[2146] += dqdci; // dwdot[HCCOH]/d[HCCOH]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5278] -= dqdT; // dwdot[C2H2]/dT
  J[5285] += dqdT; // dwdot[HCCOH]/dT

  // reaction 108: C2H2 + OH <=> C2H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 33.7 * exp(2 * logT - (7045.03332126608) * invT);
  dlnkfdT = 2 * invT + (7045.03332126608) * invT2;
  // reverse
  phi_r = sc[5] * sc[21];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[21] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[5] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[21] += q; // C2H
  wdot[22] -= q; // C2H2
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[313] += dqdci; // dwdot[C2H]/d[OH]
  J[314] -= dqdci; // dwdot[C2H2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[21];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[386] += dqdci; // dwdot[C2H]/d[H2O]
  J[387] -= dqdci; // dwdot[C2H2]/d[H2O]
  // d()/d[C2H]
  dqdci = -k_r * sc[5];
  J[1537] -= dqdci; // dwdot[OH]/d[C2H]
  J[1538] += dqdci; // dwdot[H2O]/d[C2H]
  J[1554] += dqdci; // dwdot[C2H]/d[C2H]
  J[1555] -= dqdci; // dwdot[C2H2]/d[C2H]
  // d()/d[C2H2]
  dqdci = +k_f * sc[4];
  J[1610] -= dqdci; // dwdot[OH]/d[C2H2]
  J[1611] += dqdci; // dwdot[H2O]/d[C2H2]
  J[1627] += dqdci; // dwdot[C2H]/d[C2H2]
  J[1628] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5277] += dqdT; // dwdot[C2H]/dT
  J[5278] -= dqdT; // dwdot[C2H2]/dT

  // reaction 109: C2H2 + OH <=> CH3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[22];
  k_f = 4.83e-10 * exp(4 * logT - (-1006.43333160944) * invT);
  dlnkfdT = 4 * invT + (-1006.43333160944) * invT2;
  // reverse
  phi_r = sc[12] * sc[14];
  Kc = exp(g_RT[4] - g_RT[12] - g_RT[14] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[22]) + (h_RT[12] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[12] += q; // CH3
  wdot[14] += q; // CO
  wdot[22] -= q; // C2H2
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[304] += dqdci; // dwdot[CH3]/d[OH]
  J[306] += dqdci; // dwdot[CO]/d[OH]
  J[314] -= dqdci; // dwdot[C2H2]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[14];
  J[880] -= dqdci; // dwdot[OH]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[890] += dqdci; // dwdot[CO]/d[CH3]
  J[898] -= dqdci; // dwdot[C2H2]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[12];
  J[1026] -= dqdci; // dwdot[OH]/d[CO]
  J[1034] += dqdci; // dwdot[CH3]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1044] -= dqdci; // dwdot[C2H2]/d[CO]
  // d()/d[C2H2]
  dqdci = +k_f * sc[4];
  J[1610] -= dqdci; // dwdot[OH]/d[C2H2]
  J[1618] += dqdci; // dwdot[CH3]/d[C2H2]
  J[1620] += dqdci; // dwdot[CO]/d[C2H2]
  J[1628] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5278] -= dqdT; // dwdot[C2H2]/dT

  // reaction 110: C2H3 + OH <=> C2H2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[23];
  k_f = 5000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[22];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[22] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[23]) + (h_RT[5] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[22] += q; // C2H2
  wdot[23] -= q; // C2H3
  // d()/d[OH]
  dqdci = +k_f * sc[23];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[314] += dqdci; // dwdot[C2H2]/d[OH]
  J[315] -= dqdci; // dwdot[C2H3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[22];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[387] += dqdci; // dwdot[C2H2]/d[H2O]
  J[388] -= dqdci; // dwdot[C2H3]/d[H2O]
  // d()/d[C2H2]
  dqdci = -k_r * sc[5];
  J[1610] -= dqdci; // dwdot[OH]/d[C2H2]
  J[1611] += dqdci; // dwdot[H2O]/d[C2H2]
  J[1628] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[1629] -= dqdci; // dwdot[C2H3]/d[C2H2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[4];
  J[1683] -= dqdci; // dwdot[OH]/d[C2H3]
  J[1684] += dqdci; // dwdot[H2O]/d[C2H3]
  J[1701] += dqdci; // dwdot[C2H2]/d[C2H3]
  J[1702] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT

  // reaction 111: C2H4 + OH <=> C2H3 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[24];
  k_f = 3.6 * exp(2 * logT - (1258.0416645118) * invT);
  dlnkfdT = 2 * invT + (1258.0416645118) * invT2;
  // reverse
  phi_r = sc[5] * sc[23];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[24]) + (h_RT[5] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[23] += q; // C2H3
  wdot[24] -= q; // C2H4
  // d()/d[OH]
  dqdci = +k_f * sc[24];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[315] += dqdci; // dwdot[C2H3]/d[OH]
  J[316] -= dqdci; // dwdot[C2H4]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[23];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[388] += dqdci; // dwdot[C2H3]/d[H2O]
  J[389] -= dqdci; // dwdot[C2H4]/d[H2O]
  // d()/d[C2H3]
  dqdci = -k_r * sc[5];
  J[1683] -= dqdci; // dwdot[OH]/d[C2H3]
  J[1684] += dqdci; // dwdot[H2O]/d[C2H3]
  J[1702] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[1703] -= dqdci; // dwdot[C2H4]/d[C2H3]
  // d()/d[C2H4]
  dqdci = +k_f * sc[4];
  J[1756] -= dqdci; // dwdot[OH]/d[C2H4]
  J[1757] += dqdci; // dwdot[H2O]/d[C2H4]
  J[1775] += dqdci; // dwdot[C2H3]/d[C2H4]
  J[1776] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5279] += dqdT; // dwdot[C2H3]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT

  // reaction 112: C2H6 + OH <=> C2H5 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[26];
  k_f = 3.54 * exp(2.12 * logT - (437.798499250106) * invT);
  dlnkfdT = 2.12 * invT + (437.798499250106) * invT2;
  // reverse
  phi_r = sc[5] * sc[25];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[26]) + (h_RT[5] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  // d()/d[OH]
  dqdci = +k_f * sc[26];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[317] += dqdci; // dwdot[C2H5]/d[OH]
  J[318] -= dqdci; // dwdot[C2H6]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[25];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[390] += dqdci; // dwdot[C2H5]/d[H2O]
  J[391] -= dqdci; // dwdot[C2H6]/d[H2O]
  // d()/d[C2H5]
  dqdci = -k_r * sc[5];
  J[1829] -= dqdci; // dwdot[OH]/d[C2H5]
  J[1830] += dqdci; // dwdot[H2O]/d[C2H5]
  J[1850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[4];
  J[1902] -= dqdci; // dwdot[OH]/d[C2H6]
  J[1903] += dqdci; // dwdot[H2O]/d[C2H6]
  J[1923] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1924] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5282] -= dqdT; // dwdot[C2H6]/dT

  // reaction 113: CH2CO + OH <=> H2O + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[28];
  k_f = 7500000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[5] * sc[27];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[27] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[28]) + (h_RT[5] + h_RT[27]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[27] += q; // HCCO
  wdot[28] -= q; // CH2CO
  // d()/d[OH]
  dqdci = +k_f * sc[28];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[319] += dqdci; // dwdot[HCCO]/d[OH]
  J[320] -= dqdci; // dwdot[CH2CO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[27];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[392] += dqdci; // dwdot[HCCO]/d[H2O]
  J[393] -= dqdci; // dwdot[CH2CO]/d[H2O]
  // d()/d[HCCO]
  dqdci = -k_r * sc[5];
  J[1975] -= dqdci; // dwdot[OH]/d[HCCO]
  J[1976] += dqdci; // dwdot[H2O]/d[HCCO]
  J[1998] += dqdci; // dwdot[HCCO]/d[HCCO]
  J[1999] -= dqdci; // dwdot[CH2CO]/d[HCCO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[4];
  J[2048] -= dqdci; // dwdot[OH]/d[CH2CO]
  J[2049] += dqdci; // dwdot[H2O]/d[CH2CO]
  J[2071] += dqdci; // dwdot[HCCO]/d[CH2CO]
  J[2072] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5283] += dqdT; // dwdot[HCCO]/dT
  J[5284] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 114: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[6] * sc[6]);
  k_f = 130000 * exp(-(-820.243165261693) * invT);
  dlnkfdT = (-820.243165261693) * invT2;
  // reverse
  phi_r = sc[3] * sc[7];
  Kc = exp(-g_RT[3] + 2.000000 * g_RT[6] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[6]) + (h_RT[3] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O2
  wdot[6] -= 2 * q; // HO2
  wdot[7] += q;     // H2O2
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[222] += dqdci;      // dwdot[O2]/d[O2]
  J[225] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[226] += dqdci;      // dwdot[H2O2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[6];
  J[441] += dqdci;      // dwdot[O2]/d[HO2]
  J[444] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[445] += dqdci;      // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[3];
  J[514] += dqdci;      // dwdot[O2]/d[H2O2]
  J[517] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[518] += dqdci;      // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[5259] += dqdT;      // dwdot[O2]/dT
  J[5262] += -2 * dqdT; // dwdot[HO2]/dT
  J[5263] += dqdT;      // dwdot[H2O2]/dT

  // reaction 115: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[6] * sc[6]);
  k_f = 420000000 * exp(-(6038.59998965664) * invT);
  dlnkfdT = (6038.59998965664) * invT2;
  // reverse
  phi_r = sc[3] * sc[7];
  Kc = exp(-g_RT[3] + 2.000000 * g_RT[6] - g_RT[7]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[6]) + (h_RT[3] + h_RT[7]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // O2
  wdot[6] -= 2 * q; // HO2
  wdot[7] += q;     // H2O2
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[222] += dqdci;      // dwdot[O2]/d[O2]
  J[225] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[226] += dqdci;      // dwdot[H2O2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[6];
  J[441] += dqdci;      // dwdot[O2]/d[HO2]
  J[444] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[445] += dqdci;      // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[3];
  J[514] += dqdci;      // dwdot[O2]/d[H2O2]
  J[517] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[518] += dqdci;      // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[5259] += dqdT;      // dwdot[O2]/dT
  J[5262] += -2 * dqdT; // dwdot[HO2]/dT
  J[5263] += dqdT;      // dwdot[H2O2]/dT

  // reaction 116: CH2 + HO2 <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[10];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[17];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[10] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[10]) + (h_RT[4] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[10] -= q; // CH2
  wdot[17] += q; // CH2O
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[298] -= dqdci; // dwdot[HO2]/d[OH]
  J[302] -= dqdci; // dwdot[CH2]/d[OH]
  J[309] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[448] -= dqdci; // dwdot[CH2]/d[HO2]
  J[455] += dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[CH2]
  dqdci = +k_f * sc[6];
  J[734] += dqdci; // dwdot[OH]/d[CH2]
  J[736] -= dqdci; // dwdot[HO2]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[747] += dqdci; // dwdot[CH2O]/d[CH2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[4];
  J[1245] += dqdci; // dwdot[OH]/d[CH2O]
  J[1247] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[1251] -= dqdci; // dwdot[CH2]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 117: CH3 + HO2 <=> CH4 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[12];
  k_f = 1000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[13];
  Kc = exp(-g_RT[3] + g_RT[6] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[12]) + (h_RT[3] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[6] -= q;  // HO2
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  // d()/d[O2]
  dqdci = -k_r * sc[13];
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  J[231] -= dqdci; // dwdot[CH3]/d[O2]
  J[232] += dqdci; // dwdot[CH4]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[450] -= dqdci; // dwdot[CH3]/d[HO2]
  J[451] += dqdci; // dwdot[CH4]/d[HO2]
  // d()/d[CH3]
  dqdci = +k_f * sc[6];
  J[879] += dqdci; // dwdot[O2]/d[CH3]
  J[882] -= dqdci; // dwdot[HO2]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[3];
  J[952] += dqdci; // dwdot[O2]/d[CH4]
  J[955] -= dqdci; // dwdot[HO2]/d[CH4]
  J[961] -= dqdci; // dwdot[CH3]/d[CH4]
  J[962] += dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT

  // reaction 118: CH3 + HO2 <=> CH3O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[12];
  k_f = 37800000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[19];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[12] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[12]) + (h_RT[4] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[12] -= q; // CH3
  wdot[19] += q; // CH3O
  // d()/d[OH]
  dqdci = -k_r * sc[19];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[298] -= dqdci; // dwdot[HO2]/d[OH]
  J[304] -= dqdci; // dwdot[CH3]/d[OH]
  J[311] += dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[12];
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[450] -= dqdci; // dwdot[CH3]/d[HO2]
  J[457] += dqdci; // dwdot[CH3O]/d[HO2]
  // d()/d[CH3]
  dqdci = +k_f * sc[6];
  J[880] += dqdci; // dwdot[OH]/d[CH3]
  J[882] -= dqdci; // dwdot[HO2]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[895] += dqdci; // dwdot[CH3O]/d[CH3]
  // d()/d[CH3O]
  dqdci = -k_r * sc[4];
  J[1391] += dqdci; // dwdot[OH]/d[CH3O]
  J[1393] -= dqdci; // dwdot[HO2]/d[CH3O]
  J[1399] -= dqdci; // dwdot[CH3]/d[CH3O]
  J[1406] += dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT

  // reaction 119: CO + HO2 <=> CO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[14];
  k_f = 150000000 * exp(-(11875.9133129914) * invT);
  dlnkfdT = (11875.9133129914) * invT2;
  // reverse
  phi_r = sc[4] * sc[15];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[14]) + (h_RT[4] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[14] -= q; // CO
  wdot[15] += q; // CO2
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[298] -= dqdci; // dwdot[HO2]/d[OH]
  J[306] -= dqdci; // dwdot[CO]/d[OH]
  J[307] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[14];
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[452] -= dqdci; // dwdot[CO]/d[HO2]
  J[453] += dqdci; // dwdot[CO2]/d[HO2]
  // d()/d[CO]
  dqdci = +k_f * sc[6];
  J[1026] += dqdci; // dwdot[OH]/d[CO]
  J[1028] -= dqdci; // dwdot[HO2]/d[CO]
  J[1036] -= dqdci; // dwdot[CO]/d[CO]
  J[1037] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[4];
  J[1099] += dqdci; // dwdot[OH]/d[CO2]
  J[1101] -= dqdci; // dwdot[HO2]/d[CO2]
  J[1109] -= dqdci; // dwdot[CO]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5270] -= dqdT; // dwdot[CO]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT

  // reaction 120: CH2O + HO2 <=> H2O2 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[17];
  k_f = 5.6 * exp(2 * logT - (6038.59998965664) * invT);
  dlnkfdT = 2 * invT + (6038.59998965664) * invT2;
  // reverse
  phi_r = sc[7] * sc[16];
  Kc = exp(g_RT[6] - g_RT[7] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[17]) + (h_RT[7] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[HO2]
  dqdci = +k_f * sc[17];
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[445] += dqdci; // dwdot[H2O2]/d[HO2]
  J[454] += dqdci; // dwdot[HCO]/d[HO2]
  J[455] -= dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[16];
  J[517] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[518] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[527] += dqdci; // dwdot[HCO]/d[H2O2]
  J[528] -= dqdci; // dwdot[CH2O]/d[H2O2]
  // d()/d[HCO]
  dqdci = -k_r * sc[7];
  J[1174] -= dqdci; // dwdot[HO2]/d[HCO]
  J[1175] += dqdci; // dwdot[H2O2]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[6];
  J[1247] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[1248] += dqdci; // dwdot[H2O2]/d[CH2O]
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5263] += dqdT; // dwdot[H2O2]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT

  // reaction 121: C + O2 <=> CO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[8];
  k_f = 58000000 * exp(-(289.852799503519) * invT);
  dlnkfdT = (289.852799503519) * invT2;
  // reverse
  phi_r = sc[2] * sc[14];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[8] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[8]) + (h_RT[2] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[8] -= q;  // C
  wdot[14] += q; // CO
  // d()/d[O]
  dqdci = -k_r * sc[14];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[154] -= dqdci; // dwdot[C]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[8];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[227] -= dqdci; // dwdot[C]/d[O2]
  J[233] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[C]
  dqdci = +k_f * sc[3];
  J[586] += dqdci; // dwdot[O]/d[C]
  J[587] -= dqdci; // dwdot[O2]/d[C]
  J[592] -= dqdci; // dwdot[C]/d[C]
  J[598] += dqdci; // dwdot[CO]/d[C]
  // d()/d[CO]
  dqdci = -k_r * sc[2];
  J[1024] += dqdci; // dwdot[O]/d[CO]
  J[1025] -= dqdci; // dwdot[O2]/d[CO]
  J[1030] -= dqdci; // dwdot[C]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5264] -= dqdT; // dwdot[C]/dT
  J[5270] += dqdT; // dwdot[CO]/dT

  // reaction 122: C + CH2 <=> C2H + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[10];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[21];
  Kc = exp(-g_RT[1] + g_RT[8] + g_RT[10] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[10]) + (h_RT[1] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[8] -= q;  // C
  wdot[10] -= q; // CH2
  wdot[21] += q; // C2H
  // d()/d[H]
  dqdci = -k_r * sc[21];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[81] -= dqdci; // dwdot[C]/d[H]
  J[83] -= dqdci; // dwdot[CH2]/d[H]
  J[94] += dqdci; // dwdot[C2H]/d[H]
  // d()/d[C]
  dqdci = +k_f * sc[10];
  J[585] += dqdci; // dwdot[H]/d[C]
  J[592] -= dqdci; // dwdot[C]/d[C]
  J[594] -= dqdci; // dwdot[CH2]/d[C]
  J[605] += dqdci; // dwdot[C2H]/d[C]
  // d()/d[CH2]
  dqdci = +k_f * sc[8];
  J[731] += dqdci; // dwdot[H]/d[CH2]
  J[738] -= dqdci; // dwdot[C]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[751] += dqdci; // dwdot[C2H]/d[CH2]
  // d()/d[C2H]
  dqdci = -k_r * sc[1];
  J[1534] += dqdci; // dwdot[H]/d[C2H]
  J[1541] -= dqdci; // dwdot[C]/d[C2H]
  J[1543] -= dqdci; // dwdot[CH2]/d[C2H]
  J[1554] += dqdci; // dwdot[C2H]/d[C2H]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5264] -= dqdT; // dwdot[C]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5277] += dqdT; // dwdot[C2H]/dT

  // reaction 123: C + CH3 <=> C2H2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[12];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[22];
  Kc = exp(-g_RT[1] + g_RT[8] + g_RT[12] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[12]) + (h_RT[1] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[8] -= q;  // C
  wdot[12] -= q; // CH3
  wdot[22] += q; // C2H2
  // d()/d[H]
  dqdci = -k_r * sc[22];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[81] -= dqdci; // dwdot[C]/d[H]
  J[85] -= dqdci; // dwdot[CH3]/d[H]
  J[95] += dqdci; // dwdot[C2H2]/d[H]
  // d()/d[C]
  dqdci = +k_f * sc[12];
  J[585] += dqdci; // dwdot[H]/d[C]
  J[592] -= dqdci; // dwdot[C]/d[C]
  J[596] -= dqdci; // dwdot[CH3]/d[C]
  J[606] += dqdci; // dwdot[C2H2]/d[C]
  // d()/d[CH3]
  dqdci = +k_f * sc[8];
  J[877] += dqdci; // dwdot[H]/d[CH3]
  J[884] -= dqdci; // dwdot[C]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[898] += dqdci; // dwdot[C2H2]/d[CH3]
  // d()/d[C2H2]
  dqdci = -k_r * sc[1];
  J[1607] += dqdci; // dwdot[H]/d[C2H2]
  J[1614] -= dqdci; // dwdot[C]/d[C2H2]
  J[1618] -= dqdci; // dwdot[CH3]/d[C2H2]
  J[1628] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5264] -= dqdT; // dwdot[C]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT

  // reaction 124: CH + O2 <=> HCO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[9];
  k_f = 67100000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[16];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[9] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[9]) + (h_RT[2] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[9] -= q;  // CH
  wdot[16] += q; // HCO
  // d()/d[O]
  dqdci = -k_r * sc[16];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[155] -= dqdci; // dwdot[CH]/d[O]
  J[162] += dqdci; // dwdot[HCO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[9];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[228] -= dqdci; // dwdot[CH]/d[O2]
  J[235] += dqdci; // dwdot[HCO]/d[O2]
  // d()/d[CH]
  dqdci = +k_f * sc[3];
  J[659] += dqdci; // dwdot[O]/d[CH]
  J[660] -= dqdci; // dwdot[O2]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[673] += dqdci; // dwdot[HCO]/d[CH]
  // d()/d[HCO]
  dqdci = -k_r * sc[2];
  J[1170] += dqdci; // dwdot[O]/d[HCO]
  J[1171] -= dqdci; // dwdot[O2]/d[HCO]
  J[1177] -= dqdci; // dwdot[CH]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT

  // reaction 125: CH + H2 <=> CH2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[9];
  k_f = 108000000 * exp(-(1565.00383065268) * invT);
  dlnkfdT = (1565.00383065268) * invT2;
  // reverse
  phi_r = sc[1] * sc[10];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[9] - g_RT[10]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[9]) + (h_RT[1] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[10] += q; // CH2
  // d()/d[H2]
  dqdci = +k_f * sc[9];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[9] -= dqdci;  // dwdot[CH]/d[H2]
  J[10] += dqdci; // dwdot[CH2]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[10];
  J[73] -= dqdci; // dwdot[H2]/d[H]
  J[74] += dqdci; // dwdot[H]/d[H]
  J[82] -= dqdci; // dwdot[CH]/d[H]
  J[83] += dqdci; // dwdot[CH2]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[0];
  J[657] -= dqdci; // dwdot[H2]/d[CH]
  J[658] += dqdci; // dwdot[H]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[667] += dqdci; // dwdot[CH2]/d[CH]
  // d()/d[CH2]
  dqdci = -k_r * sc[1];
  J[730] -= dqdci; // dwdot[H2]/d[CH2]
  J[731] += dqdci; // dwdot[H]/d[CH2]
  J[739] -= dqdci; // dwdot[CH]/d[CH2]
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5266] += dqdT; // dwdot[CH2]/dT

  // reaction 126: CH + H2O <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[9];
  k_f = 5710000 * exp(-(-379.928582682563) * invT);
  dlnkfdT = (-379.928582682563) * invT2;
  // reverse
  phi_r = sc[1] * sc[17];
  Kc = exp(-g_RT[1] + g_RT[5] + g_RT[9] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[9]) + (h_RT[1] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[5] -= q;  // H2O
  wdot[9] -= q;  // CH
  wdot[17] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[17];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[78] -= dqdci; // dwdot[H2O]/d[H]
  J[82] -= dqdci; // dwdot[CH]/d[H]
  J[90] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * sc[9];
  J[366] += dqdci; // dwdot[H]/d[H2O]
  J[370] -= dqdci; // dwdot[H2O]/d[H2O]
  J[374] -= dqdci; // dwdot[CH]/d[H2O]
  J[382] += dqdci; // dwdot[CH2O]/d[H2O]
  // d()/d[CH]
  dqdci = +k_f * sc[5];
  J[658] += dqdci; // dwdot[H]/d[CH]
  J[662] -= dqdci; // dwdot[H2O]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[674] += dqdci; // dwdot[CH2O]/d[CH]
  // d()/d[CH2O]
  dqdci = -k_r * sc[1];
  J[1242] += dqdci; // dwdot[H]/d[CH2O]
  J[1246] -= dqdci; // dwdot[H2O]/d[CH2O]
  J[1250] -= dqdci; // dwdot[CH]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5261] -= dqdT; // dwdot[H2O]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 127: CH + CH2 <=> C2H2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[10];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[22];
  Kc = exp(-g_RT[1] + g_RT[9] + g_RT[10] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[10]) + (h_RT[1] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[10] -= q; // CH2
  wdot[22] += q; // C2H2
  // d()/d[H]
  dqdci = -k_r * sc[22];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[82] -= dqdci; // dwdot[CH]/d[H]
  J[83] -= dqdci; // dwdot[CH2]/d[H]
  J[95] += dqdci; // dwdot[C2H2]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[10];
  J[658] += dqdci; // dwdot[H]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[667] -= dqdci; // dwdot[CH2]/d[CH]
  J[679] += dqdci; // dwdot[C2H2]/d[CH]
  // d()/d[CH2]
  dqdci = +k_f * sc[9];
  J[731] += dqdci; // dwdot[H]/d[CH2]
  J[739] -= dqdci; // dwdot[CH]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[752] += dqdci; // dwdot[C2H2]/d[CH2]
  // d()/d[C2H2]
  dqdci = -k_r * sc[1];
  J[1607] += dqdci; // dwdot[H]/d[C2H2]
  J[1615] -= dqdci; // dwdot[CH]/d[C2H2]
  J[1616] -= dqdci; // dwdot[CH2]/d[C2H2]
  J[1628] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT

  // reaction 128: CH + CH3 <=> C2H3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[12];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[23];
  Kc = exp(-g_RT[1] + g_RT[9] + g_RT[12] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[12]) + (h_RT[1] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[12] -= q; // CH3
  wdot[23] += q; // C2H3
  // d()/d[H]
  dqdci = -k_r * sc[23];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[82] -= dqdci; // dwdot[CH]/d[H]
  J[85] -= dqdci; // dwdot[CH3]/d[H]
  J[96] += dqdci; // dwdot[C2H3]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[12];
  J[658] += dqdci; // dwdot[H]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[669] -= dqdci; // dwdot[CH3]/d[CH]
  J[680] += dqdci; // dwdot[C2H3]/d[CH]
  // d()/d[CH3]
  dqdci = +k_f * sc[9];
  J[877] += dqdci; // dwdot[H]/d[CH3]
  J[885] -= dqdci; // dwdot[CH]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[899] += dqdci; // dwdot[C2H3]/d[CH3]
  // d()/d[C2H3]
  dqdci = -k_r * sc[1];
  J[1680] += dqdci; // dwdot[H]/d[C2H3]
  J[1688] -= dqdci; // dwdot[CH]/d[C2H3]
  J[1691] -= dqdci; // dwdot[CH3]/d[C2H3]
  J[1702] += dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5279] += dqdT; // dwdot[C2H3]/dT

  // reaction 129: CH + CH4 <=> C2H4 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[13];
  k_f = 60000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[24];
  Kc = exp(-g_RT[1] + g_RT[9] + g_RT[13] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[13]) + (h_RT[1] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[13] -= q; // CH4
  wdot[24] += q; // C2H4
  // d()/d[H]
  dqdci = -k_r * sc[24];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[82] -= dqdci; // dwdot[CH]/d[H]
  J[86] -= dqdci; // dwdot[CH4]/d[H]
  J[97] += dqdci; // dwdot[C2H4]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[13];
  J[658] += dqdci; // dwdot[H]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[670] -= dqdci; // dwdot[CH4]/d[CH]
  J[681] += dqdci; // dwdot[C2H4]/d[CH]
  // d()/d[CH4]
  dqdci = +k_f * sc[9];
  J[950] += dqdci; // dwdot[H]/d[CH4]
  J[958] -= dqdci; // dwdot[CH]/d[CH4]
  J[962] -= dqdci; // dwdot[CH4]/d[CH4]
  J[973] += dqdci; // dwdot[C2H4]/d[CH4]
  // d()/d[C2H4]
  dqdci = -k_r * sc[1];
  J[1753] += dqdci; // dwdot[H]/d[C2H4]
  J[1761] -= dqdci; // dwdot[CH]/d[C2H4]
  J[1765] -= dqdci; // dwdot[CH4]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5269] -= dqdT; // dwdot[CH4]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT

  // reaction 131: CH + CO2 <=> CO + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[15];
  k_f = 190000000 * exp(-(7946.79758638813) * invT);
  dlnkfdT = (7946.79758638813) * invT2;
  // reverse
  phi_r = sc[14] * sc[16];
  Kc = exp(g_RT[9] - g_RT[14] + g_RT[15] - g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[15]) + (h_RT[14] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH
  wdot[14] += q; // CO
  wdot[15] -= q; // CO2
  wdot[16] += q; // HCO
  // d()/d[CH]
  dqdci = +k_f * sc[15];
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[671] += dqdci; // dwdot[CO]/d[CH]
  J[672] -= dqdci; // dwdot[CO2]/d[CH]
  J[673] += dqdci; // dwdot[HCO]/d[CH]
  // d()/d[CO]
  dqdci = -k_r * sc[16];
  J[1031] -= dqdci; // dwdot[CH]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1037] -= dqdci; // dwdot[CO2]/d[CO]
  J[1038] += dqdci; // dwdot[HCO]/d[CO]
  // d()/d[CO2]
  dqdci = +k_f * sc[9];
  J[1104] -= dqdci; // dwdot[CH]/d[CO2]
  J[1109] += dqdci; // dwdot[CO]/d[CO2]
  J[1110] -= dqdci; // dwdot[CO2]/d[CO2]
  J[1111] += dqdci; // dwdot[HCO]/d[CO2]
  // d()/d[HCO]
  dqdci = -k_r * sc[14];
  J[1177] -= dqdci; // dwdot[CH]/d[HCO]
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1183] -= dqdci; // dwdot[CO2]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5271] -= dqdT; // dwdot[CO2]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT

  // reaction 132: CH + CH2O <=> CH2CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[17];
  k_f = 94600000 * exp(-(-259.156582889431) * invT);
  dlnkfdT = (-259.156582889431) * invT2;
  // reverse
  phi_r = sc[1] * sc[28];
  Kc = exp(-g_RT[1] + g_RT[9] + g_RT[17] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[17]) + (h_RT[1] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[17] -= q; // CH2O
  wdot[28] += q; // CH2CO
  // d()/d[H]
  dqdci = -k_r * sc[28];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[82] -= dqdci;  // dwdot[CH]/d[H]
  J[90] -= dqdci;  // dwdot[CH2O]/d[H]
  J[101] += dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[17];
  J[658] += dqdci; // dwdot[H]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[674] -= dqdci; // dwdot[CH2O]/d[CH]
  J[685] += dqdci; // dwdot[CH2CO]/d[CH]
  // d()/d[CH2O]
  dqdci = +k_f * sc[9];
  J[1242] += dqdci; // dwdot[H]/d[CH2O]
  J[1250] -= dqdci; // dwdot[CH]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[1269] += dqdci; // dwdot[CH2CO]/d[CH2O]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[1];
  J[2045] += dqdci; // dwdot[H]/d[CH2CO]
  J[2053] -= dqdci; // dwdot[CH]/d[CH2CO]
  J[2061] -= dqdci; // dwdot[CH2O]/d[CH2CO]
  J[2072] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5284] += dqdT; // dwdot[CH2CO]/dT

  // reaction 133: CH + HCCO <=> C2H2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[27];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[22];
  Kc = exp(g_RT[9] - g_RT[14] - g_RT[22] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[27]) + (h_RT[14] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH
  wdot[14] += q; // CO
  wdot[22] += q; // C2H2
  wdot[27] -= q; // HCCO
  // d()/d[CH]
  dqdci = +k_f * sc[27];
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[671] += dqdci; // dwdot[CO]/d[CH]
  J[679] += dqdci; // dwdot[C2H2]/d[CH]
  J[684] -= dqdci; // dwdot[HCCO]/d[CH]
  // d()/d[CO]
  dqdci = -k_r * sc[22];
  J[1031] -= dqdci; // dwdot[CH]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1044] += dqdci; // dwdot[C2H2]/d[CO]
  J[1049] -= dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[C2H2]
  dqdci = -k_r * sc[14];
  J[1615] -= dqdci; // dwdot[CH]/d[C2H2]
  J[1620] += dqdci; // dwdot[CO]/d[C2H2]
  J[1628] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[1633] -= dqdci; // dwdot[HCCO]/d[C2H2]
  // d()/d[HCCO]
  dqdci = +k_f * sc[9];
  J[1980] -= dqdci; // dwdot[CH]/d[HCCO]
  J[1985] += dqdci; // dwdot[CO]/d[HCCO]
  J[1993] += dqdci; // dwdot[C2H2]/d[HCCO]
  J[1998] -= dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT
  J[5283] -= dqdT; // dwdot[HCCO]/dT

  // reaction 134: CH2 + O2 => CO + H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 5000000 * exp(-(754.82499870708) * invT);
  dlnkfdT = (754.82499870708) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // O2
  wdot[4] += q;  // OH
  wdot[10] -= q; // CH2
  wdot[14] += q; // CO
  // d()/d[O2]
  dqdci = +k_f * sc[10];
  J[220] += dqdci; // dwdot[H]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[223] += dqdci; // dwdot[OH]/d[O2]
  J[229] -= dqdci; // dwdot[CH2]/d[O2]
  J[233] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[CH2]
  dqdci = +k_f * sc[3];
  J[731] += dqdci; // dwdot[H]/d[CH2]
  J[733] -= dqdci; // dwdot[O2]/d[CH2]
  J[734] += dqdci; // dwdot[OH]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[744] += dqdci; // dwdot[CO]/d[CH2]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5270] += dqdT; // dwdot[CO]/dT

  // reaction 135: CH2 + H2 <=> CH3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[10];
  k_f = 0.5 * exp(2 * logT - (3638.25649376812) * invT);
  dlnkfdT = 2 * invT + (3638.25649376812) * invT2;
  // reverse
  phi_r = sc[1] * sc[12];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[10] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[10]) + (h_RT[1] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[10] -= q; // CH2
  wdot[12] += q; // CH3
  // d()/d[H2]
  dqdci = +k_f * sc[10];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[10] -= dqdci; // dwdot[CH2]/d[H2]
  J[12] += dqdci; // dwdot[CH3]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[12];
  J[73] -= dqdci; // dwdot[H2]/d[H]
  J[74] += dqdci; // dwdot[H]/d[H]
  J[83] -= dqdci; // dwdot[CH2]/d[H]
  J[85] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH2]
  dqdci = +k_f * sc[0];
  J[730] -= dqdci; // dwdot[H2]/d[CH2]
  J[731] += dqdci; // dwdot[H]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[742] += dqdci; // dwdot[CH3]/d[CH2]
  // d()/d[CH3]
  dqdci = -k_r * sc[1];
  J[876] -= dqdci; // dwdot[H2]/d[CH3]
  J[877] += dqdci; // dwdot[H]/d[CH3]
  J[886] -= dqdci; // dwdot[CH2]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT

  // reaction 136: 2 CH2 <=> C2H2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 1600000000 * exp(-(6010.41985637157) * invT);
  dlnkfdT = (6010.41985637157) * invT2;
  // reverse
  phi_r = sc[0] * sc[22];
  Kc = exp(-g_RT[0] + 2.000000 * g_RT[10] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[10]) + (h_RT[0] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;      // H2
  wdot[10] -= 2 * q; // CH2
  wdot[22] += q;     // C2H2
  // d()/d[H2]
  dqdci = -k_r * sc[22];
  J[0] += dqdci;       // dwdot[H2]/d[H2]
  J[10] += -2 * dqdci; // dwdot[CH2]/d[H2]
  J[22] += dqdci;      // dwdot[C2H2]/d[H2]
  // d()/d[CH2]
  dqdci = +k_f * 2.000000 * sc[10];
  J[730] += dqdci;      // dwdot[H2]/d[CH2]
  J[740] += -2 * dqdci; // dwdot[CH2]/d[CH2]
  J[752] += dqdci;      // dwdot[C2H2]/d[CH2]
  // d()/d[C2H2]
  dqdci = -k_r * sc[0];
  J[1606] += dqdci;      // dwdot[H2]/d[C2H2]
  J[1616] += -2 * dqdci; // dwdot[CH2]/d[C2H2]
  J[1628] += dqdci;      // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[5256] += dqdT;      // dwdot[H2]/dT
  J[5266] += -2 * dqdT; // dwdot[CH2]/dT
  J[5278] += dqdT;      // dwdot[C2H2]/dT

  // reaction 137: CH2 + CH3 <=> C2H4 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[12];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[24];
  Kc = exp(-g_RT[1] + g_RT[10] + g_RT[12] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[12]) + (h_RT[1] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[10] -= q; // CH2
  wdot[12] -= q; // CH3
  wdot[24] += q; // C2H4
  // d()/d[H]
  dqdci = -k_r * sc[24];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[83] -= dqdci; // dwdot[CH2]/d[H]
  J[85] -= dqdci; // dwdot[CH3]/d[H]
  J[97] += dqdci; // dwdot[C2H4]/d[H]
  // d()/d[CH2]
  dqdci = +k_f * sc[12];
  J[731] += dqdci; // dwdot[H]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[742] -= dqdci; // dwdot[CH3]/d[CH2]
  J[754] += dqdci; // dwdot[C2H4]/d[CH2]
  // d()/d[CH3]
  dqdci = +k_f * sc[10];
  J[877] += dqdci; // dwdot[H]/d[CH3]
  J[886] -= dqdci; // dwdot[CH2]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[900] += dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[1];
  J[1753] += dqdci; // dwdot[H]/d[C2H4]
  J[1762] -= dqdci; // dwdot[CH2]/d[C2H4]
  J[1764] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT

  // reaction 138: CH2 + CH4 <=> 2 CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[13];
  k_f = 2.46 * exp(2 * logT - (4161.60182620503) * invT);
  dlnkfdT = 2 * invT + (4161.60182620503) * invT2;
  // reverse
  phi_r = (sc[12] * sc[12]);
  Kc = exp(g_RT[10] - 2.000000 * g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[13]) + (2.000000 * h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q;     // CH2
  wdot[12] += 2 * q; // CH3
  wdot[13] -= q;     // CH4
  // d()/d[CH2]
  dqdci = +k_f * sc[13];
  J[740] -= dqdci;     // dwdot[CH2]/d[CH2]
  J[742] += 2 * dqdci; // dwdot[CH3]/d[CH2]
  J[743] -= dqdci;     // dwdot[CH4]/d[CH2]
  // d()/d[CH3]
  dqdci = -k_r * 2.000000 * sc[12];
  J[886] -= dqdci;     // dwdot[CH2]/d[CH3]
  J[888] += 2 * dqdci; // dwdot[CH3]/d[CH3]
  J[889] -= dqdci;     // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[10];
  J[959] -= dqdci;     // dwdot[CH2]/d[CH4]
  J[961] += 2 * dqdci; // dwdot[CH3]/d[CH4]
  J[962] -= dqdci;     // dwdot[CH4]/d[CH4]
  // d()/dT
  J[5266] -= dqdT;     // dwdot[CH2]/dT
  J[5268] += 2 * dqdT; // dwdot[CH3]/dT
  J[5269] -= dqdT;     // dwdot[CH4]/dT

  // reaction 140: CH2 + HCCO <=> C2H3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[27];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[23];
  Kc = exp(g_RT[10] - g_RT[14] - g_RT[23] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[27]) + (h_RT[14] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // CH2
  wdot[14] += q; // CO
  wdot[23] += q; // C2H3
  wdot[27] -= q; // HCCO
  // d()/d[CH2]
  dqdci = +k_f * sc[27];
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[744] += dqdci; // dwdot[CO]/d[CH2]
  J[753] += dqdci; // dwdot[C2H3]/d[CH2]
  J[757] -= dqdci; // dwdot[HCCO]/d[CH2]
  // d()/d[CO]
  dqdci = -k_r * sc[23];
  J[1032] -= dqdci; // dwdot[CH2]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1045] += dqdci; // dwdot[C2H3]/d[CO]
  J[1049] -= dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[C2H3]
  dqdci = -k_r * sc[14];
  J[1689] -= dqdci; // dwdot[CH2]/d[C2H3]
  J[1693] += dqdci; // dwdot[CO]/d[C2H3]
  J[1702] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[1706] -= dqdci; // dwdot[HCCO]/d[C2H3]
  // d()/d[HCCO]
  dqdci = +k_f * sc[10];
  J[1981] -= dqdci; // dwdot[CH2]/d[HCCO]
  J[1985] += dqdci; // dwdot[CO]/d[HCCO]
  J[1994] += dqdci; // dwdot[C2H3]/d[HCCO]
  J[1998] -= dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5279] += dqdT; // dwdot[C2H3]/dT
  J[5283] -= dqdT; // dwdot[HCCO]/dT

  // reaction 141: CH2(S) + N2 <=> CH2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[47];
  k_f = 15000000 * exp(-(301.929999482832) * invT);
  dlnkfdT = (301.929999482832) * invT2;
  // reverse
  phi_r = sc[10] * sc[47];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[47] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[47]) + (h_RT[10] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[11] -= q; // CH2(S)
  // d()/d[CH2]
  dqdci = -k_r * sc[47];
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  J[741] -= dqdci; // dwdot[CH2(S)]/d[CH2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[47];
  J[813] += dqdci; // dwdot[CH2]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/d[N2]
  dqdci = +k_f * sc[11] - k_r * sc[10];
  J[3441] += dqdci; // dwdot[CH2]/d[N2]
  J[3442] -= dqdci; // dwdot[CH2(S)]/d[N2]
  // d()/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 142: AR + CH2(S) <=> AR + CH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[48];
  k_f = 9000000 * exp(-(301.929999482832) * invT);
  dlnkfdT = (301.929999482832) * invT2;
  // reverse
  phi_r = sc[10] * sc[48];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[48] - g_RT[48]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[48]) + (h_RT[10] + h_RT[48]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[11] -= q; // CH2(S)
  // d()/d[CH2]
  dqdci = -k_r * sc[48];
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  J[741] -= dqdci; // dwdot[CH2(S)]/d[CH2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[48];
  J[813] += dqdci; // dwdot[CH2]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/d[AR]
  dqdci = +k_f * sc[11] - k_r * sc[10];
  J[3514] += dqdci; // dwdot[CH2]/d[AR]
  J[3515] -= dqdci; // dwdot[CH2(S)]/d[AR]
  // d()/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 143: CH2(S) + O2 <=> CO + H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[11];
  k_f = 28000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[4] * sc[14];
  Kc = refC * exp(-g_RT[1] + g_RT[3] - g_RT[4] + g_RT[11] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[3] + h_RT[11]) + (h_RT[1] + h_RT[4] + h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[3] -= q;  // O2
  wdot[4] += q;  // OH
  wdot[11] -= q; // CH2(S)
  wdot[14] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[4] * sc[14];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[76] -= dqdci; // dwdot[O2]/d[H]
  J[77] += dqdci; // dwdot[OH]/d[H]
  J[84] -= dqdci; // dwdot[CH2(S)]/d[H]
  J[87] += dqdci; // dwdot[CO]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[11];
  J[220] += dqdci; // dwdot[H]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[223] += dqdci; // dwdot[OH]/d[O2]
  J[230] -= dqdci; // dwdot[CH2(S)]/d[O2]
  J[233] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[1] * sc[14];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[295] -= dqdci; // dwdot[O2]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[303] -= dqdci; // dwdot[CH2(S)]/d[OH]
  J[306] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[3];
  J[804] += dqdci; // dwdot[H]/d[CH2(S)]
  J[806] -= dqdci; // dwdot[O2]/d[CH2(S)]
  J[807] += dqdci; // dwdot[OH]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[817] += dqdci; // dwdot[CO]/d[CH2(S)]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * sc[4];
  J[1023] += dqdci; // dwdot[H]/d[CO]
  J[1025] -= dqdci; // dwdot[O2]/d[CO]
  J[1026] += dqdci; // dwdot[OH]/d[CO]
  J[1033] -= dqdci; // dwdot[CH2(S)]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5270] += dqdT; // dwdot[CO]/dT

  // reaction 144: CH2(S) + O2 <=> CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[11];
  k_f = 12000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[14];
  Kc = exp(g_RT[3] - g_RT[5] + g_RT[11] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[11]) + (h_RT[5] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[5] += q;  // H2O
  wdot[11] -= q; // CH2(S)
  wdot[14] += q; // CO
  // d()/d[O2]
  dqdci = +k_f * sc[11];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[224] += dqdci; // dwdot[H2O]/d[O2]
  J[230] -= dqdci; // dwdot[CH2(S)]/d[O2]
  J[233] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[H2O]
  dqdci = -k_r * sc[14];
  J[368] -= dqdci; // dwdot[O2]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[376] -= dqdci; // dwdot[CH2(S)]/d[H2O]
  J[379] += dqdci; // dwdot[CO]/d[H2O]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[3];
  J[806] -= dqdci; // dwdot[O2]/d[CH2(S)]
  J[808] += dqdci; // dwdot[H2O]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[817] += dqdci; // dwdot[CO]/d[CH2(S)]
  // d()/d[CO]
  dqdci = -k_r * sc[5];
  J[1025] -= dqdci; // dwdot[O2]/d[CO]
  J[1027] += dqdci; // dwdot[H2O]/d[CO]
  J[1033] -= dqdci; // dwdot[CH2(S)]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5270] += dqdT; // dwdot[CO]/dT

  // reaction 145: CH2(S) + H2 <=> CH3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[11];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[12];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[11] - g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[11]) + (h_RT[1] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[11] -= q; // CH2(S)
  wdot[12] += q; // CH3
  // d()/d[H2]
  dqdci = +k_f * sc[11];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[11] -= dqdci; // dwdot[CH2(S)]/d[H2]
  J[12] += dqdci; // dwdot[CH3]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[12];
  J[73] -= dqdci; // dwdot[H2]/d[H]
  J[74] += dqdci; // dwdot[H]/d[H]
  J[84] -= dqdci; // dwdot[CH2(S)]/d[H]
  J[85] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[0];
  J[803] -= dqdci; // dwdot[H2]/d[CH2(S)]
  J[804] += dqdci; // dwdot[H]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[815] += dqdci; // dwdot[CH3]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = -k_r * sc[1];
  J[876] -= dqdci; // dwdot[H2]/d[CH3]
  J[877] += dqdci; // dwdot[H]/d[CH3]
  J[887] -= dqdci; // dwdot[CH2(S)]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT

  // reaction 147: CH2(S) + H2O <=> CH2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[11];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[10];
  Kc = exp(g_RT[5] - g_RT[5] - g_RT[10] + g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[11]) + (h_RT[5] + h_RT[10]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[11] -= q; // CH2(S)
  // d()/d[H2O]
  dqdci = +k_f * sc[11] - k_r * sc[10];
  J[375] += dqdci; // dwdot[CH2]/d[H2O]
  J[376] -= dqdci; // dwdot[CH2(S)]/d[H2O]
  // d()/d[CH2]
  dqdci = -k_r * sc[5];
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  J[741] -= dqdci; // dwdot[CH2(S)]/d[CH2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[5];
  J[813] += dqdci; // dwdot[CH2]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 148: CH2(S) + CH3 <=> C2H4 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[12];
  k_f = 12000000 * exp(-(-286.83349950869) * invT);
  dlnkfdT = (-286.83349950869) * invT2;
  // reverse
  phi_r = sc[1] * sc[24];
  Kc = exp(-g_RT[1] + g_RT[11] + g_RT[12] - g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[12]) + (h_RT[1] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[11] -= q; // CH2(S)
  wdot[12] -= q; // CH3
  wdot[24] += q; // C2H4
  // d()/d[H]
  dqdci = -k_r * sc[24];
  J[74] += dqdci; // dwdot[H]/d[H]
  J[84] -= dqdci; // dwdot[CH2(S)]/d[H]
  J[85] -= dqdci; // dwdot[CH3]/d[H]
  J[97] += dqdci; // dwdot[C2H4]/d[H]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[12];
  J[804] += dqdci; // dwdot[H]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[815] -= dqdci; // dwdot[CH3]/d[CH2(S)]
  J[827] += dqdci; // dwdot[C2H4]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = +k_f * sc[11];
  J[877] += dqdci; // dwdot[H]/d[CH3]
  J[887] -= dqdci; // dwdot[CH2(S)]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[900] += dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[1];
  J[1753] += dqdci; // dwdot[H]/d[C2H4]
  J[1763] -= dqdci; // dwdot[CH2(S)]/d[C2H4]
  J[1764] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT

  // reaction 149: CH2(S) + CH4 <=> 2 CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[13];
  k_f = 16000000 * exp(-(-286.83349950869) * invT);
  dlnkfdT = (-286.83349950869) * invT2;
  // reverse
  phi_r = (sc[12] * sc[12]);
  Kc = exp(g_RT[11] - 2.000000 * g_RT[12] + g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[13]) + (2.000000 * h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q;     // CH2(S)
  wdot[12] += 2 * q; // CH3
  wdot[13] -= q;     // CH4
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[13];
  J[814] -= dqdci;     // dwdot[CH2(S)]/d[CH2(S)]
  J[815] += 2 * dqdci; // dwdot[CH3]/d[CH2(S)]
  J[816] -= dqdci;     // dwdot[CH4]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = -k_r * 2.000000 * sc[12];
  J[887] -= dqdci;     // dwdot[CH2(S)]/d[CH3]
  J[888] += 2 * dqdci; // dwdot[CH3]/d[CH3]
  J[889] -= dqdci;     // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[11];
  J[960] -= dqdci;     // dwdot[CH2(S)]/d[CH4]
  J[961] += 2 * dqdci; // dwdot[CH3]/d[CH4]
  J[962] -= dqdci;     // dwdot[CH4]/d[CH4]
  // d()/dT
  J[5267] -= dqdT;     // dwdot[CH2(S)]/dT
  J[5268] += 2 * dqdT; // dwdot[CH3]/dT
  J[5269] -= dqdT;     // dwdot[CH4]/dT

  // reaction 150: CH2(S) + CO <=> CH2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[14];
  k_f = 9000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[14];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[14] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[14]) + (h_RT[10] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[11] -= q; // CH2(S)
  // d()/d[CH2]
  dqdci = -k_r * sc[14];
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  J[741] -= dqdci; // dwdot[CH2(S)]/d[CH2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[14];
  J[813] += dqdci; // dwdot[CH2]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/d[CO]
  dqdci = +k_f * sc[11] - k_r * sc[10];
  J[1032] += dqdci; // dwdot[CH2]/d[CO]
  J[1033] -= dqdci; // dwdot[CH2(S)]/d[CO]
  // d()/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 151: CH2(S) + CO2 <=> CH2 + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[15];
  k_f = 7000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[15];
  Kc = exp(-g_RT[10] + g_RT[11] + g_RT[15] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[15]) + (h_RT[10] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[11] -= q; // CH2(S)
  // d()/d[CH2]
  dqdci = -k_r * sc[15];
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  J[741] -= dqdci; // dwdot[CH2(S)]/d[CH2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[15];
  J[813] += dqdci; // dwdot[CH2]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  // d()/d[CO2]
  dqdci = +k_f * sc[11] - k_r * sc[10];
  J[1105] += dqdci; // dwdot[CH2]/d[CO2]
  J[1106] -= dqdci; // dwdot[CH2(S)]/d[CO2]
  // d()/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT

  // reaction 152: CH2(S) + CO2 <=> CH2O + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[15];
  k_f = 14000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[17];
  Kc = exp(g_RT[11] - g_RT[14] + g_RT[15] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[15]) + (h_RT[14] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // CH2(S)
  wdot[14] += q; // CO
  wdot[15] -= q; // CO2
  wdot[17] += q; // CH2O
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[15];
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[817] += dqdci; // dwdot[CO]/d[CH2(S)]
  J[818] -= dqdci; // dwdot[CO2]/d[CH2(S)]
  J[820] += dqdci; // dwdot[CH2O]/d[CH2(S)]
  // d()/d[CO]
  dqdci = -k_r * sc[17];
  J[1033] -= dqdci; // dwdot[CH2(S)]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1037] -= dqdci; // dwdot[CO2]/d[CO]
  J[1039] += dqdci; // dwdot[CH2O]/d[CO]
  // d()/d[CO2]
  dqdci = +k_f * sc[11];
  J[1106] -= dqdci; // dwdot[CH2(S)]/d[CO2]
  J[1109] += dqdci; // dwdot[CO]/d[CO2]
  J[1110] -= dqdci; // dwdot[CO2]/d[CO2]
  J[1112] += dqdci; // dwdot[CH2O]/d[CO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[14];
  J[1252] -= dqdci; // dwdot[CH2(S)]/d[CH2O]
  J[1255] += dqdci; // dwdot[CO]/d[CH2O]
  J[1256] -= dqdci; // dwdot[CO2]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5271] -= dqdT; // dwdot[CO2]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 153: C2H6 + CH2(S) <=> C2H5 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[26];
  k_f = 40000000 * exp(-(-276.769166192596) * invT);
  dlnkfdT = (-276.769166192596) * invT2;
  // reverse
  phi_r = sc[12] * sc[25];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[26]) + (h_RT[12] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // CH2(S)
  wdot[12] += q; // CH3
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[26];
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[815] += dqdci; // dwdot[CH3]/d[CH2(S)]
  J[828] += dqdci; // dwdot[C2H5]/d[CH2(S)]
  J[829] -= dqdci; // dwdot[C2H6]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = -k_r * sc[25];
  J[887] -= dqdci; // dwdot[CH2(S)]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[901] += dqdci; // dwdot[C2H5]/d[CH3]
  J[902] -= dqdci; // dwdot[C2H6]/d[CH3]
  // d()/d[C2H5]
  dqdci = -k_r * sc[12];
  J[1836] -= dqdci; // dwdot[CH2(S)]/d[C2H5]
  J[1837] += dqdci; // dwdot[CH3]/d[C2H5]
  J[1850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[11];
  J[1909] -= dqdci; // dwdot[CH2(S)]/d[C2H6]
  J[1910] += dqdci; // dwdot[CH3]/d[C2H6]
  J[1923] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1924] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5282] -= dqdT; // dwdot[C2H6]/dT

  // reaction 154: CH3 + O2 <=> CH3O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[12];
  k_f = 35600000 * exp(-(15338.0439737279) * invT);
  dlnkfdT = (15338.0439737279) * invT2;
  // reverse
  phi_r = sc[2] * sc[19];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[12] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[12]) + (h_RT[2] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[12] -= q; // CH3
  wdot[19] += q; // CH3O
  // d()/d[O]
  dqdci = -k_r * sc[19];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[158] -= dqdci; // dwdot[CH3]/d[O]
  J[165] += dqdci; // dwdot[CH3O]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[12];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[231] -= dqdci; // dwdot[CH3]/d[O2]
  J[238] += dqdci; // dwdot[CH3O]/d[O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[3];
  J[878] += dqdci; // dwdot[O]/d[CH3]
  J[879] -= dqdci; // dwdot[O2]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[895] += dqdci; // dwdot[CH3O]/d[CH3]
  // d()/d[CH3O]
  dqdci = -k_r * sc[2];
  J[1389] += dqdci; // dwdot[O]/d[CH3O]
  J[1390] -= dqdci; // dwdot[O2]/d[CH3O]
  J[1399] -= dqdci; // dwdot[CH3]/d[CH3O]
  J[1406] += dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT

  // reaction 155: CH3 + O2 <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[12];
  k_f = 2310000 * exp(-(10222.8465658229) * invT);
  dlnkfdT = (10222.8465658229) * invT2;
  // reverse
  phi_r = sc[4] * sc[17];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[12] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[12]) + (h_RT[4] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // OH
  wdot[12] -= q; // CH3
  wdot[17] += q; // CH2O
  // d()/d[O2]
  dqdci = +k_f * sc[12];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[223] += dqdci; // dwdot[OH]/d[O2]
  J[231] -= dqdci; // dwdot[CH3]/d[O2]
  J[236] += dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[17];
  J[295] -= dqdci; // dwdot[O2]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[304] -= dqdci; // dwdot[CH3]/d[OH]
  J[309] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH3]
  dqdci = +k_f * sc[3];
  J[879] -= dqdci; // dwdot[O2]/d[CH3]
  J[880] += dqdci; // dwdot[OH]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[893] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[4];
  J[1244] -= dqdci; // dwdot[O2]/d[CH2O]
  J[1245] += dqdci; // dwdot[OH]/d[CH2O]
  J[1253] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 156: CH3 + H2O2 <=> CH4 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[12];
  k_f = 0.0245 * exp(2.47 * logT - (2606.66232886845) * invT);
  dlnkfdT = 2.47 * invT + (2606.66232886845) * invT2;
  // reverse
  phi_r = sc[6] * sc[13];
  Kc = exp(-g_RT[6] + g_RT[7] + g_RT[12] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[12]) + (h_RT[6] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  // d()/d[HO2]
  dqdci = -k_r * sc[13];
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[450] -= dqdci; // dwdot[CH3]/d[HO2]
  J[451] += dqdci; // dwdot[CH4]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[12];
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[523] -= dqdci; // dwdot[CH3]/d[H2O2]
  J[524] += dqdci; // dwdot[CH4]/d[H2O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[7];
  J[882] += dqdci; // dwdot[HO2]/d[CH3]
  J[883] -= dqdci; // dwdot[H2O2]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[6];
  J[955] += dqdci; // dwdot[HO2]/d[CH4]
  J[956] -= dqdci; // dwdot[H2O2]/d[CH4]
  J[961] -= dqdci; // dwdot[CH3]/d[CH4]
  J[962] += dqdci; // dwdot[CH4]/d[CH4]
  // d()/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT

  // reaction 158: 2 CH3 <=> C2H5 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[12] * sc[12]);
  k_f = 6840000 * exp(0.1 * logT - (5334.09665753003) * invT);
  dlnkfdT = 0.1 * invT + (5334.09665753003) * invT2;
  // reverse
  phi_r = sc[1] * sc[25];
  Kc = exp(-g_RT[1] + 2.000000 * g_RT[12] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[12]) + (h_RT[1] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;      // H
  wdot[12] -= 2 * q; // CH3
  wdot[25] += q;     // C2H5
  // d()/d[H]
  dqdci = -k_r * sc[25];
  J[74] += dqdci;      // dwdot[H]/d[H]
  J[85] += -2 * dqdci; // dwdot[CH3]/d[H]
  J[98] += dqdci;      // dwdot[C2H5]/d[H]
  // d()/d[CH3]
  dqdci = +k_f * 2.000000 * sc[12];
  J[877] += dqdci;      // dwdot[H]/d[CH3]
  J[888] += -2 * dqdci; // dwdot[CH3]/d[CH3]
  J[901] += dqdci;      // dwdot[C2H5]/d[CH3]
  // d()/d[C2H5]
  dqdci = -k_r * sc[1];
  J[1826] += dqdci;      // dwdot[H]/d[C2H5]
  J[1837] += -2 * dqdci; // dwdot[CH3]/d[C2H5]
  J[1850] += dqdci;      // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[5257] += dqdT;      // dwdot[H]/dT
  J[5268] += -2 * dqdT; // dwdot[CH3]/dT
  J[5281] += dqdT;      // dwdot[C2H5]/dT

  // reaction 159: CH3 + HCO <=> CH4 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[16];
  k_f = 26480000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[13] * sc[14];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[16]) + (h_RT[13] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[CH3]
  dqdci = +k_f * sc[16];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[890] += dqdci; // dwdot[CO]/d[CH3]
  J[892] -= dqdci; // dwdot[HCO]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[14];
  J[961] -= dqdci; // dwdot[CH3]/d[CH4]
  J[962] += dqdci; // dwdot[CH4]/d[CH4]
  J[963] += dqdci; // dwdot[CO]/d[CH4]
  J[965] -= dqdci; // dwdot[HCO]/d[CH4]
  // d()/d[CO]
  dqdci = -k_r * sc[13];
  J[1034] -= dqdci; // dwdot[CH3]/d[CO]
  J[1035] += dqdci; // dwdot[CH4]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[12];
  J[1180] -= dqdci; // dwdot[CH3]/d[HCO]
  J[1181] += dqdci; // dwdot[CH4]/d[HCO]
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT

  // reaction 160: CH2O + CH3 <=> CH4 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[17];
  k_f = 0.00332 * exp(2.81 * logT - (2948.84966161566) * invT);
  dlnkfdT = 2.81 * invT + (2948.84966161566) * invT2;
  // reverse
  phi_r = sc[13] * sc[16];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[17]) + (h_RT[13] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  // d()/d[CH3]
  dqdci = +k_f * sc[17];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[892] += dqdci; // dwdot[HCO]/d[CH3]
  J[893] -= dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[16];
  J[961] -= dqdci; // dwdot[CH3]/d[CH4]
  J[962] += dqdci; // dwdot[CH4]/d[CH4]
  J[965] += dqdci; // dwdot[HCO]/d[CH4]
  J[966] -= dqdci; // dwdot[CH2O]/d[CH4]
  // d()/d[HCO]
  dqdci = -k_r * sc[13];
  J[1180] -= dqdci; // dwdot[CH3]/d[HCO]
  J[1181] += dqdci; // dwdot[CH4]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[12];
  J[1253] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[1254] += dqdci; // dwdot[CH4]/d[CH2O]
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT

  // reaction 161: CH3 + CH3OH <=> CH2OH + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[20];
  k_f = 30 * exp(1.5 * logT - (5001.97365809891) * invT);
  dlnkfdT = 1.5 * invT + (5001.97365809891) * invT2;
  // reverse
  phi_r = sc[13] * sc[18];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[18] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[20]) + (h_RT[13] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  // d()/d[CH3]
  dqdci = +k_f * sc[20];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[894] += dqdci; // dwdot[CH2OH]/d[CH3]
  J[896] -= dqdci; // dwdot[CH3OH]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[18];
  J[961] -= dqdci; // dwdot[CH3]/d[CH4]
  J[962] += dqdci; // dwdot[CH4]/d[CH4]
  J[967] += dqdci; // dwdot[CH2OH]/d[CH4]
  J[969] -= dqdci; // dwdot[CH3OH]/d[CH4]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[13];
  J[1326] -= dqdci; // dwdot[CH3]/d[CH2OH]
  J[1327] += dqdci; // dwdot[CH4]/d[CH2OH]
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1334] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[12];
  J[1472] -= dqdci; // dwdot[CH3]/d[CH3OH]
  J[1473] += dqdci; // dwdot[CH4]/d[CH3OH]
  J[1478] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 162: CH3 + CH3OH <=> CH3O + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[20];
  k_f = 10 * exp(1.5 * logT - (5001.97365809891) * invT);
  dlnkfdT = 1.5 * invT + (5001.97365809891) * invT2;
  // reverse
  phi_r = sc[13] * sc[19];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[20]) + (h_RT[13] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  // d()/d[CH3]
  dqdci = +k_f * sc[20];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[895] += dqdci; // dwdot[CH3O]/d[CH3]
  J[896] -= dqdci; // dwdot[CH3OH]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[19];
  J[961] -= dqdci; // dwdot[CH3]/d[CH4]
  J[962] += dqdci; // dwdot[CH4]/d[CH4]
  J[968] += dqdci; // dwdot[CH3O]/d[CH4]
  J[969] -= dqdci; // dwdot[CH3OH]/d[CH4]
  // d()/d[CH3O]
  dqdci = -k_r * sc[13];
  J[1399] -= dqdci; // dwdot[CH3]/d[CH3O]
  J[1400] += dqdci; // dwdot[CH4]/d[CH3O]
  J[1406] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[1407] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[12];
  J[1472] -= dqdci; // dwdot[CH3]/d[CH3OH]
  J[1473] += dqdci; // dwdot[CH4]/d[CH3OH]
  J[1479] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT

  // reaction 163: C2H4 + CH3 <=> C2H3 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[24];
  k_f = 0.227 * exp(2 * logT - (4629.59332540342) * invT);
  dlnkfdT = 2 * invT + (4629.59332540342) * invT2;
  // reverse
  phi_r = sc[13] * sc[23];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[23] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[24]) + (h_RT[13] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[23] += q; // C2H3
  wdot[24] -= q; // C2H4
  // d()/d[CH3]
  dqdci = +k_f * sc[24];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[899] += dqdci; // dwdot[C2H3]/d[CH3]
  J[900] -= dqdci; // dwdot[C2H4]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[23];
  J[961] -= dqdci; // dwdot[CH3]/d[CH4]
  J[962] += dqdci; // dwdot[CH4]/d[CH4]
  J[972] += dqdci; // dwdot[C2H3]/d[CH4]
  J[973] -= dqdci; // dwdot[C2H4]/d[CH4]
  // d()/d[C2H3]
  dqdci = -k_r * sc[13];
  J[1691] -= dqdci; // dwdot[CH3]/d[C2H3]
  J[1692] += dqdci; // dwdot[CH4]/d[C2H3]
  J[1702] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[1703] -= dqdci; // dwdot[C2H4]/d[C2H3]
  // d()/d[C2H4]
  dqdci = +k_f * sc[12];
  J[1764] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[1765] += dqdci; // dwdot[CH4]/d[C2H4]
  J[1775] += dqdci; // dwdot[C2H3]/d[C2H4]
  J[1776] -= dqdci; // dwdot[C2H4]/d[C2H4]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5279] += dqdT; // dwdot[C2H3]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT

  // reaction 164: C2H6 + CH3 <=> C2H5 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[26];
  k_f = 6.14 * exp(1.74 * logT - (5258.61415765932) * invT);
  dlnkfdT = 1.74 * invT + (5258.61415765932) * invT2;
  // reverse
  phi_r = sc[13] * sc[25];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[26]) + (h_RT[13] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  // d()/d[CH3]
  dqdci = +k_f * sc[26];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[901] += dqdci; // dwdot[C2H5]/d[CH3]
  J[902] -= dqdci; // dwdot[C2H6]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[25];
  J[961] -= dqdci; // dwdot[CH3]/d[CH4]
  J[962] += dqdci; // dwdot[CH4]/d[CH4]
  J[974] += dqdci; // dwdot[C2H5]/d[CH4]
  J[975] -= dqdci; // dwdot[C2H6]/d[CH4]
  // d()/d[C2H5]
  dqdci = -k_r * sc[13];
  J[1837] -= dqdci; // dwdot[CH3]/d[C2H5]
  J[1838] += dqdci; // dwdot[CH4]/d[C2H5]
  J[1850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[12];
  J[1910] -= dqdci; // dwdot[CH3]/d[C2H6]
  J[1911] += dqdci; // dwdot[CH4]/d[C2H6]
  J[1923] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1924] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5282] -= dqdT; // dwdot[C2H6]/dT

  // reaction 167: HCO + O2 <=> CO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[16];
  k_f = 13450000 * exp(-(201.286666321888) * invT);
  dlnkfdT = (201.286666321888) * invT2;
  // reverse
  phi_r = sc[6] * sc[14];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[14] + g_RT[16]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[16]) + (h_RT[6] + h_RT[14]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  // d()/d[O2]
  dqdci = +k_f * sc[16];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  J[233] += dqdci; // dwdot[CO]/d[O2]
  J[235] -= dqdci; // dwdot[HCO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[14];
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[452] += dqdci; // dwdot[CO]/d[HO2]
  J[454] -= dqdci; // dwdot[HCO]/d[HO2]
  // d()/d[CO]
  dqdci = -k_r * sc[6];
  J[1025] -= dqdci; // dwdot[O2]/d[CO]
  J[1028] += dqdci; // dwdot[HO2]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[3];
  J[1171] -= dqdci; // dwdot[O2]/d[HCO]
  J[1174] += dqdci; // dwdot[HO2]/d[HCO]
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT

  // reaction 168: CH2OH + O2 <=> CH2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[18];
  k_f = 18000000 * exp(-(452.894999224248) * invT);
  dlnkfdT = (452.894999224248) * invT2;
  // reverse
  phi_r = sc[6] * sc[17];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[18]) + (h_RT[6] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[17] += q; // CH2O
  wdot[18] -= q; // CH2OH
  // d()/d[O2]
  dqdci = +k_f * sc[18];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  J[236] += dqdci; // dwdot[CH2O]/d[O2]
  J[237] -= dqdci; // dwdot[CH2OH]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[17];
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[455] += dqdci; // dwdot[CH2O]/d[HO2]
  J[456] -= dqdci; // dwdot[CH2OH]/d[HO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[6];
  J[1244] -= dqdci; // dwdot[O2]/d[CH2O]
  J[1247] += dqdci; // dwdot[HO2]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1259] -= dqdci; // dwdot[CH2OH]/d[CH2O]
  // d()/d[CH2OH]
  dqdci = +k_f * sc[3];
  J[1317] -= dqdci; // dwdot[O2]/d[CH2OH]
  J[1320] += dqdci; // dwdot[HO2]/d[CH2OH]
  J[1331] += dqdci; // dwdot[CH2O]/d[CH2OH]
  J[1332] -= dqdci; // dwdot[CH2OH]/d[CH2OH]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5274] -= dqdT; // dwdot[CH2OH]/dT

  // reaction 169: CH3O + O2 <=> CH2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[19];
  k_f = 4.28e-19 * exp(7.6 * logT - (-1776.35483029066) * invT);
  dlnkfdT = 7.6 * invT + (-1776.35483029066) * invT2;
  // reverse
  phi_r = sc[6] * sc[17];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[17] + g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[19]) + (h_RT[6] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[17] += q; // CH2O
  wdot[19] -= q; // CH3O
  // d()/d[O2]
  dqdci = +k_f * sc[19];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  J[236] += dqdci; // dwdot[CH2O]/d[O2]
  J[238] -= dqdci; // dwdot[CH3O]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[17];
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[455] += dqdci; // dwdot[CH2O]/d[HO2]
  J[457] -= dqdci; // dwdot[CH3O]/d[HO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[6];
  J[1244] -= dqdci; // dwdot[O2]/d[CH2O]
  J[1247] += dqdci; // dwdot[HO2]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1260] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[3];
  J[1390] -= dqdci; // dwdot[O2]/d[CH3O]
  J[1393] += dqdci; // dwdot[HO2]/d[CH3O]
  J[1404] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[1406] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5275] -= dqdT; // dwdot[CH3O]/dT

  // reaction 170: C2H + O2 <=> CO + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[21];
  k_f = 10000000 * exp(-(-379.928582682563) * invT);
  dlnkfdT = (-379.928582682563) * invT2;
  // reverse
  phi_r = sc[14] * sc[16];
  Kc = exp(g_RT[3] - g_RT[14] - g_RT[16] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[21]) + (h_RT[14] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[14] += q; // CO
  wdot[16] += q; // HCO
  wdot[21] -= q; // C2H
  // d()/d[O2]
  dqdci = +k_f * sc[21];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[233] += dqdci; // dwdot[CO]/d[O2]
  J[235] += dqdci; // dwdot[HCO]/d[O2]
  J[240] -= dqdci; // dwdot[C2H]/d[O2]
  // d()/d[CO]
  dqdci = -k_r * sc[16];
  J[1025] -= dqdci; // dwdot[O2]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] += dqdci; // dwdot[HCO]/d[CO]
  J[1043] -= dqdci; // dwdot[C2H]/d[CO]
  // d()/d[HCO]
  dqdci = -k_r * sc[14];
  J[1171] -= dqdci; // dwdot[O2]/d[HCO]
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1189] -= dqdci; // dwdot[C2H]/d[HCO]
  // d()/d[C2H]
  dqdci = +k_f * sc[3];
  J[1536] -= dqdci; // dwdot[O2]/d[C2H]
  J[1547] += dqdci; // dwdot[CO]/d[C2H]
  J[1549] += dqdci; // dwdot[HCO]/d[C2H]
  J[1554] -= dqdci; // dwdot[C2H]/d[C2H]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5277] -= dqdT; // dwdot[C2H]/dT

  // reaction 171: C2H + H2 <=> C2H2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[21];
  k_f = 56800 * exp(0.9 * logT - (1002.91081494881) * invT);
  dlnkfdT = 0.9 * invT + (1002.91081494881) * invT2;
  // reverse
  phi_r = sc[1] * sc[22];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[21] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[21]) + (h_RT[1] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[21] -= q; // C2H
  wdot[22] += q; // C2H2
  // d()/d[H2]
  dqdci = +k_f * sc[21];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[21] -= dqdci; // dwdot[C2H]/d[H2]
  J[22] += dqdci; // dwdot[C2H2]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[22];
  J[73] -= dqdci; // dwdot[H2]/d[H]
  J[74] += dqdci; // dwdot[H]/d[H]
  J[94] -= dqdci; // dwdot[C2H]/d[H]
  J[95] += dqdci; // dwdot[C2H2]/d[H]
  // d()/d[C2H]
  dqdci = +k_f * sc[0];
  J[1533] -= dqdci; // dwdot[H2]/d[C2H]
  J[1534] += dqdci; // dwdot[H]/d[C2H]
  J[1554] -= dqdci; // dwdot[C2H]/d[C2H]
  J[1555] += dqdci; // dwdot[C2H2]/d[C2H]
  // d()/d[C2H2]
  dqdci = -k_r * sc[1];
  J[1606] -= dqdci; // dwdot[H2]/d[C2H2]
  J[1607] += dqdci; // dwdot[H]/d[C2H2]
  J[1627] -= dqdci; // dwdot[C2H]/d[C2H2]
  J[1628] += dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5277] -= dqdT; // dwdot[C2H]/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT

  // reaction 172: C2H3 + O2 <=> CH2O + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[23];
  k_f = 45800000000 * exp(-1.39 * logT - (510.76491579179) * invT);
  dlnkfdT = -1.39 * invT + (510.76491579179) * invT2;
  // reverse
  phi_r = sc[16] * sc[17];
  Kc = exp(g_RT[3] - g_RT[16] - g_RT[17] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[23]) + (h_RT[16] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[16] += q; // HCO
  wdot[17] += q; // CH2O
  wdot[23] -= q; // C2H3
  // d()/d[O2]
  dqdci = +k_f * sc[23];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[235] += dqdci; // dwdot[HCO]/d[O2]
  J[236] += dqdci; // dwdot[CH2O]/d[O2]
  J[242] -= dqdci; // dwdot[C2H3]/d[O2]
  // d()/d[HCO]
  dqdci = -k_r * sc[17];
  J[1171] -= dqdci; // dwdot[O2]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] += dqdci; // dwdot[CH2O]/d[HCO]
  J[1191] -= dqdci; // dwdot[C2H3]/d[HCO]
  // d()/d[CH2O]
  dqdci = -k_r * sc[16];
  J[1244] -= dqdci; // dwdot[O2]/d[CH2O]
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1264] -= dqdci; // dwdot[C2H3]/d[CH2O]
  // d()/d[C2H3]
  dqdci = +k_f * sc[3];
  J[1682] -= dqdci; // dwdot[O2]/d[C2H3]
  J[1695] += dqdci; // dwdot[HCO]/d[C2H3]
  J[1696] += dqdci; // dwdot[CH2O]/d[C2H3]
  J[1702] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT

  // reaction 174: C2H5 + O2 <=> C2H4 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[25];
  k_f = 840000 * exp(-(1949.96457999329) * invT);
  dlnkfdT = (1949.96457999329) * invT2;
  // reverse
  phi_r = sc[6] * sc[24];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[24] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[25]) + (h_RT[6] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[24] += q; // C2H4
  wdot[25] -= q; // C2H5
  // d()/d[O2]
  dqdci = +k_f * sc[25];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  J[243] += dqdci; // dwdot[C2H4]/d[O2]
  J[244] -= dqdci; // dwdot[C2H5]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[24];
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[462] += dqdci; // dwdot[C2H4]/d[HO2]
  J[463] -= dqdci; // dwdot[C2H5]/d[HO2]
  // d()/d[C2H4]
  dqdci = -k_r * sc[6];
  J[1755] -= dqdci; // dwdot[O2]/d[C2H4]
  J[1758] += dqdci; // dwdot[HO2]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[1777] -= dqdci; // dwdot[C2H5]/d[C2H4]
  // d()/d[C2H5]
  dqdci = +k_f * sc[3];
  J[1828] -= dqdci; // dwdot[O2]/d[C2H5]
  J[1831] += dqdci; // dwdot[HO2]/d[C2H5]
  J[1849] += dqdci; // dwdot[C2H4]/d[C2H5]
  J[1850] -= dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT
  J[5281] -= dqdT; // dwdot[C2H5]/dT

  // reaction 175: HCCO + O2 <=> 2 CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[27];
  k_f = 3200000 * exp(-(429.747032597231) * invT);
  dlnkfdT = (429.747032597231) * invT2;
  // reverse
  phi_r = sc[4] * (sc[14] * sc[14]);
  Kc = refC * exp(g_RT[3] - g_RT[4] - 2.000000 * g_RT[14] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[3] + h_RT[27]) + (h_RT[4] + 2.000000 * h_RT[14]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;      // O2
  wdot[4] += q;      // OH
  wdot[14] += 2 * q; // CO
  wdot[27] -= q;     // HCCO
  // d()/d[O2]
  dqdci = +k_f * sc[27];
  J[222] -= dqdci;     // dwdot[O2]/d[O2]
  J[223] += dqdci;     // dwdot[OH]/d[O2]
  J[233] += 2 * dqdci; // dwdot[CO]/d[O2]
  J[246] -= dqdci;     // dwdot[HCCO]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[14] * sc[14];
  J[295] -= dqdci;     // dwdot[O2]/d[OH]
  J[296] += dqdci;     // dwdot[OH]/d[OH]
  J[306] += 2 * dqdci; // dwdot[CO]/d[OH]
  J[319] -= dqdci;     // dwdot[HCCO]/d[OH]
  // d()/d[CO]
  dqdci = -k_r * sc[4] * 2.000000 * sc[14];
  J[1025] -= dqdci;     // dwdot[O2]/d[CO]
  J[1026] += dqdci;     // dwdot[OH]/d[CO]
  J[1036] += 2 * dqdci; // dwdot[CO]/d[CO]
  J[1049] -= dqdci;     // dwdot[HCCO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[3];
  J[1974] -= dqdci;     // dwdot[O2]/d[HCCO]
  J[1975] += dqdci;     // dwdot[OH]/d[HCCO]
  J[1985] += 2 * dqdci; // dwdot[CO]/d[HCCO]
  J[1998] -= dqdci;     // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[5259] -= dqdT;     // dwdot[O2]/dT
  J[5260] += dqdT;     // dwdot[OH]/dT
  J[5270] += 2 * dqdT; // dwdot[CO]/dT
  J[5283] -= dqdT;     // dwdot[HCCO]/dT

  // reaction 176: 2 HCCO <=> C2H2 + 2 CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[27] * sc[27]);
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = (sc[14] * sc[14]) * sc[22];
  Kc = refC * exp(-2.000000 * g_RT[14] - g_RT[22] + 2.000000 * g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[27]) + (2.000000 * h_RT[14] + h_RT[22]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += 2 * q; // CO
  wdot[22] += q;     // C2H2
  wdot[27] -= 2 * q; // HCCO
  // d()/d[CO]
  dqdci = -k_r * 2.000000 * sc[14] * sc[22];
  J[1036] += 2 * dqdci;  // dwdot[CO]/d[CO]
  J[1044] += dqdci;      // dwdot[C2H2]/d[CO]
  J[1049] += -2 * dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[C2H2]
  dqdci = -k_r * sc[14] * sc[14];
  J[1620] += 2 * dqdci;  // dwdot[CO]/d[C2H2]
  J[1628] += dqdci;      // dwdot[C2H2]/d[C2H2]
  J[1633] += -2 * dqdci; // dwdot[HCCO]/d[C2H2]
  // d()/d[HCCO]
  dqdci = +k_f * 2.000000 * sc[27];
  J[1985] += 2 * dqdci;  // dwdot[CO]/d[HCCO]
  J[1993] += dqdci;      // dwdot[C2H2]/d[HCCO]
  J[1998] += -2 * dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[5270] += 2 * dqdT;  // dwdot[CO]/dT
  J[5278] += dqdT;      // dwdot[C2H2]/dT
  J[5283] += -2 * dqdT; // dwdot[HCCO]/dT

  // reaction 177: N + NO <=> N2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[30] * sc[35];
  k_f = 27000000 * exp(-(178.641916360675) * invT);
  dlnkfdT = (178.641916360675) * invT2;
  // reverse
  phi_r = sc[2] * sc[47];
  Kc = exp(-g_RT[2] + g_RT[30] + g_RT[35] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[30] + h_RT[35]) + (h_RT[2] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[30] -= q; // N
  wdot[35] -= q; // NO
  wdot[47] += q; // N2
  // d()/d[O]
  dqdci = -k_r * sc[47];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[176] -= dqdci; // dwdot[N]/d[O]
  J[181] -= dqdci; // dwdot[NO]/d[O]
  J[193] += dqdci; // dwdot[N2]/d[O]
  // d()/d[N]
  dqdci = +k_f * sc[35];
  J[2192] += dqdci; // dwdot[O]/d[N]
  J[2220] -= dqdci; // dwdot[N]/d[N]
  J[2225] -= dqdci; // dwdot[NO]/d[N]
  J[2237] += dqdci; // dwdot[N2]/d[N]
  // d()/d[NO]
  dqdci = +k_f * sc[30];
  J[2557] += dqdci; // dwdot[O]/d[NO]
  J[2585] -= dqdci; // dwdot[N]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2602] += dqdci; // dwdot[N2]/d[NO]
  // d()/d[N2]
  dqdci = -k_r * sc[2];
  J[3433] += dqdci; // dwdot[O]/d[N2]
  J[3461] -= dqdci; // dwdot[N]/d[N2]
  J[3466] -= dqdci; // dwdot[NO]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5286] -= dqdT; // dwdot[N]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 178: N + O2 <=> NO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[30];
  k_f = 9000 * exp(1 * logT - (3270.90832773068) * invT);
  dlnkfdT = 1 * invT + (3270.90832773068) * invT2;
  // reverse
  phi_r = sc[2] * sc[35];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[30] - g_RT[35]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[30]) + (h_RT[2] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[30] -= q; // N
  wdot[35] += q; // NO
  // d()/d[O]
  dqdci = -k_r * sc[35];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[176] -= dqdci; // dwdot[N]/d[O]
  J[181] += dqdci; // dwdot[NO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[30];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[249] -= dqdci; // dwdot[N]/d[O2]
  J[254] += dqdci; // dwdot[NO]/d[O2]
  // d()/d[N]
  dqdci = +k_f * sc[3];
  J[2192] += dqdci; // dwdot[O]/d[N]
  J[2193] -= dqdci; // dwdot[O2]/d[N]
  J[2220] -= dqdci; // dwdot[N]/d[N]
  J[2225] += dqdci; // dwdot[NO]/d[N]
  // d()/d[NO]
  dqdci = -k_r * sc[2];
  J[2557] += dqdci; // dwdot[O]/d[NO]
  J[2558] -= dqdci; // dwdot[O2]/d[NO]
  J[2585] -= dqdci; // dwdot[N]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5286] -= dqdT; // dwdot[N]/dT
  J[5291] += dqdT; // dwdot[NO]/dT

  // reaction 179: N + OH <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[30];
  k_f = 33600000 * exp(-(193.738416334817) * invT);
  dlnkfdT = (193.738416334817) * invT2;
  // reverse
  phi_r = sc[1] * sc[35];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[30] - g_RT[35]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[30]) + (h_RT[1] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[30] -= q; // N
  wdot[35] += q; // NO
  // d()/d[H]
  dqdci = -k_r * sc[35];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[103] -= dqdci; // dwdot[N]/d[H]
  J[108] += dqdci; // dwdot[NO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[30];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[322] -= dqdci; // dwdot[N]/d[OH]
  J[327] += dqdci; // dwdot[NO]/d[OH]
  // d()/d[N]
  dqdci = +k_f * sc[4];
  J[2191] += dqdci; // dwdot[H]/d[N]
  J[2194] -= dqdci; // dwdot[OH]/d[N]
  J[2220] -= dqdci; // dwdot[N]/d[N]
  J[2225] += dqdci; // dwdot[NO]/d[N]
  // d()/d[NO]
  dqdci = -k_r * sc[1];
  J[2556] += dqdci; // dwdot[H]/d[NO]
  J[2559] -= dqdci; // dwdot[OH]/d[NO]
  J[2585] -= dqdci; // dwdot[N]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5286] -= dqdT; // dwdot[N]/dT
  J[5291] += dqdT; // dwdot[NO]/dT

  // reaction 180: N2O + O <=> N2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[37];
  k_f = 1400000 * exp(-(5439.77215734902) * invT);
  dlnkfdT = (5439.77215734902) * invT2;
  // reverse
  phi_r = sc[3] * sc[47];
  Kc = exp(g_RT[2] - g_RT[3] + g_RT[37] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[37]) + (h_RT[3] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // O2
  wdot[37] -= q; // N2O
  wdot[47] += q; // N2
  // d()/d[O]
  dqdci = +k_f * sc[37];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[149] += dqdci; // dwdot[O2]/d[O]
  J[183] -= dqdci; // dwdot[N2O]/d[O]
  J[193] += dqdci; // dwdot[N2]/d[O]
  // d()/d[O2]
  dqdci = -k_r * sc[47];
  J[221] -= dqdci; // dwdot[O]/d[O2]
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[256] -= dqdci; // dwdot[N2O]/d[O2]
  J[266] += dqdci; // dwdot[N2]/d[O2]
  // d()/d[N2O]
  dqdci = +k_f * sc[2];
  J[2703] -= dqdci; // dwdot[O]/d[N2O]
  J[2704] += dqdci; // dwdot[O2]/d[N2O]
  J[2738] -= dqdci; // dwdot[N2O]/d[N2O]
  J[2748] += dqdci; // dwdot[N2]/d[N2O]
  // d()/d[N2]
  dqdci = -k_r * sc[3];
  J[3433] -= dqdci; // dwdot[O]/d[N2]
  J[3434] += dqdci; // dwdot[O2]/d[N2]
  J[3468] -= dqdci; // dwdot[N2O]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5293] -= dqdT; // dwdot[N2O]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 181: N2O + O <=> 2 NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[37];
  k_f = 29000000 * exp(-(11649.4658133793) * invT);
  dlnkfdT = (11649.4658133793) * invT2;
  // reverse
  phi_r = (sc[35] * sc[35]);
  Kc = exp(g_RT[2] - 2.000000 * g_RT[35] + g_RT[37]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[37]) + (2.000000 * h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;      // O
  wdot[35] += 2 * q; // NO
  wdot[37] -= q;     // N2O
  // d()/d[O]
  dqdci = +k_f * sc[37];
  J[148] -= dqdci;     // dwdot[O]/d[O]
  J[181] += 2 * dqdci; // dwdot[NO]/d[O]
  J[183] -= dqdci;     // dwdot[N2O]/d[O]
  // d()/d[NO]
  dqdci = -k_r * 2.000000 * sc[35];
  J[2557] -= dqdci;     // dwdot[O]/d[NO]
  J[2590] += 2 * dqdci; // dwdot[NO]/d[NO]
  J[2592] -= dqdci;     // dwdot[N2O]/d[NO]
  // d()/d[N2O]
  dqdci = +k_f * sc[2];
  J[2703] -= dqdci;     // dwdot[O]/d[N2O]
  J[2736] += 2 * dqdci; // dwdot[NO]/d[N2O]
  J[2738] -= dqdci;     // dwdot[N2O]/d[N2O]
  // d()/dT
  J[5258] -= dqdT;     // dwdot[O]/dT
  J[5291] += 2 * dqdT; // dwdot[NO]/dT
  J[5293] -= dqdT;     // dwdot[N2O]/dT

  // reaction 182: H + N2O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[37];
  k_f = 387000000 * exp(-(9500.73065039311) * invT);
  dlnkfdT = (9500.73065039311) * invT2;
  // reverse
  phi_r = sc[4] * sc[47];
  Kc = exp(g_RT[1] - g_RT[4] + g_RT[37] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[37]) + (h_RT[4] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[37] -= q; // N2O
  wdot[47] += q; // N2
  // d()/d[H]
  dqdci = +k_f * sc[37];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[77] += dqdci;  // dwdot[OH]/d[H]
  J[110] -= dqdci; // dwdot[N2O]/d[H]
  J[120] += dqdci; // dwdot[N2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[47];
  J[293] -= dqdci; // dwdot[H]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[329] -= dqdci; // dwdot[N2O]/d[OH]
  J[339] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[N2O]
  dqdci = +k_f * sc[1];
  J[2702] -= dqdci; // dwdot[H]/d[N2O]
  J[2705] += dqdci; // dwdot[OH]/d[N2O]
  J[2738] -= dqdci; // dwdot[N2O]/d[N2O]
  J[2748] += dqdci; // dwdot[N2]/d[N2O]
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[3432] -= dqdci; // dwdot[H]/d[N2]
  J[3435] += dqdci; // dwdot[OH]/d[N2]
  J[3468] -= dqdci; // dwdot[N2O]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5293] -= dqdT; // dwdot[N2O]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 183: N2O + OH <=> HO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[37];
  k_f = 2000000 * exp(-(10597.7429818474) * invT);
  dlnkfdT = (10597.7429818474) * invT2;
  // reverse
  phi_r = sc[6] * sc[47];
  Kc = exp(g_RT[4] - g_RT[6] + g_RT[37] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[37]) + (h_RT[6] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[6] += q;  // HO2
  wdot[37] -= q; // N2O
  wdot[47] += q; // N2
  // d()/d[OH]
  dqdci = +k_f * sc[37];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[298] += dqdci; // dwdot[HO2]/d[OH]
  J[329] -= dqdci; // dwdot[N2O]/d[OH]
  J[339] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[47];
  J[442] -= dqdci; // dwdot[OH]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[475] -= dqdci; // dwdot[N2O]/d[HO2]
  J[485] += dqdci; // dwdot[N2]/d[HO2]
  // d()/d[N2O]
  dqdci = +k_f * sc[4];
  J[2705] -= dqdci; // dwdot[OH]/d[N2O]
  J[2707] += dqdci; // dwdot[HO2]/d[N2O]
  J[2738] -= dqdci; // dwdot[N2O]/d[N2O]
  J[2748] += dqdci; // dwdot[N2]/d[N2O]
  // d()/d[N2]
  dqdci = -k_r * sc[6];
  J[3435] -= dqdci; // dwdot[OH]/d[N2]
  J[3437] += dqdci; // dwdot[HO2]/d[N2]
  J[3468] -= dqdci; // dwdot[N2O]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5293] -= dqdT; // dwdot[N2O]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 185: HO2 + NO <=> NO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[35];
  k_f = 2110000 * exp(-(-241.543999586265) * invT);
  dlnkfdT = (-241.543999586265) * invT2;
  // reverse
  phi_r = sc[4] * sc[36];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[35] - g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[35]) + (h_RT[4] + h_RT[36]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[35] -= q; // NO
  wdot[36] += q; // NO2
  // d()/d[OH]
  dqdci = -k_r * sc[36];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[298] -= dqdci; // dwdot[HO2]/d[OH]
  J[327] -= dqdci; // dwdot[NO]/d[OH]
  J[328] += dqdci; // dwdot[NO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[35];
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[473] -= dqdci; // dwdot[NO]/d[HO2]
  J[474] += dqdci; // dwdot[NO2]/d[HO2]
  // d()/d[NO]
  dqdci = +k_f * sc[6];
  J[2559] += dqdci; // dwdot[OH]/d[NO]
  J[2561] -= dqdci; // dwdot[HO2]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2591] += dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = -k_r * sc[4];
  J[2632] += dqdci; // dwdot[OH]/d[NO2]
  J[2634] -= dqdci; // dwdot[HO2]/d[NO2]
  J[2663] -= dqdci; // dwdot[NO]/d[NO2]
  J[2664] += dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5292] += dqdT; // dwdot[NO2]/dT

  // reaction 187: NO2 + O <=> NO + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[36];
  k_f = 3900000 * exp(-(-120.771999793133) * invT);
  dlnkfdT = (-120.771999793133) * invT2;
  // reverse
  phi_r = sc[3] * sc[35];
  Kc = exp(g_RT[2] - g_RT[3] - g_RT[35] + g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[36]) + (h_RT[3] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[3] += q;  // O2
  wdot[35] += q; // NO
  wdot[36] -= q; // NO2
  // d()/d[O]
  dqdci = +k_f * sc[36];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[149] += dqdci; // dwdot[O2]/d[O]
  J[181] += dqdci; // dwdot[NO]/d[O]
  J[182] -= dqdci; // dwdot[NO2]/d[O]
  // d()/d[O2]
  dqdci = -k_r * sc[35];
  J[221] -= dqdci; // dwdot[O]/d[O2]
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[254] += dqdci; // dwdot[NO]/d[O2]
  J[255] -= dqdci; // dwdot[NO2]/d[O2]
  // d()/d[NO]
  dqdci = -k_r * sc[3];
  J[2557] -= dqdci; // dwdot[O]/d[NO]
  J[2558] += dqdci; // dwdot[O2]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2591] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[2];
  J[2630] -= dqdci; // dwdot[O]/d[NO2]
  J[2631] += dqdci; // dwdot[O2]/d[NO2]
  J[2663] += dqdci; // dwdot[NO]/d[NO2]
  J[2664] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5292] -= dqdT; // dwdot[NO2]/dT

  // reaction 188: H + NO2 <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[36];
  k_f = 132000000 * exp(-(181.157999689699) * invT);
  dlnkfdT = (181.157999689699) * invT2;
  // reverse
  phi_r = sc[4] * sc[35];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[35] + g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[36]) + (h_RT[4] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[35] += q; // NO
  wdot[36] -= q; // NO2
  // d()/d[H]
  dqdci = +k_f * sc[36];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[77] += dqdci;  // dwdot[OH]/d[H]
  J[108] += dqdci; // dwdot[NO]/d[H]
  J[109] -= dqdci; // dwdot[NO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[35];
  J[293] -= dqdci; // dwdot[H]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[327] += dqdci; // dwdot[NO]/d[OH]
  J[328] -= dqdci; // dwdot[NO2]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[2556] -= dqdci; // dwdot[H]/d[NO]
  J[2559] += dqdci; // dwdot[OH]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2591] -= dqdci; // dwdot[NO2]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[1];
  J[2629] -= dqdci; // dwdot[H]/d[NO2]
  J[2632] += dqdci; // dwdot[OH]/d[NO2]
  J[2663] += dqdci; // dwdot[NO]/d[NO2]
  J[2664] -= dqdci; // dwdot[NO2]/d[NO2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5292] -= dqdT; // dwdot[NO2]/dT

  // reaction 189: NH + O <=> H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[31];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[35];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[31] - g_RT[35]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[31]) + (h_RT[1] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[31] -= q; // NH
  wdot[35] += q; // NO
  // d()/d[H]
  dqdci = -k_r * sc[35];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[75] -= dqdci;  // dwdot[O]/d[H]
  J[104] -= dqdci; // dwdot[NH]/d[H]
  J[108] += dqdci; // dwdot[NO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[31];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[177] -= dqdci; // dwdot[NH]/d[O]
  J[181] += dqdci; // dwdot[NO]/d[O]
  // d()/d[NH]
  dqdci = +k_f * sc[2];
  J[2264] += dqdci; // dwdot[H]/d[NH]
  J[2265] -= dqdci; // dwdot[O]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  J[2298] += dqdci; // dwdot[NO]/d[NH]
  // d()/d[NO]
  dqdci = -k_r * sc[1];
  J[2556] += dqdci; // dwdot[H]/d[NO]
  J[2557] -= dqdci; // dwdot[O]/d[NO]
  J[2586] -= dqdci; // dwdot[NH]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT
  J[5291] += dqdT; // dwdot[NO]/dT

  // reaction 190: H + NH <=> H2 + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[31];
  k_f = 32000000 * exp(-(166.061499715557) * invT);
  dlnkfdT = (166.061499715557) * invT2;
  // reverse
  phi_r = sc[0] * sc[30];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[30] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[31]) + (h_RT[0] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[30] += q; // N
  wdot[31] -= q; // NH
  // d()/d[H2]
  dqdci = -k_r * sc[30];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[30] += dqdci; // dwdot[N]/d[H2]
  J[31] -= dqdci; // dwdot[NH]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[31];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[103] += dqdci; // dwdot[N]/d[H]
  J[104] -= dqdci; // dwdot[NH]/d[H]
  // d()/d[N]
  dqdci = -k_r * sc[0];
  J[2190] += dqdci; // dwdot[H2]/d[N]
  J[2191] -= dqdci; // dwdot[H]/d[N]
  J[2220] += dqdci; // dwdot[N]/d[N]
  J[2221] -= dqdci; // dwdot[NH]/d[N]
  // d()/d[NH]
  dqdci = +k_f * sc[1];
  J[2263] += dqdci; // dwdot[H2]/d[NH]
  J[2264] -= dqdci; // dwdot[H]/d[NH]
  J[2293] += dqdci; // dwdot[N]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5286] += dqdT; // dwdot[N]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT

  // reaction 191: NH + OH <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[31];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[38];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[31] - g_RT[38]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[31]) + (h_RT[1] + h_RT[38]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[31] -= q; // NH
  wdot[38] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[38];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[104] -= dqdci; // dwdot[NH]/d[H]
  J[111] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[31];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[323] -= dqdci; // dwdot[NH]/d[OH]
  J[330] += dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[4];
  J[2264] += dqdci; // dwdot[H]/d[NH]
  J[2267] -= dqdci; // dwdot[OH]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  J[2301] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[1];
  J[2775] += dqdci; // dwdot[H]/d[HNO]
  J[2778] -= dqdci; // dwdot[OH]/d[HNO]
  J[2805] -= dqdci; // dwdot[NH]/d[HNO]
  J[2812] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT
  J[5294] += dqdT; // dwdot[HNO]/dT

  // reaction 192: NH + OH <=> H2O + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[31];
  k_f = 2000 * exp(1.2 * logT);
  dlnkfdT = 1.2 * invT;
  // reverse
  phi_r = sc[5] * sc[30];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[30] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[31]) + (h_RT[5] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[30] += q; // N
  wdot[31] -= q; // NH
  // d()/d[OH]
  dqdci = +k_f * sc[31];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[322] += dqdci; // dwdot[N]/d[OH]
  J[323] -= dqdci; // dwdot[NH]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[30];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[395] += dqdci; // dwdot[N]/d[H2O]
  J[396] -= dqdci; // dwdot[NH]/d[H2O]
  // d()/d[N]
  dqdci = -k_r * sc[5];
  J[2194] -= dqdci; // dwdot[OH]/d[N]
  J[2195] += dqdci; // dwdot[H2O]/d[N]
  J[2220] += dqdci; // dwdot[N]/d[N]
  J[2221] -= dqdci; // dwdot[NH]/d[N]
  // d()/d[NH]
  dqdci = +k_f * sc[4];
  J[2267] -= dqdci; // dwdot[OH]/d[NH]
  J[2268] += dqdci; // dwdot[H2O]/d[NH]
  J[2293] += dqdci; // dwdot[N]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5286] += dqdT; // dwdot[N]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT

  // reaction 193: NH + O2 <=> HNO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[31];
  k_f = 0.461 * exp(2 * logT - (3270.90832773068) * invT);
  dlnkfdT = 2 * invT + (3270.90832773068) * invT2;
  // reverse
  phi_r = sc[2] * sc[38];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[31] - g_RT[38]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[31]) + (h_RT[2] + h_RT[38]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[31] -= q; // NH
  wdot[38] += q; // HNO
  // d()/d[O]
  dqdci = -k_r * sc[38];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[177] -= dqdci; // dwdot[NH]/d[O]
  J[184] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[31];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[250] -= dqdci; // dwdot[NH]/d[O2]
  J[257] += dqdci; // dwdot[HNO]/d[O2]
  // d()/d[NH]
  dqdci = +k_f * sc[3];
  J[2265] += dqdci; // dwdot[O]/d[NH]
  J[2266] -= dqdci; // dwdot[O2]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  J[2301] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[2];
  J[2776] += dqdci; // dwdot[O]/d[HNO]
  J[2777] -= dqdci; // dwdot[O2]/d[HNO]
  J[2805] -= dqdci; // dwdot[NH]/d[HNO]
  J[2812] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT
  J[5294] += dqdT; // dwdot[HNO]/dT

  // reaction 194: NH + O2 <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[31];
  k_f = 1.28 * exp(1.5 * logT - (50.321666580472) * invT);
  dlnkfdT = 1.5 * invT + (50.321666580472) * invT2;
  // reverse
  phi_r = sc[4] * sc[35];
  Kc = exp(g_RT[3] - g_RT[4] + g_RT[31] - g_RT[35]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[31]) + (h_RT[4] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // OH
  wdot[31] -= q; // NH
  wdot[35] += q; // NO
  // d()/d[O2]
  dqdci = +k_f * sc[31];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[223] += dqdci; // dwdot[OH]/d[O2]
  J[250] -= dqdci; // dwdot[NH]/d[O2]
  J[254] += dqdci; // dwdot[NO]/d[O2]
  // d()/d[OH]
  dqdci = -k_r * sc[35];
  J[295] -= dqdci; // dwdot[O2]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[323] -= dqdci; // dwdot[NH]/d[OH]
  J[327] += dqdci; // dwdot[NO]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[3];
  J[2266] -= dqdci; // dwdot[O2]/d[NH]
  J[2267] += dqdci; // dwdot[OH]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  J[2298] += dqdci; // dwdot[NO]/d[NH]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[2558] -= dqdci; // dwdot[O2]/d[NO]
  J[2559] += dqdci; // dwdot[OH]/d[NO]
  J[2586] -= dqdci; // dwdot[NH]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT
  J[5291] += dqdT; // dwdot[NO]/dT

  // reaction 195: N + NH <=> H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[30] * sc[31];
  k_f = 15000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[47];
  Kc = exp(-g_RT[1] + g_RT[30] + g_RT[31] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[30] + h_RT[31]) + (h_RT[1] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[30] -= q; // N
  wdot[31] -= q; // NH
  wdot[47] += q; // N2
  // d()/d[H]
  dqdci = -k_r * sc[47];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[103] -= dqdci; // dwdot[N]/d[H]
  J[104] -= dqdci; // dwdot[NH]/d[H]
  J[120] += dqdci; // dwdot[N2]/d[H]
  // d()/d[N]
  dqdci = +k_f * sc[31];
  J[2191] += dqdci; // dwdot[H]/d[N]
  J[2220] -= dqdci; // dwdot[N]/d[N]
  J[2221] -= dqdci; // dwdot[NH]/d[N]
  J[2237] += dqdci; // dwdot[N2]/d[N]
  // d()/d[NH]
  dqdci = +k_f * sc[30];
  J[2264] += dqdci; // dwdot[H]/d[NH]
  J[2293] -= dqdci; // dwdot[N]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  J[2310] += dqdci; // dwdot[N2]/d[NH]
  // d()/d[N2]
  dqdci = -k_r * sc[1];
  J[3432] += dqdci; // dwdot[H]/d[N2]
  J[3461] -= dqdci; // dwdot[N]/d[N2]
  J[3462] -= dqdci; // dwdot[NH]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5286] -= dqdT; // dwdot[N]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 196: H2O + NH <=> H2 + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[31];
  k_f = 20000000 * exp(-(6969.55082139537) * invT);
  dlnkfdT = (6969.55082139537) * invT2;
  // reverse
  phi_r = sc[0] * sc[38];
  Kc = exp(-g_RT[0] + g_RT[5] + g_RT[31] - g_RT[38]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[31]) + (h_RT[0] + h_RT[38]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[5] -= q;  // H2O
  wdot[31] -= q; // NH
  wdot[38] += q; // HNO
  // d()/d[H2]
  dqdci = -k_r * sc[38];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[5] -= dqdci;  // dwdot[H2O]/d[H2]
  J[31] -= dqdci; // dwdot[NH]/d[H2]
  J[38] += dqdci; // dwdot[HNO]/d[H2]
  // d()/d[H2O]
  dqdci = +k_f * sc[31];
  J[365] += dqdci; // dwdot[H2]/d[H2O]
  J[370] -= dqdci; // dwdot[H2O]/d[H2O]
  J[396] -= dqdci; // dwdot[NH]/d[H2O]
  J[403] += dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[NH]
  dqdci = +k_f * sc[5];
  J[2263] += dqdci; // dwdot[H2]/d[NH]
  J[2268] -= dqdci; // dwdot[H2O]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  J[2301] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[0];
  J[2774] += dqdci; // dwdot[H2]/d[HNO]
  J[2779] -= dqdci; // dwdot[H2O]/d[HNO]
  J[2805] -= dqdci; // dwdot[NH]/d[HNO]
  J[2812] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5261] -= dqdT; // dwdot[H2O]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT
  J[5294] += dqdT; // dwdot[HNO]/dT

  // reaction 197: NH + NO <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[31] * sc[35];
  k_f = 21600000 * exp(-0.23 * logT);
  dlnkfdT = -0.23 * invT;
  // reverse
  phi_r = sc[4] * sc[47];
  Kc = exp(-g_RT[4] + g_RT[31] + g_RT[35] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[31] + h_RT[35]) + (h_RT[4] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[31] -= q; // NH
  wdot[35] -= q; // NO
  wdot[47] += q; // N2
  // d()/d[OH]
  dqdci = -k_r * sc[47];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[323] -= dqdci; // dwdot[NH]/d[OH]
  J[327] -= dqdci; // dwdot[NO]/d[OH]
  J[339] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[NH]
  dqdci = +k_f * sc[35];
  J[2267] += dqdci; // dwdot[OH]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  J[2298] -= dqdci; // dwdot[NO]/d[NH]
  J[2310] += dqdci; // dwdot[N2]/d[NH]
  // d()/d[NO]
  dqdci = +k_f * sc[31];
  J[2559] += dqdci; // dwdot[OH]/d[NO]
  J[2586] -= dqdci; // dwdot[NH]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2602] += dqdci; // dwdot[N2]/d[NO]
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[3435] += dqdci; // dwdot[OH]/d[N2]
  J[3462] -= dqdci; // dwdot[NH]/d[N2]
  J[3466] -= dqdci; // dwdot[NO]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 198: NH + NO <=> H + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[31] * sc[35];
  k_f = 365000000 * exp(-0.45 * logT);
  dlnkfdT = -0.45 * invT;
  // reverse
  phi_r = sc[1] * sc[37];
  Kc = exp(-g_RT[1] + g_RT[31] + g_RT[35] - g_RT[37]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[31] + h_RT[35]) + (h_RT[1] + h_RT[37]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[31] -= q; // NH
  wdot[35] -= q; // NO
  wdot[37] += q; // N2O
  // d()/d[H]
  dqdci = -k_r * sc[37];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[104] -= dqdci; // dwdot[NH]/d[H]
  J[108] -= dqdci; // dwdot[NO]/d[H]
  J[110] += dqdci; // dwdot[N2O]/d[H]
  // d()/d[NH]
  dqdci = +k_f * sc[35];
  J[2264] += dqdci; // dwdot[H]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  J[2298] -= dqdci; // dwdot[NO]/d[NH]
  J[2300] += dqdci; // dwdot[N2O]/d[NH]
  // d()/d[NO]
  dqdci = +k_f * sc[31];
  J[2556] += dqdci; // dwdot[H]/d[NO]
  J[2586] -= dqdci; // dwdot[NH]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2592] += dqdci; // dwdot[N2O]/d[NO]
  // d()/d[N2O]
  dqdci = -k_r * sc[1];
  J[2702] += dqdci; // dwdot[H]/d[N2O]
  J[2732] -= dqdci; // dwdot[NH]/d[N2O]
  J[2736] -= dqdci; // dwdot[NO]/d[N2O]
  J[2738] += dqdci; // dwdot[N2O]/d[N2O]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5293] += dqdT; // dwdot[N2O]/dT

  // reaction 199: NH2 + O <=> NH + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[32];
  k_f = 3000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[31];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[31] + g_RT[32]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[32]) + (h_RT[4] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[31] += q; // NH
  wdot[32] -= q; // NH2
  // d()/d[O]
  dqdci = +k_f * sc[32];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[177] += dqdci; // dwdot[NH]/d[O]
  J[178] -= dqdci; // dwdot[NH2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[31];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[323] += dqdci; // dwdot[NH]/d[OH]
  J[324] -= dqdci; // dwdot[NH2]/d[OH]
  // d()/d[NH]
  dqdci = -k_r * sc[4];
  J[2265] -= dqdci; // dwdot[O]/d[NH]
  J[2267] += dqdci; // dwdot[OH]/d[NH]
  J[2294] += dqdci; // dwdot[NH]/d[NH]
  J[2295] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[2];
  J[2338] -= dqdci; // dwdot[O]/d[NH2]
  J[2340] += dqdci; // dwdot[OH]/d[NH2]
  J[2367] += dqdci; // dwdot[NH]/d[NH2]
  J[2368] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5287] += dqdT; // dwdot[NH]/dT
  J[5288] -= dqdT; // dwdot[NH2]/dT

  // reaction 200: NH2 + O <=> H + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[32];
  k_f = 39000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[38];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[32] - g_RT[38]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[32]) + (h_RT[1] + h_RT[38]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[32] -= q; // NH2
  wdot[38] += q; // HNO
  // d()/d[H]
  dqdci = -k_r * sc[38];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[75] -= dqdci;  // dwdot[O]/d[H]
  J[105] -= dqdci; // dwdot[NH2]/d[H]
  J[111] += dqdci; // dwdot[HNO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[32];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[178] -= dqdci; // dwdot[NH2]/d[O]
  J[184] += dqdci; // dwdot[HNO]/d[O]
  // d()/d[NH2]
  dqdci = +k_f * sc[2];
  J[2337] += dqdci; // dwdot[H]/d[NH2]
  J[2338] -= dqdci; // dwdot[O]/d[NH2]
  J[2368] -= dqdci; // dwdot[NH2]/d[NH2]
  J[2374] += dqdci; // dwdot[HNO]/d[NH2]
  // d()/d[HNO]
  dqdci = -k_r * sc[1];
  J[2775] += dqdci; // dwdot[H]/d[HNO]
  J[2776] -= dqdci; // dwdot[O]/d[HNO]
  J[2806] -= dqdci; // dwdot[NH2]/d[HNO]
  J[2812] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5288] -= dqdT; // dwdot[NH2]/dT
  J[5294] += dqdT; // dwdot[HNO]/dT

  // reaction 201: H + NH2 <=> H2 + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[32];
  k_f = 40000000 * exp(-(1836.74083018723) * invT);
  dlnkfdT = (1836.74083018723) * invT2;
  // reverse
  phi_r = sc[0] * sc[31];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[31] + g_RT[32]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[32]) + (h_RT[0] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[31] += q; // NH
  wdot[32] -= q; // NH2
  // d()/d[H2]
  dqdci = -k_r * sc[31];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[31] += dqdci; // dwdot[NH]/d[H2]
  J[32] -= dqdci; // dwdot[NH2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[32];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[104] += dqdci; // dwdot[NH]/d[H]
  J[105] -= dqdci; // dwdot[NH2]/d[H]
  // d()/d[NH]
  dqdci = -k_r * sc[0];
  J[2263] += dqdci; // dwdot[H2]/d[NH]
  J[2264] -= dqdci; // dwdot[H]/d[NH]
  J[2294] += dqdci; // dwdot[NH]/d[NH]
  J[2295] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[1];
  J[2336] += dqdci; // dwdot[H2]/d[NH2]
  J[2337] -= dqdci; // dwdot[H]/d[NH2]
  J[2367] += dqdci; // dwdot[NH]/d[NH2]
  J[2368] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5287] += dqdT; // dwdot[NH]/dT
  J[5288] -= dqdT; // dwdot[NH2]/dT

  // reaction 202: NH2 + OH <=> H2O + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[32];
  k_f = 90 * exp(1.5 * logT - (-231.479666270171) * invT);
  dlnkfdT = 1.5 * invT + (-231.479666270171) * invT2;
  // reverse
  phi_r = sc[5] * sc[31];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[31] + g_RT[32]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[32]) + (h_RT[5] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[31] += q; // NH
  wdot[32] -= q; // NH2
  // d()/d[OH]
  dqdci = +k_f * sc[32];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[323] += dqdci; // dwdot[NH]/d[OH]
  J[324] -= dqdci; // dwdot[NH2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[31];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[396] += dqdci; // dwdot[NH]/d[H2O]
  J[397] -= dqdci; // dwdot[NH2]/d[H2O]
  // d()/d[NH]
  dqdci = -k_r * sc[5];
  J[2267] -= dqdci; // dwdot[OH]/d[NH]
  J[2268] += dqdci; // dwdot[H2O]/d[NH]
  J[2294] += dqdci; // dwdot[NH]/d[NH]
  J[2295] -= dqdci; // dwdot[NH2]/d[NH]
  // d()/d[NH2]
  dqdci = +k_f * sc[4];
  J[2340] -= dqdci; // dwdot[OH]/d[NH2]
  J[2341] += dqdci; // dwdot[H2O]/d[NH2]
  J[2367] += dqdci; // dwdot[NH]/d[NH2]
  J[2368] -= dqdci; // dwdot[NH2]/d[NH2]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5287] += dqdT; // dwdot[NH]/dT
  J[5288] -= dqdT; // dwdot[NH2]/dT

  // reaction 203: NNH <=> H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[34];
  k_f = 330000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[47];
  Kc = refC * exp(-g_RT[1] + g_RT[34] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[34]) + (h_RT[1] + h_RT[47]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[34] -= q; // NNH
  wdot[47] += q; // N2
  // d()/d[H]
  dqdci = -k_r * sc[47];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[107] -= dqdci; // dwdot[NNH]/d[H]
  J[120] += dqdci; // dwdot[N2]/d[H]
  // d()/d[NNH]
  dqdci = +k_f;
  J[2483] += dqdci; // dwdot[H]/d[NNH]
  J[2516] -= dqdci; // dwdot[NNH]/d[NNH]
  J[2529] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[1];
  J[3432] += dqdci; // dwdot[H]/d[N2]
  J[3465] -= dqdci; // dwdot[NNH]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5290] -= dqdT; // dwdot[NNH]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 205: NNH + O2 <=> HO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[34];
  k_f = 5000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[6] * sc[47];
  Kc = exp(g_RT[3] - g_RT[6] + g_RT[34] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[34]) + (h_RT[6] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[34] -= q; // NNH
  wdot[47] += q; // N2
  // d()/d[O2]
  dqdci = +k_f * sc[34];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  J[253] -= dqdci; // dwdot[NNH]/d[O2]
  J[266] += dqdci; // dwdot[N2]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[47];
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[472] -= dqdci; // dwdot[NNH]/d[HO2]
  J[485] += dqdci; // dwdot[N2]/d[HO2]
  // d()/d[NNH]
  dqdci = +k_f * sc[3];
  J[2485] -= dqdci; // dwdot[O2]/d[NNH]
  J[2488] += dqdci; // dwdot[HO2]/d[NNH]
  J[2516] -= dqdci; // dwdot[NNH]/d[NNH]
  J[2529] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[6];
  J[3434] -= dqdci; // dwdot[O2]/d[N2]
  J[3437] += dqdci; // dwdot[HO2]/d[N2]
  J[3465] -= dqdci; // dwdot[NNH]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5290] -= dqdT; // dwdot[NNH]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 206: NNH + O <=> N2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[34];
  k_f = 25000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[47];
  Kc = exp(g_RT[2] - g_RT[4] + g_RT[34] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[34]) + (h_RT[4] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[34] -= q; // NNH
  wdot[47] += q; // N2
  // d()/d[O]
  dqdci = +k_f * sc[34];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[180] -= dqdci; // dwdot[NNH]/d[O]
  J[193] += dqdci; // dwdot[N2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[47];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[326] -= dqdci; // dwdot[NNH]/d[OH]
  J[339] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[NNH]
  dqdci = +k_f * sc[2];
  J[2484] -= dqdci; // dwdot[O]/d[NNH]
  J[2486] += dqdci; // dwdot[OH]/d[NNH]
  J[2516] -= dqdci; // dwdot[NNH]/d[NNH]
  J[2529] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[4];
  J[3433] -= dqdci; // dwdot[O]/d[N2]
  J[3435] += dqdci; // dwdot[OH]/d[N2]
  J[3465] -= dqdci; // dwdot[NNH]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5290] -= dqdT; // dwdot[NNH]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 207: NNH + O <=> NH + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[34];
  k_f = 70000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[31] * sc[35];
  Kc = exp(g_RT[2] - g_RT[31] + g_RT[34] - g_RT[35]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[34]) + (h_RT[31] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[31] += q; // NH
  wdot[34] -= q; // NNH
  wdot[35] += q; // NO
  // d()/d[O]
  dqdci = +k_f * sc[34];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[177] += dqdci; // dwdot[NH]/d[O]
  J[180] -= dqdci; // dwdot[NNH]/d[O]
  J[181] += dqdci; // dwdot[NO]/d[O]
  // d()/d[NH]
  dqdci = -k_r * sc[35];
  J[2265] -= dqdci; // dwdot[O]/d[NH]
  J[2294] += dqdci; // dwdot[NH]/d[NH]
  J[2297] -= dqdci; // dwdot[NNH]/d[NH]
  J[2298] += dqdci; // dwdot[NO]/d[NH]
  // d()/d[NNH]
  dqdci = +k_f * sc[2];
  J[2484] -= dqdci; // dwdot[O]/d[NNH]
  J[2513] += dqdci; // dwdot[NH]/d[NNH]
  J[2516] -= dqdci; // dwdot[NNH]/d[NNH]
  J[2517] += dqdci; // dwdot[NO]/d[NNH]
  // d()/d[NO]
  dqdci = -k_r * sc[31];
  J[2557] -= dqdci; // dwdot[O]/d[NO]
  J[2586] += dqdci; // dwdot[NH]/d[NO]
  J[2589] -= dqdci; // dwdot[NNH]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5287] += dqdT; // dwdot[NH]/dT
  J[5290] -= dqdT; // dwdot[NNH]/dT
  J[5291] += dqdT; // dwdot[NO]/dT

  // reaction 208: H + NNH <=> H2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[34];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[47];
  Kc = exp(-g_RT[0] + g_RT[1] + g_RT[34] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[34]) + (h_RT[0] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[34] -= q; // NNH
  wdot[47] += q; // N2
  // d()/d[H2]
  dqdci = -k_r * sc[47];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[34] -= dqdci; // dwdot[NNH]/d[H2]
  J[47] += dqdci; // dwdot[N2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[34];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[107] -= dqdci; // dwdot[NNH]/d[H]
  J[120] += dqdci; // dwdot[N2]/d[H]
  // d()/d[NNH]
  dqdci = +k_f * sc[1];
  J[2482] += dqdci; // dwdot[H2]/d[NNH]
  J[2483] -= dqdci; // dwdot[H]/d[NNH]
  J[2516] -= dqdci; // dwdot[NNH]/d[NNH]
  J[2529] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[0];
  J[3431] += dqdci; // dwdot[H2]/d[N2]
  J[3432] -= dqdci; // dwdot[H]/d[N2]
  J[3465] -= dqdci; // dwdot[NNH]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5290] -= dqdT; // dwdot[NNH]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 209: NNH + OH <=> H2O + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[34];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[47];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[34] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[34]) + (h_RT[5] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[34] -= q; // NNH
  wdot[47] += q; // N2
  // d()/d[OH]
  dqdci = +k_f * sc[34];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[326] -= dqdci; // dwdot[NNH]/d[OH]
  J[339] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[47];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[399] -= dqdci; // dwdot[NNH]/d[H2O]
  J[412] += dqdci; // dwdot[N2]/d[H2O]
  // d()/d[NNH]
  dqdci = +k_f * sc[4];
  J[2486] -= dqdci; // dwdot[OH]/d[NNH]
  J[2487] += dqdci; // dwdot[H2O]/d[NNH]
  J[2516] -= dqdci; // dwdot[NNH]/d[NNH]
  J[2529] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[5];
  J[3435] -= dqdci; // dwdot[OH]/d[N2]
  J[3436] += dqdci; // dwdot[H2O]/d[N2]
  J[3465] -= dqdci; // dwdot[NNH]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5290] -= dqdT; // dwdot[NNH]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 210: CH3 + NNH <=> CH4 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[34];
  k_f = 25000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[13] * sc[47];
  Kc = exp(g_RT[12] - g_RT[13] + g_RT[34] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[34]) + (h_RT[13] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[34] -= q; // NNH
  wdot[47] += q; // N2
  // d()/d[CH3]
  dqdci = +k_f * sc[34];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[910] -= dqdci; // dwdot[NNH]/d[CH3]
  J[923] += dqdci; // dwdot[N2]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[47];
  J[961] -= dqdci; // dwdot[CH3]/d[CH4]
  J[962] += dqdci; // dwdot[CH4]/d[CH4]
  J[983] -= dqdci; // dwdot[NNH]/d[CH4]
  J[996] += dqdci; // dwdot[N2]/d[CH4]
  // d()/d[NNH]
  dqdci = +k_f * sc[12];
  J[2494] -= dqdci; // dwdot[CH3]/d[NNH]
  J[2495] += dqdci; // dwdot[CH4]/d[NNH]
  J[2516] -= dqdci; // dwdot[NNH]/d[NNH]
  J[2529] += dqdci; // dwdot[N2]/d[NNH]
  // d()/d[N2]
  dqdci = -k_r * sc[13];
  J[3443] -= dqdci; // dwdot[CH3]/d[N2]
  J[3444] += dqdci; // dwdot[CH4]/d[N2]
  J[3465] -= dqdci; // dwdot[NNH]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5290] -= dqdT; // dwdot[NNH]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 212: HNO + O <=> NO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[38];
  k_f = 25000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[35];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[35] + g_RT[38]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[38]) + (h_RT[4] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[35] += q; // NO
  wdot[38] -= q; // HNO
  // d()/d[O]
  dqdci = +k_f * sc[38];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[181] += dqdci; // dwdot[NO]/d[O]
  J[184] -= dqdci; // dwdot[HNO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[35];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[327] += dqdci; // dwdot[NO]/d[OH]
  J[330] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[NO]
  dqdci = -k_r * sc[4];
  J[2557] -= dqdci; // dwdot[O]/d[NO]
  J[2559] += dqdci; // dwdot[OH]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2593] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[2];
  J[2776] -= dqdci; // dwdot[O]/d[HNO]
  J[2778] += dqdci; // dwdot[OH]/d[HNO]
  J[2809] += dqdci; // dwdot[NO]/d[HNO]
  J[2812] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5294] -= dqdT; // dwdot[HNO]/dT

  // reaction 213: H + HNO <=> H2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[38];
  k_f = 900000 * exp(0.72 * logT - (332.122999431115) * invT);
  dlnkfdT = 0.72 * invT + (332.122999431115) * invT2;
  // reverse
  phi_r = sc[0] * sc[35];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[35] + g_RT[38]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[38]) + (h_RT[0] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[35] += q; // NO
  wdot[38] -= q; // HNO
  // d()/d[H2]
  dqdci = -k_r * sc[35];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[35] += dqdci; // dwdot[NO]/d[H2]
  J[38] -= dqdci; // dwdot[HNO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[38];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[108] += dqdci; // dwdot[NO]/d[H]
  J[111] -= dqdci; // dwdot[HNO]/d[H]
  // d()/d[NO]
  dqdci = -k_r * sc[0];
  J[2555] += dqdci; // dwdot[H2]/d[NO]
  J[2556] -= dqdci; // dwdot[H]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2593] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[1];
  J[2774] += dqdci; // dwdot[H2]/d[HNO]
  J[2775] -= dqdci; // dwdot[H]/d[HNO]
  J[2809] += dqdci; // dwdot[NO]/d[HNO]
  J[2812] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5294] -= dqdT; // dwdot[HNO]/dT

  // reaction 214: HNO + OH <=> H2O + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[38];
  k_f = 13 * exp(1.9 * logT - (-478.055832514484) * invT);
  dlnkfdT = 1.9 * invT + (-478.055832514484) * invT2;
  // reverse
  phi_r = sc[5] * sc[35];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[35] + g_RT[38]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[38]) + (h_RT[5] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[35] += q; // NO
  wdot[38] -= q; // HNO
  // d()/d[OH]
  dqdci = +k_f * sc[38];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[327] += dqdci; // dwdot[NO]/d[OH]
  J[330] -= dqdci; // dwdot[HNO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[35];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[400] += dqdci; // dwdot[NO]/d[H2O]
  J[403] -= dqdci; // dwdot[HNO]/d[H2O]
  // d()/d[NO]
  dqdci = -k_r * sc[5];
  J[2559] -= dqdci; // dwdot[OH]/d[NO]
  J[2560] += dqdci; // dwdot[H2O]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2593] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[4];
  J[2778] -= dqdci; // dwdot[OH]/d[HNO]
  J[2779] += dqdci; // dwdot[H2O]/d[HNO]
  J[2809] += dqdci; // dwdot[NO]/d[HNO]
  J[2812] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5294] -= dqdT; // dwdot[HNO]/dT

  // reaction 215: HNO + O2 <=> HO2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[38];
  k_f = 10000000 * exp(-(6541.81665546136) * invT);
  dlnkfdT = (6541.81665546136) * invT2;
  // reverse
  phi_r = sc[6] * sc[35];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[35] + g_RT[38]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[38]) + (h_RT[6] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[35] += q; // NO
  wdot[38] -= q; // HNO
  // d()/d[O2]
  dqdci = +k_f * sc[38];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  J[254] += dqdci; // dwdot[NO]/d[O2]
  J[257] -= dqdci; // dwdot[HNO]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[35];
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[473] += dqdci; // dwdot[NO]/d[HO2]
  J[476] -= dqdci; // dwdot[HNO]/d[HO2]
  // d()/d[NO]
  dqdci = -k_r * sc[6];
  J[2558] -= dqdci; // dwdot[O2]/d[NO]
  J[2561] += dqdci; // dwdot[HO2]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2593] -= dqdci; // dwdot[HNO]/d[NO]
  // d()/d[HNO]
  dqdci = +k_f * sc[3];
  J[2777] -= dqdci; // dwdot[O2]/d[HNO]
  J[2780] += dqdci; // dwdot[HO2]/d[HNO]
  J[2809] += dqdci; // dwdot[NO]/d[HNO]
  J[2812] -= dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5294] -= dqdT; // dwdot[HNO]/dT

  // reaction 216: CN + O <=> CO + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[39];
  k_f = 77000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[30];
  Kc = exp(g_RT[2] - g_RT[14] - g_RT[30] + g_RT[39]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[39]) + (h_RT[14] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[14] += q; // CO
  wdot[30] += q; // N
  wdot[39] -= q; // CN
  // d()/d[O]
  dqdci = +k_f * sc[39];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[176] += dqdci; // dwdot[N]/d[O]
  J[185] -= dqdci; // dwdot[CN]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc[30];
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1052] += dqdci; // dwdot[N]/d[CO]
  J[1061] -= dqdci; // dwdot[CN]/d[CO]
  // d()/d[N]
  dqdci = -k_r * sc[14];
  J[2192] -= dqdci; // dwdot[O]/d[N]
  J[2204] += dqdci; // dwdot[CO]/d[N]
  J[2220] += dqdci; // dwdot[N]/d[N]
  J[2229] -= dqdci; // dwdot[CN]/d[N]
  // d()/d[CN]
  dqdci = +k_f * sc[2];
  J[2849] -= dqdci; // dwdot[O]/d[CN]
  J[2861] += dqdci; // dwdot[CO]/d[CN]
  J[2877] += dqdci; // dwdot[N]/d[CN]
  J[2886] -= dqdci; // dwdot[CN]/d[CN]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5286] += dqdT; // dwdot[N]/dT
  J[5295] -= dqdT; // dwdot[CN]/dT

  // reaction 217: CN + OH <=> H + NCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[39];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[46];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[39] - g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[39]) + (h_RT[1] + h_RT[46]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[39] -= q; // CN
  wdot[46] += q; // NCO
  // d()/d[H]
  dqdci = -k_r * sc[46];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[112] -= dqdci; // dwdot[CN]/d[H]
  J[119] += dqdci; // dwdot[NCO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[39];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[331] -= dqdci; // dwdot[CN]/d[OH]
  J[338] += dqdci; // dwdot[NCO]/d[OH]
  // d()/d[CN]
  dqdci = +k_f * sc[4];
  J[2848] += dqdci; // dwdot[H]/d[CN]
  J[2851] -= dqdci; // dwdot[OH]/d[CN]
  J[2886] -= dqdci; // dwdot[CN]/d[CN]
  J[2893] += dqdci; // dwdot[NCO]/d[CN]
  // d()/d[NCO]
  dqdci = -k_r * sc[1];
  J[3359] += dqdci; // dwdot[H]/d[NCO]
  J[3362] -= dqdci; // dwdot[OH]/d[NCO]
  J[3397] -= dqdci; // dwdot[CN]/d[NCO]
  J[3404] += dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5295] -= dqdT; // dwdot[CN]/dT
  J[5302] += dqdT; // dwdot[NCO]/dT

  // reaction 218: CN + H2O <=> HCN + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[39];
  k_f = 8000000 * exp(-(3753.99632690321) * invT);
  dlnkfdT = (3753.99632690321) * invT2;
  // reverse
  phi_r = sc[4] * sc[40];
  Kc = exp(-g_RT[4] + g_RT[5] + g_RT[39] - g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[39]) + (h_RT[4] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[5] -= q;  // H2O
  wdot[39] -= q; // CN
  wdot[40] += q; // HCN
  // d()/d[OH]
  dqdci = -k_r * sc[40];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[297] -= dqdci; // dwdot[H2O]/d[OH]
  J[331] -= dqdci; // dwdot[CN]/d[OH]
  J[332] += dqdci; // dwdot[HCN]/d[OH]
  // d()/d[H2O]
  dqdci = +k_f * sc[39];
  J[369] += dqdci; // dwdot[OH]/d[H2O]
  J[370] -= dqdci; // dwdot[H2O]/d[H2O]
  J[404] -= dqdci; // dwdot[CN]/d[H2O]
  J[405] += dqdci; // dwdot[HCN]/d[H2O]
  // d()/d[CN]
  dqdci = +k_f * sc[5];
  J[2851] += dqdci; // dwdot[OH]/d[CN]
  J[2852] -= dqdci; // dwdot[H2O]/d[CN]
  J[2886] -= dqdci; // dwdot[CN]/d[CN]
  J[2887] += dqdci; // dwdot[HCN]/d[CN]
  // d()/d[HCN]
  dqdci = -k_r * sc[4];
  J[2924] += dqdci; // dwdot[OH]/d[HCN]
  J[2925] -= dqdci; // dwdot[H2O]/d[HCN]
  J[2959] -= dqdci; // dwdot[CN]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5261] -= dqdT; // dwdot[H2O]/dT
  J[5295] -= dqdT; // dwdot[CN]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT

  // reaction 219: CN + O2 <=> NCO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[39];
  k_f = 6140000 * exp(-(-221.415332954077) * invT);
  dlnkfdT = (-221.415332954077) * invT2;
  // reverse
  phi_r = sc[2] * sc[46];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[39] - g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[39]) + (h_RT[2] + h_RT[46]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[39] -= q; // CN
  wdot[46] += q; // NCO
  // d()/d[O]
  dqdci = -k_r * sc[46];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[185] -= dqdci; // dwdot[CN]/d[O]
  J[192] += dqdci; // dwdot[NCO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[39];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[258] -= dqdci; // dwdot[CN]/d[O2]
  J[265] += dqdci; // dwdot[NCO]/d[O2]
  // d()/d[CN]
  dqdci = +k_f * sc[3];
  J[2849] += dqdci; // dwdot[O]/d[CN]
  J[2850] -= dqdci; // dwdot[O2]/d[CN]
  J[2886] -= dqdci; // dwdot[CN]/d[CN]
  J[2893] += dqdci; // dwdot[NCO]/d[CN]
  // d()/d[NCO]
  dqdci = -k_r * sc[2];
  J[3360] += dqdci; // dwdot[O]/d[NCO]
  J[3361] -= dqdci; // dwdot[O2]/d[NCO]
  J[3397] -= dqdci; // dwdot[CN]/d[NCO]
  J[3404] += dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5295] -= dqdT; // dwdot[CN]/dT
  J[5302] += dqdT; // dwdot[NCO]/dT

  // reaction 220: CN + H2 <=> H + HCN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[39];
  k_f = 0.295 * exp(2.45 * logT - (1127.20533140257) * invT);
  dlnkfdT = 2.45 * invT + (1127.20533140257) * invT2;
  // reverse
  phi_r = sc[1] * sc[40];
  Kc = exp(g_RT[0] - g_RT[1] + g_RT[39] - g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[39]) + (h_RT[1] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[39] -= q; // CN
  wdot[40] += q; // HCN
  // d()/d[H2]
  dqdci = +k_f * sc[39];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[39] -= dqdci; // dwdot[CN]/d[H2]
  J[40] += dqdci; // dwdot[HCN]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[40];
  J[73] -= dqdci;  // dwdot[H2]/d[H]
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[112] -= dqdci; // dwdot[CN]/d[H]
  J[113] += dqdci; // dwdot[HCN]/d[H]
  // d()/d[CN]
  dqdci = +k_f * sc[0];
  J[2847] -= dqdci; // dwdot[H2]/d[CN]
  J[2848] += dqdci; // dwdot[H]/d[CN]
  J[2886] -= dqdci; // dwdot[CN]/d[CN]
  J[2887] += dqdci; // dwdot[HCN]/d[CN]
  // d()/d[HCN]
  dqdci = -k_r * sc[1];
  J[2920] -= dqdci; // dwdot[H2]/d[HCN]
  J[2921] += dqdci; // dwdot[H]/d[HCN]
  J[2959] -= dqdci; // dwdot[CN]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5295] -= dqdT; // dwdot[CN]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT

  // reaction 221: NCO + O <=> CO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[46];
  k_f = 23500000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[35];
  Kc = exp(g_RT[2] - g_RT[14] - g_RT[35] + g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[46]) + (h_RT[14] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[14] += q; // CO
  wdot[35] += q; // NO
  wdot[46] -= q; // NCO
  // d()/d[O]
  dqdci = +k_f * sc[46];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[181] += dqdci; // dwdot[NO]/d[O]
  J[192] -= dqdci; // dwdot[NCO]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc[35];
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1057] += dqdci; // dwdot[NO]/d[CO]
  J[1068] -= dqdci; // dwdot[NCO]/d[CO]
  // d()/d[NO]
  dqdci = -k_r * sc[14];
  J[2557] -= dqdci; // dwdot[O]/d[NO]
  J[2569] += dqdci; // dwdot[CO]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2601] -= dqdci; // dwdot[NCO]/d[NO]
  // d()/d[NCO]
  dqdci = +k_f * sc[2];
  J[3360] -= dqdci; // dwdot[O]/d[NCO]
  J[3372] += dqdci; // dwdot[CO]/d[NCO]
  J[3393] += dqdci; // dwdot[NO]/d[NCO]
  J[3404] -= dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5302] -= dqdT; // dwdot[NCO]/dT

  // reaction 222: H + NCO <=> CO + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[46];
  k_f = 54000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[31];
  Kc = exp(g_RT[1] - g_RT[14] - g_RT[31] + g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[46]) + (h_RT[14] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[14] += q; // CO
  wdot[31] += q; // NH
  wdot[46] -= q; // NCO
  // d()/d[H]
  dqdci = +k_f * sc[46];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[87] += dqdci;  // dwdot[CO]/d[H]
  J[104] += dqdci; // dwdot[NH]/d[H]
  J[119] -= dqdci; // dwdot[NCO]/d[H]
  // d()/d[CO]
  dqdci = -k_r * sc[31];
  J[1023] -= dqdci; // dwdot[H]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1053] += dqdci; // dwdot[NH]/d[CO]
  J[1068] -= dqdci; // dwdot[NCO]/d[CO]
  // d()/d[NH]
  dqdci = -k_r * sc[14];
  J[2264] -= dqdci; // dwdot[H]/d[NH]
  J[2277] += dqdci; // dwdot[CO]/d[NH]
  J[2294] += dqdci; // dwdot[NH]/d[NH]
  J[2309] -= dqdci; // dwdot[NCO]/d[NH]
  // d()/d[NCO]
  dqdci = +k_f * sc[1];
  J[3359] -= dqdci; // dwdot[H]/d[NCO]
  J[3372] += dqdci; // dwdot[CO]/d[NCO]
  J[3389] += dqdci; // dwdot[NH]/d[NCO]
  J[3404] -= dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5287] += dqdT; // dwdot[NH]/dT
  J[5302] -= dqdT; // dwdot[NCO]/dT

  // reaction 223: NCO + OH <=> CO + H + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[46];
  k_f = 2500000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[14] * sc[35];
  Kc = refC * exp(-g_RT[1] + g_RT[4] - g_RT[14] - g_RT[35] + g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[4] + h_RT[46]) + (h_RT[1] + h_RT[14] + h_RT[35]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[14] += q; // CO
  wdot[35] += q; // NO
  wdot[46] -= q; // NCO
  // d()/d[H]
  dqdci = -k_r * sc[14] * sc[35];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[87] += dqdci;  // dwdot[CO]/d[H]
  J[108] += dqdci; // dwdot[NO]/d[H]
  J[119] -= dqdci; // dwdot[NCO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[46];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[306] += dqdci; // dwdot[CO]/d[OH]
  J[327] += dqdci; // dwdot[NO]/d[OH]
  J[338] -= dqdci; // dwdot[NCO]/d[OH]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * sc[35];
  J[1023] += dqdci; // dwdot[H]/d[CO]
  J[1026] -= dqdci; // dwdot[OH]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1057] += dqdci; // dwdot[NO]/d[CO]
  J[1068] -= dqdci; // dwdot[NCO]/d[CO]
  // d()/d[NO]
  dqdci = -k_r * sc[1] * sc[14];
  J[2556] += dqdci; // dwdot[H]/d[NO]
  J[2559] -= dqdci; // dwdot[OH]/d[NO]
  J[2569] += dqdci; // dwdot[CO]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2601] -= dqdci; // dwdot[NCO]/d[NO]
  // d()/d[NCO]
  dqdci = +k_f * sc[4];
  J[3359] += dqdci; // dwdot[H]/d[NCO]
  J[3362] -= dqdci; // dwdot[OH]/d[NCO]
  J[3372] += dqdci; // dwdot[CO]/d[NCO]
  J[3393] += dqdci; // dwdot[NO]/d[NCO]
  J[3404] -= dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5302] -= dqdT; // dwdot[NCO]/dT

  // reaction 224: N + NCO <=> CO + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[30] * sc[46];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[47];
  Kc = exp(-g_RT[14] + g_RT[30] + g_RT[46] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[30] + h_RT[46]) + (h_RT[14] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[30] -= q; // N
  wdot[46] -= q; // NCO
  wdot[47] += q; // N2
  // d()/d[CO]
  dqdci = -k_r * sc[47];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1052] -= dqdci; // dwdot[N]/d[CO]
  J[1068] -= dqdci; // dwdot[NCO]/d[CO]
  J[1069] += dqdci; // dwdot[N2]/d[CO]
  // d()/d[N]
  dqdci = +k_f * sc[46];
  J[2204] += dqdci; // dwdot[CO]/d[N]
  J[2220] -= dqdci; // dwdot[N]/d[N]
  J[2236] -= dqdci; // dwdot[NCO]/d[N]
  J[2237] += dqdci; // dwdot[N2]/d[N]
  // d()/d[NCO]
  dqdci = +k_f * sc[30];
  J[3372] += dqdci; // dwdot[CO]/d[NCO]
  J[3388] -= dqdci; // dwdot[N]/d[NCO]
  J[3404] -= dqdci; // dwdot[NCO]/d[NCO]
  J[3405] += dqdci; // dwdot[N2]/d[NCO]
  // d()/d[N2]
  dqdci = -k_r * sc[14];
  J[3445] += dqdci; // dwdot[CO]/d[N2]
  J[3461] -= dqdci; // dwdot[N]/d[N2]
  J[3477] -= dqdci; // dwdot[NCO]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5286] -= dqdT; // dwdot[N]/dT
  J[5302] -= dqdT; // dwdot[NCO]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 225: NCO + O2 <=> CO2 + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[46];
  k_f = 2000000 * exp(-(10064.3333160944) * invT);
  dlnkfdT = (10064.3333160944) * invT2;
  // reverse
  phi_r = sc[15] * sc[35];
  Kc = exp(g_RT[3] - g_RT[15] - g_RT[35] + g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[46]) + (h_RT[15] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[15] += q; // CO2
  wdot[35] += q; // NO
  wdot[46] -= q; // NCO
  // d()/d[O2]
  dqdci = +k_f * sc[46];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[234] += dqdci; // dwdot[CO2]/d[O2]
  J[254] += dqdci; // dwdot[NO]/d[O2]
  J[265] -= dqdci; // dwdot[NCO]/d[O2]
  // d()/d[CO2]
  dqdci = -k_r * sc[35];
  J[1098] -= dqdci; // dwdot[O2]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  J[1130] += dqdci; // dwdot[NO]/d[CO2]
  J[1141] -= dqdci; // dwdot[NCO]/d[CO2]
  // d()/d[NO]
  dqdci = -k_r * sc[15];
  J[2558] -= dqdci; // dwdot[O2]/d[NO]
  J[2570] += dqdci; // dwdot[CO2]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2601] -= dqdci; // dwdot[NCO]/d[NO]
  // d()/d[NCO]
  dqdci = +k_f * sc[3];
  J[3361] -= dqdci; // dwdot[O2]/d[NCO]
  J[3373] += dqdci; // dwdot[CO2]/d[NCO]
  J[3393] += dqdci; // dwdot[NO]/d[NCO]
  J[3404] -= dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5302] -= dqdT; // dwdot[NCO]/dT

  // reaction 227: NCO + NO <=> CO + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[35] * sc[46];
  k_f = 190000000000 * exp(-1.52 * logT - (372.380332695493) * invT);
  dlnkfdT = -1.52 * invT + (372.380332695493) * invT2;
  // reverse
  phi_r = sc[14] * sc[37];
  Kc = exp(-g_RT[14] + g_RT[35] - g_RT[37] + g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[35] + h_RT[46]) + (h_RT[14] + h_RT[37]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[35] -= q; // NO
  wdot[37] += q; // N2O
  wdot[46] -= q; // NCO
  // d()/d[CO]
  dqdci = -k_r * sc[37];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1057] -= dqdci; // dwdot[NO]/d[CO]
  J[1059] += dqdci; // dwdot[N2O]/d[CO]
  J[1068] -= dqdci; // dwdot[NCO]/d[CO]
  // d()/d[NO]
  dqdci = +k_f * sc[46];
  J[2569] += dqdci; // dwdot[CO]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2592] += dqdci; // dwdot[N2O]/d[NO]
  J[2601] -= dqdci; // dwdot[NCO]/d[NO]
  // d()/d[N2O]
  dqdci = -k_r * sc[14];
  J[2715] += dqdci; // dwdot[CO]/d[N2O]
  J[2736] -= dqdci; // dwdot[NO]/d[N2O]
  J[2738] += dqdci; // dwdot[N2O]/d[N2O]
  J[2747] -= dqdci; // dwdot[NCO]/d[N2O]
  // d()/d[NCO]
  dqdci = +k_f * sc[35];
  J[3372] += dqdci; // dwdot[CO]/d[NCO]
  J[3393] -= dqdci; // dwdot[NO]/d[NCO]
  J[3395] += dqdci; // dwdot[N2O]/d[NCO]
  J[3404] -= dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5293] += dqdT; // dwdot[N2O]/dT
  J[5302] -= dqdT; // dwdot[NCO]/dT

  // reaction 228: NCO + NO <=> CO2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[35] * sc[46];
  k_f = 3800000000000 * exp(-2 * logT - (402.573332643776) * invT);
  dlnkfdT = -2 * invT + (402.573332643776) * invT2;
  // reverse
  phi_r = sc[15] * sc[47];
  Kc = exp(-g_RT[15] + g_RT[35] + g_RT[46] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[35] + h_RT[46]) + (h_RT[15] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] += q; // CO2
  wdot[35] -= q; // NO
  wdot[46] -= q; // NCO
  wdot[47] += q; // N2
  // d()/d[CO2]
  dqdci = -k_r * sc[47];
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  J[1130] -= dqdci; // dwdot[NO]/d[CO2]
  J[1141] -= dqdci; // dwdot[NCO]/d[CO2]
  J[1142] += dqdci; // dwdot[N2]/d[CO2]
  // d()/d[NO]
  dqdci = +k_f * sc[46];
  J[2570] += dqdci; // dwdot[CO2]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2601] -= dqdci; // dwdot[NCO]/d[NO]
  J[2602] += dqdci; // dwdot[N2]/d[NO]
  // d()/d[NCO]
  dqdci = +k_f * sc[35];
  J[3373] += dqdci; // dwdot[CO2]/d[NCO]
  J[3393] -= dqdci; // dwdot[NO]/d[NCO]
  J[3404] -= dqdci; // dwdot[NCO]/d[NCO]
  J[3405] += dqdci; // dwdot[N2]/d[NCO]
  // d()/d[N2]
  dqdci = -k_r * sc[15];
  J[3446] += dqdci; // dwdot[CO2]/d[N2]
  J[3466] -= dqdci; // dwdot[NO]/d[N2]
  J[3477] -= dqdci; // dwdot[NCO]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5302] -= dqdT; // dwdot[NCO]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 230: HCN + O <=> H + NCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[40];
  k_f = 0.0203 * exp(2.64 * logT - (2506.0189957075) * invT);
  dlnkfdT = 2.64 * invT + (2506.0189957075) * invT2;
  // reverse
  phi_r = sc[1] * sc[46];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[40] - g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[40]) + (h_RT[1] + h_RT[46]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[40] -= q; // HCN
  wdot[46] += q; // NCO
  // d()/d[H]
  dqdci = -k_r * sc[46];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[75] -= dqdci;  // dwdot[O]/d[H]
  J[113] -= dqdci; // dwdot[HCN]/d[H]
  J[119] += dqdci; // dwdot[NCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[40];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[186] -= dqdci; // dwdot[HCN]/d[O]
  J[192] += dqdci; // dwdot[NCO]/d[O]
  // d()/d[HCN]
  dqdci = +k_f * sc[2];
  J[2921] += dqdci; // dwdot[H]/d[HCN]
  J[2922] -= dqdci; // dwdot[O]/d[HCN]
  J[2960] -= dqdci; // dwdot[HCN]/d[HCN]
  J[2966] += dqdci; // dwdot[NCO]/d[HCN]
  // d()/d[NCO]
  dqdci = -k_r * sc[1];
  J[3359] += dqdci; // dwdot[H]/d[NCO]
  J[3360] -= dqdci; // dwdot[O]/d[NCO]
  J[3398] -= dqdci; // dwdot[HCN]/d[NCO]
  J[3404] += dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5296] -= dqdT; // dwdot[HCN]/dT
  J[5302] += dqdT; // dwdot[NCO]/dT

  // reaction 231: HCN + O <=> CO + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[40];
  k_f = 0.00507 * exp(2.64 * logT - (2506.0189957075) * invT);
  dlnkfdT = 2.64 * invT + (2506.0189957075) * invT2;
  // reverse
  phi_r = sc[14] * sc[31];
  Kc = exp(g_RT[2] - g_RT[14] - g_RT[31] + g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[40]) + (h_RT[14] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[14] += q; // CO
  wdot[31] += q; // NH
  wdot[40] -= q; // HCN
  // d()/d[O]
  dqdci = +k_f * sc[40];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[177] += dqdci; // dwdot[NH]/d[O]
  J[186] -= dqdci; // dwdot[HCN]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc[31];
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1053] += dqdci; // dwdot[NH]/d[CO]
  J[1062] -= dqdci; // dwdot[HCN]/d[CO]
  // d()/d[NH]
  dqdci = -k_r * sc[14];
  J[2265] -= dqdci; // dwdot[O]/d[NH]
  J[2277] += dqdci; // dwdot[CO]/d[NH]
  J[2294] += dqdci; // dwdot[NH]/d[NH]
  J[2303] -= dqdci; // dwdot[HCN]/d[NH]
  // d()/d[HCN]
  dqdci = +k_f * sc[2];
  J[2922] -= dqdci; // dwdot[O]/d[HCN]
  J[2934] += dqdci; // dwdot[CO]/d[HCN]
  J[2951] += dqdci; // dwdot[NH]/d[HCN]
  J[2960] -= dqdci; // dwdot[HCN]/d[HCN]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5287] += dqdT; // dwdot[NH]/dT
  J[5296] -= dqdT; // dwdot[HCN]/dT

  // reaction 232: HCN + O <=> CN + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[40];
  k_f = 3910 * exp(1.58 * logT - (13385.5633104055) * invT);
  dlnkfdT = 1.58 * invT + (13385.5633104055) * invT2;
  // reverse
  phi_r = sc[4] * sc[39];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[39] + g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[40]) + (h_RT[4] + h_RT[39]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[39] += q; // CN
  wdot[40] -= q; // HCN
  // d()/d[O]
  dqdci = +k_f * sc[40];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[185] += dqdci; // dwdot[CN]/d[O]
  J[186] -= dqdci; // dwdot[HCN]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[39];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[331] += dqdci; // dwdot[CN]/d[OH]
  J[332] -= dqdci; // dwdot[HCN]/d[OH]
  // d()/d[CN]
  dqdci = -k_r * sc[4];
  J[2849] -= dqdci; // dwdot[O]/d[CN]
  J[2851] += dqdci; // dwdot[OH]/d[CN]
  J[2886] += dqdci; // dwdot[CN]/d[CN]
  J[2887] -= dqdci; // dwdot[HCN]/d[CN]
  // d()/d[HCN]
  dqdci = +k_f * sc[2];
  J[2922] -= dqdci; // dwdot[O]/d[HCN]
  J[2924] += dqdci; // dwdot[OH]/d[HCN]
  J[2959] += dqdci; // dwdot[CN]/d[HCN]
  J[2960] -= dqdci; // dwdot[HCN]/d[HCN]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5295] += dqdT; // dwdot[CN]/dT
  J[5296] -= dqdT; // dwdot[HCN]/dT

  // reaction 233: HCN + OH <=> H + HOCN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[40];
  k_f = 1.1 * exp(2.03 * logT - (6728.0068218091) * invT);
  dlnkfdT = 2.03 * invT + (6728.0068218091) * invT2;
  // reverse
  phi_r = sc[1] * sc[44];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[40] - g_RT[44]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[40]) + (h_RT[1] + h_RT[44]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[40] -= q; // HCN
  wdot[44] += q; // HOCN
  // d()/d[H]
  dqdci = -k_r * sc[44];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[113] -= dqdci; // dwdot[HCN]/d[H]
  J[117] += dqdci; // dwdot[HOCN]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[40];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[332] -= dqdci; // dwdot[HCN]/d[OH]
  J[336] += dqdci; // dwdot[HOCN]/d[OH]
  // d()/d[HCN]
  dqdci = +k_f * sc[4];
  J[2921] += dqdci; // dwdot[H]/d[HCN]
  J[2924] -= dqdci; // dwdot[OH]/d[HCN]
  J[2960] -= dqdci; // dwdot[HCN]/d[HCN]
  J[2964] += dqdci; // dwdot[HOCN]/d[HCN]
  // d()/d[HOCN]
  dqdci = -k_r * sc[1];
  J[3213] += dqdci; // dwdot[H]/d[HOCN]
  J[3216] -= dqdci; // dwdot[OH]/d[HOCN]
  J[3252] -= dqdci; // dwdot[HCN]/d[HOCN]
  J[3256] += dqdci; // dwdot[HOCN]/d[HOCN]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5296] -= dqdT; // dwdot[HCN]/dT
  J[5300] += dqdT; // dwdot[HOCN]/dT

  // reaction 234: HCN + OH <=> H + HNCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[40];
  k_f = 0.0044 * exp(2.26 * logT - (3220.58666115021) * invT);
  dlnkfdT = 2.26 * invT + (3220.58666115021) * invT2;
  // reverse
  phi_r = sc[1] * sc[45];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[40] - g_RT[45]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[40]) + (h_RT[1] + h_RT[45]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[40] -= q; // HCN
  wdot[45] += q; // HNCO
  // d()/d[H]
  dqdci = -k_r * sc[45];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[113] -= dqdci; // dwdot[HCN]/d[H]
  J[118] += dqdci; // dwdot[HNCO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[40];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[332] -= dqdci; // dwdot[HCN]/d[OH]
  J[337] += dqdci; // dwdot[HNCO]/d[OH]
  // d()/d[HCN]
  dqdci = +k_f * sc[4];
  J[2921] += dqdci; // dwdot[H]/d[HCN]
  J[2924] -= dqdci; // dwdot[OH]/d[HCN]
  J[2960] -= dqdci; // dwdot[HCN]/d[HCN]
  J[2965] += dqdci; // dwdot[HNCO]/d[HCN]
  // d()/d[HNCO]
  dqdci = -k_r * sc[1];
  J[3286] += dqdci; // dwdot[H]/d[HNCO]
  J[3289] -= dqdci; // dwdot[OH]/d[HNCO]
  J[3325] -= dqdci; // dwdot[HCN]/d[HNCO]
  J[3330] += dqdci; // dwdot[HNCO]/d[HNCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5296] -= dqdT; // dwdot[HCN]/dT
  J[5301] += dqdT; // dwdot[HNCO]/dT

  // reaction 235: HCN + OH <=> CO + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[40];
  k_f = 0.00016 * exp(2.56 * logT - (4528.94999224248) * invT);
  dlnkfdT = 2.56 * invT + (4528.94999224248) * invT2;
  // reverse
  phi_r = sc[14] * sc[32];
  Kc = exp(g_RT[4] - g_RT[14] - g_RT[32] + g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[40]) + (h_RT[14] + h_RT[32]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[14] += q; // CO
  wdot[32] += q; // NH2
  wdot[40] -= q; // HCN
  // d()/d[OH]
  dqdci = +k_f * sc[40];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[306] += dqdci; // dwdot[CO]/d[OH]
  J[324] += dqdci; // dwdot[NH2]/d[OH]
  J[332] -= dqdci; // dwdot[HCN]/d[OH]
  // d()/d[CO]
  dqdci = -k_r * sc[32];
  J[1026] -= dqdci; // dwdot[OH]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1054] += dqdci; // dwdot[NH2]/d[CO]
  J[1062] -= dqdci; // dwdot[HCN]/d[CO]
  // d()/d[NH2]
  dqdci = -k_r * sc[14];
  J[2340] -= dqdci; // dwdot[OH]/d[NH2]
  J[2350] += dqdci; // dwdot[CO]/d[NH2]
  J[2368] += dqdci; // dwdot[NH2]/d[NH2]
  J[2376] -= dqdci; // dwdot[HCN]/d[NH2]
  // d()/d[HCN]
  dqdci = +k_f * sc[4];
  J[2924] -= dqdci; // dwdot[OH]/d[HCN]
  J[2934] += dqdci; // dwdot[CO]/d[HCN]
  J[2952] += dqdci; // dwdot[NH2]/d[HCN]
  J[2960] -= dqdci; // dwdot[HCN]/d[HCN]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5288] += dqdT; // dwdot[NH2]/dT
  J[5296] -= dqdT; // dwdot[HCN]/dT

  // reaction 237: H2CN + N <=> CH2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[30] * sc[41];
  k_f = 60000000 * exp(-(201.286666321888) * invT);
  dlnkfdT = (201.286666321888) * invT2;
  // reverse
  phi_r = sc[10] * sc[47];
  Kc = exp(-g_RT[10] + g_RT[30] + g_RT[41] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[30] + h_RT[41]) + (h_RT[10] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // CH2
  wdot[30] -= q; // N
  wdot[41] -= q; // H2CN
  wdot[47] += q; // N2
  // d()/d[CH2]
  dqdci = -k_r * sc[47];
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  J[760] -= dqdci; // dwdot[N]/d[CH2]
  J[771] -= dqdci; // dwdot[H2CN]/d[CH2]
  J[777] += dqdci; // dwdot[N2]/d[CH2]
  // d()/d[N]
  dqdci = +k_f * sc[41];
  J[2200] += dqdci; // dwdot[CH2]/d[N]
  J[2220] -= dqdci; // dwdot[N]/d[N]
  J[2231] -= dqdci; // dwdot[H2CN]/d[N]
  J[2237] += dqdci; // dwdot[N2]/d[N]
  // d()/d[H2CN]
  dqdci = +k_f * sc[30];
  J[3003] += dqdci; // dwdot[CH2]/d[H2CN]
  J[3023] -= dqdci; // dwdot[N]/d[H2CN]
  J[3034] -= dqdci; // dwdot[H2CN]/d[H2CN]
  J[3040] += dqdci; // dwdot[N2]/d[H2CN]
  // d()/d[N2]
  dqdci = -k_r * sc[10];
  J[3441] += dqdci; // dwdot[CH2]/d[N2]
  J[3461] -= dqdci; // dwdot[N]/d[N2]
  J[3472] -= dqdci; // dwdot[H2CN]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5286] -= dqdT; // dwdot[N]/dT
  J[5297] -= dqdT; // dwdot[H2CN]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 238: C + N2 <=> CN + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[47];
  k_f = 63000000 * exp(-(23158.0309603332) * invT);
  dlnkfdT = (23158.0309603332) * invT2;
  // reverse
  phi_r = sc[30] * sc[39];
  Kc = exp(g_RT[8] - g_RT[30] - g_RT[39] + g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[47]) + (h_RT[30] + h_RT[39]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // C
  wdot[30] += q; // N
  wdot[39] += q; // CN
  wdot[47] -= q; // N2
  // d()/d[C]
  dqdci = +k_f * sc[47];
  J[592] -= dqdci; // dwdot[C]/d[C]
  J[614] += dqdci; // dwdot[N]/d[C]
  J[623] += dqdci; // dwdot[CN]/d[C]
  J[631] -= dqdci; // dwdot[N2]/d[C]
  // d()/d[N]
  dqdci = -k_r * sc[39];
  J[2198] -= dqdci; // dwdot[C]/d[N]
  J[2220] += dqdci; // dwdot[N]/d[N]
  J[2229] += dqdci; // dwdot[CN]/d[N]
  J[2237] -= dqdci; // dwdot[N2]/d[N]
  // d()/d[CN]
  dqdci = -k_r * sc[30];
  J[2855] -= dqdci; // dwdot[C]/d[CN]
  J[2877] += dqdci; // dwdot[N]/d[CN]
  J[2886] += dqdci; // dwdot[CN]/d[CN]
  J[2894] -= dqdci; // dwdot[N2]/d[CN]
  // d()/d[N2]
  dqdci = +k_f * sc[8];
  J[3439] -= dqdci; // dwdot[C]/d[N2]
  J[3461] += dqdci; // dwdot[N]/d[N2]
  J[3470] += dqdci; // dwdot[CN]/d[N2]
  J[3478] -= dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5264] -= dqdT; // dwdot[C]/dT
  J[5286] += dqdT; // dwdot[N]/dT
  J[5295] += dqdT; // dwdot[CN]/dT
  J[5303] -= dqdT; // dwdot[N2]/dT

  // reaction 239: CH + N2 <=> HCN + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[47];
  k_f = 3120 * exp(0.88 * logT - (10129.751482649) * invT);
  dlnkfdT = 0.88 * invT + (10129.751482649) * invT2;
  // reverse
  phi_r = sc[30] * sc[40];
  Kc = exp(g_RT[9] - g_RT[30] - g_RT[40] + g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[47]) + (h_RT[30] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH
  wdot[30] += q; // N
  wdot[40] += q; // HCN
  wdot[47] -= q; // N2
  // d()/d[CH]
  dqdci = +k_f * sc[47];
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[687] += dqdci; // dwdot[N]/d[CH]
  J[697] += dqdci; // dwdot[HCN]/d[CH]
  J[704] -= dqdci; // dwdot[N2]/d[CH]
  // d()/d[N]
  dqdci = -k_r * sc[40];
  J[2199] -= dqdci; // dwdot[CH]/d[N]
  J[2220] += dqdci; // dwdot[N]/d[N]
  J[2230] += dqdci; // dwdot[HCN]/d[N]
  J[2237] -= dqdci; // dwdot[N2]/d[N]
  // d()/d[HCN]
  dqdci = -k_r * sc[30];
  J[2929] -= dqdci; // dwdot[CH]/d[HCN]
  J[2950] += dqdci; // dwdot[N]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  J[2967] -= dqdci; // dwdot[N2]/d[HCN]
  // d()/d[N2]
  dqdci = +k_f * sc[9];
  J[3440] -= dqdci; // dwdot[CH]/d[N2]
  J[3461] += dqdci; // dwdot[N]/d[N2]
  J[3471] += dqdci; // dwdot[HCN]/d[N2]
  J[3478] -= dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5286] += dqdT; // dwdot[N]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT
  J[5303] -= dqdT; // dwdot[N2]/dT

  // reaction 241: CH2 + N2 <=> HCN + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[47];
  k_f = 10000000 * exp(-(37238.0332695493) * invT);
  dlnkfdT = (37238.0332695493) * invT2;
  // reverse
  phi_r = sc[31] * sc[40];
  Kc = exp(g_RT[10] - g_RT[31] - g_RT[40] + g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[47]) + (h_RT[31] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // CH2
  wdot[31] += q; // NH
  wdot[40] += q; // HCN
  wdot[47] -= q; // N2
  // d()/d[CH2]
  dqdci = +k_f * sc[47];
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[761] += dqdci; // dwdot[NH]/d[CH2]
  J[770] += dqdci; // dwdot[HCN]/d[CH2]
  J[777] -= dqdci; // dwdot[N2]/d[CH2]
  // d()/d[NH]
  dqdci = -k_r * sc[40];
  J[2273] -= dqdci; // dwdot[CH2]/d[NH]
  J[2294] += dqdci; // dwdot[NH]/d[NH]
  J[2303] += dqdci; // dwdot[HCN]/d[NH]
  J[2310] -= dqdci; // dwdot[N2]/d[NH]
  // d()/d[HCN]
  dqdci = -k_r * sc[31];
  J[2930] -= dqdci; // dwdot[CH2]/d[HCN]
  J[2951] += dqdci; // dwdot[NH]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  J[2967] -= dqdci; // dwdot[N2]/d[HCN]
  // d()/d[N2]
  dqdci = +k_f * sc[10];
  J[3441] -= dqdci; // dwdot[CH2]/d[N2]
  J[3462] += dqdci; // dwdot[NH]/d[N2]
  J[3471] += dqdci; // dwdot[HCN]/d[N2]
  J[3478] -= dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5287] += dqdT; // dwdot[NH]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT
  J[5303] -= dqdT; // dwdot[N2]/dT

  // reaction 242: CH2(S) + N2 <=> HCN + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[47];
  k_f = 100000 * exp(-(32709.0832773068) * invT);
  dlnkfdT = (32709.0832773068) * invT2;
  // reverse
  phi_r = sc[31] * sc[40];
  Kc = exp(g_RT[11] - g_RT[31] - g_RT[40] + g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[47]) + (h_RT[31] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // CH2(S)
  wdot[31] += q; // NH
  wdot[40] += q; // HCN
  wdot[47] -= q; // N2
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[47];
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[834] += dqdci; // dwdot[NH]/d[CH2(S)]
  J[843] += dqdci; // dwdot[HCN]/d[CH2(S)]
  J[850] -= dqdci; // dwdot[N2]/d[CH2(S)]
  // d()/d[NH]
  dqdci = -k_r * sc[40];
  J[2274] -= dqdci; // dwdot[CH2(S)]/d[NH]
  J[2294] += dqdci; // dwdot[NH]/d[NH]
  J[2303] += dqdci; // dwdot[HCN]/d[NH]
  J[2310] -= dqdci; // dwdot[N2]/d[NH]
  // d()/d[HCN]
  dqdci = -k_r * sc[31];
  J[2931] -= dqdci; // dwdot[CH2(S)]/d[HCN]
  J[2951] += dqdci; // dwdot[NH]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  J[2967] -= dqdci; // dwdot[N2]/d[HCN]
  // d()/d[N2]
  dqdci = +k_f * sc[11];
  J[3442] -= dqdci; // dwdot[CH2(S)]/d[N2]
  J[3462] += dqdci; // dwdot[NH]/d[N2]
  J[3471] += dqdci; // dwdot[HCN]/d[N2]
  J[3478] -= dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5287] += dqdT; // dwdot[NH]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT
  J[5303] -= dqdT; // dwdot[N2]/dT

  // reaction 243: C + NO <=> CN + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[35];
  k_f = 19000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[39];
  Kc = exp(-g_RT[2] + g_RT[8] + g_RT[35] - g_RT[39]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[35]) + (h_RT[2] + h_RT[39]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[8] -= q;  // C
  wdot[35] -= q; // NO
  wdot[39] += q; // CN
  // d()/d[O]
  dqdci = -k_r * sc[39];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[154] -= dqdci; // dwdot[C]/d[O]
  J[181] -= dqdci; // dwdot[NO]/d[O]
  J[185] += dqdci; // dwdot[CN]/d[O]
  // d()/d[C]
  dqdci = +k_f * sc[35];
  J[586] += dqdci; // dwdot[O]/d[C]
  J[592] -= dqdci; // dwdot[C]/d[C]
  J[619] -= dqdci; // dwdot[NO]/d[C]
  J[623] += dqdci; // dwdot[CN]/d[C]
  // d()/d[NO]
  dqdci = +k_f * sc[8];
  J[2557] += dqdci; // dwdot[O]/d[NO]
  J[2563] -= dqdci; // dwdot[C]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2594] += dqdci; // dwdot[CN]/d[NO]
  // d()/d[CN]
  dqdci = -k_r * sc[2];
  J[2849] += dqdci; // dwdot[O]/d[CN]
  J[2855] -= dqdci; // dwdot[C]/d[CN]
  J[2882] -= dqdci; // dwdot[NO]/d[CN]
  J[2886] += dqdci; // dwdot[CN]/d[CN]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5264] -= dqdT; // dwdot[C]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5295] += dqdT; // dwdot[CN]/dT

  // reaction 244: C + NO <=> CO + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[35];
  k_f = 29000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[30];
  Kc = exp(g_RT[8] - g_RT[14] - g_RT[30] + g_RT[35]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[35]) + (h_RT[14] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // C
  wdot[14] += q; // CO
  wdot[30] += q; // N
  wdot[35] -= q; // NO
  // d()/d[C]
  dqdci = +k_f * sc[35];
  J[592] -= dqdci; // dwdot[C]/d[C]
  J[598] += dqdci; // dwdot[CO]/d[C]
  J[614] += dqdci; // dwdot[N]/d[C]
  J[619] -= dqdci; // dwdot[NO]/d[C]
  // d()/d[CO]
  dqdci = -k_r * sc[30];
  J[1030] -= dqdci; // dwdot[C]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1052] += dqdci; // dwdot[N]/d[CO]
  J[1057] -= dqdci; // dwdot[NO]/d[CO]
  // d()/d[N]
  dqdci = -k_r * sc[14];
  J[2198] -= dqdci; // dwdot[C]/d[N]
  J[2204] += dqdci; // dwdot[CO]/d[N]
  J[2220] += dqdci; // dwdot[N]/d[N]
  J[2225] -= dqdci; // dwdot[NO]/d[N]
  // d()/d[NO]
  dqdci = +k_f * sc[8];
  J[2563] -= dqdci; // dwdot[C]/d[NO]
  J[2569] += dqdci; // dwdot[CO]/d[NO]
  J[2585] += dqdci; // dwdot[N]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[5264] -= dqdT; // dwdot[C]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5286] += dqdT; // dwdot[N]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT

  // reaction 245: CH + NO <=> HCN + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[35];
  k_f = 41000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[40];
  Kc = exp(-g_RT[2] + g_RT[9] + g_RT[35] - g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[35]) + (h_RT[2] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[9] -= q;  // CH
  wdot[35] -= q; // NO
  wdot[40] += q; // HCN
  // d()/d[O]
  dqdci = -k_r * sc[40];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[155] -= dqdci; // dwdot[CH]/d[O]
  J[181] -= dqdci; // dwdot[NO]/d[O]
  J[186] += dqdci; // dwdot[HCN]/d[O]
  // d()/d[CH]
  dqdci = +k_f * sc[35];
  J[659] += dqdci; // dwdot[O]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[692] -= dqdci; // dwdot[NO]/d[CH]
  J[697] += dqdci; // dwdot[HCN]/d[CH]
  // d()/d[NO]
  dqdci = +k_f * sc[9];
  J[2557] += dqdci; // dwdot[O]/d[NO]
  J[2564] -= dqdci; // dwdot[CH]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2595] += dqdci; // dwdot[HCN]/d[NO]
  // d()/d[HCN]
  dqdci = -k_r * sc[2];
  J[2922] += dqdci; // dwdot[O]/d[HCN]
  J[2929] -= dqdci; // dwdot[CH]/d[HCN]
  J[2955] -= dqdci; // dwdot[NO]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT

  // reaction 246: CH + NO <=> H + NCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[35];
  k_f = 16200000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[46];
  Kc = exp(-g_RT[1] + g_RT[9] + g_RT[35] - g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[35]) + (h_RT[1] + h_RT[46]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[9] -= q;  // CH
  wdot[35] -= q; // NO
  wdot[46] += q; // NCO
  // d()/d[H]
  dqdci = -k_r * sc[46];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[82] -= dqdci;  // dwdot[CH]/d[H]
  J[108] -= dqdci; // dwdot[NO]/d[H]
  J[119] += dqdci; // dwdot[NCO]/d[H]
  // d()/d[CH]
  dqdci = +k_f * sc[35];
  J[658] += dqdci; // dwdot[H]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[692] -= dqdci; // dwdot[NO]/d[CH]
  J[703] += dqdci; // dwdot[NCO]/d[CH]
  // d()/d[NO]
  dqdci = +k_f * sc[9];
  J[2556] += dqdci; // dwdot[H]/d[NO]
  J[2564] -= dqdci; // dwdot[CH]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2601] += dqdci; // dwdot[NCO]/d[NO]
  // d()/d[NCO]
  dqdci = -k_r * sc[1];
  J[3359] += dqdci; // dwdot[H]/d[NCO]
  J[3367] -= dqdci; // dwdot[CH]/d[NCO]
  J[3393] -= dqdci; // dwdot[NO]/d[NCO]
  J[3404] += dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5302] += dqdT; // dwdot[NCO]/dT

  // reaction 247: CH + NO <=> HCO + N
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[35];
  k_f = 24600000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[16] * sc[30];
  Kc = exp(g_RT[9] - g_RT[16] - g_RT[30] + g_RT[35]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[35]) + (h_RT[16] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // CH
  wdot[16] += q; // HCO
  wdot[30] += q; // N
  wdot[35] -= q; // NO
  // d()/d[CH]
  dqdci = +k_f * sc[35];
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[673] += dqdci; // dwdot[HCO]/d[CH]
  J[687] += dqdci; // dwdot[N]/d[CH]
  J[692] -= dqdci; // dwdot[NO]/d[CH]
  // d()/d[HCO]
  dqdci = -k_r * sc[30];
  J[1177] -= dqdci; // dwdot[CH]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1198] += dqdci; // dwdot[N]/d[HCO]
  J[1203] -= dqdci; // dwdot[NO]/d[HCO]
  // d()/d[N]
  dqdci = -k_r * sc[16];
  J[2199] -= dqdci; // dwdot[CH]/d[N]
  J[2206] += dqdci; // dwdot[HCO]/d[N]
  J[2220] += dqdci; // dwdot[N]/d[N]
  J[2225] -= dqdci; // dwdot[NO]/d[N]
  // d()/d[NO]
  dqdci = +k_f * sc[9];
  J[2564] -= dqdci; // dwdot[CH]/d[NO]
  J[2571] += dqdci; // dwdot[HCO]/d[NO]
  J[2585] += dqdci; // dwdot[N]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5286] += dqdT; // dwdot[N]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT

  // reaction 248: CH2 + NO <=> H + HNCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[35];
  k_f = 310000000000 * exp(-1.38 * logT - (639.085165571994) * invT);
  dlnkfdT = -1.38 * invT + (639.085165571994) * invT2;
  // reverse
  phi_r = sc[1] * sc[45];
  Kc = exp(-g_RT[1] + g_RT[10] + g_RT[35] - g_RT[45]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[35]) + (h_RT[1] + h_RT[45]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[10] -= q; // CH2
  wdot[35] -= q; // NO
  wdot[45] += q; // HNCO
  // d()/d[H]
  dqdci = -k_r * sc[45];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[83] -= dqdci;  // dwdot[CH2]/d[H]
  J[108] -= dqdci; // dwdot[NO]/d[H]
  J[118] += dqdci; // dwdot[HNCO]/d[H]
  // d()/d[CH2]
  dqdci = +k_f * sc[35];
  J[731] += dqdci; // dwdot[H]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[765] -= dqdci; // dwdot[NO]/d[CH2]
  J[775] += dqdci; // dwdot[HNCO]/d[CH2]
  // d()/d[NO]
  dqdci = +k_f * sc[10];
  J[2556] += dqdci; // dwdot[H]/d[NO]
  J[2565] -= dqdci; // dwdot[CH2]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2600] += dqdci; // dwdot[HNCO]/d[NO]
  // d()/d[HNCO]
  dqdci = -k_r * sc[1];
  J[3286] += dqdci; // dwdot[H]/d[HNCO]
  J[3295] -= dqdci; // dwdot[CH2]/d[HNCO]
  J[3320] -= dqdci; // dwdot[NO]/d[HNCO]
  J[3330] += dqdci; // dwdot[HNCO]/d[HNCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5301] += dqdT; // dwdot[HNCO]/dT

  // reaction 249: CH2 + NO <=> HCN + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[35];
  k_f = 290000000 * exp(-0.69 * logT - (382.444666011587) * invT);
  dlnkfdT = -0.69 * invT + (382.444666011587) * invT2;
  // reverse
  phi_r = sc[4] * sc[40];
  Kc = exp(-g_RT[4] + g_RT[10] + g_RT[35] - g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[35]) + (h_RT[4] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[10] -= q; // CH2
  wdot[35] -= q; // NO
  wdot[40] += q; // HCN
  // d()/d[OH]
  dqdci = -k_r * sc[40];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[302] -= dqdci; // dwdot[CH2]/d[OH]
  J[327] -= dqdci; // dwdot[NO]/d[OH]
  J[332] += dqdci; // dwdot[HCN]/d[OH]
  // d()/d[CH2]
  dqdci = +k_f * sc[35];
  J[734] += dqdci; // dwdot[OH]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[765] -= dqdci; // dwdot[NO]/d[CH2]
  J[770] += dqdci; // dwdot[HCN]/d[CH2]
  // d()/d[NO]
  dqdci = +k_f * sc[10];
  J[2559] += dqdci; // dwdot[OH]/d[NO]
  J[2565] -= dqdci; // dwdot[CH2]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2595] += dqdci; // dwdot[HCN]/d[NO]
  // d()/d[HCN]
  dqdci = -k_r * sc[4];
  J[2924] += dqdci; // dwdot[OH]/d[HCN]
  J[2930] -= dqdci; // dwdot[CH2]/d[HCN]
  J[2955] -= dqdci; // dwdot[NO]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT

  // reaction 250: CH2 + NO <=> H + HCNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[35];
  k_f = 38000000 * exp(-0.36 * logT - (291.865666166737) * invT);
  dlnkfdT = -0.36 * invT + (291.865666166737) * invT2;
  // reverse
  phi_r = sc[1] * sc[43];
  Kc = exp(-g_RT[1] + g_RT[10] + g_RT[35] - g_RT[43]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[35]) + (h_RT[1] + h_RT[43]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[10] -= q; // CH2
  wdot[35] -= q; // NO
  wdot[43] += q; // HCNO
  // d()/d[H]
  dqdci = -k_r * sc[43];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[83] -= dqdci;  // dwdot[CH2]/d[H]
  J[108] -= dqdci; // dwdot[NO]/d[H]
  J[116] += dqdci; // dwdot[HCNO]/d[H]
  // d()/d[CH2]
  dqdci = +k_f * sc[35];
  J[731] += dqdci; // dwdot[H]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[765] -= dqdci; // dwdot[NO]/d[CH2]
  J[773] += dqdci; // dwdot[HCNO]/d[CH2]
  // d()/d[NO]
  dqdci = +k_f * sc[10];
  J[2556] += dqdci; // dwdot[H]/d[NO]
  J[2565] -= dqdci; // dwdot[CH2]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2598] += dqdci; // dwdot[HCNO]/d[NO]
  // d()/d[HCNO]
  dqdci = -k_r * sc[1];
  J[3140] += dqdci; // dwdot[H]/d[HCNO]
  J[3149] -= dqdci; // dwdot[CH2]/d[HCNO]
  J[3174] -= dqdci; // dwdot[NO]/d[HCNO]
  J[3182] += dqdci; // dwdot[HCNO]/d[HCNO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5299] += dqdT; // dwdot[HCNO]/dT

  // reaction 251: CH2(S) + NO <=> H + HNCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[35];
  k_f = 310000000000 * exp(-1.38 * logT - (639.085165571994) * invT);
  dlnkfdT = -1.38 * invT + (639.085165571994) * invT2;
  // reverse
  phi_r = sc[1] * sc[45];
  Kc = exp(-g_RT[1] + g_RT[11] + g_RT[35] - g_RT[45]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[35]) + (h_RT[1] + h_RT[45]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[11] -= q; // CH2(S)
  wdot[35] -= q; // NO
  wdot[45] += q; // HNCO
  // d()/d[H]
  dqdci = -k_r * sc[45];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[84] -= dqdci;  // dwdot[CH2(S)]/d[H]
  J[108] -= dqdci; // dwdot[NO]/d[H]
  J[118] += dqdci; // dwdot[HNCO]/d[H]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[35];
  J[804] += dqdci; // dwdot[H]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[838] -= dqdci; // dwdot[NO]/d[CH2(S)]
  J[848] += dqdci; // dwdot[HNCO]/d[CH2(S)]
  // d()/d[NO]
  dqdci = +k_f * sc[11];
  J[2556] += dqdci; // dwdot[H]/d[NO]
  J[2566] -= dqdci; // dwdot[CH2(S)]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2600] += dqdci; // dwdot[HNCO]/d[NO]
  // d()/d[HNCO]
  dqdci = -k_r * sc[1];
  J[3286] += dqdci; // dwdot[H]/d[HNCO]
  J[3296] -= dqdci; // dwdot[CH2(S)]/d[HNCO]
  J[3320] -= dqdci; // dwdot[NO]/d[HNCO]
  J[3330] += dqdci; // dwdot[HNCO]/d[HNCO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5301] += dqdT; // dwdot[HNCO]/dT

  // reaction 252: CH2(S) + NO <=> HCN + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[35];
  k_f = 290000000 * exp(-0.69 * logT - (382.444666011587) * invT);
  dlnkfdT = -0.69 * invT + (382.444666011587) * invT2;
  // reverse
  phi_r = sc[4] * sc[40];
  Kc = exp(-g_RT[4] + g_RT[11] + g_RT[35] - g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[35]) + (h_RT[4] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[11] -= q; // CH2(S)
  wdot[35] -= q; // NO
  wdot[40] += q; // HCN
  // d()/d[OH]
  dqdci = -k_r * sc[40];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[303] -= dqdci; // dwdot[CH2(S)]/d[OH]
  J[327] -= dqdci; // dwdot[NO]/d[OH]
  J[332] += dqdci; // dwdot[HCN]/d[OH]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[35];
  J[807] += dqdci; // dwdot[OH]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[838] -= dqdci; // dwdot[NO]/d[CH2(S)]
  J[843] += dqdci; // dwdot[HCN]/d[CH2(S)]
  // d()/d[NO]
  dqdci = +k_f * sc[11];
  J[2559] += dqdci; // dwdot[OH]/d[NO]
  J[2566] -= dqdci; // dwdot[CH2(S)]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2595] += dqdci; // dwdot[HCN]/d[NO]
  // d()/d[HCN]
  dqdci = -k_r * sc[4];
  J[2924] += dqdci; // dwdot[OH]/d[HCN]
  J[2931] -= dqdci; // dwdot[CH2(S)]/d[HCN]
  J[2955] -= dqdci; // dwdot[NO]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT

  // reaction 253: CH2(S) + NO <=> H + HCNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[35];
  k_f = 38000000 * exp(-0.36 * logT - (291.865666166737) * invT);
  dlnkfdT = -0.36 * invT + (291.865666166737) * invT2;
  // reverse
  phi_r = sc[1] * sc[43];
  Kc = exp(-g_RT[1] + g_RT[11] + g_RT[35] - g_RT[43]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[35]) + (h_RT[1] + h_RT[43]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[11] -= q; // CH2(S)
  wdot[35] -= q; // NO
  wdot[43] += q; // HCNO
  // d()/d[H]
  dqdci = -k_r * sc[43];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[84] -= dqdci;  // dwdot[CH2(S)]/d[H]
  J[108] -= dqdci; // dwdot[NO]/d[H]
  J[116] += dqdci; // dwdot[HCNO]/d[H]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[35];
  J[804] += dqdci; // dwdot[H]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[838] -= dqdci; // dwdot[NO]/d[CH2(S)]
  J[846] += dqdci; // dwdot[HCNO]/d[CH2(S)]
  // d()/d[NO]
  dqdci = +k_f * sc[11];
  J[2556] += dqdci; // dwdot[H]/d[NO]
  J[2566] -= dqdci; // dwdot[CH2(S)]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2598] += dqdci; // dwdot[HCNO]/d[NO]
  // d()/d[HCNO]
  dqdci = -k_r * sc[1];
  J[3140] += dqdci; // dwdot[H]/d[HCNO]
  J[3150] -= dqdci; // dwdot[CH2(S)]/d[HCNO]
  J[3174] -= dqdci; // dwdot[NO]/d[HCNO]
  J[3182] += dqdci; // dwdot[HCNO]/d[HCNO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5299] += dqdT; // dwdot[HCNO]/dT

  // reaction 254: CH3 + NO <=> H2O + HCN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[35];
  k_f = 96000000 * exp(-(14492.6399751759) * invT);
  dlnkfdT = (14492.6399751759) * invT2;
  // reverse
  phi_r = sc[5] * sc[40];
  Kc = exp(-g_RT[5] + g_RT[12] + g_RT[35] - g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[35]) + (h_RT[5] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] += q;  // H2O
  wdot[12] -= q; // CH3
  wdot[35] -= q; // NO
  wdot[40] += q; // HCN
  // d()/d[H2O]
  dqdci = -k_r * sc[40];
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[377] -= dqdci; // dwdot[CH3]/d[H2O]
  J[400] -= dqdci; // dwdot[NO]/d[H2O]
  J[405] += dqdci; // dwdot[HCN]/d[H2O]
  // d()/d[CH3]
  dqdci = +k_f * sc[35];
  J[881] += dqdci; // dwdot[H2O]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[911] -= dqdci; // dwdot[NO]/d[CH3]
  J[916] += dqdci; // dwdot[HCN]/d[CH3]
  // d()/d[NO]
  dqdci = +k_f * sc[12];
  J[2560] += dqdci; // dwdot[H2O]/d[NO]
  J[2567] -= dqdci; // dwdot[CH3]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2595] += dqdci; // dwdot[HCN]/d[NO]
  // d()/d[HCN]
  dqdci = -k_r * sc[5];
  J[2925] += dqdci; // dwdot[H2O]/d[HCN]
  J[2932] -= dqdci; // dwdot[CH3]/d[HCN]
  J[2955] -= dqdci; // dwdot[NO]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  // d()/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT

  // reaction 255: CH3 + NO <=> H2CN + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[35];
  k_f = 1000000 * exp(-(10944.9624812527) * invT);
  dlnkfdT = (10944.9624812527) * invT2;
  // reverse
  phi_r = sc[4] * sc[41];
  Kc = exp(-g_RT[4] + g_RT[12] + g_RT[35] - g_RT[41]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[35]) + (h_RT[4] + h_RT[41]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[12] -= q; // CH3
  wdot[35] -= q; // NO
  wdot[41] += q; // H2CN
  // d()/d[OH]
  dqdci = -k_r * sc[41];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[304] -= dqdci; // dwdot[CH3]/d[OH]
  J[327] -= dqdci; // dwdot[NO]/d[OH]
  J[333] += dqdci; // dwdot[H2CN]/d[OH]
  // d()/d[CH3]
  dqdci = +k_f * sc[35];
  J[880] += dqdci; // dwdot[OH]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[911] -= dqdci; // dwdot[NO]/d[CH3]
  J[917] += dqdci; // dwdot[H2CN]/d[CH3]
  // d()/d[NO]
  dqdci = +k_f * sc[12];
  J[2559] += dqdci; // dwdot[OH]/d[NO]
  J[2567] -= dqdci; // dwdot[CH3]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2596] += dqdci; // dwdot[H2CN]/d[NO]
  // d()/d[H2CN]
  dqdci = -k_r * sc[4];
  J[2997] += dqdci; // dwdot[OH]/d[H2CN]
  J[3005] -= dqdci; // dwdot[CH3]/d[H2CN]
  J[3028] -= dqdci; // dwdot[NO]/d[H2CN]
  J[3034] += dqdci; // dwdot[H2CN]/d[H2CN]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5297] += dqdT; // dwdot[H2CN]/dT

  // reaction 256: HCNN + O <=> CO + H + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[42];
  k_f = 22000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[14] * sc[47];
  Kc = refC * exp(-g_RT[1] + g_RT[2] - g_RT[14] + g_RT[42] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[2] + h_RT[42]) + (h_RT[1] + h_RT[14] + h_RT[47]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[14] += q; // CO
  wdot[42] -= q; // HCNN
  wdot[47] += q; // N2
  // d()/d[H]
  dqdci = -k_r * sc[14] * sc[47];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[75] -= dqdci;  // dwdot[O]/d[H]
  J[87] += dqdci;  // dwdot[CO]/d[H]
  J[115] -= dqdci; // dwdot[HCNN]/d[H]
  J[120] += dqdci; // dwdot[N2]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[42];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[188] -= dqdci; // dwdot[HCNN]/d[O]
  J[193] += dqdci; // dwdot[N2]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc[1] * sc[47];
  J[1023] += dqdci; // dwdot[H]/d[CO]
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1064] -= dqdci; // dwdot[HCNN]/d[CO]
  J[1069] += dqdci; // dwdot[N2]/d[CO]
  // d()/d[HCNN]
  dqdci = +k_f * sc[2];
  J[3067] += dqdci; // dwdot[H]/d[HCNN]
  J[3068] -= dqdci; // dwdot[O]/d[HCNN]
  J[3080] += dqdci; // dwdot[CO]/d[HCNN]
  J[3108] -= dqdci; // dwdot[HCNN]/d[HCNN]
  J[3113] += dqdci; // dwdot[N2]/d[HCNN]
  // d()/d[N2]
  dqdci = -k_r * sc[1] * sc[14];
  J[3432] += dqdci; // dwdot[H]/d[N2]
  J[3433] -= dqdci; // dwdot[O]/d[N2]
  J[3445] += dqdci; // dwdot[CO]/d[N2]
  J[3473] -= dqdci; // dwdot[HCNN]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5298] -= dqdT; // dwdot[HCNN]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 257: HCNN + O <=> HCN + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[42];
  k_f = 2000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[35] * sc[40];
  Kc = exp(g_RT[2] - g_RT[35] - g_RT[40] + g_RT[42]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[42]) + (h_RT[35] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[35] += q; // NO
  wdot[40] += q; // HCN
  wdot[42] -= q; // HCNN
  // d()/d[O]
  dqdci = +k_f * sc[42];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[181] += dqdci; // dwdot[NO]/d[O]
  J[186] += dqdci; // dwdot[HCN]/d[O]
  J[188] -= dqdci; // dwdot[HCNN]/d[O]
  // d()/d[NO]
  dqdci = -k_r * sc[40];
  J[2557] -= dqdci; // dwdot[O]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2595] += dqdci; // dwdot[HCN]/d[NO]
  J[2597] -= dqdci; // dwdot[HCNN]/d[NO]
  // d()/d[HCN]
  dqdci = -k_r * sc[35];
  J[2922] -= dqdci; // dwdot[O]/d[HCN]
  J[2955] += dqdci; // dwdot[NO]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  J[2962] -= dqdci; // dwdot[HCNN]/d[HCN]
  // d()/d[HCNN]
  dqdci = +k_f * sc[2];
  J[3068] -= dqdci; // dwdot[O]/d[HCNN]
  J[3101] += dqdci; // dwdot[NO]/d[HCNN]
  J[3106] += dqdci; // dwdot[HCN]/d[HCNN]
  J[3108] -= dqdci; // dwdot[HCNN]/d[HCNN]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT
  J[5298] -= dqdT; // dwdot[HCNN]/dT

  // reaction 258: HCNN + O2 <=> HCO + N2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[42];
  k_f = 12000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[16] * sc[47];
  Kc = refC * exp(-g_RT[2] + g_RT[3] - g_RT[16] + g_RT[42] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[3] + h_RT[42]) + (h_RT[2] + h_RT[16] + h_RT[47]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[16] += q; // HCO
  wdot[42] -= q; // HCNN
  wdot[47] += q; // N2
  // d()/d[O]
  dqdci = -k_r * sc[16] * sc[47];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[162] += dqdci; // dwdot[HCO]/d[O]
  J[188] -= dqdci; // dwdot[HCNN]/d[O]
  J[193] += dqdci; // dwdot[N2]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[42];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[235] += dqdci; // dwdot[HCO]/d[O2]
  J[261] -= dqdci; // dwdot[HCNN]/d[O2]
  J[266] += dqdci; // dwdot[N2]/d[O2]
  // d()/d[HCO]
  dqdci = -k_r * sc[2] * sc[47];
  J[1170] += dqdci; // dwdot[O]/d[HCO]
  J[1171] -= dqdci; // dwdot[O2]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1210] -= dqdci; // dwdot[HCNN]/d[HCO]
  J[1215] += dqdci; // dwdot[N2]/d[HCO]
  // d()/d[HCNN]
  dqdci = +k_f * sc[3];
  J[3068] += dqdci; // dwdot[O]/d[HCNN]
  J[3069] -= dqdci; // dwdot[O2]/d[HCNN]
  J[3082] += dqdci; // dwdot[HCO]/d[HCNN]
  J[3108] -= dqdci; // dwdot[HCNN]/d[HCNN]
  J[3113] += dqdci; // dwdot[N2]/d[HCNN]
  // d()/d[N2]
  dqdci = -k_r * sc[2] * sc[16];
  J[3433] += dqdci; // dwdot[O]/d[N2]
  J[3434] -= dqdci; // dwdot[O2]/d[N2]
  J[3447] += dqdci; // dwdot[HCO]/d[N2]
  J[3473] -= dqdci; // dwdot[HCNN]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5298] -= dqdT; // dwdot[HCNN]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 259: HCNN + OH <=> H + HCO + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[42];
  k_f = 12000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[16] * sc[47];
  Kc = refC * exp(-g_RT[1] + g_RT[4] - g_RT[16] + g_RT[42] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[4] + h_RT[42]) + (h_RT[1] + h_RT[16] + h_RT[47]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[16] += q; // HCO
  wdot[42] -= q; // HCNN
  wdot[47] += q; // N2
  // d()/d[H]
  dqdci = -k_r * sc[16] * sc[47];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[89] += dqdci;  // dwdot[HCO]/d[H]
  J[115] -= dqdci; // dwdot[HCNN]/d[H]
  J[120] += dqdci; // dwdot[N2]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[42];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[308] += dqdci; // dwdot[HCO]/d[OH]
  J[334] -= dqdci; // dwdot[HCNN]/d[OH]
  J[339] += dqdci; // dwdot[N2]/d[OH]
  // d()/d[HCO]
  dqdci = -k_r * sc[1] * sc[47];
  J[1169] += dqdci; // dwdot[H]/d[HCO]
  J[1172] -= dqdci; // dwdot[OH]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1210] -= dqdci; // dwdot[HCNN]/d[HCO]
  J[1215] += dqdci; // dwdot[N2]/d[HCO]
  // d()/d[HCNN]
  dqdci = +k_f * sc[4];
  J[3067] += dqdci; // dwdot[H]/d[HCNN]
  J[3070] -= dqdci; // dwdot[OH]/d[HCNN]
  J[3082] += dqdci; // dwdot[HCO]/d[HCNN]
  J[3108] -= dqdci; // dwdot[HCNN]/d[HCNN]
  J[3113] += dqdci; // dwdot[N2]/d[HCNN]
  // d()/d[N2]
  dqdci = -k_r * sc[1] * sc[16];
  J[3432] += dqdci; // dwdot[H]/d[N2]
  J[3435] -= dqdci; // dwdot[OH]/d[N2]
  J[3447] += dqdci; // dwdot[HCO]/d[N2]
  J[3473] -= dqdci; // dwdot[HCNN]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5298] -= dqdT; // dwdot[HCNN]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 260: H + HCNN <=> CH2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[42];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[10] * sc[47];
  Kc = exp(g_RT[1] - g_RT[10] + g_RT[42] - g_RT[47]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[42]) + (h_RT[10] + h_RT[47]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[10] += q; // CH2
  wdot[42] -= q; // HCNN
  wdot[47] += q; // N2
  // d()/d[H]
  dqdci = +k_f * sc[42];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[83] += dqdci;  // dwdot[CH2]/d[H]
  J[115] -= dqdci; // dwdot[HCNN]/d[H]
  J[120] += dqdci; // dwdot[N2]/d[H]
  // d()/d[CH2]
  dqdci = -k_r * sc[47];
  J[731] -= dqdci; // dwdot[H]/d[CH2]
  J[740] += dqdci; // dwdot[CH2]/d[CH2]
  J[772] -= dqdci; // dwdot[HCNN]/d[CH2]
  J[777] += dqdci; // dwdot[N2]/d[CH2]
  // d()/d[HCNN]
  dqdci = +k_f * sc[1];
  J[3067] -= dqdci; // dwdot[H]/d[HCNN]
  J[3076] += dqdci; // dwdot[CH2]/d[HCNN]
  J[3108] -= dqdci; // dwdot[HCNN]/d[HCNN]
  J[3113] += dqdci; // dwdot[N2]/d[HCNN]
  // d()/d[N2]
  dqdci = -k_r * sc[10];
  J[3432] -= dqdci; // dwdot[H]/d[N2]
  J[3441] += dqdci; // dwdot[CH2]/d[N2]
  J[3473] -= dqdci; // dwdot[HCNN]/d[N2]
  J[3478] += dqdci; // dwdot[N2]/d[N2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5298] -= dqdT; // dwdot[HCNN]/dT
  J[5303] += dqdT; // dwdot[N2]/dT

  // reaction 261: HNCO + O <=> CO2 + NH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[45];
  k_f = 98 * exp(1.41 * logT - (4277.34165934012) * invT);
  dlnkfdT = 1.41 * invT + (4277.34165934012) * invT2;
  // reverse
  phi_r = sc[15] * sc[31];
  Kc = exp(g_RT[2] - g_RT[15] - g_RT[31] + g_RT[45]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[45]) + (h_RT[15] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[15] += q; // CO2
  wdot[31] += q; // NH
  wdot[45] -= q; // HNCO
  // d()/d[O]
  dqdci = +k_f * sc[45];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[161] += dqdci; // dwdot[CO2]/d[O]
  J[177] += dqdci; // dwdot[NH]/d[O]
  J[191] -= dqdci; // dwdot[HNCO]/d[O]
  // d()/d[CO2]
  dqdci = -k_r * sc[31];
  J[1097] -= dqdci; // dwdot[O]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  J[1126] += dqdci; // dwdot[NH]/d[CO2]
  J[1140] -= dqdci; // dwdot[HNCO]/d[CO2]
  // d()/d[NH]
  dqdci = -k_r * sc[15];
  J[2265] -= dqdci; // dwdot[O]/d[NH]
  J[2278] += dqdci; // dwdot[CO2]/d[NH]
  J[2294] += dqdci; // dwdot[NH]/d[NH]
  J[2308] -= dqdci; // dwdot[HNCO]/d[NH]
  // d()/d[HNCO]
  dqdci = +k_f * sc[2];
  J[3287] -= dqdci; // dwdot[O]/d[HNCO]
  J[3300] += dqdci; // dwdot[CO2]/d[HNCO]
  J[3316] += dqdci; // dwdot[NH]/d[HNCO]
  J[3330] -= dqdci; // dwdot[HNCO]/d[HNCO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5287] += dqdT; // dwdot[NH]/dT
  J[5301] -= dqdT; // dwdot[HNCO]/dT

  // reaction 262: HNCO + O <=> CO + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[45];
  k_f = 150 * exp(1.57 * logT - (22141.5332954077) * invT);
  dlnkfdT = 1.57 * invT + (22141.5332954077) * invT2;
  // reverse
  phi_r = sc[14] * sc[38];
  Kc = exp(g_RT[2] - g_RT[14] - g_RT[38] + g_RT[45]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[45]) + (h_RT[14] + h_RT[38]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[14] += q; // CO
  wdot[38] += q; // HNO
  wdot[45] -= q; // HNCO
  // d()/d[O]
  dqdci = +k_f * sc[45];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[184] += dqdci; // dwdot[HNO]/d[O]
  J[191] -= dqdci; // dwdot[HNCO]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc[38];
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1060] += dqdci; // dwdot[HNO]/d[CO]
  J[1067] -= dqdci; // dwdot[HNCO]/d[CO]
  // d()/d[HNO]
  dqdci = -k_r * sc[14];
  J[2776] -= dqdci; // dwdot[O]/d[HNO]
  J[2788] += dqdci; // dwdot[CO]/d[HNO]
  J[2812] += dqdci; // dwdot[HNO]/d[HNO]
  J[2819] -= dqdci; // dwdot[HNCO]/d[HNO]
  // d()/d[HNCO]
  dqdci = +k_f * sc[2];
  J[3287] -= dqdci; // dwdot[O]/d[HNCO]
  J[3299] += dqdci; // dwdot[CO]/d[HNCO]
  J[3323] += dqdci; // dwdot[HNO]/d[HNCO]
  J[3330] -= dqdci; // dwdot[HNCO]/d[HNCO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5294] += dqdT; // dwdot[HNO]/dT
  J[5301] -= dqdT; // dwdot[HNCO]/dT

  // reaction 263: HNCO + O <=> NCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[45];
  k_f = 2.2 * exp(2.11 * logT - (5736.6699901738) * invT);
  dlnkfdT = 2.11 * invT + (5736.6699901738) * invT2;
  // reverse
  phi_r = sc[4] * sc[46];
  Kc = exp(g_RT[2] - g_RT[4] + g_RT[45] - g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[45]) + (h_RT[4] + h_RT[46]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[45] -= q; // HNCO
  wdot[46] += q; // NCO
  // d()/d[O]
  dqdci = +k_f * sc[45];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[191] -= dqdci; // dwdot[HNCO]/d[O]
  J[192] += dqdci; // dwdot[NCO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[46];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[337] -= dqdci; // dwdot[HNCO]/d[OH]
  J[338] += dqdci; // dwdot[NCO]/d[OH]
  // d()/d[HNCO]
  dqdci = +k_f * sc[2];
  J[3287] -= dqdci; // dwdot[O]/d[HNCO]
  J[3289] += dqdci; // dwdot[OH]/d[HNCO]
  J[3330] -= dqdci; // dwdot[HNCO]/d[HNCO]
  J[3331] += dqdci; // dwdot[NCO]/d[HNCO]
  // d()/d[NCO]
  dqdci = -k_r * sc[4];
  J[3360] -= dqdci; // dwdot[O]/d[NCO]
  J[3362] += dqdci; // dwdot[OH]/d[NCO]
  J[3403] -= dqdci; // dwdot[HNCO]/d[NCO]
  J[3404] += dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5301] -= dqdT; // dwdot[HNCO]/dT
  J[5302] += dqdT; // dwdot[NCO]/dT

  // reaction 264: H + HNCO <=> CO + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[45];
  k_f = 22.5 * exp(1.7 * logT - (1912.22333005793) * invT);
  dlnkfdT = 1.7 * invT + (1912.22333005793) * invT2;
  // reverse
  phi_r = sc[14] * sc[32];
  Kc = exp(g_RT[1] - g_RT[14] - g_RT[32] + g_RT[45]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[45]) + (h_RT[14] + h_RT[32]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[14] += q; // CO
  wdot[32] += q; // NH2
  wdot[45] -= q; // HNCO
  // d()/d[H]
  dqdci = +k_f * sc[45];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[87] += dqdci;  // dwdot[CO]/d[H]
  J[105] += dqdci; // dwdot[NH2]/d[H]
  J[118] -= dqdci; // dwdot[HNCO]/d[H]
  // d()/d[CO]
  dqdci = -k_r * sc[32];
  J[1023] -= dqdci; // dwdot[H]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1054] += dqdci; // dwdot[NH2]/d[CO]
  J[1067] -= dqdci; // dwdot[HNCO]/d[CO]
  // d()/d[NH2]
  dqdci = -k_r * sc[14];
  J[2337] -= dqdci; // dwdot[H]/d[NH2]
  J[2350] += dqdci; // dwdot[CO]/d[NH2]
  J[2368] += dqdci; // dwdot[NH2]/d[NH2]
  J[2381] -= dqdci; // dwdot[HNCO]/d[NH2]
  // d()/d[HNCO]
  dqdci = +k_f * sc[1];
  J[3286] -= dqdci; // dwdot[H]/d[HNCO]
  J[3299] += dqdci; // dwdot[CO]/d[HNCO]
  J[3317] += dqdci; // dwdot[NH2]/d[HNCO]
  J[3330] -= dqdci; // dwdot[HNCO]/d[HNCO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5288] += dqdT; // dwdot[NH2]/dT
  J[5301] -= dqdT; // dwdot[HNCO]/dT

  // reaction 265: H + HNCO <=> H2 + NCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[45];
  k_f = 0.105 * exp(2.5 * logT - (6692.78165520277) * invT);
  dlnkfdT = 2.5 * invT + (6692.78165520277) * invT2;
  // reverse
  phi_r = sc[0] * sc[46];
  Kc = exp(-g_RT[0] + g_RT[1] + g_RT[45] - g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[45]) + (h_RT[0] + h_RT[46]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[45] -= q; // HNCO
  wdot[46] += q; // NCO
  // d()/d[H2]
  dqdci = -k_r * sc[46];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[45] -= dqdci; // dwdot[HNCO]/d[H2]
  J[46] += dqdci; // dwdot[NCO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[45];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[118] -= dqdci; // dwdot[HNCO]/d[H]
  J[119] += dqdci; // dwdot[NCO]/d[H]
  // d()/d[HNCO]
  dqdci = +k_f * sc[1];
  J[3285] += dqdci; // dwdot[H2]/d[HNCO]
  J[3286] -= dqdci; // dwdot[H]/d[HNCO]
  J[3330] -= dqdci; // dwdot[HNCO]/d[HNCO]
  J[3331] += dqdci; // dwdot[NCO]/d[HNCO]
  // d()/d[NCO]
  dqdci = -k_r * sc[0];
  J[3358] += dqdci; // dwdot[H2]/d[NCO]
  J[3359] -= dqdci; // dwdot[H]/d[NCO]
  J[3403] -= dqdci; // dwdot[HNCO]/d[NCO]
  J[3404] += dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5301] -= dqdT; // dwdot[HNCO]/dT
  J[5302] += dqdT; // dwdot[NCO]/dT

  // reaction 266: HNCO + OH <=> H2O + NCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[45];
  k_f = 33 * exp(1.5 * logT - (1811.57999689699) * invT);
  dlnkfdT = 1.5 * invT + (1811.57999689699) * invT2;
  // reverse
  phi_r = sc[5] * sc[46];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[45] - g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[45]) + (h_RT[5] + h_RT[46]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[45] -= q; // HNCO
  wdot[46] += q; // NCO
  // d()/d[OH]
  dqdci = +k_f * sc[45];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[337] -= dqdci; // dwdot[HNCO]/d[OH]
  J[338] += dqdci; // dwdot[NCO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[46];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[410] -= dqdci; // dwdot[HNCO]/d[H2O]
  J[411] += dqdci; // dwdot[NCO]/d[H2O]
  // d()/d[HNCO]
  dqdci = +k_f * sc[4];
  J[3289] -= dqdci; // dwdot[OH]/d[HNCO]
  J[3290] += dqdci; // dwdot[H2O]/d[HNCO]
  J[3330] -= dqdci; // dwdot[HNCO]/d[HNCO]
  J[3331] += dqdci; // dwdot[NCO]/d[HNCO]
  // d()/d[NCO]
  dqdci = -k_r * sc[5];
  J[3362] -= dqdci; // dwdot[OH]/d[NCO]
  J[3363] += dqdci; // dwdot[H2O]/d[NCO]
  J[3403] -= dqdci; // dwdot[HNCO]/d[NCO]
  J[3404] += dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5301] -= dqdT; // dwdot[HNCO]/dT
  J[5302] += dqdT; // dwdot[NCO]/dT

  // reaction 267: HNCO + OH <=> CO2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[45];
  k_f = 3.3 * exp(1.5 * logT - (1811.57999689699) * invT);
  dlnkfdT = 1.5 * invT + (1811.57999689699) * invT2;
  // reverse
  phi_r = sc[15] * sc[32];
  Kc = exp(g_RT[4] - g_RT[15] - g_RT[32] + g_RT[45]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[45]) + (h_RT[15] + h_RT[32]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[15] += q; // CO2
  wdot[32] += q; // NH2
  wdot[45] -= q; // HNCO
  // d()/d[OH]
  dqdci = +k_f * sc[45];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[307] += dqdci; // dwdot[CO2]/d[OH]
  J[324] += dqdci; // dwdot[NH2]/d[OH]
  J[337] -= dqdci; // dwdot[HNCO]/d[OH]
  // d()/d[CO2]
  dqdci = -k_r * sc[32];
  J[1099] -= dqdci; // dwdot[OH]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  J[1127] += dqdci; // dwdot[NH2]/d[CO2]
  J[1140] -= dqdci; // dwdot[HNCO]/d[CO2]
  // d()/d[NH2]
  dqdci = -k_r * sc[15];
  J[2340] -= dqdci; // dwdot[OH]/d[NH2]
  J[2351] += dqdci; // dwdot[CO2]/d[NH2]
  J[2368] += dqdci; // dwdot[NH2]/d[NH2]
  J[2381] -= dqdci; // dwdot[HNCO]/d[NH2]
  // d()/d[HNCO]
  dqdci = +k_f * sc[4];
  J[3289] -= dqdci; // dwdot[OH]/d[HNCO]
  J[3300] += dqdci; // dwdot[CO2]/d[HNCO]
  J[3317] += dqdci; // dwdot[NH2]/d[HNCO]
  J[3330] -= dqdci; // dwdot[HNCO]/d[HNCO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5288] += dqdT; // dwdot[NH2]/dT
  J[5301] -= dqdT; // dwdot[HNCO]/dT

  // reaction 269: H + HCNO <=> H + HNCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[43];
  k_f = 2100000000 * exp(-0.69 * logT - (1434.16749754345) * invT);
  dlnkfdT = -0.69 * invT + (1434.16749754345) * invT2;
  // reverse
  phi_r = sc[1] * sc[45];
  Kc = exp(g_RT[1] - g_RT[1] + g_RT[43] - g_RT[45]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[43]) + (h_RT[1] + h_RT[45]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[43] -= q; // HCNO
  wdot[45] += q; // HNCO
  // d()/d[H]
  dqdci = +k_f * sc[43] - k_r * sc[45];
  J[116] -= dqdci; // dwdot[HCNO]/d[H]
  J[118] += dqdci; // dwdot[HNCO]/d[H]
  // d()/d[HCNO]
  dqdci = +k_f * sc[1];
  J[3182] -= dqdci; // dwdot[HCNO]/d[HCNO]
  J[3184] += dqdci; // dwdot[HNCO]/d[HCNO]
  // d()/d[HNCO]
  dqdci = -k_r * sc[1];
  J[3328] -= dqdci; // dwdot[HCNO]/d[HNCO]
  J[3330] += dqdci; // dwdot[HNCO]/d[HNCO]
  // d()/dT
  J[5299] -= dqdT; // dwdot[HCNO]/dT
  J[5301] += dqdT; // dwdot[HNCO]/dT

  // reaction 270: H + HCNO <=> HCN + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[43];
  k_f = 270000 * exp(0.18 * logT - (1066.81933150601) * invT);
  dlnkfdT = 0.18 * invT + (1066.81933150601) * invT2;
  // reverse
  phi_r = sc[4] * sc[40];
  Kc = exp(g_RT[1] - g_RT[4] - g_RT[40] + g_RT[43]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[43]) + (h_RT[4] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[4] += q;  // OH
  wdot[40] += q; // HCN
  wdot[43] -= q; // HCNO
  // d()/d[H]
  dqdci = +k_f * sc[43];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[77] += dqdci;  // dwdot[OH]/d[H]
  J[113] += dqdci; // dwdot[HCN]/d[H]
  J[116] -= dqdci; // dwdot[HCNO]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[40];
  J[293] -= dqdci; // dwdot[H]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[332] += dqdci; // dwdot[HCN]/d[OH]
  J[335] -= dqdci; // dwdot[HCNO]/d[OH]
  // d()/d[HCN]
  dqdci = -k_r * sc[4];
  J[2921] -= dqdci; // dwdot[H]/d[HCN]
  J[2924] += dqdci; // dwdot[OH]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  J[2963] -= dqdci; // dwdot[HCNO]/d[HCN]
  // d()/d[HCNO]
  dqdci = +k_f * sc[1];
  J[3140] -= dqdci; // dwdot[H]/d[HCNO]
  J[3143] += dqdci; // dwdot[OH]/d[HCNO]
  J[3179] += dqdci; // dwdot[HCN]/d[HCNO]
  J[3182] -= dqdci; // dwdot[HCNO]/d[HCNO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT
  J[5299] -= dqdT; // dwdot[HCNO]/dT

  // reaction 271: H + HCNO <=> CO + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[43];
  k_f = 170000000 * exp(-0.75 * logT - (1454.29616417564) * invT);
  dlnkfdT = -0.75 * invT + (1454.29616417564) * invT2;
  // reverse
  phi_r = sc[14] * sc[32];
  Kc = exp(g_RT[1] - g_RT[14] - g_RT[32] + g_RT[43]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[43]) + (h_RT[14] + h_RT[32]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[14] += q; // CO
  wdot[32] += q; // NH2
  wdot[43] -= q; // HCNO
  // d()/d[H]
  dqdci = +k_f * sc[43];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[87] += dqdci;  // dwdot[CO]/d[H]
  J[105] += dqdci; // dwdot[NH2]/d[H]
  J[116] -= dqdci; // dwdot[HCNO]/d[H]
  // d()/d[CO]
  dqdci = -k_r * sc[32];
  J[1023] -= dqdci; // dwdot[H]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1054] += dqdci; // dwdot[NH2]/d[CO]
  J[1065] -= dqdci; // dwdot[HCNO]/d[CO]
  // d()/d[NH2]
  dqdci = -k_r * sc[14];
  J[2337] -= dqdci; // dwdot[H]/d[NH2]
  J[2350] += dqdci; // dwdot[CO]/d[NH2]
  J[2368] += dqdci; // dwdot[NH2]/d[NH2]
  J[2379] -= dqdci; // dwdot[HCNO]/d[NH2]
  // d()/d[HCNO]
  dqdci = +k_f * sc[1];
  J[3140] -= dqdci; // dwdot[H]/d[HCNO]
  J[3153] += dqdci; // dwdot[CO]/d[HCNO]
  J[3171] += dqdci; // dwdot[NH2]/d[HCNO]
  J[3182] -= dqdci; // dwdot[HCNO]/d[HCNO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5288] += dqdT; // dwdot[NH2]/dT
  J[5299] -= dqdT; // dwdot[HCNO]/dT

  // reaction 272: H + HOCN <=> H + HNCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[44];
  k_f = 20 * exp(2 * logT - (1006.43333160944) * invT);
  dlnkfdT = 2 * invT + (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[1] * sc[45];
  Kc = exp(g_RT[1] - g_RT[1] + g_RT[44] - g_RT[45]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[44]) + (h_RT[1] + h_RT[45]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[44] -= q; // HOCN
  wdot[45] += q; // HNCO
  // d()/d[H]
  dqdci = +k_f * sc[44] - k_r * sc[45];
  J[117] -= dqdci; // dwdot[HOCN]/d[H]
  J[118] += dqdci; // dwdot[HNCO]/d[H]
  // d()/d[HOCN]
  dqdci = +k_f * sc[1];
  J[3256] -= dqdci; // dwdot[HOCN]/d[HOCN]
  J[3257] += dqdci; // dwdot[HNCO]/d[HOCN]
  // d()/d[HNCO]
  dqdci = -k_r * sc[1];
  J[3329] -= dqdci; // dwdot[HOCN]/d[HNCO]
  J[3330] += dqdci; // dwdot[HNCO]/d[HNCO]
  // d()/dT
  J[5300] -= dqdT; // dwdot[HOCN]/dT
  J[5301] += dqdT; // dwdot[HNCO]/dT

  // reaction 273: HCCO + NO <=> CO + HCNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[27] * sc[35];
  k_f = 9000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[43];
  Kc = exp(-g_RT[14] + g_RT[27] + g_RT[35] - g_RT[43]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[27] + h_RT[35]) + (h_RT[14] + h_RT[43]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[27] -= q; // HCCO
  wdot[35] -= q; // NO
  wdot[43] += q; // HCNO
  // d()/d[CO]
  dqdci = -k_r * sc[43];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1049] -= dqdci; // dwdot[HCCO]/d[CO]
  J[1057] -= dqdci; // dwdot[NO]/d[CO]
  J[1065] += dqdci; // dwdot[HCNO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[35];
  J[1985] += dqdci; // dwdot[CO]/d[HCCO]
  J[1998] -= dqdci; // dwdot[HCCO]/d[HCCO]
  J[2006] -= dqdci; // dwdot[NO]/d[HCCO]
  J[2014] += dqdci; // dwdot[HCNO]/d[HCCO]
  // d()/d[NO]
  dqdci = +k_f * sc[27];
  J[2569] += dqdci; // dwdot[CO]/d[NO]
  J[2582] -= dqdci; // dwdot[HCCO]/d[NO]
  J[2590] -= dqdci; // dwdot[NO]/d[NO]
  J[2598] += dqdci; // dwdot[HCNO]/d[NO]
  // d()/d[HCNO]
  dqdci = -k_r * sc[14];
  J[3153] += dqdci; // dwdot[CO]/d[HCNO]
  J[3166] -= dqdci; // dwdot[HCCO]/d[HCNO]
  J[3174] -= dqdci; // dwdot[NO]/d[HCNO]
  J[3182] += dqdci; // dwdot[HCNO]/d[HCNO]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5283] -= dqdT; // dwdot[HCCO]/dT
  J[5291] -= dqdT; // dwdot[NO]/dT
  J[5299] += dqdT; // dwdot[HCNO]/dT

  // reaction 274: CH3 + N <=> H + H2CN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[30];
  k_f = 610000000 * exp(-0.31 * logT - (145.932833083369) * invT);
  dlnkfdT = -0.31 * invT + (145.932833083369) * invT2;
  // reverse
  phi_r = sc[1] * sc[41];
  Kc = exp(-g_RT[1] + g_RT[12] + g_RT[30] - g_RT[41]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[30]) + (h_RT[1] + h_RT[41]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[12] -= q; // CH3
  wdot[30] -= q; // N
  wdot[41] += q; // H2CN
  // d()/d[H]
  dqdci = -k_r * sc[41];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[85] -= dqdci;  // dwdot[CH3]/d[H]
  J[103] -= dqdci; // dwdot[N]/d[H]
  J[114] += dqdci; // dwdot[H2CN]/d[H]
  // d()/d[CH3]
  dqdci = +k_f * sc[30];
  J[877] += dqdci; // dwdot[H]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[906] -= dqdci; // dwdot[N]/d[CH3]
  J[917] += dqdci; // dwdot[H2CN]/d[CH3]
  // d()/d[N]
  dqdci = +k_f * sc[12];
  J[2191] += dqdci; // dwdot[H]/d[N]
  J[2202] -= dqdci; // dwdot[CH3]/d[N]
  J[2220] -= dqdci; // dwdot[N]/d[N]
  J[2231] += dqdci; // dwdot[H2CN]/d[N]
  // d()/d[H2CN]
  dqdci = -k_r * sc[1];
  J[2994] += dqdci; // dwdot[H]/d[H2CN]
  J[3005] -= dqdci; // dwdot[CH3]/d[H2CN]
  J[3023] -= dqdci; // dwdot[N]/d[H2CN]
  J[3034] += dqdci; // dwdot[H2CN]/d[H2CN]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5286] -= dqdT; // dwdot[N]/dT
  J[5297] += dqdT; // dwdot[H2CN]/dT

  // reaction 275: CH3 + N <=> H2 + HCN
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[30];
  k_f = 3700000 * exp(0.15 * logT - (-45.2894999224248) * invT);
  dlnkfdT = 0.15 * invT + (-45.2894999224248) * invT2;
  // reverse
  phi_r = sc[0] * sc[40];
  Kc = exp(-g_RT[0] + g_RT[12] + g_RT[30] - g_RT[40]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[30]) + (h_RT[0] + h_RT[40]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[12] -= q; // CH3
  wdot[30] -= q; // N
  wdot[40] += q; // HCN
  // d()/d[H2]
  dqdci = -k_r * sc[40];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[12] -= dqdci; // dwdot[CH3]/d[H2]
  J[30] -= dqdci; // dwdot[N]/d[H2]
  J[40] += dqdci; // dwdot[HCN]/d[H2]
  // d()/d[CH3]
  dqdci = +k_f * sc[30];
  J[876] += dqdci; // dwdot[H2]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[906] -= dqdci; // dwdot[N]/d[CH3]
  J[916] += dqdci; // dwdot[HCN]/d[CH3]
  // d()/d[N]
  dqdci = +k_f * sc[12];
  J[2190] += dqdci; // dwdot[H2]/d[N]
  J[2202] -= dqdci; // dwdot[CH3]/d[N]
  J[2220] -= dqdci; // dwdot[N]/d[N]
  J[2230] += dqdci; // dwdot[HCN]/d[N]
  // d()/d[HCN]
  dqdci = -k_r * sc[0];
  J[2920] += dqdci; // dwdot[H2]/d[HCN]
  J[2932] -= dqdci; // dwdot[CH3]/d[HCN]
  J[2950] -= dqdci; // dwdot[N]/d[HCN]
  J[2960] += dqdci; // dwdot[HCN]/d[HCN]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5286] -= dqdT; // dwdot[N]/dT
  J[5296] += dqdT; // dwdot[HCN]/dT

  // reaction 276: H + NH3 <=> H2 + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[33];
  k_f = 0.54 * exp(2.4 * logT - (4989.3932414538) * invT);
  dlnkfdT = 2.4 * invT + (4989.3932414538) * invT2;
  // reverse
  phi_r = sc[0] * sc[32];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[32] + g_RT[33]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[33]) + (h_RT[0] + h_RT[32]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[32] += q; // NH2
  wdot[33] -= q; // NH3
  // d()/d[H2]
  dqdci = -k_r * sc[32];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[32] += dqdci; // dwdot[NH2]/d[H2]
  J[33] -= dqdci; // dwdot[NH3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[33];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[105] += dqdci; // dwdot[NH2]/d[H]
  J[106] -= dqdci; // dwdot[NH3]/d[H]
  // d()/d[NH2]
  dqdci = -k_r * sc[0];
  J[2336] += dqdci; // dwdot[H2]/d[NH2]
  J[2337] -= dqdci; // dwdot[H]/d[NH2]
  J[2368] += dqdci; // dwdot[NH2]/d[NH2]
  J[2369] -= dqdci; // dwdot[NH3]/d[NH2]
  // d()/d[NH3]
  dqdci = +k_f * sc[1];
  J[2409] += dqdci; // dwdot[H2]/d[NH3]
  J[2410] -= dqdci; // dwdot[H]/d[NH3]
  J[2441] += dqdci; // dwdot[NH2]/d[NH3]
  J[2442] -= dqdci; // dwdot[NH3]/d[NH3]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5288] += dqdT; // dwdot[NH2]/dT
  J[5289] -= dqdT; // dwdot[NH3]/dT

  // reaction 277: NH3 + OH <=> H2O + NH2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[33];
  k_f = 50 * exp(1.6 * logT - (480.571915843507) * invT);
  dlnkfdT = 1.6 * invT + (480.571915843507) * invT2;
  // reverse
  phi_r = sc[5] * sc[32];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[32] + g_RT[33]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[33]) + (h_RT[5] + h_RT[32]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[32] += q; // NH2
  wdot[33] -= q; // NH3
  // d()/d[OH]
  dqdci = +k_f * sc[33];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[324] += dqdci; // dwdot[NH2]/d[OH]
  J[325] -= dqdci; // dwdot[NH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[32];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[397] += dqdci; // dwdot[NH2]/d[H2O]
  J[398] -= dqdci; // dwdot[NH3]/d[H2O]
  // d()/d[NH2]
  dqdci = -k_r * sc[5];
  J[2340] -= dqdci; // dwdot[OH]/d[NH2]
  J[2341] += dqdci; // dwdot[H2O]/d[NH2]
  J[2368] += dqdci; // dwdot[NH2]/d[NH2]
  J[2369] -= dqdci; // dwdot[NH3]/d[NH2]
  // d()/d[NH3]
  dqdci = +k_f * sc[4];
  J[2413] -= dqdci; // dwdot[OH]/d[NH3]
  J[2414] += dqdci; // dwdot[H2O]/d[NH3]
  J[2441] += dqdci; // dwdot[NH2]/d[NH3]
  J[2442] -= dqdci; // dwdot[NH3]/d[NH3]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5288] += dqdT; // dwdot[NH2]/dT
  J[5289] -= dqdT; // dwdot[NH3]/dT

  // reaction 278: NH3 + O <=> NH2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[33];
  k_f = 9.4 * exp(1.94 * logT - (3250.77966109849) * invT);
  dlnkfdT = 1.94 * invT + (3250.77966109849) * invT2;
  // reverse
  phi_r = sc[4] * sc[32];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[32] + g_RT[33]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[33]) + (h_RT[4] + h_RT[32]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[32] += q; // NH2
  wdot[33] -= q; // NH3
  // d()/d[O]
  dqdci = +k_f * sc[33];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[178] += dqdci; // dwdot[NH2]/d[O]
  J[179] -= dqdci; // dwdot[NH3]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[32];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[324] += dqdci; // dwdot[NH2]/d[OH]
  J[325] -= dqdci; // dwdot[NH3]/d[OH]
  // d()/d[NH2]
  dqdci = -k_r * sc[4];
  J[2338] -= dqdci; // dwdot[O]/d[NH2]
  J[2340] += dqdci; // dwdot[OH]/d[NH2]
  J[2368] += dqdci; // dwdot[NH2]/d[NH2]
  J[2369] -= dqdci; // dwdot[NH3]/d[NH2]
  // d()/d[NH3]
  dqdci = +k_f * sc[2];
  J[2411] -= dqdci; // dwdot[O]/d[NH3]
  J[2413] += dqdci; // dwdot[OH]/d[NH3]
  J[2441] += dqdci; // dwdot[NH2]/d[NH3]
  J[2442] -= dqdci; // dwdot[NH3]/d[NH3]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5288] += dqdT; // dwdot[NH2]/dT
  J[5289] -= dqdT; // dwdot[NH3]/dT

  // reaction 279: CO2 + NH <=> CO + HNO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[31];
  k_f = 10000000 * exp(-(7221.15915429773) * invT);
  dlnkfdT = (7221.15915429773) * invT2;
  // reverse
  phi_r = sc[14] * sc[38];
  Kc = exp(-g_RT[14] + g_RT[15] + g_RT[31] - g_RT[38]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[31]) + (h_RT[14] + h_RT[38]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[15] -= q; // CO2
  wdot[31] -= q; // NH
  wdot[38] += q; // HNO
  // d()/d[CO]
  dqdci = -k_r * sc[38];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1037] -= dqdci; // dwdot[CO2]/d[CO]
  J[1053] -= dqdci; // dwdot[NH]/d[CO]
  J[1060] += dqdci; // dwdot[HNO]/d[CO]
  // d()/d[CO2]
  dqdci = +k_f * sc[31];
  J[1109] += dqdci; // dwdot[CO]/d[CO2]
  J[1110] -= dqdci; // dwdot[CO2]/d[CO2]
  J[1126] -= dqdci; // dwdot[NH]/d[CO2]
  J[1133] += dqdci; // dwdot[HNO]/d[CO2]
  // d()/d[NH]
  dqdci = +k_f * sc[15];
  J[2277] += dqdci; // dwdot[CO]/d[NH]
  J[2278] -= dqdci; // dwdot[CO2]/d[NH]
  J[2294] -= dqdci; // dwdot[NH]/d[NH]
  J[2301] += dqdci; // dwdot[HNO]/d[NH]
  // d()/d[HNO]
  dqdci = -k_r * sc[14];
  J[2788] += dqdci; // dwdot[CO]/d[HNO]
  J[2789] -= dqdci; // dwdot[CO2]/d[HNO]
  J[2805] -= dqdci; // dwdot[NH]/d[HNO]
  J[2812] += dqdci; // dwdot[HNO]/d[HNO]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5271] -= dqdT; // dwdot[CO2]/dT
  J[5287] -= dqdT; // dwdot[NH]/dT
  J[5294] += dqdT; // dwdot[HNO]/dT

  // reaction 280: CN + NO2 <=> NCO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[36] * sc[39];
  k_f = 6160000000 * exp(-0.752 * logT - (173.609749702628) * invT);
  dlnkfdT = -0.752 * invT + (173.609749702628) * invT2;
  // reverse
  phi_r = sc[35] * sc[46];
  Kc = exp(-g_RT[35] + g_RT[36] + g_RT[39] - g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[36] + h_RT[39]) + (h_RT[35] + h_RT[46]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[35] += q; // NO
  wdot[36] -= q; // NO2
  wdot[39] -= q; // CN
  wdot[46] += q; // NCO
  // d()/d[NO]
  dqdci = -k_r * sc[46];
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  J[2591] -= dqdci; // dwdot[NO2]/d[NO]
  J[2594] -= dqdci; // dwdot[CN]/d[NO]
  J[2601] += dqdci; // dwdot[NCO]/d[NO]
  // d()/d[NO2]
  dqdci = +k_f * sc[39];
  J[2663] += dqdci; // dwdot[NO]/d[NO2]
  J[2664] -= dqdci; // dwdot[NO2]/d[NO2]
  J[2667] -= dqdci; // dwdot[CN]/d[NO2]
  J[2674] += dqdci; // dwdot[NCO]/d[NO2]
  // d()/d[CN]
  dqdci = +k_f * sc[36];
  J[2882] += dqdci; // dwdot[NO]/d[CN]
  J[2883] -= dqdci; // dwdot[NO2]/d[CN]
  J[2886] -= dqdci; // dwdot[CN]/d[CN]
  J[2893] += dqdci; // dwdot[NCO]/d[CN]
  // d()/d[NCO]
  dqdci = -k_r * sc[35];
  J[3393] += dqdci; // dwdot[NO]/d[NCO]
  J[3394] -= dqdci; // dwdot[NO2]/d[NCO]
  J[3397] -= dqdci; // dwdot[CN]/d[NCO]
  J[3404] += dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5291] += dqdT; // dwdot[NO]/dT
  J[5292] -= dqdT; // dwdot[NO2]/dT
  J[5295] -= dqdT; // dwdot[CN]/dT
  J[5302] += dqdT; // dwdot[NCO]/dT

  // reaction 281: NCO + NO2 <=> CO2 + N2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[36] * sc[46];
  k_f = 3250000 * exp(-(-354.767749392327) * invT);
  dlnkfdT = (-354.767749392327) * invT2;
  // reverse
  phi_r = sc[15] * sc[37];
  Kc = exp(-g_RT[15] + g_RT[36] - g_RT[37] + g_RT[46]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[36] + h_RT[46]) + (h_RT[15] + h_RT[37]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] += q; // CO2
  wdot[36] -= q; // NO2
  wdot[37] += q; // N2O
  wdot[46] -= q; // NCO
  // d()/d[CO2]
  dqdci = -k_r * sc[37];
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  J[1131] -= dqdci; // dwdot[NO2]/d[CO2]
  J[1132] += dqdci; // dwdot[N2O]/d[CO2]
  J[1141] -= dqdci; // dwdot[NCO]/d[CO2]
  // d()/d[NO2]
  dqdci = +k_f * sc[46];
  J[2643] += dqdci; // dwdot[CO2]/d[NO2]
  J[2664] -= dqdci; // dwdot[NO2]/d[NO2]
  J[2665] += dqdci; // dwdot[N2O]/d[NO2]
  J[2674] -= dqdci; // dwdot[NCO]/d[NO2]
  // d()/d[N2O]
  dqdci = -k_r * sc[15];
  J[2716] += dqdci; // dwdot[CO2]/d[N2O]
  J[2737] -= dqdci; // dwdot[NO2]/d[N2O]
  J[2738] += dqdci; // dwdot[N2O]/d[N2O]
  J[2747] -= dqdci; // dwdot[NCO]/d[N2O]
  // d()/d[NCO]
  dqdci = +k_f * sc[36];
  J[3373] += dqdci; // dwdot[CO2]/d[NCO]
  J[3394] -= dqdci; // dwdot[NO2]/d[NCO]
  J[3395] += dqdci; // dwdot[N2O]/d[NCO]
  J[3404] -= dqdci; // dwdot[NCO]/d[NCO]
  // d()/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5292] -= dqdT; // dwdot[NO2]/dT
  J[5293] += dqdT; // dwdot[N2O]/dT
  J[5302] -= dqdT; // dwdot[NCO]/dT

  // reaction 282: CO2 + N <=> CO + NO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[30];
  k_f = 3000000 * exp(-(5686.34832359333) * invT);
  dlnkfdT = (5686.34832359333) * invT2;
  // reverse
  phi_r = sc[14] * sc[35];
  Kc = exp(-g_RT[14] + g_RT[15] + g_RT[30] - g_RT[35]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[30]) + (h_RT[14] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[15] -= q; // CO2
  wdot[30] -= q; // N
  wdot[35] += q; // NO
  // d()/d[CO]
  dqdci = -k_r * sc[35];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1037] -= dqdci; // dwdot[CO2]/d[CO]
  J[1052] -= dqdci; // dwdot[N]/d[CO]
  J[1057] += dqdci; // dwdot[NO]/d[CO]
  // d()/d[CO2]
  dqdci = +k_f * sc[30];
  J[1109] += dqdci; // dwdot[CO]/d[CO2]
  J[1110] -= dqdci; // dwdot[CO2]/d[CO2]
  J[1125] -= dqdci; // dwdot[N]/d[CO2]
  J[1130] += dqdci; // dwdot[NO]/d[CO2]
  // d()/d[N]
  dqdci = +k_f * sc[15];
  J[2204] += dqdci; // dwdot[CO]/d[N]
  J[2205] -= dqdci; // dwdot[CO2]/d[N]
  J[2220] -= dqdci; // dwdot[N]/d[N]
  J[2225] += dqdci; // dwdot[NO]/d[N]
  // d()/d[NO]
  dqdci = -k_r * sc[14];
  J[2569] += dqdci; // dwdot[CO]/d[NO]
  J[2570] -= dqdci; // dwdot[CO2]/d[NO]
  J[2585] -= dqdci; // dwdot[N]/d[NO]
  J[2590] += dqdci; // dwdot[NO]/d[NO]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5271] -= dqdT; // dwdot[CO2]/dT
  J[5286] -= dqdT; // dwdot[N]/dT
  J[5291] += dqdT; // dwdot[NO]/dT

  // reaction 283: CH3 + O => CO + H + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[12];
  k_f = 33700000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[12] -= q; // CH3
  wdot[14] += q; // CO
  // d()/d[O]
  dqdci = +k_f * sc[12];
  J[146] += dqdci; // dwdot[H2]/d[O]
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[158] -= dqdci; // dwdot[CH3]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  // d()/d[CH3]
  dqdci = +k_f * sc[2];
  J[876] += dqdci; // dwdot[H2]/d[CH3]
  J[877] += dqdci; // dwdot[H]/d[CH3]
  J[878] -= dqdci; // dwdot[O]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[890] += dqdci; // dwdot[CO]/d[CH3]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5270] += dqdT; // dwdot[CO]/dT

  // reaction 284: C2H4 + O <=> CH2CHO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[24];
  k_f = 6.7 * exp(1.83 * logT - (110.707666477038) * invT);
  dlnkfdT = 1.83 * invT + (110.707666477038) * invT2;
  // reverse
  phi_r = sc[1] * sc[51];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[24] - g_RT[51]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[24]) + (h_RT[1] + h_RT[51]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[24] -= q; // C2H4
  wdot[51] += q; // CH2CHO
  // d()/d[H]
  dqdci = -k_r * sc[51];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[75] -= dqdci;  // dwdot[O]/d[H]
  J[97] -= dqdci;  // dwdot[C2H4]/d[H]
  J[124] += dqdci; // dwdot[CH2CHO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[24];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[170] -= dqdci; // dwdot[C2H4]/d[O]
  J[197] += dqdci; // dwdot[CH2CHO]/d[O]
  // d()/d[C2H4]
  dqdci = +k_f * sc[2];
  J[1753] += dqdci; // dwdot[H]/d[C2H4]
  J[1754] -= dqdci; // dwdot[O]/d[C2H4]
  J[1776] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[1803] += dqdci; // dwdot[CH2CHO]/d[C2H4]
  // d()/d[CH2CHO]
  dqdci = -k_r * sc[1];
  J[3724] += dqdci; // dwdot[H]/d[CH2CHO]
  J[3725] -= dqdci; // dwdot[O]/d[CH2CHO]
  J[3747] -= dqdci; // dwdot[C2H4]/d[CH2CHO]
  J[3774] += dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT
  J[5307] += dqdT; // dwdot[CH2CHO]/dT

  // reaction 285: C2H5 + O <=> CH3CHO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[25];
  k_f = 109600000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[52];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[25] - g_RT[52]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[25]) + (h_RT[1] + h_RT[52]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[25] -= q; // C2H5
  wdot[52] += q; // CH3CHO
  // d()/d[H]
  dqdci = -k_r * sc[52];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[75] -= dqdci;  // dwdot[O]/d[H]
  J[98] -= dqdci;  // dwdot[C2H5]/d[H]
  J[125] += dqdci; // dwdot[CH3CHO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[25];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[171] -= dqdci; // dwdot[C2H5]/d[O]
  J[198] += dqdci; // dwdot[CH3CHO]/d[O]
  // d()/d[C2H5]
  dqdci = +k_f * sc[2];
  J[1826] += dqdci; // dwdot[H]/d[C2H5]
  J[1827] -= dqdci; // dwdot[O]/d[C2H5]
  J[1850] -= dqdci; // dwdot[C2H5]/d[C2H5]
  J[1877] += dqdci; // dwdot[CH3CHO]/d[C2H5]
  // d()/d[CH3CHO]
  dqdci = -k_r * sc[1];
  J[3797] += dqdci; // dwdot[H]/d[CH3CHO]
  J[3798] -= dqdci; // dwdot[O]/d[CH3CHO]
  J[3821] -= dqdci; // dwdot[C2H5]/d[CH3CHO]
  J[3848] += dqdci; // dwdot[CH3CHO]/d[CH3CHO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5281] -= dqdT; // dwdot[C2H5]/dT
  J[5308] += dqdT; // dwdot[CH3CHO]/dT

  // reaction 286: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[6];
  k_f = 5000000000 * exp(-(8720.74481839579) * invT);
  dlnkfdT = (8720.74481839579) * invT2;
  // reverse
  phi_r = sc[3] * sc[5];
  Kc = exp(-g_RT[3] + g_RT[4] - g_RT[5] + g_RT[6]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[6]) + (h_RT[3] + h_RT[5]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q; // O2
  wdot[4] -= q; // OH
  wdot[5] += q; // H2O
  wdot[6] -= q; // HO2
  // d()/d[O2]
  dqdci = -k_r * sc[5];
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[223] -= dqdci; // dwdot[OH]/d[O2]
  J[224] += dqdci; // dwdot[H2O]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  // d()/d[OH]
  dqdci = +k_f * sc[6];
  J[295] += dqdci; // dwdot[O2]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[298] -= dqdci; // dwdot[HO2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[3];
  J[368] += dqdci; // dwdot[O2]/d[H2O]
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[371] -= dqdci; // dwdot[HO2]/d[H2O]
  // d()/d[HO2]
  dqdci = +k_f * sc[4];
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[442] -= dqdci; // dwdot[OH]/d[HO2]
  J[443] += dqdci; // dwdot[H2O]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  // d()/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT

  // reaction 287: CH3 + OH => CH2O + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[12];
  k_f = 8000 * exp(0.5 * logT - (-883.145248487283) * invT);
  dlnkfdT = 0.5 * invT + (-883.145248487283) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // H2
  wdot[4] -= q;  // OH
  wdot[12] -= q; // CH3
  wdot[17] += q; // CH2O
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[292] += dqdci; // dwdot[H2]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[304] -= dqdci; // dwdot[CH3]/d[OH]
  J[309] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH3]
  dqdci = +k_f * sc[4];
  J[876] += dqdci; // dwdot[H2]/d[CH3]
  J[880] -= dqdci; // dwdot[OH]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[893] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 289: CH2 + O2 => CO2 + 2 H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 5800000 * exp(-(754.82499870708) * invT);
  dlnkfdT = (754.82499870708) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += 2 * q; // H
  wdot[3] -= q;     // O2
  wdot[10] -= q;    // CH2
  wdot[15] += q;    // CO2
  // d()/d[O2]
  dqdci = +k_f * sc[10];
  J[220] += 2 * dqdci; // dwdot[H]/d[O2]
  J[222] -= dqdci;     // dwdot[O2]/d[O2]
  J[229] -= dqdci;     // dwdot[CH2]/d[O2]
  J[234] += dqdci;     // dwdot[CO2]/d[O2]
  // d()/d[CH2]
  dqdci = +k_f * sc[3];
  J[731] += 2 * dqdci; // dwdot[H]/d[CH2]
  J[733] -= dqdci;     // dwdot[O2]/d[CH2]
  J[740] -= dqdci;     // dwdot[CH2]/d[CH2]
  J[745] += dqdci;     // dwdot[CO2]/d[CH2]
  // d()/dT
  J[5257] += 2 * dqdT; // dwdot[H]/dT
  J[5259] -= dqdT;     // dwdot[O2]/dT
  J[5266] -= dqdT;     // dwdot[CH2]/dT
  J[5271] += dqdT;     // dwdot[CO2]/dT

  // reaction 290: CH2 + O2 <=> CH2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 2400000 * exp(-(754.82499870708) * invT);
  dlnkfdT = (754.82499870708) * invT2;
  // reverse
  phi_r = sc[2] * sc[17];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[10] - g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[10]) + (h_RT[2] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[10] -= q; // CH2
  wdot[17] += q; // CH2O
  // d()/d[O]
  dqdci = -k_r * sc[17];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[156] -= dqdci; // dwdot[CH2]/d[O]
  J[163] += dqdci; // dwdot[CH2O]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[10];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[229] -= dqdci; // dwdot[CH2]/d[O2]
  J[236] += dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[CH2]
  dqdci = +k_f * sc[3];
  J[732] += dqdci; // dwdot[O]/d[CH2]
  J[733] -= dqdci; // dwdot[O2]/d[CH2]
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[747] += dqdci; // dwdot[CH2O]/d[CH2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[2];
  J[1243] += dqdci; // dwdot[O]/d[CH2O]
  J[1244] -= dqdci; // dwdot[O2]/d[CH2O]
  J[1251] -= dqdci; // dwdot[CH2]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 291: 2 CH2 => C2H2 + 2 H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 200000000 * exp(-(5529.84794052807) * invT);
  dlnkfdT = (5529.84794052807) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += 2 * q;  // H
  wdot[10] -= 2 * q; // CH2
  wdot[22] += q;     // C2H2
  // d()/d[CH2]
  dqdci = +k_f * 2.000000 * sc[10];
  J[731] += 2 * dqdci;  // dwdot[H]/d[CH2]
  J[740] += -2 * dqdci; // dwdot[CH2]/d[CH2]
  J[752] += dqdci;      // dwdot[C2H2]/d[CH2]
  // d()/dT
  J[5257] += 2 * dqdT;  // dwdot[H]/dT
  J[5266] += -2 * dqdT; // dwdot[CH2]/dT
  J[5278] += dqdT;      // dwdot[C2H2]/dT

  // reaction 292: CH2(S) + H2O => CH2O + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[11];
  k_f = 68200 * exp(0.25 * logT - (-470.507582527413) * invT);
  dlnkfdT = 0.25 * invT + (-470.507582527413) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // H2
  wdot[5] -= q;  // H2O
  wdot[11] -= q; // CH2(S)
  wdot[17] += q; // CH2O
  // d()/d[H2O]
  dqdci = +k_f * sc[11];
  J[365] += dqdci; // dwdot[H2]/d[H2O]
  J[370] -= dqdci; // dwdot[H2O]/d[H2O]
  J[376] -= dqdci; // dwdot[CH2(S)]/d[H2O]
  J[382] += dqdci; // dwdot[CH2O]/d[H2O]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[5];
  J[803] += dqdci; // dwdot[H2]/d[CH2(S)]
  J[808] -= dqdci; // dwdot[H2O]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[820] += dqdci; // dwdot[CH2O]/d[CH2(S)]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5261] -= dqdT; // dwdot[H2O]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT

  // reaction 293: C2H3 + O2 <=> CH2CHO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[23];
  k_f = 303000 * exp(0.29 * logT - (5.53538332385192) * invT);
  dlnkfdT = 0.29 * invT + (5.53538332385192) * invT2;
  // reverse
  phi_r = sc[2] * sc[51];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[23] - g_RT[51]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[23]) + (h_RT[2] + h_RT[51]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[23] -= q; // C2H3
  wdot[51] += q; // CH2CHO
  // d()/d[O]
  dqdci = -k_r * sc[51];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[169] -= dqdci; // dwdot[C2H3]/d[O]
  J[197] += dqdci; // dwdot[CH2CHO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[23];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[242] -= dqdci; // dwdot[C2H3]/d[O2]
  J[270] += dqdci; // dwdot[CH2CHO]/d[O2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[3];
  J[1681] += dqdci; // dwdot[O]/d[C2H3]
  J[1682] -= dqdci; // dwdot[O2]/d[C2H3]
  J[1702] -= dqdci; // dwdot[C2H3]/d[C2H3]
  J[1730] += dqdci; // dwdot[CH2CHO]/d[C2H3]
  // d()/d[CH2CHO]
  dqdci = -k_r * sc[2];
  J[3725] += dqdci; // dwdot[O]/d[CH2CHO]
  J[3726] -= dqdci; // dwdot[O2]/d[CH2CHO]
  J[3746] -= dqdci; // dwdot[C2H3]/d[CH2CHO]
  J[3774] += dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT
  J[5307] += dqdT; // dwdot[CH2CHO]/dT

  // reaction 294: C2H3 + O2 <=> C2H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[23];
  k_f = 1.337 * exp(1.61 * logT - (-193.235199669012) * invT);
  dlnkfdT = 1.61 * invT + (-193.235199669012) * invT2;
  // reverse
  phi_r = sc[6] * sc[22];
  Kc = exp(g_RT[3] - g_RT[6] - g_RT[22] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[23]) + (h_RT[6] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[22] += q; // C2H2
  wdot[23] -= q; // C2H3
  // d()/d[O2]
  dqdci = +k_f * sc[23];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  J[241] += dqdci; // dwdot[C2H2]/d[O2]
  J[242] -= dqdci; // dwdot[C2H3]/d[O2]
  // d()/d[HO2]
  dqdci = -k_r * sc[22];
  J[441] -= dqdci; // dwdot[O2]/d[HO2]
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[460] += dqdci; // dwdot[C2H2]/d[HO2]
  J[461] -= dqdci; // dwdot[C2H3]/d[HO2]
  // d()/d[C2H2]
  dqdci = -k_r * sc[6];
  J[1609] -= dqdci; // dwdot[O2]/d[C2H2]
  J[1612] += dqdci; // dwdot[HO2]/d[C2H2]
  J[1628] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[1629] -= dqdci; // dwdot[C2H3]/d[C2H2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[3];
  J[1682] -= dqdci; // dwdot[O2]/d[C2H3]
  J[1685] += dqdci; // dwdot[HO2]/d[C2H3]
  J[1701] += dqdci; // dwdot[C2H2]/d[C2H3]
  J[1702] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT

  // reaction 295: CH3CHO + O <=> CH2CHO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[52];
  k_f = 2920000 * exp(-(909.815731774933) * invT);
  dlnkfdT = (909.815731774933) * invT2;
  // reverse
  phi_r = sc[4] * sc[51];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[51] + g_RT[52]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[52]) + (h_RT[4] + h_RT[51]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[51] += q; // CH2CHO
  wdot[52] -= q; // CH3CHO
  // d()/d[O]
  dqdci = +k_f * sc[52];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[197] += dqdci; // dwdot[CH2CHO]/d[O]
  J[198] -= dqdci; // dwdot[CH3CHO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[51];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[343] += dqdci; // dwdot[CH2CHO]/d[OH]
  J[344] -= dqdci; // dwdot[CH3CHO]/d[OH]
  // d()/d[CH2CHO]
  dqdci = -k_r * sc[4];
  J[3725] -= dqdci; // dwdot[O]/d[CH2CHO]
  J[3727] += dqdci; // dwdot[OH]/d[CH2CHO]
  J[3774] += dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  J[3775] -= dqdci; // dwdot[CH3CHO]/d[CH2CHO]
  // d()/d[CH3CHO]
  dqdci = +k_f * sc[2];
  J[3798] -= dqdci; // dwdot[O]/d[CH3CHO]
  J[3800] += dqdci; // dwdot[OH]/d[CH3CHO]
  J[3847] += dqdci; // dwdot[CH2CHO]/d[CH3CHO]
  J[3848] -= dqdci; // dwdot[CH3CHO]/d[CH3CHO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5307] += dqdT; // dwdot[CH2CHO]/dT
  J[5308] -= dqdT; // dwdot[CH3CHO]/dT

  // reaction 296: CH3CHO + O => CH3 + CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[52];
  k_f = 2920000 * exp(-(909.815731774933) * invT);
  dlnkfdT = (909.815731774933) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[12] += q; // CH3
  wdot[14] += q; // CO
  wdot[52] -= q; // CH3CHO
  // d()/d[O]
  dqdci = +k_f * sc[52];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[158] += dqdci; // dwdot[CH3]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[198] -= dqdci; // dwdot[CH3CHO]/d[O]
  // d()/d[CH3CHO]
  dqdci = +k_f * sc[2];
  J[3798] -= dqdci; // dwdot[O]/d[CH3CHO]
  J[3800] += dqdci; // dwdot[OH]/d[CH3CHO]
  J[3808] += dqdci; // dwdot[CH3]/d[CH3CHO]
  J[3810] += dqdci; // dwdot[CO]/d[CH3CHO]
  J[3848] -= dqdci; // dwdot[CH3CHO]/d[CH3CHO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5308] -= dqdT; // dwdot[CH3CHO]/dT

  // reaction 297: CH3CHO + O2 => CH3 + CO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[52];
  k_f = 30100000 * exp(-(19700.9324662548) * invT);
  dlnkfdT = (19700.9324662548) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[3] -= q;  // O2
  wdot[6] += q;  // HO2
  wdot[12] += q; // CH3
  wdot[14] += q; // CO
  wdot[52] -= q; // CH3CHO
  // d()/d[O2]
  dqdci = +k_f * sc[52];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[225] += dqdci; // dwdot[HO2]/d[O2]
  J[231] += dqdci; // dwdot[CH3]/d[O2]
  J[233] += dqdci; // dwdot[CO]/d[O2]
  J[271] -= dqdci; // dwdot[CH3CHO]/d[O2]
  // d()/d[CH3CHO]
  dqdci = +k_f * sc[3];
  J[3799] -= dqdci; // dwdot[O2]/d[CH3CHO]
  J[3802] += dqdci; // dwdot[HO2]/d[CH3CHO]
  J[3808] += dqdci; // dwdot[CH3]/d[CH3CHO]
  J[3810] += dqdci; // dwdot[CO]/d[CH3CHO]
  J[3848] -= dqdci; // dwdot[CH3CHO]/d[CH3CHO]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5308] -= dqdT; // dwdot[CH3CHO]/dT

  // reaction 298: CH3CHO + H <=> CH2CHO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[52];
  k_f = 2050 * exp(1.16 * logT - (1210.23608126035) * invT);
  dlnkfdT = 1.16 * invT + (1210.23608126035) * invT2;
  // reverse
  phi_r = sc[0] * sc[51];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[51] + g_RT[52]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[52]) + (h_RT[0] + h_RT[51]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[51] += q; // CH2CHO
  wdot[52] -= q; // CH3CHO
  // d()/d[H2]
  dqdci = -k_r * sc[51];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[51] += dqdci; // dwdot[CH2CHO]/d[H2]
  J[52] -= dqdci; // dwdot[CH3CHO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[52];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[124] += dqdci; // dwdot[CH2CHO]/d[H]
  J[125] -= dqdci; // dwdot[CH3CHO]/d[H]
  // d()/d[CH2CHO]
  dqdci = -k_r * sc[0];
  J[3723] += dqdci; // dwdot[H2]/d[CH2CHO]
  J[3724] -= dqdci; // dwdot[H]/d[CH2CHO]
  J[3774] += dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  J[3775] -= dqdci; // dwdot[CH3CHO]/d[CH2CHO]
  // d()/d[CH3CHO]
  dqdci = +k_f * sc[1];
  J[3796] += dqdci; // dwdot[H2]/d[CH3CHO]
  J[3797] -= dqdci; // dwdot[H]/d[CH3CHO]
  J[3847] += dqdci; // dwdot[CH2CHO]/d[CH3CHO]
  J[3848] -= dqdci; // dwdot[CH3CHO]/d[CH3CHO]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5307] += dqdT; // dwdot[CH2CHO]/dT
  J[5308] -= dqdT; // dwdot[CH3CHO]/dT

  // reaction 299: CH3CHO + H => CH3 + CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[52];
  k_f = 2050 * exp(1.16 * logT - (1210.23608126035) * invT);
  dlnkfdT = 1.16 * invT + (1210.23608126035) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[12] += q; // CH3
  wdot[14] += q; // CO
  wdot[52] -= q; // CH3CHO
  // d()/d[H]
  dqdci = +k_f * sc[52];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[85] += dqdci;  // dwdot[CH3]/d[H]
  J[87] += dqdci;  // dwdot[CO]/d[H]
  J[125] -= dqdci; // dwdot[CH3CHO]/d[H]
  // d()/d[CH3CHO]
  dqdci = +k_f * sc[1];
  J[3796] += dqdci; // dwdot[H2]/d[CH3CHO]
  J[3797] -= dqdci; // dwdot[H]/d[CH3CHO]
  J[3808] += dqdci; // dwdot[CH3]/d[CH3CHO]
  J[3810] += dqdci; // dwdot[CO]/d[CH3CHO]
  J[3848] -= dqdci; // dwdot[CH3CHO]/d[CH3CHO]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5308] -= dqdT; // dwdot[CH3CHO]/dT

  // reaction 300: CH3CHO + OH => CH3 + CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[52];
  k_f = 23430 * exp(0.73 * logT - (-560.080149040653) * invT);
  dlnkfdT = 0.73 * invT + (-560.080149040653) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[12] += q; // CH3
  wdot[14] += q; // CO
  wdot[52] -= q; // CH3CHO
  // d()/d[OH]
  dqdci = +k_f * sc[52];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[304] += dqdci; // dwdot[CH3]/d[OH]
  J[306] += dqdci; // dwdot[CO]/d[OH]
  J[344] -= dqdci; // dwdot[CH3CHO]/d[OH]
  // d()/d[CH3CHO]
  dqdci = +k_f * sc[4];
  J[3800] -= dqdci; // dwdot[OH]/d[CH3CHO]
  J[3801] += dqdci; // dwdot[H2O]/d[CH3CHO]
  J[3808] += dqdci; // dwdot[CH3]/d[CH3CHO]
  J[3810] += dqdci; // dwdot[CO]/d[CH3CHO]
  J[3848] -= dqdci; // dwdot[CH3CHO]/d[CH3CHO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5308] -= dqdT; // dwdot[CH3CHO]/dT

  // reaction 301: CH3CHO + HO2 => CH3 + CO + H2O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[52];
  k_f = 3010000 * exp(-(5999.85230638967) * invT);
  dlnkfdT = (5999.85230638967) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[6] -= q;  // HO2
  wdot[7] += q;  // H2O2
  wdot[12] += q; // CH3
  wdot[14] += q; // CO
  wdot[52] -= q; // CH3CHO
  // d()/d[HO2]
  dqdci = +k_f * sc[52];
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[445] += dqdci; // dwdot[H2O2]/d[HO2]
  J[450] += dqdci; // dwdot[CH3]/d[HO2]
  J[452] += dqdci; // dwdot[CO]/d[HO2]
  J[490] -= dqdci; // dwdot[CH3CHO]/d[HO2]
  // d()/d[CH3CHO]
  dqdci = +k_f * sc[6];
  J[3802] -= dqdci; // dwdot[HO2]/d[CH3CHO]
  J[3803] += dqdci; // dwdot[H2O2]/d[CH3CHO]
  J[3808] += dqdci; // dwdot[CH3]/d[CH3CHO]
  J[3810] += dqdci; // dwdot[CO]/d[CH3CHO]
  J[3848] -= dqdci; // dwdot[CH3CHO]/d[CH3CHO]
  // d()/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5263] += dqdT; // dwdot[H2O2]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5308] -= dqdT; // dwdot[CH3CHO]/dT

  // reaction 304: CH2CHO + O => CH2 + CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[51];
  k_f = 150000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[10] += q; // CH2
  wdot[15] += q; // CO2
  wdot[51] -= q; // CH2CHO
  // d()/d[O]
  dqdci = +k_f * sc[51];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[156] += dqdci; // dwdot[CH2]/d[O]
  J[161] += dqdci; // dwdot[CO2]/d[O]
  J[197] -= dqdci; // dwdot[CH2CHO]/d[O]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[2];
  J[3724] += dqdci; // dwdot[H]/d[CH2CHO]
  J[3725] -= dqdci; // dwdot[O]/d[CH2CHO]
  J[3733] += dqdci; // dwdot[CH2]/d[CH2CHO]
  J[3738] += dqdci; // dwdot[CO2]/d[CH2CHO]
  J[3774] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5266] += dqdT; // dwdot[CH2]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5307] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 305: CH2CHO + O2 => CH2O + CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[51];
  k_f = 18100;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[3] -= q;  // O2
  wdot[4] += q;  // OH
  wdot[14] += q; // CO
  wdot[17] += q; // CH2O
  wdot[51] -= q; // CH2CHO
  // d()/d[O2]
  dqdci = +k_f * sc[51];
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[223] += dqdci; // dwdot[OH]/d[O2]
  J[233] += dqdci; // dwdot[CO]/d[O2]
  J[236] += dqdci; // dwdot[CH2O]/d[O2]
  J[270] -= dqdci; // dwdot[CH2CHO]/d[O2]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[3];
  J[3726] -= dqdci; // dwdot[O2]/d[CH2CHO]
  J[3727] += dqdci; // dwdot[OH]/d[CH2CHO]
  J[3737] += dqdci; // dwdot[CO]/d[CH2CHO]
  J[3740] += dqdci; // dwdot[CH2O]/d[CH2CHO]
  J[3774] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5307] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 306: CH2CHO + O2 => 2 HCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[51];
  k_f = 23500;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[3] -= q;      // O2
  wdot[4] += q;      // OH
  wdot[16] += 2 * q; // HCO
  wdot[51] -= q;     // CH2CHO
  // d()/d[O2]
  dqdci = +k_f * sc[51];
  J[222] -= dqdci;     // dwdot[O2]/d[O2]
  J[223] += dqdci;     // dwdot[OH]/d[O2]
  J[235] += 2 * dqdci; // dwdot[HCO]/d[O2]
  J[270] -= dqdci;     // dwdot[CH2CHO]/d[O2]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[3];
  J[3726] -= dqdci;     // dwdot[O2]/d[CH2CHO]
  J[3727] += dqdci;     // dwdot[OH]/d[CH2CHO]
  J[3739] += 2 * dqdci; // dwdot[HCO]/d[CH2CHO]
  J[3774] -= dqdci;     // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[5259] -= dqdT;     // dwdot[O2]/dT
  J[5260] += dqdT;     // dwdot[OH]/dT
  J[5272] += 2 * dqdT; // dwdot[HCO]/dT
  J[5307] -= dqdT;     // dwdot[CH2CHO]/dT

  // reaction 307: CH2CHO + H <=> CH3 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[51];
  k_f = 22000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[12] * sc[16];
  Kc = exp(g_RT[1] - g_RT[12] - g_RT[16] + g_RT[51]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[51]) + (h_RT[12] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[12] += q; // CH3
  wdot[16] += q; // HCO
  wdot[51] -= q; // CH2CHO
  // d()/d[H]
  dqdci = +k_f * sc[51];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[85] += dqdci;  // dwdot[CH3]/d[H]
  J[89] += dqdci;  // dwdot[HCO]/d[H]
  J[124] -= dqdci; // dwdot[CH2CHO]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[16];
  J[877] -= dqdci; // dwdot[H]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[892] += dqdci; // dwdot[HCO]/d[CH3]
  J[927] -= dqdci; // dwdot[CH2CHO]/d[CH3]
  // d()/d[HCO]
  dqdci = -k_r * sc[12];
  J[1169] -= dqdci; // dwdot[H]/d[HCO]
  J[1180] += dqdci; // dwdot[CH3]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1219] -= dqdci; // dwdot[CH2CHO]/d[HCO]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[1];
  J[3724] -= dqdci; // dwdot[H]/d[CH2CHO]
  J[3735] += dqdci; // dwdot[CH3]/d[CH2CHO]
  J[3739] += dqdci; // dwdot[HCO]/d[CH2CHO]
  J[3774] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5307] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 308: CH2CHO + H <=> CH2CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[51];
  k_f = 11000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[28];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[28] + g_RT[51]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[51]) + (h_RT[0] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[28] += q; // CH2CO
  wdot[51] -= q; // CH2CHO
  // d()/d[H2]
  dqdci = -k_r * sc[28];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[28] += dqdci; // dwdot[CH2CO]/d[H2]
  J[51] -= dqdci; // dwdot[CH2CHO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[51];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[101] += dqdci; // dwdot[CH2CO]/d[H]
  J[124] -= dqdci; // dwdot[CH2CHO]/d[H]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[0];
  J[2044] += dqdci; // dwdot[H2]/d[CH2CO]
  J[2045] -= dqdci; // dwdot[H]/d[CH2CO]
  J[2072] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[2095] -= dqdci; // dwdot[CH2CHO]/d[CH2CO]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[1];
  J[3723] += dqdci; // dwdot[H2]/d[CH2CHO]
  J[3724] -= dqdci; // dwdot[H]/d[CH2CHO]
  J[3751] += dqdci; // dwdot[CH2CO]/d[CH2CHO]
  J[3774] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5284] += dqdT; // dwdot[CH2CO]/dT
  J[5307] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 309: CH2CHO + OH <=> CH2CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[51];
  k_f = 12000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[5] * sc[28];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[28] + g_RT[51]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[51]) + (h_RT[5] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[28] += q; // CH2CO
  wdot[51] -= q; // CH2CHO
  // d()/d[OH]
  dqdci = +k_f * sc[51];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[320] += dqdci; // dwdot[CH2CO]/d[OH]
  J[343] -= dqdci; // dwdot[CH2CHO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[28];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[393] += dqdci; // dwdot[CH2CO]/d[H2O]
  J[416] -= dqdci; // dwdot[CH2CHO]/d[H2O]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[5];
  J[2048] -= dqdci; // dwdot[OH]/d[CH2CO]
  J[2049] += dqdci; // dwdot[H2O]/d[CH2CO]
  J[2072] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[2095] -= dqdci; // dwdot[CH2CHO]/d[CH2CO]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[4];
  J[3727] -= dqdci; // dwdot[OH]/d[CH2CHO]
  J[3728] += dqdci; // dwdot[H2O]/d[CH2CHO]
  J[3751] += dqdci; // dwdot[CH2CO]/d[CH2CHO]
  J[3774] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5284] += dqdT; // dwdot[CH2CO]/dT
  J[5307] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 310: CH2CHO + OH <=> CH2OH + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[51];
  k_f = 30100000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[16] * sc[18];
  Kc = exp(g_RT[4] - g_RT[16] - g_RT[18] + g_RT[51]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[51]) + (h_RT[16] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[16] += q; // HCO
  wdot[18] += q; // CH2OH
  wdot[51] -= q; // CH2CHO
  // d()/d[OH]
  dqdci = +k_f * sc[51];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[308] += dqdci; // dwdot[HCO]/d[OH]
  J[310] += dqdci; // dwdot[CH2OH]/d[OH]
  J[343] -= dqdci; // dwdot[CH2CHO]/d[OH]
  // d()/d[HCO]
  dqdci = -k_r * sc[18];
  J[1172] -= dqdci; // dwdot[OH]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1186] += dqdci; // dwdot[CH2OH]/d[HCO]
  J[1219] -= dqdci; // dwdot[CH2CHO]/d[HCO]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[16];
  J[1318] -= dqdci; // dwdot[OH]/d[CH2OH]
  J[1330] += dqdci; // dwdot[HCO]/d[CH2OH]
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1365] -= dqdci; // dwdot[CH2CHO]/d[CH2OH]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[4];
  J[3727] -= dqdci; // dwdot[OH]/d[CH2CHO]
  J[3739] += dqdci; // dwdot[HCO]/d[CH2CHO]
  J[3741] += dqdci; // dwdot[CH2OH]/d[CH2CHO]
  J[3774] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5307] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 312: C3H8 + O <=> C3H7 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[50];
  k_f = 0.193 * exp(2.68 * logT - (1869.95313013034) * invT);
  dlnkfdT = 2.68 * invT + (1869.95313013034) * invT2;
  // reverse
  phi_r = sc[4] * sc[49];
  Kc = exp(g_RT[2] - g_RT[4] - g_RT[49] + g_RT[50]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[50]) + (h_RT[4] + h_RT[49]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[49] += q; // C3H7
  wdot[50] -= q; // C3H8
  // d()/d[O]
  dqdci = +k_f * sc[50];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[195] += dqdci; // dwdot[C3H7]/d[O]
  J[196] -= dqdci; // dwdot[C3H8]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[49];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[341] += dqdci; // dwdot[C3H7]/d[OH]
  J[342] -= dqdci; // dwdot[C3H8]/d[OH]
  // d()/d[C3H7]
  dqdci = -k_r * sc[4];
  J[3579] -= dqdci; // dwdot[O]/d[C3H7]
  J[3581] += dqdci; // dwdot[OH]/d[C3H7]
  J[3626] += dqdci; // dwdot[C3H7]/d[C3H7]
  J[3627] -= dqdci; // dwdot[C3H8]/d[C3H7]
  // d()/d[C3H8]
  dqdci = +k_f * sc[2];
  J[3652] -= dqdci; // dwdot[O]/d[C3H8]
  J[3654] += dqdci; // dwdot[OH]/d[C3H8]
  J[3699] += dqdci; // dwdot[C3H7]/d[C3H8]
  J[3700] -= dqdci; // dwdot[C3H8]/d[C3H8]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5305] += dqdT; // dwdot[C3H7]/dT
  J[5306] -= dqdT; // dwdot[C3H8]/dT

  // reaction 313: C3H8 + H <=> C3H7 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[50];
  k_f = 1.32 * exp(2.54 * logT - (3399.73179417669) * invT);
  dlnkfdT = 2.54 * invT + (3399.73179417669) * invT2;
  // reverse
  phi_r = sc[0] * sc[49];
  Kc = exp(-g_RT[0] + g_RT[1] - g_RT[49] + g_RT[50]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[50]) + (h_RT[0] + h_RT[49]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[49] += q; // C3H7
  wdot[50] -= q; // C3H8
  // d()/d[H2]
  dqdci = -k_r * sc[49];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[49] += dqdci; // dwdot[C3H7]/d[H2]
  J[50] -= dqdci; // dwdot[C3H8]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[50];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[122] += dqdci; // dwdot[C3H7]/d[H]
  J[123] -= dqdci; // dwdot[C3H8]/d[H]
  // d()/d[C3H7]
  dqdci = -k_r * sc[0];
  J[3577] += dqdci; // dwdot[H2]/d[C3H7]
  J[3578] -= dqdci; // dwdot[H]/d[C3H7]
  J[3626] += dqdci; // dwdot[C3H7]/d[C3H7]
  J[3627] -= dqdci; // dwdot[C3H8]/d[C3H7]
  // d()/d[C3H8]
  dqdci = +k_f * sc[1];
  J[3650] += dqdci; // dwdot[H2]/d[C3H8]
  J[3651] -= dqdci; // dwdot[H]/d[C3H8]
  J[3699] += dqdci; // dwdot[C3H7]/d[C3H8]
  J[3700] -= dqdci; // dwdot[C3H8]/d[C3H8]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5305] += dqdT; // dwdot[C3H7]/dT
  J[5306] -= dqdT; // dwdot[C3H8]/dT

  // reaction 314: C3H8 + OH <=> C3H7 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[50];
  k_f = 31.6 * exp(1.8 * logT - (470.004365861608) * invT);
  dlnkfdT = 1.8 * invT + (470.004365861608) * invT2;
  // reverse
  phi_r = sc[5] * sc[49];
  Kc = exp(g_RT[4] - g_RT[5] - g_RT[49] + g_RT[50]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[50]) + (h_RT[5] + h_RT[49]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[49] += q; // C3H7
  wdot[50] -= q; // C3H8
  // d()/d[OH]
  dqdci = +k_f * sc[50];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[341] += dqdci; // dwdot[C3H7]/d[OH]
  J[342] -= dqdci; // dwdot[C3H8]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[49];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[414] += dqdci; // dwdot[C3H7]/d[H2O]
  J[415] -= dqdci; // dwdot[C3H8]/d[H2O]
  // d()/d[C3H7]
  dqdci = -k_r * sc[5];
  J[3581] -= dqdci; // dwdot[OH]/d[C3H7]
  J[3582] += dqdci; // dwdot[H2O]/d[C3H7]
  J[3626] += dqdci; // dwdot[C3H7]/d[C3H7]
  J[3627] -= dqdci; // dwdot[C3H8]/d[C3H7]
  // d()/d[C3H8]
  dqdci = +k_f * sc[4];
  J[3654] -= dqdci; // dwdot[OH]/d[C3H8]
  J[3655] += dqdci; // dwdot[H2O]/d[C3H8]
  J[3699] += dqdci; // dwdot[C3H7]/d[C3H8]
  J[3700] -= dqdci; // dwdot[C3H8]/d[C3H8]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5305] += dqdT; // dwdot[C3H7]/dT
  J[5306] -= dqdT; // dwdot[C3H8]/dT

  // reaction 315: C3H7 + H2O2 <=> C3H8 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[49];
  k_f = 0.000378 * exp(2.72 * logT - (754.82499870708) * invT);
  dlnkfdT = 2.72 * invT + (754.82499870708) * invT2;
  // reverse
  phi_r = sc[6] * sc[50];
  Kc = exp(-g_RT[6] + g_RT[7] + g_RT[49] - g_RT[50]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[49]) + (h_RT[6] + h_RT[50]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[49] -= q; // C3H7
  wdot[50] += q; // C3H8
  // d()/d[HO2]
  dqdci = -k_r * sc[50];
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[487] -= dqdci; // dwdot[C3H7]/d[HO2]
  J[488] += dqdci; // dwdot[C3H8]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[49];
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[560] -= dqdci; // dwdot[C3H7]/d[H2O2]
  J[561] += dqdci; // dwdot[C3H8]/d[H2O2]
  // d()/d[C3H7]
  dqdci = +k_f * sc[7];
  J[3583] += dqdci; // dwdot[HO2]/d[C3H7]
  J[3584] -= dqdci; // dwdot[H2O2]/d[C3H7]
  J[3626] -= dqdci; // dwdot[C3H7]/d[C3H7]
  J[3627] += dqdci; // dwdot[C3H8]/d[C3H7]
  // d()/d[C3H8]
  dqdci = -k_r * sc[6];
  J[3656] += dqdci; // dwdot[HO2]/d[C3H8]
  J[3657] -= dqdci; // dwdot[H2O2]/d[C3H8]
  J[3699] -= dqdci; // dwdot[C3H7]/d[C3H8]
  J[3700] += dqdci; // dwdot[C3H8]/d[C3H8]
  // d()/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT
  J[5305] -= dqdT; // dwdot[C3H7]/dT
  J[5306] += dqdT; // dwdot[C3H8]/dT

  // reaction 316: C3H8 + CH3 <=> C3H7 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[50];
  k_f = 9.03e-07 * exp(3.65 * logT - (3600.01202716696) * invT);
  dlnkfdT = 3.65 * invT + (3600.01202716696) * invT2;
  // reverse
  phi_r = sc[13] * sc[49];
  Kc = exp(g_RT[12] - g_RT[13] - g_RT[49] + g_RT[50]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[50]) + (h_RT[13] + h_RT[49]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[49] += q; // C3H7
  wdot[50] -= q; // C3H8
  // d()/d[CH3]
  dqdci = +k_f * sc[50];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[925] += dqdci; // dwdot[C3H7]/d[CH3]
  J[926] -= dqdci; // dwdot[C3H8]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[49];
  J[961] -= dqdci; // dwdot[CH3]/d[CH4]
  J[962] += dqdci; // dwdot[CH4]/d[CH4]
  J[998] += dqdci; // dwdot[C3H7]/d[CH4]
  J[999] -= dqdci; // dwdot[C3H8]/d[CH4]
  // d()/d[C3H7]
  dqdci = -k_r * sc[13];
  J[3589] -= dqdci; // dwdot[CH3]/d[C3H7]
  J[3590] += dqdci; // dwdot[CH4]/d[C3H7]
  J[3626] += dqdci; // dwdot[C3H7]/d[C3H7]
  J[3627] -= dqdci; // dwdot[C3H8]/d[C3H7]
  // d()/d[C3H8]
  dqdci = +k_f * sc[12];
  J[3662] -= dqdci; // dwdot[CH3]/d[C3H8]
  J[3663] += dqdci; // dwdot[CH4]/d[C3H8]
  J[3699] += dqdci; // dwdot[C3H7]/d[C3H8]
  J[3700] -= dqdci; // dwdot[C3H8]/d[C3H8]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5305] += dqdT; // dwdot[C3H7]/dT
  J[5306] -= dqdT; // dwdot[C3H8]/dT

  // reaction 318: C3H7 + O <=> C2H5 + CH2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[49];
  k_f = 96400000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[17] * sc[25];
  Kc = exp(g_RT[2] - g_RT[17] - g_RT[25] + g_RT[49]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[49]) + (h_RT[17] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[17] += q; // CH2O
  wdot[25] += q; // C2H5
  wdot[49] -= q; // C3H7
  // d()/d[O]
  dqdci = +k_f * sc[49];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[163] += dqdci; // dwdot[CH2O]/d[O]
  J[171] += dqdci; // dwdot[C2H5]/d[O]
  J[195] -= dqdci; // dwdot[C3H7]/d[O]
  // d()/d[CH2O]
  dqdci = -k_r * sc[25];
  J[1243] -= dqdci; // dwdot[O]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1266] += dqdci; // dwdot[C2H5]/d[CH2O]
  J[1290] -= dqdci; // dwdot[C3H7]/d[CH2O]
  // d()/d[C2H5]
  dqdci = -k_r * sc[17];
  J[1827] -= dqdci; // dwdot[O]/d[C2H5]
  J[1842] += dqdci; // dwdot[CH2O]/d[C2H5]
  J[1850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1874] -= dqdci; // dwdot[C3H7]/d[C2H5]
  // d()/d[C3H7]
  dqdci = +k_f * sc[2];
  J[3579] -= dqdci; // dwdot[O]/d[C3H7]
  J[3594] += dqdci; // dwdot[CH2O]/d[C3H7]
  J[3602] += dqdci; // dwdot[C2H5]/d[C3H7]
  J[3626] -= dqdci; // dwdot[C3H7]/d[C3H7]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5305] -= dqdT; // dwdot[C3H7]/dT

  // reaction 320: C3H7 + H <=> C2H5 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[49];
  k_f = 4.06 * exp(2.19 * logT - (447.8628325662) * invT);
  dlnkfdT = 2.19 * invT + (447.8628325662) * invT2;
  // reverse
  phi_r = sc[12] * sc[25];
  Kc = exp(g_RT[1] - g_RT[12] - g_RT[25] + g_RT[49]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[49]) + (h_RT[12] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[12] += q; // CH3
  wdot[25] += q; // C2H5
  wdot[49] -= q; // C3H7
  // d()/d[H]
  dqdci = +k_f * sc[49];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[85] += dqdci;  // dwdot[CH3]/d[H]
  J[98] += dqdci;  // dwdot[C2H5]/d[H]
  J[122] -= dqdci; // dwdot[C3H7]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[25];
  J[877] -= dqdci; // dwdot[H]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[901] += dqdci; // dwdot[C2H5]/d[CH3]
  J[925] -= dqdci; // dwdot[C3H7]/d[CH3]
  // d()/d[C2H5]
  dqdci = -k_r * sc[12];
  J[1826] -= dqdci; // dwdot[H]/d[C2H5]
  J[1837] += dqdci; // dwdot[CH3]/d[C2H5]
  J[1850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1874] -= dqdci; // dwdot[C3H7]/d[C2H5]
  // d()/d[C3H7]
  dqdci = +k_f * sc[1];
  J[3578] -= dqdci; // dwdot[H]/d[C3H7]
  J[3589] += dqdci; // dwdot[CH3]/d[C3H7]
  J[3602] += dqdci; // dwdot[C2H5]/d[C3H7]
  J[3626] -= dqdci; // dwdot[C3H7]/d[C3H7]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5305] -= dqdT; // dwdot[C3H7]/dT

  // reaction 321: C3H7 + OH <=> C2H5 + CH2OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[49];
  k_f = 24100000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[18] * sc[25];
  Kc = exp(g_RT[4] - g_RT[18] - g_RT[25] + g_RT[49]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[49]) + (h_RT[18] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[18] += q; // CH2OH
  wdot[25] += q; // C2H5
  wdot[49] -= q; // C3H7
  // d()/d[OH]
  dqdci = +k_f * sc[49];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[310] += dqdci; // dwdot[CH2OH]/d[OH]
  J[317] += dqdci; // dwdot[C2H5]/d[OH]
  J[341] -= dqdci; // dwdot[C3H7]/d[OH]
  // d()/d[CH2OH]
  dqdci = -k_r * sc[25];
  J[1318] -= dqdci; // dwdot[OH]/d[CH2OH]
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1339] += dqdci; // dwdot[C2H5]/d[CH2OH]
  J[1363] -= dqdci; // dwdot[C3H7]/d[CH2OH]
  // d()/d[C2H5]
  dqdci = -k_r * sc[18];
  J[1829] -= dqdci; // dwdot[OH]/d[C2H5]
  J[1843] += dqdci; // dwdot[CH2OH]/d[C2H5]
  J[1850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1874] -= dqdci; // dwdot[C3H7]/d[C2H5]
  // d()/d[C3H7]
  dqdci = +k_f * sc[4];
  J[3581] -= dqdci; // dwdot[OH]/d[C3H7]
  J[3595] += dqdci; // dwdot[CH2OH]/d[C3H7]
  J[3602] += dqdci; // dwdot[C2H5]/d[C3H7]
  J[3626] -= dqdci; // dwdot[C3H7]/d[C3H7]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5305] -= dqdT; // dwdot[C3H7]/dT

  // reaction 322: C3H7 + HO2 <=> C3H8 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[49];
  k_f = 25500 * exp(0.255 * logT - (-474.533315853851) * invT);
  dlnkfdT = 0.255 * invT + (-474.533315853851) * invT2;
  // reverse
  phi_r = sc[3] * sc[50];
  Kc = exp(-g_RT[3] + g_RT[6] + g_RT[49] - g_RT[50]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[49]) + (h_RT[3] + h_RT[50]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[6] -= q;  // HO2
  wdot[49] -= q; // C3H7
  wdot[50] += q; // C3H8
  // d()/d[O2]
  dqdci = -k_r * sc[50];
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  J[268] -= dqdci; // dwdot[C3H7]/d[O2]
  J[269] += dqdci; // dwdot[C3H8]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[49];
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[487] -= dqdci; // dwdot[C3H7]/d[HO2]
  J[488] += dqdci; // dwdot[C3H8]/d[HO2]
  // d()/d[C3H7]
  dqdci = +k_f * sc[6];
  J[3580] += dqdci; // dwdot[O2]/d[C3H7]
  J[3583] -= dqdci; // dwdot[HO2]/d[C3H7]
  J[3626] -= dqdci; // dwdot[C3H7]/d[C3H7]
  J[3627] += dqdci; // dwdot[C3H8]/d[C3H7]
  // d()/d[C3H8]
  dqdci = -k_r * sc[3];
  J[3653] += dqdci; // dwdot[O2]/d[C3H8]
  J[3656] -= dqdci; // dwdot[HO2]/d[C3H8]
  J[3699] -= dqdci; // dwdot[C3H7]/d[C3H8]
  J[3700] += dqdci; // dwdot[C3H8]/d[C3H8]
  // d()/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5305] -= dqdT; // dwdot[C3H7]/dT
  J[5306] += dqdT; // dwdot[C3H8]/dT

  // reaction 323: C3H7 + HO2 => C2H5 + CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[49];
  k_f = 24100000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[17] += q; // CH2O
  wdot[25] += q; // C2H5
  wdot[49] -= q; // C3H7
  // d()/d[HO2]
  dqdci = +k_f * sc[49];
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[455] += dqdci; // dwdot[CH2O]/d[HO2]
  J[463] += dqdci; // dwdot[C2H5]/d[HO2]
  J[487] -= dqdci; // dwdot[C3H7]/d[HO2]
  // d()/d[C3H7]
  dqdci = +k_f * sc[6];
  J[3581] += dqdci; // dwdot[OH]/d[C3H7]
  J[3583] -= dqdci; // dwdot[HO2]/d[C3H7]
  J[3594] += dqdci; // dwdot[CH2O]/d[C3H7]
  J[3602] += dqdci; // dwdot[C2H5]/d[C3H7]
  J[3626] -= dqdci; // dwdot[C3H7]/d[C3H7]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5305] -= dqdT; // dwdot[C3H7]/dT

  // reaction 324: C3H7 + CH3 <=> 2 C2H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[49];
  k_f = 19270000 * exp(-0.32 * logT);
  dlnkfdT = -0.32 * invT;
  // reverse
  phi_r = (sc[25] * sc[25]);
  Kc = exp(g_RT[12] - 2.000000 * g_RT[25] + g_RT[49]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[49]) + (2.000000 * h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q;     // CH3
  wdot[25] += 2 * q; // C2H5
  wdot[49] -= q;     // C3H7
  // d()/d[CH3]
  dqdci = +k_f * sc[49];
  J[888] -= dqdci;     // dwdot[CH3]/d[CH3]
  J[901] += 2 * dqdci; // dwdot[C2H5]/d[CH3]
  J[925] -= dqdci;     // dwdot[C3H7]/d[CH3]
  // d()/d[C2H5]
  dqdci = -k_r * 2.000000 * sc[25];
  J[1837] -= dqdci;     // dwdot[CH3]/d[C2H5]
  J[1850] += 2 * dqdci; // dwdot[C2H5]/d[C2H5]
  J[1874] -= dqdci;     // dwdot[C3H7]/d[C2H5]
  // d()/d[C3H7]
  dqdci = +k_f * sc[12];
  J[3589] -= dqdci;     // dwdot[CH3]/d[C3H7]
  J[3602] += 2 * dqdci; // dwdot[C2H5]/d[C3H7]
  J[3626] -= dqdci;     // dwdot[C3H7]/d[C3H7]
  // d()/dT
  J[5268] -= dqdT;     // dwdot[CH3]/dT
  J[5281] += 2 * dqdT; // dwdot[C2H5]/dT
  J[5305] -= dqdT;     // dwdot[C3H7]/dT

  // reaction 325: CH2F + H <=> CH2(S) + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[60];
  k_f = 110000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[11] * sc[53];
  Kc = exp(g_RT[1] - g_RT[11] - g_RT[53] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[60]) + (h_RT[11] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[11] += q; // CH2(S)
  wdot[53] += q; // HF
  wdot[60] -= q; // CH2F
  // d()/d[H]
  dqdci = +k_f * sc[60];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[84] += dqdci;  // dwdot[CH2(S)]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[133] -= dqdci; // dwdot[CH2F]/d[H]
  // d()/d[CH2(S)]
  dqdci = -k_r * sc[53];
  J[804] -= dqdci; // dwdot[H]/d[CH2(S)]
  J[814] += dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[856] += dqdci; // dwdot[HF]/d[CH2(S)]
  J[863] -= dqdci; // dwdot[CH2F]/d[CH2(S)]
  // d()/d[HF]
  dqdci = -k_r * sc[11];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3880] += dqdci; // dwdot[CH2(S)]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3929] -= dqdci; // dwdot[CH2F]/d[HF]
  // d()/d[CH2F]
  dqdci = +k_f * sc[1];
  J[4381] -= dqdci; // dwdot[H]/d[CH2F]
  J[4391] += dqdci; // dwdot[CH2(S)]/d[CH2F]
  J[4433] += dqdci; // dwdot[HF]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5267] += dqdT; // dwdot[CH2(S)]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 326: CH2F + H <=> CHF + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[60];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[63];
  Kc = exp(-g_RT[0] + g_RT[1] + g_RT[60] - g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[60]) + (h_RT[0] + h_RT[63]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[60] -= q; // CH2F
  wdot[63] += q; // CHF
  // d()/d[H2]
  dqdci = -k_r * sc[63];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[60] -= dqdci; // dwdot[CH2F]/d[H2]
  J[63] += dqdci; // dwdot[CHF]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[60];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[133] -= dqdci; // dwdot[CH2F]/d[H]
  J[136] += dqdci; // dwdot[CHF]/d[H]
  // d()/d[CH2F]
  dqdci = +k_f * sc[1];
  J[4380] += dqdci; // dwdot[H2]/d[CH2F]
  J[4381] -= dqdci; // dwdot[H]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4443] += dqdci; // dwdot[CHF]/d[CH2F]
  // d()/d[CHF]
  dqdci = -k_r * sc[0];
  J[4599] += dqdci; // dwdot[H2]/d[CHF]
  J[4600] -= dqdci; // dwdot[H]/d[CHF]
  J[4659] -= dqdci; // dwdot[CH2F]/d[CHF]
  J[4662] += dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5319] += dqdT; // dwdot[CHF]/dT

  // reaction 327: CHF3 + H <=> CF3 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[58];
  k_f = 7.83 * exp(2.06 * logT - (6189.56498939805) * invT);
  dlnkfdT = 2.06 * invT + (6189.56498939805) * invT2;
  // reverse
  phi_r = sc[0] * sc[62];
  Kc = exp(-g_RT[0] + g_RT[1] + g_RT[58] - g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[58]) + (h_RT[0] + h_RT[62]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[58] -= q; // CHF3
  wdot[62] += q; // CF3
  // d()/d[H2]
  dqdci = -k_r * sc[62];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[58] -= dqdci; // dwdot[CHF3]/d[H2]
  J[62] += dqdci; // dwdot[CF3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[58];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[131] -= dqdci; // dwdot[CHF3]/d[H]
  J[135] += dqdci; // dwdot[CF3]/d[H]
  // d()/d[CHF3]
  dqdci = +k_f * sc[1];
  J[4234] += dqdci; // dwdot[H2]/d[CHF3]
  J[4235] -= dqdci; // dwdot[H]/d[CHF3]
  J[4292] -= dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] += dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = -k_r * sc[0];
  J[4526] += dqdci; // dwdot[H2]/d[CF3]
  J[4527] -= dqdci; // dwdot[H]/d[CF3]
  J[4584] -= dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] += dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5314] -= dqdT; // dwdot[CHF3]/dT
  J[5318] += dqdT; // dwdot[CF3]/dT

  // reaction 328: CHF3 + H <=> CH2F2 + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[58];
  k_f = 432 * exp(1.6 * logT - (31697.6177790393) * invT);
  dlnkfdT = 1.6 * invT + (31697.6177790393) * invT2;
  // reverse
  phi_r = sc[54] * sc[57];
  Kc = exp(g_RT[1] - g_RT[54] - g_RT[57] + g_RT[58]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[58]) + (h_RT[54] + h_RT[57]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[54] += q; // F
  wdot[57] += q; // CH2F2
  wdot[58] -= q; // CHF3
  // d()/d[H]
  dqdci = +k_f * sc[58];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[127] += dqdci; // dwdot[F]/d[H]
  J[130] += dqdci; // dwdot[CH2F2]/d[H]
  J[131] -= dqdci; // dwdot[CHF3]/d[H]
  // d()/d[F]
  dqdci = -k_r * sc[57];
  J[3943] -= dqdci; // dwdot[H]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3999] += dqdci; // dwdot[CH2F2]/d[F]
  J[4000] -= dqdci; // dwdot[CHF3]/d[F]
  // d()/d[CH2F2]
  dqdci = -k_r * sc[54];
  J[4162] -= dqdci; // dwdot[H]/d[CH2F2]
  J[4215] += dqdci; // dwdot[F]/d[CH2F2]
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4219] -= dqdci; // dwdot[CHF3]/d[CH2F2]
  // d()/d[CHF3]
  dqdci = +k_f * sc[1];
  J[4235] -= dqdci; // dwdot[H]/d[CHF3]
  J[4288] += dqdci; // dwdot[F]/d[CHF3]
  J[4291] += dqdci; // dwdot[CH2F2]/d[CHF3]
  J[4292] -= dqdci; // dwdot[CHF3]/d[CHF3]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5314] -= dqdT; // dwdot[CHF3]/dT

  // reaction 329: CHF + H <=> CH + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[63];
  k_f = 65000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[9] * sc[53];
  Kc = exp(g_RT[1] - g_RT[9] - g_RT[53] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[63]) + (h_RT[9] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[9] += q;  // CH
  wdot[53] += q; // HF
  wdot[63] -= q; // CHF
  // d()/d[H]
  dqdci = +k_f * sc[63];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[82] += dqdci;  // dwdot[CH]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[136] -= dqdci; // dwdot[CHF]/d[H]
  // d()/d[CH]
  dqdci = -k_r * sc[53];
  J[658] -= dqdci; // dwdot[H]/d[CH]
  J[666] += dqdci; // dwdot[CH]/d[CH]
  J[710] += dqdci; // dwdot[HF]/d[CH]
  J[720] -= dqdci; // dwdot[CHF]/d[CH]
  // d()/d[HF]
  dqdci = -k_r * sc[9];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3878] += dqdci; // dwdot[CH]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3932] -= dqdci; // dwdot[CHF]/d[HF]
  // d()/d[CHF]
  dqdci = +k_f * sc[1];
  J[4600] -= dqdci; // dwdot[H]/d[CHF]
  J[4608] += dqdci; // dwdot[CH]/d[CHF]
  J[4652] += dqdci; // dwdot[HF]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5265] += dqdT; // dwdot[CH]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 330: CHF + H <=> CF + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[63];
  k_f = 230000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[65];
  Kc = exp(-g_RT[0] + g_RT[1] + g_RT[63] - g_RT[65]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[63]) + (h_RT[0] + h_RT[65]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[63] -= q; // CHF
  wdot[65] += q; // CF
  // d()/d[H2]
  dqdci = -k_r * sc[65];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[63] -= dqdci; // dwdot[CHF]/d[H2]
  J[65] += dqdci; // dwdot[CF]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[63];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[136] -= dqdci; // dwdot[CHF]/d[H]
  J[138] += dqdci; // dwdot[CF]/d[H]
  // d()/d[CHF]
  dqdci = +k_f * sc[1];
  J[4599] += dqdci; // dwdot[H2]/d[CHF]
  J[4600] -= dqdci; // dwdot[H]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  J[4664] += dqdci; // dwdot[CF]/d[CHF]
  // d()/d[CF]
  dqdci = -k_r * sc[0];
  J[4745] += dqdci; // dwdot[H2]/d[CF]
  J[4746] -= dqdci; // dwdot[H]/d[CF]
  J[4808] -= dqdci; // dwdot[CHF]/d[CF]
  J[4810] += dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT
  J[5321] += dqdT; // dwdot[CF]/dT

  // reaction 331: CH + HF <=> CF + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[53];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[0] * sc[65];
  Kc = exp(-g_RT[0] + g_RT[9] + g_RT[53] - g_RT[65]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[53]) + (h_RT[0] + h_RT[65]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[9] -= q;  // CH
  wdot[53] -= q; // HF
  wdot[65] += q; // CF
  // d()/d[H2]
  dqdci = -k_r * sc[65];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[9] -= dqdci;  // dwdot[CH]/d[H2]
  J[53] -= dqdci; // dwdot[HF]/d[H2]
  J[65] += dqdci; // dwdot[CF]/d[H2]
  // d()/d[CH]
  dqdci = +k_f * sc[53];
  J[657] += dqdci; // dwdot[H2]/d[CH]
  J[666] -= dqdci; // dwdot[CH]/d[CH]
  J[710] -= dqdci; // dwdot[HF]/d[CH]
  J[722] += dqdci; // dwdot[CF]/d[CH]
  // d()/d[HF]
  dqdci = +k_f * sc[9];
  J[3869] += dqdci; // dwdot[H2]/d[HF]
  J[3878] -= dqdci; // dwdot[CH]/d[HF]
  J[3922] -= dqdci; // dwdot[HF]/d[HF]
  J[3934] += dqdci; // dwdot[CF]/d[HF]
  // d()/d[CF]
  dqdci = -k_r * sc[0];
  J[4745] += dqdci; // dwdot[H2]/d[CF]
  J[4754] -= dqdci; // dwdot[CH]/d[CF]
  J[4798] -= dqdci; // dwdot[HF]/d[CF]
  J[4810] += dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5265] -= dqdT; // dwdot[CH]/dT
  J[5309] -= dqdT; // dwdot[HF]/dT
  J[5321] += dqdT; // dwdot[CF]/dT

  // reaction 333: CFO + H <=> CO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[69];
  k_f = 25000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[53];
  Kc = exp(g_RT[1] - g_RT[14] - g_RT[53] + g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[69]) + (h_RT[14] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[14] += q; // CO
  wdot[53] += q; // HF
  wdot[69] -= q; // CFO
  // d()/d[H]
  dqdci = +k_f * sc[69];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[87] += dqdci;  // dwdot[CO]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[142] -= dqdci; // dwdot[CFO]/d[H]
  // d()/d[CO]
  dqdci = -k_r * sc[53];
  J[1023] -= dqdci; // dwdot[H]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1075] += dqdci; // dwdot[HF]/d[CO]
  J[1091] -= dqdci; // dwdot[CFO]/d[CO]
  // d()/d[HF]
  dqdci = -k_r * sc[14];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3883] += dqdci; // dwdot[CO]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3938] -= dqdci; // dwdot[CFO]/d[HF]
  // d()/d[CFO]
  dqdci = +k_f * sc[1];
  J[5038] -= dqdci; // dwdot[H]/d[CFO]
  J[5051] += dqdci; // dwdot[CO]/d[CFO]
  J[5090] += dqdci; // dwdot[HF]/d[CFO]
  J[5106] -= dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5325] -= dqdT; // dwdot[CFO]/dT

  // reaction 334: CH2F + O <=> CHFO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[60];
  k_f = 57000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[68];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[60] - g_RT[68]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[60]) + (h_RT[1] + h_RT[68]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[60] -= q; // CH2F
  wdot[68] += q; // CHFO
  // d()/d[H]
  dqdci = -k_r * sc[68];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[75] -= dqdci;  // dwdot[O]/d[H]
  J[133] -= dqdci; // dwdot[CH2F]/d[H]
  J[141] += dqdci; // dwdot[CHFO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[60];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[206] -= dqdci; // dwdot[CH2F]/d[O]
  J[214] += dqdci; // dwdot[CHFO]/d[O]
  // d()/d[CH2F]
  dqdci = +k_f * sc[2];
  J[4381] += dqdci; // dwdot[H]/d[CH2F]
  J[4382] -= dqdci; // dwdot[O]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4448] += dqdci; // dwdot[CHFO]/d[CH2F]
  // d()/d[CHFO]
  dqdci = -k_r * sc[1];
  J[4965] += dqdci; // dwdot[H]/d[CHFO]
  J[4966] -= dqdci; // dwdot[O]/d[CHFO]
  J[5024] -= dqdci; // dwdot[CH2F]/d[CHFO]
  J[5032] += dqdci; // dwdot[CHFO]/d[CHFO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5324] += dqdT; // dwdot[CHFO]/dT

  // reaction 335: CHF2 + O <=> CF2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[61];
  k_f = 37000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[67];
  Kc = exp(-g_RT[1] + g_RT[2] + g_RT[61] - g_RT[67]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[61]) + (h_RT[1] + h_RT[67]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[2] -= q;  // O
  wdot[61] -= q; // CHF2
  wdot[67] += q; // CF2O
  // d()/d[H]
  dqdci = -k_r * sc[67];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[75] -= dqdci;  // dwdot[O]/d[H]
  J[134] -= dqdci; // dwdot[CHF2]/d[H]
  J[140] += dqdci; // dwdot[CF2O]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[61];
  J[147] += dqdci; // dwdot[H]/d[O]
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[207] -= dqdci; // dwdot[CHF2]/d[O]
  J[213] += dqdci; // dwdot[CF2O]/d[O]
  // d()/d[CHF2]
  dqdci = +k_f * sc[2];
  J[4454] += dqdci; // dwdot[H]/d[CHF2]
  J[4455] -= dqdci; // dwdot[O]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4520] += dqdci; // dwdot[CF2O]/d[CHF2]
  // d()/d[CF2O]
  dqdci = -k_r * sc[1];
  J[4892] += dqdci; // dwdot[H]/d[CF2O]
  J[4893] -= dqdci; // dwdot[O]/d[CF2O]
  J[4952] -= dqdci; // dwdot[CHF2]/d[CF2O]
  J[4958] += dqdci; // dwdot[CF2O]/d[CF2O]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 336: CF3 + O <=> CF2O + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[62];
  k_f = 15400000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[54] * sc[67];
  Kc = exp(g_RT[2] - g_RT[54] + g_RT[62] - g_RT[67]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[62]) + (h_RT[54] + h_RT[67]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[54] += q; // F
  wdot[62] -= q; // CF3
  wdot[67] += q; // CF2O
  // d()/d[O]
  dqdci = +k_f * sc[62];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[200] += dqdci; // dwdot[F]/d[O]
  J[208] -= dqdci; // dwdot[CF3]/d[O]
  J[213] += dqdci; // dwdot[CF2O]/d[O]
  // d()/d[F]
  dqdci = -k_r * sc[67];
  J[3944] -= dqdci; // dwdot[O]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[4004] -= dqdci; // dwdot[CF3]/d[F]
  J[4009] += dqdci; // dwdot[CF2O]/d[F]
  // d()/d[CF3]
  dqdci = +k_f * sc[2];
  J[4528] -= dqdci; // dwdot[O]/d[CF3]
  J[4580] += dqdci; // dwdot[F]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  J[4593] += dqdci; // dwdot[CF2O]/d[CF3]
  // d()/d[CF2O]
  dqdci = -k_r * sc[54];
  J[4893] -= dqdci; // dwdot[O]/d[CF2O]
  J[4945] += dqdci; // dwdot[F]/d[CF2O]
  J[4953] -= dqdci; // dwdot[CF3]/d[CF2O]
  J[4958] += dqdci; // dwdot[CF2O]/d[CF2O]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 337: CH2F + OH <=> CH2O + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[60];
  k_f = 25000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[17] * sc[53];
  Kc = exp(g_RT[4] - g_RT[17] - g_RT[53] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[60]) + (h_RT[17] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[17] += q; // CH2O
  wdot[53] += q; // HF
  wdot[60] -= q; // CH2F
  // d()/d[OH]
  dqdci = +k_f * sc[60];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[309] += dqdci; // dwdot[CH2O]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[352] -= dqdci; // dwdot[CH2F]/d[OH]
  // d()/d[CH2O]
  dqdci = -k_r * sc[53];
  J[1245] -= dqdci; // dwdot[OH]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1294] += dqdci; // dwdot[HF]/d[CH2O]
  J[1301] -= dqdci; // dwdot[CH2F]/d[CH2O]
  // d()/d[HF]
  dqdci = -k_r * sc[17];
  J[3873] -= dqdci; // dwdot[OH]/d[HF]
  J[3886] += dqdci; // dwdot[CH2O]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3929] -= dqdci; // dwdot[CH2F]/d[HF]
  // d()/d[CH2F]
  dqdci = +k_f * sc[4];
  J[4384] -= dqdci; // dwdot[OH]/d[CH2F]
  J[4397] += dqdci; // dwdot[CH2O]/d[CH2F]
  J[4433] += dqdci; // dwdot[HF]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 338: CHF2 + OH <=> CHFO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[61];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[53] * sc[68];
  Kc = exp(g_RT[4] - g_RT[53] + g_RT[61] - g_RT[68]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[61]) + (h_RT[53] + h_RT[68]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[53] += q; // HF
  wdot[61] -= q; // CHF2
  wdot[68] += q; // CHFO
  // d()/d[OH]
  dqdci = +k_f * sc[61];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[353] -= dqdci; // dwdot[CHF2]/d[OH]
  J[360] += dqdci; // dwdot[CHFO]/d[OH]
  // d()/d[HF]
  dqdci = -k_r * sc[68];
  J[3873] -= dqdci; // dwdot[OH]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3930] -= dqdci; // dwdot[CHF2]/d[HF]
  J[3937] += dqdci; // dwdot[CHFO]/d[HF]
  // d()/d[CHF2]
  dqdci = +k_f * sc[4];
  J[4457] -= dqdci; // dwdot[OH]/d[CHF2]
  J[4506] += dqdci; // dwdot[HF]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4521] += dqdci; // dwdot[CHFO]/d[CHF2]
  // d()/d[CHFO]
  dqdci = -k_r * sc[53];
  J[4968] -= dqdci; // dwdot[OH]/d[CHFO]
  J[5017] += dqdci; // dwdot[HF]/d[CHFO]
  J[5025] -= dqdci; // dwdot[CHF2]/d[CHFO]
  J[5032] += dqdci; // dwdot[CHFO]/d[CHFO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5324] += dqdT; // dwdot[CHFO]/dT

  // reaction 339: CF3 + OH <=> CF2O + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[62];
  k_f = 14600000 * exp(-0.06 * logT - (-133.855633104055) * invT);
  dlnkfdT = -0.06 * invT + (-133.855633104055) * invT2;
  // reverse
  phi_r = sc[53] * sc[67];
  Kc = exp(g_RT[4] - g_RT[53] + g_RT[62] - g_RT[67]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[62]) + (h_RT[53] + h_RT[67]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[53] += q; // HF
  wdot[62] -= q; // CF3
  wdot[67] += q; // CF2O
  // d()/d[OH]
  dqdci = +k_f * sc[62];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[354] -= dqdci; // dwdot[CF3]/d[OH]
  J[359] += dqdci; // dwdot[CF2O]/d[OH]
  // d()/d[HF]
  dqdci = -k_r * sc[67];
  J[3873] -= dqdci; // dwdot[OH]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3931] -= dqdci; // dwdot[CF3]/d[HF]
  J[3936] += dqdci; // dwdot[CF2O]/d[HF]
  // d()/d[CF3]
  dqdci = +k_f * sc[4];
  J[4530] -= dqdci; // dwdot[OH]/d[CF3]
  J[4579] += dqdci; // dwdot[HF]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  J[4593] += dqdci; // dwdot[CF2O]/d[CF3]
  // d()/d[CF2O]
  dqdci = -k_r * sc[53];
  J[4895] -= dqdci; // dwdot[OH]/d[CF2O]
  J[4944] += dqdci; // dwdot[HF]/d[CF2O]
  J[4953] -= dqdci; // dwdot[CF3]/d[CF2O]
  J[4958] += dqdci; // dwdot[CF2O]/d[CF2O]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 341: F + H2 <=> H + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[54];
  k_f = 2560000 * exp(0.5 * logT - (327.090832773068) * invT);
  dlnkfdT = 0.5 * invT + (327.090832773068) * invT2;
  // reverse
  phi_r = sc[1] * sc[53];
  Kc = exp(g_RT[0] - g_RT[1] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[54]) + (h_RT[1] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[H2]
  dqdci = +k_f * sc[54];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[53] += dqdci; // dwdot[HF]/d[H2]
  J[54] -= dqdci; // dwdot[F]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[53];
  J[73] -= dqdci;  // dwdot[H2]/d[H]
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[127] -= dqdci; // dwdot[F]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[1];
  J[3869] -= dqdci; // dwdot[H2]/d[HF]
  J[3870] += dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[0];
  J[3942] -= dqdci; // dwdot[H2]/d[F]
  J[3943] += dqdci; // dwdot[H]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 342: F + OH <=> HF + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[54];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[2] * sc[53];
  Kc = exp(-g_RT[2] + g_RT[4] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[54]) + (h_RT[2] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[4] -= q;  // OH
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[O]
  dqdci = -k_r * sc[53];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[150] -= dqdci; // dwdot[OH]/d[O]
  J[199] += dqdci; // dwdot[HF]/d[O]
  J[200] -= dqdci; // dwdot[F]/d[O]
  // d()/d[OH]
  dqdci = +k_f * sc[54];
  J[294] += dqdci; // dwdot[O]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[346] -= dqdci; // dwdot[F]/d[OH]
  // d()/d[HF]
  dqdci = -k_r * sc[2];
  J[3871] += dqdci; // dwdot[O]/d[HF]
  J[3873] -= dqdci; // dwdot[OH]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[4];
  J[3944] += dqdci; // dwdot[O]/d[F]
  J[3946] -= dqdci; // dwdot[OH]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 343: F + HO2 <=> HF + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[54];
  k_f = 2890000 * exp(0.5 * logT);
  dlnkfdT = 0.5 * invT;
  // reverse
  phi_r = sc[3] * sc[53];
  Kc = exp(-g_RT[3] + g_RT[6] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[54]) + (h_RT[3] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[6] -= q;  // HO2
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[O2]
  dqdci = -k_r * sc[53];
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  J[272] += dqdci; // dwdot[HF]/d[O2]
  J[273] -= dqdci; // dwdot[F]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[54];
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[491] += dqdci; // dwdot[HF]/d[HO2]
  J[492] -= dqdci; // dwdot[F]/d[HO2]
  // d()/d[HF]
  dqdci = -k_r * sc[3];
  J[3872] += dqdci; // dwdot[O2]/d[HF]
  J[3875] -= dqdci; // dwdot[HO2]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[6];
  J[3945] += dqdci; // dwdot[O2]/d[F]
  J[3948] -= dqdci; // dwdot[HO2]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 344: F + H2O <=> HF + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[54];
  k_f = 1300 * exp(1.5 * logT);
  dlnkfdT = 1.5 * invT;
  // reverse
  phi_r = sc[4] * sc[53];
  Kc = exp(-g_RT[4] + g_RT[5] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[54]) + (h_RT[4] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[5] -= q;  // H2O
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[OH]
  dqdci = -k_r * sc[53];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[297] -= dqdci; // dwdot[H2O]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[346] -= dqdci; // dwdot[F]/d[OH]
  // d()/d[H2O]
  dqdci = +k_f * sc[54];
  J[369] += dqdci; // dwdot[OH]/d[H2O]
  J[370] -= dqdci; // dwdot[H2O]/d[H2O]
  J[418] += dqdci; // dwdot[HF]/d[H2O]
  J[419] -= dqdci; // dwdot[F]/d[H2O]
  // d()/d[HF]
  dqdci = -k_r * sc[4];
  J[3873] += dqdci; // dwdot[OH]/d[HF]
  J[3874] -= dqdci; // dwdot[H2O]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[5];
  J[3946] += dqdci; // dwdot[OH]/d[F]
  J[3947] -= dqdci; // dwdot[H2O]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5261] -= dqdT; // dwdot[H2O]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 345: F + H2O2 <=> HF + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[54];
  k_f = 1730000 * exp(0.5 * logT);
  dlnkfdT = 0.5 * invT;
  // reverse
  phi_r = sc[6] * sc[53];
  Kc = exp(-g_RT[6] + g_RT[7] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[54]) + (h_RT[6] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[HO2]
  dqdci = -k_r * sc[53];
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[491] += dqdci; // dwdot[HF]/d[HO2]
  J[492] -= dqdci; // dwdot[F]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[54];
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[564] += dqdci; // dwdot[HF]/d[H2O2]
  J[565] -= dqdci; // dwdot[F]/d[H2O2]
  // d()/d[HF]
  dqdci = -k_r * sc[6];
  J[3875] += dqdci; // dwdot[HO2]/d[HF]
  J[3876] -= dqdci; // dwdot[H2O2]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[7];
  J[3948] += dqdci; // dwdot[HO2]/d[F]
  J[3949] -= dqdci; // dwdot[H2O2]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 347: CHF + H2 <=> CH3F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[63];
  k_f = 225000000000 * exp(-2.85 * logT - (6541.81665546136) * invT);
  dlnkfdT = -2.85 * invT + (6541.81665546136) * invT2;
  // reverse
  phi_r = sc[56];
  Kc = refCinv * exp(g_RT[0] - g_RT[56] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[63]) + (h_RT[56]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[56] += q; // CH3F
  wdot[63] -= q; // CHF
  // d()/d[H2]
  dqdci = +k_f * sc[63];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[56] += dqdci; // dwdot[CH3F]/d[H2]
  J[63] -= dqdci; // dwdot[CHF]/d[H2]
  // d()/d[CH3F]
  dqdci = -k_r;
  J[4088] -= dqdci; // dwdot[H2]/d[CH3F]
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4151] -= dqdci; // dwdot[CHF]/d[CH3F]
  // d()/d[CHF]
  dqdci = +k_f * sc[0];
  J[4599] -= dqdci; // dwdot[H2]/d[CHF]
  J[4655] += dqdci; // dwdot[CH3F]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 348: CH2F + H <=> CH3F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[60];
  k_f = 3.03e+15 * exp(-3.38 * logT - (1741.12966368433) * invT);
  dlnkfdT = -3.38 * invT + (1741.12966368433) * invT2;
  // reverse
  phi_r = sc[56];
  Kc = refCinv * exp(g_RT[1] - g_RT[56] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[60]) + (h_RT[56]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[56] += q; // CH3F
  wdot[60] -= q; // CH2F
  // d()/d[H]
  dqdci = +k_f * sc[60];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[129] += dqdci; // dwdot[CH3F]/d[H]
  J[133] -= dqdci; // dwdot[CH2F]/d[H]
  // d()/d[CH3F]
  dqdci = -k_r;
  J[4089] -= dqdci; // dwdot[H]/d[CH3F]
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] -= dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[1];
  J[4381] -= dqdci; // dwdot[H]/d[CH2F]
  J[4436] += dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 350: CF2 + H2 <=> CH2F2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[64];
  k_f = 1.7 * exp(-0.71 * logT - (20581.561631413) * invT);
  dlnkfdT = -0.71 * invT + (20581.561631413) * invT2;
  // reverse
  phi_r = sc[57];
  Kc = refCinv * exp(g_RT[0] - g_RT[57] + g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[0] + h_RT[64]) + (h_RT[57]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[57] += q; // CH2F2
  wdot[64] -= q; // CF2
  // d()/d[H2]
  dqdci = +k_f * sc[64];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[57] += dqdci; // dwdot[CH2F2]/d[H2]
  J[64] -= dqdci; // dwdot[CF2]/d[H2]
  // d()/d[CH2F2]
  dqdci = -k_r;
  J[4161] -= dqdci; // dwdot[H2]/d[CH2F2]
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4225] -= dqdci; // dwdot[CF2]/d[CH2F2]
  // d()/d[CF2]
  dqdci = +k_f * sc[0];
  J[4672] -= dqdci; // dwdot[H2]/d[CF2]
  J[4729] += dqdci; // dwdot[CH2F2]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT

  // reaction 351: CHF2 + H <=> CH2F2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[61];
  k_f = 2.75 * exp(-0.32 * logT - (3869.73616003829) * invT);
  dlnkfdT = -0.32 * invT + (3869.73616003829) * invT2;
  // reverse
  phi_r = sc[57];
  Kc = refCinv * exp(g_RT[1] - g_RT[57] + g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[61]) + (h_RT[57]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[57] += q; // CH2F2
  wdot[61] -= q; // CHF2
  // d()/d[H]
  dqdci = +k_f * sc[61];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[130] += dqdci; // dwdot[CH2F2]/d[H]
  J[134] -= dqdci; // dwdot[CHF2]/d[H]
  // d()/d[CH2F2]
  dqdci = -k_r;
  J[4162] -= dqdci; // dwdot[H]/d[CH2F2]
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] -= dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = +k_f * sc[1];
  J[4454] -= dqdci; // dwdot[H]/d[CHF2]
  J[4510] += dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT

  // reaction 354: CH2(S) + HF <=> CHF + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[53];
  k_f = 20.8 * exp(1.27 * logT - (4191.79482615331) * invT);
  dlnkfdT = 1.27 * invT + (4191.79482615331) * invT2;
  // reverse
  phi_r = sc[0] * sc[63];
  Kc = exp(-g_RT[0] + g_RT[11] + g_RT[53] - g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[53]) + (h_RT[0] + h_RT[63]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[11] -= q; // CH2(S)
  wdot[53] -= q; // HF
  wdot[63] += q; // CHF
  // d()/d[H2]
  dqdci = -k_r * sc[63];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[11] -= dqdci; // dwdot[CH2(S)]/d[H2]
  J[53] -= dqdci; // dwdot[HF]/d[H2]
  J[63] += dqdci; // dwdot[CHF]/d[H2]
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[53];
  J[803] += dqdci; // dwdot[H2]/d[CH2(S)]
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[856] -= dqdci; // dwdot[HF]/d[CH2(S)]
  J[866] += dqdci; // dwdot[CHF]/d[CH2(S)]
  // d()/d[HF]
  dqdci = +k_f * sc[11];
  J[3869] += dqdci; // dwdot[H2]/d[HF]
  J[3880] -= dqdci; // dwdot[CH2(S)]/d[HF]
  J[3922] -= dqdci; // dwdot[HF]/d[HF]
  J[3932] += dqdci; // dwdot[CHF]/d[HF]
  // d()/d[CHF]
  dqdci = -k_r * sc[0];
  J[4599] += dqdci; // dwdot[H2]/d[CHF]
  J[4610] -= dqdci; // dwdot[CH2(S)]/d[CHF]
  J[4652] -= dqdci; // dwdot[HF]/d[CHF]
  J[4662] += dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5309] -= dqdT; // dwdot[HF]/dT
  J[5319] += dqdT; // dwdot[CHF]/dT

  // reaction 355: CH3 + F <=> CH2(S) + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[54];
  k_f = 16200000000 * exp(-0.88 * logT - (-493.65554915443) * invT);
  dlnkfdT = -0.88 * invT + (-493.65554915443) * invT2;
  // reverse
  phi_r = sc[11] * sc[53];
  Kc = exp(-g_RT[11] + g_RT[12] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[54]) + (h_RT[11] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // CH2(S)
  wdot[12] -= q; // CH3
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[CH2(S)]
  dqdci = -k_r * sc[53];
  J[814] += dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[815] -= dqdci; // dwdot[CH3]/d[CH2(S)]
  J[856] += dqdci; // dwdot[HF]/d[CH2(S)]
  J[857] -= dqdci; // dwdot[F]/d[CH2(S)]
  // d()/d[CH3]
  dqdci = +k_f * sc[54];
  J[887] += dqdci; // dwdot[CH2(S)]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[929] += dqdci; // dwdot[HF]/d[CH3]
  J[930] -= dqdci; // dwdot[F]/d[CH3]
  // d()/d[HF]
  dqdci = -k_r * sc[11];
  J[3880] += dqdci; // dwdot[CH2(S)]/d[HF]
  J[3881] -= dqdci; // dwdot[CH3]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[12];
  J[3953] += dqdci; // dwdot[CH2(S)]/d[F]
  J[3954] -= dqdci; // dwdot[CH3]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5267] += dqdT; // dwdot[CH2(S)]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 356: CH3 + F <=> CH2F + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[54];
  k_f = 1360000 * exp(-0.39 * logT - (-133.352416438251) * invT);
  dlnkfdT = -0.39 * invT + (-133.352416438251) * invT2;
  // reverse
  phi_r = sc[1] * sc[60];
  Kc = exp(-g_RT[1] + g_RT[12] + g_RT[54] - g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[54]) + (h_RT[1] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[12] -= q; // CH3
  wdot[54] -= q; // F
  wdot[60] += q; // CH2F
  // d()/d[H]
  dqdci = -k_r * sc[60];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[85] -= dqdci;  // dwdot[CH3]/d[H]
  J[127] -= dqdci; // dwdot[F]/d[H]
  J[133] += dqdci; // dwdot[CH2F]/d[H]
  // d()/d[CH3]
  dqdci = +k_f * sc[54];
  J[877] += dqdci; // dwdot[H]/d[CH3]
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[930] -= dqdci; // dwdot[F]/d[CH3]
  J[936] += dqdci; // dwdot[CH2F]/d[CH3]
  // d()/d[F]
  dqdci = +k_f * sc[12];
  J[3943] += dqdci; // dwdot[H]/d[F]
  J[3954] -= dqdci; // dwdot[CH3]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[4002] += dqdci; // dwdot[CH2F]/d[F]
  // d()/d[CH2F]
  dqdci = -k_r * sc[1];
  J[4381] += dqdci; // dwdot[H]/d[CH2F]
  J[4392] -= dqdci; // dwdot[CH3]/d[CH2F]
  J[4434] -= dqdci; // dwdot[F]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT

  // reaction 357: CHF + HF <=> CF2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[53] * sc[63];
  k_f = 5.77 * exp(1.35 * logT - (9007.57831790448) * invT);
  dlnkfdT = 1.35 * invT + (9007.57831790448) * invT2;
  // reverse
  phi_r = sc[0] * sc[64];
  Kc = exp(-g_RT[0] + g_RT[53] + g_RT[63] - g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[53] + h_RT[63]) + (h_RT[0] + h_RT[64]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[53] -= q; // HF
  wdot[63] -= q; // CHF
  wdot[64] += q; // CF2
  // d()/d[H2]
  dqdci = -k_r * sc[64];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[53] -= dqdci; // dwdot[HF]/d[H2]
  J[63] -= dqdci; // dwdot[CHF]/d[H2]
  J[64] += dqdci; // dwdot[CF2]/d[H2]
  // d()/d[HF]
  dqdci = +k_f * sc[63];
  J[3869] += dqdci; // dwdot[H2]/d[HF]
  J[3922] -= dqdci; // dwdot[HF]/d[HF]
  J[3932] -= dqdci; // dwdot[CHF]/d[HF]
  J[3933] += dqdci; // dwdot[CF2]/d[HF]
  // d()/d[CHF]
  dqdci = +k_f * sc[53];
  J[4599] += dqdci; // dwdot[H2]/d[CHF]
  J[4652] -= dqdci; // dwdot[HF]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  J[4663] += dqdci; // dwdot[CF2]/d[CHF]
  // d()/d[CF2]
  dqdci = -k_r * sc[0];
  J[4672] += dqdci; // dwdot[H2]/d[CF2]
  J[4725] -= dqdci; // dwdot[HF]/d[CF2]
  J[4735] -= dqdci; // dwdot[CHF]/d[CF2]
  J[4736] += dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5309] -= dqdT; // dwdot[HF]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT
  J[5320] += dqdT; // dwdot[CF2]/dT

  // reaction 358: CHF2 + H <=> CHF + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[61];
  k_f = 149000000 * exp(-0.11 * logT - (50.8248832462767) * invT);
  dlnkfdT = -0.11 * invT + (50.8248832462767) * invT2;
  // reverse
  phi_r = sc[53] * sc[63];
  Kc = exp(g_RT[1] - g_RT[53] + g_RT[61] - g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[61]) + (h_RT[53] + h_RT[63]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[61] -= q; // CHF2
  wdot[63] += q; // CHF
  // d()/d[H]
  dqdci = +k_f * sc[61];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[134] -= dqdci; // dwdot[CHF2]/d[H]
  J[136] += dqdci; // dwdot[CHF]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[63];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3930] -= dqdci; // dwdot[CHF2]/d[HF]
  J[3932] += dqdci; // dwdot[CHF]/d[HF]
  // d()/d[CHF2]
  dqdci = +k_f * sc[1];
  J[4454] -= dqdci; // dwdot[H]/d[CHF2]
  J[4506] += dqdci; // dwdot[HF]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4516] += dqdci; // dwdot[CHF]/d[CHF2]
  // d()/d[CHF]
  dqdci = -k_r * sc[53];
  J[4600] -= dqdci; // dwdot[H]/d[CHF]
  J[4652] += dqdci; // dwdot[HF]/d[CHF]
  J[4660] -= dqdci; // dwdot[CHF2]/d[CHF]
  J[4662] += dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5319] += dqdT; // dwdot[CHF]/dT

  // reaction 359: CHF2 + H <=> CF2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[61];
  k_f = 0.0055 * exp(2.42 * logT - (-211.350999637982) * invT);
  dlnkfdT = 2.42 * invT + (-211.350999637982) * invT2;
  // reverse
  phi_r = sc[0] * sc[64];
  Kc = exp(-g_RT[0] + g_RT[1] + g_RT[61] - g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[61]) + (h_RT[0] + h_RT[64]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[61] -= q; // CHF2
  wdot[64] += q; // CF2
  // d()/d[H2]
  dqdci = -k_r * sc[64];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[61] -= dqdci; // dwdot[CHF2]/d[H2]
  J[64] += dqdci; // dwdot[CF2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[61];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[134] -= dqdci; // dwdot[CHF2]/d[H]
  J[137] += dqdci; // dwdot[CF2]/d[H]
  // d()/d[CHF2]
  dqdci = +k_f * sc[1];
  J[4453] += dqdci; // dwdot[H2]/d[CHF2]
  J[4454] -= dqdci; // dwdot[H]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4517] += dqdci; // dwdot[CF2]/d[CHF2]
  // d()/d[CF2]
  dqdci = -k_r * sc[0];
  J[4672] += dqdci; // dwdot[H2]/d[CF2]
  J[4673] -= dqdci; // dwdot[H]/d[CF2]
  J[4733] -= dqdci; // dwdot[CHF2]/d[CF2]
  J[4736] += dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5320] += dqdT; // dwdot[CF2]/dT

  // reaction 360: CH2F + F <=> CHF + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[54] * sc[60];
  k_f = 50000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[53] * sc[63];
  Kc = exp(-g_RT[53] + g_RT[54] + g_RT[60] - g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[54] + h_RT[60]) + (h_RT[53] + h_RT[63]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  wdot[60] -= q; // CH2F
  wdot[63] += q; // CHF
  // d()/d[HF]
  dqdci = -k_r * sc[63];
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  J[3929] -= dqdci; // dwdot[CH2F]/d[HF]
  J[3932] += dqdci; // dwdot[CHF]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[60];
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[4002] -= dqdci; // dwdot[CH2F]/d[F]
  J[4005] += dqdci; // dwdot[CHF]/d[F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[54];
  J[4433] += dqdci; // dwdot[HF]/d[CH2F]
  J[4434] -= dqdci; // dwdot[F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4443] += dqdci; // dwdot[CHF]/d[CH2F]
  // d()/d[CHF]
  dqdci = -k_r * sc[53];
  J[4652] += dqdci; // dwdot[HF]/d[CHF]
  J[4653] -= dqdci; // dwdot[F]/d[CHF]
  J[4659] -= dqdci; // dwdot[CH2F]/d[CHF]
  J[4662] += dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5319] += dqdT; // dwdot[CHF]/dT

  // reaction 361: CF3 + H <=> CF2 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[62];
  k_f = 53300000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[53] * sc[64];
  Kc = exp(g_RT[1] - g_RT[53] + g_RT[62] - g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[62]) + (h_RT[53] + h_RT[64]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[62] -= q; // CF3
  wdot[64] += q; // CF2
  // d()/d[H]
  dqdci = +k_f * sc[62];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[135] -= dqdci; // dwdot[CF3]/d[H]
  J[137] += dqdci; // dwdot[CF2]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[64];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3931] -= dqdci; // dwdot[CF3]/d[HF]
  J[3933] += dqdci; // dwdot[CF2]/d[HF]
  // d()/d[CF3]
  dqdci = +k_f * sc[1];
  J[4527] -= dqdci; // dwdot[H]/d[CF3]
  J[4579] += dqdci; // dwdot[HF]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  J[4590] += dqdci; // dwdot[CF2]/d[CF3]
  // d()/d[CF2]
  dqdci = -k_r * sc[53];
  J[4673] -= dqdci; // dwdot[H]/d[CF2]
  J[4725] += dqdci; // dwdot[HF]/d[CF2]
  J[4734] -= dqdci; // dwdot[CF3]/d[CF2]
  J[4736] += dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5320] += dqdT; // dwdot[CF2]/dT

  // reaction 362: CHF2 + F <=> CF2 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[54] * sc[61];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[53] * sc[64];
  Kc = exp(-g_RT[53] + g_RT[54] + g_RT[61] - g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[54] + h_RT[61]) + (h_RT[53] + h_RT[64]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  wdot[61] -= q; // CHF2
  wdot[64] += q; // CF2
  // d()/d[HF]
  dqdci = -k_r * sc[64];
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  J[3930] -= dqdci; // dwdot[CHF2]/d[HF]
  J[3933] += dqdci; // dwdot[CF2]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[61];
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[4003] -= dqdci; // dwdot[CHF2]/d[F]
  J[4006] += dqdci; // dwdot[CF2]/d[F]
  // d()/d[CHF2]
  dqdci = +k_f * sc[54];
  J[4506] += dqdci; // dwdot[HF]/d[CHF2]
  J[4507] -= dqdci; // dwdot[F]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4517] += dqdci; // dwdot[CF2]/d[CHF2]
  // d()/d[CF2]
  dqdci = -k_r * sc[53];
  J[4725] += dqdci; // dwdot[HF]/d[CF2]
  J[4726] -= dqdci; // dwdot[F]/d[CF2]
  J[4733] -= dqdci; // dwdot[CHF2]/d[CF2]
  J[4736] += dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5320] += dqdT; // dwdot[CF2]/dT

  // reaction 363: CH3F + H <=> CH2F + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[56];
  k_f = 0.0027 * exp(3 * logT - (2667.04832876501) * invT);
  dlnkfdT = 3 * invT + (2667.04832876501) * invT2;
  // reverse
  phi_r = sc[0] * sc[60];
  Kc = exp(-g_RT[0] + g_RT[1] + g_RT[56] - g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[56]) + (h_RT[0] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[56] -= q; // CH3F
  wdot[60] += q; // CH2F
  // d()/d[H2]
  dqdci = -k_r * sc[60];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[56] -= dqdci; // dwdot[CH3F]/d[H2]
  J[60] += dqdci; // dwdot[CH2F]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[56];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[129] -= dqdci; // dwdot[CH3F]/d[H]
  J[133] += dqdci; // dwdot[CH2F]/d[H]
  // d()/d[CH3F]
  dqdci = +k_f * sc[1];
  J[4088] += dqdci; // dwdot[H2]/d[CH3F]
  J[4089] -= dqdci; // dwdot[H]/d[CH3F]
  J[4144] -= dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] += dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = -k_r * sc[0];
  J[4380] += dqdci; // dwdot[H2]/d[CH2F]
  J[4381] -= dqdci; // dwdot[H]/d[CH2F]
  J[4436] -= dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5312] -= dqdT; // dwdot[CH3F]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT

  // reaction 364: CH2F2 + H <=> CHF2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[57];
  k_f = 0.00165 * exp(3 * logT - (2818.01332850643) * invT);
  dlnkfdT = 3 * invT + (2818.01332850643) * invT2;
  // reverse
  phi_r = sc[0] * sc[61];
  Kc = exp(-g_RT[0] + g_RT[1] + g_RT[57] - g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[57]) + (h_RT[0] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[57] -= q; // CH2F2
  wdot[61] += q; // CHF2
  // d()/d[H2]
  dqdci = -k_r * sc[61];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[57] -= dqdci; // dwdot[CH2F2]/d[H2]
  J[61] += dqdci; // dwdot[CHF2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[57];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[130] -= dqdci; // dwdot[CH2F2]/d[H]
  J[134] += dqdci; // dwdot[CHF2]/d[H]
  // d()/d[CH2F2]
  dqdci = +k_f * sc[1];
  J[4161] += dqdci; // dwdot[H2]/d[CH2F2]
  J[4162] -= dqdci; // dwdot[H]/d[CH2F2]
  J[4218] -= dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] += dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = -k_r * sc[0];
  J[4453] += dqdci; // dwdot[H2]/d[CHF2]
  J[4454] -= dqdci; // dwdot[H]/d[CHF2]
  J[4510] -= dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5313] -= dqdT; // dwdot[CH2F2]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT

  // reaction 365: CH3F + H <=> CH3 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[56];
  k_f = 275000000 * exp(-(15801.0033062682) * invT);
  dlnkfdT = (15801.0033062682) * invT2;
  // reverse
  phi_r = sc[12] * sc[53];
  Kc = exp(g_RT[1] - g_RT[12] - g_RT[53] + g_RT[56]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[56]) + (h_RT[12] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[12] += q; // CH3
  wdot[53] += q; // HF
  wdot[56] -= q; // CH3F
  // d()/d[H]
  dqdci = +k_f * sc[56];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[85] += dqdci;  // dwdot[CH3]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[129] -= dqdci; // dwdot[CH3F]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[53];
  J[877] -= dqdci; // dwdot[H]/d[CH3]
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[929] += dqdci; // dwdot[HF]/d[CH3]
  J[932] -= dqdci; // dwdot[CH3F]/d[CH3]
  // d()/d[HF]
  dqdci = -k_r * sc[12];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3881] += dqdci; // dwdot[CH3]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3925] -= dqdci; // dwdot[CH3F]/d[HF]
  // d()/d[CH3F]
  dqdci = +k_f * sc[1];
  J[4089] -= dqdci; // dwdot[H]/d[CH3F]
  J[4100] += dqdci; // dwdot[CH3]/d[CH3F]
  J[4141] += dqdci; // dwdot[HF]/d[CH3F]
  J[4144] -= dqdci; // dwdot[CH3F]/d[CH3F]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5312] -= dqdT; // dwdot[CH3F]/dT

  // reaction 366: CH2F2 + H <=> CH2F + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[57];
  k_f = 55000000 * exp(-(17159.6883039409) * invT);
  dlnkfdT = (17159.6883039409) * invT2;
  // reverse
  phi_r = sc[53] * sc[60];
  Kc = exp(g_RT[1] - g_RT[53] + g_RT[57] - g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[57]) + (h_RT[53] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[57] -= q; // CH2F2
  wdot[60] += q; // CH2F
  // d()/d[H]
  dqdci = +k_f * sc[57];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[130] -= dqdci; // dwdot[CH2F2]/d[H]
  J[133] += dqdci; // dwdot[CH2F]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[60];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3926] -= dqdci; // dwdot[CH2F2]/d[HF]
  J[3929] += dqdci; // dwdot[CH2F]/d[HF]
  // d()/d[CH2F2]
  dqdci = +k_f * sc[1];
  J[4162] -= dqdci; // dwdot[H]/d[CH2F2]
  J[4214] += dqdci; // dwdot[HF]/d[CH2F2]
  J[4218] -= dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4221] += dqdci; // dwdot[CH2F]/d[CH2F2]
  // d()/d[CH2F]
  dqdci = -k_r * sc[53];
  J[4381] -= dqdci; // dwdot[H]/d[CH2F]
  J[4433] += dqdci; // dwdot[HF]/d[CH2F]
  J[4437] -= dqdci; // dwdot[CH2F2]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5313] -= dqdT; // dwdot[CH2F2]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT

  // reaction 367: CHF3 + H <=> CHF2 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[58];
  k_f = 211 * exp(1.77 * logT - (20028.0232990278) * invT);
  dlnkfdT = 1.77 * invT + (20028.0232990278) * invT2;
  // reverse
  phi_r = sc[53] * sc[61];
  Kc = exp(g_RT[1] - g_RT[53] + g_RT[58] - g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[58]) + (h_RT[53] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[58] -= q; // CHF3
  wdot[61] += q; // CHF2
  // d()/d[H]
  dqdci = +k_f * sc[58];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[131] -= dqdci; // dwdot[CHF3]/d[H]
  J[134] += dqdci; // dwdot[CHF2]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[61];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3927] -= dqdci; // dwdot[CHF3]/d[HF]
  J[3930] += dqdci; // dwdot[CHF2]/d[HF]
  // d()/d[CHF3]
  dqdci = +k_f * sc[1];
  J[4235] -= dqdci; // dwdot[H]/d[CHF3]
  J[4287] += dqdci; // dwdot[HF]/d[CHF3]
  J[4292] -= dqdci; // dwdot[CHF3]/d[CHF3]
  J[4295] += dqdci; // dwdot[CHF2]/d[CHF3]
  // d()/d[CHF2]
  dqdci = -k_r * sc[53];
  J[4454] -= dqdci; // dwdot[H]/d[CHF2]
  J[4506] += dqdci; // dwdot[HF]/d[CHF2]
  J[4511] -= dqdci; // dwdot[CHF3]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5314] -= dqdT; // dwdot[CHF3]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT

  // reaction 368: CF4 + H <=> CF3 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[59];
  k_f = 3070 * exp(1.58 * logT - (20797.9447977091) * invT);
  dlnkfdT = 1.58 * invT + (20797.9447977091) * invT2;
  // reverse
  phi_r = sc[53] * sc[62];
  Kc = exp(g_RT[1] - g_RT[53] + g_RT[59] - g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[59]) + (h_RT[53] + h_RT[62]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[59] -= q; // CF4
  wdot[62] += q; // CF3
  // d()/d[H]
  dqdci = +k_f * sc[59];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[132] -= dqdci; // dwdot[CF4]/d[H]
  J[135] += dqdci; // dwdot[CF3]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[62];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3928] -= dqdci; // dwdot[CF4]/d[HF]
  J[3931] += dqdci; // dwdot[CF3]/d[HF]
  // d()/d[CF4]
  dqdci = +k_f * sc[1];
  J[4308] -= dqdci; // dwdot[H]/d[CF4]
  J[4360] += dqdci; // dwdot[HF]/d[CF4]
  J[4366] -= dqdci; // dwdot[CF4]/d[CF4]
  J[4369] += dqdci; // dwdot[CF3]/d[CF4]
  // d()/d[CF3]
  dqdci = -k_r * sc[53];
  J[4527] -= dqdci; // dwdot[H]/d[CF3]
  J[4579] += dqdci; // dwdot[HF]/d[CF3]
  J[4585] -= dqdci; // dwdot[CF4]/d[CF3]
  J[4588] += dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5315] -= dqdT; // dwdot[CF4]/dT
  J[5318] += dqdT; // dwdot[CF3]/dT

  // reaction 369: CF4 + H <=> CHF3 + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[59];
  k_f = 915 * exp(1.45 * logT - (31999.5477785221) * invT);
  dlnkfdT = 1.45 * invT + (31999.5477785221) * invT2;
  // reverse
  phi_r = sc[54] * sc[58];
  Kc = exp(g_RT[1] - g_RT[54] - g_RT[58] + g_RT[59]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[59]) + (h_RT[54] + h_RT[58]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[54] += q; // F
  wdot[58] += q; // CHF3
  wdot[59] -= q; // CF4
  // d()/d[H]
  dqdci = +k_f * sc[59];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[127] += dqdci; // dwdot[F]/d[H]
  J[131] += dqdci; // dwdot[CHF3]/d[H]
  J[132] -= dqdci; // dwdot[CF4]/d[H]
  // d()/d[F]
  dqdci = -k_r * sc[58];
  J[3943] -= dqdci; // dwdot[H]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[4000] += dqdci; // dwdot[CHF3]/d[F]
  J[4001] -= dqdci; // dwdot[CF4]/d[F]
  // d()/d[CHF3]
  dqdci = -k_r * sc[54];
  J[4235] -= dqdci; // dwdot[H]/d[CHF3]
  J[4288] += dqdci; // dwdot[F]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4293] -= dqdci; // dwdot[CF4]/d[CHF3]
  // d()/d[CF4]
  dqdci = +k_f * sc[1];
  J[4308] -= dqdci; // dwdot[H]/d[CF4]
  J[4361] += dqdci; // dwdot[F]/d[CF4]
  J[4365] += dqdci; // dwdot[CHF3]/d[CF4]
  J[4366] -= dqdci; // dwdot[CF4]/d[CF4]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5315] -= dqdT; // dwdot[CF4]/dT

  // reaction 370: CH3F + O <=> CH2F + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[56];
  k_f = 65 * exp(1.5 * logT - (3522.51666063304) * invT);
  dlnkfdT = 1.5 * invT + (3522.51666063304) * invT2;
  // reverse
  phi_r = sc[4] * sc[60];
  Kc = exp(g_RT[2] - g_RT[4] + g_RT[56] - g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[56]) + (h_RT[4] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[56] -= q; // CH3F
  wdot[60] += q; // CH2F
  // d()/d[O]
  dqdci = +k_f * sc[56];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[202] -= dqdci; // dwdot[CH3F]/d[O]
  J[206] += dqdci; // dwdot[CH2F]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[60];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[348] -= dqdci; // dwdot[CH3F]/d[OH]
  J[352] += dqdci; // dwdot[CH2F]/d[OH]
  // d()/d[CH3F]
  dqdci = +k_f * sc[2];
  J[4090] -= dqdci; // dwdot[O]/d[CH3F]
  J[4092] += dqdci; // dwdot[OH]/d[CH3F]
  J[4144] -= dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] += dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = -k_r * sc[4];
  J[4382] -= dqdci; // dwdot[O]/d[CH2F]
  J[4384] += dqdci; // dwdot[OH]/d[CH2F]
  J[4436] -= dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5312] -= dqdT; // dwdot[CH3F]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT

  // reaction 371: CH2F2 + O <=> CHF2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[57];
  k_f = 22.5 * exp(1.5 * logT - (3069.62166140879) * invT);
  dlnkfdT = 1.5 * invT + (3069.62166140879) * invT2;
  // reverse
  phi_r = sc[4] * sc[61];
  Kc = exp(g_RT[2] - g_RT[4] + g_RT[57] - g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[57]) + (h_RT[4] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[57] -= q; // CH2F2
  wdot[61] += q; // CHF2
  // d()/d[O]
  dqdci = +k_f * sc[57];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[203] -= dqdci; // dwdot[CH2F2]/d[O]
  J[207] += dqdci; // dwdot[CHF2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[61];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[349] -= dqdci; // dwdot[CH2F2]/d[OH]
  J[353] += dqdci; // dwdot[CHF2]/d[OH]
  // d()/d[CH2F2]
  dqdci = +k_f * sc[2];
  J[4163] -= dqdci; // dwdot[O]/d[CH2F2]
  J[4165] += dqdci; // dwdot[OH]/d[CH2F2]
  J[4218] -= dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] += dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = -k_r * sc[4];
  J[4455] -= dqdci; // dwdot[O]/d[CHF2]
  J[4457] += dqdci; // dwdot[OH]/d[CHF2]
  J[4510] -= dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5313] -= dqdT; // dwdot[CH2F2]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT

  // reaction 372: CHF3 + O <=> CF3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[58];
  k_f = 307000000 * exp(-(9535.95581699944) * invT);
  dlnkfdT = (9535.95581699944) * invT2;
  // reverse
  phi_r = sc[4] * sc[62];
  Kc = exp(g_RT[2] - g_RT[4] + g_RT[58] - g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[58]) + (h_RT[4] + h_RT[62]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[58] -= q; // CHF3
  wdot[62] += q; // CF3
  // d()/d[O]
  dqdci = +k_f * sc[58];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[204] -= dqdci; // dwdot[CHF3]/d[O]
  J[208] += dqdci; // dwdot[CF3]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[62];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[350] -= dqdci; // dwdot[CHF3]/d[OH]
  J[354] += dqdci; // dwdot[CF3]/d[OH]
  // d()/d[CHF3]
  dqdci = +k_f * sc[2];
  J[4236] -= dqdci; // dwdot[O]/d[CHF3]
  J[4238] += dqdci; // dwdot[OH]/d[CHF3]
  J[4292] -= dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] += dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = -k_r * sc[4];
  J[4528] -= dqdci; // dwdot[O]/d[CF3]
  J[4530] += dqdci; // dwdot[OH]/d[CF3]
  J[4584] -= dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] += dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5314] -= dqdT; // dwdot[CHF3]/dT
  J[5318] += dqdT; // dwdot[CF3]/dT

  // reaction 373: CH3F + OH <=> CH2F + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[56];
  k_f = 260 * exp(1.5 * logT - (1479.45699746588) * invT);
  dlnkfdT = 1.5 * invT + (1479.45699746588) * invT2;
  // reverse
  phi_r = sc[5] * sc[60];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[56] - g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[56]) + (h_RT[5] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[56] -= q; // CH3F
  wdot[60] += q; // CH2F
  // d()/d[OH]
  dqdci = +k_f * sc[56];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[348] -= dqdci; // dwdot[CH3F]/d[OH]
  J[352] += dqdci; // dwdot[CH2F]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[60];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[421] -= dqdci; // dwdot[CH3F]/d[H2O]
  J[425] += dqdci; // dwdot[CH2F]/d[H2O]
  // d()/d[CH3F]
  dqdci = +k_f * sc[4];
  J[4092] -= dqdci; // dwdot[OH]/d[CH3F]
  J[4093] += dqdci; // dwdot[H2O]/d[CH3F]
  J[4144] -= dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] += dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = -k_r * sc[5];
  J[4384] -= dqdci; // dwdot[OH]/d[CH2F]
  J[4385] += dqdci; // dwdot[H2O]/d[CH2F]
  J[4436] -= dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5312] -= dqdT; // dwdot[CH3F]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT

  // reaction 374: CH2F2 + OH <=> CHF2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[57];
  k_f = 28 * exp(1.7 * logT - (1278.17033114399) * invT);
  dlnkfdT = 1.7 * invT + (1278.17033114399) * invT2;
  // reverse
  phi_r = sc[5] * sc[61];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[57] - g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[57]) + (h_RT[5] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[57] -= q; // CH2F2
  wdot[61] += q; // CHF2
  // d()/d[OH]
  dqdci = +k_f * sc[57];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[349] -= dqdci; // dwdot[CH2F2]/d[OH]
  J[353] += dqdci; // dwdot[CHF2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[61];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[422] -= dqdci; // dwdot[CH2F2]/d[H2O]
  J[426] += dqdci; // dwdot[CHF2]/d[H2O]
  // d()/d[CH2F2]
  dqdci = +k_f * sc[4];
  J[4165] -= dqdci; // dwdot[OH]/d[CH2F2]
  J[4166] += dqdci; // dwdot[H2O]/d[CH2F2]
  J[4218] -= dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] += dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = -k_r * sc[5];
  J[4457] -= dqdci; // dwdot[OH]/d[CHF2]
  J[4458] += dqdci; // dwdot[H2O]/d[CHF2]
  J[4510] -= dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5313] -= dqdT; // dwdot[CH2F2]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT

  // reaction 375: CHF3 + OH <=> CF3 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[58];
  k_f = 12.5 * exp(1.55 * logT - (1846.80516350332) * invT);
  dlnkfdT = 1.55 * invT + (1846.80516350332) * invT2;
  // reverse
  phi_r = sc[5] * sc[62];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[58] - g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[58]) + (h_RT[5] + h_RT[62]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[58] -= q; // CHF3
  wdot[62] += q; // CF3
  // d()/d[OH]
  dqdci = +k_f * sc[58];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[350] -= dqdci; // dwdot[CHF3]/d[OH]
  J[354] += dqdci; // dwdot[CF3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[62];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[423] -= dqdci; // dwdot[CHF3]/d[H2O]
  J[427] += dqdci; // dwdot[CF3]/d[H2O]
  // d()/d[CHF3]
  dqdci = +k_f * sc[4];
  J[4238] -= dqdci; // dwdot[OH]/d[CHF3]
  J[4239] += dqdci; // dwdot[H2O]/d[CHF3]
  J[4292] -= dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] += dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = -k_r * sc[5];
  J[4530] -= dqdci; // dwdot[OH]/d[CF3]
  J[4531] += dqdci; // dwdot[H2O]/d[CF3]
  J[4584] -= dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] += dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5314] -= dqdT; // dwdot[CHF3]/dT
  J[5318] += dqdT; // dwdot[CF3]/dT

  // reaction 376: CH2F + H2O2 <=> CH3F + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[60];
  k_f = 12000 * exp(-(-301.929999482832) * invT);
  dlnkfdT = (-301.929999482832) * invT2;
  // reverse
  phi_r = sc[6] * sc[56];
  Kc = exp(-g_RT[6] + g_RT[7] - g_RT[56] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[60]) + (h_RT[6] + h_RT[56]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[56] += q; // CH3F
  wdot[60] -= q; // CH2F
  // d()/d[HO2]
  dqdci = -k_r * sc[56];
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[494] += dqdci; // dwdot[CH3F]/d[HO2]
  J[498] -= dqdci; // dwdot[CH2F]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[60];
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[567] += dqdci; // dwdot[CH3F]/d[H2O2]
  J[571] -= dqdci; // dwdot[CH2F]/d[H2O2]
  // d()/d[CH3F]
  dqdci = -k_r * sc[6];
  J[4094] += dqdci; // dwdot[HO2]/d[CH3F]
  J[4095] -= dqdci; // dwdot[H2O2]/d[CH3F]
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] -= dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[7];
  J[4386] += dqdci; // dwdot[HO2]/d[CH2F]
  J[4387] -= dqdci; // dwdot[H2O2]/d[CH2F]
  J[4436] += dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 377: CHF2 + H2O2 <=> CH2F2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[61];
  k_f = 12000 * exp(-(-301.929999482832) * invT);
  dlnkfdT = (-301.929999482832) * invT2;
  // reverse
  phi_r = sc[6] * sc[57];
  Kc = exp(-g_RT[6] + g_RT[7] - g_RT[57] + g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[61]) + (h_RT[6] + h_RT[57]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[57] += q; // CH2F2
  wdot[61] -= q; // CHF2
  // d()/d[HO2]
  dqdci = -k_r * sc[57];
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[495] += dqdci; // dwdot[CH2F2]/d[HO2]
  J[499] -= dqdci; // dwdot[CHF2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[61];
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[568] += dqdci; // dwdot[CH2F2]/d[H2O2]
  J[572] -= dqdci; // dwdot[CHF2]/d[H2O2]
  // d()/d[CH2F2]
  dqdci = -k_r * sc[6];
  J[4167] += dqdci; // dwdot[HO2]/d[CH2F2]
  J[4168] -= dqdci; // dwdot[H2O2]/d[CH2F2]
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] -= dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = +k_f * sc[7];
  J[4459] += dqdci; // dwdot[HO2]/d[CHF2]
  J[4460] -= dqdci; // dwdot[H2O2]/d[CHF2]
  J[4510] += dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT

  // reaction 378: CF3 + H2O2 <=> CHF3 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[62];
  k_f = 12000 * exp(-(-301.929999482832) * invT);
  dlnkfdT = (-301.929999482832) * invT2;
  // reverse
  phi_r = sc[6] * sc[58];
  Kc = exp(-g_RT[6] + g_RT[7] - g_RT[58] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[62]) + (h_RT[6] + h_RT[58]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  // d()/d[HO2]
  dqdci = -k_r * sc[58];
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[496] += dqdci; // dwdot[CHF3]/d[HO2]
  J[500] -= dqdci; // dwdot[CF3]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[62];
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[569] += dqdci; // dwdot[CHF3]/d[H2O2]
  J[573] -= dqdci; // dwdot[CF3]/d[H2O2]
  // d()/d[CHF3]
  dqdci = -k_r * sc[6];
  J[4240] += dqdci; // dwdot[HO2]/d[CHF3]
  J[4241] -= dqdci; // dwdot[H2O2]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[7];
  J[4532] += dqdci; // dwdot[HO2]/d[CF3]
  J[4533] -= dqdci; // dwdot[H2O2]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 379: CH3 + CH3F <=> CH2F + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[56];
  k_f = 150000 * exp(-(5736.6699901738) * invT);
  dlnkfdT = (5736.6699901738) * invT2;
  // reverse
  phi_r = sc[13] * sc[60];
  Kc = exp(g_RT[12] - g_RT[13] + g_RT[56] - g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[56]) + (h_RT[13] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[56] -= q; // CH3F
  wdot[60] += q; // CH2F
  // d()/d[CH3]
  dqdci = +k_f * sc[56];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[932] -= dqdci; // dwdot[CH3F]/d[CH3]
  J[936] += dqdci; // dwdot[CH2F]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[60];
  J[961] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[962] += dqdci;  // dwdot[CH4]/d[CH4]
  J[1005] -= dqdci; // dwdot[CH3F]/d[CH4]
  J[1009] += dqdci; // dwdot[CH2F]/d[CH4]
  // d()/d[CH3F]
  dqdci = +k_f * sc[12];
  J[4100] -= dqdci; // dwdot[CH3]/d[CH3F]
  J[4101] += dqdci; // dwdot[CH4]/d[CH3F]
  J[4144] -= dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] += dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = -k_r * sc[13];
  J[4392] -= dqdci; // dwdot[CH3]/d[CH2F]
  J[4393] += dqdci; // dwdot[CH4]/d[CH2F]
  J[4436] -= dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5312] -= dqdT; // dwdot[CH3F]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT

  // reaction 380: CH2F2 + CH3 <=> CH4 + CHF2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[57];
  k_f = 87000 * exp(-(5132.80999120814) * invT);
  dlnkfdT = (5132.80999120814) * invT2;
  // reverse
  phi_r = sc[13] * sc[61];
  Kc = exp(g_RT[12] - g_RT[13] + g_RT[57] - g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[57]) + (h_RT[13] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[57] -= q; // CH2F2
  wdot[61] += q; // CHF2
  // d()/d[CH3]
  dqdci = +k_f * sc[57];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[933] -= dqdci; // dwdot[CH2F2]/d[CH3]
  J[937] += dqdci; // dwdot[CHF2]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[61];
  J[961] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[962] += dqdci;  // dwdot[CH4]/d[CH4]
  J[1006] -= dqdci; // dwdot[CH2F2]/d[CH4]
  J[1010] += dqdci; // dwdot[CHF2]/d[CH4]
  // d()/d[CH2F2]
  dqdci = +k_f * sc[12];
  J[4173] -= dqdci; // dwdot[CH3]/d[CH2F2]
  J[4174] += dqdci; // dwdot[CH4]/d[CH2F2]
  J[4218] -= dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] += dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = -k_r * sc[13];
  J[4465] -= dqdci; // dwdot[CH3]/d[CHF2]
  J[4466] += dqdci; // dwdot[CH4]/d[CHF2]
  J[4510] -= dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5313] -= dqdT; // dwdot[CH2F2]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT

  // reaction 381: CF3 + CH4 <=> CH3 + CHF3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[62];
  k_f = 834000 * exp(-(5495.12599058754) * invT);
  dlnkfdT = (5495.12599058754) * invT2;
  // reverse
  phi_r = sc[12] * sc[58];
  Kc = exp(-g_RT[12] + g_RT[13] - g_RT[58] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[62]) + (h_RT[12] + h_RT[58]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // CH3
  wdot[13] -= q; // CH4
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  // d()/d[CH3]
  dqdci = -k_r * sc[58];
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[889] -= dqdci; // dwdot[CH4]/d[CH3]
  J[934] += dqdci; // dwdot[CHF3]/d[CH3]
  J[938] -= dqdci; // dwdot[CF3]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[62];
  J[961] += dqdci;  // dwdot[CH3]/d[CH4]
  J[962] -= dqdci;  // dwdot[CH4]/d[CH4]
  J[1007] += dqdci; // dwdot[CHF3]/d[CH4]
  J[1011] -= dqdci; // dwdot[CF3]/d[CH4]
  // d()/d[CHF3]
  dqdci = -k_r * sc[12];
  J[4246] += dqdci; // dwdot[CH3]/d[CHF3]
  J[4247] -= dqdci; // dwdot[CH4]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[13];
  J[4538] += dqdci; // dwdot[CH3]/d[CF3]
  J[4539] -= dqdci; // dwdot[CH4]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5269] -= dqdT; // dwdot[CH4]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 382: C2H3 + CH3F <=> C2H4 + CH2F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[23] * sc[56];
  k_f = 150000 * exp(-(5183.13165778861) * invT);
  dlnkfdT = (5183.13165778861) * invT2;
  // reverse
  phi_r = sc[24] * sc[60];
  Kc = exp(g_RT[23] - g_RT[24] + g_RT[56] - g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[23] + h_RT[56]) + (h_RT[24] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[23] -= q; // C2H3
  wdot[24] += q; // C2H4
  wdot[56] -= q; // CH3F
  wdot[60] += q; // CH2F
  // d()/d[C2H3]
  dqdci = +k_f * sc[56];
  J[1702] -= dqdci; // dwdot[C2H3]/d[C2H3]
  J[1703] += dqdci; // dwdot[C2H4]/d[C2H3]
  J[1735] -= dqdci; // dwdot[CH3F]/d[C2H3]
  J[1739] += dqdci; // dwdot[CH2F]/d[C2H3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[60];
  J[1775] -= dqdci; // dwdot[C2H3]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[1808] -= dqdci; // dwdot[CH3F]/d[C2H4]
  J[1812] += dqdci; // dwdot[CH2F]/d[C2H4]
  // d()/d[CH3F]
  dqdci = +k_f * sc[23];
  J[4111] -= dqdci; // dwdot[C2H3]/d[CH3F]
  J[4112] += dqdci; // dwdot[C2H4]/d[CH3F]
  J[4144] -= dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] += dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = -k_r * sc[24];
  J[4403] -= dqdci; // dwdot[C2H3]/d[CH2F]
  J[4404] += dqdci; // dwdot[C2H4]/d[CH2F]
  J[4436] -= dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT
  J[5312] -= dqdT; // dwdot[CH3F]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT

  // reaction 383: C2H3 + CH2F2 <=> C2H4 + CHF2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[23] * sc[57];
  k_f = 90000 * exp(-(4629.59332540342) * invT);
  dlnkfdT = (4629.59332540342) * invT2;
  // reverse
  phi_r = sc[24] * sc[61];
  Kc = exp(g_RT[23] - g_RT[24] + g_RT[57] - g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[23] + h_RT[57]) + (h_RT[24] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[23] -= q; // C2H3
  wdot[24] += q; // C2H4
  wdot[57] -= q; // CH2F2
  wdot[61] += q; // CHF2
  // d()/d[C2H3]
  dqdci = +k_f * sc[57];
  J[1702] -= dqdci; // dwdot[C2H3]/d[C2H3]
  J[1703] += dqdci; // dwdot[C2H4]/d[C2H3]
  J[1736] -= dqdci; // dwdot[CH2F2]/d[C2H3]
  J[1740] += dqdci; // dwdot[CHF2]/d[C2H3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[61];
  J[1775] -= dqdci; // dwdot[C2H3]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[1809] -= dqdci; // dwdot[CH2F2]/d[C2H4]
  J[1813] += dqdci; // dwdot[CHF2]/d[C2H4]
  // d()/d[CH2F2]
  dqdci = +k_f * sc[23];
  J[4184] -= dqdci; // dwdot[C2H3]/d[CH2F2]
  J[4185] += dqdci; // dwdot[C2H4]/d[CH2F2]
  J[4218] -= dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] += dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = -k_r * sc[24];
  J[4476] -= dqdci; // dwdot[C2H3]/d[CHF2]
  J[4477] += dqdci; // dwdot[C2H4]/d[CHF2]
  J[4510] -= dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT
  J[5313] -= dqdT; // dwdot[CH2F2]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT

  // reaction 384: C2H4 + CF3 <=> C2H3 + CHF3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[24] * sc[62];
  k_f = 800000 * exp(-(6038.59998965664) * invT);
  dlnkfdT = (6038.59998965664) * invT2;
  // reverse
  phi_r = sc[23] * sc[58];
  Kc = exp(-g_RT[23] + g_RT[24] - g_RT[58] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[24] + h_RT[62]) + (h_RT[23] + h_RT[58]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[23] += q; // C2H3
  wdot[24] -= q; // C2H4
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  // d()/d[C2H3]
  dqdci = -k_r * sc[58];
  J[1702] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[1703] -= dqdci; // dwdot[C2H4]/d[C2H3]
  J[1737] += dqdci; // dwdot[CHF3]/d[C2H3]
  J[1741] -= dqdci; // dwdot[CF3]/d[C2H3]
  // d()/d[C2H4]
  dqdci = +k_f * sc[62];
  J[1775] += dqdci; // dwdot[C2H3]/d[C2H4]
  J[1776] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[1810] += dqdci; // dwdot[CHF3]/d[C2H4]
  J[1814] -= dqdci; // dwdot[CF3]/d[C2H4]
  // d()/d[CHF3]
  dqdci = -k_r * sc[23];
  J[4257] += dqdci; // dwdot[C2H3]/d[CHF3]
  J[4258] -= dqdci; // dwdot[C2H4]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[24];
  J[4549] += dqdci; // dwdot[C2H3]/d[CF3]
  J[4550] -= dqdci; // dwdot[C2H4]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5279] += dqdT; // dwdot[C2H3]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 385: CF3 + CH3F <=> CH2F + CHF3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[56] * sc[62];
  k_f = 575000 * exp(-(5641.05882367091) * invT);
  dlnkfdT = (5641.05882367091) * invT2;
  // reverse
  phi_r = sc[58] * sc[60];
  Kc = exp(g_RT[56] - g_RT[58] - g_RT[60] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[56] + h_RT[62]) + (h_RT[58] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[56] -= q; // CH3F
  wdot[58] += q; // CHF3
  wdot[60] += q; // CH2F
  wdot[62] -= q; // CF3
  // d()/d[CH3F]
  dqdci = +k_f * sc[62];
  J[4144] -= dqdci; // dwdot[CH3F]/d[CH3F]
  J[4146] += dqdci; // dwdot[CHF3]/d[CH3F]
  J[4148] += dqdci; // dwdot[CH2F]/d[CH3F]
  J[4150] -= dqdci; // dwdot[CF3]/d[CH3F]
  // d()/d[CHF3]
  dqdci = -k_r * sc[60];
  J[4290] -= dqdci; // dwdot[CH3F]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4294] += dqdci; // dwdot[CH2F]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CH2F]
  dqdci = -k_r * sc[58];
  J[4436] -= dqdci; // dwdot[CH3F]/d[CH2F]
  J[4438] += dqdci; // dwdot[CHF3]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  J[4442] -= dqdci; // dwdot[CF3]/d[CH2F]
  // d()/d[CF3]
  dqdci = +k_f * sc[56];
  J[4582] -= dqdci; // dwdot[CH3F]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4586] += dqdci; // dwdot[CH2F]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5312] -= dqdT; // dwdot[CH3F]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 386: CH2F + CH2F2 <=> CH3F + CHF2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[57] * sc[60];
  k_f = 90000 * exp(-(7045.03332126608) * invT);
  dlnkfdT = (7045.03332126608) * invT2;
  // reverse
  phi_r = sc[56] * sc[61];
  Kc = exp(-g_RT[56] + g_RT[57] + g_RT[60] - g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[57] + h_RT[60]) + (h_RT[56] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[56] += q; // CH3F
  wdot[57] -= q; // CH2F2
  wdot[60] -= q; // CH2F
  wdot[61] += q; // CHF2
  // d()/d[CH3F]
  dqdci = -k_r * sc[61];
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4145] -= dqdci; // dwdot[CH2F2]/d[CH3F]
  J[4148] -= dqdci; // dwdot[CH2F]/d[CH3F]
  J[4149] += dqdci; // dwdot[CHF2]/d[CH3F]
  // d()/d[CH2F2]
  dqdci = +k_f * sc[60];
  J[4217] += dqdci; // dwdot[CH3F]/d[CH2F2]
  J[4218] -= dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4221] -= dqdci; // dwdot[CH2F]/d[CH2F2]
  J[4222] += dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CH2F]
  dqdci = +k_f * sc[57];
  J[4436] += dqdci; // dwdot[CH3F]/d[CH2F]
  J[4437] -= dqdci; // dwdot[CH2F2]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4441] += dqdci; // dwdot[CHF2]/d[CH2F]
  // d()/d[CHF2]
  dqdci = -k_r * sc[56];
  J[4509] += dqdci; // dwdot[CH3F]/d[CHF2]
  J[4510] -= dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4513] -= dqdci; // dwdot[CH2F]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5313] -= dqdT; // dwdot[CH2F2]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT

  // reaction 387: CF3 + CH2F2 <=> CHF2 + CHF3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[57] * sc[62];
  k_f = 427000 * exp(-(5686.34832359333) * invT);
  dlnkfdT = (5686.34832359333) * invT2;
  // reverse
  phi_r = sc[58] * sc[61];
  Kc = exp(g_RT[57] - g_RT[58] - g_RT[61] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[57] + h_RT[62]) + (h_RT[58] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[57] -= q; // CH2F2
  wdot[58] += q; // CHF3
  wdot[61] += q; // CHF2
  wdot[62] -= q; // CF3
  // d()/d[CH2F2]
  dqdci = +k_f * sc[62];
  J[4218] -= dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4219] += dqdci; // dwdot[CHF3]/d[CH2F2]
  J[4222] += dqdci; // dwdot[CHF2]/d[CH2F2]
  J[4223] -= dqdci; // dwdot[CF3]/d[CH2F2]
  // d()/d[CHF3]
  dqdci = -k_r * sc[61];
  J[4291] -= dqdci; // dwdot[CH2F2]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4295] += dqdci; // dwdot[CHF2]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CHF2]
  dqdci = -k_r * sc[58];
  J[4510] -= dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4511] += dqdci; // dwdot[CHF3]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  J[4515] -= dqdci; // dwdot[CF3]/d[CHF2]
  // d()/d[CF3]
  dqdci = +k_f * sc[57];
  J[4583] -= dqdci; // dwdot[CH2F2]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4587] += dqdci; // dwdot[CHF2]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5313] -= dqdT; // dwdot[CH2F2]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 388: CH2F + CH3OH <=> CH3F + CH3O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[60];
  k_f = 1.44e-05 * exp(3.1 * logT - (4931.52332488625) * invT);
  dlnkfdT = 3.1 * invT + (4931.52332488625) * invT2;
  // reverse
  phi_r = sc[19] * sc[56];
  Kc = exp(-g_RT[19] + g_RT[20] - g_RT[56] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[60]) + (h_RT[19] + h_RT[56]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  wdot[56] += q; // CH3F
  wdot[60] -= q; // CH2F
  // d()/d[CH3O]
  dqdci = -k_r * sc[56];
  J[1406] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[1407] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  J[1443] += dqdci; // dwdot[CH3F]/d[CH3O]
  J[1447] -= dqdci; // dwdot[CH2F]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[60];
  J[1479] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  J[1516] += dqdci; // dwdot[CH3F]/d[CH3OH]
  J[1520] -= dqdci; // dwdot[CH2F]/d[CH3OH]
  // d()/d[CH3F]
  dqdci = -k_r * sc[19];
  J[4107] += dqdci; // dwdot[CH3O]/d[CH3F]
  J[4108] -= dqdci; // dwdot[CH3OH]/d[CH3F]
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] -= dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[20];
  J[4399] += dqdci; // dwdot[CH3O]/d[CH2F]
  J[4400] -= dqdci; // dwdot[CH3OH]/d[CH2F]
  J[4436] += dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 389: CH3OH + CHF2 <=> CH2F2 + CH3O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[61];
  k_f = 1.44e-05 * exp(3.1 * logT - (4528.94999224248) * invT);
  dlnkfdT = 3.1 * invT + (4528.94999224248) * invT2;
  // reverse
  phi_r = sc[19] * sc[57];
  Kc = exp(-g_RT[19] + g_RT[20] - g_RT[57] + g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[61]) + (h_RT[19] + h_RT[57]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  wdot[57] += q; // CH2F2
  wdot[61] -= q; // CHF2
  // d()/d[CH3O]
  dqdci = -k_r * sc[57];
  J[1406] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[1407] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  J[1444] += dqdci; // dwdot[CH2F2]/d[CH3O]
  J[1448] -= dqdci; // dwdot[CHF2]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[61];
  J[1479] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  J[1517] += dqdci; // dwdot[CH2F2]/d[CH3OH]
  J[1521] -= dqdci; // dwdot[CHF2]/d[CH3OH]
  // d()/d[CH2F2]
  dqdci = -k_r * sc[19];
  J[4180] += dqdci; // dwdot[CH3O]/d[CH2F2]
  J[4181] -= dqdci; // dwdot[CH3OH]/d[CH2F2]
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] -= dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = +k_f * sc[20];
  J[4472] += dqdci; // dwdot[CH3O]/d[CHF2]
  J[4473] -= dqdci; // dwdot[CH3OH]/d[CHF2]
  J[4510] += dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT

  // reaction 390: CF3 + CH3OH <=> CH3O + CHF3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[62];
  k_f = 1.44e-05 * exp(3.1 * logT - (2767.69166192596) * invT);
  dlnkfdT = 3.1 * invT + (2767.69166192596) * invT2;
  // reverse
  phi_r = sc[19] * sc[58];
  Kc = exp(-g_RT[19] + g_RT[20] - g_RT[58] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[62]) + (h_RT[19] + h_RT[58]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  // d()/d[CH3O]
  dqdci = -k_r * sc[58];
  J[1406] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[1407] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  J[1445] += dqdci; // dwdot[CHF3]/d[CH3O]
  J[1449] -= dqdci; // dwdot[CF3]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[62];
  J[1479] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  J[1518] += dqdci; // dwdot[CHF3]/d[CH3OH]
  J[1522] -= dqdci; // dwdot[CF3]/d[CH3OH]
  // d()/d[CHF3]
  dqdci = -k_r * sc[19];
  J[4253] += dqdci; // dwdot[CH3O]/d[CHF3]
  J[4254] -= dqdci; // dwdot[CH3OH]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[20];
  J[4545] += dqdci; // dwdot[CH3O]/d[CF3]
  J[4546] -= dqdci; // dwdot[CH3OH]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 391: CH2F + CH3OH <=> CH2OH + CH3F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[60];
  k_f = 3.2e-05 * exp(3.2 * logT - (5032.1666580472) * invT);
  dlnkfdT = 3.2 * invT + (5032.1666580472) * invT2;
  // reverse
  phi_r = sc[18] * sc[56];
  Kc = exp(-g_RT[18] + g_RT[20] - g_RT[56] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[60]) + (h_RT[18] + h_RT[56]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  wdot[56] += q; // CH3F
  wdot[60] -= q; // CH2F
  // d()/d[CH2OH]
  dqdci = -k_r * sc[56];
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1334] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  J[1370] += dqdci; // dwdot[CH3F]/d[CH2OH]
  J[1374] -= dqdci; // dwdot[CH2F]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[60];
  J[1478] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  J[1516] += dqdci; // dwdot[CH3F]/d[CH3OH]
  J[1520] -= dqdci; // dwdot[CH2F]/d[CH3OH]
  // d()/d[CH3F]
  dqdci = -k_r * sc[18];
  J[4106] += dqdci; // dwdot[CH2OH]/d[CH3F]
  J[4108] -= dqdci; // dwdot[CH3OH]/d[CH3F]
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] -= dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[20];
  J[4398] += dqdci; // dwdot[CH2OH]/d[CH2F]
  J[4400] -= dqdci; // dwdot[CH3OH]/d[CH2F]
  J[4436] += dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 392: CH3OH + CHF2 <=> CH2F2 + CH2OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[61];
  k_f = 3.2e-05 * exp(3.2 * logT - (4679.91499198389) * invT);
  dlnkfdT = 3.2 * invT + (4679.91499198389) * invT2;
  // reverse
  phi_r = sc[18] * sc[57];
  Kc = exp(-g_RT[18] + g_RT[20] - g_RT[57] + g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[61]) + (h_RT[18] + h_RT[57]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  wdot[57] += q; // CH2F2
  wdot[61] -= q; // CHF2
  // d()/d[CH2OH]
  dqdci = -k_r * sc[57];
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1334] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  J[1371] += dqdci; // dwdot[CH2F2]/d[CH2OH]
  J[1375] -= dqdci; // dwdot[CHF2]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[61];
  J[1478] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  J[1517] += dqdci; // dwdot[CH2F2]/d[CH3OH]
  J[1521] -= dqdci; // dwdot[CHF2]/d[CH3OH]
  // d()/d[CH2F2]
  dqdci = -k_r * sc[18];
  J[4179] += dqdci; // dwdot[CH2OH]/d[CH2F2]
  J[4181] -= dqdci; // dwdot[CH3OH]/d[CH2F2]
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] -= dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = +k_f * sc[20];
  J[4471] += dqdci; // dwdot[CH2OH]/d[CHF2]
  J[4473] -= dqdci; // dwdot[CH3OH]/d[CHF2]
  J[4510] += dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT

  // reaction 393: CF3 + CH3OH <=> CH2OH + CHF3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[62];
  k_f = 3.2e-05 * exp(3.2 * logT - (2868.3349950869) * invT);
  dlnkfdT = 3.2 * invT + (2868.3349950869) * invT2;
  // reverse
  phi_r = sc[18] * sc[58];
  Kc = exp(-g_RT[18] + g_RT[20] - g_RT[58] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[62]) + (h_RT[18] + h_RT[58]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  // d()/d[CH2OH]
  dqdci = -k_r * sc[58];
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1334] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  J[1372] += dqdci; // dwdot[CHF3]/d[CH2OH]
  J[1376] -= dqdci; // dwdot[CF3]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[62];
  J[1478] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  J[1518] += dqdci; // dwdot[CHF3]/d[CH3OH]
  J[1522] -= dqdci; // dwdot[CF3]/d[CH3OH]
  // d()/d[CHF3]
  dqdci = -k_r * sc[18];
  J[4252] += dqdci; // dwdot[CH2OH]/d[CHF3]
  J[4254] -= dqdci; // dwdot[CH3OH]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[20];
  J[4544] += dqdci; // dwdot[CH2OH]/d[CF3]
  J[4546] -= dqdci; // dwdot[CH3OH]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 394: CH2F + CH2O <=> CH3F + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[60];
  k_f = 0.00554 * exp(2.81 * logT - (4176.69832617917) * invT);
  dlnkfdT = 2.81 * invT + (4176.69832617917) * invT2;
  // reverse
  phi_r = sc[16] * sc[56];
  Kc = exp(-g_RT[16] + g_RT[17] - g_RT[56] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[60]) + (h_RT[16] + h_RT[56]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  wdot[56] += q; // CH3F
  wdot[60] -= q; // CH2F
  // d()/d[HCO]
  dqdci = -k_r * sc[56];
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  J[1224] += dqdci; // dwdot[CH3F]/d[HCO]
  J[1228] -= dqdci; // dwdot[CH2F]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[60];
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[1297] += dqdci; // dwdot[CH3F]/d[CH2O]
  J[1301] -= dqdci; // dwdot[CH2F]/d[CH2O]
  // d()/d[CH3F]
  dqdci = -k_r * sc[16];
  J[4104] += dqdci; // dwdot[HCO]/d[CH3F]
  J[4105] -= dqdci; // dwdot[CH2O]/d[CH3F]
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] -= dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[17];
  J[4396] += dqdci; // dwdot[HCO]/d[CH2F]
  J[4397] -= dqdci; // dwdot[CH2O]/d[CH2F]
  J[4436] += dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 395: CH2O + CHF2 <=> CH2F2 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[61];
  k_f = 0.00554 * exp(2.81 * logT - (3925.08999327681) * invT);
  dlnkfdT = 2.81 * invT + (3925.08999327681) * invT2;
  // reverse
  phi_r = sc[16] * sc[57];
  Kc = exp(-g_RT[16] + g_RT[17] - g_RT[57] + g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[61]) + (h_RT[16] + h_RT[57]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  wdot[57] += q; // CH2F2
  wdot[61] -= q; // CHF2
  // d()/d[HCO]
  dqdci = -k_r * sc[57];
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  J[1225] += dqdci; // dwdot[CH2F2]/d[HCO]
  J[1229] -= dqdci; // dwdot[CHF2]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[61];
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[1298] += dqdci; // dwdot[CH2F2]/d[CH2O]
  J[1302] -= dqdci; // dwdot[CHF2]/d[CH2O]
  // d()/d[CH2F2]
  dqdci = -k_r * sc[16];
  J[4177] += dqdci; // dwdot[HCO]/d[CH2F2]
  J[4178] -= dqdci; // dwdot[CH2O]/d[CH2F2]
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] -= dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = +k_f * sc[17];
  J[4469] += dqdci; // dwdot[HCO]/d[CHF2]
  J[4470] -= dqdci; // dwdot[CH2O]/d[CHF2]
  J[4510] += dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT

  // reaction 396: CF3 + CH2O <=> CHF3 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[62];
  k_f = 0.00554 * exp(2.81 * logT - (2314.79666270171) * invT);
  dlnkfdT = 2.81 * invT + (2314.79666270171) * invT2;
  // reverse
  phi_r = sc[16] * sc[58];
  Kc = exp(-g_RT[16] + g_RT[17] - g_RT[58] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[62]) + (h_RT[16] + h_RT[58]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  // d()/d[HCO]
  dqdci = -k_r * sc[58];
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  J[1226] += dqdci; // dwdot[CHF3]/d[HCO]
  J[1230] -= dqdci; // dwdot[CF3]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[62];
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[1299] += dqdci; // dwdot[CHF3]/d[CH2O]
  J[1303] -= dqdci; // dwdot[CF3]/d[CH2O]
  // d()/d[CHF3]
  dqdci = -k_r * sc[16];
  J[4250] += dqdci; // dwdot[HCO]/d[CHF3]
  J[4251] -= dqdci; // dwdot[CH2O]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[17];
  J[4542] += dqdci; // dwdot[HCO]/d[CF3]
  J[4543] -= dqdci; // dwdot[CH2O]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 397: CH2F + HCO <=> CH3F + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[60];
  k_f = 90000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[56];
  Kc = exp(-g_RT[14] + g_RT[16] - g_RT[56] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[60]) + (h_RT[14] + h_RT[56]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  wdot[56] += q; // CH3F
  wdot[60] -= q; // CH2F
  // d()/d[CO]
  dqdci = -k_r * sc[56];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  J[1078] += dqdci; // dwdot[CH3F]/d[CO]
  J[1082] -= dqdci; // dwdot[CH2F]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[60];
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  J[1224] += dqdci; // dwdot[CH3F]/d[HCO]
  J[1228] -= dqdci; // dwdot[CH2F]/d[HCO]
  // d()/d[CH3F]
  dqdci = -k_r * sc[14];
  J[4102] += dqdci; // dwdot[CO]/d[CH3F]
  J[4104] -= dqdci; // dwdot[HCO]/d[CH3F]
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] -= dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[16];
  J[4394] += dqdci; // dwdot[CO]/d[CH2F]
  J[4396] -= dqdci; // dwdot[HCO]/d[CH2F]
  J[4436] += dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 398: CHF2 + HCO <=> CH2F2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[61];
  k_f = 90000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[57];
  Kc = exp(-g_RT[14] + g_RT[16] - g_RT[57] + g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[61]) + (h_RT[14] + h_RT[57]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  wdot[57] += q; // CH2F2
  wdot[61] -= q; // CHF2
  // d()/d[CO]
  dqdci = -k_r * sc[57];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  J[1079] += dqdci; // dwdot[CH2F2]/d[CO]
  J[1083] -= dqdci; // dwdot[CHF2]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[61];
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  J[1225] += dqdci; // dwdot[CH2F2]/d[HCO]
  J[1229] -= dqdci; // dwdot[CHF2]/d[HCO]
  // d()/d[CH2F2]
  dqdci = -k_r * sc[14];
  J[4175] += dqdci; // dwdot[CO]/d[CH2F2]
  J[4177] -= dqdci; // dwdot[HCO]/d[CH2F2]
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] -= dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = +k_f * sc[16];
  J[4467] += dqdci; // dwdot[CO]/d[CHF2]
  J[4469] -= dqdci; // dwdot[HCO]/d[CHF2]
  J[4510] += dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT

  // reaction 399: CF3 + HCO <=> CHF3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[62];
  k_f = 90000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[58];
  Kc = exp(-g_RT[14] + g_RT[16] - g_RT[58] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[62]) + (h_RT[14] + h_RT[58]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  // d()/d[CO]
  dqdci = -k_r * sc[58];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  J[1080] += dqdci; // dwdot[CHF3]/d[CO]
  J[1084] -= dqdci; // dwdot[CF3]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[62];
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  J[1226] += dqdci; // dwdot[CHF3]/d[HCO]
  J[1230] -= dqdci; // dwdot[CF3]/d[HCO]
  // d()/d[CHF3]
  dqdci = -k_r * sc[14];
  J[4248] += dqdci; // dwdot[CO]/d[CHF3]
  J[4250] -= dqdci; // dwdot[HCO]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[16];
  J[4540] += dqdci; // dwdot[CO]/d[CF3]
  J[4542] -= dqdci; // dwdot[HCO]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 400: CH2F + HCO <=> CH2CO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[60];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[28] * sc[53];
  Kc = exp(g_RT[16] - g_RT[28] - g_RT[53] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[60]) + (h_RT[28] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] -= q; // HCO
  wdot[28] += q; // CH2CO
  wdot[53] += q; // HF
  wdot[60] -= q; // CH2F
  // d()/d[HCO]
  dqdci = +k_f * sc[60];
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  J[1196] += dqdci; // dwdot[CH2CO]/d[HCO]
  J[1221] += dqdci; // dwdot[HF]/d[HCO]
  J[1228] -= dqdci; // dwdot[CH2F]/d[HCO]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[53];
  J[2060] -= dqdci; // dwdot[HCO]/d[CH2CO]
  J[2072] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[2097] += dqdci; // dwdot[HF]/d[CH2CO]
  J[2104] -= dqdci; // dwdot[CH2F]/d[CH2CO]
  // d()/d[HF]
  dqdci = -k_r * sc[28];
  J[3885] -= dqdci; // dwdot[HCO]/d[HF]
  J[3897] += dqdci; // dwdot[CH2CO]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3929] -= dqdci; // dwdot[CH2F]/d[HF]
  // d()/d[CH2F]
  dqdci = +k_f * sc[16];
  J[4396] -= dqdci; // dwdot[HCO]/d[CH2F]
  J[4408] += dqdci; // dwdot[CH2CO]/d[CH2F]
  J[4433] += dqdci; // dwdot[HF]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT
  J[5284] += dqdT; // dwdot[CH2CO]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 401: CH2F + O2 => CHFO + H + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[60];
  k_f = 2260 * exp(1.14 * logT - (14341.6749754345) * invT);
  dlnkfdT = 1.14 * invT + (14341.6749754345) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // H
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[60] -= q; // CH2F
  wdot[68] += q; // CHFO
  // d()/d[O2]
  dqdci = +k_f * sc[60];
  J[220] += dqdci; // dwdot[H]/d[O2]
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[279] -= dqdci; // dwdot[CH2F]/d[O2]
  J[287] += dqdci; // dwdot[CHFO]/d[O2]
  // d()/d[CH2F]
  dqdci = +k_f * sc[3];
  J[4381] += dqdci; // dwdot[H]/d[CH2F]
  J[4382] += dqdci; // dwdot[O]/d[CH2F]
  J[4383] -= dqdci; // dwdot[O2]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4448] += dqdci; // dwdot[CHFO]/d[CH2F]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5324] += dqdT; // dwdot[CHFO]/dT

  // reaction 402: CHF2 + O2 => CF2O + H + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[61];
  k_f = 2260 * exp(1.14 * logT - (8303.07498577788) * invT);
  dlnkfdT = 1.14 * invT + (8303.07498577788) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // H
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[61] -= q; // CHF2
  wdot[67] += q; // CF2O
  // d()/d[O2]
  dqdci = +k_f * sc[61];
  J[220] += dqdci; // dwdot[H]/d[O2]
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[280] -= dqdci; // dwdot[CHF2]/d[O2]
  J[286] += dqdci; // dwdot[CF2O]/d[O2]
  // d()/d[CHF2]
  dqdci = +k_f * sc[3];
  J[4454] += dqdci; // dwdot[H]/d[CHF2]
  J[4455] += dqdci; // dwdot[O]/d[CHF2]
  J[4456] -= dqdci; // dwdot[O2]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4520] += dqdci; // dwdot[CF2O]/d[CHF2]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 403: CF3 + O2 <=> CF3O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[62];
  k_f = 2260 * exp(1.14 * logT - (10819.1583148015) * invT);
  dlnkfdT = 1.14 * invT + (10819.1583148015) * invT2;
  // reverse
  phi_r = sc[2] * sc[66];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[62] - g_RT[66]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[62]) + (h_RT[2] + h_RT[66]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[62] -= q; // CF3
  wdot[66] += q; // CF3O
  // d()/d[O]
  dqdci = -k_r * sc[66];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[208] -= dqdci; // dwdot[CF3]/d[O]
  J[212] += dqdci; // dwdot[CF3O]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[62];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[281] -= dqdci; // dwdot[CF3]/d[O2]
  J[285] += dqdci; // dwdot[CF3O]/d[O2]
  // d()/d[CF3]
  dqdci = +k_f * sc[3];
  J[4528] += dqdci; // dwdot[O]/d[CF3]
  J[4529] -= dqdci; // dwdot[O2]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  J[4592] += dqdci; // dwdot[CF3O]/d[CF3]
  // d()/d[CF3O]
  dqdci = -k_r * sc[2];
  J[4820] += dqdci; // dwdot[O]/d[CF3O]
  J[4821] -= dqdci; // dwdot[O2]/d[CF3O]
  J[4880] -= dqdci; // dwdot[CF3]/d[CF3O]
  J[4884] += dqdci; // dwdot[CF3O]/d[CF3O]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5322] += dqdT; // dwdot[CF3O]/dT

  // reaction 404: CH2F + HO2 => CHFO + H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[60];
  k_f = 15000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // H
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[60] -= q; // CH2F
  wdot[68] += q; // CHFO
  // d()/d[HO2]
  dqdci = +k_f * sc[60];
  J[439] += dqdci; // dwdot[H]/d[HO2]
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[498] -= dqdci; // dwdot[CH2F]/d[HO2]
  J[506] += dqdci; // dwdot[CHFO]/d[HO2]
  // d()/d[CH2F]
  dqdci = +k_f * sc[6];
  J[4381] += dqdci; // dwdot[H]/d[CH2F]
  J[4384] += dqdci; // dwdot[OH]/d[CH2F]
  J[4386] -= dqdci; // dwdot[HO2]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4448] += dqdci; // dwdot[CHFO]/d[CH2F]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5324] += dqdT; // dwdot[CHFO]/dT

  // reaction 405: CHF2 + HO2 => CF2O + H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[61];
  k_f = 15000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[1] += q;  // H
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[61] -= q; // CHF2
  wdot[67] += q; // CF2O
  // d()/d[HO2]
  dqdci = +k_f * sc[61];
  J[439] += dqdci; // dwdot[H]/d[HO2]
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[499] -= dqdci; // dwdot[CHF2]/d[HO2]
  J[505] += dqdci; // dwdot[CF2O]/d[HO2]
  // d()/d[CHF2]
  dqdci = +k_f * sc[6];
  J[4454] += dqdci; // dwdot[H]/d[CHF2]
  J[4457] += dqdci; // dwdot[OH]/d[CHF2]
  J[4459] -= dqdci; // dwdot[HO2]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4520] += dqdci; // dwdot[CF2O]/d[CHF2]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 406: CF3 + HO2 <=> CF3O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[62];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[66];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[62] - g_RT[66]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[62]) + (h_RT[4] + h_RT[66]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[62] -= q; // CF3
  wdot[66] += q; // CF3O
  // d()/d[OH]
  dqdci = -k_r * sc[66];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[298] -= dqdci; // dwdot[HO2]/d[OH]
  J[354] -= dqdci; // dwdot[CF3]/d[OH]
  J[358] += dqdci; // dwdot[CF3O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[62];
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[500] -= dqdci; // dwdot[CF3]/d[HO2]
  J[504] += dqdci; // dwdot[CF3O]/d[HO2]
  // d()/d[CF3]
  dqdci = +k_f * sc[6];
  J[4530] += dqdci; // dwdot[OH]/d[CF3]
  J[4532] -= dqdci; // dwdot[HO2]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  J[4592] += dqdci; // dwdot[CF3O]/d[CF3]
  // d()/d[CF3O]
  dqdci = -k_r * sc[4];
  J[4822] += dqdci; // dwdot[OH]/d[CF3O]
  J[4824] -= dqdci; // dwdot[HO2]/d[CF3O]
  J[4880] -= dqdci; // dwdot[CF3]/d[CF3O]
  J[4884] += dqdci; // dwdot[CF3O]/d[CF3O]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5322] += dqdT; // dwdot[CF3O]/dT

  // reaction 407: CH2F + HO2 <=> CH3F + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[60];
  k_f = 3000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[56];
  Kc = exp(-g_RT[3] + g_RT[6] - g_RT[56] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[60]) + (h_RT[3] + h_RT[56]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[6] -= q;  // HO2
  wdot[56] += q; // CH3F
  wdot[60] -= q; // CH2F
  // d()/d[O2]
  dqdci = -k_r * sc[56];
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  J[275] += dqdci; // dwdot[CH3F]/d[O2]
  J[279] -= dqdci; // dwdot[CH2F]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[60];
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[494] += dqdci; // dwdot[CH3F]/d[HO2]
  J[498] -= dqdci; // dwdot[CH2F]/d[HO2]
  // d()/d[CH3F]
  dqdci = -k_r * sc[3];
  J[4091] += dqdci; // dwdot[O2]/d[CH3F]
  J[4094] -= dqdci; // dwdot[HO2]/d[CH3F]
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] -= dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[6];
  J[4383] += dqdci; // dwdot[O2]/d[CH2F]
  J[4386] -= dqdci; // dwdot[HO2]/d[CH2F]
  J[4436] += dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 408: CHF2 + HO2 <=> CH2F2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[61];
  k_f = 3000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[57];
  Kc = exp(-g_RT[3] + g_RT[6] - g_RT[57] + g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[61]) + (h_RT[3] + h_RT[57]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[6] -= q;  // HO2
  wdot[57] += q; // CH2F2
  wdot[61] -= q; // CHF2
  // d()/d[O2]
  dqdci = -k_r * sc[57];
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  J[276] += dqdci; // dwdot[CH2F2]/d[O2]
  J[280] -= dqdci; // dwdot[CHF2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[61];
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[495] += dqdci; // dwdot[CH2F2]/d[HO2]
  J[499] -= dqdci; // dwdot[CHF2]/d[HO2]
  // d()/d[CH2F2]
  dqdci = -k_r * sc[3];
  J[4164] += dqdci; // dwdot[O2]/d[CH2F2]
  J[4167] -= dqdci; // dwdot[HO2]/d[CH2F2]
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] -= dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = +k_f * sc[6];
  J[4456] += dqdci; // dwdot[O2]/d[CHF2]
  J[4459] -= dqdci; // dwdot[HO2]/d[CHF2]
  J[4510] += dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT

  // reaction 409: CF3 + HO2 <=> CHF3 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[62];
  k_f = 2000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[58];
  Kc = exp(-g_RT[3] + g_RT[6] - g_RT[58] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[62]) + (h_RT[3] + h_RT[58]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[6] -= q;  // HO2
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  // d()/d[O2]
  dqdci = -k_r * sc[58];
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  J[277] += dqdci; // dwdot[CHF3]/d[O2]
  J[281] -= dqdci; // dwdot[CF3]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[62];
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[496] += dqdci; // dwdot[CHF3]/d[HO2]
  J[500] -= dqdci; // dwdot[CF3]/d[HO2]
  // d()/d[CHF3]
  dqdci = -k_r * sc[3];
  J[4237] += dqdci; // dwdot[O2]/d[CHF3]
  J[4240] -= dqdci; // dwdot[HO2]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[6];
  J[4529] += dqdci; // dwdot[O2]/d[CF3]
  J[4532] -= dqdci; // dwdot[HO2]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 411: CF3O + H <=> CF2O + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[66];
  k_f = 100000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[53] * sc[67];
  Kc = exp(g_RT[1] - g_RT[53] + g_RT[66] - g_RT[67]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[66]) + (h_RT[53] + h_RT[67]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[66] -= q; // CF3O
  wdot[67] += q; // CF2O
  // d()/d[H]
  dqdci = +k_f * sc[66];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[139] -= dqdci; // dwdot[CF3O]/d[H]
  J[140] += dqdci; // dwdot[CF2O]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[67];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3935] -= dqdci; // dwdot[CF3O]/d[HF]
  J[3936] += dqdci; // dwdot[CF2O]/d[HF]
  // d()/d[CF3O]
  dqdci = +k_f * sc[1];
  J[4819] -= dqdci; // dwdot[H]/d[CF3O]
  J[4871] += dqdci; // dwdot[HF]/d[CF3O]
  J[4884] -= dqdci; // dwdot[CF3O]/d[CF3O]
  J[4885] += dqdci; // dwdot[CF2O]/d[CF3O]
  // d()/d[CF2O]
  dqdci = -k_r * sc[53];
  J[4892] -= dqdci; // dwdot[H]/d[CF2O]
  J[4944] += dqdci; // dwdot[HF]/d[CF2O]
  J[4957] -= dqdci; // dwdot[CF3O]/d[CF2O]
  J[4958] += dqdci; // dwdot[CF2O]/d[CF2O]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5322] -= dqdT; // dwdot[CF3O]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 412: CF3O + H2 => CF2O + H + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[66];
  k_f = 10000000 * exp(-(2516.0833290236) * invT);
  dlnkfdT = (2516.0833290236) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[53] += q; // HF
  wdot[66] -= q; // CF3O
  wdot[67] += q; // CF2O
  // d()/d[H2]
  dqdci = +k_f * sc[66];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[53] += dqdci; // dwdot[HF]/d[H2]
  J[66] -= dqdci; // dwdot[CF3O]/d[H2]
  J[67] += dqdci; // dwdot[CF2O]/d[H2]
  // d()/d[CF3O]
  dqdci = +k_f * sc[0];
  J[4818] -= dqdci; // dwdot[H2]/d[CF3O]
  J[4819] += dqdci; // dwdot[H]/d[CF3O]
  J[4871] += dqdci; // dwdot[HF]/d[CF3O]
  J[4884] -= dqdci; // dwdot[CF3O]/d[CF3O]
  J[4885] += dqdci; // dwdot[CF2O]/d[CF3O]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5322] -= dqdT; // dwdot[CF3O]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 413: CF3O + H2O => CF2O + HF + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[66];
  k_f = 10000000 * exp(-(2516.0833290236) * invT);
  dlnkfdT = (2516.0833290236) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q;  // OH
  wdot[5] -= q;  // H2O
  wdot[53] += q; // HF
  wdot[66] -= q; // CF3O
  wdot[67] += q; // CF2O
  // d()/d[H2O]
  dqdci = +k_f * sc[66];
  J[369] += dqdci; // dwdot[OH]/d[H2O]
  J[370] -= dqdci; // dwdot[H2O]/d[H2O]
  J[418] += dqdci; // dwdot[HF]/d[H2O]
  J[431] -= dqdci; // dwdot[CF3O]/d[H2O]
  J[432] += dqdci; // dwdot[CF2O]/d[H2O]
  // d()/d[CF3O]
  dqdci = +k_f * sc[5];
  J[4822] += dqdci; // dwdot[OH]/d[CF3O]
  J[4823] -= dqdci; // dwdot[H2O]/d[CF3O]
  J[4871] += dqdci; // dwdot[HF]/d[CF3O]
  J[4884] -= dqdci; // dwdot[CF3O]/d[CF3O]
  J[4885] += dqdci; // dwdot[CF2O]/d[CF3O]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5261] -= dqdT; // dwdot[H2O]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5322] -= dqdT; // dwdot[CF3O]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 414: CF3O + CH4 => CF2O + CH3 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[66];
  k_f = 8000000 * exp(-(1157.39833135086) * invT);
  dlnkfdT = (1157.39833135086) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[12] += q; // CH3
  wdot[13] -= q; // CH4
  wdot[53] += q; // HF
  wdot[66] -= q; // CF3O
  wdot[67] += q; // CF2O
  // d()/d[CH4]
  dqdci = +k_f * sc[66];
  J[961] += dqdci;  // dwdot[CH3]/d[CH4]
  J[962] -= dqdci;  // dwdot[CH4]/d[CH4]
  J[1002] += dqdci; // dwdot[HF]/d[CH4]
  J[1015] -= dqdci; // dwdot[CF3O]/d[CH4]
  J[1016] += dqdci; // dwdot[CF2O]/d[CH4]
  // d()/d[CF3O]
  dqdci = +k_f * sc[13];
  J[4830] += dqdci; // dwdot[CH3]/d[CF3O]
  J[4831] -= dqdci; // dwdot[CH4]/d[CF3O]
  J[4871] += dqdci; // dwdot[HF]/d[CF3O]
  J[4884] -= dqdci; // dwdot[CF3O]/d[CF3O]
  J[4885] += dqdci; // dwdot[CF2O]/d[CF3O]
  // d()/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5269] -= dqdT; // dwdot[CH4]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5322] -= dqdT; // dwdot[CF3O]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 415: C2H6 + CF3O => C2H5 + CF2O + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[26] * sc[66];
  k_f = 12000000 * exp(-(1157.39833135086) * invT);
  dlnkfdT = (1157.39833135086) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  wdot[53] += q; // HF
  wdot[66] -= q; // CF3O
  wdot[67] += q; // CF2O
  // d()/d[C2H6]
  dqdci = +k_f * sc[66];
  J[1923] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1924] -= dqdci; // dwdot[C2H6]/d[C2H6]
  J[1951] += dqdci; // dwdot[HF]/d[C2H6]
  J[1964] -= dqdci; // dwdot[CF3O]/d[C2H6]
  J[1965] += dqdci; // dwdot[CF2O]/d[C2H6]
  // d()/d[CF3O]
  dqdci = +k_f * sc[26];
  J[4843] += dqdci; // dwdot[C2H5]/d[CF3O]
  J[4844] -= dqdci; // dwdot[C2H6]/d[CF3O]
  J[4871] += dqdci; // dwdot[HF]/d[CF3O]
  J[4884] -= dqdci; // dwdot[CF3O]/d[CF3O]
  J[4885] += dqdci; // dwdot[CF2O]/d[CF3O]
  // d()/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5282] -= dqdT; // dwdot[C2H6]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5322] -= dqdT; // dwdot[CF3O]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 416: C2H4 + CF3O => C2H3 + CF2O + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[24] * sc[66];
  k_f = 10000000 * exp(-(2516.0833290236) * invT);
  dlnkfdT = (2516.0833290236) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[23] += q; // C2H3
  wdot[24] -= q; // C2H4
  wdot[53] += q; // HF
  wdot[66] -= q; // CF3O
  wdot[67] += q; // CF2O
  // d()/d[C2H4]
  dqdci = +k_f * sc[66];
  J[1775] += dqdci; // dwdot[C2H3]/d[C2H4]
  J[1776] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[1805] += dqdci; // dwdot[HF]/d[C2H4]
  J[1818] -= dqdci; // dwdot[CF3O]/d[C2H4]
  J[1819] += dqdci; // dwdot[CF2O]/d[C2H4]
  // d()/d[CF3O]
  dqdci = +k_f * sc[24];
  J[4841] += dqdci; // dwdot[C2H3]/d[CF3O]
  J[4842] -= dqdci; // dwdot[C2H4]/d[CF3O]
  J[4871] += dqdci; // dwdot[HF]/d[CF3O]
  J[4884] -= dqdci; // dwdot[CF3O]/d[CF3O]
  J[4885] += dqdci; // dwdot[CF2O]/d[CF3O]
  // d()/dT
  J[5279] += dqdT; // dwdot[C2H3]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5322] -= dqdT; // dwdot[CF3O]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 417: CF3O + CH2O => CF2O + HCO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[66];
  k_f = 5000000 * exp(-(2516.0833290236) * invT);
  dlnkfdT = (2516.0833290236) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  wdot[53] += q; // HF
  wdot[66] -= q; // CF3O
  wdot[67] += q; // CF2O
  // d()/d[CH2O]
  dqdci = +k_f * sc[66];
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[1294] += dqdci; // dwdot[HF]/d[CH2O]
  J[1307] -= dqdci; // dwdot[CF3O]/d[CH2O]
  J[1308] += dqdci; // dwdot[CF2O]/d[CH2O]
  // d()/d[CF3O]
  dqdci = +k_f * sc[17];
  J[4834] += dqdci; // dwdot[HCO]/d[CF3O]
  J[4835] -= dqdci; // dwdot[CH2O]/d[CF3O]
  J[4871] += dqdci; // dwdot[HF]/d[CF3O]
  J[4884] -= dqdci; // dwdot[CF3O]/d[CF3O]
  J[4885] += dqdci; // dwdot[CF2O]/d[CF3O]
  // d()/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5322] -= dqdT; // dwdot[CF3O]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 418: CF3O + HCO => CF2O + CO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[66];
  k_f = 5000000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  wdot[53] += q; // HF
  wdot[66] -= q; // CF3O
  wdot[67] += q; // CF2O
  // d()/d[HCO]
  dqdci = +k_f * sc[66];
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  J[1221] += dqdci; // dwdot[HF]/d[HCO]
  J[1234] -= dqdci; // dwdot[CF3O]/d[HCO]
  J[1235] += dqdci; // dwdot[CF2O]/d[HCO]
  // d()/d[CF3O]
  dqdci = +k_f * sc[16];
  J[4832] += dqdci; // dwdot[CO]/d[CF3O]
  J[4834] -= dqdci; // dwdot[HCO]/d[CF3O]
  J[4871] += dqdci; // dwdot[HF]/d[CF3O]
  J[4884] -= dqdci; // dwdot[CF3O]/d[CF3O]
  J[4885] += dqdci; // dwdot[CF2O]/d[CF3O]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5322] -= dqdT; // dwdot[CF3O]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 419: CHF + O2 <=> CHFO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[63];
  k_f = 20000000 * exp(-(8303.07498577788) * invT);
  dlnkfdT = (8303.07498577788) * invT2;
  // reverse
  phi_r = sc[2] * sc[68];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[63] - g_RT[68]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[63]) + (h_RT[2] + h_RT[68]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[63] -= q; // CHF
  wdot[68] += q; // CHFO
  // d()/d[O]
  dqdci = -k_r * sc[68];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[209] -= dqdci; // dwdot[CHF]/d[O]
  J[214] += dqdci; // dwdot[CHFO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[63];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[282] -= dqdci; // dwdot[CHF]/d[O2]
  J[287] += dqdci; // dwdot[CHFO]/d[O2]
  // d()/d[CHF]
  dqdci = +k_f * sc[3];
  J[4601] += dqdci; // dwdot[O]/d[CHF]
  J[4602] -= dqdci; // dwdot[O2]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  J[4667] += dqdci; // dwdot[CHFO]/d[CHF]
  // d()/d[CHFO]
  dqdci = -k_r * sc[2];
  J[4966] += dqdci; // dwdot[O]/d[CHFO]
  J[4967] -= dqdci; // dwdot[O2]/d[CHFO]
  J[5027] -= dqdci; // dwdot[CHF]/d[CHFO]
  J[5032] += dqdci; // dwdot[CHFO]/d[CHFO]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT
  J[5324] += dqdT; // dwdot[CHFO]/dT

  // reaction 420: CF2 + O2 <=> CF2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[64];
  k_f = 20000000 * exp(-(13335.2416438251) * invT);
  dlnkfdT = (13335.2416438251) * invT2;
  // reverse
  phi_r = sc[2] * sc[67];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[64] - g_RT[67]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[64]) + (h_RT[2] + h_RT[67]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[64] -= q; // CF2
  wdot[67] += q; // CF2O
  // d()/d[O]
  dqdci = -k_r * sc[67];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[210] -= dqdci; // dwdot[CF2]/d[O]
  J[213] += dqdci; // dwdot[CF2O]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[64];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[283] -= dqdci; // dwdot[CF2]/d[O2]
  J[286] += dqdci; // dwdot[CF2O]/d[O2]
  // d()/d[CF2]
  dqdci = +k_f * sc[3];
  J[4674] += dqdci; // dwdot[O]/d[CF2]
  J[4675] -= dqdci; // dwdot[O2]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  J[4739] += dqdci; // dwdot[CF2O]/d[CF2]
  // d()/d[CF2O]
  dqdci = -k_r * sc[2];
  J[4893] += dqdci; // dwdot[O]/d[CF2O]
  J[4894] -= dqdci; // dwdot[O2]/d[CF2O]
  J[4955] -= dqdci; // dwdot[CF2]/d[CF2O]
  J[4958] += dqdci; // dwdot[CF2O]/d[CF2O]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 421: CHF + O <=> CO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[63];
  k_f = 90000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[53];
  Kc = exp(g_RT[2] - g_RT[14] - g_RT[53] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[63]) + (h_RT[14] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[14] += q; // CO
  wdot[53] += q; // HF
  wdot[63] -= q; // CHF
  // d()/d[O]
  dqdci = +k_f * sc[63];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[199] += dqdci; // dwdot[HF]/d[O]
  J[209] -= dqdci; // dwdot[CHF]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc[53];
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1075] += dqdci; // dwdot[HF]/d[CO]
  J[1085] -= dqdci; // dwdot[CHF]/d[CO]
  // d()/d[HF]
  dqdci = -k_r * sc[14];
  J[3871] -= dqdci; // dwdot[O]/d[HF]
  J[3883] += dqdci; // dwdot[CO]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3932] -= dqdci; // dwdot[CHF]/d[HF]
  // d()/d[CHF]
  dqdci = +k_f * sc[2];
  J[4601] -= dqdci; // dwdot[O]/d[CHF]
  J[4613] += dqdci; // dwdot[CO]/d[CHF]
  J[4652] += dqdci; // dwdot[HF]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 422: CF2 + O <=> CFO + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[64];
  k_f = 24500000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[54] * sc[69];
  Kc = exp(g_RT[2] - g_RT[54] + g_RT[64] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[64]) + (h_RT[54] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[54] += q; // F
  wdot[64] -= q; // CF2
  wdot[69] += q; // CFO
  // d()/d[O]
  dqdci = +k_f * sc[64];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[200] += dqdci; // dwdot[F]/d[O]
  J[210] -= dqdci; // dwdot[CF2]/d[O]
  J[215] += dqdci; // dwdot[CFO]/d[O]
  // d()/d[F]
  dqdci = -k_r * sc[69];
  J[3944] -= dqdci; // dwdot[O]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[4006] -= dqdci; // dwdot[CF2]/d[F]
  J[4011] += dqdci; // dwdot[CFO]/d[F]
  // d()/d[CF2]
  dqdci = +k_f * sc[2];
  J[4674] -= dqdci; // dwdot[O]/d[CF2]
  J[4726] += dqdci; // dwdot[F]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  J[4741] += dqdci; // dwdot[CFO]/d[CF2]
  // d()/d[CFO]
  dqdci = -k_r * sc[54];
  J[5039] -= dqdci; // dwdot[O]/d[CFO]
  J[5091] += dqdci; // dwdot[F]/d[CFO]
  J[5101] -= dqdci; // dwdot[CF2]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 423: CHF + OH <=> CHFO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[63];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[68];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[63] - g_RT[68]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[63]) + (h_RT[1] + h_RT[68]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[63] -= q; // CHF
  wdot[68] += q; // CHFO
  // d()/d[H]
  dqdci = -k_r * sc[68];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[136] -= dqdci; // dwdot[CHF]/d[H]
  J[141] += dqdci; // dwdot[CHFO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[63];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[355] -= dqdci; // dwdot[CHF]/d[OH]
  J[360] += dqdci; // dwdot[CHFO]/d[OH]
  // d()/d[CHF]
  dqdci = +k_f * sc[4];
  J[4600] += dqdci; // dwdot[H]/d[CHF]
  J[4603] -= dqdci; // dwdot[OH]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  J[4667] += dqdci; // dwdot[CHFO]/d[CHF]
  // d()/d[CHFO]
  dqdci = -k_r * sc[1];
  J[4965] += dqdci; // dwdot[H]/d[CHFO]
  J[4968] -= dqdci; // dwdot[OH]/d[CHFO]
  J[5027] -= dqdci; // dwdot[CHF]/d[CHFO]
  J[5032] += dqdci; // dwdot[CHFO]/d[CHFO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT
  J[5324] += dqdT; // dwdot[CHFO]/dT

  // reaction 424: CF2 + OH <=> CF2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[64];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[1] * sc[67];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[64] - g_RT[67]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[64]) + (h_RT[1] + h_RT[67]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[4] -= q;  // OH
  wdot[64] -= q; // CF2
  wdot[67] += q; // CF2O
  // d()/d[H]
  dqdci = -k_r * sc[67];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[77] -= dqdci;  // dwdot[OH]/d[H]
  J[137] -= dqdci; // dwdot[CF2]/d[H]
  J[140] += dqdci; // dwdot[CF2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[64];
  J[293] += dqdci; // dwdot[H]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[356] -= dqdci; // dwdot[CF2]/d[OH]
  J[359] += dqdci; // dwdot[CF2O]/d[OH]
  // d()/d[CF2]
  dqdci = +k_f * sc[4];
  J[4673] += dqdci; // dwdot[H]/d[CF2]
  J[4676] -= dqdci; // dwdot[OH]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  J[4739] += dqdci; // dwdot[CF2O]/d[CF2]
  // d()/d[CF2O]
  dqdci = -k_r * sc[1];
  J[4892] += dqdci; // dwdot[H]/d[CF2O]
  J[4895] -= dqdci; // dwdot[OH]/d[CF2O]
  J[4955] -= dqdci; // dwdot[CF2]/d[CF2O]
  J[4958] += dqdci; // dwdot[CF2O]/d[CF2O]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 425: CHF + OH <=> HCO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[63];
  k_f = 4000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[16] * sc[53];
  Kc = exp(g_RT[4] - g_RT[16] - g_RT[53] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[63]) + (h_RT[16] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[16] += q; // HCO
  wdot[53] += q; // HF
  wdot[63] -= q; // CHF
  // d()/d[OH]
  dqdci = +k_f * sc[63];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[308] += dqdci; // dwdot[HCO]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[355] -= dqdci; // dwdot[CHF]/d[OH]
  // d()/d[HCO]
  dqdci = -k_r * sc[53];
  J[1172] -= dqdci; // dwdot[OH]/d[HCO]
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1221] += dqdci; // dwdot[HF]/d[HCO]
  J[1231] -= dqdci; // dwdot[CHF]/d[HCO]
  // d()/d[HF]
  dqdci = -k_r * sc[16];
  J[3873] -= dqdci; // dwdot[OH]/d[HF]
  J[3885] += dqdci; // dwdot[HCO]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3932] -= dqdci; // dwdot[CHF]/d[HF]
  // d()/d[CHF]
  dqdci = +k_f * sc[4];
  J[4603] -= dqdci; // dwdot[OH]/d[CHF]
  J[4615] += dqdci; // dwdot[HCO]/d[CHF]
  J[4652] += dqdci; // dwdot[HF]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 426: CF2 + OH <=> CFO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[64];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[53] * sc[69];
  Kc = exp(g_RT[4] - g_RT[53] + g_RT[64] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[64]) + (h_RT[53] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[53] += q; // HF
  wdot[64] -= q; // CF2
  wdot[69] += q; // CFO
  // d()/d[OH]
  dqdci = +k_f * sc[64];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[356] -= dqdci; // dwdot[CF2]/d[OH]
  J[361] += dqdci; // dwdot[CFO]/d[OH]
  // d()/d[HF]
  dqdci = -k_r * sc[69];
  J[3873] -= dqdci; // dwdot[OH]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3933] -= dqdci; // dwdot[CF2]/d[HF]
  J[3938] += dqdci; // dwdot[CFO]/d[HF]
  // d()/d[CF2]
  dqdci = +k_f * sc[4];
  J[4676] -= dqdci; // dwdot[OH]/d[CF2]
  J[4725] += dqdci; // dwdot[HF]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  J[4741] += dqdci; // dwdot[CFO]/d[CF2]
  // d()/d[CFO]
  dqdci = -k_r * sc[53];
  J[5041] -= dqdci; // dwdot[OH]/d[CFO]
  J[5090] += dqdci; // dwdot[HF]/d[CFO]
  J[5101] -= dqdci; // dwdot[CF2]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 427: CHF + HO2 <=> CHFO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[63];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[4] * sc[68];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[63] - g_RT[68]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[63]) + (h_RT[4] + h_RT[68]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[63] -= q; // CHF
  wdot[68] += q; // CHFO
  // d()/d[OH]
  dqdci = -k_r * sc[68];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[298] -= dqdci; // dwdot[HO2]/d[OH]
  J[355] -= dqdci; // dwdot[CHF]/d[OH]
  J[360] += dqdci; // dwdot[CHFO]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[63];
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[501] -= dqdci; // dwdot[CHF]/d[HO2]
  J[506] += dqdci; // dwdot[CHFO]/d[HO2]
  // d()/d[CHF]
  dqdci = +k_f * sc[6];
  J[4603] += dqdci; // dwdot[OH]/d[CHF]
  J[4605] -= dqdci; // dwdot[HO2]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  J[4667] += dqdci; // dwdot[CHFO]/d[CHF]
  // d()/d[CHFO]
  dqdci = -k_r * sc[4];
  J[4968] += dqdci; // dwdot[OH]/d[CHFO]
  J[4970] -= dqdci; // dwdot[HO2]/d[CHFO]
  J[5027] -= dqdci; // dwdot[CHF]/d[CHFO]
  J[5032] += dqdci; // dwdot[CHFO]/d[CHFO]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT
  J[5324] += dqdT; // dwdot[CHFO]/dT

  // reaction 428: CF2 + HO2 <=> CF2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[64];
  k_f = 10000000 * exp(-(1761.25833031652) * invT);
  dlnkfdT = (1761.25833031652) * invT2;
  // reverse
  phi_r = sc[4] * sc[67];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[64] - g_RT[67]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[64]) + (h_RT[4] + h_RT[67]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[64] -= q; // CF2
  wdot[67] += q; // CF2O
  // d()/d[OH]
  dqdci = -k_r * sc[67];
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[298] -= dqdci; // dwdot[HO2]/d[OH]
  J[356] -= dqdci; // dwdot[CF2]/d[OH]
  J[359] += dqdci; // dwdot[CF2O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[64];
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[502] -= dqdci; // dwdot[CF2]/d[HO2]
  J[505] += dqdci; // dwdot[CF2O]/d[HO2]
  // d()/d[CF2]
  dqdci = +k_f * sc[6];
  J[4676] += dqdci; // dwdot[OH]/d[CF2]
  J[4678] -= dqdci; // dwdot[HO2]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  J[4739] += dqdci; // dwdot[CF2O]/d[CF2]
  // d()/d[CF2O]
  dqdci = -k_r * sc[4];
  J[4895] += dqdci; // dwdot[OH]/d[CF2O]
  J[4897] -= dqdci; // dwdot[HO2]/d[CF2O]
  J[4955] -= dqdci; // dwdot[CF2]/d[CF2O]
  J[4958] += dqdci; // dwdot[CF2O]/d[CF2O]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT

  // reaction 429: CHF + HO2 <=> CH2F + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[63];
  k_f = 2000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[3] * sc[60];
  Kc = exp(-g_RT[3] + g_RT[6] - g_RT[60] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[63]) + (h_RT[3] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[6] -= q;  // HO2
  wdot[60] += q; // CH2F
  wdot[63] -= q; // CHF
  // d()/d[O2]
  dqdci = -k_r * sc[60];
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  J[279] += dqdci; // dwdot[CH2F]/d[O2]
  J[282] -= dqdci; // dwdot[CHF]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[63];
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[498] += dqdci; // dwdot[CH2F]/d[HO2]
  J[501] -= dqdci; // dwdot[CHF]/d[HO2]
  // d()/d[CH2F]
  dqdci = -k_r * sc[3];
  J[4383] += dqdci; // dwdot[O2]/d[CH2F]
  J[4386] -= dqdci; // dwdot[HO2]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  J[4443] -= dqdci; // dwdot[CHF]/d[CH2F]
  // d()/d[CHF]
  dqdci = +k_f * sc[6];
  J[4602] += dqdci; // dwdot[O2]/d[CHF]
  J[4605] -= dqdci; // dwdot[HO2]/d[CHF]
  J[4659] += dqdci; // dwdot[CH2F]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 430: CF2 + HO2 <=> CHF2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[64];
  k_f = 2000000 * exp(-(1761.25833031652) * invT);
  dlnkfdT = (1761.25833031652) * invT2;
  // reverse
  phi_r = sc[3] * sc[61];
  Kc = exp(-g_RT[3] + g_RT[6] - g_RT[61] + g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[64]) + (h_RT[3] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // O2
  wdot[6] -= q;  // HO2
  wdot[61] += q; // CHF2
  wdot[64] -= q; // CF2
  // d()/d[O2]
  dqdci = -k_r * sc[61];
  J[222] += dqdci; // dwdot[O2]/d[O2]
  J[225] -= dqdci; // dwdot[HO2]/d[O2]
  J[280] += dqdci; // dwdot[CHF2]/d[O2]
  J[283] -= dqdci; // dwdot[CF2]/d[O2]
  // d()/d[HO2]
  dqdci = +k_f * sc[64];
  J[441] += dqdci; // dwdot[O2]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[499] += dqdci; // dwdot[CHF2]/d[HO2]
  J[502] -= dqdci; // dwdot[CF2]/d[HO2]
  // d()/d[CHF2]
  dqdci = -k_r * sc[3];
  J[4456] += dqdci; // dwdot[O2]/d[CHF2]
  J[4459] -= dqdci; // dwdot[HO2]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  J[4517] -= dqdci; // dwdot[CF2]/d[CHF2]
  // d()/d[CF2]
  dqdci = +k_f * sc[6];
  J[4675] += dqdci; // dwdot[O2]/d[CF2]
  J[4678] -= dqdci; // dwdot[HO2]/d[CF2]
  J[4733] += dqdci; // dwdot[CHF2]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5259] += dqdT; // dwdot[O2]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT

  // reaction 431: CHF + H2O <=> CH2O + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[63];
  k_f = 5000000 * exp(-(3270.90832773068) * invT);
  dlnkfdT = (3270.90832773068) * invT2;
  // reverse
  phi_r = sc[17] * sc[53];
  Kc = exp(g_RT[5] - g_RT[17] - g_RT[53] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[63]) + (h_RT[17] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // H2O
  wdot[17] += q; // CH2O
  wdot[53] += q; // HF
  wdot[63] -= q; // CHF
  // d()/d[H2O]
  dqdci = +k_f * sc[63];
  J[370] -= dqdci; // dwdot[H2O]/d[H2O]
  J[382] += dqdci; // dwdot[CH2O]/d[H2O]
  J[418] += dqdci; // dwdot[HF]/d[H2O]
  J[428] -= dqdci; // dwdot[CHF]/d[H2O]
  // d()/d[CH2O]
  dqdci = -k_r * sc[53];
  J[1246] -= dqdci; // dwdot[H2O]/d[CH2O]
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1294] += dqdci; // dwdot[HF]/d[CH2O]
  J[1304] -= dqdci; // dwdot[CHF]/d[CH2O]
  // d()/d[HF]
  dqdci = -k_r * sc[17];
  J[3874] -= dqdci; // dwdot[H2O]/d[HF]
  J[3886] += dqdci; // dwdot[CH2O]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3932] -= dqdci; // dwdot[CHF]/d[HF]
  // d()/d[CHF]
  dqdci = +k_f * sc[5];
  J[4604] -= dqdci; // dwdot[H2O]/d[CHF]
  J[4616] += dqdci; // dwdot[CH2O]/d[CHF]
  J[4652] += dqdci; // dwdot[HF]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5261] -= dqdT; // dwdot[H2O]/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 432: CF2 + H2O <=> CHFO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[64];
  k_f = 5000000 * exp(-(12580.416645118) * invT);
  dlnkfdT = (12580.416645118) * invT2;
  // reverse
  phi_r = sc[53] * sc[68];
  Kc = exp(g_RT[5] - g_RT[53] + g_RT[64] - g_RT[68]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[64]) + (h_RT[53] + h_RT[68]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[5] -= q;  // H2O
  wdot[53] += q; // HF
  wdot[64] -= q; // CF2
  wdot[68] += q; // CHFO
  // d()/d[H2O]
  dqdci = +k_f * sc[64];
  J[370] -= dqdci; // dwdot[H2O]/d[H2O]
  J[418] += dqdci; // dwdot[HF]/d[H2O]
  J[429] -= dqdci; // dwdot[CF2]/d[H2O]
  J[433] += dqdci; // dwdot[CHFO]/d[H2O]
  // d()/d[HF]
  dqdci = -k_r * sc[68];
  J[3874] -= dqdci; // dwdot[H2O]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3933] -= dqdci; // dwdot[CF2]/d[HF]
  J[3937] += dqdci; // dwdot[CHFO]/d[HF]
  // d()/d[CF2]
  dqdci = +k_f * sc[5];
  J[4677] -= dqdci; // dwdot[H2O]/d[CF2]
  J[4725] += dqdci; // dwdot[HF]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  J[4740] += dqdci; // dwdot[CHFO]/d[CF2]
  // d()/d[CHFO]
  dqdci = -k_r * sc[53];
  J[4969] -= dqdci; // dwdot[H2O]/d[CHFO]
  J[5017] += dqdci; // dwdot[HF]/d[CHFO]
  J[5028] -= dqdci; // dwdot[CF2]/d[CHFO]
  J[5032] += dqdci; // dwdot[CHFO]/d[CHFO]
  // d()/dT
  J[5261] -= dqdT; // dwdot[H2O]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT
  J[5324] += dqdT; // dwdot[CHFO]/dT

  // reaction 434: CF2 + H <=> CF + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[64];
  k_f = 39800000 * exp(-(2284.60366275343) * invT);
  dlnkfdT = (2284.60366275343) * invT2;
  // reverse
  phi_r = sc[53] * sc[65];
  Kc = exp(g_RT[1] - g_RT[53] + g_RT[64] - g_RT[65]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[64]) + (h_RT[53] + h_RT[65]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[64] -= q; // CF2
  wdot[65] += q; // CF
  // d()/d[H]
  dqdci = +k_f * sc[64];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[137] -= dqdci; // dwdot[CF2]/d[H]
  J[138] += dqdci; // dwdot[CF]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[65];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3933] -= dqdci; // dwdot[CF2]/d[HF]
  J[3934] += dqdci; // dwdot[CF]/d[HF]
  // d()/d[CF2]
  dqdci = +k_f * sc[1];
  J[4673] -= dqdci; // dwdot[H]/d[CF2]
  J[4725] += dqdci; // dwdot[HF]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  J[4737] += dqdci; // dwdot[CF]/d[CF2]
  // d()/d[CF]
  dqdci = -k_r * sc[53];
  J[4746] -= dqdci; // dwdot[H]/d[CF]
  J[4798] += dqdci; // dwdot[HF]/d[CF]
  J[4809] -= dqdci; // dwdot[CF2]/d[CF]
  J[4810] += dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT
  J[5321] += dqdT; // dwdot[CF]/dT

  // reaction 435: CH2O + CHF <=> CH2F + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[63];
  k_f = 10000000 * exp(-(7548.2499870708) * invT);
  dlnkfdT = (7548.2499870708) * invT2;
  // reverse
  phi_r = sc[16] * sc[60];
  Kc = exp(-g_RT[16] + g_RT[17] - g_RT[60] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[63]) + (h_RT[16] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  wdot[60] += q; // CH2F
  wdot[63] -= q; // CHF
  // d()/d[HCO]
  dqdci = -k_r * sc[60];
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  J[1228] += dqdci; // dwdot[CH2F]/d[HCO]
  J[1231] -= dqdci; // dwdot[CHF]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[63];
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[1301] += dqdci; // dwdot[CH2F]/d[CH2O]
  J[1304] -= dqdci; // dwdot[CHF]/d[CH2O]
  // d()/d[CH2F]
  dqdci = -k_r * sc[16];
  J[4396] += dqdci; // dwdot[HCO]/d[CH2F]
  J[4397] -= dqdci; // dwdot[CH2O]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  J[4443] -= dqdci; // dwdot[CHF]/d[CH2F]
  // d()/d[CHF]
  dqdci = +k_f * sc[17];
  J[4615] += dqdci; // dwdot[HCO]/d[CHF]
  J[4616] -= dqdci; // dwdot[CH2O]/d[CHF]
  J[4659] += dqdci; // dwdot[CH2F]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 436: CH2O + CHF <=> CH2CO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[63];
  k_f = 10000000 * exp(-(7548.2499870708) * invT);
  dlnkfdT = (7548.2499870708) * invT2;
  // reverse
  phi_r = sc[28] * sc[53];
  Kc = exp(g_RT[17] - g_RT[28] - g_RT[53] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[63]) + (h_RT[28] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[17] -= q; // CH2O
  wdot[28] += q; // CH2CO
  wdot[53] += q; // HF
  wdot[63] -= q; // CHF
  // d()/d[CH2O]
  dqdci = +k_f * sc[63];
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[1269] += dqdci; // dwdot[CH2CO]/d[CH2O]
  J[1294] += dqdci; // dwdot[HF]/d[CH2O]
  J[1304] -= dqdci; // dwdot[CHF]/d[CH2O]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[53];
  J[2061] -= dqdci; // dwdot[CH2O]/d[CH2CO]
  J[2072] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[2097] += dqdci; // dwdot[HF]/d[CH2CO]
  J[2107] -= dqdci; // dwdot[CHF]/d[CH2CO]
  // d()/d[HF]
  dqdci = -k_r * sc[28];
  J[3886] -= dqdci; // dwdot[CH2O]/d[HF]
  J[3897] += dqdci; // dwdot[CH2CO]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3932] -= dqdci; // dwdot[CHF]/d[HF]
  // d()/d[CHF]
  dqdci = +k_f * sc[17];
  J[4616] -= dqdci; // dwdot[CH2O]/d[CHF]
  J[4627] += dqdci; // dwdot[CH2CO]/d[CHF]
  J[4652] += dqdci; // dwdot[HF]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5284] += dqdT; // dwdot[CH2CO]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 437: CF2 + CH2O <=> CHF2 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[64];
  k_f = 10000000 * exp(-(20631.8832979935) * invT);
  dlnkfdT = (20631.8832979935) * invT2;
  // reverse
  phi_r = sc[16] * sc[61];
  Kc = exp(-g_RT[16] + g_RT[17] - g_RT[61] + g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[64]) + (h_RT[16] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  wdot[61] += q; // CHF2
  wdot[64] -= q; // CF2
  // d()/d[HCO]
  dqdci = -k_r * sc[61];
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  J[1229] += dqdci; // dwdot[CHF2]/d[HCO]
  J[1232] -= dqdci; // dwdot[CF2]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[64];
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[1302] += dqdci; // dwdot[CHF2]/d[CH2O]
  J[1305] -= dqdci; // dwdot[CF2]/d[CH2O]
  // d()/d[CHF2]
  dqdci = -k_r * sc[16];
  J[4469] += dqdci; // dwdot[HCO]/d[CHF2]
  J[4470] -= dqdci; // dwdot[CH2O]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  J[4517] -= dqdci; // dwdot[CF2]/d[CHF2]
  // d()/d[CF2]
  dqdci = +k_f * sc[17];
  J[4688] += dqdci; // dwdot[HCO]/d[CF2]
  J[4689] -= dqdci; // dwdot[CH2O]/d[CF2]
  J[4733] += dqdci; // dwdot[CHF2]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT

  // reaction 438: CHF + HCO <=> CH2F + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[63];
  k_f = 20000000 * exp(-(7548.2499870708) * invT);
  dlnkfdT = (7548.2499870708) * invT2;
  // reverse
  phi_r = sc[14] * sc[60];
  Kc = exp(-g_RT[14] + g_RT[16] - g_RT[60] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[63]) + (h_RT[14] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  wdot[60] += q; // CH2F
  wdot[63] -= q; // CHF
  // d()/d[CO]
  dqdci = -k_r * sc[60];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  J[1082] += dqdci; // dwdot[CH2F]/d[CO]
  J[1085] -= dqdci; // dwdot[CHF]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[63];
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  J[1228] += dqdci; // dwdot[CH2F]/d[HCO]
  J[1231] -= dqdci; // dwdot[CHF]/d[HCO]
  // d()/d[CH2F]
  dqdci = -k_r * sc[14];
  J[4394] += dqdci; // dwdot[CO]/d[CH2F]
  J[4396] -= dqdci; // dwdot[HCO]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  J[4443] -= dqdci; // dwdot[CHF]/d[CH2F]
  // d()/d[CHF]
  dqdci = +k_f * sc[16];
  J[4613] += dqdci; // dwdot[CO]/d[CHF]
  J[4615] -= dqdci; // dwdot[HCO]/d[CHF]
  J[4659] += dqdci; // dwdot[CH2F]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 439: CF2 + HCO <=> CHF2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[64];
  k_f = 20000000 * exp(-(20631.8832979935) * invT);
  dlnkfdT = (20631.8832979935) * invT2;
  // reverse
  phi_r = sc[14] * sc[61];
  Kc = exp(-g_RT[14] + g_RT[16] - g_RT[61] + g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[64]) + (h_RT[14] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  wdot[61] += q; // CHF2
  wdot[64] -= q; // CF2
  // d()/d[CO]
  dqdci = -k_r * sc[61];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  J[1083] += dqdci; // dwdot[CHF2]/d[CO]
  J[1086] -= dqdci; // dwdot[CF2]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[64];
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  J[1229] += dqdci; // dwdot[CHF2]/d[HCO]
  J[1232] -= dqdci; // dwdot[CF2]/d[HCO]
  // d()/d[CHF2]
  dqdci = -k_r * sc[14];
  J[4467] += dqdci; // dwdot[CO]/d[CHF2]
  J[4469] -= dqdci; // dwdot[HCO]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  J[4517] -= dqdci; // dwdot[CF2]/d[CHF2]
  // d()/d[CF2]
  dqdci = +k_f * sc[16];
  J[4686] += dqdci; // dwdot[CO]/d[CF2]
  J[4688] -= dqdci; // dwdot[HCO]/d[CF2]
  J[4733] += dqdci; // dwdot[CHF2]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT

  // reaction 440: CF + O2 <=> CFO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[65];
  k_f = 6620000 * exp(-(850.436165209976) * invT);
  dlnkfdT = (850.436165209976) * invT2;
  // reverse
  phi_r = sc[2] * sc[69];
  Kc = exp(-g_RT[2] + g_RT[3] + g_RT[65] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[65]) + (h_RT[2] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[3] -= q;  // O2
  wdot[65] -= q; // CF
  wdot[69] += q; // CFO
  // d()/d[O]
  dqdci = -k_r * sc[69];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[149] -= dqdci; // dwdot[O2]/d[O]
  J[211] -= dqdci; // dwdot[CF]/d[O]
  J[215] += dqdci; // dwdot[CFO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[65];
  J[221] += dqdci; // dwdot[O]/d[O2]
  J[222] -= dqdci; // dwdot[O2]/d[O2]
  J[284] -= dqdci; // dwdot[CF]/d[O2]
  J[288] += dqdci; // dwdot[CFO]/d[O2]
  // d()/d[CF]
  dqdci = +k_f * sc[3];
  J[4747] += dqdci; // dwdot[O]/d[CF]
  J[4748] -= dqdci; // dwdot[O2]/d[CF]
  J[4810] -= dqdci; // dwdot[CF]/d[CF]
  J[4814] += dqdci; // dwdot[CFO]/d[CF]
  // d()/d[CFO]
  dqdci = -k_r * sc[2];
  J[5039] += dqdci; // dwdot[O]/d[CFO]
  J[5040] -= dqdci; // dwdot[O2]/d[CFO]
  J[5102] -= dqdci; // dwdot[CF]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5259] -= dqdT; // dwdot[O2]/dT
  J[5321] -= dqdT; // dwdot[CF]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 441: CF + H2O <=> CHFO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[65];
  k_f = 20000000 * exp(-(8554.68331868023) * invT);
  dlnkfdT = (8554.68331868023) * invT2;
  // reverse
  phi_r = sc[1] * sc[68];
  Kc = exp(-g_RT[1] + g_RT[5] + g_RT[65] - g_RT[68]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[65]) + (h_RT[1] + h_RT[68]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // H
  wdot[5] -= q;  // H2O
  wdot[65] -= q; // CF
  wdot[68] += q; // CHFO
  // d()/d[H]
  dqdci = -k_r * sc[68];
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[78] -= dqdci;  // dwdot[H2O]/d[H]
  J[138] -= dqdci; // dwdot[CF]/d[H]
  J[141] += dqdci; // dwdot[CHFO]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * sc[65];
  J[366] += dqdci; // dwdot[H]/d[H2O]
  J[370] -= dqdci; // dwdot[H2O]/d[H2O]
  J[430] -= dqdci; // dwdot[CF]/d[H2O]
  J[433] += dqdci; // dwdot[CHFO]/d[H2O]
  // d()/d[CF]
  dqdci = +k_f * sc[5];
  J[4746] += dqdci; // dwdot[H]/d[CF]
  J[4750] -= dqdci; // dwdot[H2O]/d[CF]
  J[4810] -= dqdci; // dwdot[CF]/d[CF]
  J[4813] += dqdci; // dwdot[CHFO]/d[CF]
  // d()/d[CHFO]
  dqdci = -k_r * sc[1];
  J[4965] += dqdci; // dwdot[H]/d[CHFO]
  J[4969] -= dqdci; // dwdot[H2O]/d[CHFO]
  J[5029] -= dqdci; // dwdot[CF]/d[CHFO]
  J[5032] += dqdci; // dwdot[CHFO]/d[CHFO]
  // d()/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5261] -= dqdT; // dwdot[H2O]/dT
  J[5321] -= dqdT; // dwdot[CF]/dT
  J[5324] += dqdT; // dwdot[CHFO]/dT

  // reaction 442: CF + H <=> C + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[65];
  k_f = 80000000 * exp(-(583.731332333475) * invT);
  dlnkfdT = (583.731332333475) * invT2;
  // reverse
  phi_r = sc[8] * sc[53];
  Kc = exp(g_RT[1] - g_RT[8] - g_RT[53] + g_RT[65]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[65]) + (h_RT[8] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[8] += q;  // C
  wdot[53] += q; // HF
  wdot[65] -= q; // CF
  // d()/d[H]
  dqdci = +k_f * sc[65];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[81] += dqdci;  // dwdot[C]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[138] -= dqdci; // dwdot[CF]/d[H]
  // d()/d[C]
  dqdci = -k_r * sc[53];
  J[585] -= dqdci; // dwdot[H]/d[C]
  J[592] += dqdci; // dwdot[C]/d[C]
  J[637] += dqdci; // dwdot[HF]/d[C]
  J[649] -= dqdci; // dwdot[CF]/d[C]
  // d()/d[HF]
  dqdci = -k_r * sc[8];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3877] += dqdci; // dwdot[C]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3934] -= dqdci; // dwdot[CF]/d[HF]
  // d()/d[CF]
  dqdci = +k_f * sc[1];
  J[4746] -= dqdci; // dwdot[H]/d[CF]
  J[4753] += dqdci; // dwdot[C]/d[CF]
  J[4798] += dqdci; // dwdot[HF]/d[CF]
  J[4810] -= dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5264] += dqdT; // dwdot[C]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5321] -= dqdT; // dwdot[CF]/dT

  // reaction 443: CF + O <=> CO + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[65];
  k_f = 80000000 * exp(-(709.535498784655) * invT);
  dlnkfdT = (709.535498784655) * invT2;
  // reverse
  phi_r = sc[14] * sc[54];
  Kc = exp(g_RT[2] - g_RT[14] - g_RT[54] + g_RT[65]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[65]) + (h_RT[14] + h_RT[54]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[14] += q; // CO
  wdot[54] += q; // F
  wdot[65] -= q; // CF
  // d()/d[O]
  dqdci = +k_f * sc[65];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[160] += dqdci; // dwdot[CO]/d[O]
  J[200] += dqdci; // dwdot[F]/d[O]
  J[211] -= dqdci; // dwdot[CF]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc[54];
  J[1024] -= dqdci; // dwdot[O]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1076] += dqdci; // dwdot[F]/d[CO]
  J[1087] -= dqdci; // dwdot[CF]/d[CO]
  // d()/d[F]
  dqdci = -k_r * sc[14];
  J[3944] -= dqdci; // dwdot[O]/d[F]
  J[3956] += dqdci; // dwdot[CO]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[4007] -= dqdci; // dwdot[CF]/d[F]
  // d()/d[CF]
  dqdci = +k_f * sc[2];
  J[4747] -= dqdci; // dwdot[O]/d[CF]
  J[4759] += dqdci; // dwdot[CO]/d[CF]
  J[4799] += dqdci; // dwdot[F]/d[CF]
  J[4810] -= dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5321] -= dqdT; // dwdot[CF]/dT

  // reaction 444: CF + OH <=> CO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[65];
  k_f = 80000000 * exp(-(709.535498784655) * invT);
  dlnkfdT = (709.535498784655) * invT2;
  // reverse
  phi_r = sc[14] * sc[53];
  Kc = exp(g_RT[4] - g_RT[14] - g_RT[53] + g_RT[65]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[65]) + (h_RT[14] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[14] += q; // CO
  wdot[53] += q; // HF
  wdot[65] -= q; // CF
  // d()/d[OH]
  dqdci = +k_f * sc[65];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[306] += dqdci; // dwdot[CO]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[357] -= dqdci; // dwdot[CF]/d[OH]
  // d()/d[CO]
  dqdci = -k_r * sc[53];
  J[1026] -= dqdci; // dwdot[OH]/d[CO]
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1075] += dqdci; // dwdot[HF]/d[CO]
  J[1087] -= dqdci; // dwdot[CF]/d[CO]
  // d()/d[HF]
  dqdci = -k_r * sc[14];
  J[3873] -= dqdci; // dwdot[OH]/d[HF]
  J[3883] += dqdci; // dwdot[CO]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3934] -= dqdci; // dwdot[CF]/d[HF]
  // d()/d[CF]
  dqdci = +k_f * sc[4];
  J[4749] -= dqdci; // dwdot[OH]/d[CF]
  J[4759] += dqdci; // dwdot[CO]/d[CF]
  J[4798] += dqdci; // dwdot[HF]/d[CF]
  J[4810] -= dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5321] -= dqdT; // dwdot[CF]/dT

  // reaction 445: CF + HO2 => CFO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[65];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[65] -= q; // CF
  wdot[69] += q; // CFO
  // d()/d[HO2]
  dqdci = +k_f * sc[65];
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[503] -= dqdci; // dwdot[CF]/d[HO2]
  J[507] += dqdci; // dwdot[CFO]/d[HO2]
  // d()/d[CF]
  dqdci = +k_f * sc[6];
  J[4749] += dqdci; // dwdot[OH]/d[CF]
  J[4751] -= dqdci; // dwdot[HO2]/d[CF]
  J[4810] -= dqdci; // dwdot[CF]/d[CF]
  J[4814] += dqdci; // dwdot[CFO]/d[CF]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5321] -= dqdT; // dwdot[CF]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 446: C2H4 + CF => C2H2 + CH2F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[24] * sc[65];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[22] += q; // C2H2
  wdot[24] -= q; // C2H4
  wdot[60] += q; // CH2F
  wdot[65] -= q; // CF
  // d()/d[C2H4]
  dqdci = +k_f * sc[65];
  J[1774] += dqdci; // dwdot[C2H2]/d[C2H4]
  J[1776] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[1812] += dqdci; // dwdot[CH2F]/d[C2H4]
  J[1817] -= dqdci; // dwdot[CF]/d[C2H4]
  // d()/d[CF]
  dqdci = +k_f * sc[24];
  J[4767] += dqdci; // dwdot[C2H2]/d[CF]
  J[4769] -= dqdci; // dwdot[C2H4]/d[CF]
  J[4805] += dqdci; // dwdot[CH2F]/d[CF]
  J[4810] -= dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT
  J[5321] -= dqdT; // dwdot[CF]/dT

  // reaction 447: CF + CH2O => CHF + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[65];
  k_f = 10000000 * exp(-(4025.73332643776) * invT);
  dlnkfdT = (4025.73332643776) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  wdot[63] += q; // CHF
  wdot[65] -= q; // CF
  // d()/d[CH2O]
  dqdci = +k_f * sc[65];
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[1304] += dqdci; // dwdot[CHF]/d[CH2O]
  J[1306] -= dqdci; // dwdot[CF]/d[CH2O]
  // d()/d[CF]
  dqdci = +k_f * sc[17];
  J[4761] += dqdci; // dwdot[HCO]/d[CF]
  J[4762] -= dqdci; // dwdot[CH2O]/d[CF]
  J[4808] += dqdci; // dwdot[CHF]/d[CF]
  J[4810] -= dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5319] += dqdT; // dwdot[CHF]/dT
  J[5321] -= dqdT; // dwdot[CF]/dT

  // reaction 448: CF + HCO => CHF + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[65];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  wdot[63] += q; // CHF
  wdot[65] -= q; // CF
  // d()/d[HCO]
  dqdci = +k_f * sc[65];
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  J[1231] += dqdci; // dwdot[CHF]/d[HCO]
  J[1233] -= dqdci; // dwdot[CF]/d[HCO]
  // d()/d[CF]
  dqdci = +k_f * sc[16];
  J[4759] += dqdci; // dwdot[CO]/d[CF]
  J[4761] -= dqdci; // dwdot[HCO]/d[CF]
  J[4808] += dqdci; // dwdot[CHF]/d[CF]
  J[4810] -= dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT
  J[5319] += dqdT; // dwdot[CHF]/dT
  J[5321] -= dqdT; // dwdot[CF]/dT

  // reaction 450: CFO + F <=> CF2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[54] * sc[69];
  k_f = 1000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[67];
  Kc = refCinv * exp(g_RT[54] - g_RT[67] + g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[54] + h_RT[69]) + (h_RT[67]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[54] -= q; // F
  wdot[67] += q; // CF2O
  wdot[69] -= q; // CFO
  // d()/d[F]
  dqdci = +k_f * sc[69];
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[4009] += dqdci; // dwdot[CF2O]/d[F]
  J[4011] -= dqdci; // dwdot[CFO]/d[F]
  // d()/d[CF2O]
  dqdci = -k_r;
  J[4945] -= dqdci; // dwdot[F]/d[CF2O]
  J[4958] += dqdci; // dwdot[CF2O]/d[CF2O]
  J[4960] -= dqdci; // dwdot[CFO]/d[CF2O]
  // d()/d[CFO]
  dqdci = +k_f * sc[54];
  J[5091] -= dqdci; // dwdot[F]/d[CFO]
  J[5104] += dqdci; // dwdot[CF2O]/d[CFO]
  J[5106] -= dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT
  J[5325] -= dqdT; // dwdot[CFO]/dT

  // reaction 451: CHFO + H <=> CFO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[68];
  k_f = 110 * exp(1.77 * logT - (1509.64999741416) * invT);
  dlnkfdT = 1.77 * invT + (1509.64999741416) * invT2;
  // reverse
  phi_r = sc[0] * sc[69];
  Kc = exp(-g_RT[0] + g_RT[1] + g_RT[68] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[68]) + (h_RT[0] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] += q;  // H2
  wdot[1] -= q;  // H
  wdot[68] -= q; // CHFO
  wdot[69] += q; // CFO
  // d()/d[H2]
  dqdci = -k_r * sc[69];
  J[0] += dqdci;  // dwdot[H2]/d[H2]
  J[1] -= dqdci;  // dwdot[H]/d[H2]
  J[68] -= dqdci; // dwdot[CHFO]/d[H2]
  J[69] += dqdci; // dwdot[CFO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[68];
  J[73] += dqdci;  // dwdot[H2]/d[H]
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[141] -= dqdci; // dwdot[CHFO]/d[H]
  J[142] += dqdci; // dwdot[CFO]/d[H]
  // d()/d[CHFO]
  dqdci = +k_f * sc[1];
  J[4964] += dqdci; // dwdot[H2]/d[CHFO]
  J[4965] -= dqdci; // dwdot[H]/d[CHFO]
  J[5032] -= dqdci; // dwdot[CHFO]/d[CHFO]
  J[5033] += dqdci; // dwdot[CFO]/d[CHFO]
  // d()/d[CFO]
  dqdci = -k_r * sc[0];
  J[5037] += dqdci; // dwdot[H2]/d[CFO]
  J[5038] -= dqdci; // dwdot[H]/d[CFO]
  J[5105] -= dqdci; // dwdot[CHFO]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5256] += dqdT; // dwdot[H2]/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5324] -= dqdT; // dwdot[CHFO]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 452: CF2O + H <=> CFO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[67];
  k_f = 24 * exp(1.88 * logT - (18065.4783023894) * invT);
  dlnkfdT = 1.88 * invT + (18065.4783023894) * invT2;
  // reverse
  phi_r = sc[53] * sc[69];
  Kc = exp(g_RT[1] - g_RT[53] + g_RT[67] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[67]) + (h_RT[53] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[67] -= q; // CF2O
  wdot[69] += q; // CFO
  // d()/d[H]
  dqdci = +k_f * sc[67];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[140] -= dqdci; // dwdot[CF2O]/d[H]
  J[142] += dqdci; // dwdot[CFO]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[69];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3936] -= dqdci; // dwdot[CF2O]/d[HF]
  J[3938] += dqdci; // dwdot[CFO]/d[HF]
  // d()/d[CF2O]
  dqdci = +k_f * sc[1];
  J[4892] -= dqdci; // dwdot[H]/d[CF2O]
  J[4944] += dqdci; // dwdot[HF]/d[CF2O]
  J[4958] -= dqdci; // dwdot[CF2O]/d[CF2O]
  J[4960] += dqdci; // dwdot[CFO]/d[CF2O]
  // d()/d[CFO]
  dqdci = -k_r * sc[53];
  J[5038] -= dqdci; // dwdot[H]/d[CFO]
  J[5090] += dqdci; // dwdot[HF]/d[CFO]
  J[5104] -= dqdci; // dwdot[CF2O]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5323] -= dqdT; // dwdot[CF2O]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 453: CF2O + H <=> CFO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[67];
  k_f = 12000 * exp(0.83 * logT - (11221.7316474452) * invT);
  dlnkfdT = 0.83 * invT + (11221.7316474452) * invT2;
  // reverse
  phi_r = sc[53] * sc[69];
  Kc = exp(g_RT[1] - g_RT[53] + g_RT[67] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[67]) + (h_RT[53] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[67] -= q; // CF2O
  wdot[69] += q; // CFO
  // d()/d[H]
  dqdci = +k_f * sc[67];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[140] -= dqdci; // dwdot[CF2O]/d[H]
  J[142] += dqdci; // dwdot[CFO]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[69];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3936] -= dqdci; // dwdot[CF2O]/d[HF]
  J[3938] += dqdci; // dwdot[CFO]/d[HF]
  // d()/d[CF2O]
  dqdci = +k_f * sc[1];
  J[4892] -= dqdci; // dwdot[H]/d[CF2O]
  J[4944] += dqdci; // dwdot[HF]/d[CF2O]
  J[4958] -= dqdci; // dwdot[CF2O]/d[CF2O]
  J[4960] += dqdci; // dwdot[CFO]/d[CF2O]
  // d()/d[CFO]
  dqdci = -k_r * sc[53];
  J[5038] -= dqdci; // dwdot[H]/d[CFO]
  J[5090] += dqdci; // dwdot[HF]/d[CFO]
  J[5104] -= dqdci; // dwdot[CF2O]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5323] -= dqdT; // dwdot[CF2O]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 454: CF2O + H <=> CFO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[67];
  k_f = 550 * exp(1.42 * logT - (9510.7949837092) * invT);
  dlnkfdT = 1.42 * invT + (9510.7949837092) * invT2;
  // reverse
  phi_r = sc[53] * sc[69];
  Kc = exp(g_RT[1] - g_RT[53] + g_RT[67] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[67]) + (h_RT[53] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[67] -= q; // CF2O
  wdot[69] += q; // CFO
  // d()/d[H]
  dqdci = +k_f * sc[67];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[140] -= dqdci; // dwdot[CF2O]/d[H]
  J[142] += dqdci; // dwdot[CFO]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[69];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3936] -= dqdci; // dwdot[CF2O]/d[HF]
  J[3938] += dqdci; // dwdot[CFO]/d[HF]
  // d()/d[CF2O]
  dqdci = +k_f * sc[1];
  J[4892] -= dqdci; // dwdot[H]/d[CF2O]
  J[4944] += dqdci; // dwdot[HF]/d[CF2O]
  J[4958] -= dqdci; // dwdot[CF2O]/d[CF2O]
  J[4960] += dqdci; // dwdot[CFO]/d[CF2O]
  // d()/d[CFO]
  dqdci = -k_r * sc[53];
  J[5038] -= dqdci; // dwdot[H]/d[CFO]
  J[5090] += dqdci; // dwdot[HF]/d[CFO]
  J[5104] -= dqdci; // dwdot[CF2O]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5323] -= dqdT; // dwdot[CF2O]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 455: CF2O + H2O => CO2 + 2 HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[67];
  k_f = 7.4e-09 * exp(3.84 * logT - (12630.7383116985) * invT);
  dlnkfdT = 3.84 * invT + (12630.7383116985) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[5] -= q;      // H2O
  wdot[15] += q;     // CO2
  wdot[53] += 2 * q; // HF
  wdot[67] -= q;     // CF2O
  // d()/d[H2O]
  dqdci = +k_f * sc[67];
  J[370] -= dqdci;     // dwdot[H2O]/d[H2O]
  J[380] += dqdci;     // dwdot[CO2]/d[H2O]
  J[418] += 2 * dqdci; // dwdot[HF]/d[H2O]
  J[432] -= dqdci;     // dwdot[CF2O]/d[H2O]
  // d()/d[CF2O]
  dqdci = +k_f * sc[5];
  J[4896] -= dqdci;     // dwdot[H2O]/d[CF2O]
  J[4906] += dqdci;     // dwdot[CO2]/d[CF2O]
  J[4944] += 2 * dqdci; // dwdot[HF]/d[CF2O]
  J[4958] -= dqdci;     // dwdot[CF2O]/d[CF2O]
  // d()/dT
  J[5261] -= dqdT;     // dwdot[H2O]/dT
  J[5271] += dqdT;     // dwdot[CO2]/dT
  J[5309] += 2 * dqdT; // dwdot[HF]/dT
  J[5323] -= dqdT;     // dwdot[CF2O]/dT

  // reaction 456: CHFO + O <=> CFO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[68];
  k_f = 9000000 * exp(-(1549.90733067854) * invT);
  dlnkfdT = (1549.90733067854) * invT2;
  // reverse
  phi_r = sc[4] * sc[69];
  Kc = exp(g_RT[2] - g_RT[4] + g_RT[68] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[68]) + (h_RT[4] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[4] += q;  // OH
  wdot[68] -= q; // CHFO
  wdot[69] += q; // CFO
  // d()/d[O]
  dqdci = +k_f * sc[68];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[150] += dqdci; // dwdot[OH]/d[O]
  J[214] -= dqdci; // dwdot[CHFO]/d[O]
  J[215] += dqdci; // dwdot[CFO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[69];
  J[294] -= dqdci; // dwdot[O]/d[OH]
  J[296] += dqdci; // dwdot[OH]/d[OH]
  J[360] -= dqdci; // dwdot[CHFO]/d[OH]
  J[361] += dqdci; // dwdot[CFO]/d[OH]
  // d()/d[CHFO]
  dqdci = +k_f * sc[2];
  J[4966] -= dqdci; // dwdot[O]/d[CHFO]
  J[4968] += dqdci; // dwdot[OH]/d[CHFO]
  J[5032] -= dqdci; // dwdot[CHFO]/d[CHFO]
  J[5033] += dqdci; // dwdot[CFO]/d[CHFO]
  // d()/d[CFO]
  dqdci = -k_r * sc[4];
  J[5039] -= dqdci; // dwdot[O]/d[CFO]
  J[5041] += dqdci; // dwdot[OH]/d[CFO]
  J[5105] -= dqdci; // dwdot[CHFO]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5324] -= dqdT; // dwdot[CHFO]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 457: CHFO + OH <=> CFO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[68];
  k_f = 1720 * exp(1.18 * logT - (-224.93784961471) * invT);
  dlnkfdT = 1.18 * invT + (-224.93784961471) * invT2;
  // reverse
  phi_r = sc[5] * sc[69];
  Kc = exp(g_RT[4] - g_RT[5] + g_RT[68] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[68]) + (h_RT[5] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[5] += q;  // H2O
  wdot[68] -= q; // CHFO
  wdot[69] += q; // CFO
  // d()/d[OH]
  dqdci = +k_f * sc[68];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[297] += dqdci; // dwdot[H2O]/d[OH]
  J[360] -= dqdci; // dwdot[CHFO]/d[OH]
  J[361] += dqdci; // dwdot[CFO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[69];
  J[369] -= dqdci; // dwdot[OH]/d[H2O]
  J[370] += dqdci; // dwdot[H2O]/d[H2O]
  J[433] -= dqdci; // dwdot[CHFO]/d[H2O]
  J[434] += dqdci; // dwdot[CFO]/d[H2O]
  // d()/d[CHFO]
  dqdci = +k_f * sc[4];
  J[4968] -= dqdci; // dwdot[OH]/d[CHFO]
  J[4969] += dqdci; // dwdot[H2O]/d[CHFO]
  J[5032] -= dqdci; // dwdot[CHFO]/d[CHFO]
  J[5033] += dqdci; // dwdot[CFO]/d[CHFO]
  // d()/d[CFO]
  dqdci = -k_r * sc[5];
  J[5041] -= dqdci; // dwdot[OH]/d[CFO]
  J[5042] += dqdci; // dwdot[H2O]/d[CFO]
  J[5105] -= dqdci; // dwdot[CHFO]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5261] += dqdT; // dwdot[H2O]/dT
  J[5324] -= dqdT; // dwdot[CHFO]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 458: CF2O + OH => CO2 + F + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[67];
  k_f = 0.0027 * exp(2.38 * logT - (10567.5499818991) * invT);
  dlnkfdT = 2.38 * invT + (10567.5499818991) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] -= q;  // OH
  wdot[15] += q; // CO2
  wdot[53] += q; // HF
  wdot[54] += q; // F
  wdot[67] -= q; // CF2O
  // d()/d[OH]
  dqdci = +k_f * sc[67];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[307] += dqdci; // dwdot[CO2]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[346] += dqdci; // dwdot[F]/d[OH]
  J[359] -= dqdci; // dwdot[CF2O]/d[OH]
  // d()/d[CF2O]
  dqdci = +k_f * sc[4];
  J[4895] -= dqdci; // dwdot[OH]/d[CF2O]
  J[4906] += dqdci; // dwdot[CO2]/d[CF2O]
  J[4944] += dqdci; // dwdot[HF]/d[CF2O]
  J[4945] += dqdci; // dwdot[F]/d[CF2O]
  J[4958] -= dqdci; // dwdot[CF2O]/d[CF2O]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5323] -= dqdT; // dwdot[CF2O]/dT

  // reaction 459: CFO + H2O2 <=> CHFO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[69];
  k_f = 100000 * exp(-(1962.54499663841) * invT);
  dlnkfdT = (1962.54499663841) * invT2;
  // reverse
  phi_r = sc[6] * sc[68];
  Kc = exp(-g_RT[6] + g_RT[7] - g_RT[68] + g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[69]) + (h_RT[6] + h_RT[68]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] += q;  // HO2
  wdot[7] -= q;  // H2O2
  wdot[68] += q; // CHFO
  wdot[69] -= q; // CFO
  // d()/d[HO2]
  dqdci = -k_r * sc[68];
  J[444] += dqdci; // dwdot[HO2]/d[HO2]
  J[445] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[506] += dqdci; // dwdot[CHFO]/d[HO2]
  J[507] -= dqdci; // dwdot[CFO]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[69];
  J[517] += dqdci; // dwdot[HO2]/d[H2O2]
  J[518] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[579] += dqdci; // dwdot[CHFO]/d[H2O2]
  J[580] -= dqdci; // dwdot[CFO]/d[H2O2]
  // d()/d[CHFO]
  dqdci = -k_r * sc[6];
  J[4970] += dqdci; // dwdot[HO2]/d[CHFO]
  J[4971] -= dqdci; // dwdot[H2O2]/d[CHFO]
  J[5032] += dqdci; // dwdot[CHFO]/d[CHFO]
  J[5033] -= dqdci; // dwdot[CFO]/d[CHFO]
  // d()/d[CFO]
  dqdci = +k_f * sc[7];
  J[5043] += dqdci; // dwdot[HO2]/d[CFO]
  J[5044] -= dqdci; // dwdot[H2O2]/d[CFO]
  J[5105] += dqdci; // dwdot[CHFO]/d[CFO]
  J[5106] -= dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5262] += dqdT; // dwdot[HO2]/dT
  J[5263] -= dqdT; // dwdot[H2O2]/dT
  J[5324] += dqdT; // dwdot[CHFO]/dT
  J[5325] -= dqdT; // dwdot[CFO]/dT

  // reaction 460: CH3 + CHFO <=> CFO + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[68];
  k_f = 2000000 * exp(-(4528.94999224248) * invT);
  dlnkfdT = (4528.94999224248) * invT2;
  // reverse
  phi_r = sc[13] * sc[69];
  Kc = exp(g_RT[12] - g_RT[13] + g_RT[68] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[68]) + (h_RT[13] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[68] -= q; // CHFO
  wdot[69] += q; // CFO
  // d()/d[CH3]
  dqdci = +k_f * sc[68];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[944] -= dqdci; // dwdot[CHFO]/d[CH3]
  J[945] += dqdci; // dwdot[CFO]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[69];
  J[961] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[962] += dqdci;  // dwdot[CH4]/d[CH4]
  J[1017] -= dqdci; // dwdot[CHFO]/d[CH4]
  J[1018] += dqdci; // dwdot[CFO]/d[CH4]
  // d()/d[CHFO]
  dqdci = +k_f * sc[12];
  J[4976] -= dqdci; // dwdot[CH3]/d[CHFO]
  J[4977] += dqdci; // dwdot[CH4]/d[CHFO]
  J[5032] -= dqdci; // dwdot[CHFO]/d[CHFO]
  J[5033] += dqdci; // dwdot[CFO]/d[CHFO]
  // d()/d[CFO]
  dqdci = -k_r * sc[13];
  J[5049] -= dqdci; // dwdot[CH3]/d[CFO]
  J[5050] += dqdci; // dwdot[CH4]/d[CFO]
  J[5105] -= dqdci; // dwdot[CHFO]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5324] -= dqdT; // dwdot[CHFO]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 461: CH2F + CHFO <=> CFO + CH3F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[60] * sc[68];
  k_f = 2000000 * exp(-(4528.94999224248) * invT);
  dlnkfdT = (4528.94999224248) * invT2;
  // reverse
  phi_r = sc[56] * sc[69];
  Kc = exp(-g_RT[56] + g_RT[60] + g_RT[68] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[60] + h_RT[68]) + (h_RT[56] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[56] += q; // CH3F
  wdot[60] -= q; // CH2F
  wdot[68] -= q; // CHFO
  wdot[69] += q; // CFO
  // d()/d[CH3F]
  dqdci = -k_r * sc[69];
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] -= dqdci; // dwdot[CH2F]/d[CH3F]
  J[4156] -= dqdci; // dwdot[CHFO]/d[CH3F]
  J[4157] += dqdci; // dwdot[CFO]/d[CH3F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[68];
  J[4436] += dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4448] -= dqdci; // dwdot[CHFO]/d[CH2F]
  J[4449] += dqdci; // dwdot[CFO]/d[CH2F]
  // d()/d[CHFO]
  dqdci = +k_f * sc[60];
  J[5020] += dqdci; // dwdot[CH3F]/d[CHFO]
  J[5024] -= dqdci; // dwdot[CH2F]/d[CHFO]
  J[5032] -= dqdci; // dwdot[CHFO]/d[CHFO]
  J[5033] += dqdci; // dwdot[CFO]/d[CHFO]
  // d()/d[CFO]
  dqdci = -k_r * sc[56];
  J[5093] += dqdci; // dwdot[CH3F]/d[CFO]
  J[5097] -= dqdci; // dwdot[CH2F]/d[CFO]
  J[5105] -= dqdci; // dwdot[CHFO]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5324] -= dqdT; // dwdot[CHFO]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 462: CHF2 + CHFO <=> CFO + CH2F2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[61] * sc[68];
  k_f = 2000000 * exp(-(4528.94999224248) * invT);
  dlnkfdT = (4528.94999224248) * invT2;
  // reverse
  phi_r = sc[57] * sc[69];
  Kc = exp(-g_RT[57] + g_RT[61] + g_RT[68] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[61] + h_RT[68]) + (h_RT[57] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[57] += q; // CH2F2
  wdot[61] -= q; // CHF2
  wdot[68] -= q; // CHFO
  wdot[69] += q; // CFO
  // d()/d[CH2F2]
  dqdci = -k_r * sc[69];
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] -= dqdci; // dwdot[CHF2]/d[CH2F2]
  J[4229] -= dqdci; // dwdot[CHFO]/d[CH2F2]
  J[4230] += dqdci; // dwdot[CFO]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = +k_f * sc[68];
  J[4510] += dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4521] -= dqdci; // dwdot[CHFO]/d[CHF2]
  J[4522] += dqdci; // dwdot[CFO]/d[CHF2]
  // d()/d[CHFO]
  dqdci = +k_f * sc[61];
  J[5021] += dqdci; // dwdot[CH2F2]/d[CHFO]
  J[5025] -= dqdci; // dwdot[CHF2]/d[CHFO]
  J[5032] -= dqdci; // dwdot[CHFO]/d[CHFO]
  J[5033] += dqdci; // dwdot[CFO]/d[CHFO]
  // d()/d[CFO]
  dqdci = -k_r * sc[57];
  J[5094] += dqdci; // dwdot[CH2F2]/d[CFO]
  J[5098] -= dqdci; // dwdot[CHF2]/d[CFO]
  J[5105] -= dqdci; // dwdot[CHFO]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5324] -= dqdT; // dwdot[CHFO]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 463: CF3 + CHFO <=> CFO + CHF3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[62] * sc[68];
  k_f = 2000000 * exp(-(4528.94999224248) * invT);
  dlnkfdT = (4528.94999224248) * invT2;
  // reverse
  phi_r = sc[58] * sc[69];
  Kc = exp(-g_RT[58] + g_RT[62] + g_RT[68] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[62] + h_RT[68]) + (h_RT[58] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  wdot[68] -= q; // CHFO
  wdot[69] += q; // CFO
  // d()/d[CHF3]
  dqdci = -k_r * sc[69];
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  J[4302] -= dqdci; // dwdot[CHFO]/d[CHF3]
  J[4303] += dqdci; // dwdot[CFO]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[68];
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  J[4594] -= dqdci; // dwdot[CHFO]/d[CF3]
  J[4595] += dqdci; // dwdot[CFO]/d[CF3]
  // d()/d[CHFO]
  dqdci = +k_f * sc[62];
  J[5022] += dqdci; // dwdot[CHF3]/d[CHFO]
  J[5026] -= dqdci; // dwdot[CF3]/d[CHFO]
  J[5032] -= dqdci; // dwdot[CHFO]/d[CHFO]
  J[5033] += dqdci; // dwdot[CFO]/d[CHFO]
  // d()/d[CFO]
  dqdci = -k_r * sc[58];
  J[5095] += dqdci; // dwdot[CHF3]/d[CFO]
  J[5099] -= dqdci; // dwdot[CF3]/d[CFO]
  J[5105] -= dqdci; // dwdot[CHFO]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5324] -= dqdT; // dwdot[CHFO]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 464: C2H3 + CHFO <=> C2H4 + CFO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[23] * sc[68];
  k_f = 2000000 * exp(-(2516.0833290236) * invT);
  dlnkfdT = (2516.0833290236) * invT2;
  // reverse
  phi_r = sc[24] * sc[69];
  Kc = exp(g_RT[23] - g_RT[24] + g_RT[68] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[23] + h_RT[68]) + (h_RT[24] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[23] -= q; // C2H3
  wdot[24] += q; // C2H4
  wdot[68] -= q; // CHFO
  wdot[69] += q; // CFO
  // d()/d[C2H3]
  dqdci = +k_f * sc[68];
  J[1702] -= dqdci; // dwdot[C2H3]/d[C2H3]
  J[1703] += dqdci; // dwdot[C2H4]/d[C2H3]
  J[1747] -= dqdci; // dwdot[CHFO]/d[C2H3]
  J[1748] += dqdci; // dwdot[CFO]/d[C2H3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[69];
  J[1775] -= dqdci; // dwdot[C2H3]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[1820] -= dqdci; // dwdot[CHFO]/d[C2H4]
  J[1821] += dqdci; // dwdot[CFO]/d[C2H4]
  // d()/d[CHFO]
  dqdci = +k_f * sc[23];
  J[4987] -= dqdci; // dwdot[C2H3]/d[CHFO]
  J[4988] += dqdci; // dwdot[C2H4]/d[CHFO]
  J[5032] -= dqdci; // dwdot[CHFO]/d[CHFO]
  J[5033] += dqdci; // dwdot[CFO]/d[CHFO]
  // d()/d[CFO]
  dqdci = -k_r * sc[24];
  J[5060] -= dqdci; // dwdot[C2H3]/d[CFO]
  J[5061] += dqdci; // dwdot[C2H4]/d[CFO]
  J[5105] -= dqdci; // dwdot[CHFO]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT
  J[5324] -= dqdT; // dwdot[CHFO]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 465: CFO + O <=> CO2 + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[69];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[15] * sc[54];
  Kc = exp(g_RT[2] - g_RT[15] - g_RT[54] + g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[69]) + (h_RT[15] + h_RT[54]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // O
  wdot[15] += q; // CO2
  wdot[54] += q; // F
  wdot[69] -= q; // CFO
  // d()/d[O]
  dqdci = +k_f * sc[69];
  J[148] -= dqdci; // dwdot[O]/d[O]
  J[161] += dqdci; // dwdot[CO2]/d[O]
  J[200] += dqdci; // dwdot[F]/d[O]
  J[215] -= dqdci; // dwdot[CFO]/d[O]
  // d()/d[CO2]
  dqdci = -k_r * sc[54];
  J[1097] -= dqdci; // dwdot[O]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  J[1149] += dqdci; // dwdot[F]/d[CO2]
  J[1164] -= dqdci; // dwdot[CFO]/d[CO2]
  // d()/d[F]
  dqdci = -k_r * sc[15];
  J[3944] -= dqdci; // dwdot[O]/d[F]
  J[3957] += dqdci; // dwdot[CO2]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[4011] -= dqdci; // dwdot[CFO]/d[F]
  // d()/d[CFO]
  dqdci = +k_f * sc[2];
  J[5039] -= dqdci; // dwdot[O]/d[CFO]
  J[5052] += dqdci; // dwdot[CO2]/d[CFO]
  J[5091] += dqdci; // dwdot[F]/d[CFO]
  J[5106] -= dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5258] -= dqdT; // dwdot[O]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5325] -= dqdT; // dwdot[CFO]/dT

  // reaction 466: CFO + OH <=> CO2 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[69];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[15] * sc[53];
  Kc = exp(g_RT[4] - g_RT[15] - g_RT[53] + g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[69]) + (h_RT[15] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // OH
  wdot[15] += q; // CO2
  wdot[53] += q; // HF
  wdot[69] -= q; // CFO
  // d()/d[OH]
  dqdci = +k_f * sc[69];
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[307] += dqdci; // dwdot[CO2]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[361] -= dqdci; // dwdot[CFO]/d[OH]
  // d()/d[CO2]
  dqdci = -k_r * sc[53];
  J[1099] -= dqdci; // dwdot[OH]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  J[1148] += dqdci; // dwdot[HF]/d[CO2]
  J[1164] -= dqdci; // dwdot[CFO]/d[CO2]
  // d()/d[HF]
  dqdci = -k_r * sc[15];
  J[3873] -= dqdci; // dwdot[OH]/d[HF]
  J[3884] += dqdci; // dwdot[CO2]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3938] -= dqdci; // dwdot[CFO]/d[HF]
  // d()/d[CFO]
  dqdci = +k_f * sc[4];
  J[5041] -= dqdci; // dwdot[OH]/d[CFO]
  J[5052] += dqdci; // dwdot[CO2]/d[CFO]
  J[5090] += dqdci; // dwdot[HF]/d[CFO]
  J[5106] -= dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5325] -= dqdT; // dwdot[CFO]/dT

  // reaction 467: CFO + HO2 => CO2 + F + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[69];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[4] += q;  // OH
  wdot[6] -= q;  // HO2
  wdot[15] += q; // CO2
  wdot[54] += q; // F
  wdot[69] -= q; // CFO
  // d()/d[HO2]
  dqdci = +k_f * sc[69];
  J[442] += dqdci; // dwdot[OH]/d[HO2]
  J[444] -= dqdci; // dwdot[HO2]/d[HO2]
  J[453] += dqdci; // dwdot[CO2]/d[HO2]
  J[492] += dqdci; // dwdot[F]/d[HO2]
  J[507] -= dqdci; // dwdot[CFO]/d[HO2]
  // d()/d[CFO]
  dqdci = +k_f * sc[6];
  J[5041] += dqdci; // dwdot[OH]/d[CFO]
  J[5043] -= dqdci; // dwdot[HO2]/d[CFO]
  J[5052] += dqdci; // dwdot[CO2]/d[CFO]
  J[5091] += dqdci; // dwdot[F]/d[CFO]
  J[5106] -= dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5260] += dqdT; // dwdot[OH]/dT
  J[5262] -= dqdT; // dwdot[HO2]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5325] -= dqdT; // dwdot[CFO]/dT

  // reaction 468: CFO + CH3 <=> CH2CO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[69];
  k_f = 27000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[28] * sc[53];
  Kc = exp(g_RT[12] - g_RT[28] - g_RT[53] + g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[69]) + (h_RT[28] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[28] += q; // CH2CO
  wdot[53] += q; // HF
  wdot[69] -= q; // CFO
  // d()/d[CH3]
  dqdci = +k_f * sc[69];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[904] += dqdci; // dwdot[CH2CO]/d[CH3]
  J[929] += dqdci; // dwdot[HF]/d[CH3]
  J[945] -= dqdci; // dwdot[CFO]/d[CH3]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[53];
  J[2056] -= dqdci; // dwdot[CH3]/d[CH2CO]
  J[2072] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[2097] += dqdci; // dwdot[HF]/d[CH2CO]
  J[2113] -= dqdci; // dwdot[CFO]/d[CH2CO]
  // d()/d[HF]
  dqdci = -k_r * sc[28];
  J[3881] -= dqdci; // dwdot[CH3]/d[HF]
  J[3897] += dqdci; // dwdot[CH2CO]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3938] -= dqdci; // dwdot[CFO]/d[HF]
  // d()/d[CFO]
  dqdci = +k_f * sc[12];
  J[5049] -= dqdci; // dwdot[CH3]/d[CFO]
  J[5065] += dqdci; // dwdot[CH2CO]/d[CFO]
  J[5090] += dqdci; // dwdot[HF]/d[CFO]
  J[5106] -= dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5284] += dqdT; // dwdot[CH2CO]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5325] -= dqdT; // dwdot[CFO]/dT

  // reaction 469: 2 CFO <=> CF2O + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[69] * sc[69]);
  k_f = 22300000 * exp(-(160.022899725901) * invT);
  dlnkfdT = (160.022899725901) * invT2;
  // reverse
  phi_r = sc[14] * sc[67];
  Kc = exp(-g_RT[14] - g_RT[67] + 2.000000 * g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[69]) + (h_RT[14] + h_RT[67]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q;     // CO
  wdot[67] += q;     // CF2O
  wdot[69] -= 2 * q; // CFO
  // d()/d[CO]
  dqdci = -k_r * sc[67];
  J[1036] += dqdci;      // dwdot[CO]/d[CO]
  J[1089] += dqdci;      // dwdot[CF2O]/d[CO]
  J[1091] += -2 * dqdci; // dwdot[CFO]/d[CO]
  // d()/d[CF2O]
  dqdci = -k_r * sc[14];
  J[4905] += dqdci;      // dwdot[CO]/d[CF2O]
  J[4958] += dqdci;      // dwdot[CF2O]/d[CF2O]
  J[4960] += -2 * dqdci; // dwdot[CFO]/d[CF2O]
  // d()/d[CFO]
  dqdci = +k_f * 2.000000 * sc[69];
  J[5051] += dqdci;      // dwdot[CO]/d[CFO]
  J[5104] += dqdci;      // dwdot[CF2O]/d[CFO]
  J[5106] += -2 * dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5270] += dqdT;      // dwdot[CO]/dT
  J[5323] += dqdT;      // dwdot[CF2O]/dT
  J[5325] += -2 * dqdT; // dwdot[CFO]/dT

  // reaction 470: CH2F + CH3 <=> C2H4 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[60];
  k_f = 18500000000000 * exp(-1.86 * logT - (941.015165054826) * invT);
  dlnkfdT = -1.86 * invT + (941.015165054826) * invT2;
  // reverse
  phi_r = sc[24] * sc[53];
  Kc = exp(g_RT[12] - g_RT[24] - g_RT[53] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[60]) + (h_RT[24] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[24] += q; // C2H4
  wdot[53] += q; // HF
  wdot[60] -= q; // CH2F
  // d()/d[CH3]
  dqdci = +k_f * sc[60];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[900] += dqdci; // dwdot[C2H4]/d[CH3]
  J[929] += dqdci; // dwdot[HF]/d[CH3]
  J[936] -= dqdci; // dwdot[CH2F]/d[CH3]
  // d()/d[C2H4]
  dqdci = -k_r * sc[53];
  J[1764] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[1805] += dqdci; // dwdot[HF]/d[C2H4]
  J[1812] -= dqdci; // dwdot[CH2F]/d[C2H4]
  // d()/d[HF]
  dqdci = -k_r * sc[24];
  J[3881] -= dqdci; // dwdot[CH3]/d[HF]
  J[3893] += dqdci; // dwdot[C2H4]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3929] -= dqdci; // dwdot[CH2F]/d[HF]
  // d()/d[CH2F]
  dqdci = +k_f * sc[12];
  J[4392] -= dqdci; // dwdot[CH3]/d[CH2F]
  J[4404] += dqdci; // dwdot[C2H4]/d[CH2F]
  J[4433] += dqdci; // dwdot[HF]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 471: CH2(S) + CH3F <=> C2H4 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[56];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[24] * sc[53];
  Kc = exp(g_RT[11] - g_RT[24] - g_RT[53] + g_RT[56]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[56]) + (h_RT[24] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // CH2(S)
  wdot[24] += q; // C2H4
  wdot[53] += q; // HF
  wdot[56] -= q; // CH3F
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[56];
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[827] += dqdci; // dwdot[C2H4]/d[CH2(S)]
  J[856] += dqdci; // dwdot[HF]/d[CH2(S)]
  J[859] -= dqdci; // dwdot[CH3F]/d[CH2(S)]
  // d()/d[C2H4]
  dqdci = -k_r * sc[53];
  J[1763] -= dqdci; // dwdot[CH2(S)]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[1805] += dqdci; // dwdot[HF]/d[C2H4]
  J[1808] -= dqdci; // dwdot[CH3F]/d[C2H4]
  // d()/d[HF]
  dqdci = -k_r * sc[24];
  J[3880] -= dqdci; // dwdot[CH2(S)]/d[HF]
  J[3893] += dqdci; // dwdot[C2H4]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3925] -= dqdci; // dwdot[CH3F]/d[HF]
  // d()/d[CH3F]
  dqdci = +k_f * sc[11];
  J[4099] -= dqdci; // dwdot[CH2(S)]/d[CH3F]
  J[4112] += dqdci; // dwdot[C2H4]/d[CH3F]
  J[4141] += dqdci; // dwdot[HF]/d[CH3F]
  J[4144] -= dqdci; // dwdot[CH3F]/d[CH3F]
  // d()/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5312] -= dqdT; // dwdot[CH3F]/dT

  // reaction 472: CH4 + CHF <=> C2H4 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[63];
  k_f = 40000000 * exp(-(7548.2499870708) * invT);
  dlnkfdT = (7548.2499870708) * invT2;
  // reverse
  phi_r = sc[24] * sc[53];
  Kc = exp(g_RT[13] - g_RT[24] - g_RT[53] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[63]) + (h_RT[24] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] -= q; // CH4
  wdot[24] += q; // C2H4
  wdot[53] += q; // HF
  wdot[63] -= q; // CHF
  // d()/d[CH4]
  dqdci = +k_f * sc[63];
  J[962] -= dqdci;  // dwdot[CH4]/d[CH4]
  J[973] += dqdci;  // dwdot[C2H4]/d[CH4]
  J[1002] += dqdci; // dwdot[HF]/d[CH4]
  J[1012] -= dqdci; // dwdot[CHF]/d[CH4]
  // d()/d[C2H4]
  dqdci = -k_r * sc[53];
  J[1765] -= dqdci; // dwdot[CH4]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[1805] += dqdci; // dwdot[HF]/d[C2H4]
  J[1815] -= dqdci; // dwdot[CHF]/d[C2H4]
  // d()/d[HF]
  dqdci = -k_r * sc[24];
  J[3882] -= dqdci; // dwdot[CH4]/d[HF]
  J[3893] += dqdci; // dwdot[C2H4]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3932] -= dqdci; // dwdot[CHF]/d[HF]
  // d()/d[CHF]
  dqdci = +k_f * sc[13];
  J[4612] -= dqdci; // dwdot[CH4]/d[CHF]
  J[4623] += dqdci; // dwdot[C2H4]/d[CHF]
  J[4652] += dqdci; // dwdot[HF]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5269] -= dqdT; // dwdot[CH4]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 473: CH2F + CH3 <=> CH4 + CHF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[60];
  k_f = 30000000 * exp(-(1710.93666373605) * invT);
  dlnkfdT = (1710.93666373605) * invT2;
  // reverse
  phi_r = sc[13] * sc[63];
  Kc = exp(g_RT[12] - g_RT[13] + g_RT[60] - g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[60]) + (h_RT[13] + h_RT[63]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[60] -= q; // CH2F
  wdot[63] += q; // CHF
  // d()/d[CH3]
  dqdci = +k_f * sc[60];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[936] -= dqdci; // dwdot[CH2F]/d[CH3]
  J[939] += dqdci; // dwdot[CHF]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[63];
  J[961] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[962] += dqdci;  // dwdot[CH4]/d[CH4]
  J[1009] -= dqdci; // dwdot[CH2F]/d[CH4]
  J[1012] += dqdci; // dwdot[CHF]/d[CH4]
  // d()/d[CH2F]
  dqdci = +k_f * sc[12];
  J[4392] -= dqdci; // dwdot[CH3]/d[CH2F]
  J[4393] += dqdci; // dwdot[CH4]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4443] += dqdci; // dwdot[CHF]/d[CH2F]
  // d()/d[CHF]
  dqdci = -k_r * sc[13];
  J[4611] -= dqdci; // dwdot[CH3]/d[CHF]
  J[4612] += dqdci; // dwdot[CH4]/d[CHF]
  J[4659] -= dqdci; // dwdot[CH2F]/d[CHF]
  J[4662] += dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5319] += dqdT; // dwdot[CHF]/dT

  // reaction 474: 2 CH2F <=> CH3F + CHF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[60] * sc[60]);
  k_f = 30000000 * exp(-(2415.43999586265) * invT);
  dlnkfdT = (2415.43999586265) * invT2;
  // reverse
  phi_r = sc[56] * sc[63];
  Kc = exp(-g_RT[56] + 2.000000 * g_RT[60] - g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[60]) + (h_RT[56] + h_RT[63]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[56] += q;     // CH3F
  wdot[60] -= 2 * q; // CH2F
  wdot[63] += q;     // CHF
  // d()/d[CH3F]
  dqdci = -k_r * sc[63];
  J[4144] += dqdci;      // dwdot[CH3F]/d[CH3F]
  J[4148] += -2 * dqdci; // dwdot[CH2F]/d[CH3F]
  J[4151] += dqdci;      // dwdot[CHF]/d[CH3F]
  // d()/d[CH2F]
  dqdci = +k_f * 2.000000 * sc[60];
  J[4436] += dqdci;      // dwdot[CH3F]/d[CH2F]
  J[4440] += -2 * dqdci; // dwdot[CH2F]/d[CH2F]
  J[4443] += dqdci;      // dwdot[CHF]/d[CH2F]
  // d()/d[CHF]
  dqdci = -k_r * sc[56];
  J[4655] += dqdci;      // dwdot[CH3F]/d[CHF]
  J[4659] += -2 * dqdci; // dwdot[CH2F]/d[CHF]
  J[4662] += dqdci;      // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5312] += dqdT;      // dwdot[CH3F]/dT
  J[5316] += -2 * dqdT; // dwdot[CH2F]/dT
  J[5319] += dqdT;      // dwdot[CHF]/dT

  // reaction 475: CH2F + CHF2 <=> CH2F2 + CHF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[60] * sc[61];
  k_f = 10000000 * exp(-(2214.15332954077) * invT);
  dlnkfdT = (2214.15332954077) * invT2;
  // reverse
  phi_r = sc[57] * sc[63];
  Kc = exp(-g_RT[57] + g_RT[60] + g_RT[61] - g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[60] + h_RT[61]) + (h_RT[57] + h_RT[63]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[57] += q; // CH2F2
  wdot[60] -= q; // CH2F
  wdot[61] -= q; // CHF2
  wdot[63] += q; // CHF
  // d()/d[CH2F2]
  dqdci = -k_r * sc[63];
  J[4218] += dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4221] -= dqdci; // dwdot[CH2F]/d[CH2F2]
  J[4222] -= dqdci; // dwdot[CHF2]/d[CH2F2]
  J[4224] += dqdci; // dwdot[CHF]/d[CH2F2]
  // d()/d[CH2F]
  dqdci = +k_f * sc[61];
  J[4437] += dqdci; // dwdot[CH2F2]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4441] -= dqdci; // dwdot[CHF2]/d[CH2F]
  J[4443] += dqdci; // dwdot[CHF]/d[CH2F]
  // d()/d[CHF2]
  dqdci = +k_f * sc[60];
  J[4510] += dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4513] -= dqdci; // dwdot[CH2F]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4516] += dqdci; // dwdot[CHF]/d[CHF2]
  // d()/d[CHF]
  dqdci = -k_r * sc[57];
  J[4656] += dqdci; // dwdot[CH2F2]/d[CHF]
  J[4659] -= dqdci; // dwdot[CH2F]/d[CHF]
  J[4660] -= dqdci; // dwdot[CHF2]/d[CHF]
  J[4662] += dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5313] += dqdT; // dwdot[CH2F2]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5319] += dqdT; // dwdot[CHF]/dT

  // reaction 476: CF3 + CH2F <=> CHF + CHF3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[60] * sc[62];
  k_f = 30000000 * exp(-(2314.79666270171) * invT);
  dlnkfdT = (2314.79666270171) * invT2;
  // reverse
  phi_r = sc[58] * sc[63];
  Kc = exp(-g_RT[58] + g_RT[60] + g_RT[62] - g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[60] + h_RT[62]) + (h_RT[58] + h_RT[63]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[58] += q; // CHF3
  wdot[60] -= q; // CH2F
  wdot[62] -= q; // CF3
  wdot[63] += q; // CHF
  // d()/d[CHF3]
  dqdci = -k_r * sc[63];
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4294] -= dqdci; // dwdot[CH2F]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  J[4297] += dqdci; // dwdot[CHF]/d[CHF3]
  // d()/d[CH2F]
  dqdci = +k_f * sc[62];
  J[4438] += dqdci; // dwdot[CHF3]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4442] -= dqdci; // dwdot[CF3]/d[CH2F]
  J[4443] += dqdci; // dwdot[CHF]/d[CH2F]
  // d()/d[CF3]
  dqdci = +k_f * sc[60];
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4586] -= dqdci; // dwdot[CH2F]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  J[4589] += dqdci; // dwdot[CHF]/d[CF3]
  // d()/d[CHF]
  dqdci = -k_r * sc[58];
  J[4657] += dqdci; // dwdot[CHF3]/d[CHF]
  J[4659] -= dqdci; // dwdot[CH2F]/d[CHF]
  J[4661] -= dqdci; // dwdot[CF3]/d[CHF]
  J[4662] += dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5319] += dqdT; // dwdot[CHF]/dT

  // reaction 477: CH3 + CHF2 <=> CF2 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[61];
  k_f = 25000000 * exp(-(402.573332643776) * invT);
  dlnkfdT = (402.573332643776) * invT2;
  // reverse
  phi_r = sc[13] * sc[64];
  Kc = exp(g_RT[12] - g_RT[13] + g_RT[61] - g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[61]) + (h_RT[13] + h_RT[64]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[13] += q; // CH4
  wdot[61] -= q; // CHF2
  wdot[64] += q; // CF2
  // d()/d[CH3]
  dqdci = +k_f * sc[61];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[889] += dqdci; // dwdot[CH4]/d[CH3]
  J[937] -= dqdci; // dwdot[CHF2]/d[CH3]
  J[940] += dqdci; // dwdot[CF2]/d[CH3]
  // d()/d[CH4]
  dqdci = -k_r * sc[64];
  J[961] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[962] += dqdci;  // dwdot[CH4]/d[CH4]
  J[1010] -= dqdci; // dwdot[CHF2]/d[CH4]
  J[1013] += dqdci; // dwdot[CF2]/d[CH4]
  // d()/d[CHF2]
  dqdci = +k_f * sc[12];
  J[4465] -= dqdci; // dwdot[CH3]/d[CHF2]
  J[4466] += dqdci; // dwdot[CH4]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4517] += dqdci; // dwdot[CF2]/d[CHF2]
  // d()/d[CF2]
  dqdci = -k_r * sc[13];
  J[4684] -= dqdci; // dwdot[CH3]/d[CF2]
  J[4685] += dqdci; // dwdot[CH4]/d[CF2]
  J[4733] -= dqdci; // dwdot[CHF2]/d[CF2]
  J[4736] += dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5269] += dqdT; // dwdot[CH4]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5320] += dqdT; // dwdot[CF2]/dT

  // reaction 478: CH2F + CHF2 <=> CF2 + CH3F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[60] * sc[61];
  k_f = 30000000 * exp(-(1107.07666477038) * invT);
  dlnkfdT = (1107.07666477038) * invT2;
  // reverse
  phi_r = sc[56] * sc[64];
  Kc = exp(-g_RT[56] + g_RT[60] + g_RT[61] - g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[60] + h_RT[61]) + (h_RT[56] + h_RT[64]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[56] += q; // CH3F
  wdot[60] -= q; // CH2F
  wdot[61] -= q; // CHF2
  wdot[64] += q; // CF2
  // d()/d[CH3F]
  dqdci = -k_r * sc[64];
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] -= dqdci; // dwdot[CH2F]/d[CH3F]
  J[4149] -= dqdci; // dwdot[CHF2]/d[CH3F]
  J[4152] += dqdci; // dwdot[CF2]/d[CH3F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[61];
  J[4436] += dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  J[4441] -= dqdci; // dwdot[CHF2]/d[CH2F]
  J[4444] += dqdci; // dwdot[CF2]/d[CH2F]
  // d()/d[CHF2]
  dqdci = +k_f * sc[60];
  J[4509] += dqdci; // dwdot[CH3F]/d[CHF2]
  J[4513] -= dqdci; // dwdot[CH2F]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4517] += dqdci; // dwdot[CF2]/d[CHF2]
  // d()/d[CF2]
  dqdci = -k_r * sc[56];
  J[4728] += dqdci; // dwdot[CH3F]/d[CF2]
  J[4732] -= dqdci; // dwdot[CH2F]/d[CF2]
  J[4733] -= dqdci; // dwdot[CHF2]/d[CF2]
  J[4736] += dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5320] += dqdT; // dwdot[CF2]/dT

  // reaction 479: 2 CHF2 <=> CF2 + CH2F2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[61] * sc[61]);
  k_f = 30000000 * exp(-(805.146665287552) * invT);
  dlnkfdT = (805.146665287552) * invT2;
  // reverse
  phi_r = sc[57] * sc[64];
  Kc = exp(-g_RT[57] + 2.000000 * g_RT[61] - g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[61]) + (h_RT[57] + h_RT[64]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[57] += q;     // CH2F2
  wdot[61] -= 2 * q; // CHF2
  wdot[64] += q;     // CF2
  // d()/d[CH2F2]
  dqdci = -k_r * sc[64];
  J[4218] += dqdci;      // dwdot[CH2F2]/d[CH2F2]
  J[4222] += -2 * dqdci; // dwdot[CHF2]/d[CH2F2]
  J[4225] += dqdci;      // dwdot[CF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = +k_f * 2.000000 * sc[61];
  J[4510] += dqdci;      // dwdot[CH2F2]/d[CHF2]
  J[4514] += -2 * dqdci; // dwdot[CHF2]/d[CHF2]
  J[4517] += dqdci;      // dwdot[CF2]/d[CHF2]
  // d()/d[CF2]
  dqdci = -k_r * sc[57];
  J[4729] += dqdci;      // dwdot[CH2F2]/d[CF2]
  J[4733] += -2 * dqdci; // dwdot[CHF2]/d[CF2]
  J[4736] += dqdci;      // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5313] += dqdT;      // dwdot[CH2F2]/dT
  J[5317] += -2 * dqdT; // dwdot[CHF2]/dT
  J[5320] += dqdT;      // dwdot[CF2]/dT

  // reaction 480: CF3 + CHF2 <=> CF2 + CHF3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[61] * sc[62];
  k_f = 30000000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[58] * sc[64];
  Kc = exp(-g_RT[58] + g_RT[61] + g_RT[62] - g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[61] + h_RT[62]) + (h_RT[58] + h_RT[64]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[58] += q; // CHF3
  wdot[61] -= q; // CHF2
  wdot[62] -= q; // CF3
  wdot[64] += q; // CF2
  // d()/d[CHF3]
  dqdci = -k_r * sc[64];
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4295] -= dqdci; // dwdot[CHF2]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  J[4298] += dqdci; // dwdot[CF2]/d[CHF3]
  // d()/d[CHF2]
  dqdci = +k_f * sc[62];
  J[4511] += dqdci; // dwdot[CHF3]/d[CHF2]
  J[4514] -= dqdci; // dwdot[CHF2]/d[CHF2]
  J[4515] -= dqdci; // dwdot[CF3]/d[CHF2]
  J[4517] += dqdci; // dwdot[CF2]/d[CHF2]
  // d()/d[CF3]
  dqdci = +k_f * sc[61];
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4587] -= dqdci; // dwdot[CHF2]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  J[4590] += dqdci; // dwdot[CF2]/d[CF3]
  // d()/d[CF2]
  dqdci = -k_r * sc[58];
  J[4730] += dqdci; // dwdot[CHF3]/d[CF2]
  J[4733] -= dqdci; // dwdot[CHF2]/d[CF2]
  J[4734] -= dqdci; // dwdot[CF3]/d[CF2]
  J[4736] += dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5317] -= dqdT; // dwdot[CHF2]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5320] += dqdT; // dwdot[CF2]/dT

  // reaction 481: CH2(S) + CHF <=> C2H2 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[63];
  k_f = 170200000000000 * exp(-2.12 * logT - (1197.65566461523) * invT);
  dlnkfdT = -2.12 * invT + (1197.65566461523) * invT2;
  // reverse
  phi_r = sc[22] * sc[53];
  Kc = exp(g_RT[11] - g_RT[22] - g_RT[53] + g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[63]) + (h_RT[22] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // CH2(S)
  wdot[22] += q; // C2H2
  wdot[53] += q; // HF
  wdot[63] -= q; // CHF
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[63];
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[825] += dqdci; // dwdot[C2H2]/d[CH2(S)]
  J[856] += dqdci; // dwdot[HF]/d[CH2(S)]
  J[866] -= dqdci; // dwdot[CHF]/d[CH2(S)]
  // d()/d[C2H2]
  dqdci = -k_r * sc[53];
  J[1617] -= dqdci; // dwdot[CH2(S)]/d[C2H2]
  J[1628] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[1659] += dqdci; // dwdot[HF]/d[C2H2]
  J[1669] -= dqdci; // dwdot[CHF]/d[C2H2]
  // d()/d[HF]
  dqdci = -k_r * sc[22];
  J[3880] -= dqdci; // dwdot[CH2(S)]/d[HF]
  J[3891] += dqdci; // dwdot[C2H2]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3932] -= dqdci; // dwdot[CHF]/d[HF]
  // d()/d[CHF]
  dqdci = +k_f * sc[11];
  J[4610] -= dqdci; // dwdot[CH2(S)]/d[CHF]
  J[4621] += dqdci; // dwdot[C2H2]/d[CHF]
  J[4652] += dqdci; // dwdot[HF]/d[CHF]
  J[4662] -= dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5319] -= dqdT; // dwdot[CHF]/dT

  // reaction 482: CH2 + CH2F <=> C2H4 + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[60];
  k_f = 40000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[24] * sc[54];
  Kc = exp(g_RT[10] - g_RT[24] - g_RT[54] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[60]) + (h_RT[24] + h_RT[54]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // CH2
  wdot[24] += q; // C2H4
  wdot[54] += q; // F
  wdot[60] -= q; // CH2F
  // d()/d[CH2]
  dqdci = +k_f * sc[60];
  J[740] -= dqdci; // dwdot[CH2]/d[CH2]
  J[754] += dqdci; // dwdot[C2H4]/d[CH2]
  J[784] += dqdci; // dwdot[F]/d[CH2]
  J[790] -= dqdci; // dwdot[CH2F]/d[CH2]
  // d()/d[C2H4]
  dqdci = -k_r * sc[54];
  J[1762] -= dqdci; // dwdot[CH2]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[1806] += dqdci; // dwdot[F]/d[C2H4]
  J[1812] -= dqdci; // dwdot[CH2F]/d[C2H4]
  // d()/d[F]
  dqdci = -k_r * sc[24];
  J[3952] -= dqdci; // dwdot[CH2]/d[F]
  J[3966] += dqdci; // dwdot[C2H4]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[4002] -= dqdci; // dwdot[CH2F]/d[F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[10];
  J[4390] -= dqdci; // dwdot[CH2]/d[CH2F]
  J[4404] += dqdci; // dwdot[C2H4]/d[CH2F]
  J[4434] += dqdci; // dwdot[F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5266] -= dqdT; // dwdot[CH2]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 483: CH2(S) + CH2F <=> C2H4 + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[60];
  k_f = 2000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[24] * sc[54];
  Kc = exp(g_RT[11] - g_RT[24] - g_RT[54] + g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[60]) + (h_RT[24] + h_RT[54]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // CH2(S)
  wdot[24] += q; // C2H4
  wdot[54] += q; // F
  wdot[60] -= q; // CH2F
  // d()/d[CH2(S)]
  dqdci = +k_f * sc[60];
  J[814] -= dqdci; // dwdot[CH2(S)]/d[CH2(S)]
  J[827] += dqdci; // dwdot[C2H4]/d[CH2(S)]
  J[857] += dqdci; // dwdot[F]/d[CH2(S)]
  J[863] -= dqdci; // dwdot[CH2F]/d[CH2(S)]
  // d()/d[C2H4]
  dqdci = -k_r * sc[54];
  J[1763] -= dqdci; // dwdot[CH2(S)]/d[C2H4]
  J[1776] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[1806] += dqdci; // dwdot[F]/d[C2H4]
  J[1812] -= dqdci; // dwdot[CH2F]/d[C2H4]
  // d()/d[F]
  dqdci = -k_r * sc[24];
  J[3953] -= dqdci; // dwdot[CH2(S)]/d[F]
  J[3966] += dqdci; // dwdot[C2H4]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[4002] -= dqdci; // dwdot[CH2F]/d[F]
  // d()/d[CH2F]
  dqdci = +k_f * sc[11];
  J[4391] -= dqdci; // dwdot[CH2(S)]/d[CH2F]
  J[4404] += dqdci; // dwdot[C2H4]/d[CH2F]
  J[4434] += dqdci; // dwdot[F]/d[CH2F]
  J[4440] -= dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5267] -= dqdT; // dwdot[CH2(S)]/dT
  J[5280] += dqdT; // dwdot[C2H4]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5316] -= dqdT; // dwdot[CH2F]/dT

  // reaction 484: F + HCCO <=> CHF + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[27] * sc[54];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[63];
  Kc = exp(-g_RT[14] + g_RT[27] + g_RT[54] - g_RT[63]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[27] + h_RT[54]) + (h_RT[14] + h_RT[63]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[27] -= q; // HCCO
  wdot[54] -= q; // F
  wdot[63] += q; // CHF
  // d()/d[CO]
  dqdci = -k_r * sc[63];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1049] -= dqdci; // dwdot[HCCO]/d[CO]
  J[1076] -= dqdci; // dwdot[F]/d[CO]
  J[1085] += dqdci; // dwdot[CHF]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[54];
  J[1985] += dqdci; // dwdot[CO]/d[HCCO]
  J[1998] -= dqdci; // dwdot[HCCO]/d[HCCO]
  J[2025] -= dqdci; // dwdot[F]/d[HCCO]
  J[2034] += dqdci; // dwdot[CHF]/d[HCCO]
  // d()/d[F]
  dqdci = +k_f * sc[27];
  J[3956] += dqdci; // dwdot[CO]/d[F]
  J[3969] -= dqdci; // dwdot[HCCO]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[4005] += dqdci; // dwdot[CHF]/d[F]
  // d()/d[CHF]
  dqdci = -k_r * sc[14];
  J[4613] += dqdci; // dwdot[CO]/d[CHF]
  J[4626] -= dqdci; // dwdot[HCCO]/d[CHF]
  J[4653] -= dqdci; // dwdot[F]/d[CHF]
  J[4662] += dqdci; // dwdot[CHF]/d[CHF]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5283] -= dqdT; // dwdot[HCCO]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5319] += dqdT; // dwdot[CHF]/dT

  // reaction 485: CH4 + F <=> CH3 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[54];
  k_f = 5900000 * exp(0.5 * logT - (226.447499612124) * invT);
  dlnkfdT = 0.5 * invT + (226.447499612124) * invT2;
  // reverse
  phi_r = sc[12] * sc[53];
  Kc = exp(-g_RT[12] + g_RT[13] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[54]) + (h_RT[12] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // CH3
  wdot[13] -= q; // CH4
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[CH3]
  dqdci = -k_r * sc[53];
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[889] -= dqdci; // dwdot[CH4]/d[CH3]
  J[929] += dqdci; // dwdot[HF]/d[CH3]
  J[930] -= dqdci; // dwdot[F]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[54];
  J[961] += dqdci;  // dwdot[CH3]/d[CH4]
  J[962] -= dqdci;  // dwdot[CH4]/d[CH4]
  J[1002] += dqdci; // dwdot[HF]/d[CH4]
  J[1003] -= dqdci; // dwdot[F]/d[CH4]
  // d()/d[HF]
  dqdci = -k_r * sc[12];
  J[3881] += dqdci; // dwdot[CH3]/d[HF]
  J[3882] -= dqdci; // dwdot[CH4]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[13];
  J[3954] += dqdci; // dwdot[CH3]/d[F]
  J[3955] -= dqdci; // dwdot[CH4]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5269] -= dqdT; // dwdot[CH4]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 486: CH3F + F <=> CH2F + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[54] * sc[56];
  k_f = 135000000 * exp(-(603.859998965664) * invT);
  dlnkfdT = (603.859998965664) * invT2;
  // reverse
  phi_r = sc[53] * sc[60];
  Kc = exp(-g_RT[53] + g_RT[54] + g_RT[56] - g_RT[60]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[54] + h_RT[56]) + (h_RT[53] + h_RT[60]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  wdot[56] -= q; // CH3F
  wdot[60] += q; // CH2F
  // d()/d[HF]
  dqdci = -k_r * sc[60];
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  J[3925] -= dqdci; // dwdot[CH3F]/d[HF]
  J[3929] += dqdci; // dwdot[CH2F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[56];
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[3998] -= dqdci; // dwdot[CH3F]/d[F]
  J[4002] += dqdci; // dwdot[CH2F]/d[F]
  // d()/d[CH3F]
  dqdci = +k_f * sc[54];
  J[4141] += dqdci; // dwdot[HF]/d[CH3F]
  J[4142] -= dqdci; // dwdot[F]/d[CH3F]
  J[4144] -= dqdci; // dwdot[CH3F]/d[CH3F]
  J[4148] += dqdci; // dwdot[CH2F]/d[CH3F]
  // d()/d[CH2F]
  dqdci = -k_r * sc[53];
  J[4433] += dqdci; // dwdot[HF]/d[CH2F]
  J[4434] -= dqdci; // dwdot[F]/d[CH2F]
  J[4436] -= dqdci; // dwdot[CH3F]/d[CH2F]
  J[4440] += dqdci; // dwdot[CH2F]/d[CH2F]
  // d()/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5312] -= dqdT; // dwdot[CH3F]/dT
  J[5316] += dqdT; // dwdot[CH2F]/dT

  // reaction 487: CH2F2 + F <=> CHF2 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[54] * sc[57];
  k_f = 90000000 * exp(-(930.950831738731) * invT);
  dlnkfdT = (930.950831738731) * invT2;
  // reverse
  phi_r = sc[53] * sc[61];
  Kc = exp(-g_RT[53] + g_RT[54] + g_RT[57] - g_RT[61]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[54] + h_RT[57]) + (h_RT[53] + h_RT[61]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  wdot[57] -= q; // CH2F2
  wdot[61] += q; // CHF2
  // d()/d[HF]
  dqdci = -k_r * sc[61];
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  J[3926] -= dqdci; // dwdot[CH2F2]/d[HF]
  J[3930] += dqdci; // dwdot[CHF2]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[57];
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[3999] -= dqdci; // dwdot[CH2F2]/d[F]
  J[4003] += dqdci; // dwdot[CHF2]/d[F]
  // d()/d[CH2F2]
  dqdci = +k_f * sc[54];
  J[4214] += dqdci; // dwdot[HF]/d[CH2F2]
  J[4215] -= dqdci; // dwdot[F]/d[CH2F2]
  J[4218] -= dqdci; // dwdot[CH2F2]/d[CH2F2]
  J[4222] += dqdci; // dwdot[CHF2]/d[CH2F2]
  // d()/d[CHF2]
  dqdci = -k_r * sc[53];
  J[4506] += dqdci; // dwdot[HF]/d[CHF2]
  J[4507] -= dqdci; // dwdot[F]/d[CHF2]
  J[4510] -= dqdci; // dwdot[CH2F2]/d[CHF2]
  J[4514] += dqdci; // dwdot[CHF2]/d[CHF2]
  // d()/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5313] -= dqdT; // dwdot[CH2F2]/dT
  J[5317] += dqdT; // dwdot[CHF2]/dT

  // reaction 488: CHF3 + F <=> CF3 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[54] * sc[58];
  k_f = 45000000 * exp(-(1861.90166347746) * invT);
  dlnkfdT = (1861.90166347746) * invT2;
  // reverse
  phi_r = sc[53] * sc[62];
  Kc = exp(-g_RT[53] + g_RT[54] + g_RT[58] - g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[54] + h_RT[58]) + (h_RT[53] + h_RT[62]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  wdot[58] -= q; // CHF3
  wdot[62] += q; // CF3
  // d()/d[HF]
  dqdci = -k_r * sc[62];
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  J[3927] -= dqdci; // dwdot[CHF3]/d[HF]
  J[3931] += dqdci; // dwdot[CF3]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[58];
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[4000] -= dqdci; // dwdot[CHF3]/d[F]
  J[4004] += dqdci; // dwdot[CF3]/d[F]
  // d()/d[CHF3]
  dqdci = +k_f * sc[54];
  J[4287] += dqdci; // dwdot[HF]/d[CHF3]
  J[4288] -= dqdci; // dwdot[F]/d[CHF3]
  J[4292] -= dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] += dqdci; // dwdot[CF3]/d[CHF3]
  // d()/d[CF3]
  dqdci = -k_r * sc[53];
  J[4579] += dqdci; // dwdot[HF]/d[CF3]
  J[4580] -= dqdci; // dwdot[F]/d[CF3]
  J[4584] -= dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] += dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5314] -= dqdT; // dwdot[CHF3]/dT
  J[5318] += dqdT; // dwdot[CF3]/dT

  // reaction 489: CH3OH + F <=> CH3O + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[54];
  k_f = 2620 * exp(1.44 * logT - (-103.159416489968) * invT);
  dlnkfdT = 1.44 * invT + (-103.159416489968) * invT2;
  // reverse
  phi_r = sc[19] * sc[53];
  Kc = exp(-g_RT[19] + g_RT[20] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[54]) + (h_RT[19] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[19] += q; // CH3O
  wdot[20] -= q; // CH3OH
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[CH3O]
  dqdci = -k_r * sc[53];
  J[1406] += dqdci; // dwdot[CH3O]/d[CH3O]
  J[1407] -= dqdci; // dwdot[CH3OH]/d[CH3O]
  J[1440] += dqdci; // dwdot[HF]/d[CH3O]
  J[1441] -= dqdci; // dwdot[F]/d[CH3O]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[54];
  J[1479] += dqdci; // dwdot[CH3O]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  J[1513] += dqdci; // dwdot[HF]/d[CH3OH]
  J[1514] -= dqdci; // dwdot[F]/d[CH3OH]
  // d()/d[HF]
  dqdci = -k_r * sc[19];
  J[3888] += dqdci; // dwdot[CH3O]/d[HF]
  J[3889] -= dqdci; // dwdot[CH3OH]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[20];
  J[3961] += dqdci; // dwdot[CH3O]/d[F]
  J[3962] -= dqdci; // dwdot[CH3OH]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5275] += dqdT; // dwdot[CH3O]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 490: CH3OH + F <=> CH2OH + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[20] * sc[54];
  k_f = 46.2 * exp(1.97 * logT - (-150.964999741416) * invT);
  dlnkfdT = 1.97 * invT + (-150.964999741416) * invT2;
  // reverse
  phi_r = sc[18] * sc[53];
  Kc = exp(-g_RT[18] + g_RT[20] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[20] + h_RT[54]) + (h_RT[18] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // CH2OH
  wdot[20] -= q; // CH3OH
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[CH2OH]
  dqdci = -k_r * sc[53];
  J[1332] += dqdci; // dwdot[CH2OH]/d[CH2OH]
  J[1334] -= dqdci; // dwdot[CH3OH]/d[CH2OH]
  J[1367] += dqdci; // dwdot[HF]/d[CH2OH]
  J[1368] -= dqdci; // dwdot[F]/d[CH2OH]
  // d()/d[CH3OH]
  dqdci = +k_f * sc[54];
  J[1478] += dqdci; // dwdot[CH2OH]/d[CH3OH]
  J[1480] -= dqdci; // dwdot[CH3OH]/d[CH3OH]
  J[1513] += dqdci; // dwdot[HF]/d[CH3OH]
  J[1514] -= dqdci; // dwdot[F]/d[CH3OH]
  // d()/d[HF]
  dqdci = -k_r * sc[18];
  J[3887] += dqdci; // dwdot[CH2OH]/d[HF]
  J[3889] -= dqdci; // dwdot[CH3OH]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[20];
  J[3960] += dqdci; // dwdot[CH2OH]/d[F]
  J[3962] -= dqdci; // dwdot[CH3OH]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5274] += dqdT; // dwdot[CH2OH]/dT
  J[5276] -= dqdT; // dwdot[CH3OH]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 491: CH2O + F <=> HCO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[54];
  k_f = 60000000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[16] * sc[53];
  Kc = exp(-g_RT[16] + g_RT[17] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[54]) + (h_RT[16] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // HCO
  wdot[17] -= q; // CH2O
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[HCO]
  dqdci = -k_r * sc[53];
  J[1184] += dqdci; // dwdot[HCO]/d[HCO]
  J[1185] -= dqdci; // dwdot[CH2O]/d[HCO]
  J[1221] += dqdci; // dwdot[HF]/d[HCO]
  J[1222] -= dqdci; // dwdot[F]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[54];
  J[1257] += dqdci; // dwdot[HCO]/d[CH2O]
  J[1258] -= dqdci; // dwdot[CH2O]/d[CH2O]
  J[1294] += dqdci; // dwdot[HF]/d[CH2O]
  J[1295] -= dqdci; // dwdot[F]/d[CH2O]
  // d()/d[HF]
  dqdci = -k_r * sc[16];
  J[3885] += dqdci; // dwdot[HCO]/d[HF]
  J[3886] -= dqdci; // dwdot[CH2O]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[17];
  J[3958] += dqdci; // dwdot[HCO]/d[F]
  J[3959] -= dqdci; // dwdot[CH2O]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5272] += dqdT; // dwdot[HCO]/dT
  J[5273] -= dqdT; // dwdot[CH2O]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 492: CHFO + F <=> CFO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[54] * sc[68];
  k_f = 26500000 * exp(-(905.789998448495) * invT);
  dlnkfdT = (905.789998448495) * invT2;
  // reverse
  phi_r = sc[53] * sc[69];
  Kc = exp(-g_RT[53] + g_RT[54] + g_RT[68] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[54] + h_RT[68]) + (h_RT[53] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  wdot[68] -= q; // CHFO
  wdot[69] += q; // CFO
  // d()/d[HF]
  dqdci = -k_r * sc[69];
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  J[3937] -= dqdci; // dwdot[CHFO]/d[HF]
  J[3938] += dqdci; // dwdot[CFO]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[68];
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[4010] -= dqdci; // dwdot[CHFO]/d[F]
  J[4011] += dqdci; // dwdot[CFO]/d[F]
  // d()/d[CHFO]
  dqdci = +k_f * sc[54];
  J[5017] += dqdci; // dwdot[HF]/d[CHFO]
  J[5018] -= dqdci; // dwdot[F]/d[CHFO]
  J[5032] -= dqdci; // dwdot[CHFO]/d[CHFO]
  J[5033] += dqdci; // dwdot[CFO]/d[CHFO]
  // d()/d[CFO]
  dqdci = -k_r * sc[53];
  J[5090] += dqdci; // dwdot[HF]/d[CFO]
  J[5091] -= dqdci; // dwdot[F]/d[CFO]
  J[5105] -= dqdci; // dwdot[CHFO]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5324] -= dqdT; // dwdot[CHFO]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 493: CH3O + F <=> CH2O + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19] * sc[54];
  k_f = 30000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[17] * sc[53];
  Kc = exp(-g_RT[17] + g_RT[19] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19] + h_RT[54]) + (h_RT[17] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[17] += q; // CH2O
  wdot[19] -= q; // CH3O
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[CH2O]
  dqdci = -k_r * sc[53];
  J[1258] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[1260] -= dqdci; // dwdot[CH3O]/d[CH2O]
  J[1294] += dqdci; // dwdot[HF]/d[CH2O]
  J[1295] -= dqdci; // dwdot[F]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[54];
  J[1404] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[1406] -= dqdci; // dwdot[CH3O]/d[CH3O]
  J[1440] += dqdci; // dwdot[HF]/d[CH3O]
  J[1441] -= dqdci; // dwdot[F]/d[CH3O]
  // d()/d[HF]
  dqdci = -k_r * sc[17];
  J[3886] += dqdci; // dwdot[CH2O]/d[HF]
  J[3888] -= dqdci; // dwdot[CH3O]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[19];
  J[3959] += dqdci; // dwdot[CH2O]/d[F]
  J[3961] -= dqdci; // dwdot[CH3O]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5273] += dqdT; // dwdot[CH2O]/dT
  J[5275] -= dqdT; // dwdot[CH3O]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 494: F + HCO <=> CO + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[54];
  k_f = 10000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[53];
  Kc = exp(-g_RT[14] + g_RT[16] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[54]) + (h_RT[14] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[16] -= q; // HCO
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[CO]
  dqdci = -k_r * sc[53];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1038] -= dqdci; // dwdot[HCO]/d[CO]
  J[1075] += dqdci; // dwdot[HF]/d[CO]
  J[1076] -= dqdci; // dwdot[F]/d[CO]
  // d()/d[HCO]
  dqdci = +k_f * sc[54];
  J[1182] += dqdci; // dwdot[CO]/d[HCO]
  J[1184] -= dqdci; // dwdot[HCO]/d[HCO]
  J[1221] += dqdci; // dwdot[HF]/d[HCO]
  J[1222] -= dqdci; // dwdot[F]/d[HCO]
  // d()/d[HF]
  dqdci = -k_r * sc[14];
  J[3883] += dqdci; // dwdot[CO]/d[HF]
  J[3885] -= dqdci; // dwdot[HCO]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[16];
  J[3956] += dqdci; // dwdot[CO]/d[F]
  J[3958] -= dqdci; // dwdot[HCO]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5272] -= dqdT; // dwdot[HCO]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 495: C2H6 + F <=> C2H5 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[26] * sc[54];
  k_f = 8000000 * exp(-(150.964999741416) * invT);
  dlnkfdT = (150.964999741416) * invT2;
  // reverse
  phi_r = sc[25] * sc[53];
  Kc = exp(-g_RT[25] + g_RT[26] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[26] + h_RT[54]) + (h_RT[25] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[25] += q; // C2H5
  wdot[26] -= q; // C2H6
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[C2H5]
  dqdci = -k_r * sc[53];
  J[1850] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1851] -= dqdci; // dwdot[C2H6]/d[C2H5]
  J[1878] += dqdci; // dwdot[HF]/d[C2H5]
  J[1879] -= dqdci; // dwdot[F]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[54];
  J[1923] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1924] -= dqdci; // dwdot[C2H6]/d[C2H6]
  J[1951] += dqdci; // dwdot[HF]/d[C2H6]
  J[1952] -= dqdci; // dwdot[F]/d[C2H6]
  // d()/d[HF]
  dqdci = -k_r * sc[25];
  J[3894] += dqdci; // dwdot[C2H5]/d[HF]
  J[3895] -= dqdci; // dwdot[C2H6]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[26];
  J[3967] += dqdci; // dwdot[C2H5]/d[F]
  J[3968] -= dqdci; // dwdot[C2H6]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5281] += dqdT; // dwdot[C2H5]/dT
  J[5282] -= dqdT; // dwdot[C2H6]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 496: C2H4 + F <=> C2H3 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[24] * sc[54];
  k_f = 100000000 * exp(-(1006.43333160944) * invT);
  dlnkfdT = (1006.43333160944) * invT2;
  // reverse
  phi_r = sc[23] * sc[53];
  Kc = exp(-g_RT[23] + g_RT[24] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[24] + h_RT[54]) + (h_RT[23] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[23] += q; // C2H3
  wdot[24] -= q; // C2H4
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[C2H3]
  dqdci = -k_r * sc[53];
  J[1702] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[1703] -= dqdci; // dwdot[C2H4]/d[C2H3]
  J[1732] += dqdci; // dwdot[HF]/d[C2H3]
  J[1733] -= dqdci; // dwdot[F]/d[C2H3]
  // d()/d[C2H4]
  dqdci = +k_f * sc[54];
  J[1775] += dqdci; // dwdot[C2H3]/d[C2H4]
  J[1776] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[1805] += dqdci; // dwdot[HF]/d[C2H4]
  J[1806] -= dqdci; // dwdot[F]/d[C2H4]
  // d()/d[HF]
  dqdci = -k_r * sc[23];
  J[3892] += dqdci; // dwdot[C2H3]/d[HF]
  J[3893] -= dqdci; // dwdot[C2H4]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[24];
  J[3965] += dqdci; // dwdot[C2H3]/d[F]
  J[3966] -= dqdci; // dwdot[C2H4]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5279] += dqdT; // dwdot[C2H3]/dT
  J[5280] -= dqdT; // dwdot[C2H4]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 497: C2H3 + F <=> C2H2 + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[23] * sc[54];
  k_f = 20000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[22] * sc[53];
  Kc = exp(-g_RT[22] + g_RT[23] - g_RT[53] + g_RT[54]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[23] + h_RT[54]) + (h_RT[22] + h_RT[53]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[22] += q; // C2H2
  wdot[23] -= q; // C2H3
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  // d()/d[C2H2]
  dqdci = -k_r * sc[53];
  J[1628] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[1629] -= dqdci; // dwdot[C2H3]/d[C2H2]
  J[1659] += dqdci; // dwdot[HF]/d[C2H2]
  J[1660] -= dqdci; // dwdot[F]/d[C2H2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[54];
  J[1701] += dqdci; // dwdot[C2H2]/d[C2H3]
  J[1702] -= dqdci; // dwdot[C2H3]/d[C2H3]
  J[1732] += dqdci; // dwdot[HF]/d[C2H3]
  J[1733] -= dqdci; // dwdot[F]/d[C2H3]
  // d()/d[HF]
  dqdci = -k_r * sc[22];
  J[3891] += dqdci; // dwdot[C2H2]/d[HF]
  J[3892] -= dqdci; // dwdot[C2H3]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[23];
  J[3964] += dqdci; // dwdot[C2H2]/d[F]
  J[3965] -= dqdci; // dwdot[C2H3]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  // d()/dT
  J[5278] += dqdT; // dwdot[C2H2]/dT
  J[5279] -= dqdT; // dwdot[C2H3]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT

  // reaction 499: CF4 + CH3 <=> CF3 + CH3F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[59];
  k_f = 0.0964 * exp(2.41 * logT - (13149.0514774773) * invT);
  dlnkfdT = 2.41 * invT + (13149.0514774773) * invT2;
  // reverse
  phi_r = sc[56] * sc[62];
  Kc = exp(g_RT[12] - g_RT[56] + g_RT[59] - g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[59]) + (h_RT[56] + h_RT[62]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[56] += q; // CH3F
  wdot[59] -= q; // CF4
  wdot[62] += q; // CF3
  // d()/d[CH3]
  dqdci = +k_f * sc[59];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[932] += dqdci; // dwdot[CH3F]/d[CH3]
  J[935] -= dqdci; // dwdot[CF4]/d[CH3]
  J[938] += dqdci; // dwdot[CF3]/d[CH3]
  // d()/d[CH3F]
  dqdci = -k_r * sc[62];
  J[4100] -= dqdci; // dwdot[CH3]/d[CH3F]
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  J[4147] -= dqdci; // dwdot[CF4]/d[CH3F]
  J[4150] += dqdci; // dwdot[CF3]/d[CH3F]
  // d()/d[CF4]
  dqdci = +k_f * sc[12];
  J[4319] -= dqdci; // dwdot[CH3]/d[CF4]
  J[4363] += dqdci; // dwdot[CH3F]/d[CF4]
  J[4366] -= dqdci; // dwdot[CF4]/d[CF4]
  J[4369] += dqdci; // dwdot[CF3]/d[CF4]
  // d()/d[CF3]
  dqdci = -k_r * sc[56];
  J[4538] -= dqdci; // dwdot[CH3]/d[CF3]
  J[4582] += dqdci; // dwdot[CH3F]/d[CF3]
  J[4585] -= dqdci; // dwdot[CF4]/d[CF3]
  J[4588] += dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT
  J[5315] -= dqdT; // dwdot[CF4]/dT
  J[5318] += dqdT; // dwdot[CF3]/dT

  // reaction 500: CF3O + CO <=> CF3 + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[66];
  k_f = 31300;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[15] * sc[62];
  Kc = exp(g_RT[14] - g_RT[15] - g_RT[62] + g_RT[66]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[66]) + (h_RT[15] + h_RT[62]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] -= q; // CO
  wdot[15] += q; // CO2
  wdot[62] += q; // CF3
  wdot[66] -= q; // CF3O
  // d()/d[CO]
  dqdci = +k_f * sc[66];
  J[1036] -= dqdci; // dwdot[CO]/d[CO]
  J[1037] += dqdci; // dwdot[CO2]/d[CO]
  J[1084] += dqdci; // dwdot[CF3]/d[CO]
  J[1088] -= dqdci; // dwdot[CF3O]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[62];
  J[1109] -= dqdci; // dwdot[CO]/d[CO2]
  J[1110] += dqdci; // dwdot[CO2]/d[CO2]
  J[1157] += dqdci; // dwdot[CF3]/d[CO2]
  J[1161] -= dqdci; // dwdot[CF3O]/d[CO2]
  // d()/d[CF3]
  dqdci = -k_r * sc[15];
  J[4540] -= dqdci; // dwdot[CO]/d[CF3]
  J[4541] += dqdci; // dwdot[CO2]/d[CF3]
  J[4588] += dqdci; // dwdot[CF3]/d[CF3]
  J[4592] -= dqdci; // dwdot[CF3O]/d[CF3]
  // d()/d[CF3O]
  dqdci = +k_f * sc[14];
  J[4832] -= dqdci; // dwdot[CO]/d[CF3O]
  J[4833] += dqdci; // dwdot[CO2]/d[CF3O]
  J[4880] += dqdci; // dwdot[CF3]/d[CF3O]
  J[4884] -= dqdci; // dwdot[CF3O]/d[CF3O]
  // d()/dT
  J[5270] -= dqdT; // dwdot[CO]/dT
  J[5271] += dqdT; // dwdot[CO2]/dT
  J[5318] += dqdT; // dwdot[CF3]/dT
  J[5322] -= dqdT; // dwdot[CF3O]/dT

  // reaction 501: CF2 + CFO <=> CF3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[64] * sc[69];
  k_f = 540000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[14] * sc[62];
  Kc = exp(-g_RT[14] - g_RT[62] + g_RT[64] + g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[64] + h_RT[69]) + (h_RT[14] + h_RT[62]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] += q; // CO
  wdot[62] += q; // CF3
  wdot[64] -= q; // CF2
  wdot[69] -= q; // CFO
  // d()/d[CO]
  dqdci = -k_r * sc[62];
  J[1036] += dqdci; // dwdot[CO]/d[CO]
  J[1084] += dqdci; // dwdot[CF3]/d[CO]
  J[1086] -= dqdci; // dwdot[CF2]/d[CO]
  J[1091] -= dqdci; // dwdot[CFO]/d[CO]
  // d()/d[CF3]
  dqdci = -k_r * sc[14];
  J[4540] += dqdci; // dwdot[CO]/d[CF3]
  J[4588] += dqdci; // dwdot[CF3]/d[CF3]
  J[4590] -= dqdci; // dwdot[CF2]/d[CF3]
  J[4595] -= dqdci; // dwdot[CFO]/d[CF3]
  // d()/d[CF2]
  dqdci = +k_f * sc[69];
  J[4686] += dqdci; // dwdot[CO]/d[CF2]
  J[4734] += dqdci; // dwdot[CF3]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  J[4741] -= dqdci; // dwdot[CFO]/d[CF2]
  // d()/d[CFO]
  dqdci = +k_f * sc[64];
  J[5051] += dqdci; // dwdot[CO]/d[CFO]
  J[5099] += dqdci; // dwdot[CF3]/d[CFO]
  J[5101] -= dqdci; // dwdot[CF2]/d[CFO]
  J[5106] -= dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5270] += dqdT; // dwdot[CO]/dT
  J[5318] += dqdT; // dwdot[CF3]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT
  J[5325] -= dqdT; // dwdot[CFO]/dT

  // reaction 503: F2 + H <=> F + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[55];
  k_f = 2900 * exp(1.4 * logT - (669.278165520277) * invT);
  dlnkfdT = 1.4 * invT + (669.278165520277) * invT2;
  // reverse
  phi_r = sc[53] * sc[54];
  Kc = exp(g_RT[1] - g_RT[53] - g_RT[54] + g_RT[55]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[55]) + (h_RT[53] + h_RT[54]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // H
  wdot[53] += q; // HF
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  // d()/d[H]
  dqdci = +k_f * sc[55];
  J[74] -= dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[127] += dqdci; // dwdot[F]/d[H]
  J[128] -= dqdci; // dwdot[F2]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[54];
  J[3870] -= dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] += dqdci; // dwdot[F]/d[HF]
  J[3924] -= dqdci; // dwdot[F2]/d[HF]
  // d()/d[F]
  dqdci = -k_r * sc[53];
  J[3943] -= dqdci; // dwdot[H]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[1];
  J[4016] -= dqdci; // dwdot[H]/d[F2]
  J[4068] += dqdci; // dwdot[HF]/d[F2]
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  // d()/dT
  J[5257] -= dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT

  // reaction 504: CF3 + F2 <=> CF4 + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[55] * sc[62];
  k_f = 2650000 * exp(-(1258.0416645118) * invT);
  dlnkfdT = (1258.0416645118) * invT2;
  // reverse
  phi_r = sc[54] * sc[59];
  Kc = exp(-g_RT[54] + g_RT[55] - g_RT[59] + g_RT[62]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[55] + h_RT[62]) + (h_RT[54] + h_RT[59]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  wdot[59] += q; // CF4
  wdot[62] -= q; // CF3
  // d()/d[F]
  dqdci = -k_r * sc[59];
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  J[4001] += dqdci; // dwdot[CF4]/d[F]
  J[4004] -= dqdci; // dwdot[CF3]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[62];
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  J[4074] += dqdci; // dwdot[CF4]/d[F2]
  J[4077] -= dqdci; // dwdot[CF3]/d[F2]
  // d()/d[CF4]
  dqdci = -k_r * sc[54];
  J[4361] += dqdci; // dwdot[F]/d[CF4]
  J[4362] -= dqdci; // dwdot[F2]/d[CF4]
  J[4366] += dqdci; // dwdot[CF4]/d[CF4]
  J[4369] -= dqdci; // dwdot[CF3]/d[CF4]
  // d()/d[CF3]
  dqdci = +k_f * sc[55];
  J[4580] += dqdci; // dwdot[F]/d[CF3]
  J[4581] -= dqdci; // dwdot[F2]/d[CF3]
  J[4585] += dqdci; // dwdot[CF4]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  // d()/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT
  J[5315] += dqdT; // dwdot[CF4]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT

  // reaction 505: CH3 + F2 <=> CH3F + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[55];
  k_f = 4000000 * exp(-(553.538332385192) * invT);
  dlnkfdT = (553.538332385192) * invT2;
  // reverse
  phi_r = sc[54] * sc[56];
  Kc = exp(g_RT[12] - g_RT[54] + g_RT[55] - g_RT[56]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[55]) + (h_RT[54] + h_RT[56]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // CH3
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  wdot[56] += q; // CH3F
  // d()/d[CH3]
  dqdci = +k_f * sc[55];
  J[888] -= dqdci; // dwdot[CH3]/d[CH3]
  J[930] += dqdci; // dwdot[F]/d[CH3]
  J[931] -= dqdci; // dwdot[F2]/d[CH3]
  J[932] += dqdci; // dwdot[CH3F]/d[CH3]
  // d()/d[F]
  dqdci = -k_r * sc[56];
  J[3954] -= dqdci; // dwdot[CH3]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  J[3998] += dqdci; // dwdot[CH3F]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[12];
  J[4027] -= dqdci; // dwdot[CH3]/d[F2]
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  J[4071] += dqdci; // dwdot[CH3F]/d[F2]
  // d()/d[CH3F]
  dqdci = -k_r * sc[54];
  J[4100] -= dqdci; // dwdot[CH3]/d[CH3F]
  J[4142] += dqdci; // dwdot[F]/d[CH3F]
  J[4143] -= dqdci; // dwdot[F2]/d[CH3F]
  J[4144] += dqdci; // dwdot[CH3F]/d[CH3F]
  // d()/dT
  J[5268] -= dqdT; // dwdot[CH3]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT
  J[5312] += dqdT; // dwdot[CH3F]/dT

  // reaction 506: CF2 + F2 <=> CF3 + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[55] * sc[64];
  k_f = 1200000 * exp(-(1509.64999741416) * invT);
  dlnkfdT = (1509.64999741416) * invT2;
  // reverse
  phi_r = sc[54] * sc[62];
  Kc = exp(-g_RT[54] + g_RT[55] - g_RT[62] + g_RT[64]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[55] + h_RT[64]) + (h_RT[54] + h_RT[62]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  wdot[62] += q; // CF3
  wdot[64] -= q; // CF2
  // d()/d[F]
  dqdci = -k_r * sc[62];
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  J[4004] += dqdci; // dwdot[CF3]/d[F]
  J[4006] -= dqdci; // dwdot[CF2]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[64];
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  J[4077] += dqdci; // dwdot[CF3]/d[F2]
  J[4079] -= dqdci; // dwdot[CF2]/d[F2]
  // d()/d[CF3]
  dqdci = -k_r * sc[54];
  J[4580] += dqdci; // dwdot[F]/d[CF3]
  J[4581] -= dqdci; // dwdot[F2]/d[CF3]
  J[4588] += dqdci; // dwdot[CF3]/d[CF3]
  J[4590] -= dqdci; // dwdot[CF2]/d[CF3]
  // d()/d[CF2]
  dqdci = +k_f * sc[55];
  J[4726] += dqdci; // dwdot[F]/d[CF2]
  J[4727] -= dqdci; // dwdot[F2]/d[CF2]
  J[4734] += dqdci; // dwdot[CF3]/d[CF2]
  J[4736] -= dqdci; // dwdot[CF2]/d[CF2]
  // d()/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT
  J[5318] += dqdT; // dwdot[CF3]/dT
  J[5320] -= dqdT; // dwdot[CF2]/dT

  // reaction 507: CFO + F2 <=> CF2O + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[55] * sc[69];
  k_f = 1000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[54] * sc[67];
  Kc = exp(-g_RT[54] + g_RT[55] - g_RT[67] + g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[55] + h_RT[69]) + (h_RT[54] + h_RT[67]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  wdot[67] += q; // CF2O
  wdot[69] -= q; // CFO
  // d()/d[F]
  dqdci = -k_r * sc[67];
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  J[4009] += dqdci; // dwdot[CF2O]/d[F]
  J[4011] -= dqdci; // dwdot[CFO]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[69];
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  J[4082] += dqdci; // dwdot[CF2O]/d[F2]
  J[4084] -= dqdci; // dwdot[CFO]/d[F2]
  // d()/d[CF2O]
  dqdci = -k_r * sc[54];
  J[4945] += dqdci; // dwdot[F]/d[CF2O]
  J[4946] -= dqdci; // dwdot[F2]/d[CF2O]
  J[4958] += dqdci; // dwdot[CF2O]/d[CF2O]
  J[4960] -= dqdci; // dwdot[CFO]/d[CF2O]
  // d()/d[CFO]
  dqdci = +k_f * sc[55];
  J[5091] += dqdci; // dwdot[F]/d[CFO]
  J[5092] -= dqdci; // dwdot[F2]/d[CFO]
  J[5104] += dqdci; // dwdot[CF2O]/d[CFO]
  J[5106] -= dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT
  J[5323] += dqdT; // dwdot[CF2O]/dT
  J[5325] -= dqdT; // dwdot[CFO]/dT

  // reaction 508: F2 + H2 <=> F + H + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[55];
  k_f = 3440000 * exp(-(9958.6578162754) * invT);
  dlnkfdT = (9958.6578162754) * invT2;
  // reverse
  phi_r = sc[1] * sc[53] * sc[54];
  Kc = refC * exp(g_RT[0] - g_RT[1] - g_RT[53] - g_RT[54] + g_RT[55]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[0] + h_RT[55]) + (h_RT[1] + h_RT[53] + h_RT[54]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[0] -= q;  // H2
  wdot[1] += q;  // H
  wdot[53] += q; // HF
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  // d()/d[H2]
  dqdci = +k_f * sc[55];
  J[0] -= dqdci;  // dwdot[H2]/d[H2]
  J[1] += dqdci;  // dwdot[H]/d[H2]
  J[53] += dqdci; // dwdot[HF]/d[H2]
  J[54] += dqdci; // dwdot[F]/d[H2]
  J[55] -= dqdci; // dwdot[F2]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[53] * sc[54];
  J[73] -= dqdci;  // dwdot[H2]/d[H]
  J[74] += dqdci;  // dwdot[H]/d[H]
  J[126] += dqdci; // dwdot[HF]/d[H]
  J[127] += dqdci; // dwdot[F]/d[H]
  J[128] -= dqdci; // dwdot[F2]/d[H]
  // d()/d[HF]
  dqdci = -k_r * sc[1] * sc[54];
  J[3869] -= dqdci; // dwdot[H2]/d[HF]
  J[3870] += dqdci; // dwdot[H]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] += dqdci; // dwdot[F]/d[HF]
  J[3924] -= dqdci; // dwdot[F2]/d[HF]
  // d()/d[F]
  dqdci = -k_r * sc[1] * sc[53];
  J[3942] -= dqdci; // dwdot[H2]/d[F]
  J[3943] += dqdci; // dwdot[H]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[0];
  J[4015] -= dqdci; // dwdot[H2]/d[F2]
  J[4016] += dqdci; // dwdot[H]/d[F2]
  J[4068] += dqdci; // dwdot[HF]/d[F2]
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  // d()/dT
  J[5256] -= dqdT; // dwdot[H2]/dT
  J[5257] += dqdT; // dwdot[H]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT

  // reaction 509: CO + F2 <=> CFO + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[55];
  k_f = 470000 * exp(-(6793.42498836372) * invT);
  dlnkfdT = (6793.42498836372) * invT2;
  // reverse
  phi_r = sc[54] * sc[69];
  Kc = exp(g_RT[14] - g_RT[54] + g_RT[55] - g_RT[69]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[55]) + (h_RT[54] + h_RT[69]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[14] -= q; // CO
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  wdot[69] += q; // CFO
  // d()/d[CO]
  dqdci = +k_f * sc[55];
  J[1036] -= dqdci; // dwdot[CO]/d[CO]
  J[1076] += dqdci; // dwdot[F]/d[CO]
  J[1077] -= dqdci; // dwdot[F2]/d[CO]
  J[1091] += dqdci; // dwdot[CFO]/d[CO]
  // d()/d[F]
  dqdci = -k_r * sc[69];
  J[3956] -= dqdci; // dwdot[CO]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  J[4011] += dqdci; // dwdot[CFO]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[14];
  J[4029] -= dqdci; // dwdot[CO]/d[F2]
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  J[4084] += dqdci; // dwdot[CFO]/d[F2]
  // d()/d[CFO]
  dqdci = -k_r * sc[54];
  J[5051] -= dqdci; // dwdot[CO]/d[CFO]
  J[5091] += dqdci; // dwdot[F]/d[CFO]
  J[5092] -= dqdci; // dwdot[F2]/d[CFO]
  J[5106] += dqdci; // dwdot[CFO]/d[CFO]
  // d()/dT
  J[5270] -= dqdT; // dwdot[CO]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT
  J[5325] += dqdT; // dwdot[CFO]/dT

  // reaction 510: C + F2 <=> CF + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[55];
  k_f = 1700000 * exp(-(754.82499870708) * invT);
  dlnkfdT = (754.82499870708) * invT2;
  // reverse
  phi_r = sc[54] * sc[65];
  Kc = exp(g_RT[8] - g_RT[54] + g_RT[55] - g_RT[65]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[55]) + (h_RT[54] + h_RT[65]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // C
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  wdot[65] += q; // CF
  // d()/d[C]
  dqdci = +k_f * sc[55];
  J[592] -= dqdci; // dwdot[C]/d[C]
  J[638] += dqdci; // dwdot[F]/d[C]
  J[639] -= dqdci; // dwdot[F2]/d[C]
  J[649] += dqdci; // dwdot[CF]/d[C]
  // d()/d[F]
  dqdci = -k_r * sc[65];
  J[3950] -= dqdci; // dwdot[C]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  J[4007] += dqdci; // dwdot[CF]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[8];
  J[4023] -= dqdci; // dwdot[C]/d[F2]
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  J[4080] += dqdci; // dwdot[CF]/d[F2]
  // d()/d[CF]
  dqdci = -k_r * sc[54];
  J[4753] -= dqdci; // dwdot[C]/d[CF]
  J[4799] += dqdci; // dwdot[F]/d[CF]
  J[4800] -= dqdci; // dwdot[F2]/d[CF]
  J[4810] += dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5264] -= dqdT; // dwdot[C]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT
  J[5321] += dqdT; // dwdot[CF]/dT

  // reaction 511: CF + F2 <=> CF2 + F
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[55] * sc[65];
  k_f = 2400000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[54] * sc[64];
  Kc = exp(-g_RT[54] + g_RT[55] - g_RT[64] + g_RT[65]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[55] + h_RT[65]) + (h_RT[54] + h_RT[64]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  wdot[64] += q; // CF2
  wdot[65] -= q; // CF
  // d()/d[F]
  dqdci = -k_r * sc[64];
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  J[4006] += dqdci; // dwdot[CF2]/d[F]
  J[4007] -= dqdci; // dwdot[CF]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[65];
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  J[4079] += dqdci; // dwdot[CF2]/d[F2]
  J[4080] -= dqdci; // dwdot[CF]/d[F2]
  // d()/d[CF2]
  dqdci = -k_r * sc[54];
  J[4726] += dqdci; // dwdot[F]/d[CF2]
  J[4727] -= dqdci; // dwdot[F2]/d[CF2]
  J[4736] += dqdci; // dwdot[CF2]/d[CF2]
  J[4737] -= dqdci; // dwdot[CF]/d[CF2]
  // d()/d[CF]
  dqdci = +k_f * sc[55];
  J[4799] += dqdci; // dwdot[F]/d[CF]
  J[4800] -= dqdci; // dwdot[F2]/d[CF]
  J[4809] += dqdci; // dwdot[CF2]/d[CF]
  J[4810] -= dqdci; // dwdot[CF]/d[CF]
  // d()/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT
  J[5320] += dqdT; // dwdot[CF2]/dT
  J[5321] -= dqdT; // dwdot[CF]/dT

  // reaction 512: CH4 + F2 <=> CH3 + F + HF
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[55];
  k_f = 2000000 * exp(-(5651.123156987) * invT);
  dlnkfdT = (5651.123156987) * invT2;
  // reverse
  phi_r = sc[12] * sc[53] * sc[54];
  Kc = refC * exp(-g_RT[12] + g_RT[13] - g_RT[53] - g_RT[54] + g_RT[55]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[55]) + (h_RT[12] + h_RT[53] + h_RT[54]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // CH3
  wdot[13] -= q; // CH4
  wdot[53] += q; // HF
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  // d()/d[CH3]
  dqdci = -k_r * sc[53] * sc[54];
  J[888] += dqdci; // dwdot[CH3]/d[CH3]
  J[889] -= dqdci; // dwdot[CH4]/d[CH3]
  J[929] += dqdci; // dwdot[HF]/d[CH3]
  J[930] += dqdci; // dwdot[F]/d[CH3]
  J[931] -= dqdci; // dwdot[F2]/d[CH3]
  // d()/d[CH4]
  dqdci = +k_f * sc[55];
  J[961] += dqdci;  // dwdot[CH3]/d[CH4]
  J[962] -= dqdci;  // dwdot[CH4]/d[CH4]
  J[1002] += dqdci; // dwdot[HF]/d[CH4]
  J[1003] += dqdci; // dwdot[F]/d[CH4]
  J[1004] -= dqdci; // dwdot[F2]/d[CH4]
  // d()/d[HF]
  dqdci = -k_r * sc[12] * sc[54];
  J[3881] += dqdci; // dwdot[CH3]/d[HF]
  J[3882] -= dqdci; // dwdot[CH4]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] += dqdci; // dwdot[F]/d[HF]
  J[3924] -= dqdci; // dwdot[F2]/d[HF]
  // d()/d[F]
  dqdci = -k_r * sc[12] * sc[53];
  J[3954] += dqdci; // dwdot[CH3]/d[F]
  J[3955] -= dqdci; // dwdot[CH4]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[13];
  J[4027] += dqdci; // dwdot[CH3]/d[F2]
  J[4028] -= dqdci; // dwdot[CH4]/d[F2]
  J[4068] += dqdci; // dwdot[HF]/d[F2]
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  // d()/dT
  J[5268] += dqdT; // dwdot[CH3]/dT
  J[5269] -= dqdT; // dwdot[CH4]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT

  // reaction 513: F2 + OH <=> F + HF + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[55];
  k_f = 70000000 * exp(-(4528.94999224248) * invT);
  dlnkfdT = (4528.94999224248) * invT2;
  // reverse
  phi_r = sc[2] * sc[53] * sc[54];
  Kc = refC * exp(-g_RT[2] + g_RT[4] - g_RT[53] - g_RT[54] + g_RT[55]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[4] + h_RT[55]) + (h_RT[2] + h_RT[53] + h_RT[54]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // O
  wdot[4] -= q;  // OH
  wdot[53] += q; // HF
  wdot[54] += q; // F
  wdot[55] -= q; // F2
  // d()/d[O]
  dqdci = -k_r * sc[53] * sc[54];
  J[148] += dqdci; // dwdot[O]/d[O]
  J[150] -= dqdci; // dwdot[OH]/d[O]
  J[199] += dqdci; // dwdot[HF]/d[O]
  J[200] += dqdci; // dwdot[F]/d[O]
  J[201] -= dqdci; // dwdot[F2]/d[O]
  // d()/d[OH]
  dqdci = +k_f * sc[55];
  J[294] += dqdci; // dwdot[O]/d[OH]
  J[296] -= dqdci; // dwdot[OH]/d[OH]
  J[345] += dqdci; // dwdot[HF]/d[OH]
  J[346] += dqdci; // dwdot[F]/d[OH]
  J[347] -= dqdci; // dwdot[F2]/d[OH]
  // d()/d[HF]
  dqdci = -k_r * sc[2] * sc[54];
  J[3871] += dqdci; // dwdot[O]/d[HF]
  J[3873] -= dqdci; // dwdot[OH]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] += dqdci; // dwdot[F]/d[HF]
  J[3924] -= dqdci; // dwdot[F2]/d[HF]
  // d()/d[F]
  dqdci = -k_r * sc[2] * sc[53];
  J[3944] += dqdci; // dwdot[O]/d[F]
  J[3946] -= dqdci; // dwdot[OH]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] += dqdci; // dwdot[F]/d[F]
  J[3997] -= dqdci; // dwdot[F2]/d[F]
  // d()/d[F2]
  dqdci = +k_f * sc[4];
  J[4017] += dqdci; // dwdot[O]/d[F2]
  J[4019] -= dqdci; // dwdot[OH]/d[F2]
  J[4068] += dqdci; // dwdot[HF]/d[F2]
  J[4069] += dqdci; // dwdot[F]/d[F2]
  J[4070] -= dqdci; // dwdot[F2]/d[F2]
  // d()/dT
  J[5258] += dqdT; // dwdot[O]/dT
  J[5260] -= dqdT; // dwdot[OH]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] += dqdT; // dwdot[F]/dT
  J[5311] -= dqdT; // dwdot[F2]/dT

  // reaction 514: C3H8 + F <=> HF + nC3H7
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[50] * sc[54];
  k_f = 35000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[53] * sc[71];
  Kc = exp(g_RT[50] - g_RT[53] + g_RT[54] - g_RT[71]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[50] + h_RT[54]) + (h_RT[53] + h_RT[71]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[50] -= q; // C3H8
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  wdot[71] += q; // nC3H7
  // d()/d[C3H8]
  dqdci = +k_f * sc[54];
  J[3700] -= dqdci; // dwdot[C3H8]/d[C3H8]
  J[3703] += dqdci; // dwdot[HF]/d[C3H8]
  J[3704] -= dqdci; // dwdot[F]/d[C3H8]
  J[3721] += dqdci; // dwdot[nC3H7]/d[C3H8]
  // d()/d[HF]
  dqdci = -k_r * sc[71];
  J[3919] -= dqdci; // dwdot[C3H8]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  J[3940] += dqdci; // dwdot[nC3H7]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[50];
  J[3992] -= dqdci; // dwdot[C3H8]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[4013] += dqdci; // dwdot[nC3H7]/d[F]
  // d()/d[nC3H7]
  dqdci = -k_r * sc[53];
  J[5233] -= dqdci; // dwdot[C3H8]/d[nC3H7]
  J[5236] += dqdci; // dwdot[HF]/d[nC3H7]
  J[5237] -= dqdci; // dwdot[F]/d[nC3H7]
  J[5254] += dqdci; // dwdot[nC3H7]/d[nC3H7]
  // d()/dT
  J[5306] -= dqdT; // dwdot[C3H8]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5327] += dqdT; // dwdot[nC3H7]/dT

  // reaction 515: C3H8 + F <=> HF + iC3H7
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[50] * sc[54];
  k_f = 41000000;
  dlnkfdT = 0.0;
  // reverse
  phi_r = sc[53] * sc[70];
  Kc = exp(g_RT[50] - g_RT[53] + g_RT[54] - g_RT[70]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[50] + h_RT[54]) + (h_RT[53] + h_RT[70]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[50] -= q; // C3H8
  wdot[53] += q; // HF
  wdot[54] -= q; // F
  wdot[70] += q; // iC3H7
  // d()/d[C3H8]
  dqdci = +k_f * sc[54];
  J[3700] -= dqdci; // dwdot[C3H8]/d[C3H8]
  J[3703] += dqdci; // dwdot[HF]/d[C3H8]
  J[3704] -= dqdci; // dwdot[F]/d[C3H8]
  J[3720] += dqdci; // dwdot[iC3H7]/d[C3H8]
  // d()/d[HF]
  dqdci = -k_r * sc[70];
  J[3919] -= dqdci; // dwdot[C3H8]/d[HF]
  J[3922] += dqdci; // dwdot[HF]/d[HF]
  J[3923] -= dqdci; // dwdot[F]/d[HF]
  J[3939] += dqdci; // dwdot[iC3H7]/d[HF]
  // d()/d[F]
  dqdci = +k_f * sc[50];
  J[3992] -= dqdci; // dwdot[C3H8]/d[F]
  J[3995] += dqdci; // dwdot[HF]/d[F]
  J[3996] -= dqdci; // dwdot[F]/d[F]
  J[4012] += dqdci; // dwdot[iC3H7]/d[F]
  // d()/d[iC3H7]
  dqdci = -k_r * sc[53];
  J[5160] -= dqdci; // dwdot[C3H8]/d[iC3H7]
  J[5163] += dqdci; // dwdot[HF]/d[iC3H7]
  J[5164] -= dqdci; // dwdot[F]/d[iC3H7]
  J[5180] += dqdci; // dwdot[iC3H7]/d[iC3H7]
  // d()/dT
  J[5306] -= dqdT; // dwdot[C3H8]/dT
  J[5309] += dqdT; // dwdot[HF]/dT
  J[5310] -= dqdT; // dwdot[F]/dT
  J[5326] += dqdT; // dwdot[iC3H7]/dT

  // reaction 516: C3H8 + CF3 <=> CHF3 + nC3H7
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[50] * sc[62];
  k_f = 540000 * exp(-(4297.47032597231) * invT);
  dlnkfdT = (4297.47032597231) * invT2;
  // reverse
  phi_r = sc[58] * sc[71];
  Kc = exp(g_RT[50] - g_RT[58] + g_RT[62] - g_RT[71]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[50] + h_RT[62]) + (h_RT[58] + h_RT[71]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[50] -= q; // C3H8
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  wdot[71] += q; // nC3H7
  // d()/d[C3H8]
  dqdci = +k_f * sc[62];
  J[3700] -= dqdci; // dwdot[C3H8]/d[C3H8]
  J[3708] += dqdci; // dwdot[CHF3]/d[C3H8]
  J[3712] -= dqdci; // dwdot[CF3]/d[C3H8]
  J[3721] += dqdci; // dwdot[nC3H7]/d[C3H8]
  // d()/d[CHF3]
  dqdci = -k_r * sc[71];
  J[4284] -= dqdci; // dwdot[C3H8]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  J[4305] += dqdci; // dwdot[nC3H7]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[50];
  J[4576] -= dqdci; // dwdot[C3H8]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  J[4597] += dqdci; // dwdot[nC3H7]/d[CF3]
  // d()/d[nC3H7]
  dqdci = -k_r * sc[58];
  J[5233] -= dqdci; // dwdot[C3H8]/d[nC3H7]
  J[5241] += dqdci; // dwdot[CHF3]/d[nC3H7]
  J[5245] -= dqdci; // dwdot[CF3]/d[nC3H7]
  J[5254] += dqdci; // dwdot[nC3H7]/d[nC3H7]
  // d()/dT
  J[5306] -= dqdT; // dwdot[C3H8]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5327] += dqdT; // dwdot[nC3H7]/dT

  // reaction 517: C3H8 + CF3 <=> CHF3 + iC3H7
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[50] * sc[62];
  k_f = 180000 * exp(-(3280.97266104677) * invT);
  dlnkfdT = (3280.97266104677) * invT2;
  // reverse
  phi_r = sc[58] * sc[70];
  Kc = exp(g_RT[50] - g_RT[58] + g_RT[62] - g_RT[70]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[50] + h_RT[62]) + (h_RT[58] + h_RT[70]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[50] -= q; // C3H8
  wdot[58] += q; // CHF3
  wdot[62] -= q; // CF3
  wdot[70] += q; // iC3H7
  // d()/d[C3H8]
  dqdci = +k_f * sc[62];
  J[3700] -= dqdci; // dwdot[C3H8]/d[C3H8]
  J[3708] += dqdci; // dwdot[CHF3]/d[C3H8]
  J[3712] -= dqdci; // dwdot[CF3]/d[C3H8]
  J[3720] += dqdci; // dwdot[iC3H7]/d[C3H8]
  // d()/d[CHF3]
  dqdci = -k_r * sc[70];
  J[4284] -= dqdci; // dwdot[C3H8]/d[CHF3]
  J[4292] += dqdci; // dwdot[CHF3]/d[CHF3]
  J[4296] -= dqdci; // dwdot[CF3]/d[CHF3]
  J[4304] += dqdci; // dwdot[iC3H7]/d[CHF3]
  // d()/d[CF3]
  dqdci = +k_f * sc[50];
  J[4576] -= dqdci; // dwdot[C3H8]/d[CF3]
  J[4584] += dqdci; // dwdot[CHF3]/d[CF3]
  J[4588] -= dqdci; // dwdot[CF3]/d[CF3]
  J[4596] += dqdci; // dwdot[iC3H7]/d[CF3]
  // d()/d[iC3H7]
  dqdci = -k_r * sc[58];
  J[5160] -= dqdci; // dwdot[C3H8]/d[iC3H7]
  J[5168] += dqdci; // dwdot[CHF3]/d[iC3H7]
  J[5172] -= dqdci; // dwdot[CF3]/d[iC3H7]
  J[5180] += dqdci; // dwdot[iC3H7]/d[iC3H7]
  // d()/dT
  J[5306] -= dqdT; // dwdot[C3H8]/dT
  J[5314] += dqdT; // dwdot[CHF3]/dT
  J[5318] -= dqdT; // dwdot[CF3]/dT
  J[5326] += dqdT; // dwdot[iC3H7]/dT

  amrex::Real c_R[72], dcRdT[72], e_RT[72];
  amrex::Real* eh_RT;
  if (consP == 1) {
    cp_R(c_R, T);
    dcvpRdT(dcRdT, T);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, T);
    dcvpRdT(dcRdT, T);
    speciesInternalEnergy(e_RT, T);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 72; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[5256 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 72; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 72; ++m) {
      dehmixdc += eh_RT[m] * J[k * 73 + m];
    }
    J[k * 73 + 72] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[5328] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
#else
  amrex::Abort();
#endif
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT(
  amrex::Real* J,
  const amrex::Real* sc,
  const amrex::Real* Tp,
  const int* consP)
{
  amrex::Real c[72];

  for (int k = 0; k < 72; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian(J, c, *Tp, *consP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 72; k++) {
    J[5256 + k] *= 1.e-6;
    J[k * 73 + 72] *= 1.e6;
  }
}

// Transport function declarations

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENIMC(int* LENIMC)
{
  *LENIMC = 290;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENRMC(int* LENRMC)
{
  *LENRMC = 101016;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNO(int* NO)
{
  *NO = 4;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKK(int* KK)
{
  *KK = 72;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLITE(int* NLITE)
{
  *NLITE = 2;
}

// Patm in ergs/cm3
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPATM(amrex::Real* PATM)
{
  *PATM = 0.1013250000000000E+07;
}

// the molecular weights in g/mol
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetWT(amrex::Real* WT)
{
  WT[0] = 2.01600000E+00;
  WT[1] = 1.00800000E+00;
  WT[2] = 1.59990000E+01;
  WT[3] = 3.19980000E+01;
  WT[4] = 1.70070000E+01;
  WT[5] = 1.80150000E+01;
  WT[6] = 3.30060000E+01;
  WT[7] = 3.40140000E+01;
  WT[8] = 1.20110000E+01;
  WT[9] = 1.30190000E+01;
  WT[10] = 1.40270000E+01;
  WT[11] = 1.40270000E+01;
  WT[12] = 1.50350000E+01;
  WT[13] = 1.60430000E+01;
  WT[14] = 2.80100000E+01;
  WT[15] = 4.40090000E+01;
  WT[16] = 2.90180000E+01;
  WT[17] = 3.00260000E+01;
  WT[18] = 3.10340000E+01;
  WT[19] = 3.10340000E+01;
  WT[20] = 3.20420000E+01;
  WT[21] = 2.50300000E+01;
  WT[22] = 2.60380000E+01;
  WT[23] = 2.70460000E+01;
  WT[24] = 2.80540000E+01;
  WT[25] = 2.90620000E+01;
  WT[26] = 3.00700000E+01;
  WT[27] = 4.10290000E+01;
  WT[28] = 4.20370000E+01;
  WT[29] = 4.20370000E+01;
  WT[30] = 1.40070000E+01;
  WT[31] = 1.50150000E+01;
  WT[32] = 1.60230000E+01;
  WT[33] = 1.70310000E+01;
  WT[34] = 2.90220000E+01;
  WT[35] = 3.00060000E+01;
  WT[36] = 4.60050000E+01;
  WT[37] = 4.40130000E+01;
  WT[38] = 3.10140000E+01;
  WT[39] = 2.60180000E+01;
  WT[40] = 2.70260000E+01;
  WT[41] = 2.80340000E+01;
  WT[42] = 4.10330000E+01;
  WT[43] = 4.30250000E+01;
  WT[44] = 4.30250000E+01;
  WT[45] = 4.30250000E+01;
  WT[46] = 4.20170000E+01;
  WT[47] = 2.80140000E+01;
  WT[48] = 3.99500000E+01;
  WT[49] = 4.30890000E+01;
  WT[50] = 4.40970000E+01;
  WT[51] = 4.30450000E+01;
  WT[52] = 4.40530000E+01;
  WT[53] = 2.00064032E+01;
  WT[54] = 1.89984032E+01;
  WT[55] = 3.79968063E+01;
  WT[56] = 3.40334032E+01;
  WT[57] = 5.20238063E+01;
  WT[58] = 7.00142095E+01;
  WT[59] = 8.80046127E+01;
  WT[60] = 3.30254032E+01;
  WT[61] = 5.10158063E+01;
  WT[62] = 6.90062095E+01;
  WT[63] = 3.20174032E+01;
  WT[64] = 5.00078063E+01;
  WT[65] = 3.10094032E+01;
  WT[66] = 8.50052095E+01;
  WT[67] = 6.60068063E+01;
  WT[68] = 4.80164032E+01;
  WT[69] = 4.70084032E+01;
  WT[70] = 4.30890000E+01;
  WT[71] = 4.30890000E+01;
}

// the lennard-jones potential well depth eps/kb in K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetEPS(amrex::Real* EPS)
{
  EPS[0] = 3.80000000E+01;
  EPS[1] = 1.45000000E+02;
  EPS[2] = 8.00000000E+01;
  EPS[3] = 1.07400000E+02;
  EPS[4] = 8.00000000E+01;
  EPS[5] = 5.72400000E+02;
  EPS[6] = 1.07400000E+02;
  EPS[7] = 1.07400000E+02;
  EPS[8] = 7.14000000E+01;
  EPS[9] = 8.00000000E+01;
  EPS[10] = 1.44000000E+02;
  EPS[11] = 1.44000000E+02;
  EPS[12] = 1.44000000E+02;
  EPS[13] = 1.41400000E+02;
  EPS[14] = 9.81000000E+01;
  EPS[15] = 2.44000000E+02;
  EPS[16] = 4.98000000E+02;
  EPS[17] = 4.98000000E+02;
  EPS[18] = 4.17000000E+02;
  EPS[19] = 4.17000000E+02;
  EPS[20] = 4.81800000E+02;
  EPS[21] = 2.09000000E+02;
  EPS[22] = 2.09000000E+02;
  EPS[23] = 2.09000000E+02;
  EPS[24] = 2.80800000E+02;
  EPS[25] = 2.52300000E+02;
  EPS[26] = 2.52300000E+02;
  EPS[27] = 1.50000000E+02;
  EPS[28] = 4.36000000E+02;
  EPS[29] = 4.36000000E+02;
  EPS[30] = 7.14000000E+01;
  EPS[31] = 8.00000000E+01;
  EPS[32] = 8.00000000E+01;
  EPS[33] = 4.81000000E+02;
  EPS[34] = 7.14000000E+01;
  EPS[35] = 9.75300000E+01;
  EPS[36] = 2.00000000E+02;
  EPS[37] = 2.32400000E+02;
  EPS[38] = 1.16700000E+02;
  EPS[39] = 7.50000000E+01;
  EPS[40] = 5.69000000E+02;
  EPS[41] = 5.69000000E+02;
  EPS[42] = 1.50000000E+02;
  EPS[43] = 2.32400000E+02;
  EPS[44] = 2.32400000E+02;
  EPS[45] = 2.32400000E+02;
  EPS[46] = 2.32400000E+02;
  EPS[47] = 9.75300000E+01;
  EPS[48] = 1.36500000E+02;
  EPS[49] = 2.66800000E+02;
  EPS[50] = 2.66800000E+02;
  EPS[51] = 4.36000000E+02;
  EPS[52] = 4.36000000E+02;
  EPS[53] = 3.30000000E+02;
  EPS[54] = 8.00000000E+01;
  EPS[55] = 1.25700000E+02;
  EPS[56] = 2.62000000E+02;
  EPS[57] = 2.62000000E+02;
  EPS[58] = 2.62000000E+02;
  EPS[59] = 1.34000000E+02;
  EPS[60] = 2.62000000E+02;
  EPS[61] = 2.62000000E+02;
  EPS[62] = 1.21000000E+02;
  EPS[63] = 2.62000000E+02;
  EPS[64] = 1.08000000E+02;
  EPS[65] = 9.42000000E+01;
  EPS[66] = 3.50500000E+02;
  EPS[67] = 3.50500000E+02;
  EPS[68] = 3.50500000E+02;
  EPS[69] = 8.60000000E+02;
  EPS[70] = 2.66800000E+02;
  EPS[71] = 2.66800000E+02;
}

// the lennard-jones collision diameter in Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetSIG(amrex::Real* SIG)
{
  SIG[0] = 2.92000000E+00;
  SIG[1] = 2.05000000E+00;
  SIG[2] = 2.75000000E+00;
  SIG[3] = 3.45800000E+00;
  SIG[4] = 2.75000000E+00;
  SIG[5] = 2.60500000E+00;
  SIG[6] = 3.45800000E+00;
  SIG[7] = 3.45800000E+00;
  SIG[8] = 3.29800000E+00;
  SIG[9] = 2.75000000E+00;
  SIG[10] = 3.80000000E+00;
  SIG[11] = 3.80000000E+00;
  SIG[12] = 3.80000000E+00;
  SIG[13] = 3.74600000E+00;
  SIG[14] = 3.65000000E+00;
  SIG[15] = 3.76300000E+00;
  SIG[16] = 3.59000000E+00;
  SIG[17] = 3.59000000E+00;
  SIG[18] = 3.69000000E+00;
  SIG[19] = 3.69000000E+00;
  SIG[20] = 3.62600000E+00;
  SIG[21] = 4.10000000E+00;
  SIG[22] = 4.10000000E+00;
  SIG[23] = 4.10000000E+00;
  SIG[24] = 3.97100000E+00;
  SIG[25] = 4.30200000E+00;
  SIG[26] = 4.30200000E+00;
  SIG[27] = 2.50000000E+00;
  SIG[28] = 3.97000000E+00;
  SIG[29] = 3.97000000E+00;
  SIG[30] = 3.29800000E+00;
  SIG[31] = 2.65000000E+00;
  SIG[32] = 2.65000000E+00;
  SIG[33] = 2.92000000E+00;
  SIG[34] = 3.79800000E+00;
  SIG[35] = 3.62100000E+00;
  SIG[36] = 3.50000000E+00;
  SIG[37] = 3.82800000E+00;
  SIG[38] = 3.49200000E+00;
  SIG[39] = 3.85600000E+00;
  SIG[40] = 3.63000000E+00;
  SIG[41] = 3.63000000E+00;
  SIG[42] = 2.50000000E+00;
  SIG[43] = 3.82800000E+00;
  SIG[44] = 3.82800000E+00;
  SIG[45] = 3.82800000E+00;
  SIG[46] = 3.82800000E+00;
  SIG[47] = 3.62100000E+00;
  SIG[48] = 3.33000000E+00;
  SIG[49] = 4.98200000E+00;
  SIG[50] = 4.98200000E+00;
  SIG[51] = 3.97000000E+00;
  SIG[52] = 3.97000000E+00;
  SIG[53] = 3.14800000E+00;
  SIG[54] = 2.75000000E+00;
  SIG[55] = 3.30100000E+00;
  SIG[56] = 4.12300000E+00;
  SIG[57] = 4.12300000E+00;
  SIG[58] = 4.12300000E+00;
  SIG[59] = 4.66200000E+00;
  SIG[60] = 4.12300000E+00;
  SIG[61] = 4.12300000E+00;
  SIG[62] = 4.32000000E+00;
  SIG[63] = 4.12300000E+00;
  SIG[64] = 3.97700000E+00;
  SIG[65] = 3.63500000E+00;
  SIG[66] = 4.90600000E+00;
  SIG[67] = 4.90600000E+00;
  SIG[68] = 4.90600000E+00;
  SIG[69] = 4.00000000E+00;
  SIG[70] = 4.98200000E+00;
  SIG[71] = 4.98200000E+00;
}

// the dipole moment in Debye
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetDIP(amrex::Real* DIP)
{
  DIP[0] = 0.00000000E+00;
  DIP[1] = 0.00000000E+00;
  DIP[2] = 0.00000000E+00;
  DIP[3] = 0.00000000E+00;
  DIP[4] = 0.00000000E+00;
  DIP[5] = 1.84400000E+00;
  DIP[6] = 0.00000000E+00;
  DIP[7] = 0.00000000E+00;
  DIP[8] = 0.00000000E+00;
  DIP[9] = 0.00000000E+00;
  DIP[10] = 0.00000000E+00;
  DIP[11] = 0.00000000E+00;
  DIP[12] = 0.00000000E+00;
  DIP[13] = 0.00000000E+00;
  DIP[14] = 0.00000000E+00;
  DIP[15] = 0.00000000E+00;
  DIP[16] = 0.00000000E+00;
  DIP[17] = 0.00000000E+00;
  DIP[18] = 1.70000000E+00;
  DIP[19] = 1.70000000E+00;
  DIP[20] = 0.00000000E+00;
  DIP[21] = 0.00000000E+00;
  DIP[22] = 0.00000000E+00;
  DIP[23] = 0.00000000E+00;
  DIP[24] = 0.00000000E+00;
  DIP[25] = 0.00000000E+00;
  DIP[26] = 0.00000000E+00;
  DIP[27] = 0.00000000E+00;
  DIP[28] = 0.00000000E+00;
  DIP[29] = 0.00000000E+00;
  DIP[30] = 0.00000000E+00;
  DIP[31] = 0.00000000E+00;
  DIP[32] = 0.00000000E+00;
  DIP[33] = 1.47000000E+00;
  DIP[34] = 0.00000000E+00;
  DIP[35] = 0.00000000E+00;
  DIP[36] = 0.00000000E+00;
  DIP[37] = 0.00000000E+00;
  DIP[38] = 0.00000000E+00;
  DIP[39] = 0.00000000E+00;
  DIP[40] = 0.00000000E+00;
  DIP[41] = 0.00000000E+00;
  DIP[42] = 0.00000000E+00;
  DIP[43] = 0.00000000E+00;
  DIP[44] = 0.00000000E+00;
  DIP[45] = 0.00000000E+00;
  DIP[46] = 0.00000000E+00;
  DIP[47] = 0.00000000E+00;
  DIP[48] = 0.00000000E+00;
  DIP[49] = 0.00000000E+00;
  DIP[50] = 0.00000000E+00;
  DIP[51] = 0.00000000E+00;
  DIP[52] = 0.00000000E+00;
  DIP[53] = 1.92000000E+00;
  DIP[54] = 0.00000000E+00;
  DIP[55] = 0.00000000E+00;
  DIP[56] = 1.80000000E+00;
  DIP[57] = 1.80000000E+00;
  DIP[58] = 1.80000000E+00;
  DIP[59] = 0.00000000E+00;
  DIP[60] = 1.80000000E+00;
  DIP[61] = 1.80000000E+00;
  DIP[62] = 0.00000000E+00;
  DIP[63] = 1.80000000E+00;
  DIP[64] = 0.00000000E+00;
  DIP[65] = 0.00000000E+00;
  DIP[66] = 0.00000000E+00;
  DIP[67] = 0.00000000E+00;
  DIP[68] = 0.00000000E+00;
  DIP[69] = 0.00000000E+00;
  DIP[70] = 0.00000000E+00;
  DIP[71] = 0.00000000E+00;
}

// the polarizability in cubic Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPOL(amrex::Real* POL)
{
  POL[0] = 7.90000000E-01;
  POL[1] = 0.00000000E+00;
  POL[2] = 0.00000000E+00;
  POL[3] = 1.60000000E+00;
  POL[4] = 0.00000000E+00;
  POL[5] = 0.00000000E+00;
  POL[6] = 0.00000000E+00;
  POL[7] = 0.00000000E+00;
  POL[8] = 0.00000000E+00;
  POL[9] = 0.00000000E+00;
  POL[10] = 0.00000000E+00;
  POL[11] = 0.00000000E+00;
  POL[12] = 0.00000000E+00;
  POL[13] = 2.60000000E+00;
  POL[14] = 1.95000000E+00;
  POL[15] = 2.65000000E+00;
  POL[16] = 0.00000000E+00;
  POL[17] = 0.00000000E+00;
  POL[18] = 0.00000000E+00;
  POL[19] = 0.00000000E+00;
  POL[20] = 0.00000000E+00;
  POL[21] = 0.00000000E+00;
  POL[22] = 0.00000000E+00;
  POL[23] = 0.00000000E+00;
  POL[24] = 0.00000000E+00;
  POL[25] = 0.00000000E+00;
  POL[26] = 0.00000000E+00;
  POL[27] = 0.00000000E+00;
  POL[28] = 0.00000000E+00;
  POL[29] = 0.00000000E+00;
  POL[30] = 0.00000000E+00;
  POL[31] = 0.00000000E+00;
  POL[32] = 2.26000000E+00;
  POL[33] = 0.00000000E+00;
  POL[34] = 0.00000000E+00;
  POL[35] = 1.76000000E+00;
  POL[36] = 0.00000000E+00;
  POL[37] = 0.00000000E+00;
  POL[38] = 0.00000000E+00;
  POL[39] = 0.00000000E+00;
  POL[40] = 0.00000000E+00;
  POL[41] = 0.00000000E+00;
  POL[42] = 0.00000000E+00;
  POL[43] = 0.00000000E+00;
  POL[44] = 0.00000000E+00;
  POL[45] = 0.00000000E+00;
  POL[46] = 0.00000000E+00;
  POL[47] = 1.76000000E+00;
  POL[48] = 0.00000000E+00;
  POL[49] = 0.00000000E+00;
  POL[50] = 0.00000000E+00;
  POL[51] = 0.00000000E+00;
  POL[52] = 0.00000000E+00;
  POL[53] = 2.46000000E+00;
  POL[54] = 0.00000000E+00;
  POL[55] = 1.60000000E+00;
  POL[56] = 0.00000000E+00;
  POL[57] = 0.00000000E+00;
  POL[58] = 0.00000000E+00;
  POL[59] = 0.00000000E+00;
  POL[60] = 0.00000000E+00;
  POL[61] = 0.00000000E+00;
  POL[62] = 0.00000000E+00;
  POL[63] = 0.00000000E+00;
  POL[64] = 0.00000000E+00;
  POL[65] = 0.00000000E+00;
  POL[66] = 0.00000000E+00;
  POL[67] = 0.00000000E+00;
  POL[68] = 0.00000000E+00;
  POL[69] = 0.00000000E+00;
  POL[70] = 0.00000000E+00;
  POL[71] = 0.00000000E+00;
}

// the rotational relaxation collision number at 298 K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetZROT(amrex::Real* ZROT)
{
  ZROT[0] = 2.80000000E+02;
  ZROT[1] = 0.00000000E+00;
  ZROT[2] = 0.00000000E+00;
  ZROT[3] = 3.80000000E+00;
  ZROT[4] = 0.00000000E+00;
  ZROT[5] = 4.00000000E+00;
  ZROT[6] = 1.00000000E+00;
  ZROT[7] = 3.80000000E+00;
  ZROT[8] = 0.00000000E+00;
  ZROT[9] = 0.00000000E+00;
  ZROT[10] = 0.00000000E+00;
  ZROT[11] = 0.00000000E+00;
  ZROT[12] = 0.00000000E+00;
  ZROT[13] = 1.30000000E+01;
  ZROT[14] = 1.80000000E+00;
  ZROT[15] = 2.10000000E+00;
  ZROT[16] = 0.00000000E+00;
  ZROT[17] = 2.00000000E+00;
  ZROT[18] = 2.00000000E+00;
  ZROT[19] = 2.00000000E+00;
  ZROT[20] = 1.00000000E+00;
  ZROT[21] = 2.50000000E+00;
  ZROT[22] = 2.50000000E+00;
  ZROT[23] = 1.00000000E+00;
  ZROT[24] = 1.50000000E+00;
  ZROT[25] = 1.50000000E+00;
  ZROT[26] = 1.50000000E+00;
  ZROT[27] = 1.00000000E+00;
  ZROT[28] = 2.00000000E+00;
  ZROT[29] = 2.00000000E+00;
  ZROT[30] = 0.00000000E+00;
  ZROT[31] = 4.00000000E+00;
  ZROT[32] = 4.00000000E+00;
  ZROT[33] = 1.00000000E+01;
  ZROT[34] = 1.00000000E+00;
  ZROT[35] = 4.00000000E+00;
  ZROT[36] = 1.00000000E+00;
  ZROT[37] = 1.00000000E+00;
  ZROT[38] = 1.00000000E+00;
  ZROT[39] = 1.00000000E+00;
  ZROT[40] = 1.00000000E+00;
  ZROT[41] = 1.00000000E+00;
  ZROT[42] = 1.00000000E+00;
  ZROT[43] = 1.00000000E+00;
  ZROT[44] = 1.00000000E+00;
  ZROT[45] = 1.00000000E+00;
  ZROT[46] = 1.00000000E+00;
  ZROT[47] = 4.00000000E+00;
  ZROT[48] = 0.00000000E+00;
  ZROT[49] = 1.00000000E+00;
  ZROT[50] = 1.00000000E+00;
  ZROT[51] = 2.00000000E+00;
  ZROT[52] = 2.00000000E+00;
  ZROT[53] = 1.00000000E+00;
  ZROT[54] = 0.00000000E+00;
  ZROT[55] = 3.80000000E+00;
  ZROT[56] = 0.00000000E+00;
  ZROT[57] = 0.00000000E+00;
  ZROT[58] = 0.00000000E+00;
  ZROT[59] = 0.00000000E+00;
  ZROT[60] = 0.00000000E+00;
  ZROT[61] = 0.00000000E+00;
  ZROT[62] = 0.00000000E+00;
  ZROT[63] = 0.00000000E+00;
  ZROT[64] = 0.00000000E+00;
  ZROT[65] = 0.00000000E+00;
  ZROT[66] = 0.00000000E+00;
  ZROT[67] = 0.00000000E+00;
  ZROT[68] = 0.00000000E+00;
  ZROT[69] = 0.00000000E+00;
  ZROT[70] = 1.00000000E+00;
  ZROT[71] = 1.00000000E+00;
}

// 0: monoatomic, 1: linear, 2: nonlinear
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLIN(int* NLIN)
{
  NLIN[0] = 1;
  NLIN[1] = 0;
  NLIN[2] = 0;
  NLIN[3] = 1;
  NLIN[4] = 1;
  NLIN[5] = 2;
  NLIN[6] = 2;
  NLIN[7] = 2;
  NLIN[8] = 0;
  NLIN[9] = 1;
  NLIN[10] = 1;
  NLIN[11] = 1;
  NLIN[12] = 1;
  NLIN[13] = 2;
  NLIN[14] = 1;
  NLIN[15] = 1;
  NLIN[16] = 2;
  NLIN[17] = 2;
  NLIN[18] = 2;
  NLIN[19] = 2;
  NLIN[20] = 2;
  NLIN[21] = 1;
  NLIN[22] = 1;
  NLIN[23] = 2;
  NLIN[24] = 2;
  NLIN[25] = 2;
  NLIN[26] = 2;
  NLIN[27] = 2;
  NLIN[28] = 2;
  NLIN[29] = 2;
  NLIN[30] = 0;
  NLIN[31] = 1;
  NLIN[32] = 2;
  NLIN[33] = 2;
  NLIN[34] = 2;
  NLIN[35] = 1;
  NLIN[36] = 2;
  NLIN[37] = 1;
  NLIN[38] = 2;
  NLIN[39] = 1;
  NLIN[40] = 1;
  NLIN[41] = 1;
  NLIN[42] = 2;
  NLIN[43] = 2;
  NLIN[44] = 2;
  NLIN[45] = 2;
  NLIN[46] = 1;
  NLIN[47] = 1;
  NLIN[48] = 0;
  NLIN[49] = 2;
  NLIN[50] = 2;
  NLIN[51] = 2;
  NLIN[52] = 2;
  NLIN[53] = 1;
  NLIN[54] = 0;
  NLIN[55] = 1;
  NLIN[56] = 2;
  NLIN[57] = 2;
  NLIN[58] = 2;
  NLIN[59] = 2;
  NLIN[60] = 2;
  NLIN[61] = 2;
  NLIN[62] = 2;
  NLIN[63] = 2;
  NLIN[64] = 2;
  NLIN[65] = 1;
  NLIN[66] = 2;
  NLIN[67] = 2;
  NLIN[68] = 2;
  NLIN[69] = 2;
  NLIN[70] = 2;
  NLIN[71] = 2;
}

// Poly fits for the viscosities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFETA(amrex::Real* COFETA)
{
  COFETA[0] = -1.41228032E+01;
  COFETA[1] = 1.12547274E+00;
  COFETA[2] = -6.76255034E-02;
  COFETA[3] = 3.16059742E-03;
  COFETA[4] = -2.12806331E+01;
  COFETA[5] = 4.03005747E+00;
  COFETA[6] = -4.51962353E-01;
  COFETA[7] = 2.01268811E-02;
  COFETA[8] = -1.60733596E+01;
  COFETA[9] = 2.34853449E+00;
  COFETA[10] = -2.33829873E-01;
  COFETA[11] = 1.06843433E-02;
  COFETA[12] = -1.82581805E+01;
  COFETA[13] = 3.15294008E+00;
  COFETA[14] = -3.40106313E-01;
  COFETA[15] = 1.53659864E-02;
  COFETA[16] = -1.60428102E+01;
  COFETA[17] = 2.34853449E+00;
  COFETA[18] = -2.33829873E-01;
  COFETA[19] = 1.06843433E-02;
  COFETA[20] = -1.07110032E+01;
  COFETA[21] = -1.30573340E+00;
  COFETA[22] = 4.10294496E-01;
  COFETA[23] = -2.35821838E-02;
  COFETA[24] = -1.82426726E+01;
  COFETA[25] = 3.15294008E+00;
  COFETA[26] = -3.40106313E-01;
  COFETA[27] = 1.53659864E-02;
  COFETA[28] = -1.82276311E+01;
  COFETA[29] = 3.15294008E+00;
  COFETA[30] = -3.40106313E-01;
  COFETA[31] = 1.53659864E-02;
  COFETA[32] = -1.59462106E+01;
  COFETA[33] = 2.10116438E+00;
  COFETA[34] = -2.00797956E-01;
  COFETA[35] = 9.21449230E-03;
  COFETA[36] = -1.61764178E+01;
  COFETA[37] = 2.34853449E+00;
  COFETA[38] = -2.33829873E-01;
  COFETA[39] = 1.06843433E-02;
  COFETA[40] = -2.11356259E+01;
  COFETA[41] = 4.00655536E+00;
  COFETA[42] = -4.48976926E-01;
  COFETA[43] = 2.00001793E-02;
  COFETA[44] = -2.11356259E+01;
  COFETA[45] = 4.00655536E+00;
  COFETA[46] = -4.48976926E-01;
  COFETA[47] = 2.00001793E-02;
  COFETA[48] = -2.11009275E+01;
  COFETA[49] = 4.00655536E+00;
  COFETA[50] = -4.48976926E-01;
  COFETA[51] = 2.00001793E-02;
  COFETA[52] = -2.08870756E+01;
  COFETA[53] = 3.94981427E+00;
  COFETA[54] = -4.41813926E-01;
  COFETA[55] = 1.96981379E-02;
  COFETA[56] = -1.77861440E+01;
  COFETA[57] = 2.90561838E+00;
  COFETA[58] = -3.07906390E-01;
  COFETA[59] = 1.39681141E-02;
  COFETA[60] = -2.28437497E+01;
  COFETA[61] = 4.64319797E+00;
  COFETA[62] = -5.02579774E-01;
  COFETA[63] = 2.10881871E-02;
  COFETA[64] = -1.42447535E+01;
  COFETA[65] = 2.79762604E-01;
  COFETA[66] = 1.79110504E-01;
  COFETA[67] = -1.32000717E-02;
  COFETA[68] = -1.42276798E+01;
  COFETA[69] = 2.79762604E-01;
  COFETA[70] = 1.79110504E-01;
  COFETA[71] = -1.32000717E-02;
  COFETA[72] = -1.60228974E+01;
  COFETA[73] = 1.15840822E+00;
  COFETA[74] = 4.10242914E-02;
  COFETA[75] = -6.18453930E-03;
  COFETA[76] = -1.60228974E+01;
  COFETA[77] = 1.15840822E+00;
  COFETA[78] = 4.10242914E-02;
  COFETA[79] = -6.18453930E-03;
  COFETA[80] = -1.49853792E+01;
  COFETA[81] = 6.35905964E-01;
  COFETA[82] = 1.26337804E-01;
  COFETA[83] = -1.06518086E-02;
  COFETA[84] = -2.30860146E+01;
  COFETA[85] = 4.67262817E+00;
  COFETA[86] = -5.19458672E-01;
  COFETA[87] = 2.23721010E-02;
  COFETA[88] = -2.30662737E+01;
  COFETA[89] = 4.67262817E+00;
  COFETA[90] = -5.19458672E-01;
  COFETA[91] = 2.23721010E-02;
  COFETA[92] = -2.30472826E+01;
  COFETA[93] = 4.67262817E+00;
  COFETA[94] = -5.19458672E-01;
  COFETA[95] = 2.23721010E-02;
  COFETA[96] = -2.27669553E+01;
  COFETA[97] = 4.34821022E+00;
  COFETA[98] = -4.48162421E-01;
  COFETA[99] = 1.80516815E-02;
  COFETA[100] = -2.32623116E+01;
  COFETA[101] = 4.59151724E+00;
  COFETA[102] = -4.92356773E-01;
  COFETA[103] = 2.04968582E-02;
  COFETA[104] = -2.32452634E+01;
  COFETA[105] = 4.59151724E+00;
  COFETA[106] = -4.92356773E-01;
  COFETA[107] = 2.04968582E-02;
  COFETA[108] = -2.01132655E+01;
  COFETA[109] = 4.13689127E+00;
  COFETA[110] = -4.65383238E-01;
  COFETA[111] = 2.06898021E-02;
  COFETA[112] = -1.71626948E+01;
  COFETA[113] = 1.63361415E+00;
  COFETA[114] = -2.28526904E-02;
  COFETA[115] = -3.39289571E-03;
  COFETA[116] = -1.71626948E+01;
  COFETA[117] = 1.63361415E+00;
  COFETA[118] = -2.28526904E-02;
  COFETA[119] = -3.39289571E-03;
  COFETA[120] = -1.58693435E+01;
  COFETA[121] = 2.10116438E+00;
  COFETA[122] = -2.00797956E-01;
  COFETA[123] = 9.21449230E-03;
  COFETA[124] = -1.60310153E+01;
  COFETA[125] = 2.34853449E+00;
  COFETA[126] = -2.33829873E-01;
  COFETA[127] = 1.06843433E-02;
  COFETA[128] = -1.59985276E+01;
  COFETA[129] = 2.34853449E+00;
  COFETA[130] = -2.33829873E-01;
  COFETA[131] = 1.06843433E-02;
  COFETA[132] = -1.29219560E+01;
  COFETA[133] = -2.30919276E-01;
  COFETA[134] = 2.48013794E-01;
  COFETA[135] = -1.61395366E-02;
  COFETA[136] = -1.57874118E+01;
  COFETA[137] = 2.10116438E+00;
  COFETA[138] = -2.00797956E-01;
  COFETA[139] = 9.21449230E-03;
  COFETA[140] = -1.77038383E+01;
  COFETA[141] = 2.89373921E+00;
  COFETA[142] = -3.06394467E-01;
  COFETA[143] = 1.39040277E-02;
  COFETA[144] = -2.23332344E+01;
  COFETA[145] = 4.64768653E+00;
  COFETA[146] = -5.19267587E-01;
  COFETA[147] = 2.24932522E-02;
  COFETA[148] = -2.29102849E+01;
  COFETA[149] = 4.69644120E+00;
  COFETA[150] = -5.14303943E-01;
  COFETA[151] = 2.17998387E-02;
  COFETA[152] = -1.89636662E+01;
  COFETA[153] = 3.40942490E+00;
  COFETA[154] = -3.73456225E-01;
  COFETA[155] = 1.68128351E-02;
  COFETA[156] = -1.61575566E+01;
  COFETA[157] = 2.21351186E+00;
  COFETA[158] = -2.15925064E-01;
  COFETA[159] = 9.89312864E-03;
  COFETA[160] = -1.11734426E+01;
  COFETA[161] = -1.15487031E+00;
  COFETA[162] = 3.89894826E-01;
  COFETA[163] = -2.32926430E-02;
  COFETA[164] = -1.11551333E+01;
  COFETA[165] = -1.15487031E+00;
  COFETA[166] = 3.89894826E-01;
  COFETA[167] = -2.32926430E-02;
  COFETA[168] = -2.01132167E+01;
  COFETA[169] = 4.13689127E+00;
  COFETA[170] = -4.65383238E-01;
  COFETA[171] = 2.06898021E-02;
  COFETA[172] = -2.29216368E+01;
  COFETA[173] = 4.69644120E+00;
  COFETA[174] = -5.14303943E-01;
  COFETA[175] = 2.17998387E-02;
  COFETA[176] = -2.29216368E+01;
  COFETA[177] = 4.69644120E+00;
  COFETA[178] = -5.14303943E-01;
  COFETA[179] = 2.17998387E-02;
  COFETA[180] = -2.29216368E+01;
  COFETA[181] = 4.69644120E+00;
  COFETA[182] = -5.14303943E-01;
  COFETA[183] = 2.17998387E-02;
  COFETA[184] = -2.29334903E+01;
  COFETA[185] = 4.69644120E+00;
  COFETA[186] = -5.14303943E-01;
  COFETA[187] = 2.17998387E-02;
  COFETA[188] = -1.77381848E+01;
  COFETA[189] = 2.89373921E+00;
  COFETA[190] = -3.06394467E-01;
  COFETA[191] = 1.39040277E-02;
  COFETA[192] = -1.99347051E+01;
  COFETA[193] = 3.85438107E+00;
  COFETA[194] = -4.29926723E-01;
  COFETA[195] = 1.92040721E-02;
  COFETA[196] = -2.32752656E+01;
  COFETA[197] = 4.50956100E+00;
  COFETA[198] = -4.75908822E-01;
  COFETA[199] = 1.95408808E-02;
  COFETA[200] = -2.32637035E+01;
  COFETA[201] = 4.50956100E+00;
  COFETA[202] = -4.75908822E-01;
  COFETA[203] = 1.95408808E-02;
  COFETA[204] = -1.71508469E+01;
  COFETA[205] = 1.63361415E+00;
  COFETA[206] = -2.28526904E-02;
  COFETA[207] = -3.39289571E-03;
  COFETA[208] = -1.71392732E+01;
  COFETA[209] = 1.63361415E+00;
  COFETA[210] = -2.28526904E-02;
  COFETA[211] = -3.39289571E-03;
  COFETA[212] = -1.57699253E+01;
  COFETA[213] = 9.34718635E-01;
  COFETA[214] = 8.74692260E-02;
  COFETA[215] = -8.76293282E-03;
  COFETA[216] = -1.59874452E+01;
  COFETA[217] = 2.34853449E+00;
  COFETA[218] = -2.33829873E-01;
  COFETA[219] = 1.06843433E-02;
  COFETA[220] = -1.92854056E+01;
  COFETA[221] = 3.60975252E+00;
  COFETA[222] = -3.98957779E-01;
  COFETA[223] = 1.78956626E-02;
  COFETA[224] = -2.09087861E+01;
  COFETA[225] = 3.50309208E+00;
  COFETA[226] = -3.22336315E-01;
  COFETA[227] = 1.19505973E-02;
  COFETA[228] = -2.06966067E+01;
  COFETA[229] = 3.50309208E+00;
  COFETA[230] = -3.22336315E-01;
  COFETA[231] = 1.19505973E-02;
  COFETA[232] = -2.05481083E+01;
  COFETA[233] = 3.50309208E+00;
  COFETA[234] = -3.22336315E-01;
  COFETA[235] = 1.19505973E-02;
  COFETA[236] = -2.00695476E+01;
  COFETA[237] = 3.80130651E+00;
  COFETA[238] = -4.23234302E-01;
  COFETA[239] = 1.89222995E-02;
  COFETA[240] = -2.09238188E+01;
  COFETA[241] = 3.50309208E+00;
  COFETA[242] = -3.22336315E-01;
  COFETA[243] = 1.19505973E-02;
  COFETA[244] = -2.07063896E+01;
  COFETA[245] = 3.50309208E+00;
  COFETA[246] = -3.22336315E-01;
  COFETA[247] = 1.19505973E-02;
  COFETA[248] = -1.92688053E+01;
  COFETA[249] = 3.51562729E+00;
  COFETA[250] = -3.87187799E-01;
  COFETA[251] = 1.74054056E-02;
  COFETA[252] = -2.09393176E+01;
  COFETA[253] = 3.50309208E+00;
  COFETA[254] = -3.22336315E-01;
  COFETA[255] = 1.19505973E-02;
  COFETA[256] = -1.83575334E+01;
  COFETA[257] = 3.16928551E+00;
  COFETA[258] = -3.42221175E-01;
  COFETA[259] = 1.54572148E-02;
  COFETA[260] = -1.74871338E+01;
  COFETA[261] = 2.81494154E+00;
  COFETA[262] = -2.96195029E-01;
  COFETA[263] = 1.34639913E-02;
  COFETA[264] = -2.07911065E+01;
  COFETA[265] = 3.35692333E+00;
  COFETA[266] = -2.86836566E-01;
  COFETA[267] = 9.70063532E-03;
  COFETA[268] = -2.09175838E+01;
  COFETA[269] = 3.35692333E+00;
  COFETA[270] = -2.86836566E-01;
  COFETA[271] = 9.70063532E-03;
  COFETA[272] = -2.10766914E+01;
  COFETA[273] = 3.35692333E+00;
  COFETA[274] = -2.86836566E-01;
  COFETA[275] = 9.70063532E-03;
  COFETA[276] = -2.14449786E+00;
  COFETA[277] = -5.09839277E+00;
  COFETA[278] = 9.45551898E-01;
  COFETA[279] = -4.87719512E-02;
  COFETA[280] = -2.32752656E+01;
  COFETA[281] = 4.50956100E+00;
  COFETA[282] = -4.75908822E-01;
  COFETA[283] = 1.95408808E-02;
  COFETA[284] = -2.32752656E+01;
  COFETA[285] = 4.50956100E+00;
  COFETA[286] = -4.75908822E-01;
  COFETA[287] = 1.95408808E-02;
}

// Poly fits for the conductivities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFLAM(amrex::Real* COFLAM)
{
  COFLAM[0] = 1.96953187E+00;
  COFLAM[1] = 2.66047830E+00;
  COFLAM[2] = -3.30804186E-01;
  COFLAM[3] = 1.85429645E-02;
  COFLAM[4] = -1.73075242E+00;
  COFLAM[5] = 4.03005747E+00;
  COFLAM[6] = -4.51962353E-01;
  COFLAM[7] = 2.01268811E-02;
  COFLAM[8] = 7.11963049E-01;
  COFLAM[9] = 2.34853449E+00;
  COFLAM[10] = -2.33829873E-01;
  COFLAM[11] = 1.06843433E-02;
  COFLAM[12] = 1.66956014E+00;
  COFLAM[13] = 1.34013965E+00;
  COFLAM[14] = -4.99253940E-02;
  COFLAM[15] = 1.07236739E-03;
  COFLAM[16] = 7.48967668E+00;
  COFLAM[17] = -3.71446668E-01;
  COFLAM[18] = 1.23442539E-01;
  COFLAM[19] = -3.85519389E-03;
  COFLAM[20] = 1.77485501E+01;
  COFLAM[21] = -6.54385999E+00;
  COFLAM[22] = 1.18258450E+00;
  COFLAM[23] = -5.94850358E-02;
  COFLAM[24] = 2.93364105E+00;
  COFLAM[25] = 5.90704369E-01;
  COFLAM[26] = 8.65201915E-02;
  COFLAM[27] = -6.02438426E-03;
  COFLAM[28] = 3.38868553E+00;
  COFLAM[29] = 2.36844951E-01;
  COFLAM[30] = 1.73143004E-01;
  COFLAM[31] = -1.17075583E-02;
  COFLAM[32] = 1.12581532E+00;
  COFLAM[33] = 2.10116438E+00;
  COFLAM[34] = -2.00797956E-01;
  COFLAM[35] = 9.21449230E-03;
  COFLAM[36] = 1.14558412E+01;
  COFLAM[37] = -2.21391921E+00;
  COFLAM[38] = 4.07259281E-01;
  COFLAM[39] = -1.77985603E-02;
  COFLAM[40] = 7.80456280E+00;
  COFLAM[41] = -1.53553597E+00;
  COFLAM[42] = 4.01424783E-01;
  COFLAM[43] = -2.14947370E-02;
  COFLAM[44] = 1.48337129E+01;
  COFLAM[45] = -4.74030687E+00;
  COFLAM[46] = 8.79901633E-01;
  COFLAM[47] = -4.49643030E-02;
  COFLAM[48] = 1.15047117E+01;
  COFLAM[49] = -3.56956462E+00;
  COFLAM[50] = 7.54369757E-01;
  COFLAM[51] = -4.04580441E-02;
  COFLAM[52] = 2.16425527E+01;
  COFLAM[53] = -8.54653619E+00;
  COFLAM[54] = 1.54441306E+00;
  COFLAM[55] = -8.05444865E-02;
  COFLAM[56] = 8.90537792E+00;
  COFLAM[57] = -1.87267891E+00;
  COFLAM[58] = 4.18663534E-01;
  COFLAM[59] = -2.16282046E-02;
  COFLAM[60] = -7.65230079E+00;
  COFLAM[61] = 4.28124826E+00;
  COFLAM[62] = -3.39886173E-01;
  COFLAM[63] = 9.51196303E-03;
  COFLAM[64] = 1.44114248E+01;
  COFLAM[65] = -5.71853337E+00;
  COFLAM[66] = 1.13552440E+00;
  COFLAM[67] = -6.16901196E-02;
  COFLAM[68] = 1.93225287E+01;
  COFLAM[69] = -8.38987634E+00;
  COFLAM[70] = 1.59562400E+00;
  COFLAM[71] = -8.63751261E-02;
  COFLAM[72] = 6.23749183E+00;
  COFLAM[73] = -2.18906832E+00;
  COFLAM[74] = 6.50221167E-01;
  COFLAM[75] = -3.91789542E-02;
  COFLAM[76] = 4.43487152E+00;
  COFLAM[77] = -2.08147786E+00;
  COFLAM[78] = 7.14827430E-01;
  COFLAM[79] = -4.53371836E-02;
  COFLAM[80] = 1.52366065E+01;
  COFLAM[81] = -6.79624999E+00;
  COFLAM[82] = 1.40117202E+00;
  COFLAM[83] = -7.82768802E-02;
  COFLAM[84] = 4.06725312E+00;
  COFLAM[85] = -3.24252257E-01;
  COFLAM[86] = 2.65485900E-01;
  COFLAM[87] = -1.67509645E-02;
  COFLAM[88] = -1.16989384E+01;
  COFLAM[89] = 6.28754207E+00;
  COFLAM[90] = -6.49812120E-01;
  COFLAM[91] = 2.56753544E-02;
  COFLAM[92] = -2.60967411E+00;
  COFLAM[93] = 1.74878620E+00;
  COFLAM[94] = 8.19215888E-02;
  COFLAM[95] = -1.23646773E-02;
  COFLAM[96] = -1.25779345E+00;
  COFLAM[97] = 6.06870563E-01;
  COFLAM[98] = 3.18466228E-01;
  COFLAM[99] = -2.63516552E-02;
  COFLAM[100] = 1.46871854E+00;
  COFLAM[101] = -4.64283953E-01;
  COFLAM[102] = 4.57335330E-01;
  COFLAM[103] = -3.23325156E-02;
  COFLAM[104] = 1.04363688E+00;
  COFLAM[105] = -4.78634354E-01;
  COFLAM[106] = 4.88485465E-01;
  COFLAM[107] = -3.49233876E-02;
  COFLAM[108] = -6.77380655E+00;
  COFLAM[109] = 4.74140581E+00;
  COFLAM[110] = -4.47138758E-01;
  COFLAM[111] = 1.63155338E-02;
  COFLAM[112] = -3.50292317E+00;
  COFLAM[113] = 1.89064404E+00;
  COFLAM[114] = 7.59965626E-02;
  COFLAM[115] = -1.26094021E-02;
  COFLAM[116] = -5.82564467E+00;
  COFLAM[117] = 3.17844536E+00;
  COFLAM[118] = -1.42243672E-01;
  COFLAM[119] = -8.33694435E-04;
  COFLAM[120] = 1.04894816E+00;
  COFLAM[121] = 2.10116438E+00;
  COFLAM[122] = -2.00797956E-01;
  COFLAM[123] = 9.21449230E-03;
  COFLAM[124] = 6.02535870E+00;
  COFLAM[125] = 2.43030377E-01;
  COFLAM[126] = 4.93851107E-02;
  COFLAM[127] = -8.96970644E-04;
  COFLAM[128] = 1.49907019E+01;
  COFLAM[129] = -4.03416745E+00;
  COFLAM[130] = 7.17491946E-01;
  COFLAM[131] = -3.43521350E-02;
  COFLAM[132] = 1.90417388E+01;
  COFLAM[133] = -7.53216342E+00;
  COFLAM[134] = 1.40205089E+00;
  COFLAM[135] = -7.36504693E-02;
  COFLAM[136] = 1.10734163E+01;
  COFLAM[137] = -3.12730286E+00;
  COFLAM[138] = 6.48810524E-01;
  COFLAM[139] = -3.43686334E-02;
  COFLAM[140] = 9.31829825E+00;
  COFLAM[141] = -2.02182027E+00;
  COFLAM[142] = 4.38462665E-01;
  COFLAM[143] = -2.25795625E-02;
  COFLAM[144] = -4.82535015E+00;
  COFLAM[145] = 3.35535387E+00;
  COFLAM[146] = -2.38859537E-01;
  COFLAM[147] = 6.06436844E-03;
  COFLAM[148] = -8.64241711E+00;
  COFLAM[149] = 4.82032888E+00;
  COFLAM[150] = -4.32602246E-01;
  COFLAM[151] = 1.45884214E-02;
  COFLAM[152] = 1.45088067E+01;
  COFLAM[153] = -4.61232876E+00;
  COFLAM[154] = 8.49148939E-01;
  COFLAM[155] = -4.24818462E-02;
  COFLAM[156] = 2.14364353E+00;
  COFLAM[157] = 1.46448031E+00;
  COFLAM[158] = -1.26011534E-01;
  COFLAM[159] = 7.66224584E-03;
  COFLAM[160] = 4.42130377E+00;
  COFLAM[161] = -1.31713184E+00;
  COFLAM[162] = 4.93150493E-01;
  COFLAM[163] = -3.04241312E-02;
  COFLAM[164] = 8.66587676E+00;
  COFLAM[165] = -3.61023481E+00;
  COFLAM[166] = 8.89238978E-01;
  COFLAM[167] = -5.19448744E-02;
  COFLAM[168] = -6.65376031E+00;
  COFLAM[169] = 4.66250175E+00;
  COFLAM[170] = -4.29978703E-01;
  COFLAM[171] = 1.51752713E-02;
  COFLAM[172] = -7.57039985E+00;
  COFLAM[173] = 4.22974332E+00;
  COFLAM[174] = -3.17739446E-01;
  COFLAM[175] = 7.85772178E-03;
  COFLAM[176] = -4.21363772E-01;
  COFLAM[177] = 1.23471225E+00;
  COFLAM[178] = 9.39462003E-02;
  COFLAM[179] = -1.08747870E-02;
  COFLAM[180] = -1.59540412E+00;
  COFLAM[181] = 1.66607014E+00;
  COFLAM[182] = 4.36946233E-02;
  COFLAM[183] = -8.95550847E-03;
  COFLAM[184] = -7.07000152E+00;
  COFLAM[185] = 4.16599418E+00;
  COFLAM[186] = -3.36655286E-01;
  COFLAM[187] = 9.73901579E-03;
  COFLAM[188] = 7.88082120E+00;
  COFLAM[189] = -1.35215708E+00;
  COFLAM[190] = 3.34603481E-01;
  COFLAM[191] = -1.72055831E-02;
  COFLAM[192] = -4.06448488E+00;
  COFLAM[193] = 3.85438107E+00;
  COFLAM[194] = -4.29926723E-01;
  COFLAM[195] = 1.92040721E-02;
  COFLAM[196] = -1.31711883E+01;
  COFLAM[197] = 5.76542375E+00;
  COFLAM[198] = -4.29938373E-01;
  COFLAM[199] = 9.61801051E-03;
  COFLAM[200] = -1.24582748E+01;
  COFLAM[201] = 5.31991444E+00;
  COFLAM[202] = -3.46045002E-01;
  COFLAM[203] = 4.87712998E-03;
  COFLAM[204] = 2.18754333E+00;
  COFLAM[205] = -7.40013170E-01;
  COFLAM[206] = 4.77015160E-01;
  COFLAM[207] = -3.24358029E-02;
  COFLAM[208] = 3.94676750E+00;
  COFLAM[209] = -1.81903418E+00;
  COFLAM[210] = 6.76069993E-01;
  COFLAM[211] = -4.35979430E-02;
  COFLAM[212] = 2.49429358E+00;
  COFLAM[213] = 4.06986935E-01;
  COFLAM[214] = 1.35441248E-01;
  COFLAM[215] = -8.86462131E-03;
  COFLAM[216] = 6.26048693E-01;
  COFLAM[217] = 2.34853449E+00;
  COFLAM[218] = -2.33829873E-01;
  COFLAM[219] = 1.06843433E-02;
  COFLAM[220] = -7.45862485E+00;
  COFLAM[221] = 5.21558705E+00;
  COFLAM[222] = -5.87712980E-01;
  COFLAM[223] = 2.55471513E-02;
  COFLAM[224] = 4.97870945E+00;
  COFLAM[225] = -2.25864942E+00;
  COFLAM[226] = 7.27803292E-01;
  COFLAM[227] = -4.56934676E-02;
  COFLAM[228] = -6.07136823E+00;
  COFLAM[229] = 2.66185913E+00;
  COFLAM[230] = 3.99059116E-03;
  COFLAM[231] = -1.08975779E-02;
  COFLAM[232] = -1.65952907E+01;
  COFLAM[233] = 7.48711221E+00;
  COFLAM[234] = -7.18535131E-01;
  COFLAM[235] = 2.43261649E-02;
  COFLAM[236] = -2.07339292E+01;
  COFLAM[237] = 9.95350341E+00;
  COFLAM[238] = -1.15306925E+00;
  COFLAM[239] = 4.77400552E-02;
  COFLAM[240] = -2.22457027E+00;
  COFLAM[241] = 1.44323328E+00;
  COFLAM[242] = 1.20694512E-01;
  COFLAM[243] = -1.40267952E-02;
  COFLAM[244] = -9.37342751E+00;
  COFLAM[245] = 4.48883448E+00;
  COFLAM[246] = -3.11087624E-01;
  COFLAM[247] = 5.92414861E-03;
  COFLAM[248] = -1.51779220E+01;
  COFLAM[249] = 7.72013270E+00;
  COFLAM[250] = -8.51943564E-01;
  COFLAM[251] = 3.41908195E-02;
  COFLAM[252] = -2.51861096E+00;
  COFLAM[253] = 2.16245832E+00;
  COFLAM[254] = -7.53467842E-02;
  COFLAM[255] = -6.95079917E-04;
  COFLAM[256] = -9.29289434E+00;
  COFLAM[257] = 5.48364668E+00;
  COFLAM[258] = -5.70044605E-01;
  COFLAM[259] = 2.23880745E-02;
  COFLAM[260] = 2.24228281E+00;
  COFLAM[261] = 9.35518194E-01;
  COFLAM[262] = 2.88825628E-02;
  COFLAM[263] = -3.89846042E-03;
  COFLAM[264] = -1.86630257E+01;
  COFLAM[265] = 8.50069188E+00;
  COFLAM[266] = -8.95275432E-01;
  COFLAM[267] = 3.36963666E-02;
  COFLAM[268] = -1.61007443E+01;
  COFLAM[269] = 7.24772515E+00;
  COFLAM[270] = -7.08401570E-01;
  COFLAM[271] = 2.46312727E-02;
  COFLAM[272] = -5.39192131E+00;
  COFLAM[273] = 2.43192889E+00;
  COFLAM[274] = 1.23485951E-03;
  COFLAM[275] = -9.47016693E-03;
  COFLAM[276] = 9.50566218E+00;
  COFLAM[277] = -3.84973262E+00;
  COFLAM[278] = 8.65784365E-01;
  COFLAM[279] = -4.86896761E-02;
  COFLAM[280] = -9.23649002E+00;
  COFLAM[281] = 3.87428866E+00;
  COFLAM[282] = -1.38156025E-01;
  COFLAM[283] = -5.00055990E-03;
  COFLAM[284] = -1.31771610E+01;
  COFLAM[285] = 5.76802534E+00;
  COFLAM[286] = -4.30308280E-01;
  COFLAM[287] = 9.63546678E-03;
}

// Poly fits for the diffusion coefficients, dim NO*KK*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFD(amrex::Real* COFD)
{
  COFD[0] = -1.04990599E+01;
  COFD[1] = 2.26732153E+00;
  COFD[2] = -8.61408081E-02;
  COFD[3] = 4.02311798E-03;
  COFD[4] = -1.21757680E+01;
  COFD[5] = 3.10189444E+00;
  COFD[6] = -1.96763337E-01;
  COFD[7] = 8.91077792E-03;
  COFD[8] = -1.15394122E+01;
  COFD[9] = 2.55800063E+00;
  COFD[10] = -1.23269730E-01;
  COFD[11] = 5.59599793E-03;
  COFD[12] = -1.24644297E+01;
  COFD[13] = 2.81929703E+00;
  COFD[14] = -1.58997419E-01;
  COFD[15] = 7.22675698E-03;
  COFD[16] = -1.15427396E+01;
  COFD[17] = 2.55800063E+00;
  COFD[18] = -1.23269730E-01;
  COFD[19] = 5.59599793E-03;
  COFD[20] = -1.76500570E+01;
  COFD[21] = 4.83341414E+00;
  COFD[22] = -4.13936120E-01;
  COFD[23] = 1.80124116E-02;
  COFD[24] = -1.24653356E+01;
  COFD[25] = 2.81929703E+00;
  COFD[26] = -1.58997419E-01;
  COFD[27] = 7.22675698E-03;
  COFD[28] = -1.24661893E+01;
  COFD[29] = 2.81929703E+00;
  COFD[30] = -1.58997419E-01;
  COFD[31] = 7.22675698E-03;
  COFD[32] = -1.14408813E+01;
  COFD[33] = 2.45139089E+00;
  COFD[34] = -1.08437807E-01;
  COFD[35] = 4.90682837E-03;
  COFD[36] = -1.15267659E+01;
  COFD[37] = 2.55800063E+00;
  COFD[38] = -1.23269730E-01;
  COFD[39] = 5.59599793E-03;
  COFD[40] = -1.32445597E+01;
  COFD[41] = 3.09549012E+00;
  COFD[42] = -1.95916803E-01;
  COFD[43] = 8.87343782E-03;
  COFD[44] = -1.32445597E+01;
  COFD[45] = 3.09549012E+00;
  COFD[46] = -1.95916803E-01;
  COFD[47] = 8.87343782E-03;
  COFD[48] = -1.32487899E+01;
  COFD[49] = 3.09549012E+00;
  COFD[50] = -1.95916803E-01;
  COFD[51] = 8.87343782E-03;
  COFD[52] = -1.31919949E+01;
  COFD[53] = 3.07844273E+00;
  COFD[54] = -1.93660126E-01;
  COFD[55] = 8.77376611E-03;
  COFD[56] = -1.23566392E+01;
  COFD[57] = 2.75767051E+00;
  COFD[58] = -1.50865932E-01;
  COFD[59] = 6.86861709E-03;
  COFD[60] = -1.46408050E+01;
  COFD[61] = 3.61055678E+00;
  COFD[62] = -2.62922673E-01;
  COFD[63] = 1.17829245E-02;
  COFD[64] = -1.67234252E+01;
  COFD[65] = 4.40102685E+00;
  COFD[66] = -3.62814452E-01;
  COFD[67] = 1.60024586E-02;
  COFD[68] = -1.67245167E+01;
  COFD[69] = 4.40102685E+00;
  COFD[70] = -3.62814452E-01;
  COFD[71] = 1.60024586E-02;
  COFD[72] = -1.65270517E+01;
  COFD[73] = 4.31444462E+00;
  COFD[74] = -3.51989892E-01;
  COFD[75] = 1.55492422E-02;
  COFD[76] = -1.65270517E+01;
  COFD[77] = 4.31444462E+00;
  COFD[78] = -3.51989892E-01;
  COFD[79] = 1.55492422E-02;
  COFD[80] = -1.66335234E+01;
  COFD[81] = 4.36332665E+00;
  COFD[82] = -3.58123495E-01;
  COFD[83] = 1.58069905E-02;
  COFD[84] = -1.43464169E+01;
  COFD[85] = 3.47172936E+00;
  COFD[86] = -2.45275610E-01;
  COFD[87] = 1.10343782E-02;
  COFD[88] = -1.43478618E+01;
  COFD[89] = 3.47172936E+00;
  COFD[90] = -2.45275610E-01;
  COFD[91] = 1.10343782E-02;
  COFD[92] = -1.43492027E+01;
  COFD[93] = 3.47172936E+00;
  COFD[94] = -2.45275610E-01;
  COFD[95] = 1.10343782E-02;
  COFD[96] = -1.50275326E+01;
  COFD[97] = 3.73345719E+00;
  COFD[98] = -2.78334943E-01;
  COFD[99] = 1.24274352E-02;
  COFD[100] = -1.48546420E+01;
  COFD[101] = 3.63539387E+00;
  COFD[102] = -2.65974811E-01;
  COFD[103] = 1.19076945E-02;
  COFD[104] = -1.48557305E+01;
  COFD[105] = 3.63539387E+00;
  COFD[106] = -2.65974811E-01;
  COFD[107] = 1.19076945E-02;
  COFD[108] = -1.29472065E+01;
  COFD[109] = 3.12904711E+00;
  COFD[110] = -2.00267602E-01;
  COFD[111] = 9.06153724E-03;
  COFD[112] = -1.64092143E+01;
  COFD[113] = 4.24085297E+00;
  COFD[114] = -3.42726080E-01;
  COFD[115] = 1.51589637E-02;
  COFD[116] = -1.64092143E+01;
  COFD[117] = 4.24085297E+00;
  COFD[118] = -3.42726080E-01;
  COFD[119] = 1.51589637E-02;
  COFD[120] = -1.14512279E+01;
  COFD[121] = 2.45139089E+00;
  COFD[122] = -1.08437807E-01;
  COFD[123] = 4.90682837E-03;
  COFD[124] = -1.15001705E+01;
  COFD[125] = 2.55800063E+00;
  COFD[126] = -1.23269730E-01;
  COFD[127] = 5.59599793E-03;
  COFD[128] = -1.15039079E+01;
  COFD[129] = 2.55800063E+00;
  COFD[130] = -1.23269730E-01;
  COFD[131] = 5.59599793E-03;
  COFD[132] = -1.68623665E+01;
  COFD[133] = 4.53418683E+00;
  COFD[134] = -3.79402741E-01;
  COFD[135] = 1.66944494E-02;
  COFD[136] = -1.16395672E+01;
  COFD[137] = 2.45139089E+00;
  COFD[138] = -1.08437807E-01;
  COFD[139] = 4.90682837E-03;
  COFD[140] = -1.23383828E+01;
  COFD[141] = 2.75315266E+00;
  COFD[142] = -1.50257362E-01;
  COFD[143] = 6.84125771E-03;
  COFD[144] = -1.40618742E+01;
  COFD[145] = 3.42504312E+00;
  COFD[146] = -2.39198002E-01;
  COFD[147] = 1.07702803E-02;
  COFD[148] = -1.45501106E+01;
  COFD[149] = 3.57062617E+00;
  COFD[150] = -2.57920745E-01;
  COFD[151] = 1.15740264E-02;
  COFD[152] = -1.26360335E+01;
  COFD[153] = 2.88062866E+00;
  COFD[154] = -1.67071255E-01;
  COFD[155] = 7.58146324E-03;
  COFD[156] = -1.17730119E+01;
  COFD[157] = 2.50005623E+00;
  COFD[158] = -1.15244430E-01;
  COFD[159] = 5.22461498E-03;
  COFD[160] = -1.71864041E+01;
  COFD[161] = 4.56620281E+00;
  COFD[162] = -3.83449842E-01;
  COFD[163] = 1.68658834E-02;
  COFD[164] = -1.71876536E+01;
  COFD[165] = 4.56620281E+00;
  COFD[166] = -3.83449842E-01;
  COFD[167] = 1.68658834E-02;
  COFD[168] = -1.29472088E+01;
  COFD[169] = 3.12904711E+00;
  COFD[170] = -2.00267602E-01;
  COFD[171] = 9.06153724E-03;
  COFD[172] = -1.45496080E+01;
  COFD[173] = 3.57062617E+00;
  COFD[174] = -2.57920745E-01;
  COFD[175] = 1.15740264E-02;
  COFD[176] = -1.45496080E+01;
  COFD[177] = 3.57062617E+00;
  COFD[178] = -2.57920745E-01;
  COFD[179] = 1.15740264E-02;
  COFD[180] = -1.45496080E+01;
  COFD[181] = 3.57062617E+00;
  COFD[182] = -2.57920745E-01;
  COFD[183] = 1.15740264E-02;
  COFD[184] = -1.45490714E+01;
  COFD[185] = 3.57062617E+00;
  COFD[186] = -2.57920745E-01;
  COFD[187] = 1.15740264E-02;
  COFD[188] = -1.23361495E+01;
  COFD[189] = 2.75315266E+00;
  COFD[190] = -1.50257362E-01;
  COFD[191] = 6.84125771E-03;
  COFD[192] = -1.30145015E+01;
  COFD[193] = 3.04654412E+00;
  COFD[194] = -1.89439554E-01;
  COFD[195] = 8.58743756E-03;
  COFD[196] = -1.51657506E+01;
  COFD[197] = 3.67829613E+00;
  COFD[198] = -2.71248709E-01;
  COFD[199] = 1.21233589E-02;
  COFD[200] = -1.51662617E+01;
  COFD[201] = 3.67829613E+00;
  COFD[202] = -2.71248709E-01;
  COFD[203] = 1.21233589E-02;
  COFD[204] = -1.64097504E+01;
  COFD[205] = 4.24085297E+00;
  COFD[206] = -3.42726080E-01;
  COFD[207] = 1.51589637E-02;
  COFD[208] = -1.64102626E+01;
  COFD[209] = 4.24085297E+00;
  COFD[210] = -3.42726080E-01;
  COFD[211] = 1.51589637E-02;
  COFD[212] = -1.60092254E+01;
  COFD[213] = 4.18930603E+00;
  COFD[214] = -3.36270772E-01;
  COFD[215] = 1.48886958E-02;
  COFD[216] = -1.15483249E+01;
  COFD[217] = 2.55800063E+00;
  COFD[218] = -1.23269730E-01;
  COFD[219] = 5.59599793E-03;
  COFD[220] = -1.27940837E+01;
  COFD[221] = 2.96487721E+00;
  COFD[222] = -1.78501717E-01;
  COFD[223] = 8.09865315E-03;
  COFD[224] = -1.52016377E+01;
  COFD[225] = 3.77717901E+00;
  COFD[226] = -2.83987333E-01;
  COFD[227] = 1.26715852E-02;
  COFD[228] = -1.52114019E+01;
  COFD[229] = 3.77717901E+00;
  COFD[230] = -2.83987333E-01;
  COFD[231] = 1.26715852E-02;
  COFD[232] = -1.52162179E+01;
  COFD[233] = 3.77717901E+00;
  COFD[234] = -2.83987333E-01;
  COFD[235] = 1.26715852E-02;
  COFD[236] = -1.33708600E+01;
  COFD[237] = 3.02993215E+00;
  COFD[238] = -1.87240996E-01;
  COFD[239] = 8.49033986E-03;
  COFD[240] = -1.52007850E+01;
  COFD[241] = 3.77717901E+00;
  COFD[242] = -2.83987333E-01;
  COFD[243] = 1.26715852E-02;
  COFD[244] = -1.52110335E+01;
  COFD[245] = 3.77717901E+00;
  COFD[246] = -2.83987333E-01;
  COFD[247] = 1.26715852E-02;
  COFD[248] = -1.30011809E+01;
  COFD[249] = 2.92231605E+00;
  COFD[250] = -1.72734446E-01;
  COFD[251] = 7.83801178E-03;
  COFD[252] = -1.51998802E+01;
  COFD[253] = 3.77717901E+00;
  COFD[254] = -2.83987333E-01;
  COFD[255] = 1.26715852E-02;
  COFD[256] = -1.26417046E+01;
  COFD[257] = 2.82306442E+00;
  COFD[258] = -1.59491209E-01;
  COFD[259] = 7.24835519E-03;
  COFD[260] = -1.22693309E+01;
  COFD[261] = 2.72399371E+00;
  COFD[262] = -1.46297573E-01;
  COFD[263] = 6.66184541E-03;
  COFD[264] = -1.60284160E+01;
  COFD[265] = 4.00473478E+00;
  COFD[266] = -3.13164739E-01;
  COFD[267] = 1.39220151E-02;
  COFD[268] = -1.60250931E+01;
  COFD[269] = 4.00473478E+00;
  COFD[270] = -3.13164739E-01;
  COFD[271] = 1.39220151E-02;
  COFD[272] = -1.60195716E+01;
  COFD[273] = 4.00473478E+00;
  COFD[274] = -3.13164739E-01;
  COFD[275] = 1.39220151E-02;
  COFD[276] = -1.84347689E+01;
  COFD[277] = 4.94081188E+00;
  COFD[278] = -4.25912696E-01;
  COFD[279] = 1.84507313E-02;
  COFD[280] = -1.51657506E+01;
  COFD[281] = 3.67829613E+00;
  COFD[282] = -2.71248709E-01;
  COFD[283] = 1.21233589E-02;
  COFD[284] = -1.51657506E+01;
  COFD[285] = 3.67829613E+00;
  COFD[286] = -2.71248709E-01;
  COFD[287] = 1.21233589E-02;
  COFD[288] = -1.21757680E+01;
  COFD[289] = 3.10189444E+00;
  COFD[290] = -1.96763337E-01;
  COFD[291] = 8.91077792E-03;
  COFD[292] = -1.54874027E+01;
  COFD[293] = 4.52748569E+00;
  COFD[294] = -3.78558416E-01;
  COFD[295] = 1.66588204E-02;
  COFD[296] = -1.42311295E+01;
  COFD[297] = 3.83461834E+00;
  COFD[298] = -2.91346712E-01;
  COFD[299] = 1.29864869E-02;
  COFD[300] = -1.54214377E+01;
  COFD[301] = 4.16714450E+00;
  COFD[302] = -3.33485966E-01;
  COFD[303] = 1.47716776E-02;
  COFD[304] = -1.42328890E+01;
  COFD[305] = 3.83461834E+00;
  COFD[306] = -2.91346712E-01;
  COFD[307] = 1.29864869E-02;
  COFD[308] = -1.79459464E+01;
  COFD[309] = 4.90812804E+00;
  COFD[310] = -3.89562266E-01;
  COFD[311] = 1.55498193E-02;
  COFD[312] = -1.54219042E+01;
  COFD[313] = 4.16714450E+00;
  COFD[314] = -3.33485966E-01;
  COFD[315] = 1.47716776E-02;
  COFD[316] = -1.54223435E+01;
  COFD[317] = 4.16714450E+00;
  COFD[318] = -3.33485966E-01;
  COFD[319] = 1.47716776E-02;
  COFD[320] = -1.40793218E+01;
  COFD[321] = 3.70003870E+00;
  COFD[322] = -2.74031258E-01;
  COFD[323] = 1.22422674E-02;
  COFD[324] = -1.42243918E+01;
  COFD[325] = 3.83461834E+00;
  COFD[326] = -2.91346712E-01;
  COFD[327] = 1.29864869E-02;
  COFD[328] = -1.64846231E+01;
  COFD[329] = 4.51809798E+00;
  COFD[330] = -3.77379320E-01;
  COFD[331] = 1.66092335E-02;
  COFD[332] = -1.64846231E+01;
  COFD[333] = 4.51809798E+00;
  COFD[334] = -3.77379320E-01;
  COFD[335] = 1.66092335E-02;
  COFD[336] = -1.64868756E+01;
  COFD[337] = 4.51809798E+00;
  COFD[338] = -3.77379320E-01;
  COFD[339] = 1.66092335E-02;
  COFD[340] = -1.64011878E+01;
  COFD[341] = 4.49256652E+00;
  COFD[342] = -3.74152937E-01;
  COFD[343] = 1.64726078E-02;
  COFD[344] = -1.52563009E+01;
  COFD[345] = 4.08510973E+00;
  COFD[346] = -3.23491638E-01;
  COFD[347] = 1.43658179E-02;
  COFD[348] = -1.79199924E+01;
  COFD[349] = 4.99108002E+00;
  COFD[350] = -4.30731923E-01;
  COFD[351] = 1.85887464E-02;
  COFD[352] = -1.85085428E+01;
  COFD[353] = 5.03356920E+00;
  COFD[354] = -4.12704724E-01;
  COFD[355] = 1.68351048E-02;
  COFD[356] = -1.85091066E+01;
  COFD[357] = 5.03356920E+00;
  COFD[358] = -4.12704724E-01;
  COFD[359] = 1.68351048E-02;
  COFD[360] = -1.85217126E+01;
  COFD[361] = 5.08695971E+00;
  COFD[362] = -4.26619069E-01;
  COFD[363] = 1.77242432E-02;
  COFD[364] = -1.85217126E+01;
  COFD[365] = 5.08695971E+00;
  COFD[366] = -4.26619069E-01;
  COFD[367] = 1.77242432E-02;
  COFD[368] = -1.85509168E+01;
  COFD[369] = 5.05822881E+00;
  COFD[370] = -4.17484527E-01;
  COFD[371] = 1.71075813E-02;
  COFD[372] = -1.76534938E+01;
  COFD[373] = 4.87590216E+00;
  COFD[374] = -4.18786740E-01;
  COFD[375] = 1.81952526E-02;
  COFD[376] = -1.76542437E+01;
  COFD[377] = 4.87590216E+00;
  COFD[378] = -4.18786740E-01;
  COFD[379] = 1.81952526E-02;
  COFD[380] = -1.76549387E+01;
  COFD[381] = 4.87590216E+00;
  COFD[382] = -4.18786740E-01;
  COFD[383] = 1.81952526E-02;
  COFD[384] = -1.82009592E+01;
  COFD[385] = 5.04142338E+00;
  COFD[386] = -4.33551309E-01;
  COFD[387] = 1.85560778E-02;
  COFD[388] = -1.81535279E+01;
  COFD[389] = 5.00772290E+00;
  COFD[390] = -4.32092407E-01;
  COFD[391] = 1.86144012E-02;
  COFD[392] = -1.81540901E+01;
  COFD[393] = 5.00772290E+00;
  COFD[394] = -4.32092407E-01;
  COFD[395] = 1.86144012E-02;
  COFD[396] = -1.61564228E+01;
  COFD[397] = 4.57406894E+00;
  COFD[398] = -3.84438074E-01;
  COFD[399] = 1.69074675E-02;
  COFD[400] = -1.86273360E+01;
  COFD[401] = 5.07394969E+00;
  COFD[402] = -4.23194769E-01;
  COFD[403] = 1.75043529E-02;
  COFD[404] = -1.86273360E+01;
  COFD[405] = 5.07394969E+00;
  COFD[406] = -4.23194769E-01;
  COFD[407] = 1.75043529E-02;
  COFD[408] = -1.40848690E+01;
  COFD[409] = 3.70003870E+00;
  COFD[410] = -2.74031258E-01;
  COFD[411] = 1.22422674E-02;
  COFD[412] = -1.41870843E+01;
  COFD[413] = 3.83461834E+00;
  COFD[414] = -2.91346712E-01;
  COFD[415] = 1.29864869E-02;
  COFD[416] = -1.41890671E+01;
  COFD[417] = 3.83461834E+00;
  COFD[418] = -2.91346712E-01;
  COFD[419] = 1.29864869E-02;
  COFD[420] = -1.82726876E+01;
  COFD[421] = 5.05914185E+00;
  COFD[422] = -4.17676371E-01;
  COFD[423] = 1.71189139E-02;
  COFD[424] = -1.42812980E+01;
  COFD[425] = 3.70003870E+00;
  COFD[426] = -2.74031258E-01;
  COFD[427] = 1.22422674E-02;
  COFD[428] = -1.52294027E+01;
  COFD[429] = 4.07848496E+00;
  COFD[430] = -3.22647626E-01;
  COFD[431] = 1.43298383E-02;
  COFD[432] = -1.73254824E+01;
  COFD[433] = 4.83157593E+00;
  COFD[434] = -4.13711451E-01;
  COFD[435] = 1.80032208E-02;
  COFD[436] = -1.78359091E+01;
  COFD[437] = 4.95976558E+00;
  COFD[438] = -4.27732001E-01;
  COFD[439] = 1.85030487E-02;
  COFD[440] = -1.57072822E+01;
  COFD[441] = 4.26760732E+00;
  COFD[442] = -3.46098875E-01;
  COFD[443] = 1.53012333E-02;
  COFD[444] = -1.44494342E+01;
  COFD[445] = 3.75661778E+00;
  COFD[446] = -2.81332435E-01;
  COFD[447] = 1.25570601E-02;
  COFD[448] = -1.83536707E+01;
  COFD[449] = 4.91070584E+00;
  COFD[450] = -3.90149100E-01;
  COFD[451] = 1.55854298E-02;
  COFD[452] = -1.83543176E+01;
  COFD[453] = 4.91070584E+00;
  COFD[454] = -3.90149100E-01;
  COFD[455] = 1.55854298E-02;
  COFD[456] = -1.61564240E+01;
  COFD[457] = 4.57406894E+00;
  COFD[458] = -3.84438074E-01;
  COFD[459] = 1.69074675E-02;
  COFD[460] = -1.78356521E+01;
  COFD[461] = 4.95976558E+00;
  COFD[462] = -4.27732001E-01;
  COFD[463] = 1.85030487E-02;
  COFD[464] = -1.78356521E+01;
  COFD[465] = 4.95976558E+00;
  COFD[466] = -4.27732001E-01;
  COFD[467] = 1.85030487E-02;
  COFD[468] = -1.78356521E+01;
  COFD[469] = 4.95976558E+00;
  COFD[470] = -4.27732001E-01;
  COFD[471] = 1.85030487E-02;
  COFD[472] = -1.78353776E+01;
  COFD[473] = 4.95976558E+00;
  COFD[474] = -4.27732001E-01;
  COFD[475] = 1.85030487E-02;
  COFD[476] = -1.52282485E+01;
  COFD[477] = 4.07848496E+00;
  COFD[478] = -3.22647626E-01;
  COFD[479] = 1.43298383E-02;
  COFD[480] = -1.61529841E+01;
  COFD[481] = 4.44989603E+00;
  COFD[482] = -3.68828569E-01;
  COFD[483] = 1.62501057E-02;
  COFD[484] = -1.84504600E+01;
  COFD[485] = 5.02876303E+00;
  COFD[486] = -4.33391605E-01;
  COFD[487] = 1.86111689E-02;
  COFD[488] = -1.84507213E+01;
  COFD[489] = 5.02876303E+00;
  COFD[490] = -4.33391605E-01;
  COFD[491] = 1.86111689E-02;
  COFD[492] = -1.86276102E+01;
  COFD[493] = 5.07394969E+00;
  COFD[494] = -4.23194769E-01;
  COFD[495] = 1.75043529E-02;
  COFD[496] = -1.86278721E+01;
  COFD[497] = 5.07394969E+00;
  COFD[498] = -4.23194769E-01;
  COFD[499] = 1.75043529E-02;
  COFD[500] = -1.81186289E+01;
  COFD[501] = 5.08358395E+00;
  COFD[502] = -4.34313881E-01;
  COFD[503] = 1.83936758E-02;
  COFD[504] = -1.42358302E+01;
  COFD[505] = 3.83461834E+00;
  COFD[506] = -2.91346712E-01;
  COFD[507] = 1.29864869E-02;
  COFD[508] = -1.58864977E+01;
  COFD[509] = 4.35793032E+00;
  COFD[510] = -3.57445064E-01;
  COFD[511] = 1.57784108E-02;
  COFD[512] = -1.81648161E+01;
  COFD[513] = 5.02489109E+00;
  COFD[514] = -4.33408488E-01;
  COFD[515] = 1.86336151E-02;
  COFD[516] = -1.81698148E+01;
  COFD[517] = 5.02489109E+00;
  COFD[518] = -4.33408488E-01;
  COFD[519] = 1.86336151E-02;
  COFD[520] = -1.81722628E+01;
  COFD[521] = 5.02489109E+00;
  COFD[522] = -4.33408488E-01;
  COFD[523] = 1.86336151E-02;
  COFD[524] = -1.65464006E+01;
  COFD[525] = 4.42995842E+00;
  COFD[526] = -3.66381678E-01;
  COFD[527] = 1.61496404E-02;
  COFD[528] = -1.81643773E+01;
  COFD[529] = 5.02489109E+00;
  COFD[530] = -4.33408488E-01;
  COFD[531] = 1.86336151E-02;
  COFD[532] = -1.81696271E+01;
  COFD[533] = 5.02489109E+00;
  COFD[534] = -4.33408488E-01;
  COFD[535] = 1.86336151E-02;
  COFD[536] = -1.61162455E+01;
  COFD[537] = 4.31231349E+00;
  COFD[538] = -3.51723330E-01;
  COFD[539] = 1.55380781E-02;
  COFD[540] = -1.81639113E+01;
  COFD[541] = 5.02489109E+00;
  COFD[542] = -4.33408488E-01;
  COFD[543] = 1.86336151E-02;
  COFD[544] = -1.56227048E+01;
  COFD[545] = 4.17274760E+00;
  COFD[546] = -3.34174929E-01;
  COFD[547] = 1.47999548E-02;
  COFD[548] = -1.51211553E+01;
  COFD[549] = 4.03577694E+00;
  COFD[550] = -3.17148637E-01;
  COFD[551] = 1.40929340E-02;
  COFD[552] = -1.87974891E+01;
  COFD[553] = 5.09645703E+00;
  COFD[554] = -4.34076048E-01;
  COFD[555] = 1.83045207E-02;
  COFD[556] = -1.87958054E+01;
  COFD[557] = 5.09645703E+00;
  COFD[558] = -4.34076048E-01;
  COFD[559] = 1.83045207E-02;
  COFD[560] = -1.87929955E+01;
  COFD[561] = 5.09645703E+00;
  COFD[562] = -4.34076048E-01;
  COFD[563] = 1.83045207E-02;
  COFD[564] = -1.75729846E+01;
  COFD[565] = 4.35554031E+00;
  COFD[566] = -2.95264478E-01;
  COFD[567] = 1.05416033E-02;
  COFD[568] = -1.84504600E+01;
  COFD[569] = 5.02876303E+00;
  COFD[570] = -4.33391605E-01;
  COFD[571] = 1.86111689E-02;
  COFD[572] = -1.84504600E+01;
  COFD[573] = 5.02876303E+00;
  COFD[574] = -4.33391605E-01;
  COFD[575] = 1.86111689E-02;
  COFD[576] = -1.15394122E+01;
  COFD[577] = 2.55800063E+00;
  COFD[578] = -1.23269730E-01;
  COFD[579] = 5.59599793E-03;
  COFD[580] = -1.42311295E+01;
  COFD[581] = 3.83461834E+00;
  COFD[582] = -2.91346712E-01;
  COFD[583] = 1.29864869E-02;
  COFD[584] = -1.39320868E+01;
  COFD[585] = 3.21909911E+00;
  COFD[586] = -2.11850626E-01;
  COFD[587] = 9.55839253E-03;
  COFD[588] = -1.51735107E+01;
  COFD[589] = 3.54673926E+00;
  COFD[590] = -2.54900443E-01;
  COFD[591] = 1.14466286E-02;
  COFD[592] = -1.39471282E+01;
  COFD[593] = 3.21909911E+00;
  COFD[594] = -2.11850626E-01;
  COFD[595] = 9.55839253E-03;
  COFD[596] = -1.92060802E+01;
  COFD[597] = 5.07198371E+00;
  COFD[598] = -4.34157597E-01;
  COFD[599] = 1.84430801E-02;
  COFD[600] = -1.51786267E+01;
  COFD[601] = 3.54673926E+00;
  COFD[602] = -2.54900443E-01;
  COFD[603] = 1.14466286E-02;
  COFD[604] = -1.51834878E+01;
  COFD[605] = 3.54673926E+00;
  COFD[606] = -2.54900443E-01;
  COFD[607] = 1.14466286E-02;
  COFD[608] = -1.38071869E+01;
  COFD[609] = 3.13068087E+00;
  COFD[610] = -2.00477755E-01;
  COFD[611] = 9.07054904E-03;
  COFD[612] = -1.38779071E+01;
  COFD[613] = 3.21909911E+00;
  COFD[614] = -2.11850626E-01;
  COFD[615] = 9.55839253E-03;
  COFD[616] = -1.58633789E+01;
  COFD[617] = 3.82653625E+00;
  COFD[618] = -2.90317972E-01;
  COFD[619] = 1.29427670E-02;
  COFD[620] = -1.58633789E+01;
  COFD[621] = 3.82653625E+00;
  COFD[622] = -2.90317972E-01;
  COFD[623] = 1.29427670E-02;
  COFD[624] = -1.58815674E+01;
  COFD[625] = 3.82653625E+00;
  COFD[626] = -2.90317972E-01;
  COFD[627] = 1.29427670E-02;
  COFD[628] = -1.58233182E+01;
  COFD[629] = 3.80482327E+00;
  COFD[630] = -2.87543922E-01;
  COFD[631] = 1.28244459E-02;
  COFD[632] = -1.49769964E+01;
  COFD[633] = 3.45922008E+00;
  COFD[634] = -2.43647140E-01;
  COFD[635] = 1.09635979E-02;
  COFD[636] = -1.77327874E+01;
  COFD[637] = 4.43481404E+00;
  COFD[638] = -3.66974600E-01;
  COFD[639] = 1.61738468E-02;
  COFD[640] = -1.94519402E+01;
  COFD[641] = 5.03423702E+00;
  COFD[642] = -4.33220473E-01;
  COFD[643] = 1.85667112E-02;
  COFD[644] = -1.94579416E+01;
  COFD[645] = 5.03423702E+00;
  COFD[646] = -4.33220473E-01;
  COFD[647] = 1.85667112E-02;
  COFD[648] = -1.91830380E+01;
  COFD[649] = 4.95351632E+00;
  COFD[650] = -4.27130446E-01;
  COFD[651] = 1.84856443E-02;
  COFD[652] = -1.91830380E+01;
  COFD[653] = 4.95351632E+00;
  COFD[654] = -4.27130446E-01;
  COFD[655] = 1.84856443E-02;
  COFD[656] = -1.94416036E+01;
  COFD[657] = 5.02805304E+00;
  COFD[658] = -4.33407830E-01;
  COFD[659] = 1.86164117E-02;
  COFD[660] = -1.72410983E+01;
  COFD[661] = 4.25245988E+00;
  COFD[662] = -3.44189784E-01;
  COFD[663] = 1.52207255E-02;
  COFD[664] = -1.72487037E+01;
  COFD[665] = 4.25245988E+00;
  COFD[666] = -3.44189784E-01;
  COFD[667] = 1.52207255E-02;
  COFD[668] = -1.72558468E+01;
  COFD[669] = 4.25245988E+00;
  COFD[670] = -3.44189784E-01;
  COFD[671] = 1.52207255E-02;
  COFD[672] = -1.82099893E+01;
  COFD[673] = 4.61134661E+00;
  COFD[674] = -3.88986112E-01;
  COFD[675] = 1.70927982E-02;
  COFD[676] = -1.79328095E+01;
  COFD[677] = 4.47278815E+00;
  COFD[678] = -3.71676557E-01;
  COFD[679] = 1.63687643E-02;
  COFD[680] = -1.79387962E+01;
  COFD[681] = 4.47278815E+00;
  COFD[682] = -3.71676557E-01;
  COFD[683] = 1.63687643E-02;
  COFD[684] = -1.57655841E+01;
  COFD[685] = 3.87441160E+00;
  COFD[686] = -2.96411944E-01;
  COFD[687] = 1.32018011E-02;
  COFD[688] = -1.94140750E+01;
  COFD[689] = 4.98320638E+00;
  COFD[690] = -4.30044977E-01;
  COFD[691] = 1.85729853E-02;
  COFD[692] = -1.94140750E+01;
  COFD[693] = 4.98320638E+00;
  COFD[694] = -4.30044977E-01;
  COFD[695] = 1.85729853E-02;
  COFD[696] = -1.38496362E+01;
  COFD[697] = 3.13068087E+00;
  COFD[698] = -2.00477755E-01;
  COFD[699] = 9.07054904E-03;
  COFD[700] = -1.38792676E+01;
  COFD[701] = 3.21909911E+00;
  COFD[702] = -2.11850626E-01;
  COFD[703] = 9.55839253E-03;
  COFD[704] = -1.38957631E+01;
  COFD[705] = 3.21909911E+00;
  COFD[706] = -2.11850626E-01;
  COFD[707] = 9.55839253E-03;
  COFD[708] = -1.90761585E+01;
  COFD[709] = 5.02767971E+00;
  COFD[710] = -4.33406285E-01;
  COFD[711] = 1.86183022E-02;
  COFD[712] = -1.41698829E+01;
  COFD[713] = 3.13068087E+00;
  COFD[714] = -2.00477755E-01;
  COFD[715] = 9.07054904E-03;
  COFD[716] = -1.49635832E+01;
  COFD[717] = 3.45291069E+00;
  COFD[718] = -2.42822180E-01;
  COFD[719] = 1.09275752E-02;
  COFD[720] = -1.70100228E+01;
  COFD[721] = 4.19909678E+00;
  COFD[722] = -3.37493433E-01;
  COFD[723] = 1.49397054E-02;
  COFD[724] = -1.76029792E+01;
  COFD[725] = 4.38093272E+00;
  COFD[726] = -3.60316345E-01;
  COFD[727] = 1.58984540E-02;
  COFD[728] = -1.53698844E+01;
  COFD[729] = 3.61618043E+00;
  COFD[730] = -2.63626979E-01;
  COFD[731] = 1.18123303E-02;
  COFD[732] = -1.42740249E+01;
  COFD[733] = 3.17062703E+00;
  COFD[734] = -2.05656056E-01;
  COFD[735] = 9.29447288E-03;
  COFD[736] = -1.96331086E+01;
  COFD[737] = 5.07016932E+00;
  COFD[738] = -4.34085095E-01;
  COFD[739] = 1.84466394E-02;
  COFD[740] = -1.96398389E+01;
  COFD[741] = 5.07016932E+00;
  COFD[742] = -4.34085095E-01;
  COFD[743] = 1.84466394E-02;
  COFD[744] = -1.57655978E+01;
  COFD[745] = 3.87441160E+00;
  COFD[746] = -2.96411944E-01;
  COFD[747] = 1.32018011E-02;
  COFD[748] = -1.75999275E+01;
  COFD[749] = 4.38093272E+00;
  COFD[750] = -3.60316345E-01;
  COFD[751] = 1.58984540E-02;
  COFD[752] = -1.75999275E+01;
  COFD[753] = 4.38093272E+00;
  COFD[754] = -3.60316345E-01;
  COFD[755] = 1.58984540E-02;
  COFD[756] = -1.75999275E+01;
  COFD[757] = 4.38093272E+00;
  COFD[758] = -3.60316345E-01;
  COFD[759] = 1.58984540E-02;
  COFD[760] = -1.75966867E+01;
  COFD[761] = 4.38093272E+00;
  COFD[762] = -3.60316345E-01;
  COFD[763] = 1.58984540E-02;
  COFD[764] = -1.49513692E+01;
  COFD[765] = 3.45291069E+00;
  COFD[766] = -2.42822180E-01;
  COFD[767] = 1.09275752E-02;
  COFD[768] = -1.57539984E+01;
  COFD[769] = 3.76178392E+00;
  COFD[770] = -2.82003508E-01;
  COFD[771] = 1.25861906E-02;
  COFD[772] = -1.83836850E+01;
  COFD[773] = 4.54835769E+00;
  COFD[774] = -3.81194036E-01;
  COFD[775] = 1.67703153E-02;
  COFD[776] = -1.83867893E+01;
  COFD[777] = 4.54835769E+00;
  COFD[778] = -3.81194036E-01;
  COFD[779] = 1.67703153E-02;
  COFD[780] = -1.94173132E+01;
  COFD[781] = 4.98320638E+00;
  COFD[782] = -4.30044977E-01;
  COFD[783] = 1.85729853E-02;
  COFD[784] = -1.94204230E+01;
  COFD[785] = 4.98320638E+00;
  COFD[786] = -4.30044977E-01;
  COFD[787] = 1.85729853E-02;
  COFD[788] = -1.82794640E+01;
  COFD[789] = 4.74200288E+00;
  COFD[790] = -4.03492976E-01;
  COFD[791] = 1.76186851E-02;
  COFD[792] = -1.39732009E+01;
  COFD[793] = 3.21909911E+00;
  COFD[794] = -2.11850626E-01;
  COFD[795] = 9.55839253E-03;
  COFD[796] = -1.54924432E+01;
  COFD[797] = 3.66997726E+00;
  COFD[798] = -2.70186616E-01;
  COFD[799] = 1.20780906E-02;
  COFD[800] = -1.80453592E+01;
  COFD[801] = 4.52327527E+00;
  COFD[802] = -3.78029305E-01;
  COFD[803] = 1.66365566E-02;
  COFD[804] = -1.81039526E+01;
  COFD[805] = 4.52327527E+00;
  COFD[806] = -3.78029305E-01;
  COFD[807] = 1.66365566E-02;
  COFD[808] = -1.81351221E+01;
  COFD[809] = 4.52327527E+00;
  COFD[810] = -3.78029305E-01;
  COFD[811] = 1.66365566E-02;
  COFD[812] = -1.61752207E+01;
  COFD[813] = 3.73914304E+00;
  COFD[814] = -2.79071053E-01;
  COFD[815] = 1.24592731E-02;
  COFD[816] = -1.80405028E+01;
  COFD[817] = 4.52327527E+00;
  COFD[818] = -3.78029305E-01;
  COFD[819] = 1.66365566E-02;
  COFD[820] = -1.81016344E+01;
  COFD[821] = 4.52327527E+00;
  COFD[822] = -3.78029305E-01;
  COFD[823] = 1.66365566E-02;
  COFD[824] = -1.57955084E+01;
  COFD[825] = 3.64178450E+00;
  COFD[826] = -2.66740517E-01;
  COFD[827] = 1.19380786E-02;
  COFD[828] = -1.80353919E+01;
  COFD[829] = 4.52327527E+00;
  COFD[830] = -3.78029305E-01;
  COFD[831] = 1.66365566E-02;
  COFD[832] = -1.54116300E+01;
  COFD[833] = 3.55175721E+00;
  COFD[834] = -2.55538703E-01;
  COFD[835] = 1.14737147E-02;
  COFD[836] = -1.48772681E+01;
  COFD[837] = 3.41648755E+00;
  COFD[838] = -2.38096267E-01;
  COFD[839] = 1.07229875E-02;
  COFD[840] = -1.91507879E+01;
  COFD[841] = 4.78666646E+00;
  COFD[842] = -4.08190059E-01;
  COFD[843] = 1.77758369E-02;
  COFD[844] = -1.91284966E+01;
  COFD[845] = 4.78666646E+00;
  COFD[846] = -4.08190059E-01;
  COFD[847] = 1.77758369E-02;
  COFD[848] = -1.90932222E+01;
  COFD[849] = 4.78666646E+00;
  COFD[850] = -4.08190059E-01;
  COFD[851] = 1.77758369E-02;
  COFD[852] = -2.01522950E+01;
  COFD[853] = 5.06537899E+00;
  COFD[854] = -4.19068559E-01;
  COFD[855] = 1.72031928E-02;
  COFD[856] = -1.83836850E+01;
  COFD[857] = 4.54835769E+00;
  COFD[858] = -3.81194036E-01;
  COFD[859] = 1.67703153E-02;
  COFD[860] = -1.83836850E+01;
  COFD[861] = 4.54835769E+00;
  COFD[862] = -3.81194036E-01;
  COFD[863] = 1.67703153E-02;
  COFD[864] = -1.24644297E+01;
  COFD[865] = 2.81929703E+00;
  COFD[866] = -1.58997419E-01;
  COFD[867] = 7.22675698E-03;
  COFD[868] = -1.54214377E+01;
  COFD[869] = 4.16714450E+00;
  COFD[870] = -3.33485966E-01;
  COFD[871] = 1.47716776E-02;
  COFD[872] = -1.51735107E+01;
  COFD[873] = 3.54673926E+00;
  COFD[874] = -2.54900443E-01;
  COFD[875] = 1.14466286E-02;
  COFD[876] = -1.63566588E+01;
  COFD[877] = 3.82801980E+00;
  COFD[878] = -2.90506588E-01;
  COFD[879] = 1.29507729E-02;
  COFD[880] = -1.51936682E+01;
  COFD[881] = 3.54673926E+00;
  COFD[882] = -2.54900443E-01;
  COFD[883] = 1.14466286E-02;
  COFD[884] = -1.98338541E+01;
  COFD[885] = 4.98279938E+00;
  COFD[886] = -4.03496082E-01;
  COFD[887] = 1.63274725E-02;
  COFD[888] = -1.63643527E+01;
  COFD[889] = 3.82801980E+00;
  COFD[890] = -2.90506588E-01;
  COFD[891] = 1.29507729E-02;
  COFD[892] = -1.63717003E+01;
  COFD[893] = 3.82801980E+00;
  COFD[894] = -2.90506588E-01;
  COFD[895] = 1.29507729E-02;
  COFD[896] = -1.49429545E+01;
  COFD[897] = 3.43432294E+00;
  COFD[898] = -2.40398689E-01;
  COFD[899] = 1.08220935E-02;
  COFD[900] = -1.51025016E+01;
  COFD[901] = 3.54673926E+00;
  COFD[902] = -2.54900443E-01;
  COFD[903] = 1.14466286E-02;
  COFD[904] = -1.71074388E+01;
  COFD[905] = 4.16164957E+00;
  COFD[906] = -3.32841595E-01;
  COFD[907] = 1.47466698E-02;
  COFD[908] = -1.71074388E+01;
  COFD[909] = 4.16164957E+00;
  COFD[910] = -3.32841595E-01;
  COFD[911] = 1.47466698E-02;
  COFD[912] = -1.71313048E+01;
  COFD[913] = 4.16164957E+00;
  COFD[914] = -3.32841595E-01;
  COFD[915] = 1.47466698E-02;
  COFD[916] = -1.70950725E+01;
  COFD[917] = 4.14674488E+00;
  COFD[918] = -3.31073361E-01;
  COFD[919] = 1.46770434E-02;
  COFD[920] = -1.60861041E+01;
  COFD[921] = 3.71857850E+00;
  COFD[922] = -2.76412050E-01;
  COFD[923] = 1.23444010E-02;
  COFD[924] = -1.90350359E+01;
  COFD[925] = 4.73697533E+00;
  COFD[926] = -4.02980928E-01;
  COFD[927] = 1.76024499E-02;
  COFD[928] = -2.02589201E+01;
  COFD[929] = 5.11001220E+00;
  COFD[930] = -4.34250370E-01;
  COFD[931] = 1.82469603E-02;
  COFD[932] = -2.02678011E+01;
  COFD[933] = 5.11001220E+00;
  COFD[934] = -4.34250370E-01;
  COFD[935] = 1.82469603E-02;
  COFD[936] = -2.01704623E+01;
  COFD[937] = 5.08440340E+00;
  COFD[938] = -4.34107376E-01;
  COFD[939] = 1.83716783E-02;
  COFD[940] = -2.01704623E+01;
  COFD[941] = 5.08440340E+00;
  COFD[942] = -4.34107376E-01;
  COFD[943] = 1.83716783E-02;
  COFD[944] = -2.02503279E+01;
  COFD[945] = 5.10232072E+00;
  COFD[946] = -4.34295533E-01;
  COFD[947] = 1.82918502E-02;
  COFD[948] = -1.86028801E+01;
  COFD[949] = 4.61053888E+00;
  COFD[950] = -3.88890034E-01;
  COFD[951] = 1.70889977E-02;
  COFD[952] = -1.86138605E+01;
  COFD[953] = 4.61053888E+00;
  COFD[954] = -3.88890034E-01;
  COFD[955] = 1.70889977E-02;
  COFD[956] = -1.86242418E+01;
  COFD[957] = 4.61053888E+00;
  COFD[958] = -3.88890034E-01;
  COFD[959] = 1.70889977E-02;
  COFD[960] = -1.93863144E+01;
  COFD[961] = 4.87165772E+00;
  COFD[962] = -4.18324132E-01;
  COFD[963] = 1.81788987E-02;
  COFD[964] = -1.91542408E+01;
  COFD[965] = 4.75936146E+00;
  COFD[966] = -4.05242301E-01;
  COFD[967] = 1.76731043E-02;
  COFD[968] = -1.91631023E+01;
  COFD[969] = 4.75936146E+00;
  COFD[970] = -4.05242301E-01;
  COFD[971] = 1.76731043E-02;
  COFD[972] = -1.71442233E+01;
  COFD[973] = 4.20727805E+00;
  COFD[974] = -3.38518137E-01;
  COFD[975] = 1.49826208E-02;
  COFD[976] = -2.02755394E+01;
  COFD[977] = 5.07906191E+00;
  COFD[978] = -4.34414251E-01;
  COFD[979] = 1.84266796E-02;
  COFD[980] = -2.02755394E+01;
  COFD[981] = 5.07906191E+00;
  COFD[982] = -4.34414251E-01;
  COFD[983] = 1.84266796E-02;
  COFD[984] = -1.49976437E+01;
  COFD[985] = 3.43432294E+00;
  COFD[986] = -2.40398689E-01;
  COFD[987] = 1.08220935E-02;
  COFD[988] = -1.51196508E+01;
  COFD[989] = 3.54673926E+00;
  COFD[990] = -2.54900443E-01;
  COFD[991] = 1.14466286E-02;
  COFD[992] = -1.51415314E+01;
  COFD[993] = 3.54673926E+00;
  COFD[994] = -2.54900443E-01;
  COFD[995] = 1.14466286E-02;
  COFD[996] = -1.99663195E+01;
  COFD[997] = 5.10924871E+00;
  COFD[998] = -4.31658027E-01;
  COFD[999] = 1.80316570E-02;
  COFD[1000] = -1.53634618E+01;
  COFD[1001] = 3.43432294E+00;
  COFD[1002] = -2.40398689E-01;
  COFD[1003] = 1.08220935E-02;
  COFD[1004] = -1.60794012E+01;
  COFD[1005] = 3.71236773E+00;
  COFD[1006] = -2.75612682E-01;
  COFD[1007] = 1.23100131E-02;
  COFD[1008] = -1.84369680E+01;
  COFD[1009] = 4.55714003E+00;
  COFD[1010] = -3.82304130E-01;
  COFD[1011] = 1.68173362E-02;
  COFD[1012] = -1.89380489E+01;
  COFD[1013] = 4.70017385E+00;
  COFD[1014] = -3.99010079E-01;
  COFD[1015] = 1.74642383E-02;
  COFD[1016] = -1.66230596E+01;
  COFD[1017] = 3.92641057E+00;
  COFD[1018] = -3.03041624E-01;
  COFD[1019] = 1.34843019E-02;
  COFD[1020] = -1.54866259E+01;
  COFD[1021] = 3.48610358E+00;
  COFD[1022] = -2.47139842E-01;
  COFD[1023] = 1.11151150E-02;
  COFD[1024] = -2.02961331E+01;
  COFD[1025] = 5.08245277E+00;
  COFD[1026] = -4.25599233E-01;
  COFD[1027] = 1.76620606E-02;
  COFD[1028] = -2.03059756E+01;
  COFD[1029] = 5.08245277E+00;
  COFD[1030] = -4.25599233E-01;
  COFD[1031] = 1.76620606E-02;
  COFD[1032] = -1.71442446E+01;
  COFD[1033] = 4.20727805E+00;
  COFD[1034] = -3.38518137E-01;
  COFD[1035] = 1.49826208E-02;
  COFD[1036] = -1.89332387E+01;
  COFD[1037] = 4.70017385E+00;
  COFD[1038] = -3.99010079E-01;
  COFD[1039] = 1.74642383E-02;
  COFD[1040] = -1.89332387E+01;
  COFD[1041] = 4.70017385E+00;
  COFD[1042] = -3.99010079E-01;
  COFD[1043] = 1.74642383E-02;
  COFD[1044] = -1.89332387E+01;
  COFD[1045] = 4.70017385E+00;
  COFD[1046] = -3.99010079E-01;
  COFD[1047] = 1.74642383E-02;
  COFD[1048] = -1.89281486E+01;
  COFD[1049] = 4.70017385E+00;
  COFD[1050] = -3.99010079E-01;
  COFD[1051] = 1.74642383E-02;
  COFD[1052] = -1.60613819E+01;
  COFD[1053] = 3.71236773E+00;
  COFD[1054] = -2.75612682E-01;
  COFD[1055] = 1.23100131E-02;
  COFD[1056] = -1.71424626E+01;
  COFD[1057] = 4.11579280E+00;
  COFD[1058] = -3.27325412E-01;
  COFD[1059] = 1.45259007E-02;
  COFD[1060] = -1.95815882E+01;
  COFD[1061] = 4.81568564E+00;
  COFD[1062] = -4.11759763E-01;
  COFD[1063] = 1.79229378E-02;
  COFD[1064] = -1.95864826E+01;
  COFD[1065] = 4.81568564E+00;
  COFD[1066] = -4.11759763E-01;
  COFD[1067] = 1.79229378E-02;
  COFD[1068] = -2.02806257E+01;
  COFD[1069] = 5.07906191E+00;
  COFD[1070] = -4.34414251E-01;
  COFD[1071] = 1.84266796E-02;
  COFD[1072] = -2.02855279E+01;
  COFD[1073] = 5.07906191E+00;
  COFD[1074] = -4.34414251E-01;
  COFD[1075] = 1.84266796E-02;
  COFD[1076] = -1.97171159E+01;
  COFD[1077] = 5.05124669E+00;
  COFD[1078] = -4.33876705E-01;
  COFD[1079] = 1.85307062E-02;
  COFD[1080] = -1.52291167E+01;
  COFD[1081] = 3.54673926E+00;
  COFD[1082] = -2.54900443E-01;
  COFD[1083] = 1.14466286E-02;
  COFD[1084] = -1.68675891E+01;
  COFD[1085] = 4.02108688E+00;
  COFD[1086] = -3.15255763E-01;
  COFD[1087] = 1.40113686E-02;
  COFD[1088] = -1.95017684E+01;
  COFD[1089] = 4.87794887E+00;
  COFD[1090] = -4.19010211E-01;
  COFD[1091] = 1.82031734E-02;
  COFD[1092] = -1.95934749E+01;
  COFD[1093] = 4.87794887E+00;
  COFD[1094] = -4.19010211E-01;
  COFD[1095] = 1.82031734E-02;
  COFD[1096] = -1.96449652E+01;
  COFD[1097] = 4.87794887E+00;
  COFD[1098] = -4.19010211E-01;
  COFD[1099] = 1.82031734E-02;
  COFD[1100] = -1.75908773E+01;
  COFD[1101] = 4.09821096E+00;
  COFD[1102] = -3.25157935E-01;
  COFD[1103] = 1.44367395E-02;
  COFD[1104] = -1.94944273E+01;
  COFD[1105] = 4.87794887E+00;
  COFD[1106] = -4.19010211E-01;
  COFD[1107] = 1.82031734E-02;
  COFD[1108] = -1.95897266E+01;
  COFD[1109] = 4.87794887E+00;
  COFD[1110] = -4.19010211E-01;
  COFD[1111] = 1.82031734E-02;
  COFD[1112] = -1.71369736E+01;
  COFD[1113] = 3.97361950E+00;
  COFD[1114] = -3.09153622E-01;
  COFD[1115] = 1.37490623E-02;
  COFD[1116] = -1.94867403E+01;
  COFD[1117] = 4.87794887E+00;
  COFD[1118] = -4.19010211E-01;
  COFD[1119] = 1.82031734E-02;
  COFD[1120] = -1.66181730E+01;
  COFD[1121] = 3.83453701E+00;
  COFD[1122] = -2.91336346E-01;
  COFD[1123] = 1.29860457E-02;
  COFD[1124] = -1.59946081E+01;
  COFD[1125] = 3.67614463E+00;
  COFD[1126] = -2.70973934E-01;
  COFD[1127] = 1.21116433E-02;
  COFD[1128] = -2.03435657E+01;
  COFD[1129] = 5.02233352E+00;
  COFD[1130] = -4.33327965E-01;
  COFD[1131] = 1.86406390E-02;
  COFD[1132] = -2.03056808E+01;
  COFD[1133] = 5.02233352E+00;
  COFD[1134] = -4.33327965E-01;
  COFD[1135] = 1.86406390E-02;
  COFD[1136] = -2.02479782E+01;
  COFD[1137] = 5.02233352E+00;
  COFD[1138] = -4.33327965E-01;
  COFD[1139] = 1.86406390E-02;
  COFD[1140] = -2.03126859E+01;
  COFD[1141] = 4.83724546E+00;
  COFD[1142] = -3.75588934E-01;
  COFD[1143] = 1.47513066E-02;
  COFD[1144] = -1.95815882E+01;
  COFD[1145] = 4.81568564E+00;
  COFD[1146] = -4.11759763E-01;
  COFD[1147] = 1.79229378E-02;
  COFD[1148] = -1.95815882E+01;
  COFD[1149] = 4.81568564E+00;
  COFD[1150] = -4.11759763E-01;
  COFD[1151] = 1.79229378E-02;
  COFD[1152] = -1.15427396E+01;
  COFD[1153] = 2.55800063E+00;
  COFD[1154] = -1.23269730E-01;
  COFD[1155] = 5.59599793E-03;
  COFD[1156] = -1.42328890E+01;
  COFD[1157] = 3.83461834E+00;
  COFD[1158] = -2.91346712E-01;
  COFD[1159] = 1.29864869E-02;
  COFD[1160] = -1.39471282E+01;
  COFD[1161] = 3.21909911E+00;
  COFD[1162] = -2.11850626E-01;
  COFD[1163] = 9.55839253E-03;
  COFD[1164] = -1.51936682E+01;
  COFD[1165] = 3.54673926E+00;
  COFD[1166] = -2.54900443E-01;
  COFD[1167] = 1.14466286E-02;
  COFD[1168] = -1.39626362E+01;
  COFD[1169] = 3.21909911E+00;
  COFD[1170] = -2.11850626E-01;
  COFD[1171] = 9.55839253E-03;
  COFD[1172] = -1.92220275E+01;
  COFD[1173] = 5.07198371E+00;
  COFD[1174] = -4.34157597E-01;
  COFD[1175] = 1.84430801E-02;
  COFD[1176] = -1.51989958E+01;
  COFD[1177] = 3.54673926E+00;
  COFD[1178] = -2.54900443E-01;
  COFD[1179] = 1.14466286E-02;
  COFD[1180] = -1.52040601E+01;
  COFD[1181] = 3.54673926E+00;
  COFD[1182] = -2.54900443E-01;
  COFD[1183] = 1.14466286E-02;
  COFD[1184] = -1.38200590E+01;
  COFD[1185] = 3.13068087E+00;
  COFD[1186] = -2.00477755E-01;
  COFD[1187] = 9.07054904E-03;
  COFD[1188] = -1.38913829E+01;
  COFD[1189] = 3.21909911E+00;
  COFD[1190] = -2.11850626E-01;
  COFD[1191] = 9.55839253E-03;
  COFD[1192] = -1.58774184E+01;
  COFD[1193] = 3.82653625E+00;
  COFD[1194] = -2.90317972E-01;
  COFD[1195] = 1.29427670E-02;
  COFD[1196] = -1.58774184E+01;
  COFD[1197] = 3.82653625E+00;
  COFD[1198] = -2.90317972E-01;
  COFD[1199] = 1.29427670E-02;
  COFD[1200] = -1.58961347E+01;
  COFD[1201] = 3.82653625E+00;
  COFD[1202] = -2.90317972E-01;
  COFD[1203] = 1.29427670E-02;
  COFD[1204] = -1.58383806E+01;
  COFD[1205] = 3.80482327E+00;
  COFD[1206] = -2.87543922E-01;
  COFD[1207] = 1.28244459E-02;
  COFD[1208] = -1.49962227E+01;
  COFD[1209] = 3.45922008E+00;
  COFD[1210] = -2.43647140E-01;
  COFD[1211] = 1.09635979E-02;
  COFD[1212] = -1.77550077E+01;
  COFD[1213] = 4.43481404E+00;
  COFD[1214] = -3.66974600E-01;
  COFD[1215] = 1.61738468E-02;
  COFD[1216] = -1.94714173E+01;
  COFD[1217] = 5.03423702E+00;
  COFD[1218] = -4.33220473E-01;
  COFD[1219] = 1.85667112E-02;
  COFD[1220] = -1.94776586E+01;
  COFD[1221] = 5.03423702E+00;
  COFD[1222] = -4.33220473E-01;
  COFD[1223] = 1.85667112E-02;
  COFD[1224] = -1.92029847E+01;
  COFD[1225] = 4.95351632E+00;
  COFD[1226] = -4.27130446E-01;
  COFD[1227] = 1.84856443E-02;
  COFD[1228] = -1.92029847E+01;
  COFD[1229] = 4.95351632E+00;
  COFD[1230] = -4.27130446E-01;
  COFD[1231] = 1.84856443E-02;
  COFD[1232] = -1.94617705E+01;
  COFD[1233] = 5.02805304E+00;
  COFD[1234] = -4.33407830E-01;
  COFD[1235] = 1.86164117E-02;
  COFD[1236] = -1.72595121E+01;
  COFD[1237] = 4.25245988E+00;
  COFD[1238] = -3.44189784E-01;
  COFD[1239] = 1.52207255E-02;
  COFD[1240] = -1.72674051E+01;
  COFD[1241] = 4.25245988E+00;
  COFD[1242] = -3.44189784E-01;
  COFD[1243] = 1.52207255E-02;
  COFD[1244] = -1.72748225E+01;
  COFD[1245] = 4.25245988E+00;
  COFD[1246] = -3.44189784E-01;
  COFD[1247] = 1.52207255E-02;
  COFD[1248] = -1.82292269E+01;
  COFD[1249] = 4.61134661E+00;
  COFD[1250] = -3.88986112E-01;
  COFD[1251] = 1.70927982E-02;
  COFD[1252] = -1.79522974E+01;
  COFD[1253] = 4.47278815E+00;
  COFD[1254] = -3.71676557E-01;
  COFD[1255] = 1.63687643E-02;
  COFD[1256] = -1.79585235E+01;
  COFD[1257] = 4.47278815E+00;
  COFD[1258] = -3.71676557E-01;
  COFD[1259] = 1.63687643E-02;
  COFD[1260] = -1.57873729E+01;
  COFD[1261] = 3.87441160E+00;
  COFD[1262] = -2.96411944E-01;
  COFD[1263] = 1.32018011E-02;
  COFD[1264] = -1.94360147E+01;
  COFD[1265] = 4.98320638E+00;
  COFD[1266] = -4.30044977E-01;
  COFD[1267] = 1.85729853E-02;
  COFD[1268] = -1.94360147E+01;
  COFD[1269] = 4.98320638E+00;
  COFD[1270] = -4.30044977E-01;
  COFD[1271] = 1.85729853E-02;
  COFD[1272] = -1.38636649E+01;
  COFD[1273] = 3.13068087E+00;
  COFD[1274] = -2.00477755E-01;
  COFD[1275] = 9.07054904E-03;
  COFD[1276] = -1.38938248E+01;
  COFD[1277] = 3.21909911E+00;
  COFD[1278] = -2.11850626E-01;
  COFD[1279] = 9.55839253E-03;
  COFD[1280] = -1.39108160E+01;
  COFD[1281] = 3.21909911E+00;
  COFD[1282] = -2.11850626E-01;
  COFD[1283] = 9.55839253E-03;
  COFD[1284] = -1.90916772E+01;
  COFD[1285] = 5.02767971E+00;
  COFD[1286] = -4.33406285E-01;
  COFD[1287] = 1.86183022E-02;
  COFD[1288] = -1.41893610E+01;
  COFD[1289] = 3.13068087E+00;
  COFD[1290] = -2.00477755E-01;
  COFD[1291] = 9.07054904E-03;
  COFD[1292] = -1.49832956E+01;
  COFD[1293] = 3.45291069E+00;
  COFD[1294] = -2.42822180E-01;
  COFD[1295] = 1.09275752E-02;
  COFD[1296] = -1.70325091E+01;
  COFD[1297] = 4.19909678E+00;
  COFD[1298] = -3.37493433E-01;
  COFD[1299] = 1.49397054E-02;
  COFD[1300] = -1.76252000E+01;
  COFD[1301] = 4.38093272E+00;
  COFD[1302] = -3.60316345E-01;
  COFD[1303] = 1.58984540E-02;
  COFD[1304] = -1.53898267E+01;
  COFD[1305] = 3.61618043E+00;
  COFD[1306] = -2.63626979E-01;
  COFD[1307] = 1.18123303E-02;
  COFD[1308] = -1.42927208E+01;
  COFD[1309] = 3.17062703E+00;
  COFD[1310] = -2.05656056E-01;
  COFD[1311] = 9.29447288E-03;
  COFD[1312] = -1.96520790E+01;
  COFD[1313] = 5.07016932E+00;
  COFD[1314] = -4.34085095E-01;
  COFD[1315] = 1.84466394E-02;
  COFD[1316] = -1.96590714E+01;
  COFD[1317] = 5.07016932E+00;
  COFD[1318] = -4.34085095E-01;
  COFD[1319] = 1.84466394E-02;
  COFD[1320] = -1.57873872E+01;
  COFD[1321] = 3.87441160E+00;
  COFD[1322] = -2.96411944E-01;
  COFD[1323] = 1.32018011E-02;
  COFD[1324] = -1.76220101E+01;
  COFD[1325] = 4.38093272E+00;
  COFD[1326] = -3.60316345E-01;
  COFD[1327] = 1.58984540E-02;
  COFD[1328] = -1.76220101E+01;
  COFD[1329] = 4.38093272E+00;
  COFD[1330] = -3.60316345E-01;
  COFD[1331] = 1.58984540E-02;
  COFD[1332] = -1.76220101E+01;
  COFD[1333] = 4.38093272E+00;
  COFD[1334] = -3.60316345E-01;
  COFD[1335] = 1.58984540E-02;
  COFD[1336] = -1.76186234E+01;
  COFD[1337] = 4.38093272E+00;
  COFD[1338] = -3.60316345E-01;
  COFD[1339] = 1.58984540E-02;
  COFD[1340] = -1.49705966E+01;
  COFD[1341] = 3.45291069E+00;
  COFD[1342] = -2.42822180E-01;
  COFD[1343] = 1.09275752E-02;
  COFD[1344] = -1.57756198E+01;
  COFD[1345] = 3.76178392E+00;
  COFD[1346] = -2.82003508E-01;
  COFD[1347] = 1.25861906E-02;
  COFD[1348] = -1.84057767E+01;
  COFD[1349] = 4.54835769E+00;
  COFD[1350] = -3.81194036E-01;
  COFD[1351] = 1.67703153E-02;
  COFD[1352] = -1.84090217E+01;
  COFD[1353] = 4.54835769E+00;
  COFD[1354] = -3.81194036E-01;
  COFD[1355] = 1.67703153E-02;
  COFD[1356] = -1.94393987E+01;
  COFD[1357] = 4.98320638E+00;
  COFD[1358] = -4.30044977E-01;
  COFD[1359] = 1.85729853E-02;
  COFD[1360] = -1.94426493E+01;
  COFD[1361] = 4.98320638E+00;
  COFD[1362] = -4.30044977E-01;
  COFD[1363] = 1.85729853E-02;
  COFD[1364] = -1.82962079E+01;
  COFD[1365] = 4.74200288E+00;
  COFD[1366] = -4.03492976E-01;
  COFD[1367] = 1.76186851E-02;
  COFD[1368] = -1.39895528E+01;
  COFD[1369] = 3.21909911E+00;
  COFD[1370] = -2.11850626E-01;
  COFD[1371] = 9.55839253E-03;
  COFD[1372] = -1.55137446E+01;
  COFD[1373] = 3.66997726E+00;
  COFD[1374] = -2.70186616E-01;
  COFD[1375] = 1.20780906E-02;
  COFD[1376] = -1.80659353E+01;
  COFD[1377] = 4.52327527E+00;
  COFD[1378] = -3.78029305E-01;
  COFD[1379] = 1.66365566E-02;
  COFD[1380] = -1.81271471E+01;
  COFD[1381] = 4.52327527E+00;
  COFD[1382] = -3.78029305E-01;
  COFD[1383] = 1.66365566E-02;
  COFD[1384] = -1.81598460E+01;
  COFD[1385] = 4.52327527E+00;
  COFD[1386] = -3.78029305E-01;
  COFD[1387] = 1.66365566E-02;
  COFD[1388] = -1.62009475E+01;
  COFD[1389] = 3.73914304E+00;
  COFD[1390] = -2.79071053E-01;
  COFD[1391] = 1.24592731E-02;
  COFD[1392] = -1.80608759E+01;
  COFD[1393] = 4.52327527E+00;
  COFD[1394] = -3.78029305E-01;
  COFD[1395] = 1.66365566E-02;
  COFD[1396] = -1.81247191E+01;
  COFD[1397] = 4.52327527E+00;
  COFD[1398] = -3.78029305E-01;
  COFD[1399] = 1.66365566E-02;
  COFD[1400] = -1.58201637E+01;
  COFD[1401] = 3.64178450E+00;
  COFD[1402] = -2.66740517E-01;
  COFD[1403] = 1.19380786E-02;
  COFD[1404] = -1.80555535E+01;
  COFD[1405] = 4.52327527E+00;
  COFD[1406] = -3.78029305E-01;
  COFD[1407] = 1.66365566E-02;
  COFD[1408] = -1.54346015E+01;
  COFD[1409] = 3.55175721E+00;
  COFD[1410] = -2.55538703E-01;
  COFD[1411] = 1.14737147E-02;
  COFD[1412] = -1.48972093E+01;
  COFD[1413] = 3.41648755E+00;
  COFD[1414] = -2.38096267E-01;
  COFD[1415] = 1.07229875E-02;
  COFD[1416] = -1.91763722E+01;
  COFD[1417] = 4.78666646E+00;
  COFD[1418] = -4.08190059E-01;
  COFD[1419] = 1.77758369E-02;
  COFD[1420] = -1.91529376E+01;
  COFD[1421] = 4.78666646E+00;
  COFD[1422] = -4.08190059E-01;
  COFD[1423] = 1.77758369E-02;
  COFD[1424] = -1.91159598E+01;
  COFD[1425] = 4.78666646E+00;
  COFD[1426] = -4.08190059E-01;
  COFD[1427] = 1.77758369E-02;
  COFD[1428] = -2.01749087E+01;
  COFD[1429] = 5.06537899E+00;
  COFD[1430] = -4.19068559E-01;
  COFD[1431] = 1.72031928E-02;
  COFD[1432] = -1.84057767E+01;
  COFD[1433] = 4.54835769E+00;
  COFD[1434] = -3.81194036E-01;
  COFD[1435] = 1.67703153E-02;
  COFD[1436] = -1.84057767E+01;
  COFD[1437] = 4.54835769E+00;
  COFD[1438] = -3.81194036E-01;
  COFD[1439] = 1.67703153E-02;
  COFD[1440] = -1.76500570E+01;
  COFD[1441] = 4.83341414E+00;
  COFD[1442] = -4.13936120E-01;
  COFD[1443] = 1.80124116E-02;
  COFD[1444] = -1.79459464E+01;
  COFD[1445] = 4.90812804E+00;
  COFD[1446] = -3.89562266E-01;
  COFD[1447] = 1.55498193E-02;
  COFD[1448] = -1.92060802E+01;
  COFD[1449] = 5.07198371E+00;
  COFD[1450] = -4.34157597E-01;
  COFD[1451] = 1.84430801E-02;
  COFD[1452] = -1.98338541E+01;
  COFD[1453] = 4.98279938E+00;
  COFD[1454] = -4.03496082E-01;
  COFD[1455] = 1.63274725E-02;
  COFD[1456] = -1.92220275E+01;
  COFD[1457] = 5.07198371E+00;
  COFD[1458] = -4.34157597E-01;
  COFD[1459] = 1.84430801E-02;
  COFD[1460] = -1.06845780E+01;
  COFD[1461] = 3.97634560E-01;
  COFD[1462] = 3.18105907E-01;
  COFD[1463] = -1.95868568E-02;
  COFD[1464] = -1.98686869E+01;
  COFD[1465] = 5.08008414E+00;
  COFD[1466] = -4.25050712E-01;
  COFD[1467] = 1.76283296E-02;
  COFD[1468] = -1.98739464E+01;
  COFD[1469] = 5.08008414E+00;
  COFD[1470] = -4.25050712E-01;
  COFD[1471] = 1.76283296E-02;
  COFD[1472] = -1.91681585E+01;
  COFD[1473] = 5.04266002E+00;
  COFD[1474] = -4.33607391E-01;
  COFD[1475] = 1.85541793E-02;
  COFD[1476] = -1.91488664E+01;
  COFD[1477] = 5.07198371E+00;
  COFD[1478] = -4.34157597E-01;
  COFD[1479] = 1.84430801E-02;
  COFD[1480] = -1.96409156E+01;
  COFD[1481] = 4.91110749E+00;
  COFD[1482] = -3.90241793E-01;
  COFD[1483] = 1.55910826E-02;
  COFD[1484] = -1.96409156E+01;
  COFD[1485] = 4.91110749E+00;
  COFD[1486] = -3.90241793E-01;
  COFD[1487] = 1.55910826E-02;
  COFD[1488] = -1.96601270E+01;
  COFD[1489] = 4.91110749E+00;
  COFD[1490] = -3.90241793E-01;
  COFD[1491] = 1.55910826E-02;
  COFD[1492] = -1.93206599E+01;
  COFD[1493] = 4.67272121E+00;
  COFD[1494] = -3.48054479E-01;
  COFD[1495] = 1.33032342E-02;
  COFD[1496] = -1.99673561E+01;
  COFD[1497] = 5.05180841E+00;
  COFD[1498] = -4.16173777E-01;
  COFD[1499] = 1.70311396E-02;
  COFD[1500] = -1.75596090E+01;
  COFD[1501] = 3.62965469E+00;
  COFD[1502] = -1.80655379E-01;
  COFD[1503] = 4.74692296E-03;
  COFD[1504] = -1.37599164E+01;
  COFD[1505] = 1.85741853E+00;
  COFD[1506] = 8.87088202E-02;
  COFD[1507] = -8.48170138E-03;
  COFD[1508] = -1.37663874E+01;
  COFD[1509] = 1.85741853E+00;
  COFD[1510] = 8.87088202E-02;
  COFD[1511] = -8.48170138E-03;
  COFD[1512] = -1.37073387E+01;
  COFD[1513] = 1.75960442E+00;
  COFD[1514] = 1.06175392E-01;
  COFD[1515] = -9.31889490E-03;
  COFD[1516] = -1.37073387E+01;
  COFD[1517] = 1.75960442E+00;
  COFD[1518] = 1.06175392E-01;
  COFD[1519] = -9.31889490E-03;
  COFD[1520] = -1.40289217E+01;
  COFD[1521] = 1.97148182E+00;
  COFD[1522] = 7.15971330E-02;
  COFD[1523] = -7.65169667E-03;
  COFD[1524] = -1.90976908E+01;
  COFD[1525] = 4.43153137E+00;
  COFD[1526] = -3.07695523E-01;
  COFD[1527] = 1.11849607E-02;
  COFD[1528] = -1.91058580E+01;
  COFD[1529] = 4.43153137E+00;
  COFD[1530] = -3.07695523E-01;
  COFD[1531] = 1.11849607E-02;
  COFD[1532] = -1.91135372E+01;
  COFD[1533] = 4.43153137E+00;
  COFD[1534] = -3.07695523E-01;
  COFD[1535] = 1.11849607E-02;
  COFD[1536] = -1.77193095E+01;
  COFD[1537] = 3.72615676E+00;
  COFD[1538] = -1.95878106E-01;
  COFD[1539] = 5.51451975E-03;
  COFD[1540] = -1.83889233E+01;
  COFD[1541] = 4.01185055E+00;
  COFD[1542] = -2.40584517E-01;
  COFD[1543] = 7.76110363E-03;
  COFD[1544] = -1.83953787E+01;
  COFD[1545] = 4.01185055E+00;
  COFD[1546] = -2.40584517E-01;
  COFD[1547] = 7.76110363E-03;
  COFD[1548] = -1.94095019E+01;
  COFD[1549] = 4.89210282E+00;
  COFD[1550] = -3.86038601E-01;
  COFD[1551] = 1.53387922E-02;
  COFD[1552] = -1.48729550E+01;
  COFD[1553] = 2.30323591E+00;
  COFD[1554] = 2.16662124E-02;
  COFD[1555] = -5.22336631E-03;
  COFD[1556] = -1.48729550E+01;
  COFD[1557] = 2.30323591E+00;
  COFD[1558] = 2.16662124E-02;
  COFD[1559] = -5.22336631E-03;
  COFD[1560] = -1.92128459E+01;
  COFD[1561] = 5.04266002E+00;
  COFD[1562] = -4.33607391E-01;
  COFD[1563] = 1.85541793E-02;
  COFD[1564] = -1.91513185E+01;
  COFD[1565] = 5.07198371E+00;
  COFD[1566] = -4.34157597E-01;
  COFD[1567] = 1.84430801E-02;
  COFD[1568] = -1.92283060E+01;
  COFD[1569] = 4.81238763E+00;
  COFD[1570] = -3.71292840E-01;
  COFD[1571] = 1.45213046E-02;
  COFD[1572] = -1.23197577E+01;
  COFD[1573] = 1.23214305E+00;
  COFD[1574] = 1.88509482E-01;
  COFD[1575] = -1.33545186E-02;
  COFD[1576] = -1.95474506E+01;
  COFD[1577] = 5.04266002E+00;
  COFD[1578] = -4.33607391E-01;
  COFD[1579] = 1.85541793E-02;
  COFD[1580] = -1.99796913E+01;
  COFD[1581] = 5.06422780E+00;
  COFD[1582] = -4.18763984E-01;
  COFD[1583] = 1.71836367E-02;
  COFD[1584] = -1.91326687E+01;
  COFD[1585] = 4.49891559E+00;
  COFD[1586] = -3.18945742E-01;
  COFD[1587] = 1.17738080E-02;
  COFD[1588] = -1.87002631E+01;
  COFD[1589] = 4.21062259E+00;
  COFD[1590] = -2.72117720E-01;
  COFD[1591] = 9.36166287E-03;
  COFD[1592] = -1.99128699E+01;
  COFD[1593] = 5.07019743E+00;
  COFD[1594] = -4.20771044E-01;
  COFD[1595] = 1.73206308E-02;
  COFD[1596] = -1.96111069E+01;
  COFD[1597] = 5.05596840E+00;
  COFD[1598] = -4.33922312E-01;
  COFD[1599] = 1.85091254E-02;
  COFD[1600] = -1.26396168E+01;
  COFD[1601] = 1.33209942E+00;
  COFD[1602] = 1.66763686E-01;
  COFD[1603] = -1.22430611E-02;
  COFD[1604] = -1.26468597E+01;
  COFD[1605] = 1.33209942E+00;
  COFD[1606] = 1.66763686E-01;
  COFD[1607] = -1.22430611E-02;
  COFD[1608] = -1.94095167E+01;
  COFD[1609] = 4.89210282E+00;
  COFD[1610] = -3.86038601E-01;
  COFD[1611] = 1.53387922E-02;
  COFD[1612] = -1.86969395E+01;
  COFD[1613] = 4.21062259E+00;
  COFD[1614] = -2.72117720E-01;
  COFD[1615] = 9.36166287E-03;
  COFD[1616] = -1.86969395E+01;
  COFD[1617] = 4.21062259E+00;
  COFD[1618] = -2.72117720E-01;
  COFD[1619] = 9.36166287E-03;
  COFD[1620] = -1.86969395E+01;
  COFD[1621] = 4.21062259E+00;
  COFD[1622] = -2.72117720E-01;
  COFD[1623] = 9.36166287E-03;
  COFD[1624] = -1.86934118E+01;
  COFD[1625] = 4.21062259E+00;
  COFD[1626] = -2.72117720E-01;
  COFD[1627] = 9.36166287E-03;
  COFD[1628] = -1.99665282E+01;
  COFD[1629] = 5.06422780E+00;
  COFD[1630] = -4.18763984E-01;
  COFD[1631] = 1.71836367E-02;
  COFD[1632] = -1.97673840E+01;
  COFD[1633] = 4.95338757E+00;
  COFD[1634] = -3.98228674E-01;
  COFD[1635] = 1.60392324E-02;
  COFD[1636] = -1.83546056E+01;
  COFD[1637] = 3.86526682E+00;
  COFD[1638] = -2.17594533E-01;
  COFD[1639] = 6.60377130E-03;
  COFD[1640] = -1.83579866E+01;
  COFD[1641] = 3.86526682E+00;
  COFD[1642] = -2.17594533E-01;
  COFD[1643] = 6.60377130E-03;
  COFD[1644] = -1.48764799E+01;
  COFD[1645] = 2.30323591E+00;
  COFD[1646] = 2.16662124E-02;
  COFD[1647] = -5.22336631E-03;
  COFD[1648] = -1.48798668E+01;
  COFD[1649] = 2.30323591E+00;
  COFD[1650] = 2.16662124E-02;
  COFD[1651] = -5.22336631E-03;
  COFD[1652] = -1.35070497E+01;
  COFD[1653] = 1.64162220E+00;
  COFD[1654] = 1.36732023E-01;
  COFD[1655] = -1.11479241E-02;
  COFD[1656] = -1.92497406E+01;
  COFD[1657] = 5.07198371E+00;
  COFD[1658] = -4.34157597E-01;
  COFD[1659] = 1.84430801E-02;
  COFD[1660] = -1.96788916E+01;
  COFD[1661] = 4.86211402E+00;
  COFD[1662] = -3.80056946E-01;
  COFD[1663] = 1.49954050E-02;
  COFD[1664] = -1.63399624E+01;
  COFD[1665] = 2.95214121E+00;
  COFD[1666] = -7.24781700E-02;
  COFD[1667] = -6.81785200E-04;
  COFD[1668] = -1.64037042E+01;
  COFD[1669] = 2.95214121E+00;
  COFD[1670] = -7.24781700E-02;
  COFD[1671] = -6.81785200E-04;
  COFD[1672] = -1.64378930E+01;
  COFD[1673] = 2.95214121E+00;
  COFD[1674] = -7.24781700E-02;
  COFD[1675] = -6.81785200E-04;
  COFD[1676] = -2.02942337E+01;
  COFD[1677] = 4.97291367E+00;
  COFD[1678] = -4.01719707E-01;
  COFD[1679] = 1.62300804E-02;
  COFD[1680] = -1.63347080E+01;
  COFD[1681] = 2.95214121E+00;
  COFD[1682] = -7.24781700E-02;
  COFD[1683] = -6.81785200E-04;
  COFD[1684] = -1.64011695E+01;
  COFD[1685] = 2.95214121E+00;
  COFD[1686] = -7.24781700E-02;
  COFD[1687] = -6.81785200E-04;
  COFD[1688] = -2.02931481E+01;
  COFD[1689] = 5.06286299E+00;
  COFD[1690] = -4.18465666E-01;
  COFD[1691] = 1.71657272E-02;
  COFD[1692] = -1.63291826E+01;
  COFD[1693] = 2.95214121E+00;
  COFD[1694] = -7.24781700E-02;
  COFD[1695] = -6.81785200E-04;
  COFD[1696] = -2.00964701E+01;
  COFD[1697] = 5.07793336E+00;
  COFD[1698] = -4.24547067E-01;
  COFD[1699] = 1.75972328E-02;
  COFD[1700] = -1.98798206E+01;
  COFD[1701] = 5.11111188E+00;
  COFD[1702] = -4.34123003E-01;
  COFD[1703] = 1.82302519E-02;
  COFD[1704] = -1.68818955E+01;
  COFD[1705] = 3.09904731E+00;
  COFD[1706] = -9.86468170E-02;
  COFD[1707] = 6.66368066E-04;
  COFD[1708] = -1.68573426E+01;
  COFD[1709] = 3.09904731E+00;
  COFD[1710] = -9.86468170E-02;
  COFD[1711] = 6.66368066E-04;
  COFD[1712] = -1.68187080E+01;
  COFD[1713] = 3.09904731E+00;
  COFD[1714] = -9.86468170E-02;
  COFD[1715] = 6.66368066E-04;
  COFD[1716] = -9.22716565E+00;
  COFD[1717] = -3.30774705E-01;
  COFD[1718] = 4.09067100E-01;
  COFD[1719] = -2.37067046E-02;
  COFD[1720] = -1.83546056E+01;
  COFD[1721] = 3.86526682E+00;
  COFD[1722] = -2.17594533E-01;
  COFD[1723] = 6.60377130E-03;
  COFD[1724] = -1.83546056E+01;
  COFD[1725] = 3.86526682E+00;
  COFD[1726] = -2.17594533E-01;
  COFD[1727] = 6.60377130E-03;
  COFD[1728] = -1.24653356E+01;
  COFD[1729] = 2.81929703E+00;
  COFD[1730] = -1.58997419E-01;
  COFD[1731] = 7.22675698E-03;
  COFD[1732] = -1.54219042E+01;
  COFD[1733] = 4.16714450E+00;
  COFD[1734] = -3.33485966E-01;
  COFD[1735] = 1.47716776E-02;
  COFD[1736] = -1.51786267E+01;
  COFD[1737] = 3.54673926E+00;
  COFD[1738] = -2.54900443E-01;
  COFD[1739] = 1.14466286E-02;
  COFD[1740] = -1.63643527E+01;
  COFD[1741] = 3.82801980E+00;
  COFD[1742] = -2.90506588E-01;
  COFD[1743] = 1.29507729E-02;
  COFD[1744] = -1.51989958E+01;
  COFD[1745] = 3.54673926E+00;
  COFD[1746] = -2.54900443E-01;
  COFD[1747] = 1.14466286E-02;
  COFD[1748] = -1.98686869E+01;
  COFD[1749] = 5.08008414E+00;
  COFD[1750] = -4.25050712E-01;
  COFD[1751] = 1.76283296E-02;
  COFD[1752] = -1.63721668E+01;
  COFD[1753] = 3.82801980E+00;
  COFD[1754] = -2.90506588E-01;
  COFD[1755] = 1.29507729E-02;
  COFD[1756] = -1.63796310E+01;
  COFD[1757] = 3.82801980E+00;
  COFD[1758] = -2.90506588E-01;
  COFD[1759] = 1.29507729E-02;
  COFD[1760] = -1.49471395E+01;
  COFD[1761] = 3.43432294E+00;
  COFD[1762] = -2.40398689E-01;
  COFD[1763] = 1.08220935E-02;
  COFD[1764] = -1.51069373E+01;
  COFD[1765] = 3.54673926E+00;
  COFD[1766] = -2.54900443E-01;
  COFD[1767] = 1.14466286E-02;
  COFD[1768] = -1.71121144E+01;
  COFD[1769] = 4.16164957E+00;
  COFD[1770] = -3.32841595E-01;
  COFD[1771] = 1.47466698E-02;
  COFD[1772] = -1.71121144E+01;
  COFD[1773] = 4.16164957E+00;
  COFD[1774] = -3.32841595E-01;
  COFD[1775] = 1.47466698E-02;
  COFD[1776] = -1.71362101E+01;
  COFD[1777] = 4.16164957E+00;
  COFD[1778] = -3.32841595E-01;
  COFD[1779] = 1.47466698E-02;
  COFD[1780] = -1.71001979E+01;
  COFD[1781] = 4.14674488E+00;
  COFD[1782] = -3.31073361E-01;
  COFD[1783] = 1.46770434E-02;
  COFD[1784] = -1.60932830E+01;
  COFD[1785] = 3.71857850E+00;
  COFD[1786] = -2.76412050E-01;
  COFD[1787] = 1.23444010E-02;
  COFD[1788] = -1.90439565E+01;
  COFD[1789] = 4.73697533E+00;
  COFD[1790] = -4.02980928E-01;
  COFD[1791] = 1.76024499E-02;
  COFD[1792] = -2.02662354E+01;
  COFD[1793] = 5.11001220E+00;
  COFD[1794] = -4.34250370E-01;
  COFD[1795] = 1.82469603E-02;
  COFD[1796] = -2.02752485E+01;
  COFD[1797] = 5.11001220E+00;
  COFD[1798] = -4.34250370E-01;
  COFD[1799] = 1.82469603E-02;
  COFD[1800] = -2.00702846E+01;
  COFD[1801] = 5.06556230E+00;
  COFD[1802] = -4.33937013E-01;
  COFD[1803] = 1.84587392E-02;
  COFD[1804] = -2.00702846E+01;
  COFD[1805] = 5.06556230E+00;
  COFD[1806] = -4.33937013E-01;
  COFD[1807] = 1.84587392E-02;
  COFD[1808] = -2.02580270E+01;
  COFD[1809] = 5.10232072E+00;
  COFD[1810] = -4.34295533E-01;
  COFD[1811] = 1.82918502E-02;
  COFD[1812] = -1.86096275E+01;
  COFD[1813] = 4.61053888E+00;
  COFD[1814] = -3.88890034E-01;
  COFD[1815] = 1.70889977E-02;
  COFD[1816] = -1.86207588E+01;
  COFD[1817] = 4.61053888E+00;
  COFD[1818] = -3.88890034E-01;
  COFD[1819] = 1.70889977E-02;
  COFD[1820] = -1.86312858E+01;
  COFD[1821] = 4.61053888E+00;
  COFD[1822] = -3.88890034E-01;
  COFD[1823] = 1.70889977E-02;
  COFD[1824] = -1.93934993E+01;
  COFD[1825] = 4.87165772E+00;
  COFD[1826] = -4.18324132E-01;
  COFD[1827] = 1.81788987E-02;
  COFD[1828] = -1.91615620E+01;
  COFD[1829] = 4.75936146E+00;
  COFD[1830] = -4.05242301E-01;
  COFD[1831] = 1.76731043E-02;
  COFD[1832] = -1.91705553E+01;
  COFD[1833] = 4.75936146E+00;
  COFD[1834] = -4.05242301E-01;
  COFD[1835] = 1.76731043E-02;
  COFD[1836] = -1.71528769E+01;
  COFD[1837] = 4.20727805E+00;
  COFD[1838] = -3.38518137E-01;
  COFD[1839] = 1.49826208E-02;
  COFD[1840] = -2.02842857E+01;
  COFD[1841] = 5.07906191E+00;
  COFD[1842] = -4.34414251E-01;
  COFD[1843] = 1.84266796E-02;
  COFD[1844] = -2.02842857E+01;
  COFD[1845] = 5.07906191E+00;
  COFD[1846] = -4.34414251E-01;
  COFD[1847] = 1.84266796E-02;
  COFD[1848] = -1.50023146E+01;
  COFD[1849] = 3.43432294E+00;
  COFD[1850] = -2.40398689E-01;
  COFD[1851] = 1.08220935E-02;
  COFD[1852] = -1.51245516E+01;
  COFD[1853] = 3.54673926E+00;
  COFD[1854] = -2.54900443E-01;
  COFD[1855] = 1.14466286E-02;
  COFD[1856] = -1.51466526E+01;
  COFD[1857] = 3.54673926E+00;
  COFD[1858] = -2.54900443E-01;
  COFD[1859] = 1.14466286E-02;
  COFD[1860] = -1.98607935E+01;
  COFD[1861] = 5.10183770E+00;
  COFD[1862] = -4.34283869E-01;
  COFD[1863] = 1.82934402E-02;
  COFD[1864] = -1.53707777E+01;
  COFD[1865] = 3.43432294E+00;
  COFD[1866] = -2.40398689E-01;
  COFD[1867] = 1.08220935E-02;
  COFD[1868] = -1.60868461E+01;
  COFD[1869] = 3.71236773E+00;
  COFD[1870] = -2.75612682E-01;
  COFD[1871] = 1.23100131E-02;
  COFD[1872] = -1.84460561E+01;
  COFD[1873] = 4.55714003E+00;
  COFD[1874] = -3.82304130E-01;
  COFD[1875] = 1.68173362E-02;
  COFD[1876] = -1.89469698E+01;
  COFD[1877] = 4.70017385E+00;
  COFD[1878] = -3.99010079E-01;
  COFD[1879] = 1.74642383E-02;
  COFD[1880] = -1.66306324E+01;
  COFD[1881] = 3.92641057E+00;
  COFD[1882] = -3.03041624E-01;
  COFD[1883] = 1.34843019E-02;
  COFD[1884] = -1.54935213E+01;
  COFD[1885] = 3.48610358E+00;
  COFD[1886] = -2.47139842E-01;
  COFD[1887] = 1.11151150E-02;
  COFD[1888] = -2.03031742E+01;
  COFD[1889] = 5.08245277E+00;
  COFD[1890] = -4.25599233E-01;
  COFD[1891] = 1.76620606E-02;
  COFD[1892] = -2.03131578E+01;
  COFD[1893] = 5.08245277E+00;
  COFD[1894] = -4.25599233E-01;
  COFD[1895] = 1.76620606E-02;
  COFD[1896] = -1.71528986E+01;
  COFD[1897] = 4.20727805E+00;
  COFD[1898] = -3.38518137E-01;
  COFD[1899] = 1.49826208E-02;
  COFD[1900] = -1.89420734E+01;
  COFD[1901] = 4.70017385E+00;
  COFD[1902] = -3.99010079E-01;
  COFD[1903] = 1.74642383E-02;
  COFD[1904] = -1.89420734E+01;
  COFD[1905] = 4.70017385E+00;
  COFD[1906] = -3.99010079E-01;
  COFD[1907] = 1.74642383E-02;
  COFD[1908] = -1.89420734E+01;
  COFD[1909] = 4.70017385E+00;
  COFD[1910] = -3.99010079E-01;
  COFD[1911] = 1.74642383E-02;
  COFD[1912] = -1.89368931E+01;
  COFD[1913] = 4.70017385E+00;
  COFD[1914] = -3.99010079E-01;
  COFD[1915] = 1.74642383E-02;
  COFD[1916] = -1.60685613E+01;
  COFD[1917] = 3.71236773E+00;
  COFD[1918] = -2.75612682E-01;
  COFD[1919] = 1.23100131E-02;
  COFD[1920] = -1.71510142E+01;
  COFD[1921] = 4.11579280E+00;
  COFD[1922] = -3.27325412E-01;
  COFD[1923] = 1.45259007E-02;
  COFD[1924] = -1.95904286E+01;
  COFD[1925] = 4.81568564E+00;
  COFD[1926] = -4.11759763E-01;
  COFD[1927] = 1.79229378E-02;
  COFD[1928] = -1.95954108E+01;
  COFD[1929] = 4.81568564E+00;
  COFD[1930] = -4.11759763E-01;
  COFD[1931] = 1.79229378E-02;
  COFD[1932] = -2.02894622E+01;
  COFD[1933] = 5.07906191E+00;
  COFD[1934] = -4.34414251E-01;
  COFD[1935] = 1.84266796E-02;
  COFD[1936] = -2.02944523E+01;
  COFD[1937] = 5.07906191E+00;
  COFD[1938] = -4.34414251E-01;
  COFD[1939] = 1.84266796E-02;
  COFD[1940] = -1.94474837E+01;
  COFD[1941] = 4.99196238E+00;
  COFD[1942] = -4.30803728E-01;
  COFD[1943] = 1.85900660E-02;
  COFD[1944] = -1.52348381E+01;
  COFD[1945] = 3.54673926E+00;
  COFD[1946] = -2.54900443E-01;
  COFD[1947] = 1.14466286E-02;
  COFD[1948] = -1.68759479E+01;
  COFD[1949] = 4.02108688E+00;
  COFD[1950] = -3.15255763E-01;
  COFD[1951] = 1.40113686E-02;
  COFD[1952] = -1.92534374E+01;
  COFD[1953] = 4.79132523E+00;
  COFD[1954] = -4.08760786E-01;
  COFD[1955] = 1.77992375E-02;
  COFD[1956] = -1.93467562E+01;
  COFD[1957] = 4.79132523E+00;
  COFD[1958] = -4.08760786E-01;
  COFD[1959] = 1.77992375E-02;
  COFD[1960] = -1.93992929E+01;
  COFD[1961] = 4.79132523E+00;
  COFD[1962] = -4.08760786E-01;
  COFD[1963] = 1.77992375E-02;
  COFD[1964] = -1.76022029E+01;
  COFD[1965] = 4.09821096E+00;
  COFD[1966] = -3.25157935E-01;
  COFD[1967] = 1.44367395E-02;
  COFD[1968] = -1.92459797E+01;
  COFD[1969] = 4.79132523E+00;
  COFD[1970] = -4.08760786E-01;
  COFD[1971] = 1.77992375E-02;
  COFD[1972] = -1.93429360E+01;
  COFD[1973] = 4.79132523E+00;
  COFD[1974] = -4.08760786E-01;
  COFD[1975] = 1.77992375E-02;
  COFD[1976] = -1.71475164E+01;
  COFD[1977] = 3.97361950E+00;
  COFD[1978] = -3.09153622E-01;
  COFD[1979] = 1.37490623E-02;
  COFD[1980] = -1.92381726E+01;
  COFD[1981] = 4.79132523E+00;
  COFD[1982] = -4.08760786E-01;
  COFD[1983] = 1.77992375E-02;
  COFD[1984] = -1.66275725E+01;
  COFD[1985] = 3.83453701E+00;
  COFD[1986] = -2.91336346E-01;
  COFD[1987] = 1.29860457E-02;
  COFD[1988] = -1.60021803E+01;
  COFD[1989] = 3.67614463E+00;
  COFD[1990] = -2.70973934E-01;
  COFD[1991] = 1.21116433E-02;
  COFD[1992] = -2.03547846E+01;
  COFD[1993] = 5.02233352E+00;
  COFD[1994] = -4.33327965E-01;
  COFD[1995] = 1.86406390E-02;
  COFD[1996] = -2.03160725E+01;
  COFD[1997] = 5.02233352E+00;
  COFD[1998] = -4.33327965E-01;
  COFD[1999] = 1.86406390E-02;
  COFD[2000] = -2.02572266E+01;
  COFD[2001] = 5.02233352E+00;
  COFD[2002] = -4.33327965E-01;
  COFD[2003] = 1.86406390E-02;
  COFD[2004] = -2.03218550E+01;
  COFD[2005] = 4.83724546E+00;
  COFD[2006] = -3.75588934E-01;
  COFD[2007] = 1.47513066E-02;
  COFD[2008] = -1.95904286E+01;
  COFD[2009] = 4.81568564E+00;
  COFD[2010] = -4.11759763E-01;
  COFD[2011] = 1.79229378E-02;
  COFD[2012] = -1.95904286E+01;
  COFD[2013] = 4.81568564E+00;
  COFD[2014] = -4.11759763E-01;
  COFD[2015] = 1.79229378E-02;
  COFD[2016] = -1.24661893E+01;
  COFD[2017] = 2.81929703E+00;
  COFD[2018] = -1.58997419E-01;
  COFD[2019] = 7.22675698E-03;
  COFD[2020] = -1.54223435E+01;
  COFD[2021] = 4.16714450E+00;
  COFD[2022] = -3.33485966E-01;
  COFD[2023] = 1.47716776E-02;
  COFD[2024] = -1.51834878E+01;
  COFD[2025] = 3.54673926E+00;
  COFD[2026] = -2.54900443E-01;
  COFD[2027] = 1.14466286E-02;
  COFD[2028] = -1.63717003E+01;
  COFD[2029] = 3.82801980E+00;
  COFD[2030] = -2.90506588E-01;
  COFD[2031] = 1.29507729E-02;
  COFD[2032] = -1.52040601E+01;
  COFD[2033] = 3.54673926E+00;
  COFD[2034] = -2.54900443E-01;
  COFD[2035] = 1.14466286E-02;
  COFD[2036] = -1.98739464E+01;
  COFD[2037] = 5.08008414E+00;
  COFD[2038] = -4.25050712E-01;
  COFD[2039] = 1.76283296E-02;
  COFD[2040] = -1.63796310E+01;
  COFD[2041] = 3.82801980E+00;
  COFD[2042] = -2.90506588E-01;
  COFD[2043] = 1.29507729E-02;
  COFD[2044] = -1.63872082E+01;
  COFD[2045] = 3.82801980E+00;
  COFD[2046] = -2.90506588E-01;
  COFD[2047] = 1.29507729E-02;
  COFD[2048] = -1.49511086E+01;
  COFD[2049] = 3.43432294E+00;
  COFD[2050] = -2.40398689E-01;
  COFD[2051] = 1.08220935E-02;
  COFD[2052] = -1.51111464E+01;
  COFD[2053] = 3.54673926E+00;
  COFD[2054] = -2.54900443E-01;
  COFD[2055] = 1.14466286E-02;
  COFD[2056] = -1.71165531E+01;
  COFD[2057] = 4.16164957E+00;
  COFD[2058] = -3.32841595E-01;
  COFD[2059] = 1.47466698E-02;
  COFD[2060] = -1.71165531E+01;
  COFD[2061] = 4.16164957E+00;
  COFD[2062] = -3.32841595E-01;
  COFD[2063] = 1.47466698E-02;
  COFD[2064] = -1.71408690E+01;
  COFD[2065] = 4.16164957E+00;
  COFD[2066] = -3.32841595E-01;
  COFD[2067] = 1.47466698E-02;
  COFD[2068] = -1.71050681E+01;
  COFD[2069] = 4.14674488E+00;
  COFD[2070] = -3.31073361E-01;
  COFD[2071] = 1.46770434E-02;
  COFD[2072] = -1.61001317E+01;
  COFD[2073] = 3.71857850E+00;
  COFD[2074] = -2.76412050E-01;
  COFD[2075] = 1.23444010E-02;
  COFD[2076] = -1.90524962E+01;
  COFD[2077] = 4.73697533E+00;
  COFD[2078] = -4.02980928E-01;
  COFD[2079] = 1.76024499E-02;
  COFD[2080] = -2.02732162E+01;
  COFD[2081] = 5.11001220E+00;
  COFD[2082] = -4.34250370E-01;
  COFD[2083] = 1.82469603E-02;
  COFD[2084] = -2.02823572E+01;
  COFD[2085] = 5.11001220E+00;
  COFD[2086] = -4.34250370E-01;
  COFD[2087] = 1.82469603E-02;
  COFD[2088] = -2.00775172E+01;
  COFD[2089] = 5.06556230E+00;
  COFD[2090] = -4.33937013E-01;
  COFD[2091] = 1.84587392E-02;
  COFD[2092] = -2.00775172E+01;
  COFD[2093] = 5.06556230E+00;
  COFD[2094] = -4.33937013E-01;
  COFD[2095] = 1.84587392E-02;
  COFD[2096] = -2.02653798E+01;
  COFD[2097] = 5.10232072E+00;
  COFD[2098] = -4.34295533E-01;
  COFD[2099] = 1.82918502E-02;
  COFD[2100] = -1.86160592E+01;
  COFD[2101] = 4.61053888E+00;
  COFD[2102] = -3.88890034E-01;
  COFD[2103] = 1.70889977E-02;
  COFD[2104] = -1.86273362E+01;
  COFD[2105] = 4.61053888E+00;
  COFD[2106] = -3.88890034E-01;
  COFD[2107] = 1.70889977E-02;
  COFD[2108] = -1.86380042E+01;
  COFD[2109] = 4.61053888E+00;
  COFD[2110] = -3.88890034E-01;
  COFD[2111] = 1.70889977E-02;
  COFD[2112] = -1.94003540E+01;
  COFD[2113] = 4.87165772E+00;
  COFD[2114] = -4.18324132E-01;
  COFD[2115] = 1.81788987E-02;
  COFD[2116] = -1.91685485E+01;
  COFD[2117] = 4.75936146E+00;
  COFD[2118] = -4.05242301E-01;
  COFD[2119] = 1.76731043E-02;
  COFD[2120] = -1.91776696E+01;
  COFD[2121] = 4.75936146E+00;
  COFD[2122] = -4.05242301E-01;
  COFD[2123] = 1.76731043E-02;
  COFD[2124] = -1.71611566E+01;
  COFD[2125] = 4.20727805E+00;
  COFD[2126] = -3.38518137E-01;
  COFD[2127] = 1.49826208E-02;
  COFD[2128] = -2.02926557E+01;
  COFD[2129] = 5.07906191E+00;
  COFD[2130] = -4.34414251E-01;
  COFD[2131] = 1.84266796E-02;
  COFD[2132] = -2.02926557E+01;
  COFD[2133] = 5.07906191E+00;
  COFD[2134] = -4.34414251E-01;
  COFD[2135] = 1.84266796E-02;
  COFD[2136] = -1.50067489E+01;
  COFD[2137] = 3.43432294E+00;
  COFD[2138] = -2.40398689E-01;
  COFD[2139] = 1.08220935E-02;
  COFD[2140] = -1.51292063E+01;
  COFD[2141] = 3.54673926E+00;
  COFD[2142] = -2.54900443E-01;
  COFD[2143] = 1.14466286E-02;
  COFD[2144] = -1.51515186E+01;
  COFD[2145] = 3.54673926E+00;
  COFD[2146] = -2.54900443E-01;
  COFD[2147] = 1.14466286E-02;
  COFD[2148] = -1.98658625E+01;
  COFD[2149] = 5.10183770E+00;
  COFD[2150] = -4.34283869E-01;
  COFD[2151] = 1.82934402E-02;
  COFD[2152] = -1.53777591E+01;
  COFD[2153] = 3.43432294E+00;
  COFD[2154] = -2.40398689E-01;
  COFD[2155] = 1.08220935E-02;
  COFD[2156] = -1.60939523E+01;
  COFD[2157] = 3.71236773E+00;
  COFD[2158] = -2.75612682E-01;
  COFD[2159] = 1.23100131E-02;
  COFD[2160] = -1.84547590E+01;
  COFD[2161] = 4.55714003E+00;
  COFD[2162] = -3.82304130E-01;
  COFD[2163] = 1.68173362E-02;
  COFD[2164] = -1.89555098E+01;
  COFD[2165] = 4.70017385E+00;
  COFD[2166] = -3.99010079E-01;
  COFD[2167] = 1.74642383E-02;
  COFD[2168] = -1.66378626E+01;
  COFD[2169] = 3.92641057E+00;
  COFD[2170] = -3.03041624E-01;
  COFD[2171] = 1.34843019E-02;
  COFD[2172] = -1.55000959E+01;
  COFD[2173] = 3.48610358E+00;
  COFD[2174] = -2.47139842E-01;
  COFD[2175] = 1.11151150E-02;
  COFD[2176] = -2.03098898E+01;
  COFD[2177] = 5.08245277E+00;
  COFD[2178] = -4.25599233E-01;
  COFD[2179] = 1.76620606E-02;
  COFD[2180] = -2.03200097E+01;
  COFD[2181] = 5.08245277E+00;
  COFD[2182] = -4.25599233E-01;
  COFD[2183] = 1.76620606E-02;
  COFD[2184] = -1.71611787E+01;
  COFD[2185] = 4.20727805E+00;
  COFD[2186] = -3.38518137E-01;
  COFD[2187] = 1.49826208E-02;
  COFD[2188] = -1.89505295E+01;
  COFD[2189] = 4.70017385E+00;
  COFD[2190] = -3.99010079E-01;
  COFD[2191] = 1.74642383E-02;
  COFD[2192] = -1.89505295E+01;
  COFD[2193] = 4.70017385E+00;
  COFD[2194] = -3.99010079E-01;
  COFD[2195] = 1.74642383E-02;
  COFD[2196] = -1.89505295E+01;
  COFD[2197] = 4.70017385E+00;
  COFD[2198] = -3.99010079E-01;
  COFD[2199] = 1.74642383E-02;
  COFD[2200] = -1.89452613E+01;
  COFD[2201] = 4.70017385E+00;
  COFD[2202] = -3.99010079E-01;
  COFD[2203] = 1.74642383E-02;
  COFD[2204] = -1.60754107E+01;
  COFD[2205] = 3.71236773E+00;
  COFD[2206] = -2.75612682E-01;
  COFD[2207] = 1.23100131E-02;
  COFD[2208] = -1.71591946E+01;
  COFD[2209] = 4.11579280E+00;
  COFD[2210] = -3.27325412E-01;
  COFD[2211] = 1.45259007E-02;
  COFD[2212] = -1.95988902E+01;
  COFD[2213] = 4.81568564E+00;
  COFD[2214] = -4.11759763E-01;
  COFD[2215] = 1.79229378E-02;
  COFD[2216] = -1.96039579E+01;
  COFD[2217] = 4.81568564E+00;
  COFD[2218] = -4.11759763E-01;
  COFD[2219] = 1.79229378E-02;
  COFD[2220] = -2.02979200E+01;
  COFD[2221] = 5.07906191E+00;
  COFD[2222] = -4.34414251E-01;
  COFD[2223] = 1.84266796E-02;
  COFD[2224] = -2.03029957E+01;
  COFD[2225] = 5.07906191E+00;
  COFD[2226] = -4.34414251E-01;
  COFD[2227] = 1.84266796E-02;
  COFD[2228] = -1.94531072E+01;
  COFD[2229] = 4.99196238E+00;
  COFD[2230] = -4.30803728E-01;
  COFD[2231] = 1.85900660E-02;
  COFD[2232] = -1.52402807E+01;
  COFD[2233] = 3.54673926E+00;
  COFD[2234] = -2.54900443E-01;
  COFD[2235] = 1.14466286E-02;
  COFD[2236] = -1.68839409E+01;
  COFD[2237] = 4.02108688E+00;
  COFD[2238] = -3.15255763E-01;
  COFD[2239] = 1.40113686E-02;
  COFD[2240] = -1.92610168E+01;
  COFD[2241] = 4.79132523E+00;
  COFD[2242] = -4.08760786E-01;
  COFD[2243] = 1.77992375E-02;
  COFD[2244] = -1.93559051E+01;
  COFD[2245] = 4.79132523E+00;
  COFD[2246] = -4.08760786E-01;
  COFD[2247] = 1.77992375E-02;
  COFD[2248] = -1.94094659E+01;
  COFD[2249] = 4.79132523E+00;
  COFD[2250] = -4.08760786E-01;
  COFD[2251] = 1.77992375E-02;
  COFD[2252] = -1.76130966E+01;
  COFD[2253] = 4.09821096E+00;
  COFD[2254] = -3.25157935E-01;
  COFD[2255] = 1.44367395E-02;
  COFD[2256] = -1.92534461E+01;
  COFD[2257] = 4.79132523E+00;
  COFD[2258] = -4.08760786E-01;
  COFD[2259] = 1.77992375E-02;
  COFD[2260] = -1.93520146E+01;
  COFD[2261] = 4.79132523E+00;
  COFD[2262] = -4.08760786E-01;
  COFD[2263] = 1.77992375E-02;
  COFD[2264] = -1.71576415E+01;
  COFD[2265] = 3.97361950E+00;
  COFD[2266] = -3.09153622E-01;
  COFD[2267] = 1.37490623E-02;
  COFD[2268] = -1.92455224E+01;
  COFD[2269] = 4.79132523E+00;
  COFD[2270] = -4.08760786E-01;
  COFD[2271] = 1.77992375E-02;
  COFD[2272] = -1.66365792E+01;
  COFD[2273] = 3.83453701E+00;
  COFD[2274] = -2.91336346E-01;
  COFD[2275] = 1.29860457E-02;
  COFD[2276] = -1.60094100E+01;
  COFD[2277] = 3.67614463E+00;
  COFD[2278] = -2.70973934E-01;
  COFD[2279] = 1.21116433E-02;
  COFD[2280] = -2.03655734E+01;
  COFD[2281] = 5.02233352E+00;
  COFD[2282] = -4.33327965E-01;
  COFD[2283] = 1.86406390E-02;
  COFD[2284] = -2.03260494E+01;
  COFD[2285] = 5.02233352E+00;
  COFD[2286] = -4.33327965E-01;
  COFD[2287] = 1.86406390E-02;
  COFD[2288] = -2.02660859E+01;
  COFD[2289] = 5.02233352E+00;
  COFD[2290] = -4.33327965E-01;
  COFD[2291] = 1.86406390E-02;
  COFD[2292] = -2.03306369E+01;
  COFD[2293] = 4.83724546E+00;
  COFD[2294] = -3.75588934E-01;
  COFD[2295] = 1.47513066E-02;
  COFD[2296] = -1.95988902E+01;
  COFD[2297] = 4.81568564E+00;
  COFD[2298] = -4.11759763E-01;
  COFD[2299] = 1.79229378E-02;
  COFD[2300] = -1.95988902E+01;
  COFD[2301] = 4.81568564E+00;
  COFD[2302] = -4.11759763E-01;
  COFD[2303] = 1.79229378E-02;
  COFD[2304] = -1.14408813E+01;
  COFD[2305] = 2.45139089E+00;
  COFD[2306] = -1.08437807E-01;
  COFD[2307] = 4.90682837E-03;
  COFD[2308] = -1.40793218E+01;
  COFD[2309] = 3.70003870E+00;
  COFD[2310] = -2.74031258E-01;
  COFD[2311] = 1.22422674E-02;
  COFD[2312] = -1.38071869E+01;
  COFD[2313] = 3.13068087E+00;
  COFD[2314] = -2.00477755E-01;
  COFD[2315] = 9.07054904E-03;
  COFD[2316] = -1.49429545E+01;
  COFD[2317] = 3.43432294E+00;
  COFD[2318] = -2.40398689E-01;
  COFD[2319] = 1.08220935E-02;
  COFD[2320] = -1.38200590E+01;
  COFD[2321] = 3.13068087E+00;
  COFD[2322] = -2.00477755E-01;
  COFD[2323] = 9.07054904E-03;
  COFD[2324] = -1.91681585E+01;
  COFD[2325] = 5.04266002E+00;
  COFD[2326] = -4.33607391E-01;
  COFD[2327] = 1.85541793E-02;
  COFD[2328] = -1.49471395E+01;
  COFD[2329] = 3.43432294E+00;
  COFD[2330] = -2.40398689E-01;
  COFD[2331] = 1.08220935E-02;
  COFD[2332] = -1.49511086E+01;
  COFD[2333] = 3.43432294E+00;
  COFD[2334] = -2.40398689E-01;
  COFD[2335] = 1.08220935E-02;
  COFD[2336] = -1.36523214E+01;
  COFD[2337] = 3.03109250E+00;
  COFD[2338] = -1.87396261E-01;
  COFD[2339] = 8.49727012E-03;
  COFD[2340] = -1.37603720E+01;
  COFD[2341] = 3.13068087E+00;
  COFD[2342] = -2.00477755E-01;
  COFD[2343] = 9.07054904E-03;
  COFD[2344] = -1.55958950E+01;
  COFD[2345] = 3.69274034E+00;
  COFD[2346] = -2.73095123E-01;
  COFD[2347] = 1.22021663E-02;
  COFD[2348] = -1.55958950E+01;
  COFD[2349] = 3.69274034E+00;
  COFD[2350] = -2.73095123E-01;
  COFD[2351] = 1.22021663E-02;
  COFD[2352] = -1.56116023E+01;
  COFD[2353] = 3.69274034E+00;
  COFD[2354] = -2.73095123E-01;
  COFD[2355] = 1.22021663E-02;
  COFD[2356] = -1.55601331E+01;
  COFD[2357] = 3.67401276E+00;
  COFD[2358] = -2.70701727E-01;
  COFD[2359] = 1.21000401E-02;
  COFD[2360] = -1.47171591E+01;
  COFD[2361] = 3.33365140E+00;
  COFD[2362] = -2.27171003E-01;
  COFD[2363] = 1.02420392E-02;
  COFD[2364] = -1.74249404E+01;
  COFD[2365] = 4.30400174E+00;
  COFD[2366] = -3.50684203E-01;
  COFD[2367] = 1.54945855E-02;
  COFD[2368] = -1.93457878E+01;
  COFD[2369] = 4.99359610E+00;
  COFD[2370] = -4.30936629E-01;
  COFD[2371] = 1.85925060E-02;
  COFD[2372] = -1.93507259E+01;
  COFD[2373] = 4.99359610E+00;
  COFD[2374] = -4.30936629E-01;
  COFD[2375] = 1.85925060E-02;
  COFD[2376] = -1.89561844E+01;
  COFD[2377] = 4.86036401E+00;
  COFD[2378] = -4.17087154E-01;
  COFD[2379] = 1.81348258E-02;
  COFD[2380] = -1.89561844E+01;
  COFD[2381] = 4.86036401E+00;
  COFD[2382] = -4.17087154E-01;
  COFD[2383] = 1.81348258E-02;
  COFD[2384] = -1.93033109E+01;
  COFD[2385] = 4.97472819E+00;
  COFD[2386] = -4.29256126E-01;
  COFD[2387] = 1.85517927E-02;
  COFD[2388] = -1.69681980E+01;
  COFD[2389] = 4.13189883E+00;
  COFD[2390] = -3.29291449E-01;
  COFD[2391] = 1.46059118E-02;
  COFD[2392] = -1.69745143E+01;
  COFD[2393] = 4.13189883E+00;
  COFD[2394] = -3.29291449E-01;
  COFD[2395] = 1.46059118E-02;
  COFD[2396] = -1.69804317E+01;
  COFD[2397] = 4.13189883E+00;
  COFD[2398] = -3.29291449E-01;
  COFD[2399] = 1.46059118E-02;
  COFD[2400] = -1.78695006E+01;
  COFD[2401] = 4.46493404E+00;
  COFD[2402] = -3.70700744E-01;
  COFD[2403] = 1.63281819E-02;
  COFD[2404] = -1.76286376E+01;
  COFD[2405] = 4.34376344E+00;
  COFD[2406] = -3.55663855E-01;
  COFD[2407] = 1.57033899E-02;
  COFD[2408] = -1.76335632E+01;
  COFD[2409] = 4.34376344E+00;
  COFD[2410] = -3.55663855E-01;
  COFD[2411] = 1.57033899E-02;
  COFD[2412] = -1.54928008E+01;
  COFD[2413] = 3.73799764E+00;
  COFD[2414] = -2.78922749E-01;
  COFD[2415] = 1.24528579E-02;
  COFD[2416] = -1.91952674E+01;
  COFD[2417] = 4.90043912E+00;
  COFD[2418] = -4.21514331E-01;
  COFD[2419] = 1.82945399E-02;
  COFD[2420] = -1.91952674E+01;
  COFD[2421] = 4.90043912E+00;
  COFD[2422] = -4.21514331E-01;
  COFD[2423] = 1.82945399E-02;
  COFD[2424] = -1.36892793E+01;
  COFD[2425] = 3.03109250E+00;
  COFD[2426] = -1.87396261E-01;
  COFD[2427] = 8.49727012E-03;
  COFD[2428] = -1.37599846E+01;
  COFD[2429] = 3.13068087E+00;
  COFD[2430] = -2.00477755E-01;
  COFD[2431] = 9.07054904E-03;
  COFD[2432] = -1.37741630E+01;
  COFD[2433] = 3.13068087E+00;
  COFD[2434] = -2.00477755E-01;
  COFD[2435] = 9.07054904E-03;
  COFD[2436] = -1.89766467E+01;
  COFD[2437] = 4.97353903E+00;
  COFD[2438] = -4.29135734E-01;
  COFD[2439] = 1.85479821E-02;
  COFD[2440] = -1.39718694E+01;
  COFD[2441] = 3.03109250E+00;
  COFD[2442] = -1.87396261E-01;
  COFD[2443] = 8.49727012E-03;
  COFD[2444] = -1.47009865E+01;
  COFD[2445] = 3.32669990E+00;
  COFD[2446] = -2.26245876E-01;
  COFD[2447] = 1.02009489E-02;
  COFD[2448] = -1.67609720E+01;
  COFD[2449] = 4.08944620E+00;
  COFD[2450] = -3.24042480E-01;
  COFD[2451] = 1.43892310E-02;
  COFD[2452] = -1.72769846E+01;
  COFD[2453] = 4.24280031E+00;
  COFD[2454] = -3.42971692E-01;
  COFD[2455] = 1.51693290E-02;
  COFD[2456] = -1.51716539E+01;
  COFD[2457] = 3.51822289E+00;
  COFD[2458] = -2.51252276E-01;
  COFD[2459] = 1.12908198E-02;
  COFD[2460] = -1.40870946E+01;
  COFD[2461] = 3.07539186E+00;
  COFD[2462] = -1.93256663E-01;
  COFD[2463] = 8.75596004E-03;
  COFD[2464] = -1.95509376E+01;
  COFD[2465] = 5.04066185E+00;
  COFD[2466] = -4.33512682E-01;
  COFD[2467] = 1.85568949E-02;
  COFD[2468] = -1.95565000E+01;
  COFD[2469] = 5.04066185E+00;
  COFD[2470] = -4.33512682E-01;
  COFD[2471] = 1.85568949E-02;
  COFD[2472] = -1.54928119E+01;
  COFD[2473] = 3.73799764E+00;
  COFD[2474] = -2.78922749E-01;
  COFD[2475] = 1.24528579E-02;
  COFD[2476] = -1.72745291E+01;
  COFD[2477] = 4.24280031E+00;
  COFD[2478] = -3.42971692E-01;
  COFD[2479] = 1.51693290E-02;
  COFD[2480] = -1.72745291E+01;
  COFD[2481] = 4.24280031E+00;
  COFD[2482] = -3.42971692E-01;
  COFD[2483] = 1.51693290E-02;
  COFD[2484] = -1.72745291E+01;
  COFD[2485] = 4.24280031E+00;
  COFD[2486] = -3.42971692E-01;
  COFD[2487] = 1.51693290E-02;
  COFD[2488] = -1.72719181E+01;
  COFD[2489] = 4.24280031E+00;
  COFD[2490] = -3.42971692E-01;
  COFD[2491] = 1.51693290E-02;
  COFD[2492] = -1.46909250E+01;
  COFD[2493] = 3.32669990E+00;
  COFD[2494] = -2.26245876E-01;
  COFD[2495] = 1.02009489E-02;
  COFD[2496] = -1.55090330E+01;
  COFD[2497] = 3.64636403E+00;
  COFD[2498] = -2.67291065E-01;
  COFD[2499] = 1.19600168E-02;
  COFD[2500] = -1.80284219E+01;
  COFD[2501] = 4.40864461E+00;
  COFD[2502] = -3.63763109E-01;
  COFD[2503] = 1.60420204E-02;
  COFD[2504] = -1.80309195E+01;
  COFD[2505] = 4.40864461E+00;
  COFD[2506] = -3.63763109E-01;
  COFD[2507] = 1.60420204E-02;
  COFD[2508] = -1.91978762E+01;
  COFD[2509] = 4.90043912E+00;
  COFD[2510] = -4.21514331E-01;
  COFD[2511] = 1.82945399E-02;
  COFD[2512] = -1.92003784E+01;
  COFD[2513] = 4.90043912E+00;
  COFD[2514] = -4.21514331E-01;
  COFD[2515] = 1.82945399E-02;
  COFD[2516] = -1.81027717E+01;
  COFD[2517] = 4.65505575E+00;
  COFD[2518] = -3.94025226E-01;
  COFD[2519] = 1.72846389E-02;
  COFD[2520] = -1.38422368E+01;
  COFD[2521] = 3.13068087E+00;
  COFD[2522] = -2.00477755E-01;
  COFD[2523] = 9.07054904E-03;
  COFD[2524] = -1.53185757E+01;
  COFD[2525] = 3.58351281E+00;
  COFD[2526] = -2.59526521E-01;
  COFD[2527] = 1.16407007E-02;
  COFD[2528] = -1.77237427E+01;
  COFD[2529] = 4.38781144E+00;
  COFD[2530] = -3.61168991E-01;
  COFD[2531] = 1.59338380E-02;
  COFD[2532] = -1.77710119E+01;
  COFD[2533] = 4.38781144E+00;
  COFD[2534] = -3.61168991E-01;
  COFD[2535] = 1.59338380E-02;
  COFD[2536] = -1.77957104E+01;
  COFD[2537] = 4.38781144E+00;
  COFD[2538] = -3.61168991E-01;
  COFD[2539] = 1.59338380E-02;
  COFD[2540] = -1.59071266E+01;
  COFD[2541] = 3.63398790E+00;
  COFD[2542] = -2.65805155E-01;
  COFD[2543] = 1.19009007E-02;
  COFD[2544] = -1.77197775E+01;
  COFD[2545] = 4.38781144E+00;
  COFD[2546] = -3.61168991E-01;
  COFD[2547] = 1.59338380E-02;
  COFD[2548] = -1.77691623E+01;
  COFD[2549] = 4.38781144E+00;
  COFD[2550] = -3.61168991E-01;
  COFD[2551] = 1.59338380E-02;
  COFD[2552] = -1.55754407E+01;
  COFD[2553] = 3.55169733E+00;
  COFD[2554] = -2.55531147E-01;
  COFD[2555] = 1.14733967E-02;
  COFD[2556] = -1.77155969E+01;
  COFD[2557] = 4.38781144E+00;
  COFD[2558] = -3.61168991E-01;
  COFD[2559] = 1.59338380E-02;
  COFD[2560] = -1.51582518E+01;
  COFD[2561] = 3.44020470E+00;
  COFD[2562] = -2.41162835E-01;
  COFD[2563] = 1.08552213E-02;
  COFD[2564] = -1.46023540E+01;
  COFD[2565] = 3.28502534E+00;
  COFD[2566] = -2.20705925E-01;
  COFD[2567] = 9.95522352E-03;
  COFD[2568] = -1.88984539E+01;
  COFD[2569] = 4.70202289E+00;
  COFD[2570] = -3.99204946E-01;
  COFD[2571] = 1.74707832E-02;
  COFD[2572] = -1.88809470E+01;
  COFD[2573] = 4.70202289E+00;
  COFD[2574] = -3.99204946E-01;
  COFD[2575] = 1.74707832E-02;
  COFD[2576] = -1.88529074E+01;
  COFD[2577] = 4.70202289E+00;
  COFD[2578] = -3.99204946E-01;
  COFD[2579] = 1.74707832E-02;
  COFD[2580] = -2.01408987E+01;
  COFD[2581] = 5.08054289E+00;
  COFD[2582] = -4.25157431E-01;
  COFD[2583] = 1.76349030E-02;
  COFD[2584] = -1.80284219E+01;
  COFD[2585] = 4.40864461E+00;
  COFD[2586] = -3.63763109E-01;
  COFD[2587] = 1.60420204E-02;
  COFD[2588] = -1.80284219E+01;
  COFD[2589] = 4.40864461E+00;
  COFD[2590] = -3.63763109E-01;
  COFD[2591] = 1.60420204E-02;
  COFD[2592] = -1.15267659E+01;
  COFD[2593] = 2.55800063E+00;
  COFD[2594] = -1.23269730E-01;
  COFD[2595] = 5.59599793E-03;
  COFD[2596] = -1.42243918E+01;
  COFD[2597] = 3.83461834E+00;
  COFD[2598] = -2.91346712E-01;
  COFD[2599] = 1.29864869E-02;
  COFD[2600] = -1.38779071E+01;
  COFD[2601] = 3.21909911E+00;
  COFD[2602] = -2.11850626E-01;
  COFD[2603] = 9.55839253E-03;
  COFD[2604] = -1.51025016E+01;
  COFD[2605] = 3.54673926E+00;
  COFD[2606] = -2.54900443E-01;
  COFD[2607] = 1.14466286E-02;
  COFD[2608] = -1.38913829E+01;
  COFD[2609] = 3.21909911E+00;
  COFD[2610] = -2.11850626E-01;
  COFD[2611] = 9.55839253E-03;
  COFD[2612] = -1.91488664E+01;
  COFD[2613] = 5.07198371E+00;
  COFD[2614] = -4.34157597E-01;
  COFD[2615] = 1.84430801E-02;
  COFD[2616] = -1.51069373E+01;
  COFD[2617] = 3.54673926E+00;
  COFD[2618] = -2.54900443E-01;
  COFD[2619] = 1.14466286E-02;
  COFD[2620] = -1.51111464E+01;
  COFD[2621] = 3.54673926E+00;
  COFD[2622] = -2.54900443E-01;
  COFD[2623] = 1.14466286E-02;
  COFD[2624] = -1.37603720E+01;
  COFD[2625] = 3.13068087E+00;
  COFD[2626] = -2.00477755E-01;
  COFD[2627] = 9.07054904E-03;
  COFD[2628] = -1.38290286E+01;
  COFD[2629] = 3.21909911E+00;
  COFD[2630] = -2.11850626E-01;
  COFD[2631] = 9.55839253E-03;
  COFD[2632] = -1.58125830E+01;
  COFD[2633] = 3.82653625E+00;
  COFD[2634] = -2.90317972E-01;
  COFD[2635] = 1.29427670E-02;
  COFD[2636] = -1.58125830E+01;
  COFD[2637] = 3.82653625E+00;
  COFD[2638] = -2.90317972E-01;
  COFD[2639] = 1.29427670E-02;
  COFD[2640] = -1.58289853E+01;
  COFD[2641] = 3.82653625E+00;
  COFD[2642] = -2.90317972E-01;
  COFD[2643] = 1.29427670E-02;
  COFD[2644] = -1.57690681E+01;
  COFD[2645] = 3.80482327E+00;
  COFD[2646] = -2.87543922E-01;
  COFD[2647] = 1.28244459E-02;
  COFD[2648] = -1.49089957E+01;
  COFD[2649] = 3.45922008E+00;
  COFD[2650] = -2.43647140E-01;
  COFD[2651] = 1.09635979E-02;
  COFD[2652] = -1.76551970E+01;
  COFD[2653] = 4.43481404E+00;
  COFD[2654] = -3.66974600E-01;
  COFD[2655] = 1.61738468E-02;
  COFD[2656] = -1.93831270E+01;
  COFD[2657] = 5.03423702E+00;
  COFD[2658] = -4.33220473E-01;
  COFD[2659] = 1.85667112E-02;
  COFD[2660] = -1.93883527E+01;
  COFD[2661] = 5.03423702E+00;
  COFD[2662] = -4.33220473E-01;
  COFD[2663] = 1.85667112E-02;
  COFD[2664] = -1.91127078E+01;
  COFD[2665] = 4.95351632E+00;
  COFD[2666] = -4.27130446E-01;
  COFD[2667] = 1.84856443E-02;
  COFD[2668] = -1.91127078E+01;
  COFD[2669] = 4.95351632E+00;
  COFD[2670] = -4.27130446E-01;
  COFD[2671] = 1.84856443E-02;
  COFD[2672] = -1.93705643E+01;
  COFD[2673] = 5.02805304E+00;
  COFD[2674] = -4.33407830E-01;
  COFD[2675] = 1.86164117E-02;
  COFD[2676] = -1.71757422E+01;
  COFD[2677] = 4.25245988E+00;
  COFD[2678] = -3.44189784E-01;
  COFD[2679] = 1.52207255E-02;
  COFD[2680] = -1.71824095E+01;
  COFD[2681] = 4.25245988E+00;
  COFD[2682] = -3.44189784E-01;
  COFD[2683] = 1.52207255E-02;
  COFD[2684] = -1.71886601E+01;
  COFD[2685] = 4.25245988E+00;
  COFD[2686] = -3.44189784E-01;
  COFD[2687] = 1.52207255E-02;
  COFD[2688] = -1.81419524E+01;
  COFD[2689] = 4.61134661E+00;
  COFD[2690] = -3.88986112E-01;
  COFD[2691] = 1.70927982E-02;
  COFD[2692] = -1.78639617E+01;
  COFD[2693] = 4.47278815E+00;
  COFD[2694] = -3.71676557E-01;
  COFD[2695] = 1.63687643E-02;
  COFD[2696] = -1.78691743E+01;
  COFD[2697] = 4.47278815E+00;
  COFD[2698] = -3.71676557E-01;
  COFD[2699] = 1.63687643E-02;
  COFD[2700] = -1.56893608E+01;
  COFD[2701] = 3.87441160E+00;
  COFD[2702] = -2.96411944E-01;
  COFD[2703] = 1.32018011E-02;
  COFD[2704] = -1.93373731E+01;
  COFD[2705] = 4.98320638E+00;
  COFD[2706] = -4.30044977E-01;
  COFD[2707] = 1.85729853E-02;
  COFD[2708] = -1.93373731E+01;
  COFD[2709] = 4.98320638E+00;
  COFD[2710] = -4.30044977E-01;
  COFD[2711] = 1.85729853E-02;
  COFD[2712] = -1.37988770E+01;
  COFD[2713] = 3.13068087E+00;
  COFD[2714] = -2.00477755E-01;
  COFD[2715] = 9.07054904E-03;
  COFD[2716] = -1.38267197E+01;
  COFD[2717] = 3.21909911E+00;
  COFD[2718] = -2.11850626E-01;
  COFD[2719] = 9.55839253E-03;
  COFD[2720] = -1.38415450E+01;
  COFD[2721] = 3.21909911E+00;
  COFD[2722] = -2.11850626E-01;
  COFD[2723] = 9.55839253E-03;
  COFD[2724] = -1.90203771E+01;
  COFD[2725] = 5.02767971E+00;
  COFD[2726] = -4.33406285E-01;
  COFD[2727] = 1.86183022E-02;
  COFD[2728] = -1.41010665E+01;
  COFD[2729] = 3.13068087E+00;
  COFD[2730] = -2.00477755E-01;
  COFD[2731] = 9.07054904E-03;
  COFD[2732] = -1.48940094E+01;
  COFD[2733] = 3.45291069E+00;
  COFD[2734] = -2.42822180E-01;
  COFD[2735] = 1.09275752E-02;
  COFD[2736] = -1.69315920E+01;
  COFD[2737] = 4.19909678E+00;
  COFD[2738] = -3.37493433E-01;
  COFD[2739] = 1.49397054E-02;
  COFD[2740] = -1.75253870E+01;
  COFD[2741] = 4.38093272E+00;
  COFD[2742] = -3.60316345E-01;
  COFD[2743] = 1.58984540E-02;
  COFD[2744] = -1.52995686E+01;
  COFD[2745] = 3.61618043E+00;
  COFD[2746] = -2.63626979E-01;
  COFD[2747] = 1.18123303E-02;
  COFD[2748] = -1.42077489E+01;
  COFD[2749] = 3.17062703E+00;
  COFD[2750] = -2.05656056E-01;
  COFD[2751] = 9.29447288E-03;
  COFD[2752] = -1.95659391E+01;
  COFD[2753] = 5.07016932E+00;
  COFD[2754] = -4.34085095E-01;
  COFD[2755] = 1.84466394E-02;
  COFD[2756] = -1.95718184E+01;
  COFD[2757] = 5.07016932E+00;
  COFD[2758] = -4.34085095E-01;
  COFD[2759] = 1.84466394E-02;
  COFD[2760] = -1.56893726E+01;
  COFD[2761] = 3.87441160E+00;
  COFD[2762] = -2.96411944E-01;
  COFD[2763] = 1.32018011E-02;
  COFD[2764] = -1.75227729E+01;
  COFD[2765] = 4.38093272E+00;
  COFD[2766] = -3.60316345E-01;
  COFD[2767] = 1.58984540E-02;
  COFD[2768] = -1.75227729E+01;
  COFD[2769] = 4.38093272E+00;
  COFD[2770] = -3.60316345E-01;
  COFD[2771] = 1.58984540E-02;
  COFD[2772] = -1.75227729E+01;
  COFD[2773] = 4.38093272E+00;
  COFD[2774] = -3.60316345E-01;
  COFD[2775] = 1.58984540E-02;
  COFD[2776] = -1.75199941E+01;
  COFD[2777] = 4.38093272E+00;
  COFD[2778] = -3.60316345E-01;
  COFD[2779] = 1.58984540E-02;
  COFD[2780] = -1.48833652E+01;
  COFD[2781] = 3.45291069E+00;
  COFD[2782] = -2.42822180E-01;
  COFD[2783] = 1.09275752E-02;
  COFD[2784] = -1.56783070E+01;
  COFD[2785] = 3.76178392E+00;
  COFD[2786] = -2.82003508E-01;
  COFD[2787] = 1.25861906E-02;
  COFD[2788] = -1.83065016E+01;
  COFD[2789] = 4.54835769E+00;
  COFD[2790] = -3.81194036E-01;
  COFD[2791] = 1.67703153E-02;
  COFD[2792] = -1.83091606E+01;
  COFD[2793] = 4.54835769E+00;
  COFD[2794] = -3.81194036E-01;
  COFD[2795] = 1.67703153E-02;
  COFD[2796] = -1.93401496E+01;
  COFD[2797] = 4.98320638E+00;
  COFD[2798] = -4.30044977E-01;
  COFD[2799] = 1.85729853E-02;
  COFD[2800] = -1.93428134E+01;
  COFD[2801] = 4.98320638E+00;
  COFD[2802] = -4.30044977E-01;
  COFD[2803] = 1.85729853E-02;
  COFD[2804] = -1.82196018E+01;
  COFD[2805] = 4.74200288E+00;
  COFD[2806] = -4.03492976E-01;
  COFD[2807] = 1.76186851E-02;
  COFD[2808] = -1.39146399E+01;
  COFD[2809] = 3.21909911E+00;
  COFD[2810] = -2.11850626E-01;
  COFD[2811] = 9.55839253E-03;
  COFD[2812] = -1.54177704E+01;
  COFD[2813] = 3.66997726E+00;
  COFD[2814] = -2.70186616E-01;
  COFD[2815] = 1.20780906E-02;
  COFD[2816] = -1.79730055E+01;
  COFD[2817] = 4.52327527E+00;
  COFD[2818] = -3.78029305E-01;
  COFD[2819] = 1.66365566E-02;
  COFD[2820] = -1.80232931E+01;
  COFD[2821] = 4.52327527E+00;
  COFD[2822] = -3.78029305E-01;
  COFD[2823] = 1.66365566E-02;
  COFD[2824] = -1.80496940E+01;
  COFD[2825] = 4.52327527E+00;
  COFD[2826] = -3.78029305E-01;
  COFD[2827] = 1.66365566E-02;
  COFD[2828] = -1.60866982E+01;
  COFD[2829] = 3.73914304E+00;
  COFD[2830] = -2.79071053E-01;
  COFD[2831] = 1.24592731E-02;
  COFD[2832] = -1.79688006E+01;
  COFD[2833] = 4.52327527E+00;
  COFD[2834] = -3.78029305E-01;
  COFD[2835] = 1.66365566E-02;
  COFD[2836] = -1.80213196E+01;
  COFD[2837] = 4.52327527E+00;
  COFD[2838] = -3.78029305E-01;
  COFD[2839] = 1.66365566E-02;
  COFD[2840] = -1.57102932E+01;
  COFD[2841] = 3.64178450E+00;
  COFD[2842] = -2.66740517E-01;
  COFD[2843] = 1.19380786E-02;
  COFD[2844] = -1.79643695E+01;
  COFD[2845] = 4.52327527E+00;
  COFD[2846] = -3.78029305E-01;
  COFD[2847] = 1.66365566E-02;
  COFD[2848] = -1.53316706E+01;
  COFD[2849] = 3.55175721E+00;
  COFD[2850] = -2.55538703E-01;
  COFD[2851] = 1.14737147E-02;
  COFD[2852] = -1.48069556E+01;
  COFD[2853] = 3.41648755E+00;
  COFD[2854] = -2.38096267E-01;
  COFD[2855] = 1.07229875E-02;
  COFD[2856] = -1.90627036E+01;
  COFD[2857] = 4.78666646E+00;
  COFD[2858] = -4.08190059E-01;
  COFD[2859] = 1.77758369E-02;
  COFD[2860] = -1.90439462E+01;
  COFD[2861] = 4.78666646E+00;
  COFD[2862] = -4.08190059E-01;
  COFD[2863] = 1.77758369E-02;
  COFD[2864] = -1.90139988E+01;
  COFD[2865] = 4.78666646E+00;
  COFD[2866] = -4.08190059E-01;
  COFD[2867] = 1.77758369E-02;
  COFD[2868] = -2.00734624E+01;
  COFD[2869] = 5.06537899E+00;
  COFD[2870] = -4.19068559E-01;
  COFD[2871] = 1.72031928E-02;
  COFD[2872] = -1.83065016E+01;
  COFD[2873] = 4.54835769E+00;
  COFD[2874] = -3.81194036E-01;
  COFD[2875] = 1.67703153E-02;
  COFD[2876] = -1.83065016E+01;
  COFD[2877] = 4.54835769E+00;
  COFD[2878] = -3.81194036E-01;
  COFD[2879] = 1.67703153E-02;
  COFD[2880] = -1.32445597E+01;
  COFD[2881] = 3.09549012E+00;
  COFD[2882] = -1.95916803E-01;
  COFD[2883] = 8.87343782E-03;
  COFD[2884] = -1.64846231E+01;
  COFD[2885] = 4.51809798E+00;
  COFD[2886] = -3.77379320E-01;
  COFD[2887] = 1.66092335E-02;
  COFD[2888] = -1.58633789E+01;
  COFD[2889] = 3.82653625E+00;
  COFD[2890] = -2.90317972E-01;
  COFD[2891] = 1.29427670E-02;
  COFD[2892] = -1.71074388E+01;
  COFD[2893] = 4.16164957E+00;
  COFD[2894] = -3.32841595E-01;
  COFD[2895] = 1.47466698E-02;
  COFD[2896] = -1.58774184E+01;
  COFD[2897] = 3.82653625E+00;
  COFD[2898] = -2.90317972E-01;
  COFD[2899] = 1.29427670E-02;
  COFD[2900] = -1.96409156E+01;
  COFD[2901] = 4.91110749E+00;
  COFD[2902] = -3.90241793E-01;
  COFD[2903] = 1.55910826E-02;
  COFD[2904] = -1.71121144E+01;
  COFD[2905] = 4.16164957E+00;
  COFD[2906] = -3.32841595E-01;
  COFD[2907] = 1.47466698E-02;
  COFD[2908] = -1.71165531E+01;
  COFD[2909] = 4.16164957E+00;
  COFD[2910] = -3.32841595E-01;
  COFD[2911] = 1.47466698E-02;
  COFD[2912] = -1.55958950E+01;
  COFD[2913] = 3.69274034E+00;
  COFD[2914] = -2.73095123E-01;
  COFD[2915] = 1.22021663E-02;
  COFD[2916] = -1.58125830E+01;
  COFD[2917] = 3.82653625E+00;
  COFD[2918] = -2.90317972E-01;
  COFD[2919] = 1.29427670E-02;
  COFD[2920] = -1.79867509E+01;
  COFD[2921] = 4.50855003E+00;
  COFD[2922] = -3.76176052E-01;
  COFD[2923] = 1.65584327E-02;
  COFD[2924] = -1.79867509E+01;
  COFD[2925] = 4.50855003E+00;
  COFD[2926] = -3.76176052E-01;
  COFD[2927] = 1.65584327E-02;
  COFD[2928] = -1.80037992E+01;
  COFD[2929] = 4.50855003E+00;
  COFD[2930] = -3.76176052E-01;
  COFD[2931] = 1.65584327E-02;
  COFD[2932] = -1.79362633E+01;
  COFD[2933] = 4.48317979E+00;
  COFD[2934] = -3.72968871E-01;
  COFD[2935] = 1.64225591E-02;
  COFD[2936] = -1.69016904E+01;
  COFD[2937] = 4.07720052E+00;
  COFD[2938] = -3.22483261E-01;
  COFD[2939] = 1.43228011E-02;
  COFD[2940] = -1.96225787E+01;
  COFD[2941] = 4.98746788E+00;
  COFD[2942] = -4.30429982E-01;
  COFD[2943] = 1.85826557E-02;
  COFD[2944] = -2.01943150E+01;
  COFD[2945] = 5.04008979E+00;
  COFD[2946] = -4.13907920E-01;
  COFD[2947] = 1.69021003E-02;
  COFD[2948] = -2.01998150E+01;
  COFD[2949] = 5.04008979E+00;
  COFD[2950] = -4.13907920E-01;
  COFD[2951] = 1.69021003E-02;
  COFD[2952] = -2.02020654E+01;
  COFD[2953] = 5.09035673E+00;
  COFD[2954] = -4.27354668E-01;
  COFD[2955] = 1.77683778E-02;
  COFD[2956] = -2.02020654E+01;
  COFD[2957] = 5.09035673E+00;
  COFD[2958] = -4.27354668E-01;
  COFD[2959] = 1.77683778E-02;
  COFD[2960] = -2.02415575E+01;
  COFD[2961] = 5.06196480E+00;
  COFD[2962] = -4.18274084E-01;
  COFD[2963] = 1.71543392E-02;
  COFD[2964] = -1.92494929E+01;
  COFD[2965] = 4.86988873E+00;
  COFD[2966] = -4.18132322E-01;
  COFD[2967] = 1.81721691E-02;
  COFD[2968] = -1.92564934E+01;
  COFD[2969] = 4.86988873E+00;
  COFD[2970] = -4.18132322E-01;
  COFD[2971] = 1.81721691E-02;
  COFD[2972] = -1.92630605E+01;
  COFD[2973] = 4.86988873E+00;
  COFD[2974] = -4.18132322E-01;
  COFD[2975] = 1.81721691E-02;
  COFD[2976] = -1.98319542E+01;
  COFD[2977] = 5.03898967E+00;
  COFD[2978] = -4.33424410E-01;
  COFD[2979] = 1.85583951E-02;
  COFD[2980] = -1.97641201E+01;
  COFD[2981] = 5.00431031E+00;
  COFD[2982] = -4.31814645E-01;
  COFD[2983] = 1.86092360E-02;
  COFD[2984] = -1.97696064E+01;
  COFD[2985] = 5.00431031E+00;
  COFD[2986] = -4.31814645E-01;
  COFD[2987] = 1.86092360E-02;
  COFD[2988] = -1.79636707E+01;
  COFD[2989] = 4.56481098E+00;
  COFD[2990] = -3.83274058E-01;
  COFD[2991] = 1.68584426E-02;
  COFD[2992] = -2.03169092E+01;
  COFD[2993] = 5.07414515E+00;
  COFD[2994] = -4.23464178E-01;
  COFD[2995] = 1.75259967E-02;
  COFD[2996] = -2.03169092E+01;
  COFD[2997] = 5.07414515E+00;
  COFD[2998] = -4.23464178E-01;
  COFD[2999] = 1.75259967E-02;
  COFD[3000] = -1.56358316E+01;
  COFD[3001] = 3.69274034E+00;
  COFD[3002] = -2.73095123E-01;
  COFD[3003] = 1.22021663E-02;
  COFD[3004] = -1.58175311E+01;
  COFD[3005] = 3.82653625E+00;
  COFD[3006] = -2.90317972E-01;
  COFD[3007] = 1.29427670E-02;
  COFD[3008] = -1.58329590E+01;
  COFD[3009] = 3.82653625E+00;
  COFD[3010] = -2.90317972E-01;
  COFD[3011] = 1.29427670E-02;
  COFD[3012] = -1.99234869E+01;
  COFD[3013] = 5.06283593E+00;
  COFD[3014] = -4.18459882E-01;
  COFD[3015] = 1.71653830E-02;
  COFD[3016] = -1.59217636E+01;
  COFD[3017] = 3.69274034E+00;
  COFD[3018] = -2.73095123E-01;
  COFD[3019] = 1.22021663E-02;
  COFD[3020] = -1.68867391E+01;
  COFD[3021] = 4.07034547E+00;
  COFD[3022] = -3.21605793E-01;
  COFD[3023] = 1.42852210E-02;
  COFD[3024] = -1.90425973E+01;
  COFD[3025] = 4.82250870E+00;
  COFD[3026] = -4.12600742E-01;
  COFD[3027] = 1.79576716E-02;
  COFD[3028] = -1.95320461E+01;
  COFD[3029] = 4.95546444E+00;
  COFD[3030] = -4.27317415E-01;
  COFD[3031] = 1.84910222E-02;
  COFD[3032] = -1.73783244E+01;
  COFD[3033] = 4.25886998E+00;
  COFD[3034] = -3.44997921E-01;
  COFD[3035] = 1.52548168E-02;
  COFD[3036] = -1.60660161E+01;
  COFD[3037] = 3.74816264E+00;
  COFD[3038] = -2.80237953E-01;
  COFD[3039] = 1.25097217E-02;
  COFD[3040] = -2.00170663E+01;
  COFD[3041] = 4.91350151E+00;
  COFD[3042] = -3.90802264E-01;
  COFD[3043] = 1.56254380E-02;
  COFD[3044] = -2.00232471E+01;
  COFD[3045] = 4.91350151E+00;
  COFD[3046] = -3.90802264E-01;
  COFD[3047] = 1.56254380E-02;
  COFD[3048] = -1.79636831E+01;
  COFD[3049] = 4.56481098E+00;
  COFD[3050] = -3.83274058E-01;
  COFD[3051] = 1.68584426E-02;
  COFD[3052] = -1.95292789E+01;
  COFD[3053] = 4.95546444E+00;
  COFD[3054] = -4.27317415E-01;
  COFD[3055] = 1.84910222E-02;
  COFD[3056] = -1.95292789E+01;
  COFD[3057] = 4.95546444E+00;
  COFD[3058] = -4.27317415E-01;
  COFD[3059] = 1.84910222E-02;
  COFD[3060] = -1.95292789E+01;
  COFD[3061] = 4.95546444E+00;
  COFD[3062] = -4.27317415E-01;
  COFD[3063] = 1.84910222E-02;
  COFD[3064] = -1.95263384E+01;
  COFD[3065] = 4.95546444E+00;
  COFD[3066] = -4.27317415E-01;
  COFD[3067] = 1.84910222E-02;
  COFD[3068] = -1.68755397E+01;
  COFD[3069] = 4.07034547E+00;
  COFD[3070] = -3.21605793E-01;
  COFD[3071] = 1.42852210E-02;
  COFD[3072] = -1.78734020E+01;
  COFD[3073] = 4.44223078E+00;
  COFD[3074] = -3.67882929E-01;
  COFD[3075] = 1.62110522E-02;
  COFD[3076] = -2.00737449E+01;
  COFD[3077] = 5.02732445E+00;
  COFD[3078] = -4.33404796E-01;
  COFD[3079] = 1.86200998E-02;
  COFD[3080] = -2.00765597E+01;
  COFD[3081] = 5.02732445E+00;
  COFD[3082] = -4.33404796E-01;
  COFD[3083] = 1.86200998E-02;
  COFD[3084] = -2.03198473E+01;
  COFD[3085] = 5.07414515E+00;
  COFD[3086] = -4.23464178E-01;
  COFD[3087] = 1.75259967E-02;
  COFD[3088] = -2.03226671E+01;
  COFD[3089] = 5.07414515E+00;
  COFD[3090] = -4.23464178E-01;
  COFD[3091] = 1.75259967E-02;
  COFD[3092] = -1.97664019E+01;
  COFD[3093] = 5.08248217E+00;
  COFD[3094] = -4.34396720E-01;
  COFD[3095] = 1.84066863E-02;
  COFD[3096] = -1.59016866E+01;
  COFD[3097] = 3.82653625E+00;
  COFD[3098] = -2.90317972E-01;
  COFD[3099] = 1.29427670E-02;
  COFD[3100] = -1.76020999E+01;
  COFD[3101] = 4.34957164E+00;
  COFD[3102] = -3.56393865E-01;
  COFD[3103] = 1.57341186E-02;
  COFD[3104] = -1.98140717E+01;
  COFD[3105] = 5.02339094E+00;
  COFD[3106] = -4.33412034E-01;
  COFD[3107] = 1.86420804E-02;
  COFD[3108] = -1.98672683E+01;
  COFD[3109] = 5.02339094E+00;
  COFD[3110] = -4.33412034E-01;
  COFD[3111] = 1.86420804E-02;
  COFD[3112] = -1.98953252E+01;
  COFD[3113] = 5.02339094E+00;
  COFD[3114] = -4.33412034E-01;
  COFD[3115] = 1.86420804E-02;
  COFD[3116] = -1.82378736E+01;
  COFD[3117] = 4.42281403E+00;
  COFD[3118] = -3.65512947E-01;
  COFD[3119] = 1.61143523E-02;
  COFD[3120] = -1.98096373E+01;
  COFD[3121] = 5.02339094E+00;
  COFD[3122] = -4.33412034E-01;
  COFD[3123] = 1.86420804E-02;
  COFD[3124] = -1.98651747E+01;
  COFD[3125] = 5.02339094E+00;
  COFD[3126] = -4.33412034E-01;
  COFD[3127] = 1.86420804E-02;
  COFD[3128] = -1.78105875E+01;
  COFD[3129] = 4.30416353E+00;
  COFD[3130] = -3.50704401E-01;
  COFD[3131] = 1.54954293E-02;
  COFD[3132] = -1.98049664E+01;
  COFD[3133] = 5.02339094E+00;
  COFD[3134] = -4.33412034E-01;
  COFD[3135] = 1.86420804E-02;
  COFD[3136] = -1.73165844E+01;
  COFD[3137] = 4.16605006E+00;
  COFD[3138] = -3.33356903E-01;
  COFD[3139] = 1.47666333E-02;
  COFD[3140] = -1.67805410E+01;
  COFD[3141] = 4.02700875E+00;
  COFD[3142] = -3.16016739E-01;
  COFD[3143] = 1.40440606E-02;
  COFD[3144] = -2.04812176E+01;
  COFD[3145] = 5.09402439E+00;
  COFD[3146] = -4.33965952E-01;
  COFD[3147] = 1.83081493E-02;
  COFD[3148] = -2.04612383E+01;
  COFD[3149] = 5.09402439E+00;
  COFD[3150] = -4.33965952E-01;
  COFD[3151] = 1.83081493E-02;
  COFD[3152] = -2.04294382E+01;
  COFD[3153] = 5.09402439E+00;
  COFD[3154] = -4.33965952E-01;
  COFD[3155] = 1.83081493E-02;
  COFD[3156] = -1.93007509E+01;
  COFD[3157] = 4.36820343E+00;
  COFD[3158] = -2.97329446E-01;
  COFD[3159] = 1.06481693E-02;
  COFD[3160] = -2.00737449E+01;
  COFD[3161] = 5.02732445E+00;
  COFD[3162] = -4.33404796E-01;
  COFD[3163] = 1.86200998E-02;
  COFD[3164] = -2.00737449E+01;
  COFD[3165] = 5.02732445E+00;
  COFD[3166] = -4.33404796E-01;
  COFD[3167] = 1.86200998E-02;
  COFD[3168] = -1.32445597E+01;
  COFD[3169] = 3.09549012E+00;
  COFD[3170] = -1.95916803E-01;
  COFD[3171] = 8.87343782E-03;
  COFD[3172] = -1.64846231E+01;
  COFD[3173] = 4.51809798E+00;
  COFD[3174] = -3.77379320E-01;
  COFD[3175] = 1.66092335E-02;
  COFD[3176] = -1.58633789E+01;
  COFD[3177] = 3.82653625E+00;
  COFD[3178] = -2.90317972E-01;
  COFD[3179] = 1.29427670E-02;
  COFD[3180] = -1.71074388E+01;
  COFD[3181] = 4.16164957E+00;
  COFD[3182] = -3.32841595E-01;
  COFD[3183] = 1.47466698E-02;
  COFD[3184] = -1.58774184E+01;
  COFD[3185] = 3.82653625E+00;
  COFD[3186] = -2.90317972E-01;
  COFD[3187] = 1.29427670E-02;
  COFD[3188] = -1.96409156E+01;
  COFD[3189] = 4.91110749E+00;
  COFD[3190] = -3.90241793E-01;
  COFD[3191] = 1.55910826E-02;
  COFD[3192] = -1.71121144E+01;
  COFD[3193] = 4.16164957E+00;
  COFD[3194] = -3.32841595E-01;
  COFD[3195] = 1.47466698E-02;
  COFD[3196] = -1.71165531E+01;
  COFD[3197] = 4.16164957E+00;
  COFD[3198] = -3.32841595E-01;
  COFD[3199] = 1.47466698E-02;
  COFD[3200] = -1.55958950E+01;
  COFD[3201] = 3.69274034E+00;
  COFD[3202] = -2.73095123E-01;
  COFD[3203] = 1.22021663E-02;
  COFD[3204] = -1.58125830E+01;
  COFD[3205] = 3.82653625E+00;
  COFD[3206] = -2.90317972E-01;
  COFD[3207] = 1.29427670E-02;
  COFD[3208] = -1.79867509E+01;
  COFD[3209] = 4.50855003E+00;
  COFD[3210] = -3.76176052E-01;
  COFD[3211] = 1.65584327E-02;
  COFD[3212] = -1.79867509E+01;
  COFD[3213] = 4.50855003E+00;
  COFD[3214] = -3.76176052E-01;
  COFD[3215] = 1.65584327E-02;
  COFD[3216] = -1.80037992E+01;
  COFD[3217] = 4.50855003E+00;
  COFD[3218] = -3.76176052E-01;
  COFD[3219] = 1.65584327E-02;
  COFD[3220] = -1.79362633E+01;
  COFD[3221] = 4.48317979E+00;
  COFD[3222] = -3.72968871E-01;
  COFD[3223] = 1.64225591E-02;
  COFD[3224] = -1.69016904E+01;
  COFD[3225] = 4.07720052E+00;
  COFD[3226] = -3.22483261E-01;
  COFD[3227] = 1.43228011E-02;
  COFD[3228] = -1.96225787E+01;
  COFD[3229] = 4.98746788E+00;
  COFD[3230] = -4.30429982E-01;
  COFD[3231] = 1.85826557E-02;
  COFD[3232] = -2.01943150E+01;
  COFD[3233] = 5.04008979E+00;
  COFD[3234] = -4.13907920E-01;
  COFD[3235] = 1.69021003E-02;
  COFD[3236] = -2.01998150E+01;
  COFD[3237] = 5.04008979E+00;
  COFD[3238] = -4.13907920E-01;
  COFD[3239] = 1.69021003E-02;
  COFD[3240] = -2.02020654E+01;
  COFD[3241] = 5.09035673E+00;
  COFD[3242] = -4.27354668E-01;
  COFD[3243] = 1.77683778E-02;
  COFD[3244] = -2.02020654E+01;
  COFD[3245] = 5.09035673E+00;
  COFD[3246] = -4.27354668E-01;
  COFD[3247] = 1.77683778E-02;
  COFD[3248] = -2.02415575E+01;
  COFD[3249] = 5.06196480E+00;
  COFD[3250] = -4.18274084E-01;
  COFD[3251] = 1.71543392E-02;
  COFD[3252] = -1.92494929E+01;
  COFD[3253] = 4.86988873E+00;
  COFD[3254] = -4.18132322E-01;
  COFD[3255] = 1.81721691E-02;
  COFD[3256] = -1.92564934E+01;
  COFD[3257] = 4.86988873E+00;
  COFD[3258] = -4.18132322E-01;
  COFD[3259] = 1.81721691E-02;
  COFD[3260] = -1.92630605E+01;
  COFD[3261] = 4.86988873E+00;
  COFD[3262] = -4.18132322E-01;
  COFD[3263] = 1.81721691E-02;
  COFD[3264] = -1.98319542E+01;
  COFD[3265] = 5.03898967E+00;
  COFD[3266] = -4.33424410E-01;
  COFD[3267] = 1.85583951E-02;
  COFD[3268] = -1.97641201E+01;
  COFD[3269] = 5.00431031E+00;
  COFD[3270] = -4.31814645E-01;
  COFD[3271] = 1.86092360E-02;
  COFD[3272] = -1.97696064E+01;
  COFD[3273] = 5.00431031E+00;
  COFD[3274] = -4.31814645E-01;
  COFD[3275] = 1.86092360E-02;
  COFD[3276] = -1.79636707E+01;
  COFD[3277] = 4.56481098E+00;
  COFD[3278] = -3.83274058E-01;
  COFD[3279] = 1.68584426E-02;
  COFD[3280] = -2.03169092E+01;
  COFD[3281] = 5.07414515E+00;
  COFD[3282] = -4.23464178E-01;
  COFD[3283] = 1.75259967E-02;
  COFD[3284] = -2.03169092E+01;
  COFD[3285] = 5.07414515E+00;
  COFD[3286] = -4.23464178E-01;
  COFD[3287] = 1.75259967E-02;
  COFD[3288] = -1.56358316E+01;
  COFD[3289] = 3.69274034E+00;
  COFD[3290] = -2.73095123E-01;
  COFD[3291] = 1.22021663E-02;
  COFD[3292] = -1.58175311E+01;
  COFD[3293] = 3.82653625E+00;
  COFD[3294] = -2.90317972E-01;
  COFD[3295] = 1.29427670E-02;
  COFD[3296] = -1.58329590E+01;
  COFD[3297] = 3.82653625E+00;
  COFD[3298] = -2.90317972E-01;
  COFD[3299] = 1.29427670E-02;
  COFD[3300] = -1.99234869E+01;
  COFD[3301] = 5.06283593E+00;
  COFD[3302] = -4.18459882E-01;
  COFD[3303] = 1.71653830E-02;
  COFD[3304] = -1.59217636E+01;
  COFD[3305] = 3.69274034E+00;
  COFD[3306] = -2.73095123E-01;
  COFD[3307] = 1.22021663E-02;
  COFD[3308] = -1.68867391E+01;
  COFD[3309] = 4.07034547E+00;
  COFD[3310] = -3.21605793E-01;
  COFD[3311] = 1.42852210E-02;
  COFD[3312] = -1.90425973E+01;
  COFD[3313] = 4.82250870E+00;
  COFD[3314] = -4.12600742E-01;
  COFD[3315] = 1.79576716E-02;
  COFD[3316] = -1.95320461E+01;
  COFD[3317] = 4.95546444E+00;
  COFD[3318] = -4.27317415E-01;
  COFD[3319] = 1.84910222E-02;
  COFD[3320] = -1.73783244E+01;
  COFD[3321] = 4.25886998E+00;
  COFD[3322] = -3.44997921E-01;
  COFD[3323] = 1.52548168E-02;
  COFD[3324] = -1.60660161E+01;
  COFD[3325] = 3.74816264E+00;
  COFD[3326] = -2.80237953E-01;
  COFD[3327] = 1.25097217E-02;
  COFD[3328] = -2.00170663E+01;
  COFD[3329] = 4.91350151E+00;
  COFD[3330] = -3.90802264E-01;
  COFD[3331] = 1.56254380E-02;
  COFD[3332] = -2.00232471E+01;
  COFD[3333] = 4.91350151E+00;
  COFD[3334] = -3.90802264E-01;
  COFD[3335] = 1.56254380E-02;
  COFD[3336] = -1.79636831E+01;
  COFD[3337] = 4.56481098E+00;
  COFD[3338] = -3.83274058E-01;
  COFD[3339] = 1.68584426E-02;
  COFD[3340] = -1.95292789E+01;
  COFD[3341] = 4.95546444E+00;
  COFD[3342] = -4.27317415E-01;
  COFD[3343] = 1.84910222E-02;
  COFD[3344] = -1.95292789E+01;
  COFD[3345] = 4.95546444E+00;
  COFD[3346] = -4.27317415E-01;
  COFD[3347] = 1.84910222E-02;
  COFD[3348] = -1.95292789E+01;
  COFD[3349] = 4.95546444E+00;
  COFD[3350] = -4.27317415E-01;
  COFD[3351] = 1.84910222E-02;
  COFD[3352] = -1.95263384E+01;
  COFD[3353] = 4.95546444E+00;
  COFD[3354] = -4.27317415E-01;
  COFD[3355] = 1.84910222E-02;
  COFD[3356] = -1.68755397E+01;
  COFD[3357] = 4.07034547E+00;
  COFD[3358] = -3.21605793E-01;
  COFD[3359] = 1.42852210E-02;
  COFD[3360] = -1.78734020E+01;
  COFD[3361] = 4.44223078E+00;
  COFD[3362] = -3.67882929E-01;
  COFD[3363] = 1.62110522E-02;
  COFD[3364] = -2.00737449E+01;
  COFD[3365] = 5.02732445E+00;
  COFD[3366] = -4.33404796E-01;
  COFD[3367] = 1.86200998E-02;
  COFD[3368] = -2.00765597E+01;
  COFD[3369] = 5.02732445E+00;
  COFD[3370] = -4.33404796E-01;
  COFD[3371] = 1.86200998E-02;
  COFD[3372] = -2.03198473E+01;
  COFD[3373] = 5.07414515E+00;
  COFD[3374] = -4.23464178E-01;
  COFD[3375] = 1.75259967E-02;
  COFD[3376] = -2.03226671E+01;
  COFD[3377] = 5.07414515E+00;
  COFD[3378] = -4.23464178E-01;
  COFD[3379] = 1.75259967E-02;
  COFD[3380] = -1.97664019E+01;
  COFD[3381] = 5.08248217E+00;
  COFD[3382] = -4.34396720E-01;
  COFD[3383] = 1.84066863E-02;
  COFD[3384] = -1.59016866E+01;
  COFD[3385] = 3.82653625E+00;
  COFD[3386] = -2.90317972E-01;
  COFD[3387] = 1.29427670E-02;
  COFD[3388] = -1.76020999E+01;
  COFD[3389] = 4.34957164E+00;
  COFD[3390] = -3.56393865E-01;
  COFD[3391] = 1.57341186E-02;
  COFD[3392] = -1.98140717E+01;
  COFD[3393] = 5.02339094E+00;
  COFD[3394] = -4.33412034E-01;
  COFD[3395] = 1.86420804E-02;
  COFD[3396] = -1.98672683E+01;
  COFD[3397] = 5.02339094E+00;
  COFD[3398] = -4.33412034E-01;
  COFD[3399] = 1.86420804E-02;
  COFD[3400] = -1.98953252E+01;
  COFD[3401] = 5.02339094E+00;
  COFD[3402] = -4.33412034E-01;
  COFD[3403] = 1.86420804E-02;
  COFD[3404] = -1.82378736E+01;
  COFD[3405] = 4.42281403E+00;
  COFD[3406] = -3.65512947E-01;
  COFD[3407] = 1.61143523E-02;
  COFD[3408] = -1.98096373E+01;
  COFD[3409] = 5.02339094E+00;
  COFD[3410] = -4.33412034E-01;
  COFD[3411] = 1.86420804E-02;
  COFD[3412] = -1.98651747E+01;
  COFD[3413] = 5.02339094E+00;
  COFD[3414] = -4.33412034E-01;
  COFD[3415] = 1.86420804E-02;
  COFD[3416] = -1.78105875E+01;
  COFD[3417] = 4.30416353E+00;
  COFD[3418] = -3.50704401E-01;
  COFD[3419] = 1.54954293E-02;
  COFD[3420] = -1.98049664E+01;
  COFD[3421] = 5.02339094E+00;
  COFD[3422] = -4.33412034E-01;
  COFD[3423] = 1.86420804E-02;
  COFD[3424] = -1.73165844E+01;
  COFD[3425] = 4.16605006E+00;
  COFD[3426] = -3.33356903E-01;
  COFD[3427] = 1.47666333E-02;
  COFD[3428] = -1.67805410E+01;
  COFD[3429] = 4.02700875E+00;
  COFD[3430] = -3.16016739E-01;
  COFD[3431] = 1.40440606E-02;
  COFD[3432] = -2.04812176E+01;
  COFD[3433] = 5.09402439E+00;
  COFD[3434] = -4.33965952E-01;
  COFD[3435] = 1.83081493E-02;
  COFD[3436] = -2.04612383E+01;
  COFD[3437] = 5.09402439E+00;
  COFD[3438] = -4.33965952E-01;
  COFD[3439] = 1.83081493E-02;
  COFD[3440] = -2.04294382E+01;
  COFD[3441] = 5.09402439E+00;
  COFD[3442] = -4.33965952E-01;
  COFD[3443] = 1.83081493E-02;
  COFD[3444] = -1.93007509E+01;
  COFD[3445] = 4.36820343E+00;
  COFD[3446] = -2.97329446E-01;
  COFD[3447] = 1.06481693E-02;
  COFD[3448] = -2.00737449E+01;
  COFD[3449] = 5.02732445E+00;
  COFD[3450] = -4.33404796E-01;
  COFD[3451] = 1.86200998E-02;
  COFD[3452] = -2.00737449E+01;
  COFD[3453] = 5.02732445E+00;
  COFD[3454] = -4.33404796E-01;
  COFD[3455] = 1.86200998E-02;
  COFD[3456] = -1.32487899E+01;
  COFD[3457] = 3.09549012E+00;
  COFD[3458] = -1.95916803E-01;
  COFD[3459] = 8.87343782E-03;
  COFD[3460] = -1.64868756E+01;
  COFD[3461] = 4.51809798E+00;
  COFD[3462] = -3.77379320E-01;
  COFD[3463] = 1.66092335E-02;
  COFD[3464] = -1.58815674E+01;
  COFD[3465] = 3.82653625E+00;
  COFD[3466] = -2.90317972E-01;
  COFD[3467] = 1.29427670E-02;
  COFD[3468] = -1.71313048E+01;
  COFD[3469] = 4.16164957E+00;
  COFD[3470] = -3.32841595E-01;
  COFD[3471] = 1.47466698E-02;
  COFD[3472] = -1.58961347E+01;
  COFD[3473] = 3.82653625E+00;
  COFD[3474] = -2.90317972E-01;
  COFD[3475] = 1.29427670E-02;
  COFD[3476] = -1.96601270E+01;
  COFD[3477] = 4.91110749E+00;
  COFD[3478] = -3.90241793E-01;
  COFD[3479] = 1.55910826E-02;
  COFD[3480] = -1.71362101E+01;
  COFD[3481] = 4.16164957E+00;
  COFD[3482] = -3.32841595E-01;
  COFD[3483] = 1.47466698E-02;
  COFD[3484] = -1.71408690E+01;
  COFD[3485] = 4.16164957E+00;
  COFD[3486] = -3.32841595E-01;
  COFD[3487] = 1.47466698E-02;
  COFD[3488] = -1.56116023E+01;
  COFD[3489] = 3.69274034E+00;
  COFD[3490] = -2.73095123E-01;
  COFD[3491] = 1.22021663E-02;
  COFD[3492] = -1.58289853E+01;
  COFD[3493] = 3.82653625E+00;
  COFD[3494] = -2.90317972E-01;
  COFD[3495] = 1.29427670E-02;
  COFD[3496] = -1.80037992E+01;
  COFD[3497] = 4.50855003E+00;
  COFD[3498] = -3.76176052E-01;
  COFD[3499] = 1.65584327E-02;
  COFD[3500] = -1.80037992E+01;
  COFD[3501] = 4.50855003E+00;
  COFD[3502] = -3.76176052E-01;
  COFD[3503] = 1.65584327E-02;
  COFD[3504] = -1.80214493E+01;
  COFD[3505] = 4.50855003E+00;
  COFD[3506] = -3.76176052E-01;
  COFD[3507] = 1.65584327E-02;
  COFD[3508] = -1.79544756E+01;
  COFD[3509] = 4.48317979E+00;
  COFD[3510] = -3.72968871E-01;
  COFD[3511] = 1.64225591E-02;
  COFD[3512] = -1.69245408E+01;
  COFD[3513] = 4.07720052E+00;
  COFD[3514] = -3.22483261E-01;
  COFD[3515] = 1.43228011E-02;
  COFD[3516] = -1.96486674E+01;
  COFD[3517] = 4.98746788E+00;
  COFD[3518] = -4.30429982E-01;
  COFD[3519] = 1.85826557E-02;
  COFD[3520] = -2.02174397E+01;
  COFD[3521] = 5.04008979E+00;
  COFD[3522] = -4.13907920E-01;
  COFD[3523] = 1.69021003E-02;
  COFD[3524] = -2.02232015E+01;
  COFD[3525] = 5.04008979E+00;
  COFD[3526] = -4.13907920E-01;
  COFD[3527] = 1.69021003E-02;
  COFD[3528] = -2.02257022E+01;
  COFD[3529] = 5.09035673E+00;
  COFD[3530] = -4.27354668E-01;
  COFD[3531] = 1.77683778E-02;
  COFD[3532] = -2.02257022E+01;
  COFD[3533] = 5.09035673E+00;
  COFD[3534] = -4.27354668E-01;
  COFD[3535] = 1.77683778E-02;
  COFD[3536] = -2.02654337E+01;
  COFD[3537] = 5.06196480E+00;
  COFD[3538] = -4.18274084E-01;
  COFD[3539] = 1.71543392E-02;
  COFD[3540] = -1.92714508E+01;
  COFD[3541] = 4.86988873E+00;
  COFD[3542] = -4.18132322E-01;
  COFD[3543] = 1.81721691E-02;
  COFD[3544] = -1.92787678E+01;
  COFD[3545] = 4.86988873E+00;
  COFD[3546] = -4.18132322E-01;
  COFD[3547] = 1.81721691E-02;
  COFD[3548] = -1.92856362E+01;
  COFD[3549] = 4.86988873E+00;
  COFD[3550] = -4.18132322E-01;
  COFD[3551] = 1.81721691E-02;
  COFD[3552] = -1.98548169E+01;
  COFD[3553] = 5.03898967E+00;
  COFD[3554] = -4.33424410E-01;
  COFD[3555] = 1.85583951E-02;
  COFD[3556] = -1.97872565E+01;
  COFD[3557] = 5.00431031E+00;
  COFD[3558] = -4.31814645E-01;
  COFD[3559] = 1.86092360E-02;
  COFD[3560] = -1.97930041E+01;
  COFD[3561] = 5.00431031E+00;
  COFD[3562] = -4.31814645E-01;
  COFD[3563] = 1.86092360E-02;
  COFD[3564] = -1.79892975E+01;
  COFD[3565] = 4.56481098E+00;
  COFD[3566] = -3.83274058E-01;
  COFD[3567] = 1.68584426E-02;
  COFD[3568] = -2.03426978E+01;
  COFD[3569] = 5.07414515E+00;
  COFD[3570] = -4.23464178E-01;
  COFD[3571] = 1.75259967E-02;
  COFD[3572] = -2.03426978E+01;
  COFD[3573] = 5.07414515E+00;
  COFD[3574] = -4.23464178E-01;
  COFD[3575] = 1.75259967E-02;
  COFD[3576] = -1.56528675E+01;
  COFD[3577] = 3.69274034E+00;
  COFD[3578] = -2.73095123E-01;
  COFD[3579] = 1.22021663E-02;
  COFD[3580] = -1.58351697E+01;
  COFD[3581] = 3.82653625E+00;
  COFD[3582] = -2.90317972E-01;
  COFD[3583] = 1.29427670E-02;
  COFD[3584] = -1.58511605E+01;
  COFD[3585] = 3.82653625E+00;
  COFD[3586] = -2.90317972E-01;
  COFD[3587] = 1.29427670E-02;
  COFD[3588] = -1.99422154E+01;
  COFD[3589] = 5.06283593E+00;
  COFD[3590] = -4.18459882E-01;
  COFD[3591] = 1.71653830E-02;
  COFD[3592] = -1.59448894E+01;
  COFD[3593] = 3.69274034E+00;
  COFD[3594] = -2.73095123E-01;
  COFD[3595] = 1.22021663E-02;
  COFD[3596] = -1.69101206E+01;
  COFD[3597] = 4.07034547E+00;
  COFD[3598] = -3.21605793E-01;
  COFD[3599] = 1.42852210E-02;
  COFD[3600] = -1.90689699E+01;
  COFD[3601] = 4.82250870E+00;
  COFD[3602] = -4.12600742E-01;
  COFD[3603] = 1.79576716E-02;
  COFD[3604] = -1.95581354E+01;
  COFD[3605] = 4.95546444E+00;
  COFD[3606] = -4.27317415E-01;
  COFD[3607] = 1.84910222E-02;
  COFD[3608] = -1.74019563E+01;
  COFD[3609] = 4.25886998E+00;
  COFD[3610] = -3.44997921E-01;
  COFD[3611] = 1.52548168E-02;
  COFD[3612] = -1.60882845E+01;
  COFD[3613] = 3.74816264E+00;
  COFD[3614] = -2.80237953E-01;
  COFD[3615] = 1.25097217E-02;
  COFD[3616] = -2.00396362E+01;
  COFD[3617] = 4.91350151E+00;
  COFD[3618] = -3.90802264E-01;
  COFD[3619] = 1.56254380E-02;
  COFD[3620] = -2.00461043E+01;
  COFD[3621] = 4.91350151E+00;
  COFD[3622] = -3.90802264E-01;
  COFD[3623] = 1.56254380E-02;
  COFD[3624] = -1.79893106E+01;
  COFD[3625] = 4.56481098E+00;
  COFD[3626] = -3.83274058E-01;
  COFD[3627] = 1.68584426E-02;
  COFD[3628] = -1.95552204E+01;
  COFD[3629] = 4.95546444E+00;
  COFD[3630] = -4.27317415E-01;
  COFD[3631] = 1.84910222E-02;
  COFD[3632] = -1.95552204E+01;
  COFD[3633] = 4.95546444E+00;
  COFD[3634] = -4.27317415E-01;
  COFD[3635] = 1.84910222E-02;
  COFD[3636] = -1.95552204E+01;
  COFD[3637] = 4.95546444E+00;
  COFD[3638] = -4.27317415E-01;
  COFD[3639] = 1.84910222E-02;
  COFD[3640] = -1.95521238E+01;
  COFD[3641] = 4.95546444E+00;
  COFD[3642] = -4.27317415E-01;
  COFD[3643] = 1.84910222E-02;
  COFD[3644] = -1.68983912E+01;
  COFD[3645] = 4.07034547E+00;
  COFD[3646] = -3.21605793E-01;
  COFD[3647] = 1.42852210E-02;
  COFD[3648] = -1.78988492E+01;
  COFD[3649] = 4.44223078E+00;
  COFD[3650] = -3.67882929E-01;
  COFD[3651] = 1.62110522E-02;
  COFD[3652] = -2.00996961E+01;
  COFD[3653] = 5.02732445E+00;
  COFD[3654] = -4.33404796E-01;
  COFD[3655] = 1.86200998E-02;
  COFD[3656] = -2.01026613E+01;
  COFD[3657] = 5.02732445E+00;
  COFD[3658] = -4.33404796E-01;
  COFD[3659] = 1.86200998E-02;
  COFD[3660] = -2.03457918E+01;
  COFD[3661] = 5.07414515E+00;
  COFD[3662] = -4.23464178E-01;
  COFD[3663] = 1.75259967E-02;
  COFD[3664] = -2.03487623E+01;
  COFD[3665] = 5.07414515E+00;
  COFD[3666] = -4.23464178E-01;
  COFD[3667] = 1.75259967E-02;
  COFD[3668] = -1.97865064E+01;
  COFD[3669] = 5.08248217E+00;
  COFD[3670] = -4.34396720E-01;
  COFD[3671] = 1.84066863E-02;
  COFD[3672] = -1.59213522E+01;
  COFD[3673] = 3.82653625E+00;
  COFD[3674] = -2.90317972E-01;
  COFD[3675] = 1.29427670E-02;
  COFD[3676] = -1.76272031E+01;
  COFD[3677] = 4.34957164E+00;
  COFD[3678] = -3.56393865E-01;
  COFD[3679] = 1.57341186E-02;
  COFD[3680] = -1.98383917E+01;
  COFD[3681] = 5.02339094E+00;
  COFD[3682] = -4.33412034E-01;
  COFD[3683] = 1.86420804E-02;
  COFD[3684] = -1.98943939E+01;
  COFD[3685] = 5.02339094E+00;
  COFD[3686] = -4.33412034E-01;
  COFD[3687] = 1.86420804E-02;
  COFD[3688] = -1.99240622E+01;
  COFD[3689] = 5.02339094E+00;
  COFD[3690] = -4.33412034E-01;
  COFD[3691] = 1.86420804E-02;
  COFD[3692] = -1.82676565E+01;
  COFD[3693] = 4.42281403E+00;
  COFD[3694] = -3.65512947E-01;
  COFD[3695] = 1.61143523E-02;
  COFD[3696] = -1.98337374E+01;
  COFD[3697] = 5.02339094E+00;
  COFD[3698] = -4.33412034E-01;
  COFD[3699] = 1.86420804E-02;
  COFD[3700] = -1.98921838E+01;
  COFD[3701] = 5.02339094E+00;
  COFD[3702] = -4.33412034E-01;
  COFD[3703] = 1.86420804E-02;
  COFD[3704] = -1.78392525E+01;
  COFD[3705] = 4.30416353E+00;
  COFD[3706] = -3.50704401E-01;
  COFD[3707] = 1.54954293E-02;
  COFD[3708] = -1.98288370E+01;
  COFD[3709] = 5.02339094E+00;
  COFD[3710] = -4.33412034E-01;
  COFD[3711] = 1.86420804E-02;
  COFD[3712] = -1.73434734E+01;
  COFD[3713] = 4.16605006E+00;
  COFD[3714] = -3.33356903E-01;
  COFD[3715] = 1.47666333E-02;
  COFD[3716] = -1.68041719E+01;
  COFD[3717] = 4.02700875E+00;
  COFD[3718] = -3.16016739E-01;
  COFD[3719] = 1.40440606E-02;
  COFD[3720] = -2.05108525E+01;
  COFD[3721] = 5.09402439E+00;
  COFD[3722] = -4.33965952E-01;
  COFD[3723] = 1.83081493E-02;
  COFD[3724] = -2.04896787E+01;
  COFD[3725] = 5.09402439E+00;
  COFD[3726] = -4.33965952E-01;
  COFD[3727] = 1.83081493E-02;
  COFD[3728] = -2.04560785E+01;
  COFD[3729] = 5.09402439E+00;
  COFD[3730] = -4.33965952E-01;
  COFD[3731] = 1.83081493E-02;
  COFD[3732] = -1.93272592E+01;
  COFD[3733] = 4.36820343E+00;
  COFD[3734] = -2.97329446E-01;
  COFD[3735] = 1.06481693E-02;
  COFD[3736] = -2.00996961E+01;
  COFD[3737] = 5.02732445E+00;
  COFD[3738] = -4.33404796E-01;
  COFD[3739] = 1.86200998E-02;
  COFD[3740] = -2.00996961E+01;
  COFD[3741] = 5.02732445E+00;
  COFD[3742] = -4.33404796E-01;
  COFD[3743] = 1.86200998E-02;
  COFD[3744] = -1.31919949E+01;
  COFD[3745] = 3.07844273E+00;
  COFD[3746] = -1.93660126E-01;
  COFD[3747] = 8.77376611E-03;
  COFD[3748] = -1.64011878E+01;
  COFD[3749] = 4.49256652E+00;
  COFD[3750] = -3.74152937E-01;
  COFD[3751] = 1.64726078E-02;
  COFD[3752] = -1.58233182E+01;
  COFD[3753] = 3.80482327E+00;
  COFD[3754] = -2.87543922E-01;
  COFD[3755] = 1.28244459E-02;
  COFD[3756] = -1.70950725E+01;
  COFD[3757] = 4.14674488E+00;
  COFD[3758] = -3.31073361E-01;
  COFD[3759] = 1.46770434E-02;
  COFD[3760] = -1.58383806E+01;
  COFD[3761] = 3.80482327E+00;
  COFD[3762] = -2.87543922E-01;
  COFD[3763] = 1.28244459E-02;
  COFD[3764] = -1.93206599E+01;
  COFD[3765] = 4.67272121E+00;
  COFD[3766] = -3.48054479E-01;
  COFD[3767] = 1.33032342E-02;
  COFD[3768] = -1.71001979E+01;
  COFD[3769] = 4.14674488E+00;
  COFD[3770] = -3.31073361E-01;
  COFD[3771] = 1.46770434E-02;
  COFD[3772] = -1.71050681E+01;
  COFD[3773] = 4.14674488E+00;
  COFD[3774] = -3.31073361E-01;
  COFD[3775] = 1.46770434E-02;
  COFD[3776] = -1.55601331E+01;
  COFD[3777] = 3.67401276E+00;
  COFD[3778] = -2.70701727E-01;
  COFD[3779] = 1.21000401E-02;
  COFD[3780] = -1.57690681E+01;
  COFD[3781] = 3.80482327E+00;
  COFD[3782] = -2.87543922E-01;
  COFD[3783] = 1.28244459E-02;
  COFD[3784] = -1.79362633E+01;
  COFD[3785] = 4.48317979E+00;
  COFD[3786] = -3.72968871E-01;
  COFD[3787] = 1.64225591E-02;
  COFD[3788] = -1.79362633E+01;
  COFD[3789] = 4.48317979E+00;
  COFD[3790] = -3.72968871E-01;
  COFD[3791] = 1.64225591E-02;
  COFD[3792] = -1.79544756E+01;
  COFD[3793] = 4.48317979E+00;
  COFD[3794] = -3.72968871E-01;
  COFD[3795] = 1.64225591E-02;
  COFD[3796] = -1.78974012E+01;
  COFD[3797] = 4.46172041E+00;
  COFD[3798] = -3.70301393E-01;
  COFD[3799] = 1.63115677E-02;
  COFD[3800] = -1.68726723E+01;
  COFD[3801] = 4.05544619E+00;
  COFD[3802] = -3.19694180E-01;
  COFD[3803] = 1.42031752E-02;
  COFD[3804] = -1.96207859E+01;
  COFD[3805] = 4.97678028E+00;
  COFD[3806] = -4.29461624E-01;
  COFD[3807] = 1.85581747E-02;
  COFD[3808] = -2.02394909E+01;
  COFD[3809] = 5.05374617E+00;
  COFD[3810] = -4.16553643E-01;
  COFD[3811] = 1.70529068E-02;
  COFD[3812] = -2.02455030E+01;
  COFD[3813] = 5.05374617E+00;
  COFD[3814] = -4.16553643E-01;
  COFD[3815] = 1.70529068E-02;
  COFD[3816] = -2.02543134E+01;
  COFD[3817] = 5.07342592E+00;
  COFD[3818] = -4.22625796E-01;
  COFD[3819] = 1.74592755E-02;
  COFD[3820] = -2.02543134E+01;
  COFD[3821] = 5.07342592E+00;
  COFD[3822] = -4.22625796E-01;
  COFD[3823] = 1.74592755E-02;
  COFD[3824] = -2.02703134E+01;
  COFD[3825] = 5.06749927E+00;
  COFD[3826] = -4.19714627E-01;
  COFD[3827] = 1.72462818E-02;
  COFD[3828] = -1.92278630E+01;
  COFD[3829] = 4.85361962E+00;
  COFD[3830] = -4.16341235E-01;
  COFD[3831] = 1.81078746E-02;
  COFD[3832] = -1.92354813E+01;
  COFD[3833] = 4.85361962E+00;
  COFD[3834] = -4.16341235E-01;
  COFD[3835] = 1.81078746E-02;
  COFD[3836] = -1.92426366E+01;
  COFD[3837] = 4.85361962E+00;
  COFD[3838] = -4.16341235E-01;
  COFD[3839] = 1.81078746E-02;
  COFD[3840] = -1.98358996E+01;
  COFD[3841] = 5.03362049E+00;
  COFD[3842] = -4.33242805E-01;
  COFD[3843] = 1.85719846E-02;
  COFD[3844] = -1.97612564E+01;
  COFD[3845] = 4.99521052E+00;
  COFD[3846] = -4.31066342E-01;
  COFD[3847] = 1.85948023E-02;
  COFD[3848] = -1.97672538E+01;
  COFD[3849] = 4.99521052E+00;
  COFD[3850] = -4.31066342E-01;
  COFD[3851] = 1.85948023E-02;
  COFD[3852] = -1.79273423E+01;
  COFD[3853] = 4.53958872E+00;
  COFD[3854] = -3.80085082E-01;
  COFD[3855] = 1.67233237E-02;
  COFD[3856] = -2.03488077E+01;
  COFD[3857] = 5.07898162E+00;
  COFD[3858] = -4.24793212E-01;
  COFD[3859] = 1.76124459E-02;
  COFD[3860] = -2.03488077E+01;
  COFD[3861] = 5.07898162E+00;
  COFD[3862] = -4.24793212E-01;
  COFD[3863] = 1.76124459E-02;
  COFD[3864] = -1.56026345E+01;
  COFD[3865] = 3.67401276E+00;
  COFD[3866] = -2.70701727E-01;
  COFD[3867] = 1.21000401E-02;
  COFD[3868] = -1.57761479E+01;
  COFD[3869] = 3.80482327E+00;
  COFD[3870] = -2.87543922E-01;
  COFD[3871] = 1.28244459E-02;
  COFD[3872] = -1.57926657E+01;
  COFD[3873] = 3.80482327E+00;
  COFD[3874] = -2.87543922E-01;
  COFD[3875] = 1.28244459E-02;
  COFD[3876] = -1.98389640E+01;
  COFD[3877] = 4.97580922E+00;
  COFD[3878] = -4.02237203E-01;
  COFD[3879] = 1.62583650E-02;
  COFD[3880] = -1.59014141E+01;
  COFD[3881] = 3.67401276E+00;
  COFD[3882] = -2.70701727E-01;
  COFD[3883] = 1.21000401E-02;
  COFD[3884] = -1.68575077E+01;
  COFD[3885] = 4.04805862E+00;
  COFD[3886] = -3.18738478E-01;
  COFD[3887] = 1.41617986E-02;
  COFD[3888] = -1.90103087E+01;
  COFD[3889] = 4.79799683E+00;
  COFD[3890] = -4.09580100E-01;
  COFD[3891] = 1.78329319E-02;
  COFD[3892] = -1.95301804E+01;
  COFD[3893] = 4.94445276E+00;
  COFD[3894] = -4.26273387E-01;
  COFD[3895] = 1.84617401E-02;
  COFD[3896] = -1.73462514E+01;
  COFD[3897] = 4.23587636E+00;
  COFD[3898] = -3.42100311E-01;
  COFD[3899] = 1.51326432E-02;
  COFD[3900] = -1.60356633E+01;
  COFD[3901] = 3.72594559E+00;
  COFD[3902] = -2.77362842E-01;
  COFD[3903] = 1.23854090E-02;
  COFD[3904] = -2.00616904E+01;
  COFD[3905] = 4.92718612E+00;
  COFD[3906] = -3.93420387E-01;
  COFD[3907] = 1.57732507E-02;
  COFD[3908] = -2.00684325E+01;
  COFD[3909] = 4.92718612E+00;
  COFD[3910] = -3.93420387E-01;
  COFD[3911] = 1.57732507E-02;
  COFD[3912] = -1.79273560E+01;
  COFD[3913] = 4.53958872E+00;
  COFD[3914] = -3.80085082E-01;
  COFD[3915] = 1.67233237E-02;
  COFD[3916] = -1.95271226E+01;
  COFD[3917] = 4.94445276E+00;
  COFD[3918] = -4.26273387E-01;
  COFD[3919] = 1.84617401E-02;
  COFD[3920] = -1.95271226E+01;
  COFD[3921] = 4.94445276E+00;
  COFD[3922] = -4.26273387E-01;
  COFD[3923] = 1.84617401E-02;
  COFD[3924] = -1.95271226E+01;
  COFD[3925] = 4.94445276E+00;
  COFD[3926] = -4.26273387E-01;
  COFD[3927] = 1.84617401E-02;
  COFD[3928] = -1.95238753E+01;
  COFD[3929] = 4.94445276E+00;
  COFD[3930] = -4.26273387E-01;
  COFD[3931] = 1.84617401E-02;
  COFD[3932] = -1.68452721E+01;
  COFD[3933] = 4.04805862E+00;
  COFD[3934] = -3.18738478E-01;
  COFD[3935] = 1.41617986E-02;
  COFD[3936] = -1.78531771E+01;
  COFD[3937] = 4.42308477E+00;
  COFD[3938] = -3.65545815E-01;
  COFD[3939] = 1.61156849E-02;
  COFD[3940] = -2.00889371E+01;
  COFD[3941] = 5.02335992E+00;
  COFD[3942] = -4.33409572E-01;
  COFD[3943] = 1.86420385E-02;
  COFD[3944] = -2.00920476E+01;
  COFD[3945] = 5.02335992E+00;
  COFD[3946] = -4.33409572E-01;
  COFD[3947] = 1.86420385E-02;
  COFD[3948] = -2.03520524E+01;
  COFD[3949] = 5.07898162E+00;
  COFD[3950] = -4.24793212E-01;
  COFD[3951] = 1.76124459E-02;
  COFD[3952] = -2.03551683E+01;
  COFD[3953] = 5.07898162E+00;
  COFD[3954] = -4.24793212E-01;
  COFD[3955] = 1.76124459E-02;
  COFD[3956] = -2.00117517E+01;
  COFD[3957] = 5.11209579E+00;
  COFD[3958] = -4.32625277E-01;
  COFD[3959] = 1.80982347E-02;
  COFD[3960] = -1.58644912E+01;
  COFD[3961] = 3.80482327E+00;
  COFD[3962] = -2.87543922E-01;
  COFD[3963] = 1.28244459E-02;
  COFD[3964] = -1.75753250E+01;
  COFD[3965] = 4.32776459E+00;
  COFD[3966] = -3.53659827E-01;
  COFD[3967] = 1.56193492E-02;
  COFD[3968] = -1.99371306E+01;
  COFD[3969] = 5.03812529E+00;
  COFD[3970] = -4.33377026E-01;
  COFD[3971] = 1.85590211E-02;
  COFD[3972] = -1.99958402E+01;
  COFD[3973] = 5.03812529E+00;
  COFD[3974] = -4.33377026E-01;
  COFD[3975] = 1.85590211E-02;
  COFD[3976] = -2.00270773E+01;
  COFD[3977] = 5.03812529E+00;
  COFD[3978] = -4.33377026E-01;
  COFD[3979] = 1.85590211E-02;
  COFD[3980] = -1.82260052E+01;
  COFD[3981] = 4.40246406E+00;
  COFD[3982] = -3.62993510E-01;
  COFD[3983] = 1.60099297E-02;
  COFD[3984] = -1.99322652E+01;
  COFD[3985] = 5.03812529E+00;
  COFD[3986] = -4.33377026E-01;
  COFD[3987] = 1.85590211E-02;
  COFD[3988] = -1.99935171E+01;
  COFD[3989] = 5.03812529E+00;
  COFD[3990] = -4.33377026E-01;
  COFD[3991] = 1.85590211E-02;
  COFD[3992] = -1.77909813E+01;
  COFD[3993] = 4.28159618E+00;
  COFD[3994] = -3.47863181E-01;
  COFD[3995] = 1.53756873E-02;
  COFD[3996] = -1.99271448E+01;
  COFD[3997] = 5.03812529E+00;
  COFD[3998] = -4.33377026E-01;
  COFD[3999] = 1.85590211E-02;
  COFD[4000] = -1.73121532E+01;
  COFD[4001] = 4.15162732E+00;
  COFD[4002] = -3.31664012E-01;
  COFD[4003] = 1.47008486E-02;
  COFD[4004] = -1.67518644E+01;
  COFD[4005] = 4.00481774E+00;
  COFD[4006] = -3.13175426E-01;
  COFD[4007] = 1.39224756E-02;
  COFD[4008] = -2.04957699E+01;
  COFD[4009] = 5.08719650E+00;
  COFD[4010] = -4.33606546E-01;
  COFD[4011] = 1.83140816E-02;
  COFD[4012] = -2.04734282E+01;
  COFD[4013] = 5.08719650E+00;
  COFD[4014] = -4.33606546E-01;
  COFD[4015] = 1.83140816E-02;
  COFD[4016] = -2.04380784E+01;
  COFD[4017] = 5.08719650E+00;
  COFD[4018] = -4.33606546E-01;
  COFD[4019] = 1.83140816E-02;
  COFD[4020] = -1.93988067E+01;
  COFD[4021] = 4.40179261E+00;
  COFD[4022] = -3.02821537E-01;
  COFD[4023] = 1.09323328E-02;
  COFD[4024] = -2.00889371E+01;
  COFD[4025] = 5.02335992E+00;
  COFD[4026] = -4.33409572E-01;
  COFD[4027] = 1.86420385E-02;
  COFD[4028] = -2.00889371E+01;
  COFD[4029] = 5.02335992E+00;
  COFD[4030] = -4.33409572E-01;
  COFD[4031] = 1.86420385E-02;
  COFD[4032] = -1.23566392E+01;
  COFD[4033] = 2.75767051E+00;
  COFD[4034] = -1.50865932E-01;
  COFD[4035] = 6.86861709E-03;
  COFD[4036] = -1.52563009E+01;
  COFD[4037] = 4.08510973E+00;
  COFD[4038] = -3.23491638E-01;
  COFD[4039] = 1.43658179E-02;
  COFD[4040] = -1.49769964E+01;
  COFD[4041] = 3.45922008E+00;
  COFD[4042] = -2.43647140E-01;
  COFD[4043] = 1.09635979E-02;
  COFD[4044] = -1.60861041E+01;
  COFD[4045] = 3.71857850E+00;
  COFD[4046] = -2.76412050E-01;
  COFD[4047] = 1.23444010E-02;
  COFD[4048] = -1.49962227E+01;
  COFD[4049] = 3.45922008E+00;
  COFD[4050] = -2.43647140E-01;
  COFD[4051] = 1.09635979E-02;
  COFD[4052] = -1.99673561E+01;
  COFD[4053] = 5.05180841E+00;
  COFD[4054] = -4.16173777E-01;
  COFD[4055] = 1.70311396E-02;
  COFD[4056] = -1.60932830E+01;
  COFD[4057] = 3.71857850E+00;
  COFD[4058] = -2.76412050E-01;
  COFD[4059] = 1.23444010E-02;
  COFD[4060] = -1.61001317E+01;
  COFD[4061] = 3.71857850E+00;
  COFD[4062] = -2.76412050E-01;
  COFD[4063] = 1.23444010E-02;
  COFD[4064] = -1.47171591E+01;
  COFD[4065] = 3.33365140E+00;
  COFD[4066] = -2.27171003E-01;
  COFD[4067] = 1.02420392E-02;
  COFD[4068] = -1.49089957E+01;
  COFD[4069] = 3.45922008E+00;
  COFD[4070] = -2.43647140E-01;
  COFD[4071] = 1.09635979E-02;
  COFD[4072] = -1.69016904E+01;
  COFD[4073] = 4.07720052E+00;
  COFD[4074] = -3.22483261E-01;
  COFD[4075] = 1.43228011E-02;
  COFD[4076] = -1.69016904E+01;
  COFD[4077] = 4.07720052E+00;
  COFD[4078] = -3.22483261E-01;
  COFD[4079] = 1.43228011E-02;
  COFD[4080] = -1.69245408E+01;
  COFD[4081] = 4.07720052E+00;
  COFD[4082] = -3.22483261E-01;
  COFD[4083] = 1.43228011E-02;
  COFD[4084] = -1.68726723E+01;
  COFD[4085] = 4.05544619E+00;
  COFD[4086] = -3.19694180E-01;
  COFD[4087] = 1.42031752E-02;
  COFD[4088] = -1.58861693E+01;
  COFD[4089] = 3.63796233E+00;
  COFD[4090] = -2.66284812E-01;
  COFD[4091] = 1.19201116E-02;
  COFD[4092] = -1.88354252E+01;
  COFD[4093] = 4.66874576E+00;
  COFD[4094] = -3.95586447E-01;
  COFD[4095] = 1.73433051E-02;
  COFD[4096] = -2.01506875E+01;
  COFD[4097] = 5.08521726E+00;
  COFD[4098] = -4.33823377E-01;
  COFD[4099] = 1.83431423E-02;
  COFD[4100] = -2.01590006E+01;
  COFD[4101] = 5.08521726E+00;
  COFD[4102] = -4.33823377E-01;
  COFD[4103] = 1.83431423E-02;
  COFD[4104] = -2.00769711E+01;
  COFD[4105] = 5.06331270E+00;
  COFD[4106] = -4.33896102E-01;
  COFD[4107] = 1.84673566E-02;
  COFD[4108] = -2.00769711E+01;
  COFD[4109] = 5.06331270E+00;
  COFD[4110] = -4.33896102E-01;
  COFD[4111] = 1.84673566E-02;
  COFD[4112] = -2.01502132E+01;
  COFD[4113] = 5.08183109E+00;
  COFD[4114] = -4.34492289E-01;
  COFD[4115] = 1.84183589E-02;
  COFD[4116] = -1.82994978E+01;
  COFD[4117] = 4.49255955E+00;
  COFD[4118] = -3.74152053E-01;
  COFD[4119] = 1.64725703E-02;
  COFD[4120] = -1.83098257E+01;
  COFD[4121] = 4.49255955E+00;
  COFD[4122] = -3.74152053E-01;
  COFD[4123] = 1.64725703E-02;
  COFD[4124] = -1.83195776E+01;
  COFD[4125] = 4.49255955E+00;
  COFD[4126] = -3.74152053E-01;
  COFD[4127] = 1.64725703E-02;
  COFD[4128] = -1.91106073E+01;
  COFD[4129] = 4.76950503E+00;
  COFD[4130] = -4.06229912E-01;
  COFD[4131] = 1.77019654E-02;
  COFD[4132] = -1.89633914E+01;
  COFD[4133] = 4.69425869E+00;
  COFD[4134] = -3.98385563E-01;
  COFD[4135] = 1.74432008E-02;
  COFD[4136] = -1.89716858E+01;
  COFD[4137] = 4.69425869E+00;
  COFD[4138] = -3.98385563E-01;
  COFD[4139] = 1.74432008E-02;
  COFD[4140] = -1.69224603E+01;
  COFD[4141] = 4.11938612E+00;
  COFD[4142] = -3.27769287E-01;
  COFD[4143] = 1.45442039E-02;
  COFD[4144] = -2.01649794E+01;
  COFD[4145] = 5.05519080E+00;
  COFD[4146] = -4.33931429E-01;
  COFD[4147] = 1.85141040E-02;
  COFD[4148] = -2.01649794E+01;
  COFD[4149] = 5.05519080E+00;
  COFD[4150] = -4.33931429E-01;
  COFD[4151] = 1.85141040E-02;
  COFD[4152] = -1.47696913E+01;
  COFD[4153] = 3.33365140E+00;
  COFD[4154] = -2.27171003E-01;
  COFD[4155] = 1.02420392E-02;
  COFD[4156] = -1.49250678E+01;
  COFD[4157] = 3.45922008E+00;
  COFD[4158] = -2.43647140E-01;
  COFD[4159] = 1.09635979E-02;
  COFD[4160] = -1.49459765E+01;
  COFD[4161] = 3.45922008E+00;
  COFD[4162] = -2.43647140E-01;
  COFD[4163] = 1.09635979E-02;
  COFD[4164] = -1.99332395E+01;
  COFD[4165] = 5.10792650E+00;
  COFD[4166] = -4.34330890E-01;
  COFD[4167] = 1.82649269E-02;
  COFD[4168] = -1.51201540E+01;
  COFD[4169] = 3.33365140E+00;
  COFD[4170] = -2.27171003E-01;
  COFD[4171] = 1.02420392E-02;
  COFD[4172] = -1.58837524E+01;
  COFD[4173] = 3.63399451E+00;
  COFD[4174] = -2.65805952E-01;
  COFD[4175] = 1.19009325E-02;
  COFD[4176] = -1.81319473E+01;
  COFD[4177] = 4.44024400E+00;
  COFD[4178] = -3.67638841E-01;
  COFD[4179] = 1.62010182E-02;
  COFD[4180] = -1.87235317E+01;
  COFD[4181] = 4.62516229E+00;
  COFD[4182] = -3.90584144E-01;
  COFD[4183] = 1.71538634E-02;
  COFD[4184] = -1.63554516E+01;
  COFD[4185] = 3.81916246E+00;
  COFD[4186] = -2.89377488E-01;
  COFD[4187] = 1.29027185E-02;
  COFD[4188] = -1.52584124E+01;
  COFD[4189] = 3.39205846E+00;
  COFD[4190] = -2.34946466E-01;
  COFD[4191] = 1.05875775E-02;
  COFD[4192] = -2.03137904E+01;
  COFD[4193] = 5.11266027E+00;
  COFD[4194] = -4.33127534E-01;
  COFD[4195] = 1.81376717E-02;
  COFD[4196] = -2.03230250E+01;
  COFD[4197] = 5.11266027E+00;
  COFD[4198] = -4.33127534E-01;
  COFD[4199] = 1.81376717E-02;
  COFD[4200] = -1.69224801E+01;
  COFD[4201] = 4.11938612E+00;
  COFD[4202] = -3.27769287E-01;
  COFD[4203] = 1.45442039E-02;
  COFD[4204] = -1.87190862E+01;
  COFD[4205] = 4.62516229E+00;
  COFD[4206] = -3.90584144E-01;
  COFD[4207] = 1.71538634E-02;
  COFD[4208] = -1.87190862E+01;
  COFD[4209] = 4.62516229E+00;
  COFD[4210] = -3.90584144E-01;
  COFD[4211] = 1.71538634E-02;
  COFD[4212] = -1.87190862E+01;
  COFD[4213] = 4.62516229E+00;
  COFD[4214] = -3.90584144E-01;
  COFD[4215] = 1.71538634E-02;
  COFD[4216] = -1.87143786E+01;
  COFD[4217] = 4.62516229E+00;
  COFD[4218] = -3.90584144E-01;
  COFD[4219] = 1.71538634E-02;
  COFD[4220] = -1.58668752E+01;
  COFD[4221] = 3.63399451E+00;
  COFD[4222] = -2.65805952E-01;
  COFD[4223] = 1.19009325E-02;
  COFD[4224] = -1.68787626E+01;
  COFD[4225] = 4.01121277E+00;
  COFD[4226] = -3.13992770E-01;
  COFD[4227] = 1.39573845E-02;
  COFD[4228] = -1.93450338E+01;
  COFD[4229] = 4.73591519E+00;
  COFD[4230] = -4.02862908E-01;
  COFD[4231] = 1.75981577E-02;
  COFD[4232] = -1.93495569E+01;
  COFD[4233] = 4.73591519E+00;
  COFD[4234] = -4.02862908E-01;
  COFD[4235] = 1.75981577E-02;
  COFD[4236] = -2.01696834E+01;
  COFD[4237] = 5.05519080E+00;
  COFD[4238] = -4.33931429E-01;
  COFD[4239] = 1.85141040E-02;
  COFD[4240] = -2.01742139E+01;
  COFD[4241] = 5.05519080E+00;
  COFD[4242] = -4.33931429E-01;
  COFD[4243] = 1.85141040E-02;
  COFD[4244] = -1.96440473E+01;
  COFD[4245] = 5.03031667E+00;
  COFD[4246] = -4.33349254E-01;
  COFD[4247] = 1.85991049E-02;
  COFD[4248] = -1.50299446E+01;
  COFD[4249] = 3.45922008E+00;
  COFD[4250] = -2.43647140E-01;
  COFD[4251] = 1.09635979E-02;
  COFD[4252] = -1.65805646E+01;
  COFD[4253] = 3.90596075E+00;
  COFD[4254] = -3.00417034E-01;
  COFD[4255] = 1.33716766E-02;
  COFD[4256] = -1.92386558E+01;
  COFD[4257] = 4.78116946E+00;
  COFD[4258] = -4.07518289E-01;
  COFD[4259] = 1.77483795E-02;
  COFD[4260] = -1.93235278E+01;
  COFD[4261] = 4.78116946E+00;
  COFD[4262] = -4.07518289E-01;
  COFD[4263] = 1.77483795E-02;
  COFD[4264] = -1.93706435E+01;
  COFD[4265] = 4.78116946E+00;
  COFD[4266] = -4.07518289E-01;
  COFD[4267] = 1.77483795E-02;
  COFD[4268] = -1.72942476E+01;
  COFD[4269] = 3.98819843E+00;
  COFD[4270] = -3.11033741E-01;
  COFD[4271] = 1.38301591E-02;
  COFD[4272] = -1.92318131E+01;
  COFD[4273] = 4.78116946E+00;
  COFD[4274] = -4.07518289E-01;
  COFD[4275] = 1.77483795E-02;
  COFD[4276] = -1.93200821E+01;
  COFD[4277] = 4.78116946E+00;
  COFD[4278] = -4.07518289E-01;
  COFD[4279] = 1.77483795E-02;
  COFD[4280] = -1.68409089E+01;
  COFD[4281] = 3.86185667E+00;
  COFD[4282] = -2.94819512E-01;
  COFD[4283] = 1.31343598E-02;
  COFD[4284] = -1.92246408E+01;
  COFD[4285] = 4.78116946E+00;
  COFD[4286] = -4.07518289E-01;
  COFD[4287] = 1.77483795E-02;
  COFD[4288] = -1.63355592E+01;
  COFD[4289] = 3.72477337E+00;
  COFD[4290] = -2.77211200E-01;
  COFD[4291] = 1.23788559E-02;
  COFD[4292] = -1.58218820E+01;
  COFD[4293] = 3.60772565E+00;
  COFD[4294] = -2.62565908E-01;
  COFD[4295] = 1.17679273E-02;
  COFD[4296] = -2.01656056E+01;
  COFD[4297] = 4.97438583E+00;
  COFD[4298] = -4.29221476E-01;
  COFD[4299] = 1.85506966E-02;
  COFD[4300] = -2.01311527E+01;
  COFD[4301] = 4.97438583E+00;
  COFD[4302] = -4.29221476E-01;
  COFD[4303] = 1.85506966E-02;
  COFD[4304] = -2.00782415E+01;
  COFD[4305] = 4.97438583E+00;
  COFD[4306] = -4.29221476E-01;
  COFD[4307] = 1.85506966E-02;
  COFD[4308] = -2.03907825E+01;
  COFD[4309] = 4.90002091E+00;
  COFD[4310] = -3.87799547E-01;
  COFD[4311] = 1.54446274E-02;
  COFD[4312] = -1.93450338E+01;
  COFD[4313] = 4.73591519E+00;
  COFD[4314] = -4.02862908E-01;
  COFD[4315] = 1.75981577E-02;
  COFD[4316] = -1.93450338E+01;
  COFD[4317] = 4.73591519E+00;
  COFD[4318] = -4.02862908E-01;
  COFD[4319] = 1.75981577E-02;
  COFD[4320] = -1.46408050E+01;
  COFD[4321] = 3.61055678E+00;
  COFD[4322] = -2.62922673E-01;
  COFD[4323] = 1.17829245E-02;
  COFD[4324] = -1.79199924E+01;
  COFD[4325] = 4.99108002E+00;
  COFD[4326] = -4.30731923E-01;
  COFD[4327] = 1.85887464E-02;
  COFD[4328] = -1.77327874E+01;
  COFD[4329] = 4.43481404E+00;
  COFD[4330] = -3.66974600E-01;
  COFD[4331] = 1.61738468E-02;
  COFD[4332] = -1.90350359E+01;
  COFD[4333] = 4.73697533E+00;
  COFD[4334] = -4.02980928E-01;
  COFD[4335] = 1.76024499E-02;
  COFD[4336] = -1.77550077E+01;
  COFD[4337] = 4.43481404E+00;
  COFD[4338] = -3.66974600E-01;
  COFD[4339] = 1.61738468E-02;
  COFD[4340] = -1.75596090E+01;
  COFD[4341] = 3.62965469E+00;
  COFD[4342] = -1.80655379E-01;
  COFD[4343] = 4.74692296E-03;
  COFD[4344] = -1.90439565E+01;
  COFD[4345] = 4.73697533E+00;
  COFD[4346] = -4.02980928E-01;
  COFD[4347] = 1.76024499E-02;
  COFD[4348] = -1.90524962E+01;
  COFD[4349] = 4.73697533E+00;
  COFD[4350] = -4.02980928E-01;
  COFD[4351] = 1.76024499E-02;
  COFD[4352] = -1.74249404E+01;
  COFD[4353] = 4.30400174E+00;
  COFD[4354] = -3.50684203E-01;
  COFD[4355] = 1.54945855E-02;
  COFD[4356] = -1.76551970E+01;
  COFD[4357] = 4.43481404E+00;
  COFD[4358] = -3.66974600E-01;
  COFD[4359] = 1.61738468E-02;
  COFD[4360] = -1.96225787E+01;
  COFD[4361] = 4.98746788E+00;
  COFD[4362] = -4.30429982E-01;
  COFD[4363] = 1.85826557E-02;
  COFD[4364] = -1.96225787E+01;
  COFD[4365] = 4.98746788E+00;
  COFD[4366] = -4.30429982E-01;
  COFD[4367] = 1.85826557E-02;
  COFD[4368] = -1.96486674E+01;
  COFD[4369] = 4.98746788E+00;
  COFD[4370] = -4.30429982E-01;
  COFD[4371] = 1.85826557E-02;
  COFD[4372] = -1.96207859E+01;
  COFD[4373] = 4.97678028E+00;
  COFD[4374] = -4.29461624E-01;
  COFD[4375] = 1.85581747E-02;
  COFD[4376] = -1.88354252E+01;
  COFD[4377] = 4.66874576E+00;
  COFD[4378] = -3.95586447E-01;
  COFD[4379] = 1.73433051E-02;
  COFD[4380] = -2.06256415E+01;
  COFD[4381] = 5.09445295E+00;
  COFD[4382] = -4.28247842E-01;
  COFD[4383] = 1.78220903E-02;
  COFD[4384] = -1.94870849E+01;
  COFD[4385] = 4.40317028E+00;
  COFD[4386] = -3.03047050E-01;
  COFD[4387] = 1.09440098E-02;
  COFD[4388] = -1.94973043E+01;
  COFD[4389] = 4.40317028E+00;
  COFD[4390] = -3.03047050E-01;
  COFD[4391] = 1.09440098E-02;
  COFD[4392] = -1.98464807E+01;
  COFD[4393] = 4.57988549E+00;
  COFD[4394] = -3.32527373E-01;
  COFD[4395] = 1.24873706E-02;
  COFD[4396] = -1.98464807E+01;
  COFD[4397] = 4.57988549E+00;
  COFD[4398] = -3.32527373E-01;
  COFD[4399] = 1.24873706E-02;
  COFD[4400] = -1.96268931E+01;
  COFD[4401] = 4.45966189E+00;
  COFD[4402] = -3.12362605E-01;
  COFD[4403] = 1.14283963E-02;
  COFD[4404] = -2.04349783E+01;
  COFD[4405] = 5.09769252E+00;
  COFD[4406] = -4.34136290E-01;
  COFD[4407] = 1.83030477E-02;
  COFD[4408] = -2.04474718E+01;
  COFD[4409] = 5.09769252E+00;
  COFD[4410] = -4.34136290E-01;
  COFD[4411] = 1.83030477E-02;
  COFD[4412] = -2.04593190E+01;
  COFD[4413] = 5.09769252E+00;
  COFD[4414] = -4.34136290E-01;
  COFD[4415] = 1.83030477E-02;
  COFD[4416] = -2.06041847E+01;
  COFD[4417] = 5.06645475E+00;
  COFD[4418] = -4.19370389E-01;
  COFD[4419] = 1.72229000E-02;
  COFD[4420] = -2.06425941E+01;
  COFD[4421] = 5.07954227E+00;
  COFD[4422] = -4.24924340E-01;
  COFD[4423] = 1.76205385E-02;
  COFD[4424] = -2.06527921E+01;
  COFD[4425] = 5.07954227E+00;
  COFD[4426] = -4.24924340E-01;
  COFD[4427] = 1.76205385E-02;
  COFD[4428] = -1.96669871E+01;
  COFD[4429] = 5.00794480E+00;
  COFD[4430] = -4.32110444E-01;
  COFD[4431] = 1.86147351E-02;
  COFD[4432] = -2.00529843E+01;
  COFD[4433] = 4.61140261E+00;
  COFD[4434] = -3.37797240E-01;
  COFD[4435] = 1.27641497E-02;
  COFD[4436] = -2.00529843E+01;
  COFD[4437] = 4.61140261E+00;
  COFD[4438] = -3.37797240E-01;
  COFD[4439] = 1.27641497E-02;
  COFD[4440] = -1.74843025E+01;
  COFD[4441] = 4.30400174E+00;
  COFD[4442] = -3.50684203E-01;
  COFD[4443] = 1.54945855E-02;
  COFD[4444] = -1.76783701E+01;
  COFD[4445] = 4.43481404E+00;
  COFD[4446] = -3.66974600E-01;
  COFD[4447] = 1.61738468E-02;
  COFD[4448] = -1.77023910E+01;
  COFD[4449] = 4.43481404E+00;
  COFD[4450] = -3.66974600E-01;
  COFD[4451] = 1.61738468E-02;
  COFD[4452] = -1.89262859E+01;
  COFD[4453] = 4.29479621E+00;
  COFD[4454] = -2.85486379E-01;
  COFD[4455] = 1.00409266E-02;
  COFD[4456] = -1.78703020E+01;
  COFD[4457] = 4.30400174E+00;
  COFD[4458] = -3.50684203E-01;
  COFD[4459] = 1.54945855E-02;
  COFD[4460] = -1.88339628E+01;
  COFD[4461] = 4.66400853E+00;
  COFD[4462] = -3.95055598E-01;
  COFD[4463] = 1.73237987E-02;
  COFD[4464] = -2.03840920E+01;
  COFD[4465] = 5.08513780E+00;
  COFD[4466] = -4.33850386E-01;
  COFD[4467] = 1.83458657E-02;
  COFD[4468] = -2.06430588E+01;
  COFD[4469] = 5.11178824E+00;
  COFD[4470] = -4.32455482E-01;
  COFD[4471] = 1.80855222E-02;
  COFD[4472] = -1.92508490E+01;
  COFD[4473] = 4.80720615E+00;
  COFD[4474] = -4.10713865E-01;
  COFD[4475] = 1.78796989E-02;
  COFD[4476] = -1.80127001E+01;
  COFD[4477] = 4.36277453E+00;
  COFD[4478] = -3.58054094E-01;
  COFD[4479] = 1.58040675E-02;
  COFD[4480] = -1.89214468E+01;
  COFD[4481] = 4.11057738E+00;
  COFD[4482] = -2.56191293E-01;
  COFD[4483] = 8.55141399E-03;
  COFD[4484] = -1.89327109E+01;
  COFD[4485] = 4.11057738E+00;
  COFD[4486] = -2.56191293E-01;
  COFD[4487] = 8.55141399E-03;
  COFD[4488] = -1.96670123E+01;
  COFD[4489] = 5.00794480E+00;
  COFD[4490] = -4.32110444E-01;
  COFD[4491] = 1.86147351E-02;
  COFD[4492] = -2.06373509E+01;
  COFD[4493] = 5.11178824E+00;
  COFD[4494] = -4.32455482E-01;
  COFD[4495] = 1.80855222E-02;
  COFD[4496] = -2.06373509E+01;
  COFD[4497] = 5.11178824E+00;
  COFD[4498] = -4.32455482E-01;
  COFD[4499] = 1.80855222E-02;
  COFD[4500] = -2.06373509E+01;
  COFD[4501] = 5.11178824E+00;
  COFD[4502] = -4.32455482E-01;
  COFD[4503] = 1.80855222E-02;
  COFD[4504] = -2.06313220E+01;
  COFD[4505] = 5.11178824E+00;
  COFD[4506] = -4.32455482E-01;
  COFD[4507] = 1.80855222E-02;
  COFD[4508] = -1.88132574E+01;
  COFD[4509] = 4.66400853E+00;
  COFD[4510] = -3.95055598E-01;
  COFD[4511] = 1.73237987E-02;
  COFD[4512] = -1.97152658E+01;
  COFD[4513] = 4.95251652E+00;
  COFD[4514] = -4.27034429E-01;
  COFD[4515] = 1.84828789E-02;
  COFD[4516] = -2.09427456E+01;
  COFD[4517] = 5.07258549E+00;
  COFD[4518] = -4.21992675E-01;
  COFD[4519] = 1.74105511E-02;
  COFD[4520] = -2.09485542E+01;
  COFD[4521] = 5.07258549E+00;
  COFD[4522] = -4.21992675E-01;
  COFD[4523] = 1.74105511E-02;
  COFD[4524] = -2.00590090E+01;
  COFD[4525] = 4.61140261E+00;
  COFD[4526] = -3.37797240E-01;
  COFD[4527] = 1.27641497E-02;
  COFD[4528] = -2.00648264E+01;
  COFD[4529] = 4.61140261E+00;
  COFD[4530] = -3.37797240E-01;
  COFD[4531] = 1.27641497E-02;
  COFD[4532] = -1.99913057E+01;
  COFD[4533] = 4.82534538E+00;
  COFD[4534] = -3.73517197E-01;
  COFD[4535] = 1.46399786E-02;
  COFD[4536] = -1.77943146E+01;
  COFD[4537] = 4.43481404E+00;
  COFD[4538] = -3.66974600E-01;
  COFD[4539] = 1.61738468E-02;
  COFD[4540] = -1.94867888E+01;
  COFD[4541] = 4.88661347E+00;
  COFD[4542] = -4.19964754E-01;
  COFD[4543] = 1.82374570E-02;
  COFD[4544] = -2.07038185E+01;
  COFD[4545] = 5.06720119E+00;
  COFD[4546] = -4.19613343E-01;
  COFD[4547] = 1.72393547E-02;
  COFD[4548] = -2.08122792E+01;
  COFD[4549] = 5.06720119E+00;
  COFD[4550] = -4.19613343E-01;
  COFD[4551] = 1.72393547E-02;
  COFD[4552] = -2.08749215E+01;
  COFD[4553] = 5.06720119E+00;
  COFD[4554] = -4.19613343E-01;
  COFD[4555] = 1.72393547E-02;
  COFD[4556] = -2.01894131E+01;
  COFD[4557] = 4.94118733E+00;
  COFD[4558] = -4.25952466E-01;
  COFD[4559] = 1.84520868E-02;
  COFD[4560] = -2.06952859E+01;
  COFD[4561] = 5.06720119E+00;
  COFD[4562] = -4.19613343E-01;
  COFD[4563] = 1.72393547E-02;
  COFD[4564] = -2.08077721E+01;
  COFD[4565] = 5.06720119E+00;
  COFD[4566] = -4.19613343E-01;
  COFD[4567] = 1.72393547E-02;
  COFD[4568] = -1.97902280E+01;
  COFD[4569] = 4.85273793E+00;
  COFD[4570] = -4.16243506E-01;
  COFD[4571] = 1.81043327E-02;
  COFD[4572] = -2.06863728E+01;
  COFD[4573] = 5.06720119E+00;
  COFD[4574] = -4.19613343E-01;
  COFD[4575] = 1.72393547E-02;
  COFD[4576] = -1.93031424E+01;
  COFD[4577] = 4.74078021E+00;
  COFD[4578] = -4.03369181E-01;
  COFD[4579] = 1.76148003E-02;
  COFD[4580] = -1.87545018E+01;
  COFD[4581] = 4.63262266E+00;
  COFD[4582] = -3.91444989E-01;
  COFD[4583] = 1.71866836E-02;
  COFD[4584] = -2.08893055E+01;
  COFD[4585] = 4.89386904E+00;
  COFD[4586] = -3.86430696E-01;
  COFD[4587] = 1.53623202E-02;
  COFD[4588] = -2.08424774E+01;
  COFD[4589] = 4.89386904E+00;
  COFD[4590] = -3.86430696E-01;
  COFD[4591] = 1.53623202E-02;
  COFD[4592] = -2.07726495E+01;
  COFD[4593] = 4.89386904E+00;
  COFD[4594] = -3.86430696E-01;
  COFD[4595] = 1.53623202E-02;
  COFD[4596] = -1.68523123E+01;
  COFD[4597] = 2.94944152E+00;
  COFD[4598] = -7.58402678E-02;
  COFD[4599] = -4.56762874E-04;
  COFD[4600] = -2.09427456E+01;
  COFD[4601] = 5.07258549E+00;
  COFD[4602] = -4.21992675E-01;
  COFD[4603] = 1.74105511E-02;
  COFD[4604] = -2.09427456E+01;
  COFD[4605] = 5.07258549E+00;
  COFD[4606] = -4.21992675E-01;
  COFD[4607] = 1.74105511E-02;
  COFD[4608] = -1.67234252E+01;
  COFD[4609] = 4.40102685E+00;
  COFD[4610] = -3.62814452E-01;
  COFD[4611] = 1.60024586E-02;
  COFD[4612] = -1.85085428E+01;
  COFD[4613] = 5.03356920E+00;
  COFD[4614] = -4.12704724E-01;
  COFD[4615] = 1.68351048E-02;
  COFD[4616] = -1.94519402E+01;
  COFD[4617] = 5.03423702E+00;
  COFD[4618] = -4.33220473E-01;
  COFD[4619] = 1.85667112E-02;
  COFD[4620] = -2.02589201E+01;
  COFD[4621] = 5.11001220E+00;
  COFD[4622] = -4.34250370E-01;
  COFD[4623] = 1.82469603E-02;
  COFD[4624] = -1.94714173E+01;
  COFD[4625] = 5.03423702E+00;
  COFD[4626] = -4.33220473E-01;
  COFD[4627] = 1.85667112E-02;
  COFD[4628] = -1.37599164E+01;
  COFD[4629] = 1.85741853E+00;
  COFD[4630] = 8.87088202E-02;
  COFD[4631] = -8.48170138E-03;
  COFD[4632] = -2.02662354E+01;
  COFD[4633] = 5.11001220E+00;
  COFD[4634] = -4.34250370E-01;
  COFD[4635] = 1.82469603E-02;
  COFD[4636] = -2.02732162E+01;
  COFD[4637] = 5.11001220E+00;
  COFD[4638] = -4.34250370E-01;
  COFD[4639] = 1.82469603E-02;
  COFD[4640] = -1.93457878E+01;
  COFD[4641] = 4.99359610E+00;
  COFD[4642] = -4.30936629E-01;
  COFD[4643] = 1.85925060E-02;
  COFD[4644] = -1.93831270E+01;
  COFD[4645] = 5.03423702E+00;
  COFD[4646] = -4.33220473E-01;
  COFD[4647] = 1.85667112E-02;
  COFD[4648] = -2.01943150E+01;
  COFD[4649] = 5.04008979E+00;
  COFD[4650] = -4.13907920E-01;
  COFD[4651] = 1.69021003E-02;
  COFD[4652] = -2.01943150E+01;
  COFD[4653] = 5.04008979E+00;
  COFD[4654] = -4.13907920E-01;
  COFD[4655] = 1.69021003E-02;
  COFD[4656] = -2.02174397E+01;
  COFD[4657] = 5.04008979E+00;
  COFD[4658] = -4.13907920E-01;
  COFD[4659] = 1.69021003E-02;
  COFD[4660] = -2.02394909E+01;
  COFD[4661] = 5.05374617E+00;
  COFD[4662] = -4.16553643E-01;
  COFD[4663] = 1.70529068E-02;
  COFD[4664] = -2.01506875E+01;
  COFD[4665] = 5.08521726E+00;
  COFD[4666] = -4.33823377E-01;
  COFD[4667] = 1.83431423E-02;
  COFD[4668] = -1.94870849E+01;
  COFD[4669] = 4.40317028E+00;
  COFD[4670] = -3.03047050E-01;
  COFD[4671] = 1.09440098E-02;
  COFD[4672] = -1.51680740E+01;
  COFD[4673] = 2.32647859E+00;
  COFD[4674] = 1.81791852E-02;
  COFD[4675] = -5.05381046E-03;
  COFD[4676] = -1.51765380E+01;
  COFD[4677] = 2.32647859E+00;
  COFD[4678] = 1.81791852E-02;
  COFD[4679] = -5.05381046E-03;
  COFD[4680] = -1.65913368E+01;
  COFD[4681] = 2.98592389E+00;
  COFD[4682] = -8.13907277E-02;
  COFD[4683] = -1.83664817E-04;
  COFD[4684] = -1.65913368E+01;
  COFD[4685] = 2.98592389E+00;
  COFD[4686] = -8.13907277E-02;
  COFD[4687] = -1.83664817E-04;
  COFD[4688] = -1.54667702E+01;
  COFD[4689] = 2.45201410E+00;
  COFD[4690] = -6.63944539E-04;
  COFD[4691] = -4.13683105E-03;
  COFD[4692] = -1.98666367E+01;
  COFD[4693] = 4.64594679E+00;
  COFD[4694] = -3.43588814E-01;
  COFD[4695] = 1.30689265E-02;
  COFD[4696] = -1.98771385E+01;
  COFD[4697] = 4.64594679E+00;
  COFD[4698] = -3.43588814E-01;
  COFD[4699] = 1.30689265E-02;
  COFD[4700] = -1.98870580E+01;
  COFD[4701] = 4.64594679E+00;
  COFD[4702] = -3.43588814E-01;
  COFD[4703] = 1.30689265E-02;
  COFD[4704] = -1.88538153E+01;
  COFD[4705] = 4.09369055E+00;
  COFD[4706] = -2.53505107E-01;
  COFD[4707] = 8.41485584E-03;
  COFD[4708] = -1.94229431E+01;
  COFD[4709] = 4.34137304E+00;
  COFD[4710] = -2.92962347E-01;
  COFD[4711] = 1.04230613E-02;
  COFD[4712] = -1.94313881E+01;
  COFD[4713] = 4.34137304E+00;
  COFD[4714] = -2.92962347E-01;
  COFD[4715] = 1.04230613E-02;
  COFD[4716] = -2.00441543E+01;
  COFD[4717] = 4.99999936E+00;
  COFD[4718] = -4.06600796E-01;
  COFD[4719] = 1.64981582E-02;
  COFD[4720] = -1.64056971E+01;
  COFD[4721] = 2.82727026E+00;
  COFD[4722] = -5.72773227E-02;
  COFD[4723] = -1.36944552E-03;
  COFD[4724] = -1.64056971E+01;
  COFD[4725] = 2.82727026E+00;
  COFD[4726] = -5.72773227E-02;
  COFD[4727] = -1.36944552E-03;
  COFD[4728] = -1.93989038E+01;
  COFD[4729] = 4.99359610E+00;
  COFD[4730] = -4.30936629E-01;
  COFD[4731] = 1.85925060E-02;
  COFD[4732] = -1.93994552E+01;
  COFD[4733] = 5.03423702E+00;
  COFD[4734] = -4.33220473E-01;
  COFD[4735] = 1.85667112E-02;
  COFD[4736] = -1.94206260E+01;
  COFD[4737] = 5.03423702E+00;
  COFD[4738] = -4.33220473E-01;
  COFD[4739] = 1.85667112E-02;
  COFD[4740] = -1.50994298E+01;
  COFD[4741] = 2.45843201E+00;
  COFD[4742] = -1.62854672E-03;
  COFD[4743] = -4.08982041E-03;
  COFD[4744] = -1.97536293E+01;
  COFD[4745] = 4.99359610E+00;
  COFD[4746] = -4.30936629E-01;
  COFD[4747] = 1.85925060E-02;
  COFD[4748] = -2.01543668E+01;
  COFD[4749] = 5.08484044E+00;
  COFD[4750] = -4.33972487E-01;
  COFD[4751] = 1.83578464E-02;
  COFD[4752] = -1.99759132E+01;
  COFD[4753] = 4.72029196E+00;
  COFD[4754] = -3.55942338E-01;
  COFD[4755] = 1.37157472E-02;
  COFD[4756] = -1.96473348E+01;
  COFD[4757] = 4.48380817E+00;
  COFD[4758] = -3.16391175E-01;
  COFD[4759] = 1.16391945E-02;
  COFD[4760] = -2.03164307E+01;
  COFD[4761] = 5.10490437E+00;
  COFD[4762] = -4.30604875E-01;
  COFD[4763] = 1.79657483E-02;
  COFD[4764] = -1.98330547E+01;
  COFD[4765] = 5.01850806E+00;
  COFD[4766] = -4.33014322E-01;
  COFD[4767] = 1.86345933E-02;
  COFD[4768] = -1.42266912E+01;
  COFD[4769] = 1.87902060E+00;
  COFD[4770] = 8.54697399E-02;
  COFD[4771] = -8.32450539E-03;
  COFD[4772] = -1.42360875E+01;
  COFD[4773] = 1.87902060E+00;
  COFD[4774] = 8.54697399E-02;
  COFD[4775] = -8.32450539E-03;
  COFD[4776] = -2.00441745E+01;
  COFD[4777] = 4.99999936E+00;
  COFD[4778] = -4.06600796E-01;
  COFD[4779] = 1.64981582E-02;
  COFD[4780] = -1.96427934E+01;
  COFD[4781] = 4.48380817E+00;
  COFD[4782] = -3.16391175E-01;
  COFD[4783] = 1.16391945E-02;
  COFD[4784] = -1.96427934E+01;
  COFD[4785] = 4.48380817E+00;
  COFD[4786] = -3.16391175E-01;
  COFD[4787] = 1.16391945E-02;
  COFD[4788] = -1.96427934E+01;
  COFD[4789] = 4.48380817E+00;
  COFD[4790] = -3.16391175E-01;
  COFD[4791] = 1.16391945E-02;
  COFD[4792] = -1.96379851E+01;
  COFD[4793] = 4.48380817E+00;
  COFD[4794] = -3.16391175E-01;
  COFD[4795] = 1.16391945E-02;
  COFD[4796] = -2.01371861E+01;
  COFD[4797] = 5.08484044E+00;
  COFD[4798] = -4.33972487E-01;
  COFD[4799] = 1.83578464E-02;
  COFD[4800] = -2.03691063E+01;
  COFD[4801] = 5.06786046E+00;
  COFD[4802] = -4.19841386E-01;
  COFD[4803] = 1.72550125E-02;
  COFD[4804] = -1.94323607E+01;
  COFD[4805] = 4.21347895E+00;
  COFD[4806] = -2.72570973E-01;
  COFD[4807] = 9.38467228E-03;
  COFD[4808] = -1.94369815E+01;
  COFD[4809] = 4.21347895E+00;
  COFD[4810] = -2.72570973E-01;
  COFD[4811] = 9.38467228E-03;
  COFD[4812] = -1.64105018E+01;
  COFD[4813] = 2.82727026E+00;
  COFD[4814] = -5.72773227E-02;
  COFD[4815] = -1.36944552E-03;
  COFD[4816] = -1.64151300E+01;
  COFD[4817] = 2.82727026E+00;
  COFD[4818] = -5.72773227E-02;
  COFD[4819] = -1.36944552E-03;
  COFD[4820] = -1.77110015E+01;
  COFD[4821] = 3.67654975E+00;
  COFD[4822] = -1.88021568E-01;
  COFD[4823] = 5.11758426E-03;
  COFD[4824] = -1.95056033E+01;
  COFD[4825] = 5.03423702E+00;
  COFD[4826] = -4.33220473E-01;
  COFD[4827] = 1.85667112E-02;
  COFD[4828] = -2.02982488E+01;
  COFD[4829] = 5.07419772E+00;
  COFD[4830] = -4.23574930E-01;
  COFD[4831] = 1.75350406E-02;
  COFD[4832] = -1.92548585E+01;
  COFD[4833] = 4.25726916E+00;
  COFD[4834] = -2.79522202E-01;
  COFD[4835] = 9.73775709E-03;
  COFD[4836] = -1.93415305E+01;
  COFD[4837] = 4.25726916E+00;
  COFD[4838] = -2.79522202E-01;
  COFD[4839] = 9.73775709E-03;
  COFD[4840] = -1.93897889E+01;
  COFD[4841] = 4.25726916E+00;
  COFD[4842] = -2.79522202E-01;
  COFD[4843] = 9.73775709E-03;
  COFD[4844] = -2.08424415E+01;
  COFD[4845] = 5.07028665E+00;
  COFD[4846] = -4.20817850E-01;
  COFD[4847] = 1.73240802E-02;
  COFD[4848] = -1.92478838E+01;
  COFD[4849] = 4.25726916E+00;
  COFD[4850] = -2.79522202E-01;
  COFD[4851] = 9.73775709E-03;
  COFD[4852] = -1.93380056E+01;
  COFD[4853] = 4.25726916E+00;
  COFD[4854] = -2.79522202E-01;
  COFD[4855] = 9.73775709E-03;
  COFD[4856] = -2.06845153E+01;
  COFD[4857] = 5.08862941E+00;
  COFD[4858] = -4.26981365E-01;
  COFD[4859] = 1.77459960E-02;
  COFD[4860] = -1.92405751E+01;
  COFD[4861] = 4.25726916E+00;
  COFD[4862] = -2.79522202E-01;
  COFD[4863] = 9.73775709E-03;
  COFD[4864] = -2.05013224E+01;
  COFD[4865] = 5.11082654E+00;
  COFD[4866] = -4.34171448E-01;
  COFD[4867] = 1.82358965E-02;
  COFD[4868] = -2.01269463E+01;
  COFD[4869] = 5.07973786E+00;
  COFD[4870] = -4.34449751E-01;
  COFD[4871] = 1.84260559E-02;
  COFD[4872] = -1.81562005E+01;
  COFD[4873] = 3.51490671E+00;
  COFD[4874] = -1.62780195E-01;
  COFD[4875] = 3.85244135E-03;
  COFD[4876] = -1.81208552E+01;
  COFD[4877] = 3.51490671E+00;
  COFD[4878] = -1.62780195E-01;
  COFD[4879] = 3.85244135E-03;
  COFD[4880] = -1.80666906E+01;
  COFD[4881] = 3.51490671E+00;
  COFD[4882] = -1.62780195E-01;
  COFD[4883] = 3.85244135E-03;
  COFD[4884] = -1.07434925E+01;
  COFD[4885] = 1.62322565E-01;
  COFD[4886] = 3.37928978E-01;
  COFD[4887] = -2.03841743E-02;
  COFD[4888] = -1.94323607E+01;
  COFD[4889] = 4.21347895E+00;
  COFD[4890] = -2.72570973E-01;
  COFD[4891] = 9.38467228E-03;
  COFD[4892] = -1.94323607E+01;
  COFD[4893] = 4.21347895E+00;
  COFD[4894] = -2.72570973E-01;
  COFD[4895] = 9.38467228E-03;
  COFD[4896] = -1.67245167E+01;
  COFD[4897] = 4.40102685E+00;
  COFD[4898] = -3.62814452E-01;
  COFD[4899] = 1.60024586E-02;
  COFD[4900] = -1.85091066E+01;
  COFD[4901] = 5.03356920E+00;
  COFD[4902] = -4.12704724E-01;
  COFD[4903] = 1.68351048E-02;
  COFD[4904] = -1.94579416E+01;
  COFD[4905] = 5.03423702E+00;
  COFD[4906] = -4.33220473E-01;
  COFD[4907] = 1.85667112E-02;
  COFD[4908] = -2.02678011E+01;
  COFD[4909] = 5.11001220E+00;
  COFD[4910] = -4.34250370E-01;
  COFD[4911] = 1.82469603E-02;
  COFD[4912] = -1.94776586E+01;
  COFD[4913] = 5.03423702E+00;
  COFD[4914] = -4.33220473E-01;
  COFD[4915] = 1.85667112E-02;
  COFD[4916] = -1.37663874E+01;
  COFD[4917] = 1.85741853E+00;
  COFD[4918] = 8.87088202E-02;
  COFD[4919] = -8.48170138E-03;
  COFD[4920] = -2.02752485E+01;
  COFD[4921] = 5.11001220E+00;
  COFD[4922] = -4.34250370E-01;
  COFD[4923] = 1.82469603E-02;
  COFD[4924] = -2.02823572E+01;
  COFD[4925] = 5.11001220E+00;
  COFD[4926] = -4.34250370E-01;
  COFD[4927] = 1.82469603E-02;
  COFD[4928] = -1.93507259E+01;
  COFD[4929] = 4.99359610E+00;
  COFD[4930] = -4.30936629E-01;
  COFD[4931] = 1.85925060E-02;
  COFD[4932] = -1.93883527E+01;
  COFD[4933] = 5.03423702E+00;
  COFD[4934] = -4.33220473E-01;
  COFD[4935] = 1.85667112E-02;
  COFD[4936] = -2.01998150E+01;
  COFD[4937] = 5.04008979E+00;
  COFD[4938] = -4.13907920E-01;
  COFD[4939] = 1.69021003E-02;
  COFD[4940] = -2.01998150E+01;
  COFD[4941] = 5.04008979E+00;
  COFD[4942] = -4.13907920E-01;
  COFD[4943] = 1.69021003E-02;
  COFD[4944] = -2.02232015E+01;
  COFD[4945] = 5.04008979E+00;
  COFD[4946] = -4.13907920E-01;
  COFD[4947] = 1.69021003E-02;
  COFD[4948] = -2.02455030E+01;
  COFD[4949] = 5.05374617E+00;
  COFD[4950] = -4.16553643E-01;
  COFD[4951] = 1.70529068E-02;
  COFD[4952] = -2.01590006E+01;
  COFD[4953] = 5.08521726E+00;
  COFD[4954] = -4.33823377E-01;
  COFD[4955] = 1.83431423E-02;
  COFD[4956] = -1.94973043E+01;
  COFD[4957] = 4.40317028E+00;
  COFD[4958] = -3.03047050E-01;
  COFD[4959] = 1.09440098E-02;
  COFD[4960] = -1.51765380E+01;
  COFD[4961] = 2.32647859E+00;
  COFD[4962] = 1.81791852E-02;
  COFD[4963] = -5.05381046E-03;
  COFD[4964] = -1.51851477E+01;
  COFD[4965] = 2.32647859E+00;
  COFD[4966] = 1.81791852E-02;
  COFD[4967] = -5.05381046E-03;
  COFD[4968] = -1.66000874E+01;
  COFD[4969] = 2.98592389E+00;
  COFD[4970] = -8.13907277E-02;
  COFD[4971] = -1.83664817E-04;
  COFD[4972] = -1.66000874E+01;
  COFD[4973] = 2.98592389E+00;
  COFD[4974] = -8.13907277E-02;
  COFD[4975] = -1.83664817E-04;
  COFD[4976] = -1.54756571E+01;
  COFD[4977] = 2.45201410E+00;
  COFD[4978] = -6.63944539E-04;
  COFD[4979] = -4.13683105E-03;
  COFD[4980] = -1.98744712E+01;
  COFD[4981] = 4.64594679E+00;
  COFD[4982] = -3.43588814E-01;
  COFD[4983] = 1.30689265E-02;
  COFD[4984] = -1.98851406E+01;
  COFD[4985] = 4.64594679E+00;
  COFD[4986] = -3.43588814E-01;
  COFD[4987] = 1.30689265E-02;
  COFD[4988] = -1.98952218E+01;
  COFD[4989] = 4.64594679E+00;
  COFD[4990] = -3.43588814E-01;
  COFD[4991] = 1.30689265E-02;
  COFD[4992] = -1.88621351E+01;
  COFD[4993] = 4.09369055E+00;
  COFD[4994] = -2.53505107E-01;
  COFD[4995] = 8.41485584E-03;
  COFD[4996] = -1.94314135E+01;
  COFD[4997] = 4.34137304E+00;
  COFD[4998] = -2.92962347E-01;
  COFD[4999] = 1.04230613E-02;
  COFD[5000] = -1.94400040E+01;
  COFD[5001] = 4.34137304E+00;
  COFD[5002] = -2.92962347E-01;
  COFD[5003] = 1.04230613E-02;
  COFD[5004] = -2.00540841E+01;
  COFD[5005] = 4.99999936E+00;
  COFD[5006] = -4.06600796E-01;
  COFD[5007] = 1.64981582E-02;
  COFD[5008] = -1.64157275E+01;
  COFD[5009] = 2.82727026E+00;
  COFD[5010] = -5.72773227E-02;
  COFD[5011] = -1.36944552E-03;
  COFD[5012] = -1.64157275E+01;
  COFD[5013] = 2.82727026E+00;
  COFD[5014] = -5.72773227E-02;
  COFD[5015] = -1.36944552E-03;
  COFD[5016] = -1.94043985E+01;
  COFD[5017] = 4.99359610E+00;
  COFD[5018] = -4.30936629E-01;
  COFD[5019] = 1.85925060E-02;
  COFD[5020] = -1.94052119E+01;
  COFD[5021] = 5.03423702E+00;
  COFD[5022] = -4.33220473E-01;
  COFD[5023] = 1.85667112E-02;
  COFD[5024] = -1.94266332E+01;
  COFD[5025] = 5.03423702E+00;
  COFD[5026] = -4.33220473E-01;
  COFD[5027] = 1.85667112E-02;
  COFD[5028] = -1.51056766E+01;
  COFD[5029] = 2.45843201E+00;
  COFD[5030] = -1.62854672E-03;
  COFD[5031] = -4.08982041E-03;
  COFD[5032] = -1.97620939E+01;
  COFD[5033] = 4.99359610E+00;
  COFD[5034] = -4.30936629E-01;
  COFD[5035] = 1.85925060E-02;
  COFD[5036] = -2.01629737E+01;
  COFD[5037] = 5.08484044E+00;
  COFD[5038] = -4.33972487E-01;
  COFD[5039] = 1.83578464E-02;
  COFD[5040] = -1.99863137E+01;
  COFD[5041] = 4.72029196E+00;
  COFD[5042] = -3.55942338E-01;
  COFD[5043] = 1.37157472E-02;
  COFD[5044] = -1.96575545E+01;
  COFD[5045] = 4.48380817E+00;
  COFD[5046] = -3.16391175E-01;
  COFD[5047] = 1.16391945E-02;
  COFD[5048] = -2.03251786E+01;
  COFD[5049] = 5.10490437E+00;
  COFD[5050] = -4.30604875E-01;
  COFD[5051] = 1.79657483E-02;
  COFD[5052] = -1.98410536E+01;
  COFD[5053] = 5.01850806E+00;
  COFD[5054] = -4.33014322E-01;
  COFD[5055] = 1.86345933E-02;
  COFD[5056] = -1.42348519E+01;
  COFD[5057] = 1.87902060E+00;
  COFD[5058] = 8.54697399E-02;
  COFD[5059] = -8.32450539E-03;
  COFD[5060] = -1.42444043E+01;
  COFD[5061] = 1.87902060E+00;
  COFD[5062] = 8.54697399E-02;
  COFD[5063] = -8.32450539E-03;
  COFD[5064] = -2.00541047E+01;
  COFD[5065] = 4.99999936E+00;
  COFD[5066] = -4.06600796E-01;
  COFD[5067] = 1.64981582E-02;
  COFD[5068] = -1.96529197E+01;
  COFD[5069] = 4.48380817E+00;
  COFD[5070] = -3.16391175E-01;
  COFD[5071] = 1.16391945E-02;
  COFD[5072] = -1.96529197E+01;
  COFD[5073] = 4.48380817E+00;
  COFD[5074] = -3.16391175E-01;
  COFD[5075] = 1.16391945E-02;
  COFD[5076] = -1.96529197E+01;
  COFD[5077] = 4.48380817E+00;
  COFD[5078] = -3.16391175E-01;
  COFD[5079] = 1.16391945E-02;
  COFD[5080] = -1.96480135E+01;
  COFD[5081] = 4.48380817E+00;
  COFD[5082] = -3.16391175E-01;
  COFD[5083] = 1.16391945E-02;
  COFD[5084] = -2.01454999E+01;
  COFD[5085] = 5.08484044E+00;
  COFD[5086] = -4.33972487E-01;
  COFD[5087] = 1.83578464E-02;
  COFD[5088] = -2.03789252E+01;
  COFD[5089] = 5.06786046E+00;
  COFD[5090] = -4.19841386E-01;
  COFD[5091] = 1.72550125E-02;
  COFD[5092] = -1.94424932E+01;
  COFD[5093] = 4.21347895E+00;
  COFD[5094] = -2.72570973E-01;
  COFD[5095] = 9.38467228E-03;
  COFD[5096] = -1.94472090E+01;
  COFD[5097] = 4.21347895E+00;
  COFD[5098] = -2.72570973E-01;
  COFD[5099] = 9.38467228E-03;
  COFD[5100] = -1.64206300E+01;
  COFD[5101] = 2.82727026E+00;
  COFD[5102] = -5.72773227E-02;
  COFD[5103] = -1.36944552E-03;
  COFD[5104] = -1.64253534E+01;
  COFD[5105] = 2.82727026E+00;
  COFD[5106] = -5.72773227E-02;
  COFD[5107] = -1.36944552E-03;
  COFD[5108] = -1.77178989E+01;
  COFD[5109] = 3.67654975E+00;
  COFD[5110] = -1.88021568E-01;
  COFD[5111] = 5.11758426E-03;
  COFD[5112] = -1.95122892E+01;
  COFD[5113] = 5.03423702E+00;
  COFD[5114] = -4.33220473E-01;
  COFD[5115] = 1.85667112E-02;
  COFD[5116] = -2.03078578E+01;
  COFD[5117] = 5.07419772E+00;
  COFD[5118] = -4.23574930E-01;
  COFD[5119] = 1.75350406E-02;
  COFD[5120] = -1.92640019E+01;
  COFD[5121] = 4.25726916E+00;
  COFD[5122] = -2.79522202E-01;
  COFD[5123] = 9.73775709E-03;
  COFD[5124] = -1.93524235E+01;
  COFD[5125] = 4.25726916E+00;
  COFD[5126] = -2.79522202E-01;
  COFD[5127] = 9.73775709E-03;
  COFD[5128] = -1.94017991E+01;
  COFD[5129] = 4.25726916E+00;
  COFD[5130] = -2.79522202E-01;
  COFD[5131] = 9.73775709E-03;
  COFD[5132] = -2.08552267E+01;
  COFD[5133] = 5.07028665E+00;
  COFD[5134] = -4.20817850E-01;
  COFD[5135] = 1.73240802E-02;
  COFD[5136] = -1.92568994E+01;
  COFD[5137] = 4.25726916E+00;
  COFD[5138] = -2.79522202E-01;
  COFD[5139] = 9.73775709E-03;
  COFD[5140] = -1.93488212E+01;
  COFD[5141] = 4.25726916E+00;
  COFD[5142] = -2.79522202E-01;
  COFD[5143] = 9.73775709E-03;
  COFD[5144] = -2.06964737E+01;
  COFD[5145] = 5.08862941E+00;
  COFD[5146] = -4.26981365E-01;
  COFD[5147] = 1.77459960E-02;
  COFD[5148] = -1.92494588E+01;
  COFD[5149] = 4.25726916E+00;
  COFD[5150] = -2.79522202E-01;
  COFD[5151] = 9.73775709E-03;
  COFD[5152] = -2.05120588E+01;
  COFD[5153] = 5.11082654E+00;
  COFD[5154] = -4.34171448E-01;
  COFD[5155] = 1.82358965E-02;
  COFD[5156] = -2.01356935E+01;
  COFD[5157] = 5.07973786E+00;
  COFD[5158] = -4.34449751E-01;
  COFD[5159] = 1.84260559E-02;
  COFD[5160] = -1.81688735E+01;
  COFD[5161] = 3.51490671E+00;
  COFD[5162] = -1.62780195E-01;
  COFD[5163] = 3.85244135E-03;
  COFD[5164] = -1.81326529E+01;
  COFD[5165] = 3.51490671E+00;
  COFD[5166] = -1.62780195E-01;
  COFD[5167] = 3.85244135E-03;
  COFD[5168] = -1.80772641E+01;
  COFD[5169] = 3.51490671E+00;
  COFD[5170] = -1.62780195E-01;
  COFD[5171] = 3.85244135E-03;
  COFD[5172] = -1.07539804E+01;
  COFD[5173] = 1.62322565E-01;
  COFD[5174] = 3.37928978E-01;
  COFD[5175] = -2.03841743E-02;
  COFD[5176] = -1.94424932E+01;
  COFD[5177] = 4.21347895E+00;
  COFD[5178] = -2.72570973E-01;
  COFD[5179] = 9.38467228E-03;
  COFD[5180] = -1.94424932E+01;
  COFD[5181] = 4.21347895E+00;
  COFD[5182] = -2.72570973E-01;
  COFD[5183] = 9.38467228E-03;
  COFD[5184] = -1.65270517E+01;
  COFD[5185] = 4.31444462E+00;
  COFD[5186] = -3.51989892E-01;
  COFD[5187] = 1.55492422E-02;
  COFD[5188] = -1.85217126E+01;
  COFD[5189] = 5.08695971E+00;
  COFD[5190] = -4.26619069E-01;
  COFD[5191] = 1.77242432E-02;
  COFD[5192] = -1.91830380E+01;
  COFD[5193] = 4.95351632E+00;
  COFD[5194] = -4.27130446E-01;
  COFD[5195] = 1.84856443E-02;
  COFD[5196] = -2.01704623E+01;
  COFD[5197] = 5.08440340E+00;
  COFD[5198] = -4.34107376E-01;
  COFD[5199] = 1.83716783E-02;
  COFD[5200] = -1.92029847E+01;
  COFD[5201] = 4.95351632E+00;
  COFD[5202] = -4.27130446E-01;
  COFD[5203] = 1.84856443E-02;
  COFD[5204] = -1.37073387E+01;
  COFD[5205] = 1.75960442E+00;
  COFD[5206] = 1.06175392E-01;
  COFD[5207] = -9.31889490E-03;
  COFD[5208] = -2.00702846E+01;
  COFD[5209] = 5.06556230E+00;
  COFD[5210] = -4.33937013E-01;
  COFD[5211] = 1.84587392E-02;
  COFD[5212] = -2.00775172E+01;
  COFD[5213] = 5.06556230E+00;
  COFD[5214] = -4.33937013E-01;
  COFD[5215] = 1.84587392E-02;
  COFD[5216] = -1.89561844E+01;
  COFD[5217] = 4.86036401E+00;
  COFD[5218] = -4.17087154E-01;
  COFD[5219] = 1.81348258E-02;
  COFD[5220] = -1.91127078E+01;
  COFD[5221] = 4.95351632E+00;
  COFD[5222] = -4.27130446E-01;
  COFD[5223] = 1.84856443E-02;
  COFD[5224] = -2.02020654E+01;
  COFD[5225] = 5.09035673E+00;
  COFD[5226] = -4.27354668E-01;
  COFD[5227] = 1.77683778E-02;
  COFD[5228] = -2.02020654E+01;
  COFD[5229] = 5.09035673E+00;
  COFD[5230] = -4.27354668E-01;
  COFD[5231] = 1.77683778E-02;
  COFD[5232] = -2.02257022E+01;
  COFD[5233] = 5.09035673E+00;
  COFD[5234] = -4.27354668E-01;
  COFD[5235] = 1.77683778E-02;
  COFD[5236] = -2.02543134E+01;
  COFD[5237] = 5.07342592E+00;
  COFD[5238] = -4.22625796E-01;
  COFD[5239] = 1.74592755E-02;
  COFD[5240] = -2.00769711E+01;
  COFD[5241] = 5.06331270E+00;
  COFD[5242] = -4.33896102E-01;
  COFD[5243] = 1.84673566E-02;
  COFD[5244] = -1.98464807E+01;
  COFD[5245] = 4.57988549E+00;
  COFD[5246] = -3.32527373E-01;
  COFD[5247] = 1.24873706E-02;
  COFD[5248] = -1.65913368E+01;
  COFD[5249] = 2.98592389E+00;
  COFD[5250] = -8.13907277E-02;
  COFD[5251] = -1.83664817E-04;
  COFD[5252] = -1.66000874E+01;
  COFD[5253] = 2.98592389E+00;
  COFD[5254] = -8.13907277E-02;
  COFD[5255] = -1.83664817E-04;
  COFD[5256] = -1.66013446E+01;
  COFD[5257] = 2.98964612E+00;
  COFD[5258] = -8.42029669E-02;
  COFD[5259] = 6.56844228E-05;
  COFD[5260] = -1.66013446E+01;
  COFD[5261] = 2.98964612E+00;
  COFD[5262] = -8.42029669E-02;
  COFD[5263] = 6.56844228E-05;
  COFD[5264] = -1.68496540E+01;
  COFD[5265] = 3.09463975E+00;
  COFD[5266] = -9.79740878E-02;
  COFD[5267] = 6.33241840E-04;
  COFD[5268] = -2.03010806E+01;
  COFD[5269] = 4.88474828E+00;
  COFD[5270] = -3.84460684E-01;
  COFD[5271] = 1.52453965E-02;
  COFD[5272] = -2.03119117E+01;
  COFD[5273] = 4.88474828E+00;
  COFD[5274] = -3.84460684E-01;
  COFD[5275] = 1.52453965E-02;
  COFD[5276] = -2.03221489E+01;
  COFD[5277] = 4.88474828E+00;
  COFD[5278] = -3.84460684E-01;
  COFD[5279] = 1.52453965E-02;
  COFD[5280] = -1.95950957E+01;
  COFD[5281] = 4.46587761E+00;
  COFD[5282] = -3.13397591E-01;
  COFD[5283] = 1.14824922E-02;
  COFD[5284] = -1.99695533E+01;
  COFD[5285] = 4.62896744E+00;
  COFD[5286] = -3.40740605E-01;
  COFD[5287] = 1.29189928E-02;
  COFD[5288] = -1.99782846E+01;
  COFD[5289] = 4.62896744E+00;
  COFD[5290] = -3.40740605E-01;
  COFD[5291] = 1.29189928E-02;
  COFD[5292] = -2.01187353E+01;
  COFD[5293] = 5.07420737E+00;
  COFD[5294] = -4.23603424E-01;
  COFD[5295] = 1.75373879E-02;
  COFD[5296] = -1.76193985E+01;
  COFD[5297] = 3.39841561E+00;
  COFD[5298] = -1.44735575E-01;
  COFD[5299] = 2.95315491E-03;
  COFD[5300] = -1.76193985E+01;
  COFD[5301] = 3.39841561E+00;
  COFD[5302] = -1.44735575E-01;
  COFD[5303] = 2.95315491E-03;
  COFD[5304] = -1.90103880E+01;
  COFD[5305] = 4.86036401E+00;
  COFD[5306] = -4.17087154E-01;
  COFD[5307] = 1.81348258E-02;
  COFD[5308] = -1.91305719E+01;
  COFD[5309] = 4.95351632E+00;
  COFD[5310] = -4.27130446E-01;
  COFD[5311] = 1.84856443E-02;
  COFD[5312] = -1.96107259E+01;
  COFD[5313] = 5.05906345E+00;
  COFD[5314] = -4.33860563E-01;
  COFD[5315] = 1.84871938E-02;
  COFD[5316] = -1.52982483E+01;
  COFD[5317] = 2.52976466E+00;
  COFD[5318] = -1.30059815E-02;
  COFD[5319] = -3.45697534E-03;
  COFD[5320] = -1.93689990E+01;
  COFD[5321] = 4.86036401E+00;
  COFD[5322] = -4.17087154E-01;
  COFD[5323] = 1.81348258E-02;
  COFD[5324] = -2.00713331E+01;
  COFD[5325] = 5.06056425E+00;
  COFD[5326] = -4.33879014E-01;
  COFD[5327] = 1.84806969E-02;
  COFD[5328] = -2.02974386E+01;
  COFD[5329] = 4.90587767E+00;
  COFD[5330] = -3.89062938E-01;
  COFD[5331] = 1.55198015E-02;
  COFD[5332] = -2.01897258E+01;
  COFD[5333] = 4.76819070E+00;
  COFD[5334] = -3.63881341E-01;
  COFD[5335] = 1.41310657E-02;
  COFD[5336] = -2.01732368E+01;
  COFD[5337] = 5.08495657E+00;
  COFD[5338] = -4.33921751E-01;
  COFD[5339] = 1.83529076E-02;
  COFD[5340] = -1.94910523E+01;
  COFD[5341] = 4.90474703E+00;
  COFD[5342] = -4.21999139E-01;
  COFD[5343] = 1.83125175E-02;
  COFD[5344] = -1.55599834E+01;
  COFD[5345] = 2.49521408E+00;
  COFD[5346] = -7.15807314E-03;
  COFD[5347] = -3.82026901E-03;
  COFD[5348] = -1.55696866E+01;
  COFD[5349] = 2.49521408E+00;
  COFD[5350] = -7.15807314E-03;
  COFD[5351] = -3.82026901E-03;
  COFD[5352] = -2.01187563E+01;
  COFD[5353] = 5.07420737E+00;
  COFD[5354] = -4.23603424E-01;
  COFD[5355] = 1.75373879E-02;
  COFD[5356] = -2.01850003E+01;
  COFD[5357] = 4.76819070E+00;
  COFD[5358] = -3.63881341E-01;
  COFD[5359] = 1.41310657E-02;
  COFD[5360] = -2.01850003E+01;
  COFD[5361] = 4.76819070E+00;
  COFD[5362] = -3.63881341E-01;
  COFD[5363] = 1.41310657E-02;
  COFD[5364] = -2.01850003E+01;
  COFD[5365] = 4.76819070E+00;
  COFD[5366] = -3.63881341E-01;
  COFD[5367] = 1.41310657E-02;
  COFD[5368] = -2.01799989E+01;
  COFD[5369] = 4.76819070E+00;
  COFD[5370] = -3.63881341E-01;
  COFD[5371] = 1.41310657E-02;
  COFD[5372] = -2.00535759E+01;
  COFD[5373] = 5.06056425E+00;
  COFD[5374] = -4.33879014E-01;
  COFD[5375] = 1.84806969E-02;
  COFD[5376] = -2.03723418E+01;
  COFD[5377] = 5.11098109E+00;
  COFD[5378] = -4.32207391E-01;
  COFD[5379] = 1.80688526E-02;
  COFD[5380] = -2.00632191E+01;
  COFD[5381] = 4.53701285E+00;
  COFD[5382] = -3.25443481E-01;
  COFD[5383] = 1.21180475E-02;
  COFD[5384] = -2.00680274E+01;
  COFD[5385] = 4.53701285E+00;
  COFD[5386] = -3.25443481E-01;
  COFD[5387] = 1.21180475E-02;
  COFD[5388] = -1.76243962E+01;
  COFD[5389] = 3.39841561E+00;
  COFD[5390] = -1.44735575E-01;
  COFD[5391] = 2.95315491E-03;
  COFD[5392] = -1.76292122E+01;
  COFD[5393] = 3.39841561E+00;
  COFD[5394] = -1.44735575E-01;
  COFD[5395] = 2.95315491E-03;
  COFD[5396] = -1.68737799E+01;
  COFD[5397] = 3.20044542E+00;
  COFD[5398] = -1.11229236E-01;
  COFD[5399] = 1.24801392E-03;
  COFD[5400] = -1.92380416E+01;
  COFD[5401] = 4.95351632E+00;
  COFD[5402] = -4.27130446E-01;
  COFD[5403] = 1.84856443E-02;
  COFD[5404] = -2.03588989E+01;
  COFD[5405] = 5.11146893E+00;
  COFD[5406] = -4.32357483E-01;
  COFD[5407] = 1.80789399E-02;
  COFD[5408] = -1.86821521E+01;
  COFD[5409] = 3.97908192E+00;
  COFD[5410] = -2.38620931E-01;
  COFD[5411] = 7.78870409E-03;
  COFD[5412] = -1.87722750E+01;
  COFD[5413] = 3.97908192E+00;
  COFD[5414] = -2.38620931E-01;
  COFD[5415] = 7.78870409E-03;
  COFD[5416] = -1.88227430E+01;
  COFD[5417] = 3.97908192E+00;
  COFD[5418] = -2.38620931E-01;
  COFD[5419] = 7.78870409E-03;
  COFD[5420] = -2.08451706E+01;
  COFD[5421] = 5.11264503E+00;
  COFD[5422] = -4.33088609E-01;
  COFD[5423] = 1.81344629E-02;
  COFD[5424] = -1.86749259E+01;
  COFD[5425] = 3.97908192E+00;
  COFD[5426] = -2.38620931E-01;
  COFD[5427] = 7.78870409E-03;
  COFD[5428] = -1.87685973E+01;
  COFD[5429] = 3.97908192E+00;
  COFD[5430] = -2.38620931E-01;
  COFD[5431] = 7.78870409E-03;
  COFD[5432] = -2.06018296E+01;
  COFD[5433] = 5.09392239E+00;
  COFD[5434] = -4.33961627E-01;
  COFD[5435] = 1.83083265E-02;
  COFD[5436] = -1.86673574E+01;
  COFD[5437] = 3.97908192E+00;
  COFD[5438] = -2.38620931E-01;
  COFD[5439] = 7.78870409E-03;
  COFD[5440] = -2.03080801E+01;
  COFD[5441] = 5.06708958E+00;
  COFD[5442] = -4.33980537E-01;
  COFD[5443] = 1.84542582E-02;
  COFD[5444] = -1.99284965E+01;
  COFD[5445] = 5.03169684E+00;
  COFD[5446] = -4.33317477E-01;
  COFD[5447] = 1.85888719E-02;
  COFD[5448] = -1.91234778E+01;
  COFD[5449] = 3.98098090E+00;
  COFD[5450] = -2.35727305E-01;
  COFD[5451] = 7.51598398E-03;
  COFD[5452] = -1.90863988E+01;
  COFD[5453] = 3.98098090E+00;
  COFD[5454] = -2.35727305E-01;
  COFD[5455] = 7.51598398E-03;
  COFD[5456] = -1.90298141E+01;
  COFD[5457] = 3.98098090E+00;
  COFD[5458] = -2.35727305E-01;
  COFD[5459] = 7.51598398E-03;
  COFD[5460] = -1.25128469E+01;
  COFD[5461] = 9.51839855E-01;
  COFD[5462] = 2.22674576E-01;
  COFD[5463] = -1.49117394E-02;
  COFD[5464] = -2.00632191E+01;
  COFD[5465] = 4.53701285E+00;
  COFD[5466] = -3.25443481E-01;
  COFD[5467] = 1.21180475E-02;
  COFD[5468] = -2.00632191E+01;
  COFD[5469] = 4.53701285E+00;
  COFD[5470] = -3.25443481E-01;
  COFD[5471] = 1.21180475E-02;
  COFD[5472] = -1.65270517E+01;
  COFD[5473] = 4.31444462E+00;
  COFD[5474] = -3.51989892E-01;
  COFD[5475] = 1.55492422E-02;
  COFD[5476] = -1.85217126E+01;
  COFD[5477] = 5.08695971E+00;
  COFD[5478] = -4.26619069E-01;
  COFD[5479] = 1.77242432E-02;
  COFD[5480] = -1.91830380E+01;
  COFD[5481] = 4.95351632E+00;
  COFD[5482] = -4.27130446E-01;
  COFD[5483] = 1.84856443E-02;
  COFD[5484] = -2.01704623E+01;
  COFD[5485] = 5.08440340E+00;
  COFD[5486] = -4.34107376E-01;
  COFD[5487] = 1.83716783E-02;
  COFD[5488] = -1.92029847E+01;
  COFD[5489] = 4.95351632E+00;
  COFD[5490] = -4.27130446E-01;
  COFD[5491] = 1.84856443E-02;
  COFD[5492] = -1.37073387E+01;
  COFD[5493] = 1.75960442E+00;
  COFD[5494] = 1.06175392E-01;
  COFD[5495] = -9.31889490E-03;
  COFD[5496] = -2.00702846E+01;
  COFD[5497] = 5.06556230E+00;
  COFD[5498] = -4.33937013E-01;
  COFD[5499] = 1.84587392E-02;
  COFD[5500] = -2.00775172E+01;
  COFD[5501] = 5.06556230E+00;
  COFD[5502] = -4.33937013E-01;
  COFD[5503] = 1.84587392E-02;
  COFD[5504] = -1.89561844E+01;
  COFD[5505] = 4.86036401E+00;
  COFD[5506] = -4.17087154E-01;
  COFD[5507] = 1.81348258E-02;
  COFD[5508] = -1.91127078E+01;
  COFD[5509] = 4.95351632E+00;
  COFD[5510] = -4.27130446E-01;
  COFD[5511] = 1.84856443E-02;
  COFD[5512] = -2.02020654E+01;
  COFD[5513] = 5.09035673E+00;
  COFD[5514] = -4.27354668E-01;
  COFD[5515] = 1.77683778E-02;
  COFD[5516] = -2.02020654E+01;
  COFD[5517] = 5.09035673E+00;
  COFD[5518] = -4.27354668E-01;
  COFD[5519] = 1.77683778E-02;
  COFD[5520] = -2.02257022E+01;
  COFD[5521] = 5.09035673E+00;
  COFD[5522] = -4.27354668E-01;
  COFD[5523] = 1.77683778E-02;
  COFD[5524] = -2.02543134E+01;
  COFD[5525] = 5.07342592E+00;
  COFD[5526] = -4.22625796E-01;
  COFD[5527] = 1.74592755E-02;
  COFD[5528] = -2.00769711E+01;
  COFD[5529] = 5.06331270E+00;
  COFD[5530] = -4.33896102E-01;
  COFD[5531] = 1.84673566E-02;
  COFD[5532] = -1.98464807E+01;
  COFD[5533] = 4.57988549E+00;
  COFD[5534] = -3.32527373E-01;
  COFD[5535] = 1.24873706E-02;
  COFD[5536] = -1.65913368E+01;
  COFD[5537] = 2.98592389E+00;
  COFD[5538] = -8.13907277E-02;
  COFD[5539] = -1.83664817E-04;
  COFD[5540] = -1.66000874E+01;
  COFD[5541] = 2.98592389E+00;
  COFD[5542] = -8.13907277E-02;
  COFD[5543] = -1.83664817E-04;
  COFD[5544] = -1.66013446E+01;
  COFD[5545] = 2.98964612E+00;
  COFD[5546] = -8.42029669E-02;
  COFD[5547] = 6.56844228E-05;
  COFD[5548] = -1.66013446E+01;
  COFD[5549] = 2.98964612E+00;
  COFD[5550] = -8.42029669E-02;
  COFD[5551] = 6.56844228E-05;
  COFD[5552] = -1.68496540E+01;
  COFD[5553] = 3.09463975E+00;
  COFD[5554] = -9.79740878E-02;
  COFD[5555] = 6.33241840E-04;
  COFD[5556] = -2.03010806E+01;
  COFD[5557] = 4.88474828E+00;
  COFD[5558] = -3.84460684E-01;
  COFD[5559] = 1.52453965E-02;
  COFD[5560] = -2.03119117E+01;
  COFD[5561] = 4.88474828E+00;
  COFD[5562] = -3.84460684E-01;
  COFD[5563] = 1.52453965E-02;
  COFD[5564] = -2.03221489E+01;
  COFD[5565] = 4.88474828E+00;
  COFD[5566] = -3.84460684E-01;
  COFD[5567] = 1.52453965E-02;
  COFD[5568] = -1.95950957E+01;
  COFD[5569] = 4.46587761E+00;
  COFD[5570] = -3.13397591E-01;
  COFD[5571] = 1.14824922E-02;
  COFD[5572] = -1.99695533E+01;
  COFD[5573] = 4.62896744E+00;
  COFD[5574] = -3.40740605E-01;
  COFD[5575] = 1.29189928E-02;
  COFD[5576] = -1.99782846E+01;
  COFD[5577] = 4.62896744E+00;
  COFD[5578] = -3.40740605E-01;
  COFD[5579] = 1.29189928E-02;
  COFD[5580] = -2.01187353E+01;
  COFD[5581] = 5.07420737E+00;
  COFD[5582] = -4.23603424E-01;
  COFD[5583] = 1.75373879E-02;
  COFD[5584] = -1.76193985E+01;
  COFD[5585] = 3.39841561E+00;
  COFD[5586] = -1.44735575E-01;
  COFD[5587] = 2.95315491E-03;
  COFD[5588] = -1.76193985E+01;
  COFD[5589] = 3.39841561E+00;
  COFD[5590] = -1.44735575E-01;
  COFD[5591] = 2.95315491E-03;
  COFD[5592] = -1.90103880E+01;
  COFD[5593] = 4.86036401E+00;
  COFD[5594] = -4.17087154E-01;
  COFD[5595] = 1.81348258E-02;
  COFD[5596] = -1.91305719E+01;
  COFD[5597] = 4.95351632E+00;
  COFD[5598] = -4.27130446E-01;
  COFD[5599] = 1.84856443E-02;
  COFD[5600] = -1.96107259E+01;
  COFD[5601] = 5.05906345E+00;
  COFD[5602] = -4.33860563E-01;
  COFD[5603] = 1.84871938E-02;
  COFD[5604] = -1.52982483E+01;
  COFD[5605] = 2.52976466E+00;
  COFD[5606] = -1.30059815E-02;
  COFD[5607] = -3.45697534E-03;
  COFD[5608] = -1.93689990E+01;
  COFD[5609] = 4.86036401E+00;
  COFD[5610] = -4.17087154E-01;
  COFD[5611] = 1.81348258E-02;
  COFD[5612] = -2.00713331E+01;
  COFD[5613] = 5.06056425E+00;
  COFD[5614] = -4.33879014E-01;
  COFD[5615] = 1.84806969E-02;
  COFD[5616] = -2.02974386E+01;
  COFD[5617] = 4.90587767E+00;
  COFD[5618] = -3.89062938E-01;
  COFD[5619] = 1.55198015E-02;
  COFD[5620] = -2.01897258E+01;
  COFD[5621] = 4.76819070E+00;
  COFD[5622] = -3.63881341E-01;
  COFD[5623] = 1.41310657E-02;
  COFD[5624] = -2.01732368E+01;
  COFD[5625] = 5.08495657E+00;
  COFD[5626] = -4.33921751E-01;
  COFD[5627] = 1.83529076E-02;
  COFD[5628] = -1.94910523E+01;
  COFD[5629] = 4.90474703E+00;
  COFD[5630] = -4.21999139E-01;
  COFD[5631] = 1.83125175E-02;
  COFD[5632] = -1.55599834E+01;
  COFD[5633] = 2.49521408E+00;
  COFD[5634] = -7.15807314E-03;
  COFD[5635] = -3.82026901E-03;
  COFD[5636] = -1.55696866E+01;
  COFD[5637] = 2.49521408E+00;
  COFD[5638] = -7.15807314E-03;
  COFD[5639] = -3.82026901E-03;
  COFD[5640] = -2.01187563E+01;
  COFD[5641] = 5.07420737E+00;
  COFD[5642] = -4.23603424E-01;
  COFD[5643] = 1.75373879E-02;
  COFD[5644] = -2.01850003E+01;
  COFD[5645] = 4.76819070E+00;
  COFD[5646] = -3.63881341E-01;
  COFD[5647] = 1.41310657E-02;
  COFD[5648] = -2.01850003E+01;
  COFD[5649] = 4.76819070E+00;
  COFD[5650] = -3.63881341E-01;
  COFD[5651] = 1.41310657E-02;
  COFD[5652] = -2.01850003E+01;
  COFD[5653] = 4.76819070E+00;
  COFD[5654] = -3.63881341E-01;
  COFD[5655] = 1.41310657E-02;
  COFD[5656] = -2.01799989E+01;
  COFD[5657] = 4.76819070E+00;
  COFD[5658] = -3.63881341E-01;
  COFD[5659] = 1.41310657E-02;
  COFD[5660] = -2.00535759E+01;
  COFD[5661] = 5.06056425E+00;
  COFD[5662] = -4.33879014E-01;
  COFD[5663] = 1.84806969E-02;
  COFD[5664] = -2.03723418E+01;
  COFD[5665] = 5.11098109E+00;
  COFD[5666] = -4.32207391E-01;
  COFD[5667] = 1.80688526E-02;
  COFD[5668] = -2.00632191E+01;
  COFD[5669] = 4.53701285E+00;
  COFD[5670] = -3.25443481E-01;
  COFD[5671] = 1.21180475E-02;
  COFD[5672] = -2.00680274E+01;
  COFD[5673] = 4.53701285E+00;
  COFD[5674] = -3.25443481E-01;
  COFD[5675] = 1.21180475E-02;
  COFD[5676] = -1.76243962E+01;
  COFD[5677] = 3.39841561E+00;
  COFD[5678] = -1.44735575E-01;
  COFD[5679] = 2.95315491E-03;
  COFD[5680] = -1.76292122E+01;
  COFD[5681] = 3.39841561E+00;
  COFD[5682] = -1.44735575E-01;
  COFD[5683] = 2.95315491E-03;
  COFD[5684] = -1.68737799E+01;
  COFD[5685] = 3.20044542E+00;
  COFD[5686] = -1.11229236E-01;
  COFD[5687] = 1.24801392E-03;
  COFD[5688] = -1.92380416E+01;
  COFD[5689] = 4.95351632E+00;
  COFD[5690] = -4.27130446E-01;
  COFD[5691] = 1.84856443E-02;
  COFD[5692] = -2.03588989E+01;
  COFD[5693] = 5.11146893E+00;
  COFD[5694] = -4.32357483E-01;
  COFD[5695] = 1.80789399E-02;
  COFD[5696] = -1.86821521E+01;
  COFD[5697] = 3.97908192E+00;
  COFD[5698] = -2.38620931E-01;
  COFD[5699] = 7.78870409E-03;
  COFD[5700] = -1.87722750E+01;
  COFD[5701] = 3.97908192E+00;
  COFD[5702] = -2.38620931E-01;
  COFD[5703] = 7.78870409E-03;
  COFD[5704] = -1.88227430E+01;
  COFD[5705] = 3.97908192E+00;
  COFD[5706] = -2.38620931E-01;
  COFD[5707] = 7.78870409E-03;
  COFD[5708] = -2.08451706E+01;
  COFD[5709] = 5.11264503E+00;
  COFD[5710] = -4.33088609E-01;
  COFD[5711] = 1.81344629E-02;
  COFD[5712] = -1.86749259E+01;
  COFD[5713] = 3.97908192E+00;
  COFD[5714] = -2.38620931E-01;
  COFD[5715] = 7.78870409E-03;
  COFD[5716] = -1.87685973E+01;
  COFD[5717] = 3.97908192E+00;
  COFD[5718] = -2.38620931E-01;
  COFD[5719] = 7.78870409E-03;
  COFD[5720] = -2.06018296E+01;
  COFD[5721] = 5.09392239E+00;
  COFD[5722] = -4.33961627E-01;
  COFD[5723] = 1.83083265E-02;
  COFD[5724] = -1.86673574E+01;
  COFD[5725] = 3.97908192E+00;
  COFD[5726] = -2.38620931E-01;
  COFD[5727] = 7.78870409E-03;
  COFD[5728] = -2.03080801E+01;
  COFD[5729] = 5.06708958E+00;
  COFD[5730] = -4.33980537E-01;
  COFD[5731] = 1.84542582E-02;
  COFD[5732] = -1.99284965E+01;
  COFD[5733] = 5.03169684E+00;
  COFD[5734] = -4.33317477E-01;
  COFD[5735] = 1.85888719E-02;
  COFD[5736] = -1.91234778E+01;
  COFD[5737] = 3.98098090E+00;
  COFD[5738] = -2.35727305E-01;
  COFD[5739] = 7.51598398E-03;
  COFD[5740] = -1.90863988E+01;
  COFD[5741] = 3.98098090E+00;
  COFD[5742] = -2.35727305E-01;
  COFD[5743] = 7.51598398E-03;
  COFD[5744] = -1.90298141E+01;
  COFD[5745] = 3.98098090E+00;
  COFD[5746] = -2.35727305E-01;
  COFD[5747] = 7.51598398E-03;
  COFD[5748] = -1.25128469E+01;
  COFD[5749] = 9.51839855E-01;
  COFD[5750] = 2.22674576E-01;
  COFD[5751] = -1.49117394E-02;
  COFD[5752] = -2.00632191E+01;
  COFD[5753] = 4.53701285E+00;
  COFD[5754] = -3.25443481E-01;
  COFD[5755] = 1.21180475E-02;
  COFD[5756] = -2.00632191E+01;
  COFD[5757] = 4.53701285E+00;
  COFD[5758] = -3.25443481E-01;
  COFD[5759] = 1.21180475E-02;
  COFD[5760] = -1.66335234E+01;
  COFD[5761] = 4.36332665E+00;
  COFD[5762] = -3.58123495E-01;
  COFD[5763] = 1.58069905E-02;
  COFD[5764] = -1.85509168E+01;
  COFD[5765] = 5.05822881E+00;
  COFD[5766] = -4.17484527E-01;
  COFD[5767] = 1.71075813E-02;
  COFD[5768] = -1.94416036E+01;
  COFD[5769] = 5.02805304E+00;
  COFD[5770] = -4.33407830E-01;
  COFD[5771] = 1.86164117E-02;
  COFD[5772] = -2.02503279E+01;
  COFD[5773] = 5.10232072E+00;
  COFD[5774] = -4.34295533E-01;
  COFD[5775] = 1.82918502E-02;
  COFD[5776] = -1.94617705E+01;
  COFD[5777] = 5.02805304E+00;
  COFD[5778] = -4.33407830E-01;
  COFD[5779] = 1.86164117E-02;
  COFD[5780] = -1.40289217E+01;
  COFD[5781] = 1.97148182E+00;
  COFD[5782] = 7.15971330E-02;
  COFD[5783] = -7.65169667E-03;
  COFD[5784] = -2.02580270E+01;
  COFD[5785] = 5.10232072E+00;
  COFD[5786] = -4.34295533E-01;
  COFD[5787] = 1.82918502E-02;
  COFD[5788] = -2.02653798E+01;
  COFD[5789] = 5.10232072E+00;
  COFD[5790] = -4.34295533E-01;
  COFD[5791] = 1.82918502E-02;
  COFD[5792] = -1.93033109E+01;
  COFD[5793] = 4.97472819E+00;
  COFD[5794] = -4.29256126E-01;
  COFD[5795] = 1.85517927E-02;
  COFD[5796] = -1.93705643E+01;
  COFD[5797] = 5.02805304E+00;
  COFD[5798] = -4.33407830E-01;
  COFD[5799] = 1.86164117E-02;
  COFD[5800] = -2.02415575E+01;
  COFD[5801] = 5.06196480E+00;
  COFD[5802] = -4.18274084E-01;
  COFD[5803] = 1.71543392E-02;
  COFD[5804] = -2.02415575E+01;
  COFD[5805] = 5.06196480E+00;
  COFD[5806] = -4.18274084E-01;
  COFD[5807] = 1.71543392E-02;
  COFD[5808] = -2.02654337E+01;
  COFD[5809] = 5.06196480E+00;
  COFD[5810] = -4.18274084E-01;
  COFD[5811] = 1.71543392E-02;
  COFD[5812] = -2.02703134E+01;
  COFD[5813] = 5.06749927E+00;
  COFD[5814] = -4.19714627E-01;
  COFD[5815] = 1.72462818E-02;
  COFD[5816] = -2.01502132E+01;
  COFD[5817] = 5.08183109E+00;
  COFD[5818] = -4.34492289E-01;
  COFD[5819] = 1.84183589E-02;
  COFD[5820] = -1.96268931E+01;
  COFD[5821] = 4.45966189E+00;
  COFD[5822] = -3.12362605E-01;
  COFD[5823] = 1.14283963E-02;
  COFD[5824] = -1.54667702E+01;
  COFD[5825] = 2.45201410E+00;
  COFD[5826] = -6.63944539E-04;
  COFD[5827] = -4.13683105E-03;
  COFD[5828] = -1.54756571E+01;
  COFD[5829] = 2.45201410E+00;
  COFD[5830] = -6.63944539E-04;
  COFD[5831] = -4.13683105E-03;
  COFD[5832] = -1.68496540E+01;
  COFD[5833] = 3.09463975E+00;
  COFD[5834] = -9.79740878E-02;
  COFD[5835] = 6.33241840E-04;
  COFD[5836] = -1.68496540E+01;
  COFD[5837] = 3.09463975E+00;
  COFD[5838] = -9.79740878E-02;
  COFD[5839] = 6.33241840E-04;
  COFD[5840] = -1.57711189E+01;
  COFD[5841] = 2.57990442E+00;
  COFD[5842] = -1.99040151E-02;
  COFD[5843] = -3.19830083E-03;
  COFD[5844] = -1.99960353E+01;
  COFD[5845] = 4.70135783E+00;
  COFD[5846] = -3.52803825E-01;
  COFD[5847] = 1.35516301E-02;
  COFD[5848] = -2.00070223E+01;
  COFD[5849] = 4.70135783E+00;
  COFD[5850] = -3.52803825E-01;
  COFD[5851] = 1.35516301E-02;
  COFD[5852] = -2.00174101E+01;
  COFD[5853] = 4.70135783E+00;
  COFD[5854] = -3.52803825E-01;
  COFD[5855] = 1.35516301E-02;
  COFD[5856] = -1.90340106E+01;
  COFD[5857] = 4.17047479E+00;
  COFD[5858] = -2.65745255E-01;
  COFD[5859] = 9.03811854E-03;
  COFD[5860] = -1.95676273E+01;
  COFD[5861] = 4.40247945E+00;
  COFD[5862] = -3.02933962E-01;
  COFD[5863] = 1.09381540E-02;
  COFD[5864] = -1.95764946E+01;
  COFD[5865] = 4.40247945E+00;
  COFD[5866] = -3.02933962E-01;
  COFD[5867] = 1.09381540E-02;
  COFD[5868] = -2.01309041E+01;
  COFD[5869] = 5.03282199E+00;
  COFD[5870] = -4.12565985E-01;
  COFD[5871] = 1.68273619E-02;
  COFD[5872] = -1.66894290E+01;
  COFD[5873] = 2.94567828E+00;
  COFD[5874] = -7.52679679E-02;
  COFD[5875] = -4.84912570E-04;
  COFD[5876] = -1.66894290E+01;
  COFD[5877] = 2.94567828E+00;
  COFD[5878] = -7.52679679E-02;
  COFD[5879] = -4.84912570E-04;
  COFD[5880] = -1.93580217E+01;
  COFD[5881] = 4.97472819E+00;
  COFD[5882] = -4.29256126E-01;
  COFD[5883] = 1.85517927E-02;
  COFD[5884] = -1.93885967E+01;
  COFD[5885] = 5.02805304E+00;
  COFD[5886] = -4.33407830E-01;
  COFD[5887] = 1.86164117E-02;
  COFD[5888] = -1.94104872E+01;
  COFD[5889] = 5.02805304E+00;
  COFD[5890] = -4.33407830E-01;
  COFD[5891] = 1.86164117E-02;
  COFD[5892] = -1.53969807E+01;
  COFD[5893] = 2.58623410E+00;
  COFD[5894] = -2.08585298E-02;
  COFD[5895] = -3.15164418E-03;
  COFD[5896] = -1.97206107E+01;
  COFD[5897] = 4.97472819E+00;
  COFD[5898] = -4.29256126E-01;
  COFD[5899] = 1.85517927E-02;
  COFD[5900] = -2.01522895E+01;
  COFD[5901] = 5.08034582E+00;
  COFD[5902] = -4.34480301E-01;
  COFD[5903] = 1.84253742E-02;
  COFD[5904] = -2.01189481E+01;
  COFD[5905] = 4.77819065E+00;
  COFD[5906] = -3.65539208E-01;
  COFD[5907] = 1.42178206E-02;
  COFD[5908] = -1.97598789E+01;
  COFD[5909] = 4.52829025E+00;
  COFD[5910] = -3.23954783E-01;
  COFD[5911] = 1.20390717E-02;
  COFD[5912] = -2.03420688E+01;
  COFD[5913] = 5.11240438E+00;
  COFD[5914] = -4.32838751E-01;
  COFD[5915] = 1.81146314E-02;
  COFD[5916] = -1.98035220E+01;
  COFD[5917] = 5.00163073E+00;
  COFD[5918] = -4.31596051E-01;
  COFD[5919] = 1.86051404E-02;
  COFD[5920] = -1.44948574E+01;
  COFD[5921] = 1.99127206E+00;
  COFD[5922] = 6.86233935E-02;
  COFD[5923] = -7.50734012E-03;
  COFD[5924] = -1.45047062E+01;
  COFD[5925] = 1.99127206E+00;
  COFD[5926] = 6.86233935E-02;
  COFD[5927] = -7.50734012E-03;
  COFD[5928] = -2.01309255E+01;
  COFD[5929] = 5.03282199E+00;
  COFD[5930] = -4.12565985E-01;
  COFD[5931] = 1.68273619E-02;
  COFD[5932] = -1.97550649E+01;
  COFD[5933] = 4.52829025E+00;
  COFD[5934] = -3.23954783E-01;
  COFD[5935] = 1.20390717E-02;
  COFD[5936] = -1.97550649E+01;
  COFD[5937] = 4.52829025E+00;
  COFD[5938] = -3.23954783E-01;
  COFD[5939] = 1.20390717E-02;
  COFD[5940] = -1.97550649E+01;
  COFD[5941] = 4.52829025E+00;
  COFD[5942] = -3.23954783E-01;
  COFD[5943] = 1.20390717E-02;
  COFD[5944] = -1.97499708E+01;
  COFD[5945] = 4.52829025E+00;
  COFD[5946] = -3.23954783E-01;
  COFD[5947] = 1.20390717E-02;
  COFD[5948] = -2.01342584E+01;
  COFD[5949] = 5.08034582E+00;
  COFD[5950] = -4.34480301E-01;
  COFD[5951] = 1.84253742E-02;
  COFD[5952] = -2.03896061E+01;
  COFD[5953] = 5.07157808E+00;
  COFD[5954] = -4.21499024E-01;
  COFD[5955] = 1.73743839E-02;
  COFD[5956] = -1.96230821E+01;
  COFD[5957] = 4.29296671E+00;
  COFD[5958] = -2.85195578E-01;
  COFD[5959] = 1.00261411E-02;
  COFD[5960] = -1.96279805E+01;
  COFD[5961] = 4.29296671E+00;
  COFD[5962] = -2.85195578E-01;
  COFD[5963] = 1.00261411E-02;
  COFD[5964] = -1.66945192E+01;
  COFD[5965] = 2.94567828E+00;
  COFD[5966] = -7.52679679E-02;
  COFD[5967] = -4.84912570E-04;
  COFD[5968] = -1.66994254E+01;
  COFD[5969] = 2.94567828E+00;
  COFD[5970] = -7.52679679E-02;
  COFD[5971] = -4.84912570E-04;
  COFD[5972] = -1.78898160E+01;
  COFD[5973] = 3.75336800E+00;
  COFD[5974] = -2.00149029E-01;
  COFD[5975] = 5.72931663E-03;
  COFD[5976] = -1.94972366E+01;
  COFD[5977] = 5.02805304E+00;
  COFD[5978] = -4.33407830E-01;
  COFD[5979] = 1.86164117E-02;
  COFD[5980] = -2.03370471E+01;
  COFD[5981] = 5.08623841E+00;
  COFD[5982] = -4.26458889E-01;
  COFD[5983] = 1.77145456E-02;
  COFD[5984] = -1.94334728E+01;
  COFD[5985] = 4.33226128E+00;
  COFD[5986] = -2.91490888E-01;
  COFD[5987] = 1.03476070E-02;
  COFD[5988] = -1.95252506E+01;
  COFD[5989] = 4.33226128E+00;
  COFD[5990] = -2.91490888E-01;
  COFD[5991] = 1.03476070E-02;
  COFD[5992] = -1.95767871E+01;
  COFD[5993] = 4.33226128E+00;
  COFD[5994] = -2.91490888E-01;
  COFD[5995] = 1.03476070E-02;
  COFD[5996] = -2.08679570E+01;
  COFD[5997] = 5.07312943E+00;
  COFD[5998] = -4.22354342E-01;
  COFD[5999] = 1.74380570E-02;
  COFD[6000] = -1.94261265E+01;
  COFD[6001] = 4.33226128E+00;
  COFD[6002] = -2.91490888E-01;
  COFD[6003] = 1.03476070E-02;
  COFD[6004] = -1.95214992E+01;
  COFD[6005] = 4.33226128E+00;
  COFD[6006] = -2.91490888E-01;
  COFD[6007] = 1.03476070E-02;
  COFD[6008] = -2.07354142E+01;
  COFD[6009] = 5.10365737E+00;
  COFD[6010] = -4.30315586E-01;
  COFD[6011] = 1.79479253E-02;
  COFD[6012] = -1.94184342E+01;
  COFD[6013] = 4.33226128E+00;
  COFD[6014] = -2.91490888E-01;
  COFD[6015] = 1.03476070E-02;
  COFD[6016] = -2.04991144E+01;
  COFD[6017] = 5.10387649E+00;
  COFD[6018] = -4.34325524E-01;
  COFD[6019] = 1.82860871E-02;
  COFD[6020] = -2.01125302E+01;
  COFD[6021] = 5.06928576E+00;
  COFD[6022] = -4.34051547E-01;
  COFD[6023] = 1.84485225E-02;
  COFD[6024] = -1.83865927E+01;
  COFD[6025] = 3.60796077E+00;
  COFD[6026] = -1.77255678E-01;
  COFD[6027] = 4.57625098E-03;
  COFD[6028] = -1.83486713E+01;
  COFD[6029] = 3.60796077E+00;
  COFD[6030] = -1.77255678E-01;
  COFD[6031] = 4.57625098E-03;
  COFD[6032] = -1.82909182E+01;
  COFD[6033] = 3.60796077E+00;
  COFD[6034] = -1.77255678E-01;
  COFD[6035] = 4.57625098E-03;
  COFD[6036] = -1.10855285E+01;
  COFD[6037] = 3.00814435E-01;
  COFD[6038] = 3.17787607E-01;
  COFD[6039] = -1.94326662E-02;
  COFD[6040] = -1.96230821E+01;
  COFD[6041] = 4.29296671E+00;
  COFD[6042] = -2.85195578E-01;
  COFD[6043] = 1.00261411E-02;
  COFD[6044] = -1.96230821E+01;
  COFD[6045] = 4.29296671E+00;
  COFD[6046] = -2.85195578E-01;
  COFD[6047] = 1.00261411E-02;
  COFD[6048] = -1.43464169E+01;
  COFD[6049] = 3.47172936E+00;
  COFD[6050] = -2.45275610E-01;
  COFD[6051] = 1.10343782E-02;
  COFD[6052] = -1.76534938E+01;
  COFD[6053] = 4.87590216E+00;
  COFD[6054] = -4.18786740E-01;
  COFD[6055] = 1.81952526E-02;
  COFD[6056] = -1.72410983E+01;
  COFD[6057] = 4.25245988E+00;
  COFD[6058] = -3.44189784E-01;
  COFD[6059] = 1.52207255E-02;
  COFD[6060] = -1.86028801E+01;
  COFD[6061] = 4.61053888E+00;
  COFD[6062] = -3.88890034E-01;
  COFD[6063] = 1.70889977E-02;
  COFD[6064] = -1.72595121E+01;
  COFD[6065] = 4.25245988E+00;
  COFD[6066] = -3.44189784E-01;
  COFD[6067] = 1.52207255E-02;
  COFD[6068] = -1.90976908E+01;
  COFD[6069] = 4.43153137E+00;
  COFD[6070] = -3.07695523E-01;
  COFD[6071] = 1.11849607E-02;
  COFD[6072] = -1.86096275E+01;
  COFD[6073] = 4.61053888E+00;
  COFD[6074] = -3.88890034E-01;
  COFD[6075] = 1.70889977E-02;
  COFD[6076] = -1.86160592E+01;
  COFD[6077] = 4.61053888E+00;
  COFD[6078] = -3.88890034E-01;
  COFD[6079] = 1.70889977E-02;
  COFD[6080] = -1.69681980E+01;
  COFD[6081] = 4.13189883E+00;
  COFD[6082] = -3.29291449E-01;
  COFD[6083] = 1.46059118E-02;
  COFD[6084] = -1.71757422E+01;
  COFD[6085] = 4.25245988E+00;
  COFD[6086] = -3.44189784E-01;
  COFD[6087] = 1.52207255E-02;
  COFD[6088] = -1.92494929E+01;
  COFD[6089] = 4.86988873E+00;
  COFD[6090] = -4.18132322E-01;
  COFD[6091] = 1.81721691E-02;
  COFD[6092] = -1.92494929E+01;
  COFD[6093] = 4.86988873E+00;
  COFD[6094] = -4.18132322E-01;
  COFD[6095] = 1.81721691E-02;
  COFD[6096] = -1.92714508E+01;
  COFD[6097] = 4.86988873E+00;
  COFD[6098] = -4.18132322E-01;
  COFD[6099] = 1.81721691E-02;
  COFD[6100] = -1.92278630E+01;
  COFD[6101] = 4.85361962E+00;
  COFD[6102] = -4.16341235E-01;
  COFD[6103] = 1.81078746E-02;
  COFD[6104] = -1.82994978E+01;
  COFD[6105] = 4.49255955E+00;
  COFD[6106] = -3.74152053E-01;
  COFD[6107] = 1.64725703E-02;
  COFD[6108] = -2.04349783E+01;
  COFD[6109] = 5.09769252E+00;
  COFD[6110] = -4.34136290E-01;
  COFD[6111] = 1.83030477E-02;
  COFD[6112] = -1.98666367E+01;
  COFD[6113] = 4.64594679E+00;
  COFD[6114] = -3.43588814E-01;
  COFD[6115] = 1.30689265E-02;
  COFD[6116] = -1.98744712E+01;
  COFD[6117] = 4.64594679E+00;
  COFD[6118] = -3.43588814E-01;
  COFD[6119] = 1.30689265E-02;
  COFD[6120] = -2.03010806E+01;
  COFD[6121] = 4.88474828E+00;
  COFD[6122] = -3.84460684E-01;
  COFD[6123] = 1.52453965E-02;
  COFD[6124] = -2.03010806E+01;
  COFD[6125] = 4.88474828E+00;
  COFD[6126] = -3.84460684E-01;
  COFD[6127] = 1.52453965E-02;
  COFD[6128] = -1.99960353E+01;
  COFD[6129] = 4.70135783E+00;
  COFD[6130] = -3.52803825E-01;
  COFD[6131] = 1.35516301E-02;
  COFD[6132] = -2.01897328E+01;
  COFD[6133] = 5.05947920E+00;
  COFD[6134] = -4.33865243E-01;
  COFD[6135] = 1.84853572E-02;
  COFD[6136] = -2.01995059E+01;
  COFD[6137] = 5.05947920E+00;
  COFD[6138] = -4.33865243E-01;
  COFD[6139] = 1.84853572E-02;
  COFD[6140] = -2.02087239E+01;
  COFD[6141] = 5.05947920E+00;
  COFD[6142] = -4.33865243E-01;
  COFD[6143] = 1.84853572E-02;
  COFD[6144] = -2.05143880E+01;
  COFD[6145] = 5.10104108E+00;
  COFD[6146] = -4.29704501E-01;
  COFD[6147] = 1.79101847E-02;
  COFD[6148] = -2.05306834E+01;
  COFD[6149] = 5.10719085E+00;
  COFD[6150] = -4.34339920E-01;
  COFD[6151] = 1.82696178E-02;
  COFD[6152] = -2.05384999E+01;
  COFD[6153] = 5.10719085E+00;
  COFD[6154] = -4.34339920E-01;
  COFD[6155] = 1.82696178E-02;
  COFD[6156] = -1.92766922E+01;
  COFD[6157] = 4.90691097E+00;
  COFD[6158] = -4.22240144E-01;
  COFD[6159] = 1.83213252E-02;
  COFD[6160] = -2.03939502E+01;
  COFD[6161] = 4.85106931E+00;
  COFD[6162] = -3.78054916E-01;
  COFD[6163] = 1.48855026E-02;
  COFD[6164] = -2.03939502E+01;
  COFD[6165] = 4.85106931E+00;
  COFD[6166] = -3.78054916E-01;
  COFD[6167] = 1.48855026E-02;
  COFD[6168] = -1.70188229E+01;
  COFD[6169] = 4.13189883E+00;
  COFD[6170] = -3.29291449E-01;
  COFD[6171] = 1.46059118E-02;
  COFD[6172] = -1.71920854E+01;
  COFD[6173] = 4.25245988E+00;
  COFD[6174] = -3.44189784E-01;
  COFD[6175] = 1.52207255E-02;
  COFD[6176] = -1.72121431E+01;
  COFD[6177] = 4.25245988E+00;
  COFD[6178] = -3.44189784E-01;
  COFD[6179] = 1.52207255E-02;
  COFD[6180] = -1.96460783E+01;
  COFD[6181] = 4.70423150E+00;
  COFD[6182] = -3.53280130E-01;
  COFD[6183] = 1.35765353E-02;
  COFD[6184] = -1.73511528E+01;
  COFD[6185] = 4.13189883E+00;
  COFD[6186] = -3.29291449E-01;
  COFD[6187] = 1.46059118E-02;
  COFD[6188] = -1.82860795E+01;
  COFD[6189] = 4.48448153E+00;
  COFD[6190] = -3.73130862E-01;
  COFD[6191] = 1.64293065E-02;
  COFD[6192] = -2.01109502E+01;
  COFD[6193] = 5.04929922E+00;
  COFD[6194] = -4.33827582E-01;
  COFD[6195] = 1.85370179E-02;
  COFD[6196] = -2.03832180E+01;
  COFD[6197] = 5.08484349E+00;
  COFD[6198] = -4.33971732E-01;
  COFD[6199] = 1.83577657E-02;
  COFD[6200] = -1.88221298E+01;
  COFD[6201] = 4.68334372E+00;
  COFD[6202] = -3.97199777E-01;
  COFD[6203] = 1.74014858E-02;
  COFD[6204] = -1.74604055E+01;
  COFD[6205] = 4.17397785E+00;
  COFD[6206] = -3.34331805E-01;
  COFD[6207] = 1.48066506E-02;
  COFD[6208] = -1.95071393E+01;
  COFD[6209] = 4.44126512E+00;
  COFD[6210] = -3.09307355E-01;
  COFD[6211] = 1.12689434E-02;
  COFD[6212] = -1.95158593E+01;
  COFD[6213] = 4.44126512E+00;
  COFD[6214] = -3.09307355E-01;
  COFD[6215] = 1.12689434E-02;
  COFD[6216] = -1.92767107E+01;
  COFD[6217] = 4.90691097E+00;
  COFD[6218] = -4.22240144E-01;
  COFD[6219] = 1.83213252E-02;
  COFD[6220] = -2.03790727E+01;
  COFD[6221] = 5.08484349E+00;
  COFD[6222] = -4.33971732E-01;
  COFD[6223] = 1.83577657E-02;
  COFD[6224] = -2.03790727E+01;
  COFD[6225] = 5.08484349E+00;
  COFD[6226] = -4.33971732E-01;
  COFD[6227] = 1.83577657E-02;
  COFD[6228] = -2.03790727E+01;
  COFD[6229] = 5.08484349E+00;
  COFD[6230] = -4.33971732E-01;
  COFD[6231] = 1.83577657E-02;
  COFD[6232] = -2.03746804E+01;
  COFD[6233] = 5.08484349E+00;
  COFD[6234] = -4.33971732E-01;
  COFD[6235] = 1.83577657E-02;
  COFD[6236] = -1.82701659E+01;
  COFD[6237] = 4.48448153E+00;
  COFD[6238] = -3.73130862E-01;
  COFD[6239] = 1.64293065E-02;
  COFD[6240] = -1.92218475E+01;
  COFD[6241] = 4.80973969E+00;
  COFD[6242] = -4.11026097E-01;
  COFD[6243] = 1.78925949E-02;
  COFD[6244] = -2.08256710E+01;
  COFD[6245] = 5.11267190E+00;
  COFD[6246] = -4.33165102E-01;
  COFD[6247] = 1.81407852E-02;
  COFD[6248] = -2.08298884E+01;
  COFD[6249] = 5.11267190E+00;
  COFD[6250] = -4.33165102E-01;
  COFD[6251] = 1.81407852E-02;
  COFD[6252] = -2.03983392E+01;
  COFD[6253] = 4.85106931E+00;
  COFD[6254] = -3.78054916E-01;
  COFD[6255] = 1.48855026E-02;
  COFD[6256] = -2.04025636E+01;
  COFD[6257] = 4.85106931E+00;
  COFD[6258] = -3.78054916E-01;
  COFD[6259] = 1.48855026E-02;
  COFD[6260] = -2.02595886E+01;
  COFD[6261] = 5.06465152E+00;
  COFD[6262] = -4.18875119E-01;
  COFD[6263] = 1.71907534E-02;
  COFD[6264] = -1.72917347E+01;
  COFD[6265] = 4.25245988E+00;
  COFD[6266] = -3.44189784E-01;
  COFD[6267] = 1.52207255E-02;
  COFD[6268] = -1.89872893E+01;
  COFD[6269] = 4.73871569E+00;
  COFD[6270] = -4.03159932E-01;
  COFD[6271] = 1.76082216E-02;
  COFD[6272] = -2.05634489E+01;
  COFD[6273] = 5.11167016E+00;
  COFD[6274] = -4.33651168E-01;
  COFD[6275] = 1.81871961E-02;
  COFD[6276] = -2.06426822E+01;
  COFD[6277] = 5.11167016E+00;
  COFD[6278] = -4.33651168E-01;
  COFD[6279] = 1.81871961E-02;
  COFD[6280] = -2.06862615E+01;
  COFD[6281] = 5.11167016E+00;
  COFD[6282] = -4.33651168E-01;
  COFD[6283] = 1.81871961E-02;
  COFD[6284] = -1.96010028E+01;
  COFD[6285] = 4.78505233E+00;
  COFD[6286] = -4.07992165E-01;
  COFD[6287] = 1.77677163E-02;
  COFD[6288] = -2.05570231E+01;
  COFD[6289] = 5.11167016E+00;
  COFD[6290] = -4.33651168E-01;
  COFD[6291] = 1.81871961E-02;
  COFD[6292] = -2.06394833E+01;
  COFD[6293] = 5.11167016E+00;
  COFD[6294] = -4.33651168E-01;
  COFD[6295] = 1.81871961E-02;
  COFD[6296] = -1.92521675E+01;
  COFD[6297] = 4.70932434E+00;
  COFD[6298] = -3.99972299E-01;
  COFD[6299] = 1.74964368E-02;
  COFD[6300] = -2.05502820E+01;
  COFD[6301] = 5.11167016E+00;
  COFD[6302] = -4.33651168E-01;
  COFD[6303] = 1.81871961E-02;
  COFD[6304] = -1.88376184E+01;
  COFD[6305] = 4.61599035E+00;
  COFD[6306] = -3.89528317E-01;
  COFD[6307] = 1.71137649E-02;
  COFD[6308] = -1.81853254E+01;
  COFD[6309] = 4.44398741E+00;
  COFD[6310] = -3.68098793E-01;
  COFD[6311] = 1.62199280E-02;
  COFD[6312] = -2.09205070E+01;
  COFD[6313] = 5.02022822E+00;
  COFD[6314] = -4.10246613E-01;
  COFD[6315] = 1.66984803E-02;
  COFD[6316] = -2.08887979E+01;
  COFD[6317] = 5.02022822E+00;
  COFD[6318] = -4.10246613E-01;
  COFD[6319] = 1.66984803E-02;
  COFD[6320] = -2.08397748E+01;
  COFD[6321] = 5.02022822E+00;
  COFD[6322] = -4.10246613E-01;
  COFD[6323] = 1.66984803E-02;
  COFD[6324] = -1.77528393E+01;
  COFD[6325] = 3.43134598E+00;
  COFD[6326] = -1.49825485E-01;
  COFD[6327] = 3.20636012E-03;
  COFD[6328] = -2.08256710E+01;
  COFD[6329] = 5.11267190E+00;
  COFD[6330] = -4.33165102E-01;
  COFD[6331] = 1.81407852E-02;
  COFD[6332] = -2.08256710E+01;
  COFD[6333] = 5.11267190E+00;
  COFD[6334] = -4.33165102E-01;
  COFD[6335] = 1.81407852E-02;
  COFD[6336] = -1.43478618E+01;
  COFD[6337] = 3.47172936E+00;
  COFD[6338] = -2.45275610E-01;
  COFD[6339] = 1.10343782E-02;
  COFD[6340] = -1.76542437E+01;
  COFD[6341] = 4.87590216E+00;
  COFD[6342] = -4.18786740E-01;
  COFD[6343] = 1.81952526E-02;
  COFD[6344] = -1.72487037E+01;
  COFD[6345] = 4.25245988E+00;
  COFD[6346] = -3.44189784E-01;
  COFD[6347] = 1.52207255E-02;
  COFD[6348] = -1.86138605E+01;
  COFD[6349] = 4.61053888E+00;
  COFD[6350] = -3.88890034E-01;
  COFD[6351] = 1.70889977E-02;
  COFD[6352] = -1.72674051E+01;
  COFD[6353] = 4.25245988E+00;
  COFD[6354] = -3.44189784E-01;
  COFD[6355] = 1.52207255E-02;
  COFD[6356] = -1.91058580E+01;
  COFD[6357] = 4.43153137E+00;
  COFD[6358] = -3.07695523E-01;
  COFD[6359] = 1.11849607E-02;
  COFD[6360] = -1.86207588E+01;
  COFD[6361] = 4.61053888E+00;
  COFD[6362] = -3.88890034E-01;
  COFD[6363] = 1.70889977E-02;
  COFD[6364] = -1.86273362E+01;
  COFD[6365] = 4.61053888E+00;
  COFD[6366] = -3.88890034E-01;
  COFD[6367] = 1.70889977E-02;
  COFD[6368] = -1.69745143E+01;
  COFD[6369] = 4.13189883E+00;
  COFD[6370] = -3.29291449E-01;
  COFD[6371] = 1.46059118E-02;
  COFD[6372] = -1.71824095E+01;
  COFD[6373] = 4.25245988E+00;
  COFD[6374] = -3.44189784E-01;
  COFD[6375] = 1.52207255E-02;
  COFD[6376] = -1.92564934E+01;
  COFD[6377] = 4.86988873E+00;
  COFD[6378] = -4.18132322E-01;
  COFD[6379] = 1.81721691E-02;
  COFD[6380] = -1.92564934E+01;
  COFD[6381] = 4.86988873E+00;
  COFD[6382] = -4.18132322E-01;
  COFD[6383] = 1.81721691E-02;
  COFD[6384] = -1.92787678E+01;
  COFD[6385] = 4.86988873E+00;
  COFD[6386] = -4.18132322E-01;
  COFD[6387] = 1.81721691E-02;
  COFD[6388] = -1.92354813E+01;
  COFD[6389] = 4.85361962E+00;
  COFD[6390] = -4.16341235E-01;
  COFD[6391] = 1.81078746E-02;
  COFD[6392] = -1.83098257E+01;
  COFD[6393] = 4.49255955E+00;
  COFD[6394] = -3.74152053E-01;
  COFD[6395] = 1.64725703E-02;
  COFD[6396] = -2.04474718E+01;
  COFD[6397] = 5.09769252E+00;
  COFD[6398] = -4.34136290E-01;
  COFD[6399] = 1.83030477E-02;
  COFD[6400] = -1.98771385E+01;
  COFD[6401] = 4.64594679E+00;
  COFD[6402] = -3.43588814E-01;
  COFD[6403] = 1.30689265E-02;
  COFD[6404] = -1.98851406E+01;
  COFD[6405] = 4.64594679E+00;
  COFD[6406] = -3.43588814E-01;
  COFD[6407] = 1.30689265E-02;
  COFD[6408] = -2.03119117E+01;
  COFD[6409] = 4.88474828E+00;
  COFD[6410] = -3.84460684E-01;
  COFD[6411] = 1.52453965E-02;
  COFD[6412] = -2.03119117E+01;
  COFD[6413] = 4.88474828E+00;
  COFD[6414] = -3.84460684E-01;
  COFD[6415] = 1.52453965E-02;
  COFD[6416] = -2.00070223E+01;
  COFD[6417] = 4.70135783E+00;
  COFD[6418] = -3.52803825E-01;
  COFD[6419] = 1.35516301E-02;
  COFD[6420] = -2.01995059E+01;
  COFD[6421] = 5.05947920E+00;
  COFD[6422] = -4.33865243E-01;
  COFD[6423] = 1.84853572E-02;
  COFD[6424] = -2.02094738E+01;
  COFD[6425] = 5.05947920E+00;
  COFD[6426] = -4.33865243E-01;
  COFD[6427] = 1.84853572E-02;
  COFD[6428] = -2.02188792E+01;
  COFD[6429] = 5.05947920E+00;
  COFD[6430] = -4.33865243E-01;
  COFD[6431] = 1.84853572E-02;
  COFD[6432] = -2.05247236E+01;
  COFD[6433] = 5.10104108E+00;
  COFD[6434] = -4.29704501E-01;
  COFD[6435] = 1.79101847E-02;
  COFD[6436] = -2.05411926E+01;
  COFD[6437] = 5.10719085E+00;
  COFD[6438] = -4.34339920E-01;
  COFD[6439] = 1.82696178E-02;
  COFD[6440] = -2.05491765E+01;
  COFD[6441] = 5.10719085E+00;
  COFD[6442] = -4.34339920E-01;
  COFD[6443] = 1.82696178E-02;
  COFD[6444] = -1.92888612E+01;
  COFD[6445] = 4.90691097E+00;
  COFD[6446] = -4.22240144E-01;
  COFD[6447] = 1.83213252E-02;
  COFD[6448] = -2.04062322E+01;
  COFD[6449] = 4.85106931E+00;
  COFD[6450] = -3.78054916E-01;
  COFD[6451] = 1.48855026E-02;
  COFD[6452] = -2.04062322E+01;
  COFD[6453] = 4.85106931E+00;
  COFD[6454] = -3.78054916E-01;
  COFD[6455] = 1.48855026E-02;
  COFD[6456] = -1.70258169E+01;
  COFD[6457] = 4.13189883E+00;
  COFD[6458] = -3.29291449E-01;
  COFD[6459] = 1.46059118E-02;
  COFD[6460] = -1.71993963E+01;
  COFD[6461] = 4.25245988E+00;
  COFD[6462] = -3.44189784E-01;
  COFD[6463] = 1.52207255E-02;
  COFD[6464] = -1.72197555E+01;
  COFD[6465] = 4.25245988E+00;
  COFD[6466] = -3.44189784E-01;
  COFD[6467] = 1.52207255E-02;
  COFD[6468] = -1.96539780E+01;
  COFD[6469] = 4.70423150E+00;
  COFD[6470] = -3.53280130E-01;
  COFD[6471] = 1.35765353E-02;
  COFD[6472] = -1.73616553E+01;
  COFD[6473] = 4.13189883E+00;
  COFD[6474] = -3.29291449E-01;
  COFD[6475] = 1.46059118E-02;
  COFD[6476] = -1.82967456E+01;
  COFD[6477] = 4.48448153E+00;
  COFD[6478] = -3.73130862E-01;
  COFD[6479] = 1.64293065E-02;
  COFD[6480] = -2.01236460E+01;
  COFD[6481] = 5.04929922E+00;
  COFD[6482] = -4.33827582E-01;
  COFD[6483] = 1.85370179E-02;
  COFD[6484] = -2.03957119E+01;
  COFD[6485] = 5.08484349E+00;
  COFD[6486] = -4.33971732E-01;
  COFD[6487] = 1.83577657E-02;
  COFD[6488] = -1.88329577E+01;
  COFD[6489] = 4.68334372E+00;
  COFD[6490] = -3.97199777E-01;
  COFD[6491] = 1.74014858E-02;
  COFD[6492] = -1.74703696E+01;
  COFD[6493] = 4.17397785E+00;
  COFD[6494] = -3.34331805E-01;
  COFD[6495] = 1.48066506E-02;
  COFD[6496] = -1.95172909E+01;
  COFD[6497] = 4.44126512E+00;
  COFD[6498] = -3.09307355E-01;
  COFD[6499] = 1.12689434E-02;
  COFD[6500] = -1.95261914E+01;
  COFD[6501] = 4.44126512E+00;
  COFD[6502] = -3.09307355E-01;
  COFD[6503] = 1.12689434E-02;
  COFD[6504] = -1.92888802E+01;
  COFD[6505] = 4.90691097E+00;
  COFD[6506] = -4.22240144E-01;
  COFD[6507] = 1.83213252E-02;
  COFD[6508] = -2.03914622E+01;
  COFD[6509] = 5.08484349E+00;
  COFD[6510] = -4.33971732E-01;
  COFD[6511] = 1.83577657E-02;
  COFD[6512] = -2.03914622E+01;
  COFD[6513] = 5.08484349E+00;
  COFD[6514] = -4.33971732E-01;
  COFD[6515] = 1.83577657E-02;
  COFD[6516] = -2.03914622E+01;
  COFD[6517] = 5.08484349E+00;
  COFD[6518] = -4.33971732E-01;
  COFD[6519] = 1.83577657E-02;
  COFD[6520] = -2.03869602E+01;
  COFD[6521] = 5.08484349E+00;
  COFD[6522] = -4.33971732E-01;
  COFD[6523] = 1.83577657E-02;
  COFD[6524] = -1.82804944E+01;
  COFD[6525] = 4.48448153E+00;
  COFD[6526] = -3.73130862E-01;
  COFD[6527] = 1.64293065E-02;
  COFD[6528] = -1.92338918E+01;
  COFD[6529] = 4.80973969E+00;
  COFD[6530] = -4.11026097E-01;
  COFD[6531] = 1.78925949E-02;
  COFD[6532] = -2.08380673E+01;
  COFD[6533] = 5.11267190E+00;
  COFD[6534] = -4.33165102E-01;
  COFD[6535] = 1.81407852E-02;
  COFD[6536] = -2.08423911E+01;
  COFD[6537] = 5.11267190E+00;
  COFD[6538] = -4.33165102E-01;
  COFD[6539] = 1.81407852E-02;
  COFD[6540] = -2.04107309E+01;
  COFD[6541] = 4.85106931E+00;
  COFD[6542] = -3.78054916E-01;
  COFD[6543] = 1.48855026E-02;
  COFD[6544] = -2.04150617E+01;
  COFD[6545] = 4.85106931E+00;
  COFD[6546] = -3.78054916E-01;
  COFD[6547] = 1.48855026E-02;
  COFD[6548] = -2.02682620E+01;
  COFD[6549] = 5.06465152E+00;
  COFD[6550] = -4.18875119E-01;
  COFD[6551] = 1.71907534E-02;
  COFD[6552] = -1.73001576E+01;
  COFD[6553] = 4.25245988E+00;
  COFD[6554] = -3.44189784E-01;
  COFD[6555] = 1.52207255E-02;
  COFD[6556] = -1.89990969E+01;
  COFD[6557] = 4.73871569E+00;
  COFD[6558] = -4.03159932E-01;
  COFD[6559] = 1.76082216E-02;
  COFD[6560] = -2.05747287E+01;
  COFD[6561] = 5.11167016E+00;
  COFD[6562] = -4.33651168E-01;
  COFD[6563] = 1.81871961E-02;
  COFD[6564] = -2.06559246E+01;
  COFD[6565] = 5.11167016E+00;
  COFD[6566] = -4.33651168E-01;
  COFD[6567] = 1.81871961E-02;
  COFD[6568] = -2.07007275E+01;
  COFD[6569] = 5.11167016E+00;
  COFD[6570] = -4.33651168E-01;
  COFD[6571] = 1.81871961E-02;
  COFD[6572] = -1.96163047E+01;
  COFD[6573] = 4.78505233E+00;
  COFD[6574] = -4.07992165E-01;
  COFD[6575] = 1.77677163E-02;
  COFD[6576] = -2.05681572E+01;
  COFD[6577] = 5.11167016E+00;
  COFD[6578] = -4.33651168E-01;
  COFD[6579] = 1.81871961E-02;
  COFD[6580] = -2.06526402E+01;
  COFD[6581] = 5.11167016E+00;
  COFD[6582] = -4.33651168E-01;
  COFD[6583] = 1.81871961E-02;
  COFD[6584] = -1.92665773E+01;
  COFD[6585] = 4.70932434E+00;
  COFD[6586] = -3.99972299E-01;
  COFD[6587] = 1.74964368E-02;
  COFD[6588] = -2.05612653E+01;
  COFD[6589] = 5.11167016E+00;
  COFD[6590] = -4.33651168E-01;
  COFD[6591] = 1.81871961E-02;
  COFD[6592] = -1.88506875E+01;
  COFD[6593] = 4.61599035E+00;
  COFD[6594] = -3.89528317E-01;
  COFD[6595] = 1.71137649E-02;
  COFD[6596] = -1.81961526E+01;
  COFD[6597] = 4.44398741E+00;
  COFD[6598] = -3.68098793E-01;
  COFD[6599] = 1.62199280E-02;
  COFD[6600] = -2.09356884E+01;
  COFD[6601] = 5.02022822E+00;
  COFD[6602] = -4.10246613E-01;
  COFD[6603] = 1.66984803E-02;
  COFD[6604] = -2.09030330E+01;
  COFD[6605] = 5.02022822E+00;
  COFD[6606] = -4.10246613E-01;
  COFD[6607] = 1.66984803E-02;
  COFD[6608] = -2.08526632E+01;
  COFD[6609] = 5.02022822E+00;
  COFD[6610] = -4.10246613E-01;
  COFD[6611] = 1.66984803E-02;
  COFD[6612] = -1.77656325E+01;
  COFD[6613] = 3.43134598E+00;
  COFD[6614] = -1.49825485E-01;
  COFD[6615] = 3.20636012E-03;
  COFD[6616] = -2.08380673E+01;
  COFD[6617] = 5.11267190E+00;
  COFD[6618] = -4.33165102E-01;
  COFD[6619] = 1.81407852E-02;
  COFD[6620] = -2.08380673E+01;
  COFD[6621] = 5.11267190E+00;
  COFD[6622] = -4.33165102E-01;
  COFD[6623] = 1.81407852E-02;
  COFD[6624] = -1.43492027E+01;
  COFD[6625] = 3.47172936E+00;
  COFD[6626] = -2.45275610E-01;
  COFD[6627] = 1.10343782E-02;
  COFD[6628] = -1.76549387E+01;
  COFD[6629] = 4.87590216E+00;
  COFD[6630] = -4.18786740E-01;
  COFD[6631] = 1.81952526E-02;
  COFD[6632] = -1.72558468E+01;
  COFD[6633] = 4.25245988E+00;
  COFD[6634] = -3.44189784E-01;
  COFD[6635] = 1.52207255E-02;
  COFD[6636] = -1.86242418E+01;
  COFD[6637] = 4.61053888E+00;
  COFD[6638] = -3.88890034E-01;
  COFD[6639] = 1.70889977E-02;
  COFD[6640] = -1.72748225E+01;
  COFD[6641] = 4.25245988E+00;
  COFD[6642] = -3.44189784E-01;
  COFD[6643] = 1.52207255E-02;
  COFD[6644] = -1.91135372E+01;
  COFD[6645] = 4.43153137E+00;
  COFD[6646] = -3.07695523E-01;
  COFD[6647] = 1.11849607E-02;
  COFD[6648] = -1.86312858E+01;
  COFD[6649] = 4.61053888E+00;
  COFD[6650] = -3.88890034E-01;
  COFD[6651] = 1.70889977E-02;
  COFD[6652] = -1.86380042E+01;
  COFD[6653] = 4.61053888E+00;
  COFD[6654] = -3.88890034E-01;
  COFD[6655] = 1.70889977E-02;
  COFD[6656] = -1.69804317E+01;
  COFD[6657] = 4.13189883E+00;
  COFD[6658] = -3.29291449E-01;
  COFD[6659] = 1.46059118E-02;
  COFD[6660] = -1.71886601E+01;
  COFD[6661] = 4.25245988E+00;
  COFD[6662] = -3.44189784E-01;
  COFD[6663] = 1.52207255E-02;
  COFD[6664] = -1.92630605E+01;
  COFD[6665] = 4.86988873E+00;
  COFD[6666] = -4.18132322E-01;
  COFD[6667] = 1.81721691E-02;
  COFD[6668] = -1.92630605E+01;
  COFD[6669] = 4.86988873E+00;
  COFD[6670] = -4.18132322E-01;
  COFD[6671] = 1.81721691E-02;
  COFD[6672] = -1.92856362E+01;
  COFD[6673] = 4.86988873E+00;
  COFD[6674] = -4.18132322E-01;
  COFD[6675] = 1.81721691E-02;
  COFD[6676] = -1.92426366E+01;
  COFD[6677] = 4.85361962E+00;
  COFD[6678] = -4.16341235E-01;
  COFD[6679] = 1.81078746E-02;
  COFD[6680] = -1.83195776E+01;
  COFD[6681] = 4.49255955E+00;
  COFD[6682] = -3.74152053E-01;
  COFD[6683] = 1.64725703E-02;
  COFD[6684] = -2.04593190E+01;
  COFD[6685] = 5.09769252E+00;
  COFD[6686] = -4.34136290E-01;
  COFD[6687] = 1.83030477E-02;
  COFD[6688] = -1.98870580E+01;
  COFD[6689] = 4.64594679E+00;
  COFD[6690] = -3.43588814E-01;
  COFD[6691] = 1.30689265E-02;
  COFD[6692] = -1.98952218E+01;
  COFD[6693] = 4.64594679E+00;
  COFD[6694] = -3.43588814E-01;
  COFD[6695] = 1.30689265E-02;
  COFD[6696] = -2.03221489E+01;
  COFD[6697] = 4.88474828E+00;
  COFD[6698] = -3.84460684E-01;
  COFD[6699] = 1.52453965E-02;
  COFD[6700] = -2.03221489E+01;
  COFD[6701] = 4.88474828E+00;
  COFD[6702] = -3.84460684E-01;
  COFD[6703] = 1.52453965E-02;
  COFD[6704] = -2.00174101E+01;
  COFD[6705] = 4.70135783E+00;
  COFD[6706] = -3.52803825E-01;
  COFD[6707] = 1.35516301E-02;
  COFD[6708] = -2.02087239E+01;
  COFD[6709] = 5.05947920E+00;
  COFD[6710] = -4.33865243E-01;
  COFD[6711] = 1.84853572E-02;
  COFD[6712] = -2.02188792E+01;
  COFD[6713] = 5.05947920E+00;
  COFD[6714] = -4.33865243E-01;
  COFD[6715] = 1.84853572E-02;
  COFD[6716] = -2.02284648E+01;
  COFD[6717] = 5.05947920E+00;
  COFD[6718] = -4.33865243E-01;
  COFD[6719] = 1.84853572E-02;
  COFD[6720] = -2.05344829E+01;
  COFD[6721] = 5.10104108E+00;
  COFD[6722] = -4.29704501E-01;
  COFD[6723] = 1.79101847E-02;
  COFD[6724] = -2.05511193E+01;
  COFD[6725] = 5.10719085E+00;
  COFD[6726] = -4.34339920E-01;
  COFD[6727] = 1.82696178E-02;
  COFD[6728] = -2.05592647E+01;
  COFD[6729] = 5.10719085E+00;
  COFD[6730] = -4.34339920E-01;
  COFD[6731] = 1.82696178E-02;
  COFD[6732] = -1.93003933E+01;
  COFD[6733] = 4.90691097E+00;
  COFD[6734] = -4.22240144E-01;
  COFD[6735] = 1.83213252E-02;
  COFD[6736] = -2.04178740E+01;
  COFD[6737] = 4.85106931E+00;
  COFD[6738] = -3.78054916E-01;
  COFD[6739] = 1.48855026E-02;
  COFD[6740] = -2.04178740E+01;
  COFD[6741] = 4.85106931E+00;
  COFD[6742] = -3.78054916E-01;
  COFD[6743] = 1.48855026E-02;
  COFD[6744] = -1.70323779E+01;
  COFD[6745] = 4.13189883E+00;
  COFD[6746] = -3.29291449E-01;
  COFD[6747] = 1.46059118E-02;
  COFD[6748] = -1.72062588E+01;
  COFD[6749] = 4.25245988E+00;
  COFD[6750] = -3.44189784E-01;
  COFD[6751] = 1.52207255E-02;
  COFD[6752] = -1.72269053E+01;
  COFD[6753] = 4.25245988E+00;
  COFD[6754] = -3.44189784E-01;
  COFD[6755] = 1.52207255E-02;
  COFD[6756] = -1.96614017E+01;
  COFD[6757] = 4.70423150E+00;
  COFD[6758] = -3.53280130E-01;
  COFD[6759] = 1.35765353E-02;
  COFD[6760] = -1.73715755E+01;
  COFD[6761] = 4.13189883E+00;
  COFD[6762] = -3.29291449E-01;
  COFD[6763] = 1.46059118E-02;
  COFD[6764] = -1.83068237E+01;
  COFD[6765] = 4.48448153E+00;
  COFD[6766] = -3.73130862E-01;
  COFD[6767] = 1.64293065E-02;
  COFD[6768] = -2.01356897E+01;
  COFD[6769] = 5.04929922E+00;
  COFD[6770] = -4.33827582E-01;
  COFD[6771] = 1.85370179E-02;
  COFD[6772] = -2.04075594E+01;
  COFD[6773] = 5.08484349E+00;
  COFD[6774] = -4.33971732E-01;
  COFD[6775] = 1.83577657E-02;
  COFD[6776] = -1.88431919E+01;
  COFD[6777] = 4.68334372E+00;
  COFD[6778] = -3.97199777E-01;
  COFD[6779] = 1.74014858E-02;
  COFD[6780] = -1.74797713E+01;
  COFD[6781] = 4.17397785E+00;
  COFD[6782] = -3.34331805E-01;
  COFD[6783] = 1.48066506E-02;
  COFD[6784] = -1.95268731E+01;
  COFD[6785] = 4.44126512E+00;
  COFD[6786] = -3.09307355E-01;
  COFD[6787] = 1.12689434E-02;
  COFD[6788] = -1.95359474E+01;
  COFD[6789] = 4.44126512E+00;
  COFD[6790] = -3.09307355E-01;
  COFD[6791] = 1.12689434E-02;
  COFD[6792] = -1.93004127E+01;
  COFD[6793] = 4.90691097E+00;
  COFD[6794] = -4.22240144E-01;
  COFD[6795] = 1.83213252E-02;
  COFD[6796] = -2.04032083E+01;
  COFD[6797] = 5.08484349E+00;
  COFD[6798] = -4.33971732E-01;
  COFD[6799] = 1.83577657E-02;
  COFD[6800] = -2.04032083E+01;
  COFD[6801] = 5.08484349E+00;
  COFD[6802] = -4.33971732E-01;
  COFD[6803] = 1.83577657E-02;
  COFD[6804] = -2.04032083E+01;
  COFD[6805] = 5.08484349E+00;
  COFD[6806] = -4.33971732E-01;
  COFD[6807] = 1.83577657E-02;
  COFD[6808] = -2.03985998E+01;
  COFD[6809] = 5.08484349E+00;
  COFD[6810] = -4.33971732E-01;
  COFD[6811] = 1.83577657E-02;
  COFD[6812] = -1.82902470E+01;
  COFD[6813] = 4.48448153E+00;
  COFD[6814] = -3.73130862E-01;
  COFD[6815] = 1.64293065E-02;
  COFD[6816] = -1.92453028E+01;
  COFD[6817] = 4.80973969E+00;
  COFD[6818] = -4.11026097E-01;
  COFD[6819] = 1.78925949E-02;
  COFD[6820] = -2.08498201E+01;
  COFD[6821] = 5.11267190E+00;
  COFD[6822] = -4.33165102E-01;
  COFD[6823] = 1.81407852E-02;
  COFD[6824] = -2.08542471E+01;
  COFD[6825] = 5.11267190E+00;
  COFD[6826] = -4.33165102E-01;
  COFD[6827] = 1.81407852E-02;
  COFD[6828] = -2.04224791E+01;
  COFD[6829] = 4.85106931E+00;
  COFD[6830] = -3.78054916E-01;
  COFD[6831] = 1.48855026E-02;
  COFD[6832] = -2.04269133E+01;
  COFD[6833] = 4.85106931E+00;
  COFD[6834] = -3.78054916E-01;
  COFD[6835] = 1.48855026E-02;
  COFD[6836] = -2.02764252E+01;
  COFD[6837] = 5.06465152E+00;
  COFD[6838] = -4.18875119E-01;
  COFD[6839] = 1.71907534E-02;
  COFD[6840] = -1.73080811E+01;
  COFD[6841] = 4.25245988E+00;
  COFD[6842] = -3.44189784E-01;
  COFD[6843] = 1.52207255E-02;
  COFD[6844] = -1.90102786E+01;
  COFD[6845] = 4.73871569E+00;
  COFD[6846] = -4.03159932E-01;
  COFD[6847] = 1.76082216E-02;
  COFD[6848] = -2.05853993E+01;
  COFD[6849] = 5.11167016E+00;
  COFD[6850] = -4.33651168E-01;
  COFD[6851] = 1.81871961E-02;
  COFD[6852] = -2.06685006E+01;
  COFD[6853] = 5.11167016E+00;
  COFD[6854] = -4.33651168E-01;
  COFD[6855] = 1.81871961E-02;
  COFD[6856] = -2.07144988E+01;
  COFD[6857] = 5.11167016E+00;
  COFD[6858] = -4.33651168E-01;
  COFD[6859] = 1.81871961E-02;
  COFD[6860] = -1.96308958E+01;
  COFD[6861] = 4.78505233E+00;
  COFD[6862] = -4.07992165E-01;
  COFD[6863] = 1.77677163E-02;
  COFD[6864] = -2.05786870E+01;
  COFD[6865] = 5.11167016E+00;
  COFD[6866] = -4.33651168E-01;
  COFD[6867] = 1.81871961E-02;
  COFD[6868] = -2.06651327E+01;
  COFD[6869] = 5.11167016E+00;
  COFD[6870] = -4.33651168E-01;
  COFD[6871] = 1.81871961E-02;
  COFD[6872] = -1.92802935E+01;
  COFD[6873] = 4.70932434E+00;
  COFD[6874] = -3.99972299E-01;
  COFD[6875] = 1.74964368E-02;
  COFD[6876] = -2.05716495E+01;
  COFD[6877] = 5.11167016E+00;
  COFD[6878] = -4.33651168E-01;
  COFD[6879] = 1.81871961E-02;
  COFD[6880] = -1.88630945E+01;
  COFD[6881] = 4.61599035E+00;
  COFD[6882] = -3.89528317E-01;
  COFD[6883] = 1.71137649E-02;
  COFD[6884] = -1.82063860E+01;
  COFD[6885] = 4.44398741E+00;
  COFD[6886] = -3.68098793E-01;
  COFD[6887] = 1.62199280E-02;
  COFD[6888] = -2.09501612E+01;
  COFD[6889] = 5.02022822E+00;
  COFD[6890] = -4.10246613E-01;
  COFD[6891] = 1.66984803E-02;
  COFD[6892] = -2.09165783E+01;
  COFD[6893] = 5.02022822E+00;
  COFD[6894] = -4.10246613E-01;
  COFD[6895] = 1.66984803E-02;
  COFD[6896] = -2.08648943E+01;
  COFD[6897] = 5.02022822E+00;
  COFD[6898] = -4.10246613E-01;
  COFD[6899] = 1.66984803E-02;
  COFD[6900] = -1.77777710E+01;
  COFD[6901] = 3.43134598E+00;
  COFD[6902] = -1.49825485E-01;
  COFD[6903] = 3.20636012E-03;
  COFD[6904] = -2.08498201E+01;
  COFD[6905] = 5.11267190E+00;
  COFD[6906] = -4.33165102E-01;
  COFD[6907] = 1.81407852E-02;
  COFD[6908] = -2.08498201E+01;
  COFD[6909] = 5.11267190E+00;
  COFD[6910] = -4.33165102E-01;
  COFD[6911] = 1.81407852E-02;
  COFD[6912] = -1.50275326E+01;
  COFD[6913] = 3.73345719E+00;
  COFD[6914] = -2.78334943E-01;
  COFD[6915] = 1.24274352E-02;
  COFD[6916] = -1.82009592E+01;
  COFD[6917] = 5.04142338E+00;
  COFD[6918] = -4.33551309E-01;
  COFD[6919] = 1.85560778E-02;
  COFD[6920] = -1.82099893E+01;
  COFD[6921] = 4.61134661E+00;
  COFD[6922] = -3.88986112E-01;
  COFD[6923] = 1.70927982E-02;
  COFD[6924] = -1.93863144E+01;
  COFD[6925] = 4.87165772E+00;
  COFD[6926] = -4.18324132E-01;
  COFD[6927] = 1.81788987E-02;
  COFD[6928] = -1.82292269E+01;
  COFD[6929] = 4.61134661E+00;
  COFD[6930] = -3.88986112E-01;
  COFD[6931] = 1.70927982E-02;
  COFD[6932] = -1.77193095E+01;
  COFD[6933] = 3.72615676E+00;
  COFD[6934] = -1.95878106E-01;
  COFD[6935] = 5.51451975E-03;
  COFD[6936] = -1.93934993E+01;
  COFD[6937] = 4.87165772E+00;
  COFD[6938] = -4.18324132E-01;
  COFD[6939] = 1.81788987E-02;
  COFD[6940] = -1.94003540E+01;
  COFD[6941] = 4.87165772E+00;
  COFD[6942] = -4.18324132E-01;
  COFD[6943] = 1.81788987E-02;
  COFD[6944] = -1.78695006E+01;
  COFD[6945] = 4.46493404E+00;
  COFD[6946] = -3.70700744E-01;
  COFD[6947] = 1.63281819E-02;
  COFD[6948] = -1.81419524E+01;
  COFD[6949] = 4.61134661E+00;
  COFD[6950] = -3.88986112E-01;
  COFD[6951] = 1.70927982E-02;
  COFD[6952] = -1.98319542E+01;
  COFD[6953] = 5.03898967E+00;
  COFD[6954] = -4.33424410E-01;
  COFD[6955] = 1.85583951E-02;
  COFD[6956] = -1.98319542E+01;
  COFD[6957] = 5.03898967E+00;
  COFD[6958] = -4.33424410E-01;
  COFD[6959] = 1.85583951E-02;
  COFD[6960] = -1.98548169E+01;
  COFD[6961] = 5.03898967E+00;
  COFD[6962] = -4.33424410E-01;
  COFD[6963] = 1.85583951E-02;
  COFD[6964] = -1.98358996E+01;
  COFD[6965] = 5.03362049E+00;
  COFD[6966] = -4.33242805E-01;
  COFD[6967] = 1.85719846E-02;
  COFD[6968] = -1.91106073E+01;
  COFD[6969] = 4.76950503E+00;
  COFD[6970] = -4.06229912E-01;
  COFD[6971] = 1.77019654E-02;
  COFD[6972] = -2.06041847E+01;
  COFD[6973] = 5.06645475E+00;
  COFD[6974] = -4.19370389E-01;
  COFD[6975] = 1.72229000E-02;
  COFD[6976] = -1.88538153E+01;
  COFD[6977] = 4.09369055E+00;
  COFD[6978] = -2.53505107E-01;
  COFD[6979] = 8.41485584E-03;
  COFD[6980] = -1.88621351E+01;
  COFD[6981] = 4.09369055E+00;
  COFD[6982] = -2.53505107E-01;
  COFD[6983] = 8.41485584E-03;
  COFD[6984] = -1.95950957E+01;
  COFD[6985] = 4.46587761E+00;
  COFD[6986] = -3.13397591E-01;
  COFD[6987] = 1.14824922E-02;
  COFD[6988] = -1.95950957E+01;
  COFD[6989] = 4.46587761E+00;
  COFD[6990] = -3.13397591E-01;
  COFD[6991] = 1.14824922E-02;
  COFD[6992] = -1.90340106E+01;
  COFD[6993] = 4.17047479E+00;
  COFD[6994] = -2.65745255E-01;
  COFD[6995] = 9.03811854E-03;
  COFD[6996] = -2.05143880E+01;
  COFD[6997] = 5.10104108E+00;
  COFD[6998] = -4.29704501E-01;
  COFD[6999] = 1.79101847E-02;
  COFD[7000] = -2.05247236E+01;
  COFD[7001] = 5.10104108E+00;
  COFD[7002] = -4.29704501E-01;
  COFD[7003] = 1.79101847E-02;
  COFD[7004] = -2.05344829E+01;
  COFD[7005] = 5.10104108E+00;
  COFD[7006] = -4.29704501E-01;
  COFD[7007] = 1.79101847E-02;
  COFD[7008] = -2.03982979E+01;
  COFD[7009] = 4.94449890E+00;
  COFD[7010] = -3.96621809E-01;
  COFD[7011] = 1.59509769E-02;
  COFD[7012] = -2.06366834E+01;
  COFD[7013] = 5.04934027E+00;
  COFD[7014] = -4.15693264E-01;
  COFD[7015] = 1.70036853E-02;
  COFD[7016] = -2.06449845E+01;
  COFD[7017] = 5.04934027E+00;
  COFD[7018] = -4.15693264E-01;
  COFD[7019] = 1.70036853E-02;
  COFD[7020] = -1.98134756E+01;
  COFD[7021] = 5.05137814E+00;
  COFD[7022] = -4.33880542E-01;
  COFD[7023] = 1.85303256E-02;
  COFD[7024] = -1.95962852E+01;
  COFD[7025] = 4.38922184E+00;
  COFD[7026] = -3.00765764E-01;
  COFD[7027] = 1.08259157E-02;
  COFD[7028] = -1.95962852E+01;
  COFD[7029] = 4.38922184E+00;
  COFD[7030] = -3.00765764E-01;
  COFD[7031] = 1.08259157E-02;
  COFD[7032] = -1.79220588E+01;
  COFD[7033] = 4.46493404E+00;
  COFD[7034] = -3.70700744E-01;
  COFD[7035] = 1.63281819E-02;
  COFD[7036] = -1.81595650E+01;
  COFD[7037] = 4.61134661E+00;
  COFD[7038] = -3.88986112E-01;
  COFD[7039] = 1.70927982E-02;
  COFD[7040] = -1.81804854E+01;
  COFD[7041] = 4.61134661E+00;
  COFD[7042] = -3.88986112E-01;
  COFD[7043] = 1.70927982E-02;
  COFD[7044] = -1.86737052E+01;
  COFD[7045] = 4.17419972E+00;
  COFD[7046] = -2.66341031E-01;
  COFD[7047] = 9.06851271E-03;
  COFD[7048] = -1.82667214E+01;
  COFD[7049] = 4.46493404E+00;
  COFD[7050] = -3.70700744E-01;
  COFD[7051] = 1.63281819E-02;
  COFD[7052] = -1.91080397E+01;
  COFD[7053] = 4.76599271E+00;
  COFD[7054] = -4.05891334E-01;
  COFD[7055] = 1.76922565E-02;
  COFD[7056] = -2.04883654E+01;
  COFD[7057] = 5.11247260E+00;
  COFD[7058] = -4.32889260E-01;
  COFD[7059] = 1.81185353E-02;
  COFD[7060] = -2.05954465E+01;
  COFD[7061] = 5.07237780E+00;
  COFD[7062] = -4.21879496E-01;
  COFD[7063] = 1.74021378E-02;
  COFD[7064] = -1.96075824E+01;
  COFD[7065] = 4.94277430E+00;
  COFD[7066] = -4.26115109E-01;
  COFD[7067] = 1.84573494E-02;
  COFD[7068] = -1.84306595E+01;
  COFD[7069] = 4.52975934E+00;
  COFD[7070] = -3.78844481E-01;
  COFD[7071] = 1.66708727E-02;
  COFD[7072] = -1.81485932E+01;
  COFD[7073] = 3.73970418E+00;
  COFD[7074] = -1.98019935E-01;
  COFD[7075] = 5.62263318E-03;
  COFD[7076] = -1.81578349E+01;
  COFD[7077] = 3.73970418E+00;
  COFD[7078] = -1.98019935E-01;
  COFD[7079] = 5.62263318E-03;
  COFD[7080] = -1.98134954E+01;
  COFD[7081] = 5.05137814E+00;
  COFD[7082] = -4.33880542E-01;
  COFD[7083] = 1.85303256E-02;
  COFD[7084] = -2.05909968E+01;
  COFD[7085] = 5.07237780E+00;
  COFD[7086] = -4.21879496E-01;
  COFD[7087] = 1.74021378E-02;
  COFD[7088] = -2.05909968E+01;
  COFD[7089] = 5.07237780E+00;
  COFD[7090] = -4.21879496E-01;
  COFD[7091] = 1.74021378E-02;
  COFD[7092] = -2.05909968E+01;
  COFD[7093] = 5.07237780E+00;
  COFD[7094] = -4.21879496E-01;
  COFD[7095] = 1.74021378E-02;
  COFD[7096] = -2.05862847E+01;
  COFD[7097] = 5.07237780E+00;
  COFD[7098] = -4.21879496E-01;
  COFD[7099] = 1.74021378E-02;
  COFD[7100] = -1.90911491E+01;
  COFD[7101] = 4.76599271E+00;
  COFD[7102] = -4.05891334E-01;
  COFD[7103] = 1.76922565E-02;
  COFD[7104] = -1.99229731E+01;
  COFD[7105] = 5.02679748E+00;
  COFD[7106] = -4.33402556E-01;
  COFD[7107] = 1.86227634E-02;
  COFD[7108] = -2.08102625E+01;
  COFD[7109] = 4.99697590E+00;
  COFD[7110] = -4.06056891E-01;
  COFD[7111] = 1.64683071E-02;
  COFD[7112] = -2.08147899E+01;
  COFD[7113] = 4.99697590E+00;
  COFD[7114] = -4.06056891E-01;
  COFD[7115] = 1.64683071E-02;
  COFD[7116] = -1.96009937E+01;
  COFD[7117] = 4.38922184E+00;
  COFD[7118] = -3.00765764E-01;
  COFD[7119] = 1.08259157E-02;
  COFD[7120] = -1.96055285E+01;
  COFD[7121] = 4.38922184E+00;
  COFD[7122] = -3.00765764E-01;
  COFD[7123] = 1.08259157E-02;
  COFD[7124] = -1.99692892E+01;
  COFD[7125] = 4.83343006E+00;
  COFD[7126] = -3.74923802E-01;
  COFD[7127] = 1.47155398E-02;
  COFD[7128] = -1.82629694E+01;
  COFD[7129] = 4.61134661E+00;
  COFD[7130] = -3.88986112E-01;
  COFD[7131] = 1.70927982E-02;
  COFD[7132] = -1.97614507E+01;
  COFD[7133] = 4.98992175E+00;
  COFD[7134] = -4.30639730E-01;
  COFD[7135] = 1.85871895E-02;
  COFD[7136] = -2.05868189E+01;
  COFD[7137] = 5.01615372E+00;
  COFD[7138] = -4.09499645E-01;
  COFD[7139] = 1.66570727E-02;
  COFD[7140] = -2.06717705E+01;
  COFD[7141] = 5.01615372E+00;
  COFD[7142] = -4.09499645E-01;
  COFD[7143] = 1.66570727E-02;
  COFD[7144] = -2.07189367E+01;
  COFD[7145] = 5.01615372E+00;
  COFD[7146] = -4.09499645E-01;
  COFD[7147] = 1.66570727E-02;
  COFD[7148] = -2.03617119E+01;
  COFD[7149] = 5.02212579E+00;
  COFD[7150] = -4.33311415E-01;
  COFD[7151] = 1.86403529E-02;
  COFD[7152] = -2.05799704E+01;
  COFD[7153] = 5.01615372E+00;
  COFD[7154] = -4.09499645E-01;
  COFD[7155] = 1.66570727E-02;
  COFD[7156] = -2.06683214E+01;
  COFD[7157] = 5.01615372E+00;
  COFD[7158] = -4.09499645E-01;
  COFD[7159] = 1.66570727E-02;
  COFD[7160] = -2.00472137E+01;
  COFD[7161] = 4.96578478E+00;
  COFD[7162] = -4.28347984E-01;
  COFD[7163] = 1.85229087E-02;
  COFD[7164] = -2.05727920E+01;
  COFD[7165] = 5.01615372E+00;
  COFD[7166] = -4.09499645E-01;
  COFD[7167] = 1.66570727E-02;
  COFD[7168] = -1.96285019E+01;
  COFD[7169] = 4.87652152E+00;
  COFD[7170] = -4.18854393E-01;
  COFD[7171] = 1.81976518E-02;
  COFD[7172] = -1.90447873E+01;
  COFD[7173] = 4.74328938E+00;
  COFD[7174] = -4.03622122E-01;
  COFD[7175] = 1.76226730E-02;
  COFD[7176] = -2.05473819E+01;
  COFD[7177] = 4.74102311E+00;
  COFD[7178] = -3.59378625E-01;
  COFD[7179] = 1.38954729E-02;
  COFD[7180] = -2.05128896E+01;
  COFD[7181] = 4.74102311E+00;
  COFD[7182] = -3.59378625E-01;
  COFD[7183] = 1.38954729E-02;
  COFD[7184] = -2.04599231E+01;
  COFD[7185] = 4.74102311E+00;
  COFD[7186] = -3.59378625E-01;
  COFD[7187] = 1.38954729E-02;
  COFD[7188] = -1.56843459E+01;
  COFD[7189] = 2.42687065E+00;
  COFD[7190] = 3.11557501E-03;
  COFD[7191] = -4.32109630E-03;
  COFD[7192] = -2.08102625E+01;
  COFD[7193] = 4.99697590E+00;
  COFD[7194] = -4.06056891E-01;
  COFD[7195] = 1.64683071E-02;
  COFD[7196] = -2.08102625E+01;
  COFD[7197] = 4.99697590E+00;
  COFD[7198] = -4.06056891E-01;
  COFD[7199] = 1.64683071E-02;
  COFD[7200] = -1.48546420E+01;
  COFD[7201] = 3.63539387E+00;
  COFD[7202] = -2.65974811E-01;
  COFD[7203] = 1.19076945E-02;
  COFD[7204] = -1.81535279E+01;
  COFD[7205] = 5.00772290E+00;
  COFD[7206] = -4.32092407E-01;
  COFD[7207] = 1.86144012E-02;
  COFD[7208] = -1.79328095E+01;
  COFD[7209] = 4.47278815E+00;
  COFD[7210] = -3.71676557E-01;
  COFD[7211] = 1.63687643E-02;
  COFD[7212] = -1.91542408E+01;
  COFD[7213] = 4.75936146E+00;
  COFD[7214] = -4.05242301E-01;
  COFD[7215] = 1.76731043E-02;
  COFD[7216] = -1.79522974E+01;
  COFD[7217] = 4.47278815E+00;
  COFD[7218] = -3.71676557E-01;
  COFD[7219] = 1.63687643E-02;
  COFD[7220] = -1.83889233E+01;
  COFD[7221] = 4.01185055E+00;
  COFD[7222] = -2.40584517E-01;
  COFD[7223] = 7.76110363E-03;
  COFD[7224] = -1.91615620E+01;
  COFD[7225] = 4.75936146E+00;
  COFD[7226] = -4.05242301E-01;
  COFD[7227] = 1.76731043E-02;
  COFD[7228] = -1.91685485E+01;
  COFD[7229] = 4.75936146E+00;
  COFD[7230] = -4.05242301E-01;
  COFD[7231] = 1.76731043E-02;
  COFD[7232] = -1.76286376E+01;
  COFD[7233] = 4.34376344E+00;
  COFD[7234] = -3.55663855E-01;
  COFD[7235] = 1.57033899E-02;
  COFD[7236] = -1.78639617E+01;
  COFD[7237] = 4.47278815E+00;
  COFD[7238] = -3.71676557E-01;
  COFD[7239] = 1.63687643E-02;
  COFD[7240] = -1.97641201E+01;
  COFD[7241] = 5.00431031E+00;
  COFD[7242] = -4.31814645E-01;
  COFD[7243] = 1.86092360E-02;
  COFD[7244] = -1.97641201E+01;
  COFD[7245] = 5.00431031E+00;
  COFD[7246] = -4.31814645E-01;
  COFD[7247] = 1.86092360E-02;
  COFD[7248] = -1.97872565E+01;
  COFD[7249] = 5.00431031E+00;
  COFD[7250] = -4.31814645E-01;
  COFD[7251] = 1.86092360E-02;
  COFD[7252] = -1.97612564E+01;
  COFD[7253] = 4.99521052E+00;
  COFD[7254] = -4.31066342E-01;
  COFD[7255] = 1.85948023E-02;
  COFD[7256] = -1.89633914E+01;
  COFD[7257] = 4.69425869E+00;
  COFD[7258] = -3.98385563E-01;
  COFD[7259] = 1.74432008E-02;
  COFD[7260] = -2.06425941E+01;
  COFD[7261] = 5.07954227E+00;
  COFD[7262] = -4.24924340E-01;
  COFD[7263] = 1.76205385E-02;
  COFD[7264] = -1.94229431E+01;
  COFD[7265] = 4.34137304E+00;
  COFD[7266] = -2.92962347E-01;
  COFD[7267] = 1.04230613E-02;
  COFD[7268] = -1.94314135E+01;
  COFD[7269] = 4.34137304E+00;
  COFD[7270] = -2.92962347E-01;
  COFD[7271] = 1.04230613E-02;
  COFD[7272] = -1.99695533E+01;
  COFD[7273] = 4.62896744E+00;
  COFD[7274] = -3.40740605E-01;
  COFD[7275] = 1.29189928E-02;
  COFD[7276] = -1.99695533E+01;
  COFD[7277] = 4.62896744E+00;
  COFD[7278] = -3.40740605E-01;
  COFD[7279] = 1.29189928E-02;
  COFD[7280] = -1.95676273E+01;
  COFD[7281] = 4.40247945E+00;
  COFD[7282] = -3.02933962E-01;
  COFD[7283] = 1.09381540E-02;
  COFD[7284] = -2.05306834E+01;
  COFD[7285] = 5.10719085E+00;
  COFD[7286] = -4.34339920E-01;
  COFD[7287] = 1.82696178E-02;
  COFD[7288] = -2.05411926E+01;
  COFD[7289] = 5.10719085E+00;
  COFD[7290] = -4.34339920E-01;
  COFD[7291] = 1.82696178E-02;
  COFD[7292] = -2.05511193E+01;
  COFD[7293] = 5.10719085E+00;
  COFD[7294] = -4.34339920E-01;
  COFD[7295] = 1.82696178E-02;
  COFD[7296] = -2.06366834E+01;
  COFD[7297] = 5.04934027E+00;
  COFD[7298] = -4.15693264E-01;
  COFD[7299] = 1.70036853E-02;
  COFD[7300] = -2.06924409E+01;
  COFD[7301] = 5.07362069E+00;
  COFD[7302] = -4.22908375E-01;
  COFD[7303] = 1.74819841E-02;
  COFD[7304] = -2.07008924E+01;
  COFD[7305] = 5.07362069E+00;
  COFD[7306] = -4.22908375E-01;
  COFD[7307] = 1.74819841E-02;
  COFD[7308] = -1.97819400E+01;
  COFD[7309] = 5.02413756E+00;
  COFD[7310] = -4.33421683E-01;
  COFD[7311] = 1.86388438E-02;
  COFD[7312] = -1.99801012E+01;
  COFD[7313] = 4.55690386E+00;
  COFD[7314] = -3.28720255E-01;
  COFD[7315] = 1.22885411E-02;
  COFD[7316] = -1.99801012E+01;
  COFD[7317] = 4.55690386E+00;
  COFD[7318] = -3.28720255E-01;
  COFD[7319] = 1.22885411E-02;
  COFD[7320] = -1.76817785E+01;
  COFD[7321] = 4.34376344E+00;
  COFD[7322] = -3.55663855E-01;
  COFD[7323] = 1.57033899E-02;
  COFD[7324] = -1.78835470E+01;
  COFD[7325] = 4.47278815E+00;
  COFD[7326] = -3.71676557E-01;
  COFD[7327] = 1.63687643E-02;
  COFD[7328] = -1.79047290E+01;
  COFD[7329] = 4.47278815E+00;
  COFD[7330] = -3.71676557E-01;
  COFD[7331] = 1.63687643E-02;
  COFD[7332] = -1.92117576E+01;
  COFD[7333] = 4.40561091E+00;
  COFD[7334] = -3.03445339E-01;
  COFD[7335] = 1.09646069E-02;
  COFD[7336] = -1.80239153E+01;
  COFD[7337] = 4.34376344E+00;
  COFD[7338] = -3.55663855E-01;
  COFD[7339] = 1.57033899E-02;
  COFD[7340] = -1.89599776E+01;
  COFD[7341] = 4.68999916E+00;
  COFD[7342] = -3.97926797E-01;
  COFD[7343] = 1.74272678E-02;
  COFD[7344] = -2.04573493E+01;
  COFD[7345] = 5.09394281E+00;
  COFD[7346] = -4.33962494E-01;
  COFD[7347] = 1.83082912E-02;
  COFD[7348] = -2.06690747E+01;
  COFD[7349] = 5.10138987E+00;
  COFD[7350] = -4.29786314E-01;
  COFD[7351] = 1.79152451E-02;
  COFD[7352] = -1.94183972E+01;
  COFD[7353] = 4.85024145E+00;
  COFD[7354] = -4.15966521E-01;
  COFD[7355] = 1.80942811E-02;
  COFD[7356] = -1.81672350E+01;
  COFD[7357] = 4.40093543E+00;
  COFD[7358] = -3.62803060E-01;
  COFD[7359] = 1.60019832E-02;
  COFD[7360] = -1.88106329E+01;
  COFD[7361] = 4.02705431E+00;
  COFD[7362] = -2.42978330E-01;
  COFD[7363] = 7.88194462E-03;
  COFD[7364] = -1.88200362E+01;
  COFD[7365] = 4.02705431E+00;
  COFD[7366] = -2.42978330E-01;
  COFD[7367] = 7.88194462E-03;
  COFD[7368] = -1.97819603E+01;
  COFD[7369] = 5.02413756E+00;
  COFD[7370] = -4.33421683E-01;
  COFD[7371] = 1.86388438E-02;
  COFD[7372] = -2.06645292E+01;
  COFD[7373] = 5.10138987E+00;
  COFD[7374] = -4.29786314E-01;
  COFD[7375] = 1.79152451E-02;
  COFD[7376] = -2.06645292E+01;
  COFD[7377] = 5.10138987E+00;
  COFD[7378] = -4.29786314E-01;
  COFD[7379] = 1.79152451E-02;
  COFD[7380] = -2.06645292E+01;
  COFD[7381] = 5.10138987E+00;
  COFD[7382] = -4.29786314E-01;
  COFD[7383] = 1.79152451E-02;
  COFD[7384] = -2.06597165E+01;
  COFD[7385] = 5.10138987E+00;
  COFD[7386] = -4.29786314E-01;
  COFD[7387] = 1.79152451E-02;
  COFD[7388] = -1.89427839E+01;
  COFD[7389] = 4.68999916E+00;
  COFD[7390] = -3.97926797E-01;
  COFD[7391] = 1.74272678E-02;
  COFD[7392] = -1.98282860E+01;
  COFD[7393] = 4.97552540E+00;
  COFD[7394] = -4.29336775E-01;
  COFD[7395] = 1.85543422E-02;
  COFD[7396] = -2.09684519E+01;
  COFD[7397] = 5.06936561E+00;
  COFD[7398] = -4.20391597E-01;
  COFD[7399] = 1.72932254E-02;
  COFD[7400] = -2.09730769E+01;
  COFD[7401] = 5.06936561E+00;
  COFD[7402] = -4.20391597E-01;
  COFD[7403] = 1.72932254E-02;
  COFD[7404] = -1.99849102E+01;
  COFD[7405] = 4.55690386E+00;
  COFD[7406] = -3.28720255E-01;
  COFD[7407] = 1.22885411E-02;
  COFD[7408] = -1.99895427E+01;
  COFD[7409] = 4.55690386E+00;
  COFD[7410] = -3.28720255E-01;
  COFD[7411] = 1.22885411E-02;
  COFD[7412] = -2.01452951E+01;
  COFD[7413] = 4.90670466E+00;
  COFD[7414] = -3.89243681E-01;
  COFD[7415] = 1.55306081E-02;
  COFD[7416] = -1.79865031E+01;
  COFD[7417] = 4.47278815E+00;
  COFD[7418] = -3.71676557E-01;
  COFD[7419] = 1.63687643E-02;
  COFD[7420] = -1.96190172E+01;
  COFD[7421] = 4.91686048E+00;
  COFD[7422] = -4.23336257E-01;
  COFD[7423] = 1.83608502E-02;
  COFD[7424] = -2.07124371E+01;
  COFD[7425] = 5.07093412E+00;
  COFD[7426] = -4.21231152E-01;
  COFD[7427] = 1.73552654E-02;
  COFD[7428] = -2.07991866E+01;
  COFD[7429] = 5.07093412E+00;
  COFD[7430] = -4.21231152E-01;
  COFD[7431] = 1.73552654E-02;
  COFD[7432] = -2.08474943E+01;
  COFD[7433] = 5.07093412E+00;
  COFD[7434] = -4.21231152E-01;
  COFD[7435] = 1.73552654E-02;
  COFD[7436] = -2.02369569E+01;
  COFD[7437] = 4.96212426E+00;
  COFD[7438] = -4.27973386E-01;
  COFD[7439] = 1.85108394E-02;
  COFD[7440] = -2.07054568E+01;
  COFD[7441] = 5.07093412E+00;
  COFD[7442] = -4.21231152E-01;
  COFD[7443] = 1.73552654E-02;
  COFD[7444] = -2.07956582E+01;
  COFD[7445] = 5.07093412E+00;
  COFD[7446] = -4.21231152E-01;
  COFD[7447] = 1.73552654E-02;
  COFD[7448] = -1.98739970E+01;
  COFD[7449] = 4.88242120E+00;
  COFD[7450] = -4.19502166E-01;
  COFD[7451] = 1.82208019E-02;
  COFD[7452] = -2.06981423E+01;
  COFD[7453] = 5.07093412E+00;
  COFD[7454] = -4.21231152E-01;
  COFD[7455] = 1.73552654E-02;
  COFD[7456] = -1.93893318E+01;
  COFD[7457] = 4.76282572E+00;
  COFD[7458] = -4.05580830E-01;
  COFD[7459] = 1.76830646E-02;
  COFD[7460] = -1.88883157E+01;
  COFD[7461] = 4.66285635E+00;
  COFD[7462] = -3.94923282E-01;
  COFD[7463] = 1.73187839E-02;
  COFD[7464] = -2.08495861E+01;
  COFD[7465] = 4.87539271E+00;
  COFD[7466] = -3.82608295E-01;
  COFD[7467] = 1.51394206E-02;
  COFD[7468] = -2.08142023E+01;
  COFD[7469] = 4.87539271E+00;
  COFD[7470] = -3.82608295E-01;
  COFD[7471] = 1.51394206E-02;
  COFD[7472] = -2.07599836E+01;
  COFD[7473] = 4.87539271E+00;
  COFD[7474] = -3.82608295E-01;
  COFD[7475] = 1.51394206E-02;
  COFD[7476] = -1.66206882E+01;
  COFD[7477] = 2.82977426E+00;
  COFD[7478] = -5.76575801E-02;
  COFD[7479] = -1.35075395E-03;
  COFD[7480] = -2.09684519E+01;
  COFD[7481] = 5.06936561E+00;
  COFD[7482] = -4.20391597E-01;
  COFD[7483] = 1.72932254E-02;
  COFD[7484] = -2.09684519E+01;
  COFD[7485] = 5.06936561E+00;
  COFD[7486] = -4.20391597E-01;
  COFD[7487] = 1.72932254E-02;
  COFD[7488] = -1.48557305E+01;
  COFD[7489] = 3.63539387E+00;
  COFD[7490] = -2.65974811E-01;
  COFD[7491] = 1.19076945E-02;
  COFD[7492] = -1.81540901E+01;
  COFD[7493] = 5.00772290E+00;
  COFD[7494] = -4.32092407E-01;
  COFD[7495] = 1.86144012E-02;
  COFD[7496] = -1.79387962E+01;
  COFD[7497] = 4.47278815E+00;
  COFD[7498] = -3.71676557E-01;
  COFD[7499] = 1.63687643E-02;
  COFD[7500] = -1.91631023E+01;
  COFD[7501] = 4.75936146E+00;
  COFD[7502] = -4.05242301E-01;
  COFD[7503] = 1.76731043E-02;
  COFD[7504] = -1.79585235E+01;
  COFD[7505] = 4.47278815E+00;
  COFD[7506] = -3.71676557E-01;
  COFD[7507] = 1.63687643E-02;
  COFD[7508] = -1.83953787E+01;
  COFD[7509] = 4.01185055E+00;
  COFD[7510] = -2.40584517E-01;
  COFD[7511] = 7.76110363E-03;
  COFD[7512] = -1.91705553E+01;
  COFD[7513] = 4.75936146E+00;
  COFD[7514] = -4.05242301E-01;
  COFD[7515] = 1.76731043E-02;
  COFD[7516] = -1.91776696E+01;
  COFD[7517] = 4.75936146E+00;
  COFD[7518] = -4.05242301E-01;
  COFD[7519] = 1.76731043E-02;
  COFD[7520] = -1.76335632E+01;
  COFD[7521] = 4.34376344E+00;
  COFD[7522] = -3.55663855E-01;
  COFD[7523] = 1.57033899E-02;
  COFD[7524] = -1.78691743E+01;
  COFD[7525] = 4.47278815E+00;
  COFD[7526] = -3.71676557E-01;
  COFD[7527] = 1.63687643E-02;
  COFD[7528] = -1.97696064E+01;
  COFD[7529] = 5.00431031E+00;
  COFD[7530] = -4.31814645E-01;
  COFD[7531] = 1.86092360E-02;
  COFD[7532] = -1.97696064E+01;
  COFD[7533] = 5.00431031E+00;
  COFD[7534] = -4.31814645E-01;
  COFD[7535] = 1.86092360E-02;
  COFD[7536] = -1.97930041E+01;
  COFD[7537] = 5.00431031E+00;
  COFD[7538] = -4.31814645E-01;
  COFD[7539] = 1.86092360E-02;
  COFD[7540] = -1.97672538E+01;
  COFD[7541] = 4.99521052E+00;
  COFD[7542] = -4.31066342E-01;
  COFD[7543] = 1.85948023E-02;
  COFD[7544] = -1.89716858E+01;
  COFD[7545] = 4.69425869E+00;
  COFD[7546] = -3.98385563E-01;
  COFD[7547] = 1.74432008E-02;
  COFD[7548] = -2.06527921E+01;
  COFD[7549] = 5.07954227E+00;
  COFD[7550] = -4.24924340E-01;
  COFD[7551] = 1.76205385E-02;
  COFD[7552] = -1.94313881E+01;
  COFD[7553] = 4.34137304E+00;
  COFD[7554] = -2.92962347E-01;
  COFD[7555] = 1.04230613E-02;
  COFD[7556] = -1.94400040E+01;
  COFD[7557] = 4.34137304E+00;
  COFD[7558] = -2.92962347E-01;
  COFD[7559] = 1.04230613E-02;
  COFD[7560] = -1.99782846E+01;
  COFD[7561] = 4.62896744E+00;
  COFD[7562] = -3.40740605E-01;
  COFD[7563] = 1.29189928E-02;
  COFD[7564] = -1.99782846E+01;
  COFD[7565] = 4.62896744E+00;
  COFD[7566] = -3.40740605E-01;
  COFD[7567] = 1.29189928E-02;
  COFD[7568] = -1.95764946E+01;
  COFD[7569] = 4.40247945E+00;
  COFD[7570] = -3.02933962E-01;
  COFD[7571] = 1.09381540E-02;
  COFD[7572] = -2.05384999E+01;
  COFD[7573] = 5.10719085E+00;
  COFD[7574] = -4.34339920E-01;
  COFD[7575] = 1.82696178E-02;
  COFD[7576] = -2.05491765E+01;
  COFD[7577] = 5.10719085E+00;
  COFD[7578] = -4.34339920E-01;
  COFD[7579] = 1.82696178E-02;
  COFD[7580] = -2.05592647E+01;
  COFD[7581] = 5.10719085E+00;
  COFD[7582] = -4.34339920E-01;
  COFD[7583] = 1.82696178E-02;
  COFD[7584] = -2.06449845E+01;
  COFD[7585] = 5.04934027E+00;
  COFD[7586] = -4.15693264E-01;
  COFD[7587] = 1.70036853E-02;
  COFD[7588] = -2.07008924E+01;
  COFD[7589] = 5.07362069E+00;
  COFD[7590] = -4.22908375E-01;
  COFD[7591] = 1.74819841E-02;
  COFD[7592] = -2.07094892E+01;
  COFD[7593] = 5.07362069E+00;
  COFD[7594] = -4.22908375E-01;
  COFD[7595] = 1.74819841E-02;
  COFD[7596] = -1.97918489E+01;
  COFD[7597] = 5.02413756E+00;
  COFD[7598] = -4.33421683E-01;
  COFD[7599] = 1.86388438E-02;
  COFD[7600] = -1.99901105E+01;
  COFD[7601] = 4.55690386E+00;
  COFD[7602] = -3.28720255E-01;
  COFD[7603] = 1.22885411E-02;
  COFD[7604] = -1.99901105E+01;
  COFD[7605] = 4.55690386E+00;
  COFD[7606] = -3.28720255E-01;
  COFD[7607] = 1.22885411E-02;
  COFD[7608] = -1.76872595E+01;
  COFD[7609] = 4.34376344E+00;
  COFD[7610] = -3.55663855E-01;
  COFD[7611] = 1.57033899E-02;
  COFD[7612] = -1.78892896E+01;
  COFD[7613] = 4.47278815E+00;
  COFD[7614] = -3.71676557E-01;
  COFD[7615] = 1.63687643E-02;
  COFD[7616] = -1.79107215E+01;
  COFD[7617] = 4.47278815E+00;
  COFD[7618] = -3.71676557E-01;
  COFD[7619] = 1.63687643E-02;
  COFD[7620] = -1.92179893E+01;
  COFD[7621] = 4.40561091E+00;
  COFD[7622] = -3.03445339E-01;
  COFD[7623] = 1.09646069E-02;
  COFD[7624] = -1.80323609E+01;
  COFD[7625] = 4.34376344E+00;
  COFD[7626] = -3.55663855E-01;
  COFD[7627] = 1.57033899E-02;
  COFD[7628] = -1.89685653E+01;
  COFD[7629] = 4.68999916E+00;
  COFD[7630] = -3.97926797E-01;
  COFD[7631] = 1.74272678E-02;
  COFD[7632] = -2.04677283E+01;
  COFD[7633] = 5.09394281E+00;
  COFD[7634] = -4.33962494E-01;
  COFD[7635] = 1.83082912E-02;
  COFD[7636] = -2.06792731E+01;
  COFD[7637] = 5.10138987E+00;
  COFD[7638] = -4.29786314E-01;
  COFD[7639] = 1.79152451E-02;
  COFD[7640] = -1.94271257E+01;
  COFD[7641] = 4.85024145E+00;
  COFD[7642] = -4.15966521E-01;
  COFD[7643] = 1.80942811E-02;
  COFD[7644] = -1.81752157E+01;
  COFD[7645] = 4.40093543E+00;
  COFD[7646] = -3.62803060E-01;
  COFD[7647] = 1.60019832E-02;
  COFD[7648] = -1.88187751E+01;
  COFD[7649] = 4.02705431E+00;
  COFD[7650] = -2.42978330E-01;
  COFD[7651] = 7.88194462E-03;
  COFD[7652] = -1.88283342E+01;
  COFD[7653] = 4.02705431E+00;
  COFD[7654] = -2.42978330E-01;
  COFD[7655] = 7.88194462E-03;
  COFD[7656] = -1.97918695E+01;
  COFD[7657] = 5.02413756E+00;
  COFD[7658] = -4.33421683E-01;
  COFD[7659] = 1.86388438E-02;
  COFD[7660] = -2.06746343E+01;
  COFD[7661] = 5.10138987E+00;
  COFD[7662] = -4.29786314E-01;
  COFD[7663] = 1.79152451E-02;
  COFD[7664] = -2.06746343E+01;
  COFD[7665] = 5.10138987E+00;
  COFD[7666] = -4.29786314E-01;
  COFD[7667] = 1.79152451E-02;
  COFD[7668] = -2.06746343E+01;
  COFD[7669] = 5.10138987E+00;
  COFD[7670] = -4.29786314E-01;
  COFD[7671] = 1.79152451E-02;
  COFD[7672] = -2.06697239E+01;
  COFD[7673] = 5.10138987E+00;
  COFD[7674] = -4.29786314E-01;
  COFD[7675] = 1.79152451E-02;
  COFD[7676] = -1.89510789E+01;
  COFD[7677] = 4.68999916E+00;
  COFD[7678] = -3.97926797E-01;
  COFD[7679] = 1.74272678E-02;
  COFD[7680] = -1.98380840E+01;
  COFD[7681] = 4.97552540E+00;
  COFD[7682] = -4.29336775E-01;
  COFD[7683] = 1.85543422E-02;
  COFD[7684] = -2.09785632E+01;
  COFD[7685] = 5.06936561E+00;
  COFD[7686] = -4.20391597E-01;
  COFD[7687] = 1.72932254E-02;
  COFD[7688] = -2.09832831E+01;
  COFD[7689] = 5.06936561E+00;
  COFD[7690] = -4.20391597E-01;
  COFD[7691] = 1.72932254E-02;
  COFD[7692] = -1.99950172E+01;
  COFD[7693] = 4.55690386E+00;
  COFD[7694] = -3.28720255E-01;
  COFD[7695] = 1.22885411E-02;
  COFD[7696] = -1.99997448E+01;
  COFD[7697] = 4.55690386E+00;
  COFD[7698] = -3.28720255E-01;
  COFD[7699] = 1.22885411E-02;
  COFD[7700] = -2.01521760E+01;
  COFD[7701] = 4.90670466E+00;
  COFD[7702] = -3.89243681E-01;
  COFD[7703] = 1.55306081E-02;
  COFD[7704] = -1.79931731E+01;
  COFD[7705] = 4.47278815E+00;
  COFD[7706] = -3.71676557E-01;
  COFD[7707] = 1.63687643E-02;
  COFD[7708] = -1.96286056E+01;
  COFD[7709] = 4.91686048E+00;
  COFD[7710] = -4.23336257E-01;
  COFD[7711] = 1.83608502E-02;
  COFD[7712] = -2.07215606E+01;
  COFD[7713] = 5.07093412E+00;
  COFD[7714] = -4.21231152E-01;
  COFD[7715] = 1.73552654E-02;
  COFD[7716] = -2.08100575E+01;
  COFD[7717] = 5.07093412E+00;
  COFD[7718] = -4.21231152E-01;
  COFD[7719] = 1.73552654E-02;
  COFD[7720] = -2.08594813E+01;
  COFD[7721] = 5.07093412E+00;
  COFD[7722] = -4.21231152E-01;
  COFD[7723] = 1.73552654E-02;
  COFD[7724] = -2.02497184E+01;
  COFD[7725] = 4.96212426E+00;
  COFD[7726] = -4.27973386E-01;
  COFD[7727] = 1.85108394E-02;
  COFD[7728] = -2.07144527E+01;
  COFD[7729] = 5.07093412E+00;
  COFD[7730] = -4.21231152E-01;
  COFD[7731] = 1.73552654E-02;
  COFD[7732] = -2.08064519E+01;
  COFD[7733] = 5.07093412E+00;
  COFD[7734] = -4.21231152E-01;
  COFD[7735] = 1.73552654E-02;
  COFD[7736] = -1.98859323E+01;
  COFD[7737] = 4.88242120E+00;
  COFD[7738] = -4.19502166E-01;
  COFD[7739] = 1.82208019E-02;
  COFD[7740] = -2.07070064E+01;
  COFD[7741] = 5.07093412E+00;
  COFD[7742] = -4.21231152E-01;
  COFD[7743] = 1.73552654E-02;
  COFD[7744] = -1.94000462E+01;
  COFD[7745] = 4.76282572E+00;
  COFD[7746] = -4.05580830E-01;
  COFD[7747] = 1.76830646E-02;
  COFD[7748] = -1.88970436E+01;
  COFD[7749] = 4.66285635E+00;
  COFD[7750] = -3.94923282E-01;
  COFD[7751] = 1.73187839E-02;
  COFD[7752] = -2.08622354E+01;
  COFD[7753] = 4.87539271E+00;
  COFD[7754] = -3.82608295E-01;
  COFD[7755] = 1.51394206E-02;
  COFD[7756] = -2.08259770E+01;
  COFD[7757] = 4.87539271E+00;
  COFD[7758] = -3.82608295E-01;
  COFD[7759] = 1.51394206E-02;
  COFD[7760] = -2.07705354E+01;
  COFD[7761] = 4.87539271E+00;
  COFD[7762] = -3.82608295E-01;
  COFD[7763] = 1.51394206E-02;
  COFD[7764] = -1.66311545E+01;
  COFD[7765] = 2.82977426E+00;
  COFD[7766] = -5.76575801E-02;
  COFD[7767] = -1.35075395E-03;
  COFD[7768] = -2.09785632E+01;
  COFD[7769] = 5.06936561E+00;
  COFD[7770] = -4.20391597E-01;
  COFD[7771] = 1.72932254E-02;
  COFD[7772] = -2.09785632E+01;
  COFD[7773] = 5.06936561E+00;
  COFD[7774] = -4.20391597E-01;
  COFD[7775] = 1.72932254E-02;
  COFD[7776] = -1.29472065E+01;
  COFD[7777] = 3.12904711E+00;
  COFD[7778] = -2.00267602E-01;
  COFD[7779] = 9.06153724E-03;
  COFD[7780] = -1.61564228E+01;
  COFD[7781] = 4.57406894E+00;
  COFD[7782] = -3.84438074E-01;
  COFD[7783] = 1.69074675E-02;
  COFD[7784] = -1.57655841E+01;
  COFD[7785] = 3.87441160E+00;
  COFD[7786] = -2.96411944E-01;
  COFD[7787] = 1.32018011E-02;
  COFD[7788] = -1.71442233E+01;
  COFD[7789] = 4.20727805E+00;
  COFD[7790] = -3.38518137E-01;
  COFD[7791] = 1.49826208E-02;
  COFD[7792] = -1.57873729E+01;
  COFD[7793] = 3.87441160E+00;
  COFD[7794] = -2.96411944E-01;
  COFD[7795] = 1.32018011E-02;
  COFD[7796] = -1.94095019E+01;
  COFD[7797] = 4.89210282E+00;
  COFD[7798] = -3.86038601E-01;
  COFD[7799] = 1.53387922E-02;
  COFD[7800] = -1.71528769E+01;
  COFD[7801] = 4.20727805E+00;
  COFD[7802] = -3.38518137E-01;
  COFD[7803] = 1.49826208E-02;
  COFD[7804] = -1.71611566E+01;
  COFD[7805] = 4.20727805E+00;
  COFD[7806] = -3.38518137E-01;
  COFD[7807] = 1.49826208E-02;
  COFD[7808] = -1.54928008E+01;
  COFD[7809] = 3.73799764E+00;
  COFD[7810] = -2.78922749E-01;
  COFD[7811] = 1.24528579E-02;
  COFD[7812] = -1.56893608E+01;
  COFD[7813] = 3.87441160E+00;
  COFD[7814] = -2.96411944E-01;
  COFD[7815] = 1.32018011E-02;
  COFD[7816] = -1.79636707E+01;
  COFD[7817] = 4.56481098E+00;
  COFD[7818] = -3.83274058E-01;
  COFD[7819] = 1.68584426E-02;
  COFD[7820] = -1.79636707E+01;
  COFD[7821] = 4.56481098E+00;
  COFD[7822] = -3.83274058E-01;
  COFD[7823] = 1.68584426E-02;
  COFD[7824] = -1.79892975E+01;
  COFD[7825] = 4.56481098E+00;
  COFD[7826] = -3.83274058E-01;
  COFD[7827] = 1.68584426E-02;
  COFD[7828] = -1.79273423E+01;
  COFD[7829] = 4.53958872E+00;
  COFD[7830] = -3.80085082E-01;
  COFD[7831] = 1.67233237E-02;
  COFD[7832] = -1.69224603E+01;
  COFD[7833] = 4.11938612E+00;
  COFD[7834] = -3.27769287E-01;
  COFD[7835] = 1.45442039E-02;
  COFD[7836] = -1.96669871E+01;
  COFD[7837] = 5.00794480E+00;
  COFD[7838] = -4.32110444E-01;
  COFD[7839] = 1.86147351E-02;
  COFD[7840] = -2.00441543E+01;
  COFD[7841] = 4.99999936E+00;
  COFD[7842] = -4.06600796E-01;
  COFD[7843] = 1.64981582E-02;
  COFD[7844] = -2.00540841E+01;
  COFD[7845] = 4.99999936E+00;
  COFD[7846] = -4.06600796E-01;
  COFD[7847] = 1.64981582E-02;
  COFD[7848] = -2.01187353E+01;
  COFD[7849] = 5.07420737E+00;
  COFD[7850] = -4.23603424E-01;
  COFD[7851] = 1.75373879E-02;
  COFD[7852] = -2.01187353E+01;
  COFD[7853] = 5.07420737E+00;
  COFD[7854] = -4.23603424E-01;
  COFD[7855] = 1.75373879E-02;
  COFD[7856] = -2.01309041E+01;
  COFD[7857] = 5.03282199E+00;
  COFD[7858] = -4.12565985E-01;
  COFD[7859] = 1.68273619E-02;
  COFD[7860] = -1.92766922E+01;
  COFD[7861] = 4.90691097E+00;
  COFD[7862] = -4.22240144E-01;
  COFD[7863] = 1.83213252E-02;
  COFD[7864] = -1.92888612E+01;
  COFD[7865] = 4.90691097E+00;
  COFD[7866] = -4.22240144E-01;
  COFD[7867] = 1.83213252E-02;
  COFD[7868] = -1.93003933E+01;
  COFD[7869] = 4.90691097E+00;
  COFD[7870] = -4.22240144E-01;
  COFD[7871] = 1.83213252E-02;
  COFD[7872] = -1.98134756E+01;
  COFD[7873] = 5.05137814E+00;
  COFD[7874] = -4.33880542E-01;
  COFD[7875] = 1.85303256E-02;
  COFD[7876] = -1.97819400E+01;
  COFD[7877] = 5.02413756E+00;
  COFD[7878] = -4.33421683E-01;
  COFD[7879] = 1.86388438E-02;
  COFD[7880] = -1.97918489E+01;
  COFD[7881] = 5.02413756E+00;
  COFD[7882] = -4.33421683E-01;
  COFD[7883] = 1.86388438E-02;
  COFD[7884] = -1.79731093E+01;
  COFD[7885] = 4.61301162E+00;
  COFD[7886] = -3.89184048E-01;
  COFD[7887] = 1.71006222E-02;
  COFD[7888] = -2.03191749E+01;
  COFD[7889] = 5.07217478E+00;
  COFD[7890] = -4.21775859E-01;
  COFD[7891] = 1.73945008E-02;
  COFD[7892] = -2.03191749E+01;
  COFD[7893] = 5.07217478E+00;
  COFD[7894] = -4.21775859E-01;
  COFD[7895] = 1.73945008E-02;
  COFD[7896] = -1.55511974E+01;
  COFD[7897] = 3.73799764E+00;
  COFD[7898] = -2.78922749E-01;
  COFD[7899] = 1.24528579E-02;
  COFD[7900] = -1.57040858E+01;
  COFD[7901] = 3.87441160E+00;
  COFD[7902] = -2.96411944E-01;
  COFD[7903] = 1.32018011E-02;
  COFD[7904] = -1.57276605E+01;
  COFD[7905] = 3.87441160E+00;
  COFD[7906] = -2.96411944E-01;
  COFD[7907] = 1.32018011E-02;
  COFD[7908] = -1.96869634E+01;
  COFD[7909] = 5.03431543E+00;
  COFD[7910] = -4.12843348E-01;
  COFD[7911] = 1.68428432E-02;
  COFD[7912] = -1.59602660E+01;
  COFD[7913] = 3.73799764E+00;
  COFD[7914] = -2.78922749E-01;
  COFD[7915] = 1.24528579E-02;
  COFD[7916] = -1.69175892E+01;
  COFD[7917] = 4.11378655E+00;
  COFD[7918] = -3.27077608E-01;
  COFD[7919] = 1.45156838E-02;
  COFD[7920] = -1.91310793E+01;
  COFD[7921] = 4.86712577E+00;
  COFD[7922] = -4.17831941E-01;
  COFD[7923] = 1.81615845E-02;
  COFD[7924] = -1.95954924E+01;
  COFD[7925] = 4.98287158E+00;
  COFD[7926] = -4.30014729E-01;
  COFD[7927] = 1.85722259E-02;
  COFD[7928] = -1.74255139E+01;
  COFD[7929] = 4.30962284E+00;
  COFD[7930] = -3.51386735E-01;
  COFD[7931] = 1.55239786E-02;
  COFD[7932] = -1.61055556E+01;
  COFD[7933] = 3.79821467E+00;
  COFD[7934] = -2.86696917E-01;
  COFD[7935] = 1.27881871E-02;
  COFD[7936] = -1.99083190E+01;
  COFD[7937] = 4.89475553E+00;
  COFD[7938] = -3.86628956E-01;
  COFD[7939] = 1.53742544E-02;
  COFD[7940] = -1.99192769E+01;
  COFD[7941] = 4.89475553E+00;
  COFD[7942] = -3.86628956E-01;
  COFD[7943] = 1.53742544E-02;
  COFD[7944] = -1.79731337E+01;
  COFD[7945] = 4.61301162E+00;
  COFD[7946] = -3.89184048E-01;
  COFD[7947] = 1.71006222E-02;
  COFD[7948] = -1.95899835E+01;
  COFD[7949] = 4.98287158E+00;
  COFD[7950] = -4.30014729E-01;
  COFD[7951] = 1.85722259E-02;
  COFD[7952] = -1.95899835E+01;
  COFD[7953] = 4.98287158E+00;
  COFD[7954] = -4.30014729E-01;
  COFD[7955] = 1.85722259E-02;
  COFD[7956] = -1.95899835E+01;
  COFD[7957] = 4.98287158E+00;
  COFD[7958] = -4.30014729E-01;
  COFD[7959] = 1.85722259E-02;
  COFD[7960] = -1.95841624E+01;
  COFD[7961] = 4.98287158E+00;
  COFD[7962] = -4.30014729E-01;
  COFD[7963] = 1.85722259E-02;
  COFD[7964] = -1.68974643E+01;
  COFD[7965] = 4.11378655E+00;
  COFD[7966] = -3.27077608E-01;
  COFD[7967] = 1.45156838E-02;
  COFD[7968] = -1.79379541E+01;
  COFD[7969] = 4.49061160E+00;
  COFD[7970] = -3.73905084E-01;
  COFD[7971] = 1.64620749E-02;
  COFD[7972] = -2.01446226E+01;
  COFD[7973] = 5.03516244E+00;
  COFD[7974] = -4.33206320E-01;
  COFD[7975] = 1.85604611E-02;
  COFD[7976] = -2.01502287E+01;
  COFD[7977] = 5.03516244E+00;
  COFD[7978] = -4.33206320E-01;
  COFD[7979] = 1.85604611E-02;
  COFD[7980] = -2.03249919E+01;
  COFD[7981] = 5.07217478E+00;
  COFD[7982] = -4.21775859E-01;
  COFD[7983] = 1.73945008E-02;
  COFD[7984] = -2.03306066E+01;
  COFD[7985] = 5.07217478E+00;
  COFD[7986] = -4.21775859E-01;
  COFD[7987] = 1.73945008E-02;
  COFD[7988] = -1.96390516E+01;
  COFD[7989] = 5.08675981E+00;
  COFD[7990] = -4.33586606E-01;
  COFD[7991] = 1.83147314E-02;
  COFD[7992] = -1.58258690E+01;
  COFD[7993] = 3.87441160E+00;
  COFD[7994] = -2.96411944E-01;
  COFD[7995] = 1.32018011E-02;
  COFD[7996] = -1.76552961E+01;
  COFD[7997] = 4.39684215E+00;
  COFD[7998] = -3.62293569E-01;
  COFD[7999] = 1.59807448E-02;
  COFD[8000] = -1.98184334E+01;
  COFD[8001] = 5.03178087E+00;
  COFD[8002] = -4.33314055E-01;
  COFD[8003] = 1.85881203E-02;
  COFD[8004] = -1.99231893E+01;
  COFD[8005] = 5.03178087E+00;
  COFD[8006] = -4.33314055E-01;
  COFD[8007] = 1.85881203E-02;
  COFD[8008] = -1.99833115E+01;
  COFD[8009] = 5.03178087E+00;
  COFD[8010] = -4.33314055E-01;
  COFD[8011] = 1.85881203E-02;
  COFD[8012] = -1.84490849E+01;
  COFD[8013] = 4.46789337E+00;
  COFD[8014] = -3.71068329E-01;
  COFD[8015] = 1.63434655E-02;
  COFD[8016] = -1.98101606E+01;
  COFD[8017] = 5.03178087E+00;
  COFD[8018] = -4.33314055E-01;
  COFD[8019] = 1.85881203E-02;
  COFD[8020] = -1.99188521E+01;
  COFD[8021] = 5.03178087E+00;
  COFD[8022] = -4.33314055E-01;
  COFD[8023] = 1.85881203E-02;
  COFD[8024] = -1.79907687E+01;
  COFD[8025] = 4.35286258E+00;
  COFD[8026] = -3.56807680E-01;
  COFD[8027] = 1.57515479E-02;
  COFD[8028] = -1.98015145E+01;
  COFD[8029] = 5.03178087E+00;
  COFD[8030] = -4.33314055E-01;
  COFD[8031] = 1.85881203E-02;
  COFD[8032] = -1.74425467E+01;
  COFD[8033] = 4.21395656E+00;
  COFD[8034] = -3.39355503E-01;
  COFD[8035] = 1.50177298E-02;
  COFD[8036] = -1.68322727E+01;
  COFD[8037] = 4.07749999E+00;
  COFD[8038] = -3.22521584E-01;
  COFD[8039] = 1.43244419E-02;
  COFD[8040] = -2.06351848E+01;
  COFD[8041] = 5.10650228E+00;
  COFD[8042] = -4.34343731E-01;
  COFD[8043] = 1.82736154E-02;
  COFD[8044] = -2.05904025E+01;
  COFD[8045] = 5.10650228E+00;
  COFD[8046] = -4.34343731E-01;
  COFD[8047] = 1.82736154E-02;
  COFD[8048] = -2.05233034E+01;
  COFD[8049] = 5.10650228E+00;
  COFD[8050] = -4.34343731E-01;
  COFD[8051] = 1.82736154E-02;
  COFD[8052] = -1.91327069E+01;
  COFD[8053] = 4.28441944E+00;
  COFD[8054] = -2.83837281E-01;
  COFD[8055] = 9.95708986E-03;
  COFD[8056] = -2.01446226E+01;
  COFD[8057] = 5.03516244E+00;
  COFD[8058] = -4.33206320E-01;
  COFD[8059] = 1.85604611E-02;
  COFD[8060] = -2.01446226E+01;
  COFD[8061] = 5.03516244E+00;
  COFD[8062] = -4.33206320E-01;
  COFD[8063] = 1.85604611E-02;
  COFD[8064] = -1.64092143E+01;
  COFD[8065] = 4.24085297E+00;
  COFD[8066] = -3.42726080E-01;
  COFD[8067] = 1.51589637E-02;
  COFD[8068] = -1.86273360E+01;
  COFD[8069] = 5.07394969E+00;
  COFD[8070] = -4.23194769E-01;
  COFD[8071] = 1.75043529E-02;
  COFD[8072] = -1.94140750E+01;
  COFD[8073] = 4.98320638E+00;
  COFD[8074] = -4.30044977E-01;
  COFD[8075] = 1.85729853E-02;
  COFD[8076] = -2.02755394E+01;
  COFD[8077] = 5.07906191E+00;
  COFD[8078] = -4.34414251E-01;
  COFD[8079] = 1.84266796E-02;
  COFD[8080] = -1.94360147E+01;
  COFD[8081] = 4.98320638E+00;
  COFD[8082] = -4.30044977E-01;
  COFD[8083] = 1.85729853E-02;
  COFD[8084] = -1.48729550E+01;
  COFD[8085] = 2.30323591E+00;
  COFD[8086] = 2.16662124E-02;
  COFD[8087] = -5.22336631E-03;
  COFD[8088] = -2.02842857E+01;
  COFD[8089] = 5.07906191E+00;
  COFD[8090] = -4.34414251E-01;
  COFD[8091] = 1.84266796E-02;
  COFD[8092] = -2.02926557E+01;
  COFD[8093] = 5.07906191E+00;
  COFD[8094] = -4.34414251E-01;
  COFD[8095] = 1.84266796E-02;
  COFD[8096] = -1.91952674E+01;
  COFD[8097] = 4.90043912E+00;
  COFD[8098] = -4.21514331E-01;
  COFD[8099] = 1.82945399E-02;
  COFD[8100] = -1.93373731E+01;
  COFD[8101] = 4.98320638E+00;
  COFD[8102] = -4.30044977E-01;
  COFD[8103] = 1.85729853E-02;
  COFD[8104] = -2.03169092E+01;
  COFD[8105] = 5.07414515E+00;
  COFD[8106] = -4.23464178E-01;
  COFD[8107] = 1.75259967E-02;
  COFD[8108] = -2.03169092E+01;
  COFD[8109] = 5.07414515E+00;
  COFD[8110] = -4.23464178E-01;
  COFD[8111] = 1.75259967E-02;
  COFD[8112] = -2.03426978E+01;
  COFD[8113] = 5.07414515E+00;
  COFD[8114] = -4.23464178E-01;
  COFD[8115] = 1.75259967E-02;
  COFD[8116] = -2.03488077E+01;
  COFD[8117] = 5.07898162E+00;
  COFD[8118] = -4.24793212E-01;
  COFD[8119] = 1.76124459E-02;
  COFD[8120] = -2.01649794E+01;
  COFD[8121] = 5.05519080E+00;
  COFD[8122] = -4.33931429E-01;
  COFD[8123] = 1.85141040E-02;
  COFD[8124] = -2.00529843E+01;
  COFD[8125] = 4.61140261E+00;
  COFD[8126] = -3.37797240E-01;
  COFD[8127] = 1.27641497E-02;
  COFD[8128] = -1.64056971E+01;
  COFD[8129] = 2.82727026E+00;
  COFD[8130] = -5.72773227E-02;
  COFD[8131] = -1.36944552E-03;
  COFD[8132] = -1.64157275E+01;
  COFD[8133] = 2.82727026E+00;
  COFD[8134] = -5.72773227E-02;
  COFD[8135] = -1.36944552E-03;
  COFD[8136] = -1.76193985E+01;
  COFD[8137] = 3.39841561E+00;
  COFD[8138] = -1.44735575E-01;
  COFD[8139] = 2.95315491E-03;
  COFD[8140] = -1.76193985E+01;
  COFD[8141] = 3.39841561E+00;
  COFD[8142] = -1.44735575E-01;
  COFD[8143] = 2.95315491E-03;
  COFD[8144] = -1.66894290E+01;
  COFD[8145] = 2.94567828E+00;
  COFD[8146] = -7.52679679E-02;
  COFD[8147] = -4.84912570E-04;
  COFD[8148] = -2.03939502E+01;
  COFD[8149] = 4.85106931E+00;
  COFD[8150] = -3.78054916E-01;
  COFD[8151] = 1.48855026E-02;
  COFD[8152] = -2.04062322E+01;
  COFD[8153] = 4.85106931E+00;
  COFD[8154] = -3.78054916E-01;
  COFD[8155] = 1.48855026E-02;
  COFD[8156] = -2.04178740E+01;
  COFD[8157] = 4.85106931E+00;
  COFD[8158] = -3.78054916E-01;
  COFD[8159] = 1.48855026E-02;
  COFD[8160] = -1.95962852E+01;
  COFD[8161] = 4.38922184E+00;
  COFD[8162] = -3.00765764E-01;
  COFD[8163] = 1.08259157E-02;
  COFD[8164] = -1.99801012E+01;
  COFD[8165] = 4.55690386E+00;
  COFD[8166] = -3.28720255E-01;
  COFD[8167] = 1.22885411E-02;
  COFD[8168] = -1.99901105E+01;
  COFD[8169] = 4.55690386E+00;
  COFD[8170] = -3.28720255E-01;
  COFD[8171] = 1.22885411E-02;
  COFD[8172] = -2.03191749E+01;
  COFD[8173] = 5.07217478E+00;
  COFD[8174] = -4.21775859E-01;
  COFD[8175] = 1.73945008E-02;
  COFD[8176] = -1.75005137E+01;
  COFD[8177] = 3.26361908E+00;
  COFD[8178] = -1.23934890E-01;
  COFD[8179] = 1.91907747E-03;
  COFD[8180] = -1.75005137E+01;
  COFD[8181] = 3.26361908E+00;
  COFD[8182] = -1.23934890E-01;
  COFD[8183] = 1.91907747E-03;
  COFD[8184] = -1.92540023E+01;
  COFD[8185] = 4.90043912E+00;
  COFD[8186] = -4.21514331E-01;
  COFD[8187] = 1.82945399E-02;
  COFD[8188] = -1.93609014E+01;
  COFD[8189] = 4.98320638E+00;
  COFD[8190] = -4.30044977E-01;
  COFD[8191] = 1.85729853E-02;
  COFD[8192] = -1.93846322E+01;
  COFD[8193] = 4.98320638E+00;
  COFD[8194] = -4.30044977E-01;
  COFD[8195] = 1.85729853E-02;
  COFD[8196] = -1.63036263E+01;
  COFD[8197] = 2.95151802E+00;
  COFD[8198] = -7.61560729E-02;
  COFD[8199] = -4.41228651E-04;
  COFD[8200] = -1.96326272E+01;
  COFD[8201] = 4.90043912E+00;
  COFD[8202] = -4.21514331E-01;
  COFD[8203] = 1.82945399E-02;
  COFD[8204] = -2.01704625E+01;
  COFD[8205] = 5.05393232E+00;
  COFD[8206] = -4.33941169E-01;
  COFD[8207] = 1.85217364E-02;
  COFD[8208] = -2.04473177E+01;
  COFD[8209] = 4.88442906E+00;
  COFD[8210] = -3.84396005E-01;
  COFD[8211] = 1.52416584E-02;
  COFD[8212] = -2.02080037E+01;
  COFD[8213] = 4.69054487E+00;
  COFD[8214] = -3.51011795E-01;
  COFD[8215] = 1.34579254E-02;
  COFD[8216] = -2.03826373E+01;
  COFD[8217] = 5.09687716E+00;
  COFD[8218] = -4.34096685E-01;
  COFD[8219] = 1.83040328E-02;
  COFD[8220] = -1.97412791E+01;
  COFD[8221] = 4.94128114E+00;
  COFD[8222] = -4.25962403E-01;
  COFD[8223] = 1.84524254E-02;
  COFD[8224] = -1.53420365E+01;
  COFD[8225] = 2.32528407E+00;
  COFD[8226] = 1.83584096E-02;
  COFD[8227] = -5.06252594E-03;
  COFD[8228] = -1.53531009E+01;
  COFD[8229] = 2.32528407E+00;
  COFD[8230] = 1.83584096E-02;
  COFD[8231] = -5.06252594E-03;
  COFD[8232] = -2.03191996E+01;
  COFD[8233] = 5.07217478E+00;
  COFD[8234] = -4.21775859E-01;
  COFD[8235] = 1.73945008E-02;
  COFD[8236] = -2.02024259E+01;
  COFD[8237] = 4.69054487E+00;
  COFD[8238] = -3.51011795E-01;
  COFD[8239] = 1.34579254E-02;
  COFD[8240] = -2.02024259E+01;
  COFD[8241] = 4.69054487E+00;
  COFD[8242] = -3.51011795E-01;
  COFD[8243] = 1.34579254E-02;
  COFD[8244] = -2.02024259E+01;
  COFD[8245] = 4.69054487E+00;
  COFD[8246] = -3.51011795E-01;
  COFD[8247] = 1.34579254E-02;
  COFD[8248] = -2.01965328E+01;
  COFD[8249] = 4.69054487E+00;
  COFD[8250] = -3.51011795E-01;
  COFD[8251] = 1.34579254E-02;
  COFD[8252] = -2.01501358E+01;
  COFD[8253] = 5.05393232E+00;
  COFD[8254] = -4.33941169E-01;
  COFD[8255] = 1.85217364E-02;
  COFD[8256] = -2.05289615E+01;
  COFD[8257] = 5.09463426E+00;
  COFD[8258] = -4.28287057E-01;
  COFD[8259] = 1.78244410E-02;
  COFD[8260] = -2.01079804E+01;
  COFD[8261] = 4.47606207E+00;
  COFD[8262] = -3.15096463E-01;
  COFD[8263] = 1.15713778E-02;
  COFD[8264] = -2.01136566E+01;
  COFD[8265] = 4.47606207E+00;
  COFD[8266] = -3.15096463E-01;
  COFD[8267] = 1.15713778E-02;
  COFD[8268] = -1.75064025E+01;
  COFD[8269] = 3.26361908E+00;
  COFD[8270] = -1.23934890E-01;
  COFD[8271] = 1.91907747E-03;
  COFD[8272] = -1.75120874E+01;
  COFD[8273] = 3.26361908E+00;
  COFD[8274] = -1.23934890E-01;
  COFD[8275] = 1.91907747E-03;
  COFD[8276] = -1.85666995E+01;
  COFD[8277] = 4.02137393E+00;
  COFD[8278] = -2.42083837E-01;
  COFD[8279] = 7.83679093E-03;
  COFD[8280] = -1.94747941E+01;
  COFD[8281] = 4.98320638E+00;
  COFD[8282] = -4.30044977E-01;
  COFD[8283] = 1.85729853E-02;
  COFD[8284] = -2.04805693E+01;
  COFD[8285] = 5.11171581E+00;
  COFD[8286] = -4.33627257E-01;
  COFD[8287] = 1.81849251E-02;
  COFD[8288] = -1.98876388E+01;
  COFD[8289] = 4.50165765E+00;
  COFD[8290] = -3.19414908E-01;
  COFD[8291] = 1.17986762E-02;
  COFD[8292] = -1.99936772E+01;
  COFD[8293] = 4.50165765E+00;
  COFD[8294] = -3.19414908E-01;
  COFD[8295] = 1.17986762E-02;
  COFD[8296] = -2.00546683E+01;
  COFD[8297] = 4.50165765E+00;
  COFD[8298] = -3.19414908E-01;
  COFD[8299] = 1.17986762E-02;
  COFD[8300] = -2.10320415E+01;
  COFD[8301] = 5.10279987E+00;
  COFD[8302] = -4.30115943E-01;
  COFD[8303] = 1.79356096E-02;
  COFD[8304] = -1.98792758E+01;
  COFD[8305] = 4.50165765E+00;
  COFD[8306] = -3.19414908E-01;
  COFD[8307] = 1.17986762E-02;
  COFD[8308] = -1.99892814E+01;
  COFD[8309] = 4.50165765E+00;
  COFD[8310] = -3.19414908E-01;
  COFD[8311] = 1.17986762E-02;
  COFD[8312] = -2.08364818E+01;
  COFD[8313] = 5.10729990E+00;
  COFD[8314] = -4.34338922E-01;
  COFD[8315] = 1.82689512E-02;
  COFD[8316] = -1.98705370E+01;
  COFD[8317] = 4.50165765E+00;
  COFD[8318] = -3.19414908E-01;
  COFD[8319] = 1.17986762E-02;
  COFD[8320] = -2.05340116E+01;
  COFD[8321] = 5.08109570E+00;
  COFD[8322] = -4.34516901E-01;
  COFD[8323] = 1.84244384E-02;
  COFD[8324] = -2.01352847E+01;
  COFD[8325] = 5.04412150E+00;
  COFD[8326] = -4.33656353E-01;
  COFD[8327] = 1.85504386E-02;
  COFD[8328] = -1.90621649E+01;
  COFD[8329] = 3.86341155E+00;
  COFD[8330] = -2.17305404E-01;
  COFD[8331] = 6.58928178E-03;
  COFD[8332] = -1.90166789E+01;
  COFD[8333] = 3.86341155E+00;
  COFD[8334] = -2.17305404E-01;
  COFD[8335] = 6.58928178E-03;
  COFD[8336] = -1.89486382E+01;
  COFD[8337] = 3.86341155E+00;
  COFD[8338] = -2.17305404E-01;
  COFD[8339] = 6.58928178E-03;
  COFD[8340] = -1.22379584E+01;
  COFD[8341] = 7.53297911E-01;
  COFD[8342] = 2.51735820E-01;
  COFD[8343] = -1.62956231E-02;
  COFD[8344] = -2.01079804E+01;
  COFD[8345] = 4.47606207E+00;
  COFD[8346] = -3.15096463E-01;
  COFD[8347] = 1.15713778E-02;
  COFD[8348] = -2.01079804E+01;
  COFD[8349] = 4.47606207E+00;
  COFD[8350] = -3.15096463E-01;
  COFD[8351] = 1.15713778E-02;
  COFD[8352] = -1.64092143E+01;
  COFD[8353] = 4.24085297E+00;
  COFD[8354] = -3.42726080E-01;
  COFD[8355] = 1.51589637E-02;
  COFD[8356] = -1.86273360E+01;
  COFD[8357] = 5.07394969E+00;
  COFD[8358] = -4.23194769E-01;
  COFD[8359] = 1.75043529E-02;
  COFD[8360] = -1.94140750E+01;
  COFD[8361] = 4.98320638E+00;
  COFD[8362] = -4.30044977E-01;
  COFD[8363] = 1.85729853E-02;
  COFD[8364] = -2.02755394E+01;
  COFD[8365] = 5.07906191E+00;
  COFD[8366] = -4.34414251E-01;
  COFD[8367] = 1.84266796E-02;
  COFD[8368] = -1.94360147E+01;
  COFD[8369] = 4.98320638E+00;
  COFD[8370] = -4.30044977E-01;
  COFD[8371] = 1.85729853E-02;
  COFD[8372] = -1.48729550E+01;
  COFD[8373] = 2.30323591E+00;
  COFD[8374] = 2.16662124E-02;
  COFD[8375] = -5.22336631E-03;
  COFD[8376] = -2.02842857E+01;
  COFD[8377] = 5.07906191E+00;
  COFD[8378] = -4.34414251E-01;
  COFD[8379] = 1.84266796E-02;
  COFD[8380] = -2.02926557E+01;
  COFD[8381] = 5.07906191E+00;
  COFD[8382] = -4.34414251E-01;
  COFD[8383] = 1.84266796E-02;
  COFD[8384] = -1.91952674E+01;
  COFD[8385] = 4.90043912E+00;
  COFD[8386] = -4.21514331E-01;
  COFD[8387] = 1.82945399E-02;
  COFD[8388] = -1.93373731E+01;
  COFD[8389] = 4.98320638E+00;
  COFD[8390] = -4.30044977E-01;
  COFD[8391] = 1.85729853E-02;
  COFD[8392] = -2.03169092E+01;
  COFD[8393] = 5.07414515E+00;
  COFD[8394] = -4.23464178E-01;
  COFD[8395] = 1.75259967E-02;
  COFD[8396] = -2.03169092E+01;
  COFD[8397] = 5.07414515E+00;
  COFD[8398] = -4.23464178E-01;
  COFD[8399] = 1.75259967E-02;
  COFD[8400] = -2.03426978E+01;
  COFD[8401] = 5.07414515E+00;
  COFD[8402] = -4.23464178E-01;
  COFD[8403] = 1.75259967E-02;
  COFD[8404] = -2.03488077E+01;
  COFD[8405] = 5.07898162E+00;
  COFD[8406] = -4.24793212E-01;
  COFD[8407] = 1.76124459E-02;
  COFD[8408] = -2.01649794E+01;
  COFD[8409] = 5.05519080E+00;
  COFD[8410] = -4.33931429E-01;
  COFD[8411] = 1.85141040E-02;
  COFD[8412] = -2.00529843E+01;
  COFD[8413] = 4.61140261E+00;
  COFD[8414] = -3.37797240E-01;
  COFD[8415] = 1.27641497E-02;
  COFD[8416] = -1.64056971E+01;
  COFD[8417] = 2.82727026E+00;
  COFD[8418] = -5.72773227E-02;
  COFD[8419] = -1.36944552E-03;
  COFD[8420] = -1.64157275E+01;
  COFD[8421] = 2.82727026E+00;
  COFD[8422] = -5.72773227E-02;
  COFD[8423] = -1.36944552E-03;
  COFD[8424] = -1.76193985E+01;
  COFD[8425] = 3.39841561E+00;
  COFD[8426] = -1.44735575E-01;
  COFD[8427] = 2.95315491E-03;
  COFD[8428] = -1.76193985E+01;
  COFD[8429] = 3.39841561E+00;
  COFD[8430] = -1.44735575E-01;
  COFD[8431] = 2.95315491E-03;
  COFD[8432] = -1.66894290E+01;
  COFD[8433] = 2.94567828E+00;
  COFD[8434] = -7.52679679E-02;
  COFD[8435] = -4.84912570E-04;
  COFD[8436] = -2.03939502E+01;
  COFD[8437] = 4.85106931E+00;
  COFD[8438] = -3.78054916E-01;
  COFD[8439] = 1.48855026E-02;
  COFD[8440] = -2.04062322E+01;
  COFD[8441] = 4.85106931E+00;
  COFD[8442] = -3.78054916E-01;
  COFD[8443] = 1.48855026E-02;
  COFD[8444] = -2.04178740E+01;
  COFD[8445] = 4.85106931E+00;
  COFD[8446] = -3.78054916E-01;
  COFD[8447] = 1.48855026E-02;
  COFD[8448] = -1.95962852E+01;
  COFD[8449] = 4.38922184E+00;
  COFD[8450] = -3.00765764E-01;
  COFD[8451] = 1.08259157E-02;
  COFD[8452] = -1.99801012E+01;
  COFD[8453] = 4.55690386E+00;
  COFD[8454] = -3.28720255E-01;
  COFD[8455] = 1.22885411E-02;
  COFD[8456] = -1.99901105E+01;
  COFD[8457] = 4.55690386E+00;
  COFD[8458] = -3.28720255E-01;
  COFD[8459] = 1.22885411E-02;
  COFD[8460] = -2.03191749E+01;
  COFD[8461] = 5.07217478E+00;
  COFD[8462] = -4.21775859E-01;
  COFD[8463] = 1.73945008E-02;
  COFD[8464] = -1.75005137E+01;
  COFD[8465] = 3.26361908E+00;
  COFD[8466] = -1.23934890E-01;
  COFD[8467] = 1.91907747E-03;
  COFD[8468] = -1.75005137E+01;
  COFD[8469] = 3.26361908E+00;
  COFD[8470] = -1.23934890E-01;
  COFD[8471] = 1.91907747E-03;
  COFD[8472] = -1.92540023E+01;
  COFD[8473] = 4.90043912E+00;
  COFD[8474] = -4.21514331E-01;
  COFD[8475] = 1.82945399E-02;
  COFD[8476] = -1.93609014E+01;
  COFD[8477] = 4.98320638E+00;
  COFD[8478] = -4.30044977E-01;
  COFD[8479] = 1.85729853E-02;
  COFD[8480] = -1.93846322E+01;
  COFD[8481] = 4.98320638E+00;
  COFD[8482] = -4.30044977E-01;
  COFD[8483] = 1.85729853E-02;
  COFD[8484] = -1.63036263E+01;
  COFD[8485] = 2.95151802E+00;
  COFD[8486] = -7.61560729E-02;
  COFD[8487] = -4.41228651E-04;
  COFD[8488] = -1.96326272E+01;
  COFD[8489] = 4.90043912E+00;
  COFD[8490] = -4.21514331E-01;
  COFD[8491] = 1.82945399E-02;
  COFD[8492] = -2.01704625E+01;
  COFD[8493] = 5.05393232E+00;
  COFD[8494] = -4.33941169E-01;
  COFD[8495] = 1.85217364E-02;
  COFD[8496] = -2.04473177E+01;
  COFD[8497] = 4.88442906E+00;
  COFD[8498] = -3.84396005E-01;
  COFD[8499] = 1.52416584E-02;
  COFD[8500] = -2.02080037E+01;
  COFD[8501] = 4.69054487E+00;
  COFD[8502] = -3.51011795E-01;
  COFD[8503] = 1.34579254E-02;
  COFD[8504] = -2.03826373E+01;
  COFD[8505] = 5.09687716E+00;
  COFD[8506] = -4.34096685E-01;
  COFD[8507] = 1.83040328E-02;
  COFD[8508] = -1.97412791E+01;
  COFD[8509] = 4.94128114E+00;
  COFD[8510] = -4.25962403E-01;
  COFD[8511] = 1.84524254E-02;
  COFD[8512] = -1.53420365E+01;
  COFD[8513] = 2.32528407E+00;
  COFD[8514] = 1.83584096E-02;
  COFD[8515] = -5.06252594E-03;
  COFD[8516] = -1.53531009E+01;
  COFD[8517] = 2.32528407E+00;
  COFD[8518] = 1.83584096E-02;
  COFD[8519] = -5.06252594E-03;
  COFD[8520] = -2.03191996E+01;
  COFD[8521] = 5.07217478E+00;
  COFD[8522] = -4.21775859E-01;
  COFD[8523] = 1.73945008E-02;
  COFD[8524] = -2.02024259E+01;
  COFD[8525] = 4.69054487E+00;
  COFD[8526] = -3.51011795E-01;
  COFD[8527] = 1.34579254E-02;
  COFD[8528] = -2.02024259E+01;
  COFD[8529] = 4.69054487E+00;
  COFD[8530] = -3.51011795E-01;
  COFD[8531] = 1.34579254E-02;
  COFD[8532] = -2.02024259E+01;
  COFD[8533] = 4.69054487E+00;
  COFD[8534] = -3.51011795E-01;
  COFD[8535] = 1.34579254E-02;
  COFD[8536] = -2.01965328E+01;
  COFD[8537] = 4.69054487E+00;
  COFD[8538] = -3.51011795E-01;
  COFD[8539] = 1.34579254E-02;
  COFD[8540] = -2.01501358E+01;
  COFD[8541] = 5.05393232E+00;
  COFD[8542] = -4.33941169E-01;
  COFD[8543] = 1.85217364E-02;
  COFD[8544] = -2.05289615E+01;
  COFD[8545] = 5.09463426E+00;
  COFD[8546] = -4.28287057E-01;
  COFD[8547] = 1.78244410E-02;
  COFD[8548] = -2.01079804E+01;
  COFD[8549] = 4.47606207E+00;
  COFD[8550] = -3.15096463E-01;
  COFD[8551] = 1.15713778E-02;
  COFD[8552] = -2.01136566E+01;
  COFD[8553] = 4.47606207E+00;
  COFD[8554] = -3.15096463E-01;
  COFD[8555] = 1.15713778E-02;
  COFD[8556] = -1.75064025E+01;
  COFD[8557] = 3.26361908E+00;
  COFD[8558] = -1.23934890E-01;
  COFD[8559] = 1.91907747E-03;
  COFD[8560] = -1.75120874E+01;
  COFD[8561] = 3.26361908E+00;
  COFD[8562] = -1.23934890E-01;
  COFD[8563] = 1.91907747E-03;
  COFD[8564] = -1.85666995E+01;
  COFD[8565] = 4.02137393E+00;
  COFD[8566] = -2.42083837E-01;
  COFD[8567] = 7.83679093E-03;
  COFD[8568] = -1.94747941E+01;
  COFD[8569] = 4.98320638E+00;
  COFD[8570] = -4.30044977E-01;
  COFD[8571] = 1.85729853E-02;
  COFD[8572] = -2.04805693E+01;
  COFD[8573] = 5.11171581E+00;
  COFD[8574] = -4.33627257E-01;
  COFD[8575] = 1.81849251E-02;
  COFD[8576] = -1.98876388E+01;
  COFD[8577] = 4.50165765E+00;
  COFD[8578] = -3.19414908E-01;
  COFD[8579] = 1.17986762E-02;
  COFD[8580] = -1.99936772E+01;
  COFD[8581] = 4.50165765E+00;
  COFD[8582] = -3.19414908E-01;
  COFD[8583] = 1.17986762E-02;
  COFD[8584] = -2.00546683E+01;
  COFD[8585] = 4.50165765E+00;
  COFD[8586] = -3.19414908E-01;
  COFD[8587] = 1.17986762E-02;
  COFD[8588] = -2.10320415E+01;
  COFD[8589] = 5.10279987E+00;
  COFD[8590] = -4.30115943E-01;
  COFD[8591] = 1.79356096E-02;
  COFD[8592] = -1.98792758E+01;
  COFD[8593] = 4.50165765E+00;
  COFD[8594] = -3.19414908E-01;
  COFD[8595] = 1.17986762E-02;
  COFD[8596] = -1.99892814E+01;
  COFD[8597] = 4.50165765E+00;
  COFD[8598] = -3.19414908E-01;
  COFD[8599] = 1.17986762E-02;
  COFD[8600] = -2.08364818E+01;
  COFD[8601] = 5.10729990E+00;
  COFD[8602] = -4.34338922E-01;
  COFD[8603] = 1.82689512E-02;
  COFD[8604] = -1.98705370E+01;
  COFD[8605] = 4.50165765E+00;
  COFD[8606] = -3.19414908E-01;
  COFD[8607] = 1.17986762E-02;
  COFD[8608] = -2.05340116E+01;
  COFD[8609] = 5.08109570E+00;
  COFD[8610] = -4.34516901E-01;
  COFD[8611] = 1.84244384E-02;
  COFD[8612] = -2.01352847E+01;
  COFD[8613] = 5.04412150E+00;
  COFD[8614] = -4.33656353E-01;
  COFD[8615] = 1.85504386E-02;
  COFD[8616] = -1.90621649E+01;
  COFD[8617] = 3.86341155E+00;
  COFD[8618] = -2.17305404E-01;
  COFD[8619] = 6.58928178E-03;
  COFD[8620] = -1.90166789E+01;
  COFD[8621] = 3.86341155E+00;
  COFD[8622] = -2.17305404E-01;
  COFD[8623] = 6.58928178E-03;
  COFD[8624] = -1.89486382E+01;
  COFD[8625] = 3.86341155E+00;
  COFD[8626] = -2.17305404E-01;
  COFD[8627] = 6.58928178E-03;
  COFD[8628] = -1.22379584E+01;
  COFD[8629] = 7.53297911E-01;
  COFD[8630] = 2.51735820E-01;
  COFD[8631] = -1.62956231E-02;
  COFD[8632] = -2.01079804E+01;
  COFD[8633] = 4.47606207E+00;
  COFD[8634] = -3.15096463E-01;
  COFD[8635] = 1.15713778E-02;
  COFD[8636] = -2.01079804E+01;
  COFD[8637] = 4.47606207E+00;
  COFD[8638] = -3.15096463E-01;
  COFD[8639] = 1.15713778E-02;
  COFD[8640] = -1.14512279E+01;
  COFD[8641] = 2.45139089E+00;
  COFD[8642] = -1.08437807E-01;
  COFD[8643] = 4.90682837E-03;
  COFD[8644] = -1.40848690E+01;
  COFD[8645] = 3.70003870E+00;
  COFD[8646] = -2.74031258E-01;
  COFD[8647] = 1.22422674E-02;
  COFD[8648] = -1.38496362E+01;
  COFD[8649] = 3.13068087E+00;
  COFD[8650] = -2.00477755E-01;
  COFD[8651] = 9.07054904E-03;
  COFD[8652] = -1.49976437E+01;
  COFD[8653] = 3.43432294E+00;
  COFD[8654] = -2.40398689E-01;
  COFD[8655] = 1.08220935E-02;
  COFD[8656] = -1.38636649E+01;
  COFD[8657] = 3.13068087E+00;
  COFD[8658] = -2.00477755E-01;
  COFD[8659] = 9.07054904E-03;
  COFD[8660] = -1.92128459E+01;
  COFD[8661] = 5.04266002E+00;
  COFD[8662] = -4.33607391E-01;
  COFD[8663] = 1.85541793E-02;
  COFD[8664] = -1.50023146E+01;
  COFD[8665] = 3.43432294E+00;
  COFD[8666] = -2.40398689E-01;
  COFD[8667] = 1.08220935E-02;
  COFD[8668] = -1.50067489E+01;
  COFD[8669] = 3.43432294E+00;
  COFD[8670] = -2.40398689E-01;
  COFD[8671] = 1.08220935E-02;
  COFD[8672] = -1.36892793E+01;
  COFD[8673] = 3.03109250E+00;
  COFD[8674] = -1.87396261E-01;
  COFD[8675] = 8.49727012E-03;
  COFD[8676] = -1.37988770E+01;
  COFD[8677] = 3.13068087E+00;
  COFD[8678] = -2.00477755E-01;
  COFD[8679] = 9.07054904E-03;
  COFD[8680] = -1.56358316E+01;
  COFD[8681] = 3.69274034E+00;
  COFD[8682] = -2.73095123E-01;
  COFD[8683] = 1.22021663E-02;
  COFD[8684] = -1.56358316E+01;
  COFD[8685] = 3.69274034E+00;
  COFD[8686] = -2.73095123E-01;
  COFD[8687] = 1.22021663E-02;
  COFD[8688] = -1.56528675E+01;
  COFD[8689] = 3.69274034E+00;
  COFD[8690] = -2.73095123E-01;
  COFD[8691] = 1.22021663E-02;
  COFD[8692] = -1.56026345E+01;
  COFD[8693] = 3.67401276E+00;
  COFD[8694] = -2.70701727E-01;
  COFD[8695] = 1.21000401E-02;
  COFD[8696] = -1.47696913E+01;
  COFD[8697] = 3.33365140E+00;
  COFD[8698] = -2.27171003E-01;
  COFD[8699] = 1.02420392E-02;
  COFD[8700] = -1.74843025E+01;
  COFD[8701] = 4.30400174E+00;
  COFD[8702] = -3.50684203E-01;
  COFD[8703] = 1.54945855E-02;
  COFD[8704] = -1.93989038E+01;
  COFD[8705] = 4.99359610E+00;
  COFD[8706] = -4.30936629E-01;
  COFD[8707] = 1.85925060E-02;
  COFD[8708] = -1.94043985E+01;
  COFD[8709] = 4.99359610E+00;
  COFD[8710] = -4.30936629E-01;
  COFD[8711] = 1.85925060E-02;
  COFD[8712] = -1.90103880E+01;
  COFD[8713] = 4.86036401E+00;
  COFD[8714] = -4.17087154E-01;
  COFD[8715] = 1.81348258E-02;
  COFD[8716] = -1.90103880E+01;
  COFD[8717] = 4.86036401E+00;
  COFD[8718] = -4.17087154E-01;
  COFD[8719] = 1.81348258E-02;
  COFD[8720] = -1.93580217E+01;
  COFD[8721] = 4.97472819E+00;
  COFD[8722] = -4.29256126E-01;
  COFD[8723] = 1.85517927E-02;
  COFD[8724] = -1.70188229E+01;
  COFD[8725] = 4.13189883E+00;
  COFD[8726] = -3.29291449E-01;
  COFD[8727] = 1.46059118E-02;
  COFD[8728] = -1.70258169E+01;
  COFD[8729] = 4.13189883E+00;
  COFD[8730] = -3.29291449E-01;
  COFD[8731] = 1.46059118E-02;
  COFD[8732] = -1.70323779E+01;
  COFD[8733] = 4.13189883E+00;
  COFD[8734] = -3.29291449E-01;
  COFD[8735] = 1.46059118E-02;
  COFD[8736] = -1.79220588E+01;
  COFD[8737] = 4.46493404E+00;
  COFD[8738] = -3.70700744E-01;
  COFD[8739] = 1.63281819E-02;
  COFD[8740] = -1.76817785E+01;
  COFD[8741] = 4.34376344E+00;
  COFD[8742] = -3.55663855E-01;
  COFD[8743] = 1.57033899E-02;
  COFD[8744] = -1.76872595E+01;
  COFD[8745] = 4.34376344E+00;
  COFD[8746] = -3.55663855E-01;
  COFD[8747] = 1.57033899E-02;
  COFD[8748] = -1.55511974E+01;
  COFD[8749] = 3.73799764E+00;
  COFD[8750] = -2.78922749E-01;
  COFD[8751] = 1.24528579E-02;
  COFD[8752] = -1.92540023E+01;
  COFD[8753] = 4.90043912E+00;
  COFD[8754] = -4.21514331E-01;
  COFD[8755] = 1.82945399E-02;
  COFD[8756] = -1.92540023E+01;
  COFD[8757] = 4.90043912E+00;
  COFD[8758] = -4.21514331E-01;
  COFD[8759] = 1.82945399E-02;
  COFD[8760] = -1.37291886E+01;
  COFD[8761] = 3.03109250E+00;
  COFD[8762] = -1.87396261E-01;
  COFD[8763] = 8.49727012E-03;
  COFD[8764] = -1.38012243E+01;
  COFD[8765] = 3.13068087E+00;
  COFD[8766] = -2.00477755E-01;
  COFD[8767] = 9.07054904E-03;
  COFD[8768] = -1.38166407E+01;
  COFD[8769] = 3.13068087E+00;
  COFD[8770] = -2.00477755E-01;
  COFD[8771] = 9.07054904E-03;
  COFD[8772] = -1.90202792E+01;
  COFD[8773] = 4.97353903E+00;
  COFD[8774] = -4.29135734E-01;
  COFD[8775] = 1.85479821E-02;
  COFD[8776] = -1.40249878E+01;
  COFD[8777] = 3.03109250E+00;
  COFD[8778] = -1.87396261E-01;
  COFD[8779] = 8.49727012E-03;
  COFD[8780] = -1.47546482E+01;
  COFD[8781] = 3.32669990E+00;
  COFD[8782] = -2.26245876E-01;
  COFD[8783] = 1.02009489E-02;
  COFD[8784] = -1.68209263E+01;
  COFD[8785] = 4.08944620E+00;
  COFD[8786] = -3.24042480E-01;
  COFD[8787] = 1.43892310E-02;
  COFD[8788] = -1.73363480E+01;
  COFD[8789] = 4.24280031E+00;
  COFD[8790] = -3.42971692E-01;
  COFD[8791] = 1.51693290E-02;
  COFD[8792] = -1.52258472E+01;
  COFD[8793] = 3.51822289E+00;
  COFD[8794] = -2.51252276E-01;
  COFD[8795] = 1.12908198E-02;
  COFD[8796] = -1.41383842E+01;
  COFD[8797] = 3.07539186E+00;
  COFD[8798] = -1.93256663E-01;
  COFD[8799] = 8.75596004E-03;
  COFD[8800] = -1.96028714E+01;
  COFD[8801] = 5.04066185E+00;
  COFD[8802] = -4.33512682E-01;
  COFD[8803] = 1.85568949E-02;
  COFD[8804] = -1.96090464E+01;
  COFD[8805] = 5.04066185E+00;
  COFD[8806] = -4.33512682E-01;
  COFD[8807] = 1.85568949E-02;
  COFD[8808] = -1.55512098E+01;
  COFD[8809] = 3.73799764E+00;
  COFD[8810] = -2.78922749E-01;
  COFD[8811] = 1.24528579E-02;
  COFD[8812] = -1.73335838E+01;
  COFD[8813] = 4.24280031E+00;
  COFD[8814] = -3.42971692E-01;
  COFD[8815] = 1.51693290E-02;
  COFD[8816] = -1.73335838E+01;
  COFD[8817] = 4.24280031E+00;
  COFD[8818] = -3.42971692E-01;
  COFD[8819] = 1.51693290E-02;
  COFD[8820] = -1.73335838E+01;
  COFD[8821] = 4.24280031E+00;
  COFD[8822] = -3.42971692E-01;
  COFD[8823] = 1.51693290E-02;
  COFD[8824] = -1.73306464E+01;
  COFD[8825] = 4.24280031E+00;
  COFD[8826] = -3.42971692E-01;
  COFD[8827] = 1.51693290E-02;
  COFD[8828] = -1.47434595E+01;
  COFD[8829] = 3.32669990E+00;
  COFD[8830] = -2.26245876E-01;
  COFD[8831] = 1.02009489E-02;
  COFD[8832] = -1.55670532E+01;
  COFD[8833] = 3.64636403E+00;
  COFD[8834] = -2.67291065E-01;
  COFD[8835] = 1.19600168E-02;
  COFD[8836] = -1.80874969E+01;
  COFD[8837] = 4.40864461E+00;
  COFD[8838] = -3.63763109E-01;
  COFD[8839] = 1.60420204E-02;
  COFD[8840] = -1.80903086E+01;
  COFD[8841] = 4.40864461E+00;
  COFD[8842] = -3.63763109E-01;
  COFD[8843] = 1.60420204E-02;
  COFD[8844] = -1.92569372E+01;
  COFD[8845] = 4.90043912E+00;
  COFD[8846] = -4.21514331E-01;
  COFD[8847] = 1.82945399E-02;
  COFD[8848] = -1.92597540E+01;
  COFD[8849] = 4.90043912E+00;
  COFD[8850] = -4.21514331E-01;
  COFD[8851] = 1.82945399E-02;
  COFD[8852] = -1.81494013E+01;
  COFD[8853] = 4.65505575E+00;
  COFD[8854] = -3.94025226E-01;
  COFD[8855] = 1.72846389E-02;
  COFD[8856] = -1.38879136E+01;
  COFD[8857] = 3.13068087E+00;
  COFD[8858] = -2.00477755E-01;
  COFD[8859] = 9.07054904E-03;
  COFD[8860] = -1.53758740E+01;
  COFD[8861] = 3.58351281E+00;
  COFD[8862] = -2.59526521E-01;
  COFD[8863] = 1.16407007E-02;
  COFD[8864] = -1.77793918E+01;
  COFD[8865] = 4.38781144E+00;
  COFD[8866] = -3.61168991E-01;
  COFD[8867] = 1.59338380E-02;
  COFD[8868] = -1.78325317E+01;
  COFD[8869] = 4.38781144E+00;
  COFD[8870] = -3.61168991E-01;
  COFD[8871] = 1.59338380E-02;
  COFD[8872] = -1.78605562E+01;
  COFD[8873] = 4.38781144E+00;
  COFD[8874] = -3.61168991E-01;
  COFD[8875] = 1.59338380E-02;
  COFD[8876] = -1.59741136E+01;
  COFD[8877] = 3.63398790E+00;
  COFD[8878] = -2.65805155E-01;
  COFD[8879] = 1.19009007E-02;
  COFD[8880] = -1.77749619E+01;
  COFD[8881] = 4.38781144E+00;
  COFD[8882] = -3.61168991E-01;
  COFD[8883] = 1.59338380E-02;
  COFD[8884] = -1.78304404E+01;
  COFD[8885] = 4.38781144E+00;
  COFD[8886] = -3.61168991E-01;
  COFD[8887] = 1.59338380E-02;
  COFD[8888] = -1.56401388E+01;
  COFD[8889] = 3.55169733E+00;
  COFD[8890] = -2.55531147E-01;
  COFD[8891] = 1.14733967E-02;
  COFD[8892] = -1.77702956E+01;
  COFD[8893] = 4.38781144E+00;
  COFD[8894] = -3.61168991E-01;
  COFD[8895] = 1.59338380E-02;
  COFD[8896] = -1.52192806E+01;
  COFD[8897] = 3.44020470E+00;
  COFD[8898] = -2.41162835E-01;
  COFD[8899] = 1.08552213E-02;
  COFD[8900] = -1.46565449E+01;
  COFD[8901] = 3.28502534E+00;
  COFD[8902] = -2.20705925E-01;
  COFD[8903] = 9.95522352E-03;
  COFD[8904] = -1.89651385E+01;
  COFD[8905] = 4.70202289E+00;
  COFD[8906] = -3.99204946E-01;
  COFD[8907] = 1.74707832E-02;
  COFD[8908] = -1.89451831E+01;
  COFD[8909] = 4.70202289E+00;
  COFD[8910] = -3.99204946E-01;
  COFD[8911] = 1.74707832E-02;
  COFD[8912] = -1.89134193E+01;
  COFD[8913] = 4.70202289E+00;
  COFD[8914] = -3.99204946E-01;
  COFD[8915] = 1.74707832E-02;
  COFD[8916] = -2.02011358E+01;
  COFD[8917] = 5.08054289E+00;
  COFD[8918] = -4.25157431E-01;
  COFD[8919] = 1.76349030E-02;
  COFD[8920] = -1.80874969E+01;
  COFD[8921] = 4.40864461E+00;
  COFD[8922] = -3.63763109E-01;
  COFD[8923] = 1.60420204E-02;
  COFD[8924] = -1.80874969E+01;
  COFD[8925] = 4.40864461E+00;
  COFD[8926] = -3.63763109E-01;
  COFD[8927] = 1.60420204E-02;
  COFD[8928] = -1.15001705E+01;
  COFD[8929] = 2.55800063E+00;
  COFD[8930] = -1.23269730E-01;
  COFD[8931] = 5.59599793E-03;
  COFD[8932] = -1.41870843E+01;
  COFD[8933] = 3.83461834E+00;
  COFD[8934] = -2.91346712E-01;
  COFD[8935] = 1.29864869E-02;
  COFD[8936] = -1.38792676E+01;
  COFD[8937] = 3.21909911E+00;
  COFD[8938] = -2.11850626E-01;
  COFD[8939] = 9.55839253E-03;
  COFD[8940] = -1.51196508E+01;
  COFD[8941] = 3.54673926E+00;
  COFD[8942] = -2.54900443E-01;
  COFD[8943] = 1.14466286E-02;
  COFD[8944] = -1.38938248E+01;
  COFD[8945] = 3.21909911E+00;
  COFD[8946] = -2.11850626E-01;
  COFD[8947] = 9.55839253E-03;
  COFD[8948] = -1.91513185E+01;
  COFD[8949] = 5.07198371E+00;
  COFD[8950] = -4.34157597E-01;
  COFD[8951] = 1.84430801E-02;
  COFD[8952] = -1.51245516E+01;
  COFD[8953] = 3.54673926E+00;
  COFD[8954] = -2.54900443E-01;
  COFD[8955] = 1.14466286E-02;
  COFD[8956] = -1.51292063E+01;
  COFD[8957] = 3.54673926E+00;
  COFD[8958] = -2.54900443E-01;
  COFD[8959] = 1.14466286E-02;
  COFD[8960] = -1.37599846E+01;
  COFD[8961] = 3.13068087E+00;
  COFD[8962] = -2.00477755E-01;
  COFD[8963] = 9.07054904E-03;
  COFD[8964] = -1.38267197E+01;
  COFD[8965] = 3.21909911E+00;
  COFD[8966] = -2.11850626E-01;
  COFD[8967] = 9.55839253E-03;
  COFD[8968] = -1.58175311E+01;
  COFD[8969] = 3.82653625E+00;
  COFD[8970] = -2.90317972E-01;
  COFD[8971] = 1.29427670E-02;
  COFD[8972] = -1.58175311E+01;
  COFD[8973] = 3.82653625E+00;
  COFD[8974] = -2.90317972E-01;
  COFD[8975] = 1.29427670E-02;
  COFD[8976] = -1.58351697E+01;
  COFD[8977] = 3.82653625E+00;
  COFD[8978] = -2.90317972E-01;
  COFD[8979] = 1.29427670E-02;
  COFD[8980] = -1.57761479E+01;
  COFD[8981] = 3.80482327E+00;
  COFD[8982] = -2.87543922E-01;
  COFD[8983] = 1.28244459E-02;
  COFD[8984] = -1.49250678E+01;
  COFD[8985] = 3.45922008E+00;
  COFD[8986] = -2.43647140E-01;
  COFD[8987] = 1.09635979E-02;
  COFD[8988] = -1.76783701E+01;
  COFD[8989] = 4.43481404E+00;
  COFD[8990] = -3.66974600E-01;
  COFD[8991] = 1.61738468E-02;
  COFD[8992] = -1.93994552E+01;
  COFD[8993] = 5.03423702E+00;
  COFD[8994] = -4.33220473E-01;
  COFD[8995] = 1.85667112E-02;
  COFD[8996] = -1.94052119E+01;
  COFD[8997] = 5.03423702E+00;
  COFD[8998] = -4.33220473E-01;
  COFD[8999] = 1.85667112E-02;
  COFD[9000] = -1.91305719E+01;
  COFD[9001] = 4.95351632E+00;
  COFD[9002] = -4.27130446E-01;
  COFD[9003] = 1.84856443E-02;
  COFD[9004] = -1.91305719E+01;
  COFD[9005] = 4.95351632E+00;
  COFD[9006] = -4.27130446E-01;
  COFD[9007] = 1.84856443E-02;
  COFD[9008] = -1.93885967E+01;
  COFD[9009] = 5.02805304E+00;
  COFD[9010] = -4.33407830E-01;
  COFD[9011] = 1.86164117E-02;
  COFD[9012] = -1.71920854E+01;
  COFD[9013] = 4.25245988E+00;
  COFD[9014] = -3.44189784E-01;
  COFD[9015] = 1.52207255E-02;
  COFD[9016] = -1.71993963E+01;
  COFD[9017] = 4.25245988E+00;
  COFD[9018] = -3.44189784E-01;
  COFD[9019] = 1.52207255E-02;
  COFD[9020] = -1.72062588E+01;
  COFD[9021] = 4.25245988E+00;
  COFD[9022] = -3.44189784E-01;
  COFD[9023] = 1.52207255E-02;
  COFD[9024] = -1.81595650E+01;
  COFD[9025] = 4.61134661E+00;
  COFD[9026] = -3.88986112E-01;
  COFD[9027] = 1.70927982E-02;
  COFD[9028] = -1.78835470E+01;
  COFD[9029] = 4.47278815E+00;
  COFD[9030] = -3.71676557E-01;
  COFD[9031] = 1.63687643E-02;
  COFD[9032] = -1.78892896E+01;
  COFD[9033] = 4.47278815E+00;
  COFD[9034] = -3.71676557E-01;
  COFD[9035] = 1.63687643E-02;
  COFD[9036] = -1.57040858E+01;
  COFD[9037] = 3.87441160E+00;
  COFD[9038] = -2.96411944E-01;
  COFD[9039] = 1.32018011E-02;
  COFD[9040] = -1.93609014E+01;
  COFD[9041] = 4.98320638E+00;
  COFD[9042] = -4.30044977E-01;
  COFD[9043] = 1.85729853E-02;
  COFD[9044] = -1.93609014E+01;
  COFD[9045] = 4.98320638E+00;
  COFD[9046] = -4.30044977E-01;
  COFD[9047] = 1.85729853E-02;
  COFD[9048] = -1.38012243E+01;
  COFD[9049] = 3.13068087E+00;
  COFD[9050] = -2.00477755E-01;
  COFD[9051] = 9.07054904E-03;
  COFD[9052] = -1.38262660E+01;
  COFD[9053] = 3.21909911E+00;
  COFD[9054] = -2.11850626E-01;
  COFD[9055] = 9.55839253E-03;
  COFD[9056] = -1.38422461E+01;
  COFD[9057] = 3.21909911E+00;
  COFD[9058] = -2.11850626E-01;
  COFD[9059] = 9.55839253E-03;
  COFD[9060] = -1.90239540E+01;
  COFD[9061] = 5.02767971E+00;
  COFD[9062] = -4.33406285E-01;
  COFD[9063] = 1.86183022E-02;
  COFD[9064] = -1.41184147E+01;
  COFD[9065] = 3.13068087E+00;
  COFD[9066] = -2.00477755E-01;
  COFD[9067] = 9.07054904E-03;
  COFD[9068] = -1.49110142E+01;
  COFD[9069] = 3.45291069E+00;
  COFD[9070] = -2.42822180E-01;
  COFD[9071] = 1.09275752E-02;
  COFD[9072] = -1.69540244E+01;
  COFD[9073] = 4.19909678E+00;
  COFD[9074] = -3.37493433E-01;
  COFD[9075] = 1.49397054E-02;
  COFD[9076] = -1.75488694E+01;
  COFD[9077] = 4.38093272E+00;
  COFD[9078] = -3.60316345E-01;
  COFD[9079] = 1.58984540E-02;
  COFD[9080] = -1.53164220E+01;
  COFD[9081] = 3.61618043E+00;
  COFD[9082] = -2.63626979E-01;
  COFD[9083] = 1.18123303E-02;
  COFD[9084] = -1.42236285E+01;
  COFD[9085] = 3.17062703E+00;
  COFD[9086] = -2.05656056E-01;
  COFD[9087] = 9.29447288E-03;
  COFD[9088] = -1.95813421E+01;
  COFD[9089] = 5.07016932E+00;
  COFD[9090] = -4.34085095E-01;
  COFD[9091] = 1.84466394E-02;
  COFD[9092] = -1.95878046E+01;
  COFD[9093] = 5.07016932E+00;
  COFD[9094] = -4.34085095E-01;
  COFD[9095] = 1.84466394E-02;
  COFD[9096] = -1.57040988E+01;
  COFD[9097] = 3.87441160E+00;
  COFD[9098] = -2.96411944E-01;
  COFD[9099] = 1.32018011E-02;
  COFD[9100] = -1.75459573E+01;
  COFD[9101] = 4.38093272E+00;
  COFD[9102] = -3.60316345E-01;
  COFD[9103] = 1.58984540E-02;
  COFD[9104] = -1.75459573E+01;
  COFD[9105] = 4.38093272E+00;
  COFD[9106] = -3.60316345E-01;
  COFD[9107] = 1.58984540E-02;
  COFD[9108] = -1.75459573E+01;
  COFD[9109] = 4.38093272E+00;
  COFD[9110] = -3.60316345E-01;
  COFD[9111] = 1.58984540E-02;
  COFD[9112] = -1.75428637E+01;
  COFD[9113] = 4.38093272E+00;
  COFD[9114] = -3.60316345E-01;
  COFD[9115] = 1.58984540E-02;
  COFD[9116] = -1.48992951E+01;
  COFD[9117] = 3.45291069E+00;
  COFD[9118] = -2.42822180E-01;
  COFD[9119] = 1.09275752E-02;
  COFD[9120] = -1.56979638E+01;
  COFD[9121] = 3.76178392E+00;
  COFD[9122] = -2.82003508E-01;
  COFD[9123] = 1.25861906E-02;
  COFD[9124] = -1.83343082E+01;
  COFD[9125] = 4.54835769E+00;
  COFD[9126] = -3.81194036E-01;
  COFD[9127] = 1.67703153E-02;
  COFD[9128] = -1.83372705E+01;
  COFD[9129] = 4.54835769E+00;
  COFD[9130] = -3.81194036E-01;
  COFD[9131] = 1.67703153E-02;
  COFD[9132] = -1.93639924E+01;
  COFD[9133] = 4.98320638E+00;
  COFD[9134] = -4.30044977E-01;
  COFD[9135] = 1.85729853E-02;
  COFD[9136] = -1.93669599E+01;
  COFD[9137] = 4.98320638E+00;
  COFD[9138] = -4.30044977E-01;
  COFD[9139] = 1.85729853E-02;
  COFD[9140] = -1.82273800E+01;
  COFD[9141] = 4.74200288E+00;
  COFD[9142] = -4.03492976E-01;
  COFD[9143] = 1.76186851E-02;
  COFD[9144] = -1.39190240E+01;
  COFD[9145] = 3.21909911E+00;
  COFD[9146] = -2.11850626E-01;
  COFD[9147] = 9.55839253E-03;
  COFD[9148] = -1.54365722E+01;
  COFD[9149] = 3.66997726E+00;
  COFD[9150] = -2.70186616E-01;
  COFD[9151] = 1.20780906E-02;
  COFD[9152] = -1.79942394E+01;
  COFD[9153] = 4.52327527E+00;
  COFD[9154] = -3.78029305E-01;
  COFD[9155] = 1.66365566E-02;
  COFD[9156] = -1.80501869E+01;
  COFD[9157] = 4.52327527E+00;
  COFD[9158] = -3.78029305E-01;
  COFD[9159] = 1.66365566E-02;
  COFD[9160] = -1.80798237E+01;
  COFD[9161] = 4.52327527E+00;
  COFD[9162] = -3.78029305E-01;
  COFD[9163] = 1.66365566E-02;
  COFD[9164] = -1.61210687E+01;
  COFD[9165] = 3.73914304E+00;
  COFD[9166] = -2.79071053E-01;
  COFD[9167] = 1.24592731E-02;
  COFD[9168] = -1.79895893E+01;
  COFD[9169] = 4.52327527E+00;
  COFD[9170] = -3.78029305E-01;
  COFD[9171] = 1.66365566E-02;
  COFD[9172] = -1.80479791E+01;
  COFD[9173] = 4.52327527E+00;
  COFD[9174] = -3.78029305E-01;
  COFD[9175] = 1.66365566E-02;
  COFD[9176] = -1.57411013E+01;
  COFD[9177] = 3.64178450E+00;
  COFD[9178] = -2.66740517E-01;
  COFD[9179] = 1.19380786E-02;
  COFD[9180] = -1.79846934E+01;
  COFD[9181] = 4.52327527E+00;
  COFD[9182] = -3.78029305E-01;
  COFD[9183] = 1.66365566E-02;
  COFD[9184] = -1.53574475E+01;
  COFD[9185] = 3.55175721E+00;
  COFD[9186] = -2.55538703E-01;
  COFD[9187] = 1.14737147E-02;
  COFD[9188] = -1.48245359E+01;
  COFD[9189] = 3.41648755E+00;
  COFD[9190] = -2.38096267E-01;
  COFD[9191] = 1.07229875E-02;
  COFD[9192] = -1.90976492E+01;
  COFD[9193] = 4.78666646E+00;
  COFD[9194] = -4.08190059E-01;
  COFD[9195] = 1.77758369E-02;
  COFD[9196] = -1.90764988E+01;
  COFD[9197] = 4.78666646E+00;
  COFD[9198] = -4.08190059E-01;
  COFD[9199] = 1.77758369E-02;
  COFD[9200] = -1.90429339E+01;
  COFD[9201] = 4.78666646E+00;
  COFD[9202] = -4.08190059E-01;
  COFD[9203] = 1.77758369E-02;
  COFD[9204] = -2.00985757E+01;
  COFD[9205] = 5.06537899E+00;
  COFD[9206] = -4.19068559E-01;
  COFD[9207] = 1.72031928E-02;
  COFD[9208] = -1.83343082E+01;
  COFD[9209] = 4.54835769E+00;
  COFD[9210] = -3.81194036E-01;
  COFD[9211] = 1.67703153E-02;
  COFD[9212] = -1.83343082E+01;
  COFD[9213] = 4.54835769E+00;
  COFD[9214] = -3.81194036E-01;
  COFD[9215] = 1.67703153E-02;
  COFD[9216] = -1.15039079E+01;
  COFD[9217] = 2.55800063E+00;
  COFD[9218] = -1.23269730E-01;
  COFD[9219] = 5.59599793E-03;
  COFD[9220] = -1.41890671E+01;
  COFD[9221] = 3.83461834E+00;
  COFD[9222] = -2.91346712E-01;
  COFD[9223] = 1.29864869E-02;
  COFD[9224] = -1.38957631E+01;
  COFD[9225] = 3.21909911E+00;
  COFD[9226] = -2.11850626E-01;
  COFD[9227] = 9.55839253E-03;
  COFD[9228] = -1.51415314E+01;
  COFD[9229] = 3.54673926E+00;
  COFD[9230] = -2.54900443E-01;
  COFD[9231] = 1.14466286E-02;
  COFD[9232] = -1.39108160E+01;
  COFD[9233] = 3.21909911E+00;
  COFD[9234] = -2.11850626E-01;
  COFD[9235] = 9.55839253E-03;
  COFD[9236] = -1.92283060E+01;
  COFD[9237] = 4.81238763E+00;
  COFD[9238] = -3.71292840E-01;
  COFD[9239] = 1.45213046E-02;
  COFD[9240] = -1.51466526E+01;
  COFD[9241] = 3.54673926E+00;
  COFD[9242] = -2.54900443E-01;
  COFD[9243] = 1.14466286E-02;
  COFD[9244] = -1.51515186E+01;
  COFD[9245] = 3.54673926E+00;
  COFD[9246] = -2.54900443E-01;
  COFD[9247] = 1.14466286E-02;
  COFD[9248] = -1.37741630E+01;
  COFD[9249] = 3.13068087E+00;
  COFD[9250] = -2.00477755E-01;
  COFD[9251] = 9.07054904E-03;
  COFD[9252] = -1.38415450E+01;
  COFD[9253] = 3.21909911E+00;
  COFD[9254] = -2.11850626E-01;
  COFD[9255] = 9.55839253E-03;
  COFD[9256] = -1.58329590E+01;
  COFD[9257] = 3.82653625E+00;
  COFD[9258] = -2.90317972E-01;
  COFD[9259] = 1.29427670E-02;
  COFD[9260] = -1.58329590E+01;
  COFD[9261] = 3.82653625E+00;
  COFD[9262] = -2.90317972E-01;
  COFD[9263] = 1.29427670E-02;
  COFD[9264] = -1.58511605E+01;
  COFD[9265] = 3.82653625E+00;
  COFD[9266] = -2.90317972E-01;
  COFD[9267] = 1.29427670E-02;
  COFD[9268] = -1.57926657E+01;
  COFD[9269] = 3.80482327E+00;
  COFD[9270] = -2.87543922E-01;
  COFD[9271] = 1.28244459E-02;
  COFD[9272] = -1.49459765E+01;
  COFD[9273] = 3.45922008E+00;
  COFD[9274] = -2.43647140E-01;
  COFD[9275] = 1.09635979E-02;
  COFD[9276] = -1.77023910E+01;
  COFD[9277] = 4.43481404E+00;
  COFD[9278] = -3.66974600E-01;
  COFD[9279] = 1.61738468E-02;
  COFD[9280] = -1.94206260E+01;
  COFD[9281] = 5.03423702E+00;
  COFD[9282] = -4.33220473E-01;
  COFD[9283] = 1.85667112E-02;
  COFD[9284] = -1.94266332E+01;
  COFD[9285] = 5.03423702E+00;
  COFD[9286] = -4.33220473E-01;
  COFD[9287] = 1.85667112E-02;
  COFD[9288] = -1.96107259E+01;
  COFD[9289] = 5.05906345E+00;
  COFD[9290] = -4.33860563E-01;
  COFD[9291] = 1.84871938E-02;
  COFD[9292] = -1.96107259E+01;
  COFD[9293] = 5.05906345E+00;
  COFD[9294] = -4.33860563E-01;
  COFD[9295] = 1.84871938E-02;
  COFD[9296] = -1.94104872E+01;
  COFD[9297] = 5.02805304E+00;
  COFD[9298] = -4.33407830E-01;
  COFD[9299] = 1.86164117E-02;
  COFD[9300] = -1.72121431E+01;
  COFD[9301] = 4.25245988E+00;
  COFD[9302] = -3.44189784E-01;
  COFD[9303] = 1.52207255E-02;
  COFD[9304] = -1.72197555E+01;
  COFD[9305] = 4.25245988E+00;
  COFD[9306] = -3.44189784E-01;
  COFD[9307] = 1.52207255E-02;
  COFD[9308] = -1.72269053E+01;
  COFD[9309] = 4.25245988E+00;
  COFD[9310] = -3.44189784E-01;
  COFD[9311] = 1.52207255E-02;
  COFD[9312] = -1.81804854E+01;
  COFD[9313] = 4.61134661E+00;
  COFD[9314] = -3.88986112E-01;
  COFD[9315] = 1.70927982E-02;
  COFD[9316] = -1.79047290E+01;
  COFD[9317] = 4.47278815E+00;
  COFD[9318] = -3.71676557E-01;
  COFD[9319] = 1.63687643E-02;
  COFD[9320] = -1.79107215E+01;
  COFD[9321] = 4.47278815E+00;
  COFD[9322] = -3.71676557E-01;
  COFD[9323] = 1.63687643E-02;
  COFD[9324] = -1.57276605E+01;
  COFD[9325] = 3.87441160E+00;
  COFD[9326] = -2.96411944E-01;
  COFD[9327] = 1.32018011E-02;
  COFD[9328] = -1.93846322E+01;
  COFD[9329] = 4.98320638E+00;
  COFD[9330] = -4.30044977E-01;
  COFD[9331] = 1.85729853E-02;
  COFD[9332] = -1.93846322E+01;
  COFD[9333] = 4.98320638E+00;
  COFD[9334] = -4.30044977E-01;
  COFD[9335] = 1.85729853E-02;
  COFD[9336] = -1.38166407E+01;
  COFD[9337] = 3.13068087E+00;
  COFD[9338] = -2.00477755E-01;
  COFD[9339] = 9.07054904E-03;
  COFD[9340] = -1.38422461E+01;
  COFD[9341] = 3.21909911E+00;
  COFD[9342] = -2.11850626E-01;
  COFD[9343] = 9.55839253E-03;
  COFD[9344] = -1.38587537E+01;
  COFD[9345] = 3.21909911E+00;
  COFD[9346] = -2.11850626E-01;
  COFD[9347] = 9.55839253E-03;
  COFD[9348] = -1.95535935E+01;
  COFD[9349] = 5.11266716E+00;
  COFD[9350] = -4.33148554E-01;
  COFD[9351] = 1.81394117E-02;
  COFD[9352] = -1.41395866E+01;
  COFD[9353] = 3.13068087E+00;
  COFD[9354] = -2.00477755E-01;
  COFD[9355] = 9.07054904E-03;
  COFD[9356] = -1.49324307E+01;
  COFD[9357] = 3.45291069E+00;
  COFD[9358] = -2.42822180E-01;
  COFD[9359] = 1.09275752E-02;
  COFD[9360] = -1.69783200E+01;
  COFD[9361] = 4.19909678E+00;
  COFD[9362] = -3.37493433E-01;
  COFD[9363] = 1.49397054E-02;
  COFD[9364] = -1.75728909E+01;
  COFD[9365] = 4.38093272E+00;
  COFD[9366] = -3.60316345E-01;
  COFD[9367] = 1.58984540E-02;
  COFD[9368] = -1.53380783E+01;
  COFD[9369] = 3.61618043E+00;
  COFD[9370] = -2.63626979E-01;
  COFD[9371] = 1.18123303E-02;
  COFD[9372] = -1.42439819E+01;
  COFD[9373] = 3.17062703E+00;
  COFD[9374] = -2.05656056E-01;
  COFD[9375] = 9.29447288E-03;
  COFD[9376] = -1.96019830E+01;
  COFD[9377] = 5.07016932E+00;
  COFD[9378] = -4.34085095E-01;
  COFD[9379] = 1.84466394E-02;
  COFD[9380] = -1.96087197E+01;
  COFD[9381] = 5.07016932E+00;
  COFD[9382] = -4.34085095E-01;
  COFD[9383] = 1.84466394E-02;
  COFD[9384] = -1.57276742E+01;
  COFD[9385] = 3.87441160E+00;
  COFD[9386] = -2.96411944E-01;
  COFD[9387] = 1.32018011E-02;
  COFD[9388] = -1.75698359E+01;
  COFD[9389] = 4.38093272E+00;
  COFD[9390] = -3.60316345E-01;
  COFD[9391] = 1.58984540E-02;
  COFD[9392] = -1.75698359E+01;
  COFD[9393] = 4.38093272E+00;
  COFD[9394] = -3.60316345E-01;
  COFD[9395] = 1.58984540E-02;
  COFD[9396] = -1.75698359E+01;
  COFD[9397] = 4.38093272E+00;
  COFD[9398] = -3.60316345E-01;
  COFD[9399] = 1.58984540E-02;
  COFD[9400] = -1.75665915E+01;
  COFD[9401] = 4.38093272E+00;
  COFD[9402] = -3.60316345E-01;
  COFD[9403] = 1.58984540E-02;
  COFD[9404] = -1.49202049E+01;
  COFD[9405] = 3.45291069E+00;
  COFD[9406] = -2.42822180E-01;
  COFD[9407] = 1.09275752E-02;
  COFD[9408] = -1.57213652E+01;
  COFD[9409] = 3.76178392E+00;
  COFD[9410] = -2.82003508E-01;
  COFD[9411] = 1.25861906E-02;
  COFD[9412] = -1.83581962E+01;
  COFD[9413] = 4.54835769E+00;
  COFD[9414] = -3.81194036E-01;
  COFD[9415] = 1.67703153E-02;
  COFD[9416] = -1.83613039E+01;
  COFD[9417] = 4.54835769E+00;
  COFD[9418] = -3.81194036E-01;
  COFD[9419] = 1.67703153E-02;
  COFD[9420] = -1.93878739E+01;
  COFD[9421] = 4.98320638E+00;
  COFD[9422] = -4.30044977E-01;
  COFD[9423] = 1.85729853E-02;
  COFD[9424] = -1.93909871E+01;
  COFD[9425] = 4.98320638E+00;
  COFD[9426] = -4.30044977E-01;
  COFD[9427] = 1.85729853E-02;
  COFD[9428] = -1.94985258E+01;
  COFD[9429] = 5.08337268E+00;
  COFD[9430] = -4.34327974E-01;
  COFD[9431] = 1.83960175E-02;
  COFD[9432] = -1.39369094E+01;
  COFD[9433] = 3.21909911E+00;
  COFD[9434] = -2.11850626E-01;
  COFD[9435] = 9.55839253E-03;
  COFD[9436] = -1.54596419E+01;
  COFD[9437] = 3.66997726E+00;
  COFD[9438] = -2.70186616E-01;
  COFD[9439] = 1.20780906E-02;
  COFD[9440] = -1.87677197E+01;
  COFD[9441] = 4.76845694E+00;
  COFD[9442] = -4.06130886E-01;
  COFD[9443] = 1.76992366E-02;
  COFD[9444] = -1.88263765E+01;
  COFD[9445] = 4.76845694E+00;
  COFD[9446] = -4.06130886E-01;
  COFD[9447] = 1.76992366E-02;
  COFD[9448] = -1.88575829E+01;
  COFD[9449] = 4.76845694E+00;
  COFD[9450] = -4.06130886E-01;
  COFD[9451] = 1.76992366E-02;
  COFD[9452] = -1.61486879E+01;
  COFD[9453] = 3.73914304E+00;
  COFD[9454] = -2.79071053E-01;
  COFD[9455] = 1.24592731E-02;
  COFD[9456] = -1.87628584E+01;
  COFD[9457] = 4.76845694E+00;
  COFD[9458] = -4.06130886E-01;
  COFD[9459] = 1.76992366E-02;
  COFD[9460] = -1.88240556E+01;
  COFD[9461] = 4.76845694E+00;
  COFD[9462] = -4.06130886E-01;
  COFD[9463] = 1.76992366E-02;
  COFD[9464] = -1.57676263E+01;
  COFD[9465] = 3.64178450E+00;
  COFD[9466] = -2.66740517E-01;
  COFD[9467] = 1.19380786E-02;
  COFD[9468] = -1.87577423E+01;
  COFD[9469] = 4.76845694E+00;
  COFD[9470] = -4.06130886E-01;
  COFD[9471] = 1.76992366E-02;
  COFD[9472] = -1.53822436E+01;
  COFD[9473] = 3.55175721E+00;
  COFD[9474] = -2.55538703E-01;
  COFD[9475] = 1.14737147E-02;
  COFD[9476] = -1.48461911E+01;
  COFD[9477] = 3.41648755E+00;
  COFD[9478] = -2.38096267E-01;
  COFD[9479] = 1.07229875E-02;
  COFD[9480] = -1.91251232E+01;
  COFD[9481] = 4.78666646E+00;
  COFD[9482] = -4.08190059E-01;
  COFD[9483] = 1.77758369E-02;
  COFD[9484] = -1.91028044E+01;
  COFD[9485] = 4.78666646E+00;
  COFD[9486] = -4.08190059E-01;
  COFD[9487] = 1.77758369E-02;
  COFD[9488] = -1.90674889E+01;
  COFD[9489] = 4.78666646E+00;
  COFD[9490] = -4.08190059E-01;
  COFD[9491] = 1.77758369E-02;
  COFD[9492] = -2.01230028E+01;
  COFD[9493] = 5.06537899E+00;
  COFD[9494] = -4.19068559E-01;
  COFD[9495] = 1.72031928E-02;
  COFD[9496] = -1.83581962E+01;
  COFD[9497] = 4.54835769E+00;
  COFD[9498] = -3.81194036E-01;
  COFD[9499] = 1.67703153E-02;
  COFD[9500] = -1.83581962E+01;
  COFD[9501] = 4.54835769E+00;
  COFD[9502] = -3.81194036E-01;
  COFD[9503] = 1.67703153E-02;
  COFD[9504] = -1.68623665E+01;
  COFD[9505] = 4.53418683E+00;
  COFD[9506] = -3.79402741E-01;
  COFD[9507] = 1.66944494E-02;
  COFD[9508] = -1.82726876E+01;
  COFD[9509] = 5.05914185E+00;
  COFD[9510] = -4.17676371E-01;
  COFD[9511] = 1.71189139E-02;
  COFD[9512] = -1.90761585E+01;
  COFD[9513] = 5.02767971E+00;
  COFD[9514] = -4.33406285E-01;
  COFD[9515] = 1.86183022E-02;
  COFD[9516] = -1.99663195E+01;
  COFD[9517] = 5.10924871E+00;
  COFD[9518] = -4.31658027E-01;
  COFD[9519] = 1.80316570E-02;
  COFD[9520] = -1.90916772E+01;
  COFD[9521] = 5.02767971E+00;
  COFD[9522] = -4.33406285E-01;
  COFD[9523] = 1.86183022E-02;
  COFD[9524] = -1.23197577E+01;
  COFD[9525] = 1.23214305E+00;
  COFD[9526] = 1.88509482E-01;
  COFD[9527] = -1.33545186E-02;
  COFD[9528] = -1.98607935E+01;
  COFD[9529] = 5.10183770E+00;
  COFD[9530] = -4.34283869E-01;
  COFD[9531] = 1.82934402E-02;
  COFD[9532] = -1.98658625E+01;
  COFD[9533] = 5.10183770E+00;
  COFD[9534] = -4.34283869E-01;
  COFD[9535] = 1.82934402E-02;
  COFD[9536] = -1.89766467E+01;
  COFD[9537] = 4.97353903E+00;
  COFD[9538] = -4.29135734E-01;
  COFD[9539] = 1.85479821E-02;
  COFD[9540] = -1.90203771E+01;
  COFD[9541] = 5.02767971E+00;
  COFD[9542] = -4.33406285E-01;
  COFD[9543] = 1.86183022E-02;
  COFD[9544] = -1.99234869E+01;
  COFD[9545] = 5.06283593E+00;
  COFD[9546] = -4.18459882E-01;
  COFD[9547] = 1.71653830E-02;
  COFD[9548] = -1.99234869E+01;
  COFD[9549] = 5.06283593E+00;
  COFD[9550] = -4.18459882E-01;
  COFD[9551] = 1.71653830E-02;
  COFD[9552] = -1.99422154E+01;
  COFD[9553] = 5.06283593E+00;
  COFD[9554] = -4.18459882E-01;
  COFD[9555] = 1.71653830E-02;
  COFD[9556] = -1.98389640E+01;
  COFD[9557] = 4.97580922E+00;
  COFD[9558] = -4.02237203E-01;
  COFD[9559] = 1.62583650E-02;
  COFD[9560] = -1.99332395E+01;
  COFD[9561] = 5.10792650E+00;
  COFD[9562] = -4.34330890E-01;
  COFD[9563] = 1.82649269E-02;
  COFD[9564] = -1.89262859E+01;
  COFD[9565] = 4.29479621E+00;
  COFD[9566] = -2.85486379E-01;
  COFD[9567] = 1.00409266E-02;
  COFD[9568] = -1.50994298E+01;
  COFD[9569] = 2.45843201E+00;
  COFD[9570] = -1.62854672E-03;
  COFD[9571] = -4.08982041E-03;
  COFD[9572] = -1.51056766E+01;
  COFD[9573] = 2.45843201E+00;
  COFD[9574] = -1.62854672E-03;
  COFD[9575] = -4.08982041E-03;
  COFD[9576] = -1.52982483E+01;
  COFD[9577] = 2.52976466E+00;
  COFD[9578] = -1.30059815E-02;
  COFD[9579] = -3.45697534E-03;
  COFD[9580] = -1.52982483E+01;
  COFD[9581] = 2.52976466E+00;
  COFD[9582] = -1.30059815E-02;
  COFD[9583] = -3.45697534E-03;
  COFD[9584] = -1.53969807E+01;
  COFD[9585] = 2.58623410E+00;
  COFD[9586] = -2.08585298E-02;
  COFD[9587] = -3.15164418E-03;
  COFD[9588] = -1.96460783E+01;
  COFD[9589] = 4.70423150E+00;
  COFD[9590] = -3.53280130E-01;
  COFD[9591] = 1.35765353E-02;
  COFD[9592] = -1.96539780E+01;
  COFD[9593] = 4.70423150E+00;
  COFD[9594] = -3.53280130E-01;
  COFD[9595] = 1.35765353E-02;
  COFD[9596] = -1.96614017E+01;
  COFD[9597] = 4.70423150E+00;
  COFD[9598] = -3.53280130E-01;
  COFD[9599] = 1.35765353E-02;
  COFD[9600] = -1.86737052E+01;
  COFD[9601] = 4.17419972E+00;
  COFD[9602] = -2.66341031E-01;
  COFD[9603] = 9.06851271E-03;
  COFD[9604] = -1.92117576E+01;
  COFD[9605] = 4.40561091E+00;
  COFD[9606] = -3.03445339E-01;
  COFD[9607] = 1.09646069E-02;
  COFD[9608] = -1.92179893E+01;
  COFD[9609] = 4.40561091E+00;
  COFD[9610] = -3.03445339E-01;
  COFD[9611] = 1.09646069E-02;
  COFD[9612] = -1.96869634E+01;
  COFD[9613] = 5.03431543E+00;
  COFD[9614] = -4.12843348E-01;
  COFD[9615] = 1.68428432E-02;
  COFD[9616] = -1.63036263E+01;
  COFD[9617] = 2.95151802E+00;
  COFD[9618] = -7.61560729E-02;
  COFD[9619] = -4.41228651E-04;
  COFD[9620] = -1.63036263E+01;
  COFD[9621] = 2.95151802E+00;
  COFD[9622] = -7.61560729E-02;
  COFD[9623] = -4.41228651E-04;
  COFD[9624] = -1.90202792E+01;
  COFD[9625] = 4.97353903E+00;
  COFD[9626] = -4.29135734E-01;
  COFD[9627] = 1.85479821E-02;
  COFD[9628] = -1.90239540E+01;
  COFD[9629] = 5.02767971E+00;
  COFD[9630] = -4.33406285E-01;
  COFD[9631] = 1.86183022E-02;
  COFD[9632] = -1.95535935E+01;
  COFD[9633] = 5.11266716E+00;
  COFD[9634] = -4.33148554E-01;
  COFD[9635] = 1.81394117E-02;
  COFD[9636] = -1.38061206E+01;
  COFD[9637] = 1.97123655E+00;
  COFD[9638] = 7.27163246E-02;
  COFD[9639] = -7.65995024E-03;
  COFD[9640] = -1.93419217E+01;
  COFD[9641] = 4.97353903E+00;
  COFD[9642] = -4.29135734E-01;
  COFD[9643] = 1.85479821E-02;
  COFD[9644] = -1.99174427E+01;
  COFD[9645] = 5.10455309E+00;
  COFD[9646] = -4.34334520E-01;
  COFD[9647] = 1.82832380E-02;
  COFD[9648] = -1.97062602E+01;
  COFD[9649] = 4.78110053E+00;
  COFD[9650] = -3.66021647E-01;
  COFD[9651] = 1.42430641E-02;
  COFD[9652] = -1.93585544E+01;
  COFD[9653] = 4.53056710E+00;
  COFD[9654] = -3.24342968E-01;
  COFD[9655] = 1.20596526E-02;
  COFD[9656] = -1.99519812E+01;
  COFD[9657] = 5.11249977E+00;
  COFD[9658] = -4.32909999E-01;
  COFD[9659] = 1.81201425E-02;
  COFD[9660] = -1.94357909E+01;
  COFD[9661] = 5.00080668E+00;
  COFD[9662] = -4.31528741E-01;
  COFD[9663] = 1.86038738E-02;
  COFD[9664] = -1.41322728E+01;
  COFD[9665] = 1.99679546E+00;
  COFD[9666] = 6.77940496E-02;
  COFD[9667] = -7.46709980E-03;
  COFD[9668] = -1.41392713E+01;
  COFD[9669] = 1.99679546E+00;
  COFD[9670] = 6.77940496E-02;
  COFD[9671] = -7.46709980E-03;
  COFD[9672] = -1.96869777E+01;
  COFD[9673] = 5.03431543E+00;
  COFD[9674] = -4.12843348E-01;
  COFD[9675] = 1.68428432E-02;
  COFD[9676] = -1.93553613E+01;
  COFD[9677] = 4.53056710E+00;
  COFD[9678] = -3.24342968E-01;
  COFD[9679] = 1.20596526E-02;
  COFD[9680] = -1.93553613E+01;
  COFD[9681] = 4.53056710E+00;
  COFD[9682] = -3.24342968E-01;
  COFD[9683] = 1.20596526E-02;
  COFD[9684] = -1.93553613E+01;
  COFD[9685] = 4.53056710E+00;
  COFD[9686] = -3.24342968E-01;
  COFD[9687] = 1.20596526E-02;
  COFD[9688] = -1.93519711E+01;
  COFD[9689] = 4.53056710E+00;
  COFD[9690] = -3.24342968E-01;
  COFD[9691] = 1.20596526E-02;
  COFD[9692] = -1.99047325E+01;
  COFD[9693] = 5.10455309E+00;
  COFD[9694] = -4.34334520E-01;
  COFD[9695] = 1.82832380E-02;
  COFD[9696] = -1.99755713E+01;
  COFD[9697] = 5.07176743E+00;
  COFD[9698] = -4.21583208E-01;
  COFD[9699] = 1.73804603E-02;
  COFD[9700] = -1.92550867E+01;
  COFD[9701] = 4.29697226E+00;
  COFD[9702] = -2.85832295E-01;
  COFD[9703] = 1.00585155E-02;
  COFD[9704] = -1.92583350E+01;
  COFD[9705] = 4.29697226E+00;
  COFD[9706] = -2.85832295E-01;
  COFD[9707] = 1.00585155E-02;
  COFD[9708] = -1.63070137E+01;
  COFD[9709] = 2.95151802E+00;
  COFD[9710] = -7.61560729E-02;
  COFD[9711] = -4.41228651E-04;
  COFD[9712] = -1.63102676E+01;
  COFD[9713] = 2.95151802E+00;
  COFD[9714] = -7.61560729E-02;
  COFD[9715] = -4.41228651E-04;
  COFD[9716] = -1.54295628E+01;
  COFD[9717] = 2.63515739E+00;
  COFD[9718] = -2.13768281E-02;
  COFD[9719] = -3.26812908E-03;
  COFD[9720] = -1.91186133E+01;
  COFD[9721] = 5.02767971E+00;
  COFD[9722] = -4.33406285E-01;
  COFD[9723] = 1.86183022E-02;
  COFD[9724] = -1.99847768E+01;
  COFD[9725] = 5.06870614E+00;
  COFD[9726] = -4.20134413E-01;
  COFD[9727] = 1.72751413E-02;
  COFD[9728] = -1.76902831E+01;
  COFD[9729] = 3.64531142E+00;
  COFD[9730] = -1.84302610E-01;
  COFD[9731] = 5.00335366E-03;
  COFD[9732] = -1.77515561E+01;
  COFD[9733] = 3.64531142E+00;
  COFD[9734] = -1.84302610E-01;
  COFD[9735] = 5.00335366E-03;
  COFD[9736] = -1.77842909E+01;
  COFD[9737] = 3.64531142E+00;
  COFD[9738] = -1.84302610E-01;
  COFD[9739] = 5.00335366E-03;
  COFD[9740] = -2.04395136E+01;
  COFD[9741] = 5.07320153E+00;
  COFD[9742] = -4.22421263E-01;
  COFD[9743] = 1.74432926E-02;
  COFD[9744] = -1.76852189E+01;
  COFD[9745] = 3.64531142E+00;
  COFD[9746] = -1.84302610E-01;
  COFD[9747] = 5.00335366E-03;
  COFD[9748] = -1.77491255E+01;
  COFD[9749] = 3.64531142E+00;
  COFD[9750] = -1.84302610E-01;
  COFD[9751] = 5.00335366E-03;
  COFD[9752] = -2.03138919E+01;
  COFD[9753] = 5.10432124E+00;
  COFD[9754] = -4.30469744E-01;
  COFD[9755] = 1.79574262E-02;
  COFD[9756] = -1.76798916E+01;
  COFD[9757] = 3.64531142E+00;
  COFD[9758] = -1.84302610E-01;
  COFD[9759] = 5.00335366E-03;
  COFD[9760] = -2.00868499E+01;
  COFD[9761] = 5.10342266E+00;
  COFD[9762] = -4.34318050E-01;
  COFD[9763] = 1.82878761E-02;
  COFD[9764] = -1.97255510E+01;
  COFD[9765] = 5.06879407E+00;
  COFD[9766] = -4.34033370E-01;
  COFD[9767] = 1.84496123E-02;
  COFD[9768] = -1.79749457E+01;
  COFD[9769] = 3.61226157E+00;
  COFD[9770] = -1.77927842E-01;
  COFD[9771] = 4.60993637E-03;
  COFD[9772] = -1.79514842E+01;
  COFD[9773] = 3.61226157E+00;
  COFD[9774] = -1.77927842E-01;
  COFD[9775] = 4.60993637E-03;
  COFD[9776] = -1.79144665E+01;
  COFD[9777] = 3.61226157E+00;
  COFD[9778] = -1.77927842E-01;
  COFD[9779] = 4.60993637E-03;
  COFD[9780] = -1.06959932E+01;
  COFD[9781] = 3.07905069E-01;
  COFD[9782] = 3.16754875E-01;
  COFD[9783] = -1.93837979E-02;
  COFD[9784] = -1.92550867E+01;
  COFD[9785] = 4.29697226E+00;
  COFD[9786] = -2.85832295E-01;
  COFD[9787] = 1.00585155E-02;
  COFD[9788] = -1.92550867E+01;
  COFD[9789] = 4.29697226E+00;
  COFD[9790] = -2.85832295E-01;
  COFD[9791] = 1.00585155E-02;
  COFD[9792] = -1.16395672E+01;
  COFD[9793] = 2.45139089E+00;
  COFD[9794] = -1.08437807E-01;
  COFD[9795] = 4.90682837E-03;
  COFD[9796] = -1.42812980E+01;
  COFD[9797] = 3.70003870E+00;
  COFD[9798] = -2.74031258E-01;
  COFD[9799] = 1.22422674E-02;
  COFD[9800] = -1.41698829E+01;
  COFD[9801] = 3.13068087E+00;
  COFD[9802] = -2.00477755E-01;
  COFD[9803] = 9.07054904E-03;
  COFD[9804] = -1.53634618E+01;
  COFD[9805] = 3.43432294E+00;
  COFD[9806] = -2.40398689E-01;
  COFD[9807] = 1.08220935E-02;
  COFD[9808] = -1.41893610E+01;
  COFD[9809] = 3.13068087E+00;
  COFD[9810] = -2.00477755E-01;
  COFD[9811] = 9.07054904E-03;
  COFD[9812] = -1.95474506E+01;
  COFD[9813] = 5.04266002E+00;
  COFD[9814] = -4.33607391E-01;
  COFD[9815] = 1.85541793E-02;
  COFD[9816] = -1.53707777E+01;
  COFD[9817] = 3.43432294E+00;
  COFD[9818] = -2.40398689E-01;
  COFD[9819] = 1.08220935E-02;
  COFD[9820] = -1.53777591E+01;
  COFD[9821] = 3.43432294E+00;
  COFD[9822] = -2.40398689E-01;
  COFD[9823] = 1.08220935E-02;
  COFD[9824] = -1.39718694E+01;
  COFD[9825] = 3.03109250E+00;
  COFD[9826] = -1.87396261E-01;
  COFD[9827] = 8.49727012E-03;
  COFD[9828] = -1.41010665E+01;
  COFD[9829] = 3.13068087E+00;
  COFD[9830] = -2.00477755E-01;
  COFD[9831] = 9.07054904E-03;
  COFD[9832] = -1.59217636E+01;
  COFD[9833] = 3.69274034E+00;
  COFD[9834] = -2.73095123E-01;
  COFD[9835] = 1.22021663E-02;
  COFD[9836] = -1.59217636E+01;
  COFD[9837] = 3.69274034E+00;
  COFD[9838] = -2.73095123E-01;
  COFD[9839] = 1.22021663E-02;
  COFD[9840] = -1.59448894E+01;
  COFD[9841] = 3.69274034E+00;
  COFD[9842] = -2.73095123E-01;
  COFD[9843] = 1.22021663E-02;
  COFD[9844] = -1.59014141E+01;
  COFD[9845] = 3.67401276E+00;
  COFD[9846] = -2.70701727E-01;
  COFD[9847] = 1.21000401E-02;
  COFD[9848] = -1.51201540E+01;
  COFD[9849] = 3.33365140E+00;
  COFD[9850] = -2.27171003E-01;
  COFD[9851] = 1.02420392E-02;
  COFD[9852] = -1.78703020E+01;
  COFD[9853] = 4.30400174E+00;
  COFD[9854] = -3.50684203E-01;
  COFD[9855] = 1.54945855E-02;
  COFD[9856] = -1.97536293E+01;
  COFD[9857] = 4.99359610E+00;
  COFD[9858] = -4.30936629E-01;
  COFD[9859] = 1.85925060E-02;
  COFD[9860] = -1.97620939E+01;
  COFD[9861] = 4.99359610E+00;
  COFD[9862] = -4.30936629E-01;
  COFD[9863] = 1.85925060E-02;
  COFD[9864] = -1.93689990E+01;
  COFD[9865] = 4.86036401E+00;
  COFD[9866] = -4.17087154E-01;
  COFD[9867] = 1.81348258E-02;
  COFD[9868] = -1.93689990E+01;
  COFD[9869] = 4.86036401E+00;
  COFD[9870] = -4.17087154E-01;
  COFD[9871] = 1.81348258E-02;
  COFD[9872] = -1.97206107E+01;
  COFD[9873] = 4.97472819E+00;
  COFD[9874] = -4.29256126E-01;
  COFD[9875] = 1.85517927E-02;
  COFD[9876] = -1.73511528E+01;
  COFD[9877] = 4.13189883E+00;
  COFD[9878] = -3.29291449E-01;
  COFD[9879] = 1.46059118E-02;
  COFD[9880] = -1.73616553E+01;
  COFD[9881] = 4.13189883E+00;
  COFD[9882] = -3.29291449E-01;
  COFD[9883] = 1.46059118E-02;
  COFD[9884] = -1.73715755E+01;
  COFD[9885] = 4.13189883E+00;
  COFD[9886] = -3.29291449E-01;
  COFD[9887] = 1.46059118E-02;
  COFD[9888] = -1.82667214E+01;
  COFD[9889] = 4.46493404E+00;
  COFD[9890] = -3.70700744E-01;
  COFD[9891] = 1.63281819E-02;
  COFD[9892] = -1.80239153E+01;
  COFD[9893] = 4.34376344E+00;
  COFD[9894] = -3.55663855E-01;
  COFD[9895] = 1.57033899E-02;
  COFD[9896] = -1.80323609E+01;
  COFD[9897] = 4.34376344E+00;
  COFD[9898] = -3.55663855E-01;
  COFD[9899] = 1.57033899E-02;
  COFD[9900] = -1.59602660E+01;
  COFD[9901] = 3.73799764E+00;
  COFD[9902] = -2.78922749E-01;
  COFD[9903] = 1.24528579E-02;
  COFD[9904] = -1.96326272E+01;
  COFD[9905] = 4.90043912E+00;
  COFD[9906] = -4.21514331E-01;
  COFD[9907] = 1.82945399E-02;
  COFD[9908] = -1.96326272E+01;
  COFD[9909] = 4.90043912E+00;
  COFD[9910] = -4.21514331E-01;
  COFD[9911] = 1.82945399E-02;
  COFD[9912] = -1.40249878E+01;
  COFD[9913] = 3.03109250E+00;
  COFD[9914] = -1.87396261E-01;
  COFD[9915] = 8.49727012E-03;
  COFD[9916] = -1.41184147E+01;
  COFD[9917] = 3.13068087E+00;
  COFD[9918] = -2.00477755E-01;
  COFD[9919] = 9.07054904E-03;
  COFD[9920] = -1.41395866E+01;
  COFD[9921] = 3.13068087E+00;
  COFD[9922] = -2.00477755E-01;
  COFD[9923] = 9.07054904E-03;
  COFD[9924] = -1.93419217E+01;
  COFD[9925] = 4.97353903E+00;
  COFD[9926] = -4.29135734E-01;
  COFD[9927] = 1.85479821E-02;
  COFD[9928] = -1.43757538E+01;
  COFD[9929] = 3.03109250E+00;
  COFD[9930] = -1.87396261E-01;
  COFD[9931] = 8.49727012E-03;
  COFD[9932] = -1.51116793E+01;
  COFD[9933] = 3.32669990E+00;
  COFD[9934] = -2.26245876E-01;
  COFD[9935] = 1.02009489E-02;
  COFD[9936] = -1.72154668E+01;
  COFD[9937] = 4.08944620E+00;
  COFD[9938] = -3.24042480E-01;
  COFD[9939] = 1.43892310E-02;
  COFD[9940] = -1.77211477E+01;
  COFD[9941] = 4.24280031E+00;
  COFD[9942] = -3.42971692E-01;
  COFD[9943] = 1.51693290E-02;
  COFD[9944] = -1.55882932E+01;
  COFD[9945] = 3.51822289E+00;
  COFD[9946] = -2.51252276E-01;
  COFD[9947] = 1.12908198E-02;
  COFD[9948] = -1.44784682E+01;
  COFD[9949] = 3.07539186E+00;
  COFD[9950] = -1.93256663E-01;
  COFD[9951] = 8.75596004E-03;
  COFD[9952] = -1.99505749E+01;
  COFD[9953] = 5.04066185E+00;
  COFD[9954] = -4.33512682E-01;
  COFD[9955] = 1.85568949E-02;
  COFD[9956] = -1.99599718E+01;
  COFD[9957] = 5.04066185E+00;
  COFD[9958] = -4.33512682E-01;
  COFD[9959] = 1.85568949E-02;
  COFD[9960] = -1.59602862E+01;
  COFD[9961] = 3.73799764E+00;
  COFD[9962] = -2.78922749E-01;
  COFD[9963] = 1.24528579E-02;
  COFD[9964] = -1.77166059E+01;
  COFD[9965] = 4.24280031E+00;
  COFD[9966] = -3.42971692E-01;
  COFD[9967] = 1.51693290E-02;
  COFD[9968] = -1.77166059E+01;
  COFD[9969] = 4.24280031E+00;
  COFD[9970] = -3.42971692E-01;
  COFD[9971] = 1.51693290E-02;
  COFD[9972] = -1.77166059E+01;
  COFD[9973] = 4.24280031E+00;
  COFD[9974] = -3.42971692E-01;
  COFD[9975] = 1.51693290E-02;
  COFD[9976] = -1.77117972E+01;
  COFD[9977] = 4.24280031E+00;
  COFD[9978] = -3.42971692E-01;
  COFD[9979] = 1.51693290E-02;
  COFD[9980] = -1.50944975E+01;
  COFD[9981] = 3.32669990E+00;
  COFD[9982] = -2.26245876E-01;
  COFD[9983] = 1.02009489E-02;
  COFD[9984] = -1.59540002E+01;
  COFD[9985] = 3.64636403E+00;
  COFD[9986] = -2.67291065E-01;
  COFD[9987] = 1.19600168E-02;
  COFD[9988] = -1.84522759E+01;
  COFD[9989] = 4.40864461E+00;
  COFD[9990] = -3.63763109E-01;
  COFD[9991] = 1.60420204E-02;
  COFD[9992] = -1.84568971E+01;
  COFD[9993] = 4.40864461E+00;
  COFD[9994] = -3.63763109E-01;
  COFD[9995] = 1.60420204E-02;
  COFD[9996] = -1.96374323E+01;
  COFD[9997] = 4.90043912E+00;
  COFD[9998] = -4.21514331E-01;
  COFD[9999] = 1.82945399E-02;
  COFD[10000] = -1.96420610E+01;
  COFD[10001] = 4.90043912E+00;
  COFD[10002] = -4.21514331E-01;
  COFD[10003] = 1.82945399E-02;
  COFD[10004] = -1.84802396E+01;
  COFD[10005] = 4.65505575E+00;
  COFD[10006] = -3.94025226E-01;
  COFD[10007] = 1.72846389E-02;
  COFD[10008] = -1.42235488E+01;
  COFD[10009] = 3.13068087E+00;
  COFD[10010] = -2.00477755E-01;
  COFD[10011] = 9.07054904E-03;
  COFD[10012] = -1.57593659E+01;
  COFD[10013] = 3.58351281E+00;
  COFD[10014] = -2.59526521E-01;
  COFD[10015] = 1.16407007E-02;
  COFD[10016] = -1.81380619E+01;
  COFD[10017] = 4.38781144E+00;
  COFD[10018] = -3.61168991E-01;
  COFD[10019] = 1.59338380E-02;
  COFD[10020] = -1.82247409E+01;
  COFD[10021] = 4.38781144E+00;
  COFD[10022] = -3.61168991E-01;
  COFD[10023] = 1.59338380E-02;
  COFD[10024] = -1.82730038E+01;
  COFD[10025] = 4.38781144E+00;
  COFD[10026] = -3.61168991E-01;
  COFD[10027] = 1.59338380E-02;
  COFD[10028] = -1.63915451E+01;
  COFD[10029] = 3.63398790E+00;
  COFD[10030] = -2.65805155E-01;
  COFD[10031] = 1.19009007E-02;
  COFD[10032] = -1.81310867E+01;
  COFD[10033] = 4.38781144E+00;
  COFD[10034] = -3.61168991E-01;
  COFD[10035] = 1.59338380E-02;
  COFD[10036] = -1.82212157E+01;
  COFD[10037] = 4.38781144E+00;
  COFD[10038] = -3.61168991E-01;
  COFD[10039] = 1.59338380E-02;
  COFD[10040] = -1.60483994E+01;
  COFD[10041] = 3.55169733E+00;
  COFD[10042] = -2.55531147E-01;
  COFD[10043] = 1.14733967E-02;
  COFD[10044] = -1.81237775E+01;
  COFD[10045] = 4.38781144E+00;
  COFD[10046] = -3.61168991E-01;
  COFD[10047] = 1.59338380E-02;
  COFD[10048] = -1.56111131E+01;
  COFD[10049] = 3.44020470E+00;
  COFD[10050] = -2.41162835E-01;
  COFD[10051] = 1.08552213E-02;
  COFD[10052] = -1.50161468E+01;
  COFD[10053] = 3.28502534E+00;
  COFD[10054] = -2.20705925E-01;
  COFD[10055] = 9.95522352E-03;
  COFD[10056] = -1.93771117E+01;
  COFD[10057] = 4.70202289E+00;
  COFD[10058] = -3.99204946E-01;
  COFD[10059] = 1.74707832E-02;
  COFD[10060] = -1.93417629E+01;
  COFD[10061] = 4.70202289E+00;
  COFD[10062] = -3.99204946E-01;
  COFD[10063] = 1.74707832E-02;
  COFD[10064] = -1.92875933E+01;
  COFD[10065] = 4.70202289E+00;
  COFD[10066] = -3.99204946E-01;
  COFD[10067] = 1.74707832E-02;
  COFD[10068] = -2.05879147E+01;
  COFD[10069] = 5.08054289E+00;
  COFD[10070] = -4.25157431E-01;
  COFD[10071] = 1.76349030E-02;
  COFD[10072] = -1.84522759E+01;
  COFD[10073] = 4.40864461E+00;
  COFD[10074] = -3.63763109E-01;
  COFD[10075] = 1.60420204E-02;
  COFD[10076] = -1.84522759E+01;
  COFD[10077] = 4.40864461E+00;
  COFD[10078] = -3.63763109E-01;
  COFD[10079] = 1.60420204E-02;
  COFD[10080] = -1.23383828E+01;
  COFD[10081] = 2.75315266E+00;
  COFD[10082] = -1.50257362E-01;
  COFD[10083] = 6.84125771E-03;
  COFD[10084] = -1.52294027E+01;
  COFD[10085] = 4.07848496E+00;
  COFD[10086] = -3.22647626E-01;
  COFD[10087] = 1.43298383E-02;
  COFD[10088] = -1.49635832E+01;
  COFD[10089] = 3.45291069E+00;
  COFD[10090] = -2.42822180E-01;
  COFD[10091] = 1.09275752E-02;
  COFD[10092] = -1.60794012E+01;
  COFD[10093] = 3.71236773E+00;
  COFD[10094] = -2.75612682E-01;
  COFD[10095] = 1.23100131E-02;
  COFD[10096] = -1.49832956E+01;
  COFD[10097] = 3.45291069E+00;
  COFD[10098] = -2.42822180E-01;
  COFD[10099] = 1.09275752E-02;
  COFD[10100] = -1.99796913E+01;
  COFD[10101] = 5.06422780E+00;
  COFD[10102] = -4.18763984E-01;
  COFD[10103] = 1.71836367E-02;
  COFD[10104] = -1.60868461E+01;
  COFD[10105] = 3.71236773E+00;
  COFD[10106] = -2.75612682E-01;
  COFD[10107] = 1.23100131E-02;
  COFD[10108] = -1.60939523E+01;
  COFD[10109] = 3.71236773E+00;
  COFD[10110] = -2.75612682E-01;
  COFD[10111] = 1.23100131E-02;
  COFD[10112] = -1.47009865E+01;
  COFD[10113] = 3.32669990E+00;
  COFD[10114] = -2.26245876E-01;
  COFD[10115] = 1.02009489E-02;
  COFD[10116] = -1.48940094E+01;
  COFD[10117] = 3.45291069E+00;
  COFD[10118] = -2.42822180E-01;
  COFD[10119] = 1.09275752E-02;
  COFD[10120] = -1.68867391E+01;
  COFD[10121] = 4.07034547E+00;
  COFD[10122] = -3.21605793E-01;
  COFD[10123] = 1.42852210E-02;
  COFD[10124] = -1.68867391E+01;
  COFD[10125] = 4.07034547E+00;
  COFD[10126] = -3.21605793E-01;
  COFD[10127] = 1.42852210E-02;
  COFD[10128] = -1.69101206E+01;
  COFD[10129] = 4.07034547E+00;
  COFD[10130] = -3.21605793E-01;
  COFD[10131] = 1.42852210E-02;
  COFD[10132] = -1.68575077E+01;
  COFD[10133] = 4.04805862E+00;
  COFD[10134] = -3.18738478E-01;
  COFD[10135] = 1.41617986E-02;
  COFD[10136] = -1.58837524E+01;
  COFD[10137] = 3.63399451E+00;
  COFD[10138] = -2.65805952E-01;
  COFD[10139] = 1.19009325E-02;
  COFD[10140] = -1.88339628E+01;
  COFD[10141] = 4.66400853E+00;
  COFD[10142] = -3.95055598E-01;
  COFD[10143] = 1.73237987E-02;
  COFD[10144] = -2.01543668E+01;
  COFD[10145] = 5.08484044E+00;
  COFD[10146] = -4.33972487E-01;
  COFD[10147] = 1.83578464E-02;
  COFD[10148] = -2.01629737E+01;
  COFD[10149] = 5.08484044E+00;
  COFD[10150] = -4.33972487E-01;
  COFD[10151] = 1.83578464E-02;
  COFD[10152] = -2.00713331E+01;
  COFD[10153] = 5.06056425E+00;
  COFD[10154] = -4.33879014E-01;
  COFD[10155] = 1.84806969E-02;
  COFD[10156] = -2.00713331E+01;
  COFD[10157] = 5.06056425E+00;
  COFD[10158] = -4.33879014E-01;
  COFD[10159] = 1.84806969E-02;
  COFD[10160] = -2.01522895E+01;
  COFD[10161] = 5.08034582E+00;
  COFD[10162] = -4.34480301E-01;
  COFD[10163] = 1.84253742E-02;
  COFD[10164] = -1.82860795E+01;
  COFD[10165] = 4.48448153E+00;
  COFD[10166] = -3.73130862E-01;
  COFD[10167] = 1.64293065E-02;
  COFD[10168] = -1.82967456E+01;
  COFD[10169] = 4.48448153E+00;
  COFD[10170] = -3.73130862E-01;
  COFD[10171] = 1.64293065E-02;
  COFD[10172] = -1.83068237E+01;
  COFD[10173] = 4.48448153E+00;
  COFD[10174] = -3.73130862E-01;
  COFD[10175] = 1.64293065E-02;
  COFD[10176] = -1.91080397E+01;
  COFD[10177] = 4.76599271E+00;
  COFD[10178] = -4.05891334E-01;
  COFD[10179] = 1.76922565E-02;
  COFD[10180] = -1.89599776E+01;
  COFD[10181] = 4.68999916E+00;
  COFD[10182] = -3.97926797E-01;
  COFD[10183] = 1.74272678E-02;
  COFD[10184] = -1.89685653E+01;
  COFD[10185] = 4.68999916E+00;
  COFD[10186] = -3.97926797E-01;
  COFD[10187] = 1.74272678E-02;
  COFD[10188] = -1.69175892E+01;
  COFD[10189] = 4.11378655E+00;
  COFD[10190] = -3.27077608E-01;
  COFD[10191] = 1.45156838E-02;
  COFD[10192] = -2.01704625E+01;
  COFD[10193] = 5.05393232E+00;
  COFD[10194] = -4.33941169E-01;
  COFD[10195] = 1.85217364E-02;
  COFD[10196] = -2.01704625E+01;
  COFD[10197] = 5.05393232E+00;
  COFD[10198] = -4.33941169E-01;
  COFD[10199] = 1.85217364E-02;
  COFD[10200] = -1.47546482E+01;
  COFD[10201] = 3.32669990E+00;
  COFD[10202] = -2.26245876E-01;
  COFD[10203] = 1.02009489E-02;
  COFD[10204] = -1.49110142E+01;
  COFD[10205] = 3.45291069E+00;
  COFD[10206] = -2.42822180E-01;
  COFD[10207] = 1.09275752E-02;
  COFD[10208] = -1.49324307E+01;
  COFD[10209] = 3.45291069E+00;
  COFD[10210] = -2.42822180E-01;
  COFD[10211] = 1.09275752E-02;
  COFD[10212] = -1.99174427E+01;
  COFD[10213] = 5.10455309E+00;
  COFD[10214] = -4.34334520E-01;
  COFD[10215] = 1.82832380E-02;
  COFD[10216] = -1.51116793E+01;
  COFD[10217] = 3.32669990E+00;
  COFD[10218] = -2.26245876E-01;
  COFD[10219] = 1.02009489E-02;
  COFD[10220] = -1.58820229E+01;
  COFD[10221] = 3.63008569E+00;
  COFD[10222] = -2.65336160E-01;
  COFD[10223] = 1.18822150E-02;
  COFD[10224] = -1.81275722E+01;
  COFD[10225] = 4.43405790E+00;
  COFD[10226] = -3.66882237E-01;
  COFD[10227] = 1.61700748E-02;
  COFD[10228] = -1.87207313E+01;
  COFD[10229] = 4.61983256E+00;
  COFD[10230] = -3.89971404E-01;
  COFD[10231] = 1.71306317E-02;
  COFD[10232] = -1.63463181E+01;
  COFD[10233] = 3.81213432E+00;
  COFD[10234] = -2.88477875E-01;
  COFD[10235] = 1.28642729E-02;
  COFD[10236] = -1.52498349E+01;
  COFD[10237] = 3.38547303E+00;
  COFD[10238] = -2.34077576E-01;
  COFD[10239] = 1.05493143E-02;
  COFD[10240] = -2.03176481E+01;
  COFD[10241] = 5.11262039E+00;
  COFD[10242] = -4.33323900E-01;
  COFD[10243] = 1.81544791E-02;
  COFD[10244] = -2.03271975E+01;
  COFD[10245] = 5.11262039E+00;
  COFD[10246] = -4.33323900E-01;
  COFD[10247] = 1.81544791E-02;
  COFD[10248] = -1.69176098E+01;
  COFD[10249] = 4.11378655E+00;
  COFD[10250] = -3.27077608E-01;
  COFD[10251] = 1.45156838E-02;
  COFD[10252] = -1.87160984E+01;
  COFD[10253] = 4.61983256E+00;
  COFD[10254] = -3.89971404E-01;
  COFD[10255] = 1.71306317E-02;
  COFD[10256] = -1.87160984E+01;
  COFD[10257] = 4.61983256E+00;
  COFD[10258] = -3.89971404E-01;
  COFD[10259] = 1.71306317E-02;
  COFD[10260] = -1.87160984E+01;
  COFD[10261] = 4.61983256E+00;
  COFD[10262] = -3.89971404E-01;
  COFD[10263] = 1.71306317E-02;
  COFD[10264] = -1.87111941E+01;
  COFD[10265] = 4.61983256E+00;
  COFD[10266] = -3.89971404E-01;
  COFD[10267] = 1.71306317E-02;
  COFD[10268] = -1.58645548E+01;
  COFD[10269] = 3.63008569E+00;
  COFD[10270] = -2.65336160E-01;
  COFD[10271] = 1.18822150E-02;
  COFD[10272] = -1.68714826E+01;
  COFD[10273] = 4.00415431E+00;
  COFD[10274] = -3.13089959E-01;
  COFD[10275] = 1.39187926E-02;
  COFD[10276] = -1.93437003E+01;
  COFD[10277] = 4.73091965E+00;
  COFD[10278] = -4.02305999E-01;
  COFD[10279] = 1.75778646E-02;
  COFD[10280] = -1.93484142E+01;
  COFD[10281] = 4.73091965E+00;
  COFD[10282] = -4.02305999E-01;
  COFD[10283] = 1.75778646E-02;
  COFD[10284] = -2.01753631E+01;
  COFD[10285] = 5.05393232E+00;
  COFD[10286] = -4.33941169E-01;
  COFD[10287] = 1.85217364E-02;
  COFD[10288] = -2.01800847E+01;
  COFD[10289] = 5.05393232E+00;
  COFD[10290] = -4.33941169E-01;
  COFD[10291] = 1.85217364E-02;
  COFD[10292] = -1.96255217E+01;
  COFD[10293] = 5.02642485E+00;
  COFD[10294] = -4.33400950E-01;
  COFD[10295] = 1.86246451E-02;
  COFD[10296] = -1.50179175E+01;
  COFD[10297] = 3.45291069E+00;
  COFD[10298] = -2.42822180E-01;
  COFD[10299] = 1.09275752E-02;
  COFD[10300] = -1.65732351E+01;
  COFD[10301] = 3.89909300E+00;
  COFD[10302] = -2.99543156E-01;
  COFD[10303] = 1.33345146E-02;
  COFD[10304] = -1.92170602E+01;
  COFD[10305] = 4.77052462E+00;
  COFD[10306] = -4.06325803E-01;
  COFD[10307] = 1.77045805E-02;
  COFD[10308] = -1.93054476E+01;
  COFD[10309] = 4.77052462E+00;
  COFD[10310] = -4.06325803E-01;
  COFD[10311] = 1.77045805E-02;
  COFD[10312] = -1.93548012E+01;
  COFD[10313] = 4.77052462E+00;
  COFD[10314] = -4.06325803E-01;
  COFD[10315] = 1.77045805E-02;
  COFD[10316] = -1.72935248E+01;
  COFD[10317] = 3.98080999E+00;
  COFD[10318] = -3.10081093E-01;
  COFD[10319] = 1.37890749E-02;
  COFD[10320] = -1.92099602E+01;
  COFD[10321] = 4.77052462E+00;
  COFD[10322] = -4.06325803E-01;
  COFD[10323] = 1.77045805E-02;
  COFD[10324] = -1.93018468E+01;
  COFD[10325] = 4.77052462E+00;
  COFD[10326] = -4.06325803E-01;
  COFD[10327] = 1.77045805E-02;
  COFD[10328] = -1.68404410E+01;
  COFD[10329] = 3.85546414E+00;
  COFD[10330] = -2.94015716E-01;
  COFD[10331] = 1.31006433E-02;
  COFD[10332] = -1.92025222E+01;
  COFD[10333] = 4.77052462E+00;
  COFD[10334] = -4.06325803E-01;
  COFD[10335] = 1.77045805E-02;
  COFD[10336] = -1.63325093E+01;
  COFD[10337] = 3.71830365E+00;
  COFD[10338] = -2.76376641E-01;
  COFD[10339] = 1.23428762E-02;
  COFD[10340] = -1.58179642E+01;
  COFD[10341] = 3.60269020E+00;
  COFD[10342] = -2.61928318E-01;
  COFD[10343] = 1.17409749E-02;
  COFD[10344] = -2.01707894E+01;
  COFD[10345] = 4.97019920E+00;
  COFD[10346] = -4.28797011E-01;
  COFD[10347] = 1.85372303E-02;
  COFD[10348] = -2.01345861E+01;
  COFD[10349] = 4.97019920E+00;
  COFD[10350] = -4.28797011E-01;
  COFD[10351] = 1.85372303E-02;
  COFD[10352] = -2.00792213E+01;
  COFD[10353] = 4.97019920E+00;
  COFD[10354] = -4.28797011E-01;
  COFD[10355] = 1.85372303E-02;
  COFD[10356] = -2.04062325E+01;
  COFD[10357] = 4.90297486E+00;
  COFD[10358] = -3.88437024E-01;
  COFD[10359] = 1.54825639E-02;
  COFD[10360] = -1.93437003E+01;
  COFD[10361] = 4.73091965E+00;
  COFD[10362] = -4.02305999E-01;
  COFD[10363] = 1.75778646E-02;
  COFD[10364] = -1.93437003E+01;
  COFD[10365] = 4.73091965E+00;
  COFD[10366] = -4.02305999E-01;
  COFD[10367] = 1.75778646E-02;
  COFD[10368] = -1.40618742E+01;
  COFD[10369] = 3.42504312E+00;
  COFD[10370] = -2.39198002E-01;
  COFD[10371] = 1.07702803E-02;
  COFD[10372] = -1.73254824E+01;
  COFD[10373] = 4.83157593E+00;
  COFD[10374] = -4.13711451E-01;
  COFD[10375] = 1.80032208E-02;
  COFD[10376] = -1.70100228E+01;
  COFD[10377] = 4.19909678E+00;
  COFD[10378] = -3.37493433E-01;
  COFD[10379] = 1.49397054E-02;
  COFD[10380] = -1.84369680E+01;
  COFD[10381] = 4.55714003E+00;
  COFD[10382] = -3.82304130E-01;
  COFD[10383] = 1.68173362E-02;
  COFD[10384] = -1.70325091E+01;
  COFD[10385] = 4.19909678E+00;
  COFD[10386] = -3.37493433E-01;
  COFD[10387] = 1.49397054E-02;
  COFD[10388] = -1.91326687E+01;
  COFD[10389] = 4.49891559E+00;
  COFD[10390] = -3.18945742E-01;
  COFD[10391] = 1.17738080E-02;
  COFD[10392] = -1.84460561E+01;
  COFD[10393] = 4.55714003E+00;
  COFD[10394] = -3.82304130E-01;
  COFD[10395] = 1.68173362E-02;
  COFD[10396] = -1.84547590E+01;
  COFD[10397] = 4.55714003E+00;
  COFD[10398] = -3.82304130E-01;
  COFD[10399] = 1.68173362E-02;
  COFD[10400] = -1.67609720E+01;
  COFD[10401] = 4.08944620E+00;
  COFD[10402] = -3.24042480E-01;
  COFD[10403] = 1.43892310E-02;
  COFD[10404] = -1.69315920E+01;
  COFD[10405] = 4.19909678E+00;
  COFD[10406] = -3.37493433E-01;
  COFD[10407] = 1.49397054E-02;
  COFD[10408] = -1.90425973E+01;
  COFD[10409] = 4.82250870E+00;
  COFD[10410] = -4.12600742E-01;
  COFD[10411] = 1.79576716E-02;
  COFD[10412] = -1.90425973E+01;
  COFD[10413] = 4.82250870E+00;
  COFD[10414] = -4.12600742E-01;
  COFD[10415] = 1.79576716E-02;
  COFD[10416] = -1.90689699E+01;
  COFD[10417] = 4.82250870E+00;
  COFD[10418] = -4.12600742E-01;
  COFD[10419] = 1.79576716E-02;
  COFD[10420] = -1.90103087E+01;
  COFD[10421] = 4.79799683E+00;
  COFD[10422] = -4.09580100E-01;
  COFD[10423] = 1.78329319E-02;
  COFD[10424] = -1.81319473E+01;
  COFD[10425] = 4.44024400E+00;
  COFD[10426] = -3.67638841E-01;
  COFD[10427] = 1.62010182E-02;
  COFD[10428] = -2.03840920E+01;
  COFD[10429] = 5.08513780E+00;
  COFD[10430] = -4.33850386E-01;
  COFD[10431] = 1.83458657E-02;
  COFD[10432] = -1.99759132E+01;
  COFD[10433] = 4.72029196E+00;
  COFD[10434] = -3.55942338E-01;
  COFD[10435] = 1.37157472E-02;
  COFD[10436] = -1.99863137E+01;
  COFD[10437] = 4.72029196E+00;
  COFD[10438] = -3.55942338E-01;
  COFD[10439] = 1.37157472E-02;
  COFD[10440] = -2.02974386E+01;
  COFD[10441] = 4.90587767E+00;
  COFD[10442] = -3.89062938E-01;
  COFD[10443] = 1.55198015E-02;
  COFD[10444] = -2.02974386E+01;
  COFD[10445] = 4.90587767E+00;
  COFD[10446] = -3.89062938E-01;
  COFD[10447] = 1.55198015E-02;
  COFD[10448] = -2.01189481E+01;
  COFD[10449] = 4.77819065E+00;
  COFD[10450] = -3.65539208E-01;
  COFD[10451] = 1.42178206E-02;
  COFD[10452] = -2.01109502E+01;
  COFD[10453] = 5.04929922E+00;
  COFD[10454] = -4.33827582E-01;
  COFD[10455] = 1.85370179E-02;
  COFD[10456] = -2.01236460E+01;
  COFD[10457] = 5.04929922E+00;
  COFD[10458] = -4.33827582E-01;
  COFD[10459] = 1.85370179E-02;
  COFD[10460] = -2.01356897E+01;
  COFD[10461] = 5.04929922E+00;
  COFD[10462] = -4.33827582E-01;
  COFD[10463] = 1.85370179E-02;
  COFD[10464] = -2.04883654E+01;
  COFD[10465] = 5.11247260E+00;
  COFD[10466] = -4.32889260E-01;
  COFD[10467] = 1.81185353E-02;
  COFD[10468] = -2.04573493E+01;
  COFD[10469] = 5.09394281E+00;
  COFD[10470] = -4.33962494E-01;
  COFD[10471] = 1.83082912E-02;
  COFD[10472] = -2.04677283E+01;
  COFD[10473] = 5.09394281E+00;
  COFD[10474] = -4.33962494E-01;
  COFD[10475] = 1.83082912E-02;
  COFD[10476] = -1.91310793E+01;
  COFD[10477] = 4.86712577E+00;
  COFD[10478] = -4.17831941E-01;
  COFD[10479] = 1.81615845E-02;
  COFD[10480] = -2.04473177E+01;
  COFD[10481] = 4.88442906E+00;
  COFD[10482] = -3.84396005E-01;
  COFD[10483] = 1.52416584E-02;
  COFD[10484] = -2.04473177E+01;
  COFD[10485] = 4.88442906E+00;
  COFD[10486] = -3.84396005E-01;
  COFD[10487] = 1.52416584E-02;
  COFD[10488] = -1.68209263E+01;
  COFD[10489] = 4.08944620E+00;
  COFD[10490] = -3.24042480E-01;
  COFD[10491] = 1.43892310E-02;
  COFD[10492] = -1.69540244E+01;
  COFD[10493] = 4.19909678E+00;
  COFD[10494] = -3.37493433E-01;
  COFD[10495] = 1.49397054E-02;
  COFD[10496] = -1.69783200E+01;
  COFD[10497] = 4.19909678E+00;
  COFD[10498] = -3.37493433E-01;
  COFD[10499] = 1.49397054E-02;
  COFD[10500] = -1.97062602E+01;
  COFD[10501] = 4.78110053E+00;
  COFD[10502] = -3.66021647E-01;
  COFD[10503] = 1.42430641E-02;
  COFD[10504] = -1.72154668E+01;
  COFD[10505] = 4.08944620E+00;
  COFD[10506] = -3.24042480E-01;
  COFD[10507] = 1.43892310E-02;
  COFD[10508] = -1.81275722E+01;
  COFD[10509] = 4.43405790E+00;
  COFD[10510] = -3.66882237E-01;
  COFD[10511] = 1.61700748E-02;
  COFD[10512] = -2.00557712E+01;
  COFD[10513] = 5.03497105E+00;
  COFD[10514] = -4.33194880E-01;
  COFD[10515] = 1.85605189E-02;
  COFD[10516] = -2.03438029E+01;
  COFD[10517] = 5.07663244E+00;
  COFD[10518] = -4.34319960E-01;
  COFD[10519] = 1.84317867E-02;
  COFD[10520] = -1.86919680E+01;
  COFD[10521] = 4.64657086E+00;
  COFD[10522] = -3.93051861E-01;
  COFD[10523] = 1.72478156E-02;
  COFD[10524] = -1.73280831E+01;
  COFD[10525] = 4.13645728E+00;
  COFD[10526] = -3.29843940E-01;
  COFD[10527] = 1.46282165E-02;
  COFD[10528] = -1.95923594E+01;
  COFD[10529] = 4.50649892E+00;
  COFD[10530] = -3.20242473E-01;
  COFD[10531] = 1.18425246E-02;
  COFD[10532] = -1.96038148E+01;
  COFD[10533] = 4.50649892E+00;
  COFD[10534] = -3.20242473E-01;
  COFD[10535] = 1.18425246E-02;
  COFD[10536] = -1.91311051E+01;
  COFD[10537] = 4.86712577E+00;
  COFD[10538] = -4.17831941E-01;
  COFD[10539] = 1.81615845E-02;
  COFD[10540] = -2.03379692E+01;
  COFD[10541] = 5.07663244E+00;
  COFD[10542] = -4.34319960E-01;
  COFD[10543] = 1.84317867E-02;
  COFD[10544] = -2.03379692E+01;
  COFD[10545] = 5.07663244E+00;
  COFD[10546] = -4.34319960E-01;
  COFD[10547] = 1.84317867E-02;
  COFD[10548] = -2.03379692E+01;
  COFD[10549] = 5.07663244E+00;
  COFD[10550] = -4.34319960E-01;
  COFD[10551] = 1.84317867E-02;
  COFD[10552] = -2.03318090E+01;
  COFD[10553] = 5.07663244E+00;
  COFD[10554] = -4.34319960E-01;
  COFD[10555] = 1.84317867E-02;
  COFD[10556] = -1.81065039E+01;
  COFD[10557] = 4.43405790E+00;
  COFD[10558] = -3.66882237E-01;
  COFD[10559] = 1.61700748E-02;
  COFD[10560] = -1.90841173E+01;
  COFD[10561] = 4.76400419E+00;
  COFD[10562] = -4.05696060E-01;
  COFD[10563] = 1.76864589E-02;
  COFD[10564] = -2.08165540E+01;
  COFD[10565] = 5.10965671E+00;
  COFD[10566] = -4.34281725E-01;
  COFD[10567] = 1.82515265E-02;
  COFD[10568] = -2.08224908E+01;
  COFD[10569] = 5.10965671E+00;
  COFD[10570] = -4.34281725E-01;
  COFD[10571] = 1.82515265E-02;
  COFD[10572] = -2.04534736E+01;
  COFD[10573] = 4.88442906E+00;
  COFD[10574] = -3.84396005E-01;
  COFD[10575] = 1.52416584E-02;
  COFD[10576] = -2.04594194E+01;
  COFD[10577] = 4.88442906E+00;
  COFD[10578] = -3.84396005E-01;
  COFD[10579] = 1.52416584E-02;
  COFD[10580] = -2.01793093E+01;
  COFD[10581] = 5.07113979E+00;
  COFD[10582] = -4.21314033E-01;
  COFD[10583] = 1.73611473E-02;
  COFD[10584] = -1.70723168E+01;
  COFD[10585] = 4.19909678E+00;
  COFD[10586] = -3.37493433E-01;
  COFD[10587] = 1.49397054E-02;
  COFD[10588] = -1.88743758E+01;
  COFD[10589] = 4.70521032E+00;
  COFD[10590] = -3.99540463E-01;
  COFD[10591] = 1.74820299E-02;
  COFD[10592] = -2.05149882E+01;
  COFD[10593] = 5.10569239E+00;
  COFD[10594] = -4.34343200E-01;
  COFD[10595] = 1.82778928E-02;
  COFD[10596] = -2.06257903E+01;
  COFD[10597] = 5.10569239E+00;
  COFD[10598] = -4.34343200E-01;
  COFD[10599] = 1.82778928E-02;
  COFD[10600] = -2.06900415E+01;
  COFD[10601] = 5.10569239E+00;
  COFD[10602] = -4.34343200E-01;
  COFD[10603] = 1.82778928E-02;
  COFD[10604] = -1.95739241E+01;
  COFD[10605] = 4.75212143E+00;
  COFD[10606] = -4.04516980E-01;
  COFD[10607] = 1.76507702E-02;
  COFD[10608] = -2.05062925E+01;
  COFD[10609] = 5.10569239E+00;
  COFD[10610] = -4.34343200E-01;
  COFD[10611] = 1.82778928E-02;
  COFD[10612] = -2.06211753E+01;
  COFD[10613] = 5.10569239E+00;
  COFD[10614] = -4.34343200E-01;
  COFD[10615] = 1.82778928E-02;
  COFD[10616] = -1.92076864E+01;
  COFD[10617] = 4.67738802E+00;
  COFD[10618] = -3.96546502E-01;
  COFD[10619] = 1.73781767E-02;
  COFD[10620] = -2.04972121E+01;
  COFD[10621] = 5.10569239E+00;
  COFD[10622] = -4.34343200E-01;
  COFD[10623] = 1.82778928E-02;
  COFD[10624] = -1.87210023E+01;
  COFD[10625] = 4.56481098E+00;
  COFD[10626] = -3.83274058E-01;
  COFD[10627] = 1.68584426E-02;
  COFD[10628] = -1.80352709E+01;
  COFD[10629] = 4.39593221E+00;
  COFD[10630] = -3.62180319E-01;
  COFD[10631] = 1.59760241E-02;
  COFD[10632] = -2.10444847E+01;
  COFD[10633] = 5.05635598E+00;
  COFD[10634] = -4.17092215E-01;
  COFD[10635] = 1.70844561E-02;
  COFD[10636] = -2.09963429E+01;
  COFD[10637] = 5.05635598E+00;
  COFD[10638] = -4.17092215E-01;
  COFD[10639] = 1.70844561E-02;
  COFD[10640] = -2.09247762E+01;
  COFD[10641] = 5.05635598E+00;
  COFD[10642] = -4.17092215E-01;
  COFD[10643] = 1.70844561E-02;
  COFD[10644] = -1.80275050E+01;
  COFD[10645] = 3.55722529E+00;
  COFD[10646] = -1.69351339E-01;
  COFD[10647] = 4.18064360E-03;
  COFD[10648] = -2.08165540E+01;
  COFD[10649] = 5.10965671E+00;
  COFD[10650] = -4.34281725E-01;
  COFD[10651] = 1.82515265E-02;
  COFD[10652] = -2.08165540E+01;
  COFD[10653] = 5.10965671E+00;
  COFD[10654] = -4.34281725E-01;
  COFD[10655] = 1.82515265E-02;
  COFD[10656] = -1.45501106E+01;
  COFD[10657] = 3.57062617E+00;
  COFD[10658] = -2.57920745E-01;
  COFD[10659] = 1.15740264E-02;
  COFD[10660] = -1.78359091E+01;
  COFD[10661] = 4.95976558E+00;
  COFD[10662] = -4.27732001E-01;
  COFD[10663] = 1.85030487E-02;
  COFD[10664] = -1.76029792E+01;
  COFD[10665] = 4.38093272E+00;
  COFD[10666] = -3.60316345E-01;
  COFD[10667] = 1.58984540E-02;
  COFD[10668] = -1.89380489E+01;
  COFD[10669] = 4.70017385E+00;
  COFD[10670] = -3.99010079E-01;
  COFD[10671] = 1.74642383E-02;
  COFD[10672] = -1.76252000E+01;
  COFD[10673] = 4.38093272E+00;
  COFD[10674] = -3.60316345E-01;
  COFD[10675] = 1.58984540E-02;
  COFD[10676] = -1.87002631E+01;
  COFD[10677] = 4.21062259E+00;
  COFD[10678] = -2.72117720E-01;
  COFD[10679] = 9.36166287E-03;
  COFD[10680] = -1.89469698E+01;
  COFD[10681] = 4.70017385E+00;
  COFD[10682] = -3.99010079E-01;
  COFD[10683] = 1.74642383E-02;
  COFD[10684] = -1.89555098E+01;
  COFD[10685] = 4.70017385E+00;
  COFD[10686] = -3.99010079E-01;
  COFD[10687] = 1.74642383E-02;
  COFD[10688] = -1.72769846E+01;
  COFD[10689] = 4.24280031E+00;
  COFD[10690] = -3.42971692E-01;
  COFD[10691] = 1.51693290E-02;
  COFD[10692] = -1.75253870E+01;
  COFD[10693] = 4.38093272E+00;
  COFD[10694] = -3.60316345E-01;
  COFD[10695] = 1.58984540E-02;
  COFD[10696] = -1.95320461E+01;
  COFD[10697] = 4.95546444E+00;
  COFD[10698] = -4.27317415E-01;
  COFD[10699] = 1.84910222E-02;
  COFD[10700] = -1.95320461E+01;
  COFD[10701] = 4.95546444E+00;
  COFD[10702] = -4.27317415E-01;
  COFD[10703] = 1.84910222E-02;
  COFD[10704] = -1.95581354E+01;
  COFD[10705] = 4.95546444E+00;
  COFD[10706] = -4.27317415E-01;
  COFD[10707] = 1.84910222E-02;
  COFD[10708] = -1.95301804E+01;
  COFD[10709] = 4.94445276E+00;
  COFD[10710] = -4.26273387E-01;
  COFD[10711] = 1.84617401E-02;
  COFD[10712] = -1.87235317E+01;
  COFD[10713] = 4.62516229E+00;
  COFD[10714] = -3.90584144E-01;
  COFD[10715] = 1.71538634E-02;
  COFD[10716] = -2.06430588E+01;
  COFD[10717] = 5.11178824E+00;
  COFD[10718] = -4.32455482E-01;
  COFD[10719] = 1.80855222E-02;
  COFD[10720] = -1.96473348E+01;
  COFD[10721] = 4.48380817E+00;
  COFD[10722] = -3.16391175E-01;
  COFD[10723] = 1.16391945E-02;
  COFD[10724] = -1.96575545E+01;
  COFD[10725] = 4.48380817E+00;
  COFD[10726] = -3.16391175E-01;
  COFD[10727] = 1.16391945E-02;
  COFD[10728] = -2.01897258E+01;
  COFD[10729] = 4.76819070E+00;
  COFD[10730] = -3.63881341E-01;
  COFD[10731] = 1.41310657E-02;
  COFD[10732] = -2.01897258E+01;
  COFD[10733] = 4.76819070E+00;
  COFD[10734] = -3.63881341E-01;
  COFD[10735] = 1.41310657E-02;
  COFD[10736] = -1.97598789E+01;
  COFD[10737] = 4.52829025E+00;
  COFD[10738] = -3.23954783E-01;
  COFD[10739] = 1.20390717E-02;
  COFD[10740] = -2.03832180E+01;
  COFD[10741] = 5.08484349E+00;
  COFD[10742] = -4.33971732E-01;
  COFD[10743] = 1.83577657E-02;
  COFD[10744] = -2.03957119E+01;
  COFD[10745] = 5.08484349E+00;
  COFD[10746] = -4.33971732E-01;
  COFD[10747] = 1.83577657E-02;
  COFD[10748] = -2.04075594E+01;
  COFD[10749] = 5.08484349E+00;
  COFD[10750] = -4.33971732E-01;
  COFD[10751] = 1.83577657E-02;
  COFD[10752] = -2.05954465E+01;
  COFD[10753] = 5.07237780E+00;
  COFD[10754] = -4.21879496E-01;
  COFD[10755] = 1.74021378E-02;
  COFD[10756] = -2.06690747E+01;
  COFD[10757] = 5.10138987E+00;
  COFD[10758] = -4.29786314E-01;
  COFD[10759] = 1.79152451E-02;
  COFD[10760] = -2.06792731E+01;
  COFD[10761] = 5.10138987E+00;
  COFD[10762] = -4.29786314E-01;
  COFD[10763] = 1.79152451E-02;
  COFD[10764] = -1.95954924E+01;
  COFD[10765] = 4.98287158E+00;
  COFD[10766] = -4.30014729E-01;
  COFD[10767] = 1.85722259E-02;
  COFD[10768] = -2.02080037E+01;
  COFD[10769] = 4.69054487E+00;
  COFD[10770] = -3.51011795E-01;
  COFD[10771] = 1.34579254E-02;
  COFD[10772] = -2.02080037E+01;
  COFD[10773] = 4.69054487E+00;
  COFD[10774] = -3.51011795E-01;
  COFD[10775] = 1.34579254E-02;
  COFD[10776] = -1.73363480E+01;
  COFD[10777] = 4.24280031E+00;
  COFD[10778] = -3.42971692E-01;
  COFD[10779] = 1.51693290E-02;
  COFD[10780] = -1.75488694E+01;
  COFD[10781] = 4.38093272E+00;
  COFD[10782] = -3.60316345E-01;
  COFD[10783] = 1.58984540E-02;
  COFD[10784] = -1.75728909E+01;
  COFD[10785] = 4.38093272E+00;
  COFD[10786] = -3.60316345E-01;
  COFD[10787] = 1.58984540E-02;
  COFD[10788] = -1.93585544E+01;
  COFD[10789] = 4.53056710E+00;
  COFD[10790] = -3.24342968E-01;
  COFD[10791] = 1.20596526E-02;
  COFD[10792] = -1.77211477E+01;
  COFD[10793] = 4.24280031E+00;
  COFD[10794] = -3.42971692E-01;
  COFD[10795] = 1.51693290E-02;
  COFD[10796] = -1.87207313E+01;
  COFD[10797] = 4.61983256E+00;
  COFD[10798] = -3.89971404E-01;
  COFD[10799] = 1.71306317E-02;
  COFD[10800] = -2.03438029E+01;
  COFD[10801] = 5.07663244E+00;
  COFD[10802] = -4.34319960E-01;
  COFD[10803] = 1.84317867E-02;
  COFD[10804] = -2.06193089E+01;
  COFD[10805] = 5.11111865E+00;
  COFD[10806] = -4.34063622E-01;
  COFD[10807] = 1.82251651E-02;
  COFD[10808] = -1.91282565E+01;
  COFD[10809] = 4.75991278E+00;
  COFD[10810] = -4.05296156E-01;
  COFD[10811] = 1.76746877E-02;
  COFD[10812] = -1.78705159E+01;
  COFD[10813] = 4.30456786E+00;
  COFD[10814] = -3.50754877E-01;
  COFD[10815] = 1.54975381E-02;
  COFD[10816] = -1.91587270E+01;
  COFD[10817] = 4.22500762E+00;
  COFD[10818] = -2.74400016E-01;
  COFD[10819] = 9.47754705E-03;
  COFD[10820] = -1.91699915E+01;
  COFD[10821] = 4.22500762E+00;
  COFD[10822] = -2.74400016E-01;
  COFD[10823] = 9.47754705E-03;
  COFD[10824] = -1.95955177E+01;
  COFD[10825] = 4.98287158E+00;
  COFD[10826] = -4.30014729E-01;
  COFD[10827] = 1.85722259E-02;
  COFD[10828] = -2.06136008E+01;
  COFD[10829] = 5.11111865E+00;
  COFD[10830] = -4.34063622E-01;
  COFD[10831] = 1.82251651E-02;
  COFD[10832] = -2.06136008E+01;
  COFD[10833] = 5.11111865E+00;
  COFD[10834] = -4.34063622E-01;
  COFD[10835] = 1.82251651E-02;
  COFD[10836] = -2.06136008E+01;
  COFD[10837] = 5.11111865E+00;
  COFD[10838] = -4.34063622E-01;
  COFD[10839] = 1.82251651E-02;
  COFD[10840] = -2.06075716E+01;
  COFD[10841] = 5.11111865E+00;
  COFD[10842] = -4.34063622E-01;
  COFD[10843] = 1.82251651E-02;
  COFD[10844] = -1.87000252E+01;
  COFD[10845] = 4.61983256E+00;
  COFD[10846] = -3.89971404E-01;
  COFD[10847] = 1.71306317E-02;
  COFD[10848] = -1.96192825E+01;
  COFD[10849] = 4.91708832E+00;
  COFD[10850] = -4.23361260E-01;
  COFD[10851] = 1.83617469E-02;
  COFD[10852] = -2.09279720E+01;
  COFD[10853] = 5.07680752E+00;
  COFD[10854] = -4.24280733E-01;
  COFD[10855] = 1.75807248E-02;
  COFD[10856] = -2.09337809E+01;
  COFD[10857] = 5.07680752E+00;
  COFD[10858] = -4.24280733E-01;
  COFD[10859] = 1.75807248E-02;
  COFD[10860] = -2.02140286E+01;
  COFD[10861] = 4.69054487E+00;
  COFD[10862] = -3.51011795E-01;
  COFD[10863] = 1.34579254E-02;
  COFD[10864] = -2.02198463E+01;
  COFD[10865] = 4.69054487E+00;
  COFD[10866] = -3.51011795E-01;
  COFD[10867] = 1.34579254E-02;
  COFD[10868] = -2.01708848E+01;
  COFD[10869] = 4.97304611E+00;
  COFD[10870] = -4.01743383E-01;
  COFD[10871] = 1.62313746E-02;
  COFD[10872] = -1.76645080E+01;
  COFD[10873] = 4.38093272E+00;
  COFD[10874] = -3.60316345E-01;
  COFD[10875] = 1.58984540E-02;
  COFD[10876] = -1.93669811E+01;
  COFD[10877] = 4.84096762E+00;
  COFD[10878] = -4.14857437E-01;
  COFD[10879] = 1.80500164E-02;
  COFD[10880] = -2.06613717E+01;
  COFD[10881] = 5.08393260E+00;
  COFD[10882] = -4.25938990E-01;
  COFD[10883] = 1.76828881E-02;
  COFD[10884] = -2.07698372E+01;
  COFD[10885] = 5.08393260E+00;
  COFD[10886] = -4.25938990E-01;
  COFD[10887] = 1.76828881E-02;
  COFD[10888] = -2.08324828E+01;
  COFD[10889] = 5.08393260E+00;
  COFD[10890] = -4.25938990E-01;
  COFD[10891] = 1.76828881E-02;
  COFD[10892] = -2.00793174E+01;
  COFD[10893] = 4.90077593E+00;
  COFD[10894] = -4.21552326E-01;
  COFD[10895] = 1.82959533E-02;
  COFD[10896] = -2.06528388E+01;
  COFD[10897] = 5.08393260E+00;
  COFD[10898] = -4.25938990E-01;
  COFD[10899] = 1.76828881E-02;
  COFD[10900] = -2.07653300E+01;
  COFD[10901] = 5.08393260E+00;
  COFD[10902] = -4.25938990E-01;
  COFD[10903] = 1.76828881E-02;
  COFD[10904] = -1.96314659E+01;
  COFD[10905] = 4.79046117E+00;
  COFD[10906] = -4.08654983E-01;
  COFD[10907] = 1.77949016E-02;
  COFD[10908] = -2.06439254E+01;
  COFD[10909] = 5.08393260E+00;
  COFD[10910] = -4.25938990E-01;
  COFD[10911] = 1.76828881E-02;
  COFD[10912] = -1.92050172E+01;
  COFD[10913] = 4.70407510E+00;
  COFD[10914] = -3.99421025E-01;
  COFD[10915] = 1.74780295E-02;
  COFD[10916] = -1.86277853E+01;
  COFD[10917] = 4.58249233E+00;
  COFD[10918] = -3.85491945E-01;
  COFD[10919] = 1.69516294E-02;
  COFD[10920] = -2.09150269E+01;
  COFD[10921] = 4.91673221E+00;
  COFD[10922] = -3.91478503E-01;
  COFD[10923] = 1.56651571E-02;
  COFD[10924] = -2.08681962E+01;
  COFD[10925] = 4.91673221E+00;
  COFD[10926] = -3.91478503E-01;
  COFD[10927] = 1.56651571E-02;
  COFD[10928] = -2.07983647E+01;
  COFD[10929] = 4.91673221E+00;
  COFD[10930] = -3.91478503E-01;
  COFD[10931] = 1.56651571E-02;
  COFD[10932] = -1.72016081E+01;
  COFD[10933] = 3.11108578E+00;
  COFD[10934] = -1.00485263E-01;
  COFD[10935] = 7.56976059E-04;
  COFD[10936] = -2.09279720E+01;
  COFD[10937] = 5.07680752E+00;
  COFD[10938] = -4.24280733E-01;
  COFD[10939] = 1.75807248E-02;
  COFD[10940] = -2.09279720E+01;
  COFD[10941] = 5.07680752E+00;
  COFD[10942] = -4.24280733E-01;
  COFD[10943] = 1.75807248E-02;
  COFD[10944] = -1.26360335E+01;
  COFD[10945] = 2.88062866E+00;
  COFD[10946] = -1.67071255E-01;
  COFD[10947] = 7.58146324E-03;
  COFD[10948] = -1.57072822E+01;
  COFD[10949] = 4.26760732E+00;
  COFD[10950] = -3.46098875E-01;
  COFD[10951] = 1.53012333E-02;
  COFD[10952] = -1.53698844E+01;
  COFD[10953] = 3.61618043E+00;
  COFD[10954] = -2.63626979E-01;
  COFD[10955] = 1.18123303E-02;
  COFD[10956] = -1.66230596E+01;
  COFD[10957] = 3.92641057E+00;
  COFD[10958] = -3.03041624E-01;
  COFD[10959] = 1.34843019E-02;
  COFD[10960] = -1.53898267E+01;
  COFD[10961] = 3.61618043E+00;
  COFD[10962] = -2.63626979E-01;
  COFD[10963] = 1.18123303E-02;
  COFD[10964] = -1.99128699E+01;
  COFD[10965] = 5.07019743E+00;
  COFD[10966] = -4.20771044E-01;
  COFD[10967] = 1.73206308E-02;
  COFD[10968] = -1.66306324E+01;
  COFD[10969] = 3.92641057E+00;
  COFD[10970] = -3.03041624E-01;
  COFD[10971] = 1.34843019E-02;
  COFD[10972] = -1.66378626E+01;
  COFD[10973] = 3.92641057E+00;
  COFD[10974] = -3.03041624E-01;
  COFD[10975] = 1.34843019E-02;
  COFD[10976] = -1.51716539E+01;
  COFD[10977] = 3.51822289E+00;
  COFD[10978] = -2.51252276E-01;
  COFD[10979] = 1.12908198E-02;
  COFD[10980] = -1.52995686E+01;
  COFD[10981] = 3.61618043E+00;
  COFD[10982] = -2.63626979E-01;
  COFD[10983] = 1.18123303E-02;
  COFD[10984] = -1.73783244E+01;
  COFD[10985] = 4.25886998E+00;
  COFD[10986] = -3.44997921E-01;
  COFD[10987] = 1.52548168E-02;
  COFD[10988] = -1.73783244E+01;
  COFD[10989] = 4.25886998E+00;
  COFD[10990] = -3.44997921E-01;
  COFD[10991] = 1.52548168E-02;
  COFD[10992] = -1.74019563E+01;
  COFD[10993] = 4.25886998E+00;
  COFD[10994] = -3.44997921E-01;
  COFD[10995] = 1.52548168E-02;
  COFD[10996] = -1.73462514E+01;
  COFD[10997] = 4.23587636E+00;
  COFD[10998] = -3.42100311E-01;
  COFD[10999] = 1.51326432E-02;
  COFD[11000] = -1.63554516E+01;
  COFD[11001] = 3.81916246E+00;
  COFD[11002] = -2.89377488E-01;
  COFD[11003] = 1.29027185E-02;
  COFD[11004] = -1.92508490E+01;
  COFD[11005] = 4.80720615E+00;
  COFD[11006] = -4.10713865E-01;
  COFD[11007] = 1.78796989E-02;
  COFD[11008] = -2.03164307E+01;
  COFD[11009] = 5.10490437E+00;
  COFD[11010] = -4.30604875E-01;
  COFD[11011] = 1.79657483E-02;
  COFD[11012] = -2.03251786E+01;
  COFD[11013] = 5.10490437E+00;
  COFD[11014] = -4.30604875E-01;
  COFD[11015] = 1.79657483E-02;
  COFD[11016] = -2.01732368E+01;
  COFD[11017] = 5.08495657E+00;
  COFD[11018] = -4.33921751E-01;
  COFD[11019] = 1.83529076E-02;
  COFD[11020] = -2.01732368E+01;
  COFD[11021] = 5.08495657E+00;
  COFD[11022] = -4.33921751E-01;
  COFD[11023] = 1.83529076E-02;
  COFD[11024] = -2.03420688E+01;
  COFD[11025] = 5.11240438E+00;
  COFD[11026] = -4.32838751E-01;
  COFD[11027] = 1.81146314E-02;
  COFD[11028] = -1.88221298E+01;
  COFD[11029] = 4.68334372E+00;
  COFD[11030] = -3.97199777E-01;
  COFD[11031] = 1.74014858E-02;
  COFD[11032] = -1.88329577E+01;
  COFD[11033] = 4.68334372E+00;
  COFD[11034] = -3.97199777E-01;
  COFD[11035] = 1.74014858E-02;
  COFD[11036] = -1.88431919E+01;
  COFD[11037] = 4.68334372E+00;
  COFD[11038] = -3.97199777E-01;
  COFD[11039] = 1.74014858E-02;
  COFD[11040] = -1.96075824E+01;
  COFD[11041] = 4.94277430E+00;
  COFD[11042] = -4.26115109E-01;
  COFD[11043] = 1.84573494E-02;
  COFD[11044] = -1.94183972E+01;
  COFD[11045] = 4.85024145E+00;
  COFD[11046] = -4.15966521E-01;
  COFD[11047] = 1.80942811E-02;
  COFD[11048] = -1.94271257E+01;
  COFD[11049] = 4.85024145E+00;
  COFD[11050] = -4.15966521E-01;
  COFD[11051] = 1.80942811E-02;
  COFD[11052] = -1.74255139E+01;
  COFD[11053] = 4.30962284E+00;
  COFD[11054] = -3.51386735E-01;
  COFD[11055] = 1.55239786E-02;
  COFD[11056] = -2.03826373E+01;
  COFD[11057] = 5.09687716E+00;
  COFD[11058] = -4.34096685E-01;
  COFD[11059] = 1.83040328E-02;
  COFD[11060] = -2.03826373E+01;
  COFD[11061] = 5.09687716E+00;
  COFD[11062] = -4.34096685E-01;
  COFD[11063] = 1.83040328E-02;
  COFD[11064] = -1.52258472E+01;
  COFD[11065] = 3.51822289E+00;
  COFD[11066] = -2.51252276E-01;
  COFD[11067] = 1.12908198E-02;
  COFD[11068] = -1.53164220E+01;
  COFD[11069] = 3.61618043E+00;
  COFD[11070] = -2.63626979E-01;
  COFD[11071] = 1.18123303E-02;
  COFD[11072] = -1.53380783E+01;
  COFD[11073] = 3.61618043E+00;
  COFD[11074] = -2.63626979E-01;
  COFD[11075] = 1.18123303E-02;
  COFD[11076] = -1.99519812E+01;
  COFD[11077] = 5.11249977E+00;
  COFD[11078] = -4.32909999E-01;
  COFD[11079] = 1.81201425E-02;
  COFD[11080] = -1.55882932E+01;
  COFD[11081] = 3.51822289E+00;
  COFD[11082] = -2.51252276E-01;
  COFD[11083] = 1.12908198E-02;
  COFD[11084] = -1.63463181E+01;
  COFD[11085] = 3.81213432E+00;
  COFD[11086] = -2.88477875E-01;
  COFD[11087] = 1.28642729E-02;
  COFD[11088] = -1.86919680E+01;
  COFD[11089] = 4.64657086E+00;
  COFD[11090] = -3.93051861E-01;
  COFD[11091] = 1.72478156E-02;
  COFD[11092] = -1.91282565E+01;
  COFD[11093] = 4.75991278E+00;
  COFD[11094] = -4.05296156E-01;
  COFD[11095] = 1.76746877E-02;
  COFD[11096] = -1.69054193E+01;
  COFD[11097] = 4.03200874E+00;
  COFD[11098] = -3.16661037E-01;
  COFD[11099] = 1.40718252E-02;
  COFD[11100] = -1.56961364E+01;
  COFD[11101] = 3.56295389E+00;
  COFD[11102] = -2.56952848E-01;
  COFD[11103] = 1.15332924E-02;
  COFD[11104] = -2.03383870E+01;
  COFD[11105] = 5.07066053E+00;
  COFD[11106] = -4.21038968E-01;
  COFD[11107] = 1.73406210E-02;
  COFD[11108] = -2.03480872E+01;
  COFD[11109] = 5.07066053E+00;
  COFD[11110] = -4.21038968E-01;
  COFD[11111] = 1.73406210E-02;
  COFD[11112] = -1.74255349E+01;
  COFD[11113] = 4.30962284E+00;
  COFD[11114] = -3.51386735E-01;
  COFD[11115] = 1.55239786E-02;
  COFD[11116] = -1.91235327E+01;
  COFD[11117] = 4.75991278E+00;
  COFD[11118] = -4.05296156E-01;
  COFD[11119] = 1.76746877E-02;
  COFD[11120] = -1.91235327E+01;
  COFD[11121] = 4.75991278E+00;
  COFD[11122] = -4.05296156E-01;
  COFD[11123] = 1.76746877E-02;
  COFD[11124] = -1.91235327E+01;
  COFD[11125] = 4.75991278E+00;
  COFD[11126] = -4.05296156E-01;
  COFD[11127] = 1.76746877E-02;
  COFD[11128] = -1.91185332E+01;
  COFD[11129] = 4.75991278E+00;
  COFD[11130] = -4.05296156E-01;
  COFD[11131] = 1.76746877E-02;
  COFD[11132] = -1.63285665E+01;
  COFD[11133] = 3.81213432E+00;
  COFD[11134] = -2.88477875E-01;
  COFD[11135] = 1.28642729E-02;
  COFD[11136] = -1.73635244E+01;
  COFD[11137] = 4.19377249E+00;
  COFD[11138] = -3.36826583E-01;
  COFD[11139] = 1.49117907E-02;
  COFD[11140] = -1.98316531E+01;
  COFD[11141] = 4.90059433E+00;
  COFD[11142] = -4.21531841E-01;
  COFD[11143] = 1.82951913E-02;
  COFD[11144] = -1.98364596E+01;
  COFD[11145] = 4.90059433E+00;
  COFD[11146] = -4.21531841E-01;
  COFD[11147] = 1.82951913E-02;
  COFD[11148] = -2.03876331E+01;
  COFD[11149] = 5.09687716E+00;
  COFD[11150] = -4.34096685E-01;
  COFD[11151] = 1.83040328E-02;
  COFD[11152] = -2.03924473E+01;
  COFD[11153] = 5.09687716E+00;
  COFD[11154] = -4.34096685E-01;
  COFD[11155] = 1.83040328E-02;
  COFD[11156] = -1.95870599E+01;
  COFD[11157] = 5.02786063E+00;
  COFD[11158] = -4.33407036E-01;
  COFD[11159] = 1.86173863E-02;
  COFD[11160] = -1.54248753E+01;
  COFD[11161] = 3.61618043E+00;
  COFD[11162] = -2.63626979E-01;
  COFD[11163] = 1.18123303E-02;
  COFD[11164] = -1.71257524E+01;
  COFD[11165] = 4.11638829E+00;
  COFD[11166] = -3.27398967E-01;
  COFD[11167] = 1.45289335E-02;
  COFD[11168] = -1.95141763E+01;
  COFD[11169] = 4.88379708E+00;
  COFD[11170] = -4.19653406E-01;
  COFD[11171] = 1.82262166E-02;
  COFD[11172] = -1.96042659E+01;
  COFD[11173] = 4.88379708E+00;
  COFD[11174] = -4.19653406E-01;
  COFD[11175] = 1.82262166E-02;
  COFD[11176] = -1.96547124E+01;
  COFD[11177] = 4.88379708E+00;
  COFD[11178] = -4.19653406E-01;
  COFD[11179] = 1.82262166E-02;
  COFD[11180] = -1.77945929E+01;
  COFD[11181] = 4.17092346E+00;
  COFD[11182] = -3.33942303E-01;
  COFD[11183] = 1.47900250E-02;
  COFD[11184] = -1.95069524E+01;
  COFD[11185] = 4.88379708E+00;
  COFD[11186] = -4.19653406E-01;
  COFD[11187] = 1.82262166E-02;
  COFD[11188] = -1.96005896E+01;
  COFD[11189] = 4.88379708E+00;
  COFD[11190] = -4.19653406E-01;
  COFD[11191] = 1.82262166E-02;
  COFD[11192] = -1.74094463E+01;
  COFD[11193] = 4.07672614E+00;
  COFD[11194] = -3.22422553E-01;
  COFD[11195] = 1.43202018E-02;
  COFD[11196] = -1.94993865E+01;
  COFD[11197] = 4.88379708E+00;
  COFD[11198] = -4.19653406E-01;
  COFD[11199] = 1.82262166E-02;
  COFD[11200] = -1.68837161E+01;
  COFD[11201] = 3.93360092E+00;
  COFD[11202] = -3.03970323E-01;
  COFD[11203] = 1.35244351E-02;
  COFD[11204] = -1.62463719E+01;
  COFD[11205] = 3.77004990E+00;
  COFD[11206] = -2.83073908E-01;
  COFD[11207] = 1.26325053E-02;
  COFD[11208] = -2.04486358E+01;
  COFD[11209] = 5.04291001E+00;
  COFD[11210] = -4.33616195E-01;
  COFD[11211] = 1.85535769E-02;
  COFD[11212] = -2.04115737E+01;
  COFD[11213] = 5.04291001E+00;
  COFD[11214] = -4.33616195E-01;
  COFD[11215] = 1.85535769E-02;
  COFD[11216] = -2.03550125E+01;
  COFD[11217] = 5.04291001E+00;
  COFD[11218] = -4.33616195E-01;
  COFD[11219] = 1.85535769E-02;
  COFD[11220] = -2.00872249E+01;
  COFD[11221] = 4.70710678E+00;
  COFD[11222] = -3.53756713E-01;
  COFD[11223] = 1.36014556E-02;
  COFD[11224] = -1.98316531E+01;
  COFD[11225] = 4.90059433E+00;
  COFD[11226] = -4.21531841E-01;
  COFD[11227] = 1.82951913E-02;
  COFD[11228] = -1.98316531E+01;
  COFD[11229] = 4.90059433E+00;
  COFD[11230] = -4.21531841E-01;
  COFD[11231] = 1.82951913E-02;
  COFD[11232] = -1.17730119E+01;
  COFD[11233] = 2.50005623E+00;
  COFD[11234] = -1.15244430E-01;
  COFD[11235] = 5.22461498E-03;
  COFD[11236] = -1.44494342E+01;
  COFD[11237] = 3.75661778E+00;
  COFD[11238] = -2.81332435E-01;
  COFD[11239] = 1.25570601E-02;
  COFD[11240] = -1.42740249E+01;
  COFD[11241] = 3.17062703E+00;
  COFD[11242] = -2.05656056E-01;
  COFD[11243] = 9.29447288E-03;
  COFD[11244] = -1.54866259E+01;
  COFD[11245] = 3.48610358E+00;
  COFD[11246] = -2.47139842E-01;
  COFD[11247] = 1.11151150E-02;
  COFD[11248] = -1.42927208E+01;
  COFD[11249] = 3.17062703E+00;
  COFD[11250] = -2.05656056E-01;
  COFD[11251] = 9.29447288E-03;
  COFD[11252] = -1.96111069E+01;
  COFD[11253] = 5.05596840E+00;
  COFD[11254] = -4.33922312E-01;
  COFD[11255] = 1.85091254E-02;
  COFD[11256] = -1.54935213E+01;
  COFD[11257] = 3.48610358E+00;
  COFD[11258] = -2.47139842E-01;
  COFD[11259] = 1.11151150E-02;
  COFD[11260] = -1.55000959E+01;
  COFD[11261] = 3.48610358E+00;
  COFD[11262] = -2.47139842E-01;
  COFD[11263] = 1.11151150E-02;
  COFD[11264] = -1.40870946E+01;
  COFD[11265] = 3.07539186E+00;
  COFD[11266] = -1.93256663E-01;
  COFD[11267] = 8.75596004E-03;
  COFD[11268] = -1.42077489E+01;
  COFD[11269] = 3.17062703E+00;
  COFD[11270] = -2.05656056E-01;
  COFD[11271] = 9.29447288E-03;
  COFD[11272] = -1.60660161E+01;
  COFD[11273] = 3.74816264E+00;
  COFD[11274] = -2.80237953E-01;
  COFD[11275] = 1.25097217E-02;
  COFD[11276] = -1.60660161E+01;
  COFD[11277] = 3.74816264E+00;
  COFD[11278] = -2.80237953E-01;
  COFD[11279] = 1.25097217E-02;
  COFD[11280] = -1.60882845E+01;
  COFD[11281] = 3.74816264E+00;
  COFD[11282] = -2.80237953E-01;
  COFD[11283] = 1.25097217E-02;
  COFD[11284] = -1.60356633E+01;
  COFD[11285] = 3.72594559E+00;
  COFD[11286] = -2.77362842E-01;
  COFD[11287] = 1.23854090E-02;
  COFD[11288] = -1.52584124E+01;
  COFD[11289] = 3.39205846E+00;
  COFD[11290] = -2.34946466E-01;
  COFD[11291] = 1.05875775E-02;
  COFD[11292] = -1.80127001E+01;
  COFD[11293] = 4.36277453E+00;
  COFD[11294] = -3.58054094E-01;
  COFD[11295] = 1.58040675E-02;
  COFD[11296] = -1.98330547E+01;
  COFD[11297] = 5.01850806E+00;
  COFD[11298] = -4.33014322E-01;
  COFD[11299] = 1.86345933E-02;
  COFD[11300] = -1.98410536E+01;
  COFD[11301] = 5.01850806E+00;
  COFD[11302] = -4.33014322E-01;
  COFD[11303] = 1.86345933E-02;
  COFD[11304] = -1.94910523E+01;
  COFD[11305] = 4.90474703E+00;
  COFD[11306] = -4.21999139E-01;
  COFD[11307] = 1.83125175E-02;
  COFD[11308] = -1.94910523E+01;
  COFD[11309] = 4.90474703E+00;
  COFD[11310] = -4.21999139E-01;
  COFD[11311] = 1.83125175E-02;
  COFD[11312] = -1.98035220E+01;
  COFD[11313] = 5.00163073E+00;
  COFD[11314] = -4.31596051E-01;
  COFD[11315] = 1.86051404E-02;
  COFD[11316] = -1.74604055E+01;
  COFD[11317] = 4.17397785E+00;
  COFD[11318] = -3.34331805E-01;
  COFD[11319] = 1.48066506E-02;
  COFD[11320] = -1.74703696E+01;
  COFD[11321] = 4.17397785E+00;
  COFD[11322] = -3.34331805E-01;
  COFD[11323] = 1.48066506E-02;
  COFD[11324] = -1.74797713E+01;
  COFD[11325] = 4.17397785E+00;
  COFD[11326] = -3.34331805E-01;
  COFD[11327] = 1.48066506E-02;
  COFD[11328] = -1.84306595E+01;
  COFD[11329] = 4.52975934E+00;
  COFD[11330] = -3.78844481E-01;
  COFD[11331] = 1.66708727E-02;
  COFD[11332] = -1.81672350E+01;
  COFD[11333] = 4.40093543E+00;
  COFD[11334] = -3.62803060E-01;
  COFD[11335] = 1.60019832E-02;
  COFD[11336] = -1.81752157E+01;
  COFD[11337] = 4.40093543E+00;
  COFD[11338] = -3.62803060E-01;
  COFD[11339] = 1.60019832E-02;
  COFD[11340] = -1.61055556E+01;
  COFD[11341] = 3.79821467E+00;
  COFD[11342] = -2.86696917E-01;
  COFD[11343] = 1.27881871E-02;
  COFD[11344] = -1.97412791E+01;
  COFD[11345] = 4.94128114E+00;
  COFD[11346] = -4.25962403E-01;
  COFD[11347] = 1.84524254E-02;
  COFD[11348] = -1.97412791E+01;
  COFD[11349] = 4.94128114E+00;
  COFD[11350] = -4.25962403E-01;
  COFD[11351] = 1.84524254E-02;
  COFD[11352] = -1.41383842E+01;
  COFD[11353] = 3.07539186E+00;
  COFD[11354] = -1.93256663E-01;
  COFD[11355] = 8.75596004E-03;
  COFD[11356] = -1.42236285E+01;
  COFD[11357] = 3.17062703E+00;
  COFD[11358] = -2.05656056E-01;
  COFD[11359] = 9.29447288E-03;
  COFD[11360] = -1.42439819E+01;
  COFD[11361] = 3.17062703E+00;
  COFD[11362] = -2.05656056E-01;
  COFD[11363] = 9.29447288E-03;
  COFD[11364] = -1.94357909E+01;
  COFD[11365] = 5.00080668E+00;
  COFD[11366] = -4.31528741E-01;
  COFD[11367] = 1.86038738E-02;
  COFD[11368] = -1.44784682E+01;
  COFD[11369] = 3.07539186E+00;
  COFD[11370] = -1.93256663E-01;
  COFD[11371] = 8.75596004E-03;
  COFD[11372] = -1.52498349E+01;
  COFD[11373] = 3.38547303E+00;
  COFD[11374] = -2.34077576E-01;
  COFD[11375] = 1.05493143E-02;
  COFD[11376] = -1.73280831E+01;
  COFD[11377] = 4.13645728E+00;
  COFD[11378] = -3.29843940E-01;
  COFD[11379] = 1.46282165E-02;
  COFD[11380] = -1.78705159E+01;
  COFD[11381] = 4.30456786E+00;
  COFD[11382] = -3.50754877E-01;
  COFD[11383] = 1.54975381E-02;
  COFD[11384] = -1.56961364E+01;
  COFD[11385] = 3.56295389E+00;
  COFD[11386] = -2.56952848E-01;
  COFD[11387] = 1.15332924E-02;
  COFD[11388] = -1.45814369E+01;
  COFD[11389] = 3.11891242E+00;
  COFD[11390] = -1.98968978E-01;
  COFD[11391] = 9.00609460E-03;
  COFD[11392] = -2.00079459E+01;
  COFD[11393] = 5.05470569E+00;
  COFD[11394] = -4.33935698E-01;
  COFD[11395] = 1.85170899E-02;
  COFD[11396] = -2.00168428E+01;
  COFD[11397] = 5.05470569E+00;
  COFD[11398] = -4.33935698E-01;
  COFD[11399] = 1.85170899E-02;
  COFD[11400] = -1.61055745E+01;
  COFD[11401] = 3.79821467E+00;
  COFD[11402] = -2.86696917E-01;
  COFD[11403] = 1.27881871E-02;
  COFD[11404] = -1.78662683E+01;
  COFD[11405] = 4.30456786E+00;
  COFD[11406] = -3.50754877E-01;
  COFD[11407] = 1.54975381E-02;
  COFD[11408] = -1.78662683E+01;
  COFD[11409] = 4.30456786E+00;
  COFD[11410] = -3.50754877E-01;
  COFD[11411] = 1.54975381E-02;
  COFD[11412] = -1.78662683E+01;
  COFD[11413] = 4.30456786E+00;
  COFD[11414] = -3.50754877E-01;
  COFD[11415] = 1.54975381E-02;
  COFD[11416] = -1.78617684E+01;
  COFD[11417] = 4.30456786E+00;
  COFD[11418] = -3.50754877E-01;
  COFD[11419] = 1.54975381E-02;
  COFD[11420] = -1.52335903E+01;
  COFD[11421] = 3.38547303E+00;
  COFD[11422] = -2.34077576E-01;
  COFD[11423] = 1.05493143E-02;
  COFD[11424] = -1.60535905E+01;
  COFD[11425] = 3.68829239E+00;
  COFD[11426] = -2.72526207E-01;
  COFD[11427] = 1.21778683E-02;
  COFD[11428] = -1.85825816E+01;
  COFD[11429] = 4.46266131E+00;
  COFD[11430] = -3.70418513E-01;
  COFD[11431] = 1.63164500E-02;
  COFD[11432] = -1.85869032E+01;
  COFD[11433] = 4.46266131E+00;
  COFD[11434] = -3.70418513E-01;
  COFD[11435] = 1.63164500E-02;
  COFD[11436] = -1.97457755E+01;
  COFD[11437] = 4.94128114E+00;
  COFD[11438] = -4.25962403E-01;
  COFD[11439] = 1.84524254E-02;
  COFD[11440] = -1.97501043E+01;
  COFD[11441] = 4.94128114E+00;
  COFD[11442] = -4.25962403E-01;
  COFD[11443] = 1.84524254E-02;
  COFD[11444] = -1.85934452E+01;
  COFD[11445] = 4.69424075E+00;
  COFD[11446] = -3.98383666E-01;
  COFD[11447] = 1.74431368E-02;
  COFD[11448] = -1.43254630E+01;
  COFD[11449] = 3.17062703E+00;
  COFD[11450] = -2.05656056E-01;
  COFD[11451] = 9.29447288E-03;
  COFD[11452] = -1.58556527E+01;
  COFD[11453] = 3.62410630E+00;
  COFD[11454] = -2.64619083E-01;
  COFD[11455] = 1.18537381E-02;
  COFD[11456] = -1.82729180E+01;
  COFD[11457] = 4.44189951E+00;
  COFD[11458] = -3.67842227E-01;
  COFD[11459] = 1.62093788E-02;
  COFD[11460] = -1.83540756E+01;
  COFD[11461] = 4.44189951E+00;
  COFD[11462] = -3.67842227E-01;
  COFD[11463] = 1.62093788E-02;
  COFD[11464] = -1.83988545E+01;
  COFD[11465] = 4.44189951E+00;
  COFD[11466] = -3.67842227E-01;
  COFD[11467] = 1.62093788E-02;
  COFD[11468] = -1.64640566E+01;
  COFD[11469] = 3.66937109E+00;
  COFD[11470] = -2.70109258E-01;
  COFD[11471] = 1.20747951E-02;
  COFD[11472] = -1.82663493E+01;
  COFD[11473] = 4.44189951E+00;
  COFD[11474] = -3.67842227E-01;
  COFD[11475] = 1.62093788E-02;
  COFD[11476] = -1.83507928E+01;
  COFD[11477] = 4.44189951E+00;
  COFD[11478] = -3.67842227E-01;
  COFD[11479] = 1.62093788E-02;
  COFD[11480] = -1.61359016E+01;
  COFD[11481] = 3.59253470E+00;
  COFD[11482] = -2.60654943E-01;
  COFD[11483] = 1.16877425E-02;
  COFD[11484] = -1.82594604E+01;
  COFD[11485] = 4.44189951E+00;
  COFD[11486] = -3.67842227E-01;
  COFD[11487] = 1.62093788E-02;
  COFD[11488] = -1.57264250E+01;
  COFD[11489] = 3.49157164E+00;
  COFD[11490] = -2.47843678E-01;
  COFD[11491] = 1.11453576E-02;
  COFD[11492] = -1.51546668E+01;
  COFD[11493] = 3.34406542E+00;
  COFD[11494] = -2.28560920E-01;
  COFD[11495] = 1.03039697E-02;
  COFD[11496] = -1.94651351E+01;
  COFD[11497] = 4.73913103E+00;
  COFD[11498] = -4.03202051E-01;
  COFD[11499] = 1.76095470E-02;
  COFD[11500] = -1.94324983E+01;
  COFD[11501] = 4.73913103E+00;
  COFD[11502] = -4.03202051E-01;
  COFD[11503] = 1.76095470E-02;
  COFD[11504] = -1.93821548E+01;
  COFD[11505] = 4.73913103E+00;
  COFD[11506] = -4.03202051E-01;
  COFD[11507] = 1.76095470E-02;
  COFD[11508] = -2.05911016E+01;
  COFD[11509] = 5.07317174E+00;
  COFD[11510] = -4.22392704E-01;
  COFD[11511] = 1.74410531E-02;
  COFD[11512] = -1.85825816E+01;
  COFD[11513] = 4.46266131E+00;
  COFD[11514] = -3.70418513E-01;
  COFD[11515] = 1.63164500E-02;
  COFD[11516] = -1.85825816E+01;
  COFD[11517] = 4.46266131E+00;
  COFD[11518] = -3.70418513E-01;
  COFD[11519] = 1.63164500E-02;
  COFD[11520] = -1.71864041E+01;
  COFD[11521] = 4.56620281E+00;
  COFD[11522] = -3.83449842E-01;
  COFD[11523] = 1.68658834E-02;
  COFD[11524] = -1.83536707E+01;
  COFD[11525] = 4.91070584E+00;
  COFD[11526] = -3.90149100E-01;
  COFD[11527] = 1.55854298E-02;
  COFD[11528] = -1.96331086E+01;
  COFD[11529] = 5.07016932E+00;
  COFD[11530] = -4.34085095E-01;
  COFD[11531] = 1.84466394E-02;
  COFD[11532] = -2.02961331E+01;
  COFD[11533] = 5.08245277E+00;
  COFD[11534] = -4.25599233E-01;
  COFD[11535] = 1.76620606E-02;
  COFD[11536] = -1.96520790E+01;
  COFD[11537] = 5.07016932E+00;
  COFD[11538] = -4.34085095E-01;
  COFD[11539] = 1.84466394E-02;
  COFD[11540] = -1.26396168E+01;
  COFD[11541] = 1.33209942E+00;
  COFD[11542] = 1.66763686E-01;
  COFD[11543] = -1.22430611E-02;
  COFD[11544] = -2.03031742E+01;
  COFD[11545] = 5.08245277E+00;
  COFD[11546] = -4.25599233E-01;
  COFD[11547] = 1.76620606E-02;
  COFD[11548] = -2.03098898E+01;
  COFD[11549] = 5.08245277E+00;
  COFD[11550] = -4.25599233E-01;
  COFD[11551] = 1.76620606E-02;
  COFD[11552] = -1.95509376E+01;
  COFD[11553] = 5.04066185E+00;
  COFD[11554] = -4.33512682E-01;
  COFD[11555] = 1.85568949E-02;
  COFD[11556] = -1.95659391E+01;
  COFD[11557] = 5.07016932E+00;
  COFD[11558] = -4.34085095E-01;
  COFD[11559] = 1.84466394E-02;
  COFD[11560] = -2.00170663E+01;
  COFD[11561] = 4.91350151E+00;
  COFD[11562] = -3.90802264E-01;
  COFD[11563] = 1.56254380E-02;
  COFD[11564] = -2.00170663E+01;
  COFD[11565] = 4.91350151E+00;
  COFD[11566] = -3.90802264E-01;
  COFD[11567] = 1.56254380E-02;
  COFD[11568] = -2.00396362E+01;
  COFD[11569] = 4.91350151E+00;
  COFD[11570] = -3.90802264E-01;
  COFD[11571] = 1.56254380E-02;
  COFD[11572] = -2.00616904E+01;
  COFD[11573] = 4.92718612E+00;
  COFD[11574] = -3.93420387E-01;
  COFD[11575] = 1.57732507E-02;
  COFD[11576] = -2.03137904E+01;
  COFD[11577] = 5.11266027E+00;
  COFD[11578] = -4.33127534E-01;
  COFD[11579] = 1.81376717E-02;
  COFD[11580] = -1.89214468E+01;
  COFD[11581] = 4.11057738E+00;
  COFD[11582] = -2.56191293E-01;
  COFD[11583] = 8.55141399E-03;
  COFD[11584] = -1.42266912E+01;
  COFD[11585] = 1.87902060E+00;
  COFD[11586] = 8.54697399E-02;
  COFD[11587] = -8.32450539E-03;
  COFD[11588] = -1.42348519E+01;
  COFD[11589] = 1.87902060E+00;
  COFD[11590] = 8.54697399E-02;
  COFD[11591] = -8.32450539E-03;
  COFD[11592] = -1.55599834E+01;
  COFD[11593] = 2.49521408E+00;
  COFD[11594] = -7.15807314E-03;
  COFD[11595] = -3.82026901E-03;
  COFD[11596] = -1.55599834E+01;
  COFD[11597] = 2.49521408E+00;
  COFD[11598] = -7.15807314E-03;
  COFD[11599] = -3.82026901E-03;
  COFD[11600] = -1.44948574E+01;
  COFD[11601] = 1.99127206E+00;
  COFD[11602] = 6.86233935E-02;
  COFD[11603] = -7.50734012E-03;
  COFD[11604] = -1.95071393E+01;
  COFD[11605] = 4.44126512E+00;
  COFD[11606] = -3.09307355E-01;
  COFD[11607] = 1.12689434E-02;
  COFD[11608] = -1.95172909E+01;
  COFD[11609] = 4.44126512E+00;
  COFD[11610] = -3.09307355E-01;
  COFD[11611] = 1.12689434E-02;
  COFD[11612] = -1.95268731E+01;
  COFD[11613] = 4.44126512E+00;
  COFD[11614] = -3.09307355E-01;
  COFD[11615] = 1.12689434E-02;
  COFD[11616] = -1.81485932E+01;
  COFD[11617] = 3.73970418E+00;
  COFD[11618] = -1.98019935E-01;
  COFD[11619] = 5.62263318E-03;
  COFD[11620] = -1.88106329E+01;
  COFD[11621] = 4.02705431E+00;
  COFD[11622] = -2.42978330E-01;
  COFD[11623] = 7.88194462E-03;
  COFD[11624] = -1.88187751E+01;
  COFD[11625] = 4.02705431E+00;
  COFD[11626] = -2.42978330E-01;
  COFD[11627] = 7.88194462E-03;
  COFD[11628] = -1.99083190E+01;
  COFD[11629] = 4.89475553E+00;
  COFD[11630] = -3.86628956E-01;
  COFD[11631] = 1.53742544E-02;
  COFD[11632] = -1.53420365E+01;
  COFD[11633] = 2.32528407E+00;
  COFD[11634] = 1.83584096E-02;
  COFD[11635] = -5.06252594E-03;
  COFD[11636] = -1.53420365E+01;
  COFD[11637] = 2.32528407E+00;
  COFD[11638] = 1.83584096E-02;
  COFD[11639] = -5.06252594E-03;
  COFD[11640] = -1.96028714E+01;
  COFD[11641] = 5.04066185E+00;
  COFD[11642] = -4.33512682E-01;
  COFD[11643] = 1.85568949E-02;
  COFD[11644] = -1.95813421E+01;
  COFD[11645] = 5.07016932E+00;
  COFD[11646] = -4.34085095E-01;
  COFD[11647] = 1.84466394E-02;
  COFD[11648] = -1.96019830E+01;
  COFD[11649] = 5.07016932E+00;
  COFD[11650] = -4.34085095E-01;
  COFD[11651] = 1.84466394E-02;
  COFD[11652] = -1.41322728E+01;
  COFD[11653] = 1.99679546E+00;
  COFD[11654] = 6.77940496E-02;
  COFD[11655] = -7.46709980E-03;
  COFD[11656] = -1.99505749E+01;
  COFD[11657] = 5.04066185E+00;
  COFD[11658] = -4.33512682E-01;
  COFD[11659] = 1.85568949E-02;
  COFD[11660] = -2.03176481E+01;
  COFD[11661] = 5.11262039E+00;
  COFD[11662] = -4.33323900E-01;
  COFD[11663] = 1.81544791E-02;
  COFD[11664] = -1.95923594E+01;
  COFD[11665] = 4.50649892E+00;
  COFD[11666] = -3.20242473E-01;
  COFD[11667] = 1.18425246E-02;
  COFD[11668] = -1.91587270E+01;
  COFD[11669] = 4.22500762E+00;
  COFD[11670] = -2.74400016E-01;
  COFD[11671] = 9.47754705E-03;
  COFD[11672] = -2.03383870E+01;
  COFD[11673] = 5.07066053E+00;
  COFD[11674] = -4.21038968E-01;
  COFD[11675] = 1.73406210E-02;
  COFD[11676] = -2.00079459E+01;
  COFD[11677] = 5.05470569E+00;
  COFD[11678] = -4.33935698E-01;
  COFD[11679] = 1.85170899E-02;
  COFD[11680] = -1.31058431E+01;
  COFD[11681] = 1.35549552E+00;
  COFD[11682] = 1.63309684E-01;
  COFD[11683] = -1.20776029E-02;
  COFD[11684] = -1.31149140E+01;
  COFD[11685] = 1.35549552E+00;
  COFD[11686] = 1.63309684E-01;
  COFD[11687] = -1.20776029E-02;
  COFD[11688] = -1.99083384E+01;
  COFD[11689] = 4.89475553E+00;
  COFD[11690] = -3.86628956E-01;
  COFD[11691] = 1.53742544E-02;
  COFD[11692] = -1.91543779E+01;
  COFD[11693] = 4.22500762E+00;
  COFD[11694] = -2.74400016E-01;
  COFD[11695] = 9.47754705E-03;
  COFD[11696] = -1.91543779E+01;
  COFD[11697] = 4.22500762E+00;
  COFD[11698] = -2.74400016E-01;
  COFD[11699] = 9.47754705E-03;
  COFD[11700] = -1.91543779E+01;
  COFD[11701] = 4.22500762E+00;
  COFD[11702] = -2.74400016E-01;
  COFD[11703] = 9.47754705E-03;
  COFD[11704] = -1.91497714E+01;
  COFD[11705] = 4.22500762E+00;
  COFD[11706] = -2.74400016E-01;
  COFD[11707] = 9.47754705E-03;
  COFD[11708] = -2.03010778E+01;
  COFD[11709] = 5.11262039E+00;
  COFD[11710] = -4.33323900E-01;
  COFD[11711] = 1.81544791E-02;
  COFD[11712] = -2.02256135E+01;
  COFD[11713] = 4.95955284E+00;
  COFD[11714] = -3.99333312E-01;
  COFD[11715] = 1.60996624E-02;
  COFD[11716] = -1.87755546E+01;
  COFD[11717] = 3.88208519E+00;
  COFD[11718] = -2.20217240E-01;
  COFD[11719] = 6.73532722E-03;
  COFD[11720] = -1.87799796E+01;
  COFD[11721] = 3.88208519E+00;
  COFD[11722] = -2.20217240E-01;
  COFD[11723] = 6.73532722E-03;
  COFD[11724] = -1.53466395E+01;
  COFD[11725] = 2.32528407E+00;
  COFD[11726] = 1.83584096E-02;
  COFD[11727] = -5.06252594E-03;
  COFD[11728] = -1.53510717E+01;
  COFD[11729] = 2.32528407E+00;
  COFD[11730] = 1.83584096E-02;
  COFD[11731] = -5.06252594E-03;
  COFD[11732] = -1.69584443E+01;
  COFD[11733] = 3.30123108E+00;
  COFD[11734] = -1.29734218E-01;
  COFD[11735] = 2.20723807E-03;
  COFD[11736] = -1.96853277E+01;
  COFD[11737] = 5.07016932E+00;
  COFD[11738] = -4.34085095E-01;
  COFD[11739] = 1.84466394E-02;
  COFD[11740] = -2.03249413E+01;
  COFD[11741] = 5.04213709E+00;
  COFD[11742] = -4.14301021E-01;
  COFD[11743] = 1.69244123E-02;
  COFD[11744] = -1.86141109E+01;
  COFD[11745] = 3.93133269E+00;
  COFD[11746] = -2.27917775E-01;
  COFD[11747] = 7.12220842E-03;
  COFD[11748] = -1.86971749E+01;
  COFD[11749] = 3.93133269E+00;
  COFD[11750] = -2.27917775E-01;
  COFD[11751] = 7.12220842E-03;
  COFD[11752] = -1.87431497E+01;
  COFD[11753] = 3.93133269E+00;
  COFD[11754] = -2.27917775E-01;
  COFD[11755] = 7.12220842E-03;
  COFD[11756] = -2.07294449E+01;
  COFD[11757] = 4.97920482E+00;
  COFD[11758] = -4.02844963E-01;
  COFD[11759] = 1.62916118E-02;
  COFD[11760] = -1.86074013E+01;
  COFD[11761] = 3.93133269E+00;
  COFD[11762] = -2.27917775E-01;
  COFD[11763] = 7.12220842E-03;
  COFD[11764] = -1.86938087E+01;
  COFD[11765] = 3.93133269E+00;
  COFD[11766] = -2.27917775E-01;
  COFD[11767] = 7.12220842E-03;
  COFD[11768] = -2.07230317E+01;
  COFD[11769] = 5.06517206E+00;
  COFD[11770] = -4.19013181E-01;
  COFD[11771] = 1.71996247E-02;
  COFD[11772] = -1.86003666E+01;
  COFD[11773] = 3.93133269E+00;
  COFD[11774] = -2.27917775E-01;
  COFD[11775] = 7.12220842E-03;
  COFD[11776] = -2.05269887E+01;
  COFD[11777] = 5.08023567E+00;
  COFD[11778] = -4.25085989E-01;
  COFD[11779] = 1.76305031E-02;
  COFD[11780] = -2.02958084E+01;
  COFD[11781] = 5.11032634E+00;
  COFD[11782] = -4.34220213E-01;
  COFD[11783] = 1.82427171E-02;
  COFD[11784] = -1.73373407E+01;
  COFD[11785] = 3.11794258E+00;
  COFD[11786] = -1.01532806E-01;
  COFD[11787] = 8.08632217E-04;
  COFD[11788] = -1.73037761E+01;
  COFD[11789] = 3.11794258E+00;
  COFD[11790] = -1.01532806E-01;
  COFD[11791] = 8.08632217E-04;
  COFD[11792] = -1.72521179E+01;
  COFD[11793] = 3.11794258E+00;
  COFD[11794] = -1.01532806E-01;
  COFD[11795] = 8.08632217E-04;
  COFD[11796] = -9.69833851E+00;
  COFD[11797] = -3.10450492E-01;
  COFD[11798] = 4.06159654E-01;
  COFD[11799] = -2.35721858E-02;
  COFD[11800] = -1.87755546E+01;
  COFD[11801] = 3.88208519E+00;
  COFD[11802] = -2.20217240E-01;
  COFD[11803] = 6.73532722E-03;
  COFD[11804] = -1.87755546E+01;
  COFD[11805] = 3.88208519E+00;
  COFD[11806] = -2.20217240E-01;
  COFD[11807] = 6.73532722E-03;
  COFD[11808] = -1.71876536E+01;
  COFD[11809] = 4.56620281E+00;
  COFD[11810] = -3.83449842E-01;
  COFD[11811] = 1.68658834E-02;
  COFD[11812] = -1.83543176E+01;
  COFD[11813] = 4.91070584E+00;
  COFD[11814] = -3.90149100E-01;
  COFD[11815] = 1.55854298E-02;
  COFD[11816] = -1.96398389E+01;
  COFD[11817] = 5.07016932E+00;
  COFD[11818] = -4.34085095E-01;
  COFD[11819] = 1.84466394E-02;
  COFD[11820] = -2.03059756E+01;
  COFD[11821] = 5.08245277E+00;
  COFD[11822] = -4.25599233E-01;
  COFD[11823] = 1.76620606E-02;
  COFD[11824] = -1.96590714E+01;
  COFD[11825] = 5.07016932E+00;
  COFD[11826] = -4.34085095E-01;
  COFD[11827] = 1.84466394E-02;
  COFD[11828] = -1.26468597E+01;
  COFD[11829] = 1.33209942E+00;
  COFD[11830] = 1.66763686E-01;
  COFD[11831] = -1.22430611E-02;
  COFD[11832] = -2.03131578E+01;
  COFD[11833] = 5.08245277E+00;
  COFD[11834] = -4.25599233E-01;
  COFD[11835] = 1.76620606E-02;
  COFD[11836] = -2.03200097E+01;
  COFD[11837] = 5.08245277E+00;
  COFD[11838] = -4.25599233E-01;
  COFD[11839] = 1.76620606E-02;
  COFD[11840] = -1.95565000E+01;
  COFD[11841] = 5.04066185E+00;
  COFD[11842] = -4.33512682E-01;
  COFD[11843] = 1.85568949E-02;
  COFD[11844] = -1.95718184E+01;
  COFD[11845] = 5.07016932E+00;
  COFD[11846] = -4.34085095E-01;
  COFD[11847] = 1.84466394E-02;
  COFD[11848] = -2.00232471E+01;
  COFD[11849] = 4.91350151E+00;
  COFD[11850] = -3.90802264E-01;
  COFD[11851] = 1.56254380E-02;
  COFD[11852] = -2.00232471E+01;
  COFD[11853] = 4.91350151E+00;
  COFD[11854] = -3.90802264E-01;
  COFD[11855] = 1.56254380E-02;
  COFD[11856] = -2.00461043E+01;
  COFD[11857] = 4.91350151E+00;
  COFD[11858] = -3.90802264E-01;
  COFD[11859] = 1.56254380E-02;
  COFD[11860] = -2.00684325E+01;
  COFD[11861] = 4.92718612E+00;
  COFD[11862] = -3.93420387E-01;
  COFD[11863] = 1.57732507E-02;
  COFD[11864] = -2.03230250E+01;
  COFD[11865] = 5.11266027E+00;
  COFD[11866] = -4.33127534E-01;
  COFD[11867] = 1.81376717E-02;
  COFD[11868] = -1.89327109E+01;
  COFD[11869] = 4.11057738E+00;
  COFD[11870] = -2.56191293E-01;
  COFD[11871] = 8.55141399E-03;
  COFD[11872] = -1.42360875E+01;
  COFD[11873] = 1.87902060E+00;
  COFD[11874] = 8.54697399E-02;
  COFD[11875] = -8.32450539E-03;
  COFD[11876] = -1.42444043E+01;
  COFD[11877] = 1.87902060E+00;
  COFD[11878] = 8.54697399E-02;
  COFD[11879] = -8.32450539E-03;
  COFD[11880] = -1.55696866E+01;
  COFD[11881] = 2.49521408E+00;
  COFD[11882] = -7.15807314E-03;
  COFD[11883] = -3.82026901E-03;
  COFD[11884] = -1.55696866E+01;
  COFD[11885] = 2.49521408E+00;
  COFD[11886] = -7.15807314E-03;
  COFD[11887] = -3.82026901E-03;
  COFD[11888] = -1.45047062E+01;
  COFD[11889] = 1.99127206E+00;
  COFD[11890] = 6.86233935E-02;
  COFD[11891] = -7.50734012E-03;
  COFD[11892] = -1.95158593E+01;
  COFD[11893] = 4.44126512E+00;
  COFD[11894] = -3.09307355E-01;
  COFD[11895] = 1.12689434E-02;
  COFD[11896] = -1.95261914E+01;
  COFD[11897] = 4.44126512E+00;
  COFD[11898] = -3.09307355E-01;
  COFD[11899] = 1.12689434E-02;
  COFD[11900] = -1.95359474E+01;
  COFD[11901] = 4.44126512E+00;
  COFD[11902] = -3.09307355E-01;
  COFD[11903] = 1.12689434E-02;
  COFD[11904] = -1.81578349E+01;
  COFD[11905] = 3.73970418E+00;
  COFD[11906] = -1.98019935E-01;
  COFD[11907] = 5.62263318E-03;
  COFD[11908] = -1.88200362E+01;
  COFD[11909] = 4.02705431E+00;
  COFD[11910] = -2.42978330E-01;
  COFD[11911] = 7.88194462E-03;
  COFD[11912] = -1.88283342E+01;
  COFD[11913] = 4.02705431E+00;
  COFD[11914] = -2.42978330E-01;
  COFD[11915] = 7.88194462E-03;
  COFD[11916] = -1.99192769E+01;
  COFD[11917] = 4.89475553E+00;
  COFD[11918] = -3.86628956E-01;
  COFD[11919] = 1.53742544E-02;
  COFD[11920] = -1.53531009E+01;
  COFD[11921] = 2.32528407E+00;
  COFD[11922] = 1.83584096E-02;
  COFD[11923] = -5.06252594E-03;
  COFD[11924] = -1.53531009E+01;
  COFD[11925] = 2.32528407E+00;
  COFD[11926] = 1.83584096E-02;
  COFD[11927] = -5.06252594E-03;
  COFD[11928] = -1.96090464E+01;
  COFD[11929] = 5.04066185E+00;
  COFD[11930] = -4.33512682E-01;
  COFD[11931] = 1.85568949E-02;
  COFD[11932] = -1.95878046E+01;
  COFD[11933] = 5.07016932E+00;
  COFD[11934] = -4.34085095E-01;
  COFD[11935] = 1.84466394E-02;
  COFD[11936] = -1.96087197E+01;
  COFD[11937] = 5.07016932E+00;
  COFD[11938] = -4.34085095E-01;
  COFD[11939] = 1.84466394E-02;
  COFD[11940] = -1.41392713E+01;
  COFD[11941] = 1.99679546E+00;
  COFD[11942] = 6.77940496E-02;
  COFD[11943] = -7.46709980E-03;
  COFD[11944] = -1.99599718E+01;
  COFD[11945] = 5.04066185E+00;
  COFD[11946] = -4.33512682E-01;
  COFD[11947] = 1.85568949E-02;
  COFD[11948] = -2.03271975E+01;
  COFD[11949] = 5.11262039E+00;
  COFD[11950] = -4.33323900E-01;
  COFD[11951] = 1.81544791E-02;
  COFD[11952] = -1.96038148E+01;
  COFD[11953] = 4.50649892E+00;
  COFD[11954] = -3.20242473E-01;
  COFD[11955] = 1.18425246E-02;
  COFD[11956] = -1.91699915E+01;
  COFD[11957] = 4.22500762E+00;
  COFD[11958] = -2.74400016E-01;
  COFD[11959] = 9.47754705E-03;
  COFD[11960] = -2.03480872E+01;
  COFD[11961] = 5.07066053E+00;
  COFD[11962] = -4.21038968E-01;
  COFD[11963] = 1.73406210E-02;
  COFD[11964] = -2.00168428E+01;
  COFD[11965] = 5.05470569E+00;
  COFD[11966] = -4.33935698E-01;
  COFD[11967] = 1.85170899E-02;
  COFD[11968] = -1.31149140E+01;
  COFD[11969] = 1.35549552E+00;
  COFD[11970] = 1.63309684E-01;
  COFD[11971] = -1.20776029E-02;
  COFD[11972] = -1.31241524E+01;
  COFD[11973] = 1.35549552E+00;
  COFD[11974] = 1.63309684E-01;
  COFD[11975] = -1.20776029E-02;
  COFD[11976] = -1.99192967E+01;
  COFD[11977] = 4.89475553E+00;
  COFD[11978] = -3.86628956E-01;
  COFD[11979] = 1.53742544E-02;
  COFD[11980] = -1.91655438E+01;
  COFD[11981] = 4.22500762E+00;
  COFD[11982] = -2.74400016E-01;
  COFD[11983] = 9.47754705E-03;
  COFD[11984] = -1.91655438E+01;
  COFD[11985] = 4.22500762E+00;
  COFD[11986] = -2.74400016E-01;
  COFD[11987] = 9.47754705E-03;
  COFD[11988] = -1.91655438E+01;
  COFD[11989] = 4.22500762E+00;
  COFD[11990] = -2.74400016E-01;
  COFD[11991] = 9.47754705E-03;
  COFD[11992] = -1.91608337E+01;
  COFD[11993] = 4.22500762E+00;
  COFD[11994] = -2.74400016E-01;
  COFD[11995] = 9.47754705E-03;
  COFD[11996] = -2.03103130E+01;
  COFD[11997] = 5.11262039E+00;
  COFD[11998] = -4.33323900E-01;
  COFD[11999] = 1.81544791E-02;
  COFD[12000] = -2.02364539E+01;
  COFD[12001] = 4.95955284E+00;
  COFD[12002] = -3.99333312E-01;
  COFD[12003] = 1.60996624E-02;
  COFD[12004] = -1.87867269E+01;
  COFD[12005] = 3.88208519E+00;
  COFD[12006] = -2.20217240E-01;
  COFD[12007] = 6.73532722E-03;
  COFD[12008] = -1.87912524E+01;
  COFD[12009] = 3.88208519E+00;
  COFD[12010] = -2.20217240E-01;
  COFD[12011] = 6.73532722E-03;
  COFD[12012] = -1.53578074E+01;
  COFD[12013] = 2.32528407E+00;
  COFD[12014] = 1.83584096E-02;
  COFD[12015] = -5.06252594E-03;
  COFD[12016] = -1.53623401E+01;
  COFD[12017] = 2.32528407E+00;
  COFD[12018] = 1.83584096E-02;
  COFD[12019] = -5.06252594E-03;
  COFD[12020] = -1.69661509E+01;
  COFD[12021] = 3.30123108E+00;
  COFD[12022] = -1.29734218E-01;
  COFD[12023] = 2.20723807E-03;
  COFD[12024] = -1.96928045E+01;
  COFD[12025] = 5.07016932E+00;
  COFD[12026] = -4.34085095E-01;
  COFD[12027] = 1.84466394E-02;
  COFD[12028] = -2.03355590E+01;
  COFD[12029] = 5.04213709E+00;
  COFD[12030] = -4.14301021E-01;
  COFD[12031] = 1.69244123E-02;
  COFD[12032] = -1.86242334E+01;
  COFD[12033] = 3.93133269E+00;
  COFD[12034] = -2.27917775E-01;
  COFD[12035] = 7.12220842E-03;
  COFD[12036] = -1.87091488E+01;
  COFD[12037] = 3.93133269E+00;
  COFD[12038] = -2.27917775E-01;
  COFD[12039] = 7.12220842E-03;
  COFD[12040] = -1.87562921E+01;
  COFD[12041] = 3.93133269E+00;
  COFD[12042] = -2.27917775E-01;
  COFD[12043] = 7.12220842E-03;
  COFD[12044] = -2.07433918E+01;
  COFD[12045] = 4.97920482E+00;
  COFD[12046] = -4.02844963E-01;
  COFD[12047] = 1.62916118E-02;
  COFD[12048] = -1.86173875E+01;
  COFD[12049] = 3.93133269E+00;
  COFD[12050] = -2.27917775E-01;
  COFD[12051] = 7.12220842E-03;
  COFD[12052] = -1.87057013E+01;
  COFD[12053] = 3.93133269E+00;
  COFD[12054] = -2.27917775E-01;
  COFD[12055] = 7.12220842E-03;
  COFD[12056] = -2.07361202E+01;
  COFD[12057] = 5.06517206E+00;
  COFD[12058] = -4.19013181E-01;
  COFD[12059] = 1.71996247E-02;
  COFD[12060] = -1.86102119E+01;
  COFD[12061] = 3.93133269E+00;
  COFD[12062] = -2.27917775E-01;
  COFD[12063] = 7.12220842E-03;
  COFD[12064] = -2.05387979E+01;
  COFD[12065] = 5.08023567E+00;
  COFD[12066] = -4.25085989E-01;
  COFD[12067] = 1.76305031E-02;
  COFD[12068] = -2.03055080E+01;
  COFD[12069] = 5.11032634E+00;
  COFD[12070] = -4.34220213E-01;
  COFD[12071] = 1.82427171E-02;
  COFD[12072] = -1.73511715E+01;
  COFD[12073] = 3.11794258E+00;
  COFD[12074] = -1.01532806E-01;
  COFD[12075] = 8.08632217E-04;
  COFD[12076] = -1.73166971E+01;
  COFD[12077] = 3.11794258E+00;
  COFD[12078] = -1.01532806E-01;
  COFD[12079] = 8.08632217E-04;
  COFD[12080] = -1.72637557E+01;
  COFD[12081] = 3.11794258E+00;
  COFD[12082] = -1.01532806E-01;
  COFD[12083] = 8.08632217E-04;
  COFD[12084] = -9.70988614E+00;
  COFD[12085] = -3.10450492E-01;
  COFD[12086] = 4.06159654E-01;
  COFD[12087] = -2.35721858E-02;
  COFD[12088] = -1.87867269E+01;
  COFD[12089] = 3.88208519E+00;
  COFD[12090] = -2.20217240E-01;
  COFD[12091] = 6.73532722E-03;
  COFD[12092] = -1.87867269E+01;
  COFD[12093] = 3.88208519E+00;
  COFD[12094] = -2.20217240E-01;
  COFD[12095] = 6.73532722E-03;
  COFD[12096] = -1.29472088E+01;
  COFD[12097] = 3.12904711E+00;
  COFD[12098] = -2.00267602E-01;
  COFD[12099] = 9.06153724E-03;
  COFD[12100] = -1.61564240E+01;
  COFD[12101] = 4.57406894E+00;
  COFD[12102] = -3.84438074E-01;
  COFD[12103] = 1.69074675E-02;
  COFD[12104] = -1.57655978E+01;
  COFD[12105] = 3.87441160E+00;
  COFD[12106] = -2.96411944E-01;
  COFD[12107] = 1.32018011E-02;
  COFD[12108] = -1.71442446E+01;
  COFD[12109] = 4.20727805E+00;
  COFD[12110] = -3.38518137E-01;
  COFD[12111] = 1.49826208E-02;
  COFD[12112] = -1.57873872E+01;
  COFD[12113] = 3.87441160E+00;
  COFD[12114] = -2.96411944E-01;
  COFD[12115] = 1.32018011E-02;
  COFD[12116] = -1.94095167E+01;
  COFD[12117] = 4.89210282E+00;
  COFD[12118] = -3.86038601E-01;
  COFD[12119] = 1.53387922E-02;
  COFD[12120] = -1.71528986E+01;
  COFD[12121] = 4.20727805E+00;
  COFD[12122] = -3.38518137E-01;
  COFD[12123] = 1.49826208E-02;
  COFD[12124] = -1.71611787E+01;
  COFD[12125] = 4.20727805E+00;
  COFD[12126] = -3.38518137E-01;
  COFD[12127] = 1.49826208E-02;
  COFD[12128] = -1.54928119E+01;
  COFD[12129] = 3.73799764E+00;
  COFD[12130] = -2.78922749E-01;
  COFD[12131] = 1.24528579E-02;
  COFD[12132] = -1.56893726E+01;
  COFD[12133] = 3.87441160E+00;
  COFD[12134] = -2.96411944E-01;
  COFD[12135] = 1.32018011E-02;
  COFD[12136] = -1.79636831E+01;
  COFD[12137] = 4.56481098E+00;
  COFD[12138] = -3.83274058E-01;
  COFD[12139] = 1.68584426E-02;
  COFD[12140] = -1.79636831E+01;
  COFD[12141] = 4.56481098E+00;
  COFD[12142] = -3.83274058E-01;
  COFD[12143] = 1.68584426E-02;
  COFD[12144] = -1.79893106E+01;
  COFD[12145] = 4.56481098E+00;
  COFD[12146] = -3.83274058E-01;
  COFD[12147] = 1.68584426E-02;
  COFD[12148] = -1.79273560E+01;
  COFD[12149] = 4.53958872E+00;
  COFD[12150] = -3.80085082E-01;
  COFD[12151] = 1.67233237E-02;
  COFD[12152] = -1.69224801E+01;
  COFD[12153] = 4.11938612E+00;
  COFD[12154] = -3.27769287E-01;
  COFD[12155] = 1.45442039E-02;
  COFD[12156] = -1.96670123E+01;
  COFD[12157] = 5.00794480E+00;
  COFD[12158] = -4.32110444E-01;
  COFD[12159] = 1.86147351E-02;
  COFD[12160] = -2.00441745E+01;
  COFD[12161] = 4.99999936E+00;
  COFD[12162] = -4.06600796E-01;
  COFD[12163] = 1.64981582E-02;
  COFD[12164] = -2.00541047E+01;
  COFD[12165] = 4.99999936E+00;
  COFD[12166] = -4.06600796E-01;
  COFD[12167] = 1.64981582E-02;
  COFD[12168] = -2.01187563E+01;
  COFD[12169] = 5.07420737E+00;
  COFD[12170] = -4.23603424E-01;
  COFD[12171] = 1.75373879E-02;
  COFD[12172] = -2.01187563E+01;
  COFD[12173] = 5.07420737E+00;
  COFD[12174] = -4.23603424E-01;
  COFD[12175] = 1.75373879E-02;
  COFD[12176] = -2.01309255E+01;
  COFD[12177] = 5.03282199E+00;
  COFD[12178] = -4.12565985E-01;
  COFD[12179] = 1.68273619E-02;
  COFD[12180] = -1.92767107E+01;
  COFD[12181] = 4.90691097E+00;
  COFD[12182] = -4.22240144E-01;
  COFD[12183] = 1.83213252E-02;
  COFD[12184] = -1.92888802E+01;
  COFD[12185] = 4.90691097E+00;
  COFD[12186] = -4.22240144E-01;
  COFD[12187] = 1.83213252E-02;
  COFD[12188] = -1.93004127E+01;
  COFD[12189] = 4.90691097E+00;
  COFD[12190] = -4.22240144E-01;
  COFD[12191] = 1.83213252E-02;
  COFD[12192] = -1.98134954E+01;
  COFD[12193] = 5.05137814E+00;
  COFD[12194] = -4.33880542E-01;
  COFD[12195] = 1.85303256E-02;
  COFD[12196] = -1.97819603E+01;
  COFD[12197] = 5.02413756E+00;
  COFD[12198] = -4.33421683E-01;
  COFD[12199] = 1.86388438E-02;
  COFD[12200] = -1.97918695E+01;
  COFD[12201] = 5.02413756E+00;
  COFD[12202] = -4.33421683E-01;
  COFD[12203] = 1.86388438E-02;
  COFD[12204] = -1.79731337E+01;
  COFD[12205] = 4.61301162E+00;
  COFD[12206] = -3.89184048E-01;
  COFD[12207] = 1.71006222E-02;
  COFD[12208] = -2.03191996E+01;
  COFD[12209] = 5.07217478E+00;
  COFD[12210] = -4.21775859E-01;
  COFD[12211] = 1.73945008E-02;
  COFD[12212] = -2.03191996E+01;
  COFD[12213] = 5.07217478E+00;
  COFD[12214] = -4.21775859E-01;
  COFD[12215] = 1.73945008E-02;
  COFD[12216] = -1.55512098E+01;
  COFD[12217] = 3.73799764E+00;
  COFD[12218] = -2.78922749E-01;
  COFD[12219] = 1.24528579E-02;
  COFD[12220] = -1.57040988E+01;
  COFD[12221] = 3.87441160E+00;
  COFD[12222] = -2.96411944E-01;
  COFD[12223] = 1.32018011E-02;
  COFD[12224] = -1.57276742E+01;
  COFD[12225] = 3.87441160E+00;
  COFD[12226] = -2.96411944E-01;
  COFD[12227] = 1.32018011E-02;
  COFD[12228] = -1.96869777E+01;
  COFD[12229] = 5.03431543E+00;
  COFD[12230] = -4.12843348E-01;
  COFD[12231] = 1.68428432E-02;
  COFD[12232] = -1.59602862E+01;
  COFD[12233] = 3.73799764E+00;
  COFD[12234] = -2.78922749E-01;
  COFD[12235] = 1.24528579E-02;
  COFD[12236] = -1.69176098E+01;
  COFD[12237] = 4.11378655E+00;
  COFD[12238] = -3.27077608E-01;
  COFD[12239] = 1.45156838E-02;
  COFD[12240] = -1.91311051E+01;
  COFD[12241] = 4.86712577E+00;
  COFD[12242] = -4.17831941E-01;
  COFD[12243] = 1.81615845E-02;
  COFD[12244] = -1.95955177E+01;
  COFD[12245] = 4.98287158E+00;
  COFD[12246] = -4.30014729E-01;
  COFD[12247] = 1.85722259E-02;
  COFD[12248] = -1.74255349E+01;
  COFD[12249] = 4.30962284E+00;
  COFD[12250] = -3.51386735E-01;
  COFD[12251] = 1.55239786E-02;
  COFD[12252] = -1.61055745E+01;
  COFD[12253] = 3.79821467E+00;
  COFD[12254] = -2.86696917E-01;
  COFD[12255] = 1.27881871E-02;
  COFD[12256] = -1.99083384E+01;
  COFD[12257] = 4.89475553E+00;
  COFD[12258] = -3.86628956E-01;
  COFD[12259] = 1.53742544E-02;
  COFD[12260] = -1.99192967E+01;
  COFD[12261] = 4.89475553E+00;
  COFD[12262] = -3.86628956E-01;
  COFD[12263] = 1.53742544E-02;
  COFD[12264] = -1.79731581E+01;
  COFD[12265] = 4.61301162E+00;
  COFD[12266] = -3.89184048E-01;
  COFD[12267] = 1.71006222E-02;
  COFD[12268] = -1.95900084E+01;
  COFD[12269] = 4.98287158E+00;
  COFD[12270] = -4.30014729E-01;
  COFD[12271] = 1.85722259E-02;
  COFD[12272] = -1.95900084E+01;
  COFD[12273] = 4.98287158E+00;
  COFD[12274] = -4.30014729E-01;
  COFD[12275] = 1.85722259E-02;
  COFD[12276] = -1.95900084E+01;
  COFD[12277] = 4.98287158E+00;
  COFD[12278] = -4.30014729E-01;
  COFD[12279] = 1.85722259E-02;
  COFD[12280] = -1.95841870E+01;
  COFD[12281] = 4.98287158E+00;
  COFD[12282] = -4.30014729E-01;
  COFD[12283] = 1.85722259E-02;
  COFD[12284] = -1.68974841E+01;
  COFD[12285] = 4.11378655E+00;
  COFD[12286] = -3.27077608E-01;
  COFD[12287] = 1.45156838E-02;
  COFD[12288] = -1.79379781E+01;
  COFD[12289] = 4.49061160E+00;
  COFD[12290] = -3.73905084E-01;
  COFD[12291] = 1.64620749E-02;
  COFD[12292] = -2.01446476E+01;
  COFD[12293] = 5.03516244E+00;
  COFD[12294] = -4.33206320E-01;
  COFD[12295] = 1.85604611E-02;
  COFD[12296] = -2.01502539E+01;
  COFD[12297] = 5.03516244E+00;
  COFD[12298] = -4.33206320E-01;
  COFD[12299] = 1.85604611E-02;
  COFD[12300] = -2.03250169E+01;
  COFD[12301] = 5.07217478E+00;
  COFD[12302] = -4.21775859E-01;
  COFD[12303] = 1.73945008E-02;
  COFD[12304] = -2.03306318E+01;
  COFD[12305] = 5.07217478E+00;
  COFD[12306] = -4.21775859E-01;
  COFD[12307] = 1.73945008E-02;
  COFD[12308] = -1.96390676E+01;
  COFD[12309] = 5.08675981E+00;
  COFD[12310] = -4.33586606E-01;
  COFD[12311] = 1.83147314E-02;
  COFD[12312] = -1.58258845E+01;
  COFD[12313] = 3.87441160E+00;
  COFD[12314] = -2.96411944E-01;
  COFD[12315] = 1.32018011E-02;
  COFD[12316] = -1.76553196E+01;
  COFD[12317] = 4.39684215E+00;
  COFD[12318] = -3.62293569E-01;
  COFD[12319] = 1.59807448E-02;
  COFD[12320] = -1.98184555E+01;
  COFD[12321] = 5.03178087E+00;
  COFD[12322] = -4.33314055E-01;
  COFD[12323] = 1.85881203E-02;
  COFD[12324] = -1.99232165E+01;
  COFD[12325] = 5.03178087E+00;
  COFD[12326] = -4.33314055E-01;
  COFD[12327] = 1.85881203E-02;
  COFD[12328] = -1.99833423E+01;
  COFD[12329] = 5.03178087E+00;
  COFD[12330] = -4.33314055E-01;
  COFD[12331] = 1.85881203E-02;
  COFD[12332] = -1.84491182E+01;
  COFD[12333] = 4.46789337E+00;
  COFD[12334] = -3.71068329E-01;
  COFD[12335] = 1.63434655E-02;
  COFD[12336] = -1.98101824E+01;
  COFD[12337] = 5.03178087E+00;
  COFD[12338] = -4.33314055E-01;
  COFD[12339] = 1.85881203E-02;
  COFD[12340] = -1.99188791E+01;
  COFD[12341] = 5.03178087E+00;
  COFD[12342] = -4.33314055E-01;
  COFD[12343] = 1.85881203E-02;
  COFD[12344] = -1.79907993E+01;
  COFD[12345] = 4.35286258E+00;
  COFD[12346] = -3.56807680E-01;
  COFD[12347] = 1.57515479E-02;
  COFD[12348] = -1.98015358E+01;
  COFD[12349] = 5.03178087E+00;
  COFD[12350] = -4.33314055E-01;
  COFD[12351] = 1.85881203E-02;
  COFD[12352] = -1.74425735E+01;
  COFD[12353] = 4.21395656E+00;
  COFD[12354] = -3.39355503E-01;
  COFD[12355] = 1.50177298E-02;
  COFD[12356] = -1.68322937E+01;
  COFD[12357] = 4.07749999E+00;
  COFD[12358] = -3.22521584E-01;
  COFD[12359] = 1.43244419E-02;
  COFD[12360] = -2.06352177E+01;
  COFD[12361] = 5.10650228E+00;
  COFD[12362] = -4.34343731E-01;
  COFD[12363] = 1.82736154E-02;
  COFD[12364] = -2.05904325E+01;
  COFD[12365] = 5.10650228E+00;
  COFD[12366] = -4.34343731E-01;
  COFD[12367] = 1.82736154E-02;
  COFD[12368] = -2.05233297E+01;
  COFD[12369] = 5.10650228E+00;
  COFD[12370] = -4.34343731E-01;
  COFD[12371] = 1.82736154E-02;
  COFD[12372] = -1.91327329E+01;
  COFD[12373] = 4.28441944E+00;
  COFD[12374] = -2.83837281E-01;
  COFD[12375] = 9.95708986E-03;
  COFD[12376] = -2.01446476E+01;
  COFD[12377] = 5.03516244E+00;
  COFD[12378] = -4.33206320E-01;
  COFD[12379] = 1.85604611E-02;
  COFD[12380] = -2.01446476E+01;
  COFD[12381] = 5.03516244E+00;
  COFD[12382] = -4.33206320E-01;
  COFD[12383] = 1.85604611E-02;
  COFD[12384] = -1.45496080E+01;
  COFD[12385] = 3.57062617E+00;
  COFD[12386] = -2.57920745E-01;
  COFD[12387] = 1.15740264E-02;
  COFD[12388] = -1.78356521E+01;
  COFD[12389] = 4.95976558E+00;
  COFD[12390] = -4.27732001E-01;
  COFD[12391] = 1.85030487E-02;
  COFD[12392] = -1.75999275E+01;
  COFD[12393] = 4.38093272E+00;
  COFD[12394] = -3.60316345E-01;
  COFD[12395] = 1.58984540E-02;
  COFD[12396] = -1.89332387E+01;
  COFD[12397] = 4.70017385E+00;
  COFD[12398] = -3.99010079E-01;
  COFD[12399] = 1.74642383E-02;
  COFD[12400] = -1.76220101E+01;
  COFD[12401] = 4.38093272E+00;
  COFD[12402] = -3.60316345E-01;
  COFD[12403] = 1.58984540E-02;
  COFD[12404] = -1.86969395E+01;
  COFD[12405] = 4.21062259E+00;
  COFD[12406] = -2.72117720E-01;
  COFD[12407] = 9.36166287E-03;
  COFD[12408] = -1.89420734E+01;
  COFD[12409] = 4.70017385E+00;
  COFD[12410] = -3.99010079E-01;
  COFD[12411] = 1.74642383E-02;
  COFD[12412] = -1.89505295E+01;
  COFD[12413] = 4.70017385E+00;
  COFD[12414] = -3.99010079E-01;
  COFD[12415] = 1.74642383E-02;
  COFD[12416] = -1.72745291E+01;
  COFD[12417] = 4.24280031E+00;
  COFD[12418] = -3.42971692E-01;
  COFD[12419] = 1.51693290E-02;
  COFD[12420] = -1.75227729E+01;
  COFD[12421] = 4.38093272E+00;
  COFD[12422] = -3.60316345E-01;
  COFD[12423] = 1.58984540E-02;
  COFD[12424] = -1.95292789E+01;
  COFD[12425] = 4.95546444E+00;
  COFD[12426] = -4.27317415E-01;
  COFD[12427] = 1.84910222E-02;
  COFD[12428] = -1.95292789E+01;
  COFD[12429] = 4.95546444E+00;
  COFD[12430] = -4.27317415E-01;
  COFD[12431] = 1.84910222E-02;
  COFD[12432] = -1.95552204E+01;
  COFD[12433] = 4.95546444E+00;
  COFD[12434] = -4.27317415E-01;
  COFD[12435] = 1.84910222E-02;
  COFD[12436] = -1.95271226E+01;
  COFD[12437] = 4.94445276E+00;
  COFD[12438] = -4.26273387E-01;
  COFD[12439] = 1.84617401E-02;
  COFD[12440] = -1.87190862E+01;
  COFD[12441] = 4.62516229E+00;
  COFD[12442] = -3.90584144E-01;
  COFD[12443] = 1.71538634E-02;
  COFD[12444] = -2.06373509E+01;
  COFD[12445] = 5.11178824E+00;
  COFD[12446] = -4.32455482E-01;
  COFD[12447] = 1.80855222E-02;
  COFD[12448] = -1.96427934E+01;
  COFD[12449] = 4.48380817E+00;
  COFD[12450] = -3.16391175E-01;
  COFD[12451] = 1.16391945E-02;
  COFD[12452] = -1.96529197E+01;
  COFD[12453] = 4.48380817E+00;
  COFD[12454] = -3.16391175E-01;
  COFD[12455] = 1.16391945E-02;
  COFD[12456] = -2.01850003E+01;
  COFD[12457] = 4.76819070E+00;
  COFD[12458] = -3.63881341E-01;
  COFD[12459] = 1.41310657E-02;
  COFD[12460] = -2.01850003E+01;
  COFD[12461] = 4.76819070E+00;
  COFD[12462] = -3.63881341E-01;
  COFD[12463] = 1.41310657E-02;
  COFD[12464] = -1.97550649E+01;
  COFD[12465] = 4.52829025E+00;
  COFD[12466] = -3.23954783E-01;
  COFD[12467] = 1.20390717E-02;
  COFD[12468] = -2.03790727E+01;
  COFD[12469] = 5.08484349E+00;
  COFD[12470] = -4.33971732E-01;
  COFD[12471] = 1.83577657E-02;
  COFD[12472] = -2.03914622E+01;
  COFD[12473] = 5.08484349E+00;
  COFD[12474] = -4.33971732E-01;
  COFD[12475] = 1.83577657E-02;
  COFD[12476] = -2.04032083E+01;
  COFD[12477] = 5.08484349E+00;
  COFD[12478] = -4.33971732E-01;
  COFD[12479] = 1.83577657E-02;
  COFD[12480] = -2.05909968E+01;
  COFD[12481] = 5.07237780E+00;
  COFD[12482] = -4.21879496E-01;
  COFD[12483] = 1.74021378E-02;
  COFD[12484] = -2.06645292E+01;
  COFD[12485] = 5.10138987E+00;
  COFD[12486] = -4.29786314E-01;
  COFD[12487] = 1.79152451E-02;
  COFD[12488] = -2.06746343E+01;
  COFD[12489] = 5.10138987E+00;
  COFD[12490] = -4.29786314E-01;
  COFD[12491] = 1.79152451E-02;
  COFD[12492] = -1.95899835E+01;
  COFD[12493] = 4.98287158E+00;
  COFD[12494] = -4.30014729E-01;
  COFD[12495] = 1.85722259E-02;
  COFD[12496] = -2.02024259E+01;
  COFD[12497] = 4.69054487E+00;
  COFD[12498] = -3.51011795E-01;
  COFD[12499] = 1.34579254E-02;
  COFD[12500] = -2.02024259E+01;
  COFD[12501] = 4.69054487E+00;
  COFD[12502] = -3.51011795E-01;
  COFD[12503] = 1.34579254E-02;
  COFD[12504] = -1.73335838E+01;
  COFD[12505] = 4.24280031E+00;
  COFD[12506] = -3.42971692E-01;
  COFD[12507] = 1.51693290E-02;
  COFD[12508] = -1.75459573E+01;
  COFD[12509] = 4.38093272E+00;
  COFD[12510] = -3.60316345E-01;
  COFD[12511] = 1.58984540E-02;
  COFD[12512] = -1.75698359E+01;
  COFD[12513] = 4.38093272E+00;
  COFD[12514] = -3.60316345E-01;
  COFD[12515] = 1.58984540E-02;
  COFD[12516] = -1.93553613E+01;
  COFD[12517] = 4.53056710E+00;
  COFD[12518] = -3.24342968E-01;
  COFD[12519] = 1.20596526E-02;
  COFD[12520] = -1.77166059E+01;
  COFD[12521] = 4.24280031E+00;
  COFD[12522] = -3.42971692E-01;
  COFD[12523] = 1.51693290E-02;
  COFD[12524] = -1.87160984E+01;
  COFD[12525] = 4.61983256E+00;
  COFD[12526] = -3.89971404E-01;
  COFD[12527] = 1.71306317E-02;
  COFD[12528] = -2.03379692E+01;
  COFD[12529] = 5.07663244E+00;
  COFD[12530] = -4.34319960E-01;
  COFD[12531] = 1.84317867E-02;
  COFD[12532] = -2.06136008E+01;
  COFD[12533] = 5.11111865E+00;
  COFD[12534] = -4.34063622E-01;
  COFD[12535] = 1.82251651E-02;
  COFD[12536] = -1.91235327E+01;
  COFD[12537] = 4.75991278E+00;
  COFD[12538] = -4.05296156E-01;
  COFD[12539] = 1.76746877E-02;
  COFD[12540] = -1.78662683E+01;
  COFD[12541] = 4.30456786E+00;
  COFD[12542] = -3.50754877E-01;
  COFD[12543] = 1.54975381E-02;
  COFD[12544] = -1.91543779E+01;
  COFD[12545] = 4.22500762E+00;
  COFD[12546] = -2.74400016E-01;
  COFD[12547] = 9.47754705E-03;
  COFD[12548] = -1.91655438E+01;
  COFD[12549] = 4.22500762E+00;
  COFD[12550] = -2.74400016E-01;
  COFD[12551] = 9.47754705E-03;
  COFD[12552] = -1.95900084E+01;
  COFD[12553] = 4.98287158E+00;
  COFD[12554] = -4.30014729E-01;
  COFD[12555] = 1.85722259E-02;
  COFD[12556] = -2.06079571E+01;
  COFD[12557] = 5.11111865E+00;
  COFD[12558] = -4.34063622E-01;
  COFD[12559] = 1.82251651E-02;
  COFD[12560] = -2.06079571E+01;
  COFD[12561] = 5.11111865E+00;
  COFD[12562] = -4.34063622E-01;
  COFD[12563] = 1.82251651E-02;
  COFD[12564] = -2.06079571E+01;
  COFD[12565] = 5.11111865E+00;
  COFD[12566] = -4.34063622E-01;
  COFD[12567] = 1.82251651E-02;
  COFD[12568] = -2.06019952E+01;
  COFD[12569] = 5.11111865E+00;
  COFD[12570] = -4.34063622E-01;
  COFD[12571] = 1.82251651E-02;
  COFD[12572] = -1.86955794E+01;
  COFD[12573] = 4.61983256E+00;
  COFD[12574] = -3.89971404E-01;
  COFD[12575] = 1.71306317E-02;
  COFD[12576] = -1.96138490E+01;
  COFD[12577] = 4.91708832E+00;
  COFD[12578] = -4.23361260E-01;
  COFD[12579] = 1.83617469E-02;
  COFD[12580] = -2.09223240E+01;
  COFD[12581] = 5.07680752E+00;
  COFD[12582] = -4.24280733E-01;
  COFD[12583] = 1.75807248E-02;
  COFD[12584] = -2.09280673E+01;
  COFD[12585] = 5.07680752E+00;
  COFD[12586] = -4.24280733E-01;
  COFD[12587] = 1.75807248E-02;
  COFD[12588] = -2.02083836E+01;
  COFD[12589] = 4.69054487E+00;
  COFD[12590] = -3.51011795E-01;
  COFD[12591] = 1.34579254E-02;
  COFD[12592] = -2.02141356E+01;
  COFD[12593] = 4.69054487E+00;
  COFD[12594] = -3.51011795E-01;
  COFD[12595] = 1.34579254E-02;
  COFD[12596] = -2.01673095E+01;
  COFD[12597] = 4.97304611E+00;
  COFD[12598] = -4.01743383E-01;
  COFD[12599] = 1.62313746E-02;
  COFD[12600] = -1.76610581E+01;
  COFD[12601] = 4.38093272E+00;
  COFD[12602] = -3.60316345E-01;
  COFD[12603] = 1.58984540E-02;
  COFD[12604] = -1.93616894E+01;
  COFD[12605] = 4.84096762E+00;
  COFD[12606] = -4.14857437E-01;
  COFD[12607] = 1.80500164E-02;
  COFD[12608] = -2.06563899E+01;
  COFD[12609] = 5.08393260E+00;
  COFD[12610] = -4.25938990E-01;
  COFD[12611] = 1.76828881E-02;
  COFD[12612] = -2.07636559E+01;
  COFD[12613] = 5.08393260E+00;
  COFD[12614] = -4.25938990E-01;
  COFD[12615] = 1.76828881E-02;
  COFD[12616] = -2.08254822E+01;
  COFD[12617] = 5.08393260E+00;
  COFD[12618] = -4.25938990E-01;
  COFD[12619] = 1.76828881E-02;
  COFD[12620] = -2.00717215E+01;
  COFD[12621] = 4.90077593E+00;
  COFD[12622] = -4.21552326E-01;
  COFD[12623] = 1.82959533E-02;
  COFD[12624] = -2.06479408E+01;
  COFD[12625] = 5.08393260E+00;
  COFD[12626] = -4.25938990E-01;
  COFD[12627] = 1.76828881E-02;
  COFD[12628] = -2.07592038E+01;
  COFD[12629] = 5.08393260E+00;
  COFD[12630] = -4.25938990E-01;
  COFD[12631] = 1.76828881E-02;
  COFD[12632] = -1.96245042E+01;
  COFD[12633] = 4.79046117E+00;
  COFD[12634] = -4.08654983E-01;
  COFD[12635] = 1.77949016E-02;
  COFD[12636] = -2.06391136E+01;
  COFD[12637] = 5.08393260E+00;
  COFD[12638] = -4.25938990E-01;
  COFD[12639] = 1.76828881E-02;
  COFD[12640] = -1.91989473E+01;
  COFD[12641] = 4.70407510E+00;
  COFD[12642] = -3.99421025E-01;
  COFD[12643] = 1.74780295E-02;
  COFD[12644] = -1.86230619E+01;
  COFD[12645] = 4.58249233E+00;
  COFD[12646] = -3.85491945E-01;
  COFD[12647] = 1.69516294E-02;
  COFD[12648] = -2.09075187E+01;
  COFD[12649] = 4.91673221E+00;
  COFD[12650] = -3.91478503E-01;
  COFD[12651] = 1.56651571E-02;
  COFD[12652] = -2.08613547E+01;
  COFD[12653] = 4.91673221E+00;
  COFD[12654] = -3.91478503E-01;
  COFD[12655] = 1.56651571E-02;
  COFD[12656] = -2.07924097E+01;
  COFD[12657] = 4.91673221E+00;
  COFD[12658] = -3.91478503E-01;
  COFD[12659] = 1.56651571E-02;
  COFD[12660] = -1.71957133E+01;
  COFD[12661] = 3.11108578E+00;
  COFD[12662] = -1.00485263E-01;
  COFD[12663] = 7.56976059E-04;
  COFD[12664] = -2.09223240E+01;
  COFD[12665] = 5.07680752E+00;
  COFD[12666] = -4.24280733E-01;
  COFD[12667] = 1.75807248E-02;
  COFD[12668] = -2.09223240E+01;
  COFD[12669] = 5.07680752E+00;
  COFD[12670] = -4.24280733E-01;
  COFD[12671] = 1.75807248E-02;
  COFD[12672] = -1.45496080E+01;
  COFD[12673] = 3.57062617E+00;
  COFD[12674] = -2.57920745E-01;
  COFD[12675] = 1.15740264E-02;
  COFD[12676] = -1.78356521E+01;
  COFD[12677] = 4.95976558E+00;
  COFD[12678] = -4.27732001E-01;
  COFD[12679] = 1.85030487E-02;
  COFD[12680] = -1.75999275E+01;
  COFD[12681] = 4.38093272E+00;
  COFD[12682] = -3.60316345E-01;
  COFD[12683] = 1.58984540E-02;
  COFD[12684] = -1.89332387E+01;
  COFD[12685] = 4.70017385E+00;
  COFD[12686] = -3.99010079E-01;
  COFD[12687] = 1.74642383E-02;
  COFD[12688] = -1.76220101E+01;
  COFD[12689] = 4.38093272E+00;
  COFD[12690] = -3.60316345E-01;
  COFD[12691] = 1.58984540E-02;
  COFD[12692] = -1.86969395E+01;
  COFD[12693] = 4.21062259E+00;
  COFD[12694] = -2.72117720E-01;
  COFD[12695] = 9.36166287E-03;
  COFD[12696] = -1.89420734E+01;
  COFD[12697] = 4.70017385E+00;
  COFD[12698] = -3.99010079E-01;
  COFD[12699] = 1.74642383E-02;
  COFD[12700] = -1.89505295E+01;
  COFD[12701] = 4.70017385E+00;
  COFD[12702] = -3.99010079E-01;
  COFD[12703] = 1.74642383E-02;
  COFD[12704] = -1.72745291E+01;
  COFD[12705] = 4.24280031E+00;
  COFD[12706] = -3.42971692E-01;
  COFD[12707] = 1.51693290E-02;
  COFD[12708] = -1.75227729E+01;
  COFD[12709] = 4.38093272E+00;
  COFD[12710] = -3.60316345E-01;
  COFD[12711] = 1.58984540E-02;
  COFD[12712] = -1.95292789E+01;
  COFD[12713] = 4.95546444E+00;
  COFD[12714] = -4.27317415E-01;
  COFD[12715] = 1.84910222E-02;
  COFD[12716] = -1.95292789E+01;
  COFD[12717] = 4.95546444E+00;
  COFD[12718] = -4.27317415E-01;
  COFD[12719] = 1.84910222E-02;
  COFD[12720] = -1.95552204E+01;
  COFD[12721] = 4.95546444E+00;
  COFD[12722] = -4.27317415E-01;
  COFD[12723] = 1.84910222E-02;
  COFD[12724] = -1.95271226E+01;
  COFD[12725] = 4.94445276E+00;
  COFD[12726] = -4.26273387E-01;
  COFD[12727] = 1.84617401E-02;
  COFD[12728] = -1.87190862E+01;
  COFD[12729] = 4.62516229E+00;
  COFD[12730] = -3.90584144E-01;
  COFD[12731] = 1.71538634E-02;
  COFD[12732] = -2.06373509E+01;
  COFD[12733] = 5.11178824E+00;
  COFD[12734] = -4.32455482E-01;
  COFD[12735] = 1.80855222E-02;
  COFD[12736] = -1.96427934E+01;
  COFD[12737] = 4.48380817E+00;
  COFD[12738] = -3.16391175E-01;
  COFD[12739] = 1.16391945E-02;
  COFD[12740] = -1.96529197E+01;
  COFD[12741] = 4.48380817E+00;
  COFD[12742] = -3.16391175E-01;
  COFD[12743] = 1.16391945E-02;
  COFD[12744] = -2.01850003E+01;
  COFD[12745] = 4.76819070E+00;
  COFD[12746] = -3.63881341E-01;
  COFD[12747] = 1.41310657E-02;
  COFD[12748] = -2.01850003E+01;
  COFD[12749] = 4.76819070E+00;
  COFD[12750] = -3.63881341E-01;
  COFD[12751] = 1.41310657E-02;
  COFD[12752] = -1.97550649E+01;
  COFD[12753] = 4.52829025E+00;
  COFD[12754] = -3.23954783E-01;
  COFD[12755] = 1.20390717E-02;
  COFD[12756] = -2.03790727E+01;
  COFD[12757] = 5.08484349E+00;
  COFD[12758] = -4.33971732E-01;
  COFD[12759] = 1.83577657E-02;
  COFD[12760] = -2.03914622E+01;
  COFD[12761] = 5.08484349E+00;
  COFD[12762] = -4.33971732E-01;
  COFD[12763] = 1.83577657E-02;
  COFD[12764] = -2.04032083E+01;
  COFD[12765] = 5.08484349E+00;
  COFD[12766] = -4.33971732E-01;
  COFD[12767] = 1.83577657E-02;
  COFD[12768] = -2.05909968E+01;
  COFD[12769] = 5.07237780E+00;
  COFD[12770] = -4.21879496E-01;
  COFD[12771] = 1.74021378E-02;
  COFD[12772] = -2.06645292E+01;
  COFD[12773] = 5.10138987E+00;
  COFD[12774] = -4.29786314E-01;
  COFD[12775] = 1.79152451E-02;
  COFD[12776] = -2.06746343E+01;
  COFD[12777] = 5.10138987E+00;
  COFD[12778] = -4.29786314E-01;
  COFD[12779] = 1.79152451E-02;
  COFD[12780] = -1.95899835E+01;
  COFD[12781] = 4.98287158E+00;
  COFD[12782] = -4.30014729E-01;
  COFD[12783] = 1.85722259E-02;
  COFD[12784] = -2.02024259E+01;
  COFD[12785] = 4.69054487E+00;
  COFD[12786] = -3.51011795E-01;
  COFD[12787] = 1.34579254E-02;
  COFD[12788] = -2.02024259E+01;
  COFD[12789] = 4.69054487E+00;
  COFD[12790] = -3.51011795E-01;
  COFD[12791] = 1.34579254E-02;
  COFD[12792] = -1.73335838E+01;
  COFD[12793] = 4.24280031E+00;
  COFD[12794] = -3.42971692E-01;
  COFD[12795] = 1.51693290E-02;
  COFD[12796] = -1.75459573E+01;
  COFD[12797] = 4.38093272E+00;
  COFD[12798] = -3.60316345E-01;
  COFD[12799] = 1.58984540E-02;
  COFD[12800] = -1.75698359E+01;
  COFD[12801] = 4.38093272E+00;
  COFD[12802] = -3.60316345E-01;
  COFD[12803] = 1.58984540E-02;
  COFD[12804] = -1.93553613E+01;
  COFD[12805] = 4.53056710E+00;
  COFD[12806] = -3.24342968E-01;
  COFD[12807] = 1.20596526E-02;
  COFD[12808] = -1.77166059E+01;
  COFD[12809] = 4.24280031E+00;
  COFD[12810] = -3.42971692E-01;
  COFD[12811] = 1.51693290E-02;
  COFD[12812] = -1.87160984E+01;
  COFD[12813] = 4.61983256E+00;
  COFD[12814] = -3.89971404E-01;
  COFD[12815] = 1.71306317E-02;
  COFD[12816] = -2.03379692E+01;
  COFD[12817] = 5.07663244E+00;
  COFD[12818] = -4.34319960E-01;
  COFD[12819] = 1.84317867E-02;
  COFD[12820] = -2.06136008E+01;
  COFD[12821] = 5.11111865E+00;
  COFD[12822] = -4.34063622E-01;
  COFD[12823] = 1.82251651E-02;
  COFD[12824] = -1.91235327E+01;
  COFD[12825] = 4.75991278E+00;
  COFD[12826] = -4.05296156E-01;
  COFD[12827] = 1.76746877E-02;
  COFD[12828] = -1.78662683E+01;
  COFD[12829] = 4.30456786E+00;
  COFD[12830] = -3.50754877E-01;
  COFD[12831] = 1.54975381E-02;
  COFD[12832] = -1.91543779E+01;
  COFD[12833] = 4.22500762E+00;
  COFD[12834] = -2.74400016E-01;
  COFD[12835] = 9.47754705E-03;
  COFD[12836] = -1.91655438E+01;
  COFD[12837] = 4.22500762E+00;
  COFD[12838] = -2.74400016E-01;
  COFD[12839] = 9.47754705E-03;
  COFD[12840] = -1.95900084E+01;
  COFD[12841] = 4.98287158E+00;
  COFD[12842] = -4.30014729E-01;
  COFD[12843] = 1.85722259E-02;
  COFD[12844] = -2.06079571E+01;
  COFD[12845] = 5.11111865E+00;
  COFD[12846] = -4.34063622E-01;
  COFD[12847] = 1.82251651E-02;
  COFD[12848] = -2.06079571E+01;
  COFD[12849] = 5.11111865E+00;
  COFD[12850] = -4.34063622E-01;
  COFD[12851] = 1.82251651E-02;
  COFD[12852] = -2.06079571E+01;
  COFD[12853] = 5.11111865E+00;
  COFD[12854] = -4.34063622E-01;
  COFD[12855] = 1.82251651E-02;
  COFD[12856] = -2.06019952E+01;
  COFD[12857] = 5.11111865E+00;
  COFD[12858] = -4.34063622E-01;
  COFD[12859] = 1.82251651E-02;
  COFD[12860] = -1.86955794E+01;
  COFD[12861] = 4.61983256E+00;
  COFD[12862] = -3.89971404E-01;
  COFD[12863] = 1.71306317E-02;
  COFD[12864] = -1.96138490E+01;
  COFD[12865] = 4.91708832E+00;
  COFD[12866] = -4.23361260E-01;
  COFD[12867] = 1.83617469E-02;
  COFD[12868] = -2.09223240E+01;
  COFD[12869] = 5.07680752E+00;
  COFD[12870] = -4.24280733E-01;
  COFD[12871] = 1.75807248E-02;
  COFD[12872] = -2.09280673E+01;
  COFD[12873] = 5.07680752E+00;
  COFD[12874] = -4.24280733E-01;
  COFD[12875] = 1.75807248E-02;
  COFD[12876] = -2.02083836E+01;
  COFD[12877] = 4.69054487E+00;
  COFD[12878] = -3.51011795E-01;
  COFD[12879] = 1.34579254E-02;
  COFD[12880] = -2.02141356E+01;
  COFD[12881] = 4.69054487E+00;
  COFD[12882] = -3.51011795E-01;
  COFD[12883] = 1.34579254E-02;
  COFD[12884] = -2.01673095E+01;
  COFD[12885] = 4.97304611E+00;
  COFD[12886] = -4.01743383E-01;
  COFD[12887] = 1.62313746E-02;
  COFD[12888] = -1.76610581E+01;
  COFD[12889] = 4.38093272E+00;
  COFD[12890] = -3.60316345E-01;
  COFD[12891] = 1.58984540E-02;
  COFD[12892] = -1.93616894E+01;
  COFD[12893] = 4.84096762E+00;
  COFD[12894] = -4.14857437E-01;
  COFD[12895] = 1.80500164E-02;
  COFD[12896] = -2.06563899E+01;
  COFD[12897] = 5.08393260E+00;
  COFD[12898] = -4.25938990E-01;
  COFD[12899] = 1.76828881E-02;
  COFD[12900] = -2.07636559E+01;
  COFD[12901] = 5.08393260E+00;
  COFD[12902] = -4.25938990E-01;
  COFD[12903] = 1.76828881E-02;
  COFD[12904] = -2.08254822E+01;
  COFD[12905] = 5.08393260E+00;
  COFD[12906] = -4.25938990E-01;
  COFD[12907] = 1.76828881E-02;
  COFD[12908] = -2.00717215E+01;
  COFD[12909] = 4.90077593E+00;
  COFD[12910] = -4.21552326E-01;
  COFD[12911] = 1.82959533E-02;
  COFD[12912] = -2.06479408E+01;
  COFD[12913] = 5.08393260E+00;
  COFD[12914] = -4.25938990E-01;
  COFD[12915] = 1.76828881E-02;
  COFD[12916] = -2.07592038E+01;
  COFD[12917] = 5.08393260E+00;
  COFD[12918] = -4.25938990E-01;
  COFD[12919] = 1.76828881E-02;
  COFD[12920] = -1.96245042E+01;
  COFD[12921] = 4.79046117E+00;
  COFD[12922] = -4.08654983E-01;
  COFD[12923] = 1.77949016E-02;
  COFD[12924] = -2.06391136E+01;
  COFD[12925] = 5.08393260E+00;
  COFD[12926] = -4.25938990E-01;
  COFD[12927] = 1.76828881E-02;
  COFD[12928] = -1.91989473E+01;
  COFD[12929] = 4.70407510E+00;
  COFD[12930] = -3.99421025E-01;
  COFD[12931] = 1.74780295E-02;
  COFD[12932] = -1.86230619E+01;
  COFD[12933] = 4.58249233E+00;
  COFD[12934] = -3.85491945E-01;
  COFD[12935] = 1.69516294E-02;
  COFD[12936] = -2.09075187E+01;
  COFD[12937] = 4.91673221E+00;
  COFD[12938] = -3.91478503E-01;
  COFD[12939] = 1.56651571E-02;
  COFD[12940] = -2.08613547E+01;
  COFD[12941] = 4.91673221E+00;
  COFD[12942] = -3.91478503E-01;
  COFD[12943] = 1.56651571E-02;
  COFD[12944] = -2.07924097E+01;
  COFD[12945] = 4.91673221E+00;
  COFD[12946] = -3.91478503E-01;
  COFD[12947] = 1.56651571E-02;
  COFD[12948] = -1.71957133E+01;
  COFD[12949] = 3.11108578E+00;
  COFD[12950] = -1.00485263E-01;
  COFD[12951] = 7.56976059E-04;
  COFD[12952] = -2.09223240E+01;
  COFD[12953] = 5.07680752E+00;
  COFD[12954] = -4.24280733E-01;
  COFD[12955] = 1.75807248E-02;
  COFD[12956] = -2.09223240E+01;
  COFD[12957] = 5.07680752E+00;
  COFD[12958] = -4.24280733E-01;
  COFD[12959] = 1.75807248E-02;
  COFD[12960] = -1.45496080E+01;
  COFD[12961] = 3.57062617E+00;
  COFD[12962] = -2.57920745E-01;
  COFD[12963] = 1.15740264E-02;
  COFD[12964] = -1.78356521E+01;
  COFD[12965] = 4.95976558E+00;
  COFD[12966] = -4.27732001E-01;
  COFD[12967] = 1.85030487E-02;
  COFD[12968] = -1.75999275E+01;
  COFD[12969] = 4.38093272E+00;
  COFD[12970] = -3.60316345E-01;
  COFD[12971] = 1.58984540E-02;
  COFD[12972] = -1.89332387E+01;
  COFD[12973] = 4.70017385E+00;
  COFD[12974] = -3.99010079E-01;
  COFD[12975] = 1.74642383E-02;
  COFD[12976] = -1.76220101E+01;
  COFD[12977] = 4.38093272E+00;
  COFD[12978] = -3.60316345E-01;
  COFD[12979] = 1.58984540E-02;
  COFD[12980] = -1.86969395E+01;
  COFD[12981] = 4.21062259E+00;
  COFD[12982] = -2.72117720E-01;
  COFD[12983] = 9.36166287E-03;
  COFD[12984] = -1.89420734E+01;
  COFD[12985] = 4.70017385E+00;
  COFD[12986] = -3.99010079E-01;
  COFD[12987] = 1.74642383E-02;
  COFD[12988] = -1.89505295E+01;
  COFD[12989] = 4.70017385E+00;
  COFD[12990] = -3.99010079E-01;
  COFD[12991] = 1.74642383E-02;
  COFD[12992] = -1.72745291E+01;
  COFD[12993] = 4.24280031E+00;
  COFD[12994] = -3.42971692E-01;
  COFD[12995] = 1.51693290E-02;
  COFD[12996] = -1.75227729E+01;
  COFD[12997] = 4.38093272E+00;
  COFD[12998] = -3.60316345E-01;
  COFD[12999] = 1.58984540E-02;
  COFD[13000] = -1.95292789E+01;
  COFD[13001] = 4.95546444E+00;
  COFD[13002] = -4.27317415E-01;
  COFD[13003] = 1.84910222E-02;
  COFD[13004] = -1.95292789E+01;
  COFD[13005] = 4.95546444E+00;
  COFD[13006] = -4.27317415E-01;
  COFD[13007] = 1.84910222E-02;
  COFD[13008] = -1.95552204E+01;
  COFD[13009] = 4.95546444E+00;
  COFD[13010] = -4.27317415E-01;
  COFD[13011] = 1.84910222E-02;
  COFD[13012] = -1.95271226E+01;
  COFD[13013] = 4.94445276E+00;
  COFD[13014] = -4.26273387E-01;
  COFD[13015] = 1.84617401E-02;
  COFD[13016] = -1.87190862E+01;
  COFD[13017] = 4.62516229E+00;
  COFD[13018] = -3.90584144E-01;
  COFD[13019] = 1.71538634E-02;
  COFD[13020] = -2.06373509E+01;
  COFD[13021] = 5.11178824E+00;
  COFD[13022] = -4.32455482E-01;
  COFD[13023] = 1.80855222E-02;
  COFD[13024] = -1.96427934E+01;
  COFD[13025] = 4.48380817E+00;
  COFD[13026] = -3.16391175E-01;
  COFD[13027] = 1.16391945E-02;
  COFD[13028] = -1.96529197E+01;
  COFD[13029] = 4.48380817E+00;
  COFD[13030] = -3.16391175E-01;
  COFD[13031] = 1.16391945E-02;
  COFD[13032] = -2.01850003E+01;
  COFD[13033] = 4.76819070E+00;
  COFD[13034] = -3.63881341E-01;
  COFD[13035] = 1.41310657E-02;
  COFD[13036] = -2.01850003E+01;
  COFD[13037] = 4.76819070E+00;
  COFD[13038] = -3.63881341E-01;
  COFD[13039] = 1.41310657E-02;
  COFD[13040] = -1.97550649E+01;
  COFD[13041] = 4.52829025E+00;
  COFD[13042] = -3.23954783E-01;
  COFD[13043] = 1.20390717E-02;
  COFD[13044] = -2.03790727E+01;
  COFD[13045] = 5.08484349E+00;
  COFD[13046] = -4.33971732E-01;
  COFD[13047] = 1.83577657E-02;
  COFD[13048] = -2.03914622E+01;
  COFD[13049] = 5.08484349E+00;
  COFD[13050] = -4.33971732E-01;
  COFD[13051] = 1.83577657E-02;
  COFD[13052] = -2.04032083E+01;
  COFD[13053] = 5.08484349E+00;
  COFD[13054] = -4.33971732E-01;
  COFD[13055] = 1.83577657E-02;
  COFD[13056] = -2.05909968E+01;
  COFD[13057] = 5.07237780E+00;
  COFD[13058] = -4.21879496E-01;
  COFD[13059] = 1.74021378E-02;
  COFD[13060] = -2.06645292E+01;
  COFD[13061] = 5.10138987E+00;
  COFD[13062] = -4.29786314E-01;
  COFD[13063] = 1.79152451E-02;
  COFD[13064] = -2.06746343E+01;
  COFD[13065] = 5.10138987E+00;
  COFD[13066] = -4.29786314E-01;
  COFD[13067] = 1.79152451E-02;
  COFD[13068] = -1.95899835E+01;
  COFD[13069] = 4.98287158E+00;
  COFD[13070] = -4.30014729E-01;
  COFD[13071] = 1.85722259E-02;
  COFD[13072] = -2.02024259E+01;
  COFD[13073] = 4.69054487E+00;
  COFD[13074] = -3.51011795E-01;
  COFD[13075] = 1.34579254E-02;
  COFD[13076] = -2.02024259E+01;
  COFD[13077] = 4.69054487E+00;
  COFD[13078] = -3.51011795E-01;
  COFD[13079] = 1.34579254E-02;
  COFD[13080] = -1.73335838E+01;
  COFD[13081] = 4.24280031E+00;
  COFD[13082] = -3.42971692E-01;
  COFD[13083] = 1.51693290E-02;
  COFD[13084] = -1.75459573E+01;
  COFD[13085] = 4.38093272E+00;
  COFD[13086] = -3.60316345E-01;
  COFD[13087] = 1.58984540E-02;
  COFD[13088] = -1.75698359E+01;
  COFD[13089] = 4.38093272E+00;
  COFD[13090] = -3.60316345E-01;
  COFD[13091] = 1.58984540E-02;
  COFD[13092] = -1.93553613E+01;
  COFD[13093] = 4.53056710E+00;
  COFD[13094] = -3.24342968E-01;
  COFD[13095] = 1.20596526E-02;
  COFD[13096] = -1.77166059E+01;
  COFD[13097] = 4.24280031E+00;
  COFD[13098] = -3.42971692E-01;
  COFD[13099] = 1.51693290E-02;
  COFD[13100] = -1.87160984E+01;
  COFD[13101] = 4.61983256E+00;
  COFD[13102] = -3.89971404E-01;
  COFD[13103] = 1.71306317E-02;
  COFD[13104] = -2.03379692E+01;
  COFD[13105] = 5.07663244E+00;
  COFD[13106] = -4.34319960E-01;
  COFD[13107] = 1.84317867E-02;
  COFD[13108] = -2.06136008E+01;
  COFD[13109] = 5.11111865E+00;
  COFD[13110] = -4.34063622E-01;
  COFD[13111] = 1.82251651E-02;
  COFD[13112] = -1.91235327E+01;
  COFD[13113] = 4.75991278E+00;
  COFD[13114] = -4.05296156E-01;
  COFD[13115] = 1.76746877E-02;
  COFD[13116] = -1.78662683E+01;
  COFD[13117] = 4.30456786E+00;
  COFD[13118] = -3.50754877E-01;
  COFD[13119] = 1.54975381E-02;
  COFD[13120] = -1.91543779E+01;
  COFD[13121] = 4.22500762E+00;
  COFD[13122] = -2.74400016E-01;
  COFD[13123] = 9.47754705E-03;
  COFD[13124] = -1.91655438E+01;
  COFD[13125] = 4.22500762E+00;
  COFD[13126] = -2.74400016E-01;
  COFD[13127] = 9.47754705E-03;
  COFD[13128] = -1.95900084E+01;
  COFD[13129] = 4.98287158E+00;
  COFD[13130] = -4.30014729E-01;
  COFD[13131] = 1.85722259E-02;
  COFD[13132] = -2.06079571E+01;
  COFD[13133] = 5.11111865E+00;
  COFD[13134] = -4.34063622E-01;
  COFD[13135] = 1.82251651E-02;
  COFD[13136] = -2.06079571E+01;
  COFD[13137] = 5.11111865E+00;
  COFD[13138] = -4.34063622E-01;
  COFD[13139] = 1.82251651E-02;
  COFD[13140] = -2.06079571E+01;
  COFD[13141] = 5.11111865E+00;
  COFD[13142] = -4.34063622E-01;
  COFD[13143] = 1.82251651E-02;
  COFD[13144] = -2.06019952E+01;
  COFD[13145] = 5.11111865E+00;
  COFD[13146] = -4.34063622E-01;
  COFD[13147] = 1.82251651E-02;
  COFD[13148] = -1.86955794E+01;
  COFD[13149] = 4.61983256E+00;
  COFD[13150] = -3.89971404E-01;
  COFD[13151] = 1.71306317E-02;
  COFD[13152] = -1.96138490E+01;
  COFD[13153] = 4.91708832E+00;
  COFD[13154] = -4.23361260E-01;
  COFD[13155] = 1.83617469E-02;
  COFD[13156] = -2.09223240E+01;
  COFD[13157] = 5.07680752E+00;
  COFD[13158] = -4.24280733E-01;
  COFD[13159] = 1.75807248E-02;
  COFD[13160] = -2.09280673E+01;
  COFD[13161] = 5.07680752E+00;
  COFD[13162] = -4.24280733E-01;
  COFD[13163] = 1.75807248E-02;
  COFD[13164] = -2.02083836E+01;
  COFD[13165] = 4.69054487E+00;
  COFD[13166] = -3.51011795E-01;
  COFD[13167] = 1.34579254E-02;
  COFD[13168] = -2.02141356E+01;
  COFD[13169] = 4.69054487E+00;
  COFD[13170] = -3.51011795E-01;
  COFD[13171] = 1.34579254E-02;
  COFD[13172] = -2.01673095E+01;
  COFD[13173] = 4.97304611E+00;
  COFD[13174] = -4.01743383E-01;
  COFD[13175] = 1.62313746E-02;
  COFD[13176] = -1.76610581E+01;
  COFD[13177] = 4.38093272E+00;
  COFD[13178] = -3.60316345E-01;
  COFD[13179] = 1.58984540E-02;
  COFD[13180] = -1.93616894E+01;
  COFD[13181] = 4.84096762E+00;
  COFD[13182] = -4.14857437E-01;
  COFD[13183] = 1.80500164E-02;
  COFD[13184] = -2.06563899E+01;
  COFD[13185] = 5.08393260E+00;
  COFD[13186] = -4.25938990E-01;
  COFD[13187] = 1.76828881E-02;
  COFD[13188] = -2.07636559E+01;
  COFD[13189] = 5.08393260E+00;
  COFD[13190] = -4.25938990E-01;
  COFD[13191] = 1.76828881E-02;
  COFD[13192] = -2.08254822E+01;
  COFD[13193] = 5.08393260E+00;
  COFD[13194] = -4.25938990E-01;
  COFD[13195] = 1.76828881E-02;
  COFD[13196] = -2.00717215E+01;
  COFD[13197] = 4.90077593E+00;
  COFD[13198] = -4.21552326E-01;
  COFD[13199] = 1.82959533E-02;
  COFD[13200] = -2.06479408E+01;
  COFD[13201] = 5.08393260E+00;
  COFD[13202] = -4.25938990E-01;
  COFD[13203] = 1.76828881E-02;
  COFD[13204] = -2.07592038E+01;
  COFD[13205] = 5.08393260E+00;
  COFD[13206] = -4.25938990E-01;
  COFD[13207] = 1.76828881E-02;
  COFD[13208] = -1.96245042E+01;
  COFD[13209] = 4.79046117E+00;
  COFD[13210] = -4.08654983E-01;
  COFD[13211] = 1.77949016E-02;
  COFD[13212] = -2.06391136E+01;
  COFD[13213] = 5.08393260E+00;
  COFD[13214] = -4.25938990E-01;
  COFD[13215] = 1.76828881E-02;
  COFD[13216] = -1.91989473E+01;
  COFD[13217] = 4.70407510E+00;
  COFD[13218] = -3.99421025E-01;
  COFD[13219] = 1.74780295E-02;
  COFD[13220] = -1.86230619E+01;
  COFD[13221] = 4.58249233E+00;
  COFD[13222] = -3.85491945E-01;
  COFD[13223] = 1.69516294E-02;
  COFD[13224] = -2.09075187E+01;
  COFD[13225] = 4.91673221E+00;
  COFD[13226] = -3.91478503E-01;
  COFD[13227] = 1.56651571E-02;
  COFD[13228] = -2.08613547E+01;
  COFD[13229] = 4.91673221E+00;
  COFD[13230] = -3.91478503E-01;
  COFD[13231] = 1.56651571E-02;
  COFD[13232] = -2.07924097E+01;
  COFD[13233] = 4.91673221E+00;
  COFD[13234] = -3.91478503E-01;
  COFD[13235] = 1.56651571E-02;
  COFD[13236] = -1.71957133E+01;
  COFD[13237] = 3.11108578E+00;
  COFD[13238] = -1.00485263E-01;
  COFD[13239] = 7.56976059E-04;
  COFD[13240] = -2.09223240E+01;
  COFD[13241] = 5.07680752E+00;
  COFD[13242] = -4.24280733E-01;
  COFD[13243] = 1.75807248E-02;
  COFD[13244] = -2.09223240E+01;
  COFD[13245] = 5.07680752E+00;
  COFD[13246] = -4.24280733E-01;
  COFD[13247] = 1.75807248E-02;
  COFD[13248] = -1.45490714E+01;
  COFD[13249] = 3.57062617E+00;
  COFD[13250] = -2.57920745E-01;
  COFD[13251] = 1.15740264E-02;
  COFD[13252] = -1.78353776E+01;
  COFD[13253] = 4.95976558E+00;
  COFD[13254] = -4.27732001E-01;
  COFD[13255] = 1.85030487E-02;
  COFD[13256] = -1.75966867E+01;
  COFD[13257] = 4.38093272E+00;
  COFD[13258] = -3.60316345E-01;
  COFD[13259] = 1.58984540E-02;
  COFD[13260] = -1.89281486E+01;
  COFD[13261] = 4.70017385E+00;
  COFD[13262] = -3.99010079E-01;
  COFD[13263] = 1.74642383E-02;
  COFD[13264] = -1.76186234E+01;
  COFD[13265] = 4.38093272E+00;
  COFD[13266] = -3.60316345E-01;
  COFD[13267] = 1.58984540E-02;
  COFD[13268] = -1.86934118E+01;
  COFD[13269] = 4.21062259E+00;
  COFD[13270] = -2.72117720E-01;
  COFD[13271] = 9.36166287E-03;
  COFD[13272] = -1.89368931E+01;
  COFD[13273] = 4.70017385E+00;
  COFD[13274] = -3.99010079E-01;
  COFD[13275] = 1.74642383E-02;
  COFD[13276] = -1.89452613E+01;
  COFD[13277] = 4.70017385E+00;
  COFD[13278] = -3.99010079E-01;
  COFD[13279] = 1.74642383E-02;
  COFD[13280] = -1.72719181E+01;
  COFD[13281] = 4.24280031E+00;
  COFD[13282] = -3.42971692E-01;
  COFD[13283] = 1.51693290E-02;
  COFD[13284] = -1.75199941E+01;
  COFD[13285] = 4.38093272E+00;
  COFD[13286] = -3.60316345E-01;
  COFD[13287] = 1.58984540E-02;
  COFD[13288] = -1.95263384E+01;
  COFD[13289] = 4.95546444E+00;
  COFD[13290] = -4.27317415E-01;
  COFD[13291] = 1.84910222E-02;
  COFD[13292] = -1.95263384E+01;
  COFD[13293] = 4.95546444E+00;
  COFD[13294] = -4.27317415E-01;
  COFD[13295] = 1.84910222E-02;
  COFD[13296] = -1.95521238E+01;
  COFD[13297] = 4.95546444E+00;
  COFD[13298] = -4.27317415E-01;
  COFD[13299] = 1.84910222E-02;
  COFD[13300] = -1.95238753E+01;
  COFD[13301] = 4.94445276E+00;
  COFD[13302] = -4.26273387E-01;
  COFD[13303] = 1.84617401E-02;
  COFD[13304] = -1.87143786E+01;
  COFD[13305] = 4.62516229E+00;
  COFD[13306] = -3.90584144E-01;
  COFD[13307] = 1.71538634E-02;
  COFD[13308] = -2.06313220E+01;
  COFD[13309] = 5.11178824E+00;
  COFD[13310] = -4.32455482E-01;
  COFD[13311] = 1.80855222E-02;
  COFD[13312] = -1.96379851E+01;
  COFD[13313] = 4.48380817E+00;
  COFD[13314] = -3.16391175E-01;
  COFD[13315] = 1.16391945E-02;
  COFD[13316] = -1.96480135E+01;
  COFD[13317] = 4.48380817E+00;
  COFD[13318] = -3.16391175E-01;
  COFD[13319] = 1.16391945E-02;
  COFD[13320] = -2.01799989E+01;
  COFD[13321] = 4.76819070E+00;
  COFD[13322] = -3.63881341E-01;
  COFD[13323] = 1.41310657E-02;
  COFD[13324] = -2.01799989E+01;
  COFD[13325] = 4.76819070E+00;
  COFD[13326] = -3.63881341E-01;
  COFD[13327] = 1.41310657E-02;
  COFD[13328] = -1.97499708E+01;
  COFD[13329] = 4.52829025E+00;
  COFD[13330] = -3.23954783E-01;
  COFD[13331] = 1.20390717E-02;
  COFD[13332] = -2.03746804E+01;
  COFD[13333] = 5.08484349E+00;
  COFD[13334] = -4.33971732E-01;
  COFD[13335] = 1.83577657E-02;
  COFD[13336] = -2.03869602E+01;
  COFD[13337] = 5.08484349E+00;
  COFD[13338] = -4.33971732E-01;
  COFD[13339] = 1.83577657E-02;
  COFD[13340] = -2.03985998E+01;
  COFD[13341] = 5.08484349E+00;
  COFD[13342] = -4.33971732E-01;
  COFD[13343] = 1.83577657E-02;
  COFD[13344] = -2.05862847E+01;
  COFD[13345] = 5.07237780E+00;
  COFD[13346] = -4.21879496E-01;
  COFD[13347] = 1.74021378E-02;
  COFD[13348] = -2.06597165E+01;
  COFD[13349] = 5.10138987E+00;
  COFD[13350] = -4.29786314E-01;
  COFD[13351] = 1.79152451E-02;
  COFD[13352] = -2.06697239E+01;
  COFD[13353] = 5.10138987E+00;
  COFD[13354] = -4.29786314E-01;
  COFD[13355] = 1.79152451E-02;
  COFD[13356] = -1.95841624E+01;
  COFD[13357] = 4.98287158E+00;
  COFD[13358] = -4.30014729E-01;
  COFD[13359] = 1.85722259E-02;
  COFD[13360] = -2.01965328E+01;
  COFD[13361] = 4.69054487E+00;
  COFD[13362] = -3.51011795E-01;
  COFD[13363] = 1.34579254E-02;
  COFD[13364] = -2.01965328E+01;
  COFD[13365] = 4.69054487E+00;
  COFD[13366] = -3.51011795E-01;
  COFD[13367] = 1.34579254E-02;
  COFD[13368] = -1.73306464E+01;
  COFD[13369] = 4.24280031E+00;
  COFD[13370] = -3.42971692E-01;
  COFD[13371] = 1.51693290E-02;
  COFD[13372] = -1.75428637E+01;
  COFD[13373] = 4.38093272E+00;
  COFD[13374] = -3.60316345E-01;
  COFD[13375] = 1.58984540E-02;
  COFD[13376] = -1.75665915E+01;
  COFD[13377] = 4.38093272E+00;
  COFD[13378] = -3.60316345E-01;
  COFD[13379] = 1.58984540E-02;
  COFD[13380] = -1.93519711E+01;
  COFD[13381] = 4.53056710E+00;
  COFD[13382] = -3.24342968E-01;
  COFD[13383] = 1.20596526E-02;
  COFD[13384] = -1.77117972E+01;
  COFD[13385] = 4.24280031E+00;
  COFD[13386] = -3.42971692E-01;
  COFD[13387] = 1.51693290E-02;
  COFD[13388] = -1.87111941E+01;
  COFD[13389] = 4.61983256E+00;
  COFD[13390] = -3.89971404E-01;
  COFD[13391] = 1.71306317E-02;
  COFD[13392] = -2.03318090E+01;
  COFD[13393] = 5.07663244E+00;
  COFD[13394] = -4.34319960E-01;
  COFD[13395] = 1.84317867E-02;
  COFD[13396] = -2.06075716E+01;
  COFD[13397] = 5.11111865E+00;
  COFD[13398] = -4.34063622E-01;
  COFD[13399] = 1.82251651E-02;
  COFD[13400] = -1.91185332E+01;
  COFD[13401] = 4.75991278E+00;
  COFD[13402] = -4.05296156E-01;
  COFD[13403] = 1.76746877E-02;
  COFD[13404] = -1.78617684E+01;
  COFD[13405] = 4.30456786E+00;
  COFD[13406] = -3.50754877E-01;
  COFD[13407] = 1.54975381E-02;
  COFD[13408] = -1.91497714E+01;
  COFD[13409] = 4.22500762E+00;
  COFD[13410] = -2.74400016E-01;
  COFD[13411] = 9.47754705E-03;
  COFD[13412] = -1.91608337E+01;
  COFD[13413] = 4.22500762E+00;
  COFD[13414] = -2.74400016E-01;
  COFD[13415] = 9.47754705E-03;
  COFD[13416] = -1.95841870E+01;
  COFD[13417] = 4.98287158E+00;
  COFD[13418] = -4.30014729E-01;
  COFD[13419] = 1.85722259E-02;
  COFD[13420] = -2.06019952E+01;
  COFD[13421] = 5.11111865E+00;
  COFD[13422] = -4.34063622E-01;
  COFD[13423] = 1.82251651E-02;
  COFD[13424] = -2.06019952E+01;
  COFD[13425] = 5.11111865E+00;
  COFD[13426] = -4.34063622E-01;
  COFD[13427] = 1.82251651E-02;
  COFD[13428] = -2.06019952E+01;
  COFD[13429] = 5.11111865E+00;
  COFD[13430] = -4.34063622E-01;
  COFD[13431] = 1.82251651E-02;
  COFD[13432] = -2.05961035E+01;
  COFD[13433] = 5.11111865E+00;
  COFD[13434] = -4.34063622E-01;
  COFD[13435] = 1.82251651E-02;
  COFD[13436] = -1.86908714E+01;
  COFD[13437] = 4.61983256E+00;
  COFD[13438] = -3.89971404E-01;
  COFD[13439] = 1.71306317E-02;
  COFD[13440] = -1.96081068E+01;
  COFD[13441] = 4.91708832E+00;
  COFD[13442] = -4.23361260E-01;
  COFD[13443] = 1.83617469E-02;
  COFD[13444] = -2.09163577E+01;
  COFD[13445] = 5.07680752E+00;
  COFD[13446] = -4.24280733E-01;
  COFD[13447] = 1.75807248E-02;
  COFD[13448] = -2.09220325E+01;
  COFD[13449] = 5.07680752E+00;
  COFD[13450] = -4.24280733E-01;
  COFD[13451] = 1.75807248E-02;
  COFD[13452] = -2.02024203E+01;
  COFD[13453] = 4.69054487E+00;
  COFD[13454] = -3.51011795E-01;
  COFD[13455] = 1.34579254E-02;
  COFD[13456] = -2.02081037E+01;
  COFD[13457] = 4.69054487E+00;
  COFD[13458] = -3.51011795E-01;
  COFD[13459] = 1.34579254E-02;
  COFD[13460] = -2.01635166E+01;
  COFD[13461] = 4.97304611E+00;
  COFD[13462] = -4.01743383E-01;
  COFD[13463] = 1.62313746E-02;
  COFD[13464] = -1.76573973E+01;
  COFD[13465] = 4.38093272E+00;
  COFD[13466] = -3.60316345E-01;
  COFD[13467] = 1.58984540E-02;
  COFD[13468] = -1.93560955E+01;
  COFD[13469] = 4.84096762E+00;
  COFD[13470] = -4.14857437E-01;
  COFD[13471] = 1.80500164E-02;
  COFD[13472] = -2.06511200E+01;
  COFD[13473] = 5.08393260E+00;
  COFD[13474] = -4.25938990E-01;
  COFD[13475] = 1.76828881E-02;
  COFD[13476] = -2.07571332E+01;
  COFD[13477] = 5.08393260E+00;
  COFD[13478] = -4.25938990E-01;
  COFD[13479] = 1.76828881E-02;
  COFD[13480] = -2.08181073E+01;
  COFD[13481] = 5.08393260E+00;
  COFD[13482] = -4.25938990E-01;
  COFD[13483] = 1.76828881E-02;
  COFD[13484] = -2.00637293E+01;
  COFD[13485] = 4.90077593E+00;
  COFD[13486] = -4.21552326E-01;
  COFD[13487] = 1.82959533E-02;
  COFD[13488] = -2.06427588E+01;
  COFD[13489] = 5.08393260E+00;
  COFD[13490] = -4.25938990E-01;
  COFD[13491] = 1.76828881E-02;
  COFD[13492] = -2.07527386E+01;
  COFD[13493] = 5.08393260E+00;
  COFD[13494] = -4.25938990E-01;
  COFD[13495] = 1.76828881E-02;
  COFD[13496] = -1.96171697E+01;
  COFD[13497] = 4.79046117E+00;
  COFD[13498] = -4.08654983E-01;
  COFD[13499] = 1.77949016E-02;
  COFD[13500] = -2.06340218E+01;
  COFD[13501] = 5.08393260E+00;
  COFD[13502] = -4.25938990E-01;
  COFD[13503] = 1.76828881E-02;
  COFD[13504] = -1.91925408E+01;
  COFD[13505] = 4.70407510E+00;
  COFD[13506] = -3.99421025E-01;
  COFD[13507] = 1.74780295E-02;
  COFD[13508] = -1.86180628E+01;
  COFD[13509] = 4.58249233E+00;
  COFD[13510] = -3.85491945E-01;
  COFD[13511] = 1.69516294E-02;
  COFD[13512] = -2.08996174E+01;
  COFD[13513] = 4.91673221E+00;
  COFD[13514] = -3.91478503E-01;
  COFD[13515] = 1.56651571E-02;
  COFD[13516] = -2.08541452E+01;
  COFD[13517] = 4.91673221E+00;
  COFD[13518] = -3.91478503E-01;
  COFD[13519] = 1.56651571E-02;
  COFD[13520] = -2.07861230E+01;
  COFD[13521] = 4.91673221E+00;
  COFD[13522] = -3.91478503E-01;
  COFD[13523] = 1.56651571E-02;
  COFD[13524] = -1.71894892E+01;
  COFD[13525] = 3.11108578E+00;
  COFD[13526] = -1.00485263E-01;
  COFD[13527] = 7.56976059E-04;
  COFD[13528] = -2.09163577E+01;
  COFD[13529] = 5.07680752E+00;
  COFD[13530] = -4.24280733E-01;
  COFD[13531] = 1.75807248E-02;
  COFD[13532] = -2.09163577E+01;
  COFD[13533] = 5.07680752E+00;
  COFD[13534] = -4.24280733E-01;
  COFD[13535] = 1.75807248E-02;
  COFD[13536] = -1.23361495E+01;
  COFD[13537] = 2.75315266E+00;
  COFD[13538] = -1.50257362E-01;
  COFD[13539] = 6.84125771E-03;
  COFD[13540] = -1.52282485E+01;
  COFD[13541] = 4.07848496E+00;
  COFD[13542] = -3.22647626E-01;
  COFD[13543] = 1.43298383E-02;
  COFD[13544] = -1.49513692E+01;
  COFD[13545] = 3.45291069E+00;
  COFD[13546] = -2.42822180E-01;
  COFD[13547] = 1.09275752E-02;
  COFD[13548] = -1.60613819E+01;
  COFD[13549] = 3.71236773E+00;
  COFD[13550] = -2.75612682E-01;
  COFD[13551] = 1.23100131E-02;
  COFD[13552] = -1.49705966E+01;
  COFD[13553] = 3.45291069E+00;
  COFD[13554] = -2.42822180E-01;
  COFD[13555] = 1.09275752E-02;
  COFD[13556] = -1.99665282E+01;
  COFD[13557] = 5.06422780E+00;
  COFD[13558] = -4.18763984E-01;
  COFD[13559] = 1.71836367E-02;
  COFD[13560] = -1.60685613E+01;
  COFD[13561] = 3.71236773E+00;
  COFD[13562] = -2.75612682E-01;
  COFD[13563] = 1.23100131E-02;
  COFD[13564] = -1.60754107E+01;
  COFD[13565] = 3.71236773E+00;
  COFD[13566] = -2.75612682E-01;
  COFD[13567] = 1.23100131E-02;
  COFD[13568] = -1.46909250E+01;
  COFD[13569] = 3.32669990E+00;
  COFD[13570] = -2.26245876E-01;
  COFD[13571] = 1.02009489E-02;
  COFD[13572] = -1.48833652E+01;
  COFD[13573] = 3.45291069E+00;
  COFD[13574] = -2.42822180E-01;
  COFD[13575] = 1.09275752E-02;
  COFD[13576] = -1.68755397E+01;
  COFD[13577] = 4.07034547E+00;
  COFD[13578] = -3.21605793E-01;
  COFD[13579] = 1.42852210E-02;
  COFD[13580] = -1.68755397E+01;
  COFD[13581] = 4.07034547E+00;
  COFD[13582] = -3.21605793E-01;
  COFD[13583] = 1.42852210E-02;
  COFD[13584] = -1.68983912E+01;
  COFD[13585] = 4.07034547E+00;
  COFD[13586] = -3.21605793E-01;
  COFD[13587] = 1.42852210E-02;
  COFD[13588] = -1.68452721E+01;
  COFD[13589] = 4.04805862E+00;
  COFD[13590] = -3.18738478E-01;
  COFD[13591] = 1.41617986E-02;
  COFD[13592] = -1.58668752E+01;
  COFD[13593] = 3.63399451E+00;
  COFD[13594] = -2.65805952E-01;
  COFD[13595] = 1.19009325E-02;
  COFD[13596] = -1.88132574E+01;
  COFD[13597] = 4.66400853E+00;
  COFD[13598] = -3.95055598E-01;
  COFD[13599] = 1.73237987E-02;
  COFD[13600] = -2.01371861E+01;
  COFD[13601] = 5.08484044E+00;
  COFD[13602] = -4.33972487E-01;
  COFD[13603] = 1.83578464E-02;
  COFD[13604] = -2.01454999E+01;
  COFD[13605] = 5.08484044E+00;
  COFD[13606] = -4.33972487E-01;
  COFD[13607] = 1.83578464E-02;
  COFD[13608] = -2.00535759E+01;
  COFD[13609] = 5.06056425E+00;
  COFD[13610] = -4.33879014E-01;
  COFD[13611] = 1.84806969E-02;
  COFD[13612] = -2.00535759E+01;
  COFD[13613] = 5.06056425E+00;
  COFD[13614] = -4.33879014E-01;
  COFD[13615] = 1.84806969E-02;
  COFD[13616] = -2.01342584E+01;
  COFD[13617] = 5.08034582E+00;
  COFD[13618] = -4.34480301E-01;
  COFD[13619] = 1.84253742E-02;
  COFD[13620] = -1.82701659E+01;
  COFD[13621] = 4.48448153E+00;
  COFD[13622] = -3.73130862E-01;
  COFD[13623] = 1.64293065E-02;
  COFD[13624] = -1.82804944E+01;
  COFD[13625] = 4.48448153E+00;
  COFD[13626] = -3.73130862E-01;
  COFD[13627] = 1.64293065E-02;
  COFD[13628] = -1.82902470E+01;
  COFD[13629] = 4.48448153E+00;
  COFD[13630] = -3.73130862E-01;
  COFD[13631] = 1.64293065E-02;
  COFD[13632] = -1.90911491E+01;
  COFD[13633] = 4.76599271E+00;
  COFD[13634] = -4.05891334E-01;
  COFD[13635] = 1.76922565E-02;
  COFD[13636] = -1.89427839E+01;
  COFD[13637] = 4.68999916E+00;
  COFD[13638] = -3.97926797E-01;
  COFD[13639] = 1.74272678E-02;
  COFD[13640] = -1.89510789E+01;
  COFD[13641] = 4.68999916E+00;
  COFD[13642] = -3.97926797E-01;
  COFD[13643] = 1.74272678E-02;
  COFD[13644] = -1.68974643E+01;
  COFD[13645] = 4.11378655E+00;
  COFD[13646] = -3.27077608E-01;
  COFD[13647] = 1.45156838E-02;
  COFD[13648] = -2.01501358E+01;
  COFD[13649] = 5.05393232E+00;
  COFD[13650] = -4.33941169E-01;
  COFD[13651] = 1.85217364E-02;
  COFD[13652] = -2.01501358E+01;
  COFD[13653] = 5.05393232E+00;
  COFD[13654] = -4.33941169E-01;
  COFD[13655] = 1.85217364E-02;
  COFD[13656] = -1.47434595E+01;
  COFD[13657] = 3.32669990E+00;
  COFD[13658] = -2.26245876E-01;
  COFD[13659] = 1.02009489E-02;
  COFD[13660] = -1.48992951E+01;
  COFD[13661] = 3.45291069E+00;
  COFD[13662] = -2.42822180E-01;
  COFD[13663] = 1.09275752E-02;
  COFD[13664] = -1.49202049E+01;
  COFD[13665] = 3.45291069E+00;
  COFD[13666] = -2.42822180E-01;
  COFD[13667] = 1.09275752E-02;
  COFD[13668] = -1.99047325E+01;
  COFD[13669] = 5.10455309E+00;
  COFD[13670] = -4.34334520E-01;
  COFD[13671] = 1.82832380E-02;
  COFD[13672] = -1.50944975E+01;
  COFD[13673] = 3.32669990E+00;
  COFD[13674] = -2.26245876E-01;
  COFD[13675] = 1.02009489E-02;
  COFD[13676] = -1.58645548E+01;
  COFD[13677] = 3.63008569E+00;
  COFD[13678] = -2.65336160E-01;
  COFD[13679] = 1.18822150E-02;
  COFD[13680] = -1.81065039E+01;
  COFD[13681] = 4.43405790E+00;
  COFD[13682] = -3.66882237E-01;
  COFD[13683] = 1.61700748E-02;
  COFD[13684] = -1.87000252E+01;
  COFD[13685] = 4.61983256E+00;
  COFD[13686] = -3.89971404E-01;
  COFD[13687] = 1.71306317E-02;
  COFD[13688] = -1.63285665E+01;
  COFD[13689] = 3.81213432E+00;
  COFD[13690] = -2.88477875E-01;
  COFD[13691] = 1.28642729E-02;
  COFD[13692] = -1.52335903E+01;
  COFD[13693] = 3.38547303E+00;
  COFD[13694] = -2.34077576E-01;
  COFD[13695] = 1.05493143E-02;
  COFD[13696] = -2.03010778E+01;
  COFD[13697] = 5.11262039E+00;
  COFD[13698] = -4.33323900E-01;
  COFD[13699] = 1.81544791E-02;
  COFD[13700] = -2.03103130E+01;
  COFD[13701] = 5.11262039E+00;
  COFD[13702] = -4.33323900E-01;
  COFD[13703] = 1.81544791E-02;
  COFD[13704] = -1.68974841E+01;
  COFD[13705] = 4.11378655E+00;
  COFD[13706] = -3.27077608E-01;
  COFD[13707] = 1.45156838E-02;
  COFD[13708] = -1.86955794E+01;
  COFD[13709] = 4.61983256E+00;
  COFD[13710] = -3.89971404E-01;
  COFD[13711] = 1.71306317E-02;
  COFD[13712] = -1.86955794E+01;
  COFD[13713] = 4.61983256E+00;
  COFD[13714] = -3.89971404E-01;
  COFD[13715] = 1.71306317E-02;
  COFD[13716] = -1.86955794E+01;
  COFD[13717] = 4.61983256E+00;
  COFD[13718] = -3.89971404E-01;
  COFD[13719] = 1.71306317E-02;
  COFD[13720] = -1.86908714E+01;
  COFD[13721] = 4.61983256E+00;
  COFD[13722] = -3.89971404E-01;
  COFD[13723] = 1.71306317E-02;
  COFD[13724] = -1.58476764E+01;
  COFD[13725] = 3.63008569E+00;
  COFD[13726] = -2.65336160E-01;
  COFD[13727] = 1.18822150E-02;
  COFD[13728] = -1.68515802E+01;
  COFD[13729] = 4.00415431E+00;
  COFD[13730] = -3.13089959E-01;
  COFD[13731] = 1.39187926E-02;
  COFD[13732] = -1.93231690E+01;
  COFD[13733] = 4.73091965E+00;
  COFD[13734] = -4.02305999E-01;
  COFD[13735] = 1.75778646E-02;
  COFD[13736] = -1.93276925E+01;
  COFD[13737] = 4.73091965E+00;
  COFD[13738] = -4.02305999E-01;
  COFD[13739] = 1.75778646E-02;
  COFD[13740] = -2.01548403E+01;
  COFD[13741] = 5.05393232E+00;
  COFD[13742] = -4.33941169E-01;
  COFD[13743] = 1.85217364E-02;
  COFD[13744] = -2.01593711E+01;
  COFD[13745] = 5.05393232E+00;
  COFD[13746] = -4.33941169E-01;
  COFD[13747] = 1.85217364E-02;
  COFD[13748] = -1.96114978E+01;
  COFD[13749] = 5.02642485E+00;
  COFD[13750] = -4.33400950E-01;
  COFD[13751] = 1.86246451E-02;
  COFD[13752] = -1.50043204E+01;
  COFD[13753] = 3.45291069E+00;
  COFD[13754] = -2.42822180E-01;
  COFD[13755] = 1.09275752E-02;
  COFD[13756] = -1.65537539E+01;
  COFD[13757] = 3.89909300E+00;
  COFD[13758] = -2.99543156E-01;
  COFD[13759] = 1.33345146E-02;
  COFD[13760] = -1.91985137E+01;
  COFD[13761] = 4.77052462E+00;
  COFD[13762] = -4.06325803E-01;
  COFD[13763] = 1.77045805E-02;
  COFD[13764] = -1.92833929E+01;
  COFD[13765] = 4.77052462E+00;
  COFD[13766] = -4.06325803E-01;
  COFD[13767] = 1.77045805E-02;
  COFD[13768] = -1.93305132E+01;
  COFD[13769] = 4.77052462E+00;
  COFD[13770] = -4.06325803E-01;
  COFD[13771] = 1.77045805E-02;
  COFD[13772] = -1.72676903E+01;
  COFD[13773] = 3.98080999E+00;
  COFD[13774] = -3.10081093E-01;
  COFD[13775] = 1.37890749E-02;
  COFD[13776] = -1.91916705E+01;
  COFD[13777] = 4.77052462E+00;
  COFD[13778] = -4.06325803E-01;
  COFD[13779] = 1.77045805E-02;
  COFD[13780] = -1.92799470E+01;
  COFD[13781] = 4.77052462E+00;
  COFD[13782] = -4.06325803E-01;
  COFD[13783] = 1.77045805E-02;
  COFD[13784] = -1.68162564E+01;
  COFD[13785] = 3.85546414E+00;
  COFD[13786] = -2.94015716E-01;
  COFD[13787] = 1.31006433E-02;
  COFD[13788] = -1.91844977E+01;
  COFD[13789] = 4.77052462E+00;
  COFD[13790] = -4.06325803E-01;
  COFD[13791] = 1.77045805E-02;
  COFD[13792] = -1.63107683E+01;
  COFD[13793] = 3.71830365E+00;
  COFD[13794] = -2.76376641E-01;
  COFD[13795] = 1.23428762E-02;
  COFD[13796] = -1.58002139E+01;
  COFD[13797] = 3.60269020E+00;
  COFD[13798] = -2.61928318E-01;
  COFD[13799] = 1.17409749E-02;
  COFD[13800] = -2.01451788E+01;
  COFD[13801] = 4.97019920E+00;
  COFD[13802] = -4.28797011E-01;
  COFD[13803] = 1.85372303E-02;
  COFD[13804] = -2.01107223E+01;
  COFD[13805] = 4.97019920E+00;
  COFD[13806] = -4.28797011E-01;
  COFD[13807] = 1.85372303E-02;
  COFD[13808] = -2.00578061E+01;
  COFD[13809] = 4.97019920E+00;
  COFD[13810] = -4.28797011E-01;
  COFD[13811] = 1.85372303E-02;
  COFD[13812] = -2.03849888E+01;
  COFD[13813] = 4.90297486E+00;
  COFD[13814] = -3.88437024E-01;
  COFD[13815] = 1.54825639E-02;
  COFD[13816] = -1.93231690E+01;
  COFD[13817] = 4.73091965E+00;
  COFD[13818] = -4.02305999E-01;
  COFD[13819] = 1.75778646E-02;
  COFD[13820] = -1.93231690E+01;
  COFD[13821] = 4.73091965E+00;
  COFD[13822] = -4.02305999E-01;
  COFD[13823] = 1.75778646E-02;
  COFD[13824] = -1.30145015E+01;
  COFD[13825] = 3.04654412E+00;
  COFD[13826] = -1.89439554E-01;
  COFD[13827] = 8.58743756E-03;
  COFD[13828] = -1.61529841E+01;
  COFD[13829] = 4.44989603E+00;
  COFD[13830] = -3.68828569E-01;
  COFD[13831] = 1.62501057E-02;
  COFD[13832] = -1.57539984E+01;
  COFD[13833] = 3.76178392E+00;
  COFD[13834] = -2.82003508E-01;
  COFD[13835] = 1.25861906E-02;
  COFD[13836] = -1.71424626E+01;
  COFD[13837] = 4.11579280E+00;
  COFD[13838] = -3.27325412E-01;
  COFD[13839] = 1.45259007E-02;
  COFD[13840] = -1.57756198E+01;
  COFD[13841] = 3.76178392E+00;
  COFD[13842] = -2.82003508E-01;
  COFD[13843] = 1.25861906E-02;
  COFD[13844] = -1.97673840E+01;
  COFD[13845] = 4.95338757E+00;
  COFD[13846] = -3.98228674E-01;
  COFD[13847] = 1.60392324E-02;
  COFD[13848] = -1.71510142E+01;
  COFD[13849] = 4.11579280E+00;
  COFD[13850] = -3.27325412E-01;
  COFD[13851] = 1.45259007E-02;
  COFD[13852] = -1.71591946E+01;
  COFD[13853] = 4.11579280E+00;
  COFD[13854] = -3.27325412E-01;
  COFD[13855] = 1.45259007E-02;
  COFD[13856] = -1.55090330E+01;
  COFD[13857] = 3.64636403E+00;
  COFD[13858] = -2.67291065E-01;
  COFD[13859] = 1.19600168E-02;
  COFD[13860] = -1.56783070E+01;
  COFD[13861] = 3.76178392E+00;
  COFD[13862] = -2.82003508E-01;
  COFD[13863] = 1.25861906E-02;
  COFD[13864] = -1.78734020E+01;
  COFD[13865] = 4.44223078E+00;
  COFD[13866] = -3.67882929E-01;
  COFD[13867] = 1.62110522E-02;
  COFD[13868] = -1.78734020E+01;
  COFD[13869] = 4.44223078E+00;
  COFD[13870] = -3.67882929E-01;
  COFD[13871] = 1.62110522E-02;
  COFD[13872] = -1.78988492E+01;
  COFD[13873] = 4.44223078E+00;
  COFD[13874] = -3.67882929E-01;
  COFD[13875] = 1.62110522E-02;
  COFD[13876] = -1.78531771E+01;
  COFD[13877] = 4.42308477E+00;
  COFD[13878] = -3.65545815E-01;
  COFD[13879] = 1.61156849E-02;
  COFD[13880] = -1.68787626E+01;
  COFD[13881] = 4.01121277E+00;
  COFD[13882] = -3.13992770E-01;
  COFD[13883] = 1.39573845E-02;
  COFD[13884] = -1.97152658E+01;
  COFD[13885] = 4.95251652E+00;
  COFD[13886] = -4.27034429E-01;
  COFD[13887] = 1.84828789E-02;
  COFD[13888] = -2.03691063E+01;
  COFD[13889] = 5.06786046E+00;
  COFD[13890] = -4.19841386E-01;
  COFD[13891] = 1.72550125E-02;
  COFD[13892] = -2.03789252E+01;
  COFD[13893] = 5.06786046E+00;
  COFD[13894] = -4.19841386E-01;
  COFD[13895] = 1.72550125E-02;
  COFD[13896] = -2.03723418E+01;
  COFD[13897] = 5.11098109E+00;
  COFD[13898] = -4.32207391E-01;
  COFD[13899] = 1.80688526E-02;
  COFD[13900] = -2.03723418E+01;
  COFD[13901] = 5.11098109E+00;
  COFD[13902] = -4.32207391E-01;
  COFD[13903] = 1.80688526E-02;
  COFD[13904] = -2.03896061E+01;
  COFD[13905] = 5.07157808E+00;
  COFD[13906] = -4.21499024E-01;
  COFD[13907] = 1.73743839E-02;
  COFD[13908] = -1.92218475E+01;
  COFD[13909] = 4.80973969E+00;
  COFD[13910] = -4.11026097E-01;
  COFD[13911] = 1.78925949E-02;
  COFD[13912] = -1.92338918E+01;
  COFD[13913] = 4.80973969E+00;
  COFD[13914] = -4.11026097E-01;
  COFD[13915] = 1.78925949E-02;
  COFD[13916] = -1.92453028E+01;
  COFD[13917] = 4.80973969E+00;
  COFD[13918] = -4.11026097E-01;
  COFD[13919] = 1.78925949E-02;
  COFD[13920] = -1.99229731E+01;
  COFD[13921] = 5.02679748E+00;
  COFD[13922] = -4.33402556E-01;
  COFD[13923] = 1.86227634E-02;
  COFD[13924] = -1.98282860E+01;
  COFD[13925] = 4.97552540E+00;
  COFD[13926] = -4.29336775E-01;
  COFD[13927] = 1.85543422E-02;
  COFD[13928] = -1.98380840E+01;
  COFD[13929] = 4.97552540E+00;
  COFD[13930] = -4.29336775E-01;
  COFD[13931] = 1.85543422E-02;
  COFD[13932] = -1.79379541E+01;
  COFD[13933] = 4.49061160E+00;
  COFD[13934] = -3.73905084E-01;
  COFD[13935] = 1.64620749E-02;
  COFD[13936] = -2.05289615E+01;
  COFD[13937] = 5.09463426E+00;
  COFD[13938] = -4.28287057E-01;
  COFD[13939] = 1.78244410E-02;
  COFD[13940] = -2.05289615E+01;
  COFD[13941] = 5.09463426E+00;
  COFD[13942] = -4.28287057E-01;
  COFD[13943] = 1.78244410E-02;
  COFD[13944] = -1.55670532E+01;
  COFD[13945] = 3.64636403E+00;
  COFD[13946] = -2.67291065E-01;
  COFD[13947] = 1.19600168E-02;
  COFD[13948] = -1.56979638E+01;
  COFD[13949] = 3.76178392E+00;
  COFD[13950] = -2.82003508E-01;
  COFD[13951] = 1.25861906E-02;
  COFD[13952] = -1.57213652E+01;
  COFD[13953] = 3.76178392E+00;
  COFD[13954] = -2.82003508E-01;
  COFD[13955] = 1.25861906E-02;
  COFD[13956] = -1.99755713E+01;
  COFD[13957] = 5.07176743E+00;
  COFD[13958] = -4.21583208E-01;
  COFD[13959] = 1.73804603E-02;
  COFD[13960] = -1.59540002E+01;
  COFD[13961] = 3.64636403E+00;
  COFD[13962] = -2.67291065E-01;
  COFD[13963] = 1.19600168E-02;
  COFD[13964] = -1.68714826E+01;
  COFD[13965] = 4.00415431E+00;
  COFD[13966] = -3.13089959E-01;
  COFD[13967] = 1.39187926E-02;
  COFD[13968] = -1.90841173E+01;
  COFD[13969] = 4.76400419E+00;
  COFD[13970] = -4.05696060E-01;
  COFD[13971] = 1.76864589E-02;
  COFD[13972] = -1.96192825E+01;
  COFD[13973] = 4.91708832E+00;
  COFD[13974] = -4.23361260E-01;
  COFD[13975] = 1.83617469E-02;
  COFD[13976] = -1.73635244E+01;
  COFD[13977] = 4.19377249E+00;
  COFD[13978] = -3.36826583E-01;
  COFD[13979] = 1.49117907E-02;
  COFD[13980] = -1.60535905E+01;
  COFD[13981] = 3.68829239E+00;
  COFD[13982] = -2.72526207E-01;
  COFD[13983] = 1.21778683E-02;
  COFD[13984] = -2.02256135E+01;
  COFD[13985] = 4.95955284E+00;
  COFD[13986] = -3.99333312E-01;
  COFD[13987] = 1.60996624E-02;
  COFD[13988] = -2.02364539E+01;
  COFD[13989] = 4.95955284E+00;
  COFD[13990] = -3.99333312E-01;
  COFD[13991] = 1.60996624E-02;
  COFD[13992] = -1.79379781E+01;
  COFD[13993] = 4.49061160E+00;
  COFD[13994] = -3.73905084E-01;
  COFD[13995] = 1.64620749E-02;
  COFD[13996] = -1.96138490E+01;
  COFD[13997] = 4.91708832E+00;
  COFD[13998] = -4.23361260E-01;
  COFD[13999] = 1.83617469E-02;
  COFD[14000] = -1.96138490E+01;
  COFD[14001] = 4.91708832E+00;
  COFD[14002] = -4.23361260E-01;
  COFD[14003] = 1.83617469E-02;
  COFD[14004] = -1.96138490E+01;
  COFD[14005] = 4.91708832E+00;
  COFD[14006] = -4.23361260E-01;
  COFD[14007] = 1.83617469E-02;
  COFD[14008] = -1.96081068E+01;
  COFD[14009] = 4.91708832E+00;
  COFD[14010] = -4.23361260E-01;
  COFD[14011] = 1.83617469E-02;
  COFD[14012] = -1.68515802E+01;
  COFD[14013] = 4.00415431E+00;
  COFD[14014] = -3.13089959E-01;
  COFD[14015] = 1.39187926E-02;
  COFD[14016] = -1.79004181E+01;
  COFD[14017] = 4.38333127E+00;
  COFD[14018] = -3.60613122E-01;
  COFD[14019] = 1.59107445E-02;
  COFD[14020] = -2.02119205E+01;
  COFD[14021] = 5.00549123E+00;
  COFD[14022] = -4.31910843E-01;
  COFD[14023] = 1.86110298E-02;
  COFD[14024] = -2.02174496E+01;
  COFD[14025] = 5.00549123E+00;
  COFD[14026] = -4.31910843E-01;
  COFD[14027] = 1.86110298E-02;
  COFD[14028] = -2.05346996E+01;
  COFD[14029] = 5.09463426E+00;
  COFD[14030] = -4.28287057E-01;
  COFD[14031] = 1.78244410E-02;
  COFD[14032] = -2.05402372E+01;
  COFD[14033] = 5.09463426E+00;
  COFD[14034] = -4.28287057E-01;
  COFD[14035] = 1.78244410E-02;
  COFD[14036] = -1.97902081E+01;
  COFD[14037] = 5.06714415E+00;
  COFD[14038] = -4.33982050E-01;
  COFD[14039] = 1.84540942E-02;
  COFD[14040] = -1.58138017E+01;
  COFD[14041] = 3.76178392E+00;
  COFD[14042] = -2.82003508E-01;
  COFD[14043] = 1.25861906E-02;
  COFD[14044] = -1.76104306E+01;
  COFD[14045] = 4.28522084E+00;
  COFD[14046] = -3.48321143E-01;
  COFD[14047] = 1.53950513E-02;
  COFD[14048] = -1.98998399E+01;
  COFD[14049] = 4.99640615E+00;
  COFD[14050] = -4.31162359E-01;
  COFD[14051] = 1.85964996E-02;
  COFD[14052] = -2.00031879E+01;
  COFD[14053] = 4.99640615E+00;
  COFD[14054] = -4.31162359E-01;
  COFD[14055] = 1.85964996E-02;
  COFD[14056] = -2.00623607E+01;
  COFD[14057] = 4.99640615E+00;
  COFD[14058] = -4.31162359E-01;
  COFD[14059] = 1.85964996E-02;
  COFD[14060] = -1.83661965E+01;
  COFD[14061] = 4.36218263E+00;
  COFD[14062] = -3.57979690E-01;
  COFD[14063] = 1.58009336E-02;
  COFD[14064] = -1.98916664E+01;
  COFD[14065] = 4.99640615E+00;
  COFD[14066] = -4.31162359E-01;
  COFD[14067] = 1.85964996E-02;
  COFD[14068] = -1.99989150E+01;
  COFD[14069] = 4.99640615E+00;
  COFD[14070] = -4.31162359E-01;
  COFD[14071] = 1.85964996E-02;
  COFD[14072] = -1.78962062E+01;
  COFD[14073] = 4.23696189E+00;
  COFD[14074] = -3.42236218E-01;
  COFD[14075] = 1.51383324E-02;
  COFD[14076] = -1.98831222E+01;
  COFD[14077] = 4.99640615E+00;
  COFD[14078] = -4.31162359E-01;
  COFD[14079] = 1.85964996E-02;
  COFD[14080] = -1.74162810E+01;
  COFD[14081] = 4.12115065E+00;
  COFD[14082] = -3.27987278E-01;
  COFD[14083] = 1.45531939E-02;
  COFD[14084] = -1.67676995E+01;
  COFD[14085] = 3.96003955E+00;
  COFD[14086] = -3.07400975E-01;
  COFD[14087] = 1.36734078E-02;
  COFD[14088] = -2.07107312E+01;
  COFD[14089] = 5.08356041E+00;
  COFD[14090] = -4.34315412E-01;
  COFD[14091] = 1.83939333E-02;
  COFD[14092] = -2.06667158E+01;
  COFD[14093] = 5.08356041E+00;
  COFD[14094] = -4.34315412E-01;
  COFD[14095] = 1.83939333E-02;
  COFD[14096] = -2.06006465E+01;
  COFD[14097] = 5.08356041E+00;
  COFD[14098] = -4.34315412E-01;
  COFD[14099] = 1.83939333E-02;
  COFD[14100] = -1.96910493E+01;
  COFD[14101] = 4.46192494E+00;
  COFD[14102] = -3.12739268E-01;
  COFD[14103] = 1.14480787E-02;
  COFD[14104] = -2.02119205E+01;
  COFD[14105] = 5.00549123E+00;
  COFD[14106] = -4.31910843E-01;
  COFD[14107] = 1.86110298E-02;
  COFD[14108] = -2.02119205E+01;
  COFD[14109] = 5.00549123E+00;
  COFD[14110] = -4.31910843E-01;
  COFD[14111] = 1.86110298E-02;
  COFD[14112] = -1.51657506E+01;
  COFD[14113] = 3.67829613E+00;
  COFD[14114] = -2.71248709E-01;
  COFD[14115] = 1.21233589E-02;
  COFD[14116] = -1.84504600E+01;
  COFD[14117] = 5.02876303E+00;
  COFD[14118] = -4.33391605E-01;
  COFD[14119] = 1.86111689E-02;
  COFD[14120] = -1.83836850E+01;
  COFD[14121] = 4.54835769E+00;
  COFD[14122] = -3.81194036E-01;
  COFD[14123] = 1.67703153E-02;
  COFD[14124] = -1.95815882E+01;
  COFD[14125] = 4.81568564E+00;
  COFD[14126] = -4.11759763E-01;
  COFD[14127] = 1.79229378E-02;
  COFD[14128] = -1.84057767E+01;
  COFD[14129] = 4.54835769E+00;
  COFD[14130] = -3.81194036E-01;
  COFD[14131] = 1.67703153E-02;
  COFD[14132] = -1.83546056E+01;
  COFD[14133] = 3.86526682E+00;
  COFD[14134] = -2.17594533E-01;
  COFD[14135] = 6.60377130E-03;
  COFD[14136] = -1.95904286E+01;
  COFD[14137] = 4.81568564E+00;
  COFD[14138] = -4.11759763E-01;
  COFD[14139] = 1.79229378E-02;
  COFD[14140] = -1.95988902E+01;
  COFD[14141] = 4.81568564E+00;
  COFD[14142] = -4.11759763E-01;
  COFD[14143] = 1.79229378E-02;
  COFD[14144] = -1.80284219E+01;
  COFD[14145] = 4.40864461E+00;
  COFD[14146] = -3.63763109E-01;
  COFD[14147] = 1.60420204E-02;
  COFD[14148] = -1.83065016E+01;
  COFD[14149] = 4.54835769E+00;
  COFD[14150] = -3.81194036E-01;
  COFD[14151] = 1.67703153E-02;
  COFD[14152] = -2.00737449E+01;
  COFD[14153] = 5.02732445E+00;
  COFD[14154] = -4.33404796E-01;
  COFD[14155] = 1.86200998E-02;
  COFD[14156] = -2.00737449E+01;
  COFD[14157] = 5.02732445E+00;
  COFD[14158] = -4.33404796E-01;
  COFD[14159] = 1.86200998E-02;
  COFD[14160] = -2.00996961E+01;
  COFD[14161] = 5.02732445E+00;
  COFD[14162] = -4.33404796E-01;
  COFD[14163] = 1.86200998E-02;
  COFD[14164] = -2.00889371E+01;
  COFD[14165] = 5.02335992E+00;
  COFD[14166] = -4.33409572E-01;
  COFD[14167] = 1.86420385E-02;
  COFD[14168] = -1.93450338E+01;
  COFD[14169] = 4.73591519E+00;
  COFD[14170] = -4.02862908E-01;
  COFD[14171] = 1.75981577E-02;
  COFD[14172] = -2.09427456E+01;
  COFD[14173] = 5.07258549E+00;
  COFD[14174] = -4.21992675E-01;
  COFD[14175] = 1.74105511E-02;
  COFD[14176] = -1.94323607E+01;
  COFD[14177] = 4.21347895E+00;
  COFD[14178] = -2.72570973E-01;
  COFD[14179] = 9.38467228E-03;
  COFD[14180] = -1.94424932E+01;
  COFD[14181] = 4.21347895E+00;
  COFD[14182] = -2.72570973E-01;
  COFD[14183] = 9.38467228E-03;
  COFD[14184] = -2.00632191E+01;
  COFD[14185] = 4.53701285E+00;
  COFD[14186] = -3.25443481E-01;
  COFD[14187] = 1.21180475E-02;
  COFD[14188] = -2.00632191E+01;
  COFD[14189] = 4.53701285E+00;
  COFD[14190] = -3.25443481E-01;
  COFD[14191] = 1.21180475E-02;
  COFD[14192] = -1.96230821E+01;
  COFD[14193] = 4.29296671E+00;
  COFD[14194] = -2.85195578E-01;
  COFD[14195] = 1.00261411E-02;
  COFD[14196] = -2.08256710E+01;
  COFD[14197] = 5.11267190E+00;
  COFD[14198] = -4.33165102E-01;
  COFD[14199] = 1.81407852E-02;
  COFD[14200] = -2.08380673E+01;
  COFD[14201] = 5.11267190E+00;
  COFD[14202] = -4.33165102E-01;
  COFD[14203] = 1.81407852E-02;
  COFD[14204] = -2.08498201E+01;
  COFD[14205] = 5.11267190E+00;
  COFD[14206] = -4.33165102E-01;
  COFD[14207] = 1.81407852E-02;
  COFD[14208] = -2.08102625E+01;
  COFD[14209] = 4.99697590E+00;
  COFD[14210] = -4.06056891E-01;
  COFD[14211] = 1.64683071E-02;
  COFD[14212] = -2.09684519E+01;
  COFD[14213] = 5.06936561E+00;
  COFD[14214] = -4.20391597E-01;
  COFD[14215] = 1.72932254E-02;
  COFD[14216] = -2.09785632E+01;
  COFD[14217] = 5.06936561E+00;
  COFD[14218] = -4.20391597E-01;
  COFD[14219] = 1.72932254E-02;
  COFD[14220] = -2.01446226E+01;
  COFD[14221] = 5.03516244E+00;
  COFD[14222] = -4.33206320E-01;
  COFD[14223] = 1.85604611E-02;
  COFD[14224] = -2.01079804E+01;
  COFD[14225] = 4.47606207E+00;
  COFD[14226] = -3.15096463E-01;
  COFD[14227] = 1.15713778E-02;
  COFD[14228] = -2.01079804E+01;
  COFD[14229] = 4.47606207E+00;
  COFD[14230] = -3.15096463E-01;
  COFD[14231] = 1.15713778E-02;
  COFD[14232] = -1.80874969E+01;
  COFD[14233] = 4.40864461E+00;
  COFD[14234] = -3.63763109E-01;
  COFD[14235] = 1.60420204E-02;
  COFD[14236] = -1.83343082E+01;
  COFD[14237] = 4.54835769E+00;
  COFD[14238] = -3.81194036E-01;
  COFD[14239] = 1.67703153E-02;
  COFD[14240] = -1.83581962E+01;
  COFD[14241] = 4.54835769E+00;
  COFD[14242] = -3.81194036E-01;
  COFD[14243] = 1.67703153E-02;
  COFD[14244] = -1.92550867E+01;
  COFD[14245] = 4.29697226E+00;
  COFD[14246] = -2.85832295E-01;
  COFD[14247] = 1.00585155E-02;
  COFD[14248] = -1.84522759E+01;
  COFD[14249] = 4.40864461E+00;
  COFD[14250] = -3.63763109E-01;
  COFD[14251] = 1.60420204E-02;
  COFD[14252] = -1.93437003E+01;
  COFD[14253] = 4.73091965E+00;
  COFD[14254] = -4.02305999E-01;
  COFD[14255] = 1.75778646E-02;
  COFD[14256] = -2.08165540E+01;
  COFD[14257] = 5.10965671E+00;
  COFD[14258] = -4.34281725E-01;
  COFD[14259] = 1.82515265E-02;
  COFD[14260] = -2.09279720E+01;
  COFD[14261] = 5.07680752E+00;
  COFD[14262] = -4.24280733E-01;
  COFD[14263] = 1.75807248E-02;
  COFD[14264] = -1.98316531E+01;
  COFD[14265] = 4.90059433E+00;
  COFD[14266] = -4.21531841E-01;
  COFD[14267] = 1.82951913E-02;
  COFD[14268] = -1.85825816E+01;
  COFD[14269] = 4.46266131E+00;
  COFD[14270] = -3.70418513E-01;
  COFD[14271] = 1.63164500E-02;
  COFD[14272] = -1.87755546E+01;
  COFD[14273] = 3.88208519E+00;
  COFD[14274] = -2.20217240E-01;
  COFD[14275] = 6.73532722E-03;
  COFD[14276] = -1.87867269E+01;
  COFD[14277] = 3.88208519E+00;
  COFD[14278] = -2.20217240E-01;
  COFD[14279] = 6.73532722E-03;
  COFD[14280] = -2.01446476E+01;
  COFD[14281] = 5.03516244E+00;
  COFD[14282] = -4.33206320E-01;
  COFD[14283] = 1.85604611E-02;
  COFD[14284] = -2.09223240E+01;
  COFD[14285] = 5.07680752E+00;
  COFD[14286] = -4.24280733E-01;
  COFD[14287] = 1.75807248E-02;
  COFD[14288] = -2.09223240E+01;
  COFD[14289] = 5.07680752E+00;
  COFD[14290] = -4.24280733E-01;
  COFD[14291] = 1.75807248E-02;
  COFD[14292] = -2.09223240E+01;
  COFD[14293] = 5.07680752E+00;
  COFD[14294] = -4.24280733E-01;
  COFD[14295] = 1.75807248E-02;
  COFD[14296] = -2.09163577E+01;
  COFD[14297] = 5.07680752E+00;
  COFD[14298] = -4.24280733E-01;
  COFD[14299] = 1.75807248E-02;
  COFD[14300] = -1.93231690E+01;
  COFD[14301] = 4.73091965E+00;
  COFD[14302] = -4.02305999E-01;
  COFD[14303] = 1.75778646E-02;
  COFD[14304] = -2.02119205E+01;
  COFD[14305] = 5.00549123E+00;
  COFD[14306] = -4.31910843E-01;
  COFD[14307] = 1.86110298E-02;
  COFD[14308] = -2.12104221E+01;
  COFD[14309] = 5.04579208E+00;
  COFD[14310] = -4.15005635E-01;
  COFD[14311] = 1.69644826E-02;
  COFD[14312] = -2.12161697E+01;
  COFD[14313] = 5.04579208E+00;
  COFD[14314] = -4.15005635E-01;
  COFD[14315] = 1.69644826E-02;
  COFD[14316] = -2.01139425E+01;
  COFD[14317] = 4.47606207E+00;
  COFD[14318] = -3.15096463E-01;
  COFD[14319] = 1.15713778E-02;
  COFD[14320] = -2.01196988E+01;
  COFD[14321] = 4.47606207E+00;
  COFD[14322] = -3.15096463E-01;
  COFD[14323] = 1.15713778E-02;
  COFD[14324] = -2.03732954E+01;
  COFD[14325] = 4.87833205E+00;
  COFD[14326] = -3.83184121E-01;
  COFD[14327] = 1.51722127E-02;
  COFD[14328] = -1.84448418E+01;
  COFD[14329] = 4.54835769E+00;
  COFD[14330] = -3.81194036E-01;
  COFD[14331] = 1.67703153E-02;
  COFD[14332] = -2.00217171E+01;
  COFD[14333] = 4.95677205E+00;
  COFD[14334] = -4.27442820E-01;
  COFD[14335] = 1.84946244E-02;
  COFD[14336] = -2.09799471E+01;
  COFD[14337] = 5.05791374E+00;
  COFD[14338] = -4.17418303E-01;
  COFD[14339] = 1.71036721E-02;
  COFD[14340] = -2.10872917E+01;
  COFD[14341] = 5.05791374E+00;
  COFD[14342] = -4.17418303E-01;
  COFD[14343] = 1.71036721E-02;
  COFD[14344] = -2.11491715E+01;
  COFD[14345] = 5.05791374E+00;
  COFD[14346] = -4.17418303E-01;
  COFD[14347] = 1.71036721E-02;
  COFD[14348] = -2.06414835E+01;
  COFD[14349] = 4.99624565E+00;
  COFD[14350] = -4.31149471E-01;
  COFD[14351] = 1.85962718E-02;
  COFD[14352] = -2.09714925E+01;
  COFD[14353] = 5.05791374E+00;
  COFD[14354] = -4.17418303E-01;
  COFD[14355] = 1.71036721E-02;
  COFD[14356] = -2.10828360E+01;
  COFD[14357] = 5.05791374E+00;
  COFD[14358] = -4.17418303E-01;
  COFD[14359] = 1.71036721E-02;
  COFD[14360] = -2.03056801E+01;
  COFD[14361] = 4.93122634E+00;
  COFD[14362] = -4.24887811E-01;
  COFD[14363] = 1.84152882E-02;
  COFD[14364] = -2.09626597E+01;
  COFD[14365] = 5.05791374E+00;
  COFD[14366] = -4.17418303E-01;
  COFD[14367] = 1.71036721E-02;
  COFD[14368] = -1.98374825E+01;
  COFD[14369] = 4.82316922E+00;
  COFD[14370] = -4.12681790E-01;
  COFD[14371] = 1.79610014E-02;
  COFD[14372] = -1.92754269E+01;
  COFD[14373] = 4.70500352E+00;
  COFD[14374] = -3.99518710E-01;
  COFD[14375] = 1.74813016E-02;
  COFD[14376] = -2.10569301E+01;
  COFD[14377] = 4.82252782E+00;
  COFD[14378] = -3.73027863E-01;
  COFD[14379] = 1.46137165E-02;
  COFD[14380] = -2.10107226E+01;
  COFD[14381] = 4.82252782E+00;
  COFD[14382] = -3.73027863E-01;
  COFD[14383] = 1.46137165E-02;
  COFD[14384] = -2.09417196E+01;
  COFD[14385] = 4.82252782E+00;
  COFD[14386] = -3.73027863E-01;
  COFD[14387] = 1.46137165E-02;
  COFD[14388] = -1.64606257E+01;
  COFD[14389] = 2.62390123E+00;
  COFD[14390] = -2.65386143E-02;
  COFD[14391] = -2.87407111E-03;
  COFD[14392] = -2.12104221E+01;
  COFD[14393] = 5.04579208E+00;
  COFD[14394] = -4.15005635E-01;
  COFD[14395] = 1.69644826E-02;
  COFD[14396] = -2.12104221E+01;
  COFD[14397] = 5.04579208E+00;
  COFD[14398] = -4.15005635E-01;
  COFD[14399] = 1.69644826E-02;
  COFD[14400] = -1.51662617E+01;
  COFD[14401] = 3.67829613E+00;
  COFD[14402] = -2.71248709E-01;
  COFD[14403] = 1.21233589E-02;
  COFD[14404] = -1.84507213E+01;
  COFD[14405] = 5.02876303E+00;
  COFD[14406] = -4.33391605E-01;
  COFD[14407] = 1.86111689E-02;
  COFD[14408] = -1.83867893E+01;
  COFD[14409] = 4.54835769E+00;
  COFD[14410] = -3.81194036E-01;
  COFD[14411] = 1.67703153E-02;
  COFD[14412] = -1.95864826E+01;
  COFD[14413] = 4.81568564E+00;
  COFD[14414] = -4.11759763E-01;
  COFD[14415] = 1.79229378E-02;
  COFD[14416] = -1.84090217E+01;
  COFD[14417] = 4.54835769E+00;
  COFD[14418] = -3.81194036E-01;
  COFD[14419] = 1.67703153E-02;
  COFD[14420] = -1.83579866E+01;
  COFD[14421] = 3.86526682E+00;
  COFD[14422] = -2.17594533E-01;
  COFD[14423] = 6.60377130E-03;
  COFD[14424] = -1.95954108E+01;
  COFD[14425] = 4.81568564E+00;
  COFD[14426] = -4.11759763E-01;
  COFD[14427] = 1.79229378E-02;
  COFD[14428] = -1.96039579E+01;
  COFD[14429] = 4.81568564E+00;
  COFD[14430] = -4.11759763E-01;
  COFD[14431] = 1.79229378E-02;
  COFD[14432] = -1.80309195E+01;
  COFD[14433] = 4.40864461E+00;
  COFD[14434] = -3.63763109E-01;
  COFD[14435] = 1.60420204E-02;
  COFD[14436] = -1.83091606E+01;
  COFD[14437] = 4.54835769E+00;
  COFD[14438] = -3.81194036E-01;
  COFD[14439] = 1.67703153E-02;
  COFD[14440] = -2.00765597E+01;
  COFD[14441] = 5.02732445E+00;
  COFD[14442] = -4.33404796E-01;
  COFD[14443] = 1.86200998E-02;
  COFD[14444] = -2.00765597E+01;
  COFD[14445] = 5.02732445E+00;
  COFD[14446] = -4.33404796E-01;
  COFD[14447] = 1.86200998E-02;
  COFD[14448] = -2.01026613E+01;
  COFD[14449] = 5.02732445E+00;
  COFD[14450] = -4.33404796E-01;
  COFD[14451] = 1.86200998E-02;
  COFD[14452] = -2.00920476E+01;
  COFD[14453] = 5.02335992E+00;
  COFD[14454] = -4.33409572E-01;
  COFD[14455] = 1.86420385E-02;
  COFD[14456] = -1.93495569E+01;
  COFD[14457] = 4.73591519E+00;
  COFD[14458] = -4.02862908E-01;
  COFD[14459] = 1.75981577E-02;
  COFD[14460] = -2.09485542E+01;
  COFD[14461] = 5.07258549E+00;
  COFD[14462] = -4.21992675E-01;
  COFD[14463] = 1.74105511E-02;
  COFD[14464] = -1.94369815E+01;
  COFD[14465] = 4.21347895E+00;
  COFD[14466] = -2.72570973E-01;
  COFD[14467] = 9.38467228E-03;
  COFD[14468] = -1.94472090E+01;
  COFD[14469] = 4.21347895E+00;
  COFD[14470] = -2.72570973E-01;
  COFD[14471] = 9.38467228E-03;
  COFD[14472] = -2.00680274E+01;
  COFD[14473] = 4.53701285E+00;
  COFD[14474] = -3.25443481E-01;
  COFD[14475] = 1.21180475E-02;
  COFD[14476] = -2.00680274E+01;
  COFD[14477] = 4.53701285E+00;
  COFD[14478] = -3.25443481E-01;
  COFD[14479] = 1.21180475E-02;
  COFD[14480] = -1.96279805E+01;
  COFD[14481] = 4.29296671E+00;
  COFD[14482] = -2.85195578E-01;
  COFD[14483] = 1.00261411E-02;
  COFD[14484] = -2.08298884E+01;
  COFD[14485] = 5.11267190E+00;
  COFD[14486] = -4.33165102E-01;
  COFD[14487] = 1.81407852E-02;
  COFD[14488] = -2.08423911E+01;
  COFD[14489] = 5.11267190E+00;
  COFD[14490] = -4.33165102E-01;
  COFD[14491] = 1.81407852E-02;
  COFD[14492] = -2.08542471E+01;
  COFD[14493] = 5.11267190E+00;
  COFD[14494] = -4.33165102E-01;
  COFD[14495] = 1.81407852E-02;
  COFD[14496] = -2.08147899E+01;
  COFD[14497] = 4.99697590E+00;
  COFD[14498] = -4.06056891E-01;
  COFD[14499] = 1.64683071E-02;
  COFD[14500] = -2.09730769E+01;
  COFD[14501] = 5.06936561E+00;
  COFD[14502] = -4.20391597E-01;
  COFD[14503] = 1.72932254E-02;
  COFD[14504] = -2.09832831E+01;
  COFD[14505] = 5.06936561E+00;
  COFD[14506] = -4.20391597E-01;
  COFD[14507] = 1.72932254E-02;
  COFD[14508] = -2.01502287E+01;
  COFD[14509] = 5.03516244E+00;
  COFD[14510] = -4.33206320E-01;
  COFD[14511] = 1.85604611E-02;
  COFD[14512] = -2.01136566E+01;
  COFD[14513] = 4.47606207E+00;
  COFD[14514] = -3.15096463E-01;
  COFD[14515] = 1.15713778E-02;
  COFD[14516] = -2.01136566E+01;
  COFD[14517] = 4.47606207E+00;
  COFD[14518] = -3.15096463E-01;
  COFD[14519] = 1.15713778E-02;
  COFD[14520] = -1.80903086E+01;
  COFD[14521] = 4.40864461E+00;
  COFD[14522] = -3.63763109E-01;
  COFD[14523] = 1.60420204E-02;
  COFD[14524] = -1.83372705E+01;
  COFD[14525] = 4.54835769E+00;
  COFD[14526] = -3.81194036E-01;
  COFD[14527] = 1.67703153E-02;
  COFD[14528] = -1.83613039E+01;
  COFD[14529] = 4.54835769E+00;
  COFD[14530] = -3.81194036E-01;
  COFD[14531] = 1.67703153E-02;
  COFD[14532] = -1.92583350E+01;
  COFD[14533] = 4.29697226E+00;
  COFD[14534] = -2.85832295E-01;
  COFD[14535] = 1.00585155E-02;
  COFD[14536] = -1.84568971E+01;
  COFD[14537] = 4.40864461E+00;
  COFD[14538] = -3.63763109E-01;
  COFD[14539] = 1.60420204E-02;
  COFD[14540] = -1.93484142E+01;
  COFD[14541] = 4.73091965E+00;
  COFD[14542] = -4.02305999E-01;
  COFD[14543] = 1.75778646E-02;
  COFD[14544] = -2.08224908E+01;
  COFD[14545] = 5.10965671E+00;
  COFD[14546] = -4.34281725E-01;
  COFD[14547] = 1.82515265E-02;
  COFD[14548] = -2.09337809E+01;
  COFD[14549] = 5.07680752E+00;
  COFD[14550] = -4.24280733E-01;
  COFD[14551] = 1.75807248E-02;
  COFD[14552] = -1.98364596E+01;
  COFD[14553] = 4.90059433E+00;
  COFD[14554] = -4.21531841E-01;
  COFD[14555] = 1.82951913E-02;
  COFD[14556] = -1.85869032E+01;
  COFD[14557] = 4.46266131E+00;
  COFD[14558] = -3.70418513E-01;
  COFD[14559] = 1.63164500E-02;
  COFD[14560] = -1.87799796E+01;
  COFD[14561] = 3.88208519E+00;
  COFD[14562] = -2.20217240E-01;
  COFD[14563] = 6.73532722E-03;
  COFD[14564] = -1.87912524E+01;
  COFD[14565] = 3.88208519E+00;
  COFD[14566] = -2.20217240E-01;
  COFD[14567] = 6.73532722E-03;
  COFD[14568] = -2.01502539E+01;
  COFD[14569] = 5.03516244E+00;
  COFD[14570] = -4.33206320E-01;
  COFD[14571] = 1.85604611E-02;
  COFD[14572] = -2.09280673E+01;
  COFD[14573] = 5.07680752E+00;
  COFD[14574] = -4.24280733E-01;
  COFD[14575] = 1.75807248E-02;
  COFD[14576] = -2.09280673E+01;
  COFD[14577] = 5.07680752E+00;
  COFD[14578] = -4.24280733E-01;
  COFD[14579] = 1.75807248E-02;
  COFD[14580] = -2.09280673E+01;
  COFD[14581] = 5.07680752E+00;
  COFD[14582] = -4.24280733E-01;
  COFD[14583] = 1.75807248E-02;
  COFD[14584] = -2.09220325E+01;
  COFD[14585] = 5.07680752E+00;
  COFD[14586] = -4.24280733E-01;
  COFD[14587] = 1.75807248E-02;
  COFD[14588] = -1.93276925E+01;
  COFD[14589] = 4.73091965E+00;
  COFD[14590] = -4.02305999E-01;
  COFD[14591] = 1.75778646E-02;
  COFD[14592] = -2.02174496E+01;
  COFD[14593] = 5.00549123E+00;
  COFD[14594] = -4.31910843E-01;
  COFD[14595] = 1.86110298E-02;
  COFD[14596] = -2.12161697E+01;
  COFD[14597] = 5.04579208E+00;
  COFD[14598] = -4.15005635E-01;
  COFD[14599] = 1.69644826E-02;
  COFD[14600] = -2.12219841E+01;
  COFD[14601] = 5.04579208E+00;
  COFD[14602] = -4.15005635E-01;
  COFD[14603] = 1.69644826E-02;
  COFD[14604] = -2.01196871E+01;
  COFD[14605] = 4.47606207E+00;
  COFD[14606] = -3.15096463E-01;
  COFD[14607] = 1.15713778E-02;
  COFD[14608] = -2.01255104E+01;
  COFD[14609] = 4.47606207E+00;
  COFD[14610] = -3.15096463E-01;
  COFD[14611] = 1.15713778E-02;
  COFD[14612] = -2.03769326E+01;
  COFD[14613] = 4.87833205E+00;
  COFD[14614] = -3.83184121E-01;
  COFD[14615] = 1.51722127E-02;
  COFD[14616] = -1.84483514E+01;
  COFD[14617] = 4.54835769E+00;
  COFD[14618] = -3.81194036E-01;
  COFD[14619] = 1.67703153E-02;
  COFD[14620] = -2.00271018E+01;
  COFD[14621] = 4.95677205E+00;
  COFD[14622] = -4.27442820E-01;
  COFD[14623] = 1.84946244E-02;
  COFD[14624] = -2.09850164E+01;
  COFD[14625] = 5.05791374E+00;
  COFD[14626] = -4.17418303E-01;
  COFD[14627] = 1.71036721E-02;
  COFD[14628] = -2.10935826E+01;
  COFD[14629] = 5.05791374E+00;
  COFD[14630] = -4.17418303E-01;
  COFD[14631] = 1.71036721E-02;
  COFD[14632] = -2.11562971E+01;
  COFD[14633] = 5.05791374E+00;
  COFD[14634] = -4.17418303E-01;
  COFD[14635] = 1.71036721E-02;
  COFD[14636] = -2.06492157E+01;
  COFD[14637] = 4.99624565E+00;
  COFD[14638] = -4.31149471E-01;
  COFD[14639] = 1.85962718E-02;
  COFD[14640] = -2.09764764E+01;
  COFD[14641] = 5.05791374E+00;
  COFD[14642] = -4.17418303E-01;
  COFD[14643] = 1.71036721E-02;
  COFD[14644] = -2.10890707E+01;
  COFD[14645] = 5.05791374E+00;
  COFD[14646] = -4.17418303E-01;
  COFD[14647] = 1.71036721E-02;
  COFD[14648] = -2.03127660E+01;
  COFD[14649] = 4.93122634E+00;
  COFD[14650] = -4.24887811E-01;
  COFD[14651] = 1.84152882E-02;
  COFD[14652] = -2.09675558E+01;
  COFD[14653] = 5.05791374E+00;
  COFD[14654] = -4.17418303E-01;
  COFD[14655] = 1.71036721E-02;
  COFD[14656] = -1.98436599E+01;
  COFD[14657] = 4.82316922E+00;
  COFD[14658] = -4.12681790E-01;
  COFD[14659] = 1.79610014E-02;
  COFD[14660] = -1.92802330E+01;
  COFD[14661] = 4.70500352E+00;
  COFD[14662] = -3.99518710E-01;
  COFD[14663] = 1.74813016E-02;
  COFD[14664] = -2.10645729E+01;
  COFD[14665] = 4.82252782E+00;
  COFD[14666] = -3.73027863E-01;
  COFD[14667] = 1.46137165E-02;
  COFD[14668] = -2.10176860E+01;
  COFD[14669] = 4.82252782E+00;
  COFD[14670] = -3.73027863E-01;
  COFD[14671] = 1.46137165E-02;
  COFD[14672] = -2.09477800E+01;
  COFD[14673] = 4.82252782E+00;
  COFD[14674] = -3.73027863E-01;
  COFD[14675] = 1.46137165E-02;
  COFD[14676] = -1.64666248E+01;
  COFD[14677] = 2.62390123E+00;
  COFD[14678] = -2.65386143E-02;
  COFD[14679] = -2.87407111E-03;
  COFD[14680] = -2.12161697E+01;
  COFD[14681] = 5.04579208E+00;
  COFD[14682] = -4.15005635E-01;
  COFD[14683] = 1.69644826E-02;
  COFD[14684] = -2.12161697E+01;
  COFD[14685] = 5.04579208E+00;
  COFD[14686] = -4.15005635E-01;
  COFD[14687] = 1.69644826E-02;
  COFD[14688] = -1.64097504E+01;
  COFD[14689] = 4.24085297E+00;
  COFD[14690] = -3.42726080E-01;
  COFD[14691] = 1.51589637E-02;
  COFD[14692] = -1.86276102E+01;
  COFD[14693] = 5.07394969E+00;
  COFD[14694] = -4.23194769E-01;
  COFD[14695] = 1.75043529E-02;
  COFD[14696] = -1.94173132E+01;
  COFD[14697] = 4.98320638E+00;
  COFD[14698] = -4.30044977E-01;
  COFD[14699] = 1.85729853E-02;
  COFD[14700] = -2.02806257E+01;
  COFD[14701] = 5.07906191E+00;
  COFD[14702] = -4.34414251E-01;
  COFD[14703] = 1.84266796E-02;
  COFD[14704] = -1.94393987E+01;
  COFD[14705] = 4.98320638E+00;
  COFD[14706] = -4.30044977E-01;
  COFD[14707] = 1.85729853E-02;
  COFD[14708] = -1.48764799E+01;
  COFD[14709] = 2.30323591E+00;
  COFD[14710] = 2.16662124E-02;
  COFD[14711] = -5.22336631E-03;
  COFD[14712] = -2.02894622E+01;
  COFD[14713] = 5.07906191E+00;
  COFD[14714] = -4.34414251E-01;
  COFD[14715] = 1.84266796E-02;
  COFD[14716] = -2.02979200E+01;
  COFD[14717] = 5.07906191E+00;
  COFD[14718] = -4.34414251E-01;
  COFD[14719] = 1.84266796E-02;
  COFD[14720] = -1.91978762E+01;
  COFD[14721] = 4.90043912E+00;
  COFD[14722] = -4.21514331E-01;
  COFD[14723] = 1.82945399E-02;
  COFD[14724] = -1.93401496E+01;
  COFD[14725] = 4.98320638E+00;
  COFD[14726] = -4.30044977E-01;
  COFD[14727] = 1.85729853E-02;
  COFD[14728] = -2.03198473E+01;
  COFD[14729] = 5.07414515E+00;
  COFD[14730] = -4.23464178E-01;
  COFD[14731] = 1.75259967E-02;
  COFD[14732] = -2.03198473E+01;
  COFD[14733] = 5.07414515E+00;
  COFD[14734] = -4.23464178E-01;
  COFD[14735] = 1.75259967E-02;
  COFD[14736] = -2.03457918E+01;
  COFD[14737] = 5.07414515E+00;
  COFD[14738] = -4.23464178E-01;
  COFD[14739] = 1.75259967E-02;
  COFD[14740] = -2.03520524E+01;
  COFD[14741] = 5.07898162E+00;
  COFD[14742] = -4.24793212E-01;
  COFD[14743] = 1.76124459E-02;
  COFD[14744] = -2.01696834E+01;
  COFD[14745] = 5.05519080E+00;
  COFD[14746] = -4.33931429E-01;
  COFD[14747] = 1.85141040E-02;
  COFD[14748] = -2.00590090E+01;
  COFD[14749] = 4.61140261E+00;
  COFD[14750] = -3.37797240E-01;
  COFD[14751] = 1.27641497E-02;
  COFD[14752] = -1.64105018E+01;
  COFD[14753] = 2.82727026E+00;
  COFD[14754] = -5.72773227E-02;
  COFD[14755] = -1.36944552E-03;
  COFD[14756] = -1.64206300E+01;
  COFD[14757] = 2.82727026E+00;
  COFD[14758] = -5.72773227E-02;
  COFD[14759] = -1.36944552E-03;
  COFD[14760] = -1.76243962E+01;
  COFD[14761] = 3.39841561E+00;
  COFD[14762] = -1.44735575E-01;
  COFD[14763] = 2.95315491E-03;
  COFD[14764] = -1.76243962E+01;
  COFD[14765] = 3.39841561E+00;
  COFD[14766] = -1.44735575E-01;
  COFD[14767] = 2.95315491E-03;
  COFD[14768] = -1.66945192E+01;
  COFD[14769] = 2.94567828E+00;
  COFD[14770] = -7.52679679E-02;
  COFD[14771] = -4.84912570E-04;
  COFD[14772] = -2.03983392E+01;
  COFD[14773] = 4.85106931E+00;
  COFD[14774] = -3.78054916E-01;
  COFD[14775] = 1.48855026E-02;
  COFD[14776] = -2.04107309E+01;
  COFD[14777] = 4.85106931E+00;
  COFD[14778] = -3.78054916E-01;
  COFD[14779] = 1.48855026E-02;
  COFD[14780] = -2.04224791E+01;
  COFD[14781] = 4.85106931E+00;
  COFD[14782] = -3.78054916E-01;
  COFD[14783] = 1.48855026E-02;
  COFD[14784] = -1.96009937E+01;
  COFD[14785] = 4.38922184E+00;
  COFD[14786] = -3.00765764E-01;
  COFD[14787] = 1.08259157E-02;
  COFD[14788] = -1.99849102E+01;
  COFD[14789] = 4.55690386E+00;
  COFD[14790] = -3.28720255E-01;
  COFD[14791] = 1.22885411E-02;
  COFD[14792] = -1.99950172E+01;
  COFD[14793] = 4.55690386E+00;
  COFD[14794] = -3.28720255E-01;
  COFD[14795] = 1.22885411E-02;
  COFD[14796] = -2.03249919E+01;
  COFD[14797] = 5.07217478E+00;
  COFD[14798] = -4.21775859E-01;
  COFD[14799] = 1.73945008E-02;
  COFD[14800] = -1.75064025E+01;
  COFD[14801] = 3.26361908E+00;
  COFD[14802] = -1.23934890E-01;
  COFD[14803] = 1.91907747E-03;
  COFD[14804] = -1.75064025E+01;
  COFD[14805] = 3.26361908E+00;
  COFD[14806] = -1.23934890E-01;
  COFD[14807] = 1.91907747E-03;
  COFD[14808] = -1.92569372E+01;
  COFD[14809] = 4.90043912E+00;
  COFD[14810] = -4.21514331E-01;
  COFD[14811] = 1.82945399E-02;
  COFD[14812] = -1.93639924E+01;
  COFD[14813] = 4.98320638E+00;
  COFD[14814] = -4.30044977E-01;
  COFD[14815] = 1.85729853E-02;
  COFD[14816] = -1.93878739E+01;
  COFD[14817] = 4.98320638E+00;
  COFD[14818] = -4.30044977E-01;
  COFD[14819] = 1.85729853E-02;
  COFD[14820] = -1.63070137E+01;
  COFD[14821] = 2.95151802E+00;
  COFD[14822] = -7.61560729E-02;
  COFD[14823] = -4.41228651E-04;
  COFD[14824] = -1.96374323E+01;
  COFD[14825] = 4.90043912E+00;
  COFD[14826] = -4.21514331E-01;
  COFD[14827] = 1.82945399E-02;
  COFD[14828] = -2.01753631E+01;
  COFD[14829] = 5.05393232E+00;
  COFD[14830] = -4.33941169E-01;
  COFD[14831] = 1.85217364E-02;
  COFD[14832] = -2.04534736E+01;
  COFD[14833] = 4.88442906E+00;
  COFD[14834] = -3.84396005E-01;
  COFD[14835] = 1.52416584E-02;
  COFD[14836] = -2.02140286E+01;
  COFD[14837] = 4.69054487E+00;
  COFD[14838] = -3.51011795E-01;
  COFD[14839] = 1.34579254E-02;
  COFD[14840] = -2.03876331E+01;
  COFD[14841] = 5.09687716E+00;
  COFD[14842] = -4.34096685E-01;
  COFD[14843] = 1.83040328E-02;
  COFD[14844] = -1.97457755E+01;
  COFD[14845] = 4.94128114E+00;
  COFD[14846] = -4.25962403E-01;
  COFD[14847] = 1.84524254E-02;
  COFD[14848] = -1.53466395E+01;
  COFD[14849] = 2.32528407E+00;
  COFD[14850] = 1.83584096E-02;
  COFD[14851] = -5.06252594E-03;
  COFD[14852] = -1.53578074E+01;
  COFD[14853] = 2.32528407E+00;
  COFD[14854] = 1.83584096E-02;
  COFD[14855] = -5.06252594E-03;
  COFD[14856] = -2.03250169E+01;
  COFD[14857] = 5.07217478E+00;
  COFD[14858] = -4.21775859E-01;
  COFD[14859] = 1.73945008E-02;
  COFD[14860] = -2.02083836E+01;
  COFD[14861] = 4.69054487E+00;
  COFD[14862] = -3.51011795E-01;
  COFD[14863] = 1.34579254E-02;
  COFD[14864] = -2.02083836E+01;
  COFD[14865] = 4.69054487E+00;
  COFD[14866] = -3.51011795E-01;
  COFD[14867] = 1.34579254E-02;
  COFD[14868] = -2.02083836E+01;
  COFD[14869] = 4.69054487E+00;
  COFD[14870] = -3.51011795E-01;
  COFD[14871] = 1.34579254E-02;
  COFD[14872] = -2.02024203E+01;
  COFD[14873] = 4.69054487E+00;
  COFD[14874] = -3.51011795E-01;
  COFD[14875] = 1.34579254E-02;
  COFD[14876] = -2.01548403E+01;
  COFD[14877] = 5.05393232E+00;
  COFD[14878] = -4.33941169E-01;
  COFD[14879] = 1.85217364E-02;
  COFD[14880] = -2.05346996E+01;
  COFD[14881] = 5.09463426E+00;
  COFD[14882] = -4.28287057E-01;
  COFD[14883] = 1.78244410E-02;
  COFD[14884] = -2.01139425E+01;
  COFD[14885] = 4.47606207E+00;
  COFD[14886] = -3.15096463E-01;
  COFD[14887] = 1.15713778E-02;
  COFD[14888] = -2.01196871E+01;
  COFD[14889] = 4.47606207E+00;
  COFD[14890] = -3.15096463E-01;
  COFD[14891] = 1.15713778E-02;
  COFD[14892] = -1.75123616E+01;
  COFD[14893] = 3.26361908E+00;
  COFD[14894] = -1.23934890E-01;
  COFD[14895] = 1.91907747E-03;
  COFD[14896] = -1.75181150E+01;
  COFD[14897] = 3.26361908E+00;
  COFD[14898] = -1.23934890E-01;
  COFD[14899] = 1.91907747E-03;
  COFD[14900] = -1.85704894E+01;
  COFD[14901] = 4.02137393E+00;
  COFD[14902] = -2.42083837E-01;
  COFD[14903] = 7.83679093E-03;
  COFD[14904] = -1.94784520E+01;
  COFD[14905] = 4.98320638E+00;
  COFD[14906] = -4.30044977E-01;
  COFD[14907] = 1.85729853E-02;
  COFD[14908] = -2.04861592E+01;
  COFD[14909] = 5.11171581E+00;
  COFD[14910] = -4.33627257E-01;
  COFD[14911] = 1.81849251E-02;
  COFD[14912] = -1.98929048E+01;
  COFD[14913] = 4.50165765E+00;
  COFD[14914] = -3.19414908E-01;
  COFD[14915] = 1.17986762E-02;
  COFD[14916] = -2.00001954E+01;
  COFD[14917] = 4.50165765E+00;
  COFD[14918] = -3.19414908E-01;
  COFD[14919] = 1.17986762E-02;
  COFD[14920] = -2.00620384E+01;
  COFD[14921] = 4.50165765E+00;
  COFD[14922] = -3.19414908E-01;
  COFD[14923] = 1.17986762E-02;
  COFD[14924] = -2.10400287E+01;
  COFD[14925] = 5.10279987E+00;
  COFD[14926] = -4.30115943E-01;
  COFD[14927] = 1.79356096E-02;
  COFD[14928] = -1.98844540E+01;
  COFD[14929] = 4.50165765E+00;
  COFD[14930] = -3.19414908E-01;
  COFD[14931] = 1.17986762E-02;
  COFD[14932] = -1.99957422E+01;
  COFD[14933] = 4.50165765E+00;
  COFD[14934] = -3.19414908E-01;
  COFD[14935] = 1.17986762E-02;
  COFD[14936] = -2.08438114E+01;
  COFD[14937] = 5.10729990E+00;
  COFD[14938] = -4.34338922E-01;
  COFD[14939] = 1.82689512E-02;
  COFD[14940] = -1.98756251E+01;
  COFD[14941] = 4.50165765E+00;
  COFD[14942] = -3.19414908E-01;
  COFD[14943] = 1.17986762E-02;
  COFD[14944] = -2.05404137E+01;
  COFD[14945] = 5.08109570E+00;
  COFD[14946] = -4.34516901E-01;
  COFD[14947] = 1.84244384E-02;
  COFD[14948] = -2.01402801E+01;
  COFD[14949] = 5.04412150E+00;
  COFD[14950] = -4.33656353E-01;
  COFD[14951] = 1.85504386E-02;
  COFD[14952] = -1.90700613E+01;
  COFD[14953] = 3.86341155E+00;
  COFD[14954] = -2.17305404E-01;
  COFD[14955] = 6.58928178E-03;
  COFD[14956] = -1.90238837E+01;
  COFD[14957] = 3.86341155E+00;
  COFD[14958] = -2.17305404E-01;
  COFD[14959] = 6.58928178E-03;
  COFD[14960] = -1.89549206E+01;
  COFD[14961] = 3.86341155E+00;
  COFD[14962] = -2.17305404E-01;
  COFD[14963] = 6.58928178E-03;
  COFD[14964] = -1.22441781E+01;
  COFD[14965] = 7.53297911E-01;
  COFD[14966] = 2.51735820E-01;
  COFD[14967] = -1.62956231E-02;
  COFD[14968] = -2.01139425E+01;
  COFD[14969] = 4.47606207E+00;
  COFD[14970] = -3.15096463E-01;
  COFD[14971] = 1.15713778E-02;
  COFD[14972] = -2.01139425E+01;
  COFD[14973] = 4.47606207E+00;
  COFD[14974] = -3.15096463E-01;
  COFD[14975] = 1.15713778E-02;
  COFD[14976] = -1.64102626E+01;
  COFD[14977] = 4.24085297E+00;
  COFD[14978] = -3.42726080E-01;
  COFD[14979] = 1.51589637E-02;
  COFD[14980] = -1.86278721E+01;
  COFD[14981] = 5.07394969E+00;
  COFD[14982] = -4.23194769E-01;
  COFD[14983] = 1.75043529E-02;
  COFD[14984] = -1.94204230E+01;
  COFD[14985] = 4.98320638E+00;
  COFD[14986] = -4.30044977E-01;
  COFD[14987] = 1.85729853E-02;
  COFD[14988] = -2.02855279E+01;
  COFD[14989] = 5.07906191E+00;
  COFD[14990] = -4.34414251E-01;
  COFD[14991] = 1.84266796E-02;
  COFD[14992] = -1.94426493E+01;
  COFD[14993] = 4.98320638E+00;
  COFD[14994] = -4.30044977E-01;
  COFD[14995] = 1.85729853E-02;
  COFD[14996] = -1.48798668E+01;
  COFD[14997] = 2.30323591E+00;
  COFD[14998] = 2.16662124E-02;
  COFD[14999] = -5.22336631E-03;
  COFD[15000] = -2.02944523E+01;
  COFD[15001] = 5.07906191E+00;
  COFD[15002] = -4.34414251E-01;
  COFD[15003] = 1.84266796E-02;
  COFD[15004] = -2.03029957E+01;
  COFD[15005] = 5.07906191E+00;
  COFD[15006] = -4.34414251E-01;
  COFD[15007] = 1.84266796E-02;
  COFD[15008] = -1.92003784E+01;
  COFD[15009] = 4.90043912E+00;
  COFD[15010] = -4.21514331E-01;
  COFD[15011] = 1.82945399E-02;
  COFD[15012] = -1.93428134E+01;
  COFD[15013] = 4.98320638E+00;
  COFD[15014] = -4.30044977E-01;
  COFD[15015] = 1.85729853E-02;
  COFD[15016] = -2.03226671E+01;
  COFD[15017] = 5.07414515E+00;
  COFD[15018] = -4.23464178E-01;
  COFD[15019] = 1.75259967E-02;
  COFD[15020] = -2.03226671E+01;
  COFD[15021] = 5.07414515E+00;
  COFD[15022] = -4.23464178E-01;
  COFD[15023] = 1.75259967E-02;
  COFD[15024] = -2.03487623E+01;
  COFD[15025] = 5.07414515E+00;
  COFD[15026] = -4.23464178E-01;
  COFD[15027] = 1.75259967E-02;
  COFD[15028] = -2.03551683E+01;
  COFD[15029] = 5.07898162E+00;
  COFD[15030] = -4.24793212E-01;
  COFD[15031] = 1.76124459E-02;
  COFD[15032] = -2.01742139E+01;
  COFD[15033] = 5.05519080E+00;
  COFD[15034] = -4.33931429E-01;
  COFD[15035] = 1.85141040E-02;
  COFD[15036] = -2.00648264E+01;
  COFD[15037] = 4.61140261E+00;
  COFD[15038] = -3.37797240E-01;
  COFD[15039] = 1.27641497E-02;
  COFD[15040] = -1.64151300E+01;
  COFD[15041] = 2.82727026E+00;
  COFD[15042] = -5.72773227E-02;
  COFD[15043] = -1.36944552E-03;
  COFD[15044] = -1.64253534E+01;
  COFD[15045] = 2.82727026E+00;
  COFD[15046] = -5.72773227E-02;
  COFD[15047] = -1.36944552E-03;
  COFD[15048] = -1.76292122E+01;
  COFD[15049] = 3.39841561E+00;
  COFD[15050] = -1.44735575E-01;
  COFD[15051] = 2.95315491E-03;
  COFD[15052] = -1.76292122E+01;
  COFD[15053] = 3.39841561E+00;
  COFD[15054] = -1.44735575E-01;
  COFD[15055] = 2.95315491E-03;
  COFD[15056] = -1.66994254E+01;
  COFD[15057] = 2.94567828E+00;
  COFD[15058] = -7.52679679E-02;
  COFD[15059] = -4.84912570E-04;
  COFD[15060] = -2.04025636E+01;
  COFD[15061] = 4.85106931E+00;
  COFD[15062] = -3.78054916E-01;
  COFD[15063] = 1.48855026E-02;
  COFD[15064] = -2.04150617E+01;
  COFD[15065] = 4.85106931E+00;
  COFD[15066] = -3.78054916E-01;
  COFD[15067] = 1.48855026E-02;
  COFD[15068] = -2.04269133E+01;
  COFD[15069] = 4.85106931E+00;
  COFD[15070] = -3.78054916E-01;
  COFD[15071] = 1.48855026E-02;
  COFD[15072] = -1.96055285E+01;
  COFD[15073] = 4.38922184E+00;
  COFD[15074] = -3.00765764E-01;
  COFD[15075] = 1.08259157E-02;
  COFD[15076] = -1.99895427E+01;
  COFD[15077] = 4.55690386E+00;
  COFD[15078] = -3.28720255E-01;
  COFD[15079] = 1.22885411E-02;
  COFD[15080] = -1.99997448E+01;
  COFD[15081] = 4.55690386E+00;
  COFD[15082] = -3.28720255E-01;
  COFD[15083] = 1.22885411E-02;
  COFD[15084] = -2.03306066E+01;
  COFD[15085] = 5.07217478E+00;
  COFD[15086] = -4.21775859E-01;
  COFD[15087] = 1.73945008E-02;
  COFD[15088] = -1.75120874E+01;
  COFD[15089] = 3.26361908E+00;
  COFD[15090] = -1.23934890E-01;
  COFD[15091] = 1.91907747E-03;
  COFD[15092] = -1.75120874E+01;
  COFD[15093] = 3.26361908E+00;
  COFD[15094] = -1.23934890E-01;
  COFD[15095] = 1.91907747E-03;
  COFD[15096] = -1.92597540E+01;
  COFD[15097] = 4.90043912E+00;
  COFD[15098] = -4.21514331E-01;
  COFD[15099] = 1.82945399E-02;
  COFD[15100] = -1.93669599E+01;
  COFD[15101] = 4.98320638E+00;
  COFD[15102] = -4.30044977E-01;
  COFD[15103] = 1.85729853E-02;
  COFD[15104] = -1.93909871E+01;
  COFD[15105] = 4.98320638E+00;
  COFD[15106] = -4.30044977E-01;
  COFD[15107] = 1.85729853E-02;
  COFD[15108] = -1.63102676E+01;
  COFD[15109] = 2.95151802E+00;
  COFD[15110] = -7.61560729E-02;
  COFD[15111] = -4.41228651E-04;
  COFD[15112] = -1.96420610E+01;
  COFD[15113] = 4.90043912E+00;
  COFD[15114] = -4.21514331E-01;
  COFD[15115] = 1.82945399E-02;
  COFD[15116] = -2.01800847E+01;
  COFD[15117] = 5.05393232E+00;
  COFD[15118] = -4.33941169E-01;
  COFD[15119] = 1.85217364E-02;
  COFD[15120] = -2.04594194E+01;
  COFD[15121] = 4.88442906E+00;
  COFD[15122] = -3.84396005E-01;
  COFD[15123] = 1.52416584E-02;
  COFD[15124] = -2.02198463E+01;
  COFD[15125] = 4.69054487E+00;
  COFD[15126] = -3.51011795E-01;
  COFD[15127] = 1.34579254E-02;
  COFD[15128] = -2.03924473E+01;
  COFD[15129] = 5.09687716E+00;
  COFD[15130] = -4.34096685E-01;
  COFD[15131] = 1.83040328E-02;
  COFD[15132] = -1.97501043E+01;
  COFD[15133] = 4.94128114E+00;
  COFD[15134] = -4.25962403E-01;
  COFD[15135] = 1.84524254E-02;
  COFD[15136] = -1.53510717E+01;
  COFD[15137] = 2.32528407E+00;
  COFD[15138] = 1.83584096E-02;
  COFD[15139] = -5.06252594E-03;
  COFD[15140] = -1.53623401E+01;
  COFD[15141] = 2.32528407E+00;
  COFD[15142] = 1.83584096E-02;
  COFD[15143] = -5.06252594E-03;
  COFD[15144] = -2.03306318E+01;
  COFD[15145] = 5.07217478E+00;
  COFD[15146] = -4.21775859E-01;
  COFD[15147] = 1.73945008E-02;
  COFD[15148] = -2.02141356E+01;
  COFD[15149] = 4.69054487E+00;
  COFD[15150] = -3.51011795E-01;
  COFD[15151] = 1.34579254E-02;
  COFD[15152] = -2.02141356E+01;
  COFD[15153] = 4.69054487E+00;
  COFD[15154] = -3.51011795E-01;
  COFD[15155] = 1.34579254E-02;
  COFD[15156] = -2.02141356E+01;
  COFD[15157] = 4.69054487E+00;
  COFD[15158] = -3.51011795E-01;
  COFD[15159] = 1.34579254E-02;
  COFD[15160] = -2.02081037E+01;
  COFD[15161] = 4.69054487E+00;
  COFD[15162] = -3.51011795E-01;
  COFD[15163] = 1.34579254E-02;
  COFD[15164] = -2.01593711E+01;
  COFD[15165] = 5.05393232E+00;
  COFD[15166] = -4.33941169E-01;
  COFD[15167] = 1.85217364E-02;
  COFD[15168] = -2.05402372E+01;
  COFD[15169] = 5.09463426E+00;
  COFD[15170] = -4.28287057E-01;
  COFD[15171] = 1.78244410E-02;
  COFD[15172] = -2.01196988E+01;
  COFD[15173] = 4.47606207E+00;
  COFD[15174] = -3.15096463E-01;
  COFD[15175] = 1.15713778E-02;
  COFD[15176] = -2.01255104E+01;
  COFD[15177] = 4.47606207E+00;
  COFD[15178] = -3.15096463E-01;
  COFD[15179] = 1.15713778E-02;
  COFD[15180] = -1.75181150E+01;
  COFD[15181] = 3.26361908E+00;
  COFD[15182] = -1.23934890E-01;
  COFD[15183] = 1.91907747E-03;
  COFD[15184] = -1.75239353E+01;
  COFD[15185] = 3.26361908E+00;
  COFD[15186] = -1.23934890E-01;
  COFD[15187] = 1.91907747E-03;
  COFD[15188] = -1.85741328E+01;
  COFD[15189] = 4.02137393E+00;
  COFD[15190] = -2.42083837E-01;
  COFD[15191] = 7.83679093E-03;
  COFD[15192] = -1.94819676E+01;
  COFD[15193] = 4.98320638E+00;
  COFD[15194] = -4.30044977E-01;
  COFD[15195] = 1.85729853E-02;
  COFD[15196] = -2.04915522E+01;
  COFD[15197] = 5.11171581E+00;
  COFD[15198] = -4.33627257E-01;
  COFD[15199] = 1.81849251E-02;
  COFD[15200] = -1.98979821E+01;
  COFD[15201] = 4.50165765E+00;
  COFD[15202] = -3.19414908E-01;
  COFD[15203] = 1.17986762E-02;
  COFD[15204] = -2.00064956E+01;
  COFD[15205] = 4.50165765E+00;
  COFD[15206] = -3.19414908E-01;
  COFD[15207] = 1.17986762E-02;
  COFD[15208] = -2.00691740E+01;
  COFD[15209] = 4.50165765E+00;
  COFD[15210] = -3.19414908E-01;
  COFD[15211] = 1.17986762E-02;
  COFD[15212] = -2.10477712E+01;
  COFD[15213] = 5.10279987E+00;
  COFD[15214] = -4.30115943E-01;
  COFD[15215] = 1.79356096E-02;
  COFD[15216] = -1.98894458E+01;
  COFD[15217] = 4.50165765E+00;
  COFD[15218] = -3.19414908E-01;
  COFD[15219] = 1.17986762E-02;
  COFD[15220] = -2.00019861E+01;
  COFD[15221] = 4.50165765E+00;
  COFD[15222] = -3.19414908E-01;
  COFD[15223] = 1.17986762E-02;
  COFD[15224] = -2.08509073E+01;
  COFD[15225] = 5.10729990E+00;
  COFD[15226] = -4.34338922E-01;
  COFD[15227] = 1.82689512E-02;
  COFD[15228] = -1.98805290E+01;
  COFD[15229] = 4.50165765E+00;
  COFD[15230] = -3.19414908E-01;
  COFD[15231] = 1.17986762E-02;
  COFD[15232] = -2.05466002E+01;
  COFD[15233] = 5.08109570E+00;
  COFD[15234] = -4.34516901E-01;
  COFD[15235] = 1.84244384E-02;
  COFD[15236] = -2.01450939E+01;
  COFD[15237] = 5.04412150E+00;
  COFD[15238] = -4.33656353E-01;
  COFD[15239] = 1.85504386E-02;
  COFD[15240] = -1.90777144E+01;
  COFD[15241] = 3.86341155E+00;
  COFD[15242] = -2.17305404E-01;
  COFD[15243] = 6.58928178E-03;
  COFD[15244] = -1.90308569E+01;
  COFD[15245] = 3.86341155E+00;
  COFD[15246] = -2.17305404E-01;
  COFD[15247] = 6.58928178E-03;
  COFD[15248] = -1.89609899E+01;
  COFD[15249] = 3.86341155E+00;
  COFD[15250] = -2.17305404E-01;
  COFD[15251] = 6.58928178E-03;
  COFD[15252] = -1.22501862E+01;
  COFD[15253] = 7.53297911E-01;
  COFD[15254] = 2.51735820E-01;
  COFD[15255] = -1.62956231E-02;
  COFD[15256] = -2.01196988E+01;
  COFD[15257] = 4.47606207E+00;
  COFD[15258] = -3.15096463E-01;
  COFD[15259] = 1.15713778E-02;
  COFD[15260] = -2.01196988E+01;
  COFD[15261] = 4.47606207E+00;
  COFD[15262] = -3.15096463E-01;
  COFD[15263] = 1.15713778E-02;
  COFD[15264] = -1.60092254E+01;
  COFD[15265] = 4.18930603E+00;
  COFD[15266] = -3.36270772E-01;
  COFD[15267] = 1.48886958E-02;
  COFD[15268] = -1.81186289E+01;
  COFD[15269] = 5.08358395E+00;
  COFD[15270] = -4.34313881E-01;
  COFD[15271] = 1.83936758E-02;
  COFD[15272] = -1.82794640E+01;
  COFD[15273] = 4.74200288E+00;
  COFD[15274] = -4.03492976E-01;
  COFD[15275] = 1.76186851E-02;
  COFD[15276] = -1.97171159E+01;
  COFD[15277] = 5.05124669E+00;
  COFD[15278] = -4.33876705E-01;
  COFD[15279] = 1.85307062E-02;
  COFD[15280] = -1.82962079E+01;
  COFD[15281] = 4.74200288E+00;
  COFD[15282] = -4.03492976E-01;
  COFD[15283] = 1.76186851E-02;
  COFD[15284] = -1.35070497E+01;
  COFD[15285] = 1.64162220E+00;
  COFD[15286] = 1.36732023E-01;
  COFD[15287] = -1.11479241E-02;
  COFD[15288] = -1.94474837E+01;
  COFD[15289] = 4.99196238E+00;
  COFD[15290] = -4.30803728E-01;
  COFD[15291] = 1.85900660E-02;
  COFD[15292] = -1.94531072E+01;
  COFD[15293] = 4.99196238E+00;
  COFD[15294] = -4.30803728E-01;
  COFD[15295] = 1.85900660E-02;
  COFD[15296] = -1.81027717E+01;
  COFD[15297] = 4.65505575E+00;
  COFD[15298] = -3.94025226E-01;
  COFD[15299] = 1.72846389E-02;
  COFD[15300] = -1.82196018E+01;
  COFD[15301] = 4.74200288E+00;
  COFD[15302] = -4.03492976E-01;
  COFD[15303] = 1.76186851E-02;
  COFD[15304] = -1.97664019E+01;
  COFD[15305] = 5.08248217E+00;
  COFD[15306] = -4.34396720E-01;
  COFD[15307] = 1.84066863E-02;
  COFD[15308] = -1.97664019E+01;
  COFD[15309] = 5.08248217E+00;
  COFD[15310] = -4.34396720E-01;
  COFD[15311] = 1.84066863E-02;
  COFD[15312] = -1.97865064E+01;
  COFD[15313] = 5.08248217E+00;
  COFD[15314] = -4.34396720E-01;
  COFD[15315] = 1.84066863E-02;
  COFD[15316] = -2.00117517E+01;
  COFD[15317] = 5.11209579E+00;
  COFD[15318] = -4.32625277E-01;
  COFD[15319] = 1.80982347E-02;
  COFD[15320] = -1.96440473E+01;
  COFD[15321] = 5.03031667E+00;
  COFD[15322] = -4.33349254E-01;
  COFD[15323] = 1.85991049E-02;
  COFD[15324] = -1.99913057E+01;
  COFD[15325] = 4.82534538E+00;
  COFD[15326] = -3.73517197E-01;
  COFD[15327] = 1.46399786E-02;
  COFD[15328] = -1.77110015E+01;
  COFD[15329] = 3.67654975E+00;
  COFD[15330] = -1.88021568E-01;
  COFD[15331] = 5.11758426E-03;
  COFD[15332] = -1.77178989E+01;
  COFD[15333] = 3.67654975E+00;
  COFD[15334] = -1.88021568E-01;
  COFD[15335] = 5.11758426E-03;
  COFD[15336] = -1.68737799E+01;
  COFD[15337] = 3.20044542E+00;
  COFD[15338] = -1.11229236E-01;
  COFD[15339] = 1.24801392E-03;
  COFD[15340] = -1.68737799E+01;
  COFD[15341] = 3.20044542E+00;
  COFD[15342] = -1.11229236E-01;
  COFD[15343] = 1.24801392E-03;
  COFD[15344] = -1.78898160E+01;
  COFD[15345] = 3.75336800E+00;
  COFD[15346] = -2.00149029E-01;
  COFD[15347] = 5.72931663E-03;
  COFD[15348] = -2.02595886E+01;
  COFD[15349] = 5.06465152E+00;
  COFD[15350] = -4.18875119E-01;
  COFD[15351] = 1.71907534E-02;
  COFD[15352] = -2.02682620E+01;
  COFD[15353] = 5.06465152E+00;
  COFD[15354] = -4.18875119E-01;
  COFD[15355] = 1.71907534E-02;
  COFD[15356] = -2.02764252E+01;
  COFD[15357] = 5.06465152E+00;
  COFD[15358] = -4.18875119E-01;
  COFD[15359] = 1.71907534E-02;
  COFD[15360] = -1.99692892E+01;
  COFD[15361] = 4.83343006E+00;
  COFD[15362] = -3.74923802E-01;
  COFD[15363] = 1.47155398E-02;
  COFD[15364] = -2.01452951E+01;
  COFD[15365] = 4.90670466E+00;
  COFD[15366] = -3.89243681E-01;
  COFD[15367] = 1.55306081E-02;
  COFD[15368] = -2.01521760E+01;
  COFD[15369] = 4.90670466E+00;
  COFD[15370] = -3.89243681E-01;
  COFD[15371] = 1.55306081E-02;
  COFD[15372] = -1.96390516E+01;
  COFD[15373] = 5.08675981E+00;
  COFD[15374] = -4.33586606E-01;
  COFD[15375] = 1.83147314E-02;
  COFD[15376] = -1.85666995E+01;
  COFD[15377] = 4.02137393E+00;
  COFD[15378] = -2.42083837E-01;
  COFD[15379] = 7.83679093E-03;
  COFD[15380] = -1.85666995E+01;
  COFD[15381] = 4.02137393E+00;
  COFD[15382] = -2.42083837E-01;
  COFD[15383] = 7.83679093E-03;
  COFD[15384] = -1.81494013E+01;
  COFD[15385] = 4.65505575E+00;
  COFD[15386] = -3.94025226E-01;
  COFD[15387] = 1.72846389E-02;
  COFD[15388] = -1.82273800E+01;
  COFD[15389] = 4.74200288E+00;
  COFD[15390] = -4.03492976E-01;
  COFD[15391] = 1.76186851E-02;
  COFD[15392] = -1.94985258E+01;
  COFD[15393] = 5.08337268E+00;
  COFD[15394] = -4.34327974E-01;
  COFD[15395] = 1.83960175E-02;
  COFD[15396] = -1.54295628E+01;
  COFD[15397] = 2.63515739E+00;
  COFD[15398] = -2.13768281E-02;
  COFD[15399] = -3.26812908E-03;
  COFD[15400] = -1.84802396E+01;
  COFD[15401] = 4.65505575E+00;
  COFD[15402] = -3.94025226E-01;
  COFD[15403] = 1.72846389E-02;
  COFD[15404] = -1.96255217E+01;
  COFD[15405] = 5.02642485E+00;
  COFD[15406] = -4.33400950E-01;
  COFD[15407] = 1.86246451E-02;
  COFD[15408] = -2.01793093E+01;
  COFD[15409] = 5.07113979E+00;
  COFD[15410] = -4.21314033E-01;
  COFD[15411] = 1.73611473E-02;
  COFD[15412] = -2.01708848E+01;
  COFD[15413] = 4.97304611E+00;
  COFD[15414] = -4.01743383E-01;
  COFD[15415] = 1.62313746E-02;
  COFD[15416] = -1.95870599E+01;
  COFD[15417] = 5.02786063E+00;
  COFD[15418] = -4.33407036E-01;
  COFD[15419] = 1.86173863E-02;
  COFD[15420] = -1.85934452E+01;
  COFD[15421] = 4.69424075E+00;
  COFD[15422] = -3.98383666E-01;
  COFD[15423] = 1.74431368E-02;
  COFD[15424] = -1.69584443E+01;
  COFD[15425] = 3.30123108E+00;
  COFD[15426] = -1.29734218E-01;
  COFD[15427] = 2.20723807E-03;
  COFD[15428] = -1.69661509E+01;
  COFD[15429] = 3.30123108E+00;
  COFD[15430] = -1.29734218E-01;
  COFD[15431] = 2.20723807E-03;
  COFD[15432] = -1.96390676E+01;
  COFD[15433] = 5.08675981E+00;
  COFD[15434] = -4.33586606E-01;
  COFD[15435] = 1.83147314E-02;
  COFD[15436] = -2.01673095E+01;
  COFD[15437] = 4.97304611E+00;
  COFD[15438] = -4.01743383E-01;
  COFD[15439] = 1.62313746E-02;
  COFD[15440] = -2.01673095E+01;
  COFD[15441] = 4.97304611E+00;
  COFD[15442] = -4.01743383E-01;
  COFD[15443] = 1.62313746E-02;
  COFD[15444] = -2.01673095E+01;
  COFD[15445] = 4.97304611E+00;
  COFD[15446] = -4.01743383E-01;
  COFD[15447] = 1.62313746E-02;
  COFD[15448] = -2.01635166E+01;
  COFD[15449] = 4.97304611E+00;
  COFD[15450] = -4.01743383E-01;
  COFD[15451] = 1.62313746E-02;
  COFD[15452] = -1.96114978E+01;
  COFD[15453] = 5.02642485E+00;
  COFD[15454] = -4.33400950E-01;
  COFD[15455] = 1.86246451E-02;
  COFD[15456] = -1.97902081E+01;
  COFD[15457] = 5.06714415E+00;
  COFD[15458] = -4.33982050E-01;
  COFD[15459] = 1.84540942E-02;
  COFD[15460] = -2.03732954E+01;
  COFD[15461] = 4.87833205E+00;
  COFD[15462] = -3.83184121E-01;
  COFD[15463] = 1.51722127E-02;
  COFD[15464] = -2.03769326E+01;
  COFD[15465] = 4.87833205E+00;
  COFD[15466] = -3.83184121E-01;
  COFD[15467] = 1.51722127E-02;
  COFD[15468] = -1.85704894E+01;
  COFD[15469] = 4.02137393E+00;
  COFD[15470] = -2.42083837E-01;
  COFD[15471] = 7.83679093E-03;
  COFD[15472] = -1.85741328E+01;
  COFD[15473] = 4.02137393E+00;
  COFD[15474] = -2.42083837E-01;
  COFD[15475] = 7.83679093E-03;
  COFD[15476] = -1.63538198E+01;
  COFD[15477] = 2.93759254E+00;
  COFD[15478] = -5.85618503E-02;
  COFD[15479] = -1.71710825E-03;
  COFD[15480] = -1.83253704E+01;
  COFD[15481] = 4.74200288E+00;
  COFD[15482] = -4.03492976E-01;
  COFD[15483] = 1.76186851E-02;
  COFD[15484] = -1.99163455E+01;
  COFD[15485] = 5.08893274E+00;
  COFD[15486] = -4.33692894E-01;
  COFD[15487] = 1.83121225E-02;
  COFD[15488] = -1.87967028E+01;
  COFD[15489] = 4.10444481E+00;
  COFD[15490] = -2.51736860E-01;
  COFD[15491] = 8.25061585E-03;
  COFD[15492] = -1.88651999E+01;
  COFD[15493] = 4.10444481E+00;
  COFD[15494] = -2.51736860E-01;
  COFD[15495] = 8.25061585E-03;
  COFD[15496] = -1.89022218E+01;
  COFD[15497] = 4.10444481E+00;
  COFD[15498] = -2.51736860E-01;
  COFD[15499] = 8.25061585E-03;
  COFD[15500] = -2.02404064E+01;
  COFD[15501] = 5.06248811E+00;
  COFD[15502] = -4.33904352E-01;
  COFD[15503] = 1.84725096E-02;
  COFD[15504] = -1.87910846E+01;
  COFD[15505] = 4.10444481E+00;
  COFD[15506] = -2.51736860E-01;
  COFD[15507] = 8.25061585E-03;
  COFD[15508] = -1.88624634E+01;
  COFD[15509] = 4.10444481E+00;
  COFD[15510] = -2.51736860E-01;
  COFD[15511] = 8.25061585E-03;
  COFD[15512] = -1.99860977E+01;
  COFD[15513] = 5.03464955E+00;
  COFD[15514] = -4.33205957E-01;
  COFD[15515] = 1.85632196E-02;
  COFD[15516] = -1.87851811E+01;
  COFD[15517] = 4.10444481E+00;
  COFD[15518] = -2.51736860E-01;
  COFD[15519] = 8.25061585E-03;
  COFD[15520] = -1.96777354E+01;
  COFD[15521] = 4.99472973E+00;
  COFD[15522] = -4.31027725E-01;
  COFD[15523] = 1.85941193E-02;
  COFD[15524] = -1.91849660E+01;
  COFD[15525] = 4.89910102E+00;
  COFD[15526] = -4.21363330E-01;
  COFD[15527] = 1.82889197E-02;
  COFD[15528] = -1.97750242E+01;
  COFD[15529] = 4.48472682E+00;
  COFD[15530] = -3.16544872E-01;
  COFD[15531] = 1.16472495E-02;
  COFD[15532] = -1.97483319E+01;
  COFD[15533] = 4.48472682E+00;
  COFD[15534] = -3.16544872E-01;
  COFD[15535] = 1.16472495E-02;
  COFD[15536] = -1.97065532E+01;
  COFD[15537] = 4.48472682E+00;
  COFD[15538] = -3.16544872E-01;
  COFD[15539] = 1.16472495E-02;
  COFD[15540] = -1.41963480E+01;
  COFD[15541] = 1.87343141E+00;
  COFD[15542] = 8.63079572E-02;
  COFD[15543] = -8.36519031E-03;
  COFD[15544] = -2.03732954E+01;
  COFD[15545] = 4.87833205E+00;
  COFD[15546] = -3.83184121E-01;
  COFD[15547] = 1.51722127E-02;
  COFD[15548] = -2.03732954E+01;
  COFD[15549] = 4.87833205E+00;
  COFD[15550] = -3.83184121E-01;
  COFD[15551] = 1.51722127E-02;
  COFD[15552] = -1.15483249E+01;
  COFD[15553] = 2.55800063E+00;
  COFD[15554] = -1.23269730E-01;
  COFD[15555] = 5.59599793E-03;
  COFD[15556] = -1.42358302E+01;
  COFD[15557] = 3.83461834E+00;
  COFD[15558] = -2.91346712E-01;
  COFD[15559] = 1.29864869E-02;
  COFD[15560] = -1.39732009E+01;
  COFD[15561] = 3.21909911E+00;
  COFD[15562] = -2.11850626E-01;
  COFD[15563] = 9.55839253E-03;
  COFD[15564] = -1.52291167E+01;
  COFD[15565] = 3.54673926E+00;
  COFD[15566] = -2.54900443E-01;
  COFD[15567] = 1.14466286E-02;
  COFD[15568] = -1.39895528E+01;
  COFD[15569] = 3.21909911E+00;
  COFD[15570] = -2.11850626E-01;
  COFD[15571] = 9.55839253E-03;
  COFD[15572] = -1.92497406E+01;
  COFD[15573] = 5.07198371E+00;
  COFD[15574] = -4.34157597E-01;
  COFD[15575] = 1.84430801E-02;
  COFD[15576] = -1.52348381E+01;
  COFD[15577] = 3.54673926E+00;
  COFD[15578] = -2.54900443E-01;
  COFD[15579] = 1.14466286E-02;
  COFD[15580] = -1.52402807E+01;
  COFD[15581] = 3.54673926E+00;
  COFD[15582] = -2.54900443E-01;
  COFD[15583] = 1.14466286E-02;
  COFD[15584] = -1.38422368E+01;
  COFD[15585] = 3.13068087E+00;
  COFD[15586] = -2.00477755E-01;
  COFD[15587] = 9.07054904E-03;
  COFD[15588] = -1.39146399E+01;
  COFD[15589] = 3.21909911E+00;
  COFD[15590] = -2.11850626E-01;
  COFD[15591] = 9.55839253E-03;
  COFD[15592] = -1.59016866E+01;
  COFD[15593] = 3.82653625E+00;
  COFD[15594] = -2.90317972E-01;
  COFD[15595] = 1.29427670E-02;
  COFD[15596] = -1.59016866E+01;
  COFD[15597] = 3.82653625E+00;
  COFD[15598] = -2.90317972E-01;
  COFD[15599] = 1.29427670E-02;
  COFD[15600] = -1.59213522E+01;
  COFD[15601] = 3.82653625E+00;
  COFD[15602] = -2.90317972E-01;
  COFD[15603] = 1.29427670E-02;
  COFD[15604] = -1.58644912E+01;
  COFD[15605] = 3.80482327E+00;
  COFD[15606] = -2.87543922E-01;
  COFD[15607] = 1.28244459E-02;
  COFD[15608] = -1.50299446E+01;
  COFD[15609] = 3.45922008E+00;
  COFD[15610] = -2.43647140E-01;
  COFD[15611] = 1.09635979E-02;
  COFD[15612] = -1.77943146E+01;
  COFD[15613] = 4.43481404E+00;
  COFD[15614] = -3.66974600E-01;
  COFD[15615] = 1.61738468E-02;
  COFD[15616] = -1.95056033E+01;
  COFD[15617] = 5.03423702E+00;
  COFD[15618] = -4.33220473E-01;
  COFD[15619] = 1.85667112E-02;
  COFD[15620] = -1.95122892E+01;
  COFD[15621] = 5.03423702E+00;
  COFD[15622] = -4.33220473E-01;
  COFD[15623] = 1.85667112E-02;
  COFD[15624] = -1.92380416E+01;
  COFD[15625] = 4.95351632E+00;
  COFD[15626] = -4.27130446E-01;
  COFD[15627] = 1.84856443E-02;
  COFD[15628] = -1.92380416E+01;
  COFD[15629] = 4.95351632E+00;
  COFD[15630] = -4.27130446E-01;
  COFD[15631] = 1.84856443E-02;
  COFD[15632] = -1.94972366E+01;
  COFD[15633] = 5.02805304E+00;
  COFD[15634] = -4.33407830E-01;
  COFD[15635] = 1.86164117E-02;
  COFD[15636] = -1.72917347E+01;
  COFD[15637] = 4.25245988E+00;
  COFD[15638] = -3.44189784E-01;
  COFD[15639] = 1.52207255E-02;
  COFD[15640] = -1.73001576E+01;
  COFD[15641] = 4.25245988E+00;
  COFD[15642] = -3.44189784E-01;
  COFD[15643] = 1.52207255E-02;
  COFD[15644] = -1.73080811E+01;
  COFD[15645] = 4.25245988E+00;
  COFD[15646] = -3.44189784E-01;
  COFD[15647] = 1.52207255E-02;
  COFD[15648] = -1.82629694E+01;
  COFD[15649] = 4.61134661E+00;
  COFD[15650] = -3.88986112E-01;
  COFD[15651] = 1.70927982E-02;
  COFD[15652] = -1.79865031E+01;
  COFD[15653] = 4.47278815E+00;
  COFD[15654] = -3.71676557E-01;
  COFD[15655] = 1.63687643E-02;
  COFD[15656] = -1.79931731E+01;
  COFD[15657] = 4.47278815E+00;
  COFD[15658] = -3.71676557E-01;
  COFD[15659] = 1.63687643E-02;
  COFD[15660] = -1.58258690E+01;
  COFD[15661] = 3.87441160E+00;
  COFD[15662] = -2.96411944E-01;
  COFD[15663] = 1.32018011E-02;
  COFD[15664] = -1.94747941E+01;
  COFD[15665] = 4.98320638E+00;
  COFD[15666] = -4.30044977E-01;
  COFD[15667] = 1.85729853E-02;
  COFD[15668] = -1.94747941E+01;
  COFD[15669] = 4.98320638E+00;
  COFD[15670] = -4.30044977E-01;
  COFD[15671] = 1.85729853E-02;
  COFD[15672] = -1.38879136E+01;
  COFD[15673] = 3.13068087E+00;
  COFD[15674] = -2.00477755E-01;
  COFD[15675] = 9.07054904E-03;
  COFD[15676] = -1.39190240E+01;
  COFD[15677] = 3.21909911E+00;
  COFD[15678] = -2.11850626E-01;
  COFD[15679] = 9.55839253E-03;
  COFD[15680] = -1.39369094E+01;
  COFD[15681] = 3.21909911E+00;
  COFD[15682] = -2.11850626E-01;
  COFD[15683] = 9.55839253E-03;
  COFD[15684] = -1.91186133E+01;
  COFD[15685] = 5.02767971E+00;
  COFD[15686] = -4.33406285E-01;
  COFD[15687] = 1.86183022E-02;
  COFD[15688] = -1.42235488E+01;
  COFD[15689] = 3.13068087E+00;
  COFD[15690] = -2.00477755E-01;
  COFD[15691] = 9.07054904E-03;
  COFD[15692] = -1.50179175E+01;
  COFD[15693] = 3.45291069E+00;
  COFD[15694] = -2.42822180E-01;
  COFD[15695] = 1.09275752E-02;
  COFD[15696] = -1.70723168E+01;
  COFD[15697] = 4.19909678E+00;
  COFD[15698] = -3.37493433E-01;
  COFD[15699] = 1.49397054E-02;
  COFD[15700] = -1.76645080E+01;
  COFD[15701] = 4.38093272E+00;
  COFD[15702] = -3.60316345E-01;
  COFD[15703] = 1.58984540E-02;
  COFD[15704] = -1.54248753E+01;
  COFD[15705] = 3.61618043E+00;
  COFD[15706] = -2.63626979E-01;
  COFD[15707] = 1.18123303E-02;
  COFD[15708] = -1.43254630E+01;
  COFD[15709] = 3.17062703E+00;
  COFD[15710] = -2.05656056E-01;
  COFD[15711] = 9.29447288E-03;
  COFD[15712] = -1.96853277E+01;
  COFD[15713] = 5.07016932E+00;
  COFD[15714] = -4.34085095E-01;
  COFD[15715] = 1.84466394E-02;
  COFD[15716] = -1.96928045E+01;
  COFD[15717] = 5.07016932E+00;
  COFD[15718] = -4.34085095E-01;
  COFD[15719] = 1.84466394E-02;
  COFD[15720] = -1.58258845E+01;
  COFD[15721] = 3.87441160E+00;
  COFD[15722] = -2.96411944E-01;
  COFD[15723] = 1.32018011E-02;
  COFD[15724] = -1.76610581E+01;
  COFD[15725] = 4.38093272E+00;
  COFD[15726] = -3.60316345E-01;
  COFD[15727] = 1.58984540E-02;
  COFD[15728] = -1.76610581E+01;
  COFD[15729] = 4.38093272E+00;
  COFD[15730] = -3.60316345E-01;
  COFD[15731] = 1.58984540E-02;
  COFD[15732] = -1.76610581E+01;
  COFD[15733] = 4.38093272E+00;
  COFD[15734] = -3.60316345E-01;
  COFD[15735] = 1.58984540E-02;
  COFD[15736] = -1.76573973E+01;
  COFD[15737] = 4.38093272E+00;
  COFD[15738] = -3.60316345E-01;
  COFD[15739] = 1.58984540E-02;
  COFD[15740] = -1.50043204E+01;
  COFD[15741] = 3.45291069E+00;
  COFD[15742] = -2.42822180E-01;
  COFD[15743] = 1.09275752E-02;
  COFD[15744] = -1.58138017E+01;
  COFD[15745] = 3.76178392E+00;
  COFD[15746] = -2.82003508E-01;
  COFD[15747] = 1.25861906E-02;
  COFD[15748] = -1.84448418E+01;
  COFD[15749] = 4.54835769E+00;
  COFD[15750] = -3.81194036E-01;
  COFD[15751] = 1.67703153E-02;
  COFD[15752] = -1.84483514E+01;
  COFD[15753] = 4.54835769E+00;
  COFD[15754] = -3.81194036E-01;
  COFD[15755] = 1.67703153E-02;
  COFD[15756] = -1.94784520E+01;
  COFD[15757] = 4.98320638E+00;
  COFD[15758] = -4.30044977E-01;
  COFD[15759] = 1.85729853E-02;
  COFD[15760] = -1.94819676E+01;
  COFD[15761] = 4.98320638E+00;
  COFD[15762] = -4.30044977E-01;
  COFD[15763] = 1.85729853E-02;
  COFD[15764] = -1.83253704E+01;
  COFD[15765] = 4.74200288E+00;
  COFD[15766] = -4.03492976E-01;
  COFD[15767] = 1.76186851E-02;
  COFD[15768] = -1.40180012E+01;
  COFD[15769] = 3.21909911E+00;
  COFD[15770] = -2.11850626E-01;
  COFD[15771] = 9.55839253E-03;
  COFD[15772] = -1.55513271E+01;
  COFD[15773] = 3.66997726E+00;
  COFD[15774] = -2.70186616E-01;
  COFD[15775] = 1.20780906E-02;
  COFD[15776] = -1.81021631E+01;
  COFD[15777] = 4.52327527E+00;
  COFD[15778] = -3.78029305E-01;
  COFD[15779] = 1.66365566E-02;
  COFD[15780] = -1.81682922E+01;
  COFD[15781] = 4.52327527E+00;
  COFD[15782] = -3.78029305E-01;
  COFD[15783] = 1.66365566E-02;
  COFD[15784] = -1.82038978E+01;
  COFD[15785] = 4.52327527E+00;
  COFD[15786] = -3.78029305E-01;
  COFD[15787] = 1.66365566E-02;
  COFD[15788] = -1.62469194E+01;
  COFD[15789] = 3.73914304E+00;
  COFD[15790] = -2.79071053E-01;
  COFD[15791] = 1.24592731E-02;
  COFD[15792] = -1.80967256E+01;
  COFD[15793] = 4.52327527E+00;
  COFD[15794] = -3.78029305E-01;
  COFD[15795] = 1.66365566E-02;
  COFD[15796] = -1.81656564E+01;
  COFD[15797] = 4.52327527E+00;
  COFD[15798] = -3.78029305E-01;
  COFD[15799] = 1.66365566E-02;
  COFD[15800] = -1.58640844E+01;
  COFD[15801] = 3.64178450E+00;
  COFD[15802] = -2.66740517E-01;
  COFD[15803] = 1.19380786E-02;
  COFD[15804] = -1.80910098E+01;
  COFD[15805] = 4.52327527E+00;
  COFD[15806] = -3.78029305E-01;
  COFD[15807] = 1.66365566E-02;
  COFD[15808] = -1.54753250E+01;
  COFD[15809] = 3.55175721E+00;
  COFD[15810] = -2.55538703E-01;
  COFD[15811] = 1.14737147E-02;
  COFD[15812] = -1.49322561E+01;
  COFD[15813] = 3.41648755E+00;
  COFD[15814] = -2.38096267E-01;
  COFD[15815] = 1.07229875E-02;
  COFD[15816] = -1.92220705E+01;
  COFD[15817] = 4.78666646E+00;
  COFD[15818] = -4.08190059E-01;
  COFD[15819] = 1.77758369E-02;
  COFD[15820] = -1.91964497E+01;
  COFD[15821] = 4.78666646E+00;
  COFD[15822] = -4.08190059E-01;
  COFD[15823] = 1.77758369E-02;
  COFD[15824] = -1.91562416E+01;
  COFD[15825] = 4.78666646E+00;
  COFD[15826] = -4.08190059E-01;
  COFD[15827] = 1.77758369E-02;
  COFD[15828] = -2.02149566E+01;
  COFD[15829] = 5.06537899E+00;
  COFD[15830] = -4.19068559E-01;
  COFD[15831] = 1.72031928E-02;
  COFD[15832] = -1.84448418E+01;
  COFD[15833] = 4.54835769E+00;
  COFD[15834] = -3.81194036E-01;
  COFD[15835] = 1.67703153E-02;
  COFD[15836] = -1.84448418E+01;
  COFD[15837] = 4.54835769E+00;
  COFD[15838] = -3.81194036E-01;
  COFD[15839] = 1.67703153E-02;
  COFD[15840] = -1.27940837E+01;
  COFD[15841] = 2.96487721E+00;
  COFD[15842] = -1.78501717E-01;
  COFD[15843] = 8.09865315E-03;
  COFD[15844] = -1.58864977E+01;
  COFD[15845] = 4.35793032E+00;
  COFD[15846] = -3.57445064E-01;
  COFD[15847] = 1.57784108E-02;
  COFD[15848] = -1.54924432E+01;
  COFD[15849] = 3.66997726E+00;
  COFD[15850] = -2.70186616E-01;
  COFD[15851] = 1.20780906E-02;
  COFD[15852] = -1.68675891E+01;
  COFD[15853] = 4.02108688E+00;
  COFD[15854] = -3.15255763E-01;
  COFD[15855] = 1.40113686E-02;
  COFD[15856] = -1.55137446E+01;
  COFD[15857] = 3.66997726E+00;
  COFD[15858] = -2.70186616E-01;
  COFD[15859] = 1.20780906E-02;
  COFD[15860] = -1.96788916E+01;
  COFD[15861] = 4.86211402E+00;
  COFD[15862] = -3.80056946E-01;
  COFD[15863] = 1.49954050E-02;
  COFD[15864] = -1.68759479E+01;
  COFD[15865] = 4.02108688E+00;
  COFD[15866] = -3.15255763E-01;
  COFD[15867] = 1.40113686E-02;
  COFD[15868] = -1.68839409E+01;
  COFD[15869] = 4.02108688E+00;
  COFD[15870] = -3.15255763E-01;
  COFD[15871] = 1.40113686E-02;
  COFD[15872] = -1.53185757E+01;
  COFD[15873] = 3.58351281E+00;
  COFD[15874] = -2.59526521E-01;
  COFD[15875] = 1.16407007E-02;
  COFD[15876] = -1.54177704E+01;
  COFD[15877] = 3.66997726E+00;
  COFD[15878] = -2.70186616E-01;
  COFD[15879] = 1.20780906E-02;
  COFD[15880] = -1.76020999E+01;
  COFD[15881] = 4.34957164E+00;
  COFD[15882] = -3.56393865E-01;
  COFD[15883] = 1.57341186E-02;
  COFD[15884] = -1.76020999E+01;
  COFD[15885] = 4.34957164E+00;
  COFD[15886] = -3.56393865E-01;
  COFD[15887] = 1.57341186E-02;
  COFD[15888] = -1.76272031E+01;
  COFD[15889] = 4.34957164E+00;
  COFD[15890] = -3.56393865E-01;
  COFD[15891] = 1.57341186E-02;
  COFD[15892] = -1.75753250E+01;
  COFD[15893] = 4.32776459E+00;
  COFD[15894] = -3.53659827E-01;
  COFD[15895] = 1.56193492E-02;
  COFD[15896] = -1.65805646E+01;
  COFD[15897] = 3.90596075E+00;
  COFD[15898] = -3.00417034E-01;
  COFD[15899] = 1.33716766E-02;
  COFD[15900] = -1.94867888E+01;
  COFD[15901] = 4.88661347E+00;
  COFD[15902] = -4.19964754E-01;
  COFD[15903] = 1.82374570E-02;
  COFD[15904] = -2.02982488E+01;
  COFD[15905] = 5.07419772E+00;
  COFD[15906] = -4.23574930E-01;
  COFD[15907] = 1.75350406E-02;
  COFD[15908] = -2.03078578E+01;
  COFD[15909] = 5.07419772E+00;
  COFD[15910] = -4.23574930E-01;
  COFD[15911] = 1.75350406E-02;
  COFD[15912] = -2.03588989E+01;
  COFD[15913] = 5.11146893E+00;
  COFD[15914] = -4.32357483E-01;
  COFD[15915] = 1.80789399E-02;
  COFD[15916] = -2.03588989E+01;
  COFD[15917] = 5.11146893E+00;
  COFD[15918] = -4.32357483E-01;
  COFD[15919] = 1.80789399E-02;
  COFD[15920] = -2.03370471E+01;
  COFD[15921] = 5.08623841E+00;
  COFD[15922] = -4.26458889E-01;
  COFD[15923] = 1.77145456E-02;
  COFD[15924] = -1.89872893E+01;
  COFD[15925] = 4.73871569E+00;
  COFD[15926] = -4.03159932E-01;
  COFD[15927] = 1.76082216E-02;
  COFD[15928] = -1.89990969E+01;
  COFD[15929] = 4.73871569E+00;
  COFD[15930] = -4.03159932E-01;
  COFD[15931] = 1.76082216E-02;
  COFD[15932] = -1.90102786E+01;
  COFD[15933] = 4.73871569E+00;
  COFD[15934] = -4.03159932E-01;
  COFD[15935] = 1.76082216E-02;
  COFD[15936] = -1.97614507E+01;
  COFD[15937] = 4.98992175E+00;
  COFD[15938] = -4.30639730E-01;
  COFD[15939] = 1.85871895E-02;
  COFD[15940] = -1.96190172E+01;
  COFD[15941] = 4.91686048E+00;
  COFD[15942] = -4.23336257E-01;
  COFD[15943] = 1.83608502E-02;
  COFD[15944] = -1.96286056E+01;
  COFD[15945] = 4.91686048E+00;
  COFD[15946] = -4.23336257E-01;
  COFD[15947] = 1.83608502E-02;
  COFD[15948] = -1.76552961E+01;
  COFD[15949] = 4.39684215E+00;
  COFD[15950] = -3.62293569E-01;
  COFD[15951] = 1.59807448E-02;
  COFD[15952] = -2.04805693E+01;
  COFD[15953] = 5.11171581E+00;
  COFD[15954] = -4.33627257E-01;
  COFD[15955] = 1.81849251E-02;
  COFD[15956] = -2.04805693E+01;
  COFD[15957] = 5.11171581E+00;
  COFD[15958] = -4.33627257E-01;
  COFD[15959] = 1.81849251E-02;
  COFD[15960] = -1.53758740E+01;
  COFD[15961] = 3.58351281E+00;
  COFD[15962] = -2.59526521E-01;
  COFD[15963] = 1.16407007E-02;
  COFD[15964] = -1.54365722E+01;
  COFD[15965] = 3.66997726E+00;
  COFD[15966] = -2.70186616E-01;
  COFD[15967] = 1.20780906E-02;
  COFD[15968] = -1.54596419E+01;
  COFD[15969] = 3.66997726E+00;
  COFD[15970] = -2.70186616E-01;
  COFD[15971] = 1.20780906E-02;
  COFD[15972] = -1.99847768E+01;
  COFD[15973] = 5.06870614E+00;
  COFD[15974] = -4.20134413E-01;
  COFD[15975] = 1.72751413E-02;
  COFD[15976] = -1.57593659E+01;
  COFD[15977] = 3.58351281E+00;
  COFD[15978] = -2.59526521E-01;
  COFD[15979] = 1.16407007E-02;
  COFD[15980] = -1.65732351E+01;
  COFD[15981] = 3.89909300E+00;
  COFD[15982] = -2.99543156E-01;
  COFD[15983] = 1.33345146E-02;
  COFD[15984] = -1.88743758E+01;
  COFD[15985] = 4.70521032E+00;
  COFD[15986] = -3.99540463E-01;
  COFD[15987] = 1.74820299E-02;
  COFD[15988] = -1.93669811E+01;
  COFD[15989] = 4.84096762E+00;
  COFD[15990] = -4.14857437E-01;
  COFD[15991] = 1.80500164E-02;
  COFD[15992] = -1.71257524E+01;
  COFD[15993] = 4.11638829E+00;
  COFD[15994] = -3.27398967E-01;
  COFD[15995] = 1.45289335E-02;
  COFD[15996] = -1.58556527E+01;
  COFD[15997] = 3.62410630E+00;
  COFD[15998] = -2.64619083E-01;
  COFD[15999] = 1.18537381E-02;
  COFD[16000] = -2.03249413E+01;
  COFD[16001] = 5.04213709E+00;
  COFD[16002] = -4.14301021E-01;
  COFD[16003] = 1.69244123E-02;
  COFD[16004] = -2.03355590E+01;
  COFD[16005] = 5.04213709E+00;
  COFD[16006] = -4.14301021E-01;
  COFD[16007] = 1.69244123E-02;
  COFD[16008] = -1.76553196E+01;
  COFD[16009] = 4.39684215E+00;
  COFD[16010] = -3.62293569E-01;
  COFD[16011] = 1.59807448E-02;
  COFD[16012] = -1.93616894E+01;
  COFD[16013] = 4.84096762E+00;
  COFD[16014] = -4.14857437E-01;
  COFD[16015] = 1.80500164E-02;
  COFD[16016] = -1.93616894E+01;
  COFD[16017] = 4.84096762E+00;
  COFD[16018] = -4.14857437E-01;
  COFD[16019] = 1.80500164E-02;
  COFD[16020] = -1.93616894E+01;
  COFD[16021] = 4.84096762E+00;
  COFD[16022] = -4.14857437E-01;
  COFD[16023] = 1.80500164E-02;
  COFD[16024] = -1.93560955E+01;
  COFD[16025] = 4.84096762E+00;
  COFD[16026] = -4.14857437E-01;
  COFD[16027] = 1.80500164E-02;
  COFD[16028] = -1.65537539E+01;
  COFD[16029] = 3.89909300E+00;
  COFD[16030] = -2.99543156E-01;
  COFD[16031] = 1.33345146E-02;
  COFD[16032] = -1.76104306E+01;
  COFD[16033] = 4.28522084E+00;
  COFD[16034] = -3.48321143E-01;
  COFD[16035] = 1.53950513E-02;
  COFD[16036] = -2.00217171E+01;
  COFD[16037] = 4.95677205E+00;
  COFD[16038] = -4.27442820E-01;
  COFD[16039] = 1.84946244E-02;
  COFD[16040] = -2.00271018E+01;
  COFD[16041] = 4.95677205E+00;
  COFD[16042] = -4.27442820E-01;
  COFD[16043] = 1.84946244E-02;
  COFD[16044] = -2.04861592E+01;
  COFD[16045] = 5.11171581E+00;
  COFD[16046] = -4.33627257E-01;
  COFD[16047] = 1.81849251E-02;
  COFD[16048] = -2.04915522E+01;
  COFD[16049] = 5.11171581E+00;
  COFD[16050] = -4.33627257E-01;
  COFD[16051] = 1.81849251E-02;
  COFD[16052] = -1.99163455E+01;
  COFD[16053] = 5.08893274E+00;
  COFD[16054] = -4.33692894E-01;
  COFD[16055] = 1.83121225E-02;
  COFD[16056] = -1.55513271E+01;
  COFD[16057] = 3.66997726E+00;
  COFD[16058] = -2.70186616E-01;
  COFD[16059] = 1.20780906E-02;
  COFD[16060] = -1.73138834E+01;
  COFD[16061] = 4.18419824E+00;
  COFD[16062] = -3.35634692E-01;
  COFD[16063] = 1.48622450E-02;
  COFD[16064] = -1.98849603E+01;
  COFD[16065] = 4.99582893E+00;
  COFD[16066] = -4.31116007E-01;
  COFD[16067] = 1.85956804E-02;
  COFD[16068] = -1.99856632E+01;
  COFD[16069] = 4.99582893E+00;
  COFD[16070] = -4.31116007E-01;
  COFD[16071] = 1.85956804E-02;
  COFD[16072] = -2.00430643E+01;
  COFD[16073] = 4.99582893E+00;
  COFD[16074] = -4.31116007E-01;
  COFD[16075] = 1.85956804E-02;
  COFD[16076] = -1.80677192E+01;
  COFD[16077] = 4.26180303E+00;
  COFD[16078] = -3.45367657E-01;
  COFD[16079] = 1.52704124E-02;
  COFD[16080] = -1.98769740E+01;
  COFD[16081] = 4.99582893E+00;
  COFD[16082] = -4.31116007E-01;
  COFD[16083] = 1.85956804E-02;
  COFD[16084] = -1.99815105E+01;
  COFD[16085] = 4.99582893E+00;
  COFD[16086] = -4.31116007E-01;
  COFD[16087] = 1.85956804E-02;
  COFD[16088] = -1.76264024E+01;
  COFD[16089] = 4.14808486E+00;
  COFD[16090] = -3.31235328E-01;
  COFD[16091] = 1.46835647E-02;
  COFD[16092] = -1.98686225E+01;
  COFD[16093] = 4.99582893E+00;
  COFD[16094] = -4.31116007E-01;
  COFD[16095] = 1.85956804E-02;
  COFD[16096] = -1.71427525E+01;
  COFD[16097] = 4.02800613E+00;
  COFD[16098] = -3.16145179E-01;
  COFD[16099] = 1.40495914E-02;
  COFD[16100] = -1.64784456E+01;
  COFD[16101] = 3.85913477E+00;
  COFD[16102] = -2.94476749E-01;
  COFD[16103] = 1.31199582E-02;
  COFD[16104] = -2.05732033E+01;
  COFD[16105] = 5.06159665E+00;
  COFD[16106] = -4.33894270E-01;
  COFD[16107] = 1.84764465E-02;
  COFD[16108] = -2.05306135E+01;
  COFD[16109] = 5.06159665E+00;
  COFD[16110] = -4.33894270E-01;
  COFD[16111] = 1.84764465E-02;
  COFD[16112] = -2.04664683E+01;
  COFD[16113] = 5.06159665E+00;
  COFD[16114] = -4.33894270E-01;
  COFD[16115] = 1.84764465E-02;
  COFD[16116] = -1.98831321E+01;
  COFD[16117] = 4.58632869E+00;
  COFD[16118] = -3.33596970E-01;
  COFD[16119] = 1.25433032E-02;
  COFD[16120] = -2.00217171E+01;
  COFD[16121] = 4.95677205E+00;
  COFD[16122] = -4.27442820E-01;
  COFD[16123] = 1.84946244E-02;
  COFD[16124] = -2.00217171E+01;
  COFD[16125] = 4.95677205E+00;
  COFD[16126] = -4.27442820E-01;
  COFD[16127] = 1.84946244E-02;
  COFD[16128] = -1.52016377E+01;
  COFD[16129] = 3.77717901E+00;
  COFD[16130] = -2.83987333E-01;
  COFD[16131] = 1.26715852E-02;
  COFD[16132] = -1.81648161E+01;
  COFD[16133] = 5.02489109E+00;
  COFD[16134] = -4.33408488E-01;
  COFD[16135] = 1.86336151E-02;
  COFD[16136] = -1.80453592E+01;
  COFD[16137] = 4.52327527E+00;
  COFD[16138] = -3.78029305E-01;
  COFD[16139] = 1.66365566E-02;
  COFD[16140] = -1.95017684E+01;
  COFD[16141] = 4.87794887E+00;
  COFD[16142] = -4.19010211E-01;
  COFD[16143] = 1.82031734E-02;
  COFD[16144] = -1.80659353E+01;
  COFD[16145] = 4.52327527E+00;
  COFD[16146] = -3.78029305E-01;
  COFD[16147] = 1.66365566E-02;
  COFD[16148] = -1.63399624E+01;
  COFD[16149] = 2.95214121E+00;
  COFD[16150] = -7.24781700E-02;
  COFD[16151] = -6.81785200E-04;
  COFD[16152] = -1.92534374E+01;
  COFD[16153] = 4.79132523E+00;
  COFD[16154] = -4.08760786E-01;
  COFD[16155] = 1.77992375E-02;
  COFD[16156] = -1.92610168E+01;
  COFD[16157] = 4.79132523E+00;
  COFD[16158] = -4.08760786E-01;
  COFD[16159] = 1.77992375E-02;
  COFD[16160] = -1.77237427E+01;
  COFD[16161] = 4.38781144E+00;
  COFD[16162] = -3.61168991E-01;
  COFD[16163] = 1.59338380E-02;
  COFD[16164] = -1.79730055E+01;
  COFD[16165] = 4.52327527E+00;
  COFD[16166] = -3.78029305E-01;
  COFD[16167] = 1.66365566E-02;
  COFD[16168] = -1.98140717E+01;
  COFD[16169] = 5.02339094E+00;
  COFD[16170] = -4.33412034E-01;
  COFD[16171] = 1.86420804E-02;
  COFD[16172] = -1.98140717E+01;
  COFD[16173] = 5.02339094E+00;
  COFD[16174] = -4.33412034E-01;
  COFD[16175] = 1.86420804E-02;
  COFD[16176] = -1.98383917E+01;
  COFD[16177] = 5.02339094E+00;
  COFD[16178] = -4.33412034E-01;
  COFD[16179] = 1.86420804E-02;
  COFD[16180] = -1.99371306E+01;
  COFD[16181] = 5.03812529E+00;
  COFD[16182] = -4.33377026E-01;
  COFD[16183] = 1.85590211E-02;
  COFD[16184] = -1.92386558E+01;
  COFD[16185] = 4.78116946E+00;
  COFD[16186] = -4.07518289E-01;
  COFD[16187] = 1.77483795E-02;
  COFD[16188] = -2.07038185E+01;
  COFD[16189] = 5.06720119E+00;
  COFD[16190] = -4.19613343E-01;
  COFD[16191] = 1.72393547E-02;
  COFD[16192] = -1.92548585E+01;
  COFD[16193] = 4.25726916E+00;
  COFD[16194] = -2.79522202E-01;
  COFD[16195] = 9.73775709E-03;
  COFD[16196] = -1.92640019E+01;
  COFD[16197] = 4.25726916E+00;
  COFD[16198] = -2.79522202E-01;
  COFD[16199] = 9.73775709E-03;
  COFD[16200] = -1.86821521E+01;
  COFD[16201] = 3.97908192E+00;
  COFD[16202] = -2.38620931E-01;
  COFD[16203] = 7.78870409E-03;
  COFD[16204] = -1.86821521E+01;
  COFD[16205] = 3.97908192E+00;
  COFD[16206] = -2.38620931E-01;
  COFD[16207] = 7.78870409E-03;
  COFD[16208] = -1.94334728E+01;
  COFD[16209] = 4.33226128E+00;
  COFD[16210] = -2.91490888E-01;
  COFD[16211] = 1.03476070E-02;
  COFD[16212] = -2.05634489E+01;
  COFD[16213] = 5.11167016E+00;
  COFD[16214] = -4.33651168E-01;
  COFD[16215] = 1.81871961E-02;
  COFD[16216] = -2.05747287E+01;
  COFD[16217] = 5.11167016E+00;
  COFD[16218] = -4.33651168E-01;
  COFD[16219] = 1.81871961E-02;
  COFD[16220] = -2.05853993E+01;
  COFD[16221] = 5.11167016E+00;
  COFD[16222] = -4.33651168E-01;
  COFD[16223] = 1.81871961E-02;
  COFD[16224] = -2.05868189E+01;
  COFD[16225] = 5.01615372E+00;
  COFD[16226] = -4.09499645E-01;
  COFD[16227] = 1.66570727E-02;
  COFD[16228] = -2.07124371E+01;
  COFD[16229] = 5.07093412E+00;
  COFD[16230] = -4.21231152E-01;
  COFD[16231] = 1.73552654E-02;
  COFD[16232] = -2.07215606E+01;
  COFD[16233] = 5.07093412E+00;
  COFD[16234] = -4.21231152E-01;
  COFD[16235] = 1.73552654E-02;
  COFD[16236] = -1.98184334E+01;
  COFD[16237] = 5.03178087E+00;
  COFD[16238] = -4.33314055E-01;
  COFD[16239] = 1.85881203E-02;
  COFD[16240] = -1.98876388E+01;
  COFD[16241] = 4.50165765E+00;
  COFD[16242] = -3.19414908E-01;
  COFD[16243] = 1.17986762E-02;
  COFD[16244] = -1.98876388E+01;
  COFD[16245] = 4.50165765E+00;
  COFD[16246] = -3.19414908E-01;
  COFD[16247] = 1.17986762E-02;
  COFD[16248] = -1.77793918E+01;
  COFD[16249] = 4.38781144E+00;
  COFD[16250] = -3.61168991E-01;
  COFD[16251] = 1.59338380E-02;
  COFD[16252] = -1.79942394E+01;
  COFD[16253] = 4.52327527E+00;
  COFD[16254] = -3.78029305E-01;
  COFD[16255] = 1.66365566E-02;
  COFD[16256] = -1.87677197E+01;
  COFD[16257] = 4.76845694E+00;
  COFD[16258] = -4.06130886E-01;
  COFD[16259] = 1.76992366E-02;
  COFD[16260] = -1.76902831E+01;
  COFD[16261] = 3.64531142E+00;
  COFD[16262] = -1.84302610E-01;
  COFD[16263] = 5.00335366E-03;
  COFD[16264] = -1.81380619E+01;
  COFD[16265] = 4.38781144E+00;
  COFD[16266] = -3.61168991E-01;
  COFD[16267] = 1.59338380E-02;
  COFD[16268] = -1.92170602E+01;
  COFD[16269] = 4.77052462E+00;
  COFD[16270] = -4.06325803E-01;
  COFD[16271] = 1.77045805E-02;
  COFD[16272] = -2.05149882E+01;
  COFD[16273] = 5.10569239E+00;
  COFD[16274] = -4.34343200E-01;
  COFD[16275] = 1.82778928E-02;
  COFD[16276] = -2.06613717E+01;
  COFD[16277] = 5.08393260E+00;
  COFD[16278] = -4.25938990E-01;
  COFD[16279] = 1.76828881E-02;
  COFD[16280] = -1.95141763E+01;
  COFD[16281] = 4.88379708E+00;
  COFD[16282] = -4.19653406E-01;
  COFD[16283] = 1.82262166E-02;
  COFD[16284] = -1.82729180E+01;
  COFD[16285] = 4.44189951E+00;
  COFD[16286] = -3.67842227E-01;
  COFD[16287] = 1.62093788E-02;
  COFD[16288] = -1.86141109E+01;
  COFD[16289] = 3.93133269E+00;
  COFD[16290] = -2.27917775E-01;
  COFD[16291] = 7.12220842E-03;
  COFD[16292] = -1.86242334E+01;
  COFD[16293] = 3.93133269E+00;
  COFD[16294] = -2.27917775E-01;
  COFD[16295] = 7.12220842E-03;
  COFD[16296] = -1.98184555E+01;
  COFD[16297] = 5.03178087E+00;
  COFD[16298] = -4.33314055E-01;
  COFD[16299] = 1.85881203E-02;
  COFD[16300] = -2.06563899E+01;
  COFD[16301] = 5.08393260E+00;
  COFD[16302] = -4.25938990E-01;
  COFD[16303] = 1.76828881E-02;
  COFD[16304] = -2.06563899E+01;
  COFD[16305] = 5.08393260E+00;
  COFD[16306] = -4.25938990E-01;
  COFD[16307] = 1.76828881E-02;
  COFD[16308] = -2.06563899E+01;
  COFD[16309] = 5.08393260E+00;
  COFD[16310] = -4.25938990E-01;
  COFD[16311] = 1.76828881E-02;
  COFD[16312] = -2.06511200E+01;
  COFD[16313] = 5.08393260E+00;
  COFD[16314] = -4.25938990E-01;
  COFD[16315] = 1.76828881E-02;
  COFD[16316] = -1.91985137E+01;
  COFD[16317] = 4.77052462E+00;
  COFD[16318] = -4.06325803E-01;
  COFD[16319] = 1.77045805E-02;
  COFD[16320] = -1.98998399E+01;
  COFD[16321] = 4.99640615E+00;
  COFD[16322] = -4.31162359E-01;
  COFD[16323] = 1.85964996E-02;
  COFD[16324] = -2.09799471E+01;
  COFD[16325] = 5.05791374E+00;
  COFD[16326] = -4.17418303E-01;
  COFD[16327] = 1.71036721E-02;
  COFD[16328] = -2.09850164E+01;
  COFD[16329] = 5.05791374E+00;
  COFD[16330] = -4.17418303E-01;
  COFD[16331] = 1.71036721E-02;
  COFD[16332] = -1.98929048E+01;
  COFD[16333] = 4.50165765E+00;
  COFD[16334] = -3.19414908E-01;
  COFD[16335] = 1.17986762E-02;
  COFD[16336] = -1.98979821E+01;
  COFD[16337] = 4.50165765E+00;
  COFD[16338] = -3.19414908E-01;
  COFD[16339] = 1.17986762E-02;
  COFD[16340] = -1.87967028E+01;
  COFD[16341] = 4.10444481E+00;
  COFD[16342] = -2.51736860E-01;
  COFD[16343] = 8.25061585E-03;
  COFD[16344] = -1.81021631E+01;
  COFD[16345] = 4.52327527E+00;
  COFD[16346] = -3.78029305E-01;
  COFD[16347] = 1.66365566E-02;
  COFD[16348] = -1.98849603E+01;
  COFD[16349] = 4.99582893E+00;
  COFD[16350] = -4.31116007E-01;
  COFD[16351] = 1.85956804E-02;
  COFD[16352] = -1.99523323E+01;
  COFD[16353] = 4.61896914E+00;
  COFD[16354] = -3.43811890E-01;
  COFD[16355] = 1.32423741E-02;
  COFD[16356] = -2.00472504E+01;
  COFD[16357] = 4.61896914E+00;
  COFD[16358] = -3.43811890E-01;
  COFD[16359] = 1.32423741E-02;
  COFD[16360] = -2.01008307E+01;
  COFD[16361] = 4.61896914E+00;
  COFD[16362] = -3.43811890E-01;
  COFD[16363] = 1.32423741E-02;
  COFD[16364] = -2.03385283E+01;
  COFD[16365] = 4.98699671E+00;
  COFD[16366] = -4.30386967E-01;
  COFD[16367] = 1.85815474E-02;
  COFD[16368] = -1.99447594E+01;
  COFD[16369] = 4.61896914E+00;
  COFD[16370] = -3.43811890E-01;
  COFD[16371] = 1.32423741E-02;
  COFD[16372] = -2.00433586E+01;
  COFD[16373] = 4.61896914E+00;
  COFD[16374] = -3.43811890E-01;
  COFD[16375] = 1.32423741E-02;
  COFD[16376] = -1.99901344E+01;
  COFD[16377] = 4.91653527E+00;
  COFD[16378] = -4.23300566E-01;
  COFD[16379] = 1.83595701E-02;
  COFD[16380] = -1.99368335E+01;
  COFD[16381] = 4.61896914E+00;
  COFD[16382] = -3.43811890E-01;
  COFD[16383] = 1.32423741E-02;
  COFD[16384] = -1.95012857E+01;
  COFD[16385] = 4.79875034E+00;
  COFD[16386] = -4.09672668E-01;
  COFD[16387] = 1.78367407E-02;
  COFD[16388] = -1.89720439E+01;
  COFD[16389] = 4.69223232E+00;
  COFD[16390] = -3.98170006E-01;
  COFD[16391] = 1.74358537E-02;
  COFD[16392] = -2.08259805E+01;
  COFD[16393] = 4.84325747E+00;
  COFD[16394] = -3.76657219E-01;
  COFD[16395] = 1.48093055E-02;
  COFD[16396] = -2.07864410E+01;
  COFD[16397] = 4.84325747E+00;
  COFD[16398] = -3.76657219E-01;
  COFD[16399] = 1.48093055E-02;
  COFD[16400] = -2.07264563E+01;
  COFD[16401] = 4.84325747E+00;
  COFD[16402] = -3.76657219E-01;
  COFD[16403] = 1.48093055E-02;
  COFD[16404] = -1.63388454E+01;
  COFD[16405] = 2.69277644E+00;
  COFD[16406] = -3.69311652E-02;
  COFD[16407] = -2.36590601E-03;
  COFD[16408] = -2.09799471E+01;
  COFD[16409] = 5.05791374E+00;
  COFD[16410] = -4.17418303E-01;
  COFD[16411] = 1.71036721E-02;
  COFD[16412] = -2.09799471E+01;
  COFD[16413] = 5.05791374E+00;
  COFD[16414] = -4.17418303E-01;
  COFD[16415] = 1.71036721E-02;
  COFD[16416] = -1.52114019E+01;
  COFD[16417] = 3.77717901E+00;
  COFD[16418] = -2.83987333E-01;
  COFD[16419] = 1.26715852E-02;
  COFD[16420] = -1.81698148E+01;
  COFD[16421] = 5.02489109E+00;
  COFD[16422] = -4.33408488E-01;
  COFD[16423] = 1.86336151E-02;
  COFD[16424] = -1.81039526E+01;
  COFD[16425] = 4.52327527E+00;
  COFD[16426] = -3.78029305E-01;
  COFD[16427] = 1.66365566E-02;
  COFD[16428] = -1.95934749E+01;
  COFD[16429] = 4.87794887E+00;
  COFD[16430] = -4.19010211E-01;
  COFD[16431] = 1.82031734E-02;
  COFD[16432] = -1.81271471E+01;
  COFD[16433] = 4.52327527E+00;
  COFD[16434] = -3.78029305E-01;
  COFD[16435] = 1.66365566E-02;
  COFD[16436] = -1.64037042E+01;
  COFD[16437] = 2.95214121E+00;
  COFD[16438] = -7.24781700E-02;
  COFD[16439] = -6.81785200E-04;
  COFD[16440] = -1.93467562E+01;
  COFD[16441] = 4.79132523E+00;
  COFD[16442] = -4.08760786E-01;
  COFD[16443] = 1.77992375E-02;
  COFD[16444] = -1.93559051E+01;
  COFD[16445] = 4.79132523E+00;
  COFD[16446] = -4.08760786E-01;
  COFD[16447] = 1.77992375E-02;
  COFD[16448] = -1.77710119E+01;
  COFD[16449] = 4.38781144E+00;
  COFD[16450] = -3.61168991E-01;
  COFD[16451] = 1.59338380E-02;
  COFD[16452] = -1.80232931E+01;
  COFD[16453] = 4.52327527E+00;
  COFD[16454] = -3.78029305E-01;
  COFD[16455] = 1.66365566E-02;
  COFD[16456] = -1.98672683E+01;
  COFD[16457] = 5.02339094E+00;
  COFD[16458] = -4.33412034E-01;
  COFD[16459] = 1.86420804E-02;
  COFD[16460] = -1.98672683E+01;
  COFD[16461] = 5.02339094E+00;
  COFD[16462] = -4.33412034E-01;
  COFD[16463] = 1.86420804E-02;
  COFD[16464] = -1.98943939E+01;
  COFD[16465] = 5.02339094E+00;
  COFD[16466] = -4.33412034E-01;
  COFD[16467] = 1.86420804E-02;
  COFD[16468] = -1.99958402E+01;
  COFD[16469] = 5.03812529E+00;
  COFD[16470] = -4.33377026E-01;
  COFD[16471] = 1.85590211E-02;
  COFD[16472] = -1.93235278E+01;
  COFD[16473] = 4.78116946E+00;
  COFD[16474] = -4.07518289E-01;
  COFD[16475] = 1.77483795E-02;
  COFD[16476] = -2.08122792E+01;
  COFD[16477] = 5.06720119E+00;
  COFD[16478] = -4.19613343E-01;
  COFD[16479] = 1.72393547E-02;
  COFD[16480] = -1.93415305E+01;
  COFD[16481] = 4.25726916E+00;
  COFD[16482] = -2.79522202E-01;
  COFD[16483] = 9.73775709E-03;
  COFD[16484] = -1.93524235E+01;
  COFD[16485] = 4.25726916E+00;
  COFD[16486] = -2.79522202E-01;
  COFD[16487] = 9.73775709E-03;
  COFD[16488] = -1.87722750E+01;
  COFD[16489] = 3.97908192E+00;
  COFD[16490] = -2.38620931E-01;
  COFD[16491] = 7.78870409E-03;
  COFD[16492] = -1.87722750E+01;
  COFD[16493] = 3.97908192E+00;
  COFD[16494] = -2.38620931E-01;
  COFD[16495] = 7.78870409E-03;
  COFD[16496] = -1.95252506E+01;
  COFD[16497] = 4.33226128E+00;
  COFD[16498] = -2.91490888E-01;
  COFD[16499] = 1.03476070E-02;
  COFD[16500] = -2.06426822E+01;
  COFD[16501] = 5.11167016E+00;
  COFD[16502] = -4.33651168E-01;
  COFD[16503] = 1.81871961E-02;
  COFD[16504] = -2.06559246E+01;
  COFD[16505] = 5.11167016E+00;
  COFD[16506] = -4.33651168E-01;
  COFD[16507] = 1.81871961E-02;
  COFD[16508] = -2.06685006E+01;
  COFD[16509] = 5.11167016E+00;
  COFD[16510] = -4.33651168E-01;
  COFD[16511] = 1.81871961E-02;
  COFD[16512] = -2.06717705E+01;
  COFD[16513] = 5.01615372E+00;
  COFD[16514] = -4.09499645E-01;
  COFD[16515] = 1.66570727E-02;
  COFD[16516] = -2.07991866E+01;
  COFD[16517] = 5.07093412E+00;
  COFD[16518] = -4.21231152E-01;
  COFD[16519] = 1.73552654E-02;
  COFD[16520] = -2.08100575E+01;
  COFD[16521] = 5.07093412E+00;
  COFD[16522] = -4.21231152E-01;
  COFD[16523] = 1.73552654E-02;
  COFD[16524] = -1.99231893E+01;
  COFD[16525] = 5.03178087E+00;
  COFD[16526] = -4.33314055E-01;
  COFD[16527] = 1.85881203E-02;
  COFD[16528] = -1.99936772E+01;
  COFD[16529] = 4.50165765E+00;
  COFD[16530] = -3.19414908E-01;
  COFD[16531] = 1.17986762E-02;
  COFD[16532] = -1.99936772E+01;
  COFD[16533] = 4.50165765E+00;
  COFD[16534] = -3.19414908E-01;
  COFD[16535] = 1.17986762E-02;
  COFD[16536] = -1.78325317E+01;
  COFD[16537] = 4.38781144E+00;
  COFD[16538] = -3.61168991E-01;
  COFD[16539] = 1.59338380E-02;
  COFD[16540] = -1.80501869E+01;
  COFD[16541] = 4.52327527E+00;
  COFD[16542] = -3.78029305E-01;
  COFD[16543] = 1.66365566E-02;
  COFD[16544] = -1.88263765E+01;
  COFD[16545] = 4.76845694E+00;
  COFD[16546] = -4.06130886E-01;
  COFD[16547] = 1.76992366E-02;
  COFD[16548] = -1.77515561E+01;
  COFD[16549] = 3.64531142E+00;
  COFD[16550] = -1.84302610E-01;
  COFD[16551] = 5.00335366E-03;
  COFD[16552] = -1.82247409E+01;
  COFD[16553] = 4.38781144E+00;
  COFD[16554] = -3.61168991E-01;
  COFD[16555] = 1.59338380E-02;
  COFD[16556] = -1.93054476E+01;
  COFD[16557] = 4.77052462E+00;
  COFD[16558] = -4.06325803E-01;
  COFD[16559] = 1.77045805E-02;
  COFD[16560] = -2.06257903E+01;
  COFD[16561] = 5.10569239E+00;
  COFD[16562] = -4.34343200E-01;
  COFD[16563] = 1.82778928E-02;
  COFD[16564] = -2.07698372E+01;
  COFD[16565] = 5.08393260E+00;
  COFD[16566] = -4.25938990E-01;
  COFD[16567] = 1.76828881E-02;
  COFD[16568] = -1.96042659E+01;
  COFD[16569] = 4.88379708E+00;
  COFD[16570] = -4.19653406E-01;
  COFD[16571] = 1.82262166E-02;
  COFD[16572] = -1.83540756E+01;
  COFD[16573] = 4.44189951E+00;
  COFD[16574] = -3.67842227E-01;
  COFD[16575] = 1.62093788E-02;
  COFD[16576] = -1.86971749E+01;
  COFD[16577] = 3.93133269E+00;
  COFD[16578] = -2.27917775E-01;
  COFD[16579] = 7.12220842E-03;
  COFD[16580] = -1.87091488E+01;
  COFD[16581] = 3.93133269E+00;
  COFD[16582] = -2.27917775E-01;
  COFD[16583] = 7.12220842E-03;
  COFD[16584] = -1.99232165E+01;
  COFD[16585] = 5.03178087E+00;
  COFD[16586] = -4.33314055E-01;
  COFD[16587] = 1.85881203E-02;
  COFD[16588] = -2.07636559E+01;
  COFD[16589] = 5.08393260E+00;
  COFD[16590] = -4.25938990E-01;
  COFD[16591] = 1.76828881E-02;
  COFD[16592] = -2.07636559E+01;
  COFD[16593] = 5.08393260E+00;
  COFD[16594] = -4.25938990E-01;
  COFD[16595] = 1.76828881E-02;
  COFD[16596] = -2.07636559E+01;
  COFD[16597] = 5.08393260E+00;
  COFD[16598] = -4.25938990E-01;
  COFD[16599] = 1.76828881E-02;
  COFD[16600] = -2.07571332E+01;
  COFD[16601] = 5.08393260E+00;
  COFD[16602] = -4.25938990E-01;
  COFD[16603] = 1.76828881E-02;
  COFD[16604] = -1.92833929E+01;
  COFD[16605] = 4.77052462E+00;
  COFD[16606] = -4.06325803E-01;
  COFD[16607] = 1.77045805E-02;
  COFD[16608] = -2.00031879E+01;
  COFD[16609] = 4.99640615E+00;
  COFD[16610] = -4.31162359E-01;
  COFD[16611] = 1.85964996E-02;
  COFD[16612] = -2.10872917E+01;
  COFD[16613] = 5.05791374E+00;
  COFD[16614] = -4.17418303E-01;
  COFD[16615] = 1.71036721E-02;
  COFD[16616] = -2.10935826E+01;
  COFD[16617] = 5.05791374E+00;
  COFD[16618] = -4.17418303E-01;
  COFD[16619] = 1.71036721E-02;
  COFD[16620] = -2.00001954E+01;
  COFD[16621] = 4.50165765E+00;
  COFD[16622] = -3.19414908E-01;
  COFD[16623] = 1.17986762E-02;
  COFD[16624] = -2.00064956E+01;
  COFD[16625] = 4.50165765E+00;
  COFD[16626] = -3.19414908E-01;
  COFD[16627] = 1.17986762E-02;
  COFD[16628] = -1.88651999E+01;
  COFD[16629] = 4.10444481E+00;
  COFD[16630] = -2.51736860E-01;
  COFD[16631] = 8.25061585E-03;
  COFD[16632] = -1.81682922E+01;
  COFD[16633] = 4.52327527E+00;
  COFD[16634] = -3.78029305E-01;
  COFD[16635] = 1.66365566E-02;
  COFD[16636] = -1.99856632E+01;
  COFD[16637] = 4.99582893E+00;
  COFD[16638] = -4.31116007E-01;
  COFD[16639] = 1.85956804E-02;
  COFD[16640] = -2.00472504E+01;
  COFD[16641] = 4.61896914E+00;
  COFD[16642] = -3.43811890E-01;
  COFD[16643] = 1.32423741E-02;
  COFD[16644] = -2.01645117E+01;
  COFD[16645] = 4.61896914E+00;
  COFD[16646] = -3.43811890E-01;
  COFD[16647] = 1.32423741E-02;
  COFD[16648] = -2.02332681E+01;
  COFD[16649] = 4.61896914E+00;
  COFD[16650] = -3.43811890E-01;
  COFD[16651] = 1.32423741E-02;
  COFD[16652] = -2.04819513E+01;
  COFD[16653] = 4.98699671E+00;
  COFD[16654] = -4.30386967E-01;
  COFD[16655] = 1.85815474E-02;
  COFD[16656] = -2.00381088E+01;
  COFD[16657] = 4.61896914E+00;
  COFD[16658] = -3.43811890E-01;
  COFD[16659] = 1.32423741E-02;
  COFD[16660] = -2.01595963E+01;
  COFD[16661] = 4.61896914E+00;
  COFD[16662] = -3.43811890E-01;
  COFD[16663] = 1.32423741E-02;
  COFD[16664] = -2.01218514E+01;
  COFD[16665] = 4.91653527E+00;
  COFD[16666] = -4.23300566E-01;
  COFD[16667] = 1.83595701E-02;
  COFD[16668] = -2.00285715E+01;
  COFD[16669] = 4.61896914E+00;
  COFD[16670] = -3.43811890E-01;
  COFD[16671] = 1.32423741E-02;
  COFD[16672] = -1.96164775E+01;
  COFD[16673] = 4.79875034E+00;
  COFD[16674] = -4.09672668E-01;
  COFD[16675] = 1.78367407E-02;
  COFD[16676] = -1.90621259E+01;
  COFD[16677] = 4.69223232E+00;
  COFD[16678] = -3.98170006E-01;
  COFD[16679] = 1.74358537E-02;
  COFD[16680] = -2.09677876E+01;
  COFD[16681] = 4.84325747E+00;
  COFD[16682] = -3.76657219E-01;
  COFD[16683] = 1.48093055E-02;
  COFD[16684] = -2.09159346E+01;
  COFD[16685] = 4.84325747E+00;
  COFD[16686] = -3.76657219E-01;
  COFD[16687] = 1.48093055E-02;
  COFD[16688] = -2.08395129E+01;
  COFD[16689] = 4.84325747E+00;
  COFD[16690] = -3.76657219E-01;
  COFD[16691] = 1.48093055E-02;
  COFD[16692] = -1.64507848E+01;
  COFD[16693] = 2.69277644E+00;
  COFD[16694] = -3.69311652E-02;
  COFD[16695] = -2.36590601E-03;
  COFD[16696] = -2.10872917E+01;
  COFD[16697] = 5.05791374E+00;
  COFD[16698] = -4.17418303E-01;
  COFD[16699] = 1.71036721E-02;
  COFD[16700] = -2.10872917E+01;
  COFD[16701] = 5.05791374E+00;
  COFD[16702] = -4.17418303E-01;
  COFD[16703] = 1.71036721E-02;
  COFD[16704] = -1.52162179E+01;
  COFD[16705] = 3.77717901E+00;
  COFD[16706] = -2.83987333E-01;
  COFD[16707] = 1.26715852E-02;
  COFD[16708] = -1.81722628E+01;
  COFD[16709] = 5.02489109E+00;
  COFD[16710] = -4.33408488E-01;
  COFD[16711] = 1.86336151E-02;
  COFD[16712] = -1.81351221E+01;
  COFD[16713] = 4.52327527E+00;
  COFD[16714] = -3.78029305E-01;
  COFD[16715] = 1.66365566E-02;
  COFD[16716] = -1.96449652E+01;
  COFD[16717] = 4.87794887E+00;
  COFD[16718] = -4.19010211E-01;
  COFD[16719] = 1.82031734E-02;
  COFD[16720] = -1.81598460E+01;
  COFD[16721] = 4.52327527E+00;
  COFD[16722] = -3.78029305E-01;
  COFD[16723] = 1.66365566E-02;
  COFD[16724] = -1.64378930E+01;
  COFD[16725] = 2.95214121E+00;
  COFD[16726] = -7.24781700E-02;
  COFD[16727] = -6.81785200E-04;
  COFD[16728] = -1.93992929E+01;
  COFD[16729] = 4.79132523E+00;
  COFD[16730] = -4.08760786E-01;
  COFD[16731] = 1.77992375E-02;
  COFD[16732] = -1.94094659E+01;
  COFD[16733] = 4.79132523E+00;
  COFD[16734] = -4.08760786E-01;
  COFD[16735] = 1.77992375E-02;
  COFD[16736] = -1.77957104E+01;
  COFD[16737] = 4.38781144E+00;
  COFD[16738] = -3.61168991E-01;
  COFD[16739] = 1.59338380E-02;
  COFD[16740] = -1.80496940E+01;
  COFD[16741] = 4.52327527E+00;
  COFD[16742] = -3.78029305E-01;
  COFD[16743] = 1.66365566E-02;
  COFD[16744] = -1.98953252E+01;
  COFD[16745] = 5.02339094E+00;
  COFD[16746] = -4.33412034E-01;
  COFD[16747] = 1.86420804E-02;
  COFD[16748] = -1.98953252E+01;
  COFD[16749] = 5.02339094E+00;
  COFD[16750] = -4.33412034E-01;
  COFD[16751] = 1.86420804E-02;
  COFD[16752] = -1.99240622E+01;
  COFD[16753] = 5.02339094E+00;
  COFD[16754] = -4.33412034E-01;
  COFD[16755] = 1.86420804E-02;
  COFD[16756] = -2.00270773E+01;
  COFD[16757] = 5.03812529E+00;
  COFD[16758] = -4.33377026E-01;
  COFD[16759] = 1.85590211E-02;
  COFD[16760] = -1.93706435E+01;
  COFD[16761] = 4.78116946E+00;
  COFD[16762] = -4.07518289E-01;
  COFD[16763] = 1.77483795E-02;
  COFD[16764] = -2.08749215E+01;
  COFD[16765] = 5.06720119E+00;
  COFD[16766] = -4.19613343E-01;
  COFD[16767] = 1.72393547E-02;
  COFD[16768] = -1.93897889E+01;
  COFD[16769] = 4.25726916E+00;
  COFD[16770] = -2.79522202E-01;
  COFD[16771] = 9.73775709E-03;
  COFD[16772] = -1.94017991E+01;
  COFD[16773] = 4.25726916E+00;
  COFD[16774] = -2.79522202E-01;
  COFD[16775] = 9.73775709E-03;
  COFD[16776] = -1.88227430E+01;
  COFD[16777] = 3.97908192E+00;
  COFD[16778] = -2.38620931E-01;
  COFD[16779] = 7.78870409E-03;
  COFD[16780] = -1.88227430E+01;
  COFD[16781] = 3.97908192E+00;
  COFD[16782] = -2.38620931E-01;
  COFD[16783] = 7.78870409E-03;
  COFD[16784] = -1.95767871E+01;
  COFD[16785] = 4.33226128E+00;
  COFD[16786] = -2.91490888E-01;
  COFD[16787] = 1.03476070E-02;
  COFD[16788] = -2.06862615E+01;
  COFD[16789] = 5.11167016E+00;
  COFD[16790] = -4.33651168E-01;
  COFD[16791] = 1.81871961E-02;
  COFD[16792] = -2.07007275E+01;
  COFD[16793] = 5.11167016E+00;
  COFD[16794] = -4.33651168E-01;
  COFD[16795] = 1.81871961E-02;
  COFD[16796] = -2.07144988E+01;
  COFD[16797] = 5.11167016E+00;
  COFD[16798] = -4.33651168E-01;
  COFD[16799] = 1.81871961E-02;
  COFD[16800] = -2.07189367E+01;
  COFD[16801] = 5.01615372E+00;
  COFD[16802] = -4.09499645E-01;
  COFD[16803] = 1.66570727E-02;
  COFD[16804] = -2.08474943E+01;
  COFD[16805] = 5.07093412E+00;
  COFD[16806] = -4.21231152E-01;
  COFD[16807] = 1.73552654E-02;
  COFD[16808] = -2.08594813E+01;
  COFD[16809] = 5.07093412E+00;
  COFD[16810] = -4.21231152E-01;
  COFD[16811] = 1.73552654E-02;
  COFD[16812] = -1.99833115E+01;
  COFD[16813] = 5.03178087E+00;
  COFD[16814] = -4.33314055E-01;
  COFD[16815] = 1.85881203E-02;
  COFD[16816] = -2.00546683E+01;
  COFD[16817] = 4.50165765E+00;
  COFD[16818] = -3.19414908E-01;
  COFD[16819] = 1.17986762E-02;
  COFD[16820] = -2.00546683E+01;
  COFD[16821] = 4.50165765E+00;
  COFD[16822] = -3.19414908E-01;
  COFD[16823] = 1.17986762E-02;
  COFD[16824] = -1.78605562E+01;
  COFD[16825] = 4.38781144E+00;
  COFD[16826] = -3.61168991E-01;
  COFD[16827] = 1.59338380E-02;
  COFD[16828] = -1.80798237E+01;
  COFD[16829] = 4.52327527E+00;
  COFD[16830] = -3.78029305E-01;
  COFD[16831] = 1.66365566E-02;
  COFD[16832] = -1.88575829E+01;
  COFD[16833] = 4.76845694E+00;
  COFD[16834] = -4.06130886E-01;
  COFD[16835] = 1.76992366E-02;
  COFD[16836] = -1.77842909E+01;
  COFD[16837] = 3.64531142E+00;
  COFD[16838] = -1.84302610E-01;
  COFD[16839] = 5.00335366E-03;
  COFD[16840] = -1.82730038E+01;
  COFD[16841] = 4.38781144E+00;
  COFD[16842] = -3.61168991E-01;
  COFD[16843] = 1.59338380E-02;
  COFD[16844] = -1.93548012E+01;
  COFD[16845] = 4.77052462E+00;
  COFD[16846] = -4.06325803E-01;
  COFD[16847] = 1.77045805E-02;
  COFD[16848] = -2.06900415E+01;
  COFD[16849] = 5.10569239E+00;
  COFD[16850] = -4.34343200E-01;
  COFD[16851] = 1.82778928E-02;
  COFD[16852] = -2.08324828E+01;
  COFD[16853] = 5.08393260E+00;
  COFD[16854] = -4.25938990E-01;
  COFD[16855] = 1.76828881E-02;
  COFD[16856] = -1.96547124E+01;
  COFD[16857] = 4.88379708E+00;
  COFD[16858] = -4.19653406E-01;
  COFD[16859] = 1.82262166E-02;
  COFD[16860] = -1.83988545E+01;
  COFD[16861] = 4.44189951E+00;
  COFD[16862] = -3.67842227E-01;
  COFD[16863] = 1.62093788E-02;
  COFD[16864] = -1.87431497E+01;
  COFD[16865] = 3.93133269E+00;
  COFD[16866] = -2.27917775E-01;
  COFD[16867] = 7.12220842E-03;
  COFD[16868] = -1.87562921E+01;
  COFD[16869] = 3.93133269E+00;
  COFD[16870] = -2.27917775E-01;
  COFD[16871] = 7.12220842E-03;
  COFD[16872] = -1.99833423E+01;
  COFD[16873] = 5.03178087E+00;
  COFD[16874] = -4.33314055E-01;
  COFD[16875] = 1.85881203E-02;
  COFD[16876] = -2.08254822E+01;
  COFD[16877] = 5.08393260E+00;
  COFD[16878] = -4.25938990E-01;
  COFD[16879] = 1.76828881E-02;
  COFD[16880] = -2.08254822E+01;
  COFD[16881] = 5.08393260E+00;
  COFD[16882] = -4.25938990E-01;
  COFD[16883] = 1.76828881E-02;
  COFD[16884] = -2.08254822E+01;
  COFD[16885] = 5.08393260E+00;
  COFD[16886] = -4.25938990E-01;
  COFD[16887] = 1.76828881E-02;
  COFD[16888] = -2.08181073E+01;
  COFD[16889] = 5.08393260E+00;
  COFD[16890] = -4.25938990E-01;
  COFD[16891] = 1.76828881E-02;
  COFD[16892] = -1.93305132E+01;
  COFD[16893] = 4.77052462E+00;
  COFD[16894] = -4.06325803E-01;
  COFD[16895] = 1.77045805E-02;
  COFD[16896] = -2.00623607E+01;
  COFD[16897] = 4.99640615E+00;
  COFD[16898] = -4.31162359E-01;
  COFD[16899] = 1.85964996E-02;
  COFD[16900] = -2.11491715E+01;
  COFD[16901] = 5.05791374E+00;
  COFD[16902] = -4.17418303E-01;
  COFD[16903] = 1.71036721E-02;
  COFD[16904] = -2.11562971E+01;
  COFD[16905] = 5.05791374E+00;
  COFD[16906] = -4.17418303E-01;
  COFD[16907] = 1.71036721E-02;
  COFD[16908] = -2.00620384E+01;
  COFD[16909] = 4.50165765E+00;
  COFD[16910] = -3.19414908E-01;
  COFD[16911] = 1.17986762E-02;
  COFD[16912] = -2.00691740E+01;
  COFD[16913] = 4.50165765E+00;
  COFD[16914] = -3.19414908E-01;
  COFD[16915] = 1.17986762E-02;
  COFD[16916] = -1.89022218E+01;
  COFD[16917] = 4.10444481E+00;
  COFD[16918] = -2.51736860E-01;
  COFD[16919] = 8.25061585E-03;
  COFD[16920] = -1.82038978E+01;
  COFD[16921] = 4.52327527E+00;
  COFD[16922] = -3.78029305E-01;
  COFD[16923] = 1.66365566E-02;
  COFD[16924] = -2.00430643E+01;
  COFD[16925] = 4.99582893E+00;
  COFD[16926] = -4.31116007E-01;
  COFD[16927] = 1.85956804E-02;
  COFD[16928] = -2.01008307E+01;
  COFD[16929] = 4.61896914E+00;
  COFD[16930] = -3.43811890E-01;
  COFD[16931] = 1.32423741E-02;
  COFD[16932] = -2.02332681E+01;
  COFD[16933] = 4.61896914E+00;
  COFD[16934] = -3.43811890E-01;
  COFD[16935] = 1.32423741E-02;
  COFD[16936] = -2.03130101E+01;
  COFD[16937] = 4.61896914E+00;
  COFD[16938] = -3.43811890E-01;
  COFD[16939] = 1.32423741E-02;
  COFD[16940] = -2.05700154E+01;
  COFD[16941] = 4.98699671E+00;
  COFD[16942] = -4.30386967E-01;
  COFD[16943] = 1.85815474E-02;
  COFD[16944] = -2.00906655E+01;
  COFD[16945] = 4.61896914E+00;
  COFD[16946] = -3.43811890E-01;
  COFD[16947] = 1.32423741E-02;
  COFD[16948] = -2.02276322E+01;
  COFD[16949] = 4.61896914E+00;
  COFD[16950] = -3.43811890E-01;
  COFD[16951] = 1.32423741E-02;
  COFD[16952] = -2.02010587E+01;
  COFD[16953] = 4.91653527E+00;
  COFD[16954] = -4.23300566E-01;
  COFD[16955] = 1.83595701E-02;
  COFD[16956] = -2.00800822E+01;
  COFD[16957] = 4.61896914E+00;
  COFD[16958] = -3.43811890E-01;
  COFD[16959] = 1.32423741E-02;
  COFD[16960] = -1.96837796E+01;
  COFD[16961] = 4.79875034E+00;
  COFD[16962] = -4.09672668E-01;
  COFD[16963] = 1.78367407E-02;
  COFD[16964] = -1.91125674E+01;
  COFD[16965] = 4.69223232E+00;
  COFD[16966] = -3.98170006E-01;
  COFD[16967] = 1.74358537E-02;
  COFD[16968] = -2.10546071E+01;
  COFD[16969] = 4.84325747E+00;
  COFD[16970] = -3.76657219E-01;
  COFD[16971] = 1.48093055E-02;
  COFD[16972] = -2.09935003E+01;
  COFD[16973] = 4.84325747E+00;
  COFD[16974] = -3.76657219E-01;
  COFD[16975] = 1.48093055E-02;
  COFD[16976] = -2.09053254E+01;
  COFD[16977] = 4.84325747E+00;
  COFD[16978] = -3.76657219E-01;
  COFD[16979] = 1.48093055E-02;
  COFD[16980] = -1.65158222E+01;
  COFD[16981] = 2.69277644E+00;
  COFD[16982] = -3.69311652E-02;
  COFD[16983] = -2.36590601E-03;
  COFD[16984] = -2.11491715E+01;
  COFD[16985] = 5.05791374E+00;
  COFD[16986] = -4.17418303E-01;
  COFD[16987] = 1.71036721E-02;
  COFD[16988] = -2.11491715E+01;
  COFD[16989] = 5.05791374E+00;
  COFD[16990] = -4.17418303E-01;
  COFD[16991] = 1.71036721E-02;
  COFD[16992] = -1.33708600E+01;
  COFD[16993] = 3.02993215E+00;
  COFD[16994] = -1.87240996E-01;
  COFD[16995] = 8.49033986E-03;
  COFD[16996] = -1.65464006E+01;
  COFD[16997] = 4.42995842E+00;
  COFD[16998] = -3.66381678E-01;
  COFD[16999] = 1.61496404E-02;
  COFD[17000] = -1.61752207E+01;
  COFD[17001] = 3.73914304E+00;
  COFD[17002] = -2.79071053E-01;
  COFD[17003] = 1.24592731E-02;
  COFD[17004] = -1.75908773E+01;
  COFD[17005] = 4.09821096E+00;
  COFD[17006] = -3.25157935E-01;
  COFD[17007] = 1.44367395E-02;
  COFD[17008] = -1.62009475E+01;
  COFD[17009] = 3.73914304E+00;
  COFD[17010] = -2.79071053E-01;
  COFD[17011] = 1.24592731E-02;
  COFD[17012] = -2.02942337E+01;
  COFD[17013] = 4.97291367E+00;
  COFD[17014] = -4.01719707E-01;
  COFD[17015] = 1.62300804E-02;
  COFD[17016] = -1.76022029E+01;
  COFD[17017] = 4.09821096E+00;
  COFD[17018] = -3.25157935E-01;
  COFD[17019] = 1.44367395E-02;
  COFD[17020] = -1.76130966E+01;
  COFD[17021] = 4.09821096E+00;
  COFD[17022] = -3.25157935E-01;
  COFD[17023] = 1.44367395E-02;
  COFD[17024] = -1.59071266E+01;
  COFD[17025] = 3.63398790E+00;
  COFD[17026] = -2.65805155E-01;
  COFD[17027] = 1.19009007E-02;
  COFD[17028] = -1.60866982E+01;
  COFD[17029] = 3.73914304E+00;
  COFD[17030] = -2.79071053E-01;
  COFD[17031] = 1.24592731E-02;
  COFD[17032] = -1.82378736E+01;
  COFD[17033] = 4.42281403E+00;
  COFD[17034] = -3.65512947E-01;
  COFD[17035] = 1.61143523E-02;
  COFD[17036] = -1.82378736E+01;
  COFD[17037] = 4.42281403E+00;
  COFD[17038] = -3.65512947E-01;
  COFD[17039] = 1.61143523E-02;
  COFD[17040] = -1.82676565E+01;
  COFD[17041] = 4.42281403E+00;
  COFD[17042] = -3.65512947E-01;
  COFD[17043] = 1.61143523E-02;
  COFD[17044] = -1.82260052E+01;
  COFD[17045] = 4.40246406E+00;
  COFD[17046] = -3.62993510E-01;
  COFD[17047] = 1.60099297E-02;
  COFD[17048] = -1.72942476E+01;
  COFD[17049] = 3.98819843E+00;
  COFD[17050] = -3.11033741E-01;
  COFD[17051] = 1.38301591E-02;
  COFD[17052] = -2.01894131E+01;
  COFD[17053] = 4.94118733E+00;
  COFD[17054] = -4.25952466E-01;
  COFD[17055] = 1.84520868E-02;
  COFD[17056] = -2.08424415E+01;
  COFD[17057] = 5.07028665E+00;
  COFD[17058] = -4.20817850E-01;
  COFD[17059] = 1.73240802E-02;
  COFD[17060] = -2.08552267E+01;
  COFD[17061] = 5.07028665E+00;
  COFD[17062] = -4.20817850E-01;
  COFD[17063] = 1.73240802E-02;
  COFD[17064] = -2.08451706E+01;
  COFD[17065] = 5.11264503E+00;
  COFD[17066] = -4.33088609E-01;
  COFD[17067] = 1.81344629E-02;
  COFD[17068] = -2.08451706E+01;
  COFD[17069] = 5.11264503E+00;
  COFD[17070] = -4.33088609E-01;
  COFD[17071] = 1.81344629E-02;
  COFD[17072] = -2.08679570E+01;
  COFD[17073] = 5.07312943E+00;
  COFD[17074] = -4.22354342E-01;
  COFD[17075] = 1.74380570E-02;
  COFD[17076] = -1.96010028E+01;
  COFD[17077] = 4.78505233E+00;
  COFD[17078] = -4.07992165E-01;
  COFD[17079] = 1.77677163E-02;
  COFD[17080] = -1.96163047E+01;
  COFD[17081] = 4.78505233E+00;
  COFD[17082] = -4.07992165E-01;
  COFD[17083] = 1.77677163E-02;
  COFD[17084] = -1.96308958E+01;
  COFD[17085] = 4.78505233E+00;
  COFD[17086] = -4.07992165E-01;
  COFD[17087] = 1.77677163E-02;
  COFD[17088] = -2.03617119E+01;
  COFD[17089] = 5.02212579E+00;
  COFD[17090] = -4.33311415E-01;
  COFD[17091] = 1.86403529E-02;
  COFD[17092] = -2.02369569E+01;
  COFD[17093] = 4.96212426E+00;
  COFD[17094] = -4.27973386E-01;
  COFD[17095] = 1.85108394E-02;
  COFD[17096] = -2.02497184E+01;
  COFD[17097] = 4.96212426E+00;
  COFD[17098] = -4.27973386E-01;
  COFD[17099] = 1.85108394E-02;
  COFD[17100] = -1.84490849E+01;
  COFD[17101] = 4.46789337E+00;
  COFD[17102] = -3.71068329E-01;
  COFD[17103] = 1.63434655E-02;
  COFD[17104] = -2.10320415E+01;
  COFD[17105] = 5.10279987E+00;
  COFD[17106] = -4.30115943E-01;
  COFD[17107] = 1.79356096E-02;
  COFD[17108] = -2.10320415E+01;
  COFD[17109] = 5.10279987E+00;
  COFD[17110] = -4.30115943E-01;
  COFD[17111] = 1.79356096E-02;
  COFD[17112] = -1.59741136E+01;
  COFD[17113] = 3.63398790E+00;
  COFD[17114] = -2.65805155E-01;
  COFD[17115] = 1.19009007E-02;
  COFD[17116] = -1.61210687E+01;
  COFD[17117] = 3.73914304E+00;
  COFD[17118] = -2.79071053E-01;
  COFD[17119] = 1.24592731E-02;
  COFD[17120] = -1.61486879E+01;
  COFD[17121] = 3.73914304E+00;
  COFD[17122] = -2.79071053E-01;
  COFD[17123] = 1.24592731E-02;
  COFD[17124] = -2.04395136E+01;
  COFD[17125] = 5.07320153E+00;
  COFD[17126] = -4.22421263E-01;
  COFD[17127] = 1.74432926E-02;
  COFD[17128] = -1.63915451E+01;
  COFD[17129] = 3.63398790E+00;
  COFD[17130] = -2.65805155E-01;
  COFD[17131] = 1.19009007E-02;
  COFD[17132] = -1.72935248E+01;
  COFD[17133] = 3.98080999E+00;
  COFD[17134] = -3.10081093E-01;
  COFD[17135] = 1.37890749E-02;
  COFD[17136] = -1.95739241E+01;
  COFD[17137] = 4.75212143E+00;
  COFD[17138] = -4.04516980E-01;
  COFD[17139] = 1.76507702E-02;
  COFD[17140] = -2.00793174E+01;
  COFD[17141] = 4.90077593E+00;
  COFD[17142] = -4.21552326E-01;
  COFD[17143] = 1.82959533E-02;
  COFD[17144] = -1.77945929E+01;
  COFD[17145] = 4.17092346E+00;
  COFD[17146] = -3.33942303E-01;
  COFD[17147] = 1.47900250E-02;
  COFD[17148] = -1.64640566E+01;
  COFD[17149] = 3.66937109E+00;
  COFD[17150] = -2.70109258E-01;
  COFD[17151] = 1.20747951E-02;
  COFD[17152] = -2.07294449E+01;
  COFD[17153] = 4.97920482E+00;
  COFD[17154] = -4.02844963E-01;
  COFD[17155] = 1.62916118E-02;
  COFD[17156] = -2.07433918E+01;
  COFD[17157] = 4.97920482E+00;
  COFD[17158] = -4.02844963E-01;
  COFD[17159] = 1.62916118E-02;
  COFD[17160] = -1.84491182E+01;
  COFD[17161] = 4.46789337E+00;
  COFD[17162] = -3.71068329E-01;
  COFD[17163] = 1.63434655E-02;
  COFD[17164] = -2.00717215E+01;
  COFD[17165] = 4.90077593E+00;
  COFD[17166] = -4.21552326E-01;
  COFD[17167] = 1.82959533E-02;
  COFD[17168] = -2.00717215E+01;
  COFD[17169] = 4.90077593E+00;
  COFD[17170] = -4.21552326E-01;
  COFD[17171] = 1.82959533E-02;
  COFD[17172] = -2.00717215E+01;
  COFD[17173] = 4.90077593E+00;
  COFD[17174] = -4.21552326E-01;
  COFD[17175] = 1.82959533E-02;
  COFD[17176] = -2.00637293E+01;
  COFD[17177] = 4.90077593E+00;
  COFD[17178] = -4.21552326E-01;
  COFD[17179] = 1.82959533E-02;
  COFD[17180] = -1.72676903E+01;
  COFD[17181] = 3.98080999E+00;
  COFD[17182] = -3.10081093E-01;
  COFD[17183] = 1.37890749E-02;
  COFD[17184] = -1.83661965E+01;
  COFD[17185] = 4.36218263E+00;
  COFD[17186] = -3.57979690E-01;
  COFD[17187] = 1.58009336E-02;
  COFD[17188] = -2.06414835E+01;
  COFD[17189] = 4.99624565E+00;
  COFD[17190] = -4.31149471E-01;
  COFD[17191] = 1.85962718E-02;
  COFD[17192] = -2.06492157E+01;
  COFD[17193] = 4.99624565E+00;
  COFD[17194] = -4.31149471E-01;
  COFD[17195] = 1.85962718E-02;
  COFD[17196] = -2.10400287E+01;
  COFD[17197] = 5.10279987E+00;
  COFD[17198] = -4.30115943E-01;
  COFD[17199] = 1.79356096E-02;
  COFD[17200] = -2.10477712E+01;
  COFD[17201] = 5.10279987E+00;
  COFD[17202] = -4.30115943E-01;
  COFD[17203] = 1.79356096E-02;
  COFD[17204] = -2.02404064E+01;
  COFD[17205] = 5.06248811E+00;
  COFD[17206] = -4.33904352E-01;
  COFD[17207] = 1.84725096E-02;
  COFD[17208] = -1.62469194E+01;
  COFD[17209] = 3.73914304E+00;
  COFD[17210] = -2.79071053E-01;
  COFD[17211] = 1.24592731E-02;
  COFD[17212] = -1.80677192E+01;
  COFD[17213] = 4.26180303E+00;
  COFD[17214] = -3.45367657E-01;
  COFD[17215] = 1.52704124E-02;
  COFD[17216] = -2.03385283E+01;
  COFD[17217] = 4.98699671E+00;
  COFD[17218] = -4.30386967E-01;
  COFD[17219] = 1.85815474E-02;
  COFD[17220] = -2.04819513E+01;
  COFD[17221] = 4.98699671E+00;
  COFD[17222] = -4.30386967E-01;
  COFD[17223] = 1.85815474E-02;
  COFD[17224] = -2.05700154E+01;
  COFD[17225] = 4.98699671E+00;
  COFD[17226] = -4.30386967E-01;
  COFD[17227] = 1.85815474E-02;
  COFD[17228] = -1.88490796E+01;
  COFD[17229] = 4.33988175E+00;
  COFD[17230] = -3.55177145E-01;
  COFD[17231] = 1.56829583E-02;
  COFD[17232] = -2.03276426E+01;
  COFD[17233] = 4.98699671E+00;
  COFD[17234] = -4.30386967E-01;
  COFD[17235] = 1.85815474E-02;
  COFD[17236] = -2.04757807E+01;
  COFD[17237] = 4.98699671E+00;
  COFD[17238] = -4.30386967E-01;
  COFD[17239] = 1.85815474E-02;
  COFD[17240] = -1.83693335E+01;
  COFD[17241] = 4.21498730E+00;
  COFD[17242] = -3.39484602E-01;
  COFD[17243] = 1.50231356E-02;
  COFD[17244] = -2.03163255E+01;
  COFD[17245] = 4.98699671E+00;
  COFD[17246] = -4.30386967E-01;
  COFD[17247] = 1.85815474E-02;
  COFD[17248] = -1.78828275E+01;
  COFD[17249] = 4.10347428E+00;
  COFD[17250] = -3.25805714E-01;
  COFD[17251] = 1.44633323E-02;
  COFD[17252] = -1.71895490E+01;
  COFD[17253] = 3.93560759E+00;
  COFD[17254] = -3.04230562E-01;
  COFD[17255] = 1.35357304E-02;
  COFD[17256] = -2.12202877E+01;
  COFD[17257] = 5.08017083E+00;
  COFD[17258] = -4.34471839E-01;
  COFD[17259] = 1.84255993E-02;
  COFD[17260] = -2.11519711E+01;
  COFD[17261] = 5.08017083E+00;
  COFD[17262] = -4.34471839E-01;
  COFD[17263] = 1.84255993E-02;
  COFD[17264] = -2.10549722E+01;
  COFD[17265] = 5.08017083E+00;
  COFD[17266] = -4.34471839E-01;
  COFD[17267] = 1.84255993E-02;
  COFD[17268] = -2.02489380E+01;
  COFD[17269] = 4.49027227E+00;
  COFD[17270] = -3.17473352E-01;
  COFD[17271] = 1.16959305E-02;
  COFD[17272] = -2.06414835E+01;
  COFD[17273] = 4.99624565E+00;
  COFD[17274] = -4.31149471E-01;
  COFD[17275] = 1.85962718E-02;
  COFD[17276] = -2.06414835E+01;
  COFD[17277] = 4.99624565E+00;
  COFD[17278] = -4.31149471E-01;
  COFD[17279] = 1.85962718E-02;
  COFD[17280] = -1.52007850E+01;
  COFD[17281] = 3.77717901E+00;
  COFD[17282] = -2.83987333E-01;
  COFD[17283] = 1.26715852E-02;
  COFD[17284] = -1.81643773E+01;
  COFD[17285] = 5.02489109E+00;
  COFD[17286] = -4.33408488E-01;
  COFD[17287] = 1.86336151E-02;
  COFD[17288] = -1.80405028E+01;
  COFD[17289] = 4.52327527E+00;
  COFD[17290] = -3.78029305E-01;
  COFD[17291] = 1.66365566E-02;
  COFD[17292] = -1.94944273E+01;
  COFD[17293] = 4.87794887E+00;
  COFD[17294] = -4.19010211E-01;
  COFD[17295] = 1.82031734E-02;
  COFD[17296] = -1.80608759E+01;
  COFD[17297] = 4.52327527E+00;
  COFD[17298] = -3.78029305E-01;
  COFD[17299] = 1.66365566E-02;
  COFD[17300] = -1.63347080E+01;
  COFD[17301] = 2.95214121E+00;
  COFD[17302] = -7.24781700E-02;
  COFD[17303] = -6.81785200E-04;
  COFD[17304] = -1.92459797E+01;
  COFD[17305] = 4.79132523E+00;
  COFD[17306] = -4.08760786E-01;
  COFD[17307] = 1.77992375E-02;
  COFD[17308] = -1.92534461E+01;
  COFD[17309] = 4.79132523E+00;
  COFD[17310] = -4.08760786E-01;
  COFD[17311] = 1.77992375E-02;
  COFD[17312] = -1.77197775E+01;
  COFD[17313] = 4.38781144E+00;
  COFD[17314] = -3.61168991E-01;
  COFD[17315] = 1.59338380E-02;
  COFD[17316] = -1.79688006E+01;
  COFD[17317] = 4.52327527E+00;
  COFD[17318] = -3.78029305E-01;
  COFD[17319] = 1.66365566E-02;
  COFD[17320] = -1.98096373E+01;
  COFD[17321] = 5.02339094E+00;
  COFD[17322] = -4.33412034E-01;
  COFD[17323] = 1.86420804E-02;
  COFD[17324] = -1.98096373E+01;
  COFD[17325] = 5.02339094E+00;
  COFD[17326] = -4.33412034E-01;
  COFD[17327] = 1.86420804E-02;
  COFD[17328] = -1.98337374E+01;
  COFD[17329] = 5.02339094E+00;
  COFD[17330] = -4.33412034E-01;
  COFD[17331] = 1.86420804E-02;
  COFD[17332] = -1.99322652E+01;
  COFD[17333] = 5.03812529E+00;
  COFD[17334] = -4.33377026E-01;
  COFD[17335] = 1.85590211E-02;
  COFD[17336] = -1.92318131E+01;
  COFD[17337] = 4.78116946E+00;
  COFD[17338] = -4.07518289E-01;
  COFD[17339] = 1.77483795E-02;
  COFD[17340] = -2.06952859E+01;
  COFD[17341] = 5.06720119E+00;
  COFD[17342] = -4.19613343E-01;
  COFD[17343] = 1.72393547E-02;
  COFD[17344] = -1.92478838E+01;
  COFD[17345] = 4.25726916E+00;
  COFD[17346] = -2.79522202E-01;
  COFD[17347] = 9.73775709E-03;
  COFD[17348] = -1.92568994E+01;
  COFD[17349] = 4.25726916E+00;
  COFD[17350] = -2.79522202E-01;
  COFD[17351] = 9.73775709E-03;
  COFD[17352] = -1.86749259E+01;
  COFD[17353] = 3.97908192E+00;
  COFD[17354] = -2.38620931E-01;
  COFD[17355] = 7.78870409E-03;
  COFD[17356] = -1.86749259E+01;
  COFD[17357] = 3.97908192E+00;
  COFD[17358] = -2.38620931E-01;
  COFD[17359] = 7.78870409E-03;
  COFD[17360] = -1.94261265E+01;
  COFD[17361] = 4.33226128E+00;
  COFD[17362] = -2.91490888E-01;
  COFD[17363] = 1.03476070E-02;
  COFD[17364] = -2.05570231E+01;
  COFD[17365] = 5.11167016E+00;
  COFD[17366] = -4.33651168E-01;
  COFD[17367] = 1.81871961E-02;
  COFD[17368] = -2.05681572E+01;
  COFD[17369] = 5.11167016E+00;
  COFD[17370] = -4.33651168E-01;
  COFD[17371] = 1.81871961E-02;
  COFD[17372] = -2.05786870E+01;
  COFD[17373] = 5.11167016E+00;
  COFD[17374] = -4.33651168E-01;
  COFD[17375] = 1.81871961E-02;
  COFD[17376] = -2.05799704E+01;
  COFD[17377] = 5.01615372E+00;
  COFD[17378] = -4.09499645E-01;
  COFD[17379] = 1.66570727E-02;
  COFD[17380] = -2.07054568E+01;
  COFD[17381] = 5.07093412E+00;
  COFD[17382] = -4.21231152E-01;
  COFD[17383] = 1.73552654E-02;
  COFD[17384] = -2.07144527E+01;
  COFD[17385] = 5.07093412E+00;
  COFD[17386] = -4.21231152E-01;
  COFD[17387] = 1.73552654E-02;
  COFD[17388] = -1.98101606E+01;
  COFD[17389] = 5.03178087E+00;
  COFD[17390] = -4.33314055E-01;
  COFD[17391] = 1.85881203E-02;
  COFD[17392] = -1.98792758E+01;
  COFD[17393] = 4.50165765E+00;
  COFD[17394] = -3.19414908E-01;
  COFD[17395] = 1.17986762E-02;
  COFD[17396] = -1.98792758E+01;
  COFD[17397] = 4.50165765E+00;
  COFD[17398] = -3.19414908E-01;
  COFD[17399] = 1.17986762E-02;
  COFD[17400] = -1.77749619E+01;
  COFD[17401] = 4.38781144E+00;
  COFD[17402] = -3.61168991E-01;
  COFD[17403] = 1.59338380E-02;
  COFD[17404] = -1.79895893E+01;
  COFD[17405] = 4.52327527E+00;
  COFD[17406] = -3.78029305E-01;
  COFD[17407] = 1.66365566E-02;
  COFD[17408] = -1.87628584E+01;
  COFD[17409] = 4.76845694E+00;
  COFD[17410] = -4.06130886E-01;
  COFD[17411] = 1.76992366E-02;
  COFD[17412] = -1.76852189E+01;
  COFD[17413] = 3.64531142E+00;
  COFD[17414] = -1.84302610E-01;
  COFD[17415] = 5.00335366E-03;
  COFD[17416] = -1.81310867E+01;
  COFD[17417] = 4.38781144E+00;
  COFD[17418] = -3.61168991E-01;
  COFD[17419] = 1.59338380E-02;
  COFD[17420] = -1.92099602E+01;
  COFD[17421] = 4.77052462E+00;
  COFD[17422] = -4.06325803E-01;
  COFD[17423] = 1.77045805E-02;
  COFD[17424] = -2.05062925E+01;
  COFD[17425] = 5.10569239E+00;
  COFD[17426] = -4.34343200E-01;
  COFD[17427] = 1.82778928E-02;
  COFD[17428] = -2.06528388E+01;
  COFD[17429] = 5.08393260E+00;
  COFD[17430] = -4.25938990E-01;
  COFD[17431] = 1.76828881E-02;
  COFD[17432] = -1.95069524E+01;
  COFD[17433] = 4.88379708E+00;
  COFD[17434] = -4.19653406E-01;
  COFD[17435] = 1.82262166E-02;
  COFD[17436] = -1.82663493E+01;
  COFD[17437] = 4.44189951E+00;
  COFD[17438] = -3.67842227E-01;
  COFD[17439] = 1.62093788E-02;
  COFD[17440] = -1.86074013E+01;
  COFD[17441] = 3.93133269E+00;
  COFD[17442] = -2.27917775E-01;
  COFD[17443] = 7.12220842E-03;
  COFD[17444] = -1.86173875E+01;
  COFD[17445] = 3.93133269E+00;
  COFD[17446] = -2.27917775E-01;
  COFD[17447] = 7.12220842E-03;
  COFD[17448] = -1.98101824E+01;
  COFD[17449] = 5.03178087E+00;
  COFD[17450] = -4.33314055E-01;
  COFD[17451] = 1.85881203E-02;
  COFD[17452] = -2.06479408E+01;
  COFD[17453] = 5.08393260E+00;
  COFD[17454] = -4.25938990E-01;
  COFD[17455] = 1.76828881E-02;
  COFD[17456] = -2.06479408E+01;
  COFD[17457] = 5.08393260E+00;
  COFD[17458] = -4.25938990E-01;
  COFD[17459] = 1.76828881E-02;
  COFD[17460] = -2.06479408E+01;
  COFD[17461] = 5.08393260E+00;
  COFD[17462] = -4.25938990E-01;
  COFD[17463] = 1.76828881E-02;
  COFD[17464] = -2.06427588E+01;
  COFD[17465] = 5.08393260E+00;
  COFD[17466] = -4.25938990E-01;
  COFD[17467] = 1.76828881E-02;
  COFD[17468] = -1.91916705E+01;
  COFD[17469] = 4.77052462E+00;
  COFD[17470] = -4.06325803E-01;
  COFD[17471] = 1.77045805E-02;
  COFD[17472] = -1.98916664E+01;
  COFD[17473] = 4.99640615E+00;
  COFD[17474] = -4.31162359E-01;
  COFD[17475] = 1.85964996E-02;
  COFD[17476] = -2.09714925E+01;
  COFD[17477] = 5.05791374E+00;
  COFD[17478] = -4.17418303E-01;
  COFD[17479] = 1.71036721E-02;
  COFD[17480] = -2.09764764E+01;
  COFD[17481] = 5.05791374E+00;
  COFD[17482] = -4.17418303E-01;
  COFD[17483] = 1.71036721E-02;
  COFD[17484] = -1.98844540E+01;
  COFD[17485] = 4.50165765E+00;
  COFD[17486] = -3.19414908E-01;
  COFD[17487] = 1.17986762E-02;
  COFD[17488] = -1.98894458E+01;
  COFD[17489] = 4.50165765E+00;
  COFD[17490] = -3.19414908E-01;
  COFD[17491] = 1.17986762E-02;
  COFD[17492] = -1.87910846E+01;
  COFD[17493] = 4.10444481E+00;
  COFD[17494] = -2.51736860E-01;
  COFD[17495] = 8.25061585E-03;
  COFD[17496] = -1.80967256E+01;
  COFD[17497] = 4.52327527E+00;
  COFD[17498] = -3.78029305E-01;
  COFD[17499] = 1.66365566E-02;
  COFD[17500] = -1.98769740E+01;
  COFD[17501] = 4.99582893E+00;
  COFD[17502] = -4.31116007E-01;
  COFD[17503] = 1.85956804E-02;
  COFD[17504] = -1.99447594E+01;
  COFD[17505] = 4.61896914E+00;
  COFD[17506] = -3.43811890E-01;
  COFD[17507] = 1.32423741E-02;
  COFD[17508] = -2.00381088E+01;
  COFD[17509] = 4.61896914E+00;
  COFD[17510] = -3.43811890E-01;
  COFD[17511] = 1.32423741E-02;
  COFD[17512] = -2.00906655E+01;
  COFD[17513] = 4.61896914E+00;
  COFD[17514] = -3.43811890E-01;
  COFD[17515] = 1.32423741E-02;
  COFD[17516] = -2.03276426E+01;
  COFD[17517] = 4.98699671E+00;
  COFD[17518] = -4.30386967E-01;
  COFD[17519] = 1.85815474E-02;
  COFD[17520] = -1.99372995E+01;
  COFD[17521] = 4.61896914E+00;
  COFD[17522] = -3.43811890E-01;
  COFD[17523] = 1.32423741E-02;
  COFD[17524] = -2.00342873E+01;
  COFD[17525] = 4.61896914E+00;
  COFD[17526] = -3.43811890E-01;
  COFD[17527] = 1.32423741E-02;
  COFD[17528] = -1.99800171E+01;
  COFD[17529] = 4.91653527E+00;
  COFD[17530] = -4.23300566E-01;
  COFD[17531] = 1.83595701E-02;
  COFD[17532] = -1.99294901E+01;
  COFD[17533] = 4.61896914E+00;
  COFD[17534] = -3.43811890E-01;
  COFD[17535] = 1.32423741E-02;
  COFD[17536] = -1.94922863E+01;
  COFD[17537] = 4.79875034E+00;
  COFD[17538] = -4.09672668E-01;
  COFD[17539] = 1.78367407E-02;
  COFD[17540] = -1.89648206E+01;
  COFD[17541] = 4.69223232E+00;
  COFD[17542] = -3.98170006E-01;
  COFD[17543] = 1.74358537E-02;
  COFD[17544] = -2.08151997E+01;
  COFD[17545] = 4.84325747E+00;
  COFD[17546] = -3.76657219E-01;
  COFD[17547] = 1.48093055E-02;
  COFD[17548] = -2.07764718E+01;
  COFD[17549] = 4.84325747E+00;
  COFD[17550] = -3.76657219E-01;
  COFD[17551] = 1.48093055E-02;
  COFD[17552] = -2.07176043E+01;
  COFD[17553] = 4.84325747E+00;
  COFD[17554] = -3.76657219E-01;
  COFD[17555] = 1.48093055E-02;
  COFD[17556] = -1.63300707E+01;
  COFD[17557] = 2.69277644E+00;
  COFD[17558] = -3.69311652E-02;
  COFD[17559] = -2.36590601E-03;
  COFD[17560] = -2.09714925E+01;
  COFD[17561] = 5.05791374E+00;
  COFD[17562] = -4.17418303E-01;
  COFD[17563] = 1.71036721E-02;
  COFD[17564] = -2.09714925E+01;
  COFD[17565] = 5.05791374E+00;
  COFD[17566] = -4.17418303E-01;
  COFD[17567] = 1.71036721E-02;
  COFD[17568] = -1.52110335E+01;
  COFD[17569] = 3.77717901E+00;
  COFD[17570] = -2.83987333E-01;
  COFD[17571] = 1.26715852E-02;
  COFD[17572] = -1.81696271E+01;
  COFD[17573] = 5.02489109E+00;
  COFD[17574] = -4.33408488E-01;
  COFD[17575] = 1.86336151E-02;
  COFD[17576] = -1.81016344E+01;
  COFD[17577] = 4.52327527E+00;
  COFD[17578] = -3.78029305E-01;
  COFD[17579] = 1.66365566E-02;
  COFD[17580] = -1.95897266E+01;
  COFD[17581] = 4.87794887E+00;
  COFD[17582] = -4.19010211E-01;
  COFD[17583] = 1.82031734E-02;
  COFD[17584] = -1.81247191E+01;
  COFD[17585] = 4.52327527E+00;
  COFD[17586] = -3.78029305E-01;
  COFD[17587] = 1.66365566E-02;
  COFD[17588] = -1.64011695E+01;
  COFD[17589] = 2.95214121E+00;
  COFD[17590] = -7.24781700E-02;
  COFD[17591] = -6.81785200E-04;
  COFD[17592] = -1.93429360E+01;
  COFD[17593] = 4.79132523E+00;
  COFD[17594] = -4.08760786E-01;
  COFD[17595] = 1.77992375E-02;
  COFD[17596] = -1.93520146E+01;
  COFD[17597] = 4.79132523E+00;
  COFD[17598] = -4.08760786E-01;
  COFD[17599] = 1.77992375E-02;
  COFD[17600] = -1.77691623E+01;
  COFD[17601] = 4.38781144E+00;
  COFD[17602] = -3.61168991E-01;
  COFD[17603] = 1.59338380E-02;
  COFD[17604] = -1.80213196E+01;
  COFD[17605] = 4.52327527E+00;
  COFD[17606] = -3.78029305E-01;
  COFD[17607] = 1.66365566E-02;
  COFD[17608] = -1.98651747E+01;
  COFD[17609] = 5.02339094E+00;
  COFD[17610] = -4.33412034E-01;
  COFD[17611] = 1.86420804E-02;
  COFD[17612] = -1.98651747E+01;
  COFD[17613] = 5.02339094E+00;
  COFD[17614] = -4.33412034E-01;
  COFD[17615] = 1.86420804E-02;
  COFD[17616] = -1.98921838E+01;
  COFD[17617] = 5.02339094E+00;
  COFD[17618] = -4.33412034E-01;
  COFD[17619] = 1.86420804E-02;
  COFD[17620] = -1.99935171E+01;
  COFD[17621] = 5.03812529E+00;
  COFD[17622] = -4.33377026E-01;
  COFD[17623] = 1.85590211E-02;
  COFD[17624] = -1.93200821E+01;
  COFD[17625] = 4.78116946E+00;
  COFD[17626] = -4.07518289E-01;
  COFD[17627] = 1.77483795E-02;
  COFD[17628] = -2.08077721E+01;
  COFD[17629] = 5.06720119E+00;
  COFD[17630] = -4.19613343E-01;
  COFD[17631] = 1.72393547E-02;
  COFD[17632] = -1.93380056E+01;
  COFD[17633] = 4.25726916E+00;
  COFD[17634] = -2.79522202E-01;
  COFD[17635] = 9.73775709E-03;
  COFD[17636] = -1.93488212E+01;
  COFD[17637] = 4.25726916E+00;
  COFD[17638] = -2.79522202E-01;
  COFD[17639] = 9.73775709E-03;
  COFD[17640] = -1.87685973E+01;
  COFD[17641] = 3.97908192E+00;
  COFD[17642] = -2.38620931E-01;
  COFD[17643] = 7.78870409E-03;
  COFD[17644] = -1.87685973E+01;
  COFD[17645] = 3.97908192E+00;
  COFD[17646] = -2.38620931E-01;
  COFD[17647] = 7.78870409E-03;
  COFD[17648] = -1.95214992E+01;
  COFD[17649] = 4.33226128E+00;
  COFD[17650] = -2.91490888E-01;
  COFD[17651] = 1.03476070E-02;
  COFD[17652] = -2.06394833E+01;
  COFD[17653] = 5.11167016E+00;
  COFD[17654] = -4.33651168E-01;
  COFD[17655] = 1.81871961E-02;
  COFD[17656] = -2.06526402E+01;
  COFD[17657] = 5.11167016E+00;
  COFD[17658] = -4.33651168E-01;
  COFD[17659] = 1.81871961E-02;
  COFD[17660] = -2.06651327E+01;
  COFD[17661] = 5.11167016E+00;
  COFD[17662] = -4.33651168E-01;
  COFD[17663] = 1.81871961E-02;
  COFD[17664] = -2.06683214E+01;
  COFD[17665] = 5.01615372E+00;
  COFD[17666] = -4.09499645E-01;
  COFD[17667] = 1.66570727E-02;
  COFD[17668] = -2.07956582E+01;
  COFD[17669] = 5.07093412E+00;
  COFD[17670] = -4.21231152E-01;
  COFD[17671] = 1.73552654E-02;
  COFD[17672] = -2.08064519E+01;
  COFD[17673] = 5.07093412E+00;
  COFD[17674] = -4.21231152E-01;
  COFD[17675] = 1.73552654E-02;
  COFD[17676] = -1.99188521E+01;
  COFD[17677] = 5.03178087E+00;
  COFD[17678] = -4.33314055E-01;
  COFD[17679] = 1.85881203E-02;
  COFD[17680] = -1.99892814E+01;
  COFD[17681] = 4.50165765E+00;
  COFD[17682] = -3.19414908E-01;
  COFD[17683] = 1.17986762E-02;
  COFD[17684] = -1.99892814E+01;
  COFD[17685] = 4.50165765E+00;
  COFD[17686] = -3.19414908E-01;
  COFD[17687] = 1.17986762E-02;
  COFD[17688] = -1.78304404E+01;
  COFD[17689] = 4.38781144E+00;
  COFD[17690] = -3.61168991E-01;
  COFD[17691] = 1.59338380E-02;
  COFD[17692] = -1.80479791E+01;
  COFD[17693] = 4.52327527E+00;
  COFD[17694] = -3.78029305E-01;
  COFD[17695] = 1.66365566E-02;
  COFD[17696] = -1.88240556E+01;
  COFD[17697] = 4.76845694E+00;
  COFD[17698] = -4.06130886E-01;
  COFD[17699] = 1.76992366E-02;
  COFD[17700] = -1.77491255E+01;
  COFD[17701] = 3.64531142E+00;
  COFD[17702] = -1.84302610E-01;
  COFD[17703] = 5.00335366E-03;
  COFD[17704] = -1.82212157E+01;
  COFD[17705] = 4.38781144E+00;
  COFD[17706] = -3.61168991E-01;
  COFD[17707] = 1.59338380E-02;
  COFD[17708] = -1.93018468E+01;
  COFD[17709] = 4.77052462E+00;
  COFD[17710] = -4.06325803E-01;
  COFD[17711] = 1.77045805E-02;
  COFD[17712] = -2.06211753E+01;
  COFD[17713] = 5.10569239E+00;
  COFD[17714] = -4.34343200E-01;
  COFD[17715] = 1.82778928E-02;
  COFD[17716] = -2.07653300E+01;
  COFD[17717] = 5.08393260E+00;
  COFD[17718] = -4.25938990E-01;
  COFD[17719] = 1.76828881E-02;
  COFD[17720] = -1.96005896E+01;
  COFD[17721] = 4.88379708E+00;
  COFD[17722] = -4.19653406E-01;
  COFD[17723] = 1.82262166E-02;
  COFD[17724] = -1.83507928E+01;
  COFD[17725] = 4.44189951E+00;
  COFD[17726] = -3.67842227E-01;
  COFD[17727] = 1.62093788E-02;
  COFD[17728] = -1.86938087E+01;
  COFD[17729] = 3.93133269E+00;
  COFD[17730] = -2.27917775E-01;
  COFD[17731] = 7.12220842E-03;
  COFD[17732] = -1.87057013E+01;
  COFD[17733] = 3.93133269E+00;
  COFD[17734] = -2.27917775E-01;
  COFD[17735] = 7.12220842E-03;
  COFD[17736] = -1.99188791E+01;
  COFD[17737] = 5.03178087E+00;
  COFD[17738] = -4.33314055E-01;
  COFD[17739] = 1.85881203E-02;
  COFD[17740] = -2.07592038E+01;
  COFD[17741] = 5.08393260E+00;
  COFD[17742] = -4.25938990E-01;
  COFD[17743] = 1.76828881E-02;
  COFD[17744] = -2.07592038E+01;
  COFD[17745] = 5.08393260E+00;
  COFD[17746] = -4.25938990E-01;
  COFD[17747] = 1.76828881E-02;
  COFD[17748] = -2.07592038E+01;
  COFD[17749] = 5.08393260E+00;
  COFD[17750] = -4.25938990E-01;
  COFD[17751] = 1.76828881E-02;
  COFD[17752] = -2.07527386E+01;
  COFD[17753] = 5.08393260E+00;
  COFD[17754] = -4.25938990E-01;
  COFD[17755] = 1.76828881E-02;
  COFD[17756] = -1.92799470E+01;
  COFD[17757] = 4.77052462E+00;
  COFD[17758] = -4.06325803E-01;
  COFD[17759] = 1.77045805E-02;
  COFD[17760] = -1.99989150E+01;
  COFD[17761] = 4.99640615E+00;
  COFD[17762] = -4.31162359E-01;
  COFD[17763] = 1.85964996E-02;
  COFD[17764] = -2.10828360E+01;
  COFD[17765] = 5.05791374E+00;
  COFD[17766] = -4.17418303E-01;
  COFD[17767] = 1.71036721E-02;
  COFD[17768] = -2.10890707E+01;
  COFD[17769] = 5.05791374E+00;
  COFD[17770] = -4.17418303E-01;
  COFD[17771] = 1.71036721E-02;
  COFD[17772] = -1.99957422E+01;
  COFD[17773] = 4.50165765E+00;
  COFD[17774] = -3.19414908E-01;
  COFD[17775] = 1.17986762E-02;
  COFD[17776] = -2.00019861E+01;
  COFD[17777] = 4.50165765E+00;
  COFD[17778] = -3.19414908E-01;
  COFD[17779] = 1.17986762E-02;
  COFD[17780] = -1.88624634E+01;
  COFD[17781] = 4.10444481E+00;
  COFD[17782] = -2.51736860E-01;
  COFD[17783] = 8.25061585E-03;
  COFD[17784] = -1.81656564E+01;
  COFD[17785] = 4.52327527E+00;
  COFD[17786] = -3.78029305E-01;
  COFD[17787] = 1.66365566E-02;
  COFD[17788] = -1.99815105E+01;
  COFD[17789] = 4.99582893E+00;
  COFD[17790] = -4.31116007E-01;
  COFD[17791] = 1.85956804E-02;
  COFD[17792] = -2.00433586E+01;
  COFD[17793] = 4.61896914E+00;
  COFD[17794] = -3.43811890E-01;
  COFD[17795] = 1.32423741E-02;
  COFD[17796] = -2.01595963E+01;
  COFD[17797] = 4.61896914E+00;
  COFD[17798] = -3.43811890E-01;
  COFD[17799] = 1.32423741E-02;
  COFD[17800] = -2.02276322E+01;
  COFD[17801] = 4.61896914E+00;
  COFD[17802] = -3.43811890E-01;
  COFD[17803] = 1.32423741E-02;
  COFD[17804] = -2.04757807E+01;
  COFD[17805] = 4.98699671E+00;
  COFD[17806] = -4.30386967E-01;
  COFD[17807] = 1.85815474E-02;
  COFD[17808] = -2.00342873E+01;
  COFD[17809] = 4.61896914E+00;
  COFD[17810] = -3.43811890E-01;
  COFD[17811] = 1.32423741E-02;
  COFD[17812] = -2.01547288E+01;
  COFD[17813] = 4.61896914E+00;
  COFD[17814] = -3.43811890E-01;
  COFD[17815] = 1.32423741E-02;
  COFD[17816] = -2.01162501E+01;
  COFD[17817] = 4.91653527E+00;
  COFD[17818] = -4.23300566E-01;
  COFD[17819] = 1.83595701E-02;
  COFD[17820] = -2.00248218E+01;
  COFD[17821] = 4.61896914E+00;
  COFD[17822] = -3.43811890E-01;
  COFD[17823] = 1.32423741E-02;
  COFD[17824] = -1.96116587E+01;
  COFD[17825] = 4.79875034E+00;
  COFD[17826] = -4.09672668E-01;
  COFD[17827] = 1.78367407E-02;
  COFD[17828] = -1.90584499E+01;
  COFD[17829] = 4.69223232E+00;
  COFD[17830] = -3.98170006E-01;
  COFD[17831] = 1.74358537E-02;
  COFD[17832] = -2.09616963E+01;
  COFD[17833] = 4.84325747E+00;
  COFD[17834] = -3.76657219E-01;
  COFD[17835] = 1.48093055E-02;
  COFD[17836] = -2.09104401E+01;
  COFD[17837] = 4.84325747E+00;
  COFD[17838] = -3.76657219E-01;
  COFD[17839] = 1.48093055E-02;
  COFD[17840] = -2.08347935E+01;
  COFD[17841] = 4.84325747E+00;
  COFD[17842] = -3.76657219E-01;
  COFD[17843] = 1.48093055E-02;
  COFD[17844] = -1.64461172E+01;
  COFD[17845] = 2.69277644E+00;
  COFD[17846] = -3.69311652E-02;
  COFD[17847] = -2.36590601E-03;
  COFD[17848] = -2.10828360E+01;
  COFD[17849] = 5.05791374E+00;
  COFD[17850] = -4.17418303E-01;
  COFD[17851] = 1.71036721E-02;
  COFD[17852] = -2.10828360E+01;
  COFD[17853] = 5.05791374E+00;
  COFD[17854] = -4.17418303E-01;
  COFD[17855] = 1.71036721E-02;
  COFD[17856] = -1.30011809E+01;
  COFD[17857] = 2.92231605E+00;
  COFD[17858] = -1.72734446E-01;
  COFD[17859] = 7.83801178E-03;
  COFD[17860] = -1.61162455E+01;
  COFD[17861] = 4.31231349E+00;
  COFD[17862] = -3.51723330E-01;
  COFD[17863] = 1.55380781E-02;
  COFD[17864] = -1.57955084E+01;
  COFD[17865] = 3.64178450E+00;
  COFD[17866] = -2.66740517E-01;
  COFD[17867] = 1.19380786E-02;
  COFD[17868] = -1.71369736E+01;
  COFD[17869] = 3.97361950E+00;
  COFD[17870] = -3.09153622E-01;
  COFD[17871] = 1.37490623E-02;
  COFD[17872] = -1.58201637E+01;
  COFD[17873] = 3.64178450E+00;
  COFD[17874] = -2.66740517E-01;
  COFD[17875] = 1.19380786E-02;
  COFD[17876] = -2.02931481E+01;
  COFD[17877] = 5.06286299E+00;
  COFD[17878] = -4.18465666E-01;
  COFD[17879] = 1.71657272E-02;
  COFD[17880] = -1.71475164E+01;
  COFD[17881] = 3.97361950E+00;
  COFD[17882] = -3.09153622E-01;
  COFD[17883] = 1.37490623E-02;
  COFD[17884] = -1.71576415E+01;
  COFD[17885] = 3.97361950E+00;
  COFD[17886] = -3.09153622E-01;
  COFD[17887] = 1.37490623E-02;
  COFD[17888] = -1.55754407E+01;
  COFD[17889] = 3.55169733E+00;
  COFD[17890] = -2.55531147E-01;
  COFD[17891] = 1.14733967E-02;
  COFD[17892] = -1.57102932E+01;
  COFD[17893] = 3.64178450E+00;
  COFD[17894] = -2.66740517E-01;
  COFD[17895] = 1.19380786E-02;
  COFD[17896] = -1.78105875E+01;
  COFD[17897] = 4.30416353E+00;
  COFD[17898] = -3.50704401E-01;
  COFD[17899] = 1.54954293E-02;
  COFD[17900] = -1.78105875E+01;
  COFD[17901] = 4.30416353E+00;
  COFD[17902] = -3.50704401E-01;
  COFD[17903] = 1.54954293E-02;
  COFD[17904] = -1.78392525E+01;
  COFD[17905] = 4.30416353E+00;
  COFD[17906] = -3.50704401E-01;
  COFD[17907] = 1.54954293E-02;
  COFD[17908] = -1.77909813E+01;
  COFD[17909] = 4.28159618E+00;
  COFD[17910] = -3.47863181E-01;
  COFD[17911] = 1.53756873E-02;
  COFD[17912] = -1.68409089E+01;
  COFD[17913] = 3.86185667E+00;
  COFD[17914] = -2.94819512E-01;
  COFD[17915] = 1.31343598E-02;
  COFD[17916] = -1.97902280E+01;
  COFD[17917] = 4.85273793E+00;
  COFD[17918] = -4.16243506E-01;
  COFD[17919] = 1.81043327E-02;
  COFD[17920] = -2.06845153E+01;
  COFD[17921] = 5.08862941E+00;
  COFD[17922] = -4.26981365E-01;
  COFD[17923] = 1.77459960E-02;
  COFD[17924] = -2.06964737E+01;
  COFD[17925] = 5.08862941E+00;
  COFD[17926] = -4.26981365E-01;
  COFD[17927] = 1.77459960E-02;
  COFD[17928] = -2.06018296E+01;
  COFD[17929] = 5.09392239E+00;
  COFD[17930] = -4.33961627E-01;
  COFD[17931] = 1.83083265E-02;
  COFD[17932] = -2.06018296E+01;
  COFD[17933] = 5.09392239E+00;
  COFD[17934] = -4.33961627E-01;
  COFD[17935] = 1.83083265E-02;
  COFD[17936] = -2.07354142E+01;
  COFD[17937] = 5.10365737E+00;
  COFD[17938] = -4.30315586E-01;
  COFD[17939] = 1.79479253E-02;
  COFD[17940] = -1.92521675E+01;
  COFD[17941] = 4.70932434E+00;
  COFD[17942] = -3.99972299E-01;
  COFD[17943] = 1.74964368E-02;
  COFD[17944] = -1.92665773E+01;
  COFD[17945] = 4.70932434E+00;
  COFD[17946] = -3.99972299E-01;
  COFD[17947] = 1.74964368E-02;
  COFD[17948] = -1.92802935E+01;
  COFD[17949] = 4.70932434E+00;
  COFD[17950] = -3.99972299E-01;
  COFD[17951] = 1.74964368E-02;
  COFD[17952] = -2.00472137E+01;
  COFD[17953] = 4.96578478E+00;
  COFD[17954] = -4.28347984E-01;
  COFD[17955] = 1.85229087E-02;
  COFD[17956] = -1.98739970E+01;
  COFD[17957] = 4.88242120E+00;
  COFD[17958] = -4.19502166E-01;
  COFD[17959] = 1.82208019E-02;
  COFD[17960] = -1.98859323E+01;
  COFD[17961] = 4.88242120E+00;
  COFD[17962] = -4.19502166E-01;
  COFD[17963] = 1.82208019E-02;
  COFD[17964] = -1.79907687E+01;
  COFD[17965] = 4.35286258E+00;
  COFD[17966] = -3.56807680E-01;
  COFD[17967] = 1.57515479E-02;
  COFD[17968] = -2.08364818E+01;
  COFD[17969] = 5.10729990E+00;
  COFD[17970] = -4.34338922E-01;
  COFD[17971] = 1.82689512E-02;
  COFD[17972] = -2.08364818E+01;
  COFD[17973] = 5.10729990E+00;
  COFD[17974] = -4.34338922E-01;
  COFD[17975] = 1.82689512E-02;
  COFD[17976] = -1.56401388E+01;
  COFD[17977] = 3.55169733E+00;
  COFD[17978] = -2.55531147E-01;
  COFD[17979] = 1.14733967E-02;
  COFD[17980] = -1.57411013E+01;
  COFD[17981] = 3.64178450E+00;
  COFD[17982] = -2.66740517E-01;
  COFD[17983] = 1.19380786E-02;
  COFD[17984] = -1.57676263E+01;
  COFD[17985] = 3.64178450E+00;
  COFD[17986] = -2.66740517E-01;
  COFD[17987] = 1.19380786E-02;
  COFD[17988] = -2.03138919E+01;
  COFD[17989] = 5.10432124E+00;
  COFD[17990] = -4.30469744E-01;
  COFD[17991] = 1.79574262E-02;
  COFD[17992] = -1.60483994E+01;
  COFD[17993] = 3.55169733E+00;
  COFD[17994] = -2.55531147E-01;
  COFD[17995] = 1.14733967E-02;
  COFD[17996] = -1.68404410E+01;
  COFD[17997] = 3.85546414E+00;
  COFD[17998] = -2.94015716E-01;
  COFD[17999] = 1.31006433E-02;
  COFD[18000] = -1.92076864E+01;
  COFD[18001] = 4.67738802E+00;
  COFD[18002] = -3.96546502E-01;
  COFD[18003] = 1.73781767E-02;
  COFD[18004] = -1.96314659E+01;
  COFD[18005] = 4.79046117E+00;
  COFD[18006] = -4.08654983E-01;
  COFD[18007] = 1.77949016E-02;
  COFD[18008] = -1.74094463E+01;
  COFD[18009] = 4.07672614E+00;
  COFD[18010] = -3.22422553E-01;
  COFD[18011] = 1.43202018E-02;
  COFD[18012] = -1.61359016E+01;
  COFD[18013] = 3.59253470E+00;
  COFD[18014] = -2.60654943E-01;
  COFD[18015] = 1.16877425E-02;
  COFD[18016] = -2.07230317E+01;
  COFD[18017] = 5.06517206E+00;
  COFD[18018] = -4.19013181E-01;
  COFD[18019] = 1.71996247E-02;
  COFD[18020] = -2.07361202E+01;
  COFD[18021] = 5.06517206E+00;
  COFD[18022] = -4.19013181E-01;
  COFD[18023] = 1.71996247E-02;
  COFD[18024] = -1.79907993E+01;
  COFD[18025] = 4.35286258E+00;
  COFD[18026] = -3.56807680E-01;
  COFD[18027] = 1.57515479E-02;
  COFD[18028] = -1.96245042E+01;
  COFD[18029] = 4.79046117E+00;
  COFD[18030] = -4.08654983E-01;
  COFD[18031] = 1.77949016E-02;
  COFD[18032] = -1.96245042E+01;
  COFD[18033] = 4.79046117E+00;
  COFD[18034] = -4.08654983E-01;
  COFD[18035] = 1.77949016E-02;
  COFD[18036] = -1.96245042E+01;
  COFD[18037] = 4.79046117E+00;
  COFD[18038] = -4.08654983E-01;
  COFD[18039] = 1.77949016E-02;
  COFD[18040] = -1.96171697E+01;
  COFD[18041] = 4.79046117E+00;
  COFD[18042] = -4.08654983E-01;
  COFD[18043] = 1.77949016E-02;
  COFD[18044] = -1.68162564E+01;
  COFD[18045] = 3.85546414E+00;
  COFD[18046] = -2.94015716E-01;
  COFD[18047] = 1.31006433E-02;
  COFD[18048] = -1.78962062E+01;
  COFD[18049] = 4.23696189E+00;
  COFD[18050] = -3.42236218E-01;
  COFD[18051] = 1.51383324E-02;
  COFD[18052] = -2.03056801E+01;
  COFD[18053] = 4.93122634E+00;
  COFD[18054] = -4.24887811E-01;
  COFD[18055] = 1.84152882E-02;
  COFD[18056] = -2.03127660E+01;
  COFD[18057] = 4.93122634E+00;
  COFD[18058] = -4.24887811E-01;
  COFD[18059] = 1.84152882E-02;
  COFD[18060] = -2.08438114E+01;
  COFD[18061] = 5.10729990E+00;
  COFD[18062] = -4.34338922E-01;
  COFD[18063] = 1.82689512E-02;
  COFD[18064] = -2.08509073E+01;
  COFD[18065] = 5.10729990E+00;
  COFD[18066] = -4.34338922E-01;
  COFD[18067] = 1.82689512E-02;
  COFD[18068] = -1.99860977E+01;
  COFD[18069] = 5.03464955E+00;
  COFD[18070] = -4.33205957E-01;
  COFD[18071] = 1.85632196E-02;
  COFD[18072] = -1.58640844E+01;
  COFD[18073] = 3.64178450E+00;
  COFD[18074] = -2.66740517E-01;
  COFD[18075] = 1.19380786E-02;
  COFD[18076] = -1.76264024E+01;
  COFD[18077] = 4.14808486E+00;
  COFD[18078] = -3.31235328E-01;
  COFD[18079] = 1.46835647E-02;
  COFD[18080] = -1.99901344E+01;
  COFD[18081] = 4.91653527E+00;
  COFD[18082] = -4.23300566E-01;
  COFD[18083] = 1.83595701E-02;
  COFD[18084] = -2.01218514E+01;
  COFD[18085] = 4.91653527E+00;
  COFD[18086] = -4.23300566E-01;
  COFD[18087] = 1.83595701E-02;
  COFD[18088] = -2.02010587E+01;
  COFD[18089] = 4.91653527E+00;
  COFD[18090] = -4.23300566E-01;
  COFD[18091] = 1.83595701E-02;
  COFD[18092] = -1.83693335E+01;
  COFD[18093] = 4.21498730E+00;
  COFD[18094] = -3.39484602E-01;
  COFD[18095] = 1.50231356E-02;
  COFD[18096] = -1.99800171E+01;
  COFD[18097] = 4.91653527E+00;
  COFD[18098] = -4.23300566E-01;
  COFD[18099] = 1.83595701E-02;
  COFD[18100] = -2.01162501E+01;
  COFD[18101] = 4.91653527E+00;
  COFD[18102] = -4.23300566E-01;
  COFD[18103] = 1.83595701E-02;
  COFD[18104] = -1.79533158E+01;
  COFD[18105] = 4.11454083E+00;
  COFD[18106] = -3.27170772E-01;
  COFD[18107] = 1.45195248E-02;
  COFD[18108] = -1.99694826E+01;
  COFD[18109] = 4.91653527E+00;
  COFD[18110] = -4.23300566E-01;
  COFD[18111] = 1.83595701E-02;
  COFD[18112] = -1.74262002E+01;
  COFD[18113] = 3.98071083E+00;
  COFD[18114] = -3.10068306E-01;
  COFD[18115] = 1.37885234E-02;
  COFD[18116] = -1.67439694E+01;
  COFD[18117] = 3.81386703E+00;
  COFD[18118] = -2.88699500E-01;
  COFD[18119] = 1.28737366E-02;
  COFD[18120] = -2.09456726E+01;
  COFD[18121] = 5.05326123E+00;
  COFD[18122] = -4.33930407E-01;
  COFD[18123] = 1.85244365E-02;
  COFD[18124] = -2.08850230E+01;
  COFD[18125] = 5.05326123E+00;
  COFD[18126] = -4.33930407E-01;
  COFD[18127] = 1.85244365E-02;
  COFD[18128] = -2.07974174E+01;
  COFD[18129] = 5.05326123E+00;
  COFD[18130] = -4.33930407E-01;
  COFD[18131] = 1.85244365E-02;
  COFD[18132] = -2.03910349E+01;
  COFD[18133] = 4.64627808E+00;
  COFD[18134] = -3.43644443E-01;
  COFD[18135] = 1.30718567E-02;
  COFD[18136] = -2.03056801E+01;
  COFD[18137] = 4.93122634E+00;
  COFD[18138] = -4.24887811E-01;
  COFD[18139] = 1.84152882E-02;
  COFD[18140] = -2.03056801E+01;
  COFD[18141] = 4.93122634E+00;
  COFD[18142] = -4.24887811E-01;
  COFD[18143] = 1.84152882E-02;
  COFD[18144] = -1.51998802E+01;
  COFD[18145] = 3.77717901E+00;
  COFD[18146] = -2.83987333E-01;
  COFD[18147] = 1.26715852E-02;
  COFD[18148] = -1.81639113E+01;
  COFD[18149] = 5.02489109E+00;
  COFD[18150] = -4.33408488E-01;
  COFD[18151] = 1.86336151E-02;
  COFD[18152] = -1.80353919E+01;
  COFD[18153] = 4.52327527E+00;
  COFD[18154] = -3.78029305E-01;
  COFD[18155] = 1.66365566E-02;
  COFD[18156] = -1.94867403E+01;
  COFD[18157] = 4.87794887E+00;
  COFD[18158] = -4.19010211E-01;
  COFD[18159] = 1.82031734E-02;
  COFD[18160] = -1.80555535E+01;
  COFD[18161] = 4.52327527E+00;
  COFD[18162] = -3.78029305E-01;
  COFD[18163] = 1.66365566E-02;
  COFD[18164] = -1.63291826E+01;
  COFD[18165] = 2.95214121E+00;
  COFD[18166] = -7.24781700E-02;
  COFD[18167] = -6.81785200E-04;
  COFD[18168] = -1.92381726E+01;
  COFD[18169] = 4.79132523E+00;
  COFD[18170] = -4.08760786E-01;
  COFD[18171] = 1.77992375E-02;
  COFD[18172] = -1.92455224E+01;
  COFD[18173] = 4.79132523E+00;
  COFD[18174] = -4.08760786E-01;
  COFD[18175] = 1.77992375E-02;
  COFD[18176] = -1.77155969E+01;
  COFD[18177] = 4.38781144E+00;
  COFD[18178] = -3.61168991E-01;
  COFD[18179] = 1.59338380E-02;
  COFD[18180] = -1.79643695E+01;
  COFD[18181] = 4.52327527E+00;
  COFD[18182] = -3.78029305E-01;
  COFD[18183] = 1.66365566E-02;
  COFD[18184] = -1.98049664E+01;
  COFD[18185] = 5.02339094E+00;
  COFD[18186] = -4.33412034E-01;
  COFD[18187] = 1.86420804E-02;
  COFD[18188] = -1.98049664E+01;
  COFD[18189] = 5.02339094E+00;
  COFD[18190] = -4.33412034E-01;
  COFD[18191] = 1.86420804E-02;
  COFD[18192] = -1.98288370E+01;
  COFD[18193] = 5.02339094E+00;
  COFD[18194] = -4.33412034E-01;
  COFD[18195] = 1.86420804E-02;
  COFD[18196] = -1.99271448E+01;
  COFD[18197] = 5.03812529E+00;
  COFD[18198] = -4.33377026E-01;
  COFD[18199] = 1.85590211E-02;
  COFD[18200] = -1.92246408E+01;
  COFD[18201] = 4.78116946E+00;
  COFD[18202] = -4.07518289E-01;
  COFD[18203] = 1.77483795E-02;
  COFD[18204] = -2.06863728E+01;
  COFD[18205] = 5.06720119E+00;
  COFD[18206] = -4.19613343E-01;
  COFD[18207] = 1.72393547E-02;
  COFD[18208] = -1.92405751E+01;
  COFD[18209] = 4.25726916E+00;
  COFD[18210] = -2.79522202E-01;
  COFD[18211] = 9.73775709E-03;
  COFD[18212] = -1.92494588E+01;
  COFD[18213] = 4.25726916E+00;
  COFD[18214] = -2.79522202E-01;
  COFD[18215] = 9.73775709E-03;
  COFD[18216] = -1.86673574E+01;
  COFD[18217] = 3.97908192E+00;
  COFD[18218] = -2.38620931E-01;
  COFD[18219] = 7.78870409E-03;
  COFD[18220] = -1.86673574E+01;
  COFD[18221] = 3.97908192E+00;
  COFD[18222] = -2.38620931E-01;
  COFD[18223] = 7.78870409E-03;
  COFD[18224] = -1.94184342E+01;
  COFD[18225] = 4.33226128E+00;
  COFD[18226] = -2.91490888E-01;
  COFD[18227] = 1.03476070E-02;
  COFD[18228] = -2.05502820E+01;
  COFD[18229] = 5.11167016E+00;
  COFD[18230] = -4.33651168E-01;
  COFD[18231] = 1.81871961E-02;
  COFD[18232] = -2.05612653E+01;
  COFD[18233] = 5.11167016E+00;
  COFD[18234] = -4.33651168E-01;
  COFD[18235] = 1.81871961E-02;
  COFD[18236] = -2.05716495E+01;
  COFD[18237] = 5.11167016E+00;
  COFD[18238] = -4.33651168E-01;
  COFD[18239] = 1.81871961E-02;
  COFD[18240] = -2.05727920E+01;
  COFD[18241] = 5.01615372E+00;
  COFD[18242] = -4.09499645E-01;
  COFD[18243] = 1.66570727E-02;
  COFD[18244] = -2.06981423E+01;
  COFD[18245] = 5.07093412E+00;
  COFD[18246] = -4.21231152E-01;
  COFD[18247] = 1.73552654E-02;
  COFD[18248] = -2.07070064E+01;
  COFD[18249] = 5.07093412E+00;
  COFD[18250] = -4.21231152E-01;
  COFD[18251] = 1.73552654E-02;
  COFD[18252] = -1.98015145E+01;
  COFD[18253] = 5.03178087E+00;
  COFD[18254] = -4.33314055E-01;
  COFD[18255] = 1.85881203E-02;
  COFD[18256] = -1.98705370E+01;
  COFD[18257] = 4.50165765E+00;
  COFD[18258] = -3.19414908E-01;
  COFD[18259] = 1.17986762E-02;
  COFD[18260] = -1.98705370E+01;
  COFD[18261] = 4.50165765E+00;
  COFD[18262] = -3.19414908E-01;
  COFD[18263] = 1.17986762E-02;
  COFD[18264] = -1.77702956E+01;
  COFD[18265] = 4.38781144E+00;
  COFD[18266] = -3.61168991E-01;
  COFD[18267] = 1.59338380E-02;
  COFD[18268] = -1.79846934E+01;
  COFD[18269] = 4.52327527E+00;
  COFD[18270] = -3.78029305E-01;
  COFD[18271] = 1.66365566E-02;
  COFD[18272] = -1.87577423E+01;
  COFD[18273] = 4.76845694E+00;
  COFD[18274] = -4.06130886E-01;
  COFD[18275] = 1.76992366E-02;
  COFD[18276] = -1.76798916E+01;
  COFD[18277] = 3.64531142E+00;
  COFD[18278] = -1.84302610E-01;
  COFD[18279] = 5.00335366E-03;
  COFD[18280] = -1.81237775E+01;
  COFD[18281] = 4.38781144E+00;
  COFD[18282] = -3.61168991E-01;
  COFD[18283] = 1.59338380E-02;
  COFD[18284] = -1.92025222E+01;
  COFD[18285] = 4.77052462E+00;
  COFD[18286] = -4.06325803E-01;
  COFD[18287] = 1.77045805E-02;
  COFD[18288] = -2.04972121E+01;
  COFD[18289] = 5.10569239E+00;
  COFD[18290] = -4.34343200E-01;
  COFD[18291] = 1.82778928E-02;
  COFD[18292] = -2.06439254E+01;
  COFD[18293] = 5.08393260E+00;
  COFD[18294] = -4.25938990E-01;
  COFD[18295] = 1.76828881E-02;
  COFD[18296] = -1.94993865E+01;
  COFD[18297] = 4.88379708E+00;
  COFD[18298] = -4.19653406E-01;
  COFD[18299] = 1.82262166E-02;
  COFD[18300] = -1.82594604E+01;
  COFD[18301] = 4.44189951E+00;
  COFD[18302] = -3.67842227E-01;
  COFD[18303] = 1.62093788E-02;
  COFD[18304] = -1.86003666E+01;
  COFD[18305] = 3.93133269E+00;
  COFD[18306] = -2.27917775E-01;
  COFD[18307] = 7.12220842E-03;
  COFD[18308] = -1.86102119E+01;
  COFD[18309] = 3.93133269E+00;
  COFD[18310] = -2.27917775E-01;
  COFD[18311] = 7.12220842E-03;
  COFD[18312] = -1.98015358E+01;
  COFD[18313] = 5.03178087E+00;
  COFD[18314] = -4.33314055E-01;
  COFD[18315] = 1.85881203E-02;
  COFD[18316] = -2.06391136E+01;
  COFD[18317] = 5.08393260E+00;
  COFD[18318] = -4.25938990E-01;
  COFD[18319] = 1.76828881E-02;
  COFD[18320] = -2.06391136E+01;
  COFD[18321] = 5.08393260E+00;
  COFD[18322] = -4.25938990E-01;
  COFD[18323] = 1.76828881E-02;
  COFD[18324] = -2.06391136E+01;
  COFD[18325] = 5.08393260E+00;
  COFD[18326] = -4.25938990E-01;
  COFD[18327] = 1.76828881E-02;
  COFD[18328] = -2.06340218E+01;
  COFD[18329] = 5.08393260E+00;
  COFD[18330] = -4.25938990E-01;
  COFD[18331] = 1.76828881E-02;
  COFD[18332] = -1.91844977E+01;
  COFD[18333] = 4.77052462E+00;
  COFD[18334] = -4.06325803E-01;
  COFD[18335] = 1.77045805E-02;
  COFD[18336] = -1.98831222E+01;
  COFD[18337] = 4.99640615E+00;
  COFD[18338] = -4.31162359E-01;
  COFD[18339] = 1.85964996E-02;
  COFD[18340] = -2.09626597E+01;
  COFD[18341] = 5.05791374E+00;
  COFD[18342] = -4.17418303E-01;
  COFD[18343] = 1.71036721E-02;
  COFD[18344] = -2.09675558E+01;
  COFD[18345] = 5.05791374E+00;
  COFD[18346] = -4.17418303E-01;
  COFD[18347] = 1.71036721E-02;
  COFD[18348] = -1.98756251E+01;
  COFD[18349] = 4.50165765E+00;
  COFD[18350] = -3.19414908E-01;
  COFD[18351] = 1.17986762E-02;
  COFD[18352] = -1.98805290E+01;
  COFD[18353] = 4.50165765E+00;
  COFD[18354] = -3.19414908E-01;
  COFD[18355] = 1.17986762E-02;
  COFD[18356] = -1.87851811E+01;
  COFD[18357] = 4.10444481E+00;
  COFD[18358] = -2.51736860E-01;
  COFD[18359] = 8.25061585E-03;
  COFD[18360] = -1.80910098E+01;
  COFD[18361] = 4.52327527E+00;
  COFD[18362] = -3.78029305E-01;
  COFD[18363] = 1.66365566E-02;
  COFD[18364] = -1.98686225E+01;
  COFD[18365] = 4.99582893E+00;
  COFD[18366] = -4.31116007E-01;
  COFD[18367] = 1.85956804E-02;
  COFD[18368] = -1.99368335E+01;
  COFD[18369] = 4.61896914E+00;
  COFD[18370] = -3.43811890E-01;
  COFD[18371] = 1.32423741E-02;
  COFD[18372] = -2.00285715E+01;
  COFD[18373] = 4.61896914E+00;
  COFD[18374] = -3.43811890E-01;
  COFD[18375] = 1.32423741E-02;
  COFD[18376] = -2.00800822E+01;
  COFD[18377] = 4.61896914E+00;
  COFD[18378] = -3.43811890E-01;
  COFD[18379] = 1.32423741E-02;
  COFD[18380] = -2.03163255E+01;
  COFD[18381] = 4.98699671E+00;
  COFD[18382] = -4.30386967E-01;
  COFD[18383] = 1.85815474E-02;
  COFD[18384] = -1.99294901E+01;
  COFD[18385] = 4.61896914E+00;
  COFD[18386] = -3.43811890E-01;
  COFD[18387] = 1.32423741E-02;
  COFD[18388] = -2.00248218E+01;
  COFD[18389] = 4.61896914E+00;
  COFD[18390] = -3.43811890E-01;
  COFD[18391] = 1.32423741E-02;
  COFD[18392] = -1.99694826E+01;
  COFD[18393] = 4.91653527E+00;
  COFD[18394] = -4.23300566E-01;
  COFD[18395] = 1.83595701E-02;
  COFD[18396] = -1.99218008E+01;
  COFD[18397] = 4.61896914E+00;
  COFD[18398] = -3.43811890E-01;
  COFD[18399] = 1.32423741E-02;
  COFD[18400] = -1.94828946E+01;
  COFD[18401] = 4.79875034E+00;
  COFD[18402] = -4.09672668E-01;
  COFD[18403] = 1.78367407E-02;
  COFD[18404] = -1.89572552E+01;
  COFD[18405] = 4.69223232E+00;
  COFD[18406] = -3.98170006E-01;
  COFD[18407] = 1.74358537E-02;
  COFD[18408] = -2.08039894E+01;
  COFD[18409] = 4.84325747E+00;
  COFD[18410] = -3.76657219E-01;
  COFD[18411] = 1.48093055E-02;
  COFD[18412] = -2.07660885E+01;
  COFD[18413] = 4.84325747E+00;
  COFD[18414] = -3.76657219E-01;
  COFD[18415] = 1.48093055E-02;
  COFD[18416] = -2.07083635E+01;
  COFD[18417] = 4.84325747E+00;
  COFD[18418] = -3.76657219E-01;
  COFD[18419] = 1.48093055E-02;
  COFD[18420] = -1.63209093E+01;
  COFD[18421] = 2.69277644E+00;
  COFD[18422] = -3.69311652E-02;
  COFD[18423] = -2.36590601E-03;
  COFD[18424] = -2.09626597E+01;
  COFD[18425] = 5.05791374E+00;
  COFD[18426] = -4.17418303E-01;
  COFD[18427] = 1.71036721E-02;
  COFD[18428] = -2.09626597E+01;
  COFD[18429] = 5.05791374E+00;
  COFD[18430] = -4.17418303E-01;
  COFD[18431] = 1.71036721E-02;
  COFD[18432] = -1.26417046E+01;
  COFD[18433] = 2.82306442E+00;
  COFD[18434] = -1.59491209E-01;
  COFD[18435] = 7.24835519E-03;
  COFD[18436] = -1.56227048E+01;
  COFD[18437] = 4.17274760E+00;
  COFD[18438] = -3.34174929E-01;
  COFD[18439] = 1.47999548E-02;
  COFD[18440] = -1.54116300E+01;
  COFD[18441] = 3.55175721E+00;
  COFD[18442] = -2.55538703E-01;
  COFD[18443] = 1.14737147E-02;
  COFD[18444] = -1.66181730E+01;
  COFD[18445] = 3.83453701E+00;
  COFD[18446] = -2.91336346E-01;
  COFD[18447] = 1.29860457E-02;
  COFD[18448] = -1.54346015E+01;
  COFD[18449] = 3.55175721E+00;
  COFD[18450] = -2.55538703E-01;
  COFD[18451] = 1.14737147E-02;
  COFD[18452] = -2.00964701E+01;
  COFD[18453] = 5.07793336E+00;
  COFD[18454] = -4.24547067E-01;
  COFD[18455] = 1.75972328E-02;
  COFD[18456] = -1.66275725E+01;
  COFD[18457] = 3.83453701E+00;
  COFD[18458] = -2.91336346E-01;
  COFD[18459] = 1.29860457E-02;
  COFD[18460] = -1.66365792E+01;
  COFD[18461] = 3.83453701E+00;
  COFD[18462] = -2.91336346E-01;
  COFD[18463] = 1.29860457E-02;
  COFD[18464] = -1.51582518E+01;
  COFD[18465] = 3.44020470E+00;
  COFD[18466] = -2.41162835E-01;
  COFD[18467] = 1.08552213E-02;
  COFD[18468] = -1.53316706E+01;
  COFD[18469] = 3.55175721E+00;
  COFD[18470] = -2.55538703E-01;
  COFD[18471] = 1.14737147E-02;
  COFD[18472] = -1.73165844E+01;
  COFD[18473] = 4.16605006E+00;
  COFD[18474] = -3.33356903E-01;
  COFD[18475] = 1.47666333E-02;
  COFD[18476] = -1.73165844E+01;
  COFD[18477] = 4.16605006E+00;
  COFD[18478] = -3.33356903E-01;
  COFD[18479] = 1.47666333E-02;
  COFD[18480] = -1.73434734E+01;
  COFD[18481] = 4.16605006E+00;
  COFD[18482] = -3.33356903E-01;
  COFD[18483] = 1.47666333E-02;
  COFD[18484] = -1.73121532E+01;
  COFD[18485] = 4.15162732E+00;
  COFD[18486] = -3.31664012E-01;
  COFD[18487] = 1.47008486E-02;
  COFD[18488] = -1.63355592E+01;
  COFD[18489] = 3.72477337E+00;
  COFD[18490] = -2.77211200E-01;
  COFD[18491] = 1.23788559E-02;
  COFD[18492] = -1.93031424E+01;
  COFD[18493] = 4.74078021E+00;
  COFD[18494] = -4.03369181E-01;
  COFD[18495] = 1.76148003E-02;
  COFD[18496] = -2.05013224E+01;
  COFD[18497] = 5.11082654E+00;
  COFD[18498] = -4.34171448E-01;
  COFD[18499] = 1.82358965E-02;
  COFD[18500] = -2.05120588E+01;
  COFD[18501] = 5.11082654E+00;
  COFD[18502] = -4.34171448E-01;
  COFD[18503] = 1.82358965E-02;
  COFD[18504] = -2.03080801E+01;
  COFD[18505] = 5.06708958E+00;
  COFD[18506] = -4.33980537E-01;
  COFD[18507] = 1.84542582E-02;
  COFD[18508] = -2.03080801E+01;
  COFD[18509] = 5.06708958E+00;
  COFD[18510] = -4.33980537E-01;
  COFD[18511] = 1.84542582E-02;
  COFD[18512] = -2.04991144E+01;
  COFD[18513] = 5.10387649E+00;
  COFD[18514] = -4.34325524E-01;
  COFD[18515] = 1.82860871E-02;
  COFD[18516] = -1.88376184E+01;
  COFD[18517] = 4.61599035E+00;
  COFD[18518] = -3.89528317E-01;
  COFD[18519] = 1.71137649E-02;
  COFD[18520] = -1.88506875E+01;
  COFD[18521] = 4.61599035E+00;
  COFD[18522] = -3.89528317E-01;
  COFD[18523] = 1.71137649E-02;
  COFD[18524] = -1.88630945E+01;
  COFD[18525] = 4.61599035E+00;
  COFD[18526] = -3.89528317E-01;
  COFD[18527] = 1.71137649E-02;
  COFD[18528] = -1.96285019E+01;
  COFD[18529] = 4.87652152E+00;
  COFD[18530] = -4.18854393E-01;
  COFD[18531] = 1.81976518E-02;
  COFD[18532] = -1.93893318E+01;
  COFD[18533] = 4.76282572E+00;
  COFD[18534] = -4.05580830E-01;
  COFD[18535] = 1.76830646E-02;
  COFD[18536] = -1.94000462E+01;
  COFD[18537] = 4.76282572E+00;
  COFD[18538] = -4.05580830E-01;
  COFD[18539] = 1.76830646E-02;
  COFD[18540] = -1.74425467E+01;
  COFD[18541] = 4.21395656E+00;
  COFD[18542] = -3.39355503E-01;
  COFD[18543] = 1.50177298E-02;
  COFD[18544] = -2.05340116E+01;
  COFD[18545] = 5.08109570E+00;
  COFD[18546] = -4.34516901E-01;
  COFD[18547] = 1.84244384E-02;
  COFD[18548] = -2.05340116E+01;
  COFD[18549] = 5.08109570E+00;
  COFD[18550] = -4.34516901E-01;
  COFD[18551] = 1.84244384E-02;
  COFD[18552] = -1.52192806E+01;
  COFD[18553] = 3.44020470E+00;
  COFD[18554] = -2.41162835E-01;
  COFD[18555] = 1.08552213E-02;
  COFD[18556] = -1.53574475E+01;
  COFD[18557] = 3.55175721E+00;
  COFD[18558] = -2.55538703E-01;
  COFD[18559] = 1.14737147E-02;
  COFD[18560] = -1.53822436E+01;
  COFD[18561] = 3.55175721E+00;
  COFD[18562] = -2.55538703E-01;
  COFD[18563] = 1.14737147E-02;
  COFD[18564] = -2.00868499E+01;
  COFD[18565] = 5.10342266E+00;
  COFD[18566] = -4.34318050E-01;
  COFD[18567] = 1.82878761E-02;
  COFD[18568] = -1.56111131E+01;
  COFD[18569] = 3.44020470E+00;
  COFD[18570] = -2.41162835E-01;
  COFD[18571] = 1.08552213E-02;
  COFD[18572] = -1.63325093E+01;
  COFD[18573] = 3.71830365E+00;
  COFD[18574] = -2.76376641E-01;
  COFD[18575] = 1.23428762E-02;
  COFD[18576] = -1.87210023E+01;
  COFD[18577] = 4.56481098E+00;
  COFD[18578] = -3.83274058E-01;
  COFD[18579] = 1.68584426E-02;
  COFD[18580] = -1.92050172E+01;
  COFD[18581] = 4.70407510E+00;
  COFD[18582] = -3.99421025E-01;
  COFD[18583] = 1.74780295E-02;
  COFD[18584] = -1.68837161E+01;
  COFD[18585] = 3.93360092E+00;
  COFD[18586] = -3.03970323E-01;
  COFD[18587] = 1.35244351E-02;
  COFD[18588] = -1.57264250E+01;
  COFD[18589] = 3.49157164E+00;
  COFD[18590] = -2.47843678E-01;
  COFD[18591] = 1.11453576E-02;
  COFD[18592] = -2.05269887E+01;
  COFD[18593] = 5.08023567E+00;
  COFD[18594] = -4.25085989E-01;
  COFD[18595] = 1.76305031E-02;
  COFD[18596] = -2.05387979E+01;
  COFD[18597] = 5.08023567E+00;
  COFD[18598] = -4.25085989E-01;
  COFD[18599] = 1.76305031E-02;
  COFD[18600] = -1.74425735E+01;
  COFD[18601] = 4.21395656E+00;
  COFD[18602] = -3.39355503E-01;
  COFD[18603] = 1.50177298E-02;
  COFD[18604] = -1.91989473E+01;
  COFD[18605] = 4.70407510E+00;
  COFD[18606] = -3.99421025E-01;
  COFD[18607] = 1.74780295E-02;
  COFD[18608] = -1.91989473E+01;
  COFD[18609] = 4.70407510E+00;
  COFD[18610] = -3.99421025E-01;
  COFD[18611] = 1.74780295E-02;
  COFD[18612] = -1.91989473E+01;
  COFD[18613] = 4.70407510E+00;
  COFD[18614] = -3.99421025E-01;
  COFD[18615] = 1.74780295E-02;
  COFD[18616] = -1.91925408E+01;
  COFD[18617] = 4.70407510E+00;
  COFD[18618] = -3.99421025E-01;
  COFD[18619] = 1.74780295E-02;
  COFD[18620] = -1.63107683E+01;
  COFD[18621] = 3.71830365E+00;
  COFD[18622] = -2.76376641E-01;
  COFD[18623] = 1.23428762E-02;
  COFD[18624] = -1.74162810E+01;
  COFD[18625] = 4.12115065E+00;
  COFD[18626] = -3.27987278E-01;
  COFD[18627] = 1.45531939E-02;
  COFD[18628] = -1.98374825E+01;
  COFD[18629] = 4.82316922E+00;
  COFD[18630] = -4.12681790E-01;
  COFD[18631] = 1.79610014E-02;
  COFD[18632] = -1.98436599E+01;
  COFD[18633] = 4.82316922E+00;
  COFD[18634] = -4.12681790E-01;
  COFD[18635] = 1.79610014E-02;
  COFD[18636] = -2.05404137E+01;
  COFD[18637] = 5.08109570E+00;
  COFD[18638] = -4.34516901E-01;
  COFD[18639] = 1.84244384E-02;
  COFD[18640] = -2.05466002E+01;
  COFD[18641] = 5.08109570E+00;
  COFD[18642] = -4.34516901E-01;
  COFD[18643] = 1.84244384E-02;
  COFD[18644] = -1.96777354E+01;
  COFD[18645] = 4.99472973E+00;
  COFD[18646] = -4.31027725E-01;
  COFD[18647] = 1.85941193E-02;
  COFD[18648] = -1.54753250E+01;
  COFD[18649] = 3.55175721E+00;
  COFD[18650] = -2.55538703E-01;
  COFD[18651] = 1.14737147E-02;
  COFD[18652] = -1.71427525E+01;
  COFD[18653] = 4.02800613E+00;
  COFD[18654] = -3.16145179E-01;
  COFD[18655] = 1.40495914E-02;
  COFD[18656] = -1.95012857E+01;
  COFD[18657] = 4.79875034E+00;
  COFD[18658] = -4.09672668E-01;
  COFD[18659] = 1.78367407E-02;
  COFD[18660] = -1.96164775E+01;
  COFD[18661] = 4.79875034E+00;
  COFD[18662] = -4.09672668E-01;
  COFD[18663] = 1.78367407E-02;
  COFD[18664] = -1.96837796E+01;
  COFD[18665] = 4.79875034E+00;
  COFD[18666] = -4.09672668E-01;
  COFD[18667] = 1.78367407E-02;
  COFD[18668] = -1.78828275E+01;
  COFD[18669] = 4.10347428E+00;
  COFD[18670] = -3.25805714E-01;
  COFD[18671] = 1.44633323E-02;
  COFD[18672] = -1.94922863E+01;
  COFD[18673] = 4.79875034E+00;
  COFD[18674] = -4.09672668E-01;
  COFD[18675] = 1.78367407E-02;
  COFD[18676] = -1.96116587E+01;
  COFD[18677] = 4.79875034E+00;
  COFD[18678] = -4.09672668E-01;
  COFD[18679] = 1.78367407E-02;
  COFD[18680] = -1.74262002E+01;
  COFD[18681] = 3.98071083E+00;
  COFD[18682] = -3.10068306E-01;
  COFD[18683] = 1.37885234E-02;
  COFD[18684] = -1.94828946E+01;
  COFD[18685] = 4.79875034E+00;
  COFD[18686] = -4.09672668E-01;
  COFD[18687] = 1.78367407E-02;
  COFD[18688] = -1.68948728E+01;
  COFD[18689] = 3.84115930E+00;
  COFD[18690] = -2.92181429E-01;
  COFD[18691] = 1.30220594E-02;
  COFD[18692] = -1.62487306E+01;
  COFD[18693] = 3.68184736E+00;
  COFD[18694] = -2.71702385E-01;
  COFD[18695] = 1.21427089E-02;
  COFD[18696] = -2.06238676E+01;
  COFD[18697] = 5.02418435E+00;
  COFD[18698] = -4.33420854E-01;
  COFD[18699] = 1.86385183E-02;
  COFD[18700] = -2.05732178E+01;
  COFD[18701] = 5.02418435E+00;
  COFD[18702] = -4.33420854E-01;
  COFD[18703] = 1.86385183E-02;
  COFD[18704] = -2.04983610E+01;
  COFD[18705] = 5.02418435E+00;
  COFD[18706] = -4.33420854E-01;
  COFD[18707] = 1.86385183E-02;
  COFD[18708] = -2.05574917E+01;
  COFD[18709] = 4.83067176E+00;
  COFD[18710] = -3.74443480E-01;
  COFD[18711] = 1.46897257E-02;
  COFD[18712] = -1.98374825E+01;
  COFD[18713] = 4.82316922E+00;
  COFD[18714] = -4.12681790E-01;
  COFD[18715] = 1.79610014E-02;
  COFD[18716] = -1.98374825E+01;
  COFD[18717] = 4.82316922E+00;
  COFD[18718] = -4.12681790E-01;
  COFD[18719] = 1.79610014E-02;
  COFD[18720] = -1.22693309E+01;
  COFD[18721] = 2.72399371E+00;
  COFD[18722] = -1.46297573E-01;
  COFD[18723] = 6.66184541E-03;
  COFD[18724] = -1.51211553E+01;
  COFD[18725] = 4.03577694E+00;
  COFD[18726] = -3.17148637E-01;
  COFD[18727] = 1.40929340E-02;
  COFD[18728] = -1.48772681E+01;
  COFD[18729] = 3.41648755E+00;
  COFD[18730] = -2.38096267E-01;
  COFD[18731] = 1.07229875E-02;
  COFD[18732] = -1.59946081E+01;
  COFD[18733] = 3.67614463E+00;
  COFD[18734] = -2.70973934E-01;
  COFD[18735] = 1.21116433E-02;
  COFD[18736] = -1.48972093E+01;
  COFD[18737] = 3.41648755E+00;
  COFD[18738] = -2.38096267E-01;
  COFD[18739] = 1.07229875E-02;
  COFD[18740] = -1.98798206E+01;
  COFD[18741] = 5.11111188E+00;
  COFD[18742] = -4.34123003E-01;
  COFD[18743] = 1.82302519E-02;
  COFD[18744] = -1.60021803E+01;
  COFD[18745] = 3.67614463E+00;
  COFD[18746] = -2.70973934E-01;
  COFD[18747] = 1.21116433E-02;
  COFD[18748] = -1.60094100E+01;
  COFD[18749] = 3.67614463E+00;
  COFD[18750] = -2.70973934E-01;
  COFD[18751] = 1.21116433E-02;
  COFD[18752] = -1.46023540E+01;
  COFD[18753] = 3.28502534E+00;
  COFD[18754] = -2.20705925E-01;
  COFD[18755] = 9.95522352E-03;
  COFD[18756] = -1.48069556E+01;
  COFD[18757] = 3.41648755E+00;
  COFD[18758] = -2.38096267E-01;
  COFD[18759] = 1.07229875E-02;
  COFD[18760] = -1.67805410E+01;
  COFD[18761] = 4.02700875E+00;
  COFD[18762] = -3.16016739E-01;
  COFD[18763] = 1.40440606E-02;
  COFD[18764] = -1.67805410E+01;
  COFD[18765] = 4.02700875E+00;
  COFD[18766] = -3.16016739E-01;
  COFD[18767] = 1.40440606E-02;
  COFD[18768] = -1.68041719E+01;
  COFD[18769] = 4.02700875E+00;
  COFD[18770] = -3.16016739E-01;
  COFD[18771] = 1.40440606E-02;
  COFD[18772] = -1.67518644E+01;
  COFD[18773] = 4.00481774E+00;
  COFD[18774] = -3.13175426E-01;
  COFD[18775] = 1.39224756E-02;
  COFD[18776] = -1.58218820E+01;
  COFD[18777] = 3.60772565E+00;
  COFD[18778] = -2.62565908E-01;
  COFD[18779] = 1.17679273E-02;
  COFD[18780] = -1.87545018E+01;
  COFD[18781] = 4.63262266E+00;
  COFD[18782] = -3.91444989E-01;
  COFD[18783] = 1.71866836E-02;
  COFD[18784] = -2.01269463E+01;
  COFD[18785] = 5.07973786E+00;
  COFD[18786] = -4.34449751E-01;
  COFD[18787] = 1.84260559E-02;
  COFD[18788] = -2.01356935E+01;
  COFD[18789] = 5.07973786E+00;
  COFD[18790] = -4.34449751E-01;
  COFD[18791] = 1.84260559E-02;
  COFD[18792] = -1.99284965E+01;
  COFD[18793] = 5.03169684E+00;
  COFD[18794] = -4.33317477E-01;
  COFD[18795] = 1.85888719E-02;
  COFD[18796] = -1.99284965E+01;
  COFD[18797] = 5.03169684E+00;
  COFD[18798] = -4.33317477E-01;
  COFD[18799] = 1.85888719E-02;
  COFD[18800] = -2.01125302E+01;
  COFD[18801] = 5.06928576E+00;
  COFD[18802] = -4.34051547E-01;
  COFD[18803] = 1.84485225E-02;
  COFD[18804] = -1.81853254E+01;
  COFD[18805] = 4.44398741E+00;
  COFD[18806] = -3.68098793E-01;
  COFD[18807] = 1.62199280E-02;
  COFD[18808] = -1.81961526E+01;
  COFD[18809] = 4.44398741E+00;
  COFD[18810] = -3.68098793E-01;
  COFD[18811] = 1.62199280E-02;
  COFD[18812] = -1.82063860E+01;
  COFD[18813] = 4.44398741E+00;
  COFD[18814] = -3.68098793E-01;
  COFD[18815] = 1.62199280E-02;
  COFD[18816] = -1.90447873E+01;
  COFD[18817] = 4.74328938E+00;
  COFD[18818] = -4.03622122E-01;
  COFD[18819] = 1.76226730E-02;
  COFD[18820] = -1.88883157E+01;
  COFD[18821] = 4.66285635E+00;
  COFD[18822] = -3.94923282E-01;
  COFD[18823] = 1.73187839E-02;
  COFD[18824] = -1.88970436E+01;
  COFD[18825] = 4.66285635E+00;
  COFD[18826] = -3.94923282E-01;
  COFD[18827] = 1.73187839E-02;
  COFD[18828] = -1.68322727E+01;
  COFD[18829] = 4.07749999E+00;
  COFD[18830] = -3.22521584E-01;
  COFD[18831] = 1.43244419E-02;
  COFD[18832] = -2.01352847E+01;
  COFD[18833] = 5.04412150E+00;
  COFD[18834] = -4.33656353E-01;
  COFD[18835] = 1.85504386E-02;
  COFD[18836] = -2.01352847E+01;
  COFD[18837] = 5.04412150E+00;
  COFD[18838] = -4.33656353E-01;
  COFD[18839] = 1.85504386E-02;
  COFD[18840] = -1.46565449E+01;
  COFD[18841] = 3.28502534E+00;
  COFD[18842] = -2.20705925E-01;
  COFD[18843] = 9.95522352E-03;
  COFD[18844] = -1.48245359E+01;
  COFD[18845] = 3.41648755E+00;
  COFD[18846] = -2.38096267E-01;
  COFD[18847] = 1.07229875E-02;
  COFD[18848] = -1.48461911E+01;
  COFD[18849] = 3.41648755E+00;
  COFD[18850] = -2.38096267E-01;
  COFD[18851] = 1.07229875E-02;
  COFD[18852] = -1.97255510E+01;
  COFD[18853] = 5.06879407E+00;
  COFD[18854] = -4.34033370E-01;
  COFD[18855] = 1.84496123E-02;
  COFD[18856] = -1.50161468E+01;
  COFD[18857] = 3.28502534E+00;
  COFD[18858] = -2.20705925E-01;
  COFD[18859] = 9.95522352E-03;
  COFD[18860] = -1.58179642E+01;
  COFD[18861] = 3.60269020E+00;
  COFD[18862] = -2.61928318E-01;
  COFD[18863] = 1.17409749E-02;
  COFD[18864] = -1.80352709E+01;
  COFD[18865] = 4.39593221E+00;
  COFD[18866] = -3.62180319E-01;
  COFD[18867] = 1.59760241E-02;
  COFD[18868] = -1.86277853E+01;
  COFD[18869] = 4.58249233E+00;
  COFD[18870] = -3.85491945E-01;
  COFD[18871] = 1.69516294E-02;
  COFD[18872] = -1.62463719E+01;
  COFD[18873] = 3.77004990E+00;
  COFD[18874] = -2.83073908E-01;
  COFD[18875] = 1.26325053E-02;
  COFD[18876] = -1.51546668E+01;
  COFD[18877] = 3.34406542E+00;
  COFD[18878] = -2.28560920E-01;
  COFD[18879] = 1.03039697E-02;
  COFD[18880] = -2.02958084E+01;
  COFD[18881] = 5.11032634E+00;
  COFD[18882] = -4.34220213E-01;
  COFD[18883] = 1.82427171E-02;
  COFD[18884] = -2.03055080E+01;
  COFD[18885] = 5.11032634E+00;
  COFD[18886] = -4.34220213E-01;
  COFD[18887] = 1.82427171E-02;
  COFD[18888] = -1.68322937E+01;
  COFD[18889] = 4.07749999E+00;
  COFD[18890] = -3.22521584E-01;
  COFD[18891] = 1.43244419E-02;
  COFD[18892] = -1.86230619E+01;
  COFD[18893] = 4.58249233E+00;
  COFD[18894] = -3.85491945E-01;
  COFD[18895] = 1.69516294E-02;
  COFD[18896] = -1.86230619E+01;
  COFD[18897] = 4.58249233E+00;
  COFD[18898] = -3.85491945E-01;
  COFD[18899] = 1.69516294E-02;
  COFD[18900] = -1.86230619E+01;
  COFD[18901] = 4.58249233E+00;
  COFD[18902] = -3.85491945E-01;
  COFD[18903] = 1.69516294E-02;
  COFD[18904] = -1.86180628E+01;
  COFD[18905] = 4.58249233E+00;
  COFD[18906] = -3.85491945E-01;
  COFD[18907] = 1.69516294E-02;
  COFD[18908] = -1.58002139E+01;
  COFD[18909] = 3.60269020E+00;
  COFD[18910] = -2.61928318E-01;
  COFD[18911] = 1.17409749E-02;
  COFD[18912] = -1.67676995E+01;
  COFD[18913] = 3.96003955E+00;
  COFD[18914] = -3.07400975E-01;
  COFD[18915] = 1.36734078E-02;
  COFD[18916] = -1.92754269E+01;
  COFD[18917] = 4.70500352E+00;
  COFD[18918] = -3.99518710E-01;
  COFD[18919] = 1.74813016E-02;
  COFD[18920] = -1.92802330E+01;
  COFD[18921] = 4.70500352E+00;
  COFD[18922] = -3.99518710E-01;
  COFD[18923] = 1.74813016E-02;
  COFD[18924] = -2.01402801E+01;
  COFD[18925] = 5.04412150E+00;
  COFD[18926] = -4.33656353E-01;
  COFD[18927] = 1.85504386E-02;
  COFD[18928] = -2.01450939E+01;
  COFD[18929] = 5.04412150E+00;
  COFD[18930] = -4.33656353E-01;
  COFD[18931] = 1.85504386E-02;
  COFD[18932] = -1.91849660E+01;
  COFD[18933] = 4.89910102E+00;
  COFD[18934] = -4.21363330E-01;
  COFD[18935] = 1.82889197E-02;
  COFD[18936] = -1.49322561E+01;
  COFD[18937] = 3.41648755E+00;
  COFD[18938] = -2.38096267E-01;
  COFD[18939] = 1.07229875E-02;
  COFD[18940] = -1.64784456E+01;
  COFD[18941] = 3.85913477E+00;
  COFD[18942] = -2.94476749E-01;
  COFD[18943] = 1.31199582E-02;
  COFD[18944] = -1.89720439E+01;
  COFD[18945] = 4.69223232E+00;
  COFD[18946] = -3.98170006E-01;
  COFD[18947] = 1.74358537E-02;
  COFD[18948] = -1.90621259E+01;
  COFD[18949] = 4.69223232E+00;
  COFD[18950] = -3.98170006E-01;
  COFD[18951] = 1.74358537E-02;
  COFD[18952] = -1.91125674E+01;
  COFD[18953] = 4.69223232E+00;
  COFD[18954] = -3.98170006E-01;
  COFD[18955] = 1.74358537E-02;
  COFD[18956] = -1.71895490E+01;
  COFD[18957] = 3.93560759E+00;
  COFD[18958] = -3.04230562E-01;
  COFD[18959] = 1.35357304E-02;
  COFD[18960] = -1.89648206E+01;
  COFD[18961] = 4.69223232E+00;
  COFD[18962] = -3.98170006E-01;
  COFD[18963] = 1.74358537E-02;
  COFD[18964] = -1.90584499E+01;
  COFD[18965] = 4.69223232E+00;
  COFD[18966] = -3.98170006E-01;
  COFD[18967] = 1.74358537E-02;
  COFD[18968] = -1.67439694E+01;
  COFD[18969] = 3.81386703E+00;
  COFD[18970] = -2.88699500E-01;
  COFD[18971] = 1.28737366E-02;
  COFD[18972] = -1.89572552E+01;
  COFD[18973] = 4.69223232E+00;
  COFD[18974] = -3.98170006E-01;
  COFD[18975] = 1.74358537E-02;
  COFD[18976] = -1.62487306E+01;
  COFD[18977] = 3.68184736E+00;
  COFD[18978] = -2.71702385E-01;
  COFD[18979] = 1.21427089E-02;
  COFD[18980] = -1.57523198E+01;
  COFD[18981] = 3.57453371E+00;
  COFD[18982] = -2.58409801E-01;
  COFD[18983] = 1.15944370E-02;
  COFD[18984] = -2.01096073E+01;
  COFD[18985] = 4.94727332E+00;
  COFD[18986] = -4.26538750E-01;
  COFD[18987] = 1.84690644E-02;
  COFD[18988] = -2.00725490E+01;
  COFD[18989] = 4.94727332E+00;
  COFD[18990] = -4.26538750E-01;
  COFD[18991] = 1.84690644E-02;
  COFD[18992] = -2.00159932E+01;
  COFD[18993] = 4.94727332E+00;
  COFD[18994] = -4.26538750E-01;
  COFD[18995] = 1.84690644E-02;
  COFD[18996] = -2.04322830E+01;
  COFD[18997] = 4.92134606E+00;
  COFD[18998] = -3.92336377E-01;
  COFD[18999] = 1.57129334E-02;
  COFD[19000] = -1.92754269E+01;
  COFD[19001] = 4.70500352E+00;
  COFD[19002] = -3.99518710E-01;
  COFD[19003] = 1.74813016E-02;
  COFD[19004] = -1.92754269E+01;
  COFD[19005] = 4.70500352E+00;
  COFD[19006] = -3.99518710E-01;
  COFD[19007] = 1.74813016E-02;
  COFD[19008] = -1.60284160E+01;
  COFD[19009] = 4.00473478E+00;
  COFD[19010] = -3.13164739E-01;
  COFD[19011] = 1.39220151E-02;
  COFD[19012] = -1.87974891E+01;
  COFD[19013] = 5.09645703E+00;
  COFD[19014] = -4.34076048E-01;
  COFD[19015] = 1.83045207E-02;
  COFD[19016] = -1.91507879E+01;
  COFD[19017] = 4.78666646E+00;
  COFD[19018] = -4.08190059E-01;
  COFD[19019] = 1.77758369E-02;
  COFD[19020] = -2.03435657E+01;
  COFD[19021] = 5.02233352E+00;
  COFD[19022] = -4.33327965E-01;
  COFD[19023] = 1.86406390E-02;
  COFD[19024] = -1.91763722E+01;
  COFD[19025] = 4.78666646E+00;
  COFD[19026] = -4.08190059E-01;
  COFD[19027] = 1.77758369E-02;
  COFD[19028] = -1.68818955E+01;
  COFD[19029] = 3.09904731E+00;
  COFD[19030] = -9.86468170E-02;
  COFD[19031] = 6.66368066E-04;
  COFD[19032] = -2.03547846E+01;
  COFD[19033] = 5.02233352E+00;
  COFD[19034] = -4.33327965E-01;
  COFD[19035] = 1.86406390E-02;
  COFD[19036] = -2.03655734E+01;
  COFD[19037] = 5.02233352E+00;
  COFD[19038] = -4.33327965E-01;
  COFD[19039] = 1.86406390E-02;
  COFD[19040] = -1.88984539E+01;
  COFD[19041] = 4.70202289E+00;
  COFD[19042] = -3.99204946E-01;
  COFD[19043] = 1.74707832E-02;
  COFD[19044] = -1.90627036E+01;
  COFD[19045] = 4.78666646E+00;
  COFD[19046] = -4.08190059E-01;
  COFD[19047] = 1.77758369E-02;
  COFD[19048] = -2.04812176E+01;
  COFD[19049] = 5.09402439E+00;
  COFD[19050] = -4.33965952E-01;
  COFD[19051] = 1.83081493E-02;
  COFD[19052] = -2.04812176E+01;
  COFD[19053] = 5.09402439E+00;
  COFD[19054] = -4.33965952E-01;
  COFD[19055] = 1.83081493E-02;
  COFD[19056] = -2.05108525E+01;
  COFD[19057] = 5.09402439E+00;
  COFD[19058] = -4.33965952E-01;
  COFD[19059] = 1.83081493E-02;
  COFD[19060] = -2.04957699E+01;
  COFD[19061] = 5.08719650E+00;
  COFD[19062] = -4.33606546E-01;
  COFD[19063] = 1.83140816E-02;
  COFD[19064] = -2.01656056E+01;
  COFD[19065] = 4.97438583E+00;
  COFD[19066] = -4.29221476E-01;
  COFD[19067] = 1.85506966E-02;
  COFD[19068] = -2.08893055E+01;
  COFD[19069] = 4.89386904E+00;
  COFD[19070] = -3.86430696E-01;
  COFD[19071] = 1.53623202E-02;
  COFD[19072] = -1.81562005E+01;
  COFD[19073] = 3.51490671E+00;
  COFD[19074] = -1.62780195E-01;
  COFD[19075] = 3.85244135E-03;
  COFD[19076] = -1.81688735E+01;
  COFD[19077] = 3.51490671E+00;
  COFD[19078] = -1.62780195E-01;
  COFD[19079] = 3.85244135E-03;
  COFD[19080] = -1.91234778E+01;
  COFD[19081] = 3.98098090E+00;
  COFD[19082] = -2.35727305E-01;
  COFD[19083] = 7.51598398E-03;
  COFD[19084] = -1.91234778E+01;
  COFD[19085] = 3.98098090E+00;
  COFD[19086] = -2.35727305E-01;
  COFD[19087] = 7.51598398E-03;
  COFD[19088] = -1.83865927E+01;
  COFD[19089] = 3.60796077E+00;
  COFD[19090] = -1.77255678E-01;
  COFD[19091] = 4.57625098E-03;
  COFD[19092] = -2.09205070E+01;
  COFD[19093] = 5.02022822E+00;
  COFD[19094] = -4.10246613E-01;
  COFD[19095] = 1.66984803E-02;
  COFD[19096] = -2.09356884E+01;
  COFD[19097] = 5.02022822E+00;
  COFD[19098] = -4.10246613E-01;
  COFD[19099] = 1.66984803E-02;
  COFD[19100] = -2.09501612E+01;
  COFD[19101] = 5.02022822E+00;
  COFD[19102] = -4.10246613E-01;
  COFD[19103] = 1.66984803E-02;
  COFD[19104] = -2.05473819E+01;
  COFD[19105] = 4.74102311E+00;
  COFD[19106] = -3.59378625E-01;
  COFD[19107] = 1.38954729E-02;
  COFD[19108] = -2.08495861E+01;
  COFD[19109] = 4.87539271E+00;
  COFD[19110] = -3.82608295E-01;
  COFD[19111] = 1.51394206E-02;
  COFD[19112] = -2.08622354E+01;
  COFD[19113] = 4.87539271E+00;
  COFD[19114] = -3.82608295E-01;
  COFD[19115] = 1.51394206E-02;
  COFD[19116] = -2.06351848E+01;
  COFD[19117] = 5.10650228E+00;
  COFD[19118] = -4.34343731E-01;
  COFD[19119] = 1.82736154E-02;
  COFD[19120] = -1.90621649E+01;
  COFD[19121] = 3.86341155E+00;
  COFD[19122] = -2.17305404E-01;
  COFD[19123] = 6.58928178E-03;
  COFD[19124] = -1.90621649E+01;
  COFD[19125] = 3.86341155E+00;
  COFD[19126] = -2.17305404E-01;
  COFD[19127] = 6.58928178E-03;
  COFD[19128] = -1.89651385E+01;
  COFD[19129] = 4.70202289E+00;
  COFD[19130] = -3.99204946E-01;
  COFD[19131] = 1.74707832E-02;
  COFD[19132] = -1.90976492E+01;
  COFD[19133] = 4.78666646E+00;
  COFD[19134] = -4.08190059E-01;
  COFD[19135] = 1.77758369E-02;
  COFD[19136] = -1.91251232E+01;
  COFD[19137] = 4.78666646E+00;
  COFD[19138] = -4.08190059E-01;
  COFD[19139] = 1.77758369E-02;
  COFD[19140] = -1.79749457E+01;
  COFD[19141] = 3.61226157E+00;
  COFD[19142] = -1.77927842E-01;
  COFD[19143] = 4.60993637E-03;
  COFD[19144] = -1.93771117E+01;
  COFD[19145] = 4.70202289E+00;
  COFD[19146] = -3.99204946E-01;
  COFD[19147] = 1.74707832E-02;
  COFD[19148] = -2.01707894E+01;
  COFD[19149] = 4.97019920E+00;
  COFD[19150] = -4.28797011E-01;
  COFD[19151] = 1.85372303E-02;
  COFD[19152] = -2.10444847E+01;
  COFD[19153] = 5.05635598E+00;
  COFD[19154] = -4.17092215E-01;
  COFD[19155] = 1.70844561E-02;
  COFD[19156] = -2.09150269E+01;
  COFD[19157] = 4.91673221E+00;
  COFD[19158] = -3.91478503E-01;
  COFD[19159] = 1.56651571E-02;
  COFD[19160] = -2.04486358E+01;
  COFD[19161] = 5.04291001E+00;
  COFD[19162] = -4.33616195E-01;
  COFD[19163] = 1.85535769E-02;
  COFD[19164] = -1.94651351E+01;
  COFD[19165] = 4.73913103E+00;
  COFD[19166] = -4.03202051E-01;
  COFD[19167] = 1.76095470E-02;
  COFD[19168] = -1.73373407E+01;
  COFD[19169] = 3.11794258E+00;
  COFD[19170] = -1.01532806E-01;
  COFD[19171] = 8.08632217E-04;
  COFD[19172] = -1.73511715E+01;
  COFD[19173] = 3.11794258E+00;
  COFD[19174] = -1.01532806E-01;
  COFD[19175] = 8.08632217E-04;
  COFD[19176] = -2.06352177E+01;
  COFD[19177] = 5.10650228E+00;
  COFD[19178] = -4.34343731E-01;
  COFD[19179] = 1.82736154E-02;
  COFD[19180] = -2.09075187E+01;
  COFD[19181] = 4.91673221E+00;
  COFD[19182] = -3.91478503E-01;
  COFD[19183] = 1.56651571E-02;
  COFD[19184] = -2.09075187E+01;
  COFD[19185] = 4.91673221E+00;
  COFD[19186] = -3.91478503E-01;
  COFD[19187] = 1.56651571E-02;
  COFD[19188] = -2.09075187E+01;
  COFD[19189] = 4.91673221E+00;
  COFD[19190] = -3.91478503E-01;
  COFD[19191] = 1.56651571E-02;
  COFD[19192] = -2.08996174E+01;
  COFD[19193] = 4.91673221E+00;
  COFD[19194] = -3.91478503E-01;
  COFD[19195] = 1.56651571E-02;
  COFD[19196] = -2.01451788E+01;
  COFD[19197] = 4.97019920E+00;
  COFD[19198] = -4.28797011E-01;
  COFD[19199] = 1.85372303E-02;
  COFD[19200] = -2.07107312E+01;
  COFD[19201] = 5.08356041E+00;
  COFD[19202] = -4.34315412E-01;
  COFD[19203] = 1.83939333E-02;
  COFD[19204] = -2.10569301E+01;
  COFD[19205] = 4.82252782E+00;
  COFD[19206] = -3.73027863E-01;
  COFD[19207] = 1.46137165E-02;
  COFD[19208] = -2.10645729E+01;
  COFD[19209] = 4.82252782E+00;
  COFD[19210] = -3.73027863E-01;
  COFD[19211] = 1.46137165E-02;
  COFD[19212] = -1.90700613E+01;
  COFD[19213] = 3.86341155E+00;
  COFD[19214] = -2.17305404E-01;
  COFD[19215] = 6.58928178E-03;
  COFD[19216] = -1.90777144E+01;
  COFD[19217] = 3.86341155E+00;
  COFD[19218] = -2.17305404E-01;
  COFD[19219] = 6.58928178E-03;
  COFD[19220] = -1.97750242E+01;
  COFD[19221] = 4.48472682E+00;
  COFD[19222] = -3.16544872E-01;
  COFD[19223] = 1.16472495E-02;
  COFD[19224] = -1.92220705E+01;
  COFD[19225] = 4.78666646E+00;
  COFD[19226] = -4.08190059E-01;
  COFD[19227] = 1.77758369E-02;
  COFD[19228] = -2.05732033E+01;
  COFD[19229] = 5.06159665E+00;
  COFD[19230] = -4.33894270E-01;
  COFD[19231] = 1.84764465E-02;
  COFD[19232] = -2.08259805E+01;
  COFD[19233] = 4.84325747E+00;
  COFD[19234] = -3.76657219E-01;
  COFD[19235] = 1.48093055E-02;
  COFD[19236] = -2.09677876E+01;
  COFD[19237] = 4.84325747E+00;
  COFD[19238] = -3.76657219E-01;
  COFD[19239] = 1.48093055E-02;
  COFD[19240] = -2.10546071E+01;
  COFD[19241] = 4.84325747E+00;
  COFD[19242] = -3.76657219E-01;
  COFD[19243] = 1.48093055E-02;
  COFD[19244] = -2.12202877E+01;
  COFD[19245] = 5.08017083E+00;
  COFD[19246] = -4.34471839E-01;
  COFD[19247] = 1.84255993E-02;
  COFD[19248] = -2.08151997E+01;
  COFD[19249] = 4.84325747E+00;
  COFD[19250] = -3.76657219E-01;
  COFD[19251] = 1.48093055E-02;
  COFD[19252] = -2.09616963E+01;
  COFD[19253] = 4.84325747E+00;
  COFD[19254] = -3.76657219E-01;
  COFD[19255] = 1.48093055E-02;
  COFD[19256] = -2.09456726E+01;
  COFD[19257] = 5.05326123E+00;
  COFD[19258] = -4.33930407E-01;
  COFD[19259] = 1.85244365E-02;
  COFD[19260] = -2.08039894E+01;
  COFD[19261] = 4.84325747E+00;
  COFD[19262] = -3.76657219E-01;
  COFD[19263] = 1.48093055E-02;
  COFD[19264] = -2.06238676E+01;
  COFD[19265] = 5.02418435E+00;
  COFD[19266] = -4.33420854E-01;
  COFD[19267] = 1.86385183E-02;
  COFD[19268] = -2.01096073E+01;
  COFD[19269] = 4.94727332E+00;
  COFD[19270] = -4.26538750E-01;
  COFD[19271] = 1.84690644E-02;
  COFD[19272] = -2.04712576E+01;
  COFD[19273] = 4.38289025E+00;
  COFD[19274] = -2.99730082E-01;
  COFD[19275] = 1.07723137E-02;
  COFD[19276] = -2.04040304E+01;
  COFD[19277] = 4.38289025E+00;
  COFD[19278] = -2.99730082E-01;
  COFD[19279] = 1.07723137E-02;
  COFD[19280] = -2.03083467E+01;
  COFD[19281] = 4.38289025E+00;
  COFD[19282] = -2.99730082E-01;
  COFD[19283] = 1.07723137E-02;
  COFD[19284] = -1.45368004E+01;
  COFD[19285] = 1.64465211E+00;
  COFD[19286] = 1.20489266E-01;
  COFD[19287] = -1.00198044E-02;
  COFD[19288] = -2.10569301E+01;
  COFD[19289] = 4.82252782E+00;
  COFD[19290] = -3.73027863E-01;
  COFD[19291] = 1.46137165E-02;
  COFD[19292] = -2.10569301E+01;
  COFD[19293] = 4.82252782E+00;
  COFD[19294] = -3.73027863E-01;
  COFD[19295] = 1.46137165E-02;
  COFD[19296] = -1.60250931E+01;
  COFD[19297] = 4.00473478E+00;
  COFD[19298] = -3.13164739E-01;
  COFD[19299] = 1.39220151E-02;
  COFD[19300] = -1.87958054E+01;
  COFD[19301] = 5.09645703E+00;
  COFD[19302] = -4.34076048E-01;
  COFD[19303] = 1.83045207E-02;
  COFD[19304] = -1.91284966E+01;
  COFD[19305] = 4.78666646E+00;
  COFD[19306] = -4.08190059E-01;
  COFD[19307] = 1.77758369E-02;
  COFD[19308] = -2.03056808E+01;
  COFD[19309] = 5.02233352E+00;
  COFD[19310] = -4.33327965E-01;
  COFD[19311] = 1.86406390E-02;
  COFD[19312] = -1.91529376E+01;
  COFD[19313] = 4.78666646E+00;
  COFD[19314] = -4.08190059E-01;
  COFD[19315] = 1.77758369E-02;
  COFD[19316] = -1.68573426E+01;
  COFD[19317] = 3.09904731E+00;
  COFD[19318] = -9.86468170E-02;
  COFD[19319] = 6.66368066E-04;
  COFD[19320] = -2.03160725E+01;
  COFD[19321] = 5.02233352E+00;
  COFD[19322] = -4.33327965E-01;
  COFD[19323] = 1.86406390E-02;
  COFD[19324] = -2.03260494E+01;
  COFD[19325] = 5.02233352E+00;
  COFD[19326] = -4.33327965E-01;
  COFD[19327] = 1.86406390E-02;
  COFD[19328] = -1.88809470E+01;
  COFD[19329] = 4.70202289E+00;
  COFD[19330] = -3.99204946E-01;
  COFD[19331] = 1.74707832E-02;
  COFD[19332] = -1.90439462E+01;
  COFD[19333] = 4.78666646E+00;
  COFD[19334] = -4.08190059E-01;
  COFD[19335] = 1.77758369E-02;
  COFD[19336] = -2.04612383E+01;
  COFD[19337] = 5.09402439E+00;
  COFD[19338] = -4.33965952E-01;
  COFD[19339] = 1.83081493E-02;
  COFD[19340] = -2.04612383E+01;
  COFD[19341] = 5.09402439E+00;
  COFD[19342] = -4.33965952E-01;
  COFD[19343] = 1.83081493E-02;
  COFD[19344] = -2.04896787E+01;
  COFD[19345] = 5.09402439E+00;
  COFD[19346] = -4.33965952E-01;
  COFD[19347] = 1.83081493E-02;
  COFD[19348] = -2.04734282E+01;
  COFD[19349] = 5.08719650E+00;
  COFD[19350] = -4.33606546E-01;
  COFD[19351] = 1.83140816E-02;
  COFD[19352] = -2.01311527E+01;
  COFD[19353] = 4.97438583E+00;
  COFD[19354] = -4.29221476E-01;
  COFD[19355] = 1.85506966E-02;
  COFD[19356] = -2.08424774E+01;
  COFD[19357] = 4.89386904E+00;
  COFD[19358] = -3.86430696E-01;
  COFD[19359] = 1.53623202E-02;
  COFD[19360] = -1.81208552E+01;
  COFD[19361] = 3.51490671E+00;
  COFD[19362] = -1.62780195E-01;
  COFD[19363] = 3.85244135E-03;
  COFD[19364] = -1.81326529E+01;
  COFD[19365] = 3.51490671E+00;
  COFD[19366] = -1.62780195E-01;
  COFD[19367] = 3.85244135E-03;
  COFD[19368] = -1.90863988E+01;
  COFD[19369] = 3.98098090E+00;
  COFD[19370] = -2.35727305E-01;
  COFD[19371] = 7.51598398E-03;
  COFD[19372] = -1.90863988E+01;
  COFD[19373] = 3.98098090E+00;
  COFD[19374] = -2.35727305E-01;
  COFD[19375] = 7.51598398E-03;
  COFD[19376] = -1.83486713E+01;
  COFD[19377] = 3.60796077E+00;
  COFD[19378] = -1.77255678E-01;
  COFD[19379] = 4.57625098E-03;
  COFD[19380] = -2.08887979E+01;
  COFD[19381] = 5.02022822E+00;
  COFD[19382] = -4.10246613E-01;
  COFD[19383] = 1.66984803E-02;
  COFD[19384] = -2.09030330E+01;
  COFD[19385] = 5.02022822E+00;
  COFD[19386] = -4.10246613E-01;
  COFD[19387] = 1.66984803E-02;
  COFD[19388] = -2.09165783E+01;
  COFD[19389] = 5.02022822E+00;
  COFD[19390] = -4.10246613E-01;
  COFD[19391] = 1.66984803E-02;
  COFD[19392] = -2.05128896E+01;
  COFD[19393] = 4.74102311E+00;
  COFD[19394] = -3.59378625E-01;
  COFD[19395] = 1.38954729E-02;
  COFD[19396] = -2.08142023E+01;
  COFD[19397] = 4.87539271E+00;
  COFD[19398] = -3.82608295E-01;
  COFD[19399] = 1.51394206E-02;
  COFD[19400] = -2.08259770E+01;
  COFD[19401] = 4.87539271E+00;
  COFD[19402] = -3.82608295E-01;
  COFD[19403] = 1.51394206E-02;
  COFD[19404] = -2.05904025E+01;
  COFD[19405] = 5.10650228E+00;
  COFD[19406] = -4.34343731E-01;
  COFD[19407] = 1.82736154E-02;
  COFD[19408] = -1.90166789E+01;
  COFD[19409] = 3.86341155E+00;
  COFD[19410] = -2.17305404E-01;
  COFD[19411] = 6.58928178E-03;
  COFD[19412] = -1.90166789E+01;
  COFD[19413] = 3.86341155E+00;
  COFD[19414] = -2.17305404E-01;
  COFD[19415] = 6.58928178E-03;
  COFD[19416] = -1.89451831E+01;
  COFD[19417] = 4.70202289E+00;
  COFD[19418] = -3.99204946E-01;
  COFD[19419] = 1.74707832E-02;
  COFD[19420] = -1.90764988E+01;
  COFD[19421] = 4.78666646E+00;
  COFD[19422] = -4.08190059E-01;
  COFD[19423] = 1.77758369E-02;
  COFD[19424] = -1.91028044E+01;
  COFD[19425] = 4.78666646E+00;
  COFD[19426] = -4.08190059E-01;
  COFD[19427] = 1.77758369E-02;
  COFD[19428] = -1.79514842E+01;
  COFD[19429] = 3.61226157E+00;
  COFD[19430] = -1.77927842E-01;
  COFD[19431] = 4.60993637E-03;
  COFD[19432] = -1.93417629E+01;
  COFD[19433] = 4.70202289E+00;
  COFD[19434] = -3.99204946E-01;
  COFD[19435] = 1.74707832E-02;
  COFD[19436] = -2.01345861E+01;
  COFD[19437] = 4.97019920E+00;
  COFD[19438] = -4.28797011E-01;
  COFD[19439] = 1.85372303E-02;
  COFD[19440] = -2.09963429E+01;
  COFD[19441] = 5.05635598E+00;
  COFD[19442] = -4.17092215E-01;
  COFD[19443] = 1.70844561E-02;
  COFD[19444] = -2.08681962E+01;
  COFD[19445] = 4.91673221E+00;
  COFD[19446] = -3.91478503E-01;
  COFD[19447] = 1.56651571E-02;
  COFD[19448] = -2.04115737E+01;
  COFD[19449] = 5.04291001E+00;
  COFD[19450] = -4.33616195E-01;
  COFD[19451] = 1.85535769E-02;
  COFD[19452] = -1.94324983E+01;
  COFD[19453] = 4.73913103E+00;
  COFD[19454] = -4.03202051E-01;
  COFD[19455] = 1.76095470E-02;
  COFD[19456] = -1.73037761E+01;
  COFD[19457] = 3.11794258E+00;
  COFD[19458] = -1.01532806E-01;
  COFD[19459] = 8.08632217E-04;
  COFD[19460] = -1.73166971E+01;
  COFD[19461] = 3.11794258E+00;
  COFD[19462] = -1.01532806E-01;
  COFD[19463] = 8.08632217E-04;
  COFD[19464] = -2.05904325E+01;
  COFD[19465] = 5.10650228E+00;
  COFD[19466] = -4.34343731E-01;
  COFD[19467] = 1.82736154E-02;
  COFD[19468] = -2.08613547E+01;
  COFD[19469] = 4.91673221E+00;
  COFD[19470] = -3.91478503E-01;
  COFD[19471] = 1.56651571E-02;
  COFD[19472] = -2.08613547E+01;
  COFD[19473] = 4.91673221E+00;
  COFD[19474] = -3.91478503E-01;
  COFD[19475] = 1.56651571E-02;
  COFD[19476] = -2.08613547E+01;
  COFD[19477] = 4.91673221E+00;
  COFD[19478] = -3.91478503E-01;
  COFD[19479] = 1.56651571E-02;
  COFD[19480] = -2.08541452E+01;
  COFD[19481] = 4.91673221E+00;
  COFD[19482] = -3.91478503E-01;
  COFD[19483] = 1.56651571E-02;
  COFD[19484] = -2.01107223E+01;
  COFD[19485] = 4.97019920E+00;
  COFD[19486] = -4.28797011E-01;
  COFD[19487] = 1.85372303E-02;
  COFD[19488] = -2.06667158E+01;
  COFD[19489] = 5.08356041E+00;
  COFD[19490] = -4.34315412E-01;
  COFD[19491] = 1.83939333E-02;
  COFD[19492] = -2.10107226E+01;
  COFD[19493] = 4.82252782E+00;
  COFD[19494] = -3.73027863E-01;
  COFD[19495] = 1.46137165E-02;
  COFD[19496] = -2.10176860E+01;
  COFD[19497] = 4.82252782E+00;
  COFD[19498] = -3.73027863E-01;
  COFD[19499] = 1.46137165E-02;
  COFD[19500] = -1.90238837E+01;
  COFD[19501] = 3.86341155E+00;
  COFD[19502] = -2.17305404E-01;
  COFD[19503] = 6.58928178E-03;
  COFD[19504] = -1.90308569E+01;
  COFD[19505] = 3.86341155E+00;
  COFD[19506] = -2.17305404E-01;
  COFD[19507] = 6.58928178E-03;
  COFD[19508] = -1.97483319E+01;
  COFD[19509] = 4.48472682E+00;
  COFD[19510] = -3.16544872E-01;
  COFD[19511] = 1.16472495E-02;
  COFD[19512] = -1.91964497E+01;
  COFD[19513] = 4.78666646E+00;
  COFD[19514] = -4.08190059E-01;
  COFD[19515] = 1.77758369E-02;
  COFD[19516] = -2.05306135E+01;
  COFD[19517] = 5.06159665E+00;
  COFD[19518] = -4.33894270E-01;
  COFD[19519] = 1.84764465E-02;
  COFD[19520] = -2.07864410E+01;
  COFD[19521] = 4.84325747E+00;
  COFD[19522] = -3.76657219E-01;
  COFD[19523] = 1.48093055E-02;
  COFD[19524] = -2.09159346E+01;
  COFD[19525] = 4.84325747E+00;
  COFD[19526] = -3.76657219E-01;
  COFD[19527] = 1.48093055E-02;
  COFD[19528] = -2.09935003E+01;
  COFD[19529] = 4.84325747E+00;
  COFD[19530] = -3.76657219E-01;
  COFD[19531] = 1.48093055E-02;
  COFD[19532] = -2.11519711E+01;
  COFD[19533] = 5.08017083E+00;
  COFD[19534] = -4.34471839E-01;
  COFD[19535] = 1.84255993E-02;
  COFD[19536] = -2.07764718E+01;
  COFD[19537] = 4.84325747E+00;
  COFD[19538] = -3.76657219E-01;
  COFD[19539] = 1.48093055E-02;
  COFD[19540] = -2.09104401E+01;
  COFD[19541] = 4.84325747E+00;
  COFD[19542] = -3.76657219E-01;
  COFD[19543] = 1.48093055E-02;
  COFD[19544] = -2.08850230E+01;
  COFD[19545] = 5.05326123E+00;
  COFD[19546] = -4.33930407E-01;
  COFD[19547] = 1.85244365E-02;
  COFD[19548] = -2.07660885E+01;
  COFD[19549] = 4.84325747E+00;
  COFD[19550] = -3.76657219E-01;
  COFD[19551] = 1.48093055E-02;
  COFD[19552] = -2.05732178E+01;
  COFD[19553] = 5.02418435E+00;
  COFD[19554] = -4.33420854E-01;
  COFD[19555] = 1.86385183E-02;
  COFD[19556] = -2.00725490E+01;
  COFD[19557] = 4.94727332E+00;
  COFD[19558] = -4.26538750E-01;
  COFD[19559] = 1.84690644E-02;
  COFD[19560] = -2.04040304E+01;
  COFD[19561] = 4.38289025E+00;
  COFD[19562] = -2.99730082E-01;
  COFD[19563] = 1.07723137E-02;
  COFD[19564] = -2.03447802E+01;
  COFD[19565] = 4.38289025E+00;
  COFD[19566] = -2.99730082E-01;
  COFD[19567] = 1.07723137E-02;
  COFD[19568] = -2.02589241E+01;
  COFD[19569] = 4.38289025E+00;
  COFD[19570] = -2.99730082E-01;
  COFD[19571] = 1.07723137E-02;
  COFD[19572] = -1.44880144E+01;
  COFD[19573] = 1.64465211E+00;
  COFD[19574] = 1.20489266E-01;
  COFD[19575] = -1.00198044E-02;
  COFD[19576] = -2.10107226E+01;
  COFD[19577] = 4.82252782E+00;
  COFD[19578] = -3.73027863E-01;
  COFD[19579] = 1.46137165E-02;
  COFD[19580] = -2.10107226E+01;
  COFD[19581] = 4.82252782E+00;
  COFD[19582] = -3.73027863E-01;
  COFD[19583] = 1.46137165E-02;
  COFD[19584] = -1.60195716E+01;
  COFD[19585] = 4.00473478E+00;
  COFD[19586] = -3.13164739E-01;
  COFD[19587] = 1.39220151E-02;
  COFD[19588] = -1.87929955E+01;
  COFD[19589] = 5.09645703E+00;
  COFD[19590] = -4.34076048E-01;
  COFD[19591] = 1.83045207E-02;
  COFD[19592] = -1.90932222E+01;
  COFD[19593] = 4.78666646E+00;
  COFD[19594] = -4.08190059E-01;
  COFD[19595] = 1.77758369E-02;
  COFD[19596] = -2.02479782E+01;
  COFD[19597] = 5.02233352E+00;
  COFD[19598] = -4.33327965E-01;
  COFD[19599] = 1.86406390E-02;
  COFD[19600] = -1.91159598E+01;
  COFD[19601] = 4.78666646E+00;
  COFD[19602] = -4.08190059E-01;
  COFD[19603] = 1.77758369E-02;
  COFD[19604] = -1.68187080E+01;
  COFD[19605] = 3.09904731E+00;
  COFD[19606] = -9.86468170E-02;
  COFD[19607] = 6.66368066E-04;
  COFD[19608] = -2.02572266E+01;
  COFD[19609] = 5.02233352E+00;
  COFD[19610] = -4.33327965E-01;
  COFD[19611] = 1.86406390E-02;
  COFD[19612] = -2.02660859E+01;
  COFD[19613] = 5.02233352E+00;
  COFD[19614] = -4.33327965E-01;
  COFD[19615] = 1.86406390E-02;
  COFD[19616] = -1.88529074E+01;
  COFD[19617] = 4.70202289E+00;
  COFD[19618] = -3.99204946E-01;
  COFD[19619] = 1.74707832E-02;
  COFD[19620] = -1.90139988E+01;
  COFD[19621] = 4.78666646E+00;
  COFD[19622] = -4.08190059E-01;
  COFD[19623] = 1.77758369E-02;
  COFD[19624] = -2.04294382E+01;
  COFD[19625] = 5.09402439E+00;
  COFD[19626] = -4.33965952E-01;
  COFD[19627] = 1.83081493E-02;
  COFD[19628] = -2.04294382E+01;
  COFD[19629] = 5.09402439E+00;
  COFD[19630] = -4.33965952E-01;
  COFD[19631] = 1.83081493E-02;
  COFD[19632] = -2.04560785E+01;
  COFD[19633] = 5.09402439E+00;
  COFD[19634] = -4.33965952E-01;
  COFD[19635] = 1.83081493E-02;
  COFD[19636] = -2.04380784E+01;
  COFD[19637] = 5.08719650E+00;
  COFD[19638] = -4.33606546E-01;
  COFD[19639] = 1.83140816E-02;
  COFD[19640] = -2.00782415E+01;
  COFD[19641] = 4.97438583E+00;
  COFD[19642] = -4.29221476E-01;
  COFD[19643] = 1.85506966E-02;
  COFD[19644] = -2.07726495E+01;
  COFD[19645] = 4.89386904E+00;
  COFD[19646] = -3.86430696E-01;
  COFD[19647] = 1.53623202E-02;
  COFD[19648] = -1.80666906E+01;
  COFD[19649] = 3.51490671E+00;
  COFD[19650] = -1.62780195E-01;
  COFD[19651] = 3.85244135E-03;
  COFD[19652] = -1.80772641E+01;
  COFD[19653] = 3.51490671E+00;
  COFD[19654] = -1.62780195E-01;
  COFD[19655] = 3.85244135E-03;
  COFD[19656] = -1.90298141E+01;
  COFD[19657] = 3.98098090E+00;
  COFD[19658] = -2.35727305E-01;
  COFD[19659] = 7.51598398E-03;
  COFD[19660] = -1.90298141E+01;
  COFD[19661] = 3.98098090E+00;
  COFD[19662] = -2.35727305E-01;
  COFD[19663] = 7.51598398E-03;
  COFD[19664] = -1.82909182E+01;
  COFD[19665] = 3.60796077E+00;
  COFD[19666] = -1.77255678E-01;
  COFD[19667] = 4.57625098E-03;
  COFD[19668] = -2.08397748E+01;
  COFD[19669] = 5.02022822E+00;
  COFD[19670] = -4.10246613E-01;
  COFD[19671] = 1.66984803E-02;
  COFD[19672] = -2.08526632E+01;
  COFD[19673] = 5.02022822E+00;
  COFD[19674] = -4.10246613E-01;
  COFD[19675] = 1.66984803E-02;
  COFD[19676] = -2.08648943E+01;
  COFD[19677] = 5.02022822E+00;
  COFD[19678] = -4.10246613E-01;
  COFD[19679] = 1.66984803E-02;
  COFD[19680] = -2.04599231E+01;
  COFD[19681] = 4.74102311E+00;
  COFD[19682] = -3.59378625E-01;
  COFD[19683] = 1.38954729E-02;
  COFD[19684] = -2.07599836E+01;
  COFD[19685] = 4.87539271E+00;
  COFD[19686] = -3.82608295E-01;
  COFD[19687] = 1.51394206E-02;
  COFD[19688] = -2.07705354E+01;
  COFD[19689] = 4.87539271E+00;
  COFD[19690] = -3.82608295E-01;
  COFD[19691] = 1.51394206E-02;
  COFD[19692] = -2.05233034E+01;
  COFD[19693] = 5.10650228E+00;
  COFD[19694] = -4.34343731E-01;
  COFD[19695] = 1.82736154E-02;
  COFD[19696] = -1.89486382E+01;
  COFD[19697] = 3.86341155E+00;
  COFD[19698] = -2.17305404E-01;
  COFD[19699] = 6.58928178E-03;
  COFD[19700] = -1.89486382E+01;
  COFD[19701] = 3.86341155E+00;
  COFD[19702] = -2.17305404E-01;
  COFD[19703] = 6.58928178E-03;
  COFD[19704] = -1.89134193E+01;
  COFD[19705] = 4.70202289E+00;
  COFD[19706] = -3.99204946E-01;
  COFD[19707] = 1.74707832E-02;
  COFD[19708] = -1.90429339E+01;
  COFD[19709] = 4.78666646E+00;
  COFD[19710] = -4.08190059E-01;
  COFD[19711] = 1.77758369E-02;
  COFD[19712] = -1.90674889E+01;
  COFD[19713] = 4.78666646E+00;
  COFD[19714] = -4.08190059E-01;
  COFD[19715] = 1.77758369E-02;
  COFD[19716] = -1.79144665E+01;
  COFD[19717] = 3.61226157E+00;
  COFD[19718] = -1.77927842E-01;
  COFD[19719] = 4.60993637E-03;
  COFD[19720] = -1.92875933E+01;
  COFD[19721] = 4.70202289E+00;
  COFD[19722] = -3.99204946E-01;
  COFD[19723] = 1.74707832E-02;
  COFD[19724] = -2.00792213E+01;
  COFD[19725] = 4.97019920E+00;
  COFD[19726] = -4.28797011E-01;
  COFD[19727] = 1.85372303E-02;
  COFD[19728] = -2.09247762E+01;
  COFD[19729] = 5.05635598E+00;
  COFD[19730] = -4.17092215E-01;
  COFD[19731] = 1.70844561E-02;
  COFD[19732] = -2.07983647E+01;
  COFD[19733] = 4.91673221E+00;
  COFD[19734] = -3.91478503E-01;
  COFD[19735] = 1.56651571E-02;
  COFD[19736] = -2.03550125E+01;
  COFD[19737] = 5.04291001E+00;
  COFD[19738] = -4.33616195E-01;
  COFD[19739] = 1.85535769E-02;
  COFD[19740] = -1.93821548E+01;
  COFD[19741] = 4.73913103E+00;
  COFD[19742] = -4.03202051E-01;
  COFD[19743] = 1.76095470E-02;
  COFD[19744] = -1.72521179E+01;
  COFD[19745] = 3.11794258E+00;
  COFD[19746] = -1.01532806E-01;
  COFD[19747] = 8.08632217E-04;
  COFD[19748] = -1.72637557E+01;
  COFD[19749] = 3.11794258E+00;
  COFD[19750] = -1.01532806E-01;
  COFD[19751] = 8.08632217E-04;
  COFD[19752] = -2.05233297E+01;
  COFD[19753] = 5.10650228E+00;
  COFD[19754] = -4.34343731E-01;
  COFD[19755] = 1.82736154E-02;
  COFD[19756] = -2.07924097E+01;
  COFD[19757] = 4.91673221E+00;
  COFD[19758] = -3.91478503E-01;
  COFD[19759] = 1.56651571E-02;
  COFD[19760] = -2.07924097E+01;
  COFD[19761] = 4.91673221E+00;
  COFD[19762] = -3.91478503E-01;
  COFD[19763] = 1.56651571E-02;
  COFD[19764] = -2.07924097E+01;
  COFD[19765] = 4.91673221E+00;
  COFD[19766] = -3.91478503E-01;
  COFD[19767] = 1.56651571E-02;
  COFD[19768] = -2.07861230E+01;
  COFD[19769] = 4.91673221E+00;
  COFD[19770] = -3.91478503E-01;
  COFD[19771] = 1.56651571E-02;
  COFD[19772] = -2.00578061E+01;
  COFD[19773] = 4.97019920E+00;
  COFD[19774] = -4.28797011E-01;
  COFD[19775] = 1.85372303E-02;
  COFD[19776] = -2.06006465E+01;
  COFD[19777] = 5.08356041E+00;
  COFD[19778] = -4.34315412E-01;
  COFD[19779] = 1.83939333E-02;
  COFD[19780] = -2.09417196E+01;
  COFD[19781] = 4.82252782E+00;
  COFD[19782] = -3.73027863E-01;
  COFD[19783] = 1.46137165E-02;
  COFD[19784] = -2.09477800E+01;
  COFD[19785] = 4.82252782E+00;
  COFD[19786] = -3.73027863E-01;
  COFD[19787] = 1.46137165E-02;
  COFD[19788] = -1.89549206E+01;
  COFD[19789] = 3.86341155E+00;
  COFD[19790] = -2.17305404E-01;
  COFD[19791] = 6.58928178E-03;
  COFD[19792] = -1.89609899E+01;
  COFD[19793] = 3.86341155E+00;
  COFD[19794] = -2.17305404E-01;
  COFD[19795] = 6.58928178E-03;
  COFD[19796] = -1.97065532E+01;
  COFD[19797] = 4.48472682E+00;
  COFD[19798] = -3.16544872E-01;
  COFD[19799] = 1.16472495E-02;
  COFD[19800] = -1.91562416E+01;
  COFD[19801] = 4.78666646E+00;
  COFD[19802] = -4.08190059E-01;
  COFD[19803] = 1.77758369E-02;
  COFD[19804] = -2.04664683E+01;
  COFD[19805] = 5.06159665E+00;
  COFD[19806] = -4.33894270E-01;
  COFD[19807] = 1.84764465E-02;
  COFD[19808] = -2.07264563E+01;
  COFD[19809] = 4.84325747E+00;
  COFD[19810] = -3.76657219E-01;
  COFD[19811] = 1.48093055E-02;
  COFD[19812] = -2.08395129E+01;
  COFD[19813] = 4.84325747E+00;
  COFD[19814] = -3.76657219E-01;
  COFD[19815] = 1.48093055E-02;
  COFD[19816] = -2.09053254E+01;
  COFD[19817] = 4.84325747E+00;
  COFD[19818] = -3.76657219E-01;
  COFD[19819] = 1.48093055E-02;
  COFD[19820] = -2.10549722E+01;
  COFD[19821] = 5.08017083E+00;
  COFD[19822] = -4.34471839E-01;
  COFD[19823] = 1.84255993E-02;
  COFD[19824] = -2.07176043E+01;
  COFD[19825] = 4.84325747E+00;
  COFD[19826] = -3.76657219E-01;
  COFD[19827] = 1.48093055E-02;
  COFD[19828] = -2.08347935E+01;
  COFD[19829] = 4.84325747E+00;
  COFD[19830] = -3.76657219E-01;
  COFD[19831] = 1.48093055E-02;
  COFD[19832] = -2.07974174E+01;
  COFD[19833] = 5.05326123E+00;
  COFD[19834] = -4.33930407E-01;
  COFD[19835] = 1.85244365E-02;
  COFD[19836] = -2.07083635E+01;
  COFD[19837] = 4.84325747E+00;
  COFD[19838] = -3.76657219E-01;
  COFD[19839] = 1.48093055E-02;
  COFD[19840] = -2.04983610E+01;
  COFD[19841] = 5.02418435E+00;
  COFD[19842] = -4.33420854E-01;
  COFD[19843] = 1.86385183E-02;
  COFD[19844] = -2.00159932E+01;
  COFD[19845] = 4.94727332E+00;
  COFD[19846] = -4.26538750E-01;
  COFD[19847] = 1.84690644E-02;
  COFD[19848] = -2.03083467E+01;
  COFD[19849] = 4.38289025E+00;
  COFD[19850] = -2.99730082E-01;
  COFD[19851] = 1.07723137E-02;
  COFD[19852] = -2.02589241E+01;
  COFD[19853] = 4.38289025E+00;
  COFD[19854] = -2.99730082E-01;
  COFD[19855] = 1.07723137E-02;
  COFD[19856] = -2.01856726E+01;
  COFD[19857] = 4.38289025E+00;
  COFD[19858] = -2.99730082E-01;
  COFD[19859] = 1.07723137E-02;
  COFD[19860] = -1.44155990E+01;
  COFD[19861] = 1.64465211E+00;
  COFD[19862] = 1.20489266E-01;
  COFD[19863] = -1.00198044E-02;
  COFD[19864] = -2.09417196E+01;
  COFD[19865] = 4.82252782E+00;
  COFD[19866] = -3.73027863E-01;
  COFD[19867] = 1.46137165E-02;
  COFD[19868] = -2.09417196E+01;
  COFD[19869] = 4.82252782E+00;
  COFD[19870] = -3.73027863E-01;
  COFD[19871] = 1.46137165E-02;
  COFD[19872] = -1.84347689E+01;
  COFD[19873] = 4.94081188E+00;
  COFD[19874] = -4.25912696E-01;
  COFD[19875] = 1.84507313E-02;
  COFD[19876] = -1.75729846E+01;
  COFD[19877] = 4.35554031E+00;
  COFD[19878] = -2.95264478E-01;
  COFD[19879] = 1.05416033E-02;
  COFD[19880] = -2.01522950E+01;
  COFD[19881] = 5.06537899E+00;
  COFD[19882] = -4.19068559E-01;
  COFD[19883] = 1.72031928E-02;
  COFD[19884] = -2.03126859E+01;
  COFD[19885] = 4.83724546E+00;
  COFD[19886] = -3.75588934E-01;
  COFD[19887] = 1.47513066E-02;
  COFD[19888] = -2.01749087E+01;
  COFD[19889] = 5.06537899E+00;
  COFD[19890] = -4.19068559E-01;
  COFD[19891] = 1.72031928E-02;
  COFD[19892] = -9.22716565E+00;
  COFD[19893] = -3.30774705E-01;
  COFD[19894] = 4.09067100E-01;
  COFD[19895] = -2.37067046E-02;
  COFD[19896] = -2.03218550E+01;
  COFD[19897] = 4.83724546E+00;
  COFD[19898] = -3.75588934E-01;
  COFD[19899] = 1.47513066E-02;
  COFD[19900] = -2.03306369E+01;
  COFD[19901] = 4.83724546E+00;
  COFD[19902] = -3.75588934E-01;
  COFD[19903] = 1.47513066E-02;
  COFD[19904] = -2.01408987E+01;
  COFD[19905] = 5.08054289E+00;
  COFD[19906] = -4.25157431E-01;
  COFD[19907] = 1.76349030E-02;
  COFD[19908] = -2.00734624E+01;
  COFD[19909] = 5.06537899E+00;
  COFD[19910] = -4.19068559E-01;
  COFD[19911] = 1.72031928E-02;
  COFD[19912] = -1.93007509E+01;
  COFD[19913] = 4.36820343E+00;
  COFD[19914] = -2.97329446E-01;
  COFD[19915] = 1.06481693E-02;
  COFD[19916] = -1.93007509E+01;
  COFD[19917] = 4.36820343E+00;
  COFD[19918] = -2.97329446E-01;
  COFD[19919] = 1.06481693E-02;
  COFD[19920] = -1.93272592E+01;
  COFD[19921] = 4.36820343E+00;
  COFD[19922] = -2.97329446E-01;
  COFD[19923] = 1.06481693E-02;
  COFD[19924] = -1.93988067E+01;
  COFD[19925] = 4.40179261E+00;
  COFD[19926] = -3.02821537E-01;
  COFD[19927] = 1.09323328E-02;
  COFD[19928] = -2.03907825E+01;
  COFD[19929] = 4.90002091E+00;
  COFD[19930] = -3.87799547E-01;
  COFD[19931] = 1.54446274E-02;
  COFD[19932] = -1.68523123E+01;
  COFD[19933] = 2.94944152E+00;
  COFD[19934] = -7.58402678E-02;
  COFD[19935] = -4.56762874E-04;
  COFD[19936] = -1.07434925E+01;
  COFD[19937] = 1.62322565E-01;
  COFD[19938] = 3.37928978E-01;
  COFD[19939] = -2.03841743E-02;
  COFD[19940] = -1.07539804E+01;
  COFD[19941] = 1.62322565E-01;
  COFD[19942] = 3.37928978E-01;
  COFD[19943] = -2.03841743E-02;
  COFD[19944] = -1.25128469E+01;
  COFD[19945] = 9.51839855E-01;
  COFD[19946] = 2.22674576E-01;
  COFD[19947] = -1.49117394E-02;
  COFD[19948] = -1.25128469E+01;
  COFD[19949] = 9.51839855E-01;
  COFD[19950] = 2.22674576E-01;
  COFD[19951] = -1.49117394E-02;
  COFD[19952] = -1.10855285E+01;
  COFD[19953] = 3.00814435E-01;
  COFD[19954] = 3.17787607E-01;
  COFD[19955] = -1.94326662E-02;
  COFD[19956] = -1.77528393E+01;
  COFD[19957] = 3.43134598E+00;
  COFD[19958] = -1.49825485E-01;
  COFD[19959] = 3.20636012E-03;
  COFD[19960] = -1.77656325E+01;
  COFD[19961] = 3.43134598E+00;
  COFD[19962] = -1.49825485E-01;
  COFD[19963] = 3.20636012E-03;
  COFD[19964] = -1.77777710E+01;
  COFD[19965] = 3.43134598E+00;
  COFD[19966] = -1.49825485E-01;
  COFD[19967] = 3.20636012E-03;
  COFD[19968] = -1.56843459E+01;
  COFD[19969] = 2.42687065E+00;
  COFD[19970] = 3.11557501E-03;
  COFD[19971] = -4.32109630E-03;
  COFD[19972] = -1.66206882E+01;
  COFD[19973] = 2.82977426E+00;
  COFD[19974] = -5.76575801E-02;
  COFD[19975] = -1.35075395E-03;
  COFD[19976] = -1.66311545E+01;
  COFD[19977] = 2.82977426E+00;
  COFD[19978] = -5.76575801E-02;
  COFD[19979] = -1.35075395E-03;
  COFD[19980] = -1.91327069E+01;
  COFD[19981] = 4.28441944E+00;
  COFD[19982] = -2.83837281E-01;
  COFD[19983] = 9.95708986E-03;
  COFD[19984] = -1.22379584E+01;
  COFD[19985] = 7.53297911E-01;
  COFD[19986] = 2.51735820E-01;
  COFD[19987] = -1.62956231E-02;
  COFD[19988] = -1.22379584E+01;
  COFD[19989] = 7.53297911E-01;
  COFD[19990] = 2.51735820E-01;
  COFD[19991] = -1.62956231E-02;
  COFD[19992] = -2.02011358E+01;
  COFD[19993] = 5.08054289E+00;
  COFD[19994] = -4.25157431E-01;
  COFD[19995] = 1.76349030E-02;
  COFD[19996] = -2.00985757E+01;
  COFD[19997] = 5.06537899E+00;
  COFD[19998] = -4.19068559E-01;
  COFD[19999] = 1.72031928E-02;
  COFD[20000] = -2.01230028E+01;
  COFD[20001] = 5.06537899E+00;
  COFD[20002] = -4.19068559E-01;
  COFD[20003] = 1.72031928E-02;
  COFD[20004] = -1.06959932E+01;
  COFD[20005] = 3.07905069E-01;
  COFD[20006] = 3.16754875E-01;
  COFD[20007] = -1.93837979E-02;
  COFD[20008] = -2.05879147E+01;
  COFD[20009] = 5.08054289E+00;
  COFD[20010] = -4.25157431E-01;
  COFD[20011] = 1.76349030E-02;
  COFD[20012] = -2.04062325E+01;
  COFD[20013] = 4.90297486E+00;
  COFD[20014] = -3.88437024E-01;
  COFD[20015] = 1.54825639E-02;
  COFD[20016] = -1.80275050E+01;
  COFD[20017] = 3.55722529E+00;
  COFD[20018] = -1.69351339E-01;
  COFD[20019] = 4.18064360E-03;
  COFD[20020] = -1.72016081E+01;
  COFD[20021] = 3.11108578E+00;
  COFD[20022] = -1.00485263E-01;
  COFD[20023] = 7.56976059E-04;
  COFD[20024] = -2.00872249E+01;
  COFD[20025] = 4.70710678E+00;
  COFD[20026] = -3.53756713E-01;
  COFD[20027] = 1.36014556E-02;
  COFD[20028] = -2.05911016E+01;
  COFD[20029] = 5.07317174E+00;
  COFD[20030] = -4.22392704E-01;
  COFD[20031] = 1.74410531E-02;
  COFD[20032] = -9.69833851E+00;
  COFD[20033] = -3.10450492E-01;
  COFD[20034] = 4.06159654E-01;
  COFD[20035] = -2.35721858E-02;
  COFD[20036] = -9.70988614E+00;
  COFD[20037] = -3.10450492E-01;
  COFD[20038] = 4.06159654E-01;
  COFD[20039] = -2.35721858E-02;
  COFD[20040] = -1.91327329E+01;
  COFD[20041] = 4.28441944E+00;
  COFD[20042] = -2.83837281E-01;
  COFD[20043] = 9.95708986E-03;
  COFD[20044] = -1.71957133E+01;
  COFD[20045] = 3.11108578E+00;
  COFD[20046] = -1.00485263E-01;
  COFD[20047] = 7.56976059E-04;
  COFD[20048] = -1.71957133E+01;
  COFD[20049] = 3.11108578E+00;
  COFD[20050] = -1.00485263E-01;
  COFD[20051] = 7.56976059E-04;
  COFD[20052] = -1.71957133E+01;
  COFD[20053] = 3.11108578E+00;
  COFD[20054] = -1.00485263E-01;
  COFD[20055] = 7.56976059E-04;
  COFD[20056] = -1.71894892E+01;
  COFD[20057] = 3.11108578E+00;
  COFD[20058] = -1.00485263E-01;
  COFD[20059] = 7.56976059E-04;
  COFD[20060] = -2.03849888E+01;
  COFD[20061] = 4.90297486E+00;
  COFD[20062] = -3.88437024E-01;
  COFD[20063] = 1.54825639E-02;
  COFD[20064] = -1.96910493E+01;
  COFD[20065] = 4.46192494E+00;
  COFD[20066] = -3.12739268E-01;
  COFD[20067] = 1.14480787E-02;
  COFD[20068] = -1.64606257E+01;
  COFD[20069] = 2.62390123E+00;
  COFD[20070] = -2.65386143E-02;
  COFD[20071] = -2.87407111E-03;
  COFD[20072] = -1.64666248E+01;
  COFD[20073] = 2.62390123E+00;
  COFD[20074] = -2.65386143E-02;
  COFD[20075] = -2.87407111E-03;
  COFD[20076] = -1.22441781E+01;
  COFD[20077] = 7.53297911E-01;
  COFD[20078] = 2.51735820E-01;
  COFD[20079] = -1.62956231E-02;
  COFD[20080] = -1.22501862E+01;
  COFD[20081] = 7.53297911E-01;
  COFD[20082] = 2.51735820E-01;
  COFD[20083] = -1.62956231E-02;
  COFD[20084] = -1.41963480E+01;
  COFD[20085] = 1.87343141E+00;
  COFD[20086] = 8.63079572E-02;
  COFD[20087] = -8.36519031E-03;
  COFD[20088] = -2.02149566E+01;
  COFD[20089] = 5.06537899E+00;
  COFD[20090] = -4.19068559E-01;
  COFD[20091] = 1.72031928E-02;
  COFD[20092] = -1.98831321E+01;
  COFD[20093] = 4.58632869E+00;
  COFD[20094] = -3.33596970E-01;
  COFD[20095] = 1.25433032E-02;
  COFD[20096] = -1.63388454E+01;
  COFD[20097] = 2.69277644E+00;
  COFD[20098] = -3.69311652E-02;
  COFD[20099] = -2.36590601E-03;
  COFD[20100] = -1.64507848E+01;
  COFD[20101] = 2.69277644E+00;
  COFD[20102] = -3.69311652E-02;
  COFD[20103] = -2.36590601E-03;
  COFD[20104] = -1.65158222E+01;
  COFD[20105] = 2.69277644E+00;
  COFD[20106] = -3.69311652E-02;
  COFD[20107] = -2.36590601E-03;
  COFD[20108] = -2.02489380E+01;
  COFD[20109] = 4.49027227E+00;
  COFD[20110] = -3.17473352E-01;
  COFD[20111] = 1.16959305E-02;
  COFD[20112] = -1.63300707E+01;
  COFD[20113] = 2.69277644E+00;
  COFD[20114] = -3.69311652E-02;
  COFD[20115] = -2.36590601E-03;
  COFD[20116] = -1.64461172E+01;
  COFD[20117] = 2.69277644E+00;
  COFD[20118] = -3.69311652E-02;
  COFD[20119] = -2.36590601E-03;
  COFD[20120] = -2.03910349E+01;
  COFD[20121] = 4.64627808E+00;
  COFD[20122] = -3.43644443E-01;
  COFD[20123] = 1.30718567E-02;
  COFD[20124] = -1.63209093E+01;
  COFD[20125] = 2.69277644E+00;
  COFD[20126] = -3.69311652E-02;
  COFD[20127] = -2.36590601E-03;
  COFD[20128] = -2.05574917E+01;
  COFD[20129] = 4.83067176E+00;
  COFD[20130] = -3.74443480E-01;
  COFD[20131] = 1.46897257E-02;
  COFD[20132] = -2.04322830E+01;
  COFD[20133] = 4.92134606E+00;
  COFD[20134] = -3.92336377E-01;
  COFD[20135] = 1.57129334E-02;
  COFD[20136] = -1.45368004E+01;
  COFD[20137] = 1.64465211E+00;
  COFD[20138] = 1.20489266E-01;
  COFD[20139] = -1.00198044E-02;
  COFD[20140] = -1.44880144E+01;
  COFD[20141] = 1.64465211E+00;
  COFD[20142] = 1.20489266E-01;
  COFD[20143] = -1.00198044E-02;
  COFD[20144] = -1.44155990E+01;
  COFD[20145] = 1.64465211E+00;
  COFD[20146] = 1.20489266E-01;
  COFD[20147] = -1.00198044E-02;
  COFD[20148] = -6.43225683E+00;
  COFD[20149] = -1.88093724E+00;
  COFD[20150] = 6.28293823E-01;
  COFD[20151] = -3.37651881E-02;
  COFD[20152] = -1.64606257E+01;
  COFD[20153] = 2.62390123E+00;
  COFD[20154] = -2.65386143E-02;
  COFD[20155] = -2.87407111E-03;
  COFD[20156] = -1.64606257E+01;
  COFD[20157] = 2.62390123E+00;
  COFD[20158] = -2.65386143E-02;
  COFD[20159] = -2.87407111E-03;
  COFD[20160] = -1.51657506E+01;
  COFD[20161] = 3.67829613E+00;
  COFD[20162] = -2.71248709E-01;
  COFD[20163] = 1.21233589E-02;
  COFD[20164] = -1.84504600E+01;
  COFD[20165] = 5.02876303E+00;
  COFD[20166] = -4.33391605E-01;
  COFD[20167] = 1.86111689E-02;
  COFD[20168] = -1.83836850E+01;
  COFD[20169] = 4.54835769E+00;
  COFD[20170] = -3.81194036E-01;
  COFD[20171] = 1.67703153E-02;
  COFD[20172] = -1.95815882E+01;
  COFD[20173] = 4.81568564E+00;
  COFD[20174] = -4.11759763E-01;
  COFD[20175] = 1.79229378E-02;
  COFD[20176] = -1.84057767E+01;
  COFD[20177] = 4.54835769E+00;
  COFD[20178] = -3.81194036E-01;
  COFD[20179] = 1.67703153E-02;
  COFD[20180] = -1.83546056E+01;
  COFD[20181] = 3.86526682E+00;
  COFD[20182] = -2.17594533E-01;
  COFD[20183] = 6.60377130E-03;
  COFD[20184] = -1.95904286E+01;
  COFD[20185] = 4.81568564E+00;
  COFD[20186] = -4.11759763E-01;
  COFD[20187] = 1.79229378E-02;
  COFD[20188] = -1.95988902E+01;
  COFD[20189] = 4.81568564E+00;
  COFD[20190] = -4.11759763E-01;
  COFD[20191] = 1.79229378E-02;
  COFD[20192] = -1.80284219E+01;
  COFD[20193] = 4.40864461E+00;
  COFD[20194] = -3.63763109E-01;
  COFD[20195] = 1.60420204E-02;
  COFD[20196] = -1.83065016E+01;
  COFD[20197] = 4.54835769E+00;
  COFD[20198] = -3.81194036E-01;
  COFD[20199] = 1.67703153E-02;
  COFD[20200] = -2.00737449E+01;
  COFD[20201] = 5.02732445E+00;
  COFD[20202] = -4.33404796E-01;
  COFD[20203] = 1.86200998E-02;
  COFD[20204] = -2.00737449E+01;
  COFD[20205] = 5.02732445E+00;
  COFD[20206] = -4.33404796E-01;
  COFD[20207] = 1.86200998E-02;
  COFD[20208] = -2.00996961E+01;
  COFD[20209] = 5.02732445E+00;
  COFD[20210] = -4.33404796E-01;
  COFD[20211] = 1.86200998E-02;
  COFD[20212] = -2.00889371E+01;
  COFD[20213] = 5.02335992E+00;
  COFD[20214] = -4.33409572E-01;
  COFD[20215] = 1.86420385E-02;
  COFD[20216] = -1.93450338E+01;
  COFD[20217] = 4.73591519E+00;
  COFD[20218] = -4.02862908E-01;
  COFD[20219] = 1.75981577E-02;
  COFD[20220] = -2.09427456E+01;
  COFD[20221] = 5.07258549E+00;
  COFD[20222] = -4.21992675E-01;
  COFD[20223] = 1.74105511E-02;
  COFD[20224] = -1.94323607E+01;
  COFD[20225] = 4.21347895E+00;
  COFD[20226] = -2.72570973E-01;
  COFD[20227] = 9.38467228E-03;
  COFD[20228] = -1.94424932E+01;
  COFD[20229] = 4.21347895E+00;
  COFD[20230] = -2.72570973E-01;
  COFD[20231] = 9.38467228E-03;
  COFD[20232] = -2.00632191E+01;
  COFD[20233] = 4.53701285E+00;
  COFD[20234] = -3.25443481E-01;
  COFD[20235] = 1.21180475E-02;
  COFD[20236] = -2.00632191E+01;
  COFD[20237] = 4.53701285E+00;
  COFD[20238] = -3.25443481E-01;
  COFD[20239] = 1.21180475E-02;
  COFD[20240] = -1.96230821E+01;
  COFD[20241] = 4.29296671E+00;
  COFD[20242] = -2.85195578E-01;
  COFD[20243] = 1.00261411E-02;
  COFD[20244] = -2.08256710E+01;
  COFD[20245] = 5.11267190E+00;
  COFD[20246] = -4.33165102E-01;
  COFD[20247] = 1.81407852E-02;
  COFD[20248] = -2.08380673E+01;
  COFD[20249] = 5.11267190E+00;
  COFD[20250] = -4.33165102E-01;
  COFD[20251] = 1.81407852E-02;
  COFD[20252] = -2.08498201E+01;
  COFD[20253] = 5.11267190E+00;
  COFD[20254] = -4.33165102E-01;
  COFD[20255] = 1.81407852E-02;
  COFD[20256] = -2.08102625E+01;
  COFD[20257] = 4.99697590E+00;
  COFD[20258] = -4.06056891E-01;
  COFD[20259] = 1.64683071E-02;
  COFD[20260] = -2.09684519E+01;
  COFD[20261] = 5.06936561E+00;
  COFD[20262] = -4.20391597E-01;
  COFD[20263] = 1.72932254E-02;
  COFD[20264] = -2.09785632E+01;
  COFD[20265] = 5.06936561E+00;
  COFD[20266] = -4.20391597E-01;
  COFD[20267] = 1.72932254E-02;
  COFD[20268] = -2.01446226E+01;
  COFD[20269] = 5.03516244E+00;
  COFD[20270] = -4.33206320E-01;
  COFD[20271] = 1.85604611E-02;
  COFD[20272] = -2.01079804E+01;
  COFD[20273] = 4.47606207E+00;
  COFD[20274] = -3.15096463E-01;
  COFD[20275] = 1.15713778E-02;
  COFD[20276] = -2.01079804E+01;
  COFD[20277] = 4.47606207E+00;
  COFD[20278] = -3.15096463E-01;
  COFD[20279] = 1.15713778E-02;
  COFD[20280] = -1.80874969E+01;
  COFD[20281] = 4.40864461E+00;
  COFD[20282] = -3.63763109E-01;
  COFD[20283] = 1.60420204E-02;
  COFD[20284] = -1.83343082E+01;
  COFD[20285] = 4.54835769E+00;
  COFD[20286] = -3.81194036E-01;
  COFD[20287] = 1.67703153E-02;
  COFD[20288] = -1.83581962E+01;
  COFD[20289] = 4.54835769E+00;
  COFD[20290] = -3.81194036E-01;
  COFD[20291] = 1.67703153E-02;
  COFD[20292] = -1.92550867E+01;
  COFD[20293] = 4.29697226E+00;
  COFD[20294] = -2.85832295E-01;
  COFD[20295] = 1.00585155E-02;
  COFD[20296] = -1.84522759E+01;
  COFD[20297] = 4.40864461E+00;
  COFD[20298] = -3.63763109E-01;
  COFD[20299] = 1.60420204E-02;
  COFD[20300] = -1.93437003E+01;
  COFD[20301] = 4.73091965E+00;
  COFD[20302] = -4.02305999E-01;
  COFD[20303] = 1.75778646E-02;
  COFD[20304] = -2.08165540E+01;
  COFD[20305] = 5.10965671E+00;
  COFD[20306] = -4.34281725E-01;
  COFD[20307] = 1.82515265E-02;
  COFD[20308] = -2.09279720E+01;
  COFD[20309] = 5.07680752E+00;
  COFD[20310] = -4.24280733E-01;
  COFD[20311] = 1.75807248E-02;
  COFD[20312] = -1.98316531E+01;
  COFD[20313] = 4.90059433E+00;
  COFD[20314] = -4.21531841E-01;
  COFD[20315] = 1.82951913E-02;
  COFD[20316] = -1.85825816E+01;
  COFD[20317] = 4.46266131E+00;
  COFD[20318] = -3.70418513E-01;
  COFD[20319] = 1.63164500E-02;
  COFD[20320] = -1.87755546E+01;
  COFD[20321] = 3.88208519E+00;
  COFD[20322] = -2.20217240E-01;
  COFD[20323] = 6.73532722E-03;
  COFD[20324] = -1.87867269E+01;
  COFD[20325] = 3.88208519E+00;
  COFD[20326] = -2.20217240E-01;
  COFD[20327] = 6.73532722E-03;
  COFD[20328] = -2.01446476E+01;
  COFD[20329] = 5.03516244E+00;
  COFD[20330] = -4.33206320E-01;
  COFD[20331] = 1.85604611E-02;
  COFD[20332] = -2.09223240E+01;
  COFD[20333] = 5.07680752E+00;
  COFD[20334] = -4.24280733E-01;
  COFD[20335] = 1.75807248E-02;
  COFD[20336] = -2.09223240E+01;
  COFD[20337] = 5.07680752E+00;
  COFD[20338] = -4.24280733E-01;
  COFD[20339] = 1.75807248E-02;
  COFD[20340] = -2.09223240E+01;
  COFD[20341] = 5.07680752E+00;
  COFD[20342] = -4.24280733E-01;
  COFD[20343] = 1.75807248E-02;
  COFD[20344] = -2.09163577E+01;
  COFD[20345] = 5.07680752E+00;
  COFD[20346] = -4.24280733E-01;
  COFD[20347] = 1.75807248E-02;
  COFD[20348] = -1.93231690E+01;
  COFD[20349] = 4.73091965E+00;
  COFD[20350] = -4.02305999E-01;
  COFD[20351] = 1.75778646E-02;
  COFD[20352] = -2.02119205E+01;
  COFD[20353] = 5.00549123E+00;
  COFD[20354] = -4.31910843E-01;
  COFD[20355] = 1.86110298E-02;
  COFD[20356] = -2.12104221E+01;
  COFD[20357] = 5.04579208E+00;
  COFD[20358] = -4.15005635E-01;
  COFD[20359] = 1.69644826E-02;
  COFD[20360] = -2.12161697E+01;
  COFD[20361] = 5.04579208E+00;
  COFD[20362] = -4.15005635E-01;
  COFD[20363] = 1.69644826E-02;
  COFD[20364] = -2.01139425E+01;
  COFD[20365] = 4.47606207E+00;
  COFD[20366] = -3.15096463E-01;
  COFD[20367] = 1.15713778E-02;
  COFD[20368] = -2.01196988E+01;
  COFD[20369] = 4.47606207E+00;
  COFD[20370] = -3.15096463E-01;
  COFD[20371] = 1.15713778E-02;
  COFD[20372] = -2.03732954E+01;
  COFD[20373] = 4.87833205E+00;
  COFD[20374] = -3.83184121E-01;
  COFD[20375] = 1.51722127E-02;
  COFD[20376] = -1.84448418E+01;
  COFD[20377] = 4.54835769E+00;
  COFD[20378] = -3.81194036E-01;
  COFD[20379] = 1.67703153E-02;
  COFD[20380] = -2.00217171E+01;
  COFD[20381] = 4.95677205E+00;
  COFD[20382] = -4.27442820E-01;
  COFD[20383] = 1.84946244E-02;
  COFD[20384] = -2.09799471E+01;
  COFD[20385] = 5.05791374E+00;
  COFD[20386] = -4.17418303E-01;
  COFD[20387] = 1.71036721E-02;
  COFD[20388] = -2.10872917E+01;
  COFD[20389] = 5.05791374E+00;
  COFD[20390] = -4.17418303E-01;
  COFD[20391] = 1.71036721E-02;
  COFD[20392] = -2.11491715E+01;
  COFD[20393] = 5.05791374E+00;
  COFD[20394] = -4.17418303E-01;
  COFD[20395] = 1.71036721E-02;
  COFD[20396] = -2.06414835E+01;
  COFD[20397] = 4.99624565E+00;
  COFD[20398] = -4.31149471E-01;
  COFD[20399] = 1.85962718E-02;
  COFD[20400] = -2.09714925E+01;
  COFD[20401] = 5.05791374E+00;
  COFD[20402] = -4.17418303E-01;
  COFD[20403] = 1.71036721E-02;
  COFD[20404] = -2.10828360E+01;
  COFD[20405] = 5.05791374E+00;
  COFD[20406] = -4.17418303E-01;
  COFD[20407] = 1.71036721E-02;
  COFD[20408] = -2.03056801E+01;
  COFD[20409] = 4.93122634E+00;
  COFD[20410] = -4.24887811E-01;
  COFD[20411] = 1.84152882E-02;
  COFD[20412] = -2.09626597E+01;
  COFD[20413] = 5.05791374E+00;
  COFD[20414] = -4.17418303E-01;
  COFD[20415] = 1.71036721E-02;
  COFD[20416] = -1.98374825E+01;
  COFD[20417] = 4.82316922E+00;
  COFD[20418] = -4.12681790E-01;
  COFD[20419] = 1.79610014E-02;
  COFD[20420] = -1.92754269E+01;
  COFD[20421] = 4.70500352E+00;
  COFD[20422] = -3.99518710E-01;
  COFD[20423] = 1.74813016E-02;
  COFD[20424] = -2.10569301E+01;
  COFD[20425] = 4.82252782E+00;
  COFD[20426] = -3.73027863E-01;
  COFD[20427] = 1.46137165E-02;
  COFD[20428] = -2.10107226E+01;
  COFD[20429] = 4.82252782E+00;
  COFD[20430] = -3.73027863E-01;
  COFD[20431] = 1.46137165E-02;
  COFD[20432] = -2.09417196E+01;
  COFD[20433] = 4.82252782E+00;
  COFD[20434] = -3.73027863E-01;
  COFD[20435] = 1.46137165E-02;
  COFD[20436] = -1.64606257E+01;
  COFD[20437] = 2.62390123E+00;
  COFD[20438] = -2.65386143E-02;
  COFD[20439] = -2.87407111E-03;
  COFD[20440] = -2.12104221E+01;
  COFD[20441] = 5.04579208E+00;
  COFD[20442] = -4.15005635E-01;
  COFD[20443] = 1.69644826E-02;
  COFD[20444] = -2.12104221E+01;
  COFD[20445] = 5.04579208E+00;
  COFD[20446] = -4.15005635E-01;
  COFD[20447] = 1.69644826E-02;
  COFD[20448] = -1.51657506E+01;
  COFD[20449] = 3.67829613E+00;
  COFD[20450] = -2.71248709E-01;
  COFD[20451] = 1.21233589E-02;
  COFD[20452] = -1.84504600E+01;
  COFD[20453] = 5.02876303E+00;
  COFD[20454] = -4.33391605E-01;
  COFD[20455] = 1.86111689E-02;
  COFD[20456] = -1.83836850E+01;
  COFD[20457] = 4.54835769E+00;
  COFD[20458] = -3.81194036E-01;
  COFD[20459] = 1.67703153E-02;
  COFD[20460] = -1.95815882E+01;
  COFD[20461] = 4.81568564E+00;
  COFD[20462] = -4.11759763E-01;
  COFD[20463] = 1.79229378E-02;
  COFD[20464] = -1.84057767E+01;
  COFD[20465] = 4.54835769E+00;
  COFD[20466] = -3.81194036E-01;
  COFD[20467] = 1.67703153E-02;
  COFD[20468] = -1.83546056E+01;
  COFD[20469] = 3.86526682E+00;
  COFD[20470] = -2.17594533E-01;
  COFD[20471] = 6.60377130E-03;
  COFD[20472] = -1.95904286E+01;
  COFD[20473] = 4.81568564E+00;
  COFD[20474] = -4.11759763E-01;
  COFD[20475] = 1.79229378E-02;
  COFD[20476] = -1.95988902E+01;
  COFD[20477] = 4.81568564E+00;
  COFD[20478] = -4.11759763E-01;
  COFD[20479] = 1.79229378E-02;
  COFD[20480] = -1.80284219E+01;
  COFD[20481] = 4.40864461E+00;
  COFD[20482] = -3.63763109E-01;
  COFD[20483] = 1.60420204E-02;
  COFD[20484] = -1.83065016E+01;
  COFD[20485] = 4.54835769E+00;
  COFD[20486] = -3.81194036E-01;
  COFD[20487] = 1.67703153E-02;
  COFD[20488] = -2.00737449E+01;
  COFD[20489] = 5.02732445E+00;
  COFD[20490] = -4.33404796E-01;
  COFD[20491] = 1.86200998E-02;
  COFD[20492] = -2.00737449E+01;
  COFD[20493] = 5.02732445E+00;
  COFD[20494] = -4.33404796E-01;
  COFD[20495] = 1.86200998E-02;
  COFD[20496] = -2.00996961E+01;
  COFD[20497] = 5.02732445E+00;
  COFD[20498] = -4.33404796E-01;
  COFD[20499] = 1.86200998E-02;
  COFD[20500] = -2.00889371E+01;
  COFD[20501] = 5.02335992E+00;
  COFD[20502] = -4.33409572E-01;
  COFD[20503] = 1.86420385E-02;
  COFD[20504] = -1.93450338E+01;
  COFD[20505] = 4.73591519E+00;
  COFD[20506] = -4.02862908E-01;
  COFD[20507] = 1.75981577E-02;
  COFD[20508] = -2.09427456E+01;
  COFD[20509] = 5.07258549E+00;
  COFD[20510] = -4.21992675E-01;
  COFD[20511] = 1.74105511E-02;
  COFD[20512] = -1.94323607E+01;
  COFD[20513] = 4.21347895E+00;
  COFD[20514] = -2.72570973E-01;
  COFD[20515] = 9.38467228E-03;
  COFD[20516] = -1.94424932E+01;
  COFD[20517] = 4.21347895E+00;
  COFD[20518] = -2.72570973E-01;
  COFD[20519] = 9.38467228E-03;
  COFD[20520] = -2.00632191E+01;
  COFD[20521] = 4.53701285E+00;
  COFD[20522] = -3.25443481E-01;
  COFD[20523] = 1.21180475E-02;
  COFD[20524] = -2.00632191E+01;
  COFD[20525] = 4.53701285E+00;
  COFD[20526] = -3.25443481E-01;
  COFD[20527] = 1.21180475E-02;
  COFD[20528] = -1.96230821E+01;
  COFD[20529] = 4.29296671E+00;
  COFD[20530] = -2.85195578E-01;
  COFD[20531] = 1.00261411E-02;
  COFD[20532] = -2.08256710E+01;
  COFD[20533] = 5.11267190E+00;
  COFD[20534] = -4.33165102E-01;
  COFD[20535] = 1.81407852E-02;
  COFD[20536] = -2.08380673E+01;
  COFD[20537] = 5.11267190E+00;
  COFD[20538] = -4.33165102E-01;
  COFD[20539] = 1.81407852E-02;
  COFD[20540] = -2.08498201E+01;
  COFD[20541] = 5.11267190E+00;
  COFD[20542] = -4.33165102E-01;
  COFD[20543] = 1.81407852E-02;
  COFD[20544] = -2.08102625E+01;
  COFD[20545] = 4.99697590E+00;
  COFD[20546] = -4.06056891E-01;
  COFD[20547] = 1.64683071E-02;
  COFD[20548] = -2.09684519E+01;
  COFD[20549] = 5.06936561E+00;
  COFD[20550] = -4.20391597E-01;
  COFD[20551] = 1.72932254E-02;
  COFD[20552] = -2.09785632E+01;
  COFD[20553] = 5.06936561E+00;
  COFD[20554] = -4.20391597E-01;
  COFD[20555] = 1.72932254E-02;
  COFD[20556] = -2.01446226E+01;
  COFD[20557] = 5.03516244E+00;
  COFD[20558] = -4.33206320E-01;
  COFD[20559] = 1.85604611E-02;
  COFD[20560] = -2.01079804E+01;
  COFD[20561] = 4.47606207E+00;
  COFD[20562] = -3.15096463E-01;
  COFD[20563] = 1.15713778E-02;
  COFD[20564] = -2.01079804E+01;
  COFD[20565] = 4.47606207E+00;
  COFD[20566] = -3.15096463E-01;
  COFD[20567] = 1.15713778E-02;
  COFD[20568] = -1.80874969E+01;
  COFD[20569] = 4.40864461E+00;
  COFD[20570] = -3.63763109E-01;
  COFD[20571] = 1.60420204E-02;
  COFD[20572] = -1.83343082E+01;
  COFD[20573] = 4.54835769E+00;
  COFD[20574] = -3.81194036E-01;
  COFD[20575] = 1.67703153E-02;
  COFD[20576] = -1.83581962E+01;
  COFD[20577] = 4.54835769E+00;
  COFD[20578] = -3.81194036E-01;
  COFD[20579] = 1.67703153E-02;
  COFD[20580] = -1.92550867E+01;
  COFD[20581] = 4.29697226E+00;
  COFD[20582] = -2.85832295E-01;
  COFD[20583] = 1.00585155E-02;
  COFD[20584] = -1.84522759E+01;
  COFD[20585] = 4.40864461E+00;
  COFD[20586] = -3.63763109E-01;
  COFD[20587] = 1.60420204E-02;
  COFD[20588] = -1.93437003E+01;
  COFD[20589] = 4.73091965E+00;
  COFD[20590] = -4.02305999E-01;
  COFD[20591] = 1.75778646E-02;
  COFD[20592] = -2.08165540E+01;
  COFD[20593] = 5.10965671E+00;
  COFD[20594] = -4.34281725E-01;
  COFD[20595] = 1.82515265E-02;
  COFD[20596] = -2.09279720E+01;
  COFD[20597] = 5.07680752E+00;
  COFD[20598] = -4.24280733E-01;
  COFD[20599] = 1.75807248E-02;
  COFD[20600] = -1.98316531E+01;
  COFD[20601] = 4.90059433E+00;
  COFD[20602] = -4.21531841E-01;
  COFD[20603] = 1.82951913E-02;
  COFD[20604] = -1.85825816E+01;
  COFD[20605] = 4.46266131E+00;
  COFD[20606] = -3.70418513E-01;
  COFD[20607] = 1.63164500E-02;
  COFD[20608] = -1.87755546E+01;
  COFD[20609] = 3.88208519E+00;
  COFD[20610] = -2.20217240E-01;
  COFD[20611] = 6.73532722E-03;
  COFD[20612] = -1.87867269E+01;
  COFD[20613] = 3.88208519E+00;
  COFD[20614] = -2.20217240E-01;
  COFD[20615] = 6.73532722E-03;
  COFD[20616] = -2.01446476E+01;
  COFD[20617] = 5.03516244E+00;
  COFD[20618] = -4.33206320E-01;
  COFD[20619] = 1.85604611E-02;
  COFD[20620] = -2.09223240E+01;
  COFD[20621] = 5.07680752E+00;
  COFD[20622] = -4.24280733E-01;
  COFD[20623] = 1.75807248E-02;
  COFD[20624] = -2.09223240E+01;
  COFD[20625] = 5.07680752E+00;
  COFD[20626] = -4.24280733E-01;
  COFD[20627] = 1.75807248E-02;
  COFD[20628] = -2.09223240E+01;
  COFD[20629] = 5.07680752E+00;
  COFD[20630] = -4.24280733E-01;
  COFD[20631] = 1.75807248E-02;
  COFD[20632] = -2.09163577E+01;
  COFD[20633] = 5.07680752E+00;
  COFD[20634] = -4.24280733E-01;
  COFD[20635] = 1.75807248E-02;
  COFD[20636] = -1.93231690E+01;
  COFD[20637] = 4.73091965E+00;
  COFD[20638] = -4.02305999E-01;
  COFD[20639] = 1.75778646E-02;
  COFD[20640] = -2.02119205E+01;
  COFD[20641] = 5.00549123E+00;
  COFD[20642] = -4.31910843E-01;
  COFD[20643] = 1.86110298E-02;
  COFD[20644] = -2.12104221E+01;
  COFD[20645] = 5.04579208E+00;
  COFD[20646] = -4.15005635E-01;
  COFD[20647] = 1.69644826E-02;
  COFD[20648] = -2.12161697E+01;
  COFD[20649] = 5.04579208E+00;
  COFD[20650] = -4.15005635E-01;
  COFD[20651] = 1.69644826E-02;
  COFD[20652] = -2.01139425E+01;
  COFD[20653] = 4.47606207E+00;
  COFD[20654] = -3.15096463E-01;
  COFD[20655] = 1.15713778E-02;
  COFD[20656] = -2.01196988E+01;
  COFD[20657] = 4.47606207E+00;
  COFD[20658] = -3.15096463E-01;
  COFD[20659] = 1.15713778E-02;
  COFD[20660] = -2.03732954E+01;
  COFD[20661] = 4.87833205E+00;
  COFD[20662] = -3.83184121E-01;
  COFD[20663] = 1.51722127E-02;
  COFD[20664] = -1.84448418E+01;
  COFD[20665] = 4.54835769E+00;
  COFD[20666] = -3.81194036E-01;
  COFD[20667] = 1.67703153E-02;
  COFD[20668] = -2.00217171E+01;
  COFD[20669] = 4.95677205E+00;
  COFD[20670] = -4.27442820E-01;
  COFD[20671] = 1.84946244E-02;
  COFD[20672] = -2.09799471E+01;
  COFD[20673] = 5.05791374E+00;
  COFD[20674] = -4.17418303E-01;
  COFD[20675] = 1.71036721E-02;
  COFD[20676] = -2.10872917E+01;
  COFD[20677] = 5.05791374E+00;
  COFD[20678] = -4.17418303E-01;
  COFD[20679] = 1.71036721E-02;
  COFD[20680] = -2.11491715E+01;
  COFD[20681] = 5.05791374E+00;
  COFD[20682] = -4.17418303E-01;
  COFD[20683] = 1.71036721E-02;
  COFD[20684] = -2.06414835E+01;
  COFD[20685] = 4.99624565E+00;
  COFD[20686] = -4.31149471E-01;
  COFD[20687] = 1.85962718E-02;
  COFD[20688] = -2.09714925E+01;
  COFD[20689] = 5.05791374E+00;
  COFD[20690] = -4.17418303E-01;
  COFD[20691] = 1.71036721E-02;
  COFD[20692] = -2.10828360E+01;
  COFD[20693] = 5.05791374E+00;
  COFD[20694] = -4.17418303E-01;
  COFD[20695] = 1.71036721E-02;
  COFD[20696] = -2.03056801E+01;
  COFD[20697] = 4.93122634E+00;
  COFD[20698] = -4.24887811E-01;
  COFD[20699] = 1.84152882E-02;
  COFD[20700] = -2.09626597E+01;
  COFD[20701] = 5.05791374E+00;
  COFD[20702] = -4.17418303E-01;
  COFD[20703] = 1.71036721E-02;
  COFD[20704] = -1.98374825E+01;
  COFD[20705] = 4.82316922E+00;
  COFD[20706] = -4.12681790E-01;
  COFD[20707] = 1.79610014E-02;
  COFD[20708] = -1.92754269E+01;
  COFD[20709] = 4.70500352E+00;
  COFD[20710] = -3.99518710E-01;
  COFD[20711] = 1.74813016E-02;
  COFD[20712] = -2.10569301E+01;
  COFD[20713] = 4.82252782E+00;
  COFD[20714] = -3.73027863E-01;
  COFD[20715] = 1.46137165E-02;
  COFD[20716] = -2.10107226E+01;
  COFD[20717] = 4.82252782E+00;
  COFD[20718] = -3.73027863E-01;
  COFD[20719] = 1.46137165E-02;
  COFD[20720] = -2.09417196E+01;
  COFD[20721] = 4.82252782E+00;
  COFD[20722] = -3.73027863E-01;
  COFD[20723] = 1.46137165E-02;
  COFD[20724] = -1.64606257E+01;
  COFD[20725] = 2.62390123E+00;
  COFD[20726] = -2.65386143E-02;
  COFD[20727] = -2.87407111E-03;
  COFD[20728] = -2.12104221E+01;
  COFD[20729] = 5.04579208E+00;
  COFD[20730] = -4.15005635E-01;
  COFD[20731] = 1.69644826E-02;
  COFD[20732] = -2.12104221E+01;
  COFD[20733] = 5.04579208E+00;
  COFD[20734] = -4.15005635E-01;
  COFD[20735] = 1.69644826E-02;
}

// List of specs with small weight, dim NLITE
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKTDIF(int* KTDIF)
{
  KTDIF[0] = 0;
  KTDIF[1] = 1;
}

// Poly fits for thermal diff ratios, dim NO*NLITE*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFTD(amrex::Real* COFTD)
{
  COFTD[0] = 0.00000000E+00;
  COFTD[1] = 0.00000000E+00;
  COFTD[2] = 0.00000000E+00;
  COFTD[3] = 0.00000000E+00;
  COFTD[4] = -1.16421339E-01;
  COFTD[5] = -1.38692194E-04;
  COFTD[6] = 8.45719641E-08;
  COFTD[7] = -1.56452821E-11;
  COFTD[8] = 3.55782803E-01;
  COFTD[9] = 1.46255060E-04;
  COFTD[10] = -9.08905178E-08;
  COFTD[11] = 1.78130397E-11;
  COFTD[12] = 3.60135770E-01;
  COFTD[13] = 2.61070827E-04;
  COFTD[14] = -1.62068288E-07;
  COFTD[15] = 3.07982230E-11;
  COFTD[16] = 3.61218893E-01;
  COFTD[17] = 1.48489725E-04;
  COFTD[18] = -9.22792557E-08;
  COFTD[19] = 1.80852094E-11;
  COFTD[20] = -3.43472005E-02;
  COFTD[21] = 7.93709375E-04;
  COFTD[22] = -4.14025000E-07;
  COFTD[23] = 6.81882239E-11;
  COFTD[24] = 3.61529715E-01;
  COFTD[25] = 2.62081331E-04;
  COFTD[26] = -1.62695591E-07;
  COFTD[27] = 3.09174309E-11;
  COFTD[28] = 3.62845665E-01;
  COFTD[29] = 2.63035293E-04;
  COFTD[30] = -1.63287795E-07;
  COFTD[31] = 3.10299687E-11;
  COFTD[32] = 3.38547779E-01;
  COFTD[33] = 1.07263312E-04;
  COFTD[34] = -6.59248232E-08;
  COFTD[35] = 1.30945993E-11;
  COFTD[36] = 3.35449031E-01;
  COFTD[37] = 1.37896260E-04;
  COFTD[38] = -8.56959242E-08;
  COFTD[39] = 1.67949852E-11;
  COFTD[40] = 2.62573172E-01;
  COFTD[41] = 3.09382247E-04;
  COFTD[42] = -1.88749568E-07;
  COFTD[43] = 3.49376894E-11;
  COFTD[44] = 2.62573172E-01;
  COFTD[45] = 3.09382247E-04;
  COFTD[46] = -1.88749568E-07;
  COFTD[47] = 3.49376894E-11;
  COFTD[48] = 2.67783948E-01;
  COFTD[49] = 3.15521951E-04;
  COFTD[50] = -1.92495311E-07;
  COFTD[51] = 3.56310294E-11;
  COFTD[52] = 2.75370352E-01;
  COFTD[53] = 3.15183548E-04;
  COFTD[54] = -1.92538361E-07;
  COFTD[55] = 3.56936143E-11;
  COFTD[56] = 3.67782382E-01;
  COFTD[57] = 2.26606264E-04;
  COFTD[58] = -1.41098685E-07;
  COFTD[59] = 2.70541555E-11;
  COFTD[60] = 2.10825694E-01;
  COFTD[61] = 5.75676360E-04;
  COFTD[62] = -3.36366668E-07;
  COFTD[63] = 5.98121087E-11;
  COFTD[64] = 4.87848176E-02;
  COFTD[65] = 7.73410923E-04;
  COFTD[66] = -4.22393894E-07;
  COFTD[67] = 7.16144327E-11;
  COFTD[68] = 4.90139836E-02;
  COFTD[69] = 7.77044010E-04;
  COFTD[70] = -4.24378084E-07;
  COFTD[71] = 7.19508405E-11;
  COFTD[72] = 6.49839457E-02;
  COFTD[73] = 7.60534965E-04;
  COFTD[74] = -4.18456290E-07;
  COFTD[75] = 7.12918048E-11;
  COFTD[76] = 6.49839457E-02;
  COFTD[77] = 7.60534965E-04;
  COFTD[78] = -4.18456290E-07;
  COFTD[79] = 7.12918048E-11;
  COFTD[80] = 5.64975069E-02;
  COFTD[81] = 7.74837956E-04;
  COFTD[82] = -4.24588431E-07;
  COFTD[83] = 7.21431854E-11;
  COFTD[84] = 2.27876006E-01;
  COFTD[85] = 4.82905341E-04;
  COFTD[86] = -2.85992648E-07;
  COFTD[87] = 5.14217005E-11;
  COFTD[88] = 2.29310480E-01;
  COFTD[89] = 4.85945219E-04;
  COFTD[90] = -2.87792965E-07;
  COFTD[91] = 5.17453990E-11;
  COFTD[92] = 2.30645446E-01;
  COFTD[93] = 4.88774224E-04;
  COFTD[94] = -2.89468396E-07;
  COFTD[95] = 5.20466428E-11;
  COFTD[96] = 1.70570651E-01;
  COFTD[97] = 5.94972048E-04;
  COFTD[98] = -3.43281905E-07;
  COFTD[99] = 6.04517452E-11;
  COFTD[100] = 1.94074829E-01;
  COFTD[101] = 5.60856911E-04;
  COFTD[102] = -3.26734451E-07;
  COFTD[103] = 5.79635702E-11;
  COFTD[104] = 1.94983762E-01;
  COFTD[105] = 5.63483635E-04;
  COFTD[106] = -3.28264683E-07;
  COFTD[107] = 5.82350376E-11;
  COFTD[108] = 3.10049332E-01;
  COFTD[109] = 3.89729191E-04;
  COFTD[110] = -2.37061613E-07;
  COFTD[111] = 4.37318731E-11;
  COFTD[112] = 8.03812817E-02;
  COFTD[113] = 7.69677878E-04;
  COFTD[114] = -4.25974508E-07;
  COFTD[115] = 7.28543348E-11;
  COFTD[116] = 8.03812817E-02;
  COFTD[117] = 7.69677878E-04;
  COFTD[118] = -4.25974508E-07;
  COFTD[119] = 7.28543348E-11;
  COFTD[120] = 3.55560525E-01;
  COFTD[121] = 1.12653521E-04;
  COFTD[122] = -6.92376857E-08;
  COFTD[123] = 1.37526307E-11;
  COFTD[124] = 3.49855460E-01;
  COFTD[125] = 1.43818450E-04;
  COFTD[126] = -8.93762814E-08;
  COFTD[127] = 1.75162744E-11;
  COFTD[128] = 3.55919294E-01;
  COFTD[129] = 1.46311168E-04;
  COFTD[130] = -9.09253867E-08;
  COFTD[131] = 1.78198735E-11;
  COFTD[132] = 2.33840688E-02;
  COFTD[133] = 7.25584204E-04;
  COFTD[134] = -3.91818348E-07;
  COFTD[135] = 6.59485637E-11;
  COFTD[136] = 4.13398125E-01;
  COFTD[137] = 1.30978416E-04;
  COFTD[138] = -8.05003015E-08;
  COFTD[139] = 1.59897159E-11;
  COFTD[140] = 3.72228473E-01;
  COFTD[141] = 2.26892332E-04;
  COFTD[142] = -1.41295821E-07;
  COFTD[143] = 2.71079600E-11;
  COFTD[144] = 2.54692564E-01;
  COFTD[145] = 5.03171153E-04;
  COFTD[146] = -2.99111550E-07;
  COFTD[147] = 5.39550742E-11;
  COFTD[148] = 2.21469940E-01;
  COFTD[149] = 5.57597276E-04;
  COFTD[150] = -3.27205286E-07;
  COFTD[151] = 5.83835301E-11;
  COFTD[152] = 3.44992073E-01;
  COFTD[153] = 2.88458534E-04;
  COFTD[154] = -1.78357621E-07;
  COFTD[155] = 3.36293385E-11;
  COFTD[156] = 4.00735147E-01;
  COFTD[157] = 1.42667985E-04;
  COFTD[158] = -8.82228736E-08;
  COFTD[159] = 1.74203355E-11;
  COFTD[160] = 2.08273084E-02;
  COFTD[161] = 7.98019698E-04;
  COFTD[162] = -4.29895343E-07;
  COFTD[163] = 7.22461668E-11;
  COFTD[164] = 2.09399389E-02;
  COFTD[165] = 8.02335252E-04;
  COFTD[166] = -4.32220143E-07;
  COFTD[167] = 7.26368617E-11;
  COFTD[168] = 3.10052309E-01;
  COFTD[169] = 3.89732934E-04;
  COFTD[170] = -2.37063889E-07;
  COFTD[171] = 4.37322931E-11;
  COFTD[172] = 2.21003532E-01;
  COFTD[173] = 5.56422996E-04;
  COFTD[174] = -3.26516203E-07;
  COFTD[175] = 5.82605765E-11;
  COFTD[176] = 2.21003532E-01;
  COFTD[177] = 5.56422996E-04;
  COFTD[178] = -3.26516203E-07;
  COFTD[179] = 5.82605765E-11;
  COFTD[180] = 2.21003532E-01;
  COFTD[181] = 5.56422996E-04;
  COFTD[182] = -3.26516203E-07;
  COFTD[183] = 5.82605765E-11;
  COFTD[184] = 2.20506113E-01;
  COFTD[185] = 5.55170637E-04;
  COFTD[186] = -3.25781303E-07;
  COFTD[187] = 5.81294476E-11;
  COFTD[188] = 3.68671659E-01;
  COFTD[189] = 2.24724271E-04;
  COFTD[190] = -1.39945675E-07;
  COFTD[191] = 2.68489310E-11;
  COFTD[192] = 3.27055944E-01;
  COFTD[193] = 3.53794569E-04;
  COFTD[194] = -2.16654910E-07;
  COFTD[195] = 4.02850790E-11;
  COFTD[196] = 1.90736040E-01;
  COFTD[197] = 6.07245831E-04;
  COFTD[198] = -3.51990386E-07;
  COFTD[199] = 6.22028634E-11;
  COFTD[200] = 1.91145333E-01;
  COFTD[201] = 6.08548895E-04;
  COFTD[202] = -3.52745708E-07;
  COFTD[203] = 6.23363420E-11;
  COFTD[204] = 8.05624354E-02;
  COFTD[205] = 7.71412486E-04;
  COFTD[206] = -4.26934518E-07;
  COFTD[207] = 7.30185251E-11;
  COFTD[208] = 8.07356617E-02;
  COFTD[209] = 7.73071187E-04;
  COFTD[210] = -4.27852518E-07;
  COFTD[211] = 7.31755305E-11;
  COFTD[212] = 8.09348042E-02;
  COFTD[213] = 6.80435758E-04;
  COFTD[214] = -3.78179113E-07;
  COFTD[215] = 6.48627960E-11;
  COFTD[216] = 3.70425562E-01;
  COFTD[217] = 1.52274399E-04;
  COFTD[218] = -9.46312493E-08;
  COFTD[219] = 1.85461613E-11;
  COFTD[220] = 3.40327401E-01;
  COFTD[221] = 3.22021565E-04;
  COFTD[222] = -1.98257873E-07;
  COFTD[223] = 3.71306433E-11;
  COFTD[224] = 1.67165060E-01;
  COFTD[225] = 6.22698467E-04;
  COFTD[226] = -3.58107452E-07;
  COFTD[227] = 6.29093179E-11;
  COFTD[228] = 1.74173269E-01;
  COFTD[229] = 6.48804407E-04;
  COFTD[230] = -3.73120708E-07;
  COFTD[231] = 6.55467210E-11;
  COFTD[232] = 1.77680710E-01;
  COFTD[233] = 6.61869808E-04;
  COFTD[234] = -3.80634485E-07;
  COFTD[235] = 6.68666784E-11;
  COFTD[236] = 3.49226108E-01;
  COFTD[237] = 3.66697440E-04;
  COFTD[238] = -2.24836961E-07;
  COFTD[239] = 4.18730159E-11;
  COFTD[240] = 1.66559497E-01;
  COFTD[241] = 6.20442716E-04;
  COFTD[242] = -3.56810193E-07;
  COFTD[243] = 6.26814262E-11;
  COFTD[244] = 1.73906344E-01;
  COFTD[245] = 6.47810100E-04;
  COFTD[246] = -3.72548892E-07;
  COFTD[247] = 6.54462692E-11;
  COFTD[248] = 3.64050661E-01;
  COFTD[249] = 3.23427128E-04;
  COFTD[250] = -1.99576478E-07;
  COFTD[251] = 3.75057882E-11;
  COFTD[252] = 1.65918064E-01;
  COFTD[253] = 6.18053343E-04;
  COFTD[254] = -3.55436089E-07;
  COFTD[255] = 6.24400352E-11;
  COFTD[256] = 3.75954981E-01;
  COFTD[257] = 2.75207819E-04;
  COFTD[258] = -1.70804072E-07;
  COFTD[259] = 3.24409137E-11;
  COFTD[260] = 3.79124834E-01;
  COFTD[261] = 2.16563364E-04;
  COFTD[262] = -1.34947656E-07;
  COFTD[263] = 2.59824139E-11;
  COFTD[264] = 1.35758062E-01;
  COFTD[265] = 7.35688437E-04;
  COFTD[266] = -4.15828789E-07;
  COFTD[267] = 7.21466835E-11;
  COFTD[268] = 1.33915903E-01;
  COFTD[269] = 7.25705568E-04;
  COFTD[270] = -4.10186231E-07;
  COFTD[271] = 7.11676944E-11;
  COFTD[272] = 1.30881840E-01;
  COFTD[273] = 7.09263633E-04;
  COFTD[274] = -4.00892854E-07;
  COFTD[275] = 6.95552849E-11;
  COFTD[276] = -6.25179544E-02;
  COFTD[277] = 9.30047237E-04;
  COFTD[278] = -4.78503124E-07;
  COFTD[279] = 7.81394889E-11;
  COFTD[280] = 1.90736040E-01;
  COFTD[281] = 6.07245831E-04;
  COFTD[282] = -3.51990386E-07;
  COFTD[283] = 6.22028634E-11;
  COFTD[284] = 1.90736040E-01;
  COFTD[285] = 6.07245831E-04;
  COFTD[286] = -3.51990386E-07;
  COFTD[287] = 6.22028634E-11;
  COFTD[288] = 1.16421339E-01;
  COFTD[289] = 1.38692194E-04;
  COFTD[290] = -8.45719641E-08;
  COFTD[291] = 1.56452821E-11;
  COFTD[292] = 0.00000000E+00;
  COFTD[293] = 0.00000000E+00;
  COFTD[294] = 0.00000000E+00;
  COFTD[295] = 0.00000000E+00;
  COFTD[296] = 1.55560711E-01;
  COFTD[297] = 6.34290504E-04;
  COFTD[298] = -3.63175898E-07;
  COFTD[299] = 6.35944252E-11;
  COFTD[300] = 9.73789108E-02;
  COFTD[301] = 7.76092497E-04;
  COFTD[302] = -4.32136914E-07;
  COFTD[303] = 7.42088411E-11;
  COFTD[304] = 1.56731251E-01;
  COFTD[305] = 6.39063317E-04;
  COFTD[306] = -3.65908669E-07;
  COFTD[307] = 6.40729509E-11;
  COFTD[308] = -1.87070220E-01;
  COFTD[309] = 8.88869775E-04;
  COFTD[310] = -3.95576743E-07;
  COFTD[311] = 5.89380124E-11;
  COFTD[312] = 9.75666421E-02;
  COFTD[313] = 7.77588682E-04;
  COFTD[314] = -4.32970006E-07;
  COFTD[315] = 7.43519041E-11;
  COFTD[316] = 9.77435669E-02;
  COFTD[317] = 7.78998741E-04;
  COFTD[318] = -4.33755142E-07;
  COFTD[319] = 7.44867319E-11;
  COFTD[320] = 1.72713358E-01;
  COFTD[321] = 5.70627386E-04;
  COFTD[322] = -3.30139229E-07;
  COFTD[323] = 5.82574812E-11;
  COFTD[324] = 1.51116330E-01;
  COFTD[325] = 6.16168777E-04;
  COFTD[326] = -3.52799935E-07;
  COFTD[327] = 6.17775277E-11;
  COFTD[328] = 2.81131364E-02;
  COFTD[329] = 7.94206661E-04;
  COFTD[330] = -4.29400393E-07;
  COFTD[331] = 7.23307867E-11;
  COFTD[332] = 2.81131364E-02;
  COFTD[333] = 7.94206661E-04;
  COFTD[334] = -4.29400393E-07;
  COFTD[335] = 7.23307867E-11;
  COFTD[336] = 2.83866615E-02;
  COFTD[337] = 8.01933847E-04;
  COFTD[338] = -4.33578218E-07;
  COFTD[339] = 7.30345248E-11;
  COFTD[340] = 3.24572613E-02;
  COFTD[341] = 8.04279262E-04;
  COFTD[342] = -4.35666975E-07;
  COFTD[343] = 7.34750883E-11;
  COFTD[344] = 1.17322206E-01;
  COFTD[345] = 7.39889416E-04;
  COFTD[346] = -4.15594806E-07;
  COFTD[347] = 7.17938755E-11;
  COFTD[348] = -8.05343148E-02;
  COFTD[349] = 9.78232386E-04;
  COFTD[350] = -4.98472849E-07;
  COFTD[351] = 8.09197349E-11;
  COFTD[352] = -1.82973611E-01;
  COFTD[353] = 9.50052024E-04;
  COFTD[354] = -4.34856738E-07;
  COFTD[355] = 6.60045135E-11;
  COFTD[356] = -1.83401360E-01;
  COFTD[357] = 9.52273019E-04;
  COFTD[358] = -4.35873329E-07;
  COFTD[359] = 6.61588163E-11;
  COFTD[360] = -1.63879393E-01;
  COFTD[361] = 9.72676389E-04;
  COFTD[362] = -4.59428664E-07;
  COFTD[363] = 7.11536390E-11;
  COFTD[364] = -1.63879393E-01;
  COFTD[365] = 9.72676389E-04;
  COFTD[366] = -4.59428664E-07;
  COFTD[367] = 7.11536390E-11;
  COFTD[368] = -1.80812802E-01;
  COFTD[369] = 9.60624000E-04;
  COFTD[370] = -4.42426575E-07;
  COFTD[371] = 6.74237206E-11;
  COFTD[372] = -4.81603845E-02;
  COFTD[373] = 9.23804831E-04;
  COFTD[374] = -4.79529295E-07;
  COFTD[375] = 7.87371657E-11;
  COFTD[376] = -4.83110206E-02;
  COFTD[377] = 9.26694307E-04;
  COFTD[378] = -4.81029166E-07;
  COFTD[379] = 7.89834397E-11;
  COFTD[380] = -4.84508316E-02;
  COFTD[381] = 9.29376141E-04;
  COFTD[382] = -4.82421254E-07;
  COFTD[383] = 7.92120162E-11;
  COFTD[384] = -1.03673924E-01;
  COFTD[385] = 9.65823757E-04;
  COFTD[386] = -4.83438833E-07;
  COFTD[387] = 7.76222949E-11;
  COFTD[388] = -8.48508801E-02;
  COFTD[389] = 9.59056589E-04;
  COFTD[390] = -4.86676764E-07;
  COFTD[391] = 7.88034046E-11;
  COFTD[392] = -8.50486497E-02;
  COFTD[393] = 9.61291949E-04;
  COFTD[394] = -4.87811106E-07;
  COFTD[395] = 7.89870788E-11;
  COFTD[396] = 2.16978351E-02;
  COFTD[397] = 8.83729018E-04;
  COFTD[398] = -4.75773035E-07;
  COFTD[399] = 7.99246908E-11;
  COFTD[400] = -1.72215794E-01;
  COFTD[401] = 9.85813553E-04;
  COFTD[402] = -4.62156174E-07;
  COFTD[403] = 7.12364828E-11;
  COFTD[404] = -1.72215794E-01;
  COFTD[405] = 9.85813553E-04;
  COFTD[406] = -4.62156174E-07;
  COFTD[407] = 7.12364828E-11;
  COFTD[408] = 1.76920048E-01;
  COFTD[409] = 5.84525863E-04;
  COFTD[410] = -3.38180260E-07;
  COFTD[411] = 5.96764287E-11;
  COFTD[412] = 1.54275983E-01;
  COFTD[413] = 6.29052095E-04;
  COFTD[414] = -3.60176541E-07;
  COFTD[415] = 6.30692185E-11;
  COFTD[416] = 1.55590191E-01;
  COFTD[417] = 6.34410708E-04;
  COFTD[418] = -3.63244723E-07;
  COFTD[419] = 6.36064770E-11;
  COFTD[420] = -1.70874524E-01;
  COFTD[421] = 9.08890621E-04;
  COFTD[422] = -4.18728580E-07;
  COFTD[423] = 6.38249139E-11;
  COFTD[424] = 1.90639212E-01;
  COFTD[425] = 6.29852586E-04;
  COFTD[426] = -3.64404255E-07;
  COFTD[427] = 6.43040032E-11;
  COFTD[428] = 1.19233508E-01;
  COFTD[429] = 7.41507647E-04;
  COFTD[430] = -4.16735950E-07;
  COFTD[431] = 7.20186288E-11;
  COFTD[432] = -4.08635516E-02;
  COFTD[433] = 9.50872131E-04;
  COFTD[434] = -4.96086689E-07;
  COFTD[435] = 8.17116550E-11;
  COFTD[436] = -7.11133364E-02;
  COFTD[437] = 9.72199182E-04;
  COFTD[438] = -4.98351215E-07;
  COFTD[439] = 8.11963035E-11;
  COFTD[440] = 7.80585398E-02;
  COFTD[441] = 8.00314922E-04;
  COFTD[442] = -4.42008348E-07;
  COFTD[443] = 7.54921049E-11;
  COFTD[444] = 1.77986945E-01;
  COFTD[445] = 6.42746776E-04;
  COFTD[446] = -3.70205088E-07;
  COFTD[447] = 6.51086787E-11;
  COFTD[448] = -1.93740325E-01;
  COFTD[449] = 9.23848088E-04;
  COFTD[450] = -4.11668757E-07;
  COFTD[451] = 6.13881632E-11;
  COFTD[452] = -1.94261364E-01;
  COFTD[453] = 9.26332658E-04;
  COFTD[454] = -4.12775887E-07;
  COFTD[455] = 6.15532587E-11;
  COFTD[456] = 2.16979391E-02;
  COFTD[457] = 8.83733254E-04;
  COFTD[458] = -4.75775315E-07;
  COFTD[459] = 7.99250739E-11;
  COFTD[460] = -7.10385365E-02;
  COFTD[461] = 9.71176582E-04;
  COFTD[462] = -4.97827028E-07;
  COFTD[463] = 8.11108979E-11;
  COFTD[464] = -7.10385365E-02;
  COFTD[465] = 9.71176582E-04;
  COFTD[466] = -4.97827028E-07;
  COFTD[467] = 8.11108979E-11;
  COFTD[468] = -7.10385365E-02;
  COFTD[469] = 9.71176582E-04;
  COFTD[470] = -4.97827028E-07;
  COFTD[471] = 8.11108979E-11;
  COFTD[472] = -7.09586820E-02;
  COFTD[473] = 9.70084882E-04;
  COFTD[474] = -4.97267421E-07;
  COFTD[475] = 8.10197211E-11;
  COFTD[476] = 1.18664547E-01;
  COFTD[477] = 7.37969302E-04;
  COFTD[478] = -4.14747359E-07;
  COFTD[479] = 7.16749686E-11;
  COFTD[480] = 4.30274891E-02;
  COFTD[481] = 8.57685658E-04;
  COFTD[482] = -4.66284171E-07;
  COFTD[483] = 7.88223022E-11;
  COFTD[484] = -9.71281513E-02;
  COFTD[485] = 9.86355401E-04;
  COFTD[486] = -4.97002006E-07;
  COFTD[487] = 8.01261875E-11;
  COFTD[488] = -9.72321398E-02;
  COFTD[489] = 9.87411425E-04;
  COFTD[490] = -4.97534112E-07;
  COFTD[491] = 8.02119732E-11;
  COFTD[492] = -1.72409417E-01;
  COFTD[493] = 9.86921909E-04;
  COFTD[494] = -4.62675779E-07;
  COFTD[495] = 7.13165744E-11;
  COFTD[496] = -1.72594378E-01;
  COFTD[497] = 9.87980678E-04;
  COFTD[498] = -4.63172137E-07;
  COFTD[499] = 7.13930828E-11;
  COFTD[500] = -1.26368129E-01;
  COFTD[501] = 9.44704421E-04;
  COFTD[502] = -4.62535759E-07;
  COFTD[503] = 7.32611748E-11;
  COFTD[504] = 1.58697069E-01;
  COFTD[505] = 6.47078838E-04;
  COFTD[506] = -3.70498118E-07;
  COFTD[507] = 6.48765928E-11;
  COFTD[508] = 6.18048523E-02;
  COFTD[509] = 8.32155100E-04;
  COFTD[510] = -4.56202122E-07;
  COFTD[511] = 7.75375973E-11;
  COFTD[512] = -9.26426158E-02;
  COFTD[513] = 9.72529780E-04;
  COFTD[514] = -4.91172464E-07;
  COFTD[515] = 7.92992237E-11;
  COFTD[516] = -9.45610976E-02;
  COFTD[517] = 9.92669331E-04;
  COFTD[518] = -5.01343868E-07;
  COFTD[519] = 8.09413850E-11;
  COFTD[520] = -9.55076507E-02;
  COFTD[521] = 1.00260591E-03;
  COFTD[522] = -5.06362302E-07;
  COFTD[523] = 8.17516053E-11;
  COFTD[524] = 4.85754017E-02;
  COFTD[525] = 8.76401394E-04;
  COFTD[526] = -4.77359650E-07;
  COFTD[527] = 8.07930141E-11;
  COFTD[528] = -9.24751183E-02;
  COFTD[529] = 9.70771450E-04;
  COFTD[530] = -4.90284426E-07;
  COFTD[531] = 7.91558510E-11;
  COFTD[532] = -9.44886946E-02;
  COFTD[533] = 9.91909269E-04;
  COFTD[534] = -5.00960002E-07;
  COFTD[535] = 8.08794102E-11;
  COFTD[536] = 7.23109656E-02;
  COFTD[537] = 8.40714132E-04;
  COFTD[538] = -4.62655337E-07;
  COFTD[539] = 7.88312843E-11;
  COFTD[540] = -9.22973960E-02;
  COFTD[541] = 9.68905784E-04;
  COFTD[542] = -4.89342179E-07;
  COFTD[543] = 7.90037262E-11;
  COFTD[544] = 9.82966288E-02;
  COFTD[545] = 7.95727671E-04;
  COFTD[546] = -4.42829734E-07;
  COFTD[547] = 7.60173030E-11;
  COFTD[548] = 1.27546413E-01;
  COFTD[549] = 7.31443739E-04;
  COFTD[550] = -4.12442988E-07;
  COFTD[551] = 7.14401532E-11;
  COFTD[552] = -1.46031181E-01;
  COFTD[553] = 1.02065654E-03;
  COFTD[554] = -4.95364562E-07;
  COFTD[555] = 7.80359229E-11;
  COFTD[556] = -1.45037567E-01;
  COFTD[557] = 1.01371187E-03;
  COFTD[558] = -4.91994042E-07;
  COFTD[559] = 7.75049571E-11;
  COFTD[560] = -1.43386768E-01;
  COFTD[561] = 1.00217393E-03;
  COFTD[562] = -4.86394228E-07;
  COFTD[563] = 7.66228055E-11;
  COFTD[564] = -2.18082603E-01;
  COFTD[565] = 8.41312324E-04;
  COFTD[566] = -3.35170922E-07;
  COFTD[567] = 4.60921032E-11;
  COFTD[568] = -9.71281513E-02;
  COFTD[569] = 9.86355401E-04;
  COFTD[570] = -4.97002006E-07;
  COFTD[571] = 8.01261875E-11;
  COFTD[572] = -9.71281513E-02;
  COFTD[573] = 9.86355401E-04;
  COFTD[574] = -4.97002006E-07;
  COFTD[575] = 8.01261875E-11;
}

// compute the critical parameters for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS(
  amrex::Real* Tci, amrex::Real* ai, amrex::Real* bi, amrex::Real* acentric_i)
{

  amrex::Real EPS[72];
  amrex::Real SIG[72];
  amrex::Real wt[72];
  amrex::Real Rcst = 83.144598; // in bar [CGS] !
  amrex::Real avogadro = 6.02214199e23;
  amrex::Real boltzmann = 1.3806503e-16; // we work in CGS

  egtransetEPS(EPS);
  egtransetSIG(SIG);
  get_mw(wt);

  // species 0: H2
  // Imported from NIST
  Tci[0] = 33.145000;
  ai[0] = 1e6 * 0.42748 * Rcst * Rcst * Tci[0] * Tci[0] /
          (2.015880 * 2.015880 * 12.964000);
  bi[0] = 0.08664 * Rcst * Tci[0] / (2.015880 * 12.964000);
  acentric_i[0] = -0.219000;

  // species 1: H
  Tci[1] = 1.316 * EPS[1];
  ai[1] = (5.55 * avogadro * avogadro * EPS[1] * boltzmann * 1e-24 * SIG[1] *
           SIG[1] * SIG[1]) /
          (wt[1] * wt[1]);
  bi[1] = 0.855 * avogadro * 1e-24 * SIG[1] * SIG[1] * SIG[1] / (wt[1]);
  acentric_i[1] = 0.0;

  // species 2: O
  Tci[2] = 1.316 * EPS[2];
  ai[2] = (5.55 * avogadro * avogadro * EPS[2] * boltzmann * 1e-24 * SIG[2] *
           SIG[2] * SIG[2]) /
          (wt[2] * wt[2]);
  bi[2] = 0.855 * avogadro * 1e-24 * SIG[2] * SIG[2] * SIG[2] / (wt[2]);
  acentric_i[2] = 0.0;

  // species 3: O2
  // Imported from NIST
  Tci[3] = 154.581000;
  ai[3] = 1e6 * 0.42748 * Rcst * Rcst * Tci[3] * Tci[3] /
          (31.998800 * 31.998800 * 50.430466);
  bi[3] = 0.08664 * Rcst * Tci[3] / (31.998800 * 50.430466);
  acentric_i[3] = 0.022200;

  // species 4: OH
  Tci[4] = 1.316 * EPS[4];
  ai[4] = (5.55 * avogadro * avogadro * EPS[4] * boltzmann * 1e-24 * SIG[4] *
           SIG[4] * SIG[4]) /
          (wt[4] * wt[4]);
  bi[4] = 0.855 * avogadro * 1e-24 * SIG[4] * SIG[4] * SIG[4] / (wt[4]);
  acentric_i[4] = 0.0;

  // species 5: H2O
  // Imported from NIST
  Tci[5] = 647.096000;
  ai[5] = 1e6 * 0.42748 * Rcst * Rcst * Tci[5] * Tci[5] /
          (18.015340 * 18.015340 * 220.640000);
  bi[5] = 0.08664 * Rcst * Tci[5] / (18.015340 * 220.640000);
  acentric_i[5] = 0.344300;

  // species 6: HO2
  Tci[6] = 1.316 * EPS[6];
  ai[6] = (5.55 * avogadro * avogadro * EPS[6] * boltzmann * 1e-24 * SIG[6] *
           SIG[6] * SIG[6]) /
          (wt[6] * wt[6]);
  bi[6] = 0.855 * avogadro * 1e-24 * SIG[6] * SIG[6] * SIG[6] / (wt[6]);
  acentric_i[6] = 0.0;

  // species 7: H2O2
  Tci[7] = 1.316 * EPS[7];
  ai[7] = (5.55 * avogadro * avogadro * EPS[7] * boltzmann * 1e-24 * SIG[7] *
           SIG[7] * SIG[7]) /
          (wt[7] * wt[7]);
  bi[7] = 0.855 * avogadro * 1e-24 * SIG[7] * SIG[7] * SIG[7] / (wt[7]);
  acentric_i[7] = 0.0;

  // species 8: C
  Tci[8] = 1.316 * EPS[8];
  ai[8] = (5.55 * avogadro * avogadro * EPS[8] * boltzmann * 1e-24 * SIG[8] *
           SIG[8] * SIG[8]) /
          (wt[8] * wt[8]);
  bi[8] = 0.855 * avogadro * 1e-24 * SIG[8] * SIG[8] * SIG[8] / (wt[8]);
  acentric_i[8] = 0.0;

  // species 9: CH
  Tci[9] = 1.316 * EPS[9];
  ai[9] = (5.55 * avogadro * avogadro * EPS[9] * boltzmann * 1e-24 * SIG[9] *
           SIG[9] * SIG[9]) /
          (wt[9] * wt[9]);
  bi[9] = 0.855 * avogadro * 1e-24 * SIG[9] * SIG[9] * SIG[9] / (wt[9]);
  acentric_i[9] = 0.0;

  // species 10: CH2
  Tci[10] = 1.316 * EPS[10];
  ai[10] = (5.55 * avogadro * avogadro * EPS[10] * boltzmann * 1e-24 * SIG[10] *
            SIG[10] * SIG[10]) /
           (wt[10] * wt[10]);
  bi[10] = 0.855 * avogadro * 1e-24 * SIG[10] * SIG[10] * SIG[10] / (wt[10]);
  acentric_i[10] = 0.0;

  // species 11: CH2(S)
  Tci[11] = 1.316 * EPS[11];
  ai[11] = (5.55 * avogadro * avogadro * EPS[11] * boltzmann * 1e-24 * SIG[11] *
            SIG[11] * SIG[11]) /
           (wt[11] * wt[11]);
  bi[11] = 0.855 * avogadro * 1e-24 * SIG[11] * SIG[11] * SIG[11] / (wt[11]);
  acentric_i[11] = 0.0;

  // species 12: CH3
  Tci[12] = 1.316 * EPS[12];
  ai[12] = (5.55 * avogadro * avogadro * EPS[12] * boltzmann * 1e-24 * SIG[12] *
            SIG[12] * SIG[12]) /
           (wt[12] * wt[12]);
  bi[12] = 0.855 * avogadro * 1e-24 * SIG[12] * SIG[12] * SIG[12] / (wt[12]);
  acentric_i[12] = 0.0;

  // species 13: CH4
  // Imported from NIST
  Tci[13] = 190.560000;
  ai[13] = 1e6 * 0.42748 * Rcst * Rcst * Tci[13] * Tci[13] /
           (16.043030 * 16.043030 * 45.990000);
  bi[13] = 0.08664 * Rcst * Tci[13] / (16.043030 * 45.990000);
  acentric_i[13] = 0.011000;

  // species 14: CO
  // Imported from NIST
  Tci[14] = 132.850000;
  ai[14] = 1e6 * 0.42748 * Rcst * Rcst * Tci[14] * Tci[14] /
           (28.010000 * 28.010000 * 34.940000);
  bi[14] = 0.08664 * Rcst * Tci[14] / (28.010000 * 34.940000);
  acentric_i[14] = 0.045000;

  // species 15: CO2
  // Imported from NIST
  Tci[15] = 304.120000;
  ai[15] = 1e6 * 0.42748 * Rcst * Rcst * Tci[15] * Tci[15] /
           (44.009950 * 44.009950 * 73.740000);
  bi[15] = 0.08664 * Rcst * Tci[15] / (44.009950 * 73.740000);
  acentric_i[15] = 0.225000;

  // species 16: HCO
  Tci[16] = 1.316 * EPS[16];
  ai[16] = (5.55 * avogadro * avogadro * EPS[16] * boltzmann * 1e-24 * SIG[16] *
            SIG[16] * SIG[16]) /
           (wt[16] * wt[16]);
  bi[16] = 0.855 * avogadro * 1e-24 * SIG[16] * SIG[16] * SIG[16] / (wt[16]);
  acentric_i[16] = 0.0;

  // species 17: CH2O
  Tci[17] = 1.316 * EPS[17];
  ai[17] = (5.55 * avogadro * avogadro * EPS[17] * boltzmann * 1e-24 * SIG[17] *
            SIG[17] * SIG[17]) /
           (wt[17] * wt[17]);
  bi[17] = 0.855 * avogadro * 1e-24 * SIG[17] * SIG[17] * SIG[17] / (wt[17]);
  acentric_i[17] = 0.0;

  // species 18: CH2OH
  Tci[18] = 1.316 * EPS[18];
  ai[18] = (5.55 * avogadro * avogadro * EPS[18] * boltzmann * 1e-24 * SIG[18] *
            SIG[18] * SIG[18]) /
           (wt[18] * wt[18]);
  bi[18] = 0.855 * avogadro * 1e-24 * SIG[18] * SIG[18] * SIG[18] / (wt[18]);
  acentric_i[18] = 0.0;

  // species 19: CH3O
  Tci[19] = 1.316 * EPS[19];
  ai[19] = (5.55 * avogadro * avogadro * EPS[19] * boltzmann * 1e-24 * SIG[19] *
            SIG[19] * SIG[19]) /
           (wt[19] * wt[19]);
  bi[19] = 0.855 * avogadro * 1e-24 * SIG[19] * SIG[19] * SIG[19] / (wt[19]);
  acentric_i[19] = 0.0;

  // species 20: CH3OH
  // Imported from NIST
  Tci[20] = 512.640000;
  ai[20] = 1e6 * 0.42748 * Rcst * Rcst * Tci[20] * Tci[20] /
           (32.042000 * 32.042000 * 80.970000);
  bi[20] = 0.08664 * Rcst * Tci[20] / (32.042000 * 80.970000);
  acentric_i[20] = 0.565000;

  // species 21: C2H
  Tci[21] = 1.316 * EPS[21];
  ai[21] = (5.55 * avogadro * avogadro * EPS[21] * boltzmann * 1e-24 * SIG[21] *
            SIG[21] * SIG[21]) /
           (wt[21] * wt[21]);
  bi[21] = 0.855 * avogadro * 1e-24 * SIG[21] * SIG[21] * SIG[21] / (wt[21]);
  acentric_i[21] = 0.0;

  // species 22: C2H2
  // Imported from NIST
  Tci[22] = 308.300000;
  ai[22] = 1e6 * 0.42748 * Rcst * Rcst * Tci[22] * Tci[22] /
           (26.038000 * 26.038000 * 61.140000);
  bi[22] = 0.08664 * Rcst * Tci[22] / (26.038000 * 61.140000);
  acentric_i[22] = 0.189000;

  // species 23: C2H3
  Tci[23] = 1.316 * EPS[23];
  ai[23] = (5.55 * avogadro * avogadro * EPS[23] * boltzmann * 1e-24 * SIG[23] *
            SIG[23] * SIG[23]) /
           (wt[23] * wt[23]);
  bi[23] = 0.855 * avogadro * 1e-24 * SIG[23] * SIG[23] * SIG[23] / (wt[23]);
  acentric_i[23] = 0.0;

  // species 24: C2H4
  // Imported from NIST
  Tci[24] = 282.340000;
  ai[24] = 1e6 * 0.42748 * Rcst * Rcst * Tci[24] * Tci[24] /
           (28.054000 * 28.054000 * 50.410000);
  bi[24] = 0.08664 * Rcst * Tci[24] / (28.054000 * 50.410000);
  acentric_i[24] = 0.087000;

  // species 25: C2H5
  Tci[25] = 1.316 * EPS[25];
  ai[25] = (5.55 * avogadro * avogadro * EPS[25] * boltzmann * 1e-24 * SIG[25] *
            SIG[25] * SIG[25]) /
           (wt[25] * wt[25]);
  bi[25] = 0.855 * avogadro * 1e-24 * SIG[25] * SIG[25] * SIG[25] / (wt[25]);
  acentric_i[25] = 0.0;

  // species 26: C2H6
  // Imported from NIST
  Tci[26] = 305.320000;
  ai[26] = 1e6 * 0.42748 * Rcst * Rcst * Tci[26] * Tci[26] /
           (30.070120 * 30.070120 * 48.720000);
  bi[26] = 0.08664 * Rcst * Tci[26] / (30.070120 * 48.720000);
  acentric_i[26] = 0.099000;

  // species 27: HCCO
  Tci[27] = 1.316 * EPS[27];
  ai[27] = (5.55 * avogadro * avogadro * EPS[27] * boltzmann * 1e-24 * SIG[27] *
            SIG[27] * SIG[27]) /
           (wt[27] * wt[27]);
  bi[27] = 0.855 * avogadro * 1e-24 * SIG[27] * SIG[27] * SIG[27] / (wt[27]);
  acentric_i[27] = 0.0;

  // species 28: CH2CO
  Tci[28] = 1.316 * EPS[28];
  ai[28] = (5.55 * avogadro * avogadro * EPS[28] * boltzmann * 1e-24 * SIG[28] *
            SIG[28] * SIG[28]) /
           (wt[28] * wt[28]);
  bi[28] = 0.855 * avogadro * 1e-24 * SIG[28] * SIG[28] * SIG[28] / (wt[28]);
  acentric_i[28] = 0.0;

  // species 29: HCCOH
  Tci[29] = 1.316 * EPS[29];
  ai[29] = (5.55 * avogadro * avogadro * EPS[29] * boltzmann * 1e-24 * SIG[29] *
            SIG[29] * SIG[29]) /
           (wt[29] * wt[29]);
  bi[29] = 0.855 * avogadro * 1e-24 * SIG[29] * SIG[29] * SIG[29] / (wt[29]);
  acentric_i[29] = 0.0;

  // species 30: N
  Tci[30] = 1.316 * EPS[30];
  ai[30] = (5.55 * avogadro * avogadro * EPS[30] * boltzmann * 1e-24 * SIG[30] *
            SIG[30] * SIG[30]) /
           (wt[30] * wt[30]);
  bi[30] = 0.855 * avogadro * 1e-24 * SIG[30] * SIG[30] * SIG[30] / (wt[30]);
  acentric_i[30] = 0.0;

  // species 31: NH
  Tci[31] = 1.316 * EPS[31];
  ai[31] = (5.55 * avogadro * avogadro * EPS[31] * boltzmann * 1e-24 * SIG[31] *
            SIG[31] * SIG[31]) /
           (wt[31] * wt[31]);
  bi[31] = 0.855 * avogadro * 1e-24 * SIG[31] * SIG[31] * SIG[31] / (wt[31]);
  acentric_i[31] = 0.0;

  // species 32: NH2
  Tci[32] = 1.316 * EPS[32];
  ai[32] = (5.55 * avogadro * avogadro * EPS[32] * boltzmann * 1e-24 * SIG[32] *
            SIG[32] * SIG[32]) /
           (wt[32] * wt[32]);
  bi[32] = 0.855 * avogadro * 1e-24 * SIG[32] * SIG[32] * SIG[32] / (wt[32]);
  acentric_i[32] = 0.0;

  // species 33: NH3
  Tci[33] = 1.316 * EPS[33];
  ai[33] = (5.55 * avogadro * avogadro * EPS[33] * boltzmann * 1e-24 * SIG[33] *
            SIG[33] * SIG[33]) /
           (wt[33] * wt[33]);
  bi[33] = 0.855 * avogadro * 1e-24 * SIG[33] * SIG[33] * SIG[33] / (wt[33]);
  acentric_i[33] = 0.0;

  // species 34: NNH
  Tci[34] = 1.316 * EPS[34];
  ai[34] = (5.55 * avogadro * avogadro * EPS[34] * boltzmann * 1e-24 * SIG[34] *
            SIG[34] * SIG[34]) /
           (wt[34] * wt[34]);
  bi[34] = 0.855 * avogadro * 1e-24 * SIG[34] * SIG[34] * SIG[34] / (wt[34]);
  acentric_i[34] = 0.0;

  // species 35: NO
  // Imported from NIST
  Tci[35] = 180.000000;
  ai[35] = 1e6 * 0.42748 * Rcst * Rcst * Tci[35] * Tci[35] /
           (30.006000 * 30.006000 * 64.800000);
  bi[35] = 0.08664 * Rcst * Tci[35] / (30.006000 * 64.800000);
  acentric_i[35] = 0.582000;

  // species 36: NO2
  Tci[36] = 1.316 * EPS[36];
  ai[36] = (5.55 * avogadro * avogadro * EPS[36] * boltzmann * 1e-24 * SIG[36] *
            SIG[36] * SIG[36]) /
           (wt[36] * wt[36]);
  bi[36] = 0.855 * avogadro * 1e-24 * SIG[36] * SIG[36] * SIG[36] / (wt[36]);
  acentric_i[36] = 0.0;

  // species 37: N2O
  // Imported from NIST
  Tci[37] = 309.600000;
  ai[37] = 1e6 * 0.42748 * Rcst * Rcst * Tci[37] * Tci[37] /
           (44.013000 * 44.013000 * 72.550000);
  bi[37] = 0.08664 * Rcst * Tci[37] / (44.013000 * 72.550000);
  acentric_i[37] = 0.162000;

  // species 38: HNO
  Tci[38] = 1.316 * EPS[38];
  ai[38] = (5.55 * avogadro * avogadro * EPS[38] * boltzmann * 1e-24 * SIG[38] *
            SIG[38] * SIG[38]) /
           (wt[38] * wt[38]);
  bi[38] = 0.855 * avogadro * 1e-24 * SIG[38] * SIG[38] * SIG[38] / (wt[38]);
  acentric_i[38] = 0.0;

  // species 39: CN
  Tci[39] = 1.316 * EPS[39];
  ai[39] = (5.55 * avogadro * avogadro * EPS[39] * boltzmann * 1e-24 * SIG[39] *
            SIG[39] * SIG[39]) /
           (wt[39] * wt[39]);
  bi[39] = 0.855 * avogadro * 1e-24 * SIG[39] * SIG[39] * SIG[39] / (wt[39]);
  acentric_i[39] = 0.0;

  // species 40: HCN
  Tci[40] = 1.316 * EPS[40];
  ai[40] = (5.55 * avogadro * avogadro * EPS[40] * boltzmann * 1e-24 * SIG[40] *
            SIG[40] * SIG[40]) /
           (wt[40] * wt[40]);
  bi[40] = 0.855 * avogadro * 1e-24 * SIG[40] * SIG[40] * SIG[40] / (wt[40]);
  acentric_i[40] = 0.0;

  // species 41: H2CN
  Tci[41] = 1.316 * EPS[41];
  ai[41] = (5.55 * avogadro * avogadro * EPS[41] * boltzmann * 1e-24 * SIG[41] *
            SIG[41] * SIG[41]) /
           (wt[41] * wt[41]);
  bi[41] = 0.855 * avogadro * 1e-24 * SIG[41] * SIG[41] * SIG[41] / (wt[41]);
  acentric_i[41] = 0.0;

  // species 42: HCNN
  Tci[42] = 1.316 * EPS[42];
  ai[42] = (5.55 * avogadro * avogadro * EPS[42] * boltzmann * 1e-24 * SIG[42] *
            SIG[42] * SIG[42]) /
           (wt[42] * wt[42]);
  bi[42] = 0.855 * avogadro * 1e-24 * SIG[42] * SIG[42] * SIG[42] / (wt[42]);
  acentric_i[42] = 0.0;

  // species 43: HCNO
  Tci[43] = 1.316 * EPS[43];
  ai[43] = (5.55 * avogadro * avogadro * EPS[43] * boltzmann * 1e-24 * SIG[43] *
            SIG[43] * SIG[43]) /
           (wt[43] * wt[43]);
  bi[43] = 0.855 * avogadro * 1e-24 * SIG[43] * SIG[43] * SIG[43] / (wt[43]);
  acentric_i[43] = 0.0;

  // species 44: HOCN
  Tci[44] = 1.316 * EPS[44];
  ai[44] = (5.55 * avogadro * avogadro * EPS[44] * boltzmann * 1e-24 * SIG[44] *
            SIG[44] * SIG[44]) /
           (wt[44] * wt[44]);
  bi[44] = 0.855 * avogadro * 1e-24 * SIG[44] * SIG[44] * SIG[44] / (wt[44]);
  acentric_i[44] = 0.0;

  // species 45: HNCO
  Tci[45] = 1.316 * EPS[45];
  ai[45] = (5.55 * avogadro * avogadro * EPS[45] * boltzmann * 1e-24 * SIG[45] *
            SIG[45] * SIG[45]) /
           (wt[45] * wt[45]);
  bi[45] = 0.855 * avogadro * 1e-24 * SIG[45] * SIG[45] * SIG[45] / (wt[45]);
  acentric_i[45] = 0.0;

  // species 46: NCO
  Tci[46] = 1.316 * EPS[46];
  ai[46] = (5.55 * avogadro * avogadro * EPS[46] * boltzmann * 1e-24 * SIG[46] *
            SIG[46] * SIG[46]) /
           (wt[46] * wt[46]);
  bi[46] = 0.855 * avogadro * 1e-24 * SIG[46] * SIG[46] * SIG[46] / (wt[46]);
  acentric_i[46] = 0.0;

  // species 47: N2
  // Imported from NIST
  Tci[47] = 126.192000;
  ai[47] = 1e6 * 0.42748 * Rcst * Rcst * Tci[47] * Tci[47] /
           (28.013400 * 28.013400 * 33.958000);
  bi[47] = 0.08664 * Rcst * Tci[47] / (28.013400 * 33.958000);
  acentric_i[47] = 0.037200;

  // species 48: AR
  // Imported from NIST
  Tci[48] = 150.860000;
  ai[48] = 1e6 * 0.42748 * Rcst * Rcst * Tci[48] * Tci[48] /
           (39.948000 * 39.948000 * 48.980000);
  bi[48] = 0.08664 * Rcst * Tci[48] / (39.948000 * 48.980000);
  acentric_i[48] = -0.002000;

  // species 49: C3H7
  Tci[49] = 1.316 * EPS[49];
  ai[49] = (5.55 * avogadro * avogadro * EPS[49] * boltzmann * 1e-24 * SIG[49] *
            SIG[49] * SIG[49]) /
           (wt[49] * wt[49]);
  bi[49] = 0.855 * avogadro * 1e-24 * SIG[49] * SIG[49] * SIG[49] / (wt[49]);
  acentric_i[49] = 0.0;

  // species 50: C3H8
  // Imported from NIST
  Tci[50] = 369.830000;
  ai[50] = 1e6 * 0.42748 * Rcst * Rcst * Tci[50] * Tci[50] /
           (44.097210 * 44.097210 * 42.480000);
  bi[50] = 0.08664 * Rcst * Tci[50] / (44.097210 * 42.480000);
  acentric_i[50] = 0.152000;

  // species 51: CH2CHO
  Tci[51] = 1.316 * EPS[51];
  ai[51] = (5.55 * avogadro * avogadro * EPS[51] * boltzmann * 1e-24 * SIG[51] *
            SIG[51] * SIG[51]) /
           (wt[51] * wt[51]);
  bi[51] = 0.855 * avogadro * 1e-24 * SIG[51] * SIG[51] * SIG[51] / (wt[51]);
  acentric_i[51] = 0.0;

  // species 52: CH3CHO
  Tci[52] = 1.316 * EPS[52];
  ai[52] = (5.55 * avogadro * avogadro * EPS[52] * boltzmann * 1e-24 * SIG[52] *
            SIG[52] * SIG[52]) /
           (wt[52] * wt[52]);
  bi[52] = 0.855 * avogadro * 1e-24 * SIG[52] * SIG[52] * SIG[52] / (wt[52]);
  acentric_i[52] = 0.0;

  // species 53: HF
  Tci[53] = 1.316 * EPS[53];
  ai[53] = (5.55 * avogadro * avogadro * EPS[53] * boltzmann * 1e-24 * SIG[53] *
            SIG[53] * SIG[53]) /
           (wt[53] * wt[53]);
  bi[53] = 0.855 * avogadro * 1e-24 * SIG[53] * SIG[53] * SIG[53] / (wt[53]);
  acentric_i[53] = 0.0;

  // species 54: F
  Tci[54] = 1.316 * EPS[54];
  ai[54] = (5.55 * avogadro * avogadro * EPS[54] * boltzmann * 1e-24 * SIG[54] *
            SIG[54] * SIG[54]) /
           (wt[54] * wt[54]);
  bi[54] = 0.855 * avogadro * 1e-24 * SIG[54] * SIG[54] * SIG[54] / (wt[54]);
  acentric_i[54] = 0.0;

  // species 55: F2
  Tci[55] = 1.316 * EPS[55];
  ai[55] = (5.55 * avogadro * avogadro * EPS[55] * boltzmann * 1e-24 * SIG[55] *
            SIG[55] * SIG[55]) /
           (wt[55] * wt[55]);
  bi[55] = 0.855 * avogadro * 1e-24 * SIG[55] * SIG[55] * SIG[55] / (wt[55]);
  acentric_i[55] = 0.0;

  // species 56: CH3F
  Tci[56] = 1.316 * EPS[56];
  ai[56] = (5.55 * avogadro * avogadro * EPS[56] * boltzmann * 1e-24 * SIG[56] *
            SIG[56] * SIG[56]) /
           (wt[56] * wt[56]);
  bi[56] = 0.855 * avogadro * 1e-24 * SIG[56] * SIG[56] * SIG[56] / (wt[56]);
  acentric_i[56] = 0.0;

  // species 57: CH2F2
  Tci[57] = 1.316 * EPS[57];
  ai[57] = (5.55 * avogadro * avogadro * EPS[57] * boltzmann * 1e-24 * SIG[57] *
            SIG[57] * SIG[57]) /
           (wt[57] * wt[57]);
  bi[57] = 0.855 * avogadro * 1e-24 * SIG[57] * SIG[57] * SIG[57] / (wt[57]);
  acentric_i[57] = 0.0;

  // species 58: CHF3
  Tci[58] = 1.316 * EPS[58];
  ai[58] = (5.55 * avogadro * avogadro * EPS[58] * boltzmann * 1e-24 * SIG[58] *
            SIG[58] * SIG[58]) /
           (wt[58] * wt[58]);
  bi[58] = 0.855 * avogadro * 1e-24 * SIG[58] * SIG[58] * SIG[58] / (wt[58]);
  acentric_i[58] = 0.0;

  // species 59: CF4
  Tci[59] = 1.316 * EPS[59];
  ai[59] = (5.55 * avogadro * avogadro * EPS[59] * boltzmann * 1e-24 * SIG[59] *
            SIG[59] * SIG[59]) /
           (wt[59] * wt[59]);
  bi[59] = 0.855 * avogadro * 1e-24 * SIG[59] * SIG[59] * SIG[59] / (wt[59]);
  acentric_i[59] = 0.0;

  // species 60: CH2F
  Tci[60] = 1.316 * EPS[60];
  ai[60] = (5.55 * avogadro * avogadro * EPS[60] * boltzmann * 1e-24 * SIG[60] *
            SIG[60] * SIG[60]) /
           (wt[60] * wt[60]);
  bi[60] = 0.855 * avogadro * 1e-24 * SIG[60] * SIG[60] * SIG[60] / (wt[60]);
  acentric_i[60] = 0.0;

  // species 61: CHF2
  Tci[61] = 1.316 * EPS[61];
  ai[61] = (5.55 * avogadro * avogadro * EPS[61] * boltzmann * 1e-24 * SIG[61] *
            SIG[61] * SIG[61]) /
           (wt[61] * wt[61]);
  bi[61] = 0.855 * avogadro * 1e-24 * SIG[61] * SIG[61] * SIG[61] / (wt[61]);
  acentric_i[61] = 0.0;

  // species 62: CF3
  Tci[62] = 1.316 * EPS[62];
  ai[62] = (5.55 * avogadro * avogadro * EPS[62] * boltzmann * 1e-24 * SIG[62] *
            SIG[62] * SIG[62]) /
           (wt[62] * wt[62]);
  bi[62] = 0.855 * avogadro * 1e-24 * SIG[62] * SIG[62] * SIG[62] / (wt[62]);
  acentric_i[62] = 0.0;

  // species 63: CHF
  Tci[63] = 1.316 * EPS[63];
  ai[63] = (5.55 * avogadro * avogadro * EPS[63] * boltzmann * 1e-24 * SIG[63] *
            SIG[63] * SIG[63]) /
           (wt[63] * wt[63]);
  bi[63] = 0.855 * avogadro * 1e-24 * SIG[63] * SIG[63] * SIG[63] / (wt[63]);
  acentric_i[63] = 0.0;

  // species 64: CF2
  Tci[64] = 1.316 * EPS[64];
  ai[64] = (5.55 * avogadro * avogadro * EPS[64] * boltzmann * 1e-24 * SIG[64] *
            SIG[64] * SIG[64]) /
           (wt[64] * wt[64]);
  bi[64] = 0.855 * avogadro * 1e-24 * SIG[64] * SIG[64] * SIG[64] / (wt[64]);
  acentric_i[64] = 0.0;

  // species 65: CF
  Tci[65] = 1.316 * EPS[65];
  ai[65] = (5.55 * avogadro * avogadro * EPS[65] * boltzmann * 1e-24 * SIG[65] *
            SIG[65] * SIG[65]) /
           (wt[65] * wt[65]);
  bi[65] = 0.855 * avogadro * 1e-24 * SIG[65] * SIG[65] * SIG[65] / (wt[65]);
  acentric_i[65] = 0.0;

  // species 66: CF3O
  Tci[66] = 1.316 * EPS[66];
  ai[66] = (5.55 * avogadro * avogadro * EPS[66] * boltzmann * 1e-24 * SIG[66] *
            SIG[66] * SIG[66]) /
           (wt[66] * wt[66]);
  bi[66] = 0.855 * avogadro * 1e-24 * SIG[66] * SIG[66] * SIG[66] / (wt[66]);
  acentric_i[66] = 0.0;

  // species 67: CF2O
  Tci[67] = 1.316 * EPS[67];
  ai[67] = (5.55 * avogadro * avogadro * EPS[67] * boltzmann * 1e-24 * SIG[67] *
            SIG[67] * SIG[67]) /
           (wt[67] * wt[67]);
  bi[67] = 0.855 * avogadro * 1e-24 * SIG[67] * SIG[67] * SIG[67] / (wt[67]);
  acentric_i[67] = 0.0;

  // species 68: CHFO
  Tci[68] = 1.316 * EPS[68];
  ai[68] = (5.55 * avogadro * avogadro * EPS[68] * boltzmann * 1e-24 * SIG[68] *
            SIG[68] * SIG[68]) /
           (wt[68] * wt[68]);
  bi[68] = 0.855 * avogadro * 1e-24 * SIG[68] * SIG[68] * SIG[68] / (wt[68]);
  acentric_i[68] = 0.0;

  // species 69: CFO
  Tci[69] = 1.316 * EPS[69];
  ai[69] = (5.55 * avogadro * avogadro * EPS[69] * boltzmann * 1e-24 * SIG[69] *
            SIG[69] * SIG[69]) /
           (wt[69] * wt[69]);
  bi[69] = 0.855 * avogadro * 1e-24 * SIG[69] * SIG[69] * SIG[69] / (wt[69]);
  acentric_i[69] = 0.0;

  // species 70: iC3H7
  Tci[70] = 1.316 * EPS[70];
  ai[70] = (5.55 * avogadro * avogadro * EPS[70] * boltzmann * 1e-24 * SIG[70] *
            SIG[70] * SIG[70]) /
           (wt[70] * wt[70]);
  bi[70] = 0.855 * avogadro * 1e-24 * SIG[70] * SIG[70] * SIG[70] / (wt[70]);
  acentric_i[70] = 0.0;

  // species 71: nC3H7
  Tci[71] = 1.316 * EPS[71];
  ai[71] = (5.55 * avogadro * avogadro * EPS[71] * boltzmann * 1e-24 * SIG[71] *
            SIG[71] * SIG[71]) /
           (wt[71] * wt[71]);
  bi[71] = 0.855 * avogadro * 1e-24 * SIG[71] * SIG[71] * SIG[71] / (wt[71]);
  acentric_i[71] = 0.0;
}

// compute the critical parameter quantities for each species for SRK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS_SRK(
  amrex::Real* sqrtOneOverTc,
  amrex::Real* sqrtAsti,
  amrex::Real* Bi,
  amrex::Real* Fomega)
{

  // species 0: H2
  // Imported from NIST
  sqrtOneOverTc[0] = 1.7369646834812e-01;
  sqrtAsti[0] = 2.4824229305911e+05;
  Bi[0] = 9.1362254169923e+00;
  Fomega[0] = 1.3798618890700e-01;

  // species 1: H
  // Computed from Lennard-Jones
  sqrtOneOverTc[1] = 7.2391579785311e-02;
  sqrtAsti[1] = 5.8451221185793e+05;
  Bi[1] = 4.4006634563410e+00;
  Fomega[1] = 4.8508000000000e-01;

  // species 2: O
  // Computed from Lennard-Jones
  sqrtOneOverTc[2] = 9.7460146948181e-02;
  sqrtAsti[2] = 4.2500156012386e+04;
  Bi[2] = 6.6930234851885e-01;
  Fomega[2] = 4.8508000000000e-01;

  // species 3: O2
  // Imported from NIST
  sqrtOneOverTc[3] = 8.0430717653241e-02;
  sqrtAsti[3] = 3.6980081924740e+04;
  Bi[3] = 6.9005216444999e-01;
  Fomega[3] = 5.1945301904908e-01;

  // species 4: OH
  // Computed from Lennard-Jones
  sqrtOneOverTc[4] = 9.7460146948181e-02;
  sqrtAsti[4] = 3.9981183985545e+04;
  Bi[4] = 6.2963299076575e-01;
  Fomega[4] = 4.8508000000000e-01;

  // species 5: H2O
  // Imported from NIST
  sqrtOneOverTc[5] = 3.9311140369715e-02;
  sqrtAsti[5] = 1.3145468419592e+05;
  Bi[5] = 1.1727204136223e+00;
  Fomega[5] = 1.0013577274636e+00;

  // species 6: HO2
  // Computed from Lennard-Jones
  sqrtOneOverTc[6] = 8.4114315417892e-02;
  sqrtAsti[6] = 3.3657825710980e+04;
  Bi[6] = 6.4505861132042e-01;
  Fomega[6] = 4.8508000000000e-01;

  // species 7: H2O2
  // Computed from Lennard-Jones
  sqrtOneOverTc[7] = 8.4114315417892e-02;
  sqrtAsti[7] = 3.2660380884830e+04;
  Bi[7] = 6.2594239211036e-01;
  Fomega[7] = 4.8508000000000e-01;

  // species 8: C
  // Computed from Lennard-Jones
  sqrtOneOverTc[8] = 1.0316275924140e-01;
  sqrtAsti[8] = 7.0240119914876e+04;
  Bi[8] = 1.5377647194458e+00;
  Fomega[8] = 4.8508000000000e-01;

  // species 9: CH
  // Computed from Lennard-Jones
  sqrtOneOverTc[9] = 9.7460146948181e-02;
  sqrtAsti[9] = 5.2228281438065e+04;
  Bi[9] = 8.2250313188056e-01;
  Fomega[9] = 4.8508000000000e-01;

  // species 10: CH2
  // Computed from Lennard-Jones
  sqrtOneOverTc[10] = 7.2642504557751e-02;
  sqrtAsti[10] = 1.0564067619908e+05;
  Bi[10] = 2.0142023516102e+00;
  Fomega[10] = 4.8508000000000e-01;

  // species 11: CH2(S)
  // Computed from Lennard-Jones
  sqrtOneOverTc[11] = 7.2642504557751e-02;
  sqrtAsti[11] = 1.0564067619908e+05;
  Bi[11] = 2.0142023516102e+00;
  Fomega[11] = 4.8508000000000e-01;

  // species 12: CH3
  // Computed from Lennard-Jones
  sqrtOneOverTc[12] = 7.2642504557751e-02;
  sqrtAsti[12] = 9.8558148656101e+04;
  Bi[12] = 1.8791630452967e+00;
  Fomega[12] = 4.8508000000000e-01;

  // species 13: CH4
  // Imported from NIST
  sqrtOneOverTc[13] = 7.2440948474968e-02;
  sqrtAsti[13] = 9.5215046085708e+04;
  Bi[13] = 1.8605203320660e+00;
  Fomega[13] = 5.0213035482700e-01;

  // species 14: CO
  // Imported from NIST
  sqrtOneOverTc[14] = 8.6759935530451e-02;
  sqrtAsti[14] = 4.3619324712923e+04;
  Bi[14] = 9.7786303823350e-01;
  Fomega[14] = 5.5459948367500e-01;

  // species 15: CO2
  // Imported from NIST
  sqrtOneOverTc[15] = 5.7342616962522e-02;
  sqrtAsti[15] = 4.3745610142919e+04;
  Bi[15] = 6.7506167841745e-01;
  Fomega[15] = 8.2653709187500e-01;

  // species 16: HCO
  // Computed from Lennard-Jones
  sqrtOneOverTc[16] = 3.9062261583604e-02;
  sqrtAsti[16] = 8.7202351509582e+04;
  Bi[16] = 8.2098075206475e-01;
  Fomega[16] = 4.8508000000000e-01;

  // species 17: CH2O
  // Computed from Lennard-Jones
  sqrtOneOverTc[17] = 3.9062261583604e-02;
  sqrtAsti[17] = 8.4274889632487e+04;
  Bi[17] = 7.9341968505345e-01;
  Fomega[17] = 4.8508000000000e-01;

  // species 18: CH2OH
  // Computed from Lennard-Jones
  sqrtOneOverTc[18] = 4.2687825036676e-02;
  sqrtAsti[18] = 7.7751566794340e+04;
  Bi[18] = 8.3360142526260e-01;
  Fomega[18] = 4.8508000000000e-01;

  // species 19: CH3O
  // Computed from Lennard-Jones
  sqrtOneOverTc[19] = 4.2687825036676e-02;
  sqrtAsti[19] = 7.7751566794340e+04;
  Bi[19] = 8.3360142526260e-01;
  Fomega[19] = 4.8508000000000e-01;

  // species 20: CH3OH
  // Imported from NIST
  sqrtOneOverTc[20] = 4.4166578333598e-02;
  sqrtAsti[20] = 9.6654647783180e+04;
  Bi[20] = 1.4233811698894e+00;
  Fomega[20] = 1.3133918400750e+00;

  // species 21: C2H
  // Computed from Lennard-Jones
  sqrtOneOverTc[21] = 6.0297445312864e-02;
  sqrtAsti[21] = 7.9933238165885e+04;
  Bi[21] = 1.4177766724704e+00;
  Fomega[21] = 4.8508000000000e-01;

  // species 22: C2H2
  // Imported from NIST
  sqrtOneOverTc[22] = 5.6952558345025e-02;
  sqrtAsti[22] = 8.2318059295808e+04;
  Bi[22] = 1.3950602011188e+00;
  Fomega[22] = 7.7293553202700e-01;

  // species 23: C2H3
  // Computed from Lennard-Jones
  sqrtOneOverTc[23] = 6.0297445312864e-02;
  sqrtAsti[23] = 7.3975040719223e+04;
  Bi[23] = 1.3120960627055e+00;
  Fomega[23] = 4.8508000000000e-01;

  // species 24: C2H4
  // Imported from NIST
  sqrtOneOverTc[24] = 5.9513267432530e-02;
  sqrtAsti[24] = 7.7056842134487e+04;
  Bi[24] = 1.4381805192666e+00;
  Fomega[24] = 6.1893034120300e-01;

  // species 25: C2H5
  // Computed from Lennard-Jones
  sqrtOneOverTc[25] = 5.4879915006830e-02;
  sqrtAsti[25] = 8.1297663542693e+04;
  Bi[25] = 1.4105965766665e+00;
  Fomega[25] = 4.8508000000000e-01;

  // species 26: C2H6
  // Imported from NIST
  sqrtOneOverTc[26] = 5.7229819101749e-02;
  sqrtAsti[26] = 7.9078494187583e+04;
  Bi[26] = 1.5012924285481e+00;
  Fomega[26] = 6.3721234098700e-01;

  // species 27: HCCO
  // Computed from Lennard-Jones
  sqrtOneOverTc[27] = 7.1174827921716e-02;
  sqrtAsti[27] = 1.9669985462832e+04;
  Bi[27] = 1.9608582502049e-01;
  Fomega[27] = 4.8508000000000e-01;

  // species 28: CH2CO
  // Computed from Lennard-Jones
  sqrtOneOverTc[28] = 4.1747340173827e-02;
  sqrtAsti[28] = 6.5499293944176e+04;
  Bi[28] = 7.6640249759188e-01;
  Fomega[28] = 4.8508000000000e-01;

  // species 29: HCCOH
  // Computed from Lennard-Jones
  sqrtOneOverTc[29] = 4.1747340173827e-02;
  sqrtAsti[29] = 6.5499293944176e+04;
  Bi[29] = 7.6640249759188e-01;
  Fomega[29] = 4.8508000000000e-01;

  // species 30: N
  // Computed from Lennard-Jones
  sqrtOneOverTc[30] = 1.0316275924140e-01;
  sqrtAsti[30] = 6.0230890290396e+04;
  Bi[30] = 1.3186329724611e+00;
  Fomega[30] = 4.8508000000000e-01;

  // species 31: NH
  // Computed from Lennard-Jones
  sqrtOneOverTc[31] = 9.7460146948181e-02;
  sqrtAsti[31] = 4.2837862875144e+04;
  Bi[31] = 6.3815972382091e-01;
  Fomega[31] = 4.8508000000000e-01;

  // species 32: NH2
  // Computed from Lennard-Jones
  sqrtOneOverTc[32] = 9.7460146948181e-02;
  sqrtAsti[32] = 4.0142951449185e+04;
  Bi[32] = 5.9801337160150e-01;
  Fomega[32] = 4.8508000000000e-01;

  // species 33: NH3
  // Computed from Lennard-Jones
  sqrtOneOverTc[33] = 3.9746557257596e-02;
  sqrtAsti[33] = 1.0711394012187e+05;
  Bi[33] = 7.5270623103672e-01;
  Fomega[33] = 4.8508000000000e-01;

  // species 34: NNH
  // Computed from Lennard-Jones
  sqrtOneOverTc[34] = 1.0316275924140e-01;
  sqrtAsti[34] = 3.5924732016994e+04;
  Bi[34] = 9.7197400314873e-01;
  Fomega[34] = 4.8508000000000e-01;

  // species 35: NO
  // Imported from NIST
  sqrtOneOverTc[35] = 7.4535599249993e-02;
  sqrtAsti[35] = 4.0510614916903e+04;
  Bi[35] = 6.6687106751983e-01;
  Fomega[35] = 1.3368144381880e+00;

  // species 36: NO2
  // Computed from Lennard-Jones
  sqrtOneOverTc[36] = 6.1639209090192e-02;
  sqrtAsti[36] = 3.3554545279404e+04;
  Bi[36] = 4.7986182770822e-01;
  Fomega[36] = 4.8508000000000e-01;

  // species 37: N2O
  // Imported from NIST
  sqrtOneOverTc[37] = 5.6832861622539e-02;
  sqrtAsti[37] = 4.4894507333531e+04;
  Bi[37] = 6.9844955486412e-01;
  Fomega[37] = 7.3247646842800e-01;

  // species 38: HNO
  // Computed from Lennard-Jones
  sqrtOneOverTc[38] = 8.0693142212399e-02;
  sqrtAsti[38] = 3.7890324657121e+04;
  Bi[38] = 7.0693914184172e-01;
  Fomega[38] = 4.8508000000000e-01;

  // species 39: CN
  // Computed from Lennard-Jones
  sqrtOneOverTc[39] = 1.0065640694646e-01;
  sqrtAsti[39] = 4.2014731128653e+04;
  Bi[39] = 1.1346300258194e+00;
  Fomega[39] = 4.8508000000000e-01;

  // species 40: HCN
  // Computed from Lennard-Jones
  sqrtOneOverTc[40] = 3.6543986531122e-02;
  sqrtAsti[40] = 1.0175918658528e+05;
  Bi[40] = 9.1128707055085e-01;
  Fomega[40] = 4.8508000000000e-01;

  // species 41: H2CN
  // Computed from Lennard-Jones
  sqrtOneOverTc[41] = 3.6543986531122e-02;
  sqrtAsti[41] = 9.8100298803377e+04;
  Bi[41] = 8.7852052396045e-01;
  Fomega[41] = 4.8508000000000e-01;

  // species 42: HCNN
  // Computed from Lennard-Jones
  sqrtOneOverTc[42] = 7.1174827921716e-02;
  sqrtAsti[42] = 1.9668067983197e+04;
  Bi[42] = 1.9606671008129e-01;
  Fomega[42] = 4.8508000000000e-01;

  // species 43: HCNO
  // Computed from Lennard-Jones
  sqrtOneOverTc[43] = 5.7181295893460e-02;
  sqrtAsti[43] = 4.4237890058841e+04;
  Bi[43] = 6.7129283860942e-01;
  Fomega[43] = 4.8508000000000e-01;

  // species 44: HOCN
  // Computed from Lennard-Jones
  sqrtOneOverTc[44] = 5.7181295893460e-02;
  sqrtAsti[44] = 4.4237890058841e+04;
  Bi[44] = 6.7129283860942e-01;
  Fomega[44] = 4.8508000000000e-01;

  // species 45: HNCO
  // Computed from Lennard-Jones
  sqrtOneOverTc[45] = 5.7181295893460e-02;
  sqrtAsti[45] = 4.4237890058841e+04;
  Bi[45] = 6.7129283860942e-01;
  Fomega[45] = 4.8508000000000e-01;

  // species 46: NCO
  // Computed from Lennard-Jones
  sqrtOneOverTc[46] = 5.7181295893460e-02;
  sqrtAsti[46] = 4.5299169854622e+04;
  Bi[46] = 6.8739734824405e-01;
  Fomega[46] = 4.8508000000000e-01;

  // species 47: N2
  // Imported from NIST
  sqrtOneOverTc[47] = 8.9019282240563e-02;
  sqrtAsti[47] = 4.2022983929562e+04;
  Bi[47] = 9.5560052221563e-01;
  Fomega[47] = 5.4259343186608e-01;

  // species 48: AR
  // Imported from NIST
  sqrtOneOverTc[48] = 8.1416597423011e-02;
  sqrtAsti[48] = 2.9333346340060e+04;
  Bi[48] = 5.5540880812616e-01;
  Fomega[48] = 4.8197599354800e-01;

  // species 49: C3H7
  // Computed from Lennard-Jones
  sqrtOneOverTc[49] = 5.3367780663448e-02;
  sqrtAsti[49] = 7.0270235769881e+04;
  Bi[49] = 1.4776169360332e+00;
  Fomega[49] = 4.8508000000000e-01;

  // species 50: C3H8
  // Imported from NIST
  sqrtOneOverTc[50] = 5.1999471688051e-02;
  sqrtAsti[50] = 6.9950481594105e+04;
  Bi[50] = 1.4221945108313e+00;
  Fomega[50] = 7.1743553324800e-01;

  // species 51: CH2CHO
  // Computed from Lennard-Jones
  sqrtOneOverTc[51] = 4.1747340173827e-02;
  sqrtAsti[51] = 6.3965473795593e+04;
  Bi[51] = 7.4845537905146e-01;
  Fomega[51] = 4.8508000000000e-01;

  // species 52: CH3CHO
  // Computed from Lennard-Jones
  sqrtOneOverTc[52] = 4.1747340173827e-02;
  sqrtAsti[52] = 6.2501845947638e+04;
  Bi[52] = 7.3132957554014e-01;
  Fomega[52] = 4.8508000000000e-01;

  // species 53: HF
  // Computed from Lennard-Jones
  sqrtOneOverTc[53] = 4.7986059195666e-02;
  sqrtAsti[53] = 8.4543333452156e+04;
  Bi[53] = 8.0288299658878e-01;
  Fomega[53] = 4.8508000000000e-01;

  // species 54: F
  // Computed from Lennard-Jones
  sqrtOneOverTc[54] = 9.7460146948181e-02;
  sqrtAsti[54] = 3.5790376181005e+04;
  Bi[54] = 5.6363517407650e-01;
  Fomega[54] = 4.8508000000000e-01;

  // species 55: F2
  // Computed from Lennard-Jones
  sqrtOneOverTc[55] = 7.7750719476415e-02;
  sqrtAsti[55] = 2.9500417246593e+04;
  Bi[55] = 4.8742363437959e-01;
  Fomega[55] = 4.8508000000000e-01;

  // species 56: CH3F
  // Computed from Lennard-Jones
  sqrtOneOverTc[56] = 5.3854427031479e-02;
  sqrtAsti[56] = 6.6375009746390e+04;
  Bi[56] = 1.0603560820326e+00;
  Fomega[56] = 4.8508000000000e-01;

  // species 57: CH2F2
  // Computed from Lennard-Jones
  sqrtOneOverTc[57] = 5.3854427031479e-02;
  sqrtAsti[57] = 4.3421802943280e+04;
  Bi[57] = 6.9367331198372e-01;
  Fomega[57] = 4.8508000000000e-01;

  // species 58: CHF3
  // Computed from Lennard-Jones
  sqrtOneOverTc[58] = 5.3854427031479e-02;
  sqrtAsti[58] = 3.2264414368655e+04;
  Bi[58] = 5.1543145740760e-01;
  Fomega[58] = 4.8508000000000e-01;

  // species 59: CF4
  // Computed from Lennard-Jones
  sqrtOneOverTc[59] = 7.5304279251109e-02;
  sqrtAsti[59] = 2.2072152884699e+04;
  Bi[59] = 5.9282768590268e-01;
  Fomega[59] = 4.8508000000000e-01;

  // species 60: CH2F
  // Computed from Lennard-Jones
  sqrtOneOverTc[60] = 5.3854427031479e-02;
  sqrtAsti[60] = 6.8400905069882e+04;
  Bi[60] = 1.0927202268521e+00;
  Fomega[60] = 4.8508000000000e-01;

  // species 61: CHF2
  // Computed from Lennard-Jones
  sqrtOneOverTc[61] = 5.3854427031479e-02;
  sqrtAsti[61] = 4.4279756203631e+04;
  Bi[61] = 7.0737931310054e-01;
  Fomega[61] = 4.8508000000000e-01;

  // species 62: CF3
  // Computed from Lennard-Jones
  sqrtOneOverTc[62] = 7.9246368608455e-02;
  sqrtAsti[62] = 2.3859946281787e+04;
  Bi[62] = 6.0156169449578e-01;
  Fomega[62] = 4.8508000000000e-01;

  // species 63: CHF
  // Computed from Lennard-Jones
  sqrtOneOverTc[63] = 5.3854427031479e-02;
  sqrtAsti[63] = 7.0554362424291e+04;
  Bi[63] = 1.1271222045222e+00;
  Fomega[63] = 4.8508000000000e-01;

  // species 64: CF2
  // Computed from Lennard-Jones
  sqrtOneOverTc[64] = 8.3880339122052e-02;
  sqrtAsti[64] = 2.7475574922707e+04;
  Bi[64] = 6.4765850772122e-01;
  Fomega[64] = 4.8508000000000e-01;

  // species 65: CF
  // Computed from Lennard-Jones
  sqrtOneOverTc[65] = 8.9814530494987e-02;
  sqrtAsti[65] = 3.6159964478291e+04;
  Bi[65] = 7.9751148108229e-01;
  Fomega[65] = 4.8508000000000e-01;

  // species 66: CF3O
  // Computed from Lennard-Jones
  sqrtOneOverTc[66] = 4.6561615933351e-02;
  sqrtAsti[66] = 3.9895977788507e+04;
  Bi[66] = 7.1524395411038e-01;
  Fomega[66] = 4.8508000000000e-01;

  // species 67: CF2O
  // Computed from Lennard-Jones
  sqrtOneOverTc[67] = 4.6561615933351e-02;
  sqrtAsti[67] = 5.1379034048867e+04;
  Bi[67] = 9.2110898161944e-01;
  Fomega[67] = 4.8508000000000e-01;

  // species 68: CHFO
  // Computed from Lennard-Jones
  sqrtOneOverTc[68] = 4.6561615933351e-02;
  sqrtAsti[68] = 7.0629320946177e+04;
  Bi[68] = 1.2662227520145e+00;
  Fomega[68] = 4.8508000000000e-01;

  // species 69: CFO
  // Computed from Lennard-Jones
  sqrtOneOverTc[69] = 2.9725066148006e-02;
  sqrtAsti[69] = 8.3196114174895e+04;
  Bi[69] = 7.0100575114232e-01;
  Fomega[69] = 4.8508000000000e-01;

  // species 70: iC3H7
  // Computed from Lennard-Jones
  sqrtOneOverTc[70] = 5.3367780663448e-02;
  sqrtAsti[70] = 7.0270235769881e+04;
  Bi[70] = 1.4776169360332e+00;
  Fomega[70] = 4.8508000000000e-01;

  // species 71: nC3H7
  // Computed from Lennard-Jones
  sqrtOneOverTc[71] = 5.3367780663448e-02;
  sqrtAsti[71] = 7.0270235769881e+04;
  Bi[71] = 1.4776169360332e+00;
  Fomega[71] = 4.8508000000000e-01;
}

// gauss-jordan solver external routine
// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort("sgjsolve not implemented, choose a different solver ");
}

// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve_simplified(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort(
    "sgjsolve_simplified not implemented, choose a different solver ");
}

#endif
