diff --git a/include/nvector/cuda/ThreadPartitioning.hpp b/include/nvector/cuda/ThreadPartitioning.hpp
index b5ee9f3a6..e4145e348 100644
--- a/include/nvector/cuda/ThreadPartitioning.hpp
+++ b/include/nvector/cuda/ThreadPartitioning.hpp
@@ -304,16 +304,26 @@ public:
 
   virtual void copyFromDevBuffer(unsigned int n) const
   {
+    cudaError_t err;
+
     /* If the host and device pointers are the same, then we dont need
        do any copy (this happens in the managed memory case), but we
        still need to synchronize the device to adhere to the unified
        memory access rules. */
-    if (h_buffer_ == d_buffer_) { cudaStreamSynchronize(stream_); return; }
-    cudaError_t err = cudaMemcpy(h_buffer_, d_buffer_, n*sizeof(T), cudaMemcpyDeviceToHost);
-    if(err != cudaSuccess)
-      std::cerr << "Failed to copy vector from device to host in "
-                << "suncudavec::ReducePartitioning::copyFromDevBuffer " 
-                << "(CUDA error code " << err << ")\n";
+    if (h_buffer_ == d_buffer_) { 
+      err = cudaStreamSynchronize(stream_);
+      if(err != cudaSuccess)
+        std::cerr << "Failed to synchronize stream in "
+                  << "suncudavec::ReducePartitioning::copyFromDevBuffer " 
+                  << "(CUDA error code " << err << ")\n";
+    } else {
+      err = cudaMemcpyAsync(h_buffer_, d_buffer_, n*sizeof(T), cudaMemcpyDeviceToHost,
+                            stream_);
+      if(err != cudaSuccess)
+        std::cerr << "Failed to copy vector from device to host in "
+                  << "suncudavec::ReducePartitioning::copyFromDevBuffer " 
+                  << "(CUDA error code " << err << ")\n";
+    }
   }
 
   static unsigned calcBufferSize(I N, unsigned block)
@@ -332,7 +342,7 @@ private:
     if (custom_allocator) {
 
       d_buffer_ = static_cast<T*>(allocfn_(bufferSize_));
-      if(h_buffer_ == NULL)
+      if(d_buffer_ == NULL)
         std::cerr << "Failed to allocate managed buffer with custom allocator in "
                   << "suncudavec::ReducePartitioning::allocateBuffer\n";
       h_buffer_ = d_buffer_;
diff --git a/include/nvector/cuda/Vector.hpp b/include/nvector/cuda/Vector.hpp
index 0b69b200c..ea64ee523 100644
--- a/include/nvector/cuda/Vector.hpp
+++ b/include/nvector/cuda/Vector.hpp
@@ -254,30 +254,50 @@ public:
 
   void copyToDev()
   {
+    cudaError_t err;
+
     /* If the host and device pointers are the same, then we dont need
        do any copy (this happens in the managed memory case), but we
        still need to synchronize the device to adhere to the unified
        memory access rules. */
-    if (h_vec_ == d_vec_) { cudaStreamSynchronize(partReduce_->stream()); return; }
-    cudaError_t err = cudaMemcpy(d_vec_, h_vec_, mem_size_, cudaMemcpyHostToDevice);
-    if(err != cudaSuccess)
-      std::cerr << "Failed to copy vector from host to device in "
-                << "suncudavec::Vector::copyToDev "
-                << "(error code " << err << ")\n";
+    if (h_vec_ == d_vec_) { 
+      err = cudaStreamSynchronize(partReduce_->stream());
+      if(err != cudaSuccess)
+        std::cerr << "Failed to synchronize stream in "
+                  << "suncudavec::Vector::copyToDev "
+                  << "(error code " << err << ")\n";
+    } else {
+      err = cudaMemcpyAsync(d_vec_, h_vec_, mem_size_, cudaMemcpyHostToDevice,
+                            partReduce_->stream());
+      if(err != cudaSuccess)
+        std::cerr << "Failed to copy vector from host to device in "
+                  << "suncudavec::Vector::copyToDev "
+                  << "(error code " << err << ")\n";
+    }
   }
 
   void copyFromDev()
   {
+    cudaError_t err;
+
     /* If the host and device pointers are the same, then we dont need
        do any copy (this happens in the managed memory case), but we
        still need to synchronize the device to adhere to the unified
        memory access rules. */
-    if (h_vec_ == d_vec_) { cudaStreamSynchronize(partReduce_->stream()); return; }
-    cudaError_t err = cudaMemcpy(h_vec_, d_vec_, mem_size_, cudaMemcpyDeviceToHost);
-    if(err != cudaSuccess)
-      std::cerr << "Failed to copy vector from device to host in "
-                << "suncudavec::Vector::copyFromDev "
-                << "(error code " << err << ")\n";
+    if (h_vec_ == d_vec_) { 
+      err = cudaStreamSynchronize(partReduce_->stream());
+      if(err != cudaSuccess)
+        std::cerr << "Failed to synchronize stream in "
+                  << "suncudavec::Vector::copyFromDev "
+                  << "(error code " << err << ")\n";
+    } else {
+      err = cudaMemcpyAsync(h_vec_, d_vec_, mem_size_, cudaMemcpyDeviceToHost,
+                            partReduce_->stream());
+      if(err != cudaSuccess)
+        std::cerr << "Failed to copy vector from device to host in "
+                  << "suncudavec::Vector::copyFromDev "
+                  << "(error code " << err << ")\n";
+    }
   }
 
   void setPartitioning(ThreadPartitioning<T, I>* stream, ThreadPartitioning<T, I>* reduce)
